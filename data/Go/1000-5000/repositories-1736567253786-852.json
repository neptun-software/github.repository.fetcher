{
  "metadata": {
    "timestamp": 1736567253786,
    "page": 852,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "corazawaf/coraza",
      "stars": 2365,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.236328125,
          "content": "*.exe\n*.exe~\n*.dll\n*.so\n*.o\n*.dylib\n.DS_Store\n.idea\n# Test binary, built with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\ntest/crs\n/main\nvendor/\ncoraza-waf\n__debug_bin\n\nbuild/\n\ngo.work.sum\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.373046875,
          "content": "run:\n  deadline: 5m\n\nlinters:\n  disable-all: true\n  enable:\n    # Enabled by default, see https://golangci-lint.run/usage/linters#enabled-by-default\n    - errcheck\n    - gosimple\n    - govet\n    - ineffassign\n    - staticcheck\n    - typecheck\n    - unused\n    - goimports\n    - gofmt\n    - gocritic\nissues:\n  exclude-rules:\n    - path: magefile\\.go\n      linters:\n        - deadcode"
        },
        {
          "name": ".pre-commit.hook",
          "type": "blob",
          "size": 0.0537109375,
          "content": "echo \"Executing precommit checks\"\ngo run mage.go check\n"
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.1328125,
          "content": "extends: default\n\nrules:\n  # 80 chars should be enough, but don't fail if a line is longer\n  line-length:\n    max: 80\n    level: warning"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.7607421875,
          "content": "# Changelog\n\n## Coraza v3  (unreleased)\n\n* Decided for Golang semantic versioning [#208](https://github.com/corazawaf/coraza/issues/208)\n\n* BREAKING: Required Go version gets bumped to 1.18 [#343](https://github.com/corazawaf/coraza/pull/343)\n\n* **CRS v4 Support** - [#218](https://github.com/corazawaf/coraza/issues/218) -\nCoraza v3 is fully compatible with the OWASP Core Rule Set v4. Support for Core Rule Set 3.x is dropped as rules are still based on PCRE. CRS v4 is solely based on RE2 and will soon see a public & official release.  \n\n  CRS further moved away from its dependency on old Regexp::Assemble to the new crs-toolchain helper to prevent rules incompatible with Coraza.\n\n* **FEATURE: TinyGo & WASM support & Proxy-WASM Connector** - [#254](https://github.com/corazawaf/coraza/pull/254) -\nCoraza adds initial support for TinyGo to allow compiling to Web Assembly (WASM). Compatible directives are marked with *Tinygo Compatibility* in the documentation.\n\n  Based on contributions sponsored by the Tetrate.io team, a new [coraza-proxy-wasm connector](https://github.com/corazawaf/coraza-proxy-wasm) is developed which can be loaded in [Envoy Proxy](https://www.envoyproxy.io) or as Istio plugin.\n\n  Special thanks to the Tetrate team, Anuraag Agrawal, Matteo Pace and José Carlos Chávez. This greatly enhances our coverage, as now we support Envoy proxy and any WASM-proxy compatible system.\n\n* **FEATURE: SecDatasets & operators** - [#361](https://github.com/corazawaf/coraza/pull/361) -\nSecDatasets are added as replacement for .data files. WASM support is an essential feature of Coraza v3, but users cannot fully enjoy its potential because of file reading limitations. For this reason, SecDataset is a decent replacement for .data files.\n\n  Two new SecLang operators are added which can be used to query datasets. `pmFromDataset`  [#361](https://github.com/corazawaf/coraza/pull/361) and `ipMatchFromDataset` [#75e8217](https://github.com/corazawaf/coraza/commit/75e821700de9fbfafde6c763f474c7add8dab319) which can be used instead of their file based equivalents for those environments which can't access the filesystem.\n\n```apache\nSecDataset restricted-files-1 `\n.my.cnf\n.mysql_history\n`\nSecRule REQUEST_FILENAME \"@pmFromDataset restricted-files-1\" \\\n    \"...msg:'Match sample_dataset'\"\n```\n\n* **FEATURE: Restpath Operator** - [#282](https://github.com/corazawaf/coraza/pull/282) - `@restpath` takes a path pattern as a parameter eg. `/path/to/{id}/{name}` and aids evaluation of application urls. The path will be transformed to a regex and assigned to variables in `ARGS_PATH`, `ARGS_NAMES`, and `ARGS`.\n\n```apache\nSecRule REQUEST_URI \"@restpath /some/random/url/{id}/{name}\" \"…..chain\"\nSecRule ARGS_PATH:id \"!@eq %{user:session_id}\" \"deny\"\n```\n\n* **FEATURE: Redirect Operator** - [#290](https://github.com/corazawaf/coraza/pull/290) -\nRedirect takes a status code and url as parameter and based on this information returns an http redirect to the client.\n\n```apache\nSecRule REQUEST_URI \"/redirect\"  \"phase:1,id:1,status:302,redirect:http://www.example.com\n```\n\n* **Enhanced Multipart Support** - [#452](https://github.com/corazawaf/coraza/pull/452) -\nPick up the MULTIPART_PART_HEADERS support found in ModSecurity [reference](https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-(v2.x)-Variables#MULTIPART_PART_HEADERS).\n\n> This variable is a collection of all part headers found within the request body with Content-Type multipart/form-data. The key of each item in the collection is the name of the part in which it was found, while the value is the entire part-header line -- including both the part-header name and the part-header value.\n\n```apache\nSecRule ARGS:_msg_body \"@rx Hi Martin,\" \"id:200, phase:2,log\"\nSecRule MULTIPART_PART_HEADERS:_msg_body \"Content-Disposition\" \"id:250, phase:2, log\"\nSecRule MULTIPART_PART_HEADERS \"Content-Disposition\" \"id:300, phase:2, log\"\n```\n\n### Performance Optimizations\n\nSimilar performance to modsecurity is archived, we are faster or slower, depending on the payload. Usually, big payloads work better in Coraza. Coraza v3 is ~50% faster than Coraza v2.0.1, more than 200% faster than Coraza v2.0.0.\n\n* Replace the Aho Corasick string matching implementation used internally with Petar Dambovaliev’s implementation (60% less memory consumption and 233% faster execution time) [#302](https://github.com/corazawaf/coraza/pull/302)\n* Optimize validateNID operator [#30e5b56](https://github.com/corazawaf/coraza/commit/30e5b564d4d7c6688fb819c97b0891e097570a2e) [#348](https://github.com/corazawaf/coraza/pull/348)\n* Use io.Discard instead of /dev/null to save a syscall when debug log output should be discarded [#354](https://github.com/corazawaf/coraza/pull/354)\n* Optimize Body Buffering [#505](https://github.com/corazawaf/coraza/pull/505)\n* Remove unused mutex in RuleGroup [#381](https://github.com/corazawaf/coraza/pull/381)\n* Speed up random string generation by switching to a pseudorandom generator [#403](https://github.com/corazawaf/coraza/pull/403)\n* Improve SecLang parser performance [#412](https://github.com/corazawaf/coraza/pull/412)\n* Use strings.Builder to avoid copy string input to bytes in `urlencode` [#320]((<https://github.com/corazawaf/coraza/pull/320>) and `base64decode` [#319](https://github.com/corazawaf/coraza/pull/319)\n* Use lookup table for byte range validation in `validateByteRange` [#490](https://github.com/corazawaf/coraza/pull/490)\n\n### API Changes\n\nA lot of effort was added to optimize and clean up the Coraza API which resulted in a couple of breaking API changes.\n\n* **New Variables Engine** - [#277](https://github.com/corazawaf/coraza/pull/277) - Implements a new Variables Engine similar to modsecurity. Variables have two pointers `tx.Collections[]` and `tx.variables.*` which either allow programmatic access using the proper collection mechanism or using dynamic variable names.\n\n  There are multiple variable types (Simple, Map, Proxy, Translation) with different helpers and generic helpers. Each type has its own variable (string, map, proxy, etc.)  <https://github.com/corazawaf/coraza/tree/main/collection>\n\n  **BREAKING**: Raw data can only be accessed through a RequestBodyProcessor\n\n* **BREAKING**: Library entry points are converted to immutable interfaces [#397](https://github.com/corazawaf/coraza/pull/397)\n\n  This simplifies the interface and provides a safe mechanism to invoke Coraza and handle transactions. It further allows for major changes without updating the public API and maintains compatibility. Any calls to seclang.NewParser can be removed.\n\n  The approach for doing this is to first move existing interfaces into internal/corazawaf, internal/seclang and start creating public API from scratch delegating to these. After completing migration, there is probably cleanup that could be done which may result in the removal of delegation, but that could happen after locking in a public API.\n\n* **BREAKING**: Rename Waf to WAF to follow Go type naming conventions of acronyms. `coraza.NewWaf` must be accessed as `coraza.NewWAF` and `tx.Waf` as `tx.WAF`. [#373](https://github.com/corazawaf/coraza/pull/373)\n\n* **BREAKING**: Rename methods of *Transaction* [#518](https://github.com/corazawaf/coraza/pull/518)\n  * Interrupted &rarr; IsInterrupted\n  * ResponseBodyAccessible &rarr; IsResponseBodyAccessible\n  * IsProcessableResponseBody &rarr; IsResponseBodyProcessable\n  * RequestBodyAccessible &rarr; IsRequestBodyAccessible\n\n* **BREAKING: Remove ZAP** - [#682b59](https://github.com/corazawaf/coraza/commit/6828b59811f5a1b0b86213533a71ec9aaea229c8) [#b64ede7](https://github.com/corazawaf/coraza/commit/b64ede757c7409d7ab9e441bbdfcf6157a3aa6b0) - Debug logging is now an interface and Zap is removed . Support to allow `SecDebugLog` to log to `/dev/stderr` or `/dev/stdout` is added in [#449](https://github.com/corazawaf/coraza/pull/#449)\n\n* **BREAKING: WAFConfig Type**: A new immutable WAFConfig type is added to initialize Coraza, which replaces seclang.NewParser.\nEach WithXXX function (WithRules, WithDirectives, WithDirectivesFromFile WithContentInjection, WithRequestBodyAccess, WithResponseBodyAccess, WithDebugLogger, WithErrorLogger, WithRootFS) of this type returns a new instance including the corresponding change. [#bffb435/config.go#L1\n\n* **Rules, Action & Transaction Interfaces** - New immutable interfaces are added\n\n* **BREAKING**: Convert rulematch types to interfaces [#478](https://github.com/corazawaf/coraza/pull/478)\n\n* **BREAKING**: <https://github.com/corazawaf/coraza/pull/503>\n\n* **BREAKING**: Add RequestBodyAccessible() and ResponseBodyAccessible() to types.transaction.\n\n* **BREAKING**: Export Request/Response BodyAccess values [#499](https://github.com/corazawaf/coraza/pull/)\n\n### Testing\n\n* Introduce new CRS testing suite for Coraza v3 based on Go HTTPServer and go-ftw. Remove Caddy to avoid circular project dependency [#457](https://github.com/corazawaf/coraza/pull/457)\n* Automatically perform Benchmarks to detect performance regressions [#301](https://github.com/corazawaf/coraza/pull/301)\n* Enhance the test engine to perform tests of returned interruptions (output.interruption).\n* Add testing for disruptive actions.\n* Switch to mage instead of pre-commit [#315](https://github.com/corazawaf/coraza/pull/315) [#355](https://github.com/corazawaf/coraza/pull/355) [#356](https://github.com/corazawaf/coraza/pull/356)\n\n--------------------------------------------------------------\n\n## Coraza v2  (March 22, 2022)\n\nBUG FIXES:\n\n* Fix incorrect macro expansions for log and msg of chained rule [#193](https://github.com/corazawaf/coraza/issues/193)\n\nIMPROVEMENTS:\n\n* Fully compliant with SecLang from modsecurity v2 [PR #123](https://github.com/corazawaf/coraza/pull/123)\n* Better performance [PR #123](https://github.com/corazawaf/coraza/pull/123), [PR #136](https://github.com/corazawaf/coraza/pull/136)\n* New enhanced plugins interface for transformations, actions, body processors, and operators [PR #120](https://github.com/corazawaf/coraza/pull/120)\n* Many features removed and transformed into plugins: XML (Mostly), GeoIP [PR #170](https://github.com/corazawaf/coraza/pull/170) and PCRE regex\n* Full internal API refactor, public API has not changed\n* Refactor Audit logging with support for log output plugins [PR #20](https://github.com/corazawaf/coraza/pull/20), [PR #133](https://github.com/corazawaf/coraza/pull/133)\n* Update libinjection-go [PR #157](https://github.com/corazawaf/coraza/pull/157)\n* Better debug logging\n* New error logging (like modsecurity)\n\nNOTES:\n\n**Migrate from Coraza v1**\n\n* Rollback `SecAuditLog` to the legacy syntax (serial/concurrent)\n* Attach an error log handler using `waf.SetErrorLogCb(cb)` (optional)\n* The function `Transaction.Clean()` must be used to clear transaction data, files and take them back to the sync pool.\n* If you are using low level APIs check the complete changelog as most of them were removed.\n* OWASP CRS does not require external dependencies anymore\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.0966796875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\njptosso@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.7177734375,
          "content": "# Contributing to Coraza\n\n>**Note**: We take Coraza's security and the trust of our community seriously. If\n> you believe you have found a security issue in Coraza or any of its\n> components, please responsibly disclose by contacting us. See\n> [SECURITY.md](https://github.com/corazawaf/coraza/blob/v2/master/SECURITY.md)\n> for details.\n\n\nWe are striving to support an open community for the Coraza Project. We support\nour contributors, please don't feel afraid or unsure of submitting feedback or\nasking a question.\n\n## Community\n\n* Get in touch via the [OWASP Slack Community](https://owasp.org/slack/invite) (#coraza)\n* Monthly Meetings: [Summaries](https://github.com/corazawaf/coraza/issues?q=is%3Aissue+label%3Ameeting)\n* Planning: [Github Projects](https://github.com/orgs/corazawaf/projects?type=beta)\n\n## Contributions\n\n* Provide feedback and report potential bugs\n* Suggest enhancements to the project\n* Perform tests and increase test coverage\n* Fix a [Bug](https://github.com/corazawaf/coraza/issues?q=is%3Aopen+is%3Aissue+label%3Abug) or implement an [Enhancement](https://github.com/corazawaf/coraza/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement)\n* Improve our Documentation, the [Coraza Website Repo](https://github.com/corazawaf/coraza.io) is on Github.\n\n## Reporting an Issue\n\n* Security related issues are covered by the [Security Policy](https://github.com/corazawaf/coraza/blob/v2/master/SECURITY.md)\n* Make sure you test against the latest version, it's possible the issue was\n  already fixed. However if you are on an older version of Coraza and feel the\n  issue is critical, please let us know.\n* Check existing [Issues](https://github.com/corazawaf/coraza/issues) (open and closed) to ensure it was not already reported.\n* Provide a detailed description and a reproducible test case in a new [Issue](https://github.com/corazawaf/coraza/issues/new).\n  Be sure to include as much relevant information as possible, a **code sample** or an **test case** demonstrating the fault helps us to reproduce your problem.\n\n## Patches\n\nDid you write a patch that fixes a bug?\n\n* Open a new GitHub pull request which includes your changes.\n* Please include a description which clearly describes the change. Include the relevant issue number if applicable.\n* You may consider installing a pre-commit hook to automatically run required checks with `go run mage.go precommit`\n\n## Enhancements\n\nDo you intend to add a new feature or change an existing one?\n* Suggest your change in the [Discussion](https://github.com/corazawaf/coraza/discussions/categories/ideas) and start writing code.\n* Do not open an issue on GitHub until you have collected positive feedback about the change. GitHub issues are primarily intended for bug reports and fixes.\n* There are many TODOs, functionalities, fixes, bug reports, and any help you can provide. Just send your pull request.\n\nRun from the repository root:\n```sh\negrep -Rin \"TODO|FIXME\" -R --exclude-dir=vendor *\n```\n\n## Questions\n\nDo you have questions about the source code? Ask any question about how to use Coraza in the community [Discussions](https://github.com/corazawaf/coraza/discussions/categories/q-a).\n\n## Testing\n\nCoraza uses Go's built-in test tool. Examples (run from the repository root):\n\n- `go test -v` or `go run mage.go test`\n- `go test -v -race ` use to enable the built-in data race detector\n- `go test -run TestDefaultWriters -v ./loggers` run all tests loggers package with name substring `TestDefaultWriters`\n\n- `go run mage.go lint` run code style checks\n- `go run mage.go check` run tests and code style checks\n\n- `go run mage.go precommit` install the pre-commit git hook\n\n_________________\n\nThe Coraza project is a community effort. We encourage you to pitch in and join the team!\n\nThanks! :heart: :heart: :heart:\n\nCoraza Team\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.2744140625,
          "content": "                                 Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n\r\n   APPENDIX: How to apply the Apache License to your work.\r\n\r\n      To apply the Apache License to your work, attach the following\r\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n      replaced with your own identifying information. (Don't include\r\n      the brackets!)  The text should be enclosed in the appropriate\r\n      comment syntax for the file format. We also recommend that a\r\n      file or class name and description of purpose be included on the\r\n      same \"printed page\" as the copyright notice for easier\r\n      identification within third-party archives.\r\n\r\n   Copyright 2021 Juan Pablo Tosso\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License."
        },
        {
          "name": "RATIONALE.md",
          "type": "blob",
          "size": 1.78125,
          "content": "# Rationale\n\nThis document contains some rationale around certain decisions or explain potential failure modes in Coraza.\n\n## Why limits should be chosen very carefully\n\nCoraza can inspect a request body and resolve its legitimacy before it reaches upstream by buffering the body payload, analyzing it, and then sending it upstream if no threads are detected. The main issue with buffering is that it can become a potential attack door by itself if not handled correctly. The buffering process occurs as follows:\n\n1. First, Coraza attempts to buffer the body in memory up to a limit defined by the directive `SecRequestBodyMemoryLimit`, by default Coraza sets `131072`.\n2. If the body payload is bigger than the memory limit, Coraza moves off the memory buffering and buffers the body in the disk, up to the limit defined by the directive `SecRequestBodyLimit`. By default Coraza sets this limit to `13107200`.\n\nBoth actions represent a risk when the configuration isn't defensive enough:\n\n1. Buffering in memory, when the limit is high can cause OOM in the system as there is no soft or hard limit on how much memory can be spent on buffering, the OOM will not only affect the attack request but the entire process. It is recommended to keep the default value or lower.\n2. Buffering in the disk, when not setting the right action can become problematic: an attacker could send huge payloads which will be stored in the disk and without proper mitigation (e.g. hard limit on request size or rate limiting) it could fill up the disk, causing degraded functioning in the host. One way to prevent this is to use `SecRequestBodyLimitAction reject` setting, meaning that beyond the request body limit, the request is rejected and no more bytes are written to the disk. Once the request is finished, the buffered file is deleted.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.3154296875,
          "content": "<h1>\n  <img src=\"https://coraza.io/images/logo_shield_only.png\" align=\"left\" height=\"46px\" alt=\"\"/>&nbsp;\n  <span>Coraza - Web Application Firewall</span>\n</h1>\n\n[![Regression Tests](https://github.com/corazawaf/coraza/actions/workflows/regression.yml/badge.svg)](https://github.com/corazawaf/coraza/actions/workflows/regression.yml)\n[![Coreruleset Compatibility](https://img.shields.io/badge/Coreruleset%20Compatibility-100%25-brightgreen)](#)\n[![CodeQL](https://github.com/corazawaf/coraza/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/corazawaf/coraza/actions/workflows/codeql-analysis.yml)\n[![codecov](https://codecov.io/gh/corazawaf/coraza/branch/main/graph/badge.svg?token=6570804ZC7)](https://codecov.io/gh/corazawaf/coraza)\n[![Project Status: Active – The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)\n[![OWASP Production Project](https://img.shields.io/badge/owasp-production%20project-brightgreen)](https://owasp.org/www-project-coraza-web-application-firewall)\n[![GoDoc](https://godoc.org/github.com/corazawaf/coraza?status.svg)](https://godoc.org/github.com/corazawaf/coraza/v3)\n\nCoraza is an open source, enterprise-grade, high performance Web Application Firewall (WAF) ready to protect your beloved applications. It is written in Go, supports ModSecurity SecLang rulesets and is 100% compatible with the OWASP Core Rule Set v4.\n\n* Website: <https://coraza.io>\n* Forum: [Github Discussions](https://github.com/corazawaf/coraza/discussions)\n* OWASP Slack Community (#coraza): <https://owasp.org/slack/invite>\n* Rule testing: [Coraza Playground](https://playground.coraza.io)\n\n<br/>\n\nKey Features:\n\n* ⇲ **Drop-in** - Coraza is an alternative engine that has partial compatibility with ~~Trustwave~~[OWASP ModSecurity Engine](https://github.com/owasp-modsecurity/modsecurity/) and supports industry-standard SecLang rule sets.\n\n* 🔥 **Security** -  Coraza runs the [OWASP CRS](https://coreruleset.org) **v4** (Formerly known as Core Rule Set) to protect your web applications from a wide range of attacks, including the OWASP Top Ten, with a minimum of false alerts. CRS protects from many common attack categories including: SQL Injection (SQLi), Cross Site Scripting (XSS), PHP & Java Code Injection, HTTPoxy, Shellshock, Scripting/Scanner/Bot Detection & Metadata & Error Leakages. Note that older versions of the CRS are not compatible.\n\n* 🔌 **Extensible** - Coraza is a library at its core, with many integrations to deploy on-premise Web Application Firewall instances. Audit Loggers, persistence engines, operators, actions, create your own functionalities to extend Coraza as much as you want.\n\n* 🚀 **Performance** - From huge websites to small blogs, Coraza can handle the load with minimal performance impact. Check our [Benchmarks](https://coraza.io/docs/reference/benchmarks)\n\n* ﹡ **Simplicity** - Anyone is able to understand and modify the Coraza source code. It is easy to extend Coraza with new functionality.\n\n* 💬 **Community** - Coraza is a community project, contributions are accepted and all ideas will be considered. Find contributor guidance in the [CONTRIBUTION](https://github.com/corazawaf/coraza/blob/main/CONTRIBUTING.md) document.\n\n<br/>\n\n## Integrations\n\nThe Coraza Project maintains implementations and plugins for the following servers:\n\n* [Caddy Reverse Proxy and Webserver Plugin](https://github.com/corazawaf/coraza-caddy) - stable, needs a maintainer\n* [Proxy WASM extension](https://github.com/corazawaf/coraza-proxy-wasm) for proxies with proxy-wasm support (e.g. Envoy) - stable, still under development\n* [HAProxy SPOE Plugin](https://github.com/corazawaf/coraza-spoa) - experimental\n* [Coraza C Library (For nginx, etc)](https://github.com/corazawaf/libcoraza) - experimental\n\n## Prerequisites\n\n* Go v1.22+ or tinygo compiler\n* Linux distribution (Debian or Centos recommended), Windows or Mac.\n\n## Coraza Core Usage\n\nCoraza can be used as a library for your Go program to implement a security middleware or integrate it with existing application & webservers.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/corazawaf/coraza/v3\"\n)\n\nfunc main() {\n\t// First we initialize our waf and our seclang parser\n\twaf, err := coraza.NewWAF(coraza.NewWAFConfig().\n\t\tWithDirectives(`SecRule REMOTE_ADDR \"@rx .*\" \"id:1,phase:1,deny,status:403\"`))\n\t// Now we parse our rules\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\t// Then we create a transaction and assign some variables\n\ttx := waf.NewTransaction()\n\tdefer func() {\n\t\ttx.ProcessLogging()\n\t\ttx.Close()\n\t}()\n\ttx.ProcessConnection(\"127.0.0.1\", 8080, \"127.0.0.1\", 12345)\n\n\t// Finally we process the request headers phase, which may return an interruption\n\tif it := tx.ProcessRequestHeaders(); it != nil {\n\t\tfmt.Printf(\"Transaction was interrupted with status %d\\n\", it.Status)\n\t}\n}\n\n```\n\n[Examples/http-server](./examples/http-server/) provides an example to practice with Coraza.\n\n### Build tags\n\nGo build tags can tweak certain functionality at compile-time. These are for advanced use cases only and do not\nhave compatibility guarantees across minor versions - use with care.\n\n* `coraza.disabled_operators.*` - excludes the specified operator from compilation. Particularly useful if overriding\nthe operator with `plugins.RegisterOperator` to reduce binary size / startup overhead.\n* `coraza.rule.multiphase_valuation` - enables evaluation of rule variables in the phases that they are ready, not\nonly the phase the rule is defined for.\n* `memoize_builders` - enables memoization of builders for regex and aho-corasick\ndictionaries to reduce memory consumption in deployments that launch several coraza\ninstances. For more context check [this issue](https://github.com/corazawaf/coraza-caddy/issues/76)\n* `no_fs_access` - indicates that the target environment has no access to FS in order to not leverage OS' filesystem related functionality e.g. file body buffers.\n* `coraza.rule.case_sensitive_args_keys` - enables case-sensitive matching for ARGS keys, aligning Coraza behavior with RFC 3986 specification. It will be enabled by default in the next major version.\n* `coraza.rule.no_regex_multiline` - disables enabling by default regexes multiline modifiers in `@rx` operator. It aligns with CRS expected behavior, reduces false positives and might improve performances. No multiline regexes by default will be enabled in the next major version. For more context check [this PR](https://github.com/corazawaf/coraza/pull/876)\n\n## E2E Testing\n\n[`http/e2e/`](./http/e2e) provides an utility to run e2e tests.\nIt can be used standalone against your own waf deployment:\n\n```shell\ngo run github.com/corazawaf/coraza/v3/http/e2e/cmd/httpe2e@main --proxy-hostport localhost:8080 --httpbin-hostport localhost:8081\n```\n\nor as a library by importing:\n\n```go\n\"github.com/corazawaf/coraza/v3/http/e2e\"\n```\n\nAs a reference for library usage, see [`testing/e2e/e2e_test.go`](./testing/e2e/e2e_test.go).\nExpected directives that have to be loaded and available flags can be found in [`http/e2e/cmd/httpe2e/main.go`](./http/e2e/cmd/httpe2e/main.go).\n\n## Tools\n\n* [Go FTW](https://github.com/coreruleset/go-ftw): Rule testing engine\n* [Coraza Playground](https://playground.coraza.io/): Sandbox rule testing web interface\n* [OWASP Core Ruleset](https://github.com/coreruleset/coreruleset/): Awesome rule set, compatible with Coraza\n\n## Development\n\nCoraza only requires Go for development. You can run `mage.go` to issue development commands.\n\nSee the list of commands\n\n```\n$ go run mage.go -l\nTargets:\n  check        runs lint and tests.\n  coverage     runs tests with coverage and race detector enabled.\n  doc          runs godoc, access at http://localhost:6060\n  format       formats code in this repository.\n  fuzz         runs fuzz tests\n  lint         verifies code quality.\n  precommit    installs a git hook to run check when committing\n  test         runs all tests.\n```\n\nFor example, to format your code before submission, run\n\n```shell\ngo run mage.go format\n```\n\n## Contribute\n\nContributions are welcome! Please refer to [CONTRIBUTING.md](./CONTRIBUTING.md) for guidance.\n\n## Security\n\nTo report a security issue, please follow [this link](https://github.com/corazawaf/coraza/security/advisories/new) and add a description of the issue, the steps you took to create the issue, affected versions, and, if known, mitigations for the issue.\n\nOur vulnerability management team will respond within 3 working days of your report. If the issue is confirmed as a vulnerability, we will open a Security Advisory. This project follows a 90 day disclosure timeline.\n\n## Thanks\n\n* OWASP Coreruleset team for the CRS and their help\n* Ivan Ristić for creating ModSecurity\n\n### Coraza on X/Twitter\n\n* [@corazaio](https://twitter.com/corazaio)\n\n## Donations\n\nFor donations, see [Donations site](https://owasp.org/donate/?reponame=www-project-coraza-web-application-firewall&title=OWASP+Coraza+Web+Application+Firewall)\n\n## Thanks to all the people who have contributed\n\nFirst and foremost, huge thanks to [Juan Pablo Tosso](https://twitter.com/jptosso) for starting this project, and building an amazing community around Coraza!\n\nToday we have lots of amazing contributors, we could not have done this without you!\n\n<a href=\"https://github.com/corazawaf/coraza/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=corazawaf/coraza\" />\n</a>\n\nMade with [contrib.rocks](https://contrib.rocks).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.0341796875,
          "content": "# Security Policy\n\n## Supported Versions\n\nVersions currently being supported with security updates.\n\n| Version | Supported          | EOL           |\n| ------- | ------------------ | ------------- |\n| v1.2.x  | :x:                | Jun 1st 2022  |\n| v2.x    | :white_check_mark: | TBD           |\n| v3.x    | :white_check_mark: | Not defined   |\n\n## Reporting a Vulnerability\n\nTo report a security issue, please follow [this link](https://github.com/corazawaf/coraza/security/advisories/new) and add a description of the issue, the steps you took to create the issue, affected versions, and, if known, mitigations for the issue. \n\nOur vulnerability management team will respond within 3 working days of your report. If the issue is confirmed as a vulnerability, we will open a Security Advisory. This project follows a 90 day disclosure timeline.\n\nWe follow the [Guide to coordinated vulnerability disclosure for open source software projects](https://github.com/ossf/oss-vulnerability-guide) where possible.\n\n## :trophy: Hall of Fame :trophy:\n\n1. No records\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.2783203125,
          "content": "ignore:\n  - \"**/generator/main.go\" # generator tools usually involves writing files\nfixes:\n  # Apparently using build/ as prefix is not enough to ignore the directory\n  # Reference: https://community.codecov.com/t/codecov-website-can-not-show-line-by-line-coverage/3809\n  - \"build/::\" "
        },
        {
          "name": "collection",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.go",
          "type": "blob",
          "size": 6.5380859375,
          "content": "// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors\n// SPDX-License-Identifier: Apache-2.0\n\npackage coraza\n\nimport (\n\t\"io/fs\"\n\n\t\"github.com/corazawaf/coraza/v3/debuglog\"\n\t\"github.com/corazawaf/coraza/v3/experimental/plugins/plugintypes\"\n\t\"github.com/corazawaf/coraza/v3/internal/corazawaf\"\n\t\"github.com/corazawaf/coraza/v3/types\"\n)\n\n// WAFConfig controls the behavior of the WAF.\n//\n// Note: WAFConfig is immutable. Each WithXXX function returns a new instance including the corresponding change.\ntype WAFConfig interface {\n\t// WithDirectives parses the directives from the given string and adds them to the WAF.\n\tWithDirectives(directives string) WAFConfig\n\n\t// WithDirectivesFromFile parses the directives from the given file and adds them to the WAF.\n\tWithDirectivesFromFile(path string) WAFConfig\n\n\t// WithRequestBodyAccess enables access to the request body.\n\tWithRequestBodyAccess() WAFConfig\n\n\t// WithRequestBodyLimit sets the maximum number of bytes that can be read from the request body. Bytes beyond that set\n\t// in WithInMemoryLimit will be buffered to disk.\n\t// For usability purposes body limits are enforced as int (and not int64)\n\t// int is a signed integer type that is at least 32 bits in size (platform-dependent size).\n\t// While, the theoretical settable upper limit for 32-bit machines is 2GiB,\n\t// it is recommended to keep this value as low as possible.\n\tWithRequestBodyLimit(limit int) WAFConfig\n\n\t// WithRequestBodyInMemoryLimit sets the maximum number of bytes that can be read from the request body and buffered in memory.\n\t// For usability purposes body limits are enforced as int (and not int64)\n\t// int is a signed integer type that is at least 32 bits in size (platform-dependent size).\n\t// While, the theoretical settable upper limit for 32-bit machines is 2GiB,\n\t// it is recommended to keep this value as low as possible.\n\tWithRequestBodyInMemoryLimit(limit int) WAFConfig\n\n\t// WithResponseBodyAccess enables access to the response body.\n\tWithResponseBodyAccess() WAFConfig\n\n\t// WithResponseBodyLimit sets the maximum number of bytes that can be read from the response body and buffered in memory.\n\t// For usability purposes body limits are enforced as int (and not int64)\n\t// int is a signed integer type that is at least 32 bits in size (platform-dependent size).\n\t// While, the theoretical settable upper limit for 32-bit machines is 2GiB,\n\t// it is recommended to keep this value as low as possible.\n\tWithResponseBodyLimit(limit int) WAFConfig\n\n\t// WithResponseBodyMimeTypes sets the mime types of responses that will be processed.\n\tWithResponseBodyMimeTypes(mimeTypes []string) WAFConfig\n\n\t// WithDebugLogger configures a debug logger.\n\tWithDebugLogger(logger debuglog.Logger) WAFConfig\n\n\t// WithErrorCallback configures an error callback that can be used\n\t// to log errors triggered by the WAF.\n\t// It contains the severity so the cb can decide to skip it or not\n\tWithErrorCallback(logger func(rule types.MatchedRule)) WAFConfig\n\n\t// WithRootFS configures the root file system.\n\tWithRootFS(fs fs.FS) WAFConfig\n}\n\n// NewWAFConfig creates a new WAFConfig with the default settings.\nfunc NewWAFConfig() WAFConfig {\n\treturn &wafConfig{}\n}\n\n// AuditLogConfig controls audit logging.\ntype AuditLogConfig interface {\n\t// LogRelevantOnly enables audit logging only for relevant events.\n\tLogRelevantOnly() AuditLogConfig\n\n\t// WithParts configures the parts of the request/response to be logged.\n\tWithParts(parts types.AuditLogParts) AuditLogConfig\n}\n\n// NewAuditLogConfig returns a new AuditLogConfig with the default settings.\nfunc NewAuditLogConfig() AuditLogConfig {\n\treturn &auditLogConfig{}\n}\n\ntype wafRule struct {\n\trule *corazawaf.Rule\n\tstr  string\n\tfile string\n}\n\n// For usability purposes body limits are enforced as int (and not int64)\n// int is a signed integer type that is at least 32 bits in size (platform-dependent size).\n// We still basically assume 64-bit usage where int are big sizes.\ntype wafConfig struct {\n\trules                    []wafRule\n\tauditLog                 *auditLogConfig\n\trequestBodyAccess        bool\n\trequestBodyLimit         *int\n\trequestBodyInMemoryLimit *int\n\tresponseBodyAccess       bool\n\tresponseBodyLimit        *int\n\tresponseBodyMimeTypes    []string\n\tdebugLogger              debuglog.Logger\n\terrorCallback            func(rule types.MatchedRule)\n\tfsRoot                   fs.FS\n}\n\nfunc (c *wafConfig) WithRules(rules ...*corazawaf.Rule) WAFConfig {\n\tif len(rules) == 0 {\n\t\treturn c\n\t}\n\n\tret := c.clone()\n\tfor _, r := range rules {\n\t\tret.rules = append(ret.rules, wafRule{rule: r})\n\t}\n\treturn ret\n}\n\nfunc (c *wafConfig) WithDirectivesFromFile(path string) WAFConfig {\n\tret := c.clone()\n\tret.rules = append(ret.rules, wafRule{file: path})\n\treturn ret\n}\n\nfunc (c *wafConfig) WithDirectives(directives string) WAFConfig {\n\tret := c.clone()\n\tret.rules = append(ret.rules, wafRule{str: directives})\n\treturn ret\n}\n\nfunc (c *wafConfig) WithRequestBodyAccess() WAFConfig {\n\tret := c.clone()\n\tret.requestBodyAccess = true\n\treturn ret\n}\n\nfunc (c *wafConfig) WithResponseBodyAccess() WAFConfig {\n\tret := c.clone()\n\tret.responseBodyAccess = true\n\treturn ret\n}\n\nfunc (c *wafConfig) WithDebugLogger(logger debuglog.Logger) WAFConfig {\n\tret := c.clone()\n\tret.debugLogger = logger\n\treturn ret\n}\n\nfunc (c *wafConfig) WithErrorCallback(logger func(rule types.MatchedRule)) WAFConfig {\n\tret := c.clone()\n\tret.errorCallback = logger\n\treturn ret\n}\n\nfunc (c *wafConfig) WithRootFS(fs fs.FS) WAFConfig {\n\tret := c.clone()\n\tret.fsRoot = fs\n\treturn ret\n}\n\nfunc (c *wafConfig) clone() *wafConfig {\n\tret := *c // copy\n\trules := make([]wafRule, len(c.rules))\n\tcopy(rules, c.rules)\n\tret.rules = rules\n\treturn &ret\n}\n\nfunc (c *wafConfig) WithRequestBodyLimit(limit int) WAFConfig {\n\tret := c.clone()\n\tret.requestBodyLimit = &limit\n\treturn ret\n}\n\nfunc (c *wafConfig) WithRequestBodyInMemoryLimit(limit int) WAFConfig {\n\tret := c.clone()\n\tret.requestBodyInMemoryLimit = &limit\n\treturn ret\n}\n\nfunc (c *wafConfig) WithResponseBodyLimit(limit int) WAFConfig {\n\tret := c.clone()\n\tret.responseBodyLimit = &limit\n\treturn ret\n}\n\nfunc (c *wafConfig) WithResponseBodyMimeTypes(mimeTypes []string) WAFConfig {\n\tret := c.clone()\n\tret.responseBodyMimeTypes = mimeTypes\n\treturn ret\n}\n\ntype auditLogConfig struct {\n\trelevantOnly bool\n\tparts        types.AuditLogParts\n\twriter       plugintypes.AuditLogWriter\n}\n\nfunc (c *auditLogConfig) LogRelevantOnly() AuditLogConfig {\n\tret := c.clone()\n\tret.relevantOnly = true\n\treturn ret\n}\n\nfunc (c *auditLogConfig) WithParts(parts types.AuditLogParts) AuditLogConfig {\n\tret := c.clone()\n\tret.parts = parts\n\treturn ret\n}\n\nfunc (c *auditLogConfig) clone() *auditLogConfig {\n\tret := *c // copy\n\treturn &ret\n}\n"
        },
        {
          "name": "config_test.go",
          "type": "blob",
          "size": 2.6630859375,
          "content": "// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors\n// SPDX-License-Identifier: Apache-2.0\n\npackage coraza\n\nimport (\n\t\"testing\"\n\n\t\"github.com/corazawaf/coraza/v3/types\"\n)\n\nfunc TestConfigRulesImmutable(t *testing.T) {\n\t// Add enough directives so there is enough slice capacity to reuse the array for next append.\n\tc := NewWAFConfig().\n\t\tWithDirectives(\"SecRuleEngine On\").\n\t\tWithDirectives(\"SecRuleEngine On\").\n\t\tWithDirectives(\"SecRuleEngine On\")\n\n\tc1 := c.WithDirectives(\"SecRequestBodyAccess On\")\n\n\twaf1, err := NewWAF(c1)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tif !waf1.(wafWrapper).waf.RequestBodyAccess {\n\t\tt.Errorf(\"waf1: expected request body access to be enabled\")\n\t}\n\n\tif waf1.(wafWrapper).waf.ResponseBodyAccess {\n\t\tt.Errorf(\"waf1: expected response body access to be disabled\")\n\t}\n\n\tc2 := c.WithDirectives(\"SecResponseBodyAccess On\")\n\n\twaf2, err := NewWAF(c2)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tif waf2.(wafWrapper).waf.RequestBodyAccess {\n\t\tt.Errorf(\"waf1: expected request body access to be disabled\")\n\t}\n\n\tif !waf2.(wafWrapper).waf.ResponseBodyAccess {\n\t\tt.Errorf(\"waf1: expected response body access to be enabled\")\n\t}\n\n\t// c1 should not have been affected\n\twaf1, err = NewWAF(c1)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tif !waf1.(wafWrapper).waf.RequestBodyAccess {\n\t\tt.Errorf(\"waf1: expected request body access to be enabled\")\n\t}\n\n\tif waf1.(wafWrapper).waf.ResponseBodyAccess {\n\t\tt.Errorf(\"waf1: expected response body access to be disabled\")\n\t}\n}\n\nfunc TestConfigSetters(t *testing.T) {\n\tchanged := false\n\tc := func(_ types.MatchedRule) {\n\t\tchanged = true\n\t}\n\tcfg := NewWAFConfig().\n\t\tWithRequestBodyAccess().\n\t\tWithResponseBodyAccess().\n\t\tWithErrorCallback(c).\n\t\tWithRequestBodyLimit(200).\n\t\tWithRequestBodyInMemoryLimit(100).\n\t\tWithResponseBodyMimeTypes([]string{\"text/html\"}).\n\t\tWithDirectives(`\n\t\tSecRule REQUEST_URI \"@unconditionalMatch\" \"phase:1,id:1,log,msg:'ok'\"\n\t\tSecRule RESPONSE_BODY \"aaa\" \"phase:4,id:40,log,msg:'ok'\"\n\t\t`)\n\twaf, err := NewWAF(cfg)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\ttx := waf.NewTransaction()\n\ttx.ProcessRequestHeaders()\n\ttx.AddResponseHeader(\"Content-Type\", \"text/html\")\n\ttx.ProcessResponseHeaders(200, \"http/1.1\")\n\tif _, _, err := tx.WriteResponseBody([]byte(\"aaa\")); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif _, err := tx.ProcessResponseBody(); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif !changed {\n\t\tt.Errorf(\"error callback not called\")\n\t}\n\tif !tx.IsResponseBodyProcessable() {\n\t\tt.Errorf(\"response body should be processable\")\n\t}\n\texpectedMatches := []int{1, 40}\n\tfor _, id := range expectedMatches {\n\t\tok := false\n\t\tfor _, m := range tx.MatchedRules() {\n\t\t\tif m.Rule().ID() == id {\n\t\t\t\tok = true\n\t\t\t}\n\t\t}\n\t\tif !ok {\n\t\t\tt.Errorf(\"expected rule %d to match\", id)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "coraza.conf-recommended",
          "type": "blob",
          "size": 6.359375,
          "content": "# -- Rule engine initialization ----------------------------------------------\n\n# Enable Coraza, attaching it to every transaction. Use detection\n# only to start with, because that minimises the chances of post-installation\n# disruption.\n#\nSecRuleEngine DetectionOnly\n\n\n# -- Request body handling ---------------------------------------------------\n\n# Allow Coraza to access request bodies. If you don't, Coraza\n# won't be able to see any POST parameters, which opens a large security\n# hole for attackers to exploit.\n#\nSecRequestBodyAccess On\n\n# Enable XML request body parser.\n# Initiate XML Processor in case of xml content-type\n#\nSecRule REQUEST_HEADERS:Content-Type \"^(?:application(?:/soap\\+|/)|text/)xml\" \\\n     \"id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML\"\n\n# Enable JSON request body parser.\n# Initiate JSON Processor in case of JSON content-type; change accordingly\n# if your application does not use 'application/json'\n#\nSecRule REQUEST_HEADERS:Content-Type \"^application/json\" \\\n     \"id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON\"\n\n# Enable JSON request body parser for more subtypes.\n# Adapt this rule if you want to engage the JSON Processor for \"+json\" subtypes\n#\nSecRule REQUEST_HEADERS:Content-Type \"^application/[a-z0-9.-]+[+]json\" \\\n     \"id:'200006',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON\"\n\n# Maximum request body size we will accept for buffering. If you support\n# file uploads then the value given on the first line has to be as large\n# as the largest file you are willing to accept. The second value refers\n# to the size of data, with files excluded. You want to keep that value as\n# low as practical.\n#\nSecRequestBodyLimit 13107200\n\nSecRequestBodyInMemoryLimit 131072\n\n# SecRequestBodyNoFilesLimit is currently not supported by Coraza\n# SecRequestBodyNoFilesLimit 131072\n\n# What to do if the request body size is above our configured limit.\n# Keep in mind that this setting will automatically be set to ProcessPartial\n# when SecRuleEngine is set to DetectionOnly mode in order to minimize\n# disruptions when initially deploying Coraza.\n#\nSecRequestBodyLimitAction Reject\n\n# Verify that we've correctly processed the request body.\n# As a rule of thumb, when failing to process a request body\n# you should reject the request (when deployed in blocking mode)\n# or log a high-severity alert (when deployed in detection-only mode).\n#\nSecRule REQBODY_ERROR \"!@eq 0\" \\\n    \"id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2\"\n\n# By default be strict with what we accept in the multipart/form-data\n# request body. If the rule below proves to be too strict for your\n# environment consider changing it to detection-only.\n# Do NOT remove it, as it will catch many evasion attempts.\n#\nSecRule MULTIPART_STRICT_ERROR \"!@eq 0\" \\\n    \"id:'200003',phase:2,t:none,log,deny,status:400, \\\n    msg:'Multipart request body failed strict validation.\"\n\n# -- Response body handling --------------------------------------------------\n\n# Allow Coraza to access response bodies. \n# You should have this directive enabled in order to identify errors\n# and data leakage issues.\n# \n# Do keep in mind that enabling this directive does increases both\n# memory consumption and response latency.\n#\nSecResponseBodyAccess On\n\n# Which response MIME types do you want to inspect? You should adjust the\n# configuration below to catch documents but avoid static files\n# (e.g., images and archives).\n#\nSecResponseBodyMimeType text/plain text/html text/xml\n\n# Buffer response bodies of up to 512 KB in length.\nSecResponseBodyLimit 524288\n\n# What happens when we encounter a response body larger than the configured\n# limit? By default, we process what we have and let the rest through.\n# That's somewhat less secure, but does not break any legitimate pages.\n#\nSecResponseBodyLimitAction ProcessPartial\n\n\n# -- Filesystem configuration ------------------------------------------------\n\n# The location where Coraza will keep its persistent data.  This default setting \n# is chosen due to all systems have /tmp available however, it\n# too should be updated to a place that other users can't access.\n#\nSecDataDir /tmp/\n\n\n# -- File uploads handling configuration -------------------------------------\n\n# The location where Coraza stores intercepted uploaded files. This\n# location must be private to Coraza. You don't want other users on\n# the server to access the files, do you?\n#\n#SecUploadDir /opt/coraza/var/upload/\n\n# By default, only keep the files that were determined to be unusual\n# in some way (by an external inspection script). For this to work you\n# will also need at least one file inspection rule.\n#\n#SecUploadKeepFiles RelevantOnly\n\n# Uploaded files are by default created with permissions that do not allow\n# any other user to access them. You may need to relax that if you want to\n# interface Coraza to an external program (e.g., an anti-virus).\n#\n#SecUploadFileMode 0600\n\n\n# -- Debug log configuration -------------------------------------------------\n\n# Default debug log path\n# Debug levels:\n# 0:   No logging (least verbose)\n# 1:   Error\n# 2:   Warn\n# 3:   Info\n# 4-8: Debug\n# 9:   Trace (most verbose)\n# Most logging has not been implemented because it will be replaced with\n# advanced rule profiling options\n#SecDebugLog /opt/coraza/var/log/debug.log\n#SecDebugLogLevel 3\n\n\n# -- Audit log configuration -------------------------------------------------\n\n# Log the transactions that are marked by a rule, as well as those that\n# trigger a server error (determined by a 5xx or 4xx, excluding 404,  \n# level response status codes).\n#\nSecAuditEngine RelevantOnly\nSecAuditLogRelevantStatus \"^(?:(5|4)(0|1)[0-9])$\"\n\n# Log everything we know about a transaction.\nSecAuditLogParts ABIJDEFHZ\n\n# Use a single file for logging. This is much easier to look at, but\n# assumes that you will use the audit log only occasionally.\n#\nSecAuditLogType Serial\n\n# The format used to write the audit log.\n# Can be one of JSON|JsonLegacy|Native|OCSF\nSecAuditLogFormat Native\n\n# The following settings are not supported by Coraza\n# SecCookieFormat 0\n# SecArgumentSeparator &\n# SecRule MULTIPART_UNMATCHED_BOUNDARY \"@eq 1\" \\\n#    \"id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'\"\n# SecRule TX:/^COR_/ \"!@streq 0\" \\\n#       \"id:'200005',phase:2,t:none,deny,msg:'Coraza internal error flagged: %{MATCHED_VAR_NAME}'\"\n"
        },
        {
          "name": "debuglog",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "experimental",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.4033203125,
          "content": "module github.com/corazawaf/coraza/v3\n\ngo 1.22.0\n\n// Testing dependencies:\n// - go-mockdns\n// - go-modsecurity (optional)\n\n// Development dependencies:\n// - mage\n\n// Build dependencies:\n// - libinjection-go\n// - aho-corasick\n// - gjson\n// - binaryregexp\n// - ocsf-schema-golang\n\nrequire (\n\tgithub.com/anuraaga/go-modsecurity v0.0.0-20220824035035-b9a4099778df\n\tgithub.com/corazawaf/coraza-coreruleset v0.0.0-20240226094324-415b1017abdc\n\tgithub.com/corazawaf/libinjection-go v0.2.2\n\tgithub.com/foxcpp/go-mockdns v1.1.0\n\tgithub.com/jcchavezs/mergefs v0.1.0\n\tgithub.com/magefile/mage v1.15.1-0.20241126214340-bdc92f694516\n\tgithub.com/mccutchen/go-httpbin/v2 v2.15.0\n\tgithub.com/petar-dambovaliev/aho-corasick v0.0.0-20240411101913-e07a1f0e8eb4\n\tgithub.com/tidwall/gjson v1.18.0\n\tgithub.com/valllabh/ocsf-schema-golang v1.0.3\n\tgolang.org/x/net v0.34.0\n\tgolang.org/x/sync v0.10.0\n\trsc.io/binaryregexp v0.2.0\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/miekg/dns v1.1.57 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/stretchr/testify v1.10.0 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.1 // indirect\n\tgolang.org/x/mod v0.18.0 // indirect\n\tgolang.org/x/sys v0.29.0 // indirect\n\tgolang.org/x/tools v0.22.0 // indirect\n\tgoogle.golang.org/protobuf v1.34.2 // indirect\n)\n\nretract v3.2.2\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 9.73046875,
          "content": "github.com/anuraaga/go-modsecurity v0.0.0-20220824035035-b9a4099778df h1:YWiVl53v0R8Knj/k+4slO0SXPL67Y4dXWiOIWNzrkew=\ngithub.com/anuraaga/go-modsecurity v0.0.0-20220824035035-b9a4099778df/go.mod h1:7jguE759ADzy2EkxGRXigiC0ER1Yq2IFk2qNtwgzc7U=\ngithub.com/corazawaf/coraza-coreruleset v0.0.0-20240226094324-415b1017abdc h1:OlJhrgI3I+FLUCTI3JJW8MoqyM78WbqJjecqMnqG+wc=\ngithub.com/corazawaf/coraza-coreruleset v0.0.0-20240226094324-415b1017abdc/go.mod h1:7rsocqNDkTCira5T0M7buoKR2ehh7YZiPkzxRuAgvVU=\ngithub.com/corazawaf/libinjection-go v0.2.2 h1:Chzodvb6+NXh6wew5/yhD0Ggioif9ACrQGR4qjTCs1g=\ngithub.com/corazawaf/libinjection-go v0.2.2/go.mod h1:OP4TM7xdJ2skyXqNX1AN1wN5nNZEmJNuWbNPOItn7aw=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/foxcpp/go-mockdns v1.1.0 h1:jI0rD8M0wuYAxL7r/ynTrCQQq0BVqfB99Vgk7DlmewI=\ngithub.com/foxcpp/go-mockdns v1.1.0/go.mod h1:IhLeSFGed3mJIAXPH2aiRQB+kqz7oqu8ld2qVbOu7Wk=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/jcchavezs/mergefs v0.1.0 h1:7oteO7Ocl/fnfFMkoVLJxTveCjrsd//UB0j89xmnpec=\ngithub.com/jcchavezs/mergefs v0.1.0/go.mod h1:eRLTrsA+vFwQZ48hj8p8gki/5v9C2bFtHH5Mnn4bcGk=\ngithub.com/magefile/mage v1.15.1-0.20241126214340-bdc92f694516 h1:aAO0L0ulox6m/CLRYvJff+jWXYYCKGpEm3os7dM/Z+M=\ngithub.com/magefile/mage v1.15.1-0.20241126214340-bdc92f694516/go.mod h1:z5UZb/iS3GoOSn0JgWuiw7dxlurVYTu+/jHXqQg881A=\ngithub.com/mccutchen/go-httpbin/v2 v2.15.0 h1:3b2s8LMRR2aFd+8U+1Bx2kdgHNQ5ZQkQOiW8e52Jj9A=\ngithub.com/mccutchen/go-httpbin/v2 v2.15.0/go.mod h1:GBy5I7XwZ4ZLhT3hcq39I4ikwN9x4QUt6EAxNiR8Jus=\ngithub.com/miekg/dns v1.1.57 h1:Jzi7ApEIzwEPLHWRcafCN9LZSBbqQpxjt/wpgvg7wcM=\ngithub.com/miekg/dns v1.1.57/go.mod h1:uqRjCRUuEAA6qsOiJvDd+CFo/vW+y5WR6SNmHE55hZk=\ngithub.com/petar-dambovaliev/aho-corasick v0.0.0-20240411101913-e07a1f0e8eb4 h1:1Kw2vDBXmjop+LclnzCb/fFy+sgb3gYARwfmoUcQe6o=\ngithub.com/petar-dambovaliev/aho-corasick v0.0.0-20240411101913-e07a1f0e8eb4/go.mod h1:EHPiTAKtiFmrMldLUNswFwfZ2eJIYBHktdaUTZxYWRw=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tidwall/gjson v1.18.0 h1:FIDeeyB800efLX89e5a8Y0BNH+LOngJyGrIWxG2FKQY=\ngithub.com/tidwall/gjson v1.18.0/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/pretty v1.2.1 h1:qjsOFOWWQl+N3RsoF5/ssm1pHmJJwhjlSbZ51I6wMl4=\ngithub.com/tidwall/pretty v1.2.1/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/valllabh/ocsf-schema-golang v1.0.3 h1:eR8k/3jP/OOqB8LRCtdJ4U+vlgd/gk5y3KMXoodrsrw=\ngithub.com/valllabh/ocsf-schema-golang v1.0.3/go.mod h1:sZ3as9xqm1SSK5feFWIR2CuGeGRhsM7TR1MbpBctzPk=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=\ngolang.org/x/crypto v0.14.0/go.mod h1:MVFd36DqK4CsrnJYDkBA3VC4m2GkXAM0PvzMCn4JQf4=\ngolang.org/x/crypto v0.15.0/go.mod h1:4ChreQoLWfG3xLDer1WdlH5NdlQ3+mwnQq1YTKY+72g=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.14.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.18.0 h1:5+9lSbEzPSdWkH32vYPBwEpX8KwDbM52Ud9xBUvNlb0=\ngolang.org/x/mod v0.18.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\ngolang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=\ngolang.org/x/net v0.18.0/go.mod h1:/czyP5RqHAH4odGYxBJ1qz0+CE5WZ+2j1YgoEo8F2jQ=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/net v0.34.0 h1:Mb7Mrk043xzHgnRM88suvJFwzVrRfHEHJEl5/71CKw0=\ngolang.org/x/net v0.34.0/go.mod h1:di0qlW3YNM5oh6GqDGQr92MyTozJPmybPK4Ev/Gm31k=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sync v0.4.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sync v0.5.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.13.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=\ngolang.org/x/term v0.13.0/go.mod h1:LTmsnFJwVN6bCy1rVCoS+qHT1HhALEFxKncY3WNNh4U=\ngolang.org/x/term v0.14.0/go.mod h1:TySc+nGkYR6qt8km8wUhuFRTVSMIX3XPR58y2lC8vww=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\ngolang.org/x/tools v0.15.0/go.mod h1:hpksKq4dtpQWS1uQ61JkdqWM3LscIS6Slf+VVkm+wQk=\ngolang.org/x/tools v0.22.0 h1:gqSGLZqv+AI9lIQzniJ0nZDRG5GBPsSi+DRNHWNz6yA=\ngolang.org/x/tools v0.22.0/go.mod h1:aCwcsjqvq7Yqt6TNyX7QMU2enbQ/Gt0bo6krSeEri+c=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=\ngoogle.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nrsc.io/binaryregexp v0.2.0 h1:HfqmD5MEmC0zvwBuF187nq9mdnXjXsSivRiXN7SmRkE=\nrsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=\n"
        },
        {
          "name": "go.work",
          "type": "blob",
          "size": 0.0673828125,
          "content": "go 1.22.3\n\nuse (\n\t.\n\t./examples/http-server\n\t./testing/coreruleset\n)\n"
        },
        {
          "name": "http",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "mage.go",
          "type": "blob",
          "size": 0.3515625,
          "content": "// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors\n// SPDX-License-Identifier: Apache-2.0\n\n//go:build ignore\n// +build ignore\n\n// Entrypoint to mage for running without needing to install the command.\n// https://magefile.org/zeroinstall/\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/magefile/mage/mage\"\n)\n\nfunc main() {\n\tos.Exit(mage.Main())\n}\n"
        },
        {
          "name": "magefile.go",
          "type": "blob",
          "size": 7.427734375,
          "content": "// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors\n// SPDX-License-Identifier: Apache-2.0\n\n//go:build mage\n// +build mage\n\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n\n\t\"github.com/magefile/mage/mg\"\n\t\"github.com/magefile/mage/sh\"\n)\n\nvar addLicenseVersion = \"v1.1.1\" // https://github.com/google/addlicense/releases\nvar gosImportsVer = \"v0.3.7\"     // https://github.com/rinchsan/gosimports/releases\nvar golangCILintVer = \"v1.60.3\"  // https://github.com/golangci/golangci-lint/releases\nvar errNoGitDir = errors.New(\"no .git directory found\")\nvar errUpdateGeneratedFiles = errors.New(\"generated files need to be updated\")\n\n// Format formats code in this repository.\nfunc Format() error {\n\tif err := sh.RunV(\"go\", \"generate\", \"./...\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := sh.RunV(\"go\", \"mod\", \"tidy\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := sh.RunV(\"go\", \"work\", \"sync\"); err != nil {\n\t\treturn err\n\t}\n\n\t// addlicense strangely logs skipped files to stderr despite not being erroneous, so use the long sh.Exec form to\n\t// discard stderr too.\n\tif _, err := sh.Exec(map[string]string{}, io.Discard, io.Discard, \"go\", \"run\", fmt.Sprintf(\"github.com/google/addlicense@%s\", addLicenseVersion),\n\t\t\"-c\", \"Juan Pablo Tosso and the OWASP Coraza contributors\",\n\t\t\"-s=only\",\n\t\t\"-ignore\", \"**/*.yml\",\n\t\t\"-ignore\", \"**/*.yaml\",\n\t\t\"-ignore\", \"examples/**\", \".\"); err != nil {\n\t\treturn err\n\t}\n\treturn sh.RunV(\"go\", \"run\", fmt.Sprintf(\"github.com/rinchsan/gosimports/cmd/gosimports@%s\", gosImportsVer),\n\t\t\"-w\",\n\t\t\"-local\",\n\t\t\"github.com/corazawaf/coraza\",\n\t\t\".\")\n}\n\n// Lint verifies code quality.\nfunc Lint() error {\n\tif err := sh.RunV(\"go\", \"generate\", \"./...\"); err != nil {\n\t\treturn err\n\t}\n\n\tif sh.Run(\"git\", \"diff\", \"--exit-code\", \"--\", \"'*.gen.go'\") != nil {\n\t\treturn errUpdateGeneratedFiles\n\t}\n\n\tif err := sh.RunV(\"go\", \"run\", fmt.Sprintf(\"github.com/golangci/golangci-lint/cmd/golangci-lint@%s\", golangCILintVer), \"run\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := sh.RunV(\"go\", \"work\", \"sync\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := filepath.WalkDir(\".\", func(path string, d os.DirEntry, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif !d.IsDir() {\n\t\t\treturn nil\n\t\t}\n\n\t\tif _, err := os.Stat(filepath.Join(path, \"go.mod\")); err == nil {\n\t\t\tcmd := exec.Command(\"go\", \"mod\", \"tidy\")\n\t\t\tcmd.Dir = path\n\t\t\tout, err := cmd.CombinedOutput()\n\t\t\tfmt.Printf(string(out))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\treturn nil\n\t}); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// Test runs all tests.\nfunc Test() error {\n\tif err := sh.RunV(\"go\", \"test\", \"./...\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := sh.RunV(\"go\", \"test\", \"-tags=memoize_builders\", \"./...\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := sh.RunV(\"go\", \"test\", \"./examples/http-server\", \"-race\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := sh.RunV(\"go\", \"test\", \"./testing/coreruleset\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := sh.RunV(\"go\", \"test\", \"-tags=memoize_builders\", \"./testing/coreruleset\"); err != nil {\n\t\treturn err\n\t}\n\n\t// Execute FTW tests with multiphase evaluation enabled as well\n\tif err := sh.RunV(\"go\", \"test\", \"-tags=coraza.rule.multiphase_evaluation\", \"./testing/coreruleset\"); err != nil {\n\t\treturn err\n\t}\n\n\t// Execute FTW tests with coraza.rule.no_regex_multiline as well\n\tif err := sh.RunV(\"go\", \"test\", \"-tags=coraza.rule.no_regex_multiline\", \"./testing/coreruleset\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := sh.RunV(\"go\", \"test\", \"-tags=coraza.rule.no_regex_multiline\", \"-run=^TestRx\", \"./...\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := sh.RunV(\"go\", \"test\", \"-tags=coraza.rule.case_sensitive_args_keys\", \"-run=^TestCaseSensitive\", \"./...\"); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc buildTagsFlags(tags string) string {\n\tif tags == \"\" {\n\t\treturn \"\"\n\t}\n\t// we remove all non alphanumeric _,-\n\trx := regexp.MustCompile(\"^[\\\\w_,\\\\.]+$\")\n\tif !rx.MatchString(tags) {\n\t\tpanic(\"Invalid build tags\")\n\t}\n\treturn tags\n}\n\n// Coverage runs tests with coverage and race detector enabled.\n// Usage: mage coverage [buildTags]\nfunc Coverage() error {\n\tbuildTags := os.Getenv(\"BUILD_TAGS\")\n\ttags := buildTagsFlags(buildTags)\n\tif err := os.MkdirAll(\"build\", 0755); err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(\"Running tests with coverage\")\n\tfmt.Println(\"Tags:\", tags)\n\ttagsCmd := \"\"\n\tif tags != \"\" {\n\t\ttagsCmd = \"-tags=\" + tags\n\t}\n\tif err := sh.RunV(\"go\", \"test\", \"-race\", tagsCmd, \"-coverprofile=build/coverage.txt\", \"-covermode=atomic\", \"-coverpkg=./...\", \"./...\"); err != nil {\n\t\treturn err\n\t}\n\t// Execute http-server tests with coverage\n\tif err := sh.RunV(\"go\", \"test\", \"-race\", tagsCmd, \"-coverprofile=build/coverage-examples.txt\", \"-covermode=atomic\", \"-coverpkg=./...\", \"./examples/http-server\"); err != nil {\n\t\treturn err\n\t}\n\t// Execute FTW tests with coverage as well\n\tif err := sh.RunV(\"go\", \"test\", tagsCmd, \"-coverprofile=build/coverage-ftw.txt\", \"-covermode=atomic\", \"-coverpkg=./...\", \"./testing/coreruleset\"); err != nil {\n\t\treturn err\n\t}\n\t// we run tinygo tag only if memoize_builders is not enabled\n\tif !strings.Contains(tags, \"memoize_builders\") {\n\t\tif tagsCmd != \"\" {\n\t\t\ttagsCmd += \",tinygo\"\n\t\t}\n\t\tif err := sh.RunV(\"go\", \"test\", \"-race\", tagsCmd, \"-coverprofile=build/coverage-tinygo.txt\", \"-covermode=atomic\", \"-coverpkg=./...\", \"./...\"); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn sh.RunV(\"go\", \"tool\", \"cover\", \"-html=build/coverage.txt\", \"-o\", \"build/coverage.html\")\n}\n\n// Fuzz runs fuzz tests\nfunc Fuzz() error {\n\t// Go must be run once per test when fuzzing\n\ttests := []struct {\n\t\tpkg   string\n\t\ttests []string\n\t}{\n\t\t{\n\t\t\tpkg: \"./internal/operators\",\n\t\t\ttests: []string{\n\t\t\t\t\"FuzzSQLi\",\n\t\t\t\t\"FuzzXSS\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tpkg: \"./internal/transformations\",\n\t\t\ttests: []string{\n\t\t\t\t\"FuzzB64Decode$\",\n\t\t\t\t\"FuzzB64DecodeExt\",\n\t\t\t\t\"FuzzCMDLine\",\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, pkgTests := range tests {\n\t\tfor _, test := range pkgTests.tests {\n\t\t\tfmt.Println(\"Running\", test)\n\t\t\tif err := sh.RunV(\"go\", \"test\", \"-fuzz=\"+test, \"-fuzztime=2m\", pkgTests.pkg); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// Doc runs godoc, access at http://localhost:6060\nfunc Doc() error {\n\treturn sh.RunV(\"go\", \"run\", \"golang.org/x/tools/cmd/godoc@latest\", \"-http=:6060\")\n}\n\n// Precommit installs a git hook to run check when committing\nfunc Precommit() error {\n\tif _, err := os.Stat(filepath.Join(\".git\", \"hooks\")); os.IsNotExist(err) {\n\t\treturn errNoGitDir\n\t}\n\n\tf, err := os.ReadFile(\".pre-commit.hook\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn os.WriteFile(filepath.Join(\".git\", \"hooks\", \"pre-commit\"), f, 0755)\n}\n\n// Check runs lint and tests.\nfunc Check() {\n\tmg.SerialDeps(Lint, Test)\n}\n\n// combinations generates all possible combinations of build tags\nfunc combinations(tags []string) []string {\n\tvar result []string\n\tn := len(tags)\n\tfor i := 0; i < (1 << n); i++ {\n\t\tvar combo []string\n\t\tfor j := 0; j < n; j++ {\n\t\t\tif i&(1<<j) != 0 {\n\t\t\t\tcombo = append(combo, tags[j])\n\t\t\t}\n\t\t}\n\t\tif len(combo) > 0 {\n\t\t\tresult = append(result, strings.Join(combo, \",\"))\n\t\t} else {\n\t\t\tresult = append(result, \"\")\n\t\t}\n\t}\n\treturn result\n}\n\n// Generates a JSON output to stdout which contains all permutations of build tags for the project.\nfunc TagsMatrix() error {\n\ttags := []string{\n\t\t\"coraza.rule.case_sensitive_args_keys\",\n\t\t\"coraza.rule.no_regex_multiline\",\n\t\t\"memoize_builders\",\n\t\t\"coraza.rule.multiphase_valuation\",\n\t\t\"no_fs_access\",\n\t}\n\tcombos := combinations(tags)\n\n\tjsonData, err := json.Marshal(combos)\n\tif err != nil {\n\t\tfmt.Println(\"Error generating JSON:\", err)\n\t\treturn nil\n\t}\n\n\tfmt.Println(string(jsonData))\n\treturn nil\n}\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.1240234375,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"local>corazawaf/renovate-config\"\n  ]\n}\n"
        },
        {
          "name": "sonar-project.properties",
          "type": "blob",
          "size": 0.673828125,
          "content": "sonar.projectKey=coraza\nsonar.organization=jptosso\n\n# This is the name and version displayed in the SonarCloud UI.\nsonar.projectName=coraza-waf\nsonar.projectVersion=v3.0.0-dev\n \n# Path is relative to the sonar-project.properties file. Replace \"\\\" by \"/\" on Windows.\n#sonar.sources=.\n \n# Encoding of the source code. Default is default system encoding\n#sonar.sourceEncoding=UTF-8\nsonar.c.file.suffixes=-\nsonar.cpp.file.suffixes=-\nsonar.objc.file.suffixes=-\nsonar.python.file.suffixes=-\n\nsonar.sources=.\nsonar.exclusions=**/*_test.go,**/vendor/**,examples/**/*\n\nsonar.go.coverage.reportPaths=coverage-waf.out\nsonar.test.inclusions=**/*_test.go\nsonar.test.exclusions=**/vendor/**,examples/**/*"
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "types",
          "type": "tree",
          "content": null
        },
        {
          "name": "waf.go",
          "type": "blob",
          "size": 3.8359375,
          "content": "// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors\n// SPDX-License-Identifier: Apache-2.0\n\npackage coraza\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/corazawaf/coraza/v3/experimental\"\n\t\"github.com/corazawaf/coraza/v3/internal/corazawaf\"\n\t\"github.com/corazawaf/coraza/v3/internal/environment\"\n\t\"github.com/corazawaf/coraza/v3/internal/seclang\"\n\t\"github.com/corazawaf/coraza/v3/types\"\n)\n\n// WAF instance is used to store configurations and rules\n// Every web application should have a different WAF instance,\n// but you can share an instance if you are ok with sharing\n// configurations, rules and logging.\n// Transactions and SecLang parser requires a WAF instance\n// You can use as many WAF instances as you want, and they are\n// concurrent safe\ntype WAF interface {\n\t// NewTransaction Creates a new initialized transaction for this WAF instance\n\tNewTransaction() types.Transaction\n\tNewTransactionWithID(id string) types.Transaction\n}\n\n// NewWAF creates a new WAF instance with the provided configuration.\nfunc NewWAF(config WAFConfig) (WAF, error) {\n\tc := config.(*wafConfig)\n\n\twaf := corazawaf.NewWAF()\n\n\tif environment.HasAccessToFS {\n\t\tif err := environment.IsDirWritable(waf.TmpDir); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"filesystem access check: %w. Use 'no_fs_access' build tag, if not available\", err)\n\t\t}\n\t}\n\n\tif c.debugLogger != nil {\n\t\twaf.Logger = c.debugLogger\n\t}\n\n\tparser := seclang.NewParser(waf)\n\n\tif c.fsRoot != nil {\n\t\tparser.SetRoot(c.fsRoot)\n\t}\n\n\tfor _, r := range c.rules {\n\t\tswitch {\n\t\tcase r.rule != nil:\n\t\t\tif err := waf.Rules.Add(r.rule); err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"invalid WAF config from rule: %w\", err)\n\t\t\t}\n\t\tcase r.str != \"\":\n\t\t\tif err := parser.FromString(r.str); err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"invalid WAF config from string: %w\", err)\n\t\t\t}\n\t\tcase r.file != \"\":\n\t\t\tif err := parser.FromFile(r.file); err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"invalid WAF config from file: %w\", err)\n\t\t\t}\n\t\t}\n\t}\n\n\tpopulateAuditLog(waf, c)\n\n\tif err := waf.InitAuditLogWriter(); err != nil {\n\t\treturn nil, fmt.Errorf(\"invalid WAF config from audit log: %w\", err)\n\t}\n\n\tif c.requestBodyAccess {\n\t\twaf.RequestBodyAccess = true\n\t}\n\n\tif c.requestBodyLimit != nil {\n\t\twaf.RequestBodyLimit = int64(*c.requestBodyLimit)\n\t}\n\n\tif c.requestBodyInMemoryLimit != nil {\n\t\twaf.SetRequestBodyInMemoryLimit(int64(*c.requestBodyInMemoryLimit))\n\t}\n\n\tif c.responseBodyAccess {\n\t\twaf.ResponseBodyAccess = true\n\t}\n\n\tif c.responseBodyLimit != nil {\n\t\twaf.ResponseBodyLimit = int64(*c.responseBodyLimit)\n\t}\n\n\tif c.responseBodyMimeTypes != nil {\n\t\twaf.ResponseBodyMimeTypes = c.responseBodyMimeTypes\n\t}\n\n\tif c.errorCallback != nil {\n\t\twaf.ErrorLogCb = c.errorCallback\n\t}\n\n\tif err := waf.Validate(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wafWrapper{waf: waf}, nil\n}\n\nfunc populateAuditLog(waf *corazawaf.WAF, c *wafConfig) {\n\tif c.auditLog == nil {\n\t\treturn\n\t}\n\n\tif c.auditLog.relevantOnly {\n\t\twaf.AuditEngine = types.AuditEngineRelevantOnly\n\t} else {\n\t\twaf.AuditEngine = types.AuditEngineOn\n\t}\n\n\tif len(c.auditLog.parts) > 0 {\n\t\twaf.AuditLogParts = c.auditLog.parts\n\t}\n\n\tif c.auditLog.writer != nil {\n\t\twaf.SetAuditLogWriter(c.auditLog.writer)\n\t}\n}\n\ntype wafWrapper struct {\n\twaf *corazawaf.WAF\n}\n\n// NewTransaction implements the same method on WAF.\nfunc (w wafWrapper) NewTransaction() types.Transaction {\n\treturn w.waf.NewTransaction()\n}\n\n// NewTransactionWithID implements the same method on WAF.\nfunc (w wafWrapper) NewTransactionWithID(id string) types.Transaction {\n\tid = strings.TrimSpace(id)\n\tif len(id) == 0 {\n\t\tw.waf.Logger.Warn().Msg(\"Empty ID passed for new transaction\")\n\t}\n\n\treturn w.waf.NewTransactionWithOptions(corazawaf.Options{Context: context.Background(), ID: id})\n}\n\n// NewTransaction implements the same method on WAF.\nfunc (w wafWrapper) NewTransactionWithOptions(opts experimental.Options) types.Transaction {\n\treturn w.waf.NewTransactionWithOptions(opts)\n}\n"
        },
        {
          "name": "waf_test.go",
          "type": "blob",
          "size": 4.271484375,
          "content": "// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors\n// SPDX-License-Identifier: Apache-2.0\n\npackage coraza\n\nimport (\n\t\"errors\"\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/corazawaf/coraza/v3/experimental/plugins/plugintypes\"\n\t\"github.com/corazawaf/coraza/v3/internal/corazawaf\"\n\t\"github.com/corazawaf/coraza/v3/types\"\n)\n\nfunc TestRequestBodyLimit(t *testing.T) {\n\ttestCases := map[string]struct {\n\t\texpectedErr   error\n\t\tlimit         int\n\t\tinMemoryLimit int\n\t}{\n\t\t\"empty limit\": {\n\t\t\tlimit:         0,\n\t\t\tinMemoryLimit: 2,\n\t\t\texpectedErr:   errors.New(\"request body limit should be bigger than 0\"),\n\t\t},\n\t\t\"empty memory limit\": {\n\t\t\tlimit:         2,\n\t\t\tinMemoryLimit: 0,\n\t\t\texpectedErr:   errors.New(\"request body memory limit should be bigger than 0\"),\n\t\t},\n\t\t\"memory limit bigger than limit\": {\n\t\t\tlimit:         5,\n\t\t\tinMemoryLimit: 9,\n\t\t\texpectedErr:   errors.New(\"request body limit should be at least the memory limit\"),\n\t\t},\n\t\t\"limit bigger than the hard limit\": {\n\t\t\tlimit:       1073741825,\n\t\t\texpectedErr: errors.New(\"request body limit should be at most 1GB\"),\n\t\t},\n\t\t\"right limits\": {\n\t\t\tlimit:         100,\n\t\t\tinMemoryLimit: 50,\n\t\t},\n\t}\n\n\tfor name, tCase := range testCases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tcfg := NewWAFConfig().(*wafConfig)\n\t\t\tcfg.requestBodyLimit = &tCase.limit\n\t\t\tcfg.requestBodyInMemoryLimit = &tCase.inMemoryLimit\n\n\t\t\t_, err := NewWAF(cfg)\n\t\t\tif tCase.expectedErr == nil {\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatalf(\"unexpected error: %s\", err.Error())\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif err == nil {\n\t\t\t\t\tt.Fatal(\"expected error\")\n\t\t\t\t}\n\n\t\t\t\tif want, have := tCase.expectedErr, err; want.Error() != have.Error() {\n\t\t\t\t\tt.Fatalf(\"unexpected error: want %q, have %q\", want, have)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestResponseBodyLimit(t *testing.T) {\n\ttestCases := map[string]struct {\n\t\texpectedErr error\n\t\tlimit       int\n\t}{\n\t\t\"empty limit\": {\n\t\t\tlimit:       0,\n\t\t\texpectedErr: errors.New(\"response body limit should be bigger than 0\"),\n\t\t},\n\t\t\"limit bigger than the hard limit\": {\n\t\t\tlimit:       1073741825,\n\t\t\texpectedErr: errors.New(\"response body limit should be at most 1GB\"),\n\t\t},\n\t\t\"right limit\": {\n\t\t\tlimit: 100,\n\t\t},\n\t}\n\n\tfor name, tCase := range testCases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tcfg := NewWAFConfig().(*wafConfig)\n\t\t\tcfg.responseBodyLimit = &tCase.limit\n\n\t\t\t_, err := NewWAF(cfg)\n\t\t\tif tCase.expectedErr == nil {\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatalf(\"unexpected error: %s\", err.Error())\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif err == nil {\n\t\t\t\t\tt.Fatal(\"expected error\")\n\t\t\t\t}\n\n\t\t\t\tif want, have := tCase.expectedErr, err; want.Error() != have.Error() {\n\t\t\t\t\tt.Fatalf(\"unexpected error: want %q, have %q\", want, have)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\ntype testAuditLogWriter struct {\n\tplugintypes.AuditLogWriter\n}\n\nfunc (*testAuditLogWriter) Init(plugintypes.AuditLogConfig) error {\n\treturn nil\n}\n\nfunc TestPopulateAuditLog(t *testing.T) {\n\twriter := &testAuditLogWriter{}\n\n\ttestCases := map[string]struct {\n\t\tconfig *wafConfig\n\t\tcheck  func(*testing.T, *corazawaf.WAF)\n\t}{\n\t\t\"empty config\": {\n\t\t\tconfig: &wafConfig{},\n\t\t\tcheck:  func(*testing.T, *corazawaf.WAF) {},\n\t\t},\n\t\t\"with relevant only\": {\n\t\t\tconfig: &wafConfig{\n\t\t\t\tauditLog: &auditLogConfig{\n\t\t\t\t\trelevantOnly: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\tcheck: func(t *testing.T, waf *corazawaf.WAF) {\n\t\t\t\tif waf.AuditEngine != types.AuditEngineRelevantOnly {\n\t\t\t\t\tt.Fatal(\"expected AuditLogRelevantOnly to be true\")\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t\"with parts\": {\n\t\t\tconfig: &wafConfig{\n\t\t\t\tauditLog: &auditLogConfig{\n\t\t\t\t\tparts: []types.AuditLogPart{\n\t\t\t\t\t\ttypes.AuditLogPartRequestHeaders,\n\t\t\t\t\t\ttypes.AuditLogPartResponseBody,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tcheck: func(t *testing.T, waf *corazawaf.WAF) {\n\t\t\t\tif want, have := []types.AuditLogPart{\n\t\t\t\t\ttypes.AuditLogPartRequestHeaders,\n\t\t\t\t\ttypes.AuditLogPartResponseBody,\n\t\t\t\t}, waf.AuditLogParts; len(want) != len(have) {\n\t\t\t\t\tt.Fatalf(\"unexpected AuditLogParts: want %v, have %v\", want, have)\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t\"with audit log writer\": {\n\t\t\tconfig: &wafConfig{\n\t\t\t\tauditLog: &auditLogConfig{writer: writer},\n\t\t\t},\n\t\t\tcheck: func(t *testing.T, waf *corazawaf.WAF) {\n\t\t\t\tif reflect.DeepEqual(waf.AuditLogWriter(), &writer) {\n\t\t\t\t\tt.Fatal(\"expected AuditLogWriter to be set\")\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t}\n\n\tfor name, tCase := range testCases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\twaf := &corazawaf.WAF{}\n\t\t\tpopulateAuditLog(waf, tCase.config)\n\t\t\ttCase.check(t, waf)\n\t\t})\n\t}\n}\n"
        }
      ]
    }
  ]
}