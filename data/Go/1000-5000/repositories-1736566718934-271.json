{
  "metadata": {
    "timestamp": 1736566718934,
    "page": 271,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yuin/goldmark",
      "stars": 3800,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.267578125,
          "content": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n*.pprof\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n.DS_Store\nfuzz/corpus\nfuzz/crashers\nfuzz/suppressions\nfuzz/fuzz-fuzz.zip\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 2.2548828125,
          "content": "run:\n  deadline: 10m\n\nissues:\n  exclude-use-default: false\n  exclude-rules:\n    - path: _test.go\n      linters:\n        - errcheck\n        - lll\n  exclude:\n  - \"Package util\"\n\nlinters:\n  disable-all: true\n  enable:\n    - errcheck\n    - gosimple\n    - govet\n    - ineffassign\n    - staticcheck\n    - typecheck\n    - unused\n    - gofmt\n    - godot\n    - makezero\n    - misspell\n    - revive\n    - wastedassign\n    - lll\n\nlinters-settings:\n  revive:\n    severity: \"warning\"\n    confidence: 0.8\n    rules:\n      - name: blank-imports\n        severity: warning\n        disabled: false\n      - name: context-as-argument\n        severity: warning\n        disabled: false\n      - name: context-keys-type\n        severity: warning\n        disabled: false\n      - name: dot-imports\n        severity: warning\n        disabled: true\n      - name: error-return\n        severity: warning\n        disabled: false\n      - name: error-strings\n        severity: warning\n        disabled: false\n      - name: error-naming\n        severity: warning\n        disabled: false\n      - name: exported\n        severity: warning\n        disabled: false\n      - name: increment-decrement\n        severity: warning\n        disabled: false\n      - name: var-naming\n        severity: warning\n        disabled: false\n      - name: var-declaration\n        severity: warning\n        disabled: false\n      - name: package-comments\n        severity: warning\n        disabled: false\n      - name: range\n        severity: warning\n        disabled: false\n      - name: receiver-naming\n        severity: warning\n        disabled: false\n      - name: time-naming\n        severity: warning\n        disabled: false\n      - name: unexported-return\n        severity: warning\n        disabled: false\n      - name: indent-error-flow\n        severity: warning\n        disabled: false\n      - name: errorf\n        severity: warning\n        disabled: false\n      - name: empty-block\n        severity: warning\n        disabled: true\n      - name: superfluous-else\n        severity: warning\n        disabled: false\n      - name: unused-parameter\n        severity: warning\n        disabled: true\n      - name: unreachable-code\n        severity: warning\n        disabled: false\n      - name: redefines-builtin-id\n        severity: warning\n        disabled: false\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2019 Yusuke Inuzuka\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.4951171875,
          "content": ".PHONY: test fuzz lint\n\nlint:\n\tgolangci-lint run -c .golangci.yml ./...\n\ntest:\n\tgo test -coverprofile=profile.out -coverpkg=github.com/yuin/goldmark,github.com/yuin/goldmark/ast,github.com/yuin/goldmark/extension,github.com/yuin/goldmark/extension/ast,github.com/yuin/goldmark/parser,github.com/yuin/goldmark/renderer,github.com/yuin/goldmark/renderer/html,github.com/yuin/goldmark/text,github.com/yuin/goldmark/util ./...\n\ncov: test\n\tgo tool cover -html=profile.out\n\nfuzz:\n\tcd ./fuzz && go test -fuzz=Fuzz\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.0751953125,
          "content": "goldmark\n==========================================\n\n[![https://pkg.go.dev/github.com/yuin/goldmark](https://pkg.go.dev/badge/github.com/yuin/goldmark.svg)](https://pkg.go.dev/github.com/yuin/goldmark)\n[![https://github.com/yuin/goldmark/actions?query=workflow:test](https://github.com/yuin/goldmark/workflows/test/badge.svg?branch=master&event=push)](https://github.com/yuin/goldmark/actions?query=workflow:test)\n[![https://coveralls.io/github/yuin/goldmark](https://coveralls.io/repos/github/yuin/goldmark/badge.svg?branch=master)](https://coveralls.io/github/yuin/goldmark)\n[![https://goreportcard.com/report/github.com/yuin/goldmark](https://goreportcard.com/badge/github.com/yuin/goldmark)](https://goreportcard.com/report/github.com/yuin/goldmark)\n\n> A Markdown parser written in Go. Easy to extend, standards-compliant, well-structured.\n\ngoldmark is compliant with CommonMark 0.31.2.\n\n- [goldmark playground](https://yuin.github.io/goldmark/playground/) : Try goldmark online. This playground is built with WASM(5-10MB).\n\nMotivation\n----------------------\nI needed a Markdown parser for Go that satisfies the following requirements:\n\n- Easy to extend.\n    - Markdown is poor in document expressions compared to other light markup languages such as reStructuredText.\n    - We have extensions to the Markdown syntax, e.g. PHP Markdown Extra, GitHub Flavored Markdown.\n- Standards-compliant.\n    - Markdown has many dialects.\n    - GitHub-Flavored Markdown is widely used and is based upon CommonMark, effectively mooting the question of whether or not CommonMark is an ideal specification.\n        - CommonMark is complicated and hard to implement.\n- Well-structured.\n    - AST-based; preserves source position of nodes.\n- Written in pure Go.\n\n[golang-commonmark](https://gitlab.com/golang-commonmark/markdown) may be a good choice, but it seems to be a copy of [markdown-it](https://github.com/markdown-it).\n\n[blackfriday.v2](https://github.com/russross/blackfriday/tree/v2) is a fast and widely-used implementation, but is not CommonMark-compliant and cannot be extended from outside of the package, since its AST uses structs instead of interfaces.\n\nFurthermore, its behavior differs from other implementations in some cases, especially regarding lists: [Deep nested lists don't output correctly #329](https://github.com/russross/blackfriday/issues/329), [List block cannot have a second line #244](https://github.com/russross/blackfriday/issues/244), etc.\n\nThis behavior sometimes causes problems. If you migrate your Markdown text from GitHub to blackfriday-based wikis, many lists will immediately be broken.\n\nAs mentioned above, CommonMark is complicated and hard to implement, so Markdown parsers based on CommonMark are few and far between.\n\nFeatures\n----------------------\n\n- **Standards-compliant.**  goldmark is fully compliant with the latest [CommonMark](https://commonmark.org/) specification.\n- **Extensible.**  Do you want to add a `@username` mention syntax to Markdown?\n  You can easily do so in goldmark. You can add your AST nodes,\n  parsers for block-level elements, parsers for inline-level elements,\n  transformers for paragraphs, transformers for the whole AST structure, and\n  renderers.\n- **Performance.**  goldmark's performance is on par with that of cmark,\n  the CommonMark reference implementation written in C.\n- **Robust.**  goldmark is tested with `go test --fuzz`.\n- **Built-in extensions.**  goldmark ships with common extensions like tables, strikethrough,\n  task lists, and definition lists.\n- **Depends only on standard libraries.**\n\nInstallation\n----------------------\n```bash\n$ go get github.com/yuin/goldmark\n```\n\n\nUsage\n----------------------\nImport packages:\n\n```go\nimport (\n    \"bytes\"\n    \"github.com/yuin/goldmark\"\n)\n```\n\n\nConvert Markdown documents with the CommonMark-compliant mode:\n\n```go\nvar buf bytes.Buffer\nif err := goldmark.Convert(source, &buf); err != nil {\n  panic(err)\n}\n```\n\nWith options\n------------------------------\n\n```go\nvar buf bytes.Buffer\nif err := goldmark.Convert(source, &buf, parser.WithContext(ctx)); err != nil {\n  panic(err)\n}\n```\n\n| Functional option | Type | Description |\n| ----------------- | ---- | ----------- |\n| `parser.WithContext` | A `parser.Context` | Context for the parsing phase. |\n\nContext options\n----------------------\n\n| Functional option | Type | Description |\n| ----------------- | ---- | ----------- |\n| `parser.WithIDs` | A `parser.IDs` | `IDs` allows you to change logics that are related to element id(ex: Auto heading id generation). |\n\n\nCustom parser and renderer\n--------------------------\n```go\nimport (\n    \"bytes\"\n    \"github.com/yuin/goldmark\"\n    \"github.com/yuin/goldmark/extension\"\n    \"github.com/yuin/goldmark/parser\"\n    \"github.com/yuin/goldmark/renderer/html\"\n)\n\nmd := goldmark.New(\n          goldmark.WithExtensions(extension.GFM),\n          goldmark.WithParserOptions(\n              parser.WithAutoHeadingID(),\n          ),\n          goldmark.WithRendererOptions(\n              html.WithHardWraps(),\n              html.WithXHTML(),\n          ),\n      )\nvar buf bytes.Buffer\nif err := md.Convert(source, &buf); err != nil {\n    panic(err)\n}\n```\n\n| Functional option | Type | Description |\n| ----------------- | ---- | ----------- |\n| `goldmark.WithParser` | `parser.Parser`  | This option must be passed before `goldmark.WithParserOptions` and `goldmark.WithExtensions` |\n| `goldmark.WithRenderer` | `renderer.Renderer`  | This option must be passed before `goldmark.WithRendererOptions` and `goldmark.WithExtensions`  |\n| `goldmark.WithParserOptions` | `...parser.Option`  |  |\n| `goldmark.WithRendererOptions` | `...renderer.Option` |  |\n| `goldmark.WithExtensions` | `...goldmark.Extender`  |  |\n\nParser and Renderer options\n------------------------------\n\n### Parser options\n\n| Functional option | Type | Description |\n| ----------------- | ---- | ----------- |\n| `parser.WithBlockParsers` | A `util.PrioritizedSlice` whose elements are `parser.BlockParser` | Parsers for parsing block level elements. |\n| `parser.WithInlineParsers` | A `util.PrioritizedSlice` whose elements are `parser.InlineParser` | Parsers for parsing inline level elements. |\n| `parser.WithParagraphTransformers` | A `util.PrioritizedSlice` whose elements are `parser.ParagraphTransformer` | Transformers for transforming paragraph nodes. |\n| `parser.WithASTTransformers` | A `util.PrioritizedSlice` whose elements are `parser.ASTTransformer` | Transformers for transforming an AST. |\n| `parser.WithAutoHeadingID` | `-` | Enables auto heading ids. |\n| `parser.WithAttribute` | `-` | Enables custom attributes. Currently only headings supports attributes. |\n\n### HTML Renderer options\n\n| Functional option | Type | Description |\n| ----------------- | ---- | ----------- |\n| `html.WithWriter` | `html.Writer` | `html.Writer` for writing contents to an `io.Writer`. |\n| `html.WithHardWraps` | `-` | Render newlines as `<br>`.|\n| `html.WithXHTML` | `-` | Render as XHTML. |\n| `html.WithUnsafe` | `-` | By default, goldmark does not render raw HTML or potentially dangerous links. With this option, goldmark renders such content as written. |\n\n### Built-in extensions\n\n- `extension.Table`\n    - [GitHub Flavored Markdown: Tables](https://github.github.com/gfm/#tables-extension-)\n- `extension.Strikethrough`\n    - [GitHub Flavored Markdown: Strikethrough](https://github.github.com/gfm/#strikethrough-extension-)\n- `extension.Linkify`\n    - [GitHub Flavored Markdown: Autolinks](https://github.github.com/gfm/#autolinks-extension-)\n- `extension.TaskList`\n    - [GitHub Flavored Markdown: Task list items](https://github.github.com/gfm/#task-list-items-extension-)\n- `extension.GFM`\n    - This extension enables Table, Strikethrough, Linkify and TaskList.\n    - This extension does not filter tags defined in [6.11: Disallowed Raw HTML (extension)](https://github.github.com/gfm/#disallowed-raw-html-extension-).\n    If you need to filter HTML tags, see [Security](#security).\n    - If you need to parse github emojis, you can use [goldmark-emoji](https://github.com/yuin/goldmark-emoji) extension.\n- `extension.DefinitionList`\n    - [PHP Markdown Extra: Definition lists](https://michelf.ca/projects/php-markdown/extra/#def-list)\n- `extension.Footnote`\n    - [PHP Markdown Extra: Footnotes](https://michelf.ca/projects/php-markdown/extra/#footnotes)\n- `extension.Typographer`\n    - This extension substitutes punctuations with typographic entities like [smartypants](https://daringfireball.net/projects/smartypants/).\n- `extension.CJK`\n    - This extension is a shortcut for CJK related functionalities.\n\n### Attributes\nThe `parser.WithAttribute` option allows you to define attributes on some elements.\n\nCurrently only headings support attributes.\n\n**Attributes are being discussed in the\n[CommonMark forum](https://talk.commonmark.org/t/consistent-attribute-syntax/272).\nThis syntax may possibly change in the future.**\n\n\n#### Headings\n\n```\n## heading ## {#id .className attrName=attrValue class=\"class1 class2\"}\n\n## heading {#id .className attrName=attrValue class=\"class1 class2\"}\n```\n\n```\nheading {#id .className attrName=attrValue}\n============\n```\n\n### Table extension\nThe Table extension implements [Table(extension)](https://github.github.com/gfm/#tables-extension-), as\ndefined in [GitHub Flavored Markdown Spec](https://github.github.com/gfm/).\n\nSpecs are defined for XHTML, so specs use some deprecated attributes for HTML5.\n\nYou can override alignment rendering method via options.\n\n| Functional option | Type | Description |\n| ----------------- | ---- | ----------- |\n| `extension.WithTableCellAlignMethod` | `extension.TableCellAlignMethod` | Option indicates how are table cells aligned. |\n\n### Typographer extension\n\nThe Typographer extension translates plain ASCII punctuation characters into typographic-punctuation HTML entities.\n\nDefault substitutions are:\n\n| Punctuation | Default entity |\n| ------------ | ---------- |\n| `'`           | `&lsquo;`, `&rsquo;` |\n| `\"`           | `&ldquo;`, `&rdquo;` |\n| `--`       | `&ndash;` |\n| `---`      | `&mdash;` |\n| `...`      | `&hellip;` |\n| `<<`       | `&laquo;` |\n| `>>`       | `&raquo;` |\n\nYou can override the default substitutions via `extensions.WithTypographicSubstitutions`:\n\n```go\nmarkdown := goldmark.New(\n    goldmark.WithExtensions(\n        extension.NewTypographer(\n            extension.WithTypographicSubstitutions(extension.TypographicSubstitutions{\n                extension.LeftSingleQuote:  []byte(\"&sbquo;\"),\n                extension.RightSingleQuote: nil, // nil disables a substitution\n            }),\n        ),\n    ),\n)\n```\n\n### Linkify extension\n\nThe Linkify extension implements [Autolinks(extension)](https://github.github.com/gfm/#autolinks-extension-), as\ndefined in [GitHub Flavored Markdown Spec](https://github.github.com/gfm/).\n\nSince the spec does not define details about URLs, there are numerous ambiguous cases.\n\nYou can override autolinking patterns via options.\n\n| Functional option | Type | Description |\n| ----------------- | ---- | ----------- |\n| `extension.WithLinkifyAllowedProtocols` | `[][]byte \\| []string` | List of allowed protocols such as `[]string{ \"http:\" }` |\n| `extension.WithLinkifyURLRegexp` | `*regexp.Regexp` | Regexp that defines URLs, including protocols |\n| `extension.WithLinkifyWWWRegexp` | `*regexp.Regexp` | Regexp that defines URL starting with `www.`. This pattern corresponds to [the extended www autolink](https://github.github.com/gfm/#extended-www-autolink) |\n| `extension.WithLinkifyEmailRegexp` | `*regexp.Regexp` | Regexp that defines email addresses` |\n\nExample, using [xurls](https://github.com/mvdan/xurls):\n\n```go\nimport \"mvdan.cc/xurls/v2\"\n\nmarkdown := goldmark.New(\n    goldmark.WithRendererOptions(\n        html.WithXHTML(),\n        html.WithUnsafe(),\n    ),\n    goldmark.WithExtensions(\n        extension.NewLinkify(\n            extension.WithLinkifyAllowedProtocols([]string{\n                \"http:\",\n                \"https:\",\n            }),\n            extension.WithLinkifyURLRegexp(\n                xurls.Strict(),\n            ),\n        ),\n    ),\n)\n```\n\n### Footnotes extension\n\nThe Footnote extension implements [PHP Markdown Extra: Footnotes](https://michelf.ca/projects/php-markdown/extra/#footnotes).\n\nThis extension has some options:\n\n| Functional option | Type | Description |\n| ----------------- | ---- | ----------- |\n| `extension.WithFootnoteIDPrefix` | `[]byte \\| string` |  a prefix for the id attributes.|\n| `extension.WithFootnoteIDPrefixFunction` | `func(gast.Node) []byte` |  a function that determines the id attribute for given Node.|\n| `extension.WithFootnoteLinkTitle` | `[]byte \\| string` |  an optional title attribute for footnote links.|\n| `extension.WithFootnoteBacklinkTitle` | `[]byte \\| string` |  an optional title attribute for footnote backlinks. |\n| `extension.WithFootnoteLinkClass` | `[]byte \\| string` |  a class for footnote links. This defaults to `footnote-ref`. |\n| `extension.WithFootnoteBacklinkClass` | `[]byte \\| string` |  a class for footnote backlinks. This defaults to `footnote-backref`. |\n| `extension.WithFootnoteBacklinkHTML` | `[]byte \\| string` |  a class for footnote backlinks. This defaults to `&#x21a9;&#xfe0e;`. |\n\nSome options can have special substitutions. Occurrences of “^^” in the string will be replaced by the corresponding footnote number in the HTML output. Occurrences of “%%” will be replaced by a number for the reference (footnotes can have multiple references).\n\n`extension.WithFootnoteIDPrefix` and `extension.WithFootnoteIDPrefixFunction` are useful if you have multiple Markdown documents displayed inside one HTML document to avoid footnote ids to clash each other.\n\n`extension.WithFootnoteIDPrefix` sets fixed id prefix, so you may write codes like the following:\n\n```go\nfor _, path := range files {\n    source := readAll(path)\n    prefix := getPrefix(path)\n\n    markdown := goldmark.New(\n        goldmark.WithExtensions(\n            NewFootnote(\n                WithFootnoteIDPrefix(path),\n            ),\n        ),\n    )\n    var b bytes.Buffer\n    err := markdown.Convert(source, &b)\n    if err != nil {\n        t.Error(err.Error())\n    }\n}\n```\n\n`extension.WithFootnoteIDPrefixFunction` determines an id prefix by calling given function, so you may write codes like the following:\n\n```go\nmarkdown := goldmark.New(\n    goldmark.WithExtensions(\n        NewFootnote(\n                WithFootnoteIDPrefixFunction(func(n gast.Node) []byte {\n                    v, ok := n.OwnerDocument().Meta()[\"footnote-prefix\"]\n                    if ok {\n                        return util.StringToReadOnlyBytes(v.(string))\n                    }\n                    return nil\n                }),\n        ),\n    ),\n)\n\nfor _, path := range files {\n    source := readAll(path)\n    var b bytes.Buffer\n\n    doc := markdown.Parser().Parse(text.NewReader(source))\n    doc.Meta()[\"footnote-prefix\"] = getPrefix(path)\n    err := markdown.Renderer().Render(&b, source, doc)\n}\n```\n\nYou can use [goldmark-meta](https://github.com/yuin/goldmark-meta) to define a id prefix in the markdown document:\n\n\n```markdown\n---\ntitle: document title\nslug: article1\nfootnote-prefix: article1\n---\n\n# My article\n\n```\n\n### CJK extension\nCommonMark gives compatibilities a high priority and original markdown was designed by westerners. So CommonMark lacks considerations for languages like CJK.\n\nThis extension provides additional options for CJK users.\n\n| Functional option | Type | Description |\n| ----------------- | ---- | ----------- |\n| `extension.WithEastAsianLineBreaks` | `...extension.EastAsianLineBreaksStyle` | Soft line breaks are rendered as a newline. Some asian users will see it as an unnecessary space. With this option, soft line breaks between east asian wide characters will be ignored. This defaults to `EastAsianLineBreaksStyleSimple`. |\n| `extension.WithEscapedSpace` | `-` | Without spaces around an emphasis started with east asian punctuations, it is not interpreted as an emphasis(as defined in CommonMark spec). With this option, you can avoid this inconvenient behavior by putting 'not rendered' spaces around an emphasis like `太郎は\\ **「こんにちわ」**\\ といった`. |\n\n#### Styles of Line Breaking\n\n| Style | Description |\n| ----- | ----------- |\n| `EastAsianLineBreaksStyleSimple` | Soft line breaks are ignored if both sides of the break are east asian wide character. This behavior is the same as [`east_asian_line_breaks`](https://pandoc.org/MANUAL.html#extension-east_asian_line_breaks) in Pandoc. |\n| `EastAsianLineBreaksCSS3Draft` | This option implements CSS text level3 [Segment Break Transformation Rules](https://drafts.csswg.org/css-text-3/#line-break-transform) with [some enhancements](https://github.com/w3c/csswg-drafts/issues/5086). |\n\n#### Example of `EastAsianLineBreaksStyleSimple`\n\nInput Markdown:\n\n```md\n私はプログラマーです。\n東京の会社に勤めています。\nGoでWebアプリケーションを開発しています。\n```\n\nOutput:\n\n```html\n<p>私はプログラマーです。東京の会社に勤めています。\\nGoでWebアプリケーションを開発しています。</p>\n```\n\n#### Example of `EastAsianLineBreaksCSS3Draft`\n\nInput Markdown:\n\n```md\n私はプログラマーです。\n東京の会社に勤めています。\nGoでWebアプリケーションを開発しています。\n```\n\nOutput:\n\n```html\n<p>私はプログラマーです。東京の会社に勤めています。GoでWebアプリケーションを開発しています。</p>\n```\n\nSecurity\n--------------------\nBy default, goldmark does not render raw HTML or potentially-dangerous URLs.\nIf you need to gain more control over untrusted contents, it is recommended that you\nuse an HTML sanitizer such as [bluemonday](https://github.com/microcosm-cc/bluemonday).\n\nBenchmark\n--------------------\nYou can run this benchmark in the `_benchmark` directory.\n\n### against other golang libraries\n\nblackfriday v2 seems to be the fastest, but as it is not CommonMark compliant, its performance cannot be directly compared to that of the CommonMark-compliant libraries.\n\ngoldmark, meanwhile, builds a clean, extensible AST structure, achieves full compliance with\nCommonMark, and consumes less memory, all while being reasonably fast.\n\n- MBP 2019 13″(i5, 16GB), Go1.17\n\n```\nBenchmarkMarkdown/Blackfriday-v2-8                   302           3743747 ns/op         3290445 B/op      20050 allocs/op\nBenchmarkMarkdown/GoldMark-8                         280           4200974 ns/op         2559738 B/op      13435 allocs/op\nBenchmarkMarkdown/CommonMark-8                       226           5283686 ns/op         2702490 B/op      20792 allocs/op\nBenchmarkMarkdown/Lute-8                              12          92652857 ns/op        10602649 B/op      40555 allocs/op\nBenchmarkMarkdown/GoMarkdown-8                        13          81380167 ns/op         2245002 B/op      22889 allocs/op\n```\n\n### against cmark (CommonMark reference implementation written in C)\n\n- MBP 2019 13″(i5, 16GB), Go1.17\n\n```\n----------- cmark -----------\nfile: _data.md\niteration: 50\naverage: 0.0044073057 sec\n------- goldmark -------\nfile: _data.md\niteration: 50\naverage: 0.0041611990 sec\n```\n\nAs you can see, goldmark's performance is on par with cmark's.\n\nExtensions\n--------------------\n### List of extensions\n\n- [goldmark-meta](https://github.com/yuin/goldmark-meta): A YAML metadata\n  extension for the goldmark Markdown parser.\n- [goldmark-highlighting](https://github.com/yuin/goldmark-highlighting): A syntax-highlighting extension\n  for the goldmark markdown parser.\n- [goldmark-emoji](https://github.com/yuin/goldmark-emoji): An emoji\n  extension for the goldmark Markdown parser.\n- [goldmark-mathjax](https://github.com/litao91/goldmark-mathjax): Mathjax support for the goldmark markdown parser\n- [goldmark-pdf](https://github.com/stephenafamo/goldmark-pdf): A PDF renderer that can be passed to `goldmark.WithRenderer()`.\n- [goldmark-hashtag](https://github.com/abhinav/goldmark-hashtag): Adds support for `#hashtag`-based tagging to goldmark.\n- [goldmark-wikilink](https://github.com/abhinav/goldmark-wikilink): Adds support for `[[wiki]]`-style links to goldmark.\n- [goldmark-anchor](https://github.com/abhinav/goldmark-anchor): Adds anchors (permalinks) next to all headers in a document.\n- [goldmark-figure](https://github.com/mangoumbrella/goldmark-figure): Adds support for rendering paragraphs starting with an image to `<figure>` elements.\n- [goldmark-frontmatter](https://github.com/abhinav/goldmark-frontmatter): Adds support for YAML, TOML, and custom front matter to documents.\n- [goldmark-toc](https://github.com/abhinav/goldmark-toc): Adds support for generating tables-of-contents for goldmark documents.\n- [goldmark-mermaid](https://github.com/abhinav/goldmark-mermaid): Adds support for rendering [Mermaid](https://mermaid-js.github.io/mermaid/) diagrams in goldmark documents.\n- [goldmark-pikchr](https://github.com/jchenry/goldmark-pikchr): Adds support for rendering [Pikchr](https://pikchr.org/home/doc/trunk/homepage.md) diagrams in goldmark documents.\n- [goldmark-embed](https://github.com/13rac1/goldmark-embed): Adds support for rendering embeds from YouTube links.\n- [goldmark-latex](https://github.com/soypat/goldmark-latex): A $\\LaTeX$ renderer that can be passed to `goldmark.WithRenderer()`.\n- [goldmark-fences](https://github.com/stefanfritsch/goldmark-fences): Support for pandoc-style [fenced divs](https://pandoc.org/MANUAL.html#divs-and-spans) in goldmark.\n- [goldmark-d2](https://github.com/FurqanSoftware/goldmark-d2): Adds support for [D2](https://d2lang.com/) diagrams.\n- [goldmark-katex](https://github.com/FurqanSoftware/goldmark-katex): Adds support for [KaTeX](https://katex.org/) math and equations.\n- [goldmark-img64](https://github.com/tenkoh/goldmark-img64): Adds support for embedding images into the document as DataURL (base64 encoded).\n- [goldmark-enclave](https://github.com/quail-ink/goldmark-enclave): Adds support for embedding youtube/bilibili video, X's [oembed tweet](https://publish.twitter.com/), [tradingview](https://www.tradingview.com/widget/)'s chart, [quail](https://quail.ink)'s widget into the document.\n- [goldmark-wiki-table](https://github.com/movsb/goldmark-wiki-table): Adds support for embedding Wiki Tables.\n- [goldmark-tgmd](https://github.com/Mad-Pixels/goldmark-tgmd): A Telegram markdown renderer that can be passed to `goldmark.WithRenderer()`.\n\n### Loading extensions at runtime\n[goldmark-dynamic](https://github.com/yuin/goldmark-dynamic) allows you to write a goldmark extension in Lua and load it at runtime without re-compilation.\n\nPlease refer to  [goldmark-dynamic](https://github.com/yuin/goldmark-dynamic) for details.\n\n\ngoldmark internal(for extension developers)\n----------------------------------------------\n### Overview\ngoldmark's Markdown processing is outlined in the diagram below.\n\n```\n            <Markdown in []byte, parser.Context>\n                           |\n                           V\n            +-------- parser.Parser ---------------------------\n            | 1. Parse block elements into AST\n            |   1. If a parsed block is a paragraph, apply \n            |      ast.ParagraphTransformer\n            | 2. Traverse AST and parse blocks.\n            |   1. Process delimiters(emphasis) at the end of\n            |      block parsing\n            | 3. Apply parser.ASTTransformers to AST\n                           |\n                           V\n                      <ast.Node>\n                           |\n                           V\n            +------- renderer.Renderer ------------------------\n            | 1. Traverse AST and apply renderer.NodeRenderer\n            |    corespond to the node type\n\n                           |\n                           V\n                        <Output>\n```\n\n### Parsing\nMarkdown documents are read through `text.Reader` interface.\n\nAST nodes do not have concrete text. AST nodes have segment information of the documents, represented by `text.Segment` .\n\n`text.Segment` has 3 attributes: `Start`, `End`, `Padding` .\n\n(TBC)\n\n**TODO**\n\nSee `extension` directory for examples of extensions.\n\nSummary:\n\n1. Define AST Node as a struct in which `ast.BaseBlock` or `ast.BaseInline` is embedded.\n2. Write a parser that implements `parser.BlockParser` or `parser.InlineParser`.\n3. Write a renderer that implements `renderer.NodeRenderer`.\n4. Define your goldmark extension that implements `goldmark.Extender`.\n\n\nDonation\n--------------------\nBTC: 1NEDSyUmo4SMTDP83JJQSWi1MvQUGGNMZB\n\nLicense\n--------------------\nMIT\n\nAuthor\n--------------------\nYusuke Inuzuka\n"
        },
        {
          "name": "_benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "_test",
          "type": "tree",
          "content": null
        },
        {
          "name": "_tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "ast",
          "type": "tree",
          "content": null
        },
        {
          "name": "ast_test.go",
          "type": "blob",
          "size": 2.6240234375,
          "content": "package goldmark_test\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n\n\t. \"github.com/yuin/goldmark\"\n\t\"github.com/yuin/goldmark/testutil\"\n\t\"github.com/yuin/goldmark/text\"\n)\n\nfunc TestASTBlockNodeText(t *testing.T) {\n\tvar cases = []struct {\n\t\tName   string\n\t\tSource string\n\t\tT1     string\n\t\tT2     string\n\t\tC      bool\n\t}{\n\t\t{\n\t\t\tName: \"AtxHeading\",\n\t\t\tSource: `# l1\n\na\n\n# l2`,\n\t\t\tT1: `l1`,\n\t\t\tT2: `l2`,\n\t\t},\n\t\t{\n\t\t\tName: \"SetextHeading\",\n\t\t\tSource: `l1\nl2\n===============\n\na\n\nl3\nl4\n==============`,\n\t\t\tT1: `l1\nl2`,\n\t\t\tT2: `l3\nl4`,\n\t\t},\n\t\t{\n\t\t\tName: \"CodeBlock\",\n\t\t\tSource: `    l1\n    l2\n\na\n\n    l3\n\tl4`,\n\t\t\tT1: `l1\nl2\n`,\n\t\t\tT2: `l3\nl4\n`,\n\t\t},\n\t\t{\n\t\t\tName: \"FencedCodeBlock\",\n\t\t\tSource: \"```\" + `\nl1\nl2\n` + \"```\" + `\n\na\n\n` + \"```\" + `\nl3\nl4`,\n\t\t\tT1: `l1\nl2\n`,\n\t\t\tT2: `l3\nl4\n`,\n\t\t},\n\t\t{\n\t\t\tName: \"Blockquote\",\n\t\t\tSource: `> l1\n> l2\n\na\n\n> l3\n> l4`,\n\t\t\tT1: `l1\nl2`,\n\t\t\tT2: `l3\nl4`,\n\t\t},\n\t\t{\n\t\t\tName: \"List\",\n\t\t\tSource: `- l1\n  l2\n\na\n\n- l3\n  l4`,\n\t\t\tT1: `l1\nl2`,\n\t\t\tT2: `l3\nl4`,\n\t\t\tC: true,\n\t\t},\n\t\t{\n\t\t\tName: \"HTMLBlock\",\n\t\t\tSource: `<div>\nl1\nl2\n</div>\n\na\n\n<div>\nl3\nl4`,\n\t\t\tT1: `<div>\nl1\nl2\n</div>\n`,\n\t\t\tT2: `<div>\nl3\nl4`,\n\t\t},\n\t}\n\n\tfor _, cs := range cases {\n\t\tt.Run(cs.Name, func(t *testing.T) {\n\t\t\ts := []byte(cs.Source)\n\t\t\tmd := New()\n\t\t\tn := md.Parser().Parse(text.NewReader(s))\n\t\t\tc1 := n.FirstChild()\n\t\t\tc2 := c1.NextSibling().NextSibling()\n\t\t\tif cs.C {\n\t\t\t\tc1 = c1.FirstChild()\n\t\t\t\tc2 = c2.FirstChild()\n\t\t\t}\n\t\t\tif !bytes.Equal(c1.Text(s), []byte(cs.T1)) { // nolint: staticcheck\n\n\t\t\t\tt.Errorf(\"%s unmatch: %s\", cs.Name, testutil.DiffPretty(c1.Text(s), []byte(cs.T1))) // nolint: staticcheck\n\n\t\t\t}\n\t\t\tif !bytes.Equal(c2.Text(s), []byte(cs.T2)) { // nolint: staticcheck\n\n\t\t\t\tt.Errorf(\"%s(EOF) unmatch: %s\", cs.Name, testutil.DiffPretty(c2.Text(s), []byte(cs.T2))) // nolint: staticcheck\n\n\t\t\t}\n\t\t})\n\t}\n\n}\n\nfunc TestASTInlineNodeText(t *testing.T) {\n\tvar cases = []struct {\n\t\tName   string\n\t\tSource string\n\t\tT1     string\n\t}{\n\t\t{\n\t\t\tName:   \"CodeSpan\",\n\t\t\tSource: \"`c1`\",\n\t\t\tT1:     `c1`,\n\t\t},\n\t\t{\n\t\t\tName:   \"Emphasis\",\n\t\t\tSource: `*c1 **c2***`,\n\t\t\tT1:     `c1 c2`,\n\t\t},\n\t\t{\n\t\t\tName:   \"Link\",\n\t\t\tSource: `[label](url)`,\n\t\t\tT1:     `label`,\n\t\t},\n\t\t{\n\t\t\tName:   \"AutoLink\",\n\t\t\tSource: `<http://url>`,\n\t\t\tT1:     `http://url`,\n\t\t},\n\t\t{\n\t\t\tName:   \"RawHTML\",\n\t\t\tSource: `<span>c1</span>`,\n\t\t\tT1:     `<span>`,\n\t\t},\n\t}\n\n\tfor _, cs := range cases {\n\t\tt.Run(cs.Name, func(t *testing.T) {\n\t\t\ts := []byte(cs.Source)\n\t\t\tmd := New()\n\t\t\tn := md.Parser().Parse(text.NewReader(s))\n\t\t\tc1 := n.FirstChild().FirstChild()\n\t\t\tif !bytes.Equal(c1.Text(s), []byte(cs.T1)) { // nolint: staticcheck\n\t\t\t\tt.Errorf(\"%s unmatch:\\n%s\", cs.Name, testutil.DiffPretty(c1.Text(s), []byte(cs.T1))) // nolint: staticcheck\n\t\t\t}\n\t\t})\n\t}\n\n}\n"
        },
        {
          "name": "commonmark_test.go",
          "type": "blob",
          "size": 1.158203125,
          "content": "package goldmark_test\n\nimport (\n\t\"encoding/json\"\n\t\"os\"\n\t\"testing\"\n\n\t. \"github.com/yuin/goldmark\"\n\t\"github.com/yuin/goldmark/renderer/html\"\n\t\"github.com/yuin/goldmark/testutil\"\n)\n\ntype commonmarkSpecTestCase struct {\n\tMarkdown  string `json:\"markdown\"`\n\tHTML      string `json:\"html\"`\n\tExample   int    `json:\"example\"`\n\tStartLine int    `json:\"start_line\"`\n\tEndLine   int    `json:\"end_line\"`\n\tSection   string `json:\"section\"`\n}\n\nfunc TestSpec(t *testing.T) {\n\tbs, err := os.ReadFile(\"_test/spec.json\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar testCases []commonmarkSpecTestCase\n\tif err := json.Unmarshal(bs, &testCases); err != nil {\n\t\tpanic(err)\n\t}\n\tcases := []testutil.MarkdownTestCase{}\n\tnos := testutil.ParseCliCaseArg()\n\tfor _, c := range testCases {\n\t\tshouldAdd := len(nos) == 0\n\t\tif !shouldAdd {\n\t\t\tfor _, no := range nos {\n\t\t\t\tif c.Example == no {\n\t\t\t\t\tshouldAdd = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif shouldAdd {\n\t\t\tcases = append(cases, testutil.MarkdownTestCase{\n\t\t\t\tNo:       c.Example,\n\t\t\t\tMarkdown: c.Markdown,\n\t\t\t\tExpected: c.HTML,\n\t\t\t})\n\t\t}\n\t}\n\tmarkdown := New(WithRendererOptions(\n\t\thtml.WithXHTML(),\n\t\thtml.WithUnsafe(),\n\t))\n\ttestutil.DoTestCases(markdown, cases, t)\n}\n"
        },
        {
          "name": "extension",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra_test.go",
          "type": "blob",
          "size": 5.21875,
          "content": "package goldmark_test\n\nimport (\n\t\"bytes\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t. \"github.com/yuin/goldmark\"\n\t\"github.com/yuin/goldmark/ast\"\n\t\"github.com/yuin/goldmark/parser\"\n\t\"github.com/yuin/goldmark/renderer/html\"\n\t\"github.com/yuin/goldmark/testutil\"\n)\n\nvar testTimeoutMultiplier = 1.0\n\nfunc init() {\n\tm, err := strconv.ParseFloat(os.Getenv(\"GOLDMARK_TEST_TIMEOUT_MULTIPLIER\"), 64)\n\tif err == nil {\n\t\ttestTimeoutMultiplier = m\n\t}\n}\n\nfunc TestExtras(t *testing.T) {\n\tmarkdown := New(WithRendererOptions(\n\t\thtml.WithXHTML(),\n\t\thtml.WithUnsafe(),\n\t))\n\ttestutil.DoTestCaseFile(markdown, \"_test/extra.txt\", t, testutil.ParseCliCaseArg()...)\n}\n\nfunc TestEndsWithNonSpaceCharacters(t *testing.T) {\n\tmarkdown := New(WithRendererOptions(\n\t\thtml.WithXHTML(),\n\t\thtml.WithUnsafe(),\n\t))\n\tsource := []byte(\"```\\na\\n```\")\n\tvar b bytes.Buffer\n\terr := markdown.Convert(source, &b)\n\tif err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tif b.String() != \"<pre><code>a\\n</code></pre>\\n\" {\n\t\tt.Errorf(\"%s \\n---------\\n %s\", source, b.String())\n\t}\n}\n\nfunc TestWindowsNewLine(t *testing.T) {\n\tmarkdown := New(WithRendererOptions(\n\t\thtml.WithXHTML(),\n\t))\n\tsource := []byte(\"a  \\r\\nb\\n\")\n\tvar b bytes.Buffer\n\terr := markdown.Convert(source, &b)\n\tif err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tif b.String() != \"<p>a<br />\\nb</p>\\n\" {\n\t\tt.Errorf(\"%s\\n---------\\n%s\", source, b.String())\n\t}\n\n\tsource = []byte(\"a\\\\\\r\\nb\\r\\n\")\n\tvar b2 bytes.Buffer\n\terr = markdown.Convert(source, &b2)\n\tif err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tif b2.String() != \"<p>a<br />\\nb</p>\\n\" {\n\t\tt.Errorf(\"\\n%s\\n---------\\n%s\", source, b2.String())\n\t}\n}\n\ntype myIDs struct {\n}\n\nfunc (s *myIDs) Generate(value []byte, kind ast.NodeKind) []byte {\n\treturn []byte(\"my-id\")\n}\n\nfunc (s *myIDs) Put(value []byte) {\n}\n\nfunc TestAutogeneratedIDs(t *testing.T) {\n\tctx := parser.NewContext(parser.WithIDs(&myIDs{}))\n\tmarkdown := New(WithParserOptions(parser.WithAutoHeadingID()))\n\tsource := []byte(\"# Title1\\n## Title2\")\n\tvar b bytes.Buffer\n\terr := markdown.Convert(source, &b, parser.WithContext(ctx))\n\tif err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tif b.String() != `<h1 id=\"my-id\">Title1</h1>\n<h2 id=\"my-id\">Title2</h2>\n` {\n\t\tt.Errorf(\"%s\\n---------\\n%s\", source, b.String())\n\t}\n}\n\nfunc nowMillis() int64 {\n\t// TODO: replace UnixNano to UnixMillis(drops Go1.16 support)\n\treturn time.Now().UnixNano() / 1000000\n}\n\nfunc TestDeepNestedLabelPerformance(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping performance test in short mode\")\n\t}\n\tmarkdown := New(WithRendererOptions(\n\t\thtml.WithXHTML(),\n\t\thtml.WithUnsafe(),\n\t))\n\n\tstarted := nowMillis()\n\tn := 50000\n\tsource := []byte(strings.Repeat(\"[\", n) + strings.Repeat(\"]\", n))\n\tvar b bytes.Buffer\n\t_ = markdown.Convert(source, &b)\n\tfinished := nowMillis()\n\tif (finished - started) > int64(5000*testTimeoutMultiplier) {\n\t\tt.Error(\"Parsing deep nested labels took too long\")\n\t}\n}\n\nfunc TestManyProcessingInstructionPerformance(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping performance test in short mode\")\n\t}\n\tmarkdown := New(WithRendererOptions(\n\t\thtml.WithXHTML(),\n\t\thtml.WithUnsafe(),\n\t))\n\n\tstarted := nowMillis()\n\tn := 50000\n\tsource := []byte(\"a \" + strings.Repeat(\"<?\", n))\n\tvar b bytes.Buffer\n\t_ = markdown.Convert(source, &b)\n\tfinished := nowMillis()\n\tif (finished - started) > int64(5000*testTimeoutMultiplier) {\n\t\tt.Error(\"Parsing processing instructions took too long\")\n\t}\n}\n\nfunc TestManyCDATAPerformance(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping performance test in short mode\")\n\t}\n\tmarkdown := New(WithRendererOptions(\n\t\thtml.WithXHTML(),\n\t\thtml.WithUnsafe(),\n\t))\n\n\tstarted := nowMillis()\n\tn := 50000\n\tsource := []byte(strings.Repeat(\"a <![CDATA[\", n))\n\tvar b bytes.Buffer\n\t_ = markdown.Convert(source, &b)\n\tfinished := nowMillis()\n\tif (finished - started) > int64(5000*testTimeoutMultiplier) {\n\t\tt.Error(\"Parsing processing instructions took too long\")\n\t}\n}\n\nfunc TestManyDeclPerformance(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping performance test in short mode\")\n\t}\n\tmarkdown := New(WithRendererOptions(\n\t\thtml.WithXHTML(),\n\t\thtml.WithUnsafe(),\n\t))\n\n\tstarted := nowMillis()\n\tn := 50000\n\tsource := []byte(strings.Repeat(\"a <!A \", n))\n\tvar b bytes.Buffer\n\t_ = markdown.Convert(source, &b)\n\tfinished := nowMillis()\n\tif (finished - started) > int64(5000*testTimeoutMultiplier) {\n\t\tt.Error(\"Parsing processing instructions took too long\")\n\t}\n}\n\nfunc TestManyCommentPerformance(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip(\"skipping performance test in short mode\")\n\t}\n\tmarkdown := New(WithRendererOptions(\n\t\thtml.WithXHTML(),\n\t\thtml.WithUnsafe(),\n\t))\n\n\tstarted := nowMillis()\n\tn := 50000\n\tsource := []byte(strings.Repeat(\"a <!-- \", n))\n\tvar b bytes.Buffer\n\t_ = markdown.Convert(source, &b)\n\tfinished := nowMillis()\n\tif (finished - started) > int64(5000*testTimeoutMultiplier) {\n\t\tt.Error(\"Parsing processing instructions took too long\")\n\t}\n}\n\nfunc TestDangerousURLStringCase(t *testing.T) {\n\tmarkdown := New()\n\n\tsource := []byte(`[Basic](javascript:alert('Basic'))\n[CaseInsensitive](JaVaScRiPt:alert('CaseInsensitive'))\n`)\n\texpected := []byte(`<p><a href=\"\">Basic</a>\n<a href=\"\">CaseInsensitive</a></p>\n`)\n\tvar b bytes.Buffer\n\t_ = markdown.Convert(source, &b)\n\tif !bytes.Equal(expected, b.Bytes()) {\n\t\tt.Error(\"Dangerous URL should ignore cases:\\n\" + string(testutil.DiffPretty(expected, b.Bytes())))\n\t}\n}\n"
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0400390625,
          "content": "module github.com/yuin/goldmark\n\ngo 1.19\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "markdown.go",
          "type": "blob",
          "size": 3.6416015625,
          "content": "// Package goldmark implements functions to convert markdown text to a desired format.\npackage goldmark\n\nimport (\n\t\"io\"\n\n\t\"github.com/yuin/goldmark/parser\"\n\t\"github.com/yuin/goldmark/renderer\"\n\t\"github.com/yuin/goldmark/renderer/html\"\n\t\"github.com/yuin/goldmark/text\"\n\t\"github.com/yuin/goldmark/util\"\n)\n\n// DefaultParser returns a new Parser that is configured by default values.\nfunc DefaultParser() parser.Parser {\n\treturn parser.NewParser(parser.WithBlockParsers(parser.DefaultBlockParsers()...),\n\t\tparser.WithInlineParsers(parser.DefaultInlineParsers()...),\n\t\tparser.WithParagraphTransformers(parser.DefaultParagraphTransformers()...),\n\t)\n}\n\n// DefaultRenderer returns a new Renderer that is configured by default values.\nfunc DefaultRenderer() renderer.Renderer {\n\treturn renderer.NewRenderer(renderer.WithNodeRenderers(util.Prioritized(html.NewRenderer(), 1000)))\n}\n\nvar defaultMarkdown = New()\n\n// Convert interprets a UTF-8 bytes source in Markdown and\n// write rendered contents to a writer w.\nfunc Convert(source []byte, w io.Writer, opts ...parser.ParseOption) error {\n\treturn defaultMarkdown.Convert(source, w, opts...)\n}\n\n// A Markdown interface offers functions to convert Markdown text to\n// a desired format.\ntype Markdown interface {\n\t// Convert interprets a UTF-8 bytes source in Markdown and write rendered\n\t// contents to a writer w.\n\tConvert(source []byte, writer io.Writer, opts ...parser.ParseOption) error\n\n\t// Parser returns a Parser that will be used for conversion.\n\tParser() parser.Parser\n\n\t// SetParser sets a Parser to this object.\n\tSetParser(parser.Parser)\n\n\t// Parser returns a Renderer that will be used for conversion.\n\tRenderer() renderer.Renderer\n\n\t// SetRenderer sets a Renderer to this object.\n\tSetRenderer(renderer.Renderer)\n}\n\n// Option is a functional option type for Markdown objects.\ntype Option func(*markdown)\n\n// WithExtensions adds extensions.\nfunc WithExtensions(ext ...Extender) Option {\n\treturn func(m *markdown) {\n\t\tm.extensions = append(m.extensions, ext...)\n\t}\n}\n\n// WithParser allows you to override the default parser.\nfunc WithParser(p parser.Parser) Option {\n\treturn func(m *markdown) {\n\t\tm.parser = p\n\t}\n}\n\n// WithParserOptions applies options for the parser.\nfunc WithParserOptions(opts ...parser.Option) Option {\n\treturn func(m *markdown) {\n\t\tm.parser.AddOptions(opts...)\n\t}\n}\n\n// WithRenderer allows you to override the default renderer.\nfunc WithRenderer(r renderer.Renderer) Option {\n\treturn func(m *markdown) {\n\t\tm.renderer = r\n\t}\n}\n\n// WithRendererOptions applies options for the renderer.\nfunc WithRendererOptions(opts ...renderer.Option) Option {\n\treturn func(m *markdown) {\n\t\tm.renderer.AddOptions(opts...)\n\t}\n}\n\ntype markdown struct {\n\tparser     parser.Parser\n\trenderer   renderer.Renderer\n\textensions []Extender\n}\n\n// New returns a new Markdown with given options.\nfunc New(options ...Option) Markdown {\n\tmd := &markdown{\n\t\tparser:     DefaultParser(),\n\t\trenderer:   DefaultRenderer(),\n\t\textensions: []Extender{},\n\t}\n\tfor _, opt := range options {\n\t\topt(md)\n\t}\n\tfor _, e := range md.extensions {\n\t\te.Extend(md)\n\t}\n\treturn md\n}\n\nfunc (m *markdown) Convert(source []byte, writer io.Writer, opts ...parser.ParseOption) error {\n\treader := text.NewReader(source)\n\tdoc := m.parser.Parse(reader, opts...)\n\treturn m.renderer.Render(writer, source, doc)\n}\n\nfunc (m *markdown) Parser() parser.Parser {\n\treturn m.parser\n}\n\nfunc (m *markdown) SetParser(v parser.Parser) {\n\tm.parser = v\n}\n\nfunc (m *markdown) Renderer() renderer.Renderer {\n\treturn m.renderer\n}\n\nfunc (m *markdown) SetRenderer(v renderer.Renderer) {\n\tm.renderer = v\n}\n\n// An Extender interface is used for extending Markdown.\ntype Extender interface {\n\t// Extend extends the Markdown.\n\tExtend(Markdown)\n}\n"
        },
        {
          "name": "options_test.go",
          "type": "blob",
          "size": 0.3876953125,
          "content": "package goldmark_test\n\nimport (\n\t\"testing\"\n\n\t. \"github.com/yuin/goldmark\"\n\t\"github.com/yuin/goldmark/parser\"\n\t\"github.com/yuin/goldmark/testutil\"\n)\n\nfunc TestAttributeAndAutoHeadingID(t *testing.T) {\n\tmarkdown := New(\n\t\tWithParserOptions(\n\t\t\tparser.WithAttribute(),\n\t\t\tparser.WithAutoHeadingID(),\n\t\t),\n\t)\n\ttestutil.DoTestCaseFile(markdown, \"_test/options.txt\", t, testutil.ParseCliCaseArg()...)\n}\n"
        },
        {
          "name": "parser",
          "type": "tree",
          "content": null
        },
        {
          "name": "renderer",
          "type": "tree",
          "content": null
        },
        {
          "name": "testutil",
          "type": "tree",
          "content": null
        },
        {
          "name": "text",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}