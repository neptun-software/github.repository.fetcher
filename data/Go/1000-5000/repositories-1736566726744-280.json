{
  "metadata": {
    "timestamp": 1736566726744,
    "page": 280,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rakyll/statik",
      "stars": 3772,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "statik"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.279296875,
          "content": "language: go\r\n\r\ngo:\r\n  - 1.9.x\r\n  - 1.10.3\r\n  - 1.11.x\r\n  - 1.12.x\r\n\r\ngo_import_path: github.com/rakyll/statik\r\n\r\ninstall:\r\n  - go build -v\r\n  - ./statik -f -src=./example/public -dest=./example/ -include=*.jpg,*.txt,*.html,*.css,*.js -ns=web\r\n\r\nscript:\r\n  - go test -v -bench=. ./...\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.076171875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2014 Google Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.5966796875,
          "content": "# statik\n\n[![Build Status](https://travis-ci.org/rakyll/statik.svg?branch=master)](https://travis-ci.org/rakyll/statik)\n\nstatik allows you to embed a directory of static files into your Go binary to be later served from an http.FileSystem.\n\nIs this a crazy idea? No, not necessarily. If you're building a tool that has a Web component, you typically want to serve some images, CSS and JavaScript. You like the comfort of distributing a single binary, so you don't want to mess with deploying them elsewhere. If your static files are not large in size and will be browsed by a few people, statik is a solution you are looking for.\n\n## Usage\n\nInstall the command line tool first.\n\n\tgo get github.com/rakyll/statik\n\nstatik is a tiny program that reads a directory and generates a source file that contains its contents. The generated source file registers the directory contents to be used by statik file system.\n\nThe command below will walk on the public path and generate a package called `statik` under the current working directory.\n\n    $ statik -src=/path/to/your/project/public\n\nThe command below will filter only files on listed extensions.\n\n    $ statik -include=*.jpg,*.txt,*.html,*.css,*.js\n\nIn your program, all your need to do is to import the generated package, initialize a new statik file system and serve.\n\n~~~ go\nimport (\n  \"github.com/rakyll/statik/fs\"\n\n  _ \"./statik\" // TODO: Replace with the absolute import path\n)\n\n  // ...\n\n  statikFS, err := fs.New()\n  if err != nil {\n    log.Fatal(err)\n  }\n  \n  // Serve the contents over HTTP.\n  http.Handle(\"/public/\", http.StripPrefix(\"/public/\", http.FileServer(statikFS)))\n  http.ListenAndServe(\":8080\", nil)\n~~~\n\nVisit http://localhost:8080/public/path/to/file to see your file.\n\nYou can also read the content of a single file:\n\n~~~ go\nimport (\n  \"github.com/rakyll/statik/fs\"\n\n  _ \"./statik\" // TODO: Replace with the absolute import path\n)\n\n  // ...\n\n  statikFS, err := fs.New()\n  if err != nil {\n    log.Fatal(err)\n  }\n  \n  // Access individual files by their paths.\n  r, err := statikFS.Open(\"/hello.txt\")\n  if err != nil {\n    log.Fatal(err)\n  }    \n  defer r.Close()\n  contents, err := ioutil.ReadAll(r)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  fmt.Println(string(contents))\n~~~\n\nThere is also a working example under [example](https://github.com/rakyll/statik/tree/master/example) directory, follow the instructions to build and run it.\n\nNote: The idea and the implementation are hijacked from [camlistore](http://camlistore.org/). I decided to decouple it from its codebase due to the fact I'm actively in need of a similar solution for many of my projects.\n\n## Deterministic output\n\nBy default, statik includes the \"last modified\" (mtime) time on files that it packs. This allows an HTTP FileServer to present the correct file modification times to clients.\n\nHowever, if you have a continuous integration task that checks that your checked-in static files in a git repository match the code that is generated on your CI system, you'll run into a problem: The mtime on the git checkout does not match what you have locally, causing tests to fail.\n\nYou can fix the test in one of two ways:\n\n1. In CI, manually set the mtime on the freshly checked out tree: [here's a stackoverflow answer](https://stackoverflow.com/a/22638823/93405) that provides a shell command to do that; or,\n2. Instruct statik not to store the \"last modified\" time.\n\nTo ignore the last modified time, use the `-m` to statik, like so:\n\n    $ statik -m -include=*.jpg,*.txt,*.html,*.css,*.js\n\nNote that this will cause http.FileServer to consider the file to always have changed & serve it with a \"Last-Modified\" of the time of the request.\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "fs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0400390625,
          "content": "module github.com/rakyll/statik\n\ngo 1.12\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "statik.go",
          "type": "blob",
          "size": 8.7880859375,
          "content": "// Copyright 2014 Google Inc. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Package contains a program that generates code to register\n// a directory and its contents as zip data for statik file system.\npackage main\n\nimport (\n\t\"archive/zip\"\n\t\"bytes\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path\"\n\tspath \"path\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"time\"\n\t\"unicode\"\n\n\t\"github.com/rakyll/statik/fs\"\n)\n\nconst nameSourceFile = \"statik.go\"\n\nvar namePackage string\n\nvar (\n\tflagSrc        = flag.String(\"src\", path.Join(\".\", \"public\"), \"\")\n\tflagDest       = flag.String(\"dest\", \".\", \"\")\n\tflagNoMtime    = flag.Bool(\"m\", false, \"\")\n\tflagNoCompress = flag.Bool(\"Z\", false, \"\")\n\tflagForce      = flag.Bool(\"f\", false, \"\")\n\tflagTags       = flag.String(\"tags\", \"\", \"\")\n\tflagPkg        = flag.String(\"p\", \"statik\", \"\")\n\tflagNamespace  = flag.String(\"ns\", \"default\", \"\")\n\tflagPkgCmt     = flag.String(\"c\", \"\", \"\")\n\tflagInclude    = flag.String(\"include\", \"*.*\", \"\")\n)\n\nconst helpText = `statik [options]\n\nOptions:\n-src     The source directory of the assets, \"public\" by default.\n-dest    The destination directory of the generated package, \".\" by default.\n\n-ns      The namespace where assets will exist, \"default\" by default.\n-f       Override destination if it already exists, false by default.\n-include Wildcard to filter files to include, \"*.*\" by default.\n-m       Ignore modification times for deterministic output, false by default.\n-Z       Do not use compression, false by default.\n\n-p       Name of the generated package, \"statik\" by default.\n-tags    Build tags for the generated package.\n-c       Godoc for the generated package.\n\n-help    Prints this text.\n\nExamples:\n\nGenerates a statik package from ./assets directory. Overrides\nif there is already an existing package.\n\n   $ statik -src=assets -f\n\nGenerates a statik package only with the \".js\" files\nfrom the ./public directory.\n\n   $ statik -include=*.js\n`\n\n// mtimeDate holds the arbitrary mtime that we assign to files when\n// flagNoMtime is set.\nvar mtimeDate = time.Date(2000, time.January, 1, 0, 0, 0, 0, time.UTC)\n\nfunc main() {\n\tflag.Usage = help\n\tflag.Parse()\n\n\tnamePackage = *flagPkg\n\n\tfile, err := generateSource(*flagSrc, *flagInclude)\n\tif err != nil {\n\t\texitWithError(err)\n\t}\n\n\tdestDir := path.Join(*flagDest, namePackage)\n\terr = os.MkdirAll(destDir, 0755)\n\tif err != nil {\n\t\texitWithError(err)\n\t}\n\n\terr = rename(file.Name(), path.Join(destDir, nameSourceFile))\n\tif err != nil {\n\t\texitWithError(err)\n\t}\n}\n\n// rename tries to os.Rename, but fall backs to copying from src\n// to dest and unlink the source if os.Rename fails.\nfunc rename(src, dest string) error {\n\t// Try to rename generated source.\n\tif err := os.Rename(src, dest); err == nil {\n\t\treturn nil\n\t}\n\t// If the rename failed (might do so due to temporary file residing on a\n\t// different device), try to copy byte by byte.\n\trc, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer func() {\n\t\trc.Close()\n\t\tos.Remove(src) // ignore the error, source is in tmp.\n\t}()\n\n\tif _, err = os.Stat(dest); !os.IsNotExist(err) {\n\t\tif *flagForce {\n\t\t\tif err = os.Remove(dest); err != nil {\n\t\t\t\treturn fmt.Errorf(\"file %q could not be deleted\", dest)\n\t\t\t}\n\t\t} else {\n\t\t\treturn fmt.Errorf(\"file %q already exists; use -f to overwrite\", dest)\n\t\t}\n\t}\n\n\twc, err := os.Create(dest)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer wc.Close()\n\n\tif _, err = io.Copy(wc, rc); err != nil {\n\t\t// Delete remains of failed copy attempt.\n\t\tos.Remove(dest)\n\t}\n\treturn err\n}\n\n// Check if an array contains an item\nfunc contains(slice []string, item string) bool {\n\tset := make(map[string]struct{}, len(slice))\n\tfor _, s := range slice {\n\t\tset[s] = struct{}{}\n\t}\n\n\t_, ok := set[item]\n\treturn ok\n}\n\n// Match a path with some of inclusions\nfunc match(incs []string, path string) (bool, error) {\n\tvar err error\n\tfor _, inc := range incs {\n\t\tmatches, e := filepath.Glob(spath.Join(filepath.Dir(path), inc))\n\n\t\tif e != nil {\n\t\t\terr = e\n\t\t}\n\n\t\tif matches != nil && len(matches) != 0 && contains(matches, path) {\n\t\t\treturn true, nil\n\t\t}\n\t}\n\n\treturn false, err\n}\n\n// Walks on the source path and generates source code\n// that contains source directory's contents as zip contents.\n// Generates source registers generated zip contents data to\n// be read by the statik/fs HTTP file system.\nfunc generateSource(srcPath string, includes string) (file *os.File, err error) {\n\tvar (\n\t\tbuffer    bytes.Buffer\n\t\tzipWriter io.Writer\n\t)\n\n\tzipWriter = &buffer\n\tf, err := ioutil.TempFile(\"\", namePackage)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tzipWriter = io.MultiWriter(zipWriter, f)\n\tdefer f.Close()\n\n\tw := zip.NewWriter(zipWriter)\n\tif err = filepath.Walk(srcPath, func(path string, fi os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Ignore directories and hidden files.\n\t\t// No entry is needed for directories in a zip file.\n\t\t// Each file is represented with a path, no directory\n\t\t// entities are required to build the hierarchy.\n\t\tif fi.IsDir() || strings.HasPrefix(fi.Name(), \".\") {\n\t\t\treturn nil\n\t\t}\n\t\trelPath, err := filepath.Rel(srcPath, path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tb, err := ioutil.ReadFile(path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tincs := strings.Split(includes, \",\")\n\n\t\tif b, e := match(incs, path); e != nil {\n\t\t\treturn err\n\t\t} else if !b {\n\t\t\treturn nil\n\t\t}\n\n\t\tfHeader, err := zip.FileInfoHeader(fi)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif *flagNoMtime {\n\t\t\t// Always use the same modification time so that\n\t\t\t// the output is deterministic with respect to the file contents.\n\t\t\t// Do NOT use fHeader.Modified as it only works on go >= 1.10\n\t\t\tfHeader.SetModTime(mtimeDate)\n\t\t}\n\t\tfHeader.Name = filepath.ToSlash(relPath)\n\t\tif !*flagNoCompress {\n\t\t\tfHeader.Method = zip.Deflate\n\t\t}\n\t\tf, err := w.CreateHeader(fHeader)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = f.Write(b)\n\t\treturn err\n\t}); err != nil {\n\t\treturn\n\t}\n\tif err = w.Close(); err != nil {\n\t\treturn\n\t}\n\n\tvar tags string\n\tif *flagTags != \"\" {\n\t\ttags = \"\\n// +build \" + *flagTags + \"\\n\"\n\t}\n\n\tvar comment string\n\tif *flagPkgCmt != \"\" {\n\t\tcomment = \"\\n\" + commentLines(*flagPkgCmt)\n\t}\n\n\t// e.g.)\n\t// assetNamespaceIdentify is \"AbcDeF_G\"\n\t// when assetNamespace is \"abc de f-g\"\n\tassetNamespace := *flagNamespace\n\tassetNamespaceIdentify := toSymbolSafe(assetNamespace)\n\n\t// then embed it as a quoted string\n\tvar qb bytes.Buffer\n\tfmt.Fprintf(&qb, `// Code generated by statik. DO NOT EDIT.\n%s%s\npackage %s\n\nimport (\n\t\"github.com/rakyll/statik/fs\"\n)\n\n`, tags, comment, namePackage)\n\tif !fs.IsDefaultNamespace(assetNamespace) {\n\t\tfmt.Fprintf(&qb, `\nconst %s = \"%s\" // static asset namespace\n`, assetNamespaceIdentify, assetNamespace)\n\t}\n\tfmt.Fprint(&qb, `\nfunc init() {\n\tdata := \"`)\n\tFprintZipData(&qb, buffer.Bytes())\n\tif fs.IsDefaultNamespace(assetNamespace) {\n\t\tfmt.Fprint(&qb, `\"\n\t\tfs.Register(data)\n\t}\n\t`)\n\n\t} else {\n\t\tfmt.Fprintf(&qb, `\"\n\t\tfs.RegisterWithNamespace(\"%s\", data)\n\t}\n\t`, assetNamespace)\n\t}\n\n\tif err = ioutil.WriteFile(f.Name(), qb.Bytes(), 0644); err != nil {\n\t\treturn\n\t}\n\treturn f, nil\n}\n\n// FprintZipData converts zip binary contents to a string literal.\nfunc FprintZipData(dest *bytes.Buffer, zipData []byte) {\n\tfor _, b := range zipData {\n\t\tif b == '\\n' {\n\t\t\tdest.WriteString(`\\n`)\n\t\t\tcontinue\n\t\t}\n\t\tif b == '\\\\' {\n\t\t\tdest.WriteString(`\\\\`)\n\t\t\tcontinue\n\t\t}\n\t\tif b == '\"' {\n\t\t\tdest.WriteString(`\\\"`)\n\t\t\tcontinue\n\t\t}\n\t\tif (b >= 32 && b <= 126) || b == '\\t' {\n\t\t\tdest.WriteByte(b)\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Fprintf(dest, \"\\\\x%02x\", b)\n\t}\n}\n\n// comment lines prefixes each line in lines with \"// \".\nfunc commentLines(lines string) string {\n\tlines = \"// \" + strings.Replace(lines, \"\\n\", \"\\n// \", -1)\n\treturn lines\n}\n\n// Prints out the error message and exists with a non-success signal.\nfunc exitWithError(err error) {\n\tfmt.Println(err)\n\tos.Exit(1)\n}\n\n// convert src to symbol safe string with upper camel case\nfunc toSymbolSafe(str string) string {\n\tisBeforeRuneNoGeneralCase := false\n\treplace := func(r rune) rune {\n\t\tif unicode.IsLetter(r) {\n\t\t\tif isBeforeRuneNoGeneralCase {\n\t\t\t\tisBeforeRuneNoGeneralCase = true\n\t\t\t\treturn r\n\t\t\t} else {\n\t\t\t\tisBeforeRuneNoGeneralCase = true\n\t\t\t\treturn unicode.ToTitle(r)\n\t\t\t}\n\t\t} else if unicode.IsDigit(r) {\n\t\t\tif isBeforeRuneNoGeneralCase {\n\t\t\t\tisBeforeRuneNoGeneralCase = true\n\t\t\t\treturn r\n\t\t\t} else {\n\t\t\t\tisBeforeRuneNoGeneralCase = false\n\t\t\t\treturn -1\n\t\t\t}\n\t\t} else {\n\t\t\tisBeforeRuneNoGeneralCase = false\n\t\t\treturn -1\n\t\t}\n\t}\n\treturn strings.TrimSpace(strings.Map(replace, str))\n}\n\nfunc help() {\n\tfmt.Println(helpText)\n\tos.Exit(1)\n}\n"
        },
        {
          "name": "statik_test.go",
          "type": "blob",
          "size": 0.3916015625,
          "content": "package main\n\nimport \"testing\"\n\nfunc TestToSymbolSafe(t *testing.T) {\n\ttestCase := [][]string{\n\t\t{\"abc\", \"Abc\"},\n\t\t{\"_abc\", \"Abc\"},\n\t\t{\"3abc\", \"Abc\"},\n\t\t{\"abc3\", \"Abc3\"},\n\t\t{\"/abc\", \"Abc\"},\n\t\t{\"abc abc\", \"AbcAbc\"},\n\t}\n\tfor i, test := range testCase {\n\t\tgot := toSymbolSafe(test[0])\n\t\twont := test[1]\n\t\tif got != wont {\n\t\t\tt.Errorf(\"#%02d toSymbolSafe(%s) => %s != %s\", i, test[0], got, wont)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}