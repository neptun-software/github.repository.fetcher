{
  "metadata": {
    "timestamp": 1736566882166,
    "page": 451,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kubernetes/sample-controller",
      "stars": 3237,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.017578125,
          "content": "sample-controller\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.73828125,
          "content": "# Contributing guidelines\n\nDo not open pull requests directly against this repository, they will be ignored. Instead, please open pull requests against [kubernetes/kubernetes](https://git.k8s.io/kubernetes/).  Please follow the same [contributing guide](https://git.k8s.io/kubernetes/CONTRIBUTING.md) you would follow for any other pull request made to kubernetes/kubernetes.\n\nThis repository is published from [kubernetes/kubernetes/staging/src/k8s.io/sample-controller](https://git.k8s.io/kubernetes/staging/src/k8s.io/sample-controller) by the [kubernetes publishing-bot](https://git.k8s.io/publishing-bot).\n\nPlease see [Staging Directory and Publishing](https://git.k8s.io/community/contributors/devel/sig-architecture/staging.md) for more information\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "OWNERS",
          "type": "blob",
          "size": 0.189453125,
          "content": "# See the OWNERS docs at https://go.k8s.io/owners\n\napprovers:\n  - deads2k\n  - jpbetz\n  - sttts\n  - munnerz\nreviewers:\n  - deads2k\n  - sttts\n  - munnerz\n  - nikhita\nlabels:\n  - sig/api-machinery\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.8564453125,
          "content": "# sample-controller\n\nThis repository implements a simple controller for watching Foo resources as\ndefined with a CustomResourceDefinition (CRD).\n\n**Note:** go-get or vendor this package as `k8s.io/sample-controller`.\n\nThis particular example demonstrates how to perform basic operations such as:\n\n* How to register a new custom resource (custom resource type) of type `Foo` using a CustomResourceDefinition.\n* How to create/get/list instances of your new resource type `Foo`.\n* How to setup a controller on resource handling create/update/delete events.\n\nIt makes use of the generators in [k8s.io/code-generator](https://github.com/kubernetes/code-generator)\nto generate a typed client, informers, listers and deep-copy functions. You can\ndo this yourself using the `./hack/update-codegen.sh` script.\n\nThe `update-codegen` script will automatically generate the following files &\ndirectories:\n\n* `pkg/apis/samplecontroller/v1alpha1/zz_generated.deepcopy.go`\n* `pkg/generated/`\n\nChanges should not be made to these files manually, and when creating your own\ncontroller based off of this implementation you should not copy these files and\ninstead run the `update-codegen` script to generate your own.\n\n## Details\n\nThe sample controller uses [client-go library](https://github.com/kubernetes/client-go/tree/master/tools/cache) extensively.\nThe details of interaction points of the sample controller with various mechanisms from this library are\nexplained [here](docs/controller-client-go.md).\n\n## Fetch sample-controller and its dependencies\n\nIssue the following commands --- starting in whatever working directory you\nlike.\n\n```sh\ngit clone https://github.com/kubernetes/sample-controller\ncd sample-controller\n```\n\nNote, however, that if you intend to\ngenerate code then you will also need the\ncode-generator repo to exist in an old-style location.  One easy way\nto do this is to use the command `go mod vendor` to create and\npopulate the `vendor` directory.\n\n### A Note on kubernetes/kubernetes\n\nIf you are developing Kubernetes according to\nhttps://github.com/kubernetes/community/blob/master/contributors/guide/github-workflow.md\nthen you already have a copy of this demo in\n`kubernetes/staging/src/k8s.io/sample-controller` and its dependencies\n--- including the code generator --- are in usable locations\n(valid for all Go versions).\n\n## Purpose\n\nThis is an example of how to build a kube-like controller with a single type.\n\n## Running\n\n**Prerequisite**: Since the sample-controller uses `apps/v1` deployments, the Kubernetes cluster version should be greater than 1.9.\n\n```sh\n# assumes you have a working kubeconfig, not required if operating in-cluster\ngo build -o sample-controller .\n./sample-controller -kubeconfig=$HOME/.kube/config\n\n# create a CustomResourceDefinition\nkubectl create -f artifacts/examples/crd-status-subresource.yaml\n\n# create a custom resource of type Foo\nkubectl create -f artifacts/examples/example-foo.yaml\n\n# check deployments created through the custom resource\nkubectl get deployments\n```\n\n## Use Cases\n\nCustomResourceDefinitions can be used to implement custom resource types for your Kubernetes cluster.\nThese act like most other Resources in Kubernetes, and may be `kubectl apply`'d, etc.\n\nSome example use cases:\n\n* Provisioning/Management of external datastores/databases (eg. CloudSQL/RDS instances)\n* Higher level abstractions around Kubernetes primitives (eg. a single Resource to define an etcd cluster, backed by a Service and a ReplicationController)\n\n## Defining types\n\nEach instance of your custom resource has an attached Spec, which should be defined via a `struct{}` to provide data format validation.\nIn practice, this Spec is arbitrary key-value data that specifies the configuration/behavior of your Resource.\n\nFor example, if you were implementing a custom resource for a Database, you might provide a DatabaseSpec like the following:\n\n``` go\ntype DatabaseSpec struct {\n\tDatabases []string `json:\"databases\"`\n\tUsers     []User   `json:\"users\"`\n\tVersion   string   `json:\"version\"`\n}\n\ntype User struct {\n\tName     string `json:\"name\"`\n\tPassword string `json:\"password\"`\n}\n```\n\nNote, the JSON tag `json:` is required on all user facing fields within your type. Typically API types contain only user facing fields. When the JSON tag is omitted from the field, Kubernetes generators consider the field to be internal and will not expose the field in their generated external output. For example, this means that the field would not be included in a generated CRD schema.\n\n## Validation\n\nTo validate custom resources, use the [`CustomResourceValidation`](https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions/#validation) feature. Validation in the form of a [structured schema](https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#specifying-a-structural-schema) is mandatory to be provided for `apiextensions.k8s.io/v1`.\n\n### Example\n\nThe schema in [`crd.yaml`](./artifacts/examples/crd.yaml) applies the following validation on the custom resource:\n`spec.replicas` must be an integer and must have a minimum value of 1 and a maximum value of 10.\n\n## Subresources\n\nCustom Resources support `/status` and `/scale` [subresources](https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#subresources). The `CustomResourceSubresources` feature is in GA from v1.16.\n\n### Example\n\nThe CRD in [`crd-status-subresource.yaml`](./artifacts/examples/crd-status-subresource.yaml) enables the `/status` subresource for custom resources.\nThis means that [`UpdateStatus`](./controller.go) can be used by the controller to update only the status part of the custom resource.\n\nTo understand why only the status part of the custom resource should be updated, please refer to the [Kubernetes API conventions](https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status).\n\nIn the above steps, use `crd-status-subresource.yaml` to create the CRD:\n\n```sh\n# create a CustomResourceDefinition supporting the status subresource\nkubectl create -f artifacts/examples/crd-status-subresource.yaml\n```\n\n## A Note on the API version\nThe [group](https://kubernetes.io/docs/reference/using-api/#api-groups) version of the custom resource in `crd.yaml` is `v1alpha`, this can be evolved to a stable API version, `v1`, using [CRD Versioning](https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definition-versioning/).\n\n## Cleanup\n\nYou can clean up the created CustomResourceDefinition with:\n```sh\nkubectl delete crd foos.samplecontroller.k8s.io\n```\n\n## Compatibility\n\nHEAD of this repository will match HEAD of k8s.io/apimachinery and\nk8s.io/client-go.\n\n## Where does it come from?\n\n`sample-controller` is synced from\nhttps://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/sample-controller.\nCode changes are made in that location, merged into k8s.io/kubernetes and\nlater synced here.\n\n"
        },
        {
          "name": "SECURITY_CONTACTS",
          "type": "blob",
          "size": 0.537109375,
          "content": "# Defined below are the security contacts for this repo.\n#\n# They are the contact point for the Product Security Committee to reach out\n# to for triaging and handling of incoming issues.\n#\n# The below names agree to abide by the\n# [Embargo Policy](https://git.k8s.io/security/private-distributors-list.md#embargo-policy)\n# and will be removed and replaced if they violate that agreement.\n#\n# DO NOT REPORT SECURITY VULNERABILITIES DIRECTLY TO THESE NAMES, FOLLOW THE\n# INSTRUCTIONS AT https://kubernetes.io/security/\n\ncheftako\ndeads2k\nlavalamp\nsttts\n"
        },
        {
          "name": "artifacts",
          "type": "tree",
          "content": null
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 0.14453125,
          "content": "# Kubernetes Community Code of Conduct\n\nPlease refer to our [Kubernetes Community Code of Conduct](https://git.k8s.io/community/code-of-conduct.md)\n"
        },
        {
          "name": "controller.go",
          "type": "blob",
          "size": 16.525390625,
          "content": "/*\nCopyright 2017 The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"golang.org/x/time/rate\"\n\n\tappsv1 \"k8s.io/api/apps/v1\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/api/errors\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\tutilruntime \"k8s.io/apimachinery/pkg/util/runtime\"\n\t\"k8s.io/apimachinery/pkg/util/wait\"\n\tappsinformers \"k8s.io/client-go/informers/apps/v1\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/kubernetes/scheme\"\n\ttypedcorev1 \"k8s.io/client-go/kubernetes/typed/core/v1\"\n\tappslisters \"k8s.io/client-go/listers/apps/v1\"\n\t\"k8s.io/client-go/tools/cache\"\n\t\"k8s.io/client-go/tools/record\"\n\t\"k8s.io/client-go/util/workqueue\"\n\t\"k8s.io/klog/v2\"\n\n\tsamplev1alpha1 \"k8s.io/sample-controller/pkg/apis/samplecontroller/v1alpha1\"\n\tclientset \"k8s.io/sample-controller/pkg/generated/clientset/versioned\"\n\tsamplescheme \"k8s.io/sample-controller/pkg/generated/clientset/versioned/scheme\"\n\tinformers \"k8s.io/sample-controller/pkg/generated/informers/externalversions/samplecontroller/v1alpha1\"\n\tlisters \"k8s.io/sample-controller/pkg/generated/listers/samplecontroller/v1alpha1\"\n)\n\nconst controllerAgentName = \"sample-controller\"\n\nconst (\n\t// SuccessSynced is used as part of the Event 'reason' when a Foo is synced\n\tSuccessSynced = \"Synced\"\n\t// ErrResourceExists is used as part of the Event 'reason' when a Foo fails\n\t// to sync due to a Deployment of the same name already existing.\n\tErrResourceExists = \"ErrResourceExists\"\n\n\t// MessageResourceExists is the message used for Events when a resource\n\t// fails to sync due to a Deployment already existing\n\tMessageResourceExists = \"Resource %q already exists and is not managed by Foo\"\n\t// MessageResourceSynced is the message used for an Event fired when a Foo\n\t// is synced successfully\n\tMessageResourceSynced = \"Foo synced successfully\"\n\t// FieldManager distinguishes this controller from other things writing to API objects\n\tFieldManager = controllerAgentName\n)\n\n// Controller is the controller implementation for Foo resources\ntype Controller struct {\n\t// kubeclientset is a standard kubernetes clientset\n\tkubeclientset kubernetes.Interface\n\t// sampleclientset is a clientset for our own API group\n\tsampleclientset clientset.Interface\n\n\tdeploymentsLister appslisters.DeploymentLister\n\tdeploymentsSynced cache.InformerSynced\n\tfoosLister        listers.FooLister\n\tfoosSynced        cache.InformerSynced\n\n\t// workqueue is a rate limited work queue. This is used to queue work to be\n\t// processed instead of performing it as soon as a change happens. This\n\t// means we can ensure we only process a fixed amount of resources at a\n\t// time, and makes it easy to ensure we are never processing the same item\n\t// simultaneously in two different workers.\n\tworkqueue workqueue.TypedRateLimitingInterface[cache.ObjectName]\n\t// recorder is an event recorder for recording Event resources to the\n\t// Kubernetes API.\n\trecorder record.EventRecorder\n}\n\n// NewController returns a new sample controller\nfunc NewController(\n\tctx context.Context,\n\tkubeclientset kubernetes.Interface,\n\tsampleclientset clientset.Interface,\n\tdeploymentInformer appsinformers.DeploymentInformer,\n\tfooInformer informers.FooInformer) *Controller {\n\tlogger := klog.FromContext(ctx)\n\n\t// Create event broadcaster\n\t// Add sample-controller types to the default Kubernetes Scheme so Events can be\n\t// logged for sample-controller types.\n\tutilruntime.Must(samplescheme.AddToScheme(scheme.Scheme))\n\tlogger.V(4).Info(\"Creating event broadcaster\")\n\n\teventBroadcaster := record.NewBroadcaster(record.WithContext(ctx))\n\teventBroadcaster.StartStructuredLogging(0)\n\teventBroadcaster.StartRecordingToSink(&typedcorev1.EventSinkImpl{Interface: kubeclientset.CoreV1().Events(\"\")})\n\trecorder := eventBroadcaster.NewRecorder(scheme.Scheme, corev1.EventSource{Component: controllerAgentName})\n\tratelimiter := workqueue.NewTypedMaxOfRateLimiter(\n\t\tworkqueue.NewTypedItemExponentialFailureRateLimiter[cache.ObjectName](5*time.Millisecond, 1000*time.Second),\n\t\t&workqueue.TypedBucketRateLimiter[cache.ObjectName]{Limiter: rate.NewLimiter(rate.Limit(50), 300)},\n\t)\n\n\tcontroller := &Controller{\n\t\tkubeclientset:     kubeclientset,\n\t\tsampleclientset:   sampleclientset,\n\t\tdeploymentsLister: deploymentInformer.Lister(),\n\t\tdeploymentsSynced: deploymentInformer.Informer().HasSynced,\n\t\tfoosLister:        fooInformer.Lister(),\n\t\tfoosSynced:        fooInformer.Informer().HasSynced,\n\t\tworkqueue:         workqueue.NewTypedRateLimitingQueue(ratelimiter),\n\t\trecorder:          recorder,\n\t}\n\n\tlogger.Info(\"Setting up event handlers\")\n\t// Set up an event handler for when Foo resources change\n\tfooInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: controller.enqueueFoo,\n\t\tUpdateFunc: func(old, new interface{}) {\n\t\t\tcontroller.enqueueFoo(new)\n\t\t},\n\t})\n\t// Set up an event handler for when Deployment resources change. This\n\t// handler will lookup the owner of the given Deployment, and if it is\n\t// owned by a Foo resource then the handler will enqueue that Foo resource for\n\t// processing. This way, we don't need to implement custom logic for\n\t// handling Deployment resources. More info on this pattern:\n\t// https://github.com/kubernetes/community/blob/8cafef897a22026d42f5e5bb3f104febe7e29830/contributors/devel/controllers.md\n\tdeploymentInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: controller.handleObject,\n\t\tUpdateFunc: func(old, new interface{}) {\n\t\t\tnewDepl := new.(*appsv1.Deployment)\n\t\t\toldDepl := old.(*appsv1.Deployment)\n\t\t\tif newDepl.ResourceVersion == oldDepl.ResourceVersion {\n\t\t\t\t// Periodic resync will send update events for all known Deployments.\n\t\t\t\t// Two different versions of the same Deployment will always have different RVs.\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcontroller.handleObject(new)\n\t\t},\n\t\tDeleteFunc: controller.handleObject,\n\t})\n\n\treturn controller\n}\n\n// Run will set up the event handlers for types we are interested in, as well\n// as syncing informer caches and starting workers. It will block until stopCh\n// is closed, at which point it will shutdown the workqueue and wait for\n// workers to finish processing their current work items.\nfunc (c *Controller) Run(ctx context.Context, workers int) error {\n\tdefer utilruntime.HandleCrash()\n\tdefer c.workqueue.ShutDown()\n\tlogger := klog.FromContext(ctx)\n\n\t// Start the informer factories to begin populating the informer caches\n\tlogger.Info(\"Starting Foo controller\")\n\n\t// Wait for the caches to be synced before starting workers\n\tlogger.Info(\"Waiting for informer caches to sync\")\n\n\tif ok := cache.WaitForCacheSync(ctx.Done(), c.deploymentsSynced, c.foosSynced); !ok {\n\t\treturn fmt.Errorf(\"failed to wait for caches to sync\")\n\t}\n\n\tlogger.Info(\"Starting workers\", \"count\", workers)\n\t// Launch two workers to process Foo resources\n\tfor i := 0; i < workers; i++ {\n\t\tgo wait.UntilWithContext(ctx, c.runWorker, time.Second)\n\t}\n\n\tlogger.Info(\"Started workers\")\n\t<-ctx.Done()\n\tlogger.Info(\"Shutting down workers\")\n\n\treturn nil\n}\n\n// runWorker is a long-running function that will continually call the\n// processNextWorkItem function in order to read and process a message on the\n// workqueue.\nfunc (c *Controller) runWorker(ctx context.Context) {\n\tfor c.processNextWorkItem(ctx) {\n\t}\n}\n\n// processNextWorkItem will read a single work item off the workqueue and\n// attempt to process it, by calling the syncHandler.\nfunc (c *Controller) processNextWorkItem(ctx context.Context) bool {\n\tobjRef, shutdown := c.workqueue.Get()\n\tlogger := klog.FromContext(ctx)\n\n\tif shutdown {\n\t\treturn false\n\t}\n\n\t// We call Done at the end of this func so the workqueue knows we have\n\t// finished processing this item. We also must remember to call Forget\n\t// if we do not want this work item being re-queued. For example, we do\n\t// not call Forget if a transient error occurs, instead the item is\n\t// put back on the workqueue and attempted again after a back-off\n\t// period.\n\tdefer c.workqueue.Done(objRef)\n\n\t// Run the syncHandler, passing it the structured reference to the object to be synced.\n\terr := c.syncHandler(ctx, objRef)\n\tif err == nil {\n\t\t// If no error occurs then we Forget this item so it does not\n\t\t// get queued again until another change happens.\n\t\tc.workqueue.Forget(objRef)\n\t\tlogger.Info(\"Successfully synced\", \"objectName\", objRef)\n\t\treturn true\n\t}\n\t// there was a failure so be sure to report it.  This method allows for\n\t// pluggable error handling which can be used for things like\n\t// cluster-monitoring.\n\tutilruntime.HandleErrorWithContext(ctx, err, \"Error syncing; requeuing for later retry\", \"objectReference\", objRef)\n\t// since we failed, we should requeue the item to work on later.  This\n\t// method will add a backoff to avoid hotlooping on particular items\n\t// (they're probably still not going to work right away) and overall\n\t// controller protection (everything I've done is broken, this controller\n\t// needs to calm down or it can starve other useful work) cases.\n\tc.workqueue.AddRateLimited(objRef)\n\treturn true\n}\n\n// syncHandler compares the actual state with the desired, and attempts to\n// converge the two. It then updates the Status block of the Foo resource\n// with the current status of the resource.\nfunc (c *Controller) syncHandler(ctx context.Context, objectRef cache.ObjectName) error {\n\tlogger := klog.LoggerWithValues(klog.FromContext(ctx), \"objectRef\", objectRef)\n\n\t// Get the Foo resource with this namespace/name\n\tfoo, err := c.foosLister.Foos(objectRef.Namespace).Get(objectRef.Name)\n\tif err != nil {\n\t\t// The Foo resource may no longer exist, in which case we stop\n\t\t// processing.\n\t\tif errors.IsNotFound(err) {\n\t\t\tutilruntime.HandleErrorWithContext(ctx, err, \"Foo referenced by item in work queue no longer exists\", \"objectReference\", objectRef)\n\t\t\treturn nil\n\t\t}\n\n\t\treturn err\n\t}\n\n\tdeploymentName := foo.Spec.DeploymentName\n\tif deploymentName == \"\" {\n\t\t// We choose to absorb the error here as the worker would requeue the\n\t\t// resource otherwise. Instead, the next time the resource is updated\n\t\t// the resource will be queued again.\n\t\tutilruntime.HandleErrorWithContext(ctx, nil, \"Deployment name missing from object reference\", \"objectReference\", objectRef)\n\t\treturn nil\n\t}\n\n\t// Get the deployment with the name specified in Foo.spec\n\tdeployment, err := c.deploymentsLister.Deployments(foo.Namespace).Get(deploymentName)\n\t// If the resource doesn't exist, we'll create it\n\tif errors.IsNotFound(err) {\n\t\tdeployment, err = c.kubeclientset.AppsV1().Deployments(foo.Namespace).Create(ctx, newDeployment(foo), metav1.CreateOptions{FieldManager: FieldManager})\n\t}\n\n\t// If an error occurs during Get/Create, we'll requeue the item so we can\n\t// attempt processing again later. This could have been caused by a\n\t// temporary network failure, or any other transient reason.\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// If the Deployment is not controlled by this Foo resource, we should log\n\t// a warning to the event recorder and return error msg.\n\tif !metav1.IsControlledBy(deployment, foo) {\n\t\tmsg := fmt.Sprintf(MessageResourceExists, deployment.Name)\n\t\tc.recorder.Event(foo, corev1.EventTypeWarning, ErrResourceExists, msg)\n\t\treturn fmt.Errorf(\"%s\", msg)\n\t}\n\n\t// If this number of the replicas on the Foo resource is specified, and the\n\t// number does not equal the current desired replicas on the Deployment, we\n\t// should update the Deployment resource.\n\tif foo.Spec.Replicas != nil && *foo.Spec.Replicas != *deployment.Spec.Replicas {\n\t\tlogger.V(4).Info(\"Update deployment resource\", \"currentReplicas\", *deployment.Spec.Replicas, \"desiredReplicas\", *foo.Spec.Replicas)\n\t\tdeployment, err = c.kubeclientset.AppsV1().Deployments(foo.Namespace).Update(ctx, newDeployment(foo), metav1.UpdateOptions{FieldManager: FieldManager})\n\t}\n\n\t// If an error occurs during Update, we'll requeue the item so we can\n\t// attempt processing again later. This could have been caused by a\n\t// temporary network failure, or any other transient reason.\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Finally, we update the status block of the Foo resource to reflect the\n\t// current state of the world\n\terr = c.updateFooStatus(ctx, foo, deployment)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tc.recorder.Event(foo, corev1.EventTypeNormal, SuccessSynced, MessageResourceSynced)\n\treturn nil\n}\n\nfunc (c *Controller) updateFooStatus(ctx context.Context, foo *samplev1alpha1.Foo, deployment *appsv1.Deployment) error {\n\t// NEVER modify objects from the store. It's a read-only, local cache.\n\t// You can use DeepCopy() to make a deep copy of original object and modify this copy\n\t// Or create a copy manually for better performance\n\tfooCopy := foo.DeepCopy()\n\tfooCopy.Status.AvailableReplicas = deployment.Status.AvailableReplicas\n\t// If the CustomResourceSubresources feature gate is not enabled,\n\t// we must use Update instead of UpdateStatus to update the Status block of the Foo resource.\n\t// UpdateStatus will not allow changes to the Spec of the resource,\n\t// which is ideal for ensuring nothing other than resource status has been updated.\n\t_, err := c.sampleclientset.SamplecontrollerV1alpha1().Foos(foo.Namespace).UpdateStatus(ctx, fooCopy, metav1.UpdateOptions{FieldManager: FieldManager})\n\treturn err\n}\n\n// enqueueFoo takes a Foo resource and converts it into a namespace/name\n// string which is then put onto the work queue. This method should *not* be\n// passed resources of any type other than Foo.\nfunc (c *Controller) enqueueFoo(obj interface{}) {\n\tif objectRef, err := cache.ObjectToName(obj); err != nil {\n\t\tutilruntime.HandleError(err)\n\t\treturn\n\t} else {\n\t\tc.workqueue.Add(objectRef)\n\t}\n}\n\n// handleObject will take any resource implementing metav1.Object and attempt\n// to find the Foo resource that 'owns' it. It does this by looking at the\n// objects metadata.ownerReferences field for an appropriate OwnerReference.\n// It then enqueues that Foo resource to be processed. If the object does not\n// have an appropriate OwnerReference, it will simply be skipped.\nfunc (c *Controller) handleObject(obj interface{}) {\n\tvar object metav1.Object\n\tvar ok bool\n\tlogger := klog.FromContext(context.Background())\n\tif object, ok = obj.(metav1.Object); !ok {\n\t\ttombstone, ok := obj.(cache.DeletedFinalStateUnknown)\n\t\tif !ok {\n\t\t\t// If the object value is not too big and does not contain sensitive information then\n\t\t\t// it may be useful to include it.\n\t\t\tutilruntime.HandleErrorWithContext(context.Background(), nil, \"Error decoding object, invalid type\", \"type\", fmt.Sprintf(\"%T\", obj))\n\t\t\treturn\n\t\t}\n\t\tobject, ok = tombstone.Obj.(metav1.Object)\n\t\tif !ok {\n\t\t\t// If the object value is not too big and does not contain sensitive information then\n\t\t\t// it may be useful to include it.\n\t\t\tutilruntime.HandleErrorWithContext(context.Background(), nil, \"Error decoding object tombstone, invalid type\", \"type\", fmt.Sprintf(\"%T\", tombstone.Obj))\n\t\t\treturn\n\t\t}\n\t\tlogger.V(4).Info(\"Recovered deleted object\", \"resourceName\", object.GetName())\n\t}\n\tlogger.V(4).Info(\"Processing object\", \"object\", klog.KObj(object))\n\tif ownerRef := metav1.GetControllerOf(object); ownerRef != nil {\n\t\t// If this object is not owned by a Foo, we should not do anything more\n\t\t// with it.\n\t\tif ownerRef.Kind != \"Foo\" {\n\t\t\treturn\n\t\t}\n\n\t\tfoo, err := c.foosLister.Foos(object.GetNamespace()).Get(ownerRef.Name)\n\t\tif err != nil {\n\t\t\tlogger.V(4).Info(\"Ignore orphaned object\", \"object\", klog.KObj(object), \"foo\", ownerRef.Name)\n\t\t\treturn\n\t\t}\n\n\t\tc.enqueueFoo(foo)\n\t\treturn\n\t}\n}\n\n// newDeployment creates a new Deployment for a Foo resource. It also sets\n// the appropriate OwnerReferences on the resource so handleObject can discover\n// the Foo resource that 'owns' it.\nfunc newDeployment(foo *samplev1alpha1.Foo) *appsv1.Deployment {\n\tlabels := map[string]string{\n\t\t\"app\":        \"nginx\",\n\t\t\"controller\": foo.Name,\n\t}\n\treturn &appsv1.Deployment{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      foo.Spec.DeploymentName,\n\t\t\tNamespace: foo.Namespace,\n\t\t\tOwnerReferences: []metav1.OwnerReference{\n\t\t\t\t*metav1.NewControllerRef(foo, samplev1alpha1.SchemeGroupVersion.WithKind(\"Foo\")),\n\t\t\t},\n\t\t},\n\t\tSpec: appsv1.DeploymentSpec{\n\t\t\tReplicas: foo.Spec.Replicas,\n\t\t\tSelector: &metav1.LabelSelector{\n\t\t\t\tMatchLabels: labels,\n\t\t\t},\n\t\t\tTemplate: corev1.PodTemplateSpec{\n\t\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t\tLabels: labels,\n\t\t\t\t},\n\t\t\t\tSpec: corev1.PodSpec{\n\t\t\t\t\tContainers: []corev1.Container{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  \"nginx\",\n\t\t\t\t\t\t\tImage: \"nginx:latest\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n}\n"
        },
        {
          "name": "controller_test.go",
          "type": "blob",
          "size": 9.423828125,
          "content": "/*\nCopyright 2017 The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"testing\"\n\t\"time\"\n\n\tapps \"k8s.io/api/apps/v1\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/runtime\"\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n\t\"k8s.io/apimachinery/pkg/util/diff\"\n\tkubeinformers \"k8s.io/client-go/informers\"\n\tk8sfake \"k8s.io/client-go/kubernetes/fake\"\n\tcore \"k8s.io/client-go/testing\"\n\t\"k8s.io/client-go/tools/cache\"\n\t\"k8s.io/client-go/tools/record\"\n\t\"k8s.io/klog/v2/ktesting\"\n\n\tsamplecontroller \"k8s.io/sample-controller/pkg/apis/samplecontroller/v1alpha1\"\n\t\"k8s.io/sample-controller/pkg/generated/clientset/versioned/fake\"\n\tinformers \"k8s.io/sample-controller/pkg/generated/informers/externalversions\"\n)\n\nvar (\n\talwaysReady        = func() bool { return true }\n\tnoResyncPeriodFunc = func() time.Duration { return 0 }\n)\n\ntype fixture struct {\n\tt *testing.T\n\n\tclient     *fake.Clientset\n\tkubeclient *k8sfake.Clientset\n\t// Objects to put in the store.\n\tfooLister        []*samplecontroller.Foo\n\tdeploymentLister []*apps.Deployment\n\t// Actions expected to happen on the client.\n\tkubeactions []core.Action\n\tactions     []core.Action\n\t// Objects from here preloaded into NewSimpleFake.\n\tkubeobjects []runtime.Object\n\tobjects     []runtime.Object\n}\n\nfunc newFixture(t *testing.T) *fixture {\n\tf := &fixture{}\n\tf.t = t\n\tf.objects = []runtime.Object{}\n\tf.kubeobjects = []runtime.Object{}\n\treturn f\n}\n\nfunc newFoo(name string, replicas *int32) *samplecontroller.Foo {\n\treturn &samplecontroller.Foo{\n\t\tTypeMeta: metav1.TypeMeta{APIVersion: samplecontroller.SchemeGroupVersion.String()},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      name,\n\t\t\tNamespace: metav1.NamespaceDefault,\n\t\t},\n\t\tSpec: samplecontroller.FooSpec{\n\t\t\tDeploymentName: fmt.Sprintf(\"%s-deployment\", name),\n\t\t\tReplicas:       replicas,\n\t\t},\n\t}\n}\n\nfunc (f *fixture) newController(ctx context.Context) (*Controller, informers.SharedInformerFactory, kubeinformers.SharedInformerFactory) {\n\tf.client = fake.NewSimpleClientset(f.objects...)\n\tf.kubeclient = k8sfake.NewSimpleClientset(f.kubeobjects...)\n\n\ti := informers.NewSharedInformerFactory(f.client, noResyncPeriodFunc())\n\tk8sI := kubeinformers.NewSharedInformerFactory(f.kubeclient, noResyncPeriodFunc())\n\n\tc := NewController(ctx, f.kubeclient, f.client,\n\t\tk8sI.Apps().V1().Deployments(), i.Samplecontroller().V1alpha1().Foos())\n\n\tc.foosSynced = alwaysReady\n\tc.deploymentsSynced = alwaysReady\n\tc.recorder = &record.FakeRecorder{}\n\n\tfor _, f := range f.fooLister {\n\t\ti.Samplecontroller().V1alpha1().Foos().Informer().GetIndexer().Add(f)\n\t}\n\n\tfor _, d := range f.deploymentLister {\n\t\tk8sI.Apps().V1().Deployments().Informer().GetIndexer().Add(d)\n\t}\n\n\treturn c, i, k8sI\n}\n\nfunc (f *fixture) run(ctx context.Context, fooRef cache.ObjectName) {\n\tf.runController(ctx, fooRef, true, false)\n}\n\nfunc (f *fixture) runExpectError(ctx context.Context, fooRef cache.ObjectName) {\n\tf.runController(ctx, fooRef, true, true)\n}\n\nfunc (f *fixture) runController(ctx context.Context, fooRef cache.ObjectName, startInformers bool, expectError bool) {\n\tc, i, k8sI := f.newController(ctx)\n\tif startInformers {\n\t\ti.Start(ctx.Done())\n\t\tk8sI.Start(ctx.Done())\n\t}\n\n\terr := c.syncHandler(ctx, fooRef)\n\tif !expectError && err != nil {\n\t\tf.t.Errorf(\"error syncing foo: %v\", err)\n\t} else if expectError && err == nil {\n\t\tf.t.Error(\"expected error syncing foo, got nil\")\n\t}\n\n\tactions := filterInformerActions(f.client.Actions())\n\tfor i, action := range actions {\n\t\tif len(f.actions) < i+1 {\n\t\t\tf.t.Errorf(\"%d unexpected actions: %+v\", len(actions)-len(f.actions), actions[i:])\n\t\t\tbreak\n\t\t}\n\n\t\texpectedAction := f.actions[i]\n\t\tcheckAction(expectedAction, action, f.t)\n\t}\n\n\tif len(f.actions) > len(actions) {\n\t\tf.t.Errorf(\"%d additional expected actions:%+v\", len(f.actions)-len(actions), f.actions[len(actions):])\n\t}\n\n\tk8sActions := filterInformerActions(f.kubeclient.Actions())\n\tfor i, action := range k8sActions {\n\t\tif len(f.kubeactions) < i+1 {\n\t\t\tf.t.Errorf(\"%d unexpected actions: %+v\", len(k8sActions)-len(f.kubeactions), k8sActions[i:])\n\t\t\tbreak\n\t\t}\n\n\t\texpectedAction := f.kubeactions[i]\n\t\tcheckAction(expectedAction, action, f.t)\n\t}\n\n\tif len(f.kubeactions) > len(k8sActions) {\n\t\tf.t.Errorf(\"%d additional expected actions:%+v\", len(f.kubeactions)-len(k8sActions), f.kubeactions[len(k8sActions):])\n\t}\n}\n\n// checkAction verifies that expected and actual actions are equal and both have\n// same attached resources\nfunc checkAction(expected, actual core.Action, t *testing.T) {\n\tif !(expected.Matches(actual.GetVerb(), actual.GetResource().Resource) && actual.GetSubresource() == expected.GetSubresource()) {\n\t\tt.Errorf(\"Expected\\n\\t%#v\\ngot\\n\\t%#v\", expected, actual)\n\t\treturn\n\t}\n\n\tif reflect.TypeOf(actual) != reflect.TypeOf(expected) {\n\t\tt.Errorf(\"Action has wrong type. Expected: %t. Got: %t\", expected, actual)\n\t\treturn\n\t}\n\n\tswitch a := actual.(type) {\n\tcase core.CreateActionImpl:\n\t\te, _ := expected.(core.CreateActionImpl)\n\t\texpObject := e.GetObject()\n\t\tobject := a.GetObject()\n\n\t\tif !reflect.DeepEqual(expObject, object) {\n\t\t\tt.Errorf(\"Action %s %s has wrong object\\nDiff:\\n %s\",\n\t\t\t\ta.GetVerb(), a.GetResource().Resource, diff.ObjectGoPrintSideBySide(expObject, object))\n\t\t}\n\tcase core.UpdateActionImpl:\n\t\te, _ := expected.(core.UpdateActionImpl)\n\t\texpObject := e.GetObject()\n\t\tobject := a.GetObject()\n\n\t\tif !reflect.DeepEqual(expObject, object) {\n\t\t\tt.Errorf(\"Action %s %s has wrong object\\nDiff:\\n %s\",\n\t\t\t\ta.GetVerb(), a.GetResource().Resource, diff.ObjectGoPrintSideBySide(expObject, object))\n\t\t}\n\tcase core.PatchActionImpl:\n\t\te, _ := expected.(core.PatchActionImpl)\n\t\texpPatch := e.GetPatch()\n\t\tpatch := a.GetPatch()\n\n\t\tif !reflect.DeepEqual(expPatch, patch) {\n\t\t\tt.Errorf(\"Action %s %s has wrong patch\\nDiff:\\n %s\",\n\t\t\t\ta.GetVerb(), a.GetResource().Resource, diff.ObjectGoPrintSideBySide(expPatch, patch))\n\t\t}\n\tdefault:\n\t\tt.Errorf(\"Uncaptured Action %s %s, you should explicitly add a case to capture it\",\n\t\t\tactual.GetVerb(), actual.GetResource().Resource)\n\t}\n}\n\n// filterInformerActions filters list and watch actions for testing resources.\n// Since list and watch don't change resource state we can filter it to lower\n// nose level in our tests.\nfunc filterInformerActions(actions []core.Action) []core.Action {\n\tret := []core.Action{}\n\tfor _, action := range actions {\n\t\tif len(action.GetNamespace()) == 0 &&\n\t\t\t(action.Matches(\"list\", \"foos\") ||\n\t\t\t\taction.Matches(\"watch\", \"foos\") ||\n\t\t\t\taction.Matches(\"list\", \"deployments\") ||\n\t\t\t\taction.Matches(\"watch\", \"deployments\")) {\n\t\t\tcontinue\n\t\t}\n\t\tret = append(ret, action)\n\t}\n\n\treturn ret\n}\n\nfunc (f *fixture) expectCreateDeploymentAction(d *apps.Deployment) {\n\tf.kubeactions = append(f.kubeactions, core.NewCreateAction(schema.GroupVersionResource{Resource: \"deployments\"}, d.Namespace, d))\n}\n\nfunc (f *fixture) expectUpdateDeploymentAction(d *apps.Deployment) {\n\tf.kubeactions = append(f.kubeactions, core.NewUpdateAction(schema.GroupVersionResource{Resource: \"deployments\"}, d.Namespace, d))\n}\n\nfunc (f *fixture) expectUpdateFooStatusAction(foo *samplecontroller.Foo) {\n\taction := core.NewUpdateSubresourceAction(schema.GroupVersionResource{Resource: \"foos\"}, \"status\", foo.Namespace, foo)\n\tf.actions = append(f.actions, action)\n}\n\nfunc getRef(foo *samplecontroller.Foo, t *testing.T) cache.ObjectName {\n\tref := cache.MetaObjectToName(foo)\n\treturn ref\n}\n\nfunc TestCreatesDeployment(t *testing.T) {\n\tf := newFixture(t)\n\tfoo := newFoo(\"test\", int32Ptr(1))\n\t_, ctx := ktesting.NewTestContext(t)\n\n\tf.fooLister = append(f.fooLister, foo)\n\tf.objects = append(f.objects, foo)\n\n\texpDeployment := newDeployment(foo)\n\tf.expectCreateDeploymentAction(expDeployment)\n\tf.expectUpdateFooStatusAction(foo)\n\n\tf.run(ctx, getRef(foo, t))\n}\n\nfunc TestDoNothing(t *testing.T) {\n\tf := newFixture(t)\n\tfoo := newFoo(\"test\", int32Ptr(1))\n\t_, ctx := ktesting.NewTestContext(t)\n\n\td := newDeployment(foo)\n\n\tf.fooLister = append(f.fooLister, foo)\n\tf.objects = append(f.objects, foo)\n\tf.deploymentLister = append(f.deploymentLister, d)\n\tf.kubeobjects = append(f.kubeobjects, d)\n\n\tf.expectUpdateFooStatusAction(foo)\n\tf.run(ctx, getRef(foo, t))\n}\n\nfunc TestUpdateDeployment(t *testing.T) {\n\tf := newFixture(t)\n\tfoo := newFoo(\"test\", int32Ptr(1))\n\t_, ctx := ktesting.NewTestContext(t)\n\n\td := newDeployment(foo)\n\n\t// Update replicas\n\tfoo.Spec.Replicas = int32Ptr(2)\n\texpDeployment := newDeployment(foo)\n\n\tf.fooLister = append(f.fooLister, foo)\n\tf.objects = append(f.objects, foo)\n\tf.deploymentLister = append(f.deploymentLister, d)\n\tf.kubeobjects = append(f.kubeobjects, d)\n\n\tf.expectUpdateFooStatusAction(foo)\n\tf.expectUpdateDeploymentAction(expDeployment)\n\tf.run(ctx, getRef(foo, t))\n}\n\nfunc TestNotControlledByUs(t *testing.T) {\n\tf := newFixture(t)\n\tfoo := newFoo(\"test\", int32Ptr(1))\n\t_, ctx := ktesting.NewTestContext(t)\n\n\td := newDeployment(foo)\n\n\td.ObjectMeta.OwnerReferences = []metav1.OwnerReference{}\n\n\tf.fooLister = append(f.fooLister, foo)\n\tf.objects = append(f.objects, foo)\n\tf.deploymentLister = append(f.deploymentLister, d)\n\tf.kubeobjects = append(f.kubeobjects, d)\n\n\tf.runExpectError(ctx, getRef(foo, t))\n}\n\nfunc int32Ptr(i int32) *int32 { return &i }\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.3095703125,
          "content": "// This is a generated file. Do not edit directly.\n\nmodule k8s.io/sample-controller\n\ngo 1.23.0\n\ngodebug default=go1.23\n\ngodebug winsymlink=0\n\nrequire (\n\tgolang.org/x/time v0.7.0\n\tk8s.io/api v0.0.0-20250107083829-9e7d345b161c\n\tk8s.io/apimachinery v0.0.0-20250106201545-3e8e52d6a125\n\tk8s.io/client-go v0.0.0-20250109163042-e421aed7f1b4\n\tk8s.io/code-generator v0.0.0-20250109164240-cbf803ea1cb0\n\tk8s.io/klog/v2 v2.130.1\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/emicklei/go-restful/v3 v3.11.0 // indirect\n\tgithub.com/fxamacker/cbor/v2 v2.7.0 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.21.0 // indirect\n\tgithub.com/go-openapi/jsonreference v0.20.2 // indirect\n\tgithub.com/go-openapi/swag v0.23.0 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/google/gnostic-models v0.6.9 // indirect\n\tgithub.com/google/go-cmp v0.6.0 // indirect\n\tgithub.com/google/gofuzz v1.2.0 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgolang.org/x/mod v0.21.0 // indirect\n\tgolang.org/x/net v0.33.0 // indirect\n\tgolang.org/x/oauth2 v0.23.0 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/term v0.27.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgolang.org/x/tools v0.26.0 // indirect\n\tgoogle.golang.org/protobuf v1.35.1 // indirect\n\tgopkg.in/evanphx/json-patch.v4 v4.12.0 // indirect\n\tgopkg.in/inf.v0 v0.9.1 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\tk8s.io/gengo/v2 v2.0.0-20240911193312-2b36238f13e9 // indirect\n\tk8s.io/kube-openapi v0.0.0-20241212222426-2c72e554b1e7 // indirect\n\tk8s.io/utils v0.0.0-20241104100929-3ea5e8cea738 // indirect\n\tsigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3 // indirect\n\tsigs.k8s.io/structured-merge-diff/v4 v4.4.2 // indirect\n\tsigs.k8s.io/yaml v1.4.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 14.5380859375,
          "content": "github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/emicklei/go-restful/v3 v3.11.0 h1:rAQeMHw1c7zTmncogyy8VvRZwtkmkZ4FxERmMY4rD+g=\ngithub.com/emicklei/go-restful/v3 v3.11.0/go.mod h1:6n3XBCmQQb25CM2LCACGz8ukIrRry+4bhvbpWn3mrbc=\ngithub.com/fxamacker/cbor/v2 v2.7.0 h1:iM5WgngdRBanHcxugY4JySA0nk1wZorNOpTgCMedv5E=\ngithub.com/fxamacker/cbor/v2 v2.7.0/go.mod h1:pxXPTn3joSm21Gbwsv0w9OSA2y1HFR9qXEeXQVeNoDQ=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-openapi/jsonpointer v0.19.6/go.mod h1:osyAmYz/mB/C3I+WsTTSgw1ONzaLJoLCyoi6/zppojs=\ngithub.com/go-openapi/jsonpointer v0.21.0 h1:YgdVicSA9vH5RiHs9TZW5oyafXZFc6+2Vc1rr/O9oNQ=\ngithub.com/go-openapi/jsonpointer v0.21.0/go.mod h1:IUyH9l/+uyhIYQ/PXVA41Rexl+kOkAPDdXEYns6fzUY=\ngithub.com/go-openapi/jsonreference v0.20.2 h1:3sVjiK66+uXK/6oQ8xgcRKcFgQ5KXa2KvnJRumpMGbE=\ngithub.com/go-openapi/jsonreference v0.20.2/go.mod h1:Bl1zwGIM8/wsvqjsOQLJ/SH+En5Ap4rVB5KVcIDZG2k=\ngithub.com/go-openapi/swag v0.22.3/go.mod h1:UzaqsxGiab7freDnrUUra0MwWfN/q7tE4j+VcZ0yl14=\ngithub.com/go-openapi/swag v0.23.0 h1:vsEVJDUo2hPJ2tu0/Xc+4noaxyEffXNIs3cOULZ+GrE=\ngithub.com/go-openapi/swag v0.23.0/go.mod h1:esZ8ITTYEsH1V2trKHjAN8Ai7xHb8RV+YSZ577vPjgQ=\ngithub.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=\ngithub.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/google/gnostic-models v0.6.9 h1:MU/8wDLif2qCXZmzncUQ/BOfxWfthHi63KqpoNbWqVw=\ngithub.com/google/gnostic-models v0.6.9/go.mod h1:CiWsm0s6BSQd1hRn8/QmxqB6BesYcbSZxsz9b0KuDBw=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=\ngithub.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/pprof v0.0.0-20241029153458-d1b30febd7db h1:097atOisP2aRj7vFgYQBbFN4U4JNXUNYpxael3UzMyo=\ngithub.com/google/pprof v0.0.0-20241029153458-d1b30febd7db/go.mod h1:vavhavw2zAxS5dIdcRluK6cSGGPlZynqzFM8NdvU144=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=\ngithub.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/onsi/ginkgo/v2 v2.21.0 h1:7rg/4f3rB88pb5obDgNZrNHrQ4e6WpjonchcpuBRnZM=\ngithub.com/onsi/ginkgo/v2 v2.21.0/go.mod h1:7Du3c42kxCUegi0IImZ1wUQzMBVecgIHjR1C+NkhLQo=\ngithub.com/onsi/gomega v1.35.1 h1:Cwbd75ZBPxFSuZ6T+rN/WCb/gOc6YgFBXLlZLhC7Ds4=\ngithub.com/onsi/gomega v1.35.1/go.mod h1:PvZbdDc8J6XJEpDK4HCuRBm8a6Fzp9/DmhC9C7yFlog=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/x448/float16 v0.8.4 h1:qLwI1I70+NjRFUR3zs1JPUCgaCXSh3SW62uAKT1mSBM=\ngithub.com/x448/float16 v0.8.4/go.mod h1:14CWIYCyZA/cWjXOioeEpHeN/83MdbZDRQHoFcYsOfg=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.21.0 h1:vvrHzRwRfVKSiLrG+d4FMl/Qi4ukBCE6kZlTUkDYRT0=\ngolang.org/x/mod v0.21.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/oauth2 v0.23.0 h1:PbgcYx2W7i4LvjJWEbf0ngHV6qJYr86PkAV3bXdLEbs=\ngolang.org/x/oauth2 v0.23.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.7.0 h1:ntUhktv3OPE6TgYxXWv9vKvUSJyIFJlyohwbkEwPrKQ=\ngolang.org/x/time v0.7.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.26.0 h1:v/60pFQmzmT9ExmjDv2gGIfi3OqfKoEP6I5+umXlbnQ=\ngolang.org/x/tools v0.26.0/go.mod h1:TPVVj70c7JJ3WCazhD8OdXcZg/og+b9+tH/KxylGwH0=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=\ngoogle.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/evanphx/json-patch.v4 v4.12.0 h1:n6jtcsulIzXPJaxegRbvFNNrZDjbij7ny3gmSPG+6V4=\ngopkg.in/evanphx/json-patch.v4 v4.12.0/go.mod h1:p8EYWUEYMpynmqDbY58zCKCFZw8pRWMG4EsWvDvM72M=\ngopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=\ngopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nk8s.io/api v0.0.0-20250107083829-9e7d345b161c h1:3OdBzgr0PF+mKK9xH/ycqxxZacdV2JJnaxgj32yUc8o=\nk8s.io/api v0.0.0-20250107083829-9e7d345b161c/go.mod h1:bcTx9U6z8NtpUbnc3va/3EXi9J7dYqxrv93ABhJNcQ0=\nk8s.io/apimachinery v0.0.0-20250106201545-3e8e52d6a125 h1:DKE2wIHpBRYleqyn7WO7dmFTMvZWXwaKvB3qyZaKV/o=\nk8s.io/apimachinery v0.0.0-20250106201545-3e8e52d6a125/go.mod h1:iKrKOPQq2bzYghWivf0Pyy2ZJ8A6WtFW16/tSLqk0Sg=\nk8s.io/client-go v0.0.0-20250109163042-e421aed7f1b4 h1:dkMbB6IsTiifZ8oZq19z53UIeJJsdXTzs/ZayyPsTI0=\nk8s.io/client-go v0.0.0-20250109163042-e421aed7f1b4/go.mod h1:kzkJf3BkWtP6EjVvIciiwPndNECuAuU6gh0sADdY65g=\nk8s.io/code-generator v0.0.0-20250109164240-cbf803ea1cb0 h1:BurmPjj+8usxwOeeGyqPwgaW+eCGdkH1sQ+D/rQxYjU=\nk8s.io/code-generator v0.0.0-20250109164240-cbf803ea1cb0/go.mod h1:WylcaMP6Y9QULxO9l0HVVzP1zETWH6ngLqFXcGPH44E=\nk8s.io/gengo/v2 v2.0.0-20240911193312-2b36238f13e9 h1:si3PfKm8dDYxgfbeA6orqrtLkvvIeH8UqffFJDl0bz4=\nk8s.io/gengo/v2 v2.0.0-20240911193312-2b36238f13e9/go.mod h1:EJykeLsmFC60UQbYJezXkEsG2FLrt0GPNkU5iK5GWxU=\nk8s.io/klog/v2 v2.130.1 h1:n9Xl7H1Xvksem4KFG4PYbdQCQxqc/tTUyrgXaOhHSzk=\nk8s.io/klog/v2 v2.130.1/go.mod h1:3Jpz1GvMt720eyJH1ckRHK1EDfpxISzJ7I9OYgaDtPE=\nk8s.io/kube-openapi v0.0.0-20241212222426-2c72e554b1e7 h1:hcha5B1kVACrLujCKLbr8XWMxCxzQx42DY8QKYJrDLg=\nk8s.io/kube-openapi v0.0.0-20241212222426-2c72e554b1e7/go.mod h1:GewRfANuJ70iYzvn+i4lezLDAFzvjxZYK1gn1lWcfas=\nk8s.io/utils v0.0.0-20241104100929-3ea5e8cea738 h1:M3sRQVHv7vB20Xc2ybTt7ODCeFj6JSWYFzOFnYeS6Ro=\nk8s.io/utils v0.0.0-20241104100929-3ea5e8cea738/go.mod h1:OLgZIPagt7ERELqWJFomSt595RzquPNLL48iOWgYOg0=\nsigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3 h1:/Rv+M11QRah1itp8VhT6HoVx1Ray9eB4DBr+K+/sCJ8=\nsigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3/go.mod h1:18nIHnGi6636UCz6m8i4DhaJ65T6EruyzmoQqI2BVDo=\nsigs.k8s.io/structured-merge-diff/v4 v4.4.2 h1:MdmvkGuXi/8io6ixD5wud3vOLwc1rj0aNqRlpuvjmwA=\nsigs.k8s.io/structured-merge-diff/v4 v4.4.2/go.mod h1:N8f93tFZh9U6vpxwRArLiikrE5/2tiu1w1AGfACIGE4=\nsigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=\nsigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=\n"
        },
        {
          "name": "hack",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 2.876953125,
          "content": "/*\nCopyright 2017 The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage main\n\nimport (\n\t\"flag\"\n\t\"time\"\n\n\tkubeinformers \"k8s.io/client-go/informers\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/klog/v2\"\n\t\"k8s.io/sample-controller/pkg/signals\"\n\t// Uncomment the following line to load the gcp plugin (only required to authenticate against GKE clusters).\n\t// _ \"k8s.io/client-go/plugin/pkg/client/auth/gcp\"\n\n\tclientset \"k8s.io/sample-controller/pkg/generated/clientset/versioned\"\n\tinformers \"k8s.io/sample-controller/pkg/generated/informers/externalversions\"\n)\n\nvar (\n\tmasterURL  string\n\tkubeconfig string\n)\n\nfunc main() {\n\tklog.InitFlags(nil)\n\tflag.Parse()\n\n\t// set up signals so we handle the shutdown signal gracefully\n\tctx := signals.SetupSignalHandler()\n\tlogger := klog.FromContext(ctx)\n\n\tcfg, err := clientcmd.BuildConfigFromFlags(masterURL, kubeconfig)\n\tif err != nil {\n\t\tlogger.Error(err, \"Error building kubeconfig\")\n\t\tklog.FlushAndExit(klog.ExitFlushTimeout, 1)\n\t}\n\n\tkubeClient, err := kubernetes.NewForConfig(cfg)\n\tif err != nil {\n\t\tlogger.Error(err, \"Error building kubernetes clientset\")\n\t\tklog.FlushAndExit(klog.ExitFlushTimeout, 1)\n\t}\n\n\texampleClient, err := clientset.NewForConfig(cfg)\n\tif err != nil {\n\t\tlogger.Error(err, \"Error building kubernetes clientset\")\n\t\tklog.FlushAndExit(klog.ExitFlushTimeout, 1)\n\t}\n\n\tkubeInformerFactory := kubeinformers.NewSharedInformerFactory(kubeClient, time.Second*30)\n\texampleInformerFactory := informers.NewSharedInformerFactory(exampleClient, time.Second*30)\n\n\tcontroller := NewController(ctx, kubeClient, exampleClient,\n\t\tkubeInformerFactory.Apps().V1().Deployments(),\n\t\texampleInformerFactory.Samplecontroller().V1alpha1().Foos())\n\n\t// notice that there is no need to run Start methods in a separate goroutine. (i.e. go kubeInformerFactory.Start(ctx.done())\n\t// Start method is non-blocking and runs all registered informers in a dedicated goroutine.\n\tkubeInformerFactory.Start(ctx.Done())\n\texampleInformerFactory.Start(ctx.Done())\n\n\tif err = controller.Run(ctx, 2); err != nil {\n\t\tlogger.Error(err, \"Error running controller\")\n\t\tklog.FlushAndExit(klog.ExitFlushTimeout, 1)\n\t}\n}\n\nfunc init() {\n\tflag.StringVar(&kubeconfig, \"kubeconfig\", \"\", \"Path to a kubeconfig. Only required if out-of-cluster.\")\n\tflag.StringVar(&masterURL, \"master\", \"\", \"The address of the Kubernetes API server. Overrides any value in kubeconfig. Only required if out-of-cluster.\")\n}\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}