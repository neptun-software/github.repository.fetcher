{
  "metadata": {
    "timestamp": 1736566874351,
    "page": 444,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mmatczuk/go-http-tunnel",
      "stars": 3249,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.177734375,
          "content": "; http://editorconfig.org/\n\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\ntrim_trailing_whitespace = true\n\n[*.go]\nindent_style = tab\nindent_size = 8\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2265625,
          "content": "### Tunnel\n.tunnel/\nbuild/\n\n### Go\n*.cov\n*.prof\n*.mprof\n\n### IntelliJ\n.idea/\n*.iml\n\n### Vim\n# swap\n[._]*.s[a-w][a-z]\n[._]s[a-w][a-z]\n# session\nSession.vim\n# temporary\n.netrwhist\n*~\n# auto-generated tag files\ntags\n\n### Mac\n.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1328125,
          "content": "language: go\ngo:\n  - 1.x\n\naddons:\n  apt:\n    packages:\n    - moreutils\n\ninstall:\n  - make get-tools\n  - make get-deps\n\nscript:\n  - make\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7109375,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<http://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.5458984375,
          "content": "\nGO_FILES := $(shell \\\n\tfind . '(' -path '*/.*' -o -path './vendor' ')' -prune \\\n\t-o -name '*.go' -print | cut -b3-)\n\nLINT_IGNORE := \"/id/\\|/tunnelmock/\\|/vendor/\"\n\nall: clean check test\n\n.PHONY: clean\nclean:\n\t@go clean -r\n\n.PHONY: fmt\nfmt:\n\t@go fmt ./...\n\n.PHONY: check\ncheck: .check-fmt .check-vet .check-lint .check-ineffassign .check-static .check-misspell .check-vendor\n\n.PHONY: .check-fmt\n.check-fmt:\n\t$(eval FMT_LOG := $(shell mktemp -t gofmt.XXXXX))\n\t@cat /dev/null > $(FMT_LOG)\n\t@gofmt -e -s -l -d $(GO_FILES) > $(FMT_LOG) || true\n\t@[ ! -s \"$(FMT_LOG)\" ] || (echo \"$@ failed:\" | cat - $(FMT_LOG) && false)\n\n.PHONY: .check-vet\n.check-vet:\n\t@go vet ./...\n\n.PHONY: .check-lint\n.check-lint:\n\t$(eval LINT_LOG := $(shell mktemp -t golint.XXXXX))\n\t@cat /dev/null > $(LINT_LOG)\n\t@$(foreach pkg, $(GO_FILES), golint $(pkg | grep -v $LINT_IGNORE) >> $(LINT_LOG) || true;)\n\t@[ ! -s \"$(LINT_LOG)\" ] || (echo \"$@ failed:\" | cat - $(LINT_LOG) && false)\n\n\n.PHONY: .check-ineffassign\n.check-ineffassign:\n\t@ineffassign ./\n\n.PHONY: .check-misspell\n.check-misspell:\n\t@misspell ./...\n\n.PHONY: .check-mega\n.check-static:\n\t@staticcheck -checks ['SA1006','ST1005'] ./...\n\n.PHONY: .check-vendor\n.check-vendor:\n\t@dep ensure -no-vendor -dry-run\n\n.PHONY: test\ntest:\n\t@echo \"==> Running tests (race)...\"\n\t@go test -cover -race ./...\n\n.PHONY: get-deps\nget-deps:\n\t@echo \"==> Installing dependencies...\"\n\t@dep ensure\n\n.PHONY: get-tools\nget-tools:\n\t@echo \"==> Installing tools...\"\n\t@go get -u github.com/golang/dep/cmd/dep\n\t@go get -u golang.org/x/lint/golint\n\t@go get -u github.com/golang/mock/gomock\n\n\t@go get -u github.com/client9/misspell/cmd/misspell\n\t@go get -u github.com/gordonklaus/ineffassign\n\t@go get -u github.com/mitchellh/gox\n\t@go get -u github.com/tcnksm/ghr\n\t@go get -u honnef.co/go/tools/cmd/staticcheck\n\nOUTPUT_DIR = build\nOS = \"darwin freebsd linux windows\"\nARCH = \"386 amd64 arm\"\nOSARCH = \"!darwin/386 !darwin/arm !windows/arm\"\nGIT_COMMIT = $(shell git describe --always)\n\n.PHONY: release\nrelease: check test clean build package\n\n.PHONY: build\nbuild:\n\tmkdir ${OUTPUT_DIR}\n\tCGO_ENABLED=0 GOARM=5 gox -ldflags \"-w -X main.version=$(GIT_COMMIT)\" \\\n\t-os=${OS} -arch=${ARCH} -osarch=${OSARCH} -output \"${OUTPUT_DIR}/pkg/{{.OS}}_{{.Arch}}/{{.Dir}}\" \\\n\t./cmd/tunnel ./cmd/tunneld\n\n.PHONY: package\npackage:\n\tmkdir ${OUTPUT_DIR}/dist\n\tcd ${OUTPUT_DIR}/pkg/; for osarch in *; do (cd $$osarch; tar zcvf ../../dist/tunnel_$$osarch.tar.gz ./*); done;\n\tcd ${OUTPUT_DIR}/dist; sha256sum * > ./SHA256SUMS\n\n.PHONY: publish\npublish:\n\tghr -recreate -u mmatczuk -t ${GITHUB_TOKEN} -r go-http-tunnel pre-release ${OUTPUT_DIR}/dist\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2333984375,
          "content": "# Go HTTP tunnel [![GoDoc](http://img.shields.io/badge/go-documentation-blue.svg)](http://godoc.org/github.com/mmatczuk/go-http-tunnel) [![Go Report Card](https://goreportcard.com/badge/github.com/mmatczuk/go-http-tunnel)](https://goreportcard.com/report/github.com/mmatczuk/go-http-tunnel) [![Build Status](http://img.shields.io/travis/mmatczuk/go-http-tunnel.svg?branch=master)](https://travis-ci.org/mmatczuk/go-http-tunnel) [![Github All Releases](https://img.shields.io/github/downloads/mmatczuk/go-http-tunnel/total.svg)](https://github.com/mmatczuk/go-http-tunnel/releases)\n\nGo HTTP tunnel is a reverse tunnel based on HTTP/2. It enables you to share your localhost when you don't have a public IP.\n\nFeatures:\n\n* HTTP proxy with [basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)\n* TCP proxy\n* [SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) vhost proxy\n* Client auto reconnect\n* Client management and eviction\n* Easy to use CLI\n\nCommon use cases:\n\n* Hosting a game server from home\n* Developing webhook integrations\n* Managing IoT devices\n\n## Project Status\n\nIF YOU WOULD LIKE TO SEE THIS PROJECT MODERNIZED PLEASE [UPVOTE THE ISSUE](https://github.com/mmatczuk/go-http-tunnel/issues/142).\n\n## Installation\n\nBuild the latest version.\n\n```bash\n$ go get -u github.com/mmatczuk/go-http-tunnel/cmd/...\n```\n\nAlternatively [download the latest release](https://github.com/mmatczuk/go-http-tunnel/releases/latest).\n\n## Running\n\nThere are two executables:\n\n* `tunneld` - the tunnel server, to be run on publicly available host like AWS or GCE\n* `tunnel` - the tunnel client, to be run on your local machine or in your private network\n\nTo get help on the command parameters run `tunneld -h` or `tunnel -h`.\n\nTunnel requires TLS certificates for both client and server.\n\n```bash\n$ openssl req -x509 -nodes -newkey rsa:2048 -sha256 -keyout client.key -out client.crt\n$ openssl req -x509 -nodes -newkey rsa:2048 -sha256 -keyout server.key -out server.crt\n```\n\nRun client:\n\n* Install `tunnel` binary\n* Make `.tunnel` directory in your project directory\n* Copy `client.key`, `client.crt` to `.tunnel`\n* Create configuration file `tunnel.yml` in `.tunnel`\n* Start all tunnels\n\n```bash\n$ tunnel -config ./tunnel/tunnel.yml start-all\n```\n\nRun server:\n\n* Install `tunneld` binary\n* Make `.tunneld` directory\n* Copy `server.key`, `server.crt` to `.tunneld`\n* Start tunnel server\n\n```bash\n$ tunneld -tlsCrt .tunneld/server.crt -tlsKey .tunneld/server.key\n```\n\nThis will run HTTP server on port `80` and HTTPS (HTTP/2) server on port `443`. If you want to use HTTPS it's recommended to get a properly signed certificate to avoid security warnings.\n\n### Run Server as a Service on Ubuntu using Systemd:\n\n* After completing the steps above successfully, create a new file for your service (you can name it whatever you want, just replace the name below with your chosen name).\n\n``` bash\n$ vim tunneld.service\n```\n\n* Add the following configuration to the file\n\n```\n[Unit]\nDescription=Go-Http-Tunnel Service\nAfter=network.target\nAfter=network-online.target\n\n[Service]\nExecStart=/path/to/your/tunneld -tlsCrt /path/to/your/folder/.tunneld/server.crt -tlsKey /path/to/your/folder/.tunneld/server.key\nTimeoutSec=30\nRestart=on-failure\nRestartSec=30\n\n[Install]\nWantedBy=multi-user.target\n```\n\n* Save and exit this file.\n* Move this new file to /etc/systemd/system/\n\n```bash\n$ sudo mv tunneld.service /etc/systemd/system/\n```\n\n* Change the file permission to allow it to run.\n\n```bash\n$ sudo chmod u+x /etc/systemd/system/tunneld.service\n```\n\n* Start the new service and make sure you don't get any errors, and that your client is able to connect.\n\n```bash\n$ sudo systemctl start tunneld.service\n```\n\n* You can stop the service with:\n\n```bash\n$ sudo systemctl stop tunneld.service\n```\n\n* Finally, if you want the service to start automatically when the server is rebooted, you need to enable it.\n\n```bash\n$ sudo systemctl enable tunneld.service\n```\n\nThere are many more options for systemd services, and this is by not means an exhaustive configuration file.\n\n## Configuration\n\nThe tunnel client `tunnel` requires configuration file, by default it will try reading `tunnel.yml` in your current working directory. If you want to specify other file use `-config` flag.\n\nSample configuration that exposes:\n\n* `localhost:8080` as `webui.my-tunnel-host.com`\n* host in private network for ssh connections\n\nlooks like this\n\n```yaml\n    server_addr: SERVER_IP:5223\n    tunnels:\n      webui:\n        proto: http\n        addr: localhost:8080\n        auth: user:password\n        host: webui.my-tunnel-host.com\n      ssh:\n        proto: tcp\n        addr: 192.168.0.5:22\n        remote_addr: 0.0.0.0:22\n      tls:\n  \t    proto: sni\n  \t    addr: localhost:443\n  \t    host: tls.my-tunnel-host.com\n```\n\nConfiguration options:\n\n* `server_addr`: server TCP address, i.e. `54.12.12.45:5223`\n* `tls_crt`: path to client TLS certificate, *default:* `client.crt` *in the config file directory*\n* `tls_key`: path to client TLS certificate key, *default:* `client.key` *in the config file directory*\n* `root_ca`: path to trusted root certificate authority pool file, if empty any server certificate is accepted\n*  `tunnels / [name]`\n    * `proto`: tunnel protocol, `http`, `tcp` or `sni`\n    * `addr`: forward traffic to this local port number or network address, for `proto=http` this can be full URL i.e. `https://machine/sub/path/?plus=params`, supports URL schemes `http` and `https`\n    * `auth`: (`proto=http`) (optional) basic authentication credentials to enforce on tunneled requests, format `user:password`\n    * `host`: (`proto=http`, `proto=sni`) hostname to request (requires reserved name and DNS CNAME)\n    * `remote_addr`: (`proto=tcp`) bind the remote TCP address\n* `backoff`\n    * `interval`: how long client would wait before redialing the server if connection was lost, exponential backoff initial interval, *default:* `500ms`\n    * `multiplier`: interval multiplier if reconnect failed, *default:* `1.5`\n    * `max_interval`: maximal time client would wait before redialing the server, *default:* `1m`\n    * `max_time`: maximal time client would try to reconnect to the server if connection was lost, set `0` to never stop trying, *default:* `15m`\n\n## How it works\n\nA client opens TLS connection to a server. The server accepts connections from known clients only. The client is recognized by its TLS certificate ID. The server is publicly available and proxies incoming connections to the client. Then the connection is further proxied in the client's network.\n\nThe tunnel is based HTTP/2 for speed and security. There is a single TCP connection between client and server and all the proxied connections are multiplexed using HTTP/2.\n\n## Donation\n\nIf this project help you reduce time to develop, you can give me a cup of coffee.\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=RMM46NAEY7YZ6&lc=US&item_name=go%2dhttp%2dtunnel&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted)\n\nA GitHub star is always appreciated!\n\n## License\n\nCopyright (C) 2017 Michał Matczuk\n\nThis project is distributed under the AGPL-3 license. See the [LICENSE](https://github.com/mmatczuk/go-http-tunnel/blob/master/LICENSE) file for details. If you need an enterprise license contact me directly.\n"
        },
        {
          "name": "auth.go",
          "type": "blob",
          "size": 0.513671875,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport \"strings\"\n\n// Auth holds user and password.\ntype Auth struct {\n\tUser     string\n\tPassword string\n}\n\n// NewAuth creates new auth from string representation \"user:password\".\nfunc NewAuth(auth string) *Auth {\n\tif auth == \"\" {\n\t\treturn nil\n\t}\n\n\ts := strings.SplitN(auth, \":\", 2)\n\ta := &Auth{\n\t\tUser: s[0],\n\t}\n\tif len(s) > 1 {\n\t\ta.Password = s[1]\n\t}\n\n\treturn a\n}\n"
        },
        {
          "name": "auth_test.go",
          "type": "blob",
          "size": 0.595703125,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestNewAuth(t *testing.T) {\n\ttests := []struct {\n\t\tactual   string\n\t\texpected *Auth\n\t}{\n\t\t{\"\", nil},\n\t\t{\"user\", &Auth{User: \"user\"}},\n\t\t{\"user:password\", &Auth{User: \"user\", Password: \"password\"}},\n\t\t{\"user:pass:word\", &Auth{User: \"user\", Password: \"pass:word\"}},\n\t}\n\n\tfor _, tt := range tests {\n\t\tif !reflect.DeepEqual(NewAuth(tt.actual), tt.expected) {\n\t\t\tt.Errorf(\"Invalid auth for %s\", tt.actual)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "backoff.go",
          "type": "blob",
          "size": 0.576171875,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport \"time\"\n\n// Backoff defines behavior of staggering reconnection retries.\ntype Backoff interface {\n\t// Next returns the duration to sleep before retrying to reconnect.\n\t// If the returned value is negative, the retry is aborted.\n\tNextBackOff() time.Duration\n\n\t// Reset is used to signal a reconnection was successful and next\n\t// call to Next should return desired time duration for 1st reconnection\n\t// attempt.\n\tReset()\n}\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "client.go",
          "type": "blob",
          "size": 6.396484375,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\n\t\"golang.org/x/net/http2\"\n\n\t\"github.com/mmatczuk/go-http-tunnel/log\"\n\t\"github.com/mmatczuk/go-http-tunnel/proto\"\n)\n\n// ClientConfig is configuration of the Client.\ntype ClientConfig struct {\n\t// ServerAddr specifies TCP address of the tunnel server.\n\tServerAddr string\n\t// TLSClientConfig specifies the tls configuration to use with\n\t// tls.Client.\n\tTLSClientConfig *tls.Config\n\t// DialTLS specifies an optional dial function that creates a tls\n\t// connection to the server. If DialTLS is nil, tls.Dial is used.\n\tDialTLS func(network, addr string, config *tls.Config) (net.Conn, error)\n\t// Backoff specifies backoff policy on server connection retry. If nil\n\t// when dial fails it will not be retried.\n\tBackoff Backoff\n\t// Tunnels specifies the tunnels client requests to be opened on server.\n\tTunnels map[string]*proto.Tunnel\n\t// Proxy is ProxyFunc responsible for transferring data between server\n\t// and local services.\n\tProxy ProxyFunc\n\t// Logger is optional logger. If nil logging is disabled.\n\tLogger log.Logger\n}\n\n// Client is responsible for creating connection to the server, handling control\n// messages. It uses ProxyFunc for transferring data between server and local\n// services.\ntype Client struct {\n\tconfig *ClientConfig\n\n\tconn           net.Conn\n\tconnMu         sync.Mutex\n\thttpServer     *http2.Server\n\tserverErr      error\n\tlastDisconnect time.Time\n\tlogger         log.Logger\n}\n\n// NewClient creates a new unconnected Client based on configuration. Caller\n// must invoke Start() on returned instance in order to connect server.\nfunc NewClient(config *ClientConfig) (*Client, error) {\n\tif config.ServerAddr == \"\" {\n\t\treturn nil, errors.New(\"missing ServerAddr\")\n\t}\n\tif config.TLSClientConfig == nil {\n\t\treturn nil, errors.New(\"missing TLSClientConfig\")\n\t}\n\tif len(config.Tunnels) == 0 {\n\t\treturn nil, errors.New(\"missing Tunnels\")\n\t}\n\tif config.Proxy == nil {\n\t\treturn nil, errors.New(\"missing Proxy\")\n\t}\n\n\tlogger := config.Logger\n\tif logger == nil {\n\t\tlogger = log.NewNopLogger()\n\t}\n\n\tc := &Client{\n\t\tconfig:     config,\n\t\thttpServer: &http2.Server{},\n\t\tlogger:     logger,\n\t}\n\n\treturn c, nil\n}\n\n// Start connects client to the server, it returns error if there is a\n// connection error, or server cannot open requested tunnels. On connection\n// error a backoff policy is used to reestablish the connection. When connected\n// HTTP/2 server is started to handle ControlMessages.\nfunc (c *Client) Start() error {\n\tc.logger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"start\",\n\t)\n\n\tfor {\n\t\tconn, err := c.connect()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tc.httpServer.ServeConn(conn, &http2.ServeConnOpts{\n\t\t\tHandler: http.HandlerFunc(c.serveHTTP),\n\t\t})\n\n\t\tc.logger.Log(\n\t\t\t\"level\", 1,\n\t\t\t\"action\", \"disconnected\",\n\t\t)\n\n\t\tc.connMu.Lock()\n\t\tnow := time.Now()\n\t\terr = c.serverErr\n\n\t\t// detect disconnect hiccup\n\t\tif err == nil && now.Sub(c.lastDisconnect).Seconds() < 5 {\n\t\t\terr = fmt.Errorf(\"connection is being cut\")\n\t\t}\n\n\t\tc.conn = nil\n\t\tc.serverErr = nil\n\t\tc.lastDisconnect = now\n\t\tc.connMu.Unlock()\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (c *Client) connect() (net.Conn, error) {\n\tc.connMu.Lock()\n\tdefer c.connMu.Unlock()\n\n\tif c.conn != nil {\n\t\treturn nil, fmt.Errorf(\"already connected\")\n\t}\n\n\tconn, err := c.dial()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to connect to server: %s\", err)\n\t}\n\tc.conn = conn\n\n\treturn conn, nil\n}\n\nfunc (c *Client) dial() (net.Conn, error) {\n\tvar (\n\t\tnetwork   = \"tcp\"\n\t\taddr      = c.config.ServerAddr\n\t\ttlsConfig = c.config.TLSClientConfig\n\t)\n\n\tdoDial := func() (conn net.Conn, err error) {\n\t\tc.logger.Log(\n\t\t\t\"level\", 1,\n\t\t\t\"action\", \"dial\",\n\t\t\t\"network\", network,\n\t\t\t\"addr\", addr,\n\t\t)\n\n\t\tif c.config.DialTLS != nil {\n\t\t\tconn, err = c.config.DialTLS(network, addr, tlsConfig)\n\t\t} else {\n\t\t\td := &net.Dialer{\n\t\t\t\tTimeout: DefaultTimeout,\n\t\t\t}\n\t\t\tconn, err = d.Dial(network, addr)\n\n\t\t\tif err == nil {\n\t\t\t\terr = keepAlive(conn)\n\t\t\t}\n\t\t\tif err == nil {\n\t\t\t\tconn = tls.Client(conn, tlsConfig)\n\t\t\t}\n\t\t\tif err == nil {\n\t\t\t\terr = conn.(*tls.Conn).Handshake()\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tif conn != nil {\n\t\t\t\tconn.Close()\n\t\t\t\tconn = nil\n\t\t\t}\n\n\t\t\tc.logger.Log(\n\t\t\t\t\"level\", 0,\n\t\t\t\t\"msg\", \"dial failed\",\n\t\t\t\t\"network\", network,\n\t\t\t\t\"addr\", addr,\n\t\t\t\t\"err\", err,\n\t\t\t)\n\t\t}\n\n\t\treturn\n\t}\n\n\tb := c.config.Backoff\n\tif b == nil {\n\t\treturn doDial()\n\t}\n\n\tfor {\n\t\tconn, err := doDial()\n\n\t\t// success\n\t\tif err == nil {\n\t\t\tb.Reset()\n\t\t\treturn conn, err\n\t\t}\n\n\t\t// failure\n\t\td := b.NextBackOff()\n\t\tif d < 0 {\n\t\t\treturn conn, fmt.Errorf(\"backoff limit exeded: %s\", err)\n\t\t}\n\n\t\t// backoff\n\t\tc.logger.Log(\n\t\t\t\"level\", 1,\n\t\t\t\"action\", \"backoff\",\n\t\t\t\"sleep\", d,\n\t\t)\n\t\ttime.Sleep(d)\n\t}\n}\n\nfunc (c *Client) serveHTTP(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == http.MethodConnect {\n\t\tif r.Header.Get(proto.HeaderError) != \"\" {\n\t\t\tc.handleHandshakeError(w, r)\n\t\t} else {\n\t\t\tc.handleHandshake(w, r)\n\t\t}\n\t\treturn\n\t}\n\n\tmsg, err := proto.ReadControlMessage(r)\n\tif err != nil {\n\t\tc.logger.Log(\n\t\t\t\"level\", 1,\n\t\t\t\"err\", err,\n\t\t)\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tc.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"handle\",\n\t\t\"ctrlMsg\", msg,\n\t)\n\tswitch msg.Action {\n\tcase proto.ActionProxy:\n\t\tc.config.Proxy(w, r.Body, msg)\n\tdefault:\n\t\tc.logger.Log(\n\t\t\t\"level\", 0,\n\t\t\t\"msg\", \"unknown action\",\n\t\t\t\"ctrlMsg\", msg,\n\t\t)\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t}\n\tc.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"done\",\n\t\t\"ctrlMsg\", msg,\n\t)\n}\n\nfunc (c *Client) handleHandshakeError(w http.ResponseWriter, r *http.Request) {\n\terr := fmt.Errorf(r.Header.Get(proto.HeaderError))\n\n\tc.logger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"handshake error\",\n\t\t\"addr\", r.RemoteAddr,\n\t\t\"err\", err,\n\t)\n\n\tc.connMu.Lock()\n\tc.serverErr = fmt.Errorf(\"server error: %s\", err)\n\tc.connMu.Unlock()\n}\n\nfunc (c *Client) handleHandshake(w http.ResponseWriter, r *http.Request) {\n\tc.logger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"handshake\",\n\t\t\"addr\", r.RemoteAddr,\n\t)\n\n\tw.WriteHeader(http.StatusOK)\n\n\tb, err := json.Marshal(c.config.Tunnels)\n\tif err != nil {\n\t\tc.logger.Log(\n\t\t\t\"level\", 0,\n\t\t\t\"msg\", \"handshake failed\",\n\t\t\t\"err\", err,\n\t\t)\n\t\treturn\n\t}\n\tw.Write(b)\n}\n\n// Stop disconnects client from server.\nfunc (c *Client) Stop() {\n\tc.connMu.Lock()\n\tdefer c.connMu.Unlock()\n\n\tc.logger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"stop\",\n\t)\n\n\tif c.conn != nil {\n\t\tc.conn.Close()\n\t}\n\tc.conn = nil\n}\n"
        },
        {
          "name": "client_test.go",
          "type": "blob",
          "size": 1.744140625,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"net\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/mmatczuk/go-http-tunnel/proto\"\n\t\"github.com/mmatczuk/go-http-tunnel/tunnelmock\"\n)\n\nfunc TestClient_Dial(t *testing.T) {\n\tt.Parallel()\n\n\ts := httptest.NewTLSServer(nil)\n\tdefer s.Close()\n\n\tc, err := NewClient(&ClientConfig{\n\t\tServerAddr: s.Listener.Addr().String(),\n\t\tTLSClientConfig: &tls.Config{\n\t\t\tInsecureSkipVerify: true,\n\t\t},\n\t\tTunnels: map[string]*proto.Tunnel{\"test\": {}},\n\t\tProxy:   Proxy(ProxyFuncs{}),\n\t})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tconn, err := c.dial()\n\tif err != nil {\n\t\tt.Fatal(\"Dial error\", err)\n\t}\n\tif conn == nil {\n\t\tt.Fatal(\"Expected connection\", err)\n\t}\n\tconn.Close()\n}\n\nfunc TestClient_DialBackoff(t *testing.T) {\n\tt.Parallel()\n\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tb := tunnelmock.NewMockBackoff(ctrl)\n\tgomock.InOrder(\n\t\tb.EXPECT().NextBackOff().Return(50*time.Millisecond).Times(2),\n\t\tb.EXPECT().NextBackOff().Return(-time.Millisecond),\n\t)\n\n\td := func(network, addr string, config *tls.Config) (net.Conn, error) {\n\t\treturn nil, errors.New(\"foobar\")\n\t}\n\n\tc, err := NewClient(&ClientConfig{\n\t\tServerAddr:      \"8.8.8.8\",\n\t\tTLSClientConfig: &tls.Config{},\n\t\tDialTLS:         d,\n\t\tBackoff:         b,\n\t\tTunnels:         map[string]*proto.Tunnel{\"test\": {}},\n\t\tProxy:           Proxy(ProxyFuncs{}),\n\t})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tstart := time.Now()\n\t_, err = c.dial()\n\n\tif time.Since(start) < 100*time.Millisecond {\n\t\tt.Fatal(\"Wait mismatch\", err)\n\t}\n\n\tif err.Error() != \"backoff limit exeded: foobar\" {\n\t\tt.Fatal(\"Error mismatch\", err)\n\t}\n}\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 0.349609375,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\n// Package tunnel is fast and secure client/server package that enables proxying\n// public connections to your local machine over a tunnel connection from the\n// local machine to the public server.\npackage tunnel\n"
        },
        {
          "name": "errors.go",
          "type": "blob",
          "size": 0.419921875,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport \"errors\"\n\nvar (\n\terrClientNotSubscribed    = errors.New(\"client not subscribed\")\n\terrClientNotConnected     = errors.New(\"client not connected\")\n\terrClientAlreadyConnected = errors.New(\"client already connected\")\n\n\terrUnauthorised = errors.New(\"unauthorised\")\n)\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.369140625,
          "content": "module github.com/mmatczuk/go-http-tunnel\n\ngo 1.13\n\nrequire (\n\tgithub.com/calmh/luhn v2.0.0+incompatible\n\tgithub.com/cenkalti/backoff v2.1.1+incompatible\n\tgithub.com/felixge/tcpkeepalive v0.0.0-20160804073959-5bb0b2dea91e\n\tgithub.com/golang/mock v1.2.0\n\tgithub.com/inconshreveable/go-vhost v0.0.0-20160627193104-06d84117953b\n\tgolang.org/x/net v0.23.0\n\tgopkg.in/yaml.v2 v2.2.2\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.375,
          "content": "github.com/calmh/luhn v2.0.0+incompatible h1:xHkbAc8FBgMiGUaKsiYcwtf8xhSXVtRKA2NhY7hFCAc=\ngithub.com/calmh/luhn v2.0.0+incompatible/go.mod h1:70IGmMi0GKRs073gl/oH5/yiJnTt61h35YQhvo/k3Cc=\ngithub.com/cenkalti/backoff v2.1.1+incompatible h1:tKJnvO2kl0zmb/jA5UKAt4VoEVw1qxKWjE/Bpp46npY=\ngithub.com/cenkalti/backoff v2.1.1+incompatible/go.mod h1:90ReRw6GdpyfrHakVjL/QHaoyV4aDUVVkXQJJJ3NXXM=\ngithub.com/felixge/tcpkeepalive v0.0.0-20160804073959-5bb0b2dea91e h1:mVIjvOd7NckIwf9J4hLB2YWXBYjhREF4vBeZXZ8mrWM=\ngithub.com/felixge/tcpkeepalive v0.0.0-20160804073959-5bb0b2dea91e/go.mod h1:z0yk3Pix6k848RFizhkU4uY36ts5pB1t3toBwudGbBo=\ngithub.com/golang/mock v1.2.0 h1:28o5sBqPkBsMGnC6b4MvE2TzSr5/AT4c/1fLqVGIwlk=\ngithub.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/inconshreveable/go-vhost v0.0.0-20160627193104-06d84117953b h1:IpLPmn6Re21F0MaV6Zsc5RdSE6KuoFpWmHiUSEs3PrE=\ngithub.com/inconshreveable/go-vhost v0.0.0-20160627193104-06d84117953b/go.mod h1:aA6DnFhALT3zH0y+A39we+zbrdMC2N0X/q21e6FI0LU=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\ngolang.org/x/crypto v0.21.0/go.mod h1:0BP7YvVV9gBbVKyeTG0Gyn+gZm94bibOW5BjDEYAOMs=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\ngolang.org/x/net v0.23.0 h1:7EYJ93RZ9vYSZAIb2x3lnuvqO5zneoD6IvWjuhfxjTs=\ngolang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.18.0/go.mod h1:ILwASektA3OnRv7amZ1xhE/KTR+u50pbXfZ03+6Nx58=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2 h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n"
        },
        {
          "name": "httpproxy.go",
          "type": "blob",
          "size": 3.8408203125,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n\t\"path\"\n\n\t\"github.com/mmatczuk/go-http-tunnel/log\"\n\t\"github.com/mmatczuk/go-http-tunnel/proto\"\n)\n\n// HTTPProxy forwards HTTP traffic.\ntype HTTPProxy struct {\n\thttputil.ReverseProxy\n\t// localURL specifies default base URL of local service.\n\tlocalURL *url.URL\n\t// localURLMap specifies mapping from ControlMessage.ForwardedHost to\n\t// local service URL, keys may contain host and port, only host or\n\t// only port. The order of precedence is the following\n\t// * host and port\n\t// * port\n\t// * host\n\tlocalURLMap map[string]*url.URL\n\t// logger is the proxy logger.\n\tlogger log.Logger\n}\n\n// NewHTTPProxy creates a new direct HTTPProxy, everything will be proxied to\n// localURL.\nfunc NewHTTPProxy(localURL *url.URL, logger log.Logger) *HTTPProxy {\n\tif logger == nil {\n\t\tlogger = log.NewNopLogger()\n\t}\n\n\tp := &HTTPProxy{\n\t\tlocalURL: localURL,\n\t\tlogger:   logger,\n\t}\n\tp.ReverseProxy.Director = p.Director\n\n\treturn p\n}\n\n// NewMultiHTTPProxy creates a new dispatching HTTPProxy, requests may go to\n// different backends based on localURLMap.\nfunc NewMultiHTTPProxy(localURLMap map[string]*url.URL, logger log.Logger) *HTTPProxy {\n\tif logger == nil {\n\t\tlogger = log.NewNopLogger()\n\t}\n\n\tp := &HTTPProxy{\n\t\tlocalURLMap: localURLMap,\n\t\tlogger:      logger,\n\t}\n\tp.ReverseProxy.Director = p.Director\n\n\treturn p\n}\n\n// Proxy is a ProxyFunc.\nfunc (p *HTTPProxy) Proxy(w io.Writer, r io.ReadCloser, msg *proto.ControlMessage) {\n\tswitch msg.ForwardedProto {\n\tcase proto.HTTP, proto.HTTPS:\n\t\t// ok\n\tdefault:\n\t\tp.logger.Log(\n\t\t\t\"level\", 0,\n\t\t\t\"msg\", \"unsupported protocol\",\n\t\t\t\"ctrlMsg\", msg,\n\t\t)\n\t\treturn\n\t}\n\n\trw, ok := w.(http.ResponseWriter)\n\tif !ok {\n\t\tp.logger.Log(\n\t\t\t\"level\", 0,\n\t\t\t\"msg\", \"expected http.ResponseWriter\",\n\t\t\t\"ctrlMsg\", msg,\n\t\t)\n\t}\n\n\treq, err := http.ReadRequest(bufio.NewReader(r))\n\tif err != nil {\n\t\tp.logger.Log(\n\t\t\t\"level\", 0,\n\t\t\t\"msg\", \"failed to read request\",\n\t\t\t\"ctrlMsg\", msg,\n\t\t\t\"err\", err,\n\t\t)\n\t\treturn\n\t}\n\n\tsetXForwardedFor(req.Header, msg.RemoteAddr)\n\treq.URL.Host = msg.ForwardedHost\n\n\tp.ServeHTTP(rw, req)\n}\n\n// Director is ReverseProxy Director it changes request URL so that the request\n// is correctly routed based on localURL and localURLMap. If no URL can be found\n// the request is canceled.\nfunc (p *HTTPProxy) Director(req *http.Request) {\n\torig := *req.URL\n\n\ttarget := p.localURLFor(req.URL)\n\tif target == nil {\n\t\tp.logger.Log(\n\t\t\t\"level\", 1,\n\t\t\t\"msg\", \"no target\",\n\t\t\t\"url\", req.URL,\n\t\t)\n\n\t\t_, cancel := context.WithCancel(req.Context())\n\t\tcancel()\n\n\t\treturn\n\t}\n\n\treq.URL.Host = target.Host\n\treq.URL.Scheme = target.Scheme\n\treq.URL.Path = singleJoiningSlash(target.Path, req.URL.Path)\n\n\ttargetQuery := target.RawQuery\n\tif targetQuery == \"\" || req.URL.RawQuery == \"\" {\n\t\treq.URL.RawQuery = targetQuery + req.URL.RawQuery\n\t} else {\n\t\treq.URL.RawQuery = targetQuery + \"&\" + req.URL.RawQuery\n\t}\n\tif _, ok := req.Header[\"User-Agent\"]; !ok {\n\t\t// explicitly disable User-Agent so it's not set to default value\n\t\treq.Header.Set(\"User-Agent\", \"\")\n\t}\n\n\treq.Host = req.URL.Host\n\n\tp.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"url rewrite\",\n\t\t\"from\", &orig,\n\t\t\"to\", req.URL,\n\t)\n}\n\nfunc singleJoiningSlash(a, b string) string {\n\tif a == \"\" || a == \"/\" {\n\t\treturn b\n\t}\n\tif b == \"\" || b == \"/\" {\n\t\treturn a\n\t}\n\n\treturn path.Join(a, b)\n}\n\nfunc (p *HTTPProxy) localURLFor(u *url.URL) *url.URL {\n\tif len(p.localURLMap) == 0 {\n\t\treturn p.localURL\n\t}\n\n\t// try host and port\n\thostPort := u.Host\n\tif addr := p.localURLMap[hostPort]; addr != nil {\n\t\treturn addr\n\t}\n\n\t// try port\n\thost, port, _ := net.SplitHostPort(hostPort)\n\tif addr := p.localURLMap[port]; addr != nil {\n\t\treturn addr\n\t}\n\n\t// try host\n\tif addr := p.localURLMap[host]; addr != nil {\n\t\treturn addr\n\t}\n\n\treturn p.localURL\n}\n"
        },
        {
          "name": "id",
          "type": "tree",
          "content": null
        },
        {
          "name": "integration_test.go",
          "type": "blob",
          "size": 6.7646484375,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel_test\n\nimport (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"math/rand\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/mmatczuk/go-http-tunnel\"\n\t\"github.com/mmatczuk/go-http-tunnel/log\"\n\t\"github.com/mmatczuk/go-http-tunnel/proto\"\n)\n\nconst (\n\tpayloadInitialSize = 512\n\tpayloadLen         = 10\n)\n\n// echoHTTP starts serving HTTP requests on listener l, it accepts connections,\n// reads request body and writes is back in response.\nfunc echoHTTP(t testing.TB, l net.Listener) {\n\thttp.Serve(l, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tprior := strings.Join(r.Header[\"X-Forwarded-For\"], \", \")\n\t\tif len(strings.Split(prior, \",\")) != 2 {\n\t\t\tt.Fatal(r.Header)\n\t\t}\n\t\tif !strings.Contains(r.Header.Get(\"X-Forwarded-Host\"), \"localhost:\") {\n\t\t\tt.Fatal(r.Header)\n\t\t}\n\t\tif r.Header.Get(\"X-Forwarded-Proto\") != \"http\" {\n\t\t\tt.Fatal(r.Header)\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t\tif r.Body != nil {\n\t\t\tbody, err := ioutil.ReadAll(r.Body)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tw.Write(body)\n\t\t}\n\t}))\n}\n\n// echoTCP accepts connections and copies back received bytes.\nfunc echoTCP(l net.Listener) {\n\tfor {\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tgo func() {\n\t\t\tio.Copy(conn, conn)\n\t\t}()\n\t}\n}\n\nfunc makeEcho(t testing.TB) (http net.Listener, tcp net.Listener) {\n\tvar err error\n\n\t// TCP echo\n\ttcp, err = net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tgo echoTCP(tcp)\n\n\t// HTTP echo\n\thttp, err = net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tgo echoHTTP(t, http)\n\n\treturn\n}\n\nfunc makeTunnelServer(t testing.TB) *tunnel.Server {\n\ts, err := tunnel.NewServer(&tunnel.ServerConfig{\n\t\tAddr:          \":0\",\n\t\tAutoSubscribe: true,\n\t\tTLSConfig:     tlsConfig(),\n\t\tLogger:        log.NewStdLogger(),\n\t})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tgo s.Start()\n\n\treturn s\n}\n\nfunc makeTunnelClient(t testing.TB, serverAddr string, httpLocalAddr, httpAddr, tcpLocalAddr, tcpAddr net.Addr) *tunnel.Client {\n\thttpProxy := tunnel.NewMultiHTTPProxy(map[string]*url.URL{\n\t\t\"localhost:\" + port(httpLocalAddr): {\n\t\t\tScheme: \"http\",\n\t\t\tHost:   \"127.0.0.1:\" + port(httpAddr),\n\t\t},\n\t}, log.NewStdLogger())\n\n\ttcpProxy := tunnel.NewMultiTCPProxy(map[string]string{\n\t\tport(tcpLocalAddr): tcpAddr.String(),\n\t}, log.NewStdLogger())\n\n\ttunnels := map[string]*proto.Tunnel{\n\t\tproto.HTTP: {\n\t\t\tProtocol: proto.HTTP,\n\t\t\tHost:     \"localhost\",\n\t\t\tAuth:     \"user:password\",\n\t\t},\n\t\tproto.TCP: {\n\t\t\tProtocol: proto.TCP,\n\t\t\tAddr:     tcpLocalAddr.String(),\n\t\t},\n\t}\n\n\tc, err := tunnel.NewClient(&tunnel.ClientConfig{\n\t\tServerAddr:      serverAddr,\n\t\tTLSClientConfig: tlsConfig(),\n\t\tTunnels:         tunnels,\n\t\tProxy: tunnel.Proxy(tunnel.ProxyFuncs{\n\t\t\tHTTP: httpProxy.Proxy,\n\t\t\tTCP:  tcpProxy.Proxy,\n\t\t}),\n\t\tLogger: log.NewStdLogger(),\n\t})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tgo func() {\n\t\tif err := c.Start(); err != nil {\n\t\t\tt.Log(err)\n\t\t}\n\t}()\n\n\treturn c\n}\n\nfunc TestIntegration(t *testing.T) {\n\t// local services\n\thttp, tcp := makeEcho(t)\n\tdefer http.Close()\n\tdefer tcp.Close()\n\n\t// server\n\ts := makeTunnelServer(t)\n\tdefer s.Stop()\n\th := httptest.NewServer(s)\n\tdefer h.Close()\n\n\thttpLocalAddr := h.Listener.Addr()\n\ttcpLocalAddr := freeAddr()\n\n\t// client\n\tc := makeTunnelClient(t, s.Addr(),\n\t\thttpLocalAddr, http.Addr(),\n\t\ttcpLocalAddr, tcp.Addr(),\n\t)\n\t// FIXME: replace sleep with client state change watch when ready\n\ttime.Sleep(500 * time.Millisecond)\n\tdefer c.Stop()\n\n\tpayload := randPayload(payloadInitialSize, payloadLen)\n\ttable := []struct {\n\t\tS []uint\n\t}{\n\t\t{[]uint{200, 160, 120, 80, 40, 20}},\n\t\t{[]uint{40, 80, 120, 160, 200}},\n\t\t{[]uint{0, 0, 0, 0, 0, 0, 0, 0, 0, 200}},\n\t}\n\n\tvar wg sync.WaitGroup\n\tfor _, test := range table {\n\t\tfor i, repeat := range test.S {\n\t\t\tp := payload[i]\n\t\t\tr := repeat\n\n\t\t\twg.Add(1)\n\t\t\tgo func() {\n\t\t\t\ttestHTTP(t, h.Listener.Addr(), p, r)\n\t\t\t\twg.Done()\n\t\t\t}()\n\t\t\twg.Add(1)\n\t\t\tgo func() {\n\t\t\t\ttestTCP(t, tcpLocalAddr, p, r)\n\t\t\t\twg.Done()\n\t\t\t}()\n\t\t}\n\t}\n\twg.Wait()\n}\n\nfunc testHTTP(t testing.TB, addr net.Addr, payload []byte, repeat uint) {\n\turl := fmt.Sprintf(\"http://localhost:%s/some/path\", port(addr))\n\n\tfor repeat > 0 {\n\t\tr, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(payload))\n\t\tif err != nil {\n\t\t\tt.Fatal(\"Failed to create request\")\n\t\t}\n\t\tr.SetBasicAuth(\"user\", \"password\")\n\n\t\tresp, err := http.DefaultClient.Do(r)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\t\tif resp.StatusCode != http.StatusOK {\n\t\t\tt.Error(\"Unexpected status code\", resp)\n\t\t}\n\t\tb, err := ioutil.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\tt.Error(\"Read error\")\n\t\t}\n\t\tn, m := len(b), len(payload)\n\t\tif n != m {\n\t\t\tt.Error(\"Write read mismatch\", n, m)\n\t\t}\n\t\trepeat--\n\t}\n}\n\nfunc testTCP(t testing.TB, addr net.Addr, payload []byte, repeat uint) {\n\tconn, err := net.Dial(\"tcp\", addr.String())\n\tif err != nil {\n\t\tt.Fatal(\"Dial failed\", err)\n\t}\n\tdefer conn.Close()\n\n\tvar buf = make([]byte, 10*1024*1024)\n\tvar read, write int\n\tfor repeat > 0 {\n\t\tm, err := conn.Write(payload)\n\t\tif err != nil {\n\t\t\tt.Error(\"Write failed\", err)\n\t\t}\n\t\tif m != len(payload) {\n\t\t\tt.Log(\"Write mismatch\", m, len(payload))\n\t\t}\n\t\twrite += m\n\n\t\tn, err := conn.Read(buf)\n\t\tif err != nil {\n\t\t\tt.Error(\"Read failed\", err)\n\t\t}\n\t\tread += n\n\t\trepeat--\n\t}\n\n\tfor read < write {\n\t\tt.Log(\"No yet read everything\", \"write\", write, \"read\", read)\n\t\ttime.Sleep(50 * time.Millisecond)\n\t\tn, err := conn.Read(buf)\n\t\tif err != nil {\n\t\t\tt.Error(\"Read failed\", err)\n\t\t}\n\t\tread += n\n\t}\n\n\tif read != write {\n\t\tt.Fatal(\"Write read mismatch\", read, write)\n\t}\n}\n\n//\n// helpers\n//\n\n// randPayload returns slice of randomly initialised data buffers.\nfunc randPayload(initialSize, n int) [][]byte {\n\tpayload := make([][]byte, n)\n\tl := initialSize\n\tfor i := 0; i < n; i++ {\n\t\tpayload[i] = randBytes(l)\n\t\tl *= 2\n\t}\n\treturn payload\n}\n\nfunc randBytes(n int) []byte {\n\tb := make([]byte, n)\n\tread, err := rand.Read(b)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif read != n {\n\t\tpanic(\"read did not fill whole slice\")\n\t}\n\treturn b\n}\n\nfunc freeAddr() net.Addr {\n\tl, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer l.Close()\n\treturn l.Addr()\n}\n\nfunc port(addr net.Addr) string {\n\treturn fmt.Sprint(addr.(*net.TCPAddr).Port)\n}\n\nfunc tlsConfig() *tls.Config {\n\tcert, err := tls.LoadX509KeyPair(\"./testdata/selfsigned.crt\", \"./testdata/selfsigned.key\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tc := &tls.Config{\n\t\tCertificates:             []tls.Certificate{cert},\n\t\tClientAuth:               tls.RequireAnyClientCert,\n\t\tSessionTicketsDisabled:   true,\n\t\tInsecureSkipVerify:       true,\n\t\tMinVersion:               tls.VersionTLS12,\n\t\tCipherSuites:             []uint16{tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256},\n\t\tPreferServerCipherSuites: true,\n\t\tNextProtos:               []string{\"h2\"},\n\t}\n\tc.BuildNameToCertificate()\n\treturn c\n}\n"
        },
        {
          "name": "keepalive.go",
          "type": "blob",
          "size": 0.845703125,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\n// +build !windows\n\npackage tunnel\n\nimport (\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/felixge/tcpkeepalive\"\n)\n\nvar (\n\t// DefaultKeepAliveIdleTime specifies how long connection can be idle\n\t// before sending keepalive message.\n\tDefaultKeepAliveIdleTime = 15 * time.Minute\n\t// DefaultKeepAliveCount specifies maximal number of keepalive messages\n\t// sent before marking connection as dead.\n\tDefaultKeepAliveCount = 8\n\t// DefaultKeepAliveInterval specifies how often retry sending keepalive\n\t// messages when no response is received.\n\tDefaultKeepAliveInterval = 5 * time.Second\n)\n\nfunc keepAlive(conn net.Conn) error {\n\treturn tcpkeepalive.SetKeepAlive(conn, DefaultKeepAliveIdleTime, DefaultKeepAliveCount, DefaultKeepAliveInterval)\n}\n"
        },
        {
          "name": "keepalive_windows.go",
          "type": "blob",
          "size": 0.38671875,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc keepAlive(conn net.Conn) error {\n\tc, ok := conn.(*net.TCPConn)\n\tif !ok {\n\t\treturn fmt.Errorf(\"Bad connection type: %T\", c)\n\t}\n\n\tif err := c.SetKeepAlive(true); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "pool.go",
          "type": "blob",
          "size": 2.6259765625,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\n\t\"golang.org/x/net/http2\"\n\n\t\"github.com/mmatczuk/go-http-tunnel/id\"\n)\n\ntype connPair struct {\n\tconn       net.Conn\n\tclientConn *http2.ClientConn\n}\n\ntype connPool struct {\n\tt     *http2.Transport\n\tconns map[string]connPair // key is host:port\n\tfree  func(identifier id.ID)\n\tmu    sync.RWMutex\n}\n\nfunc newConnPool(t *http2.Transport, f func(identifier id.ID)) *connPool {\n\treturn &connPool{\n\t\tt:     t,\n\t\tfree:  f,\n\t\tconns: make(map[string]connPair),\n\t}\n}\n\nfunc (p *connPool) URL(identifier id.ID) string {\n\treturn fmt.Sprint(\"https://\", identifier)\n}\n\nfunc (p *connPool) GetClientConn(req *http.Request, addr string) (*http2.ClientConn, error) {\n\tp.mu.RLock()\n\tdefer p.mu.RUnlock()\n\n\tif cp, ok := p.conns[addr]; ok && cp.clientConn.CanTakeNewRequest() {\n\t\treturn cp.clientConn, nil\n\t}\n\n\treturn nil, errClientNotConnected\n}\n\nfunc (p *connPool) MarkDead(c *http2.ClientConn) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\n\tfor addr, cp := range p.conns {\n\t\tif cp.clientConn == c {\n\t\t\tp.close(cp, addr)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (p *connPool) AddConn(conn net.Conn, identifier id.ID) error {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\n\taddr := p.addr(identifier)\n\n\tif cp, ok := p.conns[addr]; ok {\n\t\tif err := p.ping(cp); err != nil {\n\t\t\tp.close(cp, addr)\n\t\t} else {\n\t\t\treturn errClientAlreadyConnected\n\t\t}\n\t}\n\n\tc, err := p.t.NewClientConn(conn)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.conns[addr] = connPair{\n\t\tconn:       conn,\n\t\tclientConn: c,\n\t}\n\n\treturn nil\n}\n\nfunc (p *connPool) DeleteConn(identifier id.ID) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\n\taddr := p.addr(identifier)\n\n\tif cp, ok := p.conns[addr]; ok {\n\t\tp.close(cp, addr)\n\t}\n}\n\nfunc (p *connPool) Ping(identifier id.ID) (time.Duration, error) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\n\taddr := p.addr(identifier)\n\n\tif cp, ok := p.conns[addr]; ok {\n\t\tstart := time.Now()\n\t\terr := p.ping(cp)\n\t\treturn time.Since(start), err\n\t}\n\n\treturn 0, errClientNotConnected\n}\n\nfunc (p *connPool) ping(cp connPair) error {\n\tctx, cancel := context.WithTimeout(context.Background(), DefaultPingTimeout)\n\tdefer cancel()\n\n\treturn cp.clientConn.Ping(ctx)\n}\n\nfunc (p *connPool) close(cp connPair, addr string) {\n\tcp.conn.Close()\n\tdelete(p.conns, addr)\n\tif p.free != nil {\n\t\tp.free(p.identifier(addr))\n\t}\n}\n\nfunc (p *connPool) addr(identifier id.ID) string {\n\treturn fmt.Sprint(identifier.String(), \":443\")\n}\n\nfunc (p *connPool) identifier(addr string) id.ID {\n\tvar identifier id.ID\n\tidentifier.UnmarshalText([]byte(addr[:len(addr)-4]))\n\treturn identifier\n}\n"
        },
        {
          "name": "proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "proxy.go",
          "type": "blob",
          "size": 0.9833984375,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"io\"\n\n\t\"github.com/mmatczuk/go-http-tunnel/proto\"\n)\n\n// ProxyFunc is responsible for forwarding a remote connection to local server\n// and writing the response.\ntype ProxyFunc func(w io.Writer, r io.ReadCloser, msg *proto.ControlMessage)\n\n// ProxyFuncs is a collection of ProxyFunc.\ntype ProxyFuncs struct {\n\t// HTTP is custom implementation of HTTP proxing.\n\tHTTP ProxyFunc\n\t// TCP is custom implementation of TCP proxing.\n\tTCP ProxyFunc\n}\n\n// Proxy returns a ProxyFunc that uses custom function if provided.\nfunc Proxy(p ProxyFuncs) ProxyFunc {\n\treturn func(w io.Writer, r io.ReadCloser, msg *proto.ControlMessage) {\n\t\tvar f ProxyFunc\n\t\tswitch msg.ForwardedProto {\n\t\tcase proto.HTTP, proto.HTTPS:\n\t\t\tf = p.HTTP\n\t\tcase proto.TCP, proto.TCP4, proto.TCP6, proto.UNIX:\n\t\t\tf = p.TCP\n\t\t}\n\n\t\tif f == nil {\n\t\t\treturn\n\t\t}\n\n\t\tf(w, r, msg)\n\t}\n}\n"
        },
        {
          "name": "registry.go",
          "type": "blob",
          "size": 3.51953125,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"github.com/mmatczuk/go-http-tunnel/id\"\n\t\"github.com/mmatczuk/go-http-tunnel/log\"\n)\n\n// RegistryItem holds information about hosts and listeners associated with a\n// client.\ntype RegistryItem struct {\n\tHosts     []*HostAuth\n\tListeners []net.Listener\n}\n\n// HostAuth holds host and authentication info.\ntype HostAuth struct {\n\tHost string\n\tAuth *Auth\n}\n\ntype hostInfo struct {\n\tidentifier id.ID\n\tauth       *Auth\n}\n\ntype registry struct {\n\titems  map[id.ID]*RegistryItem\n\thosts  map[string]*hostInfo\n\tmu     sync.RWMutex\n\tlogger log.Logger\n}\n\nfunc newRegistry(logger log.Logger) *registry {\n\tif logger == nil {\n\t\tlogger = log.NewNopLogger()\n\t}\n\n\treturn &registry{\n\t\titems:  make(map[id.ID]*RegistryItem),\n\t\thosts:  make(map[string]*hostInfo),\n\t\tlogger: logger,\n\t}\n}\n\nvar voidRegistryItem = &RegistryItem{}\n\n// Subscribe allows to connect client with a given identifier.\nfunc (r *registry) Subscribe(identifier id.ID) {\n\tr.mu.Lock()\n\tdefer r.mu.Unlock()\n\n\tif _, ok := r.items[identifier]; ok {\n\t\treturn\n\t}\n\n\tr.logger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"subscribe\",\n\t\t\"identifier\", identifier,\n\t)\n\n\tr.items[identifier] = voidRegistryItem\n}\n\n// IsSubscribed returns true if client is subscribed.\nfunc (r *registry) IsSubscribed(identifier id.ID) bool {\n\tr.mu.RLock()\n\tdefer r.mu.RUnlock()\n\t_, ok := r.items[identifier]\n\treturn ok\n}\n\n// Subscriber returns client identifier assigned to given host.\nfunc (r *registry) Subscriber(hostPort string) (id.ID, *Auth, bool) {\n\tr.mu.RLock()\n\tdefer r.mu.RUnlock()\n\n\th, ok := r.hosts[trimPort(hostPort)]\n\tif !ok {\n\t\treturn id.ID{}, nil, false\n\t}\n\n\treturn h.identifier, h.auth, ok\n}\n\n// Unsubscribe removes client from registry and returns it's RegistryItem.\nfunc (r *registry) Unsubscribe(identifier id.ID) *RegistryItem {\n\tr.mu.Lock()\n\tdefer r.mu.Unlock()\n\n\ti, ok := r.items[identifier]\n\tif !ok {\n\t\treturn nil\n\t}\n\n\tr.logger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"unsubscribe\",\n\t\t\"identifier\", identifier,\n\t)\n\n\tif i.Hosts != nil {\n\t\tfor _, h := range i.Hosts {\n\t\t\tdelete(r.hosts, h.Host)\n\t\t}\n\t}\n\n\tdelete(r.items, identifier)\n\n\treturn i\n}\n\nfunc (r *registry) set(i *RegistryItem, identifier id.ID) error {\n\tr.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"set registry item\",\n\t\t\"identifier\", identifier,\n\t)\n\n\tr.mu.Lock()\n\tdefer r.mu.Unlock()\n\n\tj, ok := r.items[identifier]\n\tif !ok {\n\t\treturn errClientNotSubscribed\n\t}\n\tif j != voidRegistryItem {\n\t\treturn fmt.Errorf(\"attempt to overwrite registry item\")\n\t}\n\n\tif i.Hosts != nil {\n\t\tfor _, h := range i.Hosts {\n\t\t\tif h.Auth != nil && h.Auth.User == \"\" {\n\t\t\t\treturn fmt.Errorf(\"missing auth user\")\n\t\t\t}\n\t\t\tif _, ok := r.hosts[trimPort(h.Host)]; ok {\n\t\t\t\treturn fmt.Errorf(\"host %q is occupied\", h.Host)\n\t\t\t}\n\t\t}\n\n\t\tfor _, h := range i.Hosts {\n\t\t\tr.hosts[trimPort(h.Host)] = &hostInfo{\n\t\t\t\tidentifier: identifier,\n\t\t\t\tauth:       h.Auth,\n\t\t\t}\n\t\t}\n\t}\n\n\tr.items[identifier] = i\n\n\treturn nil\n}\n\nfunc (r *registry) clear(identifier id.ID) *RegistryItem {\n\tr.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"clear registry item\",\n\t\t\"identifier\", identifier,\n\t)\n\n\tr.mu.Lock()\n\tdefer r.mu.Unlock()\n\n\ti, ok := r.items[identifier]\n\tif !ok || i == voidRegistryItem {\n\t\treturn nil\n\t}\n\n\tif i.Hosts != nil {\n\t\tfor _, h := range i.Hosts {\n\t\t\tdelete(r.hosts, trimPort(h.Host))\n\t\t}\n\t}\n\n\tr.items[identifier] = voidRegistryItem\n\n\treturn i\n}\n\nfunc trimPort(hostPort string) (host string) {\n\thost, _, _ = net.SplitHostPort(hostPort)\n\tif host == \"\" {\n\t\thost = hostPort\n\t}\n\treturn\n}\n"
        },
        {
          "name": "server.go",
          "type": "blob",
          "size": 19.5263671875,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"golang.org/x/net/http2\"\n\n\t\"github.com/inconshreveable/go-vhost\"\n\t\"github.com/mmatczuk/go-http-tunnel/id\"\n\t\"github.com/mmatczuk/go-http-tunnel/log\"\n\t\"github.com/mmatczuk/go-http-tunnel/proto\"\n)\n\n// A set of listeners to manage subscribers\ntype SubscriptionListener interface {\n\t// Invoked if AutoSubscribe is false and must return true if the client is allowed to subscribe or not.\n\t// If the tlsConfig is configured to require client certificate validation, chain will contain the first\n\t// verified chain, else the presented peer certificate.\n\tCanSubscribe(id id.ID, chain []*x509.Certificate) bool\n\t// Invoked when the client has been subscribed.\n\t// If the tlsConfig is configured to require client certificate validation, chain will contain the first\n\t// verified chain, else the presented peer certificate.\n\tSubscribed(id id.ID, tlsConn *tls.Conn, chain []*x509.Certificate)\n\t// Invoked before the client is unsubscribed.\n\tUnsubscribed(id id.ID)\n}\n\n// ServerConfig defines configuration for the Server.\ntype ServerConfig struct {\n\t// Addr is TCP address to listen for client connections. If empty \":0\"\n\t// is used.\n\tAddr string\n\t// AutoSubscribe if enabled will automatically subscribe new clients on\n\t// first call.\n\tAutoSubscribe bool\n\t// TLSConfig specifies the tls configuration to use with tls.Listener.\n\tTLSConfig *tls.Config\n\t// Listener specifies optional listener for client connections. If nil\n\t// tls.Listen(\"tcp\", Addr, TLSConfig) is used.\n\tListener net.Listener\n\t// Logger is optional logger. If nil logging is disabled.\n\tLogger log.Logger\n\t// Addr is TCP address to listen for TLS SNI connections\n\tSNIAddr string\n\t// Optional listener to manage subscribers\n\tSubscriptionListener SubscriptionListener\n}\n\n// Server is responsible for proxying public connections to the client over a\n// tunnel connection.\ntype Server struct {\n\t*registry\n\tconfig *ServerConfig\n\n\tlistener   net.Listener\n\tconnPool   *connPool\n\thttpClient *http.Client\n\tlogger     log.Logger\n\tvhostMuxer *vhost.TLSMuxer\n}\n\n// NewServer creates a new Server.\nfunc NewServer(config *ServerConfig) (*Server, error) {\n\tlistener, err := listener(config)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"listener failed: %s\", err)\n\t}\n\n\tlogger := config.Logger\n\tif logger == nil {\n\t\tlogger = log.NewNopLogger()\n\t}\n\n\ts := &Server{\n\t\tregistry: newRegistry(logger),\n\t\tconfig:   config,\n\t\tlistener: listener,\n\t\tlogger:   logger,\n\t}\n\n\tt := &http2.Transport{}\n\tpool := newConnPool(t, s.disconnected)\n\tt.ConnPool = pool\n\ts.connPool = pool\n\ts.httpClient = &http.Client{\n\t\tTransport: t,\n\t\tCheckRedirect: func(req *http.Request, via []*http.Request) error {\n\t\t\treturn http.ErrUseLastResponse\n\t\t},\n\t}\n\n\tif config.SNIAddr != \"\" {\n\t\tl, err := net.Listen(\"tcp\", config.SNIAddr)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tmux, err := vhost.NewTLSMuxer(l, DefaultTimeout)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"SNI Muxer creation failed: %s\", err)\n\t\t}\n\t\ts.vhostMuxer = mux\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tconn, err := mux.NextError()\n\t\t\t\tvhostName := \"\"\n\t\t\t\ttlsConn, ok := conn.(*vhost.TLSConn)\n\t\t\t\tif ok {\n\t\t\t\t\tvhostName = tlsConn.Host()\n\t\t\t\t}\n\n\t\t\t\tswitch err.(type) {\n\t\t\t\tcase vhost.BadRequest:\n\t\t\t\t\tlogger.Log(\n\t\t\t\t\t\t\"level\", 0,\n\t\t\t\t\t\t\"action\", \"got a bad request!\",\n\t\t\t\t\t\t\"addr\", conn.RemoteAddr(),\n\t\t\t\t\t)\n\t\t\t\tcase vhost.NotFound:\n\n\t\t\t\t\tlogger.Log(\n\t\t\t\t\t\t\"level\", 0,\n\t\t\t\t\t\t\"action\", \"got a connection for an unknown vhost\",\n\t\t\t\t\t\t\"addr\", vhostName,\n\t\t\t\t\t)\n\t\t\t\tcase vhost.Closed:\n\t\t\t\t\tlogger.Log(\n\t\t\t\t\t\t\"level\", 0,\n\t\t\t\t\t\t\"action\", \"closed conn\",\n\t\t\t\t\t\t\"addr\", vhostName,\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif conn != nil {\n\t\t\t\t\tconn.Close()\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\n\treturn s, nil\n}\n\nfunc listener(config *ServerConfig) (net.Listener, error) {\n\tif config.Listener != nil {\n\t\treturn config.Listener, nil\n\t}\n\n\tif config.Addr == \"\" {\n\t\treturn nil, errors.New(\"missing Addr\")\n\t}\n\tif config.TLSConfig == nil {\n\t\treturn nil, errors.New(\"missing TLSConfig\")\n\t}\n\n\treturn net.Listen(\"tcp\", config.Addr)\n}\n\n// disconnected clears resources used by client, it's invoked by connection pool\n// when client goes away.\nfunc (s *Server) disconnected(identifier id.ID) {\n\ts.logger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"disconnected\",\n\t\t\"identifier\", identifier,\n\t)\n\n\ti := s.registry.clear(identifier)\n\tif i == nil {\n\t\treturn\n\t}\n\tfor _, l := range i.Listeners {\n\t\ts.logger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"action\", \"close listener\",\n\t\t\t\"identifier\", identifier,\n\t\t\t\"addr\", l.Addr(),\n\t\t)\n\t\tl.Close()\n\t}\n}\n\n// Start starts accepting connections form clients. For accepting http traffic\n// from end users server must be run as handler on http server.\nfunc (s *Server) Start() {\n\taddr := s.listener.Addr().String()\n\n\ts.logger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"start\",\n\t\t\"addr\", addr,\n\t)\n\n\tfor {\n\t\tconn, err := s.listener.Accept()\n\t\tif err != nil {\n\t\t\tif strings.Contains(err.Error(), \"use of closed network connection\") {\n\t\t\t\ts.logger.Log(\n\t\t\t\t\t\"level\", 1,\n\t\t\t\t\t\"action\", \"control connection listener closed\",\n\t\t\t\t\t\"addr\", addr,\n\t\t\t\t)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\ts.logger.Log(\n\t\t\t\t\"level\", 0,\n\t\t\t\t\"msg\", \"accept of control connection failed\",\n\t\t\t\t\"addr\", addr,\n\t\t\t\t\"err\", err,\n\t\t\t)\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := keepAlive(conn); err != nil {\n\t\t\ts.logger.Log(\n\t\t\t\t\"level\", 0,\n\t\t\t\t\"msg\", \"TCP keepalive for control connection failed\",\n\t\t\t\t\"addr\", addr,\n\t\t\t\t\"err\", err,\n\t\t\t)\n\t\t}\n\n\t\tgo s.handleClient(tls.Server(conn, s.config.TLSConfig))\n\t}\n}\n\nfunc (s *Server) handleClient(conn net.Conn) {\n\tlogger := log.NewContext(s.logger).With(\"addr\", conn.RemoteAddr())\n\n\tlogger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"try connect\",\n\t)\n\n\tvar (\n\t\tidentifier id.ID\n\t\treq        *http.Request\n\t\tresp       *http.Response\n\t\ttunnels    map[string]*proto.Tunnel\n\t\terr        error\n\t\tok         bool\n\n\t\tinConnPool bool\n\t\tcerts      []*x509.Certificate\n\t)\n\n\ttlsConn, ok := conn.(*tls.Conn)\n\tif !ok {\n\t\tlogger.Log(\n\t\t\t\"level\", 0,\n\t\t\t\"msg\", \"invalid connection type\",\n\t\t\t\"err\", fmt.Errorf(\"expected TLS conn, got %T\", conn),\n\t\t)\n\t\tgoto reject\n\t}\n\n\tidentifier, err = id.PeerID(tlsConn)\n\tif err != nil {\n\t\tlogger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"msg\", \"certificate error\",\n\t\t\t\"err\", err,\n\t\t)\n\t\tgoto reject\n\t}\n\n\tlogger = logger.With(\"identifier\", identifier)\n\n\tcerts = tlsConn.ConnectionState().PeerCertificates\n\tif tlsConn.ConnectionState().VerifiedChains != nil && len(tlsConn.ConnectionState().VerifiedChains) > 0 {\n\t\tcerts = tlsConn.ConnectionState().VerifiedChains[0]\n\t}\n\tif s.config.AutoSubscribe {\n\t\ts.Subscribe(identifier)\n\t\tif s.config.SubscriptionListener != nil {\n\t\t\ts.config.SubscriptionListener.Subscribed(identifier, tlsConn, certs)\n\t\t}\n\t} else if !s.IsSubscribed(identifier) {\n\t\tif s.config.SubscriptionListener != nil && s.config.SubscriptionListener.CanSubscribe(identifier, certs) {\n\t\t\ts.Subscribe(identifier)\n\t\t\ts.config.SubscriptionListener.Subscribed(identifier, tlsConn, certs)\n\t\t} else {\n\t\t\tlogger.Log(\n\t\t\t\t\"level\", 2,\n\t\t\t\t\"msg\", \"unknown client\",\n\t\t\t)\n\t\t\tgoto reject\n\t\t}\n\t}\n\n\tif err = conn.SetDeadline(time.Time{}); err != nil {\n\t\tlogger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"msg\", \"setting infinite deadline failed\",\n\t\t\t\"err\", err,\n\t\t)\n\t\tgoto reject\n\t}\n\n\tif err := s.connPool.AddConn(conn, identifier); err != nil {\n\t\tlogger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"msg\", \"adding connection failed\",\n\t\t\t\"err\", err,\n\t\t)\n\t\tgoto reject\n\t}\n\tinConnPool = true\n\n\treq, err = http.NewRequest(http.MethodConnect, s.connPool.URL(identifier), nil)\n\tif err != nil {\n\t\tlogger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"msg\", \"handshake request creation failed\",\n\t\t\t\"err\", err,\n\t\t)\n\t\tgoto reject\n\t}\n\n\t{\n\t\tctx, cancel := context.WithTimeout(context.Background(), DefaultTimeout)\n\t\tdefer cancel()\n\t\treq = req.WithContext(ctx)\n\t}\n\n\tresp, err = s.httpClient.Do(req)\n\tif err != nil {\n\t\tlogger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"msg\", \"handshake failed\",\n\t\t\t\"err\", err,\n\t\t)\n\t\tgoto reject\n\t}\n\n\tif resp.StatusCode != http.StatusOK {\n\t\terr = fmt.Errorf(\"Status %s\", resp.Status)\n\t\tlogger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"msg\", \"handshake failed\",\n\t\t\t\"err\", err,\n\t\t)\n\t\tgoto reject\n\t}\n\n\tif resp.ContentLength == 0 {\n\t\terr = fmt.Errorf(\"Tunnels Content-Legth: 0\")\n\t\tlogger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"msg\", \"handshake failed\",\n\t\t\t\"err\", err,\n\t\t)\n\t\tgoto reject\n\t}\n\n\tif err = json.NewDecoder(&io.LimitedReader{R: resp.Body, N: 126976}).Decode(&tunnels); err != nil {\n\t\tlogger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"msg\", \"handshake failed\",\n\t\t\t\"err\", err,\n\t\t)\n\t\tgoto reject\n\t}\n\n\tif len(tunnels) == 0 {\n\t\terr = fmt.Errorf(\"No tunnels\")\n\t\tlogger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"msg\", \"handshake failed\",\n\t\t\t\"err\", err,\n\t\t)\n\t\tgoto reject\n\t}\n\n\tif err = s.addTunnels(tunnels, identifier); err != nil {\n\t\tlogger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"msg\", \"handshake failed\",\n\t\t\t\"err\", err,\n\t\t)\n\t\tgoto reject\n\t}\n\n\tlogger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"connected\",\n\t)\n\n\treturn\n\nreject:\n\tlogger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"rejected\",\n\t)\n\n\tif inConnPool {\n\t\ts.notifyError(err, identifier)\n\t\ts.connPool.DeleteConn(identifier)\n\t}\n\n\tconn.Close()\n}\n\n// notifyError tries to send error to client.\nfunc (s *Server) notifyError(serverError error, identifier id.ID) {\n\tif serverError == nil {\n\t\treturn\n\t}\n\n\treq, err := http.NewRequest(http.MethodConnect, s.connPool.URL(identifier), nil)\n\tif err != nil {\n\t\ts.logger.Log(\n\t\t\t\"level\", 2,\n\t\t\t\"action\", \"client error notification failed\",\n\t\t\t\"identifier\", identifier,\n\t\t\t\"err\", err,\n\t\t)\n\t\treturn\n\t}\n\n\treq.Header.Set(proto.HeaderError, serverError.Error())\n\n\tctx, cancel := context.WithTimeout(context.Background(), DefaultTimeout)\n\tdefer cancel()\n\n\ts.httpClient.Do(req.WithContext(ctx))\n}\n\n// addTunnels invokes addHost or addListener based on data from proto.Tunnel. If\n// a tunnel cannot be added whole batch is reverted.\nfunc (s *Server) addTunnels(tunnels map[string]*proto.Tunnel, identifier id.ID) error {\n\ti := &RegistryItem{\n\t\tHosts:     []*HostAuth{},\n\t\tListeners: []net.Listener{},\n\t}\n\n\tvar err error\n\tfor name, t := range tunnels {\n\t\tswitch t.Protocol {\n\t\tcase proto.HTTP:\n\t\t\ti.Hosts = append(i.Hosts, &HostAuth{t.Host, NewAuth(t.Auth)})\n\t\tcase proto.TCP, proto.TCP4, proto.TCP6, proto.UNIX:\n\t\t\tvar l net.Listener\n\t\t\tl, err = net.Listen(t.Protocol, t.Addr)\n\t\t\tif err != nil {\n\t\t\t\tgoto rollback\n\t\t\t}\n\n\t\t\ts.logger.Log(\n\t\t\t\t\"level\", 2,\n\t\t\t\t\"action\", \"open listener\",\n\t\t\t\t\"identifier\", identifier,\n\t\t\t\t\"addr\", l.Addr(),\n\t\t\t)\n\n\t\t\ti.Listeners = append(i.Listeners, l)\n\t\tcase proto.SNI:\n\t\t\tif s.vhostMuxer == nil {\n\t\t\t\terr = fmt.Errorf(\"unable to configure SNI for tunnel %s: %s\", name, t.Protocol)\n\t\t\t\tgoto rollback\n\t\t\t}\n\t\t\tvar l net.Listener\n\t\t\tl, err = s.vhostMuxer.Listen(t.Host)\n\t\t\tif err != nil {\n\t\t\t\tgoto rollback\n\t\t\t}\n\n\t\t\ts.logger.Log(\n\t\t\t\t\"level\", 2,\n\t\t\t\t\"action\", \"add SNI vhost\",\n\t\t\t\t\"identifier\", identifier,\n\t\t\t\t\"host\", t.Host,\n\t\t\t)\n\n\t\t\ti.Listeners = append(i.Listeners, l)\n\t\tdefault:\n\t\t\terr = fmt.Errorf(\"unsupported protocol for tunnel %s: %s\", name, t.Protocol)\n\t\t\tgoto rollback\n\t\t}\n\t}\n\n\terr = s.set(i, identifier)\n\tif err != nil {\n\t\tgoto rollback\n\t}\n\n\tfor _, l := range i.Listeners {\n\t\tgo s.listen(l, identifier)\n\t}\n\n\treturn nil\n\nrollback:\n\tfor _, l := range i.Listeners {\n\t\tl.Close()\n\t}\n\n\treturn err\n}\n\n// Unsubscribe removes client from registry, disconnects client if already\n// connected and returns it's RegistryItem.\nfunc (s *Server) Unsubscribe(identifier id.ID) *RegistryItem {\n\tif s.config.SubscriptionListener != nil {\n\t\ts.config.SubscriptionListener.Unsubscribed(identifier)\n\t}\n\ts.connPool.DeleteConn(identifier)\n\treturn s.registry.Unsubscribe(identifier)\n}\n\n// Ping measures the RTT response time.\nfunc (s *Server) Ping(identifier id.ID) (time.Duration, error) {\n\treturn s.connPool.Ping(identifier)\n}\n\nfunc (s *Server) listen(l net.Listener, identifier id.ID) {\n\taddr := l.Addr().String()\n\n\tfor {\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif strings.Contains(err.Error(), \"use of closed network connection\") ||\n\t\t\t\tstrings.Contains(err.Error(), \"Listener closed\") {\n\t\t\t\ts.logger.Log(\n\t\t\t\t\t\"level\", 2,\n\t\t\t\t\t\"action\", \"listener closed\",\n\t\t\t\t\t\"identifier\", identifier,\n\t\t\t\t\t\"addr\", addr,\n\t\t\t\t)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\ts.logger.Log(\n\t\t\t\t\"level\", 0,\n\t\t\t\t\"msg\", \"accept of connection failed\",\n\t\t\t\t\"identifier\", identifier,\n\t\t\t\t\"addr\", addr,\n\t\t\t\t\"err\", err,\n\t\t\t)\n\t\t\tcontinue\n\t\t}\n\n\t\tmsg := &proto.ControlMessage{\n\t\t\tAction:         proto.ActionProxy,\n\t\t\tForwardedProto: l.Addr().Network(),\n\t\t}\n\n\t\ttlsConn, ok := conn.(*vhost.TLSConn)\n\t\tif ok {\n\t\t\tmsg.ForwardedHost = tlsConn.Host()\n\t\t\terr = keepAlive(tlsConn.Conn)\n\n\t\t} else {\n\t\t\tmsg.ForwardedHost = l.Addr().String()\n\t\t\terr = keepAlive(conn)\n\t\t}\n\n\t\tif err != nil {\n\t\t\ts.logger.Log(\n\t\t\t\t\"level\", 1,\n\t\t\t\t\"msg\", \"TCP keepalive for tunneled connection failed\",\n\t\t\t\t\"identifier\", identifier,\n\t\t\t\t\"ctrlMsg\", msg,\n\t\t\t\t\"err\", err,\n\t\t\t)\n\t\t}\n\n\t\tgo func() {\n\t\t\tif err := s.proxyConn(identifier, conn, msg); err != nil {\n\t\t\t\ts.logger.Log(\n\t\t\t\t\t\"level\", 0,\n\t\t\t\t\t\"msg\", \"proxy error\",\n\t\t\t\t\t\"identifier\", identifier,\n\t\t\t\t\t\"ctrlMsg\", msg,\n\t\t\t\t\t\"err\", err,\n\t\t\t\t)\n\t\t\t}\n\t\t}()\n\t}\n}\n\nfunc (s *Server) Upgrade(identifier id.ID, conn net.Conn, requestBytes []byte) error {\n\n\tvar err error\n\n\tmsg := &proto.ControlMessage{\n\t\tAction:         proto.ActionProxy,\n\t\tForwardedProto: \"https\",\n\t}\n\n\ttlsConn, ok := conn.(*tls.Conn)\n\tif ok {\n\t\tmsg.ForwardedHost = tlsConn.ConnectionState().ServerName\n\t\terr = keepAlive(tlsConn.NetConn())\n\n\t} else {\n\t\tmsg.ForwardedHost = conn.RemoteAddr().String()\n\t\terr = keepAlive(conn)\n\t}\n\n\tif err != nil {\n\t\ts.logger.Log(\n\t\t\t\"level\", 1,\n\t\t\t\"msg\", \"TCP keepalive for tunneled connection failed\",\n\t\t\t\"identifier\", identifier,\n\t\t\t\"ctrlMsg\", msg,\n\t\t\t\"err\", err,\n\t\t)\n\t}\n\n\tgo func() {\n\t\tif err := s.proxyConnUpgraded(identifier, conn, msg, requestBytes); err != nil {\n\t\t\ts.logger.Log(\n\t\t\t\t\"level\", 0,\n\t\t\t\t\"msg\", \"proxy error\",\n\t\t\t\t\"identifier\", identifier,\n\t\t\t\t\"ctrlMsg\", msg,\n\t\t\t\t\"err\", err,\n\t\t\t)\n\t\t}\n\t}()\n\n\treturn nil\n}\n\n// ServeHTTP proxies http connection to the client.\nfunc (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tresp, err := s.RoundTrip(r)\n\tif err == errUnauthorised {\n\t\tw.Header().Set(\"WWW-Authenticate\", \"Basic realm=\\\"User Visible Realm\\\"\")\n\t\thttp.Error(w, err.Error(), http.StatusUnauthorized)\n\t\treturn\n\t}\n\tif err != nil {\n\t\ts.logger.Log(\n\t\t\t\"level\", 0,\n\t\t\t\"action\", \"round trip failed\",\n\t\t\t\"addr\", r.RemoteAddr,\n\t\t\t\"host\", r.Host,\n\t\t\t\"url\", r.URL,\n\t\t\t\"err\", err,\n\t\t)\n\n\t\thttp.Error(w, err.Error(), http.StatusBadGateway)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tcopyHeader(w.Header(), resp.Header)\n\tw.WriteHeader(resp.StatusCode)\n\n\ttransfer(w, resp.Body, log.NewContext(s.logger).With(\n\t\t\"dir\", \"client to user\",\n\t\t\"dst\", r.RemoteAddr,\n\t\t\"src\", r.Host,\n\t))\n}\n\n// RoundTrip is http.RoundTriper implementation.\nfunc (s *Server) RoundTrip(r *http.Request) (*http.Response, error) {\n\tidentifier, auth, ok := s.Subscriber(r.Host)\n\tif !ok {\n\t\treturn nil, errClientNotSubscribed\n\t}\n\n\toutr := r.WithContext(r.Context())\n\tif r.ContentLength == 0 {\n\t\toutr.Body = nil // Issue 16036: nil Body for http.Transport retries\n\t}\n\toutr.Header = cloneHeader(r.Header)\n\n\tif auth != nil {\n\t\tuser, password, _ := r.BasicAuth()\n\t\tif auth.User != user || auth.Password != password {\n\t\t\treturn nil, errUnauthorised\n\t\t}\n\t\toutr.Header.Del(\"Authorization\")\n\t}\n\n\tsetXForwardedFor(outr.Header, r.RemoteAddr)\n\n\tscheme := r.URL.Scheme\n\tif scheme == \"\" {\n\t\tif r.TLS != nil {\n\t\t\tscheme = proto.HTTPS\n\t\t} else {\n\t\t\tscheme = proto.HTTP\n\t\t}\n\t}\n\tif r.Header.Get(\"X-Forwarded-Host\") == \"\" {\n\t\toutr.Header.Set(\"X-Forwarded-Host\", r.Host)\n\t\toutr.Header.Set(\"X-Forwarded-Proto\", scheme)\n\t}\n\n\tmsg := &proto.ControlMessage{\n\t\tAction:         proto.ActionProxy,\n\t\tForwardedHost:  r.Host,\n\t\tForwardedProto: scheme,\n\t}\n\n\treturn s.proxyHTTP(identifier, outr, msg)\n}\n\nfunc (s *Server) proxyConnUpgraded(identifier id.ID, conn net.Conn, msg *proto.ControlMessage, requestBytes []byte) error {\n\ts.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"proxy conn\",\n\t\t\"identifier\", identifier,\n\t\t\"ctrlMsg\", msg,\n\t)\n\n\tdefer conn.Close()\n\n\tpr, pw := io.Pipe()\n\tdefer pr.Close()\n\tdefer pw.Close()\n\n\tcontinueChan := make(chan int)\n\n\tgo func() {\n\t\tpw.Write(requestBytes)\n\t\tcontinueChan <- 1\n\t}()\n\n\treq, err := s.connectRequest(identifier, msg, pr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tctx, cancel := context.WithCancel(context.Background())\n\treq = req.WithContext(ctx)\n\n\tdone := make(chan struct{})\n\tgo func() {\n\t\t<-continueChan\n\t\ttransfer(pw, conn, log.NewContext(s.logger).With(\n\t\t\t\"dir\", \"user to client\",\n\t\t\t\"dst\", identifier,\n\t\t\t\"src\", conn.RemoteAddr(),\n\t\t))\n\t\tcancel()\n\t\tclose(done)\n\t}()\n\n\tresp, err := s.httpClient.Do(req)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"io error: %s\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\ttransfer(conn, resp.Body, log.NewContext(s.logger).With(\n\t\t\"dir\", \"client to user\",\n\t\t\"dst\", conn.RemoteAddr(),\n\t\t\"src\", identifier,\n\t))\n\n\tselect {\n\tcase <-done:\n\tcase <-time.After(DefaultTimeout):\n\t}\n\n\ts.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"proxy conn done\",\n\t\t\"identifier\", identifier,\n\t\t\"ctrlMsg\", msg,\n\t)\n\n\treturn nil\n}\n\nfunc (s *Server) proxyConn(identifier id.ID, conn net.Conn, msg *proto.ControlMessage) error {\n\ts.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"proxy conn\",\n\t\t\"identifier\", identifier,\n\t\t\"ctrlMsg\", msg,\n\t)\n\n\tdefer conn.Close()\n\n\tpr, pw := io.Pipe()\n\tdefer pr.Close()\n\tdefer pw.Close()\n\n\treq, err := s.connectRequest(identifier, msg, pr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tctx, cancel := context.WithCancel(context.Background())\n\treq = req.WithContext(ctx)\n\n\tdone := make(chan struct{})\n\tgo func() {\n\t\ttransfer(pw, conn, log.NewContext(s.logger).With(\n\t\t\t\"dir\", \"user to client\",\n\t\t\t\"dst\", identifier,\n\t\t\t\"src\", conn.RemoteAddr(),\n\t\t))\n\t\tcancel()\n\t\tclose(done)\n\t}()\n\n\tresp, err := s.httpClient.Do(req)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"io error: %s\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\ttransfer(conn, resp.Body, log.NewContext(s.logger).With(\n\t\t\"dir\", \"client to user\",\n\t\t\"dst\", conn.RemoteAddr(),\n\t\t\"src\", identifier,\n\t))\n\n\tselect {\n\tcase <-done:\n\tcase <-time.After(DefaultTimeout):\n\t}\n\n\ts.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"proxy conn done\",\n\t\t\"identifier\", identifier,\n\t\t\"ctrlMsg\", msg,\n\t)\n\n\treturn nil\n}\n\nfunc (s *Server) proxyHTTP(identifier id.ID, r *http.Request, msg *proto.ControlMessage) (*http.Response, error) {\n\ts.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"proxy HTTP\",\n\t\t\"identifier\", identifier,\n\t\t\"ctrlMsg\", msg,\n\t)\n\n\tpr, pw := io.Pipe()\n\tdefer pr.Close()\n\tdefer pw.Close()\n\n\treq, err := s.connectRequest(identifier, msg, pr)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"proxy request error: %s\", err)\n\t}\n\n\tgo func() {\n\t\tcw := &countWriter{pw, 0}\n\t\terr := r.Write(cw)\n\t\tif err != nil {\n\t\t\ts.logger.Log(\n\t\t\t\t\"level\", 0,\n\t\t\t\t\"msg\", \"proxy error\",\n\t\t\t\t\"identifier\", identifier,\n\t\t\t\t\"ctrlMsg\", msg,\n\t\t\t\t\"err\", err,\n\t\t\t)\n\t\t}\n\n\t\ts.logger.Log(\n\t\t\t\"level\", 3,\n\t\t\t\"action\", \"transferred\",\n\t\t\t\"identifier\", identifier,\n\t\t\t\"bytes\", cw.count,\n\t\t\t\"dir\", \"user to client\",\n\t\t\t\"dst\", r.Host,\n\t\t\t\"src\", r.RemoteAddr,\n\t\t)\n\n\t\tif r.Body != nil {\n\t\t\tr.Body.Close()\n\t\t}\n\t}()\n\n\tresp, err := s.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"io error: %s\", err)\n\t}\n\n\ts.logger.Log(\n\t\t\"level\", 2,\n\t\t\"action\", \"proxy HTTP done\",\n\t\t\"identifier\", identifier,\n\t\t\"ctrlMsg\", msg,\n\t\t\"status code\", resp.StatusCode,\n\t)\n\n\treturn resp, nil\n}\n\n// connectRequest creates HTTP request to client with a given identifier having\n// control message and data input stream, output data stream results from\n// response the created request.\nfunc (s *Server) connectRequest(identifier id.ID, msg *proto.ControlMessage, r io.Reader) (*http.Request, error) {\n\treq, err := http.NewRequest(http.MethodPut, s.connPool.URL(identifier), r)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not create request: %s\", err)\n\t}\n\tmsg.WriteToHeader(req.Header)\n\n\treturn req, nil\n}\n\n// Addr returns network address clients connect to.\nfunc (s *Server) Addr() string {\n\tif s.listener == nil {\n\t\treturn \"\"\n\t}\n\treturn s.listener.Addr().String()\n}\n\n// Stop closes the server.\nfunc (s *Server) Stop() {\n\ts.logger.Log(\n\t\t\"level\", 1,\n\t\t\"action\", \"stop\",\n\t)\n\n\tif s.listener != nil {\n\t\ts.listener.Close()\n\t}\n}\n"
        },
        {
          "name": "tcpproxy.go",
          "type": "blob",
          "size": 3.0185546875,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/mmatczuk/go-http-tunnel/log\"\n\t\"github.com/mmatczuk/go-http-tunnel/proto\"\n)\n\n// TCPProxy forwards TCP streams.\ntype TCPProxy struct {\n\t// localAddr specifies default TCP address of the local server.\n\tlocalAddr string\n\t// localAddrMap specifies mapping from ControlMessage.ForwardedHost to\n\t// local server address, keys may contain host and port, only host or\n\t// only port. The order of precedence is the following\n\t// * host and port\n\t// * port\n\t// * host\n\tlocalAddrMap map[string]string\n\t// logger is the proxy logger.\n\tlogger log.Logger\n}\n\n// NewTCPProxy creates new direct TCPProxy, everything will be proxied to\n// localAddr.\nfunc NewTCPProxy(localAddr string, logger log.Logger) *TCPProxy {\n\tif logger == nil {\n\t\tlogger = log.NewNopLogger()\n\t}\n\n\treturn &TCPProxy{\n\t\tlocalAddr: localAddr,\n\t\tlogger:    logger,\n\t}\n}\n\n// NewMultiTCPProxy creates a new dispatching TCPProxy, connections may go to\n// different backends based on localAddrMap.\nfunc NewMultiTCPProxy(localAddrMap map[string]string, logger log.Logger) *TCPProxy {\n\tif logger == nil {\n\t\tlogger = log.NewNopLogger()\n\t}\n\n\treturn &TCPProxy{\n\t\tlocalAddrMap: localAddrMap,\n\t\tlogger:       logger,\n\t}\n}\n\n// Proxy is a ProxyFunc.\nfunc (p *TCPProxy) Proxy(w io.Writer, r io.ReadCloser, msg *proto.ControlMessage) {\n\tswitch msg.ForwardedProto {\n\tcase proto.TCP, proto.TCP4, proto.TCP6, proto.UNIX, proto.SNI:\n\t\t// ok\n\tdefault:\n\t\tp.logger.Log(\n\t\t\t\"level\", 0,\n\t\t\t\"msg\", \"unsupported protocol\",\n\t\t\t\"ctrlMsg\", msg,\n\t\t)\n\t\treturn\n\t}\n\n\ttarget := p.localAddrFor(msg.ForwardedHost)\n\tif target == \"\" {\n\t\tp.logger.Log(\n\t\t\t\"level\", 1,\n\t\t\t\"msg\", \"no target\",\n\t\t\t\"ctrlMsg\", msg,\n\t\t)\n\t\treturn\n\t}\n\n\tlocal, err := net.DialTimeout(\"tcp\", target, DefaultTimeout)\n\tif err != nil {\n\t\tp.logger.Log(\n\t\t\t\"level\", 0,\n\t\t\t\"msg\", \"dial failed\",\n\t\t\t\"target\", target,\n\t\t\t\"ctrlMsg\", msg,\n\t\t\t\"err\", err,\n\t\t)\n\t\treturn\n\t}\n\tdefer local.Close()\n\n\tif err := keepAlive(local); err != nil {\n\t\tp.logger.Log(\n\t\t\t\"level\", 1,\n\t\t\t\"msg\", \"TCP keepalive for tunneled connection failed\",\n\t\t\t\"target\", target,\n\t\t\t\"ctrlMsg\", msg,\n\t\t\t\"err\", err,\n\t\t)\n\t}\n\n\tdone := make(chan struct{})\n\tgo func() {\n\t\ttransfer(flushWriter{w}, local, log.NewContext(p.logger).With(\n\t\t\t\"dst\", msg.ForwardedHost,\n\t\t\t\"src\", target,\n\t\t))\n\t\tclose(done)\n\t}()\n\n\ttransfer(local, r, log.NewContext(p.logger).With(\n\t\t\"dst\", target,\n\t\t\"src\", msg.ForwardedHost,\n\t))\n\n\t<-done\n}\n\nfunc (p *TCPProxy) localAddrFor(hostPort string) string {\n\tif len(p.localAddrMap) == 0 {\n\t\treturn p.localAddr\n\t}\n\n\t// try hostPort\n\tif addr := p.localAddrMap[hostPort]; addr != \"\" {\n\t\treturn addr\n\t}\n\n\t// try port\n\thost, port, _ := net.SplitHostPort(hostPort)\n\tif addr := p.localAddrMap[port]; addr != \"\" {\n\t\treturn addr\n\t}\n\n\t// try 0.0.0.0:port\n\tif addr := p.localAddrMap[fmt.Sprintf(\"0.0.0.0:%s\", port)]; addr != \"\" {\n\t\treturn addr\n\t}\n\n\t// try host\n\tif addr := p.localAddrMap[host]; addr != \"\" {\n\t\treturn addr\n\t}\n\n\treturn p.localAddr\n}\n"
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "tunnel.go",
          "type": "blob",
          "size": 0.3603515625,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport \"time\"\n\nvar (\n\t// DefaultTimeout specifies a general purpose timeout.\n\tDefaultTimeout = 10 * time.Second\n\t// DefaultPingTimeout specifies a ping timeout.\n\tDefaultPingTimeout = 500 * time.Millisecond\n)\n"
        },
        {
          "name": "tunnelmock",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils.go",
          "type": "blob",
          "size": 1.6904296875,
          "content": "// Copyright (C) 2017 Michał Matczuk\n// Use of this source code is governed by an AGPL-style\n// license that can be found in the LICENSE file.\n\npackage tunnel\n\nimport (\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/mmatczuk/go-http-tunnel/log\"\n)\n\nfunc transfer(dst io.Writer, src io.Reader, logger log.Logger) {\n\tn, err := io.Copy(dst, src)\n\tif err != nil {\n\t\tif !strings.Contains(err.Error(), \"context canceled\") && !strings.Contains(err.Error(), \"CANCEL\") {\n\t\t\tlogger.Log(\n\t\t\t\t\"level\", 2,\n\t\t\t\t\"msg\", \"copy error\",\n\t\t\t\t\"err\", err,\n\t\t\t)\n\t\t}\n\t}\n\n\tlogger.Log(\n\t\t\"level\", 3,\n\t\t\"action\", \"transferred\",\n\t\t\"bytes\", n,\n\t)\n}\n\nfunc setXForwardedFor(h http.Header, remoteAddr string) {\n\tclientIP, _, err := net.SplitHostPort(remoteAddr)\n\tif err == nil {\n\t\t// If we aren't the first proxy retain prior\n\t\t// X-Forwarded-For information as a comma+space\n\t\t// separated list and fold multiple headers into one.\n\t\tif prior, ok := h[\"X-Forwarded-For\"]; ok {\n\t\t\tclientIP = strings.Join(prior, \", \") + \", \" + clientIP\n\t\t}\n\t\th.Set(\"X-Forwarded-For\", clientIP)\n\t}\n}\n\nfunc cloneHeader(h http.Header) http.Header {\n\th2 := make(http.Header, len(h))\n\tfor k, vv := range h {\n\t\tvv2 := make([]string, len(vv))\n\t\tcopy(vv2, vv)\n\t\th2[k] = vv2\n\t}\n\treturn h2\n}\n\nfunc copyHeader(dst, src http.Header) {\n\tfor k, v := range src {\n\t\tvv := make([]string, len(v))\n\t\tcopy(vv, v)\n\t\tdst[k] = vv\n\t}\n}\n\ntype countWriter struct {\n\tw     io.Writer\n\tcount int64\n}\n\nfunc (cw *countWriter) Write(p []byte) (n int, err error) {\n\tn, err = cw.w.Write(p)\n\tcw.count += int64(n)\n\treturn\n}\n\ntype flushWriter struct {\n\tw io.Writer\n}\n\nfunc (fw flushWriter) Write(p []byte) (n int, err error) {\n\tn, err = fw.w.Write(p)\n\tif f, ok := fw.w.(http.Flusher); ok {\n\t\tf.Flush()\n\t}\n\treturn\n}\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}