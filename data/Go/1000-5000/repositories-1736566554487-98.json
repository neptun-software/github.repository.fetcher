{
  "metadata": {
    "timestamp": 1736566554487,
    "page": 98,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gopl-zh/gopl-zh.github.com",
      "stars": 4585,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0244140625,
          "content": "*.c linguist-language=Go\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "/_book\n/book\n\n*.out*\n_zz*\n"
        },
        {
          "name": ".nojekyll",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 0.765625,
          "content": "# 贡献者\r\n\r\n译者                                   | 章节\r\n-------------------------------------- | -------------------------\r\n`chai2010     <chaishushan@gmail.com>` | 前言/第2~4章/第10~13章\r\n`Xargin       <cao1988228@163.com>`    | 第1章/第6章/第8~9章\r\n`CrazySssst`                           | 第5章\r\n`foreversmart <njutree@gmail.com>`     | 第7章\r\n\r\n# 译文授权\r\n\r\n除特别注明外，本站内容均采用[知识共享-署名(CC-BY) 3.0协议](http://creativecommons.org/licenses/by/3.0/)授权，代码遵循[Go项目的BSD协议](http://golang.org/LICENSE)授权。\r\n\r\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"./images/by-nc-sa-4.0-88x31.png\"></img></a>\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4423828125,
          "content": "Copyright (c) 2015 Golang-China. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.353515625,
          "content": "# Copyright 2015 Golang-China. All rights reserved.\r\n# Use of this source code is governed by a BSD-style\r\n# license that can be found in the LICENSE file.\r\n\r\n#\r\n# WaBook: Mini Markdown Book\r\n# https://github.com/wa-lang/wabook\r\n#\r\n\r\ndefault:\r\n\twabook serve\r\n\r\nbuild:\r\n\t-rm book\r\n\twabook build\r\n\t-rm book/.gitignore\r\n\t-rm -rf book/.git\r\n\r\nclean:\r\n\t-rm -rf book\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.619140625,
          "content": "# Go语言圣经（中文版）\r\n\r\n- *凹语言(专为 WebAssembly 设计): https://github.com/wa-lang/wa*\r\n- *WaBook(Go语言实现的MD电子书构建工具): https://github.com/wa-lang/wabook*\r\n\r\n----\r\n\r\nGo语言圣经 [《The Go Programming Language》](http://gopl.io) 中文版本，仅供学习交流之用。对于希望学习CGO、Go汇编语言等高级用法的同学，我们推荐[《Go语言高级编程》](https://github.com/chai2010/advanced-go-programming-book)开源图书。如果希望深入学习Go语言语法树结构，可以参考[《Go语法树入门——开启自制编程语言和编译器之旅》](https://github.com/chai2010/go-ast-book)。如果想从头实现一个玩具Go语言可以参考[《从头实现µGo语言》](https://github.com/wa-lang/ugo-compiler-book)（µGo 是 [凹语言](https://wa-lang.org/) 阶段的产物）。\r\n\r\n\r\n![](cover.jpg)\r\n\r\n- 在线阅读：[https://gopl-zh.github.io](https://gopl-zh.github.io)\r\n- 在线阅读：[https://golang-china.github.io/gopl-zh](https://golang-china.github.io/gopl-zh)\r\n- 项目主页：[https://github.com/gopl-zh](https://github.com/gopl-zh)\r\n- 项目主页(旧)：[http://github.com/golang-china/gopl-zh](http://github.com/golang-china/gopl-zh)\r\n- 原版官网：[http://gopl.io](http://gopl.io)\r\n\r\n\r\n译者信息：\r\n\r\n- 译者：柴树杉，Github [@chai2010](https://github.com/chai2010)，Twitter [@chaishushan](https://twitter.com/chaishushan)\r\n- 译者：Xargin, [https://github.com/cch123](https://github.com/cch123)\r\n- 译者：CrazySssst, [https://github.com/CrazySssst](https://github.com/CrazySssst)\r\n- 译者：foreversmart, [https://github.com/foreversmart](https://github.com/foreversmart) <njutree@gmail.com>\r\n\r\nGo 语言中国：\r\n\r\n- Go 语言中国：[https://github.com/golang-china](https://github.com/golang-china)\r\n- Go 语言中国论坛：[https://github.com/golang-china/main.go/discussions](https://github.com/golang-china/main.go/discussions)\r\n\r\n\r\n## 关注微信公众号\r\n\r\n<table>\r\n<tr>\r\n<td>\r\n<img width=\"222px\"  src=\"https://github.com/chai2010/advanced-go-programming-book/raw/master/css.png\">\r\n</td>\r\n<td>\r\n<img width=\"222px\"  src=\"https://github.com/chai2010/advanced-go-programming-book/raw/master/cch.png\">\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n\r\n**注意，在线预览不是最新版，最新以仓库里的内容为准**\r\n\r\n# 版权声明\r\n\r\n[Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-nc-sa/4.0/)。\r\n\r\n![Creative Commons License](./images/by-nc-sa-4.0-88x31.png)\r\n\r\n\r\n严禁任何商业行为使用或引用该文档的全部或部分内容！\r\n\r\n欢迎大家提供建议！\r\n"
        },
        {
          "name": "SUMMARY.md",
          "type": "blob",
          "size": 4.552734375,
          "content": "# Summary\n\n[Go语言圣经](index.md)\n[译者序](preface-zh.md)\n[前言](preface.md)\n\n* [入门](ch1/ch1.md)\n  * [Hello, World](ch1/ch1-01.md)\n  * [命令行参数](ch1/ch1-02.md)\n  * [查找重复的行](ch1/ch1-03.md)\n  * [GIF动画](ch1/ch1-04.md)\n  * [获取URL](ch1/ch1-05.md)\n  * [并发获取多个URL](ch1/ch1-06.md)\n  * [Web服务](ch1/ch1-07.md)\n  * [本章要点](ch1/ch1-08.md)\n* [程序结构](ch2/ch2.md)\n  * [命名](ch2/ch2-01.md)\n  * [声明](ch2/ch2-02.md)\n  * [变量](ch2/ch2-03.md)\n  * [赋值](ch2/ch2-04.md)\n  * [类型](ch2/ch2-05.md)\n  * [包和文件](ch2/ch2-06.md)\n  * [作用域](ch2/ch2-07.md)\n* [基础数据类型](ch3/ch3.md)\n  * [整型](ch3/ch3-01.md)\n  * [浮点数](ch3/ch3-02.md)\n  * [复数](ch3/ch3-03.md)\n  * [布尔型](ch3/ch3-04.md)\n  * [字符串](ch3/ch3-05.md)\n  * [常量](ch3/ch3-06.md)\n* [复合数据类型](ch4/ch4.md)\n  * [数组](ch4/ch4-01.md)\n  * [Slice](ch4/ch4-02.md)\n  * [Map](ch4/ch4-03.md)\n  * [结构体](ch4/ch4-04.md)\n  * [JSON](ch4/ch4-05.md)\n  * [文本和HTML模板](ch4/ch4-06.md)\n* [函数](ch5/ch5.md)\n  * [函数声明](ch5/ch5-01.md)\n  * [递归](ch5/ch5-02.md)\n  * [多返回值](ch5/ch5-03.md)\n  * [错误](ch5/ch5-04.md)\n  * [函数值](ch5/ch5-05.md)\n  * [匿名函数](ch5/ch5-06.md)\n  * [可变参数](ch5/ch5-07.md)\n  * [Deferred函数](ch5/ch5-08.md)\n  * [Panic异常](ch5/ch5-09.md)\n  * [Recover捕获异常](ch5/ch5-10.md)\n* [方法](ch6/ch6.md)\n  * [方法声明](ch6/ch6-01.md)\n  * [基于指针对象的方法](ch6/ch6-02.md)\n  * [通过嵌入结构体来扩展类型](ch6/ch6-03.md)\n  * [方法值和方法表达式](ch6/ch6-04.md)\n  * [示例: Bit数组](ch6/ch6-05.md)\n  * [封装](ch6/ch6-06.md)\n* [接口](ch7/ch7.md)\n  * [接口是合约](ch7/ch7-01.md)\n  * [接口类型](ch7/ch7-02.md)\n  * [实现接口的条件](ch7/ch7-03.md)\n  * [flag.Value接口](ch7/ch7-04.md)\n  * [接口值](ch7/ch7-05.md)\n  * [sort.Interface接口](ch7/ch7-06.md)\n  * [http.Handler接口](ch7/ch7-07.md)\n  * [error接口](ch7/ch7-08.md)\n  * [示例: 表达式求值](ch7/ch7-09.md)\n  * [类型断言](ch7/ch7-10.md)\n  * [基于类型断言识别错误类型](ch7/ch7-11.md)\n  * [通过类型断言查询接口](ch7/ch7-12.md)\n  * [类型分支](ch7/ch7-13.md)\n  * [示例: 基于标记的XML解码](ch7/ch7-14.md)\n  * [补充几点](ch7/ch7-15.md)\n* [Goroutines和Channels](ch8/ch8.md)\n  * [Goroutines](ch8/ch8-01.md)\n  * [示例: 并发的Clock服务](ch8/ch8-02.md)\n  * [示例: 并发的Echo服务](ch8/ch8-03.md)\n  * [Channels](ch8/ch8-04.md)\n  * [并发的循环](ch8/ch8-05.md)\n  * [示例: 并发的Web爬虫](ch8/ch8-06.md)\n  * [基于select的多路复用](ch8/ch8-07.md)\n  * [示例: 并发的目录遍历](ch8/ch8-08.md)\n  * [并发的退出](ch8/ch8-09.md)\n  * [示例: 聊天服务](ch8/ch8-10.md)\n* [基于共享变量的并发](ch9/ch9.md)\n  * [竞争条件](ch9/ch9-01.md)\n  * [sync.Mutex互斥锁](ch9/ch9-02.md)\n  * [sync.RWMutex读写锁](ch9/ch9-03.md)\n  * [内存同步](ch9/ch9-04.md)\n  * [sync.Once惰性初始化](ch9/ch9-05.md)\n  * [竞争条件检测](ch9/ch9-06.md)\n  * [示例: 并发的非阻塞缓存](ch9/ch9-07.md)\n  * [Goroutines和线程](ch9/ch9-08.md)\n* [包和工具](ch10/ch10.md)\n  * [包简介](ch10/ch10-01.md)\n  * [导入路径](ch10/ch10-02.md)\n  * [包声明](ch10/ch10-03.md)\n  * [导入声明](ch10/ch10-04.md)\n  * [包的匿名导入](ch10/ch10-05.md)\n  * [包和命名](ch10/ch10-06.md)\n  * [工具](ch10/ch10-07.md)\n* [测试](ch11/ch11.md)\n  * [go test](ch11/ch11-01.md)\n  * [测试函数](ch11/ch11-02.md)\n  * [测试覆盖率](ch11/ch11-03.md)\n  * [基准测试](ch11/ch11-04.md)\n  * [剖析](ch11/ch11-05.md)\n  * [示例函数](ch11/ch11-06.md)\n* [反射](ch12/ch12.md)\n  * [为何需要反射?](ch12/ch12-01.md)\n  * [reflect.Type和reflect.Value](ch12/ch12-02.md)\n  * [Display递归打印](ch12/ch12-03.md)\n  * [示例: 编码S表达式](ch12/ch12-04.md)\n  * [通过reflect.Value修改值](ch12/ch12-05.md)\n  * [示例: 解码S表达式](ch12/ch12-06.md)\n  * [获取结构体字段标签](ch12/ch12-07.md)\n  * [显示一个类型的方法集](ch12/ch12-08.md)\n  * [几点忠告](ch12/ch12-09.md)\n* [底层编程](ch13/ch13.md)\n  * [unsafe.Sizeof, Alignof 和 Offsetof](ch13/ch13-01.md)\n  * [unsafe.Pointer](ch13/ch13-02.md)\n  * [示例: 深度相等判断](ch13/ch13-03.md)\n  * [通过cgo调用C代码](ch13/ch13-04.md)\n  * [几点忠告](ch13/ch13-05.md)\n* [附录](appendix/appendix.md)\n  * [附录A：原文勘误](appendix/appendix-a-errata.md)\n  * [附录B：作者译者](appendix/appendix-b-author.md)\n  * [附录C：译文授权](appendix/appendix-c-cpoyright.md)\n  * [附录D：其它语言](appendix/appendix-d-translations.md)\n"
        },
        {
          "name": "appendix",
          "type": "tree",
          "content": null
        },
        {
          "name": "book.ini",
          "type": "blob",
          "size": 1.3681640625,
          "content": "# https://giscus.app\n# https://github.com/badboy/mdbook-mermaid\n\n[book]\ntitle = \"Go语言圣经\"\nauthors = [\"译者:\", \"chai2010\", \"Xargin\", \"CrazySssst\", \"foreversmart\"]\ndescription = \"<The Go Programming Language>中文版\"\nlanguage = \"zh\"\nmultilingual = false\nsrc = \".\"\n\n[build]\nbuild-dir = \"book\"\n\n[custom]\ncontent_header = \"<ul dir=\\\"auto\\\"><li><em>凹语言(Go实现, 面向WASM设计): <a href=\\\"https://github.com/wa-lang/wa\\\">https://github.com/wa-lang/wa</a></em></li><li><em>WaBook(Go语言实现的MD电子书构建工具): <a href=\\\"https://github.com/wa-lang/wabook\\\">https://github.com/wa-lang/wabook</a></em></li></ul><hr>\"\ncontent_footer = \"<hr><table><tr><td><img width=\\\"222px\\\" src=\\\"https://chai2010.cn/advanced-go-programming-book/css.png\\\"></td><td><img width=\\\"222px\\\" src=\\\"https://chai2010.cn/advanced-go-programming-book/cch.png\\\"></td></tr></table>\"\npage_footer = \"<span>© 2015-2016 | <a href=\\\"https://github.com/gopl-zh\\\"> Go语言圣经中文版</a>, 仅学习交流使用</span>\"\n\n[giscus]\nenaled = true\ndata_repo = \"gopl-zh/gopl-zh.github.com\"\ndata_repo_id = \"MDEwOlJlcG9zaXRvcnk2MTUzMTQ2Mw==\"\ndata_category = \"General\"\ndata_category_id = \"DIC_kwDOA6rlR84CQnJW\"\n\n[output.html]\ngit-repository-url = \"https://github.com/gopl-zh/gopl-zh.github.com\"\nedit-url-template = \"https://github.com/gopl-zh/gopl-zh.github.com/edit/master/{path}\"\ngit-repository-icon = \"fa-github\"\n"
        },
        {
          "name": "cch.png",
          "type": "blob",
          "size": 80.998046875,
          "content": null
        },
        {
          "name": "ch1",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch10",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch11",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch12",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch13",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch2",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch3",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch4",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch5",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch6",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch7",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch8",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch9",
          "type": "tree",
          "content": null
        },
        {
          "name": "cover.jpg",
          "type": "blob",
          "size": 108.265625,
          "content": null
        },
        {
          "name": "cover_bgd.png",
          "type": "blob",
          "size": 185.8388671875,
          "content": null
        },
        {
          "name": "cover_patch.png",
          "type": "blob",
          "size": 62.126953125,
          "content": null
        },
        {
          "name": "css.png",
          "type": "blob",
          "size": 81.3212890625,
          "content": null
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 0.423828125,
          "content": "// Copyright 2015 Golang-China. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n//\n// Go圣经中文版.\n//\n// 在线版本: http://golang-china.github.io/gopl-zh\n//\n// 离线版本: http://github.com/golang-china/gopl-zh/archive/gh-pages.zip\n//\n// 项目主页: http://github.com/golang-china/gopl-zh\n//\n// 原版官网: http://gopl.io\n//\npackage gopl_zh\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.052734375,
          "content": "module github.com/gopl-zh/gopl-zh.github.com\n\ngo 1.18\n"
        },
        {
          "name": "gopl-zh-qrcode.png",
          "type": "blob",
          "size": 2.09375,
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.md",
          "type": "blob",
          "size": 1.7548828125,
          "content": "# Go语言圣经（中文版）\r\n\r\nGo语言圣经 [《The Go Programming Language》](http://gopl.io) 中文版本，仅供学习交流之用。对于希望学习CGO、Go汇编语言等高级用法的同学，我们推荐[《Go语言高级编程》](https://github.com/chai2010/advanced-go-programming-book)开源图书。如果希望深入学习Go语言语法树结构，可以参考[《Go语法树入门——开启自制编程语言和编译器之旅》](https://github.com/chai2010/go-ast-book)。如果想从头实现一个玩具Go语言可以参考[《从头实现µGo语言》](https://github.com/wa-lang/ugo-compiler-book)（µGo 是 [凹语言](https://wa-lang.org/) 阶段的产物）。\r\n\r\n![](cover.jpg)\r\n\r\n- 在线阅读：[https://gopl-zh.github.io](https://gopl-zh.github.io)\r\n- 在线阅读：[https://golang-china.github.io/gopl-zh](https://golang-china.github.io/gopl-zh)\r\n- 项目主页：[https://github.com/gopl-zh](https://github.com/gopl-zh)\r\n- 项目主页(旧)：[http://github.com/golang-china/gopl-zh](http://github.com/golang-china/gopl-zh)\r\n- 原版官网：[http://gopl.io](http://gopl.io)\r\n\r\n\r\n译者信息：\r\n\r\n- 译者：柴树杉，Github [@chai2010](https://github.com/chai2010)，Twitter [@chaishushan](https://twitter.com/chaishushan)\r\n- 译者：Xargin, [https://github.com/cch123](https://github.com/cch123)\r\n- 译者：CrazySssst, [https://github.com/CrazySssst](https://github.com/CrazySssst)\r\n- 译者：foreversmart, [https://github.com/foreversmart](https://github.com/foreversmart) <njutree@gmail.com>\r\n\r\nGo 语言中国：\r\n\r\n- Go 语言中国：[https://github.com/golang-china](https://github.com/golang-china)\r\n- Go 语言中国论坛：[https://github.com/golang-china/main.go/discussions](https://github.com/golang-china/main.go/discussions)\r\n\r\n"
        },
        {
          "name": "links.md",
          "type": "blob",
          "size": 2.3876953125,
          "content": "<!-- 链接文件，用于被其它md文件包含 -->\n\n<!-- 人名 -->\n[AlanDonovan]:      https://github.com/adonovan\n[BrianKernighan]:   http://www.cs.princeton.edu/~bwk/\n[DennisRitchie]:    http://genius.cat-v.org/dennis-ritchie/\n[RobertGriesemer]:  http://research.google.com/pubs/author96.html\n[RobPike]:          http://genius.cat-v.org/rob-pike/\",\n[KenThompson]:      http://genius.cat-v.org/ken-thompson/\n[RussCox]:          http://research.swtch.com/\n[NiklausWirth]:     https://en.wikipedia.org/wiki/Niklaus_Wirth\n[TonyHoare]:        https://en.wikipedia.org/wiki/Tony_Hoare\n[FredBrooks]:       http://www.cs.unc.edu/~brooks/\n\n<!-- 图书 -->\n[gopl]:                     http://gopl.io\n[tcpl]:                     http://s3-us-west-2.amazonaws.com/belllabs-microsite-dritchie/cbook/index.html\n[TheCProgrammingLanguage]:  http://s3-us-west-2.amazonaws.com/belllabs-microsite-dritchie/cbook/index.html\n[ThePracticeOfProgramming]: https://en.wikipedia.org/wiki/The_Practice_of_Programming\n\n<!-- Go语言 -->\n[Golang]:                 https://golang.org/\n[Golang-oracle]:          https://godoc.org/golang.org/x/tools/oracle\n[Golang-godoc-analysis]:  https://godoc.org/golang.org/x/tools/cmd/godoc\n[Golang-gorename]:        https://godoc.org/golang.org/x/tools/cmd/gorename\n\n<!-- 其他语言 -->\n[Alef]:      http://doc.cat-v.org/plan_9/2nd_edition/papers/alef/\n[APL]:       https://en.wikipedia.org/wiki/APL_(programming_language)\n[Limbo]:     http://doc.cat-v.org/inferno/4th_edition/limbo_language/\n[Modula-2]:  https://en.wikipedia.org/wiki/Modula-2\n[Newsqueak]: http://doc.cat-v.org/bell_labs/squeak/\n[Oberon]:    https://en.wikipedia.org/wiki/Oberon_(programming_language)\n[Oberon-2]:  https://en.wikipedia.org/wiki/Oberon-2_(programming_language)\n[Pascal]:    https://en.wikipedia.org/wiki/Pascal_(programming_language)\n[Scheme]:    https://en.wikipedia.org/wiki/Scheme_(programming_language)\n[Squeak]:    http://doc.cat-v.org/bell_labs/squeak/\n\n<!-- 系统 -->\n[UNIX]:     http://doc.cat-v.org/unix/\n[Linux]:    http://www.linux.org/\n[FreeBSD]:  https://www.freebsd.org/\n[OpenBSD]:  http://www.openbsd.org/\n[MacOSX]:   http://www.apple.com/cn/osx/\n[Plan9]:    http://plan9.bell-labs.com/plan9/\n[Windows]:  https://www.microsoft.com/zh-cn/windows/\n\n<!-- 其他 -->\n[BellLabs]: http://www.cs.bell-labs.com/\n[CSP]:      https://en.wikipedia.org/wiki/Communicating_sequential_processes\n[KR]:       https://en.wikipedia.org/wiki/K%26R\n"
        },
        {
          "name": "preface-zh.md",
          "type": "blob",
          "size": 5.7314453125,
          "content": "# 译者序\n\n在上个世纪70年代，贝尔实验室的 [Ken Thompson](http://genius.cat-v.org/ken-thompson/) 和 [Dennis M. Ritchie](http://genius.cat-v.org/dennis-ritchie/) 合作发明了 [UNIX](http://doc.cat-v.org/unix/) 操作系统，同时 [Dennis M. Ritchie](http://genius.cat-v.org/dennis-ritchie/) 为了解决 [UNIX](http://doc.cat-v.org/unix/) 系统的移植性问题而发明了 C 语言，贝尔实验室的 [UNIX](http://doc.cat-v.org/unix/) 和 C 语言两大发明奠定了整个现代IT行业最重要的软件基础（目前的三大桌面操作系统的中[Linux](http://www.linux.org/)和[Mac OS X](http://www.apple.com/cn/osx/)都是源于 [UNIX](http://doc.cat-v.org/unix/) 系统，两大移动平台的操作系统 iOS 和 Android 也都是源于 [UNIX](http://doc.cat-v.org/unix/) 系统。C 系家族的编程语言占据统治地位达几十年之久）。在 [UNIX](http://doc.cat-v.org/unix/) 和 C 语言发明40年之后，目前已经在 Google 工作的 [Ken Thompson](http://genius.cat-v.org/ken-thompson/) 和 [Rob Pike](http://genius.cat-v.org/rob-pike/)（他们在贝尔实验室时就是同事）、还有[Robert Griesemer](http://research.google.com/pubs/author96.html)（设计了 V8 引擎和 HotSpot 虚拟机）一起合作，为了解决在21世纪多核和网络化环境下越来越复杂的编程问题而发明了 Go 语言。从 Go 语言库早期代码库日志可以看出它的演化历程（ Git 用 `git log --before={2008-03-03} --reverse` 命令查看）：\n\n![](./images/go-log04.png)\n\n从早期提交日志中也可以看出，Go 语言是从 [Ken Thompson](http://genius.cat-v.org/ken-thompson/) 发明的 B 语言、[Dennis M. Ritchie](http://genius.cat-v.org/dennis-ritchie/) 发明的 C 语言逐步演化过来的，是 C 语言家族的成员，因此很多人将 Go 语言称为 21 世纪的 C 语言。纵观这几年来的发展趋势，Go 语言已经成为云计算、云存储时代最重要的基础编程语言。\n\n在 C 语言发明之后约5年的时间之后（1978年），[Brian W. Kernighan](http://www.cs.princeton.edu/~bwk/) 和 [Dennis M. Ritchie](http://genius.cat-v.org/dennis-ritchie/) 合作编写出版了C语言方面的经典教材《[The C Programming Language](http://s3-us-west-2.amazonaws.com/belllabs-microsite-dritchie/cbook/index.html)》，该书被誉为 C 语言程序员的圣经，作者也被大家亲切地称为 [K&R](https://en.wikipedia.org/wiki/K%26R)。同样在 Go 语言正式发布（2009 年）约 5 年之后（2014 年开始写作，2015 年出版），由 Go 语言核心团队成员 [Alan A. A. Donovan](https://github.com/adonovan) 和 [K&R](https://en.wikipedia.org/wiki/K%26R) 中的 [Brian W. Kernighan](http://www.cs.princeton.edu/~bwk/) 合作编写了Go语言方面的经典教材《[The Go Programming Language](http://gopl.io)》。Go 语言被誉为 21 世纪的 C 语言，如果说 [K&R](https://en.wikipedia.org/wiki/K%26R) 所著的是圣经的旧约，那么 D&K 所著的必将成为圣经的新约。该书介绍了 Go 语言几乎全部特性，并且随着语言的深入层层递进，对每个细节都解读得非常细致，每一节内容都精彩不容错过，是广大 Gopher 的必读书目。大部分 Go 语言核心团队的成员都参与了该书校对工作，因此该书的质量是可以完全放心的。\n\n同时，单凭阅读和学习其语法结构并不能真正地掌握一门编程语言，必须进行足够多的编程实践——亲自编写一些程序并研究学习别人写的程序。要从利用 Go 语言良好的特性使得程序模块化，充分利用 Go 的标准函数库以 Go 语言自己的风格来编写程序。书中包含了上百个精心挑选的习题，希望大家能先用自己的方式尝试完成习题，然后再参考官方给出的解决方案。\n\n该书英文版约从 2015 年 10 月开始公开发售，其中日文版本最早参与翻译和审校（参考致谢部分）。在 2015 年 10 月，我们并不知道中文版是否会及时引进、将由哪家出版社引进、引进将由何人来翻译、何时能出版，这些信息都成了一个秘密。中国的 Go 语言社区是全球最大的Go语言社区，我们从一开始就始终紧跟着 Go 语言的发展脚步。我们应该也完全有能力以中国 Go 语言社区的力量同步完成 Go 语言圣经中文版的翻译工作。与此同时，国内有很多 Go 语言爱好者也在积极关注该书（本人也在第一时间购买了纸质版本，[亚马逊价格314人民币](http://www.amazon.cn/The-Go-Programming-Language-Donovan-Alan-A-A/dp/0134190440/)。补充：国内也即将出版英文版，[价格79元](http://product.china-pub.com/4912464)）。为了 Go 语言的学习和交流，大家决定合作免费翻译该书。\n\n翻译工作从 2015 年 11 月 20 日前后开始，到 2016 年 1 月底初步完成，前后历时约 2 个月时间（在其它语言版本中，全球第一个完成翻译的，基本做到和原版同步）。其中，[chai2010](https://github.com/chai2010) 翻译了前言、第2 ~ 4章、第10 ~ 13章，[Xargin](https://github.com/cch123) 翻译了第1章、第6章、第8 ~ 9章，[CrazySssst](https://github.com/CrazySssst) 翻译了第5章，[foreversmart](https://github.com/foreversmart) 翻译了第7章，大家共同参与了基本的校验工作，还有其他一些朋友提供了积极的反馈建议。如果大家还有任何问题或建议，可以直接到中文版项目页面提交 [Issue](https://github.com/golang-china/gopl-zh/issues)，如果发现英文版原文在[勘误](http://www.gopl.io/errata.html)中未提到的任何错误，可以直接去[英文版项目](https://github.com/adonovan/gopl.io/)提交。\n\n最后，希望这本书能够帮助大家用Go语言快乐地编程。\n\n2016年 1月 于 武汉\n"
        },
        {
          "name": "preface.md",
          "type": "blob",
          "size": 15.681640625,
          "content": "# 前言\r\n\r\n## Go语言起源\r\n\r\n编程语言的演化跟生物物种的演化类似，一个成功的编程语言的后代一般都会继承它们祖先的优点；当然有时多种语言杂合也可能会产生令人惊讶的特性；还有一些激进的新特性可能并没有先例。通过观察这些影响，我们可以学到为什么一门语言是这样子的，它已经适应了怎样的环境。\r\n\r\n下图展示了有哪些早期的编程语言对Go语言的设计产生了重要影响。\r\n\r\n![](./images/ch0-01.png)\r\n\r\nGo语言有时候被描述为“类C语言”，或者是“21世纪的C语言”。Go从C语言继承了相似的表达式语法、控制流结构、基础数据类型、调用参数传值、指针等很多思想，还有C语言一直所看中的编译后机器码的运行效率以及和现有操作系统的无缝适配。\r\n\r\n但是在Go语言的家族树中还有其它的祖先。其中一个有影响力的分支来自[Niklaus Wirth](https://en.wikipedia.org/wiki/Niklaus_Wirth)所设计的`Pascal`语言。然后`Modula-2`语言激发了包的概念。然后`Oberon`语言摒弃了模块接口文件和模块实现文件之间的区别。第二代的`Oberon-2`语言直接影响了包的导入和声明的语法，还有`Oberon`语言的面向对象特性所提供的方法的声明语法等。\r\n\r\nGo语言的另一支祖先，带来了Go语言区别其他语言的重要特性，灵感来自于贝尔实验室的[Tony Hoare](https://en.wikipedia.org/wiki/Tony_Hoare)于1978年发表的鲜为外界所知的关于并发研究的基础文献 *顺序通信进程* （ *communicating sequential processes* ，缩写为`CSP`。在`CSP`中，程序是一组中间没有共享状态的平行运行的处理过程，它们之间使用管道进行通信和控制同步。不过[Tony Hoare](https://en.wikipedia.org/wiki/Tony_Hoare)的`CSP`只是一个用于描述并发性基本概念的描述语言，并不是一个可以编写可执行程序的通用编程语言。\r\n\r\n接下来，Rob Pike和其他人开始不断尝试将[CSP](https://en.wikipedia.org/wiki/Communicating_sequential_processes)引入实际的编程语言中。他们第一次尝试引入[CSP](https://en.wikipedia.org/wiki/Communicating_sequential_processes)特性的编程语言叫[Squeak](http://doc.cat-v.org/bell_labs/squeak/)（老鼠间交流的语言），是一个提供鼠标和键盘事件处理的编程语言，它的管道是静态创建的。然后是改进版的[Newsqueak](http://doc.cat-v.org/bell_labs/squeak/)语言，提供了类似`C`语言语句和表达式的语法和类似`Pascal`语言的推导语法。`Newsqueak`是一个带垃圾回收的纯函数式语言，它再次针对键盘、鼠标和窗口事件管理。但是在`Newsqueak`语言中管道是动态创建的，属于第一类值，可以保存到变量中。\r\n\r\n在`Plan9`操作系统中，这些优秀的想法被吸收到了一个叫`Alef`的编程语言中。`Alef`试图将`Newsqueak`语言改造为系统编程语言，但是因为缺少垃圾回收机制而导致并发编程很痛苦。（译注：在`Alef`之后还有一个叫`Limbo`的编程语言，Go语言从其中借鉴了很多特性。 具体请参考Pike的讲稿：http://talks.golang.org/2012/concurrency.slide#9 ）\r\n\r\nGo语言的其他的一些特性零散地来自于其他一些编程语言；比如`iota`语法是从`APL`语言借鉴，词法作用域与嵌套函数来自于`Scheme`语言（和其他很多语言）。当然，我们也可以从Go中发现很多创新的设计。比如Go语言的切片为动态数组提供了有效的随机存取的性能，这可能会让人联想到链表的底层的共享机制。还有Go语言新发明的`defer`语句。\r\n\r\n## Go语言项目\r\n\r\n所有的编程语言都反映了语言设计者对编程哲学的反思，通常包括之前的语言所暴露的一些不足地方的改进。Go项目是在Google公司维护超级复杂的几个软件系统遇到的一些问题的反思（但是这类问题绝不是Google公司所特有的）。\r\n\r\n正如[Rob Pike](http://genius.cat-v.org/rob-pike/)所说，“软件的复杂性是乘法级相关的”，通过增加一个部分的复杂性来修复问题通常将慢慢地增加其他部分的复杂性。通过增加功能、选项和配置是修复问题的最快的途径，但是这很容易让人忘记简洁的内涵，即从长远来看，简洁依然是好软件的关键因素。\r\n\r\n简洁的设计需要在工作开始的时候舍弃不必要的想法，并且在软件的生命周期内严格区别好的改变和坏的改变。通过足够的努力，一个好的改变可以在不破坏原有完整概念的前提下保持自适应，正如[Fred Brooks](http://www.cs.unc.edu/~brooks/)所说的“概念完整性”；而一个坏的改变则不能达到这个效果，它们仅仅是通过肤浅的和简单的妥协来破坏原有设计的一致性。只有通过简洁的设计，才能让一个系统保持稳定、安全和持续的进化。\r\n\r\nGo项目包括编程语言本身，附带了相关的工具和标准库，最后但并非代表不重要的是，关于简洁编程哲学的宣言。就事后诸葛的角度来看，Go语言的这些地方都做的还不错：拥有自动垃圾回收、一个包系统、函数作为一等公民、词法作用域、系统调用接口、只读的UTF8字符串等。但是Go语言本身只有很少的特性，也不太可能添加太多的特性。例如，它没有隐式的数值转换，没有构造函数和析构函数，没有运算符重载，没有默认参数，也没有继承，没有泛型，没有异常，没有宏，没有函数修饰，更没有线程局部存储。但是，语言本身是成熟和稳定的，而且承诺保证向后兼容：用之前的Go语言编写程序可以用新版本的Go语言编译器和标准库直接构建而不需要修改代码。\r\n\r\nGo语言有足够的类型系统以避免动态语言中那些粗心的类型错误，但是，Go语言的类型系统相比传统的强类型语言又要简洁很多。虽然，有时候这会导致一个“无类型”的抽象类型概念，但是Go语言程序员并不需要像`C++`或`Haskell`程序员那样纠结于具体类型的安全属性。在实践中，Go语言简洁的类型系统给程序员带来了更多的安全性和更好的运行时性能。\r\n\r\nGo语言鼓励当代计算机系统设计的原则，特别是局部的重要性。它的内置数据类型和大多数的准库数据结构都经过精心设计而避免显式的初始化或隐式的构造函数，因为很少的内存分配和内存初始化代码被隐藏在库代码中了。Go语言的聚合类型（结构体和数组）可以直接操作它们的元素，只需要更少的存储空间、更少的内存写操作，而且指针操作比其他间接操作的语言也更有效率。由于现代计算机是一个并行的机器，Go语言提供了基于`CSP`的并发特性支持。Go语言的动态栈使得轻量级线程`goroutine`的初始栈可以很小，因此，创建一个`goroutine`的代价很小，创建百万级的`goroutine`完全是可行的。\r\n\r\nGo语言的标准库（通常被称为语言自带的电池），提供了清晰的构建模块和公共接口，包含I/O操作、文本处理、图像、密码学、网络和分布式应用程序等，并支持许多标准化的文件格式和编解码协议。库和工具使用了大量的约定来减少额外的配置和解释，从而最终简化程序的逻辑，而且，每个Go程序结构都是如此的相似，因此，Go程序也很容易学习。使用Go语言自带工具构建Go语言项目只需要使用文件名和标识符名称，一个偶尔的特殊注释来确定所有的库、可执行文件、测试、基准测试、例子、以及特定于平台的变量、项目的文档等；Go语言源代码本身就包含了构建规范。\r\n\r\n## 本书的组织\r\n\r\n我们假设你已经有一种或多种其他编程语言的使用经历，不管是类似C、C++或Java的编译型语言，还是类似Python、Ruby、JavaScript的脚本语言，因此我们不会像对完全的编程语言初学者那样解释所有的细节。因为，Go语言的变量、常量、表达式、控制流和函数等基本语法也是类似的。\r\n\r\n第一章包含了本教程的基本结构，通过十几个程序介绍了用Go语言如何实现类似读写文件、文本格式化、创建图像、网络客户端和服务器通讯等日常工作。\r\n\r\n第二章描述了Go语言程序的基本元素结构、变量、新类型定义、包和文件、以及作用域等概念。第三章讨论了数字、布尔值、字符串和常量，并演示了如何显示和处理Unicode字符。第四章描述了复合类型，从简单的数组、字典、切片到动态列表。第五章涵盖了函数，并讨论了错误处理、panic和recover，还有defer语句。\r\n\r\n第一章到第五章是基础部分，主流命令式编程语言这部分都类似。个别之处，Go语言有自己特色的语法和风格，但是大多数程序员能很快适应。其余章节是Go语言特有的：方法、接口、并发、包、测试和反射等语言特性。\r\n\r\nGo语言的面向对象机制与一般语言不同。它没有类层次结构，甚至可以说没有类；仅仅通过组合（而不是继承）简单的对象来构建复杂的对象。方法不仅可以定义在结构体上，而且，可以定义在任何用户自定义的类型上；并且，具体类型和抽象类型（接口）之间的关系是隐式的，所以很多类型的设计者可能并不知道该类型到底实现了哪些接口。方法在第六章讨论，接口在第七章讨论。\r\n\r\n第八章讨论了基于顺序通信进程（CSP）概念的并发编程，使用goroutines和channels处理并发编程。第九章则讨论了传统的基于共享变量的并发编程。\r\n\r\n第十章描述了包机制和包的组织结构。这一章还展示了如何有效地利用Go自带的工具，使用单个命令完成编译、测试、基准测试、代码格式化、文档以及其他诸多任务。\r\n\r\n第十一章讨论了单元测试，Go语言的工具和标准库中集成了轻量级的测试功能，避免了强大但复杂的测试框架。测试库提供了一些基本构件，必要时可以用来构建复杂的测试构件。\r\n\r\n第十二章讨论了反射，一种程序在运行期间审视自己的能力。反射是一个强大的编程工具，不过要谨慎地使用；这一章利用反射机制实现一些重要的Go语言库函数，展示了反射的强大用法。第十三章解释了底层编程的细节，在必要时，可以使用unsafe包绕过Go语言安全的类型系统。\r\n\r\n每一章都有一些练习题，你可以用来测试你对Go的理解，你也可以探讨书中这些例子的扩展和替代。\r\n\r\n书中所有的代码都可以从 http://gopl.io 上的Git仓库下载。go get命令根据每个例子的导入路径智能地获取、构建并安装。只需要选择一个目录作为工作空间，然后将GOPATH环境变量设置为该路径。\r\n\r\n必要时，Go语言工具会创建目录。例如：\r\n\r\n```\r\n$ export GOPATH=$HOME/gobook    # 选择工作目录\r\n$ go get gopl.io/ch1/helloworld # 获取/编译/安装\r\n$ $GOPATH/bin/helloworld        # 运行程序\r\nHello, 世界                     # 这是中文\r\n```\r\n\r\n运行这些例子需要安装Go1.5以上的版本。\r\n\r\n```\r\n$ go version\r\ngo version go1.5 linux/amd64\r\n```\r\n\r\n如果使用其他的操作系统，请参考 https://golang.org/doc/install 提供的说明安装。\r\n\r\n\r\n## 更多的信息\r\n\r\n最佳的帮助信息来自Go语言的官方网站，https://golang.org ，它提供了完善的参考文档，包括编程语言规范和标准库等诸多权威的帮助信息。同时也包含了如何编写更地道的Go程序的基本教程，还有各种各样的在线文本资源和视频资源，它们是本书最有价值的补充。Go语言的官方博客 https://blog.golang.org 会不定期发布一些Go语言最好的实践文章，包括当前语言的发展状态、未来的计划、会议报告和Go语言相关的各种会议的主题等信息（译注： http://talks.golang.org/ 包含了官方收录的各种报告的讲稿）。\r\n\r\n在线访问的一个有价值的地方是可以从web页面运行Go语言的程序（而纸质书则没有这么便利了）。这个功能由来自 https://play.golang.org 的 Go Playground 提供，并且可以方便地嵌入到其他页面中，例如 https://golang.org 的主页，或 godoc 提供的文档页面中。\r\n\r\nPlayground可以简单的通过执行一个小程序来测试对语法、语义和对程序库的理解，类似其他很多语言提供的REPL即时运行的工具。同时它可以生成对应的url，非常适合共享Go语言代码片段，汇报bug或提供反馈意见等。\r\n\r\n基于 Playground 构建的 Go Tour，https://tour.golang.org ，是一个系列的Go语言入门教程，它包含了诸多基本概念和结构相关的并可在线运行的互动小程序。\r\n\r\n当然，Playground 和 Tour 也有一些限制，它们只能导入标准库，而且因为安全的原因对一些网络库做了限制。如果要在编译和运行时需要访问互联网，对于一些更复杂的实验，你可能需要在自己的电脑上构建并运行程序。幸运的是下载Go语言的过程很简单，从 https://golang.org 下载安装包应该不超过几分钟（译注：感谢伟大的长城，让大陆的Gopher们都学会了自己打洞的基本生活技能，下载时间可能会因为洞的大小等因素从几分钟到几天或更久），然后就可以在自己电脑上编写和运行Go程序了。\r\n\r\nGo语言是一个开源项目，你可以在 https://golang.org/pkg 阅读标准库中任意函数和类型的实现代码，和下载安装包的代码完全一致。这样，你可以知道很多函数是如何工作的， 通过挖掘找出一些答案的细节，或者仅仅是出于欣赏专业级Go代码。\r\n\r\n## 致谢\r\n\r\n[Rob Pike](http://genius.cat-v.org/rob-pike/)和[Russ Cox](http://research.swtch.com/)，以及很多其他Go团队的核心成员多次仔细阅读了本书的手稿，他们对本书的组织结构和表述用词等给出了很多宝贵的建议。在准备日文版翻译的时候，Yoshiki Shibata更是仔细地审阅了本书的每个部分，及时发现了诸多英文和代码的错误。我们非常感谢本书的每一位审阅者，并感谢对本书给出了重要的建议的Brian Goetz、Corey Kosak、Arnold Robbins、Josh Bleecher Snyder和Peter Weinberger等人。\r\n\r\n我们还感谢Sameer Ajmani、Ittai Balaban、David Crawshaw、Billy Donohue、Jonathan Feinberg、Andrew Gerrand、Robert Griesemer、John Linderman、Minux Ma（译注：中国人，Go团队成员。）、Bryan Mills、Bala Natarajan、Cosmos Nicolaou、Paul Staniforth、Nigel Tao（译注：好像是陶哲轩的兄弟）以及Howard Trickey给出的许多有价值的建议。我们还要感谢David Brailsford和Raph Levien关于类型设置的建议。\r\n\r\n我们从来自Addison-Wesley的编辑Greg Doench收到了很多帮助，从最开始就得到了越来越多的帮助。来自AW生产团队的John Fuller、Dayna Isley、Julie Nahil、Chuti Prasertsith到Barbara Wood，感谢你们的热心帮助。\r\n\r\n[Alan Donovan](https://github.com/adonovan)特别感谢：Sameer Ajmani、Chris Demetriou、Walt Drummond和Google公司的Reid Tatge允许他有充裕的时间去写本书；感谢Stephen Donovan的建议和始终如一的鼓励，以及他的妻子Leila Kazemi并没有让他为了家庭琐事而分心，并热情坚定地支持这个项目。\r\n\r\n[Brian Kernighan](http://www.cs.princeton.edu/~bwk/)特别感谢：朋友和同事对他的耐心和宽容，让他慢慢地梳理本书的写作思路。同时感谢他的妻子Meg和其他很多朋友对他写作事业的支持。\r\n\r\n2015年 10月 于 纽约\r\n\r\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "weixin-golang-china.jpg",
          "type": "blob",
          "size": 27,
          "content": null
        }
      ]
    }
  ]
}