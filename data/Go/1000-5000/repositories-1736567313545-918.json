{
  "metadata": {
    "timestamp": 1736567313545,
    "page": 918,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "danielqsj/kafka_exporter",
      "stars": 2246,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "vendor\nDockerfile\nMakefile\nREADME.md\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4267578125,
          "content": "# Vendor dir is pulled from 'go mod 'vendor'\nvendor/\ngo.sum\n\n# Binaries for programs and plugins\n*.exe\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n.build/\n\n# Project-local glide cache, RE: https://github.com/Masterminds/glide/issues/736\n.glide/\n\n# Binary\nkafka_exporter\n\n# Project IDE\n.idea/\n*.iml\n\n# Test configuration\ntest/\n.DS_Store\n\n\n"
        },
        {
          "name": ".promu.yml",
          "type": "blob",
          "size": 0.501953125,
          "content": "repository:\n    path: github.com/danielqsj/kafka_exporter\nbuild:\n    flags: -a -tags netgo\n    ldflags: |\n        -X github.com/prometheus/common/version.Version={{.Version}}\n        -X github.com/prometheus/common/version.Revision={{.Revision}}\n        -X github.com/prometheus/common/version.Branch={{.Branch}}\n        -X github.com/prometheus/common/version.BuildUser={{user}}@{{host}}\n        -X github.com/prometheus/common/version.BuildDate={{date \"20060102-15:04:05\"}}\ntarball:\n    files:\n        - LICENSE\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8076171875,
          "content": "#sudo: required\n#\n#language: go\n#\n#go:\n#- 1.19\n#\n#env:\n#- GOFLAGS=\"-mod=readonly\"\n#\n#before_install:\n#  - sudo rm -rf /var/lib/apt/lists/*\n#  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n#  - sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) edge\"\n#  - sudo apt-get update\n#  - sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce\n#  - mkdir -vp ~/.docker/cli-plugins/\n#  - curl --silent -L \"https://github.com/docker/buildx/releases/download/v0.6.1/buildx-v0.6.1.linux-amd64\" > ~/.docker/cli-plugins/docker-buildx\n#  - chmod a+x ~/.docker/cli-plugins/docker-buildx\n#\n#after_success:\n#- if [ \"$TRAVIS_PULL_REQUEST\" == \"false\" ]; then\n#  make push;\n#  fi\n#- if [[ -n \"$TRAVIS_TAG\" ]]; then\n#  make crossbuild release;\n#  fi\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2607421875,
          "content": "FROM        quay.io/prometheus/busybox:latest\nMAINTAINER  Daniel Qian <qsj.daniel@gmail.com>\n\nARG TARGETARCH\nARG BIN_DIR=.build/linux-${TARGETARCH}/\n\nCOPY ${BIN_DIR}/kafka_exporter /bin/kafka_exporter\n\nEXPOSE     9308\nUSER nobody\nENTRYPOINT [ \"/bin/kafka_exporter\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.177734375,
          "content": "GO    := GO111MODULE=on go\nPROMU := $(GOPATH)/bin/promu\npkgs   = $(shell $(GO) list ./... | grep -v /vendor/)\nUNAME_S := $(shell uname -s | tr A-Z a-z)\nUNAME_M := $(shell uname -m)\n\nifeq ($(findstring aarch64,$(UNAME_M)),aarch64)\n    ARCH := arm64\nelse\n    ARCH := $(subst x86_64,amd64,$(patsubst i%86,386,$(UNAME_M)))\nendif\n\nPREFIX                  ?= $(shell pwd)\nBIN_DIR                 ?= $(shell pwd)\nDOCKER_IMAGE_NAME       ?= kafka-exporter\nDOCKER_IMAGE_TAG        ?= $(subst /,-,$(shell git rev-parse --abbrev-ref HEAD))\n#TAG \t\t\t\t\t:= $(shell echo `if [ \"$(TRAVIS_BRANCH)\" = \"master\" ] || [ \"$(TRAVIS_BRANCH)\" = \"\" ] ; then echo \"latest\"; else echo $(TRAVIS_BRANCH) ; fi`)\n\nPUSHTAG                 ?= type=registry,push=true\nDOCKER_PLATFORMS        ?= linux/amd64,linux/s390x,linux/arm64,linux/ppc64le\n\nall: format build test\n\nstyle:\n\t@echo \">> checking code style\"\n\t@! gofmt -d $(shell find . -path ./vendor -prune -o -name '*.go' -print) | grep '^'\n\ntest:\n\t@echo \">> running tests\"\n\t@$(GO) test -short $(pkgs)\n\nformat:\n\t@echo \">> formatting code\"\n\t@$(GO) fmt $(pkgs)\n\nvet:\n\t@echo \">> vetting code\"\n\t@$(GO) vet $(pkgs)\n\nbuild: promu\n\t@echo \">> building binaries\"\n\t@$(GO) mod vendor\n\t@$(PROMU) build --prefix $(PREFIX)\n\n\ncrossbuild: promu\n\t@echo \">> crossbuilding binaries\"\n\t@$(PROMU) crossbuild --go=1.23\n\ntarball: promu\n\t@echo \">> building release tarball\"\n\t@$(PROMU) tarball --prefix $(PREFIX) $(BIN_DIR)\n\ndocker: build\n\t@echo \">> building docker image\"\n\t@docker build -t \"$(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_TAG)\" --build-arg BIN_DIR=. .\n\npush: crossbuild\n\t@echo \">> building and pushing multi-arch docker images, $(DOCKER_USERNAME),$(DOCKER_IMAGE_NAME),$(GIT_TAG_NAME)\"\n\t@docker login -u $(DOCKER_USERNAME) -p $(DOCKER_PASSWORD)\n\t@docker buildx create --use\n\t@docker buildx build -t \"$(DOCKER_USERNAME)/$(DOCKER_IMAGE_NAME):$(GIT_TAG_NAME)\" \\\n\t\t--output \"$(PUSHTAG)\" \\\n\t\t--platform \"$(DOCKER_PLATFORMS)\" \\\n\t\t.\n\nrelease: promu github-release\n\t@echo \">> pushing binary to github with ghr\"\n\t@$(PROMU) crossbuild tarballs\n\t@$(PROMU) release .tarballs\n\npromu:\n\t@GOOS=$(UNAME_S) GOARCH=$(ARCH) $(GO) install github.com/prometheus/promu@v0.14.0\nPROMU=$(shell go env GOPATH)/bin/promu\n\ngithub-release:\n\t@GOOS=$(shell uname -s | tr A-Z a-z) \\\n\t\tGOARCH=$(subst x86_64,amd64,$(patsubst i%86,386,$(shell uname -m))) \\\n\t\t$(GO) install github.com/github-release/github-release@v0.10.0\n\t$(GO) mod tidy\n\n# Run go fmt against code\n.PHONY: fmt\nfmt:\n\t@find . -type f -name '*.go'| grep -v \"/vendor/\" | xargs gofmt -w -s\n\n# Run mod tidy against code\n.PHONY: tidy\ntidy:\n\t@go mod tidy\n\n# Run golang lint against code\n.PHONY: lint\nlint: golangci-lint\n\t@$(GOLANG_LINT) run \\\n      --timeout 30m \\\n      --disable-all \\\n      -E deadcode \\\n      -E unused \\\n      -E varcheck \\\n      -E ineffassign \\\n      -E goimports \\\n      -E gofmt \\\n      -E misspell \\\n      -E unparam \\\n      -E unconvert \\\n      -E govet \\\n      -E errcheck\n\n# Run gosec security checks\n.PHONY: sec\nsec: gosec\n\t@$(GOSEC) ./...\n\n# Run staticcheck\n.PHONY: staticcheck\nstaticcheck: staticcheck-bin\n\t@$(STATICCHECK) ./...\n\n# find or download golangci-lint\n# download golangci-lint if necessary\ngolangci-lint:\nifeq (, $(shell which golangci-lint))\n\t@GOOS=$(shell uname -s | tr A-Z a-z) \\\n    \t\tGOARCH=$(subst x86_64,amd64,$(patsubst i%86,386,$(shell uname -m))) \\\n    \t\t$(GO) install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.52.2\nGOLANG_LINT=$(shell go env GOPATH)/bin/golangci-lint\nelse\nGOLANG_LINT=$(shell which golangci-lint)\nendif\n\n# Ensure gosec is installed\ngosec:\nifeq (, $(shell which gosec))\n\t@GOOS=$(shell uname -s | tr A-Z a-z) \\\n    \t\tGOARCH=$(subst x86_64,amd64,$(patsubst i%86,386,$(shell uname -m))) \\\n    \t\t$(GO) install github.com/securego/gosec/v2/cmd/gosec@latest\nGOSEC=$(shell go env GOPATH)/bin/gosec\nelse\nGOSEC=$(shell which gosec)\nendif\n\n# Ensure staticcheck is installed\nstaticcheck-bin:\nifeq (, $(shell which staticcheck))\n\t@GOOS=$(shell uname -s | tr A-Z a-z) \\\n    \t\tGOARCH=$(subst x86_64,amd64,$(patsubst i%86,386,$(shell uname -m))) \\\n    \t\t$(GO) install honnef.co/go/tools/cmd/staticcheck@latest\nSTATICCHECK=$(shell go env GOPATH)/bin/staticcheck\nelse\nSTATICCHECK=$(shell which staticcheck)\nendif\n\n\n.PHONY: all style format build test vet tarball docker promu sec staticcheck\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.9560546875,
          "content": "![kafka_exporter](https://socialify.git.ci/danielqsj/kafka_exporter/image?description=1&font=Inter&forks=1&pattern=Signal&stargazers=1&theme=Light)\n\nkafka_exporter\n==============\n\n[![CI](https://github.com/danielqsj/kafka_exporter/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/danielqsj/kafka_exporter/actions/workflows/ci.yml)[![Docker Pulls](https://img.shields.io/docker/pulls/danielqsj/kafka-exporter.svg)](https://hub.docker.com/r/danielqsj/kafka-exporter)[![Go Report Card](https://goreportcard.com/badge/github.com/danielqsj/kafka_exporter)](https://goreportcard.com/report/github.com/danielqsj/kafka_exporter)[![Language](https://img.shields.io/badge/language-Go-red.svg)](https://github.com/danielqsj/kafka-exporter)[![GitHub release](https://img.shields.io/badge/release-1.8.0-green.svg)](https://github.com/danielqsj/kafka-exporter/releases)[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)\n\nKafka exporter for Prometheus. For other metrics from Kafka, have a look at the [JMX exporter](https://github.com/prometheus/jmx_exporter).\n\nTable of Contents\n-----------------\n\n-\t[Compatibility](#compatibility)\n-\t[Dependency](#dependency)\n-\t[Download](#download)\n-\t[Compile](#compile)\n\t-\t[Build Binary](#build-binary)\n\t-\t[Build Docker Image](#build-docker-image)\n-\t[Run](#run)\n\t-\t[Run Binary](#run-binary)\n\t-\t[Run Docker Image](#run-docker-image)\n -\t-\t[Run Docker Compose](#run-docker-compose)\n-\t[Flags](#flags)\n    -\t[Notes](#notes)\n-\t[Metrics](#metrics)\n\t-\t[Brokers](#brokers)\n\t-\t[Topics](#topics)\n\t-\t[Consumer Groups](#consumer-groups)\n-\t[Grafana Dashboard](#grafana-dashboard)\n-   [Contribute](#contribute)\n-   [Donation](#donation)\n-   [License](#license)\n\nCompatibility\n-------------\n\nSupport [Apache Kafka](https://kafka.apache.org) version 0.10.1.0 (and later).\n\nDependency\n----------\n\n-\t[Prometheus](https://prometheus.io)\n-\t[Sarama](https://shopify.github.io/sarama)\n-\t[Golang](https://golang.org)\n\nDownload\n--------\n\nBinary can be downloaded from [Releases](https://github.com/danielqsj/kafka_exporter/releases) page.\n\nCompile\n-------\n\n### Build Binary\n\n```shell\nmake\n```\n\n### Build Docker Image\n\n```shell\nmake docker\n```\n\nDocker Hub Image\n----------------\n\n```shell\ndocker pull danielqsj/kafka-exporter:latest\n```\n\nIt can be used directly instead of having to build the image yourself. ([Docker Hub danielqsj/kafka-exporter](https://hub.docker.com/r/danielqsj/kafka-exporter)\\)\n\nRun\n---\n\n### Run Binary\n\n```shell\nkafka_exporter --kafka.server=kafka:9092 [--kafka.server=another-server ...]\n```\n\n### Run Docker Image\n\n```\ndocker run -ti --rm -p 9308:9308 danielqsj/kafka-exporter --kafka.server=kafka:9092 [--kafka.server=another-server ...]\n```\n\n### Run Docker Compose\nmake a `docker-compose.yml` flie\n```\nservices:\n  kafka-exporter:\n    image: danielqsj/kafka-exporter \n    command: [\"--kafka.server=kafka:9092\", \"[--kafka.server=another-server ...]\"]\n    ports:\n      - 9308:9308     \n```\nthen run it\n```\ndocker-compose up -d\n```\n\nFlags\n-----\n\nThis image is configurable using different flags\n\n| Flag name                      | Default        | Description                                                                                                                                    |\n|--------------------------------|----------------|------------------------------------------------------------------------------------------------------------------------------------------------|\n| kafka.server                   | kafka:9092     | Addresses (host:port) of Kafka server                                                                                                          |\n| kafka.version                  | 2.0.0          | Kafka broker version                                                                                                                           |\n| sasl.enabled                   | false          | Connect using SASL/PLAIN                                                                                                                       |\n| sasl.handshake                 | true           | Only set this to false if using a non-Kafka SASL proxy                                                                                         |\n| sasl.username                  |                | SASL user name                                                                                                                                 |\n| sasl.password                  |                | SASL user password                                                                                                                             |\n| sasl.mechanism                 |                | SASL mechanism can be plain, scram-sha512, scram-sha256                                                                                        |\n| sasl.service-name              |                | Service name when using Kerberos Auth                                                                                                          |\n| sasl.kerberos-config-path      |                | Kerberos config path                                                                                                                           |\n| sasl.realm                     |                | Kerberos realm                                                                                                                                 |\n| sasl.keytab-path               |                | Kerberos keytab file path                                                                                                                      |\n| sasl.kerberos-auth-type        |                | Kerberos auth type. Either 'keytabAuth' or 'userAuth'                                                                                          |\n| tls.enabled                    | false          | Connect to Kafka using TLS                                                                                                                     |\n| tls.server-name                |                | Used to verify the hostname on the returned certificates unless tls.insecure-skip-tls-verify is given. The kafka server's name should be given |\n| tls.ca-file                    |                | The optional certificate authority file for Kafka TLS client authentication                                                                    |\n| tls.cert-file                  |                | The optional certificate file for Kafka client authentication                                                                                  |\n| tls.key-file                   |                | The optional key file for Kafka client authentication                                                                                          |\n| tls.insecure-skip-tls-verify   | false          | If true, the server's certificate will not be checked for validity                                                                             |\n| server.tls.enabled             | false          | Enable TLS for web server                                                                                                                      |\n| server.tls.mutual-auth-enabled | false          | Enable TLS client mutual authentication                                                                                                        |\n| server.tls.ca-file             |                | The certificate authority file for the web server                                                                                              |\n| server.tls.cert-file           |                | The certificate file for the web server                                                                                                        |\n| server.tls.key-file            |                | The key file for the web server                                                                                                                |\n| topic.filter                   | .*             | Regex that determines which topics to collect                                                                                                  |\n| topic.exclude                  | ^$             | Regex that determines which topics to exclude                                                                                                  |\n| group.filter                   | .*             | Regex that determines which consumer groups to collect                                                                                         |\n| group.exclude                  | ^$             | Regex that determines which consumer groups to exclude                                                                                         |\n| web.listen-address             | :9308          | Address to listen on for web interface and telemetry                                                                                           |\n| web.telemetry-path             | /metrics       | Path under which to expose metrics                                                                                                             |\n| log.enable-sarama              | false          | Turn on Sarama logging                                                                                                                         |\n| use.consumelag.zookeeper       | false          | if you need to use a group from zookeeper                                                                                                      |\n| zookeeper.server               | localhost:2181 | Address (hosts) of zookeeper server                                                                                                            |\n| kafka.labels                   |                | Kafka cluster name                                                                                                                             |\n| refresh.metadata               | 30s            | Metadata refresh interval                                                                                                                      |\n| offset.show-all                | true           | Whether show the offset/lag for all consumer group, otherwise, only show connected consumer groups                                             |\n| concurrent.enable              | false          | If true, all scrapes will trigger kafka operations otherwise, they will share results. WARN: This should be disabled on large clusters         |\n| topic.workers                  | 100            | Number of topic workers                                                                                                                        |\n| verbosity                      | 0              | Verbosity log level                                                                                                                            |\n\n### Notes\n\nBoolean values are uniquely managed by [Kingpin](https://github.com/alecthomas/kingpin/blob/master/README.md#boolean-values). Each boolean flag will have a negative complement:\n`--<name>` and `--no-<name>`.\n\nFor example:\n\nIf you need to disable `sasl.handshake`, you could add flag `--no-sasl.handshake`\n\nMetrics\n-------\n\nDocuments about exposed Prometheus metrics.\n\nFor details on the underlying metrics please see [Apache Kafka](https://kafka.apache.org/documentation).\n\n### Brokers\n\n**Metrics details**\n\n| Name            | Exposed informations                   |\n|-----------------|----------------------------------------|\n| `kafka_brokers` | Number of Brokers in the Kafka Cluster |\n\n**Metrics output example**\n\n```txt\n# HELP kafka_brokers Number of Brokers in the Kafka Cluster.\n# TYPE kafka_brokers gauge\nkafka_brokers 3\n```\n\n### Topics\n\n**Metrics details**\n\n| Name                                               | Exposed informations                                |\n|----------------------------------------------------|-----------------------------------------------------|\n| `kafka_topic_partitions`                           | Number of partitions for this Topic                 |\n| `kafka_topic_partition_current_offset`             | Current Offset of a Broker at Topic/Partition       |\n| `kafka_topic_partition_oldest_offset`              | Oldest Offset of a Broker at Topic/Partition        |\n| `kafka_topic_partition_in_sync_replica`            | Number of In-Sync Replicas for this Topic/Partition |\n| `kafka_topic_partition_leader`                     | Leader Broker ID of this Topic/Partition            |\n| `kafka_topic_partition_leader_is_preferred`        | 1 if Topic/Partition is using the Preferred Broker  |\n| `kafka_topic_partition_replicas`                   | Number of Replicas for this Topic/Partition         |\n| `kafka_topic_partition_under_replicated_partition` | 1 if Topic/Partition is under Replicated            |\n\n**Metrics output example**\n\n```txt\n# HELP kafka_topic_partitions Number of partitions for this Topic\n# TYPE kafka_topic_partitions gauge\nkafka_topic_partitions{topic=\"__consumer_offsets\"} 50\n\n# HELP kafka_topic_partition_current_offset Current Offset of a Broker at Topic/Partition\n# TYPE kafka_topic_partition_current_offset gauge\nkafka_topic_partition_current_offset{partition=\"0\",topic=\"__consumer_offsets\"} 0\n\n# HELP kafka_topic_partition_oldest_offset Oldest Offset of a Broker at Topic/Partition\n# TYPE kafka_topic_partition_oldest_offset gauge\nkafka_topic_partition_oldest_offset{partition=\"0\",topic=\"__consumer_offsets\"} 0\n\n# HELP kafka_topic_partition_in_sync_replica Number of In-Sync Replicas for this Topic/Partition\n# TYPE kafka_topic_partition_in_sync_replica gauge\nkafka_topic_partition_in_sync_replica{partition=\"0\",topic=\"__consumer_offsets\"} 3\n\n# HELP kafka_topic_partition_leader Leader Broker ID of this Topic/Partition\n# TYPE kafka_topic_partition_leader gauge\nkafka_topic_partition_leader{partition=\"0\",topic=\"__consumer_offsets\"} 0\n\n# HELP kafka_topic_partition_leader_is_preferred 1 if Topic/Partition is using the Preferred Broker\n# TYPE kafka_topic_partition_leader_is_preferred gauge\nkafka_topic_partition_leader_is_preferred{partition=\"0\",topic=\"__consumer_offsets\"} 1\n\n# HELP kafka_topic_partition_replicas Number of Replicas for this Topic/Partition\n# TYPE kafka_topic_partition_replicas gauge\nkafka_topic_partition_replicas{partition=\"0\",topic=\"__consumer_offsets\"} 3\n\n# HELP kafka_topic_partition_under_replicated_partition 1 if Topic/Partition is under Replicated\n# TYPE kafka_topic_partition_under_replicated_partition gauge\nkafka_topic_partition_under_replicated_partition{partition=\"0\",topic=\"__consumer_offsets\"} 0\n```\n\n### Consumer Groups\n\n**Metrics details**\n\n| Name                                         | Exposed informations                                                     |\n|----------------------------------------------|--------------------------------------------------------------------------|\n| `kafka_consumergroup_current_offset`         | Current Offset of a ConsumerGroup at Topic/Partition                     |\n| `kafka_consumergroup_lag`                    | Current Approximate Lag of a ConsumerGroup at Topic/Partition            |\n| `kafka_consumergroupzookeeper_lag_zookeeper` | Current Approximate Lag(zookeeper) of a ConsumerGroup at Topic/Partition |\n\n#### Important Note\n\nTo be able to collect the metrics `kafka_consumergroupzookeeper_lag_zookeeper`, you must set the following flags:\n\n* `use.consumelag.zookeeper`: enable collect consume lag from zookeeper\n* `zookeeper.server`: address for connection to zookeeper\n\n**Metrics output example**\n\n```txt\n# HELP kafka_consumergroup_current_offset Current Offset of a ConsumerGroup at Topic/Partition\n# TYPE kafka_consumergroup_current_offset gauge\nkafka_consumergroup_current_offset{consumergroup=\"KMOffsetCache-kafka-manager-3806276532-ml44w\",partition=\"0\",topic=\"__consumer_offsets\"} -1\n\n# HELP kafka_consumergroup_lag Current Approximate Lag of a ConsumerGroup at Topic/Partition\n# TYPE kafka_consumergroup_lag gauge\nkafka_consumergroup_lag{consumergroup=\"KMOffsetCache-kafka-manager-3806276532-ml44w\",partition=\"0\",topic=\"__consumer_offsets\"} 1\n```\n\nGrafana Dashboard\n-------\n\nGrafana Dashboard ID: 7589, name: Kafka Exporter Overview.\n\nFor details of the dashboard please see [Kafka Exporter Overview](https://grafana.com/grafana/dashboards/7589-kafka-exporter-overview/).\n\nContribute\n----------\n\nIf you like Kafka Exporter, please give me a star. This will help more people know Kafka Exporter.\n\nPlease feel free to send me [pull requests](https://github.com/danielqsj/kafka_exporter/pulls).\n\nContributors ✨\n----------\n\nThanks goes to these wonderful people:\n\n<a href=\"https://github.com/danielqsj/kafka_exporter/graphs/contributors\">\n<img src=\"https://contrib.rocks/image?repo=danielqsj/kafka_exporter\" />\n</a>\n\nStar ⭐\n----------\n\n[![Stargazers over time](https://starchart.cc/danielqsj/kafka_exporter.svg)](https://starchart.cc/danielqsj/kafka_exporter)\n\nDonation\n--------\n\nYour donation will encourage me to continue to improve Kafka Exporter. Support Alipay donation.\n\n![](https://github.com/danielqsj/kafka_exporter/raw/master/alipay.jpg)\n\nLicense\n-------\n\nCode is licensed under the [Apache License 2.0](https://github.com/danielqsj/kafka_exporter/blob/master/LICENSE).\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "1.8.0\n"
        },
        {
          "name": "alipay.jpg",
          "type": "blob",
          "size": 104.111328125,
          "content": null
        },
        {
          "name": "charts",
          "type": "tree",
          "content": null
        },
        {
          "name": "deploy",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.046875,
          "content": "module github.com/danielqsj/kafka_exporter\n\ngo 1.23\n\nrequire (\n\tgithub.com/IBM/sarama v1.43.3\n\tgithub.com/alecthomas/kingpin/v2 v2.4.0\n\tgithub.com/krallistic/kazoo-go v0.0.0-20170526135507-a15279744f4e\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/prometheus/client_golang v1.20.0\n\tgithub.com/prometheus/common v0.55.0\n\tgithub.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475\n\tgithub.com/xdg/scram v1.0.5\n\tk8s.io/klog/v2 v2.130.1\n)\n\nrequire (\n\tgithub.com/alecthomas/units v0.0.0-20240626203959-61d1e3462e30 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/eapache/go-resiliency v1.7.0 // indirect\n\tgithub.com/eapache/go-xerial-snappy v0.0.0-20230731223053-c322873962e3 // indirect\n\tgithub.com/eapache/queue v1.1.0 // indirect\n\tgithub.com/go-kit/log v0.2.1 // indirect\n\tgithub.com/go-logfmt/logfmt v0.6.0 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/golang/snappy v0.0.4 // indirect\n\tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n\tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n\tgithub.com/hashicorp/go-uuid v1.0.3 // indirect\n\tgithub.com/jcmturner/aescts/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/dnsutils/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/gofork v1.7.6 // indirect\n\tgithub.com/jcmturner/gokrb5/v8 v8.4.4 // indirect\n\tgithub.com/jcmturner/rpc/v2 v2.0.3 // indirect\n\tgithub.com/klauspost/compress v1.17.9 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/pierrec/lz4/v4 v4.1.21 // indirect\n\tgithub.com/prometheus/client_model v0.6.1 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/samuel/go-zookeeper v0.0.0-20201211165307-7117e9ea2414 // indirect\n\tgithub.com/xdg/stringprep v1.0.3 // indirect\n\tgithub.com/xhit/go-str2duration/v2 v2.1.0 // indirect\n\tgolang.org/x/crypto v0.26.0 // indirect\n\tgolang.org/x/net v0.28.0 // indirect\n\tgolang.org/x/sys v0.24.0 // indirect\n\tgolang.org/x/text v0.17.0 // indirect\n\tgoogle.golang.org/protobuf v1.34.2 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 13.0986328125,
          "content": "github.com/IBM/sarama v1.43.3 h1:Yj6L2IaNvb2mRBop39N7mmJAHBVY3dTPncr3qGVkxPA=\ngithub.com/IBM/sarama v1.43.3/go.mod h1:FVIRaLrhK3Cla/9FfRF5X9Zua2KpS3SYIXxhac1H+FQ=\ngithub.com/alecthomas/kingpin/v2 v2.4.0 h1:f48lwail6p8zpO1bC4TxtqACaGqHYA22qkHjHpqDjYY=\ngithub.com/alecthomas/kingpin/v2 v2.4.0/go.mod h1:0gyi0zQnjuFk8xrkNKamJoyUo382HRL7ATRpFZCw6tE=\ngithub.com/alecthomas/units v0.0.0-20240626203959-61d1e3462e30 h1:t3eaIm0rUkzbrIewtiFmMK5RXHej2XnoXNhxVsAYUfg=\ngithub.com/alecthomas/units v0.0.0-20240626203959-61d1e3462e30/go.mod h1:fvzegU4vN3H1qMT+8wDmzjAcDONcgo2/SZ/TyfdUOFs=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/eapache/go-resiliency v1.7.0 h1:n3NRTnBn5N0Cbi/IeOHuQn9s2UwVUH7Ga0ZWcP+9JTA=\ngithub.com/eapache/go-resiliency v1.7.0/go.mod h1:5yPzW0MIvSe0JDsv0v+DvcjEv2FyD6iZYSs1ZI+iQho=\ngithub.com/eapache/go-xerial-snappy v0.0.0-20230731223053-c322873962e3 h1:Oy0F4ALJ04o5Qqpdz8XLIpNA3WM/iSIXqxtqo7UGVws=\ngithub.com/eapache/go-xerial-snappy v0.0.0-20230731223053-c322873962e3/go.mod h1:YvSRo5mw33fLEx1+DlK6L2VV43tJt5Eyel9n9XBcR+0=\ngithub.com/eapache/queue v1.1.0 h1:YOEu7KNc61ntiQlcEeUIoDTJ2o8mQznoNvUhiigpIqc=\ngithub.com/eapache/queue v1.1.0/go.mod h1:6eCeP0CKFpHLu8blIFXhExK/dRa7WDZfr6jVFPTqq+I=\ngithub.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=\ngithub.com/fortytw2/leaktest v1.3.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=\ngithub.com/go-kit/log v0.2.1 h1:MRVx0/zhvdseW+Gza6N9rVzU/IVzaeE1SFI4raAhmBU=\ngithub.com/go-kit/log v0.2.1/go.mod h1:NwTd00d/i8cPZ3xOwwiv2PO5MOcx78fFErGNcVmBjv0=\ngithub.com/go-logfmt/logfmt v0.6.0 h1:wGYYu3uicYdqXVgoYbvnkrPVXkuLM1p1ifugDMEdRi4=\ngithub.com/go-logfmt/logfmt v0.6.0/go.mod h1:WYhtIu8zTZfxdn5+rREduYbwxfcBr/Vr6KEVveWlfTs=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/golang/snappy v0.0.4 h1:yAGX7huGHXlcLOEtBnF4w7FQwA26wojNCwOYAEhLjQM=\ngithub.com/golang/snappy v0.0.4/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+HVt/4epWDjd4=\ngithub.com/gorilla/sessions v1.2.1/go.mod h1:dk2InVEVJ0sfLlnXv9EAgkf6ecYs/i80K/zI+bUmuGM=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=\ngithub.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\ngithub.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\ngithub.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.3 h1:2gKiV6YVmrJ1i2CKKa9obLvRieoRGviZFL26PcT/Co8=\ngithub.com/hashicorp/go-uuid v1.0.3/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/jcmturner/aescts/v2 v2.0.0 h1:9YKLH6ey7H4eDBXW8khjYslgyqG2xZikXP0EQFKrle8=\ngithub.com/jcmturner/aescts/v2 v2.0.0/go.mod h1:AiaICIRyfYg35RUkr8yESTqvSy7csK90qZ5xfvvsoNs=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0 h1:lltnkeZGL0wILNvrNiVCR6Ro5PGU/SeBvVO/8c/iPbo=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0/go.mod h1:b0TnjGOvI/n42bZa+hmXL+kFJZsFT7G4t3HTlQ184QM=\ngithub.com/jcmturner/gofork v1.7.6 h1:QH0l3hzAU1tfT3rZCnW5zXl+orbkNMMRGJfdJjHVETg=\ngithub.com/jcmturner/gofork v1.7.6/go.mod h1:1622LH6i/EZqLloHfE7IeZ0uEJwMSUyQ/nDd82IeqRo=\ngithub.com/jcmturner/goidentity/v6 v6.0.1 h1:VKnZd2oEIMorCTsFBnJWbExfNN7yZr3EhJAxwOkZg6o=\ngithub.com/jcmturner/goidentity/v6 v6.0.1/go.mod h1:X1YW3bgtvwAXju7V3LCIMpY0Gbxyjn/mY9zx4tFonSg=\ngithub.com/jcmturner/gokrb5/v8 v8.4.4 h1:x1Sv4HaTpepFkXbt2IkL29DXRf8sOfZXo8eRKh687T8=\ngithub.com/jcmturner/gokrb5/v8 v8.4.4/go.mod h1:1btQEpgT6k+unzCwX1KdWMEwPPkkgBtP+F6aCACiMrs=\ngithub.com/jcmturner/rpc/v2 v2.0.3 h1:7FXXj8Ti1IaVFpSAziCZWNzbNuZmnvw/i6CqLNdWfZY=\ngithub.com/jcmturner/rpc/v2 v2.0.3/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=\ngithub.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2qeMA=\ngithub.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\ngithub.com/krallistic/kazoo-go v0.0.0-20170526135507-a15279744f4e h1:IWiVY66Xy9YrDZ28qJMt1UTlh6x9UGW0aDH/o58CSnA=\ngithub.com/krallistic/kazoo-go v0.0.0-20170526135507-a15279744f4e/go.mod h1:Rq6003vCNoJNrT6ol0hMebQ3GWLWXSHrD/QcMlXt0EE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/pierrec/lz4/v4 v4.1.21 h1:yOVMLb6qSIDP67pl/5F7RepeKYu/VmTyEXvuMI5d9mQ=\ngithub.com/pierrec/lz4/v4 v4.1.21/go.mod h1:gZWDp/Ze/IJXGXf23ltt2EXimqmTUXEy0GFuRQyBid4=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v1.20.0 h1:jBzTZ7B099Rg24tny+qngoynol8LtVYlA2bqx3vEloI=\ngithub.com/prometheus/client_golang v1.20.0/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.55.0 h1:KEi6DK7lXW/m7Ig5i47x0vRzuBsHuvJdi5ee6Y3G1dc=\ngithub.com/prometheus/common v0.55.0/go.mod h1:2SECS4xJG1kd8XF9IcM1gMX6510RAEL65zxzNImwdc8=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 h1:N/ElC8H3+5XpJzTSTfLsJV/mx9Q9g7kxmchpfZyxgzM=\ngithub.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=\ngithub.com/samuel/go-zookeeper v0.0.0-20201211165307-7117e9ea2414 h1:AJNDS0kP60X8wwWFvbLPwDuojxubj9pbfK7pjHw0vKg=\ngithub.com/samuel/go-zookeeper v0.0.0-20201211165307-7117e9ea2414/go.mod h1:gi+0XIa01GRL2eRQVjQkKGqKF3SF9vZR/HnPullcV2E=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/xdg/scram v1.0.5 h1:TuS0RFmt5Is5qm9Tm2SoD89OPqe4IRiFtyFY4iwWXsw=\ngithub.com/xdg/scram v1.0.5/go.mod h1:lB8K/P019DLNhemzwFU4jHLhdvlE6uDZjXFejJXr49I=\ngithub.com/xdg/stringprep v1.0.3 h1:cmL5Enob4W83ti/ZHuZLuKD/xqJfus4fVPwE+/BDm+4=\ngithub.com/xdg/stringprep v1.0.3/go.mod h1:Jhud4/sHMO4oL310DaZAKk9ZaJ08SJfe+sJh0HrGL1Y=\ngithub.com/xhit/go-str2duration/v2 v2.1.0 h1:lxklc02Drh6ynqX+DdPyp5pCKLUQpRT8bp8Ydu2Bstc=\ngithub.com/xhit/go-str2duration/v2 v2.1.0/go.mod h1:ohY8p+0f07DiV6Em5LKB0s2YpLtXVyJfNt1+BlmyAsU=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.6.0/go.mod h1:OFC/31mSvZgRz0V1QTNCzfAI1aIRzbiufJtkMIlEp58=\ngolang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=\ngolang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.7.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=\ngolang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=\ngolang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=\ngolang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=\ngoogle.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nk8s.io/klog/v2 v2.130.1 h1:n9Xl7H1Xvksem4KFG4PYbdQCQxqc/tTUyrgXaOhHSzk=\nk8s.io/klog/v2 v2.130.1/go.mod h1:3Jpz1GvMt720eyJH1ckRHK1EDfpxISzJ7I9OYgaDtPE=\n"
        },
        {
          "name": "kafka_exporter.go",
          "type": "blob",
          "size": 34.626953125,
          "content": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/IBM/sarama\"\n\tkingpin \"github.com/alecthomas/kingpin/v2\"\n\t\"github.com/krallistic/kazoo-go\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/collectors\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\tplog \"github.com/prometheus/common/promlog\"\n\tplogflag \"github.com/prometheus/common/promlog/flag\"\n\n\t\"github.com/prometheus/common/version\"\n\t\"github.com/rcrowley/go-metrics\"\n\t\"k8s.io/klog/v2\"\n)\n\nconst (\n\tnamespace = \"kafka\"\n\tclientID  = \"kafka_exporter\"\n)\n\nconst (\n\tINFO  = 0\n\tDEBUG = 1\n\tTRACE = 2\n)\n\nvar (\n\tclusterBrokers                     *prometheus.Desc\n\tclusterBrokerInfo                  *prometheus.Desc\n\ttopicPartitions                    *prometheus.Desc\n\ttopicCurrentOffset                 *prometheus.Desc\n\ttopicOldestOffset                  *prometheus.Desc\n\ttopicPartitionLeader               *prometheus.Desc\n\ttopicPartitionReplicas             *prometheus.Desc\n\ttopicPartitionInSyncReplicas       *prometheus.Desc\n\ttopicPartitionUsesPreferredReplica *prometheus.Desc\n\ttopicUnderReplicatedPartition      *prometheus.Desc\n\tconsumergroupCurrentOffset         *prometheus.Desc\n\tconsumergroupCurrentOffsetSum      *prometheus.Desc\n\tconsumergroupLag                   *prometheus.Desc\n\tconsumergroupLagSum                *prometheus.Desc\n\tconsumergroupLagZookeeper          *prometheus.Desc\n\tconsumergroupMembers               *prometheus.Desc\n)\n\n// Exporter collects Kafka stats from the given server and exports them using\n// the prometheus metrics package.\ntype Exporter struct {\n\tclient                  sarama.Client\n\ttopicFilter             *regexp.Regexp\n\ttopicExclude            *regexp.Regexp\n\tgroupFilter             *regexp.Regexp\n\tgroupExclude            *regexp.Regexp\n\tmu                      sync.Mutex\n\tuseZooKeeperLag         bool\n\tzookeeperClient         *kazoo.Kazoo\n\tnextMetadataRefresh     time.Time\n\tmetadataRefreshInterval time.Duration\n\toffsetShowAll           bool\n\ttopicWorkers            int\n\tallowConcurrent         bool\n\tsgMutex                 sync.Mutex\n\tsgWaitCh                chan struct{}\n\tsgChans                 []chan<- prometheus.Metric\n\tconsumerGroupFetchAll   bool\n}\n\ntype kafkaOpts struct {\n\turi                      []string\n\tuseSASL                  bool\n\tuseSASLHandshake         bool\n\tsaslUsername             string\n\tsaslPassword             string\n\tsaslMechanism            string\n\tsaslDisablePAFXFast      bool\n\tuseTLS                   bool\n\ttlsServerName            string\n\ttlsCAFile                string\n\ttlsCertFile              string\n\ttlsKeyFile               string\n\tserverUseTLS             bool\n\tserverMutualAuthEnabled  bool\n\tserverTlsCAFile          string\n\tserverTlsCertFile        string\n\tserverTlsKeyFile         string\n\ttlsInsecureSkipTLSVerify bool\n\tkafkaVersion             string\n\tuseZooKeeperLag          bool\n\turiZookeeper             []string\n\tlabels                   string\n\tmetadataRefreshInterval  string\n\tserviceName              string\n\tkerberosConfigPath       string\n\trealm                    string\n\tkeyTabPath               string\n\tkerberosAuthType         string\n\toffsetShowAll            bool\n\ttopicWorkers             int\n\tallowConcurrent          bool\n\tallowAutoTopicCreation   bool\n\tverbosityLogLevel        int\n}\n\n// CanReadCertAndKey returns true if the certificate and key files already exists,\n// otherwise returns false. If lost one of cert and key, returns error.\nfunc CanReadCertAndKey(certPath, keyPath string) (bool, error) {\n\tcertReadable := canReadFile(certPath)\n\tkeyReadable := canReadFile(keyPath)\n\n\tif !certReadable && !keyReadable {\n\t\treturn false, nil\n\t}\n\n\tif !certReadable {\n\t\treturn false, fmt.Errorf(\"error reading %s, certificate and key must be supplied as a pair\", certPath)\n\t}\n\n\tif !keyReadable {\n\t\treturn false, fmt.Errorf(\"error reading %s, certificate and key must be supplied as a pair\", keyPath)\n\t}\n\n\treturn true, nil\n}\n\n// If the file represented by path exists and\n// readable, returns true otherwise returns false.\nfunc canReadFile(path string) bool {\n\tf, err := os.Open(path)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tdefer f.Close()\n\n\treturn true\n}\n\n// NewExporter returns an initialized Exporter.\nfunc NewExporter(opts kafkaOpts, topicFilter string, topicExclude string, groupFilter string, groupExclude string) (*Exporter, error) {\n\tvar zookeeperClient *kazoo.Kazoo\n\tconfig := sarama.NewConfig()\n\tconfig.ClientID = clientID\n\tkafkaVersion, err := sarama.ParseKafkaVersion(opts.kafkaVersion)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconfig.Version = kafkaVersion\n\n\tif opts.useSASL {\n\t\t// Convert to lowercase so that SHA512 and SHA256 is still valid\n\t\topts.saslMechanism = strings.ToLower(opts.saslMechanism)\n\t\tswitch opts.saslMechanism {\n\t\tcase \"scram-sha512\":\n\t\t\tconfig.Net.SASL.SCRAMClientGeneratorFunc = func() sarama.SCRAMClient { return &XDGSCRAMClient{HashGeneratorFcn: SHA512} }\n\t\t\tconfig.Net.SASL.Mechanism = sarama.SASLMechanism(sarama.SASLTypeSCRAMSHA512)\n\t\tcase \"scram-sha256\":\n\t\t\tconfig.Net.SASL.SCRAMClientGeneratorFunc = func() sarama.SCRAMClient { return &XDGSCRAMClient{HashGeneratorFcn: SHA256} }\n\t\t\tconfig.Net.SASL.Mechanism = sarama.SASLMechanism(sarama.SASLTypeSCRAMSHA256)\n\t\tcase \"gssapi\":\n\t\t\tconfig.Net.SASL.Mechanism = sarama.SASLMechanism(sarama.SASLTypeGSSAPI)\n\t\t\tconfig.Net.SASL.GSSAPI.ServiceName = opts.serviceName\n\t\t\tconfig.Net.SASL.GSSAPI.KerberosConfigPath = opts.kerberosConfigPath\n\t\t\tconfig.Net.SASL.GSSAPI.Realm = opts.realm\n\t\t\tconfig.Net.SASL.GSSAPI.Username = opts.saslUsername\n\t\t\tif opts.kerberosAuthType == \"keytabAuth\" {\n\t\t\t\tconfig.Net.SASL.GSSAPI.AuthType = sarama.KRB5_KEYTAB_AUTH\n\t\t\t\tconfig.Net.SASL.GSSAPI.KeyTabPath = opts.keyTabPath\n\t\t\t} else {\n\t\t\t\tconfig.Net.SASL.GSSAPI.AuthType = sarama.KRB5_USER_AUTH\n\t\t\t\tconfig.Net.SASL.GSSAPI.Password = opts.saslPassword\n\t\t\t}\n\t\t\tif opts.saslDisablePAFXFast {\n\t\t\t\tconfig.Net.SASL.GSSAPI.DisablePAFXFAST = true\n\t\t\t}\n\t\tcase \"plain\":\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\n\t\t\t\t`invalid sasl mechanism \"%s\": can only be \"scram-sha256\", \"scram-sha512\", \"gssapi\" or \"plain\"`,\n\t\t\t\topts.saslMechanism,\n\t\t\t)\n\t\t}\n\n\t\tconfig.Net.SASL.Enable = true\n\t\tconfig.Net.SASL.Handshake = opts.useSASLHandshake\n\n\t\tif opts.saslUsername != \"\" {\n\t\t\tconfig.Net.SASL.User = opts.saslUsername\n\t\t}\n\n\t\tif opts.saslPassword != \"\" {\n\t\t\tconfig.Net.SASL.Password = opts.saslPassword\n\t\t}\n\t}\n\n\tif opts.useTLS {\n\t\tconfig.Net.TLS.Enable = true\n\n\t\tconfig.Net.TLS.Config = &tls.Config{\n\t\t\tServerName:         opts.tlsServerName,\n\t\t\tInsecureSkipVerify: opts.tlsInsecureSkipTLSVerify,\n\t\t}\n\n\t\tif opts.tlsCAFile != \"\" {\n\t\t\tif ca, err := os.ReadFile(opts.tlsCAFile); err == nil {\n\t\t\t\tconfig.Net.TLS.Config.RootCAs = x509.NewCertPool()\n\t\t\t\tconfig.Net.TLS.Config.RootCAs.AppendCertsFromPEM(ca)\n\t\t\t} else {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\n\t\tcanReadCertAndKey, err := CanReadCertAndKey(opts.tlsCertFile, opts.tlsKeyFile)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"error reading cert and key\")\n\t\t}\n\t\tif canReadCertAndKey {\n\t\t\tcert, err := tls.LoadX509KeyPair(opts.tlsCertFile, opts.tlsKeyFile)\n\t\t\tif err == nil {\n\t\t\t\tconfig.Net.TLS.Config.Certificates = []tls.Certificate{cert}\n\t\t\t} else {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\n\tif opts.useZooKeeperLag {\n\t\tklog.V(DEBUG).Infoln(\"Using zookeeper lag, so connecting to zookeeper\")\n\t\tzookeeperClient, err = kazoo.NewKazoo(opts.uriZookeeper, nil)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"error connecting to zookeeper\")\n\t\t}\n\t}\n\n\tinterval, err := time.ParseDuration(opts.metadataRefreshInterval)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"Cannot parse metadata refresh interval\")\n\t}\n\n\tconfig.Metadata.RefreshFrequency = interval\n\n\tconfig.Metadata.AllowAutoTopicCreation = opts.allowAutoTopicCreation\n\n\tclient, err := sarama.NewClient(opts.uri, config)\n\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"Error Init Kafka Client\")\n\t}\n\n\tklog.V(TRACE).Infoln(\"Done Init Clients\")\n\t// Init our exporter.\n\treturn &Exporter{\n\t\tclient:                  client,\n\t\ttopicFilter:             regexp.MustCompile(topicFilter),\n\t\ttopicExclude:            regexp.MustCompile(topicExclude),\n\t\tgroupFilter:             regexp.MustCompile(groupFilter),\n\t\tgroupExclude:            regexp.MustCompile(groupExclude),\n\t\tuseZooKeeperLag:         opts.useZooKeeperLag,\n\t\tzookeeperClient:         zookeeperClient,\n\t\tnextMetadataRefresh:     time.Now(),\n\t\tmetadataRefreshInterval: interval,\n\t\toffsetShowAll:           opts.offsetShowAll,\n\t\ttopicWorkers:            opts.topicWorkers,\n\t\tallowConcurrent:         opts.allowConcurrent,\n\t\tsgMutex:                 sync.Mutex{},\n\t\tsgWaitCh:                nil,\n\t\tsgChans:                 []chan<- prometheus.Metric{},\n\t\tconsumerGroupFetchAll:   config.Version.IsAtLeast(sarama.V2_0_0_0),\n\t}, nil\n}\n\nfunc (e *Exporter) fetchOffsetVersion() int16 {\n\tversion := e.client.Config().Version\n\tif e.client.Config().Version.IsAtLeast(sarama.V2_0_0_0) {\n\t\treturn 4\n\t} else if version.IsAtLeast(sarama.V0_10_2_0) {\n\t\treturn 2\n\t} else if version.IsAtLeast(sarama.V0_8_2_2) {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\n// Describe describes all the metrics ever exported by the Kafka exporter. It\n// implements prometheus.Collector.\nfunc (e *Exporter) Describe(ch chan<- *prometheus.Desc) {\n\tch <- clusterBrokers\n\tch <- topicCurrentOffset\n\tch <- topicOldestOffset\n\tch <- topicPartitions\n\tch <- topicPartitionLeader\n\tch <- topicPartitionReplicas\n\tch <- topicPartitionInSyncReplicas\n\tch <- topicPartitionUsesPreferredReplica\n\tch <- topicUnderReplicatedPartition\n\tch <- consumergroupCurrentOffset\n\tch <- consumergroupCurrentOffsetSum\n\tch <- consumergroupLag\n\tch <- consumergroupLagZookeeper\n\tch <- consumergroupLagSum\n}\n\n// Collect fetches the stats from configured Kafka location and delivers them\n// as Prometheus metrics. It implements prometheus.Collector.\nfunc (e *Exporter) Collect(ch chan<- prometheus.Metric) {\n\tif e.allowConcurrent {\n\t\te.collect(ch)\n\t\treturn\n\t}\n\t// Locking to avoid race add\n\te.sgMutex.Lock()\n\te.sgChans = append(e.sgChans, ch)\n\t// Safe to compare length since we own the Lock\n\tif len(e.sgChans) == 1 {\n\t\te.sgWaitCh = make(chan struct{})\n\t\tgo e.collectChans(e.sgWaitCh)\n\t} else {\n\t\tklog.V(TRACE).Info(\"concurrent calls detected, waiting for first to finish\")\n\t}\n\t// Put in another variable to ensure not overwriting it in another Collect once we wait\n\twaiter := e.sgWaitCh\n\te.sgMutex.Unlock()\n\t// Released lock, we have insurance that our chan will be part of the collectChan slice\n\t<-waiter\n\t// collectChan finished\n}\n\nfunc (e *Exporter) collectChans(quit chan struct{}) {\n\toriginal := make(chan prometheus.Metric)\n\tcontainer := make([]prometheus.Metric, 0, 100)\n\tgo func() {\n\t\tfor metric := range original {\n\t\t\tcontainer = append(container, metric)\n\t\t}\n\t}()\n\te.collect(original)\n\tclose(original)\n\t// Lock to avoid modification on the channel slice\n\te.sgMutex.Lock()\n\tfor _, ch := range e.sgChans {\n\t\tfor _, metric := range container {\n\t\t\tch <- metric\n\t\t}\n\t}\n\t// Reset the slice\n\te.sgChans = e.sgChans[:0]\n\t// Notify remaining waiting Collect they can return\n\tclose(quit)\n\t// Release the lock so Collect can append to the slice again\n\te.sgMutex.Unlock()\n}\n\nfunc (e *Exporter) collect(ch chan<- prometheus.Metric) {\n\tvar wg = sync.WaitGroup{}\n\tch <- prometheus.MustNewConstMetric(\n\t\tclusterBrokers, prometheus.GaugeValue, float64(len(e.client.Brokers())),\n\t)\n\tfor _, b := range e.client.Brokers() {\n\t\tch <- prometheus.MustNewConstMetric(\n\t\t\tclusterBrokerInfo, prometheus.GaugeValue, 1, strconv.Itoa(int(b.ID())), b.Addr(),\n\t\t)\n\t}\n\n\toffset := make(map[string]map[int32]int64)\n\n\tnow := time.Now()\n\n\tif now.After(e.nextMetadataRefresh) {\n\t\tklog.V(DEBUG).Info(\"Refreshing client metadata\")\n\n\t\tif err := e.client.RefreshMetadata(); err != nil {\n\t\t\tklog.Errorf(\"Cannot refresh topics, using cached data: %v\", err)\n\t\t}\n\n\t\te.nextMetadataRefresh = now.Add(e.metadataRefreshInterval)\n\t}\n\n\ttopics, err := e.client.Topics()\n\tif err != nil {\n\t\tklog.Errorf(\"Cannot get topics: %v\", err)\n\t\treturn\n\t}\n\n\ttopicChannel := make(chan string)\n\n\tgetTopicMetrics := func(topic string) {\n\t\tdefer wg.Done()\n\n\t\tif !e.topicFilter.MatchString(topic) || e.topicExclude.MatchString(topic) {\n\t\t\treturn\n\t\t}\n\n\t\tpartitions, err := e.client.Partitions(topic)\n\t\tif err != nil {\n\t\t\tklog.Errorf(\"Cannot get partitions of topic %s: %v\", topic, err)\n\t\t\treturn\n\t\t}\n\t\tch <- prometheus.MustNewConstMetric(\n\t\t\ttopicPartitions, prometheus.GaugeValue, float64(len(partitions)), topic,\n\t\t)\n\t\te.mu.Lock()\n\t\toffset[topic] = make(map[int32]int64, len(partitions))\n\t\te.mu.Unlock()\n\t\tfor _, partition := range partitions {\n\t\t\tbroker, err := e.client.Leader(topic, partition)\n\t\t\tif err != nil {\n\t\t\t\tklog.Errorf(\"Cannot get leader of topic %s partition %d: %v\", topic, partition, err)\n\t\t\t} else {\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\ttopicPartitionLeader, prometheus.GaugeValue, float64(broker.ID()), topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tcurrentOffset, err := e.client.GetOffset(topic, partition, sarama.OffsetNewest)\n\t\t\tif err != nil {\n\t\t\t\tklog.Errorf(\"Cannot get current offset of topic %s partition %d: %v\", topic, partition, err)\n\t\t\t} else {\n\t\t\t\te.mu.Lock()\n\t\t\t\toffset[topic][partition] = currentOffset\n\t\t\t\te.mu.Unlock()\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\ttopicCurrentOffset, prometheus.GaugeValue, float64(currentOffset), topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t)\n\t\t\t}\n\n\t\t\toldestOffset, err := e.client.GetOffset(topic, partition, sarama.OffsetOldest)\n\t\t\tif err != nil {\n\t\t\t\tklog.Errorf(\"Cannot get oldest offset of topic %s partition %d: %v\", topic, partition, err)\n\t\t\t} else {\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\ttopicOldestOffset, prometheus.GaugeValue, float64(oldestOffset), topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t)\n\t\t\t}\n\n\t\t\treplicas, err := e.client.Replicas(topic, partition)\n\t\t\tif err != nil {\n\t\t\t\tklog.Errorf(\"Cannot get replicas of topic %s partition %d: %v\", topic, partition, err)\n\t\t\t} else {\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\ttopicPartitionReplicas, prometheus.GaugeValue, float64(len(replicas)), topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tinSyncReplicas, err := e.client.InSyncReplicas(topic, partition)\n\t\t\tif err != nil {\n\t\t\t\tklog.Errorf(\"Cannot get in-sync replicas of topic %s partition %d: %v\", topic, partition, err)\n\t\t\t} else {\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\ttopicPartitionInSyncReplicas, prometheus.GaugeValue, float64(len(inSyncReplicas)), topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif broker != nil && replicas != nil && len(replicas) > 0 && broker.ID() == replicas[0] {\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\ttopicPartitionUsesPreferredReplica, prometheus.GaugeValue, float64(1), topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\ttopicPartitionUsesPreferredReplica, prometheus.GaugeValue, float64(0), topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif replicas != nil && inSyncReplicas != nil && len(inSyncReplicas) < len(replicas) {\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\ttopicUnderReplicatedPartition, prometheus.GaugeValue, float64(1), topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\ttopicUnderReplicatedPartition, prometheus.GaugeValue, float64(0), topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif e.useZooKeeperLag {\n\t\t\t\tConsumerGroups, err := e.zookeeperClient.Consumergroups()\n\n\t\t\t\tif err != nil {\n\t\t\t\t\tklog.Errorf(\"Cannot get consumer group %v\", err)\n\t\t\t\t}\n\n\t\t\t\tfor _, group := range ConsumerGroups {\n\t\t\t\t\toffset, _ := group.FetchOffset(topic, partition)\n\t\t\t\t\tif offset > 0 {\n\n\t\t\t\t\t\tconsumerGroupLag := currentOffset - offset\n\t\t\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\t\t\tconsumergroupLagZookeeper, prometheus.GaugeValue, float64(consumerGroupLag), group.Name, topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tloopTopics := func() {\n\t\tok := true\n\t\tfor ok {\n\t\t\ttopic, open := <-topicChannel\n\t\t\tok = open\n\t\t\tif open {\n\t\t\t\tgetTopicMetrics(topic)\n\t\t\t}\n\t\t}\n\t}\n\n\tminx := func(x int, y int) int {\n\t\tif x < y {\n\t\t\treturn x\n\t\t} else {\n\t\t\treturn y\n\t\t}\n\t}\n\n\tN := len(topics)\n\tif N > 1 {\n\t\tN = minx(N/2, e.topicWorkers)\n\t}\n\n\tfor w := 1; w <= N; w++ {\n\t\tgo loopTopics()\n\t}\n\n\tfor _, topic := range topics {\n\t\tif e.topicFilter.MatchString(topic) && !e.topicExclude.MatchString(topic) {\n\t\t\twg.Add(1)\n\t\t\ttopicChannel <- topic\n\t\t}\n\t}\n\tclose(topicChannel)\n\n\twg.Wait()\n\n\tgetConsumerGroupMetrics := func(broker *sarama.Broker) {\n\t\tdefer wg.Done()\n\t\tif err := broker.Open(e.client.Config()); err != nil && err != sarama.ErrAlreadyConnected {\n\t\t\tklog.Errorf(\"Cannot connect to broker %d: %v\", broker.ID(), err)\n\t\t\treturn\n\t\t}\n\t\tdefer broker.Close()\n\n\t\tgroups, err := broker.ListGroups(&sarama.ListGroupsRequest{})\n\t\tif err != nil {\n\t\t\tklog.Errorf(\"Cannot get consumer group: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tgroupIds := make([]string, 0)\n\t\tfor groupId := range groups.Groups {\n\t\t\tif e.groupFilter.MatchString(groupId) && !e.groupExclude.MatchString(groupId) {\n\t\t\t\tgroupIds = append(groupIds, groupId)\n\t\t\t}\n\t\t}\n\n\t\tdescribeGroups, err := broker.DescribeGroups(&sarama.DescribeGroupsRequest{Groups: groupIds})\n\t\tif err != nil {\n\t\t\tklog.Errorf(\"Cannot get describe groups: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tfor _, group := range describeGroups.Groups {\n\t\t\tif group.Err != 0 {\n\t\t\t\tklog.Errorf(\"Cannot describe for the group %s with error code %d\", group.GroupId, group.Err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\toffsetFetchRequest := sarama.OffsetFetchRequest{ConsumerGroup: group.GroupId, Version: e.fetchOffsetVersion()}\n\t\t\tif e.offsetShowAll {\n\t\t\t\tfor topic, partitions := range offset {\n\t\t\t\t\tfor partition := range partitions {\n\t\t\t\t\t\toffsetFetchRequest.AddPartition(topic, partition)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor _, member := range group.Members {\n\t\t\t\t\tif len(member.MemberAssignment) == 0 {\n\t\t\t\t\t\tklog.Warningf(\"MemberAssignment is empty for group member: %v in group: %v\", member.MemberId, group.GroupId)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tassignment, err := member.GetMemberAssignment()\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tklog.Errorf(\"Cannot get GetMemberAssignment of group member %v : %v\", member, err)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tfor topic, partions := range assignment.Topics {\n\t\t\t\t\t\tfor _, partition := range partions {\n\t\t\t\t\t\t\toffsetFetchRequest.AddPartition(topic, partition)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\tconsumergroupMembers, prometheus.GaugeValue, float64(len(group.Members)), group.GroupId,\n\t\t\t)\n\t\t\toffsetFetchResponse, err := broker.FetchOffset(&offsetFetchRequest)\n\t\t\tif err != nil {\n\t\t\t\tklog.Errorf(\"Cannot get offset of group %s: %v\", group.GroupId, err)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tfor topic, partitions := range offsetFetchResponse.Blocks {\n\t\t\t\t// If the topic is not consumed by that consumer group, skip it\n\t\t\t\ttopicConsumed := false\n\t\t\t\tfor _, offsetFetchResponseBlock := range partitions {\n\t\t\t\t\t// Kafka will return -1 if there is no offset associated with a topic-partition under that consumer group\n\t\t\t\t\tif offsetFetchResponseBlock.Offset != -1 {\n\t\t\t\t\t\ttopicConsumed = true\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif !topicConsumed {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tvar currentOffsetSum int64\n\t\t\t\tvar lagSum int64\n\t\t\t\tfor partition, offsetFetchResponseBlock := range partitions {\n\t\t\t\t\terr := offsetFetchResponseBlock.Err\n\t\t\t\t\tif err != sarama.ErrNoError {\n\t\t\t\t\t\tklog.Errorf(\"Error for  partition %d :%v\", partition, err.Error())\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tcurrentOffset := offsetFetchResponseBlock.Offset\n\t\t\t\t\tcurrentOffsetSum += currentOffset\n\t\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\t\tconsumergroupCurrentOffset, prometheus.GaugeValue, float64(currentOffset), group.GroupId, topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t\t)\n\t\t\t\t\te.mu.Lock()\n\t\t\t\t\tif offset, ok := offset[topic][partition]; ok {\n\t\t\t\t\t\t// If the topic is consumed by that consumer group, but no offset associated with the partition\n\t\t\t\t\t\t// forcing lag to -1 to be able to alert on that\n\t\t\t\t\t\tvar lag int64\n\t\t\t\t\t\tif offsetFetchResponseBlock.Offset == -1 {\n\t\t\t\t\t\t\tlag = -1\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlag = offset - offsetFetchResponseBlock.Offset\n\t\t\t\t\t\t\tlagSum += lag\n\t\t\t\t\t\t}\n\t\t\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\t\t\tconsumergroupLag, prometheus.GaugeValue, float64(lag), group.GroupId, topic, strconv.FormatInt(int64(partition), 10),\n\t\t\t\t\t\t)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tklog.Errorf(\"No offset of topic %s partition %d, cannot get consumer group lag\", topic, partition)\n\t\t\t\t\t}\n\t\t\t\t\te.mu.Unlock()\n\t\t\t\t}\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\tconsumergroupCurrentOffsetSum, prometheus.GaugeValue, float64(currentOffsetSum), group.GroupId, topic,\n\t\t\t\t)\n\t\t\t\tch <- prometheus.MustNewConstMetric(\n\t\t\t\t\tconsumergroupLagSum, prometheus.GaugeValue, float64(lagSum), group.GroupId, topic,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tklog.V(DEBUG).Info(\"Fetching consumer group metrics\")\n\tif len(e.client.Brokers()) > 0 {\n\t\tuniqueBrokerAddresses := make(map[string]bool)\n\t\tvar servers []string\n\t\tfor _, broker := range e.client.Brokers() {\n\t\t\tnormalizedAddress := strings.ToLower(broker.Addr())\n\t\t\tif !uniqueBrokerAddresses[normalizedAddress] {\n\t\t\t\tuniqueBrokerAddresses[normalizedAddress] = true\n\t\t\t\tservers = append(servers, broker.Addr())\n\t\t\t}\n\t\t}\n\t\tklog.Info(servers)\n\t\tfor _, broker := range e.client.Brokers() {\n\t\t\tfor _, server := range servers {\n\t\t\t\tif server == broker.Addr() {\n\t\t\t\t\twg.Add(1)\n\t\t\t\t\tgo getConsumerGroupMetrics(broker)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twg.Wait()\n\t} else {\n\t\tklog.Errorln(\"No valid broker, cannot get consumer group metrics\")\n\t}\n}\n\nfunc init() {\n\tmetrics.UseNilMetrics = true\n\tprometheus.MustRegister(collectors.NewBuildInfoCollector())\n}\n\n//func toFlag(name string, help string) *kingpin.FlagClause {\n//\tflag.CommandLine.String(name, \"\", help) // hack around flag.Parse and klog.init flags\n//\treturn kingpin.Flag(name, help)\n//}\n\n// hack around flag.Parse and klog.init flags\nfunc toFlagString(name string, help string, value string) *string {\n\tflag.CommandLine.String(name, value, help) // hack around flag.Parse and klog.init flags\n\treturn kingpin.Flag(name, help).Default(value).String()\n}\n\nfunc toFlagBool(name string, help string, value bool, valueString string) *bool {\n\tflag.CommandLine.Bool(name, value, help) // hack around flag.Parse and klog.init flags\n\treturn kingpin.Flag(name, help).Default(valueString).Bool()\n}\n\nfunc toFlagStringsVar(name string, help string, value string, target *[]string) {\n\tflag.CommandLine.String(name, value, help) // hack around flag.Parse and klog.init flags\n\tkingpin.Flag(name, help).Default(value).StringsVar(target)\n}\n\nfunc toFlagStringVar(name string, help string, value string, target *string) {\n\tflag.CommandLine.String(name, value, help) // hack around flag.Parse and klog.init flags\n\tkingpin.Flag(name, help).Default(value).StringVar(target)\n}\n\nfunc toFlagBoolVar(name string, help string, value bool, valueString string, target *bool) {\n\tflag.CommandLine.Bool(name, value, help) // hack around flag.Parse and klog.init flags\n\tkingpin.Flag(name, help).Default(valueString).BoolVar(target)\n}\n\nfunc toFlagIntVar(name string, help string, value int, valueString string, target *int) {\n\tflag.CommandLine.Int(name, value, help) // hack around flag.Parse and klog.init flags\n\tkingpin.Flag(name, help).Default(valueString).IntVar(target)\n}\n\nfunc main() {\n\tvar (\n\t\tlistenAddress = toFlagString(\"web.listen-address\", \"Address to listen on for web interface and telemetry.\", \":9308\")\n\t\tmetricsPath   = toFlagString(\"web.telemetry-path\", \"Path under which to expose metrics.\", \"/metrics\")\n\t\ttopicFilter   = toFlagString(\"topic.filter\", \"Regex that determines which topics to collect.\", \".*\")\n\t\ttopicExclude  = toFlagString(\"topic.exclude\", \"Regex that determines which topics to exclude.\", \"^$\")\n\t\tgroupFilter   = toFlagString(\"group.filter\", \"Regex that determines which consumer groups to collect.\", \".*\")\n\t\tgroupExclude  = toFlagString(\"group.exclude\", \"Regex that determines which consumer groups to exclude.\", \"^$\")\n\t\tlogSarama     = toFlagBool(\"log.enable-sarama\", \"Turn on Sarama logging, default is false.\", false, \"false\")\n\n\t\topts = kafkaOpts{}\n\t)\n\n\ttoFlagStringsVar(\"kafka.server\", \"Address (host:port) of Kafka server.\", \"kafka:9092\", &opts.uri)\n\ttoFlagBoolVar(\"sasl.enabled\", \"Connect using SASL/PLAIN, default is false.\", false, \"false\", &opts.useSASL)\n\ttoFlagBoolVar(\"sasl.handshake\", \"Only set this to false if using a non-Kafka SASL proxy, default is true.\", true, \"true\", &opts.useSASLHandshake)\n\ttoFlagStringVar(\"sasl.username\", \"SASL user name.\", \"\", &opts.saslUsername)\n\ttoFlagStringVar(\"sasl.password\", \"SASL user password.\", \"\", &opts.saslPassword)\n\ttoFlagStringVar(\"sasl.mechanism\", \"The SASL SCRAM SHA algorithm sha256 or sha512 or gssapi as mechanism\", \"\", &opts.saslMechanism)\n\ttoFlagStringVar(\"sasl.service-name\", \"Service name when using kerberos Auth\", \"\", &opts.serviceName)\n\ttoFlagStringVar(\"sasl.kerberos-config-path\", \"Kerberos config path\", \"\", &opts.kerberosConfigPath)\n\ttoFlagStringVar(\"sasl.realm\", \"Kerberos realm\", \"\", &opts.realm)\n\ttoFlagStringVar(\"sasl.kerberos-auth-type\", \"Kerberos auth type. Either 'keytabAuth' or 'userAuth'\", \"\", &opts.kerberosAuthType)\n\ttoFlagStringVar(\"sasl.keytab-path\", \"Kerberos keytab file path\", \"\", &opts.keyTabPath)\n\ttoFlagBoolVar(\"sasl.disable-PA-FX-FAST\", \"Configure the Kerberos client to not use PA_FX_FAST, default is false.\", false, \"false\", &opts.saslDisablePAFXFast)\n\ttoFlagBoolVar(\"tls.enabled\", \"Connect to Kafka using TLS, default is false.\", false, \"false\", &opts.useTLS)\n\ttoFlagStringVar(\"tls.server-name\", \"Used to verify the hostname on the returned certificates unless tls.insecure-skip-tls-verify is given. The kafka server's name should be given.\", \"\", &opts.tlsServerName)\n\ttoFlagStringVar(\"tls.ca-file\", \"The optional certificate authority file for Kafka TLS client authentication.\", \"\", &opts.tlsCAFile)\n\ttoFlagStringVar(\"tls.cert-file\", \"The optional certificate file for Kafka client authentication.\", \"\", &opts.tlsCertFile)\n\ttoFlagStringVar(\"tls.key-file\", \"The optional key file for Kafka client authentication.\", \"\", &opts.tlsKeyFile)\n\ttoFlagBoolVar(\"server.tls.enabled\", \"Enable TLS for web server, default is false.\", false, \"false\", &opts.serverUseTLS)\n\ttoFlagBoolVar(\"server.tls.mutual-auth-enabled\", \"Enable TLS client mutual authentication, default is false.\", false, \"false\", &opts.serverMutualAuthEnabled)\n\ttoFlagStringVar(\"server.tls.ca-file\", \"The certificate authority file for the web server.\", \"\", &opts.serverTlsCAFile)\n\ttoFlagStringVar(\"server.tls.cert-file\", \"The certificate file for the web server.\", \"\", &opts.serverTlsCertFile)\n\ttoFlagStringVar(\"server.tls.key-file\", \"The key file for the web server.\", \"\", &opts.serverTlsKeyFile)\n\ttoFlagBoolVar(\"tls.insecure-skip-tls-verify\", \"If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure. Default is false\", false, \"false\", &opts.tlsInsecureSkipTLSVerify)\n\ttoFlagStringVar(\"kafka.version\", \"Kafka broker version\", sarama.V2_0_0_0.String(), &opts.kafkaVersion)\n\ttoFlagBoolVar(\"use.consumelag.zookeeper\", \"if you need to use a group from zookeeper, default is false\", false, \"false\", &opts.useZooKeeperLag)\n\ttoFlagStringsVar(\"zookeeper.server\", \"Address (hosts) of zookeeper server.\", \"localhost:2181\", &opts.uriZookeeper)\n\ttoFlagStringVar(\"kafka.labels\", \"Kafka cluster name\", \"\", &opts.labels)\n\ttoFlagStringVar(\"refresh.metadata\", \"Metadata refresh interval\", \"30s\", &opts.metadataRefreshInterval)\n\ttoFlagBoolVar(\"offset.show-all\", \"Whether show the offset/lag for all consumer group, otherwise, only show connected consumer groups, default is true\", true, \"true\", &opts.offsetShowAll)\n\ttoFlagBoolVar(\"concurrent.enable\", \"If true, all scrapes will trigger kafka operations otherwise, they will share results. WARN: This should be disabled on large clusters. Default is false\", false, \"false\", &opts.allowConcurrent)\n\ttoFlagIntVar(\"topic.workers\", \"Number of topic workers\", 100, \"100\", &opts.topicWorkers)\n\ttoFlagBoolVar(\"kafka.allow-auto-topic-creation\", \"If true, the broker may auto-create topics that we requested which do not already exist, default is false.\", false, \"false\", &opts.allowAutoTopicCreation)\n\ttoFlagIntVar(\"verbosity\", \"Verbosity log level\", 0, \"0\", &opts.verbosityLogLevel)\n\n\tplConfig := plog.Config{}\n\tplogflag.AddFlags(kingpin.CommandLine, &plConfig)\n\tkingpin.Version(version.Print(\"kafka_exporter\"))\n\tkingpin.HelpFlag.Short('h')\n\tkingpin.Parse()\n\n\tlabels := make(map[string]string)\n\n\t// Protect against empty labels\n\tif opts.labels != \"\" {\n\t\tfor _, label := range strings.Split(opts.labels, \",\") {\n\t\t\tsplitted := strings.Split(label, \"=\")\n\t\t\tif len(splitted) >= 2 {\n\t\t\t\tlabels[splitted[0]] = splitted[1]\n\t\t\t}\n\t\t}\n\t}\n\n\tsetup(*listenAddress, *metricsPath, *topicFilter, *topicExclude, *groupFilter, *groupExclude, *logSarama, opts, labels)\n}\n\nfunc setup(\n\tlistenAddress string,\n\tmetricsPath string,\n\ttopicFilter string,\n\ttopicExclude string,\n\tgroupFilter string,\n\tgroupExclude string,\n\tlogSarama bool,\n\topts kafkaOpts,\n\tlabels map[string]string,\n) {\n\tklog.InitFlags(flag.CommandLine)\n\tif err := flag.Set(\"logtostderr\", \"true\"); err != nil {\n\t\tklog.Errorf(\"Error on setting logtostderr to true: %v\", err)\n\t}\n\terr := flag.Set(\"v\", strconv.Itoa(opts.verbosityLogLevel))\n\tif err != nil {\n\t\tklog.Errorf(\"Error on setting v to %v: %v\", strconv.Itoa(opts.verbosityLogLevel), err)\n\t}\n\tdefer klog.Flush()\n\n\tklog.V(INFO).Infoln(\"Starting kafka_exporter\", version.Info())\n\tklog.V(DEBUG).Infoln(\"Build context\", version.BuildContext())\n\n\tclusterBrokers = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"\", \"brokers\"),\n\t\t\"Number of Brokers in the Kafka Cluster.\",\n\t\tnil, labels,\n\t)\n\tclusterBrokerInfo = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"\", \"broker_info\"),\n\t\t\"Information about the Kafka Broker.\",\n\t\t[]string{\"id\", \"address\"}, labels,\n\t)\n\ttopicPartitions = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"topic\", \"partitions\"),\n\t\t\"Number of partitions for this Topic\",\n\t\t[]string{\"topic\"}, labels,\n\t)\n\ttopicCurrentOffset = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"topic\", \"partition_current_offset\"),\n\t\t\"Current Offset of a Broker at Topic/Partition\",\n\t\t[]string{\"topic\", \"partition\"}, labels,\n\t)\n\ttopicOldestOffset = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"topic\", \"partition_oldest_offset\"),\n\t\t\"Oldest Offset of a Broker at Topic/Partition\",\n\t\t[]string{\"topic\", \"partition\"}, labels,\n\t)\n\n\ttopicPartitionLeader = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"topic\", \"partition_leader\"),\n\t\t\"Leader Broker ID of this Topic/Partition\",\n\t\t[]string{\"topic\", \"partition\"}, labels,\n\t)\n\n\ttopicPartitionReplicas = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"topic\", \"partition_replicas\"),\n\t\t\"Number of Replicas for this Topic/Partition\",\n\t\t[]string{\"topic\", \"partition\"}, labels,\n\t)\n\n\ttopicPartitionInSyncReplicas = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"topic\", \"partition_in_sync_replica\"),\n\t\t\"Number of In-Sync Replicas for this Topic/Partition\",\n\t\t[]string{\"topic\", \"partition\"}, labels,\n\t)\n\n\ttopicPartitionUsesPreferredReplica = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"topic\", \"partition_leader_is_preferred\"),\n\t\t\"1 if Topic/Partition is using the Preferred Broker\",\n\t\t[]string{\"topic\", \"partition\"}, labels,\n\t)\n\n\ttopicUnderReplicatedPartition = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"topic\", \"partition_under_replicated_partition\"),\n\t\t\"1 if Topic/Partition is under Replicated\",\n\t\t[]string{\"topic\", \"partition\"}, labels,\n\t)\n\n\tconsumergroupCurrentOffset = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"consumergroup\", \"current_offset\"),\n\t\t\"Current Offset of a ConsumerGroup at Topic/Partition\",\n\t\t[]string{\"consumergroup\", \"topic\", \"partition\"}, labels,\n\t)\n\n\tconsumergroupCurrentOffsetSum = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"consumergroup\", \"current_offset_sum\"),\n\t\t\"Current Offset of a ConsumerGroup at Topic for all partitions\",\n\t\t[]string{\"consumergroup\", \"topic\"}, labels,\n\t)\n\n\tconsumergroupLag = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"consumergroup\", \"lag\"),\n\t\t\"Current Approximate Lag of a ConsumerGroup at Topic/Partition\",\n\t\t[]string{\"consumergroup\", \"topic\", \"partition\"}, labels,\n\t)\n\n\tconsumergroupLagZookeeper = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"consumergroupzookeeper\", \"lag_zookeeper\"),\n\t\t\"Current Approximate Lag(zookeeper) of a ConsumerGroup at Topic/Partition\",\n\t\t[]string{\"consumergroup\", \"topic\", \"partition\"}, nil,\n\t)\n\n\tconsumergroupLagSum = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"consumergroup\", \"lag_sum\"),\n\t\t\"Current Approximate Lag of a ConsumerGroup at Topic for all partitions\",\n\t\t[]string{\"consumergroup\", \"topic\"}, labels,\n\t)\n\n\tconsumergroupMembers = prometheus.NewDesc(\n\t\tprometheus.BuildFQName(namespace, \"consumergroup\", \"members\"),\n\t\t\"Amount of members in a consumer group\",\n\t\t[]string{\"consumergroup\"}, labels,\n\t)\n\n\tif logSarama {\n\t\tsarama.Logger = log.New(os.Stdout, \"[sarama] \", log.LstdFlags)\n\t}\n\n\texporter, err := NewExporter(opts, topicFilter, topicExclude, groupFilter, groupExclude)\n\tif err != nil {\n\t\tklog.Fatalln(err)\n\t}\n\tdefer exporter.client.Close()\n\tprometheus.MustRegister(exporter)\n\n\thttp.Handle(metricsPath, promhttp.Handler())\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t_, err := w.Write([]byte(`<html>\n\t        <head><title>Kafka Exporter</title></head>\n\t        <body>\n\t        <h1>Kafka Exporter</h1>\n\t        <p><a href='` + metricsPath + `'>Metrics</a></p>\n\t        </body>\n\t        </html>`))\n\t\tif err != nil {\n\t\t\tklog.Error(\"Error handle / request\", err)\n\t\t}\n\t})\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// need more specific sarama check\n\t\t_, err := w.Write([]byte(\"ok\"))\n\t\tif err != nil {\n\t\t\tklog.Error(\"Error handle /healthz request\", err)\n\t\t}\n\t})\n\n\tif opts.serverUseTLS {\n\t\tklog.V(INFO).Infoln(\"Listening on HTTPS\", listenAddress)\n\n\t\t_, err := CanReadCertAndKey(opts.serverTlsCertFile, opts.serverTlsKeyFile)\n\t\tif err != nil {\n\t\t\tklog.Error(\"error reading server cert and key\")\n\t\t}\n\n\t\tclientAuthType := tls.NoClientCert\n\t\tif opts.serverMutualAuthEnabled {\n\t\t\tclientAuthType = tls.RequireAndVerifyClientCert\n\t\t}\n\n\t\tcertPool := x509.NewCertPool()\n\t\tif opts.serverTlsCAFile != \"\" {\n\t\t\tif caCert, err := os.ReadFile(opts.serverTlsCAFile); err == nil {\n\t\t\t\tcertPool.AppendCertsFromPEM(caCert)\n\t\t\t} else {\n\t\t\t\tklog.Error(\"error reading server ca\")\n\t\t\t}\n\t\t}\n\n\t\ttlsConfig := &tls.Config{\n\t\t\tClientCAs:                certPool,\n\t\t\tClientAuth:               clientAuthType,\n\t\t\tMinVersion:               tls.VersionTLS12,\n\t\t\tCurvePreferences:         []tls.CurveID{tls.CurveP521, tls.CurveP384, tls.CurveP256},\n\t\t\tPreferServerCipherSuites: true,\n\t\t\tCipherSuites: []uint16{\n\t\t\t\ttls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,\n\t\t\t\ttls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n\t\t\t\ttls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,\n\t\t\t\ttls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,\n\t\t\t\ttls.TLS_RSA_WITH_AES_256_GCM_SHA384,\n\t\t\t\ttls.TLS_RSA_WITH_AES_256_CBC_SHA,\n\t\t\t\ttls.TLS_RSA_WITH_AES_128_CBC_SHA256,\n\t\t\t},\n\t\t}\n\t\tserver := &http.Server{\n\t\t\tAddr:      listenAddress,\n\t\t\tTLSConfig: tlsConfig,\n\t\t}\n\t\tklog.Fatal(server.ListenAndServeTLS(opts.serverTlsCertFile, opts.serverTlsKeyFile))\n\t} else {\n\t\tklog.V(INFO).Infoln(\"Listening on HTTP\", listenAddress)\n\t\tklog.Fatal(http.ListenAndServe(listenAddress, nil))\n\t}\n}\n"
        },
        {
          "name": "kafka_exporter_overview.json",
          "type": "blob",
          "size": 13.146484375,
          "content": "{\n  \"__inputs\": [\n    {\n      \"name\": \"DS_PROMETHEUS_WH211\",\n      \"label\": \"Prometheus_Wh211\",\n      \"description\": \"\",\n      \"type\": \"datasource\",\n      \"pluginId\": \"prometheus\",\n      \"pluginName\": \"Prometheus\"\n    }\n  ],\n  \"__requires\": [\n    {\n      \"type\": \"grafana\",\n      \"id\": \"grafana\",\n      \"name\": \"Grafana\",\n      \"version\": \"5.1.1\"\n    },\n    {\n      \"type\": \"panel\",\n      \"id\": \"graph\",\n      \"name\": \"Graph\",\n      \"version\": \"5.0.0\"\n    },\n    {\n      \"type\": \"datasource\",\n      \"id\": \"prometheus\",\n      \"name\": \"Prometheus\",\n      \"version\": \"5.0.0\"\n    }\n  ],\n  \"annotations\": {\n    \"list\": [\n      {\n        \"builtIn\": 1,\n        \"datasource\": \"-- Grafana --\",\n        \"enable\": true,\n        \"hide\": true,\n        \"iconColor\": \"rgba(0, 211, 255, 1)\",\n        \"name\": \"Annotations & Alerts\",\n        \"type\": \"dashboard\"\n      }\n    ]\n  },\n  \"description\": \"Kafka resource usage and throughput\",\n  \"editable\": true,\n  \"gnetId\": 721,\n  \"graphTooltip\": 0,\n  \"id\": null,\n  \"iteration\": 1534756791145,\n  \"links\": [],\n  \"panels\": [\n    {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"${DS_PROMETHEUS_WH211}\",\n      \"fill\": 0,\n      \"gridPos\": {\n        \"h\": 10,\n        \"w\": 10,\n        \"x\": 0,\n        \"y\": 0\n      },\n      \"id\": 14,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": false,\n        \"current\": true,\n        \"max\": true,\n        \"min\": false,\n        \"rightSide\": false,\n        \"show\": true,\n        \"sideWidth\": 480,\n        \"sort\": \"max\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"sum(rate(kafka_topic_partition_current_offset{instance=\\\"$instance\\\", topic=~\\\"$topic\\\"}[1m])) by (topic)\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{topic}}\",\n          \"refId\": \"B\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Message in per second\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": \"0\",\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    },\n    {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"${DS_PROMETHEUS_WH211}\",\n      \"fill\": 0,\n      \"gridPos\": {\n        \"h\": 10,\n        \"w\": 10,\n        \"x\": 10,\n        \"y\": 0\n      },\n      \"id\": 12,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": false,\n        \"current\": true,\n        \"max\": true,\n        \"min\": false,\n        \"rightSide\": false,\n        \"show\": true,\n        \"sideWidth\": 480,\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"sum(kafka_consumergroup_lag{instance=\\\"$instance\\\",topic=~\\\"$topic\\\"}) by (consumergroup, topic) \",\n          \"format\": \"time_series\",\n          \"instant\": false,\n          \"interval\": \"\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{consumergroup}} (topic: {{topic}})\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Lag by  Consumer Group\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 2,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"format\": \"short\",\n          \"label\": \"\",\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": \"0\",\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    },\n    {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"${DS_PROMETHEUS_WH211}\",\n      \"fill\": 0,\n      \"gridPos\": {\n        \"h\": 10,\n        \"w\": 10,\n        \"x\": 0,\n        \"y\": 10\n      },\n      \"id\": 16,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": false,\n        \"current\": true,\n        \"max\": true,\n        \"min\": false,\n        \"rightSide\": false,\n        \"show\": true,\n        \"sideWidth\": 480,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"sum(delta(kafka_topic_partition_current_offset{instance=~'$instance', topic=~\\\"$topic\\\"}[5m])/5) by (topic)\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{topic}}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Message in per minute\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"transparent\": false,\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    },\n    {\n      \"aliasColors\": {},\n      \"bars\": false,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"${DS_PROMETHEUS_WH211}\",\n      \"fill\": 0,\n      \"gridPos\": {\n        \"h\": 10,\n        \"w\": 10,\n        \"x\": 10,\n        \"y\": 10\n      },\n      \"id\": 18,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": false,\n        \"current\": true,\n        \"max\": true,\n        \"min\": false,\n        \"rightSide\": false,\n        \"show\": true,\n        \"sideWidth\": 480,\n        \"sort\": \"current\",\n        \"sortDesc\": true,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": true,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"connected\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"sum(delta(kafka_consumergroup_current_offset{instance=~'$instance',topic=~\\\"$topic\\\"}[5m])/5) by (consumergroup, topic)\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{consumergroup}} (topic: {{topic}})\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Message consume per minute\",\n      \"tooltip\": {\n        \"shared\": true,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"time\",\n        \"name\": null,\n        \"show\": true,\n        \"values\": []\n      },\n      \"yaxes\": [\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    },\n    {\n      \"aliasColors\": {},\n      \"bars\": true,\n      \"dashLength\": 10,\n      \"dashes\": false,\n      \"datasource\": \"${DS_PROMETHEUS_WH211}\",\n      \"fill\": 1,\n      \"gridPos\": {\n        \"h\": 7,\n        \"w\": 20,\n        \"x\": 0,\n        \"y\": 20\n      },\n      \"id\": 8,\n      \"legend\": {\n        \"alignAsTable\": true,\n        \"avg\": false,\n        \"current\": true,\n        \"max\": false,\n        \"min\": false,\n        \"rightSide\": true,\n        \"show\": true,\n        \"sideWidth\": 420,\n        \"total\": false,\n        \"values\": true\n      },\n      \"lines\": false,\n      \"linewidth\": 1,\n      \"links\": [],\n      \"nullPointMode\": \"null\",\n      \"percentage\": false,\n      \"pointradius\": 5,\n      \"points\": false,\n      \"renderer\": \"flot\",\n      \"seriesOverrides\": [],\n      \"spaceLength\": 10,\n      \"stack\": false,\n      \"steppedLine\": false,\n      \"targets\": [\n        {\n          \"expr\": \"sum by(topic) (kafka_topic_partitions{instance=\\\"$instance\\\",topic=~\\\"$topic\\\"})\",\n          \"format\": \"time_series\",\n          \"intervalFactor\": 1,\n          \"legendFormat\": \"{{topic}}\",\n          \"refId\": \"A\"\n        }\n      ],\n      \"thresholds\": [],\n      \"timeFrom\": null,\n      \"timeShift\": null,\n      \"title\": \"Partitions per Topic\",\n      \"tooltip\": {\n        \"shared\": false,\n        \"sort\": 0,\n        \"value_type\": \"individual\"\n      },\n      \"type\": \"graph\",\n      \"xaxis\": {\n        \"buckets\": null,\n        \"mode\": \"series\",\n        \"name\": null,\n        \"show\": false,\n        \"values\": [\n          \"current\"\n        ]\n      },\n      \"yaxes\": [\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        },\n        {\n          \"format\": \"short\",\n          \"label\": null,\n          \"logBase\": 1,\n          \"max\": null,\n          \"min\": null,\n          \"show\": true\n        }\n      ],\n      \"yaxis\": {\n        \"align\": false,\n        \"alignLevel\": null\n      }\n    }\n  ],\n  \"refresh\": false,\n  \"schemaVersion\": 16,\n  \"style\": \"dark\",\n  \"tags\": [\n    \"Kafka\"\n  ],\n  \"templating\": {\n    \"list\": [\n      {\n        \"allValue\": null,\n        \"current\": {},\n        \"datasource\": \"${DS_PROMETHEUS_WH211}\",\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"label\": \"Job\",\n        \"multi\": false,\n        \"name\": \"job\",\n        \"options\": [],\n        \"query\": \"label_values(kafka_consumergroup_current_offset, job)\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"sort\": 0,\n        \"tagValuesQuery\": \"\",\n        \"tags\": [],\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"allValue\": null,\n        \"current\": {},\n        \"datasource\": \"${DS_PROMETHEUS_WH211}\",\n        \"hide\": 0,\n        \"includeAll\": false,\n        \"label\": \"Instance\",\n        \"multi\": false,\n        \"name\": \"instance\",\n        \"options\": [],\n        \"query\": \"label_values(kafka_consumergroup_current_offset{job=~\\\"$job\\\"}, instance)\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"sort\": 0,\n        \"tagValuesQuery\": \"\",\n        \"tags\": [],\n        \"tagsQuery\": \"\",\n        \"type\": \"query\",\n        \"useTags\": false\n      },\n      {\n        \"allValue\": null,\n        \"current\": {},\n        \"datasource\": \"${DS_PROMETHEUS_WH211}\",\n        \"hide\": 0,\n        \"includeAll\": true,\n        \"label\": \"Topic\",\n        \"multi\": true,\n        \"name\": \"topic\",\n        \"options\": [],\n        \"query\": \"label_values(kafka_topic_partition_current_offset{instance='$instance',topic!='__consumer_offsets',topic!='--kafka'}, topic)\",\n        \"refresh\": 1,\n        \"regex\": \"\",\n        \"sort\": 1,\n        \"tagValuesQuery\": \"\",\n        \"tags\": [],\n        \"tagsQuery\": \"topic\",\n        \"type\": \"query\",\n        \"useTags\": false\n      }\n    ]\n  },\n  \"time\": {\n    \"from\": \"now-24h\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"refresh_intervals\": [\n      \"5s\",\n      \"10s\",\n      \"30s\",\n      \"1m\",\n      \"5m\",\n      \"15m\",\n      \"30m\",\n      \"1h\",\n      \"2h\",\n      \"1d\"\n    ],\n    \"time_options\": [\n      \"5m\",\n      \"15m\",\n      \"1h\",\n      \"6h\",\n      \"12h\",\n      \"24h\",\n      \"2d\",\n      \"7d\",\n      \"30d\"\n    ]\n  },\n  \"timezone\": \"browser\",\n  \"title\": \"Kafka Exporter Overview\",\n  \"uid\": \"jwPKIsniz\",\n  \"version\": 50\n}"
        },
        {
          "name": "kafka_exporter_overview.png",
          "type": "blob",
          "size": 282.392578125,
          "content": null
        },
        {
          "name": "scram_client.go",
          "type": "blob",
          "size": 0.802734375,
          "content": "package main\n\nimport (\n\t\"crypto/sha256\"\n\t\"crypto/sha512\"\n\t\"hash\"\n\n\t\"github.com/xdg/scram\"\n)\n\nvar SHA256 scram.HashGeneratorFcn = func() hash.Hash { return sha256.New() }\nvar SHA512 scram.HashGeneratorFcn = func() hash.Hash { return sha512.New() }\n\ntype XDGSCRAMClient struct {\n\t*scram.Client\n\t*scram.ClientConversation\n\tscram.HashGeneratorFcn\n}\n\nfunc (x *XDGSCRAMClient) Begin(userName, password, authzID string) (err error) {\n\tx.Client, err = x.HashGeneratorFcn.NewClient(userName, password, authzID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tx.ClientConversation = x.Client.NewConversation()\n\treturn nil\n}\n\nfunc (x *XDGSCRAMClient) Step(challenge string) (response string, err error) {\n\tresponse, err = x.ClientConversation.Step(challenge)\n\treturn\n}\n\nfunc (x *XDGSCRAMClient) Done() bool {\n\treturn x.ClientConversation.Done()\n}\n"
        },
        {
          "name": "simple_test.go",
          "type": "blob",
          "size": 1.26171875,
          "content": "package main\n\nimport (\n\t\"errors\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/IBM/sarama\"\n)\n\nvar bootstrap_servers = []string{\"localhost:9092\"}\n\nfunc TestSmoke(t *testing.T) {\n\tlog.Print(\"testing \" + t.Name())\n\n\tif !assumeKafka() {\n\t\tt.Skip(\"Kafka is not running ... skipping the test\")\n\t\treturn\n\t}\n\n\tgo runServer()\n\n\texecute(func(resp *http.Response) {\n\t\tlog.Println(resp.Status)\n\n\t\tdefer resp.Body.Close()\n\t\tbytes, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t} else {\n\t\t\tlog.Println(string(bytes))\n\t\t}\n\t})\n}\n\nfunc assumeKafka() bool {\n\tclient, err := sarama.NewClient(bootstrap_servers, nil)\n\tif err != nil {\n\t\treturn false\n\t}\n\tdefer client.Close()\n\t_, err = client.Topics()\n\treturn err == nil\n}\n\nfunc execute(handler func(response *http.Response)) {\n\tvar e = errors.New(\"dummy\")\n\tfor e != nil {\n\t\tresp, err := http.Get(\"http://localhost:9304/metrics\")\n\t\tif err != nil {\n\t\t\ttime.Sleep(time.Millisecond * 100)\n\t\t}\n\t\te = err\n\t\tif resp != nil {\n\t\t\thandler(resp)\n\t\t}\n\t}\n}\n\nfunc runServer() {\n\topts := kafkaOpts{}\n\topts.uri = bootstrap_servers\n\topts.uriZookeeper = []string{\"localhost:2181\"}\n\topts.kafkaVersion = sarama.V1_0_0_0.String()\n\topts.metadataRefreshInterval = \"30s\"\n\tsetup(\"localhost:9304\", \"/metrics\", \".*\", \"^$\", \".*\", \"^$\", false, opts, nil)\n}\n"
        }
      ]
    }
  ]
}