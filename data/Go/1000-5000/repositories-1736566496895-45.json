{
  "metadata": {
    "timestamp": 1736566496895,
    "page": 45,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "guangzhengli/k8s-tutorials",
      "stars": 4779,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.310546875,
          "content": "### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\nout/\n\n### VS Code ###\n.vscode/\n\n### project ###\n.settings/\n\n### apple ###\n.DS_Store\n**/.DS_Store\n\n\n/coverage\n/src/client/shared.ts\n/src/node/shared.ts\n*.log\n*.tgz\n.DS_Store\n.idea\n.temp\n.vite_opt_cache\n.vscode\ndist\ncache\ntemp\nexamples-temp\nnode_modules\npnpm-global\nTODOs.md"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) 2022-2023 liguangzheng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 87.955078125,
          "content": "<h1 align=center>Kubernetes Tutorials ｜ k8s 教程</h1>\n<h2 align=center><a href=\"https://k8s-tutorials.pages.dev\">Online Pages</a></h1>\n\n[![GitHub forks](https://img.shields.io/github/forks/guangzhengli/k8s-tutorials)](https://github.com/guangzhengli/k8s-tutorials/network)[![GitHub stars](https://img.shields.io/github/stars/guangzhengli/k8s-tutorials)](https://github.com/guangzhengli/k8s-tutorials/stargazers)[![GitHub issues](https://img.shields.io/github/issues/guangzhengli/k8s-tutorials)](https://github.com/guangzhengli/k8s-tutorials/issues)[![GitHub license](https://img.shields.io/github/license/guangzhengli/k8s-tutorials)](https://github.com/guangzhengli/k8s-tutorials/blob/main/LICENSE)![Docker Pulls](https://img.shields.io/docker/pulls/guangzhengli/hellok8s)\n\n<h4 align=center>🌈 Kubernetes | 📰 Tutorials</h4>\n\n![image_screenshot](docs/public/screenshot.png)\n\nk8s 作为云原生时代的操作系统，学习它的必要性不言而喻，如果你遇到了任何问题，可以在 [Discussions](https://github.com/guangzhengli/k8s-tutorials/discussions) 中评论或者 Issue 中提出，如果你觉得这个仓库对你有价值，欢迎 star 或者提 PR / Issue，让它变得更好！\n\n在学习本教程前，需要注意本教程侧重于实战引导，以渐进式修改代码的方式，将从最基础的 container 容器的定义开始，经过 `pod`, `deployment`, `service`,  `ingress`, `configmap`, `secret` 等资源直到用 `helm` 来打包部署一套完整服务。所以如果你对容器和 k8s 的基础理论知识不甚了解的话，建议先从 [官网文档](https://kubernetes.io/zh-cn/docs/home/) 或者其它教程获取基础理论知识，再通过实战加深对知识的掌握！\n\n这里是文档的索引：\n* [准备工作](docs/pre.md)\n* [container](docs/container.md)\n* [pod](docs/pod.md)\n* [deployment](docs/deployment.md)\n* [service](docs/service.md)\n* [ingress](docs/ingress.md)\n* [namespace](docs/namespace.md)\n* [configmap](docs/configmap.md)\n* [secret](docs/secret.md)\n* [job/cronjob](docs/job.md)\n* [helm](docs/helm.md)\n* [dashboard](docs/dashboard.md)\n\n下面是所有文档的集合：\n\n- [kubernetes tutorials](#kubernetes-tutorials)\n  - [准备工作](#准备工作)\n    - [安装 docker](#安装-docker)\n      - [推荐安装方法](#推荐安装方法)\n      - [其它安装方法](#其它安装方法)\n    - [安装 minikube](#安装-minikube)\n      - [启动 minikube](#启动-minikube)\n    - [安装 kubectl](#安装-kubectl)\n    - [注册 docker hub 账号登录](#注册-docker-hub-账号登录)\n  - [Container](#container)\n  - [Pod](#pod)\n    - [Pod 与 Container 的不同](#pod-与-container-的不同)\n    - [Pod 其它命令](#pod-其它命令)\n  - [Deployment](#deployment)\n    - [扩容](#扩容)\n    - [升级版本](#升级版本)\n    - [Rolling Update(滚动更新)](#rolling-update滚动更新)\n    - [存活探针 (livenessProb)](#存活探针-livenessprob)\n    - [就绪探针 (readiness)](#就绪探针-readiness)\n  - [Service](#service)\n    - [ClusterIP](#clusterip)\n    - [NodePort](#nodeport)\n    - [LoadBalancer](#loadbalancer)\n  - [ingress](#ingress)\n  - [Namespace](#namespace)\n  - [Configmap](#configmap)\n  - [Secret](#secret)\n  - [Job](#job)\n  - [CronJob](#cronjob)\n  - [Helm](#helm)\n    - [用 helm 安装 hellok8s](#用-helm-安装-hellok8s)\n    - [创建 helm charts](#创建-helm-charts)\n      - [rollback](#rollback)\n      - [多环境配置](#多环境配置)\n    - [helm chart 打包和发布](#helm-chart-打包和发布)\n  - [Dashboard](#dashboard)\n    - [kubernetes dashboard](#kubernetes-dashboard)\n    - [K9s](#k9s)\n  - [Sponsor](#sponsor)\n  - [Star History](#star-history)\n\n# kubernetes tutorials\n\n## 准备工作\n\n在开始本教程之前，需要配置好本地环境，以下是需要安装的依赖和包。\n\n### 安装 docker\n\n首先我们需要安装 `docker` 来打包镜像，如果你本地已经安装了 `docker`，那么你可以选择跳过这一小节。\n\n#### 推荐安装方法\n\n目前使用 [Docker Desktop](https://www.docker.com/products/docker-desktop/) 来安装 docker 还是最简单的方案，打开官网下载对应你电脑操作系统的包即可 (https://www.docker.com/products/docker-desktop/)，\n\n当安装完成后，可以通过 `docker run hello-world` 来快速校验是否安装成功！\n\n#### 其它安装方法\n\n目前  Docker 公司宣布  [Docker Desktop](https://www.docker.com/products/docker-desktop/) 只对个人开发者或者小型团体免费 (2021年起对大型公司不再免费)，所以如果你不能通过  [Docker Desktop](https://www.docker.com/products/docker-desktop/) 的方式下载安装 `docker`，可以参考 [这篇文章](https://dhwaneetbhatt.com/blog/run-docker-without-docker-desktop-on-macos) 只安装  [Docker CLI](https://github.com/docker/cli)。\n\n### 安装 minikube\n\n我们还需要搭建一套 k8s 本地集群 (使用云厂商或者其它 k8s 集群都可) 。本地搭建 k8s 集群的方式推荐使用 [minikube](https://minikube.sigs.k8s.io/docs/)。\n\n可以根据 [minikube 快速安装](https://minikube.sigs.k8s.io/docs/start/) 来进行下载安装，这里简单列举 MacOS 的安装方式，Linux & Windows 操作系统可以参考[官方文档](https://minikube.sigs.k8s.io/docs/start/) 快速安装。\n\n```shell\nbrew install minikube\n```\n\n#### 启动 minikube\n\n因为 minikube 支持很多容器和虚拟化技术 ([Docker](https://minikube.sigs.k8s.io/docs/drivers/docker/), [Hyperkit](https://minikube.sigs.k8s.io/docs/drivers/hyperkit/), [Hyper-V](https://minikube.sigs.k8s.io/docs/drivers/hyperv/), [KVM](https://minikube.sigs.k8s.io/docs/drivers/kvm2/), [Parallels](https://minikube.sigs.k8s.io/docs/drivers/parallels/), [Podman](https://minikube.sigs.k8s.io/docs/drivers/podman/), [VirtualBox](https://minikube.sigs.k8s.io/docs/drivers/virtualbox/), or [VMware Fusion/Workstation](https://minikube.sigs.k8s.io/docs/drivers/vmware/))，也是问题出现比较多的地方，所以这里还是稍微说明一下。\n\n如果你使用 `docker` 的方案是上面推荐的 [Docker Desktop](https://www.docker.com/products/docker-desktop/) ，那么你以下面的命令启动 minikube 即可，需要耐心等待下载依赖。\n\n```shell\nminikube start --vm-driver docker --container-runtime=docker\n```\n\n启动完成后，运行 `minikube status` 查看当前状态确定是否启动成功！\n\n如果你本地只有 Docker CLI，判断标准如果执行 `docker ps` 等命令，返回错误 `Cannot connect to the Docker daemon at unix:///Users/xxxx/.colima/docker.sock. Is the docker daemon running?` 那么就需要操作下面的命令。\n\n```shell\nbrew install hyperkit\nminikube start --vm-driver hyperkit --container-runtime=docker\n\n# Tell Docker CLI to talk to minikube's VM\neval $(minikube docker-env)\n\n# Save IP to a hostname\necho \"`minikube ip` docker.local\" | sudo tee -a /etc/hosts > /dev/null\n\n# Test\ndocker run hello-world\n```\n\n**minikube 命令速查**\n\n`minikube stop` 不会删除任何数据，只是停止 VM 和 k8s 集群。\n\n`minikube delete` 删除所有 minikube 启动后的数据。\n\n`minikube ip` 查看集群和 docker enginer 运行的 IP 地址。\n\n`minikube pause` 暂停当前的资源和 k8s 集群\n\n`minikube status` 查看当前集群状态\n\n### 安装 kubectl\n\n这一步是可选的，如果不安装的话，后续所有 `kubectl` 相关的命令，使用 `minikube kubectl` 命令替代即可。\n\n如果你不想使用 `minikube kubectl` 或者配置相关环境变量来进行下面的教学的话，可以考虑直接安装 `kubectl`。\n\n以下为MacOS 的安装方式，Linux & Windows 操作系统可以参考[官方文档](https://kubernetes.io/zh-cn/docs/tasks/tools/)快速安装。\n\n```shell\nbrew install kubectl\n```\n\n### 注册 docker hub 账号登录\n\n因为默认 minikube 使用的镜像地址是 DockerHub，所以我们还需要在 DockerHub (https://hub.docker.com/) 中注册账号，并且使用 login 命令登录账号。\n\n```shell\ndocker login\n```\n\n## Container\n\n我们的旅程从一段代码开始。新建一个 `main.go` 文件，复制下面的代码到文件中。\n\n```go\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n\tio.WriteString(w, \"[v1] Hello, Kubernetes!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", hello)\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n上面是一串用 [Go](https://go.dev/) 写的代码，代码逻辑非常的简单，首先启动 HTTP 服务器，监听 `3000` 端口，当访问路由 `/`的时候 返回字符串 `[v1] Hello, Kubernetes!`。\n\n在以前，如果你想将这段代码运行起来并测试一下。你首先需要懂得如何下载 golang 的安装包进行安装，接着需要懂得 `golang module` 的基本使用，最后还需要了解 golang 的编译和运行命令，才能将该代码运行起来。甚至在过程中，可能会因为环境变量问题、操作系统问题、处理器架构等问题导致编译或运行失败。\n\n但是通过 Container (容器) 技术，只需要上面的代码，附带着对应的容器 `Dockerfile` 文件，那么你就不需要 golang 的任何知识，也能将代码顺利运行起来。\n\n> Container (容器) 是一种沙盒技术。它是基于 Linux 中 Namespace / Cgroups / chroot 等技术组合而成，更多技术细节可以参照这个视频 [如何自己实现一个容器](https://www.youtube.com/watch?v=8fi7uSYlOdc)。\n\n下面就是 Go 代码对应的 `Dockerfile`，简单的方案是直接使用 golang 的 alpine 镜像来打包，但是因为我们后续练习需要频繁的推送镜像到 DockerHub 和拉取镜像到 k8s 集群中，为了优化网络速度，我们选择先在 `golang:1.16-buster` 中将上述 Go 代码编译成二进制文件，再将二进制文件复制到 `base-debian10` 镜像中运行 (Dockerfile 不理解没有关系，不影响后续学习)。\n\n这样我们可以将 300MB 大小的镜像变成只有 20MB 的镜像，甚至压缩上传到 DockerHub 后大小只有 10MB！\n\n```dockerfile\n# Dockerfile\nFROM golang:1.16-buster AS builder\nRUN mkdir /src\nADD . /src\nWORKDIR /src\n\nRUN go env -w GO111MODULE=auto\nRUN go build -o main .\n\nFROM gcr.io/distroless/base-debian10\n\nWORKDIR /\n\nCOPY --from=builder /src/main /main\nEXPOSE 3000\nENTRYPOINT [\"/main\"]\n```\n\n需要注意 `main.go` 文件需要和 `Dockerfile` 文件在同一个目录下，执行下方 `docker build` 命令，第一次需要耐心等待拉取基础镜像。并且**需要注意将命令中 `guangzhengli` 替换成自己的 `DockerHub` 注册的账号名称**。 这样我们后续可以推送镜像到自己注册的  `DockerHub` 仓库当中。\n\n```shell\ndocker build . -t guangzhengli/hellok8s:v1\n# Step 1/11 : FROM golang:1.16-buster AS builder\n# ...\n# ...\n# Step 11/11 : ENTRYPOINT [\"/main\"]\n# Successfully tagged guangzhengli/hellok8s:v1\n\n\ndocker images\n# guangzhengli/hellok8s          v1         f956e8cf7d18   8 days ago      25.4MB\n```\n\n `docker build`  命令完成后我们可以通过 `docker images` 命令查看镜像是否 build 成功，最后我们执行 `docker run` 命令将容器启动， `-p` 指定 `3000` 作为端口，`-d` 指定容器后台运行。\n\n```shell\ndocker run -p 3000:3000 --name hellok8s -d guangzhengli/hellok8s:v1\n```\n\n运行成功后，可以通过浏览器或者 `curl` 来访问 `http://127.0.0.1:3000` , 查看是否成功返回字符串 `[v1] Hello, Kubernetes!`。\n\n这里因为我本地只用 Docker CLI，而 docker runtime 是使用 `minikube`，所以我需要先调用  `minikube ip` 来返回 minikube IP 地址，例如返回了 `192.168.59.100`，所以我需要访问  `http://192.168.59.100:3000` 来判断是否成功返回字符串 `[v1] Hello, Kubernetes!`。\n\n最后确认没有问题，使用 `docker push` 将镜像上传到远程的 `DockerHub` 仓库当中，这样可以供他人下载使用，也方便后续  `Minikube` 下载镜像使用。  **需要注意将 `guangzhengli` 替换成自己的 `DockerHub` 账号名称**。\n\n```shell\ndocker push guangzhengli/hellok8s:v1\n```\n\n经过这一节的练习，有没有对容器的强大有一个初步的认识呢？可以想象当你想部署一个更复杂的服务时，例如 Nginx，MySQL，Redis。你只需要到 [DockerHub 搜索](https://hub.docker.com/search?q=) 中搜索对应的镜像，通过 `docker pull` 下载镜像，`docker run` 启动服务即可！而无需关心依赖和各种配置！\n\n## Pod\n\n如果在生产环境中运行的都是独立的单体服务，那么 Container (容器) 也就够用了，但是在实际的生产环境中，维护着大规模的集群和各种不同的服务，服务之间往往存在着各种各样的关系。而这些关系的处理，才是手动管理最困难的地方。\n\n**Pod** 是我们将要创建的第一个 k8s 资源，也是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。在了解 `pod` 和  `container` 的区别之前，我们可以先创建一个简单的 pod 试试，  \n\n我们先创建 `nginx.yaml` 文件，编写一个可以创建 `nginx` 的 Pod。\n\n```yaml\n# nginx.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod\nspec:\n  containers:\n    - name: nginx-container\n      image: nginx\n```\n\n其中  `kind` 表示我们要创建的资源是 `Pod` 类型，  `metadata.name` 表示要创建的 pod 的名字，这个名字需要是唯一的。   `spec.containers` 表示要运行的容器的名称和镜像名称。镜像默认来源 `DockerHub`。\n\n我们运行第一条 k8s 命令 `kubectl apply -f nginx.yaml` 命令来创建 `nginx`  Pod。\n\n接着通过 `kubectl get pods` 来查看 pod 是否正常启动。\n\n最后通过 `kubectl port-forward nginx-pod 4000:80` 命令将 `nginx` 默认的 `80` 端口映射到本机的 `4000` 端口，打开浏览器或者 `curl` 来访问 `http://127.0.0.1:4000` , 查看是否成功访问 `nginx` 默认页面！\n\n``` shell\nkubectl apply -f nginx.yaml        \n# pod/nginx-pod created\n\nkubectl get pods\n# nginx-pod         1/1     Running   0           6s\n\nkubectl port-forward nginx-pod 4000:80\n# Forwarding from 127.0.0.1:4000 -> 80\n# Forwarding from [::1]:4000 -> 80\n```\n\n`kubectl exec -it` 可以用来进入 Pod 内容器的 Shell。通过命令下面的命令来配置 `nginx` 的首页内容。\n\n```shell\nkubectl exec -it nginx-pod -- /bin/bash\n\necho \"hello kubernetes by nginx!\" > /usr/share/nginx/html/index.html\n\nkubectl port-forward nginx-pod 4000:80\n```\n\n最后可以通过浏览器或者 `curl` 来访问 `http://127.0.0.1:4000` , 查看是否成功启动 `nginx` 和返回字符串 `hello kubernetes by nginx!`。\n\n### Pod 与 Container 的不同\n\n回到 `pod` 和  `container` 的区别，我们会发现刚刚创建出来的资源如下图所示，在最内层是我们的服务 `nginx`，运行在 `container` 容器当中， `container` (容器) 的本质是进程，而 `pod` 是管理这一组进程的资源。\n\n![nginx_pod](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/nginx_pod.png)\n\n所以自然 `pod` 可以管理多个 `container`，在某些场景例如服务之间需要文件交换(日志收集)，本地网络通信需求(使用 localhost 或者 Socket 文件进行本地通信)，在这些场景中使用 `pod` 管理多个 `container` 就非常的推荐。而这，也是 k8s 如何处理服务之间复杂关系的第一个例子，如下图所示：\n\n![pod](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/pod.png)\n\n### Pod 其它命令\n\n我们可以通过 `logs` 或者 `logs -f` 命令查看 pod 日志，可以通过 `exec -it` 进入 pod 或者调用容器命令，通过 `delete pod` 或者  `delete -f nginx.yaml` 的方式删除 pod 资源。这里可以看到 [kubectl 所有命令](https://kubernetes.io/docs/reference/kubectl/cheatsheet/)。\n\n```shell\nkubectl logs --follow nginx-pod\n                              \nkubectl exec nginx-pod -- ls\n\nkubectl delete pod nginx-pod\n# pod \"nginx-pod\" deleted\n\nkubectl delete -f nginx.yaml\n# pod \"nginx-pod\" deleted\n```\n\n最后，根据我们在 `container` 的那节构建的 `hellok8s:v1` 的镜像，同时参考 `nginx` pod 的资源定义，你能独自编写出  `hellok8s:v1`  Pod 的资源文件吗。并通过 `port-forward` 到本地的 `3000` 端口进行访问，最终得到字符串 `[v1] Hello, Kubernetes!`。\n\n`hellok8s:v1` Pod 资源定义和相应的命令如下所示：\n\n```yaml\n# hellok8s.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hellok8s\nspec:\n  containers:\n    - name: hellok8s-container\n      image: guangzhengli/hellok8s:v1\n```\n\n```shell\nkubectl apply -f hellok8s.yaml\n\nkubectl get pods\n\nkubectl port-forward hellok8s 3000:3000\n```\n\n## Deployment\n\n在生产环境中，我们基本上不会直接管理 pod，我们需要 `kubernetes` 来帮助我们来完成一些自动化操作，例如自动扩容或者自动升级版本。可以想象在生产环境中，我们手动部署了 10 个 `hellok8s:v1` 的 pod，这个时候我们需要升级成 `hellok8s:v2` 版本，我们难道需要一个一个的将 `hellok8s:v1` 的 pod 手动升级吗？\n\n这个时候就需要我们来看 `kubernetes` 的另外一个资源 `deployment`，来帮助我们管理 pod。\n\n### 扩容\n\n首先可以创建一个 `deployment.yaml` 的文件。来管理 `hellok8s` pod。\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hellok8s-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: hellok8s\n  template:\n    metadata:\n      labels:\n        app: hellok8s\n    spec:\n      containers:\n        - image: guangzhengli/hellok8s:v1\n          name: hellok8s-container\n```\n\n其中  `kind` 表示我们要创建的资源是 `deployment` 类型，  `metadata.name` 表示要创建的 deployment 的名字，这个名字需要是**唯一**的。\n\n在 `spec` 里面表示，首先 `replicas` 表示的是部署的 pod 副本数量，`selector` 里面表示的是 `deployment` 资源和 `pod` 资源关联的方式，这里表示 `deployment` 会管理 (selector) 所有 `labels=hellok8s` 的 pod。\n\n`template` 的内容是用来定义 `pod` 资源的，你会发现和 Hellok8s Pod 资源的定义是差不多的，唯一的区别是我们需要加上 `metadata.labels` 来和上面的 `selector.matchLabels` 对应起来。来表明 pod 是被 deployment 管理，不用在`template` 里面加上 `metadata.name` 是因为 deployment 会自动为我们创建 pod 的唯一`name`。\n\n接下来输入下面的命令，可以创建 `deployment` 资源。通过 `get` 和 `delete pod` 命令，我们会初步感受 deployment 的魅力。**每次创建的 pod 名称都会变化，某些命令记得替换成你的 pod 的名称**\n\n```shell\nkubectl apply -f deployment.yaml\n\nkubectl get deployments\n#NAME                  READY   UP-TO-DATE   AVAILABLE   AGE\n#hellok8s-deployment   1/1     1            1           39s\n\nkubectl get pods             \n#NAME                                   READY   STATUS    RESTARTS   AGE\n#hellok8s-deployment-77bffb88c5-qlxss   1/1     Running   0          119s\n\nkubectl delete pod hellok8s-deployment-77bffb88c5-qlxss \n#pod \"hellok8s-deployment-77bffb88c5-qlxss\" deleted\n\nkubectl get pods                                       \n#NAME                                   READY   STATUS    RESTARTS   AGE\n#hellok8s-deployment-77bffb88c5-xp8f7   1/1     Running   0          18s\n```\n\n我们会发现一个有趣的现象，当手动删除一个 `pod` 资源后，deployment 会自动创建一个新的 `pod`，这和我们之前手动创建 pod 资源有本质的区别！这代表着当生产环境管理着成千上万个 pod 时，我们不需要关心具体的情况，只需要维护好这份 `deployment.yaml` 文件的资源定义即可。\n\n接下来我们通过自动扩容来加深这个知识点，当我们想要将 `hellok8s:v1` 的资源扩容到 3 个副本时，只需要将 `replicas` 的值设置成 3，接着重新输入 `kubectl apply -f deployment.yaml` 即可。如下所示：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hellok8s-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: hellok8s\n  template:\n    metadata:\n      labels:\n        app: hellok8s\n    spec:\n      containers:\n        - image: guangzhengli/hellok8s:v1\n          name: hellok8s-container\n```\n\n可以在 `kubectl apply` 之前通过新建窗口执行 `kubectl get pods --watch` 命令来观察 pod 启动和删除的记录，想要减少副本数时也很简单，你可以尝试将副本数随意增大或者缩小，再通过 `watch` 来观察它的状态。\n\n![deployment](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/deployment.png)\n\n### 升级版本\n\n我们接下来尝试将所有 `v1` 版本的 `pod` 升级到 `v2` 版本。首先我们需要构建一份 `hellok8s:v2` 的版本镜像。唯一的区别就是字符串替换成了 `[v2] Hello, Kubernetes!`。\n\n```go\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n\tio.WriteString(w, \"[v2] Hello, Kubernetes!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", hello)\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n将 `hellok8s:v2` 推到 DockerHub 仓库中。\n\n```shell\ndocker build . -t guangzhengli/hellok8s:v2\ndocker push guangzhengli/hellok8s:v2\n```\n\n接着编写 `v2` 版本的 deployment 资源文件。\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hellok8s-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: hellok8s\n  template:\n    metadata:\n      labels:\n        app: hellok8s\n    spec:\n      containers:\n        - image: guangzhengli/hellok8s:v2\n          name: hellok8s-container\n```\n\n```shell\nkubectl apply -f deployment.yaml\n# deployment.apps/hellok8s-deployment configured\n\nkubectl get pods                \n# NAME                                   READY   STATUS    RESTARTS   AGE\n# hellok8s-deployment-66799848c4-kpc6q   1/1     Running   0          3s\n# hellok8s-deployment-66799848c4-pllj6   1/1     Running   0          3s\n# hellok8s-deployment-66799848c4-r7qtg   1/1     Running   0          3s\n\nkubectl port-forward hellok8s-deployment-66799848c4-kpc6q 3000:3000\n# Forwarding from 127.0.0.1:3000 -> 3000\n# Forwarding from [::1]:3000 -> 3000\n\n# open another terminal\ncurl http://localhost:3000\n# [v2] Hello, Kubernetes!\n```\n\n你也可以输入 `kubectl describe pod hellok8s-deployment-66799848c4-kpc6q` 来看是否是 `v2` 版本的镜像。\n\n### Rolling Update(滚动更新)\n\n如果我们在生产环境上，管理着多个副本的 `hellok8s:v1` 版本的 pod，我们需要更新到 `v2` 的版本，像上面那样的部署方式是可以的，但是也会带来一个问题，就是所有的副本在同一时间更新，这会导致我们 `hellok8s` 服务在短时间内是不可用的，因为所有 pod 都在升级到 `v2` 版本的过程中，需要等待某个 pod 升级完成后才能提供服务。\n\n这个时候我们就需要滚动更新 (rolling update)，在保证新版本 `v2` 的 pod 还没有 `ready` 之前，先不删除 `v1` 版本的 pod。\n\n在 deployment 的资源定义中, `spec.strategy.type` 有两种选择:\n\n- **RollingUpdate:** 逐渐增加新版本的 pod，逐渐减少旧版本的 pod。\n- **Recreate:** 在新版本的 pod 增加前，先将所有旧版本 pod 删除。\n\n大多数情况下我们会采用滚动更新 (RollingUpdate) 的方式，滚动更新又可以通过 `maxSurge` 和 `maxUnavailable` 字段来控制升级 pod 的速率，具体可以详细看[官网定义](https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/deployment/)。：\n\n- [**maxSurge:**](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#max-surge) 最大峰值，用来指定可以创建的超出期望 Pod 个数的 Pod 数量。\n- [**maxUnavailable:**](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#max-unavailable,) 最大不可用，用来指定更新过程中不可用的 Pod 的个数上限。\n\n我们先输入命令回滚我们的 deployment，输入 `kubectl describe pod` 会发现 deployment 已经把 `v2` 版本的 pod 回滚到 ` v1` 的版本。\n\n``` shell\nkubectl rollout undo deployment hellok8s-deployment\n\nkubectl get pods                                    \n# NAME                                   READY   STATUS    RESTARTS   AGE\n# hellok8s-deployment-77bffb88c5-cvm5c   1/1     Running   0          39s\n# hellok8s-deployment-77bffb88c5-lktbl   1/1     Running   0          41s\n# hellok8s-deployment-77bffb88c5-nh82z   1/1     Running   0          37s\n\nkubectl describe pod hellok8s-deployment-77bffb88c5-cvm5c\n# Image: guangzhengli/hellok8s:v1\n```\n\n除了上面的命令，还可以用 `history` 来查看历史版本，`--to-revision=2` 来回滚到指定版本。\n\n```shell\nkubectl rollout history deployment hellok8s-deployment\nkubectl rollout undo deployment/hellok8s-deployment --to-revision=2\n```\n\n接着设置 `strategy=rollingUpdate` , `maxSurge=1` , `maxUnavailable=1` 和 `replicas=3`  到 deployment.yaml 文件中。这个参数配置意味着最大可能会创建 4 个 hellok8s pod (replicas + maxSurge)，最小会有 2 个 hellok8s pod 存活 (replicas - maxUnavailable)。\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hellok8s-deployment\nspec:\n  strategy:\n     rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n  replicas: 3\n  selector:\n    matchLabels:\n      app: hellok8s\n  template:\n    metadata:\n      labels:\n        app: hellok8s\n    spec:\n      containers:\n      - image: guangzhengli/hellok8s:v2\n        name: hellok8s-container\n```\n\n使用 `kubectl apply -f deployment.yaml` 来重新创建 `v2` 的资源，可以通过 `kubectl get pods --watch` 来观察 pod 的创建销毁情况，是否如下图所示。\n\n![rollingupdate](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/rollingupdate.png)\n\n### 存活探针 (livenessProb)\n\n> 存活探测器来确定什么时候要重启容器。 例如，存活探测器可以探测到应用死锁（应用程序在运行，但是无法继续执行后面的步骤）情况。 重启这种状态下的容器有助于提高应用的可用性，即使其中存在缺陷。-- [LivenessProb](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)\n\n在生产中，有时候因为某些 bug 导致应用死锁或者线程耗尽了，最终会导致应用无法继续提供服务，这个时候如果没有手段来自动监控和处理这一问题的话，可能会导致很长一段时间无人发现。[kubelet](https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/) 使用存活探测器 (livenessProb) 来确定什么时候要重启容器。\n\n接下来我们写一个 `/healthz` 接口来说明 `livenessProb` 如何使用。 `/healthz` 接口会在启动成功的 15s 内正常返回 200 状态码，在 15s 后，会一直返回 500 的状态码。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n\tio.WriteString(w, \"[v2] Hello, Kubernetes!\")\n}\n\nfunc main() {\n\tstarted := time.Now()\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tduration := time.Since(started)\n\t\tif duration.Seconds() > 15 {\n\t\t\tw.WriteHeader(500)\n\t\t\tw.Write([]byte(fmt.Sprintf(\"error: %v\", duration.Seconds())))\n\t\t} else {\n\t\t\tw.WriteHeader(200)\n\t\t\tw.Write([]byte(\"ok\"))\n\t\t}\n\t})\n\n\thttp.HandleFunc(\"/\", hello)\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n```yaml\n# Dockerfile\nFROM golang:1.16-buster AS builder\nRUN mkdir /src\nADD . /src\nWORKDIR /src\n\nRUN go env -w GO111MODULE=auto\nRUN go build -o main .\n\nFROM gcr.io/distroless/base-debian10\n\nWORKDIR /\n\nCOPY --from=builder /src/main /main\nEXPOSE 3000\nENTRYPOINT [\"/main\"]\n```\n\n`Dockerfile` 的编写和原来保持一致，我们把 `tag` 修改为 `liveness` 并推送到远程仓库。\n\n```shell\ndocker build . -t guangzhengli/hellok8s:liveness\ndocker push guangzhengli/hellok8s:liveness\n```\n\n最后编写 deployment 的定义，这里使用存活探测方式是使用 HTTP GET 请求，请求的是刚才定义的 `/healthz` 接口，`periodSeconds` 字段指定了 kubelet 每隔 3 秒执行一次存活探测。 `initialDelaySeconds` 字段告诉 kubelet 在执行第一次探测前应该等待 3 秒。如果服务器上 `/healthz` 路径下的处理程序返回成功代码，则 kubelet 认为容器是健康存活的。 如果处理程序返回失败代码，则 kubelet 会杀死这个容器并将其重启。\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hellok8s-deployment\nspec:\n  strategy:\n     rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n  replicas: 3\n  selector:\n    matchLabels:\n      app: hellok8s\n  template:\n    metadata:\n      labels:\n        app: hellok8s\n    spec:\n      containers:\n        - image: guangzhengli/hellok8s:liveness\n          name: hellok8s-container\n          livenessProbe:\n            httpGet:\n              path: /healthz\n              port: 3000\n            initialDelaySeconds: 3\n            periodSeconds: 3\n```\n\n通过 `get` 或者 `describe` 命令可以发现 pod 一直处于重启当中。\n\n```shell\nkubectl apply -f deployment.yaml\n\nkubectl get pods\n# NAME                                   READY   STATUS    RESTARTS     AGE\n# hellok8s-deployment-5995ff9447-d5fbz   1/1     Running   4 (6s ago)   102s\n# hellok8s-deployment-5995ff9447-gz2cx   1/1     Running   4 (5s ago)   101s\n# hellok8s-deployment-5995ff9447-rh29x   1/1     Running   4 (6s ago)   102s\n\nkubectl describe pod hellok8s-68f47f657c-zwn6g\n\n# ...\n# ...\n# ...\n# Events:\n#  Type     Reason     Age                   From               Message\n#  ----     ------     ----                  ----               -------\n#  Normal   Scheduled  12m                   default-scheduler  Successfully assigned default/hellok8s-deployment-5995ff9447-rh29x to minikube\n#  Normal   Pulled     11m (x4 over 12m)     kubelet            Container image \"guangzhengli/hellok8s:liveness\" already present on machine\n#  Normal   Created    11m (x4 over 12m)     kubelet            Created container hellok8s-container\n#  Normal   Started    11m (x4 over 12m)     kubelet            Started container hellok8s-container\n#  Normal   Killing    11m (x3 over 12m)     kubelet            Container hellok8s-container failed liveness probe, will be restarted\n#  Warning  Unhealthy  11m (x10 over 12m)    kubelet            Liveness probe failed: HTTP probe failed with statuscode: 500\n#  Warning  BackOff    2m41s (x36 over 10m)  kubelet            Back-off restarting failed container\n```\n\n### 就绪探针 (readiness)\n\n> 就绪探测器可以知道容器何时准备好接受请求流量，当一个 Pod 内的所有容器都就绪时，才能认为该 Pod 就绪。 这种信号的一个用途就是控制哪个 Pod 作为 Service 的后端。 若 Pod 尚未就绪，会被从 Service 的负载均衡器中剔除。-- [ReadinessProb](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)\n\n在生产环境中，升级服务的版本是日常的需求，这时我们需要考虑一种场景，即当发布的版本存在问题，就不应该让它升级成功。kubelet 使用就绪探测器可以知道容器何时准备好接受请求流量，当一个 pod 升级后不能就绪，即不应该让流量进入该 pod，在配合 `rollingUpate` 的功能下，也不能允许升级版本继续下去，否则服务会出现全部升级完成，导致所有服务均不可用的情况。\n\n这里我们把服务回滚到 `hellok8s:v2` 的版本，可以通过上面学习的方法进行回滚。\n\n```shell\nkubectl rollout undo deployment hellok8s-deployment --to-revision=2\n```\n\n这里我们将应用的 `/healthz` 接口直接设置成返回 500 状态码，代表该版本是一个有问题的版本。\n\n```go\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n\tio.WriteString(w, \"[v2] Hello, Kubernetes!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.WriteHeader(500)\n\t})\n\n\thttp.HandleFunc(\"/\", hello)\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n在 `build` 阶段我们将 `tag` 设置为 `bad`，打包后 push 到远程仓库。\n\n``` shell\ndocker build . -t guangzhengli/hellok8s:bad\n\ndocker push guangzhengli/hellok8s:bad\n```\n\n接着编写 deployment 资源文件，[Probe](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#probe-v1-core) 有很多配置字段，可以使用这些字段精确地控制就绪检测的行为：\n\n- `initialDelaySeconds`：容器启动后要等待多少秒后才启动存活和就绪探测器， 默认是 0 秒，最小值是 0。\n- `periodSeconds`：执行探测的时间间隔（单位是秒）。默认是 10 秒。最小值是 1。\n- `timeoutSeconds`：探测的超时后等待多少秒。默认值是 1 秒。最小值是 1。\n- `successThreshold`：探测器在失败后，被视为成功的最小连续成功数。默认值是 1。 存活和启动探测的这个值必须是 1。最小值是 1。\n- `failureThreshold`：当探测失败时，Kubernetes 的重试次数。 对存活探测而言，放弃就意味着重新启动容器。 对就绪探测而言，放弃意味着 Pod 会被打上未就绪的标签。默认值是 3。最小值是 1。\n\n``` yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hellok8s-deployment\nspec:\n  strategy:\n     rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n  replicas: 3\n  selector:\n    matchLabels:\n      app: hellok8s\n  template:\n    metadata:\n      labels:\n        app: hellok8s\n    spec:\n      containers:\n        - image: guangzhengli/hellok8s:bad\n          name: hellok8s-container\n          readinessProbe:\n            httpGet:\n              path: /healthz\n              port: 3000\n            initialDelaySeconds: 1\n            successThreshold: 5\n```\n\n通过 `get` 命令可以发现两个 pod 一直处于还没有 Ready 的状态当中，通过 `describe` 命令可以看到是因为 `Readiness probe failed: HTTP probe failed with statuscode: 500` 的原因。又因为设置了最小不可用的服务数量为`maxUnavailable=1`，这样能保证剩下两个 `v2` 版本的 `hellok8s` 能继续提供服务！\n\n```shell\nkubectl apply -f deployment.yaml\n\nkubectl get pods                \n# NAME                                   READY   STATUS    RESTARTS   AGE\n# hellok8s-deployment-66799848c4-8xzsz   1/1     Running   0          102s\n# hellok8s-deployment-66799848c4-m9dl5   1/1     Running   0          102s\n# hellok8s-deployment-9c57c7f56-rww7k    0/1     Running   0          26s\n# hellok8s-deployment-9c57c7f56-xt9tw    0/1     Running   0          26s\n\n\nkubectl describe pod hellok8s-deployment-9c57c7f56-rww7k\n# Events:\n#   Type     Reason     Age                From               Message\n#   ----     ------     ----               ----               -------\n#   Normal   Scheduled  74s                default-scheduler  Successfully assigned default/hellok8s-deployment-9c57c7f56-rww7k to minikube\n#   Normal   Pulled     73s                kubelet            Container image \"guangzhengli/hellok8s:bad\" already present on machine\n#   Normal   Created    73s                kubelet            Created container hellok8s-container\n#   Normal   Started    73s                kubelet            Started container hellok8s-container\n#   Warning  Unhealthy  0s (x10 over 72s)  kubelet            Readiness probe failed: HTTP probe failed with statuscode: 500\n```\n\n## Service\n\n经过前面几节的练习，可能你会有一些疑惑：\n\n* 为什么 pod 不就绪 (Ready) 的话，`kubernetes` 不会将流量重定向到该 pod，这是怎么做到的？\n* 前面访问服务的方式是通过 `port-forword` 将 pod 的端口暴露到本地，不仅需要写对 pod 的名字，一旦 deployment 重新创建新的 pod，pod 名字和 IP 地址也会随之变化，如何保证稳定的访问地址呢？。\n* 如果使用 deployment 部署了多个 Pod 副本，如何做负载均衡呢？\n\n`kubernetes` 提供了一种名叫 `Service` 的资源帮助解决这些问题，它为 pod 提供一个稳定的 Endpoint。Service 位于 pod 的前面，负责接收请求并将它们传递给它后面的所有pod。一旦服务中的 Pod 集合发生更改，Endpoints 就会被更新，请求的重定向自然也会导向最新的 pod。\n\n### ClusterIP\n\n我们先来看看 `Service` 默认使用的 `ClusterIP` 类型，首先做一些准备工作，在之前的 `hellok8s:v2` 版本上加上返回当前服务所在的 `hostname` 功能，升级到 `v3` 版本。\n\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n\thost, _ := os.Hostname()\n\tio.WriteString(w, fmt.Sprintf(\"[v3] Hello, Kubernetes!, From host: %s\", host))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", hello)\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n`Dockerfile` 和之前保持一致，打包 `tag=v3` 并推送到远程仓库。\n\n``` shell\ndocker build . -t guangzhengli/hellok8s:v3\n\ndocker push guangzhengli/hellok8s:v3\n```\n\n修改 deployment 的 `hellok8s` 为 `v3` 版本。执行 `kubectl apply -f deployment.yaml` 更新 deployment。\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hellok8s-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: hellok8s\n  template:\n    metadata:\n      labels:\n        app: hellok8s\n    spec:\n      containers:\n        - image: guangzhengli/hellok8s:v3\n          name: hellok8s-container\n```\n\n接下来是 `Service` 资源的定义，我们使用 `ClusterIP` 的方式定义 Service，通过 `kubernetes` 集群的内部 IP 暴露服务，当我们只需要让集群中运行的其他应用程序访问我们的 pod 时，就可以使用这种类型的Service。首先创建一个 service-hellok8s-clusterip.yaml` 文件。\n\n``` yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: service-hellok8s-clusterip\nspec:\n  type: ClusterIP\n  selector:\n    app: hellok8s\n  ports:\n  - port: 3000\n    targetPort: 3000\n```\n\n首先通过 `kubectl get endpoints` 来看看 Endpoint。被 selector 选中的 Pod，就称为 Service 的 Endpoints。它维护着 Pod 的 IP 地址，只要服务中的 Pod 集合发生更改，Endpoints 就会被更新。通过 `kubectl get pod -o wide` 命令获取 Pod 更多的信息，可以看到 3 个 Pod 的 IP 地址和 Endpoints 中是保持一致的，你可以试试增大或减少 Deployment 中 Pod 的 replicas，观察 Endpoints 会不会发生变化。\n\n```shell\nkubectl apply -f service-hellok8s-clusterip.yaml\n\nkubectl get endpoints\n# NAME                         ENDPOINTS                                          AGE\n# service-hellok8s-clusterip   172.17.0.10:3000,172.17.0.2:3000,172.17.0.3:3000   10s\n\nkubectl get pod -o wide\n# NAME                                   READY   STATUS    RESTARTS   AGE    IP           NODE \n# hellok8s-deployment-5d5545b69c-24lw5   1/1     Running   0          112s   172.17.0.7   minikube \n# hellok8s-deployment-5d5545b69c-9g94t   1/1     Running   0          112s   172.17.0.3   minikube\n# hellok8s-deployment-5d5545b69c-9gm8r   1/1     Running   0          112s   172.17.0.2   minikube\n# nginx                                  1/1     Running   0          112s   172.17.0.9   minikube\n\nkubectl get service\n# NAME                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\n# service-hellok8s-clusterip   ClusterIP   10.104.96.153   <none>        3000/TCP   10s\n```\n\n接着我们可以通过在集群其它应用中访问 `service-hellok8s-clusterip` 的 IP 地址 `10.104.96.153` 来访问 `hellok8s:v3` 服务。\n\n这里通过在集群内创建一个 `nginx` 来访问 `hellok8s` 服务。创建后进入 `nginx` 容器来用 `curl` 命令访问 `service-hellok8s-clusterip` 。\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n    app: nginx\nspec:\n  containers:\n    - name: nginx-container\n      image: nginx\n```\n\n```shell\nkubectl get pods\n# NAME                                   READY   STATUS    RESTARTS   AGE\n# hellok8s-deployment-5d5545b69c-24lw5   1/1     Running   0          27m\n# hellok8s-deployment-5d5545b69c-9g94t   1/1     Running   0          27m\n# hellok8s-deployment-5d5545b69c-9gm8r   1/1     Running   0          27m\n# nginx                                  1/1     Running   0          41m\n\nkubectl get service\n# NAME                         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\n# service-hellok8s-clusterip   ClusterIP   10.104.96.153   <none>        3000/TCP   10s\n\nkubectl exec -it nginx-pod -- /bin/bash\n# root@nginx-pod:/# curl 10.104.96.153:3000\n# [v3] Hello, Kubernetes!, From host: hellok8s-deployment-5d5545b69c-9gm8r\n# root@nginx-pod:/# curl 10.104.96.153:3000\n#[v3] Hello, Kubernetes!, From host: hellok8s-deployment-5d5545b69c-9g94t\n```\n\n可以看到，我们多次 `curl 10.104.96.153:3000` 访问 `hellok8s` Service IP 地址，返回的 `hellok8s:v3` `hostname` 不一样，说明 Service 可以接收请求并将它们传递给它后面的所有 pod，还可以自动负载均衡。你也可以试试增加或者减少 `hellok8s:v3` pod 副本数量，观察 Service 的请求是否会动态变更。调用过程如下图所示：\n\n![service-clusterip-fix-name](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/service-clusterip-fix-name.png)\n\n除了上述的 `ClusterIp` 的方式外，Kubernetes `ServiceTypes` 允许指定你所需要的 Service 类型，默认是 `ClusterIP`。`Type` 的值包括如下：\n\n- `ClusterIP`：通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是默认的 `ServiceType`。\n- [`NodePort`](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)：通过每个节点上的 IP 和静态端口（`NodePort`）暴露服务。 `NodePort` 服务会路由到自动创建的 `ClusterIP` 服务。 通过请求 `<节点 IP>:<节点端口>`，你可以从集群的外部访问一个 `NodePort` 服务。\n- [`LoadBalancer`](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer)：使用云提供商的负载均衡器向外部暴露服务。 外部负载均衡器可以将流量路由到自动创建的 `NodePort` 服务和 `ClusterIP` 服务上。\n- [`ExternalName`](https://kubernetes.io/docs/concepts/services-networking/service/#externalname)：通过返回 `CNAME` 和对应值，可以将服务映射到 `externalName` 字段的内容（例如，`foo.bar.example.com`）。 无需创建任何类型代理。\n\n### NodePort\n\n我们知道`kubernetes` 集群并不是单机运行，它管理着多台节点即 [Node](https://kubernetes.io/docs/concepts/architecture/nodes/)，可以通过每个节点上的 IP 和静态端口（`NodePort`）暴露服务。如下图所示，如果集群内有两台 Node 运行着 `hellok8s:v3`，我们创建一个 `NodePort` 类型的 Service，将 `hellok8s:v3` 的 `3000` 端口映射到 Node 机器的 `30000` 端口 (在 30000-32767 范围内)，就可以通过访问 `http://node1-ip:30000` 或者 `http://node2-ip:30000` 访问到服务。\n\n![service-nodeport-fix-name](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/service-nodeport-fix-name.png)\n\n这里以 `minikube` 为例，我们可以通过 `minikube ip` 命令拿到 k8s cluster node  IP地址。下面的教程都以我本机的 `192.168.59.100` 为例，需要替换成你的 IP 地址。\n\n```shell\nminikube ip\n# 192.168.59.100\n```\n\n接着以 NodePort 的 ServiceType 创建一个 Service 来接管 pod 流量。通过`minikube` 节点上的 IP `192.168.59.100` 暴露服务。 `NodePort` 服务会路由到自动创建的 `ClusterIP` 服务。 通过请求 `<节点 IP>:<节点端口>` -- `192.168.59.100`:30000，你可以从集群的外部访问一个 `NodePort` 服务，最终重定向到 `hellok8s:v3` 的 `3000` 端口。\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: service-hellok8s-nodeport\nspec:\n  type: NodePort\n  selector:\n    app: hellok8s\n  ports:\n  - port: 3000\n    nodePort: 30000\n```\n\n创建 `service-hellok8s-nodeport` Service 后，使用 `curl` 命令或者浏览器访问 `http://192.168.59.100:30000` 可以得到结果。\n\n```shell\nkubectl apply -f service-hellok8s-nodeport.yaml\n\nkubectl get service\n# NAME                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\n# service-hellok8s-nodeport    NodePort    10.109.188.161   <none>        3000:30000/TCP   28s\n\nkubectl get pods\n# NAME                                   READY   STATUS    RESTARTS   AGE\n# hellok8s-deployment-5d5545b69c-24lw5   1/1     Running   0          27m\n# hellok8s-deployment-5d5545b69c-9g94t   1/1     Running   0          27m\n# hellok8s-deployment-5d5545b69c-9gm8r   1/1     Running   0          27m\n\ncurl http://192.168.59.100:30000\n# [v3] Hello, Kubernetes!, From host: hellok8s-deployment-5d5545b69c-9g94t\n\ncurl http://192.168.59.100:30000\n# [v3] Hello, Kubernetes!, From host: hellok8s-deployment-5d5545b69c-24lw5\n```\n\n### LoadBalancer\n\n[`LoadBalancer`](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer) 是使用云提供商的负载均衡器向外部暴露服务。 外部负载均衡器可以将流量路由到自动创建的 `NodePort` 服务和 `ClusterIP` 服务上，假如你在 [AWS](https://aws.amazon.com) 的 [EKS](https://aws.amazon.com/eks/) 集群上创建一个 Type 为 `LoadBalancer`  的 Service。它会自动创建一个 ELB ([Elastic Load Balancer](https://aws.amazon.com/elasticloadbalancing)) ，并可以根据配置的 IP 池中自动分配一个独立的 IP 地址，可以供外部访问。\n\n这里因为我们使用的是 `minikube`，可以使用 `minikube tunnel` 来辅助创建 LoadBalancer 的 `EXTERNAL_IP`，具体教程可以查看[官网文档](https://minikube.sigs.k8s.io/docs/handbook/accessing/#loadbalancer-access)，但是和实际云提供商的 LoadBalancer 还是有本质区别，所以 [Repository](https://github.com/guangzhengli/kubernetes_workshop) 不做更多阐述，有条件的可以使用 [AWS](https://aws.amazon.com) 的 [EKS](https://aws.amazon.com/eks/) 集群上创建一个 ELB ([Elastic Load Balancer](https://aws.amazon.com/elasticloadbalancing)) 试试。\n\n下图显示 LoadBalancer 的 Service 架构图。\n\n![service-loadbalancer-fix-name](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/service-loadbalancer-fix-name.png)\n\n## ingress\n\n[Ingress](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#ingress-v1beta1-networking-k8s-io) 公开从集群外部到集群内[服务](https://kubernetes.io/docs/concepts/services-networking/service/)的 HTTP 和 HTTPS 路由。 流量路由由 Ingress 资源上定义的规则控制。Ingress 可为 Service 提供外部可访问的 URL、负载均衡流量、 SSL/TLS，以及基于名称的虚拟托管。你必须拥有一个 [Ingress 控制器](https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress-controllers) 才能满足 Ingress 的要求。 仅创建 Ingress 资源本身没有任何效果。 [Ingress 控制器](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers) 通常负责通过负载均衡器来实现 Ingress，例如 `minikube` 默认使用的是 [nginx-ingress](https://minikube.sigs.k8s.io/docs/tutorials/nginx_tcp_udp_ingress/)，目前  `minikube` 也支持 [Kong-Ingress](https://minikube.sigs.k8s.io/docs/handbook/addons/kong-ingress/)。\n\nIngress 可以“简单理解”为服务的网关 Gateway，它是所有流量的入口，经过配置的路由规则，将流量重定向到后端的服务。\n\n在   `minikube` 中，可以通过下面命令开启 Ingress-Controller 的功能。默认使用的是 [nginx-ingress](https://minikube.sigs.k8s.io/docs/tutorials/nginx_tcp_udp_ingress/)。\n\n```shell\nminikube addons enable ingress\n```\n\n接着删除之前创建的所有 `pod`, `deployment`, `service` 资源。\n\n``` shell\nkubectl delete deployment,service --all\n```\n\n接着根据之前的教程，创建 `hellok8s:v3` 和 `nginx` 的`deployment`与 `service` 资源。Service 的 type 为 ClusterIP 即可。\n\n`hellok8s:v3` 的端口映射为 `3000:3000`，`nginx` 的端口映射为 `4000:80`，这里后续写 Ingress Route 规则时会用到。\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: service-hellok8s-clusterip\nspec:\n  type: ClusterIP\n  selector:\n    app: hellok8s\n  ports:\n  - port: 3000\n    targetPort: 3000\n\n---\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hellok8s-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: hellok8s\n  template:\n    metadata:\n      labels:\n        app: hellok8s\n    spec:\n      containers:\n        - image: guangzhengli/hellok8s:v3\n          name: hellok8s-container\n```\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: service-nginx-clusterip\nspec:\n  type: ClusterIP\n  selector:\n    app: nginx\n  ports:\n  - port: 4000\n    targetPort: 80\n\n---\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - image: nginx\n        name: nginx-container\n```\n\n```shell\nkubectl apply -f hellok8s.yaml                 \n# service/service-hellok8s-clusterip created\n# deployment.apps/hellok8s-deployment created\n\nkubectl apply -f nginx.yaml   \n# service/service-nginx-clusterip created\n# deployment.apps/nginx-deployment created\n\nkubectl get pods            \n# NAME                                   READY   STATUS    RESTARTS   AGE\n# hellok8s-deployment-5d5545b69c-4wvmf   1/1     Running   0          55s\n# hellok8s-deployment-5d5545b69c-qcszp   1/1     Running   0          55s\n# hellok8s-deployment-5d5545b69c-sn7mn   1/1     Running   0          55s\n# nginx-deployment-d47fd7f66-d9r7x       1/1     Running   0          34s\n# nginx-deployment-d47fd7f66-hp5nf       1/1     Running   0          34s\n\nkubectl get service\n# NAME                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\n# service-hellok8s-clusterip   ClusterIP   10.97.88.18      <none>        3000/TCP   77s\n# service-nginx-clusterip      ClusterIP   10.103.161.247   <none>        4000/TCP   56s\n```\n\n这样在 k8s 集群中，就有 3 个 `hellok8s:v3` 的 pod，2 个 `nginx` 的 pod。并且`hellok8s:v3` 的端口映射为 `3000:3000`，`nginx` 的端口映射为 `4000:80`。在这个基础上，接下来编写 Ingress 资源的定义，`nginx.ingress.kubernetes.io/ssl-redirect: \"false\"` 的意思是这里关闭 `https` 连接，只使用 `http` 连接。\n\n匹配前缀为 `/hello` 的路由规则，重定向到 `hellok8s:v3` 服务，匹配前缀为 `/` 的根路径重定向到 `nginx`。\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hello-ingress\n  annotations:\n    # We are defining this annotation to prevent nginx\n    # from redirecting requests to `https` for now\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"\nspec:\n  rules:\n    - http:\n        paths:\n          - path: /hello\n            pathType: Prefix\n            backend:\n              service:\n                name: service-hellok8s-clusterip\n                port:\n                  number: 3000\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: service-nginx-clusterip\n                port:\n                  number: 4000\n\n```\n\n```shell\nkubectl apply -f ingress.yaml\n# ingress.extensions/hello-ingress created\n\nkubectl get ingress          \n# NAME            CLASS   HOSTS   ADDRESS   PORTS   AGE\n# hello-ingress   nginx   *                 80      16s\n\n# replace 192.168.59.100 by your minikube ip\ncurl http://192.168.59.100/hello\n# [v3] Hello, Kubernetes!, From host: hellok8s-deployment-5d5545b69c-sn7mn\n\ncurl http://192.168.59.100/\n# (....Thank you for using nginx.....)\n```\n\n上面的教程中将所有流量都发送到 Ingress 中，如下图所示：\n\n![ingress](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/ingress.png)\n\n## Namespace\n\n在实际的开发当中，有时候我们需要不同的环境来做开发和测试，例如 `dev` 环境给开发使用，`test` 环境给 QA 使用，那么 k8s 能不能在不同环境 `dev` `test` `uat` `prod` 中区分资源，让不同环境的资源独立互相不影响呢，答案是肯定的，k8s 提供了名为 Namespace 的资源来帮助隔离资源。\n\n在 Kubernetes 中，**名字空间（Namespace）** 提供一种机制，将同一集群中的资源划分为相互隔离的组。 同一名字空间内的资源名称要唯一，但跨名字空间时没有这个要求。 名字空间作用域仅针对带有名字空间的对象，例如 Deployment、Service 等。\n\n前面的教程中，默认使用的 namespace 是 `default`。\n\n下面展示如何创建一个新的 namespace， `namespace.yaml` 文件定义了两个不同的 namespace，分别是 `dev` 和 `test`。\n\n``` yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: dev\n  \n---\n\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: test\n```\n\n可以通过`kubectl apply -f namespaces.yaml` 创建两个新的 namespace，分别是 `dev` 和 `test`。\n\n```yaml\nkubectl apply -f namespaces.yaml    \n# namespace/dev created\n# namespace/test created\n\n\nkubectl get namespaces          \n# NAME              STATUS   AGE\n# default           Active   215d\n# dev               Active   2m44s\n# ingress-nginx     Active   110d\n# kube-node-lease   Active   215d\n# kube-public       Active   215d\n# kube-system       Active   215d\n# test              Active   2m44s\n```\n\n那么如何在新的 namespace 下创建资源和获取资源呢？只需要在命令后面加上 `-n namespace` 即可。例如根据上面教程中，在名为 `dev` 的 namespace 下创建 `hellok8s:v3` 的 deployment 资源。\n\n```shell\nkubectl apply -f deployment.yaml -n dev\n\nkubectl get pods -n dev\n```\n\n## Configmap\n\n上面的教程提到，我们在不同环境 `dev` `test` `uat` `prod` 中区分资源，可以让其资源独立互相不受影响，但是随之而来也会带来一些问题，例如不同环境的数据库的地址往往是不一样的，那么如果在代码中写同一个数据库的地址，就会出现问题。\n\nK8S 使用 ConfigMap 来将你的配置数据和应用程序代码分开，将非机密性的数据保存到键值对中。ConfigMap 在设计上不是用来保存大量数据的。在 ConfigMap 中保存的数据不可超过 1 MiB。如果你需要保存超出此尺寸限制的数据，你可能考虑挂载存储卷。\n\n下面我们可以来看一个例子，我们修改之前代码，假设不同环境的数据库地址不同，下面代码从环境变量中获取 `DB_URL`，并将它返回。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n\thost, _ := os.Hostname()\n\tdbURL := os.Getenv(\"DB_URL\")\n\tio.WriteString(w, fmt.Sprintf(\"[v4] Hello, Kubernetes! From host: %s, Get Database Connect URL: %s\", host, dbURL))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", hello)\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n构建 `hellok8s:v4` 的镜像，推送到远程仓库。并删除之前创建的所有资源。\n\n```shell\ndocker build . -t guangzhengli/hellok8s:v4\ndocker push guangzhengli/hellok8s:v4\n\nkubectl delete deployment,service,ingress --all\n```\n\n接下来创建不同 namespace 的 configmap 来存放 `DB_URL`。\n\n创建 `hellok8s-config-dev.yaml` 文件\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: hellok8s-config\ndata:\n  DB_URL: \"http://DB_ADDRESS_DEV\"\n```\n\n创建 `hellok8s-config-test.yaml` 文件\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: hellok8s-config\ndata:\n  DB_URL: \"http://DB_ADDRESS_TEST\"\n```\n\n分别在 `dev` `test` 两个 namespace 下创建相同的 `ConfigMap`，名字都叫 hellok8s-config，但是存放的 Pair 对中 Value 值不一样。\n\n```shell\nkubectl apply -f hellok8s-config-dev.yaml -n dev\n# configmap/hellok8s-config created\n\nkubectl apply -f hellok8s-config-test.yaml -n test \n# configmap/hellok8s-config created\n\nkubectl get configmap --all-namespaces\nNAMESPACE         NAME                                 DATA   AGE\ndev               hellok8s-config                      1      3m12s\ntest              hellok8s-config                      1      2m1s\n```\n\n接着使用 POD 的方式来部署 `hellok8s:v4`，其中 `env.name` 表示的是将 configmap 中的值写进环境变量，这样代码从环境变量中获取 `DB_URL`，这个 KEY 名称必须保持一致。`valueFrom` 代表从哪里读取，`configMapKeyRef` 这里表示从名为 `hellok8s-config` 的 `configMap` 中读取 `KEY=DB_URL` 的 Value。\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hellok8s-pod\nspec:\n  containers:\n    - name: hellok8s-container\n      image: guangzhengli/hellok8s:v4\n      env:\n        - name: DB_URL\n          valueFrom:\n            configMapKeyRef:\n              name: hellok8s-config\n              key: DB_URL\n```\n\n下面分别在 `dev` `test` 两个 namespace 下创建  `hellok8s:v4`，接着通过 `port-forward` 的方式访问不同 namespace 的服务，可以看到返回的 `Get Database Connect URL: http://DB_ADDRESS_TEST` 是不一样的！\n\n```shell\nkubectl apply -f hellok8s.yaml -n dev             \n# pod/hellok8s-pod created\n\nkubectl apply -f hellok8s.yaml -n test\n# pod/hellok8s-pod created\n\nkubectl port-forward hellok8s-pod 3000:3000 -n dev\n\ncurl http://localhost:3000\n# [v4] Hello, Kubernetes! From host: hellok8s-pod, Get Database Connect URL: http://DB_ADDRESS_DEV\n\nkubectl port-forward hellok8s-pod 3000:3000 -n test\n\ncurl http://localhost:3000\n# [v4] Hello, Kubernetes! From host: hellok8s-pod, Get Database Connect URL: http://DB_ADDRESS_TEST\n```\n\n## Secret\n\n上面提到，我们会选择以 configmap 的方式挂载配置信息，但是当我们的配置信息需要加密的时候， configmap 就无法满足这个要求。例如上面要挂载数据库密码的时候，就需要明文挂载。\n\n这个时候就需要 Secret 来存储加密信息，虽然在资源文件的编码上，只是通过 Base64 的方式简单编码，但是在实际生产过程中，可以通过 pipeline 或者专业的 [AWS KMS](https://aws.amazon.com/kms/) 服务进行密钥管理。这样就大大减少了安全事故。\n\n> Secret 是一种包含少量敏感信息例如密码、令牌或密钥的对象。由于创建 Secret 可以独立于使用它们的 Pod， 因此在创建、查看和编辑 Pod 的工作流程中暴露 Secret（及其数据）的风险较小。 Kubernetes 和在集群中运行的应用程序也可以对 Secret 采取额外的预防措施， 例如避免将机密数据写入非易失性存储。\n>\n> 默认情况下，Kubernetes Secret 未加密地存储在 API 服务器的底层数据存储（etcd）中。 任何拥有 API 访问权限的人都可以检索或修改 Secret，任何有权访问 etcd 的人也可以。 此外，任何有权限在命名空间中创建 Pod 的人都可以使用该访问权限读取该命名空间中的任何 Secret； 这包括间接访问，例如创建 Deployment 的能力。\n>\n> 为了安全地使用 Secret，请至少执行以下步骤：\n>\n> 1. 为 Secret [启用静态加密](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)；\n> 2. [启用或配置 RBAC 规则](https://kubernetes.io/docs/reference/access-authn-authz/authorization/)来限制读取和写入 Secret 的数据（包括通过间接方式）。需要注意的是，被准许创建 Pod 的人也隐式地被授权获取 Secret 内容。\n> 3. 在适当的情况下，还可以使用 RBAC 等机制来限制允许哪些主体创建新 Secret 或替换现有 Secret。\n\nSecret 的资源定义和 ConfigMap 结构基本一致，唯一区别在于 kind 是 `Secret`，还有 Value 需要 Base64 编码，你可以通过下面命令快速  Base64 编解码。当然 Secret 也提供了一种 `stringData`，可以不需要 Base64 编码。\n\n```shell\necho \"db_password\" | base64\n# ZGJfcGFzc3dvcmQK\n\necho \"ZGJfcGFzc3dvcmQK\" | base64 -d\n# db_password\n```\n\n这里将 Base64 编码过后的值，填入对应的 key - value 中。\n\n```yaml\n# hellok8s-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: hellok8s-secret\ndata:\n  DB_PASSWORD: \"ZGJfcGFzc3dvcmQK\"\n```\n\n```yaml\n# hellok8s.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hellok8s-pod\nspec:\n  containers:\n    - name: hellok8s-container\n      image: guangzhengli/hellok8s:v5\n      env:\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: hellok8s-secret\n              key: DB_PASSWORD\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n\thost, _ := os.Hostname()\n\tdbPassword := os.Getenv(\"DB_PASSWORD\")\n\tio.WriteString(w, fmt.Sprintf(\"[v5] Hello, Kubernetes! From host: %s, Get Database Connect Password: %s\", host, dbPassword))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", hello)\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n在代码中读取 `DB_PASSWORD` 环境变量，直接返回对应字符串。Secret 的使用方法和前面教程中 ConfigMap 基本一致，这里就不再过多赘述。\n\n```shell\ndocker build . -t guangzhengli/hellok8s:v5\n\ndocker push guangzhengli/hellok8s:v5\n\nkubectl apply -f hellok8s-secret.yaml\n\nkubectl apply -f hellok8s.yaml\n\nkubectl port-forward hellok8s-pod 3000:3000\n```\n\n\n## Job\n\n在实际的开发过程中，还有一类任务是之前的资源不能满足的，即一次性任务。例如常见的计算任务，只需要拿到相关数据计算后得出结果即可，无需一直运行。而处理这一类任务的资源就是 Job。\n\n> Job 会创建一个或者多个 Pod，并将继续重试 Pod 的执行，直到指定数量的 Pod 成功终止。 随着 Pod 成功结束，Job 跟踪记录成功完成的 Pod 个数。 当数量达到指定的成功个数阈值时，任务（即 Job）结束。 删除 Job 的操作会清除所创建的全部 Pod。 挂起 Job 的操作会删除 Job 的所有活跃 Pod，直到 Job 被再次恢复执行。\n>\n> 一种简单的使用场景下，你会创建一个 Job 对象以便以一种可靠的方式运行某 Pod 直到完成。 当第一个 Pod 失败或者被删除（比如因为节点硬件失效或者重启）时，Job 对象会启动一个新的 Pod。\n\n下面来看一个 Job 的资源定义，其中 Kind 和 metadata.name 是资源类型和名字就不再解释，`completions` 指的是会创建 Pod 的数量，每个 pod 都会完成下面的任务。`parallelism` 指的是并发执行最大数量，例如下面就会先创建 3 个 pod 并发执行任务，一旦某个 pod 执行完成，就会再创建新的 pod 来执行，直到 5 个 pod 执行完成，Job 才会被标记为完成。\n\n`restartPolicy = \"OnFailure` 的含义和 Pod 生命周期相关，Pod 中的容器可能因为退出时返回值非零， 或者容器因为超出内存约束而被杀死等等。 如果发生这类事件，并且 `.spec.template.spec.restartPolicy = \"OnFailure\"`， Pod 则继续留在当前节点，但容器会被重新运行。因此，你的程序需要能够处理在本地被重启的情况，或者要设置 `.spec.template.spec.restartPolicy = \"Never\"`。 \n\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: hello-job\nspec:\n  parallelism: 3\n  completions: 5\n  template:\n    spec:\n      restartPolicy: OnFailure\n      containers:\n        - name: echo\n          image: busybox\n          command:\n            - \"/bin/sh\"\n          args:\n            - \"-c\"\n            - \"for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done\"\n```\n\n通过下面的命令创建 job，可以通过 `kubectl get pods -w` 来观察 job 创建 pod 的过程和结果。最后可以通过 `logs` 命令查看日志。\n\n```shell\nkubectl apply -f hello-job.yaml\n\nkubectl get jobs                  \n# NAME        COMPLETIONS   DURATION   AGE\n# hello-job   5/5           19s        83s\n\nkubectl get pods                      \n# NAME                                   READY   STATUS      RESTARTS   AGE\n# hello-job--1-5gjjr                     0/1     Completed   0          34s\n# hello-job--1-8ffmn                     0/1     Completed   0          26s\n# hello-job--1-ltsvm                     0/1     Completed   0          34s\n# hello-job--1-mttwv                     0/1     Completed   0          29s\n# hello-job--1-ww2qp                     0/1     Completed   0          34s\n\nkubectl logs -f hello-job--1-5gjjr \n# 1\n# ...\n```\n\nJob 完成时不会再创建新的 Pod，不过已有的 Pod [通常](https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy)也不会被删除。 保留这些 Pod 使得你可以查看已完成的 Pod 的日志输出，以便检查错误、警告或者其它诊断性输出。 可以使用 `kubectl` 来删除 Job（例如 `kubectl delete -f hello-job.yaml`)。当使用 `kubectl` 来删除 Job 时，该 Job 所创建的 Pod 也会被删除。\n\n## CronJob\n\n*CronJob* 可以理解为定时任务，创建基于 Cron 时间调度的 [Jobs](https://kubernetes.io/docs/concepts/workloads/controllers/job/)。\n\n> CronJob 用于执行周期性的动作，例如备份、报告生成等。 这些任务中的每一个都应该配置为周期性重复的（例如：每天/每周/每月一次）； 你可以定义任务开始执行的时间间隔。\n\nCron 时间表语法\n\n```\n# ┌───────────── 分钟 (0 - 59)\n# │ ┌───────────── 小时 (0 - 23)\n# │ │ ┌───────────── 月的某天 (1 - 31)\n# │ │ │ ┌───────────── 月份 (1 - 12)\n# │ │ │ │ ┌───────────── 周的某天 (0 - 6)（周日到周一；在某些系统上，7 也是星期日）\n# │ │ │ │ │                          或者是 sun，mon，tue，web，thu，fri，sat\n# │ │ │ │ │\n# │ │ │ │ │\n# * * * * *\n```\n\n用法除了需要加上 cron 表达式之外，其余基本和 Job 保持一致。\n\n```yaml\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: hello-cronjob\nspec:\n  schedule: \"* * * * *\" # Every minute\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          restartPolicy: OnFailure\n          containers:\n            - name: echo\n              image: busybox\n              command:\n                - \"/bin/sh\"\n              args:\n                - \"-c\"\n                - \"for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done\"\n```\n\n使用命令和 Job 也基本保持一致，这里就不过多赘述。\n\n```shell\nkubectl apply -f hello-cronjob.yaml\n# cronjob.batch/hello-cronjob created\n\nkubectl get cronjob                \n# NAME            SCHEDULE    SUSPEND   ACTIVE   LAST SCHEDULE   AGE\n# hello-cronjob   * * * * *   False     0        <none>          8s\n\nkubectl get pods   \n# NAME                                   READY   STATUS      RESTARTS   AGE\n# hello-cronjob-27694609--1-2nmdx        0/1     Completed   0          15s\n```\n\n## Helm\n\n经过前面的教程，想必你已经对 kubernetes 的使用有了一定的理解。但是不知道你是否想过这样一个问题，就是我们前面教程中提到的所有资源，包括用 `pod`, `deployment`, `service`, `ingress`, `configmap`,`secret` 所有资源来部署一套完整的 `hellok8s` 服务的话，难道需要一个一个的 `kubectl apply -f` 来创建吗？如果换一个 namespace，或者说换一套 kubernetes 集群部署的话，又要重复性的操作创建的过程吗？\n\n我们平常使用操作系统时，需要安装一个应用的话，可以直接使用 `apt` 或者 `brew` 来直接安装，而不需要关心这个应用需要哪些依赖，哪些配置。在使用 kubernetes 安装应用服务 `hellok8s` 时，我们自然也希望能够一个命令就安装完成，而提供这个能力的，就是 CNCF 的毕业项目 [Helm](https://github.com/helm/helm)。\n\n> Helm 帮助您管理 Kubernetes 应用—— Helm Chart，Helm 是查找、分享和使用软件构建 [Kubernetes](https://kubernetes.io/) 的最优方式。\n>\n> 复杂性管理 ——即使是最复杂的应用，Helm Chart 依然可以描述， 提供使用单点授权的可重复安装应用程序。\n>\n> 易于升级 ——随时随地升级和自定义的钩子消除您升级的痛苦。\n>\n> 分发简单 —— Helm Chart 很容易在公共或私有化服务器上发版，分发和部署站点。\n>\n> 回滚 —— 使用 `helm rollback` 可以轻松回滚到之前的发布版本。\n\n我们通过 brew 来安装 helm。更多方式可以参考[官方文档](https://helm.sh/zh/docs/intro/install/)。\n\n```shell\nbrew install helm\n```\n\nHelm 的使用方式可以解释为：Helm 安装 *charts* 到 Kubernetes 集群中，每次安装都会创建一个新的 *release*。你可以在 Helm 的 chart *repositories* 中寻找新的 chart。\n\n### 用 helm 安装 hellok8s\n开始本节教程前，我们先把之前手动创建的 hellok8s 相关的资源删除(防止使用 helm 创建同名的 k8s 资源失败)。\n\n在尝试自己创建 hellok8s helm chart 之前，我们可以先来熟悉一下怎么使用 helm chart。在这里我先创建好了一个 hellok8s（包括会创建 deployment, service, ingress, configmaps, secret）的 helm chart。通过 GitHub actions 生成放在了 [gh-pages](https://github.com/guangzhengli/k8s-tutorials/tree/gh-pages/) 分支下的 `index.yaml` 文件中。\n\n接着可以使用下面命令进行快速安装，其中 `helm repo add` 表示将我创建好的 hellok8s chart 添加到自己本地的仓库当中，`helm install` 表示从仓库中安装 hellok8s/hello-helm 到 k8s 集群当中。\n\n```shell\nhelm repo add hellok8s https://guangzhengli.github.io/k8s-tutorials/\n# \"hellok8s\" has been added to your repositories\n\nhelm install my-hello-helm hellok8s/hello-helm --version 0.1.0\n# NAME: my-hello-helm\n# NAMESPACE: default\n# STATUS: deployed\n# REVISION: 1\n```\n\n创建完成后，通过 `kubectl get` 等命令可以看到所有 hellok8s 资源都创建成功，`helm` 一条命令即可做到之前教程中所有资源的创建！通过 `curl` k8s 集群的 ingress 地址，也可以看到返回字符串！\n\n```shell\nkubectl get pods\n# NAME                                  READY   STATUS    RESTARTS   AGE\n# hellok8s-deployment-f88f984c6-k8hpz   1/1     Running   0          15h\n# hellok8s-deployment-f88f984c6-nzwg6   1/1     Running   0          15h\n# hellok8s-deployment-f88f984c6-s89s7   1/1     Running   0          15h\n# nginx-deployment-d47fd7f66-6w76b      1/1     Running   0          15h\n# nginx-deployment-d47fd7f66-tsqj5      1/1     Running   0          15h\n\nkubectl get deployments\n# NAME                  READY   UP-TO-DATE   AVAILABLE   AGE\n# hellok8s-deployment   3/3     3            3           15h\n# nginx-deployment      2/2     2            2           15h\n\nkubectl get service\n# NAME                         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\n# kubernetes                   ClusterIP   10.96.0.1        <none>        443/TCP    13d\n# service-hellok8s-clusterip   ClusterIP   10.107.198.175   <none>        3000/TCP   15h\n# service-nginx-clusterip      ClusterIP   10.100.144.49    <none>        4000/TCP   15h\n\nkubectl get ingress\n# NAME               CLASS   HOSTS   ADDRESS     PORTS   AGE\n# hellok8s-ingress   nginx   *       localhost   80      15h\n\nkubectl get configmap\n# NAME               DATA   AGE\n# hellok8s-config    1      15h\n\nkubectl get secret\n# NAME                                  TYPE                                  DATA   AGE\n# hellok8s-secret                       Opaque                                1      15h\n# sh.helm.release.v1.my-hello-helm.v1   helm.sh/release.v1\n\ncurl http://192.168.59.100/hello\n# [v6] Hello, Helm! Message from helm values: It works with Helm Values[v2]!, From namespace: default, From host: hellok8s-deployment-598bbd6884-ttk78, Get Database Connect URL: http://DB_ADDRESS_DEFAULT, Database Connect Password: db_password\n```\n\n### 创建 helm charts\n\n在使用已经创建好的 hello-helm charts 来创建整个 hellok8s 资源后，你可能还是有很多的疑惑，包括 Chart 是如何生成和发布的，如何创建一个新的 Chart？在这节教程中，我们会尝试自己来创建 hello-helm Chart 来完成之前的操作。\n\n首先建议使用 `helm create` 命令来创建一个初始的 Chart，该命令默认会创建一些 k8s 资源定义的初始文件，并且会生成官网推荐的目录结构，如下所示：\n\n```shell\nhelm create hello-helm\n\n.\n├── Chart.yaml\n├── charts\n├── templates\n│   ├── NOTES.txt\n│   ├── _helpers.tpl\n│   ├── deployment.yaml\n│   ├── hpa.yaml\n│   ├── ingress.yaml\n│   ├── service.yaml\n│   ├── serviceaccount.yaml\n│   └── tests\n│       └── test-connection.yaml\n└── values.yaml\n```\n\n我们将默认生成在 templates 目录下面的 `yaml` 文件删除，用之前教程中 `yaml` 文件替换它，最终的结构长这样：\n\n```shell\n.\n├── Chart.yaml\n├── Dockerfile\n├── _helpers.tpl\n├── charts\n├── hello-helm-0.1.0.tgz\n├── index.yaml\n├── main.go\n├── templates\n│   ├── hellok8s-configmaps.yaml\n│   ├── hellok8s-deployment.yaml\n│   ├── hellok8s-secret.yaml\n│   ├── hellok8s-service.yaml\n│   ├── ingress.yaml\n│   ├── nginx-deployment.yaml\n│   └── nginx-service.yaml\n└── values.yaml\n```\n\n其中 `main.go` 定义的是 `hellok8s:v6` 版本的代码，主要是从系统中拿到 message，namespace，dbURL，dbPassword 这几个环境变量，拼接成字符串返回。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc hello(w http.ResponseWriter, r *http.Request) {\n\thost, _ := os.Hostname()\n\tmessage := os.Getenv(\"MESSAGE\")\n\tnamespace := os.Getenv(\"NAMESPACE\")\n\tdbURL := os.Getenv(\"DB_URL\")\n\tdbPassword := os.Getenv(\"DB_PASSWORD\")\n\n\tio.WriteString(w, fmt.Sprintf(\"[v6] Hello, Helm! Message from helm values: %s, From namespace: %s, From host: %s, Get Database Connect URL: %s, Database Connect Password: %s\", message, namespace, host, dbURL, dbPassword))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", hello)\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n为了让大家更加了解 helm charts values 的使用和熟悉 k8s 资源配置，这几个环境变量 `MESSAGE`, `NAMESPACE`, `DB_URL`, `DB_PASSWORD` 分别有不同的来源。\n\n首先修改根目录下的 `values.yaml` 文件，定义自定义的配置信息，从之前教程的 k8s 资源文件中，将一些易于变化的参数提取出来，放在 `values.yaml` 文件中。全部配置信息如下所示：\n\n```yaml\napplication:\n  name: hellok8s\n  hellok8s:\n    image: guangzhengli/hellok8s:v6\n    replicas: 3\n    message: \"It works with Helm Values!\"\n    database:\n      url: \"http://DB_ADDRESS_DEFAULT\"\n      password: \"db_password\"\n  nginx:\n    image: nginx\n    replicas: 2\n```\n\n那自定义好了这些配置后，如何在 k8s 资源定义中使用这些配置信息呢？Helm 默认使用 [Go template 的方式](https://helm.sh/zh/docs/howto/charts_tips_and_tricks/) 来完成。\n\n例如之前教程中，将环境变量 `DB_URL` 定义在 k8s configmaps 中，那么该资源可以定义成如文件所示 `hellok8s-configmaps.yaml`。其中 `metadata.name` 的值是 `{{ .Values.application.name }}-config`，意思是从 `values.yaml` 文件中获取 `application.name` 的值 `hellok8s`，拼接 `-config` 字符串，这样创建出来的 configmaps 资源名称就是 `hellok8s-config`。\n\n同理 `{{ .Values.application.hellok8s.database.url }}` 就是获取值为  `http://DB_ADDRESS_DEFAULT`  放入 configmaps 对应 key 为 DB_URL 的 value 中。\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Values.application.name }}-config\ndata:\n  DB_URL: {{ .Values.application.hellok8s.database.url }}\n```\n\n上面定义的最终效果和之前在 `configmaps` 教程中定义的资源没有区别，这种做的好处是可以将所有可变的参数定义在 `values.yaml` 文件中，使用该 helm charts 的人无需了解具体 k8s 的定义，只需改变成自己想要的参数，即可创建自定义的资源！\n\n同样，我们可以根据之前的教程将 `DB_PASSWORD` 放入 secret 中，并且通过 `b64enc` 方法将值 Base64 编码。\n\n```shell\n# hellok8s-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ .Values.application.name }}-secret\ndata:\n  DB_PASSWORD: {{ .Values.application.hellok8s.database.password | b64enc }}\n```\n\n最后，修改 `hellok8s-deployment` 文件，根据前面的教程，将 `metadata.name` `replicas` `image`  `configMapKeyRef.name` `secretKeyRef.name` 等值修改成从 `values.yaml` 文件中获取。\n\n再添加代码中需要的 `NAMESPACE` 环境变量，从 `.Release.Namespace` [内置对象](https://helm.sh/zh/docs/chart_template_guide/builtin_objects/) 中获取。最后添加 `MESSAGE` 环境变量，直接从 `{{ .Values.application.hellok8s.message }}` 中获取。\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ .Values.application.name }}-deployment\nspec:\n  replicas: {{ .Values.application.hellok8s.replicas }}\n  selector:\n    matchLabels:\n      app: hellok8s\n  template:\n    metadata:\n      labels:\n        app: hellok8s\n    spec:\n      containers:\n        - image: {{ .Values.application.hellok8s.image }}\n          name: hellok8s-container\n          env:\n            - name: DB_URL\n              valueFrom:\n                configMapKeyRef:\n                  name: {{ .Values.application.name }}-config\n                  key: DB_URL\n            - name: DB_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: {{ .Values.application.name }}-secret\n                  key: DB_PASSWORD\n            - name: NAMESPACE\n              value: {{ .Release.Namespace }}\n            - name: MESSAGE\n              value: {{ .Values.application.hellok8s.message }}\n```\n\n修改  `ingress.yaml` 将 `metadata.name` 的值，其它没有变化\n\n``` yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: {{ .Values.application.name }}-ingress\n...\n...\n...\n```\n\n`nginx-deployment.yaml`\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: {{ .Values.application.nginx.replicas }}\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - image: {{ .Values.application.nginx.image }}\n        name: nginx-container\n```\n\n`nginx-service.yaml` 和 `hellok8s-service.yaml` 没有变化。所有代码可以在 [这里](https://github.com/guangzhengli/k8s-tutorials/tree/main/helm-charts/hello-helm) 查看。\n\n稍微修改下默认生成的`Chart.yaml`\n\n```yaml\napiVersion: v2\nname: hello-helm\ndescription: A k8s tutorials in https://github.com/guangzhengli/k8s-tutorials\ntype: application\nversion: 0.1.0\nappVersion: \"1.16.0\"\n```\n\n定义完成所有的 helm 资源后，首先**将 `hellok8s:v6` 镜像打包推送到 DockerHub**。\n\n之后即可在 `hello-helm` 的目录下执行 `helm upgrade` 命令进行安装，安装成功后，执行 curl 命令便能直接得到结果！查看 pod 和 service 等资源，便会发现 helm 能一键安装所有资源！\n\n```shell\nhelm upgrade --install hello-helm --values values.yaml .\n# Release \"hello-helm\" does not exist. Installing it now.\n# NAME: hello-helm\n# NAMESPACE: default\n# STATUS: deployed\n# REVISION: 1\n\ncurl http://192.168.59.100/hello\n# [v6] Hello, Helm! Message from helm values: It works with Helm Values!, From namespace: default, From host: hellok8s-deployment-57d7df7964-m6gcc, Get Database Connect URL: http://DB_ADDRESS_DEFAULT, Database Connect Password: db_password\n\nkubectl get pods\n# NAME                                  READY   STATUS    RESTARTS   AGE\n# hellok8s-deployment-f88f984c6-k8hpz   1/1     Running   0          32m\n# hellok8s-deployment-f88f984c6-nzwg6   1/1     Running   0          32m\n# hellok8s-deployment-f88f984c6-s89s7   1/1     Running   0          32m\n# nginx-deployment-d47fd7f66-6w76b      1/1     Running   0          32m\n# nginx-deployment-d47fd7f66-tsqj5      1/1     Running   0          32m\n```\n\n#### rollback\n\nHelm 也提供了 Rollback 的功能，我们先修改一下 `message: \"It works with Helm Values[v2]!\"` 加上 [v2]。\n\n```\napplication:\n  name: hellok8s\n  hellok8s:\n    image: guangzhengli/hellok8s:v6\n    replicas: 3\n    message: \"It works with Helm Values[v2]!\"\n    database:\n      url: \"http://DB_ADDRESS_DEFAULT\"\n      password: \"db_password\"\n  nginx:\n    image: nginx\n    replicas: 2\n```\n\n再执行 `helm upgrade` 命令更新 k8s 资源，通过 `curl http://192.168.59.100/hello` 可以看到资源已经更新。\n\n```shell\n➜  hello-helm git:(main) ✗ helm upgrade --install hello-helm --values values.yaml .\n# Release \"hello-helm\" has been upgraded. Happy Helming!\nNAME: hello-helm\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 2\n\ncurl http://192.168.59.100/hello\n# [v6] Hello, Helm! Message from helm values: It works with Helm Values[v2]!, From namespace: default, From host: hellok8s-deployment-598bbd6884-4b9bw, Get Database Connect URL: http://DB_ADDRESS_DEFAULT, Database Connect Password: db_password\n```\n\n如果这一次更新有问题的话，可以通过 ` helm rollback` 快速回滚。通过下面命令看到，和 deployment 的 rollback 一样，回滚后 REVISION 版本都会增大到 3 而不是回滚到 1，回滚后使用  `curl` 命令返回的 v1 版本的字符串。\n\n```shell\nhelm ls\n# NAME            NAMESPACE       REVISION          STATUS          CHART                   APP VERSION\n# hello-helm      default         2                 deployed        hello-helm-0.1.0        1.16.0 \n\nhelm rollback hello-helm 1\n# Rollback was a success! Happy Helming!\n\nhelm ls\n# NAME            NAMESPACE       REVISION          STATUS          CHART                   APP VERSION\n# hello-helm      default         3                 deployed        hello-helm-0.1.0        1.16.0 \n\ncurl http://192.168.59.100/hello\n# [v6] Hello, Helm! Message from helm values: It works with Helm Values!, From namespace: default, From host: hellok8s-deployment-57d7df7964-482xw, Get Database Connect URL: http://DB_ADDRESS_DEFAULT, Database Connect Password: db_password\n```\n\n#### 多环境配置\n\n使用 Helm 也很容易多环境部署，新建 `values-dev.yaml` 文件，里面内容自定义 `dev` 环境需要的配置信息。\n\n```yaml\napplication:\n  hellok8s:\n    message: \"It works with Helm Values values-dev.yaml!\"\n    database:\n      url: \"http://DB_ADDRESS_DEV\"\n      password: \"db_password_dev\"\n```\n\n可以多次指定'--values -f'参数，最后（最右边）指定的文件优先级最高，这里最右边的是 `values-dev.yaml` 文件，所以 `values-dev.yaml` 文件中的值会覆盖 `values.yaml` 中相同的值，`-n dev` 表示在名字为 dev 的 namespace 中创建 k8s 资源，执行完成后，我们可以通过 `curl` 命令看到返回的字符串中读取的是 `values-dev.yaml` 文件的配置，并且 `From namespace = dev`。\n\n```shell\nhelm upgrade --install hello-helm -f values.yaml -f values-dev.yaml -n dev .\n\n# Release \"hello-helm\" does not exist. Installing it now.\n# NAME: hello-helm\n# NAMESPACE: dev\n# STATUS: deployed\n# REVISION: 1\n\ncurl http://192.168.59.100/hello\n# [v6] Hello, Helm! Message from helm values: It works with Helm Values values-dev.yaml!, From namespace: dev, From host: hellok8s-deployment-f5fff9df-89sn6, Get Database Connect URL: http://DB_ADDRESS_DEV, Database Connect Password: db_password_dev\n\nkubectl get pods -n dev\n# NAME                                 READY   STATUS    RESTARTS   AGE\n# hellok8s-deployment-f5fff9df-89sn6   1/1     Running   0          4m23s\n# hellok8s-deployment-f5fff9df-tkh6g   1/1     Running   0          4m23s\n# hellok8s-deployment-f5fff9df-wmlpb   1/1     Running   0          4m23s\n# nginx-deployment-d47fd7f66-cdlmf     1/1     Running   0          4m23s\n# nginx-deployment-d47fd7f66-cgst2     1/1     Running   0          4m23s\n```\n\n除此之外，还可以使用 '--set-file' 设置独立的值，类似于 `helm upgrade --install hello-helm -f values.yaml -f values-dev.yaml --set application.hellok8s.message=\"It works with set helm values\" -n dev .` 方式在命令中设置 values 的值，可以随意修改相关配置，此方法在 CICD 中经常用到。\n\n### helm chart 打包和发布\n\n上面的例子展示了我们可以用一行命令在一个新的环境中安装所有需要的 k8s 资源！那么如何将 helm chart 打包、分发和下载呢？在官网中，提供了两种教程，一种是以 [GCS 存储的教程](https://helm.sh/zh/docs/howto/chart_repository_sync_example/)，还有一种是以 [GitHub Pages 存储的教程](https://helm.sh/zh/docs/howto/chart_releaser_action/)。\n\n这里我们使用第二种，并且使用 [chart-releaser-action](https://github.com/helm/chart-releaser-action) 来做自动发布，该 action 会默认生成 helm chart 发布到 `gh-pages` 分支上，本教程的 hellok8s helm chart 就发布在了本仓库的[gh-pages](https://github.com/guangzhengli/k8s-tutorials/tree/gh-pages/) 分支上的 `index.yaml` 文件中。\n\n\n在使用 action 自动生成 chart 之前，我们可以先熟悉一下如何手动生成，在 `hello-helm` 目录下，执行 `helm package` 将chart目录打包到chart归档中。`helm repo index` 命令可以基于包含打包chart的目录，生成仓库的索引文件 `index.yaml`。\n\n最后，可以使用 `helm upgrade --install *.tgz` 命令将该指定包进行安装使用。\n\n```shell\nhelm package hello-helm\n# Successfully packaged chart and saved it to: /Users/guangzheng.li/workspace/k8s-tutorials/hello-helm/hello-helm-0.1.0.tgz\n\nhelm repo index .\n\nhelm upgrade --install hello-helm hello-helm-0.1.0.tgz\n```\n\n基于上面的步骤，你可能已经想到，所谓的 helm 打包和发布，就是 `hello-helm-0.1.0.tgz` 文件和 `index.yaml` 生成和上传的一个过程。而 helm 下载和安装，就是如何将 `.tgz` 和 `index.yaml` 文件下载和 `helm upgrade --install` 的过程。\n\n接下来我们发布生成的 hellok8s helm chart，先将手动生成的 `hello-helm-0.1.0.tgz` 和 `index.yaml` 文件删除，后续使用 GitHub action 自动生成和发布这两个文件。\n\nGitHub action 的代码可以参考 [官网文档](https://helm.sh/zh/docs/howto/chart_releaser_action/) 或者本仓库 `.github/workflows/release.yml` 文件。代表当 push 代码到远程仓库时，将 `helm-charts` 目录下的所有 charts 自动打包和发布到 `gh-pages` 分支去(需要保证 `gh-pages` 分支已经存在，否则会报错)。\n\n\n```yaml\nname: Release Charts\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions\n    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Install Helm\n        uses: azure/setup-helm@v1\n        with:\n          version: v3.8.1\n\n      - name: Run chart-releaser\n        uses: helm/chart-releaser-action@v1.4.0\n        with: \n          charts_dir: helm-charts\n        env:\n          CR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```\n\n接着配置仓库的 `Settings -> Pages -> Build and deployment -> Branch`，选择 `gh-pages` 分支，GitHub 会自动在 `https://username.github.io/project` 发布 helm chart。\n\n最后，你可以将自己的 helm charts 发布到社区中去，可以考虑发布到 [ArtifactHub](https://artifacthub.io/) 中，像本仓库生成的 helm charts 即发布在 [ArtifactHub hellok8s](https://artifacthub.io/packages/helm/hellok8s/hello-helm) 中。\n\n![tnvYFS](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/tnvYFS.png)\n\n## Dashboard\n\n### kubernetes dashboard\n\n> Dashboard 是基于网页的 Kubernetes 用户界面。 你可以使用 Dashboard 将容器应用部署到 Kubernetes 集群中，也可以对容器应用排错，还能管理集群资源。 你可以使用 Dashboard 获取运行在集群中的应用的概览信息，也可以创建或者修改 Kubernetes 资源 （如 Deployment，Job，DaemonSet 等等）。 例如，你可以对 Deployment 实现弹性伸缩、发起滚动升级、重启 Pod 或者使用向导创建新的应用。\n\n在本地 minikube 环境，可以直接通过下面命令开启 Dashboard。更多用法可以参考官网或者自行探索。\n\n```shell\nminikube dashboard\n```\n\n![eB3MYd](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/eB3MYd.png)\n\n### K9s\n\n[K9s](https://k9scli.io/) 是一个基于 Terminal 的轻量级 UI，可以更加轻松的观察和管理已部署的 k8s 资源。使用方式非常简单，安装后输入 `k9s` 即可开启 Terminal Dashboard，更多用法可以参考官网。\n\n![83ybd4](https://cdn.jsdelivr.net/gh/guangzhengli/PicURL@master/uPic/83ybd4.png)\n\n## Sponsor\n\n如果这份教程对你有帮助，欢迎请作者喝杯咖啡。\nhttps://guangzhengli.com/sponsors\n\nSponsored by [The best china travel guide website](https://chinagotrip.com)\n\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=guangzhengli/k8s-tutorials&type=Date)](https://star-history.com/#guangzhengli/k8s-tutorials&Date)\n"
        },
        {
          "name": "configmaps",
          "type": "tree",
          "content": null
        },
        {
          "name": "container",
          "type": "tree",
          "content": null
        },
        {
          "name": "cronJob",
          "type": "tree",
          "content": null
        },
        {
          "name": "deployment",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "helm-charts",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "ingress",
          "type": "tree",
          "content": null
        },
        {
          "name": "job",
          "type": "tree",
          "content": null
        },
        {
          "name": "namespaces",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 41.71875,
          "content": "{\n  \"name\": \"kubenates_workshop\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"dependencies\": {\n        \"vitepress\": \"1.0.0-rc.4\"\n      }\n    },\n    \"node_modules/@algolia/autocomplete-core\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/autocomplete-core/-/autocomplete-core-1.9.3.tgz\",\n      \"integrity\": \"sha512-009HdfugtGCdC4JdXUbVJClA0q0zh24yyePn+KUGk3rP7j8FEe/m5Yo/z65gn6nP/cM39PxpzqKrL7A6fP6PPw==\",\n      \"dependencies\": {\n        \"@algolia/autocomplete-plugin-algolia-insights\": \"1.9.3\",\n        \"@algolia/autocomplete-shared\": \"1.9.3\"\n      }\n    },\n    \"node_modules/@algolia/autocomplete-plugin-algolia-insights\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/autocomplete-plugin-algolia-insights/-/autocomplete-plugin-algolia-insights-1.9.3.tgz\",\n      \"integrity\": \"sha512-a/yTUkcO/Vyy+JffmAnTWbr4/90cLzw+CC3bRbhnULr/EM0fGNvM13oQQ14f2moLMcVDyAx/leczLlAOovhSZg==\",\n      \"dependencies\": {\n        \"@algolia/autocomplete-shared\": \"1.9.3\"\n      },\n      \"peerDependencies\": {\n        \"search-insights\": \">= 1 < 3\"\n      }\n    },\n    \"node_modules/@algolia/autocomplete-preset-algolia\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/autocomplete-preset-algolia/-/autocomplete-preset-algolia-1.9.3.tgz\",\n      \"integrity\": \"sha512-d4qlt6YmrLMYy95n5TB52wtNDr6EgAIPH81dvvvW8UmuWRgxEtY0NJiPwl/h95JtG2vmRM804M0DSwMCNZlzRA==\",\n      \"dependencies\": {\n        \"@algolia/autocomplete-shared\": \"1.9.3\"\n      },\n      \"peerDependencies\": {\n        \"@algolia/client-search\": \">= 4.9.1 < 6\",\n        \"algoliasearch\": \">= 4.9.1 < 6\"\n      }\n    },\n    \"node_modules/@algolia/autocomplete-shared\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/autocomplete-shared/-/autocomplete-shared-1.9.3.tgz\",\n      \"integrity\": \"sha512-Wnm9E4Ye6Rl6sTTqjoymD+l8DjSTHsHboVRYrKgEt8Q7UHm9nYbqhN/i0fhUYA3OAEH7WA8x3jfpnmJm3rKvaQ==\",\n      \"peerDependencies\": {\n        \"@algolia/client-search\": \">= 4.9.1 < 6\",\n        \"algoliasearch\": \">= 4.9.1 < 6\"\n      }\n    },\n    \"node_modules/@algolia/cache-browser-local-storage\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/cache-browser-local-storage/-/cache-browser-local-storage-4.19.1.tgz\",\n      \"integrity\": \"sha512-FYAZWcGsFTTaSAwj9Std8UML3Bu8dyWDncM7Ls8g+58UOe4XYdlgzXWbrIgjaguP63pCCbMoExKr61B+ztK3tw==\",\n      \"dependencies\": {\n        \"@algolia/cache-common\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@algolia/cache-common\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/cache-common/-/cache-common-4.19.1.tgz\",\n      \"integrity\": \"sha512-XGghi3l0qA38HiqdoUY+wvGyBsGvKZ6U3vTiMBT4hArhP3fOGLXpIINgMiiGjTe4FVlTa5a/7Zf2bwlIHfRqqg==\"\n    },\n    \"node_modules/@algolia/cache-in-memory\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/cache-in-memory/-/cache-in-memory-4.19.1.tgz\",\n      \"integrity\": \"sha512-+PDWL+XALGvIginigzu8oU6eWw+o76Z8zHbBovWYcrtWOEtinbl7a7UTt3x3lthv+wNuFr/YD1Gf+B+A9V8n5w==\",\n      \"dependencies\": {\n        \"@algolia/cache-common\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@algolia/client-account\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/client-account/-/client-account-4.19.1.tgz\",\n      \"integrity\": \"sha512-Oy0ritA2k7AMxQ2JwNpfaEcgXEDgeyKu0V7E7xt/ZJRdXfEpZcwp9TOg4TJHC7Ia62gIeT2Y/ynzsxccPw92GA==\",\n      \"dependencies\": {\n        \"@algolia/client-common\": \"4.19.1\",\n        \"@algolia/client-search\": \"4.19.1\",\n        \"@algolia/transporter\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@algolia/client-analytics\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/client-analytics/-/client-analytics-4.19.1.tgz\",\n      \"integrity\": \"sha512-5QCq2zmgdZLIQhHqwl55ZvKVpLM3DNWjFI4T+bHr3rGu23ew2bLO4YtyxaZeChmDb85jUdPDouDlCumGfk6wOg==\",\n      \"dependencies\": {\n        \"@algolia/client-common\": \"4.19.1\",\n        \"@algolia/client-search\": \"4.19.1\",\n        \"@algolia/requester-common\": \"4.19.1\",\n        \"@algolia/transporter\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@algolia/client-common\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/client-common/-/client-common-4.19.1.tgz\",\n      \"integrity\": \"sha512-3kAIVqTcPrjfS389KQvKzliC559x+BDRxtWamVJt8IVp7LGnjq+aVAXg4Xogkur1MUrScTZ59/AaUd5EdpyXgA==\",\n      \"dependencies\": {\n        \"@algolia/requester-common\": \"4.19.1\",\n        \"@algolia/transporter\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@algolia/client-personalization\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/client-personalization/-/client-personalization-4.19.1.tgz\",\n      \"integrity\": \"sha512-8CWz4/H5FA+krm9HMw2HUQenizC/DxUtsI5oYC0Jxxyce1vsr8cb1aEiSJArQT6IzMynrERif1RVWLac1m36xw==\",\n      \"dependencies\": {\n        \"@algolia/client-common\": \"4.19.1\",\n        \"@algolia/requester-common\": \"4.19.1\",\n        \"@algolia/transporter\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@algolia/client-search\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/client-search/-/client-search-4.19.1.tgz\",\n      \"integrity\": \"sha512-mBecfMFS4N+yK/p0ZbK53vrZbL6OtWMk8YmnOv1i0LXx4pelY8TFhqKoTit3NPVPwoSNN0vdSN9dTu1xr1XOVw==\",\n      \"dependencies\": {\n        \"@algolia/client-common\": \"4.19.1\",\n        \"@algolia/requester-common\": \"4.19.1\",\n        \"@algolia/transporter\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@algolia/logger-common\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/logger-common/-/logger-common-4.19.1.tgz\",\n      \"integrity\": \"sha512-i6pLPZW/+/YXKis8gpmSiNk1lOmYCmRI6+x6d2Qk1OdfvX051nRVdalRbEcVTpSQX6FQAoyeaui0cUfLYW5Elw==\"\n    },\n    \"node_modules/@algolia/logger-console\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/logger-console/-/logger-console-4.19.1.tgz\",\n      \"integrity\": \"sha512-jj72k9GKb9W0c7TyC3cuZtTr0CngLBLmc8trzZlXdfvQiigpUdvTi1KoWIb2ZMcRBG7Tl8hSb81zEY3zI2RlXg==\",\n      \"dependencies\": {\n        \"@algolia/logger-common\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@algolia/requester-browser-xhr\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/requester-browser-xhr/-/requester-browser-xhr-4.19.1.tgz\",\n      \"integrity\": \"sha512-09K/+t7lptsweRTueHnSnmPqIxbHMowejAkn9XIcJMLdseS3zl8ObnS5GWea86mu3vy4+8H+ZBKkUN82Zsq/zg==\",\n      \"dependencies\": {\n        \"@algolia/requester-common\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@algolia/requester-common\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/requester-common/-/requester-common-4.19.1.tgz\",\n      \"integrity\": \"sha512-BisRkcWVxrDzF1YPhAckmi2CFYK+jdMT60q10d7z3PX+w6fPPukxHRnZwooiTUrzFe50UBmLItGizWHP5bDzVQ==\"\n    },\n    \"node_modules/@algolia/requester-node-http\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/requester-node-http/-/requester-node-http-4.19.1.tgz\",\n      \"integrity\": \"sha512-6DK52DHviBHTG2BK/Vv2GIlEw7i+vxm7ypZW0Z7vybGCNDeWzADx+/TmxjkES2h15+FZOqVf/Ja677gePsVItA==\",\n      \"dependencies\": {\n        \"@algolia/requester-common\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@algolia/transporter\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/@algolia/transporter/-/transporter-4.19.1.tgz\",\n      \"integrity\": \"sha512-nkpvPWbpuzxo1flEYqNIbGz7xhfhGOKGAZS7tzC+TELgEmi7z99qRyTfNSUlW7LZmB3ACdnqAo+9A9KFBENviQ==\",\n      \"dependencies\": {\n        \"@algolia/cache-common\": \"4.19.1\",\n        \"@algolia/logger-common\": \"4.19.1\",\n        \"@algolia/requester-common\": \"4.19.1\"\n      }\n    },\n    \"node_modules/@babel/parser\": {\n      \"version\": \"7.22.10\",\n      \"resolved\": \"https://registry.npmjs.org/@babel/parser/-/parser-7.22.10.tgz\",\n      \"integrity\": \"sha512-lNbdGsQb9ekfsnjFGhEiF4hfFqGgfOP3H3d27re3n+CGhNuTSUEQdfWk556sTLNTloczcdM5TYF2LhzmDQKyvQ==\",\n      \"bin\": {\n        \"parser\": \"bin/babel-parser.js\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0.0\"\n      }\n    },\n    \"node_modules/@docsearch/css\": {\n      \"version\": \"3.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/@docsearch/css/-/css-3.5.1.tgz\",\n      \"integrity\": \"sha512-2Pu9HDg/uP/IT10rbQ+4OrTQuxIWdKVUEdcw9/w7kZJv9NeHS6skJx1xuRiFyoGKwAzcHXnLp7csE99sj+O1YA==\"\n    },\n    \"node_modules/@docsearch/js\": {\n      \"version\": \"3.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/@docsearch/js/-/js-3.5.1.tgz\",\n      \"integrity\": \"sha512-EXi8de5njxgP6TV3N9ytnGRLG9zmBNTEZjR4VzwPcpPLbZxxTLG2gaFyJyKiFVQxHW/DPlMrDJA3qoRRGEkgZw==\",\n      \"dependencies\": {\n        \"@docsearch/react\": \"3.5.1\",\n        \"preact\": \"^10.0.0\"\n      }\n    },\n    \"node_modules/@docsearch/react\": {\n      \"version\": \"3.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/@docsearch/react/-/react-3.5.1.tgz\",\n      \"integrity\": \"sha512-t5mEODdLzZq4PTFAm/dvqcvZFdPDMdfPE5rJS5SC8OUq9mPzxEy6b+9THIqNM9P0ocCb4UC5jqBrxKclnuIbzQ==\",\n      \"dependencies\": {\n        \"@algolia/autocomplete-core\": \"1.9.3\",\n        \"@algolia/autocomplete-preset-algolia\": \"1.9.3\",\n        \"@docsearch/css\": \"3.5.1\",\n        \"algoliasearch\": \"^4.0.0\"\n      },\n      \"peerDependencies\": {\n        \"@types/react\": \">= 16.8.0 < 19.0.0\",\n        \"react\": \">= 16.8.0 < 19.0.0\",\n        \"react-dom\": \">= 16.8.0 < 19.0.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"@types/react\": {\n          \"optional\": true\n        },\n        \"react\": {\n          \"optional\": true\n        },\n        \"react-dom\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/@esbuild/android-arm\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.18.20.tgz\",\n      \"integrity\": \"sha512-fyi7TDI/ijKKNZTUJAQqiG5T7YjJXgnzkURqmGj13C6dCqckZBLdl4h7bkhHt/t0WP+zO9/zwroDvANaOqO5Sw==\",\n      \"cpu\": [\n        \"arm\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"android\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/android-arm64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.18.20.tgz\",\n      \"integrity\": \"sha512-Nz4rJcchGDtENV0eMKUNa6L12zz2zBDXuhj/Vjh18zGqB44Bi7MBMSXjgunJgjRhCmKOjnPuZp4Mb6OKqtMHLQ==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"android\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/android-x64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.18.20.tgz\",\n      \"integrity\": \"sha512-8GDdlePJA8D6zlZYJV/jnrRAi6rOiNaCC/JclcXpB+KIuvfBN4owLtgzY2bsxnx666XjJx2kDPUmnTtR8qKQUg==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"android\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/darwin-arm64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.18.20.tgz\",\n      \"integrity\": \"sha512-bxRHW5kHU38zS2lPTPOyuyTm+S+eobPUnTNkdJEfAddYgEcll4xkT8DB9d2008DtTbl7uJag2HuE5NZAZgnNEA==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/darwin-x64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.18.20.tgz\",\n      \"integrity\": \"sha512-pc5gxlMDxzm513qPGbCbDukOdsGtKhfxD1zJKXjCCcU7ju50O7MeAZ8c4krSJcOIJGFR+qx21yMMVYwiQvyTyQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/freebsd-arm64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.18.20.tgz\",\n      \"integrity\": \"sha512-yqDQHy4QHevpMAaxhhIwYPMv1NECwOvIpGCZkECn8w2WFHXjEwrBn3CeNIYsibZ/iZEUemj++M26W3cNR5h+Tw==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"freebsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/freebsd-x64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.18.20.tgz\",\n      \"integrity\": \"sha512-tgWRPPuQsd3RmBZwarGVHZQvtzfEBOreNuxEMKFcd5DaDn2PbBxfwLcj4+aenoh7ctXcbXmOQIn8HI6mCSw5MQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"freebsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-arm\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.18.20.tgz\",\n      \"integrity\": \"sha512-/5bHkMWnq1EgKr1V+Ybz3s1hWXok7mDFUMQ4cG10AfW3wL02PSZi5kFpYKrptDsgb2WAJIvRcDm+qIvXf/apvg==\",\n      \"cpu\": [\n        \"arm\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-arm64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.18.20.tgz\",\n      \"integrity\": \"sha512-2YbscF+UL7SQAVIpnWvYwM+3LskyDmPhe31pE7/aoTMFKKzIc9lLbyGUpmmb8a8AixOL61sQ/mFh3jEjHYFvdA==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-ia32\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.18.20.tgz\",\n      \"integrity\": \"sha512-P4etWwq6IsReT0E1KHU40bOnzMHoH73aXp96Fs8TIT6z9Hu8G6+0SHSw9i2isWrD2nbx2qo5yUqACgdfVGx7TA==\",\n      \"cpu\": [\n        \"ia32\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-loong64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.18.20.tgz\",\n      \"integrity\": \"sha512-nXW8nqBTrOpDLPgPY9uV+/1DjxoQ7DoB2N8eocyq8I9XuqJ7BiAMDMf9n1xZM9TgW0J8zrquIb/A7s3BJv7rjg==\",\n      \"cpu\": [\n        \"loong64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-mips64el\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.18.20.tgz\",\n      \"integrity\": \"sha512-d5NeaXZcHp8PzYy5VnXV3VSd2D328Zb+9dEq5HE6bw6+N86JVPExrA6O68OPwobntbNJ0pzCpUFZTo3w0GyetQ==\",\n      \"cpu\": [\n        \"mips64el\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-ppc64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.18.20.tgz\",\n      \"integrity\": \"sha512-WHPyeScRNcmANnLQkq6AfyXRFr5D6N2sKgkFo2FqguP44Nw2eyDlbTdZwd9GYk98DZG9QItIiTlFLHJHjxP3FA==\",\n      \"cpu\": [\n        \"ppc64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-riscv64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.18.20.tgz\",\n      \"integrity\": \"sha512-WSxo6h5ecI5XH34KC7w5veNnKkju3zBRLEQNY7mv5mtBmrP/MjNBCAlsM2u5hDBlS3NGcTQpoBvRzqBcRtpq1A==\",\n      \"cpu\": [\n        \"riscv64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-s390x\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.18.20.tgz\",\n      \"integrity\": \"sha512-+8231GMs3mAEth6Ja1iK0a1sQ3ohfcpzpRLH8uuc5/KVDFneH6jtAJLFGafpzpMRO6DzJ6AvXKze9LfFMrIHVQ==\",\n      \"cpu\": [\n        \"s390x\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-x64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.18.20.tgz\",\n      \"integrity\": \"sha512-UYqiqemphJcNsFEskc73jQ7B9jgwjWrSayxawS6UVFZGWrAAtkzjxSqnoclCXxWtfwLdzU+vTpcNYhpn43uP1w==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/netbsd-x64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.18.20.tgz\",\n      \"integrity\": \"sha512-iO1c++VP6xUBUmltHZoMtCUdPlnPGdBom6IrO4gyKPFFVBKioIImVooR5I83nTew5UOYrk3gIJhbZh8X44y06A==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"netbsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/openbsd-x64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.18.20.tgz\",\n      \"integrity\": \"sha512-e5e4YSsuQfX4cxcygw/UCPIEP6wbIL+se3sxPdCiMbFLBWu0eiZOJ7WoD+ptCLrmjZBK1Wk7I6D/I3NglUGOxg==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"openbsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/sunos-x64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.18.20.tgz\",\n      \"integrity\": \"sha512-kDbFRFp0YpTQVVrqUd5FTYmWo45zGaXe0X8E1G/LKFC0v8x0vWrhOWSLITcCn63lmZIxfOMXtCfti/RxN/0wnQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"sunos\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/win32-arm64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.18.20.tgz\",\n      \"integrity\": \"sha512-ddYFR6ItYgoaq4v4JmQQaAI5s7npztfV4Ag6NrhiaW0RrnOXqBkgwZLofVTlq1daVTQNhtI5oieTvkRPfZrePg==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/win32-ia32\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.18.20.tgz\",\n      \"integrity\": \"sha512-Wv7QBi3ID/rROT08SABTS7eV4hX26sVduqDOTe1MvGMjNd3EjOz4b7zeexIR62GTIEKrfJXKL9LFxTYgkyeu7g==\",\n      \"cpu\": [\n        \"ia32\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/win32-x64\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.18.20.tgz\",\n      \"integrity\": \"sha512-kTdfRcSiDfQca/y9QIkng02avJ+NCaQvrMejlsB3RRv5sE9rRoeBPISaZpKxHELzRxZyLvNts1P27W3wV+8geQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@jridgewell/sourcemap-codec\": {\n      \"version\": \"1.4.15\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz\",\n      \"integrity\": \"sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==\"\n    },\n    \"node_modules/@types/web-bluetooth\": {\n      \"version\": \"0.0.17\",\n      \"resolved\": \"https://registry.npmjs.org/@types/web-bluetooth/-/web-bluetooth-0.0.17.tgz\",\n      \"integrity\": \"sha512-4p9vcSmxAayx72yn70joFoL44c9MO/0+iVEBIQXe3v2h2SiAsEIo/G5v6ObFWvNKRFjbrVadNf9LqEEZeQPzdA==\"\n    },\n    \"node_modules/@vitejs/plugin-vue\": {\n      \"version\": \"4.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/@vitejs/plugin-vue/-/plugin-vue-4.2.3.tgz\",\n      \"integrity\": \"sha512-R6JDUfiZbJA9cMiguQ7jxALsgiprjBeHL5ikpXfJCH62pPHtI+JdJ5xWj6Ev73yXSlYl86+blXn1kZHQ7uElxw==\",\n      \"engines\": {\n        \"node\": \"^14.18.0 || >=16.0.0\"\n      },\n      \"peerDependencies\": {\n        \"vite\": \"^4.0.0\",\n        \"vue\": \"^3.2.25\"\n      }\n    },\n    \"node_modules/@vue/compiler-core\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/compiler-core/-/compiler-core-3.3.4.tgz\",\n      \"integrity\": \"sha512-cquyDNvZ6jTbf/+x+AgM2Arrp6G4Dzbb0R64jiG804HRMfRiFXWI6kqUVqZ6ZR0bQhIoQjB4+2bhNtVwndW15g==\",\n      \"dependencies\": {\n        \"@babel/parser\": \"^7.21.3\",\n        \"@vue/shared\": \"3.3.4\",\n        \"estree-walker\": \"^2.0.2\",\n        \"source-map-js\": \"^1.0.2\"\n      }\n    },\n    \"node_modules/@vue/compiler-dom\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/compiler-dom/-/compiler-dom-3.3.4.tgz\",\n      \"integrity\": \"sha512-wyM+OjOVpuUukIq6p5+nwHYtj9cFroz9cwkfmP9O1nzH68BenTTv0u7/ndggT8cIQlnBeOo6sUT/gvHcIkLA5w==\",\n      \"dependencies\": {\n        \"@vue/compiler-core\": \"3.3.4\",\n        \"@vue/shared\": \"3.3.4\"\n      }\n    },\n    \"node_modules/@vue/compiler-sfc\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/compiler-sfc/-/compiler-sfc-3.3.4.tgz\",\n      \"integrity\": \"sha512-6y/d8uw+5TkCuzBkgLS0v3lSM3hJDntFEiUORM11pQ/hKvkhSKZrXW6i69UyXlJQisJxuUEJKAWEqWbWsLeNKQ==\",\n      \"dependencies\": {\n        \"@babel/parser\": \"^7.20.15\",\n        \"@vue/compiler-core\": \"3.3.4\",\n        \"@vue/compiler-dom\": \"3.3.4\",\n        \"@vue/compiler-ssr\": \"3.3.4\",\n        \"@vue/reactivity-transform\": \"3.3.4\",\n        \"@vue/shared\": \"3.3.4\",\n        \"estree-walker\": \"^2.0.2\",\n        \"magic-string\": \"^0.30.0\",\n        \"postcss\": \"^8.1.10\",\n        \"source-map-js\": \"^1.0.2\"\n      }\n    },\n    \"node_modules/@vue/compiler-ssr\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/compiler-ssr/-/compiler-ssr-3.3.4.tgz\",\n      \"integrity\": \"sha512-m0v6oKpup2nMSehwA6Uuu+j+wEwcy7QmwMkVNVfrV9P2qE5KshC6RwOCq8fjGS/Eak/uNb8AaWekfiXxbBB6gQ==\",\n      \"dependencies\": {\n        \"@vue/compiler-dom\": \"3.3.4\",\n        \"@vue/shared\": \"3.3.4\"\n      }\n    },\n    \"node_modules/@vue/devtools-api\": {\n      \"version\": \"6.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/devtools-api/-/devtools-api-6.5.0.tgz\",\n      \"integrity\": \"sha512-o9KfBeaBmCKl10usN4crU53fYtC1r7jJwdGKjPT24t348rHxgfpZ0xL3Xm/gLUYnc0oTp8LAmrxOeLyu6tbk2Q==\"\n    },\n    \"node_modules/@vue/reactivity\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/reactivity/-/reactivity-3.3.4.tgz\",\n      \"integrity\": \"sha512-kLTDLwd0B1jG08NBF3R5rqULtv/f8x3rOFByTDz4J53ttIQEDmALqKqXY0J+XQeN0aV2FBxY8nJDf88yvOPAqQ==\",\n      \"dependencies\": {\n        \"@vue/shared\": \"3.3.4\"\n      }\n    },\n    \"node_modules/@vue/reactivity-transform\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/reactivity-transform/-/reactivity-transform-3.3.4.tgz\",\n      \"integrity\": \"sha512-MXgwjako4nu5WFLAjpBnCj/ieqcjE2aJBINUNQzkZQfzIZA4xn+0fV1tIYBJvvva3N3OvKGofRLvQIwEQPpaXw==\",\n      \"dependencies\": {\n        \"@babel/parser\": \"^7.20.15\",\n        \"@vue/compiler-core\": \"3.3.4\",\n        \"@vue/shared\": \"3.3.4\",\n        \"estree-walker\": \"^2.0.2\",\n        \"magic-string\": \"^0.30.0\"\n      }\n    },\n    \"node_modules/@vue/runtime-core\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/runtime-core/-/runtime-core-3.3.4.tgz\",\n      \"integrity\": \"sha512-R+bqxMN6pWO7zGI4OMlmvePOdP2c93GsHFM/siJI7O2nxFRzj55pLwkpCedEY+bTMgp5miZ8CxfIZo3S+gFqvA==\",\n      \"dependencies\": {\n        \"@vue/reactivity\": \"3.3.4\",\n        \"@vue/shared\": \"3.3.4\"\n      }\n    },\n    \"node_modules/@vue/runtime-dom\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/runtime-dom/-/runtime-dom-3.3.4.tgz\",\n      \"integrity\": \"sha512-Aj5bTJ3u5sFsUckRghsNjVTtxZQ1OyMWCr5dZRAPijF/0Vy4xEoRCwLyHXcj4D0UFbJ4lbx3gPTgg06K/GnPnQ==\",\n      \"dependencies\": {\n        \"@vue/runtime-core\": \"3.3.4\",\n        \"@vue/shared\": \"3.3.4\",\n        \"csstype\": \"^3.1.1\"\n      }\n    },\n    \"node_modules/@vue/server-renderer\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/server-renderer/-/server-renderer-3.3.4.tgz\",\n      \"integrity\": \"sha512-Q6jDDzR23ViIb67v+vM1Dqntu+HUexQcsWKhhQa4ARVzxOY2HbC7QRW/ggkDBd5BU+uM1sV6XOAP0b216o34JQ==\",\n      \"dependencies\": {\n        \"@vue/compiler-ssr\": \"3.3.4\",\n        \"@vue/shared\": \"3.3.4\"\n      },\n      \"peerDependencies\": {\n        \"vue\": \"3.3.4\"\n      }\n    },\n    \"node_modules/@vue/shared\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/@vue/shared/-/shared-3.3.4.tgz\",\n      \"integrity\": \"sha512-7OjdcV8vQ74eiz1TZLzZP4JwqM5fA94K6yntPS5Z25r9HDuGNzaGdgvwKYq6S+MxwF0TFRwe50fIR/MYnakdkQ==\"\n    },\n    \"node_modules/@vueuse/core\": {\n      \"version\": \"10.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/@vueuse/core/-/core-10.3.0.tgz\",\n      \"integrity\": \"sha512-BEM5yxcFKb5btFjTSAFjTu5jmwoW66fyV9uJIP4wUXXU8aR5Hl44gndaaXp7dC5HSObmgbnR2RN+Un1p68Mf5Q==\",\n      \"dependencies\": {\n        \"@types/web-bluetooth\": \"^0.0.17\",\n        \"@vueuse/metadata\": \"10.3.0\",\n        \"@vueuse/shared\": \"10.3.0\",\n        \"vue-demi\": \">=0.14.5\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/antfu\"\n      }\n    },\n    \"node_modules/@vueuse/core/node_modules/vue-demi\": {\n      \"version\": \"0.14.5\",\n      \"resolved\": \"https://registry.npmjs.org/vue-demi/-/vue-demi-0.14.5.tgz\",\n      \"integrity\": \"sha512-o9NUVpl/YlsGJ7t+xuqJKx8EBGf1quRhCiT6D/J0pfwmk9zUwYkC7yrF4SZCe6fETvSM3UNL2edcbYrSyc4QHA==\",\n      \"hasInstallScript\": true,\n      \"bin\": {\n        \"vue-demi-fix\": \"bin/vue-demi-fix.js\",\n        \"vue-demi-switch\": \"bin/vue-demi-switch.js\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/antfu\"\n      },\n      \"peerDependencies\": {\n        \"@vue/composition-api\": \"^1.0.0-rc.1\",\n        \"vue\": \"^3.0.0-0 || ^2.6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"@vue/composition-api\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/@vueuse/integrations\": {\n      \"version\": \"10.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/@vueuse/integrations/-/integrations-10.3.0.tgz\",\n      \"integrity\": \"sha512-Jgiv7oFyIgC6BxmDtiyG/fxyGysIds00YaY7sefwbhCZ2/tjEx1W/1WcsISSJPNI30in28+HC2J4uuU8184ekg==\",\n      \"dependencies\": {\n        \"@vueuse/core\": \"10.3.0\",\n        \"@vueuse/shared\": \"10.3.0\",\n        \"vue-demi\": \">=0.14.5\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/antfu\"\n      },\n      \"peerDependencies\": {\n        \"async-validator\": \"*\",\n        \"axios\": \"*\",\n        \"change-case\": \"*\",\n        \"drauu\": \"*\",\n        \"focus-trap\": \"*\",\n        \"fuse.js\": \"*\",\n        \"idb-keyval\": \"*\",\n        \"jwt-decode\": \"*\",\n        \"nprogress\": \"*\",\n        \"qrcode\": \"*\",\n        \"sortablejs\": \"*\",\n        \"universal-cookie\": \"*\"\n      },\n      \"peerDependenciesMeta\": {\n        \"async-validator\": {\n          \"optional\": true\n        },\n        \"axios\": {\n          \"optional\": true\n        },\n        \"change-case\": {\n          \"optional\": true\n        },\n        \"drauu\": {\n          \"optional\": true\n        },\n        \"focus-trap\": {\n          \"optional\": true\n        },\n        \"fuse.js\": {\n          \"optional\": true\n        },\n        \"idb-keyval\": {\n          \"optional\": true\n        },\n        \"jwt-decode\": {\n          \"optional\": true\n        },\n        \"nprogress\": {\n          \"optional\": true\n        },\n        \"qrcode\": {\n          \"optional\": true\n        },\n        \"sortablejs\": {\n          \"optional\": true\n        },\n        \"universal-cookie\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/@vueuse/integrations/node_modules/vue-demi\": {\n      \"version\": \"0.14.5\",\n      \"resolved\": \"https://registry.npmjs.org/vue-demi/-/vue-demi-0.14.5.tgz\",\n      \"integrity\": \"sha512-o9NUVpl/YlsGJ7t+xuqJKx8EBGf1quRhCiT6D/J0pfwmk9zUwYkC7yrF4SZCe6fETvSM3UNL2edcbYrSyc4QHA==\",\n      \"hasInstallScript\": true,\n      \"bin\": {\n        \"vue-demi-fix\": \"bin/vue-demi-fix.js\",\n        \"vue-demi-switch\": \"bin/vue-demi-switch.js\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/antfu\"\n      },\n      \"peerDependencies\": {\n        \"@vue/composition-api\": \"^1.0.0-rc.1\",\n        \"vue\": \"^3.0.0-0 || ^2.6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"@vue/composition-api\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/@vueuse/metadata\": {\n      \"version\": \"10.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/@vueuse/metadata/-/metadata-10.3.0.tgz\",\n      \"integrity\": \"sha512-Ema3YhNOa4swDsV0V7CEY5JXvK19JI/o1szFO1iWxdFg3vhdFtCtSTP26PCvbUpnUtNHBY2wx5y3WDXND5Pvnw==\",\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/antfu\"\n      }\n    },\n    \"node_modules/@vueuse/shared\": {\n      \"version\": \"10.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/@vueuse/shared/-/shared-10.3.0.tgz\",\n      \"integrity\": \"sha512-kGqCTEuFPMK4+fNWy6dUOiYmxGcUbtznMwBZLC1PubidF4VZY05B+Oht7Jh7/6x4VOWGpvu3R37WHi81cKpiqg==\",\n      \"dependencies\": {\n        \"vue-demi\": \">=0.14.5\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/antfu\"\n      }\n    },\n    \"node_modules/@vueuse/shared/node_modules/vue-demi\": {\n      \"version\": \"0.14.5\",\n      \"resolved\": \"https://registry.npmjs.org/vue-demi/-/vue-demi-0.14.5.tgz\",\n      \"integrity\": \"sha512-o9NUVpl/YlsGJ7t+xuqJKx8EBGf1quRhCiT6D/J0pfwmk9zUwYkC7yrF4SZCe6fETvSM3UNL2edcbYrSyc4QHA==\",\n      \"hasInstallScript\": true,\n      \"bin\": {\n        \"vue-demi-fix\": \"bin/vue-demi-fix.js\",\n        \"vue-demi-switch\": \"bin/vue-demi-switch.js\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/antfu\"\n      },\n      \"peerDependencies\": {\n        \"@vue/composition-api\": \"^1.0.0-rc.1\",\n        \"vue\": \"^3.0.0-0 || ^2.6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"@vue/composition-api\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/algoliasearch\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/algoliasearch/-/algoliasearch-4.19.1.tgz\",\n      \"integrity\": \"sha512-IJF5b93b2MgAzcE/tuzW0yOPnuUyRgGAtaPv5UUywXM8kzqfdwZTO4sPJBzoGz1eOy6H9uEchsJsBFTELZSu+g==\",\n      \"dependencies\": {\n        \"@algolia/cache-browser-local-storage\": \"4.19.1\",\n        \"@algolia/cache-common\": \"4.19.1\",\n        \"@algolia/cache-in-memory\": \"4.19.1\",\n        \"@algolia/client-account\": \"4.19.1\",\n        \"@algolia/client-analytics\": \"4.19.1\",\n        \"@algolia/client-common\": \"4.19.1\",\n        \"@algolia/client-personalization\": \"4.19.1\",\n        \"@algolia/client-search\": \"4.19.1\",\n        \"@algolia/logger-common\": \"4.19.1\",\n        \"@algolia/logger-console\": \"4.19.1\",\n        \"@algolia/requester-browser-xhr\": \"4.19.1\",\n        \"@algolia/requester-common\": \"4.19.1\",\n        \"@algolia/requester-node-http\": \"4.19.1\",\n        \"@algolia/transporter\": \"4.19.1\"\n      }\n    },\n    \"node_modules/ansi-sequence-parser\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-sequence-parser/-/ansi-sequence-parser-1.1.1.tgz\",\n      \"integrity\": \"sha512-vJXt3yiaUL4UU546s3rPXlsry/RnM730G1+HkpKE012AN0sx1eOrxSu95oKDIonskeLTijMgqWZ3uDEe3NFvyg==\"\n    },\n    \"node_modules/body-scroll-lock\": {\n      \"version\": \"4.0.0-beta.0\",\n      \"resolved\": \"https://registry.npmjs.org/body-scroll-lock/-/body-scroll-lock-4.0.0-beta.0.tgz\",\n      \"integrity\": \"sha512-a7tP5+0Mw3YlUJcGAKUqIBkYYGlYxk2fnCasq/FUph1hadxlTRjF+gAcZksxANnaMnALjxEddmSi/H3OR8ugcQ==\"\n    },\n    \"node_modules/csstype\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/csstype/-/csstype-3.1.2.tgz\",\n      \"integrity\": \"sha512-I7K1Uu0MBPzaFKg4nI5Q7Vs2t+3gWWW648spaF+Rg7pI9ds18Ugn+lvg4SHczUdKlHI5LWBXyqfS8+DufyBsgQ==\"\n    },\n    \"node_modules/esbuild\": {\n      \"version\": \"0.18.20\",\n      \"resolved\": \"https://registry.npmjs.org/esbuild/-/esbuild-0.18.20.tgz\",\n      \"integrity\": \"sha512-ceqxoedUrcayh7Y7ZX6NdbbDzGROiyVBgC4PriJThBKSVPWnnFHZAkfI1lJT8QFkOwH4qOS2SJkS4wvpGl8BpA==\",\n      \"hasInstallScript\": true,\n      \"bin\": {\n        \"esbuild\": \"bin/esbuild\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"optionalDependencies\": {\n        \"@esbuild/android-arm\": \"0.18.20\",\n        \"@esbuild/android-arm64\": \"0.18.20\",\n        \"@esbuild/android-x64\": \"0.18.20\",\n        \"@esbuild/darwin-arm64\": \"0.18.20\",\n        \"@esbuild/darwin-x64\": \"0.18.20\",\n        \"@esbuild/freebsd-arm64\": \"0.18.20\",\n        \"@esbuild/freebsd-x64\": \"0.18.20\",\n        \"@esbuild/linux-arm\": \"0.18.20\",\n        \"@esbuild/linux-arm64\": \"0.18.20\",\n        \"@esbuild/linux-ia32\": \"0.18.20\",\n        \"@esbuild/linux-loong64\": \"0.18.20\",\n        \"@esbuild/linux-mips64el\": \"0.18.20\",\n        \"@esbuild/linux-ppc64\": \"0.18.20\",\n        \"@esbuild/linux-riscv64\": \"0.18.20\",\n        \"@esbuild/linux-s390x\": \"0.18.20\",\n        \"@esbuild/linux-x64\": \"0.18.20\",\n        \"@esbuild/netbsd-x64\": \"0.18.20\",\n        \"@esbuild/openbsd-x64\": \"0.18.20\",\n        \"@esbuild/sunos-x64\": \"0.18.20\",\n        \"@esbuild/win32-arm64\": \"0.18.20\",\n        \"@esbuild/win32-ia32\": \"0.18.20\",\n        \"@esbuild/win32-x64\": \"0.18.20\"\n      }\n    },\n    \"node_modules/estree-walker\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz\",\n      \"integrity\": \"sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==\"\n    },\n    \"node_modules/focus-trap\": {\n      \"version\": \"7.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/focus-trap/-/focus-trap-7.5.2.tgz\",\n      \"integrity\": \"sha512-p6vGNNWLDGwJCiEjkSK6oERj/hEyI9ITsSwIUICBoKLlWiTWXJRfQibCwcoi50rTZdbi87qDtUlMCmQwsGSgPw==\",\n      \"dependencies\": {\n        \"tabbable\": \"^6.2.0\"\n      }\n    },\n    \"node_modules/fsevents\": {\n      \"version\": \"2.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz\",\n      \"integrity\": \"sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==\",\n      \"hasInstallScript\": true,\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \"^8.16.0 || ^10.6.0 || >=11.0.0\"\n      }\n    },\n    \"node_modules/jsonc-parser\": {\n      \"version\": \"3.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.0.tgz\",\n      \"integrity\": \"sha512-gfFQZrcTc8CnKXp6Y4/CBT3fTc0OVuDofpre4aEeEpSBPV5X5v4+Vmx+8snU7RLPrNHPKSgLxGo9YuQzz20o+w==\"\n    },\n    \"node_modules/magic-string\": {\n      \"version\": \"0.30.2\",\n      \"resolved\": \"https://registry.npmjs.org/magic-string/-/magic-string-0.30.2.tgz\",\n      \"integrity\": \"sha512-lNZdu7pewtq/ZvWUp9Wpf/x7WzMTsR26TWV03BRZrXFsv+BI6dy8RAiKgm1uM/kyR0rCfUcqvOlXKG66KhIGug==\",\n      \"dependencies\": {\n        \"@jridgewell/sourcemap-codec\": \"^1.4.15\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/mark.js\": {\n      \"version\": \"8.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/mark.js/-/mark.js-8.11.1.tgz\",\n      \"integrity\": \"sha512-1I+1qpDt4idfgLQG+BNWmrqku+7/2bi5nLf4YwF8y8zXvmfiTBY3PV3ZibfrjBueCByROpuBjLLFCajqkgYoLQ==\"\n    },\n    \"node_modules/minisearch\": {\n      \"version\": \"6.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/minisearch/-/minisearch-6.1.0.tgz\",\n      \"integrity\": \"sha512-PNxA/X8pWk+TiqPbsoIYH0GQ5Di7m6326/lwU/S4mlo4wGQddIcf/V//1f9TB0V4j59b57b+HZxt8h3iMROGvg==\"\n    },\n    \"node_modules/nanoid\": {\n      \"version\": \"3.3.6\",\n      \"resolved\": \"https://registry.npmjs.org/nanoid/-/nanoid-3.3.6.tgz\",\n      \"integrity\": \"sha512-BGcqMMJuToF7i1rt+2PWSNVnWIkGCU78jBG3RxO/bZlnZPK2Cmi2QaffxGO/2RvWi9sL+FAiRiXMgsyxQ1DIDA==\",\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/ai\"\n        }\n      ],\n      \"bin\": {\n        \"nanoid\": \"bin/nanoid.cjs\"\n      },\n      \"engines\": {\n        \"node\": \"^10 || ^12 || ^13.7 || ^14 || >=15.0.1\"\n      }\n    },\n    \"node_modules/picocolors\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz\",\n      \"integrity\": \"sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==\"\n    },\n    \"node_modules/postcss\": {\n      \"version\": \"8.4.27\",\n      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.27.tgz\",\n      \"integrity\": \"sha512-gY/ACJtJPSmUFPDCHtX78+01fHa64FaU4zaaWfuh1MhGJISufJAH4cun6k/8fwsHYeK4UQmENQK+tRLCFJE8JQ==\",\n      \"funding\": [\n        {\n          \"type\": \"opencollective\",\n          \"url\": \"https://opencollective.com/postcss/\"\n        },\n        {\n          \"type\": \"tidelift\",\n          \"url\": \"https://tidelift.com/funding/github/npm/postcss\"\n        },\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/ai\"\n        }\n      ],\n      \"dependencies\": {\n        \"nanoid\": \"^3.3.6\",\n        \"picocolors\": \"^1.0.0\",\n        \"source-map-js\": \"^1.0.2\"\n      },\n      \"engines\": {\n        \"node\": \"^10 || ^12 || >=14\"\n      }\n    },\n    \"node_modules/preact\": {\n      \"version\": \"10.17.0\",\n      \"resolved\": \"https://registry.npmjs.org/preact/-/preact-10.17.0.tgz\",\n      \"integrity\": \"sha512-SNsI8cbaCcUS5tbv9nlXuCfIXnJ9ysBMWk0WnB6UWwcVA3qZ2O6FxqDFECMAMttvLQcW/HaNZUe2BLidyvrVYw==\",\n      \"funding\": {\n        \"type\": \"opencollective\",\n        \"url\": \"https://opencollective.com/preact\"\n      }\n    },\n    \"node_modules/rollup\": {\n      \"version\": \"3.28.0\",\n      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.28.0.tgz\",\n      \"integrity\": \"sha512-d7zhvo1OUY2SXSM6pfNjgD5+d0Nz87CUp4mt8l/GgVP3oBsPwzNvSzyu1me6BSG9JIgWNTVcafIXBIyM8yQ3yw==\",\n      \"bin\": {\n        \"rollup\": \"dist/bin/rollup\"\n      },\n      \"engines\": {\n        \"node\": \">=14.18.0\",\n        \"npm\": \">=8.0.0\"\n      },\n      \"optionalDependencies\": {\n        \"fsevents\": \"~2.3.2\"\n      }\n    },\n    \"node_modules/search-insights\": {\n      \"version\": \"2.7.0\",\n      \"resolved\": \"https://registry.npmjs.org/search-insights/-/search-insights-2.7.0.tgz\",\n      \"integrity\": \"sha512-GLbVaGgzYEKMvuJbHRhLi1qoBFnjXZGZ6l4LxOYPCp4lI2jDRB3jPU9/XNhMwv6kvnA9slTreq6pvK+b3o3aqg==\",\n      \"peer\": true,\n      \"engines\": {\n        \"node\": \">=8.16.0\"\n      }\n    },\n    \"node_modules/shiki\": {\n      \"version\": \"0.14.3\",\n      \"resolved\": \"https://registry.npmjs.org/shiki/-/shiki-0.14.3.tgz\",\n      \"integrity\": \"sha512-U3S/a+b0KS+UkTyMjoNojvTgrBHjgp7L6ovhFVZsXmBGnVdQ4K4U9oK0z63w538S91ATngv1vXigHCSWOwnr+g==\",\n      \"dependencies\": {\n        \"ansi-sequence-parser\": \"^1.1.0\",\n        \"jsonc-parser\": \"^3.2.0\",\n        \"vscode-oniguruma\": \"^1.7.0\",\n        \"vscode-textmate\": \"^8.0.0\"\n      }\n    },\n    \"node_modules/source-map-js\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/source-map-js/-/source-map-js-1.0.2.tgz\",\n      \"integrity\": \"sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==\",\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/tabbable\": {\n      \"version\": \"6.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/tabbable/-/tabbable-6.2.0.tgz\",\n      \"integrity\": \"sha512-Cat63mxsVJlzYvN51JmVXIgNoUokrIaT2zLclCXjRd8boZ0004U4KCs/sToJ75C6sdlByWxpYnb5Boif1VSFew==\"\n    },\n    \"node_modules/vite\": {\n      \"version\": \"4.4.9\",\n      \"resolved\": \"https://registry.npmjs.org/vite/-/vite-4.4.9.tgz\",\n      \"integrity\": \"sha512-2mbUn2LlUmNASWwSCNSJ/EG2HuSRTnVNaydp6vMCm5VIqJsjMfbIWtbH2kDuwUVW5mMUKKZvGPX/rqeqVvv1XA==\",\n      \"dependencies\": {\n        \"esbuild\": \"^0.18.10\",\n        \"postcss\": \"^8.4.27\",\n        \"rollup\": \"^3.27.1\"\n      },\n      \"bin\": {\n        \"vite\": \"bin/vite.js\"\n      },\n      \"engines\": {\n        \"node\": \"^14.18.0 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/vitejs/vite?sponsor=1\"\n      },\n      \"optionalDependencies\": {\n        \"fsevents\": \"~2.3.2\"\n      },\n      \"peerDependencies\": {\n        \"@types/node\": \">= 14\",\n        \"less\": \"*\",\n        \"lightningcss\": \"^1.21.0\",\n        \"sass\": \"*\",\n        \"stylus\": \"*\",\n        \"sugarss\": \"*\",\n        \"terser\": \"^5.4.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"@types/node\": {\n          \"optional\": true\n        },\n        \"less\": {\n          \"optional\": true\n        },\n        \"lightningcss\": {\n          \"optional\": true\n        },\n        \"sass\": {\n          \"optional\": true\n        },\n        \"stylus\": {\n          \"optional\": true\n        },\n        \"sugarss\": {\n          \"optional\": true\n        },\n        \"terser\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/vitepress\": {\n      \"version\": \"1.0.0-rc.4\",\n      \"resolved\": \"https://registry.npmjs.org/vitepress/-/vitepress-1.0.0-rc.4.tgz\",\n      \"integrity\": \"sha512-JCQ89Bm6ECUTnyzyas3JENo00UDJeK8q1SUQyJYou+4Yz5BKEc/F3O21cu++DnUT2zXc0kvQ2Aj4BZCc/nioXQ==\",\n      \"dependencies\": {\n        \"@docsearch/css\": \"^3.5.1\",\n        \"@docsearch/js\": \"^3.5.1\",\n        \"@vitejs/plugin-vue\": \"^4.2.3\",\n        \"@vue/devtools-api\": \"^6.5.0\",\n        \"@vueuse/core\": \"^10.3.0\",\n        \"@vueuse/integrations\": \"^10.3.0\",\n        \"body-scroll-lock\": \"4.0.0-beta.0\",\n        \"focus-trap\": \"^7.5.2\",\n        \"mark.js\": \"8.11.1\",\n        \"minisearch\": \"^6.1.0\",\n        \"shiki\": \"^0.14.3\",\n        \"vite\": \"^4.4.9\",\n        \"vue\": \"^3.3.4\"\n      },\n      \"bin\": {\n        \"vitepress\": \"bin/vitepress.js\"\n      }\n    },\n    \"node_modules/vscode-oniguruma\": {\n      \"version\": \"1.7.0\",\n      \"resolved\": \"https://registry.npmjs.org/vscode-oniguruma/-/vscode-oniguruma-1.7.0.tgz\",\n      \"integrity\": \"sha512-L9WMGRfrjOhgHSdOYgCt/yRMsXzLDJSL7BPrOZt73gU0iWO4mpqzqQzOz5srxqTvMBaR0XZTSrVWo4j55Rc6cA==\"\n    },\n    \"node_modules/vscode-textmate\": {\n      \"version\": \"8.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/vscode-textmate/-/vscode-textmate-8.0.0.tgz\",\n      \"integrity\": \"sha512-AFbieoL7a5LMqcnOF04ji+rpXadgOXnZsxQr//r83kLPr7biP7am3g9zbaZIaBGwBRWeSvoMD4mgPdX3e4NWBg==\"\n    },\n    \"node_modules/vue\": {\n      \"version\": \"3.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/vue/-/vue-3.3.4.tgz\",\n      \"integrity\": \"sha512-VTyEYn3yvIeY1Py0WaYGZsXnz3y5UnGi62GjVEqvEGPl6nxbOrCXbVOTQWBEJUqAyTUk2uJ5JLVnYJ6ZzGbrSw==\",\n      \"dependencies\": {\n        \"@vue/compiler-dom\": \"3.3.4\",\n        \"@vue/compiler-sfc\": \"3.3.4\",\n        \"@vue/runtime-dom\": \"3.3.4\",\n        \"@vue/server-renderer\": \"3.3.4\",\n        \"@vue/shared\": \"3.3.4\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.1826171875,
          "content": "{\n  \"scripts\": {\n    \"docs:dev\": \"vitepress dev\",\n    \"docs:build\": \"vitepress build\",\n    \"docs:preview\": \"vitepress preview\"\n  },\n  \"dependencies\": {\n    \"vitepress\": \"1.0.0-rc.4\"\n  }\n}"
        },
        {
          "name": "pod",
          "type": "tree",
          "content": null
        },
        {
          "name": "secret",
          "type": "tree",
          "content": null
        },
        {
          "name": "service",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}