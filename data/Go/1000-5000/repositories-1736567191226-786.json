{
  "metadata": {
    "timestamp": 1736567191226,
    "page": 786,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "segmentio/chamber",
      "stars": 2483,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": ".git\n.github\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.076171875,
          "content": "/go.sum linguist-generated=true\n/store/awsapi_mock.go linguist-generated=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.041015625,
          "content": "*~\n*.sw[a-z]\ndist/\n/chamber\n/coverage.out\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.048828125,
          "content": "See https://github.com/segmentio/chamber/releases\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1923828125,
          "content": "We don't have an official Code of Conduct in place yet. In the meantime, don't be a jerk, and don't discriminate human beings based on irrelevant characteristics. Overuse the :heart: ❤️ emoji.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.6513671875,
          "content": "Thanks for thinking about contributing to Chamber!\n\nChamber is an open-source project run with ❤️ by Twilio Segment. We've made it open source in the hope that other folks will find it useful. That said, making open source software takes a lot of work, so we try to keep Chamber focused on its goals. That means first and foremost supporting the use cases we have at Segment, but any other reasonable additions will be accepted with gratitude.\n\nThe purpose of these guidelines is all about setting expectations.\n\n# Feature requests (`enhancement` label)\n\nNew features should be requested via Issue first, to decide whether it falls within Chamber's scope. _Don't_ start with a feature PR without discussion.\n\nEven if it is decided that a feature fits Chamber's goals, that doesn't imply that someone is working on it. The only people who are obliged to work on a feature are the people who intend to use it. An `enhancement` issue without an assignee or a milestone means that nobody intends to work on it. If you're interested in working on it, just say so and we can assign it to you.\n\nAn `enhancement` issue with a milestone means we intend to write it, but haven't decided who will do it yet.\n\n`enhancement` issues are subject to our [Staleness Policy](#Staleness). An `enhancement` that's gone stale means that no one's intending to work on it, which implies the feature isn't really that important. If this isn't the case, commenting during the staleness grace period will freshen it; this should almost always be a commitment to implementing it.\n\n# Timeliness\n\nAs a user, there's nothing worse than crafting a beautiful PR with extensive tests only to be met with tumbleweeds from a long-abandoned project. We want to assure you that Chamber is maintained and actively worked on, but give you some guidelines on how long you might expect to wait before things get done.\n\nIssues should be triaged within 1 week, where triaging generally means figuring out which type of issue it is and adding labels.\n\nPull requests (that have had design approval in an issue) should expect responses within 3 days.\n\nIf you're finding we aren't abiding by these timelines, feel free to @-mention someone in [CODEOWNERS](.github/CODEOWNERS) to get our attention. If you're the shy type, don't worry that you're bothering us; you're helping us stick to the commitments we've made :)\n\n# Staleness\n\nAll issues and PRs are subject to staleness after some period of inactivity. An issue/PR going stale indicates there isn't enough interest in getting it resolved. After some grace period, a stale issue/PR will be closed.\n\nAn issue/PR being closed doesn't mean that it will never be addressed, just that there currently isn't any intention to do so.\n\nDuring the grace period, any activity will reset the staleness counter. Generally speaking, this should be a commitment to making progress.\n\nThe current staleness policy is defined in [.github/stale.yml](.github/stale.yml).\n\nStale issues get the `stale` label.\n\n# Labels\n\n- `bug`: behaviour in Chamber that is obviously wrong (but not necessarily obviously solvable).\n- `enhancement`: a new feature. Without an assignee, it's looking for someone to take the reins and get it made.\n- `help wanted`: no pressing desire to get this addressed. An easy contribution for someone looking to get started contributing.\n- `repro hard` (issue): difficult to repro without specific setup. often of third party software. We'll make an effort to help narrow in on the problem, but probably can't guarantee we'll be able to make a definitive judgment on whether it's a real bug.\n- `question`: we'll make an effort to answer your question, but won't guarantee we can solve it.\n\n# Commit messages\n\nWe use [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) to help generate changelogs and do semver releases. We usually do Squash and Merge to PRs, so PR authors are recommended to use the Conventional Commits format in their PR title.\n\n# Licensing\n\nWe do not require contributors outside of Segment to execute a contributor license agreement. Instead, we accept contributions under Chamber's [license](LICENSE). In legal terms: _All third party contributors acknowledge that any contributions they provide will be made under the same open source license that Chamber is provided under._\n\n# Anti-contribution\n\n- Obviously, anything that violates our [Code of Conduct](CODE_OF_CONDUCT.md)\n- Noisy comments: \"me too!\", or \"here's my setup\" when the bug's already been located. Use a :thumbsup: emoji on the issue/PR instead, since we can count these.\n- Non-constructive complaining.\n- Feature PRs without a discussion issue: it's important we agree the feature is in-scope before anyone wastes time writing code or reviewing\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4169921875,
          "content": "FROM golang:1.23.4-alpine AS build\n\nWORKDIR /go/src/github.com/segmentio/chamber\nCOPY . .\n\nARG TARGETARCH\nARG VERSION\nRUN test -n \"${VERSION}\"\n\nRUN apk add -U make ca-certificates\nRUN make linux VERSION=${VERSION} TARGETARCH=${TARGETARCH}\n\nFROM scratch AS run\n\nCOPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=build /go/src/github.com/segmentio/chamber/chamber /chamber\n\nENTRYPOINT [\"/chamber\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "The MIT License (MIT)\n\nCopyright © 2017 Segment\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.53515625,
          "content": "# Goals:\n# - user can build binaries on their system without having to install special tools\n# - user can fork the canonical repo and expect to be able to run Github Actions checks\n#\n# This makefile is meant for humans\n\nifndef VERSION\n\tVERSION := $(shell git describe --tags --always --dirty=\"-dev\")\nendif\n\nifndef TARGETARCH\n\tTARGETARCH := $(shell arch)\nendif\n\nVERSION_NO_V := $(shell echo \"$(VERSION)\" | sed 's/^v//')\nVERSION_MAJOR_MINOR_PATCH := $(shell echo \"$(VERSION)\" | sed 's/^v\\([0-9]*.[0-9]*.[0-9]*\\).*/\\1/')\nVERSION_MAJOR_MINOR := $(shell echo \"$(VERSION)\" | sed 's/^v\\([0-9]*.[0-9]*\\).*/\\1/')\nVERSION_MAJOR := $(shell echo \"$(VERSION)\" | sed 's/^v\\([0-9]*\\).*/\\1/')\nANALYTICS_WRITE_KEY ?=\nLDFLAGS := -ldflags='-X \"main.Version=$(VERSION)\" -X \"main.AnalyticsWriteKey=$(ANALYTICS_WRITE_KEY)\"'\nMOQ := $(shell command -v moq 2> /dev/null)\nSRC := $(shell find . -name '*.go')\nGOLANGCI_LINT := $(shell command -v golangci-lint 2> /dev/null)\n\n# don't rely on target ordering to define a default make goal\n.DEFAULT_GOAL := test\n\ntest: store/awsapi_mock.go\n\tgo test -v ./...\n\ncoverage:\n\tgo test -coverpkg ./... -coverprofile coverage.out ./...\n\nvet:\n\tgo vet ./...\n\nlint: vet\nifdef GOLANGCI_LINT\n\t@golangci-lint run --max-same-issues 0 --max-issues-per-linter 0\nelse\n\t@echo \"Please install golangci-lint: brew install golangci-lint\"\n\t@false\nendif\n\nstore/awsapi_mock.go: store/awsapi.go\nifdef MOQ\n\trm -f $@\n\tgo generate ./...\nelse\n\t@echo \"Unable to generate mocks\"\n\t@echo \"Please install moq: go install github.com/matryer/moq@latest\"\nendif\n\nall: dist/chamber-$(VERSION)-darwin-amd64 dist/chamber-$(VERSION)-linux-amd64 dist/chamber-$(VERSION)-windows-amd64.exe\n\nclean:\n\trm -rf ./dist\n\ndist/:\n\tmkdir -p dist\n\nfmt:\n\tgo fmt ./...\n\nbuild: chamber\n\nchamber: fmt $(SRC)\n\tCGO_ENABLED=0 go build -trimpath $(LDFLAGS) -o $@\n\ndist/chamber-$(VERSION)-darwin-amd64: | dist/\n\tGOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -trimpath $(LDFLAGS) -o $@\n\ndist/chamber-$(VERSION)-darwin-arm64: | dist/\n\tGOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -trimpath $(LDFLAGS) -o $@\n\nlinux: dist/chamber-$(VERSION)-linux-$(TARGETARCH)\n\tcp $^ chamber\n\ndist/chamber-$(VERSION)-linux-amd64: | dist/\n\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -trimpath $(LDFLAGS) -o $@\n\ndist/chamber-$(VERSION)-linux-arm64 dist/chamber-$(VERSION)-linux-aarch64: | dist/\n\tGOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -trimpath $(LDFLAGS) -o $@\n\ndist/chamber-$(VERSION)-windows-amd64.exe: | dist/\n\tGOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -trimpath $(LDFLAGS) -o $@\n\n.PHONY: vet test coverage lint clean all fmt build linux\n"
        },
        {
          "name": "Makefile.release",
          "type": "blob",
          "size": 1.7333984375,
          "content": "# Goals:\n# - Linux releases can be published to Github automatically by Github Actions\n#\n# This Makefile is meant for machines\n\ninclude Makefile\n\n# set --pre-release if not tagged or tree is dirty or there's a `-` in the tag\nifneq (,$(findstring -,$(VERSION)))\n\tDOCKERHUB_TAG_PREFIX := \"prerelease-\"\nendif\n\npublish-dockerhub:\n\tdocker buildx build \\\n\t\t-t segment/chamber:$(DOCKERHUB_TAG_PREFIX)$(VERSION_MAJOR_MINOR_PATCH) \\\n\t\t-t segment/chamber:$(DOCKERHUB_TAG_PREFIX)$(VERSION_MAJOR_MINOR) \\\n\t\t-t segment/chamber:$(DOCKERHUB_TAG_PREFIX)$(VERSION_MAJOR) \\\n\t\t-t segment/chamber:$(DOCKERHUB_TAG_PREFIX)$(VERSION_NO_V) \\\n\t\t--build-arg VERSION=$(VERSION) \\\n    --platform linux/amd64,linux/arm64 \\\n\t\t--push \\\n\t\t.\n\ndist: dist/chamber-$(VERSION)-darwin-amd64 dist/chamber-$(VERSION)-darwin-arm64 dist/chamber-$(VERSION)-linux-amd64 dist/chamber-$(VERSION)-linux-arm64 dist/chamber-$(VERSION)-windows-amd64.exe dist/chamber_$(VERSION)_amd64.deb dist/chamber_$(VERSION)_amd64.rpm dist/chamber-$(VERSION).sha256sums\n\ndist/chamber-$(VERSION).sha256sums: dist/chamber-$(VERSION)-darwin-amd64 dist/chamber-$(VERSION)-darwin-arm64 dist/chamber-$(VERSION)-linux-amd64 dist/chamber-$(VERSION)-linux-arm64 dist/chamber-$(VERSION)-windows-amd64.exe dist/chamber_$(VERSION)_amd64.deb dist/chamber_$(VERSION)_amd64.rpm\n\tsha256sum $^ | sed 's|dist/||g' > $@\n\ndist/nfpm-$(VERSION).yaml: | dist/\n\tsed -e \"s/\\$${VERSION}/$(VERSION)/g\" -e \"s|\\$${DIST_BIN}|dist/chamber-$(VERSION)-linux-amd64|g\" < nfpm.yaml.tmpl > $@\n\ndist/chamber_$(VERSION)_amd64.deb: dist/nfpm-$(VERSION).yaml dist/chamber-$(VERSION)-linux-amd64\n\tnfpm -f $< pkg --target $@\n\ndist/chamber_$(VERSION)_amd64.rpm: dist/nfpm-$(VERSION).yaml dist/chamber-$(VERSION)-linux-amd64\n\tnfpm -f $< pkg --target $@\n\n.PHONY: \\\n\tpublish-dockerhub\n"
        },
        {
          "name": "Makefile.tools",
          "type": "blob",
          "size": 0.8203125,
          "content": "# Tools installation recipes\n#\n# These are fragile, non-portable, and often require root\n#\nNFPM_VERSION := 0.9.3\n#from https://github.com/goreleaser/nfpm/releases/download/v0.9.3/nfpm_0.9.3_checksums.txt\nNFPM_SHA256 := f875ac060a30ec5c164e5444a7278322b276707493fa0ced6bfdd56640f0a6ea\n\nnfpm-debian:\n\tcd /tmp && \\\n\t\tcurl -Ls https://github.com/goreleaser/nfpm/releases/download/v${NFPM_VERSION}/nfpm_${NFPM_VERSION}_Linux_x86_64.tar.gz > nfpm.tar.gz && \\\n\t\techo \"${NFPM_SHA256}  nfpm.tar.gz\" | \\\n\t\tsha256sum -c && \\\n\t\ttar xzvf nfpm.tar.gz && \\\n\t\tmv nfpm /usr/local/bin\n\nrpmbuild-debian:\n\tapt update -q && apt install rpm -yq\n\nrpmbuild-darwin:\n\tbrew install rpm\n\nsha256sum-darwin:\n\tbrew install coreutils && ln -s $$(which gsha256sum) /usr/local/bin/sha256sum`\n\n.PHONY: nfpm-debian \\\n\trpmbuild-debian \\\n\trpmbuild-darwin \\\n\tsha256sum-darwin \\\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.0439453125,
          "content": "# Chamber\n\nChamber is a tool for managing secrets. Currently it does so by storing\nsecrets in SSM Parameter Store, an AWS service for storing secrets.\n\nFor detailed info about using chamber, please read\n[The Right Way To Manage Secrets](https://aws.amazon.com/blogs/mt/the-right-way-to-store-secrets-using-parameter-store/)\n\n## v3.0 Breaking Changes\n\n* **Use of the SSM Parameter Store's path-based API is now required.** Support\n  added in v2.0 to avoid it has been removed. The `CHAMBER_NO_PATHS` environment\n  variable no longer has any effect. You must migrate to the new storage format\n  using the instructions below, using a 2.x version of chamber.\n* **The `--min-throttle-delay` option no longer has any effect.** Support for\n  specifying a minimum throttle delay has been removed from the underlying AWS\n  SDK with no direct replacement. Instead, set the new `--retry-mode` option to\n  \"adaptive\" to use an experimental model that accounts for throttling errors.\n* **Context arguments are required for `Store` methods.** This is a consequence\n  of migrating to a new AWS SDK. This change has no effect for CLI users, but\n  those using chamber as a library must update their code to pass contexts.\n* **The deprecated `NewS3Store` constructor has been removed.** Use\n  `NewS3StoreWithBucket` instead.\n\n## v2.0 Breaking Changes\n\nStarting with version 2.0, chamber uses parameter store's path based API by default.\nChamber pre-2.0 supported this API using the `CHAMBER_USE_PATHS` environment variable.\nThe paths based API has performance benefits and is the recommended best practice\nby AWS.\n\nAs a side effect of this change, if you didn't use path based secrets before 2.0,\nyou will need to set `CHAMBER_NO_PATHS` to enable the old behavior. This option\nis deprecated, and We recommend only using this setting for supporting existing\napplications.\n\nTo migrate to the new format, you can take advantage of the `export` and `import`\ncommands. For example, if you wanted to convert secrets for service `foo` to the\nnew format using chamber 2.0, you can do:\n\n```bash\nCHAMBER_NO_PATHS=1 chamber export foo | chamber import foo -\n```\n\n### v2.13.0 Breaking Changes\n\nSupport for very old versions of Go has been dropped, and chamber will only test\nagainst versions of Go covered by the Go Release Policy, e.g. the two most recent\nmajor versions. This will ensure that we can reliably update dependencies as needed.\nAdditionally, chamber binaries will be built with the latest stable version of Go\nat the time of release.\n\n## Installing\n\nIf you have a functional go environment, you can install with:\n\n```bash\ngo install github.com/segmentio/chamber/v3@latest\n```\n\n### Caveat About `chamber version` and `go install`\n\nNote that installing with `go install` will not produce an executable containing\nany versioning information. This information is passed at compilation time when\nthe `Makefile` is used for compilation. Without this information, `chamber version`\noutputs the following:\n\n```text\n$ chamber version\nchamber dev\n```\n\n[See the wiki for more installation options like Docker images, Linux packages, and precompiled binaries.](https://github.com/segmentio/chamber/wiki/Installation)\n\n## Authenticating\n\nUsing `chamber` requires you to be running in an environment with an\nauthenticated AWS user which has the appropriate permission to read/write\nvalues to SSM Parameter Store.\n\nThis is going to vary based on your organization but chamber needs AWS credentials\nto run.\n\nOne of the easiest ways to do so is by using [aws-vault](https://github.com/99designs/aws-vault).\nTo adjust these instructions for your needs, examine the env output of\n[Aws-Vault: How It Works](https://github.com/99designs/aws-vault#how-it-works)\nand use your organization's secrets tool accordingly with chamber.\n\n### An `aws-vault` Usage Example With Chamber\n\n```bash\naws-vault exec prod -- chamber\n```\n\nFor this reason, it is recommended that you create an alias in your shell of\nchoice to save yourself some typing, for example (from my `.zshrc`):\n\n```bash\nalias chamberprod='aws-vault exec production -- chamber'\n```\n\n## Setting Up KMS\n\nChamber expects to find a KMS key with alias `parameter_store_key` in the\naccount that you are writing/reading secrets. You can follow the [AWS KMS\ndocumentation](http://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html)\nto create your key, and [follow this guide to set up your\nalias](http://docs.aws.amazon.com/kms/latest/developerguide/programming-aliases.html).\n\nIf you are a [Terraform](https://www.terraform.io/) user, you can create your\nkey with the following:\n\n```HCL\nresource \"aws_kms_key\" \"parameter_store\" {\n  description             = \"Parameter store kms master key\"\n  deletion_window_in_days = 10\n  enable_key_rotation     = true\n}\n\nresource \"aws_kms_alias\" \"parameter_store_alias\" {\n  name          = \"alias/parameter_store_key\"\n  target_key_id = \"${aws_kms_key.parameter_store.id}\"\n}\n```\n\nIf you'd like to use an alternate KMS key to encrypt your secrets, you can set\nthe environment variable `CHAMBER_KMS_KEY_ALIAS`. As an example, the following\nwill use your account's default SSM alias:\n`CHAMBER_KMS_KEY_ALIAS=aws/ssm`\n\n## Usage\n\n### Writing Secrets\n\n```bash\n$ chamber write <service> <key> <value|->\n```\n\nThis operation will write a secret into the secret store. If a secret with that\nkey already exists, it will increment the version and store a new value.\n\nIf `-` is provided as the value argument, the value will be read from standard\ninput.\n\nSecret keys are normalized automatically. The `-` will be `_` and the letters will\nbe converted to upper case (for example a secret with key `secret_key` and\n`secret-key` will become `SECRET_KEY`).\n\n#### Reserved Service Names\n\nStarting with version 3.0, the service name \"_chamber\" is reserved for chamber's\ninternal use. You will be warned when using the service for any chamber operation.\n\n#### Tagging on Write\n\n```bash\n$ chamber write <service> <key> <value> --tags key1=value1,key2=value2\n```\n\nThis operation will write a secret into the secret store with the specified tags.\nTagging on write is only available for new secrets.\n\n### Tagging Secrets\n\n```bash\n$ chamber tag write <service> <key> tag1=value1 tag2=value2\nKey Value\ntag1  value1\ntag2  value2\n$ chamber tag read <service> <key>\nKey Value\ntag1  value1\ntag2  value2\n$ chamber tag delete <service> <key> tag1\n$ chamber tag read <service> <key>\nKey Value\ntag2  value2\n```\n\nWriting tags normally leaves other tags intact. If you want to replace all tags\nwith the new ones, use `--delete-other-tags` flag. _Note: The option may change\nbefore the next major release._\n\n```bash\n$ chamber tag write --delete-other-tags <service> <key> tag1=value1\nKey Value\ntag1  value1\n```\n\n### Listing Secrets\n\n```bash\n$ chamber list service\nKey         Version                  LastModified      User\napikey      2                        06-09 17:30:56    daniel-fuentes\nother       1                        06-09 17:30:34    daniel-fuentes\n```\n\nListing secrets should show the key names for a given service, along with other\nuseful metadata including when the secret was last modified, who modified it,\nand what the current version is.\n\n```bash\n$ chamber list -e service\nKey         Version                  LastModified      User             Value\napikey      2                        06-09 17:30:56    daniel-fuentes   apikeyvalue\nother       1                        06-09 17:30:34    daniel-fuentes   othervalue\n```\n\nListing secrets with expand parameter should show the key names and values for a\ngiven service, along with other useful metadata including when the secret was\nlast modified, who modified it, and what the current version is.\n\n### Historic view\n\n```bash\n$ chamber history service key\nEvent       Version     Date            User\nCreated     1           06-09 17:30:19  daniel-fuentes\nUpdated     2           06-09 17:30:56  daniel-fuentes\n```\n\nThe `history` command gives a historical view of a given secret. This view is\nuseful for auditing changes, and can point you toward the user who made the\nchange so it's easier to find out why changes were made.\n\n### Exec\n\n```bash\n$ chamber exec <service...> -- <your executable>\n```\n\n`exec` populates the environment with the secrets from the specified services\nand executes the given command. Secret keys are converted to upper case (for\nexample a secret with key `secret_key` will become `SECRET_KEY`).\n\nSecrets from services are loaded in the order specified in the command. For\nexample, if you do `chamber exec app apptwo -- ...` and both apps have a secret\nnamed `api_key`, the `api_key` from `apptwo` will be the one set in your\nenvironment.\n\n### Reading\n\n```bash\n$ chamber read service key\nKey             Value                           Version         LastModified    User\nkey             secret                          1               06-09 17:30:56  daniel-fuentes\n```\n\n`read` provides the ability to print out the value of a single secret, as well\nas the secret's additional metadata. It does not provide the ability to print\nout multiple secrets in order to discourage accessing extra secret material\nthat is unneeded. Parameter store automatically versions secrets and passing\nthe `--version/-v` flag to read can print older versions of the secret. Default\nversion (-1) is the latest secret.\n\n### Exporting\n\n```bash\n$ chamber export [--format <format>] [--output-file <file>]  <service...>\n{\"key\":\"secret\"}\n```\n\n`export` provides ability to export secrets in various file formats. The following\nfile formats are supported:\n\n- json (default)\n- yaml\n- java-properties\n- csv\n- tsv\n- dotenv\n- tfvars\n\nFile is written to standard output by default but you may specify an output file.\n\n### Caveat About Environment Variables\n\n`chamber` can emit environment variables in both dotenv format and exported shell\nenvironment variables. As `chamber` allows creating key names that are themselves\nnot valid shell variable names, secrets emitted in this format will have their\nkeys modified to confirm to POSIX shell environment variable naming rules:\n\n- variable names **must** begin with a letter or an underscore\n  - variable names **must not** begin with a number\n- variable names **must** only contain letters, numbers, or underscores\n\n#### Notes About Dotenv Format\n\nAs there is no formal dotenv spec, `chamber` attempts to\nadhere to compliance with [joho/godotenv](https://github.com/joho/godotenv) (which\nis itself a port of the Ruby library\n[bkeepers/dotenv](https://github.com/bkeepers/dotenv)). The output should be generally\ncross-compatible with alternative parsers, but without a formal spec compatibility\nis not guaranteed.\n\nOf note:\n\n- all key names will be sanitized according the the POSIX shell rules above, and\ncast to uppercase\n- all values will be rendered using special characters instead of string literals,\n  e.g. newlines replaced with the character `\\n`, tabstops replaced with the character\n  `\\t`, etc.\n  - no whitespace trimming will be performed on any values\n\n#### Notes About Exported Environment Variables\n\nAlternatively, `chamber` may be used to set local environment variables directly\nwith the `chamber env` command. For example,\n\n```shell\nsource <(chamber env service)`\nprintf \"%s\" \"$SERVICE_VAR\"\n```\n\nNote that all secrets printed this way will be prefixed with `export`, so if sourced\ninline as in the above example, then any and all secrets will then be available\nto any process run after sourcing.\n\nthe `env` subcommand supports output formatting in two specific ways:\n\n```text\nchamber env -h\nPrint the secrets from the parameter store in a format to export as environment variables\n\nUsage:\n  chamber env <service> [flags]\n\nFlags:\n  -p, --preserve-case    preserve variable name case\n  -e, --escape-strings   escape special characters in values\n```\n\nAs `chamber` allows creation of keys with mixed case, `--preserve-case` will ensure\nthat the original key case is preserved. Note that this will **not** prevent the\nkey name from being sanitized according to the above POSIX shell rules.\nBy default, values will be rendered using string literals, e.g. newlines will\nbe printed as literal newlines, tabstops as literal tabstops. Output may be\nemitted using escaped special characters instead (identical to\n`chamber export -o dotenv)`) by using the flag `--escape-strings`.\n\n### Importing\n\n```bash\n$ chamber import [--normalize-keys] <service> <filepath>\n```\n\n`import` provides the ability to import secrets from a json or yaml file (like\nthe kind you get from `chamber export`).\n\n<!-- prettier-ignore -->\n> __Note__\n> By default, `import` will **not** normalize key inputs, meaning that keys will\n> be written to the secrets backend in the format they exist in the source file.\n> In order to normalize keys on import, provide the `--normalize-keys` flag\n\nWhen normalizing keys, before write, the key will be be first converted to lowercase\nto match how `chamber write` handles keys.\n\nExample: `DB_HOST` will be converted to `db_host`.\n\nYou can set `filepath` to `-` to instead read input from stdin.\n\n### Deleting\n\n```bash\n$ chamber delete [--exact-key] service key\n```\n\n`delete` provides the ability to remove a secret from chamber permanently,\nincluding the secret's additional metadata. There is no way to recover a\nsecret once it has been deleted so care should be taken with this command.\n\n<!-- prettier-ignore -->\n> __Note__\n> By default, `delete` will normalize any provided keys. To change that behavior,\n> provide the `--exact-key` flag to attempt to delete the raw provided key.\n\nExample: Given the following setup,\n\n```bash\n$ chamber list service\nKey         Version                  LastModified      User\napikey      2                        06-09 17:30:56    daniel-fuentes\nAPIKEY      1                        06-09 17:30:34    daniel-fuentes\n```\n\nCalling\n\n```bash\n$ chamber delete --exact-key service APIKEY\n```\n\nwill delete only `APIKEY` from the service and leave only\n\n```bash\n$ chamber list service\nKey         Version                  LastModified      User\napikey      2                        06-09 17:30:56    daniel-fuentes\n```\n\n### Finding\n\n```bash\n$ chamber find key\n```\n\n`find` provides the ability to locate which services use the same key names.\n\n```bash\n$ chamber find value --by-value\n```\n\nPassing `--by-value` or `-v` will search the values of all secrets and return\nthe services and keys which match.\n\n### Listing Services\n\n```bash\n$ chamber list-services [<prefix>]\n```\n\n`list-services` lists the available services. You can provide a prefix to limit\nthe results.\n\n### AWS Region\n\nChamber uses [AWS SDK for Go](https://github.com/aws/aws-sdk-go). To use a\nregion other than what is specified in `$HOME/.aws/config`, set the environment\nvariable \"AWS_REGION\".\n\n```bash\n$ AWS_REGION=us-west-2 chamber list service\nKey         Version                  LastModified      User\napikey      3                        07-10 09:30:41    daniel-fuentes\nother       1                        07-10 09:30:35    daniel-fuentes\n```\n\nChamber does not currently read the value of \"AWS_DEFAULT_REGION\". See\n[https://github.com/aws/aws-sdk-go#configuring-aws-region](https://github.com/aws/aws-sdk-go#configuring-aws-region)\nfor more details.\n\nIf you'd like to use a different region for chamber without changing `AWS_REGION`,\nyou can use `CHAMBER_AWS_REGION` to override just for chamber.\n\n### Custom SSM Endpoint\n\nIf you'd like to use a custom SSM endpoint for chamber, you can use `CHAMBER_AWS_SSM_ENDPOINT`\nto override the default URL.\n\n## AWS Secrets Manager\nChamber supports AWS Secrets Manager as an optional backend. For example:\n\n```\nchamber -b secretsmanager write myservice foo fah\nchamber -b secretsmanager write myservice foo2 fah2\n```\n\n### Custom Secrets Manager Endpoint\n\nIf you'd like to use a custom Secrets Manager endpoint for chamber, you can use\n`CHAMBER_AWS_SECRETS_MANAGER_ENDPOINT` to override the default URL.\n\n> [!WARNING]\n> Prior to v3.0.0, the endpoint could also be overridden with `CHAMBER_AWS_SSM_ENDPOINT`. This\n> has been deprecated and will stop working in a future chamber release. Please use\n> `CHAMBER_AWS_SECRETS_MANAGER_ENDPOINT` instead.\n\n## S3 Backend (Experimental)\n\nBy default, chamber store secrets in AWS Parameter Store. We now also provide an\nexperimental S3 backend for storing secrets in S3 instead.\n\nTo configure chamber to use the S3 backend, use `chamber -b s3 --backend-s3-bucket=mybucket`.\nPreferably, this bucket should reject uploads that do not set the server side\nencryption header ([see this doc for details how](https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/))\n\nThis feature is experimental, and not currently meant for production work.\n\n### S3 Backend using KMS Key Encryption (Experimental)\n\nThis backend is similar to the S3 Backend but uses KMS Key Encryption to encrypt\nyour documents at rest, similar to the SSM Backend which encrypts your secrets\nat rest. You can read how S3 Encrypts documents with KMS [here](https://docs.aws.amazon.com/kms/latest/developerguide/services-s3.html).\n\nThe highlights of SSE-KMS are:\n\n- You can choose to create and manage encryption keys yourself, or you can choose\n  to use your default service key uniquely generated on a customer by service by\n  region level.\n- The ETag in the response is not the MD5 of the object data.\n- The data keys used to encrypt your data are also encrypted and stored alongside\n  the data they protect.\n- Auditable master keys can be created, rotated, and disabled from the AWS KMS console.\n- The security controls in AWS KMS can help you meet encryption-related compliance\n  requirements.\n\nSource: [Protecting data using server-side encryption with AWS Key Management Service keys (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html)\n\nTo configure chamber to use the S3 KMS backend, use\n`chamber -b s3-kms --backend-s3-bucket=mybucket --kms-key-alias=alias/keyname`.\nYou must also supply an environment variable of the KMS Key Alias to use\nCHAMBER_KMS_KEY_ALIAS, by default \"alias/parameter_store_key\"\nwill be used.\n\nPreferably, this bucket should reject uploads that do not set the server side\nencryption header ([see this doc for details how](https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/))\n\nWhen changing secrets between KMS Keys, you must first delete the Chamber secret\nwith the existing KMS Key, then write it again with new KMS Key.\n\nIf services contain multiple KMS Keys, `chamber list` and `chamber exec` will only\nshow Chamber secrets encrypted with KMS Keys you have access to.\n\nThis feature is experimental, and not currently meant for production work.\n\n## Null Backend (Experimental)\n\nIf it's preferred to not use any backend at all, use `chamber -b null`. Doing so\nwill forward existing ENV variables as if Chamber is not in between.\n\nThis feature is experimental, and not currently meant for production work.\n\n## Analytics\n\n`chamber` includes some usage analytics code which Segment uses internally for\ntracking usage of internal tools. This analytics code is turned off by default,\nand can only be enabled via a linker flag at build time, which we do not set for\npublic github releases.\n\n## Releasing\n\nTo cut a new release, just push a tag named `v<semver>` where `<semver>` is a\nvalid semver version. This tag will be used by Github Actions to automatically publish\na github release.\n\n---\n\n<div align=\"center\">\nTHE CHAMBER OF SECRETS HAS BEEN OPENED\n</div>\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "environ",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.962890625,
          "content": "module github.com/segmentio/chamber/v3\n\ngo 1.22\n\nrequire (\n\tgithub.com/alessio/shellescape v1.4.2\n\tgithub.com/aws/aws-sdk-go-v2 v1.32.6\n\tgithub.com/aws/aws-sdk-go-v2/config v1.28.6\n\tgithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.21\n\tgithub.com/aws/aws-sdk-go-v2/service/s3 v1.71.0\n\tgithub.com/aws/aws-sdk-go-v2/service/secretsmanager v1.34.7\n\tgithub.com/aws/aws-sdk-go-v2/service/ssm v1.56.1\n\tgithub.com/aws/aws-sdk-go-v2/service/sts v1.33.2\n\tgithub.com/aws/smithy-go v1.22.1\n\tgithub.com/magiconair/properties v1.8.9\n\tgithub.com/segmentio/analytics-go/v3 v3.3.0\n\tgithub.com/spf13/cobra v1.8.1\n\tgithub.com/stretchr/testify v1.10.0\n\tgolang.org/x/sys v0.28.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tgithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/credentials v1.17.47 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.25 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.25 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/v4a v1.3.25 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.6 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.6 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.6 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/sso v1.24.7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.6 // indirect\n\tgithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/google/uuid v1.3.1 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/jmespath/go-jmespath v0.4.0 // indirect\n\tgithub.com/kr/pretty v0.3.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/segmentio/backo-go v1.0.1 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 8.2783203125,
          "content": "github.com/alessio/shellescape v1.4.2 h1:MHPfaU+ddJ0/bYWpgIeUnQUqKrlJ1S7BfEYPM4uEoM0=\ngithub.com/alessio/shellescape v1.4.2/go.mod h1:PZAiSCk0LJaZkiCSkPv8qIobYglO3FPpyFjDCtHLS30=\ngithub.com/aws/aws-sdk-go-v2 v1.32.6 h1:7BokKRgRPuGmKkFMhEg/jSul+tB9VvXhcViILtfG8b4=\ngithub.com/aws/aws-sdk-go-v2 v1.32.6/go.mod h1:P5WJBrYqqbWVaOxgH0X/FYYD47/nooaPOZPlQdmiN2U=\ngithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7 h1:lL7IfaFzngfx0ZwUGOZdsFFnQ5uLvR0hWqqhyE7Q9M8=\ngithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7/go.mod h1:QraP0UcVlQJsmHfioCrveWOC1nbiWUl3ej08h4mXWoc=\ngithub.com/aws/aws-sdk-go-v2/config v1.28.6 h1:D89IKtGrs/I3QXOLNTH93NJYtDhm8SYa9Q5CsPShmyo=\ngithub.com/aws/aws-sdk-go-v2/config v1.28.6/go.mod h1:GDzxJ5wyyFSCoLkS+UhGB0dArhb9mI+Co4dHtoTxbko=\ngithub.com/aws/aws-sdk-go-v2/credentials v1.17.47 h1:48bA+3/fCdi2yAwVt+3COvmatZ6jUDNkDTIsqDiMUdw=\ngithub.com/aws/aws-sdk-go-v2/credentials v1.17.47/go.mod h1:+KdckOejLW3Ks3b0E3b5rHsr2f9yuORBum0WPnE5o5w=\ngithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.21 h1:AmoU1pziydclFT/xRV+xXE/Vb8fttJCLRPv8oAkprc0=\ngithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.21/go.mod h1:AjUdLYe4Tgs6kpH4Bv7uMZo7pottoyHMn4eTcIcneaY=\ngithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.25 h1:s/fF4+yDQDoElYhfIVvSNyeCydfbuTKzhxSXDXCPasU=\ngithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.25/go.mod h1:IgPfDv5jqFIzQSNbUEMoitNooSMXjRSDkhXv8jiROvU=\ngithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.25 h1:ZntTCl5EsYnhN/IygQEUugpdwbhdkom9uHcbCftiGgA=\ngithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.25/go.mod h1:DBdPrgeocww+CSl1C8cEV8PN1mHMBhuCDLpXezyvWkE=\ngithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1 h1:VaRN3TlFdd6KxX1x3ILT5ynH6HvKgqdiXoTxAF4HQcQ=\ngithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1/go.mod h1:FbtygfRFze9usAadmnGJNc8KsP346kEe+y2/oyhGAGc=\ngithub.com/aws/aws-sdk-go-v2/internal/v4a v1.3.25 h1:r67ps7oHCYnflpgDy2LZU0MAQtQbYIOqNNnqGO6xQkE=\ngithub.com/aws/aws-sdk-go-v2/internal/v4a v1.3.25/go.mod h1:GrGY+Q4fIokYLtjCVB/aFfCVL6hhGUFl8inD18fDalE=\ngithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1 h1:iXtILhvDxB6kPvEXgsDhGaZCSC6LQET5ZHSdJozeI0Y=\ngithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1/go.mod h1:9nu0fVANtYiAePIBh2/pFUSwtJ402hLnp854CNoDOeE=\ngithub.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.6 h1:HCpPsWqmYQieU7SS6E9HXfdAMSud0pteVXieJmcpIRI=\ngithub.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.6/go.mod h1:ngUiVRCco++u+soRRVBIvBZxSMMvOVMXA4PJ36JLfSw=\ngithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.6 h1:50+XsN70RS7dwJ2CkVNXzj7U2L1HKP8nqTd3XWEXBN4=\ngithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.6/go.mod h1:WqgLmwY7so32kG01zD8CPTJWVWM+TzJoOVHwTg4aPug=\ngithub.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.6 h1:BbGDtTi0T1DYlmjBiCr/le3wzhA37O8QTC5/Ab8+EXk=\ngithub.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.6/go.mod h1:hLMJt7Q8ePgViKupeymbqI0la+t9/iYFBjxQCFwuAwI=\ngithub.com/aws/aws-sdk-go-v2/service/s3 v1.71.0 h1:nyuzXooUNJexRT0Oy0UQY6AhOzxPxhtt4DcBIHyCnmw=\ngithub.com/aws/aws-sdk-go-v2/service/s3 v1.71.0/go.mod h1:sT/iQz8JK3u/5gZkT+Hmr7GzVZehUMkRZpOaAwYXeGY=\ngithub.com/aws/aws-sdk-go-v2/service/secretsmanager v1.34.7 h1:Nyfbgei75bohfmZNxgN27i528dGYVzqWJGlAO6lzXy8=\ngithub.com/aws/aws-sdk-go-v2/service/secretsmanager v1.34.7/go.mod h1:FG4p/DciRxPgjA+BEOlwRHN0iA8hX2h9g5buSy3cTDA=\ngithub.com/aws/aws-sdk-go-v2/service/ssm v1.56.1 h1:cfVjoEwOMOJOI6VoRQua0nI0KjZV9EAnR8bKaMeSppE=\ngithub.com/aws/aws-sdk-go-v2/service/ssm v1.56.1/go.mod h1:fGHwAnTdNrLKhgl+UEeq9uEL4n3Ng4MJucA+7Xi3sC4=\ngithub.com/aws/aws-sdk-go-v2/service/sso v1.24.7 h1:rLnYAfXQ3YAccocshIH5mzNNwZBkBo+bP6EhIxak6Hw=\ngithub.com/aws/aws-sdk-go-v2/service/sso v1.24.7/go.mod h1:ZHtuQJ6t9A/+YDuxOLnbryAmITtr8UysSny3qcyvJTc=\ngithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.6 h1:JnhTZR3PiYDNKlXy50/pNeix9aGMo6lLpXwJ1mw8MD4=\ngithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.6/go.mod h1:URronUEGfXZN1VpdktPSD1EkAL9mfrV+2F4sjH38qOY=\ngithub.com/aws/aws-sdk-go-v2/service/sts v1.33.2 h1:s4074ZO1Hk8qv65GqNXqDjmkf4HSQqJukaLuuW0TpDA=\ngithub.com/aws/aws-sdk-go-v2/service/sts v1.33.2/go.mod h1:mVggCnIWoM09jP71Wh+ea7+5gAp53q+49wDFs1SW5z8=\ngithub.com/aws/smithy-go v1.22.1 h1:/HPHZQ0g7f4eUeK6HKglFz8uwVfZKgoI25rb/J+dnro=\ngithub.com/aws/smithy-go v1.22.1/go.mod h1:irrKGvNn1InZwb2d7fkIRNucdfwR8R+Ts3wxYa/cJHg=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869 h1:DDGfHa7BWjL4YnC6+E63dPcxHo2sUxDIu8g3QgEJdRY=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869/go.mod h1:Ekp36dRnpXw/yCqJaO+ZrUyxD+3VXMFFr56k5XYrpB4=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/google/uuid v1.3.1 h1:KjJaJ9iWZ3jOFZIf1Lqf4laDRCasjl0BCmnEGxkdLb4=\ngithub.com/google/uuid v1.3.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=\ngithub.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/magiconair/properties v1.8.9 h1:nWcCbLq1N2v/cpNsy5WvQ37Fb+YElfq20WJ/a8RkpQM=\ngithub.com/magiconair/properties v1.8.9/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/segmentio/analytics-go/v3 v3.3.0 h1:8VOMaVGBW03pdBrj1CMFfY9o/rnjJC+1wyQHlVxjw5o=\ngithub.com/segmentio/analytics-go/v3 v3.3.0/go.mod h1:p8owAF8X+5o27jmvUognuXxdtqvSGtD0ZrfY2kcS9bE=\ngithub.com/segmentio/backo-go v1.0.1 h1:68RQccglxZeyURy93ASB/2kc9QudzgIDexJ927N++y4=\ngithub.com/segmentio/backo-go v1.0.1/go.mod h1:9/Rh6yILuLysoQnZ2oNooD2g7aBnvM7r/fNVxRNWfBc=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.2255859375,
          "content": "package main\n\nimport (\n\t\"github.com/segmentio/chamber/v3/cmd\"\n)\n\nvar (\n\t// This is updated by linker flags during build\n\tVersion           = \"dev\"\n\tAnalyticsWriteKey = \"\"\n)\n\nfunc main() {\n\tcmd.Execute(Version, AnalyticsWriteKey)\n}\n"
        },
        {
          "name": "nfpm.yaml.tmpl",
          "type": "blob",
          "size": 0.501953125,
          "content": "name: \"chamber\"\narch: \"amd64\"\nplatform: \"linux\"\nversion: \"${VERSION}\"\nsection: \"default\"\npriority: \"extra\"\nprovides:\n- chamber\nvendor: 'Segment, Inc.'\nmaintainer: tooling-team@segment.com\nhomepage: \"https://github.com/segmentio/chamber\"\nlicense: \"MIT\"\n# IMHO packages should install to /usr/bin\nbindir: /usr/bin\nfiles:\n  \"${DIST_BIN}\": \"/usr/bin/chamber\"\ndescription: >\n  Chamber is a tool for managing secrets. Currently it does so by storing\n  secrets in SSM Parameter Store, an AWS service for storing secrets.\n"
        },
        {
          "name": "store",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}