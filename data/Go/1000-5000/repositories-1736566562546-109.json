{
  "metadata": {
    "timestamp": 1736566562546,
    "page": 109,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nginx-proxy/docker-gen",
      "stars": 4483,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0703125,
          "content": ".git\n.github\ndocker-gen\ndist\nexamples\nMakefile\nREADME.md\ntemplates\n*.gz\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "docker-gen\n!cmd/docker-gen\ndist\n*.gz\n"
        },
        {
          "name": "Dockerfile.alpine",
          "type": "blob",
          "size": 1.1669921875,
          "content": "ARG DOCKER_GEN_VERSION=main\n\n# Build docker-gen from scratch\nFROM --platform=$BUILDPLATFORM golang:1.23.4-alpine AS go-builder\n\nENV CGO_ENABLED=0\n\nARG DOCKER_GEN_VERSION TARGETOS TARGETARCH TARGETVARIANT\nENV GOOS=$TARGETOS GOARCH=$TARGETARCH VARIANT=$TARGETVARIANT\n\nWORKDIR /build\n\n# Install the dependencies\nCOPY . .\nRUN go mod download\n\n# Build the docker-gen executable\nRUN set -eux; \\\n\tcase \"$GOARCH\" in \\\n\t\tarm) export GOARM=\"${VARIANT#v}\" ;; \\\n\t\tamd64) export GOAMD64=\"$VARIANT\" ;; \\\n\t\t*) [ -z \"$VARIANT\" ] ;; \\\n\tesac; \\\n\tgo env | grep -E 'OS=|ARCH=|ARM=|AMD64='; \\\n    go build -ldflags \"-X main.buildVersion=${DOCKER_GEN_VERSION}\" -o docker-gen ./cmd/docker-gen\n\nFROM alpine:3.21.2\n\nARG DOCKER_GEN_VERSION\nENV DOCKER_GEN_VERSION=${DOCKER_GEN_VERSION} \\\n    DOCKER_HOST=unix:///tmp/docker.sock\n\n# Install packages required by the image\nRUN apk add --no-cache --virtual .bin-deps openssl\n\n# Copy the entrypoint script\nCOPY /app/docker-entrypoint.sh /app/docker-entrypoint.sh\n\n# Install docker-gen from build stage\nCOPY --from=go-builder /build/docker-gen /usr/local/bin/docker-gen\n\n# Copy the license\nCOPY LICENSE /usr/local/share/doc/docker-gen/\n\nENTRYPOINT [\"/app/docker-entrypoint.sh\"]\n"
        },
        {
          "name": "Dockerfile.debian",
          "type": "blob",
          "size": 1.2509765625,
          "content": "ARG DOCKER_GEN_VERSION=main\n\n# Build docker-gen from scratch\nFROM --platform=$BUILDPLATFORM golang:1.23.4 AS go-builder\n\nENV CGO_ENABLED=0\n\nARG DOCKER_GEN_VERSION TARGETOS TARGETARCH TARGETVARIANT\nENV GOOS=$TARGETOS GOARCH=$TARGETARCH VARIANT=$TARGETVARIANT\n\nWORKDIR /build\n\n# Install the dependencies\nCOPY . .\nRUN go mod download\n\n# Build the docker-gen executable\nRUN set -eux; \\\n\tcase \"$GOARCH\" in \\\n\t\tarm) export GOARM=\"${VARIANT#v}\" ;; \\\n\t\tamd64) export GOAMD64=\"$VARIANT\" ;; \\\n\t\t*) [ -z \"$VARIANT\" ] ;; \\\n\tesac; \\\n\tgo env | grep -E 'OS=|ARCH=|ARM=|AMD64='; \\\n    go build -ldflags \"-X main.buildVersion=${DOCKER_GEN_VERSION}\" -o docker-gen ./cmd/docker-gen\n\nFROM debian:12.8-slim\n\nARG DOCKER_GEN_VERSION\nENV DOCKER_GEN_VERSION=${DOCKER_GEN_VERSION} \\\n    DOCKER_HOST=unix:///tmp/docker.sock\n\n# Install packages required by the image\nRUN apt-get update \\\n    && apt-get install -y -q --no-install-recommends openssl \\\n    && apt-get clean \\\n    && rm -r /var/lib/apt/lists/*\n\n# Copy the entrypoint script\nCOPY /app/docker-entrypoint.sh /app/docker-entrypoint.sh\n\n# Install docker-gen from build stage\nCOPY --from=go-builder /build/docker-gen /usr/local/bin/docker-gen\n\n# Copy the license\nCOPY LICENSE /usr/local/share/doc/docker-gen/\n\nENTRYPOINT [\"/app/docker-entrypoint.sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.095703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014-2021 Jason Wilder\nCopyright (c) 2021-2022 Nicolas Duchon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.5166015625,
          "content": ".SILENT :\n.PHONY : docker-gen clean fmt\n\nTAG:=`git describe --tags`\nLDFLAGS:=-X main.buildVersion=$(TAG)\n\nall: docker-gen\n\ndocker-gen:\n\techo \"Building docker-gen\"\n\tgo build -ldflags \"$(LDFLAGS)\" ./cmd/docker-gen\n\ndist-clean:\n\trm -rf dist\n\trm -f docker-gen-alpine-linux-*.tar.gz\n\trm -f docker-gen-linux-*.tar.gz\n\trm -f docker-gen-darwin-*.tar.gz\n\trm -f docker-gen-windows-*.tar.gz\n\ndist: dist-clean\n\tmkdir -p dist/alpine-linux/amd64 && GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags \"$(LDFLAGS)\" -a -tags netgo -installsuffix netgo -o dist/alpine-linux/amd64/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/alpine-linux/arm64 && GOOS=linux GOARCH=arm64 go build -ldflags \"$(LDFLAGS)\" -a -tags netgo -installsuffix netgo -o dist/alpine-linux/arm64/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/alpine-linux/armhf && GOOS=linux GOARCH=arm GOARM=6 go build -ldflags \"$(LDFLAGS)\" -a -tags netgo -installsuffix netgo -o dist/alpine-linux/armhf/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/linux/amd64 && GOOS=linux GOARCH=amd64 go build -ldflags \"$(LDFLAGS)\" -o dist/linux/amd64/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/linux/arm64 && GOOS=linux GOARCH=arm64 go build -ldflags \"$(LDFLAGS)\" -o dist/linux/arm64/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/linux/i386  && GOOS=linux GOARCH=386 go build -ldflags \"$(LDFLAGS)\" -o dist/linux/i386/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/linux/armel  && GOOS=linux GOARCH=arm GOARM=5 go build -ldflags \"$(LDFLAGS)\" -o dist/linux/armel/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/linux/armhf  && GOOS=linux GOARCH=arm GOARM=6 go build -ldflags \"$(LDFLAGS)\" -o dist/linux/armhf/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/darwin/amd64 && GOOS=darwin GOARCH=amd64 go build -ldflags \"$(LDFLAGS)\" -o dist/darwin/amd64/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/darwin/arm64 && GOOS=darwin GOARCH=arm64 go build -ldflags \"$(LDFLAGS)\" -o dist/darwin/arm64/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/windows/i386  && GOOS=windows GOARCH=386 go build -ldflags \"$(LDFLAGS)\" -o dist/windows/i386/docker-gen ./cmd/docker-gen\n\tmkdir -p dist/windows/amd64  && GOOS=windows GOARCH=amd64 go build -ldflags \"$(LDFLAGS)\" -o dist/windows/amd64/docker-gen ./cmd/docker-gen\n\nrelease: dist\n\tgo mod tidy\n\ttar -cvzf docker-gen-alpine-linux-amd64-$(TAG).tar.gz -C dist/alpine-linux/amd64 docker-gen\n\ttar -cvzf docker-gen-alpine-linux-arm64-$(TAG).tar.gz -C dist/alpine-linux/arm64 docker-gen\n\ttar -cvzf docker-gen-alpine-linux-armhf-$(TAG).tar.gz -C dist/alpine-linux/armhf docker-gen\n\ttar -cvzf docker-gen-linux-amd64-$(TAG).tar.gz -C dist/linux/amd64 docker-gen\n\ttar -cvzf docker-gen-linux-arm64-$(TAG).tar.gz -C dist/linux/arm64 docker-gen\n\ttar -cvzf docker-gen-linux-i386-$(TAG).tar.gz -C dist/linux/i386 docker-gen\n\ttar -cvzf docker-gen-linux-armel-$(TAG).tar.gz -C dist/linux/armel docker-gen\n\ttar -cvzf docker-gen-linux-armhf-$(TAG).tar.gz -C dist/linux/armhf docker-gen\n\ttar -cvzf docker-gen-darwin-amd64-$(TAG).tar.gz -C dist/darwin/amd64 docker-gen\n\ttar -cvzf docker-gen-darwin-arm64-$(TAG).tar.gz -C dist/darwin/arm64 docker-gen\n\ttar -cvzf docker-gen-windows-amd64-$(TAG).tar.gz -C dist/windows/amd64 docker-gen\n\ttar -cvzf docker-gen-windows-i386-$(TAG).tar.gz -C dist/windows/i386 docker-gen\n\nget-deps:\n\tgo mod download\n\ncheck-gofmt:\n\tif [ -n \"$(shell go fmt ./cmd/...)\" ]; then \\\n\t\techo 1>&2 'The following files need to be formatted:'; \\\n\t\tgofmt -l ./cmd/docker-gen; \\\n\t\texit 1; \\\n\tfi\n\tif [ -n \"$(shell go fmt ./internal/...)\" ]; then \\\n\t\techo 1>&2 'The following files need to be formatted:'; \\\n\t\tgofmt -l ./internal; \\\n\t\texit 1; \\\n\tfi\n\ntest:\n\tgo test -race ./internal/...\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.443359375,
          "content": "# docker-gen\n\n[![Tests](https://github.com/nginx-proxy/docker-gen/actions/workflows/tests.yml/badge.svg)](https://github.com/nginx-proxy/docker-gen/actions/workflows/tests.yml)\n[![GitHub release](https://img.shields.io/github/v/release/nginx-proxy/docker-gen)](https://github.com/nginx-proxy/docker-gen/releases)\n[![Docker Image Size](https://img.shields.io/docker/image-size/nginxproxy/docker-gen?sort=semver)](https://hub.docker.com/r/nginxproxy/docker-gen \"Click to view the image on Docker Hub\")\n[![Docker stars](https://img.shields.io/docker/stars/nginxproxy/docker-gen.svg)](https://hub.docker.com/r/nginxproxy/docker-gen \"DockerHub\")\n[![Docker pulls](https://img.shields.io/docker/pulls/nginxproxy/docker-gen.svg)](https://hub.docker.com/r/nginxproxy/docker-gen \"DockerHub\")\n\n`docker-gen` is a file generator that renders templates using docker container meta-data.\n\nIt can be used to generate various kinds of files for:\n\n- **Centralized logging** - [fluentd](https://github.com/nginx-proxy/docker-gen/blob/main/templates/fluentd.conf.tmpl), logstash or other centralized logging tools that tail the containers JSON log file or files within the container.\n- **Log Rotation** - [logrotate](https://github.com/nginx-proxy/docker-gen/blob/main/templates/logrotate.tmpl) files to rotate container JSON log files\n- **Reverse Proxy Configs** - [nginx](https://github.com/nginx-proxy/docker-gen/blob/main/templates/nginx.tmpl), [haproxy](https://github.com/jwilder/docker-discover), etc. reverse proxy configs to route requests from the host to containers\n- **Service Discovery** - Scripts (python, bash, etc..) to register containers within [etcd](https://github.com/jwilder/docker-register), hipache, etc..\n\n---\n\n### Installation\n\nThere are three common ways to run docker-gen:\n\n- on the host\n- bundled in a container with another application\n- separate standalone containers\n\n#### Host Install\n\nDownload the version you need, untar, and install to your PATH.\n\n```console\nwget https://github.com/nginx-proxy/docker-gen/releases/download/0.12.0/docker-gen-linux-amd64-0.12.0.tar.gz\ntar xvzf docker-gen-linux-amd64-0.12.0.tar.gz\n./docker-gen\n```\n\n#### Bundled Container Install\n\nDocker-gen can be bundled inside of a container along-side applications.\n\n[nginx-proxy/nginx-proxy](https://hub.docker.com/r/nginxproxy/nginx-proxy) trusted build is an example of\nrunning docker-gen within a container along-side nginx.\n[jwilder/docker-register](https://github.com/jwilder/docker-register) is an example of running\ndocker-gen within a container to do service registration with etcd.\n\n#### Separate Container Install\n\nIt can also be run as two separate containers using the [nginx-proxy/docker-gen](https://hub.docker.com/r/nginxproxy/docker-gen)\nimage, together with virtually any other image.\n\nThis is how you could run the official [nginx](https://registry.hub.docker.com/_/nginx/) image and\nhave docker-gen generate a reverse proxy config in the same way that `nginx-proxy` works. You may want to do\nthis to prevent having the docker socket bound to a publicly exposed container service.\n\nStart nginx with a shared volume:\n\n```console\ndocker run -d -p 80:80 --name nginx -v /tmp/nginx:/etc/nginx/conf.d -t nginx\n```\n\nFetch the template and start the docker-gen container with the shared volume:\n\n```console\nmkdir -p /tmp/templates && cd /tmp/templates\ncurl -o nginx.tmpl https://raw.githubusercontent.com/nginx-proxy/docker-gen/main/templates/nginx.tmpl\ndocker run -d --name nginx-gen --volumes-from nginx \\\n   -v /var/run/docker.sock:/tmp/docker.sock:rw \\\n   -v /tmp/templates:/etc/docker-gen/templates \\\n   -t nginxproxy/docker-gen -notify-sighup nginx -watch -only-exposed /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n```\n\nStart a container, taking note of any Environment variables a container expects. See the top of a template for details.\n\n```console\ndocker run --env VIRTUAL_HOST='example.com' --env VIRTUAL_PORT=80 ...\n```\n\n---\n\n### Usage\n\n```\n$ docker-gen\nUsage: docker-gen [options] template [dest]\n\nGenerate files from docker container meta-data\n\nOptions:\n  -config value\n      config files with template directives. Config files will be merged if this option is specified multiple times. (default [])\n  -endpoint string\n      docker api endpoint (tcp|unix://..). Default unix:///var/run/docker.sock\n  -interval int\n      notify command interval (secs)\n  -keep-blank-lines\n      keep blank lines in the output file\n  -notify restart xyz\n      run command after template is regenerated (e.g restart xyz)\n  -notify-output\n      log the output(stdout/stderr) of notify command\n  -notify-sighup container-ID\n      send HUP signal to container.\n      Equivalent to 'docker kill -s HUP container-ID', or `-notify-container container-ID -notify-signal 1`.\n      You can pass this option multiple times to send HUP to multiple containers.\n  -notify-container container-ID\n      send -notify-signal signal (defaults to 1 / HUP) to container.\n      You can pass this option multiple times to notify multiple containers.\n  -notify-filter key=value\n      container filter for notification (e.g -notify-filter name=foo).\n      You can pass this option multiple times to combine filters with AND.\n      https://docs.docker.com/engine/reference/commandline/ps/#filter\n  -notify-signal signal\n      signal to send to the -notify-container and -notify-filter. -1 to call docker restart. Defaults to 1 aka. HUP.\n      All available signals available on the dockerclient\n      https://github.com/fsouza/go-dockerclient/blob/main/signal.go\n  -only-exposed\n      only include containers with exposed ports\n  -only-published\n      only include containers with published ports (implies -only-exposed)\n  -include-stopped\n      include stopped containers\n  -tlscacert string\n      path to TLS CA certificate file (default \"~/.docker/machine/machines/default/ca.pem\")\n  -tlscert string\n      path to TLS client certificate file (default \"~/.docker/machine/machines/default/cert.pem\")\n  -tlskey string\n      path to TLS client key file (default \"~/.docker/machine/machines/default/key.pem\")\n  -tlsverify\n      verify docker daemon's TLS certicate (default true)\n  -version\n      show version\n  -watch\n      watch for container changes\n  -wait\n      minimum (and/or maximum) duration to wait after each container change before triggering\n\nArguments:\n  template - path to a template to generate\n  dest - path to write the template. If not specfied, STDOUT is used\n\nEnvironment Variables:\n  DOCKER_HOST - default value for -endpoint\n  DOCKER_CERT_PATH - directory path containing key.pem, cert.pm and ca.pem\n  DOCKER_TLS_VERIFY - enable client TLS verification]\n```\n\nIf no `<dest>` file is specified, the output is sent to stdout. Mainly useful for debugging.\n\n### Configuration file\n\nUsing the -config flag from above you can tell docker-gen to use the specified config file instead of command-line options. Multiple templates can be defined and they will be executed in the order that they appear in the config file.\n\nAn example configuration file, **docker-gen.cfg** can be found in the examples folder.\n\n#### Configuration File Syntax\n\n```ini\n[[config]]\n# Starts a configuration section\n\ndest = \"path/to/a/file\"\n# path to write the template. If not specfied, STDOUT is used\n\nnotifycmd = \"/etc/init.d/foo reload\"\n# run command after template is regenerated (e.g restart xyz)\n\nonlyexposed = true\n# only include containers with exposed ports\n\ntemplate = \"/path/to/a/template/file.tmpl\"\n# path to a template to generate\n\nwatch = true\n# watch for container changes\n\nwait = \"500ms:2s\"\n# debounce changes with a min:max duration. Only applicable if watch = true\n\n\n[config.NotifyContainers]\n# Starts a notify container section\n\ncontainername = 1\n# container name followed by the signal to send\n\ncontainer_id = 1\n# or the container id can be used followed by the signal to send\n```\n\nPutting it all together here is an example configuration file.\n\n```ini\n[[config]]\ntemplate = \"/etc/nginx/nginx.conf.tmpl\"\ndest = \"/etc/nginx/sites-available/default\"\nonlyexposed = true\nnotifycmd = \"/etc/init.d/nginx reload\"\n\n[[config]]\ntemplate = \"/etc/logrotate.conf.tmpl\"\ndest = \"/etc/logrotate.d/docker\"\nwatch = true\n\n[[config]]\ntemplate = \"/etc/docker-gen/templates/nginx.tmpl\"\ndest = \"/etc/nginx/conf.d/default.conf\"\nwatch = true\nwait = \"500ms:2s\"\n\n[config.NotifyContainers]\nnginx = 1  # 1 is a signal number to be sent; here SIGHUP\ne75a60548dc9 = 1  # a key can be either container name (nginx) or ID\n```\n\n---\n\n### Templating\n\nThe templates used by docker-gen are written using the Go [text/template](http://golang.org/pkg/text/template/) language. In addition to the [built-in functions](http://golang.org/pkg/text/template/#hdr-Functions) supplied by Go, docker-gen uses [sprig](https://masterminds.github.io/sprig/) and some additional functions to make it simpler (or possible) to generate your desired output. Some templates rely on environment variables within the container to make decisions on what to generate from the template.\n\nSeveral templates may be parsed at once by using a semicolon (`;`) to delimit the `template` value. This can be used as a proxy for Golang's nested template functionality. In all cases, the main rendered template should go first.\n\n```\n[[config]]\ntemplate = \"/etc/docker-gen/templates/nginx.tmpl;/etc/docker-gen/templates/header.tmpl\"\ndest = \"/etc/nginx/conf.d/default.conf\"\nwatch = true\nwait = \"500ms:2s\"\n```\n\n#### Emit Structure\n\nWithin the templates, the object emitted by docker-gen will be a structure consisting of following Go structs:\n\n```go\ntype RuntimeContainer struct {\n    ID           string\n    Created      time.Time\n    Addresses    []Address\n    Networks     []Network\n    Gateway      string\n    Name         string\n    Hostname     string\n    Image        DockerImage\n    Env          map[string]string\n    Volumes      map[string]Volume\n    Node         SwarmNode\n    Labels       map[string]string\n    IP           string\n    IP6LinkLocal string\n    IP6Global    string\n    Mounts       []Mount\n    State        State\n}\n\ntype Address struct {\n    IP           string\n    IP6LinkLocal string\n    IP6Global    string\n    Port         string\n    HostPort     string\n    Proto        string\n    HostIP       string\n}\n\ntype Network struct {\n    IP                  string\n    Name                string\n    Gateway             string\n    EndpointID          string\n    IPv6Gateway         string\n    GlobalIPv6Address   string\n    MacAddress          string\n    GlobalIPv6PrefixLen int\n    IPPrefixLen         int\n    Internal            bool\n}\n\ntype DockerImage struct {\n    Registry   string\n    Repository string\n    Tag        string\n}\n\ntype Mount struct {\n  Name        string\n  Source      string\n  Destination string\n  Driver      string\n  Mode        string\n  RW          bool\n}\n\ntype Volume struct {\n    Path      string\n    HostPath  string\n    ReadWrite bool\n}\n\ntype SwarmNode struct {\n    ID      string\n    Name    string\n    Address Address\n}\n\ntype State struct {\n\tRunning bool\n\tHealth  Health\n}\n\ntype Health struct {\n\tStatus string\n}\n\n// Accessible from the root in templates as .Docker\ntype Docker struct {\n    Name                 string\n    NumContainers        int\n    NumImages            int\n    Version              string\n    ApiVersion           string\n    GoVersion            string\n    OperatingSystem      string\n    Architecture         string\n    CurrentContainerID   string\n}\n\n// Host environment variables accessible from root in templates as .Env\n```\n\nFor example, this is a JSON version of an emitted RuntimeContainer struct:\n\n```json\n{\n  \"ID\": \"71e9768075836eb38557adcfc71a207386a0c597dbeda240cf905df79b18cebf\",\n  \"Addresses\": [\n    {\n      \"IP\": \"172.17.0.4\",\n      \"Port\": \"22\",\n      \"Proto\": \"tcp\",\n      \"HostIP\": \"192.168.10.24\",\n      \"HostPort\": \"2222\"\n    }\n  ],\n  \"Gateway\": \"172.17.42.1\",\n  \"Node\": {\n    \"ID\": \"I2VY:P7PF:TZD5:PGWB:QTI7:QDSP:C5UD:DYKR:XKKK:TRG2:M2BL:DFUN\",\n    \"Name\": \"docker-test\",\n    \"Address\": {\n      \"IP\": \"192.168.10.24\"\n    }\n  },\n  \"Labels\": {\n    \"operatingsystem\": \"Ubuntu 14.04.2 LTS\",\n    \"storagedriver\": \"devicemapper\",\n    \"anything_foo\": \"something_bar\"\n  },\n  \"IP\": \"172.17.0.4\",\n  \"Name\": \"docker_register\",\n  \"Hostname\": \"71e976807583\",\n  \"Image\": {\n    \"Registry\": \"jwilder\",\n    \"Repository\": \"docker-register\"\n  },\n  \"Env\": {\n    \"ETCD_HOST\": \"172.17.42.1:4001\",\n    \"PATH\": \"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n    \"DOCKER_HOST\": \"unix:///var/run/docker.sock\",\n    \"HOST_IP\": \"172.17.42.1\"\n  },\n  \"Volumes\": {\n    \"/mnt\": {\n      \"Path\": \"/mnt\",\n      \"HostPath\": \"/Users/joebob/tmp\",\n      \"ReadWrite\": true\n    }\n  }\n}\n```\n\n#### Functions\n\n- [Functions from Go](https://pkg.go.dev/text/template#hdr-Functions)\n- [Functions from Sprig v3](https://masterminds.github.io/sprig/), except for those that have the same name as one of the following functions.\n- _`closest $array $value`_: Returns the longest matching substring in `$array` that matches `$value`\n- _`coalesce ...`_: Returns the first non-nil argument.\n- _`comment $delimiter $string`_: Returns `$string` with each line prefixed by `$delimiter` (helpful for debugging combined with Sprig `toPrettyJson`: `{{ toPrettyJson $ | comment \"#\" }}`).\n- _`contains $map $key`_: Returns `true` if `$map` contains `$key`. Takes maps from `string` to any type.\n- _`dir $path`_: Returns an array of filenames in the specified `$path`.\n- _`exists $path`_: Returns `true` if `$path` refers to an existing file or directory. Takes a string.\n- _`eval $templateName [$data]`_: Evaluates the named template like Go's built-in `template` action, but instead of writing out the result it returns the result as a string so that it can be post-processed. The `$data` argument may be omitted, which is equivalent to passing `nil`.\n- _`groupBy $containers $fieldPath`_: Groups an array of `RuntimeContainer` instances based on the values of a field path expression `$fieldPath`. A field path expression is a dot-delimited list of map keys or struct member names specifying the path from container to a nested value, which must be a string. Returns a map from the value of the field path expression to an array of containers having that value. Containers that do not have a value for the field path in question are omitted.\n- _`groupByWithDefault $containers $fieldPath $defaultValue`_: Returns the same as `groupBy`, but containers that do not have a value for the field path are instead included in the map under the `$defaultValue` key.\n- _`groupByKeys $containers $fieldPath`_: Returns the same as `groupBy` but only returns the keys of the map.\n- _`groupByMulti $containers $fieldPath $sep`_: Like `groupBy`, but the string value specified by `$fieldPath` is first split by `$sep` into a list of strings. A container whose `$fieldPath` value contains a list of strings will show up in the map output under each of those strings.\n- _`groupByLabel $containers $label`_: Returns the same as `groupBy` but grouping by the given label's value. Containers that do not have the `$label` set are omitted.\n- _`groupByLabelWithDefault $containers $label $defaultValue`_: Returns the same as `groupBy` but grouping by the given label's value. Containers that do not have the `$label` set are included in the map under the `$defaultValue` key.\n- _`include $file`_: Returns content of `$file`, and empty string if file reading error.\n- _`intersect $slice1 $slice2`_: Returns the strings that exist in both string slices.\n- _`fromYaml $string` / `mustFromYaml $string`_: Similar to [Sprig's `fromJson` / `mustFromJson`](https://github.com/Masterminds/sprig/blob/master/docs/defaults.md#fromjson-mustfromjson), but for YAML.\n- _`toYaml $dict` / `mustToYaml $dict`_: Similar to [Sprig's `toJson` / `mustToJson`](https://github.com/Masterminds/sprig/blob/master/docs/defaults.md#tojson-musttojson), but for YAML.\n- _`keys $map`_: Returns the keys from `$map`. If `$map` is `nil`, a `nil` is returned. If `$map` is not a `map`, an error will be thrown.\n- _`sortStringsAsc $strings`_: Returns a slice of strings `$strings` sorted in ascending order.\n- _`sortStringsDesc $strings`_: Returns a slice of strings `$strings` sorted in descending (reverse) order.\n- _`sortObjectsByKeysAsc $objects $fieldPath`_: Returns the array `$objects`, sorted in ascending order based on the values of a field path expression `$fieldPath`.\n- _`sortObjectsByKeysDesc $objects $fieldPath`_: Returns the array `$objects`, sorted in descending (reverse) order based on the values of a field path expression `$fieldPath`.\n- _`when $condition $trueValue $falseValue`_: Returns the `$trueValue` when the `$condition` is `true` and the `$falseValue` otherwise\n- _`where $items $fieldPath $value`_: Filters an array or slice based on the values of a field path expression `$fieldPath`. A field path expression is a dot-delimited list of map keys or struct member names specifying the path from container to a nested value. Returns an array of items having that value.\n- _`whereNot $items $fieldPath $value`_: Filters an array or slice based on the values of a field path expression `$fieldPath`. A field path expression is a dot-delimited list of map keys or struct member names specifying the path from container to a nested value. Returns an array of items **not** having that value.\n- _`whereExist $items $fieldPath`_: Like `where`, but returns only items where `$fieldPath` exists (is not nil).\n- _`whereNotExist $items $fieldPath`_: Like `where`, but returns only items where `$fieldPath` does not exist (is nil).\n- _`whereAny $items $fieldPath $sep $values`_: Like `where`, but the string value specified by `$fieldPath` is first split by `$sep` into a list of strings. The comparison value is a string slice with possible matches. Returns items which OR intersect these values.\n- _`whereAll $items $fieldPath $sep $values`_: Like `whereAny`, except all `$values` must exist in the `$fieldPath`.\n- _`whereLabelExists $containers $label`_: Filters a slice of containers based on the existence of the label `$label`.\n- _`whereLabelDoesNotExist $containers $label`_: Filters a slice of containers based on the non-existence of the label `$label`.\n- _`whereLabelValueMatches $containers $label $pattern`_: Filters a slice of containers based on the existence of the label `$label` with values matching the regular expression `$pattern`.\n\nSprig functions that have the same name as docker-gen function (but different behaviour) are made available with the `sprig` prefix:\n\n- _`sprigCoalesce ...`_: Alias for Sprig's [`coalesce`](https://masterminds.github.io/sprig/defaults.html).\n- _`sprigContains $string $string`_: Alias for Sprig's [`contains`](https://masterminds.github.io/sprig/strings.html).\n- _`sprigDir $path`_: Alias for Sprig's [`dir`](https://masterminds.github.io/sprig/paths.html).\n- _`sprigReplace $old $new $string`_: Alias for Sprig's [`replace`](https://masterminds.github.io/sprig/strings.html).\n- _`sprigSplit $sep $string`_: Alias for Sprig's [`split`](https://masterminds.github.io/sprig/string_slice.html).\n- _`sprigSplitn $sep $count $string\"`_: Alias for Sprig's [`splitn`](https://masterminds.github.io/sprig/string_slice.html).\n\nSome functions are aliases for Go's [`strings`](https://pkg.go.dev/strings) package functions:\n\n- _`parseBool $string`_: Alias for [`strconv.ParseBool`](http://golang.org/pkg/strconv/#ParseBool). Returns the boolean value represented by `$string`. It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False. Any other value returns an error.\n- _`replace $string $old $new $count`_: Alias for [`strings.Replace`](http://golang.org/pkg/strings/#Replace). Replaces up to `$count` occurences of `$old` with `$new` in `$string`.\n- _`split $string $sep`_: Alias for [`strings.Split`](http://golang.org/pkg/strings/#Split). Splits `$string` into a slice of substrings delimited by `$sep`.\n- _`splitN $string $sep $count`_: Alias for [`strings.SplitN`](https://golang.org/pkg/strings/#SplitN). Splits `$string` into a slice of substrings delimited by `$sep`, with number of substrings returned determined by `$count`.\n- _`toLower $string`_: Alias for [`strings.ToLower`](https://pkg.go.dev/strings#ToLower). Replace capital letters in `$string` to lowercase.\n- _`toUpper $string`_: Alias for [`strings.ToUpper`](https://pkg.go.dev/strings#ToUpper). Replace lowercase letters in `$string` to uppercase.\n\nThose have been aliased to Sprig functions with the same behaviour as the original docker-gen function:\n\n- _`json $value`_: Alias for Sprig's [`mustToJson`](https://masterminds.github.io/sprig/defaults.html)\n- _`parseJson $string`_: Alias for Sprig's [`mustFromJson`](https://masterminds.github.io/sprig/defaults.html).\n- _`sha1 $string`_: Alias for Sprig's [`sha1sum`](https://masterminds.github.io/sprig/crypto.html).\n\n---\n\n### Examples\n\n- [Automated Nginx Reverse Proxy for Docker](http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/)\n- [Docker Log Management With Fluentd](http://jasonwilder.com/blog/2014/03/17/docker-log-management-using-fluentd/)\n- [Docker Service Discovery Using Etcd and Haproxy](http://jasonwilder.com/blog/2014/07/15/docker-service-discovery/)\n\n#### NGINX Reverse Proxy Config\n\n[nginxproxy/nginx-proxy](https://hub.docker.com/r/nginxproxy/nginx-proxy) trusted build.\n\nStart nginx-proxy:\n\n```console\ndocker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock -t nginxproxy/nginx-proxy\n```\n\nThen start containers with a VIRTUAL_HOST (and the VIRTUAL_PORT if more than one port is exposed) env variable:\n\n```console\ndocker run -e VIRTUAL_HOST=foo.bar.com -e VIRTUAL_PORT=80 -t ...\n```\n\nIf you wanted to run docker-gen directly on the host, you could do it with:\n\n```console\ndocker-gen -only-published -watch -notify \"/etc/init.d/nginx reload\" templates/nginx.tmpl /etc/nginx/sites-enabled/default\n```\n\n#### Fluentd Log Management\n\nThis template generate a fluentd.conf file used by fluentd. It would then ship log files off\nthe host.\n\n```console\ndocker-gen -watch -notify \"restart fluentd\" templates/fluentd.tmpl /etc/fluent/fluent.conf\n```\n\n#### Service Discovery in Etcd\n\nThis template is an example of generating a script that is then executed. This template generates\na python script that is then executed which register containers in Etcd using its HTTP API.\n\n```console\ndocker-gen -notify \"/bin/bash /tmp/etcd.sh\" -interval 10 templates/etcd.tmpl /tmp/etcd.sh\n```\n\n### Development\n\nThis project uses [Go Modules](https://golang.org/ref/mod) for managing 3rd party dependencies.\nThis means that at least `go 1.11` is required.\n\nFor `go 1.11` and `go 1.12` it is additionally required to manually enable support by setting `GO111MODULE=on`.\nFor later versions, this is not required.\n\n```console\ngit clone <your fork>\ncd <your fork>\nmake get-deps\nmake\n```\n\n### Powered by \n\n[![GoLand logo](https://resources.jetbrains.com/storage/products/company/brand/logos/GoLand_icon.svg)](https://www.jetbrains.com/go/)\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.0244140625,
          "content": "module github.com/nginx-proxy/docker-gen\n\ngo 1.22.0\n\nrequire (\n\tgithub.com/BurntSushi/toml v1.3.2\n\tgithub.com/Masterminds/sprig/v3 v3.3.0\n\tgithub.com/fsouza/go-dockerclient v1.12.0\n\tgithub.com/stretchr/testify v1.10.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tdario.cat/mergo v1.0.1 // indirect\n\tgithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 // indirect\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/semver/v3 v3.3.0 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.2 // indirect\n\tgithub.com/containerd/log v0.1.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/docker/docker v27.1.2+incompatible // indirect\n\tgithub.com/docker/go-connections v0.4.0 // indirect\n\tgithub.com/docker/go-units v0.5.0 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/gorilla/mux v1.8.1 // indirect\n\tgithub.com/huandu/xstrings v1.5.0 // indirect\n\tgithub.com/klauspost/compress v1.15.9 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/moby/docker-image-spec v1.3.1 // indirect\n\tgithub.com/moby/patternmatcher v0.6.0 // indirect\n\tgithub.com/moby/sys/sequential v0.5.0 // indirect\n\tgithub.com/moby/sys/user v0.1.0 // indirect\n\tgithub.com/moby/sys/userns v0.1.0 // indirect\n\tgithub.com/moby/term v0.0.0-20210619224110-3f7ff695adc6 // indirect\n\tgithub.com/morikuni/aec v1.0.0 // indirect\n\tgithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.1.0-rc2.0.20221005185240-3a7f492d3f1b // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/shopspring/decimal v1.4.0 // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/spf13/cast v1.7.0 // indirect\n\tgolang.org/x/crypto v0.31.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 12.8828125,
          "content": "dario.cat/mergo v1.0.1 h1:Ra4+bf83h2ztPIQYNP99R6m+Y7KfnARDfID+a+vLl4s=\ndario.cat/mergo v1.0.1/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20210715213245-6c3934b029d8 h1:V8krnnfGj4pV65YLUm3C0/8bl7V5Nry2Pwvy3ru/wLc=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20210715213245-6c3934b029d8/go.mod h1:CzsSbkDixRphAF5hS6wbMKq0eI6ccJRb7/A0M6JBnwg=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 h1:UQHMgLO+TxOElx5B5HZ4hJQsoJ/PvUvKRhJHDQXO8P8=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=\ngithub.com/BurntSushi/toml v1.3.2 h1:o7IhLm0Msx3BaB+n3Ag7L8EVlByGnpq14C4YWiu/gL8=\ngithub.com/BurntSushi/toml v1.3.2/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=\ngithub.com/Masterminds/goutils v1.1.1 h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=\ngithub.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=\ngithub.com/Masterminds/semver/v3 v3.3.0 h1:B8LGeaivUe71a5qox1ICM/JLl0NqZSW5CHyL+hmvYS0=\ngithub.com/Masterminds/semver/v3 v3.3.0/go.mod h1:4V+yj/TJE1HU9XfppCwVMZq3I84lprf4nC11bSS5beM=\ngithub.com/Masterminds/sprig/v3 v3.3.0 h1:mQh0Yrg1XPo6vjYXgtf5OtijNAKJRNcTdOOGZe3tPhs=\ngithub.com/Masterminds/sprig/v3 v3.3.0/go.mod h1:Zy1iXRYNqNLUolqCpL4uhk6SHUMAOSCzdgBfDb35Lz0=\ngithub.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=\ngithub.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=\ngithub.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=\ngithub.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=\ngithub.com/creack/pty v1.1.11 h1:07n33Z8lZxZ2qwegKbObQohDhXDQxiMMz1NOUGYlesw=\ngithub.com/creack/pty v1.1.11/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/docker/docker v27.1.2+incompatible h1:AhGzR1xaQIy53qCkxARaFluI00WPGtXn0AJuoQsVYTY=\ngithub.com/docker/docker v27.1.2+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=\ngithub.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=\ngithub.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\ngithub.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/fsouza/go-dockerclient v1.12.0 h1:S2f2crEUbBNCFiF06kR/GvioEB8EMsb3Td/bpawD+aU=\ngithub.com/fsouza/go-dockerclient v1.12.0/go.mod h1:YWUtjg8japrqD/80L98nTtCoxQFp5B5wrSsnyeB5lFo=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=\ngithub.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=\ngithub.com/huandu/xstrings v1.5.0 h1:2ag3IFq9ZDANvthTwTiqSSZLjDc+BedvHPAp5tJy2TI=\ngithub.com/huandu/xstrings v1.5.0/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/klauspost/compress v1.15.9 h1:wKRjX6JRtDdrE9qwa4b/Cip7ACOshUI4smpCQanqjSY=\ngithub.com/klauspost/compress v1.15.9/go.mod h1:PhcZ0MbTNciWF3rruxRgKxI5NkcHHrHUDtV4Yw2GlzU=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=\ngithub.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=\ngithub.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=\ngithub.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/moby/docker-image-spec v1.3.1 h1:jMKff3w6PgbfSa69GfNg+zN/XLhfXJGnEx3Nl2EsFP0=\ngithub.com/moby/docker-image-spec v1.3.1/go.mod h1:eKmb5VW8vQEh/BAr2yvVNvuiJuY6UIocYsFu/DxxRpo=\ngithub.com/moby/patternmatcher v0.6.0 h1:GmP9lR19aU5GqSSFko+5pRqHi+Ohk1O69aFiKkVGiPk=\ngithub.com/moby/patternmatcher v0.6.0/go.mod h1:hDPoyOpDY7OrrMDLaYoY3hf52gNCR/YOUYxkhApJIxc=\ngithub.com/moby/sys/sequential v0.5.0 h1:OPvI35Lzn9K04PBbCLW0g4LcFAJgHsvXsRyewg5lXtc=\ngithub.com/moby/sys/sequential v0.5.0/go.mod h1:tH2cOOs5V9MlPiXcQzRC+eEyab644PWKGRYaaV5ZZlo=\ngithub.com/moby/sys/user v0.1.0 h1:WmZ93f5Ux6het5iituh9x2zAG7NFY9Aqi49jjE1PaQg=\ngithub.com/moby/sys/user v0.1.0/go.mod h1:fKJhFOnsCN6xZ5gSfbM6zaHGgDJMrqt9/reuj4T7MmU=\ngithub.com/moby/sys/userns v0.1.0 h1:tVLXkFOxVu9A64/yh59slHVv9ahO9UIev4JZusOLG/g=\ngithub.com/moby/sys/userns v0.1.0/go.mod h1:IHUYgu/kao6N8YZlp9Cf444ySSvCmDlmzUcYfDHOl28=\ngithub.com/moby/term v0.0.0-20210619224110-3f7ff695adc6 h1:dcztxKSvZ4Id8iPpHERQBbIJfabdt4wUm5qy3wOL2Zc=\ngithub.com/moby/term v0.0.0-20210619224110-3f7ff695adc6/go.mod h1:E2VnQOmVuvZB6UYnnDB0qG5Nq/1tD9acaOpo6xmt0Kw=\ngithub.com/morikuni/aec v1.0.0 h1:nP9CBfwrvYnBRgY6qfDQkygYDmYwOilePFkwzv4dU8A=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e h1:fD57ERR4JtEqsWbfPhv4DMiApHyliiK5xCTNVSPiaAs=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.1.0-rc2.0.20221005185240-3a7f492d3f1b h1:YWuSjZCQAPM8UUBLkYUk1e+rZcvWHJmFb6i6rM44Xs8=\ngithub.com/opencontainers/image-spec v1.1.0-rc2.0.20221005185240-3a7f492d3f1b/go.mod h1:3OVijpioIKYWTqjiG0zfF6wvoJ4fAXGbjdZuI2NgsRQ=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp81k=\ngithub.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/spf13/cast v1.7.0 h1:ntdiHjuueXFgm5nzDRdOS4yfT43P5Fnud6DH50rz/7w=\ngithub.com/spf13/cast v1.7.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f h1:BLraFXnmrev5lT+xlilqcH8XK9/i0At2xKjWk4p6zsU=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=\ngotest.tools/v3 v3.5.0 h1:Ljk6PdHdOhAb5aDMWXjDLMMhph+BpztA4v1QdqEW2eY=\ngotest.tools/v3 v3.5.0/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}