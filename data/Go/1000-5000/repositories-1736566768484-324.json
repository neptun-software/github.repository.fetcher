{
  "metadata": {
    "timestamp": 1736566768484,
    "page": 324,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mingrammer/go-web-framework-stars",
      "stars": 3613,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": "access_token.txt\n"
        },
        {
          "name": "CONTRIBUTORS.txt",
          "type": "blob",
          "size": 0.4794921875,
          "content": "Frank Mueller (2):\n      Added three Tideland projects\n      Removed non-web Tideland projects\n\nGeon Kim (1):\n      Update lists.txt\n\nIvan Porto Carrero (1):\n      Update list.txt\n\nKamaleshwar (1):\n      Added webgo to the list.\n\nOlivier Poitrey (1):\n      Add rest-layer\n\nRob Warner (1):\n      Add Go kit\n\nTom Maiaroto (1):\n      aegis is a lightweight serverless web framework\n\nYasuhiro Matsumoto (2):\n      check response status code\n      add Open Issues\n\ndevfeel (1):\n      add dotweb\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2017 mingrammer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.83984375,
          "content": "# Top Go Web Frameworks\nA list of popular github projects related to Go web framework (ranked by stars automatically)\nPlease update **list.txt** (via Pull Request)\n\n| Project Name | Stars | Forks | Open Issues | Description | Last Commit |\n| ------------ | ----- | ----- | ----------- | ----------- | ----------- |\n| [gin](https://github.com/gin-gonic/gin) | 79729 | 8066 | 828 | Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance -- up to 40 times faster. If you need smashing performance, get yourself some Gin. | 2024-12-30 03:40:37 |\n| [fiber](https://github.com/gofiber/fiber) | 34524 | 1692 | 97 | ‚ö°Ô∏è Express inspired web framework written in Go | 2025-01-03 07:36:58 |\n| [beego](https://github.com/beego/beego) | 31743 | 5626 | 11 | beego is an open-source, high-performance web framework for the Go programming language. | 2025-01-01 02:25:23 |\n| [echo](https://github.com/labstack/echo) | 30231 | 2230 | 75 | High performance, minimalist Go web framework | 2024-12-19 04:51:34 |\n| [go-zero](https://github.com/zeromicro/go-zero) | 29613 | 4005 | 346 | A cloud-native Go microservices framework with cli tool for productivity. | 2025-01-04 04:17:10 |\n| [kit](https://github.com/go-kit/kit) | 26719 | 2441 | 55 | A standard library for microservices. | 2024-03-13 13:42:15 |\n| [kratos](https://github.com/go-kratos/kratos) | 23557 | 4027 | 130 | Your ultimate Go microservices framework for the cloud-native era. | 2024-12-19 09:32:11 |\n| [fasthttp](https://github.com/valyala/fasthttp) | 22064 | 1766 | 100 | Fast HTTP package for Go. Tuned for high performance. Zero memory allocations in hot paths. Up to 10x faster than net/http | 2025-01-02 23:05:43 |\n| [mux](https://github.com/gorilla/mux) | 21024 | 1854 | 29 | Package gorilla/mux is a powerful HTTP router and URL matcher for building Go web servers with ü¶ç | 2024-06-19 23:50:04 |\n| [chi](https://github.com/go-chi/chi) | 18886 | 998 | 76 | lightweight, idiomatic and composable router for building Go HTTP services | 2024-12-14 17:06:53 |\n| [httprouter](https://github.com/julienschmidt/httprouter) | 16688 | 1472 | 81 | A high performance HTTP request router that scales well | 2024-01-30 10:56:56 |\n| [revel](https://github.com/revel/revel) | 13150 | 1389 | 101 | A high productivity, full-stack web framework for the Go language. | 2022-04-12 20:53:30 |\n| [micro](https://github.com/micro/micro) | 12177 | 1053 | 0 | An API first development platform  | 2024-12-12 09:33:04 |\n| [gf](https://github.com/gogf/gf) | 11877 | 1616 | 128 | A powerful framework for faster, easier, and more efficient project development. | 2024-12-26 10:18:35 |\n| [martini](https://github.com/go-martini/martini) | 11626 | 1104 | 15 | ‚ö†Ô∏è No longer maintained ‚ö†Ô∏è  Classy web framework for Go | 2017-01-21 21:58:54 |\n| [go-swagger](https://github.com/go-swagger/go-swagger) | 9603 | 1262 | 601 | Swagger 2.0 implementation for go | 2024-11-07 04:05:23 |\n| [encore](https://github.com/encoredev/encore) | 8453 | 350 | 100 | Open Source Development Platform for building robust type-safe distributed systems with declarative infrastructure | 2024-12-20 15:12:41 |\n| [buffalo](https://github.com/gobuffalo/buffalo) | 8096 | 579 | 24 | Rapid Web Development w/ Go | 2023-01-26 15:34:17 |\n| [kitex](https://github.com/cloudwego/kitex) | 7166 | 827 | 58 | Go RPC framework with high-performance and strong-extensibility for building micro-services. | 2025-01-03 07:44:49 |\n| [goa](https://github.com/goadesign/goa) | 5734 | 564 | 19 | üåü Goa: Elevate Go API development! üöÄ Streamlined design, automatic code generation, and seamless HTTP/gRPC support. ‚ú® | 2024-12-17 17:57:29 |\n| [ponzu](https://github.com/ponzu-cms/ponzu) | 5709 | 386 | 35 | Headless CMS with automatic JSON API. Featuring auto-HTTPS from Let's Encrypt, HTTP/2 Server Push, and flexible server framework written in Go. | 2020-01-02 00:14:32 |\n| [hertz](https://github.com/cloudwego/hertz) | 5695 | 544 | 69 | Go HTTP framework with high-performance and strong-extensibility for building micro-services. | 2025-01-03 08:42:50 |\n| [go-restful](https://github.com/emicklei/go-restful) | 5055 | 690 | 5 | package for building REST-style Web Services using Go | 2024-12-18 12:07:45 |\n| [gofr](https://github.com/gofr-dev/gofr) | 3889 | 273 | 54 | An opinionated GoLang framework for accelerated microservice development. Built in support for databases and observability. | 2025-01-03 06:44:58 |\n| [gizmo](https://github.com/nytimes/gizmo) | 3766 | 222 | 33 | A Microservice Toolkit from The New York Times | 2021-04-30 15:27:05 |\n| [macaron](https://github.com/go-macaron/macaron) | 3517 | 285 | 8 | Package macaron is a high productive and modular web framework in Go. | 2024-12-16 02:35:38 |\n| [go-json-rest](https://github.com/ant0ine/go-json-rest) | 3507 | 383 | 47 | A quick and easy way to setup a RESTful JSON API | 2017-09-13 04:12:08 |\n| [armor](https://github.com/labstack/armor) | 1661 | 64 | 21 | Uncomplicated, modern HTTP server | 2019-08-03 18:10:09 |\n| [goyave](https://github.com/go-goyave/goyave) | 1649 | 70 | 8 | üçê The enterprise REST API framework | 2024-12-12 08:52:06 |\n| [web](https://github.com/gocraft/web) | 1509 | 125 | 24 | Go Router + Middleware. Your Contexts. | 2019-02-07 15:06:52 |\n| [dotweb](https://github.com/devfeel/dotweb) | 1388 | 180 | 20 | Simple and easy go web micro framework | 2023-12-13 02:13:17 |\n| [rest-layer](https://github.com/rs/rest-layer) | 1255 | 114 | 36 | REST Layer, Go (golang) REST API framework | 2021-09-30 23:58:01 |\n| [goji](https://github.com/goji/goji) | 968 | 72 | 6 | Goji is a minimalistic and flexible HTTP request multiplexer for Go (golang) | 2019-01-26 23:58:29 |\n| [copper](https://github.com/gocopper/copper) | 943 | 31 | 4 | üöÄ‚Äè‚Äè‚Äé    ‚Äé‚Äè‚Äè‚Äé‚Äè‚Äè‚Äé‚Äé‚Äé‚Äé‚Äé‚ÄéCopper is a Go toolkit complete with everything you need to build web apps. | 2024-06-04 14:59:15 |\n| [tango](https://github.com/lunny/tango) | 828 | 109 | 9 | This is only a mirror and Moved to https://gitea.com/lunny/tango | 2019-05-17 03:31:10 |\n| [gearbox](https://github.com/gogearbox/gearbox) | 763 | 54 | 3 | Gearbox :gear: is a web framework written in Go with a focus on high performance | 2022-09-21 00:20:37 |\n| [aah](https://github.com/go-aah/aah) | 689 | 33 | 19 | A secure, flexible, rapid Go web framework | 2020-09-02 02:31:20 |\n| [yoyogo](https://github.com/yoyofx/yoyogo) | 584 | 43 | 10 | ü¶Ñüåà YoyoGo is a simple, light and fast , dependency injection based micro-service framework written in Go. Support Nacos ,Consoul ,Etcd ,Eureka ,kubernetes. | 2024-02-07 09:13:19 |\n| [traffic](https://github.com/gravityblast/traffic) | 522 | 34 | 1 | Sinatra inspired regexp/pattern mux and web framework for Go | 2015-11-26 21:31:07 |\n| [flamingo](https://github.com/i-love-flamingo/flamingo) | 491 | 54 | 34 | Flamingo Framework and Core Library. Flamingo is a go based framework to build pluggable applications. Focus is on clean architecture, maintainability and operation readiness. | 2024-12-12 15:17:47 |\n| [neo](https://github.com/ivpusic/neo) | 421 | 43 | 6 | Go Web Framework | 2017-08-14 23:54:31 |\n| [gramework](https://github.com/gramework/gramework) | 387 | 38 | 17 | Fast and Reliable Golang Web Framework | 2023-10-27 14:01:05 |\n| [webgo](https://github.com/naughtygopher/webgo) | 304 | 31 | 2 | A microframework to build web apps; with handler chaining, middleware support, and most of all; standard library compliant HTTP handlers(i.e. http.HandlerFunc). | 2024-10-20 08:43:36 |\n| [aegis](https://github.com/tmaiaroto/aegis) | 284 | 16 | 8 | Serverless Golang deploy tool and framework for AWS Lambda | 2019-07-28 17:59:41 |\n| [gorouter](https://github.com/vardius/gorouter) | 155 | 17 | 9 | Go Server/API micro framework, HTTP request router, multiplexer, mux | 2024-09-05 02:45:54 |\n| [gorest](https://github.com/tideland/gorest) | 34 | 6 | 3 | RESTful Server Systems [DEPRECATED] | 2017-11-10 13:00:37 |\n\n*Last Automatic Update: 2025-01-05T01:11:58Z*"
        },
        {
          "name": "list.txt",
          "type": "blob",
          "size": 1.552734375,
          "content": "https://github.com/beego/beego\nhttps://github.com/gobuffalo/buffalo\nhttps://github.com/labstack/echo\nhttps://github.com/gofiber/fiber\nhttps://github.com/gin-gonic/gin\nhttps://github.com/NYTimes/gizmo\nhttps://github.com/ant0ine/go-json-rest\nhttps://github.com/goadesign/goa\nhttps://github.com/go-macaron/macaron\nhttps://github.com/revel/revel\nhttps://github.com/go-martini/martini\nhttps://github.com/gorilla/mux\nhttps://github.com/goji/goji\nhttps://github.com/gocraft/web\nhttps://github.com/pilu/traffic\nhttps://github.com/lunny/tango\nhttps://github.com/emicklei/go-restful\nhttps://github.com/go-chi/chi\nhttps://github.com/julienschmidt/httprouter\nhttps://github.com/ivpusic/neo\nhttps://github.com/valyala/fasthttp\nhttps://github.com/tideland/gorest\nhttps://github.com/bnkamalesh/webgo\nhttps://github.com/go-swagger/go-swagger\nhttps://github.com/labstack/armor\nhttps://github.com/devfeel/dotweb\nhttps://github.com/go-kit/kit\nhttps://github.com/tmaiaroto/aegis\nhttps://github.com/rs/rest-layer\nhttps://github.com/vardius/gorouter\nhttps://github.com/go-aah/aah\nhttps://github.com/ponzu-cms/ponzu\nhttps://github.com/gramework/gramework\nhttps://github.com/johng-cn/gf\nhttps://github.com/tusharsoni/copper\nhttps://github.com/micro/micro\nhttps://github.com/go-goyave/goyave\nhttps://github.com/abahmed/gearbox\nhttps://github.com/yoyofx/yoyogo\nhttps://github.com/go-kratos/kratos\nhttps://github.com/tal-tech/go-zero\nhttps://github.com/i-love-flamingo/flamingo\nhttps://github.com/cloudwego/kitex\nhttps://github.com/cloudwego/hertz\nhttps://github.com/encoredev/encore\nhttps://github.com/gofr-dev/gofr\n"
        },
        {
          "name": "list2md.go",
          "type": "blob",
          "size": 4.3349609375,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"sort\"\n\t\"strings\"\n\t\"time\"\n\t\"unicode\"\n)\n\n// Repo describes a Github repository with additional field, last commit date\ntype Repo struct {\n\tName           string    `json:\"name\"`\n\tDescription    string    `json:\"description\"`\n\tDefaultBranch  string    `json:\"default_branch\"`\n\tStars          int       `json:\"stargazers_count\"`\n\tForks          int       `json:\"forks_count\"`\n\tIssues         int       `json:\"open_issues_count\"`\n\tCreated        time.Time `json:\"created_at\"`\n\tUpdated        time.Time `json:\"updated_at\"`\n\tURL            string    `json:\"html_url\"`\n\tLastCommitDate time.Time `json:\"-\"`\n}\n\n// HeadCommit describes a head commit of default branch\ntype HeadCommit struct {\n\tSha    string `json:\"sha\"`\n\tCommit struct {\n\t\tCommitter struct {\n\t\t\tName  string    `json:\"name\"`\n\t\t\tEmail string    `json:\"email\"`\n\t\t\tDate  time.Time `json:\"date\"`\n\t\t} `json:\"committer\"`\n\t} `json:\"commit\"`\n}\n\nconst (\n\thead = `# Top Go Web Frameworks\nA list of popular github projects related to Go web framework (ranked by stars automatically)\nPlease update **list.txt** (via Pull Request)\n\n| Project Name | Stars | Forks | Open Issues | Description | Last Commit |\n| ------------ | ----- | ----- | ----------- | ----------- | ----------- |\n`\n\ttail = \"\\n*Last Automatic Update: %v*\"\n\n\twarning = \"‚ö†Ô∏è No longer maintained ‚ö†Ô∏è  \"\n)\n\nvar (\n\tdeprecatedRepos = [3]string{\"https://github.com/go-martini/martini\", \"https://github.com/pilu/traffic\"}\n\trepos           []Repo\n)\n\nfunc main() {\n\taccessToken := getAccessToken()\n\n\tbyteContents, err := ioutil.ReadFile(\"list.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tlines := strings.Split(string(byteContents), \"\\n\")\n\tfor _, url := range lines {\n\t\tif strings.HasPrefix(url, \"https://github.com/\") {\n\t\t\tvar repo Repo\n\t\t\tvar commit HeadCommit\n\n\t\t\trepoAPI := fmt.Sprintf(\n\t\t\t\t\"https://api.github.com/repos/%s\",\n\t\t\t\tstrings.TrimFunc(url[19:], trimSpaceAndSlash),\n\t\t\t)\n\t\t\tfmt.Println(repoAPI)\n\n\t\t\treq, err := http.NewRequest(http.MethodGet, repoAPI, nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\treq.Header.Set(\"authorization\", fmt.Sprintf(\"Bearer %s\", accessToken))\n\n\t\t\tresp, err := http.DefaultClient.Do(req)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\tif resp.StatusCode != 200 {\n\t\t\t\tlog.Fatal(resp.Status)\n\t\t\t}\n\n\t\t\tdecoder := json.NewDecoder(resp.Body)\n\t\t\tif err = decoder.Decode(&repo); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\n\t\t\tcommitAPI := fmt.Sprintf(\n\t\t\t\t\"https://api.github.com/repos/%s/commits/%s\",\n\t\t\t\tstrings.TrimFunc(url[19:], trimSpaceAndSlash),\n\t\t\t\trepo.DefaultBranch,\n\t\t\t)\n\t\t\tfmt.Println(commitAPI)\n\n\t\t\treq, err = http.NewRequest(http.MethodGet, commitAPI, nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\treq.Header.Set(\"authorization\", fmt.Sprintf(\"Bearer %s\", accessToken))\n\n\t\t\tresp, err = http.DefaultClient.Do(req)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\tif resp.StatusCode != 200 {\n\t\t\t\tlog.Fatal(resp.Status)\n\t\t\t}\n\n\t\t\tdecoder = json.NewDecoder(resp.Body)\n\t\t\tif err = decoder.Decode(&commit); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\n\t\t\trepo.LastCommitDate = commit.Commit.Committer.Date\n\t\t\trepos = append(repos, repo)\n\n\t\t\tfmt.Printf(\"Repository: %v\\n\", repo)\n\t\t\tfmt.Printf(\"Head Commit: %v\\n\", commit)\n\n\t\t\ttime.Sleep(3 * time.Second)\n\t\t}\n\t}\n\n\tsort.Slice(repos, func(i, j int) bool {\n\t\treturn repos[i].Stars > repos[j].Stars\n\t})\n\tsaveRanking(repos)\n}\n\nfunc trimSpaceAndSlash(r rune) bool {\n\treturn unicode.IsSpace(r) || (r == rune('/'))\n}\n\nfunc getAccessToken() string {\n\ttokenBytes, err := ioutil.ReadFile(\"access_token.txt\")\n\tif err != nil {\n\t\tlog.Fatal(\"Error occurs when getting access token\")\n\t}\n\treturn strings.TrimSpace(string(tokenBytes))\n}\n\nfunc saveRanking(repos []Repo) {\n\treadme, err := os.OpenFile(\"README.md\", os.O_RDWR|os.O_TRUNC, 0666)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer readme.Close()\n\treadme.WriteString(head)\n\tfor _, repo := range repos {\n\t\tif isDeprecated(repo.URL) {\n\t\t\trepo.Description = warning + repo.Description\n\t\t}\n\t\treadme.WriteString(fmt.Sprintf(\"| [%s](%s) | %d | %d | %d | %s | %v |\\n\", repo.Name, repo.URL, repo.Stars, repo.Forks, repo.Issues, repo.Description, repo.LastCommitDate.Format(\"2006-01-02 15:04:05\")))\n\t}\n\treadme.WriteString(fmt.Sprintf(tail, time.Now().Format(time.RFC3339)))\n}\n\nfunc isDeprecated(repoURL string) bool {\n\tfor _, deprecatedRepo := range deprecatedRepos {\n\t\tif repoURL == deprecatedRepo {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"
        }
      ]
    }
  ]
}