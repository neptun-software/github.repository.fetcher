{
  "metadata": {
    "timestamp": 1736566829306,
    "page": 397,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DisposaBoy/GoSublime",
      "stars": 3419,
      "defaultBranch": "development",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.041015625,
          "content": "_before.py\n_after.py\nbin/**\npkg/**\n!.keep\n"
        },
        {
          "name": ".no-sublime-package",
          "type": "blob",
          "size": 0.0009765625,
          "content": "\n"
        },
        {
          "name": "9o.md",
          "type": "blob",
          "size": 5.048828125,
          "content": "9o is GoSublime's command-shell, press `ctrl+9` or `super+9` activate it.\n\nIt has two basic concepts: commands and actions.\n\nCommands\n========\n\nType `# ` (hash/number sign/pound sign [space]) to begin a command sequence e.g. `# help`', then press enter to execute it.\n\nActions\n=======\n\nFilename and other actionable text are highlighted (usually bold).\nPlace the cursor over these areas and press `ctrl+dot`,`ctrl+g`' (or `super+dot`,`super+g` on OS X) to open the corresponding file.\nAlternatively, press `ctrl+shift`', (or `super+shift` on OS X) and left-click.\n\nCommand modes\n=============\n\n9o has two command modes: `sh` and `9o`.\n\nIn `sh` mode your commands are passed as-is without interpretation directly to your shell.\ne.g. you might want to use special features of your shell like piping (`sh echo 123 | filter-cmd`)\n\nFor all other commands, the command line is split by spaces, taking quoted args into consideration\nand then environment variables in each argument are expanded (as well as `~/` which\nis short-hand for your `$HOME` directory) and then the command is executed.\n\nIf the command is not found(not a 9o builtin), it's treated as-if it was run via `sh`\n\nEnvironment Variables\n=====================\n\nIn `9o` mode, environment variables of the form `$NAME` and `${NAME}` are supported.\n\nThe following variables are defined for each command you execute. These will override any variable\nof the same name that might've been inherited from your `shell` or the Sublime Text environment.\nAdditionally, these variables will be defined within the initial environment of all commands executed\nthrough 9o, so they should appear inside commands run through your `shell`. Please be aware that your\nshell might override these variables with its own, epecilly in the case of `$PWD`\n\n* `$_wd` (or `$PWD`): the absolute path to the current working directory\n\n* `$_fn`: the absolute path to the current active file. If the file hasn't been saved, this will be\n          an empty string.\n\n* `$_nm`: the base name of the current active file. If the file hasn't been saved, this will be n empty string\n\n9o's commands\n==================\n\n* help: Present documentation for 9o and its supported commands\n\n* build: build the current package\n\n* run: build the current package. If it's a regular package run its tests otherwise(package main)\n\t\t   execute it. e.g. `run` or `run -flag1 -flag2=abc`\n\n* replay: like `run` but attempts to cancel any active executions before running\n\n* go: run the `go` command e.g. `go help`\n\n* clear: clears the output panel\n\n* tskill: lists or cancels active tasks.\n\ttype `tskill` to show a palette containing a list of active tasks and their summary and cancel them where possible\n\n\ttype `tskill [TASK ID]` to cancel the task. The task is represented by #TASK_ID. (you will be prompted with an ok/cancel dialog to confirm the action)\n\n\t\t[ tskill t1 | done ]\n\t\t\tkill t1: yes\n\n\tthe following aliases can be used in place of task ids:\n\t\t`tskill replay` kill the last instance of the replay command\n\t\t`tskill go` kill the last instance of the go command `go run` etc. note, however that this may fail to actually kill the executable being run by `go run`\n\n* settings: list settings as seen by GoSublime.\n\ttype `settings` to get a listing of all settings.\n\ttype `setting [NAME1] [NAME2] ...` to the value of the listed names\n\n* env: list environment variables as seen/generated by GoSublime.\n\ttype `env` to get a listing of all environment vars usable by GoSublime.\n\ttype `env [NAME1] [NAME2] ...` to the value of the listed names\n\n* share: share the active view's content on play.golang.org\n\n* hist: manage command history\n\ttype `hist` to list all historical commands\n\ttype `hist erase` to erase all historical commands\n\n* cd: change directory\n\ttype `cd` to cd to the directory of the current file (like ctrl+9 does)\n\ttype `cd ~/go` to cd to the `go` directory in your home directory\n\ttype `cd $GOROOT/src/pkg/fmt` to cd the `src/pkg/fmt` in your GOROOT\n\n* which: locate a command\n\ttype `which` to list all builtins\n\ttype `which cmd1 cmd2...` to locate the listed commands\n\n* echo: output the specified arguments\n\ttype `echo $_fn` to output the path to the current file (if it has a name on-disk)\n\nExecuting commands\n==================\n\nWhen you run a command e.g. `replay`, its line is replaced with the command followed by and hour glass\nand a new prompt is initialised. When the command completes a its output is printed and the hour glass\nreplaced with a summary.\n\n\t[ /go ] # replay\n\t\t|\n\t\tv\n\t[ replay ⌛ ]\n\t[ /go ] #\n\t\t|\n\t\tv\n\t[ replay | done: 2.987ms ]\n\t\thello world\n\t[ /go ] #\n\n\nCommand History\n===============\n\nIn the 9o autocompletion menu, old commands are listed in the (reversed) order they were last executed.\nThey are prefixed with a carret(^) e.g. `^1 replay`. In addition to being able to autocomplete them,\nyou can also expand them by their alias(without execution). To do so, type the alias and press [enter] e.g.\n\n\t[ /go ] # ^1\n\nis replaced with:\n\n\t[ /go ] # replay\n\n\nTo expand and execute an old command by its alias, use two carrets e.g.\n\n\t[ /go ] # ^^1\n\nexecutes the last command:\n\n\t[ `replay` | done: 2.557ms ]\n\t\thello world\n\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 0.5693359375,
          "content": "This is the official list of GoSublime authors for copyright purposes.\n\n* Alexey \"AlekSi\" Palazhchenko https://github.com/AlekSi\n* Cameron Walters https://github.com/cee-dub\n* Christoph Hack https://github.com/tux21b\n* Dave Brophy https://github.com/dave\n* dersebi https://github.com/dersebi\n* DisposaBoy https://github.com/DisposaBoy\n* Geert-Johan Riemer https://github.com/GeertJohan\n* guillermooo https://github.com/guillermooo\n* igm https://github.com/igm\n* John Asmuth https://github.com/skelterjohn\n* teejae https://github.com/teejae\n* eddie cianci https://github.com/defeated\n"
        },
        {
          "name": "Ariana.sublime-color-scheme",
          "type": "blob",
          "size": 9.4482421875,
          "content": "{\n    \"name\": \"Ariana\",\n    \"author\": \"DisposaBoy, Sublime HQ Pty Ltd, Dmitri Voronianski\",\n    \"variables\":\n    {\n        \"black\": \"hsl(0, 0%, 0%)\",\n        \"blue\": \"hsl(210, 50%, 60%)\",\n        \"blue2\": \"hsl(215, 33%, 29%)\",\n        \"blue3\": \"hsl(215, 40%, 21%)\",\n        \"blue4\": \"hsl(210, 13%, 45%)\",\n        \"blue5\": \"hsl(180, 36%, 54%)\",\n        \"blue6\": \"hsl(221, 12%, 69%)\",\n        \"green\": \"hsl(114, 31%, 68%)\",\n        \"grey\": \"hsl(0, 0%, 20%)\",\n        \"orange\": \"hsl(32, 93%, 66%)\",\n        \"orange2\": \"hsl(32, 85%, 55%)\",\n        \"orange3\": \"hsl(40, 94%, 68%)\",\n        \"pink\": \"hsl(300, 30%, 68%)\",\n        \"red\": \"hsl(357, 79%, 65%)\",\n        \"red2\": \"hsl(13, 93%, 66%)\",\n        \"white\": \"hsl(0, 0%, 100%)\",\n        \"white2\": \"hsl(0, 0%, 97%)\",\n        \"white3\": \"hsl(219, 28%, 93%)\"\n    },\n    \"globals\":\n    {\n        \"foreground\": \"var(white3)\",\n        \"background\": \"var(blue3)\",\n        \"caret\": \"var(orange)\",\n        \"line_highlight\": \"var(blue2)\",\n        \"selection\": \"var(blue2)\",\n        \"selection_border\": \"var(blue4)\",\n        \"inactive_selection\": \"var(blue2)\",\n        \"misspelling\": \"var(red)\",\n        \"shadow\": \"color(var(black) alpha(0.25))\",\n        \"active_guide\": \"var(blue5)\",\n        \"stack_guide\": \"color(var(blue5) alpha(0.5))\",\n        \"highlight\": \"var(blue5)\",\n        \"find_highlight_foreground\": \"var(grey)\",\n        \"find_highlight\": \"var(orange3)\",\n        \"brackets_options\": \"underline\",\n        \"brackets_foreground\": \"var(orange)\",\n        \"bracket_contents_options\": \"underline\",\n        \"bracket_contents_foreground\": \"var(blue5)\",\n        \"tags_options\": \"stippled_underline\",\n        \"tags_foreground\": \"var(pink)\"\n    },\n    \"rules\":\n    [\n        {\n            \"name\": \"Comment\",\n            \"scope\": \"comment, punctuation.definition.comment\",\n            \"foreground\": \"var(blue6)\"\n        },\n        {\n            \"name\": \"String\",\n            \"scope\": \"string\",\n            \"foreground\": \"var(green)\"\n        },\n        {\n            \"name\": \"Punctuation\",\n            \"scope\": \"punctuation.definition\",\n            \"foreground\": \"var(blue5)\"\n        },\n        {\n            \"name\": \"Number\",\n            \"scope\": \"constant.numeric\",\n            \"foreground\": \"var(orange)\"\n        },\n        {\n            \"name\": \"Built-in constant\",\n            \"scope\": \"constant.language\",\n            \"foreground\": \"var(red)\",\n            \"font_style\": \"italic\"\n        },\n        {\n            \"name\": \"User-defined constant\",\n            \"scope\": \"constant.character, constant.other\",\n            \"foreground\": \"var(pink)\"\n        },\n        {\n            \"name\": \"Member Variable\",\n            \"scope\": \"variable.member\",\n            \"foreground\": \"var(red)\"\n        },\n        {\n            \"name\": \"Keyword\",\n            \"scope\": \"keyword - keyword.operator, keyword.operator.word\",\n            \"foreground\": \"var(pink)\"\n        },\n        {\n            \"name\": \"Operators\",\n            \"scope\": \"keyword.operator\",\n            \"foreground\": \"var(red2)\"\n        },\n        {\n            \"name\": \"Punctuation\",\n            \"scope\": \"punctuation.separator, punctuation.terminator\",\n            \"foreground\": \"var(blue6)\"\n        },\n        {\n            \"name\": \"Punctuation\",\n            \"scope\": \"punctuation.section\",\n            \"foreground\": \"var(white)\"\n        },\n        {\n            \"name\": \"Accessor\",\n            \"scope\": \"punctuation.accessor\",\n            \"foreground\": \"var(blue6)\"\n        },\n        {\n            \"name\": \"Annotation Punctuation\",\n            \"scope\": \"punctuation.definition.annotation\",\n            \"foreground\": \"var(blue5)\"\n        },\n        {\n            \"name\": \"JavaScript Dollar\",\n            \"scope\": \"variable.other.dollar.only.js, variable.other.object.dollar.only.js, variable.type.dollar.only.js, support.class.dollar.only.js\",\n            \"foreground\": \"var(blue5)\"\n        },\n        {\n            \"name\": \"Storage\",\n            \"scope\": \"storage\",\n            \"foreground\": \"var(red)\"\n        },\n        {\n            \"name\": \"Storage type\",\n            \"scope\": \"storage.type\",\n            \"foreground\": \"var(pink)\",\n            \"font_style\": \"italic\"\n        },\n        {\n            \"name\": \"Entity name\",\n            \"scope\": \"entity.name.function\",\n            \"foreground\": \"var(blue5)\"\n        },\n        {\n            \"name\": \"Entity name\",\n            \"scope\": \"entity.name - (entity.name.section | entity.name.tag | entity.name.label)\",\n            \"foreground\": \"var(orange)\"\n        },\n        {\n            \"name\": \"Inherited class\",\n            \"scope\": \"entity.other.inherited-class\",\n            \"foreground\": \"var(blue5)\",\n            \"font_style\": \"italic underline\"\n        },\n        {\n            \"name\": \"Function argument\",\n            \"scope\": \"variable.parameter\",\n            \"foreground\": \"var(orange)\"\n        },\n        {\n            \"name\": \"Language variable\",\n            \"scope\": \"variable.language\",\n            \"foreground\": \"var(red)\",\n            \"font_style\": \"italic\"\n        },\n        {\n            \"name\": \"Tag name\",\n            \"scope\": \"entity.name.tag\",\n            \"foreground\": \"var(red)\"\n        },\n        {\n            \"name\": \"Tag attribute\",\n            \"scope\": \"entity.other.attribute-name\",\n            \"foreground\": \"var(pink)\"\n        },\n        {\n            \"name\": \"Function call\",\n            \"scope\": \"variable.function, variable.annotation\",\n            \"foreground\": \"var(blue)\"\n        },\n        {\n            \"name\": \"Library function\",\n            \"scope\": \"support.function, support.macro\",\n            \"foreground\": \"var(blue)\",\n            \"font_style\": \"italic\"\n        },\n        {\n            \"name\": \"Library constant\",\n            \"scope\": \"support.constant\",\n            \"foreground\": \"var(pink)\",\n            \"font_style\": \"italic\"\n        },\n        {\n            \"name\": \"Library class/type\",\n            \"scope\": \"support.type, support.class\",\n            \"foreground\": \"var(blue)\",\n            \"font_style\": \"italic\"\n        },\n        {\n            \"name\": \"Invalid\",\n            \"scope\": \"invalid\",\n            \"foreground\": \"var(white2)\",\n            \"background\": \"var(red)\"\n        },\n        {\n            \"name\": \"Invalid deprecated\",\n            \"scope\": \"invalid.deprecated\",\n            \"foreground\": \"var(white2)\",\n            \"background\": \"var(orange2)\"\n        },\n        {\n            \"name\": \"YAML Key\",\n            \"scope\": \"entity.name.tag.yaml\",\n            \"foreground\": \"var(blue5)\"\n        },\n        {\n            \"name\": \"YAML String\",\n            \"scope\": \"source.yaml string.unquoted\",\n            \"foreground\": \"var(white3)\"\n        },\n        {\n            \"name\": \"markup headings\",\n            \"scope\": \"markup.heading\",\n            \"font_style\": \"bold\"\n        },\n        {\n            \"name\": \"markup headings\",\n            \"scope\": \"markup.heading punctuation.definition.heading\",\n            \"foreground\": \"var(red2)\"\n        },\n        {\n            \"name\": \"markup h1\",\n            \"scope\": \"markup.heading.1 punctuation.definition.heading\",\n            \"foreground\": \"var(red)\"\n        },\n        {\n            \"name\": \"markup links\",\n            \"scope\": \"string.other.link, markup.underline.link\",\n            \"foreground\": \"var(blue)\"\n        },\n        {\n            \"name\": \"markup bold\",\n            \"scope\": \"markup.bold\",\n            \"font_style\": \"bold\"\n        },\n        {\n            \"name\": \"markup italic\",\n            \"scope\": \"markup.italic\",\n            \"font_style\": \"italic\"\n        },\n        {\n            \"name\": \"markup bold/italic\",\n            \"scope\": \"markup.italic markup.bold | markup.bold markup.italic\",\n            \"font_style\": \"bold italic\"\n        },\n        {\n            \"name\": \"markup hr\",\n            \"scope\": \"punctuation.definition.thematic-break\",\n            \"foreground\": \"var(orange)\"\n        },\n        {\n            \"name\": \"markup numbered list bullet\",\n            \"scope\": \"markup.list.numbered.bullet\",\n            \"foreground\": \"var(green)\"\n        },\n        {\n            \"name\": \"markup blockquote\",\n            \"scope\": \"markup.quote punctuation.definition.blockquote, markup.list punctuation.definition.list_item\",\n            \"foreground\": \"var(orange)\"\n        },\n        {\n            \"name\": \"markup code\",\n            \"scope\": \"markup.raw\",\n            \"background\": \"color(var(blue2) alpha(0.38))\"\n        },\n        {\n            \"name\": \"markup code\",\n            \"scope\": \"markup.raw.inline\",\n            \"background\": \"color(var(blue2) alpha(0.5))\"\n        },\n        {\n            \"name\": \"markup punctuation\",\n            \"scope\": \"(text punctuation.definition.italic | text punctuation.definition.bold)\",\n            \"foreground\": \"var(pink)\"\n        },\n        {\n            \"name\": \"diff.header\",\n            \"scope\": \"meta.diff, meta.diff.header\",\n            \"foreground\": \"var(pink)\"\n        },\n        {\n            \"name\": \"diff.deleted\",\n            \"scope\": \"markup.deleted\",\n            \"foreground\": \"var(red)\"\n        },\n        {\n            \"name\": \"diff.inserted\",\n            \"scope\": \"markup.inserted\",\n            \"foreground\": \"var(green)\"\n        },\n        {\n            \"name\": \"diff.changed\",\n            \"scope\": \"markup.changed\",\n            \"foreground\": \"var(orange)\"\n        },\n        {\n            \"name\": \"CSS Properties\",\n            \"scope\": \"support.type.property-name\",\n            \"foreground\": \"var(white3)\"\n        },\n        {\n            \"scope\": \"constant.numeric.line-number.match\",\n            \"foreground\": \"var(red)\"\n        },\n        {\n            \"scope\": \"message.error\",\n            \"foreground\": \"var(red)\"\n        }\n    ]\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 19.0810546875,
          "content": "## Links:\n\nhttps://margo.sh/donate - Help support future development of GoSublime.\n\nhttps://margo.sh/b/hello-margo - A short introduction to margo.\n\nhttps://margo.sh/b/motd - Get notified when GoSublime has a new release.\n\n---\n\n## Changes\n\n## 20.06.14\n\nThis release contains a number of features and bug fixes that have been worked on over the last few months.\n\n_You will need to restart Sublime Text for all changes to take effect_\n\n- Add new GoCmd{} option `Humanize` to make `go test` and `go re/play` (in test mdoe) output more readable (using https://github.com/dustin/go-humanize).\n\n  - large numbers are split up using commas\n  - 123456 ns/op is converted to µs/op, etc.\n  - 123456 B/op is converted to KiB/op, etc.\n\n  To enabled it, use:\n\n      &golang.GoCmd{\n          Humanize: true,\n      }\n\n  e.g. output:\n\n      goos: linux\n      goarch: amd64\n      pkg: margo.sh/vfs\n      BenchmarkPoke/Miss-8            388,868       2.952 µs/op\n      BenchmarkPoke/Hit-8            1,739,704         684 ns/op\n      PASS\n\n  Known bugs:\n\n  - The output fields are not aligned\n\n- Add new reducer golang.GoGenerate\n\n  It adds a UserCmd (cord `ctrl/cmd+.`,`ctrl/cmd+.c`) named `Go Generate` that calls `go generate` in the closest go package (current dir or parent dirs).\n\n  It can be enabled with:\n\n      &golang.GoGenerate{\n          Args: []string{\"-v\", \"-x\"},\n      },\n\n- Auto-completion now works when the line ends with a dot (.)\n\n- Add new reducer golang.AsmFmt\n\n  It does code fmt'ing for `.s` files using https://github.com/klauspost/asmfmt\n\n  It formats `.s` files when they are saved, or the fmt cord `ctrl+.`,`ctrl.f` is pressed.\n\n- Add new reducer &web.Prettier{}\n\n  It does code fmt'ing using https://github.com/prettier/prettier\n  By default It fmt's CSS, HTML, JS, JSON, JSX, SVG, TS, TSX and XML files.\n\n  To specify the list of langs to fmt set the `Langs` field:\n\n      &web.Prettier{\n          // Langs: []mg.Lang{mg.JS}, // only fmt .js files\n          Langs: web.PrettierDefaultLangs,\n      },\n\n  You might also need to `import \"margo.sh/web\"`.\n\n  You will need to install prettier separately.\n\n- Add new Lang constants: mg.HTML, mg.SVG and mg.XML\n\n- Add mgutil.SplitWriter a writer that writes to an underlying writer in split chunks e.g. lines somewhat similar to bufio.scanner\n\n- `go.play` and `go.replay` (cord `ctrl/cmd+.`,`ctrl/cmd+r`) now works in in unsaved `_test.go` files.\n\n- `go.replay` now runs the Benchmark\\* func surrounding the cursor.\n\n  Compared to `ctrl/cmd+shift+left-click`, it also runs tests.\n\n  Known bugs:\n\n  - It currently ignores the TestArgs and BenchmarkArgs options of the golang.TestCmds reducer.\n\n- mg.CmdCtx supports a new option `Verbose`,\n\n  When `cx.Verbose = true`the commands that are run are printed to the output prefixed with `#`.\n\n  e.g. output:\n\n      [ `replay` | done ]\n      # go test -test.run=. -test.bench=^BenchmarkPoke$\n      goos: linux\n      [...]\n\n  It's enabled for `go.play` and `go.replay` (cord `ctrl/cmd+.`,`ctrl/cmd+r`).\n\n- Issues without a valid tag are now defaulted to `mg.Error` instead of being ignored.\n\n  This fixes some cases where the error palette shows errors, but the status and HUD doesn't.\n\n- Fix some cases where issues are reported in the wrong file or incorrectly anchored to the current file.\n\n- goutil.IsPkgDir() and other functions now use the VFS, so should touch the disk less.\n\n## 20.03.09\n\nThis release fixes a couple bugs:\n\n- GO111MODULE=off is set after building, in cases where GO111MODULE wasn't already set by the user.\n- An update message is shown even when the local GoSublime version is greater than that reported by the server.\n\n## 20.03.01\n\nThis release fixes a margo build failure when upgrading to go1.14.\n\n## 20.02.01\n\nThis release focuses on fixing a performance issue due to a failure to resetting all cached data prematurely.\n\n- Cache some files in memory to avoid re-reading from disk every time.\n\n- The `&nodejs.PackageScripts{}` reducer now uses `yarn` instead of `npm` if the `yarn.lock` file is present.\n\n## 20.01.01\n\nThis release mainly focuses on under-the-hood improvements for module support.\n\n- The default auto-completion import mode has been changed to `Kim-Porter`, our solution for auto-completion and package/module going forward.\n\n  One side-effect of this change is that unimported-packages support is less reliable but we feel this is a small drawback when compared to the much improved auto-completion support.\n\n  We plan to remove support for switching import modes in the future, but if you would like to revert to the previous default (bearing in mind auto-completion might stop working), configure the `MarGocodeCtl` reducer as follows:\n\n  ```go\n      &golang.MarGocodeCtl{\n        ImporterMode: golang.SrcImporterWithFallback,\n      }\n  ```\n\n- The Go/TypeCheck linter is now more complete and should be able to type-check (without failure) all packages for which auto-completion is available.\n  This linter offers typechecking (like the gotype tool) but can work on unsaved files and while you type and is faster a full `go install` lint.\n\n  To enable add the following reducer to your `margo.go` file:\n\n  ```go\n    &golang.TypeCheck{},\n  ```\n\n- Some HTTP handler snippets have been added and are offered in files that `import \"net/http\"`.\n\n## 19.10.22\n\n- API BREAKAGE:\n  ParseWithMode and ParseWithMode now takes a `*mg.Ctx` instead of a `mg.KVStore`.\n\n- Add experimental support for auto-completion and type-checking in go modules.\n\n- Add experimental reducer `&golang.TypeCheck{}`.\n  It's a linter that does a full type-check as you type (even in unsaved files).\n  It can be thought of as a replacement for the `gotype` binary of old.\n\n  NOTE: This is purely an experiment used primarily for testing the package importer\n  and type-checking and will probably break randomly, if it works at all.\n\n  With that said, the plan is to clean it up and develop it further in the future.\n\n- The Ariana color scheme has been tweaked to improve readability.\n\n- Add a `‣` prefix to status items and reduce the space between them.\n\n- Add langs `mg.GoMod` and `mg.GoSum` for `go.mod` and `go.sum` files, respectively.\n  For convenience, `goutil.Langs` now holds the list of all Go-related langs\n  and Go linters are now available in `go.mod` and `go.sum`.\n\n- The tasks count styled has been changed to `Tasks ➊➋➌`.\n  The status animates between `Tasks ➊➋➌` and `Tasks ➀➁➂` while there are tasks less than 16s old.\n\n- The issue count styled has been changed to `Error ➊ꞏ🄋`.\n\n  NOTE: The meanings of the numbers have been reverted.\n\n  Previously, given `1/2 Errors`, there was 1 issue with tag `Error` in this view, and there was a total 2 errors in all views.\n  The new meanings `Error ➊ꞏ🄋` is: ➊ is the number issues in the current view and 🄋 is the number issues in other views.\n\n  Only first number is highlighted if there are issues in the current view.\n  Likewise, when there are issues, but none in the current view, only the second number is highlighted.\n\n- Don't show the `func` prefix in the calltip status. The parens already make it obviously a function.\n\n## 19.06.16\n\n- Fix a deadlock/freeze (seen on Mac OS) when starting up with multiple windows open.\n- Fix an issue where the active window loses focus when starting up.\n\n## 18.11.28\n\nThis release introduces the HUD and comes with many improvements to snippets and a tweaked version of the Mariana color schemed named Ariana.\n\n- The HUD is an output panel that's automatically populated with info traditionally found in the status bar and various pop-ups/tool-tips.\n\n  Currently, the following info will be displayed there:\n\n  - The `Issues` status, including the error messages for the current line.\n\n  - The `GocodeCalltips` status, including positional highlighting of params and return statement.\n\n  It's bound to the keys `ctrl+.`,`ctrl+0`.\n\n  You can manually bind it to another key. e.g. via `Preferences > Key Bindings`:\n\n  ```json\n    {\n      \"keys\": [\"ctrl+0\"],\n      \"command\": \"margo_show_hud\",\n    },\n  ```\n\n- Several new snippets have been added and old ones improved.\n\n  - AppendSnippet: `name = |` suggests:\n\n    - `name = append(name, ...)`\n    - `slice = append(slice[:len(slice):len(slice)], ...)`\n\n  - DeferSnippet:\n\n    - `defer func() {}()`\n    - `defer f()`\n\n  - ReturnSnippet:\n\n    - `return`\n\n  - MutexSnippet: `mu.|` suggests:\n\n    - `mu.Lock(); defer mu.Unlock(); |`\n    - `mu.Lock(); |; mu.Unlock()`\n\n  - PackageNameSnippet:\n\n    - `package main; func main() { | }`\n\n  - DocSnippet: suggest function names, field names, etc. inside the corresponding _documentation_ comment\n\n- Fix the golang.Gocode{} reducer changing View.Pos\n\n- The `(Add)UnimportedPackages` feature no longer adds circular imports\n\n- Show the tasks animation after 500ms instead of 1s to (hopefully) make things feel more responsive\n\n- GOROOT and GOPATH are scanned in parallel at startup\n\n- All packages in GOROOT and GOPATH are available for the unimported packages feature, not just those in GOROOT and the package cache.\n\n- Add better named alias `pkg-list` for `unimported-packages` and show the directory where the package is\n\n- API BREAKAGE:\n  Most users should not be affected, but there were some API changes/breakages.\n\n  - removed CursorScope.Any and CursorScope.All\n\n  - make CursorCtx.Pos the int offset instead of token.Pos\n\n  - `CursorNode` and `ParseCursorNode` were removed\n\n  - `CursorCtx.Ctx` is no longer embedded\n\n## 18.11.06\n\n- Fix `UnimportedPackages` support for stdlib packages in go1.10 and earlier versions.\n\n## 18.11.04\n\n- API BREAKAGE: Rename `mg.Reducer.Reducer*` to `mg.Reducer.R*`.\n\n  Most users should be unaffected.\n  If you've _called_ any of these methods _directly_,\n  you will need to rename the following method calls:\n\n  - ReducerLabel -> RLabel\n  - ReducerInit -> RInit\n  - ReducerConfig -> RConfig\n  - ReducerCond -> RCond\n  - ReducerMount -> RMount\n  - Reducerduce -> Rduce\n  - ReducerUnmount -> RUnmount\n\n- API BREAKAGE: mg.RunCmdData has been un-exported\n\n- The following fields in the `&golang.GoCode{}` and `&golang.GocodeCalltips{}` reducers are now ignored.\n\n  - Source: this is now the default\n  - ProposeBuiltins: this is now the default\n  - ProposeTests: use `&golang.MarGocodeCtl{}`\n  - Autobuild: we now use the source code so there are no plans to implement this\n  - UnimportedPackages: this is now the default\n\n  See `&golang.MarGocodeCtl{}` (below).\n\n- Add support for 'unimported' packages.\n\n  - auto-completing `json.` will now try to import `encoding/json`\n  - known bugs: when adding the import, the view will scroll\n  - known limitation: we don't scan GOPATH and we don't support the vendor directory\n\n  Use `NoUnimportedPackages` (below) to disable this.\n\n- Add support for preloading imported packages when a view is activated.\n\n  - This aims to keep the cache warm to speed up auto-completion.\n\n  Use `NoPreloading` (below) to disable this.\n\n* Add support for adding `unimported` packages to the file.\n\n  - Use `AddUnimportedPackages` (below) to enabled this\n\n* All the above can be configured using the `&golang.MarGocodeCtl{}` reducer\n\n  ```Go\n  &golang.MarGocodeCtl{\n    // whether or not to include Test*, Benchmark* and Example* functions in the auto-completion list\n    // gs: this replaces the `autocomplete_tests` setting\n    ProposeTests: false,\n\n    // Don't try to automatically import packages when auto-compeltion fails\n    // e.g. when `json.` is typed, if auto-complete fails\n    // \"encoding/json\" is imported and auto-complete attempted on that package instead\n    // See AddUnimportedPackages\n    NoUnimportedPackages: false,\n\n    // If a package was imported internally for use in auto-completion,\n    // insert it in the source code\n    // See NoUnimportedPackages\n    // e.g. after `json.` is typed, `import \"encoding/json\"` added to the code\n    AddUnimportedPackages: false,\n\n    // Don't preload packages to speed up auto-completion, etc.\n    NoPreloading: false,\n\n    // Don't suggest builtin types and functions\n    // gs: this replaces the `autocomplete_builtins` setting\n    NoBuiltins: false,\n  },\n  ```\n\n* Add new lang conststants for `mg.JSX`, `mg.TS`, `mg.TSX` and rename `R` to `Rlang`\n\n* Don't treat an empty non-nil slice as matching in `LangIs()` and `ActionIs()`\n\n* Fix an infinite loop when auto-completing inside packages with cyclic dependencies\n\n## 18.10.06\n\n- restore support for running individual test functions by pressing `ctrl+.`,`ctrl+g` or `ctrl+shift + left/right-click` on the function declaration's name\n\n- add support for having multiple builtins with the same name\n\n- API breakage:\n  `mg.ExecRunFunc()` was replaced with the pattern `CmdCtx.WithCmd().Run()`\n  the former bypasses builtins so running `go install` has no linting support\n\n## 18.09.30\n\n- Improve autocompletion scope detection\n\n  - snippets should now the shown when there is a comment above the package statement\n  - completion should no longer be shown when there is no package statement\n\n- misc tweaks to the method snippets\n  - for pointer method receivers, only the `*` is selected for the initial method definition\n  - when there are syntax errors in the file, methods should no longer be suggested for the invalid type `_`\n\n## 18.09.25\n\n- Switch golang.Gocode and golang.GocodeCalltips to new mode SrcImporterWithFallback by default\n\n  This should improve the experience a lot:\n\n  - in the old `Source: true` mode, CGO packages often failed\n  - in the old `Source: false` mode, you had to make sure the package was installed\n    and up-to-date\n  - in this new mode, we try the more reliable source mode and fallback\n    to the binary mode if it fails\n\n  As a result, the `Source: bool` fields are now ignored.\n  To restore the old behaviour, use the golang.MarGocodeCtl reducer:\n\n  ```Go\n  &golang.MarGocodeCtl{\n    ImporterMode: golang.SrcImporterOnly,\n    // or\n    ImporterMode: golang.BinImporterOnly,\n  }\n  ```\n\n- replace margocodectl `cache-list-by-key` and `cache-list-by-dur` with `cache-list`\n  see `margocodectl cache-list --help`\n\n- Improve FmtCmd's error message\n\n  When goimports fails due to a syntax error, the parse error should now be shown as well\n  and not just the meaningless `exit 2` error message\n\n## 18.09.18\n\n- fix a case where margo exits due to IPC shutdown\n  _you will need to restart Sublime Text_\n- return all possible completions in gocode to allow the editor to do filtering.\n  this restores the old behaviour where typing `abc.X` proposes `abc.XYX123`\n\n## 18.09.14\n\n- This release adds a new experimental update notifier.\n\n  MOTD keeps you updated about new versions and important announcements\n\n  It adds a new command `motd.sync` available via the UserCmd palette as `Sync MOTD`\n\n  `Interval` can be set in order to enable automatic update fetching.\n\n  When new updates are found, it displays the message in the status bar\n  e.g. `★ margo.sh/cl/18.09.14 ★` a url where you see the upcoming changes before updating\n\n  It sends the following data to the url https://api.margo.sh/motd.json:\n\n  - current editor plugin name e.g. `?client=gosublime`\n    this tells us which editor plugin's changelog to check\n  - current editor plugin version e.g. `?tag=r18.09.14-1`\n    this allows us to determine if there any updates\n  - whether or not this is the first request of the day e.g. `?firstHit=1`\n    this allows us to get an estimated count of active users without storing\n    any personally identifiable data\n\n  No other data is sent. For more info contact privacy at kuroku.io\n\n  To enabled it, add the following reducer:\n\n  ```Go\n  &mg.MOTD{\n    // Interval, if set, specifies how often to automatically fetch messages from Endpoint\n    // Interval: 3600e9, // automatically fetch updates every hour\n  },\n  ```\n\n  You will need to restart Sublime Text.\n  Unless you uncomment/set `Interval`, you will need to manually check for updates\n  using the `Sync MOTD` command from the usercmd palette\n  `ctrl+.`,`ctrl+c` / `super+.`,`super+c`\n\n- The `GoSublime: Go` syntax was switched to a new syntax based on the Go syntax shipped in Sublime Text\n\n  - if you find any breakages, please file an issue at margo.sh/gs/i\n  - if you prefer the colouring of the previous version, you can switch back to the old syntax\n    via `Menu > View > Syntax > Open all with current extension as... > GoSublime > GoSublime: Go (Deprecated)`\n    please not that this version is buggy and will not receive any fixes\n\n- golang.Gocode, golang.GocodeCalltips:\n\n  - reduce memory use with `Source: true`\n  - support syscall/js\n\n- golang.Guru gained support for syscall/js\n  guru is now called with `-tags \"js wasm\"` if `syscall/js` is imported in the package\n\n## 18.08.31\n\n- Switch the `ctrl+.`,`ctrl+t` / `cmd+.`,`cmd+t` keybinding to the new &golang.TestCmds{} reducer:\n\n  ```Go\n  &golang.TestCmds{\n    // additional args to add to the command when running tests and examples\n    TestArgs: []string{},\n\n    // additional args to add to the command when running benchmarks\n    BenchArgs: []string{\"-benchmem\"},\n  },\n  ```\n\n## 18.08.29\n\n- implement more aggressive gocode caching.\n  behind the scenes, imported/type-checked packages are cached until the respective package is edited.\n\n  - it should now be ok to use `Source: true` option without slowdowns.\n  - as a bonus, `go modules` should now have completion with `Source: true`\n  - please note that `Source: true` uses a lot more memory (see below for details about cache pruning)\n  - if both &golang.Gocode{Source: true} and &golang.GocodeCalltips{Source: true}\n    use `Source: true`, they will share the cache (less memory use)\n\n- add new reducer `&golang.MarGocodeCtl{}`\n  this allows manual cache management using the new `margocodectl` command\n\n  - to clear the cache use the command `margocodectl cache-prune`\n    run `margocodectl` for info about how to use the command\n  - automated cache pruning will be implemented in the future\n\n## 18.08.22\n\n- merge all shell env vars named `^(MARGO|GO|CGO)\\w+` into the GoSublime environment\n  this ensures new env vars like `GOPROXY` and `GO111MODULE` work correctly\n\n- try to prevent `GO111MODULE` leaking into the agent build process\n\n- add support for UserCmd prompts\n\n  this enables the creation of UserCmds like the following, without dedicated support from margo:\n\n  ```Go\n  mg.UserCmd{\n    Title:   \"GoRename\",\n    Name:    \"gorename\",\n    Args:    []string{\"-offset={{.View.Filename}}:#{{.View.Pos}}\", \"-to={{index .Prompts 0}}\"},\n    Prompts: []string{\"New Name\"},\n  }\n  ```\n\n- fix #853 a build failure when using snap packaged go1.10\n\n- fix caching of packages in GOPATH when doing gocode completion\n  this _might_ slow completion, but there should no longer be any stale non-GOROOT package completions\n\n- add new `Source` option to use source code for gocode completions\n  _this will most likely be very slow_\n\n  ```Go\n  &golang.Gocode{ Source: true }\n  &golang.GocodeCalltips{ Source: true }\n  ```\n\n## 18.08.15\n\n- fix missing `go` command integration by default\n\n- you may need to add the reducer `&golang.GoCmd{}`\n\n- this adds new commands (callable through 9o):\n\n  - `go`: Wrapper around the go command, adding linter support\n\n  - `go.play`: Automatically build and run go commands or run go test for packages\n    with support for linting and unsaved files\n\n  - `go.replay`: Wrapper around go.play limited to a single instance\n    by default this command is bound to `ctrl+.,ctrl+r` or `cmd+.,cmd+r`\n\n  UserCmds (`ctrl+.,ctrl+c` / `cmd+.,cmd+c`) are also added for `Go Play` and `Go RePlay`\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.4306640625,
          "content": "# Contribute\n\n## Introduction\n\nFirst, thank you for considering contributing to gosublime! It's people like you that make the open source community such a great community! 😊\n\nWe welcome any type of contribution, not only code. You can help with \n- **QA**: file bug reports, the more details you can give the better (e.g. screenshots with the console open)\n- **Marketing**: writing blog posts, howto's, printing stickers, ...\n- **Community**: presenting the project at meetups, organizing a dedicated meetup for the local community, ...\n- **Code**: take a look at the [open issues](issues). Even if you can't write code, commenting on them, showing that you care about a given issue matters. It helps us triage them.\n- **Money**: we welcome financial contributions in full transparency on our [open collective](https://opencollective.com/gosublime).\n\n## Your First Contribution\n\nWorking on your first Pull Request? You can learn how from this *free* series, [How to Contribute to an Open Source Project on GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github).\n\n## Submitting code\n\nAny code change should be submitted as a pull request. The description should explain what the code does and give steps to execute it. The pull request should also contain tests.\n\n## Code review process\n\nThe bigger the pull request, the longer it will take to review and merge. Try to break down large pull requests in smaller chunks that are easier to review and merge.\nIt is also always helpful to have some context for your pull request. What was the purpose? Why does it matter to you?\n\n## Financial contributions\n\nWe also welcome financial contributions in full transparency on our [open collective](https://opencollective.com/gosublime).\nAnyone can file an expense. If the expense makes sense for the development of the community, it will be \"merged\" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.\n\n## Questions\n\nIf you have any questions, create an [issue](issue) (protip: do a quick search first to see if someone else didn't ask the same question before!).\nYou can also reach us at hello@gosublime.opencollective.com.\n\n## Credits\n\n### Contributors\n\nThank you to all the people who have already contributed to gosublime!\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/gosublime/contributors.svg?width=890\" /></a>\n\n\n### Backers\n\nThank you to all our backers! [[Become a backer](https://opencollective.com/gosublime#backer)]\n\n<a href=\"https://opencollective.com/gosublime#backers\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/backers.svg?width=890\"></a>\n\n\n### Sponsors\n\nThank you to all our sponsors! (please ask your company to also support this open source project by [becoming a sponsor](https://opencollective.com/gosublime#sponsor))\n\n<a href=\"https://opencollective.com/gosublime/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/9/avatar.svg\"></a>\n\n<!-- This `CONTRIBUTING.md` is based on @nayafia's template https://github.com/nayafia/contributing-template -->"
        },
        {
          "name": "Comments.tmPreferences",
          "type": "blob",
          "size": 0.7548828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<plist version=\"1.0\">\n<dict>\n\t<key>name</key>\n\t<string>Comments</string>\n\t<key>scope</key>\n\t<string>source.go</string>\n\t<key>settings</key>\n\t<dict>\n\t\t<key>shellVariables</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>name</key>\n\t\t\t\t<string>TM_COMMENT_START</string>\n\t\t\t\t<key>value</key>\n\t\t\t\t<string>// </string>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key>\n\t\t\t\t<string>TM_COMMENT_START_2</string>\n\t\t\t\t<key>value</key>\n\t\t\t\t<string>/*</string>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key>\n\t\t\t\t<string>TM_COMMENT_END_2</string>\n\t\t\t\t<key>value</key>\n\t\t\t\t<string>*/</string>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key>\n\t\t\t\t<string>TM_COMMENT_DISABLE_INDENT_2</string>\n\t\t\t\t<key>value</key>\n\t\t\t\t<string>yes</string>\n\t\t\t</dict>\n\t\t</array>\n\t</dict>\n</dict>\n</plist>\n"
        },
        {
          "name": "Default (Linux).sublime-keymap",
          "type": "blob",
          "size": 5.107421875,
          "content": "[\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+x\"],\n\t\t\"command\": \"margo_open_extension\",\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+1\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/GoSublime/README.md\" }\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+2\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/GoSublime/USAGE.md\" }\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+3\"],\n\t\t\"command\": \"gs_sanity_check\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+4\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/GoSublime/GoSublime.sublime-settings\" }\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+5\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/User/GoSublime.sublime-settings\" }\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+space\"],\n\t\t\"command\": \"auto_complete\",\n\t\t\"args\": {\"disable_auto_insert\": true, \"api_completions_only\": true, \"next_completion_if_showing\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+p\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"imports\", \"direct\": true},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+d\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"declarations\", \"direct\": true},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+e\"],\n\t\t\"command\": \"margo_issues\",\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+c\"],\n\t\t\"command\": \"margo_user_cmds\",\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+[\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"jump_back\"},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+i\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"jump_to_imports\"},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+b\"],\n\t\t\"command\": \"gs9o_build\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+r\"],\n\t\t\"command\": \"gs9o_open\",\n\t\t\"args\": {\"run\": [\"replay\"], \"focus_view\": false},\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+g\"],\n\t\t\"command\": \"gs9o_open\",\n\t\t\"args\": {\"run\": [\".actuate\"], \"focus_view\": false, \"show_view\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+g\"],\n\t\t\"command\": \"gs9o_open_selection\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+h\"],\n\t\t\"command\": \"gs_doc\",\n\t\t\"args\": {\"mode\": \"hint\"},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+.\"],\n\t\t\"command\": \"show_overlay\",\n\t\t\"args\": {\"overlay\": \"command_palette\", \"text\": \"GoSublime: \"}\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+f\"],\n\t\t\"command\": \"margo_fmt\",\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+n\"],\n\t\t\"command\": \"gs_new_go_file\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+a\"],\n\t\t\"command\": \"gs_browse_declarations\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+l\"],\n\t\t\"command\": \"gs_browse_declarations\",\n\t\t\"args\": { \"dir\": \".\" },\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+o\"],\n\t\t\"command\": \"gs_browse_packages\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+m\"],\n\t\t\"command\": \"gs_browse_files\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+t\"],\n\t\t\"command\": \"margo_user_cmds\",\n\t\t\"args\": {\"action\": \"QueryTestCmds\"},\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+space\"],\n\t\t\"command\": \"gs_show_call_tip\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+9\"],\n\t\t\"command\": \"gs9o_win_open\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\",\"ctrl+9\"],\n\t\t\"command\": \"gs9o_win_open\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\",\"ctrl+0\"],\n\t\t\"command\": \"margo_show_hud\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+space\"],\n\t\t\"command\": \"auto_complete\",\n\t\t\"args\": {\"disable_auto_insert\": true, \"api_completions_only\": true, \"next_completion_if_showing\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"enter\"],\n\t\t\"command\": \"gs9o_exec\",\n\t\t\"args\": {\"save_hist\": true},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"enter\"],\n\t\t\"command\": \"commit_completion\",\n\t\t\"context\": [\n\t\t\t{ \"key\": \"auto_complete_visible\" },\n\t\t\t{ \"key\": \"setting.auto_complete_commit_on_tab\", \"operand\": false },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }\n\t\t]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+enter\"],\n\t\t\"command\": \"gs9o_insert_line\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+shift+enter\"],\n\t\t\"command\": \"gs9o_insert_line\",\n\t\t\"args\": {\"after\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"up\"],\n\t\t\"command\": \"gs9o_move_hist\",\n\t\t\"args\": {\"up\": true},\n\t\t\"context\": [\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"prompt.9o\" },\n\t\t\t{ \"key\": \"auto_complete_visible\", \"operand\": false }\n\t\t]\n\t},\n\t{\n\t\t\"keys\": [\"down\"],\n\t\t\"command\": \"gs9o_move_hist\",\n\t\t\"args\": {\"up\": false},\n\t\t\"context\": [\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"prompt.9o\" },\n\t\t\t{ \"key\": \"auto_complete_visible\", \"operand\": false }\n\t\t]\n\t}\n]\n"
        },
        {
          "name": "Default (Linux).sublime-mousemap",
          "type": "blob",
          "size": 0.2578125,
          "content": "[\n\t{\n\t\t\"button\": \"button1\",\n\t\t\"modifiers\": [\"ctrl\", \"shift\"],\n\t\t\"press_command\": \"drag_select\",\n\t\t\"command\": \"gs_on_left_click\"\n\t},\n\t{\n\t\t\"button\": \"button2\",\n\t\t\"modifiers\": [\"ctrl\", \"shift\"],\n\t\t\"press_command\": \"drag_select\",\n\t\t\"command\": \"gs_on_right_click\"\n\t}\n]\n"
        },
        {
          "name": "Default (OSX).sublime-keymap",
          "type": "blob",
          "size": 4.9208984375,
          "content": "[\n\t{\n\t\t\"keys\": [\"super+.\", \"super+x\"],\n\t\t\"command\": \"margo_open_extension\",\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+1\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/GoSublime/README.md\" }\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+2\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/GoSublime/USAGE.md\" }\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+3\"],\n\t\t\"command\": \"gs_sanity_check\"\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+4\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/GoSublime/GoSublime.sublime-settings\" }\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+5\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/User/GoSublime.sublime-settings\" }\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+p\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"imports\", \"direct\": true},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+d\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"declarations\", \"direct\": true},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+e\"],\n\t\t\"command\": \"margo_issues\",\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+c\"],\n\t\t\"command\": \"margo_user_cmds\",\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+[\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"jump_back\"},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+i\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"jump_to_imports\"},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+b\"],\n\t\t\"command\": \"gs9o_build\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+r\"],\n\t\t\"command\": \"gs9o_open\",\n\t\t\"args\": {\"run\": [\"replay\"], \"focus_view\": false},\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+g\"],\n\t\t\"command\": \"gs9o_open\",\n\t\t\"args\": {\"run\": [\".actuate\"], \"focus_view\": false, \"show_view\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+g\"],\n\t\t\"command\": \"gs9o_open_selection\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+h\"],\n\t\t\"command\": \"gs_doc\",\n\t\t\"args\": {\"mode\": \"hint\"},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+.\"],\n\t\t\"command\": \"show_overlay\",\n\t\t\"args\": {\"overlay\": \"command_palette\", \"text\": \"GoSublime: \"}\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+f\"],\n\t\t\"command\": \"margo_fmt\",\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+n\"],\n\t\t\"command\": \"gs_new_go_file\"\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+a\"],\n\t\t\"command\": \"gs_browse_declarations\"\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+l\"],\n\t\t\"command\": \"gs_browse_declarations\",\n\t\t\"args\": { \"dir\": \".\" },\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+o\"],\n\t\t\"command\": \"gs_browse_packages\"\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+m\"],\n\t\t\"command\": \"gs_browse_files\"\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"super+t\"],\n\t\t\"command\": \"margo_user_cmds\",\n\t\t\"args\": {\"action\": \"QueryTestCmds\"},\n\t},\n\t{\n\t\t\"keys\": [\"super+.\", \"shift+space\"],\n\t\t\"command\": \"gs_show_call_tip\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+9\"],\n\t\t\"command\": \"gs9o_win_open\"\n\t},\n\t\t{\n\t\t\"keys\": [\"super+.\",\"super+9\"],\n\t\t\"command\": \"gs9o_win_open\"\n\t},\n\t{\n\t\t\"keys\": [\"super+.\",\"super+0\"],\n\t\t\"command\": \"margo_show_hud\"\n\t},\n\t{\n\t\t\"keys\": [\"shift+space\"],\n\t\t\"command\": \"auto_complete\",\n\t\t\"args\": {\"disable_auto_insert\": true, \"api_completions_only\": true, \"next_completion_if_showing\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"enter\"],\n\t\t\"command\": \"gs9o_exec\",\n\t\t\"args\": {\"save_hist\": true},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"enter\"],\n\t\t\"command\": \"commit_completion\",\n\t\t\"context\": [\n\t\t\t{ \"key\": \"auto_complete_visible\" },\n\t\t\t{ \"key\": \"setting.auto_complete_commit_on_tab\", \"operand\": false },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }\n\t\t]\n\t},\n\t{\n\t\t\"keys\": [\"super+enter\"],\n\t\t\"command\": \"gs9o_insert_line\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"super+shift+enter\"],\n\t\t\"command\": \"gs9o_insert_line\",\n\t\t\"args\": {\"after\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t\t},\n\t{\n\t\t\"keys\": [\"up\"],\n\t\t\"command\": \"gs9o_move_hist\",\n\t\t\"args\": {\"up\": true},\n\t\t\"context\": [\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"prompt.9o\" },\n\t\t\t{ \"key\": \"auto_complete_visible\", \"operand\": false }\n\t\t]\n\t},\n\t{\n\t\t\"keys\": [\"down\"],\n\t\t\"command\": \"gs9o_move_hist\",\n\t\t\"args\": {\"up\": false},\n\t\t\"context\": [\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"prompt.9o\" },\n\t\t\t{ \"key\": \"auto_complete_visible\", \"operand\": false }\n\t\t]\n\t}\n]\n"
        },
        {
          "name": "Default (OSX).sublime-mousemap",
          "type": "blob",
          "size": 0.259765625,
          "content": "[\n\t{\n\t\t\"button\": \"button1\",\n\t\t\"modifiers\": [\"super\", \"shift\"],\n\t\t\"press_command\": \"drag_select\",\n\t\t\"command\": \"gs_on_left_click\"\n\t},\n\t{\n\t\t\"button\": \"button2\",\n\t\t\"modifiers\": [\"super\", \"shift\"],\n\t\t\"press_command\": \"drag_select\",\n\t\t\"command\": \"gs_on_right_click\"\n\t}\n]\n"
        },
        {
          "name": "Default (Windows).sublime-keymap",
          "type": "blob",
          "size": 5.109375,
          "content": "[\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+x\"],\n\t\t\"command\": \"margo_open_extension\",\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+1\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/GoSublime/README.md\" }\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+2\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/GoSublime/USAGE.md\" }\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+3\"],\n\t\t\"command\": \"gs_sanity_check\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+4\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/GoSublime/GoSublime.sublime-settings\" }\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+5\"],\n\t\t\"command\": \"open_file\",\n\t\t\"args\": { \"file\": \"${packages}/User/GoSublime.sublime-settings\" }\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+space\"],\n\t\t\"command\": \"auto_complete\",\n\t\t\"args\": {\"disable_auto_insert\": true, \"api_completions_only\": true, \"next_completion_if_showing\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+p\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"imports\", \"direct\": true},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+d\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"declarations\", \"direct\": true},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+e\"],\n\t\t\"command\": \"margo_issues\",\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+c\"],\n\t\t\"command\": \"margo_user_cmds\",\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+[\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"jump_back\"},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+i\"],\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"jump_to_imports\"},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+b\"],\n\t\t\"command\": \"gs9o_build\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+r\"],\n\t\t\"command\": \"gs9o_open\",\n\t\t\"args\": {\"run\": [\"replay\"], \"focus_view\": false},\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+g\"],\n\t\t\"command\": \"gs9o_open\",\n\t\t\"args\": {\"run\": [\".actuate\"], \"focus_view\": false, \"show_view\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+g\"],\n\t\t\"command\": \"gs9o_open_selection\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+h\"],\n\t\t\"command\": \"gs_doc\",\n\t\t\"args\": {\"mode\": \"hint\"},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+.\"],\n\t\t\"command\": \"show_overlay\",\n\t\t\"args\": {\"overlay\": \"command_palette\", \"text\": \"GoSublime: \"}\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+f\"],\n\t\t\"command\": \"margo_fmt\",\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+n\"],\n\t\t\"command\": \"gs_new_go_file\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+a\"],\n\t\t\"command\": \"gs_browse_declarations\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+l\"],\n\t\t\"command\": \"gs_browse_declarations\",\n\t\t\"args\": { \"dir\": \".\" },\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+o\"],\n\t\t\"command\": \"gs_browse_packages\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+m\"],\n\t\t\"command\": \"gs_browse_files\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+t\"],\n\t\t\"command\": \"margo_user_cmds\",\n\t\t\"args\": {\"action\": \"QueryTestCmds\"},\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\", \"ctrl+space\"],\n\t\t\"command\": \"gs_show_call_tip\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+9\"],\n\t\t\"command\": \"gs9o_win_open\"\n\t},\n\t\t{\n\t\t\"keys\": [\"ctrl+.\",\"ctrl+9\"],\n\t\t\"command\": \"gs9o_win_open\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+.\",\"ctrl+0\"],\n\t\t\"command\": \"margo_show_hud\"\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+space\"],\n\t\t\"command\": \"auto_complete\",\n\t\t\"args\": {\"disable_auto_insert\": true, \"api_completions_only\": true, \"next_completion_if_showing\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"enter\"],\n\t\t\"command\": \"gs9o_exec\",\n\t\t\"args\": {\"save_hist\": true},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"enter\"],\n\t\t\"command\": \"commit_completion\",\n\t\t\"context\": [\n\t\t\t{ \"key\": \"auto_complete_visible\" },\n\t\t\t{ \"key\": \"setting.auto_complete_commit_on_tab\", \"operand\": false },\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }\n\t\t]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+enter\"],\n\t\t\"command\": \"gs9o_insert_line\",\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t},\n\t{\n\t\t\"keys\": [\"ctrl+shift+enter\"],\n\t\t\"command\": \"gs9o_insert_line\",\n\t\t\"args\": {\"after\": false},\n\t\t\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.9o\" }]\n\t\t},\n\t{\n\t\t\"keys\": [\"up\"],\n\t\t\"command\": \"gs9o_move_hist\",\n\t\t\"args\": {\"up\": true},\n\t\t\"context\": [\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"prompt.9o\" },\n\t\t\t{ \"key\": \"auto_complete_visible\", \"operand\": false }\n\t\t]\n\t},\n\t{\n\t\t\"keys\": [\"down\"],\n\t\t\"command\": \"gs9o_move_hist\",\n\t\t\"args\": {\"up\": false},\n\t\t\"context\": [\n\t\t\t{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"prompt.9o\" },\n\t\t\t{ \"key\": \"auto_complete_visible\", \"operand\": false }\n\t\t]\n\t}\n]\n"
        },
        {
          "name": "Default (Windows).sublime-mousemap",
          "type": "blob",
          "size": 0.2578125,
          "content": "[\n\t{\n\t\t\"button\": \"button1\",\n\t\t\"modifiers\": [\"ctrl\", \"shift\"],\n\t\t\"press_command\": \"drag_select\",\n\t\t\"command\": \"gs_on_left_click\"\n\t},\n\t{\n\t\t\"button\": \"button2\",\n\t\t\"modifiers\": [\"ctrl\", \"shift\"],\n\t\t\"press_command\": \"drag_select\",\n\t\t\"command\": \"gs_on_right_click\"\n\t}\n]\n"
        },
        {
          "name": "GoSublime.py",
          "type": "blob",
          "size": 3.19140625,
          "content": "import os\nimport sublime\nimport sublime_plugin\nimport sys\nimport traceback\n\nst2 = (sys.version_info[0] == 2)\ndist_dir = os.path.dirname(os.path.abspath(__file__))\nsys.path.insert(0, dist_dir)\n\nANN = ''\nVERSION = ''\nMARGO_EXE = ''\nfn = os.path.join(dist_dir, 'gosubl', 'about.py')\nexecErr = ''\ntry:\n\twith open(fn) as f:\n\t\tcode = compile(f.read(), fn, 'exec')\n\t\texec(code)\nexcept Exception:\n\texecErr = \"Error: failed to exec about.py: Exception: %s\" % traceback.format_exc()\n\tprint(\"GoSublime: %s\" % execErr)\n\ndef loadable_mods():\n\tfrom . import _before\n\tfrom . import _after\n\tfrom .gosubl import gs\n\tfrom .gosubl import sh\n\tfrom .gosubl import margo\n\tfrom .gosubl import mg9\n\n\treturn [\n\t\t('_before', _before),\n\t\t('gs', gs),\n\t\t('sh', sh),\n\t\t('margo', margo),\n\t\t('mg9', mg9),\n\t\t('_after', _after),\n\t]\n\ndef plugin_loaded():\n\tfrom threading import Thread\n\tThread(target=_plugin_loaded_async).start()\n\ndef _plugin_loaded_async():\n\tfrom .gosubl import about\n\tfrom .gosubl import sh\n\tfrom .gosubl import ev\n\tfrom .gosubl import gs\n\n\tif VERSION != about.VERSION:\n\t\tgs.show_output('GoSublime-main', '\\n'.join([\n\t\t\t'GoSublime has been updated.',\n\t\t\t'New version: `%s`, current version: `%s`' % (VERSION, about.VERSION),\n\t\t\t'Please restart Sublime Text to complete the update.',\n\t\t\texecErr,\n\t\t]))\n\t\treturn\n\n\tif gs.attr('about.version'):\n\t\tgs.show_output('GoSublime-main', '\\n'.join([\n\t\t\t'GoSublime appears to have been updated.',\n\t\t\t'New ANNOUNCE: `%s`, current ANNOUNCE: `%s`' % (ANN, about.ANN),\n\t\t\t'You may need to restart Sublime Text.',\n\t\t]))\n\t\treturn\n\n\tgs.set_attr('about.version', VERSION)\n\tgs.set_attr('about.ann', ANN)\n\n\tfor mod_name, mod in loadable_mods():\n\t\tprint('GoSublime %s: %s.init()' % (VERSION, mod_name))\n\n\t\ttry:\n\t\t\tmod.gs_init({\n\t\t\t\t'version': VERSION,\n\t\t\t\t'ann': ANN,\n\t\t\t\t'margo_exe': MARGO_EXE,\n\t\t\t})\n\t\texcept AttributeError:\n\t\t\tpass\n\t\texcept TypeError:\n\t\t\t# old versions didn't take an arg\n\t\t\tmod.gs_init()\n\n\tev.init.post_add = lambda e, f: f()\n\tev.init()\n\n\tdef cb():\n\t\taso = gs.aso()\n\t\told_version = aso.get('version', '')\n\t\told_ann = aso.get('ann', '')\n\t\tif about.VERSION > old_version or about.ANN > old_ann:\n\t\t\taso.set('version', about.VERSION)\n\t\t\taso.set('ann', about.ANN)\n\t\t\tgs.save_aso()\n\t\t\tgs.focus(gs.dist_path('CHANGELOG.md'))\n\n\tsublime.set_timeout(cb, 0)\n\ndef plugin_unloaded():\n\tfor mod_name, mod in loadable_mods():\n\t\ttry:\n\t\t\tfini = mod.gs_fini\n\t\texcept AttributeError:\n\t\t\tcontinue\n\n\t\tprint('GoSublime %s: %s.fini()' % (VERSION, mod_name))\n\t\tfini({\n\t\t})\n\nclass GosublimeDoesntSupportSublimeText2(sublime_plugin.TextCommand):\n\tdef run(self, edit):\n\t\tmsg = '\\n'.join([\n\t\t\t'Sublime Text 2 is no longer supported by GoSublime'+\n\t\t\t'',\n\t\t\t'See https://github.com/DisposaBoy/GoSublime/blob/master/SUPPORT.md#sublime-text',\n\t\t\t'',\n\t\t\t'If you have a *good* reason to not upgrade to Sublime Text 3,',\n\t\t\t'discuss it here https://github.com/DisposaBoy/GoSublime/issues/689',\n\t\t\t'',\n\t\t])\n\t\tself.view.set_scratch(True)\n\t\tself.view.set_syntax_file(gs.tm_path('9o'))\n\t\tself.view.set_name('GoSublime no longer supports Sublime Text 2')\n\t\tself.view.insert(edit, 0, msg)\n\t\tself.view.set_read_only(True)\n\nif st2:\n\tdef cb():\n\t\tview = sublime.active_window().new_file()\n\t\tview.run_command('gosublime_doesnt_support_sublime_text2')\n\n\tsublime.set_timeout(cb, 1000)\n"
        },
        {
          "name": "GoSublime.sublime-build",
          "type": "blob",
          "size": 0.052734375,
          "content": "{\n\t\"target\": \"gs9o_build\",\n\t\"selector\": \"source.go\"\n}\n"
        },
        {
          "name": "GoSublime.sublime-commands",
          "type": "blob",
          "size": 3.8583984375,
          "content": "[\n\t{\n\t\t\"caption\": \"GoSublime: Restart Margo\",\n\t\t\"command\": \"margo_restart_agent\",\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Edit Margo Extension\",\n\t\t\"command\": \"margo_open_extension\",\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Add/Remove package\",\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"imports\", \"direct\": true}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: List File declarations\",\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"declarations\", \"direct\": true}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: List Package declarations\",\n\t\t\"command\": \"gs_browse_declarations\",\n\t\t\"args\": {\"dir\": \".\"}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Show Issues\",\n\t\t\"command\": \"margo_issues\",\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: User Commands\",\n\t\t\"command\": \"margo_user_cmds\",\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Go to last bookmark\",\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"jump_back\"}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Go to imports section\",\n\t\t\"command\": \"gs_palette\",\n\t\t\"args\": {\"palette\": \"jump_to_imports\"}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Fmt and save\",\n\t\t\"command\": \"gs_fmt_save\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Fmt and save as ...\",\n\t\t\"command\": \"gs_fmt_prompt_save_as\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Run build command\",\n\t\t\"command\": \"gs9o_build\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Replay current package\",\n\t\t\"command\": \"gs9o_open\",\n\t\t\"args\": {\"run\": [\"replay\"]}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Share (on play.golang.org)\",\n\t\t\"command\": \"gs9o_open\",\n\t\t\"args\": {\"run\": [\"share\"]}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Goto Definition\",\n\t\t\"command\": \"gs9o_open\",\n\t\t\"args\": {\"run\": [\"goto.definition\"], \"focus_view\": false, \"show_view\": false},\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Show documentation hint\",\n\t\t\"command\": \"gs_doc\",\n\t\t\"args\": {\"mode\": \"hint\"}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Fmt the current file (without saving it)\",\n\t\t\"command\": \"gs_fmt\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: New Go File\",\n\t\t\"command\": \"gs_new_go_file\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Browse Declarations\",\n\t\t\"command\": \"gs_browse_declarations\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Browse Packages\",\n\t\t\"command\": \"gs_browse_packages\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Browse Files\",\n\t\t\"command\": \"gs_browse_files\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Run Tests\",\n\t\t\"command\": \"gs_test\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Show call tip\",\n\t\t\"command\": \"gs_show_call_tip\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Show last build output\",\n\t\t\"command\": \"show_panel\",\n\t\t\"args\": {\"panel\": \"output.exec\"}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Show/Cancel pending tasks\",\n\t\t\"command\": \"gs_show_tasks\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Cancel the currently executing command\",\n\t\t\"command\": \"exec\",\n\t\t\"args\": { \"kill\": true }\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Activate 9o\",\n\t\t\"command\": \"gs9o_open\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: (9o) open file/url\",\n\t\t\"command\": \"gs9o_open_selection\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Default Settings\",\n\t\t\"command\": \"open_file\",\n\t\t\"args\": {\n\t\t\t\"file\": \"${packages}/GoSublime/GoSublime.sublime-settings\"\n\t\t}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: User Settings\",\n\t\t\"command\": \"open_file\",\n\t\t\"args\": {\n\t\t\t\"file\": \"${packages}/User/GoSublime.sublime-settings\"\n\t\t}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Changes & Announcements\",\n\t\t\"command\": \"open_file\",\n\t\t\"args\": {\n\t\t\t\"file\": \"${packages}/GoSublime/CHANGELOG.md\"\n\t\t}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Read Me\",\n\t\t\"command\": \"open_file\",\n\t\t\"args\": {\n\t\t\t\"file\": \"${packages}/GoSublime/README.md\"\n\t\t}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Usage & Tips\",\n\t\t\"command\": \"open_file\",\n\t\t\"args\": {\n\t\t\t\"file\": \"${packages}/GoSublime/USAGE.md\"\n\t\t}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Authors & Contributors\",\n\t\t\"command\": \"open_file\",\n\t\t\"args\": {\n\t\t\t\"file\": \"${packages}/GoSublime/AUTHORS.md\"\n\t\t}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: License (MIT)\",\n\t\t\"command\": \"open_file\",\n\t\t\"args\": {\n\t\t\t\"file\": \"${packages}/GoSublime/LICENSE.md\"\n\t\t}\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Do a sanity check\",\n\t\t\"command\": \"gs_sanity_check\"\n\t},\n\t{\n\t\t\"caption\": \"GoSublime: Open Error Log\",\n\t\t\"command\": \"gs_open_home_path\",\n\t\t\"args\": { \"fn\": \"log.txt\" }\n\t}\n]\n"
        },
        {
          "name": "GoSublime.sublime-settings",
          "type": "blob",
          "size": 14.5087890625,
          "content": "{\n\t\"margo\": {},\n\n\t// The maximum amount of memory(MiB) that MarGo is allowed to use\n\t\"margo_oom\": 1000,\n\n\t// you may set specific environment variables here\n\t// e.g \"env\": { \"PATH\": \"$HOME/go/bin:$PATH\" }\n\t// in values, $PATH and ${PATH} are replaced with\n\t// the corresponding environment(PATH) variable, if it exists.\n\t\"env\": {},\n\n\t// if set, whenever possible `GOPATH` will be set to `GS_GOPATH`.\n\t// please see `Usage & Tips` `ctrl+dot,ctrl+2`\n\t// section `Per-project  settings & Project-based GOPATH` for details about `GS_GOPATH`\n\t\"use_gs_gopath\": false,\n\n\t// Your shell. e.g. on Linux and OS X, if your shell bash:\n\t// you may set it to [\"/bin/bash\", \"--login\", \"-c\", \"$CMD\"]\n\t// it's useful to pass the --login argument in order for it run your ~/.bashrc etc.\n\t// otherwise environment variables may not be seen by Sublime Text and therefore GoSublime\n\t//\n\t// If set, commands are passed to it instead of the Python default which for *nix is usually\n\t// /bin/sh which in most cases is not what you want\n\t//\n\t// the special entry \"$CMD\" is replaced by the actual command\n\t\"shell\": [],\n\n\t// whether or not pkg files should be automatically saved when necessary (e.g. when running 9o `replay` or `go test` commands)\n\t\"autosave\": true,\n\n\t// Whether or not gscomplete(gocode) is enabled\n\t\"gscomplete_enabled\": false,\n\n\t// Whether or not gsfmt is enabled\n\t\"fmt_enabled\": false,\n\n\t// whether or not to indent with tabs (alignment is always done using spaces)\n\t\"fmt_tab_indent\": true,\n\n\t// the assumed width of the tab character (or number of spaces to indent with)\n\t\"fmt_tab_width\": 8,\n\n\t// by default fmt'ing is done by margo using `fmt_tab_intent` and `fmt_tab_width` (above)\n\t// you may use a command of your choosing by setting `fmt_cmd`\n\t// e.g. [\"goimports\", \"-srcdir\", \"$_dir\"]\n\t// the command will be passed, to its stdin, the contents of the file\n\t// it must output the new file contents\n\t//\n\t// You might need to increase `ipc_timeout` below if you use this setting.\n\t// If `fmt_cmd` takes too long, the internal MarGo fmt will be tried instead.\n\t\"fmt_cmd\": [],\n\n\t// ipc_timeout sets the maximum amount of time time in seconds to wait for a blocking ipc call to MarGo.\n\t// Due to limitations in Sublime Text, fmt cannot be done without freezing Sublime Text.\n\t// If you use the `fmt_cmd` setting above with a command that is slow like `goimports` you should increase this value.\n\t\"ipc_timeout\": 1,\n\n\t// Whether or not gslint is enabled\n\t\"gslint_enabled\": false,\n\n\t// filter the kinds of lint checks that are done. supported kinds:\n\t//\n\t// gs.syntax - parser/syntax errors - it makes no sense to filter this as it will simply\n\t//             manifest itself in other checks (which will likely not be done if there are syntax errors)\n\t// gs.flag.parse - check for possibly missing calls to flag.Parse()\n\t// gs.types - do a typecheck using the go/types package(like the old gotype)\n\t//            disabled by default until it's ready(copied from tip)\n\t\"lint_filter\": [\n\t\t\"gs.flag.parse\",\n\t\t\"gs.types\"\n\t],\n\n\t// Whether or not comp lint is enabled (this might conflict with gslint)\n\t\"comp_lint_enabled\": false,\n\n\t// The list of commands that comp-lint will run (in the order specified)\n\t// each entry contains a map of:\n\t//    cmd: a list containing the command and its args\n\t//    shell: whether or not use the $shell to run this command\n\t//        if you don't need $shell features then don't set this.\n\t//    global: whether or not commands like go install should affect the system globally\n\t//        by default the environment variable GOBIN is set to ($TEMPDIR/GoSublime/bin\n\t//        which in the installation of commands via comp-lint going there instead of into\n\t//        one of your GOPATHs.\n\t//        setting this to true, you can e.g automate the actual installation of your commands\n\t// additionally, for `shell` and `global` if the value is not `true` then it's assumed to be false\n\t\"comp_lint_commands\": [\n\t\t{\"cmd\": [\"go\", \"install\"]}\n\t],\n\n\t// how long to wait after the last keystroke before the gslint_cmd command is run (in milliseconds)\n\t\"gslint_timeout\": 100,\n\n\t// Not Implemented\n\t// Whether or not gslint is enabled\n\t\"lint_enabled\": false,\n\n\t// Not Implemented\n\t// list of linters to run\n\t// note: before the linters are run, the builtin gs.syntax linter is run\n\t//       * its purpose is to do a basic syntax check on the active file.\n\t//       * by design, it cannot be disabled\n\t//       * if there is a syntax error, no user-defined linters will be run\n\t//\n\t// each linter is an object of the form:\n\t//\n\t// {\n\t// \t\"ctx\": \"\", // the context in which this linter runs, e.g. \"live\"\n\t// \t           // default: \"live\", builtin contexts:\n\t//             //      live: the linters are being called while you're editing the file\n\t//             //      save: the linters are being called after saving.\n\t//             //            this can be used to e.g. rebuild or install the pkg\n\t//\n\t// \t\"pat\": \"\", // a regexp pattern that will define the following named variables:\n\t// \t           // fn: the filename\n\t// \t           // line: the line number (starting from 1)\n\t// \t           // column: the column number (starting from 1)\n\t// \t           //         (this can be considered optional because the error message is still useful without it)\n\t// \t           // message: the error message\n\t// \t           //\n\t// \t           // the default pat will be defined[1] such that it matches `main.go:1:2 error` resulting in:\n\t// \t           //     fn: main.go\n\t// \t           //     line: 1\n\t// \t           //     column: 2\n\t// \t           //     message: error\n\t//\t           //\n\t//\t           //  The following regexp is a copy of the one used in MarGo (it might be out-of-sync)\n\t//\t           //      `(?P<fn>\\S+\\.go):(?P<line>\\d+)?(?:[:](?P<column>\\d+))?[:]*(?P<message>.+)`\n\t// \t           //\n\t// \t           // it will also allow `line` and `column` to be missing. this should be sufficient\n\t// \t           // for the output of the go tools (go vet, compilers, etc.)\n\t//\n\t// \t\"env\": \"\", // an object mapping keys to string values that will be added to the default env\n\t// \t           // you could, e.g. set {\"GOBIN\": \"/tmp\"} in order to avoid installing potentially\n\t// \t           // broken commands into your GOPATH*/bin\n\t//\n\t// \t\"kind\": \"\", // a string that identifies the linter, e.g. `go.vet'\n\t// \t            // this is useful to be able to identify what kind of error you're seeing,\n\t// \t            // but is otherwise optional\n\t//\n\t// \t\"cmd\": [], // the command to run, e.g. [\"go\", \"vet\"]\n\t// }\n\t//\n\t// the minimal linter is thus: {\"cmd\": [\"go\", \"vet\"]}\n\t//\n\t// builtin linters:\n\t//    {\"cmd\": [\"gs.flag.parse\"]}: try to report calls to e.g. flag.Int(),flag.String()\n\t//                                for which there is no call to flag.Parse()\n\t//\n\t//    {\"cmd\": [\"gs.types\"]}: this is essentially `gotype`, it will do a full typecheck of the pkg\n\t//                           similar to the compilers. it's faster than doing a full `go build`\n\t//                           however, it can lead to false-positive errors, especially on cgo\n\t//                           and other non-pure-go pkgs\n\t\"linters\": [],\n\n\t// whether or not to include snippets in the auto-completion list\n\t\"autocomplete_snippets\": true,\n\n\t// whether or not to include Test*, Benchmark* and Example* functions in the auto-completion list\n\t\"autocomplete_tests\": false,\n\n\t// whether or not builtin types and functions should be shown in the auto-completion list\n\t\"autocomplete_builtins\": false,\n\n\t// whether or not to show an expanded(closure) version of func types in the auto-completion list\n\t// e.g. `type Fun func(i int)`\n\t// will result in two entries `Fun` and `Fun {}`\n\t// expanding to `Fun` and `func(i) {...}` respectively\n\t\"autocomplete_closures\": false,\n\n\t// you may set this to a regexp which will be used to filter entries in the auto-completion list\n\t// e.g. \"autocomplete_filter_name\": \"^autogenerated_\" will prevent any type or function\n\t// whose name begins with \"autogenerated_\" from appearing in the auto-completion list\n\t\"autocomplete_filter_name\": \"\",\n\n\t// whether or not autocomplete should suggest possible imports when autocomplete fails to\n\t// find a match.\n\t// note: this feature only comes into effect when autocomplete was triggered after a dot, e.g. `fmt.|`\n\t\"autocomplete_suggest_imports\": false,\n\n\t// whether or not to show function call tip in the status bar\n\t// the same can be achieved ctrl+dot,ctrl+space using an output panel\n\t\"calltips\": false,\n\n\t// whether or not to use named imports when the basename of the import path doesn't match the pkg name\n\t// e.g. gosubli.me/go-foo would be imported as:\n\t//     import (\n\t//         foo \"gosubli.me/go-foo\"\n\t//     )\n\t\"use_named_imports\": false,\n\n\t// whether or not MarGo may automatically run `go install` for packages that are missing\n\t// when you `import`, or `autocomplete` them\n\t//\n\t// NOTE: you're encouraged to enable the new version of margo\n\t// and use a linter like `golang.GoInstall(\"-i\")` instead of setting this to `true`.\n\t\"autoinst\": false,\n\n\t// commands to run on (post) save - list of objects of the form {\"cmd\": \"...\", \"args\": {...}}\n\t// Any TextCommand may be run. Supported GS commands include:\n\t//     gs_comp_lint - compile the pkg and report any errors\n\t\"on_save\": [],\n\n\t// as an alternative to Sublime Text's snippet system you may add snippets to GoSublime's\n\t// code-completion by adding them to your user settings in the same format as bellow.\n\t//\n\t// \"snippets\": [\n\t//     {\n\t//         \"match\": {\"global\": true}, // these snippets will only be presented in the global scope\n\t//         \"snippets\": [\n\t//             {\"text\": \"init\", \"title\": \"func init()\", \"value\": \"func init() {\\n\\t$1\\n}\"}\n\t//         ]\n\t//     },\n\t//     {\n\t//         \"match\": {\"local\": true}, // these snippets will only be present in a function scope\n\t//         \"snippets\": [\n\t//             {\"text\": \"print\", \"title\": \"print(...)\", \"value\": \"print($1)\"},\n\t//             {\"text\": \"println\", \"title\": \"println(...)\", \"value\": \"println($1)\"}\n\t//         ]\n\t//     }\n\t// ]\n\t//\n\t// you maybe add field markers ($1, $2, etc) to the `value` string to dictate where the cursor is place\n\t// once a completion is expanded and where it's placed once you press tab afterwards.\n\t// duplicate markers e.g f(\"...\", $1, $1) will result in multiple cursors, one for each duplication.\n\t\"snippets\": [],\n\n\t\"default_snippets\": [\n\t\t{\n\t\t\t\"match\": {\"global\": false, \"pkgname\": \"\"},\n\t\t\t\"snippets\": [\n\t\t\t\t{\"text\": \"package ${default_pkgname}\", \"title\": \"\", \"value\": \"package ${default_pkgname}\\n\\n$1\\n\"}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"match\": {\"global\": true, \"pkgname\": \"^main$\"},\n\t\t\t\"snippets\": [\n\t\t\t\t{\"text\": \"func main\", \"title\": \"func main {...}\", \"value\": \"func main() {\\n\\t$0\\n}\\n\"}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"match\": {\"global\": true, \"pkgname\": \".\"},\n\t\t\t\"snippets\": [\n\t\t\t\t{\"text\": \"import\", \"title\": \"import (...)\", \"value\": \"import (\\n\\t\\\"$1\\\"\\n)\"},\n\t\t\t\t{\"text\": \"func\", \"title\": \"func {...}\", \"value\": \"func ${1:name}($2)$3 {\\n\\t$0\\n}\"},\n\t\t\t\t{\"text\": \"var\", \"title\": \"var (...)\", \"value\": \"var (\\n\\t$1\\n)\"},\n\t\t\t\t{\"text\": \"const\", \"title\": \"const (...)\", \"value\": \"const (\\n\\t$1\\n)\"},\n\t\t\t\t{\"text\": \"init\", \"title\": \"func init()\", \"value\": \"func init() {\\n\\t$1\\n}\"},\n\t\t\t\t{\n\t\t\t\t\t\"text\": \"func http handler\",\n\t\t\t\t\t\"title\": \"func(rw, req)\",\n\t\t\t\t\t\"value\": \"func ${1:name}(rw http.ResponseWriter, req *http.Request) {\\n\\t$0\\n}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"match\": {\"global\": true, \"pkgname\": \".\", \"has_types\": true},\n\t\t\t\"snippets\": [\n\t\t\t\t{\n\t\t\t\t\t\"text\": \"func (*${typename})\",\n\t\t\t\t\t\"title\": \"func (...) {...}\",\n\t\t\t\t\t\"value\": \"func (${1:${typename_abbr}} ${2:*}${typename}) ${3:name}($4)$5 {\\n\\t$0\\n}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"match\": {\"local\": true},\n\t\t\t\"snippets\": [\n\t\t\t\t{\"text\": \"func\", \"title\": \"func{...}()\", \"value\": \"func($1) {\\n\\t$0\\n}($2)\"},\n\t\t\t\t{\"text\": \"var\", \"title\": \"var [name] [type]\", \"value\": \"var ${1:name} ${2:type}\"}\n\t\t\t]\n\t\t}\n\t],\n\n\t// whether or not 9o should ask Sublime Text to show(scroll to) the end of a command's output\n\t// by default it will attempt to show the beginning\n\t\"9o_show_end\": false,\n\n\t// if set, 9o will run in single-instance mode instead of per-pkg\n\t// the name can be any string, so you can e.g. set it per-project and maintain project-specific\n\t// command history\n\t//\n\t// setting it to the string \"auto\" will automatically assign it a name based on the current directory/package\n\t\"9o_instance\": \"9o\",\n\n\t// if set 9o will use the specified color scheme.\n\t// the path must relative to `Packages` e.g. `Packages/My/9o Specific.tmTheme`\n\t// `\"\"` essentially means no color_scheme (like the Sublime Text console)\n\t// `\"default\"` leaves it as-is, i.e. matching the color_scheme that's being used for your other views\n\t\"9o_color_scheme\": \"default\",\n\n\t// a mapping of names to string commands e.g. `{\"ci\": \"git ci $_args\"}`\n\t// the environment variable `$_args` will be the raw, un-parsed argument passed to the command such that,\n\t// in the command `ci a.go    b.go`, `$_args` will be `a.go    b.go`\n\t// and the alias above expands to `git ci a.go    b.go`\n\t//\n\t// aliases are resolved recursively so they can be re-used, however recursive aliases are not supported.\n\t// e.g. if you define an alias `\"gs-git\": \"git --git-dir=... $_args\"`,\n\t// it will be used in the alias `\"gs-ci\": \"gs-git commit $_args\"`\n\t// but an alias `\"git\": \"git $_args\"` will fail because it resolves to itself.\n\t// you can, however create the alias `\"git\": \"$HOME/git/bin/git\"` which allows you to add commands\n\t// to 9o without them needing to appear in your $PATH\n\t//\n\t// examples\n\t// {\n\t//  \t\"git\": \"/usr/bin/git $_args\", // call git directly, otherwise it's run through your `shell`\n\t//  \t\"ci\": \"git commit $_args\",\n\t//  \t\"ci.\": \"ci $_fn\", // $_fn points to the abs path of the current file\n\t//  \t\"gro\": \"sh grep $_args 2>/dev/null\", // call grep through your shell and discard stderr\n\t// }\n\t//\n\t\"9o_aliases\": {},\n\n\t// what 9o command to run when (super or )ctrl+dot,ctrl+b is pressed\n\t// e.g. [\"go\", \"build\"]\n\t// the 9o command ^1 recalls the last command you ran manually\n\t// see 9o help(ctrl+9 \"help\") for more details about what commands are supported\n\t\"build_command\": [\"^1\"],\n\n\t// exclude files with the listed prefixes from the file browsing palette (ctrl+dot,ctrl+m)\n\t\"fn_exclude_prefixes\": [\".\", \"_\"],\n\n\t// Automatically set the syntax file for the specificed file extensions to `GoSublime: HTML`\n\t// `GoSublime: HTML` files are html files with the template delimiters `{{` and `}}` tailored to\n\t// Go templates (text/template, html/template)\n\t// (`.gohtml` files are automatically set by the syntax definition)\n\t\"gohtml_extensions\": [],\n\n\t// Export the listed environment variables to Sublime Text when the GoSublime settings change\n\t// so the env vars GS loads through your shell and project are available to other plugins\n\t// e.g. \"export_env_vars\": [\"PATH\"]\n\t\"export_env_vars\": [],\n}\n"
        },
        {
          "name": "Indentation Rules.tmPreferences",
          "type": "blob",
          "size": 1.849609375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<plist version=\"1.0\">\n<dict>\n\t<key>name</key>\n\t<string>Indentation Rules</string>\n\t<key>scope</key>\n\t<string>source.go</string>\n\t<key>settings</key>\n\t<dict>\n\t\t<key>decreaseIndentPattern</key>\n\t\t<string><![CDATA[(?x)\n\t\t^                               # start of line\n\t\t(.*\\*/)?                        # skip comments if present\n\t\t(                               # three possibilities\n\t\t\t\\s* \\}                      # whitespace and a closing curly brace\n\t\t\t(                           # capture:\n\t\t\t\t[^}{\"']* \\{             # anything other than curly braces or quotes, then open curly\n\t\t\t)?                          # (optional)\n\t\t\t[;\\s]*?                     # any whitespace or semicolons\n\t\t\t|\n\t\t\t(?:\\s* (case|default).*:)   # case statements pop back one indent\n\t\t\t|\n\t\t\t(?: \\) (?<! \\( ) )          # closing braces not preceded by opening braces\n\t\t)\n\t\t(//.*|/\\*.*\\*/\\s*)?             # skip any comments (optional)\n\t\t$                               # end of line\n\t\t]]></string>\n\t\t<key>increaseIndentPattern</key>\n\t\t<string>(?x)\n\t\t^\n\t\t(?: .* \\*/ )?                   # skip any comments\n\t\t(?:\n\t\t\t(.* \\{ [^}\"'\\n]*)           # lines containing an open curly but no quotes or close curly\n\t\t\t|                           # OR\n\t\t\t(?:\\s* (case|default).*:)   # case statements\n\t\t\t|                           # OR\n\t\t\t(.* \\( [^)\"'\\n]*)           # lines containing an open brace but no quotes or close brace\n\t\t)\n\t\t(//.*|/\\*.*\\*/\\s*)?             # skip any comments (optional)\n\t\t$\n\t\t</string>\n\t\t<!--\n\t\t<key>indentNextLinePattern</key>\n\t\t<string>(?x)^\n\t\t(?! .* [;:{}]                    # do not indent when line ends with ;, :, {, or }\n\t\t\t\\s* (//|/[*] .* [*]/ \\s* $)  #  …account for potential trailing comment\n\t\t)\n\t\t</string>\n\t\t-->\n\t\t<key>unIndentedLinePattern</key>\n\t\t<string>^\\s*((/\\*|\\*/|//|import\\b.*|package\\b.*).*)?$</string>\n\t</dict>\n</dict>\n</plist>\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0400390625,
          "content": "Copyright (c) 2012 The GoSublime Authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Main.sublime-menu",
          "type": "blob",
          "size": 2.37109375,
          "content": "[\n\t{\n\t\t\"caption\": \"Preferences\",\n\t\t\"id\": \"preferences\",\n\t\t\"children\":\n\t\t[\n\t\t\t{\n\t\t\t\t\"caption\": \"Package Settings\",\n\t\t\t\t\"id\": \"package-settings\",\n\t\t\t\t\"children\":\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t\"caption\": \"GoSublime\",\n\t\t\t\t\t\t\"children\":\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"Settings – Default\",\n\t\t\t\t\t\t\t\t\"command\": \"open_file\",\n\t\t\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\t\t\"file\": \"${packages}/GoSublime/GoSublime.sublime-settings\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"Settings – User\",\n\t\t\t\t\t\t\t\t\"command\": \"open_file\",\n\t\t\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\t\t\"file\": \"${packages}/User/GoSublime.sublime-settings\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \"caption\": \"-\" },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"Key Bindings – Default\",\n\t\t\t\t\t\t\t\t\"platform\": \"Linux\",\n\t\t\t\t\t\t\t\t\"command\": \"open_file\",\n\t\t\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\t\t\"file\": \"${packages}/GoSublime/Default (Linux).sublime-keymap\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"Key Bindings – Default\",\n\t\t\t\t\t\t\t\t\"platform\": \"Windows\",\n\t\t\t\t\t\t\t\t\"command\": \"open_file\",\n\t\t\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\t\t\"file\": \"${packages}/GoSublime/Default (Windows).sublime-keymap\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"Key Bindings – Default\",\n\t\t\t\t\t\t\t\t\"platform\": \"OSX\",\n\t\t\t\t\t\t\t\t\"command\": \"open_file\",\n\t\t\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\t\t\"file\": \"${packages}/GoSublime/Default (OSX).sublime-keymap\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \"caption\": \"-\" },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"Changes & Announcements\",\n\t\t\t\t\t\t\t\t\"command\": \"open_file\",\n\t\t\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\t\t\"file\": \"${packages}/GoSublime/CHANGELOG.md\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \"caption\": \"-\" },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"Read Me\",\n\t\t\t\t\t\t\t\t\"command\": \"open_file\",\n\t\t\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\t\t\"file\": \"${packages}/GoSublime/README.md\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"Usage & Tips\",\n\t\t\t\t\t\t\t\t\"command\": \"open_file\",\n\t\t\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\t\t\"file\": \"${packages}/GoSublime/USAGE.md\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \"caption\": \"-\" },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"Authors & Contributors\",\n\t\t\t\t\t\t\t\t\"command\": \"open_file\",\n\t\t\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\t\t\"file\": \"${packages}/GoSublime/AUTHORS.md\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"License (MIT)\",\n\t\t\t\t\t\t\t\t\"command\": \"open_file\",\n\t\t\t\t\t\t\t\t\"args\": {\n\t\t\t\t\t\t\t\t\t\"file\": \"${packages}/GoSublime/LICENSE.md\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \"caption\": \"-\" },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"caption\": \"Open Log File\",\n\t\t\t\t\t\t\t\t\"command\": \"gs_open_home_path\",\n\t\t\t\t\t\t\t\t\"args\": { \"fn\": \"log.txt\" }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n]\n"
        },
        {
          "name": "Preferences.sublime-settings",
          "type": "blob",
          "size": 0.09765625,
          "content": "{\n\t\"auto_complete_triggers\": [ {\"selector\": \"source.go - comment - string\", \"characters\": \".\"} ],\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.7119140625,
          "content": "# GoSublime [![Backers on Open Collective](https://opencollective.com/gosublime/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/gosublime/sponsors/badge.svg)](#sponsors) [![Build Status](https://travis-ci.org/DisposaBoy/GoSublime.svg?branch=master)](https://travis-ci.org/DisposaBoy/GoSublime)\n\n## Intro\n\nGoSublime is an IDE-like plugin for [Sublime Text 3](http://www.sublimetext.com/) mainly, but not limited to, providing integration for most of your Go/Golang development tools.\n\nSee https://margo.sh/b/hello-margo/ for a brief introduction to margo, the engine behind GoSublime.\n\n## Installation & Support\n\nSee https://margo.sh/b/migrate/ for instructions on how to install GoSublime.\n\nSee [SUPPORT.md](SUPPORT.md) for details about what level of support you can expect while using GoSublime.\n\n## Features\n\n- code completion from Gocode (fork);\n- context aware snippets via the code-completion popup;\n- sublime build system(ctrl+b) integrating with GoSublime 9o command prompt with live command output;\n- lint/syntax check as you type or on save;\n- quickly jump to any linter error reported in any open file or package;\n- quickly fmt your source or automatically on save to conform with your coding standards;\n- easily create a new go file and run it without needing to save it first (9o `replay`);\n- share your snippets (anything in the loaded file) on play.golang.org;\n- list declarations in the current file or package;\n- automatically add/remove package imports;\n- quickly jump your import section(automatically goes to the last import) where you can easily edit the pkg alias and return to where you were before;\n- go to definition of a package function or constant, etc.;\n- create your own margo extensions in Go to e.g. add context-aware commands to the command palette.\n\n## Demo\n\n- Old demo http://vimeo.com/disposaboy/gosublime-demo2\n\n## Copyright, License & Contributors\n\nmargo and GoSublime are released under the MIT license. See [LICENSE.md](LICENSE.md)\n\nThanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/gosublime/contributors.svg?width=890\" /></a>\n\n### Supporters\n\nGoSublime has received support from many kind individuals and as a thank you I've added most to [THANKS.md](THANKS.md) file as a way of saying _Thank You_. Some donors donated anonymously and so are not listed, however. If you have donated and would like to add an entry to this file, feel free to open a pull request.\n\n### Donations\n\nSee https://margo.sh/funding/ for ways in which you can help support future development of margo and GoSublime.\n\n<hr/>\n\nBecome a backer or a sponsor on OpenCollective\n\n### Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/gosublime#backer)]\n\n<a href=\"https://opencollective.com/gosublime#backers\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/backers.svg?width=890\"></a>\n\n### Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/gosublime#sponsor)]\n\n<a href=\"https://opencollective.com/gosublime/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/gosublime/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/gosublime/sponsor/9/avatar.svg\"></a>\n\n<br>\n\n<a href=\"https://margo.sh/sponsors/0\" target=\"_blank\"><img src=\"https://margo.sh/sponsors/0.svg?2\"></a>\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 2.3125,
          "content": "# Support\n\nThis document aims to clarify what level of support you can expect while using GoSublime.\n\nUse of GoSublime assumes you've read and understood _all_ the points herein.\n\n## Sublime Text\n\n- All versions of Sublime Text **3** should be supported.\n- For versions before the official 3.0 release in September 2017, graceful fall-backs are in place.\n- Testing is only done for the current non-beta version and only on Linux.\n\n## Experience\n\n- It is assumed that you are experienced with Sublime Text, basic key bindings, its settings system, etc.\n- It is assumed that you already have a working Go installation: https://golang.org/doc/install.\n\n## Package Control\n\n- Package Control is not supported\n\n## Go\n\nGoSublime is backed by https://margo.sh/ to which the following points apply:\n\n- Like the official Go [release policy](https://golang.org/doc/devel/release.html#policy), only the current and previous released versions of Go are supported.\n- Only the main `gc` tool-chain distributed by https://golang.org/ is supported.\n- margo should not require a cgo-enabled Go installation, but non-cgo builds i.e. `CGO_ENABLED=0` are not tested.\n\n## Go Modules\n\nAt this time, Go modules are only partially supported.\nAuto-completion and other features built directly into margo should work in most cases,\nbut features backed by external tools e.g. `goto definition` might work.\n\nWe plan to implement most of these features internally as our (type-check) importer matures.\n\n## Operating Systems\n\n- Testing is only done on Arch Linux.\n- Windows and macOS should work without issue, but no testing is done on them.\n\n## Tools\n\nPlease note:\n\n- By default `fmt` is achieved through direct use of the packages in the stdlib and not the binaries on your system.\n\n## Sponsors & Backers\n\nWhile we will make an effort to respond to all issues, we have only a limited amount of time and have chosen to give higher priority to our sponsors and backers (including those who donate outside of Open Collective and Patreon).\n\nIf an urgent response is required, or an issue has gone without response for more than a few days, our sponsors and backers are welcome to send an email to support@margo.sh.\n\n## Issues with sensitive details\n\nIf your issue contains sensitive details or you would otherwise prefer not to post it publicly, you're welcome to send an email to support@margo.sh.\n"
        },
        {
          "name": "THANKS.md",
          "type": "blob",
          "size": 1.150390625,
          "content": "This is the list of non-anonymous GoSublime donors and supporters (the thought counts as well).\nIts purpose is to thank the many supporters of myself and GoSublime, so thank you all! :)\n\n(If you donated anonymously and would like to be added, or would otherwise liked your entry to be updated(or removed) please contact me)\n\n* Alexey \"AlekSi\" Palazhchenko https://github.com/AlekSi\n* AmandaC https://github.com/AmandaCameron\n* Daniele Baroncelli http://www.baroncelli.eu\n* E Brady https://github.com/ebrady\n* Erik Unger https://github.com/ungerik\n* Frank Schroeder https://go-left.com/\n* Fredrik Ehnbom http://pledgie.com/accounts/quarnster\n* guillermooo https://github.com/guillermooo\n* Hans Stimer\n* Joe Farro http://jf.io/\n* Joe Poirier https://github.com/jpoirier\n* Jérémy Ozog http://www.jeremy-ozog.fr\n* Karl Tuhkanen\n* Mark Smith http://qq.is\n* Maxim Kouprianov https://github.com/Xlab\n* Nathan Youngman http://nathany.com/\n* Peter Olds https://github.com/polds\n* ProGNOMmers https://github.com/ProGNOMmers\n* Ralf Rottmann http://twitter.com/ralf\n* Sander van Harmelen https://github.com/svanharmelen\n* Tom Westberg\n* Yves Junqueira http://pledgie.com/accounts/@cetico\n"
        },
        {
          "name": "USAGE.md",
          "type": "blob",
          "size": 8.3388671875,
          "content": "Usage\n=====\n\nNote\n----\n\n* Unless otherwise mentioned, `super` replaces `ctrl` in key bindings on OS X.\n* A mention of a (GO)PATH variable uses a colon(`:`) as the separator.\nThis is the PATH separator on Linux and OS X, Windows uses a semi-colon(`;`)\n\nSettings\n--------\n\nYou may customize GoSublime's behaviour by (creating and) customizing the file `Packages/User/GoSublime.sublime-settings`. Default settings are documented in `Packages/GoSublime/GoSublime.sublime-settings`. **WARNING** Do not edit any package file outside of `Packages/User/`, including files inside `Packages/GoSublime/` unless you have a reason to. These files are subject to being overwritten on update of the respective package and/or Sublime Text itself. You may also inadvertently prevent the respective package from being able to update via git etc.\n\nQuirks\n------\n\nThis section assumes you know what `GOPATH` is and how to set it. If you don't, please see http://golang.org/doc/code.html\n\nIn some systems, environment variables are not passed around as expected.\nThe result of which is that some commands e.g `go build` don't work\nas the command cannot be found or `GOPATH` is not set. To get around this\nthe simplest thing to do is to set these variables in the settings file.\nSee the documentation for the `env` and/or `shell` setting, both documented in the default\nsettings file `Packages/User/GoSublime.sublime-settings`\n\nCode Completion\n---------------\n\nCompletion can be accessed by typing the (default) key combination `CTRL+[SPACE]` inside a Golang file.\n\nKey Bindings\n------------\n\nBy default, a number of key bindings are provided. They can be viewed by opening the command palette\nand typing `GoSublime:` or via the key binding `ctrl+dot`,`ctrl+dot` (or `super+dot`,`super+dot` on OS X).\nWherever I refer to a key binding with `ctrl+` it is by default defined as `super+` on OS X unless stated otherwise.\n\nUseful Key Bindings\n-------------------\n\nOften when commenting out a line, the immediate action following this is to move the cursor to the next line either to continue working or comment out the following line.\n\nWith this key binding, you can have the line commented out and the cursor automatically moved to the next line.\n\n{ \"keys\": [\"ctrl+/\"], \"command\": \"gs_comment_forward\", \"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }] },\n\nPackage Imports\n---------------\n\nPressing `ctrl+dot`,`ctrl+p` will open the package list from which you can quickly import or delete a package import.\nThe usage is the same for both operations. If the package is already imported then it will appear near the top\nand be marked as a *delete* operation, so in effect it is a toggle. If you want to edit the alias of a package e.g\na database driver: first import the package as normal and then press `ctrl+dot`,`ctrl+i` to quickly jump\nthe last imported package. Once edited you can return to where you were by pressing `ctrl+dot`,`ctrl+[`\n\nBuilding, Testing and the Go command\n------------------------------------\n\nGoSublime comes with partial command/shell integration `9o`. For more information about 9o, see Packages/GoSublime/9o.md\nor from within Sublime Text press `ctrl+9` or `super+9` and type `help`.\n\nTo run package tests you have 3 options.\n\n* press `ctrl+dot`,`ctrl+t` to open the testing quick panel. This offers basic/common options such\nas running all benchmark functions or running a single test function.\n\n* inside a `_test.go` file, press `ctrl+shift` and left-click on the name of a Test, Benchmark or Example\nfunction e.g. `TestAbc` to execute that function only.\n\n* if the above options are too minimalistic or you would otherwise like to call `go test` with your own options,\nopen 9o by pressing `ctrl+9` where you have access to the `go` command.\n\nIn the case of building a package, 9o provides a replay command (see 9o.md for details) that will execute\nthe command if the pkg is a command pkg (package main) or run all tests if it's a normal pkg.\nThe replay command is bound to `ctrl+dot`,`ctrl+r` for easy access.\n\nGoSublime provides an override for the Sublime Text build-system via `ctrl+b`. In the menu `Tools > Build System` it's named `GoSublime`.\n`ctrl+b` is automatically handled by Sublime Text, so if you have another `Go` build system chosen, `ctrl+b`\nwill execute that instead. To access the `GoSublime` build system directly press `ctrl+dot`,`ctrl+b`.\nThis build system simply opens 9o and expand the last command. i.e. executes the 9o command `^1`.\n\nPer-project Settings & Project-based GOPATH\n-------------------------------------------\n\nIf you have a settings object called `GoSublime` in your project settings its values will override those\ninside the `GoSublime.sublime-settings` file. As a side-effect you may set a specific GOPATH for a single\nproject.\n\n`my-project.sublime-project`\n\n\t{\n\t    \"settings\": {\n\t        \"GoSublime\": {\n\t            \"env\": {\n\t            \t\"GOPATH\": \"$HOME/my-project\"\n\t            }\n\t        }\n\t    },\n\t    \"folders\": []\n\t}\n\nIf the only setting you use this functionality to change is the GOPATH, then you may be able to find\nsuccess by adding the string `$GS_GOPATH` to your global `GOPATH` setting e.g.\n\n\t{\n\t\t\"env\": { \"GOPATH\": \"$HOME/go:$GS_GOPATH\" }\n\t}\n\n\n`GS_GOPATH` is a pseudo-environment-variable. It's changed to match a possible GOPATH based on:\n\n* the current working directory, e.g. `~/go/src/pkg` then `$GS_GOPATH` will be `~/go/`\n\n* or the path the current `.go` file (or last activated `.go` file if the current file is not `.go`) e.g. if your file path is `/tmp/go/src/hello/main.go` then it will be `/tmp/go`\n\nIf you would like to use `GS_GOPATH` exclusively, you may set the option `use_gs_gopath` to true.\nThis automatically changes `GOPATH` to the value of `$GS_GOPATH` if `$GS_GOPATH` is not empty.\nThis allows you to e.g. automatically adapt `GOPATH` to your current project rather than\nreverting to your normal `GOPATH`.\n\nLint/Syntax Check\n-----------------\n\nThe source is continuously scanned for syntax errors. GoSublime will try to catch some common errors, like\nforgetting to call flag.Parse (if this causes false positives, please file a bug report).\n\nApart from the highlighting in the view using a dot icon in the gutter and usually underlining the\nfirst character of an error region. You are given an entry in the status bar in the form: `GsLint (N)`\nwhere `N` is the number of errors found in that file. You can show the list of errors and navigate to\nthem by pressing `ctrl+dot`,`ctrl+e`. Errors for the current line are shown in the status bar.\n\nFmt\n---\n\nBy default `ctrl+s` and `ctrl+shift+s` are overridden to fmt the the file before saving it. You may also\nfmt a file without saving it by pressing `ctrl+dot`,`ctrl+f`\n\nGodoc/Goto Definition\n---------------------\n\nTo show the source and associated comments(documentation) of a variable press `ctrl+dot`,`ctrl+h` or\nusing the mouse `ctrl+shift+right-click`. This will show an output panel that presents the full\ndefinition of the variable or function under the (first) cursor along with its comments.\nTo goto the definition instead, press `ctrl+dot`,`ctrl+g` or alternatively using the mouse `ctrl+shift+left-click`.\n\nDeclarations/Code Outline?\n--------------------------\n\nA very minimal form of code outline is provided. You can press `ctrl+dot`,`ctrl+d` to list all the declarations\nin the current file.\n\nNew File\n--------\n\nPressing `ctrl+dot`,`ctrl+n` will create a new Go file with the package declaration filled out.\nIt will try to be intelligent about it, so if the current directory contains package `mypkg` it will use that as the package name.\n\nMisc. Helper Commands\n---------------------\n\nThe following commands can be assigned key bindings to further improve your editing experience.\n\n* gs_fmt - this command runs `gofmt` on the current buffer. Also available via the key binding `ctrl+dot`,`ctrl+f`.\n\n* gs_fmt_save, gs_fmt_prompt_save_as - these commands will run the `go_fmt` followed by `save` or `prompt_save_as` - these are bound to `ctrl+s` and `ctrl+shift+s` respectively, by default.\n\n* gs_comment_forward - this command will activate the `ctrl+/` commenting and move the cursor to the next line, allowing you to comment/uncomment multiple lines in sequence without breaking to move the cursor. You can replace the default behaviour by overriding it in your user key bindings (Preferences > Key Bindings - User) with `{ \"keys\": [\"ctrl+/\"], \"command\": \"gs_comment_forward\", \"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"source.go\" }] }`\n"
        },
        {
          "name": "_after.py",
          "type": "blob",
          "size": 0.025390625,
          "content": "\ndef gs_init(m={}):\n\tpass\n"
        },
        {
          "name": "_before.py",
          "type": "blob",
          "size": 0.025390625,
          "content": "\ndef gs_init(m={}):\n\tpass\n"
        },
        {
          "name": "articles",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "gosubl",
          "type": "tree",
          "content": null
        },
        {
          "name": "gs9o.py",
          "type": "blob",
          "size": 18.7119140625,
          "content": "from .gosubl import about\nfrom .gosubl import gs\nfrom .gosubl import gsq\nfrom .gosubl import gsshell\nfrom .gosubl import mg9\nfrom .gosubl import sh\nfrom .gosubl.margo import mg\nfrom .gosubl.margo_state import actions\nimport datetime\nimport json\nimport os\nimport re\nimport shlex\nimport string\nimport sublime\nimport sublime_plugin\nimport uuid\nimport webbrowser\n\nDOMAIN = \"9o\"\nAC_OPTS = sublime.INHIBIT_WORD_COMPLETIONS | sublime.INHIBIT_EXPLICIT_COMPLETIONS\nSPLIT_FN_POS_PAT = re.compile(r'(.+?)(?:[:](\\d+))?(?:[:](\\d+))?$')\nURL_SCHEME_PAT = re.compile(r'[\\w.+-]+://')\nURL_PATH_PAT = re.compile(r'(?:[\\w.+-]+://|(?:www|(?:\\w+\\.)*(?:golang|pkgdoc|gosublime)\\.org))')\nHIST_EXPAND_PAT = re.compile(r'^[\\'\"\\s]*(\\^+)\\s*(\\d+)[\\'\"\\s]*$')\n\nHOURGLASS = u'\\u231B'\n\nDEFAULT_COMMANDS = [\n\t'help',\n\t'run',\n\t'build',\n\t'replay',\n\t'clear',\n\t'go',\n\t'go build',\n\t'go clean',\n\t'go doc',\n\t'go env',\n\t'go fix',\n\t'go fmt',\n\t'go get',\n\t'go install',\n\t'go list',\n\t'go run',\n\t'go test',\n\t'go tool',\n\t'go version',\n\t'go vet',\n\t'go help',\n\t'settings',\n\t'env',\n\t'share',\n\t'hist',\n\t'hist erase',\n\t'cd',\n]\nDEFAULT_CL = [(s, s+' ') for s in DEFAULT_COMMANDS]\n\ntry:\n\tstash\nexcept NameError:\n\tstash = {}\n\ntry:\n\ttid_alias\nexcept NameError:\n\ttid_alias = {}\n\ndef active_wd(win=None):\n\t_, v = gs.win_view(win=win)\n\treturn gs.basedir_or_cwd(v.file_name() if v else '')\n\n_9o_instance_default = '9o'\n\ndef _9o_instance(wd):\n\tname = gs.setting('9o_instance') or _9o_instance_default\n\tif name == 'auto':\n\t\tname = wd or name\n\n\treturn name.replace('#', '~')\n\ndef _rkey(wd):\n\t_, rkey = mg.run_tokens.next()\n\treturn rkey.replace('#', '~')\n\ndef _rcmd_wdid_rkey(*, fd):\n\tl = fd.split('#', 1)\n\treturn (l[0], l[1]) if len(l) == 2 else (_wdid(_9o_instance_default), l[0])\n\ndef _rcmd_fd(*, wd, rkey):\n\treturn '%s#%s' % (_wdid(wd), rkey)\n\ndef _hkey(wd):\n\treturn '9o.hist.%s' % _9o_instance(wd)\n\ndef _wdid(wd):\n\treturn '9o://%s' % _9o_instance(wd)\n\nclass EV(sublime_plugin.EventListener):\n\tdef on_query_completions(self, view, prefix, locations):\n\t\tpos = gs.sel(view).begin()\n\t\tif view.score_selector(pos, 'text.9o') == 0:\n\t\t\treturn []\n\n\t\tcl = set()\n\n\t\thkey = _hkey(view.settings().get('9o.wd', ''))\n\t\tcl.update((k, k+' ') for k in gs.dval(gs.aso().get(hkey), []))\n\t\tcl.update((k, k+' ') for k in aliases())\n\t\tcl.update((k, k+' ') for k in builtins())\n\t\tcl.update(DEFAULT_CL)\n\n\t\treturn ([cl_esc(e) for e in sorted(cl)], AC_OPTS)\n\ndef cl_esc(e):\n\treturn (e[0], e[1].replace('$', '\\\\$'))\n\nclass Gs9oBuildCommand(sublime_plugin.WindowCommand):\n\tdef is_enabled(self):\n\t\tview = gs.active_valid_go_view(self.window)\n\t\treturn view is not None\n\n\tdef run(self):\n\t\tview = self.window.active_view()\n\t\targs = {'run': gs.setting('build_command', ['^1'])} if gs.is_pkg_view(view) else {}\n\t\tview.run_command('gs9o_open', args)\n\nclass Gs9oInsertLineCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit, after=True):\n\t\tinsln = lambda: self.view.insert(edit, gs.sel(self.view).begin(), \"\\n\")\n\t\tif after:\n\t\t\tself.view.run_command(\"move_to\", {\"to\": \"hardeol\"})\n\t\t\tinsln()\n\t\telse:\n\t\t\tself.view.run_command(\"move_to\", {\"to\": \"hardbol\"})\n\t\t\tinsln()\n\t\t\tself.view.run_command(\"move\", {\"by\": \"lines\", \"forward\": False})\n\n\nclass Gs9oMoveHist(sublime_plugin.TextCommand):\n\tdef run(self, edit, up):\n\t\tview = self.view\n\t\tpos = gs.sel(view).begin()\n\t\tif view.score_selector(pos, 'prompt.9o') <= 0:\n\t\t\treturn\n\n\t\taso = gs.aso()\n\t\tvs = view.settings()\n\t\twd = vs.get('9o.wd')\n\t\thkey = _hkey(wd)\n\t\thist = [s for s in gs.dval(aso.get(hkey), []) if s.strip()]\n\t\tif not hist:\n\t\t\treturn\n\n\t\tr = view.extract_scope(pos)\n\t\tcmd = view.substr(r).strip('#').strip()\n\t\ttry:\n\t\t\tidx = hist.index(cmd) + (-1 if up else 1)\n\t\t\tfound = True\n\t\texcept Exception:\n\t\t\tidx = -1\n\t\t\tfound = False\n\n\t\tif cmd and not found:\n\t\t\thist.append(cmd)\n\t\t\taso.set(hkey, hist)\n\t\t\tgs.save_aso()\n\n\t\tif idx >= 0 and idx < len(hist):\n\t\t\tcmd = hist[idx]\n\t\telif up:\n\t\t\tif not found:\n\t\t\t\tcmd = hist[-1]\n\t\telse:\n\t\t\tcmd = ''\n\n\t\tview.replace(edit, r, '# %s \\n' % cmd)\n\t\tn = view.line(r.begin()).end()\n\t\tview.sel().clear()\n\t\tview.sel().add(sublime.Region(n, n))\n\nclass Gs9oInitCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit, wd=None):\n\t\tv = self.view\n\t\tmg.view(v.id(), view=v).is_9o = True\n\t\tvs = v.settings()\n\n\t\tif not wd:\n\t\t\twd = vs.get('9o.wd', active_wd(win=v.window()))\n\n\t\twas_empty = v.size() == 0\n\t\ts = '[ %s ] # \\n' % gs.simple_fn(wd).replace('#', '~')\n\n\t\tif was_empty:\n\t\t\tv.insert(edit, 0, 'GoSublime %s 9o: type `help` for help and command documentation\\n\\n' % about.VERSION)\n\n\t\tif was_empty or v.substr(v.size()-1) == '\\n':\n\t\t\tv.insert(edit, v.size(), s)\n\t\telse:\n\t\t\tv.insert(edit, v.size(), '\\n'+s)\n\n\t\tv.sel().clear()\n\t\tn = v.size()-1\n\t\tv.sel().add(sublime.Region(n, n))\n\n\t\topts = {\n\t\t\t\"rulers\": [],\n\t\t\t\"fold_buttons\": True,\n\t\t\t\"fade_fold_buttons\": False,\n\t\t\t\"gutter\": True,\n\t\t\t\"margin\": 0,\n\t\t\t# pad mostly so the completion menu shows on the first line\n\t\t\t\"line_padding_top\": 1,\n\t\t\t\"line_padding_bottom\": 1,\n\t\t\t\"tab_size\": 2,\n\t\t\t\"word_wrap\": True,\n\t\t\t\"indent_subsequent_lines\": True,\n\t\t\t\"line_numbers\": False,\n\t\t\t\"auto_complete\": True,\n\t\t\t\"auto_complete_selector\": \"text\",\n\t\t\t\"highlight_line\": True,\n\t\t\t\"draw_indent_guides\": True,\n\t\t\t\"scroll_past_end\": True,\n\t\t\t\"indent_guide_options\": [\"draw_normal\", \"draw_active\"],\n\t\t\t\"word_separators\": \"./\\\\()\\\"'-:,.;<>~!@#$%&*|+=[]{}`~?\",\n\t\t}\n\t\topts.update(gs.setting('9o_settings'))\n\n\t\tfor opt in opts:\n\t\t\tvs.set(opt, opts[opt])\n\n\t\tvs.set(\"9o\", True)\n\t\tvs.set(\"9o.wd\", wd)\n\n\t\tcolor_scheme = gs.setting(\"9o_color_scheme\", \"\")\n\t\tif color_scheme:\n\t\t\tif color_scheme == \"default\":\n\t\t\t\tvs.erase(\"color_scheme\")\n\t\t\telse:\n\t\t\t\tvs.set(\"color_scheme\", color_scheme)\n\t\telse:\n\t\t\tvs.set(\"color_scheme\", \"\")\n\n\t\tv.set_syntax_file(gs.tm_path('9o'))\n\n\t\tif was_empty:\n\t\t\tv.show(0)\n\t\telse:\n\t\t\tv.show(v.size()-1)\n\n\t\tos.chdir(wd)\n\nclass Gs9oOpenCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit, **kw):\n\t\twin = self.view.window() or sublime.active_window()\n\t\twin.run_command('gs9o_win_open', kw)\n\nclass Gs9oWinOpenCommand(sublime_plugin.WindowCommand):\n\tdef run(\n\t\tself,\n\t\twd = None,\n\t\trun = [],\n\t\tsave_hist = False,\n\t\tfocus_view = True,\n\t\tshow_view = True,\n\t\tenv = {},\n\t\tpush_output = [],\n\t\twdid = '',\n\t\taction_data={},\n\t):\n\t\twin = self.window\n\t\twid = win.id()\n\t\tif not wd:\n\t\t\twd = active_wd(win=win)\n\n\t\tid = wdid or _wdid(wd)\n\t\tst = stash.setdefault(wid, {})\n\t\tv = st.get(id)\n\t\tif v is None:\n\t\t\tv = win.get_output_panel(id)\n\t\t\tst[id] = v\n\n\t\tif show_view:\n\t\t\twin.run_command(\"show_panel\", {\"panel\": (\"output.%s\" % id)})\n\n\t\tif focus_view:\n\t\t\twin.focus_view(v)\n\n\t\tif not push_output:\n\t\t\tv.run_command('gs9o_init', {'wd': wd})\n\n\t\tif push_output:\n\t\t\tv.run_command('gs9o_push_output', push_output)\n\n\t\tif run:\n\t\t\tv.run_command('gs9o_paste_exec', {\n\t\t\t\t'cmd': ' '.join(shlex.quote(s) for s in run),\n\t\t\t\t'save_hist': save_hist,\n\t\t\t\t'env': env,\n\t\t\t\t'action_data': action_data,\n\t\t\t})\n\nclass Gs9oPasteExecCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit, cmd, save_hist=False, env={}, action_data={}):\n\t\tview = self.view\n\t\tview.insert(edit, view.line(view.size()-1).end(), cmd)\n\t\tview.sel().clear()\n\t\tview.sel().add(view.line(view.size()-1).end())\n\t\tview.run_command('gs9o_exec', {'save_hist': save_hist, 'env': env, 'action_data': action_data})\n\nclass Gs9oOpenSelectionCommand(sublime_plugin.TextCommand):\n\tdef is_enabled(self):\n\t\tpos = gs.sel(self.view).begin()\n\t\treturn self.view.score_selector(pos, 'text.9o') > 0\n\n\tdef run(self, edit):\n\t\tactions = []\n\t\tv = self.view\n\t\tsel = gs.sel(v)\n\t\tif (sel.end() - sel.begin()) == 0:\n\t\t\tpos = sel.begin()\n\t\t\tinscope = lambda p: v.score_selector(p, 'path.9o') > 0\n\t\t\tif inscope(pos):\n\t\t\t\tactions.append(v.substr(v.extract_scope(pos)))\n\t\t\telse:\n\t\t\t\tpos -= 1\n\t\t\t\tif inscope(pos):\n\t\t\t\t\tactions.append(v.substr(v.extract_scope(pos)))\n\t\t\t\telse:\n\t\t\t\t\tline = v.line(pos)\n\t\t\t\t\tfor cr in v.find_by_selector('path.9o'):\n\t\t\t\t\t\tif line.contains(cr):\n\t\t\t\t\t\t\tactions.append(v.substr(cr))\n\t\telse:\n\t\t\tactions.append(v.substr(sel))\n\n\t\tact_on(v, actions)\n\ndef act_on(view, actions):\n\tfor a in actions:\n\t\tif act_on_path(view, a):\n\t\t\tbreak\n\ndef act_on_path(view, path):\n\trow = 0\n\tcol = 0\n\n\tm = gs.VFN_ID_PAT.search(path)\n\tif m:\n\t\tpath = 'gs.view://%s' % m.group(1)\n\t\tm2 = gs.ROWCOL_PAT.search(m.group(2))\n\t\tif m2:\n\t\t\trow = int(m2.group(1))-1 if m2.group(1) else 0\n\t\t\tcol = int(m2.group(2))-1 if m2.group(2) else 0\n\telse:\n\t\tif URL_PATH_PAT.search(path):\n\t\t\tif path.lower().startswith('gs.packages://'):\n\t\t\t\tpath = os.path.join(gs.packages_dir(), path[14:])\n\t\t\telse:\n\t\t\t\ttry:\n\t\t\t\t\tif not URL_SCHEME_PAT.search(path):\n\t\t\t\t\t\tpath = 'http://%s' % path\n\t\t\t\t\tgs.notify(DOMAIN, 'open url: %s' % path)\n\t\t\t\t\twebbrowser.open_new_tab(path)\n\t\t\t\t\treturn True\n\t\t\t\texcept Exception:\n\t\t\t\t\tgs.error_traceback(DOMAIN)\n\n\t\t\t\treturn False\n\n\t\twd = view.settings().get('9o.wd') or active_wd()\n\t\tm = SPLIT_FN_POS_PAT.match(path)\n\t\tpath = gs.apath((m.group(1) if m else path), wd)\n\t\trow = max(0, int(m.group(2))-1 if (m and m.group(2)) else 0)\n\t\tcol = max(0, int(m.group(3))-1 if (m and m.group(3)) else 0)\n\n\tif m or os.path.exists(path):\n\t\tgs.focus(path, row, col, win=view.window())\n\t\treturn True\n\telse:\n\t\tgs.notify(DOMAIN, \"Invalid path `%s'\" % path)\n\n\treturn False\n\nclass Gs9oExecCommand(sublime_plugin.TextCommand):\n\tdef is_enabled(self):\n\t\tpos = gs.sel(self.view).begin()\n\t\treturn self.view.score_selector(pos, 'text.9o') > 0\n\n\tdef run(self, edit, save_hist=False, env={}, action_data={}):\n\t\tview = self.view\n\t\tpos = gs.sel(view).begin()\n\t\tline = view.line(pos)\n\t\twd = view.settings().get('9o.wd')\n\n\t\ttry:\n\t\t\tos.chdir(wd)\n\t\texcept Exception:\n\t\t\tgs.error_traceback(DOMAIN)\n\n\t\tln = view.substr(line).split('#', 1)\n\t\tif len(ln) == 2:\n\t\t\tcmd = ln[1].strip()\n\t\t\tif cmd:\n\t\t\t\tvs = view.settings()\n\t\t\t\taso = gs.aso()\n\t\t\t\thkey = _hkey(wd)\n\t\t\t\thist = gs.dval(aso.get(hkey), [])\n\n\t\t\t\tm = HIST_EXPAND_PAT.match(cmd)\n\t\t\t\tif m:\n\t\t\t\t\tpfx = m.group(1)\n\t\t\t\t\thl = len(hist)\n\t\t\t\t\tidx = hl - int(m.group(2))\n\t\t\t\t\tcmd = ''\n\t\t\t\t\tif idx >= 0 and idx < hl:\n\t\t\t\t\t\tcmd = hist[idx]\n\n\t\t\t\t\tif pfx == '^' or not cmd:\n\t\t\t\t\t\tview.replace(edit, line, ('%s# %s' % (ln[0], cmd)))\n\t\t\t\t\t\treturn\n\t\t\t\telif save_hist:\n\t\t\t\t\ttry:\n\t\t\t\t\t\thist.remove(cmd)\n\t\t\t\t\texcept ValueError:\n\t\t\t\t\t\tpass\n\t\t\t\t\thist.append(cmd)\n\t\t\t\t\taso.set(hkey, hist)\n\t\t\t\t\tgs.save_aso()\n\n\t\t\tif not cmd:\n\t\t\t\tview.run_command('gs9o_init')\n\t\t\t\treturn\n\n\t\t\trkey = _rkey(wd)\n\t\t\t# view.add_regions(rkey, [sublime.Region(line.begin(), view.size())], '')\n\t\t\tview.add_regions(rkey, [line], '')\n\t\t\tview.replace(edit, line, (u'[ `%s` %s ]' % (cmd, HOURGLASS)))\n\t\t\tview.run_command('gs9o_init')\n\n\t\t\tnv = sh.env()\n\t\t\tnv.update(env)\n\t\t\tanv = nv.copy()\n\t\t\tseen = {}\n\t\t\tam = aliases()\n\t\t\twhile True:\n\t\t\t\tcli = cmd.split(' ', 1)\n\t\t\t\tnm = cli[0]\n\t\t\t\tif not nm:\n\t\t\t\t\tbreak\n\n\t\t\t\tag = cli[1].strip() if len(cli) == 2 else ''\n\n\t\t\t\talias = am.get(nm, '')\n\t\t\t\tif not alias:\n\t\t\t\t\tbreak\n\n\t\t\t\tif alias in seen:\n\t\t\t\t\tgs.error(DOMAIN, 'recursive alias detected: `%s`' % alias)\n\t\t\t\t\tbreak\n\n\t\t\t\tseen[alias] = True\n\t\t\t\tanv['_args'] = ag\n\t\t\t\tcmd = string.Template(alias).safe_substitute(anv)\n\n\t\t\tif nm != 'sh':\n\t\t\t\targs = []\n\t\t\t\tif ag:\n\t\t\t\t\targs = shlex.split(gs.astr(ag))\n\n\t\t\t\tf = builtins().get(nm)\n\t\t\t\tif f:\n\t\t\t\t\ttry:\n\t\t\t\t\t\tf(view, edit, args, wd, rkey, action_data=action_data)\n\t\t\t\t\texcept TypeError:\n\t\t\t\t\t\tf(view, edit, args, wd, rkey)\n\t\t\t\t\treturn\n\t\t\t\telse:\n\t\t\t\t\t_rcmd(\n\t\t\t\t\t\tview=view,\n\t\t\t\t\t\tedit=edit,\n\t\t\t\t\t\tname=nm,\n\t\t\t\t\t\targs=args,\n\t\t\t\t\t\twd=wd,\n\t\t\t\t\t\trkey=rkey,\n\t\t\t\t\t\taction_data=action_data,\n\t\t\t\t\t)\n\t\t\t\t\treturn\n\n\t\t\tif nm == 'sh':\n\t\t\t\targs = sh.cmd(ag)\n\t\t\t\tcmd_sh(view, edit, args, wd, rkey)\n\t\t\telse:\n\t\t\t\targs = sh.cmd(cmd)\n\t\telse:\n\t\t\tview.insert(edit, gs.sel(view).begin(), '\\n')\n\nclass Gs9oPushOutput(sublime_plugin.TextCommand):\n\tdef run(self, edit, rkey, output, hourglass_repl='', done=True):\n\t\tview = self.view\n\t\toutput = '\\t%s' % gs.ustr(output).strip().replace('\\r', '').replace('\\n', '\\n\\t')\n\t\txpos, vpos = view.viewport_position()\n\t\typos = view.layout_extent()[1] - vpos\n\t\tregions = view.get_regions(rkey)\n\t\tif regions:\n\t\t\tprompt = view.line(regions[0].begin())\n\t\t\tif done:\n\t\t\t\tlsrc = view.substr(prompt).replace(HOURGLASS, (hourglass_repl or '| done'))\n\t\t\t\tview.replace(edit, prompt, lsrc)\n\n\t\t\tregions = view.get_regions(rkey)\n\t\t\tr = view.line(regions[-1].end())\n\t\t\tif output.strip():\n\t\t\t\tn = view.insert(edit, r.end(), '\\n%s' % output)\n\t\t\t\tr = sublime.Region(prompt.begin(), r.end() + n)\n\t\t\t\tview.erase_regions(rkey)\n\t\t\t\tview.add_regions(rkey, [r])\n\t\telse:\n\t\t\tn = view.size()\n\t\t\tview.insert(edit, n, '\\n%s' % output)\n\t\t\tr = sublime.Region(n, view.size())\n\n\t\tif done:\n\t\t\tif gs.setting('9o_show_end') is True:\n\t\t\t\tview.show(r.end(), True)\n\t\t\telse:\n\t\t\t\tview.show(r.begin(), True)\n\t\telif gs.sel(view).begin() >= r.begin():\n\t\t\typos = view.layout_extent()[1] - ypos\n\t\t\tview.set_viewport_position((xpos, ypos), False)\n\nclass Gs9oRunManyCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit, wd=None, commands=[], save_hist=False, focus_view=False, show_view=True):\n\t\tfor run in commands:\n\t\t\tself.view.run_command(\"gs9o_open\", {\n\t\t\t\t'run': run,\n\t\t\t\t'wd': wd,\n\t\t\t\t'save_hist': save_hist,\n\t\t\t\t'focus_view': focus_view,\n\t\t\t\t'show_view': show_view,\n\t\t\t})\n\ndef aliases():\n\treturn gs.setting('9o_aliases', {}).copy()\n\ndef builtins():\n\tm = gs.gs9o.copy()\n\n\tg = globals()\n\tfor k, v in g.items():\n\t\tif k.startswith('cmd_'):\n\t\t\tk = k[4:].replace('_', '-')\n\t\t\tif k and k not in m:\n\t\t\t\tm[k] = v\n\n\treturn m\n\ndef push_output(view, rkey, output, hourglass_repl='', done=True):\n\tview.run_command('gs9o_push_output', {\n\t\t'rkey': rkey,\n\t\t'output': output,\n\t\t'hourglass_repl': hourglass_repl,\n\t\t'done': done,\n\t})\n\ndef _save_all(win, wd):\n\tif gs.setting('autosave') is True and win is not None:\n\t\tfor v in win.views():\n\t\t\ttry:\n\t\t\t\tfn = v.file_name()\n\t\t\t\tif fn and v.is_dirty() and fn.endswith('.go') and os.path.dirname(fn) == wd:\n\t\t\t\t\tv.run_command('save')\n\t\t\texcept Exception:\n\t\t\t\tgs.error_traceback(DOMAIN)\n\ndef _9_begin_call(name, view, edit, args, wd, rkey, cid):\n\tdmn = '%s: 9 %s' % (DOMAIN, name)\n\tmsg = '[ %s ] # 9 %s' % (gs.simple_fn(wd), ' '.join(args))\n\tif not cid:\n\t\tcid = '9%s-%s' % (name, uuid.uuid4())\n\ttid = gs.begin(dmn, msg, set_status=False, cancel=lambda: mg9.acall('kill', {'cid': cid}, None))\n\ttid_alias['%s-%s' % (name, wd)] = tid\n\n\tdef cb(res, err):\n\t\tout = '\\n'.join(s for s in (res.get('out'), res.get('err'), err) if s)\n\n\t\ttmp_fn = res.get('tmpFn')\n\t\tfn = res.get('fn')\n\t\tif fn and tmp_fn:\n\t\t\tbfn = os.path.basename(tmp_fn)\n\t\t\trepls = [\n\t\t\t\t'./%s' % bfn,\n\t\t\t\t'.\\\\%s' % bfn,\n\t\t\t\ttmp_fn,\n\t\t\t]\n\t\t\tfor s in repls:\n\t\t\t\tout = out.replace(s, fn)\n\n\t\tdef f():\n\t\t\tgs.end(tid)\n\t\t\tpush_output(view, rkey, out, hourglass_repl='| done: %s' % res.get('dur', ''))\n\n\t\tsublime.set_timeout(f, 0)\n\n\treturn cid, cb\n\ndef _rcmd_output_handler(rs, act):\n\twdid, rkey = _rcmd_wdid_rkey(fd=act.fd)\n\tsublime.active_window().run_command('gs9o_win_open', {\n\t\t'wdid': wdid,\n\t\t'focus_view': False,\n\t\t'show_view': False,\n\t\t'push_output': {\n\t\t\t'rkey': rkey,\n\t\t\t'output': act.output,\n\t\t\t'done': act.close,\n\t\t},\n\t})\n\nmg.output_handler = _rcmd_output_handler\n\ndef _rcmd(*, view, edit, name, args, wd, rkey, action_data={}):\n\tdef cb(rs):\n\t\tif rs.error:\n\t\t\tpush_output(view, rkey, rs.error)\n\n\twd = action_data.get('Dir') or wd\n\tact = actions.RunCmd.copy()\n\tact['Data'] = {\n\t\t'Fd':  _rcmd_fd(wd=wd, rkey=rkey),\n\t\t'Name': name,\n\t\t'Args': args,\n\t}\n\tact['Data'].update(action_data)\n\t# `view` is the 9o view, but the command wants the `active/editor view`\n\trun_view = None\n\tmg.send(view=run_view, cb=cb, actions=[act])\n\ndef cmd_which(view, edit, args, wd, rkey):\n\tl = []\n\tam = aliases()\n\tm = builtins()\n\n\tif not args:\n\t\targs = []\n\t\targs.extend(sorted(m.keys()))\n\t\targs.extend(sorted(am.keys()))\n\n\tfm = '%{0}s: %s'.format(max(len(s) for s in args))\n\n\tfor k in args:\n\t\tif k == 'sh':\n\t\t\tv = '9o builtin: %s' % sh.cmd('${CMD}')\n\t\telif k in ('go'):\n\t\t\tv = '9o builtin: %s' % sh.which(k)\n\t\telif k in m:\n\t\t\tv = '9o builtin'\n\t\telif k in am:\n\t\t\tv = '9o alias: `%s`' % am[k]\n\t\telse:\n\t\t\tv = sh.which(k)\n\n\t\tl.append(fm % (k, v))\n\n\tpush_output(view, rkey, '\\n'.join(l))\n\ndef cmd_cd(view, edit, args, wd, rkey):\n\ttry:\n\t\tif args:\n\t\t\twd = args[0]\n\t\t\twd = string.Template(wd).safe_substitute(sh.env())\n\t\t\twd = os.path.expanduser(wd)\n\t\t\tprint('>'+wd)\n\t\t\twd = os.path.abspath(wd)\n\t\t\tprint('<'+wd)\n\t\telse:\n\t\t\tfn = view.window().active_view().file_name()\n\t\t\tif fn:\n\t\t\t\twd = os.path.dirname(fn)\n\n\t\tos.chdir(wd)\n\texcept Exception as ex:\n\t\tpush_output(view, rkey, 'Cannot chdir: %s' % ex)\n\t\treturn\n\n\tpush_output(view, rkey, '')\n\tview.run_command('gs9o_init', {'wd': wd})\n\ndef cmd_reset(view, edit, args, wd, rkey):\n\tpush_output(view, rkey, '')\n\tview.erase(edit, sublime.Region(0, view.size()))\n\tview.run_command('gs9o_init')\n\tif args:\n\t\tview.run_command('gs9o_paste_exec', {'cmd': ' '.join(args), 'save_hist': False})\n\ndef cmd_clear(view, edit, args, wd, rkey):\n\tcmd_reset(view, edit, args, wd, rkey)\n\ndef cmd_go(view, edit, args, wd, rkey, action_data={}):\n\t_save_all(view.window(), wd)\n\tsublime.set_timeout_async(lambda: _rcmd(\n\t\tview=view,\n\t\tedit=edit,\n\t\tname='go',\n\t\targs=args,\n\t\twd=wd,\n\t\trkey=rkey,\n\t\taction_data=action_data,\n\t))\n\ndef cmd_cancel_replay(view, edit, args, wd, rkey):\n\tcid = ''\n\tav = None\n\twin = view.window()\n\tif win is not None:\n\t\tav = win.active_view()\n\n\t\tif av is not None and not av.file_name():\n\t\t\tcid = '9replayv-%s' % av.id()\n\n\tif not cid:\n\t\tcid = '9replay-%s' % wd\n\n\tmg9.acall('kill', {'cid': cid}, None)\n\tpush_output(view, rkey, '')\n\ndef cmd_sh(view, edit, args, wd, rkey, action_data={}):\n\tcid, cb = _9_begin_call('sh', view, edit, args, wd, rkey, '')\n\ta = {\n\t\t'cid': cid,\n\t\t'env': sh.env(),\n\t\t'cwd': action_data.get('Dir') or wd,\n\t\t'cmd': {\n\t\t\t'name': args[0],\n\t\t\t'args': args[1:],\n\t\t}\n\t}\n\tsublime.set_timeout(lambda: mg9.acall('sh', a, cb), 0)\n\ndef cmd_share(view, edit, args, wd, rkey):\n\tav = gs.active_valid_go_view(win=view.window())\n\tif av is None:\n\t\tpush_output(view, rkey, 'not sharing non-go src')\n\t\treturn\n\n\tdef f(res, err):\n\t\ts = '%s\\n%s' % (err, res.get('url', ''))\n\t\tpush_output(view, rkey, s.strip())\n\n\tmg9.share(gs.view_src(view.window().active_view()), f)\n\ndef cmd_help(view, edit, args, wd, rkey):\n\tgs.focus(gs.dist_path('9o.md'))\n\tpush_output(view, rkey, '')\n\ndef cmd_replay(view, edit, args, wd, rkey):\n\t_save_all(view.window(), wd)\n\t_rcmd(\n\t\tview=view,\n\t\tedit=edit,\n\t\tname='go.replay',\n\t\targs=args,\n\t\twd=wd,\n\t\trkey=rkey,\n\t)\n\ndef _env_settings(d, view, edit, args, wd, rkey):\n\tif len(args) > 0:\n\t\tm = {}\n\t\tfor k in args:\n\t\t\tm[k] = d.get(k)\n\telse:\n\t\tm = d\n\n\ts = '\\n'.join((\n\t\t'Default Settings file: gs.packages://GoSublime/GoSublime.sublime-settings (do not edit this file)',\n\t\t'User settings file: gs.packages://User/GoSublime.sublime-settings (add/change your settings here)',\n\t\tjson.dumps(m, sort_keys=True, indent=4),\n\t))\n\tpush_output(view, rkey, s)\n\ndef cmd_settings(view, edit, args, wd, rkey):\n\t_env_settings(gs.settings_dict(), view, edit, args, wd, rkey)\n\ndef cmd_env(view, edit, args, wd, rkey):\n\t_env_settings(sh.env(), view, edit, args, wd, rkey)\n\ndef cmd_hist(view, edit, args, wd, rkey):\n\taso = gs.aso()\n\thkey = _hkey(wd)\n\n\ts = 'hist: invalid args: %s' % args\n\n\tif len(args) == 0:\n\t\thist = gs.dval(aso.get(hkey), [])\n\t\thist.reverse()\n\t\thlen = len(hist)\n\t\ts = '\\n'.join('^%d: %s' % (i+1, v) for i,v in enumerate(hist))\n\telif len(args) == 1:\n\t\tif args[0] == 'erase':\n\t\t\taso.erase(hkey)\n\t\t\tgs.save_aso()\n\t\t\ts = ''\n\n\tpush_output(view, rkey, s)\n"
        },
        {
          "name": "gscommands.py",
          "type": "blob",
          "size": 6.611328125,
          "content": "from .gosubl import gs\nfrom .gosubl import gspatch\nfrom .gosubl import mg9\nimport datetime\nimport os\nimport sublime\nimport sublime_plugin\n\nDOMAIN = 'GoSublime'\n\nclass GsCommentForwardCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit):\n\t\tself.view.run_command(\"toggle_comment\", {\"block\": False})\n\t\tself.view.run_command(\"move\", {\"by\": \"lines\", \"forward\": True})\n\nclass GsStartNextLineCommentCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit):\n\t\tself.view.run_command(\"run_macro_file\", {\"file\": \"Packages/Default/Add Line.sublime-macro\"})\n\t\tself.view.run_command(\"toggle_comment\", {\"block\": False})\n\nclass GsFmtCommand(sublime_plugin.TextCommand):\n\tdef is_enabled(self):\n\t\tfn = self.view.file_name()\n\t\tif fn:\n\t\t\tscope_ok = fn.lower().endswith('.go')\n\t\telse:\n\t\t\tscope_ok = gs.is_go_source_view(self.view)\n\n\t\treturn scope_ok and gs.setting('fmt_enabled') is True\n\n\tdef run(self, edit):\n\t\tdomain = '%s: GsFmt' % DOMAIN\n\t\tvsize = self.view.size()\n\t\tsrc = self.view.substr(sublime.Region(0, vsize))\n\t\tif not src.strip():\n\t\t\treturn\n\n\t\tsrc, err = mg9.fmt(self.view.file_name(), src)\n\n\t\tif not err and not src.strip():\n\t\t\terr = \"the fmt'd file result appears to be empty\"\n\n\t\tif err:\n\t\t\tshort_err = '%s: %s... error logged to console' % (domain, err[:15])\n\n\t\t\tdef clear_status():\n\t\t\t\tif self.view.get_status(domain) == short_err:\n\t\t\t\t\tself.view.set_status(domain, '')\n\n\t\t\tgs.println(domain, err)\n\t\t\tself.view.set_status(domain, short_err)\n\t\t\tsublime.set_timeout(clear_status, 10000)\n\n\t\t\tif 'ipc_timeout' in err:\n\t\t\t\tself.view.show_popup(\"%s: %s\" % (domain, err.replace('\\n', '<br>')))\n\n\t\tif src:\n\t\t\t_, err = gspatch.merge(self.view, vsize, src, edit)\n\t\t\tif err:\n\t\t\t\tmsg = 'PANIC: Cannot fmt file. Check your source for errors (and maybe undo any changes).'\n\t\t\t\tsublime.error_message(\"%s: %s: Merge failure: `%s'\" % (domain, msg, err))\n\nclass GsFmtSaveCommand(sublime_plugin.TextCommand):\n\tdef is_enabled(self):\n\t\treturn gs.is_go_source_view(self.view)\n\n\tdef run(self, edit):\n\t\tself.view.run_command(\"gs_fmt\")\n\t\tsublime.set_timeout(lambda: self.view.run_command(\"save\"), 0)\n\nclass GsFmtPromptSaveAsCommand(sublime_plugin.TextCommand):\n\tdef is_enabled(self):\n\t\treturn gs.is_go_source_view(self.view)\n\n\tdef run(self, edit):\n\t\tself.view.run_command(\"gs_fmt\")\n\t\tsublime.set_timeout(lambda: self.view.run_command(\"prompt_save_as\"), 0)\n\nclass GsGotoRowColCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit, row, col=0):\n\t\tpt = self.view.text_point(row, col)\n\t\tr = sublime.Region(pt, pt)\n\t\tself.view.sel().clear()\n\t\tself.view.sel().add(r)\n\t\tself.view.show(pt, True)\n\t\txpos, ypos = self.view.viewport_position()\n\t\tself.view.set_viewport_position((0, ypos), False)\n\t\tdmn = 'gs.focus.%s:%s:%s' % (gs.view_fn(self.view), row, col)\n\t\tflags = sublime.DRAW_EMPTY_AS_OVERWRITE\n\t\tshow = lambda: self.view.add_regions(dmn, [r], 'comment', 'bookmark', flags)\n\t\thide = lambda: self.view.erase_regions(dmn)\n\n\t\tfor i in range(3):\n\t\t\tm = 300\n\t\t\ts = i * m * 2\n\t\t\th = s + m\n\t\t\tsublime.set_timeout(show, s)\n\t\t\tsublime.set_timeout(hide, h)\n\nclass GsOpenMargoExtensionPackageCommand(sublime_plugin.WindowCommand):\n\tdef run(self):\n\t\tfn = mg9.ext_main_file(True)\n\t\tif fn:\n\t\t\tgs.focus(fn)\n\nclass GsNewGoFileCommand(sublime_plugin.WindowCommand):\n\tdef run(self):\n\t\tpkg_name = 'main'\n\t\tview = gs.active_valid_go_view()\n\t\ttry:\n\t\t\tbasedir = gs.basedir_or_cwd(view and view.file_name())\n\t\t\tfor fn in os.listdir(basedir):\n\t\t\t\tif fn.endswith('.go'):\n\t\t\t\t\tname, _ = mg9.pkg_name(os.path.join(basedir, fn), '')\n\t\t\t\t\tif name:\n\t\t\t\t\t\tpkg_name = name\n\t\t\t\t\t\tbreak\n\t\texcept Exception:\n\t\t\tgs.error_traceback('GsNewGoFile')\n\n\t\tself.window.new_file().run_command('gs_create_new_go_file', {\n\t\t\t'pkg_name': '',\n\t\t\t'file_name': 'main.go',\n\t\t})\n\nclass GsCreateNewGoFileCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit, pkg_name, file_name):\n\t\tview = self.view\n\t\tview.set_name(file_name)\n\t\tview.set_syntax_file(gs.tm_path('go'))\n\t\tif pkg_name == '':\n\t\t\tview.sel().add(sublime.Region(0, 0))\n\t\t\tview.run_command('auto_complete', {\n\t\t\t\t'api_completions_only': True,\n\t\t\t\t'disable_auto_insert': True,\n\t\t\t\t'next_completion_if_showing': False,\n\t\t\t})\n\t\telse:\n\t\t\tview.replace(edit, sublime.Region(0, view.size()), 'package %s\\n' % pkg_name)\n\t\t\tview.sel().clear()\n\t\t\tview.sel().add(view.find(pkg_name, 0, sublime.LITERAL))\n\nclass GsShowTasksCommand(sublime_plugin.WindowCommand):\n\tdef run(self):\n\t\tents = []\n\t\tnow = datetime.datetime.now()\n\t\tm = {}\n\t\ttry:\n\t\t\ttasks = gs.task_list()\n\t\t\tents.insert(0, ['', '%d active task(s)' % len(tasks)])\n\t\t\tfor tid, t in tasks:\n\t\t\t\tcancel_text = ''\n\t\t\t\tif t['cancel']:\n\t\t\t\t\tcancel_text = ' (cancel task)'\n\t\t\t\t\tm[len(ents)] = tid\n\n\t\t\t\tents.append([\n\t\t\t\t\t'#%s %s%s' % (tid, t['domain'], cancel_text),\n\t\t\t\t\tt['message'],\n\t\t\t\t\t'started: %s' % t['start'],\n\t\t\t\t\t'elapsed: %s' % (now - t['start']),\n\t\t\t\t])\n\t\texcept:\n\t\t\tents = [['', 'Failed to gather active tasks']]\n\n\t\tdef cb(i, _):\n\t\t\tgs.cancel_task(m.get(i, ''))\n\n\t\tgs.show_quick_panel(ents, cb)\n\nclass GsOpenHomePathCommand(sublime_plugin.WindowCommand):\n\tdef run(self, fn):\n\t\tself.window.open_file(gs.home_path(fn))\n\nclass GsOpenDistPathCommand(sublime_plugin.WindowCommand):\n\tdef run(self, fn):\n\t\tself.window.open_file(gs.dist_path(fn))\n\nclass GsSanityCheckCommand(sublime_plugin.WindowCommand):\n\tdef run(self):\n\t\ts = 'GoSublime Sanity Check\\n\\n%s' % '\\n'.join(mg9.sanity_check_sl(mg9.sanity_check({}, True)))\n\t\tgs.show_output('GoSublime', s)\n\nclass GsSetOutputPanelContentCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit, content, syntax_file, scroll_end, replace):\n\t\tpanel = self.view\n\t\tpanel.set_read_only(False)\n\n\t\tif replace:\n\t\t\tpanel.replace(edit, sublime.Region(0, panel.size()), content)\n\t\telse:\n\t\t\tpanel.insert(edit, panel.size(), content+'\\n')\n\n\t\tpanel.sel().clear()\n\t\tpst = panel.settings()\n\t\tpst.set(\"rulers\", [])\n\t\tpst.set(\"fold_buttons\", True)\n\t\tpst.set(\"fade_fold_buttons\", False)\n\t\tpst.set(\"gutter\", False)\n\t\tpst.set(\"line_numbers\", False)\n\n\t\tif syntax_file:\n\t\t\tif syntax_file == 'GsDoc':\n\t\t\t\tpanel.set_syntax_file(gs.tm_path('doc'))\n\t\t\t\tpanel.run_command(\"fold_by_level\", { \"level\": 1 })\n\t\t\telse:\n\t\t\t\tpanel.set_syntax_file(syntax_file)\n\n\t\tpanel.set_read_only(True)\n\n\t\tif scroll_end:\n\t\t\tpanel.show(panel.size())\n\nclass GsInsertContentCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit, pos, content):\n\t\tpos = int(pos) # un-fucking-believable\n\t\tself.view.insert(edit, pos, content)\n\nclass GsPatchImportsCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit, pos, content, added_path=''):\n\t\tpos = int(pos) # un-fucking-believable\n\t\tview = self.view\n\t\tdirty, err = gspatch.merge(view, pos, content, edit)\n\t\tif err:\n\t\t\tgs.notice_undo(DOMAIN, err, view, dirty)\n\t\telif dirty:\n\t\t\tk = 'last_import_path.%s' % gs.view_fn(self.view)\n\t\t\tif added_path:\n\t\t\t\tgs.set_attr(k, added_path)\n\t\t\telse:\n\t\t\t\tgs.del_attr(k)\n"
        },
        {
          "name": "gscomplete.py",
          "type": "blob",
          "size": 8.158203125,
          "content": "from .gosubl import gs\nfrom .gosubl import mg9\nfrom os.path import basename\nfrom os.path import dirname\nimport json\nimport os\nimport re\nimport sublime\nimport sublime_plugin\n\nAC_OPTS = sublime.INHIBIT_WORD_COMPLETIONS | sublime.INHIBIT_EXPLICIT_COMPLETIONS\nREASONABLE_PKGNAME_PAT = re.compile(r'^\\w+$')\n\nlast_gopath = ''\nEND_SELECTOR_PAT = re.compile(r'.*?((?:[\\w.]+\\.)?(\\w+))$')\nSTART_SELECTOR_PAT = re.compile(r'^([\\w.]+)')\nDOMAIN = 'GsComplete'\nSNIPPET_VAR_PAT = re.compile(r'\\$\\{([a-zA-Z]\\w*)\\}')\n\nHINT_KEY = '%s.completion-hint' % DOMAIN\n\ndef snippet_match(ctx, m):\n\ttry:\n\t\tfor k,p in m.get('match', {}).items():\n\t\t\tq = ctx.get(k, '')\n\t\t\tif p and gs.is_a_string(p):\n\t\t\t\tif not re.search(p, str(q)):\n\t\t\t\t\treturn False\n\t\t\telif p != q:\n\t\t\t\treturn False\n\texcept:\n\t\tgs.notice(DOMAIN, gs.traceback())\n\treturn True\n\ndef expand_snippet_vars(vars, text, title, value):\n\tsub = lambda m: vars.get(m.group(1), '')\n\treturn (\n\t\tSNIPPET_VAR_PAT.sub(sub, text),\n\t\tSNIPPET_VAR_PAT.sub(sub, title),\n\t\tSNIPPET_VAR_PAT.sub(sub, value)\n\t)\n\ndef resolve_snippets(ctx):\n\tcl = set()\n\ttypes = [''] if ctx.get('local') else ctx.get('types')\n\tvars = {}\n\tfor k,v in ctx.items():\n\t\tif gs.is_a_string(v):\n\t\t\tvars[k] = v\n\n\ttry:\n\t\tsnips = []\n\t\tsnips.extend(gs.setting('default_snippets', []))\n\t\tsnips.extend(gs.setting('snippets', []))\n\t\tfor m in snips:\n\t\t\ttry:\n\t\t\t\tif snippet_match(ctx, m):\n\t\t\t\t\tfor ent in m.get('snippets', []):\n\t\t\t\t\t\ttext = ent.get('text', '')\n\t\t\t\t\t\ttitle = ent.get('title', '')\n\t\t\t\t\t\tvalue = ent.get('value', '')\n\t\t\t\t\t\tif text and value:\n\t\t\t\t\t\t\tfor typename in types:\n\t\t\t\t\t\t\t\tvars['typename'] = typename\n\t\t\t\t\t\t\t\tif typename:\n\t\t\t\t\t\t\t\t\tif len(typename) > 1 and typename[0].islower() and typename[1].isupper():\n\t\t\t\t\t\t\t\t\t\tvars['typename_abbr'] = typename[1].lower()\n\t\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\t\tvars['typename_abbr'] = typename[0].lower()\n\t\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\t\tvars['typename_abbr'] = ''\n\n\t\t\t\t\t\t\t\ttxt, ttl, val = expand_snippet_vars(vars, text, title, value)\n\t\t\t\t\t\t\t\ts = u'%s\\t%s \\u0282' % (txt, ttl)\n\t\t\t\t\t\t\t\tcl.add((s, val))\n\t\t\texcept:\n\t\t\t\tgs.notice(DOMAIN, gs.traceback())\n\texcept:\n\t\tgs.notice(DOMAIN, gs.traceback())\n\treturn list(cl)\n\nclass GoSublime(sublime_plugin.EventListener):\n\tgocode_set = False\n\tdef on_query_completions(self, view, prefix, locations):\n\t\tpos = locations[0]\n\t\tscopes = view.scope_name(pos).split()\n\t\tif ('source.go' not in scopes) or (gs.setting('gscomplete_enabled', False) is not True):\n\t\t\treturn []\n\n\t\tif gs.IGNORED_SCOPES.intersection(scopes):\n\t\t\treturn ([], AC_OPTS)\n\n\t\ttypes = []\n\t\tfor r in view.find_by_selector('source.go keyword.'):\n\t\t\tif view.substr(r) == 'type':\n\t\t\t\tend = r.end()\n\t\t\t\tr = view.find(r'\\s+(\\w+)', end)\n\t\t\t\tif r.begin() == end:\n\t\t\t\t\ttypes.append(view.substr(r).lstrip())\n\n\n\t\ttry:\n\t\t\tif basename(view.file_name()) == \"main.go\":\n\t\t\t\tdefault_pkgname = 'main'\n\t\t\telse:\n\t\t\t\tdefault_pkgname = basename(dirname(view.file_name()))\n\t\texcept Exception:\n\t\t\tdefault_pkgname = ''\n\n\t\tif not REASONABLE_PKGNAME_PAT.match(default_pkgname):\n\t\t\tdefault_pkgname = ''\n\n\t\tr = view.find('package\\s+(\\w+)', 0)\n\t\tpkgname = view.substr(view.word(r.end())) if r else ''\n\n\t\tif not default_pkgname:\n\t\t\tdefault_pkgname = pkgname if pkgname else 'main'\n\n\t\tctx = {\n\t\t\t'global': bool(pkgname and pos > view.line(r).end()),\n\t\t\t'pkgname': pkgname,\n\t\t\t'types': types or [''],\n\t\t\t'has_types': len(types) > 0,\n\t\t\t'default_pkgname': default_pkgname,\n\t\t\t'fn': view.file_name() or '',\n\t\t}\n\t\tshow_snippets = gs.setting('autocomplete_snippets', True) is True\n\n\t\tif not pkgname:\n\t\t\treturn (resolve_snippets(ctx), AC_OPTS) if show_snippets else ([], AC_OPTS)\n\n\t\t# gocode is case-sesitive so push the location back to the 'dot' so it gives\n\t\t# gives us everything then st2 can pick the matches for us\n\t\toffset = pos - len(prefix)\n\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\n\t\tfn = view.file_name() or '<stdin>'\n\t\tif not src:\n\t\t\treturn ([], AC_OPTS)\n\n\t\tnc = view.substr(sublime.Region(pos, pos+1))\n\t\tcl = self.complete(fn, offset, src, nc.isalpha() or nc == \"(\")\n\n\t\tpc = view.substr(sublime.Region(pos-1, pos))\n\t\tif show_snippets and (pc.isspace() or pc.isalpha()):\n\t\t\tif scopes[-1] == 'source.go':\n\t\t\t\tcl.extend(resolve_snippets(ctx))\n\t\t\telif scopes[-1] == 'meta.block.go' and ('meta.function.plain.go' in scopes or 'meta.function.receiver.go' in scopes):\n\t\t\t\tctx['global'] = False\n\t\t\t\tctx['local'] = True\n\t\t\t\tcl.extend(resolve_snippets(ctx))\n\t\treturn (cl, AC_OPTS)\n\n\tdef find_end_pt(self, view, pat, start, end, flags=sublime.LITERAL):\n\t\tr = view.find(pat, start, flags)\n\t\treturn r.end() if r and r.end() < end else -1\n\n\tdef complete(self, fn, offset, src, func_name_only):\n\t\tcomps = []\n\t\tautocomplete_tests = gs.setting('autocomplete_tests', False)\n\t\tautocomplete_closures = gs.setting('autocomplete_closures', False)\n\t\tents, err = mg9.complete(fn, src, offset)\n\t\tif err:\n\t\t\tgs.notice(DOMAIN, err)\n\n\t\tname_fx = None\n\t\tname_fx_pat = gs.setting('autocomplete_filter_name')\n\t\tif name_fx_pat:\n\t\t\ttry:\n\t\t\t\tname_fx = re.compile(name_fx_pat)\n\t\t\texcept Exception as ex:\n\t\t\t\tgs.notice(DOMAIN, 'Cannot filter completions: %s' % ex)\n\n\t\tfor ent in ents:\n\t\t\tif name_fx and name_fx.search(ent['name']):\n\t\t\t\tcontinue\n\n\t\t\ttn = ent['type']\n\t\t\tcn = ent['class']\n\t\t\tnm = ent['name']\n\t\t\tis_func = (cn == 'func')\n\t\t\tis_func_type = (cn == 'type' and tn.startswith('func('))\n\n\t\t\tif is_func:\n\t\t\t\tif nm in ('main', 'init'):\n\t\t\t\t\tcontinue\n\n\t\t\t\tif not autocomplete_tests and nm.startswith(('Test', 'Benchmark', 'Example')):\n\t\t\t\t\tcontinue\n\n\t\t\tif is_func or is_func_type:\n\t\t\t\ts_sfx = u'\\u0282'\n\t\t\t\tt_sfx = gs.CLASS_PREFIXES.get('type', '')\n\t\t\t\tf_sfx = gs.CLASS_PREFIXES.get('func', '')\n\t\t\t\tparams, ret = declex(tn)\n\t\t\t\tdecl = []\n\t\t\t\tfor i, p in enumerate(params):\n\t\t\t\t\tn, t = p\n\t\t\t\t\tif t.startswith('...'):\n\t\t\t\t\t\tn = '...'\n\t\t\t\t\tdecl.append('${%d:%s}' % (i+1, n))\n\t\t\t\tdecl = ', '.join(decl)\n\t\t\t\tret = ret.strip('() ')\n\n\t\t\t\tif is_func:\n\t\t\t\t\tif func_name_only:\n\t\t\t\t\t\tcomps.append((\n\t\t\t\t\t\t\t'%s\\t%s %s' % (nm, ret, f_sfx),\n\t\t\t\t\t\t\tnm,\n\t\t\t\t\t\t))\n\t\t\t\t\telse:\n\t\t\t\t\t\tcomps.append((\n\t\t\t\t\t\t\t'%s\\t%s %s' % (nm, ret, f_sfx),\n\t\t\t\t\t\t\t'%s(%s)' % (nm, decl),\n\t\t\t\t\t\t))\n\t\t\t\telse:\n\t\t\t\t\tcomps.append((\n\t\t\t\t\t\t'%s\\t%s %s' % (nm, tn, t_sfx),\n\t\t\t\t\t\tnm,\n\t\t\t\t\t))\n\n\t\t\t\t\tif autocomplete_closures:\n\t\t\t\t\t\tcomps.append((\n\t\t\t\t\t\t\t'%s {}\\tfunc() {...} %s' % (nm, s_sfx),\n\t\t\t\t\t\t\t'%s {\\n\\t${0}\\n}' % tn,\n\t\t\t\t\t\t))\n\t\t\telif cn != 'PANIC':\n\t\t\t\tcomps.append((\n\t\t\t\t\t'%s\\t%s %s' % (nm, tn, self.typeclass_prefix(cn, tn)),\n\t\t\t\t\tnm,\n\t\t\t\t))\n\t\treturn comps\n\n\tdef typeclass_prefix(self, typeclass, typename):\n\t\treturn gs.NAME_PREFIXES.get(typename, gs.CLASS_PREFIXES.get(typeclass, ' '))\n\n\ndef declex(s):\n\tparams = []\n\tret = ''\n\tif s.startswith('func('):\n\t\tlp = len(s)\n\t\tsp = 5\n\t\tep = sp\n\t\tdc = 1\n\t\tnames = []\n\t\twhile ep < lp and dc > 0:\n\t\t\tc = s[ep]\n\t\t\tif dc == 1 and c in (',', ')'):\n\t\t\t\tif sp < ep:\n\t\t\t\t\tn, _, t = s[sp:ep].strip().partition(' ')\n\t\t\t\t\tt = t.strip()\n\t\t\t\t\tif t:\n\t\t\t\t\t\tfor name in names:\n\t\t\t\t\t\t\tparams.append((name, t))\n\t\t\t\t\t\tnames = []\n\t\t\t\t\t\tparams.append((n, t))\n\t\t\t\t\telse:\n\t\t\t\t\t\tnames.append(n)\n\t\t\t\t\tsp = ep + 1\n\t\t\tif c == '(':\n\t\t\t\tdc += 1\n\t\t\telif c == ')':\n\t\t\t\tdc -= 1\n\t\t\tep += 1\n\t\tret = s[ep:].strip() if ep < lp else ''\n\treturn (params, ret)\n\ndef _ct_poller():\n\ttry:\n\t\tview = sublime.active_window().active_view()\n\t\tif gs.setting('calltips') is True:\n\t\t\tview.run_command('gs_show_call_tip', {'set_status': True})\n\t\telse:\n\t\t\tview.erase_status(HINT_KEY)\n\texcept Exception:\n\t\tpass\n\n\tsublime.set_timeout(_ct_poller, 1000)\n\nclass GsShowCallTip(sublime_plugin.TextCommand):\n\tdef is_enabled(self):\n\t\treturn gs.is_go_source_view(self.view)\n\n\tdef run(self, edit, set_status=False):\n\t\tview = self.view\n\n\t\tdef f(cl, err):\n\t\t\tdef f2(cl, err):\n\t\t\t\tc = {}\n\t\t\t\tif len(cl) == 1:\n\t\t\t\t\tc = cl[0]\n\n\t\t\t\tif set_status:\n\t\t\t\t\tif c:\n\t\t\t\t\t\tpfx = 'func('\n\t\t\t\t\t\ttyp = c['type']\n\t\t\t\t\t\tif typ.startswith(pfx):\n\t\t\t\t\t\t\ts = 'func %s(%s' % (c['name'], typ[len(pfx):])\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\ts = '%s: %s' % (c['name'], typ)\n\n\n\t\t\t\t\t\tview.set_status(HINT_KEY, s)\n\t\t\t\t\telse:\n\t\t\t\t\t\tview.erase_status(HINT_KEY)\n\t\t\t\telse:\n\t\t\t\t\tif c:\n\t\t\t\t\t\ts = '%s %s\\n%s' % (c['name'], c['class'], c['type'])\n\t\t\t\t\telse:\n\t\t\t\t\t\ts = '// %s' % (err or 'No calltips found')\n\n\t\t\t\t\tgs.show_output(HINT_KEY, s, print_output=False, syntax_file='GsDoc')\n\n\t\t\tsublime.set_timeout(lambda: f2(cl, err), 0)\n\n\t\tfn = view.file_name()\n\t\tsrc = gs.view_src(view)\n\t\tpos = gs.sel(view).begin()\n\t\tmg9.calltip(fn, src, pos, set_status, f)\n\n\nif not gs.checked(DOMAIN, '_ct_poller'):\n\t_ct_poller()\n"
        },
        {
          "name": "gsdoc.py",
          "type": "blob",
          "size": 5.5537109375,
          "content": "from .gosubl import gs\nfrom .gosubl import gsq\nfrom .gosubl import mg9\nimport os\nimport re\nimport sublime\nimport sublime_plugin\n\nDOMAIN = 'GsDoc'\n\nGOOS_PAT = re.compile(r'_(%s)' % '|'.join(gs.GOOSES))\nGOARCH_PAT = re.compile(r'_(%s)' % '|'.join(gs.GOARCHES))\nEXT_EXCLUDE = [\n\t'out', 'exe', 'o', 'dll', 'so', 'a', 'dynlib', 'lib', 'com', 'bin', 'pyc', 'pyo', 'cache', 'db',\n\t'bak', 'png', 'gif', 'jpeg', 'jpg', 'gz', 'zip', '7z', 'rar', 'tar', '1', '2', '3', 'old', 'tgz',\n\t'pprof', 'prof', 'mem', 'cpu', 'swap',\n]\n\nclass GsDocCommand(sublime_plugin.TextCommand):\n\tdef is_enabled(self):\n\t\treturn gs.is_go_source_view(self.view)\n\n\tdef show_output(self, s):\n\t\tgs.show_output(DOMAIN+'-output', s, False, 'GsDoc')\n\n\tdef run(self, _, mode=''):\n\t\tview = self.view\n\t\tif (not gs.is_go_source_view(view)) or (mode not in ['goto', 'hint']):\n\t\t\treturn\n\n\t\tpt = gs.sel(view).begin()\n\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\tpt = len(src[:pt].encode(\"utf-8\"))\n\t\tdef f(docs, err):\n\t\t\tdoc = ''\n\t\t\tif err:\n\t\t\t\tself.show_output('// Error: %s' % err)\n\t\t\telif docs:\n\t\t\t\tif mode == \"goto\":\n\t\t\t\t\tfn = ''\n\t\t\t\t\tflags = 0\n\t\t\t\t\tif len(docs) > 0:\n\t\t\t\t\t\td = docs[0]\n\t\t\t\t\t\tfn = d.get('fn', '')\n\t\t\t\t\t\trow = d.get('row', 0)\n\t\t\t\t\t\tcol = d.get('col', 0)\n\t\t\t\t\t\tif fn:\n\t\t\t\t\t\t\tgs.println('opening %s:%s:%s' % (fn, row, col))\n\t\t\t\t\t\t\tgs.focus(fn, row, col)\n\t\t\t\t\t\t\treturn\n\t\t\t\t\tself.show_output(\"%s: cannot find definition\" % DOMAIN)\n\t\t\t\telif mode == \"hint\":\n\t\t\t\t\ts = []\n\t\t\t\t\tfor d in docs:\n\t\t\t\t\t\tname = d.get('name', '')\n\t\t\t\t\t\tif name:\n\t\t\t\t\t\t\tkind = d.get('kind', '')\n\t\t\t\t\t\t\tpkg = d.get('pkg', '')\n\t\t\t\t\t\t\tif pkg:\n\t\t\t\t\t\t\t\tname = '%s.%s' % (pkg, name)\n\t\t\t\t\t\t\tsrc = d.get('src', '')\n\t\t\t\t\t\t\tif src:\n\t\t\t\t\t\t\t\tsrc = '\\n//\\n%s' % src\n\t\t\t\t\t\t\tdoc = '// %s %s%s' % (name, kind, src)\n\n\t\t\t\t\t\ts.append(doc)\n\t\t\t\t\tdoc = '\\n\\n\\n'.join(s).strip()\n\t\t\tself.show_output(doc or \"// %s: no docs found\" % DOMAIN)\n\n\t\tmg9.doc(view.file_name(), src, pt, f)\n\nclass GsBrowseDeclarationsCommand(sublime_plugin.WindowCommand):\n\tdef run(self, dir=''):\n\t\tif dir == '.':\n\t\t\tself.present_current()\n\t\telif dir:\n\t\t\tself.present('', '', dir)\n\t\telse:\n\t\t\tdef f(res, err):\n\t\t\t\tif err:\n\t\t\t\t\tgs.notice(DOMAIN, err)\n\t\t\t\t\treturn\n\n\t\t\t\tents, m = handle_pkgdirs_res(res)\n\t\t\t\tif ents:\n\t\t\t\t\tents.insert(0, \"Current Package\")\n\n\t\t\t\t\tdef cb(i, win):\n\t\t\t\t\t\tif i == 0:\n\t\t\t\t\t\t\tself.present_current()\n\t\t\t\t\t\telif i >= 1:\n\t\t\t\t\t\t\tself.present('', '', os.path.dirname(m[ents[i]]))\n\n\t\t\t\t\tgs.show_quick_panel(ents, cb)\n\t\t\t\telse:\n\t\t\t\t\tgs.show_quick_panel([['', 'No source directories found']])\n\n\t\t\tmg9.pkg_dirs(f)\n\n\tdef present_current(self):\n\t\tpkg_dir = ''\n\t\tview = gs.active_valid_go_view(win=self.window, strict=False)\n\t\tif view:\n\t\t\tif view.file_name():\n\t\t\t\tpkg_dir = os.path.dirname(view.file_name())\n\t\t\tvfn = gs.view_fn(view)\n\t\t\tsrc = gs.view_src(view)\n\t\telse:\n\t\t\tvfn = ''\n\t\t\tsrc = ''\n\t\tself.present(vfn, src, pkg_dir)\n\n\tdef present(self, vfn, src, pkg_dir):\n\t\twin = self.window\n\t\tif win is None:\n\t\t\treturn\n\n\t\tdef f(res, err):\n\t\t\tif err:\n\t\t\t\tgs.notify(DOMAIN, err)\n\t\t\t\treturn\n\n\t\t\tdecls = res.get('file_decls', [])\n\t\t\tfor d in res.get('pkg_decls', []):\n\t\t\t\tif not vfn or d['fn'] != vfn:\n\t\t\t\t\tdecls.append(d)\n\n\t\t\tfor d in decls:\n\t\t\t\tdname = (d['repr'] or d['name'])\n\t\t\t\ttrailer = []\n\t\t\t\ttrailer.extend(GOOS_PAT.findall(d['fn']))\n\t\t\t\ttrailer.extend(GOARCH_PAT.findall(d['fn']))\n\t\t\t\tif trailer:\n\t\t\t\t\ttrailer = ' (%s)' % ', '.join(trailer)\n\t\t\t\telse:\n\t\t\t\t\ttrailer = ''\n\t\t\t\td['ent'] = '%s %s%s' % (d['kind'], dname, trailer)\n\n\t\t\tents = []\n\t\t\tfor d in decls:\n\t\t\t\tents.append(d['ent'])\n\n\t\t\tdef cb(i, win):\n\t\t\t\tif i >= 0:\n\t\t\t\t\td = decls[i]\n\t\t\t\t\tgs.focus(d['fn'], d['row'], d['col'], win)\n\n\t\t\tif ents:\n\t\t\t\tgs.show_quick_panel(ents, cb)\n\t\t\telse:\n\t\t\t\tgs.show_quick_panel([['', 'No declarations found']])\n\n\t\tmg9.declarations(vfn, src, pkg_dir, f)\n\ndef handle_pkgdirs_res(res):\n\tm = {}\n\tfor root, dirs in res.items():\n\t\tfor dir, fn in dirs.items():\n\t\t\tif not m.get(dir):\n\t\t\t\tm[dir] = fn\n\tents = list(m.keys())\n\tents.sort(key = lambda a: a.lower())\n\treturn (ents, m)\n\nclass GsBrowsePackagesCommand(sublime_plugin.WindowCommand):\n\tdef run(self):\n\t\tdef f(res, err):\n\t\t\tif err:\n\t\t\t\tgs.notice(DOMAIN, err)\n\t\t\t\treturn\n\n\t\t\tents, m = handle_pkgdirs_res(res)\n\t\t\tif ents:\n\t\t\t\tdef cb(i, win):\n\t\t\t\t\tif i >= 0:\n\t\t\t\t\t\tdirname = gs.basedir_or_cwd(m[ents[i]])\n\t\t\t\t\t\twin.run_command('gs_browse_files', {'dir': dirname})\n\t\t\t\tgs.show_quick_panel(ents, cb)\n\t\t\telse:\n\t\t\t\tgs.show_quick_panel([['', 'No source directories found']])\n\n\t\tmg9.pkg_dirs(f)\n\ndef ext_filter(pathname, basename, ext):\n\tif not ext:\n\t\treturn basename == \"makefile\"\n\n\tif ext in EXT_EXCLUDE:\n\t\treturn False\n\n\tif ext.endswith('~'):\n\t\treturn False\n\n\treturn True\n\ndef show_pkgfiles(dirname):\n\tents = []\n\tm = {}\n\n\ttry:\n\t\tdirname = os.path.abspath(dirname)\n\t\tfor fn in gs.list_dir_tree(dirname, ext_filter, gs.setting('fn_exclude_prefixes', [])):\n\t\t\tname = os.path.relpath(fn, dirname).replace('\\\\', '/')\n\t\t\tm[name] = fn\n\t\t\tents.append(name)\n\texcept Exception as ex:\n\t\tgs.notice(DOMAIN, 'Error: %s' % ex)\n\n\tif ents:\n\t\tents.sort(key = lambda a: a.lower())\n\n\t\ttry:\n\t\t\ts = \" ../  ( current: %s )\" % dirname\n\t\t\tm[s] = os.path.join(dirname, \"..\")\n\t\t\tents.insert(0, s)\n\t\texcept Exception:\n\t\t\tpass\n\n\t\tdef cb(i, win):\n\t\t\tif i >= 0:\n\t\t\t\tfn = m[ents[i]]\n\t\t\t\tif os.path.isdir(fn):\n\t\t\t\t\twin.run_command(\"gs_browse_files\", {\"dir\": fn})\n\t\t\t\telse:\n\t\t\t\t\tgs.focus(fn, 0, 0, win)\n\t\tgs.show_quick_panel(ents, cb)\n\telse:\n\t\tgs.show_quick_panel([['', 'No files found']])\n\nclass GsBrowseFilesCommand(sublime_plugin.WindowCommand):\n\tdef run(self, dir=''):\n\t\tif not dir:\n\t\t\tview = self.window.active_view()\n\t\t\tdir = gs.basedir_or_cwd(view.file_name() if view is not None else None)\n\t\tgsq.dispatch('*', lambda: show_pkgfiles(dir), 'scanning directory for package files')\n"
        },
        {
          "name": "gsev.py",
          "type": "blob",
          "size": 2.3583984375,
          "content": "from .gosubl import gs\nfrom . import gstest\nimport sublime\nimport sublime_plugin\nimport webbrowser\n\nDOMAIN = 'GsEV'\n\nclass EV(sublime_plugin.EventListener):\n\tdef on_pre_save(self, view):\n\t\tview.run_command('gs_fmt')\n\t\tsublime.set_timeout(lambda: do_set_gohtml_syntax(view), 0)\n\n\tdef on_post_save(self, view):\n\t\tsublime.set_timeout(lambda: do_post_save(view), 0)\n\n\tdef on_activated(self, view):\n\t\twin = view.window()\n\t\tif win is not None:\n\t\t\tactive_view = win.active_view()\n\t\t\tif active_view is not None:\n\t\t\t\tsublime.set_timeout(lambda: do_sync_active_view(active_view), 0)\n\n\t\tsublime.set_timeout(lambda: do_set_gohtml_syntax(view), 0)\n\n\tdef on_load(self, view):\n\t\tsublime.set_timeout(lambda: do_set_gohtml_syntax(view), 0)\n\nclass GsOnLeftClick(sublime_plugin.TextCommand):\n\tdef run(self, edit):\n\t\tview = self.view\n\t\tif gs.is_go_source_view(view):\n\t\t\tview.run_command('gs9o_open', {\n\t\t\t\t\"run\": [\".actuate\", \"-button=left\"],\n\t\t\t\t\"focus_view\": False,\n\t\t\t\t\"show_view\": False,\n\t\t\t})\n\t\telif view.score_selector(gs.sel(view).begin(), \"text.9o\") > 0:\n\t\t\tview.window().run_command(\"gs9o_open_selection\")\n\nclass GsOnRightClick(sublime_plugin.TextCommand):\n\tdef run(self, edit):\n\t\tview = self.view\n\t\tif gs.is_go_source_view(view):\n\t\t\tview.run_command('gs9o_open', {\n\t\t\t\t\"run\": [\".actuate\", \"-button=right\"],\n\t\t\t\t\"focus_view\": False,\n\t\t\t\t\"show_view\": False,\n\t\t\t})\n\ndef do_post_save(view):\n\tif not gs.is_pkg_view(view):\n\t\treturn\n\n\tfor c in gs.setting('on_save', []):\n\t\tcmd = c.get('cmd', '')\n\t\targs = c.get('args', {})\n\t\tmsg = 'running on_save command %s' % cmd\n\t\ttid = gs.begin(DOMAIN, msg, set_status=False)\n\t\ttry:\n\t\t\tview.run_command(cmd, args)\n\t\texcept Exception as ex:\n\t\t\tgs.notice(DOMAIN, 'Error %s' % ex)\n\t\tfinally:\n\t\t\tgs.end(tid)\n\ndef do_sync_active_view(view):\n\tfn = view.file_name() or ''\n\tgs.set_attr('active_fn', fn)\n\n\tif fn:\n\t\tgs.set_attr('last_active_fn', fn)\n\t\tif fn.lower().endswith('.go'):\n\t\t\tgs.set_attr('last_active_go_fn', fn)\n\n\twin = view.window()\n\tif win is not None and view in win.views():\n\t\tm = {}\n\t\tpsettings = view.settings().get('GoSublime')\n\t\tif psettings and gs.is_a(psettings, {}):\n\t\t\tm = gs.mirror_settings(psettings)\n\t\tgs.set_attr('last_active_project_settings', gs.dval(m, {}))\n\n\t\tgs.sync_settings()\n\ndef do_set_gohtml_syntax(view):\n\tfn = view.file_name()\n\txl = gs.setting('gohtml_extensions', [])\n\tif xl and fn and fn.lower().endswith(tuple(xl)):\n\t\tview.set_syntax_file(gs.tm_path('gohtml'))\n\n"
        },
        {
          "name": "gslint.py",
          "type": "blob",
          "size": 5.8515625,
          "content": "from .gosubl import gs\nfrom .gosubl import gsq\nfrom .gosubl import gsshell\nfrom .gosubl import mg9\nimport os\nimport re\nimport sublime\nimport sublime_plugin\nimport threading\nimport time\n\nDOMAIN = 'GsLint'\nCL_DOMAIN = 'GsCompLint'\n\nclass FileRef(object):\n\tdef __init__(self, view):\n\t\tself.view = view\n\t\tself.src = ''\n\t\tself.tm = 0.0\n\t\tself.state = 0\n\t\tself.reports = {}\n\nclass Report(object):\n\tdef __init__(self, row, col, msg):\n\t\tself.row = row\n\t\tself.col = col\n\t\tself.msg = msg\n\nclass GsLintThread(threading.Thread):\n\tdef __init__(self):\n\t\tthreading.Thread.__init__(self)\n\t\tself.daemon = True\n\t\tself.sem = threading.Semaphore()\n\t\tself.s = set()\n\t\tself.q = gs.queue.Queue()\n\n\tdef putq(self, fn):\n\t\twith self.sem:\n\t\t\tif fn in self.s:\n\t\t\t\treturn False\n\t\t\tself.s.add(fn)\n\t\t\tself.q.put(fn)\n\t\t\treturn True\n\n\tdef popq(self):\n\t\tfn = self.q.get()\n\t\twith self.sem:\n\t\t\tself.s.discard(fn)\n\t\treturn fn\n\n\tdef run(self):\n\t\twhile True:\n\t\t\tfn = self.popq()\n\t\t\tfr = ref(fn, False)\n\t\t\tif fr:\n\t\t\t\treports = {}\n\t\t\t\tres, _ = mg9.bcall('lint', {\n\t\t\t\t\t'dir': (os.path.dirname(fn) if fn else ''),\n\t\t\t\t\t'fn': fn,\n\t\t\t\t\t'src': fr.src,\n\t\t\t\t\t'filter': gs.setting('lint_filter', []),\n\t\t\t\t})\n\t\t\t\tres = gs.dval(res, {})\n\t\t\t\tfor r in gs.dval(res.get('reports'), []):\n\t\t\t\t\tif fn and fn != '<stdin>' and r.get('Fn') != fn:\n\t\t\t\t\t\tcontinue\n\n\t\t\t\t\tkind = r.get('Kind', '')\n\t\t\t\t\trow = r.get('Row', 0)\n\t\t\t\t\tcol = r.get('Col', 0)\n\t\t\t\t\tmsg = r.get('Message', '')\n\t\t\t\t\tmsg = '%s: %s' % (kind, msg)\n\t\t\t\t\tif row >= 0 and msg:\n\t\t\t\t\t\treports[row] = Report(row, col, msg)\n\n\t\t\t\tfr = ref(fn, False)\n\t\t\t\tif fr:\n\t\t\t\t\twith sem:\n\t\t\t\t\t\tfr.state = 1\n\t\t\t\t\t\tfr.reports = reports\n\t\t\t\t\t\tfile_refs[fn] = fr\n\ndef highlight(fr):\n\tsel = gs.sel(fr.view).begin()\n\trow, _ = fr.view.rowcol(sel)\n\n\tif fr.state == 1:\n\t\tfr.state = 0\n\t\tcleanup(fr.view)\n\n\t\tregions = []\n\t\tregions0 = []\n\t\tdomain0 = DOMAIN+'-zero'\n\t\tfor r in fr.reports.values():\n\t\t\tline = fr.view.line(fr.view.text_point(r.row, 0))\n\t\t\tpos = line.begin() + r.col\n\t\t\tif pos >= line.end():\n\t\t\t\tpos = line.end()\n\t\t\tif pos == line.begin():\n\t\t\t\tregions0.append(sublime.Region(pos, pos))\n\t\t\telse:\n\t\t\t\tregions.append(sublime.Region(pos, pos))\n\n\t\tif regions:\n\t\t\tfr.view.add_regions(DOMAIN, regions, 'comment', 'dot', sublime.DRAW_EMPTY_AS_OVERWRITE)\n\t\telse:\n\t\t\tfr.view.erase_regions(DOMAIN)\n\n\t\tif regions0:\n\t\t\tfr.view.add_regions(domain0, regions0, 'comment', 'dot', sublime.HIDDEN)\n\t\telse:\n\t\t\tfr.view.erase_regions(domain0)\n\n\tmsg = ''\n\treps = fr.reports.copy()\n\tl = len(reps)\n\tif l > 0:\n\t\tmsg = '%s (%d)' % (DOMAIN, l)\n\t\tr = reps.get(row)\n\t\tif r and r.msg:\n\t\t\tmsg = '%s: %s' % (msg, r.msg)\n\n\tif fr.state != 0:\n\t\tmsg = u'\\u231B %s' % msg\n\n\tfr.view.set_status(DOMAIN, msg)\n\ndef cleanup(view):\n\tview.set_status(DOMAIN, '')\n\tview.erase_regions(DOMAIN)\n\tview.erase_regions(DOMAIN+'-zero')\n\ndef watch():\n\tglobal file_refs\n\tglobal th\n\n\tview = gs.active_valid_go_view()\n\n\tif view is not None and (view.file_name() and gs.setting('comp_lint_enabled') is True):\n\t\tfn = view.file_name()\n\t\tfr = ref(fn)\n\t\twith sem:\n\t\t\tif fr:\n\t\t\t\tfr.view = view\n\t\t\t\thighlight(fr)\n\t\tsublime.set_timeout(watch, 500)\n\t\treturn\n\n\n\tif gs.setting('gslint_enabled') is not True:\n\t\tif view:\n\t\t\twith sem:\n\t\t\t\tfor fn in file_refs:\n\t\t\t\t\tfr = file_refs[fn]\n\t\t\t\t\tcleanup(fr.view)\n\t\t\t\tfile_refs = {}\n\t\tsublime.set_timeout(watch, 2000)\n\t\treturn\n\n\tif view and not view.is_loading():\n\t\tfn = view.file_name()\n\t\tfr = ref(fn)\n\t\twith sem:\n\t\t\tif fr:\n\t\t\t\t# always use the active view (e.g in split-panes)\n\t\t\t\tfr.view = view\n\t\t\t\thighlight(fr)\n\t\t\telse:\n\t\t\t\tfr = FileRef(view)\n\n\t\t\tfile_refs[fn] = fr\n\t\t\tif fr.state == 0:\n\t\t\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\t\t\tif src != fr.src:\n\t\t\t\t\tfr.src = src\n\t\t\t\t\tfr.tm = time.time()\n\n\t\t\t\tif fr.tm > 0.0:\n\t\t\t\t\ttimeout = int(gs.setting('gslint_timeout', 500))\n\t\t\t\t\tdelta = int((time.time() - fr.tm) * 1000.0)\n\t\t\t\t\tif delta >= timeout:\n\t\t\t\t\t\tfr.tm = 0.0\n\t\t\t\t\t\tfr.state = -1\n\t\t\t\t\t\tif not th:\n\t\t\t\t\t\t\tth = GsLintThread()\n\t\t\t\t\t\t\tth.start()\n\t\t\t\t\t\tth.putq(fn)\n\n\tsublime.set_timeout(watch, 500)\n\ndef ref(fn, validate=True):\n\twith sem:\n\t\tif validate:\n\t\t\tfor fn in list(file_refs.keys()):\n\t\t\t\tfr = file_refs[fn]\n\t\t\t\tif not fr.view.window() or fn != fr.view.file_name():\n\t\t\t\t\tdel file_refs[fn]\n\t\treturn file_refs.get(fn)\n\ndef delref(fn):\n\twith sem:\n\t\tif fn in file_refs:\n\t\t\tdel file_refs[fn]\n\n\ndef do_comp_lint(dirname, fn):\n\tfr = ref(fn, False)\n\treports = {}\n\tif not fr:\n\t\treturn\n\n\tfn = gs.apath(fn, dirname)\n\tbindir, _ = gs.temp_dir('bin')\n\tlocal_env = {\n\t\t'GOBIN': bindir,\n\t}\n\n\tpat = r'%s:(\\d+)(?:[:](\\d+))?\\W+(.+)\\s*' % re.escape(os.path.basename(fn))\n\tpat = re.compile(pat, re.IGNORECASE)\n\tfor c in gs.setting('comp_lint_commands'):\n\t\ttry:\n\t\t\tcmd = c.get('cmd')\n\t\t\tif not cmd:\n\t\t\t\tcontinue\n\t\t\tcmd_domain = ' '.join(cmd)\n\n\t\t\tshell = c.get('shell') is True\n\t\t\tenv = {} if c.get('global') is True else local_env\n\t\t\tout, err, _ = gsshell.run(cmd=cmd, shell=shell, cwd=dirname, env=env)\n\t\t\tif err:\n\t\t\t\tgs.notice(DOMAIN, err)\n\n\t\t\tout = out.replace('\\r', '').replace('\\n ', '\\\\n ').replace('\\n\\t', '\\\\n\\t')\n\t\t\tfor m in pat.findall(out):\n\t\t\t\ttry:\n\t\t\t\t\trow, col, msg = m\n\t\t\t\t\trow = int(row)-1\n\t\t\t\t\tcol = int(col)-1 if col else 0\n\t\t\t\t\tmsg = msg.replace('\\\\n', '\\n').strip()\n\t\t\t\t\tif row >= 0 and msg:\n\t\t\t\t\t\tmsg = '%s: %s' % (cmd_domain, msg)\n\t\t\t\t\t\tif reports.get(row):\n\t\t\t\t\t\t\treports[row].msg = '%s\\n%s' % (reports[row].msg, msg)\n\t\t\t\t\t\t\treports[row].col = max(reports[row].col, col)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\treports[row] = Report(row, col, msg)\n\t\t\t\texcept:\n\t\t\t\t\tpass\n\t\texcept:\n\t\t\tgs.notice(DOMAIN, gs.traceback())\n\n\tdef cb():\n\t\tfr.reports = reports\n\t\tfr.state = 1\n\t\thighlight(fr)\n\tsublime.set_timeout(cb, 0)\n\nclass GsCompLintCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit):\n\t\tif gs.setting('comp_lint_enabled') is not True:\n\t\t\treturn\n\n\t\tfn = self.view.file_name()\n\t\tfn = os.path.abspath(fn)\n\t\tif fn:\n\t\t\tdirname = gs.basedir_or_cwd(fn)\n\t\t\tfile_refs[fn] = FileRef(self.view)\n\t\t\tgsq.dispatch(CL_DOMAIN, lambda: do_comp_lint(dirname, fn), '')\n\ntry:\n\tth\nexcept:\n\tth = None\n\tsem = threading.Semaphore()\n\tfile_refs = {}\n\n\twatch()\n\n"
        },
        {
          "name": "gspalette.py",
          "type": "blob",
          "size": 7.033203125,
          "content": "from .gosubl import gs\nfrom .gosubl import gspatch\nfrom .gosubl import mg9\nfrom os.path import dirname, basename, relpath\nfrom . import gslint\nimport re\nimport sublime\nimport sublime_plugin\n\nDOMAIN = 'GsPalette'\n\nclass Loc(object):\n\tdef __init__(self, fn, row, col=0):\n\t\tself.fn = fn\n\t\tself.row = row\n\t\tself.col = col\n\nclass GsPaletteCommand(sublime_plugin.WindowCommand):\n\tdef is_enabled(self):\n\t\treturn bool(gs.active_valid_go_view(self.window))\n\n\tdef run(self, palette='auto', direct=False):\n\t\tif not hasattr(self, 'items'):\n\t\t\tself.items = []\n\t\t\tself.bookmarks = []\n\t\t\tself.last_activate_palette = ''\n\t\t\tself.requires_margo = ['declarations', 'imports']\n\t\t\tself.palettes = {\n\t\t\t\t'declarations': self.palette_declarations,\n\t\t\t\t'imports': self.palette_imports,\n\t\t\t\t'errors': self.palette_errors,\n\t\t\t}\n\n\t\tif palette == 'jump_back':\n\t\t\tself.jump_back()\n\t\telif palette == 'jump_to_imports':\n\t\t\tself.jump_to_imports()\n\t\telse:\n\t\t\tself.show_palette(palette, direct)\n\n\tdef show_palette(self, palette, direct=False):\n\t\tview = gs.active_valid_go_view(self.window)\n\t\tif not view:\n\t\t\treturn\n\n\t\tpalette = palette.lower().strip()\n\t\tif palette == 'auto':\n\t\t\tpalette = self.last_activate_palette\n\t\telif palette == 'main':\n\t\t\tpalette = ''\n\n\t\tpcb = None\n\t\tif palette:\n\t\t\tpcb = self.palettes.get(palette)\n\t\t\tif pcb:\n\t\t\t\tself.last_activate_palette = palette\n\t\t\telse:\n\t\t\t\tgs.notice(DOMAIN, 'Invalid palette `%s`' % palette)\n\t\t\t\tpalette = ''\n\n\t\tif not direct and len(self.bookmarks) > 0:\n\t\t\tloc = self.bookmarks[-1]\n\t\t\tline = 'line %d' % (loc.row + 1)\n\t\t\tif view.file_name() == loc.fn:\n\t\t\t\tfn = ''\n\t\t\telse:\n\t\t\t\tfn = relpath(loc.fn, dirname(loc.fn))\n\t\t\t\tif fn.startswith('..'):\n\t\t\t\t\tfn = loc.fn\n\t\t\t\tfn = '%s ' % fn\n\t\t\tself.add_item(u'\\u2190 Go Back (%s%s)' % (fn, line), self.jump_back, None)\n\n\t\tif not direct and palette:\n\t\t\tself.add_item(u'@%s \\u21B5' % palette.title(), self.show_palette, 'main')\n\n\t\tli1 = len(self.items)\n\t\tif pcb:\n\t\t\tpcb(view, direct)\n\n\t\tif not direct:\n\t\t\tfor k in sorted(self.palettes.keys()):\n\t\t\t\tif k:\n\t\t\t\t\tif k != palette:\n\t\t\t\t\t\tttl = '@' + k.title()\n\t\t\t\t\t\tif k == 'errors':\n\t\t\t\t\t\t\tfr = gslint.ref(view.file_name())\n\t\t\t\t\t\t\tif not fr or len(fr.reports) == 0:\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\tttl = '%s (%d)' % (ttl, len(fr.reports))\n\t\t\t\t\t\titm = ttl\n\t\t\t\t\t\tself.add_item(itm, self.show_palette, k)\n\n\tdef do_show_panel(self):\n\t\t# todo cleanup this file and get rid of the old gspalette\n\t\titems = []\n\t\tactions = {}\n\t\tfor tup in self.items:\n\t\t\titem, action, args = tup\n\t\t\tactions[len(items)] = (action, args)\n\t\t\titems.append(item)\n\t\tself.items = []\n\n\t\tdef on_done(i, win):\n\t\t\taction, args = actions.get(i, (None, None))\n\t\t\tif i >= 0 and action:\n\t\t\t\taction(args)\n\t\tgs.show_quick_panel(items, on_done)\n\n\tdef add_item(self, item, action=None, args=None):\n\t\tself.items.append((item, action, args))\n\n\tdef log_bookmark(self, view, loc):\n\t\tbks = self.bookmarks\n\t\tif len(bks) == 0 or (bks[-1].row != loc.row and bks[-1].fn != view.file_name()):\n\t\t\tbks.append(loc)\n\n\tdef goto(self, loc):\n\t\tgs.focus(loc.fn, loc.row, loc.col)\n\n\tdef jump_to_imports(self):\n\t\tview = gs.active_valid_go_view()\n\t\tif not view:\n\t\t\treturn\n\n\t\tlast_import = gs.attr('last_import_path.%s' % gs.view_fn(view), '')\n\t\tr = None\n\t\tif last_import:\n\t\t\toffset = len(last_import) + 2\n\t\t\tlast_import = re.escape(last_import)\n\t\t\tpat = '(?s)import.*?(?:\"%s\"|`%s`)' % (last_import, last_import)\n\t\t\tr = view.find(pat, 0)\n\n\t\tif not r:\n\t\t\toffset = 1\n\t\t\tpat = '(?s)import.*?[\"`]'\n\t\t\tr = view.find(pat, 0)\n\n\t\tif not r:\n\t\t\tgs.notice(DOMAIN, \"cannot find import declarations\")\n\t\t\treturn\n\n\t\tpt = r.end() - offset\n\t\trow, col = view.rowcol(pt)\n\t\tloc = Loc(view.file_name(), row, col)\n\t\tself.jump_to((view, loc))\n\n\tdef jump_back(self, _=None):\n\t\tif len(self.bookmarks) > 0:\n\t\t\tself.goto(self.bookmarks.pop())\n\n\tdef palette_errors(self, view, direct=False):\n\t\tindent = '' if direct else '    '\n\t\treps = {}\n\t\tfr = gslint.ref(view.file_name())\n\t\tif fr:\n\t\t\treps = fr.reports.copy()\n\t\tkeys = sorted(reps.keys())\n\t\tif keys:\n\t\t\tfor k in keys:\n\t\t\t\tr = reps[k]\n\t\t\t\tloc = Loc(view.file_name(), r.row, r.col)\n\t\t\t\tm = []\n\t\t\t\tm.append(\"%sline %d:\" % (indent, r.row+1))\n\t\t\t\tlc = 0\n\t\t\t\tfor ln in r.msg.split('\\n'):\n\t\t\t\t\tif ln:\n\t\t\t\t\t\tlc += 1\n\t\t\t\t\t\tif len(ln) > 50:\n\t\t\t\t\t\t\tm.append('\\t%d: %s -' % (lc, ln[:50]))\n\t\t\t\t\t\t\tm.append('\\t  %s' % ln[50:])\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tm.append('\\t%d: %s' % (lc, ln))\n\n\t\t\t\tself.add_item(m, self.jump_to, (view, loc))\n\t\telse:\n\t\t\tself.add_item(['', 'No errors to report'])\n\n\t\tself.do_show_panel()\n\n\n\tdef palette_imports(self, view, direct=False):\n\t\tindent = '' if direct else '    '\n\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\tdef f(im, err):\n\t\t\tif err:\n\t\t\t\tgs.notice(DOMAIN, err)\n\t\t\t\treturn\n\n\t\t\tdelete_imports = []\n\t\t\tadd_imports = []\n\t\t\tpaths = im.get('paths', {})\n\t\t\tuse_named = gs.setting('use_named_imports') is True\n\t\t\tfor path in paths:\n\t\t\t\tskipAdd = False\n\t\t\t\tfor i in im.get('imports', []):\n\t\t\t\t\tif i.get('path') == path:\n\t\t\t\t\t\tskipAdd = True\n\t\t\t\t\t\tname = i.get('name', '')\n\t\t\t\t\t\tif not name:\n\t\t\t\t\t\t\tname = basename(path)\n\t\t\t\t\t\tif name == path:\n\t\t\t\t\t\t\tdelete_imports.append(('%sdelete: %s' % (indent, name), i))\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tdelete_imports.append(('%sdelete: %s ( %s )' % (indent, name, path), i))\n\n\t\t\t\tif not skipAdd:\n\t\t\t\t\ttitle = paths[path]\n\t\t\t\t\ts = '%s%s' % (indent, path)\n\t\t\t\t\tm = {\n\t\t\t\t\t\t'path': path,\n\t\t\t\t\t\t'add': True,\n\t\t\t\t\t}\n\t\t\t\t\tname = title.split()[0] if title else ''\n\t\t\t\t\tif name and name != path and not path.endswith('/%s' % name):\n\t\t\t\t\t\ts = '%s (%s)' % (s, name)\n\t\t\t\t\t\tif use_named:\n\t\t\t\t\t\t\tm['name'] = name\n\n\t\t\t\t\tif '[vendored]' in title:\n\t\t\t\t\t\ts = s + ' [vendored]'\n\n\t\t\t\t\tadd_imports.append((s, m))\n\n\t\t\tfor i in sorted(delete_imports):\n\t\t\t\tself.add_item(i[0], self.toggle_import, (view, i[1]))\n\t\t\tif len(delete_imports) > 0:\n\t\t\t\tself.add_item(' ', self.show_palette, 'imports')\n\t\t\tfor i in sorted(add_imports):\n\t\t\t\tself.add_item(i[0], self.toggle_import, (view, i[1]))\n\n\t\t\tself.do_show_panel()\n\n\t\tmg9.import_paths(view.file_name(), src, f)\n\n\tdef toggle_import(self, a):\n\t\tview, decl = a\n\t\tim, err = mg9.imports(\n\t\t\tview.file_name(),\n\t\t\tview.substr(sublime.Region(0, view.size())),\n\t\t\t[decl]\n\t\t)\n\n\t\tif err:\n\t\t\tgs.notice(DOMAIN, err)\n\t\telse:\n\t\t\tsrc = im.get('src', '')\n\t\t\tline_ref = im.get('lineRef', 0)\n\t\t\tr = view.full_line(view.text_point(max(0, line_ref-1), 0))\n\t\t\tif not src or line_ref < 1 or not r:\n\t\t\t\treturn\n\n\t\t\tview.run_command('gs_patch_imports', {\n\t\t\t\t'pos': r.end(),\n\t\t\t\t'content': src,\n\t\t\t\t'added_path': (decl.get('path') if decl.get('add') else '')\n\t\t\t})\n\n\tdef jump_to(self, a):\n\t\tview, loc = a\n\t\trow, col = gs.rowcol(view)\n\t\tif loc.row != row:\n\t\t\tself.log_bookmark(view, Loc(view.file_name(), row, col))\n\t\tself.goto(loc)\n\n\tdef palette_declarations(self, view, direct=False):\n\t\tdef f(res, err):\n\t\t\tif err:\n\t\t\t\tgs.notify('GsDeclarations', err)\n\t\t\telse:\n\t\t\t\tdecls = res.get('file_decls', [])\n\t\t\t\tdecls.sort(key=lambda v: v.get('row', 0))\n\t\t\t\tadded = 0\n\t\t\t\tfor i, v in enumerate(decls):\n\t\t\t\t\tloc = Loc(v['fn'], v['row'], v['col'])\n\t\t\t\t\ts = '%s %s' % (v['kind'], (v['repr'] or v['name']))\n\t\t\t\t\tself.add_item(s, self.jump_to, (view, loc))\n\t\t\t\t\tadded += 1\n\n\t\t\tif added < 1:\n\t\t\t\tself.add_item(['', 'No declarations found'])\n\n\t\t\tself.do_show_panel()\n\n\t\tmg9.declarations(gs.view_fn(view), gs.view_src(view), '', f)\n"
        },
        {
          "name": "gstest.py",
          "type": "blob",
          "size": 2.2021484375,
          "content": "from .gosubl import gs\nfrom .gosubl import mg9\nimport os\nimport re\nimport sublime\nimport sublime_plugin\n\nDOMAIN = 'GsTest'\n\nTEST_PAT = re.compile(r'^((Test|Example|Benchmark)\\w*)')\n\nclass GsTestCommand(sublime_plugin.WindowCommand):\n\tdef is_enabled(self):\n\t\treturn gs.is_go_source_view(self.window.active_view())\n\n\tdef run(self):\n\t\tdef f(res, err):\n\t\t\tif err:\n\t\t\t\tgs.notify(DOMAIN, err)\n\t\t\t\treturn\n\n\t\t\tmats = {}\n\t\t\targs = {}\n\t\t\tdecls = res.get('file_decls', [])\n\t\t\tdecls.extend(res.get('pkg_decls', []))\n\t\t\tfor d in decls:\n\t\t\t\tname = d['name']\n\t\t\t\tprefix, _ =  match_prefix_name(name)\n\t\t\t\tkind = d['kind'].lstrip('+-~ ')\n\t\t\t\tif prefix and kind == 'func' and d['repr'] == '':\n\t\t\t\t\tmats[prefix] = True\n\t\t\t\t\targs[name] = name\n\n\t\t\tnames = sorted(args.keys())\n\t\t\tents = ['Run all tests and examples']\n\t\t\tfor k in ['Test', 'Benchmark', 'Example']:\n\t\t\t\tif mats.get(k):\n\t\t\t\t\ts = 'Run %ss Only' % k\n\t\t\t\t\tents.append(s)\n\t\t\t\t\tif k == 'Benchmark':\n\t\t\t\t\t\targs[s] = ['-test.run=none', '-test.bench=\"%s.*\"' % k]\n\t\t\t\t\telse:\n\t\t\t\t\t\targs[s] = ['-test.run=\"%s.*\"' % k]\n\n\t\t\tfor k in names:\n\t\t\t\tents.append(k)\n\t\t\t\tif k.startswith('Benchmark'):\n\t\t\t\t\targs[k] = ['-test.run=none', '-test.bench=\"^%s$\"' % k]\n\t\t\t\telse:\n\t\t\t\t\targs[k] = ['-test.run=\"^%s$\"' % k]\n\n\t\t\tdef cb(i, win):\n\t\t\t\tif i >= 0:\n\t\t\t\t\ta = args.get(ents[i], [])\n\t\t\t\t\twin.active_view().run_command('gs9o_open', {'run': gs.lst('go', 'test', a)})\n\n\t\t\tgs.show_quick_panel(ents, cb)\n\n\t\twin, view = gs.win_view(None, self.window)\n\t\tif view is None:\n\t\t\treturn\n\n\t\tvfn = gs.view_fn(view)\n\t\tsrc = gs.view_src(view)\n\t\tpkg_dir = ''\n\t\tif view.file_name():\n\t\t\tpkg_dir = os.path.dirname(view.file_name())\n\n\t\tmg9.declarations(vfn, src, pkg_dir, f)\n\n\ndef match_prefix_name(s):\n\tm = TEST_PAT.match(s)\n\treturn (m.group(2), m.group(1)) if m else ('', '')\n\ndef handle_action(view, action):\n\tfn = view.file_name()\n\tprefix, name = match_prefix_name(view.substr(view.word(gs.sel(view))))\n\tok = prefix and fn and fn.endswith('_test.go')\n\tif ok:\n\t\tif action == 'right-click':\n\t\t\tpat = '^%s.*' % prefix\n\t\telse:\n\t\t\tpat = '^%s$' % name\n\n\t\tif prefix == 'Benchmark':\n\t\t\tcmd = ['go', 'test', '-test.run=none', '-test.bench=\"%s\"' % pat]\n\t\telse:\n\t\t\tcmd = ['go', 'test', '-test.run=\"%s\"' % pat]\n\n\t\tview.run_command('gs9o_open', {'run': cmd})\n\n\treturn ok\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "margo_sublime.py",
          "type": "blob",
          "size": 0.03515625,
          "content": "from .gosubl.margo_sublime import *\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "something_borrowed",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "ss",
          "type": "tree",
          "content": null
        },
        {
          "name": "syntax",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}