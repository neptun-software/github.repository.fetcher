{
  "metadata": {
    "timestamp": 1736566945089,
    "page": 525,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "im2nguyen/rover",
      "stars": 3065,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": "# ignore .git\n.git\n.github\ndocs\nexample\nrover\n**/node_modules\n**/dist"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1025390625,
          "content": "build/rover\n.DS_Store\nrover.zip\nplan.out\n\n# Ignore generated terraform files\n.terraform**\n\n.idea/\n\nbuild/"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.5361328125,
          "content": "# Visit https://goreleaser.com for documentation on how to customize this\n# behavior.\nbefore:\n  hooks:\n    # this is just an example and not a requirement for provider building/publishing\n    - go mod tidy\nbuilds:\n  - env:\n      # goreleaser does not work with CGO, it could also complicate\n      # usage by users in CI/CD systems like Terraform Cloud where\n      # they are unable to install libraries.\n      - CGO_ENABLED=0\n    mod_timestamp: \"{{ .CommitTimestamp }}\"\n    flags:\n      - -trimpath\n    ldflags:\n      - \"-s -w -X main.version={{.Version}} -X main.commit={{.Commit}}\"\n    goos:\n      - freebsd\n      - windows\n      - linux\n      - darwin\n    goarch:\n      - amd64\n      - \"386\"\n      - arm\n      - arm64\n    ignore:\n      - goos: darwin\n        goarch: \"386\"\n    binary: \"{{ .ProjectName }}_v{{ .Version }}\"\narchives:\n  - format: zip\n    name_template: \"{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}\"\nchecksum:\n  name_template: \"{{ .ProjectName }}_{{ .Version }}_SHA256SUMS\"\n  algorithm: sha256\nsigns:\n  - artifacts: checksum\n    args:\n      # if you are using this is a GitHub action or some other automated pipeline, you\n      # need to pass the batch flag to indicate its not interactive.\n      - \"--batch\"\n      - \"--local-user\"\n      - \"{{ .Env.GPG_FINGERPRINT }}\" # set this environment variable for your signing key\n      - \"--output\"\n      - \"${signature}\"\n      - \"--detach-sign\"\n      - \"${artifact}\"\nrelease:\n  # If you want to manually examine the release before its live, uncomment this line:\n  # draft: true\nchangelog:\n  skip: true\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.0751953125,
          "content": "# Prep base stage\nARG TF_VERSION=light\n\n# Build ui\nFROM node:20-alpine as ui\nWORKDIR /src\n# Copy specific package files\nCOPY ./ui/package-lock.json ./\nCOPY ./ui/package.json ./\nCOPY ./ui/babel.config.js ./\n# Set Progress, Config and install\nRUN npm set progress=false && npm config set depth 0 && npm install\n# Copy source\n# Copy Specific Directories\nCOPY ./ui/public ./public\nCOPY ./ui/src ./src\n# build (to dist folder)\nRUN NODE_OPTIONS='--openssl-legacy-provider' npm run build\n\n# Build rover\nFROM golang:1.21 AS rover\nWORKDIR /src\n# Copy full source\nCOPY . .\n# Copy ui/dist from ui stage as it needs to embedded\nCOPY --from=ui ./src/dist ./ui/dist\n# Build rover\nRUN go get -d -v golang.org/x/net/html\nRUN CGO_ENABLED=0 GOOS=linux go build -o rover .\n\n# Release stage\nFROM hashicorp/terraform:$TF_VERSION AS release\n# Copy terraform binary to the rover's default terraform path\nRUN cp /bin/terraform /usr/local/bin/terraform\n# Copy rover binary\nCOPY --from=rover /src/rover /bin/rover\nRUN chmod +x /bin/rover\n\n# Install Google Chrome\nRUN apk add chromium\n\nWORKDIR /src\n\nENTRYPOINT [ \"/bin/rover\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2021 rover\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.7490234375,
          "content": "## Rover - Terraform Visualizer\n\nRover is a [Terraform](http://terraform.io/) visualizer.\n\nIn order to do this, Rover:\n\n1. generates a [`plan`](https://www.terraform.io/docs/cli/commands/plan.html#out-filename) file and parses the configuration in the root directory or uses a provided plan.\n1. parses the `plan` and configuration files to generate three items: the resource overview (`rso`), the resource map (`map`), and the resource graph (`graph`).\n1. consumes the `rso`, `map`, and `graph` to generate an interactive configuration and state visualization hosts on `0.0.0.0:9000`.\n\nFeedback (via issues) and pull requests are appreciated!\n\n![Rover Screenshot](docs/rover-cropped-screenshot.png)\n\n## Quickstart\n\nThe fastest way to get up and running with Rover is through Docker.\n\nRun the following command in any Terraform workspace to generate a visualization. This command copies all the files in your current directory to the Rover container and exposes port `:9000`.\n\n```\n$ docker run --rm -it -p 9000:9000 -v $(pwd):/src im2nguyen/rover\n2021/07/02 06:46:23 Starting Rover...\n2021/07/02 06:46:23 Initializing Terraform...\n2021/07/02 06:46:24 Generating plan...\n2021/07/02 06:46:25 Parsing configuration...\n2021/07/02 06:46:25 Generating resource overview...\n2021/07/02 06:46:25 Generating resource map...\n2021/07/02 06:46:25 Generating resource graph...\n2021/07/02 06:46:25 Done generating assets.\n2021/07/02 06:46:25 Rover is running on 0.0.0.0:9000\n```\n\nOnce Rover runs on `0.0.0.0:9000`, navigate to it to find the visualization!\n\n### Run on Terraform plan file\n\nUse `-planJSONPath` to start Rover on Terraform plan file. The `plan.json` file should be in Linux version - Unix (LF), UTF-8.\n\nFirst, generate the plan file in JSON format.\n\n```\n$ terraform plan -out plan.out\n$ terraform show -json plan.out > plan.json\n```\n\nThen, run Rover on it.\n\n```\n$ docker run --rm -it -p 9000:9000 -v $(pwd)/plan.json:/src/plan.json im2nguyen/rover:latest -planJSONPath=plan.json\n```\n\n### Standalone mode\n\nStandalone mode generates a `rover.zip` file containing all the static assets.\n\n```\n$ docker run --rm -it -p 9000:9000 -v \"$(pwd):/src\" im2nguyen/rover -standalone true\n```\n\nAfter all the assets are generated, unzip `rover.zip` and open `rover/index.html` in your favourite web browser.\n\n### Set environment variables\n\nUse `--env` or `--env-file` to set environment variables in the Docker container. For example, you can save your AWS credentials to a `.env` file.\n\n```\n$ printenv | grep \"AWS\" > .env\n```\n\nThen, add it as environment variables to your Docker container with `--env-file`.\n\n```\n$ docker run --rm -it -p 9000:9000 -v \"$(pwd):/src\" --env-file ./.env im2nguyen/rover\n```\n\n### Define tfbackend, tfvars and Terraform variables\n\nUse `-tfBackendConfig` to define backend config files and `-tfVarsFile` or `-tfVar` to define variables. For example, you can run the following in the `example/random-test` directory to overload variables.\n\n```\n$ docker run --rm -it -p 9000:9000 -v \"$(pwd):/src\" im2nguyen/rover -tfBackendConfig test.tfbackend -tfVarsFile test.tfvars -tfVar max_length=4\n```\n\n### Image generation\n\nUse `-genImage` to generate and save the visualization as a SVG image.\n\n```\n$ docker run --rm -it  -v \"$(pwd):/src\" im2nguyen/rover -genImage true\n```\n\n## Installation\n\nYou can download Rover binary specific to your system by visiting the [Releases page](https://github.com/im2nguyen/rover/releases). Download the binary, unzip, then move `rover` into your `PATH`.\n\n- [rover zip — MacOS - intel](https://github.com/im2nguyen/rover/releases/download/v0.3.2/rover_0.3.2_darwin_amd64.zip)\n- [rover zip — MacOS - Apple Silicon](https://github.com/im2nguyen/rover/releases/download/v0.3.2/rover_0.3.2_darwin_arm64.zip)\n- [rover zip — Windows](https://github.com/im2nguyen/rover/releases/download/v0.3.2/rover_0.3.2_windows_amd64.zip)\n\n### Build from source\n\nYou can build Rover manually by cloning this repository, then building the frontend and compiling the binary. It requires Go v1.21+ and `npm`.\n\n#### Build frontend\n\nFirst, navigate to the `ui`.\n\n```\n$ cd ui\n```\n\nThen, install the dependencies.\n\n```\n$ npm install\n```\n\nFinally, build the frontend.\n\n```\n$ npm run build\n```\n\n#### Compile binary\n\nNavigate to the root directory.\n\n```\n$ cd ..\n```\n\nCompile and install the binary. Alternatively, you can use `go build` and move the binary into your `PATH`.\n\n```\n$ go install\n```\n\n### Build Docker image\n\nFirst, compile the binary for `linux/amd64`.\n\n```\n$ env GOOS=linux GOARCH=amd64 go build .\n```\n\nThen, build the Docker image.\n\n```\n$ docker build . -t im2nguyen/rover --no-cache\n```\n\n\n## Basic usage\n\nThis repository contains two examples of Terraform configurations in `example`.\n\nNavigate into `random-test` example configuration. This directory contains configuration that showcases a wide variety of features common in Terraform (modules, count, output, locals, etc) with the [`random`](https://registry.terraform.io/providers/hashicorp/random/latest) provider.\n\n```\n$ cd example/random-test\n```\n\nRun Rover. Rover will start running in the current directory and assume the Terraform binary lives in `/usr/local/bin/terraform` by default.\n\n```\n$ rover\n2021/06/23 22:51:27 Starting Rover...\n2021/06/23 22:51:27 Initializing Terraform...\n2021/06/23 22:51:28 Generating plan...\n2021/06/23 22:51:28 Parsing configuration...\n2021/06/23 22:51:28 Generating resource overview...\n2021/06/23 22:51:28 Generating resource map...\n2021/06/23 22:51:28 Generating resource graph...\n2021/06/23 22:51:28 Done generating assets.\n2021/06/23 22:51:28 Rover is running on 0.0.0.0:9000\n```\n\nYou can specify the working directory (where your configuration is living) and the Terraform binary location using flags.\n\n```\n$ rover -workingDir \"example/eks-cluster\" -tfPath \"/Users/dos/terraform\"\n```\n\nOnce Rover runs on `0.0.0.0:9000`, navigate to it to find the visualization!\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.6533203125,
          "content": "module rover\n\ngo 1.21\n\nrequire (\n\tgithub.com/chromedp/cdproto v0.0.0-20211205231339-d2673e93eee4\n\tgithub.com/chromedp/chromedp v0.7.6\n\tgithub.com/hashicorp/terraform-config-inspect v0.0.0-20210511202847-ad33d83d7650\n\tgithub.com/hashicorp/terraform-exec v0.15.0\n\tgithub.com/hashicorp/terraform-json v0.13.0\n\tgolang.org/x/net v0.0.0-20210924151903-3ad01bbaa167 // indirect\n)\n\nrequire github.com/hashicorp/go-tfe v0.20.0\n\nrequire (\n\tgithub.com/agext/levenshtein v1.2.2 // indirect\n\tgithub.com/apparentlymart/go-textseg v1.0.0 // indirect\n\tgithub.com/apparentlymart/go-textseg/v13 v13.0.0 // indirect\n\tgithub.com/chromedp/sysutil v1.0.0 // indirect\n\tgithub.com/gobwas/httphead v0.1.0 // indirect\n\tgithub.com/gobwas/pool v0.2.1 // indirect\n\tgithub.com/gobwas/ws v1.1.0 // indirect\n\tgithub.com/golang/mock v1.6.0 // indirect\n\tgithub.com/google/go-cmp v0.5.6 // indirect\n\tgithub.com/google/go-querystring v1.1.0 // indirect\n\tgithub.com/hashicorp/go-cleanhttp v0.5.2 // indirect\n\tgithub.com/hashicorp/go-retryablehttp v0.7.0 // indirect\n\tgithub.com/hashicorp/go-slug v0.7.0 // indirect\n\tgithub.com/hashicorp/go-version v1.3.0 // indirect\n\tgithub.com/hashicorp/hcl v0.0.0-20170504190234-a4b07c25de5f // indirect\n\tgithub.com/hashicorp/hcl/v2 v2.0.0 // indirect\n\tgithub.com/hashicorp/jsonapi v0.0.0-20210826224640-ee7dae0fb22d // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/mitchellh/go-wordwrap v1.0.0 // indirect\n\tgithub.com/zclconf/go-cty v1.9.1 // indirect\n\tgolang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e // indirect\n\tgolang.org/x/text v0.3.6 // indirect\n\tgolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 34.671875,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=\ncloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=\ncloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.45.1 h1:lRi0CHyU+ytlvylOlFKKq0af6JncuyoRh1J+QJBqQx0=\ncloud.google.com/go v0.45.1/go.mod h1:RpBamKRgapWJb87xiFSdk4g1CME7QZg3uwTez+TSTjc=\ncloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=\ncloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=\ngithub.com/Masterminds/goutils v1.1.0/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=\ngithub.com/Masterminds/semver v1.5.0/go.mod h1:MB6lktGJrhw8PrUyiEoblNEGEQ+RzHPF078ddwwvV3Y=\ngithub.com/Masterminds/sprig v2.22.0+incompatible/go.mod h1:y6hNFY5UBTIWBxnzTeuNhlNS5hqE0NB0E6fgfo2Br3o=\ngithub.com/Microsoft/go-winio v0.4.14/go.mod h1:qXqCSQ3Xa7+6tgxaGTIe4Kpcdsi+P8jBhyzoq1bpyYA=\ngithub.com/Microsoft/go-winio v0.4.16 h1:FtSW/jqD+l4ba5iPBj9CODVtgfYAD8w2wS923g/cFDk=\ngithub.com/Microsoft/go-winio v0.4.16/go.mod h1:XB6nPKklQyQ7GC9LdcBEcBl8PF76WugXOPRXwdLnMv0=\ngithub.com/ProtonMail/go-crypto v0.0.0-20210428141323-04723f9f07d7 h1:YoJbenK9C67SkzkDfmQuVln04ygHj3vjZfd9FL+GmQQ=\ngithub.com/ProtonMail/go-crypto v0.0.0-20210428141323-04723f9f07d7/go.mod h1:z4/9nQmJSSwwds7ejkxaJwO37dru3geImFUdJlaLzQo=\ngithub.com/acomagu/bufpipe v1.0.3 h1:fxAGrHZTgQ9w5QqVItgzwj235/uYZYgbXitB+dLupOk=\ngithub.com/acomagu/bufpipe v1.0.3/go.mod h1:mxdxdup/WdsKVreO5GpW4+M/1CE2sMG4jeGJ2sYmHc4=\ngithub.com/agext/levenshtein v1.2.1/go.mod h1:JEDfjyjHDjOF/1e4FlBE/PkbqA9OfWu2ki2W0IB5558=\ngithub.com/agext/levenshtein v1.2.2 h1:0S/Yg6LYmFJ5stwQeRp6EeOcCbj7xiqQSdNelsXvaqE=\ngithub.com/agext/levenshtein v1.2.2/go.mod h1:JEDfjyjHDjOF/1e4FlBE/PkbqA9OfWu2ki2W0IB5558=\ngithub.com/andybalholm/crlf v0.0.0-20171020200849-670099aa064f/go.mod h1:k8feO4+kXDxro6ErPXBRTJ/ro2mf0SsFG8s7doP9kJE=\ngithub.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=\ngithub.com/apparentlymart/go-dump v0.0.0-20180507223929-23540a00eaa3/go.mod h1:oL81AME2rN47vu18xqj1S1jPIPuN7afo62yKTNn3XMM=\ngithub.com/apparentlymart/go-textseg v1.0.0 h1:rRmlIsPEEhUTIKQb7T++Nz/A5Q6C9IuX2wFoYVvnCs0=\ngithub.com/apparentlymart/go-textseg v1.0.0/go.mod h1:z96Txxhf3xSFMPmb5X/1W05FF/Nj9VFpLOpjS5yuumk=\ngithub.com/apparentlymart/go-textseg/v13 v13.0.0 h1:Y+KvPE1NYz0xl601PVImeQfFyEy6iT90AvPUL1NNfNw=\ngithub.com/apparentlymart/go-textseg/v13 v13.0.0/go.mod h1:ZK2fH7c4NqDTLtiYLvIkEghdlcqw7yxLeM89kiTRPUo=\ngithub.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=\ngithub.com/aws/aws-sdk-go v1.15.78 h1:LaXy6lWR0YK7LKyuU0QWy2ws/LWTPfYV/UgfiBu4tvY=\ngithub.com/aws/aws-sdk-go v1.15.78/go.mod h1:E3/ieXAlvM0XWO57iftYVDLLvQ824smPP3ATZkfNZeM=\ngithub.com/bgentry/go-netrc v0.0.0-20140422174119-9fd32a8b3d3d h1:xDfNPAt8lFiC1UJrqV3uuy861HCTo708pDMbjHHdCas=\ngithub.com/bgentry/go-netrc v0.0.0-20140422174119-9fd32a8b3d3d/go.mod h1:6QX/PXZ00z/TKoufEY6K/a0k6AhaJrQKdFe6OfVXsa4=\ngithub.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=\ngithub.com/cheggaaa/pb v1.0.27/go.mod h1:pQciLPpbU0oxA0h+VJYYLxO+XeDQb5pZijXscXHm81s=\ngithub.com/chromedp/cdproto v0.0.0-20211126220118-81fa0469ad77/go.mod h1:At5TxYYdxkbQL0TSefRjhLE3Q0lgvqKKMSFUglJ7i1U=\ngithub.com/chromedp/cdproto v0.0.0-20211205231339-d2673e93eee4 h1:St4rQbn3gGWL59ygb4NBxchIeAIW0CTz5Kw4m5JTemU=\ngithub.com/chromedp/cdproto v0.0.0-20211205231339-d2673e93eee4/go.mod h1:At5TxYYdxkbQL0TSefRjhLE3Q0lgvqKKMSFUglJ7i1U=\ngithub.com/chromedp/chromedp v0.7.6 h1:2juGaktzjwULlsn+DnvIZXFUckEp5xs+GOBroaea+jA=\ngithub.com/chromedp/chromedp v0.7.6/go.mod h1:ayT4YU/MGAALNfOg9gNrpGSAdnU51PMx+FCeuT1iXzo=\ngithub.com/chromedp/sysutil v1.0.0 h1:+ZxhTpfpZlmchB58ih/LBHX52ky7w2VhQVKQMucy3Ic=\ngithub.com/chromedp/sysutil v1.0.0/go.mod h1:kgWmDdq8fTzXYcKIBqIYvRRTnYb9aNS9moAV0xufSww=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/emirpasic/gods v1.12.0 h1:QAUIPSaCu4G+POclxeqb3F+WPpdKqFGlw36+yOzGlrg=\ngithub.com/emirpasic/gods v1.12.0/go.mod h1:YfzfFFoVP/catgzJb4IKIqXjX78Ha8FMSDh3ymbK86o=\ngithub.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=\ngithub.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568/go.mod h1:xEzjJPgXI435gkrCt3MPfRiAkVrwSbHsst4LCFVfpJc=\ngithub.com/gliderlabs/ssh v0.2.2/go.mod h1:U7qILu1NlMHj9FlMhZLlkCdDnU1DBEAqr0aevW3Awn0=\ngithub.com/go-git/gcfg v1.5.0 h1:Q5ViNfGF8zFgyJWPqYwA7qGFoMTEiBmdlkcfRmpIMa4=\ngithub.com/go-git/gcfg v1.5.0/go.mod h1:5m20vg6GwYabIxaOonVkTdrILxQMpEShl1xiMF4ua+E=\ngithub.com/go-git/go-billy/v5 v5.2.0/go.mod h1:pmpqyWchKfYfrkb/UVH4otLvyi/5gJlGI4Hb3ZqZ3W0=\ngithub.com/go-git/go-billy/v5 v5.3.1 h1:CPiOUAzKtMRvolEKw+bG1PLRpT7D3LIs3/3ey4Aiu34=\ngithub.com/go-git/go-billy/v5 v5.3.1/go.mod h1:pmpqyWchKfYfrkb/UVH4otLvyi/5gJlGI4Hb3ZqZ3W0=\ngithub.com/go-git/go-git-fixtures/v4 v4.2.1/go.mod h1:K8zd3kDUAykwTdDCr+I0per6Y6vMiRR/nnVTBtavnB0=\ngithub.com/go-git/go-git/v5 v5.4.2 h1:BXyZu9t0VkbiHtqrsvdq39UDhGJTl1h55VW6CSC4aY4=\ngithub.com/go-git/go-git/v5 v5.4.2/go.mod h1:gQ1kArt6d+n+BGd+/B/I74HwRTLhth2+zti4ihgckDc=\ngithub.com/go-test/deep v1.0.3 h1:ZrJSEWsXzPOxaZnFteGEfooLba+ju3FYIbOrS+rQd68=\ngithub.com/go-test/deep v1.0.3/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=\ngithub.com/gobwas/httphead v0.1.0 h1:exrUm0f4YX0L7EBwZHuCF4GDp8aJfVeBrlLQrs6NqWU=\ngithub.com/gobwas/httphead v0.1.0/go.mod h1:O/RXo79gxV8G+RqlR/otEwx4Q36zl9rqC5u12GKvMCM=\ngithub.com/gobwas/pool v0.2.1 h1:xfeeEhW7pwmX8nuLVlqbzVc7udMDrwetjEv+TZIz1og=\ngithub.com/gobwas/pool v0.2.1/go.mod h1:q8bcK0KcYlCgd9e7WYLm9LpyS+YeLd8JVDW6WezmKEw=\ngithub.com/gobwas/ws v1.1.0 h1:7RFti/xnNkMJnrK7D1yQ/iCIB5OrrY/54/H930kIbHA=\ngithub.com/gobwas/ws v1.1.0/go.mod h1:nzvNcVha5eUziGrbxFCo6qFIojQHjJV5cLYIbezhfL0=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=\ngithub.com/golang/mock v1.6.0 h1:ErTB+efbowRARo13NNdxyJji2egdxLGQhRaY+DUumQc=\ngithub.com/golang/mock v1.6.0/go.mod h1:p6yTPP+5HYm5mzsMV8JkE6ZKdX+/wYM6Hr+LicevLPs=\ngithub.com/golang/protobuf v1.1.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.4 h1:87PNWwrRvUSnqS4dlcBU/ftvOIBep4sYuBLlh6rX2wk=\ngithub.com/golang/protobuf v1.3.4/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6 h1:BKbKCqvP6I+rmFHt06ZmyQtvB8xAkWdhFyr0ZUNZcxQ=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-querystring v1.1.0 h1:AnCroh3fv4ZBgVIf1Iwtovgjaw/GiKJo8M8yD/fhyJ8=\ngithub.com/google/go-querystring v1.1.0/go.mod h1:Kcdr2DB4koayq7X8pmAG4sNG59So17icRSOU623lUBU=\ngithub.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=\ngithub.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20190515194954-54271f7e092f/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=\ngithub.com/googleapis/gax-go/v2 v2.0.5 h1:sjZBwGj9Jlw33ImPtvFviGYvseOtDM7hkSKB7+Tv3SM=\ngithub.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-checkpoint v0.5.0 h1:MFYpPZCnQqQTE18jFwSII6eUQrD/oxMFp3mlgcqk5mU=\ngithub.com/hashicorp/go-checkpoint v0.5.0/go.mod h1:7nfLNL10NsxqO4iWuW6tWW0HjZuDrwkBuEQsVcpCOgg=\ngithub.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-cleanhttp v0.5.1/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-cleanhttp v0.5.2 h1:035FKYIWjmULyFRBKPs8TBQoi0x6d9G4xc9neXJWAZQ=\ngithub.com/hashicorp/go-cleanhttp v0.5.2/go.mod h1:kO/YDlP8L1346E6Sodw+PrpBSV4/SoxCXGY6BqNFT48=\ngithub.com/hashicorp/go-getter v1.5.3 h1:NF5+zOlQegim+w/EUhSLh6QhXHmZMEeHLQzllkQ3ROU=\ngithub.com/hashicorp/go-getter v1.5.3/go.mod h1:BrrV/1clo8cCYu6mxvboYg+KutTiFnXjMEgDD8+i7ZI=\ngithub.com/hashicorp/go-hclog v0.9.2 h1:CG6TE5H9/JXsFWJCfoIVpKFIkFe6ysEuHirp4DxCsHI=\ngithub.com/hashicorp/go-hclog v0.9.2/go.mod h1:5CU+agLiy3J7N7QjHK5d05KxGsuXiQLrjA0H7acj2lQ=\ngithub.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=\ngithub.com/hashicorp/go-retryablehttp v0.7.0 h1:eu1EI/mbirUgP5C8hVsTNaGZreBDlYiwC1FZWkvQPQ4=\ngithub.com/hashicorp/go-retryablehttp v0.7.0/go.mod h1:vAew36LZh98gCBJNLH42IQ1ER/9wtLZZ8meHqQvEYWY=\ngithub.com/hashicorp/go-safetemp v1.0.0 h1:2HR189eFNrjHQyENnQMMpCiBAsRxzbTMIgBhEyExpmo=\ngithub.com/hashicorp/go-safetemp v1.0.0/go.mod h1:oaerMy3BhqiTbVye6QuFhFtIceqFoDHxNAB65b+Rj1I=\ngithub.com/hashicorp/go-slug v0.7.0 h1:8HIi6oreWPtnhpYd8lIGQBgp4rXzDWQTOhfILZm+nok=\ngithub.com/hashicorp/go-slug v0.7.0/go.mod h1:Ib+IWBYfEfJGI1ZyXMGNbu2BU+aa3Dzu41RKLH301v4=\ngithub.com/hashicorp/go-tfe v0.20.0 h1:XUAhKoCX8ZUQfwBebC8hz7nkSSnqgNkaablIfxnZ0PQ=\ngithub.com/hashicorp/go-tfe v0.20.0/go.mod h1:gyXLXbpBVxA2F/6opah8XBsOkZJxHYQmghl0OWi8keI=\ngithub.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.2 h1:cfejS+Tpcp13yd5nYHWDI6qVCny6wyX2Mt5SGur2IGE=\ngithub.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-version v1.1.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/go-version v1.3.0 h1:McDWVJIU/y+u1BRV06dPaLfLCaT7fUTJLp5r04x7iNw=\ngithub.com/hashicorp/go-version v1.3.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.1 h1:0hERBMJE1eitiLkihrMvRVBYAkpHzc/J3QdDN+dAcgU=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/hcl v0.0.0-20170504190234-a4b07c25de5f h1:UdxlrJz4JOnY8W+DbLISwf2B8WXEolNRA8BGCwI9jws=\ngithub.com/hashicorp/hcl v0.0.0-20170504190234-a4b07c25de5f/go.mod h1:oZtUIOe8dh44I2q6ScRibXws4Ajl+d+nod3AaR9vL5w=\ngithub.com/hashicorp/hcl/v2 v2.0.0 h1:efQznTz+ydmQXq3BOnRa3AXzvCeTq1P4dKj/z5GLlY8=\ngithub.com/hashicorp/hcl/v2 v2.0.0/go.mod h1:oVVDG71tEinNGYCxinCYadcmKU9bglqW9pV3txagJ90=\ngithub.com/hashicorp/jsonapi v0.0.0-20210826224640-ee7dae0fb22d h1:9ARUJJ1VVynB176G1HCwleORqCaXm/Vx0uUi0dL26I0=\ngithub.com/hashicorp/jsonapi v0.0.0-20210826224640-ee7dae0fb22d/go.mod h1:Yog5+CPEM3c99L1CL2CFCYoSzgWm5vTU58idbRUaLik=\ngithub.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=\ngithub.com/hashicorp/terraform-config-inspect v0.0.0-20210511202847-ad33d83d7650 h1:0TEFM00EMM31qUcOh950Ox7piRLkSORB38i+rYgRr9w=\ngithub.com/hashicorp/terraform-config-inspect v0.0.0-20210511202847-ad33d83d7650/go.mod h1:Z0Nnk4+3Cy89smEbrq+sl1bxc9198gIP4I7wcQF6Kqs=\ngithub.com/hashicorp/terraform-exec v0.15.0 h1:cqjh4d8HYNQrDoEmlSGelHmg2DYDh5yayckvJ5bV18E=\ngithub.com/hashicorp/terraform-exec v0.15.0/go.mod h1:H4IG8ZxanU+NW0ZpDRNsvh9f0ul7C0nHP+rUR/CHs7I=\ngithub.com/hashicorp/terraform-json v0.13.0 h1:Li9L+lKD1FO5RVFRM1mMMIBDoUHslOniyEi5CM+FWGY=\ngithub.com/hashicorp/terraform-json v0.13.0/go.mod h1:y5OdLBCT+rxbwnpxZs9kGL7R9ExU76+cpdY8zHwoazk=\ngithub.com/huandu/xstrings v1.3.2/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=\ngithub.com/imdario/mergo v0.3.11/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=\ngithub.com/imdario/mergo v0.3.12 h1:b6R2BslTbIEToALKP7LxUvijTsNI9TAe80pLWN2g/HU=\ngithub.com/imdario/mergo v0.3.12/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i6rXxKeerYnT8Nvf0QmHCRC1n8sfWVwXF2Frvo=\ngithub.com/jessevdk/go-flags v1.5.0/go.mod h1:Fw0T6WPc1dYxT4mKEZRfG5kJhaTDP9pj1c2EWnYs/m4=\ngithub.com/jmespath/go-jmespath v0.0.0-20160202185014-0b12d6b521d8 h1:12VvqtR6Aowv3l/EQUlocDHW2Cp4G9WJVH7uyH8QFJE=\ngithub.com/jmespath/go-jmespath v0.0.0-20160202185014-0b12d6b521d8/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=\ngithub.com/kevinburke/ssh_config v0.0.0-20201106050909-4977a11b4351 h1:DowS9hvgyYSX4TO5NpyC606/Z4SxnNYbT+WX27or6Ck=\ngithub.com/kevinburke/ssh_config v0.0.0-20201106050909-4977a11b4351/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=\ngithub.com/klauspost/compress v1.11.2 h1:MiK62aErc3gIiVEtyzKfeOHgW7atJb5g/KNX5m3c2nQ=\ngithub.com/klauspost/compress v1.11.2/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.1 h1:Fmg33tUaq4/8ym9TJN1x7sLJnHVwhP33CNkpYV/7rwI=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v0.0.0-20170820004349-d65d576e9348/go.mod h1:B69LEHPfb2qLo0BaaOLcbitczOKLWTsrBG9LczfCD4k=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=\ngithub.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/matryer/is v1.2.0/go.mod h1:2fLPjFQM9rhQ15aVEtbuwhJinnOqrmgXPNdZsdwlWXA=\ngithub.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=\ngithub.com/mattn/go-isatty v0.0.3/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-isatty v0.0.4/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-runewidth v0.0.4/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mitchellh/cli v1.1.2/go.mod h1:6iaV0fGdElS6dPBx0EApTxHrcWvmJphyh2n8YBLPPZ4=\ngithub.com/mitchellh/copystructure v1.0.0/go.mod h1:SNtv71yrdKgLRyLFxmLdkAbkKEFWgYaq1OVrnRcwhnw=\ngithub.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=\ngithub.com/mitchellh/go-homedir v1.0.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-testing-interface v1.0.0 h1:fzU/JVNcaqHQEcVFAKeR41fkiLdIPrefOvVG1VZ96U0=\ngithub.com/mitchellh/go-testing-interface v1.0.0/go.mod h1:kRemZodwjscx+RGhAo8eIhFbs2+BFgRtFPeD/KE+zxI=\ngithub.com/mitchellh/go-wordwrap v0.0.0-20150314170334-ad45545899c7/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\ngithub.com/mitchellh/go-wordwrap v1.0.0 h1:6GlHJ/LTGMrIJbwgdqdl2eEH8o+Exx/0m8ir9Gns0u4=\ngithub.com/mitchellh/go-wordwrap v1.0.0/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\ngithub.com/mitchellh/reflectwalk v1.0.0/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/orisano/pixelmatch v0.0.0-20210112091706-4fa4c7ba91d5 h1:1SoBaSPudixRecmlHXb/GxmaD3fLMtHIDN13QujwQuc=\ngithub.com/orisano/pixelmatch v0.0.0-20210112091706-4fa4c7ba91d5/go.mod h1:nZgzbfBr3hhjoZnS66nKrHmduYNpc34ny7RK4z5/HM0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=\ngithub.com/sebdah/goldie v1.0.0/go.mod h1:jXP4hmWywNEwZzhMuv2ccnqTSFpuq8iyQhtQdkkZBH4=\ngithub.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=\ngithub.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=\ngithub.com/sergi/go-diff v1.2.0 h1:XU+rvMAioB0UC3q1MFrIQy4Vo5/4VsRDQQXHsEya6xQ=\ngithub.com/sergi/go-diff v1.2.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=\ngithub.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=\ngithub.com/spf13/pflag v1.0.2/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/ulikunitz/xz v0.5.8 h1:ERv8V6GKqVi23rgu5cj9pVfVzJbOqAY2Ntl88O6c2nQ=\ngithub.com/ulikunitz/xz v0.5.8/go.mod h1:nbz6k7qbPmH4IRqmfOplQw/tblSgqTqBwxkY0oWt/14=\ngithub.com/vmihailenco/msgpack v3.3.3+incompatible/go.mod h1:fy3FlTQTDXWkZ7Bh6AcGMlsjHatGryHQYUTf1ShIgkk=\ngithub.com/vmihailenco/msgpack/v4 v4.3.12/go.mod h1:gborTTJjAo/GWTqqRjrLCn9pgNN+NXzzngzBKDPIqw4=\ngithub.com/vmihailenco/tagparser v0.1.1/go.mod h1:OeAg3pn3UbLjkWt+rN9oFYB6u/cQgqMEUPoW2WPyhdI=\ngithub.com/xanzy/ssh-agent v0.3.0 h1:wUMzuKtKilRgBAD1sUb8gOwwRr2FGoBVumcjoOACClI=\ngithub.com/xanzy/ssh-agent v0.3.0/go.mod h1:3s9xbODqPuuhK9JV1R321M/FlMZSBvE5aY6eAcqrDh0=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngithub.com/zclconf/go-cty v1.1.0/go.mod h1:xnAOWiHeOqg2nWS62VtQ7pbOu17FtxJNW8RLEih+O3s=\ngithub.com/zclconf/go-cty v1.2.0/go.mod h1:hOPWgoHbaTUnI5k4D2ld+GRpFJSCe6bCM7m1q/N4PQ8=\ngithub.com/zclconf/go-cty v1.9.1 h1:viqrgQwFl5UpSxc046qblj78wZXVDFnSOufaOTER+cc=\ngithub.com/zclconf/go-cty v1.9.1/go.mod h1:vVKLxnk3puL4qRAv72AO+W99LUD4da90g3uUAzyuvAk=\ngithub.com/zclconf/go-cty-debug v0.0.0-20191215020915-b22d67c1ba0b/go.mod h1:ZRKQfBXbGkpdV6QMzT3rU1kSTAnfu1dO8dPKjYprgj8=\ngo.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=\ngo.opencensus.io v0.22.0 h1:C9hSCOW830chIVkdja34wa6Ky+IzWllkUinR+BtRZd4=\ngo.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=\ngolang.org/x/crypto v0.0.0-20190219172222-a4c6cb3142f2/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190426145343-a29dc8fdc734/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200820211705-5c72a883971a/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20210322153248-0c34fe9e7dc2/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\ngolang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b h1:7mWr3k41Qtv8XlltBkDkl8LoP3mpSgBW8BUoxtEdbXg=\ngolang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=\ngolang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180811021610-c39426892332/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200301022130-244492dfa37a/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210326060303-6b1517762897/go.mod h1:uSPa2vr4CLtc/ILN5odXGNXS6mhrKVzTaCXzk9m6W3k=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.0.0-20210924151903-3ad01bbaa167 h1:eDd+TJqbgfXruGQ5sJRU7tEtp/58OAx4+Ayjxg4SM+4=\ngolang.org/x/net v0.0.0-20210924151903-3ad01bbaa167/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45 h1:SVwTIAaPC2U/AvvLNZ2a7OVsmBpC8L5BlwK1whH3hm0=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502175342-a43fa875dd82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200302150141-5c8b2ff67527/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201207223542-d4d67f95c62d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210320140829-1e4c9ba3b0c4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210324051608-47abb6519492/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210502180810-71e4cd670f79/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211124211545-fe61309f8881/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e h1:fLOSk5Q00efkSvAm+4xcoXD+RRmLmmulPn5I3Y9F2EM=\ngolang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6 h1:aRYxNxv6iGQlyVaZmk6ZgYEDa+Jg18DxebPSrd6bg1M=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac h1:7zkz7BUtwNFFqcowJ+RIgu2MaV/MapERkDIy+mwPyjs=\ngolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190506145303-2d16b83fe98c/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190606124116-d0a3d012864b/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.1/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=\ngoogle.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=\ngoogle.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.9.0 h1:jbyannxz0XFD3zdjgrSUsaJbgpH4eTrkdhRChkHPfO8=\ngoogle.golang.org/api v0.9.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=\ngoogle.golang.org/appengine v1.6.5 h1:tycE03LOZYQNhDpS27tcQdAzLCVMaj7QT2SXxebnpCM=\ngoogle.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190801165951-fa694d86fc64/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55 h1:gSJIx1SDwno+2ElGhA4+qG2zF97qiUzTM+rQ0klBOcE=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.21.1 h1:j6XxA85m/6txkUCHvzlV5f+HBNl/1r5cZ2A/3IEFOO8=\ngoogle.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/cheggaaa/pb.v1 v1.0.27/go.mod h1:V/YB90LKu/1FcN3WVnfiiE5oMCibMjukxqG/qStrOgw=\ngopkg.in/warnings.v0 v0.1.2 h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=\ngopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nrsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=\n"
        },
        {
          "name": "graph.go",
          "type": "blob",
          "size": 9.404296875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"regexp\"\n\t\"strings\"\n\n\ttfjson \"github.com/hashicorp/terraform-json\"\n)\n\nconst (\n\tVARIABLE_COLOR  string = \"#1d7ada\"\n\tOUTPUT_COLOR    string = \"#ffc107\"\n\tDATA_COLOR      string = \"#dc477d\"\n\tMODULE_COLOR    string = \"#8450ba\"\n\tMODULE_BG_COLOR string = \"white\"\n\tFNAME_BG_COLOR  string = \"white\"\n\tRESOURCE_COLOR  string = \"lightgray\"\n\tLOCAL_COLOR     string = \"black\"\n)\n\n// ModuleGraph TODO\ntype Graph struct {\n\tNodes []Node `json:\"nodes\"`\n\tEdges []Edge `json:\"edges\"`\n}\n\n// Node TODO\ntype Node struct {\n\tData    NodeData `json:\"data\"`\n\tClasses string   `json:\"classes,omitempty\"`\n}\n\n// NodeData TODO\ntype NodeData struct {\n\tID          string       `json:\"id\"`\n\tLabel       string       `json:\"label,omitempty\"`\n\tType        ResourceType `json:\"type,omitempty\"`\n\tParent      string       `json:\"parent,omitempty\"`\n\tParentColor string       `json:\"parentColor,omitempty\"`\n\tChange      string       `json:\"change,omitempty\"`\n}\n\n// Edge TODO\ntype Edge struct {\n\tData    EdgeData `json:\"data\"`\n\tClasses string   `json:\"classes,omitempty\"`\n}\n\n// EdgeData TODO\ntype EdgeData struct {\n\tID       string `json:\"id\"`\n\tSource   string `json:\"source\"`\n\tTarget   string `json:\"target\"`\n\tGradient string `json:\"gradient,omitempty\"`\n}\n\n// GenerateGraph -\nfunc (r *rover) GenerateGraph() error {\n\tlog.Println(\"Generating resource graph...\")\n\n\tnodes := r.GenerateNodes()\n\tedges := r.GenerateEdges()\n\n\t// Edge case for terraform.workspace\n\tfor _, e := range edges {\n\t\tif strings.Contains(e.Data.ID, \"terraform.workspace\") {\n\t\t\tnodes = append(nodes, Node{\n\t\t\t\tData: NodeData{\n\t\t\t\t\tID:    \"terraform.workspace\",\n\t\t\t\t\tLabel: \"terraform.workspace\",\n\t\t\t\t\tType:  \"locals\",\n\t\t\t\t\t// Parent is equal to basePath\n\t\t\t\t\tParent: strings.ReplaceAll(r.Map.Path, \"./\", \"\"),\n\t\t\t\t},\n\t\t\t\tClasses: \"locals\",\n\t\t\t})\n\t\t\tbreak\n\t\t}\n\t}\n\n\tr.Graph = Graph{\n\t\tNodes: nodes,\n\t\tEdges: edges,\n\t}\n\n\treturn nil\n}\n\nfunc (r *rover) addNodes(base string, parent string, nodeMap map[string]Node, resources map[string]*Resource) []string {\n\n\tnmo := []string{}\n\n\tfor id, re := range resources {\n\n\t\tif re.Type == ResourceTypeResource || re.Type == ResourceTypeData {\n\n\t\t\tpid := parent\n\n\t\t\tif nodeMap[parent].Data.Type == ResourceTypeFile {\n\t\t\t\tpid = strings.TrimSuffix(pid, nodeMap[parent].Data.Label)\n\t\t\t\tpid = strings.TrimSuffix(pid, \".\")\n\t\t\t\t//qfmt.Printf(\"%v\\n\", pid)\n\t\t\t}\n\n\t\t\tmid := fmt.Sprintf(\"%v.%v\", pid, re.ResourceType)\n\t\t\tmid = strings.TrimPrefix(mid, fmt.Sprintf(\"%v.\", base))\n\t\t\tmid = strings.TrimPrefix(mid, \".\")\n\t\t\tmid = strings.TrimSuffix(mid, \".\")\n\n\t\t\tl := strings.Split(mid, \".\")\n\t\t\tlabel := l[len(l)-1]\n\n\t\t\tmidParent := parent\n\n\t\t\tif midParent == mid {\n\t\t\t\tmidParent = nodeMap[midParent].Data.Parent\n\t\t\t}\n\n\t\t\tif nodeMap[midParent].Data.Type == ResourceTypeFile {\n\t\t\t\tmid = fmt.Sprintf(\"%s {%s}\", mid, nodeMap[parent].Data.Label)\n\t\t\t}\n\n\t\t\t//fmt.Printf(midParent + \" - \" + mid + \"\\n\")\n\n\t\t\t// Append resource type\n\t\t\tnmo = append(nmo, mid)\n\t\t\tnodeMap[mid] = Node{\n\t\t\t\tData: NodeData{\n\t\t\t\t\tID:          mid,\n\t\t\t\t\tLabel:       label,\n\t\t\t\t\tType:        re.Type,\n\t\t\t\t\tParent:      midParent,\n\t\t\t\t\tParentColor: getResourceColor(nodeMap[parent].Data.Type),\n\t\t\t\t},\n\t\t\t\tClasses: fmt.Sprintf(\"%s-type\", re.Type),\n\t\t\t}\n\n\t\t\tmrChange := string(re.ChangeAction)\n\n\t\t\t// Append resource name\n\t\t\tnmo = append(nmo, id)\n\t\t\tnodeMap[id] = Node{\n\t\t\t\tData: NodeData{\n\t\t\t\t\tID:          id,\n\t\t\t\t\tLabel:       re.Name,\n\t\t\t\t\tType:        re.Type,\n\t\t\t\t\tParent:      mid,\n\t\t\t\t\tParentColor: getResourceColor(nodeMap[parent].Data.Type),\n\t\t\t\t\tChange:      mrChange,\n\t\t\t\t},\n\t\t\t\tClasses: fmt.Sprintf(\"%s-name %s\", re.Type, mrChange),\n\t\t\t}\n\t\t\t//fmt.Printf(id + \" - \" + mid + \"\\n\")\n\n\t\t\tnmo = append(nmo, r.addNodes(base, id, nodeMap, re.Children)...)\n\n\t\t} else if re.Type == ResourceTypeFile {\n\t\t\tfid := id\n\t\t\tif parent != base {\n\t\t\t\tfid = fmt.Sprintf(\"%s.%s\", parent, fid)\n\t\t\t}\n\t\t\t//fmt.Printf(\"%v\\n\", fid)\n\t\t\tnmo = append(nmo, fid)\n\t\t\tnodeMap[fid] = Node{\n\t\t\t\tData: NodeData{\n\t\t\t\t\tID:          fid,\n\t\t\t\t\tLabel:       id,\n\t\t\t\t\tType:        re.Type,\n\t\t\t\t\tParent:      parent,\n\t\t\t\t\tParentColor: getResourceColor(nodeMap[parent].Data.Type),\n\t\t\t\t},\n\n\t\t\t\tClasses: getResourceClass(re.Type),\n\t\t\t}\n\t\t\tnmo = append(nmo, r.addNodes(base, fid, nodeMap, re.Children)...)\n\t\t} else {\n\n\t\t\tpid := parent\n\n\t\t\tif nodeMap[parent].Data.Type == ResourceTypeFile {\n\t\t\t\tpid = strings.TrimSuffix(pid, nodeMap[parent].Data.Label)\n\t\t\t\tpid = strings.TrimSuffix(pid, \".\")\n\t\t\t}\n\n\t\t\tls := strings.Split(id, \".\")\n\t\t\tlabel := ls[len(ls)-1]\n\n\t\t\t//fmt.Printf(\"%v - %v\\n\", id, re.Type)\n\n\t\t\tnmo = append(nmo, id)\n\t\t\tnodeMap[id] = Node{\n\t\t\t\tData: NodeData{\n\t\t\t\t\tID:          id,\n\t\t\t\t\tLabel:       label,\n\t\t\t\t\tType:        re.Type,\n\t\t\t\t\tParent:      parent,\n\t\t\t\t\tParentColor: getResourceColor(nodeMap[pid].Data.Type),\n\t\t\t\t},\n\n\t\t\t\tClasses: getResourceClass(re.Type),\n\t\t\t}\n\n\t\t\tnmo = append(nmo, r.addNodes(base, id, nodeMap, re.Children)...)\n\n\t\t}\n\n\t}\n\n\treturn nmo\n\n}\n\n// GenerateNodes -\nfunc (r *rover) GenerateNodes() []Node {\n\n\tnodeMap := make(map[string]Node)\n\tnmo := []string{}\n\n\tbasePath := strings.ReplaceAll(r.Map.Path, \"./\", \"\")\n\n\tnmo = append(nmo, basePath)\n\tnodeMap[basePath] = Node{\n\t\tData: NodeData{\n\t\t\tID:    basePath,\n\t\t\tLabel: basePath,\n\t\t\tType:  \"basename\",\n\t\t},\n\t\tClasses: \"basename\",\n\t}\n\n\tnmo = append(nmo, r.addNodes(basePath, basePath, nodeMap, r.Map.Root)...)\n\n\tnodes := make([]Node, 0, len(nodeMap))\n\texists := make(map[string]bool)\n\n\tfor _, i := range nmo {\n\t\tif _, ok := exists[i]; !ok {\n\t\t\tnodes = append(nodes, nodeMap[i])\n\t\t\texists[i] = true\n\t\t}\n\t}\n\n\treturn nodes\n}\n\nfunc (r *rover) addEdges(base string, parent string, edgeMap map[string]Edge, resources map[string]*Resource) []string {\n\temo := []string{}\n\tfor id, re := range resources {\n\t\tmatchBrackets := regexp.MustCompile(`\\[[^\\[\\]]*\\]`)\n\n\t\tconfigId := matchBrackets.ReplaceAllString(id, \"\")\n\n\t\tvar expressions map[string]*tfjson.Expression\n\n\t\tif r.RSO.Configs[configId] != nil {\n\t\t\t// If Resource\n\t\t\tif r.RSO.Configs[configId].ResourceConfig != nil {\n\t\t\t\texpressions = r.RSO.Configs[configId].ResourceConfig.Expressions\n\t\t\t\t// If Module\n\t\t\t} else if r.RSO.Configs[configId].ModuleConfig != nil {\n\t\t\t\texpressions = r.RSO.Configs[configId].ModuleConfig.Expressions\n\t\t\t\t// If Output\n\t\t\t} else if r.RSO.Configs[configId].OutputConfig != nil {\n\t\t\t\texpressions = make(map[string]*tfjson.Expression)\n\t\t\t\texpressions[\"output\"] = r.RSO.Configs[configId].OutputConfig.Expression\n\t\t\t}\n\t\t}\n\t\t// fmt.Printf(\"%+v - %+v\\n\", oName, oValue)\n\t\tfor _, reValues := range expressions {\n\t\t\tfor _, dependsOnR := range reValues.References {\n\t\t\t\tif !strings.HasPrefix(dependsOnR, \"each.\") {\n\n\t\t\t\t\t/*if strings.HasPrefix(dependsOnR, \"module.\") {\n\t\t\t\t\t\tid := strings.Split(dependsOnR, \".\")\n\t\t\t\t\t\tdependsOnR = fmt.Sprintf(\"%s.%s\", id[0], id[1])\n\t\t\t\t\t}*/\n\n\t\t\t\t\tsourceColor := getResourceColor(re.Type)\n\t\t\t\t\ttargetId := dependsOnR\n\t\t\t\t\tif parent != \"\" {\n\t\t\t\t\t\ttargetId = fmt.Sprintf(\"%s.%s\", parent, dependsOnR)\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetColor := RESOURCE_COLOR\n\n\t\t\t\t\tif strings.Contains(dependsOnR, \"output.\") {\n\t\t\t\t\t\ttargetColor = OUTPUT_COLOR\n\t\t\t\t\t} else if strings.Contains(dependsOnR, \"var.\") {\n\t\t\t\t\t\ttargetColor = VARIABLE_COLOR\n\t\t\t\t\t} else if strings.HasPrefix(dependsOnR, \"module.\") {\n\t\t\t\t\t\ttargetColor = MODULE_COLOR\n\t\t\t\t\t} else if strings.Contains(dependsOnR, \"data.\") {\n\t\t\t\t\t\ttargetColor = DATA_COLOR\n\t\t\t\t\t} else if strings.Contains(dependsOnR, \"local.\") {\n\t\t\t\t\t\ttargetColor = LOCAL_COLOR\n\t\t\t\t\t}\n\n\t\t\t\t\t// For Terraform 1.0, resource references point to specific resource attributes\n\t\t\t\t\t// Skip if the target is a resource and reference points to an attribute\n\t\t\t\t\tif targetColor == RESOURCE_COLOR && len(strings.Split(dependsOnR, \".\")) != 2 {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t} else if targetColor == DATA_COLOR && len(strings.Split(dependsOnR, \".\")) != 3 {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tedgeId := fmt.Sprintf(\"%s->%s\", id, targetId)\n\t\t\t\t\temo = append(emo, edgeId)\n\t\t\t\t\tedgeMap[edgeId] = Edge{\n\t\t\t\t\t\tData: EdgeData{\n\t\t\t\t\t\t\tID:       edgeId,\n\t\t\t\t\t\t\tSource:   id,\n\t\t\t\t\t\t\tTarget:   targetId,\n\t\t\t\t\t\t\tGradient: fmt.Sprintf(\"%s %s\", sourceColor, targetColor),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tClasses: \"edge\",\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ignore files in edge generation\n\t\tif re.Type == ResourceTypeFile {\n\t\t\temo = append(emo, r.addEdges(base, parent, edgeMap, re.Children)...)\n\t\t} else {\n\t\t\temo = append(emo, r.addEdges(base, id, edgeMap, re.Children)...)\n\t\t}\n\t}\n\n\treturn emo\n}\n\n// GenerateEdges -\nfunc (r *rover) GenerateEdges() []Edge {\n\tedgeMap := make(map[string]Edge)\n\temo := []string{}\n\n\t//config := r.Plan.Config.RootModule\n\n\temo = append(emo, r.addEdges(\"\", \"\", edgeMap, r.Map.Root)...)\n\n\tedges := make([]Edge, 0, len(edgeMap))\n\texists := make(map[string]bool)\n\n\tfor _, i := range emo {\n\t\tif _, ok := exists[i]; !ok {\n\t\t\tedges = append(edges, edgeMap[i])\n\t\t\texists[i] = true\n\t\t}\n\t}\n\n\treturn edges\n}\n\nfunc getResourceColor(t ResourceType) string {\n\tswitch t {\n\tcase ResourceTypeModule:\n\t\treturn MODULE_COLOR\n\tcase ResourceTypeData:\n\t\treturn DATA_COLOR\n\tcase ResourceTypeOutput:\n\t\treturn OUTPUT_COLOR\n\tcase ResourceTypeVariable:\n\t\treturn VARIABLE_COLOR\n\tcase ResourceTypeLocal:\n\t\treturn LOCAL_COLOR\n\t}\n\treturn RESOURCE_COLOR\n}\n\nfunc getPrimitiveType(resourceType string) string {\n\tswitch resourceType {\n\tcase\n\t\t\"module\",\n\t\t\"data\",\n\t\t\"output\",\n\t\t\"var\",\n\t\t\"local\":\n\t\treturn resourceType\n\t}\n\treturn \"resource\"\n}\n\nfunc getResourceClass(resourceType ResourceType) string {\n\tswitch resourceType {\n\n\tcase ResourceTypeData:\n\t\treturn \"data-type\"\n\tcase ResourceTypeOutput:\n\t\treturn \"output\"\n\tcase ResourceTypeVariable:\n\t\treturn \"variable\"\n\tcase ResourceTypeFile:\n\t\treturn \"fname\"\n\tcase ResourceTypeLocal:\n\t\treturn \"locals\"\n\tcase ResourceTypeModule:\n\t\treturn \"module\"\n\t}\n\treturn \"resource-type\"\n}\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 12.53125,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"embed\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/fs\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"time\"\n\n\ttfe \"github.com/hashicorp/go-tfe\"\n\t\"github.com/hashicorp/terraform-config-inspect/tfconfig\"\n\t\"github.com/hashicorp/terraform-exec/tfexec\"\n\ttfjson \"github.com/hashicorp/terraform-json\"\n)\n\nconst VERSION = \"0.3.3\"\n\nvar TRUE = true\n\n//go:embed ui/dist\nvar frontend embed.FS\n\ntype arrayFlags []string\n\nfunc (i arrayFlags) String() string {\n\tvar ts []string\n\tfor _, el := range i {\n\t\tts = append(ts, el)\n\t}\n\treturn strings.Join(ts, \",\")\n}\n\nfunc (i *arrayFlags) Set(value string) error {\n\t*i = append(*i, value)\n\treturn nil\n}\n\ntype rover struct {\n\tName             string\n\tWorkingDir       string\n\tTfPath           string\n\tTfVarsFiles      []string\n\tTfVars           []string\n\tTfBackendConfigs []string\n\tPlanPath         string\n\tPlanJSONPath     string\n\tWorkspaceName    string\n\tTFCOrgName       string\n\tTFCWorkspaceName string\n\tShowSensitive    bool\n\tGenImage         bool\n\tTFCNewRun        bool\n\tPlan             *tfjson.Plan\n\tRSO              *ResourcesOverview\n\tMap              *Map\n\tGraph            Graph\n}\n\nfunc main() {\n\tvar tfPath, workingDir, name, zipFileName, ipPort, planPath, planJSONPath, workspaceName, tfcOrgName, tfcWorkspaceName string\n\tvar standalone, genImage, showSensitive, getVersion, tfcNewRun bool\n\tvar tfVarsFiles, tfVars, tfBackendConfigs arrayFlags\n\tflag.StringVar(&tfPath, \"tfPath\", \"/usr/local/bin/terraform\", \"Path to Terraform binary\")\n\tflag.StringVar(&workingDir, \"workingDir\", \".\", \"Path to Terraform configuration\")\n\tflag.StringVar(&name, \"name\", \"rover\", \"Configuration name\")\n\tflag.StringVar(&zipFileName, \"zipFileName\", \"rover\", \"Standalone zip file name\")\n\tflag.StringVar(&ipPort, \"ipPort\", \"0.0.0.0:9000\", \"IP and port for Rover server\")\n\tflag.StringVar(&planPath, \"planPath\", \"\", \"Plan file path\")\n\tflag.StringVar(&planJSONPath, \"planJSONPath\", \"\", \"Plan JSON file path\")\n\tflag.StringVar(&workspaceName, \"workspaceName\", \"\", \"Workspace name\")\n\tflag.StringVar(&tfcOrgName, \"tfcOrg\", \"\", \"Terraform Cloud Organization name\")\n\tflag.StringVar(&tfcWorkspaceName, \"tfcWorkspace\", \"\", \"Terraform Cloud Workspace name\")\n\tflag.BoolVar(&standalone, \"standalone\", false, \"Generate standalone HTML files\")\n\tflag.BoolVar(&showSensitive, \"showSensitive\", false, \"Display sensitive values\")\n\tflag.BoolVar(&tfcNewRun, \"tfcNewRun\", false, \"Create new Terraform Cloud run\")\n\tflag.BoolVar(&getVersion, \"version\", false, \"Get current version\")\n\tflag.BoolVar(&genImage, \"genImage\", false, \"Generate graph image\")\n\tflag.Var(&tfVarsFiles, \"tfVarsFile\", \"Path to *.tfvars files\")\n\tflag.Var(&tfVars, \"tfVar\", \"Terraform variable (key=value)\")\n\tflag.Var(&tfBackendConfigs, \"tfBackendConfig\", \"Path to *.tfbackend files\")\n\tflag.Parse()\n\n\tif getVersion {\n\t\tfmt.Printf(\"Rover v%s\\n\", VERSION)\n\t\treturn\n\t}\n\n\tlog.Println(\"Starting Rover...\")\n\n\tparsedTfVarsFiles := strings.Split(tfVarsFiles.String(), \",\")\n\tparsedTfVars := strings.Split(tfVars.String(), \",\")\n\tparsedTfBackendConfigs := strings.Split(tfBackendConfigs.String(), \",\")\n\n\tpath, err := os.Getwd()\n\tif err != nil {\n\t\tlog.Fatal(errors.New(\"Unable to get current working directory\"))\n\t}\n\n\tif planPath != \"\" {\n\t\tif !strings.HasPrefix(planPath, \"/\") {\n\t\t\tplanPath = filepath.Join(path, planPath)\n\t\t}\n\t}\n\n\tif planJSONPath != \"\" {\n\t\tif !strings.HasPrefix(planJSONPath, \"/\") {\n\t\t\tplanJSONPath = filepath.Join(path, planJSONPath)\n\t\t}\n\t}\n\n\tr := rover{\n\t\tName:             name,\n\t\tWorkingDir:       workingDir,\n\t\tTfPath:           tfPath,\n\t\tPlanPath:         planPath,\n\t\tPlanJSONPath:     planJSONPath,\n\t\tShowSensitive:    showSensitive,\n\t\tGenImage:         genImage,\n\t\tTfVarsFiles:      parsedTfVarsFiles,\n\t\tTfVars:           parsedTfVars,\n\t\tTfBackendConfigs: parsedTfBackendConfigs,\n\t\tWorkspaceName:    workspaceName,\n\t\tTFCOrgName:       tfcOrgName,\n\t\tTFCWorkspaceName: tfcWorkspaceName,\n\t\tTFCNewRun:        tfcNewRun,\n\t}\n\n\t// Generate assets\n\terr = r.generateAssets()\n\tif err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n\n\tlog.Println(\"Done generating assets.\")\n\n\t// Save to file (debug)\n\t// saveJSONToFile(name, \"plan\", \"output\", r.Plan)\n\t// saveJSONToFile(name, \"rso\", \"output\", r.Plan)\n\t// saveJSONToFile(name, \"map\", \"output\", r.Map)\n\t// saveJSONToFile(name, \"graph\", \"output\", r.Graph)\n\n\t// Embed frontend\n\tfe, err := fs.Sub(frontend, \"ui/dist\")\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tfrontendFS := http.FileServer(http.FS(fe))\n\n\tif standalone {\n\t\terr = r.generateZip(fe, fmt.Sprintf(\"%s.zip\", zipFileName))\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\n\t\tlog.Printf(\"Generated zip file: %s.zip\\n\", zipFileName)\n\t\treturn\n\t}\n\n\terr = r.startServer(ipPort, frontendFS)\n\tif err != nil {\n\t\t// http.Serve() returns error on shutdown\n\t\tif genImage {\n\t\t\tlog.Println(\"Server shut down.\")\n\t\t} else {\n\t\t\tlog.Fatalf(\"Could not start server: %s\\n\", err.Error())\n\t\t}\n\t}\n\n}\n\nfunc (r *rover) generateAssets() error {\n\t// Get Plan\n\terr := r.getPlan()\n\tif err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"Unable to parse Plan: %s\", err))\n\t}\n\n\t// Generate RSO, Map, Graph\n\terr = r.GenerateResourceOverview()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = r.GenerateMap()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = r.GenerateGraph()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc (r *rover) getPlan() error {\n\ttmpDir, err := ioutil.TempDir(\"\", \"rover\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer os.RemoveAll(tmpDir)\n\n\ttf, err := tfexec.NewTerraform(r.WorkingDir, r.TfPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// If user provided path to plan file\n\tif r.PlanPath != \"\" {\n\t\tlog.Println(\"Using provided plan...\")\n\t\tr.Plan, err = tf.ShowPlanFile(context.Background(), r.PlanPath)\n\t\tif err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unable to read Plan (%s): %s\", r.PlanPath, err))\n\t\t}\n\t\treturn nil\n\t}\n\n\t// If user provided path to plan JSON file\n\tif r.PlanJSONPath != \"\" {\n\t\tlog.Println(\"Using provided JSON plan...\")\n\n\t\tplanJsonFile, err := os.Open(r.PlanJSONPath)\n\t\tif err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unable to read Plan (%s): %s\", r.PlanJSONPath, err))\n\t\t}\n\t\tdefer planJsonFile.Close()\n\n\t\tplanJson, err := ioutil.ReadAll(planJsonFile)\n\t\tif err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unable to read Plan (%s): %s\", r.PlanJSONPath, err))\n\t\t}\n\n\t\tif err := json.Unmarshal(planJson, &r.Plan); err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unable to read Plan (%s): %s\", r.PlanJSONPath, err))\n\t\t}\n\n\t\treturn nil\n\t}\n\n\t// If user specified TFC workspace\n\tif r.TFCWorkspaceName != \"\" {\n\t\ttfcToken := os.Getenv(\"TFC_TOKEN\")\n\n\t\tif tfcToken == \"\" {\n\t\t\treturn errors.New(\"TFC_TOKEN environment variable not set\")\n\t\t}\n\n\t\tif r.TFCOrgName == \"\" {\n\t\t\treturn errors.New(\"Must specify Terraform Cloud organization to retrieve plan from Terraform Cloud\")\n\t\t}\n\n\t\tconfig := &tfe.Config{\n\t\t\tToken: tfcToken,\n\t\t}\n\n\t\tclient, err := tfe.NewClient(config)\n\t\tif err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unable to connect to Terraform Cloud. %s\", err))\n\t\t}\n\n\t\t// Get TFC Workspace\n\t\tws, err := client.Workspaces.Read(context.Background(), r.TFCOrgName, r.TFCWorkspaceName)\n\t\tif err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unable to list workspace %s in %s organization. %s\", r.TFCWorkspaceName, r.TFCOrgName, err))\n\t\t}\n\n\t\t// Retrieve all runs from specified TFC workspace\n\t\truns, err := client.Runs.List(context.Background(), ws.ID, tfe.RunListOptions{})\n\t\tif err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unable to retrieve plan from %s in %s organization. %s\", r.TFCWorkspaceName, r.TFCOrgName, err))\n\t\t}\n\n\t\trun := runs.Items[0]\n\n\t\t// Get most recent plan item\n\t\tplanID := runs.Items[0].Plan.ID\n\n\t\t// Run hasn't been applied or discarded, therefore is still \"actionable\" by user\n\t\trunIsActionable := run.StatusTimestamps.AppliedAt.IsZero() && run.StatusTimestamps.DiscardedAt.IsZero()\n\n\t\tif runIsActionable && r.TFCNewRun {\n\t\t\treturn errors.New(fmt.Sprintf(\"Did not create new run. %s in %s in %s is still active\", run.ID, r.TFCWorkspaceName, r.TFCOrgName))\n\t\t}\n\n\t\t// If latest run is not actionable, rover will create new run\n\t\tif r.TFCNewRun {\n\t\t\t// Create new run in specified TFC workspace\n\t\t\tnewRun, err := client.Runs.Create(context.Background(), tfe.RunCreateOptions{\n\t\t\t\tRefresh:   &TRUE,\n\t\t\t\tWorkspace: ws,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn errors.New(fmt.Sprintf(\"Unable to generate new run from %s in %s organization. %s\", r.TFCWorkspaceName, r.TFCOrgName, err))\n\t\t\t}\n\n\t\t\trun = newRun\n\n\t\t\tlog.Printf(\"Starting new Terraform Cloud run in %s workspace...\", r.TFCWorkspaceName)\n\n\t\t\t// Wait maximum of 5 mins\n\t\t\tfor i := 0; i < 30; i++ {\n\t\t\t\trun, err := client.Runs.Read(context.Background(), newRun.ID)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn errors.New(fmt.Sprintf(\"Unable to retrieve run from %s in %s organization. %s\", r.TFCWorkspaceName, r.TFCOrgName, err))\n\t\t\t\t}\n\n\t\t\t\tif run.Plan != nil {\n\t\t\t\t\tplanID = run.Plan.ID\n\t\t\t\t\t// Add 20 second timeout so plan JSON becomes available\n\t\t\t\t\ttime.Sleep(20 * time.Second)\n\t\t\t\t\tlog.Printf(\"Run %s to completed!\", newRun.ID)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\ttime.Sleep(10 * time.Second)\n\t\t\t\tlog.Printf(\"Waiting for run %s to complete (%ds)...\", newRun.ID, 10*(i+1))\n\t\t\t}\n\n\t\t\tif planID == \"\" {\n\t\t\t\treturn errors.New(fmt.Sprintf(\"Timeout waiting for plan to complete in %s in %s organization. %s\", r.TFCWorkspaceName, r.TFCOrgName, err))\n\t\t\t}\n\t\t}\n\n\t\t// Get most recent plan file\n\t\tplanBytes, err := client.Plans.JSONOutput(context.Background(), planID)\n\t\tif err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unable to retrieve plan from %s in %s organization. %s\", r.TFCWorkspaceName, r.TFCOrgName, err))\n\t\t}\n\t\t// If empty plan file\n\t\tif string(planBytes) == \"\" {\n\t\t\treturn errors.New(fmt.Sprintf(\"Empty plan. Check run %s in %s in %s is not pending\", run.ID, r.TFCWorkspaceName, r.TFCOrgName))\n\t\t}\n\n\t\tif err := json.Unmarshal(planBytes, &r.Plan); err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unable to parse plan (ID: %s) from %s in %s organization.: %s\", planID, r.TFCWorkspaceName, r.TFCOrgName, err))\n\t\t}\n\n\t\treturn nil\n\t}\n\n\tlog.Println(\"Initializing Terraform...\")\n\n\t// Create TF Init options\n\tvar tfInitOptions []tfexec.InitOption\n\ttfInitOptions = append(tfInitOptions, tfexec.Upgrade(true))\n\n\t// Add *.tfbackend files\n\tfor _, tfBackendConfig := range r.TfBackendConfigs {\n\t\tif tfBackendConfig != \"\" {\n\t\t\ttfInitOptions = append(tfInitOptions, tfexec.BackendConfig(tfBackendConfig))\n\t\t}\n\t}\n\n\t// tfInitOptions = append(tfInitOptions, tfexec.LockTimeout(\"60s\"))\n\n\terr = tf.Init(context.Background(), tfInitOptions...)\n\tif err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"Unable to initialize Terraform Plan: %s\", err))\n\t}\n\n\tif r.WorkspaceName != \"\" {\n\t\tlog.Printf(\"Running in %s workspace...\", r.WorkspaceName)\n\t\terr = tf.WorkspaceSelect(context.Background(), r.WorkspaceName)\n\t\tif err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"Unable to select workspace (%s): %s\", r.WorkspaceName, err))\n\t\t}\n\t}\n\n\tlog.Println(\"Generating plan...\")\n\tplanPath := fmt.Sprintf(\"%s/%s-%v\", tmpDir, \"roverplan\", time.Now().Unix())\n\n\t// Create TF Plan options\n\tvar tfPlanOptions []tfexec.PlanOption\n\ttfPlanOptions = append(tfPlanOptions, tfexec.Out(planPath))\n\n\t// Add *.tfvars files\n\tfor _, tfVarsFile := range r.TfVarsFiles {\n\t\tif tfVarsFile != \"\" {\n\t\t\ttfPlanOptions = append(tfPlanOptions, tfexec.VarFile(tfVarsFile))\n\t\t}\n\t}\n\n\t// Add Terraform variables\n\tfor _, tfVar := range r.TfVars {\n\t\tif tfVar != \"\" {\n\t\t\ttfPlanOptions = append(tfPlanOptions, tfexec.Var(tfVar))\n\t\t}\n\t}\n\n\t_, err = tf.Plan(context.Background(), tfPlanOptions...)\n\tif err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"Unable to run Plan: %s\", err))\n\t}\n\n\tr.Plan, err = tf.ShowPlanFile(context.Background(), planPath)\n\tif err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"Unable to read Plan: %s\", err))\n\t}\n\n\treturn nil\n}\n\nfunc showJSON(g interface{}) {\n\tj, err := json.Marshal(g)\n\tif err != nil {\n\t\tlog.Printf(\"Error producing JSON: %s\\n\", err)\n\t\tos.Exit(2)\n\t}\n\tlog.Printf(\"%+v\", string(j))\n}\n\nfunc showModuleJSON(module *tfconfig.Module) {\n\tj, err := json.MarshalIndent(module, \"\", \"  \")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"error producing JSON: %s\\n\", err)\n\t\tos.Exit(2)\n\t}\n\tos.Stdout.Write(j)\n\tos.Stdout.Write([]byte{'\\n'})\n}\n\nfunc saveJSONToFile(prefix string, fileType string, path string, j interface{}) string {\n\tb, err := json.Marshal(j)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"error producing JSON: %s\\n\", err)\n\t\tos.Exit(2)\n\t}\n\n\tnewpath := filepath.Join(\".\", fmt.Sprintf(\"%s/%s\", path, prefix))\n\terr = os.MkdirAll(newpath, os.ModePerm)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tf, err := os.Create(fmt.Sprintf(\"%s/%s-%s.json\", newpath, prefix, fileType))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tdefer f.Close()\n\n\t_, err = f.WriteString(string(b))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treturn fmt.Sprintf(\"%s/%s-%s.json\", newpath, prefix, fileType)\n}\n\nfunc enableCors(w *http.ResponseWriter) {\n\t(*w).Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n}\n"
        },
        {
          "name": "map.go",
          "type": "blob",
          "size": 9.869140625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n\n\t\"github.com/hashicorp/terraform-config-inspect/tfconfig\"\n\ttfjson \"github.com/hashicorp/terraform-json\"\n)\n\ntype Action string\ntype ResourceType string\n\nconst (\n\tResourceTypeFile     ResourceType = \"file\"\n\tResourceTypeLocal    ResourceType = \"locals\"\n\tResourceTypeVariable ResourceType = \"variable\"\n\tResourceTypeOutput   ResourceType = \"output\"\n\tResourceTypeResource ResourceType = \"resource\"\n\tResourceTypeData     ResourceType = \"data\"\n\tResourceTypeModule   ResourceType = \"module\"\n\tDefaultFileName      string       = \"unknown file\"\n)\n\nconst (\n\t// ActionNoop denotes a no-op operation.\n\tActionNoop Action = \"no-op\"\n\n\t// ActionCreate denotes a create operation.\n\tActionCreate Action = \"create\"\n\n\t// ActionRead denotes a read operation.\n\tActionRead Action = \"read\"\n\n\t// ActionUpdate denotes an update operation.\n\tActionUpdate Action = \"update\"\n\n\t// ActionDelete denotes a delete operation.\n\tActionDelete Action = \"delete\"\n\n\t// ActionReplace denotes a replace operation.\n\tActionReplace Action = \"replace\"\n)\n\n// Map represents the root module\ntype Map struct {\n\tPath              string                                   `json:\"path\"`\n\tRequiredCore      []string                                 `json:\"required_core,omitempty\"`\n\tRequiredProviders map[string]*tfconfig.ProviderRequirement `json:\"required_providers,omitempty\"`\n\t// ProviderConfigs   map[string]*tfconfig.ProviderConfig      `json:\"provider_configs,omitempty\"`\n\tRoot map[string]*Resource `json:\"root,omitempty\"`\n}\n\n// Resource is a modified tfconfig.Resource\ntype Resource struct {\n\tType ResourceType `json:\"type\"`\n\tName string       `json:\"name\"`\n\tLine *int         `json:\"line,omitempty\"`\n\n\tChildren map[string]*Resource `json:\"children,omitempty\"`\n\n\t// Resource\n\tChangeAction Action `json:\"change_action,omitempty\"`\n\t// Variable and Output\n\tRequired  *bool `json:\"required,omitempty\"`\n\tSensitive bool  `json:\"sensitive,omitempty\"`\n\t// Provider and Data\n\tProvider     string `json:\"provider,omitempty\"`\n\tResourceType string `json:\"resource_type,omitempty\"`\n\t// ModuleCall\n\tSource  string `json:\"source,omitempty\"`\n\tVersion string `json:\"version,omitempty\"`\n}\n\n// ModuleCall is a modified tfconfig.ModuleCall\ntype ModuleCall struct {\n\tName    string `json:\"name\"`\n\tSource  string `json:\"source\"`\n\tVersion string `json:\"version,omitempty\"`\n\tLine    int    `json:\"line,omitempty\"`\n}\n\nfunc (r *rover) GenerateModuleMap(parent *Resource, parentModule string) {\n\n\tchildIndex := regexp.MustCompile(`\\[[^[\\]]*\\]$`)\n\tmatchBrackets := regexp.MustCompile(`\\[[^\\[\\]]*\\]`)\n\n\tstates := r.RSO.States\n\tconfigs := r.RSO.Configs\n\n\tprefix := parentModule\n\tif parentModule != \"\" {\n\t\tprefix = fmt.Sprintf(\"%s.\", prefix)\n\t}\n\n\tparentConfig := matchBrackets.ReplaceAllString(parentModule, \"\")\n\tparentConfigured := configs[parentConfig] != nil && configs[parentConfig].Module != nil\n\n\t// Add variables and outputs with line numbers and file names if configured\n\tif parentConfigured && !states[parentModule].IsParent {\n\t\tfor oName, o := range configs[parentConfig].Module.Outputs {\n\t\t\tfname := filepath.Base(o.Pos.Filename)\n\t\t\toid := fmt.Sprintf(\"%soutput.%s\", prefix, oName)\n\t\t\tout := &Resource{\n\t\t\t\tType:      ResourceTypeOutput,\n\t\t\t\tName:      oName,\n\t\t\t\tSensitive: o.Sensitive,\n\t\t\t\tLine:      &o.Pos.Line,\n\t\t\t}\n\t\t\tr.AddFileIfNotExists(parent, parentModule, fname)\n\n\t\t\tparent.Children[fname].Children[oid] = out\n\t\t}\n\n\t\tfor vName, v := range configs[parentConfig].Module.Variables {\n\t\t\tfname := filepath.Base(v.Pos.Filename)\n\t\t\tvid := fmt.Sprintf(\"%svar.%s\", prefix, vName)\n\t\t\tva := &Resource{\n\t\t\t\tType:     ResourceTypeVariable,\n\t\t\t\tName:     vName,\n\t\t\t\tRequired: &v.Required,\n\t\t\t\tLine:     &v.Pos.Line,\n\t\t\t}\n\n\t\t\tr.AddFileIfNotExists(parent, parentModule, fname)\n\n\t\t\tparent.Children[fname].Children[vid] = va\n\n\t\t}\n\t\t// Add variables and Outputs if no configuration files\n\t} else if configs[parentConfig] != nil && configs[parentConfig].ModuleConfig.Module != nil && !states[parentModule].IsParent {\n\t\tfor oName, o := range configs[parentConfig].ModuleConfig.Module.Outputs {\n\t\t\toid := fmt.Sprintf(\"%soutput.%s\", prefix, oName)\n\t\t\tout := &Resource{\n\t\t\t\tType:      ResourceTypeOutput,\n\t\t\t\tName:      oName,\n\t\t\t\tSensitive: o.Sensitive,\n\t\t\t}\n\n\t\t\tparent.Children[oid] = out\n\t\t}\n\n\t\tfor vName := range configs[parentConfig].ModuleConfig.Module.Variables {\n\t\t\tvid := fmt.Sprintf(\"%svar.%s\", prefix, vName)\n\t\t\tva := &Resource{\n\t\t\t\tType: ResourceTypeVariable,\n\t\t\t\tName: vName,\n\t\t\t}\n\n\t\t\tparent.Children[vid] = va\n\n\t\t}\n\t}\n\n\tfor id, rs := range states[parentModule].Children {\n\n\t\tconfigId := matchBrackets.ReplaceAllString(id, \"\")\n\t\tconfigured := configs[parentConfig] != nil && configs[parentConfig].Module != nil && configs[configId] != nil // If there is configuration for filenames, lines, etc.\n\n\t\tre := &Resource{\n\t\t\tType:     rs.Type,\n\t\t\tChildren: map[string]*Resource{},\n\t\t}\n\n\t\tif states[id].Change.Actions != nil {\n\n\t\t\tre.ChangeAction = Action(string(states[id].Change.Actions[0]))\n\t\t\tif len(states[id].Change.Actions) > 1 {\n\t\t\t\tre.ChangeAction = ActionReplace\n\t\t\t}\n\t\t}\n\n\t\tif rs.Type == ResourceTypeResource || rs.Type == ResourceTypeData {\n\t\t\tre.ResourceType = configs[configId].ResourceConfig.Type\n\t\t\tre.Name = configs[configId].ResourceConfig.Name\n\n\t\t\tfor crName, cr := range states[id].Children {\n\n\t\t\t\tif re.Children == nil {\n\t\t\t\t\tre.Children = make(map[string]*Resource)\n\t\t\t\t}\n\n\t\t\t\ttcr := &Resource{\n\t\t\t\t\tType: rs.Type,\n\t\t\t\t}\n\n\t\t\t\tif rs.Type == ResourceTypeData {\n\t\t\t\t\ttcr.Name = strings.TrimPrefix(crName, fmt.Sprintf(\"%sdata.%s.\", prefix, re.ResourceType))\n\t\t\t\t} else {\n\t\t\t\t\ttcr.Name = strings.TrimPrefix(crName, fmt.Sprintf(\"%s%s.\", prefix, re.ResourceType))\n\t\t\t\t}\n\n\t\t\t\tif cr.Change.Actions != nil {\n\t\t\t\t\ttcr.ChangeAction = Action(string(cr.Change.Actions[0]))\n\n\t\t\t\t\tif len(cr.Change.Actions) > 1 {\n\t\t\t\t\t\ttcr.ChangeAction = ActionReplace\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tre.Children[crName] = tcr\n\t\t\t}\n\n\t\t\tif configured {\n\n\t\t\t\tvar fname string\n\t\t\t\tind := fmt.Sprintf(\"%s.%s\", re.ResourceType, re.Name)\n\n\t\t\t\tif rs.Type == ResourceTypeData {\n\t\t\t\t\tind = fmt.Sprintf(\"data.%s\", ind)\n\t\t\t\t}\n\n\t\t\t\tif rs.Type == ResourceTypeData && configs[parentConfig].Module.DataResources[ind] != nil {\n\n\t\t\t\t\tfname = filepath.Base(configs[parentConfig].Module.DataResources[ind].Pos.Filename)\n\t\t\t\t\tre.Line = &configs[parentConfig].Module.DataResources[ind].Pos.Line\n\n\t\t\t\t\tr.AddFileIfNotExists(parent, parentModule, fname)\n\n\t\t\t\t\tparent.Children[fname].Children[id] = re\n\n\t\t\t\t} else if rs.Type == ResourceTypeResource && configs[parentConfig].Module.ManagedResources[ind] != nil {\n\n\t\t\t\t\tfname = filepath.Base(configs[parentConfig].Module.ManagedResources[ind].Pos.Filename)\n\t\t\t\t\tre.Line = &configs[parentConfig].Module.ManagedResources[ind].Pos.Line\n\n\t\t\t\t\tr.AddFileIfNotExists(parent, parentModule, fname)\n\n\t\t\t\t\tparent.Children[fname].Children[id] = re\n\n\t\t\t\t} else {\n\n\t\t\t\t\tr.AddFileIfNotExists(parent, parentModule, DefaultFileName)\n\n\t\t\t\t\tparent.Children[DefaultFileName].Children[id] = re\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tparent.Children[id] = re\n\t\t\t}\n\n\t\t} else if rs.Type == ResourceTypeModule {\n\t\t\tre.Name = strings.Split(id, \".\")[len(strings.Split(id, \".\"))-1]\n\n\t\t\tif configured && !childIndex.MatchString(id) && configs[parentConfig].Module.ModuleCalls[matchBrackets.ReplaceAllString(re.Name, \"\")] != nil {\n\t\t\t\tfname := filepath.Base(configs[parentConfig].Module.ModuleCalls[matchBrackets.ReplaceAllString(re.Name, \"\")].Pos.Filename)\n\t\t\t\tre.Line = &configs[parentConfig].Module.ModuleCalls[matchBrackets.ReplaceAllString(re.Name, \"\")].Pos.Line\n\n\t\t\t\tr.AddFileIfNotExists(parent, parentModule, fname)\n\n\t\t\t\tparent.Children[fname].Children[id] = re\n\n\t\t\t} else {\n\t\t\t\tparent.Children[id] = re\n\t\t\t}\n\n\t\t\tr.GenerateModuleMap(re, id)\n\n\t\t}\n\n\t\t// Add locals\n\t\tif configs[configId] != nil && !(re.Type == ResourceTypeModule && childIndex.MatchString(id)) {\n\t\t\texpressions := map[string]*tfjson.Expression{}\n\n\t\t\tif re.Type == ResourceTypeResource {\n\t\t\t\texpressions = configs[configId].ResourceConfig.Expressions\n\t\t\t} else if re.Type == ResourceTypeModule {\n\t\t\t\texpressions = configs[configId].ModuleConfig.Expressions\n\t\t\t} else if re.Type == ResourceTypeOutput {\n\t\t\t\texpressions[\"exp\"] = configs[configId].OutputConfig.Expression\n\t\t\t}\n\n\t\t\t// Add locals\n\t\t\tfor _, reValues := range expressions {\n\t\t\t\tfor _, dependsOnR := range reValues.References {\n\t\t\t\t\tref := &Resource{}\n\t\t\t\t\tif strings.HasPrefix(dependsOnR, \"local.\") {\n\t\t\t\t\t\t// Append local variable\n\t\t\t\t\t\tref.Type = ResourceTypeLocal\n\t\t\t\t\t\tref.Name = strings.TrimPrefix(dependsOnR, \"local.\")\n\t\t\t\t\t\trid := fmt.Sprintf(\"%s%s\", prefix, dependsOnR)\n\n\t\t\t\t\t\tif parentConfigured {\n\t\t\t\t\t\t\tr.AddFileIfNotExists(parent, parentModule, DefaultFileName)\n\t\t\t\t\t\t\tparent.Children[DefaultFileName].Children[rid] = ref\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparent.Children[rid] = ref\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n}\n\nfunc (r *rover) AddFileIfNotExists(module *Resource, parentModule string, fname string) {\n\n\tif _, ok := module.Children[fname]; !ok {\n\n\t\tmodule.Children[fname] = &Resource{\n\t\t\tType:     ResourceTypeFile,\n\t\t\tName:     fname,\n\t\t\tSource:   fmt.Sprintf(\"%s/%s\", module.Source, fname),\n\t\t\tChildren: map[string]*Resource{},\n\t\t}\n\t}\n}\n\n// Generates Map - Overview of files and their resources\n// Groups different resource types together\n// Defaults to config\nfunc (r *rover) GenerateMap() error {\n\tlog.Println(\"Generating resource map...\")\n\n\t// Root module\n\trootModule := &Resource{\n\t\tType:     ResourceTypeModule,\n\t\tName:     \"\",\n\t\tSource:   \"unknown\",\n\t\tChildren: map[string]*Resource{},\n\t}\n\n\tmapObj := &Map{\n\t\tPath: \"Rover Visualization\",\n\t\tRoot: rootModule.Children,\n\t}\n\n\t// If root module has local filesystem configuration stuff (line number/ file name info)\n\trootConfig := r.RSO.Configs[\"\"].Module\n\n\tif rootConfig != nil {\n\t\trootModule.Source = rootConfig.Path\n\t\tmapObj.Path = rootConfig.Path\n\t\tmapObj.RequiredProviders = rootConfig.RequiredProviders\n\t\tmapObj.RequiredCore = rootConfig.RequiredCore\n\t\tr.GenerateModuleMap(rootModule, \"\")\n\t} else {\n\t\tr.AddFileIfNotExists(rootModule, \"\", DefaultFileName)\n\t\tr.GenerateModuleMap(rootModule.Children[DefaultFileName], \"\")\n\t}\n\n\tr.Map = mapObj\n\n\treturn nil\n}\n"
        },
        {
          "name": "rso.go",
          "type": "blob",
          "size": 10.705078125,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/hashicorp/terraform-config-inspect/tfconfig\"\n\ttfjson \"github.com/hashicorp/terraform-json\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n)\n\n// ResourcesOverview represents the root module\ntype ResourcesOverview struct {\n\tLocations map[string]string          `json:\"locations,omitempty\"`\n\tStates    map[string]*StateOverview  `json:\"states,omitempty\"`\n\tConfigs   map[string]*ConfigOverview `json:\"configs,omitempty\"`\n}\n\n// ResourceOverview is a modified tfjson.Plan\ntype StateOverview struct {\n\t// ChangeAction tfjson.Actions        `json:change_action`\n\tChange    tfjson.Change             `json:\"change,omitempty\"`\n\tModule    *tfjson.StateModule       `json:\"module,omitempty\"`\n\tDependsOn []string                  `json:\"depends_on,omitempty\"`\n\tChildren  map[string]*StateOverview `json:\"children,omitempty\"`\n\tType      ResourceType              `json:\"type,omitempty\"`\n\tIsParent  bool                      `json:\"isparent,omitempty\"`\n}\n\ntype ConfigOverview struct {\n\tResourceConfig *tfjson.ConfigResource `json:\"resource_config,omitempty\"`\n\tModuleConfig   *tfjson.ModuleCall     `json:\"module_config,omitempty\"`\n\tVariableConfig *tfjson.ConfigVariable `json:\"variable_config,omitempty\"`\n\tOutputConfig   *tfjson.ConfigOutput   `json:\"output_config,omitempty\"`\n\tModule         *tfconfig.Module       `json:\"module,omitempty\"`\n}\n\n// For parsing modules.json\ntype ModuleLocations struct {\n\tLocations []ModuleLocation `json:\"Modules,omitempty\"`\n}\n\ntype ModuleLocation struct {\n\tKey    string `json:\"Key,omitempty\"\"`\n\tSource string `json:\"Source,omitempty\"`\n\tDir    string `json:\"Dir,omitempty\"`\n}\n\n// PopulateModuleLocations Parses the modules.json file in the .terraform folder, if it exists\n// The module locations are then added to rso.Locations and referenced when loading\n// modules from the filesystem with tfconfig.LoadModule\nfunc (r *rover) PopulateModuleLocations(moduleJSONFile string, locations map[string]string) {\n\n\tmoduleLocations := ModuleLocations{}\n\n\tjsonFile, err := os.Open(moduleJSONFile)\n\tif err != nil {\n\t\tlog.Println(\"No submodule configurations found...\")\n\t}\n\tdefer jsonFile.Close()\n\n\t// read our opened jsonFile as a byte array.\n\tbyteValue, _ := ioutil.ReadAll(jsonFile)\n\n\t// we unmarshal our byteArray which contains our\n\t// jsonFile's content into 'users' which we defined above\n\tjson.Unmarshal(byteValue, &moduleLocations)\n\n\tfor _, loc := range moduleLocations.Locations {\n\t\tlocations[loc.Key] = fmt.Sprintf(\"%s/%s\", r.WorkingDir, loc.Dir)\n\t\t//fmt.Printf(\"%v\\n\", loc.Dir)\n\t}\n}\n\nfunc (r *rover) PopulateConfigs(parent string, parentKey string, rso *ResourcesOverview, config *tfjson.ConfigModule) {\n\n\tml := rso.Locations\n\trc := rso.Configs\n\n\tprefix := parent\n\tif prefix != \"\" {\n\t\tprefix = fmt.Sprintf(\"%s.\", prefix)\n\t}\n\n\t// Loop through variable configs\n\tfor variableName, variable := range config.Variables {\n\t\tvariableName = fmt.Sprintf(\"%svar.%s\", prefix, variableName)\n\t\tif _, ok := rc[variableName]; !ok {\n\t\t\trc[variableName] = &ConfigOverview{}\n\t\t}\n\t\trc[variableName].VariableConfig = variable\n\t}\n\n\t// Loop through output configs\n\tfor outputName, output := range config.Outputs {\n\t\toutputName = fmt.Sprintf(\"%soutput.%s\", prefix, outputName)\n\t\tif _, ok := rc[outputName]; !ok {\n\t\t\trc[outputName] = &ConfigOverview{}\n\t\t}\n\t\trc[outputName].OutputConfig = output\n\t}\n\n\t// Loop through each resource type and populate graph\n\tfor _, resource := range config.Resources {\n\n\t\taddress := fmt.Sprintf(\"%v%v\", prefix, resource.Address)\n\n\t\tif _, ok := rc[address]; !ok {\n\t\t\trc[address] = &ConfigOverview{}\n\t\t}\n\n\t\trc[address].ResourceConfig = resource\n\t\t//rc[address].DependsOn = resource.DependsOn\n\n\t\tif _, ok := rc[parent]; !ok {\n\t\t\trc[parent] = &ConfigOverview{}\n\t\t}\n\t}\n\n\t// Add modules\n\tfor moduleName, m := range config.ModuleCalls {\n\n\t\tmn := fmt.Sprintf(\"module.%s\", moduleName)\n\t\tif prefix != \"\" {\n\t\t\tmn = fmt.Sprintf(\"%s%s\", prefix, mn)\n\t\t}\n\n\t\tif _, ok := rc[mn]; !ok {\n\t\t\trc[mn] = &ConfigOverview{}\n\t\t}\n\n\t\tchildKey := strings.TrimPrefix(moduleName, \"module.\")\n\t\tif parentKey != \"\" {\n\t\t\tchildKey = fmt.Sprintf(\"%s.%s\", parentKey, childKey)\n\t\t}\n\n\t\tchildPath := ml[childKey]\n\t\tchild, _ := tfconfig.LoadModule(childPath)\n\t\t// If module can be loaded from filesystem\n\t\tif !child.Diagnostics.HasErrors() {\n\t\t\trc[mn].Module = child\n\t\t} else {\n\t\t\tlog.Printf(\"Continuing without loading module from filesystem: %s\\n\", childKey)\n\t\t}\n\n\t\trc[mn].ModuleConfig = m\n\n\t\tr.PopulateConfigs(mn, childKey, rso, m.Module)\n\t}\n}\n\nfunc (r *rover) PopulateModuleState(rso *ResourcesOverview, module *tfjson.StateModule, prior bool) {\n\tchildIndex := regexp.MustCompile(`\\[[^[\\]]*\\]$`)\n\n\trs := rso.States\n\n\t// Loop through each resource type and populate states\n\tfor _, rst := range module.Resources {\n\t\tid := rst.Address\n\t\tparent := module.Address\n\t\t//fmt.Printf(\"ID: %v\\n\", id)\n\t\tif rst.AttributeValues != nil {\n\n\t\t\t// Add resource to parent\n\t\t\t// Create resource if doesn't exist\n\t\t\tif _, ok := rs[id]; !ok {\n\t\t\t\trs[id] = &StateOverview{}\n\t\t\t\tif rst.Mode == \"data\" {\n\t\t\t\t\trs[id].Type = ResourceTypeData\n\t\t\t\t} else {\n\t\t\t\t\trs[id].Type = ResourceTypeResource\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif _, ok := rs[parent]; !ok {\n\t\t\t\trs[parent] = &StateOverview{}\n\t\t\t\trs[parent].Type = ResourceTypeModule\n\t\t\t\trs[parent].IsParent = false\n\t\t\t\trs[parent].Children = make(map[string]*StateOverview)\n\t\t\t}\n\n\t\t\t// Check if resource has parent\n\t\t\t// part of, resource w/ count or for_each\n\t\t\tif childIndex.MatchString(id) {\n\t\t\t\tparent = childIndex.ReplaceAllString(id, \"\")\n\t\t\t\t// If resource has parent, create parent if doesn't exist\n\t\t\t\tif _, ok := rs[parent]; !ok {\n\t\t\t\t\trs[parent] = &StateOverview{}\n\t\t\t\t\trs[parent].Children = make(map[string]*StateOverview)\n\t\t\t\t\tif rst.Mode == \"data\" {\n\t\t\t\t\t\trs[parent].Type = ResourceTypeData\n\t\t\t\t\t} else {\n\t\t\t\t\t\trs[parent].Type = ResourceTypeResource\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\trs[module.Address].Children[parent] = rs[parent]\n\n\t\t\t}\n\n\t\t\t//fmt.Printf(\"%v - %v\\n\", id, parent)\n\t\t\trs[parent].Children[id] = rs[id]\n\n\t\t\tif prior {\n\t\t\t\trs[id].Change.Before = rst.AttributeValues\n\t\t\t} else {\n\t\t\t\trs[id].Change.After = rst.AttributeValues\n\t\t\t}\n\t\t}\n\t}\n\n\tfor _, childModule := range module.ChildModules {\n\n\t\tparent := module.Address\n\n\t\tid := childModule.Address\n\n\t\tif _, ok := rs[parent]; !ok {\n\t\t\trs[parent] = &StateOverview{}\n\t\t\trs[parent].Children = make(map[string]*StateOverview)\n\t\t\trs[parent].Type = ResourceTypeModule\n\t\t\trs[parent].IsParent = false\n\t\t}\n\n\t\tif childIndex.MatchString(id) {\n\t\t\tparent = childIndex.ReplaceAllString(id, \"\")\n\n\t\t\t// If module has parent, create parent if doesn't exist\n\t\t\tif _, ok := rs[parent]; !ok {\n\t\t\t\trs[parent] = &StateOverview{}\n\t\t\t\trs[parent].Children = make(map[string]*StateOverview)\n\t\t\t\trs[parent].Type = ResourceTypeModule\n\t\t\t\trs[parent].IsParent = true\n\t\t\t}\n\n\t\t\trs[module.Address].Children[parent] = rs[parent]\n\t\t}\n\n\t\tif rs[parent].Module == nil {\n\t\t\trs[parent].Module = module\n\t\t}\n\n\t\tif _, ok := rs[id]; !ok {\n\t\t\trs[id] = &StateOverview{}\n\t\t\trs[id].Children = make(map[string]*StateOverview)\n\t\t\trs[id].Type = ResourceTypeModule\n\t\t}\n\n\t\trs[id].Module = childModule\n\n\t\trs[parent].Children[id] = rs[id]\n\n\t\tr.PopulateModuleState(rso, childModule, prior)\n\t}\n\n}\n\n// GenerateResourceOverview - Overview of files and their resources\n// Groups different resource types together\nfunc (r *rover) GenerateResourceOverview() error {\n\tlog.Println(\"Generating resource overview...\")\n\n\tmatchBrackets := regexp.MustCompile(`\\[[^\\[\\]]*\\]`)\n\trso := &ResourcesOverview{}\n\n\trso.Locations = make(map[string]string)\n\trso.Configs = make(map[string]*ConfigOverview)\n\trso.States = make(map[string]*StateOverview)\n\n\trc := rso.Configs\n\trs := rso.States\n\n\t// This is the location of modules.json, which contains where modules are stored on the local filesystem\n\tmoduleJSONPath := filepath.Join(r.WorkingDir, \".terraform/modules/modules.json\")\n\tr.PopulateModuleLocations(moduleJSONPath, rso.Locations)\n\n\t// Create root module configuration\n\trc[\"\"] = &ConfigOverview{}\n\trootModule, _ := tfconfig.LoadModule(r.WorkingDir)\n\t// If module can be loaded from filesystem\n\tif !rootModule.Diagnostics.HasErrors() {\n\t\trc[\"\"].Module = rootModule\n\t} else {\n\t\tlog.Printf(\"Could not load configuration from: %v\\n\", r.WorkingDir)\n\t\tlog.Printf(\"Continuing without configuration file data...\")\n\t}\n\n\trc[\"\"].ModuleConfig = &tfjson.ModuleCall{}\n\trc[\"\"].ModuleConfig.Module = r.Plan.Config.RootModule\n\n\tr.PopulateConfigs(\"\", \"\", rso, r.Plan.Config.RootModule)\n\n\t// Populate prior state\n\tif r.Plan.PriorState != nil {\n\t\tif r.Plan.PriorState.Values != nil {\n\t\t\tif r.Plan.PriorState.Values.RootModule != nil {\n\t\t\t\tr.PopulateModuleState(rso, r.Plan.PriorState.Values.RootModule, true)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Populate planned state\n\tif r.Plan.PlannedValues != nil {\n\t\tif r.Plan.PlannedValues.RootModule != nil {\n\t\t\tr.PopulateModuleState(rso, r.Plan.PlannedValues.RootModule, false)\n\t\t}\n\t}\n\n\t// Create root module in state if doesn't exist\n\tif _, ok := rs[\"\"]; !ok {\n\t\trs[\"\"] = &StateOverview{}\n\t\trs[\"\"].Children = make(map[string]*StateOverview)\n\t\trs[\"\"].IsParent = false\n\t\trs[\"\"].Type = ResourceTypeModule\n\t}\n\n\t// reIsChild := regexp.MustCompile(`^\\w+\\.\\w+[\\.\\[]`)\n\t// reGetParent := regexp.MustCompile(`^\\w+\\.\\w+`)\n\t//reIsChild := regexp.MustCompile(`^\\w+\\.[\\w-]+[\\.\\[]`)\n\n\t// Loop through output changes\n\tfor outputName, output := range r.Plan.OutputChanges {\n\t\tif _, ok := rs[outputName]; !ok {\n\t\t\trs[outputName] = &StateOverview{}\n\t\t}\n\n\t\t// If before/after sensitive, set value to \"Sensitive Value\"\n\t\tif !r.ShowSensitive {\n\t\t\tif output.BeforeSensitive != nil {\n\t\t\t\tif output.BeforeSensitive.(bool) {\n\t\t\t\t\toutput.Before = \"Sensitive Value\"\n\t\t\t\t}\n\t\t\t}\n\t\t\tif output.AfterSensitive != nil {\n\t\t\t\tif output.AfterSensitive.(bool) {\n\t\t\t\t\toutput.After = \"Sensitive Value\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\trs[outputName].Change = *output\n\t\trs[outputName].Type = ResourceTypeOutput\n\t}\n\n\t// Loop through resource changes\n\tfor _, resource := range r.Plan.ResourceChanges {\n\t\tid := resource.Address\n\t\tconfigId := matchBrackets.ReplaceAllString(id, \"\")\n\t\tparent := resource.ModuleAddress\n\n\t\tif resource.Change != nil {\n\n\t\t\t// If has parent, create parent if doesn't exist\n\t\t\tif _, ok := rs[parent]; !ok {\n\t\t\t\trs[parent] = &StateOverview{}\n\t\t\t\trs[parent].Children = make(map[string]*StateOverview)\n\t\t\t}\n\n\t\t\t// Add resource to parent\n\t\t\t// Create resource if doesn't exist\n\t\t\tif _, ok := rs[id]; !ok {\n\t\t\t\trs[id] = &StateOverview{}\n\t\t\t\tif resource.Mode == \"data\" {\n\t\t\t\t\trs[id].Type = ResourceTypeData\n\t\t\t\t} else {\n\t\t\t\t\trs[id].Type = ResourceTypeResource\n\t\t\t\t}\n\t\t\t\trs[parent].Children[id] = rs[id]\n\t\t\t}\n\t\t\trs[id].Change = *resource.Change\n\n\t\t\t// Create resource config if doesn't exist\n\t\t\tif _, ok := rc[configId]; !ok {\n\t\t\t\trc[configId] = &ConfigOverview{}\n\t\t\t\trc[configId].ResourceConfig = &tfjson.ConfigResource{}\n\n\t\t\t\t// Add type and name since it's missing\n\t\t\t\t// TODO: Find long term fix\n\t\t\t\trc[configId].ResourceConfig.Name = resource.Name\n\t\t\t\trc[configId].ResourceConfig.Type = resource.Type\n\t\t\t}\n\n\t\t}\n\t}\n\n\tr.RSO = rso\n\n\treturn nil\n}\n"
        },
        {
          "name": "screenshot.go",
          "type": "blob",
          "size": 2.6640625,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/chromedp/cdproto/browser\"\n\t\"github.com/chromedp/chromedp\"\n)\n\n// Heavily inspired by: https://github.com/chromedp/examples/blob/master/download_file/main.go\nfunc screenshot(s *http.Server) {\n\t// ctx, cancel := chromedp.NewContext(context.Background(), chromedp.WithDebugf(log.Printf))\n\tctx, cancel := chromedp.NewContext(context.Background())\n\tdefer cancel()\n\n\t// create a timeout as a safety net to prevent any infinite wait loops\n\tctx, cancel = context.WithTimeout(ctx, 60*time.Second)\n\tdefer cancel()\n\n\turl := fmt.Sprintf(\"http://%s\", s.Addr)\n\n\t// this will be used to capture the file name later\n\tvar downloadGUID string\n\n\tdownloadComplete := make(chan bool)\n\tchromedp.ListenTarget(ctx, func(v interface{}) {\n\t\tif ev, ok := v.(*browser.EventDownloadProgress); ok {\n\t\t\tif ev.State == browser.DownloadProgressStateCompleted {\n\t\t\t\tdownloadGUID = ev.GUID\n\t\t\t\tclose(downloadComplete)\n\t\t\t}\n\t\t}\n\t})\n\n\tif err := chromedp.Run(ctx, chromedp.Tasks{\n\t\tbrowser.SetDownloadBehavior(browser.SetDownloadBehaviorBehaviorAllowAndName).\n\t\t\tWithDownloadPath(os.TempDir()).\n\t\t\tWithEventsEnabled(true),\n\n\t\tchromedp.Navigate(url),\n\t\t// wait for graph to be visible\n\t\tchromedp.WaitVisible(`#cytoscape-div`),\n\t\t// find and click \"Save Graph\" button\n\t\tchromedp.Click(`#saveGraph`, chromedp.NodeVisible),\n\t}); err != nil && !strings.Contains(err.Error(), \"net::ERR_ABORTED\") {\n\t\t// Note: Ignoring the net::ERR_ABORTED page error is essential here since downloads\n\t\t// will cause this error to be emitted, although the download will still succeed.\n\t\tlog.Fatal(err)\n\t}\n\t<-downloadComplete\n\n\te := moveFile(fmt.Sprintf(\"%v/%v\", os.TempDir(), downloadGUID), \"./rover.svg\")\n\tif e != nil {\n\t\tlog.Fatal(e)\n\t}\n\n\tlog.Println(\"Image generation complete.\")\n\n\t// Shutdown http server\n\ts.Shutdown(context.Background())\n}\n\n// This function resolves the \"invalid cross-device link\" error for moving files\n// between volumes for Docker.\n// https://gist.github.com/var23rav/23ae5d0d4d830aff886c3c970b8f6c6b\nfunc moveFile(sourcePath, destPath string) error {\n\tinputFile, err := os.Open(sourcePath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Couldn't open source file: %s\", err)\n\t}\n\toutputFile, err := os.Create(destPath)\n\tif err != nil {\n\t\tinputFile.Close()\n\t\treturn fmt.Errorf(\"Couldn't open dest file: %s\", err)\n\t}\n\tdefer outputFile.Close()\n\t_, err = io.Copy(outputFile, inputFile)\n\tinputFile.Close()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Writing to output file failed: %s\", err)\n\t}\n\t// The copy was successful, so now delete the original file\n\terr = os.Remove(sourcePath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Failed removing original file: %s\", err)\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "server.go",
          "type": "blob",
          "size": 1.7734375,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\t// tfjson \"github.com/hashicorp/terraform-json\"\n)\n\nfunc (ro *rover) startServer(ipPort string, frontendFS http.Handler) error {\n\n\tm := http.NewServeMux()\n\ts := http.Server{Addr: ipPort, Handler: m}\n\n\tm.Handle(\"/\", frontendFS)\n\tm.HandleFunc(\"/health\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// simple healthcheck\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tio.WriteString(w, `{\"alive\": true}`)\n\t})\n\tm.HandleFunc(\"/api/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfileType := strings.Replace(r.URL.Path, \"/api/\", \"\", 1)\n\n\t\tvar j []byte\n\t\tvar err error\n\n\t\tenableCors(&w)\n\n\t\tswitch fileType {\n\t\tcase \"plan\":\n\t\t\tj, err = json.Marshal(ro.Plan)\n\t\t\tif err != nil {\n\t\t\t\tio.WriteString(w, fmt.Sprintf(\"Error producing plan JSON: %s\\n\", err))\n\t\t\t}\n\t\tcase \"rso\":\n\t\t\tj, err = json.Marshal(ro.RSO)\n\t\t\tif err != nil {\n\t\t\t\tio.WriteString(w, fmt.Sprintf(\"Error producing rso JSON: %s\\n\", err))\n\t\t\t}\n\t\tcase \"map\":\n\t\t\tj, err = json.Marshal(ro.Map)\n\t\t\tif err != nil {\n\t\t\t\tio.WriteString(w, fmt.Sprintf(\"Error producing map JSON: %s\\n\", err))\n\t\t\t}\n\t\tcase \"graph\":\n\t\t\tj, err = json.Marshal(ro.Graph)\n\t\t\tif err != nil {\n\t\t\t\tio.WriteString(w, fmt.Sprintf(\"Error producing graph JSON: %s\\n\", err))\n\t\t\t}\n\t\tdefault:\n\t\t\tio.WriteString(w, \"Please enter a valid file type: plan, rso, map, graph\\n\")\n\t\t}\n\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tio.Copy(w, bytes.NewReader(j))\n\t})\n\n\tlog.Printf(\"Rover is running on %s\", ipPort)\n\n\tl, err := net.Listen(\"tcp\", ipPort)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// The browser can connect now because the listening socket is open.\n\tif ro.GenImage {\n\t\tgo screenshot(&s)\n\t}\n\n\t// Start the blocking server loop.\n\treturn s.Serve(l)\n\n}\n"
        },
        {
          "name": "ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "zip.go",
          "type": "blob",
          "size": 3.955078125,
          "content": "package main\n\nimport (\n\t\"archive/zip\"\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/fs\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc (r *rover) generateZip(fe fs.FS, filename string) error {\n\tnewZipFile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer newZipFile.Close()\n\n\tzipWriter := zip.NewWriter(newZipFile)\n\tdefer zipWriter.Close()\n\n\t// Add frontend to zip file\n\tfeItems, err := fs.ReadDir(fe, \".\")\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\tfor _, feItem := range feItems {\n\t\tif !feItem.IsDir() {\n\t\t\tif err = AddEmbeddedToZip(fe, zipWriter, feItem.Name()); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t// Iterate through subdirectories (ui/dist/*)\n\t\tfeSubItems, err := fs.ReadDir(fe, feItem.Name())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfor _, feSubItem := range feSubItems {\n\t\t\tif err = AddEmbeddedToZip(fe, zipWriter, fmt.Sprintf(\"%s/%s\", feItem.Name(), feSubItem.Name())); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\t// Add plan, rso, map, graph to zip file\n\tif err = AddFileToZip(zipWriter, \"plan\", r.Plan); err != nil {\n\t\treturn err\n\t}\n\tif err = AddFileToZip(zipWriter, \"rso\", r.RSO); err != nil {\n\t\treturn err\n\t}\n\tif err = AddFileToZip(zipWriter, \"map\", r.Map); err != nil {\n\t\treturn err\n\t}\n\tif err = AddFileToZip(zipWriter, \"graph\", r.Graph); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc AddEmbeddedToZip(fe fs.FS, zipWriter *zip.Writer, filename string) error {\n\twriter, err := zipWriter.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar fileToZip fs.File\n\n\t// Rename standalone to index.html references from absolute to relative\n\tif filename == \"index.html\" {\n\t\tcurContent, err := fs.ReadFile(fe, filename)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tcontents := strings.Split(string(curContent), \"</head>\")\n\t\t// Add js files, workaround since CORS error if you try to do getJSON\n\t\tcontent := fmt.Sprintf(\"%s%s%s\", contents[0], `<script type=\"text/javascript\" language=\"javascript\" src=\"./map.js\"></script>\n\t\t<script type=\"text/javascript\" language=\"javascript\" src=\"./rso.js\"></script>\n\t\t<script type=\"text/javascript\" language=\"javascript\" src=\"./graph.js\"></script>`, contents[1])\n\t\tcontent = strings.ReplaceAll(content, \"=\\\"/\", \"=\\\"./\")\n\n\t\ttempFileName, tempFile, err := createTempFile(\"temp-index.html\", []byte(content))\n\t\tdefer os.Remove(tempFile.Name()) // clean up\n\t\tdefer tempFile.Close()\n\n\t\tfileToZip, err = os.Open(tempFileName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer fileToZip.Close()\n\t} else if strings.HasSuffix(filename, \".js\") {\n\t\tcurContent, err := fs.ReadFile(fe, filename)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\trawContent := bytes.ReplaceAll(curContent, []byte(\"r.p+\\\"\"), []byte(\"\\\"./\"))\n\n\t\ttempFileName, tempFile, err := createTempFile(\"temp-index.html\", rawContent)\n\t\tdefer os.Remove(tempFile.Name()) // clean up\n\t\tdefer tempFile.Close()\n\n\t\tfileToZip, err = os.Open(tempFileName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer fileToZip.Close()\n\n\t} else {\n\t\tfileToZip, err = fe.Open(filename)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer fileToZip.Close()\n\t}\n\n\t_, err = io.Copy(writer, fileToZip)\n\treturn err\n}\n\nfunc AddFileToZip(zipWriter *zip.Writer, fileType string, j interface{}) error {\n\tfilename := fmt.Sprintf(\"%s.js\", fileType)\n\n\twriter, err := zipWriter.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tb, err := json.Marshal(j)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error producing JSON: %s\\n\", err)\n\t}\n\n\t// add syntax to make json file a js object\n\tcontent := fmt.Sprintf(\"const %s = %s\", fileType, string(b))\n\n\ttempFileName, tempFile, err := createTempFile(filename, []byte(content))\n\tdefer os.Remove(tempFile.Name()) // clean up\n\tdefer tempFile.Close()\n\n\tfileToZip, err := os.Open(tempFileName)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer fileToZip.Close()\n\n\t_, err = io.Copy(writer, fileToZip)\n\treturn err\n}\n\nfunc createTempFile(filename string, b []byte) (string, *os.File, error) {\n\ttempFile, err := os.CreateTemp(\"\", filename)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t_, err = tempFile.Write(b)\n\tif err != nil {\n\t\treturn \"\", tempFile, err\n\t}\n\n\treturn tempFile.Name(), tempFile, nil\n}\n"
        }
      ]
    }
  ]
}