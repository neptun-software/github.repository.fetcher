{
  "metadata": {
    "timestamp": 1736567006049,
    "page": 586,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "s-rah/onionscan",
      "stars": 2911,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.037109375,
          "content": "templates/scripts/* linguist-vendored\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.341796875,
          "content": "# common files\n*~\n*.log\n*.bak\n*.tmp\n*.swp\n*.lock\n\n\n# Eclipse\n.classpath\n.project\n.settings\n.metadata\n.factorypath\n\n# IDEA IntelliJ\n*.ipr\n*.iws\n*.iml\n.idea\n.idea_modules\nout\natlassian-ide-plugin.xml\n\n# Windows\nThumbs.db\nehthumbs.db\nDesktop.ini\n\n# KDE directory preferences\n.directory\n\n# OS X\n.DS_Store\n.Trashes\n\n# OnionScan\nonionscandb\nservice-config\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.208984375,
          "content": "language: go\ngo:\n  - 1.6.2\n  - tip\nsudo: true\nnotifications:\n   email:\n     recipients:\n       - team@onionscan.org\n\nscript:\n    - go test -v ./...\n    - GOFMT=$(gofmt -d .) && echo \"$GOFMT\"\n    - test -z \"$GOFMT\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6728515625,
          "content": "# General Guidelines for Contributing\n\n* **Important:** Make sure you are developing off of the `onionscan-0.3` branch - this is an experimental branch aimed at testing new features before rollng them into a release.\n* Issues are the best place for design discussions and questions. \n* Documentation and Tests are always welcome.\n* When submitting a PR tests are automatically run with Travis-CI please ensure that your code does not break this integration.\n\n\n# What should I work on?\n\nCheck out the [Help Wanted](https://github.com/s-rah/onionscan/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22) for projects that will likely be the easiest for newcomers\n\nIssues marked [idea/ needs design](https://github.com/s-rah/onionscan/issues?q=is%3Aissue+is%3Aopen+label%3A%22idea+%2F+needs+design%22) should begin with a document linked from the issue to allow input as these are likely to have the biggest impact on OnionScan's overall architecture.\n\nIf in doubt, you can always contact @s-rah\n\n# What if I have a new idea?\n\nAwesome. You can generally either add an issue if it is still in the thought stages or a PR if you have code. If you are unsure about whether a new idea is suitable for OnionScan please open an issue. Generally the following are always encouraged:\n\n* New identifier correlations (past examples: email addresses, cryptocurrency id's)\n* New analytics techniques (past examples: ssh key correlations, image fingerprinting)\n* New protocols (that are likely being used by onion services, past examples: bitcoin, irc, ssh)\n* New Miconfigurations/Exploits (past examples: mod_status)\n* Bug fixes\n* Usability Improvements\n* Tests and Documentation \n\nIf in doubt, you can always contact @s-rah\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 4.7353515625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Sarah Jamie Lewis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n--------------------------------------------------------------------------------\n\nRoboto fonts are distributed under the Apache 2.0 License Apache License, Version 2.0\n\n--------------------------------------------------------------------------------\n\nChart.js \nThe MIT License (MIT) Copyright (c) 2013-2016 Nick Downie\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n--------------------------------------------------------------------------------\n\ncytoscape.js\n\nCopyright (c) 2016 The Cytoscape Consortium\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the “Software”), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n--------------------------------------------------------------------------------\n\nbootstrap resources in /templates (notably index.html & ./style/bootstrap.css)\n\nThe MIT License (MIT)\n\nCopyright (c) 2011-2016 Twitter, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7958984375,
          "content": "# What is OnionScan?\n\n\n[![Build Status](https://travis-ci.org/s-rah/onionscan.svg?branch=onionscan-0.2)](https://travis-ci.org/s-rah/onionscan) [![Go Report Card](https://goreportcard.com/badge/github.com/s-rah/onionscan)](https://goreportcard.com/report/github.com/s-rah/onionscan)\n\nOnionScan is a free and open source tool for investigating the Dark Web. For all\nthe amazing technological innovations in the anonymity and privacy space, there \nis always a constant threat that has no effective technological patch - human\nerror. <img src=\"templates/images/logo.png\" title=\"OnionScan\"/>\n\nWhether it is operational security leaks or software misconfiguration - most\noften times the attacks on anonymity don't come from breaking the underlying\nsystems, but from ourselves.\n\nOnionScan has two primary goals:\n\n* We want to help **operators of hidden services find and fix operational security \n issues with their services**. We want to help them detect misconfigurations and we\n want to inspire a new generation of anonymity engineering projects to help make\n the world a more private place.\n  \n* Secondly we want to help **researchers** and **investigators monitor and track  Dark Web sites**.\n In fact we want to make this as easy as possible. Not because we agree with the \n goals and motives of every investigation force out there - most often we don't.\n But by making these kinds of investigations easy, we hope to create a powerful\n incentive for new anonymity technology (see goal #1)\n\n## Installing\n\n### A Note on Dependencies\n\nOnionScan requires either Go 1.6 or 1.7.\n\nIn order to install OnionScan you will need the following dependencies not \nprovided by the core go standard library:\n\n* golang.org/x/net/proxy - For the Tor SOCKS Proxy connection.\n* golang.org/x/net/crypto - For PGP parsing\n* golang.org/x/net/html - For HTML parsing\n* github.com/rwcarlsen/goexif - For EXIF data extraction.\n* github.com/HouzuoGuo/tiedot/db - For crawl database.\n\nSee <a href=\"https://github.com/s-rah/onionscan/wiki\">the wiki</a> for guidance.\n\n### Grab with go get\n\n`go get github.com/s-rah/onionscan`\n\n### Compile/Run from git cloned source\n\nOnce you have cloned the repository into somewhere that go can find it you can\nrun `go install github.com/s-rah/onionscan` and then run the binary in `$GOPATH/bin/onionscan`.\n\nAlternatively, you can just do `go run github.com/s-rah/onionscan.go` to run without compiling.\n\n## Quick Start\n\nFor a simple report detailing the high, medium and low risk areas found with a\nhidden service:\n\n`onionscan notarealhiddenservice.onion`\n\nThe most interesting output comes from the verbose option:\n\n`onionscan --verbose notarealhiddenservice.onion`\n\nThere is also a JSON output, if you want to integrate with another program or \napplication:\n\n`onionscan --jsonReport notarealhiddenservice.onion`\n\nIf you would like to use a proxy server listening on something other that \n`127.0.0.1:9050`, then you can use the --torProxyAddress flag:\n\n`onionscan --torProxyAddress=127.0.0.1:9150 notarealhiddenservice.onion`\n\nMore detailed documentation on usage can be found in [doc](doc/README.md).\n\n## What is scanned for?\n\nA list of privacy and security problems which are detected by OnionScan can be\nfound [here](doc/what-is-scanned-for.md).\n\nYou can also directly configure the types of scanning that onionscan does using\nthe scans parameter.\n\n`./bin/onionscan --scans web notarealhiddenservice.onion`\n\n## Running the OnionScan Correlation Lab\n\nIf you are a researcher monitoring multiple sites you will definitely want to use\nthe OnionScan Correlation Lab - a web interface hosted by OnionScan that allows\nyou to discover, search and tag different identity correlations.\n\nYou can find a full guide on the OnionScan correlation lab [here](doc/correlation-lab.md).\n\n# <img src=\"./doc/images/correlation-lab-main.png\" title=\"The main OnionScan Correlation Lab Screen\"/>\n\n\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "crawldb",
          "type": "tree",
          "content": null
        },
        {
          "name": "deanonymization",
          "type": "tree",
          "content": null
        },
        {
          "name": "design",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 6.0927734375,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"github.com/s-rah/onionscan/config\"\n\t\"github.com/s-rah/onionscan/deanonymization\"\n\t\"github.com/s-rah/onionscan/onionscan\"\n\t\"github.com/s-rah/onionscan/onionscan/steps\"\n\t\"github.com/s-rah/onionscan/report\"\n\t\"github.com/s-rah/onionscan/utils\"\n\t\"github.com/s-rah/onionscan/webui\"\n\t\"golang.org/x/crypto/ssh/terminal\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\n\tflag.Usage = func() {\n\t\tfmt.Printf(\"Usage of %s:\\n\", os.Args[0])\n\t\tfmt.Printf(\"    onionscan [flags] hiddenservice | onionscan [flags] --list list | onionscan --mode analysis\\n\")\n\t\tflag.PrintDefaults()\n\t}\n\n\ttorProxyAddress := flag.String(\"torProxyAddress\", \"127.0.0.1:9050\", \"the address of the tor proxy to use\")\n\tsimpleReport := flag.Bool(\"simpleReport\", true, \"print out a simple report detailing what is wrong and how to fix it, true by default\")\n\tjsonSimpleReport := flag.Bool(\"jsonSimpleReport\", false, \"print out a simple report as json, false by default\")\n\treportFile := flag.String(\"reportFile\", \"\", \"the file destination path for report file - if given, the prefix of the file will be the scanned onion service. If not given, the report will be written to stdout\")\n\tjsonReport := flag.Bool(\"jsonReport\", false, \"print out a json report providing a detailed report of the scan.\")\n\tverbose := flag.Bool(\"verbose\", false, \"print out a verbose log output of the scan\")\n\tdirectoryDepth := flag.Int(\"depth\", 100, \"depth of directory scan recursion (default: 100)\")\n\tfingerprint := flag.Bool(\"fingerprint\", true, \"true disables some deeper scans e.g. directory probing with the aim of just getting a fingerprint of the service.\")\n\tlist := flag.String(\"list\", \"\", \"If provided OnionScan will attempt to read from the given list, rather than the provided hidden service\")\n\ttimeout := flag.Int(\"timeout\", 120, \"read timeout for connecting to onion services\")\n\tbatch := flag.Int(\"batch\", 10, \"number of onions to scan concurrently\")\n\tdbdir := flag.String(\"dbdir\", \"./onionscandb\", \"The directory where the crawl database will be stored\")\n\tcrawlconfigdir := flag.String(\"crawlconfigdir\", \"\", \"A directory where crawl configurations are stored\")\n\tscans := flag.String(\"scans\", \"\", \"a comma-separated list of scans to run e.g. web,tls,... (default: run all)\")\n\twebport := flag.Int(\"webport\", 8080, \"if given, onionscan will expose a webserver on localhost:[port] to enabled searching of the database\")\n\tmode := flag.String(\"mode\", \"scan\", \"one of scan or analysis. In analysis mode, webport must be set.\")\n\tcookiestring := flag.String(\"cookie\", \"\", \"if provided, onionscan will use this cookie\")\n\n\tflag.Parse()\n\n\tif (len(flag.Args()) != 1 && *list == \"\") && *mode != \"analysis\" {\n\t\tflag.Usage()\n\t\tos.Exit(1)\n\t}\n\n\tonionScan := new(onionscan.OnionScan)\n\n\tvar scanslist []string\n\tif *scans != \"\" {\n\t\tscanslist = strings.Split(*scans, \",\")\n\t} else {\n\t\tscanslist = onionScan.GetAllActions()\n\t}\n\n\tonionScan.Config = config.Configure(*torProxyAddress, *directoryDepth, *fingerprint, *timeout, *dbdir, scanslist, *crawlconfigdir, *cookiestring, *verbose)\n\n\tif *mode == \"scan\" {\n\t\tif !*simpleReport && !*jsonReport && !*jsonSimpleReport {\n\t\t\tlog.Fatalf(\"You must set one of --simpleReport or --jsonReport or --jsonSimpleReport in scan mode\")\n\t\t}\n\n\t\tproxyStatus := utils.CheckTorProxy(*torProxyAddress)\n\t\tif proxyStatus != utils.ProxyStatusOK {\n\t\t\tlog.Fatalf(\"%s, is the --torProxyAddress setting correct?\", utils.ProxyStatusMessage(proxyStatus))\n\t\t}\n\n\t\tonionsToScan := []string{}\n\t\tif *list == \"\" {\n\t\t\tonionsToScan = append(onionsToScan, flag.Args()[0])\n\t\t\tlog.Printf(\"Starting Scan of %s\\n\", flag.Args()[0])\n\t\t} else {\n\t\t\tcontent, err := ioutil.ReadFile(*list)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"Could not read onion file %s\\n\", *list)\n\t\t\t}\n\t\t\tonions := strings.Split(string(content), \"\\n\")\n\t\t\tfor _, onion := range onions[0 : len(onions)-1] {\n\t\t\t\tonionsToScan = append(onionsToScan, onion)\n\t\t\t}\n\t\t\tlog.Printf(\"Starting Scan of %d onion services\\n\", len(onionsToScan))\n\t\t}\n\t\tlog.Printf(\"This might take a few minutes..\\n\\n\")\n\t\tif *webport > 0 {\n\t\t\tgo doScanMode(onionScan, onionsToScan, *batch, *reportFile, *simpleReport, *jsonReport, *jsonSimpleReport)\n\t\t} else {\n\t\t\tdoScanMode(onionScan, onionsToScan, *batch, *reportFile, *simpleReport, *jsonReport, *jsonSimpleReport)\n\t\t}\n\t}\n\n\t// Start up the web ui.\n\twebui := new(webui.WebUI)\n\tif *webport > 0 {\n\t\tgo webui.Listen(onionScan.Config, *webport)\n\t\t<-webui.Done\n\t}\n}\n\n// do_scan_mode prepares a pipeline of processes this run is managing and then\n// periodically sends new onions through the pipeline - no more than `batch`\n// onions are processed simultaneously.\nfunc doScanMode(onionScan *onionscan.OnionScan, onionsToScan []string, batch int, reportFile string, simpleReport bool, jsonReport bool, jsonSimpleReport bool) {\n\treports := make(chan *report.OnionScanReport)\n\n\tpipeline := new(onionscan.Pipeline)\n\tpipeline.Init(reports)\n\n\t// Add Crawlers\n\tpipeline.AddStep(onionScan)\n\n\t// Extract Identifiers\n\teis := new(deanonymization.ExtractIdentifierStep)\n\teis.Init(onionScan.Config)\n\tpipeline.AddStep(eis)\n\n\t// Publish to a Sink\n\tif jsonReport {\n\t\tstep := new(steps.JSONReportWriter)\n\t\tstep.Init(reportFile)\n\t\tpipeline.AddStep(step)\n\t} else {\n\t\ttermWidth, _, err := terminal.GetSize(int(os.Stdin.Fd()))\n\t\tif err != nil {\n\t\t\ttermWidth = 80\n\t\t}\n\t\tstep := new(steps.SimpleReportWriter)\n\t\tstep.Init(reportFile, jsonSimpleReport, termWidth-1)\n\t\tpipeline.AddStep(step)\n\t}\n\n\tcount := 0\n\tif batch > len(onionsToScan) {\n\t\tbatch = len(onionsToScan)\n\t}\n\n\t// Run an initial batch of 100 requests (or less...)\n\tfor count < batch {\n\t\tgo pipeline.Execute(onionsToScan[count])\n\t\tcount++\n\t}\n\n\treceived := 0\n\tfor received < len(onionsToScan) {\n\t\t// TODO: This will later be used to provide stats to the webui\n\t\tosreport := <-reports\n\n\t\tif osreport.Error != nil {\n\t\t\tonionScan.Config.LogError(osreport.Error)\n\t\t}\n\n\t\t// After the initial batch, it's one in one out to prevent proxy overload.\n\t\tif count < len(onionsToScan) {\n\t\t\t// TODO: Make onionsToScan a priority queue and take the next\n\t\t\t// most important one - this will allow us to submit new jobs from\n\t\t\t// the web ui (that should take precedence over the background jobs)\n\t\t\tgo pipeline.Execute(onionsToScan[count])\n\t\t\tcount++\n\t\t}\n\t\treceived++\n\t}\n}\n"
        },
        {
          "name": "model",
          "type": "tree",
          "content": null
        },
        {
          "name": "onionscan",
          "type": "tree",
          "content": null
        },
        {
          "name": "protocol",
          "type": "tree",
          "content": null
        },
        {
          "name": "report",
          "type": "tree",
          "content": null
        },
        {
          "name": "spider",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "webui",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}