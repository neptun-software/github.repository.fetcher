{
  "metadata": {
    "timestamp": 1736567381183,
    "page": 987,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gotestyourself/gotestsum",
      "stars": 2145,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03125,
          "content": "vendor/\ndist/\njunit.xml\n.plsdo/\n"
        },
        {
          "name": ".project",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.57421875,
          "content": "   Copyright The gotestsum Authors.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.404296875,
          "content": "# gotestsum\n\n`gotestsum` runs tests using `go test -json`, prints formatted test output, and a summary of the test run.\nIt is designed to work well for both local development, and for automation like CI.\n`gotestsum` is [used by](#who-uses-gotestsum) some of the most popular Go projects.\n\n## Install\n\nDownload a binary from [releases](https://github.com/gotestyourself/gotestsum/releases), or build from\nsource with `go install gotest.tools/gotestsum@latest`. To run without installing use\n`go run gotest.tools/gotestsum@latest`.\n\n## Documentation\n\n**Core features**\n- Change the [test output format](#output-format), from compact to verbose with color highlighting.\n- Print a [summary](#summary) of the test run after running all the tests.\n- Use any [`go test` flag](#custom-go-test-command),\n  run a script with [`--raw-command`](#custom-go-test-command),\n  or [run a compiled test binary](#executing-a-compiled-test-binary).\n\n**CI and Automation**\n- [`--junitfile`](#junit-xml-output) - write a JUnit XML file for integration with CI systems.\n- [`--jsonfile`](#json-file-output) - write all the [test2json](https://pkg.go.dev/cmd/test2json) input received by `gotestsum` to a file. The file\n  can be used as input to [`gotestsum tool slowest`](#finding-and-skipping-slow-tests), or as a way to\n  store the full verbose output of tests when less verbose output is printed to stdout using a compact [`--format`](#output-format).\n- [`--rerun-fails`](#re-running-failed-tests) - run failed (possibly flaky) tests again to avoid re-running the\n  entire suite. Re-running individual tests can save significant time when working with flaky test suites.\n\n**Local Development**\n- [`--watch`](#run-tests-when-a-file-is-saved) - every time a `.go` file is saved run the tests for the package that changed.\n- [`--post-run-command`](#post-run-command) - run a command after the tests, can be used for desktop notification of the test run.\n- [`gotestsum tool slowest`](#finding-and-skipping-slow-tests) - find the slowest tests, or automatically update the source code of\n  the slowest tests to add a conditional `t.Skip` statements. This statement allows you to skip the slowest tests using `gotestsum -- -short ./...`.\n\n\n### Output Format\n\nThe `--format` flag or `GOTESTSUM_FORMAT` environment variable set the format that\nis used to print the test names, and possibly test output, as the tests run. Most\noutputs use color to highlight pass, fail, or skip.\n\nThe `--format-icons` flag changes the icons used by `pkgname` and `testdox` formats.\nYou can set the `GOTESTSUM_FORMAT_ICONS` environment variable, instead of the flag.\nThe nerdfonts icons requires a font from [Nerd Fonts](https://www.nerdfonts.com/).\n\nCommonly used formats (see `--help` for a full list):\n\n * `dots` - print a character for each test.\n * `pkgname` (default) - print a line for each package.\n * `testname` - print a line for each test and package.\n * `testdox` - print a sentence for each test using [gotestdox](https://github.com/bitfield/gotestdox).\n * `standard-quiet` - the standard `go test` format.\n * `standard-verbose` - the standard `go test -v` format.\n\nHave an idea for a new format?\nPlease [share it on github](https://github.com/gotestyourself/gotestsum/issues/new)!\n\n#### Demo\n\nA demonstration of three `--format` options.\n\n![Demo](https://user-images.githubusercontent.com/442180/182284939-e08a0aa5-4504-4e30-9e88-207ef47f4537.gif)\n<br /><sup>[Source](https://github.com/gotestyourself/gotestsum/tree/readme-demo/scripts)</sup>\n\n### Summary\n\nFollowing the formatted output is a summary of the test run. The summary includes:\n\n * The test output, and elapsed time, for any test that fails or is skipped.\n * The build errors for any package that fails to build.\n * A `DONE` line with a count of tests run, tests skipped, tests failed, package build errors,\n   and the elapsed time including time to build.\n\n   ```\n   DONE 101 tests[, 3 skipped][, 2 failures][, 1 error] in 0.103s\n   ```\n\nTo hide parts of the summary use `--hide-summary section`.\n\n\n**Example: hide skipped tests in the summary**\n```\ngotestsum --hide-summary=skipped\n```\n\n**Example: hide everything except the DONE line**\n```\ngotestsum --hide-summary=skipped,failed,errors,output\n# or\ngotestsum --hide-summary=all\n```\n\n**Example: hide test output in the summary, only print names of failed and skipped tests\nand errors**\n```\ngotestsum --hide-summary=output\n```\n\n### JUnit XML output\n\nWhen the `--junitfile` flag or `GOTESTSUM_JUNITFILE` environment variable are set\nto a file path, `gotestsum` will write a test report, in JUnit XML format, to the file.\nThis file can be used to integrate with CI systems.\n\n```\ngotestsum --junitfile unit-tests.xml\n```\n\nIf the package names in the `testsuite.name` or `testcase.classname` fields do not\nwork with your CI system these values can be customized using the\n`--junitfile-testsuite-name`, or `--junitfile-testcase-classname` flags. These flags\naccept the following values:\n\n* `short` - the base name of the package (the single term specified by the\n  package statement).\n* `relative` - a package path relative to the root of the repository\n* `full` - the full package path (default)\n\n\nNote: If Go is not installed, or the `go` binary is not in `PATH`, the `GOVERSION`\nenvironment variable can be set to remove the \"failed to lookup go version for junit xml\"\nwarning.\n\n### JSON file output\n\nWhen the `--jsonfile` flag or `GOTESTSUM_JSONFILE` environment variable are set\nto a file path, `gotestsum` will write a line-delimited JSON file with all the\n[test2json](https://golang.org/cmd/test2json/#hdr-Output_Format)\noutput that was written by `go test -json`. This file can be used to compare test\nruns, or find flaky tests.\n\n```\ngotestsum --jsonfile test-output.log\n```\n\n### Post Run Command\n\nThe `--post-run-command` flag may be used to execute a command after the\ntest run has completed. The binary will be run with the following environment\nvariables set:\n\n```\nGOTESTSUM_ELAPSED       # test run time in seconds (ex: 2.45s)\nGOTESTSUM_FORMAT        # gotestsum format (ex: pkgname)\nGOTESTSUM_JSONFILE      # path to the jsonfile, empty if no file path was given\nGOTESTSUM_JUNITFILE     # path to the junit.xml file, empty if no file path was given\nTESTS_ERRORS            # number of errors\nTESTS_FAILED            # number of failed tests\nTESTS_SKIPPED           # number of skipped tests\nTESTS_TOTAL             # number of tests run\n```\n\nTo get more details about the test run, such as failure messages or the full list of failed\ntests, run `gotestsum` with either a `--jsonfile` or `--junitfile` and parse the\nfile from the post-run-command. The\n[gotestsum/testjson](https://pkg.go.dev/gotest.tools/gotestsum/testjson?tab=doc)\npackage may be used to parse the JSON file output.\n\n**Example: desktop notifications**\n\nFirst install the example notification command with `go get gotest.tools/gotestsum/contrib/notify`.\nThe command will be downloaded to `$GOPATH/bin` as `notify`. Note that this\nexample `notify` command only works on Linux with `notify-send` and on macOS with\n[terminal-notifer](https://github.com/julienXX/terminal-notifier) installed.\n\nOn Linux, you need to have some \"test-pass\" and \"test-fail\" icons installed in your icon theme.\nSome sample icons can be found in `contrib/notify`, and can be installed with `make install`.\n\nOn Windows, you can install [notify-send.exe](https://github.com/vaskovsky/notify-send)\nbut it does not support custom icons so will have to use the basic \"info\" and \"error\".\n\n```\ngotestsum --post-run-command notify\n```\n\n**Example: command with flags**\n\nPositional arguments or command line flags can be passed to the `--post-run-command` by\nquoting the whole command.\n\n```\ngotestsum --post-run-command \"notify me --date\"\n```\n\n**Example: printing slowest tests**\n\nThe post-run command can be combined with other `gotestsum` commands and tools to provide\na more detailed summary. This example uses `gotestsum tool slowest` to print the\nslowest 10 tests after the summary.\n\n```\ngotestsum \\\n  --jsonfile tmp.json.log \\\n  --post-run-command \"bash -c '\n    echo; echo Slowest tests;\n    gotestsum tool slowest --num 10 --jsonfile tmp.json.log'\"\n```\n\n### Re-running failed tests\n\nWhen the `--rerun-fails` flag is set, `gotestsum` will re-run any failed tests.\nThe tests will be re-run until each passes once, or the number of attempts\nexceeds the maximum attempts. Maximum attempts defaults to 2, and can be changed\nwith `--rerun-fails=n`.\n\nTo avoid re-running tests when there are real failures, the re-run will be\nskipped when there are too many test failures. By default this value is 10, and\ncan be changed with `--rerun-fails-max-failures=n`.\n\nNote that using `--rerun-fails` may require the use of other flags, depending on\nhow you specify args to `go test`:\n\n* when used with `--raw-command` the re-run will pass additional arguments to\n  the command. The first arg is a `-test.run` flag with a regex that matches the test to re-run,\n  and second is the name of a go package. These additional args can be passed to `go test`,\n  or a test binary.\n* when used with any `go test` args (anything after `--` on the command line), the list of\n  packages to test must be specified as a space separated list using the `--packages` arg.\n\n  **Example**\n\n  ```\n  gotestsum --rerun-fails --packages=\"./...\" -- -count=2\n  ```\n\n* if any of the `go test` args should be passed to the test binary, instead of\n  `go test` itself, the `-args` flag must be used to separate the two groups of\n  arguments. `-args` is a special flag that is understood by `go test` to indicate\n  that any following args should be passed directly to the test binary.\n\n  **Example**\n\n  ```\n  gotestsum --rerun-fails --packages=\"./...\" -- -count=2 -args -update-golden\n  ```\n\n\n### Custom `go test` command\n\nBy default `gotestsum` runs tests using the command `go test -json ./...`. You\ncan change the command with positional arguments after a `--`. You can change just the\ntest directory value (which defaults to `./...`) by setting the `TEST_DIRECTORY`\nenvironment variable.\n\nYou can use `--debug` to echo the command before it is run.\n\n**Example: set build tags**\n```\ngotestsum -- -tags=integration ./...\n```\n\n**Example: run tests in a single package**\n```\ngotestsum -- ./io/http\n```\n\n**Example: enable coverage**\n```\ngotestsum -- -coverprofile=cover.out ./...\n```\n\n**Example: run a script instead of `go test`**\n```\ngotestsum --raw-command -- ./scripts/run_tests.sh\n```\n\nNote: when using `--raw-command`, the script must follow a few rules about\nstdout and stderr output:\n\n* The stdout produced by the script must only contain the `test2json` output, or\n  `gotestsum` will fail. If it isn't possible to change the script to avoid\n  non-JSON output, you can use `--ignore-non-json-output-lines` (added in version 1.7.0)\n  to ignore non-JSON lines and write them to `gotestsum`'s stderr instead.\n* Any stderr produced by the script will be considered an error (this behaviour\n  is necessary because package build errors are only reported by writing to\n  stderr, not the `test2json` stdout). Any stderr produced by tests is not\n  considered an error (it will be in the `test2json` stdout).\n\n**Example: accept input from stdin**\n```\ncat out.json | gotestsum --raw-command -- cat\n```\n\n**Example: run tests with profiling enabled**\n\nUsing a `profile.sh` script like this:\n\n```sh\n#!/usr/bin/env bash\nset -eu\n\nfor pkg in $(go list \"$@\"); do\n    dir=\"$(go list -f '{{ .Dir }}' $pkg)\"\n    go test -json -cpuprofile=\"$dir/cpu.profile\" \"$pkg\"\ndone\n```\n\nYou can run:\n```\ngotestsum --raw-command ./profile.sh ./...\n```\n\n**Example: using `TEST_DIRECTORY`**\n```\nTEST_DIRECTORY=./io/http gotestsum\n```\n\n### Executing a compiled test binary\n\n`gotestsum` supports executing a compiled test binary (created with `go test -c`) by running\nit as a custom command.\n\nThe `-json` flag is handled by `go test` itself, it is not available when using a\ncompiled test binary, so `go tool test2json` must be used to get the output\nthat `gotestsum` expects.\n\n**Example: running `./binary.test`**\n\n```\ngotestsum --raw-command -- go tool test2json -t -p pkgname ./binary.test -test.v\n```\n\n`pkgname` is the name of the package being tested, it will show up in the test\noutput. `./binary.test` is the path to the compiled test binary. The `-test.v`\nmust be included so that `go tool test2json` receives all the output.\n\nTo execute a test binary without installing Go, see\n[running without go](./.project/docs/running-without-go.md).\n\n\n### Finding and skipping slow tests\n\n`gotestsum tool slowest` reads [test2json output][testjson],\nfrom a file or stdin, and prints the names and elapsed time of slow tests.\nThe tests are sorted from slowest to fastest.\n\n`gotestsum tool slowest` can also rewrite the source of tests slower than the\nthreshold, making it possible to optionally skip them.\n\nThe [test2json output][testjson] can be created with `gotestsum --jsonfile` or `go test -json`.\n\nSee `gotestsum tool slowest --help`.\n\n**Example: printing a list of tests slower than 500 milliseconds**\n\n```\n$ gotestsum --format dots --jsonfile json.log\n[.]····↷··↷·\n$ gotestsum tool slowest --jsonfile json.log --threshold 500ms\ngotest.tools/example TestSomething 1.34s\ngotest.tools/example TestSomethingElse 810ms\n```\n\n**Example: skipping slow tests with `go test --short`**\n\nAny test slower than 200 milliseconds will be modified to add:\n\n```go\nif testing.Short() {\n    t.Skip(\"too slow for testing.Short\")\n}\n```\n\n```sh\ngo test -json -short ./... | gotestsum tool slowest --skip-stmt \"testing.Short\" --threshold 200ms\n```\n\nUse `git diff` to see the file changes.\nThe next time tests are run using `--short` all the slow tests will be skipped.\n\n[testjson]: https://golang.org/cmd/test2json/\n\n\n### Run tests when a file is saved \n\nWhen the `--watch` flag is set, `gotestsum` will watch directories using\n[file system notifications](https://pkg.go.dev/github.com/fsnotify/fsnotify).\nWhen a Go file in one of those directories is modified, `gotestsum` will run the\ntests for the package that contains the changed file. By default all\ndirectories under the current\ndirectory with at least one `.go` file will be watched.\nUse the `--packages` flag to specify a different list.\n\nIf `--watch` is used with a command line that includes the name of one or more\npackages as command line arguments (ex: `gotestsum --watch -- ./...` or\n`gotestsum --watch -- ./extrapkg`), the\ntests in those packages will also be run when any file changes.\n\nWith the `--watch-chdir` flag, `gotestsum` will change the working directory\nto the directory with the modified file before running tests. Changing the\ndirectory is primarily useful when the project contains multiple Go modules.\nWithout this flag, `go test` will refuse to run tests for any package outside\nof the main Go module.\n\nWhile in watch mode, pressing some keys will perform an action:\n\n* `r` will run tests for the previous event.\n  Added in version 1.6.1.\n* `u` will run tests for the previous event, with the `-update` flag added.\n  Many [golden](https://gotest.tools/v3/golden) packages use this flag to automatically\n  update expected values of tests.\n  Added in version 1.8.1.\n* `d` will run tests for the previous event using `dlv test`, allowing you to \n  debug a test failure using [delve]. A breakpoint will automatically be added at\n  the first line of any tests which failed in the previous run. Additional\n  breakpoints can be added with [`runtime.Breakpoint`](https://golang.org/pkg/runtime/#Breakpoint)\n  or by using the delve command prompt.\n  Added in version 1.6.1.\n* `a` will run tests for all packages, by using `./...` as the package selector.\n  Added in version 1.7.0.\n* `l` will scan the directory list again, and if there are any new directories\n  which contain a file with a `.go` extension, they will be added to the watch\n  list.\n  Added in version 1.7.0.\n\nNote that [delve] must be installed in order to use debug (`d`).\n\n[delve]: https://github.com/go-delve/delve\n\n**Example: run tests for a package when any file in that package is saved**\n```\ngotestsum --watch --format testname\n```\n\n## Who uses gotestsum?\n\nThe projects below use (or have used) gotestsum.\n\n* [kubernetes](https://github.com/kubernetes/kubernetes/blob/master/hack/tools/tools.go)\n* [moby](https://github.com/moby/moby/blob/master/hack/test/unit) (aka Docker)\n* [etcd](https://github.com/etcd-io/etcd/blob/main/tools/mod/tools.go)\n* [hashicorp/vault](https://github.com/hashicorp/vault/blob/main/tools/tools.go)\n* [hashicorp/consul](https://github.com/hashicorp/consul/blob/main/.github/workflows/reusable-unit.yml)\n* [prometheus](https://github.com/prometheus/prometheus/blob/main/Makefile.common)\n* [minikube](https://github.com/kubernetes/minikube/blob/master/hack/jenkins/common.ps1)\n* [influxdb](https://github.com/influxdata/influxdb/blob/master/scripts/ci/build-tests.sh)\n* [pulumi](https://github.com/pulumi/pulumi/blob/master/.github/workflows/ci.yml)\n* [grafana/k6](https://github.com/grafana/k6/issues/1986#issuecomment-996625874)\n* [grafana/loki](https://github.com/grafana/loki/blob/main/loki-build-image/Dockerfile)\n* [telegraf](https://github.com/influxdata/telegraf/blob/master/.circleci/config.yml)\n* [containerd](https://github.com/containerd/containerd/blob/main/.cirrus.yml)\n* [linkerd2](https://github.com/linkerd/linkerd2/blob/main/justfile)\n* [elastic/go-elasticsearch](https://github.com/elastic/go-elasticsearch/blob/main/Makefile)\n* [microsoft/hcsshim](https://github.com/microsoft/hcsshim/blob/main/.github/workflows/ci.yml)\n* [pingcap/tidb](https://github.com/pingcap/tidb/blob/master/Makefile)\n* [dex](https://github.com/dexidp/dex/blob/master/Makefile)\n* [coder](https://github.com/coder/coder/blob/main/Makefile)\n* [docker/cli](https://github.com/docker/cli/blob/master/Makefile)\n* [mattermost](https://github.com/mattermost/mattermost/blob/master/server/Makefile)\n* [gofiber/fiber](https://github.com/gofiber/fiber/blob/main/.github/workflows/test.yml)\n\nPlease open a GitHub issue or pull request to add or remove projects from this list.\n\n## Development\n\n[![Godoc](https://godoc.org/gotest.tools/gotestsum?status.svg)](https://pkg.go.dev/gotest.tools/gotestsum?tab=subdirectories)\n[![CircleCI](https://circleci.com/gh/gotestyourself/gotestsum/tree/main.svg?style=shield)](https://circleci.com/gh/gotestyourself/gotestsum/tree/main)\n[![Go Recipes](https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/badge.svg?raw=true)](https://github.com/nikolaydubina/go-recipes)\n[![Go Reportcard](https://goreportcard.com/badge/gotest.tools/gotestsum)](https://goreportcard.com/report/gotest.tools/gotestsum)\n\n\nPull requests and bug reports are welcome! Please open an issue first for any\nbig changes.\n\n## Thanks\n\nThis package is heavily influenced by the [pytest](https://docs.pytest.org) test runner for `python`.\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "do",
          "type": "blob",
          "size": 2.3505859375,
          "content": "#!/usr/bin/env bash\nset -o errexit -o nounset -o pipefail\n\ndeclare -A help\n\nbinary() {\n    mkdir -p dist\n    go build -o dist/gotestsum .\n}\n\nbinary-static() {\n    echo \"building static binary: dist/gotestsum\"\n    CGO_ENABLED=0 binary\n}\n\nupdate-golden() {\n    gotestsum -- ./... -update\n}\n\nlint() {\n    golangci-lint run -v --config .project/golangci-lint.yml\n}\n\ngo-mod-tidy() {\n    go mod tidy\n    git diff --stat --exit-code go.mod go.sum\n}\n\nhelp[shell]='Run a shell in a golang docker container.\n\nEnv vars:\n\nGOLANG_VERSION - the docker image tag used to build the image.\n'\nshell() {\n    local image; image=\"$(_docker-build-dev)\"\n    docker run \\\n        --tty --interactive --rm \\\n        -v \"$PWD:/work\" \\\n        -v ~/.cache/go-build:/root/.cache/go-build \\\n        -v ~/go/pkg/mod:/go/pkg/mod \\\n        -w /work \\\n        \"$image\" \\\n        \"${@-bash}\"\n}\n\n_docker-build-dev() {\n    set -e\n    local idfile=\".plsdo/docker-build-dev-image-id-${GOLANG_VERSION-default}\"\n    local dockerfile=.project/Dockerfile\n    local tag=gotest.tools/gotestsum/builder\n    if [ -f \"$idfile\" ] && [ \"$dockerfile\" -ot \"$idfile\" ]; then\n        cat \"$idfile\"\n        return 0\n    fi\n\n    mkdir -p .plsdo\n    >&2 docker build \\\n        --iidfile \"$idfile\"  \\\n        --file \"$dockerfile\" \\\n        --build-arg \"UID=$UID\" \\\n        --build-arg GOLANG_VERSION \\\n        --target \"dev\" \\\n        .plsdo\n    cat \"$idfile\"\n}\n\nhelp[godoc]=\"Run godoc locally to preview package documentation.\"\ngodoc() {\n    local url; url=\"http://localhost:6060/pkg/$(go list)/\"\n    command -v xdg-open && xdg-open \"$url\" &\n    command -v open && open \"$url\" &\n    command godoc -http=:6060\n}\n\nhelp[list]=\"Print the list of tasks\"\nlist() {\n    declare -F | awk '{print $3}' | grep -v '^_'\n}\n\n_plsdo_help() {\n    local topic=\"${1-}\"\n    # print help for the topic\n    if [ -n \"$topic\" ]; then\n        if ! command -v \"$topic\" > /dev/null ; then\n            >&2 echo \"No such task: $topic\"\n            return 1\n        fi\n\n        printf \"\\nUsage:\\n  %s %s\\n\\n%s\\n\" \"$0\" \"$topic\" \"${help[$topic]-}\"\n        return 0\n    fi\n\n    # print list of tasks and their help line.\n    [ -n \"${banner-}\" ] && echo \"$banner\" && echo\n    for i in $(list); do\n        printf \"%-12s\\t%s\\n\" \"$i\" \"${help[$i]-}\" | head -1\n    done\n}\n\n_plsdo_run() {\n    case \"${1-}\" in\n    \"\"|help)\n        _plsdo_help \"${2-}\" ;;\n    *)\n        \"$@\" ;;\n    esac\n}\n\n_plsdo_run \"$@\"\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.5908203125,
          "content": "module gotest.tools/gotestsum\n\ngo 1.21\n\nrequire (\n\tgithub.com/bitfield/gotestdox v0.2.2\n\tgithub.com/dnephin/pflag v1.0.7\n\tgithub.com/fatih/color v1.17.0\n\tgithub.com/fsnotify/fsnotify v1.7.0\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510\n\tgolang.org/x/sync v0.8.0\n\tgolang.org/x/sys v0.25.0\n\tgolang.org/x/term v0.24.0\n\tgolang.org/x/tools v0.24.0\n\tgotest.tools/v3 v3.5.1\n)\n\nrequire (\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgolang.org/x/mod v0.20.0 // indirect\n\tgolang.org/x/text v0.17.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 2.888671875,
          "content": "github.com/bitfield/gotestdox v0.2.2 h1:x6RcPAbBbErKLnapz1QeAlf3ospg8efBsedU93CDsnE=\ngithub.com/bitfield/gotestdox v0.2.2/go.mod h1:D+gwtS0urjBrzguAkTM2wodsTQYFHdpx8eqRJ3N+9pY=\ngithub.com/dnephin/pflag v1.0.7 h1:oxONGlWxhmUct0YzKTgrpQv9AUA1wtPBn7zuSjJqptk=\ngithub.com/dnephin/pflag v1.0.7/go.mod h1:uxE91IoWURlOiTUIA8Mq5ZZkAv3dPUfZNaT80Zm7OQE=\ngithub.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=\ngithub.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 h1:El6M4kTTCOh6aBiKaUGG7oYTSPP8MxqL4YI3kZKwcP4=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510/go.mod h1:pupxD2MaaD3pAXIBCelhxNneeOaAeabZDe5s4K6zSpQ=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/rogpeppe/go-internal v1.11.0 h1:cWPaGQEPrBb5/AsnsZesgZZ9yb1OQ+GOISoDNXVBh4M=\ngithub.com/rogpeppe/go-internal v1.11.0/go.mod h1:ddIwULY96R17DhadqLgMfk9H9tvdUzkipdSkR5nkCZA=\ngolang.org/x/mod v0.20.0 h1:utOm6MM3R3dnawAiJgn0y+xvuYRsm1RKM/4giyfDgV0=\ngolang.org/x/mod v0.20.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.25.0 h1:r+8e+loiHxRqhXVl6ML1nO3l1+oFoWbnlu2Ehimmi34=\ngolang.org/x/sys v0.25.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.24.0 h1:Mh5cbb+Zk2hqqXNO7S1iTjEphVL+jb8ZWaqh/g+JWkM=\ngolang.org/x/term v0.24.0/go.mod h1:lOBK/LVxemqiMij05LGJ0tzNr8xlmwBRJ81PX6wVLH8=\ngolang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=\ngolang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/tools v0.24.0 h1:J1shsA93PJUEVaUSaay7UXAyE8aimq3GW0pjlolpa24=\ngolang.org/x/tools v0.24.0/go.mod h1:YhNqVBIfWHdzvTLs0d8LCuMhkKUgSUKldakyV7W/WDQ=\ngotest.tools/v3 v3.5.1 h1:EENdUnS3pdur5nybKYIh2Vfgc8IUNBjxDPSjtiJcOzU=\ngotest.tools/v3 v3.5.1/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 1.650390625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"gotest.tools/gotestsum/cmd\"\n\t\"gotest.tools/gotestsum/cmd/tool/matrix\"\n\t\"gotest.tools/gotestsum/cmd/tool/slowest\"\n\t\"gotest.tools/gotestsum/internal/log\"\n)\n\nfunc main() {\n\terr := route(os.Args)\n\tswitch {\n\tcase err == nil:\n\t\treturn\n\tcase cmd.IsExitCoder(err):\n\t\t// go test should already report the error to stderr, exit with\n\t\t// the same status code\n\t\tos.Exit(cmd.ExitCodeWithDefault(err))\n\tdefault:\n\t\tlog.Error(err.Error())\n\t\tos.Exit(3)\n\t}\n}\n\nfunc route(args []string) error {\n\tname := args[0]\n\tnext, rest := nextArg(args[1:])\n\tswitch next {\n\tcase \"help\", \"?\":\n\t\treturn cmd.Run(name, []string{\"--help\"})\n\tcase \"tool\":\n\t\treturn toolRun(name+\" \"+next, rest)\n\tdefault:\n\t\treturn cmd.Run(name, args[1:])\n\t}\n}\n\n// nextArg splits args into the next positional argument and any remaining args.\nfunc nextArg(args []string) (string, []string) {\n\tswitch len(args) {\n\tcase 0:\n\t\treturn \"\", nil\n\tcase 1:\n\t\treturn args[0], nil\n\tdefault:\n\t\treturn args[0], args[1:]\n\t}\n}\n\nfunc toolRun(name string, args []string) error {\n\tusage := func(name string) string {\n\t\treturn fmt.Sprintf(`Usage: %[1]s COMMAND [flags]\n\nCommands:\n    %[1]s slowest      find or skip the slowest tests\n    %[1]s ci-matrix    use previous test runtime to place packages into optimal buckets\n\nUse '%[1]s COMMAND --help' for command specific help.\n`, name)\n\t}\n\n\tnext, rest := nextArg(args)\n\tswitch next {\n\tcase \"\", \"help\", \"?\":\n\t\tfmt.Println(usage(name))\n\t\treturn nil\n\tcase \"slowest\":\n\t\treturn slowest.Run(name+\" \"+next, rest)\n\tcase \"ci-matrix\":\n\t\treturn matrix.Run(name+\" \"+next, rest)\n\tdefault:\n\t\tfmt.Fprintln(os.Stderr, usage(name))\n\t\treturn fmt.Errorf(\"invalid command: %v %v\", name, next)\n\t}\n}\n"
        },
        {
          "name": "testjson",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}