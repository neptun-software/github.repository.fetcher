{
  "metadata": {
    "timestamp": 1736567081643,
    "page": 670,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "shadowsocks/v2ray-plugin",
      "stars": 2721,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.02734375,
          "content": "v2ray-plugin*\n/bin/\n/.idea/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.12890625,
          "content": "MIT License\n\nCopyright (c) 2019 by Max Lv <max.c.lv@gmail.com>  \nCopyright (C) 2019 by Mygod Studio <contact-v2ray-plugin@mygod.be>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6455078125,
          "content": "## Yet another SIP003 plugin for shadowsocks, based on [v2ray](https://github.com/v2fly/v2ray-core)\n\n[![CircleCI](https://circleci.com/gh/shadowsocks/v2ray-plugin.svg?style=shield)](https://circleci.com/gh/shadowsocks/v2ray-plugin)\n[![Releases](https://img.shields.io/github/downloads/shadowsocks/v2ray-plugin/total.svg)](https://github.com/shadowsocks/v2ray-plugin/releases)\n[![Language: Go](https://img.shields.io/badge/go-1.13+-blue.svg)](https://github.com/shadowsocks/v2ray-plugin/search?l=go)\n[![Go Report Card](https://goreportcard.com/badge/github.com/shadowsocks/v2ray-plugin)](https://goreportcard.com/report/github.com/shadowsocks/v2ray-plugin)\n[![License](https://img.shields.io/github/license/shadowsocks/v2ray-plugin.svg)](LICENSE)\n\n## Build\n\n* `go build`\n* Alternatively, you can grab the latest nightly from Circle CI by logging into Circle CI or adding `#artifacts` at the end of URL like such: https://circleci.com/gh/shadowsocks/v2ray-plugin/20#artifacts\n\n## Usage\n\nSee command line args for advanced usages.\n\n### Shadowsocks over websocket (HTTP)\n\nWarning: HTTP only provides a moderate (but lightweight) traffic obfuscation. Cautious users should refrain from using this mode.\n\nOn your server\n\n```sh\nss-server -c config.json -p 80 --plugin v2ray-plugin --plugin-opts \"server\"\n```\n\nOn your client\n\n```sh\nss-local -c config.json -p 80 --plugin v2ray-plugin\n```\n\n### Shadowsocks over websocket (HTTPS)\n\nOn your server\n\n```sh\nss-server -c config.json -p 443 --plugin v2ray-plugin --plugin-opts \"server;tls;host=mydomain.me\"\n```\n\nOn your client\n\n```sh\nss-local -c config.json -p 443 --plugin v2ray-plugin --plugin-opts \"tls;host=mydomain.me\"\n```\n\n### Shadowsocks over quic\n\nOn your server\n\n```sh\nss-server -c config.json -p 443 --plugin v2ray-plugin --plugin-opts \"server;mode=quic;host=mydomain.me\"\n```\n\nOn your client\n\n```sh\nss-local -c config.json -p 443 --plugin v2ray-plugin --plugin-opts \"mode=quic;host=mydomain.me\"\n```\n\n### Issue a cert for TLS and QUIC\n\n`v2ray-plugin` will look for TLS certificates signed by [acme.sh](https://github.com/acmesh-official/acme.sh) by default.\nHere's some sample commands for issuing a certificate using CloudFlare.\nYou can find commands for issuing certificates for other DNS providers at acme.sh.\n\n```sh\ncurl https://get.acme.sh | sh\n~/.acme.sh/acme.sh --issue --dns dns_cf -d mydomain.me\n```\n\nAlternatively, you can specify path to your certificates using option `cert` and `key`.\n\n### Use `certRaw` to pass certificate\n\nInstead of using `cert` to pass the certificate file, `certRaw` could be used to pass in PEM format certificate, that is the content between `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` without the line breaks.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.234375,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| latest  | :white_check_mark: |\n| else    | :x:                |\n\n## Reporting a Vulnerability\n\nPlease email to repo owner: Max Lv\n"
        },
        {
          "name": "args.go",
          "type": "blob",
          "size": 4.4833984375,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"sort\"\n\t\"strings\"\n)\n\nfunc isIPv6(str string) bool {\n\tip := net.ParseIP(str)\n\treturn ip != nil && strings.Contains(str, \":\")\n}\n\n// Key–value mappings for the representation of client and server options.\n\n// Args maps a string key to a list of values. It is similar to url.Values.\ntype Args map[string][]string\n\n// Get the first value associated with the given key. If there are any values\n// associated with the key, the value return has the value and ok is set to\n// true. If there are no values for the given key, value is \"\" and ok is false.\n// If you need access to multiple values, use the map directly.\nfunc (args Args) Get(key string) (value string, ok bool) {\n\tif args == nil {\n\t\treturn \"\", false\n\t}\n\tvals, ok := args[key]\n\tif !ok || len(vals) == 0 {\n\t\treturn \"\", false\n\t}\n\treturn vals[0], true\n}\n\n// Append value to the list of values for key.\nfunc (args Args) Add(key, value string) {\n\targs[key] = append(args[key], value)\n}\n\n// Return the index of the next unescaped byte in s that is in the term set, or\n// else the length of the string if no terminators appear. Additionally return\n// the unescaped string up to the returned index.\nfunc indexUnescaped(s string, term []byte) (int, string, error) {\n\tvar i int\n\tunesc := make([]byte, 0)\n\tfor i = 0; i < len(s); i++ {\n\t\tb := s[i]\n\t\t// A terminator byte?\n\t\tif bytes.IndexByte(term, b) != -1 {\n\t\t\tbreak\n\t\t}\n\t\tif b == '\\\\' {\n\t\t\ti++\n\t\t\tif i >= len(s) {\n\t\t\t\treturn 0, \"\", fmt.Errorf(\"nothing following final escape in %q\", s)\n\t\t\t}\n\t\t\tb = s[i]\n\t\t}\n\t\tunesc = append(unesc, b)\n\t}\n\treturn i, string(unesc), nil\n}\n\n// Parse SS_PLUGIN options from environment variables\nfunc parseEnv() (opts Args, err error) {\n\topts = make(Args)\n\tss_remote_host := os.Getenv(\"SS_REMOTE_HOST\")\n\tss_remote_port := os.Getenv(\"SS_REMOTE_PORT\")\n\tss_local_host := os.Getenv(\"SS_LOCAL_HOST\")\n\tss_local_port := os.Getenv(\"SS_LOCAL_PORT\")\n\tif len(ss_remote_host) == 0 {\n\t\treturn\n\t}\n\tif len(ss_remote_port) == 0 {\n\t\treturn\n\t}\n\tif len(ss_local_host) == 0 {\n\t\treturn\n\t}\n\tif len(ss_local_port) == 0 {\n\t\treturn\n\t}\n\n\topts.Add(\"remoteAddr\", ss_remote_host)\n\topts.Add(\"remotePort\", ss_remote_port)\n\topts.Add(\"localAddr\", ss_local_host)\n\topts.Add(\"localPort\", ss_local_port)\n\n\tss_plugin_options := os.Getenv(\"SS_PLUGIN_OPTIONS\")\n\tif len(ss_plugin_options) > 0 {\n\t\tother_opts, err := parsePluginOptions(ss_plugin_options)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfor k, v := range other_opts {\n\t\t\topts[k] = v\n\t\t}\n\t}\n\treturn opts, nil\n}\n\n// Parse a name–value mapping as from SS_PLUGIN_OPTIONS.\n//\n// \"<value> is a k=v string value with options that are to be passed to the\n// transport. semicolons, equal signs and backslashes must be escaped\n// with a backslash.\"\n// Example: secret=nou;cache=/tmp/cache;secret=yes\nfunc parsePluginOptions(s string) (opts Args, err error) {\n\topts = make(Args)\n\tif len(s) == 0 {\n\t\treturn\n\t}\n\ti := 0\n\tfor {\n\t\tvar key, value string\n\t\tvar offset, begin int\n\n\t\tif i >= len(s) {\n\t\t\tbreak\n\t\t}\n\t\tbegin = i\n\t\t// Read the key.\n\t\toffset, key, err = indexUnescaped(s[i:], []byte{'=', ';'})\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tif len(key) == 0 {\n\t\t\terr = fmt.Errorf(\"empty key in %q\", s[begin:i])\n\t\t\treturn\n\t\t}\n\t\ti += offset\n\t\t// End of string or no equals sign?\n\t\tif i >= len(s) || s[i] != '=' {\n\t\t\topts.Add(key, \"1\")\n\t\t\t// Skip the semicolon.\n\t\t\ti++\n\t\t\tcontinue\n\t\t}\n\t\t// Skip the equals sign.\n\t\ti++\n\t\t// Read the value.\n\t\toffset, value, err = indexUnescaped(s[i:], []byte{';'})\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\ti += offset\n\t\topts.Add(key, value)\n\t\t// Skip the semicolon.\n\t\ti++\n\t}\n\treturn opts, nil\n}\n\n// Escape backslashes and all the bytes that are in set.\nfunc backslashEscape(s string, set []byte) string {\n\tvar buf bytes.Buffer\n\tfor _, b := range []byte(s) {\n\t\tif b == '\\\\' || bytes.IndexByte(set, b) != -1 {\n\t\t\tbuf.WriteByte('\\\\')\n\t\t}\n\t\tbuf.WriteByte(b)\n\t}\n\treturn buf.String()\n}\n\n// Encode a name–value mapping so that it is suitable to go in the ARGS option\n// of an SMETHOD line. The output is sorted by key. The \"ARGS:\" prefix is not\n// added.\n//\n// \"Equal signs and commas [and backslashes] must be escaped with a backslash.\"\nfunc encodeSmethodArgs(args Args) string {\n\tif args == nil {\n\t\treturn \"\"\n\t}\n\n\tkeys := make([]string, 0, len(args))\n\tfor key := range args {\n\t\tkeys = append(keys, key)\n\t}\n\tsort.Strings(keys)\n\n\tescape := func(s string) string {\n\t\treturn backslashEscape(s, []byte{'=', ','})\n\t}\n\n\tvar pairs []string\n\tfor _, key := range keys {\n\t\tfor _, value := range args[key] {\n\t\t\tpairs = append(pairs, escape(key)+\"=\"+escape(value))\n\t\t}\n\t}\n\n\treturn strings.Join(pairs, \",\")\n}\n"
        },
        {
          "name": "build-release.sh",
          "type": "blob",
          "size": 2.8935546875,
          "content": "#!/usr/bin/env bash\n\nsum=\"sha1sum\"\n\nif ! hash sha1sum 2>/dev/null; then\n    if ! hash shasum 2>/dev/null; then\n        echo \"I can't see 'sha1sum' or 'shasum'\"\n        echo \"Please install one of them!\"\n        exit\n    fi\n    sum=\"shasum\"\nfi\n\n[[ -z $upx ]] && upx=\"echo pending\"\nif [[ $upx == \"echo pending\" ]] && hash upx 2>/dev/null; then\n    upx=\"upx -9\"\nfi\n\nVERSION=$(git describe --tags)\nLDFLAGS=\"-X main.VERSION=$VERSION -s -w -buildid=\"\n\nOSES=(linux darwin windows freebsd)\nARCHS=(amd64 386)\n\nmkdir bin\n\nfor os in ${OSES[@]}; do\n    for arch in ${ARCHS[@]}; do\n        # Go 1.15 drops support for 32-bit binaries on macOS, iOS, iPadOS, watchOS, and tvOS (the darwin/386 and darwin/arm ports)\n        # Reference URL: https://tip.golang.org/doc/go1.15#darwin\n        if [ \"$os\" == \"darwin\" ] && [ \"$arch\" == \"386\" ]; then\n            continue\n        fi\n        suffix=\"\"\n        if [ \"$os\" == \"windows\" ]; then\n            suffix=\".exe\"\n        fi\n        env CGO_ENABLED=0 GOOS=$os GOARCH=$arch go build -v -ldflags \"$LDFLAGS\" -o v2ray-plugin_${os}_${arch}${suffix}\n        $upx v2ray-plugin_${os}_${arch}${suffix} >/dev/null\n        tar -zcf bin/v2ray-plugin-${os}-${arch}-$VERSION.tar.gz v2ray-plugin_${os}_${arch}${suffix}\n        $sum bin/v2ray-plugin-${os}-${arch}-$VERSION.tar.gz\n    done\ndone\n\n# ARM\nARMS=(5 6 7)\nfor v in ${ARMS[@]}; do\n\tenv CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=$v go build -v -ldflags \"$LDFLAGS\" -o v2ray-plugin_linux_arm$v\ndone\n$upx v2ray-plugin_linux_arm* >/dev/null\ntar -zcf bin/v2ray-plugin-linux-arm-$VERSION.tar.gz v2ray-plugin_linux_arm*\n$sum bin/v2ray-plugin-linux-arm-$VERSION.tar.gz\n\n# ARM64 (ARMv8 or aarch64)\nenv CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -v -ldflags \"$LDFLAGS\" -o v2ray-plugin_linux_arm64\n$upx v2ray-plugin_linux_arm64 >/dev/null\ntar -zcf bin/v2ray-plugin-linux-arm64-$VERSION.tar.gz v2ray-plugin_linux_arm64\n$sum bin/v2ray-plugin-linux-arm64-$VERSION.tar.gz\n\n# Darwin ARM64\nenv CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -v -ldflags \"$LDFLAGS\" -o v2ray-plugin_darwin_arm64\n$upx v2ray-plugin_darwin_arm64 >/dev/null\ntar -zcf bin/v2ray-plugin-darwin-arm64-$VERSION.tar.gz v2ray-plugin_darwin_arm64\n$sum bin/v2ray-plugin-darwin-arm64-$VERSION.tar.gz\n\n# MIPS\nMIPSS=(mips mipsle)\nfor v in ${MIPSS[@]}; do\n\tenv CGO_ENABLED=0 GOOS=linux GOARCH=$v go build -v -ldflags \"$LDFLAGS\" -o v2ray-plugin_linux_$v\n\tenv CGO_ENABLED=0 GOOS=linux GOARCH=$v GOMIPS=softfloat go build -ldflags \"$LDFLAGS\" -o v2ray-plugin_linux_${v}_sf\ndone\n$upx v2ray-plugin_linux_mips* >/dev/null\ntar -zcf bin/v2ray-plugin-linux-mips-$VERSION.tar.gz v2ray-plugin_linux_mips*\n$sum bin/v2ray-plugin-linux-mips-$VERSION.tar.gz\n\n# MIPS64\nMIPS64S=(mips64 mips64le)\nfor v in ${MIPS64S[@]}; do\n\tenv CGO_ENABLED=0 GOOS=linux GOARCH=$v go build -v -ldflags \"$LDFLAGS\" -o v2ray-plugin_linux_$v\ndone\ntar -zcf bin/v2ray-plugin-linux-mips64-$VERSION.tar.gz v2ray-plugin_linux_mips64*\n$sum bin/v2ray-plugin-linux-mips64-$VERSION.tar.gz\n"
        },
        {
          "name": "errors.generated.go",
          "type": "blob",
          "size": 0.212890625,
          "content": "package main\n\nimport \"github.com/v2fly/v2ray-core/v5/common/errors\"\n\ntype errPathObjHolder struct{}\n\nfunc newError(values ...interface{}) *errors.Error {\n\treturn errors.New(values...).WithPathObj(errPathObjHolder{})\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.0400390625,
          "content": "module github.com/shadowsocks/v2ray-plugin\n\ngo 1.22.0\n\ntoolchain go1.23.2\n\nrequire (\n\tgithub.com/golang/protobuf v1.5.4\n\tgithub.com/v2fly/v2ray-core/v5 v5.22.0\n\tgoogle.golang.org/protobuf v1.35.1\n)\n\nrequire (\n\tgithub.com/adrg/xdg v0.5.3 // indirect\n\tgithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 // indirect\n\tgithub.com/go-task/slim-sprig/v3 v3.0.0 // indirect\n\tgithub.com/google/pprof v0.0.0-20241101162523-b92577c0c142 // indirect\n\tgithub.com/gorilla/websocket v1.5.3 // indirect\n\tgithub.com/miekg/dns v1.1.62 // indirect\n\tgithub.com/onsi/ginkgo/v2 v2.21.0 // indirect\n\tgithub.com/pires/go-proxyproto v0.8.0 // indirect\n\tgithub.com/quic-go/quic-go v0.48.1 // indirect\n\tgo.uber.org/mock v0.5.0 // indirect\n\tgolang.org/x/crypto v0.28.0 // indirect\n\tgolang.org/x/exp v0.0.0-20241009180824-f66d83c29e7c // indirect\n\tgolang.org/x/mod v0.21.0 // indirect\n\tgolang.org/x/net v0.30.0 // indirect\n\tgolang.org/x/sync v0.8.0 // indirect\n\tgolang.org/x/sys v0.26.0 // indirect\n\tgolang.org/x/text v0.19.0 // indirect\n\tgolang.org/x/tools v0.26.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 11.05859375,
          "content": "github.com/adrg/xdg v0.4.0 h1:RzRqFcjH4nE5C6oTAxhBtoE2IRyjBSa62SCbyPidvls=\ngithub.com/adrg/xdg v0.4.0/go.mod h1:N6ag73EX4wyxeaoeHctc1mas01KZgsj5tYiAIwqJE/E=\ngithub.com/adrg/xdg v0.5.0 h1:dDaZvhMXatArP1NPHhnfaQUqWBLBsmx1h1HXQdMoFCY=\ngithub.com/adrg/xdg v0.5.0/go.mod h1:dDdY4M4DF9Rjy4kHPeNL+ilVF+p2lK8IdM9/rTSGcI4=\ngithub.com/adrg/xdg v0.5.3 h1:xRnxJXne7+oWDatRhR1JLnvuccuIeCoBu2rtuLqQB78=\ngithub.com/adrg/xdg v0.5.3/go.mod h1:nlTsY+NNiCBGCK2tpm09vRqfVzrc2fLmXGpBLF0zlTQ=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 h1:tfuBGBXKqDEevZMzYi5KSi8KkcZtzBcTgAUUtapy0OI=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572/go.mod h1:9Pwr4B2jHnOSGXyyzV8ROjYa2ojvAY6HCGYYfMoC3Ls=\ngithub.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=\ngithub.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/pprof v0.0.0-20230602150820-91b7bce49751 h1:hR7/MlvK23p6+lIw9SN1TigNLn9ZnF3W4SYRKq2gAHs=\ngithub.com/google/pprof v0.0.0-20230602150820-91b7bce49751/go.mod h1:Jh3hGz2jkYak8qXPD19ryItVnUgpgeqzdkY/D0EaeuA=\ngithub.com/google/pprof v0.0.0-20240727154555-813a5fbdbec8 h1:FKHo8hFI3A+7w0aUQuYXQ+6EN5stWmeY/AZqtM8xk9k=\ngithub.com/google/pprof v0.0.0-20240727154555-813a5fbdbec8/go.mod h1:K1liHPHnj73Fdn/EKuT8nrFqBihUSKXoLYU0BuatOYo=\ngithub.com/google/pprof v0.0.0-20241101162523-b92577c0c142 h1:sAGdeJj0bnMgUNVeUpp6AYlVdCt3/GdI3pGRqsNSQLs=\ngithub.com/google/pprof v0.0.0-20241101162523-b92577c0c142/go.mod h1:vavhavw2zAxS5dIdcRluK6cSGGPlZynqzFM8NdvU144=\ngithub.com/gorilla/websocket v1.5.1 h1:gmztn0JnHVt9JZquRuzLw3g4wouNVzKL15iLr/zn/QY=\ngithub.com/gorilla/websocket v1.5.1/go.mod h1:x3kM2JMyaluk02fnUJpQuwD2dCS5NDG2ZHL0uE0tcaY=\ngithub.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=\ngithub.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/miekg/dns v1.1.62 h1:cN8OuEF1/x5Rq6Np+h1epln8OiyPWV+lROx9LxcGgIQ=\ngithub.com/miekg/dns v1.1.62/go.mod h1:mvDlcItzm+br7MToIKqkglaGhlFMHJ9DTNNWONWXbNQ=\ngithub.com/onsi/ginkgo/v2 v2.10.0 h1:sfUl4qgLdvkChZrWCYndY2EAu9BRIw1YphNAzy1VNWs=\ngithub.com/onsi/ginkgo/v2 v2.10.0/go.mod h1:UDQOh5wbQUlMnkLfVaIUMtQ1Vus92oM+P2JX1aulgcE=\ngithub.com/onsi/ginkgo/v2 v2.20.0 h1:PE84V2mHqoT1sglvHc8ZdQtPcwmvvt29WLEEO3xmdZw=\ngithub.com/onsi/ginkgo/v2 v2.20.0/go.mod h1:lG9ey2Z29hR41WMVthyJBGUBcBhGOtoPF2VFMvBXFCI=\ngithub.com/onsi/ginkgo/v2 v2.21.0 h1:7rg/4f3rB88pb5obDgNZrNHrQ4e6WpjonchcpuBRnZM=\ngithub.com/onsi/ginkgo/v2 v2.21.0/go.mod h1:7Du3c42kxCUegi0IImZ1wUQzMBVecgIHjR1C+NkhLQo=\ngithub.com/pires/go-proxyproto v0.7.0 h1:IukmRewDQFWC7kfnb66CSomk2q/seBuilHBYFwyq0Hs=\ngithub.com/pires/go-proxyproto v0.7.0/go.mod h1:Vz/1JPY/OACxWGQNIRY2BeyDmpoaWmEP40O9LbuiFR4=\ngithub.com/pires/go-proxyproto v0.8.0 h1:5unRmEAPbHXHuLjDg01CxJWf91cw3lKHc/0xzKpXEe0=\ngithub.com/pires/go-proxyproto v0.8.0/go.mod h1:iknsfgnH8EkjrMeMyvfKByp9TiBZCKZM0jx2xmKqnVY=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/quic-go/quic-go v0.41.0 h1:aD8MmHfgqTURWNJy48IYFg2OnxwHT3JL7ahGs73lb4k=\ngithub.com/quic-go/quic-go v0.41.0/go.mod h1:qCkNjqczPEvgsOnxZ0eCD14lv+B2LHlFAB++CNOh9hA=\ngithub.com/quic-go/quic-go v0.43.0 h1:sjtsTKWX0dsHpuMJvLxGqoQdtgJnbAPWY+W+5vjYW/g=\ngithub.com/quic-go/quic-go v0.43.0/go.mod h1:132kz4kL3F9vxhW3CtQJLDVwcFe5wdWeJXXijhsO57M=\ngithub.com/quic-go/quic-go v0.46.0 h1:uuwLClEEyk1DNvchH8uCByQVjo3yKL9opKulExNDs7Y=\ngithub.com/quic-go/quic-go v0.46.0/go.mod h1:1dLehS7TIR64+vxGR70GDcatWTOtMX2PUtnKsjbTurI=\ngithub.com/quic-go/quic-go v0.48.1 h1:y/8xmfWI9qmGTc+lBr4jKRUWLGSlSigv847ULJ4hYXA=\ngithub.com/quic-go/quic-go v0.48.1/go.mod h1:yBgs3rWBOADpga7F+jJsb6Ybg1LSYiQvwWlLX+/6HMs=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/v2fly/v2ray-core/v5 v5.14.1 h1:b+NPseG+3cvLMMccgX7zFdCye/NstVABGOyuhG4XLDg=\ngithub.com/v2fly/v2ray-core/v5 v5.14.1/go.mod h1:Z57o2Vp+xgrf7EDFMDlZsickQuImRdQoDcqrO690zT0=\ngithub.com/v2fly/v2ray-core/v5 v5.16.1 h1:hIuRzCJhmRYqCA76hGiNLkAHopgbNt91L871wlJ/yUU=\ngithub.com/v2fly/v2ray-core/v5 v5.16.1/go.mod h1:3pWIBTmNagMKpzd9/QicXq/7JZCQt716GsGZdBNmYkU=\ngithub.com/v2fly/v2ray-core/v5 v5.22.0 h1:D/qQR7H3ZUp39OgPv3wv2JfKoJIUJsOewQoDeTyckeU=\ngithub.com/v2fly/v2ray-core/v5 v5.22.0/go.mod h1:SacdfJBbt53z6Fv78mL8j/C8kurqWdo7NO4BiLh9aKg=\ngo.uber.org/mock v0.3.0 h1:3mUxI1No2/60yUYax92Pt8eNOEecx2D3lcXZh2NEZJo=\ngo.uber.org/mock v0.3.0/go.mod h1:a6FSlNadKUHUa9IP5Vyt1zh4fC7uAwxMutEAscFbkZc=\ngo.uber.org/mock v0.4.0 h1:VcM4ZOtdbR4f6VXfiOpwpVJDL6lCReaZ6mw31wqh7KU=\ngo.uber.org/mock v0.4.0/go.mod h1:a6FSlNadKUHUa9IP5Vyt1zh4fC7uAwxMutEAscFbkZc=\ngo.uber.org/mock v0.5.0 h1:KAMbZvZPyBPWgD14IrIQ38QCyjwpvVVV6K/bHl1IwQU=\ngo.uber.org/mock v0.5.0/go.mod h1:ge71pBPLYDk7QIi1LupWxdAykm7KIEFchiOqd6z7qMM=\ngolang.org/x/crypto v0.17.0 h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=\ngolang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=\ngolang.org/x/crypto v0.22.0 h1:g1v0xeRhjcugydODzvb3mEM9SQ0HGp9s/nh3COQ/C30=\ngolang.org/x/crypto v0.22.0/go.mod h1:vr6Su+7cTlO45qkww3VDJlzDn0ctJvRgYbC2NvXHt+M=\ngolang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=\ngolang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=\ngolang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=\ngolang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=\ngolang.org/x/exp v0.0.0-20230725093048-515e97ebf090 h1:Di6/M8l0O2lCLc6VVRWhgCiApHV8MnQurBnFSHsQtNY=\ngolang.org/x/exp v0.0.0-20230725093048-515e97ebf090/go.mod h1:FXUEEKJgO7OQYeo8N01OfiKP8RXMtf6e8aTskBGqWdc=\ngolang.org/x/exp v0.0.0-20240808152545-0cdaa3abc0fa h1:ELnwvuAXPNtPk1TJRuGkI9fDTwym6AYBu0qzT8AcHdI=\ngolang.org/x/exp v0.0.0-20240808152545-0cdaa3abc0fa/go.mod h1:akd2r19cwCdwSwWeIdzYQGa/EZZyqcOdwWiwj5L5eKQ=\ngolang.org/x/exp v0.0.0-20241009180824-f66d83c29e7c h1:7dEasQXItcW1xKJ2+gg5VOiBnqWrJc+rq0DPKyvvdbY=\ngolang.org/x/exp v0.0.0-20241009180824-f66d83c29e7c/go.mod h1:NQtJDoLvd6faHhE7m4T/1IY708gDefGGjR/iUW8yQQ8=\ngolang.org/x/mod v0.13.0 h1:I/DsJXRlw/8l/0c24sM9yb0T4z9liZTduXvdAWYiysY=\ngolang.org/x/mod v0.13.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.16.0 h1:QX4fJ0Rr5cPQCF7O9lh9Se4pmwfwskqZfq5moyldzic=\ngolang.org/x/mod v0.16.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.20.0 h1:utOm6MM3R3dnawAiJgn0y+xvuYRsm1RKM/4giyfDgV0=\ngolang.org/x/mod v0.20.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.21.0 h1:vvrHzRwRfVKSiLrG+d4FMl/Qi4ukBCE6kZlTUkDYRT0=\ngolang.org/x/mod v0.21.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=\ngolang.org/x/net v0.19.0 h1:zTwKpTd2XuCqf8huc7Fo2iSy+4RHPd10s4KzeTnVr1c=\ngolang.org/x/net v0.19.0/go.mod h1:CfAk/cbD4CthTvqiEl8NpboMuiuOYsAr/7NOjZJtv1U=\ngolang.org/x/net v0.24.0 h1:1PcaxkF854Fu3+lvBIx5SYn9wRlBzzcnHZSiaFFAb0w=\ngolang.org/x/net v0.24.0/go.mod h1:2Q7sJY5mzlzWjKtYUEXSlBWCdyaioyXzRB2RtU8KVE8=\ngolang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=\ngolang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=\ngolang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=\ngolang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20211025201205-69cdffdb9359/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.15.0 h1:h48lPFYpsTvQJZF4EKyI4aLHaev3CxivZmv7yZig9pc=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.19.0 h1:q5f1RH2jigJ1MoAWp2KTp3gm5zAGFUTarQZ5U386+4o=\ngolang.org/x/sys v0.19.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=\ngolang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=\ngolang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=\ngolang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=\ngolang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/tools v0.14.0 h1:jvNa2pY0M4r62jkRQ6RwEZZyPcymeL9XZMLBbV7U2nc=\ngolang.org/x/tools v0.14.0/go.mod h1:uYBEerGOWcJyEORxN+Ek8+TT266gXkNlHdJBwexUsBg=\ngolang.org/x/tools v0.19.0 h1:tfGCXNR1OsFG+sVdLAitlpjAvD/I6dHDKnYrpEZUHkw=\ngolang.org/x/tools v0.19.0/go.mod h1:qoJWxmGSIBmAeriMx19ogtrEPrGtDbPK634QFIcLAhc=\ngolang.org/x/tools v0.24.0 h1:J1shsA93PJUEVaUSaay7UXAyE8aimq3GW0pjlolpa24=\ngolang.org/x/tools v0.24.0/go.mod h1:YhNqVBIfWHdzvTLs0d8LCuMhkKUgSUKldakyV7W/WDQ=\ngolang.org/x/tools v0.26.0 h1:v/60pFQmzmT9ExmjDv2gGIfi3OqfKoEP6I5+umXlbnQ=\ngolang.org/x/tools v0.26.0/go.mod h1:TPVVj70c7JJ3WCazhD8OdXcZg/og+b9+tH/KxylGwH0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.32.0 h1:pPC6BG5ex8PDFnkbrGU3EixyhKcQ2aDuBS36lqK/C7I=\ngoogle.golang.org/protobuf v1.32.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngoogle.golang.org/protobuf v1.34.0 h1:Qo/qEd2RZPCf2nKuorzksSknv0d3ERwp1vFG38gSmH4=\ngoogle.golang.org/protobuf v1.34.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngoogle.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=\ngoogle.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=\ngoogle.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=\ngoogle.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "log.go",
          "type": "blob",
          "size": 0.3837890625,
          "content": "// Copyright 2014 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// +build !android\n\npackage main\n\nimport \"log\"\n\nfunc logInit() {\n}\n\nfunc logFatal(v ...interface{}) {\n\tlog.Println(v...)\n}\n\nfunc logWarn(v ...interface{}) {\n\tlog.Println(v...)\n}\n\nfunc logInfo(v ...interface{}) {\n\tlog.Println(v...)\n}\n"
        },
        {
          "name": "log_android.go",
          "type": "blob",
          "size": 1.7099609375,
          "content": "// +build android\n\npackage main\n\n/*\n#cgo LDFLAGS: -landroid -llog\n\n#include <android/log.h>\n#include <stdlib.h>\n#include <string.h>\n*/\nimport \"C\"\n\nimport (\n\t\"fmt\"\n\t\"unsafe\"\n\n\talog \"github.com/v2fly/v2ray-core/v5/app/log\"\n\n\t\"github.com/v2fly/v2ray-core/v5/common\"\n\t\"github.com/v2fly/v2ray-core/v5/common/log\"\n\t\"github.com/v2fly/v2ray-core/v5/common/serial\"\n)\n\nvar (\n\tctag = C.CString(\"v2ray\")\n)\n\ntype androidLogger struct{}\n\nfunc (l *androidLogger) Handle(msg log.Message) {\n\tvar priority = C.ANDROID_LOG_FATAL // this value should never be used in client mode\n\tvar message string\n\tswitch msg := msg.(type) {\n\tcase *log.GeneralMessage:\n\t\tswitch msg.Severity {\n\t\tcase log.Severity_Error:\n\t\t\tpriority = C.ANDROID_LOG_ERROR\n\t\tcase log.Severity_Warning:\n\t\t\tpriority = C.ANDROID_LOG_WARN\n\t\tcase log.Severity_Info:\n\t\t\tpriority = C.ANDROID_LOG_INFO\n\t\tcase log.Severity_Debug:\n\t\t\tpriority = C.ANDROID_LOG_DEBUG\n\t\t}\n\t\tmessage = serial.ToString(msg.Content)\n\tdefault:\n\t\tmessage = msg.String()\n\t}\n\tcstr := C.CString(message)\n\tdefer C.free(unsafe.Pointer(cstr))\n\tC.__android_log_write(C.int(priority), ctag, cstr)\n}\n\nfunc logInit() {\n\tcommon.Must(alog.RegisterHandlerCreator(alog.LogType_Console, func(_ alog.LogType, _ alog.HandlerCreatorOptions) (log.Handler, error) {\n\t\treturn &androidLogger{}, nil\n\t}))\n}\n\nfunc logFatal(v ...interface{}) {\n\tcstr := C.CString(fmt.Sprintln(v...))\n\tdefer C.free(unsafe.Pointer(cstr))\n\tC.__android_log_write(C.ANDROID_LOG_FATAL, ctag, cstr)\n}\n\nfunc logWarn(v ...interface{}) {\n\t(&androidLogger{}).Handle(&log.GeneralMessage{Severity: log.Severity_Warning, Content: fmt.Sprintln(v...)})\n}\n\nfunc logInfo(v ...interface{}) {\n\t(&androidLogger{}).Handle(&log.GeneralMessage{Severity: log.Severity_Info, Content: fmt.Sprintln(v...)})\n}\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 10.9951171875,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"os/user\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"strings\"\n\t\"syscall\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"google.golang.org/protobuf/types/known/anypb\"\n\n\t_ \"github.com/v2fly/v2ray-core/v5/app/proxyman/inbound\"\n\t_ \"github.com/v2fly/v2ray-core/v5/app/proxyman/outbound\"\n\n\tcore \"github.com/v2fly/v2ray-core/v5\"\n\tvlog \"github.com/v2fly/v2ray-core/v5/app/log\"\n\tclog \"github.com/v2fly/v2ray-core/v5/common/log\"\n\n\t\"github.com/v2fly/v2ray-core/v5/app/dispatcher\"\n\t\"github.com/v2fly/v2ray-core/v5/app/proxyman\"\n\t\"github.com/v2fly/v2ray-core/v5/common/net\"\n\t\"github.com/v2fly/v2ray-core/v5/common/platform/filesystem\"\n\t\"github.com/v2fly/v2ray-core/v5/common/protocol\"\n\t\"github.com/v2fly/v2ray-core/v5/common/serial\"\n\t\"github.com/v2fly/v2ray-core/v5/proxy/dokodemo\"\n\t\"github.com/v2fly/v2ray-core/v5/proxy/freedom\"\n\t\"github.com/v2fly/v2ray-core/v5/transport/internet\"\n\t\"github.com/v2fly/v2ray-core/v5/transport/internet/quic\"\n\t\"github.com/v2fly/v2ray-core/v5/transport/internet/tls\"\n\t\"github.com/v2fly/v2ray-core/v5/transport/internet/websocket\"\n)\n\nvar (\n\tVERSION = \"custom\"\n\n\tvpn        = flag.Bool(\"V\", false, \"Run in VPN mode.\")\n\tfastOpen   = flag.Bool(\"fast-open\", false, \"Enable TCP fast open.\")\n\tlocalAddr  = flag.String(\"localAddr\", \"127.0.0.1\", \"local address to listen on.\")\n\tlocalPort  = flag.String(\"localPort\", \"1984\", \"local port to listen on.\")\n\tremoteAddr = flag.String(\"remoteAddr\", \"127.0.0.1\", \"remote address to forward.\")\n\tremotePort = flag.String(\"remotePort\", \"1080\", \"remote port to forward.\")\n\tpath       = flag.String(\"path\", \"/\", \"URL path for websocket.\")\n\thost       = flag.String(\"host\", \"cloudfront.com\", \"Hostname for server.\")\n\ttlsEnabled = flag.Bool(\"tls\", false, \"Enable TLS.\")\n\tcert       = flag.String(\"cert\", \"\", \"Path to TLS certificate file. Overrides certRaw. Default: ~/.acme.sh/{host}/fullchain.cer\")\n\tcertRaw    = flag.String(\"certRaw\", \"\", \"Raw TLS certificate content. Intended only for Android.\")\n\tkey        = flag.String(\"key\", \"\", \"(server) Path to TLS key file. Default: ~/.acme.sh/{host}/{host}.key\")\n\tmode       = flag.String(\"mode\", \"websocket\", \"Transport mode: websocket, quic (enforced tls).\")\n\tmux        = flag.Int(\"mux\", 1, \"Concurrent multiplexed connections (websocket client mode only).\")\n\tserver     = flag.Bool(\"server\", false, \"Run in server mode\")\n\tlogLevel   = flag.String(\"loglevel\", \"\", \"loglevel for v2ray: debug, info, warning (default), error, none.\")\n\tversion    = flag.Bool(\"version\", false, \"Show current version of v2ray-plugin\")\n\tfwmark     = flag.Int(\"fwmark\", 0, \"Set SO_MARK option for outbound sockets.\")\n)\n\nfunc homeDir() string {\n\tusr, err := user.Current()\n\tif err != nil {\n\t\tlogFatal(err)\n\t\tos.Exit(1)\n\t}\n\treturn usr.HomeDir\n}\n\nfunc readCertificate() ([]byte, error) {\n\tif *cert != \"\" {\n\t\treturn filesystem.ReadFile(*cert)\n\t}\n\tif *certRaw != \"\" {\n\t\tcertHead := \"-----BEGIN CERTIFICATE-----\"\n\t\tcertTail := \"-----END CERTIFICATE-----\"\n\t\tfixedCert := certHead + \"\\n\" + *certRaw + \"\\n\" + certTail\n\t\treturn []byte(fixedCert), nil\n\t}\n\tpanic(\"thou shalt not reach hear\")\n}\n\nfunc logConfig(logLevel string) *vlog.Config {\n\tconfig := &vlog.Config{\n\t\tError:  &vlog.LogSpecification{Type: vlog.LogType_Console, Level: clog.Severity_Warning},\n\t\tAccess: &vlog.LogSpecification{Type: vlog.LogType_Console},\n\t}\n\tlevel := strings.ToLower(logLevel)\n\tswitch level {\n\tcase \"debug\":\n\t\tconfig.Error.Level = clog.Severity_Debug\n\tcase \"info\":\n\t\tconfig.Error.Level = clog.Severity_Info\n\tcase \"error\":\n\t\tconfig.Error.Level = clog.Severity_Error\n\tcase \"none\":\n\t\tconfig.Error.Type = vlog.LogType_None\n\t\tconfig.Access.Type = vlog.LogType_None\n\t}\n\treturn config\n}\n\nfunc parseLocalAddr(localAddr string) []string {\n\treturn strings.Split(localAddr, \"|\")\n}\n\nfunc generateConfig() (*core.Config, error) {\n\tlport, err := net.PortFromString(*localPort)\n\tif err != nil {\n\t\treturn nil, newError(\"invalid localPort:\", *localPort).Base(err)\n\t}\n\trport, err := strconv.ParseUint(*remotePort, 10, 32)\n\tif err != nil {\n\t\treturn nil, newError(\"invalid remotePort:\", *remotePort).Base(err)\n\t}\n\toutboundProxy := serial.ToTypedMessage(&freedom.Config{\n\t\tDestinationOverride: &freedom.DestinationOverride{\n\t\t\tServer: &protocol.ServerEndpoint{\n\t\t\t\tAddress: net.NewIPOrDomain(net.ParseAddress(*remoteAddr)),\n\t\t\t\tPort:    uint32(rport),\n\t\t\t},\n\t\t},\n\t})\n\n\tvar transportSettings proto.Message\n\tvar connectionReuse bool\n\tswitch *mode {\n\tcase \"websocket\":\n\t\ttransportSettings = &websocket.Config{\n\t\t\tPath: *path,\n\t\t\tHeader: []*websocket.Header{\n\t\t\t\t{Key: \"Host\", Value: *host},\n\t\t\t},\n\t\t}\n\t\tif *mux != 0 {\n\t\t\tconnectionReuse = true\n\t\t}\n\tcase \"quic\":\n\t\ttransportSettings = &quic.Config{\n\t\t\tSecurity: &protocol.SecurityConfig{Type: protocol.SecurityType_NONE},\n\t\t}\n\t\t*tlsEnabled = true\n\tdefault:\n\t\treturn nil, newError(\"unsupported mode:\", *mode)\n\t}\n\n\tstreamConfig := internet.StreamConfig{\n\t\tProtocolName: *mode,\n\t\tTransportSettings: []*internet.TransportConfig{{\n\t\t\tProtocolName: *mode,\n\t\t\tSettings:     serial.ToTypedMessage(transportSettings),\n\t\t}},\n\t}\n\tif *fastOpen || *fwmark != 0 {\n\t\tsocketConfig := &internet.SocketConfig{}\n\t\tif *fastOpen {\n\t\t\tsocketConfig.Tfo = internet.SocketConfig_Enable\n\t\t}\n\t\tif *fwmark != 0 {\n\t\t\tsocketConfig.Mark = uint32(*fwmark)\n\t\t}\n\n\t\tstreamConfig.SocketSettings = socketConfig\n\t}\n\tif *tlsEnabled {\n\t\ttlsConfig := tls.Config{ServerName: *host}\n\t\tif *server {\n\t\t\tcertificate := tls.Certificate{}\n\t\t\tif *cert == \"\" && *certRaw == \"\" {\n\t\t\t\t*cert = fmt.Sprintf(\"%s/.acme.sh/%s/fullchain.cer\", homeDir(), *host)\n\t\t\t\tlogWarn(\"No TLS cert specified, trying\", *cert)\n\t\t\t}\n\t\t\tcertificate.Certificate, err = readCertificate()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, newError(\"failed to read cert\").Base(err)\n\t\t\t}\n\t\t\tif *key == \"\" {\n\t\t\t\t*key = fmt.Sprintf(\"%[1]s/.acme.sh/%[2]s/%[2]s.key\", homeDir(), *host)\n\t\t\t\tlogWarn(\"No TLS key specified, trying\", *key)\n\t\t\t}\n\t\t\tcertificate.Key, err = filesystem.ReadFile(*key)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, newError(\"failed to read key file\").Base(err)\n\t\t\t}\n\t\t\ttlsConfig.Certificate = []*tls.Certificate{&certificate}\n\t\t} else if *cert != \"\" || *certRaw != \"\" {\n\t\t\tcertificate := tls.Certificate{Usage: tls.Certificate_AUTHORITY_VERIFY}\n\t\t\tcertificate.Certificate, err = readCertificate()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, newError(\"failed to read cert\").Base(err)\n\t\t\t}\n\t\t\ttlsConfig.Certificate = []*tls.Certificate{&certificate}\n\t\t}\n\t\tstreamConfig.SecurityType = serial.GetMessageType(&tlsConfig)\n\t\tstreamConfig.SecuritySettings = []*anypb.Any{serial.ToTypedMessage(&tlsConfig)}\n\t}\n\n\tapps := []*anypb.Any{\n\t\tserial.ToTypedMessage(&dispatcher.Config{}),\n\t\tserial.ToTypedMessage(&proxyman.InboundConfig{}),\n\t\tserial.ToTypedMessage(&proxyman.OutboundConfig{}),\n\t\tserial.ToTypedMessage(logConfig(*logLevel)),\n\t}\n\n\tif *server {\n\t\tproxyAddress := net.LocalHostIP\n\t\tif connectionReuse {\n\t\t\t// This address is required when mux is used on client.\n\t\t\t// dokodemo is not aware of mux connections by itself.\n\t\t\tproxyAddress = net.ParseAddress(\"v1.mux.cool\")\n\t\t}\n\t\tlocalAddrs := parseLocalAddr(*localAddr)\n\t\tinbounds := make([]*core.InboundHandlerConfig, len(localAddrs))\n\n\t\tfor i := 0; i < len(localAddrs); i++ {\n\t\t\tinbounds[i] = &core.InboundHandlerConfig{\n\t\t\t\tReceiverSettings: serial.ToTypedMessage(&proxyman.ReceiverConfig{\n\t\t\t\t\tPortRange:      net.SinglePortRange(lport),\n\t\t\t\t\tListen:         net.NewIPOrDomain(net.ParseAddress(localAddrs[i])),\n\t\t\t\t\tStreamSettings: &streamConfig,\n\t\t\t\t}),\n\t\t\t\tProxySettings: serial.ToTypedMessage(&dokodemo.Config{\n\t\t\t\t\tAddress:  net.NewIPOrDomain(proxyAddress),\n\t\t\t\t\tNetworks: []net.Network{net.Network_TCP},\n\t\t\t\t}),\n\t\t\t}\n\t\t}\n\n\t\treturn &core.Config{\n\t\t\tInbound: inbounds,\n\t\t\tOutbound: []*core.OutboundHandlerConfig{{\n\t\t\t\tProxySettings: outboundProxy,\n\t\t\t}},\n\t\t\tApp: apps,\n\t\t}, nil\n\t} else {\n\t\tsenderConfig := proxyman.SenderConfig{StreamSettings: &streamConfig}\n\t\tif connectionReuse {\n\t\t\tsenderConfig.MultiplexSettings = &proxyman.MultiplexingConfig{Enabled: true, Concurrency: uint32(*mux)}\n\t\t}\n\t\treturn &core.Config{\n\t\t\tInbound: []*core.InboundHandlerConfig{{\n\t\t\t\tReceiverSettings: serial.ToTypedMessage(&proxyman.ReceiverConfig{\n\t\t\t\t\tPortRange: net.SinglePortRange(lport),\n\t\t\t\t\tListen:    net.NewIPOrDomain(net.ParseAddress(*localAddr)),\n\t\t\t\t}),\n\t\t\t\tProxySettings: serial.ToTypedMessage(&dokodemo.Config{\n\t\t\t\t\tAddress:  net.NewIPOrDomain(net.LocalHostIP),\n\t\t\t\t\tNetworks: []net.Network{net.Network_TCP},\n\t\t\t\t}),\n\t\t\t}},\n\t\t\tOutbound: []*core.OutboundHandlerConfig{{\n\t\t\t\tSenderSettings: serial.ToTypedMessage(&senderConfig),\n\t\t\t\tProxySettings:  outboundProxy,\n\t\t\t}},\n\t\t\tApp: apps,\n\t\t}, nil\n\t}\n}\n\nfunc startV2Ray() (core.Server, error) {\n\n\topts, err := parseEnv()\n\n\tif err == nil {\n\t\tif c, b := opts.Get(\"mode\"); b {\n\t\t\t*mode = c\n\t\t}\n\t\tif c, b := opts.Get(\"mux\"); b {\n\t\t\tif i, err := strconv.Atoi(c); err == nil {\n\t\t\t\t*mux = i\n\t\t\t} else {\n\t\t\t\tlogWarn(\"failed to parse mux, use default value\")\n\t\t\t}\n\t\t}\n\t\tif _, b := opts.Get(\"tls\"); b {\n\t\t\t*tlsEnabled = true\n\t\t}\n\t\tif c, b := opts.Get(\"host\"); b {\n\t\t\t*host = c\n\t\t}\n\t\tif c, b := opts.Get(\"path\"); b {\n\t\t\t*path = c\n\t\t}\n\t\tif c, b := opts.Get(\"cert\"); b {\n\t\t\t*cert = c\n\t\t}\n\t\tif c, b := opts.Get(\"certRaw\"); b {\n\t\t\t*certRaw = c\n\t\t}\n\t\tif c, b := opts.Get(\"key\"); b {\n\t\t\t*key = c\n\t\t}\n\t\tif c, b := opts.Get(\"loglevel\"); b {\n\t\t\t*logLevel = c\n\t\t}\n\t\tif _, b := opts.Get(\"server\"); b {\n\t\t\t*server = true\n\t\t}\n\t\tif c, b := opts.Get(\"localAddr\"); b {\n\t\t\tif *server {\n\t\t\t\t*remoteAddr = c\n\t\t\t} else {\n\t\t\t\t*localAddr = c\n\t\t\t}\n\t\t}\n\t\tif c, b := opts.Get(\"localPort\"); b {\n\t\t\tif *server {\n\t\t\t\t*remotePort = c\n\t\t\t} else {\n\t\t\t\t*localPort = c\n\t\t\t}\n\t\t}\n\t\tif c, b := opts.Get(\"remoteAddr\"); b {\n\t\t\tif *server {\n\t\t\t\t*localAddr = c\n\t\t\t} else {\n\t\t\t\t*remoteAddr = c\n\t\t\t}\n\t\t}\n\t\tif c, b := opts.Get(\"remotePort\"); b {\n\t\t\tif *server {\n\t\t\t\t*localPort = c\n\t\t\t} else {\n\t\t\t\t*remotePort = c\n\t\t\t}\n\t\t}\n\n\t\tif _, b := opts.Get(\"fastOpen\"); b {\n\t\t\t*fastOpen = true\n\t\t}\n\n\t\tif _, b := opts.Get(\"__android_vpn\"); b {\n\t\t\t*vpn = true\n\t\t}\n\n\t\tif c, b := opts.Get(\"fwmark\"); b {\n\t\t\tif i, err := strconv.Atoi(c); err == nil {\n\t\t\t\t*fwmark = i\n\t\t\t} else {\n\t\t\t\tlogWarn(\"failed to parse fwmark, use default value\")\n\t\t\t}\n\t\t}\n\n\t\tif *vpn {\n\t\t\tregisterControlFunc()\n\t\t}\n\t}\n\n\tconfig, err := generateConfig()\n\tif err != nil {\n\t\treturn nil, newError(\"failed to parse config\").Base(err)\n\t}\n\tinstance, err := core.New(config)\n\tif err != nil {\n\t\treturn nil, newError(\"failed to create v2ray instance\").Base(err)\n\t}\n\treturn instance, nil\n}\n\nfunc printCoreVersion() {\n\tversion := core.VersionStatement()\n\tfor _, s := range version {\n\t\tlogInfo(s)\n\t}\n}\n\nfunc printVersion() {\n\tfmt.Println(\"v2ray-plugin\", VERSION)\n\tfmt.Println(\"Go version\", runtime.Version())\n\tfmt.Println(\"Yet another SIP003 plugin for shadowsocks\")\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tif *version {\n\t\tprintVersion()\n\t\treturn\n\t}\n\n\tlogInit()\n\n\tprintCoreVersion()\n\n\tserver, err := startV2Ray()\n\tif err != nil {\n\t\tlogFatal(err.Error())\n\t\t// Configuration error. Exit with a special value to prevent systemd from restarting.\n\t\tos.Exit(23)\n\t}\n\tif err := server.Start(); err != nil {\n\t\tlogFatal(\"failed to start server:\", err.Error())\n\t\tos.Exit(1)\n\t}\n\n\tdefer func() {\n\t\terr := server.Close()\n\t\tif err != nil {\n\t\t\tlogWarn(err.Error())\n\t\t}\n\t}()\n\n\t{\n\t\tosSignals := make(chan os.Signal, 1)\n\t\tsignal.Notify(osSignals, os.Interrupt, os.Kill, syscall.SIGTERM)\n\t\t<-osSignals\n\t}\n}\n"
        },
        {
          "name": "utils.go",
          "type": "blob",
          "size": 0.0634765625,
          "content": "// +build !android\n\npackage main\n\nfunc registerControlFunc() {\n}\n"
        },
        {
          "name": "utils_android.go",
          "type": "blob",
          "size": 2.3583984375,
          "content": "// +build android\n\npackage main\n\n/*\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/time.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <sys/uio.h>\n\n#define ANCIL_FD_BUFFER(n) \\\n    struct { \\\n        struct cmsghdr h; \\\n        int fd[n]; \\\n    }\n\nint\nancil_send_fds_with_buffer(int sock, const int *fds, unsigned n_fds, void *buffer)\n{\n    struct msghdr msghdr;\n    char nothing = '!';\n    struct iovec nothing_ptr;\n    struct cmsghdr *cmsg;\n    int i;\n\n    nothing_ptr.iov_base = &nothing;\n    nothing_ptr.iov_len = 1;\n    msghdr.msg_name = NULL;\n    msghdr.msg_namelen = 0;\n    msghdr.msg_iov = &nothing_ptr;\n    msghdr.msg_iovlen = 1;\n    msghdr.msg_flags = 0;\n    msghdr.msg_control = buffer;\n    msghdr.msg_controllen = sizeof(struct cmsghdr) + sizeof(int) * n_fds;\n    cmsg = CMSG_FIRSTHDR(&msghdr);\n    cmsg->cmsg_len = msghdr.msg_controllen;\n    cmsg->cmsg_level = SOL_SOCKET;\n    cmsg->cmsg_type = SCM_RIGHTS;\n    for(i = 0; i < n_fds; i++)\n        ((int *)CMSG_DATA(cmsg))[i] = fds[i];\n    return(sendmsg(sock, &msghdr, 0) >= 0 ? 0 : -1);\n}\n\nint\nancil_send_fd(int sock, int fd)\n{\n    ANCIL_FD_BUFFER(1) buffer;\n\n    return(ancil_send_fds_with_buffer(sock, &fd, 1, &buffer));\n}\n\nvoid\nset_timeout(int sock)\n{\n    struct timeval tv;\n    tv.tv_sec  = 3;\n    tv.tv_usec = 0;\n    setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (char *)&tv, sizeof(struct timeval));\n    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, (char *)&tv, sizeof(struct timeval));\n}\n\n*/\nimport \"C\"\n\nimport (\n\t\"log\"\n\t\"syscall\"\n\n\tvinternet \"github.com/v2fly/v2ray-core/v5/transport/internet\"\n)\n\nfunc ControlOnConnSetup(network string, address string, s uintptr) error {\n\tfd := int(s)\n\tpath := \"protect_path\"\n\n\tsocket, err := syscall.Socket(syscall.AF_UNIX, syscall.SOCK_STREAM, 0)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn err\n\t}\n\n\tdefer syscall.Close(socket)\n\n\tC.set_timeout(C.int(socket))\n\n\terr = syscall.Connect(socket, &syscall.SockaddrUnix{Name: path})\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn err\n\t}\n\n\tC.ancil_send_fd(C.int(socket), C.int(fd))\n\n\tdummy := []byte{1}\n\tn, err := syscall.Read(socket, dummy)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn err\n\t}\n\tif n != 1 {\n\t\tlog.Println(\"Failed to protect fd: \", fd)\n\t}\n\n\treturn nil\n}\n\nfunc registerControlFunc() {\n\tvinternet.RegisterDialerController(ControlOnConnSetup)\n\tvinternet.RegisterListenerController(ControlOnConnSetup)\n}\n"
        }
      ]
    }
  ]
}