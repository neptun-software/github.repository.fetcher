{
  "metadata": {
    "timestamp": 1736567264187,
    "page": 865,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LeanerCloud/AutoSpotting",
      "stars": 2346,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codeclimate.yml",
          "type": "blob",
          "size": 0.4658203125,
          "content": "---\nengines:\n  # golang\n  gofmt:\n    enabled: true\n  golint:\n    enabled: true\n    config:\n      min_confidence: 0.9\n  govet:\n    enabled: true\n  # python, for the lambda wrapper\n  pep8:\n    enabled: true\n  radon: \n    enabled: true\n    config: \n      python_version: 2\n  duplication:\n    enabled: true\n    config:\n      languages:\n      - python\n  # misc\n  markdownlint:\n    enabled: true\n  fixme:\n    enabled: true\nratings:\n  paths:\n    - \"**.go\"\n    - \"**.py\"\n    - \"**.md\"\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.35546875,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\n\n# Tab indentation is needed on Makefiles\n[Makefile*]\nindent_style = tab\nindent_size = 4\n\n[*.py]\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1279296875,
          "content": "build\ndebug\n/autospotting\n/AutoSpotting\ncoverage.out\n.vscode/\nhandler.zip\n*.coverprofile\n.idea/\nMakefile.lambda\n.history\n.DS_Store\n"
        },
        {
          "name": "BINARY_LICENSE",
          "type": "blob",
          "size": 1.255859375,
          "content": "Copyright (c) 2016-2022 Cristian Măgherușan-Stanciu\n\nPermission is hereby granted, free of charge, to any person (the \"User\")\nobtaining a copy of the official AutoSpotting binaries and associated\ndocumentation files (the \"Software\"), to use it for up to 14 days for evaluation\npurposes.\n\nFurther use of the Software requires paying a licensing fee. The actual amount\nand payment methods are stated in the online documentation of the Software.\n\nThe copyright owner may exempt certain Users from paying the licensing fee if\nthey contributed significantly to the Software development effort.\n\nThe automated recurrent installation of the Software is only permitted to paying\nUsers.\n\nThis license allows the Users to copy and distribute the Software, as long as\nthis license document is included in all copies of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.818359375,
          "content": "# ChangeLog\n\n<!-- markdownlint-disable MD024 -->\n\nSince 2019 the release notes, potential breaking changes and mitigation\nprocedures have only been communicated via private channels to the Patreon\nsubscribers when releasing a new stable version.\n\nSign up on [Patreon](https://www.patreon.com/cristim) in order to receive these\nrelease notifications, as well as to get access to these supported stable\nversions. In the future certain premium features will only be available in the\nstable builds.\n\n## 19 September 2018, build 942\n\nYet another really beefy entry, but most of this was also captured in much more\ndetail in this blog\n[post](https://mcristi.wordpress.com/2018/07/14/new-autospotting-version/).\n\nMany thanks to HERE Technologies for supporting a lot of the development effort,\nto the Patreon supporters and to everyone who contributed code to this release.\n\n### New features since the last update\n\n- The method by which AutoSpotting terminates existing Auto Scaling Group\n  instances has changed. By default, AutoSpotting now uses the EC2\n  `TerminateInstanceInAutoScalingGroup` API. This API call ensures that any\n  Termination Lifecycle Hooks that might be configured on the Group are\n  respected, which was not the case in previous AutoSpotting versions. Users who\n  depend upon the legacy behavior, which was to detach the instance from the\n  Auto Scaling Group and terminate it, can set `instance_termination_method` to\n  `detach` in their deployment configurations.\n- Better handling of out of capacity situations.\n- Better handling of VPC, DefaultVPC and EC2 Classic security groups.\n- Support running in opt-out mode.\n- Tagging launched spot instances with `launched-by-autospotting=true`.\n- Obey the scale-in protection and termination protection for on-demand\n  instances that previously were being replaced.\n- Terraform module in the Terraform Registry.\n- Documentation for running as a Kubernetes cron job instead of Lambda.\n- Instance type updates and regional expansions. Note: some recent instance\n  types are still not supported yet due to missing upstream pricing information.\n\n### Under the hood changes\n\n- AutoSpotting now launches spot instances using the `RunInstances` API call,\n  which allows us to simplify the logic considerably and fix a number of bugs.\n- The spot bidding engine was heavily refactored, using less memory and being\n  much more scalable on large installations.\n- Fix compilation of macOS.\n- Smaller binaries.\n- Build AutoSpotting using Go 1.11\n\n## 24 January 2018, build 622\n\nA lot of time passed since the previous Changelog update, so this is a really\nbeefy entry, we should definitely do this more often.\n\nThere were a lot of contributions from many individuals, thank you all for\nhelping improve this project!\n\nSpecial thanks once again to @xlr-8 who contributed a lot throughout the\nprevious year, and is now a very active co-maintainer of the project.\n\n### New features since the last update\n\n- Consider GPUs in the instance compatbility checks\n- Instance type updates and regional expansions\n- Aggressive bidding strategy based on the current spot price, by @kartik894\n- Prevent termination of last instance, by @universam1\n- Support volume discounts (think Reserved Instance), by @masneyb\n- Instance type whitelisting, by @raravena80\n- Instance type blacklisting, by @binarylogic\n- Consider the EBS pricing surcharge, by @vecchp\n- Deploy using Terraform, by @xlr-8\n\n### Under the hood changes\n\n- Significant refactorings, especially done by @xlr-8\n- We're now using the native Lambda Go runtime, again thanks to @xlr-8\n- Scalability fixes: concurrency by @thebigjc, API pagination by @ahaverbuch,\n  support handling more than 50 AutoScaling groups concurrently, by @chaner\n- Much more unit test coverage, thanks to @xlr-8 and @artemnikitin\n- Buildsystem changes, we now also have automated lint and vet checks\n- Dependency vendoring, by @xlr-8\n- Lots of bugfixes, special thanks to @xlr-8\n- Countless documentation updates by too many individuals to mention here\n\n### Breaking changes\n\n- The CloudFormation stack needs to be updated after build 633, because of the\n  change to the Go Lambda runtime\n- Some of the AutoScaling group tags used to override the global configuration\n  were renamed to be more consistent, please refer to the current state of the\n  documentation.\n\n~Cristian\n\n## 29 December 2016, build 158\n\nI forgot to update this in a while, so this is a quite big changelog entry.\n\nI got the first major code contributions by other developers, so from now on the\nchangelog entries will be split by author. It may also have a header like this\none in which it will contain a short summary or a message from the author.\n\nSpecial thanks to Hugo Rosnet, who contributed a lot of code that implemented a\nnumber of major features, helped me with multiple code reviews and kept me\nmotivated enough to constantly work on this project.\n\nAlso thanks to Jay Wineinger who contributed a non-trivial piece of code, and to\nthe other folks who contributed documentation, raised or discussed various\nGithub issues.\n\n~Cristian\n\n### Changes by author\n\n#### @cristim\n\n- Big code refactoring to make the code more maintainable and testable.\n- Buildsystem improvements (and regressions, since fixed).\n- Updated regional and instance type coverage, thanks to ec2instances.info.\n- Support restricting the execution to a given set of regions.\n- Expose all configuration options also as CloudFormation stack parameters.\n- Documentation updates and improvements.\n- Random small cleanups.\n\n#### @xlr-8\n\n- Update Lambda function's IAM permissions.\n- The algorithm now supports keeping on-demand instances in each AutoScaling\n  group.\n- The algorithm is now configurable using tags set on the group and based on\n  flags when executing it locally as a CLI tool.\n- Significant test coverage increases.\n- Significant clean-up and refactoring of the core algorithm.\n- Documentation improvements.\n\n#### @jwineinger\n\n- Pagination fix, making it work for users having many ASGs.\n\n#### @roeyazroel\n\n- Documentation for Elastic Beanstalk.\n\n## 14 November 2016, build 79\n\n Major, breaking compatibility, packaging update: now using eawsy/aws-lambda-go\n for packaging of the Lambda function\n\n- Switch to the golang-native eawsy/aws-lambda-go for packaging of\n  the Lambda function code.\n- This is a breaking change, updating already running CloudFormation\n  stacks will also need a template update.\n- Add versioning for the CloudFormation template.\n- Buildsystem updates (both on Makefile and Travis CI configuration).\n- Change build dependencies: now building Lambda code in Docker, use\n  wget instead of curl in order not to download data unnecessarily.\n- Remove the Python Lambda wrapper, it is no longer needed.\n- Start using go-bindata for shipping static files, instead of packaging\n  them in the Lambda zip file.\n- Introduce a configuration object for the main functionality, not in\n  use yet.\n- Documentation updates and better formatting.\n\n## 2 November 2016, build 74\n\n- Test and fix support for EC2 Classic\n- Fix corner case in handling of ephemeral storage\n- Earlier spot request tagging\n\n## 26 October 26, build 65\n\n- Regional expansion for R3 and D2 instances\n\n## 23 October 2016, Travis CI build 63\n\n- Add support for the new Ohio AWS region\n- Add support in all the regions for the newly released instance types:\n  m4.16xlarge, p2.xlarge, p2.8xlarge, p2.16xlarge and x1.16xlarge\n\n## Older change log entries\n\nBefore this file was created, change logs used to be posted as blog posts:\n\n- [recent changes as of October 2016](http://blog.cloudprowess.com/aws/ec2/spot/2016/10/24/autospotting-now-supports-the-new-ohio-aws-region-and-newly-released-instance-types.html)\n- in the initial phase of the project they were posted at the end of the [first\n  announcement blog post](http://blog.cloudprowess.com/autoscaling/aws/ec2/spot/2016/04/21/my-approach-at-making-aws-ec2-affordable-automatic-replacement-of-autoscaling-nodes-with-equivalent-spot-instances.html)\n"
        },
        {
          "name": "CODEDEPLOY.md",
          "type": "blob",
          "size": 1.1708984375,
          "content": "# Use AutoSpotting with AWS CodeDeploy\n\n## CodeDeploy Limitations\n\n- Doesn't work on spot instances natively\n- Doesn't work on instances that aren't booted by the autoscaling group\n\n## Why this method\n\nThis method is to allow for AutoSpotting and spot instances to work around the\nlimitations of CodeDeploy and get our code on newly booted spot instances\n\n## CodeDeploy Console\n\n- Setup the AWS CodeDeploy Deployment Groups to use Tag Groups\n- Groups should be based around the autoscaling groups you plan to use\n- For example:\n  - Environment:staging\n  - Product:nginx\n  - Role:web\n\n## Instance AMI Scripts\n\n### get-meta\n\n- This file will be sourced into our deployment script\n  - [get-meta](https://gist.github.com/cristim/82fc6bfe56c67a22ee264a0e3b655df5)\n  - Save this file to /usr/bin/get-meta on the AMI to be used\n\n### check-codedeploy\n\n- A simple version of a deployment script that is ran on-boot\n- This file will need to be deployed to the same AMI\n  - [check-codedeploy](https://gist.github.com/cristim/7e9cd403fbf38aee18c4fb6a30bcef0a)\n- If you are using Amazon Linux saving this file to `/etc/rc3.d/S99deploycode`\n  - This will make run it after all networking components are available\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.2119140625,
          "content": "# Contribution guidelines #\n\n[![Chat on Gitter](https://badges.gitter.im/AutoSpotting/AutoSpotting.svg)](https://gitter.im/cristim/autospotting)\n\nThe usual GitHub contribution model applies, but if you would like to [raise an\nissue](https://github.com/AutoSpotting/AutoSpotting/issues/new) or start working\non a [pull request](https://github.com/AutoSpotting/AutoSpotting/pulls), please\nget in touch on [gitter](https://gitter.im/cristim/autospotting) to discuss it\nfirst so we make sure everything is clear and that nobody else is already\nworking on it.\n\nAny random questions are also better asked there.\n\n## Feature requests ##\n\nThe use case should be presented in detail in the issue, and should also\nbe discussed on gitter to make sure nothing was lost in translation.\n\n## Bug reports ##\n\nBug reports should contain enough details to be reproduced by a developer.\n\nThe commonly required information is already pre-filled when creating any GitHub\nissue, but be prepared to provide more when asked, either in the issue comments\nor on gitter.\n\n## Pull requests ##\n\nPull requests will need to pass code review by the project maintainers before\nthey can be merged, in order to ensure the high quality of the software and the\nmaintainability of the codebase.\n\nAs part of the review process the maintainers will often just verify that the\npatch meets the requirements listed in the pull request\n[checklist](.github/PULL_REQUEST_TEMPLATE.md), but they may also suggest other\nchanges deemed appropriate.\n\nAnyone is more than welcome to review the content of any issues labelled as\n'review wanted', but only project maintainers can approve reviews for being\nmerged.\n\nYou can usually make the process faster by submitting smaller changes, larger\nreviews can also be sped up by asking for review on Gitter, we try to be as\nresponsive as possible, but be prepared to iterate your pull request a number of\ntimes until it is ready to be approved. This may take a while for big\ncontributions, so don't be discouraged if this may take longer than you\ninitially expected.\n\nYou can submit iterations as additional commits to make the review process\neasier, but the reviewer may squash them into a single big commit at merge time,\nin order to clean up the mainline commit history.\n"
        },
        {
          "name": "CUSTOM_BUILDS.md",
          "type": "blob",
          "size": 7.61328125,
          "content": "# AutoSpotting Setup #\n\nIt's usually recommended to use the provided binaries available as Docker\nimages, but in some cases you may need to customize AutoSpotting for your own\nenvironment.\n\n## Docker ##\n\nPre-built Docker images for the latest evaluation builds are also available on\nthe Docker Hub at\n[AutoSpotting/AutoSpotting](https://hub.docker.com/r/AutoSpotting/AutoSpotting/)\n\n``` shell\ndocker run autospotting/autospotting\n```\n\nThey might be useful for quick tests, otherwise you might need to build your own\ndocker images.\n\nThe repository contains a `Dockerfile` and `docker-compose` configuration that\nallows you to build AutoSpotting Docker container images and run them\nconveniently on your local machine without installing the Go build environment\nusually required for local development(which is also documented below).\n\nThis can be useful for trying it out locally or even for running it on a\ncontainer hosting solution such as Kubernetes. They won't support the full\nfunctionality that relies on CloudWatch Events but it's probably enough for some\npeople.\n\nIf you have `docker` and `docker-compose` installed, it's as simple as running\n\n``` shell\ndocker-compose run autospotting\n```\n\n This also accepts all the AutoSpotting command-line arguments, including\n`-help` which explains all the other available options.\n\nThe usual AWS credential environment variables listed in the\n`docker-compose.yaml` configuration file are passed to the running container and\nwill need to be set for it to actually work.\n\n## Using your own Docker images in AWS Lambda ##\n\nAutoSpotting uses a Lambda function configured to use a Docker image. Such a\nconfiguration [currently](https://github.com/aws/containers-roadmap/issues/1281)\nrequires the Docker image to be stored in an ECR from your own account.\n\nAutoSpotting trunk currently builds and runs by default as ARM binaries.\nBuilding it locally most probably requires a `docker buildx` setup, as per the\nofficial Docker\n[documentation](https://docs.docker.com/buildx/working-with-buildx/). The\nMarketplace version is currently available only at x86 binaries.\n\nBuilding it as Intel binaries is still possible, but the infrastructure code\nwill currently expect ARM binaries.\n\nIn order to support the AWS Marketplace setup, which relies on an ECR repository\nhosted in another AWS-managed account, the current CloudFormation template uses\na custom resource that copies the Docker image from a source ECR (by default the\nMarketplace ECR) into an ECR created inside the CloudFormation stack. This adds\nsome complexity but has the nice side effect of being able to push the image to\nany arbitrary ECR in another account/region, offering more flexibility for\ncustomers who may want to manage custom deployments at scale.\n\nYou'll therefore need to build an ARM Docker image, upload it to an ECR\nrepository in your AWS account and configure your CloudFormation or Terraform\nstack to use this new image as a source image.\n\n1. Set up an ECR repository in your AWS account that will host your custom\n   Docker images.\n\n2. The build system can use a `DOCKER_IMAGE` variable that tells it where to\n   upload the image. Set it into your environment to the name of your ECR\n   repository. When unset you'll attempt to push to the Marketplace ECR and\n   you'll receive permission errors.\n\n   ``` shell\n   export DOCKER_IMAGE=1234567890123.dkr.ecr.<region>.amazonaws.com/<my-ecr-name>\n   export DOCKER_IMAGE_VERSION=1.0.2 # it's strongly recommended versioning images\n   ```\n\n3. Define some AWS credentials or profile information into your\n   [environment](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-environment).\n\n4. Authenticate to your ECR repository\n\n   ```shell\n   make docker-login\n   ```\n\n5. Build and upload your Docker image to your ECR and configure a CloudFormation\n   template to use your ECR\n\n   ``` shell\n   make docker-push-artifacts\n   ```\n\n6. Use the CloudFormation template from the `build` directory to create the\n   resources. Make sure you set the parameters `SourceECR` and `SourceImage` to\n   point to your ECR repository (`SourceECR` should be set to contain the\n   hostname part of your ECR repository, before the first `/` character and\n   `SourceImage` should contain the rest). The version number will be set\n   automatically based on the value you defined earlier.\n\n   AutoSpotting should now be running against the binaries you built locally and\n   uploaded to your own ECR repository.\n\n   The same process can be used for updating AutoSpotting to a newer version.\n\n## Maintaining your own fork ##\n\nIt is recommended to contribute your changes into the mainline version of the\nproject whenever possible, so that others can benefit from your enhancements and\nbug fixes, but for some reasons you may still want to run your own fork.\n\nUnfortunately the golang import paths can make it tricky, but there is a nice\n[article](http://code.openark.org/blog/development/forking-golang-repositories-on-github-and-managing-the-import-path)\nwhich documents the problem in detail and gives a couple of possible\nworkarounds.\n\n## Make directives ##\n\nThe Makefile from the root of the git repository contains a number of useful\ndirectives, they're not documented here as they might change over time, so you\nmay want to have a look at it.\n\n## Local Development setup ##\n\nAutoSpotting is written in Go so for local development you need a Go toolchain.\nYou can probably also use docker-compose for this to avoid it as mentioned above\nbut I prefer the native Go tooling which offers faster feedback for local\ndevelopment.\n\n### Dependencies ##\n\n1. Install [Go](https://golang.org/dl/), [git](https://git-scm.com/downloads),\n   [Docker](https://www.docker.com/) and the [AWS command-line\n   tool](https://aws.amazon.com/cli/). You may use the official binaries or your\n   usual package manager, whatever you prefer is fine.\n\n1. Verify that they were properly installed.\n\n   `go version`, should be at least 1.7\n\n   `git version`\n\n   `docker version`\n\n   `aws --version`\n\n### Compiling the binaries locally ##\n\n1. Set up a directory for your Go development. I'm using `go` in my home\n   directory for this example.\n\n1. Set the `GOPATH` environment variable to point at your `go` directory:\n\n   `export GOPATH=$HOME/go`\n\n   Optionally add this line to your .bash_profile to persist across console\n   sessions.\n\n1. Run the following command to install the AutoSpotting project into your\n   GOPATH directory:\n\n   `go get github.com/AutoSpotting/AutoSpotting`\n\n   This downloads the source from GitHub, pulls in all necessary dependencies,\n   builds it for local execution and deploys the binary into the golang binary\n   directory which you may also want to append to your PATH.\n\n1. Navigate to the root of the AutoSpotting repository:\n\n   `cd $GOPATH/src/github.com/AutoSpotting/AutoSpotting`\n\n1. (Optional) You may want to make a minor change to the source code so you can\n   tell when the tool is running your own custom-built version. If so, add a\n   line like this to the `autospotting.go` file's `main()` function:\n\n   `fmt.Println(\"Running <my organization name> binaries\")`\n\n1. (Optional) Try building and running the test suite locally to make sure\n   everything works correctly:\n\n   `make test`\n\n1. Build the code again:\n\n   `make build`\n\n### Running locally ###\n\n1. Run the code, assuming you have AWS credentials defined in your environment\n   or in the default AWS credentials profile:\n\n   `./AutoSpotting`\n\n   You may also pass some command line flags, see the `--help` output for more\n   information on the available options.\n\n   When you are happy with how your custom build behaves, you can generate a\n\n   build for AWS Lambda using the Docker method documented above.\n\n[Back to the main Readme](./README.md)\n"
        },
        {
          "name": "CloudFormation_and_StackSets.md",
          "type": "blob",
          "size": 6.8212890625,
          "content": "# CloudFormation and StackSets\n\nStackSets are a very powerful way to deploy software at scale across multiple\nAWS accounts and also to multiple regions within a single account.\n\nAutoSpotting supports being deployed using StackSets across multiple accounts,\nand also leverages them internally to deploy some of its components across\nmultiple regions within each account.\n\nThis document explains the way the current CloudFormation deployment method of\nAutoSpotting uses CloudFormation StackSets internally, what consequences it has\non existing StackSet environments or when AutoSpotting is installed repeatedly\nwithin an AWS account, and a few workarounds on how to deploy AutoSpotting on\nsuch environments.\n\n## Background\n\n- The current AutoSpotting architecture deploys a few central resources in a\n  main AWS region but requires additional resources to be deployed in other\n  regions to enable certain advanced behaviors such as handling of spot instance\n  termination or rebalancing events, immediate replacement of on-demand\n  instances with spot and startup lifecycle hook emulation. Without these\n  regional resources AutoSpotting will only run in the basic/legacy Cron mode,\n  which is suboptimal.\n- These regional resources have been historically deployed using a second\n  regional CloudFormation template, deployed by a custom Lambda-backed\n  CloudFormation resource across all available AWS regions. This was error-prone\n  in particular when having multiple installations of AutoSpotting side by side,\n  especially when some of them were uninstalled.\n- There was also another installation mode in which the same main CloudFormation\n  template could itself be deployed using a StackSet, deploying only the main\n  resources in the main region and only the regional resources in the other\n  regions based on some parameters. This duplicated a lot of infrastructure code\n  between the two CloudFormation templates and many conditionals that\n  overcomplicated the implementation of the main template enough that it became\n  almost unmanageable, so we decided to simplify it.\n- The current implementation uses a StackSet to deploy the regional resources\n  instead of the custom Lambda-backed resource, and has been simplified greatly by\n  removing all the conditionals and duplicated code that enabled it to use a\n  StackSet for deploying the regional resources with the same template code.\n- To keep the user-friendly single-click installation support, the main AutoSpotting\n  CloudFormation template currently also deploys out of the box the required IAM\n  resources needed for self-managed StackSet permissions that enable it to\n  deploy the regional template as a StackSet, and that's why it's conflicting\n  with self-managed StackSet permissions you may already have in your account or\n  if they were created by another installation of AutoSpotting. If you run into\n  any such installation issues, you can see the Workarounds section below.\n\n## Instructions on how to install AutoSpotting across an Organization using a StackSet\n\n1. Grant permissions for using StackSets at AWS Organization level using these\n   [instructions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/StackSets-orgs-enable-trusted-access.html).\n   See Note 1 below for further information on this topic.\n1. Use the same CloudFormation\n   [template](https://s3.amazonaws.com/cloudprowess/nightly/template.yaml) and\n   parameters used for deploying AutoSpotting in stand-alone mode within a\n   single AWS account.\n1. Create the StackSet only in the \"Main\" region. For the official binaries you\n   will need to use `us-east-1`, otherwise installation fails. See Note 2 below\n   in case you run a custom build hosted in another region.\n1. Set the OrganizationUnit where you want to deploy AutoSpotting and complete\n   the installation wizard. You can also use the Organization root to install\n   AutoSpotting across an entire AWS Organization.\n1. For faster installation you can allow a 50% failure percentage, otherwise the\n   StackSet will deploy AutoSpotting only one account at a time which can be\n   slow on large organizations.\n\n## Notes\n\n1. Self-managed StackSet permissions are not supported out of the box and will\n   break the default installation of AutoSpotting if you have them configured in\n   the account. See below the workaround for this issue if you run into it.\n1. If you run a custom build use the region where you created the S3 bucket\n   hosting the code of the customized AutoSpotting Lambda functions.\n\n## Workarounds\n\n- In case the installation fails because of the conflict with pre-existing IAM\n  resources created for self-managed StackSet permissions or by an existing\n  AutoSpotting installation, you'll need to configure the AutoSpotting Stack\n  parameters to not deploy any regional resources. You can do it by setting the\n  `DeployRegionalResourcesStackSet` parameter to `false`.\n- This which will render the current AutoSpotting installation to run in the\n  legacy cron mode, also lacking termination event handling and lifecycle hooks\n  emulation. In order to re-enable the event-based execution mode and other\n  advanced features, you will then need to deploy those regional resources\n  yourself with a second AutoSpotting regional StackSet deployed to the regions\n  you want to run AutoSpotting against. For this you will need to use the\n  regional CloudFormation\n  [template](https://s3.amazonaws.com/cloudprowess/nightly/regional_template.yaml).\n- This regional StackSet will need a couple of parameters that enable it to send\n  events to the main Lambda function: the ARN of the main Lambda function and\n  the ARN of the regional execution IAM role created by the main AutoSpotting\n  Stack.\n- These would be set automatically when installing the main AutoSpotting\n  CloudFormation template with the default parameters, but they need to be\n  manually set if the regional stack is installed manually. You can get these\n  values from the Outputs of the main AutoSpotting CloudFormation Stack that\n  corresponds to the regional Stack you want to install, in particular the\n  `AutoSpottingLambdaARN` and `LambdaRegionalStackExecutionRoleARN` output\n  values.\n\n## Known issues\n\n- As mentioned above, the current StackSet implementation requires manual\n  workarounds inc certain situations, such as when the StackSet self-managed\n  StackSet permissions already exist in the account or when AutoSpotting is\n  installed multiple times within an account. The above Workarounds may help in\n  such situations.\n- Parallel installations using StackSets will require the installation in legacy\n  mode by setting the `DeployRegionalResourcesStackSet` parameter to `false` on\n  all but the first StackSet, and performing the same workarounds on each target\n  account where the subsequest StackSets are deployed.\n\n## Support\n\nAs always, if you need Enterprise support for more exotic or large\nconfigurations, you can get in touch on [gitter](https://gitter.im/cristim).\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.453125,
          "content": "FROM golang:1.18-alpine as golang\nRUN apk add -U --no-cache ca-certificates git make\n\nCOPY go.mod go.sum /src/\n# Download dependencies\nWORKDIR /src\nRUN GOPROXY=direct go mod download\n\nCOPY . /src\n\nARG flavor=custom\nRUN FLAVOR=\"$flavor\" CGO_ENABLED=0 GOPROXY=direct make\n\nFROM scratch\nCOPY LICENSE BINARY_LICENSE THIRDPARTY /\nCOPY --from=golang /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=golang /src/AutoSpotting .\nENTRYPOINT [\"./AutoSpotting\"]\n"
        },
        {
          "name": "Dockerfile.build",
          "type": "blob",
          "size": 0.154296875,
          "content": "FROM golang:1.18-alpine\n\nARG flavor\n\nRUN apk add -U --no-cache ca-certificates git make\n\nCOPY . /src\nWORKDIR /src\n\nRUN CGO_ENABLED=0 FLAVOR=\"$flavor\" make ci\n"
        },
        {
          "name": "Dockerfile.marketplace",
          "type": "blob",
          "size": 0.4794921875,
          "content": "FROM golang:1.18-alpine as golang\nARG savings_cut\n\nRUN apk add -U --no-cache ca-certificates git make\n\nCOPY go.mod go.sum /src/\n# Download dependencies\nWORKDIR /src\nRUN GOPROXY=direct go mod download\n\nCOPY . /src\n\nRUN FLAVOR=stable CGO_ENABLED=0 GOPROXY=direct SAVINGS_CUT=$savings_cut make\n\nFROM alpine:latest\nCOPY LICENSE BINARY_LICENSE THIRDPARTY /\nCOPY --from=golang /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=golang /src/AutoSpotting .\nENTRYPOINT [\"./AutoSpotting\"]\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 0.107421875,
          "content": "# Frequently Asked Questions\n\nPlease refer to the FAQ section on [autospotting.org](https://autospotting.org)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.0556640625,
          "content": "Open Software License (\"OSL\") v 3.0\n\nThis Open Software License (the \"License\") applies to any original work of\nauthorship (the \"Original Work\") whose owner (the \"Licensor\") has placed the\nfollowing licensing notice adjacent to the copyright notice for the Original\nWork:\n\nLicensed under the Open Software License version 3.0\n\n1) Grant of Copyright License. Licensor grants You a worldwide, royalty-free,\nnon-exclusive, sublicensable license, for the duration of the copyright, to do\nthe following:\n\n  a) to reproduce the Original Work in copies, either alone or as part of a\n  collective work;\n\n  b) to translate, adapt, alter, transform, modify, or arrange the Original\n  Work, thereby creating derivative works (\"Derivative Works\") based upon the\n  Original Work;\n\n  c) to distribute or communicate copies of the Original Work and Derivative\n  Works to the public, with the proviso that copies of Original Work or\n  Derivative Works that You distribute or communicate shall be licensed under\n  this Open Software License;\n\n  d) to perform the Original Work publicly; and\n\n  e) to display the Original Work publicly.\n\n2) Grant of Patent License. Licensor grants You a worldwide, royalty-free,\nnon-exclusive, sublicensable license, under patent claims owned or controlled\nby the Licensor that are embodied in the Original Work as furnished by the\nLicensor, for the duration of the patents, to make, use, sell, offer for sale,\nhave made, and import the Original Work and Derivative Works.\n\n3) Grant of Source Code License. The term \"Source Code\" means the preferred\nform of the Original Work for making modifications to it and all available\ndocumentation describing how to modify the Original Work. Licensor agrees to\nprovide a machine-readable copy of the Source Code of the Original Work along\nwith each copy of the Original Work that Licensor distributes. Licensor\nreserves the right to satisfy this obligation by placing a machine-readable\ncopy of the Source Code in an information repository reasonably calculated to\npermit inexpensive and convenient access by You for as long as Licensor\ncontinues to distribute the Original Work.\n\n4) Exclusions From License Grant. Neither the names of Licensor, nor the names\nof any contributors to the Original Work, nor any of their trademarks or\nservice marks, may be used to endorse or promote products derived from this\nOriginal Work without express prior permission of the Licensor. Except as\nexpressly stated herein, nothing in this License grants any license to\nLicensor's trademarks, copyrights, patents, trade secrets or any other\nintellectual property. No patent license is granted to make, use, sell, offer\nfor sale, have made, or import embodiments of any patent claims other than the\nlicensed claims defined in Section 2. No license is granted to the trademarks\nof Licensor even if such marks are included in the Original Work. Nothing in\nthis License shall be interpreted to prohibit Licensor from licensing under\nterms different from this License any Original Work that Licensor otherwise\nwould have a right to license.\n\n5) External Deployment. The term \"External Deployment\" means the use,\ndistribution, or communication of the Original Work or Derivative Works in any\nway such that the Original Work or Derivative Works may be used by anyone\nother than You, whether those works are distributed or communicated to those\npersons or made available as an application intended for use over a network.\nAs an express condition for the grants of license hereunder, You must treat\nany External Deployment by You of the Original Work or a Derivative Work as a\ndistribution under section 1(c).\n\n6) Attribution Rights. You must retain, in the Source Code of any Derivative\nWorks that You create, all copyright, patent, or trademark notices from the\nSource Code of the Original Work, as well as any notices of licensing and any\ndescriptive text identified therein as an \"Attribution Notice.\" You must cause\nthe Source Code for any Derivative Works that You create to carry a prominent\nAttribution Notice reasonably calculated to inform recipients that You have\nmodified the Original Work.\n\n7) Warranty of Provenance and Disclaimer of Warranty. Licensor warrants that\nthe copyright in and to the Original Work and the patent rights granted herein\nby Licensor are owned by the Licensor or are sublicensed to You under the\nterms of this License with the permission of the contributor(s) of those\ncopyrights and patent rights. Except as expressly stated in the immediately\npreceding sentence, the Original Work is provided under this License on an \"AS\nIS\" BASIS and WITHOUT WARRANTY, either express or implied, including, without\nlimitation, the warranties of non-infringement, merchantability or fitness for\na particular purpose. THE ENTIRE RISK AS TO THE QUALITY OF THE ORIGINAL WORK\nIS WITH YOU. This DISCLAIMER OF WARRANTY constitutes an essential part of this\nLicense. No license to the Original Work is granted by this License except\nunder this disclaimer.\n\n8) Limitation of Liability. Under no circumstances and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise, shall the\nLicensor be liable to anyone for any indirect, special, incidental, or\nconsequential damages of any character arising as a result of this License or\nthe use of the Original Work including, without limitation, damages for loss\nof goodwill, work stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses. This limitation of liability shall not\napply to the extent applicable law prohibits such limitation.\n\n9) Acceptance and Termination. If, at any time, You expressly assented to this\nLicense, that assent indicates your clear and irrevocable acceptance of this\nLicense and all of its terms and conditions. If You distribute or communicate\ncopies of the Original Work or a Derivative Work, You must make a reasonable\neffort under the circumstances to obtain the express assent of recipients to\nthe terms of this License. This License conditions your rights to undertake\nthe activities listed in Section 1, including your right to create Derivative\nWorks based upon the Original Work, and doing so without honoring these terms\nand conditions is prohibited by copyright law and international treaty.\nNothing in this License is intended to affect copyright exceptions and\nlimitations (including \"fair use\" or \"fair dealing\"). This License shall\nterminate immediately and You may no longer exercise any of the rights granted\nto You by this License upon your failure to honor the conditions in Section\n1(c).\n\n10) Termination for Patent Action. This License shall terminate automatically\nand You may no longer exercise any of the rights granted to You by this\nLicense as of the date You commence an action, including a cross-claim or\ncounterclaim, against Licensor or any licensee alleging that the Original Work\ninfringes a patent. This termination provision shall not apply for an action\nalleging patent infringement by combinations of the Original Work with other\nsoftware or hardware.\n\n11) Jurisdiction, Venue and Governing Law. Any action or suit relating to this\nLicense may be brought only in the courts of a jurisdiction wherein the\nLicensor resides or in which Licensor conducts its primary business, and under\nthe laws of that jurisdiction excluding its conflict-of-law provisions. The\napplication of the United Nations Convention on Contracts for the\nInternational Sale of Goods is expressly excluded. Any use of the Original\nWork outside the scope of this License or after its termination shall be\nsubject to the requirements and penalties of copyright or patent law in the\nappropriate jurisdiction. This section shall survive the termination of this\nLicense.\n\n12) Attorneys' Fees. In any action to enforce the terms of this License or\nseeking damages relating thereto, the prevailing party shall be entitled to\nrecover its costs and expenses, including, without limitation, reasonable\nattorneys' fees and costs incurred in connection with such action, including\nany appeal of such action. This section shall survive the termination of this\nLicense.\n\n13) Miscellaneous. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent necessary\nto make it enforceable.\n\n14) Definition of \"You\" in This License. \"You\" throughout this License,\nwhether in upper or lower case, means an individual or a legal entity\nexercising rights under, and complying with all of the terms of, this License.\nFor legal entities, \"You\" includes any entity that controls, is controlled by,\nor is under common control with you. For purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the direction or\nmanagement of such entity, whether by contract or otherwise, or (ii) ownership\nof fifty percent (50%) or more of the outstanding shares, or (iii) beneficial\nownership of such entity.\n\n15) Right to Use. You may use the Original Work in all ways not otherwise\nrestricted or conditioned by this License or by law, and Licensor promises not\nto interfere with or be responsible for such uses by You.\n\n16) Modification of This License. This License is Copyright © 2005 Lawrence\nRosen. Permission is granted to copy, distribute, or communicate this License\nwithout modification. Nothing in this License permits You to modify this\nLicense as applied to the Original Work or to Derivative Works. However, You\nmay modify the text of this License and copy, distribute or communicate your\nmodified version (the \"Modified License\") and apply it to other original works\nof authorship subject to the following conditions: (i) You may not indicate in\nany way that your Modified License is the \"Open Software License\" or \"OSL\" and\nyou may not use those names in the name of your Modified License; (ii) You\nmust replace the notice specified in the first paragraph above with the notice\n\"Licensed under <insert your license name here>\" or with a notice of your own\nthat is not confusingly similar to the notice in this License; and (iii) You\nmay not claim that your original works are open source software unless your\nModified License has been approved by Open Source Initiative (OSI) and You\ncomply with its license review and certification process.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.34765625,
          "content": "DEPS := \"wget git go docker golint\"\n\nBINARY := AutoSpotting\n\nCOVER_PROFILE := /tmp/coverage.out\nBUCKET_NAME ?= cloudprowess\nFLAVOR ?= custom\nLOCAL_PATH := build/s3/$(FLAVOR)\nLICENSE_FILES := LICENSE THIRDPARTY\n\n# the default is used for pushing to the AWS Marketplace ECR. Set this as an\n# environment variable to push to your own ECR repository instead.\nAWS_REGION ?= us-east-1\n\nDOCKER_ECR_ACCOUNT ?= 709825985650\nDOCKER_ECR_REGION ?= us-east-1\n\nDOCKER_ECR ?= $(DOCKER_ECR_ACCOUNT).dkr.ecr.$(DOCKER_ECR_REGION).amazonaws.com\nDOCKER_IMAGE ?= cloudutil/autospotting\nDOCKER_IMAGE_TAG ?= $(DOCKER_ECR)/$(DOCKER_IMAGE):$(DOCKER_IMAGE_VERSION)\n\nDOCKER_IMAGE_VERSION ?= 1.0\n\nSHA := $(shell git rev-parse HEAD | cut -c 1-7)\nBUILD := $(DOCKER_IMAGE_VERSION)-$(FLAVOR)-$(SHA)\nSAVINGS_CUT ?= 5\n\nGOARCH ?= arm64\n\nifneq ($(FLAVOR), custom)\n    LICENSE_FILES += BINARY_LICENSE\nendif\n\nLDFLAGS=\"-X main.Version=$(BUILD) -X main.SavingsCut=$(SAVINGS_CUT) -s -w\"\n\nall: fmt-check vet-check build test                          ## Build the code\n.PHONY: all\n\nclean:                                                       ## Remove installed packages/temporary files\n\tgo clean ./...\n\trm -rf $(BINDATA_DIR) $(LOCAL_PATH)\n.PHONY: clean\n\ncheck_deps:                                                  ## Verify the system has all dependencies installed\n\t@for DEP in \"$(DEPS)\"; do \\\n\t\tif ! command -v \"$$DEP\" >/dev/null ; then echo \"Error: dependency '$$DEP' is absent\" ; exit 1; fi; \\\n\tdone\n\t@echo \"all dependencies satisifed: $(DEPS)\"\n.PHONY: check_deps\n\nbuild_deps:                                                  ## Install all dependencies specified in tools.go\n\t@grep _ tools.go | cut -d '\"' -f 2 | xargs go install\n.PHONY: build_deps\n\nupdate_deps:                                                 ## Update all dependencies\n\t@go get -u\n\t@go mod tidy\n.PHONY: update_deps\n\nbuild:                                                       ## Build the AutoSpotting binary\n\tgo build -ldflags=$(LDFLAGS) -o $(BINARY)\n.PHONY: build\n\nartifacts:                                       \t\t\t ## Create CloudFormation artifacts to be uploaded to S3\n\t@rm -rf $(LOCAL_PATH)\n\t@mkdir -p $(LOCAL_PATH)\n\t@cp -f cloudformation/stacks/AutoSpotting/template.yaml $(LOCAL_PATH)/template_build_$(BUILD).yaml\n\t@cp -f cloudformation/stacks/AutoSpotting/regional_template.yaml $(LOCAL_PATH)/\n\t@sed -e \"s#1.0.1#$(DOCKER_IMAGE_VERSION)#\" $(LOCAL_PATH)/template_build_$(BUILD).yaml > $(LOCAL_PATH)/template_build_$(BUILD).yaml.new\n\t@mv -- $(LOCAL_PATH)/template_build_$(BUILD).yaml.new $(LOCAL_PATH)/template_build_$(BUILD).yaml\n\t@cp -f $(LOCAL_PATH)/template_build_$(BUILD).yaml $(LOCAL_PATH)/template.yaml\n\n.PHONY: artifacts\n\ndocker: \t\t\t\t\t\t\t\t\t\t\t\t\t ##  Build a Docker image, currently only supports x86 hosts\n\tdocker build --build-arg flavor=$(FLAVOR) --platform=linux/$(GOARCH) --load -t $(DOCKER_IMAGE_TAG) .\n\tdocker push $(DOCKER_IMAGE_TAG)\n.PHONY: docker\n\ndocker-login:\n\t aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(DOCKER_ECR)\n\ndocker-push-artifacts: docker artifacts\n.PHONY: docker-push-artifacts\n\ndocker-marketplace:\n\tdocker build -f Dockerfile.marketplace --platform=linux/$(GOARCH) --load -t $(DOCKER_IMAGE_TAG) --build-arg savings_cut=${SAVINGS_CUT} .\n\tdocker push $(DOCKER_IMAGE_TAG)\n.PHONY: docker-marketplace\n\ndocker-marketplace-push-artifacts: docker-marketplace artifacts\n.PHONY: docker-marketplace-push-artifacts\n\nupload: artifacts                                ## Upload data to S3\n\taws s3 sync build/s3/ s3://$(BUCKET_NAME)/\n.PHONY: upload\n\nvet-check:                                                   ## Verify vet compliance\n\t@go vet -all ./...\n.PHONY: vet-check\n\nfmt-check:                                                   ## Verify fmt compliance\n\t@sh -c 'test -z \"$$(gofmt -l -s -d . | tee /dev/stderr)\"'\n.PHONY: fmt-check\n\nmodule-check: build_deps                                     ## Verify that all changes to go.mod and go.sum are checked in, and fail otherwise\n\t@go mod tidy -v\n\tgit diff --exit-code HEAD -- go.mod go.sum\n.PHONY: module-check\n\ntest:                                                        ## Test go code and coverage\n\t@go test -covermode=count -coverprofile=$(COVER_PROFILE) ./...\n.PHONY: test\n\nlint: build_deps\n\t@golint -set_exit_status ./...\n.PHONY: lint\n\nfull-test: fmt-check vet-check test lint                     ## Pass test / fmt / vet / lint\n.PHONY: full-test\n\nhtml-cover: test                                             ## Display coverage in HTML\n\t@go tool cover -html=$(COVER_PROFILE)\n.PHONY: html-cover\n\nci-cover: html-cover                                         ## Test & generate coverage in the TravisCI format, fails unless executed from TravisCI\nifdef COVERALLS_TOKEN\n\t@goveralls -coverprofile=$(COVER_PROFILE) -service=travis-ci -repotoken=$(COVERALLS_TOKEN)\nendif\n.PHONY: ci-cover\n\nci-checks: fmt-check vet-check module-check test lint             ## Pass fmt / vet & lint format\n.PHONY: ci-checks\n\nci: build artifacts ci-checks ci-cover                               ## Executes inside the CI Docker builder\n.PHONY: ci\n\nci-docker:                                                   ## Executed by CI\n\t@docker-compose up --build --abort-on-container-exit --exit-code-from autospotting\n.PHONY: ci-docker\n\nhelp:                                                        ## Show this help\n\t@printf \"Rules:\\n\"\n\t@fgrep -h \"##\" $(MAKEFILE_LIST) | fgrep -v fgrep | sed -e 's/\\\\$$//' | sed -e 's/##//'\n.PHONY: help\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.4140625,
          "content": "<!-- markdownlint-disable MD003 MD026 MD033 -->\n\n## AutoSpotting - Community Edition ##\n\nMost new features, bug fixes and improvements for increased reliability and better performance developed by the main author after July 2022 are\nonly available in the commercial version of AutoSpotting, available on the AWS \n[Marketplace](https://aws.amazon.com/marketplace/pp/prodview-6uj4pruhgmun6). The only exception are security\nfixes, which will be patched in the Community Edition on a best effort basis.\n\nIf you notice any issues in the Community Edition feel free to report them but they are not being worked on\nby LeanerCloud anymore. Chances are they are already solved in the Commercial Edition, so you may want to \ntry that out.\n\nBug fixes and new features contributed by the community are welcome and will\nremain available in the Community Edition indefinitely.\n\nThe list of ehnancements in the Commercial edition is documented in detail \n[here](https://github.com/LeanerCloud/AutoSpotting/discussions/489), but you can see below a brief feature comparison of AutoSpotting options vs. AWS AutoScaling groups.\n\n| **Feature**                                                | **Autoscaling Groups**              | **AutoSpotting Community Edition**             | **AutoSpotting Commercial**        |\n|------------------------------------------------------------|-------------------------------------|------------------------------------------------|------------------------------------|\n| Easy configuration rollout using tags                      | ❌                                  | ✅                                             | ✅                                 |\n| Automated Spot instance type diversification               | If using attribute based selection  | ✅                                             | ✅                                 |\n| Allocation policy with bias for new instance types         | ❌                                  | ✅                                             | ✅                                 |\n| Spot event handling - Rebalancing Recommendation           | Optional                            | ✅ (Default - increased instance churn!)       | Optional                           |\n| Spot event handling - Termination Notification             | ❌                                  | Optional                                       | ✅ (Default - less instance churn) |\n| Spot event handling - Replacement with a new Spot instance | Requires Rebalancing Recommendation | ✅ Via Spot termination + ASG OnDemand launch  | ✅ Proactive                       |\n| Load balancer and Target Group TCP connection draining     | ✅                                  | ✅ (Relying on Autoscaling)                    | ✅ Proactive                       |\n| Automated ECS task draining                                | Requires UserData script changes    | Requires UserData script changes               | ✅                                 |\n| Failover to on-demand instances                            | ❌                                  | ✅ Relies on Autoscaling to Launch replacement | ✅ Proactive                       |\n| Instance type diversification for On-Demand Failover       | ❌                                  | ❌ (Single instance type from Launch Template) | ✅ (Same diversification as Spot)  |\n| Automated Spot product handling                            | ❌                                  | ❌                                             | ✅                                 |\n| Main deployment region                                     | N/A                                 | ❌ (N. Virginia only)                          | ✅ (Any region)                    |\n| Parallel instance type replacement                         | N/A                                 | ❌                                             | ✅                                 |\n| Recent instance type coverage                              | N/A                                 | ❌                                             | ✅                                 |\n| Auto-update instance type information                      | If using attribute based selection  | ❌                                             | Optional                           |\n| Savings reports email                                      | ❌                                  | ❌                                             | ✅                                 |\n| Relax EBS bandwidth checks for increased diversification   | N/A                                 | ❌                                             | ✅                                 |\n| Reuse ASG Launch Template when launching Spot instances    | N/A                                 | ❌                                             | ✅                                 |\n| Support Autoscaling Groups with a Mixed Instances Policy   | ✅                                  | ❌ (silently fails for such groups)            | ✅                                 |\n| Costs                                                      | Free (AWS Service)                  | Free and open source                          | 5% of savings from OnDemand        |\n\n\n\n<img src=\"logo.png\" width=\"150\" align=\"right\">\n\n[![slack](https://img.shields.io/badge/slack-chat-brightgreen.svg?logo=slack)](https://join.slack.com/t/leanercloud/shared_invite/zt-xodcoi9j-1IcxNozXx1OW0gh_N08sjg)\n[![GoReportCard](https://goreportcard.com/badge/github.com/LeanerCloud/AutoSpotting)](https://goreportcard.com/report/github.com/LeanerCloud/AutoSpotting)\n[![Patreon](https://img.shields.io/badge/patreon-donate-yellow.svg)](https://www.patreon.com/cristim/overview)\n\n# About AutoSpotting\n\n\nAutoSpotting is the leading open source spot market automation tool, optimized\ntowards quick/easy/frictionless adoption of EC2 Spot instances at any scale.\n\nSince its launch in 2016, it's being used by thousands of users around the world,\ncompanies of all shapes and sizes, in aggregate saved them in the \nhundreds of millions of dollars so far as per our current estimations.\n\nIt is usually set up to monitor existing long-running AutoScaling groups,\nreplacing their instances with Spot instances, with minimal configuration\nchanges.\n\nOften all it needs is just tagging the AutoScaling groups with `spot-enabled=true`,\n(in some cases even that can be avoided), yielding the usual 60%-90% Spot cost\nsavings but in a better integrated and easier to adopt way\nthan other alternative tools and solutions.\n\nIt is particularly useful if you have a large footprint that you want to migrate\nto Spot quickly due to management pressure but with minimal effort and configuration\nchanges.\n\n## Demo\n\nHere's a demo of AutoSpotting and the way it integrates with the new [Spot Savings Estimator GUI](https://github.com/LeanerCloud/savings-estimator). (Click to open on YouTube)\n\n[![Demo of AutoSpotting with the Savings Estimator](https://img.youtube.com/vi/VXfCOXXtLwA/maxresdefault.jpg)](https://youtu.be/VXfCOXXtLwA \"AutoSpotting and Savings Estimator demo\")\n\n## Guiding principles ##\n\n- Customer-focused, designed to maximize user benefits and reduce adoption friction\n- Safe and secure, hosted in your AWS account and with minimal required set of IAM permissions\n- Auditable OSS code base developed in the open\n- Inexpensive, easy to install and supported builds offered through the AWS Marketplace,\nwith comprehensive support and additional features geared towards production usage at scale.\n- Simple, minimalist implementation\n\n## Benefits compared to alternatives ##\n\n- automated failover to OnDemand instances in the event of lost Spot capacity\n- automated instance type selection for Spot diversification without configuration changes from a standard OnDemand setup, and no vendor lock-in\n- bias towards cheapest AND newest instance types\n\n## How does it work? ##\n\nOnce installed and enabled to run against existing on-demand\nAutoScaling groups, AutoSpotting gradually replaces their on-demand instances\nwith cheaper spot instances that are at least as large and identically\nconfigured to the group's members, without changing the group launch\nconfiguration in any way. You can also keep running a configurable number of\non-demand instances given as percentage or absolute number and it automatically\nfails over to on-demand in case of spot instance terminations.\n\nGoing forward, as well as on any new ASGs that match the expected tags, any new\non-demand instances above the amount configured to be kept running will be immediately\nreplaced with spot clones within seconds of being launched.\n\nIf this fails temporarily due to insufficient spot capacity, AutoSpotting will\ncontinuously attempt to replace them every few minutes until successful after\nspot capacity becomes available again.\n\nWhen launching Spot instances, the compatible instance types are chosen by\ndefault using a the\n[capacity-optimized-prioritized](https://docs.amazonaws.cn/en_us/AWSEC2/latest/UserGuide/ec2-fleet-examples.html#ec2-fleet-config11)\nallocation strategy, which is given a list of instance types sorted by price. This\nconfiguration offers a good tradeoff between low cost and significantly reduced\ninterruption rates. The lowest-price allocation strategy is still available as a\nconfiguration option.\n\nA single installation can handle all enabled groups from an entire AWS account in\nparallel across all available AWS regions, but it can be restricted to fewer\nregions if desired in certain situations.\n\nYour groups will then monitor and use these Spot instances just like they would\ndo with your on-demand instances. They will automatically join their respective\nload balancer and start receiving traffic once passing the health checks, and\nthe traffic would automatically be drained on termination.\n\nSee this video for more imformation on AutoSpotting.\nhttps://youtu.be/foobAmWpexI\n\n## What savings can I expect? ##\n\nThe savings it generates are in the 60-90% range usually seen when using spot\ninstances, but they may vary depending on region and instance type.\n\n## What's under the hood? ##\n\nThe entire logic described above is implemented in a set of Lambda functions\ndeployed using CloudFormation or Terraform stacks that can be installed and\nconfigured in just a few minutes.\n\nThe stack uses the minimal set of IAM permissions required for them to\nwork and requires no admin-like cross-account permissions. The entire code base\ncan be audited to see how these permissions are being used and even locked down\nfurther if your audit discovers any issues. **This is not a SaaS**, there's no\ncomponent that calls home or reveals any details about your infrastructure.\n\nThe main Lambda function is written in the Go programming language and the code\nis compiled as a static binary. As of August 2021 this has been included in a\nDocker image used by the Lambda function.\n\nThe stack also consists of a few CloudWatch event triggers, that run the Lambda\nfunction periodically and whenever it needs to take action against the enabled\ngroups. Between runs your group is entirely managed by AutoScaling (including\nany scaling policies you may have) and load balancer health checks, that can\ntrigger instance launches or replacements using the original on-demand launch\nconfiguration.\n\nRead [here](TECHNICAL_DETAILS.md) for more information and implementation\ndetails.\n\n## FAQs ##\n\nMany Frequently Asked Questions about the project are answered in the\n[FAQ](https://autospotting.io/faq), *please read this first before\nasking for support*.\n\nIf you have additional questions not covered there, reach out to us on \n[Slack](https://join.slack.com/t/leanercloud/shared_invite/zt-xodcoi9j-1IcxNozXx1OW0gh_N08sjg)\nand we're happy to help.\n\n## Getting Started ##\n\nIt's usually as easy as launching a CloudFormation (or\n[Terraform](https://github.com/AutoSpotting/terraform-aws-autospotting)) stack\nand setting the (configurable) `spot-enabled` tag on the AutoScaling groups\nwhere you want it enabled to `true`.\n\nWhen installed from the AWS\n[marketplace](https://aws.amazon.com/marketplace/pp/prodview-6uj4pruhgmun6), all\nthe required infrastructure and configuration will be created automatically, so\nyou can get started as fast as possible. Otherwise you'll need to build it\nyourself as per the instructions available [here](CUSTOM_BUILDS.md).\n\nFor more detailed information on how to get started you can also read this\n[document](START.md)\n\n## Support ##\n\nMarketplace subscribers can get support on [Slack](https://join.slack.com/t/leanercloud/shared_invite/zt-xodcoi9j-1IcxNozXx1OW0gh_N08sjg)\nand any feature requests or issues raised via this communication channel\nwill be prioritized.\n\nCommunity support is available to OSS users on the\n[gitter](https://gitter.im/cristim/autospotting) chat room, where the main\nauthors and other users are likely to help you solve issues. This is offered on\na best effort basis and under certain conditions, such as using the latest\nversion of the software available on the main Github branch, without any code\ncustomizations and using the default configuration options.\n\nIf you need help for a large scale rollout or migrating from alternative\ntools/solutions get in touch on [gitter](https://gitter.im/cristim).\n\n## Contributing ##\n\nAutoSpotting is open source and developed in the open by a vibrant\ncommunity of dozens of contributors.\n\nThe Community Edition is open for contributions, submitted according to the contribution\n[guidelines](CONTRIBUTING.md).\n\nIndividuals and companies supporting the development of the open source code\nget free of charge support in getting their code merged upstream.\n\n### Community Edition ###\n\nThe source code from this repo is and will always be open source, so you can build and run\nit yourself, see how it works and even enhance it if you want.\n\nAny external contributions to the Community Edition will be remain available to all\nCommunity Edition users, but also included in future versions of the commercial edition.\n\n### Subscriptions ###\n\nA free low traffic mailing list is available on [Beehiiv](https://leanercloud.beehiiv.com/), where\nyou can sign up for occasional emails related to the project, mainly related to\nmajor changes in the open source code, savings tips or announcements about other\ntools I've been working on.\n\nAnnouncements on new Marketplace releases, including comprehensive release\nnotes, upgrade instructions and tips to get the most out of AutoSpotting will be\ncommunicated in private to Patreon\n[subscribers](https://www.patreon.com/cristim/overview).\n\nA Github [sponsors](https://github.com/sponsors/cristim) subscription is also\navailable for people interested in the ongoing development of AutoSpotting, with\ntiers covering anything from a non-strings attached donation, prioritization of\nfeature requests, all the way to custom features development and maintenance of\nprivate customized forks.\n\nPlease get in touch on [gitter](https://gitter.im/cristim) if you have any\nquestions about these offerings or if you have any other ideas on how I could\nprovide additional value to my community.\n\n## Compiling and Installing ##\n\nIt is recommended to use the commercial offering available on the\nAWS marketplace, which is more feature-complete, easier to install, supports\nfurther development of the software and includes comprehensive support.\n\nBut if you have some special needs that require some customizations,\nyou can always build and run your customized binaries\nthat you maintain on your own.\n\nMore details are available [here](CUSTOM_BUILDS.md)\n\n## License ##\n\nThis software is distributed under the terms of the OSL-3.0 [license](LICENSE).\n\nThe AWS Marketplace offering is made available under the standard AWS\nMarketplace EULA.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.24609375,
          "content": "# Security Policy\n\n## Supported Versions\n\nThe current and previous stable version released to the Patreon backers.\n\n## Reporting a Vulnerability\n\nTo report a vulnerability use gitter.im/cristim or the Patreon chat function.\n\nI will release a fix ASAP.\n"
        },
        {
          "name": "START.md",
          "type": "blob",
          "size": 19.3359375,
          "content": "# Getting started #\n\n- [Getting started](#getting-started)\n  - [Binary License Notice](#binary-license-notice)\n  - [Requirements](#requirements)\n  - [Installation](#installation)\n    - [Installation options](#installation-options)\n    - [Install via CloudFormation](#install-via-cloudformation)\n    - [Install via terraform](#install-via-terraform)\n    - [Install as Kubernetes cronjob](#install-as-kubernetes-cronjob)\n  - [Enable autospotting](#enable-autospotting)\n    - [For an AutoScaling group](#for-an-autoscaling-group)\n    - [For Elastic Beanstalk](#for-elastic-beanstalk)\n      - [1 - Add the `spot-enabled` tag](#1---add-the-spot-enabled-tag)\n      - [2 - Enable `patch_beanstalk_userdata` in AutoSpotting (optional)](#2---enable-patch_beanstalk_userdata-in-autospotting-optional)\n  - [Configuration of AutoSpotting](#configuration-of-autospotting)\n    - [Testing configuration](#testing-configuration)\n      - [Note](#note)\n    - [Running configuration](#running-configuration)\n      - [Minimum on-demand configuration](#minimum-on-demand-configuration)\n    - [Debugging](#debugging)\n  - [Updates and Downgrades](#updates-and-downgrades)\n    - [Compatibility notices](#compatibility-notices)\n  - [Uninstallation](#uninstallation)\n    - [Uninstall via CloudFormation](#uninstall-via-cloudformation)\n\n## Binary License Notice ##\n\nThe pre-build Docker image mentioned in this page is distributed under a\nproprietary [license](BINARY_LICENSE), and can only be used for evaluation\npurposes. It expires automatically a month after it was built.\n\nStable builds, which will work indefinitely, have been thoroughly tested and\ncome with enterprise-grade support are available on the AWS\n[marketplace](https://aws.amazon.com/marketplace/pp/prodview-6uj4pruhgmun6).\n\n## Requirements ##\n\n- You will need credentials to an AWS account able to start CloudFormation\n  stacks.\n- Some of the following steps assume you have the AWS cli tool installed, but\n  the setup can also be done manually using the AWS console or using other tools\n  able to launch CloudFormation stacks and set tags on AutoScaling groups.\n\n## Installation ##\n\n### Installation options ###\n\nAutoSpotting can be installed via CloudFormation or Terraform, both install\nmethods take a number of parameters, which allows you to configure it for\nyour own environment. The defaults should be safe enough for most use cases,\nbut for testing or more advanced use cases you may want to tweak some of them.\n\nSome parameters control the Lambda runtime, while others allow tweaking the\nAutoSpotting algorithm, for example to keep a certain amount of on-demand\ncapacity in the group, or run only against some AWS regions.\n\nThe algorithm parameters are just global defaults that can often be overridden\nat the AutoScaling group level based on additional tags set on the group.\n\nThe full list of parameters, including relatively detailed explanations about\nthem and their overriding group tags can be seen in the CloudFormation AWS\nconsole or in the variables.tf file for Terraform.\n\nIn case you may want to change some of them later, you can do it at any time by\nupdating the stack via CloudFormation or Terraform.\n\nNote: even though the CloudFormation stack template is not changing so often\nand it may often support multiple software versions, due to possible\ncompatibility issues, it is recommended to also update the stack template when\nupdating the software version.\n\n### Install via CloudFormation ###\n\nTo install it via CloudFormation, you only need to launch a CloudFormation\nstack in your account. Click the button below and follow the launch wizard to\ncompletion, you can safely use the default stack parameters.\n\n[![Launch](https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png)](https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=AutoSpotting&templateURL=https://s3.amazonaws.com/cloudprowess/nightly/template.yaml)\n\nIf you are using the AWS command-line tool, you can use this command instead:\n\n``` shell\naws cloudformation create-stack \\\n--stack-name AutoSpotting \\\n--template-url https://s3.amazonaws.com/cloudprowess/nightly/template.yaml \\\n--capabilities CAPABILITY_IAM\n```\n\nNotes:\n\n- For technical reasons the stack launched from the official binaries needs to\n  be launched in the US-East-1(Virginia) region, so make sure it's not created\n  in another region. Custom builds can be deployed in any region you prefer,\n  just make sure your S3 bucket is in that region.\n- The AutoScaling groups it runs against can be in any region, since all regions\n  are processed at runtime, unless configured otherwise.\n\n### Install via terraform ###\n\nA terraform module for AutoSpotting is published in at [https://github.com/AutoSpotting/terraform-aws-autospotting](https://github.com/AutoSpotting/terraform-aws-autospotting).\n\n### Install as Kubernetes cronjob ###\n\nWe have an example configuration file that allows you to run AutoSpotting as a\nKubernetes cron job, instead of running it in AWS Lambda.\n\n<!-- markdownlint-disable MD013 -->\n\n``` shell\ncurl https://raw.githubusercontent.com/AutoSpotting/AutoSpotting/master/kubernetes/autospotting-cron.yaml.example > autospotting-cron.yaml\n```\n\n<!-- markdownlint-enable MD013 -->\n\nYou can then edit it locally, tweaking it to suit your needs.\nOnce you're happy with it, you can launch it on your Kubernetes cluster:\n\n``` shell\nkubectl create -f kubernetes/autospotting-cron.yaml\n```\n\nYou can tweak the configuration later using `kubectl edit cronjob autospotting`.\n\nKeep in mind that this job automatically updates to the latest official\nbinaries, so you may want to host your own Docker images if you want to stick to\na certain version or you don't want to comply with the terms of our binary\nlicense.\n\n## Enable autospotting ##\n\n### For an AutoScaling group ###\n\nSince AutoSpotting by default uses an opt-in model, no resources will be changed\nin your AWS account if you just launch the stack. You will need to explicitly\nenable it for each AutoScaling group where you want it to be used.\n\nEnabling it for an AutoScaling group is a matter of setting a tag on the group:\n\n``` yaml\nKey: spot-enabled\nValue: true\n```\n\nThis can be configured with the AWS console from [this\nview](https://console.aws.amazon.com/ec2/autoscaling/home?region=eu-west-1#AutoScalingGroups:view=details),\n\nIf you use the AWS command-line tools, the same can be achieved using this\ncommand:\n\n``` shell\naws autoscaling\n--region eu-west-1 \\\ncreate-or-update-tags \\\n--tags ResourceId=my-auto-scaling-group,ResourceType=auto-scaling-group,Key=spot-enabled,Value=true,PropagateAtLaunch=false\n```\n\n**Note:** the above instructions use the eu-west-1 AWS region as an example.\nDepending on where your groups are defined, you may need to use a different\nregion, since as mentioned before, your environments may be located anywhere.\n\nThis needs to be done for every single AutoScaling group where you want it\nenabled, otherwise the group is ignored. If you have lots of groups you may\nwant to script it in some way.\n\nOne good way to automate is using CloudFormation, using this example snippet:\n\n``` json\n\"MyAutoScalingGroup\": {\n  \"Properties\": {\n    \"Tags\":[\n    {\n      \"Key\": \"spot-enabled\",\n      \"Value\": \"true\",\n      \"PropagateAtLaunch\": false\n    }\n    ]\n  }\n}\n```\n\n**Note:** The `spot-enabled=true` tag for `opt-in` is configurable. See the\nstack parameters for the way to override it.\n\n**Note:** AutoSpotting now also supports an `opt-out` mode, in which it will\ntake over all your groups except of those tagged with the configured tag. The\ndefault (but also configurable) `opt-out` tag is `spot-enabled=false`. This may\nbe risky, please handle with care.\n\n### For Elastic Beanstalk ###\n\nElastic Beanstalk uses CloudFormation to create an Auto-Scaling Group. The ASG\nis then in charge of automatically scaling your application up and down. As a\nresult, AutoSpotting works natively with Elastic Beanstalk.\n\nFollow these steps to configure AutoSpotting with Elastic Beanstalk.\n\n#### 1 - Add the `spot-enabled` tag ####\n\nSimilar to standalone auto-scaling groups, you need to tag your Elastic Beanstalk\nenvironment with the `spot-enabled` tag to let AutoSpotting manage the instances\nin the group.\n\nTo add tags to an existing Elastic Beanstalk environment, you will need to rebuild\nor update the environment with the `spot-enabled` tag. For more details you can\nfollow this [guide](http://www.boringgeek.com/add-or-update-tags-on-existing-elastic-beanstalk-environments).\n\n#### 2 - Enable `patch_beanstalk_userdata` in AutoSpotting (optional) ####\n\nElastic Beanstalk leverages CloudFormation for creating resources and initializing\ninstances. When a new instance is launched, Elastic Beanstalk configures it through\nthe auto-scaling configuration (`UserData` and tags).\n\nAutoSpotting launches spot instances outside of the auto-scaling group and attaches\nthem to the group after a grace period. As a result, the Elastic Beanstalk\ninitialization process can randomly fail or be delayed by 10+ minutes.\nWhen it is delayed, the spot instances take a long time (10+ minutes) before being\ninitialized, appearing as healthy in Elastic Beanstalk and being added\nto the load balancer.\n\nAs a solution, you can configure AutoSpotting to alter the Elastic Beanstalk\nuser-data so that the Elastic Beanstalk initialization process can run even\nif the spot instance is not a part of the auto-scaling group.\n\nTo enable that option, set the `patch_beanstalk_userdata` variable to `true`\nin your configuration.\n\nYou will also need to update the permissions of the role used by your instances\nto authorize requests to the CloudFormation API. Add the `AutoSpottingElasticBeanstalk`\npolicy to the role `aws-elasticbeanstalk-ec2-role` or the custom instance profile/role\nused by your Beanstalk instances.\n\nThe permissions contained in `AutoSpottingElasticBeanstalk` are required if you set\n`patch_beanstalk_userdata` variable to `true`. If they are not added, your spot\ninstances will not be able to run correctly.\n\nYou can get more information on the need for this configuration variable and\nthe permissions in the [bug report](https://github.com/AutoSpotting/AutoSpotting/issues/344).\n\n## Configuration of AutoSpotting ##\n\n### Testing configuration ###\n\nNormally AutoSpotting runs from AWS Lambda, but for testing purposes it can also\nbe compiled and executed locally as a command-line tool, which can be very\nuseful for troubleshooting, implementing and testing new functionality.\n\nThe algorithm can use custom command-line flags. Much like many other\ncommand-line tools, you can use the `-h` command line flag to see all the\navailable options:\n\n<!-- markdownlint-disable MD013 -->\n\n``` text\n$ ./AutoSpotting -h\nUsage of ./AutoSpotting:\n  -allowed_instance_types=\"\":\n        If specified, the spot instances will be of these types.\n        If missing, the type is autodetected frome each ASG based on it's Launch Configuration.\n        Accepts a list of comma or whitespace seperated instance types (supports globs).\n        Example: ./AutoSpotting -allowed_instance_types 'c5.*,c4.xlarge'\n\n  -bidding_policy=\"normal\":\n        Policy choice for spot bid. If set to 'normal', we bid at the on-demand price.\n        If set to 'aggressive', we bid at a percentage value above the spot price configurable using the spot_price_buffer_percentage.\n\n  -disallowed_instance_types=\"\":\n        If specified, the spot instances will _never_ be of these types.\n        Accepts a list of comma or whitespace seperated instance types (supports globs).\n        Example: ./AutoSpotting -disallowed_instance_types 't2.*,c4.xlarge'\n\n  -min_on_demand_number=0:\n        On-demand capacity (as absolute number) ensured to be running in each of your groups.\n        Can be overridden on a per-group basis using the tag autospotting_min_on_demand_number.\n\n  -min_on_demand_percentage=0:\n        On-demand capacity (percentage of the total number of instances in the group) ensured to be running in each of your groups.\n        Can be overridden on a per-group basis using the tag autospotting_min_on_demand_percentage\n        It is ignored if min_on_demand_number is also set.\n\n  -on_demand_price_multiplier=1:\n        Multiplier for the on-demand price. This is useful for volume discounts or if you want to\n        set your bid price to be higher than the on demand price to reduce the chances that your\n        spot instances will be terminated.\n\n  -regions=\"\":\n        Regions where it should be activated (comma or whitespace separated list, also supports globs), by default it runs on all regions.\n        Example: ./AutoSpotting -regions 'eu-*,us-east-1'\n\n  -spot_price_buffer_percentage=10:\n        Percentage Value of the bid above the current spot price. A spot bid would be placed at a value :\n        current_spot_price * [1 + (spot_price_buffer_percentage/100.0)]. The main benefit is that\n        it protects the group from running spot instances that got significantly more expensive than\n        when they were initially launched, but still somewhat less than the on-demand price. Can be\n        enforced using the tag: autospotting_spot_price_buffer_percentage. If the bid exceeds\n        the on-demand price, we place a bid at on-demand price itself.\n\n  -spot_product_description=\"Linux/UNIX (Amazon VPC)\":\n        The Spot Product or operating system to use when looking up spot price history in the market.\n        Valid choices: Linux/UNIX | SUSE Linux | Windows | Linux/UNIX (Amazon VPC) | SUSE Linux (Amazon VPC) | Windows (Amazon VPC)\n  -spot_product_premium=0:\n        The Product Premium to apply to the on demand price to improve spot\n        selection and savings calculations when using a premium instance type\n        such as RHEL.\n\n  -tag_filters=[{spot-enabled true}]: Set of tags to filter the ASGs on.  Default is -tag_filters 'spot-enabled=true'\n        Example: ./AutoSpotting -tag_filters 'spot-enabled=true,Environment=dev,Team=vision'\n\n  -patch_beanstalk_userdata=\"true\":\n        Controls whether AutoSpotting patches Elastic Beanstalk UserData\n        scripts to use the instance role when calling CloudFormation\n        helpers instead of the standard CloudFormation authentication\n        method\n        Example: ./AutoSpotting --patch_beanstalk_userdata true\n```\n\n<!-- markdownlint-enable MD013 -->\n\nThe value of `-min_on_demand_number` has a higher priority than\n`-min_on_demand_percentage`, so if you specify both options in the command line,\npercentage will NOT be taken into account. It would be taken into account, ONLY\nif the `-min_on_demand_number` is invalid (negative, above the max number, etc).\n\nThe value of `-regions` controls the scope within which autospotting run, this\nis particularly useful when used during testing, in order to limit the scope of\naction and reduce the risk when evaluating it or experimenting with new\nfunctionality.\n\nAll the flags are also exposed as environment variables, expected in ALL_CAPS.\nFor example using the `-region` command-line flag is equivalent to using the\n`REGION` environment variable.\n\nWhen `tag_filters` is not passed, the default operation is to look for ASG's that\nhave the tag `spot-enabled=true`.   If you wish to narrow the operation of\nautospotting to ASGs that match more specific criteria you can specify the matching\ntags as you see fit.  i.e. `-tag_filters 'spot-enabled=true,Environment=dev,Team=vision'`\n\n#### Note ####\n\n- These configurations are also implemented when running from Lambda, where they\n  are actually passed as environment variables set by CloudFormation in the\n  Lambda function's configuration.\n- The above list may not be up-to-date, please run it locally to see the latest\n  list of supported flags, and if you notice any difference please report it in\n  a Pull request.\n\n### Running configuration ###\n\n#### Minimum on-demand configuration ####\n\nOn top of the CLI configuration for the on-demand instances, autospotting\ncan read those values from the tags of the auto-scaling groups. There are two\navailable tags: `autospotting_min_on_demand_number` and\n`autospotting_min_on_demand_percentage`.\n\nJust like for the CLI configuration the defined number has a higher priority\nthan the percentage value. So the percentage will be ignored if\n`autospotting_min_on_demand_number` is present and valid.\n\nThe order of priority from strongest to lowest for minimum on-demand\nconfiguration is as following:\n\n<!-- markdownlint-disable MD029 -->\n\n1. Tag `autospotting_min_on_demand_number` in ASG\n2. Tag `autospotting_min_on_demand_percentage` in ASG\n3. Option `-min_on_demand_number` in CLI\n4. Option `-min_on_demand_percentage` in CLI\n\n<!-- markdownlint-enable MD029 -->\n\n**Note:** the percentage does round up values. Therefore if we have for example\n3 instances running in an autoscaling-group, and you specify 10%, autospotting\nwill understand that you want 0 instances. If you specify 16%, then it will\nstill understand that you want 0 instances, because `0.16 * 3` is equal to\n`0.47999` so it is rounded down to 0; but if you specify 17%\n(or more than 16.66667%) then the algorithm understands that you want at least\none instance (`0.17 * 3 = 0.51`). All in all it should work as you expect, but\nthis was just to explain some more the functionning of the percentage's math.\n\n### Debugging ###\n\nIn certain situations you might want to add verbosity to the project in order\nto understand a bit better what it's doing. If you want to do so please run it\nwith the following environment variable `AUTOSPOTTING_DEBUG`.\n\nYou can do it locally with some custom binary:\n\n``` shell\n AUTOSPOTTING_DEBUG=true ./AutoSpotting\n```\n\nOr you can do it via the Lambda console under the `Environment variables`\nsection. Please note those variables aren't exposed via Cloudformation nor via\nterraform.\n\nPlease attach the debug output when reporting any issues.\n\n## Updates and Downgrades ##\n\nThe software doesn't auto-update, so you will need to manually perform updates\nusing CloudFormation, based on the Travis CI build number of the version you\nwould like to use going forward.\n\nThis method can be used both for upgrades and downgrades, so assuming you would\nlike to switch to the build with the number 45, you will need to perform a\nCloudFormation stack update in which you change the \"LambdaZipPath\" stack\nparameter to a value that looks like `nightly/lambda_build_45.zip`.\n\nGit commit SHAs(truncated to 7 characters) are also accepted instead of the\nbuild numbers, so for example `nightly/lambda_build_f7f395d.zip` should also be\na valid parameter, as long as that build is available in the author's S3 bucket.\n\nThe full list of the objects available in the bucket can be seen\n[here](http://s3.amazonaws.com/cloudprowess/index.html).\n\nThe full list of TravisCI builds and their respective git commits can be seen on\nthe Travis CI [builds page](https://travis-ci.org/AutoSpotting/AutoSpotting/builds)\n\n### Compatibility notices ###\n\n- The CloudFormation template is also versioned for every build. Although the\n  template rarely changes, it's recommended that you always keep it at the same\n  build number as the binary.\n\n## Uninstallation ##\n\nIf at some point you want to uninstall it, the AutoScaling groups where it used\nto be enabled will keep running until their spot instances eventually get\noutbid and terminated, then replaced by AutoScaling with on-demand ones. This\nis eventually bringing the group to the initial state. If you want, you can\nspeed up the process by gradually terminating the spot instances yourself.\n\nThe tags set on the group can be deleted at any time you want it to be disabled\nfor that group.\n\n### Uninstall via CloudFormation ###\n\nYou just need to delete the CloudFormation stack:\n\n``` shell\n aws cloudformation delete-stack --stack-name AutoSpotting\n```\n"
        },
        {
          "name": "TECHNICAL_DETAILS.md",
          "type": "blob",
          "size": 21.01953125,
          "content": "# Technical Details #\n\n<!-- markdownlint-disable MD013 -->\n\n## Summary of supported features & options ##\n\n| Option  | Status | [Override using ASG tags](https://github.com/AutoSpotting/AutoSpotting/blob/master/core/autoscaling.go#L16) |\n| ------- | :----: | :-------------------: |\n| Run on multiple regions | :white_check_mark:  (default: all)| :heavy_minus_sign: |\n| [Keep a fixed minimum percentage of on-demand](https://github.com/AutoSpotting/AutoSpotting/blob/master/START.md#minimum-on-demand-configuration) | :white_check_mark: (default: 0%) | :white_check_mark: |\n| [Keep a fixed minimum number of on-demand](https://github.com/AutoSpotting/AutoSpotting/blob/master/START.md#minimum-on-demand-configuration) | :white_check_mark: (default: 0) | :white_check_mark: |\n| Bid at a certain percentage of the on-demand price | :white_check_mark: (default: 100%) | :white_check_mark: |\n| Can bid the current spot price plus a certain percentage | :white_check_mark: | :white_check_mark: |\n| Automatically determine the cheapest compatible instance type | :white_check_mark: (default) | :white_check_mark: |\n| Can restrict to the same instance type only | :white_check_mark: - use `current` for the allowed instance types | :white_check_mark: - use `current` for the allowed instance types |\n| Can restrict to only certain instance types | :white_check_mark: | :white_check_mark: |\n| Blacklisting of certain instance types | :white_check_mark: | :white_check_mark: |\n| Filter on multiple & custom group tags | :white_check_mark:  (default: `spot-enabled=true`)  | :heavy_minus_sign: |\n| Configurable filtering modes(`opt-in` and `opt-out`) | :white_check_mark:  (default: `opt-in`)| :heavy_minus_sign: |\n| Set a desired spot product name | :white_check_mark: | :x: :wrench: - install multiple stacks, each with its own spot product|\n| Configurable spot termination notification action | :white_check_mark: (Only available when installed using CloudFormation) | :white_check_mark: (Only available when installed via CloudFormation) |\n\nFor the options not directly linked to any specific part of the doc, please\ncheck the\n[configuration](https://github.com/AutoSpotting/AutoSpotting/blob/master/START.md#configuration-of-autospotting) page.\n\n| Feature | Status |\n| ------- | :----: |\n| [Easy installation via Cloudformation](https://github.com/AutoSpotting/AutoSpotting/blob/master/START.md#install-via-cloudformation) | :white_check_mark: |\n| [Easy installation via Terraform](https://github.com/AutoSpotting/AutoSpotting/blob/master/START.md#install-via-terraform) | :white_check_mark: |\n| [Available as Docker container image](https://hub.docker.com/r/AutoSpotting/AutoSpotting/) | :white_check_mark: :wrench: |\n| [Installable as Kubernetes cron job](https://raw.githubusercontent.com/AutoSpotting/AutoSpotting/master/kubernetes/autospotting-cron.yaml.example) | :white_check_mark: :wrench: |\n| [Helm chart](https://github.com/reactiveops/charts/tree/master/incubator/autospotting) available as well | :white_check_mark: :wrench: |\n| [Works with Code Deploy](CODEDEPLOY.md) | :white_check_mark: :wrench: |\n| [Works with Elastic Beanstalk](https://github.com/AutoSpotting/AutoSpotting/blob/053135e97082511fb99b689dce4a7a7830f3327c/START.md#for-elastic-beanstalk) | :white_check_mark: |\n| Support AWS VPC| :white_check_mark: |\n| Support AWS EC2Classic| :wrench: - unsupported instance types need to be explicitely blacklisted |\n| Support AWS DefaultVPC| :white_check_mark: |\n| Automatically handles the spot termination signal | :white_check_mark: (Only available when installed using CloudFormation)|\n| Do not process AutoScaling groups while the CloudFormation stack that created them is in progress | :white_check_mark: |\n\n| Desired missing features | Status |\n| Lambda X-Ray support | :x: |\n| Graphing savings | :x: :wrench: - use the Billing dashboard |\n| Cleaner Windows support | :wrench: - set the proper Spot product on the stack |\n| SNS notifications on success/failure | :x: |\n\n<!-- markdownlint-enable MD013 -->\n\n### Meaning of the above icons ##\n\n- :white_check_mark: - supported and known to work well so far\n- :x: - not supported but its implementation has been considered or is awaiting\n  code contributions\n- :heavy_minus_sign: - not applicable, or already part of the default behavior.\n- :beetle: - implemented but experimental or known to be buggy\n- :wrench: - may require some workarounds, for example it may be done with\n  external tooling or may need additional configuration on your infrastructure\n- :pencil: - a workaround or complete fix can be implemented in a\n  custom/hardcoded fork with relatively little effort, but a proper fix ready to\n  be upstreamed needs more work.\n\nSome of them can be clicked for more information, you can see if you hover them\nwith your mouse pointer, but if you have any questions you can always get in\ntouch on [Gitter](https://gitter.im/cristim/autospotting).\n\n## Features and Benefits ##\n\n- **Significant cost savings compared to on-demand or reserved instances**\n  - up to 90% cost reduction compared to on-demand instances.\n  - up to 75% cost reduction compared to reserved instances, without any\n    down-payment or long term commitment.\n\n- **Easy to install and set up on existing environments based on AutoScaling**\n  - you can literally get started within minutes.\n  - only needs to be installed once, in a single region, and can handle all\n    other regions without any additional configuration (but can also be\n    restricted to just a few regions if desired).\n  - easy to enable and disable for reverting to the initial configuration based\n    on resource tagging, if you decide you don't want to use it anymore.\n  - easy to automate migration of multiple existing stacks, simply using scripts\n    that set the expected tags on multiple AutoScaling groups.\n\n- **Designed for use against AutoScaling groups with relatively long-running\n    instances**\n  - for use cases where it is acceptable to run on-demand instances from time to\n    time.\n  - for short-term batch processing use cases you should have a look into the\n    [spot\n    blocks](https://aws.amazon.com/blogs/aws/new-ec2-spot-blocks-for-defined-duration-workloads/)\n    instead.\n\n- **It doesn't interfere with the group's original launch configuration**\n  - any instance replacement or scaling done by AutoScaling would still launch\n    your previously configured on-demand instances.\n  - on-demand instances often launch faster than spot ones so you don't need to\n    wait for potentially slower spot instance fulfilment when you need to scale\n    out or when you eventually lose some of the spot capacity.\n\n- **Supports any higher level AWS services internally backed\n    by AutoScaling**\n  - services such as ECS or Elastic Beanstalk work out of the box with minimal\n    configuration changes or tweaks.\n\n- **Compatible out of the box with most AWS services that integrate\n    with AutoScaling groups**\n  - services such as ELB, ALB, [CodeDeploy](CODEDEPLOY.md), CloudWatch, etc.\n    should work out of the box or at most require minimal configuration changes.\n  - as long as they support instances attached later to existing groups.\n  - any other 3rd party services that run on top of AutoScaling groups should\n    work as well.\n\n- **Can automatically replace any instance types with any instance types\n    available on the spot market**\n  - as long as they are cheaper and at least as big as the original instances.\n  - it doesn't matter if the original instance is available on the spot market:\n    for example it is often replacing t2.medium with better m4.large instances,\n    as long as they happen to be cheaper.\n\n- **Self-hosted**\n  - has no runtime dependencies on external infrastructure except for the\n    regional EC2 and AutoScaling API endpoints.\n  - it's not a SaaS, it fully runs within your AWS account.\n  - it doesn't gather/persist/export any information about the resources running\n    in your AWS account.\n\n- **Free and open source**\n  - there are no service fees at install time or run time.\n  - you only pay for the small runtime costs it generates.\n  - open source, so it is fully auditable and you can see the logs of everything\n    it does.\n  - the code is relatively small and simple so in case of bugs or missing\n    features you may even be able to fix it yourself.\n\n- **Negligible runtime costs**\n  - you only pay for the bandwidth consumed performing API calls against AWS\n  services across different regions.\n  - backed by Lambda, with typical monthly execution time well within the Lambda\n  free tier plan.\n\n- **Minimalist and simple implementation**\n  - currently about 1000 CLOC of relatively readable Golang code.\n  - stateless, and without many moving parts.\n  - leveraging and relying on battle-tested AWS services - namely AutoScaling -\n    for most mission-critical things, such as instance health checks, horizontal\n    scaling, replacement of terminated instances, integration with, ELB, ALB and\n    CloudWatch.\n\n- **Relatively safe and secure**\n  - most runtime failures or crashes(quite rare nowadays) tend to be harmless.\n  - often only result in failing to start new spot instances so your group will\n    simply remain or fall back to on-demand capacity, just as it was before.\n  - in most cases it is not impacting your running instances nor the ability to\n    launch new ones.\n  - only needs the minimum set of IAM permissions needed for it to do its job.\n  - does not delegate any IAM permissions to resources outside of your AWS\n    account.\n  - execution scope can be limited to a certain set of regions.\n\n- **Optimizes for high availability over cost whenever possible**\n  - it tries to diversify the instance types to reduce the chance of\n    simultaneous failures across the entire group. When having enough desired\n    capacity, it is often spreading over four different spot pricing zones\n    (instance type/availability zone combinations).\n  - supports keeping a configurable number of on-demand instances in the group,\n    either an absolute number or a percentage of the instances from the group.\n\n- **Automatically handles the spot termination notifications**\n  - see the dedicated section below for more details\n\n## Replacement logic ##\n\nOnce enabled on an AutoScaling group, it is gradually replacing all the\non-demand instances belonging to the group with compatible and similarly\nconfigured but cheaper spot instances.\n\nThe replacements are done using the relatively new Attach/Detach actions\nsupported by the AutoScaling API. A new compatible spot instance is launched,\nand it will be immediately attached to the group, while at the same time an\non-demand instance is detached from the group and terminated in order to keep\nthe group at constant capacity.\n\nWhen assessing the compatibility, it takes into account the hardware specs, such\nas CPU cores, RAM size, attached instance store volumes and their type and size,\nas well as the supported virtualization types (HVM or PV) of both instance\ntypes. The new spot instance is usually a few times cheaper than the original\ninstance, while also often providing more computing capacity.\n\nThe new spot instance is configured with the same roles, security groups and\ntags and set to execute the same user data script as the original instance, so\nfrom a functionality perspective it should be indistinguishable from other\ninstances in the group, although its hardware specs may be slightly\ndifferent(again: at least the same, but often can be of bigger capacity).\n\nWhen replacing multiple instances in a group, the algorithm tries to use a wide\nvariety of instance types, in order to reduce the probability of simultaneous\nfailures that may impact the availability of the entire group. It always tries\nto launch the cheapest available compatible instance type, but if the group\nalready has a considerable amount of instances of that type in the same\navailability zone (currently more than 20% of the group's capacity is in that\nzone and of that instance type), it picks the second cheapest compatible\ninstance, and so on.\n\nDuring multiple replacements performed on a given group, it only swaps them one\nat a time per Lambda function invocation, in order to not change the group too\nfast, but instances belonging to multiple groups can be replaced concurrently.\nIf you find this slow, the Lambda function invocation frequency (defaulting to\nonce every 30 minutes) can be changed by updating the stack, which has a\nparameter for it.\n\nIn the (so far unlikely) case in which the market price is high enough that\nthere are no spot instances that can be launched, (and also in case of software\ncrashes which may still rarely happen), the group would not be changed and it\nwould keep running as it is, but AutoSpotting will continuously attempt to\nreplace them, until eventually the prices decrease again and replacements may\nsucceed again.\n\n## Internal components ##\n\nWhen deployed, the software consists on a number of resources running in your\nAmazon AWS account, created automatically with CloudFormation or Terraform:\n\n### Event generator ###\n\nCloudWatch event source used for triggering the Lambda function. The default\nfrequency is every 30 minutes, but it is configurable using stack parameters.\n\n### Lambda function ###\n\n- AWS Lambda function connected to the event generator, which triggers it\n  periodically.\n- It has assigned a IAM role and policy with a set of permissions to call the\n  APIs of various AWS services(EC2 and AutoScaling for now) within the user's\n  account.\n- The permissions are the minimal set required for it to work without the need\n  of passing any explicit AWS credentials or access keys.\n- Some algorithm parameters can be configured using Lambda environment\n  variables, based on some of the stack parameters.\n- Contains a handler written in Golang which implements all the instance\n  replacement logic.\n- The spot instances are created by duplicating the configuration of the\n  currently running on-demand instances as closely as possible(IAM roles,\n  security groups, user_data script, etc.), maybe changing the instance type\n  to a usually bigger, but compatible one.\n- The Spot price is set by default to the on-demand price of the instances configured\n  initially on the AutoScaling group, but this is configurable.\n- The new launch configuration may also have a different instance type,\n  determined based on compatibility with the original instance type,\n  considering also how much redundancy we need to have in place in the current\n  availability zone, in order to survive instance termination when outbid for\n  a certain instance type.\n\n## Regional spot termination stacks ##\n\n- Additional CloudFormation stacks automatically deployed in every region when\n  installing the main CloudFormation stack (currently not supported when\n  installing using Terraform)\n- Install a few regional components (SNS topic, CloudWatch event rule, regional\n  Lambda function, etc.) configured to trigger the main Lambda function deployed\n  in us-east-1 when instances in the current region are about to be terminated.\n- The main Lambda function will take action based on these events. By default it\n  will terminate the instance (executing its termination lifecycle hooks) if\n  these lifecycle hooks are defined. Alternatively it will detach the instance\n  from its AutoScaling group which will detach it from the load balancer as\n  early as possible.\n\n## Running example ##\n\n![Workflow](https://autospotting.org/img/autospotting.gif)\n\nIn this case the initial instance type was quite expensive, so the algorithm\nchose a different type that had more computing capacity. At the end that group\nhad 3x more CPU cores and 66% more RAM than in the initial state of the group,\nand all this with 33% cost savings and without running entirely on spot\ninstances, since some users find that a bit risky.\n\nNevertheless, AutoSpotting tends to be quite reliable even on all-spot\nconfigurations (has automated failover to on-demand nodes and spreads over\nmultiple price zones), where it can often achieve savings up to 90% off\nthe usual on-demand prices, much like in the 85% price reduction shown below.\nThis was seen on a group of two m3.medium instances running in eu-west-1:\n\n![Savings Graph](https://autospotting.org/img/autospotting-savings.png)\n\n## Best Practices ##\n\nThese recommendations apply for most cloud environments, but they become\nespecially important when using more volatile spot instances.\n\n- **Set a non-zero grace period on the AutoScaling group**\n  - in order to attach spot instances only after they are fully configured.\n  - otherwise they may be attached prematurely before being ready.\n  - they may also be terminated after failing load balancer health checks.\n\n- **Check your instance storage and block device mapping configuration**\n  - this may become an issue if you use instances which have ephemeral instance\n    storage, often the case on previous instance types.\n  - you should only specify ephemeral instance store in the on-demand launch\n    configuration if you do make use of it by mounting it on the filesystem.\n  - the replacement algorithm tries to give you instances with as much instance\n    storage as your original instances, since it can't tell if you did mount it.\n  - this adds more constraints on the algorithm, so it reduces the number of\n    compatible instance types it can use for launching spot instances.\n  - this is fine if you actually use that instance storage, but it is reducing\n    your options if you don't actually use it, so it may more often fail to get\n    spot instances and fall back to on-demand capacity.\n\n- **Don't keep state on instances**\n  - You should delegate all your state to external services, AWS has a wide\n    offering of stateful services which allow your instances to become\n    stateless.\n    - Databases: RDS, DynamoDB\n    - Caches: ElastiCache\n    - Storage: S3, EFS\n    - Queues: SQS\n  - Don't attach EBS volumes to individual instances, try to use EFS instead.\n\n- **Handle the spot instance termination signal**\n  - See the next section for more detailed instructions.\n\n## Spot termination notifications ##\n\n### EC2 Metadata ###\n\nAWS\n[notifies](https://aws.amazon.com/blogs/aws/new-ec2-spot-instance-termination-notices/)\nyour spot instances when they are about to be terminated by setting a dedicated\nmetadata field, so you can make use of that information to save whatever\ntemporary state you may still have on your running spot instances or to\ngracoiusly remove them from the group.\n\nThis information is only visible from within your instances, so AutoSpotting\nwon't have any visibility on it to take any action.\n\nFortunately, there are existing third party tools such as\n[seespot](https://github.com/acksin/seespot) which you can run yourself,\nimplementing such a termination notification handler.\n\nThis will need to be integrated into your user_data script, for more details you\ncan read see the seespot tool's documentation.\n\n#### Pros ####\n\n- you have full control over what the instance can execute before being\n  terminated\n\n#### Cons ####\n\n- requires some configuration changes on all your instances\n\n### CloudWatch events ###\n\nIn addition, AWS also generates CloudWatch events for these termination\nnotifications. AutoSpotting will automatically intercept these events and\nproactively tries to take some draining actions immediately.\n\nThese actions consist in executing the termination lifecycle hooks, if present,\nor alternatively detaching the soon to be terminated instances from their\nAutoScaling group, which in turn will detach them from the load balancer\nconfigured on the group. This should be relatively graceful if you use\nconnection draining on the load balancer.\n\n<!-- markdownlint-disable MD024 -->\n\n#### Pros ####\n\n- doesn't require any configuration changes\n- instances behind ELBs are detached automatically (or start to be drained) as\n  soon as the imminent spot termination event is received.\n- if you already have lifecycle hooks they will be executed, but in this case we\n  can't detach the instances, so you may need to do this from within the\n  lifecycle hook logic.\n- this action can also be overridden on a per group basis using tags, if you\n  need to.\n\n#### Cons ####\n\n- Less flexible, you will need to have lifecycle hooks if you need to run some\n  complex logic when terminating the instances.\n- Currently only supported when using the CloudFormation installation method.\n\n<!-- markdownlint-enable MD024 -->\n\n### Instances behind an ELB ###\n\nInstances behind an ELB can be graciously\n[removed](https://aws.amazon.com/blogs/aws/elb-connection-draining-remove-instances-from-service-with-care/)\nfrom the load balancer without losing connections. You should enable the\nconnection draining feature.\n\nAs mentioned above, AutoSpotting will automatically detach them from the load\nbalancer unless you have termination lifecycle hooks configured on your\nAutoScaling group. Note: this is currently only supported when AutoSpotting is\ninstalled using CloudFormation.\n\n### ECS container hosts ###\n\nThe container hosts can be\n[drained](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html)\nin a similar way, by migrating all the Docker containers to the other hosts from\nyour cluster before the spot instance is terminated. This blog\n[post](https://aws.amazon.com/blogs/compute/how-to-automate-container-instance-draining-in-amazon-ecs/)\nexplains it in great detail, until AWS hopefully implements this out of the box.\n"
        },
        {
          "name": "THIRDPARTY",
          "type": "blob",
          "size": 8.3779296875,
          "content": "This software builds upon the following components:\n\n- github.com/cristim/ec2-instances-info\n\nThe non-generated source code from this repo can be considered under the public domain.\n\nThe data taken from ec2instances.info should be distributed according to their license\n\n- Instance information database, as compiled by the ec2instances.info project.\n\nCopyright (c) 2013 Garret Heaton (powdahound.com)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n- AWS SDK for Go\n\nCopyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.\nCopyright 2014-2015 Stripe, Inc.\n\nDistributed under these license terms:\n https://github.com/aws/aws-sdk-go/blob/master/LICENSE.txt\n\n- github.com/aws/aws-lambda-go\n\nCopyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\nLambda functions are made available under a modified MIT license:\n\nMIT No Attribution\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this\nsoftware and associated documentation files (the \"Software\"), to deal in the Software\nwithout restriction, including without limitation the rights to use, copy, modify,\nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n- github.com/robfig/cron\n\nCopyright (C) 2012 Rob Figueiredo\nAll Rights Reserved.\n\nMIT LICENSE\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n- github.com/davecgh/go-spew\n\nISC License\n\nCopyright (c) 2012-2016 Dave Collins <dave@davec.name>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE\n\n- github.com/namsral/flag\n\nCopyright (c) 2012 The Go Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n- github.com/pkg/errors\n\nCopyright (c) 2015, Dave Cheney <dave@cheney.net>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n- github.com/stretchr/testify\n\nMIT License\n\nCopyright (c) 2012-2018 Mat Ryer and Tyler Bunnell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "_includes",
          "type": "tree",
          "content": null
        },
        {
          "name": "autospotting.go",
          "type": "blob",
          "size": 1.79296875,
          "content": "// Copyright (c) 2016-2022 Cristian Măgherușan-Stanciu\n// Licensed under the Open Software License version 3.0\n\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"strconv\"\n\n\tautospotting \"github.com/AutoSpotting/AutoSpotting/core\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nvar as *autospotting.AutoSpotting\nvar conf autospotting.Config\n\n// Version represents the build version being used\nvar Version = \"number missing\"\n\n// SavingsCut is populated at build time and controls the percentage of the savings charged for the stable builds\nvar SavingsCut = \"0\"\n\nvar eventFile string\n\nfunc main() {\n\teventFile = conf.EventFile\n\n\tif autospotting.RunningFromLambda() {\n\t\tlambda.Start(Handler)\n\t} else if eventFile != \"\" {\n\t\tparseEvent, err := ioutil.ReadFile(eventFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tHandler(context.TODO(), parseEvent)\n\t} else {\n\t\teventHandler(nil)\n\t}\n}\n\nfunc eventHandler(event *json.RawMessage) {\n\n\tlog.Println(\"Starting autospotting agent, build \", Version, \"charging\", SavingsCut, \"percent of savings via AWS Marketplace\")\n\n\tlog.Printf(\"Configuration flags: %#v\", conf)\n\n\tas.EventHandler(event)\n\tlog.Println(\"Execution completed, nothing left to do\")\n}\n\n// this is the equivalent of a main for when running from Lambda, but on Lambda\n// the runFromCronEvent() is executed within the handler function every time we have an event\nfunc init() {\n\tas = &autospotting.AutoSpotting{}\n\n\tsc, err := strconv.ParseFloat(SavingsCut, 64)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to convert savings cut %s to float\\n\", SavingsCut)\n\t}\n\n\tconf = autospotting.Config{\n\t\tVersion:    Version,\n\t\tSavingsCut: sc,\n\t}\n\n\tautospotting.ParseConfig(&conf)\n\tas.Init(&conf)\n}\n\n// Handler implements the AWS Lambda handler interface\nfunc Handler(ctx context.Context, rawEvent json.RawMessage) {\n\teventHandler(&rawEvent)\n}\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cloudformation",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yaml",
          "type": "blob",
          "size": 0.4130859375,
          "content": "version: '3.8'\nservices:\n    autospotting:\n        build:\n          context: .\n          dockerfile: Dockerfile.build\n          args:\n            flavor: nightly\n        environment:\n          - AWS_ACCESS_KEY_ID\n          - AWS_SECRET_ACCESS_KEY\n          - AWS_SESSION_TOKEN\n        entrypoint:\n          - ./AutoSpotting\n        volumes:\n          - type: bind\n            source: ./build\n            target: /src/build\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.5732421875,
          "content": "module github.com/AutoSpotting/AutoSpotting\n\ngo 1.14\n\nrequire (\n\tgithub.com/aws/aws-lambda-go v1.32.0\n\tgithub.com/aws/aws-sdk-go v1.44.44\n\tgithub.com/cristim/ec2-instances-info v0.0.0-20220623102241-067009cd38ea\n\tgithub.com/davecgh/go-spew v1.1.1\n\tgithub.com/mattn/goveralls v0.0.11\n\tgithub.com/namsral/flag v0.0.0-20170814194028-67f268f20922\n\tgithub.com/robfig/cron/v3 v3.0.1\n\tgolang.org/x/lint v0.0.0-20210508222113-6edffad5e616\n\tgolang.org/x/sys v0.0.0-20220627191245-f75cf1eec38b // indirect\n\tgolang.org/x/tools v0.1.11\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n\tgotest.tools/v3 v3.0.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 8.5283203125,
          "content": "github.com/aws/aws-lambda-go v1.32.0 h1:i8MflawW1hoyYp85GMH7LhvAs4cqzL7LOS6fSv8l2KM=\ngithub.com/aws/aws-lambda-go v1.32.0/go.mod h1:IF5Q7wj4VyZyUFnZ54IQqeWtctHQ9tz+KhcbDenr220=\ngithub.com/aws/aws-sdk-go v1.44.44 h1:XLEcUxILvVBYO/frO+TTCd8NIxklX/ZOzSJSBZ+b7B8=\ngithub.com/aws/aws-sdk-go v1.44.44/go.mod h1:y4AeaBuwd2Lk+GepC1E9v0qOiTws0MIWAX4oIKwKHZo=\ngithub.com/cristim/ec2-instances-info v0.0.0-20220623102241-067009cd38ea h1:Q74hCjyozEfdzSouIiTxiHFva6PbtM14UftQ8TUrCJY=\ngithub.com/cristim/ec2-instances-info v0.0.0-20220623102241-067009cd38ea/go.mod h1:0yCjO4zBzlwWSGh/zGfW2Zq1NX605qCYVBHD1fPXKNs=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-bindata/go-bindata v3.1.2+incompatible/go.mod h1:xK8Dsgwmeed+BBsSy2XTopBn/8uK2HWuGSnA11C3Joo=\ngithub.com/google/go-cmp v0.3.0 h1:crn/baboCvb5fXaQ0IJ1SGTsTVrWpDsCWC8EGETZijY=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=\ngithub.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\ngithub.com/mattn/goveralls v0.0.11 h1:eJXea6R6IFlL1QMKNMzDvvHv/hwGrnvyig4N+0+XiMM=\ngithub.com/mattn/goveralls v0.0.11/go.mod h1:gU8SyhNswsJKchEV93xRQxX6X3Ei4PJdQk/6ZHvrvRk=\ngithub.com/namsral/flag v0.0.0-20170814194028-67f268f20922 h1:dRRQLGaXoPysHledlqbOa53vGxt0WjaVtdCexlWiRjA=\ngithub.com/namsral/flag v0.0.0-20170814194028-67f268f20922/go.mod h1:OXldTctbM6SWH1K899kPZcf65KxJiD7MsceFUpB5yDo=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/robfig/cron/v3 v3.0.1 h1:WdRxkvbJztn8LMz/QEvLN5sBU+xKpSqwwUO1Pjr4qDs=\ngithub.com/robfig/cron/v3 v3.0.1/go.mod h1:eQICP3HwyT7UooqI/z+Ov+PtYAWygg1TEWWzGIFLtro=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.6.1 h1:hDPOHmpOpP40lSULcqw7IrRb/u7w6RpDC9399XyoNd0=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngithub.com/yuin/goldmark v1.4.1/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/lint v0.0.0-20210508222113-6edffad5e616 h1:VLliZ0d+/avPrXXH+OakdXhpJuEoBZuwh1m2j7U6Iug=\ngolang.org/x/lint v0.0.0-20210508222113-6edffad5e616/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4 h1:6zppjxzCulZykYSLyVDYbneBfbaBIQPYMevg0bEwv2s=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.0.0-20211015210444-4f30a5c0130f/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220127200216-cd36cc0744dd h1:O7DYs+zxREGLKzKoMQrtrEacpb0ZVXA5rIwylE2Xchk=\ngolang.org/x/net v0.0.0-20220127200216-cd36cc0744dd/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211019181941-9d821ace8654/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220627191245-f75cf1eec38b h1:2n253B2r0pYSmEV+UNCQoPfU/FiaizQEK5Gu4Bq4JE8=\ngolang.org/x/sys v0.0.0-20220627191245-f75cf1eec38b/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.1.1/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.11 h1:loJ25fNOEhSXfHrpoGj91eCUThwdNX6u24rO1xnNteY=\ngolang.org/x/tools v0.1.11/go.mod h1:SgwaegtQh8clINPpECJMqnxLv9I09HLqnW3RMqW0CA4=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776 h1:tQIYjPdBoyREyB9XMu+nnTclpTYkz2zFM+lzLJFO4gQ=\ngopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.0.0 h1:d+tVGRu6X0ZBQ+kyAR8JKi6AXhTP2gmQaoIYaGFz634=\ngotest.tools/v3 v3.0.0/go.mod h1:TUP+/YtXl/dp++T+SZ5v2zUmLVBHmptSb/ajDLCJ+3c=\n"
        },
        {
          "name": "kubernetes",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 21.1328125,
          "content": null
        },
        {
          "name": "test_data",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools.go",
          "type": "blob",
          "size": 0.1513671875,
          "content": "//go:build tools\n// +build tools\n\npackage main\n\nimport (\n\t_ \"github.com/mattn/goveralls\"\n\t_ \"golang.org/x/lint/golint\"\n\t_ \"golang.org/x/tools/cmd/cover\"\n)\n"
        }
      ]
    }
  ]
}