{
  "metadata": {
    "timestamp": 1736566916043,
    "page": 488,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zalando/skipper",
      "stars": 3135,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".catwatch.yaml",
          "type": "blob",
          "size": 0.0791015625,
          "content": "title: Skipper\nimage: https://zalando.github.io/skipper/img/skipper.catwatch.png\n"
        },
        {
          "name": ".clusterfuzzlite",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3134765625,
          "content": ".*.sw?\nbin\n.bin\npkg\nsrc/github.com/mailgun\ndefault.etcd\n.idea\n*.iml\n*.xcf\nGodeps/_workspace\npackaging/skipper\npackaging/eskip\npackaging/build\n.coverprofile\n.coverprofile-all\nvendor\nlinter.log\nsite/\nplugins/\n_test_plugins/*.so\n_test_plugins_fail/*.so\nopentracingplugin/build\nbuild/\nskptesting/lorem.html\n.vscode/*\n*.test\n\n"
        },
        {
          "name": ".zappr.yaml",
          "type": "blob",
          "size": 0.349609375,
          "content": "# for github.com\napprovals:\n  groups:\n    zalando:\n      minimum: 2\n      from:\n        orgs:\n          - \"zalando\"\n# mandatory pull request labels\npull-request:\n  labels:\n    additional: true\n    oneOf:\n      - architectural\n      - major\n      - minor\n      - bugfix\n      - documentation\n      - dependencies\nX-Zalando-Team: \"teapot\"\nX-Zalando-Type: code\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.55078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior\nmay be reported by contacting the project team at\nalexander.yastrebov@zalando.de and sandor.szuecs@zalando.de. All complaints\nwill be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project\nteam is obligated to maintain confidentiality with regard to the\nreporter of an incident.  Further details of specific enforcement\npolicies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Roles\n\nThe following roles are defined in the project:\n\n* maintainer\n* contributor\n\n### Maintainer\n\nMaintainers are listed in\n[MAINTAINERS](https://github.com/zalando/skipper/blob/master/MAINTAINERS)\nand are responsible for the healthiness of the project as stated in\nthe sections above.\n\n### Contributor\n\nEveryone who interacts with the project is a contributor.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.234375,
          "content": "# Contributing to Skipper\n\n**Thank you for your interest in making Skipper even better and more awesome. Your contributions are highly welcome.**\n\nThere are multiple ways of getting involved:\n\n- [Report a bug](#report-a-bug)\n- [Suggest a feature](#suggest-a-feature)\n- [Contribute code](#contribute-code)\n\nBelow are a few guidelines we would like you to follow.\nIf you need help, please reach out to us: [community channels](https://github.com/zalando/skipper#community)\n\n\n## Report a bug\n\nReporting bugs is one of the best ways to contribute. Before creating a bug report, please check that an [issue](https://github.com/zalando/skipper/issues) reporting the same problem does not already exist. If there is an such an issue, you may add your information as a comment.\n\nTo report a new bug you should open an issue that summarizes the bug and set the label to \"bug\".\n\nIf you want to provide a fix along with your bug report: That is great! In this case please send us a pull request as described in section [Contribute Code](#contribute-code).\n\n## Suggest a feature\n\nTo request a new feature you should open an [issue](https://github.com/zalando/skipper/issues/new) and summarize the desired functionality and its use case. Set the issue label to \"enhancement\".\n\n## Contribute code\n\nThis is a rough outline of what the workflow for code contributions\nlooks like:\n\n- Check the list of open [issues](https://github.com/zalando/skipper/issues). Either assign an existing issue to yourself, or create a new one that you would like work on and discuss your ideas and use cases.\n- Fork the repository on GitHub\n- Create a topic branch, for example feature/foo fix/bar refactor/baz, from where you want to base your work. The base is usually master.\n- Make commits of logical units and use `git commit --sign-off` to comply with [DCO](https://developercertificate.org/).\n- Write good commit messages (see below).\n- Push your changes to a topic branch in your fork of the repository.\n- Submit a pull request to [zalando/skipper](https://github.com/zalando/skipper)\n- Your pull request must receive a :thumbsup: from two [Maintainers](https://github.com/zalando/skipper/blob/master/MAINTAINERS)\n- Major changes need to include tests. Features need\n  additionally include documentation for developers as\n  [godoc](https://godoc.org/github.com/zalando/skipper) and add\n  [user documentation in markdown](https://opensource.zalando.com/skipper) in the docs/ directory.\n\nThanks for your contributions!\n\n### Code style\n\nSkipper is formatted with [gofmt](https://golang.org/cmd/gofmt/). Please run it on your code before making a pull request. The coding style suggested by the Golang community is the preferred one for the cases that are not covered by gofmt, see the [style doc](https://github.com/golang/go/wiki/CodeReviewComments) for details.\n\n### Commit messages\n\nYour commit messages ideally can answer two questions: what changed and why. The subject line should feature the “what” and the body of the commit should describe the “why”.\n\nWhen creating a pull request, its comment should reference the corresponding issue id.\n\n**Have fun and enjoy hacking!**\n\n## Governance - final decisions\n\nThe project owner and lead makes all final decisions, if there is a\ndisagreement between contributors and maintainers.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.1025390625,
          "content": "Skipper is in general licensed under the following Apache Version 2.0 license with the exception\nof the pathmux subdirectory which is licensed under MIT license (see notice file below).\n\nCopyright 2015 Zalando SE\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n\n\nNotice file for pathmux/\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Daniel Imfeld, 2015 Zalando SE\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\nMODIFICATIONS TO pathmux/tree.go and pathmux/tree_test.go:\n\n02.09.2015 - Exposed the internal tree implementation of http://godoc.org/github.com/dimfeld/httptreemux so that\nit can be used to look up arbitrary objects in a Patricia tree.\n\n21.04.2016 - Enabled backtracking in the tree lookup.\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.12890625,
          "content": "Alexander Yastrebov <alexander.yastrebov@zalando.de>\nSandor Szuecs <sandor.szuecs@zalando.de>\n\nemeritus:\n  - Arpad Ryszka @aryszka\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.9365234375,
          "content": "SOURCES             = $(shell find . -name '*.go' -and -not -path \"./_test_plugins\" -and -not -path \"./_test_plugins_fail\" )\nPACKAGES            = $(shell go list ./...)\nCURRENT_VERSION     = $(shell git describe --tags --always --dirty)\nVERSION            ?= $(CURRENT_VERSION)\nCOMMIT_HASH         = $(shell git rev-parse --short HEAD)\nLIMIT_FDS           = $(shell ulimit -n)\nTEST_ETCD_VERSION  ?= v3.5.11\nTEST_ETCD_CHECKSUM ?= 4fb304f384dd4d6e491e405fed8375a09ea1c6c2596b93f97cb31844202e620df160f87f18611e84f17675e7b7245e40d1aa23571ecdb507cb094ba04d378171\nTEST_PLUGINS       = _test_plugins/filter_noop.so \\\n\t\t     _test_plugins/predicate_match_none.so \\\n\t\t     _test_plugins/dataclient_noop.so \\\n\t\t     _test_plugins/multitype_noop.so \\\n\t\t     _test_plugins_fail/fail.so\n\n.PHONY: default\ndefault: build\n\n.PHONY: help\nhelp: ## Display this help\n\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n\n.PHONY: lib\nlib: $(SOURCES) ## build skipper library\n\tgo build ./...\n\n.PHONY: skipper\nskipper: $(SOURCES) ## build skipper binary\n\tgo build -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" -o bin/skipper ./cmd/skipper\n\n.PHONY: eskip\neskip: $(SOURCES) ## build eskip binary\n\tgo build -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" -o bin/eskip ./cmd/eskip\n\n.PHONY: webhook\nwebhook: $(SOURCES) ## build webhook binary\n\tgo build -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" -o bin/webhook ./cmd/webhook\n\n.PHONY: routesrv\nroutesrv: $(SOURCES) ## build routesrv binary\n\tgo build -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" -o bin/routesrv ./cmd/routesrv\n\n.PHONY: fixlimits\nfixlimits:\nifeq (LIMIT_FDS, 256)\n\tulimit -n 1024\nendif\n\n.PHONY: build\nbuild: $(SOURCES) lib skipper eskip webhook routesrv ## build library and all binaries\n\nbuild.linux.static: ## build static linux binary for amd64\n\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o bin/skipper -ldflags \"-extldflags=-static -X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" ./cmd/skipper\n\nbuild.linux.arm64: ## build linux binary for arm64\n\tGOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -o bin/skipper -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" ./cmd/skipper\n\nbuild.linux.armv7: ## build linux binary for arm7\n\tGOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 go build -o bin/skipper -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" ./cmd/skipper\n\nbuild.linux:\n\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o bin/skipper -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" ./cmd/skipper\n\nbuild.darwin.arm64: ## build osx binary for arm64\n\tGOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -o bin/skipper -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" ./cmd/skipper\n\nbuild.darwin: ## build osx binary for amd64\n\tGOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -o bin/skipper -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" ./cmd/skipper\n\nbuild.windows: ## build windows binary for amd64\n\tGOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -o bin/skipper -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" ./cmd/skipper\n\n.PHONY: install\ninstall: $(SOURCES) ## install skipper and eskip binaries into your system\n\tgo install -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" ./cmd/skipper\n\tgo install -ldflags \"-X main.version=$(VERSION) -X main.commit=$(COMMIT_HASH)\" ./cmd/eskip\n\n.PHONY: check\ncheck: build check-plugins ## run all tests\n\tgo test ./...\n\n.PHONY: shortcheck\nshortcheck: build check-plugins fixlimits  ## run all short tests\n\tgo test -test.short ./...\n\n.PHONY: check-race\ncheck-race: build ## run all short tests with race checker\n\tgo test -race -test.short ./...\n\n.PHONY: check-plugins\ncheck-plugins: $(TEST_PLUGINS)\n\tgo test -run LoadPlugins\n\n_test_plugins/%.so: _test_plugins/%.go\n\tgo build -buildmode=plugin -o $@ $<\n\n_test_plugins_fail/%.so: _test_plugins_fail/%.go\n\tgo build -buildmode=plugin -o $@ $<\n\n.PHONY: fuzz\nfuzz: ## run all fuzz tests\n\t$(MAKE) -C fuzz $(MAKECMDGOALS)\n\n.PHONY: lint\nlint: build staticcheck ## run all linters\n\n.PHONY: clean\nclean: ## clean temporary files and directories\n\tgo clean -i ./...\n\trm -rf bin\n\trm -rf .bin\n\trm -f _test_plugins/*.so\n\trm -f _test_plugins_fail/*.so\n\trm -f .coverprofile-all coverage.out\n\n.PHONY: deps\ndeps: ## install dependencies to run everything\n\tgo env\n\t./etcd/install.sh $(TEST_ETCD_VERSION) $(TEST_ETCD_CHECKSUM)\n\t@go install honnef.co/go/tools/cmd/staticcheck@latest\n\t@go install github.com/securego/gosec/v2/cmd/gosec@latest\n\t@go install golang.org/x/vuln/cmd/govulncheck@latest\n\t@go install github.com/google/osv-scanner/cmd/osv-scanner@v1\n\t@go install github.com/google/capslock/cmd/capslock@latest\n\n.PHONY: vet\nvet: $(SOURCES) ## run Go vet\n\tgo vet ./...\n\n.PHONY: staticcheck\n# TODO(sszuecs) review disabling these checks, f.e.:\n# -ST1000 missing package doc in many packages\n# -ST1003 wrong naming convention Api vs API, Id vs ID\n# -ST1012 too many error variables are not having prefix \"err\"\n# -ST1020 too many wrong comments on exported functions to fix right away\n# -ST1021 too many wrong comments on exported functions to fix right away\n# -ST1022 too many wrong comments on exported functions to fix right away\nstaticcheck: $(SOURCES) ## run staticcheck\n\tstaticcheck -checks \"all,-ST1000,-ST1003,-ST1012,-ST1020,-ST1021\" ./...\n\n.PHONY: gosec\n# TODO(sszuecs) review disabling these checks, f.e.:\n# G101 find by variable name match \"oauth\" are not hardcoded credentials\n# G104 ignoring errors are in few cases fine\n# G304 reading kubernetes secret filepaths are not a file inclusions\n# G307 mostly warns about defer rsp.Body.Close(), see https://github.com/securego/gosec/issues/925\n# G402 See https://github.com/securego/gosec/issues/551 and https://github.com/securego/gosec/issues/528\ngosec: $(SOURCES)\n\tgosec -quiet -exclude=\"G101,G104,G304,G307,G402\" ./...\n\n.PHONY: govulncheck\ngovulncheck: $(SOURCES) ## run govulncheck\n\tgovulncheck ./...\n\n.PHONY: capslock\ncapslock: ## run capslock\n\tcapslock -output=v -packages=./...\n\n.PHONY: osv-scanner\nosv-scanner: $(SOURCES) ## run osv-scanner see https://osv.dev/\n\tosv-scanner -r ./\n\n.PHONY: fmt\nfmt: $(SOURCES) ## format code\n\t@gofmt -w -s $(SOURCES)\n\n.PHONY: check-fmt\ncheck-fmt: $(SOURCES) ## check format code\n\t@if [ \"$$(gofmt -s -d $(SOURCES))\" != \"\" ]; then false; else true; fi\n\n.PHONY: precommit\nprecommit: fmt build vet staticcheck check-race shortcheck ## precommit hook\n\ncoverprofile: $(SOURCES) $(TEST_PLUGINS)\n\tgo test -test.short -covermode atomic -coverprofile=coverage.out ./...\n\n.coverprofile-all: $(SOURCES) $(TEST_PLUGINS)\n\tgo test -test.short -coverprofile=.coverprofile-all ./...\n\n.PHONY: cover\ncover: .coverprofile-all ## coverage test and show it in your browser\n\tgo tool cover -func .coverprofile-all\n\n.PHONY: show-cover\nshow-cover: .coverprofile-all\n\tgo tool cover -html .coverprofile-all\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.77734375,
          "content": "We acknowledge that every line of code that we write may potentially contain security issues.\nWe are trying to deal with it responsibly and provide patches as quickly as possible.\n\nWe host our bug bounty program on HackerOne, it is currently private, therefore if you would like to report a vulnerability and get rewarded for it, please ask to join our program by filling this form:\n\nhttps://zeng.page.link/open-source-report-vulnerability\n\nYou can also send you report via this form if your do not want to join our bug bounty program and just want to report a vulnerability or security issue.\n\nIn the past there were issues with the process mentioned above. If you\nwant to report a security vulnerability and face an issue, please reach\nout to the team of [maintainers](MAINTAINERS) via e-mail.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "v0.21\n"
        },
        {
          "name": "_test_plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "_test_plugins_fail",
          "type": "tree",
          "content": null
        },
        {
          "name": "circuit",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "dataclients",
          "type": "tree",
          "content": null
        },
        {
          "name": "delivery.yaml",
          "type": "blob",
          "size": 4.2890625,
          "content": "version: \"2017-09-20\"\nallow_concurrent_steps: true\npipeline:\n- id: vulncheck and capslock\n  depends_on: []\n  vm_config:\n    type: linux\n    image: \"cdp-runtime/go\"\n  type: script\n  when:\n    branch: master\n    event: push\n  commands:\n  - desc: Vulnerability & capability check\n    cmd: |\n      make deps govulncheck capslock\n- id: build\n  depends_on: []\n  vm_config:\n    type: linux\n    image: \"cdp-runtime/go\"\n  type: script\n  commands:\n  - desc: Setup BuildKit\n    cmd: |\n      # create a Buildkit builder with CDP specific configuration (https://cloud.docs.zalando.net/howtos/cdp-multiarch/)\n      docker buildx create --config /etc/cdp-buildkitd.toml --driver-opt network=host --bootstrap --use\n  - desc: build-push\n    cmd: |\n      set -eo pipefail\n\n      IMAGE_REGISTRY=\"registry-write.opensource.zalan.do\"\n      MULTIARCH_REGISTRY=\"container-registry-test.zalando.net\"\n\n      if [[ $CDP_TARGET_BRANCH == master && ! $CDP_PULL_REQUEST_NUMBER ]]; then\n        LATEST_VERSION=$(git describe --tags --always | awk -F \\- '{print $1}')\n        CUR_PART=$(echo $LATEST_VERSION | awk -F . '{print $1\".\"$2}')\n        VERSION_PART=$(cat VERSION)\n        OLD_PATCH=$(echo $LATEST_VERSION | awk -F . '{print $3}')\n        NEW_PATCH=$((OLD_PATCH + 1))\n        if [ \"$CUR_PART\" != \"$VERSION_PART\" ]; then NEW_PATCH=0; fi\n        RELEASE_VERSION=${VERSION_PART}.${NEW_PATCH}\n        export VERSION=\"${RELEASE_VERSION}\"\n\n        IMAGE=\"${IMAGE_REGISTRY}/teapot/skipper:${RELEASE_VERSION}\"\n        MULTIARCH_IMAGE=\"${MULTIARCH_REGISTRY}/teapot/skipper:${RELEASE_VERSION}\"\n      else\n        IMAGE=\"${IMAGE_REGISTRY}/teapot/skipper-test:${CDP_BUILD_VERSION}\"\n        MULTIARCH_IMAGE=\"${MULTIARCH_REGISTRY}/teapot/skipper-test:${CDP_BUILD_VERSION}\"\n      fi\n      export IMAGE MULTIARCH_IMAGE\n      export TESTCONTAINERS_RYUK_DISABLED=true\n\n      make deps check-fmt vet staticcheck shortcheck\n\n      if [[ $CDP_TARGET_BRANCH == master && ! $CDP_PULL_REQUEST_NUMBER ]]; then\n        echo \"Creating git tag: ${RELEASE_VERSION}\"\n        git gh-tag \"${RELEASE_VERSION}\"\n      fi\n\n      git status\n      git diff\n\n      cd packaging\n\n      make docker.build.amd64 && git status && git diff && make docker.push.amd64 && make docker.push.multiarch\n\n      if [[ $CDP_TARGET_BRANCH == master && ! $CDP_PULL_REQUEST_NUMBER ]]; then\n        echo \"Created docker image registry.opensource.zalan.do/teapot/skipper:${RELEASE_VERSION}\"\n\n        cdp-promote-image \"${MULTIARCH_IMAGE}\"\n        echo \"Created multi-arch docker image container-registry.zalando.net/teapot/skipper:${RELEASE_VERSION}\"\n\n        echo \"Creating release for tag: ${RELEASE_VERSION}\"\n        make build.package\n\n        files=(-u sha256sum.txt)\n        for f in *.tar.gz *.zip; do files+=(-u \"$f\"); done\n        echo \"create release page\"\n        tf=$(mktemp)\n        echo -e \"### Changes\\n\" >$tf\n        git log -1 --pretty=%B | grep -v -F 'Signed-off-by:' | grep -v -F 'Co-authored-by:' >>$tf\n        echo -e \"\\n### Multiarch Docker image\\n\" >>$tf\n        echo -e \"Multiarch Docker image is available in Github's docker registry:\\n\" >>$tf\n        echo -e '```' >>$tf\n        echo -e \"docker run -it ghcr.io/zalando/skipper:${RELEASE_VERSION} skipper --help\" >>$tf\n        echo -e '```' >>$tf\n        echo -e \"\\n### Docker image\\n\" >>$tf\n        echo -e \"Docker image is available in Zalando's Open Source registry:\\n\" >>$tf\n        echo -e '```' >>$tf\n        echo -e \"docker run -it registry.opensource.zalan.do/teapot/skipper:${RELEASE_VERSION} skipper --help\" >>$tf\n        echo -e '```' >>$tf\n        echo \"################################\"\n        cat $tf\n        echo \"################################\"\n        git gh-release --message-from-file \"${tf}\" \"${files[@]}\" \"$RELEASE_VERSION\"\n      else\n        echo \"Created docker image registry.opensource.zalan.do/teapot/skipper-test:${CDP_BUILD_VERSION}\"\n        echo \"Created multi-arch docker image container-registry-test.zalando.net/teapot/skipper-test:${CDP_BUILD_VERSION}\"\n        echo \"Not creating a release. No release version defined.\"\n      fi\n- id: docs\n  depends_on: [build]\n  type: script\n  vm_config:\n    type: linux\n    image: cdp-runtime/mkdocs-v9\n    size: small\n  commands:\n  - desc: install deps\n    cmd: |\n      pipx inject mkdocs-material markdown-include\n  - desc: build docs\n    cmd: |\n      build-docs\n  artifacts:\n  - type: docs\n    name: skipper\n    path: site\n"
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 12.8427734375,
          "content": "/*\nPackage skipper provides an HTTP routing library with flexible\nconfiguration as well as a runtime update of the routing rules.\n\nSkipper works as an HTTP reverse proxy that is responsible for mapping\nincoming requests to multiple HTTP backend services, based on routes\nthat are selected by the request attributes. At the same time, both the\nrequests and the responses can be augmented by a filter chain that is\nspecifically defined for each route. Optionally, it can provide circuit\nbreaker mechanism individually for each backend host.\n\nSkipper can load and update the route definitions from multiple data\nsources without being restarted.\n\nIt provides a default executable command with a few built-in filters,\nhowever, its primary use case is to be extended with custom filters,\npredicates or data sources. For further information read\n'Extending Skipper'.\n\nSkipper took the core design and inspiration from Vulcand:\nhttps://github.com/mailgun/vulcand.\n\n# Quickstart\n\nSkipper is 'go get' compatible. If needed, create a 'go workspace' first:\n\n\tmkdir ws\n\tcd ws\n\texport GOPATH=$(pwd)\n\texport PATH=$PATH:$GOPATH/bin\n\nGet the Skipper packages:\n\n\tgo get github.com/zalando/skipper/...\n\nCreate a file with a route:\n\n\techo 'hello: Path(\"/hello\") -> \"https://www.example.org\"' > example.eskip\n\nOptionally, verify the syntax of the file:\n\n\teskip check example.eskip\n\nStart Skipper and make an HTTP request:\n\n\tskipper -routes-file example.eskip &\n\tcurl localhost:9090/hello\n\n# Routing Mechanism\n\nThe core of Skipper's request processing is implemented by a reverse\nproxy in the 'proxy' package. The proxy receives the incoming request,\nforwards it to the routing engine in order to receive the most specific\nmatching route. When a route matches, the request is forwarded to all\nfilters defined by it. The filters can modify the request or execute any\nkind of program logic. Once the request has been processed\nby all the filters, it is forwarded to the backend endpoint of the\nroute. The response from the backend goes once again through all the\nfilters in reverse order. Finally, it is mapped as the response of the\noriginal incoming request.\n\nBesides the default proxying mechanism, it is possible to define routes\nwithout a real network backend endpoint. One of these cases is called a\n'shunt' backend, in which case one of the filters needs to handle the\nrequest providing its own response (e.g. the 'static' filter). Actually,\nfilters themselves can instruct the request flow to shunt by calling the\nServe(*http.Response) method of the filter context.\n\nAnother case of a route without a network backend is the 'loopback'. A\nloopback route can be used to match a request, modified by filters,\nagainst the lookup tree with different conditions and then execute a\ndifferent route. One example scenario can be to use a single route as\nan entry point to execute some calculation to get an A/B testing\ndecision and then matching the updated request metadata for the actual\ndestination route. This way the calculation can be executed for only\nthose requests that don't contain information about a previously\ncalculated decision.\n\nFor further details, see the 'proxy' and 'filters' package\ndocumentation.\n\n# Matching Requests\n\nFinding a request's route happens by matching the request attributes to\nthe conditions in the route's definitions. Such definitions may have the\nfollowing conditions:\n\n- method\n\n- path (optionally with wildcards)\n\n- path regular expressions\n\n- host regular expressions\n\n- headers\n\n- header regular expressions\n\nIt is also possible to create custom predicates with any other matching\ncriteria.\n\nThe relation between the conditions in a route definition is 'and',\nmeaning, that a request must fulfill each condition to match a route.\n\nFor further details, see the 'routing' package documentation.\n\n# Filters - Augmenting Requests\n\nFilters are applied in order of definition to the request and in reverse\norder to the response. They are used to modify request and response\nattributes, such as headers, or execute background tasks, like logging.\nSome filters may handle the requests without proxying them to service\nbackends. Filters, depending on their implementation, may accept/require\nparameters, that are set specifically to the route.\n\nFor further details, see the 'filters' package documentation.\n\n# Service Backends\n\nEach route has one of the following backends: HTTP endpoint, shunt,\nloopback or dynamic.\n\nBackend endpoints can be any HTTP service. They are specified by their\nnetwork address, including the protocol scheme, the domain name or the\nIP address, and optionally the port number: e.g.\n\"https://www.example.org:4242\". (The path and query are sent from the\noriginal request, or set by filters.)\n\nA shunt route means that Skipper handles the request alone and doesn't\nmake requests to a backend service. In this case, it is the\nresponsibility of one of the filters to generate the response.\n\nA loopback route executes the routing mechanism on current state of\nthe request from the start, including the route lookup. This way it\nserves as a form of an internal redirect.\n\nA dynamic route means that the final target will be defined in a filter.\nOne of the filters in the chain must set the target backend url explicitly.\n\n# Route Definitions\n\nRoute definitions consist of the following:\n\n- request matching conditions (predicates)\n\n- filter chain (optional)\n\n- backend\n\nThe eskip package implements the in-memory and text representations of\nroute definitions, including a parser.\n\n(Note to contributors: in order to stay compatible with 'go get', the\ngenerated part of the parser is stored in the repository. When changing\nthe grammar, 'go generate' needs to be executed explicitly to update the\nparser.)\n\nFor further details, see the 'eskip' package documentation\n\n# Authentication and Authorization\n\nSkipper has filter implementations of basic auth and OAuth2. It can be\nintegrated with tokeninfo based OAuth2 providers. For details, see:\nhttps://godoc.org/github.com/zalando/skipper/filters/auth.\n\n# Data Sources\n\nSkipper's route definitions of Skipper are loaded from one or more data\nsources. It can receive incremental updates from those data sources at\nruntime. It provides three different data clients:\n\n- Kubernetes: Skipper can be used as part of a Kubernetes Ingress Controller\nimplementation together with https://github.com/zalando-incubator/kube-ingress-aws-controller .\nIn this scenario, Skipper uses the Kubernetes API's Ingress extensions as\na source for routing. For a complete deployment example, see more details\nin: https://github.com/zalando-incubator/kubernetes-on-aws/ .\n\n- Innkeeper: the Innkeeper service implements a storage for large sets\nof Skipper routes, with an HTTP+JSON API, OAuth2 authentication and role\nmanagement. See the 'innkeeper' package and\nhttps://github.com/zalando/innkeeper.\n\n- etcd: Skipper can load routes and receive updates from etcd clusters\n(https://github.com/coreos/etcd). See the 'etcd' package.\n\n- static file: package eskipfile implements a simple data client, which\ncan load route definitions from a static file in eskip format.\nCurrently, it loads the routes on startup. It doesn't support runtime\nupdates.\n\nSkipper can use additional data sources, provided by extensions. Sources\nmust implement the DataClient interface in the routing package.\n\n# Circuit Breaker\n\nSkipper provides circuit breakers, configured either globally, based on\nbackend hosts or based on individual routes. It supports two types of\ncircuit breaker behavior: open on N consecutive failures, or open on N\nfailures out of M requests. For details, see:\nhttps://godoc.org/github.com/zalando/skipper/circuit.\n\n# Running Skipper\n\nSkipper can be started with the default executable command 'skipper', or\nas a library built into an application. The easiest way to start Skipper\nas a library is to execute the 'Run' function of the current, root\npackage.\n\nEach option accepted by the 'Run' function is wired in the\ndefault executable as well, as a command line flag. E.g. EtcdUrls\nbecomes -etcd-urls as a comma separated list. For command line help,\nenter:\n\n\tskipper -help\n\nAn additional utility, eskip, can be used to verify, print, update and\ndelete routes from/to files or etcd (Innkeeper on the roadmap). See the\ncmd/eskip command package, and/or enter in the command line:\n\n\teskip -help\n\n# Extending Skipper\n\nSkipper doesn't use dynamically loaded plugins, however, it can be used\nas a library, and it can be extended with custom predicates, filters\nand/or custom data sources.\n\n# Custom Predicates\n\nTo create a custom predicate, one needs to implement the PredicateSpec\ninterface in the routing package. Instances of the PredicateSpec are\nused internally by the routing package to create the actual Predicate\nobjects as referenced in eskip routes, with concrete arguments.\n\nExample, randompredicate.go:\n\n\tpackage main\n\n\timport (\n\t    \"github.com/zalando/skipper/routing\"\n\t    \"math/rand\"\n\t    \"net/http\"\n\t)\n\n\ttype randomSpec struct {}\n\n\ttype randomPredicate struct {\n\t    chance float64\n\t}\n\n\tfunc (s *randomSpec) Name() string { return \"Random\" }\n\n\tfunc (s *randomSpec) Create(args []interface{}) (routing.Predicate, error) {\n\t    p := &randomPredicate{.5}\n\t    if len(args) > 0 {\n\t        if c, ok := args[0].(float64); ok {\n\t            p.chance = c\n\t        }\n\t    }\n\n\t    return p, nil\n\t}\n\n\tfunc (p *randomPredicate) Match(_ *http.Request) bool {\n\t    return rand.Float64() < p.chance\n\t}\n\nIn the above example, a custom predicate is created, that can be\nreferenced in eskip definitions with the name 'Random':\n\n\tRandom(.33) -> \"https://test.example.org\";\n\t* -> \"https://www.example.org\"\n\n# Custom Filters\n\nTo create a custom filter we need to implement the Spec interface of the\nfilters package. 'Spec' is the specification of a filter, and it is used\nto create concrete filter instances, while the raw route definitions are\nprocessed.\n\nExample, hellofilter.go:\n\n\tpackage main\n\n\timport (\n\t    \"fmt\"\n\t    \"github.com/zalando/skipper/filters\"\n\t)\n\n\ttype helloSpec struct {}\n\n\ttype helloFilter struct {\n\t    who string\n\t}\n\n\tfunc (s *helloSpec) Name() string { return \"hello\" }\n\n\tfunc (s *helloSpec) CreateFilter(config []interface{}) (filters.Filter, error) {\n\t    if len(config) == 0 {\n\t        return nil, filters.ErrInvalidFilterParameters\n\t    }\n\n\t    if who, ok := config[0].(string); ok {\n\t        return &helloFilter{who}, nil\n\t    } else {\n\t        return nil, filters.ErrInvalidFilterParameters\n\t    }\n\t}\n\n\tfunc (f *helloFilter) Request(ctx filters.FilterContext) {}\n\n\tfunc (f *helloFilter) Response(ctx filters.FilterContext) {\n\t    ctx.Response().Header.Set(\"X-Hello\", fmt.Sprintf(\"Hello, %s!\", f.who))\n\t}\n\nThe above example creates a filter specification, and in the routes where\nthey are included, the filter instances will set the 'X-Hello' header\nfor each and every response. The name of the filter is 'hello', and in a\nroute definition it is referenced as:\n\n\tr: * -> hello(\"world\") -> \"https://www.example.org\";\n\n# Custom Build\n\nThe easiest way to create a custom Skipper variant is to implement the\nrequired filters (as in the example above) by importing the Skipper\npackage, and starting it with the 'Run' command.\n\nExample, hello.go:\n\n\tpackage main\n\n\timport (\n\t    \"log\"\n\n\t    \"github.com/zalando/skipper\"\n\t    \"github.com/zalando/skipper/filters\"\n\t    \"github.com/zalando/skipper/routing\"\n\t)\n\n\tfunc main() {\n\t    log.Fatal(skipper.Run(skipper.Options{\n\t        Address: \":9090\",\n\t        RoutesFile: \"routes.eskip\",\n\t        CustomPredicates: []routing.PredicateSpec{&randomSpec{}},\n\t        CustomFilters: []filters.Spec{&helloSpec{}}}))\n\t}\n\nA file containing the routes, routes.eskip:\n\n\trandom:\n\t    Random(.05) -> hello(\"fish?\") -> \"https://fish.example.org\";\n\thello:\n\t    * -> hello(\"world\") -> \"https://www.example.org\"\n\nStart the custom router:\n\n\tgo run hello.go\n\n# Proxy Package Used Individually\n\nThe 'Run' function in the root Skipper package starts its own listener\nbut it doesn't provide the best composability. The proxy package,\nhowever, provides a standard http.Handler, so it is possible to use it\nin a more complex solution as a building block for routing.\n\n# Logging and Metrics\n\nSkipper provides detailed logging of failures, and access logs in Apache\nlog format. Skipper also collects detailed performance metrics, and\nexposes them on a separate listener endpoint for pulling snapshots.\n\nFor details, see the 'logging' and 'metrics' packages documentation.\n\n# Performance Considerations\n\nThe router's performance depends on the environment and on the used\nfilters. Under ideal circumstances, and without filters, the biggest\ntime factor is the route lookup. Skipper is able to scale to thousands\nof routes with logarithmic performance degradation. However, this comes\nat the cost of increased memory consumption, due to storing the whole\nlookup tree in a single structure.\n\nBenchmarks for the tree lookup can be run by:\n\n\tgo test github.com/zalando/skipper/routing -bench=Tree\n\nIn case more aggressive scale is needed, it is possible to setup Skipper\nin a cascade model, with multiple Skipper instances for specific route\nsegments.\n*/\npackage skipper\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eskip",
          "type": "tree",
          "content": null
        },
        {
          "name": "eskipfile",
          "type": "tree",
          "content": null
        },
        {
          "name": "etcd",
          "type": "tree",
          "content": null
        },
        {
          "name": "export_test.go",
          "type": "blob",
          "size": 0.0419921875,
          "content": "package skipper\n\nvar RunWithShutdown = run\n"
        },
        {
          "name": "fastcgiserver",
          "type": "tree",
          "content": null
        },
        {
          "name": "filters",
          "type": "tree",
          "content": null
        },
        {
          "name": "fixtures",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 8.7822265625,
          "content": "module github.com/zalando/skipper\n\nrequire (\n\tgithub.com/AlexanderYastrebov/noleak v0.0.0-20230711175737-345842f874fb\n\tgithub.com/MicahParks/keyfunc v1.9.0\n\tgithub.com/abbot/go-http-auth v0.4.0\n\tgithub.com/andybalholm/brotli v1.1.1\n\tgithub.com/aryszka/jobqueue v0.0.3\n\tgithub.com/cenkalti/backoff v2.2.1+incompatible\n\tgithub.com/cespare/xxhash/v2 v2.3.0\n\tgithub.com/cjoudrey/gluahttp v0.0.0-20201111170219-25003d9adfa9\n\tgithub.com/cjoudrey/gluaurl v0.0.0-20161028222611-31cbb9bef199\n\tgithub.com/coreos/go-oidc/v3 v3.11.0\n\tgithub.com/dchest/siphash v1.2.3\n\tgithub.com/dgryski/go-jump v0.0.0-20211018200510-ba001c3ffce0\n\tgithub.com/dgryski/go-mpchash v0.0.0-20200819201138-7382f34c4cd1\n\tgithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f\n\tgithub.com/dimfeld/httppath v0.0.0-20170720192232-ee938bf73598\n\tgithub.com/docker/go-connections v0.5.0\n\tgithub.com/envoyproxy/go-control-plane v0.13.0\n\tgithub.com/ghodss/yaml v1.0.0\n\tgithub.com/golang-jwt/jwt/v4 v4.5.1\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/hashicorp/memberlist v0.5.1\n\tgithub.com/instana/go-sensor v1.66.0\n\tgithub.com/lightstep/lightstep-tracer-go v0.26.0\n\tgithub.com/miekg/dns v1.1.62\n\tgithub.com/oklog/ulid v1.3.1\n\tgithub.com/open-policy-agent/opa v0.68.0\n\tgithub.com/open-policy-agent/opa-envoy-plugin v0.68.0-envoy-4\n\tgithub.com/opentracing/basictracer-go v1.1.0\n\tgithub.com/opentracing/opentracing-go v1.2.0\n\tgithub.com/prometheus/client_golang v1.20.5\n\tgithub.com/prometheus/client_model v0.6.1\n\tgithub.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475\n\tgithub.com/redis/go-redis/v9 v9.7.0\n\tgithub.com/sarslanhan/cronmask v0.0.0-20230801193303-54e29300a091\n\tgithub.com/sirupsen/logrus v1.9.3\n\tgithub.com/sony/gobreaker v1.0.0\n\tgithub.com/stretchr/testify v1.10.0\n\tgithub.com/szuecs/rate-limit-buffer v0.9.0\n\tgithub.com/testcontainers/testcontainers-go v0.34.0\n\tgithub.com/tidwall/gjson v1.18.0\n\tgithub.com/tsenart/vegeta v12.7.0+incompatible\n\tgithub.com/uber/jaeger-client-go v2.30.0+incompatible\n\tgithub.com/uber/jaeger-lib v2.4.1+incompatible\n\tgithub.com/yookoala/gofast v0.8.0\n\tgithub.com/yuin/gopher-lua v1.1.1\n\tgo4.org/netipx v0.0.0-20220925034521-797b0c90d8ab\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/exp v0.0.0-20230905200255-921286631fa9\n\tgolang.org/x/net v0.33.0\n\tgolang.org/x/oauth2 v0.24.0\n\tgolang.org/x/sync v0.10.0\n\tgolang.org/x/term v0.27.0\n\tgolang.org/x/time v0.8.0\n\tgoogle.golang.org/protobuf v1.36.1\n\tgopkg.in/go-jose/go-jose.v2 v2.6.3\n\tgopkg.in/yaml.v2 v2.4.0\n\tlayeh.com/gopher-json v0.0.0-20201124131017-552bb3c4c3bf\n\n)\n\nrequire (\n\tcloud.google.com/go/compute/metadata v0.3.0 // indirect\n\tdario.cat/mergo v1.0.0 // indirect\n\tgithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 // indirect\n\tgithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 // indirect\n\tgithub.com/HdrHistogram/hdrhistogram-go v1.1.2 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.2 // indirect\n\tgithub.com/OneOfOne/xxhash v1.2.8 // indirect\n\tgithub.com/agnivade/levenshtein v1.1.1 // indirect\n\tgithub.com/armon/go-metrics v0.4.1 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/bmizerany/perks v0.0.0-20141205001514-d9a9656a3a4b // indirect\n\tgithub.com/bytecodealliance/wasmtime-go/v3 v3.0.2 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.3.0 // indirect\n\tgithub.com/cespare/xxhash v1.1.0 // indirect\n\tgithub.com/cncf/xds/go v0.0.0-20240423153145-555b57ec207b // indirect\n\tgithub.com/containerd/containerd v1.7.21 // indirect\n\tgithub.com/containerd/errdefs v0.1.0 // indirect\n\tgithub.com/containerd/log v0.1.0 // indirect\n\tgithub.com/containerd/platforms v0.2.1 // indirect\n\tgithub.com/cpuguy83/dockercfg v0.3.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/dgraph-io/badger/v3 v3.2103.5 // indirect\n\tgithub.com/dgraph-io/ristretto v0.1.1 // indirect\n\tgithub.com/dgryski/go-gk v0.0.0-20200319235926-a69029f61654 // indirect\n\tgithub.com/distribution/reference v0.6.0 // indirect\n\tgithub.com/docker/docker v27.1.1+incompatible // indirect\n\tgithub.com/docker/go-units v0.5.0 // indirect\n\tgithub.com/dustin/go-humanize v1.0.0 // indirect\n\tgithub.com/envoyproxy/protoc-gen-validate v1.0.4 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/fsnotify/fsnotify v1.7.0 // indirect\n\tgithub.com/go-ini/ini v1.67.0 // indirect\n\tgithub.com/go-jose/go-jose/v4 v4.0.2 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-ole/go-ole v1.2.6 // indirect\n\tgithub.com/gobwas/glob v0.2.3 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang/glog v1.2.1 // indirect\n\tgithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect\n\tgithub.com/golang/protobuf v1.5.4 // indirect\n\tgithub.com/golang/snappy v0.0.4 // indirect\n\tgithub.com/google/btree v1.0.0 // indirect\n\tgithub.com/google/flatbuffers v1.12.1 // indirect\n\tgithub.com/gorilla/mux v1.8.1 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2 v2.20.0 // indirect\n\tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n\tgithub.com/hashicorp/go-immutable-radix v1.3.1 // indirect\n\tgithub.com/hashicorp/go-msgpack/v2 v2.1.1 // indirect\n\tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n\tgithub.com/hashicorp/go-sockaddr v1.0.0 // indirect\n\tgithub.com/hashicorp/golang-lru v0.5.4 // indirect\n\tgithub.com/influxdata/tdigest v0.0.1 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/klauspost/compress v1.17.9 // indirect\n\tgithub.com/lightstep/lightstep-tracer-common/golang/gogo v0.0.0-20210210170715-a8dfcb80d3a7 // indirect\n\tgithub.com/looplab/fsm v1.0.1 // indirect\n\tgithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0 // indirect\n\tgithub.com/magiconair/properties v1.8.7 // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.13 // indirect\n\tgithub.com/moby/docker-image-spec v1.3.1 // indirect\n\tgithub.com/moby/locker v1.0.1 // indirect\n\tgithub.com/moby/patternmatcher v0.6.0 // indirect\n\tgithub.com/moby/sys/sequential v0.5.0 // indirect\n\tgithub.com/moby/sys/user v0.3.0 // indirect\n\tgithub.com/moby/sys/userns v0.1.0 // indirect\n\tgithub.com/moby/term v0.5.0 // indirect\n\tgithub.com/morikuni/aec v1.0.0 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/olekukonko/tablewriter v0.0.5 // indirect\n\tgithub.com/onsi/ginkgo v1.16.5 // indirect\n\tgithub.com/onsi/gomega v1.19.0 // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.1.0 // indirect\n\tgithub.com/peterh/liner v1.2.2 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c // indirect\n\tgithub.com/prometheus/common v0.55.0 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/rivo/uniseg v0.2.0 // indirect\n\tgithub.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529 // indirect\n\tgithub.com/shirou/gopsutil/v3 v3.23.12 // indirect\n\tgithub.com/shoenig/go-m1cpu v0.1.6 // indirect\n\tgithub.com/streadway/quantile v0.0.0-20220407130108-4246515d968d // indirect\n\tgithub.com/tchap/go-patricia/v2 v2.3.1 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.0 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.12 // indirect\n\tgithub.com/tklauser/numcpus v0.6.1 // indirect\n\tgithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb // indirect\n\tgithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 // indirect\n\tgithub.com/yashtewari/glob-intersection v0.2.0 // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.3 // indirect\n\tgo.opencensus.io v0.24.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.53.0 // indirect\n\tgo.opentelemetry.io/otel v1.28.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.28.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.28.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.28.0 // indirect\n\tgo.opentelemetry.io/otel/sdk v1.28.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.28.0 // indirect\n\tgo.opentelemetry.io/proto/otlp v1.3.1 // indirect\n\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/automaxprocs v1.5.3 // indirect\n\tgolang.org/x/mod v0.20.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgolang.org/x/tools v0.24.0 // indirect\n\tgonum.org/v1/gonum v0.8.2 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240701130421-f6361c86f094 // indirect\n\tgoogle.golang.org/grpc v1.66.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\toras.land/oras-go/v2 v2.3.1 // indirect\n\tsigs.k8s.io/yaml v1.4.0 // indirect\n)\n\ngo 1.22\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 67.5830078125,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go/compute/metadata v0.3.0 h1:Tz+eQXMEqDIKRsmY3cHTL6FVaynIjX2QxYC4trgAKZc=\ncloud.google.com/go/compute/metadata v0.3.0/go.mod h1:zFmK7XCadkQkj6TtorcaGlCW1hT1fIilQDwofLpJ20k=\ndario.cat/mergo v1.0.0 h1:AGCNq9Evsj31mOgNPcLyXc+4PNABt905YmuqPYYpBWk=\ndario.cat/mergo v1.0.0/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\ndmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 h1:bvDV9vkmnHYOMsOr4WLk+Vo07yKIzd94sVoIqshQ4bU=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24/go.mod h1:8o94RPi1/7XTJvwPpRSzSUedZrtlirdB3r9Z20bi2f8=\ngithub.com/AlexanderYastrebov/noleak v0.0.0-20230711175737-345842f874fb h1:ZG/Y3/ecDXt8GFY6ZWRgP5COaph3dwoXRvTc7Mz0L7U=\ngithub.com/AlexanderYastrebov/noleak v0.0.0-20230711175737-345842f874fb/go.mod h1:Ac8KyJXsCfx2Gb9h/Eb6SUYk2tQ9At1ICaBm/1mipJQ=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 h1:UQHMgLO+TxOElx5B5HZ4hJQsoJ/PvUvKRhJHDQXO8P8=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=\ngithub.com/DataDog/datadog-go v3.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=\ngithub.com/HdrHistogram/hdrhistogram-go v1.1.2 h1:5IcZpTvzydCQeHzK4Ef/D5rrSqwxob0t8PQPMybUNFM=\ngithub.com/HdrHistogram/hdrhistogram-go v1.1.2/go.mod h1:yDgFjdqOqDEKOvasDdhWNXYg9BVp4O+o5f6V/ehm6Oo=\ngithub.com/MicahParks/keyfunc v1.9.0 h1:lhKd5xrFHLNOWrDc4Tyb/Q1AJ4LCzQ48GVJyVIID3+o=\ngithub.com/MicahParks/keyfunc v1.9.0/go.mod h1:IdnCilugA0O/99dW+/MkvlyrsX8+L8+x95xuVNtM5jw=\ngithub.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=\ngithub.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=\ngithub.com/Microsoft/hcsshim v0.11.7 h1:vl/nj3Bar/CvJSYo7gIQPyRWc9f3c6IeSNavBTSZNZQ=\ngithub.com/Microsoft/hcsshim v0.11.7/go.mod h1:MV8xMfmECjl5HdO7U/3/hFVnkmSBjAjmA09d4bExKcU=\ngithub.com/OneOfOne/xxhash v1.2.2/go.mod h1:HSdplMjZKSmBqAxg5vPj2TmRDmfkzw+cTzAElWljhcU=\ngithub.com/OneOfOne/xxhash v1.2.8 h1:31czK/TI9sNkxIKfaUfGlU47BAxQ0ztGgd9vPyqimf8=\ngithub.com/OneOfOne/xxhash v1.2.8/go.mod h1:eZbhyaAYD41SGSSsnmcpxVoRiQ/MPUTjUdIIOT9Um7Q=\ngithub.com/abbot/go-http-auth v0.4.0 h1:QjmvZ5gSC7jm3Zg54DqWE/T5m1t2AfDu6QlXJT0EVT0=\ngithub.com/abbot/go-http-auth v0.4.0/go.mod h1:Cz6ARTIzApMJDzh5bRMSUou6UMSp0IEXg9km/ci7TJM=\ngithub.com/agnivade/levenshtein v1.1.1 h1:QY8M92nrzkmr798gCo3kmMyqXFzdQVpxLlGPRBij0P8=\ngithub.com/agnivade/levenshtein v1.1.1/go.mod h1:veldBMzWxcCG2ZvUTKD2kJNRdCk5hVbJomOvKkmgYbo=\ngithub.com/ajstarks/svgo v0.0.0-20180226025133-644b8db467af/go.mod h1:K08gAheRH3/J6wwsYMMT4xOr94bZjxIelGM0+d/wbFw=\ngithub.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/andybalholm/brotli v1.1.1 h1:PR2pgnyFznKEugtsUo0xLdDop5SKXd5Qf5ysW+7XdTA=\ngithub.com/andybalholm/brotli v1.1.1/go.mod h1:05ib4cKhjx3OQYUY22hTVd34Bc8upXjOLL2rKwwZBoA=\ngithub.com/arbovm/levenshtein v0.0.0-20160628152529-48b4e1c0c4d0 h1:jfIu9sQUG6Ig+0+Ap1h4unLjW6YQJpKZVmUzxsD4E/Q=\ngithub.com/arbovm/levenshtein v0.0.0-20160628152529-48b4e1c0c4d0/go.mod h1:t2tdKJDJF9BV14lnkjHmOQgcvEKgtqs5a1N3LNdJhGE=\ngithub.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=\ngithub.com/armon/go-metrics v0.4.1 h1:hR91U9KYmb6bLBYLQjyM+3j+rcd/UhE+G78SFnF8gJA=\ngithub.com/armon/go-metrics v0.4.1/go.mod h1:E6amYzXo6aW1tqzoZGT755KkbgrJsSdpwZ+3JqfkOG4=\ngithub.com/aryszka/jobqueue v0.0.3 h1:O5YbgzQCjRomudwnDTY5BrHUNJhvPHQHq7GfGpE+ybs=\ngithub.com/aryszka/jobqueue v0.0.3/go.mod h1:SdxqI6HZ4E1Lss94tey5OfjcAu3bdCDWS1AQzzIN4m4=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bmizerany/perks v0.0.0-20141205001514-d9a9656a3a4b h1:AP/Y7sqYicnjGDfD5VcY4CIfh1hRXBUavxrvELjTiOE=\ngithub.com/bmizerany/perks v0.0.0-20141205001514-d9a9656a3a4b/go.mod h1:ac9efd0D1fsDb3EJvhqgXRbFx7bs2wqZ10HQPeU8U/Q=\ngithub.com/bsm/ginkgo/v2 v2.12.0 h1:Ny8MWAHyOepLGlLKYmXG4IEkioBysk6GpaRTLC8zwWs=\ngithub.com/bsm/ginkgo/v2 v2.12.0/go.mod h1:SwYbGRRDovPVboqFv0tPTcG1sN61LM1Z4ARdbAV9g4c=\ngithub.com/bsm/gomega v1.27.10 h1:yeMWxP2pV2fG3FgAODIY8EiRE3dy0aeFYt4l7wh6yKA=\ngithub.com/bsm/gomega v1.27.10/go.mod h1:JyEr/xRbxbtgWNi8tIEVPUYZ5Dzef52k01W3YH0H+O0=\ngithub.com/bytecodealliance/wasmtime-go/v3 v3.0.2 h1:3uZCA/BLTIu+DqCfguByNMJa2HVHpXvjfy0Dy7g6fuA=\ngithub.com/bytecodealliance/wasmtime-go/v3 v3.0.2/go.mod h1:RnUjnIXxEJcL6BgCvNyzCCRzZcxCgsZCi+RNlvYor5Q=\ngithub.com/cenkalti/backoff v2.2.1+incompatible h1:tNowT99t7UNflLxfYYSlKYsBpXdEet03Pg2g16Swow4=\ngithub.com/cenkalti/backoff v2.2.1+incompatible/go.mod h1:90ReRw6GdpyfrHakVjL/QHaoyV4aDUVVkXQJJJ3NXXM=\ngithub.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=\ngithub.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cespare/xxhash v1.1.0 h1:a6HrQnmkObjyL+Gs60czilIUGqrzKutQD6XZog3p+ko=\ngithub.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=\ngithub.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/circonus-labs/circonus-gometrics v2.3.1+incompatible/go.mod h1:nmEj6Dob7S7YxXgwXpfOuvO54S+tGdZdw9fuRZt25Ag=\ngithub.com/circonus-labs/circonusllhist v0.1.3/go.mod h1:kMXHVDlOchFAehlya5ePtbp5jckzBHf4XRpQvBOLI+I=\ngithub.com/cjoudrey/gluahttp v0.0.0-20201111170219-25003d9adfa9 h1:rdWOzitWlNYeUsXmz+IQfa9NkGEq3gA/qQ3mOEqBU6o=\ngithub.com/cjoudrey/gluahttp v0.0.0-20201111170219-25003d9adfa9/go.mod h1:X97UjDTXp+7bayQSFZk2hPvCTmTZIicUjZQRtkwgAKY=\ngithub.com/cjoudrey/gluaurl v0.0.0-20161028222611-31cbb9bef199 h1:cJ1E8ZwZLfercTX3dywnCAQDilbbi+m2cw3+8tCFpRo=\ngithub.com/cjoudrey/gluaurl v0.0.0-20161028222611-31cbb9bef199/go.mod h1:jC+zrjHA5CaxJzn+tojIoIOzSp/6BlkRWXnMlxNkB+g=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/cncf/xds/go v0.0.0-20240423153145-555b57ec207b h1:ga8SEFjZ60pxLcmhnThWgvH2wg8376yUJmPhEH4H3kw=\ngithub.com/cncf/xds/go v0.0.0-20240423153145-555b57ec207b/go.mod h1:W+zGtBO5Y1IgJhy4+A9GOqVhqLpfZi+vwmdNXUehLA8=\ngithub.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=\ngithub.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=\ngithub.com/containerd/containerd v1.7.21 h1:USGXRK1eOC/SX0L195YgxTHb0a00anxajOzgfN0qrCA=\ngithub.com/containerd/containerd v1.7.21/go.mod h1:e3Jz1rYRUZ2Lt51YrH9Rz0zPyJBOlSvB3ghr2jbVD8g=\ngithub.com/containerd/continuity v0.4.2 h1:v3y/4Yz5jwnvqPKJJ+7Wf93fyWoCB3F5EclWG023MDM=\ngithub.com/containerd/continuity v0.4.2/go.mod h1:F6PTNCKepoxEaXLQp3wDAjygEnImnZ/7o4JzpodfroQ=\ngithub.com/containerd/errdefs v0.1.0 h1:m0wCRBiu1WJT/Fr+iOoQHMQS/eP5myQ8lCv4Dz5ZURM=\ngithub.com/containerd/errdefs v0.1.0/go.mod h1:YgWiiHtLmSeBrvpw+UfPijzbLaB77mEG1WwJTDETIV0=\ngithub.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=\ngithub.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=\ngithub.com/containerd/platforms v0.2.1 h1:zvwtM3rz2YHPQsF2CHYM8+KtB5dvhISiXh5ZpSBQv6A=\ngithub.com/containerd/platforms v0.2.1/go.mod h1:XHCb+2/hzowdiut9rkudds9bE5yJ7npe7dG/wG+uFPw=\ngithub.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=\ngithub.com/coreos/go-etcd v2.0.0+incompatible/go.mod h1:Jez6KQU2B/sWsbdaef3ED8NzMklzPG4d5KIOhIy30Tk=\ngithub.com/coreos/go-oidc/v3 v3.11.0 h1:Ia3MxdwpSw702YW0xgfmP1GVCMA9aEFWu12XUZ3/OtI=\ngithub.com/coreos/go-oidc/v3 v3.11.0/go.mod h1:gE3LgjOgFoHi9a4ce4/tJczr0Ai2/BoDhf0r5lltWI0=\ngithub.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/cpuguy83/dockercfg v0.3.2 h1:DlJTyZGBDlXqUZ2Dk2Q3xHs/FtnooJJVaad2S9GKorA=\ngithub.com/cpuguy83/dockercfg v0.3.2/go.mod h1:sugsbF4//dDlL/i+S+rtpIWp+5h0BHJHfjj5/jFyUJc=\ngithub.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=\ngithub.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dchest/siphash v1.2.3 h1:QXwFc8cFOR2dSa/gE6o/HokBMWtLUaNDVd+22aKHeEA=\ngithub.com/dchest/siphash v1.2.3/go.mod h1:0NvQU092bT0ipiFN++/rXm69QG9tVxLAlQHIXMPAkHc=\ngithub.com/dgraph-io/badger/v3 v3.2103.5 h1:ylPa6qzbjYRQMU6jokoj4wzcaweHylt//CH0AKt0akg=\ngithub.com/dgraph-io/badger/v3 v3.2103.5/go.mod h1:4MPiseMeDQ3FNCYwRbbcBOGJLf5jsE0PPFzRiKjtcdw=\ngithub.com/dgraph-io/ristretto v0.1.1 h1:6CWw5tJNgpegArSHpNHJKldNeq03FQCwYvfMVWajOK8=\ngithub.com/dgraph-io/ristretto v0.1.1/go.mod h1:S1GPSBCYCIhmVNfcth17y2zZtQT6wzkzgwUve0VDWWA=\ngithub.com/dgryski/go-farm v0.0.0-20190423205320-6a90982ecee2/go.mod h1:SqUrOPUnsFjfmXRMNPybcSiG0BgUW2AuFH8PAnS2iTw=\ngithub.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13 h1:fAjc9m62+UWV/WAFKLNi6ZS0675eEUC9y3AlwSbQu1Y=\ngithub.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13/go.mod h1:SqUrOPUnsFjfmXRMNPybcSiG0BgUW2AuFH8PAnS2iTw=\ngithub.com/dgryski/go-gk v0.0.0-20200319235926-a69029f61654 h1:XOPLOMn/zT4jIgxfxSsoXPxkrzz0FaCHwp33x5POJ+Q=\ngithub.com/dgryski/go-gk v0.0.0-20200319235926-a69029f61654/go.mod h1:qm+vckxRlDt0aOla0RYJJVeqHZlWfOm2UIxHaqPB46E=\ngithub.com/dgryski/go-jump v0.0.0-20211018200510-ba001c3ffce0 h1:0wH6nO9QEa02Qx8sIQGw6ieKdz+BXjpccSOo9vXNl4U=\ngithub.com/dgryski/go-jump v0.0.0-20211018200510-ba001c3ffce0/go.mod h1:4hKCXuwrJoYvHZxJ86+bRVTOMyJ0Ej+RqfSm8mHi6KA=\ngithub.com/dgryski/go-mpchash v0.0.0-20200819201138-7382f34c4cd1 h1:De28BM16VaADXA2/F5qY+khGHWZkT70zLijZw8YYIYY=\ngithub.com/dgryski/go-mpchash v0.0.0-20200819201138-7382f34c4cd1/go.mod h1:ut6ck43wTobSb/Jvxo/5uzEEtrfU4gj4m0vh02v7GuQ=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f h1:lO4WD4F/rVNCu3HqELle0jiPLLBs70cWOduZpkS1E78=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f/go.mod h1:cuUVRXasLTGF7a8hSLbxyZXjz+1KgoB3wDUb6vlszIc=\ngithub.com/dgryski/trifles v0.0.0-20200323201526-dd97f9abfb48 h1:fRzb/w+pyskVMQ+UbP35JkH8yB7MYb4q/qhBarqZE6g=\ngithub.com/dgryski/trifles v0.0.0-20200323201526-dd97f9abfb48/go.mod h1:if7Fbed8SFyPtHLHbg49SI7NAdJiC5WIA09pe59rfAA=\ngithub.com/dimfeld/httppath v0.0.0-20170720192232-ee938bf73598 h1:MGKhKyiYrvMDZsmLR/+RGffQSXwEkXgfLSA08qDn9AI=\ngithub.com/dimfeld/httppath v0.0.0-20170720192232-ee938bf73598/go.mod h1:0FpDmbrt36utu8jEmeU05dPC9AB5tsLYVVi+ZHfyuwI=\ngithub.com/distribution/reference v0.6.0 h1:0IXCQ5g4/QMHHkarYzh5l+u8T3t73zM5QvfrDyIgxBk=\ngithub.com/distribution/reference v0.6.0/go.mod h1:BbU0aIcezP1/5jX/8MP0YiH4SdvB5Y4f/wlDRiLyi3E=\ngithub.com/docker/docker v27.1.1+incompatible h1:hO/M4MtV36kzKldqnA37IWhebRA+LnqqcqDja6kVaKY=\ngithub.com/docker/docker v27.1.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=\ngithub.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=\ngithub.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=\ngithub.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/dustin/go-humanize v1.0.0 h1:VSnTsYCnlFHaM2/igO1h6X3HA71jcobQuxemgkq4zYo=\ngithub.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/go-control-plane v0.13.0 h1:HzkeUz1Knt+3bK+8LG1bxOO/jzWZmdxpwC51i202les=\ngithub.com/envoyproxy/go-control-plane v0.13.0/go.mod h1:GRaKG3dwvFoTg4nj7aXdZnvMg4d7nvT/wl9WgVXn3Q8=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/envoyproxy/protoc-gen-validate v1.0.4 h1:gVPz/FMfvh57HdSJQyvBtF00j8JU4zdyUgIUNhlgg0A=\ngithub.com/envoyproxy/protoc-gen-validate v1.0.4/go.mod h1:qys6tmnRsYrQqIhm2bvKZH4Blx/1gTIZ2UKVY1M+Yew=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/fogleman/gg v1.2.1-0.20190220221249-0403632d5b90/go.mod h1:R/bRT+9gY/C5z7JzPU0zXsXHKM4/ayA+zqcVNZzPa1k=\ngithub.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=\ngithub.com/fortytw2/leaktest v1.3.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=\ngithub.com/foxcpp/go-mockdns v1.1.0 h1:jI0rD8M0wuYAxL7r/ynTrCQQq0BVqfB99Vgk7DlmewI=\ngithub.com/foxcpp/go-mockdns v1.1.0/go.mod h1:IhLeSFGed3mJIAXPH2aiRQB+kqz7oqu8ld2qVbOu7Wk=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/ghodss/yaml v1.0.0 h1:wQHKEahhL6wmXdzwWG11gIVCkOv05bNOh+Rxn0yngAk=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=\ngithub.com/go-ini/ini v1.67.0 h1:z6ZrTEZqSWOTyH2FlglNbNgARyHG8oLW9gMELqKr06A=\ngithub.com/go-ini/ini v1.67.0/go.mod h1:ByCAeIL28uOIIG0E3PJtZPDL8WnHpFKFOtgjp+3Ies8=\ngithub.com/go-jose/go-jose/v4 v4.0.2 h1:R3l3kkBds16bO7ZFAEEcofK0MkrAJt3jlJznWZG0nvk=\ngithub.com/go-jose/go-jose/v4 v4.0.2/go.mod h1:WVf9LFMHh/QVrmqrOfqun0C45tMe3RoiKJMPvgWwLfY=\ngithub.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-ole/go-ole v1.2.6 h1:/Fpf6oFPoeFik9ty7siob0G6Ke8QvQEuVcuChpwXzpY=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-restit/lzjson v0.0.0-20161206095556-efe3c53acc68/go.mod h1:7vXSKQt83WmbPeyVjCfNT9YDJ5BUFmcwFsEjI9SCvYM=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=\ngithub.com/gobwas/glob v0.2.3 h1:A4xDbljILXROh+kObIiy5kIaPYD8e96x1tgBhUI5J+Y=\ngithub.com/gobwas/glob v0.2.3/go.mod h1:d3Ez4x06l9bZtSvzIay5+Yzi0fmZzPgnTbPcKjJAkT8=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang-jwt/jwt/v4 v4.4.2/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=\ngithub.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=\ngithub.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=\ngithub.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0/go.mod h1:E/TSTwGwJL78qG/PmXZO1EjYhfJinVAhrmmHX6Z8B9k=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/glog v1.2.1 h1:OptwRhECazUx5ix5TTWC3EZhsZEHWcYWY4FQHTIubm4=\ngithub.com/golang/glog v1.2.1/go.mod h1:6AhwSGph0fcJtXVM/PEHPqZlFeoLxhs7/t5UDAwmO+w=\ngithub.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/golang/snappy v0.0.3/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/golang/snappy v0.0.4 h1:yAGX7huGHXlcLOEtBnF4w7FQwA26wojNCwOYAEhLjQM=\ngithub.com/golang/snappy v0.0.4/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/google/btree v1.0.0 h1:0udJVsspx3VBr5FwtLhQQtuAsVc79tTq0ocGIPAU6qo=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/flatbuffers v1.12.1 h1:MVlul7pQNoDzWRLTw5imwYsl+usrS1TXG2H4jg6ImGw=\ngithub.com/google/flatbuffers v1.12.1/go.mod h1:1AeVuKshWv4vARoZatz6mlQ0JxURH0Kv5+zNeJKJCa8=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gopherjs/gopherjs v0.0.0-20200217142428-fce0ec30dd00/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=\ngithub.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.20.0 h1:bkypFPDjIYGfCYD5mRBvpqxfYX1YCS1PXdKYWi8FsN0=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.20.0/go.mod h1:P+Lt/0by1T8bfcF3z737NnSbmxQAppXMRziHUxPOC8k=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=\ngithub.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-immutable-radix v1.3.1 h1:DKHmCUm2hRBK510BaiZlwvpD40f8bJFeZnpfm2KLowc=\ngithub.com/hashicorp/go-immutable-radix v1.3.1/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-msgpack/v2 v2.1.1 h1:xQEY9yB2wnHitoSzk/B9UjXWRQ67QKu5AOm8aFp8N3I=\ngithub.com/hashicorp/go-msgpack/v2 v2.1.1/go.mod h1:upybraOAblm4S7rx0+jeNy+CWWhzywQsSRV5033mMu4=\ngithub.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\ngithub.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\ngithub.com/hashicorp/go-retryablehttp v0.5.3/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=\ngithub.com/hashicorp/go-sockaddr v1.0.0 h1:GeH6tui99pF4NJgfnhp+L6+FfobzVW3Ah46sLo0ICXs=\ngithub.com/hashicorp/go-sockaddr v1.0.0/go.mod h1:7Xibr9yA9JjQq1JpNB2Vw7kxv8xerXegt+ozgdvDeDU=\ngithub.com/hashicorp/go-uuid v1.0.0 h1:RS8zrF7PhGwyNPOtxSClXXj9HA8feRnJzgnI1RJCSnM=\ngithub.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=\ngithub.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/hashicorp/memberlist v0.5.1 h1:mk5dRuzeDNis2bi6LLoQIXfMH7JQvAzt3mQD0vNZZUo=\ngithub.com/hashicorp/memberlist v0.5.1/go.mod h1:zGDXV6AqbDTKTM6yxW0I4+JtFzZAJVoIPvss4hV8F24=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\ngithub.com/influxdata/tdigest v0.0.1 h1:XpFptwYmnEKUqmkcDjrzffswZ3nvNeevbUSLPP/ZzIY=\ngithub.com/influxdata/tdigest v0.0.1/go.mod h1:Z0kXnxzbTC2qrx4NaIzYkE1k66+6oEDQTvL95hQFh5Y=\ngithub.com/instana/go-sensor v1.66.0 h1:4ugORxo+iNmmSh6a3zmpAdXOJTOWvywSN0zRgLbhAts=\ngithub.com/instana/go-sensor v1.66.0/go.mod h1:Ngi6H3q4iZ6yn4EH9zQYUflI/eDTULrM3B+RW9HN4zI=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=\ngithub.com/jung-kurt/gofpdf v1.0.3-0.20190309125859-24315acbbda5/go.mod h1:7Id9E/uU8ce6rXgefFLlgrJj/GYY22cpxn+r32jIOes=\ngithub.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/klauspost/compress v1.12.3/go.mod h1:8dP1Hq4DHOhN9w426knH3Rhby4rFm6D8eO+e+Dq5Gzg=\ngithub.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2qeMA=\ngithub.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/lightstep/lightstep-tracer-common/golang/gogo v0.0.0-20210210170715-a8dfcb80d3a7 h1:YjW+hUb8Fh2S58z4av4t/0cBMK/Q0aP48RocCFsC8yI=\ngithub.com/lightstep/lightstep-tracer-common/golang/gogo v0.0.0-20210210170715-a8dfcb80d3a7/go.mod h1:Spd59icnvRxSKuyijbbwe5AemzvcyXAUBgApa7VybMw=\ngithub.com/lightstep/lightstep-tracer-go v0.26.0 h1:ZOw8meo7+7SvvUWrL0c4IRr3bd4YIGRtrAgDBaRH6ro=\ngithub.com/lightstep/lightstep-tracer-go v0.26.0/go.mod h1:+H6HJI7VlzXOAyxt5a/ZhsOUFbBU89BTMrBFEWSWGoY=\ngithub.com/looplab/fsm v1.0.1 h1:OEW0ORrIx095N/6lgoGkFkotqH6s7vaFPsgjLAaF5QU=\ngithub.com/looplab/fsm v1.0.1/go.mod h1:PmD3fFvQEIsjMEfvZdrCDZ6y8VwKTwWNjlpEr6IKPO4=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0 h1:6E+4a0GO5zZEnZ81pIr0yLvtUWk2if982qA3F3QD6H4=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0/go.mod h1:zJYVVT2jmtg6P3p1VtQj7WsuWi/y4VnjVBn7F8KPB3I=\ngithub.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=\ngithub.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=\ngithub.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/mattn/go-runewidth v0.0.3/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.13 h1:lTGmDsbAYt5DmK6OnoV7EuIF1wEIFAcxld6ypU4OSgU=\ngithub.com/mattn/go-runewidth v0.0.13/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/miekg/dns v1.1.62 h1:cN8OuEF1/x5Rq6Np+h1epln8OiyPWV+lROx9LxcGgIQ=\ngithub.com/miekg/dns v1.1.62/go.mod h1:mvDlcItzm+br7MToIKqkglaGhlFMHJ9DTNNWONWXbNQ=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/moby/docker-image-spec v1.3.1 h1:jMKff3w6PgbfSa69GfNg+zN/XLhfXJGnEx3Nl2EsFP0=\ngithub.com/moby/docker-image-spec v1.3.1/go.mod h1:eKmb5VW8vQEh/BAr2yvVNvuiJuY6UIocYsFu/DxxRpo=\ngithub.com/moby/locker v1.0.1 h1:fOXqR41zeveg4fFODix+1Ch4mj/gT0NE1XJbp/epuBg=\ngithub.com/moby/locker v1.0.1/go.mod h1:S7SDdo5zpBK84bzzVlKr2V0hz+7x9hWbYC/kq7oQppc=\ngithub.com/moby/patternmatcher v0.6.0 h1:GmP9lR19aU5GqSSFko+5pRqHi+Ohk1O69aFiKkVGiPk=\ngithub.com/moby/patternmatcher v0.6.0/go.mod h1:hDPoyOpDY7OrrMDLaYoY3hf52gNCR/YOUYxkhApJIxc=\ngithub.com/moby/sys/mountinfo v0.6.2 h1:BzJjoreD5BMFNmD9Rus6gdd1pLuecOFPt8wC+Vygl78=\ngithub.com/moby/sys/mountinfo v0.6.2/go.mod h1:IJb6JQeOklcdMU9F5xQ8ZALD+CUr5VlGpwtX+VE0rpI=\ngithub.com/moby/sys/sequential v0.5.0 h1:OPvI35Lzn9K04PBbCLW0g4LcFAJgHsvXsRyewg5lXtc=\ngithub.com/moby/sys/sequential v0.5.0/go.mod h1:tH2cOOs5V9MlPiXcQzRC+eEyab644PWKGRYaaV5ZZlo=\ngithub.com/moby/sys/user v0.3.0 h1:9ni5DlcW5an3SvRSx4MouotOygvzaXbaSrc/wGDFWPo=\ngithub.com/moby/sys/user v0.3.0/go.mod h1:bG+tYYYJgaMtRKgEmuueC0hJEAZWwtIbZTB+85uoHjs=\ngithub.com/moby/sys/userns v0.1.0 h1:tVLXkFOxVu9A64/yh59slHVv9ahO9UIev4JZusOLG/g=\ngithub.com/moby/sys/userns v0.1.0/go.mod h1:IHUYgu/kao6N8YZlp9Cf444ySSvCmDlmzUcYfDHOl28=\ngithub.com/moby/term v0.5.0 h1:xt8Q1nalod/v7BqbG21f8mQPqH+xAaC9C3N3wfWbVP0=\ngithub.com/moby/term v0.5.0/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/morikuni/aec v1.0.0 h1:nP9CBfwrvYnBRgY6qfDQkygYDmYwOilePFkwzv4dU8A=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=\ngithub.com/nxadm/tail v1.4.8 h1:nPr65rt6Y5JFSKQO7qToXr7pePgD6Gwiw05lkbyAQTE=\ngithub.com/nxadm/tail v1.4.8/go.mod h1:+ncqLTQzXmGhMZNUePPaPqPvBxHAIsmXswZKocGu+AU=\ngithub.com/oklog/ulid v1.3.1 h1:EGfNDEx6MqHz8B3uNV6QAib1UR2Lm97sHi3ocA6ESJ4=\ngithub.com/oklog/ulid v1.3.1/go.mod h1:CirwcVhetQ6Lv90oh/F+FBtV6XMibvdAFo93nm5qn4U=\ngithub.com/olekukonko/tablewriter v0.0.5 h1:P2Ga83D34wi1o9J6Wh1mRuqd4mF/x/lgBS7N7AbDhec=\ngithub.com/olekukonko/tablewriter v0.0.5/go.mod h1:hPp6KlRPjbx+hW8ykQs1w3UBbZlj6HuIJcUGPhkA7kY=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.7.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.12.1/go.mod h1:zj2OWP4+oCPe1qIXoGWkgMRwljMUYCdkwsT2108oapk=\ngithub.com/onsi/ginkgo v1.16.5 h1:8xi0RTUf59SOSfEtZMvwTvXYMzG4gV23XVHOZiXNtnE=\ngithub.com/onsi/ginkgo v1.16.5/go.mod h1:+E8gABHa3K6zRBolWtd+ROzc/U5bkGt0FwiG042wbpU=\ngithub.com/onsi/gomega v1.4.3/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=\ngithub.com/onsi/gomega v1.10.1/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=\ngithub.com/onsi/gomega v1.19.0 h1:4ieX6qQjPP/BfC3mpsAtIGGlxTWPeA3Inl/7DtXw1tw=\ngithub.com/onsi/gomega v1.19.0/go.mod h1:LY+I3pBVzYsTBU1AnDwOSxaYi9WoWiqgwooUqq9yPro=\ngithub.com/open-policy-agent/opa v0.68.0 h1:Jl3U2vXRjwk7JrHmS19U3HZO5qxQRinQbJ2eCJYSqJQ=\ngithub.com/open-policy-agent/opa v0.68.0/go.mod h1:5E5SvaPwTpwt2WM177I9Z3eT7qUpmOGjk1ZdHs+TZ4w=\ngithub.com/open-policy-agent/opa-envoy-plugin v0.68.0-envoy-4 h1:yq9TvPBS1qA301q88k8MbGEwba3yu14FaeGVriCvALU=\ngithub.com/open-policy-agent/opa-envoy-plugin v0.68.0-envoy-4/go.mod h1:vRdAOKLNgXitws+CdhIAND6TT0wkFc2IVzAHB3tK4qw=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=\ngithub.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=\ngithub.com/opentracing/basictracer-go v1.1.0 h1:Oa1fTSBvAl8pa3U+IJYqrKm0NALwH9OsgwOqDv4xJW0=\ngithub.com/opentracing/basictracer-go v1.1.0/go.mod h1:V2HZueSJEp879yv285Aap1BS69fQMD+MNP1mRs6mBQc=\ngithub.com/opentracing/opentracing-go v1.0.2/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/opentracing/opentracing-go v1.1.0/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/opentracing/opentracing-go v1.2.0 h1:uEJPy/1a5RIPAJ0Ov+OIO8OxWu77jEv+1B0VhjKrZUs=\ngithub.com/opentracing/opentracing-go v1.2.0/go.mod h1:GxEUsuufX4nBwe+T+Wl9TAgYrxe9dPLANfrWvHYVTgc=\ngithub.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0MwY=\ngithub.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=\ngithub.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=\ngithub.com/peterh/liner v1.2.2 h1:aJ4AOodmL+JxOZZEL2u9iJf8omNRpqHc/EbrK+3mAXw=\ngithub.com/peterh/liner v1.2.2/go.mod h1:xFwJyiKIXJZUKItq5dGHZSTBRAuG/CpeNpWLyiNRNwI=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10 h1:GFCKgmp0tecUJ0sJuv4pzYCqS9+RGSn52M3FUwPs+uo=\ngithub.com/planetscale/vtprotobuf v0.6.1-0.20240319094008-0393e58bdf10/go.mod h1:t/avpk3KcrXxUnYOhZhMXJlSEyie6gQbtLq5NM3loB8=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c h1:ncq/mPwQF4JjgDlrVEn3C11VoGHZN7m8qihwgMEtzYw=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/prashantv/gostub v1.1.0 h1:BTyx3RfQjRHnUWaGF9oQos79AlQ5k8WNktv7VGvVH4g=\ngithub.com/prashantv/gostub v1.1.0/go.mod h1:A5zLQHz7ieHGG7is6LLXLz7I8+3LZzsrV0P1IAHhP5U=\ngithub.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=\ngithub.com/prometheus/client_golang v1.4.0/go.mod h1:e9GMxYsXl05ICDXkRhurwBS4Q3OK1iX/F2sw+iXX5zU=\ngithub.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=\ngithub.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.9.1/go.mod h1:yhUN8i9wzaXS3w1O07YhxHEBxD+W35wd8bs7vj7HSQ4=\ngithub.com/prometheus/common v0.55.0 h1:KEi6DK7lXW/m7Ig5i47x0vRzuBsHuvJdi5ee6Y3G1dc=\ngithub.com/prometheus/common v0.55.0/go.mod h1:2SECS4xJG1kd8XF9IcM1gMX6510RAEL65zxzNImwdc8=\ngithub.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.0.8/go.mod h1:7Qr8sr6344vo1JqZ6HhLceV9o3AJ1Ff+GxbHq6oeK9A=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 h1:N/ElC8H3+5XpJzTSTfLsJV/mx9Q9g7kxmchpfZyxgzM=\ngithub.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=\ngithub.com/redis/go-redis/v9 v9.7.0 h1:HhLSs+B6O021gwzl+locl0zEDnyNkxMtf/Z3NNBMa9E=\ngithub.com/redis/go-redis/v9 v9.7.0/go.mod h1:f6zhXITC7JUJIlPEiBOTXxJgPLdZcA93GewI7inzyWw=\ngithub.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=\ngithub.com/sarslanhan/cronmask v0.0.0-20230801193303-54e29300a091 h1:L644WnBAUw4546Wrt52yzuSPoV24t0ArlMwc5iRr8U0=\ngithub.com/sarslanhan/cronmask v0.0.0-20230801193303-54e29300a091/go.mod h1:qZKxttzn8iyVLtc7edFrmQper3FUBJsc/rHCONN2wIQ=\ngithub.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529 h1:nn5Wsu0esKSJiIVhscUtVbo7ada43DJhG55ua/hjS5I=\ngithub.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=\ngithub.com/shirou/gopsutil/v3 v3.23.12 h1:z90NtUkp3bMtmICZKpC4+WaknU1eXtp5vtbQ11DgpE4=\ngithub.com/shirou/gopsutil/v3 v3.23.12/go.mod h1:1FrWgea594Jp7qmjHUUPlJDTPgcsb9mGnXDxavtikzM=\ngithub.com/shoenig/go-m1cpu v0.1.6 h1:nxdKQNcEB6vzgA2E2bvzKIYRuNj7XNJ4S/aRSwKzFtM=\ngithub.com/shoenig/go-m1cpu v0.1.6/go.mod h1:1JJMcUBvfNwpq05QDQVAnx3gUHr9IYF7GNg9SUEw2VQ=\ngithub.com/shoenig/test v0.6.4 h1:kVTaSd7WLz5WZ2IaoM0RSzRsUD+m8wRR+5qvntpn4LU=\ngithub.com/shoenig/test v0.6.4/go.mod h1:byHiCGXqrVaflBLAMq/srcZIHynQPQgeyvkvXnjqq0k=\ngithub.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/assertions v1.1.1/go.mod h1:tcbTF8ujkAEcZ8TElKY+i30BzYlVhC/LOxJk7iOWnoo=\ngithub.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/sony/gobreaker v1.0.0 h1:feX5fGGXSl3dYd4aHZItw+FpHLvvoaqkawKjVNiFMNQ=\ngithub.com/sony/gobreaker v1.0.0/go.mod h1:ZKptC7FHNvhBz7dN2LGjPVBz2sZJmc0/PkyDJOjmxWY=\ngithub.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spaolacci/murmur3 v1.1.0 h1:7c1g84S4BPRrfL5Xrdp6fOJ206sU9y293DDHaoy0bLI=\ngithub.com/spaolacci/murmur3 v1.1.0/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=\ngithub.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=\ngithub.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/viper v1.3.2/go.mod h1:ZiWeW+zYFKm7srdB9IoDzzZXaJaI5eL9QjNiN/DMA2s=\ngithub.com/streadway/quantile v0.0.0-20220407130108-4246515d968d h1:X4+kt6zM/OVO6gbJdAfJR60MGPsqCzbtXNnjoGqdfAs=\ngithub.com/streadway/quantile v0.0.0-20220407130108-4246515d968d/go.mod h1:lbP8tGiBjZ5YWIc2fzuRpTaz0b/53vT6PEs3QuAWzuU=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2 h1:xuMeJ0Sdp5ZMRXx/aWO6RZxdr3beISkG5/G/aIRr3pY=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/szuecs/rate-limit-buffer v0.9.0 h1:65fBCVsaJFh0E1G5C6/sInEPlYR6dXtF9J9bAv48lLg=\ngithub.com/szuecs/rate-limit-buffer v0.9.0/go.mod h1:BxqrsmnHsCnWcvbtdcaDLEBmjNEvRFU5LQ8edoZ9B0M=\ngithub.com/tchap/go-patricia/v2 v2.3.1 h1:6rQp39lgIYZ+MHmdEq4xzuk1t7OdC35z/xm0BGhTkes=\ngithub.com/tchap/go-patricia/v2 v2.3.1/go.mod h1:VZRHKAb53DLaG+nA9EaYYiaEx6YztwDlLElMsnSHD4k=\ngithub.com/testcontainers/testcontainers-go v0.34.0 h1:5fbgF0vIN5u+nD3IWabQwRybuB4GY8G2HHgCkbMzMHo=\ngithub.com/testcontainers/testcontainers-go v0.34.0/go.mod h1:6P/kMkQe8yqPHfPWNulFGdFHTD8HB2vLq/231xY2iPQ=\ngithub.com/tidwall/gjson v1.18.0 h1:FIDeeyB800efLX89e5a8Y0BNH+LOngJyGrIWxG2FKQY=\ngithub.com/tidwall/gjson v1.18.0/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.2.0 h1:RWIZEg2iJ8/g6fDDYzMpobmaoGh5OLl4AXtGUGPcqCs=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tklauser/go-sysconf v0.3.12 h1:0QaGUFOdQaIVdPgfITYzaTegZvdCjmYO52cSFAEVmqU=\ngithub.com/tklauser/go-sysconf v0.3.12/go.mod h1:Ho14jnntGE1fpdOqQEEaiKRpvIavV0hSfmBq8nJbHYI=\ngithub.com/tklauser/numcpus v0.6.1 h1:ng9scYS7az0Bk4OZLvrNXNSAO2Pxr1XXRAPyjhIx+Fk=\ngithub.com/tklauser/numcpus v0.6.1/go.mod h1:1XfjsgE2zo8GVw7POkMbHENHzVg3GzmoZ9fESEdAacY=\ngithub.com/tsenart/vegeta v12.7.0+incompatible h1:sGlrv11EMxQoKOlDuMWR23UdL90LE5VlhKw/6PWkZmU=\ngithub.com/tsenart/vegeta v12.7.0+incompatible/go.mod h1:Smz/ZWfhKRcyDDChZkG3CyTHdj87lHzio/HOCkbndXM=\ngithub.com/tv42/httpunix v0.0.0-20150427012821-b75d8614f926/go.mod h1:9ESjWnEqriFuLhtthL60Sar/7RFoluCcXsuvEwTV5KM=\ngithub.com/uber/jaeger-client-go v2.30.0+incompatible h1:D6wyKGCecFaSRUpo8lCVbaOOb6ThwMmTEbhRwtKR97o=\ngithub.com/uber/jaeger-client-go v2.30.0+incompatible/go.mod h1:WVhlPFC8FDjOFMMWRy2pZqQJSXxYSwNYOkTr/Z6d3Kk=\ngithub.com/uber/jaeger-lib v2.4.1+incompatible h1:td4jdvLcExb4cBISKIpHuGoVXh+dVKhn2Um6rjCsSsg=\ngithub.com/uber/jaeger-lib v2.4.1+incompatible/go.mod h1:ComeNDZlWwrWnDv8aPp0Ba6+uUTzImX/AauajbLI56U=\ngithub.com/ugorji/go/codec v0.0.0-20181204163529-d75b2dcb6bc8/go.mod h1:VFNgLljTbGfSG7qAOspJ7OScBnGdDN/yBr0sguwnwf0=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb h1:zGWFAtiMcyryUHoUjUJX0/lt1H2+i2Ka2n+D3DImSNo=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 h1:EzJWgHovont7NscjpAxXsDA8S8BMYve8Y5+7cuRE7R0=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=\ngithub.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=\ngithub.com/xyproto/randomstring v1.0.5 h1:YtlWPoRdgMu3NZtP45drfy1GKoojuR7hmRcnhZqKjWU=\ngithub.com/xyproto/randomstring v1.0.5/go.mod h1:rgmS5DeNXLivK7YprL0pY+lTuhNQW3iGxZ18UQApw/E=\ngithub.com/yashtewari/glob-intersection v0.2.0 h1:8iuHdN88yYuCzCdjt0gDe+6bAhUwBeEWqThExu54RFg=\ngithub.com/yashtewari/glob-intersection v0.2.0/go.mod h1:LK7pIC3piUjovexikBbJ26Yml7g8xa5bsjfx2v1fwok=\ngithub.com/yookoala/gofast v0.8.0 h1:UmGTeBj2EF5gvS58ByE9HFdQ9MeYSUIwf7JN9aFno3Y=\ngithub.com/yookoala/gofast v0.8.0/go.mod h1:OJU201Q6HCaE1cASckaTbMm3KB6e0cZxK0mgqfwOKvQ=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/gopher-lua v1.1.1 h1:kYKnWBjvbNP4XLT3+bPEwAXJx262OhaHDWDVOPjL46M=\ngithub.com/yuin/gopher-lua v1.1.1/go.mod h1:GBR0iDaNXjAgGg9zfCvksxSRnQx76gclCIb7kdAd1Pw=\ngithub.com/yusufpapurcu/wmi v1.2.3 h1:E1ctvB7uKFMOJw3fdOW32DwGE9I7t++CRUEMKvFoFiw=\ngithub.com/yusufpapurcu/wmi v1.2.3/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=\ngo.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.5/go.mod h1:5pWMHQbX5EPX2/62yrJeAkowc+lfs/XD7Uxpq3pI6kk=\ngo.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=\ngo.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.53.0 h1:4K4tsIXefpVJtvA/8srF4V4y0akAoPHkIslgAkjixJA=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.53.0/go.mod h1:jjdQuTGVsXV4vSs+CJ2qYDeDPf9yIJV23qlIzBm73Vg=\ngo.opentelemetry.io/otel v1.28.0 h1:/SqNcYk+idO0CxKEUOtKQClMK/MimZihKYMruSMViUo=\ngo.opentelemetry.io/otel v1.28.0/go.mod h1:q68ijF8Fc8CnMHKyzqL6akLO46ePnjkgfIMIjUIX9z4=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.28.0 h1:3Q/xZUyC1BBkualc9ROb4G8qkH90LXEIICcs5zv1OYY=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.28.0/go.mod h1:s75jGIWA9OfCMzF0xr+ZgfrB5FEbbV7UuYo32ahUiFI=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.28.0 h1:R3X6ZXmNPRR8ul6i3WgFURCHzaXjHdm0karRG/+dj3s=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.28.0/go.mod h1:QWFXnDavXWwMx2EEcZsf3yxgEKAqsxQ+Syjp+seyInw=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.19.0 h1:IeMeyr1aBvBiPVYihXIaeIZba6b8E1bYp7lbdxK8CQg=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.19.0/go.mod h1:oVdCUtjq9MK9BlS7TtucsQwUcXcymNiEDjgDD2jMtZU=\ngo.opentelemetry.io/otel/metric v1.28.0 h1:f0HGvSl1KRAU1DLgLGFjrwVyismPlnuU6JD6bOeuA5Q=\ngo.opentelemetry.io/otel/metric v1.28.0/go.mod h1:Fb1eVBFZmLVTMb6PPohq3TO9IIhUisDsbJoL/+uQW4s=\ngo.opentelemetry.io/otel/sdk v1.28.0 h1:b9d7hIry8yZsgtbmM0DKyPWMMUMlK9NEKuIG4aBqWyE=\ngo.opentelemetry.io/otel/sdk v1.28.0/go.mod h1:oYj7ClPUA7Iw3m+r7GeEjz0qckQRJK2B8zjcZEfu7Pg=\ngo.opentelemetry.io/otel/trace v1.28.0 h1:GhQ9cUuQGmNDd5BTCP2dAvv75RdMxEfTmYejp+lkx9g=\ngo.opentelemetry.io/otel/trace v1.28.0/go.mod h1:jPyXzNPg6da9+38HEwElrQiHlVMTnVfM3/yv2OlIHaI=\ngo.opentelemetry.io/proto/otlp v1.3.1 h1:TrMUixzpM0yuc/znrFTP9MMRh8trP93mkCiDVeXrui0=\ngo.opentelemetry.io/proto/otlp v1.3.1/go.mod h1:0X1WI4de4ZsLrrJNLAQbFeLCm3T7yBkR0XqQ7niQU+8=\ngo.uber.org/atomic v1.9.0 h1:ECmE8Bn/WFTYwEW/bpKD3M8VtR/zQVbavAoalC1PYyE=\ngo.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/automaxprocs v1.5.3 h1:kWazyxZUrS3Gs4qUpbwo5kEIMGe/DAvi5Z4tl2NW4j8=\ngo.uber.org/automaxprocs v1.5.3/go.mod h1:eRbA25aqJrxAbsLO0xy5jVwPt7FQnRgjW+efnwa1WM0=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngo4.org/netipx v0.0.0-20220925034521-797b0c90d8ab h1:+yW1yrZ09EYNu1spCUOHBBNRbrLnfmutwyhbhCv3b6Q=\ngo4.org/netipx v0.0.0-20220925034521-797b0c90d8ab/go.mod h1:tgPU4N2u9RByaTN3NC2p9xOzyFpte4jYwsIIRF7XlSc=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20181203042331-505ab145d0a9/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/exp v0.0.0-20180321215751-8460e604b9de/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20180807140117-3d87b88a115f/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190125153040-c74c464bbbf2/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136/go.mod h1:JXzH8nQsPlswgeRAPE3MuO9GYsAcnJvJ4vnMwN/5qkY=\ngolang.org/x/exp v0.0.0-20230905200255-921286631fa9 h1:GoHiUyI/Tp2nVkLI2mCxVkOjsbSXD66ic0XW0js0R9g=\ngolang.org/x/exp v0.0.0-20230905200255-921286631fa9/go.mod h1:S2oDrQGGwySpoQPVqRShND87VCbxmc6bL1Yd2oYrm6k=\ngolang.org/x/image v0.0.0-20180708004352-c73c2afc3b81/go.mod h1:ux5Hcp/YLpHSI86hEcLt0YII63i6oz57MZXIpbrjZUs=\ngolang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=\ngolang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=\ngolang.org/x/mod v0.1.0/go.mod h1:0QHyrYULN0/3qlju5TqG8bIK38QM8yzMo5ekMj3DlcY=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.20.0 h1:utOm6MM3R3dnawAiJgn0y+xvuYRsm1RKM/4giyfDgV0=\ngolang.org/x/mod v0.20.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200421231249-e086a090c8fd/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181205085412-a5c9d58dba9a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210112080510-489259a85091/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210217105451-b926d437f341/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211117180635-dee7805ff2e1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20221010170243-090e33056c14/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.11.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.8.0 h1:9i3RxcPv3PZnitoVGMPDKZSq1xW1gK1Xy3ArNOGZfEg=\ngolang.org/x/time v0.8.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180525024113-a5b4c53f6e8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190206041539-40960b6deb8e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200908211811-12e1bf57a112/go.mod h1:Cj7w3i3Rnn0Xh82ur9kSqwfTHTeVxaDqrfMjpcNT6bE=\ngolang.org/x/tools v0.0.0-20201224043029-2b0845dc783e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.24.0 h1:J1shsA93PJUEVaUSaay7UXAyE8aimq3GW0pjlolpa24=\ngolang.org/x/tools v0.24.0/go.mod h1:YhNqVBIfWHdzvTLs0d8LCuMhkKUgSUKldakyV7W/WDQ=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngonum.org/v1/gonum v0.0.0-20180816165407-929014505bf4/go.mod h1:Y+Yx5eoAFn32cQvJDxZx5Dpnq+c3wtXuadVZAcxbbBo=\ngonum.org/v1/gonum v0.0.0-20181121035319-3f7ecaa7e8ca/go.mod h1:Y+Yx5eoAFn32cQvJDxZx5Dpnq+c3wtXuadVZAcxbbBo=\ngonum.org/v1/gonum v0.8.2 h1:CCXrcPKiGGotvnN6jfUsKk4rRqm7q09/YbKb5xCEvtM=\ngonum.org/v1/gonum v0.8.2/go.mod h1:oe/vMfY3deqTw+1EZJhuvEW2iwGF1bW9wwu7XCu0+v0=\ngonum.org/v1/netlib v0.0.0-20181029234149-ec6d1f5cefe6/go.mod h1:wa6Ws7BG/ESfp6dHfk7C6KdzKA7wR7u/rKwOGE66zvw=\ngonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0/go.mod h1:wa6Ws7BG/ESfp6dHfk7C6KdzKA7wR7u/rKwOGE66zvw=\ngonum.org/v1/plot v0.0.0-20190515093506-e2840ee46a6b/go.mod h1:Wt8AAjI+ypCyYX3nZBvf6cAIx93T+c/OS2HFAYskSZc=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190530194941-fb225487d101/go.mod h1:z3L6/3dTEVtUr6QSP8miRzeRqwQOioJ9I66odjN4I7s=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094 h1:0+ozOGcrp+Y8Aq8TLNN2Aliibms5LEzsq99ZZmAGYm0=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240701130421-f6361c86f094/go.mod h1:fJ/e3If/Q67Mj99hin0hMhiNyCRmt6BQ2aWIJshUSJw=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240701130421-f6361c86f094 h1:BwIjyKYGsK9dMCBOorzRri8MQwmi7mT9rGHsCEinZkA=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240701130421-f6361c86f094/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.21.0/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=\ngoogle.golang.org/grpc v1.66.0 h1:DibZuoBznOxbDQxRINckZcUvnCEvrW9pcWIE2yF9r1c=\ngoogle.golang.org/grpc v1.66.0/go.mod h1:s3/l6xSSCURdVfAnL+TqCNMyTDAGN6+lZeVxnZR128Y=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.36.1 h1:yBPeRvTftaleIgM3PZ/WBIZ7XM/eEYAaEyCwvyjq/gk=\ngoogle.golang.org/protobuf v1.36.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/go-jose/go-jose.v2 v2.6.3 h1:nt80fvSDlhKWQgSWyHyy5CfmlQr+asih51R8PTWNKKs=\ngopkg.in/go-jose/go-jose.v2 v2.6.3/go.mod h1:zzZDPkNNw/c9IE7Z9jr11mBZQhKQTMzoEEIoEdZlFBI=\ngopkg.in/ini.v1 v1.38.2/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.5.1 h1:EENdUnS3pdur5nybKYIh2Vfgc8IUNBjxDPSjtiJcOzU=\ngotest.tools/v3 v3.5.1/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nlayeh.com/gopher-json v0.0.0-20201124131017-552bb3c4c3bf h1:rRz0YsF7VXj9fXRF6yQgFI7DzST+hsI3TeFSGupntu0=\nlayeh.com/gopher-json v0.0.0-20201124131017-552bb3c4c3bf/go.mod h1:ivKkcY8Zxw5ba0jldhZCYYQfGdb2K6u9tbYK1AwMIBc=\noras.land/oras-go/v2 v2.3.1 h1:lUC6q8RkeRReANEERLfH86iwGn55lbSWP20egdFHVec=\noras.land/oras-go/v2 v2.3.1/go.mod h1:5AQXVEu1X/FKp1F9DMOb5ZItZBOa0y5dha0yCm4NR9c=\nrsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=\nsigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=\nsigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "io",
          "type": "tree",
          "content": null
        },
        {
          "name": "jwt",
          "type": "tree",
          "content": null
        },
        {
          "name": "loadbalancer",
          "type": "tree",
          "content": null
        },
        {
          "name": "logging",
          "type": "tree",
          "content": null
        },
        {
          "name": "metrics",
          "type": "tree",
          "content": null
        },
        {
          "name": "metricsinit_test.go",
          "type": "blob",
          "size": 2.0458984375,
          "content": "package skipper\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"syscall\"\n\t\"testing\"\n\t\"time\"\n)\n\n// TODO: what is a more straightforward way to get an unused port?\nfunc availablePort() (port int, err error) {\n\tvar l net.Listener\n\tl, err = net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn\n\t}\n\n\tport = l.Addr().(*net.TCPAddr).Port\n\tl.Close()\n\treturn\n}\n\nfunc mustAvailablePort(t *testing.T) int {\n\tp, err := availablePort()\n\tif err != nil {\n\t\tt.Error(t)\n\t}\n\n\treturn p\n}\n\n// Initialization order of the metrics.Default global must be done before other packages may start to use it.\nfunc TestInitOrderAndDefault(t *testing.T) {\n\tconst (\n\t\tringMetricsUpdatePeriod = time.Millisecond\n\t\ttestTimeout             = 5 * time.Second\n\t)\n\n\tport := mustAvailablePort(t)\n\tsupportPort := mustAvailablePort(t)\n\tredisPort := mustAvailablePort(t)\n\tsig := make(chan os.Signal, 1)\n\tdone := make(chan struct{})\n\tgo func() {\n\t\toptions := Options{\n\t\t\tAddress:                       fmt.Sprintf(\":%d\", port),\n\t\t\tSupportListener:               fmt.Sprintf(\":%d\", supportPort),\n\t\t\tEnableRuntimeMetrics:          true,\n\t\t\tEnableSwarm:                   true,\n\t\t\tSwarmRedisURLs:                []string{fmt.Sprintf(\"localhost:%d\", redisPort)},\n\t\t\tEnableRatelimiters:            true,\n\t\t\tSwarmRedisConnMetricsInterval: ringMetricsUpdatePeriod,\n\t\t\tPassiveHealthCheck: map[string]string{\n\t\t\t\t\"period\":               \"1m\",\n\t\t\t\t\"min-requests\":         \"10\",\n\t\t\t\t\"max-drop-probability\": \"0.9\",\n\t\t\t\t\"min-drop-probability\": \"0.05\",\n\t\t\t},\n\t\t}\n\n\t\ttornDown := make(chan struct{})\n\t\tif err := run(options, sig, tornDown); err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\n\t\t<-tornDown\n\t\tclose(done)\n\t}()\n\n\tto := time.After(testTimeout)\n\tfunc() {\n\t\tfor {\n\t\t\trsp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/metrics/swarm\", supportPort))\n\t\t\tif err != nil {\n\t\t\t\tt.Log(\"error making request\", err)\n\t\t\t} else {\n\t\t\t\trsp.Body.Close()\n\t\t\t\tif rsp.StatusCode == http.StatusOK {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tselect {\n\t\t\tcase <-time.After(ringMetricsUpdatePeriod):\n\t\t\tcase <-to:\n\t\t\t\tt.Error(\"test timeout\")\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tsig <- syscall.SIGTERM\n\t<-done\n}\n"
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 2.6396484375,
          "content": "site_name: Skipper\nsite_url: https://opensource.zalando.com/skipper/\nnav:\n    - Introduction: index.md\n    - Reference:\n        - Filters: reference/filters.md\n        - Predicates: reference/predicates.md\n        - Backends: reference/backends.md\n        - Egress: reference/egress.md\n        - Scripts: reference/scripts.md\n        - Plugins: reference/plugins.md\n        - Architecture: reference/architecture.md\n        - Development: reference/development.md\n        - Data Clients:\n            - Eskip File: data-clients/eskip-file.md\n            - Remote Eskip: data-clients/eskip-remote.md\n            - Route String: data-clients/route-string.md\n            - Kubernetes: data-clients/kubernetes.md\n            - Etcd: data-clients/etcd.md\n        - Operation:\n            - Deployment: operation/deployment.md\n            - Operation: operation/operation.md\n    - Kubernetes:\n        - Ingress Controller Deployment: kubernetes/ingress-controller.md\n        - Ingress Usage: kubernetes/ingress-usage.md\n        - Ingress Backends: kubernetes/ingress-backends.md\n        - RouteGroups: kubernetes/routegroups.md\n        - RouteGroup CRD Semantics: kubernetes/routegroup-crd.md\n        - RouteGroup Validation: kubernetes/routegroup-validation.md\n        - East-West aka svc-to-svc: kubernetes/east-west-usage.md\n        - External Addresses aka External Name: kubernetes/external-addresses.md\n    - Tutorials:\n        - Basics: tutorials/basics.md\n        - Common Use Cases: tutorials/common-use-cases.md\n        - Authentication and Authorization: tutorials/auth.md\n        - Ratelimits: tutorials/ratelimit.md\n        - Shadow Traffic: tutorials/shadow-traffic.md\n        - Operations: tutorials/operations.md\n        - Development: tutorials/development.md\n        - Built Your Own Proxy: tutorials/built-your-own.md\ntheme:\n  name: material\n  favicon: favicon.ico\n  logo: skipper-h180.png\n  feature:\n    tabs: true\n  palette:\n    primary: 'white'\n  highlightjs: true\n  hljs_languages:\n  - yaml\n  - go\nrepo_name: GitHub\nrepo_url: https://github.com/zalando/skipper/\nedit_uri: edit/master/docs/\nmarkdown_extensions:\n- toc:\n    permalink: true\n- admonition\n- smarty\n- extra\n- codehilite\n- markdown_include.include:\n    base_path: docs\n- pymdownx.magiclink\n- pymdownx.superfences\n- pymdownx.details\n- pymdownx.mark\n- pymdownx.arithmatex:\n    generic: true\n# https://squidfunk.github.io/mkdocs-material/reference/diagrams/\n- pymdownx.superfences:\n    custom_fences:\n      - name: mermaid\n        class: mermaid\n        format: !!python/name:pymdownx.superfences.fence_code_format\nextra_javascript:\n  - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\n\nplugins:\n- search\n\nstrict: true\n"
        },
        {
          "name": "net",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "pathmux",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins.go",
          "type": "blob",
          "size": 10.9990234375,
          "content": "package skipper\n\nimport (\n\t\"fmt\"\n\n\t\"os\"\n\t\"path/filepath\"\n\t\"plugin\"\n\t\"strings\"\n\n\tlog \"github.com/sirupsen/logrus\"\n\t\"github.com/zalando/skipper/filters\"\n\t\"github.com/zalando/skipper/routing\"\n)\n\nfunc (o *Options) findAndLoadPlugins() error {\n\tfound := make(map[string]string)\n\tdone := make(map[string][]string)\n\n\tfor _, dir := range o.PluginDirs {\n\t\tfilepath.Walk(dir, func(path string, info os.FileInfo, err error) error {\n\t\t\tif err != nil {\n\t\t\t\t// don't fail when default plugin dir is missing\n\t\t\t\tif _, ok := err.(*os.PathError); ok && dir == DefaultPluginDir {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\n\t\t\t\tlog.Fatalf(\"failed to search for plugins: %s\", err)\n\t\t\t}\n\t\t\tif info.IsDir() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif strings.HasSuffix(path, \".so\") {\n\t\t\t\tname := filepath.Base(path)\n\t\t\t\tname = name[:len(name)-3] // strip suffix\n\t\t\t\tfound[name] = path\n\t\t\t\tlog.Printf(\"found plugin %s at %s\", name, path)\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\t}\n\n\tif err := o.loadPlugins(found, done); err != nil {\n\t\treturn err\n\t}\n\tif err := o.loadFilterPlugins(found, done); err != nil {\n\t\treturn err\n\t}\n\tif err := o.loadPredicatePlugins(found, done); err != nil {\n\t\treturn err\n\t}\n\tif err := o.loadDataClientPlugins(found, done); err != nil {\n\t\treturn err\n\t}\n\n\tfor name, path := range found {\n\t\tlog.Printf(\"attempting to load plugin from %s\", path)\n\t\tmod, err := plugin.Open(path)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"open plugin %s from %s: %s\", name, path, err)\n\t\t}\n\n\t\tconf, err := readPluginConfig(path)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to read config for %s: %s\", path, err)\n\t\t}\n\n\t\tif !pluginIsLoaded(done, name, \"InitPlugin\") {\n\t\t\tif sym, err := mod.Lookup(\"InitPlugin\"); err == nil {\n\t\t\t\tfltrs, preds, dcs, err := initPlugin(sym, path, conf)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"filter plugin %s returned: %s\", path, err)\n\t\t\t\t}\n\t\t\t\to.CustomFilters = append(o.CustomFilters, fltrs...)\n\t\t\t\to.CustomPredicates = append(o.CustomPredicates, preds...)\n\t\t\t\to.CustomDataClients = append(o.CustomDataClients, dcs...)\n\t\t\t\tlog.Printf(\"multitype plugin %s loaded from %s (filter: %d, predicate: %d, dataclient: %d)\",\n\t\t\t\t\tname, path, len(fltrs), len(preds), len(dcs))\n\t\t\t\tmarkPluginLoaded(done, name, \"InitPlugin\")\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Printf(\"plugin %s already loaded with InitPlugin\", name)\n\t\t}\n\n\t\tif !pluginIsLoaded(done, name, \"InitFilter\") {\n\t\t\tif sym, err := mod.Lookup(\"InitFilter\"); err == nil {\n\t\t\t\tspec, err := initFilterPlugin(sym, path, conf)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"filter plugin %s returned: %s\", path, err)\n\t\t\t\t}\n\t\t\t\to.CustomFilters = append(o.CustomFilters, spec)\n\t\t\t\tlog.Printf(\"filter plugin %s loaded from %s\", name, path)\n\t\t\t\tmarkPluginLoaded(done, name, \"InitFilter\")\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Printf(\"plugin %s already loaded with InitFilter\", name)\n\t\t}\n\n\t\tif !pluginIsLoaded(done, name, \"InitPredicate\") {\n\t\t\tif sym, err := mod.Lookup(\"InitPredicate\"); err == nil {\n\t\t\t\tspec, err := initPredicatePlugin(sym, path, conf)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"predicate plugin %s returned: %s\", path, err)\n\t\t\t\t}\n\t\t\t\to.CustomPredicates = append(o.CustomPredicates, spec)\n\t\t\t\tlog.Printf(\"predicate plugin %s loaded from %s\", name, path)\n\t\t\t\tmarkPluginLoaded(done, name, \"InitPredicate\")\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Printf(\"plugin %s already loaded with InitPredicate\", name)\n\t\t}\n\n\t\tif !pluginIsLoaded(done, name, \"InitDataClient\") {\n\t\t\tif sym, err := mod.Lookup(\"InitDataClient\"); err == nil {\n\t\t\t\tspec, err := initDataClientPlugin(sym, path, conf)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"data client plugin %s returned: %s\", path, err)\n\t\t\t\t}\n\t\t\t\to.CustomDataClients = append(o.CustomDataClients, spec)\n\t\t\t\tlog.Printf(\"data client plugin %s loaded from %s\", name, path)\n\t\t\t\tmarkPluginLoaded(done, name, \"InitDataClient\")\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Printf(\"plugin %s already loaded with InitDataClient\", name)\n\t\t}\n\t}\n\n\tvar implementsMultiple []string\n\tfor name, specs := range done {\n\t\tif len(specs) > 1 {\n\t\t\timplementsMultiple = append(implementsMultiple, name)\n\t\t}\n\t}\n\tif len(implementsMultiple) != 0 {\n\t\treturn fmt.Errorf(\"found plugins implementing multiple Init* functions: %v\", implementsMultiple)\n\t}\n\treturn nil\n}\n\nfunc pluginIsLoaded(done map[string][]string, name, spec string) bool {\n\tloaded, ok := done[name]\n\tif !ok {\n\t\treturn false\n\t}\n\tfor _, s := range loaded {\n\t\tif s == spec {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc markPluginLoaded(done map[string][]string, name, spec string) {\n\tdone[name] = append(done[name], spec)\n}\n\nfunc (o *Options) loadPlugins(found map[string]string, done map[string][]string) error {\n\tfor _, plug := range o.Plugins {\n\t\tname := plug[0]\n\t\tpath, ok := found[name]\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"multitype plugin %s not found in plugin dirs\", name)\n\t\t}\n\t\tfltrs, preds, dcs, err := loadPlugin(path, plug[1:])\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to load plugin %s: %s\", path, err)\n\t\t}\n\n\t\to.CustomFilters = append(o.CustomFilters, fltrs...)\n\t\to.CustomPredicates = append(o.CustomPredicates, preds...)\n\t\to.CustomDataClients = append(o.CustomDataClients, dcs...)\n\t\tlog.Printf(\"multitype plugin %s loaded from %s (filter: %d, predicate: %d, dataclient: %d)\",\n\t\t\tname, path, len(fltrs), len(preds), len(dcs))\n\t\tmarkPluginLoaded(done, name, \"InitPlugin\")\n\t}\n\treturn nil\n}\n\nfunc loadPlugin(path string, args []string) ([]filters.Spec, []routing.PredicateSpec, []routing.DataClient, error) {\n\tmod, err := plugin.Open(path)\n\tif err != nil {\n\t\treturn nil, nil, nil, fmt.Errorf(\"open multitype plugin %s: %s\", path, err)\n\t}\n\n\tconf, err := readPluginConfig(path)\n\tif err != nil {\n\t\treturn nil, nil, nil, fmt.Errorf(\"failed to read config for %s: %s\", path, err)\n\t}\n\n\tsym, err := mod.Lookup(\"InitPlugin\")\n\tif err != nil {\n\t\treturn nil, nil, nil, fmt.Errorf(\"lookup module symbol failed for %s: %s\", path, err)\n\t}\n\treturn initPlugin(sym, path, append(conf, args...))\n}\n\nfunc initPlugin(sym plugin.Symbol, path string, args []string) ([]filters.Spec, []routing.PredicateSpec, []routing.DataClient, error) {\n\tfn, ok := sym.(func([]string) ([]filters.Spec, []routing.PredicateSpec, []routing.DataClient, error))\n\tif !ok {\n\t\treturn nil, nil, nil, fmt.Errorf(\"plugin %s's InitPlugin function has wrong signature\", path)\n\t}\n\tfltrs, preds, dcs, err := fn(args)\n\tif err != nil {\n\t\treturn nil, nil, nil, fmt.Errorf(\"plugin %s returned: %s\", path, err)\n\t}\n\treturn fltrs, preds, dcs, nil\n}\n\nfunc (o *Options) loadFilterPlugins(found map[string]string, done map[string][]string) error {\n\tfor _, fltr := range o.FilterPlugins {\n\t\tname := fltr[0]\n\t\tpath, ok := found[name]\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"filter plugin %s not found in plugin dirs\", name)\n\t\t}\n\t\tspec, err := loadFilterPlugin(path, fltr[1:])\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to load plugin %s: %s\", path, err)\n\t\t}\n\t\to.CustomFilters = append(o.CustomFilters, spec)\n\t\tlog.Printf(\"loaded plugin %s (%s) from %s\", name, spec.Name(), path)\n\t\tmarkPluginLoaded(done, name, \"InitFilter\")\n\t}\n\treturn nil\n}\n\nfunc loadFilterPlugin(path string, args []string) (filters.Spec, error) {\n\tmod, err := plugin.Open(path)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"open filter plugin %s: %s\", path, err)\n\t}\n\n\tconf, err := readPluginConfig(path)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config for %s: %s\", path, err)\n\t}\n\n\tsym, err := mod.Lookup(\"InitFilter\")\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"lookup module symbol failed for %s: %s\", path, err)\n\t}\n\treturn initFilterPlugin(sym, path, append(conf, args...))\n}\n\nfunc initFilterPlugin(sym plugin.Symbol, path string, args []string) (filters.Spec, error) {\n\tfn, ok := sym.(func([]string) (filters.Spec, error))\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"plugin %s's InitFilter function has wrong signature\", path)\n\t}\n\tspec, err := fn(args)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"plugin %s returned: %s\", path, err)\n\t}\n\treturn spec, nil\n}\n\nfunc (o *Options) loadPredicatePlugins(found map[string]string, done map[string][]string) error {\n\tfor _, pred := range o.PredicatePlugins {\n\t\tname := pred[0]\n\t\tpath, ok := found[name]\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"predicate plugin %s not found in plugin dirs\", name)\n\t\t}\n\t\tspec, err := loadPredicatePlugin(path, pred[1:])\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to load plugin %s: %s\", path, err)\n\t\t}\n\t\to.CustomPredicates = append(o.CustomPredicates, spec)\n\t\tlog.Printf(\"loaded plugin %s (%s) from %s\", name, spec.Name(), path)\n\t\tmarkPluginLoaded(done, name, \"InitPredicate\")\n\t}\n\treturn nil\n}\n\nfunc loadPredicatePlugin(path string, args []string) (routing.PredicateSpec, error) {\n\tmod, err := plugin.Open(path)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"open predicate module %s: %s\", path, err)\n\t}\n\n\tconf, err := readPluginConfig(path)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config for %s: %s\", path, err)\n\t}\n\tsym, err := mod.Lookup(\"InitPredicate\")\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"lookup module symbol failed for %s: %s\", path, err)\n\t}\n\treturn initPredicatePlugin(sym, path, append(conf, args...))\n}\n\nfunc initPredicatePlugin(sym plugin.Symbol, path string, args []string) (routing.PredicateSpec, error) {\n\tfn, ok := sym.(func([]string) (routing.PredicateSpec, error))\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"plugin %s's InitPredicate function has wrong signature\", path)\n\t}\n\tspec, err := fn(args)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"plugin %s returned: %s\", path, err)\n\t}\n\treturn spec, nil\n}\n\nfunc (o *Options) loadDataClientPlugins(found map[string]string, done map[string][]string) error {\n\tfor _, pred := range o.DataClientPlugins {\n\t\tname := pred[0]\n\t\tpath, ok := found[name]\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"data client plugin %s not found in plugin dirs\", name)\n\t\t}\n\t\tspec, err := loadDataClientPlugin(path, pred[1:])\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to load plugin %s: %s\", path, err)\n\t\t}\n\t\to.CustomDataClients = append(o.CustomDataClients, spec)\n\t\tlog.Printf(\"loaded plugin %s from %s\", name, path)\n\t\tmarkPluginLoaded(done, name, \"InitDataClient\")\n\t}\n\treturn nil\n}\n\nfunc loadDataClientPlugin(path string, args []string) (routing.DataClient, error) {\n\tmod, err := plugin.Open(path)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"open data client module %s: %s\", path, err)\n\t}\n\n\tconf, err := readPluginConfig(path)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read config for %s: %s\", path, err)\n\t}\n\n\tsym, err := mod.Lookup(\"InitDataClient\")\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"lookup module symbol failed for %s: %s\", path, err)\n\t}\n\treturn initDataClientPlugin(sym, path, append(conf, args...))\n}\n\nfunc initDataClientPlugin(sym plugin.Symbol, path string, args []string) (routing.DataClient, error) {\n\tfn, ok := sym.(func([]string) (routing.DataClient, error))\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"plugin %s's InitDataClient function has wrong signature\", path)\n\t}\n\tspec, err := fn(args)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"module %s returned: %s\", path, err)\n\t}\n\treturn spec, nil\n}\n\nfunc readPluginConfig(plugin string) (conf []string, err error) {\n\tdata, err := os.ReadFile(plugin[:len(plugin)-3] + \".conf\")\n\tif err != nil {\n\t\tif os.IsNotExist(err) {\n\t\t\treturn nil, nil\n\t\t}\n\t\treturn nil, err\n\t}\n\tfor _, line := range strings.Split(string(data), \"\\n\") {\n\t\tline = strings.TrimSpace(line)\n\t\tif line != \"\" && line[0] != '#' {\n\t\t\tconf = append(conf, line)\n\t\t}\n\t}\n\treturn conf, nil\n}\n"
        },
        {
          "name": "plugins_test.go",
          "type": "blob",
          "size": 0.5546875,
          "content": "package skipper\n\nimport \"testing\"\n\nfunc TestLoadPlugins(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip()\n\t}\n\n\to := Options{\n\t\tPluginDirs:    []string{\"./_test_plugins\"},\n\t\tFilterPlugins: [][]string{{\"filter_noop\"}},\n\t}\n\tif err := o.findAndLoadPlugins(); err != nil {\n\t\tt.Fatalf(\"Failed to load plugins: %s\", err)\n\t}\n}\n\nfunc TestLoadPluginsFail(t *testing.T) {\n\tif testing.Short() {\n\t\tt.Skip()\n\t}\n\n\to := Options{\n\t\tPluginDirs: []string{\"./_test_plugins_fail\"},\n\t}\n\tif err := o.findAndLoadPlugins(); err == nil {\n\t\tt.Fatalf(\"did not fail to load plugins: %s\", err)\n\t}\n}\n"
        },
        {
          "name": "predicates",
          "type": "tree",
          "content": null
        },
        {
          "name": "proxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "queuelistener",
          "type": "tree",
          "content": null
        },
        {
          "name": "ratelimit",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 19.2685546875,
          "content": "[![Build Status](https://github.com/zalando/skipper/actions/workflows/master.yaml/badge.svg)](https://github.com/zalando/skipper/actions/workflows/master.yaml)\n[![Doc](https://img.shields.io/badge/user-documentation-darkblue.svg)](https://opensource.zalando.com/skipper)\n[![Go Reference](https://pkg.go.dev/badge/github.com/zalando/skipper.svg)](https://pkg.go.dev/github.com/zalando/skipper)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Go Report Card](https://goreportcard.com/badge/zalando/skipper)](https://goreportcard.com/report/zalando/skipper)\n[![Coverage Status](https://coveralls.io/repos/github/zalando/skipper/badge.svg?branch=master)](https://coveralls.io/github/zalando/skipper?branch=master)\n[![GitHub release](https://img.shields.io/github/release/zalando/skipper.svg)](https://github.com/zalando/skipper/releases)\n[![OpenSSF Best Practices](https://bestpractices.coreinfrastructure.org/projects/2461/badge)](https://bestpractices.coreinfrastructure.org/en/projects/2461)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/zalando/skipper/badge)](https://api.securityscorecards.dev/projects/github.com/zalando/skipper)\n[![Slack](https://img.shields.io/badge/Gopher%20Slack-%23skipper-green.svg)](https://invite.slack.golangbridge.org/)\n![CodeQL](https://github.com/zalando/skipper/actions/workflows/codeql-analysis.yml/badge.svg)\n\n\n<p><img height=\"180\" alt=\"Skipper\" src=\"https://raw.githubusercontent.com/zalando/skipper/master/img/skipper-h180.png\"></p>\n\n# Skipper\n\nSkipper is an HTTP router and reverse proxy for service composition. It's designed to handle >300k HTTP route\ndefinitions with detailed lookup conditions, and flexible augmentation of the request flow with filters. It can be\nused out of the box or extended with custom lookup, filter logic and configuration sources.\n\n## Main features:\n\nAn overview of [deployments and data-clients](https://opensource.zalando.com/skipper/operation/deployment/)\nshows some use cases to run skipper.\n\nSkipper\n\n- identifies routes based on the requests' properties, such as path, method, host and headers\n- allows modification of the requests and responses with filters that are independently configured for each route\n- simultaneously streams incoming requests and backend responses\n- optionally acts as a final endpoint (shunt), e.g. as a static file server or a mock backend for diagnostics\n- updates routing rules without downtime, while supporting multiple types of data sources — including\n  [etcd](https://github.com/coreos/etcd), [Kubernetes Ingress](https://opensource.zalando.com/skipper/data-clients/kubernetes/), [static files](https://opensource.zalando.com/skipper/data-clients/eskip-file/), [route string](https://opensource.zalando.com/skipper/data-clients/route-string/) and\n  [custom configuration sources](https://opensource.zalando.com/skipper/tutorials/development/#dataclients)\n- can serve as a\n  [Kubernetes Ingress controller](https://zalando.github.io/skipper/data-clients/kubernetes/)\n  without reloads. You can use it in combination with a controller that will route public traffic to\n  your skipper fleet; [see AWS example](https://github.com/zalando-incubator/kube-ingress-aws-controller)\n- shipped with\n   - eskip: a descriptive configuration language designed for routing\n     rules\n   - routesrv: proxy to omit kube-apiserver overload leveraging Etag\n     header to reduce amount of CPU used in your skipper data plane\n   - webhook: Kubernetes validation webhook to make sure your\n     manifests are deployed safely\n\nSkipper provides a default executable command with a few built-in filters. However, its primary use case is to\nbe extended with custom filters, predicates or data sources. [Go here for additional documentation](https://pkg.go.dev/github.com/zalando/skipper).\n\nA few examples for extending Skipper:\n\n- Example proxy with custom filter https://github.com/szuecs/skipper-example-proxy\n- Image server https://github.com/zalando-stups/skrop\n- Plugins repository https://github.com/skipper-plugins/, [plugin docs](https://opensource.zalando.com/skipper/reference/plugins/)\n\n### Getting Started\n\n#### Prerequisites/Requirements\n\nIn order to build and run Skipper, only the latest version of Go needs to be installed. Skipper can use\nInnkeeper or Etcd as data sources for routes, or for the simplest cases, a local configuration file. See more\ndetails in the documentation: https://pkg.go.dev/github.com/zalando/skipper\n\n\n#### Installation\n\n##### From Binary\n\nDownload binary tgz from https://github.com/zalando/skipper/releases/latest\n\nExample, assumes that you have $GOBIN set to a directory that exists\nand is in your $PATH:\n\n```\n% curl -LO https://github.com/zalando/skipper/releases/download/v0.14.8/skipper-v0.14.8-linux-amd64.tar.gz\n% tar xzf skipper-v0.14.8-linux-amd64.tar.gz\n% mv skipper-v0.14.8-linux-amd64/* $GOBIN/\n% skipper -version\nSkipper version v0.14.8 (commit: 95057948, runtime: go1.19.1)\n```\n\n##### From Source\n\n\n```\n% git clone https://github.com/zalando/skipper.git\n% make\n% ./bin/skipper -version\nSkipper version v0.14.8 (commit: 95057948, runtime: go1.19.3)\n```\n\n#### Running\n\nCreate a file with a route:\n\n    echo 'hello: Path(\"/hello\") -> \"https://www.example.org\"' > example.eskip\n\nOptionally, verify the file's syntax:\n\n    eskip check example.eskip\n\nIf no errors are detected nothing is logged, else a descriptive error is logged.\n\nStart Skipper and make an HTTP request:\n\n    skipper -routes-file example.eskip &\n    curl localhost:9090/hello\n\n##### Docker\n\nTo run the latest Docker container:\n\n    docker run registry.opensource.zalan.do/teapot/skipper:latest\n\nTo run `eskip` you first mount the `.eskip` file, into the container, and run the command\n\n    docker run \\\n      -v $(PWD)/doc-docker-intro.eskip:/doc-docker-intro.eskip \\\n      registry.opensource.zalan.do/teapot/skipper:latest eskip print doc-docker-intro.eskip\n\nTo run `skipper` you first mount the `.eskip` file, into the container, expose the ports and run the command\n\n    docker run -it \\\n        -v $(PWD)/doc-docker-intro.eskip:/doc-docker-intro.eskip \\\n        -p 9090:9090 \\\n        -p 9911:9911 \\\n        registry.opensource.zalan.do/teapot/skipper:latest skipper -routes-file doc-docker-intro.eskip\n\nSkipper will then be available on http://localhost:9090\n\n#### Authentication Proxy\n\nSkipper can be used as an authentication proxy, to check incoming\nrequests with Basic auth or an OAuth2 provider or an OpenID Connect\nprovider including audit logging. See the documentation at:\n[https://pkg.go.dev/github.com/zalando/skipper/filters/auth](https://pkg.go.dev/github.com/zalando/skipper/filters/auth).\n\n\n#### Working with the code\n\nGetting the code with the test dependencies (`-t` switch):\n\n    git clone https://github.com/zalando/skipper.git\n    cd skipper\n\nBuild and test all packages:\n\n    make deps\n    make install\n    make lint\n    make shortcheck\n\n> On Mac the tests may fail because of low max open file limit. Please make sure you have correct limits setup\nby following [these instructions](https://gist.github.com/tombigel/d503800a282fcadbee14b537735d202c).\n\n##### Working from IntelliJ / GoLand\n\nTo run or debug skipper from _IntelliJ IDEA_ or _GoLand_, you need to create this configuration:\n\n| Parameter         | Value                                    |\n|-------------------|------------------------------------------|\n| Template          | Go Build                                 |\n| Run kind          | Directory                                |\n| Directory         | skipper source dir + `/cmd/skipper`      |\n| Working directory | skipper source dir (usually the default) |\n\n#### Kubernetes Ingress\n\nSkipper can be used to run as an Kubernetes Ingress controller.\n[Details with examples](https://opensource.zalando.com/skipper/data-clients/kubernetes)\nof [Skipper's capabilities](https://opensource.zalando.com/skipper/data-clients/kubernetes/#why-to-choose-skipper) and an\n[overview](https://opensource.zalando.com/skipper/operation/deployment/#kubernetes-ingress)\nyou will can be found in our [ingress-controller deployment docs](https://opensource.zalando.com/skipper/kubernetes/ingress-controller/).\n\nFor AWS integration, we provide an ingress controller\nhttps://github.com/zalando-incubator/kube-ingress-aws-controller, that\nmanage ALBs or NLBs in front of your skipper deployment.\nA [production example for skipper](https://github.com/zalando-incubator/kubernetes-on-aws/blob/stable/cluster/manifests/skipper/)\nand a [production example for kube-ingress-aws-controller](https://github.com/zalando-incubator/kubernetes-on-aws/tree/dev/cluster/manifests/ingress-controller/),\ncan be found in our Kubernetes configuration https://github.com/zalando-incubator/kubernetes-on-aws.\n\n- [Comparison with other Ingress controllers](https://opensource.zalando.com/skipper/kubernetes/ingress-controller/#comparison-with-other-ingress-controllers)\n- [Comparison with service-mesh](https://opensource.zalando.com/skipper/kubernetes/ingress-controller/#comparison-with-service-mesh)\n\n### Documentation\n\n[Skipper's Documentation](https://opensource.zalando.com/skipper) and\n[Godoc developer documentation](https://pkg.go.dev/github.com/zalando/skipper),\nincludes information about [deployment use cases](https://opensource.zalando.com/skipper/operation/deployment/)\nand detailed information on these topics:\n\n- The [Routing](https://pkg.go.dev/github.com/zalando/skipper/routing) Mechanism\n- [Matching Requests](https://opensource.zalando.com/skipper/tutorials/basics/#route-matching)\n- [Filters](https://opensource.zalando.com/skipper/reference/filters/) - Augmenting Requests and Responses\n- [Predicates](https://opensource.zalando.com/skipper/reference/predicates/) - additional predicates to match a route\n- Service [Backends](https://opensource.zalando.com/skipper/reference/backends/)\n- Route Definitions fetched by dataclients:\n   - [route string](https://opensource.zalando.com/skipper/data-clients/route-string/)\n   - [eskip file](https://opensource.zalando.com/skipper/data-clients/eskip-file/)\n   - [remote eskip](https://opensource.zalando.com/skipper/data-clients/eskip-remote/)\n   - [etcd](https://opensource.zalando.com/skipper/data-clients/etcd/)\n   - [kubernetes](https://opensource.zalando.com/skipper/data-clients/kubernetes/)\n- [Circuit Breakers](https://pkg.go.dev/github.com/zalando/skipper/filters/circuit)\n- Extending It with Custom [Predicates](https://opensource.zalando.com/skipper/tutorials/development/#predicates), [Filters](https://opensource.zalando.com/skipper/tutorials/development/#filters), can be done by [building your own proxy](https://opensource.zalando.com/skipper/tutorials/built-your-own/), [Plugins](https://opensource.zalando.com/skipper/reference/plugins/) or [Lua Scripts](https://opensource.zalando.com/skipper/reference/scripts/)\n- [Proxy Package](https://pkg.go.dev/github.com/zalando/skipper/proxy)\n- [Logging](https://pkg.go.dev/github.com/zalando/skipper/logging) and [Metrics](https://pkg.go.dev/github.com/zalando/skipper/metrics)\n- [Operations guide](https://opensource.zalando.com/skipper/operation/operation/)\n- [Authentication and Authorization](https://opensource.zalando.com/skipper/reference/filters/#authentication-and-authorization)\n- [Load Shedders](https://opensource.zalando.com/skipper/reference/filters/#load-shedding)\n- [Rate Limiters](https://pkg.go.dev/github.com/zalando/skipper/filters/ratelimit)\n- [Opentracing tracers](https://pkg.go.dev/github.com/zalando/skipper/tracing/tracers) or extend [create your own](https://opensource.zalando.com/skipper/reference/plugins/#opentracing-plugins)\n\n#### 1 Minute Skipper introduction\n\nThe following example shows a skipper routes file in eskip format, that has 3 named routes: baidu, google and yandex.\n\n    % cat doc-1min-intro.eskip\n    baidu:\n            Path(\"/baidu\")\n            -> setRequestHeader(\"Host\", \"www.baidu.com\")\n            -> setPath(\"/s\")\n            -> setQuery(\"wd\", \"godoc skipper\")\n            -> \"http://www.baidu.com\";\n    google:\n            *\n            -> setPath(\"/search\")\n            -> setQuery(\"q\", \"godoc skipper\")\n            -> \"https://www.google.com\";\n    yandex:\n            * && Cookie(\"yandex\", \"true\")\n            -> setPath(\"/search/\")\n            -> setQuery(\"text\", \"godoc skipper\")\n            -> tee(\"http://127.0.0.1:12345/\")\n            -> \"https://yandex.ru\";\n\nMatching the route:\n\n- baidu is using `Path()` matching to differentiate the HTTP requests to select the route.\n- google is the default matching with wildcard `*`\n- yandex is the default matching with wildcard `*` if you have a cookie `yandex=true`\n\nRequest Filters:\n\n- If baidu is selected, skipper sets the Host header, changes the path and sets a query string to the http request to the backend \"http://www.baidu.com\".\n- If google is selected, skipper changes the path and sets a query string to the http request to the backend \"https://www.google.com\".\n- If yandex is selected, skipper changes the path and sets a query string to the http request to the backend \"https://yandex.ru\". The modified request will be copied to \"http://127.0.0.1:12345/\"\n\nRun skipper with the routes file doc-1min-intro.eskip shown above\n\n    % skipper -routes-file doc-1min-intro.eskip\n\nTo test each route you can use curl:\n\n    % curl -v localhost:9090/baidu\n    % curl -v localhost:9090/\n    % curl -v --cookie \"yandex=true\" localhost:9090/\n\nTo see the shadow traffic request that is made by the `tee()` filter you can use nc:\n\n    [terminal1]% nc -l 12345\n    [terminal2]% curl -v --cookie \"yandex=true\" localhost:9090/\n\n#### 3 Minutes Skipper in Kubernetes introduction\n\nThis introduction was [moved to ingress controller documentation](https://opensource.zalando.com/skipper/kubernetes/ingress-controller/#install-skipper-as-ingress-controller).\n\nFor More details, please check out our [Kubernetes ingress controller docs](https://opensource.zalando.com/skipper/kubernetes/ingress-controller/), our [ingress usage](https://opensource.zalando.com/skipper/kubernetes/ingress-usage/) and how to handle [common backend problems in Kubernetes](https://opensource.zalando.com/skipper/kubernetes/ingress-backends/).\n\n### Packaging support\n\nSee https://github.com/zalando/skipper/blob/master/packaging/readme.md\n\nIn case you want to implement and link your own modules into your\nskipper, there is https://github.com/skipper-plugins organization to\nenable you to do so. In order to explain you the build process with\ncustom Go modules there is\nhttps://github.com/skipper-plugins/skipper-tracing-build, that was\nused to build skipper's [opentracing package](https://github.com/skipper-plugins/opentracing).\nWe moved the opentracing plugin source into the `tracing` package, so\nthere is no need to use plugins for this case.\n\nBecause Go plugins are not very well supported by Go itself we do not\nrecommend to use plugins, but you can extend skipper and\n[build your own proxy](https://opensource.zalando.com/skipper/tutorials/built-your-own/).\n\n## Community\n\nUser or developer questions can be asked in our [public Google Group](https://groups.google.com/forum/#!forum/skipper-router)\n\nWe have a slack channel #skipper in gophers.slack.com. Get an [invite](https://invite.slack.golangbridge.org).\nIf for some reason this link doesn't work, you can find more information about\nthe gophers communities [here](https://github.com/gobridge/about-us/blob/master/README.md#onlineoffline-communities).\n\nThe preferred communication channel is the slack channel, because the google group is a manual process to add members.\nFeel also free to [create an issue](https://github.com/zalando/skipper/issues/new/choose), if you dislike chat and post your questions there.\n\n### Proposals\n\nWe do our proposals open in [Skipper's Google drive](https://drive.google.com/drive/folders/0B9LwJMF9koB-ZEk4bEhZal9uOWM).\nIf you want to make a proposal feel free to create an\n[issue](https://github.com/zalando/skipper/issues) and if it is a\nbigger change we will invite you to a document, such that we can work together.\n\n### Users\n\nZalando used this project as shop frontend http router with 350000 routes.\nWe use it as Kubernetes ingress controller in more than 100 production clusters. With every day traffic between 500k and 7M RPS serving 15000 ingress and 3750 RouteGroups at less than ¢5/1M requests.\nWe also run several custom skipper instances that use skipper as library.\n\nSergio Ballesteros from [spotahome](https://www.spotahome.com/) said 2018:\n> We also ran tests with several ingress controllers and skipper gave us the more reliable results. Currently we are running skipper since almost 2 years with like 20K Ingress rules.\n> The fact that skipper is written in go let us understand the code, add features and fix bugs since all of our infra stack is golang.\n\n#### In the media\n\nBlog posts:\n\n- [opensource.com - Try this Kubernetes HTTP router and reverse proxy](https://opensource.com/article/20/4/http-kubernetes-skipper)\n- [opensource.com - An open source HTTP router to increase your network visibility](https://opensource.com/article/20/5/skipper)\n- [Building our own open source http routing\n  solution](https://jobs.zalando.com/tech/blog/building-our-own-open-source-http-routing-solution/):\n  Giving some context about why Skipper was created in the first place.\n- [Kubernetes in production @ ShopGun](https://itnext.io/kubernetes-in-production-shopgun-2c280f0c0923)\n- Hacker News [Skipper – An HTTP router and reverse proxy for service composition](https://news.ycombinator.com/item?id=18837936)\n\nConference/Meetups talks\n\n- [LISA 2018 - modern HTTP routing](https://www.usenix.org/conference/lisa18/presentation/szucs)\n\n## Version promise\n\nSkipper will update the minor version in case we have either:\n\n- a significant change\n- a Go version requirement change (`go` directive in go.mod change)\n- a dependency change that adds or removes a `replace` directive in\n  go.mod file (requires library users to add or remove the same\n  directive in their go.mod file)\n- a change that require attention to users, for example Kubernetes\n  RBAC changes required to deploy\n  https://github.com/zalando/skipper/releases/tag/v0.18.0\n- a feature removal like Kubernetes ingress v1beta1\n  https://github.com/zalando/skipper/releases/tag/v0.15.0\n- an API change of a function that is marked *experimental* [example](https://github.com/zalando/skipper/blob/e8c099f1740e3d85be0784d449b1177a48247813/io/read_stream.go#L209)\n\nWe expect that skipper library users will use\n`skipper.Run(skipper.Options{})` as main interface that we do not want\nto break. Besides the Kubernetes v1beta1 removal there was never a\nchange that removed an option. We also do not want to break generic\nuseful packages like `net`. Sometimes we mark library functions, that\nwe expect to be useful as *experimental*, because we want to try and\nlearn over time if this is a good API decision or if this limits us.\n\nThis promise we hold considering the main, filter, predicate,\ndataclient, eskip interfaces and generic packages. For other packages,\nwe have more weak promise with backwards compatibility as these are\nmore internal packages. We try to omit breaking changes also in\ninternal packages. If this would mean too much work or impossible\nto build new functionality as we would like, we will do a breaking\nchange considering strictly semantic versioning rules.\n\n### How to update\n\nEvery update that changes the minor version (the `m` in `v0.m.p`),\nshould be done by `+1` only. So `v0.N.x` to `v0.N+1.y` and you should\nread `v0.N+1.0` release page to see what can break and what you have\nto do in order to have no issues while updating.\n"
        },
        {
          "name": "redis_test.go",
          "type": "blob",
          "size": 17.216796875,
          "content": "package skipper_test\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\tstdlibhttptest \"net/http/httptest\"\n\t\"os\"\n\t\"syscall\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/zalando/skipper\"\n\t\"github.com/zalando/skipper/dataclients/kubernetes/kubernetestest\"\n\t\"github.com/zalando/skipper/filters\"\n\tflog \"github.com/zalando/skipper/filters/accesslog\"\n\tfscheduler \"github.com/zalando/skipper/filters/scheduler\"\n\t\"github.com/zalando/skipper/loadbalancer\"\n\t\"github.com/zalando/skipper/metrics\"\n\t\"github.com/zalando/skipper/metrics/metricstest\"\n\t\"github.com/zalando/skipper/net/httptest\"\n\t\"github.com/zalando/skipper/net/redistest\"\n\t\"github.com/zalando/skipper/proxy\"\n\t\"github.com/zalando/skipper/routesrv\"\n\t\"github.com/zalando/skipper/routing\"\n\t\"github.com/zalando/skipper/routing/testdataclient\"\n\t\"github.com/zalando/skipper/scheduler\"\n\t\"github.com/zalando/skipper/tracing/tracingtest\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestConcurrentKubernetesClusterStateAccessWithRemoteRedis(t *testing.T) {\n\tkubeSpec := `\napiVersion: zalando.org/v1\nkind: RouteGroup\nmetadata:\n  name: target\nspec:\n  backends:\n  - name: shunt\n    type: shunt\n  defaultBackends:\n  - backendName: shunt\n  routes:\n  - pathSubtree: /test\n    filters:\n    - disableAccessLog()\n    - clusterRatelimit(\"foo\", 1, \"1s\")\n    - status(200)\n    - inlineContent(\"OK\")\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    application: skipper-ingress-redis\n  name: redis\n  namespace: skipper\nspec:\n  clusterIP: None\n  ports:\n  - port: 6379\n    protocol: TCP\n    targetPort: 6379\n  selector:\n    application: skipper-ingress-redis\n  type: ClusterIP\n`\n\n\tredis1, done1 := redistest.NewTestRedis(t)\n\tredis2, done2 := redistest.NewTestRedis(t)\n\tredis3, done3 := redistest.NewTestRedis(t)\n\n\tdefer done1()\n\tdefer done2()\n\tdefer done3()\n\n\t// apiserver1\n\tredisSpec1 := createRedisEndpointsSpec(t, redis1)\n\tapiServer1 := createApiserver(t, kubeSpec+redisSpec1)\n\n\t// apiserver2\n\tredisSpec2 := createRedisEndpointsSpec(t, redis1, redis2)\n\tapiServer2 := createApiserver(t, kubeSpec+redisSpec2)\n\n\t// apiserver3\n\tredisSpec3 := createRedisEndpointsSpec(t, redis1, redis2, redis3)\n\tapiServer3 := createApiserver(t, kubeSpec+redisSpec3)\n\n\t// create skipper as LB to kube-apiservers\n\tfr := createFilterRegistry(fscheduler.NewFifo(), flog.NewEnableAccessLog())\n\tmetrics := &metricstest.MockMetrics{}\n\treg := scheduler.RegistryWith(scheduler.Options{\n\t\tMetrics:                metrics,\n\t\tEnableRouteFIFOMetrics: true,\n\t})\n\tdefer reg.Close()\n\n\tdocApiserver := fmt.Sprintf(`r1: * -> enableAccessLog(4,5) -> fifo(100,100,\"3s\") -> <roundRobin, \"%s\", \"%s\", \"%s\">;`,\n\t\tapiServer1.URL, apiServer2.URL, apiServer3.URL)\n\n\tdc, err := testdataclient.NewDoc(docApiserver)\n\trequire.NoError(t, err)\n\tdefer dc.Close()\n\n\tendpointRegistry := routing.NewEndpointRegistry(routing.RegistryOptions{})\n\tdefer endpointRegistry.Close()\n\n\t// create LB in front of apiservers to be able to switch the data served by apiserver\n\tro := routing.Options{\n\t\tSignalFirstLoad: true,\n\t\tFilterRegistry:  fr,\n\t\tDataClients:     []routing.DataClient{dc},\n\t\tPostProcessors: []routing.PostProcessor{\n\t\t\tloadbalancer.NewAlgorithmProvider(),\n\t\t\tendpointRegistry,\n\t\t\treg,\n\t\t},\n\t\tSuppressLogs: true,\n\t}\n\trt := routing.New(ro)\n\tdefer rt.Close()\n\t<-rt.FirstLoad()\n\ttracer := &tracingtest.Tracer{}\n\tpr := proxy.WithParams(proxy.Params{\n\t\tRouting:     rt,\n\t\tOpenTracing: &proxy.OpenTracingParams{Tracer: tracer},\n\t})\n\tdefer pr.Close()\n\tlb := stdlibhttptest.NewServer(pr)\n\tdefer lb.Close()\n\n\trsvo := skipper.Options{\n\t\tAddress:                         findAddress(t),\n\t\tKubernetes:                      true,\n\t\tKubernetesURL:                   lb.URL,\n\t\tKubernetesRedisServiceNamespace: \"skipper\",\n\t\tKubernetesRedisServiceName:      \"redis\",\n\t\tKubernetesRedisServicePort:      6379,\n\t\tKubernetesHealthcheck:           true,\n\t\tSourcePollTimeout:               1500 * time.Millisecond,\n\t}\n\n\tgo routesrv.Run(rsvo)\n\n\twaitForOK(t, \"http://\"+rsvo.Address+\"/routes\", 1*time.Second)\n\n\t// run skipper proxy that we want to test\n\to := skipper.Options{\n\t\tAddress:                        findAddress(t),\n\t\tEnableRatelimiters:             true,\n\t\tEnableSwarm:                    true,\n\t\tKubernetes:                     true,\n\t\tSwarmRedisEndpointsRemoteURL:   \"http://\" + rsvo.Address + \"/swarm/redis/shards\",\n\t\tKubernetesURL:                  lb.URL,\n\t\tKubernetesHealthcheck:          true,\n\t\tSourcePollTimeout:              1500 * time.Millisecond,\n\t\tWaitFirstRouteLoad:             true,\n\t\tClusterRatelimitMaxGroupShards: 2,\n\t\tSwarmRedisDialTimeout:          100 * time.Millisecond,\n\t\tSuppressRouteUpdateLogs:        false,\n\t\tSupportListener:                findAddress(t),\n\t\tSwarmRedisUpdateInterval:       time.Second,\n\t}\n\n\trunResult := make(chan error)\n\tsigs := make(chan os.Signal, 1)\n\tgo func() { runResult <- skipper.RunWithShutdown(o, sigs, nil) }()\n\n\twaitForOK(t, \"http://\"+o.Address+\"/kube-system/healthz\", 1*time.Second)\n\n\trate := 10\n\tsec := 5\n\tva := httptest.NewVegetaAttacker(\"http://\"+o.Address+\"/test\", rate, time.Second, time.Second)\n\tva.Attack(io.Discard, time.Duration(sec)*time.Second, \"mytest\")\n\n\tsuccessRate := va.Success()\n\tt.Logf(\"Success [0..1]: %0.2f\", successRate)\n\tt.Logf(\"Want: %0.2f\", float64(sec*1)/float64(sec*rate))\n\n\tepsilon := 0.2\n\t// sec * 1 because 1 is the number of requests allowed per second via clusterRatelimit(\"foo\", 1, \"1s\")\n\texpected := float64(sec*1) / float64(sec*rate)\n\tif !assert.InEpsilon(t, expected, successRate, epsilon, fmt.Sprintf(\"Test should have a success rate between %0.2f < %0.2f < %0.2f\", expected-epsilon, successRate, expected+epsilon)) {\n\t\tt.Fatal(\"FAIL\")\n\t}\n\n\t// reqCount should be between 49 & 51 since we run 10 per second for 5 seconds\n\tepsilon = 1\n\treqCount := va.TotalRequests()\n\tt.Logf(\"Total requests: %d\", reqCount)\n\tassert.InEpsilon(t, uint64(rate*sec), va.TotalRequests(), epsilon, fmt.Sprintf(\"Test should run %d requests between: %d and %d\", uint64(rate*sec), reqCount-uint64(epsilon), reqCount+uint64(epsilon)))\n\n\tepsilon = 1\n\tcountOK, _ := va.CountStatus(http.StatusOK)\n\tt.Logf(\"Number of succeeded requests: %d\", countOK)\n\tassert.InEpsilon(t, 1*sec, countOK, epsilon, fmt.Sprintf(\"Test should have accepted requests between %d and %d\", countOK-int(epsilon), countOK+int(epsilon)))\n\n\tcountLimited, _ := va.CountStatus(http.StatusTooManyRequests)\n\tt.Logf(\"Number of limited requests: %d\", countLimited)\n\tassert.InEpsilon(t, sec*rate-(1*sec), countLimited, epsilon, fmt.Sprintf(\"Test should have limited requests between %d and %d\", countLimited-int(epsilon), countLimited+int(epsilon)))\n\n\tsigs <- syscall.SIGTERM\n\tassert.NoError(t, <-runResult)\n}\n\nfunc TestConcurrentKubernetesClusterStateAccess(t *testing.T) {\n\tkubeSpec := `\napiVersion: zalando.org/v1\nkind: RouteGroup\nmetadata:\n  name: target\nspec:\n  backends:\n  - name: shunt\n    type: shunt\n  defaultBackends:\n  - backendName: shunt\n  routes:\n  - pathSubtree: /test\n    filters:\n    - disableAccessLog()\n    - clusterRatelimit(\"foo\", 1, \"1s\")\n    - status(200)\n    - inlineContent(\"OK\")\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    application: skipper-ingress-redis\n  name: redis\n  namespace: skipper\nspec:\n  clusterIP: None\n  ports:\n  - port: 6379\n    protocol: TCP\n    targetPort: 6379\n  selector:\n    application: skipper-ingress-redis\n  type: ClusterIP\n`\n\n\tredis1, done1 := redistest.NewTestRedis(t)\n\tredis2, done2 := redistest.NewTestRedis(t)\n\tredis3, done3 := redistest.NewTestRedis(t)\n\n\tdefer done1()\n\tdefer done2()\n\tdefer done3()\n\n\t// apiserver1\n\tredisSpec1 := createRedisEndpointsSpec(t, redis1)\n\tapiServer1 := createApiserver(t, kubeSpec+redisSpec1)\n\n\t// apiserver2\n\tredisSpec2 := createRedisEndpointsSpec(t, redis1, redis2)\n\tapiServer2 := createApiserver(t, kubeSpec+redisSpec2)\n\n\t// apiserver3\n\tredisSpec3 := createRedisEndpointsSpec(t, redis1, redis2, redis3)\n\tapiServer3 := createApiserver(t, kubeSpec+redisSpec3)\n\n\t// create skipper as LB to kube-apiservers\n\tfr := createFilterRegistry(fscheduler.NewFifo(), flog.NewEnableAccessLog())\n\tmetrics := &metricstest.MockMetrics{}\n\treg := scheduler.RegistryWith(scheduler.Options{\n\t\tMetrics:                metrics,\n\t\tEnableRouteFIFOMetrics: true,\n\t})\n\tdefer reg.Close()\n\n\tdocApiserver := fmt.Sprintf(`r1: * -> enableAccessLog(4,5) -> fifo(100,100,\"3s\") -> <roundRobin, \"%s\", \"%s\", \"%s\">;`,\n\t\tapiServer1.URL, apiServer2.URL, apiServer3.URL)\n\n\tdc, err := testdataclient.NewDoc(docApiserver)\n\trequire.NoError(t, err)\n\tdefer dc.Close()\n\n\tendpointRegistry := routing.NewEndpointRegistry(routing.RegistryOptions{})\n\tdefer endpointRegistry.Close()\n\n\t// create LB in front of apiservers to be able to switch the data served by apiserver\n\tro := routing.Options{\n\t\tSignalFirstLoad: true,\n\t\tFilterRegistry:  fr,\n\t\tDataClients:     []routing.DataClient{dc},\n\t\tPostProcessors: []routing.PostProcessor{\n\t\t\tloadbalancer.NewAlgorithmProvider(),\n\t\t\tendpointRegistry,\n\t\t\treg,\n\t\t},\n\t\tSuppressLogs: true,\n\t}\n\trt := routing.New(ro)\n\tdefer rt.Close()\n\t<-rt.FirstLoad()\n\ttracer := &tracingtest.Tracer{}\n\tpr := proxy.WithParams(proxy.Params{\n\t\tRouting:     rt,\n\t\tOpenTracing: &proxy.OpenTracingParams{Tracer: tracer},\n\t})\n\tdefer pr.Close()\n\tlb := stdlibhttptest.NewServer(pr)\n\tdefer lb.Close()\n\n\t// run skipper proxy that we want to test\n\to := skipper.Options{\n\t\tAddress:                         findAddress(t),\n\t\tEnableRatelimiters:              true,\n\t\tEnableSwarm:                     true,\n\t\tKubernetes:                      true,\n\t\tKubernetesURL:                   lb.URL,\n\t\tKubernetesRedisServiceNamespace: \"skipper\",\n\t\tKubernetesRedisServiceName:      \"redis\",\n\t\tKubernetesRedisServicePort:      6379,\n\t\tKubernetesHealthcheck:           true,\n\t\tSourcePollTimeout:               1500 * time.Millisecond,\n\t\tWaitFirstRouteLoad:              true,\n\t\tClusterRatelimitMaxGroupShards:  2,\n\t\tSwarmRedisDialTimeout:           100 * time.Millisecond,\n\t\tSuppressRouteUpdateLogs:         false,\n\t\tSupportListener:                 findAddress(t),\n\t\tSwarmRedisUpdateInterval:        time.Second,\n\t}\n\n\trunResult := make(chan error)\n\tsigs := make(chan os.Signal, 1)\n\tgo func() { runResult <- skipper.RunWithShutdown(o, sigs, nil) }()\n\n\twaitForOK(t, \"http://\"+o.Address+\"/kube-system/healthz\", 1*time.Second)\n\n\trate := 10\n\tsec := 5\n\tva := httptest.NewVegetaAttacker(\"http://\"+o.Address+\"/test\", rate, time.Second, time.Second)\n\tva.Attack(io.Discard, time.Duration(sec)*time.Second, \"mytest\")\n\tt.Logf(\"Success [0..1]: %0.2f\", va.Success())\n\n\tif successRate := va.Success(); successRate < 0.1 || successRate > 0.5 {\n\t\tt.Fatalf(\"Test should have a success rate between %0.2f < %0.2f < %0.2f\", 0.1, successRate, 0.5)\n\t}\n\tif reqCount := va.TotalRequests(); reqCount < uint64(rate*sec) {\n\t\tt.Fatalf(\"Test should run %d requests got: %d\", uint64(rate*sec), reqCount)\n\t}\n\tcountOK, ok := va.CountStatus(http.StatusOK)\n\tif countOK == 0 {\n\t\tt.Fatalf(\"Some requests should have passed: %d %v\", countOK, ok)\n\t}\n\n\tcountLimited, ok := va.CountStatus(http.StatusTooManyRequests)\n\tif !ok || countLimited < countOK {\n\t\tt.Fatalf(\"count TooMany should be higher than OKs: %d < %d: %v\", countLimited, countOK, ok)\n\t}\n\n\tsigs <- syscall.SIGTERM\n\tassert.NoError(t, <-runResult)\n}\n\nfunc TestRedisAddrUpdater(t *testing.T) {\n\tdm := metrics.Default\n\tt.Cleanup(func() { metrics.Default = dm })\n\n\tconst redisUpdateInterval = 10 * time.Millisecond\n\tconst kubeSpec = `\napiVersion: zalando.org/v1\nkind: RouteGroup\nmetadata:\n  name: target\nspec:\n  backends:\n  - name: shunt\n    type: shunt\n  defaultBackends:\n  - backendName: shunt\n  routes:\n  - pathSubtree: /test\n    filters:\n    - inlineContent(\"OK\")\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    application: skipper-ingress-redis\n  name: redis\n  namespace: skipper\nspec:\n  clusterIP: None\n  ports:\n  - port: 6379\n    protocol: TCP\n    targetPort: 6379\n  selector:\n    application: skipper-ingress-redis\n  type: ClusterIP\n`\n\n\tt.Run(\"without kubernetes dataclient\", func(t *testing.T) {\n\t\tspec := kubeSpec + createRedisEndpointsSpec(t, \"10.2.0.1:6379\", \"10.2.0.2:6379\", \"10.2.0.3:6379\")\n\t\tapiServer := createApiserver(t, spec)\n\n\t\tmetrics := &metricstest.MockMetrics{}\n\n\t\to := skipper.Options{\n\t\t\tAddress:                         findAddress(t),\n\t\t\tEnableRatelimiters:              true,\n\t\t\tEnableSwarm:                     true,\n\t\t\tKubernetes:                      false, // do not enable kubernetes dataclient\n\t\t\tKubernetesURL:                   apiServer.URL,\n\t\t\tKubernetesRedisServiceNamespace: \"skipper\",\n\t\t\tKubernetesRedisServiceName:      \"redis\",\n\t\t\tKubernetesRedisServicePort:      6379,\n\t\t\tSwarmRedisUpdateInterval:        redisUpdateInterval,\n\t\t\tInlineRoutes:                    `Path(\"/ready\") -> inlineContent(\"OK\") -> <shunt>`,\n\t\t\tMetricsBackend:                  metrics,\n\t\t}\n\n\t\trunResult := make(chan error)\n\t\tsigs := make(chan os.Signal, 1)\n\t\tgo func() { runResult <- skipper.RunWithShutdown(o, sigs, nil) }()\n\n\t\twaitForOK(t, \"http://\"+o.Address+\"/ready\", 1*time.Second)\n\t\ttime.Sleep(2 * redisUpdateInterval)\n\n\t\tmetrics.WithGauges(func(g map[string]float64) {\n\t\t\tt.Logf(\"gauges: %v\", g)\n\n\t\t\tassert.Equal(t, 1.0, g[\"routes.total\"], \"expected only the /ready route\")\n\t\t\tassert.Equal(t, 3.0, g[\"swarm.redis.shards\"])\n\t\t})\n\n\t\tsigs <- syscall.SIGTERM\n\t\tassert.NoError(t, <-runResult)\n\t})\n\n\tt.Run(\"kubernetes dataclient\", func(t *testing.T) {\n\t\tspec := kubeSpec + createRedisEndpointsSpec(t, \"10.2.0.1:6379\", \"10.2.0.2:6379\", \"10.2.0.3:6379\", \"10.2.0.4:6379\")\n\t\tapiServer := createApiserver(t, spec)\n\n\t\tmetrics := &metricstest.MockMetrics{}\n\n\t\to := skipper.Options{\n\t\t\tAddress:                         findAddress(t),\n\t\t\tEnableRatelimiters:              true,\n\t\t\tEnableSwarm:                     true,\n\t\t\tKubernetes:                      true, // enable kubernetes dataclient\n\t\t\tKubernetesURL:                   apiServer.URL,\n\t\t\tKubernetesRedisServiceNamespace: \"skipper\",\n\t\t\tKubernetesRedisServiceName:      \"redis\",\n\t\t\tKubernetesRedisServicePort:      6379,\n\t\t\tSwarmRedisUpdateInterval:        redisUpdateInterval,\n\t\t\tMetricsBackend:                  metrics,\n\t\t}\n\n\t\trunResult := make(chan error)\n\t\tsigs := make(chan os.Signal, 1)\n\t\tgo func() { runResult <- skipper.RunWithShutdown(o, sigs, nil) }()\n\n\t\twaitForOK(t, \"http://\"+o.Address+\"/test\", 1*time.Second)\n\t\ttime.Sleep(2 * redisUpdateInterval)\n\n\t\tmetrics.WithGauges(func(g map[string]float64) {\n\t\t\tt.Logf(\"gauges: %v\", g)\n\n\t\t\tassert.Equal(t, 1.0, g[\"routes.total\"], \"expected only the /test route\")\n\t\t\tassert.Equal(t, 4.0, g[\"swarm.redis.shards\"])\n\t\t})\n\n\t\tsigs <- syscall.SIGTERM\n\t\tassert.NoError(t, <-runResult)\n\t})\n\n\tt.Run(\"remote url\", func(t *testing.T) {\n\t\teps := stdlibhttptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, _ *http.Request) {\n\t\t\tw.Write([]byte(`{\n\t\t\t\t\"endpoints\": [\n\t\t\t\t\t{\"address\": \"10.2.0.1:6379\"}, {\"address\": \"10.2.0.2:6379\"},\n\t\t\t\t\t{\"address\": \"10.2.0.3:6379\"}, {\"address\": \"10.2.0.4:6379\"},\n\t\t\t\t\t{\"address\": \"10.2.0.5:6379\"}\n\t\t\t\t]\n\t\t\t}`))\n\t\t}))\n\t\tdefer eps.Close()\n\n\t\tmetrics := &metricstest.MockMetrics{}\n\n\t\to := skipper.Options{\n\t\t\tAddress:                      findAddress(t),\n\t\t\tEnableRatelimiters:           true,\n\t\t\tEnableSwarm:                  true,\n\t\t\tSwarmRedisEndpointsRemoteURL: eps.URL,\n\t\t\tSwarmRedisUpdateInterval:     redisUpdateInterval,\n\t\t\tInlineRoutes:                 `Path(\"/ready\") -> inlineContent(\"OK\") -> <shunt>`,\n\t\t\tMetricsBackend:               metrics,\n\t\t}\n\n\t\trunResult := make(chan error)\n\t\tsigs := make(chan os.Signal, 1)\n\t\tgo func() { runResult <- skipper.RunWithShutdown(o, sigs, nil) }()\n\n\t\twaitForOK(t, \"http://\"+o.Address+\"/ready\", 1*time.Second)\n\t\ttime.Sleep(2 * redisUpdateInterval)\n\n\t\tmetrics.WithGauges(func(g map[string]float64) {\n\t\t\tt.Logf(\"gauges: %v\", g)\n\n\t\t\tassert.Equal(t, 1.0, g[\"routes.total\"], \"expected only the /ready route\")\n\t\t\tassert.Equal(t, 5.0, g[\"swarm.redis.shards\"])\n\t\t})\n\n\t\tsigs <- syscall.SIGTERM\n\t\tassert.NoError(t, <-runResult)\n\t})\n}\n\nfunc createApiserver(t *testing.T, spec string) *stdlibhttptest.Server {\n\tt.Helper()\n\n\tapi, err := kubernetestest.NewAPI(kubernetestest.TestAPIOptions{}, bytes.NewBufferString(spec))\n\trequire.NoError(t, err)\n\n\tapiServer := stdlibhttptest.NewServer(api)\n\tt.Cleanup(apiServer.Close)\n\n\treturn apiServer\n}\n\nfunc createFilterRegistry(specs ...filters.Spec) filters.Registry {\n\tfr := make(filters.Registry)\n\tfor _, spec := range specs {\n\t\tfr.Register(spec)\n\t}\n\treturn fr\n}\n\nfunc createRedisEndpointsSpec(t *testing.T, addrs ...string) string {\n\tvar addresses []map[string]any\n\tfor _, addr := range addrs {\n\t\thost, port, err := net.SplitHostPort(addr)\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, \"6379\", port)\n\n\t\taddresses = append(addresses, map[string]any{\"ip\": host})\n\t}\n\n\tep := map[string]any{\n\t\t\"apiVersion\": \"v1\",\n\t\t\"kind\":       \"Endpoints\",\n\t\t\"metadata\": map[string]any{\n\t\t\t\"name\":      \"redis\",\n\t\t\t\"namespace\": \"skipper\",\n\t\t},\n\t\t\"subsets\": []any{\n\t\t\tmap[string]any{\n\t\t\t\t\"addresses\": addresses,\n\t\t\t\t\"ports\": []map[string]any{{\n\t\t\t\t\t\"port\":     6379,\n\t\t\t\t\t\"protocol\": \"TCP\",\n\t\t\t\t}},\n\t\t\t},\n\t\t},\n\t}\n\n\t// JSON is a valid YAML\n\tb, err := json.Marshal(ep)\n\trequire.NoError(t, err)\n\n\treturn fmt.Sprintf(\"---\\n%s\\n\", b)\n}\n\nfunc findAddress(t *testing.T) string {\n\tt.Helper()\n\n\tl, err := net.ListenTCP(\"tcp6\", &net.TCPAddr{})\n\trequire.NoError(t, err)\n\n\taddr := l.Addr().String()\n\trequire.NoError(t, l.Close())\n\n\treturn addr\n}\n\nfunc waitForOK(t *testing.T, url string, timeout time.Duration) {\n\tt.Helper()\n\n\tto := time.After(timeout)\n\tfor {\n\t\trsp, err := http.DefaultClient.Get(url)\n\t\tif err == nil {\n\t\t\trsp.Body.Close()\n\t\t\tif rsp.StatusCode == http.StatusOK {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tselect {\n\t\tcase <-to:\n\t\t\tt.Fatalf(\"timeout waiting for %s\", url)\n\t\tdefault:\n\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "rfc",
          "type": "tree",
          "content": null
        },
        {
          "name": "routesrv",
          "type": "tree",
          "content": null
        },
        {
          "name": "routing",
          "type": "tree",
          "content": null
        },
        {
          "name": "scheduler",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "secrets",
          "type": "tree",
          "content": null
        },
        {
          "name": "skipper.go",
          "type": "blob",
          "size": 76.1357421875,
          "content": "package skipper\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"path\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"syscall\"\n\t\"time\"\n\n\tstdlog \"log\"\n\n\tot \"github.com/opentracing/opentracing-go\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\tlog \"github.com/sirupsen/logrus\"\n\n\t\"github.com/zalando/skipper/circuit\"\n\t\"github.com/zalando/skipper/dataclients/kubernetes\"\n\t\"github.com/zalando/skipper/dataclients/routestring\"\n\t\"github.com/zalando/skipper/eskip\"\n\t\"github.com/zalando/skipper/eskipfile\"\n\t\"github.com/zalando/skipper/etcd\"\n\t\"github.com/zalando/skipper/filters\"\n\t\"github.com/zalando/skipper/filters/apiusagemonitoring\"\n\t\"github.com/zalando/skipper/filters/auth\"\n\tblock \"github.com/zalando/skipper/filters/block\"\n\t\"github.com/zalando/skipper/filters/builtin\"\n\t\"github.com/zalando/skipper/filters/fadein\"\n\tlogfilter \"github.com/zalando/skipper/filters/log\"\n\t\"github.com/zalando/skipper/filters/openpolicyagent\"\n\t\"github.com/zalando/skipper/filters/openpolicyagent/opaauthorizerequest\"\n\t\"github.com/zalando/skipper/filters/openpolicyagent/opaserveresponse\"\n\tratelimitfilters \"github.com/zalando/skipper/filters/ratelimit\"\n\t\"github.com/zalando/skipper/filters/shedder\"\n\tteefilters \"github.com/zalando/skipper/filters/tee\"\n\t\"github.com/zalando/skipper/loadbalancer\"\n\t\"github.com/zalando/skipper/logging\"\n\t\"github.com/zalando/skipper/metrics\"\n\tskpnet \"github.com/zalando/skipper/net\"\n\tpauth \"github.com/zalando/skipper/predicates/auth\"\n\t\"github.com/zalando/skipper/predicates/content\"\n\t\"github.com/zalando/skipper/predicates/cookie\"\n\t\"github.com/zalando/skipper/predicates/cron\"\n\t\"github.com/zalando/skipper/predicates/forwarded\"\n\t\"github.com/zalando/skipper/predicates/host\"\n\t\"github.com/zalando/skipper/predicates/interval\"\n\t\"github.com/zalando/skipper/predicates/methods\"\n\t\"github.com/zalando/skipper/predicates/primitive\"\n\t\"github.com/zalando/skipper/predicates/query\"\n\t\"github.com/zalando/skipper/predicates/source\"\n\t\"github.com/zalando/skipper/predicates/tee\"\n\t\"github.com/zalando/skipper/predicates/traffic\"\n\t\"github.com/zalando/skipper/proxy\"\n\t\"github.com/zalando/skipper/queuelistener\"\n\t\"github.com/zalando/skipper/ratelimit\"\n\t\"github.com/zalando/skipper/routing\"\n\t\"github.com/zalando/skipper/scheduler\"\n\t\"github.com/zalando/skipper/script\"\n\t\"github.com/zalando/skipper/secrets\"\n\t\"github.com/zalando/skipper/secrets/certregistry\"\n\t\"github.com/zalando/skipper/swarm\"\n\t\"github.com/zalando/skipper/tracing\"\n)\n\nconst (\n\tdefaultSourcePollTimeout   = 30 * time.Millisecond\n\tdefaultRoutingUpdateBuffer = 1 << 5\n)\n\nconst DefaultPluginDir = \"./plugins\"\n\n// Options to start skipper.\ntype Options struct {\n\t// WaitForHealthcheckInterval sets the time that skipper waits\n\t// for the loadbalancer in front to become unhealthy. Defaults\n\t// to 0.\n\tWaitForHealthcheckInterval time.Duration\n\n\t// StatusChecks is an experimental feature. It defines a\n\t// comma separated list of HTTP URLs to do GET requests to,\n\t// that have to return 200 before skipper becomes ready\n\tStatusChecks []string\n\n\t// WhitelistedHealthcheckCIDR appends the whitelisted IP Range to the inernalIPS range for healthcheck purposes\n\tWhitelistedHealthCheckCIDR []string\n\n\t// Network address that skipper should listen on.\n\tAddress string\n\n\t// Insecure network address skipper should listen on when TLS is enabled\n\tInsecureAddress string\n\n\t// EnableTCPQueue enables controlling the\n\t// concurrently processed requests at the TCP listener.\n\tEnableTCPQueue bool\n\n\t// ExpectedBytesPerRequest is used by the TCP LIFO listener.\n\t// It defines the expected average memory required to process an incoming\n\t// request. It is used only when MaxTCPListenerConcurrency is not defined.\n\t// It is used together with the memory limit defined in:\n\t// cgroup v1 /sys/fs/cgroup/memory/memory.limit_in_bytes\n\t// or\n\t// cgroup v2 /sys/fs/cgroup/memory.max\n\t//\n\t// See also:\n\t// cgroup v1: https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt\n\t// cgroup v2: https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html#memory-interface-files\n\tExpectedBytesPerRequest int\n\n\t// MaxTCPListenerConcurrency is used by the TCP LIFO listener.\n\t// It defines the max number of concurrently accepted connections, excluding\n\t// the pending ones in the queue.\n\t//\n\t// When undefined and the EnableTCPQueue is true,\n\tMaxTCPListenerConcurrency int\n\n\t// MaxTCPListenerQueue is used by the TCP LIFO listener.\n\t// If defines the maximum number of pending connection waiting in the queue.\n\tMaxTCPListenerQueue int\n\n\t// List of custom filter specifications.\n\tCustomFilters []filters.Spec\n\n\t// RegisterFilters callback can be used to register additional filters.\n\t// Built-in and custom filters are registered before the callback is called.\n\tRegisterFilters func(registry filters.Registry)\n\n\t// Urls of nodes in an etcd cluster, storing route definitions.\n\tEtcdUrls []string\n\n\t// Path prefix for skipper related data in the etcd storage.\n\tEtcdPrefix string\n\n\t// Timeout used for a single request when querying for updates\n\t// in etcd. This is independent of, and an addition to,\n\t// SourcePollTimeout. When not set, the internally defined 1s\n\t// is used.\n\tEtcdWaitTimeout time.Duration\n\n\t// Skip TLS certificate check for etcd connections.\n\tEtcdInsecure bool\n\n\t// If set this value is used as Bearer token for etcd OAuth authorization.\n\tEtcdOAuthToken string\n\n\t// If set this value is used as username for etcd basic authorization.\n\tEtcdUsername string\n\n\t// If set this value is used as password for etcd basic authorization.\n\tEtcdPassword string\n\n\t// If set enables skipper to generate based on ingress resources in kubernetes cluster\n\tKubernetes bool\n\n\t// If set makes skipper authenticate with the kubernetes API server with service account assigned to the\n\t// skipper POD.\n\t// If omitted skipper will rely on kubectl proxy to authenticate with API server\n\tKubernetesInCluster bool\n\n\t// Kubernetes API base URL. Only makes sense if KubernetesInCluster is set to false. If omitted and\n\t// skipper is not running in-cluster, the default API URL will be used.\n\tKubernetesURL string\n\n\t// KubernetesTokenFile configures path to the token file.\n\t// Defaults to /var/run/secrets/kubernetes.io/serviceaccount/token when running in-cluster.\n\tKubernetesTokenFile string\n\n\t// KubernetesHealthcheck, when Kubernetes ingress is set, indicates\n\t// whether an automatic healthcheck route should be generated. The\n\t// generated route will report healthyness when the Kubernetes API\n\t// calls are successful. The healthcheck endpoint is accessible from\n\t// internal IPs, with the path /kube-system/healthz.\n\tKubernetesHealthcheck bool\n\n\t// KubernetesHTTPSRedirect, when Kubernetes ingress is set, indicates\n\t// whether an automatic redirect route should be generated to redirect\n\t// HTTP requests to their HTTPS equivalent. The generated route will\n\t// match requests with the X-Forwarded-Proto and X-Forwarded-Port,\n\t// expected to be set by the load-balancer.\n\tKubernetesHTTPSRedirect bool\n\n\t// KubernetesHTTPSRedirectCode overrides the default redirect code (308)\n\t// when used together with -kubernetes-https-redirect.\n\tKubernetesHTTPSRedirectCode int\n\n\t// KubernetesDisableCatchAllRoutes, when set, tells the data client to not create catchall routes.\n\tKubernetesDisableCatchAllRoutes bool\n\n\t// KubernetesIngressClass is a regular expression, that will make\n\t// skipper load only the ingress resources that have a matching\n\t// kubernetes.io/ingress.class annotation. For backwards compatibility,\n\t// the ingresses without an annotation, or an empty annotation, will\n\t// be loaded, too.\n\tKubernetesIngressClass string\n\n\t// KubernetesRouteGroupClass is a regular expression, that will make skipper\n\t// load only the RouteGroup resources that have a matching\n\t// zalando.org/routegroup.class annotation. Any RouteGroups without the\n\t// annotation, or which an empty annotation, will be loaded too.\n\tKubernetesRouteGroupClass string\n\n\t// KubernetesIngressLabelSelectors is a map of kubernetes labels to their values that must be present on a resource to be loaded\n\t// by the client. A label and its value on an Ingress must be match exactly to be loaded by Skipper.\n\t// If the value is irrelevant for a given configuration, it can be left empty. The default\n\t// value is no labels required.\n\t// Examples:\n\t//  Config [] will load all Ingresses.\n\t// \tConfig [\"skipper-enabled\": \"\"] will load only Ingresses with a label \"skipper-enabled\", no matter the value.\n\t// \tConfig [\"skipper-enabled\": \"true\"] will load only Ingresses with a label \"skipper-enabled: true\"\n\t// \tConfig [\"skipper-enabled\": \"\", \"foo\": \"bar\"] will load only Ingresses with both labels while label \"foo\" must have a value \"bar\".\n\tKubernetesIngressLabelSelectors map[string]string\n\n\t// KubernetesServicesLabelSelectors is a map of kubernetes labels to their values that must be present on a resource to be loaded\n\t// by the client. Read documentation for IngressLabelSelectors for examples and more details.\n\t// The default value is no labels required.\n\tKubernetesServicesLabelSelectors map[string]string\n\n\t// KubernetesEndpointsLabelSelectors is a map of kubernetes labels to their values that must be present on a resource to be loaded\n\t// by the client. Read documentation for IngressLabelSelectors for examples and more details.\n\t// The default value is no labels required.\n\tKubernetesEndpointsLabelSelectors map[string]string\n\n\t// KubernetesSecretsLabelSelectors is a map of kubernetes labels to their values that must be present on a resource to be loaded\n\t// by the client. Read documentation for IngressLabelSelectors for examples and more details.\n\t// The default value is no labels required.\n\tKubernetesSecretsLabelSelectors map[string]string\n\n\t// KubernetesRouteGroupsLabelSelectors is a map of kubernetes labels to their values that must be present on a resource to be loaded\n\t// by the client. Read documentation for IngressLabelSelectors for examples and more details.\n\t// The default value is no labels required.\n\tKubernetesRouteGroupsLabelSelectors map[string]string\n\n\t// PathMode controls the default interpretation of ingress paths in cases\n\t// when the ingress doesn't specify it with an annotation.\n\tKubernetesPathMode kubernetes.PathMode\n\n\t// KubernetesNamespace is used to switch between monitoring ingresses in the cluster-scope or limit\n\t// the ingresses to only those in the specified namespace. Defaults to \"\" which means monitor ingresses\n\t// in the cluster-scope.\n\tKubernetesNamespace string\n\n\t// KubernetesEnableEndpointslices if set skipper will fetch\n\t// endpointslices instead of endpoints to scale more than 1000\n\t// pods within a service\n\tKubernetesEnableEndpointslices bool\n\n\t// *DEPRECATED* KubernetesEnableEastWest enables cluster internal service to service communication, aka east-west traffic\n\tKubernetesEnableEastWest bool\n\n\t// *DEPRECATED* KubernetesEastWestDomain sets the cluster internal domain used to create additional routes in skipper, defaults to skipper.cluster.local\n\tKubernetesEastWestDomain string\n\n\t// KubernetesEastWestRangeDomains set the the cluster internal domains for\n\t// east west traffic. Identified routes to such domains will include\n\t// the KubernetesEastWestRangePredicates.\n\tKubernetesEastWestRangeDomains []string\n\n\t// KubernetesEastWestRangePredicates set the Predicates that will be\n\t// appended to routes identified as to KubernetesEastWestRangeDomains.\n\tKubernetesEastWestRangePredicates []*eskip.Predicate\n\n\t// KubernetesEastWestRangeAnnotationPredicates same as KubernetesAnnotationPredicates but will append to\n\t// routes that has KubernetesEastWestRangeDomains suffix.\n\tKubernetesEastWestRangeAnnotationPredicates []kubernetes.AnnotationPredicates\n\n\t// KubernetesAnnotationPredicates set a list predicates for each annotation key and value\n\tKubernetesAnnotationPredicates []kubernetes.AnnotationPredicates\n\n\t// KubernetesOnlyAllowedExternalNames will enable validation of ingress external names and route groups network\n\t// backend addresses, explicit LB endpoints validation against the list of patterns in\n\t// AllowedExternalNames.\n\tKubernetesOnlyAllowedExternalNames bool\n\n\t// KubernetesAllowedExternalNames contains regexp patterns of those domain names that are allowed to be\n\t// used with external name services (type=ExternalName).\n\tKubernetesAllowedExternalNames []*regexp.Regexp\n\n\t// KubernetesRedisServiceNamespace to be used to lookup ring shards dynamically\n\tKubernetesRedisServiceNamespace string\n\n\t// KubernetesRedisServiceName to be used to lookup ring shards dynamically\n\tKubernetesRedisServiceName string\n\n\t// KubernetesRedisServicePort to be used to lookup ring shards dynamically\n\tKubernetesRedisServicePort int\n\n\t// KubernetesForceService overrides the default Skipper functionality to route traffic using Kubernetes Endpoints,\n\t// instead using Kubernetes Services.\n\tKubernetesForceService bool\n\n\t// KubernetesBackendTrafficAlgorithm specifies the algorithm to calculate the backend traffic\n\tKubernetesBackendTrafficAlgorithm kubernetes.BackendTrafficAlgorithm\n\n\t// KubernetesDefaultLoadBalancerAlgorithm sets the default algorithm to be used for load balancing between backend endpoints,\n\t// available options: roundRobin, consistentHash, random, powerOfRandomNChoices\n\tKubernetesDefaultLoadBalancerAlgorithm string\n\n\t// File containing static route definitions. Multiple may be given comma separated.\n\tRoutesFile string\n\n\t// File containing route definitions with file watch enabled.\n\t// Multiple may be given comma separated. (For the skipper\n\t// command this option is used when starting it with the -routes-file flag.)\n\tWatchRoutesFile string\n\n\t// RouteURLs are URLs pointing to route definitions, in eskip format, with change watching enabled.\n\tRoutesURLs []string\n\n\t// InlineRoutes can define routes as eskip text.\n\tInlineRoutes string\n\n\t// Polling timeout of the routing data sources.\n\tSourcePollTimeout time.Duration\n\n\t// DefaultFilters will be applied to all routes automatically.\n\tDefaultFilters *eskip.DefaultFilters\n\n\t// DisabledFilters is a list of filters unavailable for use\n\tDisabledFilters []string\n\n\t// CloneRoute is a slice of PreProcessors that will be applied to all routes\n\t// automatically. They will clone all matching routes and apply changes to the\n\t// cloned routes.\n\tCloneRoute []*eskip.Clone\n\n\t// EditRoute will be applied to all routes automatically and\n\t// will apply changes to all matching routes.\n\tEditRoute []*eskip.Editor\n\n\t// A list of custom routing pre-processor implementations that will\n\t// be applied to all routes.\n\tCustomRoutingPreProcessors []routing.PreProcessor\n\n\t// Deprecated. See ProxyFlags. When used together with ProxyFlags,\n\t// the values will be combined with |.\n\tProxyOptions proxy.Options\n\n\t// Flags controlling the proxy behavior.\n\tProxyFlags proxy.Flags\n\n\t// Tells the proxy maximum how many idle connections can it keep\n\t// alive.\n\tIdleConnectionsPerHost int\n\n\t// Defines the time period of how often the idle connections maintained\n\t// by the proxy are closed.\n\tCloseIdleConnsPeriod time.Duration\n\n\t// Defines ReadTimeoutServer for server http connections.\n\tReadTimeoutServer time.Duration\n\n\t// Defines ReadHeaderTimeout for server http connections.\n\tReadHeaderTimeoutServer time.Duration\n\n\t// Defines WriteTimeout for server http connections.\n\tWriteTimeoutServer time.Duration\n\n\t// Defines IdleTimeout for server http connections.\n\tIdleTimeoutServer time.Duration\n\n\t// KeepaliveServer configures maximum age for server http connections.\n\t// The connection is closed after it existed for this duration.\n\tKeepaliveServer time.Duration\n\n\t// KeepaliveRequestsServer configures maximum number of requests for server http connections.\n\t// The connection is closed after serving this number of requests.\n\tKeepaliveRequestsServer int\n\n\t// Defines MaxHeaderBytes for server http connections.\n\tMaxHeaderBytes int\n\n\t// Enable connection state metrics for server http connections.\n\tEnableConnMetricsServer bool\n\n\t// TimeoutBackend sets the TCP client connection timeout for\n\t// proxy http connections to the backend.\n\tTimeoutBackend time.Duration\n\n\t// ResponseHeaderTimeout sets the HTTP response timeout for\n\t// proxy http connections to the backend.\n\tResponseHeaderTimeoutBackend time.Duration\n\n\t// ExpectContinueTimeoutBackend sets the HTTP timeout to expect a\n\t// response for status Code 100 for proxy http connections to\n\t// the backend.\n\tExpectContinueTimeoutBackend time.Duration\n\n\t// KeepAliveBackend sets the TCP keepalive for proxy http\n\t// connections to the backend.\n\tKeepAliveBackend time.Duration\n\n\t// DualStackBackend sets if the proxy TCP connections to the\n\t// backend should be dual stack.\n\tDualStackBackend bool\n\n\t// TLSHandshakeTimeoutBackend sets the TLS handshake timeout\n\t// for proxy connections to the backend.\n\tTLSHandshakeTimeoutBackend time.Duration\n\n\t// MaxIdleConnsBackend sets MaxIdleConns, which limits the\n\t// number of idle connections to all backends, 0 means no\n\t// limit.\n\tMaxIdleConnsBackend int\n\n\t// DisableHTTPKeepalives sets DisableKeepAlives, which forces\n\t// a backend to always create a new connection.\n\tDisableHTTPKeepalives bool\n\n\t// Flag indicating to ignore trailing slashes in paths during route\n\t// lookup.\n\tIgnoreTrailingSlash bool\n\n\t// Priority routes that are matched against the requests before\n\t// the standard routes from the data clients.\n\tPriorityRoutes []proxy.PriorityRoute\n\n\t// Specifications of custom, user defined predicates.\n\tCustomPredicates []routing.PredicateSpec\n\n\t// Custom data clients to be used together with the default etcd and Innkeeper.\n\tCustomDataClients []routing.DataClient\n\n\t// CustomHttpHandlerWrap provides ability to wrap http.Handler created by skipper.\n\t// http.Handler is used for accepting incoming http requests.\n\t// It allows to add additional logic (for example tracing) by providing a wrapper function\n\t// which accepts original skipper handler as an argument and returns a wrapped handler\n\tCustomHttpHandlerWrap func(http.Handler) http.Handler\n\n\t// CustomHttpRoundTripperWrap provides ability to wrap http.RoundTripper created by skipper.\n\t// http.RoundTripper is used for making outgoing requests (backends)\n\t// It allows to add additional logic (for example tracing) by providing a wrapper function\n\t// which accepts original skipper http.RoundTripper as an argument and returns a wrapped roundtripper\n\tCustomHttpRoundTripperWrap func(http.RoundTripper) http.RoundTripper\n\n\t// WaitFirstRouteLoad prevents starting the listener before the first batch\n\t// of routes were applied.\n\tWaitFirstRouteLoad bool\n\n\t// SuppressRouteUpdateLogs indicates to log only summaries of the routing updates\n\t// instead of full details of the updated/deleted routes.\n\tSuppressRouteUpdateLogs bool\n\n\t// Dev mode. Currently this flag disables prioritization of the\n\t// consumer side over the feeding side during the routing updates to\n\t// populate the updated routes faster.\n\tDevMode bool\n\n\t// Network address for the support endpoints\n\tSupportListener string\n\n\t// Deprecated: Network address for the /metrics endpoint\n\tMetricsListener string\n\n\t// Skipper provides a set of metrics with different keys which are exposed via HTTP in JSON\n\t// You can customize those key names with your own prefix\n\tMetricsPrefix string\n\n\t// EnableProfile exposes profiling information on /profile of the\n\t// metrics listener.\n\tEnableProfile bool\n\n\t// BlockProfileRate calls runtime.SetBlockProfileRate(BlockProfileRate) if non zero value, deactivate with <0\n\tBlockProfileRate int\n\n\t// MutexProfileFraction calls runtime.SetMutexProfileFraction(MutexProfileFraction) if non zero value, deactivate with <0\n\tMutexProfileFraction int\n\n\t// MemProfileRate calls runtime.SetMemProfileRate(MemProfileRate) if non zero value, deactivate with <0\n\tMemProfileRate int\n\n\t// Flag that enables reporting of the Go garbage collector statistics exported in debug.GCStats\n\tEnableDebugGcMetrics bool\n\n\t// Flag that enables reporting of the Go runtime statistics exported in runtime and specifically runtime.MemStats\n\tEnableRuntimeMetrics bool\n\n\t// If set, detailed response time metrics will be collected\n\t// for each route, additionally grouped by status and method.\n\tEnableServeRouteMetrics bool\n\n\t// If set, a counter for each route is generated, additionally\n\t// grouped by status and method. It differs from the automatically\n\t// generated counter from `EnableServeRouteMetrics` because it will\n\t// always contain the status and method labels, independently of the\n\t// `EnableServeMethodMetric` and `EnableServeStatusCodeMetric` flags.\n\tEnableServeRouteCounter bool\n\n\t// If set, detailed response time metrics will be collected\n\t// for each host, additionally grouped by status and method.\n\tEnableServeHostMetrics bool\n\n\t// If set, a counter for each host is generated, additionally\n\t// grouped by status and method. It differs from the automatically\n\t// generated counter from `EnableServeHostMetrics` because it will\n\t// always contain the status and method labels, independently of the\n\t// `EnableServeMethodMetric` and `EnableServeStatusCodeMetric` flags.\n\tEnableServeHostCounter bool\n\n\t// If set, the detailed total response time metrics will contain the\n\t// HTTP method as a domain of the metric. It affects both route and\n\t// host split metrics.\n\tEnableServeMethodMetric bool\n\n\t// If set, the detailed total response time metrics will contain the\n\t// HTTP Response status code as a domain of the metric. It affects\n\t// both route and host split metrics.\n\tEnableServeStatusCodeMetric bool\n\n\t// If set, detailed response time metrics will be collected\n\t// for each backend host\n\tEnableBackendHostMetrics bool\n\n\t// EnableAllFiltersMetrics enables collecting combined filter\n\t// metrics per each route. Without the DisableMetricsCompatibilityDefaults,\n\t// it is enabled by default.\n\tEnableAllFiltersMetrics bool\n\n\t// EnableCombinedResponseMetrics enables collecting response time\n\t// metrics combined for every route.\n\tEnableCombinedResponseMetrics bool\n\n\t// EnableRouteResponseMetrics enables collecting response time\n\t// metrics per each route. Without the DisableMetricsCompatibilityDefaults,\n\t// it is enabled by default.\n\tEnableRouteResponseMetrics bool\n\n\t// EnableRouteBackendErrorsCounters enables counters for backend\n\t// errors per each route. Without the DisableMetricsCompatibilityDefaults,\n\t// it is enabled by default.\n\tEnableRouteBackendErrorsCounters bool\n\n\t// EnableRouteStreamingErrorsCounters enables counters for streaming\n\t// errors per each route. Without the DisableMetricsCompatibilityDefaults,\n\t// it is enabled by default.\n\tEnableRouteStreamingErrorsCounters bool\n\n\t// EnableRouteBackendMetrics enables backend response time metrics\n\t// per each route. Without the DisableMetricsCompatibilityDefaults, it is\n\t// enabled by default.\n\tEnableRouteBackendMetrics bool\n\n\t// EnableRouteCreationMetrics enables the OriginMarker to track route creation times. Disabled by default\n\tEnableRouteCreationMetrics bool\n\n\t// When set, makes the histograms use an exponentially decaying sample\n\t// instead of the default uniform one.\n\tMetricsUseExpDecaySample bool\n\n\t// Use custom buckets for prometheus histograms.\n\tHistogramMetricBuckets []float64\n\n\t// The following options, for backwards compatibility, are true\n\t// by default: EnableAllFiltersMetrics, EnableRouteResponseMetrics,\n\t// EnableRouteBackendErrorsCounters, EnableRouteStreamingErrorsCounters,\n\t// EnableRouteBackendMetrics. With this compatibility flag, the default\n\t// for these options can be set to false.\n\tDisableMetricsCompatibilityDefaults bool\n\n\t// Implementation of a Metrics handler. If provided this is going to be used\n\t// instead of creating a new one based on the Kind of metrics wanted. This\n\t// is useful in case you want to report metrics to a custom aggregator.\n\tMetricsBackend metrics.Metrics\n\n\t// Output file for the application log. Default value: /dev/stderr.\n\t//\n\t// When /dev/stderr or /dev/stdout is passed in, it will be resolved\n\t// to os.Stderr or os.Stdout.\n\t//\n\t// Warning: passing an arbitrary file will try to open it append\n\t// on start and use it, or fail on start, but the current\n\t// implementation doesn't support any more proper handling\n\t// of temporary failures or log-rolling.\n\tApplicationLogOutput string\n\n\t// Application log prefix. Default value: \"[APP]\".\n\tApplicationLogPrefix string\n\n\t// Enables logs in JSON format\n\tApplicationLogJSONEnabled bool\n\n\t// ApplicationLogJsonFormatter, when set and JSON logging is enabled, is passed along to to the underlying\n\t// Logrus logger for application logs. To enable structured logging, use ApplicationLogJSONEnabled.\n\tApplicationLogJsonFormatter *log.JSONFormatter\n\n\t// Output file for the access log. Default value: /dev/stderr.\n\t//\n\t// When /dev/stderr or /dev/stdout is passed in, it will be resolved\n\t// to os.Stderr or os.Stdout.\n\t//\n\t// Warning: passing an arbitrary file will try to open for append\n\t// it on start and use it, or fail on start, but the current\n\t// implementation doesn't support any more proper handling\n\t// of temporary failures or log-rolling.\n\tAccessLogOutput string\n\n\t// Disables the access log.\n\tAccessLogDisabled bool\n\n\t// Enables logs in JSON format\n\tAccessLogJSONEnabled bool\n\n\t// AccessLogStripQuery, when set, causes the query strings stripped\n\t// from the request URI in the access logs.\n\tAccessLogStripQuery bool\n\n\t// AccessLogJsonFormatter, when set and JSON logging is enabled, is passed along to to the underlying\n\t// Logrus logger for access logs. To enable structured logging, use AccessLogJSONEnabled.\n\tAccessLogJsonFormatter *log.JSONFormatter\n\n\tDebugListener string\n\n\t// Path of certificate(s) when using TLS, multiple may be given comma separated\n\tCertPathTLS string\n\t// Path of key(s) when using TLS, multiple may be given comma separated. For\n\t// multiple keys, the order must match the one given in CertPathTLS\n\tKeyPathTLS string\n\n\t// TLSClientAuth sets the policy the server will follow for\n\t// TLS Client Authentication, see [tls.ClientAuthType]\n\tTLSClientAuth tls.ClientAuthType\n\n\t// TLS Settings for Proxy Server\n\tProxyTLS *tls.Config\n\n\t// Client TLS to connect to Backends\n\tClientTLS *tls.Config\n\n\t// TLSMinVersion to set the minimal TLS version for all TLS configurations\n\tTLSMinVersion uint16\n\n\t// CipherSuites sets the list of cipher suites to use for TLS 1.2\n\tCipherSuites []uint16\n\n\t// Flush interval for upgraded Proxy connections\n\tBackendFlushInterval time.Duration\n\n\t// Experimental feature to handle protocol Upgrades for Websockets, SPDY, etc.\n\tExperimentalUpgrade bool\n\n\t// ExperimentalUpgradeAudit enables audit log of both the request line\n\t// and the response messages during web socket upgrades.\n\tExperimentalUpgradeAudit bool\n\n\t// MaxLoopbacks defines the maximum number of loops that the proxy can execute when the routing table\n\t// contains loop backends (<loopback>).\n\tMaxLoopbacks int\n\n\t// EnableBreakers enables the usage of the breakers in the route definitions without initializing any\n\t// by default. It is a shortcut for setting the BreakerSettings to:\n\t//\n\t// \t[]circuit.BreakerSettings{{Type: BreakerDisabled}}\n\t//\n\tEnableBreakers bool\n\n\t// BreakerSettings contain global and host specific settings for the circuit breakers.\n\tBreakerSettings []circuit.BreakerSettings\n\n\t// EnableRatelimiters enables the usage of the ratelimiter in the route definitions without initializing any\n\t// by default. It is a shortcut for setting the RatelimitSettings to:\n\t//\n\t// \t[]ratelimit.Settings{{Type: DisableRatelimit}}\n\t//\n\tEnableRatelimiters bool\n\n\t// RatelimitSettings contain global and host specific settings for the ratelimiters.\n\tRatelimitSettings []ratelimit.Settings\n\n\t// EnableRouteFIFOMetrics enables metrics for the individual route FIFO queues, if any.\n\tEnableRouteFIFOMetrics bool\n\n\t// EnableRouteLIFOMetrics enables metrics for the individual route LIFO queues, if any.\n\tEnableRouteLIFOMetrics bool\n\n\t// OpenTracing enables opentracing\n\tOpenTracing []string\n\n\t// OpenTracingInitialSpan can override the default initial, pre-routing, span name.\n\t// Default: \"ingress\".\n\tOpenTracingInitialSpan string\n\n\t// OpenTracingExcludedProxyTags can disable a tag so that it is not recorded. By default every tag is included.\n\tOpenTracingExcludedProxyTags []string\n\n\t// OpenTracingDisableFilterSpans flag is used to disable creation of spans representing request and response filters.\n\tOpenTracingDisableFilterSpans bool\n\n\t// OpenTracingLogFilterLifecycleEvents flag is used to enable/disable the logs for events marking request and\n\t// response filters' start & end times.\n\tOpenTracingLogFilterLifecycleEvents bool\n\n\t// OpenTracingLogStreamEvents flag is used to enable/disable the logs that marks the\n\t// times when response headers & payload are streamed to the client\n\tOpenTracingLogStreamEvents bool\n\n\t// OpenTracingBackendNameTag enables an additional tracing tag containing a backend name\n\t// for a route when it's available (e.g. for RouteGroups)\n\tOpenTracingBackendNameTag bool\n\n\t// OpenTracingTracer allows pre-created tracer to be passed on to skipper. Providing the\n\t// tracer instance overrides options provided under OpenTracing property.\n\tOpenTracingTracer ot.Tracer\n\n\t// PluginDir defines the directory to load plugins from, DEPRECATED, use PluginDirs\n\tPluginDir string\n\t// PluginDirs defines the directories to load plugins from\n\tPluginDirs []string\n\n\t// FilterPlugins loads additional filters from modules. The first value in each []string\n\t// needs to be the plugin name (as on disk, without path, without \".so\" suffix). The\n\t// following values are passed as arguments to the plugin while loading, see also\n\t// https://opensource.zalando.com/skipper/reference/plugins/\n\tFilterPlugins [][]string\n\n\t// PredicatePlugins loads additional predicates from modules. See above for FilterPlugins\n\t// what the []string should contain.\n\tPredicatePlugins [][]string\n\n\t// DataClientPlugins loads additional data clients from modules. See above for FilterPlugins\n\t// what the []string should contain.\n\tDataClientPlugins [][]string\n\n\t// Plugins combine multiple types of the above plugin types in one plugin (where\n\t// necessary because of shared data between e.g. a filter and a data client).\n\tPlugins [][]string\n\n\t// DefaultHTTPStatus is the HTTP status used when no routes are found\n\t// for a request.\n\tDefaultHTTPStatus int\n\n\t// EnablePrometheusMetrics enables Prometheus format metrics.\n\t//\n\t// This option is *deprecated*. The recommended way to enable prometheus metrics is to\n\t// use the MetricsFlavours option.\n\tEnablePrometheusMetrics bool\n\n\t// EnablePrometheusStartLabel adds start label to each prometheus counter with the value of counter creation\n\t// timestamp as unix nanoseconds.\n\tEnablePrometheusStartLabel bool\n\n\t// An instance of a Prometheus registry. It allows registering and serving custom metrics when skipper is used as a\n\t// library.\n\t// A new registry is created if this option is nil.\n\tPrometheusRegistry *prometheus.Registry\n\n\t// MetricsFlavours sets the metrics storage and exposed format\n\t// of metrics endpoints.\n\tMetricsFlavours []string\n\n\t// LoadBalancerHealthCheckInterval is *deprecated* and not in use anymore\n\tLoadBalancerHealthCheckInterval time.Duration\n\n\t// ReverseSourcePredicate enables the automatic use of IP\n\t// whitelisting in different places to use the reversed way of\n\t// identifying a client IP within the X-Forwarded-For\n\t// header. Amazon's ALB for example writes the client IP to\n\t// the last item of the string list of the X-Forwarded-For\n\t// header, in this case you want to set this to true.\n\tReverseSourcePredicate bool\n\n\t// EnableOAuth2GrantFlow, enables OAuth2 Grant Flow filter\n\tEnableOAuth2GrantFlow bool\n\n\t// OAuth2AuthURL, the url to redirect the requests to when login is required.\n\tOAuth2AuthURL string\n\n\t// OAuth2TokenURL, the url where the access code should be exchanged for the\n\t// access token.\n\tOAuth2TokenURL string\n\n\t// OAuth2RevokeTokenURL, the url where the access and refresh tokens can be\n\t// revoked during a logout.\n\tOAuth2RevokeTokenURL string\n\n\t// OAuthTokeninfoURL sets the the URL to be queried for\n\t// information for all auth.NewOAuthTokeninfo*() filters.\n\tOAuthTokeninfoURL string\n\n\t// OAuthTokeninfoTimeout sets timeout duration while calling oauth token service\n\tOAuthTokeninfoTimeout time.Duration\n\n\t// OAuthTokeninfoCacheSize configures the maximum number of cached tokens.\n\t// Zero value disables tokeninfo cache.\n\tOAuthTokeninfoCacheSize int\n\n\t// OAuthTokeninfoCacheTTL limits the lifetime of a cached tokeninfo.\n\t// Tokeninfo is cached for the duration of \"expires_in\" field value seconds or\n\t// for the duration of OAuthTokeninfoCacheTTL if it is not zero and less than \"expires_in\" value.\n\tOAuthTokeninfoCacheTTL time.Duration\n\n\t// OAuth2SecretFile contains the filename with the encryption key for the\n\t// authentication cookie and grant flow state stored in Secrets.\n\tOAuth2SecretFile string\n\n\t// OAuth2ClientID, the OAuth2 client id of the current service, used to exchange\n\t// the access code.\n\tOAuth2ClientID string\n\n\t// OAuth2ClientSecret, the secret associated with the ClientID, used to exchange\n\t// the access code.\n\tOAuth2ClientSecret string\n\n\t// OAuth2ClientIDFile, the path of the file containing the OAuth2 client id of\n\t// the current service, used to exchange the access code.\n\t// File name may contain {host} placeholder which will be replaced by the request host.\n\tOAuth2ClientIDFile string\n\n\t// OAuth2ClientSecretFile, the path of the file containing the secret associated\n\t// with the ClientID, used to exchange the access code.\n\t// File name may contain {host} placeholder which will be replaced by the request host.\n\tOAuth2ClientSecretFile string\n\n\t// OAuth2CallbackPath contains the path where the OAuth2 callback requests with the\n\t// authorization code should be redirected to. Defaults to /.well-known/oauth2-callback\n\tOAuth2CallbackPath string\n\n\t// OAuthTokenintrospectionTimeout sets timeout duration while calling oauth tokenintrospection service\n\tOAuthTokenintrospectionTimeout time.Duration\n\n\t// OAuth2AuthURLParameters the additional parameters to send to OAuth2 authorize and token endpoints.\n\tOAuth2AuthURLParameters map[string]string\n\n\t// OAuth2AccessTokenHeaderName the name of the header to which the access token\n\t// should be assigned after the oauthGrant filter.\n\tOAuth2AccessTokenHeaderName string\n\n\t// OAuth2TokeninfoSubjectKey the key of the subject ID attribute in the\n\t// tokeninfo map. Used for downstream oidcClaimsQuery compatibility.\n\tOAuth2TokeninfoSubjectKey string\n\n\t// OAuth2GrantTokeninfoKeys, if not empty keys not in this list are removed from the tokeninfo map.\n\tOAuth2GrantTokeninfoKeys []string\n\n\t// OAuth2TokenCookieName the name of the cookie that Skipper sets after a\n\t// successful OAuth2 token exchange. Stores the encrypted access token.\n\tOAuth2TokenCookieName string\n\n\t// OAuth2TokenCookieRemoveSubdomains sets the number of subdomains to remove from\n\t// the callback request hostname to obtain token cookie domain.\n\tOAuth2TokenCookieRemoveSubdomains int\n\n\t// OAuth2GrantInsecure omits Secure attribute of the token cookie and uses http scheme for callback url.\n\tOAuth2GrantInsecure bool\n\n\t// OAuthGrantConfig specifies configuration for OAuth grant flow.\n\t// A new instance will be created from OAuth* options when not specified.\n\tOAuthGrantConfig *auth.OAuthConfig\n\n\t// CompressEncodings, if not empty replace default compression encodings\n\tCompressEncodings []string\n\n\t// OIDCSecretsFile path to the file containing key to encrypt OpenID token\n\tOIDCSecretsFile string\n\n\t// OIDCCookieValidity sets validity time duration for Cookies to calculate expiration time. (default 1h).\n\tOIDCCookieValidity time.Duration\n\n\t// OIDCDistributedClaimsTimeout sets timeout duration while calling Distributed Claims endpoint.\n\tOIDCDistributedClaimsTimeout time.Duration\n\n\t// SecretsRegistry to store and load secretsencrypt\n\tSecretsRegistry *secrets.Registry\n\n\t// CredentialsPaths directories or files where credentials are stored one secret per file\n\tCredentialsPaths []string\n\n\t// CredentialsUpdateInterval sets the interval to update secrets\n\tCredentialsUpdateInterval time.Duration\n\n\t// API Monitoring feature is active (feature toggle)\n\tApiUsageMonitoringEnable                bool\n\tApiUsageMonitoringRealmKeys             string\n\tApiUsageMonitoringClientKeys            string\n\tApiUsageMonitoringRealmsTrackingPattern string\n\t// *DEPRECATED* ApiUsageMonitoringDefaultClientTrackingPattern\n\tApiUsageMonitoringDefaultClientTrackingPattern string\n\n\t// Default filters directory enables default filters mechanism and sets the directory where the filters are located\n\tDefaultFiltersDir string\n\n\t// WebhookTimeout sets timeout duration while calling a custom webhook auth service\n\tWebhookTimeout time.Duration\n\n\t// MaxAuditBody sets the maximum read size of the body read by the audit log filter\n\tMaxAuditBody int\n\n\t// MaxMatcherBufferSize sets the maximum read buffer size of blockContent filter defaults to 2MiB\n\tMaxMatcherBufferSize uint64\n\n\t// EnableSwarm enables skipper fleet communication, required by e.g.\n\t// the cluster ratelimiter\n\tEnableSwarm bool\n\t// redis based swarm\n\tSwarmRedisURLs                []string\n\tSwarmRedisPassword            string\n\tSwarmRedisHashAlgorithm       string\n\tSwarmRedisDialTimeout         time.Duration\n\tSwarmRedisReadTimeout         time.Duration\n\tSwarmRedisWriteTimeout        time.Duration\n\tSwarmRedisPoolTimeout         time.Duration\n\tSwarmRedisMinIdleConns        int\n\tSwarmRedisMaxIdleConns        int\n\tSwarmRedisEndpointsRemoteURL  string\n\tSwarmRedisConnMetricsInterval time.Duration\n\tSwarmRedisUpdateInterval      time.Duration\n\t// swim based swarm\n\tSwarmKubernetesNamespace          string\n\tSwarmKubernetesLabelSelectorKey   string\n\tSwarmKubernetesLabelSelectorValue string\n\tSwarmPort                         int\n\tSwarmMaxMessageBuffer             int\n\tSwarmLeaveTimeout                 time.Duration\n\t// swim based swarm for local testing\n\tSwarmStaticSelf  string // 127.0.0.1:9001\n\tSwarmStaticOther string // 127.0.0.1:9002,127.0.0.1:9003\n\n\t// SwarmRegistry specifies an optional callback function that is\n\t// called after ratelimit registry is initialized\n\tSwarmRegistry func(*ratelimit.Registry)\n\n\t// ClusterRatelimitMaxGroupShards specifies the maximum number of group shards for the clusterRatelimit filter\n\tClusterRatelimitMaxGroupShards int\n\n\t// KubernetesEnableTLS enables kubernetes to use resources to terminate tls\n\tKubernetesEnableTLS bool\n\n\t// LuaModules that are allowed to be used.\n\t//\n\t// Use <module>.<symbol> to selectively enable module symbols,\n\t// for example: package,base._G,base.print,json\n\tLuaModules []string\n\n\t// LuaSources that are allowed as input sources. Valid sources\n\t// are \"\", \"file\", \"inline\", \"file\",\"inline\". Empty list\n\t// defaults to \"file\",\"inline\" and \"none\" disables lua\n\t// filters.\n\tLuaSources []string\n\n\tEnableOpenPolicyAgent                bool\n\tOpenPolicyAgentConfigTemplate        string\n\tOpenPolicyAgentEnvoyMetadata         string\n\tOpenPolicyAgentCleanerInterval       time.Duration\n\tOpenPolicyAgentStartupTimeout        time.Duration\n\tOpenPolicyAgentMaxRequestBodySize    int64\n\tOpenPolicyAgentRequestBodyBufferSize int64\n\tOpenPolicyAgentMaxMemoryBodyParsing  int64\n\n\tPassiveHealthCheck map[string]string\n}\n\nfunc (o *Options) KubernetesDataClientOptions() kubernetes.Options {\n\treturn kubernetes.Options{\n\t\tAllowedExternalNames:                        o.KubernetesAllowedExternalNames,\n\t\tBackendNameTracingTag:                       o.OpenTracingBackendNameTag,\n\t\tDefaultFiltersDir:                           o.DefaultFiltersDir,\n\t\tKubernetesInCluster:                         o.KubernetesInCluster,\n\t\tKubernetesURL:                               o.KubernetesURL,\n\t\tTokenFile:                                   o.KubernetesTokenFile,\n\t\tKubernetesNamespace:                         o.KubernetesNamespace,\n\t\tKubernetesEnableEastWest:                    o.KubernetesEnableEastWest,\n\t\tKubernetesEnableEndpointslices:              o.KubernetesEnableEndpointslices,\n\t\tKubernetesEastWestDomain:                    o.KubernetesEastWestDomain,\n\t\tKubernetesEastWestRangeDomains:              o.KubernetesEastWestRangeDomains,\n\t\tKubernetesEastWestRangePredicates:           o.KubernetesEastWestRangePredicates,\n\t\tKubernetesEastWestRangeAnnotationPredicates: o.KubernetesEastWestRangeAnnotationPredicates,\n\t\tKubernetesAnnotationPredicates:              o.KubernetesAnnotationPredicates,\n\t\tHTTPSRedirectCode:                           o.KubernetesHTTPSRedirectCode,\n\t\tDisableCatchAllRoutes:                       o.KubernetesDisableCatchAllRoutes,\n\t\tIngressClass:                                o.KubernetesIngressClass,\n\t\tIngressLabelSelectors:                       o.KubernetesIngressLabelSelectors,\n\t\tServicesLabelSelectors:                      o.KubernetesServicesLabelSelectors,\n\t\tEndpointsLabelSelectors:                     o.KubernetesEndpointsLabelSelectors,\n\t\tSecretsLabelSelectors:                       o.KubernetesSecretsLabelSelectors,\n\t\tRouteGroupsLabelSelectors:                   o.KubernetesRouteGroupsLabelSelectors,\n\t\tOnlyAllowedExternalNames:                    o.KubernetesOnlyAllowedExternalNames,\n\t\tOriginMarker:                                o.EnableRouteCreationMetrics,\n\t\tPathMode:                                    o.KubernetesPathMode,\n\t\tProvideHealthcheck:                          o.KubernetesHealthcheck,\n\t\tProvideHTTPSRedirect:                        o.KubernetesHTTPSRedirect,\n\t\tReverseSourcePredicate:                      o.ReverseSourcePredicate,\n\t\tRouteGroupClass:                             o.KubernetesRouteGroupClass,\n\t\tWhitelistedHealthCheckCIDR:                  o.WhitelistedHealthCheckCIDR,\n\t\tForceKubernetesService:                      o.KubernetesForceService,\n\t\tBackendTrafficAlgorithm:                     o.KubernetesBackendTrafficAlgorithm,\n\t\tDefaultLoadBalancerAlgorithm:                o.KubernetesDefaultLoadBalancerAlgorithm,\n\t}\n}\n\nfunc (o *Options) OAuthGrantOptions() *auth.OAuthConfig {\n\toauthConfig := &auth.OAuthConfig{}\n\n\toauthConfig.AuthURL = o.OAuth2AuthURL\n\toauthConfig.TokenURL = o.OAuth2TokenURL\n\toauthConfig.RevokeTokenURL = o.OAuth2RevokeTokenURL\n\toauthConfig.TokeninfoURL = o.OAuthTokeninfoURL\n\toauthConfig.SecretFile = o.OAuth2SecretFile\n\toauthConfig.ClientID = o.OAuth2ClientID\n\tif oauthConfig.ClientID == \"\" {\n\t\toauthConfig.ClientID, _ = os.LookupEnv(\"OAUTH2_CLIENT_ID\")\n\t}\n\toauthConfig.ClientSecret = o.OAuth2ClientSecret\n\tif oauthConfig.ClientSecret == \"\" {\n\t\toauthConfig.ClientSecret, _ = os.LookupEnv(\"OAUTH2_CLIENT_SECRET\")\n\t}\n\toauthConfig.ClientIDFile = o.OAuth2ClientIDFile\n\toauthConfig.ClientSecretFile = o.OAuth2ClientSecretFile\n\toauthConfig.CallbackPath = o.OAuth2CallbackPath\n\toauthConfig.AuthURLParameters = o.OAuth2AuthURLParameters\n\toauthConfig.Secrets = o.SecretsRegistry\n\toauthConfig.AccessTokenHeaderName = o.OAuth2AccessTokenHeaderName\n\toauthConfig.TokeninfoSubjectKey = o.OAuth2TokeninfoSubjectKey\n\toauthConfig.GrantTokeninfoKeys = o.OAuth2GrantTokeninfoKeys\n\toauthConfig.TokenCookieName = o.OAuth2TokenCookieName\n\toauthConfig.TokenCookieRemoveSubdomains = &o.OAuth2TokenCookieRemoveSubdomains\n\toauthConfig.Insecure = o.OAuth2GrantInsecure\n\toauthConfig.ConnectionTimeout = o.OAuthTokeninfoTimeout\n\toauthConfig.MaxIdleConnectionsPerHost = o.IdleConnectionsPerHost\n\n\treturn oauthConfig\n}\n\ntype serverErrorLogWriter struct{}\n\nfunc (*serverErrorLogWriter) Write(p []byte) (int, error) {\n\tm := string(p)\n\tif strings.HasPrefix(m, \"http: TLS handshake error\") && strings.HasSuffix(m, \": EOF\\n\") {\n\t\tlog.Debug(m) // https://github.com/golang/go/issues/26918\n\t} else if strings.HasPrefix(m, \"http: URL query contains semicolon\") {\n\t\tlog.Debug(m) // https://github.com/golang/go/issues/25192\n\t} else {\n\t\tlog.Error(m)\n\t}\n\treturn len(p), nil\n}\n\nfunc newServerErrorLog() *stdlog.Logger {\n\treturn stdlog.New(&serverErrorLogWriter{}, \"\", 0)\n}\n\nfunc createDataClients(o Options, cr *certregistry.CertRegistry) ([]routing.DataClient, error) {\n\tvar clients []routing.DataClient\n\n\tif o.RoutesFile != \"\" {\n\t\tfor _, rf := range strings.Split(o.RoutesFile, \",\") {\n\t\t\tf, err := eskipfile.Open(rf)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"error while opening eskip file: %w\", err)\n\t\t\t}\n\n\t\t\tclients = append(clients, f)\n\t\t}\n\t}\n\n\tif o.WatchRoutesFile != \"\" {\n\t\tfor _, rf := range strings.Split(o.WatchRoutesFile, \",\") {\n\t\t\tclients = append(clients, eskipfile.Watch(rf))\n\t\t}\n\t}\n\n\tif len(o.RoutesURLs) > 0 {\n\t\tfor _, url := range o.RoutesURLs {\n\t\t\tclient, err := eskipfile.RemoteWatch(&eskipfile.RemoteWatchOptions{\n\t\t\t\tRemoteFile:    url,\n\t\t\t\tFailOnStartup: true,\n\t\t\t\tHTTPTimeout:   o.SourcePollTimeout,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"error while loading routes from url %s: %w\", url, err)\n\t\t\t}\n\t\t\tclients = append(clients, client)\n\t\t}\n\t}\n\n\tif o.InlineRoutes != \"\" {\n\t\tir, err := routestring.New(o.InlineRoutes)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error while parsing inline routes: %w\", err)\n\t\t}\n\n\t\tclients = append(clients, ir)\n\t}\n\n\tif len(o.EtcdUrls) > 0 {\n\t\tetcdClient, err := etcd.New(etcd.Options{\n\t\t\tEndpoints:  o.EtcdUrls,\n\t\t\tPrefix:     o.EtcdPrefix,\n\t\t\tTimeout:    o.EtcdWaitTimeout,\n\t\t\tInsecure:   o.EtcdInsecure,\n\t\t\tOAuthToken: o.EtcdOAuthToken,\n\t\t\tUsername:   o.EtcdUsername,\n\t\t\tPassword:   o.EtcdPassword,\n\t\t})\n\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error while creating etcd client: %w\", err)\n\t\t}\n\n\t\tclients = append(clients, etcdClient)\n\t}\n\n\tif o.Kubernetes {\n\t\tkops := o.KubernetesDataClientOptions()\n\t\tkops.CertificateRegistry = cr\n\n\t\tkubernetesClient, err := kubernetes.New(kops)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error while creating kubernetes data client: %w\", err)\n\t\t}\n\t\tclients = append(clients, kubernetesClient)\n\t}\n\n\treturn clients, nil\n}\n\nfunc getLogOutput(name string) (io.Writer, error) {\n\tname = path.Clean(name)\n\n\tif name == \"/dev/stdout\" {\n\t\treturn os.Stdout, nil\n\t}\n\n\tif name == \"/dev/stderr\" {\n\t\treturn os.Stderr, nil\n\t}\n\n\treturn os.OpenFile(name, os.O_APPEND|os.O_CREATE|os.O_WRONLY, os.ModePerm)\n}\n\nfunc initLog(o Options) error {\n\tvar (\n\t\tlogOutput       io.Writer\n\t\taccessLogOutput io.Writer\n\t\terr             error\n\t)\n\n\tif o.ApplicationLogOutput != \"\" {\n\t\tlogOutput, err = getLogOutput(o.ApplicationLogOutput)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif !o.AccessLogDisabled && o.AccessLogOutput != \"\" {\n\t\taccessLogOutput, err = getLogOutput(o.AccessLogOutput)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tlogging.Init(logging.Options{\n\t\tApplicationLogPrefix:        o.ApplicationLogPrefix,\n\t\tApplicationLogOutput:        logOutput,\n\t\tApplicationLogJSONEnabled:   o.ApplicationLogJSONEnabled,\n\t\tApplicationLogJsonFormatter: o.ApplicationLogJsonFormatter,\n\t\tAccessLogOutput:             accessLogOutput,\n\t\tAccessLogJSONEnabled:        o.AccessLogJSONEnabled,\n\t\tAccessLogStripQuery:         o.AccessLogStripQuery,\n\t\tAccessLogJsonFormatter:      o.AccessLogJsonFormatter,\n\t})\n\n\treturn nil\n}\n\n// filterRegistry creates a filter registry with the builtin and\n// custom filter specs registered excluding disabled filters.\n// If [Options.RegisterFilters] callback is set, it will be called.\nfunc (o *Options) filterRegistry() filters.Registry {\n\tregistry := make(filters.Registry)\n\n\tdisabledFilters := make(map[string]struct{})\n\tfor _, name := range o.DisabledFilters {\n\t\tdisabledFilters[name] = struct{}{}\n\t}\n\n\tfor _, f := range builtin.Filters() {\n\t\tif _, ok := disabledFilters[f.Name()]; !ok {\n\t\t\tregistry.Register(f)\n\t\t}\n\t}\n\n\tfor _, f := range o.CustomFilters {\n\t\tif _, ok := disabledFilters[f.Name()]; !ok {\n\t\t\tregistry.Register(f)\n\t\t}\n\t}\n\n\tif o.RegisterFilters != nil {\n\t\to.RegisterFilters(registry)\n\t}\n\n\treturn registry\n}\n\nfunc (o *Options) tlsConfig(cr *certregistry.CertRegistry) (*tls.Config, error) {\n\n\tif o.ProxyTLS != nil {\n\t\treturn o.ProxyTLS, nil\n\t}\n\n\tif o.CertPathTLS == \"\" && o.KeyPathTLS == \"\" && cr == nil {\n\t\treturn nil, nil\n\t}\n\n\tconfig := &tls.Config{\n\t\tMinVersion: o.TLSMinVersion,\n\t\tClientAuth: o.TLSClientAuth,\n\t}\n\n\tif o.CipherSuites != nil {\n\t\tconfig.CipherSuites = o.CipherSuites\n\t}\n\n\tif cr != nil {\n\t\tconfig.GetCertificate = cr.GetCertFromHello\n\t}\n\n\tif o.CertPathTLS == \"\" && o.KeyPathTLS == \"\" {\n\t\treturn config, nil\n\t}\n\n\tcrts := strings.Split(o.CertPathTLS, \",\")\n\tkeys := strings.Split(o.KeyPathTLS, \",\")\n\n\tif len(crts) != len(keys) {\n\t\treturn nil, fmt.Errorf(\"number of certificates does not match number of keys\")\n\t}\n\n\tfor i := 0; i < len(crts); i++ {\n\t\tcrt, key := crts[i], keys[i]\n\t\tkeypair, err := tls.LoadX509KeyPair(crt, key)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to load X509 keypair from %s and %s: %w\", crt, key, err)\n\t\t}\n\t\tconfig.Certificates = append(config.Certificates, keypair)\n\t}\n\treturn config, nil\n}\n\nfunc (o *Options) openTracingTracerInstance() (ot.Tracer, error) {\n\tif o.OpenTracingTracer != nil {\n\t\treturn o.OpenTracingTracer, nil\n\t}\n\n\tif len(o.OpenTracing) > 0 {\n\t\treturn tracing.InitTracer(o.OpenTracing)\n\t} else {\n\t\t// always have a tracer available, so filter authors can rely on the\n\t\t// existence of a tracer\n\t\ttracer, err := tracing.LoadTracingPlugin(o.PluginDirs, []string{\"noop\"})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t} else if tracer == nil {\n\t\t\t// LoadTracingPlugin unfortunately may return nil tracer\n\t\t\treturn nil, fmt.Errorf(\"failed to load tracing plugin from %v\", o.PluginDirs)\n\t\t}\n\t\treturn tracer, nil\n\t}\n}\n\nfunc listen(o *Options, address string, mtr metrics.Metrics) (net.Listener, error) {\n\n\tif !o.EnableTCPQueue {\n\t\treturn net.Listen(\"tcp\", address)\n\t}\n\n\tvar memoryLimit int64\n\tif o.MaxTCPListenerConcurrency <= 0 {\n\t\t// cgroup v1: https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt\n\t\t// cgroup v2: https://www.kernel.org/doc/Documentation/cgroup-v2.txt\n\t\t// Note that in containers this will be the container limit.\n\t\t// Runtimes without these files will use defaults defined in `queuelistener` package.\n\t\tconst (\n\t\t\tmemoryLimitFileV1 = \"/sys/fs/cgroup/memory/memory.limit_in_bytes\"\n\t\t\tmemoryLimitFileV2 = \"/sys/fs/cgroup/memory.max\"\n\t\t)\n\t\tmemoryLimitBytes, err := os.ReadFile(memoryLimitFileV2)\n\t\tif err != nil {\n\t\t\tmemoryLimitBytes, err = os.ReadFile(memoryLimitFileV1)\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"Failed to read memory limits, fallback to defaults: %v\", err)\n\t\t\t}\n\t\t}\n\t\tif err == nil {\n\t\t\tmemoryLimitString := strings.TrimSpace(string(memoryLimitBytes))\n\t\t\tmemoryLimit, err = strconv.ParseInt(memoryLimitString, 10, 64)\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"Failed to convert memory limits, fallback to defaults: %v\", err)\n\t\t\t}\n\n\t\t\t// 4GB, temporarily, as a tested magic number until a better mechanism is in place:\n\t\t\tif memoryLimit > 1<<32 {\n\t\t\t\tmemoryLimit = 1 << 32\n\t\t\t}\n\t\t}\n\t}\n\n\tqto := o.ReadHeaderTimeoutServer\n\tif qto <= 0 {\n\t\tqto = o.ReadTimeoutServer\n\t}\n\n\treturn queuelistener.Listen(queuelistener.Options{\n\t\tNetwork:          \"tcp\",\n\t\tAddress:          address,\n\t\tMaxConcurrency:   o.MaxTCPListenerConcurrency,\n\t\tMaxQueueSize:     o.MaxTCPListenerQueue,\n\t\tMemoryLimitBytes: memoryLimit,\n\t\tConnectionBytes:  o.ExpectedBytesPerRequest,\n\t\tQueueTimeout:     qto,\n\t\tMetrics:          mtr,\n\t})\n}\n\nfunc listenAndServeQuit(\n\tproxy http.Handler,\n\to *Options,\n\tsigs chan os.Signal,\n\tidleConnsCH chan struct{},\n\tmtr metrics.Metrics,\n\tcr *certregistry.CertRegistry,\n) error {\n\ttlsConfig, err := o.tlsConfig(cr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tserveTLS := tlsConfig != nil\n\n\taddress := o.Address\n\tif address == \"\" {\n\t\tif serveTLS {\n\t\t\taddress = \":https\"\n\t\t} else {\n\t\t\taddress = \":http\"\n\t\t}\n\t}\n\n\tsrv := &http.Server{\n\t\tAddr:              address,\n\t\tTLSConfig:         tlsConfig,\n\t\tHandler:           proxy,\n\t\tReadTimeout:       o.ReadTimeoutServer,\n\t\tReadHeaderTimeout: o.ReadHeaderTimeoutServer,\n\t\tWriteTimeout:      o.WriteTimeoutServer,\n\t\tIdleTimeout:       o.IdleTimeoutServer,\n\t\tMaxHeaderBytes:    o.MaxHeaderBytes,\n\t\tErrorLog:          newServerErrorLog(),\n\t}\n\n\tcm := &skpnet.ConnManager{\n\t\tKeepalive:         o.KeepaliveServer,\n\t\tKeepaliveRequests: o.KeepaliveRequestsServer,\n\t}\n\n\tif o.EnableConnMetricsServer {\n\t\tcm.Metrics = mtr\n\t}\n\n\tcm.Configure(srv)\n\n\tlog.Infof(\"Listen on %v\", address)\n\n\tl, err := listen(o, address, mtr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// making idleConnsCH and sigs optional parameters is required to be able to tear down a server\n\t// from the tests\n\tif idleConnsCH == nil {\n\t\tidleConnsCH = make(chan struct{})\n\t}\n\n\tif sigs == nil {\n\t\tsigs = make(chan os.Signal, 1)\n\t}\n\n\tgo func() {\n\t\tsignal.Notify(sigs, syscall.SIGTERM)\n\n\t\t<-sigs\n\n\t\tlog.Infof(\"Got shutdown signal, wait %v for health check\", o.WaitForHealthcheckInterval)\n\t\ttime.Sleep(o.WaitForHealthcheckInterval)\n\n\t\tlog.Info(\"Start shutdown\")\n\t\tif err := srv.Shutdown(context.Background()); err != nil {\n\t\t\tlog.Errorf(\"Failed to graceful shutdown: %v\", err)\n\t\t}\n\t\tclose(idleConnsCH)\n\t}()\n\n\tif serveTLS {\n\t\tif o.InsecureAddress != \"\" {\n\t\t\tlog.Infof(\"Insecure listener on %v\", o.InsecureAddress)\n\n\t\t\tgo func() {\n\t\t\t\tl, err := listen(o, o.InsecureAddress, mtr)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Errorf(\"Failed to start insecure listener on %s: %v\", o.InsecureAddress, err)\n\t\t\t\t}\n\n\t\t\t\tif err := srv.Serve(l); err != http.ErrServerClosed {\n\t\t\t\t\tlog.Errorf(\"Insecure listener serve failed: %v\", err)\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\n\t\tif err := srv.ServeTLS(l, \"\", \"\"); err != http.ErrServerClosed {\n\t\t\tlog.Errorf(\"ServeTLS failed: %v\", err)\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tlog.Infof(\"TLS settings not found, defaulting to HTTP\")\n\n\t\tif err := srv.Serve(l); err != http.ErrServerClosed {\n\t\t\tlog.Errorf(\"Serve failed: %v\", err)\n\t\t\treturn err\n\t\t}\n\t}\n\n\t<-idleConnsCH\n\tlog.Infof(\"done.\")\n\treturn nil\n}\n\nfunc findKubernetesDataclient(dataClients []routing.DataClient) *kubernetes.Client {\n\tvar kdc *kubernetes.Client\n\tfor _, dc := range dataClients {\n\t\tif kc, ok := dc.(*kubernetes.Client); ok {\n\t\t\tkdc = kc\n\t\t\tbreak\n\t\t}\n\t}\n\treturn kdc\n}\n\nfunc getKubernetesRedisAddrUpdater(opts *Options, kdc *kubernetes.Client, loaded bool) func() ([]string, error) {\n\tif loaded {\n\t\t// TODO(sszuecs): make sure kubernetes dataclient is already initialized and\n\t\t// has polled the data once or kdc.GetEndpointAdresses should be blocking\n\t\t// call to kubernetes API\n\t\treturn func() ([]string, error) {\n\t\t\ta := kdc.GetEndpointAddresses(opts.KubernetesRedisServiceNamespace, opts.KubernetesRedisServiceName)\n\t\t\tlog.Debugf(\"GetEndpointAddresses found %d redis endpoints\", len(a))\n\n\t\t\treturn joinPort(a, opts.KubernetesRedisServicePort), nil\n\t\t}\n\t} else {\n\t\treturn func() ([]string, error) {\n\t\t\ta, err := kdc.LoadEndpointAddresses(opts.KubernetesRedisServiceNamespace, opts.KubernetesRedisServiceName)\n\t\t\tlog.Debugf(\"LoadEndpointAddresses found %d redis endpoints, err: %v\", len(a), err)\n\n\t\t\treturn joinPort(a, opts.KubernetesRedisServicePort), err\n\t\t}\n\t}\n}\n\nfunc joinPort(addrs []string, port int) []string {\n\tp := strconv.Itoa(port)\n\tfor i := 0; i < len(addrs); i++ {\n\t\taddrs[i] = net.JoinHostPort(addrs[i], p)\n\t}\n\treturn addrs\n}\n\ntype RedisEndpoint struct {\n\tAddress string `json:\"address\"`\n}\n\ntype RedisEndpoints struct {\n\tEndpoints []RedisEndpoint `json:\"endpoints\"`\n}\n\nfunc getRemoteURLRedisAddrUpdater(address string) func() ([]string, error) {\n\t/* #nosec */\n\treturn func() ([]string, error) {\n\t\tresp, err := http.Get(address)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"failed to connect to redis endpoint %v, due to: %v\", address, err)\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tbody, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"failed to read to redis response %v\", err)\n\t\t\treturn nil, err\n\t\t}\n\n\t\ttarget := &RedisEndpoints{}\n\n\t\terr = json.Unmarshal(body, target)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Failed to decode body to json %v\", err)\n\t\t\treturn nil, err\n\t\t}\n\n\t\ta := make([]string, 0, len(target.Endpoints))\n\t\tfor _, endpoint := range target.Endpoints {\n\t\t\ta = append(a, endpoint.Address)\n\t\t}\n\n\t\treturn a, nil\n\t}\n}\n\nfunc run(o Options, sig chan os.Signal, idleConnsCH chan struct{}) error {\n\t// init log\n\terr := initLog(o)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif o.EnablePrometheusMetrics {\n\t\to.MetricsFlavours = append(o.MetricsFlavours, \"prometheus\")\n\t}\n\n\tmetricsKind := metrics.UnkownKind\n\tfor _, s := range o.MetricsFlavours {\n\t\tswitch s {\n\t\tcase \"codahale\":\n\t\t\tmetricsKind |= metrics.CodaHaleKind\n\t\tcase \"prometheus\":\n\t\t\tmetricsKind |= metrics.PrometheusKind\n\t\t}\n\t}\n\n\t// set default if unset\n\tif metricsKind == metrics.UnkownKind {\n\t\tmetricsKind = metrics.CodaHaleKind\n\t}\n\n\tlog.Infof(\"Expose metrics in %s format\", metricsKind)\n\tmtrOpts := metrics.Options{\n\t\tFormat:                             metricsKind,\n\t\tPrefix:                             o.MetricsPrefix,\n\t\tEnableDebugGcMetrics:               o.EnableDebugGcMetrics,\n\t\tEnableRuntimeMetrics:               o.EnableRuntimeMetrics,\n\t\tEnableServeRouteMetrics:            o.EnableServeRouteMetrics,\n\t\tEnableServeRouteCounter:            o.EnableServeRouteCounter,\n\t\tEnableServeHostMetrics:             o.EnableServeHostMetrics,\n\t\tEnableServeHostCounter:             o.EnableServeHostCounter,\n\t\tEnableServeMethodMetric:            o.EnableServeMethodMetric,\n\t\tEnableServeStatusCodeMetric:        o.EnableServeStatusCodeMetric,\n\t\tEnableBackendHostMetrics:           o.EnableBackendHostMetrics,\n\t\tEnableProfile:                      o.EnableProfile,\n\t\tBlockProfileRate:                   o.BlockProfileRate,\n\t\tMutexProfileFraction:               o.MutexProfileFraction,\n\t\tMemProfileRate:                     o.MemProfileRate,\n\t\tEnableAllFiltersMetrics:            o.EnableAllFiltersMetrics,\n\t\tEnableCombinedResponseMetrics:      o.EnableCombinedResponseMetrics,\n\t\tEnableRouteResponseMetrics:         o.EnableRouteResponseMetrics,\n\t\tEnableRouteBackendErrorsCounters:   o.EnableRouteBackendErrorsCounters,\n\t\tEnableRouteStreamingErrorsCounters: o.EnableRouteStreamingErrorsCounters,\n\t\tEnableRouteBackendMetrics:          o.EnableRouteBackendMetrics,\n\t\tUseExpDecaySample:                  o.MetricsUseExpDecaySample,\n\t\tHistogramBuckets:                   o.HistogramMetricBuckets,\n\t\tDisableCompatibilityDefaults:       o.DisableMetricsCompatibilityDefaults,\n\t\tPrometheusRegistry:                 o.PrometheusRegistry,\n\t\tEnablePrometheusStartLabel:         o.EnablePrometheusStartLabel,\n\t}\n\n\tmtr := o.MetricsBackend\n\tif mtr == nil {\n\t\tmtr = metrics.NewMetrics(mtrOpts)\n\t}\n\t// set global instance for backwards compatibility\n\tmetrics.Default = mtr\n\n\t// *DEPRECATED* client tracking parameter\n\tif o.ApiUsageMonitoringDefaultClientTrackingPattern != \"\" {\n\t\tlog.Warn(`\"ApiUsageMonitoringDefaultClientTrackingPattern\" option is deprecated`)\n\t}\n\n\tif err := o.findAndLoadPlugins(); err != nil {\n\t\treturn err\n\t}\n\n\tvar cr *certregistry.CertRegistry\n\tif o.KubernetesEnableTLS {\n\t\tcr = certregistry.NewCertRegistry()\n\t}\n\n\t// create data clients\n\tdataClients, err := createDataClients(o, cr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// append custom data clients\n\tdataClients = append(dataClients, o.CustomDataClients...)\n\n\tif len(dataClients) == 0 {\n\t\tlog.Warning(\"no route source specified\")\n\t}\n\n\to.PluginDirs = append(o.PluginDirs, o.PluginDir)\n\n\ttracer, err := o.openTracingTracerInstance()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// tee filters override with initialized tracer\n\to.CustomFilters = append(o.CustomFilters,\n\t\t// tee()\n\t\tteefilters.WithOptions(teefilters.Options{\n\t\t\tTracer:   tracer,\n\t\t\tNoFollow: false,\n\t\t}),\n\t\t// teenf()\n\t\tteefilters.WithOptions(teefilters.Options{\n\t\t\tNoFollow: true,\n\t\t\tTracer:   tracer,\n\t\t}),\n\t)\n\n\tif o.OAuthTokeninfoURL != \"\" {\n\t\ttio := auth.TokeninfoOptions{\n\t\t\tURL:          o.OAuthTokeninfoURL,\n\t\t\tTimeout:      o.OAuthTokeninfoTimeout,\n\t\t\tMaxIdleConns: o.IdleConnectionsPerHost,\n\t\t\tTracer:       tracer,\n\t\t\tMetrics:      mtr,\n\t\t\tCacheSize:    o.OAuthTokeninfoCacheSize,\n\t\t\tCacheTTL:     o.OAuthTokeninfoCacheTTL,\n\t\t}\n\n\t\to.CustomFilters = append(o.CustomFilters,\n\t\t\tauth.NewOAuthTokeninfoAllScopeWithOptions(tio),\n\t\t\tauth.NewOAuthTokeninfoAnyScopeWithOptions(tio),\n\t\t\tauth.NewOAuthTokeninfoAllKVWithOptions(tio),\n\t\t\tauth.NewOAuthTokeninfoAnyKVWithOptions(tio),\n\t\t\tauth.NewOAuthTokeninfoValidate(tio),\n\t\t)\n\t}\n\n\tif o.SecretsRegistry == nil {\n\t\to.SecretsRegistry = secrets.NewRegistry()\n\t}\n\tdefer o.SecretsRegistry.Close()\n\n\tsp := secrets.NewSecretPaths(o.CredentialsUpdateInterval)\n\tdefer sp.Close()\n\tfor _, p := range o.CredentialsPaths {\n\t\tif err := sp.Add(p); err != nil {\n\t\t\tlog.Errorf(\"Failed to add credentials file: %s: %v\", p, err)\n\t\t}\n\t}\n\n\ttio := auth.TokenintrospectionOptions{\n\t\tTimeout:      o.OAuthTokenintrospectionTimeout,\n\t\tMaxIdleConns: o.IdleConnectionsPerHost,\n\t\tTracer:       tracer,\n\t}\n\n\twho := auth.WebhookOptions{\n\t\tTimeout:      o.WebhookTimeout,\n\t\tMaxIdleConns: o.IdleConnectionsPerHost,\n\t\tTracer:       tracer,\n\t}\n\n\tadmissionControlFilter := shedder.NewAdmissionControl(shedder.Options{\n\t\tTracer: tracer,\n\t})\n\tadmissionControlSpec, ok := admissionControlFilter.(*shedder.AdmissionControlSpec)\n\tif !ok {\n\t\tlog.Fatal(\"Failed to cast admission control filter to spec\")\n\t}\n\n\to.CustomFilters = append(o.CustomFilters,\n\t\tlogfilter.NewAuditLog(o.MaxAuditBody),\n\t\tblock.NewBlock(o.MaxMatcherBufferSize),\n\t\tblock.NewBlockHex(o.MaxMatcherBufferSize),\n\t\tauth.NewBearerInjector(sp),\n\t\tauth.NewSetRequestHeaderFromSecret(sp),\n\t\tauth.NewJwtValidationWithOptions(tio),\n\t\tauth.NewJwtMetrics(),\n\t\tauth.TokenintrospectionWithOptions(auth.NewOAuthTokenintrospectionAnyClaims, tio),\n\t\tauth.TokenintrospectionWithOptions(auth.NewOAuthTokenintrospectionAllClaims, tio),\n\t\tauth.TokenintrospectionWithOptions(auth.NewOAuthTokenintrospectionAnyKV, tio),\n\t\tauth.TokenintrospectionWithOptions(auth.NewOAuthTokenintrospectionAllKV, tio),\n\t\tauth.TokenintrospectionWithOptions(auth.NewSecureOAuthTokenintrospectionAnyClaims, tio),\n\t\tauth.TokenintrospectionWithOptions(auth.NewSecureOAuthTokenintrospectionAllClaims, tio),\n\t\tauth.TokenintrospectionWithOptions(auth.NewSecureOAuthTokenintrospectionAnyKV, tio),\n\t\tauth.TokenintrospectionWithOptions(auth.NewSecureOAuthTokenintrospectionAllKV, tio),\n\t\tauth.WebhookWithOptions(who),\n\t\tauth.NewOIDCQueryClaimsFilter(),\n\t\tapiusagemonitoring.NewApiUsageMonitoring(\n\t\t\to.ApiUsageMonitoringEnable,\n\t\t\to.ApiUsageMonitoringRealmKeys,\n\t\t\to.ApiUsageMonitoringClientKeys,\n\t\t\to.ApiUsageMonitoringRealmsTrackingPattern,\n\t\t),\n\t\tadmissionControlFilter,\n\t)\n\n\tif o.OIDCSecretsFile != \"\" {\n\t\toidcClientId, _ := os.LookupEnv(\"OIDC_CLIENT_ID\")\n\t\toidcClientSecret, _ := os.LookupEnv(\"OIDC_CLIENT_SECRET\")\n\t\topts := auth.OidcOptions{\n\t\t\tCookieValidity:   o.OIDCCookieValidity,\n\t\t\tTimeout:          o.OIDCDistributedClaimsTimeout,\n\t\t\tMaxIdleConns:     o.IdleConnectionsPerHost,\n\t\t\tTracer:           tracer,\n\t\t\tOidcClientId:     oidcClientId,\n\t\t\tOidcClientSecret: oidcClientSecret,\n\t\t}\n\n\t\to.CustomFilters = append(o.CustomFilters,\n\t\t\tauth.NewOAuthOidcUserInfosWithOptions(o.OIDCSecretsFile, o.SecretsRegistry, opts),\n\t\t\tauth.NewOAuthOidcAnyClaimsWithOptions(o.OIDCSecretsFile, o.SecretsRegistry, opts),\n\t\t\tauth.NewOAuthOidcAllClaimsWithOptions(o.OIDCSecretsFile, o.SecretsRegistry, opts),\n\t\t)\n\t}\n\n\tvar swarmer ratelimit.Swarmer\n\tvar redisOptions *skpnet.RedisOptions\n\tlog.Infof(\"enable swarm: %v\", o.EnableSwarm)\n\tif o.EnableSwarm {\n\t\tif len(o.SwarmRedisURLs) > 0 || o.KubernetesRedisServiceName != \"\" || o.SwarmRedisEndpointsRemoteURL != \"\" {\n\t\t\tlog.Infof(\"Redis based swarm with %d shards\", len(o.SwarmRedisURLs))\n\n\t\t\tredisOptions = &skpnet.RedisOptions{\n\t\t\t\tAddrs:               o.SwarmRedisURLs,\n\t\t\t\tPassword:            o.SwarmRedisPassword,\n\t\t\t\tHashAlgorithm:       o.SwarmRedisHashAlgorithm,\n\t\t\t\tDialTimeout:         o.SwarmRedisDialTimeout,\n\t\t\t\tReadTimeout:         o.SwarmRedisReadTimeout,\n\t\t\t\tWriteTimeout:        o.SwarmRedisWriteTimeout,\n\t\t\t\tPoolTimeout:         o.SwarmRedisPoolTimeout,\n\t\t\t\tMinIdleConns:        o.SwarmRedisMinIdleConns,\n\t\t\t\tMaxIdleConns:        o.SwarmRedisMaxIdleConns,\n\t\t\t\tConnMetricsInterval: o.SwarmRedisConnMetricsInterval,\n\t\t\t\tUpdateInterval:      o.SwarmRedisUpdateInterval,\n\t\t\t\tTracer:              tracer,\n\t\t\t\tLog:                 log.New(),\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Infof(\"Start swim based swarm\")\n\t\t\tswops := &swarm.Options{\n\t\t\t\tSwarmPort:        uint16(o.SwarmPort),\n\t\t\t\tMaxMessageBuffer: o.SwarmMaxMessageBuffer,\n\t\t\t\tLeaveTimeout:     o.SwarmLeaveTimeout,\n\t\t\t\tDebug:            log.GetLevel() == log.DebugLevel,\n\t\t\t}\n\n\t\t\tif o.Kubernetes {\n\t\t\t\tswops.KubernetesOptions = &swarm.KubernetesOptions{\n\t\t\t\t\tKubernetesInCluster:  o.KubernetesInCluster,\n\t\t\t\t\tKubernetesAPIBaseURL: o.KubernetesURL,\n\t\t\t\t\tNamespace:            o.SwarmKubernetesNamespace,\n\t\t\t\t\tLabelSelectorKey:     o.SwarmKubernetesLabelSelectorKey,\n\t\t\t\t\tLabelSelectorValue:   o.SwarmKubernetesLabelSelectorValue,\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif o.SwarmStaticSelf != \"\" {\n\t\t\t\tself, err := swarm.NewStaticNodeInfo(o.SwarmStaticSelf, o.SwarmStaticSelf)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"failed to get static NodeInfo: %w\", err)\n\t\t\t\t}\n\t\t\t\tother := []*swarm.NodeInfo{self}\n\n\t\t\t\tfor _, addr := range strings.Split(o.SwarmStaticOther, \",\") {\n\t\t\t\t\tni, err := swarm.NewStaticNodeInfo(addr, addr)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn fmt.Errorf(\"failed to get static NodeInfo: %w\", err)\n\t\t\t\t\t}\n\t\t\t\t\tother = append(other, ni)\n\t\t\t\t}\n\n\t\t\t\tswops.StaticSwarm = swarm.NewStaticSwarm(self, other)\n\t\t\t}\n\n\t\t\ttheSwarm, err := swarm.NewSwarm(swops)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to init swarm with options %+v: %w\", swops, err)\n\t\t\t}\n\t\t\tdefer theSwarm.Leave()\n\t\t\tswarmer = theSwarm\n\t\t}\n\n\t\t// in case we have kubernetes dataclient and we can detect redis instances, we patch redisOptions\n\t\tif redisOptions != nil && o.KubernetesRedisServiceNamespace != \"\" && o.KubernetesRedisServiceName != \"\" {\n\t\t\tlog.Infof(\"Use endpoints %s/%s to fetch updated redis shards\", o.KubernetesRedisServiceNamespace, o.KubernetesRedisServiceName)\n\n\t\t\tkdc := findKubernetesDataclient(dataClients)\n\t\t\tif kdc != nil {\n\t\t\t\tredisOptions.AddrUpdater = getKubernetesRedisAddrUpdater(&o, kdc, true)\n\t\t\t} else {\n\t\t\t\tkdc, err := kubernetes.New(o.KubernetesDataClientOptions())\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tdefer kdc.Close()\n\n\t\t\t\tredisOptions.AddrUpdater = getKubernetesRedisAddrUpdater(&o, kdc, false)\n\t\t\t}\n\n\t\t\t_, err = redisOptions.AddrUpdater()\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"Failed to update redis addresses from kubernetes: %v\", err)\n\t\t\t\treturn err\n\t\t\t}\n\t\t} else if redisOptions != nil && o.SwarmRedisEndpointsRemoteURL != \"\" {\n\t\t\tlog.Infof(\"Use remote address %s to fetch updates redis shards\", o.SwarmRedisEndpointsRemoteURL)\n\t\t\tredisOptions.AddrUpdater = getRemoteURLRedisAddrUpdater(o.SwarmRedisEndpointsRemoteURL)\n\n\t\t\t_, err = redisOptions.AddrUpdater()\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"Failed to update redis addresses from URL: %v\", err)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\tvar ratelimitRegistry *ratelimit.Registry\n\tvar failClosedRatelimitPostProcessor *ratelimitfilters.FailClosedPostProcessor\n\tif o.EnableRatelimiters || len(o.RatelimitSettings) > 0 {\n\t\tlog.Infof(\"enabled ratelimiters %v: %v\", o.EnableRatelimiters, o.RatelimitSettings)\n\t\tratelimitRegistry = ratelimit.NewSwarmRegistry(swarmer, redisOptions, o.RatelimitSettings...)\n\t\tdefer ratelimitRegistry.Close()\n\n\t\tif hook := o.SwarmRegistry; hook != nil {\n\t\t\thook(ratelimitRegistry)\n\t\t}\n\n\t\tif o.ClusterRatelimitMaxGroupShards < 1 {\n\t\t\tlog.Warn(\"ClusterRatelimitMaxGroupShards must be positive, reset to 1\")\n\t\t\to.ClusterRatelimitMaxGroupShards = 1\n\t\t}\n\n\t\tfailClosedRatelimitPostProcessor = ratelimitfilters.NewFailClosedPostProcessor()\n\n\t\tprovider := ratelimitfilters.NewRatelimitProvider(ratelimitRegistry)\n\t\to.CustomFilters = append(o.CustomFilters,\n\t\t\tratelimitfilters.NewFailClosed(),\n\t\t\tratelimitfilters.NewClientRatelimit(provider),\n\t\t\tratelimitfilters.NewLocalRatelimit(provider),\n\t\t\tratelimitfilters.NewRatelimit(provider),\n\t\t\tratelimitfilters.NewShardedClusterRateLimit(provider, o.ClusterRatelimitMaxGroupShards),\n\t\t\tratelimitfilters.NewClusterClientRateLimit(provider),\n\t\t\tratelimitfilters.NewDisableRatelimit(provider),\n\t\t\tratelimitfilters.NewBackendRatelimit(),\n\t\t)\n\n\t\tif redisOptions != nil {\n\t\t\to.CustomFilters = append(o.CustomFilters, ratelimitfilters.NewClusterLeakyBucketRatelimit(ratelimitRegistry))\n\t\t}\n\t}\n\n\tif o.TLSMinVersion == 0 {\n\t\to.TLSMinVersion = tls.VersionTLS12\n\t}\n\n\tif o.EnableOAuth2GrantFlow /* explicitly enable grant flow */ {\n\t\toauthConfig := o.OAuthGrantConfig\n\t\tif oauthConfig == nil {\n\t\t\toauthConfig = o.OAuthGrantOptions()\n\t\t\to.OAuthGrantConfig = oauthConfig\n\n\t\t\tgrantSecrets := secrets.NewSecretPaths(o.CredentialsUpdateInterval)\n\t\t\tdefer grantSecrets.Close()\n\n\t\t\toauthConfig.SecretsProvider = grantSecrets\n\t\t\toauthConfig.Tracer = tracer\n\n\t\t\tif err := oauthConfig.Init(); err != nil {\n\t\t\t\tlog.Errorf(\"Failed to initialize oauth grant filter: %v.\", err)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\to.CustomFilters = append(o.CustomFilters,\n\t\t\toauthConfig.NewGrant(),\n\t\t\toauthConfig.NewGrantCallback(),\n\t\t\toauthConfig.NewGrantClaimsQuery(),\n\t\t\toauthConfig.NewGrantLogout(),\n\t\t)\n\t}\n\n\tvar opaRegistry *openpolicyagent.OpenPolicyAgentRegistry\n\tif o.EnableOpenPolicyAgent {\n\t\topaRegistry = openpolicyagent.NewOpenPolicyAgentRegistry(\n\t\t\topenpolicyagent.WithMaxRequestBodyBytes(o.OpenPolicyAgentMaxRequestBodySize),\n\t\t\topenpolicyagent.WithMaxMemoryBodyParsing(o.OpenPolicyAgentMaxMemoryBodyParsing),\n\t\t\topenpolicyagent.WithReadBodyBufferSize(o.OpenPolicyAgentRequestBodyBufferSize),\n\t\t\topenpolicyagent.WithCleanInterval(o.OpenPolicyAgentCleanerInterval),\n\t\t\topenpolicyagent.WithTracer(tracer))\n\t\tdefer opaRegistry.Close()\n\n\t\topts := make([]func(*openpolicyagent.OpenPolicyAgentInstanceConfig) error, 0)\n\t\topts = append(opts,\n\t\t\topenpolicyagent.WithConfigTemplateFile(o.OpenPolicyAgentConfigTemplate),\n\t\t\topenpolicyagent.WithStartupTimeout(o.OpenPolicyAgentStartupTimeout))\n\t\tif o.OpenPolicyAgentEnvoyMetadata != \"\" {\n\t\t\topts = append(opts, openpolicyagent.WithEnvoyMetadataFile(o.OpenPolicyAgentEnvoyMetadata))\n\t\t}\n\n\t\to.CustomFilters = append(o.CustomFilters,\n\t\t\topaauthorizerequest.NewOpaAuthorizeRequestSpec(opaRegistry, opts...),\n\t\t\topaauthorizerequest.NewOpaAuthorizeRequestWithBodySpec(opaRegistry, opts...),\n\t\t\topaserveresponse.NewOpaServeResponseSpec(opaRegistry, opts...),\n\t\t\topaserveresponse.NewOpaServeResponseWithReqBodySpec(opaRegistry, opts...),\n\t\t)\n\t}\n\n\tif len(o.CompressEncodings) > 0 {\n\t\tcompress, err := builtin.NewCompressWithOptions(builtin.CompressOptions{Encodings: o.CompressEncodings})\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Failed to create compress filter: %v.\", err)\n\t\t\treturn err\n\t\t}\n\t\to.CustomFilters = append(o.CustomFilters, compress)\n\t}\n\n\tlua, err := script.NewLuaScriptWithOptions(script.LuaOptions{\n\t\tModules: o.LuaModules,\n\t\tSources: o.LuaSources,\n\t})\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to create lua filter: %v.\", err)\n\t\treturn err\n\t}\n\to.CustomFilters = append(o.CustomFilters, lua)\n\n\t// create routing\n\t// create the proxy instance\n\tvar mo routing.MatchingOptions\n\tif o.IgnoreTrailingSlash {\n\t\tmo = routing.IgnoreTrailingSlash\n\t}\n\n\t// ensure a non-zero poll timeout\n\tif o.SourcePollTimeout <= 0 {\n\t\to.SourcePollTimeout = defaultSourcePollTimeout\n\t}\n\n\t// check for dev mode, and set update buffer of the routes\n\tupdateBuffer := defaultRoutingUpdateBuffer\n\tif o.DevMode {\n\t\tupdateBuffer = 0\n\t}\n\n\t// include bundled custom predicates\n\to.CustomPredicates = append(o.CustomPredicates,\n\t\tsource.New(),\n\t\tsource.NewFromLast(),\n\t\tsource.NewClientIP(),\n\t\tinterval.NewBetween(),\n\t\tinterval.NewBefore(),\n\t\tinterval.NewAfter(),\n\t\tcron.New(),\n\t\tcookie.New(),\n\t\tquery.New(),\n\t\ttraffic.New(),\n\t\ttraffic.NewSegment(),\n\t\tprimitive.NewTrue(),\n\t\tprimitive.NewFalse(),\n\t\tprimitive.NewShutdown(),\n\t\tpauth.NewJWTPayloadAllKV(),\n\t\tpauth.NewJWTPayloadAnyKV(),\n\t\tpauth.NewJWTPayloadAllKVRegexp(),\n\t\tpauth.NewJWTPayloadAnyKVRegexp(),\n\t\tpauth.NewHeaderSHA256(),\n\t\tmethods.New(),\n\t\ttee.New(),\n\t\tforwarded.NewForwardedHost(),\n\t\tforwarded.NewForwardedProto(),\n\t\thost.NewAny(),\n\t\tcontent.NewContentLengthBetween(),\n\t)\n\n\t// provide default value for wrapper if not defined\n\tif o.CustomHttpHandlerWrap == nil {\n\t\to.CustomHttpHandlerWrap = func(original http.Handler) http.Handler {\n\t\t\treturn original\n\t\t}\n\t}\n\n\tschedulerRegistry := scheduler.RegistryWith(scheduler.Options{\n\t\tMetrics:                mtr,\n\t\tEnableRouteFIFOMetrics: o.EnableRouteFIFOMetrics,\n\t\tEnableRouteLIFOMetrics: o.EnableRouteLIFOMetrics,\n\t})\n\tdefer schedulerRegistry.Close()\n\n\tpassiveHealthCheckEnabled, passiveHealthCheck, err := proxy.InitPassiveHealthChecker(o.PassiveHealthCheck)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// create a routing engine\n\tendpointRegistry := routing.NewEndpointRegistry(routing.RegistryOptions{\n\t\tPassiveHealthCheckEnabled:     passiveHealthCheckEnabled,\n\t\tStatsResetPeriod:              passiveHealthCheck.Period,\n\t\tMinRequests:                   passiveHealthCheck.MinRequests,\n\t\tMinHealthCheckDropProbability: passiveHealthCheck.MinDropProbability,\n\t\tMaxHealthCheckDropProbability: passiveHealthCheck.MaxDropProbability,\n\t})\n\tro := routing.Options{\n\t\tFilterRegistry:  o.filterRegistry(),\n\t\tMatchingOptions: mo,\n\t\tPollTimeout:     o.SourcePollTimeout,\n\t\tDataClients:     dataClients,\n\t\tPredicates:      o.CustomPredicates,\n\t\tUpdateBuffer:    updateBuffer,\n\t\tSuppressLogs:    o.SuppressRouteUpdateLogs,\n\t\tPostProcessors: []routing.PostProcessor{\n\t\t\tloadbalancer.NewAlgorithmProvider(),\n\t\t\tendpointRegistry,\n\t\t\tschedulerRegistry,\n\t\t\tbuiltin.NewRouteCreationMetrics(mtr),\n\t\t\tfadein.NewPostProcessor(fadein.PostProcessorOptions{EndpointRegistry: endpointRegistry}),\n\t\t\tadmissionControlSpec.PostProcessor(),\n\t\t\tbuiltin.CommentPostProcessor{},\n\t\t},\n\t\tSignalFirstLoad: o.WaitFirstRouteLoad,\n\t}\n\n\tif failClosedRatelimitPostProcessor != nil {\n\t\tro.PostProcessors = append(ro.PostProcessors, failClosedRatelimitPostProcessor)\n\t}\n\n\tif o.DefaultFilters != nil {\n\t\tro.PreProcessors = append(ro.PreProcessors, o.DefaultFilters)\n\t}\n\n\tif o.CloneRoute != nil {\n\t\tfor _, cr := range o.CloneRoute {\n\t\t\tro.PreProcessors = append(ro.PreProcessors, cr)\n\t\t}\n\t}\n\n\tif o.EditRoute != nil {\n\t\tfor _, er := range o.EditRoute {\n\t\t\tro.PreProcessors = append(ro.PreProcessors, er)\n\t\t}\n\t}\n\n\tro.PreProcessors = append(ro.PreProcessors, schedulerRegistry.PreProcessor())\n\n\tif o.EnableOAuth2GrantFlow /* explicitly enable grant flow when callback route was not disabled */ {\n\t\tro.PreProcessors = append(ro.PreProcessors, o.OAuthGrantConfig.NewGrantPreprocessor())\n\t}\n\n\tif o.EnableOpenPolicyAgent {\n\t\tro.PostProcessors = append(ro.PostProcessors, opaRegistry)\n\t}\n\n\tif o.CustomRoutingPreProcessors != nil {\n\t\tro.PreProcessors = append(ro.PreProcessors, o.CustomRoutingPreProcessors...)\n\t}\n\n\tro.PreProcessors = append(ro.PreProcessors, admissionControlSpec.PreProcessor())\n\n\tro.Metrics = mtr\n\n\trouting := routing.New(ro)\n\tdefer routing.Close()\n\n\tproxyFlags := proxy.Flags(o.ProxyOptions) | o.ProxyFlags\n\tproxyParams := proxy.Params{\n\t\tRouting:                    routing,\n\t\tFlags:                      proxyFlags,\n\t\tMetrics:                    mtr,\n\t\tPriorityRoutes:             o.PriorityRoutes,\n\t\tIdleConnectionsPerHost:     o.IdleConnectionsPerHost,\n\t\tCloseIdleConnsPeriod:       o.CloseIdleConnsPeriod,\n\t\tFlushInterval:              o.BackendFlushInterval,\n\t\tExperimentalUpgrade:        o.ExperimentalUpgrade,\n\t\tExperimentalUpgradeAudit:   o.ExperimentalUpgradeAudit,\n\t\tMaxLoopbacks:               o.MaxLoopbacks,\n\t\tDefaultHTTPStatus:          o.DefaultHTTPStatus,\n\t\tTimeout:                    o.TimeoutBackend,\n\t\tResponseHeaderTimeout:      o.ResponseHeaderTimeoutBackend,\n\t\tExpectContinueTimeout:      o.ExpectContinueTimeoutBackend,\n\t\tKeepAlive:                  o.KeepAliveBackend,\n\t\tDualStack:                  o.DualStackBackend,\n\t\tTLSHandshakeTimeout:        o.TLSHandshakeTimeoutBackend,\n\t\tMaxIdleConns:               o.MaxIdleConnsBackend,\n\t\tDisableHTTPKeepalives:      o.DisableHTTPKeepalives,\n\t\tAccessLogDisabled:          o.AccessLogDisabled,\n\t\tClientTLS:                  o.ClientTLS,\n\t\tCustomHttpRoundTripperWrap: o.CustomHttpRoundTripperWrap,\n\t\tRateLimiters:               ratelimitRegistry,\n\t\tEndpointRegistry:           endpointRegistry,\n\t\tEnablePassiveHealthCheck:   passiveHealthCheckEnabled,\n\t\tPassiveHealthCheck:         passiveHealthCheck,\n\t}\n\n\tif o.EnableBreakers || len(o.BreakerSettings) > 0 {\n\t\tproxyParams.CircuitBreakers = circuit.NewRegistry(o.BreakerSettings...)\n\t}\n\n\tif o.DebugListener != \"\" {\n\t\tdo := proxyParams\n\t\tdo.Flags |= proxy.Debug\n\t\tdbg := proxy.WithParams(do)\n\t\tlog.Infof(\"debug listener on %v\", o.DebugListener)\n\t\tgo func() { http.ListenAndServe(o.DebugListener, dbg) /* #nosec */ }()\n\t}\n\n\t// init support endpoints\n\tsupportListener := o.SupportListener\n\n\t// Backward compatibility\n\tif supportListener == \"\" {\n\t\tsupportListener = o.MetricsListener\n\t}\n\n\tif supportListener != \"\" {\n\t\tmux := http.NewServeMux()\n\t\tmux.Handle(\"/routes\", routing)\n\t\tmux.Handle(\"/routes/\", routing)\n\n\t\tmetricsHandler := metrics.NewHandler(mtrOpts, mtr)\n\t\tmux.Handle(\"/metrics\", metricsHandler)\n\t\tmux.Handle(\"/metrics/\", metricsHandler)\n\t\tmux.Handle(\"/debug/pprof\", metricsHandler)\n\t\tmux.Handle(\"/debug/pprof/\", metricsHandler)\n\n\t\tlog.Infof(\"support listener on %s\", supportListener)\n\t\tgo func() {\n\t\t\t/* #nosec */\n\t\t\tif err := http.ListenAndServe(supportListener, mux); err != nil {\n\t\t\t\tlog.Errorf(\"Failed to start supportListener on %s: %v\", supportListener, err)\n\t\t\t}\n\t\t}()\n\t} else {\n\t\tlog.Infoln(\"Metrics are disabled\")\n\t}\n\n\tproxyParams.OpenTracing = &proxy.OpenTracingParams{\n\t\tTracer:             tracer,\n\t\tInitialSpan:        o.OpenTracingInitialSpan,\n\t\tExcludeTags:        o.OpenTracingExcludedProxyTags,\n\t\tDisableFilterSpans: o.OpenTracingDisableFilterSpans,\n\t\tLogFilterEvents:    o.OpenTracingLogFilterLifecycleEvents,\n\t\tLogStreamEvents:    o.OpenTracingLogStreamEvents,\n\t}\n\n\t// create the proxy\n\tproxy := proxy.WithParams(proxyParams)\n\tdefer proxy.Close()\n\n\tfor _, startupCheckURL := range o.StatusChecks {\n\t\tfor {\n\t\t\t/* #nosec */\n\t\t\tresp, err := http.Get(startupCheckURL)\n\t\t\tif err != nil {\n\t\t\t\tlog.Infof(\"%s unhealthy\", startupCheckURL)\n\t\t\t\ttime.Sleep(1 * time.Second)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tresp.Body.Close()\n\t\t\tif resp.StatusCode == 200 {\n\t\t\t\tlog.Infof(\"%s healthy\", startupCheckURL)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tlog.Infof(\"%s unhealthy\", startupCheckURL)\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t}\n\n\t// wait for the first route configuration to be loaded if enabled:\n\t<-routing.FirstLoad()\n\tlog.Info(\"Dataclients are updated once, first load complete\")\n\n\treturn listenAndServeQuit(o.CustomHttpHandlerWrap(proxy), &o, sig, idleConnsCH, mtr, cr)\n}\n\n// Run skipper.\nfunc Run(o Options) error {\n\treturn run(o, nil, nil)\n}\n"
        },
        {
          "name": "skipper_test.go",
          "type": "blob",
          "size": 16.2890625,
          "content": "package skipper\n\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\tstdlibhttptest \"net/http/httptest\"\n\t\"os\"\n\t\"syscall\"\n\t\"testing\"\n\t\"time\"\n\n\tlog \"github.com/sirupsen/logrus\"\n\n\t\"github.com/zalando/skipper/dataclients/routestring\"\n\t\"github.com/zalando/skipper/filters\"\n\tflog \"github.com/zalando/skipper/filters/accesslog\"\n\t\"github.com/zalando/skipper/filters/auth\"\n\t\"github.com/zalando/skipper/filters/builtin\"\n\tfscheduler \"github.com/zalando/skipper/filters/scheduler\"\n\t\"github.com/zalando/skipper/loadbalancer\"\n\t\"github.com/zalando/skipper/metrics/metricstest\"\n\t\"github.com/zalando/skipper/proxy\"\n\t\"github.com/zalando/skipper/ratelimit\"\n\t\"github.com/zalando/skipper/routing\"\n\t\"github.com/zalando/skipper/scheduler\"\n\t\"github.com/zalando/skipper/secrets/certregistry\"\n\t\"github.com/zalando/skipper/tracing/tracingtest\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nconst (\n\tlistenDelay   = 15 * time.Millisecond\n\tlistenTimeout = 9 * listenDelay\n)\n\nfunc listenAndServe(proxy http.Handler, o *Options) error {\n\treturn listenAndServeQuit(proxy, o, nil, nil, nil, nil)\n}\n\nfunc testListener() bool {\n\tfor _, a := range os.Args {\n\t\tif a == \"listener\" {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\nfunc waitConn(req func() (*http.Response, error)) (*http.Response, error) {\n\tto := time.After(listenTimeout)\n\tfor {\n\t\trsp, err := req()\n\t\tif err == nil {\n\t\t\treturn rsp, nil\n\t\t}\n\n\t\tselect {\n\t\tcase <-to:\n\t\t\treturn nil, err\n\t\tdefault:\n\t\t\ttime.Sleep(listenDelay)\n\t\t}\n\t}\n}\n\nfunc waitConnGet(url string) (*http.Response, error) {\n\treturn waitConn(func() (*http.Response, error) {\n\t\treturn (&http.Client{\n\t\t\tTransport: &http.Transport{\n\t\t\t\tTLSClientConfig: &tls.Config{\n\t\t\t\t\tInsecureSkipVerify: true}}}).Get(url)\n\t})\n}\n\nfunc findAddress() (string, error) {\n\tl, err := net.ListenTCP(\"tcp6\", &net.TCPAddr{})\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tdefer l.Close()\n\treturn l.Addr().String(), nil\n}\n\nfunc TestOptionsFilterRegistry(t *testing.T) {\n\tt.Run(\"custom filters\", func(t *testing.T) {\n\t\to := &Options{\n\t\t\tCustomFilters: []filters.Spec{auth.NewBearerInjector(nil)},\n\t\t}\n\t\tfr := o.filterRegistry()\n\n\t\tassert.Contains(t, fr, filters.SetRequestHeaderName)\n\t\tassert.Contains(t, fr, filters.LuaName)\n\t\tassert.Contains(t, fr, filters.BearerInjectorName)\n\t})\n\n\tt.Run(\"disabled filters\", func(t *testing.T) {\n\t\to := &Options{\n\t\t\tCustomFilters:   []filters.Spec{auth.NewBearerInjector(nil)},\n\t\t\tDisabledFilters: []string{filters.LuaName, filters.BearerInjectorName},\n\t\t}\n\t\tfr := o.filterRegistry()\n\n\t\tassert.Contains(t, fr, filters.SetRequestHeaderName)\n\t\tassert.NotContains(t, fr, filters.LuaName)\n\t\tassert.NotContains(t, fr, filters.BearerInjectorName)\n\t})\n\n\tt.Run(\"register filters\", func(t *testing.T) {\n\t\to := &Options{\n\t\t\tCustomFilters: []filters.Spec{auth.NewBearerInjector(nil)},\n\t\t\tRegisterFilters: func(registry filters.Registry) {\n\t\t\t\tregistry.Register(auth.NewWebhook(0))\n\n\t\t\t\t// Check that built-in and CustomFilters are already registered\n\t\t\t\tassert.Contains(t, registry, filters.SetRequestHeaderName)\n\t\t\t\tassert.Contains(t, registry, filters.BearerInjectorName)\n\t\t\t},\n\t\t}\n\t\tfr := o.filterRegistry()\n\n\t\tassert.Contains(t, fr, filters.SetRequestHeaderName)\n\t\tassert.Contains(t, fr, filters.BearerInjectorName)\n\t\tassert.Contains(t, fr, filters.WebhookName)\n\t})\n}\n\nfunc TestOptionsOpenTracingTracerInstanceOverridesOpenTracing(t *testing.T) {\n\ttracer := &tracingtest.Tracer{}\n\to := Options{\n\t\tOpenTracingTracer: tracer,\n\t\tOpenTracing:       []string{\"noop\"},\n\t}\n\n\ttr, err := o.openTracingTracerInstance()\n\tassert.NoError(t, err)\n\tassert.Same(t, tracer, tr)\n}\n\nfunc TestOptionsOpenTracingTracerInstanceFallbacksToOpenTracingWhenTracerIsNil(t *testing.T) {\n\to := Options{\n\t\tOpenTracing: []string{\"noop\"},\n\t}\n\n\ttr, err := o.openTracingTracerInstance()\n\tassert.NoError(t, err)\n\tassert.NotNil(t, tr)\n}\n\nfunc TestOptionsOpenTracingTracerInstanceReturnsErrorWhenNoTracerConfigIsSpecified(t *testing.T) {\n\to := Options{}\n\n\ttr, err := o.openTracingTracerInstance()\n\tassert.Error(t, err)\n\tassert.Nil(t, tr)\n}\n\nfunc TestOptionsTLSConfig(t *testing.T) {\n\tcr := certregistry.NewCertRegistry()\n\tproxyTLS := &tls.Config{}\n\n\tcert, err := tls.LoadX509KeyPair(\"fixtures/test.crt\", \"fixtures/test.key\")\n\trequire.NoError(t, err)\n\n\tcert2, err := tls.LoadX509KeyPair(\"fixtures/test2.crt\", \"fixtures/test2.key\")\n\trequire.NoError(t, err)\n\n\t// empty without registry\n\to := &Options{}\n\tc, err := o.tlsConfig(nil)\n\trequire.NoError(t, err)\n\trequire.Nil(t, c)\n\n\t// empty with registry\n\to = &Options{}\n\tc, err = o.tlsConfig(cr)\n\trequire.NoError(t, err)\n\trequire.NotNil(t, c.GetCertificate)\n\n\t// proxy tls config\n\to = &Options{ProxyTLS: proxyTLS}\n\tc, err = o.tlsConfig(cr)\n\trequire.NoError(t, err)\n\trequire.Same(t, proxyTLS, c)\n\n\t// proxy tls config priority\n\to = &Options{ProxyTLS: proxyTLS, CertPathTLS: \"fixtures/test.crt\", KeyPathTLS: \"fixtures/test.key\"}\n\tc, err = o.tlsConfig(cr)\n\trequire.NoError(t, err)\n\trequire.Same(t, proxyTLS, c)\n\n\t// cert key path\n\to = &Options{TLSMinVersion: tls.VersionTLS12, CertPathTLS: \"fixtures/test.crt\", KeyPathTLS: \"fixtures/test.key\"}\n\tc, err = o.tlsConfig(cr)\n\trequire.NoError(t, err)\n\trequire.Equal(t, uint16(tls.VersionTLS12), c.MinVersion)\n\trequire.Equal(t, []tls.Certificate{cert}, c.Certificates)\n\n\t// multiple cert key paths\n\to = &Options{TLSMinVersion: tls.VersionTLS13, CertPathTLS: \"fixtures/test.crt,fixtures/test2.crt\", KeyPathTLS: \"fixtures/test.key,fixtures/test2.key\"}\n\tc, err = o.tlsConfig(cr)\n\trequire.NoError(t, err)\n\trequire.Equal(t, uint16(tls.VersionTLS13), c.MinVersion)\n\trequire.Equal(t, []tls.Certificate{cert, cert2}, c.Certificates)\n\n\t// TLS Cipher Suites\n\to = &Options{CipherSuites: []uint16{1}}\n\tc, err = o.tlsConfig(cr)\n\trequire.NoError(t, err)\n\tassert.Equal(t, len(c.CipherSuites), 1)\n\n}\n\nfunc TestOptionsTLSConfigInvalidPaths(t *testing.T) {\n\tcr := certregistry.NewCertRegistry()\n\n\tfor _, tt := range []struct {\n\t\tname    string\n\t\toptions *Options\n\t}{\n\t\t{\"missing cert path\", &Options{KeyPathTLS: \"fixtures/test.key\"}},\n\t\t{\"missing key path\", &Options{CertPathTLS: \"fixtures/test.crt\"}},\n\t\t{\"wrong cert path\", &Options{CertPathTLS: \"fixtures/notFound.crt\", KeyPathTLS: \"fixtures/test.key\"}},\n\t\t{\"wrong key path\", &Options{CertPathTLS: \"fixtures/test.crt\", KeyPathTLS: \"fixtures/notFound.key\"}},\n\t\t{\"cert key mismatch\", &Options{CertPathTLS: \"fixtures/test.crt\", KeyPathTLS: \"fixtures/test2.key\"}},\n\t\t{\"multiple cert key count mismatch\", &Options{CertPathTLS: \"fixtures/test.crt,fixtures/test2.crt\", KeyPathTLS: \"fixtures/test.key\"}},\n\t\t{\"multiple cert key mismatch\", &Options{CertPathTLS: \"fixtures/test.crt,fixtures/test2.crt\", KeyPathTLS: \"fixtures/test2.key,fixtures/test.key\"}},\n\t} {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\t_, err := tt.options.tlsConfig(cr)\n\t\t\tt.Logf(\"tlsConfig error: %v\", err)\n\t\t\trequire.Error(t, err)\n\t\t})\n\t}\n}\n\n// to run this test, set `-args listener` for the test command\nfunc TestHTTPSServer(t *testing.T) {\n\t// TODO: figure why sometimes cannot connect\n\tif !testListener() {\n\t\tt.Skip()\n\t}\n\n\ta, err := findAddress()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\ti, err := findAddress()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\to := Options{\n\t\tAddress:         a,\n\t\tInsecureAddress: i,\n\t\tCertPathTLS:     \"fixtures/test.crt\",\n\t\tKeyPathTLS:      \"fixtures/test.key\",\n\t}\n\n\trt := routing.New(routing.Options{\n\t\tFilterRegistry: builtin.MakeRegistry(),\n\t\tDataClients:    []routing.DataClient{}})\n\tdefer rt.Close()\n\n\tproxy := proxy.New(rt, proxy.OptionsNone)\n\tdefer proxy.Close()\n\tgo listenAndServe(proxy, &o)\n\n\tr, err := waitConnGet(\"https://\" + o.Address)\n\tif r != nil {\n\t\tdefer r.Body.Close()\n\t}\n\tif err != nil {\n\t\tt.Fatalf(\"Cannot connect to the local server for testing: %s \", err.Error())\n\t}\n\tif r.StatusCode != 404 {\n\t\tt.Fatalf(\"Status code should be 404, instead got: %d\\n\", r.StatusCode)\n\t}\n\t_, err = io.ReadAll(r.Body)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to stream response body: %v\", err)\n\t}\n\n\tr, err = waitConnGet(\"http://\" + o.InsecureAddress)\n\tif r != nil {\n\t\tdefer r.Body.Close()\n\t}\n\tif err != nil {\n\t\tt.Fatalf(\"Cannot connect to the local server for testing: %s \", err.Error())\n\t}\n\tif r.StatusCode != 404 {\n\t\tt.Fatalf(\"Status code should be 404, instead got: %d\\n\", r.StatusCode)\n\t}\n\t_, err = io.ReadAll(r.Body)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to stream response body: %v\", err)\n\t}\n}\n\n// to run this test, set `-args listener` for the test command\nfunc TestHTTPServer(t *testing.T) {\n\t// TODO: figure why sometimes cannot connect\n\tif !testListener() {\n\t\tt.Skip()\n\t}\n\n\ta, err := findAddress()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\to := Options{Address: a}\n\n\trt := routing.New(routing.Options{\n\t\tFilterRegistry: builtin.MakeRegistry(),\n\t\tDataClients:    []routing.DataClient{}})\n\tdefer rt.Close()\n\n\tproxy := proxy.New(rt, proxy.OptionsNone)\n\tdefer proxy.Close()\n\tgo listenAndServe(proxy, &o)\n\tr, err := waitConnGet(\"http://\" + o.Address)\n\tif r != nil {\n\t\tdefer r.Body.Close()\n\t}\n\tif err != nil {\n\t\tt.Fatalf(\"Cannot connect to the local server for testing: %s \", err.Error())\n\t}\n\tif r.StatusCode != 404 {\n\t\tt.Fatalf(\"Status code should be 404, instead got: %d\\n\", r.StatusCode)\n\t}\n\t_, err = io.ReadAll(r.Body)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to stream response body: %v\", err)\n\t}\n}\n\nfunc TestServerShutdownHTTP(t *testing.T) {\n\to := &Options{}\n\ttestServerShutdown(t, o, \"http\")\n}\n\nfunc TestServerShutdownHTTPS(t *testing.T) {\n\to := &Options{\n\t\tCertPathTLS: \"fixtures/test.crt\",\n\t\tKeyPathTLS:  \"fixtures/test.key\",\n\t}\n\ttestServerShutdown(t, o, \"https\")\n}\n\ntype responseOrError struct {\n\trsp *http.Response\n\terr error\n}\n\nfunc testServerShutdown(t *testing.T, o *Options, scheme string) {\n\tconst shutdownDelay = 1 * time.Second\n\n\taddress, err := findAddress()\n\trequire.NoError(t, err)\n\n\to.Address, o.WaitForHealthcheckInterval = address, shutdownDelay\n\ttestUrl := scheme + \"://\" + address\n\n\t// simulate a backend that got a request and should be handled correctly\n\tdc, err := routestring.New(`r0: * -> latency(\"3s\") -> inlineContent(\"OK\") -> status(200) -> <shunt>`)\n\trequire.NoError(t, err)\n\n\trt := routing.New(routing.Options{\n\t\tFilterRegistry: builtin.MakeRegistry(),\n\t\tDataClients:    []routing.DataClient{dc},\n\t})\n\tdefer rt.Close()\n\n\tproxy := proxy.New(rt, proxy.OptionsNone)\n\tdefer proxy.Close()\n\n\tsigs := make(chan os.Signal, 1)\n\tdone := make(chan struct{})\n\tgo func() {\n\t\terr := listenAndServeQuit(proxy, o, sigs, done, nil, nil)\n\t\trequire.NoError(t, err)\n\t}()\n\n\t// initiate shutdown\n\tsigs <- syscall.SIGTERM\n\n\ttime.Sleep(shutdownDelay / 2)\n\n\tt.Logf(\"Make request in parallel before shutdown started\")\n\n\troeCh := make(chan responseOrError)\n\tgo func() {\n\t\trsp, err := waitConnGet(testUrl)\n\t\troeCh <- responseOrError{rsp, err}\n\t}()\n\n\ttime.Sleep(shutdownDelay)\n\n\tt.Logf(\"We are 1.5x past the shutdown delay, so shutdown should have been started\")\n\n\tselect {\n\tcase <-roeCh:\n\t\tt.Fatalf(\"Request should still be in progress after shutdown started\")\n\tdefault:\n\t\t_, err = waitConnGet(testUrl)\n\t\tassert.ErrorContains(t, err, \"connection refused\", \"Another request should fail after shutdown started\")\n\t}\n\n\troe := <-roeCh\n\trequire.NoError(t, roe.err, \"Request must succeed\")\n\tdefer roe.rsp.Body.Close()\n\n\tbody, err := io.ReadAll(roe.rsp.Body)\n\trequire.NoError(t, err)\n\tassert.Equal(t, \"OK\", string(body))\n\n\tselect {\n\tcase <-done:\n\tcase <-time.After(1 * time.Second):\n\t\tt.Errorf(\"Shutdown takes too long after request is finished\")\n\t}\n}\n\ntype (\n\tcustomRatelimitSpec   struct{ registry *ratelimit.Registry }\n\tcustomRatelimitFilter struct{}\n)\n\nfunc (s *customRatelimitSpec) Name() string { return \"customRatelimit\" }\nfunc (s *customRatelimitSpec) CreateFilter(config []interface{}) (filters.Filter, error) {\n\tlog.Infof(\"Registry: %v\", s.registry)\n\treturn &customRatelimitFilter{}, nil\n}\nfunc (f *customRatelimitFilter) Request(ctx filters.FilterContext)  {}\nfunc (f *customRatelimitFilter) Response(ctx filters.FilterContext) {}\n\nfunc Example_ratelimitRegistryBinding() {\n\ts := &customRatelimitSpec{}\n\n\to := Options{\n\t\tAddress:            \":9090\",\n\t\tInlineRoutes:       `* -> customRatelimit() -> <shunt>`,\n\t\tEnableRatelimiters: true,\n\t\tEnableSwarm:        true,\n\t\tSwarmRedisURLs:     []string{\":6379\"},\n\t\tCustomFilters:      []filters.Spec{s},\n\t\tSwarmRegistry: func(registry *ratelimit.Registry) {\n\t\t\ts.registry = registry\n\t\t},\n\t}\n\n\tlog.Fatal(Run(o))\n\t// Example functions without output comments are compiled but not executed\n}\n\nfunc createFilterRegistry(specs ...filters.Spec) filters.Registry {\n\tfr := make(filters.Registry)\n\tfor _, spec := range specs {\n\t\tfr.Register(spec)\n\t}\n\treturn fr\n}\n\nfunc createRoutesFile(route string) (string, error) {\n\tfd, err := os.CreateTemp(\"/tmp\", \"test_data_clients_\")\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"Failed to create tempfile: %w\", err)\n\t}\n\t_, err = fd.WriteString(route)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"Failed to write tempfile: %w\", err)\n\t}\n\n\tfilePath := fd.Name()\n\terr = fd.Close()\n\n\treturn filePath, err\n}\n\nfunc TestDataClients(t *testing.T) {\n\t// routesfile\n\troutesFileStatus := 201\n\trouteStringFmt := `r%d: Path(\"/routes-file\") -> status(%d) -> inlineContent(\"Got it\") -> <shunt>;`\n\tfilePath, err := createRoutesFile(fmt.Sprintf(routeStringFmt, routesFileStatus, routesFileStatus))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to create routes file: %v\", err)\n\t}\n\tdefer os.Remove(filePath)\n\n\t// application log\n\tfdApp, err := os.CreateTemp(\"/tmp\", \"app_log_\")\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to create tempfile: %v\", err)\n\t}\n\tdefer fdApp.Close()\n\n\t// access log\n\tfdAccess, err := os.CreateTemp(\"/tmp\", \"access_log_\")\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to create tempfile: %v\", err)\n\t}\n\tdefer fdAccess.Close()\n\n\t// run skipper proxy that we want to test\n\to := Options{\n\t\tAddress:                         \":8090\",\n\t\tEnableRatelimiters:              true,\n\t\tSourcePollTimeout:               1500 * time.Millisecond,\n\t\tWaitFirstRouteLoad:              true,\n\t\tSuppressRouteUpdateLogs:         false,\n\t\tMetricsListener:                 \":8091\",\n\t\tRoutesFile:                      filePath,\n\t\tInlineRoutes:                    `healthz: Path(\"/healthz\") -> status(200) -> inlineContent(\"OK\") -> <shunt>;`,\n\t\tApplicationLogOutput:            fdApp.Name(),\n\t\tAccessLogOutput:                 fdAccess.Name(),\n\t\tAccessLogDisabled:               false,\n\t\tMaxTCPListenerConcurrency:       0,\n\t\tExpectedBytesPerRequest:         1024,\n\t\tReadHeaderTimeoutServer:         0,\n\t\tReadTimeoutServer:               1 * time.Second,\n\t\tMetricsFlavours:                 []string{\"codahale\"},\n\t\tEnablePrometheusMetrics:         true,\n\t\tLoadBalancerHealthCheckInterval: 3 * time.Second,\n\t\tOAuthTokeninfoURL:               \"http://127.0.0.1:12345\",\n\t\tCredentialsPaths:                []string{\"/does-not-exist\"},\n\t\tCompressEncodings:               []string{\"gzip\"},\n\t\tIgnoreTrailingSlash:             true,\n\t\tEnableBreakers:                  true,\n\t\tDebugListener:                   \":8092\",\n\t\tStatusChecks:                    []string{\"http://127.0.0.1:8091/metrics\", \"http://127.0.0.1:8092\"},\n\t}\n\n\tdcs, err := createDataClients(o, nil)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to createDataclients: %v\", err)\n\t}\n\n\tfr := createFilterRegistry(\n\t\tfscheduler.NewFifo(),\n\t\tflog.NewEnableAccessLog(),\n\t\tbuiltin.NewStatus(),\n\t\tbuiltin.NewInlineContent(),\n\t)\n\tmetrics := &metricstest.MockMetrics{}\n\treg := scheduler.RegistryWith(scheduler.Options{\n\t\tMetrics:                metrics,\n\t\tEnableRouteFIFOMetrics: true,\n\t})\n\tdefer reg.Close()\n\n\tendpointRegistry := routing.NewEndpointRegistry(routing.RegistryOptions{})\n\tdefer endpointRegistry.Close()\n\n\t// create LB in front of apiservers to be able to switch the data served by apiserver\n\tro := routing.Options{\n\t\tSignalFirstLoad: true,\n\t\tFilterRegistry:  fr,\n\t\tDataClients:     dcs, //[]routing.DataClient{dc},\n\t\tPostProcessors: []routing.PostProcessor{\n\t\t\tloadbalancer.NewAlgorithmProvider(),\n\t\t\tendpointRegistry,\n\t\t\treg,\n\t\t},\n\t\tSuppressLogs: true,\n\t}\n\trt := routing.New(ro)\n\tdefer rt.Close()\n\t<-rt.FirstLoad()\n\ttracer := &tracingtest.Tracer{}\n\tpr := proxy.WithParams(proxy.Params{\n\t\tRouting:     rt,\n\t\tOpenTracing: &proxy.OpenTracingParams{Tracer: tracer},\n\t})\n\tdefer pr.Close()\n\tlb := stdlibhttptest.NewServer(pr)\n\tdefer lb.Close()\n\n\tsigs := make(chan os.Signal, 1)\n\tgo run(o, sigs, nil)\n\n\tfor i := 0; i < 10; i++ {\n\t\tt.Logf(\"Waiting for proxy being ready\")\n\n\t\trsp, _ := http.DefaultClient.Get(\"http://localhost:8090/healthz\")\n\t\tif rsp != nil && rsp.StatusCode == 200 {\n\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\n\trsp, err := http.DefaultClient.Get(\"http://localhost:8090/routes-file\")\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to GET routes file route: %v\", err)\n\t}\n\n\tif rsp.StatusCode != routesFileStatus {\n\t\tt.Fatalf(\"Failed to GET the status of routes file route: %d\", rsp.StatusCode)\n\t}\n\n\tsigs <- syscall.SIGTERM\n}\n"
        },
        {
          "name": "skptesting",
          "type": "tree",
          "content": null
        },
        {
          "name": "swarm",
          "type": "tree",
          "content": null
        },
        {
          "name": "tracing",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}