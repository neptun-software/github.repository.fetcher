{
  "metadata": {
    "timestamp": 1736566828110,
    "page": 396,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sourcegraph/checkup",
      "stars": 3420,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".drone.yml",
          "type": "blob",
          "size": 0.75390625,
          "content": "workspace:\n  base: /checkup\n\nkind: pipeline\nname: checkup\n\nsteps:\n- name: test-mysql\n  image: golang:1.14\n  pull: always\n  commands:\n    - make test-mysql\n    - make build-mysql\n\n- name: test-postgres\n  image: golang:1.14\n  pull: always\n  commands:\n    - make test-postgres\n    - make build-postgres\n\n- name: test-sqlite3\n  image: golang:1.14\n  pull: always\n  commands:\n    - make test-sqlite3\n    - make build-sqlite3\n\nservices:\n- name: postgres-test-db\n  image: postgres:12-alpine\n  environment:\n    POSTGRES_PASSWORD: test\n    POSTGRES_USER: test\n    POSTGRES_DB: test\n\n- name: mysql-test-db\n  pull: always\n  image: percona/percona-server:8.0.17\n  environment:\n    MYSQL_RANDOM_ROOT_PASSWORD: true\n    MYSQL_USER: test\n    MYSQL_PASSWORD: test\n    MYSQL_DATABASE: test\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.076171875,
          "content": "_gitignore/\n.DS_Store\ncheckup.json\nsrc/\npkg/\nbin/\nbuilds/\ndist/\nchecks/\n.envrc"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0234375,
          "content": "language: go\n\ngo:\n- 1.14"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.88671875,
          "content": "# How to Contribute\n\nThis Sourcegraph project is [MIT licensed](LICENSE) and accepts\ncontributions via GitHub pull requests. This document outlines some of\nthe conventions on development workflow, commit message formatting,\ncontact points and other resources to make it easier to get your\ncontribution accepted.\n\n# Certificate of Origin\n\nBy contributing to this project you agree to the [Developer Certificate of Origin\n(DCO)](https://developercertificate.org/). This document was created by the Linux Kernel community\nand is a simple statement that you, as a contributor, have the legal right to make the\ncontribution. See the [DCO](DCO) file for details.\n\n## Getting Started\n\nYou'll need Go 1.10 or newer installed.\n\n1. [Fork this repo](https://github.com/sourcegraph/checkup). This makes a copy of the code you can write to.\n2. If you don't already have this repo (sourcegraph/checkup.git) repo on your computer, get it with `go get github.com/sourcegraph/checkup/cmd/checkup`.\n3. Tell git that it can push the sourcegraph/checkup.git repo to your fork by adding a remote: `git remote add myfork https://github.com/you/checkup.git`\n4. Make your changes in the sourcegraph/checkup.git repo on your computer.\n5. Push your changes to your fork: `git push myfork`\n6. [Create a pull request](https://github.com/sourcegraph/checkup/pull/new/master) to merge your changes into sourcegraph/checkup @ master. (Click \"compare across forks\" and change the head fork.)\n\nYou can test your changes with `go run main.go` or `go build` if you want a binary plopped on disk. Use `go test -race ./...` from the root of the repo to run tests and make sure they pass!\n\n\n## Contribution Flow\n\nThis is a rough outline of what a contributor's workflow looks like:\n\n- Create a topic branch from where you want to base your work (usually master).\n- Make commits of logical units.\n- Make sure your commit messages are in the proper format (see below).\n- Push your changes to a topic branch in your fork of the repository.\n- Make sure the tests pass, and add any new tests as appropriate.\n- Submit a pull request to the original repository.\n\nThanks for your contributions!\n\n### Format of the Commit Message\n\nWe follow a rough convention for commit messages that is designed to answer two\nquestions: what changed and why. The subject line should feature the what and\nthe body of the commit should describe the why.\n\n```\nscripts: add the test-cluster command\n\nthis uses tmux to setup a test cluster that you can easily kill and\nstart for debugging.\n\nFixes #38\n```\n\nThe format can be described more formally as follows:\n\n```\n<subsystem>: <what changed>\n<BLANK LINE>\n<why this change was made>\n<BLANK LINE>\n<footer>\n```\n\nThe first line is the subject and should be no longer than 70 characters, the\nsecond line is always blank, and other lines should be wrapped at 80 characters.\nThis allows the message to be easier to read on Sourcegraph and GitHub as well\nas in various git tools.\n"
        },
        {
          "name": "DCO",
          "type": "blob",
          "size": 1.3876953125,
          "content": "Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3076171875,
          "content": "FROM golang:1.14-alpine as builder\n\nENV CGO_ENABLED=0\n\nCOPY . /app\nWORKDIR /app\nRUN apk --no-cache add make && make build\n\nFROM alpine:latest\n\nWORKDIR /app\n\nCOPY --from=builder /app/builds/checkup /usr/local/bin/checkup\n\nADD statuspage/ /app/statuspage\n\nUSER nobody\nEXPOSE 3000\n\nENTRYPOINT [\"checkup\"]\nCMD [\"serve\"]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2016 Sourcegraph\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.3935546875,
          "content": ".PHONY: all build fmt test docker\n\nall: build test\n\nDOCKER_IMAGE := checkup\n\nbuild: fmt\n\tgo build -o builds/ ./cmd/...\n\nbuild-%: TAG=$*\nbuild-%: fmt\n\tgo build -o builds/ -tags $(TAG) ./cmd/...\n\nfmt:\n\tmkdir -p builds/\n\tgo fmt ./...\n\tgo mod tidy\n\ntest:\n\tgo test -race -count=1 ./...\n\ntest-%: TAG=$*\ntest-%:\n\tgo test -tags $(TAG) -race -count=1 ./...\n\ndocker:\n\tdocker build --no-cache . -t $(DOCKER_IMAGE)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.583984375,
          "content": "<img src=\"https://i.imgur.com/UWhSoQj.png\" width=\"450\" alt=\"Checkup\">\n\n[![GoDoc](https://img.shields.io/badge/godoc-reference-blue.svg?style=flat-square)](https://godoc.org/github.com/sourcegraph/checkup) [![Sourcegraph](https://sourcegraph.com/github.com/sourcegraph/checkup/-/badge.svg)](https://sourcegraph.com/github.com/sourcegraph/checkup?badge)\n\n\n**Checkup is distributed, lock-free, self-hosted health checks and status pages, written in Go.**\n\n**It features an elegant, minimalistic CLI and an idiomatic Go library. They are completely interoperable and their configuration is beautifully symmetric.**\n\nCheckup was created by Matt Holt, author of the [Caddy web server](https://caddyserver.com). It is maintained and sponsored by [Sourcegraph](https://sourcegraph.com). If you'd like to dive into the source, you can [start here](https://sourcegraph.com/github.com/sourcegraph/checkup/-/def/GoPackage/github.com/sourcegraph/checkup/-/Checkup).\n\nThis tool is a work-in-progress. Please use liberally (with discretion) and report any bugs!\n\n## Recent changes\n\nDue to recent development, some breaking changes have been introduced:\n\n- providers: the json config field `provider` was renamed to `type` for consistency,\n- notifiers: the json config field `name` was renamed to `type` for consistency,\n- sql: by default the sqlite storage engine is disabled (needs build with `-tags sql` to enable),\n- sql: storage engine is deprecated in favor of new storage engines postgres, mysql, sqlite3\n- mailgun: the `to` parameter now takes a list of e-mail addresses (was a single recipient)\n- LOGGING IS NOT SWALLOWED ANYMORE, DON'T PARSE `checkup` OUTPUT IN SCRIPTS\n- default for status page config has been set to local source (use with `checkup serve`)\n\nIf you want to build the latest version, it's best to run:\n\n- `make build` - builds checkup with mysql and postgresql support,\n- `make build-sqlite3` - builds checkup with additional sqlite3 support\n\nThe resulting binary will be placed into `builds/checkup`.\n\n## Intro\n\nCheckup can be customized to check up on any of your sites or services at any time, from any infrastructure, using any storage provider of your choice (assuming an integration exists for your storage provider). The status page can be customized to your liking since you can do your checks however you want. The status page is also mobile-responsive.\n\nCheckup currently supports these checkers:\n\n- HTTP\n- TCP (+TLS)\n- DNS\n- TLS\n\nCheckup implements these storage providers:\n\n- Amazon S3\n- Local file system\n- GitHub\n- MySQL\n- PostgreSQL\n- SQLite3\n- Azure Application Insights\n\n*Currently the status page does not support SQL or Azure Application Insights storage back-ends.*\n\nCheckup can even send notifications through your service of choice (if an integration exists).\n\n\n## How it Works\n\nThere are 3 components:\n\n1. **Storage.** You set up storage space for the results of the checks.\n2. **Checks.** You run checks on whatever endpoints you have as often as you want.\n3. **Status Page.** You (or GitHub) host the status page.\n\n\n## Quick Start\n\n[Download Checkup](https://github.com/sourcegraph/checkup/releases/latest) for your platform and put it in your PATH, or install from source:\n\n```bash\n$ go get -u github.com/sourcegraph/checkup/cmd/checkup\n```\n\nYou'll need Go 1.8 or newer. Verify it's installed properly:\n\n```bash\n$ checkup --help\n```\n\nThen follow these instructions to get started quickly with Checkup.\n\n\n### Create your Checkup config\n\nYou can configure Checkup entirely with a simple JSON document. You should configure storage and at least one checker. Here's the basic outline:\n\n```js\n{\n    \"checkers\": [\n        // checker configurations go here\n    ],\n\n    \"storage\": {\n        // storage configuration goes here\n    },\n\n    \"notifiers\": [\n        // notifier configuration goes here\n    ]\n}\n```\n\nSave the checkup configuration file as `checkup.json` in your working directory.\n\nWe will show JSON samples below, to get you started. **But please [refer to the godoc](https://godoc.org/github.com/sourcegraph/checkup) for a comprehensive description of each type of checker, storage, and notifier you can configure!**\n\nHere are the configuration structures you can use, which are explained fully [in the godoc](https://godoc.org/github.com/sourcegraph/checkup). **Only the required fields are shown, so consult the godoc for more.**\n\n#### HTTP Checker\n\n**[godoc: check/http](https://godoc.org/github.com/sourcegraph/checkup/check/http)**\n\n```js\n{\n    \"type\": \"http\",\n    \"endpoint_name\": \"Example HTTP\",\n    \"endpoint_url\": \"http://www.example.com\"\n    // for more fields, see the godoc\n}\n```\n\n\n#### TCP Checker\n\n**[godoc: check/tcp](https://godoc.org/github.com/sourcegraph/checkup/check/tcp)**\n\n```js\n{\n    \"type\": \"tcp\",\n    \"endpoint_name\": \"Example TCP\",\n    \"endpoint_url\": \"example.com:80\"\n}\n```\n\n#### DNS Checkers\n\n**[godoc: check/dns](https://godoc.org/github.com/sourcegraph/checkup/check/dns)**\n\n```js\n{\n    \"type\": \"dns\",\n    \"endpoint_name\": \"Example of endpoint_url looking up host.example.com\",\n    \"endpoint_url\": \"ns.example.com:53\",\n    \"hostname_fqdn\": \"host.example.com\"\n}\n```\n\n#### TLS Checkers\n\n**[godoc: check/tls](https://godoc.org/github.com/sourcegraph/checkup/check/tls)**\n\n```js\n{\n    \"type\": \"tls\",\n    \"endpoint_name\": \"Example TLS Protocol Check\",\n    \"endpoint_url\": \"www.example.com:443\"\n}\n```\n\n#### Exec Checkers\n\n**[godoc: check/exec](https://godoc.org/github.com/sourcegraph/checkup/check/exec)**\n\nThe exec checker can run any command, and expects an zero-value exit code\non success. Non-zero exit codes are considered errors. You can configure\nthe check with `\"raise\":\"warning\"` if you want to consider a failing\nservice as DEGRADED. Additional options available on godoc link above.\n\n```js\n{\n    \"type\": \"exec\",\n    \"name\": \"Example Exec Check\",\n    \"command\": \"testdata/exec.sh\"\n}\n```\n\n#### Amazon S3 Storage\n\n**[godoc: S3](https://godoc.org/github.com/sourcegraph/checkup/check/s3)**\n\n```js\n{\n    \"type\": \"s3\",\n    \"access_key_id\": \"<yours>\",\n    \"secret_access_key\": \"<yours>\",\n    \"bucket\": \"<yours>\",\n    \"region\": \"us-east-1\"\n}\n```\n\nTo serve files for your status page from S3, copy `statuspage/config_s3.js` over `statuspage/config.js`, and fill out the required public, read-only credentials.\n\n#### File System Storage\n\n**[godoc: FS](https://godoc.org/github.com/sourcegraph/checkup/storage/fs)**\n\n```js\n{\n    \"type\": \"fs\",\n    \"dir\": \"/path/to/your/check_files\"\n}\n```\n\n#### GitHub Storage\n\n**[godoc: GitHub](https://godoc.org/github.com/sourcegraph/checkup/storage/github)**\n\n```js\n{\n    \"type\": \"github\",\n    \"access_token\": \"some_api_access_token_with_repo_scope\",\n    \"repository_owner\": \"owner\",\n    \"repository_name\": \"repo\",\n    \"committer_name\": \"Commiter Name\",\n    \"committer_email\": \"you@example.com\",\n    \"branch\": \"gh-pages\",\n    \"dir\": \"updates\",\n    \"commit_message_suffix\": \"[ci skip]\"\n}\n```\n\n- \"dir\" is a subdirectory within the repo to push all the check files\n- \"commit_message_suffix\" is appended to each commit message (default: \"[ci skip]\", to remove set to \" \" (single space))\n\nSetup instructions:\n\n1. Create a repository,\n2. Copy the contents of `statuspage/` from this repo to the root of your new repo,\n3. Update the URL in `config.js` to `https://your-username.github.com/dir/`,\n4. Create `updates/.gitkeep`,\n5. Enable GitHub Pages in your settings for your desired branch.\n\n#### MySQL Storage\n\n**[godoc: storage/mysql](https://godoc.org/github.com/sourcegraph/checkup/storage/mysql)**\n\nA MySQL database can be configured as a storage backend.\n\nExample configuration:\n\n```js\n{\n    \"type\": \"mysql\",\n    \"create\": true,\n    \"dsn\": \"checkup:checkup@tcp(mysql-checkup-db:3306)/checkup\"\n}\n```\n\nWhen `create` is set to true, checkup will issue `CREATE TABLE` statements required for storage.\n\n#### SQLite3 Storage (requires CGO to build, not available as a default)\n\n**[godoc: storage/sqlite3](https://godoc.org/github.com/sourcegraph/checkup/storage/sqlite3)**\n\nA SQLite3 database can be configured as a storage backend.\n\nExample configuration:\n\n```js\n{\n    \"type\": \"sqlite3\",\n    \"create\": true,\n    \"dsn\": \"/path/to/your/sqlite.db\"\n}\n```\n\nWhen `create` is set to true, checkup will issue `CREATE TABLE` statements required for storage.\n\n#### PostgreSQL Storage\n\n**[godoc: storage/postgres](https://godoc.org/github.com/sourcegraph/checkup/storage/postgres)**\n\nA PostgreSQL database can be configured as a storage backend.\n\nExample configuration:\n\n```js\n{\n    \"type\": \"postgres\",\n    \"dsn\": \"host=postgres-checkup-db user=checkup password=checkup dbname=checkup sslmode=disable\"\n}\n```\n\nWhen `create` is set to true, checkup will issue `CREATE TABLE` statements required for storage.\n\n\n#### Azure Application Insights Storage\n\n**[godoc: appinsights](https://godoc.org/github.com/sourcegraph/checkup/storage/appinsights)**\n\nAzure Application Insights can be used as a storage backend, enabling Checkup to be used as a source of custom availability tests and metrics.  An example use case is documented [here](https://docs.microsoft.com/en-us/azure/azure-monitor/app/availability-azure-functions).\n\nA sample storage configuration with retries enabled:\n```js\n{\n  \"type\": \"appinsights\",\n  \"test_location\": \"data center 1\",\n  \"instrumentation_key\": \"11111111-1111-1111-1111-111111111111\",\n  \"retry_interval\": 1,\n  \"max_retries\": 3,\n  \"tags\": {\n    \"service\": \"front end\",\n    \"product\": \"main web app\"\n  }\n} \n```\n\nThe following keys are optional:\n\n- `test_location` (default is **Checkup Monitor**)\n- `retry_interval` (default is 0)\n- `max_retries` (default is 0)\n- `timeout` (defaults to 2 seconds if omitted or set to 0)\n- `tags`\n\nIf retries are disabled, the plugin will wait up to `timeout` seconds to submit telemetry before closing.\n\nWhen check results are sent to Application Insights, the following values are included in the logged telemetry:\n\n- `success` is set to `1` if the check passes, `0` otherwise\n- `message` is set to `Up`, `Down`, or `Degraded`\n- `duration` is set to the average of all check result round-trip times and is displayed as a string in milliseconds\n- `customMeasurements` is set to a JSON object including the number of the check as a string and the round-trip time of the check in nanoseconds\n- If the check included a `threshold_rtt` setting, it will be added to the `customDimensions` JSON object as key `ThresholdRTT` with a time duration string value (ie: `200ms`)\n- If any tags were included in the storage configuation, they will be added to the `customDimensions` JSON object\n\nCurrently the status page does not support Application Insights storage.\n\n#### Slack notifier\n\nEnable notifications in Slack with this Notifier configuration:\n```js\n{\n    \"type\": \"slack\",\n    \"username\": \"username\",\n    \"channel\": \"#channel-name\",\n    \"webhook\": \"webhook-url\"\n}\n```\n\nFollow these instructions to [create a webhook](https://get.slack.help/hc/en-us/articles/115005265063-Incoming-WebHooks-for-Slack).\n\n#### Mail notifier\n\nEnable E-mail notifications with this Notifier configuration:\n```js\n{\n    \"type\": \"mail\",\n    \"from\": \"from@example.com\",\n    \"to\": [ \"support1@example.com\", \"support2@example.com\" ],\n    \"subject\": \"Custom subject line\",\n    \"smtp\": {\n        \"server\": \"smtp.example.com\",\n        \"port\": 25,\n        \"username\": \"username\",\n        \"password\": \"password\"\n    }\n}\n```\n\nThe settings for `subject`, `smtp.port` (default to 25), `smtp.username` and `smtp.password` are optional.\n\n#### Mailgun notifier\n\nEnable notifications using Mailgun with this Notifier configuration:\n```js\n{\n    \"type\": \"mailgun\",\n    \"from\": \"sender@example.com\",\n    \"to\": [ \"support1@example.com\", \"support2@example.com\" ],\n    \"subject\": \"Custom subject line\"\n    \"apikey\": \"mailgun-api-key\",\n    \"domain\": \"mailgun-domain\",\n}\n```\n\n#### Pushover notifier\n\nEnable notifications using Pushover with this Notifier configuration:\n```js\n{\n    \"type\": \"pushover\",\n    \"token\": \"API_TOKEN\",\n    \"recipient\": \"USER_KEY\"\n    \"subject\": \"Custom subject line\"\n}\n```\n\n## Setting up storage on S3\n\nThe easiest way to do this is to give an IAM user these two privileges (keep the credentials secret):\n\n- arn:aws:iam::aws:policy/**IAMFullAccess**\n- arn:aws:iam::aws:policy/**AmazonS3FullAccess**\n\n### Implicit Provisioning\n\nIf you give these permissions to the same user as with the credentials in your JSON config above, then you can simply run:\n\n```bash\n$ checkup provision\n```\n\nand checkup will read the config file and provision S3 for you. If the user is different, you may want to use explicit provisioning instead.\n\nThis command creates a new IAM user with read-only permission to S3 and also creates a new bucket just for your check files. The credentials of the new user are printed to your screen. **Make note of the Public Access Key ID and Public Access Key!** You won't be able to see them again.\n\n**IMPORTANT SECURITY NOTE:** This new IAM user will have read-only permission to all S3 buckets in your AWS account, and its credentials will be visible to any visitor to your status page. If you do not want to grant visitors to your status page read access to all your S3 buckets, you need to modify this IAM user's permissions to scope its access to the Checkup bucket. If in doubt, restrict access to your status page to trusted visitors. It is recommended that you do NOT include ANY sensitive credentials on the machine running Checkup.\n\n\n### Explicit Provisioning\n\nIf you do not prefer implicit provisioning using your `checkup.json` file, do this instead. Export the information to environment variables and run the provisioning command:\n\n```bash\n$ export AWS_ACCESS_KEY_ID=...\n$ export AWS_SECRET_ACCESS_KEY=...\n$ export AWS_BUCKET_NAME=...\n$ checkup provision s3\n```\n\n### Manual Provisioning\n\nIf you'd rather do this manually, see the [instructions on the wiki](https://github.com/sourcegraph/checkup/wiki/Provisioning-S3-Manually) but keeping in mind the region must be **US Standard**.\n\n\n## Checkup status page\n\nCheckup now has a local HTTP server that supports serving checks stored in:\n\n- FS (local filesystem storage),\n- MySQL\n- PostgreSQL\n- SQLite3 (not enabled by default)\n\nYou can run `checkup serve` from the folder which contains `checkup.json`\nand the `statuspage/` folder.\n\n### Setting up the status page for GitHub\n\nYou will need to edit `\n\n### Setting up the status page for S3\n\nIn statuspage/js, use the contents of [config_s3.js](https://github.com/sourcegraph/checkup/blob/master/statuspage/js/config_s3.js) to fill out [config.js](https://github.com/sourcegraph/checkup/blob/master/statuspage/js/config.js), which is used by the status page.\nThis is where you specify how to access the S3 storage bucket you just provisioned for check files.\n\nAs you perform checks, the status page will update every so often with the latest results. **Only checks that are stored will appear on the status page.**\n\n\n## Performing checks\n\nYou can run checks many different ways: cron, AWS Lambda, or a time.Ticker in your own Go program, to name a few. Checks should be run on a regular basis. How often you run checks depends on your requirements and how much time you render on the status page.\n\nFor example, if you run checks every 10 minutes, showing the last 24 hours on the status page will require 144 check files to be downloaded on each page load. You can distribute your checks to help avoid localized network problems, but this multiplies the number of files by the number of nodes you run checks on, so keep that in mind.\n\nPerforming checks with the `checkup` command is very easy.\n\nJust `cd` to the folder with your `checkup.json` from earlier, and checkup will automatically use it:\n\n```bash\n$ checkup\n```\n\nThe vanilla checkup command runs a single check and prints the results to your screen, but does not save them to storage for your status page.\n\nTo store the results instead, use `--store`:\n\n```bash\n$ checkup --store\n```\n\nIf you want Checkup to loop forever and perform checks and store them on a regular interval, use this:\n\n```bash\n$ checkup every 10m\n```\n\nAnd replace the duration with your own preference. In addition to the regular `time.ParseDuration()` formats, you can use shortcuts like `second`, `minute`, `hour`, `day`, or `week`.\n\nYou can also get some help using the `-h` option for any command or subcommand.\n\n\n## Posting status messages\n\nSite reliability engineers should post messages when there are incidents or other news relevant for a status page. This is also very easy:\n\n```bash\n$ checkup message --about=Example \"Oops. We're trying to fix the problem. Stay tuned.\"\n```\n\nThis stores a check file with your message attached to the result for a check named \"Example\" which you configured in `checkup.json` earlier.\n\n\n\n\n## Doing all that, but with Go\n\nCheckup is as easy to use in a Go program as it is on the command line.\n\n\n### Using Go to set up storage on S3\n\nFirst, create an IAM user with credentials as described in the section above.\n\nThen `go get github.com/sourcegraph/checkup` and import it.\n\nThen replace `ACCESS_KEY_ID` and `SECRET_ACCESS_KEY` below with the actual values for that user. Keep those secret. You'll also replace `BUCKET_NAME` with the unique bucket name to store your check files:\n\n```go\nstorage := checkup.S3{\n\tAccessKeyID:     \"ACCESS_KEY_ID\",\n\tSecretAccessKey: \"SECRET_ACCESS_KEY\",\n\tBucket:          \"BUCKET_NAME\",\n}\ninfo, err := storage.Provision()\nif err != nil {\n\tlog.Fatal(err)\n}\nfmt.Println(info) // don't lose this output!\n```\n\nThis method creates a new IAM user with read-only permission to S3 and also creates a new bucket just for your check files. The credentials of the new user are printed to your screen. **Make note of the PublicAccessKeyID and PublicAccessKey!** You won't be able to see them again.\n\n\n\n### Using Go to perform checks\n\nFirst, `go get github.com/sourcegraph/checkup` and import it. Then configure it:\n\n```go\nc := checkup.Checkup{\n\tCheckers: []checkup.Checker{\n\t\tcheckup.HTTPChecker{Name: \"Example (HTTP)\", URL: \"http://www.example.com\", Attempts: 5},\n\t\tcheckup.HTTPChecker{Name: \"Example (HTTPS)\", URL: \"https://www.example.com\", Attempts: 5},\n\t\tcheckup.TCPChecker{Name:  \"Example (TCP)\", URL:  \"www.example.com:80\", Attempts: 5},\n\t\tcheckup.TCPChecker{Name:  \"Example (TCP SSL)\", URL:  \"www.example.com:443\", Attempts: 5, TLSEnabled: true},\n\t\tcheckup.TCPChecker{Name:  \"Example (TCP SSL, self-signed certificate)\", URL:  \"www.example.com:443\", Attempts: 5, TLSEnabled: true, TLSCAFile: \"testdata/ca.pem\"},\n\t\tcheckup.TCPChecker{Name:  \"Example (TCP SSL, validation disabled)\", URL:  \"www.example.com:8443\", Attempts: 5, TLSEnabled: true, TLSSkipVerify: true},\n\t\tcheckup.DNSChecker{Name:  \"Example DNS test of ns.example.com:53 looking up host.example.com\", URL:  \"ns.example.com:53\", Host: \"host.example.com\", Attempts: 5},\n\t},\n\tStorage: checkup.S3{\n\t\tAccessKeyID:     \"<yours>\",\n\t\tSecretAccessKey: \"<yours>\",\n\t\tBucket:          \"<yours>\",\n\t\tRegion:          \"us-east-1\",\n\t\tCheckExpiry:     24 * time.Hour * 7,\n\t},\n}\n```\n\nThis sample checks 2 endpoints (HTTP and HTTPS). Each check consists of 5 attempts so as to smooth out the final results a bit. We will store results on S3. Notice the `CheckExpiry` value. The `checkup.S3` type is also `checkup.Maintainer` type, which means it can maintain itself and purge any status checks older than `CheckExpiry`. We chose 7 days.\n\nThen, to run checks every 10 minutes:\n\n```go\nc.CheckAndStoreEvery(10 * time.Minute)\nselect {}\n```\n\n`CheckAndStoreEvery()` returns a `time.Ticker` that you can stop, but in this case we just want it to run forever, so we block forever using an empty `select`.\n\n\n### Using Go to post status messages\n\nSimply perform a check, add the message to the corresponding result, and then store it:\n\n```go\nresults, err := c.Check()\nif err != nil {\n\t// handle err\n}\n\nresults[0].Message = \"We're investigating connectivity issues.\"\n\nerr = c.Storage.Store(results)\nif err != nil {\n\t// handle err\n}\n```\n\nOf course, real status messages should be as descriptive as possible. You can use HTML in them.\n\n\n## Other topics\n\n### Getting notified when there are problems\n\nUh oh, having some fires? 🔥 You can create a type that implements `checkup.Notifier`. Checkup will invoke `Notify()` after every check, where you can evaluate the results and decide if and how you want to send a notification or trigger some event.\n\n### Other kinds of checks or storage providers\n\nYou can implement your own Checker and Storage types. If it's general enough, feel free to submit a pull request so others can use it too!\n\n### Building Locally\n\nRequires Go v1.14 or newer. Building with the latest Go version is encouraged.\n\n```bash\ngit clone git@github.com:sourcegraph/checkup.git\ncd checkup\nmake\n```\n\nBuilding the SQLite3 enabled version is done with `make build-sqlite3`. PostgreSQL and MySQL are enabled by default.\n\n### Building a Docker image\n\nIf you would like to run checkup in a docker container, building it is done by running `make docker`.\nIt will build the version without sql support. An SQL supported docker image is currently not provided,\nbut there's a plan to do that in the future.\n"
        },
        {
          "name": "check.go",
          "type": "blob",
          "size": 0.640625,
          "content": "package checkup\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/sourcegraph/checkup/check/dns\"\n\t\"github.com/sourcegraph/checkup/check/exec\"\n\t\"github.com/sourcegraph/checkup/check/http\"\n\t\"github.com/sourcegraph/checkup/check/tcp\"\n\t\"github.com/sourcegraph/checkup/check/tls\"\n)\n\nfunc checkerDecode(typeName string, config json.RawMessage) (Checker, error) {\n\tswitch typeName {\n\tcase dns.Type:\n\t\treturn dns.New(config)\n\tcase exec.Type:\n\t\treturn exec.New(config)\n\tcase http.Type:\n\t\treturn http.New(config)\n\tcase tcp.Type:\n\t\treturn tcp.New(config)\n\tcase tls.Type:\n\t\treturn tls.New(config)\n\tdefault:\n\t\treturn nil, fmt.Errorf(errUnknownCheckerType, typeName)\n\t}\n}\n"
        },
        {
          "name": "check",
          "type": "tree",
          "content": null
        },
        {
          "name": "checkup.go",
          "type": "blob",
          "size": 8.0009765625,
          "content": "// Package checkup provides means for checking and reporting the\n// status and performance of various endpoints in a distributed,\n// lock-free, self-hosted fashion.\npackage checkup\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/sourcegraph/checkup/types\"\n)\n\n// Checkup performs a routine checkup on endpoints or\n// services.\ntype Checkup struct {\n\t// Checkers is the list of Checkers to use with\n\t// which to perform checks.\n\tCheckers []Checker `json:\"checkers,omitempty\"`\n\n\t// ConcurrentChecks is how many checks, at most, to\n\t// perform concurrently. Default is\n\t// DefaultConcurrentChecks.\n\tConcurrentChecks int `json:\"concurrent_checks,omitempty\"`\n\n\t// Timestamp is the timestamp to force for all checks.\n\t// Useful if wanting to perform distributed check\n\t// \"at the same time\" even if they might actually\n\t// be a few milliseconds or seconds apart.\n\tTimestamp time.Time `json:\"timestamp,omitempty\"`\n\n\t// Storage is the storage mechanism for saving the\n\t// results of checks. Required if calling Store().\n\t// If Storage is also a Maintainer, its Maintain()\n\t// method will be called by c.CheckAndStore().\n\tStorage Storage `json:\"storage,omitempty\"`\n\n\t// Notifiers are list of notifiers to invoke with\n\t// the results after checks from all checkers have\n\t// completed. Notifier may evaluate and choose to\n\t// send a notification of potential problems.\n\tNotifiers []Notifier `json:\"notifiers,omitempty\"`\n}\n\n// Check performs the health checks. An error is only\n// returned in the case of a misconfiguration or if\n// any one of the Checkers returns an error.\nfunc (c Checkup) Check() ([]types.Result, error) {\n\tif c.ConcurrentChecks == 0 {\n\t\tc.ConcurrentChecks = DefaultConcurrentChecks\n\t}\n\tif c.ConcurrentChecks < 0 {\n\t\treturn nil, fmt.Errorf(\"invalid value for ConcurrentChecks: %d (must be set > 0)\",\n\t\t\tc.ConcurrentChecks)\n\t}\n\n\tresults := make([]types.Result, len(c.Checkers))\n\terrs := make(types.Errors, len(c.Checkers))\n\tthrottle := make(chan struct{}, c.ConcurrentChecks)\n\twg := sync.WaitGroup{}\n\n\tfor i, checker := range c.Checkers {\n\t\tthrottle <- struct{}{}\n\t\twg.Add(1)\n\t\tgo func(i int, checker Checker) {\n\t\t\tresults[i], errs[i] = checker.Check()\n\t\t\t<-throttle\n\t\t\twg.Done()\n\t\t}(i, checker)\n\t}\n\twg.Wait()\n\n\tif !c.Timestamp.IsZero() {\n\t\tfor i := range results {\n\t\t\tresults[i].Timestamp = c.Timestamp.UTC().UnixNano()\n\t\t}\n\t}\n\n\tif !errs.Empty() {\n\t\treturn results, errs\n\t}\n\n\tfor _, service := range c.Notifiers {\n\t\terr := service.Notify(results)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"ERROR sending notifications for %s: %s\", service.Type(), err)\n\t\t}\n\t}\n\n\treturn results, nil\n}\n\n// CheckAndStore performs health checks and immediately\n// stores the results to the configured storage if there\n// were no errors. Checks are not performed if c.Storage\n// is nil. If c.Storage is also a Maintainer, Maintain()\n// will be called if Store() is successful.\nfunc (c Checkup) CheckAndStore() error {\n\tif c.Storage == nil {\n\t\treturn fmt.Errorf(\"no storage mechanism defined\")\n\t}\n\tresults, err := c.Check()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = c.Storage.Store(results)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif m, ok := c.Storage.(Maintainer); ok {\n\t\treturn m.Maintain()\n\t}\n\n\treturn nil\n}\n\n// CheckAndStoreEvery calls CheckAndStore every interval. It returns\n// the ticker that it's using so you can stop it when you don't want\n// it to run anymore. This function does NOT block (it runs the ticker\n// in a goroutine). Any errors are written to the standard logger. It\n// would not be wise to set an interval lower than the time it takes\n// to perform the checks.\nfunc (c Checkup) CheckAndStoreEvery(interval time.Duration) *time.Ticker {\n\tticker := time.NewTicker(interval)\n\tcheck := func() {\n\t\tif err := c.CheckAndStore(); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n\tgo func() {\n\t\tcheck()\n\t\tfor range ticker.C {\n\t\t\tcheck()\n\t\t}\n\t}()\n\treturn ticker\n}\n\n// MarshalJSON marshals c into JSON with type information\n// included on the interface values.\nfunc (c Checkup) MarshalJSON() ([]byte, error) {\n\t// Start with the fields of c that don't require special\n\t// handling; unfortunately this has to mimic c's definition.\n\teasy := struct {\n\t\tConcurrentChecks int       `json:\"concurrent_checks,omitempty\"`\n\t\tTimestamp        time.Time `json:\"timestamp,omitempty\"`\n\t}{\n\t\tConcurrentChecks: c.ConcurrentChecks,\n\t\tTimestamp:        c.Timestamp,\n\t}\n\tresult, err := json.Marshal(easy)\n\tif err != nil {\n\t\treturn result, err\n\t}\n\n\twrap := func(key string, value []byte) {\n\t\tb := append([]byte{result[0]}, []byte(`\"`+key+`\":`)...)\n\t\tb = append(b, value...)\n\t\tif len(result) > 2 {\n\t\t\tb = append(b, ',')\n\t\t}\n\t\tresult = append(b, result[1:]...)\n\t}\n\n\t// Checkers\n\tif len(c.Checkers) > 0 {\n\t\tvar checkers [][]byte\n\t\tfor _, ch := range c.Checkers {\n\t\t\tchb, err := json.Marshal(ch)\n\t\t\tif err != nil {\n\t\t\t\treturn result, err\n\t\t\t}\n\t\t\tchb = []byte(fmt.Sprintf(`{\"type\":\"%s\",%s`, ch.Type(), string(chb[1:])))\n\t\t\tcheckers = append(checkers, chb)\n\t\t}\n\n\t\tallCheckers := []byte{}\n\t\tallCheckers = append(allCheckers, '[')\n\t\tallCheckers = append(allCheckers, bytes.Join(checkers, []byte(\",\"))...)\n\t\tallCheckers = append(allCheckers, ']')\n\t\twrap(\"checkers\", allCheckers)\n\t}\n\n\t// Storage\n\tif c.Storage != nil {\n\t\tsb, err := json.Marshal(c.Storage)\n\t\tif err != nil {\n\t\t\treturn result, err\n\t\t}\n\t\tsb = []byte(fmt.Sprintf(`{\"type\":\"%s\",%s`, c.Storage.Type(), string(sb[1:])))\n\t\twrap(\"storage\", sb)\n\t}\n\n\t// Notifiers\n\tif len(c.Notifiers) > 0 {\n\t\tvar checkers [][]byte\n\t\tfor _, ch := range c.Notifiers {\n\t\t\tchb, err := json.Marshal(ch)\n\t\t\tif err != nil {\n\t\t\t\treturn result, err\n\t\t\t}\n\n\t\t\tchb = []byte(fmt.Sprintf(`{\"type\":\"%s\",%s`, ch.Type(), string(chb[1:])))\n\t\t\tcheckers = append(checkers, chb)\n\t\t}\n\n\t\tallNotifiers := []byte{}\n\t\tallNotifiers = append(allNotifiers, '[')\n\t\tallNotifiers = append(allNotifiers, bytes.Join(checkers, []byte(\",\"))...)\n\t\tallNotifiers = append(allNotifiers, ']')\n\t\twrap(\"notifiers\", allNotifiers)\n\t}\n\n\treturn result, nil\n}\n\n// UnmarshalJSON unmarshales b into c. To succeed, it\n// requires type information for the interface values.\nfunc (c *Checkup) UnmarshalJSON(b []byte) error {\n\t// Unmarshal as much of b as we can; this requires\n\t// a type that doesn't implement json.Unmarshaler,\n\t// hence the conversion. We also know that the\n\t// interface types will ultimately cause an error,\n\t// but we can ignore it because we handle it below.\n\ttype checkup2 *Checkup\n\t_ = json.Unmarshal(b, checkup2(c))\n\n\t// clean the slate\n\tc.Checkers = []Checker{}\n\tc.Notifiers = []Notifier{}\n\n\t// Begin unmarshaling interface values by\n\t// collecting the raw JSON\n\traw := struct {\n\t\tCheckers  []json.RawMessage `json:\"checkers\"`\n\t\tStorage   json.RawMessage   `json:\"storage\"`\n\t\tNotifier  json.RawMessage   `json:\"notifier\"`\n\t\tNotifiers []json.RawMessage `json:\"notifiers\"`\n\t}{}\n\terr := json.Unmarshal(b, &raw)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Then collect the concrete type information\n\tconfigTypes := struct {\n\t\tCheckers []struct {\n\t\t\tType string `json:\"type\"`\n\t\t}\n\t\tStorage struct {\n\t\t\tType string `json:\"type\"`\n\t\t}\n\t\tNotifier struct {\n\t\t\tType string `json:\"type\"`\n\t\t}\n\t\tNotifiers []struct {\n\t\t\tType string `json:\"type\"`\n\t\t}\n\t}{}\n\terr = json.Unmarshal(b, &configTypes)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Finally, we unmarshal the remaining values using type\n\t// assertions with the help of the type information\n\tfor i, t := range configTypes.Checkers {\n\t\tchecker, err := checkerDecode(t.Type, raw.Checkers[i])\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc.Checkers = append(c.Checkers, checker)\n\t}\n\tif raw.Storage != nil {\n\t\tstorage, err := storageDecode(configTypes.Storage.Type, raw.Storage)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc.Storage = storage\n\t}\n\tif raw.Notifier != nil {\n\t\tnotifier, err := notifierDecode(configTypes.Notifier.Type, raw.Notifier)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Move `notifier` into `notifiers[]`\n\t\tc.Notifiers = append(c.Notifiers, notifier)\n\t}\n\tfor i, n := range configTypes.Notifiers {\n\t\tnotifier, err := notifierDecode(n.Type, raw.Notifiers[i])\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc.Notifiers = append(c.Notifiers, notifier)\n\t}\n\treturn nil\n}\n\n// DefaultConcurrentChecks is how many checks,\n// at most, to perform concurrently.\nvar DefaultConcurrentChecks = 5\n"
        },
        {
          "name": "checkup_test.go",
          "type": "blob",
          "size": 6.6064453125,
          "content": "package checkup\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/sourcegraph/checkup/types\"\n)\n\nfunc TestCheckAndStore(t *testing.T) {\n\tf := new(fake)\n\tc := Checkup{\n\t\tStorage:          f,\n\t\tCheckers:         []Checker{f, f},\n\t\tConcurrentChecks: 1,\n\t\tTimestamp:        time.Now(),\n\t\tNotifiers:        []Notifier{f, f},\n\t}\n\n\terr := c.CheckAndStore()\n\tif err != nil {\n\t\tt.Errorf(\"Didn't expect an error: %v\", err)\n\t}\n\tif got, want := f.checked, 2; got != want {\n\t\tt.Errorf(\"Expected %d checks to be executed, but had: %d\", want, got)\n\t}\n\tif got, want := len(f.stored), 2; got != want {\n\t\tt.Errorf(\"Expected %d checks to be stored, but had: %d\", want, got)\n\t}\n\tfor i := range f.stored {\n\t\tif i > 0 && f.stored[i].Timestamp != f.stored[i-1].Timestamp {\n\t\t\tt.Error(\"Expected timestamps to be the same, but they weren't\")\n\t\t}\n\t}\n\tif got, want := f.notified, 2; got != want {\n\t\tt.Errorf(\"Expected Notify() to be called %d time, called %d times\", want, got)\n\t}\n\tif got, want := f.maintained, 1; got != want {\n\t\tt.Errorf(\"Expected Maintain() to be called %d time, called %d times\", want, got)\n\t}\n\n\t// Check error handling\n\tf.returnErr = true\n\terr = c.CheckAndStore()\n\tif err == nil {\n\t\tt.Error(\"Expected an error, didn't get one\")\n\t}\n\tif got, want := err.Error(), \"i'm an error; i'm an error\"; got != want {\n\t\tt.Errorf(`Expected error string \"%s\" but got: \"%s\"`, want, got)\n\t}\n\n\tc.ConcurrentChecks = -1\n\t_, err = c.Check()\n\tif err == nil {\n\t\tt.Error(\"Expected an error with ConcurrentChecks < 0, didn't get one\")\n\t}\n\tc.ConcurrentChecks = 0\n\tc.Storage = nil\n\terr = c.CheckAndStore()\n\tif err == nil {\n\t\tt.Error(\"Expected an error with no storage, didn't get one\")\n\t}\n}\n\nfunc TestCheckAndStoreEvery(t *testing.T) {\n\tf := new(fake)\n\tc := Checkup{Storage: f, Checkers: []Checker{f}}\n\n\tticker := c.CheckAndStoreEvery(50 * time.Millisecond)\n\ttime.Sleep(170 * time.Millisecond)\n\tticker.Stop()\n\n\tf.Lock()\n\tdefer f.Unlock()\n\tif got, want := f.checked, 4; got != want {\n\t\tt.Errorf(\"Expected %d checks while sleeping, had: %d\", want, got)\n\t}\n}\n\nfunc TestComputeStats(t *testing.T) {\n\ts := types.Result{Times: []types.Attempt{\n\t\t{RTT: 7 * time.Second},\n\t\t{RTT: 4 * time.Second},\n\t\t{RTT: 4 * time.Second},\n\t\t{RTT: 6 * time.Second},\n\t\t{RTT: 6 * time.Second},\n\t\t{RTT: 3 * time.Second},\n\t}}.ComputeStats()\n\n\tif got, want := s.Total, 30*time.Second; got != want {\n\t\tt.Errorf(\"Expected Total=%v, got %v\", want, got)\n\t}\n\tif got, want := s.Mean, 5*time.Second; got != want {\n\t\tt.Errorf(\"Expected Mean=%v, got %v\", want, got)\n\t}\n\tif got, want := s.Median, 5*time.Second; got != want {\n\t\tt.Errorf(\"Expected Median=%v, got %v\", want, got)\n\t}\n\tif got, want := s.Min, 3*time.Second; got != want {\n\t\tt.Errorf(\"Expected Min=%v, got %v\", want, got)\n\t}\n\tif got, want := s.Max, 7*time.Second; got != want {\n\t\tt.Errorf(\"Expected Max=%v, got %v\", want, got)\n\t}\n}\n\nfunc TestResultStatus(t *testing.T) {\n\tr := types.Result{Healthy: true}\n\tif got, want := r.Status(), types.StatusHealthy; got != want {\n\t\tt.Errorf(\"Expected status '%s' but got: '%s'\", want, got)\n\t}\n\n\tr = types.Result{Degraded: true}\n\tif got, want := r.Status(), types.StatusDegraded; got != want {\n\t\tt.Errorf(\"Expected status '%s' but got: '%s'\", want, got)\n\t}\n\n\tr = types.Result{Down: true}\n\tif got, want := r.Status(), types.StatusDown; got != want {\n\t\tt.Errorf(\"Expected status '%s' but got: '%s'\", want, got)\n\t}\n\n\tr = types.Result{}\n\tif got, want := r.Status(), types.StatusUnknown; got != want {\n\t\tt.Errorf(\"Expected status '%s' but got: '%s'\", want, got)\n\t}\n\n\t// These are invalid states, but we need to test anyway in case a\n\t// checker is buggy. We expect the worst of the enabled fields.\n\tr = types.Result{Down: true, Degraded: true}\n\tif got, want := r.Status(), types.StatusDown; got != want {\n\t\tt.Errorf(\"(INVALID RESULT CASE) Expected status '%s' but got: '%s'\", want, got)\n\t}\n\tr = types.Result{Degraded: true, Healthy: true}\n\tif got, want := r.Status(), types.StatusDegraded; got != want {\n\t\tt.Errorf(\"(INVALID RESULT CASE) Expected status '%s' but got: '%s'\", want, got)\n\t}\n\tr = types.Result{Down: true, Healthy: true}\n\tif got, want := r.Status(), types.StatusDown; got != want {\n\t\tt.Errorf(\"(INVALID RESULT CASE) Expected status '%s' but got: '%s'\", want, got)\n\t}\n}\n\nfunc TestPriorityOver(t *testing.T) {\n\tfor i, test := range []struct {\n\t\tstatus   types.StatusText\n\t\tanother  types.StatusText\n\t\texpected bool\n\t}{\n\t\t{types.StatusDown, types.StatusDown, false},\n\t\t{types.StatusDown, types.StatusDegraded, true},\n\t\t{types.StatusDown, types.StatusHealthy, true},\n\t\t{types.StatusDown, types.StatusUnknown, true},\n\t\t{types.StatusDegraded, types.StatusDown, false},\n\t\t{types.StatusDegraded, types.StatusDegraded, false},\n\t\t{types.StatusDegraded, types.StatusHealthy, true},\n\t\t{types.StatusDegraded, types.StatusUnknown, true},\n\t\t{types.StatusHealthy, types.StatusDown, false},\n\t\t{types.StatusHealthy, types.StatusDegraded, false},\n\t\t{types.StatusHealthy, types.StatusHealthy, false},\n\t\t{types.StatusHealthy, types.StatusUnknown, true},\n\t\t{types.StatusUnknown, types.StatusDown, false},\n\t\t{types.StatusUnknown, types.StatusDegraded, false},\n\t\t{types.StatusUnknown, types.StatusHealthy, false},\n\t\t{types.StatusUnknown, types.StatusUnknown, false},\n\t} {\n\t\tactual := test.status.PriorityOver(test.another)\n\t\tif actual != test.expected {\n\t\t\tt.Errorf(\"Test %d: Expected %s.PriorityOver(%s)=%v, but got %v\",\n\t\t\t\ti, test.status, test.another, test.expected, actual)\n\t\t}\n\t}\n}\n\nfunc TestJSON(t *testing.T) {\n\tvar (\n\t\tcheckup    = new(Checkup)\n\t\ttestConfig = \"testdata/config.json\"\n\t)\n\n\tjsonBytes, err := ioutil.ReadFile(testConfig)\n\tif err != nil {\n\t\tt.Fatalf(\"Error reading config file: %s\", testConfig)\n\t}\n\n\terr = checkup.UnmarshalJSON(jsonBytes)\n\tif err != nil {\n\t\tt.Fatalf(\"Error unmarshaling: %v\", err)\n\t}\n\n\tresult, err := checkup.MarshalJSON()\n\tif err != nil {\n\t\tt.Fatalf(\"Error marshaling: %v\", err)\n\t}\n\n\tif !bytes.Equal(result, jsonBytes) {\n\t\tt.Errorf(\"\\nGot:  %s\\nWant: %s\", string(result), string(jsonBytes))\n\t}\n}\n\nvar errTest = errors.New(\"i'm an error\")\n\ntype fake struct {\n\tsync.Mutex\n\n\treturnErr  bool\n\tchecked    int\n\tstored     []types.Result\n\tmaintained int\n\tnotified   int\n}\n\nfunc (f *fake) Type() string {\n\treturn \"fake\"\n}\n\nfunc (f *fake) Check() (types.Result, error) {\n\tf.Lock()\n\tdefer f.Unlock()\n\n\tf.checked++\n\tr := types.Result{Timestamp: time.Now().UTC().UnixNano()}\n\tif f.returnErr {\n\t\treturn r, errTest\n\t}\n\treturn r, nil\n}\n\nfunc (f *fake) Store(results []types.Result) error {\n\tf.Lock()\n\tdefer f.Unlock()\n\n\tf.stored = results\n\tif f.returnErr {\n\t\treturn errTest\n\t}\n\treturn nil\n}\n\nfunc (f *fake) Maintain() error {\n\tf.Lock()\n\tdefer f.Unlock()\n\n\tf.maintained++\n\treturn nil\n}\n\nfunc (f *fake) Notify(results []types.Result) error {\n\tf.Lock()\n\tdefer f.Unlock()\n\n\tf.notified++\n\treturn nil\n}\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.20703125,
          "content": "version: '2.4'\n\nservices:\n  checkup:\n    hostname: checkup\n    image: checkup:latest\n    ports:\n      - 3000\n    volumes:\n      - ./checkup.json:/app/checkup.json\n      - ./checks:/app/checks\n    restart: always\n"
        },
        {
          "name": "errors.go",
          "type": "blob",
          "size": 0.1826171875,
          "content": "package checkup\n\nconst (\n\terrUnknownCheckerType  = \"unknown checker type: %s\"\n\terrUnknownStorageType  = \"unknown storage type: %s\"\n\terrUnknownNotifierType = \"unknown notifier type: %s\"\n)\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.1005859375,
          "content": "module github.com/sourcegraph/checkup\n\ngo 1.13\n\nrequire (\n\tgithub.com/ashwanthkumar/slack-go-webhook v0.0.0-20200209025033-430dd4e66960\n\tgithub.com/aws/aws-sdk-go v1.30.7\n\tgithub.com/elazarl/goproxy v0.0.0-20200315184450-1f3cb6622dad // indirect\n\tgithub.com/fatih/color v1.9.0\n\tgithub.com/go-sql-driver/mysql v1.5.0\n\tgithub.com/google/go-github v17.0.0+incompatible\n\tgithub.com/google/go-querystring v1.0.0 // indirect\n\tgithub.com/gregdel/pushover v0.0.0-20200416074932-c8ad547caed4\n\tgithub.com/jmoiron/sqlx v1.2.0\n\tgithub.com/lib/pq v1.3.0\n\tgithub.com/mailgun/mailgun-go/v4 v4.1.0\n\tgithub.com/mattn/go-sqlite3 v2.0.3+incompatible\n\tgithub.com/microsoft/ApplicationInsights-Go v0.4.3\n\tgithub.com/miekg/dns v1.1.29\n\tgithub.com/parnurzeal/gorequest v0.2.16 // indirect\n\tgithub.com/smartystreets/goconvey v1.6.4 // indirect\n\tgithub.com/spf13/cobra v0.0.7\n\tgolang.org/x/net v0.33.0 // indirect\n\tgolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d\n\tgopkg.in/alexcesaro/quotedprintable.v3 v3.0.0-20150716171945-2caba252f4dc // indirect\n\tgopkg.in/gomail.v2 v2.0.0-20160411212932-81ebce5c23df\n\tmoul.io/http2curl v1.0.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 29.2890625,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncode.cloudfoundry.org/clock v0.0.0-20180518195852-02e53af36e6c h1:5eeuG0BHx1+DHeT3AP+ISKZ2ht1UjGhm581ljqYpVeQ=\ncode.cloudfoundry.org/clock v0.0.0-20180518195852-02e53af36e6c/go.mod h1:QD9Lzhd/ux6eNQVUDVRJX/RKTigpewimNYBi7ivZKY8=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/OneOfOne/xxhash v1.2.2/go.mod h1:HSdplMjZKSmBqAxg5vPj2TmRDmfkzw+cTzAElWljhcU=\ngithub.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=\ngithub.com/ashwanthkumar/slack-go-webhook v0.0.0-20200209025033-430dd4e66960 h1:MIEURpsIpyLyy+dZ+GnL8T5P49Tco0ik9cYaUQNnAxE=\ngithub.com/ashwanthkumar/slack-go-webhook v0.0.0-20200209025033-430dd4e66960/go.mod h1:97O1qkjJBHSSaWJxsTShRIeFy0HWiygk+jnugO9aX3I=\ngithub.com/aws/aws-sdk-go v1.30.7 h1:IaXfqtioP6p9SFAnNfsqdNczbR5UNbYqvcZUSsCAdTY=\ngithub.com/aws/aws-sdk-go v1.30.7/go.mod h1:5zCpMtNQVjRREroY7sYe8lOMRSxkhG6MZveU8YkpAk0=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=\ngithub.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/coreos/bbolt v1.3.2/go.mod h1:iRUV2dpdMOn7Bo10OQBFzIJO9kkE559Wcmn+qkEiiKk=\ngithub.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=\ngithub.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=\ngithub.com/dgryski/go-sip13 v0.0.0-20181026042036-e10d5fee7954/go.mod h1:vAd38F8PWV+bWy6jNmig1y/TA+kYO4g3RSRF0IAv0no=\ngithub.com/elazarl/goproxy v0.0.0-20200315184450-1f3cb6622dad h1:zPs0fNF2Io1Qytf92EI2CDJ9oCXZr+NmjEVexrUEdq4=\ngithub.com/elazarl/goproxy v0.0.0-20200315184450-1f3cb6622dad/go.mod h1:Ro8st/ElPeALwNFlcTpWmkr6IoMFfkjXAvTHpevnDsM=\ngithub.com/elazarl/goproxy/ext v0.0.0-20190711103511-473e67f1d7d2 h1:dWB6v3RcOy03t/bUadywsbyrQwCqZeNIEX6M1OtSZOM=\ngithub.com/elazarl/goproxy/ext v0.0.0-20190711103511-473e67f1d7d2/go.mod h1:gNh8nYJoAm43RfaxurUnxr+N1PwuFV3ZMl/efxlIlY8=\ngithub.com/facebookgo/ensure v0.0.0-20160127193407-b4ab57deab51 h1:0JZ+dUmQeA8IIVUMzysrX4/AKuQwWhV2dYQuPZdvdSQ=\ngithub.com/facebookgo/ensure v0.0.0-20160127193407-b4ab57deab51/go.mod h1:Yg+htXGokKKdzcwhuNDwVvN+uBxDGXJ7G/VN1d8fa64=\ngithub.com/facebookgo/stack v0.0.0-20160209184415-751773369052 h1:JWuenKqqX8nojtoVVWjGfOF9635RETekkoH6Cc9SX0A=\ngithub.com/facebookgo/stack v0.0.0-20160209184415-751773369052/go.mod h1:UbMTZqLaRiH3MsBH8va0n7s1pQYcu3uTb8G4tygF4Zg=\ngithub.com/facebookgo/subset v0.0.0-20150612182917-8dac2c3c4870 h1:E2s37DuLxFhQDg5gKsWoLBOB0n+ZW8s599zru8FJ2/Y=\ngithub.com/facebookgo/subset v0.0.0-20150612182917-8dac2c3c4870/go.mod h1:5tD+neXqOorC30/tWg0LCSkrqj/AR6gu8yY8/fpw1q0=\ngithub.com/fatih/color v1.9.0 h1:8xPHl4/q1VyqGIPif1F+1V3Y3lSmrq01EabUW3CoW5s=\ngithub.com/fatih/color v1.9.0/go.mod h1:eQcE1qtQxscV5RaZvpXrrb8Drkc3/DdQ+uUYCNjL+zU=\ngithub.com/fsnotify/fsnotify v1.4.7 h1:IXs+QLmnXW2CcXuY+8Mzv/fWEsPGWxqefPtCP5CnV9I=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/go-chi/chi v4.0.0+incompatible h1:SiLLEDyAkqNnw+T/uDTf3aFB9T4FTrwMpuYrgaRcnW4=\ngithub.com/go-chi/chi v4.0.0+incompatible/go.mod h1:eB3wogJHnLi3x/kFX2A+IbTBlXxmMeXJVKy9tTv1XzQ=\ngithub.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=\ngithub.com/go-sql-driver/mysql v1.4.0/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=\ngithub.com/go-sql-driver/mysql v1.5.0 h1:ozyZYNQW3x3HtqT1jira07DN2PArx2v7/mN66gGcHOs=\ngithub.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20190129154638-5b532d6fd5ef/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1 h1:YF8+flBXS5eO826T4nzqPrxfhQThhXl0YzfuUPu4SBg=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-github v17.0.0+incompatible h1:N0LgJ1j65A7kfXrZnUDaYCs/Sf4rEjNlfyDHW9dolSY=\ngithub.com/google/go-github v17.0.0+incompatible/go.mod h1:zLgOLi98H3fifZn+44m+umXrS52loVEgC2AApnigrVQ=\ngithub.com/google/go-querystring v1.0.0 h1:Xkwi/a1rcvNg1PPYe5vI8GbeBY/jrVuDX5ASuANWTrk=\ngithub.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1 h1:EGx4pi6eqNxGaHF6qqu48+N2wcFQ5qg5FXgOdqsJ5d8=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gorilla/websocket v1.4.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=\ngithub.com/gregdel/pushover v0.0.0-20200416074932-c8ad547caed4 h1:QZVozMeLCqyMOOhA+OuqQdNXkyu4uUQEu4+mPBB5pPQ=\ngithub.com/gregdel/pushover v0.0.0-20200416074932-c8ad547caed4/go.mod h1:EcaO66Nn1StkpEm1iKtBTV3d2A16SoMsVER1PthX7to=\ngithub.com/grpc-ecosystem/go-grpc-middleware v1.0.0/go.mod h1:FiyG127CGDf3tlThmgyCl78X/SZQqEOJBCDaAfeWzPs=\ngithub.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=\ngithub.com/grpc-ecosystem/grpc-gateway v1.9.0/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/hpcloud/tail v1.0.0 h1:nfCOvKYfkgYP8hkirhJocXT2+zOD8yUNjXaWfTlyFKI=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/inconshreveable/mousetrap v1.0.0 h1:Z8tu5sraLXCXIcARxBp/8cbvlwVa7Z1NHg9XEKhtSvM=\ngithub.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\ngithub.com/jmespath/go-jmespath v0.3.0 h1:OS12ieG61fsCg5+qLJ+SsW9NicxNkg3b25OyT2yCeUc=\ngithub.com/jmespath/go-jmespath v0.3.0/go.mod h1:9QtRXoHjLGCJ5IBSaohpXITPlowMeeYCZ7fLUTSywik=\ngithub.com/jmoiron/sqlx v1.2.0 h1:41Ip0zITnmWNR/vHV+S4m+VoUivnWY5E4OJfLZjCJMA=\ngithub.com/jmoiron/sqlx v1.2.0/go.mod h1:1FEQNm3xlJgrMD+FBdI9+xvCksHtbpVBBw5dYhBSsks=\ngithub.com/jonboulle/clockwork v0.1.0/go.mod h1:Ii8DK3G1RaLaWxj9trq07+26W01tbo22gdxWY5EU2bo=\ngithub.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=\ngithub.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.3.0 h1:/qkRGz8zljWiDcFvgpwUpwIAPu3r07TDvs3Rws+o/pU=\ngithub.com/lib/pq v1.3.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/mailgun/mailgun-go/v4 v4.1.0 h1:uLpVaYVGUn140doqoYoWscVnFis6x+0c8befRvXG6Z4=\ngithub.com/mailgun/mailgun-go/v4 v4.1.0/go.mod h1:R9kHUQBptF4iSEjhriCQizplCDwrnDShy8w/iPiOfaM=\ngithub.com/mailru/easyjson v0.7.0 h1:aizVhC/NAAcKWb+5QsU1iNOZb4Yws5UO2I+aIprQITM=\ngithub.com/mailru/easyjson v0.7.0/go.mod h1:KAzv3t3aY1NaHWoQz1+4F1ccyAH66Jk7yos7ldAVICs=\ngithub.com/mattn/go-colorable v0.1.4 h1:snbPLB8fVfU9iwbbo30TPtbLRzwWu6aJS6Xh4eaaviA=\ngithub.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.11 h1:FxPOTFNqGkuDUGi3H/qkUbQO4ZiBa2brKq5r0l8TGeM=\ngithub.com/mattn/go-isatty v0.0.11/go.mod h1:PhnuNfih5lzO57/f3n+odYbM4JtupLOxQOAqxQCu2WE=\ngithub.com/mattn/go-sqlite3 v1.9.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/mattn/go-sqlite3 v2.0.3+incompatible h1:gXHsfypPkaMZrKbD5209QV9jbUTJKjyR5WD3HYQSd+U=\ngithub.com/mattn/go-sqlite3 v2.0.3+incompatible/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/microsoft/ApplicationInsights-Go v0.4.3 h1:gBuy5rM3o6Zo69QTkq1Ens8wx6sVf+mpgMjjfayiRcw=\ngithub.com/microsoft/ApplicationInsights-Go v0.4.3/go.mod h1:ih0t3h84PdzV1qGeUs89o9wL8eCuwf24M7TZp/nyqXk=\ngithub.com/miekg/dns v1.1.29 h1:xHBEhR+t5RzcFJjBLJlax2daXOrTYtr9z4WdKEfWFzg=\ngithub.com/miekg/dns v1.1.29/go.mod h1:KNUDUusw/aVsxyTYZM1oqvCicbwhgbNgztCETuNZ7xM=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/oklog/ulid v1.3.1/go.mod h1:CirwcVhetQ6Lv90oh/F+FBtV6XMibvdAFo93nm5qn4U=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.8.0 h1:VkHVNpR4iVnU8XQR6DBm8BqYjN7CRzw+xKUbVVbbW9w=\ngithub.com/onsi/ginkgo v1.8.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/gomega v1.5.0 h1:izbySO9zDPmjJ8rDjLvkA2zJHIo+HkYXHnf7eN7SSyo=\ngithub.com/onsi/gomega v1.5.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/parnurzeal/gorequest v0.2.16 h1:T/5x+/4BT+nj+3eSknXmCTnEVGSzFzPGdpqmUVVZXHQ=\ngithub.com/parnurzeal/gorequest v0.2.16/go.mod h1:3Kh2QUMJoqw3icWAecsyzkpY7UzRfDhbRdTjtNwNiUE=\ngithub.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v0.9.3/go.mod h1:/TN21ttK/J9q6uSwhBd54HahCDft0ttaMvbicHlPoso=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/common v0.0.0-20181113130724-41aa239b4cce/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/common v0.4.0/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20190507164030-5867b95ac084/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/tsdb v0.7.1/go.mod h1:qhTCs0VvXwvX/y3TZrWD7rabWM+ijKTux40TwIPHuXU=\ngithub.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af/go.mod h1:XWv6SoW27p1b0cqNHllgS5HIMJraePCO15w5zCzIWYg=\ngithub.com/rogpeppe/go-charset v0.0.0-20180617210344-2471d30d28b4/go.mod h1:qgYeAmZ5ZIpBWTGllZSQnw97Dj+woV0toclVaRGI8pc=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/satori/go.uuid v1.2.0 h1:0uYX9dsZ2yD7q2RtLRtPSdGDWzjeM3TbMJP9utgA0ww=\ngithub.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d h1:zE9ykElWQ6/NYmHa3jpm/yHnI4xSofP+UP6SpjHcSeM=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/goconvey v1.6.4 h1:fv0U8FUIMPNf1L9lnHLvLhgicrIVChEkdzIKYqbNC9s=\ngithub.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=\ngithub.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=\ngithub.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cobra v0.0.7 h1:FfTH+vuMXOas8jmfb5/M7dzEYx7LpcLb7a0LPe34uOU=\ngithub.com/spf13/cobra v0.0.7/go.mod h1:/6GTrnGXV9HjY+aR4k0oJ5tcvakLuG6EuKReYlHNrgE=\ngithub.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=\ngithub.com/spf13/pflag v1.0.3 h1:zPAT6CGy6wXeQ7NtTnaTerfKOsV6V6F8agHXFiazDkg=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/viper v1.4.0/go.mod h1:PTJ7Z/lr49W6bUbkmS1V3by4uWynFiR9p7+dSq/yZzE=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.5.1 h1:nOGnQDM7FYENwehXlg/kFVnos3rEvtKTjRvOWSzb6H4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/tedsuo/ifrit v0.0.0-20180802180643-bea94bb476cc h1:LUUe4cdABGrIJAhl1P1ZpWY76AwukVszFdwkVFVLwIk=\ngithub.com/tedsuo/ifrit v0.0.0-20180802180643-bea94bb476cc/go.mod h1:eyZnKCc955uh98WQvzOm0dgAeLnf2O0Rz0LPoC5ze+0=\ngithub.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=\ngithub.com/ugorji/go v1.1.4/go.mod h1:uQMGLiO92mf5W77hV/PUCpI3pbzQx3CRekS0kk+RGrc=\ngithub.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=\ngithub.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngo.etcd.io/bbolt v1.3.2/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=\ngo.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=\ngo.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=\ngolang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\ngolang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d h1:TzXSXBo42m9gQenoE3b9BGiEpg5IG2JkU5FkPIawgtw=\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190924154521-2837fb4f24fe/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191216052735-49a3e744a425/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0 h1:/wp5JvzpHIxhs/dumFmF7BXTf3Z+dd4uXta4kVyO508=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.21.0/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/alexcesaro/quotedprintable.v3 v3.0.0-20150716171945-2caba252f4dc h1:2gGKlE2+asNV9m7xrywl36YYNnBG5ZQ0r/BOOxqPpmk=\ngopkg.in/alexcesaro/quotedprintable.v3 v3.0.0-20150716171945-2caba252f4dc/go.mod h1:m7x9LTH6d71AHyAX77c9yqWCCa3UKHcVEj9y7hAtKDk=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/fsnotify.v1 v1.4.7 h1:xOHLXZwVvI9hhs+cLKq5+I5onOuwQLhQwiu63xxlHs4=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/gomail.v2 v2.0.0-20160411212932-81ebce5c23df h1:n7WqCuqOuCbNr617RXOY0AWRXxgwEyPp2z+p0+hgMuE=\ngopkg.in/gomail.v2 v2.0.0-20160411212932-81ebce5c23df/go.mod h1:LRQQ+SO6ZHR7tOkpBDuZnXENFzX8qRjMDMyPD6BRkCw=\ngopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7/go.mod h1:JAlM8MvJe8wmxCU4Bli9HhUf9+ttbYbLASfIpnQbh74=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2 h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nmoul.io/http2curl v1.0.0 h1:6XwpyZOYsgZJrU8exnG87ncVkU1FVCcTRpwzOkTDUi8=\nmoul.io/http2curl v1.0.0/go.mod h1:f6cULg+e4Md/oW1cYmwW4IWQOVl2lGbmCNGOHvzX2kE=\n"
        },
        {
          "name": "interfaces.go",
          "type": "blob",
          "size": 1.544921875,
          "content": "package checkup\n\nimport (\n\t\"github.com/sourcegraph/checkup/types\"\n)\n\n// Checker can create a types.Result.\ntype Checker interface {\n\tType() string\n\tCheck() (types.Result, error)\n}\n\n// Storage can store results.\ntype Storage interface {\n\tType() string\n\tStore([]types.Result) error\n}\n\n// StorageReader can read results from the Storage.\ntype StorageReader interface {\n\t// Fetch returns the contents of a check file.\n\tFetch(checkFile string) ([]types.Result, error)\n\t// GetIndex returns the storage index, as a map where keys are check\n\t// result filenames and values are the associated check timestamps.\n\tGetIndex() (map[string]int64, error)\n}\n\n// Maintainer can maintain a store of results by\n// deleting old check files that are no longer\n// needed or performing other required tasks.\ntype Maintainer interface {\n\tMaintain() error\n}\n\n// Notifier can notify ops or sysadmins of\n// potential problems. A Notifier should keep\n// state to avoid sending repeated notices\n// more often than the admin would like.\ntype Notifier interface {\n\tType() string\n\tNotify([]types.Result) error\n}\n\n// Provisioner is a type of storage mechanism that can\n// provision itself for use with checkup. Provisioning\n// need only happen once and is merely a convenience\n// so that the user can get up and running with their\n// status page more quickly. Presumably, the info\n// returned from Provision should be used on the status\n// page side of things ot access the check files (like\n// a key pair that is used for read-only access).\ntype Provisioner interface {\n\tProvision() (types.ProvisionInfo, error)\n}\n"
        },
        {
          "name": "notifier.go",
          "type": "blob",
          "size": 0.69921875,
          "content": "package checkup\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/sourcegraph/checkup/notifier/discord\"\n\t\"github.com/sourcegraph/checkup/notifier/mail\"\n\t\"github.com/sourcegraph/checkup/notifier/mailgun\"\n\t\"github.com/sourcegraph/checkup/notifier/pushover\"\n\t\"github.com/sourcegraph/checkup/notifier/slack\"\n)\n\nfunc notifierDecode(typeName string, config json.RawMessage) (Notifier, error) {\n\tswitch typeName {\n\tcase mail.Type:\n\t\treturn mail.New(config)\n\tcase slack.Type:\n\t\treturn slack.New(config)\n\tcase mailgun.Type:\n\t\treturn mailgun.New(config)\n\tcase pushover.Type:\n\t\treturn pushover.New(config)\n\tcase discord.Type:\n\t\treturn discord.New(config)\n\tdefault:\n\t\treturn nil, fmt.Errorf(errUnknownNotifierType, typeName)\n\t}\n}\n"
        },
        {
          "name": "notifier",
          "type": "tree",
          "content": null
        },
        {
          "name": "statuspage",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage.go",
          "type": "blob",
          "size": 0.9580078125,
          "content": "package checkup\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/sourcegraph/checkup/storage/appinsights\"\n\t\"github.com/sourcegraph/checkup/storage/fs\"\n\t\"github.com/sourcegraph/checkup/storage/github\"\n\t\"github.com/sourcegraph/checkup/storage/mysql\"\n\t\"github.com/sourcegraph/checkup/storage/postgres\"\n\t\"github.com/sourcegraph/checkup/storage/s3\"\n\t\"github.com/sourcegraph/checkup/storage/sql\"\n\t\"github.com/sourcegraph/checkup/storage/sqlite3\"\n)\n\nfunc storageDecode(typeName string, config json.RawMessage) (Storage, error) {\n\tswitch typeName {\n\tcase sqlite3.Type:\n\t\treturn sqlite3.New(config)\n\tcase mysql.Type:\n\t\treturn mysql.New(config)\n\tcase postgres.Type:\n\t\treturn postgres.New(config)\n\tcase s3.Type:\n\t\treturn s3.New(config)\n\tcase github.Type:\n\t\treturn github.New(config)\n\tcase fs.Type:\n\t\treturn fs.New(config)\n\tcase sql.Type:\n\t\treturn sql.New(config)\n\tcase appinsights.Type:\n\t\treturn appinsights.New(config)\n\tdefault:\n\t\treturn nil, fmt.Errorf(errUnknownStorageType, typeName)\n\t}\n}\n"
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "types",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}