{
  "metadata": {
    "timestamp": 1736566917198,
    "page": 490,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "qax-os/goreporter",
      "stars": 3131,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.265625,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n*.json"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2001953125,
          "content": "language: go\n\ninstall:\n  - go get -d -t -v ./... && go build -v ./...\n\ngo:\n  - 1.7\n  - 1.8\n  - 1.9\n  - tip\n\nscript:\n  - ./go.test.sh\n  - go build\n\nafter_success:\n  - bash <(curl -s https://codecov.io/bash)"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1396484375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at liangcszzu@163.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 16.6826171875,
          "content": "# Contributing to GoReporter\n\nWant to hack on GoReporter? Awesome! This page contains information about reporting issues as well as some tips and\nguidelines useful to experienced open source contributors. Finally, make sure\nyou read our [community guidelines](#goreporter-community-guidelines) before you\nstart participating.\n\n## Topics\n\n* [Reporting Security Issues](#reporting-security-issues)\n* [Design and Cleanup Proposals](#design-and-cleanup-proposals)\n* [Reporting Issues](#reporting-other-issues)\n* [Quick Contribution Tips and Guidelines](#quick-contribution-tips-and-guidelines)\n* [Community Guidelines](#community-guidelines)\n\n## Reporting security issues\n\nThe GoReporter maintainers take security seriously. If you discover a security\nissue, please bring it to their attention right away!\n\nPlease **DO NOT** file a public issue, instead send your report privately to\n[iamwgliang@email.com](mailto:iamwgliang@email.com).\n\nSecurity reports are greatly appreciated and we will publicly thank you for it.\nWe currently do not offer a paid security bounty program, but are not\nruling it out in the future.\n\n\n## Reporting other issues\n\nA great way to contribute to the project is to send a detailed report when you\nencounter an issue. We always appreciate a well-written, thorough bug report,\nand will thank you for it!\n\nCheck that [our issue database](https://github.com/360EntSecGroup-Skylar/goreporter/issues)\ndoesn't already include that problem or suggestion before submitting an issue.\nIf you find a match, you can use the \"subscribe\" button to get notified on\nupdates. Do *not* leave random \"+1\" or \"I have this too\" comments, as they\nonly clutter the discussion, and don't help resolving it. However, if you\nhave ways to reproduce the issue or have additional information that may help\nresolving the issue, please leave a comment.\n\nWhen reporting issues, always include the output of `go env`.\n\nAlso include the steps required to reproduce the problem if possible and\napplicable. This information will help us review and fix your issue faster.\nWhen sending lengthy log-files, consider posting them as a gist (https://gist.github.com).\nDon't forget to remove sensitive data from your logfiles before posting (you can\nreplace those parts with \"REDACTED\").\n\n## Quick contribution tips and guidelines\n\nThis section gives the experienced contributor some tips and guidelines.\n\n### Pull requests are always welcome\n\nNot sure if that typo is worth a pull request? Found a bug and know how to fix\nit? Do it! We will appreciate it. Any significant improvement should be\ndocumented as [a GitHub issue](https://github.com/360EntSecGroup-Skylar/goreporter/issues) before\nanybody starts working on it.\n\nWe are always thrilled to receive pull requests. We do our best to process them\nquickly. If your pull request is not accepted on the first try,\ndon't get discouraged!\n\n### Design and cleanup proposals\n\nYou can propose new designs for existing GoReporter features. You can also design\nentirely new features. We really appreciate contributors who want to refactor or\notherwise cleanup our project.\n\nWe try hard to keep GoReporter lean and focused. GoReporter can't do everything for\neverybody. This means that we might decide against incorporating a new feature.\nHowever, there might be a way to implement that feature *on top of* GoReporter.\n\n### Conventions\n\nFork the repository and make changes on your fork in a feature branch:\n\n- If it's a bug fix branch, name it XXXX-something where XXXX is the number of\n    the issue.\n- If it's a feature branch, create an enhancement issue to announce\n    your intentions, and name it XXXX-something where XXXX is the number of the\n    issue.\n\nSubmit unit tests for your changes. Go has a great test framework built in; use\nit! Take a look at existing tests for inspiration. Run the full test on your branch before\nsubmitting a pull request.\n\nUpdate the documentation when creating or modifying features. Test your\ndocumentation changes for clarity, concision, and correctness, as well as a\nclean documentation build.\n\nWrite clean code. Universally formatted code promotes ease of writing, reading,\nand maintenance. Always run `gofmt -s -w file.go` on each changed file before\ncommitting your changes. Most editors have plug-ins that do this automatically.\n\nPull request descriptions should be as clear as possible and include a reference\nto all the issues that they address.\n\n### Successful Changes\n\nBefore contributing large or high impact changes, make the effort to coordinate\nwith the maintainers of the project before submitting a pull request. This\nprevents you from doing extra work that may or may not be merged.\n\nLarge PRs that are just submitted without any prior communication are unlikely\nto be successful.\n\nWhile pull requests are the methodology for submitting changes to code, changes\nare much more likely to be accepted if they are accompanied by additional\nengineering work. While we don't define this explicitly, most of these goals\nare accomplished through communication of the design goals and subsequent\nsolutions. Often times, it helps to first state the problem before presenting\nsolutions.\n\nTypically, the best methods of accomplishing this are to submit an issue,\nstating the problem. This issue can include a problem statement and a\nchecklist with requirements. If solutions are proposed, alternatives should be\nlisted and eliminated. Even if the criteria for elimination of a solution is\nfrivolous, say so.\n\nLarger changes typically work best with design documents. These are focused on\nproviding context to the design at the time the feature was conceived and can\ninform future documentation contributions.\n\n### Commit Messages\n\nCommit messages must start with a capitalized and short summary\nwritten in the imperative, followed by an optional, more detailed explanatory\ntext which is separated from the summary by an empty line.\n\nCommit messages should follow best practices, including explaining the context\nof the problem and how it was solved, including in caveats or follow up changes\nrequired. They should tell the story of the change and provide readers\nunderstanding of what led to it.\n\nIn practice, the best approach to maintaining a nice commit message is to\nleverage a `git add -p` and `git commit --amend` to formulate a solid\nchangeset. This allows one to piece together a change, as information becomes\navailable.\n\nIf you squash a series of commits, don't just submit that. Re-write the commit\nmessage, as if the series of commits was a single stroke of brilliance.\n\nThat said, there is no requirement to have a single commit for a PR, as long as\neach commit tells the story. For example, if there is a feature that requires a\npackage, it might make sense to have the package in a separate commit then have\na subsequent commit that uses it.\n\nRemember, you're telling part of the story with the commit message. Don't make\nyour chapter weird.\n\n### Review\n\nCode review comments may be added to your pull request. Discuss, then make the\nsuggested modifications and push additional commits to your feature branch. Post\na comment after pushing. New commits show up in the pull request automatically,\nbut the reviewers are notified only when you comment.\n\nPull requests must be cleanly rebased on top of master without multiple branches\nmixed into the PR.\n\n**Git tip**: If your PR no longer merges cleanly, use `rebase master` in your\nfeature branch to update your pull request rather than `merge master`.\n\nBefore you make a pull request, squash your commits into logical units of work\nusing `git rebase -i` and `git push -f`. A logical unit of work is a consistent\nset of patches that should be reviewed together: for example, upgrading the\nversion of a vendored dependency and taking advantage of its now available new\nfeature constitute two separate units of work. Implementing a new function and\ncalling it in another file constitute a single logical unit of work. The very\nhigh majority of submissions should have a single commit, so if in doubt: squash\ndown to one.\n\nAfter every commit, make sure the test passes. Include documentation\nchanges in the same pull request so that a revert would remove all traces of\nthe feature or fix.\n\nInclude an issue reference like `Closes #XXXX` or `Fixes #XXXX` in commits that\nclose an issue. Including references automatically closes the issue on a merge.\n\nPlease see the [Coding Style](#coding-style) for further guidelines.\n\n### Merge approval\n\nGoReporter maintainers use LGTM (Looks Good To Me) in comments on the code review to\nindicate acceptance.\n\n### Sign your work\n\nThe sign-off is a simple line at the end of the explanation for the patch. Your\nsignature certifies that you wrote the patch or otherwise have the right to pass\nit on as an open-source patch. The rules are pretty simple: if you can certify\nthe below (from [developercertificate.org](http://developercertificate.org/)):\n\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\nThen you just add a line to every git commit message:\n\n    Signed-off-by: Jack Wang <iamwgliang@email.com>\n\nUse your real name (sorry, no pseudonyms or anonymous contributions.)\n\nIf you set your `user.name` and `user.email` git configs, you can sign your\ncommit automatically with `git commit -s`.\n\n### How can I become a maintainer?\n\nFirst, all maintainers have 3 things\n\n- They share responsibility in the project's success.\n- They have made a long-term, recurring time investment to improve the project.\n- They spend that time doing whatever needs to be done, not necessarily what\nis the most interesting or fun.\n\nMaintainers are often under-appreciated, because their work is harder to appreciate.\nIt's easy to appreciate a really cool and technically advanced feature. It's harder\nto appreciate the absence of bugs, the slow but steady improvement in stability,\nor the reliability of a release process. But those things distinguish a good\nproject from a great one.\n\nDon't forget: being a maintainer is a time investment. Make sure you\nwill have time to make yourself available. You don't have to be a\nmaintainer to make a difference on the project!\n\nIf you want to become a meintainer, contact Jack Wang <iamwgliang@email.com> and given a introduction of you.\n\n## Community guidelines\n\nWe want to keep the community awesome, growing and collaborative. We need\nyour help to keep it that way. To help with this we've come up with some general\nguidelines for the community as a whole:\n\n* Be nice: Be courteous, respectful and polite to fellow community members:\n  no regional, racial, gender, or other abuse will be tolerated. We like\n  nice people way better than mean ones!\n\n* Encourage diversity and participation: Make everyone in our community feel\n  welcome, regardless of their background and the extent of their\n  contributions, and do everything possible to encourage participation in\n  our community.\n\n* Keep it legal: Basically, don't get us in trouble. Share only content that\n  you own, do not share private or sensitive information, and don't break\n  the law.\n\n* Stay on topic: Make sure that you are posting to the correct channel and\n  avoid off-topic discussions. Remember when you update an issue or respond\n  to an email you are potentially sending to a large number of people. Please\n  consider this before you update. Also remember that nobody likes spam.\n\n* Don't send email to the maintainers: There's no need to send email to the\n  maintainers to ask them to investigate an issue or to take a look at a\n  pull request. Instead of sending an email, GitHub mentions should be\n  used to ping maintainers to review a pull request, a proposal or an\n  issue.\n\n### Guideline violations — 3 strikes method\n\nThe point of this section is not to find opportunities to punish people, but we\ndo need a fair way to deal with people who are making our community suck.\n\n1. First occurrence: We'll give you a friendly, but public reminder that the\n   behavior is inappropriate according to our guidelines.\n\n2. Second occurrence: We will send you a private message with a warning that\n   any additional violations will result in removal from the community.\n\n3. Third occurrence: Depending on the violation, we may need to delete or ban\n   your account.\n\n**Notes:**\n\n* Obvious spammers are banned on first occurrence. If we don't do this, we'll\n  have spam all over the place.\n\n* Violations are forgiven after 6 months of good behavior, and we won't hold a\n  grudge.\n\n* People who commit minor infractions will get some education, rather than\n  hammering them in the 3 strikes process.\n\n* The rules apply equally to everyone in the community, no matter how much\n    you've contributed.\n\n* Extreme violations of a threatening, abusive, destructive or illegal nature\n    will be addressed immediately and are not subject to 3 strikes or forgiveness.\n\n* Contact Jack Wang <iamwgliang@email.com> to report abuse or appeal violations. In the case of\n    appeals, we know that mistakes happen, and we'll work with you to come up with a\n    fair solution if there has been a misunderstanding.\n\n## Coding Style\n\nUnless explicitly stated, we follow all coding guidelines from the Go\ncommunity. While some of these standards may seem arbitrary, they somehow seem\nto result in a solid, consistent codebase.\n\nIt is possible that the code base does not currently comply with these\nguidelines. We are not looking for a massive PR that fixes this, since that\ngoes against the spirit of the guidelines. All new contributions should make a\nbest effort to clean up and make the code base better than they left it.\nObviously, apply your best judgement. Remember, the goal here is to make the\ncode base easier for humans to navigate and understand. Always keep that in\nmind when nudging others to comply.\n\nThe rules:\n\n1. All code should be formatted with `gofmt -s`.\n2. All code should pass the default levels of\n   [`golint`](https://github.com/golang/lint).\n3. All code should follow the guidelines covered in [Effective\n   Go](http://golang.org/doc/effective_go.html) and [Go Code Review\n   Comments](https://github.com/golang/go/wiki/CodeReviewComments).\n4. Comment the code. Tell us the why, the history and the context.\n5. Document _all_ declarations and methods, even private ones. Declare\n   expectations, caveats and anything else that may be important. If a type\n   gets exported, having the comments already there will ensure it's ready.\n6. Variable name length should be proportional to its context and no longer.\n   `noCommaALongVariableNameLikeThisIsNotMoreClearWhenASimpleCommentWouldDo`.\n   In practice, short methods will have short variable names and globals will\n   have longer names.\n7. No underscores in package names. If you need a compound name, step back,\n   and re-examine why you need a compound name. If you still think you need a\n   compound name, lose the underscore.\n8. No utils or helpers packages. If a function is not general enough to\n   warrant its own package, it has not been written generally enough to be a\n   part of a util package. Just leave it unexported and well-documented.\n9. All tests should run with `go test` and outside tooling should not be\n   required. No, we don't need another unit testing framework. Assertion\n   packages are acceptable if they provide _real_ incremental value.\n10. Even though we call these \"rules\" above, they are actually just\n    guidelines. Since you've read all the rules, you now know that.\n\nIf you are having trouble getting into the mood of idiomatic Go, we recommend\nreading through [Effective Go](https://golang.org/doc/effective_go.html). The\n[Go Blog](https://blog.golang.org) is also a great resource. Drinking the\nkool-aid is a lot easier than going thirsty.\n"
        },
        {
          "name": "DISPLAY.gif",
          "type": "blob",
          "size": 874.1845703125,
          "content": null
        },
        {
          "name": "Godeps",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6484375,
          "content": "![goreporter](./logo.png)\n\n# goreporter [![Version Status](https://img.shields.io/badge/v3.0-release-blue.svg)](https://github.com/360EntSecGroup-Skylar/goreporter/releases/tag/version3.0)\n\n[![Current Release](https://img.shields.io/github/release/360EntSecGroup-Skylar/goreporter.svg)](https://github.com/360EntSecGroup-Skylar/goreporter/releases/latest)\n[![Build Status](https://travis-ci.org/360EntSecGroup-Skylar/goreporter.svg?branch=master)](https://travis-ci.org/360EntSecGroup-Skylar/goreporter)\n[![GoDoc](https://godoc.org/github.com/360EntSecGroup-Skylar/goreporter?status.svg)](https://godoc.org/github.com/360EntSecGroup-Skylar/goreporter)\n[![License](https://img.shields.io/badge/LICENSE-Apache2.0-ff69b4.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)\n\nA Golang tool that does static analysis, unit testing, code review and generate code quality report. This is a tool that concurrently runs a whole bunch of those linters and normalizes their output to a report:\n\n<!-- MarkdownTOC -->\n\n- [Supported linters](#supported-linters)\n- [Supported template](#supported-template)\n- [Todo List](#todo-list)\n- [Installing](#installing)\n  - [Requirements](#requirements)\n- [Run it](#run-it)\n- [Quickstart](#quickstart)\n- [Example](#example)\n- [Report-example](#report-example)\n- [Credits](#credits)\n\n<!-- /MarkdownTOC -->\n\n## Supported linters\n\n- [gofmt](https://golang.org/cmd/gofmt) - Checks if the code is properly formatted and could not be further simplified.\n- [govet](https://golang.org/cmd/vet/#hdr-Shadowed_variables) - Reports variables that may have been unintentionally shadowed.\n- [golint](https://github.com/golang/lint) - Golint is a linter for Go source code.\n- [unittest](https://github.com/360EntSecGroup-Skylar/goreporter/tree/master/linters/unittest) - Golang unit test status.\n- [deadcode](https://github.com/tsenart/deadcode) - Finds unused code.\n- [gocyclo](https://github.com/alecthomas/gocyclo) - Computes the cyclomatic complexity of functions.\n- [varcheck](https://github.com/opennota/check) - Find unused global variables and constants.\n- [structcheck](https://github.com/opennota/check) - Find unused struct fields.\n- [aligncheck](https://github.com/opennota/check) - Warn about un-optimally aligned structures.\n- [errcheck](https://github.com/kisielk/errcheck) - Check that error return values are used.\n- ~~[copycode(dupl)](https://github.com/mibk/dupl) - Reports potentially duplicated code.~~\n- [gosimple](https://github.com/dominikh/go-tools/tree/master/cmd/gosimple) - Report simplifications in code.\n- [staticcheck](https://github.com/dominikh/go-tools/tree/master/cmd/staticcheck) - Statically detect bugs, both obvious and subtle ones.\n- [godepgraph](https://github.com/kisielk/godepgraph) - Godepgraph is a program for generating a dependency graph of Go packages.\n- [misspell](https://github.com/client9/misspell) - Correct commonly misspelled English words... quickly.\n- [countcode](https://github.com/bytbox/sloc) - Count lines and files of project.\n- [interfacer](https://github.com/mvdan/interfacer) - Suggest narrower interfaces that can be used.\n- [depth](https://github.com/360EntSecGroup-Skylar/goreporter/tree/feature-3.0/linters/depth) - Count the maxdepth of go functions.\n- [flen](https://github.com/lafolle/flen) - Flen provides stats on functions/methods lengths in a Golang package.\n\n## Template\n\n- html template file which can be loaded via `-t <file>`.\n\n## Todo List\n\n- This version will re-design the template.\n- Add interfacer and safesql and gofmt(-s),govet linter.\n\n## Installing\n\n### Requirements\n\n- [Go](https://golang.org/dl/) 1.6+\n- [Graphviz](http://www.graphviz.org/download/)\n\n## Quickstart\n\nInstall goreporter (see above).\n\n```bash\ngo get -u github.com/360EntSecGroup-Skylar/goreporter\n```\n\n## Run it:\n\n### NOTE\n\nYou have to confirm that your project is operational. In particular, the problem with vendor, when the package is not found in the default path, goreporter will look again from the possible vendor path.\n\n```bash\ngoreporter -p [projectRelativePath] -r [reportPath] -e [exceptPackagesName] -f [json/html/text]  {-t templatePathIfHtml}\n```\n\n- -version Version of GoReporter.\n- -p Must be a valid Golang project path.\n- -r Save the path to the report.\n- -e Exceptional packages (multiple separated by commas, for example: \"linters/aligncheck,linters/cyclo\" ).\n- -f report format json, html OR text.\n- -t Template path,if not specified, the default template will be used.\n\nBy default, the default template is used to generate reports in html format.\n\n## Example\n\n![goreporter-display](./DISPLAY.gif)\n\nyou can see result detail:[online-example-report](http://wgliang.github.io/pages/goreporter-report.html)\n\n## Credits\n\nLogo is designed by [Ri Xu](https://github.com/xuri)\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.test.sh",
          "type": "blob",
          "size": 0.2587890625,
          "content": "#!/usr/bin/env bash\n\nset -e\necho \"\" > coverage.txt\n\nfor d in $(go list ./... | grep -v linters); do\n    go test -coverprofile=profile.out -covermode=atomic $d\n    if [ -f profile.out ]; then\n        cat profile.out >> coverage.txt\n        rm profile.out\n    fi\ndone"
        },
        {
          "name": "linters",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 122.759765625,
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 4.994140625,
          "content": "// Copyright 2017 The GoReporter Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// GoReporter is a Golang tool that does static analysis, unit testing, code\n// review and generate code quality report.\n\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"runtime\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/360EntSecGroup-Skylar/goreporter/engine\"\n\t\"github.com/360EntSecGroup-Skylar/goreporter/engine/processbar\"\n\t\"github.com/facebookgo/inject\"\n)\n\n// Received parameters, you can control some features using:\n//\n// -p:Specify the relative path of your project(Must Be Relative path),\n//    by default, the current path is used\n// -r:Specifies the save path for the generated report,\n//    by default, the current path is used\n// -e:Ignored detection of packages and multiple packages separated by commas.\n// -t:Customize the path of the report template, not necessarily using the\n//    default report template\n// -f:Set the format to generate reports, support text, html and json,not\n//    necessarily using the default formate-html.\n\nconst VERSION = \"v3.0.0\"\n\nvar (\n\tversion        = flag.Bool(\"version\", false, \"print GoReporter version.\")\n\tprojectPath    = flag.String(\"p\", \"\", \"path of project.\")\n\treportPath     = flag.String(\"r\", \"\", \"path of report.\")\n\texceptPackages = flag.String(\"e\", \"\", \"except packages.\")\n\ttemplatePath   = flag.String(\"t\", \"\", \"report html template path.\")\n\treportFormat   = flag.String(\"f\", \"\", \"project report format(text/json/html).\")\n\tcoresOfCPU     = flag.Int(\"c\", -1, \"cores of CPU.\")\n)\n\nfunc main() {\n\tflag.Parse()\n\tif *coresOfCPU != -1 && *coresOfCPU <= runtime.NumCPU() {\n\t\truntime.GOMAXPROCS(*coresOfCPU)\n\t}\n\tif *version {\n\t\tfmt.Printf(\"GoReporter %s\\r\\n\", VERSION)\n\t\tos.Exit(0)\n\t}\n\n\tif *projectPath == \"\" {\n\t\tlog.Fatal(\"The project path is not specified\")\n\t} else {\n\t\t_, err := os.Stat(*projectPath)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"project path is invalid\")\n\t\t}\n\t}\n\n\tvar templateHtml string\n\tif *templatePath == \"\" {\n\t\ttemplateHtml = engine.DefaultTpl\n\t\tlog.Println(\"The template path is not specified,and will use the default template\")\n\t} else {\n\t\tif !strings.HasSuffix(*templatePath, \".html\") {\n\t\t\tlog.Println(\"The template file is not a html template\")\n\t\t}\n\t\tfileData, err := ioutil.ReadFile(*templatePath)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t} else {\n\t\t\ttemplateHtml = string(fileData)\n\t\t}\n\t}\n\n\tif *reportPath == \"\" {\n\t\tlog.Println(\"The report path is not specified, and the current path is used by default\")\n\t} else {\n\t\t_, err := os.Stat(*reportPath)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"report path is invalid:\", err)\n\t\t}\n\t}\n\n\tif *exceptPackages == \"\" {\n\t\tlog.Println(\"There are no packages that are excepted, review all items of the package\")\n\t}\n\n\tsynchronizer := &engine.Synchronizer{\n\t\tLintersProcessChans:   make(chan int64, 20),\n\t\tLintersFinishedSignal: make(chan string, 10),\n\t}\n\tsyncRW := &sync.RWMutex{}\n\twaitGW := &engine.WaitGroupWrapper{}\n\n\treporter := engine.NewReporter(*projectPath, *reportPath, *reportFormat, templateHtml)\n\tstrategyCountCode := &engine.StrategyCountCode{}\n\tstrategyCyclo := &engine.StrategyCyclo{}\n\tstrategyDeadCode := &engine.StrategyDeadCode{}\n\tstrategyDependGraph := &engine.StrategyDependGraph{}\n\tstrategyDepth := &engine.StrategyDepth{}\n\tstrategyImportPackages := &engine.StrategyImportPackages{}\n\tstrategyInterfacer := &engine.StrategyInterfacer{}\n\tstrategySimpleCode := &engine.StrategySimpleCode{}\n\tstrategySpellCheck := &engine.StrategySpellCheck{}\n\tstrategyUnitTest := &engine.StrategyUnitTest{}\n\tstrategyLint := &engine.StrategyLint{}\n\tstrategyGoVet := &engine.StrategyGoVet{}\n\tstrategyGoFmt := &engine.StrategyGoFmt{}\n\n\tif err := inject.Populate(\n\t\treporter,\n\t\tsynchronizer,\n\t\tstrategyCountCode,\n\t\tstrategyCyclo,\n\t\tstrategyDeadCode,\n\t\tstrategyDependGraph,\n\t\tstrategyDepth,\n\t\tstrategyImportPackages,\n\t\tstrategyInterfacer,\n\t\tstrategySimpleCode,\n\t\tstrategySpellCheck,\n\t\tstrategyUnitTest,\n\t\tstrategyLint,\n\t\tstrategyGoVet,\n\t\tstrategyGoFmt,\n\t\tsyncRW,\n\t\twaitGW,\n\t); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treporter.AddLinters(strategyCountCode, strategyCyclo, strategyDeadCode, strategyDependGraph,\n\t\tstrategyDepth, strategyImportPackages, strategyInterfacer, strategySimpleCode,\n\t\tstrategySpellCheck, strategyUnitTest, strategyLint, strategyGoVet, strategyGoFmt)\n\n\tgo processbar.LinterProcessBar(synchronizer.LintersProcessChans, synchronizer.LintersFinishedSignal)\n\n\tif err := reporter.Report(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif err := reporter.Render(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tlog.Println(fmt.Sprintf(\"GoReporter Finished,time consuming %vs\", time.Since(reporter.StartTime).Seconds()))\n}\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}