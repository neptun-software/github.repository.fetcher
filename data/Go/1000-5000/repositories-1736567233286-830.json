{
  "metadata": {
    "timestamp": 1736567233286,
    "page": 830,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pquerna/otp",
      "stars": 2405,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.080078125,
          "content": "arch:\n  - amd64\n  - ppc64le\nlanguage: go\n\nenv:\n  - GO111MODULE=on\n\ngo:\n  - \"1.15\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.1181640625,
          "content": "otp\nCopyright (c) 2014, Paul Querna\n\nThis product includes software developed by \nPaul Querna (http://paul.querna.org/).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.4931640625,
          "content": "# otp: One Time Password utilities Go / Golang\n\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/pquerna/otp)](https://pkg.go.dev/github.com/pquerna/otp) [![Build Status](https://travis-ci.org/pquerna/otp.svg?branch=master)](https://travis-ci.org/pquerna/otp)\n\n# Why One Time Passwords?\n\nOne Time Passwords (OTPs) are an mechanism to  improve security over passwords alone. When a Time-based OTP (TOTP) is stored on a user's phone, and combined with something the user knows (Password), you have an easy on-ramp to [Multi-factor authentication](http://en.wikipedia.org/wiki/Multi-factor_authentication) without adding a dependency on a SMS provider.  This Password and TOTP combination is used by many popular websites including Google, GitHub, Facebook, Salesforce and many others.\n\nThe `otp` library enables you to easily add TOTPs to your own application, increasing your user's security against mass-password breaches and malware.\n\nBecause TOTP is standardized and widely deployed, there are many [mobile clients and software implementations](http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm#Client_implementations).\n\n## `otp` Supports:\n\n* Generating QR Code images for easy user enrollment.\n* Time-based One-time Password Algorithm (TOTP) (RFC 6238): Time based OTP, the most commonly used method.\n* HMAC-based One-time Password Algorithm (HOTP) (RFC 4226): Counter based OTP, which TOTP is based upon.\n* Generation and Validation of codes for either algorithm.\n\n## Implementing TOTP in your application:\n\n### User Enrollment\n\nFor an example of a working enrollment work flow, [GitHub has documented theirs](https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/\n),  but the basics are:\n\n1. Generate new TOTP Key for a User. `key,_ := totp.Generate(...)`.\n1. Display the Key's Secret and QR-Code for the User. `key.Secret()` and `key.Image(...)`.\n1. Test that the user can successfully use their TOTP. `totp.Validate(...)`.\n1. Store TOTP Secret for the User in your backend. `key.Secret()`\n1. Provide the user with \"recovery codes\". (See Recovery Codes bellow)\n\n### Code Generation\n\n* In either TOTP or HOTP cases, use the `GenerateCode` function and a counter or\n  `time.Time` struct to generate a valid code compatible with most implementations.\n* For uncommon or custom settings, or to catch unlikely errors, use `GenerateCodeCustom`\n  in either module.\n\n### Validation\n\n1. Prompt and validate User's password as normal.\n1. If the user has TOTP enabled, prompt for TOTP passcode.\n1. Retrieve the User's TOTP Secret from your backend.\n1. Validate the user's passcode. `totp.Validate(...)`\n\n\n### Recovery Codes\n\nWhen a user loses access to their TOTP device, they would no longer have access to their account.  Because TOTPs are often configured on mobile devices that can be lost, stolen or damaged, this is a common problem. For this reason many providers give their users \"backup codes\" or \"recovery codes\".  These are a set of one time use codes that can be used instead of the TOTP.  These can simply be randomly generated strings that you store in your backend.  [Github's documentation provides an overview of the user experience](\nhttps://help.github.com/articles/downloading-your-two-factor-authentication-recovery-codes/).\n\n\n## Improvements, bugs, adding feature, etc:\n\nPlease [open issues in Github](https://github.com/pquerna/otp/issues) for ideas, bugs, and general thoughts.  Pull requests are of course preferred :)\n\n## License\n\n`otp` is licensed under the [Apache License, Version 2.0](./LICENSE)\n"
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 2.2080078125,
          "content": "/**\n *  Copyright 2014 Paul Querna\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\n// Package otp implements both HOTP and TOTP based\n// one time passcodes in a Google Authenticator compatible manner.\n//\n// When adding a TOTP for a user, you must store the \"secret\" value\n// persistently. It is recommended to store the secret in an encrypted field in your\n// datastore.  Due to how TOTP works, it is not possible to store a hash\n// for the secret value like you would a password.\n//\n// To enroll a user, you must first generate an OTP for them.  Google\n// Authenticator supports using a QR code as an enrollment method:\n//\n//\timport (\n//\t\t\"github.com/pquerna/otp/totp\"\n//\n//\t\t\"bytes\"\n//\t\t\"image/png\"\n//\t)\n//\n//\tkey, err := totp.Generate(totp.GenerateOpts{\n//\t\t\tIssuer: \"Example.com\",\n//\t\t\tAccountName: \"alice@example.com\",\n//\t})\n//\n//\t// Convert TOTP key into a QR code encoded as a PNG image.\n//\tvar buf bytes.Buffer\n//\timg, err := key.Image(200, 200)\n//\tpng.Encode(&buf, img)\n//\n//\t// display the QR code to the user.\n//\tdisplay(buf.Bytes())\n//\n//\t// Now Validate that the user's successfully added the passcode.\n//\tpasscode := promptForPasscode()\n//\tvalid := totp.Validate(passcode, key.Secret())\n//\n//\tif valid {\n//\t\t// User successfully used their TOTP, save it to your backend!\n//\t\tstoreSecret(\"alice@example.com\", key.Secret())\n//\t}\n//\n// Validating a TOTP passcode is very easy, just prompt the user for a passcode\n// and retrieve the associated user's previously stored secret.\n//\n//\timport \"github.com/pquerna/otp/totp\"\n//\n//\tpasscode := promptForPasscode()\n//\tsecret := getSecret(\"alice@example.com\")\n//\n//\tvalid := totp.Validate(passcode, secret)\n//\n//\tif valid {\n//\t\t// Success! continue login process.\n//\t}\npackage otp\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.1513671875,
          "content": "module github.com/pquerna/otp\n\ngo 1.12\n\nrequire (\n\tgithub.com/boombuler/barcode v1.0.1-0.20190219062509-6c824513bacc\n\tgithub.com/stretchr/testify v1.3.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.8232421875,
          "content": "github.com/boombuler/barcode v1.0.1-0.20190219062509-6c824513bacc h1:biVzkmvwrH8WK8raXaxBx6fRVTlJILwEwQGL1I/ByEI=\ngithub.com/boombuler/barcode v1.0.1-0.20190219062509-6c824513bacc/go.mod h1:paBWMcWSl3LHKBqUq+rly7CNSldXjb2rDl3JlRe0mD8=\ngithub.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\n"
        },
        {
          "name": "hotp",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "interop",
          "type": "tree",
          "content": null
        },
        {
          "name": "otp.go",
          "type": "blob",
          "size": 5.5869140625,
          "content": "/**\n *  Copyright 2014 Paul Querna\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\npackage otp\n\nimport (\n\t\"crypto/md5\"\n\t\"crypto/sha1\"\n\t\"crypto/sha256\"\n\t\"crypto/sha512\"\n\t\"errors\"\n\t\"fmt\"\n\t\"hash\"\n\t\"image\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/boombuler/barcode\"\n\t\"github.com/boombuler/barcode/qr\"\n)\n\n// Error when attempting to convert the secret from base32 to raw bytes.\nvar ErrValidateSecretInvalidBase32 = errors.New(\"Decoding of secret as base32 failed.\")\n\n// The user provided passcode length was not expected.\nvar ErrValidateInputInvalidLength = errors.New(\"Input length unexpected\")\n\n// When generating a Key, the Issuer must be set.\nvar ErrGenerateMissingIssuer = errors.New(\"Issuer must be set\")\n\n// When generating a Key, the Account Name must be set.\nvar ErrGenerateMissingAccountName = errors.New(\"AccountName must be set\")\n\n// Key represents an TOTP or HTOP key.\ntype Key struct {\n\torig string\n\turl  *url.URL\n}\n\n// NewKeyFromURL creates a new Key from an TOTP or HOTP url.\n//\n// The URL format is documented here:\n//   https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n//\nfunc NewKeyFromURL(orig string) (*Key, error) {\n\ts := strings.TrimSpace(orig)\n\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &Key{\n\t\torig: s,\n\t\turl:  u,\n\t}, nil\n}\n\nfunc (k *Key) String() string {\n\treturn k.orig\n}\n\n// Image returns an QR-Code image of the specified width and height,\n// suitable for use by many clients like Google-Authenricator\n// to enroll a user's TOTP/HOTP key.\nfunc (k *Key) Image(width int, height int) (image.Image, error) {\n\tb, err := qr.Encode(k.orig, qr.M, qr.Auto)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tb, err = barcode.Scale(b, width, height)\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn b, nil\n}\n\n// Type returns \"hotp\" or \"totp\".\nfunc (k *Key) Type() string {\n\treturn k.url.Host\n}\n\n// Issuer returns the name of the issuing organization.\nfunc (k *Key) Issuer() string {\n\tq := k.url.Query()\n\n\tissuer := q.Get(\"issuer\")\n\n\tif issuer != \"\" {\n\t\treturn issuer\n\t}\n\n\tp := strings.TrimPrefix(k.url.Path, \"/\")\n\ti := strings.Index(p, \":\")\n\n\tif i == -1 {\n\t\treturn \"\"\n\t}\n\n\treturn p[:i]\n}\n\n// AccountName returns the name of the user's account.\nfunc (k *Key) AccountName() string {\n\tp := strings.TrimPrefix(k.url.Path, \"/\")\n\ti := strings.Index(p, \":\")\n\n\tif i == -1 {\n\t\treturn p\n\t}\n\n\treturn p[i+1:]\n}\n\n// Secret returns the opaque secret for this Key.\nfunc (k *Key) Secret() string {\n\tq := k.url.Query()\n\n\treturn q.Get(\"secret\")\n}\n\n// Period returns a tiny int representing the rotation time in seconds.\nfunc (k *Key) Period() uint64 {\n\tq := k.url.Query()\n\n\tif u, err := strconv.ParseUint(q.Get(\"period\"), 10, 64); err == nil {\n\t\treturn u\n\t}\n\n\t// If no period is defined 30 seconds is the default per (rfc6238)\n\treturn 30\n}\n\n// Digits returns a tiny int representing the number of OTP digits.\nfunc (k *Key) Digits() Digits {\n\tq := k.url.Query()\n\n\tif u, err := strconv.ParseUint(q.Get(\"digits\"), 10, 64); err == nil {\n\t\treturn Digits(u)\n\t}\n\n\t// Six is the most common value.\n\treturn DigitsSix\n}\n\n// Algorithm returns the algorithm used or the default (SHA1).\nfunc (k *Key) Algorithm() Algorithm {\n\tq := k.url.Query()\n\n\ta := strings.ToLower(q.Get(\"algorithm\"))\n\tswitch a {\n\tcase \"md5\":\n\t\treturn AlgorithmMD5\n\tcase \"sha256\":\n\t\treturn AlgorithmSHA256\n\tcase \"sha512\":\n\t\treturn AlgorithmSHA512\n\tdefault:\n\t\treturn AlgorithmSHA1\n\t}\n}\n\n// Encoder returns the encoder used or the default (\"\")\nfunc (k *Key) Encoder() Encoder {\n\tq := k.url.Query()\n\n\ta := strings.ToLower(q.Get(\"encoder\"))\n\tswitch a {\n\tcase \"steam\":\n\t\treturn EncoderSteam\n\tdefault:\n\t\treturn EncoderDefault\n\t}\n}\n\n// URL returns the OTP URL as a string\nfunc (k *Key) URL() string {\n\treturn k.url.String()\n}\n\n// Algorithm represents the hashing function to use in the HMAC\n// operation needed for OTPs.\ntype Algorithm int\n\nconst (\n\t// AlgorithmSHA1 should be used for compatibility with Google Authenticator.\n\t//\n\t// See https://github.com/pquerna/otp/issues/55 for additional details.\n\tAlgorithmSHA1 Algorithm = iota\n\tAlgorithmSHA256\n\tAlgorithmSHA512\n\tAlgorithmMD5\n)\n\nfunc (a Algorithm) String() string {\n\tswitch a {\n\tcase AlgorithmSHA1:\n\t\treturn \"SHA1\"\n\tcase AlgorithmSHA256:\n\t\treturn \"SHA256\"\n\tcase AlgorithmSHA512:\n\t\treturn \"SHA512\"\n\tcase AlgorithmMD5:\n\t\treturn \"MD5\"\n\t}\n\tpanic(\"unreached\")\n}\n\nfunc (a Algorithm) Hash() hash.Hash {\n\tswitch a {\n\tcase AlgorithmSHA1:\n\t\treturn sha1.New()\n\tcase AlgorithmSHA256:\n\t\treturn sha256.New()\n\tcase AlgorithmSHA512:\n\t\treturn sha512.New()\n\tcase AlgorithmMD5:\n\t\treturn md5.New()\n\t}\n\tpanic(\"unreached\")\n}\n\n// Digits represents the number of digits present in the\n// user's OTP passcode. Six and Eight are the most common values.\ntype Digits int\n\nconst (\n\tDigitsSix   Digits = 6\n\tDigitsEight Digits = 8\n)\n\n// Format converts an integer into the zero-filled size for this Digits.\nfunc (d Digits) Format(in int32) string {\n\tf := fmt.Sprintf(\"%%0%dd\", d)\n\treturn fmt.Sprintf(f, in)\n}\n\n// Length returns the number of characters for this Digits.\nfunc (d Digits) Length() int {\n\treturn int(d)\n}\n\nfunc (d Digits) String() string {\n\treturn fmt.Sprintf(\"%d\", d)\n}\n\ntype Encoder string\n\nconst (\n\tEncoderDefault Encoder = \"\"\n\tEncoderSteam   Encoder = \"steam\"\n)\n"
        },
        {
          "name": "otp_test.go",
          "type": "blob",
          "size": 2.0830078125,
          "content": "/**\n *  Copyright 2014 Paul Querna\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\npackage otp\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestKeyAllThere(t *testing.T) {\n\tk, err := NewKeyFromURL(`otpauth://totp/Example:alice@google.com?secret=JBSWY3DPEHPK3PXP&issuer=Example&algorithm=sha256&digits=8`)\n\trequire.NoError(t, err, \"failed to parse url\")\n\trequire.Equal(t, \"totp\", k.Type(), \"Extracting Type\")\n\trequire.Equal(t, \"Example\", k.Issuer(), \"Extracting Issuer\")\n\trequire.Equal(t, \"alice@google.com\", k.AccountName(), \"Extracting Account Name\")\n\trequire.Equal(t, \"JBSWY3DPEHPK3PXP\", k.Secret(), \"Extracting Secret\")\n\trequire.Equal(t, AlgorithmSHA256, k.Algorithm())\n\trequire.Equal(t, DigitsEight, k.Digits())\n}\n\nfunc TestKeyIssuerOnlyInPath(t *testing.T) {\n\tk, err := NewKeyFromURL(`otpauth://totp/Example:alice@google.com?secret=JBSWY3DPEHPK3PXP`)\n\trequire.NoError(t, err, \"failed to parse url\")\n\trequire.Equal(t, \"Example\", k.Issuer(), \"Extracting Issuer\")\n\trequire.Equal(t, \"alice@google.com\", k.AccountName(), \"Extracting Account Name\")\n}\n\nfunc TestKeyNoIssuer(t *testing.T) {\n\tk, err := NewKeyFromURL(`otpauth://totp/alice@google.com?secret=JBSWY3DPEHPK3PXP`)\n\trequire.NoError(t, err, \"failed to parse url\")\n\trequire.Equal(t, \"\", k.Issuer(), \"Extracting Issuer\")\n\trequire.Equal(t, \"alice@google.com\", k.AccountName(), \"Extracting Account Name\")\n}\n\nfunc TestKeyWithNewLine(t *testing.T) {\n\tw, err := NewKeyFromURL(`otpauth://totp/Example:alice@google.com?secret=JBSWY3DPEHPK3PXP\n`)\n\trequire.NoError(t, err)\n\tsec := w.Secret()\n\trequire.Equal(t, \"JBSWY3DPEHPK3PXP\", sec)\n}\n"
        },
        {
          "name": "totp",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}