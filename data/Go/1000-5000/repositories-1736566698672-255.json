{
  "metadata": {
    "timestamp": 1736566698672,
    "page": 255,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rh12503/triangula",
      "stars": 3854,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.04296875,
          "content": ".DS_Store\n.idea/\n*.txt\nmain.go\n*.prof\nimgs/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2021 RH12503\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.26171875,
          "content": "<p align=\"center\">\n  <img src=\"/assets/logo.svg\" width=\"250px\">\n</p>\n\n<p align=\"center\">An iterative algorithm to generate high quality triangulated and polygonal art from images.</p>\n<p align=\"center\">\n<a><img src=\"https://github.com/RH12503/Triangula/actions/workflows/test.yml/badge.svg\" alt=\"Test status\"></a>\n<a href=\"https://pkg.go.dev/github.com/RH12503/Triangula\"><img src=\"https://pkg.go.dev/badge/github.com/RH12503/Triangula.svg\" alt=\"Go Reference\"></a>\n<a href=\"https://goreportcard.com/report/github.com/RH12503/Triangula\"><img src=\"https://goreportcard.com/badge/github.com/RH12503/Triangula\" alt=\"Go Report Card\"></a>\n<a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\"></a>\n<a href=\"https://twitter.com/intent/tweet?text=An%20iterative%20algorithm%20to%20triangulate%20images.&url=https://github.com/RH12503/triangula&hashtags=golang,geneticalgorithm,generativeart\"><img src=\"https://img.shields.io/twitter/url/http/shields.io.svg?style=social\" alt=\"Tweet\"></a>\n</p>\n\nTriangula uses a modified genetic algorithm to triangulate or polygonate images. It works best with images smaller than 3000px and with fewer than 3000 points, typically producing an optimal result within a couple of minutes. For a full explanation of the algorithm, see [this page in the wiki](https://github.com/RH12503/Triangula/wiki/Explanation-of-the-algorithm). \n\nYou can try the algorithm out in your browser [here](https://rh12503.github.io/triangula/), but the desktop app will typically be 20-50x faster. \n\n## Install\n\n### GUI\nInstall the [GUI](https://github.com/RH12503/Triangula-GUI) from the [releases page](https://github.com/RH12503/Triangula/releases). \nThe GUI uses [Wails](https://wails.app/) for its frontend. \n<p float=\"left\" align=\"middle\">\n<img src=\"/assets/gui1.png\" width=\"49%\">\n<img src=\"/assets/gui2.png\" width=\"49%\">\n</p>\nIf the app isn't running on Linux, go to the Permissions tab in the executable's properties and tick `Allow executing file as program`. \n\n### CLI\nInstall the [CLI](https://github.com/RH12503/Triangula-CLI) by running: \n```\ngo get -u github.com/RH12503/Triangula-CLI/triangula\n```\n\nYour `PATH` variable also needs to include your `go/bin` directory, which is `~/go/bin` on macOS, `$GOPATH/bin` on Linux, and `c:\\Go\\bin` on Windows. \n\nThen run it using the command: \n```\ntriangula run -img <path to image> -out <path to output JSON>\n```\n\nand when you're happy with its fitness, render a SVG:\n```\ntriangula render -in <path to outputted JSON> -img <path to image> -out <path to output SVG> \n```\nFor more detailed instructions, including rendering PNGs with effects see [this page](https://github.com/RH12503/Triangula-CLI/blob/main/README.md). \n\n## Options\nFor almost all cases, only changing the number of points and leaving all other options with their default values will generate an optimal result. \n\n| Name  | Flag | Default |  Usage |\n| ------------- | ---- | ------------- | -- |\n|  Points |  `--points, -p`  | 300 | The number of points to use in the triangulation   |\n| Mutations  |  `--mutations, --mut, -m`  |  2 | The number of mutations to make |\n| Variation | `--variation, -v` | 0.3 | The variation each mutation causes |\n| Population | `--population, --pop, --size` | 400 | The population size in the algorithm |\n| Cutoff | `--cutoff, --cut` | 5 | The cutoff value of the algorithm |\n| Cache | `--cache, -c` | 22 | The cache size as a power of 2 |\n| Block | `--block, -b` | 5 | The size of the blocks used when rendering |\n| Threads | `--threads, -t` | 0 | The number of threads to use or 0 to use all cores | \n| Repetitions | `--reps, -r`| 500 | The number of generations before saving to the output file (CLI only) | \n\n## Examples of output\n### Triangulated\n<img src=\"/assets/output/grad.png\" height=\"400\"/>\n<img src=\"/assets/output/plane.png\" height=\"400\"/> \n<img src=\"/assets/output/sf.png\" height=\"400\"/>\n<img src=\"/assets/output/elon.png\" height=\"400\"/>\n<img src=\"/assets/output/astro.png\" height=\"400\"/>\n\n### Polygonal\n<img src=\"/assets/output/dog.png\" height=\"400\"/>\n<img src=\"/assets/output/obama.png\" height=\"400\"/> \n<img src=\"/assets/output/science.png\" height=\"400\"/>\n<img src=\"/assets/output/queen.png\" height=\"400\"/>\n\n### Community Examples\n* [triangul4rt Instagram](https://www.instagram.com/triangul4rt/):\n<p float=\"left\" align=\"middle\">\n<img src=\"/assets/output/bunny.png\" width=\"200px\"/>\n<img src=\"/assets/output/owl.png\" height=\"150px\"/>\n<img src=\"/assets/output/panda.png\" height=\"150px\"/>\n</p>\n\n\n### Comparison to [esimov/triangle](https://github.com/esimov/triangle)\nesimov/triangle seems to be a similar project to Triangula that is also written in Go. However, the two appear to generate very different styles. One big advantage of triangle is that it generates an image almost instantaneously, while Triangula needs to run many iterations. \n\nesimov/triangle results were taken from their [Github repo](https://github.com/esimov/triangle), and Triangula's results were generated over 1-2 minutes. \n| esimov/triangle | Triangula |\n| :---: | :---: |\n| <img src=\"https://github.com/esimov/triangle/blob/master/output/sample_11.png\" height=\"250\"/> | <img src=\"/assets/output/result.png\" height=\"250\"/> |\n| <img src=\"https://github.com/esimov/triangle/blob/master/output/sample_3.png\" height=\"250\"/> | <img src=\"/assets/output/result2.png\" height=\"250\"/>  |\n\n#### Difference from [fogleman/primitive](https://github.com/fogleman/primitive) and [gheshu/image_decompiler](https://github.com/gheshu/image_decompiler)\nA lot of people have commented about Triangula's similarities to these other algorithms. While all these algorithms are iterative algorithms, the main difference is that in the other algorithms triangles can overlap while Triangula generates a triangulation. \n\n## API \nSimple example: \n```Go\nimport imageData \"github.com/RH12503/Triangula/image\"\n\nfunc main() {\n    // Open and decode a PNG/JPEG\n    file, err := os.Open(\"image.png\")\n\n    if err != nil {\n          log.Fatal(err)\n    }\n\n    image, _, err := image.Decode(file)\n\n    file.Close()\n\n    if err != nil {\n          log.Fatal(err)\n    }\n\n    img := imageData.ToData(image)\n\n\n    pointFactory := func() normgeom.NormPointGroup {\n          return (generator.RandomGenerator{}).Generate(200) // 200 points\n    }\n\n    evaluatorFactory := func(n int) evaluator.Evaluator {\n          // 22 for the cache size and 5 for the block size\n          // use PolygonsImageFunctions for polygons \n\t\t  return evaluator.NewParallel(fitness.TrianglesImageFunctions(imgData, 5, n), 22)\n    }\n\n    var mutator mutation.Method\n\n    // 1% mutation rate and 30% variation\n    mutator = mutation.NewGaussianMethod(0.01, 0.3)\n\n    // 400 population size and 5 cutoff\n    algo := algorithm.NewModifiedGenetic(pointFactory, 400, 5, evaluatorFactory, mutator)\n\n    // Run the algorithm\n    for {\n          algo.Step()\n          fmt.Println(algo.Stats().BestFitness)\n    }\n}\n\n```\n## Contribute\nAny contributions are welcome. Currently help is needed with:\n* Support for exporting effects to SVGs. \n* Supporting more image types for the CLI and GUI. (eg. .tiff, .webp, .heic)\n* Allowing drag and drop of images from the web for the GUI. \n* More effects. \n* Any optimizations. \n\nThank you to these contributors for helping to improve Triangula: \n- [@bstncartwright](https://github.com/bstncartwright)\n- [@2BoysAndHats](https://github.com/2BoysAndHats)\n"
        },
        {
          "name": "Triangula",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "algorithm",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "color",
          "type": "tree",
          "content": null
        },
        {
          "name": "fitness",
          "type": "tree",
          "content": null
        },
        {
          "name": "generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "geom",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.4443359375,
          "content": "module github.com/RH12503/Triangula\n\ngo 1.16\n\nrequire (\n\tgithub.com/dgryski/go-pcgr v0.0.0-20190219145045-9a7ede0ca611\n\tgithub.com/enki/fastprng v0.0.0-20190912035746-b46f877a1a50 // indirect\n\tgithub.com/fogleman/delaunay v0.0.0-20180910191513-63f09b4c883d\n\tgithub.com/lazybeaver/xorshift v0.0.0-20170702203709-ce511d4823dd // indirect\n\tgithub.com/panjf2000/ants/v2 v2.4.3\n\tgithub.com/paulmach/orb v0.2.1 // indirect\n\tgithub.com/stretchr/testify v1.4.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 8.916015625,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgryski/go-pcgr v0.0.0-20190219145045-9a7ede0ca611 h1:ZmWYkcFCJGYQKmGRcPEY/6QsA/1ea5RACx9B2fbbE9c=\ngithub.com/dgryski/go-pcgr v0.0.0-20190219145045-9a7ede0ca611/go.mod h1:ztV/u9hqJRBCT0P03v0Ueol7unBefCKL+paOoIZkR88=\ngithub.com/enki/fastprng v0.0.0-20190912035746-b46f877a1a50 h1:rEb10MoloN0R4OXOGCLoAKhWnnuE/WK6loew/rWT0AY=\ngithub.com/enki/fastprng v0.0.0-20190912035746-b46f877a1a50/go.mod h1:fmNBkPdX9WKwCxNL5AdR7/d4eLG+ccEHOmYrgIoBq0c=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/fogleman/delaunay v0.0.0-20180910191513-63f09b4c883d h1:TEEc0gLspsm9q0dWZZYiH0blV1MhPQnshLqSoANbxMk=\ngithub.com/fogleman/delaunay v0.0.0-20180910191513-63f09b4c883d/go.mod h1:Twj6uBC/dSqh5vCcgzy/jO/4QWu9lqPTt1v3WEz68z8=\ngithub.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/lazybeaver/xorshift v0.0.0-20170702203709-ce511d4823dd h1:TfmftEfB1zJiDTFi3Qw1xlbEbfJPKUhEDC19clfBMb8=\ngithub.com/lazybeaver/xorshift v0.0.0-20170702203709-ce511d4823dd/go.mod h1:qXyNSomGEqu0M7ewNl3CLgle09PFHk8++5NrBWCz7+Q=\ngithub.com/panjf2000/ants/v2 v2.4.3 h1:wHghL17YKFanB62QjPQ9o+DuM4q7WrQ7zAhoX8+eBXU=\ngithub.com/panjf2000/ants/v2 v2.4.3/go.mod h1:f6F0NZVFsGCp5A7QW/Zj/m92atWwOkY0OIhFxRNFr4A=\ngithub.com/paulmach/orb v0.2.1 h1:Pp9UuWpUlGVRXzRC5eFlOgdlOXd/a3ALWC3UFLM3gOc=\ngithub.com/paulmach/orb v0.2.1/go.mod h1:91bG5A8qKNOiZtlKc0BqKMB3O5kWfRQorTwo8BZ2B/0=\ngithub.com/paulmach/protoscan v0.2.0/go.mod h1:2c55sl1Hu6/tgRfc8Y8zADsxuSCYC2IrPh0JCqP/yrw=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.4.0 h1:2E4SXV/wtOkTonXsotYi4li6zVWxYlZuYNCXe9XRJyk=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.7 h1:VUgggvou5XRW9mHwD/yXxIYSMtY0zoKQf/v226p2nyo=\ngopkg.in/yaml.v2 v2.2.7/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\n"
        },
        {
          "name": "image",
          "type": "tree",
          "content": null
        },
        {
          "name": "mutation",
          "type": "tree",
          "content": null
        },
        {
          "name": "normgeom",
          "type": "tree",
          "content": null
        },
        {
          "name": "polygonation",
          "type": "tree",
          "content": null
        },
        {
          "name": "polygons.MD",
          "type": "blob",
          "size": 0.712890625,
          "content": "### Polygonal/Voronoi art\n\nTriangula v1.2 now supports creating polygonal art as well as triangulated art from images. Install the GUI from the \n[releases page](https://github.com/RH12503/Triangula/releases), and select the second \"Shape\" option. \n\n<img src=\"/assets/gui2.png\" width=\"50%\">\n\nOr, install the CLI using `go get -u github.com/RH12503/Triangula-CLI/triangula` and use the `-shape polygon` flag. Check out the [README](https://github.com/RH12503/triangula/blob/main/README.md) for more information. \n\n### Examples\n<img src=\"/assets/output/dog.png\" height=\"400\"/>\n<img src=\"/assets/output/obama.png\" height=\"400\"/> \n<img src=\"/assets/output/science.png\" height=\"400\"/>\n<img src=\"/assets/output/queen.png\" height=\"400\"/>\n"
        },
        {
          "name": "random",
          "type": "tree",
          "content": null
        },
        {
          "name": "rasterize",
          "type": "tree",
          "content": null
        },
        {
          "name": "render",
          "type": "tree",
          "content": null
        },
        {
          "name": "triangulation",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}