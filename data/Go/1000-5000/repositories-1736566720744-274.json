{
  "metadata": {
    "timestamp": 1736566720744,
    "page": 274,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nakabonne/ali",
      "stars": 3787,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.31640625,
          "content": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\nali\n\n# Test binary, built with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\ncoverage.txt\nali-debug.log\n\n# IDE\n.idea\n\n# Dependency directories (remove the comment below to include it)\n# vendor/\n\n.DS_Store\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 1.201171875,
          "content": "linters:\n  disable-all: true\n  enable:\n    - gosimple\n    - ineffassign\n    - errcheck\n    - misspell\n    - unparam\n    - gofmt\n    - goimports\n    - deadcode\n    - nestif\n    - govet\n    - golint\n    - prealloc\n    - depguard\n    - dogsled\n    - dupl\n    - goconst\n    - gocritic\n    - gocyclo\n    - goprintffuncname\n    - gosec\n    - nakedret\n    - rowserrcheck\n    - scopelint\n    - structcheck\n    - stylecheck\n    - typecheck\n    - unconvert\n    - varcheck\n    - exhaustive\n    - exportloopref\n    - goerr113\n    - gofumpt\n    - unused\n\nrun:\n  issues-exit-code: 0\n  tests: false\n  skip-dirs:\n    - testdata\n\nissues:\n  exclude-rules:\n    - linters:\n      - gosec\n      text: \"G204: Subprocess launched\"\n    - linters:\n      - goerr113\n      text: \"err113: do not define dynamic errors\"\n    - linters:\n      - stylecheck\n      text: \"ST1003: struct field Https\"\n    - linters:\n      - stylecheck\n      text: \"ST1003: struct field Id\"\n\nlinters-settings:\n  dupl:\n    threshold: 100\n  funlen:\n    lines: 100\n    statements: 50\n  goconst:\n    min-len: 2\n    min-occurrences: 2\n  goimports:\n    local-prefixes: github.com/nakabonne/ali\n  golint:\n    min-confidence: 0.3\n  maligned:\n    suggest-new: true\n  misspell:\n    locale: US\n\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.37890625,
          "content": "before:\n  hooks:\n    - go mod tidy\nbuilds:\n- main: .\n  binary: ali\n  goos:\n    - freebsd\n    - darwin\n    - linux\n    - windows\n  goarch:\n    - amd64\n    - arm\n    - arm64\n    - 386\n    - ppc64le\n    - s390x\n    - mips64\n    - mips64le\n  goarm:\n    - 6\n    - 7\n  env:\n    - CGO_ENABLED=0\n  ldflags: -s -w -X main.version={{.Version}} -X main.commit={{.ShortCommit}} -X main.date={{.Date}}\n  ignore:\n      - goos: windows\n        goarch: arm64\n\narchives:\n- replacements:\n    386: 32-bit\n\nchecksum:\n  name_template: 'checksums.txt'\n\nsnapshot:\n  name_template: \"{{ .Tag }}-next\"\n\nchangelog:\n  filters:\n    exclude:\n    - '^test:'\n\nbrews:\n  - tap:\n      owner: nakabonne\n      name: homebrew-ali\n    homepage: 'https://github.com/nakabonne/ali'\n    description: 'Generate HTTP load and plot the results in real-time'\n\nnfpms:\n  - license: MIT\n    maintainer: Ryo Nakao <ryo@nakao.dev>\n    homepage: https://github.com/nakabonne/ali\n    description: \"Generate HTTP load and plot the results in real-time\"\n    formats:\n      - rpm\n      - deb\n\ndockers:\n  - dockerfile: Dockerfile\n    goarch: amd64\n    image_templates:\n      - \"nakabonne/ali:latest\"\n      - \"nakabonne/ali:{{ .Tag }}\"\n      - \"nakabonne/ali:v{{ .Major }}.{{ .Minor }}\"\n  - dockerfile: Dockerfile\n    goarch: arm64\n    image_templates:\n      - \"nakabonne/ali:latest\"\n      - \"nakabonne/ali:{{ .Tag }}\"\n      - \"nakabonne/ali:v{{ .Major }}.{{ .Minor }}\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7158203125,
          "content": "# Contributing\nIf you are willing to contribute, first of all I really appreciate you!\nThis guide walks you through how to contribute step-by-step.\n\n1. It's typically best to open a new issue describing the bug or feature you're intending to work on. Even if you think it's relatively minor, it could be helpful to know what people are working on at first.\n1. Fork this repository by following [the typical process](https://docs.github.com/en/github/getting-started-with-github/quickstart/fork-a-repo), and setup a new branch to work in.\n1. Modify code. It requires Go version 1.16 or greater.\n1. Run `go fmt` on your code before committing it.\n1. If you want to debug your change, just run `go build` then execute it with `./ali`.\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.04296875,
          "content": "FROM alpine\n\nCOPY ali /usr/bin/\nCMD [\"ali\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2020 Ryo Nakao\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2080078125,
          "content": "\n.PHONY: test\ntest:\n\tgo test -race -v -coverpkg=./... -covermode=atomic -coverprofile=coverage.txt ./...\n\n.PHONY: mockgen\nmockgen:\n\tmockgen -source=./gui/widgets.go -destination=./gui/widgets.mock.go -package=gui\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.5234375,
          "content": "# ali\n[![Release](https://img.shields.io/github/release/nakabonne/ali.svg?color=orange)](https://github.com/nakabonne/ali/releases/latest)\n[![Go Reference](https://pkg.go.dev/badge/github.com/nakabonne/ali.svg)](https://pkg.go.dev/github.com/nakabonne/ali)\n\nA load testing tool capable of performing real-time analysis, inspired by [vegeta](https://github.com/tsenart/vegeta) and [jplot](https://github.com/rs/jplot).\n\n![Screenshot](images/demo.gif)\n\n`ali` comes with an embedded terminal-based UI where you can plot the metrics in real-time, so lets you perform real-time analysis on the terminal.\n\n## Installation\n\nBinary releases are available through [here](https://github.com/nakabonne/ali/releases).\n\n**Via Homebrew**\n\n```bash\nbrew install nakabonne/ali/ali\n```\n\n**Via MacPorts**\n\n```bash\nsudo port selfupdate\nsudo port install ali\n```\n\n**Via APT**\n\n```bash\nwget https://github.com/nakabonne/ali/releases/download/v0.7.3/ali_0.7.3_linux_amd64.deb\napt install ./ali_0.7.3_linux_amd64.deb\n```\n\n**Via RPM**\n\n```bash\nrpm -ivh https://github.com/nakabonne/ali/releases/download/v0.7.3/ali_0.7.3_linux_amd64.rpm\n```\n\n**Via Pacman**\n\n```bash\npacman -S ali\n```\n\n**Via APK**\n\nAfter [enabling the community repo](https://wiki.alpinelinux.org/wiki/Enable_Community_Repository):\n\n```bash\napk add ali\n```\n\n**Via Go**\n\nNote that you may have a problem because it downloads an untagged binary.\n```bash\ngo install github.com/nakabonne/ali@latest\n```\n\n**Via Docker**\n\n```bash\ndocker run --rm -it nakabonne/ali ali\n```\n\n## Usage\n### Quickstart\n\n```bash\nali http://host.xz\n```\nReplace `http://host.xz` with the target you want to issue the requests to.\nPress Enter when the UI appears, then the attack will be launched with default options (rate=50, duration=10s).\n\n### Options\n\n```\nali -h\nUsage:\n  ali [flags] <target URL>\n\nFlags:\n  -b, --body string                A request body to be sent.\n  -B, --body-file string           The path to file whose content will be set as the http request body.\n      --cacert string              PEM ca certificate file\n      --cert string                PEM encoded tls certificate file to use\n  -c, --connections int            Amount of maximum open idle connections per target host (default 10000)\n      --debug                      Run in debug mode.\n  -d, --duration duration          The amount of time to issue requests to the targets. Give 0s for an infinite attack. (default 10s)\n  -H, --header stringArray         A request header to be sent. Can be used multiple times to send multiple headers.\n      --insecure                   Skip TLS verification\n      --key string                 PEM encoded tls private key file to use\n      --local-addr string          Local IP address. (default \"0.0.0.0\")\n  -M, --max-body int               Max bytes to capture from response bodies. Give -1 for no limit. (default -1)\n  -W, --max-workers uint           Amount of maximum workers to spawn. (default 18446744073709551615)\n  -m, --method string              An HTTP request method for each request. (default \"GET\")\n      --no-http2                   Don't issue HTTP/2 requests to servers which support it.\n  -K, --no-keepalive               Don't use HTTP persistent connection.\n      --query-range duration       The results within the given time range will be drawn on the charts (default 30s)\n  -r, --rate int                   The request rate per second to issue against the targets. Give 0 then it will send requests as fast as possible. (default 50)\n      --redraw-interval duration   The time interval to redraw charts (default 250ms)\n      --resolvers string           Custom DNS resolver addresses; comma-separated list.\n  -t, --timeout duration           The timeout for each request. 0s means to disable timeouts. (default 30s)\n  -v, --version                    Print the current version.\n  -w, --workers uint               Amount of initial workers to spawn. (default 10)\n\nExamples:\n  ali --duration=10m --rate=100 http://host.xz\n\nAuthor:\n  Ryo Nakao <ryo@nakao.dev>\n```\n\nValid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n\n**Examples**\n\nFor basic usage:\n\n```bash\nali --rate=500 --duration=5m http://host.xz\n```\n\nFor an infinite attack:\n\n```bash\nali --duration=0 http://host.xz\n```\n\nFor an attack with the POST method:\n\n```bash\nali --body-file=/path/to/foo.json --method=POST http://host.xz\n```\n\n### Charts\nPress `l` (or `h`) to switch the displayed chart. On all charts, you can click and drag to select a region to zoom into.\n\n**Latency**\n\n![Screenshot](images/latency-chart.png)\n\nThe X-axis represents the request counts and the Y-axis represents latencies in milliseconds.\n\n**Percentiles**\n\n![Screenshot](images/percentiles-chart.png)\n\nYou can see how the 50th, 90th, 95th, and 99th percentiles are changing.\n\n**Bytes**\n\n>TBA\n\n**Histogram**\n\n>TBA\n\n## Features\n\n### Plot in real-time\n\n![Screenshot](images/real-time.gif)\n\n### Visualize the attack progress\nThis will help you during long tests.\n\n![Screenshot](images/progress.gif)\n\n### Mouse support\nWith the help of [mum4k/termdash](https://github.com/mum4k/termdash) can be used intuitively.\n\n![Screenshot](images/mouse-support.gif)\n\n## Acknowledgements\nThis project would not have been possible without the effort of many individuals and projects but especially [vegeta](https://github.com/tsenart/vegeta) for the inspiration and powerful API.\nBesides, `ali` is built with [termdash](https://github.com/mum4k/termdash) (as well as [termbox-go](https://github.com/nsf/termbox-go)) for the rendering of all those fancy graphs on the terminal.\nThey clearly stimulated an incentive to creation. A big \"thank you!\" goes out to all those who helped.\n"
        },
        {
          "name": "attacker",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.3642578125,
          "content": "ignore:\n  - \"gui/widgets.mock.go\"\n\ncoverage:\n  range: 50..90\n  round: up\n  status:\n    project:\n      default:\n        target: 70%\n        threshold: 20%\n        if_not_found: success\n        if_ci_failed: success\n    patch:\n      default:\n        target: 0%\n        threshold: 20%\n        if_no_uploads: success\n        if_not_found: success\n        if_ci_failed: success\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.146484375,
          "content": "module github.com/nakabonne/ali\n\ngo 1.18\n\nrequire (\n\tgithub.com/golang/mock v1.6.0\n\tgithub.com/miekg/dns v1.1.43\n\tgithub.com/mum4k/termdash v0.16.0\n\tgithub.com/nakabonne/tstorage v0.3.5\n\tgithub.com/spf13/pflag v1.0.5\n\tgithub.com/stretchr/testify v1.7.0\n\tgithub.com/tsenart/vegeta/v12 v12.8.4\n\tgo.uber.org/atomic v1.9.0\n\tgo.uber.org/goleak v1.1.12\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/gdamore/encoding v1.0.0 // indirect\n\tgithub.com/gdamore/tcell/v2 v2.2.0 // indirect\n\tgithub.com/influxdata/tdigest v0.0.0-20180711151920-a7d76c6f093a // indirect\n\tgithub.com/lucasb-eyer/go-colorful v1.0.3 // indirect\n\tgithub.com/mailru/easyjson v0.7.0 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.12 // indirect\n\tgithub.com/nsf/termbox-go v0.0.0-20201107200903-9b52a5faed9e // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/rivo/uniseg v0.1.0 // indirect\n\tgolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4 // indirect\n\tgolang.org/x/sys v0.6.0 // indirect\n\tgolang.org/x/term v0.0.0-20201210144234-2321bbc49cbf // indirect\n\tgolang.org/x/text v0.3.4 // indirect\n\tgopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 12.32421875,
          "content": "github.com/alecthomas/jsonschema v0.0.0-20180308105923-f2c93856175a/go.mod h1:qpebaTNSsyUn5rPSJMsfqEtDw71TTggXM6stUDI16HA=\ngithub.com/bmizerany/perks v0.0.0-20141205001514-d9a9656a3a4b h1:AP/Y7sqYicnjGDfD5VcY4CIfh1hRXBUavxrvELjTiOE=\ngithub.com/bmizerany/perks v0.0.0-20141205001514-d9a9656a3a4b/go.mod h1:ac9efd0D1fsDb3EJvhqgXRbFx7bs2wqZ10HQPeU8U/Q=\ngithub.com/c2h5oh/datasize v0.0.0-20171227191756-4eba002a5eae/go.mod h1:S/7n9copUssQ56c7aAgHqftWO4LTf4xY6CGWt8Bc+3M=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgryski/go-gk v0.0.0-20140819190930-201884a44051 h1:ByJUvQYyTtNNCVfYNM48q6uYUT4fAlN0wNmd3th4BSo=\ngithub.com/dgryski/go-gk v0.0.0-20140819190930-201884a44051/go.mod h1:qm+vckxRlDt0aOla0RYJJVeqHZlWfOm2UIxHaqPB46E=\ngithub.com/dgryski/go-lttb v0.0.0-20180810165845-318fcdf10a77/go.mod h1:Va5MyIzkU0rAM92tn3hb3Anb7oz7KcnixF49+2wOMe4=\ngithub.com/gdamore/encoding v1.0.0 h1:+7OoQ1Bc6eTm5niUzBa0Ctsh6JbMW6Ra+YNuAtDBdko=\ngithub.com/gdamore/encoding v1.0.0/go.mod h1:alR0ol34c49FCSBLjhosxzcPHQbf2trDkoo5dl+VrEg=\ngithub.com/gdamore/tcell/v2 v2.2.0 h1:vSyEgKwraXPSOkvCk7IwOSyX+Pv3V2cV9CikJMXg4U4=\ngithub.com/gdamore/tcell/v2 v2.2.0/go.mod h1:cTTuF84Dlj/RqmaCIV5p4w8uG1zWdk0SF6oBpwHp4fU=\ngithub.com/golang/mock v1.6.0 h1:ErTB+efbowRARo13NNdxyJji2egdxLGQhRaY+DUumQc=\ngithub.com/golang/mock v1.6.0/go.mod h1:p6yTPP+5HYm5mzsMV8JkE6ZKdX+/wYM6Hr+LicevLPs=\ngithub.com/gonum/blas v0.0.0-20181208220705-f22b278b28ac h1:Q0Jsdxl5jbxouNs1TQYt0gxesYMU4VXRbsTlgDloZ50=\ngithub.com/gonum/blas v0.0.0-20181208220705-f22b278b28ac/go.mod h1:P32wAyui1PQ58Oce/KYkOqQv8cVw1zAapXOl+dRFGbc=\ngithub.com/gonum/diff v0.0.0-20181124234638-500114f11e71/go.mod h1:22dM4PLscQl+Nzf64qNBurVJvfyvZELT0iRW2l/NN70=\ngithub.com/gonum/floats v0.0.0-20181209220543-c233463c7e82 h1:EvokxLQsaaQjcWVWSV38221VAK7qc2zhaO17bKys/18=\ngithub.com/gonum/floats v0.0.0-20181209220543-c233463c7e82/go.mod h1:PxC8OnwL11+aosOB5+iEPoV3picfs8tUpkVd0pDo+Kg=\ngithub.com/gonum/integrate v0.0.0-20181209220457-a422b5c0fdf2/go.mod h1:pDgmNM6seYpwvPos3q+zxlXMsbve6mOIPucUnUOrI7Y=\ngithub.com/gonum/internal v0.0.0-20181124074243-f884aa714029 h1:8jtTdc+Nfj9AR+0soOeia9UZSvYBvETVHZrugUowJ7M=\ngithub.com/gonum/internal v0.0.0-20181124074243-f884aa714029/go.mod h1:Pu4dmpkhSyOzRwuXkOgAvijx4o+4YMUJJo9OvPYMkks=\ngithub.com/gonum/lapack v0.0.0-20181123203213-e4cdc5a0bff9 h1:7qnwS9+oeSiOIsiUMajT+0R7HR6hw5NegnKPmn/94oI=\ngithub.com/gonum/lapack v0.0.0-20181123203213-e4cdc5a0bff9/go.mod h1:XA3DeT6rxh2EAE789SSiSJNqxPaC0aE9J8NTOI0Jo/A=\ngithub.com/gonum/mathext v0.0.0-20181121095525-8a4bf007ea55 h1:Ajwn2ENgC/pKtVat0LEHEWNa4a4VGyYJ1feGSccOzFU=\ngithub.com/gonum/mathext v0.0.0-20181121095525-8a4bf007ea55/go.mod h1:fmo8aiSEWkJeiGXUJf+sPvuDgEFgqIoZSs843ePKrGg=\ngithub.com/gonum/matrix v0.0.0-20181209220409-c518dec07be9 h1:V2IgdyerlBa/MxaEFRbV5juy/C3MGdj4ePi+g6ePIp4=\ngithub.com/gonum/matrix v0.0.0-20181209220409-c518dec07be9/go.mod h1:0EXg4mc1CNP0HCqCz+K4ts155PXIlUywf0wqN+GfPZw=\ngithub.com/gonum/stat v0.0.0-20181125101827-41a0da705a5b h1:fbskpz/cPqWH8VqkQ7LJghFkl2KPAiIFUHrTJ2O3RGk=\ngithub.com/gonum/stat v0.0.0-20181125101827-41a0da705a5b/go.mod h1:Z4GIJBJO3Wa4gD4vbwQxXXZ+WHmW6E9ixmNrwvs0iZs=\ngithub.com/google/go-cmp v0.2.0 h1:+dTQ8DZQJz0Mb/HjFlkptS1FeQ4cWSnN941F8aEG4SQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/influxdata/tdigest v0.0.0-20180711151920-a7d76c6f093a h1:vMqgISSVkIqWxCIZs8m1L4096temR7IbYyNdMiBxSPA=\ngithub.com/influxdata/tdigest v0.0.0-20180711151920-a7d76c6f093a/go.mod h1:9GkyshztGufsdPQWjH+ifgnIr3xNUL5syI70g2dzU1o=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/lucasb-eyer/go-colorful v1.0.3 h1:QIbQXiugsb+q10B+MI+7DI1oQLdmnep86tWFlaaUAac=\ngithub.com/lucasb-eyer/go-colorful v1.0.3/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/mailru/easyjson v0.7.0 h1:aizVhC/NAAcKWb+5QsU1iNOZb4Yws5UO2I+aIprQITM=\ngithub.com/mailru/easyjson v0.7.0/go.mod h1:KAzv3t3aY1NaHWoQz1+4F1ccyAH66Jk7yos7ldAVICs=\ngithub.com/mattn/go-runewidth v0.0.10/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=\ngithub.com/mattn/go-runewidth v0.0.12 h1:Y41i/hVW3Pgwr8gV+J23B9YEY0zxjptBuCWEaxmAOow=\ngithub.com/mattn/go-runewidth v0.0.12/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=\ngithub.com/miekg/dns v1.1.17/go.mod h1:WgzbA6oji13JREwiNsRDNfl7jYdPnmz+VEuLrA+/48M=\ngithub.com/miekg/dns v1.1.43 h1:JKfpVSCB84vrAmHzyrsxB5NAr5kLoMXZArPSw7Qlgyg=\ngithub.com/miekg/dns v1.1.43/go.mod h1:+evo5L0630/F6ca/Z9+GAqzhjGyn8/c+TBaOyfEl0V4=\ngithub.com/mum4k/termdash v0.16.0 h1:oez5/noRpk8Lc+4u05QTU1LGGcvUkhEFk2kV9lClQAg=\ngithub.com/mum4k/termdash v0.16.0/go.mod h1:bkSQsw2tif8pLQtGmfxh20N1idek+Hzol/wj+1ZC3cM=\ngithub.com/nakabonne/tstorage v0.3.5 h1:AmXhEn6SM94sMy1+bwAs9xg3cuefXBXakcYOMQuQlqI=\ngithub.com/nakabonne/tstorage v0.3.5/go.mod h1:dgOHx150reQ3xHCqyoU19TImAU0PY78bfwUIG24xNzY=\ngithub.com/nsf/termbox-go v0.0.0-20201107200903-9b52a5faed9e h1:T8/SzSWIDoWV9trslLNfUdJ5yHrIXXuODEy5M0vou4U=\ngithub.com/nsf/termbox-go v0.0.0-20201107200903-9b52a5faed9e/go.mod h1:IuKpRQcYE1Tfu+oAQqaLisqDeXgjyyltCfsaoYN18NQ=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.1.0 h1:+2KBaVoUmb9XzDsrx/Ct0W/EYOSFf/nWTauy++DprtY=\ngithub.com/rivo/uniseg v0.1.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/streadway/quantile v0.0.0-20150917103942-b0c588724d25 h1:7z3LSn867ex6VSaahyKadf4WtSsJIgne6A1WLOAGM8A=\ngithub.com/streadway/quantile v0.0.0-20150917103942-b0c588724d25/go.mod h1:lbP8tGiBjZ5YWIc2fzuRpTaz0b/53vT6PEs3QuAWzuU=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/tsenart/go-tsz v0.0.0-20180814232043-cdeb9e1e981e/go.mod h1:SWZznP1z5Ki7hDT2ioqiFKEse8K9tU2OUvaRI0NeGQo=\ngithub.com/tsenart/vegeta/v12 v12.8.4 h1:UQ7tG7WkDorKj0wjx78Z4/vsMBP8RJQMGJqRVrkvngg=\ngithub.com/tsenart/vegeta/v12 v12.8.4/go.mod h1:ZiJtwLn/9M4fTPdMY7bdbIeyNeFVE8/AHbWFqCsUuho=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngo.uber.org/atomic v1.9.0 h1:ECmE8Bn/WFTYwEW/bpKD3M8VtR/zQVbavAoalC1PYyE=\ngo.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/goleak v1.1.12 h1:gZAh5/EyT/HQwlpkCy6wTpqfH9H8Lz8zbm3dZh+OyzA=\ngo.uber.org/goleak v1.1.12/go.mod h1:cwTWslyiVhfpKIDGSZEM2HlOvcqm+tG4zioyIeLoqMQ=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190829043050-9756ffdc2472/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de h1:5hukYrvBGR8/eNkX5mdUezrA6JiaEZDtJb9Ei+1LlBs=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190827160401-ba9fcec4b297/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4 h1:4nGaVu0QrbjT/AK2PRLuQfQuh6DJve+pELhqTdAj3x0=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210303074136-134d130e1a04/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007 h1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0 h1:MVltZSvRTcU2ljQOhs94SXPftV6DCNnZViHeQps87pQ=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20201210144234-2321bbc49cbf h1:MZ2shdL+ZM/XzY3ZGOnh4Nlpnxz5GSOhOmtHo3iPU6M=\ngolang.org/x/term v0.0.0-20201210144234-2321bbc49cbf/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.4 h1:0YWbFKbhXG/wIiuHDSKpS0Iy7FSA+u45VtBMfQcFTTc=\ngolang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190907020128-2ca718005c18/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.1/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.5 h1:ouewzE6p+/VEB31YYnTbEJdi8pFqKp4P4n85vwo3DHA=\ngolang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\npgregory.net/rapid v0.3.3 h1:jCjBsY4ln4Atz78QoBWxUEvAHaFyNDQg9+WU62aCn1U=\npgregory.net/rapid v0.3.3/go.mod h1:UYpPVyjFHzYBGHIxLFoupi8vwk6rXNzRY9OMvVxFIOU=\n"
        },
        {
          "name": "gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 10.7939453125,
          "content": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/user\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/nakabonne/ali/storage\"\n\n\tflag \"github.com/spf13/pflag\"\n\n\t\"github.com/nakabonne/ali/attacker\"\n\t\"github.com/nakabonne/ali/gui\"\n)\n\nvar (\n\tflagSet = flag.NewFlagSet(\"ali\", flag.ContinueOnError)\n\n\t// Automatically populated by goreleaser during build\n\tversion = \"unversioned\"\n\tcommit  = \"?\"\n\tdate    = \"?\"\n)\n\ntype cli struct {\n\t// options for attacker\n\trate               int\n\tduration           time.Duration\n\ttimeout            time.Duration\n\tmethod             string\n\theaders            []string\n\tbody               string\n\tbodyFile           string\n\tmaxBody            int64\n\tworkers            uint64\n\tmaxWorkers         uint64\n\tconnections        int\n\tnoHTTP2            bool\n\tlocalAddress       string\n\tnoKeepAlive        bool\n\tbuckets            string\n\tresolvers          string\n\tinsecureSkipVerify bool\n\ttlsCertFile        string\n\ttlsKeyFile         string\n\tcaCert             string\n\n\t//options for gui\n\tqueryRange     time.Duration\n\tredrawInterval time.Duration\n\n\tdebug   bool\n\tversion bool\n\tstdout  io.Writer\n\tstderr  io.Writer\n}\n\nfunc main() {\n\tc, err := parseFlags(os.Stdout, os.Stderr)\n\tif err != nil {\n\t\tos.Exit(0)\n\t}\n\tos.Exit(c.run(flagSet.Args()))\n}\n\nfunc parseFlags(stdout, stderr io.Writer) (*cli, error) {\n\tc := &cli{\n\t\tstdout: stdout,\n\t\tstderr: stderr,\n\t}\n\tflagSet.IntVarP(&c.rate, \"rate\", \"r\", attacker.DefaultRate, \"The request rate per second to issue against the targets. Give 0 then it will send requests as fast as possible.\")\n\tflagSet.DurationVarP(&c.duration, \"duration\", \"d\", attacker.DefaultDuration, \"The amount of time to issue requests to the targets. Give 0s for an infinite attack.\")\n\tflagSet.DurationVarP(&c.timeout, \"timeout\", \"t\", attacker.DefaultTimeout, \"The timeout for each request. 0s means to disable timeouts.\")\n\tflagSet.StringVarP(&c.method, \"method\", \"m\", attacker.DefaultMethod, \"An HTTP request method for each request.\")\n\tflagSet.StringArrayVarP(&c.headers, \"header\", \"H\", []string{}, \"A request header to be sent. Can be used multiple times to send multiple headers.\")\n\tflagSet.StringVarP(&c.body, \"body\", \"b\", \"\", \"A request body to be sent.\")\n\tflagSet.StringVarP(&c.bodyFile, \"body-file\", \"B\", \"\", \"The path to file whose content will be set as the http request body.\")\n\tflagSet.Int64VarP(&c.maxBody, \"max-body\", \"M\", attacker.DefaultMaxBody, \"Max bytes to capture from response bodies. Give -1 for no limit.\")\n\tflagSet.BoolVarP(&c.version, \"version\", \"v\", false, \"Print the current version.\")\n\tflagSet.BoolVar(&c.debug, \"debug\", false, \"Run in debug mode.\")\n\tflagSet.BoolVarP(&c.noKeepAlive, \"no-keepalive\", \"K\", false, \"Don't use HTTP persistent connection.\")\n\tflagSet.Uint64VarP(&c.workers, \"workers\", \"w\", attacker.DefaultWorkers, \"Amount of initial workers to spawn.\")\n\tflagSet.Uint64VarP(&c.maxWorkers, \"max-workers\", \"W\", attacker.DefaultMaxWorkers, \"Amount of maximum workers to spawn.\")\n\tflagSet.IntVarP(&c.connections, \"connections\", \"c\", attacker.DefaultConnections, \"Amount of maximum open idle connections per target host\")\n\tflagSet.BoolVar(&c.noHTTP2, \"no-http2\", false, \"Don't issue HTTP/2 requests to servers which support it.\")\n\tflagSet.StringVar(&c.localAddress, \"local-addr\", \"0.0.0.0\", \"Local IP address.\")\n\tflagSet.BoolVar(&c.insecureSkipVerify, \"insecure\", false, \"Skip TLS verification\")\n\tflagSet.StringVar(&c.caCert, \"cacert\", \"\", \"PEM ca certificate file\")\n\tflagSet.StringVar(&c.tlsCertFile, \"cert\", \"\", \"PEM encoded tls certificate file to use\")\n\tflagSet.StringVar(&c.tlsKeyFile, \"key\", \"\", \"PEM encoded tls private key file to use\")\n\t// TODO: Re-enable when making it capable of drawing histogram bar chart.\n\t//flagSet.StringVar(&c.buckets, \"buckets\", \"\", \"Histogram buckets; comma-separated list.\")\n\tflagSet.StringVar(&c.resolvers, \"resolvers\", \"\", \"Custom DNS resolver addresses; comma-separated list.\")\n\tflagSet.DurationVar(&c.queryRange, \"query-range\", gui.DefaultQueryRange, \"The results within the given time range will be drawn on the charts\")\n\tflagSet.DurationVar(&c.redrawInterval, \"redraw-interval\", gui.DefaultRedrawInterval, \"Specify how often it redraws the screen\")\n\tflagSet.Usage = c.usage\n\tif err := flagSet.Parse(os.Args[1:]); err != nil {\n\t\tif !errors.Is(err, flag.ErrHelp) {\n\t\t\tfmt.Fprintln(c.stderr, err)\n\t\t}\n\t\treturn nil, err\n\t}\n\treturn c, nil\n}\n\nfunc (c *cli) run(args []string) int {\n\tif c.version {\n\t\tfmt.Fprintf(c.stderr, \"version=%s, commit=%s, buildDate=%s, os=%s, arch=%s\\n\", version, commit, date, runtime.GOOS, runtime.GOARCH)\n\t\treturn 0\n\t}\n\tif len(args) == 0 {\n\t\tfmt.Fprintln(c.stderr, \"no target given\")\n\t\tc.usage()\n\t\treturn 1\n\t}\n\ttarget := args[0]\n\tif _, err := url.ParseRequestURI(target); err != nil {\n\t\tfmt.Fprintf(c.stderr, \"bad target URL: %v\\n\", err)\n\t\tc.usage()\n\t\treturn 1\n\t}\n\topts, err := c.makeAttackerOptions()\n\tif err != nil {\n\t\tfmt.Fprintln(c.stderr, err.Error())\n\t\tc.usage()\n\t\treturn 1\n\t}\n\n\t// Data points out of query range get flushed to prevent using heap more than need.\n\ts, err := storage.NewStorage(c.queryRange * 2)\n\tif err != nil {\n\t\tfmt.Fprintf(c.stderr, \"failed to initialize time-series storage: %v\\n\", err)\n\t\tc.usage()\n\t\treturn 1\n\t}\n\ta, err := attacker.NewAttacker(s, target, opts)\n\tif err != nil {\n\t\tfmt.Fprintf(c.stderr, \"failed to initialize attacker: %v\\n\", err)\n\t\tc.usage()\n\t\treturn 1\n\t}\n\tsetDebug(nil, c.debug)\n\n\tif err := gui.Run(target, s, a,\n\t\tgui.Options{\n\t\t\tQueryRange:     c.queryRange,\n\t\t\tRedrawInternal: c.redrawInterval,\n\t\t},\n\t); err != nil {\n\t\tfmt.Fprintf(c.stderr, \"failed to start application: %s\\n\", err.Error())\n\t\tc.usage()\n\t\treturn 1\n\t}\n\treturn 0\n}\n\nfunc (c *cli) usage() {\n\tformat := `Usage:\n  ali [flags] <target URL>\n\nFlags:\n%s\nExamples:\n  ali --duration=10m --rate=100 http://host.xz\n\nAuthor:\n  Ryo Nakao <ryo@nakao.dev>\n`\n\tfmt.Fprintf(c.stderr, format, flagSet.FlagUsages())\n}\n\n// makeAttackerOptions gives back an options for attacker, with the CLI input.\nfunc (c *cli) makeAttackerOptions() (*attacker.Options, error) {\n\tif !validateMethod(c.method) {\n\t\treturn nil, fmt.Errorf(\"given method %q isn't an HTTP request method\", c.method)\n\t}\n\tif c.duration < 0 {\n\t\treturn nil, fmt.Errorf(\"duration must be greater than or equal to 0s\")\n\t}\n\n\theader := make(http.Header)\n\tfor _, hdr := range c.headers {\n\t\tparts := strings.SplitN(hdr, \":\", 2)\n\t\tif len(parts) != 2 {\n\t\t\treturn nil, fmt.Errorf(\"given header %q has a wrong format\", hdr)\n\t\t}\n\t\tkey, val := strings.TrimSpace(parts[0]), strings.TrimSpace(parts[1])\n\t\tif key == \"\" || val == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"given header %q has a wrong format\", hdr)\n\t\t}\n\t\t// NOTE: Add key/value directly to the http.Header (map[string][]string).\n\t\t// http.Header.Add() canonicalizes keys but the vegeta API is used to test systems that require case-sensitive headers.\n\t\theader[key] = append(header[key], val)\n\t}\n\n\tif c.body != \"\" && c.bodyFile != \"\" {\n\t\treturn nil, fmt.Errorf(`only one of \"--body\" and \"--body-file\" can be specified`)\n\t}\n\n\tbody := []byte(c.body)\n\tif c.bodyFile != \"\" {\n\t\tb, err := ioutil.ReadFile(c.bodyFile)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"unable to open %q: %w\", c.bodyFile, err)\n\t\t}\n\t\tbody = b\n\t}\n\n\tlocalAddr := net.IPAddr{IP: net.ParseIP(c.localAddress)}\n\n\tparsedBuckets, err := parseBucketOptions(c.buckets)\n\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"wrong buckets format %w\", err)\n\t}\n\n\tparsedResolvers, err := parseResolvers(c.resolvers)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar certs []tls.Certificate\n\tif c.tlsCertFile != \"\" && c.tlsKeyFile != \"\" {\n\t\tcert, err := tls.LoadX509KeyPair(c.tlsCertFile, c.tlsKeyFile)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error loading PEM key pair %w\", err)\n\t\t}\n\n\t\tcerts = append(certs, cert)\n\t}\n\n\tvar caCertPool *x509.CertPool\n\tif c.caCert != \"\" {\n\t\tcaCertPool = x509.NewCertPool()\n\t\tcaCert, err := ioutil.ReadFile(c.caCert)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tcaCertPool.AppendCertsFromPEM(caCert)\n\t}\n\n\treturn &attacker.Options{\n\t\tRate:               c.rate,\n\t\tDuration:           c.duration,\n\t\tTimeout:            c.timeout,\n\t\tMethod:             c.method,\n\t\tBody:               body,\n\t\tMaxBody:            c.maxBody,\n\t\tHeader:             header,\n\t\tKeepAlive:          !c.noKeepAlive,\n\t\tWorkers:            c.workers,\n\t\tMaxWorkers:         c.maxWorkers,\n\t\tConnections:        c.connections,\n\t\tHTTP2:              !c.noHTTP2,\n\t\tLocalAddr:          localAddr,\n\t\tBuckets:            parsedBuckets,\n\t\tResolvers:          parsedResolvers,\n\t\tInsecureSkipVerify: c.insecureSkipVerify,\n\t\tTLSCertificates:    certs,\n\t\tCACertificatePool:  caCertPool,\n\t}, nil\n}\n\nfunc validateMethod(method string) bool {\n\tswitch method {\n\tcase http.MethodGet, http.MethodHead, http.MethodPost, http.MethodPut, http.MethodPatch, http.MethodDelete, http.MethodConnect, http.MethodOptions, http.MethodTrace:\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc parseBucketOptions(rawBuckets string) ([]time.Duration, error) {\n\tif rawBuckets == \"\" {\n\t\treturn []time.Duration{}, nil\n\t}\n\n\tstringBuckets := strings.Split(rawBuckets, \",\")\n\tresult := make([]time.Duration, len(stringBuckets))\n\n\tfor _, bucket := range stringBuckets {\n\t\ttrimmedBucket := strings.TrimSpace(bucket)\n\t\td, err := time.ParseDuration(trimmedBucket)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tresult = append(result, d)\n\t}\n\n\treturn result, nil\n}\n\nfunc parseResolvers(addrs string) ([]string, error) {\n\tif addrs == \"\" {\n\t\treturn nil, nil\n\t}\n\n\tstringAddrs := strings.Split(addrs, \",\")\n\tresult := make([]string, 0, len(stringAddrs))\n\n\tfor _, addr := range stringAddrs {\n\t\ttrimmedAddr := strings.TrimSpace(addr)\n\n\t\t// if given address has no port, append \"53\"\n\t\tif !strings.Contains(trimmedAddr, \":\") {\n\t\t\ttrimmedAddr += \":53\"\n\t\t}\n\n\t\thost, port, err := net.SplitHostPort(trimmedAddr)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\t// validate port\n\t\t_, err = strconv.ParseUint(port, 10, 16)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"port of given address %q has a wrong format\", addr)\n\t\t}\n\n\t\t// validate IP\n\t\tif ip := net.ParseIP(host); ip == nil {\n\t\t\treturn nil, fmt.Errorf(\"given address %q has a wrong format\", addr)\n\t\t}\n\n\t\tresult = append(result, trimmedAddr)\n\t}\n\n\treturn result, nil\n}\n\n// Makes a new file under the ~/.config/ali only when debug use.\nfunc setDebug(w io.Writer, debug bool) {\n\tif !debug {\n\t\tlog.SetOutput(io.Discard)\n\t\treturn\n\t}\n\tif w == nil {\n\t\tdir, err := configDir()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tif err := os.MkdirAll(dir, os.ModePerm); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tw, err = os.OpenFile(filepath.Join(dir, \"debug.log\"), os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\tlog.SetOutput(w)\n}\n\nfunc configDir() (string, error) {\n\tusr, err := user.Current()\n\tif err == nil {\n\t\treturn filepath.Join(usr.HomeDir, \".config\", \"ali\"), nil\n\t}\n\thomeDir := os.Getenv(\"HOME\")\n\tif homeDir == \"\" {\n\t\treturn \"\", fmt.Errorf(\"unable to get current user home directory: os/user lookup failed; $HOME is empty\")\n\t}\n\treturn filepath.Join(homeDir, \".config\", \"ali\"), nil\n}\n"
        },
        {
          "name": "main_test.go",
          "type": "blob",
          "size": 7.3564453125,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"log\"\n\t\"math\"\n\t\"net/http\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\t\"github.com/nakabonne/ali/attacker\"\n)\n\nfunc TestValidateMethod(t *testing.T) {\n\ttests := []struct {\n\t\tname   string\n\t\tmethod string\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"wrong method\",\n\t\t\tmethod: \"WRONG\",\n\t\t\twant:   false,\n\t\t},\n\t\t{\n\t\t\tname:   \"right method\",\n\t\t\tmethod: \"GET\",\n\t\t\twant:   true,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tgot := validateMethod(tt.method)\n\t\t\tassert.Equal(t, tt.want, got)\n\t\t})\n\t}\n}\n\nfunc TestParseFlags(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\twant    *cli\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname: \"with default options\",\n\t\t\twant: &cli{\n\t\t\t\trate:           50,\n\t\t\t\tduration:       time.Second * 10,\n\t\t\t\ttimeout:        time.Second * 30,\n\t\t\t\tmethod:         \"GET\",\n\t\t\t\theaders:        []string{},\n\t\t\t\tmaxBody:        -1,\n\t\t\t\tnoKeepAlive:    false,\n\t\t\t\tworkers:        10,\n\t\t\t\tmaxWorkers:     math.MaxUint64,\n\t\t\t\tconnections:    10000,\n\t\t\t\tstdout:         new(bytes.Buffer),\n\t\t\t\tstderr:         new(bytes.Buffer),\n\t\t\t\tnoHTTP2:        false,\n\t\t\t\tlocalAddress:   \"0.0.0.0\",\n\t\t\t\tresolvers:      \"\",\n\t\t\t\tqueryRange:     30 * time.Second,\n\t\t\t\tredrawInterval: 250 * time.Millisecond,\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tb := new(bytes.Buffer)\n\t\t\tgot, err := parseFlags(b, b)\n\t\t\tassert.Equal(t, tt.want, got)\n\t\t\tassert.Equal(t, tt.wantErr, err != nil)\n\t\t})\n\t}\n}\n\nfunc TestRun(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\tcli      *cli\n\t\targs     []string\n\t\twantCode int\n\t}{\n\t\t{\n\t\t\tname:     \"print version\",\n\t\t\tcli:      &cli{version: true},\n\t\t\targs:     []string{},\n\t\t\twantCode: 0,\n\t\t},\n\t\t{\n\t\t\tname:     \"no target given\",\n\t\t\tcli:      &cli{},\n\t\t\targs:     []string{},\n\t\t\twantCode: 1,\n\t\t},\n\t\t{\n\t\t\tname:     \"bad URL\",\n\t\t\tcli:      &cli{},\n\t\t\targs:     []string{\"bad-url\"},\n\t\t\twantCode: 1,\n\t\t},\n\t\t{\n\t\t\tname:     \"failed to make options\",\n\t\t\tcli:      &cli{method: \"WRONG\"},\n\t\t\targs:     []string{\"bad-url\"},\n\t\t\twantCode: 1,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tb := new(bytes.Buffer)\n\t\t\ttt.cli.stdout = b\n\t\t\ttt.cli.stderr = b\n\t\t\tgot := tt.cli.run(tt.args)\n\t\t\tassert.Equal(t, tt.wantCode, got)\n\t\t})\n\t}\n}\n\nfunc TestMakeAttackerOptions(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tcli     *cli\n\t\twant    *attacker.Options\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname:    \"wrong method\",\n\t\t\tcli:     &cli{method: \"WRONG\"},\n\t\t\twant:    nil,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"duration less than 0\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:   \"GET\",\n\t\t\t\tduration: -1,\n\t\t\t},\n\t\t\twant:    nil,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"missing colon in given header\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:   \"GET\",\n\t\t\t\tduration: 1,\n\t\t\t\theaders:  []string{\"keyvalue\"},\n\t\t\t},\n\t\t\twant:    nil,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"missing key in given header\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:   \"GET\",\n\t\t\t\tduration: 1,\n\t\t\t\theaders:  []string{\":value\"},\n\t\t\t},\n\t\t\twant:    nil,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"missing value in given header\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:   \"GET\",\n\t\t\t\tduration: 1,\n\t\t\t\theaders:  []string{\"key:\"},\n\t\t\t},\n\t\t\twant:    nil,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"both body and body file given\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:   \"GET\",\n\t\t\t\tduration: 1,\n\t\t\t\theaders:  []string{\"key:value\"},\n\t\t\t\tbody:     \"body\",\n\t\t\t\tbodyFile: \"path/to\",\n\t\t\t},\n\t\t\twant:    nil,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"body given\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:   \"GET\",\n\t\t\t\tduration: 1,\n\t\t\t\theaders:  []string{\"key:value\"},\n\t\t\t\tbody:     `{\"foo\": 1}`,\n\t\t\t},\n\t\t\twant: &attacker.Options{\n\t\t\t\tRate:     0,\n\t\t\t\tDuration: 1,\n\t\t\t\tTimeout:  0,\n\t\t\t\tMethod:   \"GET\",\n\t\t\t\tBody:     []byte(`{\"foo\": 1}`),\n\t\t\t\tHeader: http.Header{\n\t\t\t\t\t\"key\": []string{\"value\"},\n\t\t\t\t},\n\t\t\t\tWorkers:    0,\n\t\t\t\tMaxWorkers: 0,\n\t\t\t\tMaxBody:    0,\n\t\t\t\tHTTP2:      true,\n\t\t\t\tKeepAlive:  true,\n\t\t\t\tBuckets:    []time.Duration{},\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"body file given\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:   \"GET\",\n\t\t\t\tduration: 1,\n\t\t\t\theaders:  []string{\"key:value\"},\n\t\t\t\tbody:     \"\",\n\t\t\t\tbodyFile: \"testdata/body-1.json\",\n\t\t\t},\n\t\t\twant: &attacker.Options{\n\t\t\t\tRate:     0,\n\t\t\t\tDuration: 1,\n\t\t\t\tTimeout:  0,\n\t\t\t\tMethod:   \"GET\",\n\t\t\t\tBody:     []byte(`{\"foo\": 1}`),\n\t\t\t\tHeader: http.Header{\n\t\t\t\t\t\"key\": []string{\"value\"},\n\t\t\t\t},\n\t\t\t\tWorkers:    0,\n\t\t\t\tMaxWorkers: 0,\n\t\t\t\tMaxBody:    0,\n\t\t\t\tHTTP2:      true,\n\t\t\t\tKeepAlive:  true,\n\t\t\t\tBuckets:    []time.Duration{},\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"wrong body file given\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:   \"GET\",\n\t\t\t\tduration: 1,\n\t\t\t\theaders:  []string{\"key:value\"},\n\t\t\t\tbodyFile: \"wrong\",\n\t\t\t},\n\t\t\twant:    nil,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"disable http2\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:   \"GET\",\n\t\t\t\tduration: 1,\n\t\t\t\theaders:  []string{\"key:value\"},\n\t\t\t\tbody:     \"\",\n\t\t\t\tbodyFile: \"testdata/body-1.json\",\n\t\t\t\tnoHTTP2:  true,\n\t\t\t},\n\t\t\twant: &attacker.Options{\n\t\t\t\tRate:     0,\n\t\t\t\tDuration: 1,\n\t\t\t\tTimeout:  0,\n\t\t\t\tMethod:   \"GET\",\n\t\t\t\tBody:     []byte(`{\"foo\": 1}`),\n\t\t\t\tHeader: http.Header{\n\t\t\t\t\t\"key\": []string{\"value\"},\n\t\t\t\t},\n\t\t\t\tWorkers:    0,\n\t\t\t\tMaxWorkers: 0,\n\t\t\t\tMaxBody:    0,\n\t\t\t\tHTTP2:      false,\n\t\t\t\tKeepAlive:  true,\n\t\t\t\tBuckets:    []time.Duration{},\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"disable keepalive\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:      \"GET\",\n\t\t\t\tduration:    1,\n\t\t\t\theaders:     []string{\"key:value\"},\n\t\t\t\tbody:        \"\",\n\t\t\t\tbodyFile:    \"testdata/body-1.json\",\n\t\t\t\tnoKeepAlive: true,\n\t\t\t},\n\t\t\twant: &attacker.Options{\n\t\t\t\tRate:     0,\n\t\t\t\tDuration: 1,\n\t\t\t\tTimeout:  0,\n\t\t\t\tMethod:   \"GET\",\n\t\t\t\tBody:     []byte(`{\"foo\": 1}`),\n\t\t\t\tHeader: http.Header{\n\t\t\t\t\t\"key\": []string{\"value\"},\n\t\t\t\t},\n\t\t\t\tWorkers:    0,\n\t\t\t\tMaxWorkers: 0,\n\t\t\t\tMaxBody:    0,\n\t\t\t\tHTTP2:      true,\n\t\t\t\tKeepAlive:  false,\n\t\t\t\tBuckets:    []time.Duration{},\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"use custom DNS resolvers\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:    \"GET\",\n\t\t\t\tresolvers: \"1.2.3.4,192.168.11.1:53\",\n\t\t\t},\n\t\t\twant: &attacker.Options{\n\t\t\t\tRate:       0,\n\t\t\t\tDuration:   0,\n\t\t\t\tTimeout:    0,\n\t\t\t\tMethod:     \"GET\",\n\t\t\t\tBody:       []byte{},\n\t\t\t\tHeader:     http.Header{},\n\t\t\t\tWorkers:    0,\n\t\t\t\tMaxWorkers: 0,\n\t\t\t\tMaxBody:    0,\n\t\t\t\tHTTP2:      true,\n\t\t\t\tKeepAlive:  true,\n\t\t\t\tBuckets:    []time.Duration{},\n\t\t\t\tResolvers:  []string{\"1.2.3.4:53\", \"192.168.11.1:53\"},\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"wrong format\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:    \"GET\",\n\t\t\t\tresolvers: \"1.2.3.4:1:1\",\n\t\t\t},\n\t\t\twant:    nil,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"wrong IP address\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:    \"GET\",\n\t\t\t\tresolvers: \"1111.2.3.4\",\n\t\t\t},\n\t\t\twant:    nil,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"wrong port number\",\n\t\t\tcli: &cli{\n\t\t\t\tmethod:    \"GET\",\n\t\t\t\tresolvers: \"192.168.11.1:65536\",\n\t\t\t},\n\t\t\twant:    nil,\n\t\t\twantErr: true,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tgot, err := tt.cli.makeAttackerOptions()\n\t\t\tassert.Equal(t, tt.want, got)\n\t\t\tassert.Equal(t, tt.wantErr, err != nil)\n\t\t})\n\t}\n}\n\nfunc TestSetDebug(t *testing.T) {\n\ttests := []struct {\n\t\tname  string\n\t\tdebug bool\n\t\tinput string\n\t\twant  string\n\t}{\n\t\t{\n\t\t\tname:  \"in non-debug use\",\n\t\t\tdebug: false,\n\t\t\tinput: \"text\",\n\t\t\twant:  \"\",\n\t\t},\n\t\t{\n\t\t\tname:  \"in debug use\",\n\t\t\tdebug: true,\n\t\t\tinput: \"text\",\n\t\t\twant:  \"text\",\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tb := &bytes.Buffer{}\n\t\t\tsetDebug(b, tt.debug)\n\t\t\tlog.Print(tt.input)\n\t\t\tassert.Equal(t, true, strings.Contains(b.String(), tt.want))\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}