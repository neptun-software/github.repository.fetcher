{
  "metadata": {
    "timestamp": 1736567137858,
    "page": 735,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xiaonanln/goworld",
      "stars": 2586,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.078125,
          "content": "coverage:\n  status:\n    project: off\n    patch: off\n\nignore:\n  - \"**/*_test.go\"\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6162109375,
          "content": "# Binaries for programs and plugins\n*.exe\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Project-local glide cache, RE: https://github.com/Masterminds/glide/issues/736\n.glide/\n\n*~\n*.log\n*.log.gz\n.*.swp\n.*.swo\n\n_entity_storage/\nfc\n*.db/\n.idea/\nexamples/*/*.sh\n*.bat\n*.dat\nvendor/\n.idea.bak/\n.vscode/\ntests/\n/components/dispatcher/dispatcher\n/components/gate/gate\n/examples/test_client/test_client\n/examples/test_game/test_game\n/examples/chatroom_demo/chatroom_demo\n/examples/nil_game/nil_game\n/examples/unity_demo/unity_demo\n/go.sum\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.5625,
          "content": "# GoWorld\n_**Scalable Distributed Game Server Engine with Hot Reload in Golang**_\n\n\n[![GoDoc](https://godoc.org/github.com/xiaonanln/goworld?status.png)](https://godoc.org/github.com/xiaonanln/goworld) \n[![Build Status](https://api.travis-ci.org/xiaonanln/goworld.svg?branch=master)](https://travis-ci.org/xiaonanln/goworld) [![Go Report Card](https://goreportcard.com/badge/github.com/xiaonanln/goworld)](https://goreportcard.com/report/github.com/xiaonanln/goworld) [![codecov](https://codecov.io/gh/xiaonanln/goworld/branch/master/graph/badge.svg)](https://codecov.io/gh/xiaonanln/goworld) \n[![ApacheLicense](https://img.shields.io/badge/license-APACHE%20License-blue.svg)](https://raw.githubusercontent.com/xiaonanln/goworld/master/LICENSE)\n\n  * [Features](#features)\n  * [Architecture](#architecture)\n  * [Introduction](#introduction)\n  * [Get GoWorld](#get-goworld)\n  * [Manage GoWorld Servers](#manage-goworld-servers)\n  * [Demos](#demos)\n    * [Chatroom Demo](#chatroom-demo)\n    * [Unity Demo](#unity-demo): [GoWorldUnityDemo.zip](https://drive.google.com/file/d/1A1CJCVWFQWa-iMuAoAdHZ4JoXTtU5Q7z/view?usp=sharing) \n---------------------------------------\n#### 中文资料 \n> [中文文档](https://godoc.org/github.com/xiaonanln/goworld/cn)  \n> [游戏服务器介绍](http://www.cnblogs.com/isaiah/p/7259036.html)  \n> [目录结构说明](https://github.com/xiaonanln/goworld/wiki/GoWorld%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%95%E6%93%8E%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84)   \n> [使用GoWorld轻松实现分布式聊天服务器](https://github.com/xiaonanln/goworld/wiki/%E4%BD%BF%E7%94%A8GoWorld%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%95%E6%93%8E%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8)  \n\n\n#### 游戏服务端开源引擎GoWorld教程  \n1.[安装和运行](https://zhuanlan.zhihu.com/p/66304813 \"安装和运行\")  \n2.[Unity示例双端联调](https://zhuanlan.zhihu.com/p/67065981 \"Unity示例双端联调\")  \n3.[手把手写一个聊天室](https://zhuanlan.zhihu.com/p/67951379 \"手把手写一个聊天室\")  \n4.[多个频道的聊天室](https://zhuanlan.zhihu.com/p/68901701 \"多个频道的聊天室\")  \n5.[登录注册和存储](https://zhuanlan.zhihu.com/p/70039615 \"登录注册和存储\")  \n6.[移动同步和AOI](https://zhuanlan.zhihu.com/p/70778081 \"移动同步和AOI\")  \n7.[源码解析之启动流程和热更新](https://zhuanlan.zhihu.com/p/72093172 \"源码解析之启动流程和热更新\")  \n8.[码解析之gate](https://zhuanlan.zhihu.com/p/73727839 \"码解析之gate\")  \n9.[源码解析之dispatcher](https://zhuanlan.zhihu.com/p/73906406 \"源码解析之dispatcher\")  \n10.[源码解析之entity](https://zhuanlan.zhihu.com/p/74736032 \"源码解析之entity\")  \n\n\n---------------------------------------\n> **欢迎加入Go服务端开发交流群：[662182346](http://shang.qq.com/wpa/qunwpa?idkey=f2a99bd9bd9e6df3528174180aad753d05b372a8828e1b8e5c1ec5df42b301db)**\n---------------------------------------  \n## Features\n* **Spaces & Entities**: manage multiple spaces and entities with AOI support\n* **Distributed**: increase server capacity by using more machines\n* **Hot-Swappable**: update game logic by restarting server process\n* **Multiple Communication Protocols**: supports TCP, [KCP](https://github.com/skywind3000/kcp) and WebSocket\n* **Traffic Compression & Encryption**: traffic between clients and servers can be compressed and encrypted\n\n## Architecture\n![GoWorld Architecture](https://docs.google.com/drawings/d/e/2PACX-1vS20sn1rD-x23P6PpBV-C4Uy5BI6vry4TjKV9pBPtmoghlkH_aP24Ip4usyUciPRC6tpvsJX4Gufgvj/pub?w=960&h=720 \"GoWorld Architecture\")\n\n## Introduction\nGoWorld server adopts an entity framework, in which entities represent all players, monsters, NPCs.\nEntities in the same space can visit each other directly by calling methods or access attributes. \nEntities in different spaces can call each over using RPC.\n\nA GoWorld server consists of one dispatcher, one or more games and one or more gates. \nThe gates are responsible for handling client connections and receive/send packets from/to clients. \nThe games manages all entities and runs all game logic. \nThe dispatcher is responsible for redirecting packets among games and between games and gates.  \n\nThe game processes are **hot-swappable**. \nWe can swap a game by sending `SIGHUP` to the process and restart the process with **-restore** parameter to bring game \nback to work but with the latest executable image. This feature enables updating server-side logic or fixing server bugs\n transparently without significant interference of online players. \n\n## Installing GoWorld\nGoWorld requries Go 1.11+ to install.\n```bash\ngo install github.com/xiaonanln/goworld/cmd/...\n``` \n\n## Manage GoWorld Servers\nUse command `goworld` to build, start, stop and reload game servers. \n\n**Build Example Chatroom Server:**\n```bash\n$ goworld build examples/chatroom_demo\n```\n\n**Start Example Chatroom Server: (dispatcher -> game -> gate)**\n```bash\n$ goworld start examples/chatroom_demo\n``` \n\n**Stop Game Server (gate -> game -> dispatcher):**\n```bash\n$ goworld stop examples/chatroom_demo\n```\n\n**Reload Game Servers:**\n```bash\n$ goworld reload examples/chatroom_demo\n```\nReload will reboot game processes with the current executable while preserving all game server states. \n**However, it does not work on Windows.**\n\n**List Server Processes:**\n```bash\n$ goworld status examples/chatroom_demo\n> 1 dispatcher running, 1/1 gates running, 1/1 games (examples/chatroom_demo) running\n> \t2763      dispatcher      /home/ubuntu/go/src/github.com/xiaonanln/goworld/components/dispatcher/dispatcher -dispid 1\n> \t2770      chatroom_demo   /home/ubuntu/go/src/github.com/xiaonanln/goworld/examples/chatroom_demo/chatroom_demo -gid 1\n> \t2779      gate            /home/ubuntu/go/src/github.com/xiaonanln/goworld/components/gate/gate -gid 1\n```  \n\n## Demos\n\n### Chatroom Demo\nThe chatroom demo is a simple implementation of chatroom server and client. It illustrates how\nGoWorld can also be used for games which don't divide players by spaces. \n\nThe chatroom demo provides following features:\n* register & login\n* send chat message\n* switch chatrooms\n\n**Build Server:**\n```bash\ngoworld build examples/chatroom_demo\n```\n**Run Server:**\n```bash\ngoworld start examples/chatroom_demo\n```\n\n**Chatroom Demo Client:**\n\nChatroom demo client implements the client-server protocol in Javascript.  \nThe client for chatroom demo is hosted at [github.com/xiaonanln/goworld-chatroom-demo-client](https://github.com/xiaonanln/goworld-chatroom-demo-client).\nThe project was created and built in [Cocos Creater 1.5](http://www.cocos2d-x.org/). \n\n### Unity Demo\nUnity Demo is a simple multiple player monster shooting game to show how spaces and entities of GoWorld\ncan be used to create multiple player online games.  \n\n* register & login\n* move players in space\n* summon monsters\n* player shoot monsters\n* monsters attack players\n\nDeveloping features:\n* Hit effects\n* Players migrate among multiple spaces\n* Server side map navigation\n\n**Build Server:**\n```bash\ngoworld build examples/unity_demo\n```\n**Run Server:**\n```bash\ngoworld start examples/unity_demo\n```\n\n**Unity Demo Client:**\n\nUnity demo client implements the client-server protocol in C#. \nThe client for unity demo is hosted at [https://github.com/xiaonanln/goworld-unity-demo](https://github.com/xiaonanln/goworld-unity-demo).\nThe project was created and built in [Unity 2017.1](https://unity3d.com/). \n\nYou can try the demo by downloading [GoWorldUnityDemo.zip](https://drive.google.com/file/d/1A1CJCVWFQWa-iMuAoAdHZ4JoXTtU5Q7z/view?usp=sharing). \nThe demo connects to a goworld server on Huawei Cloud instance.\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 0.59765625,
          "content": "# TODO\n\n* Run GoWorld server on Docker\n\n* Adopt Kafka\n    ** Support For Reliable Call?\n\n* Run processes in Docker\n    * Dispatcher, Gate, Game should run in different docker container \n    * Processes connect each other and other services using Container Network\n    * Processes discover each other using etcd ?\n\n* Optimize callall and 'AllClients' attribute broadcasting ?\n\n* Multiple service entities on multiple Games to remove SPOF in service architecture\n\n* Service Registry using Etcd\n\n* Better AOI algorithm that enables entities to have different AOI distances\n\n* Read config using tag (maybe use yaml)\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0244140625,
          "content": "theme: jekyll-theme-slate"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "cn",
          "type": "tree",
          "content": null
        },
        {
          "name": "components",
          "type": "tree",
          "content": null
        },
        {
          "name": "covertest.sh",
          "type": "blob",
          "size": 0.255859375,
          "content": "#!/usr/bin/env bash\n\nset -e\necho \"\" > coverage.txt\n\nPKG=$(go list ./... | grep -v /vendor/)\n\nfor d in $PKG; do\n\tgo test -race -coverprofile=profile.out -covermode=atomic $d\n\tif [ -f profile.out ]; then\n\t\tcat profile.out >> coverage.txt\n\t\trm profile.out\n\tfi\ndone\n"
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 3.697265625,
          "content": "/*\nGoWorld is a distributed game server engine. GoWorld adopts a Space-Entity framework for game server programming.\nEntities can migrate between spaces by calling `EnterSpace`. Entities can call each other using EntityID which is a\nglobal unique identifier for each entity. Entites can be used to represent game objects like players, monsters, NPCs, etc.\n\nMultiprocessing\n\nGoWorld server contains multiple processes. There should be at least 3 processes: 1 dispatcher + 1 gate + 1 game.\nThe gate process is responsable for handling game client connections. Currently, gate supports multiple\ntransmission protocol including TCP, KCP or WebSocket. It also support data compression and encryption.\nThe game process is where game logic actually runs. A Space will always reside in one game process where it is created.\nEntities can migrate between multiple game processes by entering spaces on other game processes.\nGoWorld server can scale arbitrarily by running more process.\n\nPackage goworld\n\ngoworld package is dedicated to provide GoWorld game engine APIs for developers. Most of time developers should use\nfunctions exported by goworld package to manipulate spaces and entities. Developers can also use public methods of\nSpace and Entity.\n\nRun game\n\nGoWorld does not provide a game executable. Developers have to build their own game program. A common game program looks\nlike bellow:\n\n\timport \"goworld\"\n\n\tfunc main() {\n\t\tgoworld.RegisterSpace(&MySpace{}) // Register a custom Space type\n\t\t// Register service entity types\n\t\tgoworld.RegisterService(\"OnlineService\", &OnlineService{})\n\t\tgoworld.RegisterService(\"SpaceService\", &SpaceService{})\n\t\t// Register Account entity type\n\t\tgoworld.RegisterEntity(\"Account\", &Account{})\n\t\t// Register Monster entity type\n\t\tgoworld.RegisterEntity(\"Monster\", &Monster{})\n\t\t// Register Player entity type\n\t\tgoworld.RegisterEntity(\"Player\", &Player{})\n\t\t// Run the game server\n\t\tgoworld.Run()\n\t}\n\nBasically, you need to register space type, service types and entity types and then start the endless loop of game logic.\n\nCreating Spaces\n\nUse goworld.CreateSpace* functions to create spaces.\n\nCreating Entities\n\nUse goworld.CreateEntity* functions to create entities.\n\nLoading Entities\n\nUse goworld.LoadEntity* functions to load entities from database.\n\nEntity RPC\n\nUse goworld.Call* functions to do RPC among entities\n\nEntity storage and attributes\n\nEach entity type should override function DescribeEntityType to declare its expected behavior and all attributes,\njust like bellow.\n\n\tfunc (a *Avatar) DescribeEntityType(desc *entity.EntityTypeDesc) {\n\t\tdesc.SetPersistent(true).SetUseAOI(true, 100)\n\t\tdesc.DefineAttr(\"name\", \"AllClients\", \"Persistent\")\n\t\tdesc.DefineAttr(\"exp\", \"Client\", \"Persistent\")\n\t\tdesc.DefineAttr(\"lastMailID\", \"Persistent\")\n\t\tdesc.DefineAttr(\"testListField\", \"AllClients\")\n\t\tdesc.DefineAttr(\"enteringNilSpace\")\n\t}\n\nFunction SetPersistent can be used to make entities persistent. Persistent entities' attributes will be marshalled and\nsaved on Entity Storage (e.g. MongoDB) every configurable minutes.\n\nEntities use attributes to store related data. Attributes can be synchronized to clients automatically.\nAn entity's \"AllClient\" attributes will be synchronized to all clients of entities where this entity is\nin its AOI range. \"Client\" attributes wil be synchronized to own clients of entities. \"Persistent\" attributes will be\nsaved on entity storage when entities are saved periodically.\nWhen entity is migrated from one game process to another, all attributes are marshalled and sent to the target game where\nthe entity will be reconstructed using attribute data.\n\nConfiguration\n\nGoWorld uses `goworld.ini` as the default config file. Use '-configfile <path>' to use specified config file for processes.\n\n*/\npackage goworld\n"
        },
        {
          "name": "engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.224609375,
          "content": "module github.com/xiaonanln/goworld\n\ngo 1.17\n\nrequire (\n\tgithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869\n\tgithub.com/chasex/redis-go-cluster v1.0.0\n\tgithub.com/garyburd/redigo v1.6.0\n\tgithub.com/go-ini/ini v1.67.0\n\tgithub.com/go-ole/go-ole v1.2.6\n\tgithub.com/petar/GoLLRB v0.0.0-20190514000832-33fb24c13b99\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/sevlyar/go-daemon v0.1.6\n\tgithub.com/shirou/gopsutil v3.21.11+incompatible\n\tgithub.com/vmihailenco/msgpack v4.0.4+incompatible\n\tgithub.com/xiaonanln/go-aoi v0.2.0\n\tgithub.com/xiaonanln/go-trie-tst v0.0.0-20171018095208-5b9678d55438\n\tgithub.com/xiaonanln/go-xnsyncutil v0.0.5\n\tgithub.com/xiaonanln/goTimer v0.0.3\n\tgithub.com/xiaonanln/netconnutil v0.0.0-20200905060227-8faf06e9a365\n\tgithub.com/xiaonanln/pktconn v0.0.0-20200905130536-8a9529b7c220\n\tgithub.com/xiaonanln/typeconv v0.0.4\n\tgithub.com/xtaci/kcp-go v5.4.19+incompatible\n\tgo.uber.org/zap v1.22.0\n\tgolang.org/x/net v0.0.0-20220812174116-3211cb980234\n\tgolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab\n\tgopkg.in/mgo.v2 v2.0.0-20190816093944-a6b53ec6cb22\n)\n\nrequire (\n\tgithub.com/golang/protobuf v1.3.1 // indirect\n\tgithub.com/golang/snappy v0.0.1 // indirect\n\tgithub.com/kardianos/osext v0.0.0-20190222173326-2bc1f35cddc0 // indirect\n\tgithub.com/klauspost/cpuid v1.2.1 // indirect\n\tgithub.com/klauspost/reedsolomon v1.9.3 // indirect\n\tgithub.com/kr/pretty v0.1.0 // indirect\n\tgithub.com/kr/text v0.1.0 // indirect\n\tgithub.com/templexxx/cpufeat v0.0.0-20180724012125-cef66df7f161 // indirect\n\tgithub.com/templexxx/xor v0.0.0-20181023030647-4e92f724b73b // indirect\n\tgithub.com/tjfoc/gmsm v1.0.1 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.10 // indirect\n\tgithub.com/tklauser/numcpus v0.5.0 // indirect\n\tgithub.com/xiaonanln/tickchan v0.0.0-20181130012730-45de2aab1755 // indirect\n\tgithub.com/xtaci/lossyconn v0.0.0-20190602105132-8df528c0c9ae // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.2 // indirect\n\tgo.uber.org/atomic v1.10.0 // indirect\n\tgo.uber.org/multierr v1.8.0 // indirect\n\tgolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550 // indirect\n\tgoogle.golang.org/appengine v1.6.5 // indirect\n\tgopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 // indirect\n\tgopkg.in/eapache/queue.v1 v1.1.0 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n)\n"
        },
        {
          "name": "goworld.go",
          "type": "blob",
          "size": 8.6494140625,
          "content": "package goworld\n\nimport (\n\t\"time\"\n\n\t\"github.com/xiaonanln/goTimer\"\n\t\"github.com/xiaonanln/goworld/components/game\"\n\t\"github.com/xiaonanln/goworld/engine/common\"\n\t\"github.com/xiaonanln/goworld/engine/crontab\"\n\t\"github.com/xiaonanln/goworld/engine/entity\"\n\t\"github.com/xiaonanln/goworld/engine/kvdb\"\n\t\"github.com/xiaonanln/goworld/engine/post\"\n\t\"github.com/xiaonanln/goworld/engine/service\"\n\t\"github.com/xiaonanln/goworld/engine/storage\"\n)\n\n// Export useful types\ntype Vector3 = entity.Vector3\n\n// Entity type is the type of any entity in game\ntype Entity = entity.Entity\n\n// Space is the type of spaces\ntype Space = entity.Space\n\n// EntityID is a global unique ID for entities and spaces.\n// EntityID is unique in the whole game server, and also unique across multiple games.\ntype EntityID = common.EntityID\n\n// Run runs the server endless loop\n//\n// This is the main routine for the server and all entity logic,\n// and this function never quit\nfunc Run() {\n\tgame.Run()\n}\n\n// RegisterEntity registers the entity type so that entities can be created or loaded\n//\n// returns the entity type description object which can be used to define more properties\n// of entity type\nfunc RegisterEntity(typeName string, entityPtr entity.IEntity) *entity.EntityTypeDesc {\n\treturn entity.RegisterEntity(typeName, entityPtr, false)\n}\n\n// RegisterService registeres an service type\n// After registeration, the service entity will be created automatically on some game\nfunc RegisterService(typeName string, entityPtr entity.IEntity, shardCount int) {\n\tservice.RegisterService(typeName, entityPtr, shardCount)\n}\n\n// CreateSpaceAnywhere creates a space with specified kind in any game server\nfunc CreateSpaceAnywhere(kind int) EntityID {\n\treturn entity.CreateSpaceSomewhere(0, kind)\n}\n\n// CreateSpaceLocally creates a space with specified kind in the local game server\n//\n// returns the space EntityID\nfunc CreateSpaceLocally(kind int) *Space {\n\treturn entity.CreateSpaceLocally(kind)\n}\n\n// CreateSpaceOnGame creates a space with specified kind on the specified game\n//\n// returns the space EntityID\nfunc CreateSpaceOnGame(gameid uint16, kind int) EntityID {\n\treturn entity.CreateSpaceSomewhere(gameid, kind)\n}\n\n// CreateEntityLocally creates a entity on the local server\n//\n// returns EntityID\nfunc CreateEntityLocally(typeName string) *Entity {\n\treturn entity.CreateEntityLocally(typeName, nil)\n}\n\n// CreateEntitySomewhere creates a entity on any server\nfunc CreateEntityAnywhere(typeName string) EntityID {\n\treturn entity.CreateEntitySomewhere(0, typeName)\n}\n\nfunc CreateEntityOnGame(gameid uint16, typeName string) EntityID {\n\treturn entity.CreateEntitySomewhere(gameid, typeName)\n}\n\n// LoadEntityAnywhere loads the specified entity from entity storage\nfunc LoadEntityAnywhere(typeName string, entityID EntityID) {\n\tentity.LoadEntityAnywhere(typeName, entityID)\n}\n\n// LoadEntityOnGame loads entity in the specified game\n// If the entity already exists on any server, LoadEntityOnGame will do nothing\nfunc LoadEntityOnGame(typeName string, entityID EntityID, gameid uint16) {\n\tentity.LoadEntityOnGame(typeName, entityID, gameid)\n}\n\n// LoadEntityLocally load entity in the local game\n// If the entity already exists on any server, LoadEntityLocally will do nothing\nfunc LoadEntityLocally(typeName string, entityID EntityID) {\n\tentity.LoadEntityOnGame(typeName, entityID, GetGameID())\n}\n\n// Exists checks if entityID exists in entity storage\n//\n// returns result in callback\nfunc Exists(typeName string, entityID EntityID, callback storage.ExistsCallbackFunc) {\n\tstorage.Exists(typeName, entityID, callback)\n}\n\n// GetEntity gets the entity by EntityID\nfunc GetEntity(id EntityID) *Entity {\n\treturn entity.GetEntity(id)\n}\n\n// GetSpace gets the space by ID\nfunc GetSpace(id EntityID) *Space {\n\treturn entity.GetSpace(id)\n}\n\n// GetGameID gets the local server ID\n//\n// server ID is a uint16 number starts from 1, which should be different for each servers\n// server ID is also in the game config section name of goworld.ini\nfunc GetGameID() uint16 {\n\treturn game.GetGameID()\n}\n\n// MapAttr creates a new MapAttr\nfunc MapAttr() *entity.MapAttr {\n\treturn entity.NewMapAttr()\n}\n\n// ListAttr creates a new ListAttr\nfunc ListAttr() *entity.ListAttr {\n\treturn entity.NewListAttr()\n}\n\n// RegisterSpace registers the space entity type.\n//\n// All spaces will be created as an instance of this type\nfunc RegisterSpace(spacePtr entity.ISpace) {\n\tentity.RegisterSpace(spacePtr)\n}\n\n// Entities gets all entities as an EntityMap (do not modify it!)\nfunc Entities() entity.EntityMap {\n\treturn entity.Entities()\n}\n\n// Call other entities\nfunc Call(id EntityID, method string, args ...interface{}) {\n\tentity.Call(id, method, args)\n}\n\n// CallServiceAny calls the method of a random service entity\nfunc CallServiceAny(serviceName string, method string, args ...interface{}) {\n\tservice.CallServiceAny(serviceName, method, args)\n}\n\n// CallServiceAll calls the methods of all services entities\nfunc CallServiceAll(serviceName string, method string, args ...interface{}) {\n\tservice.CallServiceAll(serviceName, method, args)\n}\n\n// CallServiceShardIndex calls the method of the service entity specified by shard index\nfunc CallServiceShardIndex(serviceName string, shardIndex int, method string, args ...interface{}) {\n\tservice.CallServiceShardIndex(serviceName, shardIndex, method, args)\n}\n\n// CallServiceShardKey calls the method of the service entity specified by shard key (string)\nfunc CallServiceShardKey(serviceName string, shardKey string, method string, args ...interface{}) {\n\tservice.CallServiceShardKey(serviceName, shardKey, method, args)\n}\n\n// GetServiceEntityID returns the entityid of the service\nfunc GetServiceEntityID(serviceName string, shardIndex int) common.EntityID {\n\treturn service.GetServiceEntityID(serviceName, shardIndex)\n}\n\n// GetServiceShardCount returns the Shard Count of the service\nfunc GetServiceShardCount(serviceName string) int {\n\treturn service.GetServiceShardCount(serviceName)\n}\n\n// CheckServiceEntitiesReady returns if the service entities are all ready\nfunc CheckServiceEntitiesReady(serviceName string) bool {\n\treturn service.CheckServiceEntitiesReady(serviceName)\n}\n\n// CallNilSpaces calls methods of all nil spaces on all games\nfunc CallNilSpaces(method string, args ...interface{}) {\n\tentity.CallNilSpaces(method, args, game.GetGameID())\n}\n\n// GetNilSpaceID returns the Entity ID of nil space on the specified game\nfunc GetNilSpaceID(gameid uint16) EntityID {\n\treturn entity.GetNilSpaceID(gameid)\n}\n\n// GetNilSpace returns the nil space on this game\n// Nil space is a special space with Kind = 0. Nil space is the default space for all created entities.\n// Each game has one nil space with fixed EntityID for each game, which can be acquired by calling `GetNilSpaceID`\n//\n// Since nil game exists on each game with fixed EntityID, an entity can migrate to target game by calling `e.EnterSpace(GetNilSpaceID(gameid), Vector3{})`\nfunc GetNilSpace() *Space {\n\treturn entity.GetNilSpace()\n}\n\n// GetKVDB gets value of key from KVDB\nfunc GetKVDB(key string, callback kvdb.KVDBGetCallback) {\n\tkvdb.Get(key, callback)\n}\n\n// PutKVDB puts key-value to KVDB\nfunc PutKVDB(key string, val string, callback kvdb.KVDBPutCallback) {\n\tkvdb.Put(key, val, callback)\n}\n\n// GetOrPut gets value of key from KVDB, if val not exists or is \"\", put key-value to KVDB.\nfunc GetOrPutKVDB(key string, val string, callback kvdb.KVDBGetOrPutCallback) {\n\tkvdb.GetOrPut(key, val, callback)\n}\n\n// GetOnlineGames returns all online game IDs\nfunc GetOnlineGames() common.Uint16Set {\n\treturn game.GetOnlineGames()\n}\n\n// AddTimer adds a timer to be executed after specified duration\nfunc AddCallback(d time.Duration, callback func()) {\n\ttimer.AddCallback(d, callback)\n}\n\n// AddTimer adds a repeat timer to be executed every specified duration\nfunc AddTimer(d time.Duration, callback func()) {\n\ttimer.AddTimer(d, callback)\n}\n\n// Post posts a callback to be executed\n// It is almost same as AddCallback(0, callback)\nfunc Post(callback post.PostCallback) {\n\tpost.Post(callback)\n}\n\n// RegisterCrontab a callack which will be executed when time condition is satisfied\n//\n// param minute: time condition satisfied on the specified minute, or every -minute if minute is negative\n// param hour: time condition satisfied on the specified hour, or every -hour when hour is negative\n// param day: time condition satisfied on the specified day, or every -day when day is negative\n// param month: time condition satisfied on the specified month, or every -month when month is negative\n// param dayofweek: time condition satisfied on the specified week day, or every -dayofweek when dayofweek is negative\n// param cb: callback function to be executed when time is satisfied\nfunc RegisterCrontab(minute, hour, day, month, dayofweek int, cb func()) {\n\tcrontab.Register(minute, hour, day, month, dayofweek, cb)\n}\n"
        },
        {
          "name": "goworld.ini",
          "type": "blob",
          "size": 1.685546875,
          "content": "[debug]\ndebug = 1 ; set to 0 in production\n\n[deployment]\ndesired_dispatchers=1\ndesired_games=1\ndesired_gates=1\n\n[storage]\ntype=mongodb\nurl=mongodb://127.0.0.1:27017/\ndb=goworld\n\n[kvdb]\ntype=mongodb\nurl=mongodb://127.0.0.1:27017/goworld\ndb=goworld\ncollection=__kv__\n;type=redis\n;url=redis://127.0.0.1:6379\n;db=1\n;type=redis_cluster\n;start_nodes_1=127.0.0.1:6379\n;start_nodes_2=127.0.0.2:6379\n\n[dispatcher_common]\nlisten_addr=127.0.0.1:13000\nadvertise_addr=127.0.0.1:13000\nhttp_addr=127.0.0.1:23000\nlog_file=dispatcher.log\nlog_stderr=true\nlog_level=debug\n\n[dispatcher1]\nlisten_addr=127.0.0.1:13001\nadvertise_addr=127.0.0.1:13001\nhttp_addr=127.0.0.1:23001\n;[dispatcher2]\n;listen_addr=127.0.0.1:13002\n;advertise_addr=127.0.0.1:13002\n;http_addr=127.0.0.1:23002\n;[dispatcher3]\n;listen_addr=127.0.0.1:13003\n;advertise_addr=127.0.0.1:13003\n;http_addr=127.0.0.1:23003\n\n[game_common]\nboot_entity=Account\nsave_interval=600\nlog_file=game.log\nlog_stderr=true\nhttp_addr=127.0.0.1:25000\nlog_level=debug\nposition_sync_interval_ms=100 ; position sync: server -> client\n; gomaxprocs=0\n\n[game1]\nhttp_addr=25001\n; ban_boot_entity=false\n[game2]\nhttp_addr=25002\n[game3]\nhttp_addr=25003\n;ban_boot_entity=false\n;[game3]\n;http_addr=25003\n;;ban_boot_entity=false\n\n[gate_common]\n; gomaxprocs=0\nlog_file=gate.log\nlog_stderr=true\nhttp_addr=127.0.0.1:24000\nlisten_addr=0.0.0.0:14000\nlog_level=debug\ncompress_connection=0\nencrypt_connection=0\nrsa_key=rsa.key\nrsa_certificate=rsa.crt\nheartbeat_check_interval = 0\nposition_sync_interval_ms=100 ; position sync: client -> server\n\n[gate1]\nlisten_addr=0.0.0.0:14001\nhttp_addr=127.0.0.1:24001\n[gate2]\nlisten_addr=0.0.0.0:14002\nhttp_addr=127.0.0.1:24002\n[gate3]\nlisten_addr=0.0.0.0:14003\nhttp_addr=127.0.0.1:24003\n"
        },
        {
          "name": "goworld.ini.sample",
          "type": "blob",
          "size": 1.560546875,
          "content": "[debug]\ndebug = 1 ; set to 0 in production\n\n[deployment]\ndesired_dispatchers=1\ndesired_games=1\ndesired_gates=1\n\n[storage]\ntype=mongodb\nurl=mongodb://127.0.0.1:27017/\ndb=goworld\n\n[kvdb]\ntype=mongodb\nurl=mongodb://127.0.0.1:27017/goworld\ndb=goworld\ncollection=__kv__\n;type=redis\n;url=redis://127.0.0.1:6379\n;db=1\n;type=redis_cluster\n;start_nodes_1=127.0.0.1:6379\n;start_nodes_2=127.0.0.2:6379\n\n[dispatcher_common]\nlisten_addr=127.0.0.1:13000\nadvertise_addr=127.0.0.1:13000\nhttp_addr=127.0.0.1:23000\nlog_file=dispatcher.log\nlog_stderr=true\nlog_level=debug\n\n[dispatcher1]\nlisten_addr=127.0.0.1:13001\nadvertise_addr=127.0.0.1:13001\nhttp_addr=127.0.0.1:23001\n[dispatcher2]\nlisten_addr=127.0.0.1:13002\nadvertise_addr=127.0.0.1:13002\nhttp_addr=127.0.0.1:23002\n\n[game_common]\nboot_entity=Account\nsave_interval=600\nlog_file=game.log\nlog_stderr=true\nhttp_addr=127.0.0.1:25000\nlog_level=debug\nposition_sync_interval_ms=100 ; position sync: server -> client\n; gomaxprocs=0\n\n[game1]\nhttp_addr=25001\n; ban_boot_entity=false\n[game2]\nhttp_addr=25002\n;ban_boot_entity=false\n;[game3]\n;http_addr=25003\n;;ban_boot_entity=false\n\n[gate_common]\n; gomaxprocs=0\nlog_file=gate.log\nlog_stderr=true\nhttp_addr=127.0.0.1:24000\nlisten_addr=0.0.0.0:14000\nlog_level=debug\ncompress_connection=0\nencrypt_connection=0\nrsa_key=rsa.key\nrsa_certificate=rsa.crt\nheartbeat_check_interval = 0\nposition_sync_interval_ms=100 ; position sync: client -> server\n\n[gate1]\nlisten_addr=0.0.0.0:14001\nhttp_addr=127.0.0.1:24001\n[gate2]\nlisten_addr=0.0.0.0:14002\nhttp_addr=127.0.0.1:24002\n;[gate3]\n;listen_addr=0.0.0.0:14003\n;http_addr=127.0.0.1:24003\n"
        },
        {
          "name": "goworld_actions.ini",
          "type": "blob",
          "size": 1.560546875,
          "content": "[debug]\ndebug = 1 ; set to 0 in production\n\n[deployment]\ndesired_dispatchers=3\ndesired_games=3\ndesired_gates=3\n\n[storage]\ntype=mongodb\nurl=mongodb://127.0.0.1:27017/\ndb=goworld\n\n[kvdb]\ntype=mongodb\nurl=mongodb://127.0.0.1:27017/goworld\ndb=goworld\ncollection=__kv__\n;type=redis\n;url=redis://127.0.0.1:6379\n;db=1\n;type=redis_cluster\n;start_nodes_1=127.0.0.1:6379\n;start_nodes_2=127.0.0.2:6379\n\n[dispatcher_common]\nlisten_addr=127.0.0.1:13000\nadvertise_addr=127.0.0.1:13000\nhttp_addr=127.0.0.1:23000\nlog_file=dispatcher.log\nlog_stderr=true\nlog_level=debug\n\n[dispatcher1]\nlisten_addr=127.0.0.1:13001\nadvertise_addr=127.0.0.1:13001\nhttp_addr=127.0.0.1:23001\n[dispatcher2]\nlisten_addr=127.0.0.1:13002\nadvertise_addr=127.0.0.1:13002\nhttp_addr=127.0.0.1:23002\n\n[game_common]\nboot_entity=Account\nsave_interval=600\nlog_file=game.log\nlog_stderr=true\nhttp_addr=127.0.0.1:25000\nlog_level=debug\nposition_sync_interval_ms=100 ; position sync: server -> client\n; gomaxprocs=0\n\n[game1]\nhttp_addr=25001\n; ban_boot_entity=false\n[game2]\nhttp_addr=25002\n;ban_boot_entity=false\n;[game3]\n;http_addr=25003\n;;ban_boot_entity=false\n\n[gate_common]\n; gomaxprocs=0\nlog_file=gate.log\nlog_stderr=true\nhttp_addr=127.0.0.1:24000\nlisten_addr=0.0.0.0:14000\nlog_level=debug\ncompress_connection=1\nencrypt_connection=1\nrsa_key=rsa.key\nrsa_certificate=rsa.crt\nheartbeat_check_interval = 0\nposition_sync_interval_ms=100 ; position sync: client -> server\n\n[gate1]\nlisten_addr=0.0.0.0:14001\nhttp_addr=127.0.0.1:24001\n[gate2]\nlisten_addr=0.0.0.0:14002\nhttp_addr=127.0.0.1:24002\n;[gate3]\n;listen_addr=0.0.0.0:14003\n;http_addr=127.0.0.1:24003\n"
        },
        {
          "name": "rsa.crt",
          "type": "blob",
          "size": 1.2470703125,
          "content": "-----BEGIN CERTIFICATE-----\nMIIDgTCCAmmgAwIBAgIJAK1h/OZmPYQhMA0GCSqGSIb3DQEBCwUAMFcxCzAJBgNV\nBAYTAkNOMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX\naWRnaXRzIFB0eSBMdGQxEDAOBgNVBAMMB2dvd29ybGQwHhcNMTcxMDExMDgwOTIy\nWhcNMjcxMDA5MDgwOTIyWjBXMQswCQYDVQQGEwJDTjETMBEGA1UECAwKU29tZS1T\ndGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMRAwDgYDVQQD\nDAdnb3dvcmxkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuGRhGJC3\nrdh3o8mgKAGmD/+G62UZC9gAb4TXUrQdGU9Ej1YlWH899MahgWqLWeJtF17FLflK\n5iICxLet89ySjsb/9Rq1lPDFurZpCm1mFcChy/nOY/knL0/lUkcXi4cXz36mRBwP\nkkjzzPVR3dwTVfJQjPGj467en3Za8muFk/FxK9g2K4YP/CrvvRtdLQi1ZGdpF/34\n5fIdOvKGyIO5iWmYfvMMRbSM+mFDgbMFlBi460MRSc/ZYGG6nXGmGB1VjRF1vFIW\nhqMLEuOUdU+sxxIXyJ4E/0Ma6pZ+EL3JoJKeLFy7gBItBuDRyf6UyJZHIe3zNlwl\nbNeKVeHripcvKwIDAQABo1AwTjAdBgNVHQ4EFgQUTB13Axas8lIJCwnmXmEZi4t+\nOkEwHwYDVR0jBBgwFoAUTB13Axas8lIJCwnmXmEZi4t+OkEwDAYDVR0TBAUwAwEB\n/zANBgkqhkiG9w0BAQsFAAOCAQEAYFTwN/++EtFM4J+QgxNGn1cqVHHn48KMdDVD\nvE/9dbCvNpH7Wbip5zSAuaZipf+xDNoB/Tb10cVYGO1kNOudX31Q9xhJhwYQcH6K\nUTncaF0cStyGEYlea2P9eFKSxFfxujGHvsUlexN1JKdX17/UvWqQz1uN/IPOmfdP\nUXa16xaokXSq+fLjPYEImV3/+uszS7VQqXpQNVO56vOpGe+0gTEj/4r6xmu60d23\nrGHce7RnHYyQa79dp6t1qSWH4r5i46gYbLu3PDAz3EUQUcJ7KojgTteeKmqhdQ4s\nrkbn6eo0E8ievXIT9Qj/r9l7rBH/jQ3zPj/7GyMBsX71RKerMw==\n-----END CERTIFICATE-----\n"
        },
        {
          "name": "rsa.key",
          "type": "blob",
          "size": 1.6396484375,
          "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAuGRhGJC3rdh3o8mgKAGmD/+G62UZC9gAb4TXUrQdGU9Ej1Yl\nWH899MahgWqLWeJtF17FLflK5iICxLet89ySjsb/9Rq1lPDFurZpCm1mFcChy/nO\nY/knL0/lUkcXi4cXz36mRBwPkkjzzPVR3dwTVfJQjPGj467en3Za8muFk/FxK9g2\nK4YP/CrvvRtdLQi1ZGdpF/345fIdOvKGyIO5iWmYfvMMRbSM+mFDgbMFlBi460MR\nSc/ZYGG6nXGmGB1VjRF1vFIWhqMLEuOUdU+sxxIXyJ4E/0Ma6pZ+EL3JoJKeLFy7\ngBItBuDRyf6UyJZHIe3zNlwlbNeKVeHripcvKwIDAQABAoIBAEeYAfMtzYOcdueL\nU7n02euARXyEZnMozRJ/u7MK5/l5w577zchMr1uo+/Bp0+10cvMOAvVUw/YS4oxK\n3SnATM9PCPa8BiDsU3mpdaNs0qRDhQ7T0YUTqlk+ZkXKAKRWMbKI9Dmhw5IC7VZ5\nMe44kvFeAlSXRhETRrEXnTxe7yB/h7+UjyFzBfSU0JdcOkf2e45jayCzWKadVjV+\nZohDUK9/t6e7l1SEPVZQJhwstkXZFFTc3+68nb1oeSl5uU+GB/1sumkG4ggpl0qL\nWpTuvDfnf+eBdvZutlrhzicdmG8DR5ANsrMOJN49XZ6GDZblBAG4Y/+HPPtyUG+2\nxAOCTSECgYEA2ewnc/8BwbWkiARxA2OtRlSTvMJKdKJuRhYO6bxaBGRYZ4PLMuXE\nyoHZyEoYVxqnp2M72nUVvEYDt3h/ISQdKomlWEwKuKiHh7D0Y54HtAKBOYMFc+Yi\n0gtKDiOFztMXKMH0oC3YG6lzeDN0ATnyJt60unoNBziDiJEBjr11SRkCgYEA2Jxi\nj5wQ+lrHdv3QLpCMO3FNsSmhorUO4310r5ep46LmbCmfavMLurf53XwwRuffWaAp\nSo2xt+n+ffGMnlVVLy8T5/Bv0cY/aiY/tDAuyetsJjbvH294ASUTpS2CB5fxbCqr\nr4uagj14+zizOEIs0b4t4E3uxfd9PHEUjylYDuMCgYEAmd9wwCvoTqH2agBQ2CbS\nm51ur9K0hgSHPr+mig3vtbgw3+6kVOz+dksXvp/q7d4pUTz1bzxLO6RoTW0svvbk\nDTwh3uXakCaXhA1Dku9r2wQFwNktyXdPUOadxLv6aF6OtL23AD8+n9GXceFK4O7M\nd/u6uw0hE98oqQ5SfjpyjUkCgYAH4E/ZJvSbFdfw5LPALbNbqfgIPBpLf0fmT7aB\neANOaqr0PeM1EVdY1723Jv/eZCoD6UX3FwXiSRje3XyeeT3atFyF74ExYIMHyhJA\n7AuXff71uMOjIft8FywKsofq3MSDiV2qyWm52KBgiiRCJG3axo6GfG71NdWQ8A+u\nUPOJvwKBgQDGYL1pw8mof2KvZBqcoXsI3bKSOE9n2XVCrTAPXgrB3sonInsJVUY4\nn2tqxbkDtJVcVHnxtyeuqlQfS0eBPwdHTFISwmiMDDKlGtS4E0bOKUyQQwxDh4WB\nMvQTYHuW/lJZYUhb5DW2yP3rxxWunteSOCFC2YOBGM2kHQbpqgbbGg==\n-----END RSA PRIVATE KEY-----\n"
        }
      ]
    }
  ]
}