{
  "metadata": {
    "timestamp": 1736567087859,
    "page": 678,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mehrdadrad/mylg",
      "stars": 2700,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2412109375,
          "content": "language: go\ngo:\n  - 1.7\n  - tip\n\nbefore_install:\n  - sudo apt-get install libpcap-dev -y\n  - go get golang.org/x/tools/cmd/cover\n  - go get github.com/mattn/goveralls\n\nscript:\n  - test -z \"$(gofmt -s -l . | tee /dev/stderr)\"\n  - go test -v ./...\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2099609375,
          "content": "FROM golang\nRUN apt-get update && apt-get install -y libpcap-dev --no-install-recommends && rm -rf /var/lib/apt/lists/*\nADD . /go/src/github.com/mehrdadrad/mylg\nRUN go get -x github.com/mehrdadrad/mylg\nCMD [\"mylg\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2016 Mehrdad Arshad Rad\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.6181640625,
          "content": "[![Build Status](https://travis-ci.org/mehrdadrad/mylg.svg?branch=master)](https://travis-ci.org/mehrdadrad/mylg) [![Go Report Card](https://goreportcard.com/badge/github.com/mehrdadrad/mylg)](https://goreportcard.com/report/github.com/mehrdadrad/mylg) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mehrdadrad/mylg?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) [![GORef](https://godoc.org/github.com/mehrdadrad/mylg?status.svg)](https://godoc.org/github.com/mehrdadrad/mylg)\n\n![IMAGE](http://mylg.io/wp-content/uploads/2016/08/logo_mylgio_xxsmall.png)\n### myLG, Command line Network Diagnostic Tool\nmyLG is an open source software utility which combines the functions of the different network probes in one network diagnostic tool.\n\n\n## Features\n* Popular looking glasses (ping/trace/bgp): Telia, Level3, NTT, Cogent, KPN\n* More than 200 countries DNS Lookup information\n* Local ping and real-time trace route\n* Packet analyzer - TCP/IP and other packets\n* Quick NMS (network management system)\n* Local HTTP/HTTPS ping (GET, POST, HEAD)\n* RIPE information (ASN, IP/CIDR)\n* PeeringDB information\n* Port scanning\n* Network LAN Discovery\n* Internet Speed Test\n* Web dashboard\n* Configurable options\n* Direct access to commands from shell\n* Support vi and emacs mode, almost all basic features\n* CLI auto complete and history features\n\n## Demo\n[![IMAGE Demo](http://mylg.io/img/youtube.jpg)](https://www.youtube.com/watch?v=QY2TAA3ljAA)\n\n![IMAGE ALT TEXT HERE](http://mylg.io/img/packet_analyzer.png)\n![IMAGE ALT TEXT HERE](http://mylg.io/img/mylg_traceroute_realtime_01.png)\n![IMAGE ALT TEXT HERE](http://mylg.io/img/mylg_rt_trace2.gif)\n![IMAGE ALT TEXT HERE](http://mylg.io/img/mylg_rt_trace_web_026.png)\n\n### Usage\n\n```\n=================================================\n                          _    ___\n                _ __ _  _| |  / __|\n               | '  \\ || | |_| (_ |\n               |_|_|_\\_, |____\\___|\n                      |__/\n\n                 My Looking Glass\n           Free Network Diagnostic Tool\n             www.facebook.com/mylg.io\n                  http://mylg.io\n================== myLG v0.2.6 ==================\n\nlocal> hping https://www.google.com -trace -c 4\nHPING www.google.com (216.58.194.196), Method: HEAD, DNSLookup: 17.2923 ms\nHTTP Response seq=0, proto=HTTP/1.1, status=200, time=183.097 ms, connection=34.789 ms, first byte read=148.167 ms\nHTTP Response seq=1, proto=HTTP/1.1, status=200, time=164.960 ms, connection=27.764 ms, first byte read=137.096 ms\nHTTP Response seq=2, proto=HTTP/1.1, status=200, time=153.559 ms, connection=27.881 ms, first byte read=125.526 ms\nHTTP Response seq=3, proto=HTTP/1.1, status=200, time=164.309 ms, connection=28.904 ms, first byte read=135.296 ms\n\n--- www.google.com HTTP ping statistics --- \n4 requests transmitted, 4 replies received, 0% requests failed\nHTTP Round-trip min/avg/max = 153.56/164.05/183.10 ms\nHTTP Code [200] responses : [████████████████████] 100.00% \n \nlocal> whois 577\nBACOM - Bell Canada, CA\n+--------------------+-----------+\n|      LOCATION      | COVERED % |\n+--------------------+-----------+\n| Canada - ON        |   61.3703 |\n| Canada             |   36.2616 |\n| Canada - QC        |    1.3461 |\n| United States - MA |    0.7160 |\n| Canada - BC        |    0.1766 |\n| Canada - AB        |    0.0811 |\n| United States      |    0.0195 |\n| United States - NJ |    0.0143 |\n| Belgium            |    0.0048 |\n| United States - NC |    0.0048 |\n| United States - TX |    0.0048 |\n| Canada - NB        |    0.0000 |\n| Canada - NS        |    0.0000 |\n+--------------------+-----------+\n\nlocal> scan www.google.com -p 1-500\n+----------+------+--------+-------------+\n| PROTOCOL | PORT | STATUS | DESCRIPTION |\n+----------+------+--------+-------------+\n| TCP      |   80 | Open   |             |\n| TCP      |  443 | Open   |             |\n+----------+------+--------+-------------+\nScan done: 2 opened port(s) found in 5.605 seconds\n\nlg/telia/los angeles> bgp 8.8.8.0/24\nTelia Carrier Looking Glass - show route protocol bgp 8.8.8.0/24 table inet.0\n\nRouter: Los Angeles\n\nCommand: show route protocol bgp 8.8.8.0/24 table inet.0\n\ninet.0: 661498 destinations, 5564401 routes (657234 active, 509 holddown, 194799 hidden)\n+ = Active Route, - = Last Active, * = Both\n\n8.8.8.0/24         *[BGP/170] 33w0d 01:36:06, MED 0, localpref 200\n                      AS path: 15169 I, validation-state: unverified\n                    > to 62.115.36.170 via ae4.0\n                    [BGP/170] 8w3d 11:19:40, MED 0, localpref 200, from 80.91.255.95\n                      AS path: 15169 I, validation-state: unverified\n                      to 62.115.119.84 via xe-1/1/0.0\n                      to 62.115.119.88 via xe-1/2/0.0\n                      to 62.115.119.90 via xe-11/0/3.0\n                      to 62.115.119.102 via xe-9/0/0.0\n                      to 62.115.119.92 via xe-9/0/2.0\n                    > to 62.115.119.86 via xe-9/1/2.0\n                      to 62.115.119.98 via xe-9/2/2.0\n                      to 62.115.119.100 via xe-9/2/3.0\n                      to 62.115.119.94 via xe-9/3/1.0\n                      to 62.115.119.96 via xe-9/3/3.0\n\nns/united states/redwood city> dig yahoo.com\nTrying to query server: 204.152.184.76 united states redwood city\n;; opcode: QUERY, status: NOERROR, id: 19850\n;; flags: qr rd ra;\nyahoo.com.\t728\tIN\tMX\t1 mta6.am0.yahoodns.net.\nyahoo.com.\t728\tIN\tMX\t1 mta5.am0.yahoodns.net.\nyahoo.com.\t728\tIN\tMX\t1 mta7.am0.yahoodns.net.\nyahoo.com.\t143013\tIN\tNS\tns4.yahoo.com.\nyahoo.com.\t143013\tIN\tNS\tns6.yahoo.com.\nyahoo.com.\t143013\tIN\tNS\tns2.yahoo.com.\nyahoo.com.\t143013\tIN\tNS\tns5.yahoo.com.\nyahoo.com.\t143013\tIN\tNS\tns1.yahoo.com.\nyahoo.com.\t143013\tIN\tNS\tns3.yahoo.com.\n\n;; ADDITIONAL SECTION:\nns1.yahoo.com.\t561456\tIN\tA\t68.180.131.16\nns2.yahoo.com.\t27934\tIN\tA\t68.142.255.16\nns3.yahoo.com.\t532599\tIN\tA\t203.84.221.53\nns4.yahoo.com.\t532599\tIN\tA\t98.138.11.157\nns5.yahoo.com.\t532599\tIN\tA\t119.160.247.124\nns6.yahoo.com.\t143291\tIN\tA\t121.101.144.139\nns1.yahoo.com.\t51624\tIN\tAAAA\t2001:4998:130::1001\nns2.yahoo.com.\t51624\tIN\tAAAA\t2001:4998:140::1002\nns3.yahoo.com.\t51624\tIN\tAAAA\t2406:8600:b8:fe03::1003\nns6.yahoo.com.\t143291\tIN\tAAAA\t2406:2000:108:4::1006\n;; Query time: 1204 ms\n\n;; CHAOS CLASS BIND\nversion.bind.\t0\tCH\tTXT\t\"9.10.4-P1\"\nhostname.bind.\t0\tCH\tTXT\t\"fred.isc.org\"\n\nlocal> peering 6327\nThe data provided from www.peeringdb.com\n+-------------------+---------------+---------------+--------------------+------+\n|       NAME        |    TRAFFIC    |     TYPE      |      WEB SITE      | NOTE |\n+-------------------+---------------+---------------+--------------------+------+\n| Shaw Cablesystems | 500-1000 Gbps | Cable/DSL/ISP | http://www.shaw.ca |      |\n+-------------------+---------------+---------------+--------------------+------+\n+------------------+--------+--------+-----------------+-------------------------+\n|       NAME       | STATUS | SPEED  |    IPV4 ADDR    |        IPV6 ADDR        |\n+------------------+--------+--------+-----------------+-------------------------+\n| Equinix Ashburn  | ok     |  20000 | 206.126.236.20  | 2001:504:0:2::6327:1    |\n| Equinix Ashburn  | ok     |  20000 | 206.223.115.20  |                         |\n| Equinix Chicago  | ok     |  30000 | 206.223.119.20  | 2001:504:0:4::6327:1    |\n| Equinix San Jose | ok     |  30000 | 206.223.116.20  | 2001:504:0:1::6327:1    |\n| Equinix Seattle  | ok     |  20000 | 198.32.134.4    | 2001:504:12::4          |\n| Equinix New York | ok     |  10000 | 198.32.118.16   | 2001:504:f::10          |\n| SIX Seattle      | ok     | 100000 | 206.81.80.54    | 2001:504:16::18b7       |\n| NYIIX            | ok     |  20000 | 198.32.160.86   | 2001:504:1::a500:6327:1 |\n| TorIX            | ok     |  10000 | 206.108.34.12   |                         |\n| PIX Vancouver    | ok     |  10000 | 206.223.127.2   |                         |\n| PIX Toronto      | ok     |   1000 | 206.223.127.132 |                         |\n| Equinix Toronto  | ok     |  10000 | 198.32.181.50   | 2001:504:d:80::6327:1   |\n+------------------+--------+--------+-----------------+-------------------------+\n\nlocal> disc\nNetwork LAN Discovery\n+--------------+-------------------+------+-----------+-------------------+\n|      IP      |        MAC        | HOST | INTERFACE | ORGANIZATION NAME |\n+--------------+-------------------+------+-----------+-------------------+\n| 172.16.0.0   | ff:ff:ff:ff:ff:ff | NA   | en0       | NA                |\n| 172.16.1.1   | e4:8d:8c:7a:66:26 | NA   | en0       | Routerboard.com   |\n| 172.16.1.10  | ac:bc:32:b4:33:23 | NA   | en0       | Apple, Inc.       |\n| 172.16.1.205 | 74:e5:b:97:11:28  | NA   | en0       | NA                |\n| 172.16.1.254 | 54:4a:0:33:b4:2f  | NA   | en0       | NA                |\n| 172.16.2.12  | d4:f4:6f:7b:8f:cf | NA   | en0       | Apple, Inc.       |\n| 172.16.2.13  | 5c:ad:cf:23:7:f9  | NA   | en0       | Apple, Inc.       |\n| 172.16.2.111 | d0:a6:37:72:cf:2d | NA   | en0       | Apple, Inc.       |\n| 192.168.33.0 | ff:ff:ff:ff:ff:ff | NA   | vboxnet0  | NA                |\n| 192.168.33.1 | a:0:27:0:0:0      | NA   | vboxnet0  | NA                |\n| 224.0.0.251  | 1:0:5e:0:0:fb     | NA   | en0       | NA                |\n+--------------+-------------------+------+-----------+-------------------+\n11 host(s) has been found\n\nlocal> whois 8.8.8.8\n+------------+-------+--------------------------+\n|   PREFIX   |  ASN  |          HOLDER          |\n+------------+-------+--------------------------+\n| 8.8.8.0/24 | 15169 | GOOGLE - Google Inc., US |\n+------------+-------+--------------------------+\n\nlocal> dump -d\n+----------+-------------------+--------+-------+--------------------------------+-----------+-----------+--------------+----------+\n|   NAME   |        MAC        | STATUS |  MTU  |          IP ADDRESSES          | MULTICAST | BROADCAST | POINTTOPOINT | LOOPBACK |\n+----------+-------------------+--------+-------+--------------------------------+-----------+-----------+--------------+----------+\n| lo0      |                   | UP     | 16384 | 127.0.0.1/8 ::1/128 fe80::1/64 | ✓         |           |              | ✓        |\n| gif0     |                   | DOWN   |  1280 |                                | ✓         |           | ✓            |          |\n| stf0     |                   | DOWN   |  1280 |                                |           |           |              |          |\n| en0      | ac:bc:32:b4:33:23 | UP     |  1500 | fe80::181b:3d55:e9a2:e3df/64   | ✓         | ✓         |              |          |\n|          |                   |        |       | 192.168.0.103/24               |           |           |              |          |\n| p2p0     | 0e:bc:32:b4:33:23 | UP     |  2304 |                                | ✓         | ✓         |              |          |\n| awdl0    | ee:3a:98:da:44:5c | UP     |  1484 | fe80::ec3a:98ff:feda:445c/64   | ✓         | ✓         |              |          |\n| en1      | 4a:00:03:9c:8d:60 | UP     |  1500 |                                |           | ✓         |              |          |\n| en2      | 4a:00:03:9c:8d:61 | UP     |  1500 |                                |           | ✓         |              |          |\n| bridge0  | 4a:00:03:9c:8d:60 | UP     |  1500 |                                | ✓         | ✓         |              |          |\n| utun0    |                   | UP     |  2000 | fe80::ec23:f621:ae74:5271/64   | ✓         |           | ✓            |          |\n| utun1    |                   | UP     |  1380 | fe80::d187:7734:49d9:9d84/64   | ✓         |           | ✓            |          |\n| vboxnet0 | 0a:00:27:00:00:00 | DOWN   |  1500 |                                | ✓         | ✓         |              |          |\n+----------+-------------------+--------+-------+--------------------------------+-----------+-----------+--------------+----------+\n\nlocal> dump \n20:29:36.415 IPv4/TCP  ec2-52-73-80-145.compute-1.amazonaws.com.:443(https) > 192.168.0.104:61479 [P.], win 166, len: 33\n20:29:36.416 IPv4/TCP  192.168.0.104:61479 > ec2-52-73-80-145.compute-1.amazonaws.com.:443(https) [.], win 4094, len: 0\n20:29:36.417 IPv4/TCP  192.168.0.104:61479 > ec2-52-73-80-145.compute-1.amazonaws.com.:443(https) [P.], win 4096, len: 37\n20:29:36.977 IPv4/UDP  192.168.0.104:62733 > 192.168.0.1:53(domain) , len: 0\n20:29:37.537 IPv4/TCP  ec2-54-86-120-119.compute-1.amazonaws.com.:443(https) > 192.168.0.104:61302 [.], win 124, len: 0\n20:29:38.125 IPv4/TCP  192.168.0.104:61304 > ec2-52-23-213-161.compute-1.amazonaws.com.:443(https) [P.], win 4096, len: 85\n20:29:38.126 IPv4/TCP  ec2-52-23-213-161.compute-1.amazonaws.com.:443(https) > 192.168.0.104:61304 [.], win 1048, len: 0\n20:29:38.760 IPv4/TCP  ec2-54-165-12-100.compute-1.amazonaws.com.:443(https) > 192.168.0.104:61296 [.], win 2085, len: 0\n20:29:39.263 IPv4/ICMP 192.168.0.104 > ir1.fp.vip.ne1.yahoo.com.: EchoRequest id 20859, seq 27196, len: 56\n20:29:39.265 IPv4/UDP  192.168.0.1:53(domain) > 192.168.0.104:62733 , len: 0\n\nlocal> dump tcp and port 443 -c 10\n23:26:56.026 IPv4/TCP  192.168.0.104:64686 > 192.0.80.242:443(https) [F.], win 8192, len: 0\n23:26:56.045 IPv4/TCP  192.168.0.104:64695 > i2.wp.com.:443(https) [F.], win 8192, len: 0\n23:26:56.048 IPv4/TCP  i2.wp.com.:443(https) > 192.168.0.104:64695 [F.], win 62, len: 0\n23:26:56.081 IPv4/TCP  192.168.0.104:63692 > ec2-54-88-144-213.compute-1.amazonaws.com.:443(https) [P.], win 4096, len: 37\n23:26:56.082 IPv4/TCP  192.168.0.104:64695 > i2.wp.com.:443(https) [.], win 8192, len: 0\n23:26:56.083 IPv4/TCP  192.0.80.242:443(https) > 192.168.0.104:64686 [.], win 64, len: 0\n23:26:56.150 IPv4/TCP  ec2-54-88-144-213.compute-1.amazonaws.com.:443(https) > 192.168.0.104:63692 [.], win 166, len: 0\n23:26:56.259 IPv4/TCP  ec2-54-172-56-148.compute-1.amazonaws.com.:443(https) > 192.168.0.104:63623 [P.], win 1316, len: 85\n23:26:56.260 IPv4/TCP  192.168.0.104:63623 > ec2-54-172-56-148.compute-1.amazonaws.com.:443(https) [.], win 4093, len: 0\n23:26:56.820 IPv4/TCP  192.168.0.104:64691 > 192.30.253.116:443(https) [.], win 4096, len: 0\n\nlocal> dump -s http -x\n22:10:15.770 IPv4/TCP  151.101.44.143:443(https) > 10.0.9.9:50771 [P.], win 59, len: 156\n00000000  16 03 03 00 64 02 00 00  60 03 03 a2 32 19 4b 78  |....d...`...2.Kx|\n00000010  77 ed 40 75 f6 4c 55 74  43 1d b7 6c f2 59 f8 d8  |w.@u.LUtC..l.Y..|\n00000020  09 8a 3e 03 62 56 38 45  d2 bc 02 20 bd 52 8a 42  |..>.bV8E... .R.B|\n00000030  5b 01 33 7d 2b 0b 41 da  eb 38 87 79 f1 37 62 5c  |[.3}+.A..8.y.7b\\|\n00000040  f3 ed 5a 7c 07 6c e9 28  9b fe fa 76 c0 2f 00 00  |..Z|.l.(...v./..|\n00000050  18 ff 01 00 01 00 00 05  00 00 00 10 00 0b 00 09  |................|\n00000060  08 68 74 74 70 2f 31 2e  31 14 03 03 00 01 01 16  |.http/1.1.......|\n00000070  03 03 00 28 fc 20 2d 6f  1a 94 78 53 55 0f 8c 05  |...(. -o..xSU...|\n00000080  3e ae 12 34 79 af d2 a9  bd 22 e5 3f b1 2b f5 36  |>..4y....\".?.+.6|\n00000090  ba 51 31 37 f5 0b e6 d2  40 fb 88 a5              |.Q17....@...    |\n\nlocal> dump !udp -w /home/user1/mypcap -c 100000\n\nlocal> ping google.com -6\nPING google.com (2607:f8b0:400b:80a::200e): 56 data bytes\n64 bytes from 2607:f8b0:400b:80a::200e icmp_seq=0 time=23.193988 ms\n64 bytes from 2607:f8b0:400b:80a::200e icmp_seq=1 time=21.265492 ms\n64 bytes from 2607:f8b0:400b:80a::200e icmp_seq=2 time=24.521306 ms\n64 bytes from 2607:f8b0:400b:80a::200e icmp_seq=3 time=25.313072 ms\n\nlocal> trace google.com\ntrace route to google.com (172.217.4.142), 30 hops max\n1  192.168.0.1 4.705 ms 1.236 ms 0.941 ms \n2  142.254.236.25 [ASN 20001/ROADRUNNER-WEST] 13.941 ms 13.504 ms 12.303 ms \n3  agg59.snmncaby01h.socal.rr.com. (76.167.31.241) [ASN 20001/ROADRUNNER-WEST] 14.834 ms 11.625 ms 13.050 ms \n4  agg20.lamrcadq01r.socal.rr.com. (72.129.10.128) [ASN 20001/ROADRUNNER-WEST] 17.617 ms 18.064 ms 15.612 ms \n5  agg28.lsancarc01r.socal.rr.com. (72.129.9.0) [ASN 20001/ROADRUNNER-WEST] 16.291 ms 24.079 ms 20.456 ms \n6  bu-ether26.lsancarc0yw-bcr00.tbone.rr.com. (66.109.3.230) [ASN 7843/TWCABLE-BACKBONE] 18.339 ms 23.278 ms 23.434 ms \n7  216.0.6.25 [ASN 2828/XO-AS15] 19.842 ms 21.025 ms 35.105 ms \n8  216.0.6.42 [ASN 2828/XO-AS15] 16.666 ms 18.252 ms 18.872 ms \n9  209.85.245.199 [ASN 15169/GOOGLE] 14.358 ms 17.478 ms \n   209.85.246.125 [ASN 15169/GOOGLE] 18.593 ms \n10 72.14.239.121 [ASN 15169/GOOGLE] 21.635 ms \n   72.14.238.213 [ASN 15169/GOOGLE] 16.133 ms \n   72.14.239.121 [ASN 15169/GOOGLE] 21.541 ms \n11 lax17s14-in-f14.1e100.net. (172.217.4.142) [ASN 15169/GOOGLE] 18.127 ms 17.151 ms 18.892 ms \n\nlocal> show config \nset ping     timeout    2s\nset ping     interval   1s\nset ping     count      4\nset hping    timeout    2s\nset hping    method     HEAD\nset hping    data       mylg\nset hping    count      5\nset web      port       8080\nset web      address    127.0.0.1\nset scan     port       1-1024\n\nlocal> set hping count 10\n\nsh-3.2# mylg peering 577\nThe data provided from www.peeringdb.com\n+----------------------+---------+------+--------------------+------+\n|         NAME         | TRAFFIC | TYPE |      WEB SITE      | NOTE |\n+----------------------+---------+------+--------------------+------+\n| Bell Canada Backbone |         | NSP  | http://www.bell.ca |      |\n+----------------------+---------+------+--------------------+------+\n+-------------------+--------+-------+-----------------+------------------------+\n|       NAME        | STATUS | SPEED |    IPV4 ADDR    |       IPV6 ADDR        |\n+-------------------+--------+-------+-----------------+------------------------+\n| Equinix Ashburn   | ok     | 20000 | 206.126.236.203 | 2001:504:0:2::577:1    |\n| Equinix Chicago   | ok     | 20000 | 206.223.119.66  | 2001:504:0:4::577:1    |\n| Equinix Palo Alto | ok     | 10000 | 198.32.176.94   | 2001:504:d::5e         |\n| Equinix New York  | ok     | 10000 | 198.32.118.113  | 2001:504:f::577:1      |\n| SIX Seattle       | ok     | 10000 | 206.81.80.217   | 2001:504:16::241       |\n| NYIIX             | ok     | 10000 | 198.32.160.36   | 2001:504:1::a500:577:1 |\n+-------------------+--------+-------+-----------------+------------------------+\n\nlocal> nms\nnms> connect core1-sjc\nConnected: Juniper Networks, Inc. qfx10008 Ethernet Switch, kernel JUNOS 15.1X53 ...\nnms/core1-sjc> show interface xe-.*\n15 interfaces has been found\n+--------------+---------+---------------------------------+------------+-------------+------------+-------------+------------+-------------+----------+-----------+\n|  INTERFACE   | STATUS  |           DESCRIPTION           | TRAFFIC IN | TRAFFIC OUT | PACKETS IN | PACKETS OUT | DISCARD IN | DISCARD OUT | ERROR IN | ERROR OUT |\n+--------------+---------+---------------------------------+------------+-------------+------------+-------------+------------+-------------+----------+-----------+\n| xe-7/0/0:1   | Up      | RSW011-01-SJC-002               | 192.58 K   | 75.72 K     | 64.60      | 56.60       | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-7/0/0:2   | Down    |                                 | 0.00       | 0.00        | 0.00       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-7/0/0:3   | Down    |                                 | 0.00       | 0.00        | 0.00       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-7/0/0:0   | Up      | RSW012-01-SJC-001               | 61.40 K    | 10.04 K     | 8.60       | 5.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/0:0   | Down    | CORE1-SAN-XE-2/2/0-AGGIPER40GLR | 0.00       | 0.00        | 0.00       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/0:1   | Down    |                                 | 0.00       | 0.00        | 0.00       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/0:2   | Down    |                                 | 0.00       | 0.00        | 0.00       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/0:3   | Down    |                                 | 0.00       | 0.00        | 0.00       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/1:0   | Up      | CORE1-SAN-XE-10/3/1-10GTEK      | 11.79 M    | 1.39 M      | 1.82 K     | 1.02 K      | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/1:1   | Down    |                                 | 0.00       | 0.00        | 0.00       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/1:2   | Down    |                                 | 0.00       | 0.00        | 0.00       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/1:3   | Down    |                                 | 0.00       | 0.00        | 0.00       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/2:0   | Up      | CORE2-SJC-XE-1/2/0-AGG59        | 5.25 K     | 409.60      | 0.20       | 0.01        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/2:1   | Up      | CORE3-SJC-XE-1/3/0-AGG31        | 5.44 K     | 0.00        | 0.31       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n| xe-6/0/3:0   | Down    | CORE3-SJC-XE-1/0/0-40GTEK       | 0.00       | 0.00        | 0.00       | 0.00        | 0.00       | 0.00        | 0.00     | 0.00      |\n+--------------+---------+---------------------------------+------------+-------------+------------+-------------+------------+-------------+----------+-----------+\n* units per seconds\n```\n## Build\nIt can be built for Linux and Darwin. there is libpcap dependency:\n```\n- LINUX\napt-get install libpcap-dev\n- OSX\nbrew install homebrew/dupes/libpcap\n```\n\nGiven that the Go Language compiler (version 1.7 or greater is required) is installed, you can build it with:\n\n```\ngo get github.com/mehrdadrad/mylg\ncd $GOPATH/src/github.com/mehrdadrad/mylg/\ngo build mylg.go\n```\n\n## License\nThis project is licensed under MIT license. Please read the LICENSE file.\n\n\n## Contribute\nWelcomes any kind of contribution, please follow the next steps:\n\n- Fork the project on github.com.\n- Create a new branch.\n- Commit changes to the new branch.\n- Send a pull request.\n"
        },
        {
          "name": "banner",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "disc",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.787109375,
          "content": "module github.com/mehrdadrad/mylg\n\ngo 1.12\n\nrequire (\n\tgithub.com/briandowns/spinner v1.9.0\n\tgithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e\n\tgithub.com/fatih/color v1.7.0\n\tgithub.com/geoffgarside/ber v0.0.0-20190912223231-00c19d63973f // indirect\n\tgithub.com/gizak/termui v2.3.0+incompatible\n\tgithub.com/google/gopacket v1.1.17\n\tgithub.com/gorilla/mux v1.7.4\n\tgithub.com/k-sone/snmpgo v3.2.0+incompatible\n\tgithub.com/maruel/panicparse v1.3.0 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.8 // indirect\n\tgithub.com/miekg/dns v1.1.27\n\tgithub.com/mitchellh/go-wordwrap v1.0.0 // indirect\n\tgithub.com/nsf/termbox-go v0.0.0-20200204031403-4d2b513ad8be // indirect\n\tgithub.com/olekukonko/tablewriter v0.0.4\n\tgithub.com/rakyll/statik v0.1.6\n\tgolang.org/x/net v0.0.0-20200219183655-46282727080f\n)\n"
        },
        {
          "name": "http",
          "type": "tree",
          "content": null
        },
        {
          "name": "icmp",
          "type": "tree",
          "content": null
        },
        {
          "name": "lg",
          "type": "tree",
          "content": null
        },
        {
          "name": "mylg.go",
          "type": "blob",
          "size": 11.890625,
          "content": "// myLG is an open source software utility which combines the functions\n// of the different network probes in one network diagnostic tool.\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"regexp\"\n\t\"runtime\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/briandowns/spinner\"\n\n\t\"github.com/mehrdadrad/mylg/cli\"\n\t\"github.com/mehrdadrad/mylg/disc\"\n\t\"github.com/mehrdadrad/mylg/http/ping\"\n\t\"github.com/mehrdadrad/mylg/icmp\"\n\t\"github.com/mehrdadrad/mylg/lg\"\n\t\"github.com/mehrdadrad/mylg/nms\"\n\t\"github.com/mehrdadrad/mylg/ns\"\n\t\"github.com/mehrdadrad/mylg/packet\"\n\t\"github.com/mehrdadrad/mylg/peeringdb\"\n\t\"github.com/mehrdadrad/mylg/scan\"\n\t\"github.com/mehrdadrad/mylg/services/httpd\"\n\t\"github.com/mehrdadrad/mylg/speedtest\"\n\t\"github.com/mehrdadrad/mylg/whois\"\n)\n\nconst (\n\tversion = \"0.2.7\"\n)\n\n// Provider represents looking glass\ntype Provider interface {\n\tSet(host, version string)\n\tGetDefaultNode() string\n\tGetNodes() []string\n\tChangeNode(node string) bool\n\tPing() (string, error)\n\tTrace() chan string\n\tBGP() chan string\n}\n\nvar (\n\tpNames    = providerNames()\n\treq       = make(chan string, 1)\n\tnxt       = make(chan struct{}, 1)\n\tspin      = spinner.New(spinner.CharSets[26], 220*time.Millisecond)\n\teArgs     = os.Args\n\targs      string\n\tprompt    string\n\tcPName    string\n\tnoIf      bool = true\n\tcfg       cli.Config\n\tnmsClient nms.Client\n\tnsr       *ns.Request\n\tc         *cli.Readline\n\n\t// register looking glass hosts\n\tproviders = map[string]Provider{\n\t\t\"telia\":  new(lg.Telia),\n\t\t\"level3\": new(lg.Level3),\n\t\t\"cogent\": new(lg.Cogent),\n\t\t\"ntt\":    new(lg.NTT),\n\t\t\"kpn\":    new(lg.KPN),\n\t}\n\n\t// map cmd to function\n\tcmdFunc = map[string]func(){\n\t\t\"web\":       web,          // web dashboard\n\t\t\"dump\":      dump,         // dump traffic\n\t\t\"disc\":      discovery,    // network discovery\n\t\t\"scan\":      scanPorts,    // network scan\n\t\t\"mode\":      mode,         // editor mode\n\t\t\"ping\":      pingQuery,    // ping\n\t\t\"trace\":     trace,        // trace route\n\t\t\"bgp\":       BGP,          // BGP\n\t\t\"whois\":     whoisLookup,  // whois / dns lookup\n\t\t\"peering\":   peeringDB,    // peering DB\n\t\t\"hping\":     hping,        // hping\n\t\t\"dig\":       dig,          // dig\n\t\t\"nms\":       setNMS,       // network management system\n\t\t\"node\":      node,         // change node\n\t\t\"connect\":   connect,      // connect to a country or LG\n\t\t\"local\":     local,        // local\n\t\t\"help\":      help,         // help\n\t\t\"exit\":      cleanUp,      // clean up\n\t\t\"quit\":      cleanUp,      // clean up\n\t\t\"show\":      show,         // show config\n\t\t\"set\":       setConfig,    // set config\n\t\t\"lg\":        setLG,        // prepare looking glass\n\t\t\"ns\":        setNS,        // prepare name server\n\t\t\"speedtest\": speedTest,    // prepare name server\n\t\t\"version\":   printVersion, // prints version\n\t}\n)\n\n// init\nfunc init() {\n\t// load configuration\n\tcfg = cli.LoadConfig()\n\t// initialize name server\n\tnsr = ns.NewRequest()\n\tgo nsr.Init()\n\t// set current provider, prompt\n\tcPName = \"local\"\n\tprompt = \"local\"\n\t// with interface\n\tif len(eArgs) == 1 {\n\t\t// initialize cli\n\t\tc = cli.Init(version)\n\t\tgo c.Run(req, nxt)\n\t\t// start web server\n\t\tgo httpd.Run(cfg)\n\t\t// set interface enabled\n\t\tnoIf = false\n\t\t// set local as default\n\t\tlocal()\n\t}\n\n}\n\nfunc main() {\n\t// command line w/o interface\n\tif noIf {\n\t\tcmd := eArgs[1]\n\t\targs = strings.Join(eArgs[2:], \" \")\n\t\tif f, ok := cmdFunc[cmd]; ok {\n\t\t\tf()\n\t\t} else {\n\t\t\tprintln(\"Invalid command please try mylg help\")\n\t\t}\n\t\treturn\n\t}\n\t// command like w/ interface\nLOOP:\n\tfor {\n\t\tselect {\n\t\tcase request, ok := <-req:\n\t\t\tif !ok {\n\t\t\t\tbreak LOOP\n\t\t\t}\n\t\t\tif len(request) < 1 {\n\t\t\t\tc.Next()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tsubReq := cli.CMDRgx().FindStringSubmatch(request)\n\t\t\tif len(subReq) == 0 {\n\t\t\t\tprintln(\"syntax error\")\n\t\t\t\tc.Next()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tprompt = c.GetPrompt()\n\t\t\targs = strings.TrimSpace(subReq[2])\n\t\t\tcmd := strings.TrimSpace(subReq[1])\n\t\t\tif f, ok := cmdFunc[cmd]; ok {\n\t\t\t\tf()\n\t\t\t} else {\n\t\t\t\tprintln(\"Invalid command please try help\")\n\t\t\t}\n\t\t\tc.Next()\n\t\t}\n\t}\n}\n\n// providerName\nfunc providerNames() []string {\n\tpNames := []string{}\n\tfor p := range providers {\n\t\tpNames = append(pNames, p)\n\t}\n\treturn pNames\n}\n\n// validateProvider\nfunc validateProvider(p string) (string, error) {\n\tpNames := []string{}\n\tmatch, _ := regexp.MatchString(\"(\"+strings.Join(pNames, \"|\")+\")\", p)\n\tp = strings.ToLower(p)\n\tif match {\n\t\treturn p, nil\n\t}\n\treturn \"\", errors.New(\"provider not support\")\n\n}\n\n// node handles node cmd\nfunc node() {\n\tswitch {\n\tcase strings.HasPrefix(prompt, \"lg\"):\n\t\tif _, ok := providers[cPName]; ok {\n\t\t\tif providers[cPName].ChangeNode(args) {\n\t\t\t\tc.UpdatePromptN(args, 3)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tprintln(\"the specified node doesn't support\")\n\tcase strings.HasPrefix(prompt, \"ns\"):\n\t\tif !nsr.ChkNode(args) {\n\t\t\tprintln(\"error: argument is not valid\")\n\t\t} else {\n\t\t\tc.UpdatePromptN(args, 3)\n\t\t}\n\tdefault:\n\t\tif cPName == \"local\" {\n\t\t\tprintln(\"local doesn't support node\")\n\t\t}\n\n\t}\n}\n\n// dig gets dig info\nfunc dig() {\n\tif ok := nsr.SetOptions(args, prompt); ok {\n\t\tnsr.Dig()\n\t}\n}\n\n// web tries to open web interface at default web browser\nfunc web() {\n\tvar openCmd = \"open\"\n\tprintln(\"opening default web broswer ...\")\n\tif runtime.GOOS != \"darwin\" {\n\t\topenCmd = \"xdg-open\"\n\t}\n\tcmd := exec.Command(openCmd, fmt.Sprintf(\"http://%s:%d\", cfg.Web.Address, cfg.Web.Port))\n\terr := cmd.Start()\n\tif err != nil {\n\t\tprintln(\"error opening default browser\")\n\t}\n\n}\n\n// dump provides decoding packets\nfunc dump() {\n\tp, err := packet.NewPacket(args)\n\tif p == nil || err != nil {\n\t\treturn\n\t}\n\tprintln(p.Banner())\n\tfor l := range p.Open() {\n\t\tl.PrintPretty()\n\t}\n}\n\n// connect handles connect cmd\nfunc connect() {\n\tvar (\n\t\tpName string\n\t\terr   error\n\t)\n\tswitch {\n\tcase strings.HasPrefix(prompt, \"lg\"):\n\t\tif pName, err = validateProvider(args); err != nil {\n\t\t\tprintln(\"provider not available\")\n\t\t\tc.Next()\n\t\t\treturn\n\t\t}\n\t\tcPName = pName\n\t\tif _, ok := providers[cPName]; ok {\n\t\t\tc.UpdatePromptN(cPName+\"/\"+providers[cPName].GetDefaultNode(), 2)\n\t\t\tgo func() {\n\t\t\t\tc.UpdateCompleter(\"node\", providers[cPName].GetNodes())\n\t\t\t}()\n\t\t} else {\n\t\t\tprintln(\"it doesn't support\")\n\t\t}\n\tcase strings.HasPrefix(prompt, \"ns\"):\n\t\tif !nsr.ChkCountry(args) {\n\t\t\tprintln(\"error: argument is not valid\")\n\t\t} else {\n\t\t\tc.SetPrompt(\"ns/\" + args)\n\t\t\tc.UpdateCompleter(\"node\", nsr.NodeList())\n\t\t}\n\n\tcase strings.HasPrefix(prompt, \"nms\"):\n\t\tnmsClient, err = nms.NewClient(args, cfg)\n\t\tif err != nil {\n\t\t\tprintln(\"error:\", err.Error())\n\t\t} else if nmsClient.Host == \"\" {\n\t\t\treturn\n\t\t} else {\n\t\t\tc.SetPrompt(\"nms/\" + nmsClient.Host)\n\t\t}\n\t}\n}\n\n// mode set editor mode\nfunc mode() {\n\tif args == \"vim\" {\n\t\tc.SetVim()\n\t} else if args == \"emacs\" {\n\t\tc.SetEmacs()\n\t} else {\n\t\tprintln(\"the request mode doesn't support\")\n\t}\n}\n\n// trace tries to trace from local and lg\nfunc trace() {\n\tswitch {\n\tcase strings.HasPrefix(prompt, \"local\"):\n\t\ttrace, err := icmp.NewTrace(args, cfg)\n\t\tif err != nil {\n\t\t\tprintln(err.Error())\n\t\t}\n\t\tif trace == nil {\n\t\t\tbreak\n\t\t}\n\t\ttrace.Print()\n\tcase strings.HasPrefix(prompt, \"lg\"):\n\t\tspin.Prefix = \"please wait \"\n\t\tspin.Start()\n\t\tproviders[cPName].Set(args, \"ipv4\")\n\t\tfor l := range providers[cPName].Trace() {\n\t\t\tif spin.Prefix != \"\" {\n\t\t\t\tspin.Stop()\n\t\t\t\tspin.Prefix = \"\"\n\t\t\t\tfmt.Printf(\"\\n%s\\n\", l)\n\t\t\t} else {\n\t\t\t\tfmt.Println(l)\n\t\t\t}\n\t\t}\n\t\tspin.Stop()\n\t}\n}\n\n// hping tries to ping a web server by http\nfunc hping() {\n\t// it should work at local mode\n\tif cPName != \"local\" {\n\t\treturn\n\t}\n\tp, err := ping.NewPing(args, cfg)\n\tif err != nil {\n\t\tprintln(err.Error())\n\t} else {\n\t\tp.Run()\n\t}\n}\n\n// pingQuery runs ping command (local/LG)\nfunc pingQuery() {\n\tif cPName == \"local\" {\n\t\tpingLocal()\n\t} else {\n\t\tpingLG()\n\t}\n}\n\n// pingLG tries to ping through a looking glass\nfunc pingLG() {\n\tspin.Prefix = \"please wait \"\n\tspin.Start()\n\tproviders[cPName].Set(args, \"ipv4\")\n\tm, err := providers[cPName].Ping()\n\tspin.Stop()\n\tif err != nil {\n\t\tprintln(err.Error())\n\t} else {\n\t\tprintln(m)\n\t}\n}\n\n// pingLocal tries to ping from local source ip\nfunc pingLocal() {\n\tp, err := icmp.NewPing(args, cfg)\n\tif err != nil {\n\t\tprintln(err.Error())\n\t}\n\tif p == nil {\n\t\treturn\n\t}\n\tif !p.IsCIDR() {\n\t\tresp := p.Run()\n\t\tp.PrintPretty(resp)\n\t} else {\n\t\tresp := p.MRun()\n\t\tp.CIDRHeader()\n\t\tfor r := range resp {\n\t\t\ticmp.CIDRRespPrint(r)\n\t\t}\n\t}\n}\n\nfunc speedTest() {\n\tif err := speedtest.Run(); err != nil {\n\t\tprintln(\"\\n\", err.Error())\n\t}\n}\n\n// scanPorts tries to scan tcp/ip ports\nfunc scanPorts() {\n\tscan, err := scan.NewScan(args, cfg)\n\tif err != nil {\n\t\tprintln(err.Error())\n\t} else {\n\t\tspin.Prefix = \"please wait \"\n\t\tspin.Start()\n\t\tscan.Run()\n\t\tspin.Stop()\n\t}\n}\n\n// BGP tries to get BGP lookup from a LG\nfunc BGP() {\n\tif cPName == \"local\" {\n\t\tprintln(\"no provider selected\")\n\t\treturn\n\t}\n\tproviders[cPName].Set(args, \"ipv4\")\n\tfor l := range providers[cPName].BGP() {\n\t\tprintln(l)\n\t}\n}\n\n// discovery handles disc command\nfunc discovery() {\n\tvar (\n\t\twg sync.WaitGroup\n\t\t//ts = time.Now()\n\t)\n\n\td := disc.New(args)\n\t// help requested\n\tif d == nil {\n\t\treturn\n\t}\n\n\tspin.Prefix = \"please wait \"\n\tspin.Start()\n\n\t// load OUI async\n\tgo func() {\n\t\twg.Add(1)\n\t\td.LoadOUI()\n\t\twg.Done()\n\t}()\n\n\td.PingLan()\n\ttime.Sleep(5 * time.Second)\n\n\tif err := d.GetARPTable(); err != nil {\n\t\tprintln(err.Error())\n\t\treturn\n\t}\n\twg.Wait()\n\tspin.Stop()\n\n\tprintln(\"\\nNetwork LAN Discovery\")\n\td.PrintPretty()\n}\n\n// nms\nfunc setNMS() {\n\titems := []string{\"interface\", \"config\"}\n\tc.UpdateCompleter(\"show\", items)\n\tc.SetPrompt(\"nms\")\n}\n\n// setConfig\nfunc setConfig() {\n\tif err := cli.SetConfig(args, &cfg); err != nil {\n\t\tprintln(err.Error())\n\t}\n}\n\n// show command\nfunc show() {\n\tvar err error\n\n\tre := regexp.MustCompile(`^([a-z]+)\\s*(.*)$`)\n\tm := re.FindStringSubmatch(args)\n\n\tif len(m) < 3 {\n\t\treturn\n\t}\n\n\tsubItem := m[1]\n\tsubArgs := m[2]\n\n\tswitch subItem {\n\tcase \"config\":\n\t\tcli.ShowConfig(&cfg)\n\tcase \"interface\":\n\t\tif strings.HasPrefix(prompt, \"nms\") {\n\t\t\terr = nmsClient.ShowInterface(subArgs)\n\t\t} else {\n\t\t\tprintln(\"it's available under nms\")\n\t\t}\n\t\tif err != nil {\n\t\t\tprintln(err.Error())\n\t\t}\n\t}\n}\n\n// setLG set lg prompt and completer\nfunc setLG() {\n\tcPName = \"level3\"\n\tc.UpdateCompleter(\"connect\", pNames)\n\tc.SetPrompt(\"lg/\" + cPName + \"/\" + providers[cPName].GetDefaultNode())\n\tgo func() {\n\t\tc.UpdateCompleter(\"node\", providers[cPName].GetNodes())\n\t}()\n}\n\n// setNS set ns prompt and update completers\nfunc setNS() {\n\tc.UpdateCompleter(\"connect\", nsr.CountryList())\n\tc.UpdateCompleter(\"node\", []string{})\n\tc.SetPrompt(\"ns\")\n}\n\n// peeringDB gets peer info\nfunc peeringDB() {\n\tpeeringdb.Search(args)\n}\n\n// whoisLookup gets ANS/Prefix info\nfunc whoisLookup() {\n\twhois.Lookup(args)\n}\n\n// local set prompts to local\nfunc local() {\n\tnsr.Local()\n\tcPName = \"local\"\n\tc.UpdateCompleter(\"show\", []string{\"config\"})\n\tc.SetPrompt(cPName)\n}\n\n// printVersion prints version and exits\nfunc printVersion() {\n\tfmt.Printf(\"myLG v%s\\n\", version)\n}\n\n// cleanUp\nfunc cleanUp() {\n\tc.Close(nxt)\n\tclose(req)\n}\n\n// help\nfunc help() {\n\tif noIf {\n\t\t// without command line\n\t\th := `\n              ***** TRY IT WITHOUT ANYTHING TO HAVE INTERFACE *****\n        Usage:\n              mylg [command] [args...]\n\n              Available commands:\n\n              ping                        ping ip address or domain name\n              trace                       trace ip address or domain name (real-time w/ -r option)\n              dig                         name server looking up\n              whois                       resolve AS number/IP/CIDR to holder (provides by ripe ncc)\n              hping                       Ping through HTTP/HTTPS w/ GET/HEAD methods\n              scan                        scan tcp ports (you can provide range >scan host minport maxport)\n              dump                        prints out a description of the contents of packets on a network interface\n              disc                        discover all the devices on a LAN\n              peering                     peering information (provides by peeringdb.com)\n              version                     shows mylg version\n\n        Example:\n              mylg trace freebsd.org -r\n              mylg whois 8.8.8.8\n              mylg scan 127.0.0.1\n              mylg dig google.com +trace\n\t\t`\n\t\tfmt.Println(h)\n\t} else {\n\t\t// with command line interface\n\n\t\tc.Help()\n\t}\n}\n"
        },
        {
          "name": "nms",
          "type": "tree",
          "content": null
        },
        {
          "name": "ns",
          "type": "tree",
          "content": null
        },
        {
          "name": "packet",
          "type": "tree",
          "content": null
        },
        {
          "name": "peeringdb",
          "type": "tree",
          "content": null
        },
        {
          "name": "ripe",
          "type": "tree",
          "content": null
        },
        {
          "name": "scan",
          "type": "tree",
          "content": null
        },
        {
          "name": "services",
          "type": "tree",
          "content": null
        },
        {
          "name": "speedtest",
          "type": "tree",
          "content": null
        },
        {
          "name": "ssh",
          "type": "tree",
          "content": null
        },
        {
          "name": "whois",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}