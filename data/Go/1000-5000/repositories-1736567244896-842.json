{
  "metadata": {
    "timestamp": 1736567244896,
    "page": 842,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "briandowns/spinner",
      "stars": 2383,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3369140625,
          "content": "# Created by .gitignore support plugin (hsz.mobi)\n### Go template\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n.idea\n*.iml\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2373046875,
          "content": "arch:\n  - amd64\n  - ppc64le\nlanguage: go\ngo:\n  - 1.16\n  - 1.17.5\nenv:\n  - GOARCH: amd64\n  - GOARCH: 386\nscript:\n  - go test -v\nnotifications:\n  email:\n    recipients:\n      - brian.downs@gmail.com\n    on_success: change\n    on_failure: always\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.9033203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2275390625,
          "content": "GO = go\n\n.PHONY: deps\ndeps: go.mod\n\ngo.mod:\n\tgo mod init\n\tgo mod tidy\n\n.PHONY: test\ntest:\n\t$(GO) test -v -cover ./...\n\n.PHONY: check\ncheck:\n\tif [ -d vendor ]; then cp -r vendor/* ${GOPATH}/src/; fi\n\n.PHONY: clean\nclean:\n\t$(GO) clean\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 0.427734375,
          "content": "Spinner\nCopyright (c) 2022 Brian J. Downs \nThis product is licensed to you under the Apache 2.0 license (the \"License\").  You may not use this product except in compliance with the Apache 2.0 License.  \nThis product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file. \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.068359375,
          "content": "# Spinner\n\n[![GoDoc](https://godoc.org/github.com/briandowns/spinner?status.svg)](https://godoc.org/github.com/briandowns/spinner) [![CircleCI](https://circleci.com/gh/briandowns/spinner.svg?style=svg)](https://circleci.com/gh/briandowns/spinner)\n\nspinner is a simple package to add a spinner / progress indicator to any terminal application. Examples can be found below as well as full examples in the examples directory.\n\nFor more detail about the library and its features, reference your local godoc once installed.\n\nContributions welcome!\n\n## Installation\n\n```bash\ngo get github.com/briandowns/spinner\n```\n\n## Available Character Sets\n\n90 Character Sets. Some examples below:\n\n(Numbered by their slice index)\n\n| index | character set                                                                                                                                                                                                                                                                             | sample gif                 |\n| ----- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------- |\n| 0     | ```←↖↑↗→↘↓↙```                                                                                                                                                                                                                                                                            | ![Sample Gif](gifs/0.gif)  |\n| 1     | ```▁▃▄▅▆▇█▇▆▅▄▃▁```                                                                                                                                                                                                                                                                       | ![Sample Gif](gifs/1.gif)  |\n| 2     | ```▖▘▝▗```                                                                                                                                                                                                                                                                                | ![Sample Gif](gifs/2.gif)  |\n| 3     | ```┤┘┴└├┌┬┐```                                                                                                                                                                                                                                                                            | ![Sample Gif](gifs/3.gif)  |\n| 4     | ```◢◣◤◥```                                                                                                                                                                                                                                                                                | ![Sample Gif](gifs/4.gif)  |\n| 5     | ```◰◳◲◱```                                                                                                                                                                                                                                                                                | ![Sample Gif](gifs/5.gif)  |\n| 6     | ```◴◷◶◵```                                                                                                                                                                                                                                                                                | ![Sample Gif](gifs/6.gif)  |\n| 7     | ```◐◓◑◒```                                                                                                                                                                                                                                                                                | ![Sample Gif](gifs/7.gif)  |\n| 8     | ```.oO@*```                                                                                                                                                                                                                                                                               | ![Sample Gif](gifs/8.gif)  |\n| 9     | ```\\|/-\\```                                                                                                                                                                                                                                                                               | ![Sample Gif](gifs/9.gif)  |\n| 10    | ```◡◡⊙⊙◠◠```                                                                                                                                                                                                                                                                              | ![Sample Gif](gifs/10.gif) |\n| 11    | ```⣾⣽⣻⢿⡿⣟⣯⣷```                                                                                                                                                                                                                                                                            | ![Sample Gif](gifs/11.gif) |\n| 12    | ```>))'> >))'>  >))'>   >))'>    >))'>   <'((<  <'((< <'((<```                                                                                                                                                                                                                            | ![Sample Gif](gifs/12.gif) |\n| 13    | ```⠁⠂⠄⡀⢀⠠⠐⠈```                                                                                                                                                                                                                                                                            | ![Sample Gif](gifs/13.gif) |\n| 14    | ```⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏```                                                                                                                                                                                                                                                                          | ![Sample Gif](gifs/14.gif) |\n| 15    | ```abcdefghijklmnopqrstuvwxyz```                                                                                                                                                                                                                                                          | ![Sample Gif](gifs/15.gif) |\n| 16    | ```▉▊▋▌▍▎▏▎▍▌▋▊▉```                                                                                                                                                                                                                                                                       | ![Sample Gif](gifs/16.gif) |\n| 17    | ```■□▪▫```                                                                                                                                                                                                                                                                                | ![Sample Gif](gifs/17.gif) |\n| 18    | ```←↑→↓```                                                                                                                                                                                                                                                                                | ![Sample Gif](gifs/18.gif) |\n| 19    | ```╫╪```                                                                                                                                                                                                                                                                                  | ![Sample Gif](gifs/19.gif) |\n| 20    | ```⇐⇖⇑⇗⇒⇘⇓⇙```                                                                                                                                                                                                                                                                            | ![Sample Gif](gifs/20.gif) |\n| 21    | ```⠁⠁⠉⠙⠚⠒⠂⠂⠒⠲⠴⠤⠄⠄⠤⠠⠠⠤⠦⠖⠒⠐⠐⠒⠓⠋⠉⠈⠈```                                                                                                                                                                                                                                                       | ![Sample Gif](gifs/21.gif) |\n| 22    | ```⠈⠉⠋⠓⠒⠐⠐⠒⠖⠦⠤⠠⠠⠤⠦⠖⠒⠐⠐⠒⠓⠋⠉⠈```                                                                                                                                                                                                                                                            | ![Sample Gif](gifs/22.gif) |\n| 23    | ```⠁⠉⠙⠚⠒⠂⠂⠒⠲⠴⠤⠄⠄⠤⠴⠲⠒⠂⠂⠒⠚⠙⠉⠁```                                                                                                                                                                                                                                                            | ![Sample Gif](gifs/23.gif) |\n| 24    | ```⠋⠙⠚⠒⠂⠂⠒⠲⠴⠦⠖⠒⠐⠐⠒⠓⠋```                                                                                                                                                                                                                                                                   | ![Sample Gif](gifs/24.gif) |\n| 25    | ```ｦｧｨｩｪｫｬｭｮｯｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝ```                                                                                                                                                                                                                             | ![Sample Gif](gifs/25.gif) |\n| 26    | ```. .. ...```                                                                                                                                                                                                                                                                            | ![Sample Gif](gifs/26.gif) |\n| 27    | ```▁▂▃▄▅▆▇█▉▊▋▌▍▎▏▏▎▍▌▋▊▉█▇▆▅▄▃▂▁```                                                                                                                                                                                                                                                      | ![Sample Gif](gifs/27.gif) |\n| 28    | ```.oO°Oo.```                                                                                                                                                                                                                                                                             | ![Sample Gif](gifs/28.gif) |\n| 29    | ```+x```                                                                                                                                                                                                                                                                                  | ![Sample Gif](gifs/29.gif) |\n| 30    | ```v<^>```                                                                                                                                                                                                                                                                                | ![Sample Gif](gifs/30.gif) |\n| 31    | ```>>---> >>--->  >>--->   >>--->    >>--->    <---<<    <---<<   <---<<  <---<< <---<<```                                                                                                                                                                                                | ![Sample Gif](gifs/31.gif) |\n| 32    | ```\\| \\|\\| \\|\\|\\| \\|\\|\\|\\| \\|\\|\\|\\|\\| \\|\\|\\|\\|\\|\\| \\|\\|\\|\\|\\| \\|\\|\\|\\| \\|\\|\\| \\|\\| \\|```                                                                                                                                                                                                  | ![Sample Gif](gifs/32.gif) |\n| 33    | ```[] [=] [==] [===] [====] [=====] [======] [=======] [========] [=========] [==========]```                                                                                                                                                                                             | ![Sample Gif](gifs/33.gif) |\n| 34    | ```(*---------) (-*--------) (--*-------) (---*------) (----*-----) (-----*----) (------*---) (-------*--) (--------*-) (---------*)```                                                                                                                                                   | ![Sample Gif](gifs/34.gif) |\n| 35    | ```█▒▒▒▒▒▒▒▒▒ ███▒▒▒▒▒▒▒ █████▒▒▒▒▒ ███████▒▒▒ ██████████```                                                                                                                                                                                                                              | ![Sample Gif](gifs/35.gif) |\n| 36    | ```[                    ] [=>                  ] [===>                ] [=====>              ] [======>             ] [========>           ] [==========>         ] [============>       ] [==============>     ] [================>   ] [==================> ] [===================>]``` | ![Sample Gif](gifs/36.gif) |\n| 37    | ```🕐 🕑 🕒 🕓 🕔 🕕 🕖 🕗 🕘 🕙 🕚 🕛```                                                                                                                                                                                                                                                             | ![Sample Gif](gifs/37.gif) |\n| 38    | ```🕐 🕜 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 🕙 🕥 🕚 🕦 🕛 🕧```                                                                                                                                                                                                                                     | ![Sample Gif](gifs/38.gif) |\n| 39    | ```🌍 🌎 🌏```                                                                                                                                                                                                                                                                               | ![Sample Gif](gifs/39.gif) |\n| 40    | ```◜ ◝ ◞ ◟```                                                                                                                                                                                                                                                                             | ![Sample Gif](gifs/40.gif) |\n| 41    | ```⬒ ⬔ ⬓ ⬕```                                                                                                                                                                                                                                                                             | ![Sample Gif](gifs/41.gif) |\n| 42    | ```⬖ ⬘ ⬗ ⬙```                                                                                                                                                                                                                                                                             | ![Sample Gif](gifs/42.gif) |\n| 43    | ```[>>>          >] []>>>>        [] []  >>>>      [] []    >>>>    [] []      >>>>  [] []        >>>>[] [>>          >>]```                                                                                                                                                              | ![Sample Gif](gifs/43.gif) |\n\n## Features\n\n* Start\n* Stop\n* Restart\n* Reverse direction\n* Update the spinner character set\n* Update the spinner speed\n* Prefix or append text\n* Change spinner color, background, and text attributes such as bold / italics\n* Get spinner status\n* Chain, pipe, redirect output\n* Output final string on spinner/indicator completion\n\n## Examples\n\n```Go\npackage main\n\nimport (\n\t\"github.com/briandowns/spinner\"\n\t\"time\"\n)\n\nfunc main() {\n\ts := spinner.New(spinner.CharSets[9], 100*time.Millisecond)  // Build our new spinner\n\ts.Start()                                                    // Start the spinner\n\ttime.Sleep(4 * time.Second)                                  // Run for some time to simulate work\n\ts.Stop()\n}\n```\n\n## Update the character set and restart the spinner\n\n```Go\ns.UpdateCharSet(spinner.CharSets[1])  // Update spinner to use a different character set\ns.Restart()                           // Restart the spinner\ntime.Sleep(4 * time.Second)\ns.Stop()\n```\n\n## Update spin speed and restart the spinner\n\n```Go\ns.UpdateSpeed(200 * time.Millisecond) // Update the speed the spinner spins at\ns.Restart()\ntime.Sleep(4 * time.Second)\ns.Stop()\n```\n\n## Reverse the direction of the spinner\n\n```Go\ns.Reverse() // Reverse the direction the spinner is spinning\ns.Restart()\ntime.Sleep(4 * time.Second)\ns.Stop()\n```\n\n## Provide your own spinner\n\n(or send me an issue or pull request to add to the project)\n\n```Go\nsomeSet := []string{\"+\", \"-\"}\ns := spinner.New(someSet, 100*time.Millisecond)\n```\n\n## Prefix or append text to the spinner\n\n```Go\ns.Prefix = \"prefixed text: \" // Prefix text before the spinner\ns.Suffix = \"  :appended text\" // Append text after the spinner\n```\n\n## Set or change the color of the spinner.  Default color is white. The spinner will need to be restarted to pick up the change.\n\n```Go\ns.Color(\"red\") // Set the spinner color to red\n```\n\nYou can specify both the background and foreground color, as well as additional attributes such as `bold` or `underline`.\n\n```Go\ns.Color(\"red\", \"bold\") // Set the spinner color to a bold red\n```\n\nTo set the background to black, the foreground to a bold red:\n\n```Go\ns.Color(\"bgBlack\", \"bold\", \"fgRed\")\n```\n\nBelow is the full color and attribute list:\n\n```Go\n// default colors\nred\nblack\ngreen\nyellow\nblue\nmagenta\ncyan\nwhite\n\n// attributes\nreset\nbold\nfaint\nitalic\nunderline\nblinkslow\nblinkrapid\nreversevideo\nconcealed\ncrossedout\n\n// foreground text\nfgBlack\nfgRed\nfgGreen\nfgYellow\nfgBlue\nfgMagenta\nfgCyan\nfgWhite\n\n// foreground Hi-Intensity text\nfgHiBlack\nfgHiRed\nfgHiGreen\nfgHiYellow\nfgHiBlue\nfgHiMagenta\nfgHiCyan\nfgHiWhite\n\n// background text\nbgBlack\nbgRed\nbgGreen\nbgYellow\nbgBlue\nbgMagenta\nbgCyan\nbgWhite\n\n// background Hi-Intensity text\nbgHiBlack\nbgHiRed\nbgHiGreen\nbgHiYellow\nbgHiBlue\nbgHiMagenta\nbgHiCyan\nbgHiWhite\n```\n\n## Generate a sequence of numbers\n\n```Go\nsetOfDigits := spinner.GenerateNumberSequence(25)    // Generate a 25 digit string of numbers\ns := spinner.New(setOfDigits, 100*time.Millisecond)\n```\n\n## Get spinner status\n\n```Go\nfmt.Println(s.Active())\n```\n\n## Unix pipe and redirect\n\nFeature suggested and write up by [dekz](https://github.com/dekz)\n\nSetting the Spinner Writer to Stderr helps show progress to the user, with the enhancement to chain, pipe or redirect the output. \n\nThis is the preferred method of setting a Writer at this time.\n\n```go\ns := spinner.New(spinner.CharSets[11], 100*time.Millisecond, spinner.WithWriter(os.Stderr))\ns.Suffix = \" Encrypting data...\"\ns.Start()\n// Encrypt the data into ciphertext\nfmt.Println(os.Stdout, ciphertext)\n```\n\n```sh\n> myprog encrypt \"Secret text\" > encrypted.txt\n⣯ Encrypting data...\n```\n\n```sh\n> cat encrypted.txt\n1243hjkbas23i9ah27sj39jghv237n2oa93hg83\n```\n\n## Final String Output\n\nAdd additional output when the spinner/indicator has completed. The \"final\" output string can be multi-lined and will be written to wherever the `io.Writer` has been configured for.\n\n```Go\ns := spinner.New(spinner.CharSets[9], 100*time.Millisecond)\ns.FinalMSG = \"Complete!\\nNew line!\\nAnother one!\\n\"\ns.Start()                 \ntime.Sleep(4 * time.Second)\ns.Stop()                   \n```\n\nOutput\n```sh\nComplete!\nNew line!\nAnother one!\n```\n"
        },
        {
          "name": "_example",
          "type": "tree",
          "content": null
        },
        {
          "name": "character_sets.go",
          "type": "blob",
          "size": 8.5078125,
          "content": "// Copyright (c) 2022 Brian J. Downs\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage spinner\n\nconst (\n\tclockOneOClock = '\\U0001F550'\n\tclockOneThirty = '\\U0001F55C'\n)\n\n// CharSets contains the available character sets\nvar CharSets = map[int][]string{\n\t0:  {\"←\", \"↖\", \"↑\", \"↗\", \"→\", \"↘\", \"↓\", \"↙\"},\n\t1:  {\"▁\", \"▃\", \"▄\", \"▅\", \"▆\", \"▇\", \"█\", \"▇\", \"▆\", \"▅\", \"▄\", \"▃\", \"▁\"},\n\t2:  {\"▖\", \"▘\", \"▝\", \"▗\"},\n\t3:  {\"┤\", \"┘\", \"┴\", \"└\", \"├\", \"┌\", \"┬\", \"┐\"},\n\t4:  {\"◢\", \"◣\", \"◤\", \"◥\"},\n\t5:  {\"◰\", \"◳\", \"◲\", \"◱\"},\n\t6:  {\"◴\", \"◷\", \"◶\", \"◵\"},\n\t7:  {\"◐\", \"◓\", \"◑\", \"◒\"},\n\t8:  {\".\", \"o\", \"O\", \"@\", \"*\"},\n\t9:  {\"|\", \"/\", \"-\", \"\\\\\"},\n\t10: {\"◡◡\", \"⊙⊙\", \"◠◠\"},\n\t11: {\"⣾\", \"⣽\", \"⣻\", \"⢿\", \"⡿\", \"⣟\", \"⣯\", \"⣷\"},\n\t12: {\">))'>\", \" >))'>\", \"  >))'>\", \"   >))'>\", \"    >))'>\", \"   <'((<\", \"  <'((<\", \" <'((<\"},\n\t13: {\"⠁\", \"⠂\", \"⠄\", \"⡀\", \"⢀\", \"⠠\", \"⠐\", \"⠈\"},\n\t14: {\"⠋\", \"⠙\", \"⠹\", \"⠸\", \"⠼\", \"⠴\", \"⠦\", \"⠧\", \"⠇\", \"⠏\"},\n\t15: {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"},\n\t16: {\"▉\", \"▊\", \"▋\", \"▌\", \"▍\", \"▎\", \"▏\", \"▎\", \"▍\", \"▌\", \"▋\", \"▊\", \"▉\"},\n\t17: {\"■\", \"□\", \"▪\", \"▫\"},\n\n\t18: {\"←\", \"↑\", \"→\", \"↓\"},\n\t19: {\"╫\", \"╪\"},\n\t20: {\"⇐\", \"⇖\", \"⇑\", \"⇗\", \"⇒\", \"⇘\", \"⇓\", \"⇙\"},\n\t21: {\"⠁\", \"⠁\", \"⠉\", \"⠙\", \"⠚\", \"⠒\", \"⠂\", \"⠂\", \"⠒\", \"⠲\", \"⠴\", \"⠤\", \"⠄\", \"⠄\", \"⠤\", \"⠠\", \"⠠\", \"⠤\", \"⠦\", \"⠖\", \"⠒\", \"⠐\", \"⠐\", \"⠒\", \"⠓\", \"⠋\", \"⠉\", \"⠈\", \"⠈\"},\n\t22: {\"⠈\", \"⠉\", \"⠋\", \"⠓\", \"⠒\", \"⠐\", \"⠐\", \"⠒\", \"⠖\", \"⠦\", \"⠤\", \"⠠\", \"⠠\", \"⠤\", \"⠦\", \"⠖\", \"⠒\", \"⠐\", \"⠐\", \"⠒\", \"⠓\", \"⠋\", \"⠉\", \"⠈\"},\n\t23: {\"⠁\", \"⠉\", \"⠙\", \"⠚\", \"⠒\", \"⠂\", \"⠂\", \"⠒\", \"⠲\", \"⠴\", \"⠤\", \"⠄\", \"⠄\", \"⠤\", \"⠴\", \"⠲\", \"⠒\", \"⠂\", \"⠂\", \"⠒\", \"⠚\", \"⠙\", \"⠉\", \"⠁\"},\n\t24: {\"⠋\", \"⠙\", \"⠚\", \"⠒\", \"⠂\", \"⠂\", \"⠒\", \"⠲\", \"⠴\", \"⠦\", \"⠖\", \"⠒\", \"⠐\", \"⠐\", \"⠒\", \"⠓\", \"⠋\"},\n\t25: {\"ｦ\", \"ｧ\", \"ｨ\", \"ｩ\", \"ｪ\", \"ｫ\", \"ｬ\", \"ｭ\", \"ｮ\", \"ｯ\", \"ｱ\", \"ｲ\", \"ｳ\", \"ｴ\", \"ｵ\", \"ｶ\", \"ｷ\", \"ｸ\", \"ｹ\", \"ｺ\", \"ｻ\", \"ｼ\", \"ｽ\", \"ｾ\", \"ｿ\", \"ﾀ\", \"ﾁ\", \"ﾂ\", \"ﾃ\", \"ﾄ\", \"ﾅ\", \"ﾆ\", \"ﾇ\", \"ﾈ\", \"ﾉ\", \"ﾊ\", \"ﾋ\", \"ﾌ\", \"ﾍ\", \"ﾎ\", \"ﾏ\", \"ﾐ\", \"ﾑ\", \"ﾒ\", \"ﾓ\", \"ﾔ\", \"ﾕ\", \"ﾖ\", \"ﾗ\", \"ﾘ\", \"ﾙ\", \"ﾚ\", \"ﾛ\", \"ﾜ\", \"ﾝ\"},\n\t26: {\".\", \"..\", \"...\"},\n\t27: {\"▁\", \"▂\", \"▃\", \"▄\", \"▅\", \"▆\", \"▇\", \"█\", \"▉\", \"▊\", \"▋\", \"▌\", \"▍\", \"▎\", \"▏\", \"▏\", \"▎\", \"▍\", \"▌\", \"▋\", \"▊\", \"▉\", \"█\", \"▇\", \"▆\", \"▅\", \"▄\", \"▃\", \"▂\", \"▁\"},\n\t28: {\".\", \"o\", \"O\", \"°\", \"O\", \"o\", \".\"},\n\t29: {\"+\", \"x\"},\n\t30: {\"v\", \"<\", \"^\", \">\"},\n\t31: {\">>--->\", \" >>--->\", \"  >>--->\", \"   >>--->\", \"    >>--->\", \"    <---<<\", \"   <---<<\", \"  <---<<\", \" <---<<\", \"<---<<\"},\n\t32: {\"|\", \"||\", \"|||\", \"||||\", \"|||||\", \"|||||||\", \"||||||||\", \"|||||||\", \"||||||\", \"|||||\", \"||||\", \"|||\", \"||\", \"|\"},\n\t33: {\"[          ]\", \"[=         ]\", \"[==        ]\", \"[===       ]\", \"[====      ]\", \"[=====     ]\", \"[======    ]\", \"[=======   ]\", \"[========  ]\", \"[========= ]\", \"[==========]\"},\n\t34: {\"(*---------)\", \"(-*--------)\", \"(--*-------)\", \"(---*------)\", \"(----*-----)\", \"(-----*----)\", \"(------*---)\", \"(-------*--)\", \"(--------*-)\", \"(---------*)\"},\n\t35: {\"█▒▒▒▒▒▒▒▒▒\", \"███▒▒▒▒▒▒▒\", \"█████▒▒▒▒▒\", \"███████▒▒▒\", \"██████████\"},\n\t36: {\"[                    ]\", \"[=>                  ]\", \"[===>                ]\", \"[=====>              ]\", \"[======>             ]\", \"[========>           ]\", \"[==========>         ]\", \"[============>       ]\", \"[==============>     ]\", \"[================>   ]\", \"[==================> ]\", \"[===================>]\"},\n\t39: {\"🌍\", \"🌎\", \"🌏\"},\n\t40: {\"◜\", \"◝\", \"◞\", \"◟\"},\n\t41: {\"⬒\", \"⬔\", \"⬓\", \"⬕\"},\n\t42: {\"⬖\", \"⬘\", \"⬗\", \"⬙\"},\n\t43: {\"[>>>          >]\", \"[]>>>>        []\", \"[]  >>>>      []\", \"[]    >>>>    []\", \"[]      >>>>  []\", \"[]        >>>>[]\", \"[>>          >>]\"},\n\t44: {\"♠\", \"♣\", \"♥\", \"♦\"},\n\t45: {\"➞\", \"➟\", \"➠\", \"➡\", \"➠\", \"➟\"},\n\t46: {\"  |  \", ` \\   `, \"_    \", ` \\   `, \"  |  \", \"   / \", \"    _\", \"   / \"},\n\t47: {\"  . . . .\", \".   . . .\", \". .   . .\", \". . .   .\", \". . . .  \", \". . . . .\"},\n\t48: {\" |     \", \"  /    \", \"   _   \", `    \\  `, \"     | \", `    \\  `, \"   _   \", \"  /    \"},\n\t49: {\"⎺\", \"⎻\", \"⎼\", \"⎽\", \"⎼\", \"⎻\"},\n\t50: {\"▹▹▹▹▹\", \"▸▹▹▹▹\", \"▹▸▹▹▹\", \"▹▹▸▹▹\", \"▹▹▹▸▹\", \"▹▹▹▹▸\"},\n\t51: {\"[    ]\", \"[   =]\", \"[  ==]\", \"[ ===]\", \"[====]\", \"[=== ]\", \"[==  ]\", \"[=   ]\"},\n\t52: {\"( ●    )\", \"(  ●   )\", \"(   ●  )\", \"(    ● )\", \"(     ●)\", \"(    ● )\", \"(   ●  )\", \"(  ●   )\", \"( ●    )\"},\n\t53: {\"✶\", \"✸\", \"✹\", \"✺\", \"✹\", \"✷\"},\n\t54: {\"▐|\\\\____________▌\", \"▐_|\\\\___________▌\", \"▐__|\\\\__________▌\", \"▐___|\\\\_________▌\", \"▐____|\\\\________▌\", \"▐_____|\\\\_______▌\", \"▐______|\\\\______▌\", \"▐_______|\\\\_____▌\", \"▐________|\\\\____▌\", \"▐_________|\\\\___▌\", \"▐__________|\\\\__▌\", \"▐___________|\\\\_▌\", \"▐____________|\\\\▌\", \"▐____________/|▌\", \"▐___________/|_▌\", \"▐__________/|__▌\", \"▐_________/|___▌\", \"▐________/|____▌\", \"▐_______/|_____▌\", \"▐______/|______▌\", \"▐_____/|_______▌\", \"▐____/|________▌\", \"▐___/|_________▌\", \"▐__/|__________▌\", \"▐_/|___________▌\", \"▐/|____________▌\"},\n\t55: {\"▐⠂       ▌\", \"▐⠈       ▌\", \"▐ ⠂      ▌\", \"▐ ⠠      ▌\", \"▐  ⡀     ▌\", \"▐  ⠠     ▌\", \"▐   ⠂    ▌\", \"▐   ⠈    ▌\", \"▐    ⠂   ▌\", \"▐    ⠠   ▌\", \"▐     ⡀  ▌\", \"▐     ⠠  ▌\", \"▐      ⠂ ▌\", \"▐      ⠈ ▌\", \"▐       ⠂▌\", \"▐       ⠠▌\", \"▐       ⡀▌\", \"▐      ⠠ ▌\", \"▐      ⠂ ▌\", \"▐     ⠈  ▌\", \"▐     ⠂  ▌\", \"▐    ⠠   ▌\", \"▐    ⡀   ▌\", \"▐   ⠠    ▌\", \"▐   ⠂    ▌\", \"▐  ⠈     ▌\", \"▐  ⠂     ▌\", \"▐ ⠠      ▌\", \"▐ ⡀      ▌\", \"▐⠠       ▌\"},\n\t56: {\"¿\", \"?\"},\n\t57: {\"⢹\", \"⢺\", \"⢼\", \"⣸\", \"⣇\", \"⡧\", \"⡗\", \"⡏\"},\n\t58: {\"⢄\", \"⢂\", \"⢁\", \"⡁\", \"⡈\", \"⡐\", \"⡠\"},\n\t59: {\".  \", \".. \", \"...\", \" ..\", \"  .\", \"   \"},\n\t60: {\".\", \"o\", \"O\", \"°\", \"O\", \"o\", \".\"},\n\t61: {\"▓\", \"▒\", \"░\"},\n\t62: {\"▌\", \"▀\", \"▐\", \"▄\"},\n\t63: {\"⊶\", \"⊷\"},\n\t64: {\"▪\", \"▫\"},\n\t65: {\"□\", \"■\"},\n\t66: {\"▮\", \"▯\"},\n\t67: {\"-\", \"=\", \"≡\"},\n\t68: {\"d\", \"q\", \"p\", \"b\"},\n\t69: {\"∙∙∙\", \"●∙∙\", \"∙●∙\", \"∙∙●\", \"∙∙∙\"},\n\t70: {\"🌑 \", \"🌒 \", \"🌓 \", \"🌔 \", \"🌕 \", \"🌖 \", \"🌗 \", \"🌘 \"},\n\t71: {\"☗\", \"☖\"},\n\t72: {\"⧇\", \"⧆\"},\n\t73: {\"◉\", \"◎\"},\n\t74: {\"㊂\", \"㊀\", \"㊁\"},\n\t75: {\"⦾\", \"⦿\"},\n\t76: {\"ဝ\", \"၀\"},\n\t77: {\"▌\", \"▀\", \"▐▄\"},\n\t78: {\"⠈⠁\", \"⠈⠑\", \"⠈⠱\", \"⠈⡱\", \"⢀⡱\", \"⢄⡱\", \"⢄⡱\", \"⢆⡱\", \"⢎⡱\", \"⢎⡰\", \"⢎⡠\", \"⢎⡀\", \"⢎⠁\", \"⠎⠁\", \"⠊⠁\"},\n\t79: {\"________\", \"-_______\", \"_-______\", \"__-_____\", \"___-____\", \"____-___\", \"_____-__\", \"______-_\", \"_______-\", \"________\", \"_______-\", \"______-_\", \"_____-__\", \"____-___\", \"___-____\", \"__-_____\", \"_-______\", \"-_______\", \"________\"},\n\t80: {\"|_______\", \"_/______\", \"__-_____\", \"___\\\\____\", \"____|___\", \"_____/__\", \"______-_\", \"_______\\\\\", \"_______|\", \"______\\\\_\", \"_____-__\", \"____/___\", \"___|____\", \"__\\\\_____\", \"_-______\"},\n\t81: {\"□\", \"◱\", \"◧\", \"▣\", \"■\"},\n\t82: {\"□\", \"◱\", \"▨\", \"▩\", \"■\"},\n\t83: {\"░\", \"▒\", \"▓\", \"█\"},\n\t84: {\"░\", \"█\"},\n\t85: {\"⚪\", \"⚫\"},\n\t86: {\"◯\", \"⬤\"},\n\t87: {\"▱\", \"▰\"},\n\t88: {\"➊\", \"➋\", \"➌\", \"➍\", \"➎\", \"➏\", \"➐\", \"➑\", \"➒\", \"➓\"},\n\t89: {\"½\", \"⅓\", \"⅔\", \"¼\", \"¾\", \"⅛\", \"⅜\", \"⅝\", \"⅞\"},\n\t90: {\"↞\", \"↟\", \"↠\", \"↡\"},\n}\n\nfunc init() {\n\tfor i := rune(0); i < 12; i++ {\n\t\tCharSets[37] = append(CharSets[37], string([]rune{clockOneOClock + i}))\n\t\tCharSets[38] = append(CharSets[38], string([]rune{clockOneOClock + i}), string([]rune{clockOneThirty + i}))\n\t}\n}\n"
        },
        {
          "name": "gifs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.2841796875,
          "content": "module github.com/briandowns/spinner\n\ngo 1.17\n\nrequire (\n\tgithub.com/fatih/color v1.7.0\n\tgolang.org/x/term v0.1.0\n)\n\nrequire (\n\tgithub.com/mattn/go-colorable v0.1.2 // indirect\n\tgithub.com/mattn/go-isatty v0.0.8 // indirect\n\tgolang.org/x/sys v0.0.0-20220412211240-33da011f77ad // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 1.0595703125,
          "content": "github.com/fatih/color v1.7.0 h1:DkWD4oS2D8LGGgTQ6IvwJJXSL5Vp2ffcQg58nFV38Ys=\ngithub.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=\ngithub.com/mattn/go-colorable v0.1.2 h1:/bC9yWikZXAL9uJdulbSfyVNIR3n3trXl+v8+1sx8mU=\ngithub.com/mattn/go-colorable v0.1.2/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-isatty v0.0.8 h1:HLtExJ+uU2HOZ+wI0Tt5DtUDrx8yhUqDcp7fYERX4CE=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220412211240-33da011f77ad h1:ntjMns5wyP/fN65tdBD4g8J5w8n015+iIIs9rtjXkY0=\ngolang.org/x/sys v0.0.0-20220412211240-33da011f77ad/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.1.0 h1:g6Z6vPFA9dYBAF7DWcH6sCcOntplXsDKcliusYijMlw=\ngolang.org/x/term v0.1.0/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\n"
        },
        {
          "name": "spinner.go",
          "type": "blob",
          "size": 15.09375,
          "content": "// Copyright (c) 2021 Brian J. Downs\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Package spinner is a simple package to add a spinner / progress indicator to any terminal application.\npackage spinner\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"math\"\n\t\"os\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\t\"unicode/utf8\"\n\n\t\"github.com/fatih/color\"\n\t\"golang.org/x/term\"\n)\n\n// errInvalidColor is returned when attempting to set an invalid color\nvar errInvalidColor = errors.New(\"invalid color\")\n\n// validColors holds an array of the only colors allowed\nvar validColors = map[string]bool{\n\t// default colors for backwards compatibility\n\t\"black\":   true,\n\t\"red\":     true,\n\t\"green\":   true,\n\t\"yellow\":  true,\n\t\"blue\":    true,\n\t\"magenta\": true,\n\t\"cyan\":    true,\n\t\"white\":   true,\n\n\t// attributes\n\t\"reset\":        true,\n\t\"bold\":         true,\n\t\"faint\":        true,\n\t\"italic\":       true,\n\t\"underline\":    true,\n\t\"blinkslow\":    true,\n\t\"blinkrapid\":   true,\n\t\"reversevideo\": true,\n\t\"concealed\":    true,\n\t\"crossedout\":   true,\n\n\t// foreground text\n\t\"fgBlack\":   true,\n\t\"fgRed\":     true,\n\t\"fgGreen\":   true,\n\t\"fgYellow\":  true,\n\t\"fgBlue\":    true,\n\t\"fgMagenta\": true,\n\t\"fgCyan\":    true,\n\t\"fgWhite\":   true,\n\n\t// foreground Hi-Intensity text\n\t\"fgHiBlack\":   true,\n\t\"fgHiRed\":     true,\n\t\"fgHiGreen\":   true,\n\t\"fgHiYellow\":  true,\n\t\"fgHiBlue\":    true,\n\t\"fgHiMagenta\": true,\n\t\"fgHiCyan\":    true,\n\t\"fgHiWhite\":   true,\n\n\t// background text\n\t\"bgBlack\":   true,\n\t\"bgRed\":     true,\n\t\"bgGreen\":   true,\n\t\"bgYellow\":  true,\n\t\"bgBlue\":    true,\n\t\"bgMagenta\": true,\n\t\"bgCyan\":    true,\n\t\"bgWhite\":   true,\n\n\t// background Hi-Intensity text\n\t\"bgHiBlack\":   true,\n\t\"bgHiRed\":     true,\n\t\"bgHiGreen\":   true,\n\t\"bgHiYellow\":  true,\n\t\"bgHiBlue\":    true,\n\t\"bgHiMagenta\": true,\n\t\"bgHiCyan\":    true,\n\t\"bgHiWhite\":   true,\n}\n\n// returns true if the OS is windows and the WT_SESSION env variable is set.\nvar isWindows = runtime.GOOS == \"windows\"\nvar isWindowsTerminalOnWindows = len(os.Getenv(\"WT_SESSION\")) > 0 && isWindows\n\n// returns a valid color's foreground text color attribute\nvar colorAttributeMap = map[string]color.Attribute{\n\t// default colors for backwards compatibility\n\t\"black\":   color.FgBlack,\n\t\"red\":     color.FgRed,\n\t\"green\":   color.FgGreen,\n\t\"yellow\":  color.FgYellow,\n\t\"blue\":    color.FgBlue,\n\t\"magenta\": color.FgMagenta,\n\t\"cyan\":    color.FgCyan,\n\t\"white\":   color.FgWhite,\n\n\t// attributes\n\t\"reset\":        color.Reset,\n\t\"bold\":         color.Bold,\n\t\"faint\":        color.Faint,\n\t\"italic\":       color.Italic,\n\t\"underline\":    color.Underline,\n\t\"blinkslow\":    color.BlinkSlow,\n\t\"blinkrapid\":   color.BlinkRapid,\n\t\"reversevideo\": color.ReverseVideo,\n\t\"concealed\":    color.Concealed,\n\t\"crossedout\":   color.CrossedOut,\n\n\t// foreground text colors\n\t\"fgBlack\":   color.FgBlack,\n\t\"fgRed\":     color.FgRed,\n\t\"fgGreen\":   color.FgGreen,\n\t\"fgYellow\":  color.FgYellow,\n\t\"fgBlue\":    color.FgBlue,\n\t\"fgMagenta\": color.FgMagenta,\n\t\"fgCyan\":    color.FgCyan,\n\t\"fgWhite\":   color.FgWhite,\n\n\t// foreground Hi-Intensity text colors\n\t\"fgHiBlack\":   color.FgHiBlack,\n\t\"fgHiRed\":     color.FgHiRed,\n\t\"fgHiGreen\":   color.FgHiGreen,\n\t\"fgHiYellow\":  color.FgHiYellow,\n\t\"fgHiBlue\":    color.FgHiBlue,\n\t\"fgHiMagenta\": color.FgHiMagenta,\n\t\"fgHiCyan\":    color.FgHiCyan,\n\t\"fgHiWhite\":   color.FgHiWhite,\n\n\t// background text colors\n\t\"bgBlack\":   color.BgBlack,\n\t\"bgRed\":     color.BgRed,\n\t\"bgGreen\":   color.BgGreen,\n\t\"bgYellow\":  color.BgYellow,\n\t\"bgBlue\":    color.BgBlue,\n\t\"bgMagenta\": color.BgMagenta,\n\t\"bgCyan\":    color.BgCyan,\n\t\"bgWhite\":   color.BgWhite,\n\n\t// background Hi-Intensity text colors\n\t\"bgHiBlack\":   color.BgHiBlack,\n\t\"bgHiRed\":     color.BgHiRed,\n\t\"bgHiGreen\":   color.BgHiGreen,\n\t\"bgHiYellow\":  color.BgHiYellow,\n\t\"bgHiBlue\":    color.BgHiBlue,\n\t\"bgHiMagenta\": color.BgHiMagenta,\n\t\"bgHiCyan\":    color.BgHiCyan,\n\t\"bgHiWhite\":   color.BgHiWhite,\n}\n\n// validColor will make sure the given color is actually allowed.\nfunc validColor(c string) bool {\n\treturn validColors[c]\n}\n\n// Spinner struct to hold the provided options.\ntype Spinner struct {\n\tmu              *sync.RWMutex\n\tDelay           time.Duration                 // Delay is the speed of the indicator\n\tchars           []string                      // chars holds the chosen character set\n\tPrefix          string                        // Prefix is the text preppended to the indicator\n\tSuffix          string                        // Suffix is the text appended to the indicator\n\tFinalMSG        string                        // string displayed after Stop() is called\n\tlastOutputPlain string                        // last character(set) written\n\tLastOutput      string                        // last character(set) written with colors\n\tcolor           func(a ...interface{}) string // default color is white\n\tWriter          io.Writer                     // to make testing better, exported so users have access. Use `WithWriter` to update after initialization.\n\tWriterFile      *os.File                      // writer as file to allow terminal check\n\tactive          bool                          // active holds the state of the spinner\n\tenabled         bool                          // indicates whether the spinner is enabled or not\n\tstopChan        chan struct{}                 // stopChan is a channel used to stop the indicator\n\tHideCursor      bool                          // hideCursor determines if the cursor is visible\n\tPreUpdate       func(s *Spinner)              // will be triggered before every spinner update\n\tPostUpdate      func(s *Spinner)              // will be triggered after every spinner update\n}\n\n// New provides a pointer to an instance of Spinner with the supplied options.\nfunc New(cs []string, d time.Duration, options ...Option) *Spinner {\n\ts := &Spinner{\n\t\tDelay:      d,\n\t\tchars:      cs,\n\t\tcolor:      color.New(color.FgWhite).SprintFunc(),\n\t\tmu:         &sync.RWMutex{},\n\t\tWriter:     color.Output,\n\t\tWriterFile: os.Stdout, // matches color.Output\n\t\tstopChan:   make(chan struct{}, 1),\n\t\tactive:     false,\n\t\tenabled:    true,\n\t\tHideCursor: true,\n\t}\n\n\tfor _, option := range options {\n\t\toption(s)\n\t}\n\n\treturn s\n}\n\n// Option is a function that takes a spinner and applies\n// a given configuration.\ntype Option func(*Spinner)\n\n// Options contains fields to configure the spinner.\ntype Options struct {\n\tColor      string\n\tSuffix     string\n\tFinalMSG   string\n\tHideCursor bool\n}\n\n// WithColor adds the given color to the spinner.\nfunc WithColor(color string) Option {\n\treturn func(s *Spinner) {\n\t\ts.Color(color)\n\t}\n}\n\n// WithSuffix adds the given string to the spinner\n// as the suffix.\nfunc WithSuffix(suffix string) Option {\n\treturn func(s *Spinner) {\n\t\ts.Suffix = suffix\n\t}\n}\n\n// WithFinalMSG adds the given string ot the spinner\n// as the final message to be written.\nfunc WithFinalMSG(finalMsg string) Option {\n\treturn func(s *Spinner) {\n\t\ts.FinalMSG = finalMsg\n\t}\n}\n\n// WithHiddenCursor hides the cursor\n// if hideCursor = true given.\nfunc WithHiddenCursor(hideCursor bool) Option {\n\treturn func(s *Spinner) {\n\t\ts.HideCursor = hideCursor\n\t}\n}\n\n// WithWriter adds the given writer to the spinner. This\n// function should be favored over directly assigning to\n// the struct value. Assumes it is not working on a terminal\n// since it cannot determine from io.Writer. Use WithWriterFile\n// to support terminal checks.\nfunc WithWriter(w io.Writer) Option {\n\treturn func(s *Spinner) {\n\t\ts.mu.Lock()\n\t\ts.Writer = w\n\t\ts.WriterFile = os.Stdout // emulate previous behavior for terminal check\n\t\ts.mu.Unlock()\n\t}\n}\n\n// WithWriterFile adds the given writer to the spinner. This\n// function should be favored over directly assigning to\n// the struct value. Unlike WithWriter, this function allows\n// us to check if displaying to a terminal (enable spinning) or\n// not (disable spinning). Supersedes WithWriter()\nfunc WithWriterFile(f *os.File) Option {\n\treturn func(s *Spinner) {\n\t\ts.mu.Lock()\n\t\ts.Writer = f     // io.Writer for actual writing\n\t\ts.WriterFile = f // file used only for terminal check\n\t\ts.mu.Unlock()\n\t}\n}\n\n// Active will return whether or not the spinner is currently active.\nfunc (s *Spinner) Active() bool {\n\treturn s.active\n}\n\n// Enabled returns whether or not the spinner is enabled.\nfunc (s *Spinner) Enabled() bool {\n\treturn s.enabled\n}\n\n// Enable enables and restarts the spinner\nfunc (s *Spinner) Enable() {\n\ts.enabled = true\n\ts.Restart()\n}\n\n// Disable stops and disables the spinner\nfunc (s *Spinner) Disable() {\n\ts.enabled = false\n\ts.Stop()\n}\n\n// Start will start the indicator.\nfunc (s *Spinner) Start() {\n\ts.mu.Lock()\n\tif s.active || !s.enabled || !isRunningInTerminal(s) {\n\t\ts.mu.Unlock()\n\t\treturn\n\t}\n\tif s.HideCursor && !isWindowsTerminalOnWindows {\n\t\t// hides the cursor\n\t\tfmt.Fprint(s.Writer, \"\\033[?25l\")\n\t}\n\t// Disable colors for simple Windows CMD or Powershell\n\t// as they can not recognize them\n\tif isWindows && !isWindowsTerminalOnWindows {\n\t\tcolor.NoColor = true\n\t}\n\n\ts.active = true\n\ts.mu.Unlock()\n\n\tgo func() {\n\t\tfor {\n\t\t\tfor i := 0; i < len(s.chars); i++ {\n\t\t\t\tselect {\n\t\t\t\tcase <-s.stopChan:\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t\ts.mu.Lock()\n\t\t\t\t\tif !s.active {\n\t\t\t\t\t\ts.mu.Unlock()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif !isWindowsTerminalOnWindows {\n\t\t\t\t\t\ts.erase()\n\t\t\t\t\t}\n\n\t\t\t\t\tif s.PreUpdate != nil {\n\t\t\t\t\t\ts.PreUpdate(s)\n\t\t\t\t\t}\n\n\t\t\t\t\tvar outColor string\n\t\t\t\t\tif isWindows {\n\t\t\t\t\t\tif s.Writer == os.Stderr {\n\t\t\t\t\t\t\toutColor = fmt.Sprintf(\"\\r%s%s%s\", s.Prefix, s.chars[i], s.Suffix)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toutColor = fmt.Sprintf(\"\\r%s%s%s\", s.Prefix, s.color(s.chars[i]), s.Suffix)\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutColor = fmt.Sprintf(\"\\r%s%s%s\", s.Prefix, s.color(s.chars[i]), s.Suffix)\n\t\t\t\t\t}\n\t\t\t\t\toutPlain := fmt.Sprintf(\"\\r%s%s%s\", s.Prefix, s.chars[i], s.Suffix)\n\t\t\t\t\tfmt.Fprint(s.Writer, outColor)\n\t\t\t\t\ts.lastOutputPlain = outPlain\n\t\t\t\t\ts.LastOutput = outColor\n\t\t\t\t\tdelay := s.Delay\n\n\t\t\t\t\tif s.PostUpdate != nil {\n\t\t\t\t\t\ts.PostUpdate(s)\n\t\t\t\t\t}\n\n\t\t\t\t\ts.mu.Unlock()\n\t\t\t\t\ttime.Sleep(delay)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n}\n\n// Stop stops the indicator.\nfunc (s *Spinner) Stop() {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tif s.active {\n\t\ts.active = false\n\t\tif s.HideCursor && !isWindowsTerminalOnWindows {\n\t\t\t// makes the cursor visible\n\t\t\tfmt.Fprint(s.Writer, \"\\033[?25h\")\n\t\t}\n\t\ts.erase()\n\t\tif s.FinalMSG != \"\" {\n\t\t\tif isWindowsTerminalOnWindows {\n\t\t\t\tfmt.Fprint(s.Writer, \"\\r\", s.FinalMSG)\n\t\t\t} else {\n\t\t\t\tfmt.Fprint(s.Writer, s.FinalMSG)\n\t\t\t}\n\t\t}\n\t\ts.stopChan <- struct{}{}\n\t}\n}\n\n// Restart will stop and start the indicator.\nfunc (s *Spinner) Restart() {\n\ts.Stop()\n\ts.Start()\n}\n\n// Reverse will reverse the order of the slice assigned to the indicator.\nfunc (s *Spinner) Reverse() {\n\ts.mu.Lock()\n\tfor i, j := 0, len(s.chars)-1; i < j; i, j = i+1, j-1 {\n\t\ts.chars[i], s.chars[j] = s.chars[j], s.chars[i]\n\t}\n\ts.mu.Unlock()\n}\n\n// Color will set the struct field for the given color to be used. The spinner\n// will need to be explicitly restarted.\nfunc (s *Spinner) Color(colors ...string) error {\n\tcolorAttributes := make([]color.Attribute, len(colors))\n\n\t// Verify colours are valid and place the appropriate attribute in the array\n\tfor index, c := range colors {\n\t\tif !validColor(c) {\n\t\t\treturn errInvalidColor\n\t\t}\n\t\tcolorAttributes[index] = colorAttributeMap[c]\n\t}\n\n\ts.mu.Lock()\n\ts.color = color.New(colorAttributes...).SprintFunc()\n\ts.mu.Unlock()\n\treturn nil\n}\n\n// UpdateSpeed will set the indicator delay to the given value.\nfunc (s *Spinner) UpdateSpeed(d time.Duration) {\n\ts.mu.Lock()\n\ts.Delay = d\n\ts.mu.Unlock()\n}\n\n// UpdateCharSet will change the current character set to the given one.\nfunc (s *Spinner) UpdateCharSet(cs []string) {\n\ts.mu.Lock()\n\ts.chars = cs\n\ts.mu.Unlock()\n}\n\n// erase deletes written characters on the current line.\n// Caller must already hold s.lock.\nfunc (s *Spinner) erase() {\n\tn := utf8.RuneCountInString(s.lastOutputPlain)\n\tif runtime.GOOS == \"windows\" && !isWindowsTerminalOnWindows {\n\t\tclearString := \"\\r\" + strings.Repeat(\" \", n) + \"\\r\"\n\t\tfmt.Fprint(s.Writer, clearString)\n\t\ts.lastOutputPlain = \"\"\n\t\treturn\n\t}\n\n\tnumberOfLinesToErase := computeNumberOfLinesNeededToPrintString(s.lastOutputPlain)\n\n\t// Taken from https://en.wikipedia.org/wiki/ANSI_escape_code:\n\t// \\r     - Carriage return - Moves the cursor to column zero\n\t// \\033[K - Erases part of the line. If n is 0 (or missing), clear from\n\t// cursor to the end of the line. If n is 1, clear from cursor to beginning\n\t// of the line. If n is 2, clear entire line. Cursor position does not\n\t// change.\n\t// \\033[F - Go to the beginning of previous line\n\teraseCodeString := strings.Builder{}\n\t// current position is at the end of the last printed line. Start by erasing current line\n\teraseCodeString.WriteString(\"\\r\\033[K\") // start by erasing current line\n\tfor i := 1; i < numberOfLinesToErase; i++ {\n\t\t// For each additional lines, go up one line and erase it.\n\t\teraseCodeString.WriteString(\"\\033[F\\033[K\")\n\t}\n\tfmt.Fprintf(s.Writer, eraseCodeString.String())\n\ts.lastOutputPlain = \"\"\n}\n\n// Lock allows for manual control to lock the spinner.\nfunc (s *Spinner) Lock() {\n\ts.mu.Lock()\n}\n\n// Unlock allows for manual control to unlock the spinner.\nfunc (s *Spinner) Unlock() {\n\ts.mu.Unlock()\n}\n\n// GenerateNumberSequence will generate a slice of integers at the\n// provided length and convert them each to a string.\nfunc GenerateNumberSequence(length int) []string {\n\tnumSeq := make([]string, length)\n\tfor i := 0; i < length; i++ {\n\t\tnumSeq[i] = strconv.Itoa(i)\n\t}\n\treturn numSeq\n}\n\n// isRunningInTerminal check if the writer file descriptor is a terminal\nfunc isRunningInTerminal(s *Spinner) bool {\n\tfd := s.WriterFile.Fd()\n\treturn term.IsTerminal(int(fd))\n}\n\nfunc computeNumberOfLinesNeededToPrintString(linePrinted string) int {\n\tterminalWidth := math.MaxInt // assume infinity by default to keep behaviour consistent with what we had before\n\tif term.IsTerminal(0) {\n\t\tif width, _, err := term.GetSize(0); err == nil {\n\t\t\tterminalWidth = width\n\t\t}\n\t}\n\treturn computeNumberOfLinesNeededToPrintStringInternal(linePrinted, terminalWidth)\n}\n\n// isAnsiMarker returns if a rune denotes the start of an ANSI sequence\nfunc isAnsiMarker(r rune) bool {\n\treturn r == '\\x1b'\n}\n\n// isAnsiTerminator returns if a rune denotes the end of an ANSI sequence\nfunc isAnsiTerminator(r rune) bool {\n\treturn (r >= 0x40 && r <= 0x5a) || (r == 0x5e) || (r >= 0x60 && r <= 0x7e)\n}\n\n// computeLineWidth returns the displayed width of a line\nfunc computeLineWidth(line string) int {\n\twidth := 0\n\tansi := false\n\n\tfor _, r := range []rune(line) {\n\t\t// increase width only when outside of ANSI escape sequences\n\t\tif ansi || isAnsiMarker(r) {\n\t\t\tansi = !isAnsiTerminator(r)\n\t\t} else {\n\t\t\twidth += utf8.RuneLen(r)\n\t\t}\n\t}\n\n\treturn width\n}\n\nfunc computeNumberOfLinesNeededToPrintStringInternal(linePrinted string, maxLineWidth int) int {\n\tlineCount := 0\n\tfor _, line := range strings.Split(linePrinted, \"\\n\") {\n\t\tlineCount += 1\n\n\t\tlineWidth := computeLineWidth(line)\n\t\tif lineWidth > maxLineWidth {\n\t\t\tlineCount += int(float64(lineWidth) / float64(maxLineWidth))\n\t\t}\n\t}\n\n\treturn lineCount\n}\n"
        },
        {
          "name": "spinner_test.go",
          "type": "blob",
          "size": 8.931640625,
          "content": "// Copyright (c) 2021 Brian J. Downs\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage spinner\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"reflect\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"golang.org/x/term\"\n)\n\nconst baseWait = 3\n\n// syncBuffer\ntype syncBuffer struct {\n\tsync.Mutex\n\tbytes.Buffer\n}\n\n// Write\nfunc (b *syncBuffer) Write(data []byte) (int, error) {\n\tb.Lock()\n\tdefer b.Unlock()\n\treturn b.Buffer.Write(data)\n}\n\n// withOutput\nfunc withOutput(a []string, d time.Duration) (*Spinner, *syncBuffer) {\n\tvar out syncBuffer\n\ts := New(a, d)\n\ts.Writer = &out\n\treturn s, &out\n}\n\n// TestNew verifies that the returned instance is of the proper type\nfunc TestNew(t *testing.T) {\n\tfor i := 0; i < len(CharSets); i++ {\n\t\ts := New(CharSets[i], 1*time.Second)\n\t\tif reflect.TypeOf(s).String() != \"*spinner.Spinner\" {\n\t\t\tt.Errorf(\"New returned incorrect type kind=%d\", i)\n\t\t}\n\t}\n}\n\n// TestStart will verify a spinner can be started\nfunc TestStart(t *testing.T) {\n\ts := New(CharSets[1], 100*time.Millisecond)\n\ts.Color(\"red\")\n\ts.Start()\n\ttime.Sleep(baseWait * time.Second)\n\ts.Stop()\n\ttime.Sleep(100 * time.Millisecond)\n}\n\n// TestActive will verify we can tell when a spinner is running\nfunc TestActive(t *testing.T) {\n\tif fd := os.Stdout.Fd(); !term.IsTerminal(int(fd)) {\n\t\tt.Log(\"not running in a terminal\")\n\t\treturn\n\t}\n\ts := New(CharSets[1], 100*time.Millisecond)\n\tif s.Active() {\n\t\tt.Error(\"expected a new spinner to not be active\")\n\t}\n\ts.Start()\n\tif !s.Active() {\n\t\tt.Error(\"expected a started spinner to be active\")\n\t}\n\ts.Stop()\n\tif s.Active() {\n\t\tt.Error(\"expected a stopped spinner to be active\")\n\t}\n}\n\n// TestStop will verify a spinner can be stopped\nfunc TestStop(t *testing.T) {\n\tp, out := withOutput(CharSets[14], 100*time.Millisecond)\n\tp.Color(\"yellow\")\n\tp.Start()\n\ttime.Sleep(500 * time.Millisecond)\n\tp.Stop()\n\t// because the spinner will print an appropriate number of backspaces before stopping,\n\t// let it complete that sleep\n\ttime.Sleep(100 * time.Millisecond)\n\tout.Lock()\n\tlen1 := out.Len()\n\tout.Unlock()\n\ttime.Sleep(300 * time.Millisecond)\n\tout.Lock()\n\tdefer out.Unlock()\n\tlen2 := out.Len()\n\tif len1 != len2 {\n\t\tt.Errorf(\"expected equal, got %v != %v\", len1, len2)\n\t}\n\tp = nil\n}\n\n// TestRestart will verify a spinner can be stopped and started again\nfunc TestRestart(t *testing.T) {\n\ts, out := withOutput(CharSets[4], 40*time.Millisecond)\n\n\ts.Start()\n\ttime.Sleep(150 * time.Millisecond)\n\ts.Restart()\n\ttime.Sleep(158 * time.Millisecond)\n\ts.Stop()\n\ttime.Sleep(10 * time.Millisecond)\n\n\tresult := out.Bytes()\n\tfirst := result[:len(result)/2]\n\tsecond := result[len(result)/2:]\n\tif !bytes.Equal(first, second) {\n\t\tt.Errorf(\"expected restart output to match initial output. got=%q want=%q\", first, second)\n\t}\n}\n\nfunc TestDisable(t *testing.T) {\n\ts, _ := withOutput(CharSets[4], 100*time.Millisecond)\n\n\ts.Start()\n\ttime.Sleep(150 * time.Millisecond)\n\tif !s.Enabled() {\n\t\tt.Error(\"expected enabled spinner after startup\")\n\t}\n\ttime.Sleep(150 * time.Millisecond)\n\ts.Disable()\n\ttime.Sleep(150 * time.Millisecond)\n\tif s.Enabled() {\n\t\tt.Error(\"expected disabling the spinner works\")\n\t}\n\ttime.Sleep(150 * time.Millisecond)\n\ts.Enable()\n\ttime.Sleep(150 * time.Millisecond)\n\tif !s.Enabled() {\n\t\tt.Error(\"expected enabling the spinner works\")\n\t}\n}\n\n// TestHookFunctions will verify that hook functions works as expected\nfunc TestHookFunctions(t *testing.T) {\n\tif fd := os.Stdout.Fd(); !term.IsTerminal(int(fd)) {\n\t\tt.Log(\"not running in a terminal\")\n\t\treturn\n\t}\n\ts := New(CharSets[4], 50*time.Millisecond)\n\tvar out syncBuffer\n\ts.Writer = &out\n\ts.PreUpdate = func(s *Spinner) {\n\t\tfmt.Fprintf(s.Writer, \"pre-update\")\n\t}\n\ts.PostUpdate = func(s *Spinner) {\n\t\tfmt.Fprintf(s.Writer, \"post-update\")\n\t}\n\n\ts.Start()\n\ts.Color(\"cyan\")\n\ttime.Sleep(200 * time.Millisecond)\n\ts.Stop()\n\ttime.Sleep(50 * time.Millisecond)\n\tout.Lock()\n\tdefer out.Unlock()\n\tresult := out.Bytes()\n\tif !bytes.Contains(result, []byte(\"pre-update\")) {\n\t\tt.Error(\"pre-update failed\")\n\t}\n\n\tif !bytes.Contains(result, []byte(\"post-update\")) {\n\t\tt.Error(\"post-update failed\")\n\t}\n\ts = nil\n}\n\n// TestReverse will verify that the given spinner can stop and start again reversed\nfunc TestReverse(t *testing.T) {\n\ta := New(CharSets[10], 1*time.Second)\n\ta.Color(\"red\")\n\ta.Start()\n\ttime.Sleep(baseWait * time.Second)\n\ta.Reverse()\n\ta.Restart()\n\ttime.Sleep(baseWait * time.Second)\n\ta.Reverse()\n\ta.Restart()\n\ttime.Sleep(baseWait * time.Second)\n\ta.Stop()\n\ta = nil\n}\n\n// TestUpdateSpeed verifies that the delay can be updated\nfunc TestUpdateSpeed(t *testing.T) {\n\ts := New(CharSets[10], 1*time.Second)\n\tdelay1 := s.Delay\n\ts.UpdateSpeed(baseWait * time.Second)\n\tdelay2 := s.Delay\n\tif delay1 == delay2 {\n\t\tt.Error(\"update of speed failed\")\n\t}\n\ts = nil\n}\n\n// TestUpdateCharSet verifies that character sets can be updated\nfunc TestUpdateCharSet(t *testing.T) {\n\ts := New(CharSets[14], 1*time.Second)\n\tcharSet1 := s.chars\n\ts.UpdateCharSet(CharSets[1])\n\tcharSet2 := s.chars\n\tfor i := range charSet1 {\n\t\tif charSet1[i] == charSet2[i] {\n\t\t\tt.Error(\"update of char set failed\")\n\t\t}\n\t}\n\ts = nil\n}\n\n// TestGenerateNumberSequence verifies that a string slice of a spefic size is returned\nfunc TestGenerateNumberSequence(t *testing.T) {\n\telementCount := 100\n\tseq := GenerateNumberSequence(elementCount)\n\tif reflect.TypeOf(seq).String() != \"[]string\" {\n\t\tt.Error(\"received incorrect type in return from GenerateNumberSequence\")\n\t}\n\tt.Log(\"In: \", elementCount)\n\tt.Log(\"Out: \", len(seq))\n\tif len(seq) != elementCount {\n\t\tt.Error(\"number of elements in slice doesn't match expected count\")\n\t}\n}\n\n// TestBackspace proves that the correct number of characters are removed.\nfunc TestBackspace(t *testing.T) {\n\t// Because of buffering of output and time weirdness, somethings\n\t// are broken for an indeterminant reason without a wait\n\ttime.Sleep(75 * time.Millisecond)\n\tfmt.Println()\n\ts := New(CharSets[0], 100*time.Millisecond)\n\ts.Color(\"blue\")\n\ts.Start()\n\tfmt.Print(\"This is on the same line as the spinner: \")\n\ttime.Sleep(baseWait * time.Second)\n\ts.Stop()\n}\n\n// TestColorError tests that if an invalid color string is passed to the Color\n// function, the invalid color error is returned\nfunc TestColorError(t *testing.T) {\n\ts := New(CharSets[0], 100*time.Millisecond)\n\n\tconst invalidColorName = \"bluez\"\n\tconst validColorName = \"green\"\n\n\tif s.Color(invalidColorName) != errInvalidColor {\n\t\tt.Error(\"Color method did not return an error when given an invalid color.\")\n\t}\n\n\tif s.Color(validColorName) != nil {\n\t\tt.Error(\"Color method did not return nil when given a valid color name.\")\n\t}\n}\n\nfunc TestWithWriter(t *testing.T) {\n\ts := New(CharSets[9], time.Millisecond*400, WithWriter(ioutil.Discard))\n\t_ = s\n}\n\nfunc TestComputeNumberOfLinesNeededToPrintStringInternal(t *testing.T) {\n\ttests := []struct {\n\t\tdescription   string\n\t\texpectedCount int\n\t\tprintedLine   string\n\t\tmaxLineWidth  int\n\t}{\n\t\t{\"BlankLine\", 1, \"\", 50},\n\t\t{\"SingleLine\", 1, \"Hello world\", 50},\n\t\t{\"SingleLineANSI\", 1, \"Hello \\x1b[36mworld\\x1b[0m\", 20},\n\t\t{\"MultiLine\", 2, \"Hello\\n world\", 50},\n\t\t{\"MultiLineANSI\", 2, \"Hello\\n \\x1b[1;36mworld\\x1b[0m\", 20},\n\t\t{\"LongString\", 2, \"Hello world! I am a super long string that will be printed in 2 lines\", 50},\n\t\t{\"LongStringWithNewlines\", 4, \"Hello world!\\nI am a super long string that will be printed in 2 lines.\\nAnother new line\", 50},\n\t\t{\"NewlineCharAtStart\", 2, \"\\nHello world!\", 50},\n\t\t{\"NewlineCharAtStartANSI\", 2, \"\\n\\x1b[36mHello\\x1b[0m world!\", 50},\n\t\t{\"NewlineCharAtStartANSIFlipped\", 2, \"\\x1b[36m\\nHello\\x1b[0m world!\", 50},\n\t\t{\"MultipleNewlineCharAtStart\", 4, \"\\n\\n\\nHello world!\", 50},\n\t\t{\"NewlineCharAtEnd\", 2, \"Hello world!\\n\", 50},\n\t\t{\"NewlineCharAtEndANSI\", 2, \"Hello \\x1b[36mworld!\\x1b[0m\\n\", 50},\n\t\t{\"NewlineCharAtEndANSIFlipped\", 2, \"Hello \\x1b[36mworld!\\n\\x1b[0m\", 50},\n\t\t{\"StringExactlySizeOfScreen\", 1, strings.Repeat(\"a\", 50), 50},\n\t\t{\"StringExactlySizeOfScreenANSI\", 1, \"\\x1b[36m\" + strings.Repeat(\"a\", 50), 50},\n\t\t{\"StringOneGreaterThanSizeOfScreen\", 2, strings.Repeat(\"a\", 51), 50},\n\t}\n\n\tfor _, test := range tests {\n\t\tresult := computeNumberOfLinesNeededToPrintStringInternal(test.printedLine,\n\t\t\ttest.maxLineWidth)\n\t\tif result != test.expectedCount {\n\t\t\t// Output error, resetting leftover ANSI sequences\n\t\t\tt.Errorf(\"%s: Line '%s\\x1b[0m' shoud be printed on '%d' line, got '%d'\",\n\t\t\t\ttest.description, test.printedLine, test.expectedCount, result)\n\t\t}\n\t}\n}\n\n/*\nBenchmarks\n*/\n\n// BenchmarkNew runs a benchmark for the New() function\nfunc BenchmarkNew(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\tNew(CharSets[1], 1*time.Second)\n\t}\n}\n\nfunc BenchmarkNewStartStop(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\ts := New(CharSets[1], 1*time.Second)\n\t\ts.Start()\n\t\ts.Stop()\n\t}\n}\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}