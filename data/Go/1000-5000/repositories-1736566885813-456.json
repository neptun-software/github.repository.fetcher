{
  "metadata": {
    "timestamp": 1736566885813,
    "page": 456,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "oliver006/redis_exporter",
      "stars": 3220,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1923828125,
          "content": "redis_exporter\ncoverage.out\ncoverage.txt\ndist/\npkg/\nsrc/\n.build/\n.DS_Store\n.idea\n.vscode/\n*.rdb\ncontrib/tls/ca.crt\ncontrib/tls/ca.key\ncontrib/tls/ca.txt\ncontrib/tls/redis.crt\ncontrib/tls/redis.key\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.35546875,
          "content": "ARG TARGETPLATFORM\n\n#\n# build container\n#\nFROM --platform=$BUILDPLATFORM golang:1.23-alpine AS builder\nWORKDIR /go/src/github.com/oliver006/redis_exporter/\n\nADD . /go/src/github.com/oliver006/redis_exporter/\n\nARG SHA1=\"[no-sha]\"\nARG TAG=\"[no-tag]\"\nARG TARGETOS\nARG TARGETARCH\n\n#RUN printf \"nameserver 1.1.1.1\\nnameserver 8.8.8.8\"> /etc/resolv.conf \\ && apk --no-cache add ca-certificates git\n\nRUN apk --no-cache add ca-certificates git\nRUN BUILD_DATE=$(date +%F-%T) CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -o /redis_exporter \\\n    -ldflags  \"-s -w -extldflags \\\"-static\\\" -X main.BuildVersion=$TAG -X main.BuildCommitSha=$SHA1 -X main.BuildDate=$BUILD_DATE\" .\n\nRUN [ \"$TARGETARCH\" = \"amd64\" ]  && /redis_exporter -version || ls -la /redis_exporter\n\n#\n# scratch release container\n#\nFROM scratch AS scratch-release\n\nCOPY --from=builder /redis_exporter /redis_exporter\nCOPY --from=builder /etc/ssl/certs /etc/ssl/certs\nCOPY --from=builder /etc/nsswitch.conf /etc/nsswitch.conf\n\n# Run as non-root user for secure environments\nUSER 59000:59000\n\nEXPOSE     9121\nENTRYPOINT [ \"/redis_exporter\" ]\n\n\n#\n# Alpine release container\n#\nFROM alpine:3.20 AS alpine\n\nCOPY --from=builder /redis_exporter /redis_exporter\nCOPY --from=builder /etc/ssl/certs /etc/ssl/certs\n\n# Run as non-root user for secure environments\nUSER 59000:59000\n\nEXPOSE     9121\nENTRYPOINT [ \"/redis_exporter\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2016 Oliver\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.748046875,
          "content": ".DEFAULT_GOAL := build\n\nDOCKER_COMPOSE := $(if $(shell which docker-compose),docker-compose,docker compose)\n\n.PHONY: build\nbuild:\n\tgo build .\n\n\n.PHONY: docker-all\ndocker-all: docker-env-up docker-test docker-env-down\n\n\n.PHONY: docker-env-up\ndocker-env-up:\n\t$(DOCKER_COMPOSE) -f docker-compose.yml up -d\n\n\n.PHONY: docker-env-down\ndocker-env-down:\n\t$(DOCKER_COMPOSE) -f docker-compose.yml down\n\n\n.PHONY: docker-test\ndocker-test:\n\t$(DOCKER_COMPOSE) -f docker-compose.yml up -d\n\t$(DOCKER_COMPOSE) -f docker-compose.yml run --rm tests bash -c 'make test'\n\n\n.PHONY: test-certs\ntest-certs:\n\tcontrib/tls/gen-test-certs.sh\n\n\n.PHONY: test\ntest:\n\tTEST_VALKEY7_URI=\"valkey://localhost:16384\" \\\n\tTEST_VALKEY8_URI=\"valkey://localhost:16382\" \\\n\tTEST_VALKEY8_TLS_URI=\"valkeys://localhost:16386\" \\\n\tTEST_REDIS7_TLS_URI=\"rediss://localhost:16387\" \\\n\tTEST_REDIS_URI=\"redis://localhost:16385\" \\\n\tTEST_REDIS7_URI=\"redis://localhost:16385\" \\\n\tTEST_REDIS5_URI=\"redis://localhost:16383\" \\\n\tTEST_REDIS6_URI=\"redis://localhost:16379\" \\\n\tTEST_REDIS_2_8_URI=\"redis://localhost:16381\" \\\n\tTEST_KEYDB01_URI=\"redis://localhost:16401\" \\\n\tTEST_KEYDB02_URI=\"redis://localhost:16402\" \\\n\tTEST_PWD_REDIS_URI=\"redis://:redis-password@localhost:16380\" \\\n\tTEST_USER_PWD_REDIS_URI=\"redis://exporter:exporter-password@localhost:16390\" \\\n\tTEST_REDIS_CLUSTER_MASTER_URI=\"redis://localhost:17000\" \\\n\tTEST_REDIS_CLUSTER_SLAVE_URI=\"redis://localhost:17005\" \\\n\tTEST_REDIS_CLUSTER_PASSWORD_URI=\"redis://localhost:17006\" \\\n\tTEST_TILE38_URI=\"redis://localhost:19851\" \\\n\tTEST_REDIS_SENTINEL_URI=\"redis://localhost:26379\" \\\n\tTEST_REDIS_MODULES_URI=\"redis://localhost:36379\" \\\n\tgo test -v -covermode=atomic -cover -race -coverprofile=coverage.txt -p 1 ./...\n\n.PHONY: lint\nlint:\n\t#\n\t# this will run the default linters on non-test files\n\t# and then all but the \"errcheck\" linters on the tests\n\tgolangci-lint run --tests=false --exclude-use-default\n\tgolangci-lint run -D=errcheck   --exclude-use-default\n\n.PHONY: checks\nchecks:\n\tgo vet ./...\n\techo \"checking gofmt\"\n\t@if [ \"$(shell gofmt -e -l . | wc -l)\" -ne 0 ]; then exit 1; fi\n\techo \"checking gofmt - DONE\"\n\n.PHONY: mixin\nmixin:\n\tcd contrib/redis-mixin && \\\n\t$(MAKE) all && \\\n\tcd ../../\n\n\nBUILD_DT:=$(shell date +%F-%T)\nGO_LDFLAGS:=\"-s -w -extldflags \\\"-static\\\" -X main.BuildVersion=${GITHUB_REF_NAME} -X main.BuildCommitSha=${GITHUB_SHA} -X main.BuildDate=$(BUILD_DT)\"\n\n\n.PHONE: build-some-amd64-binaries\nbuild-some-amd64-binaries:\n\tgo install github.com/oliver006/gox@master\n\n\trm -rf .build | true\n\n\texport CGO_ENABLED=0 ; \\\n\tgox -os=\"linux windows\" -arch=\"amd64\" -verbose -rebuild -ldflags $(GO_LDFLAGS) -output \".build/redis_exporter-${GITHUB_REF_NAME}.{{.OS}}-{{.Arch}}/{{.Dir}}\" && echo \"done\"\n\n\n.PHONE: build-all-binaries\nbuild-all-binaries:\n\tgo install github.com/oliver006/gox@master\n\n\trm -rf .build | true\n\n\texport CGO_ENABLED=0 ; \\\n\tgox -os=\"linux windows freebsd netbsd openbsd\"        -arch=\"amd64 386\" -verbose -rebuild -ldflags $(GO_LDFLAGS) -output \".build/redis_exporter-${GITHUB_REF_NAME}.{{.OS}}-{{.Arch}}/{{.Dir}}\" && \\\n\tgox -os=\"darwin solaris illumos\"                      -arch=\"amd64\"     -verbose -rebuild -ldflags $(GO_LDFLAGS) -output \".build/redis_exporter-${GITHUB_REF_NAME}.{{.OS}}-{{.Arch}}/{{.Dir}}\" && \\\n\tgox -os=\"darwin\"                                      -arch=\"arm64\"     -verbose -rebuild -ldflags $(GO_LDFLAGS) -output \".build/redis_exporter-${GITHUB_REF_NAME}.{{.OS}}-{{.Arch}}/{{.Dir}}\" && \\\n\tgox -os=\"linux freebsd netbsd\"                        -arch=\"arm\"       -verbose -rebuild -ldflags $(GO_LDFLAGS) -output \".build/redis_exporter-${GITHUB_REF_NAME}.{{.OS}}-{{.Arch}}/{{.Dir}}\" && \\\n\tgox -os=\"linux\" -arch=\"arm64 mips64 mips64le ppc64 ppc64le s390x\"       -verbose -rebuild -ldflags $(GO_LDFLAGS) -output \".build/redis_exporter-${GITHUB_REF_NAME}.{{.OS}}-{{.Arch}}/{{.Dir}}\" && \\\n\techo \"done\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 45.2265625,
          "content": "# Prometheus ValKey & Redis Metrics Exporter\n\n[![Build Status](https://drone-github.21zoo.com/api/badges/oliver006/redis_exporter/status.svg)](https://drone-github.21zoo.com/oliver006/redis_exporter)\n [![Coverage Status](https://coveralls.io/repos/github/oliver006/redis_exporter/badge.svg?branch=master)](https://coveralls.io/github/oliver006/redis_exporter?branch=master) [![codecov](https://codecov.io/gh/oliver006/redis_exporter/branch/master/graph/badge.svg)](https://codecov.io/gh/oliver006/redis_exporter) [![docker_pulls](https://img.shields.io/docker/pulls/oliver006/redis_exporter.svg)](https://img.shields.io/docker/pulls/oliver006/redis_exporter.svg) [![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://stand-with-ukraine.pp.ua)\n\nPrometheus exporter for ValKey metrics (Redis-compatible).\\\nSupports ValKey and Redis 2.x, 3.x, 4.x, 5.x, 6.x, and 7.x\n\n#### Ukraine is still suffering from Russian aggression, [please consider supporting Ukraine with a donation](https://www.supportukraine.co/).\n\n[![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg)](https://stand-with-ukraine.pp.ua)\n\n\n## Building and running the exporter\n\n### Build and run locally\n\n```sh\ngit clone https://github.com/oliver006/redis_exporter.git\ncd redis_exporter\ngo build .\n./redis_exporter --version\n```\n\n\n### Pre-build binaries\n\nFor pre-built binaries please take a look at [the releases](https://github.com/oliver006/redis_exporter/releases).\n\n\n### Basic Prometheus Configuration\n\nAdd a block to the `scrape_configs` of your prometheus.yml config file:\n\n```yaml\nscrape_configs:\n  - job_name: redis_exporter\n    static_configs:\n    - targets: ['<<REDIS-EXPORTER-HOSTNAME>>:9121']\n```\n\nand adjust the host name accordingly.\n\n\n### Kubernetes SD configurations\n\nTo have instances in the drop-down as human readable names rather than IPs, it is suggested to use [instance relabelling](https://www.robustperception.io/controlling-the-instance-label).\n\nFor example, if the metrics are being scraped via the pod role, one could add:\n\n```yaml\n          - source_labels: [__meta_kubernetes_pod_name]\n            action: replace\n            target_label: instance\n            regex: (.*redis.*)\n```\n\nas a relabel config to the corresponding scrape config. As per the regex value, only pods with \"redis\" in their name will be relabelled as such.\n\nSimilar approaches can be taken with [other role types](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config) depending on how scrape targets are retrieved.\n\n\n### Prometheus Configuration to Scrape Multiple Redis Hosts\n\nThe Prometheus docs have a [very informative article](https://prometheus.io/docs/guides/multi-target-exporter/) on how multi-target exporters are intended to work.\n\nRun the exporter with the command line flag `--redis.addr=` so it won't try to access the local instance every time the `/metrics` endpoint is scraped. Using below config instead of the /metric endpoint the /scrape endpoint will be used by prometheus. As an example the first target will be queried with this web request:\nhttp://exporterhost:9121/scrape?target=first-redis-host:6379\n\n```yaml\nscrape_configs:\n  ## config for the multiple Redis targets that the exporter will scrape\n  - job_name: 'redis_exporter_targets'\n    static_configs:\n      - targets:\n        - redis://first-redis-host:6379\n        - redis://second-redis-host:6379\n        - redis://second-redis-host:6380\n        - redis://second-redis-host:6381\n    metrics_path: /scrape\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: <<REDIS-EXPORTER-HOSTNAME>>:9121\n\n  ## config for scraping the exporter itself\n  - job_name: 'redis_exporter'\n    static_configs:\n      - targets:\n        - <<REDIS-EXPORTER-HOSTNAME>>:9121\n```\n\nThe Redis instances are listed under `targets`, the Redis exporter hostname is configured via the last relabel_config rule.\\\nIf authentication is needed for the Redis instances then you can set the password via the `--redis.password` command line option of\nthe exporter (this means you can currently only use one password across the instances you try to scrape this way. Use several\nexporters if this is a problem). \\\nYou can also use a json file to supply multiple targets by using `file_sd_configs` like so:\n\n```yaml\n\nscrape_configs:\n  - job_name: 'redis_exporter_targets'\n    file_sd_configs:\n      - files:\n        - targets-redis-instances.json\n    metrics_path: /scrape\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: <<REDIS-EXPORTER-HOSTNAME>>:9121\n\n  ## config for scraping the exporter itself\n  - job_name: 'redis_exporter'\n    static_configs:\n      - targets:\n        - <<REDIS-EXPORTER-HOSTNAME>>:9121\n```\n\nThe `targets-redis-instances.json` should look something like this:\n\n```json\n[\n  {\n    \"targets\": [ \"redis://redis-host-01:6379\", \"redis://redis-host-02:6379\"],\n    \"labels\": { }\n  }\n]\n```\n\nPrometheus uses file watches and all changes to the json file are applied immediately.\n\n\n### Command line flags\n\n| Name                    | Environment Variable Name              | Description|\n|-------------------------|----------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| redis.addr              | REDIS_ADDR                             | Address of the Redis instance, defaults to `redis://localhost:6379`. If TLS is enabled, the address must be like the following `rediss://localhost:6379`                                                                                                                                                                                                                                                                                                                                                                                          |\n| redis.user              | REDIS_USER                             | User name to use for authentication (Redis ACL for Redis 6.0 and newer).                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| redis.password          | REDIS_PASSWORD                         | Password of the Redis instance, defaults to `\"\"` (no password).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| redis.password-file     | REDIS_PASSWORD_FILE                    | Password file of the Redis instance to scrape, defaults to `\"\"` (no password file).                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| check-keys              | REDIS_EXPORTER_CHECK_KEYS              | Comma separated list of key patterns to export value and length/size, eg: `db3=user_count` will export key `user_count` from db `3`. db defaults to `0` if omitted. The key patterns specified with this flag will be found using [SCAN](https://redis.io/commands/scan).  Use this option if you need glob pattern matching; `check-single-keys` is faster for non-pattern keys. Warning: using `--check-keys` to match a very large number of keys can slow down the exporter to the point where it doesn't finish scraping the redis instance. |\n| check-single-keys       | REDIS_EXPORTER_CHECK_SINGLE_KEYS       | Comma separated list of keys to export value and length/size, eg: `db3=user_count` will export key `user_count` from db `3`. db defaults to `0` if omitted.  The keys specified with this flag will be looked up directly without any glob pattern matching.  Use this option if you don't need glob pattern matching;  it is faster than `check-keys`.                                                                                                                                                                                           |\n| check-streams           | REDIS_EXPORTER_CHECK_STREAMS           | Comma separated list of stream-patterns to export info about streams, groups and consumers. Syntax is the same as `check-keys`.                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| check-single-streams    | REDIS_EXPORTER_CHECK_SINGLE_STREAMS    | Comma separated list of streams to export info about streams, groups and consumers. The streams specified with this flag will be looked up directly without any glob pattern matching.  Use this option if you don't need glob pattern matching;  it is faster than `check-streams`.                                                                                                                                                                                                                                                              |\n| streams-exclude-consumer-metrics    | REDIS_EXPORTER_STREAMS_EXCLUDE_CONSUMER_METRICS    | Don't collect per consumer metrics for streams (decreases amount of metrics and cardinality).                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| check-keys-batch-size   | REDIS_EXPORTER_CHECK_KEYS_BATCH_SIZE   | Approximate number of keys to process in each execution. This is basically the COUNT option that will be passed into the SCAN command as part of the execution of the key or key group metrics, see [COUNT option](https://redis.io/commands/scan#the-count-option). Larger value speeds up scanning. Still Redis is a single-threaded app, huge `COUNT` can affect production environment.                                                                                                                                                       |\n| count-keys              | REDIS_EXPORTER_COUNT_KEYS              | Comma separated list of patterns to count, eg: `db3=sessions:*` will count all keys with prefix `sessions:` from db `3`. db defaults to `0` if omitted. Warning: The exporter runs SCAN to count the keys. This might not perform well on large databases.                                                                                                                                                                                                                                                                                        |\n| script                  | REDIS_EXPORTER_SCRIPT                  | Comma separated list of path(s) to Redis Lua script(s) for gathering extra metrics.                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| debug                   | REDIS_EXPORTER_DEBUG                   | Verbose debug output|\n| log-format              | REDIS_EXPORTER_LOG_FORMAT              | Log format, valid options are `txt` (default) and `json`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| namespace               | REDIS_EXPORTER_NAMESPACE               | Namespace for the metrics, defaults to `redis`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| connection-timeout      | REDIS_EXPORTER_CONNECTION_TIMEOUT      | Timeout for connection to Redis instance, defaults to \"15s\" (in Golang duration format)                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| web.listen-address      | REDIS_EXPORTER_WEB_LISTEN_ADDRESS      | Address to listen on for web interface and telemetry, defaults to `0.0.0.0:9121`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| web.telemetry-path      | REDIS_EXPORTER_WEB_TELEMETRY_PATH      | Path under which to expose metrics, defaults to `/metrics`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| redis-only-metrics      | REDIS_EXPORTER_REDIS_ONLY_METRICS      | Whether to also export go runtime metrics, defaults to false.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| include-config-metrics  | REDIS_EXPORTER_INCL_CONFIG_METRICS     | Whether to include all config settings as metrics, defaults to false.                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| include-system-metrics  | REDIS_EXPORTER_INCL_SYSTEM_METRICS     | Whether to include system metrics like `total_system_memory_bytes`, defaults to false.                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| include-modules-metrics | REDIS_EXPORTER_INCL_MODULES_METRICS    | Whether to collect Redis Modules metrics, defaults to false.                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| exclude-latency-histogram-metrics | REDIS_EXPORTER_EXCLUDE_LATENCY_HISTOGRAM_METRICS | Do not try to collect latency histogram metrics (to avoid `WARNING, LOGGED ONCE ONLY: cmd LATENCY HISTOGRAM` error on Redis < v7).                                                                                                                                                                                                                                                                                                                                                                                                                |\n| redact-config-metrics   | REDIS_EXPORTER_REDACT_CONFIG_METRICS   | Whether to redact config settings that include potentially sensitive information like passwords.                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| ping-on-connect         | REDIS_EXPORTER_PING_ON_CONNECT         | Whether to ping the redis instance after connecting and record the duration as a metric, defaults to false.                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| is-tile38               | REDIS_EXPORTER_IS_TILE38               | Whether to scrape Tile38 specific metrics, defaults to false.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| is-cluster              | REDIS_EXPORTER_IS_CLUSTER              | Whether this is a redis cluster (Enable this if you need to fetch key level data on a Redis Cluster).                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| export-client-list      | REDIS_EXPORTER_EXPORT_CLIENT_LIST      | Whether to scrape Client List specific metrics, defaults to false.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| export-client-port      | REDIS_EXPORTER_EXPORT_CLIENT_PORT      | Whether to include the client's port when exporting the client list. Warning: including the port increases the number of metrics generated and will make your Prometheus server take up more memory                                                                                                                                                                                                                                                                                                                                               |\n| skip-tls-verification   | REDIS_EXPORTER_SKIP_TLS_VERIFICATION   | Whether to to skip TLS verification when the exporter connects to a Redis instance                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| tls-client-key-file     | REDIS_EXPORTER_TLS_CLIENT_KEY_FILE     | Name of the client key file (including full path) if the server requires TLS client authentication                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| tls-client-cert-file    | REDIS_EXPORTER_TLS_CLIENT_CERT_FILE    | Name the client cert file (including full path) if the server requires TLS client authentication                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| tls-server-key-file     | REDIS_EXPORTER_TLS_SERVER_KEY_FILE     | Name of the server key file (including full path) if the web interface and telemetry should use TLS                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| tls-server-cert-file    | REDIS_EXPORTER_TLS_SERVER_CERT_FILE    | Name of the server certificate file (including full path) if the web interface and telemetry should use TLS                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| tls-server-ca-cert-file | REDIS_EXPORTER_TLS_SERVER_CA_CERT_FILE | Name of the CA certificate file (including full path) if the web interface and telemetry should use TLS                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| tls-server-min-version  | REDIS_EXPORTER_TLS_SERVER_MIN_VERSION  | Minimum TLS version that is acceptable by the web interface and telemetry when using TLS, defaults to `TLS1.2` (supports `TLS1.0`,`TLS1.1`,`TLS1.2`,`TLS1.3`).                                                                                                                                                                                                                                                                                                                                                                                    |\n| tls-ca-cert-file        | REDIS_EXPORTER_TLS_CA_CERT_FILE        | Name of the CA certificate file (including full path) if the server requires TLS client authentication                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| set-client-name         | REDIS_EXPORTER_SET_CLIENT_NAME         | Whether to set client name to redis_exporter, defaults to true.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| check-key-groups        | REDIS_EXPORTER_CHECK_KEY_GROUPS        | Comma separated list of [LUA regexes](https://www.lua.org/pil/20.1.html) for classifying keys into groups. The regexes are applied in specified order to individual keys, and the group name is generated by concatenating all capture groups of the first regex that matches a key. A key will be tracked under the `unclassified` group if none of the specified regexes matches it.                                                                                                                                                            |\n| max-distinct-key-groups | REDIS_EXPORTER_MAX_DISTINCT_KEY_GROUPS | Maximum number of distinct key groups that can be tracked independently *per Redis database*. If exceeded, only key groups with the highest memory consumption within the limit will be tracked separately, all remaining key groups will be tracked under a single `overflow` key group.                                                                                                                                                                                                                                                         |\n| config-command          | REDIS_EXPORTER_CONFIG_COMMAND          | What to use for the CONFIG command, defaults to `CONFIG`, , set to \"-\" to skip config metrics extraction.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| basic-auth-username     | REDIS_EXPORTER_BASIC_AUTH_USERNAME     | Username for Basic Authentication with the redis exporter needs to be set together with basic-auth-password to be effective\n| basic-auth-password     | REDIS_EXPORTER_BASIC_AUTH_PASSWORD     | Password for Basic Authentication with the redis exporter needs to be set together with basic-auth-username to be effective\n\nRedis instance addresses can be tcp addresses: `redis://localhost:6379`, `redis.example.com:6379` or e.g. unix sockets: `unix:///tmp/redis.sock`.\\\nSSL is supported by using the `rediss://` schema, for example: `rediss://azure-ssl-enabled-host.redis.cache.windows.net:6380` (note that the port is required when connecting to a non-standard 6379 port, e.g. with Azure Redis instances).\\\n\nCommand line settings take precedence over any configurations provided by the environment variables.\n\n\n### Authenticating with Redis\n\nIf your Redis instance requires authentication then there are several ways how you can supply\na username (new in Redis 6.x with ACLs) and a password.\n\nYou can provide the username and password as part of the address, see [here](https://www.iana.org/assignments/uri-schemes/prov/redis) for the official documentation of the `redis://` scheme.\nYou can set `-redis.password-file=sample-pwd-file.json` to specify a password file, it's used whenever the exporter connects to a Redis instance,\nno matter if you're using the `/scrape` endpoint for multiple instances or the normal `/metrics` endpoint when scraping just one instance.\nIt only takes effect when `redis.password == \"\"`.  See the [contrib/sample-pwd-file.json](contrib/sample-pwd-file.json) for a working example, and make sure to always include the `redis://` in your password file entries.\n\nAn example for a URI including a password is: `redis://<<username (optional)>>:<<PASSWORD>>@<<HOSTNAME>>:<<PORT>>`\n\nAlternatively, you can provide the username and/or password using the `--redis.user` and `--redis.password` directly to the redis_exporter.\n\nIf you want to use a dedicated Redis user for the redis_exporter (instead of the default user) then you need enable a list of commands for that user.\nYou can use the following Redis command to set up the user, just replace `<<<USERNAME>>>` and `<<<PASSWORD>>>` with your desired values.\n```\nACL SETUSER <<<USERNAME>>> -@all +@connection +memory -readonly +strlen +config|get +xinfo +pfcount -quit +zcard +type +xlen -readwrite -command +client -wait +scard +llen +hlen +get +eval +slowlog +cluster|info -hello -echo +info +latency +scan -reset -auth -asking ><<<PASSWORD>>>\n```\n\nFor monitoring a Sentinel-node you may use the following command with the right ACL:\n```\nACL SETUSER <<<USERNAME>>> -@all +@connection -command +client -hello +info -auth +sentinel|masters +sentinel|replicas +sentinel|slaves +sentinel|sentinels +sentinel|ckquorum ><<<PASSWORD>>>\n```\n\n### Run via Docker\n\nThe latest release is automatically published to the [Docker registry](https://hub.docker.com/r/oliver006/redis_exporter/).\n\nYou can run it like this:\n\n```sh\ndocker run -d --name redis_exporter -p 9121:9121 oliver006/redis_exporter\n```\n\nDocker images are also published to the [quay.io docker repo](https://quay.io/oliver006/redis_exporter) so you can pull them from there if for instance you run into rate limiting issues with Docker hub.\n\n```sh\ndocker run -d --name redis_exporter -p 9121:9121 quay.io/oliver006/redis_exporter\n```\n\nThe `latest` docker image contains only the exporter binary.\nIf e.g. for debugging purposes, you need the exporter running\nin an image that has a shell then you can run the `alpine` image:\n\n```sh\ndocker run -d --name redis_exporter -p 9121:9121 oliver006/redis_exporter:alpine\n```\n\nIf you try to access a Redis instance running on the host node, you'll need to add `--network host` so the\nredis_exporter container can access it:\n\n```sh\ndocker run -d --name redis_exporter --network host oliver006/redis_exporter\n```\n\n### Run on Kubernetes\n\n[Here](contrib/k8s-redis-and-exporter-deployment.yaml) is an example Kubernetes deployment configuration for how to deploy the redis_exporter as a sidecar to a Redis instance.\n\n\n### Tile38\n\n[Tile38](https://tile38.com) now has native Prometheus support for exporting server metrics and basic stats about number of objects, strings, etc.\nYou can also use redis_exporter to export Tile38 metrics, especially more advanced metrics by using Lua scripts or the `-check-keys` flag.\\\nTo enable Tile38 support, run the exporter with `--is-tile38=true`.\n\n\n## What's exported\n\nMost items from the INFO command are exported,\nsee [Redis documentation](https://redis.io/commands/info) for details.\\\nIn addition, for every database there are metrics for total keys, expiring keys and the average TTL for keys in the database.\\\nYou can also export values of keys by using the `-check-keys` (or related) flag. The exporter will also export the size (or, depending on the data type, the length) of the key.\nThis can be used to export the number of elements in (sorted) sets, hashes, lists, streams, etc.\nIf a key is in string format and matches with `--check-keys` (or related) then its string value will be exported as a label in the `key_value_as_string` metric.\n\nIf you require custom metric collection, you can provide comma separated list of path(s) to [Redis Lua script(s)](https://redis.io/commands/eval) using the `-script` flag. If you pass only one script, you can omit comma. An example can be found [in the contrib folder](./contrib/sample_collect_script.lua).\n\n\n### The redis_memory_max_bytes metric\n\nThe metric `redis_memory_max_bytes`  will show the maximum number of bytes Redis can use.\\\nIt is zero if no memory limit is set for the Redis instance you're scraping (this is the default setting for Redis).\\\nYou can confirm that's the case by checking if the metric `redis_config_maxmemory` is zero or by connecting to the Redis instance via redis-cli and running the command `CONFIG GET MAXMEMORY`.\n\n\n## What it looks like\n\nExample [Grafana](http://grafana.org/) screenshots:\n![redis_exporter_screen_01](https://cloud.githubusercontent.com/assets/1222339/19412031/897549c6-92da-11e6-84a0-b091f9deb81d.png)\n\n![redis_exporter_screen_02](https://cloud.githubusercontent.com/assets/1222339/19412041/dee6d7bc-92da-11e6-84f8-610c025d6182.png)\n\nGrafana dashboard is available on [grafana.com](https://grafana.com/grafana/dashboards/763-redis-dashboard-for-prometheus-redis-exporter-1-x/) and/or [github.com](contrib/grafana_prometheus_redis_dashboard.json).\n\n### Viewing multiple Redis simultaneously\n\nIf running [Redis Sentinel](https://redis.io/topics/sentinel), it may be desirable to view the metrics of the various cluster members simultaneously. For this reason the dashboard's drop down is of the multi-value type, allowing for the selection of multiple Redis. Please note that there is a  caveat; the single stat panels up top namely `uptime`, `total memory use` and `clients` do not function upon viewing multiple Redis.\n\n\n## Using the mixin\nThere is a set of sample rules, alerts and dashboards available in [redis-mixin](contrib/redis-mixin/)\n\n## Upgrading from 0.x to 1.x\n\n[PR #256](https://github.com/oliver006/redis_exporter/pull/256) introduced breaking changes which were released as version v1.0.0.\n\nIf you only scrape one Redis instance and use command line flags `--redis.address`\nand `--redis.password` then you're most probably not affected.\nOtherwise, please see [PR #256](https://github.com/oliver006/redis_exporter/pull/256) and [this README](https://github.com/oliver006/redis_exporter#prometheus-configuration-to-scrape-multiple-redis-hosts) for more information.\n\n## Memory Usage Aggregation by Key Groups\n\nWhen a single Redis instance is used for multiple purposes, it is useful to be able to see how Redis memory is consumed among the different usage scenarios. This is particularly important when a Redis instance with no eviction policy is running low on memory as we want to identify whether certain applications are misbehaving (e.g. not deleting keys that are no longer in use) or the Redis instance needs to be scaled up to handle the increased resource demand. Fortunately, most applications using Redis will employ some sort of naming conventions for keys tied to their specific purpose such as (hierarchical) namespace prefixes which can be exploited by the check-keys, check-single-keys, and count-keys parameters of redis_exporter to surface the memory usage metrics of specific scenarios. *Memory usage aggregation by key groups* takes this one step further by harnessing the flexibility of Redis LUA scripting support to classify all keys on a Redis instance into groups through a list of user-defined [LUA regular expressions](https://www.lua.org/pil/20.1.html) so memory usage metrics can be aggregated into readily identifiable groups.\n\nTo enable memory usage aggregation by key groups, simply specify a non-empty comma-separated list of LUA regular expressions through the `check-key-groups` redis_exporter parameter. On each aggregation of memory metrics by key groups, redis_exporter will set up a `SCAN` cursor through all keys for each Redis database to be processed in batches via a LUA script. Each key batch is then processed by the same LUA script on a key-by-key basis as follows:\n\n  1. The `MEMORY USAGE` command is called to gather memory usage for each key\n  2. The specified LUA regexes are applied to each key in the specified order, and the group name that a given key belongs to will be derived from concatenating the capture groups of the first regex that matches the key. For example, applying the regex `^(.*)_[^_]+$` to the key `key_exp_Nick` would yield a group name of `key_exp`. If none of the specified regexes matches a key, the key will be assigned to the `unclassified` group\n\nOnce a key has been classified, the memory usage and key counter for the corresponding group will be incremented in a local LUA table. This aggregated metrics table will then be returned alongside the next `SCAN` cursor position to redis_exporter when all keys in a batch have been processed, and redis_exporter can aggregate the data from all batches into a single table of grouped memory usage metrics for the Prometheus metrics scrapper.\n\nBesides making the full flexibility of LUA regex available for classifying keys into groups, the LUA script also has the benefit of reducing network traffic by executing all `MEMORY USAGE` commands on the Redis server and returning aggregated data to redis_exporter in a far more compact format than key-level data. The use of `SCAN` cursor over batches of keys processed by a server-side LUA script also helps prevent unbounded latency bubble in Redis's single processing thread, and the batch size can be tailored to specific environments via the `check-keys-batch-size` parameter.\n\nScanning the entire key space of a Redis instance may sound a lttle extravagant, but it takes only a single scan to classify all keys into groups, and on a moderately sized system with ~780K keys and a rather complex list of 17 regexes, it takes an average of ~5s to perform a full aggregation of memory usage by key groups. Of course, the actual performance for specific systems will vary widely depending on the total number of keys, the number and complexity of regexes used for classification, and the configured batch size.\n\nTo protect Prometheus from being overwhelmed by a large number of time series resulting from misconfigured group classification regular expression (e.g. applying the regular expression `^(.*)$` where each key will be classified into its own distinct group), a limit on the number of distinct key groups *per Redis database* can be configured via the `max-distinct-key-groups` parameter. If the `max-distinct-key-groups` limit is exceeded, only the key groups with the highest memory usage within the limit will be tracked separately, remaining key groups will be reported under a single `overflow` key group.\n\nHere is a list of additional metrics that will be exposed when memory usage aggregation by key groups is enabled:\n\n| Name                                               | Labels       | Description                                                                                   |\n|----------------------------------------------------|--------------|-----------------------------------------------------------------------------------------------|\n| redis_key_group_count                              | db,key_group | Number of keys in a key group                                                                 |\n| redis_key_group_memory_usage_bytes                 | db,key_group | Memory usage by key group                                                                     |\n| redis_number_of_distinct_key_groups                | db           | Number of distinct key groups in a Redis database when the `overflow` group is fully expanded |\n| redis_last_key_groups_scrape_duration_milliseconds |              | Duration of the last memory usage aggregation by key groups in milliseconds                   |\n\n### Script to collect Redis lists and respective sizes.\nIf using Redis version < 4.0, most of the helpful metrics which we need to gather based on length or memory is not possible via default redis_exporter.\nWith the help of LUA scripts, we can gather these metrics.\nOne of these scripts [contrib/collect_lists_length_growing.lua](./contrib/collect_lists_length_growing.lua) will help to collect the length of redis lists.\nWith this count, we can take following actions such as Create alerts or dashboards in Grafana or any similar tools with these Prometheus metrics.\n\n## Development\n\nThe tests require a variety of real Redis instances to not only verify correctness of the exporter but also\ncompatibility with older versions of Redis and with Redis-like systems like KeyDB or Tile38.\\\nThe [docker-compose.yml](docker-compose.yml) file has service definitions for\neverything that's needed.\\\nYou can bring up the Redis test instances first by running `make docker-env-up` and then, every time you want to run the tests, you can run `make docker-test`. This will mount the current directory (with the .go source files) into a docker container and kick off the tests.\\\nOnce you're done testing you can bring down the stack by running `make docker-env-down`.\\\nOr you can bring up the stack, run the tests, and then tear down the stack, all in one shot, by running `make docker-all`.\n\n***Note.** Tests initialization can lead to unexpected results when using a persistent testing environment. When `make docker-env-up` is executed once and `make docker-test` is constantly run or stopped during execution, the number of keys in the database changes, which can lead to unexpected failures of tests. Use `make docker-env-down` periodacally to clean up as a workaround.*\n\n## Communal effort\n\nOpen an issue or PR if you have more suggestions, questions or ideas about what to add.\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 2.8125,
          "content": "services:\n\n  redis7:\n    image: redis:7.4\n    command: \"redis-server  --enable-debug-command yes --protected-mode no\"\n    ports:\n      - \"16385:6379\"\n      - \"6379:6379\"\n\n  redis7-tls:\n    image: redis:7.4\n    volumes:\n      - ./contrib/tls:/tls\n    command: |\n      redis-server --enable-debug-command yes --protected-mode no \n      --tls-port 6379 --port 0 \n      --tls-cert-file     /tls/redis.crt \n      --tls-key-file      /tls/redis.key \n      --tls-ca-cert-file  /tls/ca.crt\n    ports:\n      - \"16387:6379\"\n\n  valkey8:\n    image: valkey/valkey:8\n    command: \"valkey-server --enable-debug-command yes --protected-mode no\"\n    ports:\n      - \"16382:6379\"\n\n  valkey8-tls:\n    image: valkey/valkey:8\n    volumes:\n      - ./contrib/tls:/tls\n    command: |\n      valkey-server --enable-debug-command yes --protected-mode no \n      --tls-port 6379 --port 0 \n      --tls-cert-file     /tls/redis.crt \n      --tls-key-file      /tls/redis.key \n      --tls-ca-cert-file  /tls/ca.crt\n    ports:\n      - \"16386:6379\"\n\n  valkey7:\n    image: valkey/valkey:7.2\n    command: \"valkey-server --enable-debug-command yes --protected-mode no\"\n    ports:\n      - \"16384:6379\"\n\n  redis6:\n    image: redis:6.2\n    command: \"redis-server --protected-mode no\"\n    ports:\n      - \"16379:6379\"\n\n  redis5:\n    image: redis:5\n    command: \"redis-server\"\n    ports:\n      - \"16383:6379\"\n\n  pwd-redis5:\n    image: redis:5\n    command: \"redis-server --requirepass redis-password\"\n    ports:\n      - \"16380:6379\"\n\n  pwd-redis6:\n    image: redis:6\n    command: \"redis-server --requirepass dummy --user exporter on +CLIENT +INFO +SELECT +SLOWLOG +LATENCY '>exporter-password'\"\n    ports:\n      - \"16390:6379\"\n\n  redis-2-8:\n    image: redis:2.8\n    command: \"redis-server\"\n    ports:\n      - \"16381:6379\"\n\n  keydb-01:\n    image: \"eqalpha/keydb:x86_64_v6.3.1\"\n    command: \"keydb-server --protected-mode no\"\n    ports:\n      - \"16401:6379\"\n\n  keydb-02:\n    image: \"eqalpha/keydb:x86_64_v6.3.1\"\n    command: \"keydb-server --protected-mode no --active-replica yes --replicaof keydb-01 6379\"\n    ports:\n      - \"16402:6379\"\n\n  redis-cluster:\n    image: grokzen/redis-cluster:6.2.14\n    ports:\n      - \"7000\"\n      - \"7001\"\n      - \"7002\"\n      - \"7003\"\n      - \"7004\"\n      - \"7005\"\n      - \"17000:7000\"\n      - \"17005:7005\"\n\n  redis-cluster-password:\n    image: bitnami/redis-cluster\n    environment:\n      - REDIS_PORT_NUMBER=7006\n      - REDIS_PASSWORD=redis-password\n      - REDIS_CLUSTER_CREATOR=yes\n      - REDIS_NODES=redis-cluster-password:7006\n    ports:\n      - \"17006:7006\"\n\n  redis-sentinel:\n    image: docker.io/bitnami/redis-sentinel:6.2-debian-10\n    environment:\n      - REDIS_MASTER_HOST=redis6\n    ports:\n      - \"26379:26379\"\n\n  tile38:\n    image: tile38/tile38:latest\n    ports:\n      - \"19851:9851\"\n\n  redis-stack:\n    image: redis/redis-stack-server:7.4.0-v0\n    ports:\n      - \"36379:6379\"\n"
        },
        {
          "name": "exporter",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.6572265625,
          "content": "module github.com/oliver006/redis_exporter\n\ngo 1.20\n\nrequire (\n\tgithub.com/gomodule/redigo v1.9.2\n\tgithub.com/mna/redisc v1.4.0\n\tgithub.com/prometheus/client_golang v1.20.5\n\tgithub.com/prometheus/client_model v0.6.1\n\tgithub.com/sirupsen/logrus v1.9.3\n)\n\nrequire (\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/klauspost/compress v1.17.9 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/prometheus/common v0.55.0 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgolang.org/x/sys v0.22.0 // indirect\n\tgoogle.golang.org/protobuf v1.34.2 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.7353515625,
          "content": "github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/gomodule/redigo v1.8.5/go.mod h1:P9dn9mFrCBvWhGE1wpxx6fgq7BAeLBk+UUUzlpkBYO0=\ngithub.com/gomodule/redigo v1.9.2 h1:HrutZBLhSIU8abiSfW8pj8mPhOyMYjZT/wcA4/L9L9s=\ngithub.com/gomodule/redigo v1.9.2/go.mod h1:KsU3hiK/Ay8U42qpaJk+kuNa3C+spxapWpM+ywhcgtw=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2qeMA=\ngithub.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/mna/redisc v1.4.0 h1:rBKXyGO/39SGmYoRKCyzXcBpoMMKqkikg8E1G8YIfSA=\ngithub.com/mna/redisc v1.4.0/go.mod h1:CplIoaSTDi5h9icnj4FLbRgHoNKCHDNJDVRztWDGeSQ=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=\ngithub.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.55.0 h1:KEi6DK7lXW/m7Ig5i47x0vRzuBsHuvJdi5ee6Y3G1dc=\ngithub.com/prometheus/common v0.55.0/go.mod h1:2SECS4xJG1kd8XF9IcM1gMX6510RAEL65zxzNImwdc8=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.22.0 h1:RI27ohtqKCnwULzJLqkv897zojh5/DwS/ENaMzUOaWI=\ngolang.org/x/sys v0.22.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngoogle.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=\ngoogle.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 14.7705078125,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"flag\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"strings\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\tlog \"github.com/sirupsen/logrus\"\n\n\t\"github.com/oliver006/redis_exporter/exporter\"\n)\n\nvar (\n\t/*\n\t\tBuildVersion, BuildDate, BuildCommitSha are filled in by the build script\n\t*/\n\tBuildVersion   = \"<<< filled in by build >>>\"\n\tBuildDate      = \"<<< filled in by build >>>\"\n\tBuildCommitSha = \"<<< filled in by build >>>\"\n)\n\nfunc getEnv(key string, defaultVal string) string {\n\tif envVal, ok := os.LookupEnv(key); ok {\n\t\treturn envVal\n\t}\n\treturn defaultVal\n}\n\nfunc getEnvBool(key string, defaultVal bool) bool {\n\tif envVal, ok := os.LookupEnv(key); ok {\n\t\tenvBool, err := strconv.ParseBool(envVal)\n\t\tif err == nil {\n\t\t\treturn envBool\n\t\t}\n\t}\n\treturn defaultVal\n}\n\nfunc getEnvInt64(key string, defaultVal int64) int64 {\n\tif envVal, ok := os.LookupEnv(key); ok {\n\t\tenvInt64, err := strconv.ParseInt(envVal, 10, 64)\n\t\tif err == nil {\n\t\t\treturn envInt64\n\t\t}\n\t}\n\treturn defaultVal\n}\n\nfunc main() {\n\tvar (\n\t\tredisAddr                      = flag.String(\"redis.addr\", getEnv(\"REDIS_ADDR\", \"redis://localhost:6379\"), \"Address of the Redis instance to scrape\")\n\t\tredisUser                      = flag.String(\"redis.user\", getEnv(\"REDIS_USER\", \"\"), \"User name to use for authentication (Redis ACL for Redis 6.0 and newer)\")\n\t\tredisPwd                       = flag.String(\"redis.password\", getEnv(\"REDIS_PASSWORD\", \"\"), \"Password of the Redis instance to scrape\")\n\t\tredisPwdFile                   = flag.String(\"redis.password-file\", getEnv(\"REDIS_PASSWORD_FILE\", \"\"), \"Password file of the Redis instance to scrape\")\n\t\tnamespace                      = flag.String(\"namespace\", getEnv(\"REDIS_EXPORTER_NAMESPACE\", \"redis\"), \"Namespace for metrics\")\n\t\tcheckKeys                      = flag.String(\"check-keys\", getEnv(\"REDIS_EXPORTER_CHECK_KEYS\", \"\"), \"Comma separated list of key-patterns to export value and length/size, searched for with SCAN\")\n\t\tcheckSingleKeys                = flag.String(\"check-single-keys\", getEnv(\"REDIS_EXPORTER_CHECK_SINGLE_KEYS\", \"\"), \"Comma separated list of single keys to export value and length/size\")\n\t\tcheckKeyGroups                 = flag.String(\"check-key-groups\", getEnv(\"REDIS_EXPORTER_CHECK_KEY_GROUPS\", \"\"), \"Comma separated list of lua regex for grouping keys\")\n\t\tcheckStreams                   = flag.String(\"check-streams\", getEnv(\"REDIS_EXPORTER_CHECK_STREAMS\", \"\"), \"Comma separated list of stream-patterns to export info about streams, groups and consumers, searched for with SCAN\")\n\t\tcheckSingleStreams             = flag.String(\"check-single-streams\", getEnv(\"REDIS_EXPORTER_CHECK_SINGLE_STREAMS\", \"\"), \"Comma separated list of single streams to export info about streams, groups and consumers\")\n\t\tstreamsExcludeConsumerMetrics  = flag.Bool(\"streams-exclude-consumer-metrics\", getEnvBool(\"REDIS_EXPORTER_STREAMS_EXCLUDE_CONSUMER_METRICS\", false), \"Don't collect per consumer metrics for streams (decreases cardinality)\")\n\t\tcountKeys                      = flag.String(\"count-keys\", getEnv(\"REDIS_EXPORTER_COUNT_KEYS\", \"\"), \"Comma separated list of patterns to count (eg: 'db0=production_*,db3=sessions:*'), searched for with SCAN\")\n\t\tcheckKeysBatchSize             = flag.Int64(\"check-keys-batch-size\", getEnvInt64(\"REDIS_EXPORTER_CHECK_KEYS_BATCH_SIZE\", 1000), \"Approximate number of keys to process in each execution, larger value speeds up scanning.\\nWARNING: Still Redis is a single-threaded app, huge COUNT can affect production environment.\")\n\t\tscriptPath                     = flag.String(\"script\", getEnv(\"REDIS_EXPORTER_SCRIPT\", \"\"), \"Comma separated list of path(s) to Redis Lua script(s) for gathering extra metrics\")\n\t\tlistenAddress                  = flag.String(\"web.listen-address\", getEnv(\"REDIS_EXPORTER_WEB_LISTEN_ADDRESS\", \":9121\"), \"Address to listen on for web interface and telemetry.\")\n\t\tmetricPath                     = flag.String(\"web.telemetry-path\", getEnv(\"REDIS_EXPORTER_WEB_TELEMETRY_PATH\", \"/metrics\"), \"Path under which to expose metrics.\")\n\t\tlogFormat                      = flag.String(\"log-format\", getEnv(\"REDIS_EXPORTER_LOG_FORMAT\", \"txt\"), \"Log format, valid options are txt and json\")\n\t\tconfigCommand                  = flag.String(\"config-command\", getEnv(\"REDIS_EXPORTER_CONFIG_COMMAND\", \"CONFIG\"), \"What to use for the CONFIG command, set to \\\"-\\\" to skip config metrics extraction\")\n\t\tconnectionTimeout              = flag.String(\"connection-timeout\", getEnv(\"REDIS_EXPORTER_CONNECTION_TIMEOUT\", \"15s\"), \"Timeout for connection to Redis instance\")\n\t\ttlsClientKeyFile               = flag.String(\"tls-client-key-file\", getEnv(\"REDIS_EXPORTER_TLS_CLIENT_KEY_FILE\", \"\"), \"Name of the client key file (including full path) if the server requires TLS client authentication\")\n\t\ttlsClientCertFile              = flag.String(\"tls-client-cert-file\", getEnv(\"REDIS_EXPORTER_TLS_CLIENT_CERT_FILE\", \"\"), \"Name of the client certificate file (including full path) if the server requires TLS client authentication\")\n\t\ttlsCaCertFile                  = flag.String(\"tls-ca-cert-file\", getEnv(\"REDIS_EXPORTER_TLS_CA_CERT_FILE\", \"\"), \"Name of the CA certificate file (including full path) if the server requires TLS client authentication\")\n\t\ttlsServerKeyFile               = flag.String(\"tls-server-key-file\", getEnv(\"REDIS_EXPORTER_TLS_SERVER_KEY_FILE\", \"\"), \"Name of the server key file (including full path) if the web interface and telemetry should use TLS\")\n\t\ttlsServerCertFile              = flag.String(\"tls-server-cert-file\", getEnv(\"REDIS_EXPORTER_TLS_SERVER_CERT_FILE\", \"\"), \"Name of the server certificate file (including full path) if the web interface and telemetry should use TLS\")\n\t\ttlsServerCaCertFile            = flag.String(\"tls-server-ca-cert-file\", getEnv(\"REDIS_EXPORTER_TLS_SERVER_CA_CERT_FILE\", \"\"), \"Name of the CA certificate file (including full path) if the web interface and telemetry should require TLS client authentication\")\n\t\ttlsServerMinVersion            = flag.String(\"tls-server-min-version\", getEnv(\"REDIS_EXPORTER_TLS_SERVER_MIN_VERSION\", \"TLS1.2\"), \"Minimum TLS version that is acceptable by the web interface and telemetry when using TLS\")\n\t\tmaxDistinctKeyGroups           = flag.Int64(\"max-distinct-key-groups\", getEnvInt64(\"REDIS_EXPORTER_MAX_DISTINCT_KEY_GROUPS\", 100), \"The maximum number of distinct key groups with the most memory utilization to present as distinct metrics per database, the leftover key groups will be aggregated in the 'overflow' bucket\")\n\t\tisDebug                        = flag.Bool(\"debug\", getEnvBool(\"REDIS_EXPORTER_DEBUG\", false), \"Output verbose debug information\")\n\t\tsetClientName                  = flag.Bool(\"set-client-name\", getEnvBool(\"REDIS_EXPORTER_SET_CLIENT_NAME\", true), \"Whether to set client name to redis_exporter\")\n\t\tisTile38                       = flag.Bool(\"is-tile38\", getEnvBool(\"REDIS_EXPORTER_IS_TILE38\", false), \"Whether to scrape Tile38 specific metrics\")\n\t\tisCluster                      = flag.Bool(\"is-cluster\", getEnvBool(\"REDIS_EXPORTER_IS_CLUSTER\", false), \"Whether this is a redis cluster (Enable this if you need to fetch key level data on a Redis Cluster).\")\n\t\texportClientList               = flag.Bool(\"export-client-list\", getEnvBool(\"REDIS_EXPORTER_EXPORT_CLIENT_LIST\", false), \"Whether to scrape Client List specific metrics\")\n\t\texportClientPort               = flag.Bool(\"export-client-port\", getEnvBool(\"REDIS_EXPORTER_EXPORT_CLIENT_PORT\", false), \"Whether to include the client's port when exporting the client list. Warning: including the port increases the number of metrics generated and will make your Prometheus server take up more memory\")\n\t\tshowVersion                    = flag.Bool(\"version\", false, \"Show version information and exit\")\n\t\tredisMetricsOnly               = flag.Bool(\"redis-only-metrics\", getEnvBool(\"REDIS_EXPORTER_REDIS_ONLY_METRICS\", false), \"Whether to also export go runtime metrics\")\n\t\tpingOnConnect                  = flag.Bool(\"ping-on-connect\", getEnvBool(\"REDIS_EXPORTER_PING_ON_CONNECT\", false), \"Whether to ping the redis instance after connecting\")\n\t\tinclConfigMetrics              = flag.Bool(\"include-config-metrics\", getEnvBool(\"REDIS_EXPORTER_INCL_CONFIG_METRICS\", false), \"Whether to include all config settings as metrics\")\n\t\tinclModulesMetrics             = flag.Bool(\"include-modules-metrics\", getEnvBool(\"REDIS_EXPORTER_INCL_MODULES_METRICS\", false), \"Whether to collect Redis Modules metrics\")\n\t\tdisableExportingKeyValues      = flag.Bool(\"disable-exporting-key-values\", getEnvBool(\"REDIS_EXPORTER_DISABLE_EXPORTING_KEY_VALUES\", false), \"Whether to disable values of keys stored in redis as labels or not when using check-keys/check-single-key\")\n\t\texcludeLatencyHistogramMetrics = flag.Bool(\"exclude-latency-histogram-metrics\", getEnvBool(\"REDIS_EXPORTER_EXCLUDE_LATENCY_HISTOGRAM_METRICS\", false), \"Do not try to collect latency histogram metrics\")\n\t\tredactConfigMetrics            = flag.Bool(\"redact-config-metrics\", getEnvBool(\"REDIS_EXPORTER_REDACT_CONFIG_METRICS\", true), \"Whether to redact config settings that include potentially sensitive information like passwords\")\n\t\tinclSystemMetrics              = flag.Bool(\"include-system-metrics\", getEnvBool(\"REDIS_EXPORTER_INCL_SYSTEM_METRICS\", false), \"Whether to include system metrics like e.g. redis_total_system_memory_bytes\")\n\t\tskipTLSVerification            = flag.Bool(\"skip-tls-verification\", getEnvBool(\"REDIS_EXPORTER_SKIP_TLS_VERIFICATION\", false), \"Whether to to skip TLS verification\")\n\t\tbasicAuthUsername              = flag.String(\"basic-auth-username\", getEnv(\"REDIS_EXPORTER_BASIC_AUTH_USERNAME\", \"\"), \"Username for basic authentication\")\n\t\tbasicAuthPassword              = flag.String(\"basic-auth-password\", getEnv(\"REDIS_EXPORTER_BASIC_AUTH_PASSWORD\", \"\"), \"Password for basic authentication\")\n\t)\n\tflag.Parse()\n\n\tswitch *logFormat {\n\tcase \"json\":\n\t\tlog.SetFormatter(&log.JSONFormatter{})\n\tdefault:\n\t\tlog.SetFormatter(&log.TextFormatter{})\n\t}\n\tif *showVersion {\n\t\tlog.SetOutput(os.Stdout)\n\t}\n\tlog.Printf(\"Redis Metrics Exporter %s    build date: %s    sha1: %s    Go: %s    GOOS: %s    GOARCH: %s\",\n\t\tBuildVersion, BuildDate, BuildCommitSha,\n\t\truntime.Version(),\n\t\truntime.GOOS,\n\t\truntime.GOARCH,\n\t)\n\tif *showVersion {\n\t\treturn\n\t}\n\tif *isDebug {\n\t\tlog.SetLevel(log.DebugLevel)\n\t\tlog.Debugln(\"Enabling debug output\")\n\t} else {\n\t\tlog.SetLevel(log.InfoLevel)\n\t}\n\n\tto, err := time.ParseDuration(*connectionTimeout)\n\tif err != nil {\n\t\tlog.Fatalf(\"Couldn't parse connection timeout duration, err: %s\", err)\n\t}\n\n\tpasswordMap := make(map[string]string)\n\tif *redisPwd == \"\" && *redisPwdFile != \"\" {\n\t\tpasswordMap, err = exporter.LoadPwdFile(*redisPwdFile)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error loading redis passwords from file %s, err: %s\", *redisPwdFile, err)\n\t\t}\n\t}\n\n\tvar ls map[string][]byte\n\tif *scriptPath != \"\" {\n\t\tscripts := strings.Split(*scriptPath, \",\")\n\t\tls = make(map[string][]byte, len(scripts))\n\t\tfor _, script := range scripts {\n\t\t\tif ls[script], err = os.ReadFile(script); err != nil {\n\t\t\t\tlog.Fatalf(\"Error loading script file %s    err: %s\", script, err)\n\t\t\t}\n\t\t}\n\t}\n\n\tregistry := prometheus.NewRegistry()\n\tif !*redisMetricsOnly {\n\t\tregistry = prometheus.DefaultRegisterer.(*prometheus.Registry)\n\t}\n\n\texp, err := exporter.NewRedisExporter(\n\t\t*redisAddr,\n\t\texporter.Options{\n\t\t\tUser:                           *redisUser,\n\t\t\tPassword:                       *redisPwd,\n\t\t\tPasswordMap:                    passwordMap,\n\t\t\tNamespace:                      *namespace,\n\t\t\tConfigCommandName:              *configCommand,\n\t\t\tCheckKeys:                      *checkKeys,\n\t\t\tCheckSingleKeys:                *checkSingleKeys,\n\t\t\tCheckKeysBatchSize:             *checkKeysBatchSize,\n\t\t\tCheckKeyGroups:                 *checkKeyGroups,\n\t\t\tMaxDistinctKeyGroups:           *maxDistinctKeyGroups,\n\t\t\tCheckStreams:                   *checkStreams,\n\t\t\tCheckSingleStreams:             *checkSingleStreams,\n\t\t\tStreamsExcludeConsumerMetrics:  *streamsExcludeConsumerMetrics,\n\t\t\tCountKeys:                      *countKeys,\n\t\t\tLuaScript:                      ls,\n\t\t\tInclSystemMetrics:              *inclSystemMetrics,\n\t\t\tInclConfigMetrics:              *inclConfigMetrics,\n\t\t\tDisableExportingKeyValues:      *disableExportingKeyValues,\n\t\t\tExcludeLatencyHistogramMetrics: *excludeLatencyHistogramMetrics,\n\t\t\tRedactConfigMetrics:            *redactConfigMetrics,\n\t\t\tSetClientName:                  *setClientName,\n\t\t\tIsTile38:                       *isTile38,\n\t\t\tIsCluster:                      *isCluster,\n\t\t\tInclModulesMetrics:             *inclModulesMetrics,\n\t\t\tExportClientList:               *exportClientList,\n\t\t\tExportClientsInclPort:          *exportClientPort,\n\t\t\tSkipTLSVerification:            *skipTLSVerification,\n\t\t\tClientCertFile:                 *tlsClientCertFile,\n\t\t\tClientKeyFile:                  *tlsClientKeyFile,\n\t\t\tCaCertFile:                     *tlsCaCertFile,\n\t\t\tConnectionTimeouts:             to,\n\t\t\tMetricsPath:                    *metricPath,\n\t\t\tRedisMetricsOnly:               *redisMetricsOnly,\n\t\t\tPingOnConnect:                  *pingOnConnect,\n\t\t\tRedisPwdFile:                   *redisPwdFile,\n\t\t\tRegistry:                       registry,\n\t\t\tBuildInfo: exporter.BuildInfo{\n\t\t\t\tVersion:   BuildVersion,\n\t\t\t\tCommitSha: BuildCommitSha,\n\t\t\t\tDate:      BuildDate,\n\t\t\t},\n\t\t\tBasicAuthUsername: *basicAuthUsername,\n\t\t\tBasicAuthPassword: *basicAuthPassword,\n\t\t},\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Verify that initial client keypair and CA are accepted\n\tif (*tlsClientCertFile != \"\") != (*tlsClientKeyFile != \"\") {\n\t\tlog.Fatal(\"TLS client key file and cert file should both be present\")\n\t}\n\t_, err = exp.CreateClientTLSConfig()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tlog.Infof(\"Providing metrics at %s%s\", *listenAddress, *metricPath)\n\tlog.Debugf(\"Configured redis addr: %#v\", *redisAddr)\n\tserver := &http.Server{\n\t\tAddr:    *listenAddress,\n\t\tHandler: exp,\n\t}\n\tgo func() {\n\t\tif *tlsServerCertFile != \"\" && *tlsServerKeyFile != \"\" {\n\t\t\tlog.Debugf(\"Bind as TLS using cert %s and key %s\", *tlsServerCertFile, *tlsServerKeyFile)\n\n\t\t\ttlsConfig, err := exp.CreateServerTLSConfig(*tlsServerCertFile, *tlsServerKeyFile, *tlsServerCaCertFile, *tlsServerMinVersion)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\tserver.TLSConfig = tlsConfig\n\t\t\tif err := server.ListenAndServeTLS(\"\", \"\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\t\tlog.Fatalf(\"TLS Server error: %v\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tif err := server.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\t\tlog.Fatalf(\"Server error: %v\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\t// graceful shutdown\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)\n\t_quit := <-quit\n\tlog.Infof(\"Received %s signal, exiting\", _quit.String())\n\t// Create a context with a timeout\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\t// Shutdown the HTTP server gracefully\n\tif err := server.Shutdown(ctx); err != nil {\n\t\tlog.Fatalf(\"Server shutdown failed: %v\", err)\n\t}\n\tlog.Infof(\"Server shut down gracefully\")\n}\n"
        },
        {
          "name": "package-github-binaries.sh",
          "type": "blob",
          "size": 0.5439453125,
          "content": "#!/usr/bin/env bash\n\nset -u -e -o pipefail\n\nmkdir -p dist\n\nfor build in $(ls .build); do\n  echo \"Creating archive for ${build}\"\n\n  cp LICENSE README.md \".build/${build}/\"\n\n  if [[ \"${build}\" =~ windows-.*$ ]] ; then\n\n    # Make sure to clear out zip files to prevent zip from appending to the archive.\n    rm \"dist/${build}.zip\" || true\n    cd \".build/\" && zip -r --quiet -9 \"../dist/${build}.zip\" \"${build}\" && cd ../\n  else\n    tar -C \".build/\" -czf \"dist/${build}.tar.gz\" \"${build}\"\n  fi\ndone\n\ncd dist\nsha256sum *.gz *.zip > sha256sums.txt\nls -la\ncd ..\n\n"
        }
      ]
    }
  ]
}