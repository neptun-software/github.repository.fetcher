{
  "metadata": {
    "timestamp": 1736566658940,
    "page": 211,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "anthonynsimon/bild",
      "stars": 4032,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.521484375,
          "content": "# OS files\n.DS_Store\n\n# Visual Studio Code files\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n\n#Jetbrains project files\n.idea/\n\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Dist\ndist\nbild\n\n# Tmp files\ntmp"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.169921875,
          "content": "# Changelog\n\n## next\n- \n\n## 0.14.0\n- transform: reduce amount of calls to cos/sin by @sbinet in https://github.com/anthonynsimon/bild/pull/92\n- Fix: forward compat go mod by @anthonynsimon in https://github.com/anthonynsimon/bild/pull/102\n- Bump golang.org/x/image from 0.5.0 to 0.18.0 by @dependabot in https://github.com/anthonynsimon/bild/pull/101\n- Bump golang.org/x/image from 0.0.0-20190703141733-d6a02ce849c9 to 0.5.0 by @dependabot in https://github.com/anthonynsimon/bild/pull/96\n\n## 0.13.0\n- [PR-85:](https://github.com/anthonynsimon/bild/pull/85) Up to 20% less allocations and 90% less bytes allocated.\n- Minor documentation improvements.\n\n## 0.12.0\n- [PR-74:](https://github.com/anthonynsimon/bild/pull/74) Add Perlin noise function\n- [PR-77:](https://github.com/anthonynsimon/bild/pull/77) Performance improvements for the image adjustment function\n- [PR-81:](https://github.com/anthonynsimon/bild/pull/81) Make blend() exported to allow for custom blending implementations\n- [PR-82:](https://github.com/anthonynsimon/bild/pull/82) Fix rotate panic\n- Minor additional fixes and documentation improvements.\n\n## 0.11.1\n- [PR-71:](https://github.com/anthonynsimon/bild/pull/71) Gaussian blur is up to ~20x faster.\n\n## 0.11.0\n- bild now comes with a built-in CLI\n- Added extract multiple channels functionality\n- Minor fixes and performance improvements\n\n## 0.10.0\n- New feature effect.UnsharpMask\n- Changed paint.FloodFill fuzz parameter to tolerance based. This is a - breaking change.\n\n\n## 0.9.0\n- New feature paint.FloodFill\n- New feature transform.Translate\n\n## 0.8.7\n- Significant performance optimisations for Resize, Rotate, Convolve and Spatial Filtering functions. Most effects and blurs are indirectly benefited from this.\n\n## 0.7.0\n- New feature transform.Shear\n- New feature adjust.Hue and adjust.Saturation\n- New features effect.Dilate and effect.Erode\n\n## 0.6.0\n- New noise package, now you can generate Binary, Uniform and Gaussian noise (colored and monochrome).\n\n## 0.5.0\n- Major code refactor. Breaking changes as all APIs have been decentralised into sub-packages.\n\n## 0.4.0\n- Initial open source release.\n- Release before major code refactor. Package bild contains all APIs in this release.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.5048828125,
          "content": "# Contributing\nWant to hack on the project? Any kind of contribution is welcome!\nSimply follow the next steps:\n\n- Fork the project.\n- Create a new branch.\n- Make your changes and write tests when practical.\n- Commit your changes to the new branch.\n- Send a pull request, it will be reviewed shortly.\n\nIn case you want to add a feature, please create a new issue and briefly explain what the feature would consist of. For bugs or requests, before creating an issue please check if one has already been created for it.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2016-2024 Anthony Simon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.1044921875,
          "content": "PKG = github.com/anthonynsimon/bild\nVERSION ?= dev\nLDFLAGS = -ldflags \"-X $(PKG)/cmd.Version=$(VERSION) -extldflags \\\"-static\\\"\"\nMAC_LDFLAGS = -ldflags \"-X $(PKG)/cmd.Version=$(VERSION)\"\n\ndeps:\n\tgo get ./...\n\ninstall:\n\tgo install $(MAC_LDFLAGS)\n\ntest: deps\n\tgo test ./... -timeout 60s $(LDFLAGS) -v\n\ncover: deps\n\tgo test ./... -race -v -timeout 15s -coverprofile=coverage.out\n\tgo tool cover -html=coverage.out\n\nfmt:\n\tgo fmt ./...\n\nbench: deps\n\tgo test $(LDFLAGS) -benchmem -bench=. -benchtime=5s ./...\n\nrace: deps\n\tgo test ./... -v -race -timeout 15s\n\nrelease: release-x64 release-mac\n\nensure-dist: deps\n\tmkdir -p dist\n\nrelease-bin: ensure-dist\n\tGOOS=linux GOARCH=amd64 go build -o dist/bild $(LDFLAGS)\n\nrelease-x64: ensure-dist\n\tGOOS=linux GOARCH=amd64 go build -o dist/bild $(LDFLAGS) && cd dist && tar -czf bild_$(VERSION)_x64.tar.gz bild && rm bild\n\nrelease-x86: ensure-dist\n\tGOOS=linux GOARCH=386 go build -o dist/bild $(LDFLAGS) && cd dist && tar -czf bild_$(VERSION)_x86.tar.gz bild && rm bild\n\nrelease-mac: ensure-dist\n\tgo build $(MAC_LDFLAGS) -o dist/bild && cd dist && tar -czf bild_$(VERSION)_mac.tar.gz bild && rm bild\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4970703125,
          "content": "# bild\n\n![bild logo](assets/img/logo.png)  \n\n[![MIT License](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/anthonynsimon/bild/blob/master/LICENSE)\n[![GoDoc](https://godoc.org/github.com/anthonynsimon/bild?status.svg)](https://godoc.org/github.com/anthonynsimon/bild)\n[![Go Report Card](https://goreportcard.com/badge/github.com/anthonynsimon/bild)](https://goreportcard.com/report/github.com/anthonynsimon/bild)\n\nA collection of parallel image processing algorithms in pure Go.\n\nThe aim of this project is simplicity in use and development over absolute high performance, but most algorithms are designed to be efficient and make use of parallelism when available.\n\nIt uses packages from the standard library whenever possible to reduce dependency use and development abstractions.\n\nAll operations return image types from the standard library.\n \n## Documentation\nThe documentation for the various packages is available [here](https://pkg.go.dev/mod/github.com/anthonynsimon/bild?tab=packages).\n\n\n## CLI usage\n\nDownload and compile from sources:\n```\ngo get github.com/anthonynsimon/bild\n```\n\nOr get the pre-compiled binaries for your platform on the [releases page](https://github.com/anthonynsimon/bild/releases)\n\n\n```\nbild\n\nA collection of parallel image processing algorithms in pure Go\n\nUsage:\n  bild [command]\n\nAvailable Commands:\n  adjust      adjust basic image features like brightness or contrast\n  blend       blend two images together\n  blur        blur an image using the specified method\n  channel     channel operations on images\n  effect      apply effects on images\n  help        Help about any command\n  histogram   histogram operations on images\n  imgio       i/o operations on images\n  noise       noise generators\n  segment     segment an image using the specified method\n\nFlags:\n  -h, --help      help for bild\n      --version   version for bild\n\nUse \"bild [command] --help\" for more information about a command.\n```\n\nFor example, to apply a median effect with a radius of 1.5 on the image `input.png`, writing the result into a new file called `output.png`:\n```\nbild effect median --radius 1.5 input.png output.png\n```\n\n\n## Install package\n\nbild requires Go version 1.11 or greater.\n\n```bash\ngo get github.com/anthonynsimon/bild/...\n```\n\n## Basic package usage example:\n```go\npackage main\n\nimport (\n    \"github.com/anthonynsimon/bild/effect\"\n    \"github.com/anthonynsimon/bild/imgio\"\n    \"github.com/anthonynsimon/bild/transform\"\n)\n\nfunc main() {\n    img, err := imgio.Open(\"input.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    inverted := effect.Invert(img)\n    resized := transform.Resize(inverted, 800, 800, transform.Linear)\n    rotated := transform.Rotate(resized, 45, nil)\n\n    if err := imgio.Save(\"output.png\", rotated, imgio.PNGEncoder()); err != nil {\n        fmt.Println(err)\n        return\n    }\n}\n```\n\n# Output examples\n## Adjustment\n    import \"github.com/anthonynsimon/bild/adjust\"\n\n### Brightness\n    result := adjust.Brightness(img, 0.25)\n\n![example](assets/img/brightness.jpg)  \n\n### Contrast\n    result := adjust.Contrast(img, -0.5)\n\n![example](assets/img/contrast.jpg)  \n\n### Gamma\n    result := adjust.Gamma(img, 2.2)\n\n![example](assets/img/gamma.jpg)  \n\n\n### Hue\n    result := adjust.Hue(img, -42)\n\n![example](assets/img/hue.jpg)  \n\n### Saturation\n    result := adjust.Saturation(img, 0.5)\n\n![example](assets/img/saturation.jpg)  \n\n\n\n## Blend modes\n    import \"github.com/anthonynsimon/bild/blend\"\n\n    result := blend.Multiply(bg, fg)\n\n| Add | Color Burn | Color Dodge |\n| :----------: | :---------: | :------: |\n| ![](assets/img/add.jpg) | ![](assets/img/colorburn.jpg) | ![](assets/img/colordodge.jpg) |\n| **Darken** | **Difference** | **Divide** |\n| ![](assets/img/darken.jpg) | ![](assets/img/difference.jpg) | ![](assets/img/divide.jpg) |\n| **Exclusion** | **Lighten** | **Linear Burn** |\n| ![](assets/img/exclusion.jpg) | ![](assets/img/lighten.jpg) | ![](assets/img/linearburn.jpg) |\n| **Linear Light** | **Multiply** | **Normal** |\n| ![](assets/img/linearlight.jpg) | ![](assets/img/multiply.jpg) | ![](assets/img/normal.jpg) |\n| **Opacity** | **Overlay** | **Screen** |\n| ![](assets/img/opacity.jpg) | ![](assets/img/overlay.jpg) | ![](assets/img/screen.jpg) |\n| **Soft Light** | **Subtract** | |\n| ![](assets/img/softlight.jpg) | ![](assets/img/subtract.jpg) | |\n\n\n## Blur\n    import \"github.com/anthonynsimon/bild/blur\"\n\n### Box Blur\n    result := blur.Box(img, 3.0)\n\n![example](assets/img/boxblur.jpg)  \n\n\n### Gaussian Blur\n    result := blur.Gaussian(img, 3.0)\n\n\n![example](assets/img/gaussianblur.jpg)  \n\n\n## Channel\n    import \"github.com/anthonynsimon/bild/channel\"\n\n### Extract Channels\n    result := channel.Extract(img, channel.Alpha)\n\n![example](assets/img/extractchannel.jpg)\n\n### Extract Multiple Channels\n    result := channel.ExtractMultiple(img, channel.Red, channel.Alpha)\n\n## Effect\n    import \"github.com/anthonynsimon/bild/effect\"\n\n### Dilate\n    result := effect.Dilate(img, 3)\n\n![example](assets/img/dilate.jpg)     \n\n### Edge Detection\n    result := effect.EdgeDetection(img, 1.0)\n\n![example](assets/img/edgedetection.jpg)  \n\n### Emboss\n    result := effect.Emboss(img)\n\n![example](assets/img/emboss.jpg)  \n\n### Erode\n    result := effect.Erode(img, 3)\n\n![example](assets/img/erode.jpg)   \n\n### Grayscale\n    result := effect.Grayscale(img)\n\n![example](assets/img/grayscale.jpg)  \n\n### Invert\n    result := effect.Invert(img)\n\n![example](assets/img/invert.jpg)  \n\n### Median\n    result := effect.Median(img, 10.0)\n\n![example](assets/img/median.jpg)  \n\n### Sepia\n    result := effect.Sepia(img)\n\n![example](assets/img/sepia.jpg)  \n\n### Sharpen\n    result := effect.Sharpen(img)\n\n![example](assets/img/sharpen.jpg)  \n\n### Sobel\n    result := effect.Sobel(img)\n\n![example](assets/img/sobel.jpg)  \n\n### Unsharp Mask\n    result := effect.UnsharpMask(img, 0.6, 1.2)\n\n![example](assets/img/unsharpmask.jpg)  \n\n\n## Histogram\n    import \"github.com/anthonynsimon/bild/histogram\"\n\n### RGBA Histogram\n    hist := histogram.NewRGBAHistogram(img)\n    result := hist.Image()\n\n![example](assets/img/histogram.png)  \n\n\n## Noise\n    import \"github.com/anthonynsimon/bild/noise\"\n\n### Uniform colored\n    result := noise.Generate(280, 280, &noise.Options{Monochrome: false, NoiseFn: noise.Uniform})\n\n![example](assets/img/noiseuniform.jpg)  \n\n\n### Binary monochrome\n    result := noise.Generate(280, 280, &noise.Options{Monochrome: true, NoiseFn: noise.Binary})\n\n![example](assets/img/noisebinary.jpg)  \n\n\n### Gaussian monochrome\n    result := noise.Generate(280, 280, &noise.Options{Monochrome: true, NoiseFn: noise.Gaussian})\n\n![example](assets/img/noisegaussian.jpg)  \n\n### Perlin Noise \n    result := noise.GeneratePerlin(280, 280, 0.25)\n![example](assets/img/perlin.jpg)  \n\n## Paint\n    import \"github.com/anthonynsimon/bild/paint\"\n\n### Flood Fill\n    // Fuzz is the percentage of maximum color distance that is tolerated\n    result := paint.FloodFill(img, image.Point{240, 0}, color.RGBA{255, 0, 0, 255}, 15)\n\n![example](assets/img/floodfill.jpg) \n\n\n## Segmentation\n    import \"github.com/anthonynsimon/bild/segment\"\n\n### Threshold\n    result := segment.Threshold(img, 128)\n\n![example](assets/img/threshold.jpg)\n\n\n## Transform\n    import \"github.com/anthonynsimon/bild/transform\"\n\n### Crop\n    // Source image is 280x280\n    result := transform.Crop(img, image.Rect(70,70,210,210))\n\n![example](assets/img/crop.jpg)\n\n### FlipH\n    result := transform.FlipH(img)\n\n![example](assets/img/fliph.jpg)  \n\n### FlipV\n    result := transform.FlipV(img)\n\n![example](assets/img/flipv.jpg) \n\n\n### Resize Resampling Filters\n    result := transform.Resize(img, 280, 280, transform.Linear)\n\n| Nearest Neighbor | Linear | Gaussian |\n|:----------: | :---------: | :------: |\n| ![](assets/img/resizenearestneighbor.jpg) | ![](assets/img/resizelinear.jpg) | ![](assets/img/resizegaussian.jpg) |\n| **Mitchell Netravali** | **Catmull Rom** | **Lanczos** |\n| ![](assets/img/resizemitchell.jpg) | ![](assets/img/resizecatmullrom.jpg) | ![](assets/img/resizelanczos.jpg) |\n\n\n### Rotate\n    // Options set to nil will use defaults (ResizeBounds set to false, Pivot at center)\n    result := transform.Rotate(img, -45.0, nil)\n\n![example](assets/img/rotation03.gif)\n\n    // If ResizeBounds is set to true, the full rotation bounding area is used\n    result := transform.Rotate(img, -45.0, &transform.RotationOptions{ResizeBounds: true})\n\n![example](assets/img/rotation01.gif)\n\n    // Pivot coordinates are set from the top-left corner\n    // Notice ResizeBounds being set to default (false)\n    result := transform.Rotate(img, -45.0, &transform.RotationOptions{Pivot: &image.Point{0, 0}})\n\n![example](assets/img/rotation02.gif)\n\n### Shear Horizontal\n    result := transform.ShearH(img, 30)\n\n![example](assets/img/shearh.jpg)  \n\n### Shear Vertical\n    result := transform.ShearV(img, 30)\n\n![example](assets/img/shearv.jpg) \n\n### Translate\n    result := transform.Translate(img, 80, 0)\n\n![example](assets/img/translate.jpg) \n\n\n## Contribute\n\nWant to hack on the project? Any kind of contribution is welcome!  \nSimply follow the next steps:\n\n- Fork the project.\n- Create a new branch.\n- Make your changes and write tests when practical.\n- Commit your changes to the new branch.\n- Send a pull request, it will be reviewed shortly.\n\nIn case you want to add a feature, please create a new issue and briefly explain what the feature would consist of. \nFor bugs or requests, before creating an issue please check if one has already been created for it.\n\n\n## Changelog\n\nPlease see the [changelog](CHANGELOG.md) for more details.\n\n## License\n\nThis project is licensed under the MIT license. Please read the LICENSE file.\n"
        },
        {
          "name": "adjust",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks.txt",
          "type": "blob",
          "size": 2.466796875,
          "content": "goos: darwin\ngoarch: amd64\n\npkg: github.com/anthonynsimon/bild/adjust\nBenchmarkApply-8   \t25142976\t       235 ns/op\t     112 B/op\t       3 allocs/op\n\npkg: github.com/anthonynsimon/bild/convolution\nBenchmarkConvolve3-8    \t     172\t  34613389 ns/op\t 8413690 B/op\t       8 allocs/op\nBenchmarkConvolve8-8    \t      32\t 170457685 ns/op\t 8462640 B/op\t       8 allocs/op\nBenchmarkConvolve32-8   \t       2\t2603227291 ns/op\t 8659248 B/op\t       8 allocs/op\nBenchmarkConvolve64-8   \t       1\t10181854106 ns/op\t 8929584 B/op\t       8 allocs/op\n\npkg: github.com/anthonynsimon/bild/effect\nBenchmarkMedian1-8   \t    1005\t   6275448 ns/op\t 3687014 B/op\t   65544 allocs/op\nBenchmarkMedian4-8   \t      26\t 226515953 ns/op\t23628461 B/op\t   65550 allocs/op\nBenchmarkMedian8-8   \t       2\t2524265186 ns/op\t84585780 B/op\t   65577 allocs/op\n\npkg: github.com/anthonynsimon/bild/noise\nBenchmarkUniformMonochrome-8   \t     194\t  30926449 ns/op\t 1048921 B/op\t       4 allocs/op\nBenchmarkUniformColored-8      \t      67\t  87401332 ns/op\t 1048712 B/op\t       4 allocs/op\n\npkg: github.com/anthonynsimon/bild/paint\nBenchmarkFloodFill-8   \t      82\t  71237537 ns/op\t24616143 B/op\t  259073 allocs/op\n\npkg: github.com/anthonynsimon/bild/transform\nBenchmarkResizeTenth-8     \t      54\t 106483274 ns/op\t 7374290 B/op\t      10 allocs/op\nBenchmarkResizeQuarter-8   \t      52\t 116070611 ns/op\t20971935 B/op\t       8 allocs/op\nBenchmarkResizeHalf-8      \t      37\t 162314807 ns/op\t50332324 B/op\t       8 allocs/op\nBenchmarkResize1x-8        \t     267\t  23252871 ns/op\t 8389000 B/op\t       8 allocs/op\nBenchmarkResize2x-8        \t      94\t  59867822 ns/op\t25166217 B/op\t       8 allocs/op\nBenchmarkResize4x-8        \t      31\t 188098593 ns/op\t83886558 B/op\t       8 allocs/op\nBenchmarkResize8x-8        \t       8\t 666375788 ns/op\t301990720 B/op\t       9 allocs/op\nBenchmarkResize16x-8       \t       2\t2523312624 ns/op\t1140851040 B/op\t       8 allocs/op\nBenchmarkRotation256-8     \t    1586\t   3397452 ns/op\t 1310965 B/op\t  196613 allocs/op\nBenchmarkRotation512-8     \t     438\t  13462494 ns/op\t 5243236 B/op\t  786437 allocs/op\nBenchmarkRotation1024-8    \t     121\t  49059303 ns/op\t20971951 B/op\t 3145733 allocs/op\nBenchmarkRotation2048-8    \t      30\t 201259553 ns/op\t83886562 B/op\t12582917 allocs/op\nBenchmarkRotation4096-8    \t       7\t 788848699 ns/op\t335545040 B/op\t50331653 allocs/op\nBenchmarkRotation8192-8    \t       2\t3243539872 ns/op\t1342178584 B/op\t201326597 allocs/op\nBenchmarkTranslate-8       \t    6219\t    932677 ns/op\t 4194449 B/op\t       4 allocs/op"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "blend",
          "type": "tree",
          "content": null
        },
        {
          "name": "blur",
          "type": "tree",
          "content": null
        },
        {
          "name": "channel",
          "type": "tree",
          "content": null
        },
        {
          "name": "clone",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "convolution",
          "type": "tree",
          "content": null
        },
        {
          "name": "effect",
          "type": "tree",
          "content": null
        },
        {
          "name": "fcolor",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.2255859375,
          "content": "module github.com/anthonynsimon/bild\n\ngo 1.21\n\nrequire (\n\tgithub.com/spf13/cobra v0.0.5\n\tgolang.org/x/image v0.18.0\n)\n\nrequire (\n\tgithub.com/inconshreveable/mousetrap v1.0.0 // indirect\n\tgithub.com/spf13/pflag v1.0.3 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.18359375,
          "content": "github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=\ngithub.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=\ngithub.com/coreos/go-etcd v2.0.0+incompatible/go.mod h1:Jez6KQU2B/sWsbdaef3ED8NzMklzPG4d5KIOhIy30Tk=\ngithub.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/inconshreveable/mousetrap v1.0.0 h1:Z8tu5sraLXCXIcARxBp/8cbvlwVa7Z1NHg9XEKhtSvM=\ngithub.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\ngithub.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=\ngithub.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=\ngithub.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cobra v0.0.5 h1:f0B+LkLX6DtmRH1isoNA9VTtNUK9K8xYd28JNNfOv/s=\ngithub.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=\ngithub.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=\ngithub.com/spf13/pflag v1.0.3 h1:zPAT6CGy6wXeQ7NtTnaTerfKOsV6V6F8agHXFiazDkg=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/viper v1.3.2/go.mod h1:ZiWeW+zYFKm7srdB9IoDzzZXaJaI5eL9QjNiN/DMA2s=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/ugorji/go/codec v0.0.0-20181204163529-d75b2dcb6bc8/go.mod h1:VFNgLljTbGfSG7qAOspJ7OScBnGdDN/yBr0sguwnwf0=\ngithub.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=\ngolang.org/x/crypto v0.0.0-20181203042331-505ab145d0a9/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/image v0.18.0 h1:jGzIakQa/ZXI1I0Fxvaa9W7yP25TqT6cHIHn+6CqvSQ=\ngolang.org/x/image v0.18.0/go.mod h1:4yyo5vMFQjVjUcVk4jEQcU9MGy/rulF5WvUILseCM2E=\ngolang.org/x/sys v0.0.0-20181205085412-a5c9d58dba9a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n"
        },
        {
          "name": "histogram",
          "type": "tree",
          "content": null
        },
        {
          "name": "imgio",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.0869140625,
          "content": "package main\n\nimport \"github.com/anthonynsimon/bild/cmd\"\n\nfunc main() {\n\tcmd.Execute()\n}\n"
        },
        {
          "name": "math",
          "type": "tree",
          "content": null
        },
        {
          "name": "noise",
          "type": "tree",
          "content": null
        },
        {
          "name": "paint",
          "type": "tree",
          "content": null
        },
        {
          "name": "parallel",
          "type": "tree",
          "content": null
        },
        {
          "name": "perlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "segment",
          "type": "tree",
          "content": null
        },
        {
          "name": "transform",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}