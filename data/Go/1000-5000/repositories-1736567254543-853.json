{
  "metadata": {
    "timestamp": 1736567254543,
    "page": 853,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yannh/kubeconform",
      "stars": 2365,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": "dist/\nbin/\n.idea/\n**/*.pyc\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 2.8955078125,
          "content": "project_name: kubeconform\nbuilds:\n  - main: ./cmd/kubeconform\n    env:\n      - CGO_ENABLED=0\n      - GOFLAGS = -mod=vendor\n      - GO111MODULE = on\n      - GIT_OWNER = yannh\n    goos:\n      - windows\n      - linux\n      - darwin\n    goarch:\n      - 386\n      - amd64\n      - arm\n      - arm64\n    flags:\n      - -trimpath\n      - -tags=netgo\n      - -a\n    ldflags:\n      - -extldflags \"-static\"\n      - -X main.version={{.Tag}}\n\narchives:\n  - format: tar.gz\n    format_overrides:\n      - goos: windows\n        format: zip\n    name_template: \"{{ .ProjectName  }}-{{ .Os  }}-{{ .Arch  }}{{ if .Arm }}v{{ .Arm }}{{ end }}\"\n\ndockers:\n  - image_templates:\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:{{ .Tag }}-amd64'\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:latest-amd64'\n    dockerfile: Dockerfile\n    use: buildx\n    build_flag_templates:\n      - \"--pull\"\n      - \"--platform=linux/amd64\"\n    goos: linux\n    goarch: amd64\n  - image_templates:\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:{{ .Tag }}-arm64'\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:latest-arm64'\n    dockerfile: Dockerfile\n    use: buildx\n    build_flag_templates:\n      - \"--pull\"\n      - \"--platform=linux/arm64\"\n    goos: linux\n    goarch: arm64\n  - image_templates:\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:{{ .Tag }}-amd64-alpine'\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:latest-amd64-alpine'\n    dockerfile: Dockerfile-alpine\n    use: buildx\n    build_flag_templates:\n      - \"--pull\"\n      - \"--platform=linux/amd64\"\n    goos: linux\n    goarch: amd64\n  - image_templates:\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:{{ .Tag }}-arm64-alpine'\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:latest-arm64-alpine'\n    dockerfile: Dockerfile-alpine\n    use: buildx\n    build_flag_templates:\n      - \"--pull\"\n      - \"--platform=linux/arm64\"\n    goos: linux\n    goarch: arm64\n\ndocker_manifests:\n  - name_template: 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:{{ .Tag }}'\n    image_templates:\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:{{ .Tag }}-amd64'\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:{{ .Tag }}-arm64'\n  - name_template: 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:latest'\n    image_templates:\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:latest-amd64'\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:latest-arm64'\n  - name_template: 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:latest-alpine'\n    image_templates:\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:latest-amd64-alpine'\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:latest-arm64-alpine'\n  - name_template: 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:{{ .Tag }}-alpine'\n    image_templates:\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:{{ .Tag }}-amd64-alpine'\n      - 'ghcr.io/{{.Env.GIT_OWNER}}/kubeconform:{{ .Tag }}-arm64-alpine'\n\nchecksum:\n  name_template: 'CHECKSUMS'\n\nsnapshot:\n  name_template: \"{{ .Tag }}-next\"\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - '^test:'\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7216796875,
          "content": "FROM alpine:3.20.2 as certs\nRUN apk add ca-certificates\n\nFROM scratch AS kubeconform\nLABEL org.opencontainers.image.authors=\"Yann Hamon <yann@mandragor.org>\" \\\n      org.opencontainers.image.source=\"https://github.com/yannh/kubeconform/\" \\\n      org.opencontainers.image.description=\"A Kubernetes manifests validation tool\" \\\n      org.opencontainers.image.documentation=\"https://github.com/yannh/kubeconform/\" \\\n      org.opencontainers.image.licenses=\"Apache License 2.0\" \\\n      org.opencontainers.image.title=\"kubeconform\" \\\n      org.opencontainers.image.url=\"https://github.com/yannh/kubeconform/\"\nCOPY --from=certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY kubeconform /\nENTRYPOINT [\"/kubeconform\"]\n"
        },
        {
          "name": "Dockerfile-alpine",
          "type": "blob",
          "size": 0.599609375,
          "content": "FROM alpine:3.20.2\n\nLABEL org.opencontainers.image.authors=\"Yann Hamon <yann@mandragor.org>\" \\\n      org.opencontainers.image.source=\"https://github.com/yannh/kubeconform/\" \\\n      org.opencontainers.image.description=\"A Kubernetes manifests validation tool\" \\\n      org.opencontainers.image.documentation=\"https://github.com/yannh/kubeconform/\" \\\n      org.opencontainers.image.licenses=\"Apache License 2.0\" \\\n      org.opencontainers.image.title=\"kubeconform\" \\\n      org.opencontainers.image.url=\"https://github.com/yannh/kubeconform/\"\nRUN apk add ca-certificates\nCOPY kubeconform /\nENTRYPOINT [\"/kubeconform\"]\n"
        },
        {
          "name": "Dockerfile.bats",
          "type": "blob",
          "size": 0.2216796875,
          "content": "FROM bats/bats:1.11.0\nRUN apk --no-cache add ca-certificates parallel libxml2-utils\nCOPY dist/kubeconform_linux_amd64_v1/kubeconform /code/bin/\nCOPY acceptance.bats acceptance-nonetwork.bats /code/\nCOPY fixtures /code/fixtures\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.080078125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017-2022 Yann Hamon\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.923828125,
          "content": "#!/usr/bin/make -f\n\nRELEASE_VERSION ?= latest\n\n.PHONY: local-test local-build local-build-static docker-test docker-build docker-build-static build-bats docker-acceptance release update-deps build-single-target\n\nlocal-test:\n\tgo test -race ./... -count=1\n\nlocal-build:\n\tgit config --global --add safe.directory $$PWD\n\tgo build -o bin/ ./...\n\nlocal-build-static:\n\tCGO_ENABLED=0 GOFLAGS=-mod=vendor GOOS=linux GOARCH=amd64 GO111MODULE=on go build -trimpath -tags=netgo -ldflags \"-extldflags=\\\"-static\\\"\"  -a -o bin/ ./...\n\n# These only used for development. Release artifacts and docker images are produced by goreleaser.\ndocker-test:\n\tdocker run -t -v $$PWD:/go/src/github.com/yannh/kubeconform -w /go/src/github.com/yannh/kubeconform golang:1.22.5 make local-test\n\ndocker-build:\n\tdocker run -t -v $$PWD:/go/src/github.com/yannh/kubeconform -w /go/src/github.com/yannh/kubeconform golang:1.22.5 make local-build\n\ndocker-build-static:\n\tdocker run -t -v $$PWD:/go/src/github.com/yannh/kubeconform -w /go/src/github.com/yannh/kubeconform golang:1.22.5 make local-build-static\n\nbuild-bats:\n\tdocker build -t bats -f Dockerfile.bats .\n\ndocker-acceptance: build-bats\n\tdocker run -t bats -p acceptance.bats\n\tdocker run --network none -t bats -p acceptance-nonetwork.bats\n\ngoreleaser-build-static:\n\tdocker run -t -e GOOS=linux -e GOARCH=amd64 -v $$PWD:/go/src/github.com/yannh/kubeconform -w /go/src/github.com/yannh/kubeconform goreleaser/goreleaser:v2.1.0 build --clean --single-target --snapshot\n\tcp dist/kubeconform_linux_amd64_v1/kubeconform bin/\n\nrelease:\n\tdocker run -e GITHUB_TOKEN -e GIT_OWNER -t -v /var/run/docker.sock:/var/run/docker.sock -v $$PWD:/go/src/github.com/yannh/kubeconform -w /go/src/github.com/yannh/kubeconform goreleaser/goreleaser:v2.1.0 release --clean\n\nupdate-deps:\n\tgo get -u ./...\n\tgo mod tidy\n\nupdate-junit-xsd:\n\tcurl https://raw.githubusercontent.com/junit-team/junit5/main/platform-tests/src/test/resources/jenkins-junit.xsd > fixtures/junit.xsd\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 16.3232421875,
          "content": "<img width=\"50%\" alt=\"Kubeconform-GitHub-Hero\" src=\"https://user-images.githubusercontent.com/19731161/142411871-f695e40c-bfa8-43ca-97c0-94c256749732.png\">\n<hr>\n\n[![Build status](https://github.com/yannh/kubeconform/actions/workflows/main.yml/badge.svg)](https://github.com/yannh/kubeconform/actions?query=branch%3Amaster)\n[![Homebrew](https://img.shields.io/badge/dynamic/json.svg?url=https://formulae.brew.sh/api/formula/kubeconform.json&query=$.versions.stable&label=homebrew)](https://formulae.brew.sh/formula/kubeconform)\n[![Go Report card](https://goreportcard.com/badge/github.com/yannh/kubeconform)](https://goreportcard.com/report/github.com/yannh/kubeconform)\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/yannh/kubeconform/pkg/validator)](https://pkg.go.dev/github.com/yannh/kubeconform/pkg/validator)\n\n`Kubeconform` is a Kubernetes manifest validation tool. Incorporate it into your CI, or use it locally to validate your Kubernetes configuration!\n\nIt is inspired by, contains code from and is designed to stay close to\n[Kubeval](https://github.com/instrumenta/kubeval), but with the following improvements:\n * **high performance**: will validate & download manifests over multiple routines, caching\n   downloaded files in memory\n * configurable list of **remote, or local schemas locations**, enabling validating Kubernetes\n   custom resources (CRDs) and offline validation capabilities\n * uses by default a [self-updating fork](https://github.com/yannh/kubernetes-json-schema) of the schemas registry maintained\n   by the kubernetes-json-schema project - which guarantees\n   up-to-date **schemas for all recent versions of Kubernetes**.\n   \n<details><summary><h4>Speed comparison with Kubeval</h4></summary><p>\nRunning on a pretty large kubeconfigs setup, on a laptop with 4 cores:\n   \n```bash\n$ time kubeconform -ignore-missing-schemas -n 8 -summary  preview staging production\nSummary: 50714 resources found in 35139 files - Valid: 27334, Invalid: 0, Errors: 0 Skipped: 23380\nreal\t0m6,710s\nuser\t0m38,701s\nsys\t0m1,161s\n$ time kubeval -d preview,staging,production --ignore-missing-schemas --quiet\n[... Skipping output]\nreal\t0m35,336s\nuser\t0m0,717s\nsys\t0m1,069s\n```\n</p></details>\n\n## Table of contents\n\n* [A small overview of Kubernetes manifest validation](#a-small-overview-of-kubernetes-manifest-validation)\n  * [Limits of Kubeconform validation](#Limits-of-Kubeconform-validation)\n* [Installation](#Installation)\n* [Usage](#Usage)\n  * [Usage examples](#Usage-examples)\n  * [Proxy support](#Proxy-support)\n* [Overriding schemas location](#Overriding-schemas-location)\n  * [CustomResourceDefinition (CRD) Support](#CustomResourceDefinition-CRD-Support)\n  * [OpenShift schema Support](#OpenShift-schema-Support)\n* [Integrating Kubeconform in the CI](#Integrating-Kubeconform-in-the-CI)\n  * [Github Workflow](#Github-Workflow)\n  * [Gitlab-CI](#Gitlab-CI)\n* [Helm charts](#helm-charts)\n* [Using kubeconform as a Go Module](#Using-kubeconform-as-a-Go-Module)\n* [Credits](#Credits)\n\n## A small overview of Kubernetes manifest validation\n\nKubernetes's API is described using the [OpenAPI (formerly swagger) specification](https://www.openapis.org),\nin a [file](https://github.com/kubernetes/kubernetes/blob/master/api/openapi-spec/swagger.json) checked into\nthe main Kubernetes repository.\n\nBecause of the state of the tooling to perform validation against OpenAPI schemas, projects usually convert\nthe OpenAPI schemas to [JSON schemas](https://json-schema.org/) first. Kubeval relies on\n[instrumenta/OpenApi2JsonSchema](https://github.com/instrumenta/openapi2jsonschema) to convert Kubernetes' Swagger file\nand break it down into multiple JSON schemas, stored in github at\n[instrumenta/kubernetes-json-schema](https://github.com/instrumenta/kubernetes-json-schema) and published on\n[kubernetesjsonschema.dev](https://kubernetesjsonschema.dev/).\n\n`Kubeconform` relies on [a fork of kubernetes-json-schema](https://github.com/yannh/kubernetes-json-schema/)\nthat is more meticulously kept up-to-date, and contains schemas for all recent versions of Kubernetes.\n\n### Limits of Kubeconform validation\n\n`Kubeconform`, similar to `kubeval`, only validates manifests using the official Kubernetes OpenAPI specifications. The Kubernetes controllers still perform additional server-side validations that are not part of the OpenAPI specifications. Those server-side validations are not covered by `Kubeconform` (examples: [#65](https://github.com/yannh/kubeconform/issues/65), [#122](https://github.com/yannh/kubeconform/issues/122), [#142](https://github.com/yannh/kubeconform/issues/142)). You can use a 3rd-party tool or the `kubectl --dry-run=server` command to fill the missing (validation) gap.\n\n## Installation\n\nIf you are a [Homebrew](https://brew.sh/) user, you can install by running:\n\n```bash\n$ brew install kubeconform\n```\n\nIf you are a Windows user, you can install with [winget](https://learn.microsoft.com/en-us/windows/package-manager/winget/) by running:\n\n```cmd\nwinget install YannHamon.kubeconform\n```\n\nYou can also download the latest version from the [release page](https://github.com/yannh/kubeconform/releases).\n\nAnother way of installation is via Golang's package manager:\n\n```bash\n# With a specific version tag\n$ go install github.com/yannh/kubeconform/cmd/kubeconform@v0.4.13\n\n# Latest version\n$ go install github.com/yannh/kubeconform/cmd/kubeconform@latest\n```\n\n## Usage\n\n```\n$ kubeconform -h\nUsage: kubeconform [OPTION]... [FILE OR FOLDER]...\n  -cache string\n    \tcache schemas downloaded via HTTP to this folder\n  -debug\n    \tprint debug information\n  -exit-on-error\n    \timmediately stop execution when the first error is encountered\n  -h\tshow help information\n  -ignore-filename-pattern value\n    \tregular expression specifying paths to ignore (can be specified multiple times)\n  -ignore-missing-schemas\n    \tskip files with missing schemas instead of failing\n  -insecure-skip-tls-verify\n    \tdisable verification of the server's SSL certificate. This will make your HTTPS connections insecure\n  -kubernetes-version string\n    \tversion of Kubernetes to validate against, e.g.: 1.18.0 (default \"master\")\n  -n int\n    \tnumber of goroutines to run concurrently (default 4)\n  -output string\n    \toutput format - json, junit, pretty, tap, text (default \"text\")\n  -reject string\n    \tcomma-separated list of kinds or GVKs to reject\n  -schema-location value\n    \toverride schemas location search path (can be specified multiple times)\n  -skip string\n    \tcomma-separated list of kinds or GVKs to ignore\n  -strict\n    \tdisallow additional properties not in schema or duplicated keys\n  -summary\n    \tprint a summary at the end (ignored for junit output)\n  -v\tshow version information\n  -verbose\n    \tprint results for all resources (ignored for tap and junit output)\n```\n\n### Usage examples\n\n* Validating a single, valid file\n```bash\n$ kubeconform fixtures/valid.yaml\n$ echo $?\n0\n```\n\n* Validating a single invalid file, setting output to json, and printing a summary\n```bash\n$ kubeconform -summary -output json fixtures/invalid.yaml\n{\n  \"resources\": [\n    {\n      \"filename\": \"fixtures/invalid.yaml\",\n      \"kind\": \"ReplicationController\",\n      \"version\": \"v1\",\n      \"status\": \"INVALID\",\n      \"msg\": \"Additional property templates is not allowed - Invalid type. Expected: [integer,null], given: string\"\n    }\n  ],\n  \"summary\": {\n    \"valid\": 0,\n    \"invalid\": 1,\n    \"errors\": 0,\n    \"skipped\": 0\n  }\n}\n$ echo $?\n1\n```\n\n* Passing manifests via Stdin\n```bash\ncat fixtures/valid.yaml  | ./bin/kubeconform -summary\nSummary: 1 resource found parsing stdin - Valid: 1, Invalid: 0, Errors: 0 Skipped: 0\n```\n\n* Validating a file, ignoring its resource using both Kind, and GVK (Group, Version, Kind) notations\n```\n# This will ignore ReplicationController for all apiVersions\n$ kubeconform -summary -skip ReplicationController fixtures/valid.yaml\nSummary: 1 resource found in 1 file - Valid: 0, Invalid: 0, Errors: 0, Skipped: 1\n\n# This will ignore ReplicationController only for apiVersion v1\n$ kubeconform -summary -skip v1/ReplicationController fixtures/valid.yaml\nSummary: 1 resource found in 1 file - Valid: 0, Invalid: 0, Errors: 0, Skipped: 1\n```\n\n* Validating a folder, increasing the number of parallel workers\n```\n$ kubeconform -summary -n 16 fixtures\nfixtures/crd_schema.yaml - CustomResourceDefinition trainingjobs.sagemaker.aws.amazon.com failed validation: could not find schema for CustomResourceDefinition\nfixtures/invalid.yaml - ReplicationController bob is invalid: Invalid type. Expected: [integer,null], given: string\n[...]\nSummary: 65 resources found in 34 files - Valid: 55, Invalid: 2, Errors: 8 Skipped: 0\n```\n\n### Proxy support\n\n`Kubeconform` will respect the **HTTPS_PROXY** variable when downloading schema files.\n\n```bash\n$ HTTPS_PROXY=proxy.local bin/kubeconform fixtures/valid.yaml\n```\n\n## Overriding schemas location\n\nWhen the `-schema-location` parameter is not used, or set to `default`, kubeconform will default to downloading\nschemas from https://github.com/yannh/kubernetes-json-schema. Kubeconform however supports passing one, or multiple,\nschemas locations - HTTP(s) URLs, or local filesystem paths, in which case it will lookup for schema definitions\nin each of them, in order, stopping as soon as a matching file is found.\n\n * If the `-schema-location` value does not end with `.json`, Kubeconform will assume filenames / a file\n structure identical to that of [kubernetesjsonschema.dev](https://kubernetesjsonschema.dev/) or [yannh/kubernetes-json-schema](https://github.com/yannh/kubernetes-json-schema).\n * if the `-schema-location` value ends with `.json` - Kubeconform assumes the value is a **Go templated\n string** that indicates how to search for JSON schemas.\n* the `-schema-location` value of `default` is an alias for `https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/{{.NormalizedKubernetesVersion}}-standalone{{.StrictSuffix}}/{{.ResourceKind}}{{.KindSuffix}}.json`.\n\n**The following command lines are equivalent:**\n```bash\n$ kubeconform fixtures/valid.yaml\n$ kubeconform -schema-location default fixtures/valid.yaml\n$ kubeconform -schema-location 'https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/{{.NormalizedKubernetesVersion}}-standalone{{.StrictSuffix}}/{{.ResourceKind}}{{.KindSuffix}}.json' fixtures/valid.yaml\n```\nHere are the variables you can use in -schema-location:\n * *NormalizedKubernetesVersion* - Kubernetes Version, prefixed by v\n * *StrictSuffix* - \"-strict\" or \"\" depending on whether validation is running in strict mode or not\n * *ResourceKind* - Kind of the Kubernetes Resource\n * *ResourceAPIVersion* - Version of API used for the resource - \"v1\" in \"apiVersion: monitoring.coreos.com/v1\"\n * *Group* - the group name as stated in this resource's definition - \"monitoring.coreos.com\" in \"apiVersion: monitoring.coreos.com/v1\"\n * *KindSuffix* - suffix computed from apiVersion - for compatibility with `Kubeval` schema registries\n\n### CustomResourceDefinition (CRD) Support\n\nBecause Custom Resources (CR) are not native Kubernetes objects, they are not included in the default schema.  \nIf your CRs are present in [Datree's CRDs-catalog](https://github.com/datreeio/CRDs-catalog), you can specify this project as an additional registry to lookup:\n  \n```bash\n# Look in the CRDs-catalog for the desired schema/s\n$ kubeconform -schema-location default -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' [MANIFEST]\n```\n\nIf your CRs are not present in the CRDs-catalog, you will need to manually pull the CRDs manifests from your cluster and convert the `OpenAPI.spec` to JSON schema format.\n\n<details><summary>Converting an OpenAPI file to a JSON Schema</summary>\n<p>\n\n`Kubeconform` uses JSON schemas to validate Kubernetes resources. For Custom Resource, the CustomResourceDefinition\nfirst needs to be converted to JSON Schema. A script is provided to convert these CustomResourceDefinitions\nto JSON schema. Here is an example how to use it:\n\n```bash\n$ python ./scripts/openapi2jsonschema.py https://raw.githubusercontent.com/aws/amazon-sagemaker-operator-for-k8s/master/config/crd/bases/sagemaker.aws.amazon.com_trainingjobs.yaml\nJSON schema written to trainingjob_v1.json\n```\n\nBy default, the file name output format is `{kind}_{version}`. The `FILENAME_FORMAT` environment variable can be used to change the output file name (Available variables: `kind`, `group`, `fullgroup`, `version`):\n\n```\n$ export FILENAME_FORMAT='{kind}-{group}-{version}'\n$ ./scripts/openapi2jsonschema.py https://raw.githubusercontent.com/aws/amazon-sagemaker-operator-for-k8s/master/config/crd/bases/sagemaker.aws.amazon.com_trainingjobs.yaml\nJSON schema written to trainingjob-sagemaker-v1.json\n\n$ export FILENAME_FORMAT='{kind}-{fullgroup}-{version}'\n$ ./scripts/openapi2jsonschema.py https://raw.githubusercontent.com/aws/amazon-sagemaker-operator-for-k8s/master/config/crd/bases/sagemaker.aws.amazon.com_trainingjobs.yaml\nJSON schema written to trainingjob-sagemaker.aws.amazon.com-v1.json\n```\n\nAfter converting your CRDs to JSON schema files, you can use `kubeconform` to validate your CRs against them:\n\n```\n# If the resource Kind is not found in default, also lookup in the schemas/ folder for a matching file\n$ kubeconform -schema-location default -schema-location 'schemas/{{ .ResourceKind }}{{ .KindSuffix }}.json' fixtures/custom-resource.yaml\n```\n\nℹ️ Datree's [CRD Extractor](https://github.com/datreeio/CRDs-catalog#crd-extractor) is a utility that can be used instead of this manual process.\n\n</p>\n</details>\n\n### OpenShift schema Support\n\nYou can validate Openshift manifests using a custom schema location. Set the OpenShift version (v3.10.0-4.1.0) to validate\nagainst using `-kubernetes-version`.\n\n```\nkubeconform -kubernetes-version 3.8.0  -schema-location 'https://raw.githubusercontent.com/garethr/openshift-json-schema/master/{{ .NormalizedKubernetesVersion }}-standalone{{ .StrictSuffix }}/{{ .ResourceKind }}.json'  -summary fixtures/valid.yaml\nSummary: 1 resource found in 1 file - Valid: 1, Invalid: 0, Errors: 0 Skipped: 0\n```\n\n## Integrating Kubeconform in the CI\n\n`Kubeconform` publishes Docker Images to Github's new Container Registry (ghcr.io). These images\ncan be used directly in a Github Action, once logged in using a [_Github Token_](https://github.blog/changelog/2021-03-24-packages-container-registry-now-supports-github_token/).\n\n### Github Workflow\n\nExample:\n```yaml\nname: kubeconform\non: push\njobs:\n  kubeconform:\n    runs-on: ubuntu-latest\n    steps:\n      - name: login to Github Packages\n        run: echo \"${{ github.token }}\" | docker login https://ghcr.io -u ${GITHUB_ACTOR} --password-stdin\n      - uses: actions/checkout@v2\n      - uses: docker://ghcr.io/yannh/kubeconform:latest\n        with:\n          entrypoint: '/kubeconform'\n          args: \"-summary -output json kubeconfigs/\"\n```\n\n_Note on pricing_: Kubeconform relies on Github Container Registry which is currently in Beta. During that period,\n[bandwidth is free](https://docs.github.com/en/packages/guides/about-github-container-registry). After that period,\nbandwidth costs might be applicable. Since bandwidth from Github Packages within Github Actions is free, I expect\nGithub Container Registry to also be usable for free within Github Actions in the future. If that were not to be the\ncase, I might publish the Docker image to a different platform.\n\n### Gitlab-CI\n\nThe Kubeconform Docker image can be used in Gitlab-CI. Here is an example of a Gitlab-CI job:\n\n```yaml\nlint-kubeconform:\n  stage: validate\n  image:\n    name: ghcr.io/yannh/kubeconform:latest-alpine\n    entrypoint: [\"\"]\n  script:\n  - /kubeconform -summary -output json kubeconfigs/\n```\n\nSee [issue 106](https://github.com/yannh/kubeconform/issues/106) for more details.\n\n## Helm charts\n\nThere is a 3rd party [repository](https://github.com/jtyr/kubeconform-helm) that\nallows to use `kubeconform` to test [Helm charts](https://helm.sh) in the form of\na [Helm plugin](https://helm.sh/docs/topics/plugins/) and [`pre-commit`\nhook](https://pre-commit.com/).\n\n## Using kubeconform as a Go Module\n\n**Warning**: This is a work-in-progress, the interface is not yet considered stable. Feedback is encouraged.\n\n`Kubeconform` contains a package that can be used as a library.\nAn example of usage can be found in [examples/main.go](examples/main.go)\n\nAdditional documentation on [pkg.go.dev](https://pkg.go.dev/github.com/yannh/kubeconform/pkg/validator)\n\n## Credits\n\n * @garethr for the [Kubeval](https://github.com/instrumenta/kubeval) and\n [kubernetes-json-schema](https://github.com/instrumenta/kubernetes-json-schema) projects ❤️\n"
        },
        {
          "name": "acceptance-nonetwork.bats",
          "type": "blob",
          "size": 0.9130859375,
          "content": "#!/usr/bin/env bats\n\n@test \"Fail when parsing a valid Kubernetes config YAML file without network access\" {\n  run bin/kubeconform fixtures/valid.yaml\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Pass when parsing a valid config YAML file without network access, with cache\" {\n  run bin/kubeconform -cache fixtures/cache/ fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n}\n\n@test \"Pass when parsing a Custom Resource and using a local schema registry with appropriate CRD\" {\n  run bin/kubeconform -schema-location './fixtures/registry/{{ .ResourceKind }}{{ .KindSuffix }}.json' fixtures/test_crd.yaml\n  [ \"$status\" -eq 0 ]\n}\n\n@test \"Pass when parsing a Custom Resource and specifying several local registries, the last one having the appropriate CRD\" {\n  run bin/kubeconform -schema-location 'fixtures/{{ .ResourceKind }}.json' -schema-location './fixtures/registry/{{ .ResourceKind }}{{ .KindSuffix }}.json' fixtures/test_crd.yaml\n  [ \"$status\" -eq 0 ]\n}\n"
        },
        {
          "name": "acceptance.bats",
          "type": "blob",
          "size": 15.046875,
          "content": "#!/usr/bin/env bats\n\nresetCacheFolder() {\n  rm -rf cache\n  mkdir -p cache\n}\n\n@test \"Pass when displaying help with -h\" {\n  run bin/kubeconform -h\n  [ \"$status\" -eq 0 ]\n  [ \"${lines[0]}\" == 'Usage: bin/kubeconform [OPTION]... [FILE OR FOLDER]...' ]\n}\n\n@test \"Fail and display help when using an incorrect flag\" {\n  run bin/kubeconform -xyz\n  [ \"$status\" -eq 1 ]\n  [ \"${lines[0]}\" == 'flag provided but not defined: -xyz' ]\n}\n\n@test \"Pass when parsing a valid Kubernetes config YAML file\" {\n  run bin/kubeconform -summary fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 1 resource found in 1 file - Valid: 1, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Pass when parsing a folder containing valid YAML files\" {\n  run bin/kubeconform -summary fixtures/folder\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 7 resources found in 2 files - Valid: 7, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Pass when parsing a valid Kubernetes config file with int_to_string vars\" {\n  run bin/kubeconform -verbose fixtures/int_or_string.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"fixtures/int_or_string.yaml - Service heapster is valid\" ]\n}\n\n@test \"Pass when parsing a valid Kubernetes config JSON file\" {\n  run bin/kubeconform -kubernetes-version 1.20.0 -summary fixtures/valid.json\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 1 resource found in 1 file - Valid: 1, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Pass when parsing a valid Kubernetes config YAML file with generate name\" {\n  run bin/kubeconform -verbose fixtures/generate_name.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"fixtures/generate_name.yaml - Job pi-{{ generateName }} is valid\" ]\n}\n\n@test \"Pass when parsing a Kubernetes file with string and integer quantities\" {\n  run bin/kubeconform -verbose fixtures/quantity.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"fixtures/quantity.yaml - LimitRange mem-limit-range is valid\" ]\n}\n\n@test \"Pass when parsing a valid Kubernetes config file with null arrays\" {\n  run bin/kubeconform -verbose fixtures/null_string.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"fixtures/null_string.yaml - Service frontend is valid\" ]\n}\n\n@test \"Pass when parsing a valid Kubernetes config file with null strings\" {\n  run bin/kubeconform -summary fixtures/null_string.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 1 resource found in 1 file - Valid: 1, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Pass when parsing a multi-document config file\" {\n  run bin/kubeconform -summary fixtures/multi_valid.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 6 resources found in 1 file - Valid: 6, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Fail when parsing a multi-document config file with one invalid resource\" {\n  run bin/kubeconform fixtures/multi_invalid.yaml\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Fail when parsing an invalid Kubernetes config file\" {\n  run bin/kubeconform fixtures/invalid.yaml\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Return relevant error for non-existent file\" {\n  run bin/kubeconform fixtures/not-here\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" = \"fixtures/not-here - failed validation: lstat fixtures/not-here: no such file or directory\" ]\n}\n\n@test \"Pass when parsing a blank config file\" {\n   run bin/kubeconform -summary fixtures/blank.yaml\n   [ \"$status\" -eq 0 ]\n   [ \"$output\" = \"Summary: 0 resource found in 1 file - Valid: 0, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Pass when parsing a blank config file with a comment\" {\n   run bin/kubeconform -summary fixtures/comment.yaml\n   [ \"$status\" -eq 0 ]\n   [ \"$output\" = \"Summary: 0 resource found in 1 file - Valid: 0, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Fail when parsing a config that is missing a Kind\" {\n   run bin/kubeconform -summary fixtures/missing_kind.yaml\n   [ \"$status\" -eq 1 ]\n   [[ \"$output\" == *\"missing 'kind' key\"* ]]\n}\n\n@test \"Fail when parsing a config that is missing an apiVersion\" {\n   run bin/kubeconform -summary fixtures/missing_apiversion.yaml\n   [ \"$status\" -eq 1 ]\n   [[ \"$output\" == *\"missing 'apiVersion' key\"* ]]\n}\n\n@test \"Fail when parsing a config that is missing a Kind value\" {\n   run bin/kubeconform -summary fixtures/missing_kind_value.yaml\n   [ \"$status\" -eq 1 ]\n   [[ \"$output\" == *\"missing 'kind' key\"* ]]\n}\n\n@test \"Fail when parsing a config with CRD\" {\n  run bin/kubeconform fixtures/test_crd.yaml\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Pass when parsing a config with Custom Resource and ignoring missing schemas\" {\n  run bin/kubeconform -ignore-missing-schemas fixtures/test_crd.yaml\n  [ \"$status\" -eq 0 ]\n}\n\n@test \"Pass when parsing a config with additional properties\" {\n  run bin/kubeconform -summary fixtures/extra_property.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 1 resource found in 1 file - Valid: 1, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Fail when parsing a config with additional properties and strict set\" {\n  run bin/kubeconform -strict -kubernetes-version 1.20.0 fixtures/extra_property.yaml\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Fail when parsing a config with duplicate properties and strict set\" {\n  run bin/kubeconform -strict -kubernetes-version 1.20.0 fixtures/duplicate_property.yaml\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Pass when parsing a config with duplicate properties and strict NOT set\" {\n  run bin/kubeconform -kubernetes-version 1.20.0 fixtures/duplicate_property.yaml\n  [ \"$status\" -eq 0 ]\n}\n\n@test \"Pass when using a valid, preset -schema-location\" {\n  run bin/kubeconform -schema-location default fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n}\n\n@test \"Pass when using a valid HTTP -schema-location\" {\n  run bin/kubeconform -schema-location 'https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/{{ .NormalizedKubernetesVersion }}-standalone{{ .StrictSuffix }}/{{ .ResourceKind }}{{ .KindSuffix }}.json' fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n}\n\n@test \"Pass when using schemas with HTTP references\" {\n  run bin/kubeconform -summary -schema-location 'https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/{{ .NormalizedKubernetesVersion }}{{ .StrictSuffix }}/{{ .ResourceKind }}{{ .KindSuffix }}.json' fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n}\n\n@test \"Fail when using an invalid HTTP -schema-location\" {\n  run bin/kubeconform -schema-location 'http://foo' fixtures/valid.yaml\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Fail when using an invalid non-HTTP -schema-location\" {\n  run bin/kubeconform -schema-location 'foo' fixtures/valid.yaml\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Fail early when passing a non valid -schema-location template\" {\n  run bin/kubeconform -schema-location 'foo {{ .Foo }}' fixtures/valid.yaml\n  [[ \"$output\" == \"failed initialising\"* ]]\n  [[ `echo \"$output\" | wc -l` -eq 1 ]]\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Fail early when passing a non valid -kubernetes-version\" {\n  run bin/kubeconform -kubernetes-version 1.25 fixtures/valid.yaml\n  [ \"${lines[0]}\" == 'invalid value \"1.25\" for flag -kubernetes-version: 1.25 is not a valid version. Valid values are \"master\" (default) or full version x.y.z (e.g. \"1.27.2\")' ]\n  [[ \"${lines[1]}\" == \"Usage:\"* ]]\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Pass with a valid input when validating against openshift manifests\" {\n  run bin/kubeconform -kubernetes-version 3.8.0  -schema-location 'https://raw.githubusercontent.com/garethr/openshift-json-schema/master/{{ .NormalizedKubernetesVersion }}-standalone{{ .StrictSuffix }}/{{ .ResourceKind }}.json'  -summary fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n}\n\n@test \"Fail with an invalid input when validating against openshift manifests\" {\n  run bin/kubeconform -kubernetes-version 3.8.0  -schema-location 'https://raw.githubusercontent.com/garethr/openshift-json-schema/master/{{ .NormalizedKubernetesVersion }}-standalone{{ .StrictSuffix }}/{{ .ResourceKind }}.json'  -summary fixtures/invalid.yaml\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Pass when parsing a valid Kubernetes config YAML file on stdin\" {\n  run bash -c \"cat fixtures/valid.yaml | bin/kubeconform -summary\"\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 1 resource found parsing stdin - Valid: 1, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Pass when parsing a valid Kubernetes config YAML file explicitly on stdin\" {\n  run bash -c \"cat fixtures/valid.yaml | bin/kubeconform -summary -\"\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 1 resource found parsing stdin - Valid: 1, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Fail when parsing an invalid Kubernetes config file on stdin\" {\n  run bash -c \"cat fixtures/invalid.yaml | bin/kubeconform -\"\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Fail when not passing data to stdin, when implicitly configured to read from stdin\" {\n  run bash -c \"bin/kubeconform -summary\"\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Fail when not passing data to stdin, when explicitly configured to read from stdin\" {\n  run bash -c \"bin/kubeconform -summary -\"\n  [ \"$status\" -eq 1 ]\n}\n\n@test \"Skip when parsing a resource from a kind to skip\" {\n  run bin/kubeconform -verbose -skip ReplicationController fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"fixtures/valid.yaml - bob ReplicationController skipped\" ]\n}\n\n@test \"Skip when parsing a resource with a GVK to skip\" {\n  run bin/kubeconform -verbose -skip v1/ReplicationController fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"fixtures/valid.yaml - bob ReplicationController skipped\" ]\n}\n\n@test \"Do not skip when parsing a resource with a GVK to skip, where the Kind matches but not the version\" {\n  run bin/kubeconform -verbose -skip v2/ReplicationController fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"fixtures/valid.yaml - ReplicationController bob is valid\" ]\n}\n\n@test \"Fail when parsing a resource from a kind to reject\" {\n  run bin/kubeconform -verbose -reject ReplicationController fixtures/valid.yaml\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" = \"fixtures/valid.yaml - ReplicationController bob failed validation: prohibited resource kind ReplicationController\" ]\n}\n\n@test \"Ignores file that match the --ignore-filename-pattern given\" {\n  run bin/kubeconform -summary --ignore-filename-pattern 'crd' --ignore-filename-pattern '.*invalid.*' fixtures/multi_invalid.yaml fixtures/list_invalid.yaml fixtures/quantity.yaml fixtures/crd_schema.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 1 resource found in 1 file - Valid: 1, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Pass when parsing a valid Kubernetes config YAML file and store cache\" {\n  resetCacheFolder\n  run bin/kubeconform -cache cache -summary fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 1 resource found in 1 file - Valid: 1, Invalid: 0, Errors: 0, Skipped: 0\" ]\n  [ \"`ls cache/ | wc -l`\" -eq 1 ]\n}\n\n@test \"Fail when no schema found, ensure 404 is not cached on disk\" {\n  resetCacheFolder\n  run bin/kubeconform -cache cache -schema-location 'https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/doesnotexist.json' fixtures/valid.yaml\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" == 'fixtures/valid.yaml - ReplicationController bob failed validation: could not find schema for ReplicationController' ]\n  [ \"`ls cache/ | wc -l`\" -eq 0 ]\n}\n\n@test \"Fail when cache folder does not exist\" {\n  run bin/kubeconform -cache cache_does_not_exist -summary fixtures/valid.yaml\n  [ \"$status\" -eq 1 ]\n  [ \"$output\" = \"failed opening cache folder cache_does_not_exist: stat cache_does_not_exist: no such file or directory\" ]\n}\n\n@test \"Produces correct TAP output\" {\n  run bin/kubeconform -output tap fixtures/valid.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"${lines[0]}\" == 'TAP version 13' ]\n  [ \"${lines[1]}\" == 'ok 1 - fixtures/valid.yaml (v1/ReplicationController//bob)' ]\n  [ \"${lines[2]}\" == '1..1' ]\n}\n\n@test \"Pass when parsing a file containing a List\" {\n  run bin/kubeconform -summary fixtures/list_valid.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = \"Summary: 6 resources found in 1 file - Valid: 6, Invalid: 0, Errors: 0, Skipped: 0\" ]\n}\n\n@test \"Pass when parsing a List resource from stdin\" {\n  run bash -c \"cat fixtures/list_valid.yaml | bin/kubeconform -summary\"\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = 'Summary: 6 resources found parsing stdin - Valid: 6, Invalid: 0, Errors: 0, Skipped: 0' ]\n}\n\n@test \"Fail when parsing a List that contains an invalid resource\" {\n  run bin/kubeconform -summary fixtures/list_invalid.yaml\n  [ \"$status\" -eq 1 ]\n  [ \"${lines[0]}\" == 'fixtures/list_invalid.yaml - ReplicationController bob is invalid: problem validating schema. Check JSON formatting: jsonschema: '\\''/spec/replicas'\\'' does not validate with https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master-standalone/replicationcontroller-v1.json#/properties/spec/properties/replicas/type: expected integer or null, but got string' ]\n  [ \"${lines[1]}\" == 'Summary: 2 resources found in 1 file - Valid: 1, Invalid: 1, Errors: 0, Skipped: 0' ]\n}\n\n@test \"Fail when parsing a List that contains an invalid resource from stdin\" {\n  run bash -c \"cat fixtures/list_invalid.yaml | bin/kubeconform -summary -\"\n  [ \"$status\" -eq 1 ]\n  [ \"${lines[0]}\" == 'stdin - ReplicationController bob is invalid: problem validating schema. Check JSON formatting: jsonschema: '\\''/spec/replicas'\\'' does not validate with https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master-standalone/replicationcontroller-v1.json#/properties/spec/properties/replicas/type: expected integer or null, but got string' ]\n  [ \"${lines[1]}\" == 'Summary: 2 resources found parsing stdin - Valid: 1, Invalid: 1, Errors: 0, Skipped: 0' ]\n}\n\n@test \"Pass on valid, empty list\" {\n  run bin/kubeconform -summary fixtures/list_empty_valid.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = 'Summary: 0 resource found in 1 file - Valid: 0, Invalid: 0, Errors: 0, Skipped: 0' ]\n}\n\n@test \"Pass on multi-yaml containing one resource, one list\" {\n  run bin/kubeconform -summary fixtures/multi_with_list.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = 'Summary: 2 resources found in 1 file - Valid: 2, Invalid: 0, Errors: 0, Skipped: 0' ]\n}\n\n@test \"Fail when using HTTPS_PROXY with a failing proxy\" {\n  # This only tests that the HTTPS_PROXY variable is picked up and that it tries to use it\n  run bash -c \"HTTPS_PROXY=127.0.0.1:1234 bin/kubeconform fixtures/valid.yaml\"\n  [ \"$status\" -eq 1 ]\n  [[ \"$output\" == *\"proxyconnect tcp: dial tcp 127.0.0.1:1234: connect: connection refused\"* ]]\n}\n\n@test \"Pass when parsing a very large file\" {\n  run bin/kubeconform -summary fixtures/valid_large.yaml\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = 'Summary: 100000 resources found in 1 file - Valid: 100000, Invalid: 0, Errors: 0, Skipped: 0' ]\n}\n\n@test \"Pass when parsing a very long stream from stdin\" {\n  run bash -c \"cat fixtures/valid_large.yaml | bin/kubeconform -summary\"\n  [ \"$status\" -eq 0 ]\n  [ \"$output\" = 'Summary: 100000 resources found parsing stdin - Valid: 100000, Invalid: 0, Errors: 0, Skipped: 0' ]\n}\n\n@test \"JUnit output can be validated against the Junit schema definition\" {\n  run bash -c \"bin/kubeconform -output junit -summary fixtures/valid.yaml > output.xml\"\n  [ \"$status\" -eq 0 ]\n  run xmllint --noout --schema fixtures/junit.xsd output.xml\n  [ \"$status\" -eq 0 ]\n}\n\n@test \"passes when trying to use a CRD that does not have the JSONSchema set\" {\n  run bash -c \"bin/kubeconform -schema-location default -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' fixtures/httpproxy.yaml\"\n  [ \"$status\" -eq 0 ]\n}\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fixtures",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.234375,
          "content": "module github.com/yannh/kubeconform\n\ngo 1.22\n\nrequire (\n\tgithub.com/hashicorp/go-retryablehttp v0.7.7\n\tgithub.com/santhosh-tekuri/jsonschema/v5 v5.3.1\n\tsigs.k8s.io/yaml v1.4.0\n)\n\nrequire github.com/hashicorp/go-cleanhttp v0.5.2 // indirect\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 1.9052734375,
          "content": "github.com/fatih/color v1.16.0 h1:zmkK9Ngbjj+K0yRhTVONQh1p/HknKYSlNT+vZCzyokM=\ngithub.com/fatih/color v1.16.0/go.mod h1:fL2Sau1YI5c0pdGEVCbKQbLXB6edEj1ZgiY4NijnWvE=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/hashicorp/go-cleanhttp v0.5.2 h1:035FKYIWjmULyFRBKPs8TBQoi0x6d9G4xc9neXJWAZQ=\ngithub.com/hashicorp/go-cleanhttp v0.5.2/go.mod h1:kO/YDlP8L1346E6Sodw+PrpBSV4/SoxCXGY6BqNFT48=\ngithub.com/hashicorp/go-hclog v1.6.3 h1:Qr2kF+eVWjTiYmU7Y31tYlP1h0q/X3Nl3tPGdaB11/k=\ngithub.com/hashicorp/go-hclog v1.6.3/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=\ngithub.com/hashicorp/go-retryablehttp v0.7.7 h1:C8hUCYzor8PIfXHa4UrZkU4VvK8o9ISHxT2Q8+VepXU=\ngithub.com/hashicorp/go-retryablehttp v0.7.7/go.mod h1:pkQpWZeYWskR+D1tR2O5OcBFOxfA7DoAO6xtkuQnHTk=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/santhosh-tekuri/jsonschema/v5 v5.3.1 h1:lZUw3E0/J3roVtGQ+SCrUrg3ON6NgVqpn3+iol9aGu4=\ngithub.com/santhosh-tekuri/jsonschema/v5 v5.3.1/go.mod h1:uToXkOrWAZ6/Oc07xWQrPOhJotwFIyu2bBVN41fcDUY=\ngolang.org/x/sys v0.20.0 h1:Od9JTbYCk261bKm4M/mw7AklTlFYIa0bIp9BgSm1S8Y=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\nsigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=\nsigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}