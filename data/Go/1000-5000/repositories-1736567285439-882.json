{
  "metadata": {
    "timestamp": 1736567285439,
    "page": 882,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "skanehira/docui",
      "stars": 2314,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0478515625,
          "content": "*.swp\n*.snap\n.idea\ndist/\n/prime/\n/stage/\n/parts/\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 0.6767578125,
          "content": "project_name: docui\n\nbuilds:\n  - env:\n    - CGO_ENABLED=0\n    - GO111MODULE=on\n\narchives:\n  - replacements:\n      darwin: Darwin\n      linux: Linux\n      386: i386\n      amd64: x86_64\n\nchecksum:\n  name_template: 'checksums.txt'\n\nsnapshot:\n  name_template: \"{{ .Tag }}-next\"\n\nchangelog:\n  skip: true\n\nbrews:\n  - name: docui\n    github:\n      owner: skanehira\n      name: homebrew-docui\n    folder: Formula\n    description: \"TUI Client for Docker\"\n    homepage: \"https://github.com/skanehira/docui\"\n    commit_author:\n      name: goreleaserbot\n      email: goreleaser@carlosbecker.com\n    dependencies:\n      - go\n    install: |\n      bin.install \"docui\"\n    test: |\n      system \"#{bin}/docui\"\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.375,
          "content": "# build docui\nFROM golang:1.16.0 AS build-docui\nENV GOOS linux\nENV GOARCH amd64\nENV CGO_ENABLED 0\nCOPY . ./src/github.com/skanehira/docui\nWORKDIR /go/src/github.com/skanehira/docui\nRUN go build\n\n# copy artifact from the build stage\nFROM busybox:1.33\nENV TERM \"xterm-256color\"\nCOPY --from=build-docui /go/src/github.com/skanehira/docui/docui /usr/local/bin/docui\n\nENTRYPOINT [\"docui\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2018 skanehira\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.5419921875,
          "content": "# Go parameters\nGOBUILD=go build\nGOCLEAN=go clean\nBINARY_NAME=docui\nDOCKER_BINARY_NAME=docui-docker\n\nexport GO111MODULE=on\n\nall: build\n\nclean:\n\t$(GOCLEAN)\n\nbuild: clean\n\t$(GOBUILD) -o $(BINARY_NAME)\n\n# copy to $GOBIN\ninstall: build\n\tcp -f $(BINARY_NAME) $(GOBIN)/\n\n# build release binary\nrelease: clean\n\tGOOS=darwin GOARCH=amd64 $(GOBUILD) && zip MacOS.zip ./docui && rm -rf ./docui\n\tGOOS=linux GOARCH=amd64 $(GOBUILD) && zip Linux.zip ./docui && rm -rf ./docui\n\ndocker-build:\n\tdocker build -t skanehira/docui .\n\ndocker-push:\n\tdocker push skanehira/docui\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.6123046875,
          "content": "# docui - TUI Client for Docker Written in Go\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/skanehira/docui?)](https://goreportcard.com/report/github.com/skanehira/docui)\n[![CircleCI](https://img.shields.io/circleci/project/github/skanehira/docui.svg?style=flat-square)](https://goreportcard.com/report/github.com/skanehira/docui)\n[![CircleCI](https://img.shields.io/github/release/skanehira/docui.svg?style=flat-square)](https://github.com/skanehira/docui/releases)\n![GitHub All Releases](https://img.shields.io/github/downloads/skanehira/docui/total.svg?style=flat)\n![GitHub commits](https://img.shields.io/github/commits-since/skanehira/docui/1.0.0.svg?style=flat-square)\n\n# This repository is no longer maintenance. Please use [lazydocker](https://github.com/jesseduffield/lazydocker) instead.\n\n## About docui\n![demo](https://github.com/skanehira/docui/blob/images/images/docui.v2-demo.gif?raw=true)\n\ndocui is a TUI Client for Docker.\nIt can do the following:\n\n- image\n    - search/pull/remove\n    - save/import/load\n    - inspect/filtering\n\n- container\n    - create/remove\n    - start/stop/kill\n    - export/commit\n    - inspect/rename/filtering\n    - exec cmd\n\n- volume\n    - create/remove\n    - inspect/filtering\n\n- network\n    - remove\n    - inspect/filtering\n\n## Supported OSes\n- Mac\n- Linux\n\n## Required Tools\n- Go Ver.1.11.4~\n- Docker Engine Ver.18.06.1~\n- Git\n\n## Installation\n### Environment variables\nThe following environment variables must be set.\n\n```\nexport LC_CTYPE=en_US.UTF-8\nexport TERM=xterm-256color\n```\n\n### From Source\n\nIf you have not installed go and set GOPATH/GOBIN,\nyou must install and set env before installing docui.\n\nThis project uses [Go Modules](https://github.com/golang/go/wiki/Modules) for dependencies introduced in Go 1.11.\n\nUse go get or git clone:\n\n```\n$ go get -d github.com/skanehira/docui\n$ cd $GOPATH/src/github.com/skanehira/docui\n$ GO111MODULE=on go install\n```\n\n```\n$ git clone https://github.com/skanehira/docui.git\n$ cd docui/\n$ GO111MODULE=on go install\n```\n\nMake sure your PATH includes the $GOPATH/bin directory so your commands can be easily used:\n\n```sh\nexport PATH=$PATH:$GOPATH/bin\n```\n\n### Homebrew\n\n```sh\n$ brew install docui\n```\n\n### Nix\n\ndocui is available on nixpkgs unstable channel:\n\n```sh\n$ nix-env -i docui\n```\n\n## Update\n\nUse git pull:\n\n```sh\n$ git pull\n$ GO111MODULE=on go install\n```\n\n## Log file\n\nCheck [wiki](https://github.com/skanehira/docui/blob/master/wiki.md).\n\n## Use on Docker\n```\n$ docker run --rm -itv /var/run/docker.sock:/var/run/docker.sock skanehira/docui\n```\n\n## Build Docker Image\n```sh\n$ make docker-build\n```\n\n## Keybindings\n| panel            | operation              | key                                                |\n|------------------|------------------------|----------------------------------------------------|\n| all              | change panel           | <kbd>Tab</kbd> / <kbd>Shift</kbd> + <kbd>Tab</kbd> |\n| all              | quit                   | <kbd>q</kbd>                                       |\n| list panels      | next entry             | <kbd>j</kbd> / <kbd>↓</kbd>                        |\n| list panels      | previous entry         | <kbd>k</kbd> / <kbd>↑</kbd>                        |\n| list panels      | next page              | <kbd>Ctrl</kbd> / <kbd>f</kbd>                     |\n| list panels      | previous page          | <kbd>Ctrl</kbd> / <kbd>b</kbd>                     |\n| list panels      | scroll to top          | <kbd>g</kbd>                                       |\n| list panels      | scroll to bottom       | <kbd>G</kbd>                                       |\n| image list       | pull image             | <kbd>p</kbd>                                       |\n| image list       | search images          | <kbd>f</kbd>                                       |\n| image list       | remove image           | <kbd>d</kbd>                                       |\n| image list       | create container       | <kbd>c</kbd>                                       |\n| image list       | inspect image          | <kbd>Enter</kbd>                                   |\n| image list       | save image             | <kbd>s</kbd>                                       |\n| image list       | import image           | <kbd>i</kbd>                                       |\n| image list       | load image             | <kbd>Ctrl</kbd> + <kbd>l</kbd>                     |\n| image list       | refresh image list     | <kbd>Ctrl</kbd> + <kbd>r</kbd>                     |\n| image list       | filter image           | <kbd>/</kbd>                                       |\n| container list   | inspect container      | <kbd>Enter</kbd>                                   |\n| container list   | remove container       | <kbd>d</kbd>                                       |\n| container list   | start container        | <kbd>u</kbd>                                       |\n| container list   | stop container         | <kbd>s</kbd>                                       |\n| container list   | kill container         | <kbd>Ctrl</kbd> + <kbd>k</kbd>                     |\n| container list   | export container       | <kbd>e</kbd>                                       |\n| container list   | commit container       | <kbd>c</kbd>                                       |\n| container list   | rename container       | <kbd>r</kbd>                                       |\n| container list   | refresh container list | <kbd>Ctrl</kbd> + <kbd>r</kbd>                     |\n| container list   | filter image           | <kbd>/</kbd>                                       |\n| container list   | exec container cmd     | <kbd>Ctrl</kbd> + <kbd>e</kbd>                     |\n| container logs   | show container logs    | <kbd>Ctrl</kbd> + <kbd>l</kbd>                     |\n| volume list      | create volume          | <kbd>c</kbd>                                       |\n| volume list      | remove volume          | <kbd>d</kbd>                                       |\n| volume list      | inspect volume         | <kbd>Enter</kbd>                                   |\n| volume list      | refresh volume list    | <kbd>Ctrl</kbd> + <kbd>r</kbd>                     |\n| volume list      | filter volume          | <kbd>/</kbd>                                       |\n| network list     | inspect network        | <kbd>Enter</kbd>                                   |\n| network list     | remove network         | <kbd>d</kbd>                                       |\n| network list     | filter network         | <kbd>/</kbd>                                       |\n| pull image       | pull image             | <kbd>Enter</kbd>                                   |\n| pull image       | close panel            | <kbd>Esc</kbd>                                     |\n| create container | next input box         | <kbd>Tab</kbd>                                     |\n| create container | previous input box     | <kbd>Shift</kbd> +  <kbd>Tab</kbd>                 |\n| detail           | cursor dwon            | <kbd>j</kbd>                                       |\n| detail           | cursor up              | <kbd>k</kbd>                                       |\n| detail           | next page              | <kbd>Ctrl</kbd> / <kbd>f</kbd>                     |\n| detail           | previous page          | <kbd>Ctrl</kbd> / <kbd>b</kbd>                     |\n| search images    | search image           | <kbd>Enter</kbd>                                   |\n| search images    | close panel            | <kbd>Esc</kbd>                                     |\n| search result    | next image             | <kbd>j</kbd>                                       |\n| search result    | previous image         | <kbd>k</kbd>                                       |\n| search result    | pull image             | <kbd>Enter</kbd>                                   |\n| search result    | close panel            | <kbd>q</kbd>                                       |\n| create volume    | close panel            | <kbd>Esc</kbd>                                     |\n| create volume    | next input box         | <kbd>Tab</kbd>                                     |\n| create volume    | previous input box     | <kbd>Shift</kbd> +  <kbd>Tab</kbd>                 |\n\n## How to use\nFor details of the input panel please refer to [wiki](https://github.com/skanehira/docui/blob/master/wiki.md)\n\n## Alternatives\n- [lazydocker](https://github.com/jesseduffield/lazydocker)\nA simple terminal UI for both docker and docker-compose, written in Go with the gocui library.\n- [docker.vim](https://github.com/skanehira/docker.vim)\nManage docker containers and images in Vim\n- See [Awesome Docker list](https://github.com/veggiemonk/awesome-docker/blob/master/README.md#terminal) for similar tools to work with Docker.\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.5,
          "content": "module github.com/skanehira/docui\n\nrequire (\n\tgithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78 // indirect\n\tgithub.com/Microsoft/go-winio v0.4.11 // indirect\n\tgithub.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 // indirect\n\tgithub.com/docker/distribution v2.7.1+incompatible // indirect\n\tgithub.com/docker/docker v0.7.3-0.20190111153827-295413c9d0e1\n\tgithub.com/docker/go-connections v0.4.0\n\tgithub.com/docker/go-units v0.3.3 // indirect\n\tgithub.com/gdamore/tcell/v2 v2.4.1-0.20210905002822-f057f0a857a1\n\tgithub.com/gogo/protobuf v1.2.0 // indirect\n\tgithub.com/google/go-cmp v0.2.0 // indirect\n\tgithub.com/gorilla/mux v1.7.0 // indirect\n\tgithub.com/konsorten/go-windows-terminal-sequences v1.0.2 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.13\n\tgithub.com/opencontainers/go-digest v1.0.0-rc1 // indirect\n\tgithub.com/opencontainers/image-spec v1.0.1 // indirect\n\tgithub.com/pkg/errors v0.8.1 // indirect\n\tgithub.com/rivo/tview v0.0.0-20211109175620-badfa0f0b301\n\tgithub.com/sirupsen/logrus v1.4.1\n\tgithub.com/stretchr/testify v1.3.0 // indirect\n\tgolang.org/x/net v0.0.0-20190424112056-4829fb13d2c6 // indirect\n\tgolang.org/x/sync v0.0.0-20190423024810-112230192c58 // indirect\n\tgolang.org/x/sys v0.0.0-20211117180635-dee7805ff2e1 // indirect\n\tgolang.org/x/term v0.0.0-20210927222741-03fcf44c2211 // indirect\n\tgolang.org/x/text v0.3.7 // indirect\n\tgolang.org/x/time v0.0.0-20181108054448-85acf8d2951c // indirect\n\tgoogle.golang.org/grpc v1.18.0 // indirect\n\tgotest.tools v2.2.0+incompatible // indirect\n)\n\ngo 1.13\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 9.1357421875,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78 h1:w+iIsaOQNcT7OZ575w+acHgRric5iCyQh+xv+KJ4HB8=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=\ngithub.com/Microsoft/go-winio v0.4.11 h1:zoIOcVf0xPN1tnMVbTtEdI+P8OofVk3NObnwOQ6nK2Q=\ngithub.com/Microsoft/go-winio v0.4.11/go.mod h1:VhR8bwka0BXejwEJY73c50VrPtXAaKcyvVC4A4RozmA=\ngithub.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 h1:TngWCqHvy9oXAN6lEVMRuU21PR1EtLVZJmdB18Gu3Rw=\ngithub.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5/go.mod h1:lmUJ/7eu/Q8D7ML55dXQrVaamCz2vxCfdQBasLZfHKk=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/docker/distribution v2.7.1+incompatible h1:a5mlkVzth6W5A4fOsS3D2EO5BUmsJpcB+cRlLU7cSug=\ngithub.com/docker/distribution v2.7.1+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=\ngithub.com/docker/docker v0.7.3-0.20190111153827-295413c9d0e1 h1:5Z3Uksuiv0lpPslfRA25dYUV85hI+Pfvz/Pi1NM2wPA=\ngithub.com/docker/docker v0.7.3-0.20190111153827-295413c9d0e1/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=\ngithub.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-units v0.3.3 h1:Xk8S3Xj5sLGlG5g67hJmYMmUgXv5N4PhkjJHHqrwnTk=\ngithub.com/docker/go-units v0.3.3/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/gdamore/encoding v1.0.0 h1:+7OoQ1Bc6eTm5niUzBa0Ctsh6JbMW6Ra+YNuAtDBdko=\ngithub.com/gdamore/encoding v1.0.0/go.mod h1:alR0ol34c49FCSBLjhosxzcPHQbf2trDkoo5dl+VrEg=\ngithub.com/gdamore/tcell/v2 v2.4.1-0.20210905002822-f057f0a857a1 h1:QqwPZCwh/k1uYqq6uXSb9TRDhTkfQbO80v8zhnIe5zM=\ngithub.com/gdamore/tcell/v2 v2.4.1-0.20210905002822-f057f0a857a1/go.mod h1:Az6Jt+M5idSED2YPGtwnfJV0kXohgdCBPmHGSYc1r04=\ngithub.com/gogo/protobuf v1.2.0 h1:xU6/SpYbvkNYiptHJYEDRseDLvYE7wSqhYYNy0QSUzI=\ngithub.com/gogo/protobuf v1.2.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0 h1:P3YflyNX/ehuJFLhxviNdFxQPkGK5cDcApsge1SqnvM=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/google/go-cmp v0.2.0 h1:+dTQ8DZQJz0Mb/HjFlkptS1FeQ4cWSnN941F8aEG4SQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/gorilla/mux v1.7.0 h1:tOSd0UKHQd6urX6ApfOn4XdBMY6Sh1MfxV3kmaazO+U=\ngithub.com/gorilla/mux v1.7.0/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.2 h1:DB17ag19krx9CFsz4o3enTrPXyIXCl+2iCXH/aMAp9s=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/mattn/go-runewidth v0.0.13 h1:lTGmDsbAYt5DmK6OnoV7EuIF1wEIFAcxld6ypU4OSgU=\ngithub.com/mattn/go-runewidth v0.0.13/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/opencontainers/go-digest v1.0.0-rc1 h1:WzifXhOVOEOuFYOJAW6aQqW0TooG2iki3E3Ii+WN7gQ=\ngithub.com/opencontainers/go-digest v1.0.0-rc1/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=\ngithub.com/opencontainers/image-spec v1.0.1 h1:JMemWkRwHx4Zj+fVxWoMCFm/8sYGGrUVojFA6h/TRcI=\ngithub.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=\ngithub.com/pkg/errors v0.8.1 h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/tview v0.0.0-20211109175620-badfa0f0b301 h1:FbY5ESMtIcvCyBUQyI9QJUZFe3JtVfTUzBzG1CjrCDY=\ngithub.com/rivo/tview v0.0.0-20211109175620-badfa0f0b301/go.mod h1:WIfMkQNY+oq/mWwtsjOYHIZBuwthioY2srOmljJkTnk=\ngithub.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/sirupsen/logrus v1.4.1 h1:GL2rEmy6nsikmW0r8opw9JIRScdMF5hA8cOYLH7In1k=\ngithub.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190424112056-4829fb13d2c6 h1:FP8hkuE6yUEaJnK7O2eTuejKWwW+Rhfj80dQ2JcKxCU=\ngolang.org/x/net v0.0.0-20190424112056-4829fb13d2c6/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58 h1:8gQV6CLnAEikrhgkHFbMAEhagSSnXWGV915qUMm9mrU=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210309074719-68d13333faf2/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211117180635-dee7805ff2e1 h1:kwrAHlwJ0DUBZwQ238v+Uod/3eZ8B2K5rYsUHBQvzmI=\ngolang.org/x/sys v0.0.0-20211117180635-dee7805ff2e1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201210144234-2321bbc49cbf/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210220032956-6a3ed077a48d/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211 h1:JGgROgKl9N8DuW20oFS5gxc+lE67/N3FcwmBPMe7ArY=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/time v0.0.0-20181108054448-85acf8d2951c h1:fqgJT0MGcGpPgpWU7VRdRjuArfcOvC4AoJmILihzhDg=\ngolang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180828015842-6cd1fcedba52/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8 h1:Nw54tB0rB7hY/N0NQvRW8DG4Yk3Q6T9cu9RcFQDu1tc=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/grpc v1.18.0 h1:IZl7mfBGfbhYx2p2rKRtYgDFw6SBz+kclmxYrCksPPA=\ngoogle.golang.org/grpc v1.18.0/go.mod h1:6QZJwpn2B+Zp71q/5VxRsJ6NXXVCE5NRUHRo+f3cWCs=\ngotest.tools v2.2.0+incompatible h1:VsBPFP1AI068pPrMxtb/S8Zkgf9xEmTLJjfM+P5UIEo=\ngotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=\nhonnef.co/go/tools v0.0.0-20180728063816-88497007e858/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\n"
        },
        {
          "name": "gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 1.7138671875,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"runtime\"\n\n\t\"github.com/docker/docker/client\"\n\t\"github.com/mattn/go-runewidth\"\n\t\"github.com/rivo/tview\"\n\t\"github.com/skanehira/docui/common\"\n\t\"github.com/skanehira/docui/docker\"\n\t\"github.com/skanehira/docui/gui\"\n)\n\nvar (\n\tendpoint = flag.String(\"endpoint\", client.DefaultDockerHost, \"Docker endpoint\")\n\tcert     = flag.String(\"cert\", \"\", \"cert.pem file path\")\n\tkey      = flag.String(\"key\", \"\", \"key.pem file path\")\n\tca       = flag.String(\"ca\", \"\", \"ca.pem file path\")\n\tapi      = flag.String(\"api\", \"1.39\", \"api version\")\n\tlogFile  = flag.String(\"log\", \"\", \"log file path\")\n\tlogLevel = flag.String(\"log-level\", \"info\", \"log level\")\n)\n\nfunc init() {\n\tif runtime.GOOS == \"windows\" && runewidth.IsEastAsian() {\n\t\ttview.Borders.Horizontal = '-'\n\t\ttview.Borders.Vertical = '|'\n\t\ttview.Borders.TopLeft = '+'\n\t\ttview.Borders.TopRight = '+'\n\t\ttview.Borders.BottomLeft = '+'\n\t\ttview.Borders.BottomRight = '+'\n\t\ttview.Borders.LeftT = '|'\n\t\ttview.Borders.RightT = '|'\n\t\ttview.Borders.TopT = '-'\n\t\ttview.Borders.BottomT = '-'\n\t\ttview.Borders.Cross = '+'\n\t\ttview.Borders.HorizontalFocus = '='\n\t\ttview.Borders.VerticalFocus = '|'\n\t\ttview.Borders.TopLeftFocus = '+'\n\t\ttview.Borders.TopRightFocus = '+'\n\t\ttview.Borders.BottomLeftFocus = '+'\n\t\ttview.Borders.BottomRightFocus = '+'\n\t}\n}\n\nfunc run() int {\n\tcommon.NewLogger(*logLevel, *logFile)\n\n\tdocker.NewDocker(docker.NewClientConfig(*endpoint, *cert, *key, *ca, *api))\n\tif _, err := docker.Client.Info(context.TODO()); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\treturn 1\n\t}\n\n\tgui := gui.New()\n\n\tif err := gui.Start(); err != nil {\n\t\tcommon.Logger.Errorf(\"cannot start docui: %s\", err)\n\t\treturn 1\n\t}\n\n\treturn 0\n}\n\nfunc main() {\n\tflag.Parse()\n\tos.Exit(run())\n}\n"
        },
        {
          "name": "wiki.md",
          "type": "blob",
          "size": 5.1171875,
          "content": "# About docui\ndocui is a simple TUI Client for docker.\nSupported OS is Linux/Mac only.\n\nAlso, it supports UNIX domain socket, TCP, http/https.\n\n# Installation\nYou have to install golang and set $GOPATH and $GOBIN to ~/.bashrc.\n\n## 1. Install go\n\n### Mac\n```sh\nbrew intall golang\n```\nIf you use [`Linuxbrew`](https://docs.brew.sh/Homebrew-on-Linux) on Linux, you can install via the command above.\n\n### CentOS\n```sh\nyum install golang\n```\n\n### Debian/Ubuntu\n```sh\napt install golang\n```\n\n### Fedora\n```sh\ndnf install golang\n```\n\n### Add ~/.bashrc\n```sh\n# add the following to ~/.bashrc\nexport GOPATH=/to/your/path\nexport GOBIN=$GOPATH/bin\nexport PATH=$PATH:$GOBIN\n```\n\n### Reload ~/.bashrc\n```sh\nresource ~/.bashrc\n```\n\n## 2. Install Docker\nIf you don't have docker installed,\nplease see docker official install guide for installion instructions.\n\nhttps://www.docker.com/get-started\n\n## 3. Install Git\n### Mac\n```sh\nbrew install git\n```\nIf you use [`Linuxbrew`](https://docs.brew.sh/Homebrew-on-Linux) on Linux, you can install via the above command.\n\n### CentOS\n```sh\nyum install git\n```\n\n### Debian/Ubuntu\n```sh\napt install git\n```\n\n### Fedora\n```sh\ndnf install git\n```\n\n## 3. Install docui\n\nThis project uses [Go Modules](https://github.com/golang/go/wiki/Modules).\nPlease use Go version 1.11.4 or higher.\n\nUse go get or git clone:\n\n```sh\n$ go get -d github.com/skanehira/docui\n$ cd $GOPATH/src/github.com/skanehira/docui\n$ GO111MODULE=on go install\n```\n\n```sh\n$ git clone https://github.com/skanehira/docui.git\n$ cd docui/\n$ GO111MODULE=on go install\n```\n\nMake sure your PATH includes the $GOPATH/bin directory so your commands can be easily used:\n\n```sh\nexport PATH=$PATH:$GOPATH/bin\n```\n\n## 4. Update docui\n\nUse git pull:\n\n```sh\n$ git pull\n$ GO111MODULE=on go install\n```\n\n\n## 5. Use on Docker\nIf you want to use docui on docker.\n\n```sh\n$ docker run --rm -itv /var/run/docker.sock:/var/run/docker.sock skanehira/docui\n```\n\n## 6. Build Docker Image\nIf you want to customize image.\n\n```sh\n$ make docker-build\n```\n\n# How to use\nRefer to the [keybinding](https://github.com/skanehira/docui#Keybindings) for panel operations.\nI will explain the items of each panel here.\n\n## pull image panel\n\n- Name\nPlease enter the docker image name you want to pull.\nIf you want to specify the version, please input as below.\n\n```\nmysql:5.7\n```\n\n## search images panel\n\nPlease enter the image name on the Docker Hub you want to search.\nThis operation works like `docker search`\n\n## save image panel\n\nPlease enter the file path to save the selected image.\nIt must be absolute path or relative path.\n\n## import image panel\n\nPlease enter the path of the image you want to import.\nIt must be absolute path or relative path.\n\n## load image panel\n\nPlease enter the path of the image you want to load.\nIt must be absolute path or relative path.\n\n## create container panel\n- Name\nContainer name.\n\n- HostPort\nPort of container to be mapping.\n\n- Port\nPort of the host OS to be mapped.\n\n- VolumeType\nSpecify VolumeType bind or volume.\n\n- HostVolume\nIf VolumeType is bind, path of the host OS that you want to mount.\nIt's must be absolute path.\nIt's similar to docker command `docker -v /to/host/path:/to/container/path`.\n\nIf VolumeType is volume, specify the docker volume.\nIt's similar to docker command `docker -v docekr/volume:/to/container/path`.\n\n- Volume\nPath of the container that you want to mount.\nIt must be an absolute path.\n\n- Image\nSelected image id.\n\n- Attach\nIf you want to attach container, please Enter.\n\n- User\nIf you want to attach container, please input user name.\n\n- Env\nThe environment variable setting value can be defined by variables like `$PATH`.\nIn that case, we will obtain the value from the OS environment variable.\nIf you want to add multiple environment variables, please input as below.\n\n```\nGOPATH=~/go,GOBIN=~/go/bin,PATH=$PATH\n```\n\n- Cmd\nIf you want to add command arguments,\nplease input as below.\n\n```\n/bin/bash,hello\n```\n\n## export container panel\nPlease enter the file path to save the selected container.\nIt must be an absolute or a relative path.\n\n## commit container panel\n- Container\nSelected container id.\n\n- Repository\nPlease enter the image name of the committed container.\n\n- Tag\nIf tag is empty, latest will be used.\n\n## create volume panel\n- Name\nSpecify volume name.\n\n- Driver\nSpecify volume driver name.\n\n- Labels\nSet metadata for a volume.\nIf you want to specify multiple labels, please enter as below.\n\n```\nOS=Linux TYPE=nfs\n```\n\n- Options\nSet driver specific options.\nIf you want to specify multiple options, please enter as below.\n\n```\ntype=nfs o=addr=192.168.1.1,rw device=:/path/to/dir\n```\n\n## Configuration\n\n### Command-Line Options\n\nSupport custom endpoint:\n\n```sh\n$ docui -h\nUsage of docui:\n  -api string\n        api version (default \"1.39\")\n  -ca string\n        ca.pem file path\n  -cert string\n        cert.pem file path\n  -endpoint string\n        Docker endpoint (default \"unix:///var/run/docker.sock\")\n  -key string\n        key.pem file path\n  -log string\n        log file path\n  -log-level string\n        log level (default \"info\")\n```\n\nOr set environment variables:\n\n- `DOCKER_HOST`\n- `DOCKER_TLS_VERIFY`\n- `DOCKER_CERT_PATH`\n\nThese environment variables take precedence over command-line options.\n"
        }
      ]
    }
  ]
}