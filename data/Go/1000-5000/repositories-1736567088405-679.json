{
  "metadata": {
    "timestamp": 1736567088405,
    "page": 679,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "getkin/kin-openapi",
      "stars": 2699,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.017578125,
          "content": "*.yml text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3349609375,
          "content": "# Binaries for programs and plugins\n*.exe\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Project-local glide cache, RE: https://github.com/Masterminds/glide/issues/736\n.glide/\n\n # Macos file system\n.DS_Store\n\n # IntelliJ / GoLand\n.idea\n.vscode\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "MIT License\n\nCopyright (c) 2017-2018 the project authors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.7841796875,
          "content": "[![CI](https://github.com/getkin/kin-openapi/workflows/go/badge.svg)](https://github.com/getkin/kin-openapi/actions)\n[![Go Report Card](https://goreportcard.com/badge/github.com/getkin/kin-openapi)](https://goreportcard.com/report/github.com/getkin/kin-openapi)\n[![GoDoc](https://godoc.org/github.com/getkin/kin-openapi?status.svg)](https://godoc.org/github.com/getkin/kin-openapi)\n[![Join Gitter Chat Channel -](https://badges.gitter.im/getkin/kin.svg)](https://gitter.im/getkin/kin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# Introduction\nA [Go](https://golang.org) project for handling [OpenAPI](https://www.openapis.org/) files. We target:\n* [OpenAPI `v2.0`](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md) (formerly known as Swagger)\n* [OpenAPI `v3.0`](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md)\n* [OpenAPI `v3.1`](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md) Soon! [Tracking issue here.](https://github.com/getkin/kin-openapi/issues/230)\n\nLicensed under the [MIT License](./LICENSE).\n\n## Contributors, users and sponsors\nThe project has received pull requests [from many people](https://github.com/getkin/kin-openapi/graphs/contributors). Thanks to everyone!\n\nPlease, [give back to this project](https://github.com/sponsors/fenollp) by becoming a sponsor.\n\nHere's some projects that depend on _kin-openapi_:\n  * [github.com/go-fuego/fuego](https://github.com/go-fuego/fuego) - \"Framework generating OpenAPI 3 spec from source code\"\n  * [github.com/a-h/rest](https://github.com/a-h/rest) - \"Generate OpenAPI 3.0 specifications from Go code without annotations or magic comments\"\n  * [github.com/Tufin/oasdiff](https://github.com/Tufin/oasdiff) - \"A diff tool for OpenAPI Specification 3\"\n  * [github.com/danielgtaylor/apisprout](https://github.com/danielgtaylor/apisprout) - \"Lightweight, blazing fast, cross-platform OpenAPI 3 mock server with validation\"\n  * [github.com/deepmap/oapi-codegen](https://github.com/deepmap/oapi-codegen) - \"Generate Go client and server boilerplate from OpenAPI 3 specifications\"\n  * [github.com/dunglas/vulcain](https://github.com/dunglas/vulcain) - \"Use HTTP/2 Server Push to create fast and idiomatic client-driven REST APIs\"\n  * [github.com/danielgtaylor/restish](https://github.com/danielgtaylor/restish) - \"...a CLI for interacting with REST-ish HTTP APIs with some nice features built-in\"\n  * [github.com/goadesign/goa](https://github.com/goadesign/goa) - \"Design-based APIs and microservices in Go\"\n  * [github.com/hashicorp/nomad-openapi](https://github.com/hashicorp/nomad-openapi) - \"Nomad is an easy-to-use, flexible, and performant workload orchestrator that can deploy a mix of microservice, batch, containerized, and non-containerized applications. Nomad is easy to operate and scale and has native Consul and Vault integrations.\"\n  * [gitlab.com/jamietanna/httptest-openapi](https://gitlab.com/jamietanna/httptest-openapi) ([*blog post*](https://www.jvt.me/posts/2022/05/22/go-openapi-contract-test/)) - \"Go OpenAPI Contract Verification for use with `net/http`\"\n  * [github.com/SIMITGROUP/openapigenerator](https://github.com/SIMITGROUP/openapigenerator) - \"Openapi v3 microservices generator\"\n  * [https://github.com/projectsveltos/addon-controller](https://github.com/projectsveltos/addon-controller) - \"Kubernetes add-on controller designed to manage tens of clusters.\"\n  * (Feel free to add your project by [creating an issue](https://github.com/getkin/kin-openapi/issues/new) or a pull request)\n\n## Alternatives\n* [libopenapi](https://github.com/pb33f/libopenapi) a fully featured, high performance OpenAPI 3.1, 3.0 and Swagger parser, library, validator and toolkit\n* [go-swagger](https://github.com/go-swagger/go-swagger) stated [*OpenAPIv3 won't be supported*](https://github.com/go-swagger/go-swagger/issues/1122#issuecomment-575968499)\n* [swaggo](https://github.com/swaggo/swag) has an [open issue on OpenAPIv3](https://github.com/swaggo/swag/issues/386)\n* [go-openapi](https://github.com/go-openapi)'s [spec3](https://github.com/go-openapi/spec3)\n\t* an iteration on [spec](https://github.com/go-openapi/spec) (for OpenAPIv2)\n\t* see [README](https://github.com/go-openapi/spec3/tree/3fab9faa9094e06ebd19ded7ea96d156c2283dca#oai-object-model---) for the missing parts\n\nBe sure to check [OpenAPI Initiative](https://github.com/OAI)'s [great tooling list](https://github.com/OAI/OpenAPI-Specification/blob/master/IMPLEMENTATIONS.md) as well as [OpenAPI.Tools](https://openapi.tools/).\n\n# Structure\n  * _openapi2_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/openapi2))\n    * Support for OpenAPI 2 files, including serialization, deserialization, and validation.\n  * _openapi2conv_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/openapi2conv))\n    * Converts OpenAPI 2 files into OpenAPI 3 files.\n  * _openapi3_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/openapi3))\n    * Support for OpenAPI 3 files, including serialization, deserialization, and validation.\n  * _openapi3filter_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/openapi3filter))\n    * Validates HTTP requests and responses\n    * Provides a [gorilla/mux](https://github.com/gorilla/mux) router for OpenAPI operations\n  * _openapi3gen_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/openapi3gen))\n    * Generates `*openapi3.Schema` values for Go types.\n\n# Some recipes\n## Validating an OpenAPI document\n```shell\ngo run github.com/getkin/kin-openapi/cmd/validate@latest [--circular] [--defaults] [--examples] [--ext] [--patterns] -- <local YAML or JSON file>\n```\n\n## Loading OpenAPI document\nUse `openapi3.Loader`, which resolves all references:\n```go\nloader := openapi3.NewLoader()\ndoc, err := loader.LoadFromFile(\"my-openapi-spec.json\")\n```\n\n## Getting OpenAPI operation that matches request\n```go\nloader := openapi3.NewLoader()\ndoc, _ := loader.LoadFromData([]byte(`...`))\n_ = doc.Validate(loader.Context)\nrouter, _ := gorillamux.NewRouter(doc)\nroute, pathParams, _ := router.FindRoute(httpRequest)\n// Do something with route.Operation\n```\n\n## Validating HTTP requests/responses\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/getkin/kin-openapi/openapi3\"\n\t\"github.com/getkin/kin-openapi/openapi3filter\"\n\t\"github.com/getkin/kin-openapi/routers/gorillamux\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tloader := &openapi3.Loader{Context: ctx, IsExternalRefsAllowed: true}\n\tdoc, _ := loader.LoadFromFile(\".../My-OpenAPIv3-API.yml\")\n\t// Validate document\n\t_ = doc.Validate(ctx)\n\trouter, _ := gorillamux.NewRouter(doc)\n\thttpReq, _ := http.NewRequest(http.MethodGet, \"/items\", nil)\n\n\t// Find route\n\troute, pathParams, _ := router.FindRoute(httpReq)\n\n\t// Validate request\n\trequestValidationInput := &openapi3filter.RequestValidationInput{\n\t\tRequest:    httpReq,\n\t\tPathParams: pathParams,\n\t\tRoute:      route,\n\t}\n\t_ = openapi3filter.ValidateRequest(ctx, requestValidationInput)\n\n\t// Handle that request\n\t// --> YOUR CODE GOES HERE <--\n\tresponseHeaders := http.Header{\"Content-Type\": []string{\"application/json\"}}\n\tresponseCode := 200\n\tresponseBody := []byte(`{}`)\n\n\t// Validate response\n\tresponseValidationInput := &openapi3filter.ResponseValidationInput{\n\t\tRequestValidationInput: requestValidationInput,\n\t\tStatus:                 responseCode,\n\t\tHeader:                 responseHeaders,\n\t}\n\tresponseValidationInput.SetBodyBytes(responseBody)\n\t_ = openapi3filter.ValidateResponse(ctx, responseValidationInput)\n}\n```\n\n## Custom content type for body of HTTP request/response\n\nBy default, the library parses a body of the HTTP request and response\nif it has one of the following content types: `\"text/plain\"` or `\"application/json\"`.\nTo support other content types you must register decoders for them:\n\n```go\nfunc main() {\n\t// ...\n\n\t// Register a body's decoder for content type \"application/xml\".\n\topenapi3filter.RegisterBodyDecoder(\"application/xml\", xmlBodyDecoder)\n\n\t// Now you can validate HTTP request that contains a body with content type \"application/xml\".\n\trequestValidationInput := &openapi3filter.RequestValidationInput{\n\t\tRequest:    httpReq,\n\t\tPathParams: pathParams,\n\t\tRoute:      route,\n\t}\n\tif err := openapi3filter.ValidateRequest(ctx, requestValidationInput); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// ...\n\n\t// And you can validate HTTP response that contains a body with content type \"application/xml\".\n\tif err := openapi3filter.ValidateResponse(ctx, responseValidationInput); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc xmlBodyDecoder(body io.Reader, h http.Header, schema *openapi3.SchemaRef, encFn openapi3filter.EncodingFn) (decoded any, err error) {\n\t// Decode body to a primitive, []any, or map[string]any.\n}\n```\n\n## Custom function to check uniqueness of array items\n\nBy default, the library checks unique items using the following predefined function:\n\n```go\nfunc isSliceOfUniqueItems(xs []any) bool {\n\ts := len(xs)\n\tm := make(map[string]struct{}, s)\n\tfor _, x := range xs {\n\t\tkey, _ := json.Marshal(&x)\n\t\tm[string(key)] = struct{}{}\n\t}\n\treturn s == len(m)\n}\n```\n\nIn the predefined function `json.Marshal` is used to generate a string that can\nbe used as a map key which is to check the uniqueness of an array\nwhen the array items are objects or arrays. You can register\nyou own function according to your input data to get better performance:\n\n```go\nfunc main() {\n\t// ...\n\n\t// Register a customized function used to check uniqueness of array.\n\topenapi3.RegisterArrayUniqueItemsChecker(arrayUniqueItemsChecker)\n\n\t// ... other validate codes\n}\n\nfunc arrayUniqueItemsChecker(items []any) bool {\n\t// Check the uniqueness of the input slice\n}\n```\n\n## Custom function to change schema error messages\n\nBy default, the error message returned when validating a value includes the error reason, the schema, and the input value.\n\nFor example, given the following schema:\n\n```json\n{\n  \"type\": \"string\",\n  \"allOf\": [\n    { \"pattern\": \"[A-Z]\" },\n    { \"pattern\": \"[a-z]\" },\n    { \"pattern\": \"[0-9]\" },\n    { \"pattern\": \"[!@#$%^&*()_+=-?~]\" }\n  ]\n}\n```\n\nPassing the input value `\"secret\"` to this schema will produce the following error message:\n\n```\nstring doesn't match the regular expression \"[A-Z]\"\nSchema:\n  {\n    \"pattern\": \"[A-Z]\"\n  }\n\nValue:\n  \"secret\"\n```\n\nIncluding the original value in the error message can be helpful for debugging, but it may not be appropriate for sensitive information such as secrets.\n\nTo disable the extra details in the schema error message, you can set the `openapi3.SchemaErrorDetailsDisabled` option to `true`:\n\n```go\nfunc main() {\n\t// ...\n\n\t// Disable schema error detailed error messages\n\topenapi3.SchemaErrorDetailsDisabled = true\n\n\t// ... other validate codes\n}\n```\n\nThis will shorten the error message to present only the reason:\n\n```\nstring doesn't match the regular expression \"[A-Z]\"\n```\n\nFor more fine-grained control over the error message, you can pass a custom `openapi3filter.Options` object to `openapi3filter.RequestValidationInput` that includes a `openapi3filter.CustomSchemaErrorFunc`.\n\n```go\nfunc validationOptions() *openapi3filter.Options {\n\toptions := &openapi3filter.Options{}\n\toptions.WithCustomSchemaErrorFunc(safeErrorMessage)\n\treturn options\n}\n\nfunc safeErrorMessage(err *openapi3.SchemaError) string {\n\treturn err.Reason\n}\n```\n\nThis will change the schema validation errors to return only the `Reason` field, which is guaranteed to not include the original value.\n\n## Reconciling component $ref types\n\n`ReferencesComponentInRootDocument` is a useful helper function to check if a component reference\ncoincides with a reference in the root document's component objects fixed fields.\n\nThis can be used to determine if two schema definitions are of the same structure, helpful for\ncode generation tools when generating go type models.\n\n```go\ndoc, err = loader.LoadFromFile(\"openapi.yml\")\n\nfor _, path := range doc.Paths.InMatchingOrder() {\n\tpathItem := doc.Paths.Find(path)\n\n\tif pathItem.Get == nil || pathItem.Get.Responses.Status(200) {\n\t\tcontinue\n\t}\n\n\tfor _, s := range pathItem.Get.Responses.Status(200).Value.Content {\n\t\tname, match := ReferencesComponentInRootDocument(doc, s.Schema)\n\t\tfmt.Println(path, match, name) // /record true #/components/schemas/BookRecord\n\t}\n}\n```\n\n## CHANGELOG: Sub-v1 breaking API changes\n\n### v0.129.0\n* `openapi3.Discriminator.Mapping` and `openapi3.OAuthFlow.Scopes` fields went from a `map[string]string` to the new type `StringMap`\n\n### v0.127.0\n* Downgraded `github.com/gorilla/mux` dep from `1.8.1` to `1.8.0`.\n\n### v0.126.0\n* `openapi3.CircularReferenceError` and `openapi3.CircularReferenceCounter` are removed. `openapi3.Loader` now implements reference backtracking, so any kind of circular references should be properly resolved.\n* `InternalizeRefs` now takes a refNameResolver that has access to `openapi3.T` and more properties of the reference needing resolving.\n* The `DefaultRefNameResolver` has been updated, choosing names that will be less likely to collide with each other. Because of this internalized specs will likely change slightly.\n* `openapi3.Format` and `openapi3.FormatCallback` are removed and the type of `openapi3.SchemaStringFormats` has changed.\n\n### v0.125.0\n* The `openapi3filter.ErrFunc` and `openapi3filter.LogFunc` func types now take the validated request's context as first argument.\n\n### v0.124.0\n* `openapi3.Schema.Type` & `openapi2.Parameter.Type` fields went from a `string` to the type `*Type` with methods: `Includes`, `Is`, `Permits` & `Slice`.\n\n### v0.122.0\n* `Paths` field of `openapi3.T` is now a pointer\n* `Responses` field of `openapi3.Operation` is now a pointer\n* `openapi3.Paths` went from `map[string]*PathItem` to a struct with an `Extensions` field and methods: `Set`, `Value`, `Len`, `Map`, and `New*`.\n* `openapi3.Callback` went from `map[string]*PathItem` to a struct with an `Extensions` field and methods: `Set`, `Value`, `Len`, `Map`, and `New*`.\n* `openapi3.Responses` went from `map[string]*ResponseRef` to a struct with an `Extensions` field and methods: `Set`, `Value`, `Len`, `Map`, and `New*`.\n* `(openapi3.Responses).Get(int)` renamed to `(*openapi3.Responses).Status(int)`\n\n### v0.121.0\n* Introduce `openapi3.RequestBodies` (an alias on `map[string]*openapi3.ResponseRef`) and use it in place of `openapi3.Responses` for field `openapi3.Components.Responses`.\n\n### v0.116.0\n* Dropped `openapi3filter.DefaultOptions`. Use `&openapi3filter.Options{}` directly instead.\n\n### v0.113.0\n* The string format `email` has been removed by default. To use it please call `openapi3.DefineStringFormat(\"email\", openapi3.FormatOfStringForEmail)`.\n* Field `openapi3.T.Components` is now a pointer.\n* Fields `openapi3.Schema.AdditionalProperties` and `openapi3.Schema.AdditionalPropertiesAllowed` are replaced by `openapi3.Schema.AdditionalProperties.Schema` and `openapi3.Schema.AdditionalProperties.Has` respectively.\n* Type `openapi3.ExtensionProps` is now just `map[string]any` and extensions are accessible through the `Extensions` field.\n\n### v0.112.0\n* `(openapi3.ValidationOptions).ExamplesValidationDisabled` has been unexported.\n* `(openapi3.ValidationOptions).SchemaFormatValidationEnabled` has been unexported.\n* `(openapi3.ValidationOptions).SchemaPatternValidationDisabled` has been unexported.\n\n### v0.111.0\n* Changed `func (*_) Validate(ctx context.Context) error` to `func (*_) Validate(ctx context.Context, opts ...ValidationOption) error`.\n* `openapi3.WithValidationOptions(ctx context.Context, opts *ValidationOptions) context.Context` prototype changed to `openapi3.WithValidationOptions(ctx context.Context, opts ...ValidationOption) context.Context`.\n\n### v0.101.0\n* `openapi3.SchemaFormatValidationDisabled` has been removed in favour of an option `openapi3.EnableSchemaFormatValidation()` passed to `openapi3.T.Validate`. The default behaviour is also now to not validate formats, as the OpenAPI spec mentions the `format` is an open value.\n\n### v0.84.0\n* The prototype of `openapi3gen.NewSchemaRefForValue` changed:\n\t* It no longer returns a map but that is still accessible under the field `(*Generator).SchemaRefs`.\n\t* It now takes in an additional argument (basically `doc.Components.Schemas`) which gets written to so `$ref` cycles can be properly handled.\n\n### v0.61.0\n* Renamed `openapi2.Swagger` to `openapi2.T`.\n* Renamed `openapi2conv.FromV3Swagger` to `openapi2conv.FromV3`.\n* Renamed `openapi2conv.ToV3Swagger` to `openapi2conv.ToV3`.\n* Renamed `openapi3.LoadSwaggerFromData` to `openapi3.LoadFromData`.\n* Renamed `openapi3.LoadSwaggerFromDataWithPath` to `openapi3.LoadFromDataWithPath`.\n* Renamed `openapi3.LoadSwaggerFromFile` to `openapi3.LoadFromFile`.\n* Renamed `openapi3.LoadSwaggerFromURI` to `openapi3.LoadFromURI`.\n* Renamed `openapi3.NewSwaggerLoader` to `openapi3.NewLoader`.\n* Renamed `openapi3.Swagger` to `openapi3.T`.\n* Renamed `openapi3.SwaggerLoader` to `openapi3.Loader`.\n* Renamed `openapi3filter.ValidationHandler.SwaggerFile` to `openapi3filter.ValidationHandler.File`.\n* Renamed `routers.Route.Swagger` to `routers.Route.Spec`.\n\n### v0.51.0\n* Type `openapi3filter.Route` moved to `routers` (and `Route.Handler` was dropped. See https://github.com/getkin/kin-openapi/issues/329)\n* Type `openapi3filter.RouteError` moved to `routers` (so did `ErrPathNotFound` and `ErrMethodNotAllowed` which are now `RouteError`s)\n* Routers' `FindRoute(...)` method now takes only one argument: `*http.Request`\n* `getkin/kin-openapi/openapi3filter.Router` moved to `getkin/kin-openapi/routers/legacy`\n* `openapi3filter.NewRouter()` and its related `WithSwaggerFromFile(string)`, `WithSwagger(*openapi3.Swagger)`, `AddSwaggerFromFile(string)` and `AddSwagger(*openapi3.Swagger)` are all replaced with a single `<router package>.NewRouter(*openapi3.Swagger)`\n\t* NOTE: the `NewRouter(doc)` call now requires that the user ensures `doc` is valid (`doc.Validate() != nil`). This used to be asserted.\n\n### v0.47.0\nField `(*openapi3.SwaggerLoader).LoadSwaggerFromURIFunc` of type `func(*openapi3.SwaggerLoader, *url.URL) (*openapi3.Swagger, error)` was removed after the addition of the field `(*openapi3.SwaggerLoader).ReadFromURIFunc` of type `func(*openapi3.SwaggerLoader, *url.URL) ([]byte, error)`.\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs.sh",
          "type": "blob",
          "size": 0.689453125,
          "content": "#!/bin/bash -eux\nset -o pipefail\n\noutdir=.github/docs\nmkdir -p \"$outdir\"\nfor pkgpath in $(git ls-files | grep  / | while read -r path; do dirname \"$path\"; done | sort -u | grep -vE '[.]git|testdata|internal|cmd/'); do\n\techo $pkgpath\n\tgo doc -all ./\"$pkgpath\" | tee \"$outdir/${pkgpath////_}.txt\"\ndone\n\ngit --no-pager diff -- .github/docs/\n\ncount_missing_mentions() {\n\tlocal errors=0\n\tfor thing in $(git --no-pager diff -- .github/docs/ \\\n\t\t| grep -vE '[-]{3}' \\\n\t\t| grep -Eo '^-[^ ]+ ([^ (]+)[ (]' \\\n\t\t| sed 's%(% %' \\\n\t\t| cut -d' ' -f2); do\n\t\tif ! grep -A999999 '## Sub-v0 breaking API changes' README.md | grep -F \"$thing\"; then\n\t\t\t((errors++)) || true\n\t\tfi\n\tdone\n\treturn $errors\n}\ncount_missing_mentions\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.7216796875,
          "content": "module github.com/getkin/kin-openapi\n\ngo 1.22.5\n\nrequire (\n\tgithub.com/go-openapi/jsonpointer v0.21.0\n\tgithub.com/gorilla/mux v1.8.0\n\tgithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826\n\tgithub.com/oasdiff/yaml v0.0.0-20241210131133-6b86fb107d80\n\tgithub.com/oasdiff/yaml3 v0.0.0-20241210130736-a94c01f36349\n\tgithub.com/perimeterx/marshmallow v1.1.5\n\tgithub.com/stretchr/testify v1.9.0\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/go-openapi/swag v0.23.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/rogpeppe/go-internal v1.12.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.4599609375,
          "content": "github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-openapi/jsonpointer v0.21.0 h1:YgdVicSA9vH5RiHs9TZW5oyafXZFc6+2Vc1rr/O9oNQ=\ngithub.com/go-openapi/jsonpointer v0.21.0/go.mod h1:IUyH9l/+uyhIYQ/PXVA41Rexl+kOkAPDdXEYns6fzUY=\ngithub.com/go-openapi/swag v0.23.0 h1:vsEVJDUo2hPJ2tu0/Xc+4noaxyEffXNIs3cOULZ+GrE=\ngithub.com/go-openapi/swag v0.23.0/go.mod h1:esZ8ITTYEsH1V2trKHjAN8Ai7xHb8RV+YSZ577vPjgQ=\ngithub.com/go-test/deep v1.0.8 h1:TDsG77qcSprGbC6vTN8OuXp5g+J+b5Pcguhf7Zt61VM=\ngithub.com/go-test/deep v1.0.8/go.mod h1:5C2ZWiW0ErCdrYzpqxLbTX7MG14M9iiw8DgHncVwcsE=\ngithub.com/gorilla/mux v1.8.0 h1:i40aqfkR1h2SlN9hojwV5ZA91wcXFOvkdNIeFDP5koI=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=\ngithub.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 h1:RWengNIwukTxcDr9M+97sNutRR1RKhG96O6jWumTTnw=\ngithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826/go.mod h1:TaXosZuwdSHYgviHp1DAtfrULt5eUgsSMsZf+YrPgl8=\ngithub.com/oasdiff/yaml v0.0.0-20241210131133-6b86fb107d80 h1:nZspmSkneBbtxU9TopEAE0CY+SBJLxO8LPUlw2vG4pU=\ngithub.com/oasdiff/yaml v0.0.0-20241210131133-6b86fb107d80/go.mod h1:7tFDb+Y51LcDpn26GccuUgQXUk6t0CXZsivKjyimYX8=\ngithub.com/oasdiff/yaml3 v0.0.0-20241210130736-a94c01f36349 h1:t05Ww3DxZutOqbMN+7OIuqDwXbhl32HiZGpLy26BAPc=\ngithub.com/oasdiff/yaml3 v0.0.0-20241210130736-a94c01f36349/go.mod h1:y5+oSEHCPT/DGrS++Wc/479ERge0zTFxaF8PbGKcg2o=\ngithub.com/perimeterx/marshmallow v1.1.5 h1:a2LALqQ1BlHM8PZblsDdidgv1mWi1DgC2UmX50IvK2s=\ngithub.com/perimeterx/marshmallow v1.1.5/go.mod h1:dsXbUu8CRzfYP5a87xpp0xq9S3u0Vchtcl8we9tYaXw=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/ugorji/go/codec v1.2.7 h1:YPXUKf7fYbp/y8xloBqZOw2qaVggbfwMlI8WM3wZUJ0=\ngithub.com/ugorji/go/codec v1.2.7/go.mod h1:WGN1fab3R1fzQlVQTkfxVtIBhWDRqOviHU95kRgeqEY=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "maps.sh",
          "type": "blob",
          "size": 6.201171875,
          "content": "#!/bin/bash -eux\nset -o pipefail\n\nmaplike=./openapi3/maplike.go\nmaplike_test=./openapi3/maplike_test.go\n\ntypes=()\ntypes+=('*Responses')\ntypes+=('*Callback')\ntypes+=('*Paths')\n\nvalue_types=()\nvalue_types+=('*ResponseRef')\nvalue_types+=('*PathItem')\nvalue_types+=('*PathItem')\n\nderef_vs=()\nderef_vs+=('*Response = v.Value')\nderef_vs+=('*PathItem = v')\nderef_vs+=('*PathItem = v')\n\nnames=()\nnames+=('responses')\nnames+=('callback')\nnames+=('paths')\n\n[[ \"${#types[@]}\" = \"${#value_types[@]}\" ]]\n[[ \"${#types[@]}\" = \"${#deref_vs[@]}\" ]]\n[[ \"${#types[@]}\" = \"${#names[@]}\" ]]\n[[ \"${#types[@]}\" = \"$(git grep -InF ' m map[string]*' -- openapi3/loader.go | wc -l)\" ]]\n\n\nmaplike_header() {\n\tcat <<EOF >\"$maplike\"\npackage openapi3\n\nimport (\n\t\"encoding/json\"\n\t\"sort\"\n\t\"strings\"\n\n\t\"github.com/go-openapi/jsonpointer\"\n)\n\nEOF\n}\n\n\ntest_header() {\n\tcat <<EOF >\"$maplike_test\"\npackage openapi3\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestMaplikeMethods(t *testing.T) {\n\tt.Parallel()\n\nEOF\n}\n\n\ntest_footer() {\n\techo \"}\" >>\"$maplike_test\"\n}\n\n\nmaplike_NewWithCapa() {\n\tcat <<EOF >>\"$maplike\"\n// New${type#'*'}WithCapacity builds a ${name} object of the given capacity.\nfunc New${type#'*'}WithCapacity(cap int) ${type} {\n\tif cap == 0 {\n\t\treturn &${type#'*'}{m: make(map[string]${value_type})}\n\t}\n\treturn &${type#'*'}{m: make(map[string]${value_type}, cap)}\n}\n\nEOF\n}\n\n\nmaplike_ValueSetLenDelete() {\n\tcat <<EOF >>\"$maplike\"\n// Value returns the ${name} for key or nil\nfunc (${name} ${type}) Value(key string) ${value_type} {\n\tif ${name}.Len() == 0 {\n\t\treturn nil\n\t}\n\treturn ${name}.m[key]\n}\n\n// Set adds or replaces key 'key' of '${name}' with 'value'.\n// Note: '${name}' MUST be non-nil\nfunc (${name} ${type}) Set(key string, value ${value_type}) {\n\tif ${name}.m == nil {\n\t\t${name}.m = make(map[string]${value_type})\n\t}\n\t${name}.m[key] = value\n}\n\n// Len returns the amount of keys in ${name} excluding ${name}.Extensions.\nfunc (${name} ${type}) Len() int {\n\tif ${name} == nil || ${name}.m == nil {\n\t\treturn 0\n\t}\n\treturn len(${name}.m)\n}\n\n// Delete removes the entry associated with key 'key' from '${name}'.\nfunc (${name} ${type}) Delete(key string) {\n\tif ${name} != nil && ${name}.m != nil {\n\t\tdelete(${name}.m, key)\n\t}\n}\n\n// Map returns ${name} as a 'map'.\n// Note: iteration on Go maps is not ordered.\nfunc (${name} ${type}) Map() (m map[string]${value_type}) {\n\tif ${name} == nil || len(${name}.m) == 0 {\n\t\treturn make(map[string]${value_type})\n\t}\n\tm = make(map[string]${value_type}, len(${name}.m))\n\tfor k, v := range ${name}.m {\n\t\tm[k] = v\n\t}\n\treturn\n}\n\nEOF\n}\n\n\nmaplike_Pointable() {\n\tcat <<EOF >>\"$maplike\"\nvar _ jsonpointer.JSONPointable = (${type})(nil)\n\n// JSONLookup implements https://github.com/go-openapi/jsonpointer#JSONPointable\nfunc (${name} ${type#'*'}) JSONLookup(token string) (any, error) {\n\tif v := ${name}.Value(token); v == nil {\n\t\tvv, _, err := jsonpointer.GetForToken(${name}.Extensions, token)\n\t\treturn vv, err\n\t} else if ref := v.Ref; ref != \"\" {\n\t\treturn &Ref{Ref: ref}, nil\n\t} else {\n\t\tvar vv ${deref_v}\n\t\treturn vv, nil\n\t}\n}\n\nEOF\n}\n\n\nmaplike_UnMarsh() {\n\tif [[ \"$type\" != '*'* ]]; then\n\t\techo \"TODO: impl non-pointer receiver YAML Marshaler\"\n\t\texit 2\n\tfi\n\tcat <<EOF >>\"$maplike\"\n// MarshalYAML returns the YAML encoding of ${type#'*'}.\nfunc (${name} ${type}) MarshalYAML() (any, error) {\n\tif ${name} == nil {\n\t\treturn nil, nil\n\t}\n\tm := make(map[string]any, ${name}.Len()+len(${name}.Extensions))\n\tfor k, v := range ${name}.Extensions {\n\t\tm[k] = v\n\t}\n\tfor k, v := range ${name}.Map() {\n\t\tm[k] = v\n\t}\n\treturn m, nil\n}\n\n// MarshalJSON returns the JSON encoding of ${type#'*'}.\nfunc (${name} ${type}) MarshalJSON() ([]byte, error) {\n\t${name}Yaml, err := ${name}.MarshalYAML()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn json.Marshal(${name}Yaml)\n}\n\n// UnmarshalJSON sets ${type#'*'} to a copy of data.\nfunc (${name} ${type}) UnmarshalJSON(data []byte) (err error) {\n\tvar m map[string]any\n\tif err = json.Unmarshal(data, &m); err != nil {\n\t\treturn\n\t}\n\n\tks := make([]string, 0, len(m))\n\tfor k := range m {\n\t\tks = append(ks, k)\n\t}\n\tsort.Strings(ks)\n\n\tx := ${type#'*'}{\n\t\tExtensions: make(map[string]any),\n\t\tm:          make(map[string]${value_type}, len(m)),\n\t}\n\n\tfor _, k := range ks {\n\t\tv := m[k]\n\t\tif strings.HasPrefix(k, \"x-\") {\n\t\t\tx.Extensions[k] = v\n\t\t\tcontinue\n\t\t}\n\n\t\tif k == originKey {\n\t\t\tvar data []byte\n\t\t\tif data, err = json.Marshal(v); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err = json.Unmarshal(data, &x.Origin); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tvar data []byte\n\t\tif data, err = json.Marshal(v); err != nil {\n\t\t\treturn\n\t\t}\n\t\tvar vv ${value_type#'*'}\n\t\tif err = vv.UnmarshalJSON(data); err != nil {\n\t\t\treturn\n\t\t}\n\t\tx.m[k] = &vv\n\t}\n\t*${name} = x\n\treturn\n}\nEOF\n}\n\n\ntest_body() {\n\tcat <<EOF >>\"$maplike_test\"\n\tt.Run(\"${type}\", func(t *testing.T) {\n\t\tt.Parallel()\n\t\tt.Run(\"nil\", func(t *testing.T) {\n\t\t\tx := (${type})(nil)\n\t\t\trequire.Equal(t, 0, x.Len())\n\t\t\trequire.Equal(t, map[string]${value_type}{}, x.Map())\n\t\t\trequire.Equal(t, (${value_type})(nil), x.Value(\"key\"))\n\t\t\trequire.Panics(t, func() { x.Set(\"key\", &${value_type#'*'}{}) })\n\t\t\trequire.NotPanics(t, func() { x.Delete(\"key\") })\n\t\t})\n\t\tt.Run(\"nonnil\", func(t *testing.T) {\n\t\t\tx := &${type#'*'}{}\n\t\t\trequire.Equal(t, 0, x.Len())\n\t\t\trequire.Equal(t, map[string]${value_type}{}, x.Map())\n\t\t\trequire.Equal(t, (${value_type})(nil), x.Value(\"key\"))\n\t\t\tx.Set(\"key\", &${value_type#'*'}{})\n\t\t\trequire.Equal(t, 1, x.Len())\n\t\t\trequire.Equal(t, map[string]${value_type}{\"key\": {}}, x.Map())\n\t\t\trequire.Equal(t, &${value_type#'*'}{}, x.Value(\"key\"))\n\t\t\tx.Delete(\"key\")\n\t\t\trequire.Equal(t, 0, x.Len())\n\t\t\trequire.Equal(t, map[string]${value_type}{}, x.Map())\n\t\t\trequire.Equal(t, (${value_type})(nil), x.Value(\"key\"))\n\t\t\trequire.NotPanics(t, func() { x.Delete(\"key\") })\n\t\t})\n\t})\n\nEOF\n}\n\n\n\nmaplike_header\ntest_header\n\nfor i in \"${!types[@]}\"; do\n\ttype=${types[$i]}\n\tvalue_type=${value_types[$i]}\n\tderef_v=${deref_vs[$i]}\n\tname=${names[$i]}\n\n\ttype=\"$type\" name=\"$name\" value_type=\"$value_type\" maplike_NewWithCapa\n\ttype=\"$type\" name=\"$name\" value_type=\"$value_type\" maplike_ValueSetLenDelete\n\ttype=\"$type\" name=\"$name\"    deref_v=\"$deref_v\"    maplike_Pointable\n\ttype=\"$type\" name=\"$name\" value_type=\"$value_type\" maplike_UnMarsh\n\t[[ $((i+1)) != \"${#types[@]}\" ]] && echo >>\"$maplike\"\n\n\ttype=\"$type\" value_type=\"$value_type\" test_body\n\n\ndone\n\ntest_footer\n"
        },
        {
          "name": "openapi2",
          "type": "tree",
          "content": null
        },
        {
          "name": "openapi2conv",
          "type": "tree",
          "content": null
        },
        {
          "name": "openapi3",
          "type": "tree",
          "content": null
        },
        {
          "name": "openapi3filter",
          "type": "tree",
          "content": null
        },
        {
          "name": "openapi3gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "routers",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}