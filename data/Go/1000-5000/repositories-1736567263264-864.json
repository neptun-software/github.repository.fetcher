{
  "metadata": {
    "timestamp": 1736567263264,
    "page": 864,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PeerDB-io/peerdb",
      "stars": 2348,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1533203125,
          "content": "nexus/target/**/*\nnexus/target\n\nthirdparty/**/*\nthirdparty\n\nui/node_modules/**/*\nui/node_modules\nui/.next/**/*\nui/.next\n\n.git\n.gitignore\n.github\n.gitmodules\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2255859375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.rs]\nindent_style = space\nindent_size = 4\n\n[{package.json,*.yml,*.yaml,*.proto}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1103515625,
          "content": "flow/flow-api-client/**         linguist-generated=true\nflow/flow-api-client/README.md  linguist-generated=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2490234375,
          "content": ".vscode/\n.env\ntmp/\n.envrc\n.idea/\n\nprivate/\nnexus/server/tests/assets/*.json\nnexus/server/tests/results/actual/\ne2e_cleanup/peer-flow-cleanup\nflow/peer-flow\n\ngo.work\ngo.work.sum\n\n# generated protobuf files\nui/grpc_generated\nflow/generated\nnexus/pt/src/gen\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 3.7919921875,
          "content": "# **Elastic License 2.0 (ELv2)**\n\n# **Elastic License**\n\n# **Acceptance**\n\nBy using the software, you agree to all of the terms and conditions below.\n\n# **Copyright License**\n\nThe licensor grants you a non-exclusive, royalty-free, worldwide, non-sublicensable, non-transferable license to use, copy, distribute, make available, and prepare derivative works of the software, in each case subject to the limitations and conditions below.\n\n# **Limitations**\n\nYou may not provide the software to third parties as a hosted or managed service, where the service provides users with access to any substantial set of the features or functionality of the software.\n\nYou may not move, change, disable, or circumvent the license key functionality in the software, and you may not remove or obscure any functionality in the software that is protected by the license key.\n\nYou may not alter, remove, or obscure any licensing, copyright, or other notices of the licensor in the software. Any use of the licensor’s trademarks is subject to applicable law.\n\n# **Patents**\n\nThe licensor grants you a license, under any patent claims the licensor can license, or becomes able to license, to make, have made, use, sell, offer for sale, import and have imported the software, in each case subject to the limitations and conditions in this license. This license does not cover any patent claims that you cause to be infringed by modifications or additions to the software. If you or your company make any written claim that the software infringes or contributes to infringement of any patent, your patent license for the software granted under these terms ends immediately. If your company makes such a claim, your patent license ends immediately for work on behalf of your company.\n\n# **Notices**\n\nYou must ensure that anyone who gets a copy of any part of the software from you also gets a copy of these terms.\n\nIf you modify the software, you must include in any modified copies of the software prominent notices stating that you have modified the software.\n\n# **No Other Rights**\n\nThese terms do not imply any licenses other than those expressly granted in these terms.\n\n# **Termination**\n\nIf you use the software in violation of these terms, such use is not licensed, and your licenses will automatically terminate. If the licensor provides you with a notice of your violation, and you cease all violation of this license no later than 30 days after you receive that notice, your licenses will be reinstated retroactively. However, if you violate these terms after such reinstatement, any additional violation of these terms will cause your licenses to terminate automatically and permanently.\n\n# **No Liability**\n\n***As far as the law allows, the software comes as is, without any warranty or condition, and the licensor will not be liable to you for any damages arising out of these terms or the use or nature of the software, under any kind of legal claim.***\n\n# **Definitions**\n\nThe **licensor** is the entity offering these terms, and the **software** is the software the licensor makes available under these terms, including any portion of it.\n\n**you** refers to the individual or entity agreeing to these terms.\n\n**your company** is any legal entity, sole proprietorship, or other kind of organization that you work for, plus all organizations that have control over, are under the control of, or are under common control with that organization. **control** means ownership of substantially all the assets of an entity, or the power to direct its management and policies by vote, contract, or otherwise. Control can be direct or indirect.\n\n**your licenses** are all the licenses granted to you for the software under these terms.\n\n**use** means anything you do with the software requiring one of your licenses.\n\n**trademark** means trademarks, service marks, and similar rights.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.1591796875,
          "content": "\n<div align=\"center\">\n\n<img src=\"images/banner.jpg\" alt=\"PeerDB Banner\" width=\"512\" />\n\n#### Frustratingly simple ETL for Postgres\n\n[![Workflow Status](https://github.com/PeerDB-io/peerdb/actions/workflows/ci.yml/badge.svg)](https://github.com/Peerdb-io/peerdb/actions/workflows/ci.yml)\n[![ElV2 License](https://badgen.net/badge/License/Elv2/green?icon=github)](https://github.com/PeerDB-io/peerdb/blob/main/LICENSE.md)\n[![Slack Community](https://img.shields.io/badge/slack-peerdb-brightgreen.svg?logo=slack)](https://slack.peerdb.io)\n\n</div>\n\n## PeerDB\n\nAt PeerDB, we are building a fast, simple and the most cost effective way to stream data from Postgres to Data Warehouses, Queues and Storage engines. If you are running Postgres at the heart of your data-stack and move data at scale from Postgres to any of the above targets, PeerDB can provide value.\n\nWe support different modes of streaming - log based (CDC), cursor based (timestamp or integer) and XMIN based. Performance wise, we are 10x faster than existing tools. Features wise, we support native Postgres features such as comprehensive set of data-types incl. jsonb/arrays/geospatial, efficiently streaming toast columns, schema changes and so on.\n\n## Get started\n\n```bash\ngit clone git@github.com:PeerDB-io/peerdb.git\ncd peerdb\n\n# Run docker containers: postgres as catalog, temporal, PeerDB server, PeerDB flow API + workers, PeerDB UI\n# Requires docker and docker-compose installed: https://docs.docker.com/engine/install/\nbash ./run-peerdb.sh\n# OR for local development, images will be built locally.\n# Requires docker, docker-compose as well as the buf compiler for protobuf generation\n# https://buf.build/docs/installation\nbash ./generate-protos.sh\nbash ./dev-peerdb.sh\n\n# connect to peerdb and query away (Use psql version >=14.0)\npsql \"port=9900 host=localhost password=peerdb\"\n```\n\n<img src=\"images/peerdb-demo.gif\" width=\"512\" />\n\nFollow this 5-minute [Quickstart Guide](https://docs.peerdb.io/quickstart#quickstart) to see PeerDB in action i.e. streaming data in real-time across stores.\n\n## Why PeerDB\n\nCurrent data tools prioritize a wide range of connectors, often neglecting to optimize for Postgres users. This can be problematic for those storing large amounts of data in Postgres and frequently transferring it. As a result, many resort to building custom pipelines when existing tools don't meet their needs. We've developed this project to provide a straightforward and reliable solution specifically for Postgres.\n\n### Postgres-first Approach\n\nPeerDB is an ETL/ELT tool built for PostgreSQL. We implement multiple Postgres native and infrastructural optimizations to provide a fast, reliable and a feature-rich experience for moving data in/out of PostgreSQL.\n\n**For performance** -  we can parallelize initial load for a large table, still ensuring consistency. Syncing 100s of GB reduces from days to minutes. Our architecture is designed for real-time syncs and implements multiple logical replication related optimizations (tuning Postgres configs, parallel reading of slot etc.). This enables 10x faster Change Data Capture with data-freshness of a few 10s of seconds even at large throughputs (10k+ tps).\n\n**For reliability**, we have mechanisms in place for fault tolerance - state management, automatic retries, handling idempotency and consistency and so on (<https://blog.peerdb.io/using-temporal-to-scale-data-synchronization-at-peerdb>) Configurable batching and parallelism prevent out of memory (OOMs) and crashes.\n\n**From a feature richness standpoint**, we support efficient syncing of tables with large (TOAST) columns. We support multiple streaming modes - Log based (CDC) based, Query based streaming etc. We provide rich data-type mapping and plan to support every possible (incl. Custom types) that Postgres supports to the best extent possible on the target data-store.\n\n### Now available natively in ClickHouse Cloud (Private Preview)\n\nPeerDB is now available natively in ClickHouse Cloud (Private Preview). Learn more about it [here](https://clickhouse.com/cloud/clickpipes/postgres-cdc-connector).\n\n<a href=\"https://clickhouse.com/cloud/clickpipes/postgres-cdc-connector\">\n<img src=\"images/in-clickpipes.png\" width=\"512\" />\n</a>\n\n#### **Postgres-compatible SQL interface to do ETL**\n\nThe Postgres-compatible SQL interface for ETL is unique to PeerDB and enables you to operate in a language you are familiar with. You can do ETL the same way you work with your databases.\n\nYou can use Postgres’ eco-system to manage your ETL —\n\n1. Client tools like pgAdmin, psql to run SQL commands.\n2. BI tools like Grafana, Tableau to visually monitor syncs and transforms.\n3. Database migration and versioning tools like Flyway to manage your ETL.\n4. Any language (Python, Go, Node.js etc) and Scheduler (AirFlow) for development.\n5. And many more\n\n## Status\n\nWe support multiple target connectors to move data from Postgres and a couple of source connectors to move data into Postgres. Check the status of connectors [here](https://docs.peerdb.io/sql/commands/supported-connectors)\n\n\n## License\n\nPeerDB is licensed under Elastic License 2.0 (ELv2). Please see the LICENSE file for additional information. If you have any licensing questions please email **<contact@peerdb.io>**\n"
        },
        {
          "name": "buf.gen.yaml",
          "type": "blob",
          "size": 1.0107421875,
          "content": "version: v1\nmanaged:\n  enabled: true\n  go_package_prefix:\n    default: generated/protos\n    except:\n      - buf.build/googleapis/googleapis\nplugins:\n  - plugin: buf.build/protocolbuffers/go:v1.33.0\n    out: flow/generated/protos\n    opt: paths=source_relative\n  - plugin: buf.build/grpc/go:v1.3.0\n    out: flow/generated/protos\n    opt:\n      - paths=source_relative\n  - plugin: buf.build/community/neoeinstein-prost:v0.3.1\n    out: nexus/pt/src/gen\n    opt:\n      - compile_well_known_types\n      - extern_path=.google.protobuf=::pbjson_types\n  - plugin: buf.build/community/neoeinstein-tonic:v0.4.0\n    out: nexus/pt/src/gen\n  - plugin: buf.build/community/neoeinstein-prost-serde:v0.3.0\n    out: nexus/pt/src/gen\n    opt:\n      - ignore_unknown_fields=true\n  - plugin: buf.build/community/stephenh-ts-proto:v1.167.9\n    out: ui/grpc_generated\n    opt:\n      - esModuleInterop=true\n      - outputServices=none\n  - plugin: buf.build/grpc-ecosystem/gateway:v2.19.1\n    out: flow/generated/protos\n    opt:\n      - paths=source_relative\n"
        },
        {
          "name": "depot.json",
          "type": "blob",
          "size": 0.01953125,
          "content": "{\"id\":\"xld0j6nr3f\"}\n"
        },
        {
          "name": "dev-peerdb.sh",
          "type": "blob",
          "size": 0.8212890625,
          "content": "#!/bin/sh\nset -Eeu\n\nDOCKER=\"docker\"\nEXTRA_ARGS=\"--no-attach temporal --no-attach pyroscope --no-attach temporal-ui\"\nPODMAN_ARGS=\"\"\n\nif test -n \"${USE_PODMAN:=}\"\nthen\n   # 0 is found, checking for not found so we check for podman then\n    if $(docker compose &>/dev/null) && [ $? -ne 0 ]; then\n        if $(podman compose &>/dev/null) && [ $? -eq 0 ]; then\n            echo \"docker could not be found on PATH, using podman compose\"\n            USE_PODMAN=1\n        else\n            echo \"docker compose could not be found on PATH\"\n            exit 1\n        fi\n    fi\nfi\n\nif test -n \"$USE_PODMAN\"; then\n    DOCKER=\"podman\"\n    EXTRA_ARGS=\"\"\n    PODMAN_ARGS=\"--podman-run-args=--replace\"\nfi\n\nexport PEERDB_VERSION_SHA_SHORT=local-$(git rev-parse --short HEAD)\nexec $DOCKER compose $PODMAN_ARGS -f docker-compose-dev.yml up --build $EXTRA_ARGS\n"
        },
        {
          "name": "docker-bake.hcl",
          "type": "blob",
          "size": 2.2177734375,
          "content": "variable SHA_SHORT {\n  default = \"123456\"\n}\n\nvariable TAG {\n  default = \"latest-dev\"\n}\n\nvariable REGISTRY {\n  default = \"ghcr.io/peerdb-io\"\n}\n\ngroup \"default\" {\n  targets = [\n    \"peerdb\",\n    \"flow-worker\",\n    \"flow-api\",\n    \"flow-snapshot-worker\",\n    \"flow-maintenance\",\n    \"peerdb-ui\"\n  ]\n}\n\ntarget \"flow-api\" {\n  context    = \".\"\n  dockerfile = \"stacks/flow.Dockerfile\"\n  target     = \"flow-api\"\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm64\",\n  ]\n  args = {\n    PEERDB_VERSION_SHA_SHORT = \"${SHA_SHORT}\"\n  }\n  tags = [\n    \"${REGISTRY}/flow-api:${TAG}\",\n    \"${REGISTRY}/flow-api:${SHA_SHORT}\",\n  ]\n}\n\ntarget \"flow-snapshot-worker\" {\n  context    = \".\"\n  dockerfile = \"stacks/flow.Dockerfile\"\n  target     = \"flow-snapshot-worker\"\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm64\",\n  ]\n  args = {\n    PEERDB_VERSION_SHA_SHORT = \"${SHA_SHORT}\"\n  }\n  tags = [\n    \"${REGISTRY}/flow-snapshot-worker:${TAG}\",\n    \"${REGISTRY}/flow-snapshot-worker:${SHA_SHORT}\",\n  ]\n}\n\ntarget \"flow-worker\" {\n  context    = \".\"\n  dockerfile = \"stacks/flow.Dockerfile\"\n  target     = \"flow-worker\"\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm64\",\n  ]\n  args = {\n    PEERDB_VERSION_SHA_SHORT = \"${SHA_SHORT}\"\n  }\n  tags = [\n    \"${REGISTRY}/flow-worker:${TAG}\",\n    \"${REGISTRY}/flow-worker:${SHA_SHORT}\",\n  ]\n}\n\ntarget \"flow-maintenance\" {\n  context    = \".\"\n  dockerfile = \"stacks/flow.Dockerfile\"\n  target     = \"flow-maintenance\"\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm64\",\n  ]\n  args = {\n    PEERDB_VERSION_SHA_SHORT = \"${SHA_SHORT}\"\n  }\n  tags = [\n    \"${REGISTRY}/flow-maintenance:${TAG}\",\n    \"${REGISTRY}/flow-maintenance:${SHA_SHORT}\",\n  ]\n}\n\ntarget \"peerdb\" {\n  context    = \".\"\n  dockerfile = \"stacks/peerdb-server.Dockerfile\"\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm64\",\n  ]\n  args = {\n    PEERDB_VERSION_SHA_SHORT = \"${SHA_SHORT}\"\n  }\n  tags = [\n    \"${REGISTRY}/peerdb-server:${TAG}\",\n    \"${REGISTRY}/peerdb-server:${SHA_SHORT}\",\n  ]\n}\n\ntarget \"peerdb-ui\" {\n  context    = \".\"\n  dockerfile = \"stacks/peerdb-ui.Dockerfile\"\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm64\",\n  ]\n  args = {\n    PEERDB_VERSION_SHA_SHORT = \"${SHA_SHORT}\"\n  }\n  tags = [\n    \"${REGISTRY}/peerdb-ui:${TAG}\",\n    \"${REGISTRY}/peerdb-ui:${SHA_SHORT}\",\n  ]\n}\n"
        },
        {
          "name": "docker-compose-dev.yml",
          "type": "blob",
          "size": 7.029296875,
          "content": "name: peerdb-quickstart-dev\n\nx-minio-config: &minio-config\n  PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_ACCESS_KEY_ID: _peerdb_minioadmin\n  PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_SECRET_ACCESS_KEY: _peerdb_minioadmin\n  PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_REGION: us-east-1\n  PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_ENDPOINT_URL_S3: http://host.docker.internal:9001\n  PEERDB_CLICKHOUSE_AWS_S3_BUCKET_NAME: peerdbbucket\n\nx-catalog-config: &catalog-config\n  PEERDB_CATALOG_HOST: catalog\n  PEERDB_CATALOG_PORT: 5432\n  PEERDB_CATALOG_USER: postgres\n  PEERDB_CATALOG_PASSWORD: postgres\n  PEERDB_CATALOG_DATABASE: postgres\n\nx-flow-worker-env: &flow-worker-env\n  # For Temporal Cloud, this will look like:\n  # <yournamespace>.<id>.tmprl.cloud:7233\n  TEMPORAL_HOST_PORT: temporal:7233\n  PEERDB_TEMPORAL_NAMESPACE: default\n  # For the below 2 cert and key variables,\n  # paste as base64 encoded strings.\n  TEMPORAL_CLIENT_CERT:\n  TEMPORAL_CLIENT_KEY:\n  # For GCS, these will be your HMAC keys instead\n  # For more information:\n  # https://cloud.google.com/storage/docs/authentication/managing-hmackeys\n  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}\n  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}\n  # For GCS, set this to \"auto\" without the quotes\n  AWS_REGION: ${AWS_REGION:-}\n  # For GCS, set this as: https://storage.googleapis.com\n  AWS_ENDPOINT: ${AWS_ENDPOINT:-}\n  # enables worker profiling using Grafana Pyroscope\n  ENABLE_PROFILING: \"true\"\n  PYROSCOPE_SERVER_ADDRESS: http://pyroscope:4040\n\nservices:\n  catalog:\n    container_name: catalog\n    image: postgres:17-alpine@sha256:d37d2c160d34430877c802e5adc22824a2ad453499db9bab1a2ceb2be6c1a46f\n    command: -c config_file=/etc/postgresql.conf\n    ports:\n      - 9901:5432\n    environment:\n      PGUSER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: postgres\n      POSTGRES_INITDB_ARGS: --locale=C.UTF-8\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n      - ./volumes/postgresql.conf:/etc/postgresql.conf\n      - ./volumes/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-d\", \"postgres\", \"-U\", \"postgres\"]\n      interval: 10s\n      timeout: 30s\n      retries: 5\n      start_period: 60s\n\n  temporal:\n    container_name: temporal\n    depends_on:\n      catalog:\n        condition: service_healthy\n    environment:\n      - DB=postgres12\n      - DB_PORT=5432\n      - POSTGRES_USER=postgres\n      - POSTGRES_PWD=postgres\n      - POSTGRES_SEEDS=catalog\n      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml\n    image: temporalio/auto-setup:1.26@sha256:e9245820522233ec6a59ad69c6512ae4450705ee02bf6894fc61ba13b238c1c0\n    ports:\n      - 7233:7233\n    volumes:\n      - ./volumes/temporal-dynamicconfig:/etc/temporal/config/dynamicconfig\n    labels:\n      kompose.volume.type: configMap\n\n  pyroscope:\n    container_name: pyroscope\n    image: grafana/pyroscope:latest@sha256:5f780f01ef6c83261db7ab939c8cdc48b6aca0567555636ad561de09f4aaafa0\n    ports:\n      - 4040:4040\n\n  temporal-admin-tools:\n    container_name: temporal-admin-tools\n    depends_on:\n      - temporal\n    environment:\n      - TEMPORAL_ADDRESS=temporal:7233\n      - TEMPORAL_CLI_ADDRESS=temporal:7233\n      - TEMPORAL_CLI_SHOW_STACKS=1\n    image: temporalio/admin-tools:1.25.2-tctl-1.18.1-cli-1.1.1@sha256:da0c7a7982b571857173ab8f058e7f139b3054800abb4dcb100445d29a563ee8\n    stdin_open: true\n    tty: true\n    entrypoint: /etc/temporal/entrypoint.sh\n    restart: on-failure\n    healthcheck:\n      test: [\"CMD\", \"tctl\", \"workflow\", \"list\"]\n      interval: 1s\n      timeout: 5s\n      retries: 30\n    volumes:\n      - ./scripts/mirror-name-search.sh:/etc/temporal/entrypoint.sh\n\n  temporal-ui:\n    container_name: temporal-ui\n    depends_on:\n      - temporal\n    environment:\n      - TEMPORAL_ADDRESS=temporal:7233\n      - TEMPORAL_CORS_ORIGINS=http://localhost:3000\n      - TEMPORAL_CSRF_COOKIE_INSECURE=true\n    image: temporalio/ui:2.33.0@sha256:5c586a3c8ec52ade33dfe270e64242be557867ef42a16697c5521b50f1e5cc15\n    ports:\n      - 8085:8080\n\n  flow-api:\n    container_name: flow_api\n    build:\n      context: .\n      dockerfile: stacks/flow.Dockerfile\n      target: flow-api\n      args:\n        PEERDB_VERSION_SHA_SHORT: ${PEERDB_VERSION_SHA_SHORT:-}\n    ports:\n      - 8112:8112\n      - 8113:8113\n    environment:\n      <<: [*catalog-config, *flow-worker-env, *minio-config]\n      PEERDB_ALLOWED_TARGETS:\n      PEERDB_CLICKHOUSE_ALLOWED_DOMAINS:\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n    depends_on:\n      temporal-admin-tools:\n        condition: service_healthy\n\n  flow-snapshot-worker:\n    container_name: flow-snapshot-worker\n    build:\n      context: .\n      dockerfile: stacks/flow.Dockerfile\n      target: flow-snapshot-worker\n    environment:\n      <<: [*catalog-config, *flow-worker-env, *minio-config]\n    depends_on:\n      temporal-admin-tools:\n        condition: service_healthy\n\n  flow-worker:\n    container_name: flow-worker\n    build:\n      context: .\n      dockerfile: stacks/flow.Dockerfile\n      target: flow-worker\n    environment:\n      <<: [*catalog-config, *flow-worker-env, *minio-config]\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n    depends_on:\n      temporal-admin-tools:\n        condition: service_healthy\n\n  peerdb:\n    container_name: peerdb-server\n    stop_signal: SIGINT\n    build:\n      context: .\n      dockerfile: stacks/peerdb-server.Dockerfile\n    environment:\n      <<: *catalog-config\n      PEERDB_PASSWORD: peerdb\n      PEERDB_FLOW_SERVER_ADDRESS: grpc://flow_api:8112\n      RUST_LOG: info\n      RUST_BACKTRACE: 1\n    ports:\n      - 9900:9900\n    depends_on:\n      catalog:\n        condition: service_healthy\n\n  peerdb-ui:\n    container_name: peerdb-ui\n    build:\n      context: .\n      dockerfile: stacks/peerdb-ui.Dockerfile\n    ports:\n      - 3000:3000\n    env_file:\n      - path: ./.env\n        required: false\n    environment:\n      <<: *catalog-config\n      DATABASE_URL: postgres://postgres:postgres@catalog:5432/postgres\n      PEERDB_FLOW_SERVER_HTTP: http://flow_api:8113\n      PEERDB_PASSWORD:\n      NEXTAUTH_SECRET: __changeme__\n      NEXTAUTH_URL: http://localhost:3000\n      PEERDB_ALLOWED_TARGETS:\n      PEERDB_CLICKHOUSE_ALLOWED_DOMAINS:\n      PEERDB_EXPERIMENTAL_ENABLE_SCRIPTING: true\n    depends_on:\n      - flow-api\n\n  minio:\n    image: minio/minio:RELEASE.2024-11-07T00-52-20Z@sha256:ac591851803a79aee64bc37f66d77c56b0a4b6e12d9e5356380f4105510f2332\n    volumes:\n      - minio-data:/data\n    ports:\n      - \"9001:9000\"\n      - \"9002:36987\"\n    environment:\n      <<: *minio-config\n    entrypoint: >\n      /bin/sh -c \"\n      export MINIO_ROOT_USER=$$PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_ACCESS_KEY_ID;\n      export MINIO_ROOT_PASSWORD=$$PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_SECRET_ACCESS_KEY;\n      minio server /data --console-address=\":36987\" &\n      sleep 2;\n      /usr/bin/mc alias set myminiopeerdb http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;\n      /usr/bin/mc mb myminiopeerdb/$$PEERDB_CLICKHOUSE_AWS_S3_BUCKET_NAME;\n      wait\n      \"\n\nvolumes:\n  pgdata:\n  minio-data:\n\nnetworks:\n  default:\n    name: peerdb_network\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 6.453125,
          "content": "name: peerdb-quickstart\n\nx-minio-config: &minio-config\n  PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_ACCESS_KEY_ID: _peerdb_minioadmin\n  PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_SECRET_ACCESS_KEY: _peerdb_minioadmin\n  PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_REGION: us-east-1\n  PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_ENDPOINT_URL_S3: http://host.docker.internal:9001\n  PEERDB_CLICKHOUSE_AWS_S3_BUCKET_NAME: peerdbbucket\n\nx-catalog-config: &catalog-config\n  PEERDB_CATALOG_HOST: catalog\n  PEERDB_CATALOG_PORT: 5432\n  PEERDB_CATALOG_USER: postgres\n  PEERDB_CATALOG_PASSWORD: postgres\n  PEERDB_CATALOG_DATABASE: postgres\n\nx-flow-worker-env: &flow-worker-env\n  TEMPORAL_HOST_PORT: temporal:7233\n  TEMPORAL_CLIENT_CERT:\n  TEMPORAL_CLIENT_KEY:\n  PEERDB_TEMPORAL_NAMESPACE: default\n  # For GCS, these will be your HMAC keys instead\n  # For more information:\n  # https://cloud.google.com/storage/docs/authentication/managing-hmackeys\n  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}\n  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}\n  # For GCS, set this to \"auto\" without the quotes\n  AWS_REGION: ${AWS_REGION:-}\n  # For GCS, set this as: https://storage.googleapis.com\n  AWS_ENDPOINT: ${AWS_ENDPOINT:-}\n\nservices:\n  catalog:\n    container_name: catalog\n    image: postgres:17-alpine@sha256:d37d2c160d34430877c802e5adc22824a2ad453499db9bab1a2ceb2be6c1a46f\n    command: -c config_file=/etc/postgresql.conf\n    restart: unless-stopped\n    ports:\n      - 9901:5432\n    environment:\n      PGUSER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: postgres\n      POSTGRES_INITDB_ARGS: --locale=C.UTF-8\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n      - ./volumes/postgresql.conf:/etc/postgresql.conf\n      - ./volumes/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-d\", \"postgres\", \"-U\", \"postgres\"]\n      interval: 10s\n      timeout: 30s\n      retries: 5\n      start_period: 60s\n\n  temporal:\n    container_name: temporal\n    restart: unless-stopped\n    depends_on:\n      catalog:\n        condition: service_healthy\n    environment:\n      - DB=postgres12\n      - DB_PORT=5432\n      - POSTGRES_USER=postgres\n      - POSTGRES_PWD=postgres\n      - POSTGRES_SEEDS=catalog\n      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml\n    image: temporalio/auto-setup:1.26@sha256:e9245820522233ec6a59ad69c6512ae4450705ee02bf6894fc61ba13b238c1c0\n    ports:\n      - 7233:7233\n    volumes:\n      - ./volumes/temporal-dynamicconfig:/etc/temporal/config/dynamicconfig\n    labels:\n      kompose.volume.type: configMap\n\n  temporal-admin-tools:\n    container_name: temporal-admin-tools\n    restart: unless-stopped\n    depends_on:\n      - temporal\n    environment:\n      - TEMPORAL_ADDRESS=temporal:7233\n      - TEMPORAL_CLI_ADDRESS=temporal:7233\n      - TEMPORAL_CLI_SHOW_STACKS=1\n    image: temporalio/admin-tools:1.25.2-tctl-1.18.1-cli-1.1.1@sha256:da0c7a7982b571857173ab8f058e7f139b3054800abb4dcb100445d29a563ee8\n    stdin_open: true\n    tty: true\n    entrypoint: /etc/temporal/entrypoint.sh\n    healthcheck:\n      test: [\"CMD\", \"tctl\", \"workflow\", \"list\"]\n      interval: 1s\n      timeout: 5s\n      retries: 30\n    volumes:\n      - ./scripts/mirror-name-search.sh:/etc/temporal/entrypoint.sh\n\n  temporal-ui:\n    container_name: temporal-ui\n    restart: unless-stopped\n    depends_on:\n      - temporal\n    environment:\n      - TEMPORAL_ADDRESS=temporal:7233\n      - TEMPORAL_CORS_ORIGINS=http://localhost:3000\n      - TEMPORAL_CSRF_COOKIE_INSECURE=true\n    image: temporalio/ui:2.33.0@sha256:5c586a3c8ec52ade33dfe270e64242be557867ef42a16697c5521b50f1e5cc15\n    ports:\n      - 8085:8080\n\n  flow-api:\n    container_name: flow_api\n    image: ghcr.io/peerdb-io/flow-api:stable-v0.22.1\n    restart: unless-stopped\n    ports:\n      - 8112:8112\n      - 8113:8113\n    environment:\n      <<: [*catalog-config, *flow-worker-env, *minio-config]\n      PEERDB_ALLOWED_TARGETS:\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n    depends_on:\n      temporal-admin-tools:\n        condition: service_healthy\n\n  flow-snapshot-worker:\n    container_name: flow-snapshot-worker\n    image: ghcr.io/peerdb-io/flow-snapshot-worker:stable-v0.22.1\n    restart: unless-stopped\n    environment:\n      <<: [*catalog-config, *flow-worker-env, *minio-config]\n    depends_on:\n      temporal-admin-tools:\n        condition: service_healthy\n\n  flow-worker:\n    container_name: flow-worker\n    image: ghcr.io/peerdb-io/flow-worker:stable-v0.22.1\n    restart: unless-stopped\n    environment:\n      <<: [*catalog-config, *flow-worker-env, *minio-config]\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n    depends_on:\n      temporal-admin-tools:\n        condition: service_healthy\n\n  peerdb:\n    container_name: peerdb-server\n    stop_signal: SIGINT\n    image: ghcr.io/peerdb-io/peerdb-server:stable-v0.22.1\n    restart: unless-stopped\n    environment:\n      <<: *catalog-config\n      PEERDB_PASSWORD:\n      PEERDB_FLOW_SERVER_ADDRESS: grpc://flow_api:8112\n      RUST_LOG: info\n      RUST_BACKTRACE: 1\n    ports:\n      - 9900:9900\n    depends_on:\n      catalog:\n        condition: service_healthy\n\n  peerdb-ui:\n    container_name: peerdb-ui\n    image: ghcr.io/peerdb-io/peerdb-ui:stable-v0.22.1\n    restart: unless-stopped\n    ports:\n      - 3000:3000\n    environment:\n      <<: *catalog-config\n      DATABASE_URL: postgres://postgres:postgres@catalog:5432/postgres\n      PEERDB_FLOW_SERVER_HTTP: http://flow_api:8113\n      NEXTAUTH_SECRET: __changeme__\n      NEXTAUTH_URL: http://localhost:3000\n      PEERDB_ALLOWED_TARGETS:\n      PEERDB_CLICKHOUSE_ALLOWED_DOMAINS:\n      PEERDB_EXPERIMENTAL_ENABLE_SCRIPTING: true\n    depends_on:\n      - flow-api\n\n  minio:\n    image: minio/minio:RELEASE.2024-11-07T00-52-20Z@sha256:ac591851803a79aee64bc37f66d77c56b0a4b6e12d9e5356380f4105510f2332\n    restart: unless-stopped\n    volumes:\n      - minio-data:/data\n    ports:\n      - \"9001:9000\"\n      - \"9002:36987\"\n    environment:\n      <<: *minio-config\n    entrypoint: >\n      /bin/sh -c \"\n      export MINIO_ROOT_USER=$$PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_ACCESS_KEY_ID;\n      export MINIO_ROOT_PASSWORD=$$PEERDB_CLICKHOUSE_AWS_CREDENTIALS_AWS_SECRET_ACCESS_KEY;\n      minio server /data --console-address=\":36987\" &\n      sleep 2;\n      /usr/bin/mc alias set myminiopeerdb http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;\n      /usr/bin/mc mb myminiopeerdb/$$PEERDB_CLICKHOUSE_AWS_S3_BUCKET_NAME;\n      wait\n      \"\n\nvolumes:\n  pgdata:\n  minio-data:\n\nnetworks:\n  default:\n    name: peerdb_network\n"
        },
        {
          "name": "e2e_cleanup",
          "type": "tree",
          "content": null
        },
        {
          "name": "flow",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate_protos.sh",
          "type": "blob",
          "size": 0.21484375,
          "content": "#!/bin/sh\nset -xeu\n\n# check if buf is installed\nif ! command -v buf &> /dev/null\nthen\n    echo \"buf could not be found\"\n    echo \"Please install buf: https://buf.build/docs/installation\"\n    exit\nfi\n\nbuf generate protos\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "nexus",
          "type": "tree",
          "content": null
        },
        {
          "name": "protos",
          "type": "tree",
          "content": null
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 1.22265625,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"local>PeerDB-io/.github:renovate-config\"\n  ],\n  \"packageRules\": [\n    {\n      \"groupName\": \"{{manager}} dependencies\",\n      \"groupSlug\": \"{{manager}}\",\n      \"packageRules\": [\n        {\n          \"groupName\": \"{{manager}} dependencies\",\n          \"groupSlug\": \"{{manager}}\",\n          \"matchPackagePatterns\": [\n            \"*\"\n          ]\n        }\n      ],\n      \"separateMajorMinor\": false,\n      \"automerge\": true\n    },\n    {\n      \"matchPackageNames\": [\"mysql_async\"],\n      \"matchManagers\": [\"cargo\"],\n      \"enabled\": false\n    },\n    {\n      \"matchPackageNames\": [\"next\", \"react\", \"react-*\", \"@types/react\", \"@types/react-*\", \"eslint\", \"eslint-config-next\"],\n      \"matchManagers\": [\"npm\"],\n      \"matchUpdateTypes\": [\"major\"],\n      \"enabled\": false\n    },\n    {\n      \"matchPackageNames\": [\"ghcr.io/peerdb-io/**\"],\n      \"matchManagers\": [\"docker-compose\"],\n      \"matchUpdateTypes\": [\"pinDigest\"],\n      \"matchFileNames\": [\"docker-compose.yml\"],\n      \"enabled\": false\n    }\n  ],\n  \"vulnerabilityAlerts\": {\n    \"enabled\": true\n  },\n  \"timezone\": \"Etc/UTC\",\n  \"schedule\": [\n    \"after 5pm on monday\"\n  ],\n  \"additionalReviewers\": [\n    \"team:eng\"\n  ]\n}\n"
        },
        {
          "name": "run-peerdb.sh",
          "type": "blob",
          "size": 0.57421875,
          "content": "#!/bin/sh\nset -Eeu\n\nDOCKER=\"docker\"\n\nif test -n \"${USE_PODMAN:=}\"\nthen\n    if ! (command -v docker &> /dev/null); then\n        if (command -v podman &> /dev/null); then\n            echo \"docker could not be found on PATH, using podman\"\n            USE_PODMAN=1\n        else\n            echo \"docker could not be found on PATH\"\n            exit 1\n        fi\n    fi\nfi\n\nif test -n \"$USE_PODMAN\"; then\n    DOCKER=\"podman\"\nfi\n\n$DOCKER compose pull\nexec $DOCKER compose -f docker-compose.yml up --no-attach catalog --no-attach temporal --no-attach temporal-ui --no-attach temporal-admin-tools\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "stacks",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "volumes",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}