{
  "metadata": {
    "timestamp": 1736566455904,
    "page": 1,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cweill/gotests",
      "stars": 4989,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.009765625,
          "content": ".DS_Store\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.3740234375,
          "content": "Want to contribute? Great! First, read this page (including the small print at the end).\n\n### Before you contribute ###\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement](https://developers.google.com/open-source/cla/individual?csw=1)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other thingsâ€”for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n### Code reviews ###\nAll submissions, including submissions by project members, require review. We\nuse Github pull requests for this purpose.\n\n### The small print ###\nContributions made by corporations are covered by a different agreement than\nthe one above, the Software Grant and Corporate Contributor License Agreement.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.60546875,
          "content": "# gotests [![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/cweill/gotests/blob/master/LICENSE) [![godoc](https://img.shields.io/badge/go-documentation-blue.svg)](https://godoc.org/github.com/cweill/gotests) [![Build Status](https://github.com/cweill/gotests/workflows/Go/badge.svg)](https://github.com/cweill/gotests/actions) [![Coverage Status](https://coveralls.io/repos/github/cweill/gotests/badge.svg?branch=master)](https://coveralls.io/github/cweill/gotests?branch=master) [![codebeat badge](https://codebeat.co/badges/7ef052e3-35ff-4cab-88f9-e13393c8ab35)](https://codebeat.co/projects/github-com-cweill-gotests) [![Go Report Card](https://goreportcard.com/badge/github.com/cweill/gotests)](https://goreportcard.com/report/github.com/cweill/gotests)\n\n`gotests` makes writing Go tests easy. It's a Golang commandline tool that generates [table driven tests](https://github.com/golang/go/wiki/TableDrivenTests) based on its target source files' function and method signatures. Any new dependencies in the test files are automatically imported.\n\n## Demo\n\nThe following shows `gotests` in action using the [official Sublime Text 3 plugin](https://github.com/cweill/GoTests-Sublime). Plugins also exist for [Emacs](https://github.com/damienlevin/GoTests-Emacs), also [Emacs](https://github.com/s-kostyaev/go-gen-test), [Vim](https://github.com/buoto/gotests-vim), [Atom Editor](https://atom.io/packages/gotests), [Visual Studio Code](https://github.com/Microsoft/vscode-go), and [IntelliJ Goland](https://www.jetbrains.com/help/go/run-debug-configuration-for-go-test.html).\n\n![demo](https://github.com/cweill/GoTests-Sublime/blob/master/gotests.gif)\n\n## Installation\n\n__Minimum Go version:__ Go 1.6\n\nUse [`go get`](https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies) to install and update:\n\n```sh\n$ go get -u github.com/cweill/gotests/...\n```\n\n## Usage\n\nFrom the commandline, `gotests` can generate Go tests for specific source files or an entire directory. By default, it prints its output to `stdout`.\n\n```sh\n$ gotests [options] PATH ...\n```\n\nAvailable options:\n\n```\n  -all                  generate tests for all functions and methods\n\n  -excl                 regexp. generate tests for functions and methods that don't\n                         match. Takes precedence over -only, -exported, and -all\n\n  -exported             generate tests for exported functions and methods. Takes\n                         precedence over -only and -all\n\n  -i                    print test inputs in error messages\n\n  -only                 regexp. generate tests for functions and methods that match only.\n                         Takes precedence over -all\n\n  -nosubtests           disable subtest generation when >= Go 1.7\n\n  -parallel             enable parallel subtest generation when >= Go 1.7.\n\n  -w                    write output to (test) files instead of stdout\n\n  -template_dir         Path to a directory containing custom test code templates. Takes\n                         precedence over -template. This can also be set via environment\n                         variable GOTESTS_TEMPLATE_DIR\n\n  -template             Specify custom test code templates, e.g. testify. This can also\n                         be set via environment variable GOTESTS_TEMPLATE\n\n  -template_params_file read external parameters to template by json with file\n\n  -template_params      read external parameters to template by json with stdin\n```\n\n## Contributions\n\nContributing guidelines are in [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## License\n\n`gotests` is released under the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.1015625,
          "content": "module github.com/cweill/gotests\n\nrequire golang.org/x/tools v0.0.0-20191109212701-97ad0ed33101\n\ngo 1.6\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.814453125,
          "content": "golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/tools v0.0.0-20191109212701-97ad0ed33101 h1:LCmXVkvpQCDj724eX6irUTPCJP5GelFHxqGSWL2D1R0=\ngolang.org/x/tools v0.0.0-20191109212701-97ad0ed33101/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n"
        },
        {
          "name": "gotests.go",
          "type": "blob",
          "size": 5.90234375,
          "content": "// Package gotests contains the core logic for generating table-driven tests.\npackage gotests\n\nimport (\n\t\"fmt\"\n\t\"go/importer\"\n\t\"go/types\"\n\t\"path\"\n\t\"regexp\"\n\t\"sort\"\n\t\"sync\"\n\n\t\"github.com/cweill/gotests/internal/goparser\"\n\t\"github.com/cweill/gotests/internal/input\"\n\t\"github.com/cweill/gotests/internal/models\"\n\t\"github.com/cweill/gotests/internal/output\"\n)\n\n// Options provides custom filters and parameters for generating tests.\ntype Options struct {\n\tOnly           *regexp.Regexp         // Includes only functions that match.\n\tExclude        *regexp.Regexp         // Excludes functions that match.\n\tExported       bool                   // Include only exported methods\n\tPrintInputs    bool                   // Print function parameters in error messages\n\tSubtests       bool                   // Print tests using Go 1.7 subtests\n\tParallel       bool                   // Print tests that runs the subtests in parallel.\n\tNamed          bool                   // Create Map instead of slice\n\tImporter       func() types.Importer  // A custom importer.\n\tTemplate       string                 // Name of custom template set\n\tTemplateDir    string                 // Path to custom template set\n\tTemplateParams map[string]interface{} // Custom external parameters\n\tTemplateData   [][]byte               // Data slice for templates\n}\n\n// A GeneratedTest contains information about a test file with generated tests.\ntype GeneratedTest struct {\n\tPath      string             // The test file's absolute path.\n\tFunctions []*models.Function // The functions with new test methods.\n\tOutput    []byte             // The contents of the test file.\n}\n\n// GenerateTests generates table-driven tests for the function and method\n// signatures defined in the target source path file(s). The source path\n// parameter can be either a Go source file or directory containing Go files.\nfunc GenerateTests(srcPath string, opt *Options) ([]*GeneratedTest, error) {\n\tif opt == nil {\n\t\topt = &Options{}\n\t}\n\tsrcFiles, err := input.Files(srcPath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"input.Files: %v\", err)\n\t}\n\tfiles, err := input.Files(path.Dir(srcPath))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"input.Files: %v\", err)\n\t}\n\tif opt.Importer == nil || opt.Importer() == nil {\n\t\topt.Importer = importer.Default\n\t}\n\treturn parallelize(srcFiles, files, opt)\n}\n\n// result stores a generateTest result.\ntype result struct {\n\tgt  *GeneratedTest\n\terr error\n}\n\n// parallelize generates tests for the given source files concurrently.\nfunc parallelize(srcFiles, files []models.Path, opt *Options) ([]*GeneratedTest, error) {\n\tvar wg sync.WaitGroup\n\trs := make(chan *result, len(srcFiles))\n\tfor _, src := range srcFiles {\n\t\twg.Add(1)\n\t\t// Worker\n\t\tgo func(src models.Path) {\n\t\t\tdefer wg.Done()\n\t\t\tr := &result{}\n\t\t\tr.gt, r.err = generateTest(src, files, opt)\n\t\t\trs <- r\n\t\t}(src)\n\t}\n\t// Closer.\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(rs)\n\t}()\n\treturn readResults(rs)\n}\n\n// readResults reads the result channel.\nfunc readResults(rs <-chan *result) ([]*GeneratedTest, error) {\n\tvar gts []*GeneratedTest\n\tfor r := range rs {\n\t\tif r.err != nil {\n\t\t\treturn nil, r.err\n\t\t}\n\t\tif r.gt != nil {\n\t\t\tgts = append(gts, r.gt)\n\t\t}\n\t}\n\treturn gts, nil\n}\n\nfunc generateTest(src models.Path, files []models.Path, opt *Options) (*GeneratedTest, error) {\n\tp := &goparser.Parser{Importer: opt.Importer()}\n\tsr, err := p.Parse(string(src), files)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Parser.Parse source file: %v\", err)\n\t}\n\th := sr.Header\n\th.Code = nil // Code is only needed from parsed test files.\n\ttestPath := models.Path(src).TestPath()\n\th, tf, err := parseTestFile(p, testPath, h)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfuncs := testableFuncs(sr.Funcs, opt.Only, opt.Exclude, opt.Exported, tf)\n\tif len(funcs) == 0 {\n\t\treturn nil, nil\n\t}\n\n\toptions := output.Options{\n\t\tPrintInputs:    opt.PrintInputs,\n\t\tSubtests:       opt.Subtests,\n\t\tParallel:       opt.Parallel,\n\t\tNamed:          opt.Named,\n\t\tTemplate:       opt.Template,\n\t\tTemplateDir:    opt.TemplateDir,\n\t\tTemplateParams: opt.TemplateParams,\n\t\tTemplateData:   opt.TemplateData,\n\t}\n\n\tb, err := options.Process(h, funcs)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"output.Process: %v\", err)\n\t}\n\treturn &GeneratedTest{\n\t\tPath:      testPath,\n\t\tFunctions: funcs,\n\t\tOutput:    b,\n\t}, nil\n}\n\nfunc parseTestFile(p *goparser.Parser, testPath string, h *models.Header) (*models.Header, []string, error) {\n\tif !output.IsFileExist(testPath) {\n\t\treturn h, nil, nil\n\t}\n\ttr, err := p.Parse(testPath, nil)\n\tif err != nil {\n\t\tif err == goparser.ErrEmptyFile {\n\t\t\t// Overwrite empty test files.\n\t\t\treturn h, nil, nil\n\t\t}\n\t\treturn nil, nil, fmt.Errorf(\"Parser.Parse test file: %v\", err)\n\t}\n\tvar testFuncs []string\n\tfor _, fun := range tr.Funcs {\n\t\ttestFuncs = append(testFuncs, fun.Name)\n\t}\n\ttr.Header.Imports = append(tr.Header.Imports, h.Imports...)\n\th = tr.Header\n\treturn h, testFuncs, nil\n}\n\nfunc testableFuncs(funcs []*models.Function, only, excl *regexp.Regexp, exp bool, testFuncs []string) []*models.Function {\n\tsort.Strings(testFuncs)\n\tvar fs []*models.Function\n\tfor _, f := range funcs {\n\t\tif isTestFunction(f, testFuncs) || isExcluded(f, excl) || isUnexported(f, exp) || !isIncluded(f, only) || isInvalid(f) {\n\t\t\tcontinue\n\t\t}\n\t\tfs = append(fs, f)\n\t}\n\treturn fs\n}\n\nfunc isInvalid(f *models.Function) bool {\n\tif f.Name == \"init\" && f.IsNaked() {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc isTestFunction(f *models.Function, testFuncs []string) bool {\n\treturn len(testFuncs) > 0 && contains(testFuncs, f.TestName())\n}\n\nfunc isExcluded(f *models.Function, excl *regexp.Regexp) bool {\n\treturn excl != nil && (excl.MatchString(f.Name) || excl.MatchString(f.FullName()))\n}\n\nfunc isUnexported(f *models.Function, exp bool) bool {\n\treturn exp && !f.IsExported\n}\n\nfunc isIncluded(f *models.Function, only *regexp.Regexp) bool {\n\treturn only == nil || only.MatchString(f.Name) || only.MatchString(f.FullName())\n}\n\nfunc contains(ss []string, s string) bool {\n\tif i := sort.SearchStrings(ss, s); i < len(ss) && ss[i] == s {\n\t\treturn true\n\t}\n\treturn false\n}\n"
        },
        {
          "name": "gotests",
          "type": "tree",
          "content": null
        },
        {
          "name": "gotests_test.go",
          "type": "blob",
          "size": 29.0048828125,
          "content": "package gotests\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"go/types\"\n\t\"io/ioutil\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"runtime\"\n\t\"strings\"\n\t\"testing\"\n\t\"unicode\"\n\n\t\"golang.org/x/tools/imports\"\n)\n\nfunc TestGenerateTests(t *testing.T) {\n\ttype args struct {\n\t\tsrcPath            string\n\t\tonly               *regexp.Regexp\n\t\texcl               *regexp.Regexp\n\t\texported           bool\n\t\tprintInputs        bool\n\t\tsubtests           bool\n\t\tparallel           bool\n\t\tnamed              bool\n\t\timporter           types.Importer\n\t\ttemplateDir        string\n\t\ttemplate           string\n\t\ttemplateParamsPath string\n\t\ttemplateData       [][]byte\n\t}\n\ttests := []struct {\n\t\tname              string\n\t\targs              args\n\t\twant              string\n\t\twantNoTests       bool\n\t\twantMultipleTests bool\n\t\twantErr           bool\n\t}{\n\t\t{\n\t\t\tname: \"Blank Go file\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/blankfile/blank.go`,\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t\twantErr:     true,\n\t\t},\n\t\t{\n\t\t\tname: \"Blank Go file in directory\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/blankfile/notblank.go`,\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t\twantErr:     true,\n\t\t},\n\t\t{\n\t\t\tname: \"Test file with garbage data\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/invalidtest/invalid.go`,\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t\twantErr:     true,\n\t\t},\n\t\t{\n\t\t\tname: \"Hidden file\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/.hidden.go`,\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t\twantErr:     true,\n\t\t},\n\t\t{\n\t\t\tname: \"Nonexistant file\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/nonexistant.go`,\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t\twantErr:     true,\n\t\t},\n\t\t{\n\t\t\tname: \"Target test file\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test103_test.go`,\n\t\t\t\tonly:     regexp.MustCompile(\"wrapToString\"),\n\t\t\t\tsubtests: true,\n\t\t\t},\n\t\t\twantNoTests: false,\n\t\t\twantErr:     false,\n\t\t\twant:        mustReadAndFormatGoFile(t, `testdata/goldens/target_test_file.go`),\n\t\t},\n\t\t{\n\t\t\tname: \"Target test file without only flag\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test103_test.go`,\n\t\t\t\tsubtests: true,\n\t\t\t},\n\t\t\twantNoTests: false,\n\t\t\twantErr:     false,\n\t\t\twant:        mustReadAndFormatGoFile(t, `testdata/goldens/target_test_file.go`),\n\t\t},\n\t\t{\n\t\t\tname: \"No funcs\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test000.go`,\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t},\n\t\t{\n\t\t\tname: \"Function with neither receiver, parameters, nor results\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test001.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_neither_receiver_parameters_nor_results.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with anonymous arguments\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test002.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_anonymous_arguments.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with named argument\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test003.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_named_argument.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with return value\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test004.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_return_value.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function returning an error\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test005.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_returning_an_error.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with multiple arguments\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test006.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_multiple_arguments.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Print inputs with multiple arguments\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:     `testdata/test006.go`,\n\t\t\t\tprintInputs: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/print_inputs_with_multiple_arguments.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Method on a struct pointer\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test007.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/method_on_a_struct_pointer.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Print inputs with single argument\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:     `testdata/test007.go`,\n\t\t\t\tprintInputs: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/print_inputs_with_single_argument.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with struct pointer argument and return type\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test008.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_struct_pointer_argument_and_return_type.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Struct value method with struct value return type\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test009.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/struct_value_method_with_struct_value_return_type.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with map argument and return type\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test010.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_map_argument_and_return_type.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with slice argument and return type\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test011.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_slice_argument_and_return_type.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function returning only an error\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test012.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_returning_only_an_error.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with a function parameter\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test013.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_a_function_parameter.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with a function parameter with its own parameters and result\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test014.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_a_function_parameter_with_its_own_parameters_and_result.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with a function parameter that returns two results\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test015.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_a_function_parameter_that_returns_two_results.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with defined interface type parameter and result\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test016.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_defined_interface_type_parameter_and_result.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with imported interface receiver, parameter, and result\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test017.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_imported_interface_receiver_parameter_and_result.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with imported struct receiver, parameter, and result\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test018.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_imported_struct_receiver_parameter_and_result.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with multiple parameters of the same type\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test019.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_multiple_parameters_of_the_same_type.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with a variadic parameter\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test020.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_a_variadic_parameter.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with interface{} parameter and result\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test021.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_interface_parameter_and_result.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with named imports\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test022.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_named_imports.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function with channel parameter and result\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test023.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_channel_parameter_and_result.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"File with multiple imports\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test024.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/file_with_multiple_imports.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Function returning two results and an error\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test025.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_returning_two_results_and_an_error.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple named results\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test026.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_named_results.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Two different structs with same method name\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test027.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/two_different_structs_with_same_method_name.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Underlying types\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test028.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/underlying_types.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Struct receiver with multiple fields\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test029.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/struct_receiver_with_multiple_fields.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Struct receiver with anonymous fields\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test030.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/struct_receiver_with_anonymous_fields.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"io.Writer parameters\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test031.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/io_writer_parameters.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Two structs with same method name\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test032.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/two_structs_with_same_method_name.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Functions and methods with 'name' receivers, parameters, and results\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test033.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/functions_and_methods_with_name_receivers_parameters_and_results.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Receiver struct with reserved field names\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test034.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/receiver_struct_with_reserved_field_names.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Receiver struct with fields with complex package names\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test035.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/receiver_struct_with_fields_with_complex_package_names.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Functions and receivers with same names except exporting\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test036.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/functions_and_receivers_with_same_names_except_exporting.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Receiver is indirect imported struct\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test037.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/receiver_is_indirect_imported_struct.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions with only\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\tonly:    regexp.MustCompile(\"FooFilter|bazFilter\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_with_only.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions with only regexp without matches\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\tonly:    regexp.MustCompile(\"asdf\"),\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions with case-insensitive only\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\tonly:    regexp.MustCompile(\"(?i)fooFilter|BazFilter\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_with_case-insensitive_only.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions with only filtering on receiver\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\tonly:    regexp.MustCompile(\"^BarBarFilter$\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_with_only_filtering_on_receiver.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions with only filtering on method\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\tonly:    regexp.MustCompile(\"^(BarFilter)$\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_with_only_filtering_on_method.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions filtering exported\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test_filter.go`,\n\t\t\t\texported: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_filtering_exported.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions filtering exported with only\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test_filter.go`,\n\t\t\t\tonly:     regexp.MustCompile(`FooFilter`),\n\t\t\t\texported: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_filtering_exported_with_only.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions filtering all out\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\tonly:    regexp.MustCompile(\"fooFilter\"),\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions with excl\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\texcl:    regexp.MustCompile(\"FooFilter|bazFilter\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_with_excl.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions with case-insensitive excl\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\texcl:    regexp.MustCompile(\"(?i)foOFilter|BaZFilter\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_with_case-insensitive_excl.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions filtering exported with excl\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test_filter.go`,\n\t\t\t\texcl:     regexp.MustCompile(`FooFilter`),\n\t\t\t\texported: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_filtering_exported_with_excl.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions excluding all\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\texcl:    regexp.MustCompile(\"bazFilter|FooFilter|BarFilter\"),\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions excluding on receiver\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\texcl:    regexp.MustCompile(\"^BarBarFilter$\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_excluding_on_receiver.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions excluding on method\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\texcl:    regexp.MustCompile(\"^BarFilter$\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_excluding_on_method.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions with both only and excl\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\tonly:    regexp.MustCompile(\"BarFilter\"),\n\t\t\t\texcl:    regexp.MustCompile(\"FooFilter\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_with_both_only_and_excl.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Multiple functions with only and excl competing\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_filter.go`,\n\t\t\t\tonly:    regexp.MustCompile(\"FooFilter|BarFilter\"),\n\t\t\t\texcl:    regexp.MustCompile(\"FooFilter|bazFilter\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/multiple_functions_with_only_and_excl_competing.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Custom importer fails\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test_filter.go`,\n\t\t\t\timporter: &fakeImporter{err: errors.New(\"error\")},\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/custom_importer_fails.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Existing test file\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test100.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/existing_test_file.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Existing test file with just package declaration\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test101.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/existing_test_file_with_just_package_declaration.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Existing test file with no functions\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test102.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/existing_test_file_with_no_functions.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Existing test file with multiple imports\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test200.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/existing_test_file_with_multiple_imports.go\"),\n\t\t},\n\t\t{ // WORNING: data race condition, if called with -race flag, because of structure in `internal/templates` package.\n\t\t\tname: \"Entire testdata directory\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/`,\n\t\t\t\ttemplate: \"testify\",\n\t\t\t},\n\t\t\twantMultipleTests: true,\n\t\t},\n\t\t{\n\t\t\tname: \"Different packages in same directory - part 1\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/mixedpkg/bar.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/different_packages_in_same_directory_-_part_1.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Different packages in same directory - part 2\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/mixedpkg/foo.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/different_packages_in_same_directory_-_part_2.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Empty test file\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/blanktest/blank.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/empty_test_file.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Test file with syntax errors\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/syntaxtest/syntax.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/test_file_with_syntax_errors.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Undefined types\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/undefinedtypes/undefined.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/undefined_types.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Subtest Edition - Functions and receivers with same names except exporting\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test036.go`,\n\t\t\t\tsubtests: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/subtest_edition_-_functions_and_receivers_with_same_names_except_exporting.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Test t method receiver\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_t_receiver.go`,\n\t\t\t},\n\t\t\twantNoTests: false,\n\t\t\twantErr:     false,\n\t\t\twant:        mustReadAndFormatGoFile(t, `testdata/goldens/test_t_receiver.go`),\n\t\t},\n\t\t{\n\t\t\tname: \"Init function\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/init_func.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/no_init_funcs.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Existing test file with package level comments\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_existing_test_file_with_comments.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/existing_test_file_with_package_level_comments.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Existing test file with package level comments with newline\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_existing_test_file_with_comments.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/existing_test_file_with_package_level_comments.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Existing test file with package level comments without newline\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_existing_test_file_with_comments_without_newline.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/existing_test_file_with_package_level_comments_without_newline.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Existing test file with mixed types package level comments\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/test_existing_test_file_with_mixed_comments.go`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/existing_test_file_with_package_level_mixed_types_comments.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Naked function with subtests\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  \"testdata/naked_function_with_subtests.go\",\n\t\t\t\tsubtests: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/naked_function_with_subtests.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Naked function with parallel subtests\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  \"testdata/naked_function_with_parallel_subtests.go\",\n\t\t\t\tsubtests: true,\n\t\t\t\tparallel: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/naked_function_with_parallel_subtests.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Naked function without subtests\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  \"testdata/naked_function_without_subtests.go\",\n\t\t\t\tsubtests: false,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/naked_function_without_subtests.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Naked function without subtests with parallel\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  \"testdata/naked_function_without_subtests_with_parallel.go\",\n\t\t\t\tparallel: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/naked_function_without_subtests_with_parallel.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Test non existing template path\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:     `testdata/calculator.go`,\n\t\t\t\ttemplateDir: `/tmp/not/existing/path`,\n\t\t\t},\n\t\t\twantErr:     true,\n\t\t\twantNoTests: true,\n\t\t},\n\t\t{\n\t\t\tname: \"Test non bad template formatting\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:     `testdata/calculator.go`,\n\t\t\t\ttemplateDir: `testdata/bad_customtemplates`,\n\t\t\t},\n\t\t\twantErr:     true,\n\t\t\twantNoTests: true,\n\t\t},\n\t\t{\n\t\t\tname: \"Test custom template path\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:     `testdata/test004.go`,\n\t\t\t\ttemplateDir: `testdata/customtemplates`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_return_value_custom_template.go\"),\n\t\t},\n\t\t{ // WORNING: panics on -race flag.\n\t\t\tname: \"Test interface embedding\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: `testdata/undefinedtypes/interface_embedding.go`,\n\t\t\t},\n\t\t\twant:        mustReadAndFormatGoFile(t, \"testdata/goldens/interface_embedding.go\"),\n\t\t\twantNoTests: !versionGreaterOrEqualThan(\"go1.11\"),\n\t\t\twantErr:     !versionGreaterOrEqualThan(\"go1.11\"),\n\t\t},\n\t\t{\n\t\t\tname: \"Test use external params and custom template\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:            `testdata/use_template_params/use_template_params.go`,\n\t\t\t\ttemplateDir:        `testdata/use_template_params/`,\n\t\t\t\ttemplateParamsPath: `testdata/use_template_params/use_template_params.json`,\n\t\t\t},\n\t\t\twantNoTests: false,\n\t\t\twantErr:     false,\n\t\t\twant:        mustReadAndFormatGoFile(t, \"testdata/goldens/use_template_params_test.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"With template=testify\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test201.go`,\n\t\t\t\ttemplate: \"testify\",\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/template_testify.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"With template=testify and subtests\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test201.go`,\n\t\t\t\ttemplate: \"testify\",\n\t\t\t\tsubtests: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/template_testify_subtests.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"With template=testify and printInputs\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:     `testdata/test201.go`,\n\t\t\t\ttemplate:    \"testify\",\n\t\t\t\tprintInputs: true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/template_testify_printinputs.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"With template=testify and subtests and printInputs\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:     `testdata/test201.go`,\n\t\t\t\ttemplate:    \"testify\",\n\t\t\t\tprintInputs: true,\n\t\t\t\tsubtests:    true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/template_testify_subtests_printinputs.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"With template=unknown\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test004.go`,\n\t\t\t\ttemplate: \"unknown\",\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t\twantErr:     true,\n\t\t},\n\t\t{\n\t\t\tname: \"With template=testify templateDir=testdata/customtemplates\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:     `testdata/test004.go`,\n\t\t\t\ttemplate:    \"testify\",\n\t\t\t\ttemplateDir: `testdata/customtemplates`,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_return_value_custom_template.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"With template=test_empty (empty directory)\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test004.go`,\n\t\t\t\ttemplate: \"test_empty\",\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t\twantErr:     true,\n\t\t},\n\t\t{\n\t\t\tname: \"With template=test (invalid template)\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  `testdata/test004.go`,\n\t\t\t\ttemplate: \"test\",\n\t\t\t},\n\t\t\twantNoTests: true,\n\t\t\twantErr:     true,\n\t\t},\n\t\t{\n\t\t\tname: \"With templateData\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:      `testdata/test004.go`,\n\t\t\t\ttemplateData: mustLoadExternalTemplateDir(t, \"testdata/templatedata/\"),\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/goldens/function_with_return_value_template_data.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"named_named=on\",\n\t\t\targs: args{\n\t\t\t\tsrcPath: \"testdata/test038.go\",\n\t\t\t\tnamed:   true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/named/named_on.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"named_named=on,template=testify\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  \"testdata/test038.go\",\n\t\t\t\ttemplate: \"testify\",\n\t\t\t\tnamed:    true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/named/named_on_template_testify.go\"),\n\t\t},\n\n\t\t{\n\t\t\tname: \"named_named=on,subtests=on\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  \"testdata/test038.go\",\n\t\t\t\tsubtests: true,\n\t\t\t\tnamed:    true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/named/named_on_subtests_on.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"named_named=on,subtests=on,template=testify\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  \"testdata/test038.go\",\n\t\t\t\tsubtests: true,\n\t\t\t\tnamed:    true,\n\t\t\t\ttemplate: \"testify\",\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/named/named_on_subtests_on_template_testify.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"named_named=on,subtests=on,parallel=on\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  \"testdata/test038.go\",\n\t\t\t\tsubtests: true,\n\t\t\t\tparallel: true,\n\t\t\t\tnamed:    true,\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/named/named_on_subtests_on_parallel_on.go\"),\n\t\t},\n\t\t{\n\t\t\tname: \"named_named=on,subtests=on,parallel=on,template=testify\",\n\t\t\targs: args{\n\t\t\t\tsrcPath:  \"testdata/test038.go\",\n\t\t\t\tsubtests: true,\n\t\t\t\tparallel: true,\n\t\t\t\tnamed:    true,\n\t\t\t\ttemplate: \"testify\",\n\t\t\t},\n\t\t\twant: mustReadAndFormatGoFile(t, \"testdata/named/named_on_subtests_on_parallel_on_template_testify.go\"),\n\t\t},\n\t}\n\ttmp, err := ioutil.TempDir(\"\", \"gotests_test\")\n\tif err != nil {\n\t\tt.Fatalf(\"ioutil.TempDir: %v\", err)\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tvar params map[string]interface{}\n\t\t\tvar err error\n\t\t\tif tt.args.templateParamsPath != \"\" {\n\t\t\t\tparams, err = loadExternalJsonFile(tt.args.templateParamsPath)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Error(tt.name, err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgts, err := GenerateTests(tt.args.srcPath, &Options{\n\t\t\t\tOnly:           tt.args.only,\n\t\t\t\tExclude:        tt.args.excl,\n\t\t\t\tExported:       tt.args.exported,\n\t\t\t\tPrintInputs:    tt.args.printInputs,\n\t\t\t\tSubtests:       tt.args.subtests,\n\t\t\t\tParallel:       tt.args.parallel,\n\t\t\t\tNamed:          tt.args.named,\n\t\t\t\tImporter:       func() types.Importer { return tt.args.importer },\n\t\t\t\tTemplateDir:    tt.args.templateDir,\n\t\t\t\tTemplate:       tt.args.template,\n\t\t\t\tTemplateParams: params,\n\t\t\t\tTemplateData:   tt.args.templateData,\n\t\t\t})\n\t\t\tif (err != nil) != tt.wantErr {\n\t\t\t\tt.Errorf(\"%q. GenerateTests(%v) error = %v, wantErr %v\", tt.name, tt.args.srcPath, err, tt.wantErr)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (len(gts) == 0) != tt.wantNoTests {\n\t\t\t\tt.Errorf(\"%q. GenerateTests(%v) returned no tests\", tt.name, tt.args.srcPath)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (len(gts) > 1) != tt.wantMultipleTests {\n\t\t\t\tt.Errorf(\"%q. GenerateTests(%v) returned too many tests\", tt.name, tt.args.srcPath)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif tt.wantNoTests || tt.wantMultipleTests {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif got := string(gts[0].Output); got != tt.want {\n\t\t\t\tt.Errorf(\"%q. GenerateTests(%v) = \\n%v, want \\n%v\", tt.name, tt.args.srcPath, got, tt.want)\n\t\t\t\toutputResult(t, tmp, tt.name, gts[0].Output)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc versionGreaterOrEqualThan(version string) bool {\n\tprefixes := []string{\"go1.9\", \"go1.10\", \"go1.11\", \"go1.12\", \"go1.13\"}\n\tv := runtime.Version()\n\tfor _, prefix := range prefixes {\n\t\tif strings.Contains(version, prefix) {\n\t\t\treturn true\n\t\t}\n\t\tif strings.Contains(v, prefix) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc mustReadAndFormatGoFile(t *testing.T, filename string) string {\n\tfmted, err := imports.Process(filename, nil, nil)\n\tif err != nil {\n\t\tt.Fatalf(\"reading and formatting file: %v\", err)\n\t}\n\treturn string(fmted)\n}\n\nfunc outputResult(t *testing.T, tmpDir, testName string, got []byte) {\n\ttmpResult := path.Join(tmpDir, toSnakeCase(testName)+\".go\")\n\tif err := ioutil.WriteFile(tmpResult, got, 0644); err != nil {\n\t\tt.Errorf(\"ioutil.WriteFile: %v\", err)\n\t}\n\tt.Logf(tmpResult)\n}\n\nfunc loadExternalJsonFile(file string) (map[string]interface{}, error) {\n\tbuf, err := ioutil.ReadFile(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tparams := map[string]interface{}{}\n\terr = json.Unmarshal(buf, &params)\n\treturn params, err\n}\n\nfunc mustLoadExternalTemplateDir(t *testing.T, dir string) [][]byte {\n\tfiles, err := ioutil.ReadDir(dir)\n\tif err != nil {\n\t\tt.Fatalf(\"ioutil.ReadDir: %v\", err)\n\t}\n\n\ttemplateData := make([][]byte, 0)\n\n\tfor _, f := range files {\n\t\tfilePath := filepath.Join(dir, f.Name())\n\t\ttemplateData = append(templateData, mustLoadExternalTemplateFile(t, filePath))\n\t}\n\n\treturn templateData\n}\n\nfunc mustLoadExternalTemplateFile(t *testing.T, file string) []byte {\n\tbuf, err := ioutil.ReadFile(file)\n\tif err != nil {\n\t\tt.Fatalf(\"loading external template file: %v\", err)\n\t}\n\n\treturn buf\n}\n\nfunc toSnakeCase(s string) string {\n\tvar res []rune\n\tfor _, r := range []rune(s) {\n\t\tr = unicode.ToLower(r)\n\t\tswitch r {\n\t\tcase ' ', '.':\n\t\t\tr = '_'\n\t\tcase ',', '\\'', '{', '}':\n\t\t\tcontinue\n\t\t}\n\t\tres = append(res, r)\n\t}\n\treturn string(res)\n}\n\n// 249032394 ns/op\nfunc BenchmarkGenerateTests(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tGenerateTests(\"testdata/\", &Options{})\n\t}\n}\n\n// A fake importer.\ntype fakeImporter struct {\n\terr error\n}\n\nfunc (f *fakeImporter) Import(path string) (*types.Package, error) {\n\treturn nil, f.err\n}\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}