{
  "metadata": {
    "timestamp": 1736567147371,
    "page": 743,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "charmbracelet/glamour",
      "stars": 2569,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5087890625,
          "content": "*.golden linguist-generated\nstyles/gallery/auto.png filter=lfs diff=lfs merge=lfs -text\nstyles/gallery/dark.png filter=lfs diff=lfs merge=lfs -text\nstyles/gallery/dracula.png filter=lfs diff=lfs merge=lfs -text\nstyles/gallery/light.png filter=lfs diff=lfs merge=lfs -text\nstyles/gallery/notty.png filter=lfs diff=lfs merge=lfs -text\nstyles/gallery/pink.png filter=lfs diff=lfs merge=lfs -text\nstyles/gallery/tokyo-night.png filter=lfs diff=lfs merge=lfs -text\nstyles/gallery/ascii.png filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "cmd/\n!*.test\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.3505859375,
          "content": "run:\n  tests: false\n\nissues:\n  max-issues-per-linter: 0\n  max-same-issues: 0\n\nlinters:\n  enable:\n    - bodyclose\n    - dupl\n    - exportloopref\n    - goconst\n    - godot\n    - godox\n    - goimports\n    - mnd\n    - goprintffuncname\n    - gosec\n    - misspell\n    - prealloc\n    - rowserrcheck\n    - sqlclosecheck\n    - unconvert\n    - unparam\n    - whitespace\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 0.1552734375,
          "content": "includes:\n  - from_url:\n      url: charmbracelet/meta/main/goreleaser-lib.yaml\n\n# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.611328125,
          "content": "# Contributing\n\nContributions are welcome!\n\nPlease submit a pull request for minor changes and submit issues for major changes for discussions.\n\n## Testing\n\nWhen providing a new feature or bug fix, please provide tests that demonstrate the issue along with your fix.\n\n### Golden Files\n\nIf golden files need to be updated, you can do so with `-update`.\n\nUsage: `go test ./pkg/... -update`.\n\n## Themes\n\nNew styles need to be implemented in `styles/<style-name>.go`, and then `go generate\n./...` will create the JSON files from it.\n\nYou can look up all references of another theme (e.g. Dracula), and add your\ntheme accordingly.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "MIT License\n\nCopyright (c) 2019-2023 Charmbracelet, Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.8017578125,
          "content": "# Glamour\n\n<p>\n    <img src=\"https://github.com/user-attachments/assets/23aabf2a-8bd8-4e7b-bb50-993bce32541d\" width=\"300\" alt=\"Glamour Title Treatment\"><br>\n    <a href=\"https://github.com/charmbracelet/glamour/releases\"><img src=\"https://img.shields.io/github/release/charmbracelet/glamour.svg\" alt=\"Latest Release\"></a>\n    <a href=\"https://pkg.go.dev/github.com/charmbracelet/glamour?tab=doc\"><img src=\"https://godoc.org/github.com/golang/gddo?status.svg\" alt=\"GoDoc\"></a>\n    <a href=\"https://github.com/charmbracelet/glamour/actions\"><img src=\"https://github.com/charmbracelet/glamour/workflows/build/badge.svg\" alt=\"Build Status\"></a>\n    <a href=\"https://coveralls.io/github/charmbracelet/glamour?branch=master\"><img src=\"https://coveralls.io/repos/github/charmbracelet/glamour/badge.svg?branch=master\" alt=\"Coverage Status\"></a>\n    <a href=\"https://goreportcard.com/report/charmbracelet/glamour\"><img src=\"https://goreportcard.com/badge/charmbracelet/glamour\" alt=\"Go ReportCard\"></a>\n</p>\n\nStylesheet-based markdown rendering for your CLI apps.\n\n<img width=\"845\" src=\"https://github.com/user-attachments/assets/ec2ead40-c467-48cc-b6a8-f0f13709eeab\" alt=\"Glamour example\">\n\n`glamour` lets you render [markdown](https://en.wikipedia.org/wiki/Markdown)\ndocuments & templates on [ANSI](https://en.wikipedia.org/wiki/ANSI_escape_code)\ncompatible terminals. You can create your own stylesheet or simply use one of\nthe stylish defaults.\n\n## Usage\n\n```go\nimport \"github.com/charmbracelet/glamour\"\n\nin := `# Hello World\n\nThis is a simple example of Markdown rendering with Glamour!\nCheck out the [other examples](https://github.com/charmbracelet/glamour/tree/master/examples) too.\n\nBye!\n`\n\nout, err := glamour.Render(in, \"dark\")\nfmt.Print(out)\n```\n\n<img src=\"https://github.com/charmbracelet/glamour/raw/master/examples/helloworld/helloworld.png\" width=\"600\" alt=\"Hello World example\">\n\n### Custom Renderer\n\n```go\nimport \"github.com/charmbracelet/glamour\"\n\nr, _ := glamour.NewTermRenderer(\n    // detect background color and pick either the default dark or light theme\n    glamour.WithAutoStyle(),\n    // wrap output at specific width (default is 80)\n    glamour.WithWordWrap(40),\n)\n\nout, err := r.Render(in)\nfmt.Print(out)\n```\n\n## Styles\n\nYou can find all available default styles in our [gallery](https://github.com/charmbracelet/glamour/tree/master/styles/gallery).\nWant to create your own style? [Learn how!](https://github.com/charmbracelet/glamour/tree/master/styles)\n\nThere are a few options for using a custom style:\n\n1. Call `glamour.Render(inputText, \"desiredStyle\")`\n1. Set the `GLAMOUR_STYLE` environment variable to your desired default style or a file location for a style and call `glamour.RenderWithEnvironmentConfig(inputText)`\n1. Set the `GLAMOUR_STYLE` environment variable and pass `glamour.WithEnvironmentConfig()` to your custom renderer\n\n## Glamourous Projects\n\nCheck out these projects, which use `glamour`:\n\n- [Glow](https://github.com/charmbracelet/glow), a markdown renderer for\n  the command-line.\n- [GitHub CLI](https://github.com/cli/cli), GitHub’s official command line tool.\n- [GitLab CLI](https://gitlab.com/gitlab-org/cli), GitLab's official command line tool.\n- [Gitea CLI](https://gitea.com/gitea/tea), Gitea's official command line tool.\n- [Meteor](https://github.com/odpf/meteor), an easy-to-use, plugin-driven metadata collection framework.\n\n## Feedback\n\nWe’d love to hear your thoughts on this project. Feel free to drop us a note!\n\n- [Twitter](https://twitter.com/charmcli)\n- [The Fediverse](https://mastodon.social/@charmcli)\n- [Discord](https://charm.sh/chat)\n\n## License\n\n[MIT](https://github.com/charmbracelet/glamour/raw/master/LICENSE)\n\n---\n\nPart of [Charm](https://charm.sh).\n\n<a href=\"https://charm.sh/\"><img alt=\"The Charm logo\" src=\"https://stuff.charm.sh/charm-badge.jpg\" width=\"400\"></a>\n\nCharm热爱开源 • Charm loves open source\n"
        },
        {
          "name": "ansi",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples.sh",
          "type": "blob",
          "size": 0.5400390625,
          "content": "#!/bin/bash\n\nset -e\n\nfor element in ./styles/examples/*.md; do\n    echo \"Generating screenshot for element ${element}\"\n    basename=\"`basename -s .md ${element}`\"\n    stylename=\"${basename}.style\"\n    filename=\"${basename}.png\"\n\n    # take screenshot\n    ./termshot -o ./styles/examples/ -f \"$filename\" glow -s ./styles/examples/${stylename} ${element}\n\n    # add border\n    convert -bordercolor black -border 16x16 \"./styles/examples/$filename\" \"./styles/examples/$filename\"\n\n    # optimize filesize\n    pngcrush -ow \"./styles/examples/$filename\"\ndone\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gallery.sh",
          "type": "blob",
          "size": 0.7333984375,
          "content": "#!/bin/bash\n\nif ! command -v freeze &> /dev/null; then\n    echo \"freeze not found. Please install freeze to capture images.\"\n    echo \"https://github.com/charmbracelet/freeze/\"\n    exit 1\nfi\n\ndefaultStyles=(\"ascii\" \"auto\" \"dark\" \"dracula\" \"light\" \"notty\" \"pink\")\n\nfor style in \"${defaultStyles[@]}\"; do\n    echo \"Generating screenshot for ${style}\"\n    # take screenshot\n    if [[ $style == *\"light\"* ]]; then\n        # Provide a light background to images\n        freeze  -x \"go run ./examples/artichokes ${style}\" -b \"#FAFAFA\" -o \"./styles/gallery/${style}.png\"\n    else\n        freeze  -x \"go run ./examples/artichokes ${style}\" -o \"./styles/gallery/${style}.png\"\n    fi\n\n    # optimize filesize\n    pngcrush -ow \"./styles/gallery/$style.png\"\ndone\n"
        },
        {
          "name": "glamour.go",
          "type": "blob",
          "size": 6.775390625,
          "content": "package glamour\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/muesli/termenv\"\n\t\"github.com/yuin/goldmark\"\n\temoji \"github.com/yuin/goldmark-emoji\"\n\t\"github.com/yuin/goldmark/extension\"\n\t\"github.com/yuin/goldmark/parser\"\n\t\"github.com/yuin/goldmark/renderer\"\n\t\"github.com/yuin/goldmark/util\"\n\t\"golang.org/x/term\"\n\n\t\"github.com/charmbracelet/glamour/ansi\"\n\tstyles \"github.com/charmbracelet/glamour/styles\"\n)\n\nconst (\n\tdefaultWidth = 80\n\thighPriority = 1000\n)\n\n// A TermRendererOption sets an option on a TermRenderer.\ntype TermRendererOption func(*TermRenderer) error\n\n// TermRenderer can be used to render markdown content, posing a depth of\n// customization and styles to fit your needs.\ntype TermRenderer struct {\n\tmd          goldmark.Markdown\n\tansiOptions ansi.Options\n\tbuf         bytes.Buffer\n\trenderBuf   bytes.Buffer\n}\n\n// Render initializes a new TermRenderer and renders a markdown with a specific\n// style.\nfunc Render(in string, stylePath string) (string, error) {\n\tb, err := RenderBytes([]byte(in), stylePath)\n\treturn string(b), err\n}\n\n// RenderWithEnvironmentConfig initializes a new TermRenderer and renders a\n// markdown with a specific style defined by the GLAMOUR_STYLE environment variable.\nfunc RenderWithEnvironmentConfig(in string) (string, error) {\n\tb, err := RenderBytes([]byte(in), getEnvironmentStyle())\n\treturn string(b), err\n}\n\n// RenderBytes initializes a new TermRenderer and renders a markdown with a\n// specific style.\nfunc RenderBytes(in []byte, stylePath string) ([]byte, error) {\n\tr, err := NewTermRenderer(\n\t\tWithStylePath(stylePath),\n\t)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn r.RenderBytes(in)\n}\n\n// NewTermRenderer returns a new TermRenderer the given options.\nfunc NewTermRenderer(options ...TermRendererOption) (*TermRenderer, error) {\n\ttr := &TermRenderer{\n\t\tmd: goldmark.New(\n\t\t\tgoldmark.WithExtensions(\n\t\t\t\textension.GFM,\n\t\t\t\textension.DefinitionList,\n\t\t\t),\n\t\t\tgoldmark.WithParserOptions(\n\t\t\t\tparser.WithAutoHeadingID(),\n\t\t\t),\n\t\t),\n\t\tansiOptions: ansi.Options{\n\t\t\tWordWrap:     defaultWidth,\n\t\t\tColorProfile: termenv.TrueColor,\n\t\t},\n\t}\n\tfor _, o := range options {\n\t\tif err := o(tr); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tar := ansi.NewRenderer(tr.ansiOptions)\n\ttr.md.SetRenderer(\n\t\trenderer.NewRenderer(\n\t\t\trenderer.WithNodeRenderers(\n\t\t\t\tutil.Prioritized(ar, highPriority),\n\t\t\t),\n\t\t),\n\t)\n\treturn tr, nil\n}\n\n// WithBaseURL sets a TermRenderer's base URL.\nfunc WithBaseURL(baseURL string) TermRendererOption {\n\treturn func(tr *TermRenderer) error {\n\t\ttr.ansiOptions.BaseURL = baseURL\n\t\treturn nil\n\t}\n}\n\n// WithColorProfile sets the TermRenderer's color profile\n// (TrueColor / ANSI256 / ANSI).\nfunc WithColorProfile(profile termenv.Profile) TermRendererOption {\n\treturn func(tr *TermRenderer) error {\n\t\ttr.ansiOptions.ColorProfile = profile\n\t\treturn nil\n\t}\n}\n\n// WithStandardStyle sets a TermRenderer's styles with a standard (builtin)\n// style.\nfunc WithStandardStyle(style string) TermRendererOption {\n\treturn func(tr *TermRenderer) error {\n\t\tstyles, err := getDefaultStyle(style)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttr.ansiOptions.Styles = *styles\n\t\treturn nil\n\t}\n}\n\n// WithAutoStyle sets a TermRenderer's styles with either the standard dark\n// or light style, depending on the terminal's background color at run-time.\nfunc WithAutoStyle() TermRendererOption {\n\treturn WithStandardStyle(styles.AutoStyle)\n}\n\n// WithEnvironmentConfig sets a TermRenderer's styles based on the\n// GLAMOUR_STYLE environment variable.\nfunc WithEnvironmentConfig() TermRendererOption {\n\treturn WithStylePath(getEnvironmentStyle())\n}\n\n// WithStylePath sets a TermRenderer's style from stylePath. stylePath is first\n// interpreted as a filename. If no such file exists, it is re-interpreted as a\n// standard style.\nfunc WithStylePath(stylePath string) TermRendererOption {\n\treturn func(tr *TermRenderer) error {\n\t\tstyles, err := getDefaultStyle(stylePath)\n\t\tif err != nil {\n\t\t\tjsonBytes, err := os.ReadFile(stylePath)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\treturn json.Unmarshal(jsonBytes, &tr.ansiOptions.Styles)\n\t\t}\n\t\ttr.ansiOptions.Styles = *styles\n\t\treturn nil\n\t}\n}\n\n// WithStyles sets a TermRenderer's styles.\nfunc WithStyles(styles ansi.StyleConfig) TermRendererOption {\n\treturn func(tr *TermRenderer) error {\n\t\ttr.ansiOptions.Styles = styles\n\t\treturn nil\n\t}\n}\n\n// WithStylesFromJSONBytes sets a TermRenderer's styles by parsing styles from\n// jsonBytes.\nfunc WithStylesFromJSONBytes(jsonBytes []byte) TermRendererOption {\n\treturn func(tr *TermRenderer) error {\n\t\treturn json.Unmarshal(jsonBytes, &tr.ansiOptions.Styles)\n\t}\n}\n\n// WithStylesFromJSONFile sets a TermRenderer's styles from a JSON file.\nfunc WithStylesFromJSONFile(filename string) TermRendererOption {\n\treturn func(tr *TermRenderer) error {\n\t\tjsonBytes, err := os.ReadFile(filename)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn json.Unmarshal(jsonBytes, &tr.ansiOptions.Styles)\n\t}\n}\n\n// WithWordWrap sets a TermRenderer's word wrap.\nfunc WithWordWrap(wordWrap int) TermRendererOption {\n\treturn func(tr *TermRenderer) error {\n\t\ttr.ansiOptions.WordWrap = wordWrap\n\t\treturn nil\n\t}\n}\n\n// WithPreservedNewlines preserves newlines from being replaced.\nfunc WithPreservedNewLines() TermRendererOption {\n\treturn func(tr *TermRenderer) error {\n\t\ttr.ansiOptions.PreserveNewLines = true\n\t\treturn nil\n\t}\n}\n\n// WithEmoji sets a TermRenderer's emoji rendering.\nfunc WithEmoji() TermRendererOption {\n\treturn func(tr *TermRenderer) error {\n\t\temoji.New().Extend(tr.md)\n\t\treturn nil\n\t}\n}\n\nfunc (tr *TermRenderer) Read(b []byte) (int, error) {\n\treturn tr.renderBuf.Read(b)\n}\n\nfunc (tr *TermRenderer) Write(b []byte) (int, error) {\n\treturn tr.buf.Write(b)\n}\n\n// Close must be called after writing to TermRenderer. You can then retrieve\n// the rendered markdown by calling Read.\nfunc (tr *TermRenderer) Close() error {\n\terr := tr.md.Convert(tr.buf.Bytes(), &tr.renderBuf)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttr.buf.Reset()\n\treturn nil\n}\n\n// Render returns the markdown rendered into a string.\nfunc (tr *TermRenderer) Render(in string) (string, error) {\n\tb, err := tr.RenderBytes([]byte(in))\n\treturn string(b), err\n}\n\n// RenderBytes returns the markdown rendered into a byte slice.\nfunc (tr *TermRenderer) RenderBytes(in []byte) ([]byte, error) {\n\tvar buf bytes.Buffer\n\terr := tr.md.Convert(in, &buf)\n\treturn buf.Bytes(), err\n}\n\nfunc getEnvironmentStyle() string {\n\tglamourStyle := os.Getenv(\"GLAMOUR_STYLE\")\n\tif len(glamourStyle) == 0 {\n\t\tglamourStyle = styles.AutoStyle\n\t}\n\n\treturn glamourStyle\n}\n\nfunc getDefaultStyle(style string) (*ansi.StyleConfig, error) {\n\tif style == styles.AutoStyle {\n\t\tif !term.IsTerminal(int(os.Stdout.Fd())) {\n\t\t\treturn &styles.NoTTYStyleConfig, nil\n\t\t}\n\t\tif termenv.HasDarkBackground() {\n\t\t\treturn &styles.DarkStyleConfig, nil\n\t\t}\n\t\treturn &styles.LightStyleConfig, nil\n\t}\n\n\tstyles, ok := styles.DefaultStyles[style]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"%s: style not found\", style)\n\t}\n\treturn styles, nil\n}\n"
        },
        {
          "name": "glamour_test.go",
          "type": "blob",
          "size": 3.8857421875,
          "content": "package glamour\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n\t\"testing\"\n\n\tstyles \"github.com/charmbracelet/glamour/styles\"\n\t\"github.com/charmbracelet/x/exp/golden\"\n)\n\nconst markdown = \"testdata/readme.markdown.in\"\n\nfunc TestTermRendererWriter(t *testing.T) {\n\tr, err := NewTermRenderer(\n\t\tWithStandardStyle(styles.DarkStyle),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tin, err := os.ReadFile(markdown)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t_, err = r.Write(in)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\terr = r.Close()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tb, err := io.ReadAll(r)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tgolden.RequireEqual(t, b)\n}\n\nfunc TestTermRenderer(t *testing.T) {\n\tr, err := NewTermRenderer(\n\t\tWithStandardStyle(\"dark\"),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tin, err := os.ReadFile(markdown)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tb, err := r.Render(string(in))\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tgolden.RequireEqual(t, []byte(b))\n}\n\nfunc TestWithEmoji(t *testing.T) {\n\tr, err := NewTermRenderer(\n\t\tWithEmoji(),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tb, err := r.Render(\":+1:\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tb = strings.TrimSpace(b)\n\n\t// Thumbs up unicode character\n\ttd := \"\\U0001f44d\"\n\n\tif td != b {\n\t\tt.Errorf(\"Rendered output doesn't match!\\nExpected: `\\n%s`\\nGot: `\\n%s`\\n\", td, b)\n\t}\n}\n\nfunc TestWithPreservedNewLines(t *testing.T) {\n\tr, err := NewTermRenderer(\n\t\tWithPreservedNewLines(),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tin, err := os.ReadFile(\"testdata/preserved_newline.in\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tb, err := r.Render(string(in))\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tgolden.RequireEqual(t, []byte(b))\n}\n\nfunc TestStyles(t *testing.T) {\n\t_, err := NewTermRenderer(\n\t\tWithAutoStyle(),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t_, err = NewTermRenderer(\n\t\tWithStandardStyle(styles.AutoStyle),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t_, err = NewTermRenderer(\n\t\tWithEnvironmentConfig(),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\n// TestCustomStyle checks the expected errors with custom styling. We need to\n// support built-in styles and custom style sheets.\nfunc TestCustomStyle(t *testing.T) {\n\tmd := \"testdata/example.md\"\n\ttests := []struct {\n\t\tname      string\n\t\tstylePath string\n\t\terr       error\n\t\texpected  string\n\t}{\n\t\t{name: \"style exists\", stylePath: \"testdata/custom.style\", err: nil, expected: \"testdata/custom.style\"},\n\t\t{name: \"style doesn't exist\", stylePath: \"testdata/notfound.style\", err: os.ErrNotExist, expected: styles.AutoStyle},\n\t\t{name: \"style is empty\", stylePath: \"\", err: nil, expected: styles.AutoStyle},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tt.Setenv(\"GLAMOUR_STYLE\", tc.stylePath)\n\t\t\tg, err := NewTermRenderer(\n\t\t\t\tWithEnvironmentConfig(),\n\t\t\t)\n\t\t\tif !errors.Is(err, tc.err) {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif !errors.Is(tc.err, os.ErrNotExist) {\n\t\t\t\tw, err := NewTermRenderer(WithStylePath(tc.expected))\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\t\t\t\ttext, _ := os.ReadFile(md)\n\t\t\t\twant, err := w.RenderBytes(text)\n\t\t\t\tgot, err := g.RenderBytes(text)\n\t\t\t\tif !bytes.Equal(want, got) {\n\t\t\t\t\tt.Error(\"Wrong style used\")\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRenderHelpers(t *testing.T) {\n\tin, err := os.ReadFile(markdown)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tb, err := Render(string(in), \"dark\")\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\n\tgolden.RequireEqual(t, []byte(b))\n}\n\nfunc TestCapitalization(t *testing.T) {\n\tp := true\n\tstyle := styles.DarkStyleConfig\n\tstyle.H1.Upper = &p\n\tstyle.H2.Title = &p\n\tstyle.H3.Lower = &p\n\n\tr, err := NewTermRenderer(\n\t\tWithStyles(style),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tb, err := r.Render(\"# everything is uppercase\\n## everything is titled\\n### everything is lowercase\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tgolden.RequireEqual(t, []byte(b))\n}\n\nfunc FuzzData(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, data []byte) {\n\t\tfunc() int {\n\t\t\t_, err := RenderBytes(data, styles.DarkStyle)\n\t\t\tif err != nil {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t\treturn 1\n\t\t}()\n\t})\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.009765625,
          "content": "module github.com/charmbracelet/glamour\n\ngo 1.21\n\nrequire (\n\tgithub.com/alecthomas/chroma/v2 v2.14.0\n\tgithub.com/charmbracelet/lipgloss v1.0.0\n\tgithub.com/charmbracelet/x/ansi v0.6.0\n\tgithub.com/charmbracelet/x/exp/golden v0.0.0-20240806155701-69247e0abc2a\n\tgithub.com/microcosm-cc/bluemonday v1.0.27\n\tgithub.com/muesli/reflow v0.3.0\n\tgithub.com/muesli/termenv v0.15.3-0.20240618155329-98d742f6907a\n\tgithub.com/yuin/goldmark v1.7.8\n\tgithub.com/yuin/goldmark-emoji v1.0.4\n\tgolang.org/x/term v0.28.0\n)\n\nrequire (\n\tgithub.com/aymanbagabas/go-osc52/v2 v2.0.1 // indirect\n\tgithub.com/aymanbagabas/go-udiff v0.2.0 // indirect\n\tgithub.com/aymerick/douceur v0.2.0 // indirect\n\tgithub.com/dlclark/regexp2 v1.11.0 // indirect\n\tgithub.com/gorilla/css v1.0.1 // indirect\n\tgithub.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.15 // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgolang.org/x/net v0.27.0 // indirect\n\tgolang.org/x/sys v0.29.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 4.6201171875,
          "content": "github.com/alecthomas/assert/v2 v2.7.0 h1:QtqSACNS3tF7oasA8CU6A6sXZSBDqnm7RfpLl9bZqbE=\ngithub.com/alecthomas/assert/v2 v2.7.0/go.mod h1:Bze95FyfUr7x34QZrjL+XP+0qgp/zg8yS+TtBj1WA3k=\ngithub.com/alecthomas/chroma/v2 v2.14.0 h1:R3+wzpnUArGcQz7fCETQBzO5n9IMNi13iIs46aU4V9E=\ngithub.com/alecthomas/chroma/v2 v2.14.0/go.mod h1:QolEbTfmUHIMVpBqxeDnNBj2uoeI4EbYP4i6n68SG4I=\ngithub.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=\ngithub.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=\ngithub.com/aymanbagabas/go-osc52/v2 v2.0.1 h1:HwpRHbFMcZLEVr42D4p7XBqjyuxQH5SMiErDT4WkJ2k=\ngithub.com/aymanbagabas/go-osc52/v2 v2.0.1/go.mod h1:uYgXzlJ7ZpABp8OJ+exZzJJhRNQ2ASbcXHWsFqH8hp8=\ngithub.com/aymanbagabas/go-udiff v0.2.0 h1:TK0fH4MteXUDspT88n8CKzvK0X9O2xu9yQjWpi6yML8=\ngithub.com/aymanbagabas/go-udiff v0.2.0/go.mod h1:RE4Ex0qsGkTAJoQdQQCA0uG+nAzJO/pI/QwceO5fgrA=\ngithub.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=\ngithub.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=\ngithub.com/charmbracelet/lipgloss v1.0.0 h1:O7VkGDvqEdGi93X+DeqsQ7PKHDgtQfF8j8/O2qFMQNg=\ngithub.com/charmbracelet/lipgloss v1.0.0/go.mod h1:U5fy9Z+C38obMs+T+tJqst9VGzlOYGj4ri9reL3qUlo=\ngithub.com/charmbracelet/x/ansi v0.6.0 h1:qOznutrb93gx9oMiGf7caF7bqqubh6YIM0SWKyA08pA=\ngithub.com/charmbracelet/x/ansi v0.6.0/go.mod h1:KBUFw1la39nl0dLl10l5ORDAqGXaeurTQmwyyVKse/Q=\ngithub.com/charmbracelet/x/exp/golden v0.0.0-20240806155701-69247e0abc2a h1:G99klV19u0QnhiizODirwVksQB91TJKV/UaTnACcG30=\ngithub.com/charmbracelet/x/exp/golden v0.0.0-20240806155701-69247e0abc2a/go.mod h1:wDlXFlCrmJ8J+swcL/MnGUuYnqgQdW9rhSD61oNMb6U=\ngithub.com/dlclark/regexp2 v1.11.0 h1:G/nrcoOa7ZXlpoa/91N3X7mM3r8eIlMBBJZvsz/mxKI=\ngithub.com/dlclark/regexp2 v1.11.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\ngithub.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=\ngithub.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=\ngithub.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=\ngithub.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.12/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=\ngithub.com/mattn/go-runewidth v0.0.15 h1:UNAjwbU9l54TA3KzvqLGxwWjHmMgBUVhBiTjelZgg3U=\ngithub.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/microcosm-cc/bluemonday v1.0.27 h1:MpEUotklkwCSLeH+Qdx1VJgNqLlpY2KXwXFM08ygZfk=\ngithub.com/microcosm-cc/bluemonday v1.0.27/go.mod h1:jFi9vgW+H7c3V0lb6nR74Ib/DIB5OBs92Dimizgw2cA=\ngithub.com/muesli/reflow v0.3.0 h1:IFsN6K9NfGtjeggFP+68I4chLZV2yIKsXJFNZ+eWh6s=\ngithub.com/muesli/reflow v0.3.0/go.mod h1:pbwTDkVPibjO2kyvBQRBxTWEEGDGq0FlB1BIKtnHY/8=\ngithub.com/muesli/termenv v0.15.3-0.20240618155329-98d742f6907a h1:2MaM6YC3mGu54x+RKAA6JiFFHlHDY1UbkxqppT7wYOg=\ngithub.com/muesli/termenv v0.15.3-0.20240618155329-98d742f6907a/go.mod h1:hxSnBBYLK21Vtq/PHd0S2FYCxBXzBua8ov5s1RobyRQ=\ngithub.com/rivo/uniseg v0.1.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/yuin/goldmark v1.7.1/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=\ngithub.com/yuin/goldmark v1.7.8 h1:iERMLn0/QJeHFhxSt3p6PeN9mGnvIKSpG9YYorDMnic=\ngithub.com/yuin/goldmark v1.7.8/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=\ngithub.com/yuin/goldmark-emoji v1.0.4 h1:vCwMkPZSNefSUnOW2ZKRUjBSD5Ok3W78IXhGxxAEF90=\ngithub.com/yuin/goldmark-emoji v1.0.4/go.mod h1:tTkZEbwu5wkPmgTcitqddVxY9osFZiavD+r4AzQrh1U=\ngolang.org/x/net v0.27.0 h1:5K3Njcw06/l2y9vpGCSdcxWOYHOUk3dVNGDXN+FvAys=\ngolang.org/x/net v0.27.0/go.mod h1:dDi0PyhWNoiUOrAS8uXv/vnScO4wnHQO4mj9fn/RytE=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.28.0 h1:/Ts8HFuMR2E6IP/jlo7QVLZHggjKQbhu/7H0LJFr3Gg=\ngolang.org/x/term v0.28.0/go.mod h1:Sw/lC2IAUZ92udQNf3WodGtn4k/XoLyZoh8v/8uiwek=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "styles",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}