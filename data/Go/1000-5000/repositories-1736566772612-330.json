{
  "metadata": {
    "timestamp": 1736566772612,
    "page": 330,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "willnorris/imageproxy",
      "stars": 3582,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.7099609375,
          "content": "linters:\n  enable:\n    - dogsled\n    - dupl\n    - errorlint\n    - goimports\n    - gosec\n    - misspell\n    - nakedret\n    - stylecheck\n    - unconvert\n    - unparam\n    - whitespace\n\nissues:\n  exclude-rules:\n    # Some cache implementations use md5 hashes for cached filenames. There is\n    # a slight risk of cache poisoning if an attacker could construct a URL\n    # with the same hash, but the URL would also need to be allowed by the\n    # proxy's security settings (host allowlist, URL signature, etc). Changing\n    # these to a more secure hash algorithm would result in 100% cache misses\n    # when users upgrade. For now, just leave these alone.\n    - path: internal/.*cache\n      linters: gosec\n      text: G(401|501)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5400390625,
          "content": "# syntax=docker/dockerfile:1.4\nFROM --platform=$BUILDPLATFORM cgr.dev/chainguard/wolfi-base as build\nLABEL maintainer=\"Will Norris <will@willnorris.com>\"\n\nRUN apk update && apk add build-base git openssh go-1.21\n\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\n\nCOPY . .\n\nARG TARGETOS\nARG TARGETARCH\nRUN CGO_ENABLED=0 GOOS=$TARGETOS GOARCH=$TARGETARCH go build -v ./cmd/imageproxy\n\nFROM cgr.dev/chainguard/static:latest\n\nCOPY --from=build /app/imageproxy /app/imageproxy\n\nCMD [\"-addr\", \"0.0.0.0:8080\"]\nENTRYPOINT [\"/app/imageproxy\"]\n\nEXPOSE 8080\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.9365234375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.2734375,
          "content": "# imageproxy\n\n[![GoDoc](https://img.shields.io/badge/godoc-reference-blue)](https://pkg.go.dev/willnorris.com/go/imageproxy)\n[![Test Status](https://github.com/willnorris/imageproxy/workflows/tests/badge.svg)](https://github.com/willnorris/imageproxy/actions?query=workflow%3Atests)\n[![Test Coverage](https://codecov.io/gh/willnorris/imageproxy/branch/main/graph/badge.svg)](https://codecov.io/gh/willnorris/imageproxy)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/2611/badge)](https://bestpractices.coreinfrastructure.org/projects/2611)\n\nimageproxy is a caching image proxy server written in go. It features:\n\n- basic image adjustments like resizing, cropping, and rotation\n- access control using allowed hosts list or request signing (HMAC-SHA256)\n- support for jpeg, png, webp (decode only), tiff, and gif image formats\n  (including animated gifs)\n- caching in-memory, on disk, or with Amazon S3, Google Cloud Storage, Azure\n  Storage, or Redis\n- easy deployment, since it's pure go\n\nPersonally, I use it primarily to dynamically resize images hosted on my own\nsite (read more in [this post][]). But you can also enable request signing and\nuse it as an SSL proxy for remote images, similar to [atmos/camo][] but with\nadditional image adjustment options.\n\nI aim to keep imageproxy compatible with the two [most recent major go releases][].\nI also keep track of the minimum go version that still works (currently go1.18), but that might change at any time.\nYou can see the go versions that are tested against in [.github/workflows/tests.yml][].\n\n[this post]: https://willnorris.com/2014/01/a-self-hosted-alternative-to-jetpacks-photon-service\n[atmos/camo]: https://github.com/atmos/camo\n[most recent major go releases]: https://golang.org/doc/devel/release.html\n[.github/workflows/tests.yml]: ./.github/workflows/tests.yml\n\n## URL Structure\n\nimageproxy URLs are of the form `http://localhost/{options}/{remote_url}`.\n\n### Options\n\nOptions are available for cropping, resizing, rotation, flipping, and digital\nsignatures among a few others. Options for are specified as a comma delimited\nlist of parameters, which can be supplied in any order. Duplicate parameters\noverwrite previous values.\n\nSee the full list of available options at\n<https://godoc.org/willnorris.com/go/imageproxy#ParseOptions>.\n\n### Remote URL\n\nThe URL of the original image to load is specified as the remainder of the\npath, without any encoding. For example,\n`http://localhost/200/https://willnorris.com/logo.jpg`.\n\nIn order to [optimize caching][], it is recommended that URLs not contain query\nstrings.\n\n[optimize caching]: http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/\n\n### Examples\n\nThe following live examples demonstrate setting different options on [this\nsource image][small-things], which measures 1024 by 678 pixels.\n\n[small-things]: https://willnorris.com/images/imageproxy/small-things.jpg\n\n| Options                | Meaning                                                    | Image                                                                                                                                                                                                                                                                                                |\n| ---------------------- | ---------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 200x                   | 200px wide, proportional height                            | <a href=\"https://willnorris.com/api/imageproxy/200x/https://willnorris.com/images/imageproxy/small-things.jpg\"><img src=\"https://willnorris.com/api/imageproxy/200x/https://willnorris.com/images/imageproxy/small-things.jpg\" alt=\"200x\"></a>                                                       |\n| x0.15                  | 15% original height, proportional width                    | <a href=\"https://willnorris.com/api/imageproxy/x0.15/https://willnorris.com/images/imageproxy/small-things.jpg\"><img src=\"https://willnorris.com/api/imageproxy/x0.15/https://willnorris.com/images/imageproxy/small-things.jpg\" alt=\"x0.15\"></a>                                                    |\n| 100x150                | 100 by 150 pixels, cropping as needed                      | <a href=\"https://willnorris.com/api/imageproxy/100x150/https://willnorris.com/images/imageproxy/small-things.jpg\"><img src=\"https://willnorris.com/api/imageproxy/100x150/https://willnorris.com/images/imageproxy/small-things.jpg\" alt=\"100x150\"></a>                                              |\n| 100                    | 100px square, cropping as needed                           | <a href=\"https://willnorris.com/api/imageproxy/100/https://willnorris.com/images/imageproxy/small-things.jpg\"><img src=\"https://willnorris.com/api/imageproxy/100/https://willnorris.com/images/imageproxy/small-things.jpg\" alt=\"100\"></a>                                                          |\n| 150,fit                | scale to fit 150px square, no cropping                     | <a href=\"https://willnorris.com/api/imageproxy/150,fit/https://willnorris.com/images/imageproxy/small-things.jpg\"><img src=\"https://willnorris.com/api/imageproxy/150,fit/https://willnorris.com/images/imageproxy/small-things.jpg\" alt=\"150,fit\"></a>                                              |\n| 100,r90                | 100px square, rotated 90 degrees                           | <a href=\"https://willnorris.com/api/imageproxy/100,r90/https://willnorris.com/images/imageproxy/small-things.jpg\"><img src=\"https://willnorris.com/api/imageproxy/100,r90/https://willnorris.com/images/imageproxy/small-things.jpg\" alt=\"100,r90\"></a>                                              |\n| 100,fv,fh              | 100px square, flipped horizontal and vertical              | <a href=\"https://willnorris.com/api/imageproxy/100,fv,fh/https://willnorris.com/images/imageproxy/small-things.jpg\"><img src=\"https://willnorris.com/api/imageproxy/100,fv,fh/https://willnorris.com/images/imageproxy/small-things.jpg\" alt=\"100,fv,fh\"></a>                                        |\n| 200x,q60               | 200px wide, proportional height, 60% quality               | <a href=\"https://willnorris.com/api/imageproxy/200x,q60/https://willnorris.com/images/imageproxy/small-things.jpg\"><img src=\"https://willnorris.com/api/imageproxy/200x,q60/https://willnorris.com/images/imageproxy/small-things.jpg\" alt=\"200x,q60\"></a>                                           |\n| 200x,png               | 200px wide, converted to PNG format                        | <a href=\"https://willnorris.com/api/imageproxy/200x,png/https://willnorris.com/images/imageproxy/small-things.jpg\"><img src=\"https://willnorris.com/api/imageproxy/200x,png/https://willnorris.com/images/imageproxy/small-things.jpg\" alt=\"200x,png\"></a>                                           |\n| cx175,cw400,ch300,100x | crop to 400x300px starting at (175,0), scale to 100px wide | <a href=\"https://willnorris.com/api/imageproxy/cx175,cw400,ch300,100x/https://willnorris.com/images/imageproxy/small-things.jpg\"><img src=\"https://willnorris.com/api/imageproxy/cx175,cw400,ch300,100x/https://willnorris.com/images/imageproxy/small-things.jpg\" alt=\"cx175,cw400,ch300,100x\"></a> |\n\nThe [smart crop feature](https://godoc.org/willnorris.com/go/imageproxy#hdr-Smart_Crop)\ncan best be seen by comparing crops of [this source image][judah-sheets], with\nand without smart crop enabled.\n\n| Options    | Meaning                  | Image                                                                                                                                                                                                                                     |\n| ---------- | ------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 150x300    | 150x300px, standard crop | <a href=\"https://willnorris.com/api/imageproxy/150x300/https://judahnorris.com/images/judah-sheets.jpg\"><img src=\"https://willnorris.com/api/imageproxy/150x300/https://judahnorris.com/images/judah-sheets.jpg\" alt=\"200x400,sc\"></a>    |\n| 150x300,sc | 150x300px, smart crop    | <a href=\"https://willnorris.com/api/imageproxy/150x300,sc/https://judahnorris.com/images/judah-sheets.jpg\"><img src=\"https://willnorris.com/api/imageproxy/150x300,sc/https://judahnorris.com/images/judah-sheets.jpg\" alt=\"200x400\"></a> |\n\n[judah-sheets]: https://judahnorris.com/images/judah-sheets.jpg\n\nTransformation also works on animated gifs. Here is [this source\nimage][material-animation] resized to 200px square and rotated 270 degrees:\n\n[material-animation]: https://willnorris.com/images/imageproxy/material-animations.gif\n\n<a href=\"https://willnorris.com/api/imageproxy/200,r270/https://willnorris.com/images/imageproxy/material-animations.gif\"><img src=\"https://willnorris.com/api/imageproxy/200,r270/https://willnorris.com/images/imageproxy/material-animations.gif\" alt=\"200,r270\"></a>\n\n## Getting Started\n\nInstall the package using:\n\n    go install willnorris.com/go/imageproxy/cmd/imageproxy@latest\n\nOnce installed, ensure `$GOPATH/bin` is in your `$PATH`, then run the proxy\nusing:\n\n    imageproxy\n\nThis will start the proxy on port 8080, without any caching and with no allowed\nhost list (meaning any remote URL can be proxied). Test this by navigating to\n<http://localhost:8080/500/https://octodex.github.com/images/codercat.jpg> and\nyou should see a 500px square coder octocat.\n\n### Cache\n\nBy default, the imageproxy command does not cache responses, but caching can be\nenabled using the `-cache` flag. It supports the following values:\n\n- `memory` - uses an in-memory LRU cache. By default, this is limited to\n  100mb. To customize the size of the cache or the max age for cached items,\n  use the format `memory:size:age` where size is measured in mb and age is a\n  duration. For example, `memory:200:4h` will create a 200mb cache that will\n  cache items no longer than 4 hours.\n- directory on local disk (e.g. `/tmp/imageproxy`) - will cache images\n  on disk\n\n- s3 URL (e.g. `s3://region/bucket-name/optional-path-prefix`) - will cache\n  images on Amazon S3. This requires either an IAM role and instance profile\n  with access to your your bucket or `AWS_ACCESS_KEY_ID` and `AWS_SECRET_KEY`\n  environmental variables be set. (Additional methods of loading credentials\n  are documented in the [aws-sdk-go session\n  package](https://docs.aws.amazon.com/sdk-for-go/api/aws/session/)).\n\n  Additional configuration options ([further documented here][aws-options])\n  may be specified as URL query string parameters, which are mostly useful\n  when working with s3-compatible services:\n\n  - \"endpoint\" - specify an alternate API endpoint\n  - \"disableSSL\" - set to \"1\" to disable SSL when calling the API\n  - \"s3ForcePathStyle\" - set to \"1\" to force the request to use path-style addressing\n\n  For example, when working with [minio](https://minio.io), which doesn't use\n  regions, provide a dummy region value and custom endpoint value:\n\n      s3://fake-region/bucket/folder?endpoint=minio:9000&disableSSL=1&s3ForcePathStyle=1\n\n  Similarly, for [Digital Ocean Spaces](https://www.digitalocean.com/products/spaces/),\n  provide a dummy region value and the appropriate endpoint for your space:\n\n      s3://fake-region/bucket/folder?endpoint=sfo2.digitaloceanspaces.com\n\n  [aws-options]: https://docs.aws.amazon.com/sdk-for-go/api/aws/#Config\n\n- gcs URL (e.g. `gcs://bucket-name/optional-path-prefix`) - will cache images\n  on Google Cloud Storage. Authentication is documented in Google's\n  [Application Default Credentials\n  docs](https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application).\n- azure URL (e.g. `azure://container-name/`) - will cache images on\n  Azure Storage. This requires `AZURESTORAGE_ACCOUNT_NAME` and\n  `AZURESTORAGE_ACCESS_KEY` environment variables to bet set.\n- redis URL (e.g. `redis://hostname/`) - will cache images on\n  the specified redis host. The full URL syntax is defined by the [redis URI\n  registration](https://www.iana.org/assignments/uri-schemes/prov/redis).\n  Rather than specify password in the URI, use the `REDIS_PASSWORD`\n  environment variable.\n\nFor example, to cache files on disk in the `/tmp/imageproxy` directory:\n\n    imageproxy -cache /tmp/imageproxy\n\nReload the [codercat URL][], and then inspect the contents of\n`/tmp/imageproxy`. Within the subdirectories, there should be two files, one\nfor the original full-size codercat image, and one for the resized 500px\nversion.\n\n[codercat URL]: http://localhost:8080/500/https://octodex.github.com/images/codercat.jpg\n\nMultiple caches can be specified by separating them by spaces or by repeating\nthe `-cache` flag multiple times. The caches will be created in a [tiered\nfashion][]. Typically this is used to put a smaller and faster in-memory cache\nin front of a larger but slower on-disk cache. For example, the following will\nfirst check an in-memory cache for an image, followed by a gcs bucket:\n\n    imageproxy -cache memory -cache gcs://my-bucket/\n\n[tiered fashion]: https://godoc.org/github.com/die-net/lrucache/twotier\n\n### Allowed Referrer List\n\nYou can limit images to only be accessible for certain hosts in the HTTP\nreferrer header, which can help prevent others from hotlinking to images. It can\nbe enabled by running:\n\n    imageproxy  -referrers example.com\n\nReload the [codercat URL][], and you should now get an error message. You can\nspecify multiple hosts as a comma separated list, or prefix a host value with\n`*.` to allow all sub-domains as well.\n\n### Allowed and Denied Hosts List\n\nYou can limit the remote hosts that the proxy will fetch images from using the\n`allowHosts` and `denyHosts` flags. This is useful, for example, for locking\nthe proxy down to your own hosts to prevent others from abusing it. Of course\nif you want to support fetching from any host, leave off these flags.\n\nTry it out by running:\n\n    imageproxy -allowHosts example.com\n\nReload the [codercat URL][], and you should now get an error message.\nAlternately, try running:\n\n    imageproxy -denyHosts octodex.github.com\n\nReloading the [codercat URL][] will still return an error message.\n\nYou can specify multiple hosts as a comma separated list to either flag, or\nprefix a host value with `*.` to allow or deny all sub-domains. You can\nalso specify a netblock in CIDR notation (`127.0.0.0/8`) -- this is useful for\nblocking reserved ranges like `127.0.0.0/8`, `192.168.0.0/16`, etc.\n\nIf a host matches both an allowed and denied host, the request will be denied.\n\n### Allowed Content-Type List\n\nYou can limit what content types can be proxied by using the `contentTypes`\nflag. By default, this is set to `image/*`, meaning that imageproxy will\nprocess any image types. You can specify multiple content types as a comma\nseparated list, and suffix values with `*` to perform a wildcard match. Set the\nflag to an empty string to proxy all requests, regardless of content type.\n\n### Signed Requests\n\nInstead of an allowed host list, you can require that requests be signed. This\nis useful in preventing abuse when you don't have just a static list of hosts\nyou want to allow. Signatures are generated using HMAC-SHA256 against the\nremote URL, and url-safe base64 encoding the result:\n\n    base64urlencode(hmac.New(sha256, <key>).digest(<remote_url>))\n\nThe HMAC key is specified using the `signatureKey` flag. If this flag\nbegins with an \"@\", the remainder of the value is interpreted as a file on disk\nwhich contains the HMAC key.\n\nTry it out by running:\n\n    imageproxy -signatureKey \"secretkey\"\n\nReload the [codercat URL][], and you should see an error message. Now load a\n[signed codercat URL][] (which contains the [signature option][]) and verify\nthat it loads properly.\n\n[signed codercat URL]: http://localhost:8080/500,sXyMwWKIC5JPCtlYOQ2f4yMBTqpjtUsfI67Sp7huXIYY=/https://octodex.github.com/images/codercat.jpg\n[signature option]: https://godoc.org/willnorris.com/go/imageproxy#hdr-Signature\n\nSome simple code samples for generating signatures in various languages can be\nfound in [docs/url-signing.md](/docs/url-signing.md). Multiple valid signature\nkeys may be provided to support key rotation by repeating the `signatureKey`\nflag multiple times, or by providing a space-separated list of keys. To use a\nkey with a literal space character, load the key from a file using the \"@\"\nprefix documented above.\n\nIf both a whiltelist and signatureKey are specified, requests can match either.\nIn other words, requests that match one of the allowed hosts don't necessarily\nneed to be signed, though they can be.\n\n### Default Base URL\n\nTypically, remote images to be proxied are specified as absolute URLs.\nHowever, if you commonly proxy images from a single source, you can provide a\nbase URL and then specify remote images relative to that base. Try it out by\nrunning:\n\n    imageproxy -baseURL https://octodex.github.com/\n\nThen load the codercat image, specified as a URL relative to that base:\n<http://localhost:8080/500/images/codercat.jpg>. Note that this is not an\neffective method to mask the true source of the images being proxied; it is\ntrivial to discover the base URL being used. Even when a base URL is\nspecified, you can always provide the absolute URL of the image to be proxied.\n\n### Scaling beyond original size\n\nBy default, the imageproxy won't scale images beyond their original size.\nHowever, you can use the `scaleUp` command-line flag to allow this to happen:\n\n    imageproxy -scaleUp true\n\n### WebP and TIFF support\n\nImageproxy can proxy remote webp images, but they will be served in either jpeg\nor png format (this is because the golang webp library only supports webp\ndecoding) if any transformation is requested. If no format is specified,\nimageproxy will use jpeg by default. If no transformation is requested (for\nexample, if you are just using imageproxy as an SSL proxy) then the original\nwebp image will be served as-is without any format conversion.\n\nBecause so few browsers support tiff images, they will be converted to jpeg by\ndefault if any transformation is requested. To force encoding as tiff, pass the\n\"tiff\" option. Like webp, tiff images will be served as-is without any format\nconversion if no transformation is requested.\n\nRun `imageproxy -help` for a complete list of flags the command accepts. If\nyou want to use a different caching implementation, it's probably easiest to\njust make a copy of `cmd/imageproxy/main.go` and customize it to fit your\nneeds... it's a very simple command.\n\n### Environment Variables\n\nAll configuration flags have equivalent environment variables of the form\n`IMAGEPROXY_$NAME`. For example, an on-disk cache could be configured by calling\n\n    IMAGEPROXY_CACHE=\"/tmp/imageproxy\" imageproxy\n\n## Deploying\n\nIn most cases, you can follow the normal procedure for building a deploying any\ngo application. For example:\n\n- `go build willnorris.com/go/imageproxy/cmd/imageproxy`\n- copy resulting binary to `/usr/local/bin`\n- copy [`etc/imageproxy.service`](etc/imageproxy.service) to\n  `/lib/systemd/system` and enable using `systemctl`.\n\nInstructions have been contributed below for running on other platforms, but I\ndon't have much experience with them personally.\n\n### Heroku\n\nIt's easy to vendorize the dependencies with `Godep` and deploy to Heroku. Take\na look at [this GitHub repo](https://github.com/oreillymedia/prototype-imageproxy/tree/heroku)\n(make sure you use the `heroku` branch).\n\n### AWS Elastic Beanstalk\n\n[O’Reilly Media](https://github.com/oreillymedia) set up [a repository](https://github.com/oreillymedia/prototype-imageproxy)\nwith everything you need to deploy imageproxy to Elastic Beanstalk. Just follow the instructions\nin the [README](https://github.com/oreillymedia/prototype-imageproxy/blob/master/Readme.md).\n\n### Docker\n\nA docker image is available at [`ghcr.io/willnorris/imageproxy`](https://github.com/willnorris/imageproxy/pkgs/container/imageproxy).\n\nYou can run it by\n\n```\ndocker run -p 8080:8080 ghcr.io/willnorris/imageproxy -addr 0.0.0.0:8080\n```\n\nOr in your Dockerfile:\n\n```\nENTRYPOINT [\"/app/imageproxy\", \"-addr 0.0.0.0:8080\"]\n```\n\nIf running imageproxy inside docker with a bind-mounted on-disk cache, make sure\nthe container is running as a user that has write permission to the mounted host\ndirectory. See more details in\n[#198](https://github.com/willnorris/imageproxy/issues/198).\n\nNote that all configuration options can be set using [environment\nvariables](#environment-variables), which is often the preferred approach for\ncontainers.\n\n### nginx\n\nUse the `proxy_pass` directive to send requests to your imageproxy instance.\nFor example, to run imageproxy at the path \"/api/imageproxy/\", set:\n\n```\n  location /api/imageproxy/ {\n    proxy_pass http://localhost:4593/;\n  }\n```\n\nDepending on other directives you may have in your nginx config, you might need\nto alter the precedence order by setting:\n\n```\n  location ^~ /api/imageproxy/ {\n    proxy_pass http://localhost:4593/;\n  }\n```\n\n## Clients\n\n- [Ruby](https://github.com/azolf/imageproxy_ruby)\n\n## License\n\nimageproxy is copyright its respective authors. All of my personal work on\nimageproxy through 2020 (which accounts for the majority of the code) is\ncopyright Google, my employer at the time. It is available under the [Apache\n2.0 License](./LICENSE).\n"
        },
        {
          "name": "cache.go",
          "type": "blob",
          "size": 0.78125,
          "content": "// Copyright 2013 The imageproxy authors.\n// SPDX-License-Identifier: Apache-2.0\n\npackage imageproxy\n\n// The Cache interface defines a cache for storing arbitrary data.  The\n// interface is designed to align with httpcache.Cache.\ntype Cache interface {\n\t// Get retrieves the cached data for the provided key.\n\tGet(key string) (data []byte, ok bool)\n\n\t// Set caches the provided data.\n\tSet(key string, data []byte)\n\n\t// Delete deletes the cached data at the specified key.\n\tDelete(key string)\n}\n\n// NopCache provides a no-op cache implementation that doesn't actually cache anything.\nvar NopCache = new(nopCache)\n\ntype nopCache struct{}\n\nfunc (c nopCache) Get(string) ([]byte, bool) { return nil, false }\nfunc (c nopCache) Set(string, []byte)        {}\nfunc (c nopCache) Delete(string)             {}\n"
        },
        {
          "name": "cache_test.go",
          "type": "blob",
          "size": 0.458984375,
          "content": "// Copyright 2013 The imageproxy authors.\n// SPDX-License-Identifier: Apache-2.0\n\npackage imageproxy\n\nimport \"testing\"\n\nfunc TestNopCache(t *testing.T) {\n\tdata, ok := NopCache.Get(\"foo\")\n\tif data != nil {\n\t\tt.Errorf(\"NopCache.Get returned non-nil data\")\n\t}\n\tif ok != false {\n\t\tt.Errorf(\"NopCache.Get returned ok = true, should always be false.\")\n\t}\n\n\t// nothing to test on these methods other than to verify they exist\n\tNopCache.Set(\"\", []byte{})\n\tNopCache.Delete(\"\")\n}\n"
        },
        {
          "name": "caddy",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "data.go",
          "type": "blob",
          "size": 12.3056640625,
          "content": "// Copyright 2013 The imageproxy authors.\n// SPDX-License-Identifier: Apache-2.0\n\npackage imageproxy\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"regexp\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nconst (\n\toptFit             = \"fit\"\n\toptFlipVertical    = \"fv\"\n\toptFlipHorizontal  = \"fh\"\n\toptFormatJPEG      = \"jpeg\"\n\toptFormatPNG       = \"png\"\n\toptFormatTIFF      = \"tiff\"\n\toptRotatePrefix    = \"r\"\n\toptQualityPrefix   = \"q\"\n\toptSignaturePrefix = \"s\"\n\toptSizeDelimiter   = \"x\"\n\toptScaleUp         = \"scaleUp\"\n\toptCropX           = \"cx\"\n\toptCropY           = \"cy\"\n\toptCropWidth       = \"cw\"\n\toptCropHeight      = \"ch\"\n\toptSmartCrop       = \"sc\"\n)\n\n// URLError reports a malformed URL error.\ntype URLError struct {\n\tMessage string\n\tURL     *url.URL\n}\n\nfunc (e URLError) Error() string {\n\treturn fmt.Sprintf(\"malformed URL %q: %s\", e.URL, e.Message)\n}\n\n// Options specifies transformations to be performed on the requested image.\ntype Options struct {\n\t// See ParseOptions for interpretation of Width and Height values\n\tWidth  float64\n\tHeight float64\n\n\t// If true, resize the image to fit in the specified dimensions.  Image\n\t// will not be cropped, and aspect ratio will be maintained.\n\tFit bool\n\n\t// Rotate image the specified degrees counter-clockwise.  Valid values\n\t// are 90, 180, 270.\n\tRotate int\n\n\tFlipVertical   bool\n\tFlipHorizontal bool\n\n\t// Quality of output image\n\tQuality int\n\n\t// HMAC Signature for signed requests.\n\tSignature string\n\n\t// Allow image to scale beyond its original dimensions.  This value\n\t// will always be overwritten by the value of Proxy.ScaleUp.\n\tScaleUp bool\n\n\t// Desired image format. Valid values are \"jpeg\", \"png\", \"tiff\".\n\tFormat string\n\n\t// Crop rectangle params\n\tCropX      float64\n\tCropY      float64\n\tCropWidth  float64\n\tCropHeight float64\n\n\t// Automatically find good crop points based on image content.\n\tSmartCrop bool\n}\n\nfunc (o Options) String() string {\n\topts := []string{fmt.Sprintf(\"%v%s%v\", o.Width, optSizeDelimiter, o.Height)}\n\tif o.Fit {\n\t\topts = append(opts, optFit)\n\t}\n\tif o.Rotate != 0 {\n\t\topts = append(opts, fmt.Sprintf(\"%s%d\", optRotatePrefix, o.Rotate))\n\t}\n\tif o.FlipVertical {\n\t\topts = append(opts, optFlipVertical)\n\t}\n\tif o.FlipHorizontal {\n\t\topts = append(opts, optFlipHorizontal)\n\t}\n\tif o.Quality != 0 {\n\t\topts = append(opts, fmt.Sprintf(\"%s%d\", optQualityPrefix, o.Quality))\n\t}\n\tif o.Signature != \"\" {\n\t\topts = append(opts, fmt.Sprintf(\"%s%s\", optSignaturePrefix, o.Signature))\n\t}\n\tif o.ScaleUp {\n\t\topts = append(opts, optScaleUp)\n\t}\n\tif o.Format != \"\" {\n\t\topts = append(opts, o.Format)\n\t}\n\tif o.CropX != 0 {\n\t\topts = append(opts, fmt.Sprintf(\"%s%v\", optCropX, o.CropX))\n\t}\n\tif o.CropY != 0 {\n\t\topts = append(opts, fmt.Sprintf(\"%s%v\", optCropY, o.CropY))\n\t}\n\tif o.CropWidth != 0 {\n\t\topts = append(opts, fmt.Sprintf(\"%s%v\", optCropWidth, o.CropWidth))\n\t}\n\tif o.CropHeight != 0 {\n\t\topts = append(opts, fmt.Sprintf(\"%s%v\", optCropHeight, o.CropHeight))\n\t}\n\tif o.SmartCrop {\n\t\topts = append(opts, optSmartCrop)\n\t}\n\tsort.Strings(opts)\n\treturn strings.Join(opts, \",\")\n}\n\n// transform returns whether o includes transformation options.  Some fields\n// are not transform related at all (like Signature), and others only apply in\n// the presence of other fields (like Fit).  A non-empty Format value is\n// assumed to involve a transformation.\nfunc (o Options) transform() bool {\n\treturn o.Width != 0 || o.Height != 0 || o.Rotate != 0 || o.FlipHorizontal || o.FlipVertical || o.Quality != 0 || o.Format != \"\" || o.CropX != 0 || o.CropY != 0 || o.CropWidth != 0 || o.CropHeight != 0\n}\n\n// ParseOptions parses str as a list of comma separated transformation options.\n// The options can be specified in in order, with duplicate options overwriting\n// previous values.\n//\n// # Rectangle Crop\n//\n// There are four options controlling rectangle crop:\n//\n//\tcx{x}      - X coordinate of top left rectangle corner (default: 0)\n//\tcy{y}      - Y coordinate of top left rectangle corner (default: 0)\n//\tcw{width}  - rectangle width (default: image width)\n//\tch{height} - rectangle height (default: image height)\n//\n// For all options, integer values are interpreted as exact pixel values and\n// floats between 0 and 1 are interpreted as percentages of the original image\n// size. Negative values for cx and cy are measured from the right and bottom\n// edges of the image, respectively.\n//\n// If the crop width or height exceed the width or height of the image, the\n// crop width or height will be adjusted, preserving the specified cx and cy\n// values.  Rectangular crop is applied before any other transformations.\n//\n// # Smart Crop\n//\n// The \"sc\" option will perform a content-aware smart crop to fit the\n// requested image width and height dimensions (see Size and Cropping below).\n// The smart crop option will override any requested rectangular crop.\n//\n// # Size and Cropping\n//\n// The size option takes the general form \"{width}x{height}\", where width and\n// height are numbers. Integer values greater than 1 are interpreted as exact\n// pixel values. Floats between 0 and 1 are interpreted as percentages of the\n// original image size. If either value is omitted or set to 0, it will be\n// automatically set to preserve the aspect ratio based on the other dimension.\n// If a single number is provided (with no \"x\" separator), it will be used for\n// both height and width.\n//\n// Depending on the size options specified, an image may be cropped to fit the\n// requested size. In all cases, the original aspect ratio of the image will be\n// preserved; imageproxy will never stretch the original image.\n//\n// When no explicit crop mode is specified, the following rules are followed:\n//\n// - If both width and height values are specified, the image will be scaled to\n// fill the space, cropping if necessary to fit the exact dimension.\n//\n// - If only one of the width or height values is specified, the image will be\n// resized to fit the specified dimension, scaling the other dimension as\n// needed to maintain the aspect ratio.\n//\n// If the \"fit\" option is specified together with a width and height value, the\n// image will be resized to fit within a containing box of the specified size.\n// As always, the original aspect ratio will be preserved. Specifying the \"fit\"\n// option with only one of either width or height does the same thing as if\n// \"fit\" had not been specified.\n//\n// # Rotation and Flips\n//\n// The \"r{degrees}\" option will rotate the image the specified number of\n// degrees, counter-clockwise. Valid degrees values are 90, 180, and 270.\n//\n// The \"fv\" option will flip the image vertically. The \"fh\" option will flip\n// the image horizontally. Images are flipped after being rotated.\n//\n// # Quality\n//\n// The \"q{qualityPercentage}\" option can be used to specify the quality of the\n// output file (JPEG only). If not specified, the default value of \"95\" is used.\n//\n// # Format\n//\n// The \"jpeg\", \"png\", and \"tiff\"  options can be used to specify the desired\n// image format of the proxied image.\n//\n// # Signature\n//\n// The \"s{signature}\" option specifies an optional base64 encoded HMAC used to\n// sign the remote URL in the request.  The HMAC key used to verify signatures is\n// provided to the imageproxy server on startup.\n//\n// See https://github.com/willnorris/imageproxy/blob/master/docs/url-signing.md\n// for examples of generating signatures.\n//\n// Examples\n//\n//\t0x0         - no resizing\n//\t200x        - 200 pixels wide, proportional height\n//\tx0.15       - 15% original height, proportional width\n//\t100x150     - 100 by 150 pixels, cropping as needed\n//\t100         - 100 pixels square, cropping as needed\n//\t150,fit     - scale to fit 150 pixels square, no cropping\n//\t100,r90     - 100 pixels square, rotated 90 degrees\n//\t100,fv,fh   - 100 pixels square, flipped horizontal and vertical\n//\t200x,q60    - 200 pixels wide, proportional height, 60% quality\n//\t200x,png    - 200 pixels wide, converted to PNG format\n//\tcw100,ch100 - crop image to 100px square, starting at (0,0)\n//\tcx10,cy20,cw100,ch200 - crop image starting at (10,20) is 100px wide and 200px tall\nfunc ParseOptions(str string) Options {\n\tvar options Options\n\n\tfor _, opt := range strings.Split(str, \",\") {\n\t\tswitch {\n\t\tcase len(opt) == 0: // do nothing\n\t\tcase opt == optFit:\n\t\t\toptions.Fit = true\n\t\tcase opt == optFlipVertical:\n\t\t\toptions.FlipVertical = true\n\t\tcase opt == optFlipHorizontal:\n\t\t\toptions.FlipHorizontal = true\n\t\tcase opt == optScaleUp: // this option is intentionally not documented above\n\t\t\toptions.ScaleUp = true\n\t\tcase opt == optFormatJPEG, opt == optFormatPNG, opt == optFormatTIFF:\n\t\t\toptions.Format = opt\n\t\tcase opt == optSmartCrop:\n\t\t\toptions.SmartCrop = true\n\t\tcase strings.HasPrefix(opt, optRotatePrefix):\n\t\t\tvalue := strings.TrimPrefix(opt, optRotatePrefix)\n\t\t\toptions.Rotate, _ = strconv.Atoi(value)\n\t\tcase strings.HasPrefix(opt, optQualityPrefix):\n\t\t\tvalue := strings.TrimPrefix(opt, optQualityPrefix)\n\t\t\toptions.Quality, _ = strconv.Atoi(value)\n\t\tcase strings.HasPrefix(opt, optSignaturePrefix):\n\t\t\toptions.Signature = strings.TrimPrefix(opt, optSignaturePrefix)\n\t\tcase strings.HasPrefix(opt, optCropX):\n\t\t\tvalue := strings.TrimPrefix(opt, optCropX)\n\t\t\toptions.CropX, _ = strconv.ParseFloat(value, 64)\n\t\tcase strings.HasPrefix(opt, optCropY):\n\t\t\tvalue := strings.TrimPrefix(opt, optCropY)\n\t\t\toptions.CropY, _ = strconv.ParseFloat(value, 64)\n\t\tcase strings.HasPrefix(opt, optCropWidth):\n\t\t\tvalue := strings.TrimPrefix(opt, optCropWidth)\n\t\t\toptions.CropWidth, _ = strconv.ParseFloat(value, 64)\n\t\tcase strings.HasPrefix(opt, optCropHeight):\n\t\t\tvalue := strings.TrimPrefix(opt, optCropHeight)\n\t\t\toptions.CropHeight, _ = strconv.ParseFloat(value, 64)\n\t\tcase strings.Contains(opt, optSizeDelimiter):\n\t\t\tsize := strings.SplitN(opt, optSizeDelimiter, 2)\n\t\t\tif w := size[0]; w != \"\" {\n\t\t\t\toptions.Width, _ = strconv.ParseFloat(w, 64)\n\t\t\t}\n\t\t\tif h := size[1]; h != \"\" {\n\t\t\t\toptions.Height, _ = strconv.ParseFloat(h, 64)\n\t\t\t}\n\t\tdefault:\n\t\t\tif size, err := strconv.ParseFloat(opt, 64); err == nil {\n\t\t\t\toptions.Width = size\n\t\t\t\toptions.Height = size\n\t\t\t}\n\t\t}\n\t}\n\n\treturn options\n}\n\n// Request is an imageproxy request which includes a remote URL of an image to\n// proxy, and an optional set of transformations to perform.\ntype Request struct {\n\tURL      *url.URL      // URL of the image to proxy\n\tOptions  Options       // Image transformation to perform\n\tOriginal *http.Request // The original HTTP request\n}\n\n// String returns the request URL as a string, with r.Options encoded in the\n// URL fragment.\nfunc (r Request) String() string {\n\tu := *r.URL\n\tu.Fragment = r.Options.String()\n\treturn u.String()\n}\n\n// NewRequest parses an http.Request into an imageproxy Request.  Options and\n// the remote image URL are specified in the request path, formatted as:\n// /{options}/{remote_url}.  Options may be omitted, so a request path may\n// simply contain /{remote_url}.  The remote URL must be an absolute \"http\" or\n// \"https\" URL, should not be URL encoded, and may contain a query string.\n//\n// Assuming an imageproxy server running on localhost, the following are all\n// valid imageproxy requests:\n//\n//\thttp://localhost/100x200/http://example.com/image.jpg\n//\thttp://localhost/100x200,r90/http://example.com/image.jpg?foo=bar\n//\thttp://localhost//http://example.com/image.jpg\n//\thttp://localhost/http://example.com/image.jpg\nfunc NewRequest(r *http.Request, baseURL *url.URL) (*Request, error) {\n\tvar err error\n\treq := &Request{Original: r}\n\n\tpath := r.URL.EscapedPath()[1:] // strip leading slash\n\treq.URL, err = parseURL(path)\n\tif err != nil || !req.URL.IsAbs() {\n\t\t// first segment should be options\n\t\tparts := strings.SplitN(path, \"/\", 2)\n\t\tif len(parts) != 2 {\n\t\t\treturn nil, URLError{\"too few path segments\", r.URL}\n\t\t}\n\n\t\tvar err error\n\t\treq.URL, err = parseURL(parts[1])\n\t\tif err != nil {\n\t\t\treturn nil, URLError{fmt.Sprintf(\"unable to parse remote URL: %v\", err), r.URL}\n\t\t}\n\n\t\treq.Options = ParseOptions(parts[0])\n\t}\n\n\tif baseURL != nil {\n\t\treq.URL = baseURL.ResolveReference(req.URL)\n\t}\n\n\tif !req.URL.IsAbs() {\n\t\treturn nil, URLError{\"must provide absolute remote URL\", r.URL}\n\t}\n\n\tif req.URL.Scheme != \"http\" && req.URL.Scheme != \"https\" {\n\t\treturn nil, URLError{\"remote URL must have http or https scheme\", r.URL}\n\t}\n\n\t// query string is always part of the remote URL\n\treq.URL.RawQuery = r.URL.RawQuery\n\treturn req, nil\n}\n\nvar reCleanedURL = regexp.MustCompile(`^(https?):/+([^/])`)\n\n// parseURL parses s as a URL, handling URLs that have been munged by\n// path.Clean or a webserver that collapses multiple slashes.\nfunc parseURL(s string) (*url.URL, error) {\n\ts = reCleanedURL.ReplaceAllString(s, \"$1://$2\")\n\treturn url.Parse(s)\n}\n"
        },
        {
          "name": "data_test.go",
          "type": "blob",
          "size": 6.021484375,
          "content": "// Copyright 2013 The imageproxy authors.\n// SPDX-License-Identifier: Apache-2.0\n\npackage imageproxy\n\nimport (\n\t\"net/http\"\n\t\"net/url\"\n\t\"testing\"\n)\n\nvar emptyOptions = Options{}\n\nfunc TestOptions_String(t *testing.T) {\n\ttests := []struct {\n\t\tOptions Options\n\t\tString  string\n\t}{\n\t\t{\n\t\t\temptyOptions,\n\t\t\t\"0x0\",\n\t\t},\n\t\t{\n\t\t\tOptions{Width: 1, Height: 2, Fit: true, Rotate: 90, FlipVertical: true, FlipHorizontal: true, Quality: 80},\n\t\t\t\"1x2,fh,fit,fv,q80,r90\",\n\t\t},\n\t\t{\n\t\t\tOptions{Width: 0.15, Height: 1.3, Rotate: 45, Quality: 95, Signature: \"c0ffee\", Format: \"png\"},\n\t\t\t\"0.15x1.3,png,q95,r45,sc0ffee\",\n\t\t},\n\t\t{\n\t\t\tOptions{Width: 0.15, Height: 1.3, CropX: 100, CropY: 200},\n\t\t\t\"0.15x1.3,cx100,cy200\",\n\t\t},\n\t\t{\n\t\t\tOptions{ScaleUp: true, CropX: 100, CropY: 200, CropWidth: 300, CropHeight: 400, SmartCrop: true},\n\t\t\t\"0x0,ch400,cw300,cx100,cy200,sc,scaleUp\",\n\t\t},\n\t}\n\n\tfor i, tt := range tests {\n\t\tif got, want := tt.Options.String(), tt.String; got != want {\n\t\t\tt.Errorf(\"%d. Options.String returned %v, want %v\", i, got, want)\n\t\t}\n\t}\n}\n\nfunc TestParseOptions(t *testing.T) {\n\ttests := []struct {\n\t\tInput   string\n\t\tOptions Options\n\t}{\n\t\t{\"\", emptyOptions},\n\t\t{\"x\", emptyOptions},\n\t\t{\"r\", emptyOptions},\n\t\t{\"0\", emptyOptions},\n\t\t{\",,,,\", emptyOptions},\n\n\t\t// size variations\n\t\t{\"1x\", Options{Width: 1}},\n\t\t{\"x1\", Options{Height: 1}},\n\t\t{\"1x2\", Options{Width: 1, Height: 2}},\n\t\t{\"-1x-2\", Options{Width: -1, Height: -2}},\n\t\t{\"0.1x0.2\", Options{Width: 0.1, Height: 0.2}},\n\t\t{\"1\", Options{Width: 1, Height: 1}},\n\t\t{\"0.1\", Options{Width: 0.1, Height: 0.1}},\n\n\t\t// additional flags\n\t\t{\"fit\", Options{Fit: true}},\n\t\t{\"r90\", Options{Rotate: 90}},\n\t\t{\"fv\", Options{FlipVertical: true}},\n\t\t{\"fh\", Options{FlipHorizontal: true}},\n\t\t{\"jpeg\", Options{Format: \"jpeg\"}},\n\n\t\t// duplicate flags (last one wins)\n\t\t{\"1x2,3x4\", Options{Width: 3, Height: 4}},\n\t\t{\"1x2,3\", Options{Width: 3, Height: 3}},\n\t\t{\"1x2,0x3\", Options{Width: 0, Height: 3}},\n\t\t{\"1x,x2\", Options{Width: 1, Height: 2}},\n\t\t{\"r90,r270\", Options{Rotate: 270}},\n\t\t{\"jpeg,png\", Options{Format: \"png\"}},\n\n\t\t// mix of valid and invalid flags\n\t\t{\"FOO,1,BAR,r90,BAZ\", Options{Width: 1, Height: 1, Rotate: 90}},\n\n\t\t// flags, in different orders\n\t\t{\"q70,1x2,fit,r90,fv,fh,sc0ffee,png\", Options{Width: 1, Height: 2, Fit: true, Rotate: 90, FlipVertical: true, FlipHorizontal: true, Quality: 70, Signature: \"c0ffee\", Format: \"png\"}},\n\t\t{\"r90,fh,sc0ffee,png,q90,1x2,fv,fit\", Options{Width: 1, Height: 2, Fit: true, Rotate: 90, FlipVertical: true, FlipHorizontal: true, Quality: 90, Signature: \"c0ffee\", Format: \"png\"}},\n\t\t{\"cx100,cw300,1x2,cy200,ch400,sc,scaleUp\", Options{Width: 1, Height: 2, ScaleUp: true, CropX: 100, CropY: 200, CropWidth: 300, CropHeight: 400, SmartCrop: true}},\n\t}\n\n\tfor _, tt := range tests {\n\t\tif got, want := ParseOptions(tt.Input), tt.Options; got != want {\n\t\t\tt.Errorf(\"ParseOptions(%q) returned %#v, want %#v\", tt.Input, got, want)\n\t\t}\n\t}\n}\n\n// Test that request URLs are properly parsed into Options and RemoteURL.  This\n// test verifies that invalid remote URLs throw errors, and that valid\n// combinations of Options and URL are accept.  This does not exhaustively test\n// the various Options that can be specified; see TestParseOptions for that.\nfunc TestNewRequest(t *testing.T) {\n\ttests := []struct {\n\t\tURL         string  // input URL to parse as an imageproxy request\n\t\tRemoteURL   string  // expected URL of remote image parsed from input\n\t\tOptions     Options // expected options parsed from input\n\t\tExpectError bool    // whether an error is expected from NewRequest\n\t}{\n\t\t// invalid URLs\n\t\t{\"http://localhost/\", \"\", emptyOptions, true},\n\t\t{\"http://localhost/1/\", \"\", emptyOptions, true},\n\t\t{\"http://localhost//example.com/foo\", \"\", emptyOptions, true},\n\t\t{\"http://localhost//ftp://example.com/foo\", \"\", emptyOptions, true},\n\n\t\t// invalid options.  These won't return errors, but will not fully parse the options\n\t\t{\n\t\t\t\"http://localhost/s/http://example.com/\",\n\t\t\t\"http://example.com/\", emptyOptions, false,\n\t\t},\n\t\t{\n\t\t\t\"http://localhost/1xs/http://example.com/\",\n\t\t\t\"http://example.com/\", Options{Width: 1}, false,\n\t\t},\n\n\t\t// valid URLs\n\t\t{\n\t\t\t\"http://localhost/http://example.com/foo\",\n\t\t\t\"http://example.com/foo\", emptyOptions, false,\n\t\t},\n\t\t{\n\t\t\t\"http://localhost//http://example.com/foo\",\n\t\t\t\"http://example.com/foo\", emptyOptions, false,\n\t\t},\n\t\t{\n\t\t\t\"http://localhost//https://example.com/foo\",\n\t\t\t\"https://example.com/foo\", emptyOptions, false,\n\t\t},\n\t\t{\n\t\t\t\"http://localhost/1x2/http://example.com/foo\",\n\t\t\t\"http://example.com/foo\", Options{Width: 1, Height: 2}, false,\n\t\t},\n\t\t{\n\t\t\t\"http://localhost//http://example.com/foo?bar\",\n\t\t\t\"http://example.com/foo?bar\", emptyOptions, false,\n\t\t},\n\t\t{\n\t\t\t\"http://localhost/http:/example.com/foo\",\n\t\t\t\"http://example.com/foo\", emptyOptions, false,\n\t\t},\n\t\t{\n\t\t\t\"http://localhost/http:///example.com/foo\",\n\t\t\t\"http://example.com/foo\", emptyOptions, false,\n\t\t},\n\t\t{ // escaped path\n\t\t\t\"http://localhost/http://example.com/%2C\",\n\t\t\t\"http://example.com/%2C\", emptyOptions, false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\treq, err := http.NewRequest(\"GET\", tt.URL, nil)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"http.NewRequest(%q) returned error: %v\", tt.URL, err)\n\t\t\tcontinue\n\t\t}\n\n\t\tr, err := NewRequest(req, nil)\n\t\tif tt.ExpectError {\n\t\t\tif err == nil {\n\t\t\t\tt.Errorf(\"NewRequest(%v) did not return expected error\", req)\n\t\t\t}\n\t\t\tcontinue\n\t\t} else if err != nil {\n\t\t\tt.Errorf(\"NewRequest(%v) return unexpected error: %v\", req, err)\n\t\t\tcontinue\n\t\t}\n\n\t\tif got, want := r.URL.String(), tt.RemoteURL; got != want {\n\t\t\tt.Errorf(\"NewRequest(%q) request URL = %v, want %v\", tt.URL, got, want)\n\t\t}\n\t\tif got, want := r.Options, tt.Options; got != want {\n\t\t\tt.Errorf(\"NewRequest(%q) request options = %v, want %v\", tt.URL, got, want)\n\t\t}\n\t}\n}\n\nfunc TestNewRequest_BaseURL(t *testing.T) {\n\treq, _ := http.NewRequest(\"GET\", \"/x/path\", nil)\n\tbase, _ := url.Parse(\"https://example.com/\")\n\n\tr, err := NewRequest(req, base)\n\tif err != nil {\n\t\tt.Errorf(\"NewRequest(%v, %v) returned unexpected error: %v\", req, base, err)\n\t}\n\n\twant := \"https://example.com/path#0x0\"\n\tif got := r.String(); got != want {\n\t\tt.Errorf(\"NewRequest(%v, %v) returned %q, want %q\", req, base, got, want)\n\t}\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 3.5029296875,
          "content": "module willnorris.com/go/imageproxy\n\ngo 1.21\n\nrequire (\n\tcloud.google.com/go/storage v1.40.0\n\tgithub.com/PaulARoy/azurestoragecache v0.0.0-20170906084534-3c249a3ba788\n\tgithub.com/aws/aws-sdk-go v1.52.5\n\tgithub.com/die-net/lrucache v0.0.0-20220628165024-20a71bc65bf1\n\tgithub.com/disintegration/imaging v1.6.2\n\tgithub.com/fcjr/aia-transport-go v1.2.2\n\tgithub.com/gomodule/redigo v1.9.2\n\tgithub.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79\n\tgithub.com/muesli/smartcrop v0.3.0\n\tgithub.com/peterbourgon/diskv v0.0.0-20171120014656-2973218375c3\n\tgithub.com/prometheus/client_golang v1.19.0\n\tgithub.com/rwcarlsen/goexif v0.0.0-20190401172101-9e8deecbddbd\n\tgolang.org/x/image v0.16.0\n\twillnorris.com/go/gifresize v1.0.0\n)\n\nrequire (\n\tcloud.google.com/go v0.113.0 // indirect\n\tcloud.google.com/go/auth v0.4.0 // indirect\n\tcloud.google.com/go/auth/oauth2adapt v0.2.2 // indirect\n\tcloud.google.com/go/compute/metadata v0.3.0 // indirect\n\tcloud.google.com/go/iam v1.1.8 // indirect\n\tgithub.com/Azure/azure-sdk-for-go v68.0.0+incompatible // indirect\n\tgithub.com/Azure/go-autorest v14.2.0+incompatible // indirect\n\tgithub.com/Azure/go-autorest/autorest v0.11.29 // indirect\n\tgithub.com/Azure/go-autorest/autorest/adal v0.9.23 // indirect\n\tgithub.com/Azure/go-autorest/autorest/date v0.3.0 // indirect\n\tgithub.com/Azure/go-autorest/autorest/to v0.4.0 // indirect\n\tgithub.com/Azure/go-autorest/logger v0.2.1 // indirect\n\tgithub.com/Azure/go-autorest/tracing v0.6.0 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/dnaeon/go-vcr v1.2.0 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/go-logr/logr v1.4.1 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/gofrs/uuid v4.4.0+incompatible // indirect\n\tgithub.com/golang-jwt/jwt/v4 v4.5.0 // indirect\n\tgithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect\n\tgithub.com/golang/protobuf v1.5.4 // indirect\n\tgithub.com/google/btree v1.1.2 // indirect\n\tgithub.com/google/s2a-go v0.1.7 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/googleapis/enterprise-certificate-proxy v0.3.2 // indirect\n\tgithub.com/googleapis/gax-go/v2 v2.12.4 // indirect\n\tgithub.com/jmespath/go-jmespath v0.4.0 // indirect\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/nfnt/resize v0.0.0-20180221191011-83c6a9932646 // indirect\n\tgithub.com/prometheus/client_model v0.6.1 // indirect\n\tgithub.com/prometheus/common v0.53.0 // indirect\n\tgithub.com/prometheus/procfs v0.14.0 // indirect\n\tgo.opencensus.io v0.24.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0 // indirect\n\tgo.opentelemetry.io/otel v1.26.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.26.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.26.0 // indirect\n\tgolang.org/x/crypto v0.23.0 // indirect\n\tgolang.org/x/net v0.25.0 // indirect\n\tgolang.org/x/oauth2 v0.20.0 // indirect\n\tgolang.org/x/sync v0.7.0 // indirect\n\tgolang.org/x/sys v0.20.0 // indirect\n\tgolang.org/x/text v0.15.0 // indirect\n\tgolang.org/x/time v0.5.0 // indirect\n\tgoogle.golang.org/api v0.178.0 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20240506185236-b8a5c65736ae // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20240506185236-b8a5c65736ae // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240506185236-b8a5c65736ae // indirect\n\tgoogle.golang.org/grpc v1.63.2 // indirect\n\tgoogle.golang.org/protobuf v1.34.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 26.7333984375,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.113.0 h1:g3C70mn3lWfckKBiCVsAshabrDg01pQ0pnX1MNtnMkA=\ncloud.google.com/go v0.113.0/go.mod h1:glEqlogERKYeePz6ZdkcLJ28Q2I6aERgDDErBg9GzO8=\ncloud.google.com/go/auth v0.4.0 h1:vcJWEguhY8KuiHoSs/udg1JtIRYm3YAWPBE1moF1m3U=\ncloud.google.com/go/auth v0.4.0/go.mod h1:tO/chJN3obc5AbRYFQDsuFbL4wW5y8LfbPtDCfgwOVE=\ncloud.google.com/go/auth/oauth2adapt v0.2.2 h1:+TTV8aXpjeChS9M+aTtN/TjdQnzJvmzKFt//oWu7HX4=\ncloud.google.com/go/auth/oauth2adapt v0.2.2/go.mod h1:wcYjgpZI9+Yu7LyYBg4pqSiaRkfEK3GQcpb7C/uyF1Q=\ncloud.google.com/go/compute/metadata v0.3.0 h1:Tz+eQXMEqDIKRsmY3cHTL6FVaynIjX2QxYC4trgAKZc=\ncloud.google.com/go/compute/metadata v0.3.0/go.mod h1:zFmK7XCadkQkj6TtorcaGlCW1hT1fIilQDwofLpJ20k=\ncloud.google.com/go/iam v1.1.8 h1:r7umDwhj+BQyz0ScZMp4QrGXjSTI3ZINnpgU2nlB/K0=\ncloud.google.com/go/iam v1.1.8/go.mod h1:GvE6lyMmfxXauzNq8NbgJbeVQNspG+tcdL/W8QO1+zE=\ncloud.google.com/go/storage v1.40.0 h1:VEpDQV5CJxFmJ6ueWNsKxcr1QAYOXEgxDa+sBbJahPw=\ncloud.google.com/go/storage v1.40.0/go.mod h1:Rrj7/hKlG87BLqDJYtwR0fbPld8uJPbQ2ucUMY7Ir0g=\ngithub.com/Azure/azure-sdk-for-go v68.0.0+incompatible h1:fcYLmCpyNYRnvJbPerq7U0hS+6+I79yEDJBqVNcqUzU=\ngithub.com/Azure/azure-sdk-for-go v68.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/go-autorest v14.2.0+incompatible h1:V5VMDjClD3GiElqLWO7mz2MxNAK/vTfRHdAubSIPRgs=\ngithub.com/Azure/go-autorest v14.2.0+incompatible/go.mod h1:r+4oMnoxhatjLLJ6zxSWATqVooLgysK6ZNox3g/xq24=\ngithub.com/Azure/go-autorest/autorest v0.11.29 h1:I4+HL/JDvErx2LjyzaVxllw2lRDB5/BT2Bm4g20iqYw=\ngithub.com/Azure/go-autorest/autorest v0.11.29/go.mod h1:ZtEzC4Jy2JDrZLxvWs8LrBWEBycl1hbT1eknI8MtfAs=\ngithub.com/Azure/go-autorest/autorest/adal v0.9.22/go.mod h1:XuAbAEUv2Tta//+voMI038TrJBqjKam0me7qR+L8Cmk=\ngithub.com/Azure/go-autorest/autorest/adal v0.9.23 h1:Yepx8CvFxwNKpH6ja7RZ+sKX+DWYNldbLiALMC3BTz8=\ngithub.com/Azure/go-autorest/autorest/adal v0.9.23/go.mod h1:5pcMqFkdPhviJdlEy3kC/v1ZLnQl0MH6XA5YCcMhy4c=\ngithub.com/Azure/go-autorest/autorest/date v0.3.0 h1:7gUk1U5M/CQbp9WoqinNzJar+8KY+LPI6wiWrP/myHw=\ngithub.com/Azure/go-autorest/autorest/date v0.3.0/go.mod h1:BI0uouVdmngYNUzGWeSYnokU+TrmwEsOqdt8Y6sso74=\ngithub.com/Azure/go-autorest/autorest/mocks v0.4.1/go.mod h1:LTp+uSrOhSkaKrUy935gNZuuIPPVsHlr9DSOxSayd+k=\ngithub.com/Azure/go-autorest/autorest/mocks v0.4.2 h1:PGN4EDXnuQbojHbU0UWoNvmu9AGVwYHG9/fkDYhtAfw=\ngithub.com/Azure/go-autorest/autorest/mocks v0.4.2/go.mod h1:Vy7OitM9Kei0i1Oj+LvyAWMXJHeKH1MVlzFugfVrmyU=\ngithub.com/Azure/go-autorest/autorest/to v0.4.0 h1:oXVqrxakqqV1UZdSazDOPOLvOIz+XA683u8EctwboHk=\ngithub.com/Azure/go-autorest/autorest/to v0.4.0/go.mod h1:fE8iZBn7LQR7zH/9XU2NcPR4o9jEImooCeWJcYV/zLE=\ngithub.com/Azure/go-autorest/logger v0.2.1 h1:IG7i4p/mDa2Ce4TRyAO8IHnVhAVF3RFU+ZtXWSmf4Tg=\ngithub.com/Azure/go-autorest/logger v0.2.1/go.mod h1:T9E3cAhj2VqvPOtCYAvby9aBXkZmbF5NWuPV8+WeEW8=\ngithub.com/Azure/go-autorest/tracing v0.6.0 h1:TYi4+3m5t6K48TGI9AUdb+IzbnSxvnvUMfuitfgcfuo=\ngithub.com/Azure/go-autorest/tracing v0.6.0/go.mod h1:+vhtPC754Xsa23ID7GlGsrdKBpUA79WCAKPPZVC2DeU=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/PaulARoy/azurestoragecache v0.0.0-20170906084534-3c249a3ba788 h1:OxWBmk9BZqWOHVs+hrElt/BiexDGcStcsADt0f4cUx8=\ngithub.com/PaulARoy/azurestoragecache v0.0.0-20170906084534-3c249a3ba788/go.mod h1:lY1dZd8HBzJ10eqKERHn3CU59tfhzcAVb2c0ZhIWSOk=\ngithub.com/aws/aws-sdk-go v1.52.5 h1:m2lty5v9sHm1J3lhA43hJql+yKZudF09qzab0Ag9chM=\ngithub.com/aws/aws-sdk-go v1.52.5/go.mod h1:LF8svs817+Nz+DmiMQKTO3ubZ/6IaTpq3TjupRn3Eqk=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/die-net/lrucache v0.0.0-20220628165024-20a71bc65bf1 h1:1nCGINecpltGpOWruhy+Ac2/FRy+p1igMylF+MsijpI=\ngithub.com/die-net/lrucache v0.0.0-20220628165024-20a71bc65bf1/go.mod h1:NQKJ1XiOlLRLoAeq/5LE3GBlSukAK3zDUUlrvc2rfCQ=\ngithub.com/disintegration/imaging v1.6.2 h1:w1LecBlG2Lnp8B3jk5zSuNqd7b4DXhcjwek1ei82L+c=\ngithub.com/disintegration/imaging v1.6.2/go.mod h1:44/5580QXChDfwIclfc/PCwrr44amcmDAg8hxG0Ewe4=\ngithub.com/dnaeon/go-vcr v1.2.0 h1:zHCHvJYTMh1N7xnV7zf1m1GPBF9Ad0Jk/whtQ1663qI=\ngithub.com/dnaeon/go-vcr v1.2.0/go.mod h1:R4UdLID7HZT3taECzJs4YgbbH6PIGXB6W/sc5OLb6RQ=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/fcjr/aia-transport-go v1.2.2 h1:sIZqXcM+YhTd2BDtkV2OJaqbcIVcPv1oKru3VJPIPc8=\ngithub.com/fcjr/aia-transport-go v1.2.2/go.mod h1:onSqSq3tGkM14WusDx7q9FTheS9R1KBtD+QBWI6zG/w=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=\ngithub.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/gofrs/uuid v4.4.0+incompatible h1:3qXRTX8/NbyulANqlc0lchS1gqAVxRgsuW1YrTJupqA=\ngithub.com/gofrs/uuid v4.4.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/golang-jwt/jwt/v4 v4.0.0/go.mod h1:/xlHOz8bRuivTWchD4jCa+NbatV+wEUSzwAxVc6locg=\ngithub.com/golang-jwt/jwt/v4 v4.5.0 h1:7cYmW1XlMY7h7ii7UhUyChSgS5wUJEnm9uZVTGqOWzg=\ngithub.com/golang-jwt/jwt/v4 v4.5.0/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/gomodule/redigo v1.9.2 h1:HrutZBLhSIU8abiSfW8pj8mPhOyMYjZT/wcA4/L9L9s=\ngithub.com/gomodule/redigo v1.9.2/go.mod h1:KsU3hiK/Ay8U42qpaJk+kuNa3C+spxapWpM+ywhcgtw=\ngithub.com/google/btree v1.1.2 h1:xf4v41cLI2Z6FxbKm+8Bu+m8ifhj15JuZ9sa0jZCMUU=\ngithub.com/google/btree v1.1.2/go.mod h1:qOPhT0dTNdNzV6Z/lhRX0YXUafgPLFUh+gZMl761Gm4=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/martian/v3 v3.3.3 h1:DIhPTQrbPkgs2yJYdXU/eNACCG5DVQjySNRNlflZ9Fc=\ngithub.com/google/martian/v3 v3.3.3/go.mod h1:iEPrYcgCF7jA9OtScMFQyAlZZ4YXTKEtJ1E6RWzmBA0=\ngithub.com/google/s2a-go v0.1.7 h1:60BLSyTrOV4/haCDW4zb1guZItoSq8foHCXrAnjBo/o=\ngithub.com/google/s2a-go v0.1.7/go.mod h1:50CgR4k1jNlWBu4UfS4AcfhVe1r6pdZPygJ3R8F0Qdw=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/googleapis/enterprise-certificate-proxy v0.3.2 h1:Vie5ybvEvT75RniqhfFxPRy3Bf7vr3h0cechB90XaQs=\ngithub.com/googleapis/enterprise-certificate-proxy v0.3.2/go.mod h1:VLSiSSBs/ksPL8kq3OBOQ6WRI2QnaFynd1DCjZ62+V0=\ngithub.com/googleapis/gax-go/v2 v2.12.4 h1:9gWcmF85Wvq4ryPFvGFaOgPIs1AQX0d0bcbGw4Z96qg=\ngithub.com/googleapis/gax-go/v2 v2.12.4/go.mod h1:KYEYLorsnIGDi/rPC8b5TdlB9kbKoFubselGIoBMCwI=\ngithub.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79 h1:+ngKgrYPPJrOjhax5N+uePQ0Fh1Z7PheYoUI/0nzkPA=\ngithub.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=\ngithub.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=\ngithub.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/modocache/gover v0.0.0-20171022184752-b58185e213c5/go.mod h1:caMODM3PzxT8aQXRPkAt8xlV/e7d7w8GM5g0fa5F0D8=\ngithub.com/muesli/smartcrop v0.3.0 h1:JTlSkmxWg/oQ1TcLDoypuirdE8Y/jzNirQeLkxpA6Oc=\ngithub.com/muesli/smartcrop v0.3.0/go.mod h1:i2fCI/UorTfgEpPPLWiFBv4pye+YAG78RwcQLUkocpI=\ngithub.com/nfnt/resize v0.0.0-20180221191011-83c6a9932646 h1:zYyBkD/k9seD2A7fsi6Oo2LfFZAehjjQMERAvZLEDnQ=\ngithub.com/nfnt/resize v0.0.0-20180221191011-83c6a9932646/go.mod h1:jpp1/29i3P1S/RLdc7JQKbRpFeM1dOBd8T9ki5s+AY8=\ngithub.com/peterbourgon/diskv v0.0.0-20171120014656-2973218375c3 h1:ZKRE3mqKoxObHs5oWjLnA1WxXhmlDDAVuE0VsuLIoNk=\ngithub.com/peterbourgon/diskv v0.0.0-20171120014656-2973218375c3/go.mod h1:uqqh8zWWbv1HBMNONnaR/tNboyR3/BZd58JJSHlUSCU=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v1.19.0 h1:ygXvpU1AoN1MhdzckN+PyD9QJOSD4x7kmXYlnfbA6JU=\ngithub.com/prometheus/client_golang v1.19.0/go.mod h1:ZRM9uEAypZakd+q/x7+gmsvXdURP+DABIEIjnmDdp+k=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.53.0 h1:U2pL9w9nmJwJDa4qqLQ3ZaePJ6ZTwt7cMD3AG3+aLCE=\ngithub.com/prometheus/common v0.53.0/go.mod h1:BrxBKv3FWBIGXw89Mg1AeBq7FSyRzXWI3l3e7W3RN5U=\ngithub.com/prometheus/procfs v0.14.0 h1:Lw4VdGGoKEZilJsayHf0B+9YgLGREba2C6xr+Fdfq6s=\ngithub.com/prometheus/procfs v0.14.0/go.mod h1:XL+Iwz8k8ZabyZfMFHPiilCniixqQarAy5Mu67pHlNQ=\ngithub.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=\ngithub.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=\ngithub.com/rwcarlsen/goexif v0.0.0-20190401172101-9e8deecbddbd h1:CmH9+J6ZSsIjUK3dcGsnCnO41eRBOnY12zwkn5qVwgc=\ngithub.com/rwcarlsen/goexif v0.0.0-20190401172101-9e8deecbddbd/go.mod h1:hPqNNc0+uJM6H+SuU8sEs5K5IQeKccPqeSjfgcKGgPk=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.5/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngo.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=\ngo.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0 h1:A3SayB3rNyt+1S6qpI9mHPkeHTZbD7XILEqWnYZb2l0=\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0/go.mod h1:27iA5uvhuRNmalO+iEUdVn5ZMj2qy10Mm+XRIpRmyuU=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0 h1:Xs2Ncz0gNihqu9iosIZ5SkBbWo5T8JhhLJFMQL1qmLI=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0/go.mod h1:vy+2G/6NvVMpwGX/NyLqcC41fxepnuKHk16E6IZUcJc=\ngo.opentelemetry.io/otel v1.26.0 h1:LQwgL5s/1W7YiiRwxf03QGnWLb2HW4pLiAhaA5cZXBs=\ngo.opentelemetry.io/otel v1.26.0/go.mod h1:UmLkJHUAidDval2EICqBMbnAd0/m2vmpf/dAM+fvFs4=\ngo.opentelemetry.io/otel/metric v1.26.0 h1:7S39CLuY5Jgg9CrnA9HHiEjGMF/X2VHvoXGgSllRz30=\ngo.opentelemetry.io/otel/metric v1.26.0/go.mod h1:SY+rHOI4cEawI9a7N1A4nIg/nTQXe1ccCNWYOJUrpX4=\ngo.opentelemetry.io/otel/sdk v1.24.0 h1:YMPPDNymmQN3ZgczicBY3B6sf9n62Dlj9pWD3ucgoDw=\ngo.opentelemetry.io/otel/sdk v1.24.0/go.mod h1:KVrIYw6tEubO9E96HQpcmpTKDVn9gdv35HoYiQWGDFg=\ngo.opentelemetry.io/otel/trace v1.26.0 h1:1ieeAUb4y0TE26jUFrCIXKpTuVK7uJGN9/Z/2LP5sQA=\ngo.opentelemetry.io/otel/trace v1.26.0/go.mod h1:4iDxvGDQuUkHve82hJJ8UqrwswHYsZuWCBllGV2U2y0=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.6.0/go.mod h1:OFC/31mSvZgRz0V1QTNCzfAI1aIRzbiufJtkMIlEp58=\ngolang.org/x/crypto v0.23.0 h1:dIJU/v2J8Mdglj/8rJ6UUOM3Zc9zLZxVZwwxMooUSAI=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/image v0.0.0-20191009234506-e7c1f5e7dbb8/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/image v0.16.0 h1:9kloLAKhUufZhA12l5fwnx2NZW39/we1UhBesW433jw=\ngolang.org/x/image v0.16.0/go.mod h1:ugSZItdV4nOxyqp56HmXwH0Ry0nBCpjnZdpDaIHdoPs=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.25.0 h1:d/OCCoBEUq33pjydKrGQhw7IlUPI2Oylr+8qLx49kac=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.20.0 h1:4mQdhULixXKP1rwYBW0vAijoXnkTG0BLCDRzfe1idMo=\ngolang.org/x/oauth2 v0.20.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.7.0 h1:YsImfSBoP9QPYL0xyKJPq0gcaJdG3rInoqxTWbfQu9M=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.20.0 h1:Od9JTbYCk261bKm4M/mw7AklTlFYIa0bIp9BgSm1S8Y=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.15.0 h1:h1V/4gjBv8v9cjcR6+AR5+/cIYK5N/WAgiv4xlsEtAk=\ngolang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=\ngolang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20231012003039-104605ab7028 h1:+cNy6SZtPcJQH3LJVLOSmiC7MMxXNOb3PU/VUEz+EhU=\ngolang.org/x/xerrors v0.0.0-20231012003039-104605ab7028/go.mod h1:NDW/Ps6MPRej6fsCIbMTohpP40sJ/P/vI1MoTEGwX90=\ngoogle.golang.org/api v0.178.0 h1:yoW/QMI4bRVCHF+NWOTa4cL8MoWL3Jnuc7FlcFF91Ok=\ngoogle.golang.org/api v0.178.0/go.mod h1:84/k2v8DFpDRebpGcooklv/lais3MEfqpaBLA12gl2U=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/genproto v0.0.0-20240506185236-b8a5c65736ae h1:HjgkYCl6cWQEKSHkpUp4Q8VB74swzyBwTz1wtTzahm0=\ngoogle.golang.org/genproto v0.0.0-20240506185236-b8a5c65736ae/go.mod h1:i4np6Wrjp8EujFAUn0CM0SH+iZhY1EbrfzEIJbFkHFM=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240506185236-b8a5c65736ae h1:AH34z6WAGVNkllnKs5raNq3yRq93VnjBG6rpfub/jYk=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240506185236-b8a5c65736ae/go.mod h1:FfiGhwUm6CJviekPrc0oJ+7h29e+DmWU6UtjX0ZvI7Y=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240506185236-b8a5c65736ae h1:c55+MER4zkBS14uJhSZMGGmya0yJx5iHV4x/fpOSNRk=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240506185236-b8a5c65736ae/go.mod h1:I7Y+G38R2bu5j1aLzfFmQfTcU/WnFuqDwLZAbvKTKpM=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=\ngoogle.golang.org/grpc v1.63.2 h1:MUeiw1B2maTVZthpU5xvASfTh3LDbxHd6IJ6QQVU+xM=\ngoogle.golang.org/grpc v1.63.2/go.mod h1:WAX/8DgncnokcFUldAxq7GeB5DXHDbMF+lLvDomNkRA=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.34.1 h1:9ddQBjfCyZPOHPUiPxpYESBLc+T8P3E+Vo4IbKZgFWg=\ngoogle.golang.org/protobuf v1.34.1/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nwillnorris.com/go/gifresize v1.0.0 h1:GKS68zjNhHMqkgNTv4iFAO/j/sNcVSOHQ7SqmDAIAmM=\nwillnorris.com/go/gifresize v1.0.0/go.mod h1:eBM8gogBGCcaH603vxSpnfjwXIpq6nmnj/jauBDKtAk=\n"
        },
        {
          "name": "imageproxy.go",
          "type": "blob",
          "size": 14.783203125,
          "content": "// Copyright 2013 The imageproxy authors.\n// SPDX-License-Identifier: Apache-2.0\n\n// Package imageproxy provides an image proxy server.  For typical use of\n// creating and using a Proxy, see cmd/imageproxy/main.go.\npackage imageproxy // import \"willnorris.com/go/imageproxy\"\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/base64\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"mime\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"path\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/fcjr/aia-transport-go\"\n\t\"github.com/gregjones/httpcache\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\ttphttp \"willnorris.com/go/imageproxy/third_party/http\"\n)\n\n// Maximum number of redirection-followings allowed.\nconst maxRedirects = 10\n\n// Proxy serves image requests.\ntype Proxy struct {\n\tClient *http.Client // client used to fetch remote URLs\n\tCache  Cache        // cache used to cache responses\n\n\t// AllowHosts specifies a list of remote hosts that images can be\n\t// proxied from.  An empty list means all hosts are allowed.\n\tAllowHosts []string\n\n\t// DenyHosts specifies a list of remote hosts that images cannot be\n\t// proxied from.\n\tDenyHosts []string\n\n\t// Referrers, when given, requires that requests to the image\n\t// proxy come from a referring host. An empty list means all\n\t// hosts are allowed.\n\tReferrers []string\n\n\t// IncludeReferer controls whether the original Referer request header\n\t// is included in remote requests.\n\tIncludeReferer bool\n\n\t// FollowRedirects controls whether imageproxy will follow redirects or not.\n\tFollowRedirects bool\n\n\t// DefaultBaseURL is the URL that relative remote URLs are resolved in\n\t// reference to.  If nil, all remote URLs specified in requests must be\n\t// absolute.\n\tDefaultBaseURL *url.URL\n\n\t// The Logger used by the image proxy\n\tLogger *log.Logger\n\n\t// SignatureKeys is a list of HMAC keys used to verify signed requests.\n\t// Any of them can be used to verify signed requests.\n\tSignatureKeys [][]byte\n\n\t// Allow images to scale beyond their original dimensions.\n\tScaleUp bool\n\n\t// Timeout specifies a time limit for requests served by this Proxy.\n\t// If a call runs for longer than its time limit, a 504 Gateway Timeout\n\t// response is returned.  A Timeout of zero means no timeout.\n\tTimeout time.Duration\n\n\t// If true, log additional debug messages\n\tVerbose bool\n\n\t// ContentTypes specifies a list of content types to allow. An empty\n\t// list means all content types are allowed.\n\tContentTypes []string\n\n\t// The User-Agent used by imageproxy when requesting origin image\n\tUserAgent string\n\n\t// PassRequestHeaders identifies HTTP headers to pass from inbound\n\t// requests to the proxied server.\n\tPassRequestHeaders []string\n}\n\n// NewProxy constructs a new proxy.  The provided http RoundTripper will be\n// used to fetch remote URLs.  If nil is provided, http.DefaultTransport will\n// be used.\nfunc NewProxy(transport http.RoundTripper, cache Cache) *Proxy {\n\tif transport == nil {\n\t\ttransport, _ = aia.NewTransport()\n\t}\n\tif cache == nil {\n\t\tcache = NopCache\n\t}\n\n\tproxy := &Proxy{\n\t\tCache: cache,\n\t}\n\n\tclient := new(http.Client)\n\tclient.Transport = &httpcache.Transport{\n\t\tTransport: &TransformingTransport{\n\t\t\tTransport:     transport,\n\t\t\tCachingClient: client,\n\t\t\tlog: func(format string, v ...interface{}) {\n\t\t\t\tif proxy.Verbose {\n\t\t\t\t\tproxy.logf(format, v...)\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\tCache:               cache,\n\t\tMarkCachedResponses: true,\n\t}\n\n\tproxy.Client = client\n\n\treturn proxy\n}\n\n// ServeHTTP handles incoming requests.\nfunc (p *Proxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif r.URL.Path == \"/favicon.ico\" {\n\t\treturn // ignore favicon requests\n\t}\n\n\tif r.URL.Path == \"/\" || r.URL.Path == \"/health-check\" {\n\t\tfmt.Fprint(w, \"OK\")\n\t\treturn\n\t}\n\n\tif r.URL.Path == \"/metrics\" {\n\t\tvar h = promhttp.Handler()\n\t\th.ServeHTTP(w, r)\n\t\treturn\n\t}\n\n\tvar h http.Handler = http.HandlerFunc(p.serveImage)\n\tif p.Timeout > 0 {\n\t\th = tphttp.TimeoutHandler(h, p.Timeout, \"Gateway timeout waiting for remote resource.\")\n\t}\n\n\ttimer := prometheus.NewTimer(metricRequestDuration)\n\tdefer timer.ObserveDuration()\n\th.ServeHTTP(w, r)\n}\n\n// serveImage handles incoming requests for proxied images.\nfunc (p *Proxy) serveImage(w http.ResponseWriter, r *http.Request) {\n\treq, err := NewRequest(r, p.DefaultBaseURL)\n\tif err != nil {\n\t\tmsg := fmt.Sprintf(\"invalid request URL: %v\", err)\n\t\tp.log(msg)\n\t\thttp.Error(w, msg, http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tif err := p.allowed(req); err != nil {\n\t\tp.logf(\"%s: %v\", err, req)\n\t\thttp.Error(w, msgNotAllowed, http.StatusForbidden)\n\t\treturn\n\t}\n\n\t// assign static settings from proxy to req.Options\n\treq.Options.ScaleUp = p.ScaleUp\n\n\tactualReq, _ := http.NewRequest(\"GET\", req.String(), nil)\n\tif p.UserAgent != \"\" {\n\t\tactualReq.Header.Set(\"User-Agent\", p.UserAgent)\n\t}\n\tif len(p.ContentTypes) != 0 {\n\t\tactualReq.Header.Set(\"Accept\", strings.Join(p.ContentTypes, \", \"))\n\t}\n\tif p.IncludeReferer {\n\t\t// pass along the referer header from the original request\n\t\tcopyHeader(actualReq.Header, r.Header, \"referer\")\n\t}\n\tif len(p.PassRequestHeaders) != 0 {\n\t\tcopyHeader(actualReq.Header, r.Header, p.PassRequestHeaders...)\n\t}\n\tif p.FollowRedirects {\n\t\t// FollowRedirects is true (default), ensure that the redirected host is allowed\n\t\tp.Client.CheckRedirect = func(newreq *http.Request, via []*http.Request) error {\n\t\t\tif len(via) > maxRedirects {\n\t\t\t\tif p.Verbose {\n\t\t\t\t\tp.logf(\"followed too many redirects (%d).\", len(via))\n\t\t\t\t}\n\t\t\t\treturn errTooManyRedirects\n\t\t\t}\n\t\t\tif hostMatches(p.DenyHosts, newreq.URL) {\n\t\t\t\thttp.Error(w, msgNotAllowedInRedirect, http.StatusForbidden)\n\t\t\t\treturn errNotAllowed\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t} else {\n\t\t// FollowRedirects is false, don't follow redirects\n\t\tp.Client.CheckRedirect = func(newreq *http.Request, via []*http.Request) error {\n\t\t\treturn http.ErrUseLastResponse\n\t\t}\n\t}\n\tresp, err := p.Client.Do(actualReq)\n\n\tif err != nil {\n\t\tmsg := fmt.Sprintf(\"error fetching remote image: %v\", err)\n\t\tp.log(msg)\n\t\thttp.Error(w, msg, http.StatusInternalServerError)\n\t\tmetricRemoteErrors.Inc()\n\t\treturn\n\t}\n\t// close the original resp.Body, even if we wrap it in a NopCloser below\n\tdefer resp.Body.Close()\n\n\t// return early on 404s.  Perhaps handle additional status codes here?\n\tif resp.StatusCode == http.StatusNotFound {\n\t\thttp.Error(w, \"not found\", http.StatusNotFound)\n\t\treturn\n\t}\n\n\tcached := resp.Header.Get(httpcache.XFromCache) == \"1\"\n\tif p.Verbose {\n\t\tp.logf(\"request: %+v (served from cache: %t)\", *actualReq, cached)\n\t}\n\n\tif cached {\n\t\tmetricServedFromCache.Inc()\n\t}\n\n\tcopyHeader(w.Header(), resp.Header, \"Cache-Control\", \"Last-Modified\", \"Expires\", \"Etag\", \"Link\")\n\n\tif should304(r, resp) {\n\t\tw.WriteHeader(http.StatusNotModified)\n\t\treturn\n\t}\n\n\tcontentType, _, _ := mime.ParseMediaType(resp.Header.Get(\"Content-Type\"))\n\tif contentType == \"\" || contentType == \"application/octet-stream\" || contentType == \"binary/octet-stream\" {\n\t\t// try to detect content type\n\t\tb := bufio.NewReader(resp.Body)\n\t\tresp.Body = io.NopCloser(b)\n\t\tcontentType = peekContentType(b)\n\t}\n\tif resp.ContentLength != 0 && !contentTypeMatches(p.ContentTypes, contentType) {\n\t\tp.logf(\"content-type not allowed: %q\", contentType)\n\t\thttp.Error(w, msgNotAllowed, http.StatusForbidden)\n\t\treturn\n\t}\n\tw.Header().Set(\"Content-Type\", contentType)\n\n\tcopyHeader(w.Header(), resp.Header, \"Content-Length\")\n\n\t// Enable CORS for 3rd party applications\n\tw.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\n\t// Add a Content-Security-Policy to prevent stored-XSS attacks via SVG files\n\tw.Header().Set(\"Content-Security-Policy\", \"script-src 'none'\")\n\n\t// Disable Content-Type sniffing\n\tw.Header().Set(\"X-Content-Type-Options\", \"nosniff\")\n\n\t// Block potential XSS attacks especially in legacy browsers which do not support CSP\n\tw.Header().Set(\"X-XSS-Protection\", \"1; mode=block\")\n\n\tw.WriteHeader(resp.StatusCode)\n\tif _, err := io.Copy(w, resp.Body); err != nil {\n\t\tp.logf(\"error copying response: %v\", err)\n\t}\n}\n\n// peekContentType peeks at the first 512 bytes of p, and attempts to detect\n// the content type.  Returns empty string if error occurs.\nfunc peekContentType(p *bufio.Reader) string {\n\tbyt, err := p.Peek(512)\n\tif err != nil && !errors.Is(err, bufio.ErrBufferFull) && !errors.Is(err, io.EOF) {\n\t\treturn \"\"\n\t}\n\treturn http.DetectContentType(byt)\n}\n\n// copyHeader copies values for specified headers from src to dst, adding to\n// any existing values with the same header name.\nfunc copyHeader(dst, src http.Header, headerNames ...string) {\n\tfor _, name := range headerNames {\n\t\tk := http.CanonicalHeaderKey(name)\n\t\tfor _, v := range src[k] {\n\t\t\tdst.Add(k, v)\n\t\t}\n\t}\n}\n\nvar (\n\terrReferrer         = errors.New(\"request does not contain an allowed referrer\")\n\terrDeniedHost       = errors.New(\"request contains a denied host\")\n\terrNotAllowed       = errors.New(\"request does not contain an allowed host or valid signature\")\n\terrTooManyRedirects = errors.New(\"too many redirects\")\n\n\tmsgNotAllowed           = \"requested URL is not allowed\"\n\tmsgNotAllowedInRedirect = \"requested URL in redirect is not allowed\"\n)\n\n// allowed determines whether the specified request contains an allowed\n// referrer, host, and signature.  It returns an error if the request is not\n// allowed.\nfunc (p *Proxy) allowed(r *Request) error {\n\tif len(p.Referrers) > 0 && !referrerMatches(p.Referrers, r.Original) {\n\t\treturn errReferrer\n\t}\n\n\tif hostMatches(p.DenyHosts, r.URL) {\n\t\treturn errDeniedHost\n\t}\n\n\tif len(p.AllowHosts) == 0 && len(p.SignatureKeys) == 0 {\n\t\treturn nil // no allowed hosts or signature key, all requests accepted\n\t}\n\n\tif len(p.AllowHosts) > 0 && hostMatches(p.AllowHosts, r.URL) {\n\t\treturn nil\n\t}\n\n\tfor _, signatureKey := range p.SignatureKeys {\n\t\tif len(signatureKey) > 0 && validSignature(signatureKey, r) {\n\t\t\treturn nil\n\t\t}\n\t}\n\n\treturn errNotAllowed\n}\n\n// contentTypeMatches returns whether contentType matches one of the allowed patterns.\nfunc contentTypeMatches(patterns []string, contentType string) bool {\n\tif len(patterns) == 0 {\n\t\treturn true\n\t}\n\n\tfor _, pattern := range patterns {\n\t\tif ok, err := path.Match(pattern, contentType); ok && err == nil {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// hostMatches returns whether the host in u matches one of hosts.\nfunc hostMatches(hosts []string, u *url.URL) bool {\n\tfor _, host := range hosts {\n\t\tif u.Hostname() == host {\n\t\t\treturn true\n\t\t}\n\t\tif strings.HasPrefix(host, \"*.\") && strings.HasSuffix(u.Hostname(), host[2:]) {\n\t\t\treturn true\n\t\t}\n\t\t// Checks whether the host in u is an IP\n\t\tif ip := net.ParseIP(u.Hostname()); ip != nil {\n\t\t\t// Checks whether our current host is a CIDR\n\t\t\tif _, ipnet, err := net.ParseCIDR(host); err == nil {\n\t\t\t\t// Checks if our host contains the IP in u\n\t\t\t\tif ipnet.Contains(ip) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false\n}\n\n// returns whether the referrer from the request is in the host list.\nfunc referrerMatches(hosts []string, r *http.Request) bool {\n\tu, err := url.Parse(r.Header.Get(\"Referer\"))\n\tif err != nil { // malformed or blank header, just deny\n\t\treturn false\n\t}\n\n\treturn hostMatches(hosts, u)\n}\n\n// validSignature returns whether the request signature is valid.\nfunc validSignature(key []byte, r *Request) bool {\n\tsig := r.Options.Signature\n\tif m := len(sig) % 4; m != 0 { // add padding if missing\n\t\tsig += strings.Repeat(\"=\", 4-m)\n\t}\n\n\tgot, err := base64.URLEncoding.DecodeString(sig)\n\tif err != nil {\n\t\tlog.Printf(\"error base64 decoding signature %q\", r.Options.Signature)\n\t\treturn false\n\t}\n\n\t// check signature with URL only\n\tmac := hmac.New(sha256.New, key)\n\t_, _ = mac.Write([]byte(r.URL.String()))\n\twant := mac.Sum(nil)\n\tif hmac.Equal(got, want) {\n\t\treturn true\n\t}\n\n\t// check signature with URL and options\n\tu, opt := *r.URL, r.Options // make copies\n\topt.Signature = \"\"\n\tu.Fragment = opt.String()\n\n\tmac = hmac.New(sha256.New, key)\n\t_, _ = mac.Write([]byte(u.String()))\n\twant = mac.Sum(nil)\n\treturn hmac.Equal(got, want)\n}\n\n// should304 returns whether we should send a 304 Not Modified in response to\n// req, based on the response resp.  This is determined using the last modified\n// time and the entity tag of resp.\nfunc should304(req *http.Request, resp *http.Response) bool {\n\t// TODO(willnorris): if-none-match header can be a comma separated list\n\t// of multiple tags to be matched, or the special value \"*\" which\n\t// matches all etags\n\tetag := resp.Header.Get(\"Etag\")\n\tif etag != \"\" && etag == req.Header.Get(\"If-None-Match\") {\n\t\treturn true\n\t}\n\n\tlastModified, err := time.Parse(time.RFC1123, resp.Header.Get(\"Last-Modified\"))\n\tif err != nil {\n\t\treturn false\n\t}\n\tifModSince, err := time.Parse(time.RFC1123, req.Header.Get(\"If-Modified-Since\"))\n\tif err != nil {\n\t\treturn false\n\t}\n\tif lastModified.Before(ifModSince) || lastModified.Equal(ifModSince) {\n\t\treturn true\n\t}\n\n\treturn false\n}\n\nfunc (p *Proxy) log(v ...interface{}) {\n\tif p.Logger != nil {\n\t\tp.Logger.Print(v...)\n\t} else {\n\t\tlog.Print(v...)\n\t}\n}\n\nfunc (p *Proxy) logf(format string, v ...interface{}) {\n\tif p.Logger != nil {\n\t\tp.Logger.Printf(format, v...)\n\t} else {\n\t\tlog.Printf(format, v...)\n\t}\n}\n\n// TransformingTransport is an implementation of http.RoundTripper that\n// optionally transforms images using the options specified in the request URL\n// fragment.\ntype TransformingTransport struct {\n\t// Transport is the underlying http.RoundTripper used to satisfy\n\t// non-transform requests (those that do not include a URL fragment).\n\tTransport http.RoundTripper\n\n\t// CachingClient is used to fetch images to be resized.  This client is\n\t// used rather than Transport directly in order to ensure that\n\t// responses are properly cached.\n\tCachingClient *http.Client\n\n\tlog func(format string, v ...interface{})\n}\n\n// RoundTrip implements the http.RoundTripper interface.\nfunc (t *TransformingTransport) RoundTrip(req *http.Request) (*http.Response, error) {\n\tif req.URL.Fragment == \"\" {\n\t\t// normal requests pass through\n\t\tif t.log != nil {\n\t\t\tt.log(\"fetching remote URL: %v\", req.URL)\n\t\t}\n\t\treturn t.Transport.RoundTrip(req)\n\t}\n\n\tf := req.URL.Fragment\n\treq.URL.Fragment = \"\"\n\tresp, err := t.CachingClient.Do(req)\n\treq.URL.Fragment = f\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdefer resp.Body.Close()\n\n\tif should304(req, resp) {\n\t\t// bare 304 response, full response will be used from cache\n\t\treturn &http.Response{StatusCode: http.StatusNotModified}, nil\n\t}\n\n\tb, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\topt := ParseOptions(req.URL.Fragment)\n\n\timg, err := Transform(b, opt)\n\tif err != nil {\n\t\tlog.Printf(\"error transforming image %s: %v\", req.URL.String(), err)\n\t\timg = b\n\t}\n\n\t// replay response with transformed image and updated content length\n\tbuf := new(bytes.Buffer)\n\tfmt.Fprintf(buf, \"%s %s\\n\", resp.Proto, resp.Status)\n\tif err := resp.Header.WriteSubset(buf, map[string]bool{\n\t\t\"Content-Length\": true,\n\t\t// exclude Content-Type header if the format may have changed during transformation\n\t\t\"Content-Type\": opt.Format != \"\" || resp.Header.Get(\"Content-Type\") == \"image/webp\" || resp.Header.Get(\"Content-Type\") == \"image/tiff\",\n\t}); err != nil {\n\t\tt.log(\"error copying headers: %v\", err)\n\t}\n\tfmt.Fprintf(buf, \"Content-Length: %d\\n\\n\", len(img))\n\tbuf.Write(img)\n\n\treturn http.ReadResponse(bufio.NewReader(buf), req)\n}\n"
        },
        {
          "name": "imageproxy_test.go",
          "type": "blob",
          "size": 16.60546875,
          "content": "// Copyright 2013 The imageproxy authors.\n// SPDX-License-Identifier: Apache-2.0\n\npackage imageproxy\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"errors\"\n\t\"fmt\"\n\t\"image\"\n\t\"image/png\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"os\"\n\t\"reflect\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestPeekContentType(t *testing.T) {\n\t// 1 pixel png image, base64 encoded\n\tb, _ := base64.StdEncoding.DecodeString(\"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAEUlEQVR4nGJiYGBgAAQAAP//AA8AA/6P688AAAAASUVORK5CYII=\")\n\tgot := peekContentType(bufio.NewReader(bytes.NewReader(b)))\n\tif want := \"image/png\"; got != want {\n\t\tt.Errorf(\"peekContentType returned %v, want %v\", got, want)\n\t}\n\n\t// single zero byte\n\tgot = peekContentType(bufio.NewReader(bytes.NewReader([]byte{0x0})))\n\tif want := \"application/octet-stream\"; got != want {\n\t\tt.Errorf(\"peekContentType returned %v, want %v\", got, want)\n\t}\n}\n\nfunc TestCopyHeader(t *testing.T) {\n\ttests := []struct {\n\t\tdst, src http.Header\n\t\tkeys     []string\n\t\twant     http.Header\n\t}{\n\t\t// empty\n\t\t{http.Header{}, http.Header{}, nil, http.Header{}},\n\t\t{http.Header{}, http.Header{}, []string{}, http.Header{}},\n\t\t{http.Header{}, http.Header{}, []string{\"A\"}, http.Header{}},\n\n\t\t// nothing to copy\n\t\t{\n\t\t\tdst:  http.Header{\"A\": []string{\"a1\"}},\n\t\t\tsrc:  http.Header{},\n\t\t\tkeys: nil,\n\t\t\twant: http.Header{\"A\": []string{\"a1\"}},\n\t\t},\n\t\t{\n\t\t\tdst:  http.Header{},\n\t\t\tsrc:  http.Header{\"A\": []string{\"a\"}},\n\t\t\tkeys: []string{\"B\"},\n\t\t\twant: http.Header{},\n\t\t},\n\n\t\t// copy headers\n\t\t{\n\t\t\tdst:  http.Header{\"A\": []string{\"a\"}},\n\t\t\tsrc:  http.Header{\"B\": []string{\"b\"}, \"C\": []string{\"c\"}},\n\t\t\tkeys: []string{\"B\"},\n\t\t\twant: http.Header{\"A\": []string{\"a\"}, \"B\": []string{\"b\"}},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\t// copy dst map\n\t\tgot := make(http.Header)\n\t\tfor k, v := range tt.dst {\n\t\t\tgot[k] = v\n\t\t}\n\n\t\tcopyHeader(got, tt.src, tt.keys...)\n\t\tif !reflect.DeepEqual(got, tt.want) {\n\t\t\tt.Errorf(\"copyHeader(%v, %v, %v) returned %v, want %v\", tt.dst, tt.src, tt.keys, got, tt.want)\n\t\t}\n\t}\n}\n\nfunc TestAllowed(t *testing.T) {\n\tallowHosts := []string{\"good\"}\n\tkey := [][]byte{\n\t\t[]byte(\"c0ffee\"),\n\t}\n\tmultipleKey := [][]byte{\n\t\t[]byte(\"c0ffee\"),\n\t\t[]byte(\"beer\"),\n\t}\n\n\tgenRequest := func(headers map[string]string) *http.Request {\n\t\treq := &http.Request{Header: make(http.Header)}\n\t\tfor key, value := range headers {\n\t\t\treq.Header.Set(key, value)\n\t\t}\n\t\treturn req\n\t}\n\n\ttests := []struct {\n\t\turl        string\n\t\toptions    Options\n\t\tallowHosts []string\n\t\tdenyHosts  []string\n\t\treferrers  []string\n\t\tkeys       [][]byte\n\t\trequest    *http.Request\n\t\tallowed    bool\n\t}{\n\t\t// no allowHosts or signature key\n\t\t{\"http://test/image\", emptyOptions, nil, nil, nil, nil, nil, true},\n\n\t\t// allowHosts\n\t\t{\"http://good/image\", emptyOptions, allowHosts, nil, nil, nil, nil, true},\n\t\t{\"http://bad/image\", emptyOptions, allowHosts, nil, nil, nil, nil, false},\n\n\t\t// referrer\n\t\t{\"http://test/image\", emptyOptions, nil, nil, allowHosts, nil, genRequest(map[string]string{\"Referer\": \"http://good/foo\"}), true},\n\t\t{\"http://test/image\", emptyOptions, nil, nil, allowHosts, nil, genRequest(map[string]string{\"Referer\": \"http://bad/foo\"}), false},\n\t\t{\"http://test/image\", emptyOptions, nil, nil, allowHosts, nil, genRequest(map[string]string{\"Referer\": \"MALFORMED!!\"}), false},\n\t\t{\"http://test/image\", emptyOptions, nil, nil, allowHosts, nil, genRequest(map[string]string{}), false},\n\n\t\t// signature key\n\t\t{\"http://test/image\", Options{Signature: \"NDx5zZHx7QfE8E-ijowRreq6CJJBZjwiRfOVk_mkfQQ=\"}, nil, nil, nil, key, nil, true},\n\t\t{\"http://test/image\", Options{Signature: \"NDx5zZHx7QfE8E-ijowRreq6CJJBZjwiRfOVk_mkfQQ=\"}, nil, nil, nil, multipleKey, nil, true}, // signed with key \"c0ffee\"\n\t\t{\"http://test/image\", Options{Signature: \"FWIawYV4SEyI4zKJMeGugM-eJM1eI_jXPEQ20ZgRe4A=\"}, nil, nil, nil, multipleKey, nil, true}, // signed with key \"beer\"\n\t\t{\"http://test/image\", Options{Signature: \"deadbeef\"}, nil, nil, nil, key, nil, false},\n\t\t{\"http://test/image\", Options{Signature: \"deadbeef\"}, nil, nil, nil, multipleKey, nil, false},\n\t\t{\"http://test/image\", emptyOptions, nil, nil, nil, key, nil, false},\n\n\t\t// allowHosts and signature\n\t\t{\"http://good/image\", emptyOptions, allowHosts, nil, nil, key, nil, true},\n\t\t{\"http://bad/image\", Options{Signature: \"gWivrPhXBbsYEwpmWAKjbJEiAEgZwbXbltg95O2tgNI=\"}, nil, nil, nil, key, nil, true},\n\t\t{\"http://bad/image\", emptyOptions, allowHosts, nil, nil, key, nil, false},\n\n\t\t// deny requests that match denyHosts, even if signature is valid or also matches allowHosts\n\t\t{\"http://test/image\", emptyOptions, nil, []string{\"test\"}, nil, nil, nil, false},\n\t\t{\"http://test:3000/image\", emptyOptions, nil, []string{\"test\"}, nil, nil, nil, false},\n\t\t{\"http://test/image\", emptyOptions, []string{\"test\"}, []string{\"test\"}, nil, nil, nil, false},\n\t\t{\"http://test/image\", Options{Signature: \"NDx5zZHx7QfE8E-ijowRreq6CJJBZjwiRfOVk_mkfQQ=\"}, nil, []string{\"test\"}, nil, key, nil, false},\n\t\t{\"http://127.0.0.1/image\", emptyOptions, nil, []string{\"127.0.0.0/8\"}, nil, nil, nil, false},\n\t\t{\"http://127.0.0.1:3000/image\", emptyOptions, nil, []string{\"127.0.0.0/8\"}, nil, nil, nil, false},\n\t}\n\n\tfor _, tt := range tests {\n\t\tp := NewProxy(nil, nil)\n\t\tp.AllowHosts = tt.allowHosts\n\t\tp.DenyHosts = tt.denyHosts\n\t\tp.SignatureKeys = tt.keys\n\t\tp.Referrers = tt.referrers\n\n\t\tu, err := url.Parse(tt.url)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"error parsing url %q: %v\", tt.url, err)\n\t\t}\n\t\treq := &Request{u, tt.options, tt.request}\n\t\tif got, want := p.allowed(req), tt.allowed; (got == nil) != want {\n\t\t\tt.Errorf(\"allowed(%q) returned %v, want %v.\\nTest struct: %#v\", req, got, want, tt)\n\t\t}\n\t}\n}\n\nfunc TestHostMatches(t *testing.T) {\n\thosts := []string{\"a.test\", \"*.b.test\", \"*c.test\"}\n\n\ttests := []struct {\n\t\turl   string\n\t\tvalid bool\n\t}{\n\t\t{\"http://a.test/image\", true},\n\t\t{\"http://x.a.test/image\", false},\n\n\t\t{\"http://b.test/image\", true},\n\t\t{\"http://x.b.test/image\", true},\n\t\t{\"http://x.y.b.test/image\", true},\n\n\t\t{\"http://c.test/image\", false},\n\t\t{\"http://xc.test/image\", false},\n\t\t{\"/image\", false},\n\t}\n\n\tfor _, tt := range tests {\n\t\tu, err := url.Parse(tt.url)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"error parsing url %q: %v\", tt.url, err)\n\t\t}\n\t\tif got, want := hostMatches(hosts, u), tt.valid; got != want {\n\t\t\tt.Errorf(\"hostMatches(%v, %q) returned %v, want %v\", hosts, u, got, want)\n\t\t}\n\t}\n}\n\nfunc TestReferrerMatches(t *testing.T) {\n\thosts := []string{\"a.test\"}\n\n\ttests := []struct {\n\t\treferrer string\n\t\tvalid    bool\n\t}{\n\t\t{\"\", false},\n\t\t{\"%\", false},\n\t\t{\"http://a.test/\", true},\n\t\t{\"http://b.test/\", false},\n\t}\n\n\tfor _, tt := range tests {\n\t\tr, _ := http.NewRequest(\"GET\", \"/\", nil)\n\t\tr.Header.Set(\"Referer\", tt.referrer)\n\t\tif got, want := referrerMatches(hosts, r), tt.valid; got != want {\n\t\t\tt.Errorf(\"referrerMatches(%v, %v) returned %v, want %v\", hosts, r, got, want)\n\t\t}\n\t}\n}\n\nfunc TestValidSignature(t *testing.T) {\n\tkey := []byte(\"c0ffee\")\n\n\ttests := []struct {\n\t\turl     string\n\t\toptions Options\n\t\tvalid   bool\n\t}{\n\t\t{\"http://test/image\", Options{Signature: \"NDx5zZHx7QfE8E-ijowRreq6CJJBZjwiRfOVk_mkfQQ=\"}, true},\n\t\t{\"http://test/image\", Options{Signature: \"NDx5zZHx7QfE8E-ijowRreq6CJJBZjwiRfOVk_mkfQQ\"}, true},\n\t\t{\"http://test/image\", emptyOptions, false},\n\t\t// url-only signature with options\n\t\t{\"http://test/image\", Options{Signature: \"NDx5zZHx7QfE8E-ijowRreq6CJJBZjwiRfOVk_mkfQQ\", Rotate: 90}, true},\n\t\t// signature calculated from url plus options\n\t\t{\"http://test/image\", Options{Signature: \"ZGTzEm32o4iZ7qcChls3EVYaWyrDd9u0etySo0-WkF8=\", Rotate: 90}, true},\n\t\t// invalid base64 encoded signature\n\t\t{\"http://test/image\", Options{Signature: \"!!\"}, false},\n\t}\n\n\tfor _, tt := range tests {\n\t\tu, err := url.Parse(tt.url)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"error parsing url %q: %v\", tt.url, err)\n\t\t}\n\t\treq := &Request{u, tt.options, &http.Request{}}\n\t\tif got, want := validSignature(key, req), tt.valid; got != want {\n\t\t\tt.Errorf(\"validSignature(%v, %v) returned %v, want %v\", key, req, got, want)\n\t\t}\n\t}\n}\n\nfunc TestShould304(t *testing.T) {\n\ttests := []struct {\n\t\treq, resp string\n\t\tis304     bool\n\t}{\n\t\t{ // etag match\n\t\t\t\"GET / HTTP/1.1\\nIf-None-Match: \\\"v\\\"\\n\\n\",\n\t\t\t\"HTTP/1.1 200 OK\\nEtag: \\\"v\\\"\\n\\n\",\n\t\t\ttrue,\n\t\t},\n\t\t{ // last-modified before\n\t\t\t\"GET / HTTP/1.1\\nIf-Modified-Since: Sun, 02 Jan 2000 00:00:00 GMT\\n\\n\",\n\t\t\t\"HTTP/1.1 200 OK\\nLast-Modified: Sat, 01 Jan 2000 00:00:00 GMT\\n\\n\",\n\t\t\ttrue,\n\t\t},\n\t\t{ // last-modified match\n\t\t\t\"GET / HTTP/1.1\\nIf-Modified-Since: Sat, 01 Jan 2000 00:00:00 GMT\\n\\n\",\n\t\t\t\"HTTP/1.1 200 OK\\nLast-Modified: Sat, 01 Jan 2000 00:00:00 GMT\\n\\n\",\n\t\t\ttrue,\n\t\t},\n\n\t\t// mismatches\n\t\t{\n\t\t\t\"GET / HTTP/1.1\\n\\n\",\n\t\t\t\"HTTP/1.1 200 OK\\n\\n\",\n\t\t\tfalse,\n\t\t},\n\t\t{\n\t\t\t\"GET / HTTP/1.1\\n\\n\",\n\t\t\t\"HTTP/1.1 200 OK\\nEtag: \\\"v\\\"\\n\\n\",\n\t\t\tfalse,\n\t\t},\n\t\t{\n\t\t\t\"GET / HTTP/1.1\\nIf-None-Match: \\\"v\\\"\\n\\n\",\n\t\t\t\"HTTP/1.1 200 OK\\n\\n\",\n\t\t\tfalse,\n\t\t},\n\t\t{\n\t\t\t\"GET / HTTP/1.1\\nIf-None-Match: \\\"a\\\"\\n\\n\",\n\t\t\t\"HTTP/1.1 200 OK\\nEtag: \\\"b\\\"\\n\\n\",\n\t\t\tfalse,\n\t\t},\n\t\t{ // last-modified match\n\t\t\t\"GET / HTTP/1.1\\n\\n\",\n\t\t\t\"HTTP/1.1 200 OK\\nLast-Modified: Sat, 01 Jan 2000 00:00:00 GMT\\n\\n\",\n\t\t\tfalse,\n\t\t},\n\t\t{ // last-modified match\n\t\t\t\"GET / HTTP/1.1\\nIf-Modified-Since: Sun, 02 Jan 2000 00:00:00 GMT\\n\\n\",\n\t\t\t\"HTTP/1.1 200 OK\\n\\n\",\n\t\t\tfalse,\n\t\t},\n\t\t{ // last-modified match\n\t\t\t\"GET / HTTP/1.1\\nIf-Modified-Since: Fri, 31 Dec 1999 00:00:00 GMT\\n\\n\",\n\t\t\t\"HTTP/1.1 200 OK\\nLast-Modified: Sat, 01 Jan 2000 00:00:00 GMT\\n\\n\",\n\t\t\tfalse,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tbuf := bufio.NewReader(strings.NewReader(tt.req))\n\t\treq, err := http.ReadRequest(buf)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"http.ReadRequest(%q) returned error: %v\", tt.req, err)\n\t\t}\n\n\t\tbuf = bufio.NewReader(strings.NewReader(tt.resp))\n\t\tresp, err := http.ReadResponse(buf, req)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"http.ReadResponse(%q) returned error: %v\", tt.resp, err)\n\t\t}\n\n\t\tif got, want := should304(req, resp), tt.is304; got != want {\n\t\t\tt.Errorf(\"should304(%q, %q) returned: %v, want %v\", tt.req, tt.resp, got, want)\n\t\t}\n\t}\n}\n\n// testTransport is an http.RoundTripper that returns certained canned\n// responses for particular requests.\ntype testTransport struct{}\n\nfunc (t testTransport) RoundTrip(req *http.Request) (*http.Response, error) {\n\tvar raw string\n\n\tswitch req.URL.Path {\n\tcase \"/plain\":\n\t\traw = \"HTTP/1.1 200 OK\\n\\n\"\n\tcase \"/error\":\n\t\treturn nil, errors.New(\"http protocol error\")\n\tcase \"/nocontent\":\n\t\traw = \"HTTP/1.1 204 No Content\\n\\n\"\n\tcase \"/etag\":\n\t\traw = \"HTTP/1.1 200 OK\\nEtag: \\\"tag\\\"\\n\\n\"\n\tcase \"/png\":\n\t\tm := image.NewNRGBA(image.Rect(0, 0, 1, 1))\n\t\timg := new(bytes.Buffer)\n\t\t_ = png.Encode(img, m)\n\n\t\traw = fmt.Sprintf(\"HTTP/1.1 200 OK\\nContent-Length: %d\\nContent-Type: image/png\\n\\n%s\", len(img.Bytes()), img.Bytes())\n\tdefault:\n\t\tredirectRegexp := regexp.MustCompile(`/redirects-(\\d+)`)\n\t\tif redirectRegexp.MatchString(req.URL.Path) {\n\t\t\tredirectsLeft, _ := strconv.ParseUint(redirectRegexp.FindStringSubmatch(req.URL.Path)[1], 10, 8)\n\t\t\tif redirectsLeft == 0 {\n\t\t\t\traw = \"HTTP/1.1 200 OK\\n\\n\"\n\t\t\t} else {\n\t\t\t\traw = fmt.Sprintf(\"HTTP/1.1 302\\nLocation: /http://redirect.test/redirects-%d\\n\\n\", redirectsLeft-1)\n\t\t\t}\n\t\t} else {\n\t\t\traw = \"HTTP/1.1 404 Not Found\\n\\n\"\n\t\t}\n\t}\n\n\tbuf := bufio.NewReader(bytes.NewBufferString(raw))\n\treturn http.ReadResponse(buf, req)\n}\n\nfunc TestProxy_ServeHTTP(t *testing.T) {\n\tp := &Proxy{\n\t\tClient: &http.Client{\n\t\t\tTransport: testTransport{},\n\t\t},\n\t\tAllowHosts:   []string{\"good.test\"},\n\t\tContentTypes: []string{\"image/*\"},\n\t}\n\n\ttests := []struct {\n\t\turl  string // request URL\n\t\tcode int    // expected response status code\n\t}{\n\t\t{\"/favicon.ico\", http.StatusOK},\n\t\t{\"//foo\", http.StatusBadRequest},                            // invalid request URL\n\t\t{\"/http://bad.test/\", http.StatusForbidden},                 // Disallowed host\n\t\t{\"/http://good.test/error\", http.StatusInternalServerError}, // HTTP protocol error\n\t\t{\"/http://good.test/nocontent\", http.StatusNoContent},       // non-OK response\n\t\t{\"/100/http://good.test/png\", http.StatusOK},\n\t\t{\"/100/http://good.test/plain\", http.StatusForbidden}, // non-image response\n\n\t\t// health-check URLs\n\t\t{\"/\", http.StatusOK},\n\t\t{\"/health-check\", http.StatusOK},\n\t}\n\n\tfor _, tt := range tests {\n\t\treq, _ := http.NewRequest(\"GET\", \"http://localhost\"+tt.url, nil)\n\t\tresp := httptest.NewRecorder()\n\t\tp.ServeHTTP(resp, req)\n\n\t\tif got, want := resp.Code, tt.code; got != want {\n\t\t\tt.Errorf(\"ServeHTTP(%v) returned status %d, want %d\", req, got, want)\n\t\t}\n\t}\n}\n\n// test that 304 Not Modified responses are returned properly.\nfunc TestProxy_ServeHTTP_is304(t *testing.T) {\n\tp := &Proxy{\n\t\tClient: &http.Client{\n\t\t\tTransport: testTransport{},\n\t\t},\n\t}\n\n\treq, _ := http.NewRequest(\"GET\", \"http://localhost/http://good.test/etag\", nil)\n\treq.Header.Add(\"If-None-Match\", `\"tag\"`)\n\tresp := httptest.NewRecorder()\n\tp.ServeHTTP(resp, req)\n\n\tif got, want := resp.Code, http.StatusNotModified; got != want {\n\t\tt.Errorf(\"ServeHTTP(%v) returned status %d, want %d\", req, got, want)\n\t}\n\tif got, want := resp.Header().Get(\"Etag\"), `\"tag\"`; got != want {\n\t\tt.Errorf(\"ServeHTTP(%v) returned etag header %v, want %v\", req, got, want)\n\t}\n}\n\nfunc TestProxy_ServeHTTP_maxRedirects(t *testing.T) {\n\tp := &Proxy{\n\t\tClient: &http.Client{\n\t\t\tTransport: testTransport{},\n\t\t},\n\t\tFollowRedirects: true,\n\t}\n\n\ttests := []struct {\n\t\turl  string\n\t\tcode int\n\t}{\n\t\t{\"/http://redirect.test/redirects-0\", http.StatusOK},\n\t\t{\"/http://redirect.test/redirects-2\", http.StatusOK},\n\t\t{\"/http://redirect.test/redirects-11\", http.StatusInternalServerError}, // too many redirects\n\t}\n\n\tfor _, tt := range tests {\n\t\treq, _ := http.NewRequest(\"GET\", \"http://localhost\"+tt.url, nil)\n\t\tresp := httptest.NewRecorder()\n\t\tp.ServeHTTP(resp, req)\n\n\t\tif got, want := resp.Code, tt.code; got != want {\n\t\t\tt.Errorf(\"ServeHTTP(%v) returned status %d, want %d\", req, got, want)\n\t\t}\n\t}\n}\n\nfunc TestProxy_log(t *testing.T) {\n\tvar b strings.Builder\n\n\tp := &Proxy{\n\t\tLogger: log.New(&b, \"\", 0),\n\t}\n\tp.log(\"Test\")\n\n\tif got, want := b.String(), \"Test\\n\"; got != want {\n\t\tt.Errorf(\"log wrote %s, want %s\", got, want)\n\t}\n\n\tb.Reset()\n\tp.logf(\"Test %v\", 123)\n\n\tif got, want := b.String(), \"Test 123\\n\"; got != want {\n\t\tt.Errorf(\"logf wrote %s, want %s\", got, want)\n\t}\n}\n\nfunc TestProxy_log_default(t *testing.T) {\n\tvar b strings.Builder\n\n\tdefer func(flags int) {\n\t\tlog.SetOutput(os.Stderr)\n\t\tlog.SetFlags(flags)\n\t}(log.Flags())\n\n\tlog.SetOutput(&b)\n\tlog.SetFlags(0)\n\n\tp := &Proxy{}\n\tp.log(\"Test\")\n\n\tif got, want := b.String(), \"Test\\n\"; got != want {\n\t\tt.Errorf(\"log wrote %s, want %s\", got, want)\n\t}\n\n\tb.Reset()\n\tp.logf(\"Test %v\", 123)\n\n\tif got, want := b.String(), \"Test 123\\n\"; got != want {\n\t\tt.Errorf(\"logf wrote %s, want %s\", got, want)\n\t}\n}\n\nfunc TestTransformingTransport(t *testing.T) {\n\tclient := new(http.Client)\n\ttr := &TransformingTransport{\n\t\tTransport:     testTransport{},\n\t\tCachingClient: client,\n\t}\n\tclient.Transport = tr\n\n\ttests := []struct {\n\t\turl         string\n\t\tcode        int\n\t\texpectError bool\n\t}{\n\t\t{\"http://good.test/png#1\", http.StatusOK, false},\n\t\t{\"http://good.test/error#1\", http.StatusInternalServerError, true},\n\t\t// TODO: test more than just status code... verify that image\n\t\t// is actually transformed and returned properly and that\n\t\t// non-image responses are returned as-is\n\t}\n\n\tfor _, tt := range tests {\n\t\treq, _ := http.NewRequest(\"GET\", tt.url, nil)\n\n\t\tresp, err := tr.RoundTrip(req)\n\t\tif err != nil {\n\t\t\tif !tt.expectError {\n\t\t\t\tt.Errorf(\"RoundTrip(%v) returned unexpected error: %v\", tt.url, err)\n\t\t\t}\n\t\t\tcontinue\n\t\t} else if tt.expectError {\n\t\t\tt.Errorf(\"RoundTrip(%v) did not return expected error\", tt.url)\n\t\t}\n\t\tif got, want := resp.StatusCode, tt.code; got != want {\n\t\t\tt.Errorf(\"RoundTrip(%v) returned status code %d, want %d\", tt.url, got, want)\n\t\t}\n\t}\n}\n\nfunc TestContentTypeMatches(t *testing.T) {\n\ttests := []struct {\n\t\tpatterns    []string\n\t\tcontentType string\n\t\tvalid       bool\n\t}{\n\t\t// no patterns\n\t\t{nil, \"\", true},\n\t\t{nil, \"text/plain\", true},\n\t\t{[]string{}, \"\", true},\n\t\t{[]string{}, \"text/plain\", true},\n\n\t\t// empty pattern\n\t\t{[]string{\"\"}, \"\", true},\n\t\t{[]string{\"\"}, \"text/plain\", false},\n\n\t\t// exact match\n\t\t{[]string{\"text/plain\"}, \"\", false},\n\t\t{[]string{\"text/plain\"}, \"text\", false},\n\t\t{[]string{\"text/plain\"}, \"text/html\", false},\n\t\t{[]string{\"text/plain\"}, \"text/plain\", true},\n\t\t{[]string{\"text/plain\"}, \"text/plaintext\", false},\n\t\t{[]string{\"text/plain\"}, \"text/plain+foo\", false},\n\n\t\t// wildcard match\n\t\t{[]string{\"text/*\"}, \"\", false},\n\t\t{[]string{\"text/*\"}, \"text\", false},\n\t\t{[]string{\"text/*\"}, \"text/html\", true},\n\t\t{[]string{\"text/*\"}, \"text/plain\", true},\n\t\t{[]string{\"text/*\"}, \"image/jpeg\", false},\n\n\t\t{[]string{\"image/svg*\"}, \"image/svg\", true},\n\t\t{[]string{\"image/svg*\"}, \"image/svg+html\", true},\n\n\t\t// complete wildcard does not match\n\t\t{[]string{\"*\"}, \"text/foobar\", false},\n\n\t\t// multiple patterns\n\t\t{[]string{\"text/*\", \"image/*\"}, \"image/jpeg\", true},\n\t}\n\tfor _, tt := range tests {\n\t\tgot := contentTypeMatches(tt.patterns, tt.contentType)\n\t\tif want := tt.valid; got != want {\n\t\t\tt.Errorf(\"contentTypeMatches(%q, %q) returned %v, want %v\", tt.patterns, tt.contentType, got, want)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "metrics.go",
          "type": "blob",
          "size": 1.15625,
          "content": "// Copyright 2013 The imageproxy authors.\n// SPDX-License-Identifier: Apache-2.0\n\npackage imageproxy\n\nimport (\n\t\"github.com/prometheus/client_golang/prometheus\"\n)\n\nvar (\n\tmetricServedFromCache = prometheus.NewCounter(\n\t\tprometheus.CounterOpts{\n\t\t\tNamespace: \"imageproxy\",\n\t\t\tName:      \"requests_served_from_cache_total\",\n\t\t\tHelp:      \"Number of requests served from cache.\",\n\t\t})\n\tmetricTransformationDuration = prometheus.NewSummary(prometheus.SummaryOpts{\n\t\tNamespace: \"imageproxy\",\n\t\tName:      \"transformation_duration_seconds\",\n\t\tHelp:      \"Time taken for image transformations in seconds.\",\n\t})\n\tmetricRemoteErrors = prometheus.NewCounter(prometheus.CounterOpts{\n\t\tNamespace: \"imageproxy\",\n\t\tName:      \"remote_fetch_errors_total\",\n\t\tHelp:      \"Total remote image fetch errors\",\n\t})\n\tmetricRequestDuration = prometheus.NewSummary(prometheus.SummaryOpts{\n\t\tNamespace: \"http\",\n\t\tName:      \"request_duration_seconds\",\n\t\tHelp:      \"Request response times\",\n\t})\n)\n\nfunc init() {\n\tprometheus.MustRegister(metricTransformationDuration)\n\tprometheus.MustRegister(metricServedFromCache)\n\tprometheus.MustRegister(metricRemoteErrors)\n\tprometheus.MustRegister(metricRequestDuration)\n}\n"
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "transform.go",
          "type": "blob",
          "size": 7.0673828125,
          "content": "// Copyright 2013 The imageproxy authors.\n// SPDX-License-Identifier: Apache-2.0\n\npackage imageproxy\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"image\"\n\t_ \"image/gif\" // register gif format\n\t\"image/jpeg\"\n\t\"image/png\"\n\t\"io\"\n\t\"log\"\n\t\"math\"\n\n\t\"github.com/disintegration/imaging\"\n\t\"github.com/muesli/smartcrop\"\n\t\"github.com/muesli/smartcrop/nfnt\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/rwcarlsen/goexif/exif\"\n\t\"golang.org/x/image/bmp\"    // register bmp format\n\t\"golang.org/x/image/tiff\"   // register tiff format\n\t_ \"golang.org/x/image/webp\" // register webp format\n\t\"willnorris.com/go/gifresize\"\n)\n\n// default compression quality of resized jpegs\nconst defaultQuality = 95\n\n// maximum distance into image to look for EXIF tags\nconst maxExifSize = 1 << 20\n\n// resample filter used when resizing images\nvar resampleFilter = imaging.Lanczos\n\n// Transform the provided image.  img should contain the raw bytes of an\n// encoded image in one of the supported formats (gif, jpeg, or png).  The\n// bytes of a similarly encoded image is returned.\nfunc Transform(img []byte, opt Options) ([]byte, error) {\n\tif !opt.transform() {\n\t\t// bail if no transformation was requested\n\t\treturn img, nil\n\t}\n\n\t// decode image\n\tm, format, err := image.Decode(bytes.NewReader(img))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// apply EXIF orientation for jpeg and tiff source images. Read at most\n\t// up to maxExifSize looking for EXIF tags.\n\tif format == \"jpeg\" || format == \"tiff\" {\n\t\tr := io.LimitReader(bytes.NewReader(img), maxExifSize)\n\t\tif exifOpt := exifOrientation(r); exifOpt.transform() {\n\t\t\tm = transformImage(m, exifOpt)\n\t\t}\n\t}\n\n\t// encode webp and tiff as jpeg by default\n\tif format == \"tiff\" || format == \"webp\" {\n\t\tformat = \"jpeg\"\n\t}\n\n\tif opt.Format != \"\" {\n\t\tformat = opt.Format\n\t}\n\n\t// transform and encode image\n\tbuf := new(bytes.Buffer)\n\tswitch format {\n\tcase \"bmp\":\n\t\tm = transformImage(m, opt)\n\t\terr = bmp.Encode(buf, m)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase \"gif\":\n\t\tfn := func(img image.Image) image.Image {\n\t\t\treturn transformImage(img, opt)\n\t\t}\n\t\terr = gifresize.Process(buf, bytes.NewReader(img), fn)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase \"jpeg\":\n\t\tquality := opt.Quality\n\t\tif quality == 0 {\n\t\t\tquality = defaultQuality\n\t\t}\n\n\t\tm = transformImage(m, opt)\n\t\terr = jpeg.Encode(buf, m, &jpeg.Options{Quality: quality})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase \"png\":\n\t\tm = transformImage(m, opt)\n\t\terr = png.Encode(buf, m)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase \"tiff\":\n\t\tm = transformImage(m, opt)\n\t\terr = tiff.Encode(buf, m, &tiff.Options{Compression: tiff.Deflate, Predictor: true})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unsupported format: %v\", format)\n\t}\n\n\treturn buf.Bytes(), nil\n}\n\n// evaluateFloat interprets the option value f. If f is between 0 and 1, it is\n// interpreted as a percentage of max, otherwise it is treated as an absolute\n// value.  If f is less than 0, 0 is returned.\nfunc evaluateFloat(f float64, max int) int {\n\tif 0 < f && f < 1 {\n\t\treturn int(float64(max) * f)\n\t}\n\tif f < 0 {\n\t\treturn 0\n\t}\n\treturn int(f)\n}\n\n// resizeParams determines if the image needs to be resized, and if so, the\n// dimensions to resize to.\nfunc resizeParams(m image.Image, opt Options) (w, h int, resize bool) {\n\t// convert percentage width and height values to absolute values\n\timgW := m.Bounds().Dx()\n\timgH := m.Bounds().Dy()\n\tw = evaluateFloat(opt.Width, imgW)\n\th = evaluateFloat(opt.Height, imgH)\n\n\t// never resize larger than the original image unless specifically allowed\n\tif !opt.ScaleUp {\n\t\tif w > imgW {\n\t\t\tw = imgW\n\t\t}\n\t\tif h > imgH {\n\t\t\th = imgH\n\t\t}\n\t}\n\n\t// if requested width and height match the original, skip resizing\n\tif (w == imgW || w == 0) && (h == imgH || h == 0) {\n\t\treturn 0, 0, false\n\t}\n\n\treturn w, h, true\n}\n\nvar smartcropAnalyzer = smartcrop.NewAnalyzer(nfnt.NewDefaultResizer())\n\n// cropParams calculates crop rectangle parameters to keep it in image bounds\nfunc cropParams(m image.Image, opt Options) image.Rectangle {\n\tif !opt.SmartCrop && opt.CropX == 0 && opt.CropY == 0 && opt.CropWidth == 0 && opt.CropHeight == 0 {\n\t\treturn m.Bounds()\n\t}\n\n\t// width and height of image\n\timgW := m.Bounds().Dx()\n\timgH := m.Bounds().Dy()\n\n\tif opt.SmartCrop {\n\t\tw := evaluateFloat(opt.Width, imgW)\n\t\th := evaluateFloat(opt.Height, imgH)\n\t\tr, err := smartcropAnalyzer.FindBestCrop(m, w, h)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"smartcrop error finding best crop: %v\", err)\n\t\t} else {\n\t\t\treturn r\n\t\t}\n\t}\n\n\t// top left coordinate of crop\n\tx0 := evaluateFloat(math.Abs(opt.CropX), imgW)\n\tif opt.CropX < 0 {\n\t\tx0 = imgW - x0 // measure from right\n\t}\n\ty0 := evaluateFloat(math.Abs(opt.CropY), imgH)\n\tif opt.CropY < 0 {\n\t\ty0 = imgH - y0 // measure from bottom\n\t}\n\n\t// width and height of crop\n\tw := evaluateFloat(opt.CropWidth, imgW)\n\tif w == 0 {\n\t\tw = imgW\n\t}\n\th := evaluateFloat(opt.CropHeight, imgH)\n\tif h == 0 {\n\t\th = imgH\n\t}\n\n\t// bottom right coordinate of crop\n\tx1 := x0 + w\n\tif x1 > imgW {\n\t\tx1 = imgW\n\t}\n\ty1 := y0 + h\n\tif y1 > imgH {\n\t\ty1 = imgH\n\t}\n\n\treturn image.Rect(x0, y0, x1, y1)\n}\n\n// read EXIF orientation tag from r and adjust opt to orient image correctly.\nfunc exifOrientation(r io.Reader) (opt Options) {\n\t// Exif Orientation Tag values\n\t// http://sylvana.net/jpegcrop/exif_orientation.html\n\tconst (\n\t\ttopLeftSide     = 1\n\t\ttopRightSide    = 2\n\t\tbottomRightSide = 3\n\t\tbottomLeftSide  = 4\n\t\tleftSideTop     = 5\n\t\trightSideTop    = 6\n\t\trightSideBottom = 7\n\t\tleftSideBottom  = 8\n\t)\n\n\tex, err := exif.Decode(r)\n\tif err != nil {\n\t\treturn opt\n\t}\n\ttag, err := ex.Get(exif.Orientation)\n\tif err != nil {\n\t\treturn opt\n\t}\n\torient, err := tag.Int(0)\n\tif err != nil {\n\t\treturn opt\n\t}\n\n\tswitch orient {\n\tcase topLeftSide:\n\t\t// do nothing\n\tcase topRightSide:\n\t\topt.FlipHorizontal = true\n\tcase bottomRightSide:\n\t\topt.Rotate = 180\n\tcase bottomLeftSide:\n\t\topt.FlipVertical = true\n\tcase leftSideTop:\n\t\topt.Rotate = 90\n\t\topt.FlipVertical = true\n\tcase rightSideTop:\n\t\topt.Rotate = -90\n\tcase rightSideBottom:\n\t\topt.Rotate = 90\n\t\topt.FlipHorizontal = true\n\tcase leftSideBottom:\n\t\topt.Rotate = 90\n\t}\n\treturn opt\n}\n\n// transformImage modifies the image m based on the transformations specified\n// in opt.\nfunc transformImage(m image.Image, opt Options) image.Image {\n\ttimer := prometheus.NewTimer(metricTransformationDuration)\n\tdefer timer.ObserveDuration()\n\n\t// Parse crop and resize parameters before applying any transforms.\n\t// This is to ensure that any percentage-based values are based off the\n\t// size of the original image.\n\trect := cropParams(m, opt)\n\tw, h, resize := resizeParams(m, opt)\n\n\t// crop if needed\n\tif !m.Bounds().Eq(rect) {\n\t\tm = imaging.Crop(m, rect)\n\t}\n\t// resize if needed\n\tif resize {\n\t\tif opt.Fit {\n\t\t\tm = imaging.Fit(m, w, h, resampleFilter)\n\t\t} else {\n\t\t\tif w == 0 || h == 0 {\n\t\t\t\tm = imaging.Resize(m, w, h, resampleFilter)\n\t\t\t} else {\n\t\t\t\tm = imaging.Thumbnail(m, w, h, resampleFilter)\n\t\t\t}\n\t\t}\n\t}\n\n\t// rotate\n\trotate := float64(opt.Rotate) - math.Floor(float64(opt.Rotate)/360)*360\n\tswitch rotate {\n\tcase 90:\n\t\tm = imaging.Rotate90(m)\n\tcase 180:\n\t\tm = imaging.Rotate180(m)\n\tcase 270:\n\t\tm = imaging.Rotate270(m)\n\t}\n\n\t// flip\n\tif opt.FlipVertical {\n\t\tm = imaging.FlipV(m)\n\t}\n\tif opt.FlipHorizontal {\n\t\tm = imaging.FlipH(m)\n\t}\n\n\treturn m\n}\n"
        },
        {
          "name": "transform_test.go",
          "type": "blob",
          "size": 14.173828125,
          "content": "// Copyright 2013 The imageproxy authors.\n// SPDX-License-Identifier: Apache-2.0\n\npackage imageproxy\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/draw\"\n\t\"image/gif\"\n\t\"image/jpeg\"\n\t\"image/png\"\n\t\"io\"\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/disintegration/imaging\"\n\t\"golang.org/x/image/bmp\"\n)\n\nvar (\n\tred    = color.NRGBA{255, 0, 0, 255}\n\tgreen  = color.NRGBA{0, 255, 0, 255}\n\tblue   = color.NRGBA{0, 0, 255, 255}\n\tyellow = color.NRGBA{255, 255, 0, 255}\n)\n\n// newImage creates a new NRGBA image with the specified dimensions and pixel\n// color data.  If the length of pixels is 1, the entire image is filled with\n// that color.\nfunc newImage(w, h int, pixels ...color.Color) image.Image {\n\tm := image.NewNRGBA(image.Rect(0, 0, w, h))\n\tif len(pixels) == 1 {\n\t\tdraw.Draw(m, m.Bounds(), &image.Uniform{pixels[0]}, image.Point{}, draw.Src)\n\t} else {\n\t\tfor i, p := range pixels {\n\t\t\tm.Set(i%w, i/w, p)\n\t\t}\n\t}\n\treturn m\n}\n\nfunc TestResizeParams(t *testing.T) {\n\tsrc := image.NewNRGBA(image.Rect(0, 0, 64, 128))\n\ttests := []struct {\n\t\topt    Options\n\t\tw, h   int\n\t\tresize bool\n\t}{\n\t\t{Options{Width: 0.5}, 32, 0, true},\n\t\t{Options{Height: 0.5}, 0, 64, true},\n\t\t{Options{Width: 0.5, Height: 0.5}, 32, 64, true},\n\t\t{Options{Width: 100, Height: 200}, 0, 0, false},\n\t\t{Options{Width: 100, Height: 200, ScaleUp: true}, 100, 200, true},\n\t\t{Options{Width: 64}, 0, 0, false},\n\t\t{Options{Height: 128}, 0, 0, false},\n\t}\n\tfor _, tt := range tests {\n\t\tw, h, resize := resizeParams(src, tt.opt)\n\t\tif w != tt.w || h != tt.h || resize != tt.resize {\n\t\t\tt.Errorf(\"resizeParams(%v) returned (%d,%d,%t), want (%d,%d,%t)\", tt.opt, w, h, resize, tt.w, tt.h, tt.resize)\n\t\t}\n\t}\n}\n\nfunc TestCropParams(t *testing.T) {\n\tsrc := image.NewNRGBA(image.Rect(0, 0, 64, 128))\n\ttests := []struct {\n\t\topt            Options\n\t\tx0, y0, x1, y1 int\n\t}{\n\t\t{Options{CropWidth: 10, CropHeight: 0}, 0, 0, 10, 128},\n\t\t{Options{CropWidth: 0, CropHeight: 10}, 0, 0, 64, 10},\n\t\t{Options{CropWidth: -1, CropHeight: -1}, 0, 0, 64, 128},\n\t\t{Options{CropWidth: 50, CropHeight: 100}, 0, 0, 50, 100},\n\t\t{Options{CropWidth: 100, CropHeight: 100}, 0, 0, 64, 100},\n\t\t{Options{CropX: 50, CropY: 100}, 50, 100, 64, 128},\n\t\t{Options{CropX: 50, CropY: 100, CropWidth: 100, CropHeight: 150}, 50, 100, 64, 128},\n\t\t{Options{CropX: -50, CropY: -50}, 14, 78, 64, 128},\n\t\t{Options{CropY: 0.5, CropWidth: 0.5}, 0, 64, 32, 128},\n\t\t{Options{Width: 10, Height: 10, SmartCrop: true}, 0, 0, 64, 64},\n\t}\n\tfor _, tt := range tests {\n\t\twant := image.Rect(tt.x0, tt.y0, tt.x1, tt.y1)\n\t\tgot := cropParams(src, tt.opt)\n\t\tif !got.Eq(want) {\n\t\t\tt.Errorf(\"cropParams(%v) returned %v, want %v\", tt.opt, got, want)\n\t\t}\n\t}\n}\n\nfunc TestTransform(t *testing.T) {\n\tsrc := newImage(2, 2, red, green, blue, yellow)\n\n\tbuf := new(bytes.Buffer)\n\tif err := png.Encode(buf, src); err != nil {\n\t\tt.Errorf(\"error encoding reference image: %v\", err)\n\t}\n\n\ttests := []struct {\n\t\tname        string\n\t\tencode      func(io.Writer, image.Image) error\n\t\texactOutput bool // whether input and output should match exactly\n\t}{\n\t\t{\"bmp\", func(w io.Writer, m image.Image) error { return bmp.Encode(w, m) }, true},\n\t\t{\"gif\", func(w io.Writer, m image.Image) error { return gif.Encode(w, m, nil) }, true},\n\t\t{\"jpeg\", func(w io.Writer, m image.Image) error { return jpeg.Encode(w, m, nil) }, false},\n\t\t{\"png\", func(w io.Writer, m image.Image) error { return png.Encode(w, m) }, true},\n\t}\n\n\tfor _, tt := range tests {\n\t\tbuf := new(bytes.Buffer)\n\t\tif err := tt.encode(buf, src); err != nil {\n\t\t\tt.Errorf(\"error encoding image: %v\", err)\n\t\t}\n\t\tin := buf.Bytes()\n\n\t\tout, err := Transform(in, emptyOptions)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Transform with encoder %s returned unexpected error: %v\", tt.name, err)\n\t\t}\n\t\tif !reflect.DeepEqual(in, out) {\n\t\t\tt.Errorf(\"Transform with with encoder %s with empty options returned modified result\", tt.name)\n\t\t}\n\n\t\tout, err = Transform(in, Options{Width: -1, Height: -1})\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Transform with encoder %s returned unexpected error: %v\", tt.name, err)\n\t\t}\n\t\tif len(out) == 0 {\n\t\t\tt.Errorf(\"Transform with encoder %s returned empty bytes\", tt.name)\n\t\t}\n\t\tif tt.exactOutput && !reflect.DeepEqual(in, out) {\n\t\t\tt.Errorf(\"Transform with encoder %s with noop Options returned modified result\", tt.name)\n\t\t}\n\t}\n\n\tif _, err := Transform([]byte{}, Options{Width: 1}); err == nil {\n\t\tt.Errorf(\"Transform with invalid image input did not return expected err\")\n\t}\n}\n\nfunc TestTransform_InvalidFormat(t *testing.T) {\n\tsrc := newImage(2, 2, red, green, blue, yellow)\n\tbuf := new(bytes.Buffer)\n\tif err := png.Encode(buf, src); err != nil {\n\t\tt.Errorf(\"error encoding reference image: %v\", err)\n\t}\n\n\t_, err := Transform(buf.Bytes(), Options{Format: \"invalid\"})\n\tif err == nil {\n\t\tt.Errorf(\"Transform with invalid format did not return expected error\")\n\t}\n}\n\n// Test that each of the eight EXIF orientations is applied to the transformed\n// image appropriately.\nfunc TestTransform_EXIF(t *testing.T) {\n\tref := newImage(2, 2, red, green, blue, yellow)\n\n\t// reference image encoded as TIF, with each of the 8 EXIF orientations\n\t// applied in reverse and the EXIF tag set. When orientation is\n\t// applied, each should display as the ref image.\n\ttests := []string{\n\t\t\"SUkqAAgAAAAOAAABAwABAAAAAgAAAAEBAwABAAAAAgAAAAIBAwAEAAAAtgAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABEBBAABAAAAzgAAABIBAwABAAAAAQAAABUBAwABAAAABAAAABYBAwABAAAAAgAAABcBBAABAAAAGQAAABoBBQABAAAAvgAAABsBBQABAAAAxgAAACgBAwABAAAAAgAAAFIBAwABAAAAAgAAAAAAAAAIAAgACAAIAEgAAAABAAAASAAAAAEAAAB4nPrPwPAfDBn+////n+E/IAAA//9DzAj4AA==\", // Orientation=1\n\t\t\"SUkqAAgAAAAOAAABAwABAAAAAgAAAAEBAwABAAAAAgAAAAIBAwAEAAAAtgAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABEBBAABAAAAzgAAABIBAwABAAAAAgAAABUBAwABAAAABAAAABYBAwABAAAAAgAAABcBBAABAAAAGQAAABoBBQABAAAAvgAAABsBBQABAAAAxgAAACgBAwABAAAAAgAAAFIBAwABAAAAAgAAAAAAAAAIAAgACAAIAEgAAAABAAAASAAAAAEAAAB4nGL4z/D/PwPD////GcAUIAAA//9HyAj4AA==\", // Orientation=2\n\t\t\"SUkqAAgAAAAOAAABAwABAAAAAgAAAAEBAwABAAAAAgAAAAIBAwAEAAAAtgAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABEBBAABAAAAzgAAABIBAwABAAAAAwAAABUBAwABAAAABAAAABYBAwABAAAAAgAAABcBBAABAAAAFwAAABoBBQABAAAAvgAAABsBBQABAAAAxgAAACgBAwABAAAAAgAAAFIBAwABAAAAAgAAAAAAAAAIAAgACAAIAEgAAAABAAAASAAAAAEAAAB4nPr/n+E/AwOY/A9iAAIAAP//T8AI+AA=\",     // Orientation=3\n\t\t\"SUkqAAgAAAAOAAABAwABAAAAAgAAAAEBAwABAAAAAgAAAAIBAwAEAAAAtgAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABEBBAABAAAAzgAAABIBAwABAAAABAAAABUBAwABAAAABAAAABYBAwABAAAAAgAAABcBBAABAAAAGgAAABoBBQABAAAAvgAAABsBBQABAAAAxgAAACgBAwABAAAAAgAAAFIBAwABAAAAAgAAAAAAAAAIAAgACAAIAEgAAAABAAAASAAAAAEAAAB4nGJg+P///3+G//8ZGP6DICAAAP//S8QI+A==\", // Orientation=4\n\t\t\"SUkqAAgAAAAOAAABAwABAAAAAgAAAAEBAwABAAAAAgAAAAIBAwAEAAAAtgAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABEBBAABAAAAzgAAABIBAwABAAAABQAAABUBAwABAAAABAAAABYBAwABAAAAAgAAABcBBAABAAAAGAAAABoBBQABAAAAvgAAABsBBQABAAAAxgAAACgBAwABAAAAAgAAAFIBAwABAAAAAgAAAAAAAAAIAAgACAAIAEgAAAABAAAASAAAAAEAAAB4nPrPwABC/xn+M/wHkYAAAAD//0PMCPg=\",     // Orientation=5\n\t\t\"SUkqAAgAAAAOAAABAwABAAAAAgAAAAEBAwABAAAAAgAAAAIBAwAEAAAAtgAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABEBBAABAAAAzgAAABIBAwABAAAABgAAABUBAwABAAAABAAAABYBAwABAAAAAgAAABcBBAABAAAAGAAAABoBBQABAAAAvgAAABsBBQABAAAAxgAAACgBAwABAAAAAgAAAFIBAwABAAAAAgAAAAAAAAAIAAgACAAIAEgAAAABAAAASAAAAAEAAAB4nGL4z/D/PwgzMIDQf0AAAAD//0vECPg=\",     // Orientation=6\n\t\t\"SUkqAAgAAAAOAAABAwABAAAAAgAAAAEBAwABAAAAAgAAAAIBAwAEAAAAtgAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABEBBAABAAAAzgAAABIBAwABAAAABwAAABUBAwABAAAABAAAABYBAwABAAAAAgAAABcBBAABAAAAFgAAABoBBQABAAAAvgAAABsBBQABAAAAxgAAACgBAwABAAAAAgAAAFIBAwABAAAAAgAAAAAAAAAIAAgACAAIAEgAAAABAAAASAAAAAEAAAB4nPr/nwECGf7/BxGAAAAA//9PwAj4\",         // Orientation=7\n\t\t\"SUkqAAgAAAAOAAABAwABAAAAAgAAAAEBAwABAAAAAgAAAAIBAwAEAAAAtgAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABEBBAABAAAAzgAAABIBAwABAAAACAAAABUBAwABAAAABAAAABYBAwABAAAAAgAAABcBBAABAAAAFQAAABoBBQABAAAAvgAAABsBBQABAAAAxgAAACgBAwABAAAAAgAAAFIBAwABAAAAAgAAAAAAAAAIAAgACAAIAEgAAAABAAAASAAAAAEAAAB4nGJg+P//P4QAQ0AAAAD//0fICPgA\",         // Orientation=8\n\t}\n\n\tfor _, src := range tests {\n\t\tin, err := base64.StdEncoding.DecodeString(src)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"error decoding source: %v\", err)\n\t\t}\n\t\tout, err := Transform(in, Options{Height: -1, Width: -1, Format: \"tiff\"})\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Transform(%q) returned error: %v\", src, err)\n\t\t}\n\t\td, _, err := image.Decode(bytes.NewReader(out))\n\t\tif err != nil {\n\t\t\tt.Errorf(\"error decoding transformed image: %v\", err)\n\t\t}\n\n\t\t// construct new image with same colors as decoded image for easy comparison\n\t\tgot := newImage(2, 2, d.At(0, 0), d.At(1, 0), d.At(0, 1), d.At(1, 1))\n\t\tif want := ref; !reflect.DeepEqual(got, want) {\n\t\t\tt.Errorf(\"Transform(%v) returned image %#v, want %#v\", src, got, want)\n\t\t}\n\t}\n}\n\n// Test that EXIF orientation and any additional transforms don't conflict.\n// This is tested with orientation=7, which involves both a rotation and a\n// flip, combined with an additional rotation transform.\nfunc TestTransform_EXIF_Rotate(t *testing.T) {\n\t// base64-encoded TIF image (2x2 yellow green blue red) with EXIF\n\t// orientation=7. When orientation applied, displays as (2x2 red green\n\t// blue yellow).\n\tsrc := \"SUkqAAgAAAAOAAABAwABAAAAAgAAAAEBAwABAAAAAgAAAAIBAwAEAAAAtgAAAAMBAwABAAAACAAAAAYBAwABAAAAAgAAABEBBAABAAAAzgAAABIBAwABAAAABwAAABUBAwABAAAABAAAABYBAwABAAAAAgAAABcBBAABAAAAFgAAABoBBQABAAAAvgAAABsBBQABAAAAxgAAACgBAwABAAAAAgAAAFIBAwABAAAAAgAAAAAAAAAIAAgACAAIAEgAAAABAAAASAAAAAEAAAB4nPr/nwECGf7/BxGAAAAA//9PwAj4\"\n\n\tin, err := base64.StdEncoding.DecodeString(src)\n\tif err != nil {\n\t\tt.Errorf(\"error decoding source: %v\", err)\n\t}\n\tout, err := Transform(in, Options{Rotate: 90, Format: \"tiff\"})\n\tif err != nil {\n\t\tt.Errorf(\"Transform(%q) returned error: %v\", src, err)\n\t}\n\td, _, err := image.Decode(bytes.NewReader(out))\n\tif err != nil {\n\t\tt.Errorf(\"error decoding transformed image: %v\", err)\n\t}\n\n\t// construct new image with same colors as decoded image for easy comparison\n\tgot := newImage(2, 2, d.At(0, 0), d.At(1, 0), d.At(0, 1), d.At(1, 1))\n\twant := newImage(2, 2, green, yellow, red, blue)\n\tif !reflect.DeepEqual(got, want) {\n\t\tt.Errorf(\"Transform(%v) returned image %#v, want %#v\", src, got, want)\n\t}\n}\n\nfunc TestTransformImage(t *testing.T) {\n\t// ref is a 2x2 reference image containing four colors\n\tref := newImage(2, 2, red, green, blue, yellow)\n\n\t// cropRef is a 4x4 image with four colors, each in 2x2 quarter\n\tcropRef := newImage(4, 4, red, red, green, green, red, red, green, green, blue, blue, yellow, yellow, blue, blue, yellow, yellow)\n\n\t// use simpler filter while testing that won't skew colors\n\tresampleFilter = imaging.Box\n\n\ttests := []struct {\n\t\tsrc  image.Image // source image to transform\n\t\topt  Options     // options to apply during transform\n\t\twant image.Image // expected transformed image\n\t}{\n\t\t// no transformation\n\t\t{ref, emptyOptions, ref},\n\n\t\t// rotations\n\t\t{ref, Options{Rotate: 45}, ref}, // invalid rotation is a noop\n\t\t{ref, Options{Rotate: 360}, ref},\n\t\t{ref, Options{Rotate: 90}, newImage(2, 2, green, yellow, red, blue)},\n\t\t{ref, Options{Rotate: 180}, newImage(2, 2, yellow, blue, green, red)},\n\t\t{ref, Options{Rotate: 270}, newImage(2, 2, blue, red, yellow, green)},\n\t\t{ref, Options{Rotate: 630}, newImage(2, 2, blue, red, yellow, green)},\n\t\t{ref, Options{Rotate: -90}, newImage(2, 2, blue, red, yellow, green)},\n\n\t\t// flips\n\t\t{\n\t\t\tref,\n\t\t\tOptions{FlipHorizontal: true},\n\t\t\tnewImage(2, 2, green, red, yellow, blue),\n\t\t},\n\t\t{\n\t\t\tref,\n\t\t\tOptions{FlipVertical: true},\n\t\t\tnewImage(2, 2, blue, yellow, red, green),\n\t\t},\n\t\t{\n\t\t\tref,\n\t\t\tOptions{FlipHorizontal: true, FlipVertical: true},\n\t\t\tnewImage(2, 2, yellow, blue, green, red),\n\t\t},\n\t\t{\n\t\t\tref,\n\t\t\tOptions{Rotate: 90, FlipHorizontal: true},\n\t\t\tnewImage(2, 2, yellow, green, blue, red),\n\t\t},\n\n\t\t// resizing\n\t\t{ // can't resize larger than original image\n\t\t\tref,\n\t\t\tOptions{Width: 100, Height: 100},\n\t\t\tref,\n\t\t},\n\t\t{ // can resize larger than original image\n\t\t\tref,\n\t\t\tOptions{Width: 4, Height: 4, ScaleUp: true},\n\t\t\tnewImage(4, 4, red, red, green, green, red, red, green, green, blue, blue, yellow, yellow, blue, blue, yellow, yellow),\n\t\t},\n\t\t{ // invalid values\n\t\t\tref,\n\t\t\tOptions{Width: -1, Height: -1},\n\t\t\tref,\n\t\t},\n\t\t{ // absolute values\n\t\t\tnewImage(100, 100, red),\n\t\t\tOptions{Width: 1, Height: 1},\n\t\t\tnewImage(1, 1, red),\n\t\t},\n\t\t{ // percentage values\n\t\t\tnewImage(100, 100, red),\n\t\t\tOptions{Width: 0.50, Height: 0.25},\n\t\t\tnewImage(50, 25, red),\n\t\t},\n\t\t{ // only width specified, proportional height\n\t\t\tnewImage(100, 50, red),\n\t\t\tOptions{Width: 50},\n\t\t\tnewImage(50, 25, red),\n\t\t},\n\t\t{ // only height specified, proportional width\n\t\t\tnewImage(100, 50, red),\n\t\t\tOptions{Height: 25},\n\t\t\tnewImage(50, 25, red),\n\t\t},\n\t\t{ // resize in one dimenstion, with cropping\n\t\t\tnewImage(4, 2, red, red, blue, blue, red, red, blue, blue),\n\t\t\tOptions{Width: 4, Height: 1},\n\t\t\tnewImage(4, 1, red, red, blue, blue),\n\t\t},\n\t\t{ // resize in two dimensions, with cropping\n\t\t\tnewImage(4, 2, red, red, blue, blue, red, red, blue, blue),\n\t\t\tOptions{Width: 2, Height: 2},\n\t\t\tnewImage(2, 2, red, blue, red, blue),\n\t\t},\n\t\t{ // resize in two dimensions, fit option prevents cropping\n\t\t\tnewImage(4, 2, red, red, blue, blue, red, red, blue, blue),\n\t\t\tOptions{Width: 2, Height: 2, Fit: true},\n\t\t\tnewImage(2, 1, red, blue),\n\t\t},\n\t\t{ // scale image explicitly\n\t\t\tnewImage(4, 2, red, red, blue, blue, red, red, blue, blue),\n\t\t\tOptions{Width: 2, Height: 1},\n\t\t\tnewImage(2, 1, red, blue),\n\t\t},\n\n\t\t// combinations of options\n\t\t{\n\t\t\tnewImage(4, 2, red, red, blue, blue, red, red, blue, blue),\n\t\t\tOptions{Width: 2, Height: 1, Fit: true, FlipHorizontal: true, Rotate: 90},\n\t\t\tnewImage(1, 2, blue, red),\n\t\t},\n\n\t\t// crop\n\t\t{ // quarter ((0, 0), (2, 2)) -> red\n\t\t\tcropRef,\n\t\t\tOptions{CropHeight: 2, CropWidth: 2},\n\t\t\tnewImage(2, 2, red, red, red, red),\n\t\t},\n\t\t{ // quarter ((2, 0), (4, 2)) -> green\n\t\t\tcropRef,\n\t\t\tOptions{CropHeight: 2, CropWidth: 2, CropX: 2},\n\t\t\tnewImage(2, 2, green, green, green, green),\n\t\t},\n\t\t{ // quarter ((0, 2), (2, 4)) -> blue\n\t\t\tcropRef,\n\t\t\tOptions{CropHeight: 2, CropWidth: 2, CropX: 0, CropY: 2},\n\t\t\tnewImage(2, 2, blue, blue, blue, blue),\n\t\t},\n\t\t{ // quarter ((2, 2), (4, 4)) -> yellow\n\t\t\tcropRef,\n\t\t\tOptions{CropHeight: 2, CropWidth: 2, CropX: 2, CropY: 2},\n\t\t\tnewImage(2, 2, yellow, yellow, yellow, yellow),\n\t\t},\n\n\t\t// percentage-based resize in addition to rectangular crop\n\t\t{\n\t\t\tnewImage(12, 12, red),\n\t\t\tOptions{Width: 0.5, Height: 0.5, CropWidth: 8, CropHeight: 8},\n\t\t\tnewImage(6, 6, red),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tif got := transformImage(tt.src, tt.opt); !reflect.DeepEqual(got, tt.want) {\n\t\t\tt.Errorf(\"transformImage(%v, %v) returned image %#v, want %#v\", tt.src, tt.opt, got, tt.want)\n\t\t}\n\t}\n}\n"
        }
      ]
    }
  ]
}