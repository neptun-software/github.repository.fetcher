{
  "metadata": {
    "timestamp": 1736566496222,
    "page": 44,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "prometheus/blackbox_exporter",
      "stars": 4780,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1005859375,
          "content": ".build/\n.tarballs/\n\n!.build/linux-amd64/\n!.build/linux-armv7\n!.build/linux-arm64\n!.build/linux-ppc64le\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.333984375,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\ndependencies-stamp\n/blackbox_exporter\n/.build\n/.release\n/.tarballs\n.deps\n*.tar.gz\n/vendor\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.162109375,
          "content": "# Run only staticcheck for now. Additional linters will be enabled one-by-one.\nlinters:\n  disable-all: true\n  enable:\n    - misspell\n    - staticcheck\n    - sloglint\n"
        },
        {
          "name": ".promu.yml",
          "type": "blob",
          "size": 0.62890625,
          "content": "go:\n    # Whenever the Go version is updated here, .circle/config.yml should also be updated.\n    version: 1.23\nrepository:\n    path: github.com/prometheus/blackbox_exporter\nbuild:\n    ldflags: |\n        -X github.com/prometheus/common/version.Version={{.Version}}\n        -X github.com/prometheus/common/version.Revision={{.Revision}}\n        -X github.com/prometheus/common/version.Branch={{.Branch}}\n        -X github.com/prometheus/common/version.BuildUser={{user}}@{{host}}\n        -X github.com/prometheus/common/version.BuildDate={{date \"20060102-15:04:05\"}}\ntarball:\n    files:\n        - blackbox.yml\n        - LICENSE\n        - NOTICE\n"
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.4521484375,
          "content": "---\nextends: default\nignore: |\n  **/node_modules\n\nrules:\n  braces:\n    max-spaces-inside: 1\n    level: error\n  brackets:\n    max-spaces-inside: 1\n    level: error\n  commas: disable\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  indentation:\n    spaces: consistent\n    indent-sequences: consistent\n  key-duplicates:\n    ignore: |\n      config/testdata/section_key_dup.bad.yml\n  line-length: disable\n  truthy:\n    check-keys: false\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.962890625,
          "content": "## 0.25.0 / 2024-04-09\n\n* [FEATURE] Allow to get Probe logs by target #1063\n* [FEATURE] Log errors from probe #1091\n* [BUGFIX] Prevent logging confusing error message #1059\n* [BUGFIX] Explicit registration of internal exporter metrics 1060\n\n## 0.24.0 / 2023-05-16\n\n* [CHANGE] Make Proxy Connect Headers consistent with Prometheus #1008\n* [FEATURE] Add hostname parameter for TCP probe #981\n* [FEATURE] Add support for HTTP request body as file #987\n\n## 0.23.0 / 2022-12-02\n\n* [SECURITY] Update Exporter Toolkit (CVE-2022-46146) #979\n* [FEATURE] Support multiple Listen Addresses and systemd socket activation #979\n* [FEATURE] Add leaf certificate details in a new `probe_ssl_last_chain_info` metric. #943\n* [FEATURE] DNS: Add `Add probe_dns_query_succeeded` metric. #990\n\n## 0.22.0 / 2022-08-02\n\n* [FEATURE] HTTP: Add `skip_resolve_phase_with_proxy` option. #944\n* [ENHANCEMENT] OAuth: Use Blackbox Exporter user agent when doing OAuth2\n  authenticated requests. #948\n* [ENHANCEMENT] Print usage and help to stdout instead of stderr. #928\n\n\n## 0.21.1 / 2022-06-17\n\n* [BUGFIX] Fix a data race in HTTP probes. #929\n\n## 0.21.0 / 2022-05-30\n\nThis Prometheus release is built with go1.18, which contains two noticeable\nchanges related to TLS and HTTP:\n\n1. [TLS 1.0 and 1.1 disabled by default client-side](https://go.dev/doc/go1.18#tls10).\n   Blackbox Exporter users can override this with the `min_version` parameter of\n   [tls_config](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#tls_config).\n2. [Certificates signed with the SHA-1 hash function are rejected](https://go.dev/doc/go1.18#sha1).\n   This doesn't apply to self-signed root certificates.\n\n* [BUGFIX] Prevent setting negative timeouts when using a small scrape interval. #869\n\n## 0.20.0 / 2022-03-16\n\n* [FEATURE] Add support for grpc health check. #835\n* [FEATURE] Add hostname parameter. #823\n* [ENHANCEMENT] Add body_size_limit option to http module. #836\n* [ENHANCEMENT] Change default user agent. #557\n* [ENHANCEMENT] Add control of recursion desired flag for DNS probes. #859\n* [ENHANCEMENT] Delay init of http phase values. #865\n* [BUGFIX] Fix IP hash. #863\n\n## 0.19.0 / 2021-05-10\n\nIn the HTTP probe, `no_follow_redirects` has been changed to `follow_redirects`.\nThis release accepts both, with a precedence to the `no_follow_redirects` parameter.\nIn the next release, `no_follow_redirects` will be removed.\n\n* [CHANGE] HTTP probe: `no_follow_redirects` has been renamed to `follow_redirects`. #784\n* [FEATURE] Add support for decompression of HTTP responses. #764\n* [FEATURE] Enable TLS and basic authentication. #730\n* [FEATURE] HTTP probe: *experimental* OAuth2 support. #784\n* [ENHANCEMENT] Add a health endpoint. #752\n* [ENHANCEMENT] Add a metric for unknown probes. #716\n* [ENHANCEMENT] Use preferred protocol first when resolving hostname. #728\n* [ENHANCEMENT] Validating the configuration tries to compile regexes. #729\n* [BUGFIX] HTTP probe: Fix error checking. #723\n* [BUGFIX] HTTP probe: Fix how the TLS phase is calculated. #758\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1484375,
          "content": "# Prometheus Community Code of Conduct\n\nPrometheus follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/main/code-of-conduct.md).\n"
        },
        {
          "name": "CONFIGURATION.md",
          "type": "blob",
          "size": 11.0771484375,
          "content": "# Blackbox exporter configuration\n\nThe file is written in [YAML format](http://en.wikipedia.org/wiki/YAML), defined by the scheme described below.\nBrackets indicate that a parameter is optional.\nFor non-list parameters the value is set to the specified default.\n\nGeneric placeholders are defined as follows:\n\n* `<boolean>`: a boolean that can take the values `true` or `false`\n* `<int>`: a regular integer\n* `<duration>`: a duration matching the regular expression `[0-9]+(ms|[smhdwy])`\n* `<filename>`: a valid path in the current working directory\n* `<string>`: a regular string\n* `<secret>`: a regular string that is a secret, such as a password\n* `<regex>`: a regular expression\n\nThe other placeholders are specified separately.\n\nSee [example.yml](example.yml) for configuration examples.\n\n```yml\n\nmodules:\n     [ <string>: <module> ... ]\n\n```\n\n\n### `<module>`\n```yml\n\n  # The protocol over which the probe will take place (http, tcp, dns, icmp, grpc).\n  prober: <prober_string>\n\n  # How long the probe will wait before giving up.\n  [ timeout: <duration> ]\n\n  # The specific probe configuration - at most one of these should be specified.\n  [ http: <http_probe> ]\n  [ tcp: <tcp_probe> ]\n  [ dns: <dns_probe> ]\n  [ icmp: <icmp_probe> ]\n  [ grpc: <grpc_probe> ]\n\n```\n\n### `<http_probe>`\n```yml\n\n  # Accepted status codes for this probe. List between square brackets. Defaults to 2xx.\n  [ valid_status_codes: [<int>, ...] | default = 2xx ]\n\n  # Accepted HTTP versions for this probe.\n  [ valid_http_versions: <string>, ... ]\n\n  # The HTTP method the probe will use.\n  [ method: <string> | default = \"GET\" ]\n\n  # The HTTP headers set for the probe.\n  headers:\n    [ <string>: <string> ... ]\n\n  # The maximum uncompressed body length in bytes that will be processed. A value of 0 means no limit.\n  #\n  # If the response includes a Content-Length header, it is NOT validated against this value. This\n  # setting is only meant to limit the amount of data that you are willing to read from the server.\n  #\n  # Example: 10MB\n  [ body_size_limit: <size> | default = 0 ]\n\n  # The compression algorithm to use to decompress the response (gzip, br, deflate, identity).\n  #\n  # If an \"Accept-Encoding\" header is specified, it MUST be such that the compression algorithm\n  # indicated using this option is acceptable. For example, you can use `compression: gzip` and\n  # `Accept-Encoding: br, gzip` or `Accept-Encoding: br;q=1.0, gzip;q=0.9`. The fact that gzip is\n  # acceptable with a lower quality than br does not invalidate the configuration, as you might\n  # be testing that the server does not return br-encoded content even if it's requested. On the\n  # other hand, `compression: gzip` and `Accept-Encoding: br, identity` is NOT a valid\n  # configuration, because you are asking for gzip to NOT be returned, and trying to decompress\n  # whatever the server returns is likely going to fail.\n  [ compression: <string> | default = \"\" ]\n\n  # Whether or not the probe will follow any redirects.\n  [ follow_redirects: <boolean> | default = true ]\n\n  # Probe fails if SSL is present.\n  [ fail_if_ssl: <boolean> | default = false ]\n\n  # Probe fails if SSL is not present.\n  [ fail_if_not_ssl: <boolean> | default = false ]\n\n  # Probe fails if response body matches regex.\n  fail_if_body_matches_regexp:\n    [ - <regex>, ... ]\n\n  # Probe fails if response body does not match regex.\n  fail_if_body_not_matches_regexp:\n    [ - <regex>, ... ]\n\n  # Probe fails if response header matches regex. For headers with multiple values, fails if *at least one* matches.\n  fail_if_header_matches:\n    [ - <http_header_match_spec>, ... ]\n\n  # Probe fails if response header does not match regex. For headers with multiple values, fails if *none* match.\n  fail_if_header_not_matches:\n    [ - <http_header_match_spec>, ... ]\n\n  # Configuration for TLS protocol of HTTP probe.\n  tls_config:\n    [ <tls_config> ]\n\n  # The HTTP basic authentication credentials.\n  basic_auth:\n    [ username: <string> ]\n    [ password: <secret> ]\n    [ password_file: <filename> ]\n\n  # Sets the `Authorization` header on every request with\n  # the configured credentials.\n  authorization:\n    # Sets the authentication type of the request.\n    [ type: <string> | default: Bearer ]\n    # Sets the credentials of the request. It is mutually exclusive with\n    # `credentials_file`.\n    [ credentials: <secret> ]\n    # Sets the credentials of the request with the credentials read from the\n    # configured file. It is mutually exclusive with `credentials`.\n    [ credentials_file: <filename> ]\n\n  # HTTP proxy server to use to connect to the targets.\n  [ proxy_url: <string> ]\n  # Comma-separated string that can contain IPs, CIDR notation, domain names\n  # that should be excluded from proxying. IP and domain names can\n  # contain port numbers.\n  [ no_proxy: <string> ]\n  # Use proxy URL indicated by environment variables (HTTP_PROXY, https_proxy, HTTPs_PROXY, https_proxy, and no_proxy)\n  [ proxy_from_environment: <bool> | default: false ]\n  # Specifies headers to send to proxies during CONNECT requests.\n  [ proxy_connect_header:\n    [ <string>: [<secret>, ...] ] ]\n\n  # Skip DNS resolution and URL change when an HTTP proxy (proxy_url or proxy_from_environment) is set.\n  [ skip_resolve_phase_with_proxy: <boolean> | default = false ]\n\n  # OAuth 2.0 configuration to use to connect to the targets.\n  oauth2:\n      [ <oauth2> ]\n\n  # Whether to enable HTTP2.\n  [ enable_http2: <bool> | default: true ]\n\n  # The IP protocol of the HTTP probe (ip4, ip6).\n  [ preferred_ip_protocol: <string> | default = \"ip6\" ]\n  [ ip_protocol_fallback: <boolean> | default = true ]\n\n  # The body of the HTTP request used in probe.\n  [ body: <string> ]\n\n  # Read the HTTP request body from from a file.\n  # It is mutually exclusive with `body`.\n  [ body_file: <filename> ]\n\n```\n\n#### `<http_header_match_spec>`\n\n```yml\nheader: <string>,\nregexp: <regex>,\n[ allow_missing: <boolean> | default = false ]\n```\n\n### `<tcp_probe>`\n\n```yml\n\n# The IP protocol of the TCP probe (ip4, ip6).\n[ preferred_ip_protocol: <string> | default = \"ip6\" ]\n[ ip_protocol_fallback: <boolean | default = true> ]\n\n# The source IP address.\n[ source_ip_address: <string> ]\n\n# The query sent in the TCP probe and the expected associated response.\n# \"expect\" matches a regular expression;\n# \"labels\" can define labels which will be exported on metric \"probe_expect_info\";\n# \"send\" sends some content;\n# \"send\" and \"labels.value\" can contain values matched by \"expect\" (such as \"${1}\");\n# \"starttls\" upgrades TCP connection to TLS.\nquery_response:\n  [ - [ [ expect: <string> ],\n        [ labels:\n          - [ name: <string>\n              value: <string>\n            ], ...\n        ],\n        [ send: <string> ],\n        [ starttls: <boolean | default = false> ]\n      ], ...\n  ]\n\n# Whether or not TLS is used when the connection is initiated.\n[ tls: <boolean | default = false> ]\n\n# Configuration for TLS protocol of TCP probe.\ntls_config:\n  [ <tls_config> ]\n\n```\n\n### `<dns_probe>`\n\n```yml\n\n# The IP protocol of the DNS probe (ip4, ip6).\n[ preferred_ip_protocol: <string> | default = \"ip6\" ]\n[ ip_protocol_fallback: <boolean | default = true> ]\n\n# The source IP address.\n[ source_ip_address: <string> ]\n\n[ transport_protocol: <string> | default = \"udp\" ] # udp, tcp\n\n# Whether to use DNS over TLS. This only works with TCP.\n[ dns_over_tls: <boolean | default = false> ]\n\n# Configuration for TLS protocol of DNS over TLS probe.\ntls_config:\n  [ <tls_config> ]\n\nquery_name: <string>\n\n[ query_type: <string> | default = \"ANY\" ]\n[ query_class: <string> | default = \"IN\" ]\n\n# Set the recursion desired (RD) flag in the request.\n[ recursion_desired: <boolean> | default = true ]\n\n# List of valid response codes.\nvalid_rcodes:\n  [ - <string> ... | default = \"NOERROR\" ]\n\nvalidate_answer_rrs:\n\n  fail_if_matches_regexp:\n    [ - <regex>, ... ]\n\n  fail_if_all_match_regexp:\n    [ - <regex>, ... ]\n\n  fail_if_not_matches_regexp:\n    [ - <regex>, ... ]\n\n  fail_if_none_matches_regexp:\n    [ - <regex>, ... ]\n\nvalidate_authority_rrs:\n\n  fail_if_matches_regexp:\n    [ - <regex>, ... ]\n\n  fail_if_all_match_regexp:\n    [ - <regex>, ... ]\n\n  fail_if_not_matches_regexp:\n    [ - <regex>, ... ]\n\n  fail_if_none_matches_regexp:\n    [ - <regex>, ... ]\n\nvalidate_additional_rrs:\n\n  fail_if_matches_regexp:\n    [ - <regex>, ... ]\n\n  fail_if_all_match_regexp:\n    [ - <regex>, ... ]\n\n  fail_if_not_matches_regexp:\n    [ - <regex>, ... ]\n\n  fail_if_none_matches_regexp:\n    [ - <regex>, ... ]\n\n```\n\n### `<icmp_probe>`\n\n```yml\n\n# The IP protocol of the ICMP probe (ip4, ip6).\n[ preferred_ip_protocol: <string> | default = \"ip6\" ]\n[ ip_protocol_fallback: <boolean | default = true> ]\n\n# The source IP address.\n[ source_ip_address: <string> ]\n\n# Set the DF-bit in the IP-header. Only works with ip4, on *nix systems and\n# requires raw sockets (i.e. root or CAP_NET_RAW on Linux).\n[ dont_fragment: <boolean> | default = false ]\n\n# The size of the payload.\n[ payload_size: <int> ]\n\n# TTL of outbound packets. Value must be in the range [0, 255]. Can be used\n# to test reachability of a target within a given number of hops, for example,\n# to determine when network routing has changed.\n[ ttl: <int> ]\n\n```\n\n### `<grpc_probe>`\n\n```yml\n# The service name to query for health status.\n[ service: <string> ]\n\n# The IP protocol of the gRPC probe (ip4, ip6).\n[ preferred_ip_protocol: <string> ]\n[ ip_protocol_fallback: <boolean> | default = true ]\n\n# Whether to connect to the endpoint with TLS.\n[ tls: <boolean | default = false> ]\n\n# Configuration for TLS protocol of gRPC probe.\ntls_config:\n  [ <tls_config> ]\n```\n\n### `<tls_config>`\n\n```yml\n\n# Disable target certificate validation.\n[ insecure_skip_verify: <boolean> | default = false ]\n\n# The CA cert to use for the targets.\n[ ca_file: <filename> ]\n\n# The client cert file for the targets.\n[ cert_file: <filename> ]\n\n# The client key file for the targets.\n[ key_file: <filename> ]\n\n# Used to verify the hostname for the targets.\n[ server_name: <string> ]\n\n# Minimum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS\n# 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).\n# If unset, Prometheus will use Go default minimum version, which is TLS 1.2.\n# See MinVersion in https://pkg.go.dev/crypto/tls#Config.\n[ min_version: <string> ]\n\n# Maximum acceptable TLS version. Accepted values: TLS10 (TLS 1.0), TLS11 (TLS\n# 1.1), TLS12 (TLS 1.2), TLS13 (TLS 1.3).\n# Can be used to test for the presence of insecure TLS versions.\n# If unset, Prometheus will use Go default maximum version, which is TLS 1.3.\n# See MaxVersion in https://pkg.go.dev/crypto/tls#Config.\n[ max_version: <string> ]\n```\n\n#### `<oauth2>`\n\nOAuth 2.0 authentication using the client credentials grant type. Blackbox\nexporter fetches an access token from the specified endpoint with the given\nclient access and secret keys.\n\nNOTE: This is *experimental* in the blackbox exporter and might not be\nreflected properly in the probe metrics at the moment.\n\n```yml\nclient_id: <string>\n[ client_secret: <secret> ]\n\n# Read the client secret from a file.\n# It is mutually exclusive with `client_secret`.\n[ client_secret_file: <filename> ]\n\n# Scopes for the token request.\nscopes:\n  [ - <string> ... ]\n\n# The URL to fetch the token from.\ntoken_url: <string>\n\n# Optional parameters to append to the token URL.\nendpoint_params:\n  [ <string>: <string> ... ]\n```\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.44140625,
          "content": "ARG ARCH=\"amd64\"\nARG OS=\"linux\"\nFROM quay.io/prometheus/busybox-${OS}-${ARCH}:latest\nLABEL maintainer=\"The Prometheus Authors <prometheus-developers@googlegroups.com>\"\n\nARG ARCH=\"amd64\"\nARG OS=\"linux\"\nCOPY .build/${OS}-${ARCH}/blackbox_exporter  /bin/blackbox_exporter\nCOPY blackbox.yml       /etc/blackbox_exporter/config.yml\n\nEXPOSE      9115\nENTRYPOINT  [ \"/bin/blackbox_exporter\" ]\nCMD         [ \"--config.file=/etc/blackbox_exporter/config.yml\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 0.1640625,
          "content": "* Julien Pivotto <roidelapluie@prometheus.io> @roidelapluie\n* Marcelo Magallon <marcelo.magallon@grafana.com> @mem\n* Suraj Nath <suraj.sidh@grafana.com> @electron0zero\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.755859375,
          "content": "# Copyright 2016 The Prometheus Authors\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Needs to be defined before including Makefile.common to auto-generate targets\nDOCKER_ARCHS ?= amd64 armv7 arm64 ppc64le\n\ninclude Makefile.common\n\nDOCKER_IMAGE_NAME       ?= blackbox-exporter\n"
        },
        {
          "name": "Makefile.common",
          "type": "blob",
          "size": 9.1123046875,
          "content": "# Copyright 2018 The Prometheus Authors\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# A common Makefile that includes rules to be reused in different prometheus projects.\n# !!! Open PRs only against the prometheus/prometheus/Makefile.common repository!\n\n# Example usage :\n# Create the main Makefile in the root project directory.\n# include Makefile.common\n# customTarget:\n# \t@echo \">> Running customTarget\"\n#\n\n# Ensure GOBIN is not set during build so that promu is installed to the correct path\nunexport GOBIN\n\nGO           ?= go\nGOFMT        ?= $(GO)fmt\nFIRST_GOPATH := $(firstword $(subst :, ,$(shell $(GO) env GOPATH)))\nGOOPTS       ?=\nGOHOSTOS     ?= $(shell $(GO) env GOHOSTOS)\nGOHOSTARCH   ?= $(shell $(GO) env GOHOSTARCH)\n\nGO_VERSION        ?= $(shell $(GO) version)\nGO_VERSION_NUMBER ?= $(word 3, $(GO_VERSION))\nPRE_GO_111        ?= $(shell echo $(GO_VERSION_NUMBER) | grep -E 'go1\\.(10|[0-9])\\.')\n\nPROMU        := $(FIRST_GOPATH)/bin/promu\npkgs          = ./...\n\nifeq (arm, $(GOHOSTARCH))\n\tGOHOSTARM ?= $(shell GOARM= $(GO) env GOARM)\n\tGO_BUILD_PLATFORM ?= $(GOHOSTOS)-$(GOHOSTARCH)v$(GOHOSTARM)\nelse\n\tGO_BUILD_PLATFORM ?= $(GOHOSTOS)-$(GOHOSTARCH)\nendif\n\nGOTEST := $(GO) test\nGOTEST_DIR :=\nifneq ($(CIRCLE_JOB),)\nifneq ($(shell command -v gotestsum 2> /dev/null),)\n\tGOTEST_DIR := test-results\n\tGOTEST := gotestsum --junitfile $(GOTEST_DIR)/unit-tests.xml --\nendif\nendif\n\nPROMU_VERSION ?= 0.17.0\nPROMU_URL     := https://github.com/prometheus/promu/releases/download/v$(PROMU_VERSION)/promu-$(PROMU_VERSION).$(GO_BUILD_PLATFORM).tar.gz\n\nSKIP_GOLANGCI_LINT :=\nGOLANGCI_LINT :=\nGOLANGCI_LINT_OPTS ?=\nGOLANGCI_LINT_VERSION ?= v1.62.0\n# golangci-lint only supports linux, darwin and windows platforms on i386/amd64/arm64.\n# windows isn't included here because of the path separator being different.\nifeq ($(GOHOSTOS),$(filter $(GOHOSTOS),linux darwin))\n\tifeq ($(GOHOSTARCH),$(filter $(GOHOSTARCH),amd64 i386 arm64))\n\t\t# If we're in CI and there is an Actions file, that means the linter\n\t\t# is being run in Actions, so we don't need to run it here.\n\t\tifneq (,$(SKIP_GOLANGCI_LINT))\n\t\t\tGOLANGCI_LINT :=\n\t\telse ifeq (,$(CIRCLE_JOB))\n\t\t\tGOLANGCI_LINT := $(FIRST_GOPATH)/bin/golangci-lint\n\t\telse ifeq (,$(wildcard .github/workflows/golangci-lint.yml))\n\t\t\tGOLANGCI_LINT := $(FIRST_GOPATH)/bin/golangci-lint\n\t\tendif\n\tendif\nendif\n\nPREFIX                  ?= $(shell pwd)\nBIN_DIR                 ?= $(shell pwd)\nDOCKER_IMAGE_TAG        ?= $(subst /,-,$(shell git rev-parse --abbrev-ref HEAD))\nDOCKERFILE_PATH         ?= ./Dockerfile\nDOCKERBUILD_CONTEXT     ?= ./\nDOCKER_REPO             ?= prom\n\nDOCKER_ARCHS            ?= amd64\n\nBUILD_DOCKER_ARCHS = $(addprefix common-docker-,$(DOCKER_ARCHS))\nPUBLISH_DOCKER_ARCHS = $(addprefix common-docker-publish-,$(DOCKER_ARCHS))\nTAG_DOCKER_ARCHS = $(addprefix common-docker-tag-latest-,$(DOCKER_ARCHS))\n\nSANITIZED_DOCKER_IMAGE_TAG := $(subst +,-,$(DOCKER_IMAGE_TAG))\n\nifeq ($(GOHOSTARCH),amd64)\n        ifeq ($(GOHOSTOS),$(filter $(GOHOSTOS),linux freebsd darwin windows))\n                # Only supported on amd64\n                test-flags := -race\n        endif\nendif\n\n# This rule is used to forward a target like \"build\" to \"common-build\".  This\n# allows a new \"build\" target to be defined in a Makefile which includes this\n# one and override \"common-build\" without override warnings.\n%: common-% ;\n\n.PHONY: common-all\ncommon-all: precheck style check_license lint yamllint unused build test\n\n.PHONY: common-style\ncommon-style:\n\t@echo \">> checking code style\"\n\t@fmtRes=$$($(GOFMT) -d $$(find . -path ./vendor -prune -o -name '*.go' -print)); \\\n\tif [ -n \"$${fmtRes}\" ]; then \\\n\t\techo \"gofmt checking failed!\"; echo \"$${fmtRes}\"; echo; \\\n\t\techo \"Please ensure you are using $$($(GO) version) for formatting code.\"; \\\n\t\texit 1; \\\n\tfi\n\n.PHONY: common-check_license\ncommon-check_license:\n\t@echo \">> checking license header\"\n\t@licRes=$$(for file in $$(find . -type f -iname '*.go' ! -path './vendor/*') ; do \\\n               awk 'NR<=3' $$file | grep -Eq \"(Copyright|generated|GENERATED)\" || echo $$file; \\\n       done); \\\n       if [ -n \"$${licRes}\" ]; then \\\n               echo \"license header checking failed:\"; echo \"$${licRes}\"; \\\n               exit 1; \\\n       fi\n\n.PHONY: common-deps\ncommon-deps:\n\t@echo \">> getting dependencies\"\n\t$(GO) mod download\n\n.PHONY: update-go-deps\nupdate-go-deps:\n\t@echo \">> updating Go dependencies\"\n\t@for m in $$($(GO) list -mod=readonly -m -f '{{ if and (not .Indirect) (not .Main)}}{{.Path}}{{end}}' all); do \\\n\t\t$(GO) get -d $$m; \\\n\tdone\n\t$(GO) mod tidy\n\n.PHONY: common-test-short\ncommon-test-short: $(GOTEST_DIR)\n\t@echo \">> running short tests\"\n\t$(GOTEST) -short $(GOOPTS) $(pkgs)\n\n.PHONY: common-test\ncommon-test: $(GOTEST_DIR)\n\t@echo \">> running all tests\"\n\t$(GOTEST) $(test-flags) $(GOOPTS) $(pkgs)\n\n$(GOTEST_DIR):\n\t@mkdir -p $@\n\n.PHONY: common-format\ncommon-format:\n\t@echo \">> formatting code\"\n\t$(GO) fmt $(pkgs)\n\n.PHONY: common-vet\ncommon-vet:\n\t@echo \">> vetting code\"\n\t$(GO) vet $(GOOPTS) $(pkgs)\n\n.PHONY: common-lint\ncommon-lint: $(GOLANGCI_LINT)\nifdef GOLANGCI_LINT\n\t@echo \">> running golangci-lint\"\n\t$(GOLANGCI_LINT) run $(GOLANGCI_LINT_OPTS) $(pkgs)\nendif\n\n.PHONY: common-lint-fix\ncommon-lint-fix: $(GOLANGCI_LINT)\nifdef GOLANGCI_LINT\n\t@echo \">> running golangci-lint fix\"\n\t$(GOLANGCI_LINT) run --fix $(GOLANGCI_LINT_OPTS) $(pkgs)\nendif\n\n.PHONY: common-yamllint\ncommon-yamllint:\n\t@echo \">> running yamllint on all YAML files in the repository\"\nifeq (, $(shell command -v yamllint 2> /dev/null))\n\t@echo \"yamllint not installed so skipping\"\nelse\n\tyamllint .\nendif\n\n# For backward-compatibility.\n.PHONY: common-staticcheck\ncommon-staticcheck: lint\n\n.PHONY: common-unused\ncommon-unused:\n\t@echo \">> running check for unused/missing packages in go.mod\"\n\t$(GO) mod tidy\n\t@git diff --exit-code -- go.sum go.mod\n\n.PHONY: common-build\ncommon-build: promu\n\t@echo \">> building binaries\"\n\t$(PROMU) build --prefix $(PREFIX) $(PROMU_BINARIES)\n\n.PHONY: common-tarball\ncommon-tarball: promu\n\t@echo \">> building release tarball\"\n\t$(PROMU) tarball --prefix $(PREFIX) $(BIN_DIR)\n\n.PHONY: common-docker-repo-name\ncommon-docker-repo-name:\n\t@echo \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)\"\n\n.PHONY: common-docker $(BUILD_DOCKER_ARCHS)\ncommon-docker: $(BUILD_DOCKER_ARCHS)\n$(BUILD_DOCKER_ARCHS): common-docker-%:\n\tdocker build -t \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:$(SANITIZED_DOCKER_IMAGE_TAG)\" \\\n\t\t-f $(DOCKERFILE_PATH) \\\n\t\t--build-arg ARCH=\"$*\" \\\n\t\t--build-arg OS=\"linux\" \\\n\t\t$(DOCKERBUILD_CONTEXT)\n\n.PHONY: common-docker-publish $(PUBLISH_DOCKER_ARCHS)\ncommon-docker-publish: $(PUBLISH_DOCKER_ARCHS)\n$(PUBLISH_DOCKER_ARCHS): common-docker-publish-%:\n\tdocker push \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:$(SANITIZED_DOCKER_IMAGE_TAG)\"\n\nDOCKER_MAJOR_VERSION_TAG = $(firstword $(subst ., ,$(shell cat VERSION)))\n.PHONY: common-docker-tag-latest $(TAG_DOCKER_ARCHS)\ncommon-docker-tag-latest: $(TAG_DOCKER_ARCHS)\n$(TAG_DOCKER_ARCHS): common-docker-tag-latest-%:\n\tdocker tag \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:$(SANITIZED_DOCKER_IMAGE_TAG)\" \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:latest\"\n\tdocker tag \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:$(SANITIZED_DOCKER_IMAGE_TAG)\" \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:v$(DOCKER_MAJOR_VERSION_TAG)\"\n\n.PHONY: common-docker-manifest\ncommon-docker-manifest:\n\tDOCKER_CLI_EXPERIMENTAL=enabled docker manifest create -a \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME):$(SANITIZED_DOCKER_IMAGE_TAG)\" $(foreach ARCH,$(DOCKER_ARCHS),$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$(ARCH):$(SANITIZED_DOCKER_IMAGE_TAG))\n\tDOCKER_CLI_EXPERIMENTAL=enabled docker manifest push \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME):$(SANITIZED_DOCKER_IMAGE_TAG)\"\n\n.PHONY: promu\npromu: $(PROMU)\n\n$(PROMU):\n\t$(eval PROMU_TMP := $(shell mktemp -d))\n\tcurl -s -L $(PROMU_URL) | tar -xvzf - -C $(PROMU_TMP)\n\tmkdir -p $(FIRST_GOPATH)/bin\n\tcp $(PROMU_TMP)/promu-$(PROMU_VERSION).$(GO_BUILD_PLATFORM)/promu $(FIRST_GOPATH)/bin/promu\n\trm -r $(PROMU_TMP)\n\n.PHONY: proto\nproto:\n\t@echo \">> generating code from proto files\"\n\t@./scripts/genproto.sh\n\nifdef GOLANGCI_LINT\n$(GOLANGCI_LINT):\n\tmkdir -p $(FIRST_GOPATH)/bin\n\tcurl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/$(GOLANGCI_LINT_VERSION)/install.sh \\\n\t\t| sed -e '/install -d/d' \\\n\t\t| sh -s -- -b $(FIRST_GOPATH)/bin $(GOLANGCI_LINT_VERSION)\nendif\n\n.PHONY: precheck\nprecheck::\n\ndefine PRECHECK_COMMAND_template =\nprecheck:: $(1)_precheck\n\nPRECHECK_COMMAND_$(1) ?= $(1) $$(strip $$(PRECHECK_OPTIONS_$(1)))\n.PHONY: $(1)_precheck\n$(1)_precheck:\n\t@if ! $$(PRECHECK_COMMAND_$(1)) 1>/dev/null 2>&1; then \\\n\t\techo \"Execution of '$$(PRECHECK_COMMAND_$(1))' command failed. Is $(1) installed?\"; \\\n\t\texit 1; \\\n\tfi\nendef\n\ngovulncheck: install-govulncheck\n\tgovulncheck ./...\n\ninstall-govulncheck:\n\tcommand -v govulncheck > /dev/null || go install golang.org/x/vuln/cmd/govulncheck@latest\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.091796875,
          "content": "The Blackbox exporter for blackbox probing metrics\nCopyright 2012-2016 The Prometheus Authors\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4814453125,
          "content": "# Blackbox exporter\n\n[![CircleCI](https://circleci.com/gh/prometheus/blackbox_exporter/tree/master.svg?style=shield)][circleci]\n[![Docker Repository on Quay](https://quay.io/repository/prometheus/blackbox-exporter/status)][quay]\n[![Docker Pulls](https://img.shields.io/docker/pulls/prom/blackbox-exporter.svg?maxAge=604800)][hub]\n\nThe blackbox exporter allows blackbox probing of endpoints over\nHTTP, HTTPS, DNS, TCP, ICMP and gRPC.\n\n## Running this software\n\n### From binaries\n\nDownload the most suitable binary from [the releases tab](https://github.com/prometheus/blackbox_exporter/releases)\n\nThen:\n\n    ./blackbox_exporter <flags>\n\n\n### Using the docker image\n\n*Note: You may want to [enable ipv6 in your docker configuration](https://docs.docker.com/v17.09/engine/userguide/networking/default_network/ipv6/)*\n\n    docker run --rm \\\n      -p 9115/tcp \\\n      --name blackbox_exporter \\\n      -v $(pwd):/config \\\n      quay.io/prometheus/blackbox-exporter:latest --config.file=/config/blackbox.yml\n\n### Checking the results\n\nVisiting [http://localhost:9115/probe?target=google.com&module=http_2xx](http://localhost:9115/probe?target=google.com&module=http_2xx)\nwill return metrics for a HTTP probe against google.com. The `probe_success`\nmetric indicates if the probe succeeded. Adding a `debug=true` parameter\nwill return debug information for that probe.\n\nMetrics concerning the operation of the exporter itself are available at the\nendpoint <http://localhost:9115/metrics>.\n\n### TLS and basic authentication\n\nThe Blackbox Exporter supports TLS and basic authentication. This enables better\ncontrol of the various HTTP endpoints.\n\nTo use TLS and/or basic authentication, you need to pass a configuration file\nusing the `--web.config.file` parameter. The format of the file is described\n[in the exporter-toolkit repository](https://github.com/prometheus/exporter-toolkit/blob/master/docs/web-configuration.md).\n\nNote that the TLS and basic authentication settings affect all HTTP endpoints:\n/metrics for scraping, /probe for probing, and the web UI.\n\n## Building the software\n\n### Local Build\n\n    make\n\n\n### Building with Docker\n\nAfter a successful local build:\n\n    docker build -t blackbox_exporter .\n\n## [Configuration](CONFIGURATION.md)\n\nBlackbox exporter is configured via a [configuration file](CONFIGURATION.md) and command-line flags (such as what configuration file to load, what port to listen on, and the logging format and level).\n\nBlackbox exporter can reload its configuration file at runtime. If the new configuration is not well-formed, the changes will not be applied.\nA configuration reload is triggered by sending a `SIGHUP` to the Blackbox exporter process or by sending a HTTP POST request to the `/-/reload` endpoint.\n\nTo view all available command-line flags, run `./blackbox_exporter -h`.\n\nTo specify which [configuration file](CONFIGURATION.md) to load, use the `--config.file` flag.\n\nAdditionally, an [example configuration](example.yml) is also available.\n\nHTTP, HTTPS (via the `http` prober), DNS, TCP socket, ICMP and gRPC (see permissions section) are currently supported.\nAdditional modules can be defined to meet your needs.\n\nThe timeout of each probe is automatically determined from the `scrape_timeout` in the [Prometheus config](https://prometheus.io/docs/operating/configuration/#configuration-file), slightly reduced to allow for network delays. \nThis can be further limited by the `timeout` in the Blackbox exporter config file. If neither is specified, it defaults to 120 seconds.\n\n## Prometheus Configuration\n\nBlackbox exporter implements the multi-target exporter pattern, so we advice\nto read the guide [Understanding and using the multi-target exporter pattern\n](https://prometheus.io/docs/guides/multi-target-exporter/) to get the general\nidea about the configuration.\n\nThe blackbox exporter needs to be passed the target as a parameter, this can be\ndone with relabelling.\n\nExample config:\n```yml\nscrape_configs:\n  - job_name: 'blackbox'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]  # Look for a HTTP 200 response.\n    static_configs:\n      - targets:\n        - http://prometheus.io    # Target to probe with http.\n        - https://prometheus.io   # Target to probe with https.\n        - http://example.com:8080 # Target to probe with http on port 8080.\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: 127.0.0.1:9115  # The blackbox exporter's real hostname:port.\n  - job_name: 'blackbox_exporter'  # collect blackbox exporter's operational metrics.\n    static_configs:\n      - targets: ['127.0.0.1:9115']\n```\n\nHTTP probes can accept an additional `hostname` parameter that will set `Host` header and TLS SNI. This can be especially useful with `dns_sd_config`:\n```yaml\nscrape_configs:\n  - job_name: blackbox_all\n    metrics_path: /probe\n    params:\n      module: [ http_2xx ]  # Look for a HTTP 200 response.\n    dns_sd_configs:\n      - names:\n          - example.com\n          - prometheus.io\n        type: A\n        port: 443\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n        replacement: https://$1/  # Make probe URL be like https://1.2.3.4:443/\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: 127.0.0.1:9115  # The blackbox exporter's real hostname:port.\n      - source_labels: [__meta_dns_name]\n        target_label: __param_hostname  # Make domain name become 'Host' header for probe requests\n      - source_labels: [__meta_dns_name]\n        target_label: vhost  # and store it in 'vhost' label\n```\n\n## Permissions\n\nThe ICMP probe requires elevated privileges to function:\n\n* *Windows*: Administrator privileges are required.\n* *Linux*: either a user with a group within `net.ipv4.ping_group_range`, the\n  `CAP_NET_RAW` capability or the root user is required.\n  * Your distribution may configure `net.ipv4.ping_group_range` by default in\n    `/etc/sysctl.conf` or similar. If not you can set\n    `net.ipv4.ping_group_range = 0  2147483647` to allow any user the ability\n    to use ping.\n  * Alternatively the capability can be set by executing `setcap cap_net_raw+ep\n    blackbox_exporter`\n* *BSD*: root user is required.\n* *OS X*: No additional privileges are needed.\n\n[circleci]: https://circleci.com/gh/prometheus/blackbox_exporter\n[hub]: https://hub.docker.com/r/prom/blackbox-exporter/\n[quay]: https://quay.io/repository/prometheus/blackbox-exporter\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.16796875,
          "content": "# Reporting a security issue\n\nThe Prometheus security policy, including how to report vulnerabilities, can be\nfound here:\n\n<https://prometheus.io/docs/operating/security/>\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0068359375,
          "content": "0.25.0\n"
        },
        {
          "name": "blackbox.yml",
          "type": "blob",
          "size": 1.1806640625,
          "content": "modules:\n  http_2xx:\n    prober: http\n    http:\n      preferred_ip_protocol: \"ip4\"\n  http_post_2xx:\n    prober: http\n    http:\n      method: POST\n  tcp_connect:\n    prober: tcp\n  pop3s_banner:\n    prober: tcp\n    tcp:\n      query_response:\n      - expect: \"^+OK\"\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n  grpc:\n    prober: grpc\n    grpc:\n      tls: true\n      preferred_ip_protocol: \"ip4\"\n  grpc_plain:\n    prober: grpc\n    grpc:\n      tls: false\n      service: \"service1\"\n  ssh_banner:\n    prober: tcp\n    tcp:\n      query_response:\n      - expect: \"^SSH-2.0-\"\n      - send: \"SSH-2.0-blackbox-ssh-check\"\n  ssh_banner_extract:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      query_response:\n      - expect: \"^SSH-2.0-([^ -]+)(?: (.*))?$\"\n        labels:\n        - name: ssh_version\n          value: \"${1}\"\n        - name: ssh_comments\n          value: \"${2}\"\n  irc_banner:\n    prober: tcp\n    tcp:\n      query_response:\n      - send: \"NICK prober\"\n      - send: \"USER prober prober prober :prober\"\n      - expect: \"PING :([^ ]+)\"\n        send: \"PONG ${1}\"\n      - expect: \"^:[^ ]+ 001\"\n  icmp:\n    prober: icmp\n  icmp_ttl5:\n    prober: icmp\n    timeout: 5s\n    icmp:\n      ttl: 5\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "example.yml",
          "type": "blob",
          "size": 5.138671875,
          "content": "modules:\n  http_2xx_example:\n    prober: http\n    timeout: 5s\n    http:\n      valid_http_versions: [\"HTTP/1.1\", \"HTTP/2.0\"]\n      valid_status_codes: []  # Defaults to 2xx\n      method: GET\n      headers:\n        Host: vhost.example.com\n        Accept-Language: en-US\n        Origin: example.com\n      follow_redirects: true\n      fail_if_ssl: false\n      fail_if_not_ssl: false\n      fail_if_body_matches_regexp:\n        - \"Could not connect to database\"\n      fail_if_body_not_matches_regexp:\n        - \"Download the latest version here\"\n      fail_if_header_matches: # Verifies that no cookies are set\n        - header: Set-Cookie\n          allow_missing: true\n          regexp: '.*'\n      fail_if_header_not_matches:\n        - header: Access-Control-Allow-Origin\n          regexp: '(\\*|example\\.com)'\n      tls_config:\n        insecure_skip_verify: false\n      preferred_ip_protocol: \"ip4\" # defaults to \"ip6\"\n      ip_protocol_fallback: false  # no fallback to \"ip6\"\n  http_with_proxy:\n    prober: http\n    http:\n      proxy_url: \"http://127.0.0.1:3128\"\n      skip_resolve_phase_with_proxy: true\n  http_with_proxy_and_headers:\n    prober: http\n    http:\n      proxy_url: \"http://127.0.0.1:3128\"\n      proxy_connect_header:\n        Proxy-Authorization:\n          - Bearer token\n  http_post_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      method: POST\n      headers:\n        Content-Type: application/json\n      body: '{}'\n  http_post_body_file:\n    prober: http\n    timeout: 5s\n    http:\n      method: POST\n      body_file: \"/files/body.txt\"\n  http_basic_auth_example:\n    prober: http\n    timeout: 5s\n    http:\n      method: POST\n      headers:\n        Host: \"login.example.com\"\n      basic_auth:\n        username: \"username\"\n        password: \"mysecret\"\n  http_2xx_oauth_client_credentials:\n    prober: http\n    timeout: 5s\n    http:\n      valid_http_versions: [\"HTTP/1.1\", \"HTTP/2\"]\n      follow_redirects: true\n      preferred_ip_protocol: \"ip4\"\n      valid_status_codes:\n        - 200\n        - 201\n      oauth2:\n        client_id: \"client_id\"\n        client_secret: \"client_secret\"\n        token_url: \"https://api.example.com/token\"\n        endpoint_params:\n          grant_type: \"client_credentials\"\n  http_custom_ca_example:\n    prober: http\n    http:\n      method: GET\n      tls_config:\n        ca_file: \"/certs/my_cert.crt\"\n  http_gzip:\n    prober: http\n    http:\n      method: GET\n      compression: gzip\n  http_gzip_with_accept_encoding:\n    prober: http\n    http:\n      method: GET\n      compression: gzip\n      headers:\n        Accept-Encoding: gzip\n  tls_connect:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      tls: true\n  tcp_connect_example:\n    prober: tcp\n    timeout: 5s\n  imap_starttls:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      query_response:\n        - expect: \"OK.*STARTTLS\"\n        - send: \". STARTTLS\"\n        - expect: \"OK\"\n        - starttls: true\n        - send: \". capability\"\n        - expect: \"CAPABILITY IMAP4rev1\"\n  smtp_starttls:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      query_response:\n        - expect: \"^220 ([^ ]+) ESMTP (.+)$\"\n        - send: \"EHLO prober\\r\"\n        - expect: \"^250-STARTTLS\"\n        - send: \"STARTTLS\\r\"\n        - expect: \"^220\"\n        - starttls: true\n        - send: \"EHLO prober\\r\"\n        - expect: \"^250-AUTH\"\n        - send: \"QUIT\\r\"\n  irc_banner_example:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      query_response:\n        - send: \"NICK prober\"\n        - send: \"USER prober prober prober :prober\"\n        - expect: \"PING :([^ ]+)\"\n          send: \"PONG ${1}\"\n        - expect: \"^:[^ ]+ 001\"\n  rabbitmq:\n    prober: tcp\n    timeout: 30s\n    tcp:\n      query_response:\n        - send: \"HELO\\r\"\n        - send: \"\\r\"\n        - send: \"\\r\"\n        - send: \"\\r\"\n        - expect: \"AMQP\"\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n        ca_file: \"/etc/blackbox_exporter/CA_cert.crt\"\n  rabbitmq_insecure:\n    prober: tcp\n    timeout: 30s\n    tcp:\n      query_response:\n        - send: \"HELO\\r\"\n        - send: \"\\r\"\n        - send: \"\\r\"\n        - send: \"\\r\"\n        - expect: \"AMQP\"\n      tls: true\n      tls_config:\n        insecure_skip_verify: true\n        ca_file: \"/etc/blackbox_exporter/CA_cert.crt\"\n  icmp_example:\n    prober: icmp\n    timeout: 5s\n    icmp:\n      preferred_ip_protocol: \"ip4\"\n      source_ip_address: \"127.0.0.1\"\n  dns_udp_example:\n    prober: dns\n    timeout: 5s\n    dns:\n      query_name: \"www.prometheus.io\"\n      query_type: \"A\"\n      valid_rcodes:\n        - NOERROR\n      validate_answer_rrs:\n        fail_if_matches_regexp:\n          - \".*127.0.0.1\"\n        fail_if_all_match_regexp:\n          - \".*127.0.0.1\"\n        fail_if_not_matches_regexp:\n          - \"www.prometheus.io.\\t300\\tIN\\tA\\t127.0.0.1\"\n        fail_if_none_matches_regexp:\n          - \"127.0.0.1\"\n      validate_authority_rrs:\n        fail_if_matches_regexp:\n          - \".*127.0.0.1\"\n      validate_additional_rrs:\n        fail_if_matches_regexp:\n          - \".*127.0.0.1\"\n  dns_soa:\n    prober: dns\n    dns:\n      query_name: \"prometheus.io\"\n      query_type: \"SOA\"\n  dns_tcp_example:\n    prober: dns\n    dns:\n      transport_protocol: \"tcp\" # defaults to \"udp\"\n      preferred_ip_protocol: \"ip4\" # defaults to \"ip6\"\n      query_name: \"www.prometheus.io\"\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.515625,
          "content": "module github.com/prometheus/blackbox_exporter\n\ngo 1.22\n\nrequire (\n\tgithub.com/alecthomas/kingpin/v2 v2.4.0\n\tgithub.com/alecthomas/units v0.0.0-20231202071711-9a357b53e9c9\n\tgithub.com/andybalholm/brotli v1.1.1\n\tgithub.com/miekg/dns v1.1.62\n\tgithub.com/prometheus/client_golang v1.20.5\n\tgithub.com/prometheus/client_model v0.6.1\n\tgithub.com/prometheus/common v0.61.0\n\tgithub.com/prometheus/exporter-toolkit v0.13.2\n\tgolang.org/x/net v0.33.0\n\tgoogle.golang.org/grpc v1.69.2\n\tgopkg.in/yaml.v2 v2.4.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/coreos/go-systemd/v22 v22.5.0 // indirect\n\tgithub.com/jpillora/backoff v1.0.0 // indirect\n\tgithub.com/klauspost/compress v1.17.9 // indirect\n\tgithub.com/mdlayher/socket v0.4.1 // indirect\n\tgithub.com/mdlayher/vsock v1.2.1 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/xhit/go-str2duration/v2 v2.1.0 // indirect\n\tgolang.org/x/crypto v0.31.0 // indirect\n\tgolang.org/x/mod v0.18.0 // indirect\n\tgolang.org/x/oauth2 v0.24.0 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgolang.org/x/tools v0.22.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241015192408-796eee8c2d53 // indirect\n\tgoogle.golang.org/protobuf v1.35.2 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 9.328125,
          "content": "github.com/alecthomas/kingpin/v2 v2.4.0 h1:f48lwail6p8zpO1bC4TxtqACaGqHYA22qkHjHpqDjYY=\ngithub.com/alecthomas/kingpin/v2 v2.4.0/go.mod h1:0gyi0zQnjuFk8xrkNKamJoyUo382HRL7ATRpFZCw6tE=\ngithub.com/alecthomas/units v0.0.0-20231202071711-9a357b53e9c9 h1:ez/4by2iGztzR4L0zgAOR8lTQK9VlyBVVd7G4omaOQs=\ngithub.com/alecthomas/units v0.0.0-20231202071711-9a357b53e9c9/go.mod h1:OMCwj8VM1Kc9e19TLln2VL61YJF0x1XFtfdL4JdbSyE=\ngithub.com/andybalholm/brotli v1.1.1 h1:PR2pgnyFznKEugtsUo0xLdDop5SKXd5Qf5ysW+7XdTA=\ngithub.com/andybalholm/brotli v1.1.1/go.mod h1:05ib4cKhjx3OQYUY22hTVd34Bc8upXjOLL2rKwwZBoA=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=\ngithub.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/jpillora/backoff v1.0.0 h1:uvFg412JmmHBHw7iwprIxkPMI+sGQ4kzOWsMeHnm2EA=\ngithub.com/jpillora/backoff v1.0.0/go.mod h1:J/6gKK9jxlEcS3zixgDgUAsiuZ7yrSoa/FX5e0EB2j4=\ngithub.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2qeMA=\ngithub.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/mdlayher/socket v0.4.1 h1:eM9y2/jlbs1M615oshPQOHZzj6R6wMT7bX5NPiQvn2U=\ngithub.com/mdlayher/socket v0.4.1/go.mod h1:cAqeGjoufqdxWkD7DkpyS+wcefOtmu5OQ8KuoJGIReA=\ngithub.com/mdlayher/vsock v1.2.1 h1:pC1mTJTvjo1r9n9fbm7S1j04rCgCzhCOS5DY0zqHlnQ=\ngithub.com/mdlayher/vsock v1.2.1/go.mod h1:NRfCibel++DgeMD8z/hP+PPTjlNJsdPOmxcnENvE+SE=\ngithub.com/miekg/dns v1.1.62 h1:cN8OuEF1/x5Rq6Np+h1epln8OiyPWV+lROx9LxcGgIQ=\ngithub.com/miekg/dns v1.1.62/go.mod h1:mvDlcItzm+br7MToIKqkglaGhlFMHJ9DTNNWONWXbNQ=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f h1:KUppIJq7/+SVif2QVs3tOP0zanoHgBEVAwHxUSIzRqU=\ngithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=\ngithub.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.61.0 h1:3gv/GThfX0cV2lpO7gkTUwZru38mxevy90Bj8YFSRQQ=\ngithub.com/prometheus/common v0.61.0/go.mod h1:zr29OCN/2BsJRaFwG8QOBr41D6kkchKbpeNH7pAjb/s=\ngithub.com/prometheus/exporter-toolkit v0.13.2 h1:Z02fYtbqTMy2i/f+xZ+UK5jy/bl1Ex3ndzh06T/Q9DQ=\ngithub.com/prometheus/exporter-toolkit v0.13.2/go.mod h1:tCqnfx21q6qN1KA4U3Bfb8uWzXfijIrJz3/kTIqMV7g=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=\ngithub.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/xhit/go-str2duration/v2 v2.1.0 h1:lxklc02Drh6ynqX+DdPyp5pCKLUQpRT8bp8Ydu2Bstc=\ngithub.com/xhit/go-str2duration/v2 v2.1.0/go.mod h1:ohY8p+0f07DiV6Em5LKB0s2YpLtXVyJfNt1+BlmyAsU=\ngithub.com/xyproto/randomstring v1.0.5 h1:YtlWPoRdgMu3NZtP45drfy1GKoojuR7hmRcnhZqKjWU=\ngithub.com/xyproto/randomstring v1.0.5/go.mod h1:rgmS5DeNXLivK7YprL0pY+lTuhNQW3iGxZ18UQApw/E=\ngo.opentelemetry.io/otel v1.31.0 h1:NsJcKPIW0D0H3NgzPDHmo0WW6SptzPdqg/L1zsIm2hY=\ngo.opentelemetry.io/otel v1.31.0/go.mod h1:O0C14Yl9FgkjqcCZAsE053C13OaddMYr/hz6clDkEJE=\ngo.opentelemetry.io/otel/metric v1.31.0 h1:FSErL0ATQAmYHUIzSezZibnyVlft1ybhy4ozRPcF2fE=\ngo.opentelemetry.io/otel/metric v1.31.0/go.mod h1:C3dEloVbLuYoX41KpmAhOqNriGbA+qqH6PQ5E5mUfnY=\ngo.opentelemetry.io/otel/sdk v1.31.0 h1:xLY3abVHYZ5HSfOg3l2E5LUj2Cwva5Y7yGxnSW9H5Gk=\ngo.opentelemetry.io/otel/sdk v1.31.0/go.mod h1:TfRbMdhvxIIr/B2N2LQW2S5v9m3gOQ/08KsbbO5BPT0=\ngo.opentelemetry.io/otel/sdk/metric v1.31.0 h1:i9hxxLJF/9kkvfHppyLL55aW7iIJz4JjxTeYusH7zMc=\ngo.opentelemetry.io/otel/sdk/metric v1.31.0/go.mod h1:CRInTMVvNhUKgSAMbKyTMxqOBC0zgyxzW55lZzX43Y8=\ngo.opentelemetry.io/otel/trace v1.31.0 h1:ffjsj1aRouKewfr85U2aGagJ46+MvodynlQ1HYdmJys=\ngo.opentelemetry.io/otel/trace v1.31.0/go.mod h1:TXZkRk7SM2ZQLtR6eoAWQFIHPvzQ06FJAsO1tJg480A=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/mod v0.18.0 h1:5+9lSbEzPSdWkH32vYPBwEpX8KwDbM52Ud9xBUvNlb0=\ngolang.org/x/mod v0.18.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/tools v0.22.0 h1:gqSGLZqv+AI9lIQzniJ0nZDRG5GBPsSi+DRNHWNz6yA=\ngolang.org/x/tools v0.22.0/go.mod h1:aCwcsjqvq7Yqt6TNyX7QMU2enbQ/Gt0bo6krSeEri+c=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241015192408-796eee8c2d53 h1:X58yt85/IXCx0Y3ZwN6sEIKZzQtDEYaBWrDvErdXrRE=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241015192408-796eee8c2d53/go.mod h1:GX3210XPVPUjJbTUbvwI8f2IpZDMZuPJWDzDuebbviI=\ngoogle.golang.org/grpc v1.69.2 h1:U3S9QEtbXC0bYNvRtcoklF3xGtLViumSYxWykJS+7AU=\ngoogle.golang.org/grpc v1.69.2/go.mod h1:vyjdE6jLBI76dgpDojsFGNaHlxdjXN9ghpnd2o7JGZ4=\ngoogle.golang.org/protobuf v1.35.2 h1:8Ar7bF+apOIoThw1EdZl0p1oWvMqTHmpA2fRTyZO8io=\ngoogle.golang.org/protobuf v1.35.2/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 10.3466796875,
          "content": "// Copyright 2016 The Prometheus Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"html\"\n\t\"net\"\n\t\"net/http\"\n\t_ \"net/http/pprof\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"path\"\n\t\"strconv\"\n\t\"strings\"\n\t\"syscall\"\n\n\t\"github.com/alecthomas/kingpin/v2\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\tversioncollector \"github.com/prometheus/client_golang/prometheus/collectors/version\"\n\t\"github.com/prometheus/client_golang/prometheus/promauto\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"github.com/prometheus/common/promslog\"\n\t\"github.com/prometheus/common/promslog/flag\"\n\t\"github.com/prometheus/common/version\"\n\t\"github.com/prometheus/exporter-toolkit/web\"\n\twebflag \"github.com/prometheus/exporter-toolkit/web/kingpinflag\"\n\t\"gopkg.in/yaml.v3\"\n\n\t\"github.com/prometheus/blackbox_exporter/config\"\n\t\"github.com/prometheus/blackbox_exporter/prober\"\n)\n\nvar (\n\tsc = config.NewSafeConfig(prometheus.DefaultRegisterer)\n\n\tconfigFile     = kingpin.Flag(\"config.file\", \"Blackbox exporter configuration file.\").Default(\"blackbox.yml\").String()\n\ttimeoutOffset  = kingpin.Flag(\"timeout-offset\", \"Offset to subtract from timeout in seconds.\").Default(\"0.5\").Float64()\n\tconfigCheck    = kingpin.Flag(\"config.check\", \"If true validate the config file and then exit.\").Default().Bool()\n\tlogLevelProber = kingpin.Flag(\"log.prober\", \"Log level from probe requests. One of: [debug, info, warn, error]\").Default(\"info\").String()\n\thistoryLimit   = kingpin.Flag(\"history.limit\", \"The maximum amount of items to keep in the history.\").Default(\"100\").Uint()\n\texternalURL    = kingpin.Flag(\"web.external-url\", \"The URL under which Blackbox exporter is externally reachable (for example, if Blackbox exporter is served via a reverse proxy). Used for generating relative and absolute links back to Blackbox exporter itself. If the URL has a path portion, it will be used to prefix all HTTP endpoints served by Blackbox exporter. If omitted, relevant URL components will be derived automatically.\").PlaceHolder(\"<url>\").String()\n\troutePrefix    = kingpin.Flag(\"web.route-prefix\", \"Prefix for the internal routes of web endpoints. Defaults to path of --web.external-url.\").PlaceHolder(\"<path>\").String()\n\ttoolkitFlags   = webflag.AddFlags(kingpin.CommandLine, \":9115\")\n\n\tmoduleUnknownCounter = promauto.NewCounter(prometheus.CounterOpts{\n\t\tName: \"blackbox_module_unknown_total\",\n\t\tHelp: \"Count of unknown modules requested by probes\",\n\t})\n)\n\nfunc init() {\n\tprometheus.MustRegister(versioncollector.NewCollector(\"blackbox_exporter\"))\n}\n\nfunc main() {\n\tos.Exit(run())\n}\n\nfunc run() int {\n\tkingpin.CommandLine.UsageWriter(os.Stdout)\n\tpromslogConfig := &promslog.Config{}\n\tflag.AddFlags(kingpin.CommandLine, promslogConfig)\n\tkingpin.Version(version.Print(\"blackbox_exporter\"))\n\tkingpin.HelpFlag.Short('h')\n\tkingpin.Parse()\n\tlogger := promslog.New(promslogConfig)\n\trh := &prober.ResultHistory{MaxResults: *historyLimit}\n\n\tallowedLevel := &promslog.AllowedLevel{}\n\t_ = allowedLevel.Set(*logLevelProber)\n\n\tlogger.Info(\"Starting blackbox_exporter\", \"version\", version.Info())\n\tlogger.Info(version.BuildContext())\n\n\tif err := sc.ReloadConfig(*configFile, logger); err != nil {\n\t\tlogger.Error(\"Error loading config\", \"err\", err)\n\t\treturn 1\n\t}\n\n\tif *configCheck {\n\t\tlogger.Info(\"Config file is ok exiting...\")\n\t\treturn 0\n\t}\n\n\tlogger.Info(\"Loaded config file\")\n\n\t// Infer or set Blackbox exporter externalURL\n\tlistenAddrs := toolkitFlags.WebListenAddresses\n\tif *externalURL == \"\" && *toolkitFlags.WebSystemdSocket {\n\t\tlogger.Error(\"Cannot automatically infer external URL with systemd socket listener. Please provide --web.external-url\")\n\t\treturn 1\n\t} else if *externalURL == \"\" && len(*listenAddrs) > 1 {\n\t\tlogger.Info(\"Inferring external URL from first provided listen address\")\n\t}\n\tbeURL, err := computeExternalURL(*externalURL, (*listenAddrs)[0])\n\tif err != nil {\n\t\tlogger.Error(\"failed to determine external URL\", \"err\", err)\n\t\treturn 1\n\t}\n\tlogger.Debug(beURL.String())\n\n\t// Default -web.route-prefix to path of -web.external-url.\n\tif *routePrefix == \"\" {\n\t\t*routePrefix = beURL.Path\n\t}\n\n\t// routePrefix must always be at least '/'.\n\t*routePrefix = \"/\" + strings.Trim(*routePrefix, \"/\")\n\t// routePrefix requires path to have trailing \"/\" in order\n\t// for browsers to interpret the path-relative path correctly, instead of stripping it.\n\tif *routePrefix != \"/\" {\n\t\t*routePrefix = *routePrefix + \"/\"\n\t}\n\tlogger.Debug(*routePrefix)\n\n\thup := make(chan os.Signal, 1)\n\treloadCh := make(chan chan error)\n\tsignal.Notify(hup, syscall.SIGHUP)\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-hup:\n\t\t\t\tif err := sc.ReloadConfig(*configFile, logger); err != nil {\n\t\t\t\t\tlogger.Error(\"Error reloading config\", \"err\", err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tlogger.Info(\"Reloaded config file\")\n\t\t\tcase rc := <-reloadCh:\n\t\t\t\tif err := sc.ReloadConfig(*configFile, logger); err != nil {\n\t\t\t\t\tlogger.Error(\"Error reloading config\", \"err\", err)\n\t\t\t\t\trc <- err\n\t\t\t\t} else {\n\t\t\t\t\tlogger.Info(\"Reloaded config file\")\n\t\t\t\t\trc <- nil\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\t// Match Prometheus behavior and redirect over externalURL for root path only\n\t// if routePrefix is different than \"/\"\n\tif *routePrefix != \"/\" {\n\t\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.URL.Path != \"/\" {\n\t\t\t\thttp.NotFound(w, r)\n\t\t\t\treturn\n\t\t\t}\n\t\t\thttp.Redirect(w, r, beURL.String(), http.StatusFound)\n\t\t})\n\t}\n\n\thttp.HandleFunc(path.Join(*routePrefix, \"/-/reload\"),\n\t\tfunc(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Method != \"POST\" {\n\t\t\t\tw.WriteHeader(http.StatusMethodNotAllowed)\n\t\t\t\tfmt.Fprintf(w, \"This endpoint requires a POST request.\\n\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\trc := make(chan error)\n\t\t\treloadCh <- rc\n\t\t\tif err := <-rc; err != nil {\n\t\t\t\thttp.Error(w, fmt.Sprintf(\"failed to reload config: %s\", err), http.StatusInternalServerError)\n\t\t\t}\n\t\t})\n\thttp.Handle(path.Join(*routePrefix, \"/metrics\"), promhttp.Handler())\n\thttp.HandleFunc(path.Join(*routePrefix, \"/-/healthy\"), func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"Healthy\"))\n\t})\n\thttp.HandleFunc(path.Join(*routePrefix, \"/probe\"), func(w http.ResponseWriter, r *http.Request) {\n\t\tsc.Lock()\n\t\tconf := sc.C\n\t\tsc.Unlock()\n\t\tprober.Handler(w, r, conf, logger, rh, *timeoutOffset, nil, moduleUnknownCounter, allowedLevel)\n\t})\n\thttp.HandleFunc(*routePrefix, func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\tw.Write([]byte(`<html>\n    <head><title>Blackbox Exporter</title></head>\n    <body>\n    <h1>Blackbox Exporter</h1>\n    <p><a href=\"probe?target=prometheus.io&module=http_2xx\">Probe prometheus.io for http_2xx</a></p>\n    <p><a href=\"probe?target=prometheus.io&module=http_2xx&debug=true\">Debug probe prometheus.io for http_2xx</a></p>\n    <p><a href=\"metrics\">Metrics</a></p>\n    <p><a href=\"config\">Configuration</a></p>\n    <h2>Recent Probes</h2>\n    <table border='1'><tr><th>Module</th><th>Target</th><th>Result</th><th>Debug</th>`))\n\n\t\tresults := rh.List()\n\n\t\tfor i := len(results) - 1; i >= 0; i-- {\n\t\t\tr := results[i]\n\t\t\tsuccess := \"Success\"\n\t\t\tif !r.Success {\n\t\t\t\tsuccess = \"<strong>Failure</strong>\"\n\t\t\t}\n\t\t\tfmt.Fprintf(w, \"<tr><td>%s</td><td>%s</td><td>%s</td><td><a href='logs?id=%d'>Logs</a></td></td>\",\n\t\t\t\thtml.EscapeString(r.ModuleName), html.EscapeString(r.Target), success, r.Id)\n\t\t}\n\n\t\tw.Write([]byte(`</table></body>\n    </html>`))\n\t})\n\n\thttp.HandleFunc(path.Join(*routePrefix, \"/logs\"), func(w http.ResponseWriter, r *http.Request) {\n\t\tid, err := strconv.ParseInt(r.URL.Query().Get(\"id\"), 10, 64)\n\t\tif err != nil {\n\t\t\tid = -1\n\t\t}\n\t\ttarget := r.URL.Query().Get(\"target\")\n\t\tif err == nil && target != \"\" {\n\t\t\thttp.Error(w, \"Probe id and target can't be defined at the same time\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tif id == -1 && target == \"\" {\n\t\t\thttp.Error(w, \"Probe id or target must be defined as http query parameters\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tresult := new(prober.Result)\n\t\tif target != \"\" {\n\t\t\tresult = rh.GetByTarget(target)\n\t\t\tif result == nil {\n\t\t\t\thttp.Error(w, \"Probe target not found\", http.StatusNotFound)\n\t\t\t\treturn\n\t\t\t}\n\t\t} else {\n\t\t\tresult = rh.GetById(id)\n\t\t\tif result == nil {\n\t\t\t\thttp.Error(w, \"Probe id not found\", http.StatusNotFound)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tw.Write([]byte(result.DebugOutput))\n\t})\n\n\thttp.HandleFunc(path.Join(*routePrefix, \"/config\"), func(w http.ResponseWriter, r *http.Request) {\n\t\tsc.RLock()\n\t\tc, err := yaml.Marshal(sc.C)\n\t\tsc.RUnlock()\n\t\tif err != nil {\n\t\t\tlogger.Warn(\"Error marshalling configuration\", \"err\", err)\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tw.Write(c)\n\t})\n\n\tsrv := &http.Server{}\n\tsrvc := make(chan struct{})\n\tterm := make(chan os.Signal, 1)\n\tsignal.Notify(term, os.Interrupt, syscall.SIGTERM)\n\n\tgo func() {\n\t\tif err := web.ListenAndServe(srv, toolkitFlags, logger); err != nil {\n\t\t\tlogger.Error(\"Error starting HTTP server\", \"err\", err)\n\t\t\tclose(srvc)\n\t\t}\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-term:\n\t\t\tlogger.Info(\"Received SIGTERM, exiting gracefully...\")\n\t\t\treturn 0\n\t\tcase <-srvc:\n\t\t\treturn 1\n\t\t}\n\t}\n\n}\n\nfunc startsOrEndsWithQuote(s string) bool {\n\treturn strings.HasPrefix(s, \"\\\"\") || strings.HasPrefix(s, \"'\") ||\n\t\tstrings.HasSuffix(s, \"\\\"\") || strings.HasSuffix(s, \"'\")\n}\n\n// computeExternalURL computes a sanitized external URL from a raw input. It infers unset\n// URL parts from the OS and the given listen address.\nfunc computeExternalURL(u, listenAddr string) (*url.URL, error) {\n\tif u == \"\" {\n\t\thostname, err := os.Hostname()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t_, port, err := net.SplitHostPort(listenAddr)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tu = fmt.Sprintf(\"http://%s:%s/\", hostname, port)\n\t}\n\n\tif startsOrEndsWithQuote(u) {\n\t\treturn nil, errors.New(\"URL must not begin or end with quotes\")\n\t}\n\n\teu, err := url.Parse(u)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tppref := strings.TrimRight(eu.Path, \"/\")\n\tif ppref != \"\" && !strings.HasPrefix(ppref, \"/\") {\n\t\tppref = \"/\" + ppref\n\t}\n\teu.Path = ppref\n\n\treturn eu, nil\n}\n"
        },
        {
          "name": "main_test.go",
          "type": "blob",
          "size": 1.4619140625,
          "content": "// Copyright 2016 The Prometheus Authors\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage main\n\nimport \"testing\"\n\nfunc TestComputeExternalURL(t *testing.T) {\n\ttests := []struct {\n\t\tinput string\n\t\tvalid bool\n\t}{\n\t\t{\n\t\t\tinput: \"\",\n\t\t\tvalid: true,\n\t\t},\n\t\t{\n\t\t\tinput: \"http://proxy.com/prometheus\",\n\t\t\tvalid: true,\n\t\t},\n\t\t{\n\t\t\tinput: \"'https://url/prometheus'\",\n\t\t\tvalid: false,\n\t\t},\n\t\t{\n\t\t\tinput: \"'relative/path/with/quotes'\",\n\t\t\tvalid: false,\n\t\t},\n\t\t{\n\t\t\tinput: \"http://alertmanager.company.com\",\n\t\t\tvalid: true,\n\t\t},\n\t\t{\n\t\t\tinput: \"https://double--dash.de\",\n\t\t\tvalid: true,\n\t\t},\n\t\t{\n\t\t\tinput: \"'http://starts/with/quote\",\n\t\t\tvalid: false,\n\t\t},\n\t\t{\n\t\t\tinput: \"ends/with/quote\\\"\",\n\t\t\tvalid: false,\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\t_, err := computeExternalURL(test.input, \"0.0.0.0:9090\")\n\t\tif test.valid {\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"unexpected error %v\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tif err == nil {\n\t\t\t\tt.Errorf(\"expected error computing %s got none\", test.input)\n\t\t\t}\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "prober",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}