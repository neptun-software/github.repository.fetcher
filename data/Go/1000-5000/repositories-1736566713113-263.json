{
  "metadata": {
    "timestamp": 1736566713113,
    "page": 263,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "geektutu/high-performance-go",
      "stars": 3824,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": ".DS_Store"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2020 Dai Jie\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.703125,
          "content": "# Go 语言高性能编程\n\n[![high performance with go](charpter-0/high-performance-go/high-performance-go.jpg)](https://geektutu.com/post/high-performance-go.html)\n\n## 订阅\n\n最新动态可以关注：知乎 [Go语言](https://www.zhihu.com/people/gzdaijie) 或微博 [极客兔兔](https://weibo.com/geektutu)\n\n订阅方式：**watch** [geektutu/blog](https://github.com/geektutu/blog) ，每篇文章都能收到邮件通知，或通过 [RSS](https://geektutu.com/feed.xml) 订阅。\n\n## 目录\n\n- 序言\n    - [关于本书](https://geektutu.com/post/high-performance-go.html)\n\n- 第一章 性能分析\n    - [benchmark 基准测试](https://geektutu.com/post/hpg-benchmark.html)\n    - [pprof 性能分析](https://geektutu.com/post/hpg-pprof.html)\n\n- 第二章 常用数据结构\n    - [字符串拼接性能及原理](https://geektutu.com/post/hpg-string-concat.html)\n    - [切片(slice)性能及陷阱](https://geektutu.com/post/hpg-slice.html)\n    - [for 和 range 的性能比较](https://geektutu.com/post/hpg-range.html)\n    - [反射(reflect)性能](https://geektutu.com/post/hpg-reflect.html)\n    - [使用空结构体节省内存](https://geektutu.com/post/hpg-empty-struct.html)\n    - [内存对齐对性能的影响](https://geektutu.com/post/hpg-struct-alignment.html)\n\n- 第三章 并发编程\n    - [读写锁和互斥锁的性能比较](https://geektutu.com/post/hpg-mutex.html)\n    - [如何退出协程(超时场景)](https://geektutu.com/post/hpg-timeout-goroutine.html)\n    - [如何退出协程(其他场景)](https://geektutu.com/post/hpg-exit-goroutine.html)\n    - [控制协程的并发数量](https://geektutu.com/post/hpg-concurrency-control.html)\n    - [sync.Pool 复用对象](https://geektutu.com/post/hpg-sync-pool.html)\n    - [sync.Once 如何提升性能](https://geektutu.com/post/hpg-sync-once.html)\n    - [sync.Cond 条件变量](https://geektutu.com/post/hpg-sync-cond.html)\n\n- 第四章 编译优化\n    - [减小编译体积](https://geektutu.com/post/hpg-reduce-size.html)\n    - [逃逸分析对性能的影响](https://geektutu.com/post/hpg-escape-analysis.html)\n    - [死码消除与调试模式](https://geektutu.com/post/hpg-dead-code-elimination.html)\n\n- 附录 Go 语言陷阱\n    - [数组和切片](https://geektutu.com/post/hpg-gotchas-array-slice.html)\n\n## 基础入门\n\n- [Go 语言简明教程](https://geektutu.com/post/quick-golang.html)\n- [Go Test 单元测试简明教程](https://geektutu.com/post/quick-go-test.html)\n- [Go Protobuf 简明教程](https://geektutu.com/post/quick-go-protobuf.html)\n- [Go RPC & TLS 鉴权简明教程](https://geektutu.com/post/quick-go-rpc.html)\n- [Go Mock (gomock)简明教程](https://geektutu.com/post/quick-gomock.html)\n- [Go Mmap 文件内存映射简明教程](https://geektutu.com/post/quick-go-mmap.html)\n- [Go Context 并发编程简明教程](https://geektutu.com/post/quick-go-context.html)\n- [Go WebAssembly (Wasm) 简明教程](https://geektutu.com/post/quick-go-wasm.html)\n- [Go Gin 简明教程](https://geektutu.com/post/quick-go-gin.html)\n\n## 进阶系列\n\n- [七天用Go从零实现系列](https://geektutu.com/post/gee.html)\n    - [Web框架Gee](https://geektutu.com/post/gee.html)\n    - [分布式缓存GeeCache](https://geektutu.com/post/geecache.html)\n    - [ORM框架GeeORM](https://geektutu.com/post/geeorm.html)\n    - [RPC框架GeeRPC](https://geektutu.com/post/geerpc.html)\n    - [项目地址](https://github.com/geektutu/7days-golang)\n- [Go 语言笔试面试题](https://geektutu.com/post/qa-golang.html)\n    - [基础语法](https://geektutu.com/post/qa-golang-1.html)\n    - [实现原理](https://geektutu.com/post/qa-golang-2.html)\n    - [并发编程](https://geektutu.com/post/qa-golang-3.html)\n    - [代码输出](https://geektutu.com/post/qa-golang-c1.html)\n"
        },
        {
          "name": "charpter-0",
          "type": "tree",
          "content": null
        },
        {
          "name": "charpter-1",
          "type": "tree",
          "content": null
        },
        {
          "name": "charpter-2",
          "type": "tree",
          "content": null
        },
        {
          "name": "charpter-3",
          "type": "tree",
          "content": null
        },
        {
          "name": "charpter-4",
          "type": "tree",
          "content": null
        },
        {
          "name": "charpter-a1",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}