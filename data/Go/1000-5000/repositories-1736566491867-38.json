{
  "metadata": {
    "timestamp": 1736566491867,
    "page": 38,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ServiceWeaver/weaver",
      "stars": 4811,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2626953125,
          "content": "cmd/weaver/weaver\nexamples/bankofanthos/bankofanthos\nexamples/chat/chat\nexamples/collatz/collatz\nexamples/factors/factors\nexamples/hello/hello\nexamples/helloworld/helloworld\nwebsite/public/\n\n# Binaries produced by [go test] when passed -c or a profiling option.\n*.test\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.58984375,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project.\n\n## Before you begin\n\n### Sign our Contributor License Agreement\n\nContributions to this project must be accompanied by a\n[Contributor License Agreement][cla] (CLA). You (or your employer) retain the\ncopyright to your contribution; this simply gives us permission to use and\nredistribute your contributions as part of the project.\n\nIf you or your current employer have already signed the Google CLA (even if it\nwas for a different project), you probably don't need to do it again.\n\nVisit <https://cla.developers.google.com/> to see your current agreements or to\nsign a new one.\n\n### Review our Community Guidelines\n\nThis project follows [Google's Open Source Community\nGuidelines](https://opensource.google/conduct/).\n\n## Contribution process\n\nWe follow the [fork and branch workflow][workflow].\n\nThere will be three Git repositories involved:\n\n1.  *upstream* - the ServiceWeaver repository on GitHub.\n2.  *origin* - your GitHub fork of `upstream`. This repository\n    will typically be at a URL that looks like `github.com/_your_user_name_/weaver`\n3.  *local* - your local clone of `origin`\n\n### First time setup\n\nFollow these steps to get ready for making changes to ServiceWeaver.  These\nsteps are only needed once and not for subsequent changes you might want to\nmake:\n\n1.  Fork the `ServiceWeaver` repository on GitHub to create `origin`.\n    Visit [ServiceWeaver][github_weaver] GitHub repository and click the `Fork` button.\n\n2.  Make a `local` clone of your fork.\n\n    ```shell\n    git clone git@github.com:_your_user_name_/weaver.git\n    ```\n\n3.  Add a remote pointing from `local` to `upstream`.\n\n    ```shell\n    cd weaver\n    git remote add upstream git@github.com:ServiceWeaver/weaver.git\n    ```\n### Making changes\n\nHere is a detailed outline of the steps needed to make changes to Service\nWeaver.\n\n\n1. Make a local branch in your clone and pull any recent changes into it.\n\n   ```shell\n   git switch -c my_branch  # Pick a name appropriate to your work\n   git pull upstream main\n   ```\n\n2. Make changes and commit to local branch.\n\n   ```shell\n   # ... editing, testing, ... \n   git commit ...\n   ```\n\n3. Pull any changes that may have been made in the upstream repository\n   main branch.\n\n   ```shell\n   git switch my_branch\n   git pull --rebase upstream main\n   ```\n\n   Note that this command may result in merge conflicts. Fix those if\n   needed.\n\n4. Push your branch to the corresponding branch in your fork (the `origin` repository).\n\n   ```shell\n   git switch my_branch\n   git push origin my_branch\n   ```\n\n5. Select the branch you are working on in the drop-down menu of branches on\n   https://github.com/_your_user_name_/weaver . Then hit the `Compare and pull\n   request` button.\n\n6. Respond to feedback, which may involve making new commits.\n   If you made any changes, push them to github again.\n\n   ```shell\n   git switch my_branch\n   git push origin my_branch\n   ```\n\n   Repeat as necessary until all feedback has been handled.\n\n   Note: the preceding approach will cause the pull request to become a sequence\n   of commits. Some people like to keep just a single commit that is amended as\n   changes are made. If you are amending commits that had already been pushed,\n   you will have to add `--force` to the `git push` command above.\n\n7. Once reviewers are happy, pull any main branch changes that may\n   have happened since step 3.\n   \n    ```shell\n    git switch my_branch\n    git pull --rebase upstream main\n    ```\n\n    If some changes were pulled, push again to the PR, but this time you will\n    need to force push since the rebase above will have rewritten your commits.\n\n    ```shell\n    git switch my_branch\n    git push --force origin my_branch\n    ```\n\n8.  Ask somebody who has permissions (or do it yourself if you\n    have permissions) to merge your branch into the main branch\n    of the `upstream` repository. The reviewer may do this without\n    being asked.\n\n    Select the `Squash and merge` option on https://github.com/ServiceWeaver/weaver\n    or use the command line instructions found on that page. Edit the commit message\n    as appropriate for the squashed commit.\n\n9.  Delete the branch from `origin`:\n\n    ```\n    git push origin --delete my_branch\n    ```\n\n10. Delete the branch from `local`\n\n    ```\n    git switch main\n    git branch -D my_branch\n    ```\n\n### Code Reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult [GitHub Help][github_help]\nfor more information on using pull requests.\n\nTo make sure changes are well coordinated, we ask you to discuss any significant\nchange prior to sending a pull request. To do so, either file a\n[new issue][new_issue] or claim an [existing one][issues].\n\n## What to contribute to?\n\nHere are the current areas where the community contributions would be most\nvaluable:\n\n* Implement deployers for platforms other than local, SSH, and GKE.\n* Bug fixes for the existing libraries.\n* Non-Go language support. (Note: please reach out to us on our\n  [google_group][Google Group], to coordinate development. We will likely\n  require a fair bit of API and language-integration design discussion before\n  the implementation starts.)\n\n[cla]: https://cla.developers.google.com/about\n[github_help]: https://help.github.com/articles/about-pull-requests/\n[github_weaver]: https://github.com/ServiceWeaver/weaver\n[google_group]: https://groups.google.com/g/serviceweaver\n[issues]: https://github.com/ServiceWeaver/weaver/issues\n[new_issue]: https://github.com/ServiceWeaver/weaver/issues/new\n[workflow]: https://www.google.com/search?q=github+fork+and+branch+workflow\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.0205078125,
          "content": "# Service Weaver [![Go Reference](https://pkg.go.dev/badge/github.com/ServiceWeaver/weaver.svg)](https://pkg.go.dev/github.com/ServiceWeaver/weaver)\n\n## 🚨 Important Announcement\n\n> **Service Weaver** began as an exploratory initiative to understand the challenges of developing, deploying, and maintaining distributed applications. We were excited by the strong interest from the developer community, which led us to open-source the project.\n>\n> We greatly appreciate the continued advocacy and support of the Service Weaver community. However, we realized that it was hard for users to adopt Service Weaver directly since it required rewriting large parts of existing applications. Therefore, Service Weaver did not see much direct use, and **effective December 5, 2024**, we will transition Service Weaver into maintenance mode. After this date, for the next 6 months, we will only push critical commits to the GitHub repository, respond to critical issues, merge critical pull requests, and patch new releases. We recommend that users fork the repository and report any issues preventing them from maintaining a stable version of the code.\n>\n> **On June 6, 2025**, we plan to permanently freeze and archive the GitHub repository, after which no new commits or releases will be made.\n\nService Weaver is a programming framework for writing, deploying, and managing\ndistributed applications. You can run, test, and debug a Service Weaver\napplication locally on your machine, and then deploy it to the\ncloud with a single command.\n\n```bash\n$ go run .                      # Run locally.\n$ weaver gke deploy weaver.toml # Run in the cloud.\n```\n\nVisit [https://serviceweaver.dev][website] to learn more about Service Weaver.\n\n## Installation and Getting Started\n\nVisit [https://serviceweaver.dev/docs.html][docs] for installation\ninstructions and information on getting started.\n\n## Contributing\n\nPlease read our [contribution guide](./CONTRIBUTING.md) for details on how\nto contribute.\n\n[website]: https://serviceweaver.dev\n[docs]: https://serviceweaver.dev/docs.html\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "deployerControl.go",
          "type": "blob",
          "size": 3.7568359375,
          "content": "// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage weaver\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/ServiceWeaver/weaver/internal/control\"\n\t\"github.com/ServiceWeaver/weaver/runtime/colors\"\n\t\"github.com/ServiceWeaver/weaver/runtime/logging\"\n\t\"github.com/ServiceWeaver/weaver/runtime/protos\"\n)\n\n// deployerControl is a component hosted in every deployer. Weavelets make calls to this\n// component to interact with the deployer.\ntype deployerControl control.DeployerControl\n\n// localDeployerControl is the implementation of deployerControl for local execution. It is\n// overridden by remote deployers.\ntype localDeployerControl struct {\n\tImplements[deployerControl]\n\tpp *logging.PrettyPrinter\n}\n\nvar _ deployerControl = &localDeployerControl{}\n\n// Init initializes the local deployerControl component.\nfunc (local *localDeployerControl) Init(ctx context.Context) error {\n\tlocal.pp = logging.NewPrettyPrinter(colors.Enabled())\n\treturn nil\n}\n\n// LogBatch implements the control.DeployerControl interface.\nfunc (local *localDeployerControl) LogBatch(ctx context.Context, batch *protos.LogEntryBatch) error {\n\tfor _, entry := range batch.Entries {\n\t\tfmt.Fprintln(os.Stderr, local.pp.Format(entry))\n\t}\n\treturn nil\n}\n\n// HandleTraceSpans implements the control.DeployerControl interface.\nfunc (local *localDeployerControl) HandleTraceSpans(ctx context.Context, spans *protos.TraceSpans) error {\n\treturn fmt.Errorf(\"localDeployerControl.HandleTraceSpans not implemented\")\n}\n\n// ActivateComponent implements the control.DeployerControl interface.\nfunc (*localDeployerControl) ActivateComponent(context.Context, *protos.ActivateComponentRequest) (*protos.ActivateComponentReply, error) {\n\treturn nil, fmt.Errorf(\"localDeployerControl.ActivateComponent not implemented\")\n}\n\n// GetListenerAddress implements the control.DeployerControl interface.\nfunc (*localDeployerControl) GetListenerAddress(context.Context, *protos.GetListenerAddressRequest) (*protos.GetListenerAddressReply, error) {\n\treturn nil, fmt.Errorf(\"localDeployerControl.GetListenerAddress not implemented\")\n}\n\n// ExportListener implements the control.DeployerControl interface.\nfunc (*localDeployerControl) ExportListener(context.Context, *protos.ExportListenerRequest) (*protos.ExportListenerReply, error) {\n\treturn nil, fmt.Errorf(\"localDeployerControl.ExportListener not implemented\")\n}\n\n// GetSelfCertificate implements the control.DeployerControl interface.\nfunc (*localDeployerControl) GetSelfCertificate(context.Context, *protos.GetSelfCertificateRequest) (*protos.GetSelfCertificateReply, error) {\n\treturn nil, fmt.Errorf(\"localDeployerControl.GetSelfCertificate not implemented\")\n}\n\n// VerifyClientCertificate implements the control.DeployerControl interface.\nfunc (*localDeployerControl) VerifyClientCertificate(context.Context, *protos.VerifyClientCertificateRequest) (*protos.VerifyClientCertificateReply, error) {\n\treturn nil, fmt.Errorf(\"localDeployerControl.VerifyClientCertificate not implemented\")\n}\n\n// VerifyServerCertificate implements the control.DeployerControl interface.\nfunc (*localDeployerControl) VerifyServerCertificate(context.Context, *protos.VerifyServerCertificateRequest) (*protos.VerifyServerCertificateReply, error) {\n\treturn nil, fmt.Errorf(\"localDeployerControl.VerifyServerCertificate not implemented\")\n}\n"
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fill.go",
          "type": "blob",
          "size": 4.6123046875,
          "content": "// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage weaver\n\nimport (\n\t\"fmt\"\n\t\"log/slog\"\n\t\"net\"\n\t\"reflect\"\n\n\t\"github.com/ServiceWeaver/weaver/internal/reflection\"\n\t\"github.com/ServiceWeaver/weaver/internal/weaver\"\n)\n\nfunc init() {\n\t// See internal/weaver/types.go.\n\tweaver.SetLogger = setLogger\n\tweaver.SetWeaverInfo = setWeaverInfo\n\tweaver.HasRefs = hasRefs\n\tweaver.FillRefs = fillRefs\n\tweaver.HasListeners = hasListeners\n\tweaver.FillListeners = fillListeners\n\tweaver.HasConfig = hasConfig\n\tweaver.GetConfig = getConfig\n}\n\n// See internal/weaver/types.go.\nfunc setLogger(v any, logger *slog.Logger) error {\n\tx, ok := v.(interface{ setLogger(*slog.Logger) })\n\tif !ok {\n\t\treturn fmt.Errorf(\"setLogger: %T does not implement weaver.Implements\", v)\n\t}\n\tx.setLogger(logger)\n\treturn nil\n}\n\n// See internal/weaver/types.go.\nfunc setWeaverInfo(impl any, info *weaver.WeaverInfo) error {\n\tx, ok := impl.(interface{ setWeaverInfo(*weaver.WeaverInfo) })\n\tif !ok {\n\t\treturn fmt.Errorf(\"setWeaverInfo: %T does not implement weaver.Implements\", impl)\n\t}\n\tx.setWeaverInfo(info)\n\treturn nil\n}\n\n// See internal/weaver/types.go.\nfunc hasRefs(impl any) bool {\n\tp := reflect.ValueOf(impl)\n\tif p.Kind() != reflect.Pointer {\n\t\treturn false\n\t}\n\ts := p.Elem()\n\tif s.Kind() != reflect.Struct {\n\t\treturn false\n\t}\n\n\tfor i, n := 0, s.NumField(); i < n; i++ {\n\t\tf := s.Field(i)\n\t\tif !f.CanAddr() {\n\t\t\tcontinue\n\t\t}\n\t\tp := reflect.NewAt(f.Type(), f.Addr().UnsafePointer()).Interface()\n\t\tif _, ok := p.(interface{ isRef() }); ok {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// See internal/weaver/types.go.\nfunc fillRefs(impl any, get func(reflect.Type) (any, error)) error {\n\tp := reflect.ValueOf(impl)\n\tif p.Kind() != reflect.Pointer {\n\t\treturn fmt.Errorf(\"FillRefs: %T not a pointer\", impl)\n\t}\n\ts := p.Elem()\n\tif s.Kind() != reflect.Struct {\n\t\treturn fmt.Errorf(\"FillRefs: %T not a struct pointer\", impl)\n\t}\n\n\tfor i, n := 0, s.NumField(); i < n; i++ {\n\t\tf := s.Field(i)\n\t\tif !f.CanAddr() {\n\t\t\tcontinue\n\t\t}\n\t\tp := reflect.NewAt(f.Type(), f.Addr().UnsafePointer()).Interface()\n\t\tx, ok := p.(interface{ setRef(any) })\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Set the component.\n\t\tvalueField := f.Field(0)\n\t\tcomponent, err := get(valueField.Type())\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"FillRefs: setting field %v.%s: %w\", s.Type(), s.Type().Field(i).Name, err)\n\t\t}\n\t\tx.setRef(component)\n\t}\n\treturn nil\n}\n\n// See internal/weaver/types.go.\nfunc hasListeners(impl any) bool {\n\tp := reflect.ValueOf(impl)\n\tif p.Kind() != reflect.Pointer {\n\t\treturn false\n\t}\n\ts := p.Elem()\n\tif s.Kind() != reflect.Struct {\n\t\treturn false\n\t}\n\n\tfor i, n := 0, s.NumField(); i < n; i++ {\n\t\tf := s.Field(i)\n\t\tif f.Type() == reflection.Type[Listener]() {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// See internal/weaver/types.go.\nfunc fillListeners(impl any, get func(name string) (net.Listener, string, error)) error {\n\tp := reflect.ValueOf(impl)\n\tif p.Kind() != reflect.Pointer {\n\t\treturn fmt.Errorf(\"FillListeners: %T not a pointer\", impl)\n\t}\n\ts := p.Elem()\n\tif s.Kind() != reflect.Struct {\n\t\treturn fmt.Errorf(\"FillListeners: %T not a struct pointer\", impl)\n\t}\n\n\tfor i, n := 0, s.NumField(); i < n; i++ {\n\t\tf := s.Field(i)\n\t\tt := s.Type().Field(i)\n\t\tif f.Type() != reflection.Type[Listener]() {\n\t\t\tcontinue\n\t\t}\n\n\t\t// The listener's name is the field name, unless a tag is present.\n\t\tname := t.Name\n\t\tif tag, ok := t.Tag.Lookup(\"weaver\"); ok {\n\t\t\tif !isValidListenerName(name) {\n\t\t\t\treturn fmt.Errorf(\"FillListeners: listener tag %s is not a valid Go identifier\", tag)\n\t\t\t}\n\t\t\tname = tag\n\t\t}\n\n\t\t// Get the listener.\n\t\tlis, proxyAddr, err := get(name)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"FillListener: setting field %v.%s: %w\", s.Type(), t.Name, err)\n\t\t}\n\n\t\t// Set the listener. We have to use UnsafePointer because the field may\n\t\t// not be exported.\n\t\tl := (*Listener)(f.Addr().UnsafePointer())\n\t\tl.Listener = lis\n\t\tl.proxyAddr = proxyAddr\n\t}\n\treturn nil\n}\n\n// See internal/weaver/types.go.\nfunc hasConfig(impl any) bool {\n\t_, ok := impl.(interface{ getConfig() any })\n\treturn ok\n}\n\n// See internal/weaver/types.go.\nfunc getConfig(impl any) any {\n\tif c, ok := impl.(interface{ getConfig() any }); ok {\n\t\treturn c.getConfig()\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "filllisteners_test.go",
          "type": "blob",
          "size": 1.541015625,
          "content": "// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage weaver\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"testing\"\n)\n\ntype testListener struct {\n\tnet.Listener\n}\n\nfunc getListener(lis string) (net.Listener, string, error) {\n\tif lis != \"A\" && lis != \"b\" && lis != \"cname\" && lis != \"DName\" {\n\t\treturn nil, \"\", fmt.Errorf(\"unexpected listener %q\", lis)\n\t}\n\treturn &testListener{}, lis, nil\n}\n\nfunc TestFillListeners(t *testing.T) {\n\tvar x struct {\n\t\tA Listener\n\t\tb Listener\n\t\tC Listener `weaver:\"cname\"`\n\t\td Listener `weaver:\"DName\"`\n\t}\n\tif err := fillListeners(&x, getListener); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif x.A.ProxyAddr() != \"A\" {\n\t\tt.Errorf(`expecting x.A.ProxyAddr() to be \"A\", got %q`, x.A.ProxyAddr())\n\t}\n\tif x.b.ProxyAddr() != \"b\" {\n\t\tt.Errorf(`expecting x.b.ProxyAddr() to be \"b\", got %q`, x.b.ProxyAddr())\n\t}\n\tif x.C.ProxyAddr() != \"cname\" {\n\t\tt.Errorf(`expecting x.C.ProxyAddr() to be \"cname\", got %q`, x.C.ProxyAddr())\n\t}\n\tif x.d.ProxyAddr() != \"DName\" {\n\t\tt.Errorf(`expecting x.d.ProxyAddr() to be \"Dname\", got %q`, x.d.ProxyAddr())\n\t}\n}\n"
        },
        {
          "name": "fillrefs_test.go",
          "type": "blob",
          "size": 1.84375,
          "content": "// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage weaver\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"strings\"\n\t\"testing\"\n)\n\ntype impl struct {\n\tA Ref[int]\n\tB Ref[string]\n\tC Ref[bool]\n}\n\nfunc getValue(t reflect.Type) (any, error) {\n\tif t == reflect.TypeOf(int(0)) {\n\t\treturn 42, nil\n\t}\n\tif t == reflect.TypeOf(\"\") {\n\t\treturn \"hello\", nil\n\t}\n\treturn nil, fmt.Errorf(\"unsupported type %v\", t)\n}\n\nfunc TestFillRefs(t *testing.T) {\n\tvar x struct {\n\t\ta Ref[int]\n\t\tb Ref[string]\n\t}\n\tif err := fillRefs(&x, getValue); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif x.a.Get() != 42 {\n\t\tt.Errorf(\"expecting x.a to be 42, got %d\", x.a.Get())\n\t}\n\tif x.b.Get() != \"hello\" {\n\t\tt.Errorf(\"expecting x.b to be `hello`, got %s\", x.b.Get())\n\t}\n}\n\nfunc TestFillRefsErrors(t *testing.T) {\n\ttype badref struct {\n\t\tRef[bool]\n\t}\n\ttype testCase struct {\n\t\tname   string\n\t\timpl   any    // impl argument to pass to fillRefs\n\t\texpect string // Returned error must contain this string\n\t}\n\tfor _, c := range []testCase{\n\t\t{\"not-pointer\", impl{}, \"not a pointer\"},\n\t\t{\"not-struct-pointer\", new(int), \"not a struct pointer\"},\n\t\t{\"unsupported-type\", &badref{}, \"unsupported\"},\n\t} {\n\t\tt.Run(c.name, func(t *testing.T) {\n\t\t\terr := fillRefs(c.impl, getValue)\n\t\t\tif err == nil || !strings.Contains(err.Error(), c.expect) {\n\t\t\t\tt.Fatalf(\"unexpected error %v; expecting %s\", err, c.expect)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 4.9326171875,
          "content": "module github.com/ServiceWeaver/weaver\n\ngo 1.21\n\nrequire (\n\tgithub.com/BurntSushi/toml v1.3.2\n\tgithub.com/DataDog/hyperloglog v0.0.0-20220804205443-1806d9b66146\n\tgithub.com/alecthomas/chroma/v2 v2.2.0\n\tgithub.com/fsnotify/fsnotify v1.6.0\n\tgithub.com/go-sql-driver/mysql v1.7.1\n\tgithub.com/goburrow/cache v0.1.4\n\tgithub.com/golang-jwt/jwt v3.2.2+incompatible\n\tgithub.com/google/cel-go v0.17.1\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/google/pprof v0.0.0-20230705174524-200ffdc848b8\n\tgithub.com/google/uuid v1.3.1\n\tgithub.com/hashicorp/golang-lru/v2 v2.0.1\n\tgithub.com/lightstep/varopt v1.4.0\n\tgithub.com/patrickmn/go-cache v2.1.0+incompatible\n\tgithub.com/pkg/browser v0.0.0-20210911075715-681adbf594b8\n\tgithub.com/testcontainers/testcontainers-go v0.24.1\n\tgithub.com/testcontainers/testcontainers-go/modules/mysql v0.24.1\n\tgithub.com/yuin/goldmark v1.4.15\n\tgithub.com/yuin/goldmark-highlighting/v2 v2.0.0-20220924101305-151362477c87\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.45.0\n\tgo.opentelemetry.io/otel v1.19.0\n\tgo.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.16.0\n\tgo.opentelemetry.io/otel/sdk v1.19.0\n\tgo.opentelemetry.io/otel/trace v1.19.0\n\tgolang.org/x/crypto v0.23.0\n\tgolang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1\n\tgolang.org/x/image v0.18.0\n\tgolang.org/x/sync v0.7.0\n\tgolang.org/x/term v0.20.0\n\tgolang.org/x/text v0.16.0\n\tgolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20230717213848-3f92550aa753\n\tgoogle.golang.org/protobuf v1.33.0\n\tgorm.io/driver/postgres v1.5.3\n\tgorm.io/gorm v1.25.5\n\tmodernc.org/sqlite v1.24.0\n)\n\nrequire (\n\tdario.cat/mergo v1.0.0 // indirect\n\tgithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 // indirect\n\tgithub.com/DataDog/mmh3 v0.0.0-20210722141835-012dc69a9e49 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.1 // indirect\n\tgithub.com/Microsoft/hcsshim v0.11.4 // indirect\n\tgithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230305170008-8188dc5388df // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.2.1 // indirect\n\tgithub.com/containerd/containerd v1.7.11 // indirect\n\tgithub.com/containerd/log v0.1.0 // indirect\n\tgithub.com/cpuguy83/dockercfg v0.3.1 // indirect\n\tgithub.com/distribution/reference v0.6.0 // indirect\n\tgithub.com/dlclark/regexp2 v1.7.0 // indirect\n\tgithub.com/docker/docker v25.0.6+incompatible // indirect\n\tgithub.com/docker/go-connections v0.4.0 // indirect\n\tgithub.com/docker/go-units v0.5.0 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/dustin/randbo v0.0.0-20140428231429-7f1b564ca724 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.3 // indirect\n\tgithub.com/go-logr/logr v1.2.4 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-ole/go-ole v1.2.6 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang/protobuf v1.5.3 // indirect\n\tgithub.com/jackc/pgpassfile v1.0.0 // indirect\n\tgithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a // indirect\n\tgithub.com/jackc/pgx/v5 v5.5.4 // indirect\n\tgithub.com/jackc/puddle/v2 v2.2.1 // indirect\n\tgithub.com/jinzhu/inflection v1.0.0 // indirect\n\tgithub.com/jinzhu/now v1.1.5 // indirect\n\tgithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 // indirect\n\tgithub.com/klauspost/compress v1.16.0 // indirect\n\tgithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0 // indirect\n\tgithub.com/magiconair/properties v1.8.7 // indirect\n\tgithub.com/mattn/go-isatty v0.0.16 // indirect\n\tgithub.com/moby/patternmatcher v0.5.0 // indirect\n\tgithub.com/moby/sys/sequential v0.5.0 // indirect\n\tgithub.com/moby/sys/user v0.3.0 // indirect\n\tgithub.com/moby/term v0.5.0 // indirect\n\tgithub.com/morikuni/aec v1.0.0 // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.1.0-rc4 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c // indirect\n\tgithub.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec // indirect\n\tgithub.com/shirou/gopsutil/v3 v3.23.7 // indirect\n\tgithub.com/shoenig/go-m1cpu v0.1.6 // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/stoewer/go-strcase v1.2.0 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.11 // indirect\n\tgithub.com/tklauser/numcpus v0.6.0 // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.3 // indirect\n\tgo.opentelemetry.io/otel/metric v1.19.0 // indirect\n\tgolang.org/x/mod v0.17.0 // indirect\n\tgolang.org/x/net v0.25.0 // indirect\n\tgolang.org/x/sys v0.20.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20230711160842-782d3b101e98 // indirect\n\tgoogle.golang.org/grpc v1.58.3 // indirect\n\tlukechampine.com/uint128 v1.2.0 // indirect\n\tmodernc.org/cc/v3 v3.40.0 // indirect\n\tmodernc.org/ccgo/v3 v3.16.13 // indirect\n\tmodernc.org/libc v1.22.5 // indirect\n\tmodernc.org/mathutil v1.5.0 // indirect\n\tmodernc.org/memory v1.5.0 // indirect\n\tmodernc.org/opt v0.1.3 // indirect\n\tmodernc.org/strutil v1.1.3 // indirect\n\tmodernc.org/token v1.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 27.21875,
          "content": "dario.cat/mergo v1.0.0 h1:AGCNq9Evsj31mOgNPcLyXc+4PNABt905YmuqPYYpBWk=\ndario.cat/mergo v1.0.0/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 h1:bvDV9vkmnHYOMsOr4WLk+Vo07yKIzd94sVoIqshQ4bU=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24/go.mod h1:8o94RPi1/7XTJvwPpRSzSUedZrtlirdB3r9Z20bi2f8=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 h1:UQHMgLO+TxOElx5B5HZ4hJQsoJ/PvUvKRhJHDQXO8P8=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=\ngithub.com/BurntSushi/toml v1.3.2 h1:o7IhLm0Msx3BaB+n3Ag7L8EVlByGnpq14C4YWiu/gL8=\ngithub.com/BurntSushi/toml v1.3.2/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=\ngithub.com/DataDog/hyperloglog v0.0.0-20220804205443-1806d9b66146 h1:S5WsRc58vIeuhvbz0V0FKs19nTbh5z23DCutLIXJkFA=\ngithub.com/DataDog/hyperloglog v0.0.0-20220804205443-1806d9b66146/go.mod h1:hFPkswc42pKhRbeKDKXy05mRi7J1kJ2vMNbvd9erH0M=\ngithub.com/DataDog/mmh3 v0.0.0-20210722141835-012dc69a9e49 h1:EbzDX8HPk5uE2FsJYxD74QmMw0/3CqSKhEr6teh0ncQ=\ngithub.com/DataDog/mmh3 v0.0.0-20210722141835-012dc69a9e49/go.mod h1:SvsjzyJlSg0rKsqYgdcFxeEVflx3ZNAyFfkUHP0TxXg=\ngithub.com/Microsoft/go-winio v0.6.1 h1:9/kr64B9VUZrLm5YYwbGtUJnMgqWVOdUAXu6Migciow=\ngithub.com/Microsoft/go-winio v0.6.1/go.mod h1:LRdKpFKfdobln8UmuiYcKPot9D2v6svN5+sAH+4kjUM=\ngithub.com/Microsoft/hcsshim v0.11.4 h1:68vKo2VN8DE9AdN4tnkWnmdhqdbpUFM8OF3Airm7fz8=\ngithub.com/Microsoft/hcsshim v0.11.4/go.mod h1:smjE4dvqPX9Zldna+t5FG3rnoHhaB7QYxPRqGcpAD9w=\ngithub.com/alecthomas/chroma/v2 v2.2.0 h1:Aten8jfQwUqEdadVFFjNyjx7HTexhKP0XuqBG67mRDY=\ngithub.com/alecthomas/chroma/v2 v2.2.0/go.mod h1:vf4zrexSH54oEjJ7EdB65tGNHmH3pGZmVkgTP5RHvAs=\ngithub.com/alecthomas/repr v0.0.0-20220113201626-b1b626ac65ae h1:zzGwJfFlFGD94CyyYwCJeSuD32Gj9GTaSi5y9hoVzdY=\ngithub.com/alecthomas/repr v0.0.0-20220113201626-b1b626ac65ae/go.mod h1:2kn6fqh/zIyPLmm3ugklbEi5hg5wS435eygvNfaDQL8=\ngithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230305170008-8188dc5388df h1:7RFfzj4SSt6nnvCPbCqijJi1nWCd+TqAT3bYCStRC18=\ngithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230305170008-8188dc5388df/go.mod h1:pSwJ0fSY5KhvocuWSx4fz3BA8OrA1bQn+K1Eli3BRwM=\ngithub.com/cenkalti/backoff/v4 v4.2.1 h1:y4OZtCnogmCPw98Zjyt5a6+QwPLGkiQsYW5oUqylYbM=\ngithub.com/cenkalti/backoff/v4 v4.2.1/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=\ngithub.com/containerd/containerd v1.7.11 h1:lfGKw3eU35sjV0aG2eYZTiwFEY1pCzxdzicHP3SZILw=\ngithub.com/containerd/containerd v1.7.11/go.mod h1:5UluHxHTX2rdvYuZ5OJTC5m/KJNs0Zs9wVoJm9zf5ZE=\ngithub.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=\ngithub.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=\ngithub.com/cpuguy83/dockercfg v0.3.1 h1:/FpZ+JaygUR/lZP2NlFI2DVfrOEMAIKP5wWEJdoYe9E=\ngithub.com/cpuguy83/dockercfg v0.3.1/go.mod h1:sugsbF4//dDlL/i+S+rtpIWp+5h0BHJHfjj5/jFyUJc=\ngithub.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=\ngithub.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/distribution/reference v0.6.0 h1:0IXCQ5g4/QMHHkarYzh5l+u8T3t73zM5QvfrDyIgxBk=\ngithub.com/distribution/reference v0.6.0/go.mod h1:BbU0aIcezP1/5jX/8MP0YiH4SdvB5Y4f/wlDRiLyi3E=\ngithub.com/dlclark/regexp2 v1.4.0/go.mod h1:2pZnwuY/m+8K6iRw6wQdMtk+rH5tNGR1i55kozfMjCc=\ngithub.com/dlclark/regexp2 v1.7.0 h1:7lJfhqlPssTb1WQx4yvTHN0uElPEv52sbaECrAQxjAo=\ngithub.com/dlclark/regexp2 v1.7.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\ngithub.com/docker/docker v25.0.6+incompatible h1:5cPwbwriIcsua2REJe8HqQV+6WlWc1byg2QSXzBxBGg=\ngithub.com/docker/docker v25.0.6+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=\ngithub.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=\ngithub.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/dustin/randbo v0.0.0-20140428231429-7f1b564ca724 h1:1/c0u68+2LRI+XSpduQpV9BnKx1k1P6GTb3MVxCE3w4=\ngithub.com/dustin/randbo v0.0.0-20140428231429-7f1b564ca724/go.mod h1:pTiKQhUCcxt2eQMAnv48oc5nAsmelPm573z44h6PSXc=\ngithub.com/felixge/httpsnoop v1.0.3 h1:s/nj+GCswXYzN5v2DpNMuMQYe+0DDwt5WVCU6CWBdXk=\ngithub.com/felixge/httpsnoop v1.0.3/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/fsnotify/fsnotify v1.6.0 h1:n+5WquG0fcWoWp6xPWfHdbskMCQaFnG6PfBrh1Ky4HY=\ngithub.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.2.4 h1:g01GSCwiDw2xSZfjJ2/T9M+S6pFdcNtFYsp+Y43HYDQ=\ngithub.com/go-logr/logr v1.2.4/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-ole/go-ole v1.2.6 h1:/Fpf6oFPoeFik9ty7siob0G6Ke8QvQEuVcuChpwXzpY=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-sql-driver/mysql v1.7.1 h1:lUIinVbN1DY0xBg0eMOzmmtGoHwWBbvnWubQUrtU8EI=\ngithub.com/go-sql-driver/mysql v1.7.1/go.mod h1:OXbVy3sEdcQ2Doequ6Z5BW6fXNQTmx+9S1MCJN5yJMI=\ngithub.com/goburrow/cache v0.1.4 h1:As4KzO3hgmzPlnaMniZU9+VmoNYseUhuELbxy9mRBfw=\ngithub.com/goburrow/cache v0.1.4/go.mod h1:cDFesZDnIlrHoNlMYqqMpCRawuXulgx+y7mXU8HZ+/c=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=\ngithub.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/cel-go v0.17.1 h1:s2151PDGy/eqpCI80/8dl4VL3xTkqI/YubXLXCFw0mw=\ngithub.com/google/cel-go v0.17.1/go.mod h1:HXZKzB0LXqer5lHHgfWAnlYwJaQBDKMjxjulNQzhwhY=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/pprof v0.0.0-20230705174524-200ffdc848b8 h1:n6vlPhxsA+BW/XsS5+uqi7GyzaLa5MH7qlSLBZtRdiA=\ngithub.com/google/pprof v0.0.0-20230705174524-200ffdc848b8/go.mod h1:Jh3hGz2jkYak8qXPD19ryItVnUgpgeqzdkY/D0EaeuA=\ngithub.com/google/uuid v1.3.1 h1:KjJaJ9iWZ3jOFZIf1Lqf4laDRCasjl0BCmnEGxkdLb4=\ngithub.com/google/uuid v1.3.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.16.0 h1:YBftPWNWd4WwGqtY2yeZL2ef8rHAxPBD8KFhJpmcqms=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.16.0/go.mod h1:YN5jB8ie0yfIUg6VvR9Kz84aCaG7AsGZnLjhHbUqwPg=\ngithub.com/hashicorp/golang-lru/v2 v2.0.1 h1:5pv5N1lT1fjLg2VQ5KWc7kmucp2x/kvFOnxuVTqZ6x4=\ngithub.com/hashicorp/golang-lru/v2 v2.0.1/go.mod h1:QeFd9opnmA6QUJc5vARoKUSoFhyfM2/ZepoAG6RGpeM=\ngithub.com/jackc/pgpassfile v1.0.0 h1:/6Hmqy13Ss2zCq62VdNG8tM1wchn8zjSGOBJ6icpsIM=\ngithub.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=\ngithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a h1:bbPeKD0xmW/Y25WS6cokEszi5g+S0QxI/d45PkRi7Nk=\ngithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a/go.mod h1:5TJZWKEWniPve33vlWYSoGYefn3gLQRzjfDlhSJ9ZKM=\ngithub.com/jackc/pgx/v5 v5.5.4 h1:Xp2aQS8uXButQdnCMWNmvx6UysWQQC+u1EoizjguY+8=\ngithub.com/jackc/pgx/v5 v5.5.4/go.mod h1:ez9gk+OAat140fv9ErkZDYFWmXLfV+++K0uAOiwgm1A=\ngithub.com/jackc/puddle/v2 v2.2.1 h1:RhxXJtFG022u4ibrCSMSiu5aOq1i77R3OHKNJj77OAk=\ngithub.com/jackc/puddle/v2 v2.2.1/go.mod h1:vriiEXHvEE654aYKXXjOvZM39qJ0q+azkZFrfEOc3H4=\ngithub.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=\ngithub.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=\ngithub.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=\ngithub.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=\ngithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 h1:Z9n2FFNUXsshfwJMBgNA0RU6/i7WVaAegv3PtuIHPMs=\ngithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51/go.mod h1:CzGEWj7cYgsdH8dAjBGEr58BoE7ScuLd+fwFZ44+/x8=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/klauspost/compress v1.16.0 h1:iULayQNOReoYUe+1qtKOqw9CwJv3aNQu8ivo7lw1HU4=\ngithub.com/klauspost/compress v1.16.0/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=\ngithub.com/lightstep/varopt v1.4.0 h1:MCpQouffyrj0xGe7pQRP0urgMHG04gHjE9v5FhpODzo=\ngithub.com/lightstep/varopt v1.4.0/go.mod h1:8XCrfUxO78WYWeFHSFD1j1ePNhRsGXd44YTfn+l3kjs=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0 h1:6E+4a0GO5zZEnZ81pIr0yLvtUWk2if982qA3F3QD6H4=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0/go.mod h1:zJYVVT2jmtg6P3p1VtQj7WsuWi/y4VnjVBn7F8KPB3I=\ngithub.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=\ngithub.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/mattn/go-isatty v0.0.16 h1:bq3VjFmv/sOjHtdEhmkEV4x1AJtvUvOJ2PFAZ5+peKQ=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-sqlite3 v1.14.16 h1:yOQRA0RpS5PFz/oikGwBEqvAWhWg5ufRz4ETLjwpU1Y=\ngithub.com/mattn/go-sqlite3 v1.14.16/go.mod h1:2eHXhiwb8IkHr+BDWZGa96P6+rkvnG63S2DGjv9HUNg=\ngithub.com/moby/patternmatcher v0.5.0 h1:YCZgJOeULcxLw1Q+sVR636pmS7sPEn1Qo2iAN6M7DBo=\ngithub.com/moby/patternmatcher v0.5.0/go.mod h1:hDPoyOpDY7OrrMDLaYoY3hf52gNCR/YOUYxkhApJIxc=\ngithub.com/moby/sys/sequential v0.5.0 h1:OPvI35Lzn9K04PBbCLW0g4LcFAJgHsvXsRyewg5lXtc=\ngithub.com/moby/sys/sequential v0.5.0/go.mod h1:tH2cOOs5V9MlPiXcQzRC+eEyab644PWKGRYaaV5ZZlo=\ngithub.com/moby/sys/user v0.3.0 h1:9ni5DlcW5an3SvRSx4MouotOygvzaXbaSrc/wGDFWPo=\ngithub.com/moby/sys/user v0.3.0/go.mod h1:bG+tYYYJgaMtRKgEmuueC0hJEAZWwtIbZTB+85uoHjs=\ngithub.com/moby/term v0.5.0 h1:xt8Q1nalod/v7BqbG21f8mQPqH+xAaC9C3N3wfWbVP0=\ngithub.com/moby/term v0.5.0/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=\ngithub.com/morikuni/aec v1.0.0 h1:nP9CBfwrvYnBRgY6qfDQkygYDmYwOilePFkwzv4dU8A=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.1.0-rc4 h1:oOxKUJWnFC4YGHCCMNql1x4YaDfYBTS5Y4x/Cgeo1E0=\ngithub.com/opencontainers/image-spec v1.1.0-rc4/go.mod h1:X4pATf0uXsnn3g5aiGIsVnJBR4mxhKzfwmvK/B2NTm8=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=\ngithub.com/pkg/browser v0.0.0-20210911075715-681adbf594b8 h1:KoWmjvw+nsYOo29YJK9vDA65RGE3NrOnUtO7a+RF9HU=\ngithub.com/pkg/browser v0.0.0-20210911075715-681adbf594b8/go.mod h1:HKlIX3XHQyzLZPlr7++PzdhaXEj94dEiJgZDTsxEqUI=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c h1:ncq/mPwQF4JjgDlrVEn3C11VoGHZN7m8qihwgMEtzYw=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/remyoudompheng/bigfft v0.0.0-20200410134404-eec4a21b6bb0/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=\ngithub.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec h1:W09IVJc94icq4NjY3clb7Lk8O1qJ8BdBEF8z0ibU0rE=\ngithub.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=\ngithub.com/shirou/gopsutil/v3 v3.23.7 h1:C+fHO8hfIppoJ1WdsVm1RoI0RwXoNdfTK7yWXV0wVj4=\ngithub.com/shirou/gopsutil/v3 v3.23.7/go.mod h1:c4gnmoRC0hQuaLqvxnx1//VXQ0Ms/X9UnJF8pddY5z4=\ngithub.com/shoenig/go-m1cpu v0.1.6 h1:nxdKQNcEB6vzgA2E2bvzKIYRuNj7XNJ4S/aRSwKzFtM=\ngithub.com/shoenig/go-m1cpu v0.1.6/go.mod h1:1JJMcUBvfNwpq05QDQVAnx3gUHr9IYF7GNg9SUEw2VQ=\ngithub.com/shoenig/test v0.6.4 h1:kVTaSd7WLz5WZ2IaoM0RSzRsUD+m8wRR+5qvntpn4LU=\ngithub.com/shoenig/test v0.6.4/go.mod h1:byHiCGXqrVaflBLAMq/srcZIHynQPQgeyvkvXnjqq0k=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/stoewer/go-strcase v1.2.0 h1:Z2iHWqGXH00XYgqDmNgQbIBxf3wrNq0F3feEy0ainaU=\ngithub.com/stoewer/go-strcase v1.2.0/go.mod h1:IBiWB2sKIp3wVVQ3Y035++gc+knqhUQag1KpM8ahLw8=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/testcontainers/testcontainers-go v0.24.1 h1:gJdZuQIVWnMJTo+CmQMEP7/CAagNk/0jbcUPn3OWvD8=\ngithub.com/testcontainers/testcontainers-go v0.24.1/go.mod h1:MGBiAkCm86yXQoCiipmQCqZLVdk1uFqtMqaU1Or0MRk=\ngithub.com/testcontainers/testcontainers-go/modules/mysql v0.24.1 h1:kY2ll2UXs7lUVphm888vivBSic6DMOY+Bk9YVx0eyuw=\ngithub.com/testcontainers/testcontainers-go/modules/mysql v0.24.1/go.mod h1:qOoCuWDZ2tlm9Egf93DOW76NyNZdrrgO2xQmpxicYIE=\ngithub.com/tklauser/go-sysconf v0.3.11 h1:89WgdJhk5SNwJfu+GKyYveZ4IaJ7xAkecBo+KdJV0CM=\ngithub.com/tklauser/go-sysconf v0.3.11/go.mod h1:GqXfhXY3kiPa0nAXPDIQIWzJbMCB7AmcWpGR8lSZfqI=\ngithub.com/tklauser/numcpus v0.6.0 h1:kebhY2Qt+3U6RNK7UqpYNA+tJ23IBEGKkB7JQBfDYms=\ngithub.com/tklauser/numcpus v0.6.0/go.mod h1:FEZLMke0lhOUG6w2JadTzp0a+Nl8PF/GFkQ5UVIcaL4=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.4.15 h1:CFa84T0goNn/UIXYS+dmjjVxMyTAvpOmzld40N/nfK0=\ngithub.com/yuin/goldmark v1.4.15/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/yuin/goldmark-highlighting/v2 v2.0.0-20220924101305-151362477c87 h1:Py16JEzkSdKAtEFJjiaYLYBOWGXc1r/xHj/Q/5lA37k=\ngithub.com/yuin/goldmark-highlighting/v2 v2.0.0-20220924101305-151362477c87/go.mod h1:ovIvrum6DQJA4QsJSovrkC4saKHQVs7TvcaeO8AIl5I=\ngithub.com/yusufpapurcu/wmi v1.2.3 h1:E1ctvB7uKFMOJw3fdOW32DwGE9I7t++CRUEMKvFoFiw=\ngithub.com/yusufpapurcu/wmi v1.2.3/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.45.0 h1:x8Z78aZx8cOF0+Kkazoc7lwUNMGy0LrzEMxTm4BbTxg=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.45.0/go.mod h1:62CPTSry9QZtOaSsE3tOzhx6LzDhHnXJ6xHeMNNiM6Q=\ngo.opentelemetry.io/otel v1.19.0 h1:MuS/TNf4/j4IXsZuJegVzI1cwut7Qc00344rgH7p8bs=\ngo.opentelemetry.io/otel v1.19.0/go.mod h1:i0QyjOq3UPoTzff0PJB2N66fb4S0+rSbSB15/oyH9fY=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.19.0 h1:Mne5On7VWdx7omSrSSZvM4Kw7cS7NQkOOmLcgscI51U=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.19.0/go.mod h1:IPtUMKL4O3tH5y+iXVyAXqpAwMuzC1IrxVS81rummfE=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.19.0 h1:IeMeyr1aBvBiPVYihXIaeIZba6b8E1bYp7lbdxK8CQg=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.19.0/go.mod h1:oVdCUtjq9MK9BlS7TtucsQwUcXcymNiEDjgDD2jMtZU=\ngo.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.16.0 h1:+XWJd3jf75RXJq29mxbuXhCXFDG3S3R4vBUeSI2P7tE=\ngo.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.16.0/go.mod h1:hqgzBPTf4yONMFgdZvL/bK42R/iinTyVQtiWihs3SZc=\ngo.opentelemetry.io/otel/metric v1.19.0 h1:aTzpGtV0ar9wlV4Sna9sdJyII5jTVJEvKETPiOKwvpE=\ngo.opentelemetry.io/otel/metric v1.19.0/go.mod h1:L5rUsV9kM1IxCj1MmSdS+JQAcVm319EUrDVLrt7jqt8=\ngo.opentelemetry.io/otel/sdk v1.19.0 h1:6USY6zH+L8uMH8L3t1enZPR3WFEmSTADlqldyHtJi3o=\ngo.opentelemetry.io/otel/sdk v1.19.0/go.mod h1:NedEbbS4w3C6zElbLdPJKOpJQOrGUJ+GfzpjUvI0v1A=\ngo.opentelemetry.io/otel/trace v1.19.0 h1:DFVQmlVbfVeOuBRrwdtaehRrWiL1JoVs9CPIQ1Dzxpg=\ngo.opentelemetry.io/otel/trace v1.19.0/go.mod h1:mfaSyvGyEJEI0nyV2I4qhNQnbBOUUmYZpYojqMnX2vo=\ngo.opentelemetry.io/proto/otlp v1.0.0 h1:T0TX0tmXU8a3CbNXzEKGeU5mIVOdf0oykP+u2lIVU/I=\ngo.opentelemetry.io/proto/otlp v1.0.0/go.mod h1:Sy6pihPLfYHkr3NkUbEhGHFhINUSI/v80hjKIs5JXpM=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.23.0 h1:dIJU/v2J8Mdglj/8rJ6UUOM3Zc9zLZxVZwwxMooUSAI=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1 h1:MGwJjxBy0HJshjDNfLsYO8xppfqWlA5ZT9OhtUUhTNw=\ngolang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1/go.mod h1:FXUEEKJgO7OQYeo8N01OfiKP8RXMtf6e8aTskBGqWdc=\ngolang.org/x/image v0.18.0 h1:jGzIakQa/ZXI1I0Fxvaa9W7yP25TqT6cHIHn+6CqvSQ=\ngolang.org/x/image v0.18.0/go.mod h1:4yyo5vMFQjVjUcVk4jEQcU9MGy/rulF5WvUILseCM2E=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.17.0 h1:zY54UmvipHiNd+pm+m0x9KhZ9hl1/7QNMyxXbc6ICqA=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.25.0 h1:d/OCCoBEUq33pjydKrGQhw7IlUPI2Oylr+8qLx49kac=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.7.0 h1:YsImfSBoP9QPYL0xyKJPq0gcaJdG3rInoqxTWbfQu9M=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210616045830-e2b7044e8c71/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.10.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.20.0 h1:Od9JTbYCk261bKm4M/mw7AklTlFYIa0bIp9BgSm1S8Y=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.20.0 h1:VnkxpohqXaOBYJtBmEppKUG6mXpi+4O6purfc2+sMhw=\ngolang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.16.0 h1:a94ExnEXNtEwYLGJSIUxnWoxoRz/ZcCsV63ROupILh4=\ngolang.org/x/text v0.16.0/go.mod h1:GhwF1Be+LQoKShO3cGOHzqOgRrGaYc9AvblQOmPVHnI=\ngolang.org/x/time v0.3.0 h1:rg5rLMjNzMS1RkNLzCG38eapWhnYLFYXDXj2gOlr8j4=\ngolang.org/x/time v0.3.0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d h1:vU5i/LfpvrRCpgM/VPfJLg5KjxD3E+hfT1SH+d9zLwg=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20230717213848-3f92550aa753 h1:lCbbUxUDD+DiXx9Q6F/ttL0aAu7N2pz8XnmMm8ZW4NE=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20230717213848-3f92550aa753/go.mod h1:rsr7RhLuwsDKL7RmgDDCUc6yaGr1iqceVb5Wv6f6YvQ=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20230711160842-782d3b101e98 h1:bVf09lpb+OJbByTj913DRJioFFAjf/ZGxEz7MajTp2U=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20230711160842-782d3b101e98/go.mod h1:TUfxEVdsvPg18p6AslUXFoLdpED4oBnGwyqk3dV1XzM=\ngoogle.golang.org/grpc v1.58.3 h1:BjnpXut1btbtgN/6sp+brB2Kbm2LjNXnidYujAVbSoQ=\ngoogle.golang.org/grpc v1.58.3/go.mod h1:tgX3ZQDlNJGU96V6yHh1T/JeoBQ2TXdr43YbYSsCJk0=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngorm.io/driver/postgres v1.5.3 h1:qKGY5CPHOuj47K/VxbCXJfFvIUeqMSXXadqdCY+MbBU=\ngorm.io/driver/postgres v1.5.3/go.mod h1:F+LtvlFhZT7UBiA81mC9W6Su3D4WUhSboc/36QZU0gk=\ngorm.io/gorm v1.25.5 h1:zR9lOiiYf09VNh5Q1gphfyia1JpiClIWG9hQaxB/mls=\ngorm.io/gorm v1.25.5/go.mod h1:hbnx/Oo0ChWMn1BIhpy1oYozzpM15i4YPuHDmfYtwg8=\ngotest.tools/v3 v3.5.0 h1:Ljk6PdHdOhAb5aDMWXjDLMMhph+BpztA4v1QdqEW2eY=\ngotest.tools/v3 v3.5.0/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=\nlukechampine.com/uint128 v1.2.0 h1:mBi/5l91vocEN8otkC5bDLhi2KdCticRiwbdB0O+rjI=\nlukechampine.com/uint128 v1.2.0/go.mod h1:c4eWIwlEGaxC/+H1VguhU4PHXNWDCDMUlWdIWl2j1gk=\nmodernc.org/cc/v3 v3.40.0 h1:P3g79IUS/93SYhtoeaHW+kRCIrYaxJ27MFPv+7kaTOw=\nmodernc.org/cc/v3 v3.40.0/go.mod h1:/bTg4dnWkSXowUO6ssQKnOV0yMVxDYNIsIrzqTFDGH0=\nmodernc.org/ccgo/v3 v3.16.13 h1:Mkgdzl46i5F/CNR/Kj80Ri59hC8TKAhZrYSaqvkwzUw=\nmodernc.org/ccgo/v3 v3.16.13/go.mod h1:2Quk+5YgpImhPjv2Qsob1DnZ/4som1lJTodubIcoUkY=\nmodernc.org/ccorpus v1.11.6 h1:J16RXiiqiCgua6+ZvQot4yUuUy8zxgqbqEEUuGPlISk=\nmodernc.org/ccorpus v1.11.6/go.mod h1:2gEUTrWqdpH2pXsmTM1ZkjeSrUWDpjMu2T6m29L/ErQ=\nmodernc.org/httpfs v1.0.6 h1:AAgIpFZRXuYnkjftxTAZwMIiwEqAfk8aVB2/oA6nAeM=\nmodernc.org/httpfs v1.0.6/go.mod h1:7dosgurJGp0sPaRanU53W4xZYKh14wfzX420oZADeHM=\nmodernc.org/libc v1.22.5 h1:91BNch/e5B0uPbJFgqbxXuOnxBQjlS//icfQEGmvyjE=\nmodernc.org/libc v1.22.5/go.mod h1:jj+Z7dTNX8fBScMVNRAYZ/jF91K8fdT2hYMThc3YjBY=\nmodernc.org/mathutil v1.5.0 h1:rV0Ko/6SfM+8G+yKiyI830l3Wuz1zRutdslNoQ0kfiQ=\nmodernc.org/mathutil v1.5.0/go.mod h1:mZW8CKdRPY1v87qxC/wUdX5O1qDzXMP5TH3wjfpga6E=\nmodernc.org/memory v1.5.0 h1:N+/8c5rE6EqugZwHii4IFsaJ7MUhoWX07J5tC/iI5Ds=\nmodernc.org/memory v1.5.0/go.mod h1:PkUhL0Mugw21sHPeskwZW4D6VscE/GQJOnIpCnW6pSU=\nmodernc.org/opt v0.1.3 h1:3XOZf2yznlhC+ibLltsDGzABUGVx8J6pnFMS3E4dcq4=\nmodernc.org/opt v0.1.3/go.mod h1:WdSiB5evDcignE70guQKxYUl14mgWtbClRi5wmkkTX0=\nmodernc.org/sqlite v1.24.0 h1:EsClRIWHGhLTCX44p+Ri/JLD+vFGo0QGjasg2/F9TlI=\nmodernc.org/sqlite v1.24.0/go.mod h1:OrDj17Mggn6MhE+iPbBNf7RGKODDE9NFT0f3EwDzJqk=\nmodernc.org/strutil v1.1.3 h1:fNMm+oJklMGYfU9Ylcywl0CO5O6nTfaowNsh2wpPjzY=\nmodernc.org/strutil v1.1.3/go.mod h1:MEHNA7PdEnEwLvspRMtWTNnp2nnyvMfkimT1NKNAGbw=\nmodernc.org/tcl v1.15.2 h1:C4ybAYCGJw968e+Me18oW55kD/FexcHbqH2xak1ROSY=\nmodernc.org/tcl v1.15.2/go.mod h1:3+k/ZaEbKrC8ePv8zJWPtBSW0V7Gg9g8rkmhI1Kfs3c=\nmodernc.org/token v1.0.1 h1:A3qvTqOwexpfZZeyI0FeGPDlSWX5pjZu9hF4lU+EKWg=\nmodernc.org/token v1.0.1/go.mod h1:UGzOrNV1mAFSEB63lOFHIpNRUVMvYTc6yu1SMY/XTDM=\nmodernc.org/z v1.7.3 h1:zDJf6iHjrnB+WRD88stbXokugjyc0/pB91ri1gO6LZY=\nmodernc.org/z v1.7.3/go.mod h1:Ipv4tsdxZRbQyLq9Q1M6gdbkxYzdlrciF2Hi/lS7nWE=\n"
        },
        {
          "name": "godeps.txt",
          "type": "blob",
          "size": 29.95703125,
          "content": "// Automatically generated; DO NOT EDIT\ngithub.com/ServiceWeaver/weaver\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver/internal/control\n    github.com/ServiceWeaver/weaver/internal/metrics\n    github.com/ServiceWeaver/weaver/internal/reflection\n    github.com/ServiceWeaver/weaver/internal/weaver\n    github.com/ServiceWeaver/weaver/metrics\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/colors\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/protos\n    go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    golang.org/x/exp/slices\n    log/slog\n    math/rand\n    net\n    net/http\n    os\n    reflect\n    sync\n    sync/atomic\n    time\n    unicode\ngithub.com/ServiceWeaver/weaver/cmd/weaver\n    context\n    errors\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver/internal/tool\n    github.com/ServiceWeaver/weaver/internal/tool/callgraph\n    github.com/ServiceWeaver/weaver/internal/tool/generate\n    github.com/ServiceWeaver/weaver/internal/tool/multi\n    github.com/ServiceWeaver/weaver/internal/tool/single\n    github.com/ServiceWeaver/weaver/internal/tool/ssh\n    github.com/ServiceWeaver/weaver/runtime/tool\n    os\n    os/exec\n    strings\ngithub.com/ServiceWeaver/weaver/dev/docgen\n    bytes\n    flag\n    fmt\n    github.com/alecthomas/chroma/v2\n    github.com/alecthomas/chroma/v2/styles\n    github.com/fsnotify/fsnotify\n    github.com/yuin/goldmark\n    github.com/yuin/goldmark-highlighting/v2\n    github.com/yuin/goldmark/extension\n    github.com/yuin/goldmark/renderer/html\n    html/template\n    os\n    os/exec\n    path/filepath\n    regexp\n    strings\ngithub.com/ServiceWeaver/weaver/examples\ngithub.com/ServiceWeaver/weaver/examples/bankofanthos\n    context\n    flag\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/frontend\n    log\ngithub.com/ServiceWeaver/weaver/examples/bankofanthos/balancereader\n    context\n    errors\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/common\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/model\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/goburrow/cache\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    reflect\ngithub.com/ServiceWeaver/weaver/examples/bankofanthos/common\n    fmt\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/model\n    gorm.io/driver/postgres\n    gorm.io/gorm\n    log/slog\n    sync/atomic\n    time\ngithub.com/ServiceWeaver/weaver/examples/bankofanthos/contacts\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    gorm.io/driver/postgres\n    gorm.io/gorm\n    os\n    reflect\n    regexp\ngithub.com/ServiceWeaver/weaver/examples/bankofanthos/frontend\n    context\n    crypto/rsa\n    embed\n    encoding/json\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/balancereader\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/contacts\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/ledgerwriter\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/model\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/transactionhistory\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/userservice\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/golang-jwt/jwt\n    github.com/google/uuid\n    go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\n    go.opentelemetry.io/otel/trace\n    golang.org/x/exp/slices\n    html/template\n    io/fs\n    net\n    net/http\n    net/url\n    os\n    reflect\n    strconv\n    strings\n    time\ngithub.com/ServiceWeaver/weaver/examples/bankofanthos/ledgerwriter\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/balancereader\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/model\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/patrickmn/go-cache\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    gorm.io/driver/postgres\n    gorm.io/gorm\n    reflect\n    regexp\n    time\ngithub.com/ServiceWeaver/weaver/examples/bankofanthos/model\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    time\ngithub.com/ServiceWeaver/weaver/examples/bankofanthos/transactionhistory\n    context\n    errors\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/common\n    github.com/ServiceWeaver/weaver/examples/bankofanthos/model\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/goburrow/cache\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    reflect\n    time\ngithub.com/ServiceWeaver/weaver/examples/bankofanthos/userservice\n    context\n    crypto/rsa\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/golang-jwt/jwt\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    golang.org/x/crypto/bcrypt\n    gorm.io/driver/postgres\n    gorm.io/gorm\n    math/rand\n    os\n    reflect\n    regexp\n    time\ngithub.com/ServiceWeaver/weaver/examples/chat\n    bytes\n    context\n    database/sql\n    embed\n    errors\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/metrics\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/go-sql-driver/mysql\n    github.com/hashicorp/golang-lru/v2\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    golang.org/x/image/draw\n    html/template\n    image\n    image/jpeg\n    image/png\n    io\n    log\n    math\n    modernc.org/sqlite\n    net/http\n    net/url\n    reflect\n    regexp\n    strconv\n    strings\n    sync\n    time\ngithub.com/ServiceWeaver/weaver/examples/collatz\n    context\n    errors\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    log\n    net/http\n    reflect\n    strconv\n    strings\ngithub.com/ServiceWeaver/weaver/examples/factors\n    context\n    errors\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/hashicorp/golang-lru/v2\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    log\n    net/http\n    os\n    reflect\n    strconv\ngithub.com/ServiceWeaver/weaver/examples/fakes\n    context\n    errors\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    reflect\n    time\ngithub.com/ServiceWeaver/weaver/examples/hello\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    log\n    net/http\n    reflect\ngithub.com/ServiceWeaver/weaver/examples/helloworld\n    context\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/trace\n    log\n    reflect\ngithub.com/ServiceWeaver/weaver/examples/reverser\n    context\n    embed\n    errors\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/metrics\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    html\n    log\n    net/http\n    reflect\ngithub.com/ServiceWeaver/weaver/internal/benchmarks\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    google.golang.org/protobuf/reflect/protoreflect\n    google.golang.org/protobuf/runtime/protoimpl\n    reflect\n    sync\ngithub.com/ServiceWeaver/weaver/internal/cond\n    context\n    sync\ngithub.com/ServiceWeaver/weaver/internal/config\n    fmt\n    reflect\n    strings\ngithub.com/ServiceWeaver/weaver/internal/control\n    context\n    github.com/ServiceWeaver/weaver/runtime/protos\ngithub.com/ServiceWeaver/weaver/internal/env\n    fmt\n    strings\ngithub.com/ServiceWeaver/weaver/internal/files\n    fmt\n    os\n    path/filepath\ngithub.com/ServiceWeaver/weaver/internal/heap\n    container/heap\ngithub.com/ServiceWeaver/weaver/internal/metrics\n    context\n    fmt\n    github.com/ServiceWeaver/weaver/runtime/metrics\n    strings\n    sync\n    time\ngithub.com/ServiceWeaver/weaver/internal/must\ngithub.com/ServiceWeaver/weaver/internal/net/benchmarks\ngithub.com/ServiceWeaver/weaver/internal/net/call\n    bufio\n    context\n    crypto/sha256\n    crypto/tls\n    encoding/binary\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver/internal/traceio\n    github.com/ServiceWeaver/weaver/metadata\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/retry\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    io\n    log/slog\n    net\n    strings\n    sync\n    sync/atomic\n    time\ngithub.com/ServiceWeaver/weaver/internal/pipe\n    context\n    fmt\n    io\n    os\n    os/exec\ngithub.com/ServiceWeaver/weaver/internal/proto\n    encoding/base64\n    google.golang.org/protobuf/proto\ngithub.com/ServiceWeaver/weaver/internal/proxy\n    errors\n    log/slog\n    math/rand\n    net/http\n    net/http/httputil\n    sync\ngithub.com/ServiceWeaver/weaver/internal/queue\n    context\n    github.com/ServiceWeaver/weaver/internal/cond\n    sync\ngithub.com/ServiceWeaver/weaver/internal/reflection\n    fmt\n    reflect\ngithub.com/ServiceWeaver/weaver/internal/register\n    fmt\n    sync\ngithub.com/ServiceWeaver/weaver/internal/routing\n    fmt\n    github.com/ServiceWeaver/weaver/runtime/protos\n    math\n    slices\n    sort\n    strings\ngithub.com/ServiceWeaver/weaver/internal/status\n    bytes\n    context\n    embed\n    encoding/json\n    errors\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver/internal/control\n    github.com/ServiceWeaver/weaver/internal/files\n    github.com/ServiceWeaver/weaver/internal/metrics\n    github.com/ServiceWeaver/weaver/internal/traceio\n    github.com/ServiceWeaver/weaver/runtime/colors\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/metrics\n    github.com/ServiceWeaver/weaver/runtime/perfetto\n    github.com/ServiceWeaver/weaver/runtime/prometheus\n    github.com/ServiceWeaver/weaver/runtime/protomsg\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/ServiceWeaver/weaver/runtime/tool\n    github.com/ServiceWeaver/weaver/runtime/traces\n    github.com/google/pprof/profile\n    github.com/pkg/browser\n    golang.org/x/exp/maps\n    google.golang.org/protobuf/reflect/protoreflect\n    google.golang.org/protobuf/runtime/protoimpl\n    google.golang.org/protobuf/types/known/timestamppb\n    html/template\n    io\n    log/slog\n    net\n    net/http\n    os\n    path/filepath\n    reflect\n    regexp\n    slices\n    sort\n    strings\n    sync\n    syscall\n    text/template\n    time\ngithub.com/ServiceWeaver/weaver/internal/testdeployer\n    context\n    errors\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/metrics\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    reflect\ngithub.com/ServiceWeaver/weaver/internal/tool\n    context\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver/runtime/tool\n    runtime\n    runtime/debug\ngithub.com/ServiceWeaver/weaver/internal/tool/callgraph\n    fmt\n    github.com/ServiceWeaver/weaver/runtime/bin\n    github.com/ServiceWeaver/weaver/runtime/graph\n    github.com/ServiceWeaver/weaver/runtime/logging\n    strings\ngithub.com/ServiceWeaver/weaver/internal/tool/certs\n    bytes\n    crypto\n    crypto/rand\n    crypto/rsa\n    crypto/x509\n    crypto/x509/pkix\n    encoding/pem\n    errors\n    fmt\n    math/big\n    time\ngithub.com/ServiceWeaver/weaver/internal/tool/config\n    fmt\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/bin\n    github.com/ServiceWeaver/weaver/runtime/protos\n    google.golang.org/protobuf/proto\ngithub.com/ServiceWeaver/weaver/internal/tool/generate\n    bytes\n    crypto/sha256\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver/internal/files\n    github.com/ServiceWeaver/weaver/internal/tool\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/colors\n    github.com/ServiceWeaver/weaver/runtime/version\n    go/ast\n    go/format\n    go/parser\n    go/token\n    go/types\n    golang.org/x/exp/maps\n    golang.org/x/tools/go/packages\n    golang.org/x/tools/go/types/typeutil\n    io\n    os\n    path\n    path/filepath\n    reflect\n    sort\n    strconv\n    strings\n    unicode\ngithub.com/ServiceWeaver/weaver/internal/tool/generate/example\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    reflect\ngithub.com/ServiceWeaver/weaver/internal/tool/multi\n    context\n    crypto\n    crypto/x509\n    errors\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver/internal/metrics\n    github.com/ServiceWeaver/weaver/internal/must\n    github.com/ServiceWeaver/weaver/internal/proxy\n    github.com/ServiceWeaver/weaver/internal/routing\n    github.com/ServiceWeaver/weaver/internal/status\n    github.com/ServiceWeaver/weaver/internal/tool\n    github.com/ServiceWeaver/weaver/internal/tool/certs\n    github.com/ServiceWeaver/weaver/internal/tool/config\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/bin\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/colors\n    github.com/ServiceWeaver/weaver/runtime/envelope\n    github.com/ServiceWeaver/weaver/runtime/graph\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/metrics\n    github.com/ServiceWeaver/weaver/runtime/profiling\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/ServiceWeaver/weaver/runtime/retry\n    github.com/ServiceWeaver/weaver/runtime/tool\n    github.com/ServiceWeaver/weaver/runtime/traces\n    github.com/ServiceWeaver/weaver/runtime/version\n    github.com/google/uuid\n    golang.org/x/exp/maps\n    golang.org/x/sync/errgroup\n    google.golang.org/protobuf/reflect/protoreflect\n    google.golang.org/protobuf/runtime/protoimpl\n    google.golang.org/protobuf/types/known/timestamppb\n    log/slog\n    net\n    net/http\n    os\n    path/filepath\n    reflect\n    slices\n    sync\n    syscall\n    time\ngithub.com/ServiceWeaver/weaver/internal/tool/single\n    context\n    errors\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver/internal/must\n    github.com/ServiceWeaver/weaver/internal/status\n    github.com/ServiceWeaver/weaver/internal/tool\n    github.com/ServiceWeaver/weaver/internal/tool/config\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/ServiceWeaver/weaver/runtime/tool\n    google.golang.org/protobuf/reflect/protoreflect\n    google.golang.org/protobuf/runtime/protoimpl\n    os\n    os/exec\n    os/signal\n    path/filepath\n    reflect\n    sync\n    syscall\ngithub.com/ServiceWeaver/weaver/internal/tool/ssh\n    bufio\n    context\n    errors\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver/internal/status\n    github.com/ServiceWeaver/weaver/internal/tool\n    github.com/ServiceWeaver/weaver/internal/tool/config\n    github.com/ServiceWeaver/weaver/internal/tool/ssh/impl\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/bin\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/colors\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/tool\n    github.com/ServiceWeaver/weaver/runtime/version\n    github.com/google/uuid\n    golang.org/x/exp/maps\n    io\n    os\n    os/exec\n    os/signal\n    os/user\n    path/filepath\n    strings\n    syscall\ngithub.com/ServiceWeaver/weaver/internal/tool/ssh/impl\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver/internal/metrics\n    github.com/ServiceWeaver/weaver/internal/must\n    github.com/ServiceWeaver/weaver/internal/proto\n    github.com/ServiceWeaver/weaver/internal/proxy\n    github.com/ServiceWeaver/weaver/internal/routing\n    github.com/ServiceWeaver/weaver/internal/status\n    github.com/ServiceWeaver/weaver/internal/versioned\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/envelope\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/metrics\n    github.com/ServiceWeaver/weaver/runtime/protomsg\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/ServiceWeaver/weaver/runtime/retry\n    github.com/ServiceWeaver/weaver/runtime/traces\n    github.com/google/uuid\n    golang.org/x/exp/maps\n    google.golang.org/protobuf/reflect/protoreflect\n    google.golang.org/protobuf/runtime/protoimpl\n    google.golang.org/protobuf/types/known/timestamppb\n    log/slog\n    net\n    net/http\n    os\n    os/exec\n    path/filepath\n    reflect\n    sync\n    syscall\n    time\ngithub.com/ServiceWeaver/weaver/internal/traceio\n    context\n    github.com/ServiceWeaver/weaver/runtime/protos\n    go.opentelemetry.io/otel/attribute\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/exporters/stdout/stdouttrace\n    go.opentelemetry.io/otel/sdk/instrumentation\n    go.opentelemetry.io/otel/sdk/resource\n    go.opentelemetry.io/otel/sdk/trace\n    go.opentelemetry.io/otel/trace\n    math\n    sync\n    time\ngithub.com/ServiceWeaver/weaver/internal/versioned\n    github.com/google/uuid\n    sync\ngithub.com/ServiceWeaver/weaver/internal/weaver\n    bytes\n    context\n    crypto/tls\n    crypto/x509\n    errors\n    fmt\n    github.com/DataDog/hyperloglog\n    github.com/ServiceWeaver/weaver/internal/cond\n    github.com/ServiceWeaver/weaver/internal/config\n    github.com/ServiceWeaver/weaver/internal/control\n    github.com/ServiceWeaver/weaver/internal/env\n    github.com/ServiceWeaver/weaver/internal/metrics\n    github.com/ServiceWeaver/weaver/internal/net/call\n    github.com/ServiceWeaver/weaver/internal/register\n    github.com/ServiceWeaver/weaver/internal/status\n    github.com/ServiceWeaver/weaver/internal/tool/single\n    github.com/ServiceWeaver/weaver/internal/traceio\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/colors\n    github.com/ServiceWeaver/weaver/runtime/deployers\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/metrics\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/ServiceWeaver/weaver/runtime/retry\n    github.com/ServiceWeaver/weaver/runtime/traces\n    github.com/ServiceWeaver/weaver/runtime/version\n    github.com/google/uuid\n    github.com/lightstep/varopt\n    go.opentelemetry.io/otel\n    go.opentelemetry.io/otel/propagation\n    go.opentelemetry.io/otel/sdk/resource\n    go.opentelemetry.io/otel/sdk/trace\n    go.opentelemetry.io/otel/semconv/v1.4.0\n    go.opentelemetry.io/otel/trace\n    golang.org/x/exp/maps\n    golang.org/x/sync/errgroup\n    google.golang.org/protobuf/types/known/timestamppb\n    io\n    log/slog\n    math\n    math/rand\n    net\n    net/http\n    os\n    os/signal\n    path/filepath\n    reflect\n    runtime/pprof\n    sort\n    strings\n    sync\n    sync/atomic\n    syscall\n    time\ngithub.com/ServiceWeaver/weaver/metadata\n    context\n    maps\ngithub.com/ServiceWeaver/weaver/metrics\n    github.com/ServiceWeaver/weaver/runtime/metrics\n    github.com/ServiceWeaver/weaver/runtime/protos\ngithub.com/ServiceWeaver/weaver/runtime\n    context\n    fmt\n    github.com/BurntSushi/toml\n    github.com/ServiceWeaver/weaver/internal/env\n    github.com/ServiceWeaver/weaver/internal/proto\n    github.com/ServiceWeaver/weaver/runtime/protos\n    os\n    os/signal\n    path/filepath\n    strings\n    sync\n    syscall\n    time\ngithub.com/ServiceWeaver/weaver/runtime/bin\n    bytes\n    debug/buildinfo\n    debug/elf\n    debug/macho\n    debug/pe\n    fmt\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/graph\n    github.com/ServiceWeaver/weaver/runtime/version\n    golang.org/x/exp/maps\n    golang.org/x/exp/slices\n    os\n    regexp\n    strconv\ngithub.com/ServiceWeaver/weaver/runtime/bin/testprogram\n    context\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/trace\n    reflect\ngithub.com/ServiceWeaver/weaver/runtime/codegen\n    bytes\n    context\n    crypto/sha256\n    encoding\n    encoding/binary\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver/internal/config\n    github.com/ServiceWeaver/weaver/internal/metrics\n    github.com/ServiceWeaver/weaver/metrics\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/ServiceWeaver/weaver/runtime/version\n    go.opentelemetry.io/otel/trace\n    google.golang.org/protobuf/proto\n    math\n    reflect\n    regexp\n    sort\n    strings\n    sync\n    time\ngithub.com/ServiceWeaver/weaver/runtime/colors\n    fmt\n    golang.org/x/term\n    io\n    os\n    strings\ngithub.com/ServiceWeaver/weaver/runtime/deployers\n    context\n    fmt\n    github.com/ServiceWeaver/weaver/internal/net/call\n    log/slog\n    net\n    path/filepath\n    sync\ngithub.com/ServiceWeaver/weaver/runtime/envelope\n    bufio\n    context\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/internal/control\n    github.com/ServiceWeaver/weaver/internal/net/call\n    github.com/ServiceWeaver/weaver/internal/pipe\n    github.com/ServiceWeaver/weaver/internal/proto\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/deployers\n    github.com/ServiceWeaver/weaver/runtime/metrics\n    github.com/ServiceWeaver/weaver/runtime/protomsg\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/ServiceWeaver/weaver/runtime/version\n    go.opentelemetry.io/otel/trace\n    golang.org/x/sync/errgroup\n    io\n    log/slog\n    net\n    os\n    sync\ngithub.com/ServiceWeaver/weaver/runtime/graph\n    fmt\n    golang.org/x/exp/slices\n    slices\n    strings\ngithub.com/ServiceWeaver/weaver/runtime/logging\n    bufio\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver/internal/cond\n    github.com/ServiceWeaver/weaver/internal/heap\n    github.com/ServiceWeaver/weaver/runtime/colors\n    github.com/ServiceWeaver/weaver/runtime/protomsg\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/fsnotify/fsnotify\n    github.com/google/cel-go/cel\n    github.com/google/cel-go/checker/decls\n    github.com/google/cel-go/common/operators\n    github.com/google/uuid\n    google.golang.org/genproto/googleapis/api/expr/v1alpha1\n    google.golang.org/protobuf/proto\n    google.golang.org/protobuf/types/known/timestamppb\n    io\n    log/slog\n    os\n    path/filepath\n    reflect\n    runtime\n    sort\n    strconv\n    strings\n    sync\n    time\ngithub.com/ServiceWeaver/weaver/runtime/metrics\n    encoding/binary\n    fmt\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/google/uuid\n    golang.org/x/exp/maps\n    math\n    reflect\n    slices\n    sort\n    sync\n    sync/atomic\n    unicode\n    unicode/utf8\ngithub.com/ServiceWeaver/weaver/runtime/perfetto\n    crypto/sha256\n    encoding/binary\n    encoding/json\n    github.com/ServiceWeaver/weaver/internal/traceio\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/ServiceWeaver/weaver/runtime/traces\n    go.opentelemetry.io/otel/sdk/trace\n    go.opentelemetry.io/otel/semconv/v1.4.0\n    go.opentelemetry.io/otel/trace\n    strconv\n    strings\ngithub.com/ServiceWeaver/weaver/runtime/profiling\n    bytes\n    errors\n    fmt\n    github.com/google/pprof/profile\n    sync\ngithub.com/ServiceWeaver/weaver/runtime/prometheus\n    bytes\n    fmt\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/metrics\n    github.com/ServiceWeaver/weaver/runtime/protos\n    golang.org/x/exp/maps\n    math\n    sort\n    strconv\n    strings\ngithub.com/ServiceWeaver/weaver/runtime/protomsg\n    bytes\n    context\n    encoding/binary\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver/internal/metrics\n    github.com/ServiceWeaver/weaver/metrics\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    google.golang.org/protobuf/proto\n    io\n    log/slog\n    math\n    net/http\n    runtime/debug\n    time\ngithub.com/ServiceWeaver/weaver/runtime/protos\n    google.golang.org/protobuf/reflect/protoreflect\n    google.golang.org/protobuf/runtime/protoimpl\n    reflect\n    sync\ngithub.com/ServiceWeaver/weaver/runtime/retry\n    context\n    math\n    math/rand\n    sync\n    time\ngithub.com/ServiceWeaver/weaver/runtime/tool\n    bufio\n    context\n    encoding/json\n    errors\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver/runtime/colors\n    github.com/ServiceWeaver/weaver/runtime/logging\n    io\n    os\n    os/exec\n    sort\n    strings\n    text/template\n    time\ngithub.com/ServiceWeaver/weaver/runtime/traces\n    bytes\n    context\n    database/sql\n    encoding/hex\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/ServiceWeaver/weaver/runtime/retry\n    go.opentelemetry.io/otel/attribute\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/sdk/instrumentation\n    go.opentelemetry.io/otel/sdk/resource\n    go.opentelemetry.io/otel/sdk/trace\n    go.opentelemetry.io/otel/trace\n    google.golang.org/protobuf/proto\n    math\n    modernc.org/sqlite\n    modernc.org/sqlite/lib\n    net/http\n    os\n    path/filepath\n    time\ngithub.com/ServiceWeaver/weaver/runtime/version\n    fmt\ngithub.com/ServiceWeaver/weaver/sim\n    context\n    crypto/sha256\n    encoding/json\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/internal/reflection\n    github.com/ServiceWeaver/weaver/internal/weaver\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/google/uuid\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    golang.org/x/exp/maps\n    golang.org/x/sync/errgroup\n    golang.org/x/text/language\n    golang.org/x/text/message\n    log/slog\n    math\n    math/bits\n    math/rand\n    net\n    os\n    path/filepath\n    reflect\n    runtime\n    runtime/debug\n    sort\n    strings\n    sync\n    sync/atomic\n    testing\n    time\ngithub.com/ServiceWeaver/weaver/sim/internal/bank\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    reflect\ngithub.com/ServiceWeaver/weaver/weavertest\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver/internal/control\n    github.com/ServiceWeaver/weaver/internal/reflection\n    github.com/ServiceWeaver/weaver/internal/weaver\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/ServiceWeaver/weaver/runtime/envelope\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/google/uuid\n    golang.org/x/exp/maps\n    golang.org/x/sync/errgroup\n    log/slog\n    os\n    reflect\n    regexp\n    runtime\n    slices\n    strings\n    sync\n    testing\n    time\ngithub.com/ServiceWeaver/weaver/weavertest/internal/chain\n    context\n    errors\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    reflect\n    sync\ngithub.com/ServiceWeaver/weaver/weavertest/internal/deploy\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    github.com/google/uuid\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    os\n    path/filepath\n    reflect\ngithub.com/ServiceWeaver/weaver/weavertest/internal/diverge\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    reflect\ngithub.com/ServiceWeaver/weaver/weavertest/internal/generate\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    reflect\ngithub.com/ServiceWeaver/weaver/weavertest/internal/protos\n    context\n    errors\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    google.golang.org/protobuf/reflect/protoreflect\n    google.golang.org/protobuf/runtime/protoimpl\n    reflect\n    sync\ngithub.com/ServiceWeaver/weaver/weavertest/internal/simple\n    context\n    errors\n    fmt\n    github.com/ServiceWeaver/weaver\n    github.com/ServiceWeaver/weaver/metadata\n    github.com/ServiceWeaver/weaver/runtime/codegen\n    go.opentelemetry.io/otel/codes\n    go.opentelemetry.io/otel/trace\n    maps\n    net/http\n    os\n    reflect\n    strings\n    sync\ngithub.com/ServiceWeaver/weaver/website/blog/deployers\ngithub.com/ServiceWeaver/weaver/website/blog/deployers/multi\n    context\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver/runtime\n    github.com/ServiceWeaver/weaver/runtime/colors\n    github.com/ServiceWeaver/weaver/runtime/envelope\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/google/uuid\n    os\n    sync\ngithub.com/ServiceWeaver/weaver/website/blog/deployers/single\n    context\n    flag\n    fmt\n    github.com/ServiceWeaver/weaver/runtime/colors\n    github.com/ServiceWeaver/weaver/runtime/envelope\n    github.com/ServiceWeaver/weaver/runtime/logging\n    github.com/ServiceWeaver/weaver/runtime/protos\n    github.com/google/uuid\n    log\n"
        },
        {
          "name": "http.go",
          "type": "blob",
          "size": 8.9140625,
          "content": "// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage weaver\n\nimport (\n\t\"math/rand\"\n\t\"net/http\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\timetrics \"github.com/ServiceWeaver/weaver/internal/metrics\"\n\t\"github.com/ServiceWeaver/weaver/metrics\"\n\t\"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\"\n)\n\n// TODO(mwhittaker): Measure the size of HTTP requests.\n// TODO(mwhittaker): Measure the size of HTTP replies.\n// TODO(mwhittaker): Allow users to disable certain metrics?\n\ntype httpLabels struct {\n\tLabel string // user-provided instrumentation label\n\tHost  string // URL host\n\n\t// Is this a metric implicitly created by the framework?\n\tGenerated bool `weaver:\"serviceweaver_generated\"`\n}\n\ntype httpErrorLabels struct {\n\tLabel string // user-provided instrumentation label\n\tHost  string // URL host\n\tCode  int    // HTTP status code (e.g., 404)\n\n\t// Is this a metric implicitly created by the framework?\n\tGenerated bool `weaver:\"serviceweaver_generated\"`\n}\n\nvar (\n\thttpRequestCounts = metrics.NewCounterMap[httpLabels](\n\t\t\"serviceweaver_http_request_count\",\n\t\t\"Count of HTTP requests received\",\n\t)\n\thttpRequestErrors = metrics.NewCounterMap[httpErrorLabels](\n\t\t\"serviceweaver_http_error_count\",\n\t\t\"Count of HTTP replies with a 4XX or 5XX status code\",\n\t)\n\thttpRequestLatencyMicros = metrics.NewHistogramMap[httpLabels](\n\t\t\"serviceweaver_http_request_latency_micros\",\n\t\t\"Duration, in microseconds, of HTTP request execution\",\n\t\timetrics.GeneratedBuckets,\n\t)\n\thttpRequestBytesReceived = metrics.NewHistogramMap[httpLabels](\n\t\t\"serviceweaver_http_request_bytes_received\",\n\t\t\"Number of bytes received by HTTP request handlers\",\n\t\timetrics.GeneratedBuckets,\n\t)\n\thttpRequestBytesReturned = metrics.NewHistogramMap[httpLabels](\n\t\t\"serviceweaver_http_request_bytes_returned\",\n\t\t\"Number of bytes returned by HTTP request handlers\",\n\t\timetrics.GeneratedBuckets,\n\t)\n)\n\n// InstrumentHandler instruments the provided HTTP handler to collect sampled\n// traces and metrics of HTTP request executions. Each trace and metric is\n// labelled with the supplied label. The following metrics are collected:\n//\n//   - serviceweaver_http_request_count: Total number of requests.\n//   - serviceweaver_http_error_count: Total number of 4XX and 5XX replies.\n//   - serviceweaver_http_request_latency_micros: Execution latency in microseconds.\n//   - serviceweaver_http_request_bytes_received: Total number of request bytes.\n//   - serviceweaver_http_request_bytes_returned: Total number of response bytes\nfunc InstrumentHandler(label string, handler http.Handler) http.Handler {\n\th := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tstart := time.Now()\n\t\t// TODO(spetrovic): It is possible for the user to override r.Host\n\t\t// and therefore get an incorrect host label attached here. Consider\n\t\t// a more robust solution for fetching the hostname (e.g., get the\n\t\t// listener attached to the HTTP server and return its associated\n\t\t// hostname).\n\t\tlabels := httpLabels{Label: label, Host: r.Host, Generated: true}\n\n\t\t// Note that the httpRequestCounts metric is not marked as generated, because\n\t\t// it is used by the deployers to do rollouts.\n\t\thttpRequestCounts.Get(httpLabels{Label: label, Host: r.Host}).Add(1)\n\t\tdefer func() {\n\t\t\thttpRequestLatencyMicros.Get(labels).Put(\n\t\t\t\tfloat64(time.Since(start).Microseconds()))\n\t\t}()\n\t\tif size, ok := requestSize(r); ok {\n\t\t\thttpRequestBytesReceived.Get(labels).Put(float64(size))\n\t\t}\n\t\twriter := responseWriterInstrumenter{w: w}\n\t\thandler.ServeHTTP(&writer, r)\n\t\tif writer.statusCode >= 400 && writer.statusCode < 600 {\n\t\t\thttpRequestErrors.Get(httpErrorLabels{\n\t\t\t\tLabel:     label,\n\t\t\t\tHost:      r.Host,\n\t\t\t\tCode:      writer.statusCode,\n\t\t\t\tGenerated: true,\n\t\t\t}).Add(1)\n\t\t}\n\t\thttpRequestBytesReturned.Get(labels).Put(float64(writer.responseSize(r)))\n\t})\n\tconst traceSampleInterval = 1 * time.Second\n\trng := rand.New(rand.NewSource(time.Now().UnixNano()))\n\ts := newTraceSampler(traceSampleInterval, rng)\n\treturn otelhttp.NewHandler(h, label, otelhttp.WithFilter(func(r *http.Request) bool {\n\t\treturn s.shouldTrace(time.Now())\n\t}))\n}\n\n// InstrumentHandlerFunc is identical to [InstrumentHandler] but takes a\n// function instead of an http.Handler.\nfunc InstrumentHandlerFunc(label string, f func(http.ResponseWriter, *http.Request)) http.Handler {\n\treturn InstrumentHandler(label, http.HandlerFunc(f))\n}\n\n// traceSampler is a time-based request sampler for tracing.\n//\n// It allows at most one request to be traced during each time interval.\ntype traceSampler struct {\n\tintervalNs float64\n\n\tmu               sync.Mutex\n\trng              *rand.Rand\n\tnextSampleTimeNs atomic.Int64\n}\n\n// newTraceSampler returns a new traceSampler that allows at most one request\n// to be traced during each time interval.\nfunc newTraceSampler(interval time.Duration, rng *rand.Rand) *traceSampler {\n\treturn &traceSampler{\n\t\tintervalNs: float64(interval / time.Nanosecond),\n\t\trng:        rng,\n\t}\n}\n\n// shouldTrace returns true iff a request should be traced.\nfunc (s *traceSampler) shouldTrace(now time.Time) bool {\n\t// Fast-path check avoids acquiring a mutex or modifying the sampler in any\n\t// way.\n\tnowNs := now.UnixNano()\n\tif nowNs < s.nextSampleTimeNs.Load() {\n\t\treturn false\n\t}\n\n\t// Check again while holding the lock.\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tif nowNs < s.nextSampleTimeNs.Load() {\n\t\treturn false\n\t}\n\n\t// Pick a new value for nextSampleTime and return.\n\t// We pick a random value in [0,s*s.intervalNs] (averages out to s.intervalNs).\n\ts.nextSampleTimeNs.Store(nowNs + int64(2*s.rng.Float64()*s.intervalNs))\n\treturn true\n}\n\n// responseWriterInstrumenter is a wrapper around an http.ResponseWriter that\n// records the status code of the response.\ntype responseWriterInstrumenter struct {\n\tw          http.ResponseWriter\n\tstatusCode int\n\twritten    int // number of bytes written\n}\n\nvar _ http.ResponseWriter = &responseWriterInstrumenter{}\n\n// Header implements the http.ResponseWriter interface.\nfunc (w *responseWriterInstrumenter) Header() http.Header {\n\treturn w.w.Header()\n}\n\n// Write implements the http.ResponseWriter interface.\nfunc (w *responseWriterInstrumenter) Write(b []byte) (int, error) {\n\tif w.statusCode == 0 {\n\t\tw.statusCode = 200\n\t}\n\tn, err := w.w.Write(b)\n\tw.written += n\n\treturn n, err\n}\n\n// WriteHeader implements the http.ResponseWriter interface.\nfunc (w *responseWriterInstrumenter) WriteHeader(statusCode int) {\n\tif w.statusCode == 0 {\n\t\tw.statusCode = statusCode\n\t}\n\tw.w.WriteHeader(statusCode)\n}\n\n// responseSize returns an approximation of the size, in bytes, of the HTTP\n// response on the wire.\nfunc (w *responseWriterInstrumenter) responseSize(req *http.Request) int {\n\t// An HTTP response looks something like this:\n\t//\n\t//     HTTP/1.1 200 OK\n\t//     Date: Wed, 09 Nov 2022 23:05:00 GMT\n\t//     Content-Length: 16\n\t//     Content-Type: text/plain; charset=utf-8\n\t//\n\t// There's a protocol (HTTP/1.1), a status code (200), a status (OK), a\n\t// header (Date: ...), and sometimes a body. We estimate the size of a\n\t// response by summing the sizes of these parts.\n\tsize := 0\n\tsize += len(req.Proto) // e.g., HTTP/1.1\n\tsize += 3              // e.g., 200\n\tif w.statusCode == 0 {\n\t\tsize += len(http.StatusText(200)) // e.g. OK\n\t} else {\n\t\tsize += len(http.StatusText(w.statusCode)) // e.g., Not Found\n\t}\n\tfor key, values := range w.Header() {\n\t\tfor _, value := range values {\n\t\t\tsize += len(key) + len(value) // e.g., Date: Wed, 09 Nov 2022 23:05:00 GMT\n\t\t}\n\t}\n\tsize += w.written\n\treturn size\n}\n\n// requestSize returns an approximation of the size, in bytes, of the HTTP\n// request on the wire. If the size is unknown, requestSize returns false.\nfunc requestSize(r *http.Request) (int, bool) {\n\tif r.ContentLength == -1 {\n\t\t// A ContentLength of -1 indicates an unknown size.\n\t\treturn 0, false\n\t}\n\n\t// An HTTP request looks something like this:\n\t//\n\t//     GET /foo/bar?x=10 HTTP/1.1\n\t//     Host: localhost:35513\n\t//     User-Agent: curl/7.85.0\n\t//     Accept: */*\n\t//\n\t// There's a method (GET), a URL (/foo/bar?x=10), a protocol (HTTP/1.1), a\n\t// header (Host: ...), and sometimes a body. We estimate the size of a\n\t// request by summing the sizes of these parts.\n\tsize := 0\n\tsize += len(r.Method) // e.g., GET\n\tsize += len(r.Proto)  // e.g., HTTP/1.1\n\tif r.URL != nil {\n\t\tsize += len(r.URL.Path)     // e.g., /foo/bar\n\t\tsize += len(r.URL.RawQuery) // e.g., ?x=10\n\t\tsize += len(r.URL.Host)     // e.g., localhost:35513\n\t}\n\tfor key, values := range r.Header {\n\t\tfor _, value := range values {\n\t\t\tsize += len(key) + len(value) // e.g., User-Agent: curl/7.85.0\n\t\t}\n\t}\n\tsize += int(r.ContentLength)\n\treturn size, true\n}\n"
        },
        {
          "name": "http_test.go",
          "type": "blob",
          "size": 1.75390625,
          "content": "// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage weaver\n\nimport (\n\t\"math\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc ExampleInstrumentHandler() {\n\tvar mux http.ServeMux\n\tmux.Handle(\"/foo\", InstrumentHandler(\"foo\", http.HandlerFunc(func(http.ResponseWriter, *http.Request) { /*...*/ })))\n\tmux.Handle(\"/bar\", InstrumentHandler(\"bar\", http.HandlerFunc(func(http.ResponseWriter, *http.Request) { /*...*/ })))\n\thttp.ListenAndServe(\":9000\", &mux)\n}\n\ntype fixedRandSource int64\n\nvar _ rand.Source = fixedRandSource(0)\n\nfunc (s fixedRandSource) Int63() int64 { return int64(s) }\nfunc (s fixedRandSource) Seed(int64)   {}\n\nfunc TestTraceSampler(t *testing.T) {\n\t// We run with an interval of a 1s and an \"rng\" that always returns 0.5, so\n\t// each sampling gap should be 1s.\n\trng := rand.New(fixedRandSource(math.MaxInt64 / 2))\n\ts := newTraceSampler(time.Second, rng)\n\tnow := time.Now()\n\tconst numTimeIntervals = 100\n\tvar numTraces int\n\tfor i := 0; i < numTimeIntervals; i++ {\n\t\tnow = now.Add(time.Second)\n\t\tfor j := 0; j < 10; j++ {\n\t\t\tif s.shouldTrace(now.Add(time.Millisecond)) {\n\t\t\t\tnumTraces++\n\t\t\t}\n\t\t}\n\t}\n\tif numTraces != numTimeIntervals {\n\t\tt.Fatalf(\"unexpected number of traces sampled: want %d, got %d\", numTimeIntervals, numTraces)\n\t}\n\n}\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "metadata",
          "type": "tree",
          "content": null
        },
        {
          "name": "metrics",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "sim",
          "type": "tree",
          "content": null
        },
        {
          "name": "staticcheck.conf",
          "type": "blob",
          "size": 0.8154296875,
          "content": "# In addition to the checks disabled by default [1], we also disable the\n# following style checks:\n#\n# - ST1005 [2]. This check enforces that error messages do not begin with a\n#   capital letter or end with punctuation. However, we have many error\n#   messages that begin with exported names or proper nouns (e.g.,\n#   NewEnvelopeConn, Service Weaver).\n# - ST1012 [3]. This check enforces that exported errors are prefixed with Err\n#   (e.g., ErrFoo). weaver.RemoteCallError violates this.\n#\n# [1]: https://staticcheck.dev/docs/configuration/options/#checks.\n# [2]: https://staticcheck.dev/docs/checks/#ST1005\n# [3]: https://staticcheck.dev/docs/checks/#ST1012\n#\n# TODO(mwhittaker): Think about enabling some of these checks and updating our\n# code accordingly.\nchecks = [\"all\", \"-ST1000\", \"-ST1003\", \"-ST1005\", \"-ST1012\", \"-ST1021\"]\n"
        },
        {
          "name": "validate.go",
          "type": "blob",
          "size": 3.224609375,
          "content": "// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage weaver\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"unicode\"\n\n\t\"github.com/ServiceWeaver/weaver/internal/reflection\"\n\t\"github.com/ServiceWeaver/weaver/runtime/codegen\"\n\t\"golang.org/x/exp/slices\"\n)\n\n// validateRegistrations validates the provided registrations, returning an\n// diagnostic error if they are invalid. Note that some validation is performed\n// by 'weaver generate', but because users can run a Service Weaver app after\n// forgetting to run 'weaver generate', some checks have to be done at runtime.\nfunc validateRegistrations(regs []*codegen.Registration) error {\n\t// Gather the set of registered interfaces.\n\tintfs := map[reflect.Type]struct{}{}\n\tfor _, reg := range regs {\n\t\tintfs[reg.Iface] = struct{}{}\n\t}\n\n\t// Check that for every weaver.Ref[T] field in a component implementation\n\t// struct, T is a registered interface.\n\tvar errs []error\n\tfor _, reg := range regs {\n\t\tfor i := 0; i < reg.Impl.NumField(); i++ {\n\t\t\tf := reg.Impl.Field(i)\n\t\t\tswitch {\n\t\t\tcase f.Type.Implements(reflection.Type[interface{ isRef() }]()):\n\t\t\t\t// f is a weaver.Ref[T].\n\t\t\t\tv := f.Type.Field(0) // a Ref[T]'s value field\n\t\t\t\tif _, ok := intfs[v.Type]; !ok {\n\t\t\t\t\t// T is not a registered component interface.\n\t\t\t\t\terr := fmt.Errorf(\n\t\t\t\t\t\t\"component implementation struct %v has component reference field %v, but component %v was not registered; maybe you forgot to run 'weaver generate'\",\n\t\t\t\t\t\treg.Impl, f.Type, v.Type,\n\t\t\t\t\t)\n\t\t\t\t\terrs = append(errs, err)\n\t\t\t\t}\n\n\t\t\tcase f.Type == reflection.Type[Listener]():\n\t\t\t\t// f is a weaver.Listener.\n\t\t\t\tname := f.Name\n\t\t\t\tif tag, ok := f.Tag.Lookup(\"weaver\"); ok {\n\t\t\t\t\tif !isValidListenerName(tag) {\n\t\t\t\t\t\terr := fmt.Errorf(\"component implementation struct %v has invalid listener tag %q\", reg.Impl, tag)\n\t\t\t\t\t\terrs = append(errs, err)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tname = tag\n\t\t\t\t}\n\t\t\t\tif !slices.Contains(reg.Listeners, name) {\n\t\t\t\t\terr := fmt.Errorf(\"component implementation struct %v has a listener field %v, but listener %v hasn't been registered; maybe you forgot to run 'weaver generate'\", reg.Impl, name, name)\n\t\t\t\t\terrs = append(errs, err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn errors.Join(errs...)\n}\n\n// isValidListenerName returns whether the provided name is a valid\n// weaver.Listener name.\nfunc isValidListenerName(name string) bool {\n\t// We allow valid Go identifiers [1]. This code is taken from [2].\n\t//\n\t// [1]: https://go.dev/ref/spec#Identifiers\n\t// [2]: https://cs.opensource.google/go/go/+/refs/tags/go1.20.6:src/go/token/token.go;l=331-341;drc=19309779ac5e2f5a2fd3cbb34421dafb2855ac21\n\tif name == \"\" {\n\t\treturn false\n\t}\n\tfor i, c := range name {\n\t\tif !unicode.IsLetter(c) && c != '_' && (i == 0 || !unicode.IsDigit(c)) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"
        },
        {
          "name": "validate_test.go",
          "type": "blob",
          "size": 4.3193359375,
          "content": "// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage weaver\n\nimport (\n\t\"io\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/ServiceWeaver/weaver/internal/reflection\"\n\t\"github.com/ServiceWeaver/weaver/runtime/codegen\"\n)\n\n// TestValidateNoRegistrations tests that validateRegistrations succeeds on an\n// empty set of registrations.\nfunc TestValidateNoRegistrations(t *testing.T) {\n\tif err := validateRegistrations(nil); err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\n// TestValidateValidRegistrations tests that validateRegistrations succeeds on\n// a set of valid registrations.\nfunc TestValidateValidRegistrations(t *testing.T) {\n\ttype foo interface{}\n\ttype bar interface{}\n\ttype fooImpl struct {\n\t\tRef[bar]\n\t\tListener `weaver:\"lis1\"`\n\t\t_        Listener `weaver:\"lis2\"`\n\t\tlis3     Listener //lint:ignore U1000 Present for code generation.\n\t}\n\ttype barImpl struct{ Ref[foo] }\n\tregs := []*codegen.Registration{\n\t\t{\n\t\t\tName:      \"foo\",\n\t\t\tIface:     reflection.Type[foo](),\n\t\t\tImpl:      reflection.Type[fooImpl](),\n\t\t\tListeners: []string{\"lis1\", \"lis2\", \"lis3\"},\n\t\t},\n\t\t{\n\t\t\tName:  \"bar\",\n\t\t\tIface: reflection.Type[bar](),\n\t\t\tImpl:  reflection.Type[barImpl](),\n\t\t},\n\t}\n\tif err := validateRegistrations(regs); err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\n// TestValidateUnregisteredRef tests that validateRegistrations fails when a\n// component has a weaver.Ref on an unregistered component.\nfunc TestValidateUnregisteredRef(t *testing.T) {\n\ttype foo interface{}\n\ttype fooImpl struct{ Ref[io.Reader] }\n\tregs := []*codegen.Registration{\n\t\t{\n\t\t\tName:  \"foo\",\n\t\t\tIface: reflection.Type[foo](),\n\t\t\tImpl:  reflection.Type[fooImpl](),\n\t\t},\n\t}\n\terr := validateRegistrations(regs)\n\tif err == nil {\n\t\tt.Fatal(\"unexpected validateRegistrations success\")\n\t}\n\tconst want = \"component io.Reader was not registered\"\n\tif !strings.Contains(err.Error(), want) {\n\t\tt.Fatalf(\"validateRegistrations: got %q, want %q\", err, want)\n\t}\n}\n\n// TestValidateInvalidListenerNames tests that validateRegistrations fails on\n// invalid listener names.\nfunc TestValidateInvalidListenerNames(t *testing.T) {\n\ttype foo interface{}\n\ttype fooImpl struct {\n\t\t_ Listener `weaver:\"\"`             // empty name\n\t\t_ Listener `weaver:\" \"`            // whitespace name\n\t\t_ Listener `weaver:\"foo bar\"`      // whitespace in name\n\t\t_ Listener `weaver:\"1foo\"`         // starts with a digit\n\t\t_ Listener `weaver:\".!@#$%^&*()-\"` // punctuation\n\t}\n\tregs := []*codegen.Registration{\n\t\t{\n\t\t\tName:  \"foo\",\n\t\t\tIface: reflection.Type[foo](),\n\t\t\tImpl:  reflection.Type[fooImpl](),\n\t\t},\n\t}\n\terr := validateRegistrations(regs)\n\tif err == nil {\n\t\tt.Fatal(\"unexpected validateRegistrations success\")\n\t}\n\tfor _, want := range []string{\n\t\t`invalid listener tag \"\"`,\n\t\t`invalid listener tag \" \"`,\n\t\t`invalid listener tag \"foo bar\"`,\n\t\t`invalid listener tag \"1foo\"`,\n\t\t`invalid listener tag \".!@#$%^&*()-\"`,\n\t} {\n\t\tif !strings.Contains(err.Error(), want) {\n\t\t\tt.Errorf(\"validateRegistrations: got %q, want %q\", err, want)\n\t\t}\n\t}\n}\n\n// TestValidateUnregisteredListeners tests that validateRegistrations fails on\n// listener names that haven't been registered.\nfunc TestValidateUnregisteredListener(t *testing.T) {\n\ttype foo interface{}\n\ttype fooImpl struct {\n\t\tfoo Listener //lint:ignore U1000 Present for code generation.\n\t\tbar Listener //lint:ignore U1000 Present for code generation.\n\t\tbaz Listener //lint:ignore U1000 Present for code generation.\n\t}\n\n\tregs := []*codegen.Registration{\n\t\t{\n\t\t\tName:      \"foo\",\n\t\t\tIface:     reflection.Type[foo](),\n\t\t\tImpl:      reflection.Type[fooImpl](),\n\t\t\tListeners: []string{\"foo\"},\n\t\t},\n\t}\n\terr := validateRegistrations(regs)\n\tif err == nil {\n\t\tt.Fatal(\"unexpected validateRegistrations success\")\n\t}\n\tfor _, want := range []string{\n\t\t`listener bar hasn't been registered`,\n\t\t`listener baz hasn't been registered`,\n\t} {\n\t\tif !strings.Contains(err.Error(), want) {\n\t\t\tt.Errorf(\"validateRegistrations: got %q, want %q\", err, want)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "weaveletControl.go",
          "type": "blob",
          "size": 2.9794921875,
          "content": "// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage weaver\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/ServiceWeaver/weaver/internal/control\"\n\t\"github.com/ServiceWeaver/weaver/runtime/protos\"\n)\n\n// weaveletControl is a component hosted in every weavelet. Deployers make calls to this component\n// to fetch information about the weavelet, and to make it do various things.\ntype weaveletControl control.WeaveletControl\n\n// noopWeaveletControl is a no-op implementation of weaveletControl. It exists solely to cause\n// weaveletControl to be registered as a component. The actual implementation is provided\n// by internal/weaver/remoteweavelet.go\ntype noopWeaveletControl struct {\n\tImplements[weaveletControl]\n}\n\nvar _ weaveletControl = &noopWeaveletControl{}\n\n// InitWeavelet implements weaveletControl interface.\nfunc (*noopWeaveletControl) InitWeavelet(context.Context, *protos.InitWeaveletRequest) (*protos.InitWeaveletReply, error) {\n\treturn nil, fmt.Errorf(\"weaveletControl.InitWeavelet not implemented\")\n}\n\n// UpdateComponents implements weaveletControl interface.\nfunc (*noopWeaveletControl) UpdateComponents(context.Context, *protos.UpdateComponentsRequest) (*protos.UpdateComponentsReply, error) {\n\treturn nil, fmt.Errorf(\"weaveletControl.UpdateComponents not implemented\")\n}\n\n// UpdateRoutingInfo implements weaveletControl interface.\nfunc (*noopWeaveletControl) UpdateRoutingInfo(context.Context, *protos.UpdateRoutingInfoRequest) (*protos.UpdateRoutingInfoReply, error) {\n\treturn nil, fmt.Errorf(\"weaveletControl.UpdateRoutingInfo not implemented\")\n}\n\n// GetHealth implements weaveletControl nterface.\nfunc (*noopWeaveletControl) GetHealth(context.Context, *protos.GetHealthRequest) (*protos.GetHealthReply, error) {\n\treturn nil, fmt.Errorf(\"weaveletControl.GetHealth not implemented\")\n}\n\n// GetLoad implements weaveletControl nterface.\nfunc (*noopWeaveletControl) GetLoad(context.Context, *protos.GetLoadRequest) (*protos.GetLoadReply, error) {\n\treturn nil, fmt.Errorf(\"weaveletControl.GetLoad not implemented\")\n}\n\n// GetMetrics implements weaveletControl nterface.\nfunc (*noopWeaveletControl) GetMetrics(context.Context, *protos.GetMetricsRequest) (*protos.GetMetricsReply, error) {\n\treturn nil, fmt.Errorf(\"weaveletControl.GetMetrics not implemented\")\n}\n\n// GetProfile implements weaveletControl nterface.\nfunc (*noopWeaveletControl) GetProfile(context.Context, *protos.GetProfileRequest) (*protos.GetProfileReply, error) {\n\treturn nil, fmt.Errorf(\"weaveletControl.GetProfile not implemented\")\n}\n"
        },
        {
          "name": "weaver.go",
          "type": "blob",
          "size": 19.4013671875,
          "content": "// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Package weaver provides the interface for building\n// [single-image distributed programs].\n//\n// A program is composed of a set of Go interfaces called\n// components. Components are recognized by \"weaver generate\" (typically invoked\n// via \"go generate\"). \"weaver generate\" generates code that allows a component\n// to be invoked over the network. This flexibility allows Service Weaver\n// to decompose the program execution across many processes and machines.\n//\n// [single-image distributed programs]: https://serviceweaver.dev\npackage weaver\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log/slog\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"sync\"\n\n\t\"github.com/ServiceWeaver/weaver/internal/reflection\"\n\t\"github.com/ServiceWeaver/weaver/internal/weaver\"\n\t\"github.com/ServiceWeaver/weaver/runtime\"\n\t\"github.com/ServiceWeaver/weaver/runtime/codegen\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\n//go:generate ./dev/protoc.sh internal/status/status.proto\n//go:generate ./dev/protoc.sh internal/tool/single/single.proto\n//go:generate ./dev/protoc.sh internal/tool/ssh/impl/ssh.proto\n//go:generate ./dev/protoc.sh runtime/protos/runtime.proto\n//go:generate ./dev/protoc.sh runtime/protos/config.proto\n//go:generate ./cmd/weaver/weaver generate . ./internal/tool/multi\n//go:generate ./dev/writedeps.sh\n\n// RemoteCallError indicates that a remote component method call failed to\n// execute properly. This can happen, for example, because of a failed machine\n// or a network partition. Here's an illustrative example:\n//\n//\t// Call the foo.Foo method.\n//\terr := foo.Foo(ctx)\n//\tif errors.Is(err, weaver.RemoteCallError) {\n//\t    // foo.Foo did not execute properly.\n//\t} else if err != nil {\n//\t    // foo.Foo executed properly, but returned an error.\n//\t} else {\n//\t    // foo.Foo executed properly and did not return an error.\n//\t}\n//\n// Note that if a method call returns an error with an embedded\n// RemoteCallError, it does NOT mean that the method never executed. The method\n// may have executed partially or fully. Thus, you must be careful retrying\n// method calls that result in a RemoteCallError. Ensuring that all methods are\n// either read-only or idempotent is one way to ensure safe retries, for\n// example.\nvar RemoteCallError = errors.New(\"Service Weaver remote call error\")\n\n// HealthzHandler is a health-check handler that returns an OK status for all\n// incoming HTTP requests.\nvar HealthzHandler = func(w http.ResponseWriter, _ *http.Request) {\n\tfmt.Fprintf(w, \"OK\")\n}\n\n// HealthzURL is the URL path on which Service Weaver performs health checks.\n// Every application HTTP server must register a handler for this URL path,\n// e.g.:\n//\n//\tmux := http.NewServeMux()\n//\tmux.HandleFunc(weaver.HealthzURL, func(http.ResponseWriter, *http.Request) {\n//\t    // ...\n//\t})\n//\n// As a convenience, Service Weaver registers HealthzHandler under\n// this URL path in the default ServerMux, i.e.:\n//\n//\thttp.HandleFunc(weaver.HealthzURL, weaver.HealthzHandler)\nconst HealthzURL = \"/debug/weaver/healthz\"\n\nvar healthzInit sync.Once\n\n// Main is the interface implemented by an application's main component.\ntype Main interface{}\n\n// PointerToMain is a type constraint that asserts *T is an instance of Main\n// (i.e. T is a struct that embeds weaver.Implements[weaver.Main]).\ntype PointerToMain[T any] interface {\n\t*T\n\tInstanceOf[Main]\n}\n\n// Run runs app as a Service Weaver application.\n//\n// The application is composed of a set of components that include weaver.Main\n// as well as any components transitively needed by weaver.Main. An instance\n// that implement weaver.Main is automatically created by weaver.Run and passed\n// to app. Note: other replicas in which weaver.Run is called may also create\n// instances of weaver.Main.\n//\n// The type T must be a struct type that contains an embedded\n// `weaver.Implements[weaver.Main]` field. A value of type T is created,\n// initialized (by calling its Init method if any), and a pointer to the value\n// is passed to app. app contains the main body of the application; it will\n// typically run HTTP servers, etc.\n//\n// If this process is hosting the `weaver.Main` component, Run will call app\n// and will return when app returns. If this process is hosting other\n// components, Run will start those components and never return. Most callers\n// of Run will not do anything (other than possibly logging any returned error)\n// after Run returns.\n//\n//\tfunc main() {\n//\t    if err := weaver.Run(context.Background(), app); err != nil {\n//\t        log.Fatal(err)\n//\t    }\n//\t}\nfunc Run[T any, P PointerToMain[T]](ctx context.Context, app func(context.Context, *T) error) error {\n\t// Register HealthzHandler in the default ServerMux.\n\thealthzInit.Do(func() {\n\t\thttp.HandleFunc(HealthzURL, HealthzHandler)\n\t})\n\n\tbootstrap, err := runtime.GetBootstrap(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !bootstrap.Exists() {\n\t\treturn runLocal[T, P](ctx, app)\n\t}\n\treturn runRemote[T, P](ctx, app, bootstrap)\n}\n\nfunc runLocal[T any, _ PointerToMain[T]](ctx context.Context, app func(context.Context, *T) error) error {\n\t// Read config from SERVICEWEAVER_CONFIG env variable, if non-empty.\n\topts := weaver.SingleWeaveletOptions{}\n\tif filename := os.Getenv(\"SERVICEWEAVER_CONFIG\"); filename != \"\" {\n\t\tcontents, err := os.ReadFile(filename)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"config file: %w\", err)\n\t\t}\n\t\topts.ConfigFilename = filename\n\t\topts.Config = string(contents)\n\t}\n\n\tregs := codegen.Registered()\n\tif err := validateRegistrations(regs); err != nil {\n\t\treturn err\n\t}\n\n\twlet, err := weaver.NewSingleWeavelet(ctx, regs, opts)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tgo func() {\n\t\tif err := wlet.ServeStatus(ctx); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, err)\n\t\t}\n\t}()\n\n\tmain, err := wlet.GetImpl(reflection.Type[T]())\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn app(ctx, main.(*T))\n}\n\nfunc runRemote[T any, _ PointerToMain[T]](ctx context.Context, app func(context.Context, *T) error, bootstrap runtime.Bootstrap) error {\n\tregs := codegen.Registered()\n\tif err := validateRegistrations(regs); err != nil {\n\t\treturn err\n\t}\n\n\topts := weaver.RemoteWeaveletOptions{}\n\twlet, err := weaver.NewRemoteWeavelet(ctx, regs, bootstrap, opts)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Return when either (1) the remote weavelet exits, or (2) the user\n\t// provided app function returns, whichever happens first.\n\terrs := make(chan error, 2)\n\tif wlet.Info().RunMain {\n\t\tmain, err := wlet.GetImpl(reflection.Type[T]())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgo func() {\n\t\t\terrs <- app(ctx, main.(*T))\n\t\t}()\n\t}\n\tgo func() {\n\t\terrs <- wlet.Wait()\n\t}()\n\treturn <-errs\n}\n\nvar (\n\t// Equivalence checks with the struct in internal/weaver/types.go.\n\t_ = WeaverInfo(weaver.WeaverInfo{})\n\t_ = weaver.WeaverInfo(WeaverInfo{})\n)\n\n// WeaverInfo holds runtime information about a deployed application.\ntype WeaverInfo struct {\n\t// Unique identifier for the application deployment.\n\tDeploymentID string\n\n\t// TODO(spetrovic): Add other runtime fields here (e.g., application start\n\t// time, name of the deployer).\n}\n\n// Implements[T] is a type that is be embedded inside a component\n// implementation struct to indicate that the struct implements a component of\n// type T. For example, consider a Cache component.\n//\n//\ttype Cache interface {\n//\t    Get(ctx context.Context, key string) (string, error)\n//\t    Put(ctx context.Context, key, value string) error\n//\t}\n//\n// A concrete type that implements the Cache component is written as follows:\n//\n//\ttype lruCache struct {\n//\t    weaver.Implements[Cache]\n//\t    ...\n//\t}\n//\n// Because Implements is embedded inside the component implementation, methods\n// of Implements are available as methods of the component implementation type\n// and can be invoked directly. For example, given an instance c of type\n// lruCache, we can call c.Logger().\ntype Implements[T any] struct {\n\t// Component logger.\n\tlogger *slog.Logger\n\n\tweaverInfo *weaver.WeaverInfo\n\n\t// Given a component implementation type, there is currently no nice way,\n\t// using reflection, to get the corresponding component interface type [1].\n\t// The component_interface_type field exists to make it possible.\n\t//\n\t// [1]: https://github.com/golang/go/issues/54393.\n\t//\n\t//lint:ignore U1000 See comment above.\n\tcomponent_interface_type T\n\n\t// We embed implementsImpl so that component implementation structs\n\t// implement the Unrouted interface by default but implement the\n\t// RoutedBy[T] interface when they embed WithRouter[T].\n\timplementsImpl\n}\n\n// Logger returns a logger that associates its log entries with this component.\n// Log entries are labeled with any OpenTelemetry trace id and span id in the\n// provided context.\nfunc (i Implements[T]) Logger(ctx context.Context) *slog.Logger {\n\tlogger := i.logger\n\ts := trace.SpanContextFromContext(ctx)\n\tif s.HasTraceID() {\n\t\tlogger = logger.With(\"traceid\", s.TraceID().String())\n\t}\n\tif s.HasSpanID() {\n\t\tlogger = logger.With(\"spanid\", s.SpanID().String())\n\t}\n\treturn logger\n}\n\nfunc (i *Implements[T]) setLogger(logger *slog.Logger) {\n\ti.logger = logger\n}\n\n// Weaver returns runtime information about the deployed application.\nfunc (i Implements[T]) Weaver() WeaverInfo {\n\treturn WeaverInfo(*i.weaverInfo)\n}\n\nfunc (i *Implements[T]) setWeaverInfo(info *weaver.WeaverInfo) {\n\ti.weaverInfo = info\n}\n\n// implements is a method that can only be implemented inside the weaver\n// package. It exists so that a component struct that embeds Implements[T]\n// implements the InstanceOf[T] interface.\n//\n//lint:ignore U1000 implements is used by InstanceOf.\nfunc (Implements[T]) implements(T) {}\n\n// InstanceOf[T] is the interface implemented by a struct that embeds\n// weaver.Implements[T].\ntype InstanceOf[T any] interface {\n\timplements(T)\n}\n\n// Ref[T] is a field that can be placed inside a component implementation\n// struct. T must be a component type. Service Weaver will automatically\n// fill such a field with a handle to the corresponding component.\ntype Ref[T any] struct {\n\tvalue T\n}\n\n// Get returns a handle to the component of type T.\nfunc (r Ref[T]) Get() T { return r.value }\n\n// isRef is an internal method that is only implemented by Ref[T] and is\n// used internally to check that a value is of type Ref[T].\nfunc (r Ref[T]) isRef() {}\n\n// setRef sets the underlying value of a Ref.\nfunc (r *Ref[T]) setRef(value any) {\n\tr.value = value.(T)\n}\n\n// Listener is a network listener that can be placed as a field inside a\n// component implementation struct. Once placed, Service Weaver automatically\n// initializes the Listener and makes it suitable for receiving network\n// traffic. For example:\n//\n//\ttype myComponentImpl struct {\n//\t    weaver.Implements[MyComponent]\n//\t    myListener      weaver.Listener\n//\t    myOtherListener weaver.Listener\n//\t}\n//\n// By default, all listeners listen on address \":0\". This behavior can be\n// modified by passing options for individual listeners in the application\n// config. For example, to specify local addresses for the above two listeners,\n// the user can add the following lines to the application config file:\n//\n//\t[listeners]\n//\tmyListener      = {local_address = \"localhost:9000\"}\n//\tmyOtherListener = {local_address = \"localhost:9001\"}\n//\n// Listeners are identified by their field names in the component\n// implementation structs (e.g., myListener and myOtherListener). If the user\n// wishes to assign different names to their listeners, they may do so by\n// adding a `weaver:\"name\"` struct tag to their listener fields, e.g.:\n//\n//\ttype myComponentImpl struct {\n//\t    weaver.Implements[MyComponent]\n//\t    myListener      weaver.Listener\n//\t    myOtherListener weaver.Listener `weaver:\"mylistener2\"`\n//\t}\n//\n// Listener names must be valid Go identifier names. Listener names must be\n// unique inside a given application binary, regardless of which components\n// they are specified in. For example, it is illegal to declare a Listener\n// field \"foo\" in two different component implementation structs, unless one is\n// renamed using the `weaver:\"name\"` struct tag.\n//\n// HTTP servers constructed using this listener are expected to perform health\n// checks on the reserved HealthzURL path. (Note that this URL path is\n// configured to never receive any user traffic.)\ntype Listener struct {\n\tnet.Listener        // underlying listener\n\tproxyAddr    string // address of proxy that forwards to the listener\n}\n\n// String returns the address clients should dial to connect to the listener;\n// this will be the proxy address if available, otherwise the <host>:<port> for\n// this listener.\nfunc (l Listener) String() string {\n\tif l.proxyAddr != \"\" {\n\t\treturn l.proxyAddr\n\t}\n\treturn l.Addr().String()\n}\n\n// ProxyAddr returns the dialable address of the proxy that forwards traffic to\n// this listener, or returns the empty string if there is no such proxy.\nfunc (l *Listener) ProxyAddr() string {\n\treturn l.proxyAddr\n}\n\n// WithConfig[T] is a type that can be embedded inside a component\n// implementation. The Service Weaver runtime will take per-component\n// configuration information found in the application config file and use it to\n// initialize the contents of T.\n//\n// # Example\n//\n// Consider a cache component where the cache size should be configurable.\n// Define a struct that includes the size, associate it with the component\n// implementation, and use it inside the component methods.\n//\n//\ttype cacheConfig struct\n//\t    Size int\n//\t}\n//\n//\ttype cache struct {\n//\t    weaver.Implements[Cache]\n//\t    weaver.WithConfig[cacheConfig]\n//\t    // ...\n//\t}\n//\n//\tfunc (c *cache) Init(context.Context) error {\n//\t    // Use c.Config().Size...\n//\t    return nil\n//\t}\n//\n// The application config file can specify these values as keys under the\n// full component path.\n//\n//\t[\"example.com/mypkg/Cache\"]\n//\tSize = 1000\n//\n// # Field Names\n//\n// You can use `toml` struct tags to specify the name that should be used for a\n// field in a config file. For example, we can change the cacheConfig struct to\n// the following:\n//\n//\ttype cacheConfig struct\n//\t    Size int `toml:\"my_custom_name\"`\n//\t}\n//\n// And change the config file accordingly:\n//\n//\t[\"example.com/mypkg/Cache\"]\n//\tmy_custom_name = 1000\ntype WithConfig[T any] struct {\n\tconfig T\n}\n\n// Config returns the configuration information for the component that embeds\n// this [weaver.WithConfig].\n//\n// Any fields in T that were not present in the application config file will\n// have their default values.\n//\n// Any fields in the application config file that are not present in T will be\n// flagged as an error at application startup.\nfunc (wc *WithConfig[T]) Config() *T {\n\treturn &wc.config\n}\n\n// getConfig returns the underlying config.\nfunc (wc *WithConfig[T]) getConfig() any {\n\treturn &wc.config\n}\n\n// WithRouter[T] is a type that can be embedded inside a component\n// implementation struct to indicate that calls to a method M on the component\n// must be routed according to the the value returned by T.M().\n//\n// # Example\n//\n// For example, consider a Cache component that maintains an in-memory cache.\n//\n//\ttype Cache interface {\n//\t    Get(ctx context.Context, key string) (string, error)\n//\t    Put(ctx context.Context, key, value string) error\n//\t}\n//\n// We can create a router for the Cache component like this.\n//\n//\ttype cacheRouter struct{}\n//\tfunc (cacheRouter) Get(_ context.Context, key string) string { return key }\n//\tfunc (cacheRouter) Put(_ context.Context, key, value string) string { return key }\n//\n// To associate a router with its component, embed [weaver.WithRouter] in the\n// component implementation.\n//\n//\ttype lruCache struct {\n//\t\tweaver.Implements[Cache]\n//\t\tweaver.WithRouter[cacheRouter]\n//\t}\n//\n// For every component method that needs to be routed (e.g., Get and Put), the\n// associated router should implement an equivalent method (i.e., same name and\n// argument types) whose return type is the routing key. When a component's\n// routed method is invoked, its corresponding router method is invoked to\n// produce a routing key. Method invocations that produce the same key are\n// routed to the same replica.\n//\n// # Routing Keys\n//\n// A routing key can be any integer (e.g., int, int32), float (i.e. float32,\n// float64), or string; or a struct where all fields are integers, floats, or\n// strings. A struct may also embed [AutoMarshal]. For example, the following\n// are valid routing keys.\n//\n//\tint\n//\tint32\n//\tfloat32\n//\tfloat63\n//\tstring\n//\tstruct{}\n//\tstruct{x int}\n//\tstruct{x int; y string}\n//\tstruct{weaver.AutoMarshal; x int; y string}\n//\n// Every router method must return the same routing key type. The following,\n// for example, is invalid:\n//\n//\t// ERROR: Get returns a string, but Put returns an int.\n//\tfunc (cacheRouter) Get(_ context.Context, key string) string { return key }\n//\tfunc (cacheRouter) Put(_ context.Context, key, value string) int { return 42 }\n//\n// # Semantics\n//\n// NOTE that routing is done on a best-effort basis. Service Weaver will try to\n// route method invocations with the same key to the same replica, but this is\n// not guaranteed. As a corollary, you should never depend on routing for\n// correctness. Only use routing to increase performance in the common case.\ntype WithRouter[T any] struct{}\n\n// routedBy(T) implements the RoutedBy[T] interface.\n//\n//lint:ignore U1000 routedBy is used by RoutedBy and Unrouted.\nfunc (WithRouter[T]) routedBy(T) {}\n\n// RoutedBy[T] is the interface implemented by a struct that embeds\n// weaver.RoutedBy[T].\ntype RoutedBy[T any] interface {\n\troutedBy(T)\n}\n\n// See Implements.implementsImpl.\ntype implementsImpl struct{}\n\n// See [Unrouted].\ntype if_youre_seeing_this_you_probably_forgot_to_run_weaver_generate struct{}\n\n// See [Unrouted].\nfunc (implementsImpl) routedBy(if_youre_seeing_this_you_probably_forgot_to_run_weaver_generate) {}\n\n// Unrouted is the interface implemented by instances that don't embed\n// weaver.WithRouter[T].\ntype Unrouted interface {\n\troutedBy(if_youre_seeing_this_you_probably_forgot_to_run_weaver_generate)\n}\n\nvar _ Unrouted = (*implementsImpl)(nil)\n\n// AutoMarshal is a type that can be embedded within a struct to indicate that\n// \"weaver generate\" should generate serialization methods for the struct.\n//\n// Named struct types are not serializable by default. However, they can\n// trivially be made serializable by embedding AutoMarshal. For example:\n//\n//\ttype Pair struct {\n//\t    weaver.AutoMarshal\n//\t    x, y int\n//\t}\n//\n// The AutoMarshal embedding instructs \"weaver generate\" to generate\n// serialization methods for the struct, Pair in this example.\n//\n// Note, however, that AutoMarshal cannot magically make any type serializable.\n// For example, \"weaver generate\" will raise an error for the following code\n// because the NotSerializable struct is fundamentally not serializable.\n//\n//\t// ERROR: NotSerializable cannot be made serializable.\n//\ttype NotSerializable struct {\n//\t    weaver.AutoMarshal\n//\t    f func()   // functions are not serializable\n//\t    c chan int // chans are not serializable\n//\t}\ntype AutoMarshal struct{}\n\n// TODO(mwhittaker): The following methods have AutoMarshal implement\n// codegen.AutoMarshal. Alternatively, we could modify the code generator to\n// ignore AutoMarshal during marshaling and unmarshaling.\n\nfunc (AutoMarshal) WeaverMarshal(*codegen.Encoder)   {}\nfunc (AutoMarshal) WeaverUnmarshal(*codegen.Decoder) {}\n\ntype NotRetriable interface{}\n"
        },
        {
          "name": "weaver_gen.go",
          "type": "blob",
          "size": 71.203125,
          "content": "// Code generated by \"weaver generate\". DO NOT EDIT.\n//go:build !ignoreWeaverGen\n\npackage weaver\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/ServiceWeaver/weaver/runtime/codegen\"\n\t\"github.com/ServiceWeaver/weaver/runtime/protos\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"reflect\"\n)\n\nfunc init() {\n\tcodegen.Register(codegen.Registration{\n\t\tName:  \"github.com/ServiceWeaver/weaver/deployerControl\",\n\t\tIface: reflect.TypeOf((*deployerControl)(nil)).Elem(),\n\t\tImpl:  reflect.TypeOf(localDeployerControl{}),\n\t\tLocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {\n\t\t\treturn deployerControl_local_stub{impl: impl.(deployerControl), tracer: tracer, activateComponentMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"ActivateComponent\", Remote: false, Generated: true}), exportListenerMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"ExportListener\", Remote: false, Generated: true}), getListenerAddressMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"GetListenerAddress\", Remote: false, Generated: true}), getSelfCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"GetSelfCertificate\", Remote: false, Generated: true}), handleTraceSpansMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"HandleTraceSpans\", Remote: false, Generated: true}), logBatchMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"LogBatch\", Remote: false, Generated: true}), verifyClientCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"VerifyClientCertificate\", Remote: false, Generated: true}), verifyServerCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"VerifyServerCertificate\", Remote: false, Generated: true})}\n\t\t},\n\t\tClientStubFn: func(stub codegen.Stub, caller string) any {\n\t\t\treturn deployerControl_client_stub{stub: stub, activateComponentMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"ActivateComponent\", Remote: true, Generated: true}), exportListenerMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"ExportListener\", Remote: true, Generated: true}), getListenerAddressMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"GetListenerAddress\", Remote: true, Generated: true}), getSelfCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"GetSelfCertificate\", Remote: true, Generated: true}), handleTraceSpansMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"HandleTraceSpans\", Remote: true, Generated: true}), logBatchMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"LogBatch\", Remote: true, Generated: true}), verifyClientCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"VerifyClientCertificate\", Remote: true, Generated: true}), verifyServerCertificateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/deployerControl\", Method: \"VerifyServerCertificate\", Remote: true, Generated: true})}\n\t\t},\n\t\tServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {\n\t\t\treturn deployerControl_server_stub{impl: impl.(deployerControl), addLoad: addLoad}\n\t\t},\n\t\tReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {\n\t\t\treturn deployerControl_reflect_stub{caller: caller}\n\t\t},\n\t\tRefData: \"\",\n\t})\n\tcodegen.Register(codegen.Registration{\n\t\tName:  \"github.com/ServiceWeaver/weaver/weaveletControl\",\n\t\tIface: reflect.TypeOf((*weaveletControl)(nil)).Elem(),\n\t\tImpl:  reflect.TypeOf(noopWeaveletControl{}),\n\t\tLocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {\n\t\t\treturn weaveletControl_local_stub{impl: impl.(weaveletControl), tracer: tracer, getHealthMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"GetHealth\", Remote: false, Generated: true}), getLoadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"GetLoad\", Remote: false, Generated: true}), getMetricsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"GetMetrics\", Remote: false, Generated: true}), getProfileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"GetProfile\", Remote: false, Generated: true}), initWeaveletMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"InitWeavelet\", Remote: false, Generated: true}), updateComponentsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"UpdateComponents\", Remote: false, Generated: true}), updateRoutingInfoMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"UpdateRoutingInfo\", Remote: false, Generated: true})}\n\t\t},\n\t\tClientStubFn: func(stub codegen.Stub, caller string) any {\n\t\t\treturn weaveletControl_client_stub{stub: stub, getHealthMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"GetHealth\", Remote: true, Generated: true}), getLoadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"GetLoad\", Remote: true, Generated: true}), getMetricsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"GetMetrics\", Remote: true, Generated: true}), getProfileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"GetProfile\", Remote: true, Generated: true}), initWeaveletMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"InitWeavelet\", Remote: true, Generated: true}), updateComponentsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"UpdateComponents\", Remote: true, Generated: true}), updateRoutingInfoMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: \"github.com/ServiceWeaver/weaver/weaveletControl\", Method: \"UpdateRoutingInfo\", Remote: true, Generated: true})}\n\t\t},\n\t\tServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {\n\t\t\treturn weaveletControl_server_stub{impl: impl.(weaveletControl), addLoad: addLoad}\n\t\t},\n\t\tReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {\n\t\t\treturn weaveletControl_reflect_stub{caller: caller}\n\t\t},\n\t\tRefData: \"\",\n\t})\n}\n\n// weaver.InstanceOf checks.\nvar _ InstanceOf[deployerControl] = (*localDeployerControl)(nil)\nvar _ InstanceOf[weaveletControl] = (*noopWeaveletControl)(nil)\n\n// weaver.Router checks.\nvar _ Unrouted = (*localDeployerControl)(nil)\nvar _ Unrouted = (*noopWeaveletControl)(nil)\n\n// Local stub implementations.\n\ntype deployerControl_local_stub struct {\n\timpl                           deployerControl\n\ttracer                         trace.Tracer\n\tactivateComponentMetrics       *codegen.MethodMetrics\n\texportListenerMetrics          *codegen.MethodMetrics\n\tgetListenerAddressMetrics      *codegen.MethodMetrics\n\tgetSelfCertificateMetrics      *codegen.MethodMetrics\n\thandleTraceSpansMetrics        *codegen.MethodMetrics\n\tlogBatchMetrics                *codegen.MethodMetrics\n\tverifyClientCertificateMetrics *codegen.MethodMetrics\n\tverifyServerCertificateMetrics *codegen.MethodMetrics\n}\n\n// Check that deployerControl_local_stub implements the deployerControl interface.\nvar _ deployerControl = (*deployerControl_local_stub)(nil)\n\nfunc (s deployerControl_local_stub) ActivateComponent(ctx context.Context, a0 *protos.ActivateComponentRequest) (r0 *protos.ActivateComponentReply, err error) {\n\t// Update metrics.\n\tbegin := s.activateComponentMetrics.Begin()\n\tdefer func() { s.activateComponentMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.deployerControl.ActivateComponent\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.ActivateComponent(ctx, a0)\n}\n\nfunc (s deployerControl_local_stub) ExportListener(ctx context.Context, a0 *protos.ExportListenerRequest) (r0 *protos.ExportListenerReply, err error) {\n\t// Update metrics.\n\tbegin := s.exportListenerMetrics.Begin()\n\tdefer func() { s.exportListenerMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.deployerControl.ExportListener\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.ExportListener(ctx, a0)\n}\n\nfunc (s deployerControl_local_stub) GetListenerAddress(ctx context.Context, a0 *protos.GetListenerAddressRequest) (r0 *protos.GetListenerAddressReply, err error) {\n\t// Update metrics.\n\tbegin := s.getListenerAddressMetrics.Begin()\n\tdefer func() { s.getListenerAddressMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.deployerControl.GetListenerAddress\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.GetListenerAddress(ctx, a0)\n}\n\nfunc (s deployerControl_local_stub) GetSelfCertificate(ctx context.Context, a0 *protos.GetSelfCertificateRequest) (r0 *protos.GetSelfCertificateReply, err error) {\n\t// Update metrics.\n\tbegin := s.getSelfCertificateMetrics.Begin()\n\tdefer func() { s.getSelfCertificateMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.deployerControl.GetSelfCertificate\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.GetSelfCertificate(ctx, a0)\n}\n\nfunc (s deployerControl_local_stub) HandleTraceSpans(ctx context.Context, a0 *protos.TraceSpans) (err error) {\n\t// Update metrics.\n\tbegin := s.handleTraceSpansMetrics.Begin()\n\tdefer func() { s.handleTraceSpansMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.deployerControl.HandleTraceSpans\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.HandleTraceSpans(ctx, a0)\n}\n\nfunc (s deployerControl_local_stub) LogBatch(ctx context.Context, a0 *protos.LogEntryBatch) (err error) {\n\t// Update metrics.\n\tbegin := s.logBatchMetrics.Begin()\n\tdefer func() { s.logBatchMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.deployerControl.LogBatch\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.LogBatch(ctx, a0)\n}\n\nfunc (s deployerControl_local_stub) VerifyClientCertificate(ctx context.Context, a0 *protos.VerifyClientCertificateRequest) (r0 *protos.VerifyClientCertificateReply, err error) {\n\t// Update metrics.\n\tbegin := s.verifyClientCertificateMetrics.Begin()\n\tdefer func() { s.verifyClientCertificateMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.deployerControl.VerifyClientCertificate\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.VerifyClientCertificate(ctx, a0)\n}\n\nfunc (s deployerControl_local_stub) VerifyServerCertificate(ctx context.Context, a0 *protos.VerifyServerCertificateRequest) (r0 *protos.VerifyServerCertificateReply, err error) {\n\t// Update metrics.\n\tbegin := s.verifyServerCertificateMetrics.Begin()\n\tdefer func() { s.verifyServerCertificateMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.deployerControl.VerifyServerCertificate\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.VerifyServerCertificate(ctx, a0)\n}\n\ntype weaveletControl_local_stub struct {\n\timpl                     weaveletControl\n\ttracer                   trace.Tracer\n\tgetHealthMetrics         *codegen.MethodMetrics\n\tgetLoadMetrics           *codegen.MethodMetrics\n\tgetMetricsMetrics        *codegen.MethodMetrics\n\tgetProfileMetrics        *codegen.MethodMetrics\n\tinitWeaveletMetrics      *codegen.MethodMetrics\n\tupdateComponentsMetrics  *codegen.MethodMetrics\n\tupdateRoutingInfoMetrics *codegen.MethodMetrics\n}\n\n// Check that weaveletControl_local_stub implements the weaveletControl interface.\nvar _ weaveletControl = (*weaveletControl_local_stub)(nil)\n\nfunc (s weaveletControl_local_stub) GetHealth(ctx context.Context, a0 *protos.GetHealthRequest) (r0 *protos.GetHealthReply, err error) {\n\t// Update metrics.\n\tbegin := s.getHealthMetrics.Begin()\n\tdefer func() { s.getHealthMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.weaveletControl.GetHealth\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.GetHealth(ctx, a0)\n}\n\nfunc (s weaveletControl_local_stub) GetLoad(ctx context.Context, a0 *protos.GetLoadRequest) (r0 *protos.GetLoadReply, err error) {\n\t// Update metrics.\n\tbegin := s.getLoadMetrics.Begin()\n\tdefer func() { s.getLoadMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.weaveletControl.GetLoad\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.GetLoad(ctx, a0)\n}\n\nfunc (s weaveletControl_local_stub) GetMetrics(ctx context.Context, a0 *protos.GetMetricsRequest) (r0 *protos.GetMetricsReply, err error) {\n\t// Update metrics.\n\tbegin := s.getMetricsMetrics.Begin()\n\tdefer func() { s.getMetricsMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.weaveletControl.GetMetrics\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.GetMetrics(ctx, a0)\n}\n\nfunc (s weaveletControl_local_stub) GetProfile(ctx context.Context, a0 *protos.GetProfileRequest) (r0 *protos.GetProfileReply, err error) {\n\t// Update metrics.\n\tbegin := s.getProfileMetrics.Begin()\n\tdefer func() { s.getProfileMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.weaveletControl.GetProfile\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.GetProfile(ctx, a0)\n}\n\nfunc (s weaveletControl_local_stub) InitWeavelet(ctx context.Context, a0 *protos.InitWeaveletRequest) (r0 *protos.InitWeaveletReply, err error) {\n\t// Update metrics.\n\tbegin := s.initWeaveletMetrics.Begin()\n\tdefer func() { s.initWeaveletMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.weaveletControl.InitWeavelet\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.InitWeavelet(ctx, a0)\n}\n\nfunc (s weaveletControl_local_stub) UpdateComponents(ctx context.Context, a0 *protos.UpdateComponentsRequest) (r0 *protos.UpdateComponentsReply, err error) {\n\t// Update metrics.\n\tbegin := s.updateComponentsMetrics.Begin()\n\tdefer func() { s.updateComponentsMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.weaveletControl.UpdateComponents\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.UpdateComponents(ctx, a0)\n}\n\nfunc (s weaveletControl_local_stub) UpdateRoutingInfo(ctx context.Context, a0 *protos.UpdateRoutingInfoRequest) (r0 *protos.UpdateRoutingInfoReply, err error) {\n\t// Update metrics.\n\tbegin := s.updateRoutingInfoMetrics.Begin()\n\tdefer func() { s.updateRoutingInfoMetrics.End(begin, err != nil, 0, 0) }()\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.tracer.Start(ctx, \"weaver.weaveletControl.UpdateRoutingInfo\", trace.WithSpanKind(trace.SpanKindInternal))\n\t\tdefer func() {\n\t\t\tif err != nil {\n\t\t\t\tspan.RecordError(err)\n\t\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t\t}\n\t\t\tspan.End()\n\t\t}()\n\t}\n\n\treturn s.impl.UpdateRoutingInfo(ctx, a0)\n}\n\n// Client stub implementations.\n\ntype deployerControl_client_stub struct {\n\tstub                           codegen.Stub\n\tactivateComponentMetrics       *codegen.MethodMetrics\n\texportListenerMetrics          *codegen.MethodMetrics\n\tgetListenerAddressMetrics      *codegen.MethodMetrics\n\tgetSelfCertificateMetrics      *codegen.MethodMetrics\n\thandleTraceSpansMetrics        *codegen.MethodMetrics\n\tlogBatchMetrics                *codegen.MethodMetrics\n\tverifyClientCertificateMetrics *codegen.MethodMetrics\n\tverifyServerCertificateMetrics *codegen.MethodMetrics\n}\n\n// Check that deployerControl_client_stub implements the deployerControl interface.\nvar _ deployerControl = (*deployerControl_client_stub)(nil)\n\nfunc (s deployerControl_client_stub) ActivateComponent(ctx context.Context, a0 *protos.ActivateComponentRequest) (r0 *protos.ActivateComponentReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.activateComponentMetrics.Begin()\n\tdefer func() { s.activateComponentMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.deployerControl.ActivateComponent\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_ActivateComponentRequest_73adf343(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_ActivateComponentReply_5e57d605(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s deployerControl_client_stub) ExportListener(ctx context.Context, a0 *protos.ExportListenerRequest) (r0 *protos.ExportListenerReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.exportListenerMetrics.Begin()\n\tdefer func() { s.exportListenerMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.deployerControl.ExportListener\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_ExportListenerRequest_b494514e(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_ExportListenerReply_b0fc34d0(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s deployerControl_client_stub) GetListenerAddress(ctx context.Context, a0 *protos.GetListenerAddressRequest) (r0 *protos.GetListenerAddressReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.getListenerAddressMetrics.Begin()\n\tdefer func() { s.getListenerAddressMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.deployerControl.GetListenerAddress\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetListenerAddressRequest_5a58feb0(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_GetListenerAddressReply_8bfe2caa(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s deployerControl_client_stub) GetSelfCertificate(ctx context.Context, a0 *protos.GetSelfCertificateRequest) (r0 *protos.GetSelfCertificateReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.getSelfCertificateMetrics.Begin()\n\tdefer func() { s.getSelfCertificateMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.deployerControl.GetSelfCertificate\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetSelfCertificateRequest_0de4e3b4(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_GetSelfCertificateReply_12277ec8(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s deployerControl_client_stub) HandleTraceSpans(ctx context.Context, a0 *protos.TraceSpans) (err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.handleTraceSpansMetrics.Begin()\n\tdefer func() { s.handleTraceSpansMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.deployerControl.HandleTraceSpans\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_TraceSpans_af16efd0(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s deployerControl_client_stub) LogBatch(ctx context.Context, a0 *protos.LogEntryBatch) (err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.logBatchMetrics.Begin()\n\tdefer func() { s.logBatchMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.deployerControl.LogBatch\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_LogEntryBatch_fec9a5d4(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s deployerControl_client_stub) VerifyClientCertificate(ctx context.Context, a0 *protos.VerifyClientCertificateRequest) (r0 *protos.VerifyClientCertificateReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.verifyClientCertificateMetrics.Begin()\n\tdefer func() { s.verifyClientCertificateMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.deployerControl.VerifyClientCertificate\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_VerifyClientCertificateRequest_f8d21781(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 6, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_VerifyClientCertificateReply_c76e39ec(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s deployerControl_client_stub) VerifyServerCertificate(ctx context.Context, a0 *protos.VerifyServerCertificateRequest) (r0 *protos.VerifyServerCertificateReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.verifyServerCertificateMetrics.Begin()\n\tdefer func() { s.verifyServerCertificateMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.deployerControl.VerifyServerCertificate\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_VerifyServerCertificateRequest_9c56ee67(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 7, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_VerifyServerCertificateReply_c0d4bd3b(dec)\n\terr = dec.Error()\n\treturn\n}\n\ntype weaveletControl_client_stub struct {\n\tstub                     codegen.Stub\n\tgetHealthMetrics         *codegen.MethodMetrics\n\tgetLoadMetrics           *codegen.MethodMetrics\n\tgetMetricsMetrics        *codegen.MethodMetrics\n\tgetProfileMetrics        *codegen.MethodMetrics\n\tinitWeaveletMetrics      *codegen.MethodMetrics\n\tupdateComponentsMetrics  *codegen.MethodMetrics\n\tupdateRoutingInfoMetrics *codegen.MethodMetrics\n}\n\n// Check that weaveletControl_client_stub implements the weaveletControl interface.\nvar _ weaveletControl = (*weaveletControl_client_stub)(nil)\n\nfunc (s weaveletControl_client_stub) GetHealth(ctx context.Context, a0 *protos.GetHealthRequest) (r0 *protos.GetHealthReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.getHealthMetrics.Begin()\n\tdefer func() { s.getHealthMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.weaveletControl.GetHealth\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetHealthRequest_fd6083fb(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_GetHealthReply_b2d11423(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s weaveletControl_client_stub) GetLoad(ctx context.Context, a0 *protos.GetLoadRequest) (r0 *protos.GetLoadReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.getLoadMetrics.Begin()\n\tdefer func() { s.getLoadMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.weaveletControl.GetLoad\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetLoadRequest_d733b2cf(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_GetLoadReply_cf8279ad(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s weaveletControl_client_stub) GetMetrics(ctx context.Context, a0 *protos.GetMetricsRequest) (r0 *protos.GetMetricsReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.getMetricsMetrics.Begin()\n\tdefer func() { s.getMetricsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.weaveletControl.GetMetrics\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetMetricsRequest_010b3cd9(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_GetMetricsReply_3c7180e4(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s weaveletControl_client_stub) GetProfile(ctx context.Context, a0 *protos.GetProfileRequest) (r0 *protos.GetProfileReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.getProfileMetrics.Begin()\n\tdefer func() { s.getProfileMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.weaveletControl.GetProfile\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetProfileRequest_d1544fcf(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_GetProfileReply_10a79dcc(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s weaveletControl_client_stub) InitWeavelet(ctx context.Context, a0 *protos.InitWeaveletRequest) (r0 *protos.InitWeaveletReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.initWeaveletMetrics.Begin()\n\tdefer func() { s.initWeaveletMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.weaveletControl.InitWeavelet\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_InitWeaveletRequest_d1f5204c(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_InitWeaveletReply_565d8c96(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s weaveletControl_client_stub) UpdateComponents(ctx context.Context, a0 *protos.UpdateComponentsRequest) (r0 *protos.UpdateComponentsReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.updateComponentsMetrics.Begin()\n\tdefer func() { s.updateComponentsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.weaveletControl.UpdateComponents\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_UpdateComponentsRequest_d1b56e1f(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_UpdateComponentsReply_93bebb77(dec)\n\terr = dec.Error()\n\treturn\n}\n\nfunc (s weaveletControl_client_stub) UpdateRoutingInfo(ctx context.Context, a0 *protos.UpdateRoutingInfoRequest) (r0 *protos.UpdateRoutingInfoReply, err error) {\n\t// Update metrics.\n\tvar requestBytes, replyBytes int\n\tbegin := s.updateRoutingInfoMetrics.Begin()\n\tdefer func() { s.updateRoutingInfoMetrics.End(begin, err != nil, requestBytes, replyBytes) }()\n\n\tspan := trace.SpanFromContext(ctx)\n\tif span.SpanContext().IsValid() {\n\t\t// Create a child span for this method.\n\t\tctx, span = s.stub.Tracer().Start(ctx, \"weaver.weaveletControl.UpdateRoutingInfo\", trace.WithSpanKind(trace.SpanKindClient))\n\t}\n\n\tdefer func() {\n\t\t// Catch and return any panics detected during encoding/decoding/rpc.\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t\tif err != nil {\n\t\t\t\terr = errors.Join(RemoteCallError, err)\n\t\t\t}\n\t\t}\n\n\t\tif err != nil {\n\t\t\tspan.RecordError(err)\n\t\t\tspan.SetStatus(codes.Error, err.Error())\n\t\t}\n\t\tspan.End()\n\n\t}()\n\n\t// Encode arguments.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_UpdateRoutingInfoRequest_e752cfad(enc, a0)\n\tvar shardKey uint64\n\n\t// Call the remote method.\n\trequestBytes = len(enc.Data())\n\tvar results []byte\n\tresults, err = s.stub.Run(ctx, 6, enc.Data(), shardKey)\n\treplyBytes = len(results)\n\tif err != nil {\n\t\terr = errors.Join(RemoteCallError, err)\n\t\treturn\n\t}\n\n\t// Decode the results.\n\tdec := codegen.NewDecoder(results)\n\tr0 = serviceweaver_dec_ptr_UpdateRoutingInfoReply_d1854fd5(dec)\n\terr = dec.Error()\n\treturn\n}\n\n// Note that \"weaver generate\" will always generate the error message below.\n// Everything is okay. The error message is only relevant if you see it when\n// you run \"go build\" or \"go run\".\nvar _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`\n\nERROR: You generated this file with 'weaver generate' (devel) (codegen\nversion v0.24.0). The generated code is incompatible with the version of the\ngithub.com/ServiceWeaver/weaver module that you're using. The weaver module\nversion can be found in your go.mod file or by running the following command.\n\n    go list -m github.com/ServiceWeaver/weaver\n\nWe recommend updating the weaver module and the 'weaver generate' command by\nrunning the following.\n\n    go get github.com/ServiceWeaver/weaver@latest\n    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest\n\nThen, re-run 'weaver generate' and re-build your code. If the problem persists,\nplease file an issue at https://github.com/ServiceWeaver/weaver/issues.\n\n`)\n\n// Server stub implementations.\n\ntype deployerControl_server_stub struct {\n\timpl    deployerControl\n\taddLoad func(key uint64, load float64)\n}\n\n// Check that deployerControl_server_stub implements the codegen.Server interface.\nvar _ codegen.Server = (*deployerControl_server_stub)(nil)\n\n// GetStubFn implements the codegen.Server interface.\nfunc (s deployerControl_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {\n\tswitch method {\n\tcase \"ActivateComponent\":\n\t\treturn s.activateComponent\n\tcase \"ExportListener\":\n\t\treturn s.exportListener\n\tcase \"GetListenerAddress\":\n\t\treturn s.getListenerAddress\n\tcase \"GetSelfCertificate\":\n\t\treturn s.getSelfCertificate\n\tcase \"HandleTraceSpans\":\n\t\treturn s.handleTraceSpans\n\tcase \"LogBatch\":\n\t\treturn s.logBatch\n\tcase \"VerifyClientCertificate\":\n\t\treturn s.verifyClientCertificate\n\tcase \"VerifyServerCertificate\":\n\t\treturn s.verifyServerCertificate\n\tdefault:\n\t\treturn nil\n\t}\n}\n\nfunc (s deployerControl_server_stub) activateComponent(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.ActivateComponentRequest\n\ta0 = serviceweaver_dec_ptr_ActivateComponentRequest_73adf343(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.ActivateComponent(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_ActivateComponentReply_5e57d605(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s deployerControl_server_stub) exportListener(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.ExportListenerRequest\n\ta0 = serviceweaver_dec_ptr_ExportListenerRequest_b494514e(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.ExportListener(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_ExportListenerReply_b0fc34d0(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s deployerControl_server_stub) getListenerAddress(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.GetListenerAddressRequest\n\ta0 = serviceweaver_dec_ptr_GetListenerAddressRequest_5a58feb0(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.GetListenerAddress(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetListenerAddressReply_8bfe2caa(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s deployerControl_server_stub) getSelfCertificate(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.GetSelfCertificateRequest\n\ta0 = serviceweaver_dec_ptr_GetSelfCertificateRequest_0de4e3b4(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.GetSelfCertificate(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetSelfCertificateReply_12277ec8(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s deployerControl_server_stub) handleTraceSpans(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.TraceSpans\n\ta0 = serviceweaver_dec_ptr_TraceSpans_af16efd0(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tappErr := s.impl.HandleTraceSpans(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s deployerControl_server_stub) logBatch(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.LogEntryBatch\n\ta0 = serviceweaver_dec_ptr_LogEntryBatch_fec9a5d4(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tappErr := s.impl.LogBatch(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s deployerControl_server_stub) verifyClientCertificate(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.VerifyClientCertificateRequest\n\ta0 = serviceweaver_dec_ptr_VerifyClientCertificateRequest_f8d21781(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.VerifyClientCertificate(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_VerifyClientCertificateReply_c76e39ec(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s deployerControl_server_stub) verifyServerCertificate(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.VerifyServerCertificateRequest\n\ta0 = serviceweaver_dec_ptr_VerifyServerCertificateRequest_9c56ee67(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.VerifyServerCertificate(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_VerifyServerCertificateReply_c0d4bd3b(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\ntype weaveletControl_server_stub struct {\n\timpl    weaveletControl\n\taddLoad func(key uint64, load float64)\n}\n\n// Check that weaveletControl_server_stub implements the codegen.Server interface.\nvar _ codegen.Server = (*weaveletControl_server_stub)(nil)\n\n// GetStubFn implements the codegen.Server interface.\nfunc (s weaveletControl_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {\n\tswitch method {\n\tcase \"GetHealth\":\n\t\treturn s.getHealth\n\tcase \"GetLoad\":\n\t\treturn s.getLoad\n\tcase \"GetMetrics\":\n\t\treturn s.getMetrics\n\tcase \"GetProfile\":\n\t\treturn s.getProfile\n\tcase \"InitWeavelet\":\n\t\treturn s.initWeavelet\n\tcase \"UpdateComponents\":\n\t\treturn s.updateComponents\n\tcase \"UpdateRoutingInfo\":\n\t\treturn s.updateRoutingInfo\n\tdefault:\n\t\treturn nil\n\t}\n}\n\nfunc (s weaveletControl_server_stub) getHealth(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.GetHealthRequest\n\ta0 = serviceweaver_dec_ptr_GetHealthRequest_fd6083fb(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.GetHealth(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetHealthReply_b2d11423(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s weaveletControl_server_stub) getLoad(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.GetLoadRequest\n\ta0 = serviceweaver_dec_ptr_GetLoadRequest_d733b2cf(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.GetLoad(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetLoadReply_cf8279ad(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s weaveletControl_server_stub) getMetrics(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.GetMetricsRequest\n\ta0 = serviceweaver_dec_ptr_GetMetricsRequest_010b3cd9(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.GetMetrics(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetMetricsReply_3c7180e4(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s weaveletControl_server_stub) getProfile(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.GetProfileRequest\n\ta0 = serviceweaver_dec_ptr_GetProfileRequest_d1544fcf(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.GetProfile(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_GetProfileReply_10a79dcc(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s weaveletControl_server_stub) initWeavelet(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.InitWeaveletRequest\n\ta0 = serviceweaver_dec_ptr_InitWeaveletRequest_d1f5204c(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.InitWeavelet(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_InitWeaveletReply_565d8c96(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s weaveletControl_server_stub) updateComponents(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.UpdateComponentsRequest\n\ta0 = serviceweaver_dec_ptr_UpdateComponentsRequest_d1b56e1f(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.UpdateComponents(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_UpdateComponentsReply_93bebb77(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\nfunc (s weaveletControl_server_stub) updateRoutingInfo(ctx context.Context, args []byte) (res []byte, err error) {\n\t// Catch and return any panics detected during encoding/decoding/rpc.\n\tdefer func() {\n\t\tif err == nil {\n\t\t\terr = codegen.CatchPanics(recover())\n\t\t}\n\t}()\n\n\t// Decode arguments.\n\tdec := codegen.NewDecoder(args)\n\tvar a0 *protos.UpdateRoutingInfoRequest\n\ta0 = serviceweaver_dec_ptr_UpdateRoutingInfoRequest_e752cfad(dec)\n\n\t// TODO(rgrandl): The deferred function above will recover from panics in the\n\t// user code: fix this.\n\t// Call the local method.\n\tr0, appErr := s.impl.UpdateRoutingInfo(ctx, a0)\n\n\t// Encode the results.\n\tenc := codegen.NewEncoder()\n\tserviceweaver_enc_ptr_UpdateRoutingInfoReply_d1854fd5(enc, r0)\n\tenc.Error(appErr)\n\treturn enc.Data(), nil\n}\n\n// Reflect stub implementations.\n\ntype deployerControl_reflect_stub struct {\n\tcaller func(string, context.Context, []any, []any) error\n}\n\n// Check that deployerControl_reflect_stub implements the deployerControl interface.\nvar _ deployerControl = (*deployerControl_reflect_stub)(nil)\n\nfunc (s deployerControl_reflect_stub) ActivateComponent(ctx context.Context, a0 *protos.ActivateComponentRequest) (r0 *protos.ActivateComponentReply, err error) {\n\terr = s.caller(\"ActivateComponent\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s deployerControl_reflect_stub) ExportListener(ctx context.Context, a0 *protos.ExportListenerRequest) (r0 *protos.ExportListenerReply, err error) {\n\terr = s.caller(\"ExportListener\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s deployerControl_reflect_stub) GetListenerAddress(ctx context.Context, a0 *protos.GetListenerAddressRequest) (r0 *protos.GetListenerAddressReply, err error) {\n\terr = s.caller(\"GetListenerAddress\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s deployerControl_reflect_stub) GetSelfCertificate(ctx context.Context, a0 *protos.GetSelfCertificateRequest) (r0 *protos.GetSelfCertificateReply, err error) {\n\terr = s.caller(\"GetSelfCertificate\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s deployerControl_reflect_stub) HandleTraceSpans(ctx context.Context, a0 *protos.TraceSpans) (err error) {\n\terr = s.caller(\"HandleTraceSpans\", ctx, []any{a0}, []any{})\n\treturn\n}\n\nfunc (s deployerControl_reflect_stub) LogBatch(ctx context.Context, a0 *protos.LogEntryBatch) (err error) {\n\terr = s.caller(\"LogBatch\", ctx, []any{a0}, []any{})\n\treturn\n}\n\nfunc (s deployerControl_reflect_stub) VerifyClientCertificate(ctx context.Context, a0 *protos.VerifyClientCertificateRequest) (r0 *protos.VerifyClientCertificateReply, err error) {\n\terr = s.caller(\"VerifyClientCertificate\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s deployerControl_reflect_stub) VerifyServerCertificate(ctx context.Context, a0 *protos.VerifyServerCertificateRequest) (r0 *protos.VerifyServerCertificateReply, err error) {\n\terr = s.caller(\"VerifyServerCertificate\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\ntype weaveletControl_reflect_stub struct {\n\tcaller func(string, context.Context, []any, []any) error\n}\n\n// Check that weaveletControl_reflect_stub implements the weaveletControl interface.\nvar _ weaveletControl = (*weaveletControl_reflect_stub)(nil)\n\nfunc (s weaveletControl_reflect_stub) GetHealth(ctx context.Context, a0 *protos.GetHealthRequest) (r0 *protos.GetHealthReply, err error) {\n\terr = s.caller(\"GetHealth\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s weaveletControl_reflect_stub) GetLoad(ctx context.Context, a0 *protos.GetLoadRequest) (r0 *protos.GetLoadReply, err error) {\n\terr = s.caller(\"GetLoad\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s weaveletControl_reflect_stub) GetMetrics(ctx context.Context, a0 *protos.GetMetricsRequest) (r0 *protos.GetMetricsReply, err error) {\n\terr = s.caller(\"GetMetrics\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s weaveletControl_reflect_stub) GetProfile(ctx context.Context, a0 *protos.GetProfileRequest) (r0 *protos.GetProfileReply, err error) {\n\terr = s.caller(\"GetProfile\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s weaveletControl_reflect_stub) InitWeavelet(ctx context.Context, a0 *protos.InitWeaveletRequest) (r0 *protos.InitWeaveletReply, err error) {\n\terr = s.caller(\"InitWeavelet\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s weaveletControl_reflect_stub) UpdateComponents(ctx context.Context, a0 *protos.UpdateComponentsRequest) (r0 *protos.UpdateComponentsReply, err error) {\n\terr = s.caller(\"UpdateComponents\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\nfunc (s weaveletControl_reflect_stub) UpdateRoutingInfo(ctx context.Context, a0 *protos.UpdateRoutingInfoRequest) (r0 *protos.UpdateRoutingInfoReply, err error) {\n\terr = s.caller(\"UpdateRoutingInfo\", ctx, []any{a0}, []any{&r0})\n\treturn\n}\n\n// Encoding/decoding implementations.\n\nfunc serviceweaver_enc_ptr_ActivateComponentRequest_73adf343(enc *codegen.Encoder, arg *protos.ActivateComponentRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_ActivateComponentRequest_73adf343(dec *codegen.Decoder) *protos.ActivateComponentRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.ActivateComponentRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_ActivateComponentReply_5e57d605(enc *codegen.Encoder, arg *protos.ActivateComponentReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_ActivateComponentReply_5e57d605(dec *codegen.Decoder) *protos.ActivateComponentReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.ActivateComponentReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_ExportListenerRequest_b494514e(enc *codegen.Encoder, arg *protos.ExportListenerRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_ExportListenerRequest_b494514e(dec *codegen.Decoder) *protos.ExportListenerRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.ExportListenerRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_ExportListenerReply_b0fc34d0(enc *codegen.Encoder, arg *protos.ExportListenerReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_ExportListenerReply_b0fc34d0(dec *codegen.Decoder) *protos.ExportListenerReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.ExportListenerReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetListenerAddressRequest_5a58feb0(enc *codegen.Encoder, arg *protos.GetListenerAddressRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetListenerAddressRequest_5a58feb0(dec *codegen.Decoder) *protos.GetListenerAddressRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetListenerAddressRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetListenerAddressReply_8bfe2caa(enc *codegen.Encoder, arg *protos.GetListenerAddressReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetListenerAddressReply_8bfe2caa(dec *codegen.Decoder) *protos.GetListenerAddressReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetListenerAddressReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetSelfCertificateRequest_0de4e3b4(enc *codegen.Encoder, arg *protos.GetSelfCertificateRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetSelfCertificateRequest_0de4e3b4(dec *codegen.Decoder) *protos.GetSelfCertificateRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetSelfCertificateRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetSelfCertificateReply_12277ec8(enc *codegen.Encoder, arg *protos.GetSelfCertificateReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetSelfCertificateReply_12277ec8(dec *codegen.Decoder) *protos.GetSelfCertificateReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetSelfCertificateReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_TraceSpans_af16efd0(enc *codegen.Encoder, arg *protos.TraceSpans) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_TraceSpans_af16efd0(dec *codegen.Decoder) *protos.TraceSpans {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.TraceSpans\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_LogEntryBatch_fec9a5d4(enc *codegen.Encoder, arg *protos.LogEntryBatch) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_LogEntryBatch_fec9a5d4(dec *codegen.Decoder) *protos.LogEntryBatch {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.LogEntryBatch\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_VerifyClientCertificateRequest_f8d21781(enc *codegen.Encoder, arg *protos.VerifyClientCertificateRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_VerifyClientCertificateRequest_f8d21781(dec *codegen.Decoder) *protos.VerifyClientCertificateRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.VerifyClientCertificateRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_VerifyClientCertificateReply_c76e39ec(enc *codegen.Encoder, arg *protos.VerifyClientCertificateReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_VerifyClientCertificateReply_c76e39ec(dec *codegen.Decoder) *protos.VerifyClientCertificateReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.VerifyClientCertificateReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_VerifyServerCertificateRequest_9c56ee67(enc *codegen.Encoder, arg *protos.VerifyServerCertificateRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_VerifyServerCertificateRequest_9c56ee67(dec *codegen.Decoder) *protos.VerifyServerCertificateRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.VerifyServerCertificateRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_VerifyServerCertificateReply_c0d4bd3b(enc *codegen.Encoder, arg *protos.VerifyServerCertificateReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_VerifyServerCertificateReply_c0d4bd3b(dec *codegen.Decoder) *protos.VerifyServerCertificateReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.VerifyServerCertificateReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetHealthRequest_fd6083fb(enc *codegen.Encoder, arg *protos.GetHealthRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetHealthRequest_fd6083fb(dec *codegen.Decoder) *protos.GetHealthRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetHealthRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetHealthReply_b2d11423(enc *codegen.Encoder, arg *protos.GetHealthReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetHealthReply_b2d11423(dec *codegen.Decoder) *protos.GetHealthReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetHealthReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetLoadRequest_d733b2cf(enc *codegen.Encoder, arg *protos.GetLoadRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetLoadRequest_d733b2cf(dec *codegen.Decoder) *protos.GetLoadRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetLoadRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetLoadReply_cf8279ad(enc *codegen.Encoder, arg *protos.GetLoadReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetLoadReply_cf8279ad(dec *codegen.Decoder) *protos.GetLoadReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetLoadReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetMetricsRequest_010b3cd9(enc *codegen.Encoder, arg *protos.GetMetricsRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetMetricsRequest_010b3cd9(dec *codegen.Decoder) *protos.GetMetricsRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetMetricsRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetMetricsReply_3c7180e4(enc *codegen.Encoder, arg *protos.GetMetricsReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetMetricsReply_3c7180e4(dec *codegen.Decoder) *protos.GetMetricsReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetMetricsReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetProfileRequest_d1544fcf(enc *codegen.Encoder, arg *protos.GetProfileRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetProfileRequest_d1544fcf(dec *codegen.Decoder) *protos.GetProfileRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetProfileRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_GetProfileReply_10a79dcc(enc *codegen.Encoder, arg *protos.GetProfileReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_GetProfileReply_10a79dcc(dec *codegen.Decoder) *protos.GetProfileReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.GetProfileReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_InitWeaveletRequest_d1f5204c(enc *codegen.Encoder, arg *protos.InitWeaveletRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_InitWeaveletRequest_d1f5204c(dec *codegen.Decoder) *protos.InitWeaveletRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.InitWeaveletRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_InitWeaveletReply_565d8c96(enc *codegen.Encoder, arg *protos.InitWeaveletReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_InitWeaveletReply_565d8c96(dec *codegen.Decoder) *protos.InitWeaveletReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.InitWeaveletReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_UpdateComponentsRequest_d1b56e1f(enc *codegen.Encoder, arg *protos.UpdateComponentsRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_UpdateComponentsRequest_d1b56e1f(dec *codegen.Decoder) *protos.UpdateComponentsRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.UpdateComponentsRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_UpdateComponentsReply_93bebb77(enc *codegen.Encoder, arg *protos.UpdateComponentsReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_UpdateComponentsReply_93bebb77(dec *codegen.Decoder) *protos.UpdateComponentsReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.UpdateComponentsReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_UpdateRoutingInfoRequest_e752cfad(enc *codegen.Encoder, arg *protos.UpdateRoutingInfoRequest) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_UpdateRoutingInfoRequest_e752cfad(dec *codegen.Decoder) *protos.UpdateRoutingInfoRequest {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.UpdateRoutingInfoRequest\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n\nfunc serviceweaver_enc_ptr_UpdateRoutingInfoReply_d1854fd5(enc *codegen.Encoder, arg *protos.UpdateRoutingInfoReply) {\n\tif arg == nil {\n\t\tenc.Bool(false)\n\t} else {\n\t\tenc.Bool(true)\n\t\tenc.EncodeProto(arg)\n\t}\n}\n\nfunc serviceweaver_dec_ptr_UpdateRoutingInfoReply_d1854fd5(dec *codegen.Decoder) *protos.UpdateRoutingInfoReply {\n\tif !dec.Bool() {\n\t\treturn nil\n\t}\n\tvar res protos.UpdateRoutingInfoReply\n\tdec.DecodeProto(&res)\n\treturn &res\n}\n"
        },
        {
          "name": "weavertest",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}