{
  "metadata": {
    "timestamp": 1736567017868,
    "page": 597,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "karan/joe",
      "stars": 2877,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.30859375,
          "content": "# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n# Matches multiple files with brace expansion notation\n# Set default charset\n[*.{py}]\ncharset = utf-8\n\n# 4 space indentation\n[*.py]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3056640625,
          "content": "#### joe made this: http://goel.io/joe\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\nbuild/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Karan Goel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.47265625,
          "content": "![](http://i.imgur.com/y8g506n.png?1)\n\n# joe\n\nA `.gitignore` magician in your command line. Joe generates `.gitignore` files from the command line for you.\n\n![](http://i.imgur.com/2tAksHG.gif)\n\n## Features\n\n- Written in uncomplicated Go (Golang)\n- No installation necessary - just use the [binary](https://github.com/karan/joe#installation).\n- Stupidly [easy to use](https://github.com/karan/joe#usage)\n- Supports all Github-supported [`.gitignore` files](https://github.com/karan/joe#list-all-available-files)\n- Works on Mac, Linux and (maybe) Windows\n- Supports other version control systems (`.hgignore`)\n\n## Installation\n\nAfter install, make sure to run `joe u`. This will download all `.gitignore` files in `~/joe-data/` folder.\n\n### Option 1: Binary\n\n`joe` is available for OSX (macOS), Linux and Windows.\n\nDownload the latest binary from the [Releases page](https://github.com/karan/joe/releases). It's the easiest way to get started with `joe`.\n\nMake sure to add the location of the binary to your `$PATH`.\n\n### Option 2: From source\n\n```bash\n$ git clone git@github.com:karan/joe.git\n$ cd joe/\n$ chmod +x tool.sh\n$ ./tool.sh build\n```\n\n## Usage\n\n### Commands:\n\n```\nls | list       list all available files\nu | update      update all available gitignore files\ng | generate    generate gitignore files\n```\n\n### Basic usage\n\n```bash\n$ joe g java    # outputs .gitignore file for java to stdout\n```\n\nTo update your `.gitignore` files at any time, simply run:\n\n```bash\n$ joe u\n```\n\n### Overwrite existing `.gitignore` file\n\n```bash\n$ joe g java > .gitignore    # saves a new .gitignore file for java\n```\n\n### Append to existing `.gitignore` file\n\n```bash\n$ joe g java >> .gitignore    # appends to an existing .gitignore file\n```\n\n### Multiple languages\n\n```bash\n$ joe g java,node,osx > .gitignore    # saves a new .gitignore file for multiple languages\n```\n\n### Create and append to a global .gitignore file\n\nYou can also use joe to append to a global .gitignore. These can be helpful when you want to ignore files generated by an IDE, OS, or otherwise.\n\n```bash\n$ git config --global core.excludesfile ~/.gitignore # Optional if you have not yet created a global .gitignore\n$ joe g OSX,SublimeText >> ~/.gitignore\n```\n\n### List all available files\n\n```bash\n$ joe ls    # OR `joe list`\n```\n\nOutput:\n\n> actionscript, ada, agda, android, anjuta, appceleratortitanium, archives, archlinuxpackages, autotools, bricxcc, c, c++, cakephp, cfwheels, chefcookbook, clojure, cloud9, cmake, codeigniter, codekit, commonlisp, composer, concrete5, coq, craftcms, cvs, dart, darteditor, delphi, dm, dreamweaver, drupal, eagle, eclipse, eiffelstudio, elisp, elixir, emacs, ensime, episerver, erlang, espresso, expressionengine, extjs, fancy, finale, flexbuilder, forcedotcom, fortran, fuelphp, gcov, gitbook, go, gradle, grails, gwt, haskell, idris, igorpro, ipythonnotebook, java, jboss, jdeveloper, jekyll, jetbrains, joomla, jython, kate, kdevelop4, kohana, labview, laravel, lazarus, leiningen, lemonstand, libreoffice, lilypond, linux, lithium, lua, lyx, magento, matlab, maven, mercurial, mercury, metaprogrammingsystem, meteor, microsoftoffice, modelsim, momentics, monodevelop, nanoc, netbeans, nim, ninja, node, notepadpp, objective-c, ocaml, opa, opencart, oracleforms, osx, packer, perl, phalcon, playframework, plone, prestashop, processing, python, qooxdoo, qt, r, rails, redcar, redis, rhodesrhomobile, ros, ruby, rust, sass, sbt, scala, scons, scrivener, sdcc, seamgen, sketchup, slickedit, stella, sublimetext, sugarcrm, svn, swift, symfony, symphonycms, tags, tex, textmate, textpattern, tortoisegit, turbogears2, typo3, umbraco, unity, vagrant, vim, virtualenv, visualstudio, vvvv, waf, webmethods, windows, wordpress, xcode, xilinxise, xojo, yeoman, yii, zendframework, zephir\n\n### BONUS ROUND: Alternate version control software\n\nJoe isn't **just** a generator for `.gitignore` files. You can use it and its output wherever a SCM is used.\n\n```bash\n$ joe g java > .hgignore\n```\n\n## Contributing\n\n#### Bug Reports & Feature Requests\n\nPlease use the [issue tracker](https://github.com/karan/joe/issues) to report any bugs or file feature requests.\n\n#### Developing\n\nPRs are welcome. To begin developing, do this:\n\n```bash\n$ git clone git@github.com:karan/joe.git\n$ cd joe/\n$ go run *.go\n```\n\n#### `tool.sh`\n\nThis is a handy script that automates a lot of developing steps.\n\n\n```bash\nUSAGE:\n    $ $tool [-h|--help] COMMAND\n\n  EXAMPLES:\n    $ $tool deps      Install dependencies for joe\n    $ $tool build     Build a binary\n    $ $tool run       Build and run the binary\n```\n"
        },
        {
          "name": "joe.go",
          "type": "blob",
          "size": 4.4775390625,
          "content": "package main\n\nimport (\n  \"fmt\"\n  \"github.com/codegangsta/cli\"\n  \"io/ioutil\"\n  \"log\"\n  \"os\"\n  \"path\"\n  \"path/filepath\"\n  \"sort\"\n  \"strings\"\n)\n\nconst joe string = `\n ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄ \n▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌\n ▀▀▀▀▀█░█▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ \n      ▐░▌    ▐░▌       ▐░▌▐░▌          \n      ▐░▌    ▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄▄▄ \n      ▐░▌    ▐░▌       ▐░▌▐░░░░░░░░░░░▌\n      ▐░▌    ▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀▀▀ \n      ▐░▌    ▐░▌       ▐░▌▐░▌          \n ▄▄▄▄▄█░▌    ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ \n▐░░░░░░░▌    ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌\n ▀▀▀▀▀▀▀      ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀ \n`\nconst version string = \"1.0.0\"\nconst gitignoreUrl = \"https://github.com/github/gitignore/archive/master.zip\"\nconst dataDir string = \".joe-data\"\n\nvar dataPath = path.Join(os.Getenv(\"HOME\"), dataDir)\n\nfunc findGitignores() (a map[string]string, err error) {\n  _, err = ioutil.ReadDir(dataPath)\n  if err != nil {\n    return nil, err\n  }\n\n  filelist := make(map[string]string)\n  filepath.Walk(dataPath, func(filepath string, info os.FileInfo, err error) error {\n    if strings.HasSuffix(info.Name(), \".gitignore\") {\n      name := strings.ToLower(strings.Replace(info.Name(), \".gitignore\", \"\", 1))\n      filelist[name] = filepath\n    }\n    return nil\n  })\n  return filelist, nil\n}\n\nfunc availableFiles() (a []string, err error) {\n  gitignores, err := findGitignores()\n  if err != nil {\n    return nil, err\n  }\n\n  availableGitignores := []string{}\n  for key, _ := range gitignores {\n    availableGitignores = append(availableGitignores, key)\n  }\n\n  return availableGitignores, nil\n}\n\nfunc generate(args string) {\n  names := strings.Split(args, \",\")\n\n  gitignores, err := findGitignores()\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  notFound := []string{}\n  output := \"\"\n  for index, name := range names {\n    if filepath, ok := gitignores[strings.ToLower(name)]; ok {\n      bytes, err := ioutil.ReadFile(filepath)\n      if err == nil {\n        output += \"\\n#### \" + name + \" ####\\n\"\n        output += string(bytes)\n        if index < len(names) - 1 {\n          output += \"\\n\"\n        }\n        continue\n      }\n    } else {\n      notFound = append(notFound, name)\n    }\n  }\n\n  if len(notFound) > 0 {\n    fmt.Printf(\"Unsupported files: %s\\n\", strings.Join(notFound, \", \"))\n    fmt.Println(\"Run `joe ls` to see list of available gitignores.\")\n    output = \"\"\n  }\n  if len(output) > 0 {\n    output = \"#### joe made this: http://goel.io/joe\\n\" + output\n  }\n  fmt.Print(output)\n}\n\nfunc main() {\n  app := cli.NewApp()\n  app.Name = joe\n  app.Usage = \"generate .gitignore files from the command line\"\n  app.UsageText = \"joe command [arguments...]\"\n  app.Version = version\n  app.Commands = []cli.Command{\n    {\n      Name:    \"ls\",\n      Aliases: []string{\"list\"},\n      Usage:   \"list all available files\",\n      Action: func(c *cli.Context) error {\n        availableGitignores, err := availableFiles()\n        if err != nil {\n          log.Fatal(err)\n          return err\n        }\n        fmt.Printf(\"%d supported .gitignore files:\\n\", len(availableGitignores))\n        sort.Strings(availableGitignores)\n        fmt.Printf(\"%s\\n\", strings.Join(availableGitignores, \", \"))\n        return nil\n      },\n    },\n    {\n      Name:    \"u\",\n      Aliases: []string{\"update\"},\n      Usage:   \"update all available gitignore files\",\n      Action: func(c *cli.Context) error {\n        fmt.Println(\"Updating gitignore files..\")\n        err := RemoveContents(dataPath)\n        if err != nil {\n          log.Fatal(err)\n        }\n        err = DownloadFiles(gitignoreUrl, dataPath)\n        if err != nil {\n          log.Fatal(err)\n          return err\n        }\n        return nil\n      },\n    },\n    {\n      Name:    \"g\",\n      Aliases: []string{\"generate\"},\n      Usage:   \"generate gitignore files\",\n      Action: func(c *cli.Context) error {\n        if c.NArg() != 1 {\n          cli.ShowAppHelp(c)\n        } else {\n          generate(c.Args()[0])\n        }\n        return nil\n      },\n    },\n  }\n  app.Run(os.Args)\n}\n"
        },
        {
          "name": "tool.sh",
          "type": "blob",
          "size": 1.1318359375,
          "content": "#!/bin/bash\n\n\nfunction usage {\n  local tool=$(basename $0)\n  cat <<EOF\n\n  USAGE:\n    $ $tool [-h|--help] COMMAND\n\n  EXAMPLES:\n    $ $tool deps      Install dependencies for joe\n    $ $tool build     Build a binary\n    $ $tool run       Build and run the binary\nEOF\n  exit 1;\n}\n\n\nfunction build {\n  GOOS=windows GOARCH=386 go build -o build/joe-x86.exe joe.go utils.go\n  GOOS=windows GOARCH=amd64 go build -o build/joe.exe joe.go utils.go\n  GOOS=linux GOARCH=386 go build -o build/joe-x86 joe.go utils.go\n  GOOS=linux GOARCH=amd64 go build -o build/joe joe.go utils.go\n  GOOS=darwin GOARCH=386 go build -o build/joe-darwin-x86 joe.go utils.go\n  GOOS=darwin GOARCH=amd64 go build -o build/joe-darwin joe.go utils.go\n  printf 'joe built\\n';\n}\n\n\n# total arguments should be 1\nif [ $# -ne 1 ]; then\n   usage;\nfi\n\nif { [ -z \"$1\" ] && [ -t 0 ] ; } || [ \"$1\" == '-h' ] || [ \"$1\" == '--help' ]\nthen\n  usage;\nfi\n\n\n# show help for no arguments if stdin is a terminal\nif [ \"$1\" == \"deps\" ]; then\n  go get github.com/codegangsta/cli\n  go get github.com/termie/go-shutil\nelif [ \"$1\" == \"build\" ]; then\n  build\nelif [ \"$1\" == \"run\" ]; then\n  build && ./joe\nelse\n  usage;\nfi\n"
        },
        {
          "name": "utils.go",
          "type": "blob",
          "size": 1.96484375,
          "content": "package main\n\nimport (\n\t\"archive/zip\"\n\t\"github.com/termie/go-shutil\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n\t\"path/filepath\"\n)\n\nfunc unzip(archive, target string) (err error) {\n\treader, err := zip.OpenReader(archive)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := os.MkdirAll(target, 0755); err != nil {\n\t\treturn err\n\t}\n\n\tfor _, file := range reader.File {\n\t\tpath := filepath.Join(target, file.Name)\n\t\tif file.FileInfo().IsDir() {\n\t\t\tos.MkdirAll(path, file.Mode())\n\t\t\tcontinue\n\t\t}\n\n\t\tfileReader, err := file.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer fileReader.Close()\n\n\t\ttargetFile, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, file.Mode())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer targetFile.Close()\n\n\t\tif _, err := io.Copy(targetFile, fileReader); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc DownloadFiles(url string, dataPath string) (err error) {\n\tarchivePath := path.Join(\"/tmp\", \"master.zip\")\n\n\t// Create the file\n\tout, err := os.Create(archivePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer out.Close()\n\n\t// Get the data\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\t// Writer the body to file\n\t_, err = io.Copy(out, resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Unzip\n\terr = unzip(archivePath, \"/tmp\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = shutil.CopyTree(path.Join(\"/tmp\", \"gitignore-master\"), dataPath, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc RemoveContents(dir string) (err error) {\n\tif _, err := os.Stat(dir); os.IsNotExist(err) {\n\t\treturn nil\n\t}\n\n\td, err := os.Open(dir)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer d.Close()\n\tnames, err := d.Readdirnames(-1)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor _, name := range names {\n\t\terr = os.RemoveAll(filepath.Join(dir, name))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\terr = os.Remove(dir)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc stringInSlice(a string, list []string) bool {\n\tfor _, b := range list {\n\t\tif b == a {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"
        }
      ]
    }
  ]
}