{
  "metadata": {
    "timestamp": 1736566717827,
    "page": 270,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ergo-services/ergo",
      "stars": 3806,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.130859375,
          "content": "*~\ncoverage.txt\ncoverage.html\ntests/coverage.txt\ntests/coverage.html\n*.swp\ntags\n.session\ncover.out\ntests/cover.out\nsandbox\n.DS_Store\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.9580078125,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThis format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n#### [v3.0.0](https://github.com/ergo-services/ergo/releases/tag/v1.999.300) 2024-09-04 [tag version v1.999.300] ####\n\nThis version marks a significant milestone in the evolution of the Ergo Framework. The framework's design has been completely overhauled, and this version was built from the ground up. It includes:\n\n- Significant API Improvements: The `gen.Process`, `gen.Node`, and `gen.Network` interfaces have been enhanced with numerous convenient methods.\n- A New Network Stack: This version introduces a completely new network stack for improved performance and flexibility. See https://github.com/ergo-services/benchmarks for the details\n\nAlongside the release of Ergo Framework 3.0.0, new tools and an additional components library are also introduced:\n\n- Tools (observer, saturn) https://github.com/ergo-services/tools\n- Loggers (rotate, colored) - https://github.com/ergo-services/logger\n- Meta (websocket) - https://github.com/ergo-services/meta\n- Application (observer) - https://github.com/ergo-services/application\n- Registrar (client Saturn) - https://github.com/ergo-services/registrar\n- Proto (erlang23) - https://github.com/ergo-services/proto\n\nFinally, we've published comprehensive documentation for the framework, providing detailed guides to assist you in leveraging all the capabilities of Ergo Framework effectively. Its available at https://docs.ergo.services.\n\n#### [v2.2.4](https://github.com/ergo-services/ergo/releases/tag/v1.999.224) 2023-05-01 [tag version v1.999.224] ####\n\nThis release includes fixes:\n- Fixed incorrect handling of `gen.SupervisorStrategyRestartTransient` restart strategy in `gen.Supervisor`\n- Fixed missing `ServerBehavior` in [`gen.Pool`, `gen.Raft`, `gen.Saga`, `gen.Stage`, `gen.TCP`, `gen.UDP`, `gen.Web`] behavior interfaces\n- Introduced the new tool for boilerplate code generation - `ergo` https://github.com/ergo-services/tools. You may read more information about this tool in our article with a great example https://blog.ergo.services/quick-start-1094d56d4e2\n\n#### [v2.2.3](https://github.com/ergo-services/ergo/releases/tag/v1.999.223) 2023-04-02 [tag version v1.999.223] ####\n\nThis release includes fixes:\n- Improved `gen.TCP`. Issue #152\n- Fixed incorrect decoding registered map type using etf.RegisterType\n- Fixed race condition on process termination. Issue #153\n\n#### [v2.2.2](https://github.com/ergo-services/ergo/releases/tag/v1.999.222) 2023-03-01 [tag version v1.999.222] ####\n\n* Introduced `gen.Pool`. This behavior implements a basic design pattern with a pool of workers. All messages/requests received by the pool process are forwarded to the workers using the \"Round Robin\" algorithm. The worker process is automatically restarting on termination. See example here [examples/genpool](https://github.com/ergo-services/examples/tree/master/genpool)\n* Removed Erlang RPC support. A while ago Erlang has changed the way of handling this kind of request making this feature more similar to the regular `gen.Server`. So, there is no reason to keep supporting it. Use a regular way of messaging instead - `gen.Server`.\n* Fixed issue #130 (`StartType` option in `gen.ApplicationSpec` is ignored for the autostarting applications)\n* Fixed issue #143 (incorrect cleaning up the aliases belonging to the terminated process)\n\n#### [v2.2.1](https://github.com/ergo-services/ergo/releases/tag/v1.999.221) 2023-01-18 [tag version v1.999.221] ####\n\n* Now you can join your services made with Ergo Framework into a single cluster with transparent networking using our **Cloud Overlay Network** where they can connect to each other smoothly, no matter where they run - AWS, Azure or GCP, or anywhere else. All these connections are secured with end-to-end encryption. Read more in this article [https://https://medium.com/@ergo-services/cloud-overlay-network](https://https://medium.com/@ergo-services/cloud-overlay-network). Here is an example of this feature in action [examples/cloud](https://github.com/ergo-services/examples/tree/master/cloud)\n* `examples` moved to https://github.com/ergo-services/examples\n* Added support Erlang OTP/25\n* Improved handling `nil` values for the registered types using `etf.RegisterType(...)`\n* Improved self-signed certificate generation\n* Introduced `ergo.debug` option that enables extended debug information for `lib.Log(...)`/`lib.Warning(...)`\n* Fixed `gen.TCP` and `gen.UDP` (missing callbacks)\n* Fixed ETF registering type with `etf.Pid`, `etf.Alias` or `etf.Ref` value types\n* Fixed Cloud client\n* Fixed #117 (incorrect hanshake process finalization)\n* Fixed #139 (panic of the gen.Stage partition dispatcher)\n\n#### [v2.2.0](https://github.com/ergo-services/ergo/releases/tag/v1.999.220) 2022-10-18 [tag version v1.999.220] ####\n\n* Introduced `gen.Web` behavior. It implements **Web API Gateway pattern** is also sometimes known as the \"Backend For Frontend\" (BFF). See example [examples/genweb](https://github.com/ergo-services/examples/tree/master/genweb)\n* Introduced `gen.TCP` behavior - **socket acceptor pool for TCP protocols**. It provides everything you need to accept TCP connections and process packets with a small code base and low latency. Here is simple example [examples/gentcp](https://github.com/ergo-services/examples/tree/master/gentcp)\n* Introduced `gen.UDP` - the same as `gen.TCP`, but for UDP protocols. Example is here [examples/genudp](https://github.com/ergo-services/examples/tree/master/genudp)\n* Introduced **Events**. This is a simple pub/sub feature within a node - any `gen.Process` can become a producer by registering a new event `gen.Event` using method `gen.Process.RegisterEvent`, while the others can subscribe to these events using `gen.Process.MonitorEvent`. Subscriber process will also receive `gen.MessageEventDown` if a producer process went down (terminated). This feature behaves in a monitor manner but only works within a node. You may also want to subscribe to a system event - `node.EventNetwork` to receive event notification on connect/disconnect any peers.\n* Introduced **Cloud Client** - allows connecting to the cloud platform [https://ergo.sevices](https://ergo.services). You may want to register your email there, and we will inform you about the platform launch day\n* Introduced **type registration** for the ETF encoding/decoding. This feature allows you to get rid of manually decoding with `etf.TermIntoStruct` for the receiving messages. Register your type using `etf.RegisterType(...)`, and you will be receiving messages in a native type\n* Predefined set of errors has moved to the `lib` package\n* Updated `gen.ServerBehavior.HandleDirect` method (got extra argument `etf.Ref` to distinguish the requests). This change allows you to handle these requests asynchronously using method `gen.ServerProcess.Reply(...)`\n* Updated `node.Options`. Now it has field `Listeners` (type `node.Listener`). It allows you to start any number of listeners with custom options - `Port`, `TLS` settings, or custom `Handshake`/`Proto` interfaces\n* Fixed build on 32-bit arch\n* Fixed freezing on ARM arch #102\n* Fixed problem with encoding negative int8\n* Fixed #103 (there was an issue on interop with Elixir's GenStage)\n* Fixed node stuck on start if it uses the name which is already taken in EPMD\n* Fixed incorrect `gen.ProcessOptions.Context` handling\n\n\n#### [v2.1.0](https://github.com/ergo-services/ergo/releases/tag/v1.999.210) 2022-04-19 [tag version v1.999.210] ####\n\n* Introduced **compression feature** support. Here are new methods and options to manage this feature:\n  - `gen.Process`:\n    - `SetCompression(enable bool)`, `Compression() bool`\n    - `SetCompressionLevel(level int) bool`, `CompressionLevel() int`\n    - `SetCompressionThreshold(threshold int) bool`, `CompressionThreshold() int` messages smaller than the threshold will be sent with no compression. The default compression threshold is 1024 bytes.\n  - `node.Options`:\n    - `Compression` these settings are used as defaults for the spawning processes\n  - this feature will be ignored if the receiver is running on either the Erlang or Elixir node\n* Introduced **proxy feature** support **with end-to-end encryption**.\n  - `node.Node` new methods:\n    - `AddProxyRoute(...)`, `RemoveProxyRoute(...)`\n    - `ProxyRoute(...)`, `ProxyRoutes()`\n    - `NodesIndirect()` returns list of connected nodes via proxy connection\n  - `node.Options`:\n    - `Proxy` for configuring proxy settings\n  - includes support (over the proxy connection): compression, fragmentation, link/monitor process, monitor node\n  - example [examples/proxy](https://github.com/ergo-services/examples/tree/master/proxy).\n  - this feature is not available for the Erlang/Elixir nodes\n* Introduced **behavior `gen.Raft`**. It's improved implementation of [Raft consensus algorithm](https://raft.github.io). The key improvement is using quorum under the hood to manage the leader election process and make the Raft cluster more reliable. This implementation supports quorums of 3, 5, 7, 9, or 11 quorum members. Here is an example of this feature [examples/genraft](https://github.com/ergo-services/examples/tree/master/genraft).\n* Introduced **interfaces to customize network layer**\n  - `Resolver` to replace EPMD routines with your solution (e.g., ZooKeeper or any other service registrar)\n  - `Handshake` allows customizing authorization/authentication process\n  - `Proto` provides the way to implement proprietary protocols (e.g., IoT area)\n* Other new features:\n  - `gen.Process` new methods:\n    - `NodeUptime()`, `NodeName()`, `NodeStop()`\n  - `gen.ServerProcess` new method:\n    - `MessageCounter()` shows how many messages have been handled by the `gen.Server` callbacks\n  - `gen.ProcessOptions` new option:\n    - `ProcessFallback` allows forward messages to the fallback process if the process mailbox is full. Forwarded messages are wrapped into `gen.MessageFallback` struct. Related to issue #96.\n  - `gen.SupervisorChildSpec` and `gen.ApplicationChildSpec` got option `gen.ProcessOptions` to customize options for the spawning child processes.\n* Improved sending messages by etf.Pid or etf.Alias: methods `gen.Process.Send`, `gen.ServerProcess.Cast`, `gen.ServerProcess.Call` now return `node.ErrProcessIncarnation` if a message is sending to the remote process of the previous incarnation (remote node has been restarted). Making monitor on a remote process of the previous incarnation triggers sending `gen.MessageDown` with reason `incarnation`.\n* Introduced type `gen.EnvKey` for the environment variables\n* All spawned processes now have the `node.EnvKeyNode` variable to get access to the `node.Node` value.\n* **Improved performance** of local messaging (**up to 8 times** for some cases)\n* **Important** `node.Options` has changed. Make sure to adjust your code.\n* Fixed issue #89 (incorrect handling of Call requests)\n* Fixed issues #87, #88 and #93 (closing network socket)\n* Fixed issue #96 (silently drops message if process mailbox is full)\n* Updated minimal requirement of Golang version to 1.17 (go.mod)\n* We still keep the rule **Zero Dependencies**\n\n#### [v2.0.0](https://github.com/ergo-services/ergo/releases/tag/v1.999.200) 2021-10-12 [tag version v1.999.200] ####\n\n* Added support of Erlang/OTP 24 (including [Alias](https://blog.erlang.org/My-OTP-24-Highlights/#eep-53-process-aliases) feature and [Remote Spawn](https://blog.erlang.org/OTP-23-Highlights/#distributed-spawn-and-the-new-erpc-module) introduced in Erlang/OTP 23)\n* **Important**: This release includes refined API (without backward compatibility) for a more convenient way to create OTP-designed microservices. Make sure to update your code.\n* **Important**: Project repository has been moved to [https://github.com/ergo-services/ergo](https://github.com/ergo-services/ergo). It is still available on the old URL [https://github.com/halturin/ergo](https://github.com/halturin/ergo) and GitHub will redirect all requests to the new one (thanks to GitHub for this feature).\n* Introduced new behavior `gen.Saga`. It implements Saga design pattern - a sequence of transactions that updates each service state and publishes the result (or cancels the transaction or triggers the next transaction step). `gen.Saga` also provides a feature of interim results (can be used as transaction progress or as a part of pipeline processing), time deadline (to limit transaction lifespan), two-phase commit (to make distributed transaction atomic). Here is example [examples/gensaga](https://github.com/ergo-services/examples/tree/master/gensaga).\n* Introduced new methods `Process.Direct` and `Process.DirectWithTimeout` to make direct request to the actor (`gen.Server` or inherited object). If an actor has no implementation of `HandleDirect` callback it returns `ErrUnsupportedRequest` as a error.\n* Introduced new callback `HandleDirect` in the `gen.Server` interface as a handler for requests made by `Process.Direct` or `Process.DirectWithTimeout`. It should be easy to interact with actors from outside.\n* Introduced new types intended to be used to interact with Erlang/Elixir\n  * `etf.ListImproper` to support improper lists like `[a|b]` (a cons cell).\n  * `etf.String` (an alias for the Golang string) encodes as a binary in order to support Elixir string type (which is `binary()` type)\n  * `etf.Charlist` (an alias for the Golang string) encodes as a list of chars `[]rune` in order to support Erlang string type (which is `charlist()` type)\n* Introduced new methods `Node.ProvideRemoteSpawn`, `Node.RevokeRemoteSpawn`, `Process.RemoteSpawn`.\n* Introduced new interfaces `Marshaler` (method `MarshalETF`) and `Unmarshaler` (method `UnmarshalETF`) for the custom encoding/decoding data.\n* Improved performance for the local messaging (up to 3 times for some cases)\n* Added example [examples/http](https://github.com/ergo-services/examples/tree/master/http) to demonsrate how HTTP server can be integrated into the Ergo node.\n* Added example [examples/gendemo](https://github.com/ergo-services/examples/tree/master/gendemo) - how to create a custom behavior (design pattern) on top of the `gen.Server`. Take inspiration from the [gen/stage.go](gen/stage.go) or [gen/saga.go](gen/saga.go) design patterns.\n* Added support FreeBSD, OpenBSD, NetBSD, DragonFly.\n* Fixed RPC issue #45\n* Fixed internal timer issue #48\n* Fixed memory leaks #53\n* Fixed double panic issue #52\n* Fixed Atom Cache race conditioned issue #54\n* Fixed ETF encoder issues #64 #66\n\n#### [v1.2.0](https://github.com/ergo-services/ergo/releases/tag/v1.2.0) - 2021-04-07 [tag version v1.2.0] ####\n\n* Added TLS support. Introduced new option `TLSmode` in `ergo.NodeOptions` with the following values:\n  - `ergo.TLSmodeDisabled` default value. encryption is disabled\n  - `ergo.TLSmodeAuto` enables encryption with autogenerated and self-signed certificate\n  - `ergo.TLSmodeStrict` enables encryption with specified server/client certificates and keys\n  there is example of usage `examples/nodetls/tlsGenServer.go`\n* Introduced [GenStage](https://hexdocs.pm/gen_stage/GenStage.html) behavior implementation (originated from Elixir world).\n  `GenStage` is an abstraction built on top of `GenServer` to provide a simple way to create a distributed Producer/Consumer architecture, while automatically managing the concept of backpressure. This implementation is fully compatible with Elixir's GenStage. Example here `examples/genstage` or just run it `go run ./examples/genstage` to see it in action\n* Introduced new methods `AddStaticRoute`/`RemoveStaticRoute` for `Node`. This feature allows you to keep EPMD service behind a firewall.\n* Introduced `SetTrapExit`/`TrapExit` methods for `Process` in order to control the trapping `gen.MessageExit` message (for the linked processes)\n* Introduced `TermMapIntoStruct` and `TermProplistIntoStruct` functions. It should be easy now to transform `etf.Map` or `[]eft.ProplistElement` into the given struct. See documentation for the details.\n* Improved DIST implementation in order to support KeepAlive messages and get rid of platform-dependent `syscall` usage\n* Fixed `TermIntoStruct` function. There was a problem with `Tuple` value transforming into the given struct\n* Fixed incorrect decoding atoms `true`, `false` into the booleans\n* Fixed race condition and freeze of connection serving in corner case [#21](https://github.com/ergo-services/ergo/issues/21)\n* Fixed problem with monitoring process by the registered name (local and remote)\n* Fixed issue with termination linked processes\n* Fixed platform-dependent issues. Now Ergo Framework has tested and confirmed support of Linux, MacOS, Windows.\n\n#### [v1.1.0](https://github.com/ergo-services/ergo/releases/tag/v1.1.0) - 2020-04-23 [tag version v1.1.0] ####\n\n* Fragmentation support (which was introduced in Erlang/OTP 22)\n* Completely rewritten network subsystem (DIST/ETF).\n* Improved performance in terms of network messaging (outperforms original Erlang/OTP up to x5 times. See [Benchmarks](#benchmarks))\n\n#### [v1.0.0](https://github.com/ergo-services/ergo/releases/tag/1.0.0) - 2020-03-03 [tag version 1.0.0] ####\n\n* We have changed the name - Ergo (or Ergo Framework). GitHub's repo has been\nrenamed as well. We also created cloned repo `ergonode` to support users of\nthe old version of this project. So, its still available at\nhttps://github.com/halturin/ergonode. But it's strongly recommend to use\nthe new one.\n* Completely reworked (almost from scratch) architecture whole project\n* Implemented linking process feature (in order to support Application/Supervisor behaviors)\n* Reworked Monitor-feature. Now it has full-featured support with remote process/nodes\n* Added multinode support\n* Added experimental observer support\n* Fixed incorrect ETF string encoding\n* Improved ETF TermIntoStruct decoder\n* Improved code structure and readability\n\n#### [v0.2.0](https://github.com/ergo-services/ergo/releases/tag/0.2.0) - 2019-02-23 [tag version 0.2.0] ####\n* Now we make versioning releases\n* Improve node creation. Now you can specify the listening port range. See 'Usage' for details\n* Add embedded EPMD. Trying to start internal epmd service on starting ergonode.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.08984375,
          "content": "# Contributing to Ergo Framework\n\nAnybody willing to contribute to the project either with code, documentation, security reviews or whatever, are very \nwelcome to create or review pull requests and take part in discussions in any of our public [Discord community](https://discord.gg/sdscxKGV62), \n[Telegram group](https://t.me/ergo_services) or [GitHub Discussions](https://github.com/ergo-services/ergo/discussions)\n\n## License\n\n```txt\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the \n    best of my knowledge, is covered under an appropriate open \n    source license and I have the right under that license to   \n    submit that work with modifications, whether created in whole\n    or in part by me, under the same open source license (unless\n    I am permitted to submit under a different license), as \n    Indicated in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including \n    all personal information I submit with it, including my\n    sign-off) is maintained indefinitely and may be redistributed\n    consistent with this project or the open source license(s)\n    involved.\n```\nSee [https://cla-assistant.io/ergo-services/ergo](https://cla-assistant.io/ergo-services/ergo) for a copy of the Developer Certificate of Origin license.\n\nErgo Framework is licensed under the MIT License, as stated in [LICENSE](LICENSE) file.\n\n## Reporting a bug or a feature request\n\nReport bugs at https://github.com/ergo-services/ergo/issues\n\nIf you've found a **bug** or have a **feature request** then please create an issue in this repository (but search first in case a similar issue already exists).\n\n## Submitting Pull Requests\n\nYou can contribute to Ergo Framework by opening a Pull Request. If you would like to fix a bug or \nimplement a feature, please fork the repository and create a Pull Request. \n\nBefore you start any Pull Request, it's recommended that you create an issue to discuss first if you have any doubts about requirement or implementation.\nThat way you can be sure that the maintainer(s) agree on what to change and how, and you can hopefully get a quick merge afterwards.\nAlso, let the maintainers know that you plan to work on a particular issue so that no one else starts any duplicate work.\n\nIn most cases, pull requests for new features should be based on the `master` branch.\n\nMake sure that your feature does not break backward compatibility. In general, we only break backward\ncompatibility in major releases and only for a very good reason.\n\n## Collaboration with maintainers\n\nSometimes the codebase can be a challenge to navigate, especially for a first-time contributor. We don't want you \nspending an hour trying to work out something that would take us only a minute to explain.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Taras Halturin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.1171875,
          "content": "<h1><a href=\"https://ergo.services\"><img src=\".github/images/logo.svg\" alt=\"Ergo Framework\" width=\"159\" height=\"49\"></a></h1>\n\n[![Gitbook Documentation](https://img.shields.io/badge/GitBook-Documentation-f37f40?style=plastic&logo=gitbook&logoColor=white&style=flat)](https://docs.ergo.services)\n[![GoDoc](https://pkg.go.dev/badge/ergo-services/ergo)](https://pkg.go.dev/ergo.services/ergo)\n[![MIT license](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n[![Telegram Community](https://img.shields.io/badge/Telegram-ergo__services-229ed9?style=flat&logo=telegram&logoColor=white)](https://t.me/ergo_services)\n[![Twitter](https://img.shields.io/badge/twitter-ergo__services-00acee?style=flat&logo=x&logoColor=white)](https://x.com/ergo_services)\n[![Reddit](https://img.shields.io/badge/Reddit-r/ergo__services-ff4500?style=plastic&logo=reddit&logoColor=white&style=flat)](https://reddit.com/r/ergo_services)\n\nThe Ergo Framework is an implementation of ideas, technologies, and design patterns from the Erlang world in the Go programming language. It is based on the actor model, network transparency, and a set of ready-to-use components for development. This significantly simplifies the creation of complex and distributed solutions while maintaining a high level of reliability and performance.\n\n### Features ###\n\n1. **Actor Model**: enables the creation of scalable and fault-tolerant systems using isolated actors that interact through message passing. Actors can exchange asynchronous messages as well as perform synchronous requests, offering flexibility in communication patterns.\n\n2. **Network Transparency**: actors can interact regardless of their physical location, supported by a [high-performance](https://github.com/ergo-services/benchmarks) implementation of the [network stack](https://docs.ergo.services/networking/network-stack), which simplifies the creation of distributed systems.\n\n3. **Observability**: framework includes built-in observability features, including [service discovery](https://docs.ergo.services/networking/service-discovering) and [static routes](https://docs.ergo.services/networking/static-routes), allowing nodes to automatically register themselves and find routes to remote nodes. This mechanism simplifies managing distributed systems by enabling seamless communication and interaction between nodes across the network.\n\n4. **Ready-to-use Components**: A set of [ready-to-use actors](https://docs.ergo.services/actors) simplifying development, including state management and error handling.\n\n5. **Support for Distributed Systems**: framework includes built-in mechanisms for creating and managing clustered systems, [distributed events](https://docs.ergo.services/basics/events) (publish/subscribe mechanism), [remote actor spawning](https://docs.ergo.services/networking/remote-spawn-process), and [remote application startup](https://docs.ergo.services/networking/remote-start-application). These features enable easy scaling, efficient message broadcasting across your cluster, and the ability to manage distributed components seamlessly.\n\n6. **Reliability and Fault Tolerance**: the framework is designed to minimize failures and ensure automatic recovery, featuring a [supervisor tree](https://docs.ergo.services/basics/supervision-tree) structure to manage and [restart failed actors](https://docs.ergo.services/actors/supervisor#restart-strategy), which is crucial for mission-critical applications.\n   \n7. **Flexibility**: This framework offers convenient interfaces for customizing [network stack components](https://docs.ergo.services/networking/network-stack#network-stack-interfaces), creating and integrating custom [loggers](https://docs.ergo.services/basics/logging), [managing SSL certificates](https://docs.ergo.services/basics/certmanager), and more.\n\nIn the https://github.com/ergo-services/examples repository, you will find examples that demonstrate a range of the framework's capabilities.\n\n### Benchmarks ###\n\nOn a 64-core processor, Ergo Framework demonstrates a performance of **over 21 million messages per second locally** and **nearly 5 million messages per second over the network**.\n\n![image](https://github.com/user-attachments/assets/813900ad-ff79-4cc7-b1e6-396c5781acb1)\n\nYou can find available benchmarks in the following repository https://github.com/ergo-services/benchmarks.\n\n* Messaging performance (local, network)\n\n* Memory consumption per process (demonstrates framework memory footprint).\n\n### Observer ###\nTo inspect the node, network stack, running applications, and processes, you can use the [`observer`](https://github.com/ergo-services/tools/) tool\n\n<img src=\"https://github.com/user-attachments/assets/1cb83305-6c56-4eb7-b567-76f3c551c176\" width=\"500\">\n\nTo install the Observer tool, you need to have the Go compiler version 1.20 or higher. Run the following command:\n\n```\n$ go install ergo.services/tools/observer@latest\n```\n\nYou can also embed the [Observer application](https://docs.ergo.services/extra-library/applications/observer) into your node. To see it in action, see example `demo` at https://github.com/ergo-services/examples. For more information https://docs.ergo.services/tools/observer \n\n\n\n### Quick start ###\n\nFor a quick start, use the [`ergo`](https://docs.ergo.services/tools/ergo) tool — a command-line utility designed to simplify the process of generating boilerplate code for your project based on the Ergo Framework. With this tool, you can rapidly create a complete project structure, including applications, actors, supervisors, network components, and more. It offers a set of arguments that allow you to customize the project according to specific requirements, ensuring it is ready for immediate development.\n\nTo install use the following command:\n\n```\n$ go install ergo.services/tools/ergo@latest\n```\n\nNow, you can create your project with just one command. Here is example:\n\nSupervision tree\n\n```\n  mynode\n  ├─ myapp\n  │  │\n  │  └─ mysup\n  │     │\n  │     └─ myactor\n  ├─ myweb\n  └─ myactor2\n```\n\nTo generate project for this design use the following command:\n\n```\n$ ergo -init MyNode \\\n      -with-app MyApp \\\n      -with-sup MyApp:MySup \\\n      -with-actor MySup:MyActor \\\n      -with-web MyWeb \\\n      -with-actor MyActor2 \\\n      -with-observer \n```\n\nas a result you will get generated project:\n\n```\n  mynode\n  ├── apps\n  │  └── myapp\n  │     ├── myactor.go\n  │     ├── myapp.go\n  │     └── mysup.go\n  ├── cmd\n  │  ├── myactor2.go\n  │  ├── mynode.go\n  │  ├── myweb.go\n  │  └── myweb_worker.go\n  ├── go.mod\n  ├── go.sum\n  └── README.md\n```\n\nto try it:\n\n```\n$ cd mynode\n$ go run ./cmd\n```\n\nSince we included Observer application, open http://localhost:9911 to inspect your node and running processes.\n\n### Erlang support ###\n\nStarting from version 3.0.0, support for the Erlang network stack has been moved to a separate module and is distributed under the BSL 1.1 license - https://github.com/ergo-services/proto. You can find detailed information on using this module in the documentation at https://docs.ergo.services/extra-library/network-protocols/erlang.\n\n### Requirements ###\n\n* Go 1.20.x and above\n\n### Changelog ###\n\nFully detailed changelog see in the [ChangeLog](CHANGELOG.md) file.\n\n#### [v3.0.0](https://github.com/ergo-services/ergo/releases/tag/v1.999.300) 2024-09-04 [tag version v1.999.300] ####\n\nThis version marks a significant milestone in the evolution of the Ergo Framework. The framework's design has been completely overhauled, and this version was built from the ground up. It includes:\n\n- Significant API Improvements: The `gen.Process`, `gen.Node`, and `gen.Network` interfaces have been enhanced with numerous convenient methods.\n- A New Network Stack: This version introduces a completely new network stack for improved performance and flexibility. See https://github.com/ergo-services/benchmarks for the details\n\nAlongside the release of Ergo Framework 3.0.0, new tools and an additional components library are also introduced:\n\n- Tools (observer, saturn) https://github.com/ergo-services/tools\n- Loggers (rotate, colored) - https://github.com/ergo-services/logger\n- Meta (websocket) - https://github.com/ergo-services/meta\n- Application (observer) - https://github.com/ergo-services/application\n- Registrar (client Saturn) - https://github.com/ergo-services/registrar\n- Proto (erlang23) - https://github.com/ergo-services/proto\n\nFinally, we've published comprehensive documentation for the framework, providing detailed guides to assist you in leveraging all the capabilities of Ergo Framework effectively. Its available at https://docs.ergo.services.\n\n### Development and debugging ###\n\nTo enable Golang profiler just add `--tags debug` in your `go run` or `go build` (profiler runs at\n`http://localhost:9009/debug/pprof`)\n\nTo disable panic recovery use `--tags norecover`.\n\nTo enable trace logging level for the internals (node, network,...) use `--tags trace` and set the log level `gen.LogLevelTrace` for your node.\n\nTo run tests with cleaned test cache:\n\n```\ngo vet\ngo clean -testcache\ngo test -v ./tests/...\n```\n\n### Commercial support\n\nplease, contact support@ergo.services for more information\n"
        },
        {
          "name": "act",
          "type": "tree",
          "content": null
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug.go",
          "type": "blob",
          "size": 0.166015625,
          "content": "//go:build debug\n\npackage ergo\n\nimport (\n\t\"net/http\"\n\t_ \"net/http/pprof\"\n)\n\nfunc init() {\n\t// start profiler\n\tdsn := \"localhost:9009\"\n\tgo http.ListenAndServe(dsn, nil)\n}\n"
        },
        {
          "name": "ergo.go",
          "type": "blob",
          "size": 0.85546875,
          "content": "package ergo\n\nimport (\n\t\"runtime/debug\"\n\n\t\"ergo.services/ergo/app/system\"\n\t\"ergo.services/ergo/gen\"\n\t\"ergo.services/ergo/node\"\n)\n\n// StartNode starts a new node with given name\nfunc StartNode(name gen.Atom, options gen.NodeOptions) (gen.Node, error) {\n\tvar empty gen.Version\n\n\tif options.Version == empty {\n\t\tif info, ok := debug.ReadBuildInfo(); ok {\n\t\t\toptions.Version.Name = info.Main.Path\n\t\t\toptions.Version.Release = info.Main.Version\n\t\t\tfor _, setting := range info.Settings {\n\t\t\t\tif setting.Key == \"vcs.revision\" {\n\t\t\t\t\toptions.Version.Commit = setting.Value\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// add default applications:\n\tdefaultApps := []gen.ApplicationBehavior{\n\t\tsystem.CreateApp(),\n\t}\n\n\toptions.Applications = append(defaultApps, options.Applications...)\n\n\tn, err := node.Start(name, options, FrameworkVersion)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn n, nil\n}\n"
        },
        {
          "name": "gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0341796875,
          "content": "module ergo.services/ergo\n\ngo 1.20\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "meta",
          "type": "tree",
          "content": null
        },
        {
          "name": "net",
          "type": "tree",
          "content": null
        },
        {
          "name": "node",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.go",
          "type": "blob",
          "size": 0.1630859375,
          "content": "package ergo\n\nimport \"ergo.services/ergo/gen\"\n\nvar (\n\tFrameworkVersion = gen.Version{\n\t\tName:    \"Ergo Framework\",\n\t\tRelease: \"3.0.0\",\n\t\tLicense: gen.LicenseMIT,\n\t}\n)\n"
        }
      ]
    }
  ]
}