{
  "metadata": {
    "timestamp": 1736566794364,
    "page": 357,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dunglas/vulcain",
      "stars": 3527,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env",
          "type": "blob",
          "size": 0.1923828125,
          "content": "DEBUG=1\nUPSTREAM=http://localhost:8080\nACME_CERT_DIR=\nACME_HOSTS=\nADDR=:3000\nALLOW_ANONYMOUS=1\nCERT_FILE=fixtures/tls/server.crt\nKEY_FILE=fixtures/tls/server.key\nOPENAPI_FILE=fixtures/openapi.yaml\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.099609375,
          "content": "/cmd/vulcain/vulcain\n/caddy/caddy\n/spec/vulcain.html\n/spec/vulcain.txt\n/spec/vulcain.xml\n/dist\nvendor\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 3.3251953125,
          "content": "version: 2\nbefore:\n  hooks:\n  - go mod tidy\nchecksum:\n  name_template: 'checksums.txt'\nsnapshot:\n  version_template: \"{{ incpatch .Version }}-next\"\nchangelog:\n  use: github-native\nrelease:\n  prerelease: auto\n  draft: true\nenv:\n  - CGO_ENABLED=0\nbuilds:\n  - id: caddy\n    dir: caddy/vulcain\n    ldflags:\n      - -X 'github.com/caddyserver/caddy/v2.CustomVersion=Vulcain.rocks {{ .Version }} Caddy'\n    tags:\n      - nobadger\n      - nomysql\n      - nopgx\n    goos:\n      - linux\n      - darwin\n      - windows\n    goarch:\n      - \"386\"\n      - amd64\n      - arm\n      - arm64\n    goarm:\n      - \"5\"\n      - \"6\"\n      - \"7\"\n  # Legacy build\n  - id: legacy\n    dir: cmd/vulcain\n    env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - darwin\n      - windows\n    goarch:\n      - '386'\n      - amd64\n      - arm\n      - arm64\n    ignore:\n      - goos: darwin\n        goarch: '386'\narchives:\n  - builds:\n      - caddy\n    name_template: >-\n      {{ .ProjectName }}_\n      {{- title .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n    files:\n      - COPYRIGHT\n      - LICENSE\n      - README.md\n      - Caddyfile\n    format_overrides:\n      - goos: windows\n        format: zip\n  - id: legacy\n    builds:\n      - legacy\n    name_template: >-\n      {{ .ProjectName }}-legacy_\n      {{- title .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n    files:\n      - COPYRIGHT\n      - LICENSE\n      - README.md\n    format_overrides:\n      - goos: windows\n        format: zip\ndockers:\n  - ids:\n      - caddy\n    goos: linux\n    goarch: amd64\n    image_templates:\n      - \"dunglas/vulcain:{{ .Tag }}-amd64\"\n      - \"dunglas/vulcain:v{{ .Major }}-amd64\"\n      - \"dunglas/vulcain:v{{ .Major }}.{{ .Minor }}-amd64\"\n      - \"dunglas/vulcain:latest-amd64\"\n    use: buildx\n    build_flag_templates:\n      - \"--platform=linux/amd64\"\n    extra_files:\n      - Caddyfile\n  - ids:\n      - caddy\n    goos: linux\n    goarch: arm64\n    image_templates:\n      - \"dunglas/vulcain:{{ .Tag }}-arm64v8\"\n      - \"dunglas/vulcain:v{{ .Major }}-arm64v8\"\n      - \"dunglas/vulcain:v{{ .Major }}.{{ .Minor }}-arm64v8\"\n      - \"dunglas/vulcain:latest-arm64v8\"\n    use: buildx\n    build_flag_templates:\n      - \"--platform=linux/arm64/v8\"\n    extra_files:\n      - Caddyfile\n  - ids:\n      - legacy\n    dockerfile: legacy.Dockerfile\n    image_templates:\n      - \"dunglas/vulcain:legacy-{{ .Tag }}\"\n      - \"dunglas/vulcain:legacy-v{{ .Major }}\"\n      - \"dunglas/vulcain:legacy-v{{ .Major }}.{{ .Minor }}\"\n      - \"dunglas/vulcain:legacy-latest\"\ndocker_manifests:\n  - name_template: dunglas/vulcain:{{ .Tag }}\n    image_templates:\n      - dunglas/vulcain:{{ .Tag }}-amd64\n      - dunglas/vulcain:{{ .Tag }}-arm64v8\n  - name_template: dunglas/vulcain:v{{ .Major }}\n    image_templates:\n      - dunglas/vulcain:v{{ .Major }}-amd64\n      - dunglas/vulcain:v{{ .Major }}-arm64v8\n  - name_template: dunglas/vulcain:v{{ .Major }}.{{ .Minor }}\n    image_templates:\n      - dunglas/vulcain:v{{ .Major }}.{{ .Minor }}-amd64\n      - dunglas/vulcain:v{{ .Major }}.{{ .Minor }}-arm64v8\n  - name_template: dunglas/vulcain:latest\n    image_templates:\n      - dunglas/vulcain:latest-amd64\n      - dunglas/vulcain:latest-arm64v8"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6494140625,
          "content": "# Contributing\n\n## License and Copyright Attribution\n\nWhen you open a Pull Request to the project, you agree to license your code under the [GNU AFFERO GENERAL PUBLIC LICENSE](LICENSE)\nand to transfer the copyright on the submitted code to [Kévin Dunglas](https://dunglas.dev).\n\nBe sure to you have the right to do that (if you are a professional, ask your company)!\n\nIf you include code from another project, please mention it in the Pull Request description and credit the original author.\n\n## Start a Demo API and Contribute to the Caddy Plugin\n\nClone the project:\n\n    $ git clone https://github.com/dunglas/vulcain\n    $ cd vulcain\n\nInstall the dependencies:\n\n    $ go get\n\nRun the fixture API:\n\n    # You must run the server too\n    $ cd ../fixtures/\n    $ go run main.go\n\nRun Caddy with the Vulcain module as a reverse proxy:\n\n    $ cd caddy/\n    $ go run vulcain/main.go\n\nAlternatively, to use VSCode and its integrated debugger, use this configuration in `.vscode/launch.json`:\n\n```json\n{\n   \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch the proxy\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${workspaceFolder}/caddy/vulcain\",\n            \"args\": [\"run\", \"--config\", \"../fixtures/Caddyfile\"]\n        }\n    ]\n}\n```\n\nGo on `http://localhost:8081` and enjoy!\nThe API is available on `https://localhost:3000`.\n\nAn API using an OpenAPI mapping is available on `https://localhost:3000/oa/books.json`.\n\nTo run the test suite:\n\n    $ go test -v -timeout 30s github.com/dunglas/vulcain/caddy\n\n## Start a Demo API and Contribute to the Legacy Gateway Server\n\nClone the project:\n\n    $ git clone https://github.com/dunglas/vulcain\n    $ cd vulcain\n\nInstall the dependencies:\n\n    $ go get\n\nRun the server:\n\n    $ go run cmd/vulcain/main.go\n\nRun the fixture API:\n\n    # You must run the server too\n    $ cd fixtures/\n    $ go run main.go\n\nGo to `https://localhost:3000` and accept the self-signed certificate.\nGo on `http://localhost:8081` and enjoy!\n\nAn API using an OpenAPI mapping is available on `https://localhost:3000/oa/books.json`.\n\nTo run the test suite:\n\n    $ go test -v -timeout 30s github.com/dunglas/vulcain/gateway\n\n### curl Examples\n\nPreload all relations referenced in the `hydra:member`, then in the author relationship, but only include the title and the author of these relations:\n\n    $ curl https://localhost:3000/books.jsonld \\\n        --get \\\n        --data 'preload=\"/hydra:member/*/author\"' \\\n        --data 'fields=\"/hydra:member/*/author\", \"/hydra:member/*/title\"' \\\n        --verbose \\\n        --insecure\n\nUsing headers:\n\n    $ curl https://localhost:3000/books.jsonld \\\n        --get \\\n        --header 'Preload: \"/hydra:member/*/author\"' \\\n        --header 'Fields: \"/hydra:member/*/author\", \"/hydra:member/*/title\"' \\\n        --verbose \\\n        --insecure\n\n## Protocol\n\nThe protocol is written in Markdown, compatible with [Mmark](https://mmark.miek.nl/).\nIt is then converted in the [the \"xml2rfc\" Version 3 Vocabulary](https://tools.ietf.org/html/rfc7991).\n\nTo contribute to the protocol itself:\n\n* Make your changes\n* [Download Mmark](https://github.com/mmarkdown/mmark/releases)\n* [Download `xml2rfc` using pip](https://pypi.org/project/xml2rfc/): `pip install xml2rfc`\n* Format the Markdown file: `mmark -markdown -w spec/vulcain.md`\n* Generate the XML file: `mmark spec/vulcain.md > spec/vulcain.xml`\n* Validate the generated XML file and generate the text file: `xml2rfc --text --v3 spec/vulcain.xml`\n* Remove non-ASCII characters from the generated `vulcain.txt` file (example: K**é**vin, Andr**é**, **Ã**elik)\n* If appropriate, be sure to update the reference implementation accordingly\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 2.09375,
          "content": "Copyright (C) 2019-present Kévin Dunglas\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License, version 3,\nas published by the Free Software Foundation.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAs a special exception, the copyright holders give permission to link the\ncode of portions of this program with the OpenSSL library under certain\nconditions as described in each individual source file and distribute\nlinked combinations including the program with the OpenSSL library. You\nmust comply with the GNU Affero General Public License in all respects\nfor all of the code used other than as permitted herein. If you modify\nfile(s) with this exception, you may extend this exception to your\nversion of the file(s), but you are not obligated to do so. If you do not\nwish to do so, delete this exception statement from your version. If you\ndelete this exception statement from all source files in the program,\nthen also delete it in the license file.\n\nThe copyright holders provide the following statement as a clarification\nof the conditions of this License.  This statement is not a further\nrestriction.  It will be deemed a legal notice allowed under Section 7b,\nand must accordingly be preserved in any redistribution of the Program.\nThis clarification applies to the vulcain licensed hereunder by\nKévin Dunglas.  The Corresponding Source of the Program includes any\nsoftware that interacts with the Program and contains functionality to\nprovision or manage the Program for the purpose of enabling third-party\nusers to interact with the Program remotely through a computer network,\nand any such software that is added to or combined with the Program\nconstitutes modification that produces a work based on the Program.\n"
        },
        {
          "name": "Caddyfile",
          "type": "blob",
          "size": 0.2724609375,
          "content": "{\n\t{$CADDY_GLOBAL_OPTIONS}\n}\n\n{$CADDY_EXTRA_CONFIG}\n\n{$SERVER_NAME:localhost} {\n\tvulcain {\n\t\t#openapi_file ../../fixtures/openapi.yaml\n        #max_pushes 0\n        #early_hints\n\t}\n\tlog\n\tencode zstd gzip\n\treverse_proxy {env.VULCAIN_UPSTREAM}\n\n\t{$CADDY_SERVER_EXTRA_DIRECTIVES}\n}\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.0830078125,
          "content": "FROM caddy:2-alpine\n\nCOPY vulcain /usr/bin/caddy\nCOPY Caddyfile /etc/caddy/Caddyfile\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.2763671875,
          "content": "<h1 align=\"center\"><img src=\"vulcain.svg\" alt=\"Vulcain: Use HTTP/2 Server Push to create fast and idiomatic client-driven REST APIs\" title=\"Use HTTP/2 Server Push to create fast and idiomatic client-driven REST APIs\"></h1>\n\nVulcain is a brand new protocol using Preload hints and the `103 Early Hints` status code to create fast and idiomatic **client-driven REST** APIs.\n\nAn open source gateway server (a module for the [Caddy web server](https://caddyserver.com)), which you can put on top of **any existing web API** to instantly turn it into a Vulcain-compatible API is also provided!\n\nIt supports [hypermedia APIs](https://restfulapi.net/hateoas/) (e.g. any API created with [API Platform](https://api-platform.com)) but also any \"legacy\" API by documenting its relations [using OpenAPI](docs/gateway/openapi.md).\n\n[![Plant Tree](https://img.shields.io/badge/dynamic/json?color=brightgreen&label=Plant%20Tree&query=%24.total&url=https%3A%2F%2Fpublic.offset.earth%2Fusers%2Ftreeware%2Ftrees)](https://plant.treeware.earth/dunglas/vulcain)\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/dunglas/vulcain/gateway)](https://pkg.go.dev/github.com/dunglas/vulcain)\n[![Build Status](https://github.com/dunglas/vulcain/workflows/CI/badge.svg)](https://github.com/dunglas/vulcain/actions)\n[![codecov](https://codecov.io/gh/dunglas/vulcain/branch/master/graph/badge.svg)](https://codecov.io/gh/dunglas/vulcain)\n[![Go Report Card](https://goreportcard.com/badge/github.com/dunglas/vulcain)](https://goreportcard.com/report/github.com/dunglas/vulcain)\n\n[tabs]\n\n### Preload\n![Vulcain Schema](schemas/vulcain_doc_main_200.png)\n\n### Preload + Early Hints\n![Vulcain Schema](schemas/vulcain_doc_main_early_hints.png)\n\n### Server push\n![Vulcain Schema](schemas/vulcain_doc_main_server_push.png)\n\n[/tabs]\n\nGrab What You Need... Burn The REST!\n\n* [Introduction](#introduction)\n  * [Pushing Relations](#pushing-relations)\n  * [Filtering Resources](#filtering-resources)\n* [Gateway Server](docs/gateway/)\n  * [Caddy Web Server Module](docs/gateway/caddy.md)\n  * [Mapping a Non-Hypermedia API using OpenAPI](docs/gateway/openapi.md)\n  * [Legacy Standalone Server](docs/gateway/install.md)\n  * [Legacy Configuration](docs/gateway/config.md)\n* [Comparison with GraphQL and Other API Formats](docs/graphql.md)\n* [Using GraphQL as Query Language for Vulcain](docs/graphql.md#using-graphql-as-query-language-for-vulcain)\n* [Demo API](CONTRIBUTING.md)\n* [Cache Considerations](docs/cache.md)\n* [Formal Specification](spec/vulcain.md)\n* [Getting Help](docs/help.md)\n\nThe protocol has been published as [an Internet Draft](https://datatracker.ietf.org/doc/draft-dunglas-vulcain/) that [is maintained in this repository](spec/vulcain.md).\n\nA reference, production-grade, implementation [**gateway server**](docs/gateway/caddy.md) is also available in this repository.\nIt's free software (AGPL) written in Go. A Docker image is provided.\n\n## Introduction\n\nOver the years, several formats have been created to fix performance bottlenecks impacting web APIs: [over fetching, under fetching](https://stackoverflow.com/a/44568365/1352334), [the n+1 problem](https://restfulapi.net/rest-api-n-1-problem/)...\n\n[Current solutions for these problems (GraphQL, JSON:API's embedded resources and sparse fieldsets, ...)](docs/graphql.md) are smart [network hacks](https://apisyouwonthate.com/blog/lets-stop-building-apis-around-a-network-hack) for HTTP/1. But these hacks come with (too) many drawbacks when it comes to HTTP cache, logs and even security.\n\nFortunately, thanks to the new features introduced in HTTP/2, it's now possible to create true REST APIs fixing these problems with ease and class! Here comes Vulcain!\n\nSee also [the comparison between Vulcain and GraphQL and other API formats](docs/graphql.md).\n\n## Pushing Relations\n\n[tabs]\n\n### Preload\n![Preload Schema](schemas/vulcain_doc_preload_200.png)\n\n### Preload + Early Hints\n![Preload Schema](schemas/vulcain_doc_preload_early_hints.png)\n\n### Server push\n![Preload Schema](schemas/vulcain_doc_preload_server_push.png)\n\n[/tabs]\n\nConsidering the following resources:\n\n`/books`\n\n```json\n{\n    \"member\": [\n        \"/books/1\",\n        \"/books/2\"\n    ]\n}\n```\n\n`/books/1`\n\n```json\n{\n    \"title\": \"1984\",\n    \"author\": \"/authors/1\"\n}\n```\n\n`/books/2`\n\n```json\n{\n    \"title\": \"Homage to Catalonia\",\n    \"author\": \"/authors/1\"\n}\n```\n\n`/authors/1`\n\n```json\n{\n    \"givenName\": \"George\",\n    \"familyName\": \"Orwell\"\n}\n```\n\nThe `Preload` HTTP header introduced by Vulcain can be used to ask the server to immediately push resources related to the requested one using 103 Early Hints or HTTP/2 Server Push:\n\n```http\nGET /books/ HTTP/2\nPreload: \"/member/*/author\"\n```\n\nIn addition to `/books`, a Vulcain server will push the `/books/1`, `/books/2` and `/authors/1` resources!\n\nExample in JavaScript:\n\n```javascript\nconst bookResp = await fetch(\"/books/1\", { headers: { Preload: `\"/author\"` } });\nconst bookJSON = await bookResp.json();\n\n// Returns immediately, the resource has been pushed and is already in the push cache\nconst authorResp = await fetch(bookJSON.author);\n// ...\n```\n\n[Full example, including collections](fixtures/static/main.js), see also [use GraphQL as query language for Vulcain](docs/graphql.md#using-graphql-as-query-language-for-vulcain).\n\nThanks to [HTTP/2+ multiplexing](https://stackoverflow.com/a/36519379/1352334), pushed responses will be sent in parallel.\n\nWhen the client will follow the links and issue a new HTTP request (for instance using `fetch()`), the corresponding response will already be in cache, and will be used instantly!\n\nFor non-hypermedia APIs (when the identifier of the related resource is a simple string or int), [use an OpenAPI specification to configure links between resources](docs/gateway/openapi.md).\nTip: the easiest way to create a hypermedia API is to use [the API Platform framework](https://api-platform.com) (by the same author as Vulcain).\n\nWhen possible, we recommend using [Early Hints](https://tools.ietf.org/html/rfc8297) (the 103 HTTP status code) to push the relations.\nVulcain allows to gracefully fallback to [`preload` links](https://www.w3.org/TR/preload/) in the headers of the final response or to [HTTP/2 Server Push](https://tools.ietf.org/html/rfc7540#section-10.1) when the 103 status code isn't supported.\n\n### Query Parameter\n\nAlternatively to HTTP headers, the `preload` query parameter can be used:\n\n[tabs]\n\n#### Preload\n![Preload Query Schema](schemas/vulcain_doc_preload_query_200.png)\n\n#### Preload + Early Hints\n![Preload Query Schema](schemas/vulcain_doc_preload_query_early_hints.png)\n\n#### Server push\n![Preload Query Schema](schemas/vulcain_doc_preload_query_server_push.png)\n\n[/tabs]\n\n## Filtering Resources\n\n[tabs]\n\n### Preload\n![Filter Schema](schemas/vulcain_doc_filter_200.png)\n\n### Preload + Early Hints\n![Filter Schema](schemas/vulcain_doc_filter_early_hints.png)\n\n### Server push\n![Filter Schema](schemas/vulcain_doc_filter_server_push.png)\n\n[/tabs]\n\nThe `Fields` HTTP header allows the client to ask the server to return only the specified fields of the requested resource, and of the preloaded related resources.\n\nMultiple `Fields` HTTP headers can be passed. All fields matching at least one of these headers will be returned. Other fields of the resource  will be omitted.\n\nConsidering the following resources:\n\n`/books/1`\n\n```json\n{\n    \"title\": \"1984\",\n    \"genre\": \"novel\",\n    \"author\": \"/authors/1\"\n}\n```\n\n`/authors/1`\n\n```json\n{\n    \"givenName\": \"George\",\n    \"familyName\": \"Orwell\"\n}\n```\n\nAnd the following HTTP request:\n\n```http\nGET /books/1 HTTP/2\nPreload: \"/author\"\nFields: \"/author/familyName\", \"/genre\"\n```\n\nA Vulcain server will return a response containing the following JSON document:\n\n```json\n{\n    \"genre\": \"novel\",\n    \"author\": \"/authors/1\"\n}\n```\n\nIt will also push the following filtered `/authors/1` resource:\n\n```json\n{\n    \"familyName\": \"Orwell\"\n}\n```\n\n### Query Parameter\n\nAlternatively to HTTP headers, the `fields` query parameter can be used to filter resources:\n\n[tabs]\n\n#### Preload\n![Fields Schema](schemas/vulcain_doc_filter_query_200.png)\n\n#### Preload + early hints\n![Fields Schema](schemas/vulcain_doc_filter_query_early_hints.png)\n\n#### Server push\n![Fields Schema](schemas/vulcain_doc_filter_query_server_push.png)\n\n[/tabs]\n\n## See Also\n\n* [Mapping a non-hypermedia API using OpenAPI](docs/gateway/openapi.md)\n* [Cache considerations](docs/cache.md)\n* [Using GraphQL with Vulcain](docs/graphql.md#using-graphql-as-query-language-for-vulcain)\n* [Using other selectors such as XPath and CSS selectors for non-JSON documents](spec/vulcain.md#selectors) (only JSON Pointer [is currently supported](https://github.com/dunglas/vulcain/issues/3) by the Gateway Server)\n\n## License and Copyright \n\ntl;dr:\n\n* proprietary software **can** implement the Vulcain specification\n* proprietary software **can** be used behind the Vulcain Gateway Server without having to share their sources\n* modifications made to the Vulcain Gateway Server **must** be shared\n* alternatively, a commercial license is available for the Vulcain Gateway Server\n\n[The specification](spec/vulcain.md) is available under [the IETF copyright policy](https://trustee.ietf.org/copyright-faq.html). The Vulcain **specification** can be implemented by any software, including proprietary software.\n\nThe Vulcain Gateway Server is licensed under [AGPL-3.0](LICENSE). This license implies that if you modify the Vulcain Gateway Server, you must share those modifications. However, the AGPL-3.0 license applies only to the gateway server itself, **not to software used behind the gateway**.\n\nFor companies not wanting, or not able to use AGPL-3.0 licensed software, commercial licenses are also available. [Contact us for more information](mailto:kevin+vulcain@dunglas.dev).\n\n## Treeware\n\nThis package is [Treeware](https://treeware.earth). If you use it in production, then we ask that you [**buy the world a tree**](https://plant.treeware.earth/dunglas/vulcain) to thank us for our work. By contributing to the Treeware forest you’ll be creating employment for local families and restoring wildlife habitats.\n\n## Credits\n\nCreated by [Kévin Dunglas](https://dunglas.dev). Sponsored by [Les-Tilleuls.coop](https://les-tilleuls.coop).\n\nSome ideas and code used in Vulcain's reference implementation have been taken from [Hades](https://github.com/gabesullice/hades) by [Gabe Sullice](https://github.com/gabesullice), an HTTP/2 reverse proxy for JSON:API backend.\n\nSee also [the prior arts](docs/prior-art.md).\n"
        },
        {
          "name": "caddy",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example_test.go",
          "type": "blob",
          "size": 2.294921875,
          "content": "package vulcain_test\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n\n\t\"github.com/dunglas/vulcain\"\n)\n\nfunc Example() {\n\thandler := http.NewServeMux()\n\thandler.Handle(\"/books.json\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tfmt.Fprintln(w, `{\n\t\"title\": \"1984\",\n\t\"genre\": \"dystopia\",\n\t\"author\": \"/authors/orwell.json\"\n}`)\n\t}))\n\thandler.Handle(\"/authors/orwell.json\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tfmt.Fprintln(w, `{\n\t\t\t\"name\": \"George Orwell\",\n\t\t\t\"birthDate\": \"1903-06-25\"\n\t\t}`)\n\t}))\n\n\tbackendServer := httptest.NewServer(handler)\n\tdefer backendServer.Close()\n\n\trpURL, err := url.Parse(backendServer.URL)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tvulcain := vulcain.New()\n\n\trpHandler := http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {\n\t\tr := req.WithContext(vulcain.CreateRequestContext(rw, req))\n\t\tvar wait bool\n\t\tdefer func() { vulcain.Finish(r, wait) }()\n\n\t\trp := httputil.NewSingleHostReverseProxy(rpURL)\n\t\trp.ModifyResponse = func(resp *http.Response) error {\n\t\t\tif !vulcain.IsValidRequest(r) || !vulcain.IsValidResponse(r, resp.StatusCode, resp.Header) {\n\t\t\t\treturn nil\n\t\t\t}\n\n\t\t\tnewBody, err := vulcain.Apply(r, rw, resp.Body, resp.Header)\n\t\t\tif newBody == nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\twait = true\n\t\t\tnewBodyBuffer := bytes.NewBuffer(newBody)\n\t\t\tresp.Body = io.NopCloser(newBodyBuffer)\n\n\t\t\treturn nil\n\t\t}\n\t\trp.ErrorHandler = func(rw http.ResponseWriter, req *http.Request, err error) {\n\t\t\twait = false\n\t\t}\n\n\t\trp.ServeHTTP(rw, req)\n\t})\n\n\tfrontendProxy := httptest.NewServer(rpHandler)\n\tdefer frontendProxy.Close()\n\n\tresp, err := http.Get(frontendProxy.URL + `/books.json?preload=\"/author\"&fields=\"/title\",\"/author\"`)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tb, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Go's HTTP client doesn't support HTTP/2 Server Push yet, so a Link rel=preload is added as fallback\n\t// Browsers and other clients supporting Server Push will receive a push instead\n\tfmt.Printf(\"%v\\n\\n\", resp.Header.Values(\"Link\"))\n\tfmt.Printf(\"%s\", b)\n\n\t// Output:\n\t// [</authors/orwell.json>; rel=preload; as=fetch]\n\t//\n\t// {\"author\":\"/authors/orwell.json\",\"title\":\"1984\"}\n}\n"
        },
        {
          "name": "fixtures",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.1376953125,
          "content": "module github.com/dunglas/vulcain\n\ngo 1.21\n\nrequire (\n\tgithub.com/dunglas/httpsfv v1.0.2\n\tgithub.com/getkin/kin-openapi v0.128.0\n\tgithub.com/gofrs/uuid v4.4.0+incompatible\n\tgithub.com/gorilla/handlers v1.5.2\n\tgithub.com/joho/godotenv v1.5.1\n\tgithub.com/stretchr/testify v1.10.0\n\tgithub.com/tidwall/gjson v1.18.0\n\tgithub.com/tidwall/sjson v1.2.5\n\tgo.uber.org/zap v1.27.0\n\tgolang.org/x/crypto v0.32.0\n\tgolang.org/x/net v0.34.0\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.21.0 // indirect\n\tgithub.com/go-openapi/swag v0.23.0 // indirect\n\tgithub.com/invopop/yaml v0.3.1 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/mailru/easyjson v0.9.0 // indirect\n\tgithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 // indirect\n\tgithub.com/perimeterx/marshmallow v1.1.5 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.1 // indirect\n\tgo.uber.org/multierr v1.11.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.958984375,
          "content": "github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dunglas/httpsfv v1.0.2 h1:iERDp/YAfnojSDJ7PW3dj1AReJz4MrwbECSSE59JWL0=\ngithub.com/dunglas/httpsfv v1.0.2/go.mod h1:zID2mqw9mFsnt7YC3vYQ9/cjq30q41W+1AnDwH8TiMg=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/getkin/kin-openapi v0.128.0 h1:jqq3D9vC9pPq1dGcOCv7yOp1DaEe7c/T1vzcLbITSp4=\ngithub.com/getkin/kin-openapi v0.128.0/go.mod h1:OZrfXzUfGrNbsKj+xmFBx6E5c6yH3At/tAKSc2UszXM=\ngithub.com/go-openapi/jsonpointer v0.21.0 h1:YgdVicSA9vH5RiHs9TZW5oyafXZFc6+2Vc1rr/O9oNQ=\ngithub.com/go-openapi/jsonpointer v0.21.0/go.mod h1:IUyH9l/+uyhIYQ/PXVA41Rexl+kOkAPDdXEYns6fzUY=\ngithub.com/go-openapi/swag v0.23.0 h1:vsEVJDUo2hPJ2tu0/Xc+4noaxyEffXNIs3cOULZ+GrE=\ngithub.com/go-openapi/swag v0.23.0/go.mod h1:esZ8ITTYEsH1V2trKHjAN8Ai7xHb8RV+YSZ577vPjgQ=\ngithub.com/go-test/deep v1.0.8 h1:TDsG77qcSprGbC6vTN8OuXp5g+J+b5Pcguhf7Zt61VM=\ngithub.com/go-test/deep v1.0.8/go.mod h1:5C2ZWiW0ErCdrYzpqxLbTX7MG14M9iiw8DgHncVwcsE=\ngithub.com/gofrs/uuid v4.4.0+incompatible h1:3qXRTX8/NbyulANqlc0lchS1gqAVxRgsuW1YrTJupqA=\ngithub.com/gofrs/uuid v4.4.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/gorilla/handlers v1.5.2 h1:cLTUSsNkgcwhgRqvCNmdbRWG0A3N4F+M2nWKdScwyEE=\ngithub.com/gorilla/handlers v1.5.2/go.mod h1:dX+xVpaxdSw+q0Qek8SSsl3dfMk3jNddUkMzo0GtH0w=\ngithub.com/gorilla/mux v1.8.0 h1:i40aqfkR1h2SlN9hojwV5ZA91wcXFOvkdNIeFDP5koI=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/invopop/yaml v0.3.1 h1:f0+ZpmhfBSS4MhG+4HYseMdJhoeeopbSKbq5Rpeelso=\ngithub.com/invopop/yaml v0.3.1/go.mod h1:PMOp3nn4/12yEZUFfmOuNHJsZToEEOwoWsT+D81KkeA=\ngithub.com/joho/godotenv v1.5.1 h1:7eLL/+HRGLY0ldzfGMeQkb7vMd0as4CfYvUVzLqw0N0=\ngithub.com/joho/godotenv v1.5.1/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/mailru/easyjson v0.9.0 h1:PrnmzHw7262yW8sTBwxi1PdJA3Iw/EKBa8psRf7d9a4=\ngithub.com/mailru/easyjson v0.9.0/go.mod h1:1+xMtQp2MRNVL/V1bOzuP3aP8VNwRW55fQUto+XFtTU=\ngithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 h1:RWengNIwukTxcDr9M+97sNutRR1RKhG96O6jWumTTnw=\ngithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826/go.mod h1:TaXosZuwdSHYgviHp1DAtfrULt5eUgsSMsZf+YrPgl8=\ngithub.com/perimeterx/marshmallow v1.1.5 h1:a2LALqQ1BlHM8PZblsDdidgv1mWi1DgC2UmX50IvK2s=\ngithub.com/perimeterx/marshmallow v1.1.5/go.mod h1:dsXbUu8CRzfYP5a87xpp0xq9S3u0Vchtcl8we9tYaXw=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tidwall/gjson v1.14.2/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/gjson v1.18.0 h1:FIDeeyB800efLX89e5a8Y0BNH+LOngJyGrIWxG2FKQY=\ngithub.com/tidwall/gjson v1.18.0/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/pretty v1.2.1 h1:qjsOFOWWQl+N3RsoF5/ssm1pHmJJwhjlSbZ51I6wMl4=\ngithub.com/tidwall/pretty v1.2.1/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/sjson v1.2.5 h1:kLy8mja+1c9jlljvWTlSazM7cKDRfJuR/bOJhcY5NcY=\ngithub.com/tidwall/sjson v1.2.5/go.mod h1:Fvgq9kS/6ociJEDnK0Fk1cpYF4FIW6ZF7LAe+6jwd28=\ngithub.com/ugorji/go/codec v1.2.7 h1:YPXUKf7fYbp/y8xloBqZOw2qaVggbfwMlI8WM3wZUJ0=\ngithub.com/ugorji/go/codec v1.2.7/go.mod h1:WGN1fab3R1fzQlVQTkfxVtIBhWDRqOviHU95kRgeqEY=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngo.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=\ngo.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=\ngo.uber.org/zap v1.27.0 h1:aJMhYGrd5QSmlpLMr2MftRKl7t8J8PTZPA732ud/XR8=\ngo.uber.org/zap v1.27.0/go.mod h1:GB2qFLM7cTU87MWRP2mPIjqfIDnGu+VIO4V/SdhGo2E=\ngolang.org/x/crypto v0.32.0 h1:euUpcYgM8WcP71gNpTqQCn6rC2t6ULUPiOzfWaXVVfc=\ngolang.org/x/crypto v0.32.0/go.mod h1:ZnnJkOaASj8g0AjIduWNlq2NRxL0PlBrbKVyZ6V/Ugc=\ngolang.org/x/net v0.34.0 h1:Mb7Mrk043xzHgnRM88suvJFwzVrRfHEHJEl5/71CKw0=\ngolang.org/x/net v0.34.0/go.mod h1:di0qlW3YNM5oh6GqDGQr92MyTozJPmybPK4Ev/Gm31k=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "json_pointer.go",
          "type": "blob",
          "size": 2.7080078125,
          "content": "package vulcain\n\nimport (\n\t\"strings\"\n\n\t\"github.com/dunglas/httpsfv\"\n)\n\n// node represents a node of a JSON document\ntype node struct {\n\tpreload       bool\n\tpreloadParams []*httpsfv.Params\n\tfields        bool\n\tfieldsParams  []*httpsfv.Params\n\tpath          string\n\tparent        *node\n\tchildren      []*node\n}\n\n// _type is the type of operation to apply, can be Preload or Fields\ntype _type int\n\nconst (\n\tpreload _type = iota\n\tfields\n)\n\n// importPointers imports JSON pointers in the tree\nfunc (n *node) importPointers(t _type, pointers httpsfv.List) {\n\tfor _, member := range pointers {\n\t\t// Ignore invalid value\n\t\tmember, ok := member.(httpsfv.Item)\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\n\t\tpointer, ok := member.Value.(string)\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\n\t\tpointer = strings.Trim(pointer, \"/\")\n\t\tif pointer != \"\" {\n\t\t\tpartsToTree(t, strings.Split(pointer, \"/\"), n, member.Params)\n\t\t}\n\t}\n}\n\n// String returns a JSON pointer\nfunc (n *node) String() string {\n\tif n.parent == nil {\n\t\treturn \"/\"\n\t}\n\n\ts := n.path\n\tc := n.parent\n\tfor c != nil {\n\t\ts = c.path + \"/\" + s\n\t\tc = c.parent\n\t}\n\n\treturn s\n}\n\n// partsToTree transforms a splitted JSON pointer to a tree\nfunc partsToTree(t _type, parts []string, root *node, params *httpsfv.Params) {\n\tif len(parts) == 0 {\n\t\treturn\n\t}\n\n\tvar child *node\n\tfor _, c := range root.children {\n\t\tif c.path == parts[0] {\n\t\t\tchild = c\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif child == nil {\n\t\tchild = &node{}\n\t\tchild.path = parts[0]\n\t\tchild.parent = root\n\t\troot.children = append(root.children, child)\n\t}\n\n\tswitch t {\n\tcase preload:\n\t\tchild.preload = true\n\t\tchild.preloadParams = append(child.preloadParams, params)\n\tcase fields:\n\t\tchild.fields = true\n\t\tchild.fieldsParams = append(child.fieldsParams, params)\n\t}\n\n\tpartsToTree(t, parts[1:], child, params)\n}\n\n// hasChildren checks if the node has at least a child of the given type\nfunc (n *node) hasChildren(t _type) bool {\n\tfor _, c := range n.children {\n\t\tif t == preload && c.preload {\n\t\t\treturn true\n\t\t}\n\t\tif t == fields && c.fields {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// httpList transforms the node in an HTTP Structured Field List\nfunc (n *node) httpList(t _type, prefix string) httpsfv.List {\n\tif len(n.children) == 0 {\n\t\tif prefix == \"\" {\n\t\t\treturn httpsfv.List{}\n\t\t}\n\n\t\tvar list httpsfv.List\n\t\tswitch t {\n\t\tcase preload:\n\t\t\tfor _, params := range n.preloadParams {\n\t\t\t\tlist = append(list, httpsfv.Item{Value: prefix, Params: params})\n\t\t\t}\n\t\tcase fields:\n\t\t\tfor _, params := range n.fieldsParams {\n\t\t\t\tlist = append(list, httpsfv.Item{Value: prefix, Params: params})\n\t\t\t}\n\t\t}\n\n\t\treturn list\n\t}\n\n\tvar list httpsfv.List\n\tfor _, c := range n.children {\n\t\tif (t == preload && !c.preload) || (t == fields && !c.fields) {\n\t\t\tcontinue\n\t\t}\n\n\t\tlist = append(list, c.httpList(t, prefix+\"/\"+c.path)...)\n\t}\n\n\treturn list\n}\n"
        },
        {
          "name": "json_pointer_test.go",
          "type": "blob",
          "size": 1.2734375,
          "content": "package vulcain\n\nimport (\n\t\"testing\"\n\n\t\"github.com/dunglas/httpsfv\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestRootNode(t *testing.T) {\n\tn := &node{}\n\tassert.Empty(t, n.httpList(preload, \"\"))\n}\n\nfunc TestImportPointers(t *testing.T) {\n\tn := &node{}\n\tn.importPointers(preload, httpsfv.List{httpsfv.NewItem(\"/foo\"), httpsfv.NewItem(\"/bar/foo\"), httpsfv.NewItem(\"/foo/*\"), httpsfv.NewItem(\"/bar/foo/*/baz\")})\n\tn.importPointers(fields, httpsfv.List{httpsfv.NewItem(\"/foo/bat\"), httpsfv.NewItem(\"/baz\"), httpsfv.NewItem(\"/baz/*\"), httpsfv.NewItem(\"/baz\")})\n\n\tassert.Equal(t, httpsfv.List{httpsfv.NewItem(\"/foo/*\"), httpsfv.NewItem(\"/bar/foo/*/baz\")}, n.httpList(preload, \"\"))\n\tassert.Equal(t, httpsfv.List{httpsfv.NewItem(\"/foo/bat\"), httpsfv.NewItem(\"/baz/*\")}, n.httpList(fields, \"\"))\n}\n\nfunc TestString(t *testing.T) {\n\tn := &node{}\n\tn.importPointers(preload, httpsfv.List{httpsfv.NewItem(\"/foo\"), httpsfv.NewItem(\"/bar/foo\"), httpsfv.NewItem(\"/foo/*\"), httpsfv.NewItem(\"/bar/foo/*/baz\")})\n\n\tassert.Equal(t, \"/\", n.String())\n\tassert.Equal(t, \"/foo\", n.children[0].String())\n\tassert.Equal(t, \"/bar/foo\", n.children[1].children[0].String())\n\tassert.Equal(t, \"/foo/*\", n.children[0].children[0].String())\n\tassert.Equal(t, \"/bar/foo/*/baz\", n.children[1].children[0].children[0].children[0].String())\n}\n"
        },
        {
          "name": "legacy.Dockerfile",
          "type": "blob",
          "size": 0.0751953125,
          "content": "FROM gcr.io/distroless/static\nCOPY vulcain /\nCMD [\"/vulcain\"]\nEXPOSE 80 443\n\n"
        },
        {
          "name": "openapi.go",
          "type": "blob",
          "size": 2.853515625,
          "content": "package vulcain\n\nimport (\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"github.com/getkin/kin-openapi/openapi3\"\n\t\"github.com/getkin/kin-openapi/routers\"\n\t\"github.com/getkin/kin-openapi/routers/legacy\"\n\t\"go.uber.org/zap\"\n)\n\n// openAPI is used to find the URL of a relation using an OpenAPI description\ntype openAPI struct {\n\tswagger *openapi3.T\n\trouter  routers.Router\n\tlogger  *zap.Logger\n}\n\n// newOpenAPI creates a ne openAPI instance\nfunc newOpenAPI(file string, logger *zap.Logger) *openAPI {\n\tswagger, err := openapi3.NewLoader().LoadFromFile(file)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trouter, err := legacy.NewRouter(swagger)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn &openAPI{\n\t\tswagger,\n\t\trouter,\n\t\tlogger,\n\t}\n}\n\n// getRoute gets the routers.Route instance related to the given URL\nfunc (o *openAPI) getRoute(url *url.URL) *routers.Route {\n\troute, _, err := o.router.FindRoute(&http.Request{Method: \"GET\", URL: url})\n\tif err != nil {\n\t\to.logger.Debug(\"route not found in the OpenAPI specification\", zap.Stringer(\"url\", url), zap.Error(err))\n\t}\n\n\treturn route\n}\n\n// getRelation generated the link for the given parameters\n// TODO: support operationRef in addition to operationId\nfunc (o *openAPI) getRelation(r *routers.Route, selector, value string) string {\n\tfor code, responseRef := range r.Operation.Responses.Map() {\n\t\tif (!strings.HasPrefix(code, \"2\")) || responseRef.Value == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tif rel := o.generateLinkForResponse(responseRef.Value, selector, value); rel != \"\" {\n\t\t\treturn rel\n\t\t}\n\t}\n\n\t// Fallback on the default response\n\tif d := r.Operation.Responses.Default(); d != nil && d.Value != nil {\n\t\tif rel := o.generateLinkForResponse(d.Value, selector, value); rel != \"\" {\n\t\t\treturn rel\n\t\t}\n\t}\n\n\to.logger.Error(\"openAPI Link not found (using operationRef isn't supported yet)\")\n\n\treturn \"\"\n}\n\n// generateLinkForResponse uses the openapi3.Response extracted from the OpenAPI description to generate a URL\nfunc (o *openAPI) generateLinkForResponse(response *openapi3.Response, selector, value string) string {\n\tfor _, linkRef := range response.Links {\n\t\tif linkRef == nil || linkRef.Value == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tvar parameter string\n\t\tfor p, s := range linkRef.Value.Parameters {\n\t\t\tif s == \"$response.body#\"+selector {\n\t\t\t\tparameter = p\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif parameter != \"\" && linkRef.Value.OperationID != \"\" {\n\t\t\treturn o.generateLink(linkRef.Value.OperationID, parameter, value)\n\t\t}\n\t}\n\n\treturn \"\"\n}\n\n// generateLink uses the template IRI extracted from the OpenAPI description to generate a URL\nfunc (o *openAPI) generateLink(operationID, parameter, value string) string {\n\tfor path, i := range o.swagger.Paths.Map() {\n\t\tif op := i.GetOperation(\"GET\"); op != nil && op.OperationID == operationID {\n\t\t\treturn strings.ReplaceAll(path, \"{\"+parameter+\"}\", value)\n\t\t}\n\t}\n\n\to.logger.Debug(\"operation not found in the OpenAPI specification\", zap.String(\"operationID\", operationID))\n\n\treturn \"\"\n}\n"
        },
        {
          "name": "openapi_test.go",
          "type": "blob",
          "size": 1.158203125,
          "content": "package vulcain\n\nimport (\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.uber.org/zap\"\n)\n\nconst openapiFixture = \"./fixtures/openapi.yaml\"\n\nfunc TestNewOpenAPI(t *testing.T) {\n\tassert.NotNil(t, newOpenAPI(openapiFixture, zap.NewNop()))\n\tassert.Panics(t, func() {\n\t\tnewOpenAPI(\"notexists\", zap.NewNop())\n\t})\n}\n\nfunc TestGetRoute(t *testing.T) {\n\toa := newOpenAPI(openapiFixture, zap.NewNop())\n\n\tu, _ := url.Parse(\"/oa/books/123\")\n\tassert.NotNil(t, oa.getRoute(u))\n\n\tu, _ = url.Parse(\"/notexists\")\n\tassert.Nil(t, oa.getRoute(u))\n}\n\nfunc TestGetRelation(t *testing.T) {\n\toa := newOpenAPI(openapiFixture, zap.NewNop())\n\n\tu, _ := url.Parse(\"/oa/books/123\")\n\tr := oa.getRelation(oa.getRoute(u), \"/author\", \"456\")\n\tassert.Equal(t, \"/oa/authors/456\", r)\n\n\tu, _ = url.Parse(\"/oa/books.json\")\n\tr = oa.getRelation(oa.getRoute(u), \"/member/*\", \"1936\")\n\tassert.Equal(t, \"/oa/books/1936\", r)\n\n\tu, _ = url.Parse(\"/oa/books.json\")\n\tr = oa.getRelation(oa.getRoute(u), \"/notexists\", \"1891\")\n\tassert.Equal(t, \"\", r)\n}\n\nfunc TestGenerateLink(t *testing.T) {\n\toa := newOpenAPI(openapiFixture, zap.NewNop())\n\tl := oa.generateLink(\"notexists\", \"nestor\", \"makhno\")\n\tassert.Equal(t, \"\", l)\n}\n"
        },
        {
          "name": "pusher.go",
          "type": "blob",
          "size": 3.9365234375,
          "content": "package vulcain\n\n// Adapted from the Hades project (https://github.com/gabesullice/hades/blob/master/lib/server/pusher.go)\n// Copyright (c) 2019 Gabriel Sullice\n// MIT License\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/gofrs/uuid\"\n\t\"go.uber.org/zap\"\n)\n\nconst internalRequestHeader = \"Vulcain-Explicit-Request\"\n\ntype ctxKey struct{}\n\n// waitPusher pushes relations and allow to wait for all PUSH_PROMISE to be sent\n// From the RFC:\n//   The server SHOULD send PUSH_PROMISE (Section 6.6) frames prior to sending any frames that reference the promised responses.\n//   This avoids a race where clients issue requests prior to receiving any PUSH_PROMISE frames.\n//\n// Use newWaitPusher() to create a wait pusher\ntype waitPusher struct {\n\tid         string\n\tnbPushes   int\n\tpushedURLs map[string]struct{}\n\tmaxPushes  int\n\tsync.WaitGroup\n\tsync.RWMutex\n\tinternalPusher http.Pusher\n}\n\n// errRelationAlreadyPushed occurs when the relation has already been pushed\nvar errRelationAlreadyPushed = errors.New(\"relation already pushed\")\n\nfunc (p *waitPusher) Push(url string, opts *http.PushOptions) error {\n\tif p.maxPushes != -1 && p.nbPushes >= p.maxPushes {\n\t\treturn fmt.Errorf(\"Maximum allowed pushes (%d) reached\", p.maxPushes)\n\t}\n\n\tcacheKey := fmt.Sprintf(\":p:%v:f:%v:u:%s\", opts.Header[\"Preload\"], opts.Header[\"Fields\"], url)\n\n\tp.Lock()\n\tif _, ok := p.pushedURLs[cacheKey]; ok {\n\t\tp.Unlock()\n\t\treturn errRelationAlreadyPushed\n\t}\n\n\tp.nbPushes++\n\tp.pushedURLs[cacheKey] = struct{}{}\n\tp.Unlock()\n\n\tp.Add(1)\n\tif err := p.internalPusher.Push(url, opts); err != nil {\n\t\tp.Done()\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// newWaitPusher creates a new waitPusher\nfunc newWaitPusher(p http.Pusher, id string, maxPushes int) *waitPusher {\n\treturn &waitPusher{\n\t\tinternalPusher: p,\n\t\tid:             id,\n\t\tmaxPushes:      maxPushes,\n\t\tpushedURLs:     make(map[string]struct{}),\n\t}\n}\n\n// pushers stores the list of current active pusher\n// The same pusher is shared for the explicit response and all pushed responses\ntype pushers struct {\n\tsync.RWMutex\n\tmaxPushes int\n\tpusherMap map[string]*waitPusher\n\tlogger    *zap.Logger\n}\n\n// add adds a new waitPusher to the list\nfunc (p *pushers) add(w *waitPusher) {\n\tp.Lock()\n\tdefer p.Unlock()\n\tp.pusherMap[w.id] = w\n}\n\n// get gets the waitPusher from the list\nfunc (p *pushers) get(id string) *waitPusher {\n\tp.RLock()\n\tdefer p.RUnlock()\n\treturn p.pusherMap[id]\n}\n\n// remove removes the waitPusher from the list\nfunc (p *pushers) remove(id string) {\n\tp.Lock()\n\tdefer p.Unlock()\n\tdelete(p.pusherMap, id)\n}\n\n// End of the code adapted from the Hades project\n\n// Copyright (c) 2020 Kévin Dunglas\n// APGLv3 License\n\n// getPusherForRequest retrieves the pusher associated with the explicit request\nfunc (p *pushers) getPusherForRequest(rw http.ResponseWriter, req *http.Request) (w *waitPusher) {\n\tinternalPusher, ok := rw.(http.Pusher)\n\tif !ok {\n\t\t// Not an HTTP/2 connection\n\t\treturn nil\n\t}\n\n\t// Need https://github.com/golang/go/issues/20566 to get rid of this hack\n\texplicitRequestID := req.Header.Get(internalRequestHeader)\n\tif explicitRequestID == \"\" {\n\t\t// This is the explicit request, let's create a wait pusher\n\t\tw = newWaitPusher(internalPusher, uuid.Must(uuid.NewV4()).String(), p.maxPushes)\n\t\tp.add(w)\n\n\t\treturn w\n\t}\n\n\tif w = p.get(explicitRequestID); w != nil {\n\t\treturn w\n\t}\n\n\t// Should not happen, is an attacker forging an evil request?\n\tp.logger.Debug(\"pusher not found\", zap.String(\"url\", req.RequestURI), zap.String(\"explicitRequestID\", explicitRequestID))\n\treq.Header.Del(internalRequestHeader)\n\n\treturn nil\n}\n\n// finish waits for all PUSH_PROMISEs to be sent before returning for the explicit request.\nfunc (p *pushers) finish(req *http.Request, wait bool) {\n\tpusher := req.Context().Value(ctxKey{}).(*waitPusher)\n\tif pusher == nil {\n\t\treturn\n\t}\n\n\tif req.Header.Get(internalRequestHeader) != \"\" {\n\t\tpusher.Done()\n\t\treturn\n\t}\n\n\t// Wait for subrequests to finish, except if it's an error to release resources as soon as possible\n\tif wait {\n\t\tpusher.Wait()\n\t}\n\n\tp.remove(pusher.id)\n}\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 0.9912109375,
          "content": "#!/usr/bin/env bash\n\n# Creates the tags for the library and the Caddy module.\n\nset -o nounset\nset -o errexit\ntrap 'echo \"Aborting due to errexit on line $LINENO. Exit code: $?\" >&2' ERR\nset -o errtrace\nset -o pipefail\nset -o xtrace\n\nif ! type \"git\" > /dev/null; then\n    echo \"The \\\"git\\\" command must be installed.\"\n    exit 1\nfi\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: ./release.sh version\" >&2\n    exit 1\nfi\n\n# Adapted from https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nif [[ ! $1 =~ ^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\\+([0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*))?$ ]]; then\n    echo \"Invalid version number: $1\" >&2\n    exit 1\nfi\n\ngit checkout main\ngit pull\n\ncd caddy/\ngo get \"github.com/dunglas/vulcain@v$1\"\ncd -\n\ngit commit -S -a -m \"chore: prepare release $1\"\n\ngit tag -s -m \"Version $1\" \"v$1\"\ngit tag -s -m \"Version $1\" \"caddy/v$1\"\ngit push --follow-tags\n"
        },
        {
          "name": "schemas",
          "type": "tree",
          "content": null
        },
        {
          "name": "server.go",
          "type": "blob",
          "size": 4.810546875,
          "content": "package vulcain\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"os\"\n\t\"os/signal\"\n\n\t\"github.com/gorilla/handlers\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\n// NewServerFromEnv creates a server using the configuration set in env vars\n//\n// Deprecated: use the Caddy server module or the standalone library instead\nfunc NewServerFromEnv() (*server, error) {\n\toptions, err := NewOptionsFromEnv()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn NewServer(options), nil\n}\n\n// NewServer creates a Vulcain server\n//\n// Deprecated: use the Caddy server module or the standalone library instead\nfunc NewServer(options *ServerOptions) *server {\n\tvar (\n\t\tlogger *zap.Logger\n\t\terr    error\n\t)\n\tif options.Debug {\n\t\tlogger, err = zap.NewDevelopment()\n\t} else {\n\t\tlogger, err = zap.NewProduction()\n\t}\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\topt := []Option{WithOpenAPIFile(options.OpenAPIFile), WithMaxPushes(options.MaxPushes), WithLogger(logger)}\n\tif options.EarlyHints {\n\t\topt = append(opt, WithEarlyHints())\n\t}\n\n\treturn &server{\n\t\toptions: options,\n\t\tvulcain: New(opt...),\n\t}\n}\n\ntype server struct {\n\toptions *ServerOptions\n\tserver  *http.Server\n\tvulcain *Vulcain\n}\n\n// ServeHTTP starts a reverse proxy and apply Vulcain queries on its response\n//\n// Deprecated: use the Caddy server module or the standalone library instead\nfunc (s *server) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tr := req.WithContext(s.vulcain.CreateRequestContext(rw, req))\n\tvar wait bool\n\tdefer func() { s.vulcain.Finish(r, wait) }()\n\n\trp := httputil.NewSingleHostReverseProxy(s.options.Upstream)\n\trp.ModifyResponse = func(resp *http.Response) error {\n\t\tif !s.vulcain.IsValidRequest(r) || !s.vulcain.IsValidResponse(r, resp.StatusCode, resp.Header) {\n\t\t\treturn nil\n\t\t}\n\n\t\tnewBody, err := s.vulcain.Apply(r, rw, resp.Body, resp.Header)\n\t\tif newBody == nil {\n\t\t\treturn err\n\t\t}\n\n\t\tnewBodyBuffer := bytes.NewBuffer(newBody)\n\t\tresp.Body = io.NopCloser(newBodyBuffer)\n\n\t\twait = true\n\n\t\treturn nil\n\t}\n\trp.ErrorHandler = func(rw http.ResponseWriter, req *http.Request, err error) {\n\t\twait = false\n\t\t// Adapted from the default ErrorHandler\n\t\ts.vulcain.logger.Error(\"http: proxy error\", zap.Error(err))\n\t\trw.WriteHeader(http.StatusBadGateway)\n\t}\n\n\t// Set forwarded headers\n\tproto := \"https\"\n\tif req.TLS == nil {\n\t\tproto = \"http\"\n\t}\n\n\treq.Header.Set(\"X-Forwarded-Proto\", proto)\n\treq.Header.Set(\"X-Forwarded-Host\", req.Host)\n\treq.Header.Del(\"X-Forwarded-For\")\n\trp.ServeHTTP(rw, req)\n}\n\n// Serve starts the HTTP server\n//\n// Deprecated: use the Caddy server module or the standalone library instead\nfunc (s *server) Serve() {\n\ts.server = &http.Server{\n\t\tAddr:         s.options.Addr,\n\t\tHandler:      s.chainHandlers(),\n\t\tReadTimeout:  s.options.ReadTimeout,\n\t\tWriteTimeout: s.options.WriteTimeout,\n\t}\n\n\tidleConnsClosed := make(chan struct{})\n\tgo func() {\n\t\tsigint := make(chan os.Signal, 1)\n\t\tsignal.Notify(sigint, os.Interrupt)\n\t\t<-sigint\n\n\t\tif err := s.server.Shutdown(context.Background()); err != nil {\n\t\t\ts.vulcain.logger.Error(err.Error())\n\t\t}\n\t\ts.vulcain.logger.Info(\"my baby shot me down\")\n\t\tclose(idleConnsClosed)\n\t}()\n\n\tacme := len(s.options.AcmeHosts) > 0\n\tvar err error\n\n\tif !acme && s.options.CertFile == \"\" && s.options.KeyFile == \"\" {\n\t\ts.vulcain.logger.Info(\"vulcain started\", zap.String(\"protocol\", \"http\"), zap.String(\"addr\", s.options.Addr))\n\t\terr = s.server.ListenAndServe()\n\t} else {\n\t\t// TLS\n\t\tif acme {\n\t\t\tcertManager := &autocert.Manager{\n\t\t\t\tPrompt:     autocert.AcceptTOS,\n\t\t\t\tHostPolicy: autocert.HostWhitelist(s.options.AcmeHosts...),\n\t\t\t}\n\t\t\tif s.options.AcmeCertDir != \"\" {\n\t\t\t\tcertManager.Cache = autocert.DirCache(s.options.AcmeCertDir)\n\t\t\t}\n\t\t\ts.server.TLSConfig = certManager.TLSConfig()\n\n\t\t\t// Mandatory for Let's Encrypt http-01 challenge\n\t\t\tgo func() {\n\t\t\t\tif err := http.ListenAndServe(\":http\", certManager.HTTPHandler(nil)); err != nil {\n\t\t\t\t\ts.vulcain.logger.Fatal(err.Error())\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\n\t\ts.vulcain.logger.Info(\"vulcain started\", zap.String(\"protocol\", \"https\"), zap.String(\"addr\", s.options.Addr))\n\t\terr = s.server.ListenAndServeTLS(s.options.CertFile, s.options.KeyFile)\n\t}\n\n\tif err != http.ErrServerClosed {\n\t\ts.vulcain.logger.Fatal(err.Error())\n\t}\n\n\t<-idleConnsClosed\n}\n\n// chainHandlers configures and chains handlers\nfunc (s *server) chainHandlers() http.Handler {\n\tvar compressHandler http.Handler\n\tif s.options.Compress {\n\t\tcompressHandler = handlers.CompressHandler(s)\n\t} else {\n\t\tcompressHandler = s\n\t}\n\n\tloggingHandler := handlers.CombinedLoggingHandler(os.Stderr, compressHandler)\n\trecoveryHandler := handlers.RecoveryHandler(\n\t\thandlers.RecoveryLogger(zapRecoveryHandlerLogger{s.vulcain.logger}),\n\t\thandlers.PrintRecoveryStack(s.options.Debug),\n\t)(loggingHandler)\n\n\treturn recoveryHandler\n}\n\ntype zapRecoveryHandlerLogger struct {\n\tlogger *zap.Logger\n}\n\nfunc (z zapRecoveryHandlerLogger) Println(args ...interface{}) {\n\tz.logger.Error(fmt.Sprint(args...))\n}\n"
        },
        {
          "name": "server_options.go",
          "type": "blob",
          "size": 2.4755859375,
          "content": "package vulcain\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\n// ServerOptions stores the server's options\n//\n// Deprecated: use the Caddy server module or the standalone library instead\ntype ServerOptions struct {\n\tDebug        bool\n\tAddr         string\n\tUpstream     *url.URL\n\tEarlyHints   bool\n\tMaxPushes    int\n\tAcmeHosts    []string\n\tAcmeCertDir  string\n\tCertFile     string\n\tKeyFile      string\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tCompress     bool\n\tOpenAPIFile  string\n}\n\n// NewOptionsFromEnv creates a new option instance from environment\n// It returns an error if mandatory env env vars are missing\n//\n// Deprecated: use the Caddy server module or the standalone library instead\nfunc NewOptionsFromEnv() (*ServerOptions, error) {\n\tvar err error\n\n\treadTimeout, err := parseDurationFromEnvVar(\"READ_TIMEOUT\", time.Duration(0))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\twriteTimeout, err := parseDurationFromEnvVar(\"WRITE_TIMEOUT\", time.Duration(0))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tupstream, err := url.Parse(os.Getenv(\"UPSTREAM\"))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar maxPushes int\n\tmaxPushesStr := os.Getenv(\"MAX_PUSHES\")\n\tif maxPushesStr == \"\" {\n\t\tmaxPushes = -1\n\t} else {\n\t\tmaxPushes, err = strconv.Atoi(maxPushesStr)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(`MAX_PUSHES: invalid value \"%s\" (%s)`, maxPushesStr, err)\n\t\t}\n\t}\n\n\tearlyHints := os.Getenv(\"EARLY_HINTS\")\n\n\to := &ServerOptions{\n\t\tos.Getenv(\"DEBUG\") == \"1\",\n\t\tos.Getenv(\"ADDR\"),\n\t\tupstream,\n\t\tearlyHints != \"\" && earlyHints != \"0\",\n\t\tmaxPushes,\n\t\tsplitVar(os.Getenv(\"ACME_HOSTS\")),\n\t\tos.Getenv(\"ACME_CERT_DIR\"),\n\t\tos.Getenv(\"CERT_FILE\"),\n\t\tos.Getenv(\"KEY_FILE\"),\n\t\treadTimeout,\n\t\twriteTimeout,\n\t\tos.Getenv(\"COMPRESS\") != \"0\",\n\t\tos.Getenv(\"OPENAPI_FILE\"),\n\t}\n\n\tmissingEnv := make([]string, 0, 2)\n\tif len(o.CertFile) != 0 && len(o.KeyFile) == 0 {\n\t\tmissingEnv = append(missingEnv, \"KEY_FILE\")\n\t}\n\tif len(o.KeyFile) != 0 && len(o.CertFile) == 0 {\n\t\tmissingEnv = append(missingEnv, \"CERT_FILE\")\n\t}\n\n\tif len(missingEnv) > 0 {\n\t\treturn nil, fmt.Errorf(\"The following environment variable must be defined: %s\", missingEnv)\n\t}\n\treturn o, nil\n}\n\nfunc splitVar(v string) []string {\n\tif v == \"\" {\n\t\treturn []string{}\n\t}\n\n\treturn strings.Split(v, \",\")\n}\n\nfunc parseDurationFromEnvVar(k string, d time.Duration) (time.Duration, error) {\n\tv := os.Getenv(k)\n\tif v == \"\" {\n\t\treturn d, nil\n\t}\n\n\tdur, err := time.ParseDuration(v)\n\tif err == nil {\n\t\treturn dur, nil\n\t}\n\n\treturn time.Duration(0), fmt.Errorf(\"%s: %s\", k, err)\n}\n"
        },
        {
          "name": "server_options_test.go",
          "type": "blob",
          "size": 2.224609375,
          "content": "package vulcain\n\nimport (\n\t\"net/url\"\n\t\"os\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestNewOptionsFromEnv(t *testing.T) {\n\ttestEnv := map[string]string{\n\t\t\"UPSTREAM\":      \"http://example.com\",\n\t\t\"EARLY_HINTS\":   \"1\",\n\t\t\"MAX_PUSHES\":    \"-1\",\n\t\t\"ACME_CERT_DIR\": \"/tmp\",\n\t\t\"ACME_HOSTS\":    \"example.com,example.org\",\n\t\t\"ADDR\":          \"127.0.0.1:8080\",\n\t\t\"CERT_FILE\":     \"foo\",\n\t\t\"COMPRESS\":      \"0\",\n\t\t\"DEBUG\":         \"1\",\n\t\t\"KEY_FILE\":      \"bar\",\n\t\t\"READ_TIMEOUT\":  \"1m\",\n\t\t\"WRITE_TIMEOUT\": \"40s\",\n\t\t\"OPENAPI_FILE\":  \"openapi.yaml\",\n\t}\n\tfor k, v := range testEnv {\n\t\tos.Setenv(k, v)\n\t\tdefer os.Unsetenv(k)\n\t}\n\n\tu, _ := url.Parse(\"http://example.com\")\n\topts, err := NewOptionsFromEnv()\n\tassert.Equal(t, &ServerOptions{\n\t\ttrue,\n\t\t\"127.0.0.1:8080\",\n\t\tu,\n\t\ttrue,\n\t\t-1,\n\t\t[]string{\"example.com\", \"example.org\"},\n\t\t\"/tmp\",\n\t\t\"foo\",\n\t\t\"bar\",\n\t\ttime.Minute,\n\t\t40 * time.Second,\n\t\tfalse,\n\t\t\"openapi.yaml\",\n\t}, opts)\n\tassert.Nil(t, err)\n}\n\nfunc TestMissingKeyFile(t *testing.T) {\n\tos.Setenv(\"CERT_FILE\", \"foo\")\n\tdefer os.Unsetenv(\"CERT_FILE\")\n\n\t_, err := NewOptionsFromEnv()\n\tassert.EqualError(t, err, \"The following environment variable must be defined: [KEY_FILE]\")\n}\n\nfunc TestMissingCertFile(t *testing.T) {\n\tos.Setenv(\"KEY_FILE\", \"foo\")\n\tdefer os.Unsetenv(\"KEY_FILE\")\n\n\t_, err := NewOptionsFromEnv()\n\tassert.EqualError(t, err, \"The following environment variable must be defined: [CERT_FILE]\")\n}\n\nfunc TestInvalidDuration(t *testing.T) {\n\tvars := [2]string{\"READ_TIMEOUT\", \"WRITE_TIMEOUT\"}\n\tfor _, elem := range vars {\n\t\tos.Setenv(elem, \"1 MN (invalid)\")\n\t\tdefer os.Unsetenv(elem)\n\t\t_, err := NewOptionsFromEnv()\n\t\tassert.EqualError(t, err, elem+`: time: unknown unit \" MN (invalid)\" in duration \"1 MN (invalid)\"`)\n\n\t\tos.Unsetenv(elem)\n\t}\n}\n\nfunc TestInvalidUpstream(t *testing.T) {\n\tos.Setenv(\"UPSTREAM\", \" http://foo.com\")\n\tdefer os.Unsetenv(\"UPSTREAM\")\n\t_, err := NewOptionsFromEnv()\n\tassert.EqualError(t, err, `parse \" http://foo.com\": first path segment in URL cannot contain colon`)\n}\n\nfunc TestInvalidMaxPushes(t *testing.T) {\n\tos.Setenv(\"MAX_PUSHES\", \"invalid\")\n\tdefer os.Unsetenv(\"MAX_PUSHES\")\n\t_, err := NewOptionsFromEnv()\n\tassert.EqualError(t, err, `MAX_PUSHES: invalid value \"invalid\" (strconv.Atoi: parsing \"invalid\": invalid syntax)`)\n}\n"
        },
        {
          "name": "server_test.go",
          "type": "blob",
          "size": 9.3955078125,
          "content": "package vulcain\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/http/httptrace\"\n\t\"net/textproto\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/exec\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/dunglas/vulcain/fixtures/api\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"golang.org/x/net/http2\"\n)\n\nconst testAddr = \"127.0.0.1:4343\"\nconst gatewayURL = \"https://\" + testAddr\n\nfunc createTestingUtils(openAPIfile string, maxPushes int) (*httptest.Server, *server, http.Client) {\n\tvar handler http.Handler\n\tif openAPIfile == \"\" {\n\t\thandler = &api.JSONLDHandler{}\n\t} else {\n\t\thandler = &api.OpenAPIHandler{}\n\t}\n\n\tupstream := httptest.NewServer(handler)\n\n\tupstreamURL, _ := url.Parse(upstream.URL)\n\ts := NewServer(&ServerOptions{\n\t\tDebug:       true,\n\t\tAddr:        testAddr,\n\t\tMaxPushes:   maxPushes,\n\t\tUpstream:    upstreamURL,\n\t\tCertFile:    \"./fixtures/tls/server.crt\",\n\t\tKeyFile:     \"./fixtures/tls/server.key\",\n\t\tOpenAPIFile: openAPIfile,\n\t})\n\tgo func() {\n\t\ts.Serve()\n\t}()\n\n\t// This is a self-signed certificate\n\ttransport := &http2.Transport{\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t}\n\tclient := http.Client{Transport: transport, Timeout: time.Duration(100 * time.Millisecond)}\n\n\treturn upstream, s, client\n}\n\nfunc TestNewServerFromEnv(t *testing.T) {\n\ts, err := NewServerFromEnv()\n\tassert.NotNil(t, s)\n\tassert.Nil(t, err)\n\n\tos.Setenv(\"KEY_FILE\", \"foo\")\n\tdefer os.Unsetenv(\"KEY_FILE\")\n\ts, err = NewServerFromEnv()\n\tassert.Nil(t, s)\n\tassert.Error(t, err)\n}\n\nfunc TestForwardedHeaders(t *testing.T) {\n\tupstream, s, client := createTestingUtils(\"\", -1)\n\tdefer upstream.Close()\n\n\t// loop until the server is ready\n\tvar resp *http.Response\n\tfor resp == nil {\n\t\tresp, _ = client.Get(gatewayURL + \"/forwarded\")\n\t}\n\n\tb, _ := io.ReadAll(resp.Body)\n\n\tassert.Equal(t, \"X-Forwarded-Host: 127.0.0.1:4343\\nX-Forwarded-Proto: https\\nX-Forwarded-For: 127.0.0.1\", string(b))\n\t_ = s.server.Shutdown(context.Background())\n}\n\nfunc TestH2NoPush(t *testing.T) {\n\tupstream, g, client := createTestingUtils(\"\", -1)\n\tdefer upstream.Close()\n\n\t// loop until the gateway is ready\n\tvar resp *http.Response\n\tfor resp == nil {\n\t\tresp, _ = client.Get(gatewayURL + `/books.jsonld?fields=\"/hydra:member/*\"&preload=\"/hydra:member/*/author\"`)\n\t}\n\n\tb, _ := io.ReadAll(resp.Body)\n\n\tassert.Equal(t, []string{\"</books/1.jsonld?preload=%22%2Fauthor%22>; rel=preload; as=fetch\", \"</books/2.jsonld?preload=%22%2Fauthor%22>; rel=preload; as=fetch\"}, resp.Header[\"Link\"])\n\tassert.Equal(t, `{\"hydra:member\":[\"/books/1.jsonld?preload=%22%2Fauthor%22\",\"/books/2.jsonld?preload=%22%2Fauthor%22\"]}`, string(b))\n\t_ = g.server.Shutdown(context.Background())\n}\n\nfunc TestMultipleValues(t *testing.T) {\n\tupstream, g, client := createTestingUtils(\"\", -1)\n\tdefer upstream.Close()\n\n\t// loop until the gateway is ready\n\tvar resp *http.Response\n\tfor resp == nil {\n\t\treq, _ := http.NewRequest(\"GET\", gatewayURL+\"/books/1.jsonld\", nil)\n\t\treq.Header.Add(\"Preload\", `\"/author\",\"/related\"`)\n\t\treq.Header.Add(\"Fields\", `\"/author\",\"/related\"`)\n\t\tresp, _ = client.Do(req)\n\t}\n\n\tb, _ := io.ReadAll(resp.Body)\n\n\tassert.Equal(t, []string{\"</authors/1.jsonld>; rel=preload; as=fetch\", \"</books/99.jsonld>; rel=preload; as=fetch\"}, resp.Header[\"Link\"])\n\tassert.Equal(t, `{\"author\":\"/authors/1.jsonld\",\"related\":\"/books/99.jsonld\"}`, string(b))\n\t_ = g.server.Shutdown(context.Background())\n}\n\n// Unfortunately, Go's HTTP client doesn't support Pushes yet (https://github.com/golang/go/issues/18594)\n// In the meantime, we use Symfony HttpClient\nfunc TestH2Push(t *testing.T) {\n\tupstream, g, _ := createTestingUtils(\"\", -1)\n\tdefer upstream.Close()\n\n\tfor _, test := range []string{\"fields-query\", \"fields-header\", \"preload-query\", \"preload-header\", \"fields-preload-query\", \"fields-preload-header\"} {\n\t\tt.Run(test, func(t *testing.T) {\n\t\t\tcmd := exec.Command(\"./test-push/\" + test + \".php\")\n\t\t\tcmd.Env = os.Environ()\n\t\t\tcmd.Env = append(cmd.Env, \"GATEWAY_URL=\"+gatewayURL)\n\t\t\tstdoutStderr, err := cmd.CombinedOutput()\n\t\t\tif !assert.NoError(t, err) {\n\t\t\t\tt.Log(string(stdoutStderr))\n\t\t\t}\n\t\t})\n\t}\n\n\t_ = g.server.Shutdown(context.Background())\n}\n\nfunc TestH2PushLimit(t *testing.T) {\n\tupstream, s, _ := createTestingUtils(\"\", 2)\n\tdefer upstream.Close()\n\n\tcmd := exec.Command(\"./test-push/push-limit.php\")\n\tcmd.Env = os.Environ()\n\tcmd.Env = append(cmd.Env, \"GATEWAY_URL=\"+gatewayURL)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\tif !assert.NoError(t, err) {\n\t\tt.Log(string(stdoutStderr))\n\t}\n\n\t_ = s.server.Shutdown(context.Background())\n}\n\nfunc TestH2PushOpenAPI(t *testing.T) {\n\tupstream, g, _ := createTestingUtils(openapiFixture, -1)\n\tdefer upstream.Close()\n\n\tcmd := exec.Command(\"./test-push/push-openapi.php\")\n\tcmd.Env = os.Environ()\n\tcmd.Env = append(cmd.Env, \"GATEWAY_URL=\"+gatewayURL)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\tif !assert.NoError(t, err) {\n\t\tt.Log(string(stdoutStderr))\n\t}\n\n\t_ = g.server.Shutdown(context.Background())\n}\n\nfunc createServers(maxPushes int, earlyHints bool) (*httptest.Server, *httptest.Server) {\n\tupstream := httptest.NewServer(&api.JSONLDHandler{})\n\n\tupstreamURL, _ := url.Parse(upstream.URL)\n\ts := NewServer(&ServerOptions{Upstream: upstreamURL, MaxPushes: maxPushes, EarlyHints: earlyHints})\n\tgateway := httptest.NewServer(s)\n\n\treturn upstream, gateway\n}\n\nfunc TestNotModified(t *testing.T) {\n\tupstream, gateway := createServers(-1, false)\n\tdefer upstream.Close()\n\tdefer gateway.Close()\n\n\tresp, _ := http.Get(gateway.URL + \"/books.jsonld\")\n\tb, _ := io.ReadAll(resp.Body)\n\n\tassert.Equal(t, api.BooksContent, string(b))\n}\n\nfunc TestFieldsQuery(t *testing.T) {\n\tupstream, gateway := createServers(-1, false)\n\tdefer upstream.Close()\n\tdefer gateway.Close()\n\n\tresp, _ := http.Get(gateway.URL + `/books.jsonld?fields=\"/@id\"`)\n\tb, _ := io.ReadAll(resp.Body)\n\n\tassert.Equal(t, `{\"@id\":\"/books.jsonld\"}`, string(b))\n}\n\nfunc TestFieldsHeader(t *testing.T) {\n\tupstream, gateway := createServers(-1, false)\n\tdefer upstream.Close()\n\tdefer gateway.Close()\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"GET\", gateway.URL+\"/books.jsonld\", nil)\n\treq.Header.Add(\"Fields\", `\"/@id\"`)\n\n\tresp, _ := client.Do(req)\n\tb, _ := io.ReadAll(resp.Body)\n\n\tassert.Equal(t, \"Fields\", resp.Header.Get(\"Vary\"))\n\tassert.Equal(t, `{\"@id\":\"/books.jsonld\"}`, string(b))\n}\n\nfunc TestPreloadQuery(t *testing.T) {\n\tupstream, gateway := createServers(-1, false)\n\tdefer upstream.Close()\n\tdefer gateway.Close()\n\n\tresp, _ := http.Get(gateway.URL + `/books.jsonld?fields=\"/hydra:member/*\"&preload=\"/hydra:member/*/author\"`)\n\tb, _ := io.ReadAll(resp.Body)\n\n\tassert.Equal(t, []string{\"</books/1.jsonld?preload=%22%2Fauthor%22>; rel=preload; as=fetch\", \"</books/2.jsonld?preload=%22%2Fauthor%22>; rel=preload; as=fetch\"}, resp.Header[\"Link\"])\n\tassert.Equal(t, `{\"hydra:member\":[\"/books/1.jsonld?preload=%22%2Fauthor%22\",\"/books/2.jsonld?preload=%22%2Fauthor%22\"]}`, string(b))\n}\n\nfunc TestPreloadHeader(t *testing.T) {\n\tupstream, gateway := createServers(-1, false)\n\tdefer upstream.Close()\n\tdefer gateway.Close()\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"GET\", gateway.URL+\"/books.jsonld\", nil)\n\treq.Header.Add(\"Fields\", `\"/hydra:member\"`)\n\treq.Header.Add(\"Preload\", `\"/hydra:member/*\"`)\n\n\tresp, _ := client.Do(req)\n\tb, _ := io.ReadAll(resp.Body)\n\n\tassert.ElementsMatch(t, []string{\"</books/1.jsonld>; rel=preload; as=fetch\", \"</books/2.jsonld>; rel=preload; as=fetch\"}, resp.Header[\"Link\"])\n\tassert.ElementsMatch(t, []string{\"Preload\", \"Fields\"}, resp.Header[\"Vary\"])\n\tassert.Equal(t, `{\"hydra:member\":[\n\t\t\"/books/1.jsonld\",\n\t\t\"/books/2.jsonld\"\n\t]}`, string(b))\n}\n\nfunc TestPreloadHeaderNoPush(t *testing.T) {\n\tupstream, gateway := createServers(0, false)\n\tdefer upstream.Close()\n\tdefer gateway.Close()\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"GET\", gateway.URL+\"/books.jsonld\", nil)\n\treq.Header.Add(\"Preload\", `\"/hydra:member/*\"`)\n\n\tresp, _ := client.Do(req)\n\n\tassert.ElementsMatch(t, []string{\"</books/1.jsonld>; rel=preload; as=fetch; nopush\", \"</books/2.jsonld>; rel=preload; as=fetch; nopush\"}, resp.Header[\"Link\"])\n\tassert.ElementsMatch(t, []string{\"Preload\"}, resp.Header[\"Vary\"])\n}\n\nfunc TestEarlyHints(t *testing.T) {\n\tupstream, gateway := createServers(-1, true)\n\tdefer upstream.Close()\n\tdefer gateway.Close()\n\n\texpectedLinkHeaders := []string{\"</books/1.jsonld>; rel=preload; as=fetch\", \"</books/2.jsonld>; rel=preload; as=fetch\"}\n\n\t// early hint should be sent when a preload header is set\n\tvar earlyHintsCount int\n\ttrace := &httptrace.ClientTrace{\n\t\tGot1xxResponse: func(code int, header textproto.MIMEHeader) error {\n\t\t\tif code == http.StatusEarlyHints {\n\t\t\t\tassert.ElementsMatch(t, expectedLinkHeaders, header[\"Link\"])\n\t\t\t\tearlyHintsCount++\n\t\t\t}\n\n\t\t\treturn nil\n\t\t},\n\t}\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"GET\", gateway.URL+\"/books.jsonld\", nil)\n\treq = req.WithContext(httptrace.WithClientTrace(req.Context(), trace))\n\treq.Header.Add(\"Fields\", `\"/hydra:member\"`)\n\treq.Header.Add(\"Preload\", `\"/hydra:member/*\"`)\n\n\tresp, _ := client.Do(req)\n\tb, _ := io.ReadAll(resp.Body)\n\n\tassert.Equal(t, 1, earlyHintsCount)\n\tassert.ElementsMatch(t, expectedLinkHeaders, resp.Header[\"Link\"])\n\tassert.ElementsMatch(t, []string{\"Fields\", \"Preload\"}, resp.Header[\"Vary\"])\n\tassert.Equal(t, `{\"hydra:member\":[\n\t\t\"/books/1.jsonld\",\n\t\t\"/books/2.jsonld\"\n\t]}`, string(b))\n}\n\nfunc TestUpstreamError(t *testing.T) {\n\tupstreamURL, _ := url.Parse(\"https://test.invalid\")\n\tg := NewServer(&ServerOptions{Upstream: upstreamURL})\n\tgateway := httptest.NewServer(g)\n\tdefer gateway.Close()\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\"GET\", gateway.URL+\"/error\", nil)\n\n\tresp, _ := client.Do(req)\n\n\tassert.Equal(t, http.StatusBadGateway, resp.StatusCode)\n}\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-push",
          "type": "tree",
          "content": null
        },
        {
          "name": "traverse.go",
          "type": "blob",
          "size": 3.31640625,
          "content": "package vulcain\n\nimport (\n\t\"encoding/json\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/dunglas/httpsfv\"\n\t\"github.com/tidwall/gjson\"\n\t\"github.com/tidwall/sjson\"\n\t\"go.uber.org/zap\"\n)\n\n// unescape unescapes an extended JSON pointer\nfunc unescape(s string) string {\n\ts = strings.ReplaceAll(s, \"~2\", \"*\")\n\ts = strings.ReplaceAll(s, \"~1\", \"/\")\n\treturn strings.ReplaceAll(s, \"~0\", \"~\")\n}\n\n// espaceSJSONPath escapes a sjson path\nfunc espaceSJSONPath(s string) string {\n\t// https://github.com/tidwall/sjson/blob/master/sjson.go#L47\n\ts = strings.ReplaceAll(s, \"|\", \"\\\\|\")\n\ts = strings.ReplaceAll(s, \"#\", \"\\\\#\")\n\ts = strings.ReplaceAll(s, \"@\", \"\\\\@\")\n\ts = strings.ReplaceAll(s, \"*\", \"\\\\*\")\n\n\treturn strings.ReplaceAll(s, \"?\", \"\\\\?\")\n}\n\n// urlRewriter rewrites an URL to propagate the \"preload\" and \"fields\" selectors to relations\nfunc urlRewriter(u *url.URL, n *node) {\n\tp := n.httpList(preload, \"\")\n\tf := n.httpList(fields, \"\")\n\n\tq := u.Query()\n\n\tif len(p) > 0 {\n\t\tif v, err := httpsfv.Marshal(p); err == nil {\n\t\t\tq.Add(\"preload\", v)\n\t\t}\n\t}\n\n\tif len(f) > 0 {\n\t\tif v, err := httpsfv.Marshal(f); err == nil {\n\t\t\tq.Add(\"fields\", v)\n\t\t}\n\t}\n\n\tu.RawQuery = q.Encode()\n}\n\n// getBytes retrieves a slice of bytes\nfunc getBytes(r gjson.Result, body []byte) []byte {\n\tif r.Index > 0 {\n\t\treturn body[r.Index : r.Index+len(r.Raw)]\n\t}\n\n\treturn []byte(r.Raw)\n}\n\n// traverseJSON traverses and modify if needed the JSON document\n// it pushes the relations specified by a \"preload\" directive\nfunc (v *Vulcain) traverseJSON(currentBody []byte, tree *node, filter bool, relationHandler func(n *node, v string) string) []byte {\n\tvar (\n\t\tnewBody []byte\n\t\terr     error\n\t)\n\n\tresult := gjson.ParseBytes(currentBody)\n\tswitch result.Type {\n\t// Maybe a relation\n\tcase gjson.String:\n\t\treturn handleRelation(currentBody, result.String(), tree, relationHandler)\n\tcase gjson.Number:\n\t\treturn handleRelation(currentBody, strconv.FormatInt(result.Int(), 10), tree, relationHandler)\n\t}\n\n\tfilter = filter && tree.hasChildren(fields)\n\tif filter {\n\t\tif result.IsArray() {\n\t\t\tnewBody = []byte(\"[]\")\n\t\t} else {\n\t\t\tnewBody = []byte(\"{}\")\n\t\t}\n\t} else {\n\t\tnewBody = currentBody\n\t}\n\n\tfor _, n := range tree.children {\n\t\tif filter {\n\t\t\tif !n.fields {\n\t\t\t\t// Don't push for nothing\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tif n.path == \"*\" {\n\t\t\tvar i int\n\t\t\tresult.ForEach(func(_, value gjson.Result) bool {\n\t\t\t\t// TODO: support iterating over objects\n\t\t\t\trawBytes := v.traverseJSON(getBytes(value, currentBody), n, filter, relationHandler)\n\t\t\t\tnewBody, err = sjson.SetRawBytes(newBody, strconv.Itoa(i), rawBytes)\n\t\t\t\tif err != nil {\n\t\t\t\t\tv.logger.Debug(\"cannot update array\", zap.Stringer(\"node\", n), zap.Int(\"index\", i), zap.Error(err))\n\t\t\t\t}\n\n\t\t\t\ti++\n\t\t\t\treturn true\n\t\t\t})\n\t\t\tcontinue\n\t\t}\n\n\t\tpath := espaceSJSONPath(unescape(n.path))\n\n\t\tresult := gjson.GetBytes(currentBody, path)\n\t\tif result.Exists() {\n\t\t\trawBytes := v.traverseJSON(getBytes(result, currentBody), n, filter, relationHandler)\n\n\t\t\tnewBody, err = sjson.SetRawBytes(newBody, path, rawBytes)\n\t\t\tif err != nil {\n\t\t\t\tv.logger.Debug(\"cannot update new document\", zap.Stringer(\"node\", n), zap.Error(err))\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newBody\n}\n\nfunc handleRelation(currentBody []byte, rel string, tree *node, relationHandler func(n *node, v string) string) []byte {\n\tif newValue := relationHandler(tree, rel); newValue != \"\" {\n\t\tnewBody, _ := json.Marshal(newValue)\n\t\treturn newBody\n\t}\n\n\treturn currentBody\n}\n"
        },
        {
          "name": "traverse_test.go",
          "type": "blob",
          "size": 2.7490234375,
          "content": "package vulcain\n\nimport (\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/dunglas/httpsfv\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestUnescape(t *testing.T) {\n\tassert.Equal(t, \"~1/0*/\", unescape(\"~01~10~2/\"))\n}\n\nfunc TestUrlRewriter(t *testing.T) {\n\tn := &node{}\n\tn.importPointers(preload, httpsfv.List{httpsfv.NewItem(\"/foo/*\"), httpsfv.NewItem(\"/bar/baz\")})\n\tn.importPointers(fields, httpsfv.List{httpsfv.NewItem(\"/foo/*\"), httpsfv.NewItem(\"/baz/bar\")})\n\n\tu, _ := url.Parse(\"/test\")\n\turlRewriter(u, n)\n\n\tassert.Equal(t, \"/test?fields=%22%2Ffoo%2F%2A%22%2C+%22%2Fbaz%2Fbar%22&preload=%22%2Ffoo%2F%2A%22%2C+%22%2Fbar%2Fbaz%22\", u.String())\n}\n\nfunc urlRewriteRelationHandler(n *node, v string) string {\n\tu, _ := url.Parse(v)\n\turlRewriter(u, n)\n\n\treturn u.String()\n}\n\nfunc TestTraverseJSONFields(t *testing.T) {\n\tn := &node{}\n\tn.importPointers(fields, httpsfv.List{httpsfv.NewItem(\"/notexist\"), httpsfv.NewItem(\"/bar\")})\n\n\tresult := New().traverseJSON([]byte(`{\"foo\": \"f\", \"bar\": \"b\"}`), n, true, urlRewriteRelationHandler)\n\tassert.Equal(t, `{\"bar\":\"b\"}`, string(result))\n}\n\nfunc TestTraverseJSONFieldsRewriteURL(t *testing.T) {\n\tn := &node{}\n\tn.importPointers(fields, httpsfv.List{httpsfv.NewItem(\"/foo/*/bar\")})\n\n\tresult := New().traverseJSON([]byte(`{\"foo\": [\"/a\", \"/b\"]}`), n, true, urlRewriteRelationHandler)\n\tassert.Equal(t, `{\"foo\":[\"/a?fields=%22%2Fbar%22\",\"/b?fields=%22%2Fbar%22\"]}`, string(result))\n}\n\nfunc TestTraverseJSONPreload(t *testing.T) {\n\tn := &node{}\n\tn.importPointers(preload, httpsfv.List{httpsfv.NewItem(\"/notexist\"), httpsfv.NewItem(\"/bar\")})\n\n\tresult := New().traverseJSON([]byte(`{\"foo\": \"/foo\", \"bar\": \"/bar\"}`), n, false, urlRewriteRelationHandler)\n\tassert.Equal(t, `{\"foo\": \"/foo\", \"bar\": \"/bar\"}`, string(result))\n}\n\nfunc TestTraverseJSONPreloadRewriteURL(t *testing.T) {\n\tn := &node{}\n\tn.importPointers(preload, httpsfv.List{httpsfv.NewItem(\"/foo/*/rel\"), httpsfv.NewItem(\"/bar/baz\")})\n\n\tresult := New().traverseJSON([]byte(`{\"foo\": [\"/a\", \"/b\"], \"bar\": \"/bar\"}`), n, false, urlRewriteRelationHandler)\n\tassert.Equal(t, `{\"foo\": [\"/a?preload=%22%2Frel%22\", \"/b?preload=%22%2Frel%22\"], \"bar\": \"/bar?preload=%22%2Fbaz%22\"}`, string(result))\n}\n\nfunc TestTraverseJSONPreloadAndFieldsRewriteURL(t *testing.T) {\n\tn := &node{}\n\tn.importPointers(preload, httpsfv.List{httpsfv.NewItem(\"/notexist\"), httpsfv.NewItem(\"/foo/*/rel\"), httpsfv.NewItem(\"/bar/baz\"), httpsfv.NewItem(\"/baz\")})\n\tn.importPointers(fields, httpsfv.List{httpsfv.NewItem(\"/foo/*\"), httpsfv.NewItem(\"/bar/baz\"), httpsfv.NewItem(\"/notexist\")})\n\n\tresult := New().traverseJSON([]byte(`{\"foo\": [\"/a\", \"/b\"], \"bar\": \"/bar\", \"baz\": \"/baz\"}`), n, true, urlRewriteRelationHandler)\n\tassert.Equal(t, `{\"foo\":[\"/a?preload=%22%2Frel%22\",\"/b?preload=%22%2Frel%22\"],\"bar\":\"/bar?fields=%22%2Fbaz%22\\u0026preload=%22%2Fbaz%22\"}`, string(result))\n}\n"
        },
        {
          "name": "vulcain.go",
          "type": "blob",
          "size": 10.6015625,
          "content": "// Package vulcain helps implementing the Vulcain protocol (https://vulcain.rocks) in Go projects.\n// It provides helper functions to parse HTTP requests containing \"preload\" and \"fields\" directives,\n// to extract and push the relations of a JSON document matched by the \"preload\" directive,\n// and to modify the JSON document according to both directives.\n//\n// This package can be used in any HTTP handler as well as with httputil.ReverseProxy.\npackage vulcain\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"regexp\"\n\t\"strconv\"\n\n\t\"github.com/dunglas/httpsfv\"\n\t\"github.com/getkin/kin-openapi/routers\"\n\n\t\"go.uber.org/zap\"\n)\n\nvar (\n\tjsonRe        = regexp.MustCompile(`(?i)\\bjson\\b`)\n\tpreferRe      = regexp.MustCompile(`\\s*selector=\"?json-pointer\"?`)\n\tnotransformRe = regexp.MustCompile(`\\bno-transform\\b`)\n)\n\n// Option instances allow to configure the library\ntype Option func(o *opt)\n\n// WithOpenAPIFile sets the path to an OpenAPI definition (in YAML or JSON) documenting the relations between resources\n// This option is only useful for non-hypermedia APIs\nfunc WithOpenAPIFile(openAPIFile string) Option {\n\treturn func(o *opt) {\n\t\to.openAPIFile = openAPIFile\n\t}\n}\n\n// WithEarlyHints instructs the gateway server to send Preload hints in 103 Early Hints response.\n// Enabling this setting is usually useless because the gateway server doesn't supports JSON streaming yet,\n// consequently the server will have to wait for the full JSON response to be received from upstream before being able\n// to compute the Link headers to send.\n// When the full response is available, we can send the final response directly.\n// Better send Early Hints responses as soon as possible, directly from the upstream application.\n// The proxy will forward them even if this option is not enabled.\nfunc WithEarlyHints() Option {\n\treturn func(o *opt) {\n\t\to.enableEarlyHints = true\n\t}\n}\n\n// WithMaxPushes sets the maximum number of resources to push\n// There is no limit by default\nfunc WithMaxPushes(maxPushes int) Option {\n\treturn func(o *opt) {\n\t\to.maxPushes = maxPushes\n\t}\n}\n\n// WithLogger sets the logger to use\nfunc WithLogger(logger *zap.Logger) Option {\n\treturn func(o *opt) {\n\t\to.logger = logger\n\t}\n}\n\ntype opt struct {\n\topenAPIFile      string\n\tenableEarlyHints bool\n\tmaxPushes        int\n\tlogger           *zap.Logger\n}\n\n// Vulcain is the entrypoint of the library\n// Use New() to create an instance\ntype Vulcain struct {\n\tenableEarlyHints bool\n\tpushers          *pushers\n\topenAPI          *openAPI\n\tlogger           *zap.Logger\n}\n\n// New creates a Vulcain instance\nfunc New(options ...Option) *Vulcain {\n\topt := &opt{\n\t\tmaxPushes: -1,\n\t}\n\n\tfor _, o := range options {\n\t\to(opt)\n\t}\n\n\tif opt.logger == nil {\n\t\topt.logger = zap.NewNop()\n\t}\n\n\tvar o *openAPI\n\tif opt.openAPIFile != \"\" {\n\t\to = newOpenAPI(opt.openAPIFile, opt.logger)\n\t}\n\n\treturn &Vulcain{\n\t\topt.enableEarlyHints,\n\t\t&pushers{maxPushes: opt.maxPushes, pusherMap: make(map[string]*waitPusher), logger: opt.logger},\n\t\to,\n\t\topt.logger,\n\t}\n}\n\n// extractFromRequest extracts the \"fields\" and \"preload\" directives from the appropriate HTTP headers and query parameters\nfunc extractFromRequest(req *http.Request) (fields, preload httpsfv.List, fieldsHeader, fieldsQuery, preloadHeader, preloadQuery bool) {\n\tquery := req.URL.Query()\n\tvar err error\n\tif len(req.Header[\"Fields\"]) > 0 {\n\t\tif fields, err = httpsfv.UnmarshalList(req.Header[\"Fields\"]); err == nil {\n\t\t\tfieldsHeader = true\n\t\t}\n\t}\n\n\tif !fieldsHeader && len(query[\"fields\"]) > 0 {\n\t\tif fields, err = httpsfv.UnmarshalList(query[\"fields\"]); err == nil {\n\t\t\tfieldsQuery = true\n\t\t}\n\t}\n\n\tif len(req.Header[\"Preload\"]) > 0 {\n\t\tif preload, err = httpsfv.UnmarshalList(req.Header[\"Preload\"]); err == nil {\n\t\t\tpreloadHeader = true\n\t\t}\n\t}\n\n\tif !preloadHeader && len(query[\"preload\"]) > 0 {\n\t\tif preload, err = httpsfv.UnmarshalList(query[\"preload\"]); err == nil {\n\t\t\tpreloadQuery = true\n\t\t}\n\t}\n\n\treturn fields, preload, fieldsHeader, fieldsQuery, preloadHeader, preloadQuery\n}\n\n// getOpenAPIRoute gets the routers.Route instance corresponding to the given URL\nfunc (v *Vulcain) getOpenAPIRoute(url *url.URL, route *routers.Route, routeTested bool) *routers.Route {\n\tif routeTested || v.openAPI == nil {\n\t\treturn route\n\t}\n\n\treturn v.openAPI.getRoute(url)\n}\n\n// CreateRequestContext assign the waitPusher used by other functions to the request context.\n// CreateRequestContext must always be called first.\nfunc (v *Vulcain) CreateRequestContext(rw http.ResponseWriter, req *http.Request) context.Context {\n\treturn context.WithValue(req.Context(), ctxKey{}, v.pushers.getPusherForRequest(rw, req))\n}\n\n// IsValidRequest tells if this request contains at least one Vulcain directive.\n// IsValidRequest must always be called before Apply.\nfunc (v *Vulcain) IsValidRequest(req *http.Request) bool {\n\tquery := req.URL.Query()\n\n\t// No Vulcain hints: don't modify the response\n\treturn req.Header.Get(\"Preload\") != \"\" ||\n\t\treq.Header.Get(\"Fields\") != \"\" ||\n\t\tquery.Get(\"preload\") != \"\" ||\n\t\tquery.Get(\"fields\") != \"\"\n}\n\n// IsValidResponse checks if Apply will be able to deal with this response.\nfunc (v *Vulcain) IsValidResponse(req *http.Request, responseStatus int, responseHeaders http.Header) bool {\n\t// Not a success, marked as no-transform or not JSON: don't modify the response\n\tif responseStatus < 200 ||\n\t\tresponseStatus > 300 ||\n\t\t!jsonRe.MatchString(responseHeaders.Get(\"Content-Type\")) ||\n\t\tnotransformRe.MatchString(responseHeaders.Get(\"Cache-Control\")) {\n\n\t\treturn false\n\t}\n\n\tprefers, ok := req.Header[\"Prefer\"]\n\tif !ok {\n\t\treturn true\n\t}\n\n\tfor _, p := range prefers {\n\t\tif preferRe.MatchString(p) {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// Apply pushes the requested relations, modifies the response headers and returns a modified response to send to the client.\n// It's the responsibility of the caller to use the updated response body.\n// Apply must not be called if IsValidRequest or IsValidResponse return false.\nfunc (v *Vulcain) Apply(req *http.Request, rw http.ResponseWriter, responseBody io.Reader, responseHeaders http.Header) ([]byte, error) {\n\tf, p, fieldsHeader, fieldsQuery, preloadHeader, preloadQuery := extractFromRequest(req)\n\n\tcurrentBody, err := io.ReadAll(responseBody)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttree := &node{}\n\ttree.importPointers(preload, p)\n\ttree.importPointers(fields, f)\n\n\tvar (\n\t\toaRoute                        *routers.Route\n\t\toaRouteTested, usePreloadLinks bool\n\t)\n\tnewBody := v.traverseJSON(currentBody, tree, len(f) > 0, func(n *node, val string) string {\n\t\tvar (\n\t\t\tu        *url.URL\n\t\t\tuseOA    bool\n\t\t\tnewValue string\n\t\t)\n\n\t\toaRoute, oaRouteTested = v.getOpenAPIRoute(req.URL, oaRoute, oaRouteTested), true\n\t\tif u, useOA, err = v.parseRelation(n.String(), val, oaRoute); err != nil {\n\t\t\treturn \"\"\n\t\t}\n\n\t\t// Never rewrite values when using OpenAPI, use headers instead of query parameters\n\t\tif (preloadQuery || fieldsQuery) && !useOA {\n\t\t\turlRewriter(u, n)\n\t\t\tnewValue = u.String()\n\t\t}\n\n\t\tif n.preload {\n\t\t\tusePreloadLinks = !v.push(u, rw, req, responseHeaders, n, preloadHeader, fieldsHeader)\n\t\t}\n\n\t\treturn newValue\n\t})\n\n\tif usePreloadLinks {\n\t\tif v.enableEarlyHints {\n\t\t\th := rw.Header()\n\n\t\t\t// If responseHeaders is not the same as rw.Header() (e.g. when using the built-in reverse proxy)\n\t\t\t// temporarly copy Link headers to send the 103 response\n\t\t\t_, ok := h[\"Link\"]\n\t\t\tif !ok {\n\t\t\t\th[\"Link\"] = responseHeaders[\"Link\"]\n\t\t\t}\n\t\t\trw.WriteHeader(http.StatusEarlyHints)\n\t\t\tif !ok {\n\t\t\t\tdelete(h, \"Link\")\n\t\t\t}\n\t\t}\n\n\t\tresponseHeaders.Add(\"Vary\", \"Preload\")\n\t}\n\n\tresponseHeaders.Set(\"Content-Length\", strconv.Itoa(len(newBody)))\n\tif fieldsHeader {\n\t\tresponseHeaders.Add(\"Vary\", \"Fields\")\n\t}\n\n\treturn newBody, nil\n}\n\n// Finish cleanups the waitPusher and, if it's the explicit response, waits for all PUSH_PROMISEs to be sent before returning.\n// Finish must always be called, even if IsValidRequest or IsValidResponse returns false.\n// If the current response is the explicit one and wait is false, then the body is sent instantly, even if all PUSH_PROMISEs haven't been sent yet.\nfunc (v *Vulcain) Finish(req *http.Request, wait bool) {\n\tv.pushers.finish(req, wait)\n}\n\n// addPreloadHeader sets preload Link rel=preload headers as fallback when Server Push isn't available (https://www.w3.org/TR/preload/).\nfunc (v *Vulcain) addPreloadHeader(h http.Header, link string, nopush bool) {\n\tvar suffix string\n\tif nopush {\n\t\tsuffix = \"; nopush\"\n\t}\n\n\th.Add(\"Link\", \"<\"+link+\">; rel=preload; as=fetch\"+suffix)\n\tv.logger.Debug(\"link preload header added\", zap.String(\"relation\", link))\n}\n\n// push pushes a relation or adds a Link rel=preload header as a fallback.\n// TODO: allow to set the nopush attribute using the configuration (https://www.w3.org/TR/preload/#server-push-http-2)\nfunc (v *Vulcain) push(u *url.URL, rw http.ResponseWriter, req *http.Request, newHeaders http.Header, n *node, preloadHeader, fieldsHeader bool) bool {\n\turl := u.String()\n\n\tif v.pushers.maxPushes == 0 || u.IsAbs() {\n\t\tv.addPreloadHeader(newHeaders, url, true)\n\n\t\treturn false\n\t}\n\n\tpusher := req.Context().Value(ctxKey{}).(*waitPusher)\n\tif pusher == nil {\n\t\tv.addPreloadHeader(newHeaders, url, false)\n\n\t\treturn false\n\t}\n\n\tpushOptions := &http.PushOptions{Header: req.Header.Clone()}\n\tpushOptions.Header.Set(internalRequestHeader, pusher.id)\n\tpushOptions.Header.Del(\"Preload\")\n\tpushOptions.Header.Del(\"Fields\")\n\tpushOptions.Header.Del(\"Te\") // Trailing headers aren't supported by Firefox for pushes, and we don't use them\n\n\tif preloadHeader {\n\t\tif preload := n.httpList(preload, \"\"); len(preload) > 0 {\n\t\t\tif v, err := httpsfv.Marshal(preload); err == nil {\n\t\t\t\tpushOptions.Header.Set(\"Preload\", v)\n\t\t\t}\n\t\t}\n\t}\n\tif fieldsHeader {\n\t\tif f := n.httpList(fields, \"\"); len(f) > 0 {\n\t\t\tif v, err := httpsfv.Marshal(f); err == nil {\n\t\t\t\tpushOptions.Header.Set(\"Fields\", v)\n\t\t\t}\n\t\t}\n\t}\n\n\t// HTTP/2, and relative relation, push!\n\tif err := pusher.Push(url, pushOptions); err != nil {\n\t\t// Don't add the preload header for something already pushed\n\t\tif errors.Is(err, errRelationAlreadyPushed) {\n\t\t\treturn true\n\t\t}\n\n\t\tv.addPreloadHeader(newHeaders, url, false)\n\t\tv.logger.Debug(\"failed to push\", zap.Stringer(\"node\", n), zap.String(\"relation\", url), zap.Error(err))\n\n\t\treturn false\n\t}\n\n\tv.logger.Debug(\"relation pushed\", zap.String(\"relation\", url))\n\treturn true\n}\n\n// parseRelation returns the URL of a relation, using OpenAPI to build it if necessary.\nfunc (v *Vulcain) parseRelation(selector, rel string, oaRoute *routers.Route) (*url.URL, bool, error) {\n\tvar useOA bool\n\tif oaRoute != nil {\n\t\tif oaRel := v.openAPI.getRelation(oaRoute, selector, rel); oaRel != \"\" {\n\t\t\trel = oaRel\n\t\t\tuseOA = true\n\t\t}\n\t}\n\n\tu, err := url.Parse(rel)\n\tif err == nil {\n\t\treturn u, useOA, nil\n\t}\n\n\tv.logger.Debug(\"the relation is an invalid URL\", zap.String(\"node\", selector), zap.String(\"relation\", rel), zap.Error(err))\n\n\treturn nil, useOA, err\n}\n"
        },
        {
          "name": "vulcain.svg",
          "type": "blob",
          "size": 5.0869140625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"Calque_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 600 123.2\" style=\"enable-background:new 0 0 600 123.2;\" xml:space=\"preserve\">\n<style type=\"text/css\">\n\t.st0{fill:#33344C;}\n\t.st1{fill-rule:evenodd;clip-rule:evenodd;fill:#33344C;}\n\t.st2{fill:url(#Circle_1_);}\n\t.st3{fill-rule:evenodd;clip-rule:evenodd;fill:url(#Flame_2_);}\n</style>\n<g>\n\t<g id=\"Text\">\n\t\t<path id=\"V\" class=\"st0\" d=\"M201,100.3c-2.3,0-4.7-1.1-7.4-3.3l-13.9-11.7c-2.2-1.7-3.9-3.4-4.9-5c-1.1-1.6-1.7-3.8-1.9-6.4V33.2\n\t\t\tc0-2.6,0.9-4.9,2.7-6.7c1.8-1.8,4-2.7,6.7-2.7s4.9,0.9,6.7,2.7c1.8,1.8,2.7,4,2.7,6.7v39.5c0,4.4,3.5,7.9,7.9,7.9h0\n\t\t\tc6,0,10.8-4.9,10.8-10.8V33.2c0-2.6,0.9-4.9,2.7-6.7c1.8-1.8,4.2-2.8,6.7-2.7c2.5,0,4.7,0.9,6.5,2.7c1.8,1.8,2.7,4,2.7,6.7v40.7\n\t\t\tc-0.2,2.6-0.9,4.8-1.9,6.4c-1.1,1.6-2.7,3.3-4.9,5l-13.7,11.4C205.7,99.1,203.2,100.3,201,100.3z\"/>\n\t\t<path id=\"U\" class=\"st0\" d=\"M235.9,27.1c1.8-1.9,4-2.8,6.7-2.8s5,0.9,6.7,2.8c1.8,1.9,2.7,4.2,2.7,7v38c0,4.8,3.9,8.6,8.6,8.6h0\n\t\t\tc4.8,0,8.6-3.9,8.6-8.6V33.7c0-2.5,0.9-4.7,2.8-6.6c1.9-1.9,4.1-2.8,6.6-2.8c2.6,0,5.2,1.1,7,3.1c1.7,1.8,2.5,3.9,2.5,6.4v56.7\n\t\t\tc0,2.6-0.9,4.9-2.8,6.7c-1.9,1.8-4.1,2.7-6.7,2.7c-2.6,0-4.8-0.9-6.6-2.7c-1.9-1.8-2.8-4-2.8-6.7v-3.2c0-0.4-0.1-0.5-0.2-0.5\n\t\t\tc-0.1,0-0.3,0.2-0.4,0.5c-1.3,4.1-3.4,7.2-6.3,9.3s-6.4,3.2-10.5,3.2c-3.5,0-6.7-0.7-9.5-2.2c-2.8-1.5-5-3.5-6.7-6.2\n\t\t\tc-1.6-2.6-2.5-5.7-2.5-9.2V33.9C233.3,31.2,234.2,29,235.9,27.1z\"/>\n\t\t<path id=\"L\" class=\"st0\" d=\"M300.7,97.2c-2.5-1.5-4.5-3.4-5.9-5.9c-1.5-2.5-2.2-5.2-2.2-8.1v-50c0-2.5,0.9-4.7,2.8-6.5\n\t\t\tc1.9-1.8,4.1-2.7,6.6-2.7c2.6,0,4.9,0.9,6.7,2.7c1.9,1.8,2.8,4,2.8,6.5v47.5c2.4,0,4.2,0,5.4-0.1c1.2,0,2.1-0.1,2.7-0.1\n\t\t\tc1.1-0.1,3.7-0.1,7.9-0.1c2.9,0,5.2,0.9,6.8,2.8c1.6,1.9,2.4,4.1,2.4,6.6c0,2.6-0.8,4.8-2.4,6.6c-1.6,1.9-3.9,2.8-6.8,2.8h-18.7\n\t\t\tC305.9,99.4,303.2,98.6,300.7,97.2z\"/>\n\t\t<path id=\"C\" class=\"st0\" d=\"M341.6,32.4c1.4-2.4,3.4-4.4,5.8-5.8c2.4-1.4,5.1-2.1,7.9-2.1h25.9c2.5,0,4.7,0.9,6.6,2.8\n\t\t\tc1.9,1.9,2.8,4.1,2.8,6.6c0,2.5-0.9,4.7-2.8,6.5c-1.9,1.9-4.1,2.8-6.6,2.8h-23v37.7H381c2.6,0,4.8,0.9,6.6,2.7\n\t\t\tc1.9,1.8,2.8,4,2.8,6.6c0,2.6-0.9,4.7-2.8,6.5c-1.9,1.8-4.1,2.7-6.6,2.7h-25.7c-2.9,0-5.5-0.7-7.9-2.1c-2.4-1.4-4.4-3.4-5.8-5.8\n\t\t\tc-1.4-2.4-2.1-5.1-2.1-7.9V40.3C339.5,37.4,340.2,34.8,341.6,32.4z\"/>\n\t\t<path id=\"I\" class=\"st0\" d=\"M455.1,34c0-2.9,0.9-5.1,2.8-6.7c1.9-1.6,4.1-2.5,6.6-2.5c2.5,0,4.7,0.8,6.5,2.4\n\t\t\tc1.9,1.6,2.8,3.8,2.8,6.7V91c0,2.9-0.9,5.1-2.8,6.7c-1.9,1.6-4,2.4-6.5,2.4c-2.6,0-4.8-0.8-6.6-2.4c-1.9-1.6-2.8-3.8-2.8-6.7V34z\"\n\t\t\t/>\n\t\t<path id=\"N\" class=\"st0\" d=\"M530.5,96.8c-1.8,1.9-4,2.8-6.6,2.8c-2.7,0-5-0.9-6.7-2.8c-1.8-1.9-2.7-4.1-2.7-6.7V51.7\n\t\t\tc0-4.8-3.9-8.6-8.6-8.6l0,0c-4.8,0-8.6,3.9-8.6,8.6v38.6c0,2.6-0.9,4.9-2.8,6.6c-1.8,1.7-4,2.6-6.5,2.7c-2.5,0-5-0.9-6.8-2.7\n\t\t\tc-1.8-1.8-2.7-4-2.7-6.6V33.6c0-2.6,0.9-4.9,2.8-6.7c1.9-1.8,4-2.7,6.5-2.7c2.6,0,4.9,0.9,6.7,2.7c1.9,1.8,2.8,4,2.8,6.7v3.1\n\t\t\tc0,0.4,0.1,0.5,0.2,0.5c0.1,0,0.2-0.1,0.2-0.2c1.3-4.1,3.4-7.3,6.4-9.4c3-2.1,6.5-3.2,10.6-3.2c5.3,0,9.8,1.6,13.3,4.8\n\t\t\tc3.5,3.2,5.2,7.4,5.2,12.8v48.1C533.2,92.7,532.3,94.9,530.5,96.8z\"/>\n\t\t<path id=\"A\" class=\"st1\" d=\"M421.9,23.7c2.2,0,4.6,1.1,7.3,3.3l14,11.4c2.2,1.9,3.8,3.6,4.9,5.2c1,1.6,1.6,3.7,1.8,6.2v40.6\n\t\t\tc0,2.6-0.9,4.7-2.7,6.5c-1.8,1.8-4,2.7-6.5,2.7c-2.6,0-4.9-0.9-6.7-2.7c-1.8-1.8-2.7-4-2.7-6.5V67.1l-18.6-0.7v24.1\n\t\t\tc0,2.6-0.9,4.7-2.7,6.5c-1.8,1.8-4,2.7-6.6,2.7c-2.6,0-4.8-0.9-6.6-2.7c-1.9-1.8-2.8-4-2.8-6.5V49.9c0.2-2.4,0.9-4.5,1.9-6.1\n\t\t\tc1.1-1.6,2.7-3.4,4.9-5.4L414.4,27C417.3,24.8,419.8,23.7,421.9,23.7z M432.2,49.4c0,5.6-4.7,10.3-10.3,10.3\n\t\t\tc-5.6,0-10.3-4.7-10.3-10.3c-0.1-2.8,2-5.7,2.2-8.7c0.8,1.5,0.9,2.6,1,4.1c2.6-3.2,5.3-7.5,4.7-11.4c0,0,4.9,1.6,6.9,9.1\n\t\t\tc1.2-1.1,1.1-3.2,0.5-4.5C428,38.9,432.3,44.1,432.2,49.4L432.2,49.4z\"/>\n\t</g>\n\t<g id=\"Flame\">\n\t\t<linearGradient id=\"Circle_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"54.0218\" y1=\"64.3828\" x2=\"158.541\" y2=\"64.3828\">\n\t\t\t<stop  offset=\"0\" style=\"stop-color:#FF9300\"/>\n\t\t\t<stop  offset=\"0.9996\" style=\"stop-color:#FF4000\"/>\n\t\t</linearGradient>\n\t\t<path id=\"Circle\" class=\"st2\" d=\"M111.8,12.3c1.6,1.5,3.2,3.2,4.8,5.2c21.4,4.7,37.5,23.9,37.5,46.7c0,26.4-21.5,47.8-47.8,47.8\n\t\t\tS58.4,90.6,58.4,64.2c0-22,14.9-40.6,35.2-46.1c0.3-1.6,0.6-3.2,0.6-4.7C71.2,18.8,54,39.5,54,64.2c0,28.8,23.4,52.3,52.3,52.3\n\t\t\ts52.3-23.4,52.3-52.3C158.5,37.3,138.1,15.1,111.8,12.3z\"/>\n\t\t<linearGradient id=\"Flame_2_\" gradientUnits=\"userSpaceOnUse\" x1=\"67.0156\" y1=\"57.4525\" x2=\"145.4785\" y2=\"57.4525\">\n\t\t\t<stop  offset=\"0\" style=\"stop-color:#FF9300\"/>\n\t\t\t<stop  offset=\"0.9996\" style=\"stop-color:#FF4000\"/>\n\t\t</linearGradient>\n\t\t<path id=\"Flame_1_\" class=\"st3\" d=\"M125.3,25.2c2.2,4.9,2.6,13.1-1.8,17.1C115.9,13.5,97.1,7.6,97.1,7.6\n\t\t\tc2.2,14.9-8.1,31.1-18,43.2c-0.3-5.9-0.7-10-3.8-15.7c-0.7,11.3-8.8,22.2-8.2,33c0,8.3,2.7,16,7.3,22.4l23.5-23.5l10.8,10.8\n\t\t\tl-23.3,23.3c6.1,3.9,13.3,6.2,20.9,6.2c21.4,0,39.2-17.8,39.2-39.2C146.2,48,129.5,28.2,125.3,25.2z M119.2,50.3\n\t\t\tc0.6-0.6,1.7-0.6,2.3,0l4,4c0.6,0.6,0.6,1.7,0,2.3l-1.5,1.5l-6.3-6.3L119.2,50.3z M122,86.5c-0.6,0.6-1.7,0.6-2.3,0L89.3,56.1\n\t\t\tc-0.6-0.6-0.6-1.7,0-2.3L102.1,41c0.6-0.6,1.7-0.6,2.3,0l30.4,30.4c0.6,0.6,0.6,1.7,0,2.3L122,86.5z\"/>\n\t</g>\n</g>\n</svg>\n"
        },
        {
          "name": "vulcain_test.go",
          "type": "blob",
          "size": 2.8212890625,
          "content": "package vulcain\n\nimport (\n\t\"net/http\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestNew(t *testing.T) {\n\tg := New()\n\tassert.NotNil(t, g)\n}\n\nfunc TestParseRelation(t *testing.T) {\n\tv := New(WithOpenAPIFile(openapiFixture))\n\n\tu, _ := url.Parse(\"/oa/books/123\")\n\n\tu, _, _ = v.parseRelation(\"/author\", \"123\", v.getOpenAPIRoute(u, nil, false))\n\tassert.Equal(t, \"/oa/authors/123\", u.String())\n\n\tu, _, _ = v.parseRelation(\"/invalid\", \" http://foo.com\", nil)\n\tassert.Nil(t, u)\n}\n\nfunc TestIsValidRequest(t *testing.T) {\n\tv := New()\n\n\tassert.False(t, v.IsValidRequest(&http.Request{URL: &url.URL{}}))\n\tassert.True(t, v.IsValidRequest(&http.Request{URL: &url.URL{RawQuery: `preload=\"/foo\"`}}))\n\tassert.True(t, v.IsValidRequest(&http.Request{URL: &url.URL{RawQuery: `fields=\"/foo\"`}}))\n\tassert.True(t, v.IsValidRequest(&http.Request{\n\t\tHeader: http.Header{\"Preload\": []string{`\"/foo\"`}},\n\t\tURL:    &url.URL{},\n\t}))\n\tassert.True(t, v.IsValidRequest(&http.Request{\n\t\tHeader: http.Header{\"Fields\": []string{`\"/foo\"`}},\n\t\tURL:    &url.URL{},\n\t}))\n}\n\nfunc TestIsValidResponse(t *testing.T) {\n\tv := New()\n\tassert.False(t, v.IsValidResponse(\n\t\t&http.Request{URL: &url.URL{}},\n\t\t200,\n\t\thttp.Header{\"Content-Type\": []string{\"text/xml\"}, \"Cache-Control\": []string{\"no-transform\"}},\n\t))\n\n\tassert.False(t, v.IsValidResponse(\n\t\t&http.Request{\n\t\t\tURL:    &url.URL{},\n\t\t\tHeader: http.Header{\"Preload\": []string{`\"/foo\"`}, \"Prefer\": []string{\"selector=css\"}},\n\t\t},\n\t\t200,\n\t\thttp.Header{\"Content-Type\": []string{\"application/json\"}},\n\t))\n\n\tassert.False(t, v.IsValidResponse(\n\t\t&http.Request{\n\t\t\tURL:    &url.URL{},\n\t\t\tHeader: http.Header{\"Preload\": []string{`\"/foo\"`}, \"Prefer\": []string{\"selector=css\"}},\n\t\t},\n\t\t500,\n\t\thttp.Header{\"Content-Type\": []string{\"application/json\"}},\n\t))\n\n\tassert.False(t, v.IsValidResponse(\n\t\t&http.Request{\n\t\t\tURL:    &url.URL{},\n\t\t\tHeader: http.Header{\"Preload\": []string{`\"/foo\"`}, \"Prefer\": []string{\"selector=json-pointer\"}},\n\t\t},\n\t\t200,\n\t\thttp.Header{\"Cache-Control\": []string{\"no-transform\"}},\n\t))\n\n\tassert.True(t, v.IsValidResponse(\n\t\t&http.Request{\n\t\t\tURL:    &url.URL{},\n\t\t\tHeader: http.Header{\"Preload\": []string{`\"/foo\"`}, \"Prefer\": []string{\"selector=json-pointer\"}},\n\t\t},\n\t\t200,\n\t\thttp.Header{\"Content-Type\": []string{\"application/json\"}},\n\t))\n\n\tassert.True(t, v.IsValidResponse(\n\t\t&http.Request{\n\t\t\tURL:    &url.URL{},\n\t\t\tHeader: http.Header{\"Preload\": []string{`\"/foo\"`}},\n\t\t},\n\t\t200,\n\t\thttp.Header{\"Content-Type\": []string{\"application/ld+json\"}},\n\t))\n\n\tassert.True(t, v.IsValidResponse(\n\t\t&http.Request{\n\t\t\tURL:    &url.URL{},\n\t\t\tHeader: http.Header{\"Preload\": []string{`\"/foo\"`}},\n\t\t},\n\t\t200,\n\t\thttp.Header{\"Content-Type\": []string{\"application/ld+json\"}},\n\t))\n\n\tassert.True(t, v.IsValidResponse(\n\t\t&http.Request{\n\t\t\tURL: &url.URL{RawQuery: `preload=\"/foo\"`},\n\t\t},\n\t\t200,\n\t\thttp.Header{\"Content-Type\": []string{\"application/ld+json\"}},\n\t))\n}\n"
        }
      ]
    }
  ]
}