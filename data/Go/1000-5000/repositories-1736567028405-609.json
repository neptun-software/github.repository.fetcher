{
  "metadata": {
    "timestamp": 1736567028405,
    "page": 609,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "g3n/engine",
      "stars": 2836,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.033203125,
          "content": "audio/windows/** linguist-vendored"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.265625,
          "content": "Copyright (c) 2016 The G3N Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.53125,
          "content": "\n<p align=\"center\"><img width=\"150\" src=\"https://github.com/g3n/g3nd/blob/master/data/images/g3n_logo.png\" alt=\"G3N Banner\"/></p>\n<p align=\"center\">\n  <a href=\"https://godoc.org/github.com/g3n/engine\"><img src=\"https://godoc.org/github.com/g3n/engine?status.svg\" alt=\"Godoc\"></img></a>\n  <a href=\"https://goreportcard.com/report/github.com/g3n/engine\"><img src=\"https://goreportcard.com/badge/github.com/g3n/engine\" alt=\"Go Report Card\"/></a>\n  <a href=\"https://discord.gg/NfaeVr8zDg\"><img src=\"https://img.shields.io/badge/Discord-G3N-blue\" alt=\"Discord\"/></a>\n  \n</p>\n<p><h1 align=\"center\">G3N - Go 3D Game Engine</h1></p>\n\n**G3N** (pronounced \"gen\") is an OpenGL 3D Game Engine written in Go.\nIt can be used to write cross-platform Go applications that show rich and dynamic 3D representations - not just games. A basic integrated GUI framework is provided, and 3D spatial audio is supported through [OpenAL](https://www.openal.org/).\n\n### **To see G3N in action try the [G3N demo](https://github.com/g3n/g3nd) or the [Gokoban](https://github.com/danaugrs/gokoban) award winning game.**\n\n<p align=\"center\">\n  <img style=\"float: right;\" src=\"https://raw.githubusercontent.com/g3n/g3nd/master/data/images/g3nd_screenshots.png\" alt=\"G3ND In Action\"/>\n</p>\n\n## Highlighted Projects Using G3N\n\n* [Gokoban - 3D Puzzle Game (_1st place in the 2017 Gopher Game Jam_)](https://github.com/danaugrs/gokoban)\n* [go-tsne (_dimensionality reduction particularly well suited for visualizing high-dimensional datasets_)](https://github.com/danaugrs/go-tsne)\n* [G3N Server-Side Rendering](https://github.com/moethu/webg3n)\n\n## Dependencies\n\n**Go 1.8+** is required. The engine also requires the system to have an **OpenGL driver** and a **GCC-compatible C compiler**.\n\nOn Unix-based systems the engine depends on some C libraries that can be installed using the appropriate distribution package manager. See below for OS specific requirements.\n\n### Ubuntu/Debian-like\n\n    $ sudo apt-get install xorg-dev libgl1-mesa-dev libopenal1 libopenal-dev libvorbis0a libvorbis-dev libvorbisfile3\n\n### Fedora\n\n    $ sudo dnf -y install xorg-x11-proto-devel mesa-libGL mesa-libGL-devel openal-soft openal-soft-devel libvorbis libvorbis-devel glfw-devel libXi-devel libXxf86vm-devel\n\n### CentOS 7\n\nEnable the EPEL repository:\n\n    $ sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n    \nThen install the same packages as for Fedora - remember to use `yum` instead of `dnf` for the package installation command.\n    \n### Arch\n\n    $ sudo pacman -S base-devel xorg-server mesa openal libvorbis\n    \n### Void\n\n    $ sudo xbps-install git xorg-server-devel base-devel libvorbis-devel libvorbis libXxf86vm-devel libXcursor-devel libXrandr-devel libXinerama-devel libopenal libopenal-devel libglvnd-devel\n    \n### Windows\n\nWe tested the Windows build using the [mingw-w64](https://mingw-w64.org) toolchain (you can download [this file](https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z) in particular).\n\nThe necessary [audio DLLs](audio/windows/bin) are supplied and need to be added to your PATH.\nIf you would like to build the DLLs yourself you can find the libraries' source code and build instructions [here](audio/windows).\n\n### macOS\n\nInstall the development files of OpenAL and Vorbis using [Homebrew](https://brew.sh/):\n\n    brew install libvorbis openal-soft\n\n## Installation\n\nThe following set of commands will download and install the engine along with all its Go dependencies:\n  \n```\ngit clone https://github.com/g3n/engine g3n-engine\ncd g3n-engine\ngo install ./...\n```\n\n## Features\n\n* Cross-platform: Windows, Linux, and macOS. (WebAssembly is 90% complete!)\n* Integrated GUI (graphical user interface) with many widgets\n* Hierarchical scene graph - nodes can contain other nodes\n* 3D spatial audio via OpenAL (.wav, .ogg)\n* Real-time lighting: ambient, directional, point, and spot lights\n* Physically-based rendering: fresnel reflectance, geometric occlusion, microfacet distribution\n* Model loaders: glTF (.gltf, .glb), Wavefront OBJ (.obj), and COLLADA (.dae)\n* Geometry generators: box, sphere, cylinder, torus, etc...\n* Geometries support morph targets and multimaterials\n* Support for animated sprites based on sprite sheets\n* Perspective and orthographic cameras\n* Text image generation and support for TrueType fonts\n* Image textures can be loaded from GIF, PNG or JPEG files\n* Animation framework for position, rotation, and scale of objects\n* Support for user-created GLSL shaders: vertex, fragment, and geometry shaders\n* Integrated basic physics engine (experimental/incomplete)\n* Support for HiDPI displays\n\n<p align=\"center\">\n  <img style=\"float: right;\" src=\"https://github.com/g3n/g3n.github.io/raw/master/img/g3n_banner_small.png\" alt=\"G3N Banner\"/>\n</p>\n\n## Hello G3N\n\nThe code below is a basic \"hello world\" application ([hellog3n](https://github.com/g3n/demos/tree/master/hellog3n)) that shows a blue torus and a button that when clicked makes the torus red:\n\n```Go\npackage main\n\nimport (\n\t\"github.com/g3n/engine/app\"\n\t\"github.com/g3n/engine/camera\"\n\t\"github.com/g3n/engine/core\"\n\t\"github.com/g3n/engine/geometry\"\n\t\"github.com/g3n/engine/gls\"\n\t\"github.com/g3n/engine/graphic\"\n\t\"github.com/g3n/engine/gui\"\n\t\"github.com/g3n/engine/light\"\n\t\"github.com/g3n/engine/material\"\n\t\"github.com/g3n/engine/math32\"\n\t\"github.com/g3n/engine/renderer\"\n\t\"github.com/g3n/engine/util/helper\"\n\t\"github.com/g3n/engine/window\"\n\t\"time\"\n)\n\nfunc main() {\n\n\t// Create application and scene\n\ta := app.App()\n\tscene := core.NewNode()\n\n\t// Set the scene to be managed by the gui manager\n\tgui.Manager().Set(scene)\n\n\t// Create perspective camera\n\tcam := camera.New(1)\n\tcam.SetPosition(0, 0, 3)\n\tscene.Add(cam)\n\n\t// Set up orbit control for the camera\n\tcamera.NewOrbitControl(cam)\n\n\t// Set up callback to update viewport and camera aspect ratio when the window is resized\n\tonResize := func(evname string, ev interface{}) {\n\t\t// Get framebuffer size and update viewport accordingly\n\t\twidth, height := a.GetSize()\n\t\ta.Gls().Viewport(0, 0, int32(width), int32(height))\n\t\t// Update the camera's aspect ratio\n\t\tcam.SetAspect(float32(width) / float32(height))\n\t}\n\ta.Subscribe(window.OnWindowSize, onResize)\n\tonResize(\"\", nil)\n\n\t// Create a blue torus and add it to the scene\n\tgeom := geometry.NewTorus(1, .4, 12, 32, math32.Pi*2)\n\tmat := material.NewStandard(math32.NewColor(\"DarkBlue\"))\n\tmesh := graphic.NewMesh(geom, mat)\n\tscene.Add(mesh)\n\n\t// Create and add a button to the scene\n\tbtn := gui.NewButton(\"Make Red\")\n\tbtn.SetPosition(100, 40)\n\tbtn.SetSize(40, 40)\n\tbtn.Subscribe(gui.OnClick, func(name string, ev interface{}) {\n\t\tmat.SetColor(math32.NewColor(\"DarkRed\"))\n\t})\n\tscene.Add(btn)\n\n\t// Create and add lights to the scene\n\tscene.Add(light.NewAmbient(&math32.Color{1.0, 1.0, 1.0}, 0.8))\n\tpointLight := light.NewPoint(&math32.Color{1, 1, 1}, 5.0)\n\tpointLight.SetPosition(1, 0, 2)\n\tscene.Add(pointLight)\n\n\t// Create and add an axis helper to the scene\n\tscene.Add(helper.NewAxes(0.5))\n\n\t// Set background color to gray\n\ta.Gls().ClearColor(0.5, 0.5, 0.5, 1.0)\n\n\t// Run the application\n\ta.Run(func(renderer *renderer.Renderer, deltaTime time.Duration) {\n\t\ta.Gls().Clear(gls.DEPTH_BUFFER_BIT | gls.STENCIL_BUFFER_BIT | gls.COLOR_BUFFER_BIT)\n\t\trenderer.Render(scene, cam)\n\t})\n}\n```\n\n<p align=\"center\">\n  <img style=\"float: right;\" src=\"https://github.com/g3n/demos/blob/master/hellog3n/screenshot.png\" alt=\"hellog3n Screenshot\"/>\n</p>    \n  \nYou can download and install `hellog3n` via:\n    \n    go install github.com/g3n/demos/hellog3n@latest\n\nFor more complex demos please see the [G3N demo program](https://github.com/g3n/g3nd).\n\n## Documentation\n\nThe complete engine API reference can be found here: [![GoDoc](https://godoc.org/github.com/g3n/engine?status.svg)](https://godoc.org/github.com/g3n/engine).\n\nThere is also the beginning of a Getting Started Guide, and a newly created list of Guides and Tutorials:\n\n* [Getting Started](https://github.com/g3n/engine/wiki/Getting-Started-(WIP))\n* [Guides and Tutorials](https://github.com/g3n/engine/wiki/Guides-and-Tutorials)\n\nAlong with those, a good way to learn how to use the engine is to see the source code of [G3ND - the G3N demo](https://github.com/g3n/g3nd).\n  \n## Contributing\n\nIf you find a bug or create a new feature you are encouraged to send pull requests!\n\n## Community\n\nJoin our [Discord channel](https://discord.gg/NfaeVr8zDg). It's the best way to have your questions answered quickly by the G3N community.\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/g3n/engine.svg)](https://starchart.cc/g3n/engine)\n"
        },
        {
          "name": "animation",
          "type": "tree",
          "content": null
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "audio",
          "type": "tree",
          "content": null
        },
        {
          "name": "camera",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "experimental",
          "type": "tree",
          "content": null
        },
        {
          "name": "geometry",
          "type": "tree",
          "content": null
        },
        {
          "name": "gls",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.255859375,
          "content": "module github.com/g3n/engine\n\ngo 1.13\n\nrequire (\n\tgithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20210410170116-ea3d685f79fb\n\tgithub.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0\n\tgolang.org/x/image v0.0.0-20210607152325-775e3b0c77b9\n\tgopkg.in/yaml.v2 v2.4.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 1.1953125,
          "content": "github.com/go-gl/glfw/v3.3/glfw v0.0.0-20210410170116-ea3d685f79fb h1:T6gaWBvRzJjuOrdCtg8fXXjKai2xSDqWTcKFUPuw8Tw=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20210410170116-ea3d685f79fb/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0 h1:DACJavvAHhabrF08vX0COfcOBJRhZ8lUbR+ZWIs0Y5g=\ngithub.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0/go.mod h1:E/TSTwGwJL78qG/PmXZO1EjYhfJinVAhrmmHX6Z8B9k=\ngolang.org/x/image v0.0.0-20210607152325-775e3b0c77b9 h1:D0iM1dTCbD5Dg1CbuvLC/v/agLc79efSj/L35Q3Vqhs=\ngolang.org/x/image v0.0.0-20210607152325-775e3b0c77b9/go.mod h1:023OzeP/+EPmXeapQh35lcL3II3LrY8Ic+EFFKVhULM=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\n"
        },
        {
          "name": "graphic",
          "type": "tree",
          "content": null
        },
        {
          "name": "gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "light",
          "type": "tree",
          "content": null
        },
        {
          "name": "loader",
          "type": "tree",
          "content": null
        },
        {
          "name": "material",
          "type": "tree",
          "content": null
        },
        {
          "name": "math32",
          "type": "tree",
          "content": null
        },
        {
          "name": "renderer",
          "type": "tree",
          "content": null
        },
        {
          "name": "text",
          "type": "tree",
          "content": null
        },
        {
          "name": "texture",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "window",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}