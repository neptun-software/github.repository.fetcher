{
  "metadata": {
    "timestamp": 1736566897589,
    "page": 467,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gofiber/recipes",
      "stars": 3190,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.212890625,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\ncharset = utf-8\nmax_line_length = 100\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[{Makefile,*.mod,*.sum,*.go}]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6318359375,
          "content": "# If you prefer the allow list template instead of the deny list, see community template:\n# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore\n#\n# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Test binary, built with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Dependency directories (remove the comment below to include it)\nvendor/\n\n# Go workspace file\ngo.work\n\n# Ignore main binaries\n**/main\n\n# IDE files\n.idea/\n"
        },
        {
          "name": ".markdownlint.yml",
          "type": "blob",
          "size": 9.484375,
          "content": "# Example markdownlint configuration with all properties set to their default value\n\n# Default state for all rules\ndefault: true\n\n# Path to configuration file to extend\nextends: null\n\n# MD001/heading-increment : Heading levels should only increment by one level at a time : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md001.md\nMD001: true\n\n# MD003/heading-style : Heading style : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md003.md\nMD003:\n  # Heading style\n  style: \"consistent\"\n\n# MD004/ul-style : Unordered list style : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md004.md\nMD004:\n  # List style\n  style: \"consistent\"\n\n# MD005/list-indent : Inconsistent indentation for list items at the same level : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md005.md\nMD005: true\n\n# MD007/ul-indent : Unordered list indentation : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md007.md\nMD007:\n  # Spaces for indent\n  indent: \n  # Whether to indent the first level of the list\n  start_indented: false\n  # Spaces for first level indent (when start_indented is set)\n  start_indent: 2\n\n# MD009/no-trailing-spaces : Trailing spaces : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md009.md\nMD009:\n  # Spaces for line break\n  br_spaces: 2\n  # Allow spaces for empty lines in list items\n  list_item_empty_lines: false\n  # Include unnecessary breaks\n  strict: true\n\n# MD010/no-hard-tabs : Hard tabs : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md010.md\nMD010:\n  # Include code blocks\n  code_blocks: true\n  # Fenced code languages to ignore\n  ignore_code_languages: []\n  # Number of spaces for each hard tab\n  spaces_per_tab: 4\n\n# MD011/no-reversed-links : Reversed link syntax : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md011.md\nMD011: true\n\n# MD012/no-multiple-blanks : Multiple consecutive blank lines : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md012.md\nMD012:\n  # Consecutive blank lines\n  maximum: 1\n\n# MD013/line-length : Line length : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md013.md\nMD013: false\n\n# MD014/commands-show-output : Dollar signs used before commands without showing output : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md014.md\nMD014: true\n\n# MD018/no-missing-space-atx : No space after hash on atx style heading : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md018.md\nMD018: true\n\n# MD019/no-multiple-space-atx : Multiple spaces after hash on atx style heading : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md019.md\nMD019: true\n\n# MD020/no-missing-space-closed-atx : No space inside hashes on closed atx style heading : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md020.md\nMD020: true\n\n# MD021/no-multiple-space-closed-atx : Multiple spaces inside hashes on closed atx style heading : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md021.md\nMD021: true\n\n# MD022/blanks-around-headings : Headings should be surrounded by blank lines : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md022.md\nMD022:\n  # Blank lines above heading\n  lines_above: 1\n  # Blank lines below heading\n  lines_below: 1\n\n# MD023/heading-start-left : Headings must start at the beginning of the line : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md023.md\nMD023: true\n\n# MD024/no-duplicate-heading : Multiple headings with the same content : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md024.md\nMD024: false\n\n# MD025/single-title/single-h1 : Multiple top-level headings in the same document : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md025.md\nMD025:\n  # Heading level\n  level: 1\n  # RegExp for matching title in front matter\n  front_matter_title: \"^\\\\s*title\\\\s*[:=]\"\n\n# MD026/no-trailing-punctuation : Trailing punctuation in heading : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md026.md\nMD026:\n  # Punctuation characters\n  punctuation: \".,;:!。，；：！\"\n\n# MD027/no-multiple-space-blockquote : Multiple spaces after blockquote symbol : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md027.md\nMD027: true\n\n# MD028/no-blanks-blockquote : Blank line inside blockquote : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md028.md\nMD028: true\n\n# MD029/ol-prefix : Ordered list item prefix : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md029.md\nMD029:\n  # List style\n  style: \"one_or_ordered\"\n\n# MD030/list-marker-space : Spaces after list markers : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md030.md\nMD030:\n  # Spaces for single-line unordered list items\n  ul_single: 1\n  # Spaces for single-line ordered list items\n  ol_single: 1\n  # Spaces for multi-line unordered list items\n  ul_multi: 1\n  # Spaces for multi-line ordered list items\n  ol_multi: 1\n\n# MD031/blanks-around-fences : Fenced code blocks should be surrounded by blank lines : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md031.md\nMD031:\n  # Include list items\n  list_items: true\n\n# MD032/blanks-around-lists : Lists should be surrounded by blank lines : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md032.md\nMD032: true\n\n# MD033/no-inline-html : Inline HTML : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md033.md\nMD033: false\n\n# MD034/no-bare-urls : Bare URL used : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md034.md\nMD034: true\n\n# MD035/hr-style : Horizontal rule style : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md035.md\nMD035:\n  # Horizontal rule style\n  style: \"consistent\"\n\n# MD036/no-emphasis-as-heading : Emphasis used instead of a heading : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md036.md\nMD036:\n  # Punctuation characters\n  punctuation: \".,;:!?。，；：！？\"\n\n# MD037/no-space-in-emphasis : Spaces inside emphasis markers : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md037.md\nMD037: true\n\n# MD038/no-space-in-code : Spaces inside code span elements : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md038.md\nMD038: true\n\n# MD039/no-space-in-links : Spaces inside link text : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md039.md\nMD039: true\n\n# MD040/fenced-code-language : Fenced code blocks should have a language specified : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md040.md\nMD040:\n  # List of languages\n  allowed_languages: []\n  # Require language only\n  language_only: false\n\n# MD041/first-line-heading/first-line-h1 : First line in a file should be a top-level heading : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md041.md\nMD041:\n  # Heading level\n  level: 1\n  # RegExp for matching title in front matter\n  front_matter_title: \"^\\\\s*title\\\\s*[:=]\"\n\n# MD042/no-empty-links : No empty links : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md042.md\nMD042: true\n\n# MD043/required-headings : Required heading structure : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md043.md\nMD043: false\n\n# MD044/proper-names : Proper names should have the correct capitalization : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md044.md\nMD044:\n  # List of proper names\n  names: []\n  # Include code blocks\n  code_blocks: true\n  # Include HTML elements\n  html_elements: true\n\n# MD045/no-alt-text : Images should have alternate text (alt text) : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md045.md\nMD045: false\n\n# MD046/code-block-style : Code block style : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md046.md\nMD046:\n  # Block style\n  style: \"fenced\"\n\n# MD047/single-trailing-newline : Files should end with a single newline character : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md047.md\nMD047: true\n\n# MD048/code-fence-style : Code fence style : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md048.md\nMD048:\n  # Code fence style\n  style: \"backtick\"\n\n# MD049/emphasis-style : Emphasis style : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md049.md\nMD049:\n  # Emphasis style\n  style: \"consistent\"\n\n# MD050/strong-style : Strong style : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md050.md\nMD050:\n  # Strong style\n  style: \"consistent\"\n\n# MD051/link-fragments : Link fragments should be valid : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md051.md\nMD051: true\n\n# MD052/reference-links-images : Reference links and images should use a label that is defined : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md052.md\nMD052:\n  # Include shortcut syntax\n  shortcut_syntax: false\n\n# MD053/link-image-reference-definitions : Link and image reference definitions should be needed : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md053.md\nMD053:\n  # Ignored definitions\n  ignored_definitions:\n    - \"//\"\n\n# MD054/link-image-style : Link and image style : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md054.md\nMD054:\n  # Allow autolinks\n  autolink: false\n  # Allow inline links and images\n  inline: true\n  # Allow full reference links and images\n  full: true\n  # Allow collapsed reference links and images\n  collapsed: true\n  # Allow shortcut reference links and images\n  shortcut: true\n  # Allow URLs as inline links\n  url_inline: true\n\n# MD055/table-pipe-style : Table pipe style : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md055.md\nMD055:\n  # Table pipe style\n  style: \"consistent\"\n\n# MD056/table-column-count : Table column count : https://github.com/DavidAnson/markdownlint/blob/v0.34.0/doc/md056.md\nMD056: true\n"
        },
        {
          "name": "404-handler",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2020 Fiber\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.76953125,
          "content": "## help: 💡 Display available commands\n.PHONY: help\nhelp:\n\t@echo '⚡️ GoFiber/Recipes Development:'\n\t@sed -n 's/^##//p' ${MAKEFILE_LIST} | column -t -s ':' |  sed -e 's/^/ /'\n\n## audit: 🚀 Conduct quality checks\n.PHONY: audit\naudit:\n\tgo mod verify\n\tgo vet ./...\n\tgo run golang.org/x/vuln/cmd/govulncheck@latest ./...\n\n## format: 🎨 Fix code format issues\n.PHONY: format\nformat:\n\tgo run mvdan.cc/gofumpt@latest -w -l .\n\n## markdown: 🎨 Find markdown format issues (Requires markdownlint-cli)\n.PHONY: markdown\nmarkdown:\n\tmarkdownlint-cli2 \"**/*.md\" \"#vendor\"\n\n## lint: 🚨 Run lint checks\n.PHONY: lint\nlint:\n\tgo run github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0 run ./...\n\n## generate: ⚡️ Generate implementations\n.PHONY: generate\ngenerate:\n\tgo generate ./...\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.294921875,
          "content": "---\nid: welcome\ntitle: 👋 Overview\nsidebar_position: 1\n---\n\n# 🍳 Recipes for [Fiber](https://github.com/gofiber/fiber)\n\n**Welcome to the official Fiber cookbook**!\n\nHere you can find the most **delicious** recipes to cook delicious meals using our web framework.\n\n## 🌽 Table of contents\n\n<!-- AUTO-GENERATED-CONTENT:START -->\n- [404 Handler](./404-handler/README.md) - Custom 404 error page handling.\n- [Air Live Reloading](./air/README.md) - Live reloading for Go applications.\n- [Auth + Docker + Postgres + JWT](./auth-docker-postgres-jwt/README.md) - Authentication with Docker, Postgres, and JWT.\n- [Auth + JWT](./auth-jwt/README.md) - Simple JWT authentication.\n- [Autocert](./autocert/README.md) - Automatic TLS certificate management.\n- [AWS Elastic Beanstalk](./aws-eb/README.md) - Deploying to AWS Elastic Beanstalk.\n- [AWS SAM](./aws-sam/README.md) - Serverless applications with AWS SAM.\n- [AWS SAM Container](./aws-sam-container/README.md) - Containerized serverless applications with AWS SAM.\n- [Bootstrap](./bootstrap/README.md) - Integrating Bootstrap.\n- [Clean Architecture](./clean-architecture/README.md) - Implementing clean architecture in Go.\n- [Clean Code](./clean-code/README.md) - Implementing clean code in Go.\n- [Cloud Run](./cloud-run/README.md) - Deploying to Google Cloud Run.\n- [Colly Gorm](./colly-gorm/README.md) - Web scraping with Colly and GORM.\n- [CSRF](./csrf/README.md) - Cross-Site Request Forgery (CSRF) protection.\n- [CSRF + Session](./csrf-with-session/README.md) - Cross-Site Request Forgery (CSRF) protection with session management.\n- [Docker + MariaDB](./docker-mariadb-clean-arch/README.md) - Dockerized MariaDB with Clean Architecture.\n- [Docker + Nginx](./docker-nginx-loadbalancer/README.md) - Load balancing with Docker and Nginx.\n- [Dummy JSON Proxy](./dummyjson/README.md) - Proxying dummy JSON data.\n- [Entgo ORM (MySQL)](./ent-mysql/README.md) - Using Entgo ORM with MySQL\n- [Entgo Sveltekit](./entgo-sveltekit/README.md) - A full-stack Todo application built using Sveltekit, Tailwind CSS, Entgo, and SQLite.\n- [Envoy External Authorization](./envoy-extauthz/README.md) - External authorization with Envoy.\n- [File Server](./file-server/README.md) - Serving static files.\n- [Firebase Authentication](./firebase-auth/README.md) - Firebase authentication integration.\n- [Firebase Functions](./firebase-functions/README.md) - Using Firebase Functions.\n- [Firebase GCloud](./gcloud/README.md) - Integrating Firebase with Google Cloud.\n- [Google Cloud Firebase](./gcloud-firebase/README.md) - Firebase services on Google Cloud.\n- [GeoIP](./geoip/README.md) - Geolocation with GeoIP.\n- [GeoIP + MaxMind](./geoip-maxmind/README.md) - Geolocation with GeoIP and MaxMind databases.\n- [GORM](./gorm/README.md) - Using GORM with SQLite database.\n- [GORM MySQL](./gorm-mysql/README.md) - Using GORM with MySQL database.\n- [GORM + PostgreSQL](./gorm-postgres/README.md) - Using GORM with PostgreSQL database.\n- [Graceful shutdown](./graceful-shutdown/README.md) - Graceful shutdown of applications.\n- [GraphQL](./graphql/README.md) - Setting up a GraphQL server.\n- [gRPC](./grpc/README.md) - Using Fiber as a client to a gRPC server.\n- [Hello World](./hello-world/README.md) - A simple \"Hello, World!\" application.\n- [Heroku](./heroku/README.md) - Deploying to Heroku.\n- [Hexagonal Architecture](./hexagonal/README.md) - A Hexagonal Software Architecture in Golang and MongoDB.\n- [HTTPS with PKCS12 TLS](./https-pkcs12-tls/README.md) - Setting up an HTTPS server with PKCS12 TLS certificates.\n- [HTTPS with TLS](./https-tls/README.md) - Setting up an HTTPS server with self-signed TLS certificates.\n- [I18n](./i18n/README.md) - Internationalization support.\n- [JWT](./jwt/README.md) - Using JSON Web Tokens (JWT) for authentication.\n- [Kubernetes](./k8s/README.md) - Deploying applications to Kubernetes.\n- [Memgraph](./memgraph/README.md) - Using Memgraph.\n- [MinIO](./minio/README.md) - A simple application for uploading and downloading files from MinIO.\n- [MongoDB](./mongodb/README.md) - Connecting to a MongoDB database.\n- [Multiple Ports](./multiple-ports/README.md) - Running an application on multiple ports.\n- [MySQL](./mysql/README.md) - Connecting to a MySQL database.\n- [Neo4j](./neo4j/README.md) - Connecting to a Neo4j database.\n- [OAuth2](./oauth2/README.md) - Implementing OAuth2 authentication.\n- [Google OAuth2](./oauth2-google/README.md) - Implementing Google OAuth2 authentication.\n- [Optional Parameter](./optional-parameter/README.md) - Handling optional parameters.\n- [Parsley](./parsley/README.md) - Using Parsley for dependency injection in an application.\n- [PostgreSQL](./postgresql/README.md) - Connecting to a PostgreSQL database.\n- [Prefork](./prefork/README.md) - Running an application in prefork mode.\n- [RabbitMQ](./rabbitmq/README.md) - Using RabbitMQ.\n- [React](./react-router/README.md) - Using React.\n- [Recover Middleware](./recover/README.md) - Recover middleware for error handling.\n- [RSS Feed](./rss-feed/README.md) - Generating an RSS feed.\n- [Server Timing](./server-timing/README.md) - Adding Server Timing headers to an application.\n- [Sessions + SQLite3](./sessions-sqlite3/README.md) - Using SQLite3 as a storage engine for user sessions.\n- [Socketio](./socketio/README.md) - A chatroom application using Socket.IO.\n- [Single Page Application (SPA)](./spa/README.md) - Setting up a Single Page Application (SPA) using React for the frontend and Go for the backend.\n- [Sqlboiler](./sqlboiler/README.md) - Using Sqlboiler ORM.\n- [Sqlc](./sqlc/README.md) - Using Sqlc to generate Go code from SQL queries.\n- [Server-Sent Events](./sse/README.md) - Implementing Server-Sent Events in an application.\n- [Stream Request Body](./stream-request-body/README.md) - Streaming request bodies.\n- [Svelte Netlify](./svelte-netlify/README.md) - Deploying a Svelte application on Netlify.\n- [Sveltekit Embed](./sveltekit-embed/README.md) - A full-stack application built using Sveltekit and Tailwind CSS.\n- [Swagger](./swagger/README.md) - Generate Swagger documentation for your application.\n- [Tableflip Example](./tableflip/README.md) - Use tableflip for graceful upgrades in a Go application.\n- [Template](./template/README.md) - Setting up a Go application with template rendering.\n- [Template Asset Bundling](./template-asset-bundling/README.md) - Setting up a Go application with template rendering and asset bundling.\n- [Todo App + Auth + GORM](./todo-app-with-auth-gorm/README.md) - A Todo application with authentication using GORM.\n- [Unit Testing](./unit-test/README.md) - Writing unit tests for a Go Fiber application.\n- [File Upload](./upload-file/README.md) - Handling file uploads in a Go application.\n- [URL Shortener](./url-shortener-api/README.md) - URL shortening service with a simple API.\n- [Validation](./validation/README.md) - Input validation using go-playground/validator.\n- [Vercel](./vercel/README.md) - Deploy a Go application to Vercel.\n- [WebSocket](./websocket/README.md) - Real-time communication application using WebSockets.\n- [WebSocket Chat](./websocket-chat/README.md) - Real-time chat application using WebSockets.\n<!-- AUTO-GENERATED-CONTENT:END -->\n\n## 👩‍🍳 Have a delicious recipe?\n\nIf you have found an amazing recipe for **Fiber** — share it with others!\nWe are ready to accept your [PR](https://github.com/gofiber/recipes/pulls) and add your recipe to the cookbook (both on [website](https://docs.gofiber.io) and this repository).\n"
        },
        {
          "name": "air",
          "type": "tree",
          "content": null
        },
        {
          "name": "auth-docker-postgres-jwt",
          "type": "tree",
          "content": null
        },
        {
          "name": "auth-jwt",
          "type": "tree",
          "content": null
        },
        {
          "name": "autocert",
          "type": "tree",
          "content": null
        },
        {
          "name": "aws-eb",
          "type": "tree",
          "content": null
        },
        {
          "name": "aws-sam-container",
          "type": "tree",
          "content": null
        },
        {
          "name": "aws-sam",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap",
          "type": "tree",
          "content": null
        },
        {
          "name": "clean-architecture",
          "type": "tree",
          "content": null
        },
        {
          "name": "clean-code",
          "type": "tree",
          "content": null
        },
        {
          "name": "cloud-run",
          "type": "tree",
          "content": null
        },
        {
          "name": "colly-gorm",
          "type": "tree",
          "content": null
        },
        {
          "name": "csrf-with-session",
          "type": "tree",
          "content": null
        },
        {
          "name": "csrf",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-mariadb-clean-arch",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-nginx-loadbalancer",
          "type": "tree",
          "content": null
        },
        {
          "name": "dummyjson",
          "type": "tree",
          "content": null
        },
        {
          "name": "ent-mysql",
          "type": "tree",
          "content": null
        },
        {
          "name": "entgo-sveltekit",
          "type": "tree",
          "content": null
        },
        {
          "name": "envoy-extauthz",
          "type": "tree",
          "content": null
        },
        {
          "name": "file-server",
          "type": "tree",
          "content": null
        },
        {
          "name": "firebase-auth",
          "type": "tree",
          "content": null
        },
        {
          "name": "firebase-functions",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcloud-firebase",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcloud",
          "type": "tree",
          "content": null
        },
        {
          "name": "geoip-maxmind",
          "type": "tree",
          "content": null
        },
        {
          "name": "geoip",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.025390625,
          "content": "module recipes\n\ngo 1.23.3\n"
        },
        {
          "name": "gorm-mysql",
          "type": "tree",
          "content": null
        },
        {
          "name": "gorm-postgres",
          "type": "tree",
          "content": null
        },
        {
          "name": "gorm",
          "type": "tree",
          "content": null
        },
        {
          "name": "graceful-shutdown",
          "type": "tree",
          "content": null
        },
        {
          "name": "graphql",
          "type": "tree",
          "content": null
        },
        {
          "name": "grpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "hello-world",
          "type": "tree",
          "content": null
        },
        {
          "name": "heroku",
          "type": "tree",
          "content": null
        },
        {
          "name": "hexagonal",
          "type": "tree",
          "content": null
        },
        {
          "name": "https-pkcs12-tls",
          "type": "tree",
          "content": null
        },
        {
          "name": "https-tls",
          "type": "tree",
          "content": null
        },
        {
          "name": "i18n",
          "type": "tree",
          "content": null
        },
        {
          "name": "jwt",
          "type": "tree",
          "content": null
        },
        {
          "name": "k8s",
          "type": "tree",
          "content": null
        },
        {
          "name": "memgraph",
          "type": "tree",
          "content": null
        },
        {
          "name": "minio",
          "type": "tree",
          "content": null
        },
        {
          "name": "mongodb",
          "type": "tree",
          "content": null
        },
        {
          "name": "multiple-ports",
          "type": "tree",
          "content": null
        },
        {
          "name": "mysql",
          "type": "tree",
          "content": null
        },
        {
          "name": "neo4j",
          "type": "tree",
          "content": null
        },
        {
          "name": "oauth2-google",
          "type": "tree",
          "content": null
        },
        {
          "name": "oauth2",
          "type": "tree",
          "content": null
        },
        {
          "name": "optional-parameter",
          "type": "tree",
          "content": null
        },
        {
          "name": "overview.go",
          "type": "blob",
          "size": 5.4560546875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n)\n\nvar (\n\ttitleRegex       = regexp.MustCompile(`(?m)^title: (.+)`)\n\tkeywordsRegex    = regexp.MustCompile(`(?m)^keywords: \\[(.+)\\]`)\n\tdescriptionRegex = regexp.MustCompile(`(?m)^description: (.+)`)\n\theaderRegex      = regexp.MustCompile(`(?m)^# .+`)\n)\n\n//go:generate go run overview.go\nfunc main() {\n\t// fetch current file directory\n\troot, _ := os.Getwd()\n\ttoc := \"\"\n\tvar missingReadmeDirs []string\n\tvar missingTitleDirs []string\n\tvar missingKeywordsDirs []string\n\tvar missingDescriptionDirs []string\n\n\terr := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif info.IsDir() && path != root && filepath.Dir(path) == root && !strings.HasPrefix(info.Name(), \".\") {\n\t\t\treadmePath := filepath.Join(path, \"README.md\")\n\t\t\trelativePath, err := filepath.Rel(root, path)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif _, err := os.Stat(readmePath); err == nil {\n\t\t\t\ttitle, keywords, description, err := extractMetadata(readmePath)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tif title == \"\" {\n\t\t\t\t\tmissingTitleDirs = append(missingTitleDirs, relativePath)\n\t\t\t\t}\n\t\t\t\tif len(keywords) == 0 {\n\t\t\t\t\tmissingKeywordsDirs = append(missingKeywordsDirs, relativePath)\n\t\t\t\t}\n\t\t\t\tif description == \"\" {\n\t\t\t\t\tmissingDescriptionDirs = append(missingDescriptionDirs, relativePath)\n\t\t\t\t}\n\t\t\t\tif title == \"\" {\n\t\t\t\t\ttitle = \"No title\"\n\t\t\t\t}\n\t\t\t\tif description == \"\" {\n\t\t\t\t\tdescription = \"No description\"\n\t\t\t\t}\n\t\t\t\ttoc += fmt.Sprintf(\"- [%s](./%s/README.md) - %s\\n\", title, relativePath, description)\n\t\t\t\terr = addLinksToReadme(readmePath, info.Name())\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmissingReadmeDirs = append(missingReadmeDirs, relativePath)\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\n\treadmePath := filepath.Join(root, \"README.md\")\n\tcontent, err := os.ReadFile(readmePath)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\n\tre := regexp.MustCompile(`(?s)<!-- AUTO-GENERATED-CONTENT:START -->(.*?)<!-- AUTO-GENERATED-CONTENT:END -->`)\n\tnewContent := re.ReplaceAllString(string(content), fmt.Sprintf(\"<!-- AUTO-GENERATED-CONTENT:START -->\\n%s<!-- AUTO-GENERATED-CONTENT:END -->\", toc))\n\n\terr = os.WriteFile(readmePath, []byte(newContent), 0o644)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Table of contents updated successfully.\")\n\n\tif len(missingReadmeDirs) > 0 {\n\t\tfmt.Println(\"Directories without README.md:\")\n\t\tfor _, dir := range missingReadmeDirs {\n\t\t\tfmt.Println(\"-\", dir)\n\t\t}\n\t}\n\n\tif len(missingTitleDirs) > 0 {\n\t\tfmt.Println(\"Directories without Docusaurus title:\")\n\t\tfor _, dir := range missingTitleDirs {\n\t\t\tfmt.Println(\"-\", dir)\n\t\t}\n\t}\n\n\tif len(missingKeywordsDirs) > 0 {\n\t\tfmt.Println(\"Directories without Docusaurus keywords:\")\n\t\tfor _, dir := range missingKeywordsDirs {\n\t\t\tfmt.Println(\"-\", dir)\n\t\t}\n\t}\n\n\tif len(missingDescriptionDirs) > 0 {\n\t\tfmt.Println(\"Directories without Docusaurus description:\")\n\t\tfor _, dir := range missingDescriptionDirs {\n\t\t\tfmt.Println(\"-\", dir)\n\t\t}\n\t}\n\n\tif len(missingReadmeDirs) > 0 || len(missingTitleDirs) > 0 || len(missingKeywordsDirs) > 0 || len(missingDescriptionDirs) > 0 {\n\t\tfmt.Println(\"Error: Some directories are missing README.md files, Docusaurus title, keywords, or description.\")\n\t\tos.Exit(1)\n\t}\n}\n\nfunc extractMetadata(readmePath string) (string, []string, string, error) {\n\tcontent, err := os.ReadFile(readmePath)\n\tif err != nil {\n\t\treturn \"\", nil, \"\", err\n\t}\n\n\ttitleMatches := titleRegex.FindSubmatch(content)\n\tkeywordsMatches := keywordsRegex.FindSubmatch(content)\n\tdescriptionMatches := descriptionRegex.FindSubmatch(content)\n\n\tvar title string\n\tif len(titleMatches) > 1 {\n\t\ttitle = strings.TrimSpace(string(titleMatches[1]))\n\t}\n\n\tvar keywords []string\n\tif len(keywordsMatches) > 1 {\n\t\tkeywords = strings.Split(string(keywordsMatches[1]), \",\")\n\t\tfor i := range keywords {\n\t\t\tkeywords[i] = strings.TrimSpace(keywords[i])\n\t\t}\n\t}\n\n\tvar description string\n\tif len(descriptionMatches) > 1 {\n\t\tdescription = strings.TrimSpace(string(descriptionMatches[1]))\n\t}\n\n\treturn title, keywords, description, nil\n}\n\nfunc addLinksToReadme(readmePath, dirName string) error {\n\tcontent, err := os.ReadFile(readmePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlinks := fmt.Sprintf(\n\t\t\"[![Github](https://img.shields.io/static/v1?label=&message=Github&color=2ea44f&style=for-the-badge&logo=github)](https://github.com/gofiber/recipes/tree/master/%s) \"+\n\t\t\t\"[![StackBlitz](https://img.shields.io/static/v1?label=&message=StackBlitz&color=2ea44f&style=for-the-badge&logo=StackBlitz)](https://stackblitz.com/github/gofiber/recipes/tree/master/%s)\",\n\t\tdirName, dirName)\n\n\tlines := strings.Split(string(content), \"\\n\")\n\theaderIndex := -1\n\n\t// Find the first headline\n\tfor i, line := range lines {\n\t\tif headerRegex.MatchString(line) {\n\t\t\theaderIndex = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif headerIndex == -1 {\n\t\treturn fmt.Errorf(\"no headline found in %s\", readmePath)\n\t}\n\n\t// Find the start and end of the section to be replaced\n\tstart := headerIndex + 1\n\tend := len(lines)\n\tfor i := start; i < len(lines); i++ {\n\t\tif strings.TrimSpace(lines[i]) == \"\" || strings.Contains(lines[i], \"![Github]\") || strings.Contains(lines[i], \"![StackBlitz]\") {\n\t\t\tcontinue\n\t\t}\n\t\tend = i\n\t\tbreak\n\t}\n\n\t// Replace the section with the new links and surrounding empty lines\n\tcleanedLines := append(lines[:start], append([]string{\"\", links, \"\"}, lines[end:]...)...)\n\n\tcontent = []byte(strings.Join(cleanedLines, \"\\n\"))\n\treturn os.WriteFile(readmePath, content, 0o644)\n}\n"
        },
        {
          "name": "parsley",
          "type": "tree",
          "content": null
        },
        {
          "name": "postgresql",
          "type": "tree",
          "content": null
        },
        {
          "name": "prefork",
          "type": "tree",
          "content": null
        },
        {
          "name": "rabbitmq",
          "type": "tree",
          "content": null
        },
        {
          "name": "react-router",
          "type": "tree",
          "content": null
        },
        {
          "name": "recover",
          "type": "tree",
          "content": null
        },
        {
          "name": "rss-feed",
          "type": "tree",
          "content": null
        },
        {
          "name": "server-timing",
          "type": "tree",
          "content": null
        },
        {
          "name": "sessions-sqlite3",
          "type": "tree",
          "content": null
        },
        {
          "name": "socketio",
          "type": "tree",
          "content": null
        },
        {
          "name": "spa",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlboiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlc",
          "type": "tree",
          "content": null
        },
        {
          "name": "sse",
          "type": "tree",
          "content": null
        },
        {
          "name": "stream-request-body",
          "type": "tree",
          "content": null
        },
        {
          "name": "svelte-netlify",
          "type": "tree",
          "content": null
        },
        {
          "name": "sveltekit-embed",
          "type": "tree",
          "content": null
        },
        {
          "name": "swagger",
          "type": "tree",
          "content": null
        },
        {
          "name": "tableflip",
          "type": "tree",
          "content": null
        },
        {
          "name": "template-asset-bundling",
          "type": "tree",
          "content": null
        },
        {
          "name": "template",
          "type": "tree",
          "content": null
        },
        {
          "name": "todo-app-with-auth-gorm",
          "type": "tree",
          "content": null
        },
        {
          "name": "unit-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "upload-file",
          "type": "tree",
          "content": null
        },
        {
          "name": "url-shortener-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "validation",
          "type": "tree",
          "content": null
        },
        {
          "name": "vercel",
          "type": "tree",
          "content": null
        },
        {
          "name": "websocket-chat",
          "type": "tree",
          "content": null
        },
        {
          "name": "websocket",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}