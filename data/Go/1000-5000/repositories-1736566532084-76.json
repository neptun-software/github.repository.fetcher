{
  "metadata": {
    "timestamp": 1736566532084,
    "page": 76,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gliderlabs/registrator",
      "stars": 4662,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": ".git\n.gvm_local\nbuild\nrelease\nvendor\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03125,
          "content": ".gvm_local\nbuild\nrelease\nvendor\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.650390625,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\n\n## [Unreleased][unreleased]\n### Fixed\n\n### Added\n\n### Removed\n\n### Changed\n\n## [v7] - 2016-03-05\n### Fixed\n- Providing a SERVICE_NAME for a container with multiple ports exposed would cause services to overwrite each other\n- dd3ab2e Fix specific port names not overriding port suffix\n\n### Added\n- bridge.Ping - calls adapter.Ping\n- Consul TCP Health Check\n- Support for Consul unix sockets\n- Basic Zookeper backend\n- Support for Docker multi host networking\n- Default to tcp for PortType if not provided\n- Sync etcd cluster on service registration\n- Support hostip for overlay network\n- Cleanup dangling services\n- Startup backend service connection retry\n\n### Removed\n\n### Changed\n- Upgraded base image to alpine:3.2 and go 1.4\n- bridge.New returns an error instead of calling log.Fatal\n- bridge.New will not attempt to ping an adapter.\n- Specifying a SERVICE_NAME for containers exposing multiple ports will now result in a named service per port. #194\n- Etcd uses port 2379 instead of 4001 #340\n- Setup Docker client from environment\n- Use exit status to determine if container was killed\n\n## [v6] - 2015-08-07\n### Fixed\n- Support for etcd v0 and v2\n- Panic from invalid skydns2 URI.\n\n### Added\n- Basic zookeeper adapter\n- Optional periodic resyncing of services from containers\n- More error logging for registries\n- Support for services on containers with `--net=host`\n- Added `extensions.go` file for adding/disabling components\n- Interpolate SERVICE_PORT and SERVICE_IP in SERVICE_X_CHECK_SCRIPT\n- Ability to force IP for a service in Consul\n- Implemented initial ping for every service registry\n- Option to only deregister containers cleanly shutdown #113\n- Added support for label metadata along with environment variables\n\n### Removed\n\n### Changed\n- Overall refactoring and cleanup\n- Decoupled registries into subpackages using extpoints\n- Replaced check-http script with Consul's native HTTP checks\n\n\n## [v5] - 2015-02-18\n### Added\n- Automated, PR-driven release process\n- Development Dockerfile and make task\n- CircleCI config with artifacts for every build\n- `--version` flag to see version\n\n### Changed\n- Base container is now Alpine\n- Built entirely in Docker\n- Moved to gliderlabs organization\n- New versioning scheme\n- Release artifact now saved container image\n\n### Removed\n- Dropped unnecessary layers in Dockerfile\n- Dropped Godeps for now\n\n\n[unreleased]: https://github.com/gliderlabs/registrator/compare/v7...HEAD\n[v7]: https://github.com/gliderlabs/registrator/compare/v6...v7\n[v6]: https://github.com/gliderlabs/registrator/compare/v5...v6\n[v5]: https://github.com/gliderlabs/registrator/compare/v0.4.0...v5\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5546875,
          "content": "FROM golang:1.9.4-alpine3.7 AS builder\nWORKDIR /go/src/github.com/gliderlabs/registrator/\nCOPY . .\nRUN \\\n\tapk add --no-cache curl git \\\n\t&& curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh \\\n\t&& dep ensure -vendor-only \\\n\t&& CGO_ENABLED=0 GOOS=linux go build \\\n\t\t-a -installsuffix cgo \\\n\t\t-ldflags \"-X main.Version=$(cat VERSION)\" \\\n\t\t-o bin/registrator \\\n\t\t.\n\nFROM alpine:3.7\nRUN apk add --no-cache ca-certificates\nCOPY --from=builder /go/src/github.com/gliderlabs/registrator/bin/registrator /bin/registrator\n\nENTRYPOINT [\"/bin/registrator\"]\n"
        },
        {
          "name": "Dockerfile.dev",
          "type": "blob",
          "size": 0.5576171875,
          "content": "FROM alpine:3.7\nCMD [\"/bin/registrator\"]\n\nCOPY . /go/src/github.com/gliderlabs/registrator\nRUN apk --no-cache add -t build-deps build-base go git curl \\\n\t&& apk --no-cache add ca-certificates \\\n\t&& export GOPATH=/go && mkdir -p /go/bin && export PATH=$PATH:/go/bin \\\n\t&& curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh \\\n\t&& cd /go/src/github.com/gliderlabs/registrator \\\n\t&& export GOPATH=/go \\\n\t&& git config --global http.https://gopkg.in.followRedirects true \\\n\t&& dep ensure \\\n\t&& go build -ldflags \"-X main.Version=dev\" -o /bin/registrator\n"
        },
        {
          "name": "Gopkg.lock",
          "type": "blob",
          "size": 8.9384765625,
          "content": "# This file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.\n\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:6da51e5ec493ad2b44cb04129e2d0a068c8fb9bd6cb5739d199573558696bb94\"\n  name = \"github.com/Azure/go-ansiterm\"\n  packages = [\n    \".\",\n    \"winterm\",\n  ]\n  pruneopts = \"UT\"\n  revision = \"d6e3b3328b783f23731bc4d058875b0371ff8109\"\n\n[[projects]]\n  digest = \"1:bf42be3cb1519bf8018dfd99720b1005ee028d947124cab3ccf965da59381df6\"\n  name = \"github.com/Microsoft/go-winio\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"7da180ee92d8bd8bb8c37fc560e673e6557c392f\"\n  version = \"v0.4.7\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:3721a10686511b80c052323423f0de17a8c06d417dbdd3b392b1578432a33aae\"\n  name = \"github.com/Nvveen/Gotty\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"cd527374f1e5bff4938207604a14f2e38a9cf512\"\n\n[[projects]]\n  digest = \"1:2209584c0f7c9b68c23374e659357ab546e1b70eec2761f03280f69a8fd23d77\"\n  name = \"github.com/cenkalti/backoff\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"2ea60e5f094469f9e65adb9cd103795b73ae743e\"\n  version = \"v2.0.0\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:fc8dbcc2a5de7c093e167828ebbdf551641761d2ad75431d3a167d467a264115\"\n  name = \"github.com/containerd/continuity\"\n  packages = [\"pathdriver\"]\n  pruneopts = \"UT\"\n  revision = \"c6cef34830231743494fe2969284df7b82cc0ad0\"\n\n[[projects]]\n  digest = \"1:b61d4e32d5101ba4056bce8ff33831ab40884ff13fabc1d2e2a3d67648e0fdcb\"\n  name = \"github.com/coreos/go-etcd\"\n  packages = [\"etcd\"]\n  pruneopts = \"UT\"\n  revision = \"f02171fbd43c7b9b53ce8679b03235a1ef3c7b12\"\n  version = \"v2.0.0\"\n\n[[projects]]\n  digest = \"1:a2c1d0e43bd3baaa071d1b9ed72c27d78169b2b269f71c105ac4ba34b1be4a39\"\n  name = \"github.com/davecgh/go-spew\"\n  packages = [\"spew\"]\n  pruneopts = \"UT\"\n  revision = \"346938d642f2ec3594ed81d874461961cd0faa76\"\n  version = \"v1.1.0\"\n\n[[projects]]\n  digest = \"1:49a2a779b1af8f02547b5a505eb1382f9d42299ec7215f34a32535e6af9a1c9e\"\n  name = \"github.com/docker/docker\"\n  packages = [\n    \"api/types\",\n    \"api/types/blkiodev\",\n    \"api/types/container\",\n    \"api/types/filters\",\n    \"api/types/mount\",\n    \"api/types/network\",\n    \"api/types/registry\",\n    \"api/types/strslice\",\n    \"api/types/swarm\",\n    \"api/types/swarm/runtime\",\n    \"api/types/versions\",\n    \"opts\",\n    \"pkg/archive\",\n    \"pkg/fileutils\",\n    \"pkg/homedir\",\n    \"pkg/idtools\",\n    \"pkg/ioutils\",\n    \"pkg/jsonmessage\",\n    \"pkg/longpath\",\n    \"pkg/mount\",\n    \"pkg/pools\",\n    \"pkg/stdcopy\",\n    \"pkg/system\",\n    \"pkg/term\",\n    \"pkg/term/windows\",\n  ]\n  pruneopts = \"UT\"\n  revision = \"a422774e593b33bd287d9890544ad9e09b380d8c\"\n\n[[projects]]\n  digest = \"1:87dcb59127512b84097086504c16595cf8fef35b9e0bfca565dfc06e198158d7\"\n  name = \"github.com/docker/go-connections\"\n  packages = [\"nat\"]\n  pruneopts = \"UT\"\n  revision = \"3ede32e2033de7505e6500d6c868c2b9ed9f169d\"\n  version = \"v0.3.0\"\n\n[[projects]]\n  digest = \"1:6f82cacd0af5921e99bf3f46748705239b36489464f4529a1589bc895764fb18\"\n  name = \"github.com/docker/go-units\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"47565b4f722fb6ceae66b95f853feed578a4a51c\"\n  version = \"v0.3.3\"\n\n[[projects]]\n  digest = \"1:ef99b8925cb8a662a4cc98bb84cc3b431e45b8d8570957b9a2d053b467b9ec03\"\n  name = \"github.com/fsouza/go-dockerclient\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"ca33ff277b527ce11b793e62f9ba244129b01caf\"\n  version = \"v1.2.0\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:54165f19429ccbd6d48f0ae7df3954b9485b166e6b163c028529892a5a87fabf\"\n  name = \"github.com/gliderlabs/pkg\"\n  packages = [\"usage\"]\n  pruneopts = \"UT\"\n  revision = \"36f28d47ec7aae4d25d3d2741ac5af91f7f18680\"\n\n[[projects]]\n  digest = \"1:9a688317f3231e0175b3429033f44411906c0ce119361b7b5019d01375f8cff7\"\n  name = \"github.com/gogo/protobuf\"\n  packages = [\"proto\"]\n  pruneopts = \"UT\"\n  revision = \"1adfc126b41513cc696b209667c8656ea7aac67c\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  digest = \"1:7d9085638f210faa86720b5fe8c4cd9303edb853ed93929852a4384a4e6c956f\"\n  name = \"github.com/hashicorp/consul\"\n  packages = [\"api\"]\n  pruneopts = \"UT\"\n  revision = \"fb848fc48818f58690db09d14640513aa6bf3c02\"\n  version = \"v1.0.7\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:77cb3be9b21ba7f1a4701e870c84ea8b66e7d74c7c8951c58155fdadae9414ec\"\n  name = \"github.com/hashicorp/go-cleanhttp\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"d5fe4b57a186c716b0e00b8c301cbd9b4182694d\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:45aad874d3c7d5e8610427c81870fb54970b981692930ec2a319ce4cb89d7a00\"\n  name = \"github.com/hashicorp/go-rootcerts\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"6bb64b370b90e7ef1fa532be9e591a81c3493e00\"\n\n[[projects]]\n  digest = \"1:0dd7b7b01769f9df356dc99f9e4144bdbabf6c79041ea7c0892379c5737f3c44\"\n  name = \"github.com/hashicorp/serf\"\n  packages = [\"coordinate\"]\n  pruneopts = \"UT\"\n  revision = \"d6574a5bb1226678d7010325fb6c985db20ee458\"\n  version = \"v0.8.1\"\n\n[[projects]]\n  digest = \"1:39404cfbb35df632e9225831977e498395916ff8b20bec1aca98b4daace26e22\"\n  name = \"github.com/miekg/dns\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"83c435cc65d2862736428b9b4d07d0ab10ad3e4d\"\n  version = \"v1.0.5\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:12ae6210bdbdad658a9a67fd95cd9c99f7fdbf12f6d36eaf0af704e69dacf4f5\"\n  name = \"github.com/mitchellh/go-homedir\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"b8bc1bf767474819792c23f32d8286a45736f1c6\"\n\n[[projects]]\n  digest = \"1:ee4d4af67d93cc7644157882329023ce9a7bcfce956a079069a9405521c7cc8d\"\n  name = \"github.com/opencontainers/go-digest\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"279bed98673dd5bef374d3b6e4b09e2af76183bf\"\n  version = \"v1.0.0-rc1\"\n\n[[projects]]\n  digest = \"1:11db38d694c130c800d0aefb502fb02519e514dc53d9804ce51d1ad25ec27db6\"\n  name = \"github.com/opencontainers/image-spec\"\n  packages = [\n    \"specs-go\",\n    \"specs-go/v1\",\n  ]\n  pruneopts = \"UT\"\n  revision = \"d60099175f88c47cd379c4738d158884749ed235\"\n  version = \"v1.0.1\"\n\n[[projects]]\n  digest = \"1:1869683e323ebff2bdf8adcb560f82bf6f8d94019d35099e3403f7df12e9c07e\"\n  name = \"github.com/opencontainers/runc\"\n  packages = [\n    \"libcontainer/system\",\n    \"libcontainer/user\",\n  ]\n  pruneopts = \"UT\"\n  revision = \"baf6536d6259209c3edfa2b22237af82942d3dfa\"\n  version = \"v0.1.1\"\n\n[[projects]]\n  digest = \"1:40e195917a951a8bf867cd05de2a46aaf1806c50cf92eebf4c16f78cd196f747\"\n  name = \"github.com/pkg/errors\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"645ef00459ed84a119197bfb8d8205042c6df63d\"\n  version = \"v0.8.0\"\n\n[[projects]]\n  digest = \"1:0028cb19b2e4c3112225cd871870f2d9cf49b9b4276531f03438a88e94be86fe\"\n  name = \"github.com/pmezard/go-difflib\"\n  packages = [\"difflib\"]\n  pruneopts = \"UT\"\n  revision = \"792786c7400a136282c1664665ae0a8db921c6c2\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:4d92d3bcd412de705100c10f0428a0b63b12f3d12455ebae46e9ea384c23b333\"\n  name = \"github.com/samuel/go-zookeeper\"\n  packages = [\"zk\"]\n  pruneopts = \"UT\"\n  revision = \"c4fab1ac1bec58281ad0667dc3f0907a9476ac47\"\n\n[[projects]]\n  digest = \"1:9e9193aa51197513b3abcb108970d831fbcf40ef96aa845c4f03276e1fa316d2\"\n  name = \"github.com/sirupsen/logrus\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"c155da19408a8799da419ed3eeb0cb5db0ad5dbc\"\n  version = \"v1.0.5\"\n\n[[projects]]\n  digest = \"1:f85e109eda8f6080877185d1c39e98dd8795e1780c08beca28304b87fd855a1c\"\n  name = \"github.com/stretchr/testify\"\n  packages = [\"assert\"]\n  pruneopts = \"UT\"\n  revision = \"12b6f73e6084dad08a7c6e575284b177ecafbc71\"\n  version = \"v1.2.1\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:0faa1e97cfa78445bc4d20d70b40929e88040c8f3110eb497f965d41bb6e593a\"\n  name = \"golang.org/x/crypto\"\n  packages = [\n    \"ed25519\",\n    \"ed25519/internal/edwards25519\",\n    \"ssh/terminal\",\n  ]\n  pruneopts = \"UT\"\n  revision = \"e73bf333ef8920dbb52ad18d4bd38ad9d9bc76d7\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:ebe951b4df51f83f0de0847319bb022f9c96a4649f1cf18a90aa4893ef2b82fd\"\n  name = \"golang.org/x/net\"\n  packages = [\n    \"bpf\",\n    \"context\",\n    \"context/ctxhttp\",\n    \"internal/iana\",\n    \"internal/socket\",\n    \"ipv4\",\n    \"ipv6\",\n  ]\n  pruneopts = \"UT\"\n  revision = \"5f9ae10d9af5b1c89ae6904293b14b064d4ada23\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:6372ba5b1cf771e7774ee197d79827fea93a995e46b6c49e1bbfdce6ab46f77d\"\n  name = \"golang.org/x/sys\"\n  packages = [\n    \"unix\",\n    \"windows\",\n  ]\n  pruneopts = \"UT\"\n  revision = \"79b0c6888797020a994db17c8510466c72fe75d9\"\n\n[[projects]]\n  digest = \"1:77b931135abb2ac4c127e7843d1231af0977227aafa21d9bb8c79b74644dcc39\"\n  name = \"gopkg.in/coreos/go-etcd.v0\"\n  packages = [\"etcd\"]\n  pruneopts = \"UT\"\n  revision = \"6aa2da5a7a905609c93036b9307185a04a5a84a5\"\n  version = \"v0.4.6\"\n\n[solve-meta]\n  analyzer-name = \"dep\"\n  analyzer-version = 1\n  input-imports = [\n    \"github.com/cenkalti/backoff\",\n    \"github.com/coreos/go-etcd/etcd\",\n    \"github.com/fsouza/go-dockerclient\",\n    \"github.com/gliderlabs/pkg/usage\",\n    \"github.com/hashicorp/consul/api\",\n    \"github.com/hashicorp/go-cleanhttp\",\n    \"github.com/samuel/go-zookeeper/zk\",\n    \"github.com/stretchr/testify/assert\",\n    \"gopkg.in/coreos/go-etcd.v0/etcd\",\n  ]\n  solver-name = \"gps-cdcl\"\n  solver-version = 1\n"
        },
        {
          "name": "Gopkg.toml",
          "type": "blob",
          "size": 0.9306640625,
          "content": "# constraints\n\n[[constraint]]\n  name = \"github.com/cenkalti/backoff\"\n  version = \"2.0.0\"\n\n[[constraint]]\n  name = \"github.com/hashicorp/consul\"\n  version = \"1.0.7\"\n\n[[constraint]]\n  branch = \"master\"\n  name = \"github.com/hashicorp/go-cleanhttp\"\n\n[[constraint]]\n  name = \"github.com/fsouza/go-dockerclient\"\n  version = \"1.2.0\"\n\n[[constraint]]\n  name = \"github.com/coreos/go-etcd\"\n  version = \"2.0.0\"\n\n[[constraint]]\n  name = \"gopkg.in/coreos/go-etcd.v0\"\n  version = \"0.4.6\"\n\n[[constraint]]\n  branch = \"master\"\n  name = \"github.com/samuel/go-zookeeper\"\n\n[[constraint]]\n  branch = \"master\"\n  name = \"github.com/gliderlabs/pkg\"\n\n[[constraint]]\n  name = \"github.com/stretchr/testify\"\n  version = \"1.2.1\"\n\n# overrides\n\n[[override]]\n  name = \"github.com/docker/docker\"\n  revision = \"a422774e593b33bd287d9890544ad9e09b380d8c\"\n\n[[override]]\n  branch = \"master\"\n  name = \"github.com/Azure/go-ansiterm\"\n\n# prune\n\n[prune]\n  go-tests = true\n  unused-packages = true\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.546875,
          "content": "- What version of docker are you running?\n- What version of registrator are you running?\n- Did you build a custom version of registrator? If so, what is that image?\n- What is the exact command you are running registrator with?\n- What is the exact command you are running your container with?\n- A log capture of all the docker events before, during, and after the issue.\n- If relevant, `Dockerfile` for application that is having issues.\n\nDescription of the problem:\n\nHow reproducible:\n\nSteps to Reproduce:\n\nActual Results:\n\nExpected Results:\n\nAdditional info:\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Glider Labs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.87109375,
          "content": "NAME=registrator\nVERSION=$(shell cat VERSION)\nDEV_RUN_OPTS ?= consul:\n\ndev:\n\tdocker build -f Dockerfile.dev -t $(NAME):dev .\n\tdocker run --rm \\\n\t\t-v /var/run/docker.sock:/tmp/docker.sock \\\n\t\t$(NAME):dev /bin/registrator $(DEV_RUN_OPTS)\n\nbuild:\n\tmkdir -p build\n\tdocker build -t $(NAME):$(VERSION) .\n\tdocker save $(NAME):$(VERSION) | gzip -9 > build/$(NAME)_$(VERSION).tgz\n\nrelease:\n\trm -rf release && mkdir release\n\tgo get github.com/progrium/gh-release/...\n\tcp build/* release\n\tgh-release create gliderlabs/$(NAME) $(VERSION) \\\n\t\t$(shell git rev-parse --abbrev-ref HEAD) $(VERSION)\n\ndocs:\n\tboot2docker ssh \"sync; sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'\" || true\n\tdocker run --rm -it -p 8000:8000 -v $(PWD):/work gliderlabs/pagebuilder mkdocs serve\n\ncircleci:\n\trm ~/.gitconfig\nifneq ($(CIRCLE_BRANCH), release)\n\techo build-$$CIRCLE_BUILD_NUM > VERSION\nendif\n\n.PHONY: build release docs\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.275390625,
          "content": "# Registrator\n\nService registry bridge for Docker.\n\n[![Circle CI](https://circleci.com/gh/gliderlabs/registrator.png?style=shield)](https://circleci.com/gh/gliderlabs/registrator)\n[![Docker pulls](https://img.shields.io/docker/pulls/gliderlabs/registrator.svg)](https://hub.docker.com/r/gliderlabs/registrator/)\n[![IRC Channel](https://img.shields.io/badge/irc-%23gliderlabs-blue.svg)](https://kiwiirc.com/client/irc.freenode.net/#gliderlabs)\n<br /><br />\n\nRegistrator automatically registers and deregisters services for any Docker\ncontainer by inspecting containers as they come online. Registrator\nsupports pluggable service registries, which currently includes\n[Consul](http://www.consul.io/), [etcd](https://github.com/coreos/etcd) and\n[SkyDNS 2](https://github.com/skynetservices/skydns/).\n\nFull documentation available at http://gliderlabs.com/registrator\n\n## Getting Registrator\n\nGet the latest release, master, or any version of Registrator via [Docker Hub](https://registry.hub.docker.com/u/gliderlabs/registrator/):\n\n\t$ docker pull gliderlabs/registrator:latest\n\nLatest tag always points to the latest release. There is also a `:master` tag\nand version tags to pin to specific releases.\n\n## Using Registrator\n\nThe quickest way to see Registrator in action is our\n[Quickstart](https://gliderlabs.com/registrator/latest/user/quickstart)\ntutorial. Otherwise, jump to the [Run\nReference](https://gliderlabs.com/registrator/latest/user/run) in the User\nGuide. Typically, running Registrator looks like this:\n\n    $ docker run -d \\\n        --name=registrator \\\n        --net=host \\\n        --volume=/var/run/docker.sock:/tmp/docker.sock \\\n        gliderlabs/registrator:latest \\\n          consul://localhost:8500\n\n## CLI Options\n```\nUsage of /bin/registrator:\n  /bin/registrator [options] <registry URI>\n\n  -cleanup=false: Remove dangling services\n  -deregister=\"always\": Deregister exited services \"always\" or \"on-success\"\n  -explicit=false: Only register containers which have SERVICE_NAME label set\n  -internal=false: Use internal ports instead of published ones\n  -ip=\"\": IP for ports mapped to the host\n  -resync=0: Frequency with which services are resynchronized\n  -retry-attempts=0: Max retry attempts to establish a connection with the backend. Use -1 for infinite retries\n  -retry-interval=2000: Interval (in millisecond) between retry-attempts.\n  -tags=\"\": Append tags for all registered services\n  -ttl=0: TTL for services (default is no expiry)\n  -ttl-refresh=0: Frequency with which service TTLs are refreshed\n```\n\n## Contributing\n\nPull requests are welcome! We recommend getting feedback before starting by\nopening a [GitHub issue](https://github.com/gliderlabs/registrator/issues) or\ndiscussing in [Slack](http://glider-slackin.herokuapp.com/).\n\nAlso check out our Developer Guide on [Contributing\nBackends](https://gliderlabs.com/registrator/latest/dev/backends) and [Staging\nReleases](https://gliderlabs.com/registrator/latest/dev/releases).\n\n## Sponsors and Thanks\n\nBig thanks to Weave for sponsoring, Michael Crosby for\n[skydock](https://github.com/crosbymichael/skydock), and the Consul mailing list\nfor inspiration.\n\nFor a full list of sponsors, see\n[SPONSORS](https://github.com/gliderlabs/registrator/blob/master/SPONSORS).\n\n## License\n\nMIT\n\n<img src=\"https://ga-beacon.appspot.com/UA-58928488-2/registrator/readme?pixel\" />\n"
        },
        {
          "name": "SPONSORS",
          "type": "blob",
          "size": 0.0693359375,
          "content": "DigitalOcean  http://digitalocean.com\nWeaveworks    http://weave.works\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0029296875,
          "content": "v7\n"
        },
        {
          "name": "bridge",
          "type": "tree",
          "content": null
        },
        {
          "name": "consul",
          "type": "tree",
          "content": null
        },
        {
          "name": "consulkv",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "etcd",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 0.546875,
          "content": "site_name: Registrator\nsite_url: https://gliderlabs.com/registrator\nrepo_url: https://github.com/gliderlabs/registrator\ndev_addr: 0.0.0.0:8000\ntheme_dir: /pagebuilder/theme\ngoogle_analytics: ['UA-58928488-1', 'auto']\npages:\n  - 'Readme': index.md\n  - 'User Guide':\n    - 'Quickstart': user/quickstart.md\n    - 'Run Reference': user/run.md\n    - 'Service Model': user/services.md\n    - 'Registry Backends': user/backends.md\n    - 'FAQ': user/faq.md\n  - 'Developer Guide':\n    - 'Contributing Backends': dev/backends.md\n    - 'Staging Releases': dev/releases.md\n"
        },
        {
          "name": "modules.go",
          "type": "blob",
          "size": 0.2529296875,
          "content": "package main\n\nimport (\n\t_ \"github.com/gliderlabs/registrator/consul\"\n\t_ \"github.com/gliderlabs/registrator/consulkv\"\n\t_ \"github.com/gliderlabs/registrator/etcd\"\n\t_ \"github.com/gliderlabs/registrator/skydns2\"\n\t_ \"github.com/gliderlabs/registrator/zookeeper\"\n)\n"
        },
        {
          "name": "registrator.go",
          "type": "blob",
          "size": 4.94921875,
          "content": "package main\n\nimport (\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"runtime\"\n\t\"strings\"\n\t\"time\"\n\n\tdockerapi \"github.com/fsouza/go-dockerclient\"\n\t\"github.com/gliderlabs/pkg/usage\"\n\t\"github.com/gliderlabs/registrator/bridge\"\n)\n\nvar Version string\n\nvar versionChecker = usage.NewChecker(\"registrator\", Version)\n\nvar hostIp = flag.String(\"ip\", \"\", \"IP for ports mapped to the host\")\nvar internal = flag.Bool(\"internal\", false, \"Use internal ports instead of published ones\")\nvar explicit = flag.Bool(\"explicit\", false, \"Only register containers which have SERVICE_NAME label set\")\nvar useIpFromLabel = flag.String(\"useIpFromLabel\", \"\", \"Use IP which is stored in a label assigned to the container\")\nvar refreshInterval = flag.Int(\"ttl-refresh\", 0, \"Frequency with which service TTLs are refreshed\")\nvar refreshTtl = flag.Int(\"ttl\", 0, \"TTL for services (default is no expiry)\")\nvar forceTags = flag.String(\"tags\", \"\", \"Append tags for all registered services\")\nvar resyncInterval = flag.Int(\"resync\", 0, \"Frequency with which services are resynchronized\")\nvar deregister = flag.String(\"deregister\", \"always\", \"Deregister exited services \\\"always\\\" or \\\"on-success\\\"\")\nvar retryAttempts = flag.Int(\"retry-attempts\", 0, \"Max retry attempts to establish a connection with the backend. Use -1 for infinite retries\")\nvar retryInterval = flag.Int(\"retry-interval\", 2000, \"Interval (in millisecond) between retry-attempts.\")\nvar cleanup = flag.Bool(\"cleanup\", false, \"Remove dangling services\")\n\nfunc getopt(name, def string) string {\n\tif env := os.Getenv(name); env != \"\" {\n\t\treturn env\n\t}\n\treturn def\n}\n\nfunc assert(err error) {\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc main() {\n\tif len(os.Args) == 2 && os.Args[1] == \"--version\" {\n\t\tversionChecker.PrintVersion()\n\t\tos.Exit(0)\n\t}\n\tlog.Printf(\"Starting registrator %s ...\", Version)\n\n\tflag.Usage = func() {\n\t\tfmt.Fprintf(os.Stderr, \"Usage of %s:\\n\", os.Args[0])\n\t\tfmt.Fprintf(os.Stderr, \"  %s [options] <registry URI>\\n\\n\", os.Args[0])\n\t\tflag.PrintDefaults()\n\t}\n\n\tflag.Parse()\n\n\tif flag.NArg() != 1 {\n\t\tif flag.NArg() == 0 {\n\t\t\tfmt.Fprint(os.Stderr, \"Missing required argument for registry URI.\\n\\n\")\n\t\t} else {\n\t\t\tfmt.Fprintln(os.Stderr, \"Extra unparsed arguments:\")\n\t\t\tfmt.Fprintln(os.Stderr, \" \", strings.Join(flag.Args()[1:], \" \"))\n\t\t\tfmt.Fprint(os.Stderr, \"Options should come before the registry URI argument.\\n\\n\")\n\t\t}\n\t\tflag.Usage()\n\t\tos.Exit(2)\n\t}\n\n\tif *hostIp != \"\" {\n\t\tlog.Println(\"Forcing host IP to\", *hostIp)\n\t}\n\n\tif (*refreshTtl == 0 && *refreshInterval > 0) || (*refreshTtl > 0 && *refreshInterval == 0) {\n\t\tassert(errors.New(\"-ttl and -ttl-refresh must be specified together or not at all\"))\n\t} else if *refreshTtl > 0 && *refreshTtl <= *refreshInterval {\n\t\tassert(errors.New(\"-ttl must be greater than -ttl-refresh\"))\n\t}\n\n\tif *retryInterval <= 0 {\n\t\tassert(errors.New(\"-retry-interval must be greater than 0\"))\n\t}\n\n\tdockerHost := os.Getenv(\"DOCKER_HOST\")\n\tif dockerHost == \"\" {\n\t\tif runtime.GOOS != \"windows\" {\n\t\t\tos.Setenv(\"DOCKER_HOST\", \"unix:///tmp/docker.sock\")\n\t\t} else {\n\t\t\tos.Setenv(\"DOCKER_HOST\", \"npipe:////./pipe/docker_engine\")\n\t\t}\n\t}\n\n\tdocker, err := dockerapi.NewClientFromEnv()\n\tassert(err)\n\n\tif *deregister != \"always\" && *deregister != \"on-success\" {\n\t\tassert(errors.New(\"-deregister must be \\\"always\\\" or \\\"on-success\\\"\"))\n\t}\n\n\tb, err := bridge.New(docker, flag.Arg(0), bridge.Config{\n\t\tHostIp:          *hostIp,\n\t\tInternal:        *internal,\n\t\tExplicit:        *explicit,\n\t\tUseIpFromLabel:  *useIpFromLabel,\n\t\tForceTags:       *forceTags,\n\t\tRefreshTtl:      *refreshTtl,\n\t\tRefreshInterval: *refreshInterval,\n\t\tDeregisterCheck: *deregister,\n\t\tCleanup:         *cleanup,\n\t})\n\n\tassert(err)\n\n\tattempt := 0\n\tfor *retryAttempts == -1 || attempt <= *retryAttempts {\n\t\tlog.Printf(\"Connecting to backend (%v/%v)\", attempt, *retryAttempts)\n\n\t\terr = b.Ping()\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\n\t\tif err != nil && attempt == *retryAttempts {\n\t\t\tassert(err)\n\t\t}\n\n\t\ttime.Sleep(time.Duration(*retryInterval) * time.Millisecond)\n\t\tattempt++\n\t}\n\n\t// Start event listener before listing containers to avoid missing anything\n\tevents := make(chan *dockerapi.APIEvents)\n\tassert(docker.AddEventListener(events))\n\tlog.Println(\"Listening for Docker events ...\")\n\n\tb.Sync(false)\n\n\tquit := make(chan struct{})\n\n\t// Start the TTL refresh timer\n\tif *refreshInterval > 0 {\n\t\tticker := time.NewTicker(time.Duration(*refreshInterval) * time.Second)\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-ticker.C:\n\t\t\t\t\tb.Refresh()\n\t\t\t\tcase <-quit:\n\t\t\t\t\tticker.Stop()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\n\t// Start the resync timer if enabled\n\tif *resyncInterval > 0 {\n\t\tresyncTicker := time.NewTicker(time.Duration(*resyncInterval) * time.Second)\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-resyncTicker.C:\n\t\t\t\t\tb.Sync(true)\n\t\t\t\tcase <-quit:\n\t\t\t\t\tresyncTicker.Stop()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\n\t// Process Docker events\n\tfor msg := range events {\n\t\tswitch msg.Status {\n\t\tcase \"start\":\n\t\t\tgo b.Add(msg.ID)\n\t\tcase \"die\":\n\t\t\tgo b.RemoveOnExit(msg.ID)\n\t\t}\n\t}\n\n\tclose(quit)\n\tlog.Fatal(\"Docker event loop closed\") // todo: reconnect?\n}\n"
        },
        {
          "name": "skydns2",
          "type": "tree",
          "content": null
        },
        {
          "name": "zookeeper",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}