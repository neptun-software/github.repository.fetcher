{
  "metadata": {
    "timestamp": 1736566480262,
    "page": 25,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "drk1wi/Modlishka",
      "stars": 4891,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.00390625,
          "content": ".git"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 4.1318359375,
          "content": "Modlishka Public Source License\n\nThe Modlishka software (henceforth referred to simply as \"Modlishka\") is dual-licensed - Copyright 2018 Modlishka Team.\n\nCases that include commercialization of Modlishka require a commercial, non-free license. Otherwise, Modlishka can be used without charge under the terms set out below.\n\n1. Definitions\n\n1.1 “License” means this document.\n1.2 “Contributor” means each individual or legal entity that creates, contributes to the creation of, or owns Modlishka.\n1.3 “Modlishka Team” means Modlishka’s core developer (Piotr Duszyński) and an updated list of whom can be found within the CREDITS file.\n\n2. Commercialization\n\nA commercial use is one intended for commercial advantage or monetary compensation.\n\nExample cases of commercialization are:\n\n - Using Modlishka to provide commercial managed/Software-as-a-Service services.\n - Distributing Modlishka as a commercial product or as part of one.\n - Using Modlishka as a part of a commercial service or product.\n - Promoting commercial services or products with Modlishka.\n\nExample cases which do not require a commercial license, and thus fall under the terms set out below, include (but are not limited to):\n\n - Penetration testers (or penetration testing organizations) using Modlishka as part of their assessment toolkit.\n - Penetration Testing Linux Distributions including but not limited to Kali Linux, SamuraiWTF, BackBox Linux.\n - Using standalone Modlishka to test your own systems.\n - Any non-commercial use of Modlishka.\n\nIf you need to purchase a commercial license or are unsure whether you need to purchase a commercial license contact us -> piotr[\\at]duszynski.eu.\n\nWe may grant commercial licenses at no monetary cost at our own discretion if the commercial usage is deemed by the Modlishka Team to significantly benefit Modlishka.\n\nFree-use Terms and Conditions;\n\n3. Redistribution\n\nRedistribution is permitted under the following conditions:\n\n - Does not conflict with the commercialization clause.\n - Unmodified License is provided with Modlishka.\n - Unmodified Copyright notices are provided with Modlishka.\n - Work that is based or relies on Modlishka or its subcomponents (including modifications) is released as an open-source project.\n\n4. Copying\n\nCopying is permitted so long as it does not conflict with the Redistribution clause (all conditions apply).\n\n5. Modification\n\nModification is permitted so long as it does not conflict with the Redistribution clause (all conditions apply).\n\n6. Contributions\n\nAny Contributions assume the Contributor grants the Modlishka Team the unlimited, non-exclusive right to reuse, modify and relicense the Contributor's content.\n\n7. Support\n\nModlishka is provided under an AS-IS basis and without any support, updates or maintenance. Support, updates and maintenance may be given according to the sole discretion of the Modlishka Team.\n\n8. Disclaimer of Warranty\n\nModlishka is provided under this License on an “as is” basis, without warranty of any kind, either expressed, implied, or statutory, including, without limitation, warranties that the Modlishka is free of defects, merchantable, fit for a particular purpose or non-infringing.\n\n9. Limitation of Liability\n\nTo the extent permitted under Law, Modlishka is provided under an AS-IS basis. The Modlishka Team shall never, and without any limit, be liable for any damage, cost, expense or any other payment incurred as a result of Modlishka's actions, failure, bugs and/or any other interaction between Modlishka and end-equipment, computers, other software or any 3rd party, end-equipment, computer, people or services.\n\n10. Disclaimer\n\nRunning Modlishka against websites without prior mutual consent may be illegal in your country. The Modlishka Team accept no liability and are not responsible for any misuse or damage caused by Modlishka.\n\n11. Trademark\n\nThis License does not grant the use of the \"Modlishka\" trademark or the use of the Modlishka logo.\n\n\nNote:\n\nThis License is based on the \"WPScan\" License, with the consent of the WPScan Team.\nThis project is using MIT, BSD licensed libraries and libraries copyrighted by \"The Go Authors\" : \"Copyright (c) 2009 The Go Authors. All rights reserved.\"\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.3349609375,
          "content": "MAIN_FILE=main.go\nTEST_FILE=main_test.go\nBINARY_NAME=proxy\nBINARY_LINUX=$(BINARY_NAME)_linux\nBINARY_WINDOWS=$(BINARY_NAME)_windows\nBINARY_BSD=$(BINARY_NAME)_freebsd\n\nGO=go\nGOBUILD=$(GO) build\nGOCLEAN=$(GO) clean\nGOTEST=$(GO) test\nGOGET=$(GO) get\n\n.DEFAULT_GOAL := all\n.PHONY: test\n\nDIST_DIR=dist\nTEST_DIR=\nall: test build\nbuild:\n\t$(GOBUILD) -ldflags \"-s -w\" -o $(DIST_DIR)/$(BINARY_NAME)   $(MAIN_FILE)\ntest:\n\t$(GOTEST) -v $(MAIN_FILE) $(TEST_FILE)\nclean:\n\t$(GOCLEAN)\n\trm -f $(DIST_DIR)/$(BINARY_NAME)\n\trm -f $(DIST_DIR)/$(BINARY_LINUX)\n\trm -f $(DIST_DIR)/$(BINARY_WINDOWS)\n\trm -f $(DIST_DIR)/$(BINARY_BSD)\n\ndeps:\n\t$(GOGET) ./..\n\n\nbuild_linux: test linux\nbuild_linux_xgo: test linux\nbuild_windows: test windows\nbuild_windows_xgo: test windows\nbuild_freebsd: test freebsd\n\nlinux:\n\tGOOS=linux GOARCH=amd64 $(GOBUILD) -ldflags \"-s -w\" -o $(DIST_DIR)/$(BINARY_LINUX)  $(MAIN_FILE)\n\nwindows:\n\tGOOS=windows GOARCH=amd64 $(GOBUILD) -ldflags \"-s -w\" -o $(DIST_DIR)/$(BINARY_WINDOWS)  $(MAIN_FILE)\n\nfreebsd:\n\tGOOS=freebsd GOARCH=amd64 $(GOBUILD) -ldflags \"-s -w\" -o $(DIST_DIR)/$(BINARY_BSD)  $(MAIN_FILE)\n\nlinux_amd64_xgo:\n\txgo --targets=linux/amd64  --dest $(DIST_DIR)/ ./\n\nlinux_386_xgo:\n\txgo --targets=linux/386  --dest $(DIST_DIR)/ ./\n\nwindows_xgo:\n\txgo --targets=windows/amd64  --dest $(DIST_DIR)/ ./\n\nfreebsd_xgo:\n\txgo --targets=freebsd/amd64  --dest $(DIST_DIR)/ ./\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.7509765625,
          "content": "# ..Modlishka..\n\nModlishka is a powerful and flexible HTTP reverse proxy. It implements an entirely new and interesting approach of handling browser-based HTTP traffic flow, which allows it to transparently proxy multi-domain destination traffic, both TLS and non-TLS, over a single domain, without a requirement of installing any additional certificate on the client. What exactly does this mean? In short, it simply has a lot of potential, that can be used in many use case scenarios...\n\nFrom the security perspective, Modlishka can be currently used to:\n-\tSupport ethical phishing penetration tests with a transparent and automated reverse proxy component that has a universal 2FA “bypass” support.\n-  Wrap legacy websites with TLS layer, confuse crawler bots and automated scanners, etc.\n\n\nModlishka was written as an attempt to overcome standard reverse proxy limitations and as a personal challenge to see what is possible with sufficient motivation and a bit of extra research time. \nThe achieved results appeared to be very interesting and the tool was initially released and later updated with an aim to:\n- Highlight currently used two factor authentication ([2FA](https://blog.duszynski.eu/phishing-ng-bypassing-2fa-with-modlishka/)) scheme weaknesses, so adequate security solutions can be created and implemented by the industry.\n- Support other projects that could benefit from a universal and transparent reverse proxy.\n- Raise community awareness about modern phishing techniques and strategies and support penetration testers in their daily work.\n\n\nModlishka was primarily written for security related tasks. Nevertheless, it can be helpful in other, non-security related, usage scenarios.\n\nFeatures\n--------\n\nKey features of Modlishka include:\n\n**General:**\n-   Point-and-click HTTP and HTTPS reverse proxying of an arbitrary domain/s.\n-   Full control of \"cross\" origin TLS traffic flow from your users browsers (without a requirement of installing any additional certificate on the client).\n-   Easy and fast configuration through command line options and JSON configuration files.\n-   Pattern based JavaScript payload injection.\n-   Wrapping websites with an extra \"security\": TLS wrapping, authentication, relevant security headers, etc. \n-   Stripping websites of all encryption and security headers (back to 90's MITM style). \n-   Stateless design. Can be scaled up easily to handle an arbitrary amount of traffic  - e.g. through a DNS load balancer.\n-   Can be extended easily with your ideas through modular plugins.\n-   Automatic test TLS certificate generation plugin for the proxy domain (requires a self-signed CA certificate)\n-   Written in Go, so it works basically on all platforms and architectures: Windows, OSX, Linux, BSD supported...\n\n**Security related:**\n-  Support for majority of 2FA authentication schemes (out of the box).\n-   Practical implementation of the \"[Client Domain Hooking](https://blog.duszynski.eu/client-domain-hooking-in-practice/)\" attack. Supported with a diagnostic plugin.\n-  User credential harvesting (with context based on URL parameter passed identifiers).\n-  Web panel plugin with a summary of automatically collected credentials and one-click user session impersonation module (proof-of-concept/beta).\n-  No website templates (just point Modlishka to the target domain - in most cases, it will be handled automatically without any additional manual configuration).\n\n\nProxying In Action (2FA bypass)\n------\n_\"A picture is worth a thousand words\":_\n\nModlishka in action against an example two factor authentication scheme (SMS based bypass proof-of-concept)  :\n\n[https://vimeo.com/308709275](https://vimeo.com/308709275)\n\nInstallation\n------------\n\nLatest source code version can be fetched from [here](https://github.com/drk1wi/modlishka/zipball/master) (zip) or [here](https://github.com/drk1wi/modlishka/tarball/master) (tar).\n\n\n\nFetch the code with _'go install'_ :\n\n    $ go install github.com/drk1wi/Modlishka@latest\n\nCompile manually:\n\n    $ git clone https://github.com/drk1wi/Modlishka.git\n    $ cd Modlishka\n    $ make\n    \n------\n\n![alt text](https://github.com/drk1wi/assets/raw/master/0876a672f771046e833f2242f6be5d3cf01519efdbb9dad0e1ed2d33e33fecbc.png)\n\n    # ./dist/proxy -h\n  \n    \n    Usage of ./dist/proxy:\n          \n      -cert string\n        \tbase64 encoded TLS certificate\n      \n      -certKey string\n        \tbase64 encoded TLS certificate key\n      \n      -certPool string\n        \tbase64 encoded Certification Authority certificate\n      \n      -config string\n        \tJSON configuration file. Convenient instead of using command line switches.\n          \n      -controlCreds string\n          Username and password to protect the credentials page.  user:pass format\n          \n      -controlURL string\n          URL to view captured credentials and settings. (default \"SayHello2Modlishka\")\n          \n      -credParams string\n          \tCredential regexp with matching groups. e.g. : base64(username_regex),base64(password_regex)\n\n      -debug\n        \tPrint debug information\n      \n      -disableSecurity\n        \tDisable proxy security features like anti-SSRF. 'Here be dragons' - disable at your own risk.\n      \n      -dynamicMode\n          \tEnable dynamic mode for 'Client Domain Hooking'\n      \n      -forceHTTP\n         \tStrip all TLS from the traffic and proxy through HTTP only\n    \n      -forceHTTPS\n         \tStrip all clear-text from the traffic and proxy through HTTPS only\n     \n      -jsRules string\n        \tComma separated list of URL patterns and JS base64 encoded payloads that will be injected - e.g.: target.tld:base64(alert(1)),..,etc\n      \n      -listeningAddress string\n        \tListening address - e.g.: 0.0.0.0  (default \"127.0.0.1\")\n      \n      -log string\n        \tLocal file to which fetched requests will be written (appended)\n      \n      -plugins string\n        \tComma seperated list of enabled plugin names (default \"all\")\n      \n      -proxyAddress string\n    \t    Proxy that should be used (socks/https/http) - e.g.: http://127.0.0.1:8080 \n         \n      -proxyDomain string\n        \tProxy domain name that will be used - e.g.: proxy.tld\n      \n      -postOnly\n        \tLog only HTTP POST requests\n      \n      -rules string\n          \tComma separated list of 'string' patterns and their replacements - e.g.: base64(new):base64(old),base64(newer):base64(older)\n\n      -target string\n        \tTarget domain name  - e.g.: target.tld\n         \n      -targetRes string\n        \tComma separated list of domains that were not translated automatically. Use this to force domain translation - e.g.: static.target.tld \n      \n      -terminateTriggers string\n        \tSession termination: Comma separated list of URLs from target's origin which will trigger session termination\n        \t\t\n      -terminateUrl string\n        \tURL to which a client will be redirected after Session Termination rules trigger\n      \n      -trackingCookie string\n        \tName of the HTTP cookie used to track the client (default \"id\")\n      \n      -trackingParam string\n        \tName of the HTTP parameter used to track the client (default \"id\")\n\n\nCommercial Usage\n-------\nModlishka is licensed under [this License](https://raw.githubusercontent.com/drk1wi/Modlishka/master/LICENSE). \n\nFor commercial, legitimate applications, please contact the author for the appropriate licensing arrangements.\n\nCredits \n-------\nAuthor: Modlishka was designed and implemented by Piotr Duszyński ([@drk1wi](https://twitter.com/drk1wi)). All rights reserved.\n\nSee the list of [contributors](https://github.com/drk1wi/Modlishka/graphs/contributors) who participated in this project.\n\n* sentence copied directly from another project .\n\nDisclaimer\n----------\nThis tool is made only for educational purposes and can be used in legitimate penetration tests or research only. Author does not take any responsibility for any actions taken by its users.\n\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.689453125,
          "content": "module github.com/drk1wi/Modlishka\n\ngo 1.21\n\nrequire (\n\tgithub.com/cespare/go-smaz v1.0.0\n\tgithub.com/dsnet/compress v0.0.1\n\tgithub.com/manifoldco/go-base32 v1.0.4\n\tgithub.com/miekg/dns v1.1.56\n\tgithub.com/tidwall/buntdb v1.3.0\n\tgolang.org/x/net v0.17.0\n)\n\nrequire (\n\tgithub.com/tidwall/btree v1.4.2 // indirect\n\tgithub.com/tidwall/gjson v1.14.3 // indirect\n\tgithub.com/tidwall/grect v0.1.4 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.0 // indirect\n\tgithub.com/tidwall/rtred v0.1.2 // indirect\n\tgithub.com/tidwall/tinyqueue v0.1.1 // indirect\n\tgolang.org/x/mod v0.12.0 // indirect\n\tgolang.org/x/sys v0.13.0 // indirect\n\tgolang.org/x/tools v0.13.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.5205078125,
          "content": "github.com/cespare/go-smaz v1.0.0 h1:CUrrqIzakjINfWkdyNrVhtDKcGmdKkdB9AW7ke5nJ+M=\ngithub.com/cespare/go-smaz v1.0.0/go.mod h1:h77Hd4Dz/EPofhYvhkSuEyM0+6vyP3ckmSoBxTcKyxk=\ngithub.com/dsnet/compress v0.0.1 h1:PlZu0n3Tuv04TzpfPbrnI0HW/YwodEXDS+oPKahKF0Q=\ngithub.com/dsnet/compress v0.0.1/go.mod h1:Aw8dCMJ7RioblQeTqt88akK31OvO8Dhf5JflhBbQEHo=\ngithub.com/dsnet/golib v0.0.0-20171103203638-1ea166775780/go.mod h1:Lj+Z9rebOhdfkVLjJ8T6VcRQv3SXugXy999NBtR9aFY=\ngithub.com/klauspost/compress v1.4.1/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=\ngithub.com/klauspost/cpuid v1.2.0/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=\ngithub.com/manifoldco/go-base32 v1.0.4 h1:lnBhqi+F1C4+PETGMX4Lf4vvkFr4cejbYm3DVHiYzKU=\ngithub.com/manifoldco/go-base32 v1.0.4/go.mod h1:GA524Bo+DrbSK/IJdfRINdQznHPQXwf0pDD3pkHJ6zo=\ngithub.com/miekg/dns v1.1.56 h1:5imZaSeoRNvpM9SzWNhEcP9QliKiz20/dA2QabIGVnE=\ngithub.com/miekg/dns v1.1.56/go.mod h1:cRm6Oo2C8TY9ZS/TqsSrseAcncm74lfK5G+ikN2SWWY=\ngithub.com/tidwall/assert v0.1.0 h1:aWcKyRBUAdLoVebxo95N7+YZVTFF/ASTr7BN4sLP6XI=\ngithub.com/tidwall/assert v0.1.0/go.mod h1:QLYtGyeqse53vuELQheYl9dngGCJQ+mTtlxcktb+Kj8=\ngithub.com/tidwall/btree v1.4.2 h1:PpkaieETJMUxYNADsjgtNRcERX7mGc/GP2zp/r5FM3g=\ngithub.com/tidwall/btree v1.4.2/go.mod h1:LGm8L/DZjPLmeWGjv5kFrY8dL4uVhMmzmmLYmsObdKE=\ngithub.com/tidwall/buntdb v1.3.0 h1:gdhWO+/YwoB2qZMeAU9JcWWsHSYU3OvcieYgFRS0zwA=\ngithub.com/tidwall/buntdb v1.3.0/go.mod h1:lZZrZUWzlyDJKlLQ6DKAy53LnG7m5kHyrEHvvcDmBpU=\ngithub.com/tidwall/gjson v1.12.1/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/gjson v1.14.3 h1:9jvXn7olKEHU1S9vwoMGliaT8jq1vJ7IH/n9zD9Dnlw=\ngithub.com/tidwall/gjson v1.14.3/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/grect v0.1.4 h1:dA3oIgNgWdSspFzn1kS4S/RDpZFLrIxAZOdJKjYapOg=\ngithub.com/tidwall/grect v0.1.4/go.mod h1:9FBsaYRaR0Tcy4UwefBX/UDcDcDy9V5jUcxHzv2jd5Q=\ngithub.com/tidwall/lotsa v1.0.2 h1:dNVBH5MErdaQ/xd9s769R31/n2dXavsQ0Yf4TMEHHw8=\ngithub.com/tidwall/lotsa v1.0.2/go.mod h1:X6NiU+4yHA3fE3Puvpnn1XMDrFZrE9JO2/w+UMuqgR8=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.2.0 h1:RWIZEg2iJ8/g6fDDYzMpobmaoGh5OLl4AXtGUGPcqCs=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/rtred v0.1.2 h1:exmoQtOLvDoO8ud++6LwVsAMTu0KPzLTUrMln8u1yu8=\ngithub.com/tidwall/rtred v0.1.2/go.mod h1:hd69WNXQ5RP9vHd7dqekAz+RIdtfBogmglkZSRxCHFQ=\ngithub.com/tidwall/tinyqueue v0.1.1 h1:SpNEvEggbpyN5DIReaJ2/1ndroY8iyEGxPYxoSaymYE=\ngithub.com/tidwall/tinyqueue v0.1.1/go.mod h1:O/QNHwrnjqr6IHItYrzoHAKYhBkLI67Q096fQP5zMYw=\ngithub.com/ulikunitz/xz v0.5.6/go.mod h1:2bypXElzHzzJZwzH67Y6wb67pO62Rzfn7BSiF4ABRW8=\ngolang.org/x/mod v0.12.0 h1:rmsUpXtvNzj340zd98LZ4KntptpfRHwpFOHG188oHXc=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.17.0 h1:pVaXccu2ozPjCXewfr1S7xza/zcXTity9cCdXQYSjIM=\ngolang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=\ngolang.org/x/sync v0.3.0 h1:ftCYgMx6zT/asHUrPw8BLLscYtGznsLAnjq5RH9P66E=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sys v0.13.0 h1:Af8nKPmuFypiUBjVoU9V20FiaFXOcuZI21p0ycVYYGE=\ngolang.org/x/sys v0.13.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/tools v0.13.0 h1:Iey4qkscZuv0VvIt8E0neZjtPVQFSc870HQ448QgEmQ=\ngolang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\n"
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 1.6123046875,
          "content": "/**\n\n    \"Modlishka\" Reverse Proxy.\n\n    Copyright 2018 (C) Piotr Duszyński piotr[at]duszynski.eu. All rights reserved.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n    You should have received a copy of the Modlishka License along with this program.\n\n**/\n\npackage main\n\nimport (\n\t\"github.com/drk1wi/Modlishka/config\"\n\t\"github.com/drk1wi/Modlishka/core\"\n\t\"github.com/drk1wi/Modlishka/log\"\n\t\"github.com/drk1wi/Modlishka/plugin\"\n\t\"github.com/drk1wi/Modlishka/runtime\"\n)\n\ntype Configuration struct{ config.Options }\n\n// Initializes the logging object\n\nfunc (c *Configuration) initLogging() {\n\t//\n\t// Logger\n\t//\n\tlog.WithColors = true\n\n\tif *c.Debug == true {\n\t\tlog.MinLevel = log.DEBUG\n\t} else {\n\t\tlog.MinLevel = log.INFO\n\t}\n\n\tlogGET := true\n\tif *c.LogPostOnly {\n\t\tlogGET = false\n\t}\n\n\tlog.Options = log.LoggingOptions{\n\t\tGET:      logGET,\n\t\tPOST:     *c.LogPostOnly,\n\t\tLogRequestPath: *c.LogRequestFile,\n\n\t}\n}\n\nfunc main() {\n\n\tconf := Configuration{\n\t\tconfig.ParseConfiguration(),\n\t}\n\n\t// Initialize log\n\tconf.initLogging()\n\n\t// Set up runtime plugin config\n\tplugin.SetPluginRuntimeConfig(conf.Options)\n\n\t// Initialize plugins\n\tplugin.Enable(conf.Options)\n\n\t//Check if we have all of the required information to start proxy'ing requests.\n\tconf.VerifyConfiguration()\n\n\t// Set up runtime core config\n\truntime.SetCoreRuntimeConfig(conf.Options)\n\n\t// Set up runtime server config\n\tcore.SetServerRuntimeConfig(conf.Options)\n\n\n\t// Set up regexp upfront\n\truntime.MakeRegexes()\n\n\t// go go go\n\tcore.RunServer()\n\n}\n"
        },
        {
          "name": "main_test.go",
          "type": "blob",
          "size": 19.7724609375,
          "content": "/**\n\n    \"Modlishka\" Reverse Proxy.\n\n    Copyright 2018 (C) Piotr Duszyński piotr[at]duszynski.eu. All rights reserved.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n    You should have received a copy of the Modlishka License along with this program.\n\n**/\n\npackage main\n\nimport (\n\t\"github.com/drk1wi/Modlishka/config\"\n\t\"github.com/drk1wi/Modlishka/log\"\n\t\"github.com/drk1wi/Modlishka/plugin\"\n\t\"github.com/drk1wi/Modlishka/runtime\"\n\t\"math/rand\"\n\t\"os\"\n\t\"reflect\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/drk1wi/Modlishka/core\"\n\n\t\"golang.org/x/net/publicsuffix\"\n)\n\nvar letters = []rune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\nfunc init() {\n\truntime.MakeRegexes()\n\t//var f = false\n\t//config.C.Debug = &f\n}\nfunc randSeq(n int) string {\n\tb := make([]rune, n)\n\tfor i := range b {\n\t\tb[i] = letters[rand.Intn(len(letters))]\n\t}\n\treturn string(b)\n}\n\nvar TestsTranslatePhishtoURL = []struct {\n\tinput    string // input\n\texpected string // expected result\n}{\n\t{\"uc45bnjw1b6gyp4z7ab0.google.dev\", \"accounts.youtube.com\"},\n\t{\"www.google.dev\", \"www.google.com\"},\n\t{\"www.google.com\", \"www.google.com\"},\n\t{\"www.google.com.google.dev\", \"www.google.com.google.com\"},\n\n}\n\nvar TestsTranslateURLtoPhish = []struct {\n\tinput    string // input\n\texpected string // expected result\n}{\n\t{\"assets-cdn.github.com\", \"assets-cdn.phish-github.dev\"},\n\t{\"accounts.youtube.com\", \"uc45bnjw1b6gyp4z7ab0.phish-github.dev\"},\n\t{\"github.com\", \"phish-github.dev\"},\n\n}\n\n\nvar TestsDynamicTranslateURLHost = []struct {\n\tinput    string // input\n\texpected string // expected result\n}{\n\t{\"assets-cdn.github.com\", \"assets-cdn.github.com\"},\n\t{\"accounts.youtube.com\", \"accounts.youtube.com\"},\n\t{\"github.com\", \"github.com\"},\n}\n\nfunc TestEncodeDecode(t *testing.T) {\n\n\tinput := randSeq(20)\n\tencoded, err := runtime.EncodeSubdomain(input,false)\n\tif err != nil {\n\t\tt.Errorf(\"TestEncodeDecode(%s):  error %s \", \"encode\", err.Error())\n\t}\n\n\tdecoded,_,_, err := runtime.DecodeSubdomain(encoded)\n\tif err != nil {\n\t\tt.Errorf(\"TestEncodeDecode(%s):  error %s \", \"decode\", err.Error())\n\t}\n\n\tif input != decoded {\n\t\tt.Errorf(\"TestEncodeDecode(%s): expected %s, actual %s\", input, input, decoded)\n\t}\n\n}\n\nfunc TestRegex(t *testing.T) {\n\n\truntime.RC4_KEY = `7afa263b3d6efb65dfde80875cf3883cdc4da6cef9b64034a5ba895317e98e39`\n\truntime.ProxyDomain = \"google.dev\"\n\truntime.TopLevelDomain = \"google.com\"\n\truntime.MakeRegexes()\n\n}\n\nfunc TestTranslatePhishtoURL(t *testing.T) {\n\n\truntime.RC4_KEY = `7afa263b3d6efb65dfde80875cf3883cdc4da6cef9b64034a5ba895317e98e39`\n\ttarget := \"google.com\"\n\tphishing := \"google.dev\"\n\truntime.ProxyDomain = phishing\n\truntime.TopLevelDomain = target\n\truntime.MakeRegexes()\n\n\tdomain, _ := publicsuffix.EffectiveTLDPlusOne(target)\n\truntime.TopLevelDomain = strings.Replace(domain, \"https://\", \"\", -1)\n\truntime.TopLevelDomain = strings.Replace(runtime.TopLevelDomain, \"http://\", \"\", -1)\n\n\truntime.ProxyDomain = string(phishing)\n\n\t// core.Logger = core.InitializeLogger(*debugInfo)\n\n\tfor _, tt := range TestsTranslatePhishtoURL {\n\t\tactual := runtime.PhishURLToRealURL(tt.input)\n\t\tif actual != tt.expected {\n\t\t\tt.Errorf(\"TestsTranslatePhishtoURL(%s): expected %s, actual %s\", tt.input, tt.expected, actual)\n\t\t}\n\t}\n\n\n\n\n}\n\nfunc TestDynamicTranslateURLHost(t *testing.T) {\n\n\t// configure\n\truntime.RC4_KEY = `7afa263b3d6efb65dfde80875cf3883cdc4da6cef9b64034a5ba895317e98e39`\n\ttarget := \"github.com\"\n\tphishing := \"phish-github.dev\"\n\truntime.ProxyDomain = phishing\n\truntime.TopLevelDomain = target\n\truntime.MakeRegexes()\n\tdomain, _ := publicsuffix.EffectiveTLDPlusOne(target)\n\truntime.TopLevelDomain = strings.Replace(domain, \"https://\", \"\", -1)\n\truntime.TopLevelDomain = strings.Replace(runtime.TopLevelDomain, \"http://\", \"\", -1)\n\truntime.ProxyDomain = string(phishing)\n\truntime.DynamicMode = true\n\t//\n\n\n\tfor _, tt := range TestsDynamicTranslateURLHost {\n\t\tactual,_,_ := runtime.TranslateRequestHost(tt.input)\n\t\tif actual != tt.expected {\n\t\t\tt.Errorf(\"TestsTranslateURLtoPhish(%s): expected %s, actual %s\", tt.input, tt.expected, actual)\n\t\t}\n\t}\n\n}\n\nfunc TestTranslateURLtoPhish(t *testing.T) {\n\n\truntime.RC4_KEY = `7afa263b3d6efb65dfde80875cf3883cdc4da6cef9b64034a5ba895317e98e39`\n\ttarget := \"github.com\"\n\tphishing := \"phish-github.dev\"\n\truntime.ProxyDomain = phishing\n\truntime.TopLevelDomain = target\n\truntime.MakeRegexes()\n\n\tdomain, _ := publicsuffix.EffectiveTLDPlusOne(target)\n\truntime.TopLevelDomain = strings.Replace(domain, \"https://\", \"\", -1)\n\truntime.TopLevelDomain = strings.Replace(runtime.TopLevelDomain, \"http://\", \"\", -1)\n\n\truntime.ProxyDomain = string(phishing)\n\n\t// core.Logger = core.InitializeLogger(*debugInfo)\n\n\tfor _, tt := range TestsTranslateURLtoPhish {\n\t\tactual := runtime.RealURLtoPhish(tt.input)\n\t\tif actual != tt.expected {\n\t\t\tt.Errorf(\"TestsTranslateURLtoPhish(%s): expected %s, actual %s\", tt.input, tt.expected, actual)\n\t\t}\n\t}\n\n}\n\nfunc getFieldString(v *config.Options, field string) string {\n\tout := reflect.ValueOf(v).Elem().FieldByName(field)\n\treturn out.Elem().String()\n}\n\nfunc getFieldBool(v *config.Options, field string) bool {\n\tout := reflect.ValueOf(v).Elem().FieldByName(field)\n\treturn out.Elem().Bool()\n}\n\nfunc TestCmdLineFlags(t *testing.T) {\n\n\tin := map[string]string{\n\t\t\"ProxyDomain\":       \"https://google.dev\",\n\t\t\"ListeningAddress\":     \"0.0.0.0\",\n\t\t\"ProxyAddress\":          \"http://127.0.0.1:8080\",\n\t\t\"Target\":               \"google.com\",\n\t\t\"TargetRes\":            \"test.google.com,test1.google.com\",\n\t\t\"TerminateTriggers\":    \"terminate.google.dev,terminate2.google.dev\",\n\t\t\"TerminateRedirectUrl\": \"redirect.google.com\",\n\t\t\"TargetRules\":          \"eHh4:eXl5\", //xxx:yyy\n\t\t\"TrackingCookie\":       \"id\",\n\t\t\"TrackingParam\":        \"id\",\n\t\t\"LogRequestFile\":              \"logfile\",\n\t\t\"Plugins\":              \"plugin1,plugin2,plugin2\",\n\t\t}\n\n\tin_bool := map[string]bool{\n\t\t\"Debug\":           true,\n\t\t\"DisableSecurity\": true,\n\t\t\"LogPostOnly\":     true,\n\t\t\"ForceHTTP\":\t   true,\n\t\t\"ForceHTTPS\":\t   true,\n\n\t}\n\n\t//encodedCert := base64.StdEncoding.EncodeToString([]byte(in[\"TLSCertificate\"]))\n\t//encodedKey := base64.StdEncoding.EncodeToString([]byte(in[\"TLSKey\"]))\n\n\targs := \"   -proxyDomain \" + in[\"ProxyDomain\"] +\n\t\t\" -proxyAddress \" +in[\"ProxyAddress\"] +\n\t\t\" -target \" + in[\"Target\"] +\n\t\t\" -listeningAddress \" + in[\"ListeningAddress\"] +\n\t\t\" -targetRes \" + in[\"TargetRes\"] +\n\t\t\" -terminateTriggers \" + in[\"TerminateTriggers\"] +\n\t\t\" -terminateUrl \" + in[\"TerminateRedirectUrl\"] +\n\t\t\" -rules \" + in[\"TargetRules\"] +\n\t\t\" -trackingCookie \" + in[\"TrackingCookie\"] +\n\t\t\" -trackingParam \" + in[\"TrackingParam\"] +\n\t\t\" -log \" + in[\"LogRequestFile\"] +\n\t\t\" -plugins \" + in[\"Plugins\"]\n\n\tif in_bool[\"Debug\"] {\n\t\targs += \" -debug \"\n\t}\n\n\tif in_bool[\"ForceHTTP\"] {\n\t\targs += \" -forceHTTP \"\n\t}\n\n\tif in_bool[\"ForceHTTPS\"] {\n\t\targs += \" -forceHTTPS \"\n\t}\n\n\n\tif in_bool[\"DisableSecurity\"] {\n\t\targs += \" -disableSecurity \"\n\t}\n\n\tif in_bool[\"LogPostOnly\"] {\n\t\targs += \" -postOnly \"\n\t}\n\n\targ := []string{os.Args[0]}\n\tfor _, v := range strings.Fields(args) {\n\t\targ = append(arg, v)\n\n\t}\n\n\tos.Args = arg\n\n\toptions := config.ParseConfiguration()\n\n\tconf := Configuration{\n\t\toptions,\n\t}\n\n\tfor k, _ := range in {\n\n\t\tif getFieldString(&options, k) != in[k] {\n\t\t\tt.Errorf(\"TestCmdLineFlags ParseConfiguration (%s): expected %s, actual %s\", k, in[k], getFieldString(&options, k))\n\t\t}\n\t}\n\n\tfor k, _ := range in_bool {\n\n\t\tif getFieldBool(&options, k) != in_bool[k] {\n\t\t\tt.Errorf(\"TestCmdLineFlags ParseConfiguration (%s): expected %t, actual %t\", k, in_bool[k], getFieldBool(&options, k))\n\t\t}\n\t}\n\n\t// Set up runtime core config\n\truntime.SetCoreRuntimeConfig(conf.Options)\n\n\tif getFieldString(&options, \"ProxyDomain\") != runtime.ProxyDomain {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"ProxyDomain\", getFieldString(&options, \"ProxyDomain\"), runtime.ProxyDomain)\n\t}\n\n\tif getFieldString(&options, \"TrackingCookie\") != runtime.TrackingCookie {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"TrackingCookie\", getFieldString(&options, \"TrackingCookie\"), runtime.TrackingCookie)\n\n\t}\n\n\tif getFieldString(&options, \"TrackingParam\") != runtime.TrackingParam {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"TrackingParam\", getFieldString(&options, \"TrackingParam\"), runtime.TrackingParam)\n\n\t}\n\n\tif \"google.com\" != runtime.TopLevelDomain {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"TopLevelDomain\", \"google.com\", runtime.TopLevelDomain)\n\n\t}\n\n\tif \"yyy\" != runtime.ReplaceStrings[\"xxx\"] {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"ReplaceStrings\", \"xxx\", runtime.ReplaceStrings[\"xxx\"])\n\n\t}\n\n\tif strings.Join(runtime.TargetResources, \",\") != getFieldString(&options, \"TargetRes\") {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"TargetResources\", getFieldString(&options, \"TargetRes\"), strings.Join(runtime.TargetResources, \",\"))\n\n\t}\n\n\tif strings.Join(runtime.TerminateTriggers, \",\") != getFieldString(&options, \"TerminateTriggers\") {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"TerminateTriggers\", getFieldString(&options, \"TerminateRedirectUrl\"), strings.Join(runtime.TerminateTriggers, \",\"))\n\n\t}\n\n\t// Set up runtime server config\n\tcore.SetServerRuntimeConfig(conf.Options)\n\n\tif in[\"TLSCertificate\"] != *core.ServerRuntimeConfig.TLSCertificate {\n\t\tt.Errorf(\"TestCmdLineFlags SetServerRuntimeConfig (%s): expected %s, actual %s\", \"TLSCertificate\", in[\"TLSCertificate\"], *core.ServerRuntimeConfig.TLSCertificate)\n\n\t}\n\n\tif in[\"TLSKey\"] != *core.ServerRuntimeConfig.TLSKey {\n\t\tt.Errorf(\"TestCmdLineFlags SetServerRuntimeConfig (%s): expected %s, actual %s\", \"TLSKey\", in[\"TLSKey\"], *core.ServerRuntimeConfig.TLSKey)\n\n\t}\n\n\t// Set up runtime plugin config\n\tplugin.SetPluginRuntimeConfig(conf.Options)\n\n}\n\nvar jsonfile1 = `{\n    \"proxyDomain\": \"https://google.dev\",\n    \"listeningAddress\": \"0.0.0.0\",\n    \"target\": \"google.com\",\n    \"targetResources\": \"test.google.com,test1.google.com\",\n    \"targetRules\": \"eHh4:eXl5\",\n    \"terminateTriggers\": \"terminate.google.dev,terminate2.google.dev\",\n    \"terminateUrl\": \"redirect.google.com\",\n    \"trackingCookie\": \"id\",\n    \"trackingParam\": \"id\",\n    \"debug\": true,\n    \"logPostOnly\": false,\n    \"disableSecurity\": false,\n    \"log\": \"logfile\",\n    \"plugins\": \"plugin1,plugin2,plugin2\",\n    \"cert\": \"-----BEGIN CERTIFICATE-----\\nMIIDEDCCAfigAwIBAgIEKfekOzANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQKEwdB\\nY21lIENvMB4XDTE4MTIwMjIwMTc1NloXDTI0MDUwNzE5MTc1NlowPTEOMAwGA1UE\\nBhMFRWFydGgxFjAUBgNVBAoTDU1vdGhlciBOYXR1cmUxEzARBgNVBAMTCmdvb2ds\\nZS5kZXYwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBzp66XCX6iPGK\\n3DSy2ZcvcyDzL263U6CGHqwkFGySr8J3qrNeh4NZcnlYoAnobUlna9OCUPXFqA4/\\nHjL6BuBsrLE//8gnrqP5Bga0ZYaTcq00EQuYxEpNuHBPsX0VBev/5qmJGa20Rd2O\\nXajNGyK5S2eJhSOEDYY14tIVocPD9DTXsZ8TkVUxXZ8UqEaBDPp23OHL/HAFY/rd\\nOybt1e9SZWC2bqsFjeoVM/xHBpuNDfhjivHI5AMNJGYvOxGtiqfOVUFNDc3zE1TC\\nnBCpsesrpG4jB/6Q1yWdYogy5/7aUtM69GiXDDD4wG3l5MMxGhVFaspfKSc28IFG\\nfJjMxH37AgMBAAGjQzBBMAwGA1UdEwEB/wQCMAAwDAYDVR0OBAUEAwECAzAjBgNV\\nHREEHDAaggpnb29nbGUuZGV2ggwqLmdvb2dsZS5kZXYwDQYJKoZIhvcNAQELBQAD\\nggEBAKSaZ04Q+Pv00PpugEi3FQtQOBz6JK/Exz8BOW6zOeY0NhfGrXjfa9rTqGdx\\n0yxU1LQZhcNrdLKgIN3GGY/lYN0GKqBJFqmyy9zRxdob19Lb5HcL8ZY4fvFdrXBK\\nI6D8eJhRmVY2Mr+v8fc2mDYg7q/kmgrcAtANtx3KC5QLtIWRxWn6iu+NO7FDKcsZ\\nmJmHRikPR4PrhKyzuU9S5llUi7MvkHyZ+Daxj4pCvigEAPSVRepmdF96rf63fLWb\\n0t0Uc01pFkyGFOZEBo/XkdOhWE4MRiYT0wFyGZLwJ9YOWRT1KwYsWedEUD+w1Elt\\nUp4TXBYFCvw7HY+CQI9HKHh1GkM=\\n-----END CERTIFICATE-----\\n\",\n    \"certKey\": \"-----BEGIN PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAwc6eulwl+ojxitw0stmXL3Mg8y9ut1Oghh6sJBRskq/Cd6qz\\nXoeDWXJ5WKAJ6G1JZ2vTglD1xagOPx4y+gbgbKyxP//IJ66j+QYGtGWGk3KtNBEL\\nmMRKTbhwT7F9FQXr/+apiRmttEXdjl2ozRsiuUtniYUjhA2GNeLSFaHDw/Q017Gf\\nE5FVMV2fFKhGgQz6dtzhy/xwBWP63Tsm7dXvUmVgtm6rBY3qFTP8RwabjQ34Y4rx\\nyOQDDSRmLzsRrYqnzlVBTQ3N8xNUwpwQqbHrK6RuIwf+kNclnWKIMuf+2lLTOvRo\\nlwww+MBt5eTDMRoVRWrKXyknNvCBRnyYzMR9+wIDAQABAoIBAQCj6+X3DA+XWxKp\\nd10fVMj5+i+JYLoNVy8zoWfJ0HiQjRY3burtbkLbeeZG3n3i1+S5E8s+ssldl6oN\\nGrbVINHbOSlmTyp03dKUwtMS67gqqFj06+HaIVQTboeX8DAyguK8e9UzP8Pa8SjW\\nzEME0AnLnYqCF1kVzPaSRzmX0E2rQz4ezJkMOUdjiH0OmMVLnezlrLr7w6Q8Swp3\\nfyD2hd8g3ieoPLYOEVxYA8AVERxAVdli8Jm6w/Xcng7UlMnA+RP6zXJzdZx1iY8S\\nNW9Yt/BlL34+3iHUt6lMUBa0SSzGxcgpBNU1/f5aAQZFGJIN7tJ1e8700jRTzvu+\\ntFz31D5RAoGBAOXc3N1MiMXD4Gz0aSfmzWYEuJkvBBCmLHBNV2aMa05F4bnF0oZf\\nEDLYKqqDxYqzzHuy1ySTKV1Z1P10hx+jbmZgQY6R8Uehc0TGnRnuz7AF9qDijjIY\\nGiAZ4HoW3GT4l0SBZfcdb2dJSIO/PEgWn4CCN9sjSD9OwGLM5hyKxWRzAoGBANfY\\nNDbj+aPg7hRbDFm4ZV1n+nwIGWq4M77/EuOPZcppfVrYl8EfCGcuoG+k8Wld2SoS\\nz2N4kT2mnowSFE5OW0hRBojhOyUOPR7hLx8VoOF8Ymjl4WFsahELvQuXP+1Apq7Q\\nZ0h+Gb2NkpRrgTJK8cUQf+8uIQM4SYpgAGw2dqZZAoGBANjdSoeDOJsVFXzWDwv1\\nRh4VIDBt2jD3BoAhh+8ZVffwGGnTyK67q6W8qmxbjBkzTx35ed9o9CK9qSRDN2TT\\nJUpzUAZ5jKEfIohltjyMQef5iFj7xlpewO8+Wrn1LZQZsWWRi6jcXYmd60tZNj9x\\nEKUGtjoKjJQl8X6FgCi3iEofAoGARYgoieY27UvwZi5OdDiqrsRoNLyHM5HTWZvi\\nAdyX9fS1pSZQ/K16j4K9vDlua3sIEj2tAWY9o5ahTI4mbHNhhJJVgJLN8sn7do8k\\nFudoxDrFmPU0/aVnJcaaR7mZplxFVdtc6kV1FVMd/SIEpKbv64O9MtexWtAvIJx8\\nhl+lKUECgYEAu9sAdc0pbzmdTeNterIScCXnclpANW1jsfCQvOv3qWqvU0uBreyd\\nhVW67M9XzMzn6baZ3jLi0RxmIkxnLwkfLUTpMcmQO+1WY77MkROXDBmDQ87sBIDP\\nluG0g5iz09m0QIt8nFUAZlogqgUXoMsBTtNk/jY4jpdTSzoh1kUeZIw=\\n-----END PRIVATE KEY-----\\n\",\n    \"certPool\": \"\"\n}`\n\nfunc TestJSONConfig(t *testing.T) {\n\n\tconfigFile, err := os.CreateTemp(\"\", \"\")\n\tif err != nil {\n\t\tlog.Fatalf(err.Error() + \" . Terminating.\")\n\t}\n\n\terr = os.WriteFile(configFile.Name(), []byte(jsonfile1), 0644)\n\tif err != nil {\n\t\tlog.Fatalf(err.Error() + \" . Terminating.\")\n\t}\n\n\tdefer os.Remove(configFile.Name())\n\n\tin := map[string]string{\n\t\t\"ProxyDomain\":       \"https://google.dev\",\n\t\t\"ListeningAddress\":     \"0.0.0.0\",\n\t\t\"Target\":               \"google.com\",\n\t\t\"TargetRes\":            \"test.google.com,test1.google.com\",\n\t\t\"TerminateTriggers\":    \"terminate.google.dev,terminate2.google.dev\",\n\t\t\"TerminateRedirectUrl\": \"redirect.google.com\",\n\t\t\"TargetRules\":          \"eHh4:eXl5\", //xxx:yyy\n\t\t\"TrackingCookie\":       \"id\",\n\t\t\"TrackingParam\":        \"id\",\n\t\t\"LogRequestFile\":              \"logfile\",\n\t\t\"Plugins\":              \"plugin1,plugin2,plugin2\",\n\t\t\"TLSCertificate\":       \"-----BEGIN CERTIFICATE-----\\nMIIDEDCCAfigAwIBAgIEKfekOzANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQKEwdB\\nY21lIENvMB4XDTE4MTIwMjIwMTc1NloXDTI0MDUwNzE5MTc1NlowPTEOMAwGA1UE\\nBhMFRWFydGgxFjAUBgNVBAoTDU1vdGhlciBOYXR1cmUxEzARBgNVBAMTCmdvb2ds\\nZS5kZXYwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBzp66XCX6iPGK\\n3DSy2ZcvcyDzL263U6CGHqwkFGySr8J3qrNeh4NZcnlYoAnobUlna9OCUPXFqA4/\\nHjL6BuBsrLE//8gnrqP5Bga0ZYaTcq00EQuYxEpNuHBPsX0VBev/5qmJGa20Rd2O\\nXajNGyK5S2eJhSOEDYY14tIVocPD9DTXsZ8TkVUxXZ8UqEaBDPp23OHL/HAFY/rd\\nOybt1e9SZWC2bqsFjeoVM/xHBpuNDfhjivHI5AMNJGYvOxGtiqfOVUFNDc3zE1TC\\nnBCpsesrpG4jB/6Q1yWdYogy5/7aUtM69GiXDDD4wG3l5MMxGhVFaspfKSc28IFG\\nfJjMxH37AgMBAAGjQzBBMAwGA1UdEwEB/wQCMAAwDAYDVR0OBAUEAwECAzAjBgNV\\nHREEHDAaggpnb29nbGUuZGV2ggwqLmdvb2dsZS5kZXYwDQYJKoZIhvcNAQELBQAD\\nggEBAKSaZ04Q+Pv00PpugEi3FQtQOBz6JK/Exz8BOW6zOeY0NhfGrXjfa9rTqGdx\\n0yxU1LQZhcNrdLKgIN3GGY/lYN0GKqBJFqmyy9zRxdob19Lb5HcL8ZY4fvFdrXBK\\nI6D8eJhRmVY2Mr+v8fc2mDYg7q/kmgrcAtANtx3KC5QLtIWRxWn6iu+NO7FDKcsZ\\nmJmHRikPR4PrhKyzuU9S5llUi7MvkHyZ+Daxj4pCvigEAPSVRepmdF96rf63fLWb\\n0t0Uc01pFkyGFOZEBo/XkdOhWE4MRiYT0wFyGZLwJ9YOWRT1KwYsWedEUD+w1Elt\\nUp4TXBYFCvw7HY+CQI9HKHh1GkM=\\n-----END CERTIFICATE-----\\n\",\n\t\t\"TLSKey\":               \"-----BEGIN PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAwc6eulwl+ojxitw0stmXL3Mg8y9ut1Oghh6sJBRskq/Cd6qz\\nXoeDWXJ5WKAJ6G1JZ2vTglD1xagOPx4y+gbgbKyxP//IJ66j+QYGtGWGk3KtNBEL\\nmMRKTbhwT7F9FQXr/+apiRmttEXdjl2ozRsiuUtniYUjhA2GNeLSFaHDw/Q017Gf\\nE5FVMV2fFKhGgQz6dtzhy/xwBWP63Tsm7dXvUmVgtm6rBY3qFTP8RwabjQ34Y4rx\\nyOQDDSRmLzsRrYqnzlVBTQ3N8xNUwpwQqbHrK6RuIwf+kNclnWKIMuf+2lLTOvRo\\nlwww+MBt5eTDMRoVRWrKXyknNvCBRnyYzMR9+wIDAQABAoIBAQCj6+X3DA+XWxKp\\nd10fVMj5+i+JYLoNVy8zoWfJ0HiQjRY3burtbkLbeeZG3n3i1+S5E8s+ssldl6oN\\nGrbVINHbOSlmTyp03dKUwtMS67gqqFj06+HaIVQTboeX8DAyguK8e9UzP8Pa8SjW\\nzEME0AnLnYqCF1kVzPaSRzmX0E2rQz4ezJkMOUdjiH0OmMVLnezlrLr7w6Q8Swp3\\nfyD2hd8g3ieoPLYOEVxYA8AVERxAVdli8Jm6w/Xcng7UlMnA+RP6zXJzdZx1iY8S\\nNW9Yt/BlL34+3iHUt6lMUBa0SSzGxcgpBNU1/f5aAQZFGJIN7tJ1e8700jRTzvu+\\ntFz31D5RAoGBAOXc3N1MiMXD4Gz0aSfmzWYEuJkvBBCmLHBNV2aMa05F4bnF0oZf\\nEDLYKqqDxYqzzHuy1ySTKV1Z1P10hx+jbmZgQY6R8Uehc0TGnRnuz7AF9qDijjIY\\nGiAZ4HoW3GT4l0SBZfcdb2dJSIO/PEgWn4CCN9sjSD9OwGLM5hyKxWRzAoGBANfY\\nNDbj+aPg7hRbDFm4ZV1n+nwIGWq4M77/EuOPZcppfVrYl8EfCGcuoG+k8Wld2SoS\\nz2N4kT2mnowSFE5OW0hRBojhOyUOPR7hLx8VoOF8Ymjl4WFsahELvQuXP+1Apq7Q\\nZ0h+Gb2NkpRrgTJK8cUQf+8uIQM4SYpgAGw2dqZZAoGBANjdSoeDOJsVFXzWDwv1\\nRh4VIDBt2jD3BoAhh+8ZVffwGGnTyK67q6W8qmxbjBkzTx35ed9o9CK9qSRDN2TT\\nJUpzUAZ5jKEfIohltjyMQef5iFj7xlpewO8+Wrn1LZQZsWWRi6jcXYmd60tZNj9x\\nEKUGtjoKjJQl8X6FgCi3iEofAoGARYgoieY27UvwZi5OdDiqrsRoNLyHM5HTWZvi\\nAdyX9fS1pSZQ/K16j4K9vDlua3sIEj2tAWY9o5ahTI4mbHNhhJJVgJLN8sn7do8k\\nFudoxDrFmPU0/aVnJcaaR7mZplxFVdtc6kV1FVMd/SIEpKbv64O9MtexWtAvIJx8\\nhl+lKUECgYEAu9sAdc0pbzmdTeNterIScCXnclpANW1jsfCQvOv3qWqvU0uBreyd\\nhVW67M9XzMzn6baZ3jLi0RxmIkxnLwkfLUTpMcmQO+1WY77MkROXDBmDQ87sBIDP\\nluG0g5iz09m0QIt8nFUAZlogqgUXoMsBTtNk/jY4jpdTSzoh1kUeZIw=\\n-----END PRIVATE KEY-----\\n\",\n\t}\n\n\tin_bool := map[string]bool{\n\t\t\"Debug\":           true,\n\t\t\"DisableSecurity\": false,\n\t\t\"LogPostOnly\":     false,\n\t}\n\n\targs := \"  -config \" + configFile.Name()\n\n\targ := []string{os.Args[0]}\n\tfor _, v := range strings.Fields(args) {\n\t\targ = append(arg, v)\n\n\t}\n\n\tos.Args = arg\n\n\toptions := config.ParseConfiguration()\n\n\tconf := Configuration{\n\t\toptions,\n\t}\n\n\tfor k, _ := range in {\n\n\t\tif getFieldString(&options, k) != in[k] {\n\t\t\tt.Errorf(\"TestCmdLineFlags ParseConfiguration (%s): expected %s, actual %s\", k, in[k], getFieldString(&options, k))\n\t\t}\n\t}\n\n\tfor k, _ := range in_bool {\n\n\t\tif getFieldBool(&options, k) != in_bool[k] {\n\t\t\tt.Errorf(\"TestCmdLineFlags ParseConfiguration (%s): expected %t, actual %t\", k, in_bool[k], getFieldBool(&options, k))\n\t\t}\n\t}\n\n\t// Set up runtime core config\n\truntime.SetCoreRuntimeConfig(conf.Options)\n\n\tif getFieldString(&options, \"ProxyDomain\") != runtime.ProxyDomain {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"ProxyDomain\", getFieldString(&options, \"ProxyDomain\"), runtime.ProxyDomain)\n\t}\n\n\tif getFieldString(&options, \"TrackingCookie\") != runtime.TrackingCookie {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"TrackingCookie\", getFieldString(&options, \"TrackingCookie\"), runtime.TrackingCookie)\n\n\t}\n\n\tif getFieldString(&options, \"TrackingParam\") != runtime.TrackingParam {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"TrackingParam\", getFieldString(&options, \"TrackingParam\"), runtime.TrackingParam)\n\n\t}\n\n\tif \"google.com\" != runtime.TopLevelDomain {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"TopLevelDomain\", \"google.com\", runtime.TopLevelDomain)\n\n\t}\n\n\tif \"yyy\" != runtime.ReplaceStrings[\"xxx\"] {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"ReplaceStrings\", \"xxx\", runtime.ReplaceStrings[\"xxx\"])\n\n\t}\n\n\tif strings.Join(runtime.TargetResources, \",\") != getFieldString(&options, \"TargetRes\") {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"TargetResources\", getFieldString(&options, \"TargetRes\"), strings.Join(runtime.TargetResources, \",\"))\n\n\t}\n\n\tif strings.Join(runtime.TerminateTriggers, \",\") != getFieldString(&options, \"TerminateTriggers\") {\n\t\tt.Errorf(\"TestCmdLineFlags SetCoreRuntimeConfig (%s): expected %s, actual %s\", \"TerminateTriggers\", getFieldString(&options, \"TerminateRedirectUrl\"), strings.Join(runtime.TerminateTriggers, \",\"))\n\n\t}\n\n\t// Set up runtime server config\n\tcore.SetServerRuntimeConfig(conf.Options)\n\n\tif in[\"TLSCertificate\"] != *core.ServerRuntimeConfig.TLSCertificate {\n\t\tt.Errorf(\"TestCmdLineFlags SetServerRuntimeConfig (%s): expected %s, actual %s\", \"TLSCertificate\", in[\"TLSCertificate\"], *core.ServerRuntimeConfig.TLSCertificate)\n\n\t}\n\n\tif in[\"TLSKey\"] != *core.ServerRuntimeConfig.TLSKey {\n\t\tt.Errorf(\"TestCmdLineFlags SetServerRuntimeConfig (%s): expected %s, actual %s\", \"TLSKey\", in[\"TLSKey\"], *core.ServerRuntimeConfig.TLSKey)\n\n\t}\n\n\t// Set up runtime plugin config\n\tplugin.SetPluginRuntimeConfig(conf.Options)\n\n}\n"
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}