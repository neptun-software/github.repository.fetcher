{
  "metadata": {
    "timestamp": 1736566682729,
    "page": 237,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "genuinetools/img",
      "stars": 3919,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.009765625,
          "content": "cross/\nimg"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.587890625,
          "content": "###Go###\n\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n\n\n###OSX###\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must ends with two \\r.\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\nimg\ncross/\n\n# Go coverage results\ncoverage.txt\nprofile.out\n\n!go.mod\n\n_output/\n\n# Generated embedded runc\ninternal/binutils/runc.go\n\n# direnv files\n.envrc\n.idea\n"
        },
        {
          "name": ".goosarch",
          "type": "blob",
          "size": 0.01171875,
          "content": "linux/amd64\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.361328125,
          "content": "# Tip for finding duplicates (besides scanning the output of AUTHORS for name\n# duplicates that aren't also email duplicates): scan the output of:\n#   git log --format='%aE - %aN' | sort -uf\n#\n# For explanation on this file format: man git-shortlog\n\nJessica Frazelle <acidburn@microsoft.com>\nJessica Frazelle <acidburn@microsoft.com> <jessfraz@users.noreply.github.com>\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.6357421875,
          "content": "# This file lists all individuals having contributed content to the repository.\n# For how it is generated, see `make AUTHORS`.\n\nAkihiro Suda <suda.kyoto@gmail.com> \nAnand Patil <anand.prabhakar.patil@gmail.com> \nDaniel Schep <dschep@gmail.com> \nDavid Medberry <openstack@medberry.net> \nDerek McGowan <derek@mcgstyle.net> \nEric Hotinger <ehotinger@gmail.com> \nhansmi <hansmi@users.noreply.github.com> \nJessica Frazelle <acidburn@microsoft.com> \nMatthew Fisher <matt.fisher@microsoft.com> \nnogoegst <nogoegst@users.noreply.github.com> \nPaul Tagliamonte <paultag@gmail.com> \nRyan Cox <ryancox@users.noreply.github.com> \nRyan Dunckel <sparty02@gmail.com>\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.1337890625,
          "content": "FROM golang:1.13-alpine AS img\n\nRUN apk add --no-cache \\\n\tbash \\\n\tbuild-base \\\n\tgcc \\\n\tgit \\\n\tlibseccomp-dev \\\n\tlinux-headers \\\n\tmake\n\nWORKDIR /img\nRUN go get github.com/go-bindata/go-bindata/go-bindata\nCOPY . .\nRUN make static && mv img /usr/bin/img\n\n# We don't use the Alpine shadow pkg bacause:\n# 1. Alpine shadow makes SUID `su` executable without password: https://github.com/gliderlabs/docker-alpine/issues/430\n#    (but note that the SUID binary is not executable after unsharing the usernamespace. so this issue is not critical)\n# 2. To allow running img in a container without CAP_SYS_ADMIN, we need to do either\n#     a) install newuidmap/newgidmap with file capabilities rather than SETUID (requires kernel >= 4.14)\n#     b) install newuidmap/newgidmap >= 20181125 (59c2dabb264ef7b3137f5edb52c0b31d5af0cf76)\n#    We choose b) until kernel >= 4.14 gets widely adopted.\n#    See https://github.com/shadow-maint/shadow/pull/132 https://github.com/shadow-maint/shadow/pull/138 https://github.com/shadow-maint/shadow/pull/141\nFROM alpine:3.11 AS idmap\nRUN apk add --no-cache autoconf automake build-base byacc gettext gettext-dev gcc git libcap-dev libtool libxslt\nRUN git clone https://github.com/shadow-maint/shadow.git /shadow\nWORKDIR /shadow\nRUN git checkout 59c2dabb264ef7b3137f5edb52c0b31d5af0cf76\nRUN ./autogen.sh --disable-nls --disable-man --without-audit --without-selinux --without-acl --without-attr --without-tcb --without-nscd \\\n  && make \\\n  && cp src/newuidmap src/newgidmap /usr/bin\n\nFROM alpine:3.11 AS base\nMAINTAINER Jessica Frazelle <jess@linux.com>\nRUN apk add --no-cache git pigz\nCOPY --from=img /usr/bin/img /usr/bin/img\nCOPY --from=idmap /usr/bin/newuidmap /usr/bin/newuidmap\nCOPY --from=idmap /usr/bin/newgidmap /usr/bin/newgidmap\n\nRUN chmod u+s /usr/bin/newuidmap /usr/bin/newgidmap \\\n  && adduser -D -u 1000 user \\\n  && mkdir -p /run/user/1000 \\\n  && chown -R user /run/user/1000 /home/user \\\n  && echo user:100000:65536 | tee /etc/subuid | tee /etc/subgid\n\nFROM base AS debug\nRUN apk add --no-cache bash strace\n\nFROM base AS release\nUSER user\nENV USER user\nENV HOME /home/user\nENV XDG_RUNTIME_DIR=/run/user/1000\nENTRYPOINT [ \"img\" ]\nCMD [ \"--help\" ]\n"
        },
        {
          "name": "Dockerfile.dev",
          "type": "blob",
          "size": 3.833984375,
          "content": "\n\nFROM ubuntu:bionic AS base\n\n# gcc for cgo\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tlibc6-dev \\\n\t\tmake \\\n\t\twget \\\n\t\tpkg-config \\\n\t\tgit \\\n\t\tcurl \\\n\t\tca-certificates \\\n\t\tlibseccomp-dev \\\n\t\tuidmap \\\n\t\tparallel \\\n\t\tpigz \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nENV GOLANG_VERSION 1.13.10\n\nRUN set -eux; \\\n\t\\\n# this \"case\" statement is generated via \"update.sh\"\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\tcase \"${dpkgArch##*-}\" in \\\n\t\tamd64) goRelArch='linux-amd64'; goRelSha256='8a4cbc9f2b95d114c38f6cbe94a45372d48c604b707db2057c787398dfbf8e7f' ;; \\\n\t\tarmhf) goRelArch='linux-armv6l'; goRelSha256='3c581f11ed49eaf0954f62ffebc123f8c392fc536f01c5a44cb38185701101fc' ;; \\\n\t\tarm64) goRelArch='linux-arm64'; goRelSha256='f16f19947855b410e48f395ca488bd39223c7b35e8b69c7f15ec00201e20b572' ;; \\\n\t\ti386) goRelArch='linux-386'; goRelSha256='233c9d43fe2fab27ee489efea08b84665aec5855cce95a81dba3846636de5fed' ;; \\\n\t\tppc64el) goRelArch='linux-ppc64le'; goRelSha256='6b9505388ecafa3cb04d5f51638276b25f7d80c5f70bd74ed72f8013f5006fd9' ;; \\\n\t\ts390x) goRelArch='linux-s390x'; goRelSha256='41cb67266e809920363ff620e8cabce152ab54bebd6a337e9f903f5c1996ec35' ;; \\\n\t\t*) goRelArch='src'; goRelSha256='eb9ccc8bf59ed068e7eff73e154e4f5ee7eec0a47a610fb864e3332a2fdc8b8c'; \\\n\t\t\techo >&2; echo >&2 \"warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source\"; echo >&2 ;; \\\n\tesac; \\\n\t\\\n\turl=\"https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz\"; \\\n\twget -O go.tgz \"$url\"; \\\n\techo \"${goRelSha256} *go.tgz\" | sha256sum -c -; \\\n\ttar -C /usr/local -xzf go.tgz; \\\n\trm go.tgz; \\\n\t\\\n\tif [ \"$goRelArch\" = 'src' ]; then \\\n\t\techo >&2; \\\n\t\techo >&2 'error: UNIMPLEMENTED'; \\\n\t\techo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \\\n\t\techo >&2; \\\n\t\texit 1; \\\n\tfi; \\\n\t\\\n\texport PATH=\"/usr/local/go/bin:$PATH\"; \\\n\tgo version\n\nENV GOPATH /go\nENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH\n\nRUN mkdir -p \"$GOPATH/src\" \"$GOPATH/bin\" && chmod -R 777 \"$GOPATH\"\n\nRUN go get golang.org/x/lint/golint \\\n    && go get honnef.co/go/tools/cmd/staticcheck \\\n    && go get github.com/go-bindata/go-bindata/go-bindata \\\n    && go get github.com/go-delve/delve/cmd/dlv\n\n# We don't use the bionic shadow pkg bacause:\n# 1. To allow running img in a container without CAP_SYS_ADMIN, we need to do either\n#     a) install newuidmap/newgidmap with file capabilities rather than SETUID (requires kernel >= 4.14)\n#     b) install newuidmap/newgidmap >= 20181125 (59c2dabb264ef7b3137f5edb52c0b31d5af0cf76)\n#    We choose b) until kernel >= 4.14 gets widely adopted.\n#    See https://github.com/shadow-maint/shadow/pull/132 https://github.com/shadow-maint/shadow/pull/138 https://github.com/shadow-maint/shadow/pull/141\nFROM base AS idmap\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n      autoconf \\\n      automake \\\n      autopoint \\\n      byacc \\\n      gettext \\\n      libcap-dev \\\n      libtool \\\n      libxslt1-dev \\\n\t  && rm -rf /var/lib/apt/lists/*\nRUN git clone https://github.com/shadow-maint/shadow.git /shadow\nWORKDIR /shadow\nRUN git checkout 59c2dabb264ef7b3137f5edb52c0b31d5af0cf76\nRUN ./autogen.sh --disable-nls --disable-man --without-audit --without-selinux --without-acl --without-attr --without-tcb --without-nscd \\\n  && make \\\n  && cp src/newuidmap src/newgidmap /usr/bin\n\nFROM base\n\nCOPY --from=idmap /usr/bin/newuidmap /usr/bin/newuidmap\nCOPY --from=idmap /usr/bin/newgidmap /usr/bin/newgidmap\nRUN chmod u+s /usr/bin/newuidmap /usr/bin/newgidmap \\\n  && useradd -u 1000 --home-dir /home/user user \\\n  && mkdir -p /run/user/1000 \\\n  && mkdir -p /home/user \\\n  && chown -R user /run/user/1000 /home/user \\\n  && chown -R user /go \\\n  && echo user:100000:65536 | tee /etc/subuid | tee /etc/subgid\n\nUSER user\nENV USER user\nENV HOME /home/user\nENV XDG_RUNTIME_DIR=/run/user/1000\n\nWORKDIR /home/user"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2020 The Genuinetools Authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.236328125,
          "content": "# Setup name variables for the package/tool\nNAME := img\nPKG := github.com/genuinetools/$(NAME)\n\nCGO_ENABLED := 1\n\n# Set any default go build tags\nBUILDTAGS ?= seccomp osusergo dfrunmount dfsecrets dfssh\n\ninclude basic.mk\n\n.PHONY: prebuild\nprebuild: runc\n\nRUNCBUILDDIR=$(BUILDDIR)/src/github.com/opencontainers/runc\nRUNCCOMMIT=56aca5aa50d07548d5db8fd33e9dc562f70f3208\n$(RUNCBUILDDIR):\n\tgit clone -c advice.detachedHead=false https://github.com/opencontainers/runc.git \"$@\"\n\n\n$(BUILDDIR)/bin/runc: $(RUNCBUILDDIR)\n\t( cd $(RUNCBUILDDIR) ; git checkout $(RUNCCOMMIT) )\n\t$(MAKE) -C \"$(RUNCBUILDDIR)\" static BUILDTAGS=\"seccomp apparmor\"\n\tmkdir -p $(BUILDDIR)/bin\n\tmv $(RUNCBUILDDIR)/runc $(BUILDDIR)/bin/runc\n\ninternal/binutils/runc.go: $(BUILDDIR)/bin/runc\n\tgo-bindata -tags \\!noembed -pkg binutils -prefix \"$(BUILDDIR)/bin\" -o $(CURDIR)/internal/binutils/runc.go $(BUILDDIR)/bin\n\tgofmt -s -w $(CURDIR)/internal/binutils/runc.go\n\n.PHONY: runc\nifneq (,$(findstring noembed,$(BUILDTAGS)))\nrunc: ## No-op when not embedding runc.\nelse\nrunc: internal/binutils/runc.go ## Builds runc locally so it can be embedded in the resulting binary.\n\t$(RM) -r $(RUNCBUILDDIR)\nrunc-install: $(RUNCBUILDDIR)/runc\n\tsudo cp $(RUNCBUILDDIR)/runc /usr/bin/runc\n\t$(RM) -r $(RUNCBUILDDIR)\nendif\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.779296875,
          "content": "# img\n\n[![make-all](https://github.com/genuinetools/img/workflows/make%20all/badge.svg)](https://github.com/genuinetools/img/actions?query=workflow%3A%22make+all%22)\n[![make-image](https://github.com/genuinetools/img/workflows/make%20image/badge.svg)](https://github.com/genuinetools/img/actions?query=workflow%3A%22make+image%22)\n[![GoDoc](https://img.shields.io/badge/godoc-reference-5272B4.svg?style=for-the-badge)](https://godoc.org/github.com/genuinetools/img)\n[![Github All Releases](https://img.shields.io/github/downloads/genuinetools/img/total.svg?style=for-the-badge)](https://github.com/genuinetools/img/releases)\n\nStandalone, daemon-less, unprivileged Dockerfile and OCI compatible\ncontainer image builder.\n\n`img` is more cache-efficient than Docker and can also execute multiple build stages concurrently, \nas it internally uses [BuildKit](https://github.com/moby/buildkit)'s DAG solver.\n\nThe commands/UX are the same as `docker {build,tag,push,pull,login,logout,save}` so all you \nhave to do is replace `docker` with `img` in your scripts, command line, and/or life.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**\n\n- [Goals](#goals)\n      - [Upstream Patches](#upstream-patches)\n      - [Benchmarks](#benchmarks)\n- [Installation](#installation)\n    - [Binaries](#binaries)\n    - [From Source](#from-source)\n    - [Alpine Linux](#alpine-linux)\n    - [Arch Linux](#arch-linux)\n    - [Gentoo](#gentoo)\n    - [Running with Docker](#running-with-docker)\n  - [Running with Kubernetes](#running-with-kubernetes)\n- [Usage](#usage)\n  - [Build an Image](#build-an-image)\n    - [Cross Platform](#cross-platform)\n    - [Exporter Types](#exporter-types)\n  - [List Image Layers](#list-image-layers)\n  - [Pull an Image](#pull-an-image)\n  - [Push an Image](#push-an-image)\n  - [Tag an Image](#tag-an-image)\n  - [Export an Image to Docker](#export-an-image-to-docker)\n  - [Unpack an Image to a rootfs](#unpack-an-image-to-a-rootfs)\n  - [Remove an Image](#remove-an-image)\n  - [Disk Usage](#disk-usage)\n  - [Prune and Cleanup the Build Cache](#prune-and-cleanup-the-build-cache)\n  - [Login to a Registry](#login-to-a-registry)\n  - [Logout from a Registry](#logout-from-a-registry)\n  - [Using Self-Signed Certs with a Registry](#using-self-signed-certs-with-a-registry)\n- [How It Works](#how-it-works)\n  - [Unprivileged Mounting](#unprivileged-mounting)\n  - [High Level](#high-level)\n  - [Low Level](#low-level)\n  - [Snapshotter Backends](#snapshotter-backends)\n    - [auto (default)](#auto-default)\n    - [native](#native)\n    - [overlayfs](#overlayfs)\n    - [fuse-overlayfs](#fuse-overlayfs)\n- [Contributing](#contributing)\n- [Acknowledgements](#acknowledgements)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n## Goals\n\nThis a glorified cli tool built on top of\n[buildkit](https://github.com/moby/buildkit). The goal of this project is to be\nable to build container images as an unprivileged user.\n\nRunning unprivileged allows companies who use LDAP and other login mechanisms\nto use `img` without needing root. This is very important in HPC environments\nand academia as well.\n\nCurrently this works out of the box on a Linux machine if you install via \nthe directions covered in [installing from binaries](#binaries). This\ninstallation will ensure you have the correct version of `img` and also `runc`.\n\n##### Upstream Patches\n\nThe ultimate goal is to also have this work inside a container. There are\npatches being made to container runtimes and Kubernetes to make this possible. \nFor the on-going work toward getting patches into container runtimes and\nKubernetes, see:\n\n- [moby/moby#36644](https://github.com/moby/moby/pull/36644) **merged**\n- [docker/cli#1347](https://github.com/docker/cli/pull/1347) **merged**\n- [kubernetes/community#1934](https://github.com/kubernetes/community/pull/1934) **merged**\n- [kubernetes/kubernetes#64283](https://github.com/kubernetes/kubernetes/pull/64283) **merged** \n\nThe patches for runc has been merged into the upstream since `ecd55a4135e0a26de884ce436442914f945b1e76` (May 30, 2018).\nThe upstream BuildKit can also run in rootless mode since `65b526438b86a17cf35042011051ce15c8bfb92a` (June 1, 2018).\n\nYou might also be interested in reading: \n* [the original design doc](https://docs.google.com/document/d/1rT2GUSqDGcI2e6fD5nef7amkW0VFggwhlljrKQPTn0s/edit?usp=sharing)\n* [a blog post on building images securely in Kubernetes](https://blog.jessfraz.com/post/building-container-images-securely-on-kubernetes/)\n\n##### Benchmarks\n\nIf you are curious about benchmarks comparing various container builders, check\nout [@AkihiroSuda's buildbench](https://github.com/AkihiroSuda/buildbench) \n[results](https://github.com/AkihiroSuda/buildbench/issues/1).\n\n\n## Installation\n\nYou need to have `newuidmap` installed. On Ubuntu, `newuidmap` is provided by the `uidmap` package.\n\nYou also need to have `seccomp` installed. On Ubuntu, `seccomp` is provided by the `libseccomp-dev` package.\n\n`runc` will be installed on start from an embedded binary if it is not already\navailable locally. If you would like to disable the embedded runc you can use `BUILDTAGS=\"seccomp\nnoembed\"` while building from source with `make`. Or the environment variable\n`IMG_DISABLE_EMBEDDED_RUNC=1` on execution of the `img` binary.\n\nNOTE: These steps work only for Linux. Compile and run in a container \n(explained below) if you're on Windows or MacOS.\n\n#### Binaries\n\nFor installation instructions from binaries please visit the [Releases Page](https://github.com/genuinetools/img/releases).\n\n#### From Source\n\n```bash\n$ mkdir -p $GOPATH/src/github.com/genuinetools\n$ git clone https://github.com/genuinetools/img $GOPATH/src/github.com/genuinetools/img\n$ cd !$\n$ make\n$ sudo make install\n\n# For packagers if you would like to disable the embedded `runc`, please use:\n$ make BUILDTAGS=\"seccomp noembed\"\n```\n\n#### Alpine Linux\n\nThere is an [APKBUILD](https://pkgs.alpinelinux.org/package/edge/community/x86_64/img).\n\n```console\n$ apk add img\n```\n\n#### Arch Linux\n\nThere is an [AUR build](https://aur.archlinux.org/packages/img/).\n\n```console\n# Use whichever AUR helper you prefer\n$ yay -S img\n\n# Or build from the source PKGBUILD\n$ git clone https://aur.archlinux.org/packages/img.git\n$ cd img\n$ makepkg -si\n```\n\n#### Gentoo\n\nThere is an [ebuild](https://github.com/gentoo/gentoo/tree/master/app-emulation/img).\n\n```console\n$ sudo emerge -a app-emulation/img\n```\n\n#### Running with Docker\n\nDocker image `r.j3ss.co/img` is configured to be executed as an unprivileged user with UID 1000 and it does not need `--privileged` since `img` v0.5.11.\n\n```console\n$ docker run --rm -it \\\n    --name img \\\n    --volume $(pwd):/home/user/src:ro \\ # for the build context and dockerfile, can be read-only since we won't modify it\n    --workdir /home/user/src \\ # set the builder working directory\n    --volume \"${HOME}/.docker:/root/.docker:ro\" \\ # for credentials to push to docker hub or a registry\n    --security-opt seccomp=unconfined --security-opt apparmor=unconfined \\ # required by runc\n    r.j3ss.co/img build -t user/myimage .\n```\n\nTo enable PID namespace isolation (which disallows build containers to `kill(2)` the `img` process), you need to specify\n`--privileged` so that build containers can mount `/proc` with unshared PID namespaces.\nNote that even with `--privileged`, `img` works as an unprivileged user with UID 1000.\n\nSee [docker/cli patch](#upstream-patches) for how to allow mounting `/proc` without `--privileged`.\n\n### Running with Kubernetes\n\nSince `img` v0.5.11, you don't need to specify any `securityContext` for running `img` as a Kubernetes container.\n\nHowever the following security annotations are needed:\n```\ncontainer.apparmor.security.beta.kubernetes.io/img: unconfined\ncontainer.seccomp.security.alpha.kubernetes.io/img: unconfined\n```\n\nTo enable PID namespace isolation, you need to set `securityContext.procMount` to `Unmasked` (or simply set\n`securityContext.privileged` to `true`).\n`securityContext.procMount` is available since Kubernetes 1.12 with Docker 18.06/containerd 1.2/CRI-O 1.12.\n\n## Usage\n\nMake sure you have user namespace support enabled. On some distros (Debian and\nArch Linux) this requires running `echo 1 > /proc/sys/kernel/unprivileged_userns_clone`.\n\n\n```console\n$ img -h\nimg -  Standalone, daemon-less, unprivileged Dockerfile and OCI compatible container image builder\n\nUsage: img [OPTIONS] COMMAND [ARG...]\n\nFlags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -h, --help             help for img\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n  -v, --version          Print version information and quit\n\nCommands:\n  build       Build an image from a Dockerfile\n  du          Show image disk usage.\n  help        Help about any command\n  login       Log in to a Docker registry.\n  logout      Log out from a Docker registry.\n  ls          List images and digests.\n  prune       Prune and clean up the build cache.\n  pull        Pull an image or a repository from a registry.\n  push        Push an image or a repository to a registry.\n  rm          Remove one or more images.\n  save        Save an image to a tar archive (streamed to STDOUT by default).\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.\n  unpack      Unpack an image to a rootfs directory.\n  version     Show the version information.\n\nUse \"img [command] --help\" for more information about a command.\n```\n\n### Build an Image\n\n```console\n$ img build -h\nbuild -  Build an image from a Dockerfile\n\nUsage: img build [OPTIONS] PATH\n\nFlags:\n      --build-arg list    Set build-time variables\n      --cache-from list   Buildkit import-cache or Buildx cache-from specification\n      --cache-to list     Buildx cache-to specification\n  -f, --file string       Name of the Dockerfile (Default is 'PATH/Dockerfile')\n  -h, --help              help for build\n      --label list        Set metadata for an image\n      --no-cache          Do not use cache when building the image\n      --no-console        Use non-console progress UI\n  -o, --output string     BuildKit output specification (e.g. type=tar,dest=build.tar)\n      --platform list     Set platforms for which the image should be built\n  -t, --tag list          Name and optionally a tag in the 'name:tag' format\n      --target string     Set the target build stage to build\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n**Use just like you would `docker build`.**\n\n```console\n$ img build -t r.j3ss.co/img .\nBuilding r.j3ss.co/img:latest\nSetting up the rootfs... this may take a bit.\n[+] Building 44.7s (16/16) FINISHED                                                        \n => local://dockerfile (Dockerfile)                                                   0.0s\n => => transferring dockerfile: 1.15kB                                                0.0s\n => local://context (.dockerignore)                                                   0.0s\n => => transferring context: 02B                                                      0.0s\n => CACHED docker-image://docker.io/tonistiigi/copy:v0.1.1@sha256:854cee92ccab4c6d63  0.0s\n => => resolve docker.io/tonistiigi/copy:v0.1.1@sha256:854cee92ccab4c6d63183d147389e  0.0s\n => CACHED docker-image://docker.io/library/alpine@sha256:e1871801d30885a610511c867d  0.0s\n => => resolve docker.io/library/alpine@sha256:e1871801d30885a610511c867de0d6baca7ed  0.0s\n => docker-image://docker.io/library/golang:1.10-alpine@sha256:98c1f3458b21f50ac2e58  5.5s\n => => resolve docker.io/library/golang:1.10-alpine@sha256:98c1f3458b21f50ac2e5896d1  0.0s\n => => sha256:866414f805391b58973d4e3d76e5d32ae51baecb1c93762c9751b9d6c5 126B / 126B  0.0s\n => => sha256:ae8dbf6f23bf1c326de78fc780c6a870bf11eb86b45a7dc567 308.02kB / 308.02kB  0.0s\n => => sha256:44ccce322b34208317d748e998212cd677c16f1a58c2ff5e59578c 3.86kB / 3.86kB  0.0s\n => => sha256:0d01df27c53e651ecfa5c689dafb8c63c759761a757cc37e30eccc5e3a 153B / 153B  0.0s\n => => sha256:ff3a5c916c92643ff77519ffa742d3ec61b7f591b6b7504599d95a 2.07MB / 2.07MB  0.0s\n => => sha256:4be696a8d726150ed9636ea7156edcaa9ba8293df1aae49f9e 113.26MB / 113.26MB  0.0s\n => => sha256:98c1f3458b21f50ac2e5896d14a644eadb3adcae5afdceac0cc9c2 2.04kB / 2.04kB  0.0s\n => => sha256:bb31085d5c5db578edf3d4e5541cfb949b713bb7018bbac4dfd407 1.36kB / 1.36kB  0.0s\n => => unpacking docker.io/library/golang:1.10-alpine@sha256:98c1f3458b21f50ac2e5896  5.4s\n => local://context                                                                   0.8s\n => => transferring context: 116.83MB                                                 0.8s\n => /bin/sh -c apk add --no-cache  bash  build-base  gcc  git  libseccomp-dev  linux  3.8s\n => copy /src-0 go/src/github.com/genuinetools/img/                                   1.5s\n => /bin/sh -c go get -u github.com/jteeuwen/go-bindata/...                           7.3s\n => /bin/sh -c make static && mv img /usr/bin/img                                    15.2s\n => /bin/sh -c git clone https://github.com/opencontainers/runc.git \"$GOPATH/src/git  7.6s\n => /bin/sh -c apk add --no-cache  bash  git  shadow  shadow-uidmap  strace           2.3s\n => copy /src-0/img usr/bin/img                                                       0.5s\n => copy /src-0/runc usr/bin/runc                                                     0.4s\n => /bin/sh -c useradd --create-home --home-dir $HOME user  && chown -R user:user $H  0.4s\n => exporting to image                                                                1.5s\n => => exporting layers                                                               1.4s\n => => exporting manifest sha256:03e034afb839fe6399a271efc972da823b1b6297ea792ec94fa  0.0s\n => => exporting config sha256:92d033f9575176046db41f4f1feacc0602c8f2811f59d59f8e7b6  0.0s\n => => naming to r.j3ss.co/img:latest                                                 0.0s\nSuccessfully built r.j3ss.co/img:latest\n```\n\n#### Cross Platform\n\n`img` and the underlying `buildkit` library support building containers for arbitrary platforms (OS and architecture combinations). In `img` this can be achieved using the `--platform` option, but note that\nusing the `RUN` command during a build requires installing support for the desired platform, and any `FROM` images used must exist for the target platform as well.\n\nSome common platforms include:\n* linux/amd64\n* linux/arm64\n* linux/arm/v7\n* linux/arm/v6\n* linux/s390x\n* linux/ppc64le\n* darwin/amd64\n* windows/amd64\n\nIf you use multiple `--platform` options for the same build, they will be included into a [manifest](https://docs.docker.com/engine/reference/commandline/manifest/) and should work for the different platforms built for.\n\nThe most common way to get `RUN` working in cross-platform builds is to install an emulator such as QEMU on the host system (static bindings are recommended to avoid shared library loading issues). To properly use the emulator inside the build environment, the kernel [binfmt_misc](https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html) parameters must be set with the following flags: `OCF`.\nYou can check the settings in `/proc` to ensure they are set correctly.\n```console\n$ cat /proc/sys/fs/binfmt_misc/qemu-arm | grep flags\nflags: OCF\n```\n\nOn Debian/Ubuntu the above should be available with the `qemu-user-static` package >= `1:2.12+dfsg-3`\n\nNOTE: cross-OS builds are slightly more complicated to get `RUN` commands working, but follow from the same principle.\n\n#### Exporter Types\n\n[bkoutputs]: https://github.com/moby/buildkit/blob/master/README.md#output\n\n`img` can also use buildkit's [exporter types][bkoutputs] directly to output the\nresulting image to a Docker-type bundle or a rootfs tar without saving the image\nitself locally. Builds will still benefit from caching.\n\nThe output type and destination are specified with the `--output` flag. The list\nof valid output specifications includes:\n\n| flag | description |\n|------------|-------------|\n| `-o type=tar,dest=rootfs.tar` | export rootfs of target image to a tar archive |\n| `-o type=tar` | output a rootfs tar to stdout, for use in piped commands |\n| `-o type=docker,dest=image.tar` | save a Docker-type bundle of the image |\n| `-o type=oci,dest=image.tar` | save an OCI-type bundle of the image |\n| `-o type=local,dest=rootfs/` | export the target image to this directory |\n| `-o type=image,name=r.j3ss.co/img` | build and tag an image and store it locally\n\nWhen used in conjunction with a Dockerfile which has a final `FROM scratch` stage and\nonly copies files of interest from earlier stages with `COPY --from=...`, this can be\nutilized to output arbitrary build artifacts for example.\n\n### List Image Layers\n\n```console\n$ img ls -h\nls -  List images and digests.\n\nUsage: img ls [OPTIONS]\n\nFlags:\n  -f, --filter list   Filter output based on conditions provided\n  -h, --help          help for ls\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n```console\n$ img ls\nNAME                    SIZE            CREATED AT      UPDATED AT      DIGEST\njess/img:latest         1.534KiB        9 seconds ago   9 seconds ago   sha256:27d862ac32022946d61afbb91ddfc6a1fa2341a78a0da11ff9595a85f651d51e\njess/thing:latest       591B            30 minutes ago  30 minutes ago  sha256:d664b4e9b9cd8b3067e122ef68180e95dd4494fd4cb01d05632b6e77ce19118e\n```\n\n### Pull an Image\n\nIf you need to use self-signed certs with your registry, see \n[Using Self-Signed Certs with a Registry](#using-self-signed-certs-with-a-registry).\n\n```console\n$ img pull -h\npull -  Pull an image or a repository from a registry.\n\nUsage: img pull [OPTIONS] NAME[:TAG|@DIGEST]\n\nFlags:\n  -h, --help   help for pull\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n```console\n$ img pull r.j3ss.co/stress\nPulling r.j3ss.co/stress:latest...\nSnapshot ref: sha256:2bb7a0a5f074ffe898b1ef64b3761e7f5062c3bdfe9947960e6db48a998ae1d6\nSize: 365.9KiB\n```\n\n### Push an Image\n\nIf you need to use self-signed certs with your registry, see \n[Using Self-Signed Certs with a Registry](#using-self-signed-certs-with-a-registry).\n\n```console\n$ img push -h\npush -  Push an image or a repository to a registry.\n\nUsage: img push [OPTIONS] NAME[:TAG]\n\nFlags:\n  -h, --help                help for push\n      --insecure-registry   Push to insecure registry\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n```console\n$ img push jess/thing\nPushing jess/thing:latest...\nSuccessfully pushed jess/thing:latest\n```\n\n### Tag an Image\n\n```console\n$ img tag -h\ntag -  Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.\n\nUsage: img tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\n\nFlags:\n  -h, --help   help for tag\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n```console\n$ img tag jess/thing jess/otherthing\nSuccessfully tagged jess/thing as jess/otherthing\n```\n\n### Export an Image to Docker\n\n```console\n$ img save -h\nsave -  Save an image to a tar archive (streamed to STDOUT by default).\n\nUsage: img save [OPTIONS] IMAGE [IMAGE...]\n\nFlags:\n      --format string   image output format (docker|oci) (default \"docker\")\n  -h, --help            help for save\n  -o, --output string   write to a file, instead of STDOUT\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n```console\n$ img save jess/thing | docker load\n6c3d70c8619c: Loading layer [==================================================>]  9.927MB/9.927MB                                      \n7e336c441b5e: Loading layer [==================================================>]  5.287MB/5.287MB                                      \n533fecff21a8: Loading layer [==================================================>]   2.56MB/2.56MB                                       \n3db7019eac28: Loading layer [==================================================>]  1.679kB/1.679kB                                      \nLoaded image: jess/thing\n```\n\n### Unpack an Image to a rootfs\n\n```console\n$ img unpack -h\nunpack -  Unpack an image to a rootfs directory.\n\nUsage: img unpack [OPTIONS] IMAGE\n\nFlags:\n  -h, --help            help for unpack\n  -o, --output string   Directory to unpack the rootfs to. (defaults to rootfs/ in the current working directory)\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n```console\n$ img unpack busybox\nSuccessfully unpacked rootfs for busybox to: /home/user/rootfs\n```\n\n### Remove an Image\n\n```console\n$ img rm -h\nrm -  Remove one or more images.\n\nUsage: img rm [OPTIONS] IMAGE [IMAGE...]\n\nFlags:\n  -h, --help   help for rm\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n### Disk Usage\n\n```console\n$ img du -h\ndu -  Show image disk usage.\n\nUsage: img du [OPTIONS]\n\nFlags:\n  -f, --filter list   Filter output based on conditions provided\n  -h, --help          help for du\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n```console\n$ img du \nID                                                                      RECLAIMABLE     SIZE            DESCRIPTION\nsha256:d9a48086f223d28a838263a6c04705c8009fab1dd67cc82c0ee821545de3bf7c true            911.8KiB        pulled from docker.io/tonistiigi/copy@sha256:476e0a67a1e4650c6adaf213269a2913deb7c52cbc77f954026f769d51e1a14e\n7ia86xm2e4hzn2u947iqh9ph2                                               true            203.2MiB        mount /dest from exec copy /src-0 /dest/go/src/github.com/genuinetools/img\n...\nsha256:9f131fba0383a6aaf25ecd78bd5f37003e41a4385d7f38c3b0cde352ad7676da true            958.6KiB        pulled from docker.io/library/golang:alpine@sha256:a0045fbb52a7ef318937e84cf7ad3301b4d2ba6cecc2d01804f428a1e39d1dfc\nsha256:c4151b5a5de5b7e272b2b6a3a4518c980d6e7f580f39c85370330a1bff5821f1 true            472.3KiB        pulled from docker.io/tonistiigi/copy@sha256:476e0a67a1e4650c6adaf213269a2913deb7c52cbc77f954026f769d51e1a14e\nsha256:ae4ecac23119cc920f9e44847334815d32bdf82f6678069d8a8be103c1ee2891 true            148.9MiB        pulled from docker.io/library/debian:buster@sha256:a7789365b226786a0cb9e0f142c515f9f2ede7164a6f6be4a1dc4bfe19d5ec9c\nbkrjrzv3nvp7lvzd5cw9vzut7*                                              true            4.879KiB        local source for dockerfile\nsha256:db193011cbfc238d622d65c4099750758df83d74571e8d7498392b17df381207 true            467.2MiB        pulled from docker.io/library/golang:alpine@sha256:a0045fbb52a7ef318937e84cf7ad3301b4d2ba6cecc2d01804f428a1e39d1dfc\nwn4m5i5swdcjvt1ud5bvtr75h*                                              true            4.204KiB        local source for dockerfile\nReclaimable:    1.08GiB\nTotal:          1.08GiB\n```\n\n### Prune and Cleanup the Build Cache\n\n```console\n$ img prune -h\nprune -  Prune and clean up the build cache.\n\nUsage: img prune [OPTIONS]\n\nFlags:\n  -h, --help   help for prune\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n```console\n$ img prune\nID                                                                      RECLAIMABLE     SIZE            DESCRIPTION\nj1yil8bdz35eyxp0m17tggknd                                               true            5.08KiB         local source for dockerfile\nje23wfyz2apii1au38occ8zag                                               true            52.95MiB        mount / from exec /bin/sh -c useradd --create-home...\nsha256:74906c0186257f2897c5fba99e1ea87eb8b2ee0bb03b611f5e866232bfbf6739 true            2.238MiB        pulled from docker.io/tonistiigi/copy:v0.1.1@sha25...\nvr2pvhmrt1sjs8n7jodesrvnz*                                              true            572.6MiB        mount / from exec /bin/sh -c git clone https://git...\nafn0clz11yphlv6g8golv59c8                                               true            4KiB            local source for context\nqx5yql370piuscuczutrnansv*                                              true            692.4MiB        mount / from exec /bin/sh -c make static && mv img...\nuxocruvniojl1jqlm8gs3ds1e*                                              true            113.8MiB        local source for context\nsha256:0b9cfed6a170b357c528cd9dfc104d8b404d08d84152b38e98c60f50d2ae718b true            1.449MiB        pulled from docker.io/tonistiigi/copy:v0.1.1@sha25...\nvz0716utmnlmya1vhkojyxd4o                                               true            55.39MiB        mount /dest from exec copy /src-0/runc usr/bin/run...\na0om6hwulbf9gd2jfgmxsyaoa                                               true            646.5MiB        mount / from exec /bin/sh -c go get -u github.com/...\nys8y9ixi3didtbpvwbxuptdfq                                               true            641.2MiB        mount /dest from exec copy /src-0 go/src/github.co...\nsha256:f64a552a56ce93b6e389328602f2cd830280fd543ade026905e69895b5696b7a true            1.234MiB        pulled from docker.io/tonistiigi/copy:v0.1.1@sha25...\n05wxxnq6yu5nssn3bojsz2mii                                               true            52.4MiB         mount /dest from exec copy /src-0/img usr/bin/img\nwlrp1nxsa37cixf127bh6w2sv                                               true            35.11MiB        mount / from exec /bin/sh -c apk add --no-cache  b...\nwy0173xa6rkoq49tf9g092r4z                                               true            527.4MiB        mount / from exec /bin/sh -c apk add --no-cache  b...\nReclaimed:      4.148GiB\nTotal:          4.148GiB\n```\n\n### Login to a Registry\n\nIf you need to use self-signed certs with your registry, see \n[Using Self-Signed Certs with a Registry](#using-self-signed-certs-with-a-registry).\n\n```console\n$ img login -h\nlogin -  Log in to a Docker registry.\n\nUsage: img login [OPTIONS] [SERVER]\n\nFlags:\n  -h, --help              help for login\n  -p, --password string   Password\n      --password-stdin    Take the password from stdin\n  -u, --username string   Username\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n### Logout from a Registry\n\n```console\n$ img logout -h\nlogout -  Log out from a Docker registry.\n\nUsage: img logout [SERVER]\n\nFlags:\n  -h, --help   help for logout\n\nGlobal Flags:\n  -b, --backend string   backend for snapshots ([auto native overlayfs fuse-overlayfs]) (default \"auto\")\n  -d, --debug            enable debug logging\n  -s, --state string     directory to hold the global state (default \"/home/user/.local/share/img\")\n```\n\n### Using Self-Signed Certs with a Registry\n\nWe do not allow users to pass all the custom certificate flags on commands\nbecause it is unnecessarily messy and can be handled through Linux itself.\nWhich we believe is a better user experience than having to pass three\ndifferent flags just to communicate with a registry using self-signed or\nprivate certificates.\n\nBelow are instructions on adding a self-signed or private certificate to your\ntrusted ca-certificates on Linux.\n\nMake sure you have the package `ca-certificates` installed.\n\nCopy the public half of your CA certificate (the one user to sign the CSR) into\nthe CA certificate directory (as root):\n\n```console\n$ cp cacert.pem /usr/share/ca-certificates\n```\n\nRebuild the directory with your certificate included, run as root:\n\n```console\n# On debian, this will bring up a menu.\n# Select the ask option, scroll to the certificate you are adding,\n# \tmark it for inclusion, and select ok.\n$ dpkg-reconfigure ca-certificates\n\n# On other distros...\n$ update-ca-certificates\n```\n\n## How It Works\n\n### Unprivileged Mounting\n\nTo mount a filesystem without root accsess, `img` automatically invokes \n[`newuidmap(1)`](http://man7.org/linux/man-pages/man1/newuidmap.1.html)/[`newgidmap(1)`](http://man7.org/linux/man-pages/man1/newgidmap.1.html) \nSUID binaries to prepare SUBUIDs/SUBGIDs, which is typically required by `apt`.\n\nMake sure you have sufficient entries (typically `>=65536`) in your \n`/etc/subuid` and `/etc/subgid`.\n\n### High Level\n\n<img src=\"contrib/how-it-works-high-level.png\" width=300 />\n\n### Low Level\n\n<img src=\"contrib/how-it-works-low-level.png\" width=300 />\n\n### Snapshotter Backends\n\n#### auto (default)\n\nThe `auto` backend selects a backend based on what the current system supports,\npreferring `overlayfs`, then `fuse-overlayfs`, then `native`.\n\n#### native\n\nThe `native` backend creates image layers by simply copying files.\n`copy_file_range(2)` is used when available.\n\n#### overlayfs\n\nThe `overlayfs` backend uses the kernel's native overlayfs support. It requires\na kernel patch from Ubuntu to be unprivileged, see\n[#22](https://github.com/genuinetools/img/issues/22).\n\n#### fuse-overlayfs\n\nThe `fuse-overlayfs` backend provides overlay support without any kernel\npatches. It requires a Linux kernel >= 4.18 and for\n[fuse-overlayfs](https://github.com/containers/fuse-overlayfs) to be installed.\n\n\n## Contributing\n\nPlease do! This is a new project and can use some love <3. Check out the [issues](https://github.com/genuinetools/img/issues).\n\nThe local directories are mostly re-implementations of `buildkit` interfaces to\nbe unprivileged.\n\n## Acknowledgements\n\nA lot of this is based on the work of [moby/buildkit](https://github.com/moby/buildkit). \nThanks [@tonistiigi](https://github.com/tonistiigi) and\n[@AkihiroSuda](https://github.com/AkihiroSuda)!\n"
        },
        {
          "name": "VERSION.txt",
          "type": "blob",
          "size": 0.0078125,
          "content": "v0.5.11\n"
        },
        {
          "name": "basic.mk",
          "type": "blob",
          "size": 6.876953125,
          "content": "# Set the shell\nSHELL := /bin/bash\n\n# Set an output prefix, which is the local directory if not specified\nPREFIX?=$(shell pwd)\n\n# Set the build dir, where built cross-compiled binaries will be output\nBUILDDIR := ${PREFIX}/cross\n\n# Populate version variables\n# Add to compile time flags\nVERSION := $(shell cat VERSION.txt)\nGITCOMMIT := $(shell git rev-parse --short HEAD)\nGITUNTRACKEDCHANGES := $(shell git status --porcelain --untracked-files=no)\nifneq ($(GITUNTRACKEDCHANGES),)\n\tGITCOMMIT := $(GITCOMMIT)-dirty\nendif\nifeq ($(GITCOMMIT),)\n    GITCOMMIT := ${GITHUB_SHA}\nendif\nCTIMEVAR=-X $(PKG)/version.GITCOMMIT=$(GITCOMMIT) -X $(PKG)/version.VERSION=$(VERSION)\nGO_LDFLAGS=-ldflags \"-w $(CTIMEVAR)\"\nGO_LDFLAGS_STATIC=-ldflags \"-w $(CTIMEVAR) -extldflags -static\"\n\n# Set our default go compiler\nGO := go\n\n# List the GOOS and GOARCH to build\nGOOSARCHES = $(shell cat .goosarch)\n\n# Set the graph driver as the current graphdriver if not set.\nDOCKER_GRAPHDRIVER := $(if $(DOCKER_GRAPHDRIVER),$(DOCKER_GRAPHDRIVER),$(shell docker info 2>&1 | grep \"Storage Driver\" | sed 's/.*: //'))\nexport DOCKER_GRAPHDRIVER\n\n# If this session isn't interactive, then we don't want to allocate a\n# TTY, which would fail, but if it is interactive, we do want to attach\n# so that the user can send e.g. ^C through.\nINTERACTIVE := $(shell [ -t 0 ] && echo 1 || echo 0)\nifeq ($(INTERACTIVE), 1)\n\tDOCKER_FLAGS += -t\nendif\n\n.PHONY: build\nbuild: prebuild $(NAME) ## Builds a dynamic executable or package.\n\n$(NAME): $(wildcard *.go) $(wildcard */*.go) VERSION.txt\n\t@echo \"+ $@\"\n\t$(GO) build -tags \"$(BUILDTAGS)\" ${GO_LDFLAGS} -o $(NAME) .\n\n.PHONY: static\nstatic: prebuild ## Builds a static executable.\n\t@echo \"+ $@\"\n#\t$(GO) mod vendor\n\tCGO_ENABLED=$(CGO_ENABLED) $(GO) build \\\n\t            -mod=vendor \\\n\t\t\t\t-tags \"$(BUILDTAGS) static_build\" \\\n\t\t\t\t${GO_LDFLAGS_STATIC} -o $(NAME) .\n\nall: clean build fmt lint test staticcheck vet install ## Runs a clean, build, fmt, lint, test, staticcheck, vet and install.\n\n.PHONY: fmt\nfmt: ## Verifies all files have been `gofmt`ed.\n\t@echo \"+ $@\"\n\t@if [[ ! -z \"$(shell gofmt -s -l . | grep -v '.pb.go:' | grep -v '.twirp.go:' | grep -v vendor | tee /dev/stderr)\" ]]; then \\\n\t\texit 1; \\\n\tfi\n\n.PHONY: lint\nlint: ## Verifies `golint` passes.\n\t@echo \"+ $@\"\n\t@if [[ ! -z \"$(shell golint ./... | grep -v '.pb.go:' | grep -v '.twirp.go:' | grep -v vendor | grep -v internal/binutils/runc.go | tee /dev/stderr)\" ]]; then \\\n\t\texit 1; \\\n\tfi\n\n.PHONY: test\ntest: prebuild ## Runs the go tests.\n\t@echo \"+ $@\"\n\t@$(GO) test -v -tags \"$(BUILDTAGS) cgo\" $(shell $(GO) list ./... | grep -v vendor)\n\n.PHONY: vet\nvet: ## Verifies `go vet` passes.\n\t@echo \"+ $@\"\n\t@if [[ ! -z \"$(shell $(GO) vet $(shell $(GO) list ./... | grep -v vendor) | tee /dev/stderr)\" ]]; then \\\n\t\texit 1; \\\n\tfi\n\n.PHONY: staticcheck\nstaticcheck: ## Verifies `staticcheck` passes.\n\t@echo \"+ $@\"\n\t@if [[ ! -z \"$(shell staticcheck $(shell $(GO) list ./... | grep -v vendor | grep -v internal/binutils) | tee /dev/stderr)\" ]]; then \\\n\t\texit 1; \\\n\tfi\n\n.PHONY: cover\ncover: prebuild ## Runs go test with coverage.\n\t@echo \"\" > coverage.txt\n\t@for d in $(shell $(GO) list ./... | grep -v vendor); do \\\n\t\t$(GO) test -race -coverprofile=profile.out -covermode=atomic \"$$d\"; \\\n\t\tif [ -f profile.out ]; then \\\n\t\t\tcat profile.out >> coverage.txt; \\\n\t\t\trm profile.out; \\\n\t\tfi; \\\n\tdone;\n\n.PHONY: install\ninstall: prebuild ## Installs the executable or package.\n\t@echo \"+ $@\"\n\t$(GO) install -a -tags \"$(BUILDTAGS)\" ${GO_LDFLAGS} .\n\ndefine buildpretty\nmkdir -p $(BUILDDIR)/$(1)/$(2);\nGOOS=$(1) GOARCH=$(2) CGO_ENABLED=$(CGO_ENABLED) $(GO) build \\\n\t -o $(BUILDDIR)/$(1)/$(2)/$(NAME) \\\n\t -a -tags \"$(BUILDTAGS) static_build netgo\" \\\n\t -installsuffix netgo ${GO_LDFLAGS_STATIC} .;\nmd5sum $(BUILDDIR)/$(1)/$(2)/$(NAME) > $(BUILDDIR)/$(1)/$(2)/$(NAME).md5;\nsha256sum $(BUILDDIR)/$(1)/$(2)/$(NAME) > $(BUILDDIR)/$(1)/$(2)/$(NAME).sha256;\nendef\n\n.PHONY: cross\ncross: *.go VERSION.txt prebuild ## Builds the cross-compiled binaries, creating a clean directory structure (eg. GOOS/GOARCH/binary).\n\t@echo \"+ $@\"\n\t$(foreach GOOSARCH,$(GOOSARCHES), $(call buildpretty,$(subst /,,$(dir $(GOOSARCH))),$(notdir $(GOOSARCH))))\n\ndefine buildrelease\nGOOS=$(1) GOARCH=$(2) CGO_ENABLED=$(CGO_ENABLED) $(GO) build \\\n\t -o $(BUILDDIR)/$(NAME)-$(1)-$(2) \\\n\t -a -tags \"$(BUILDTAGS) static_build netgo\" \\\n\t -installsuffix netgo ${GO_LDFLAGS_STATIC} .;\nmd5sum $(BUILDDIR)/$(NAME)-$(1)-$(2) > $(BUILDDIR)/$(NAME)-$(1)-$(2).md5;\nsha256sum $(BUILDDIR)/$(NAME)-$(1)-$(2) > $(BUILDDIR)/$(NAME)-$(1)-$(2).sha256;\nendef\n\n.PHONY: release\nrelease: *.go VERSION.txt prebuild ## Builds the cross-compiled binaries, naming them in such a way for release (eg. binary-GOOS-GOARCH).\n\t@echo \"+ $@\"\n\t$(foreach GOOSARCH,$(GOOSARCHES), $(call buildrelease,$(subst /,,$(dir $(GOOSARCH))),$(notdir $(GOOSARCH))))\n\n.PHONY: bump-version\nBUMP := patch\nbump-version: ## Bump the version in the version file. Set BUMP to [ patch | major | minor ].\n\t@$(GO) get -u github.com/jessfraz/junk/sembump || true # update sembump tool\n\t$(eval NEW_VERSION = $(shell sembump --kind $(BUMP) $(VERSION)))\n\t@echo \"Bumping VERSION.txt from $(VERSION) to $(NEW_VERSION)\"\n\techo $(NEW_VERSION) > VERSION.txt\n\t@echo \"Updating links to download binaries in README.md\"\n\tsed -i s/$(VERSION)/$(NEW_VERSION)/g README.md\n\tgit add VERSION.txt README.md\n\tgit commit -vsam \"Bump version to $(NEW_VERSION)\"\n\t@echo \"Run make tag to create and push the tag for new version $(NEW_VERSION)\"\n\n.PHONY: tag\ntag: ## Create a new git tag to prepare to build a release.\n\tgit tag -a $(VERSION) -m \"$(VERSION)\"\n\t@echo \"Run git push origin $(VERSION) to push your new tag to GitHub and trigger a travis build.\"\n\nREGISTRY := r.j3ss.co\n.PHONY: image\nimage: ## Create the docker image from the Dockerfile.\n\t@docker build --rm --force-rm -t $(REGISTRY)/$(NAME) .\n\n.PHONY: image-dev\nimage-dev:\n\t@docker build --rm --force-rm -f Dockerfile.dev -t $(REGISTRY)/$(NAME):dev .\n\n.PHONY: AUTHORS\nAUTHORS:\n\t@$(file >$@,# This file lists all individuals having contributed content to the repository.)\n\t@$(file >>$@,# For how it is generated, see `make AUTHORS`.)\n\t@echo \"$(shell git log --format='\\n%aN <%aE>' | LC_ALL=C.UTF-8 sort -uf)\" >> $@\n\n.PHONY: vendor\nvendor: ## Updates the vendoring directory.\n\t@$(RM) go.sum\n\t@$(RM) -r vendor\n\tGO111MODULE=on $(GO) mod init || true\n\tGO111MODULE=on $(GO) mod tidy\n\tGO111MODULE=on $(GO) mod vendor\n\t@$(RM) Gopkg.toml Gopkg.lock\n\n.PHONY: verify-vendor\nverify-vendor: ## Verifies the vendoring directory.\n\tGO111MODULE=on $(GO) mod verify\n\n.PHONY: clean\nclean: ## Cleanup any build binaries or packages.\n\t@echo \"+ $@\"\n\t$(RM) $(NAME)\n\t$(RM) -r $(BUILDDIR)\n\n.PHONY: help\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | sed 's/^[^:]*://g' | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\ncheck_defined = \\\n    $(strip $(foreach 1,$1, \\\n\t$(call __check_defined,$1,$(strip $(value 2)))))\n\n__check_defined = \\\n    $(if $(value $1),, \\\n    $(error Undefined $1$(if $2, ($2))$(if $(value @), \\\n    required by target `$@')))\n"
        },
        {
          "name": "build.go",
          "type": "blob",
          "size": 15.517578125,
          "content": "package main\n\nimport (\n\t\"archive/tar\"\n\t\"bufio\"\n\t\"bytes\"\n\t\"compress/gzip\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/containerd/containerd/platforms\"\n\n\t\"github.com/containerd/console\"\n\t\"github.com/containerd/containerd/namespaces\"\n\tsecurejoin \"github.com/cyphar/filepath-securejoin\"\n\t\"github.com/docker/distribution/reference\"\n\t\"github.com/docker/docker/pkg/archive\"\n\t\"github.com/genuinetools/img/client\"\n\tcontrolapi \"github.com/moby/buildkit/api/services/control\"\n\tbkclient \"github.com/moby/buildkit/client\"\n\t\"github.com/moby/buildkit/cmd/buildctl/build\"\n\t\"github.com/moby/buildkit/identity\"\n\t\"github.com/moby/buildkit/session\"\n\t\"github.com/moby/buildkit/session/filesync\"\n\t\"github.com/moby/buildkit/session/sshforward/sshprovider\"\n\t\"github.com/moby/buildkit/util/appcontext\"\n\t\"github.com/moby/buildkit/util/progress/progressui\"\n\t\"github.com/spf13/cobra\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\nconst buildUsageShortHelp = `Build an image from a Dockerfile`\nconst buildUsageLongHelp = `Build an image from a Dockerfile`\n\nfunc newBuildCommand() *cobra.Command {\n\n\tbuild := &buildCommand{\n\t\ttags:      newListValue().WithValidator(validateTag),\n\t\tbuildArgs: newListValue(),\n\t\tlabels:    newListValue(),\n\t\tsecrets:   newListValue(),\n\t\tssh:       newListValue(),\n\t\tplatforms: newListValue(),\n\t\tcacheFrom: newListValue(),\n\t\tcacheTo:   newListValue(),\n\t}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"build [OPTIONS] PATH\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 buildUsageShortHelp,\n\t\tLong:                  buildUsageLongHelp,\n\t\tArgs:                  build.ValidateArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn build.Run(args)\n\t\t},\n\t}\n\n\tfs := cmd.Flags()\n\n\tfs.StringVarP(&build.dockerfilePath, \"file\", \"f\", \"\", \"Name of the Dockerfile (Default is 'PATH/Dockerfile')\")\n\tfs.VarP(build.tags, \"tag\", \"t\", \"Name and optionally a tag in the 'name:tag' format\")\n\tfs.StringVar(&build.target, \"target\", \"\", \"Set the target build stage to build\")\n\tfs.Var(build.platforms, \"platform\", \"Set platforms for which the image should be built\")\n\tfs.Var(build.buildArgs, \"build-arg\", \"Set build-time variables\")\n\tfs.Var(build.labels, \"label\", \"Set metadata for an image\")\n\tfs.Var(build.secrets, \"secret\", \"Secret value exposed to the build. Format id=secretname,src=filepath\")\n\tfs.Var(build.ssh, \"ssh\", \"Allow forwarding SSH agent to the builder. Format default|<id>[=<socket>|<key>[,<key>]]\")\n\tfs.BoolVar(&build.noConsole, \"no-console\", false, \"Use non-console progress UI\")\n\tfs.BoolVar(&build.noCache, \"no-cache\", false, \"Do not use cache when building the image\")\n\tfs.StringVarP(&build.output, \"output\", \"o\", \"\", \"BuildKit output specification (e.g. type=tar,dest=build.tar)\")\n\tfs.Var(build.cacheFrom, \"cache-from\", \"Buildkit import-cache or Buildx cache-from specification\")\n\tfs.Var(build.cacheTo, \"cache-to\", \"Buildx cache-to specification\")\n\treturn cmd\n}\n\ntype buildCommand struct {\n\tbuildArgs      *listValue\n\tdockerfilePath string\n\tlabels         *listValue\n\tsecrets        *listValue\n\tssh            *listValue\n\ttarget         string\n\ttags           *listValue\n\tplatforms      *listValue\n\toutput         string\n\tcacheFrom      *listValue\n\tcacheTo        *listValue\n\tbkoutput       bkclient.ExportEntry\n\n\tcontextDir string\n\tnoConsole  bool\n\tnoCache    bool\n}\n\n// validateTag checks if the given image name can be resolved, and ensures the latest tag is added if it is missing.\nfunc validateTag(repo string) (string, error) {\n\tnamed, err := reference.ParseNormalizedNamed(repo)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\t// Add the latest tag if they did not provide one.\n\trepo = reference.TagNameOnly(named).String()\n\n\treturn repo, nil\n}\n\nfunc (cmd *buildCommand) ValidateArgs(c *cobra.Command, args []string) error {\n\tif len(args) < 1 {\n\t\treturn fmt.Errorf(\"must pass a path to build\")\n\t}\n\n\tif c.Flag(\"output\").Changed {\n\t\tout, err := build.ParseOutput([]string{cmd.output})\n\t\tif err != nil || len(out) != 1 {\n\t\t\treturn err\n\t\t}\n\t\tif name, ok := out[0].Attrs[\"name\"]; ok && name != \"\" {\n\t\t\tvalidated, err := validateTag(name)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tout[0].Attrs[\"name\"] = validated\n\t\t}\n\t\tcmd.bkoutput = out[0]\n\t} else if cmd.tags.Len() < 1 {\n\t\treturn errors.New(\"please specify an image tag with `-t` or an output spec with `-o`\")\n\t}\n\n\treturn nil\n}\n\nfunc (cmd *buildCommand) Run(args []string) (err error) {\n\treexec()\n\n\t// Get the specified context.\n\tcmd.contextDir = args[0]\n\n\t// Parse what is set to come from stdin.\n\tif cmd.dockerfilePath == \"-\" {\n\t\tcmd.dockerfilePath, err = dockerfileFromStdin()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"reading dockerfile from stdin failed: %v\", err)\n\t\t}\n\t\t// On exit cleanup the temporary file we used hold the dockerfile from stdin.\n\t\tdefer os.RemoveAll(cmd.dockerfilePath)\n\t}\n\n\tif cmd.contextDir == \"\" {\n\t\treturn errors.New(\"please specify build context (e.g. \\\".\\\" for the current directory)\")\n\t}\n\n\tif cmd.contextDir == \"-\" {\n\t\tcmd.contextDir, err = contextFromStdin(cmd.dockerfilePath)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"reading context from stdin failed: %v\", err)\n\t\t}\n\t\t// On exit cleanup the temporary directory we used hold the files from stdin.\n\t\tdefer os.RemoveAll(cmd.contextDir)\n\t}\n\n\t// get the tag or output image name\n\tinitialTag := \"image\"\n\tif cmd.bkoutput.Type == \"\" {\n\t\tif tags := cmd.tags.GetAll(); len(tags) > 0 {\n\t\t\tinitialTag = tags[0]\n\t\t}\n\t} else {\n\t\tif name, ok := cmd.bkoutput.Attrs[\"name\"]; ok {\n\t\t\tinitialTag = name\n\t\t}\n\t}\n\n\t// Set the dockerfile path as the default if one was not given.\n\tif cmd.dockerfilePath == \"\" {\n\t\tcmd.dockerfilePath, err = securejoin.SecureJoin(cmd.contextDir, defaultDockerfileName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif cmd.platforms.Len() < 1 {\n\t\terr = cmd.platforms.Set(platforms.DefaultString())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tplatforms := strings.Join(cmd.platforms.GetAll(), \",\")\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, cmd.getLocalDirs())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\t// Create the frontend attrs.\n\tfrontendAttrs := map[string]string{\n\t\t// We use the base for filename here because we already set up the local dirs which sets the path in createController.\n\t\t\"filename\": filepath.Base(cmd.dockerfilePath),\n\t\t\"target\":   cmd.target,\n\t\t\"platform\": platforms,\n\t}\n\tif cmd.noCache {\n\t\tfrontendAttrs[\"no-cache\"] = \"\"\n\t}\n\n\t// Get the build args and add them to frontend attrs.\n\tfor _, buildArg := range cmd.buildArgs.GetAll() {\n\t\tkv := strings.SplitN(buildArg, \"=\", 2)\n\t\tif len(kv) != 2 {\n\t\t\treturn fmt.Errorf(\"invalid build-arg value %s\", buildArg)\n\t\t}\n\t\tfrontendAttrs[\"build-arg:\"+kv[0]] = kv[1]\n\t}\n\n\tfor _, label := range cmd.labels.GetAll() {\n\t\tkv := strings.SplitN(label, \"=\", 2)\n\t\tif len(kv) != 2 {\n\t\t\treturn fmt.Errorf(\"invalid label value %s\", label)\n\t\t}\n\t\tfrontendAttrs[\"label:\"+kv[0]] = kv[1]\n\t}\n\n\tfmt.Fprintf(os.Stderr, \"Building %s\\n\", initialTag)\n\tfmt.Fprintln(os.Stderr, \"Setting up the rootfs... this may take a bit.\")\n\n\t// Create the context.\n\tctx := appcontext.Context()\n\tsess, sessDialer, err := c.Session(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tid := identity.NewID()\n\tctx = session.NewContext(ctx, sess.ID())\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\teg, ctx := errgroup.WithContext(ctx)\n\n\t// prepare the exporter\n\tout := cmd.bkoutput\n\tif out.Type != \"\" {\n\t\tif out.Output != nil {\n\t\t\tsess.Allow(filesync.NewFSSyncTarget(out.Output))\n\t\t}\n\t\tif out.OutputDir != \"\" {\n\t\t\tsess.Allow(filesync.NewFSSyncTargetDir(out.OutputDir))\n\t\t}\n\t} else {\n\t\tout = bkclient.ExportEntry{\n\t\t\tType: bkclient.ExporterImage,\n\t\t\tAttrs: map[string]string{\n\t\t\t\t\"name\": strings.Join(cmd.tags.GetAll(), \",\"),\n\t\t\t},\n\t\t}\n\t}\n\n\t// parse secrets (--secret)\n\tif cmd.secrets.Len() > 0 {\n\t\tsecretProvider, err := build.ParseSecret(cmd.secrets.GetAll())\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"could not parse secrets: %v\", err)\n\t\t}\n\t\tsess.Allow(secretProvider)\n\t}\n\t// parse ssh (--ssh)\n\tif cmd.ssh.Len() > 0 {\n\t\tconfigs, err := build.ParseSSH(cmd.ssh.GetAll())\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"could not parse ssh: %v\", err)\n\t\t}\n\t\tsp, err := sshprovider.NewSSHAgentProvider(configs)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsess.Allow(sp)\n\t}\n\n\tch := make(chan *controlapi.StatusResponse)\n\teg.Go(func() error {\n\t\treturn sess.Run(ctx, sessDialer)\n\t})\n\n\t//create cacheTo list for buildlkit's export-cache\n\tvar cacheToList []*controlapi.CacheOptionsEntry\n\tif cmdCacheToList := cmd.cacheTo.GetAll(); len(cmdCacheToList) > 0 {\n\t\tparsedCacheToList, err := build.ParseExportCache(cmdCacheToList, []string{})\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error parsing export cache: %v\", err)\n\t\t}\n\n\t\tfor _, cacheToItem := range parsedCacheToList {\n\t\t\tcacheToList = append(cacheToList, &controlapi.CacheOptionsEntry{\n\t\t\t\tType:  cacheToItem.Type,\n\t\t\t\tAttrs: cacheToItem.Attrs,\n\t\t\t})\n\t\t}\n\t} else {\n\t\tcacheToList = append(cacheToList, &controlapi.CacheOptionsEntry{\n\t\t\tType: \"inline\",\n\t\t})\n\t}\n\n\t//create cacheFrom list for buildlkit's import-cache\n\tvar cacheFromList []*controlapi.CacheOptionsEntry\n\tstrCacheFromList := make([]string, 0)\n\tfor _, cacheFrom := range cmd.cacheFrom.GetAll() {\n\t\tif !strings.Contains(cacheFrom, \"type=\") {\n\t\t\t//append early to not trigger warning in ParseImportCache func below\n\t\t\tcacheFromList = append(cacheFromList, &controlapi.CacheOptionsEntry{\n\t\t\t\tType: \"registry\",\n\t\t\t\tAttrs: map[string]string{\n\t\t\t\t\t\"ref\": cacheFrom,\n\t\t\t\t},\n\t\t\t})\n\t\t} else {\n\t\t\tstrCacheFromList = append(strCacheFromList, cacheFrom)\n\t\t}\n\t}\n\n\t//parse the remainder of the cacheFrom list\n\tparsedCacheFromList, err := build.ParseImportCache(strCacheFromList)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error parsing import cache: %v\", err)\n\t}\n\tfor _, cacheFromItem := range parsedCacheFromList {\n\t\tcacheFromList = append(cacheFromList, &controlapi.CacheOptionsEntry{\n\t\t\tType:  cacheFromItem.Type,\n\t\t\tAttrs: cacheFromItem.Attrs,\n\t\t})\n\t}\n\n\tif len(cacheFromList) > 0 {\n\t\tcacheImportMarshalled, err := json.Marshal(cacheFromList)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to marshal cache-imports: %v\", err)\n\t\t}\n\t\tfrontendAttrs[\"cache-imports\"] = string(cacheImportMarshalled)\n\t}\n\n\t// Solve the dockerfile.\n\teg.Go(func() error {\n\t\tdefer sess.Close()\n\t\treturn c.Solve(ctx, &controlapi.SolveRequest{\n\t\t\tRef:           id,\n\t\t\tSession:       sess.ID(),\n\t\t\tExporter:      out.Type,\n\t\t\tExporterAttrs: out.Attrs,\n\t\t\tFrontend:      \"dockerfile.v0\",\n\t\t\tFrontendAttrs: frontendAttrs,\n\t\t\tCache: controlapi.CacheOptions{\n\t\t\t\tExports: cacheToList,\n\t\t\t\tImports: cacheFromList,\n\t\t\t},\n\t\t}, ch)\n\t})\n\teg.Go(func() error {\n\t\treturn showProgress(ch, cmd.noConsole)\n\t})\n\tif err := eg.Wait(); err != nil {\n\t\treturn err\n\t}\n\tfmt.Fprintf(os.Stderr, \"Successfully built %s\\n\", initialTag)\n\n\treturn nil\n}\n\n// dockerfileFromStdin copies a dockerfile from stdin to a temporary file.\nfunc dockerfileFromStdin() (string, error) {\n\tstdin, err := ioutil.ReadAll(os.Stdin)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"reading from stdin failed: %v\", err)\n\t}\n\n\t// Create a temporary file for the Dockerfile\n\tf, err := ioutil.TempFile(\"\", \"img-build-dockerfile-\")\n\tif err != nil {\n\t\treturn f.Name(), fmt.Errorf(\"unable to create temporary file for dockerfile: %v\", err)\n\t}\n\tdefer f.Close()\n\n\tif _, err := f.Write(stdin); err != nil {\n\t\treturn f.Name(), fmt.Errorf(\"writing to temporary file for dockerfile failed: %v\", err)\n\t}\n\n\treturn f.Name(), nil\n}\n\n// contextFromStdin will read the contents of stdin as either a\n// Dockerfile or tar archive. Returns the path to a temporary directory\n// for the build context..\nfunc contextFromStdin(dockerfileName string) (string, error) {\n\t// Set the dockerfile name if it is empty.\n\tif dockerfileName == \"\" {\n\t\tdockerfileName = defaultDockerfileName\n\t}\n\n\t// Create a temporary directory for the build context.\n\ttmpDir, err := ioutil.TempDir(\"\", \"img-build-context-\")\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to create temporary context directory: %v\", err)\n\t}\n\n\t// Create a new reader from stdin.\n\tbuf := bufio.NewReader(os.Stdin)\n\n\t// Grab the magic number range from the reader.\n\tarchiveHeaderSize := 512 // number of bytes in an archive header\n\tmagic, err := buf.Peek(archiveHeaderSize)\n\tif err != nil && err != io.EOF {\n\t\treturn tmpDir, fmt.Errorf(\"failed to peek context header from STDIN: %v\", err)\n\t}\n\n\t// Validate if it is a tar archive.\n\tif isArchive(magic) {\n\t\treturn tmpDir, untar(tmpDir, buf)\n\t}\n\n\tif dockerfileName == \"-\" {\n\t\treturn tmpDir, errors.New(\"build context is not an archive\")\n\t}\n\n\t// Create the dockerfile in the temporary directory.\n\tdockerfilePath, err := securejoin.SecureJoin(tmpDir, dockerfileName)\n\tif err != nil {\n\t\treturn tmpDir, err\n\t}\n\tf, err := os.Create(dockerfilePath)\n\tif err != nil {\n\t\treturn tmpDir, err\n\t}\n\tdefer f.Close()\n\n\t// Copy the contents of the reader to the file.\n\t_, err = io.Copy(f, buf)\n\treturn tmpDir, err\n}\n\n// isArchive checks for the magic bytes of a tar or any supported compression algorithm.\nfunc isArchive(header []byte) bool {\n\tcompression := archive.DetectCompression(header)\n\tif compression != archive.Uncompressed {\n\t\treturn true\n\t}\n\tr := tar.NewReader(bytes.NewBuffer(header))\n\t_, err := r.Next()\n\treturn err == nil\n}\n\n// untar unpacks a tarball to a given directory.\nfunc untar(dest string, r io.Reader) error {\n\tgzr, err := gzip.NewReader(r)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gzr.Close()\n\n\ttr := tar.NewReader(gzr)\n\tfor {\n\t\theader, err := tr.Next()\n\t\tswitch {\n\t\t// if no more files are found return\n\t\tcase err == io.EOF:\n\t\t\treturn nil\n\t\t// return any other error\n\t\tcase err != nil:\n\t\t\treturn err\n\t\t// if the header is nil, just skip it (not sure how this happens)\n\t\tcase header == nil:\n\t\t\tcontinue\n\t\t}\n\n\t\t// the target location where the dir/file should be created\n\t\ttarget, err := securejoin.SecureJoin(dest, header.Name)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// check the file type\n\t\tswitch header.Typeflag {\n\t\t// if its a dir and it doesn't exist create it\n\t\tcase tar.TypeDir:\n\t\t\tif _, err := os.Stat(target); err != nil {\n\t\t\t\tif err := os.MkdirAll(target, 0755); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t// if it's a file create it\n\t\tcase tar.TypeReg:\n\t\t\tf, err := os.OpenFile(target, os.O_CREATE|os.O_RDWR, os.FileMode(header.Mode))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t// copy over contents\n\t\t\t_, err = io.Copy(f, tr)\n\t\t\t// immediately close the file, as opposed to doing it in a defer.\n\t\t\t// This is so we don't leak open files.\n\t\t\tf.Close()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (cmd *buildCommand) getLocalDirs() map[string]string {\n\treturn map[string]string{\n\t\t\"context\":    cmd.contextDir,\n\t\t\"dockerfile\": filepath.Dir(cmd.dockerfilePath),\n\t}\n}\n\nfunc showProgress(ch chan *controlapi.StatusResponse, noConsole bool) error {\n\tdisplayCh := make(chan *bkclient.SolveStatus)\n\tgo func() {\n\t\tfor resp := range ch {\n\t\t\ts := bkclient.SolveStatus{}\n\t\t\tfor _, v := range resp.Vertexes {\n\t\t\t\ts.Vertexes = append(s.Vertexes, &bkclient.Vertex{\n\t\t\t\t\tDigest:    v.Digest,\n\t\t\t\t\tInputs:    v.Inputs,\n\t\t\t\t\tName:      v.Name,\n\t\t\t\t\tStarted:   v.Started,\n\t\t\t\t\tCompleted: v.Completed,\n\t\t\t\t\tError:     v.Error,\n\t\t\t\t\tCached:    v.Cached,\n\t\t\t\t})\n\t\t\t}\n\t\t\tfor _, v := range resp.Statuses {\n\t\t\t\ts.Statuses = append(s.Statuses, &bkclient.VertexStatus{\n\t\t\t\t\tID:        v.ID,\n\t\t\t\t\tVertex:    v.Vertex,\n\t\t\t\t\tName:      v.Name,\n\t\t\t\t\tTotal:     v.Total,\n\t\t\t\t\tCurrent:   v.Current,\n\t\t\t\t\tTimestamp: v.Timestamp,\n\t\t\t\t\tStarted:   v.Started,\n\t\t\t\t\tCompleted: v.Completed,\n\t\t\t\t})\n\t\t\t}\n\t\t\tfor _, v := range resp.Logs {\n\t\t\t\ts.Logs = append(s.Logs, &bkclient.VertexLog{\n\t\t\t\t\tVertex:    v.Vertex,\n\t\t\t\t\tStream:    int(v.Stream),\n\t\t\t\t\tData:      v.Msg,\n\t\t\t\t\tTimestamp: v.Timestamp,\n\t\t\t\t})\n\t\t\t}\n\t\t\tdisplayCh <- &s\n\t\t}\n\t\tclose(displayCh)\n\t}()\n\tvar c console.Console\n\tif !noConsole {\n\t\tif cf, err := console.ConsoleFromFile(os.Stderr); err == nil {\n\t\t\tc = cf\n\t\t}\n\t}\n\treturn progressui.DisplaySolveStatus(context.TODO(), \"\", c, os.Stderr, displayCh)\n}\n"
        },
        {
          "name": "build_test.go",
          "type": "blob",
          "size": 9.3291015625,
          "content": "package main\n\nimport (\n\t\"archive/tar\"\n\t\"bytes\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestBuildShCmdJSONEntrypoint(t *testing.T) {\n\tname := \"testbuildshcmdjsonentrypoint\"\n\n\trunBuild(t, name, withDockerfile(`\n    FROM busybox\n    ENTRYPOINT [\"echo\"]\n    CMD echo test\n    `))\n}\n\nfunc TestBuildEnvironmentReplacementUser(t *testing.T) {\n\tname := \"testbuildenvironmentreplacement\"\n\n\trunBuild(t, name, withDockerfile(`\n  FROM scratch\n  ENV user foo\n  USER ${user}\n  `))\n}\n\nfunc TestBuildEnvironmentReplacementVolume(t *testing.T) {\n\tname := \"testbuildenvironmentreplacement\"\n\n\tvolumePath := \"/quux\"\n\tif runtime.GOOS == \"windows\" {\n\t\tvolumePath = \"c:/quux\"\n\t}\n\n\trunBuild(t, name, withDockerfile(`\n  FROM busybox\n  ENV volume `+volumePath+`\n  VOLUME ${volume}\n  `))\n}\n\nfunc TestBuildEnvironmentReplacementExpose(t *testing.T) {\n\tname := \"testbuildenvironmentreplacement\"\n\n\trunBuild(t, name, withDockerfile(`\n  FROM scratch\n  ENV port 80\n  EXPOSE ${port}\n  ENV ports \"  99   100 \"\n  EXPOSE ${ports}\n  `))\n}\n\nfunc TestBuildEnvironmentReplacementWorkdir(t *testing.T) {\n\tname := \"testbuildenvironmentreplacement\"\n\n\trunBuild(t, name, withDockerfile(`\n  FROM busybox\n  ENV MYWORKDIR /work\n  RUN mkdir ${MYWORKDIR}\n  WORKDIR ${MYWORKDIR}\n  `))\n}\n\nfunc TestBuildFromScratch(t *testing.T) {\n\tname := \"testbuildfromscratch\"\n\n\trunBuild(t, name, withDockerfile(`\n  FROM scratch\n  COPY . .\n  `))\n}\n\nfunc TestBuildDockerfileNotInContext(t *testing.T) {\n\tname := \"testbuilddockerfilenotincontext\"\n\n\trun(t, \"build\", \"-t\", name, \"-f\", \"testdata/Dockerfile.test-build-dockerfile-not-in-context\", \"types\")\n}\n\nfunc TestBuildDockerfileNotInContextRoot(t *testing.T) {\n\tname := \"testbuilddockerfilenotincontextroot\"\n\n\trun(t, \"build\", \"-t\", name, \"-f\", \"testdata/Dockerfile.test-build-dockerfile-not-in-context\", \".\")\n}\n\n// Make sure the client exits with the correct exit code.\n// https://github.com/genuinetools/img/issues/101\nfunc TestBuildDockerfileFailing(t *testing.T) {\n\tname := \"testbuilddockerfilefailing\"\n\n\targs := []string{\"build\", \"-t\", name, \"-f\", \"testdata/Dockerfile.test-build-failing\", \".\"}\n\tout, err := doRun(args, nil)\n\tif err == nil {\n\t\tt.Logf(\"img %v should have failed but did not: %s\", args, out)\n\t\tt.FailNow()\n\t}\n}\n\n// Using apt requires subuid, subgid, setgroups, and networking to be enabled.\n// https://github.com/genuinetools/img/issues/96\nfunc TestBuildAPT(t *testing.T) {\n\tname := \"testbuildapt\"\n\n\trunBuild(t, name, withDockerfile(`\n  FROM debian:9-slim\n  RUN apt update\n  `))\n}\n\nfunc TestBuildLabels(t *testing.T) {\n\tname := \"testbuildlabels\"\n\n\targs := []string{\"build\", \"-t\", name, \"--label\", \"cli-label-1=cli1\", \"--label\", \"cli-label-2=cli2\", \"-\"}\n\t_, err := doRun(args, withDockerfile(`\n  FROM scratch as builder\n  LABEL stage \"builder\"\n  FROM scratch\n  LABEL stage \"final\"\n  `))\n\n\tif err != nil {\n\t\tt.Logf(\"img %v failed unexpectedly: %v\", args, err)\n\t\tt.FailNow()\n\t}\n}\n\nfunc TestBuildMultipleSecrets(t *testing.T) {\n\tname := \"testbuildmustiplesecrets\"\n\n\targs := []string{\"build\", \"-t\", name, \"--secret\", \"id=s1,src=/dev/null\", \"--secret\", \"id=s2,src=/dev/null\", \"-\"}\n\t_, err := doRun(args, withDockerfile(`\n  FROM alpine\n  RUN --mount=type=secret,id=s1,dst=/tmp/secret1 \\\n      --mount=type=secret,id=s2,dst=/tmp/secret2 \\\n      cat /tmp/secret1 /tmp/secret2\n  `))\n\n\tif err != nil {\n\t\tt.Logf(\"img %v failed unexpectedly: %v\", args, err)\n\t\tt.FailNow()\n\t}\n}\n\n// generatePrivateKey creates a RSA Private Key of specified byte size in PEM format\nfunc generatePrivateKeyPEM(bitSize int) ([]byte, error) {\n\t// Private Key generation\n\tprivateKey, err := rsa.GenerateKey(rand.Reader, bitSize)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Validate Private Key\n\terr = privateKey.Validate()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Get ASN.1 DER format\n\tprivDER := x509.MarshalPKCS1PrivateKey(privateKey)\n\n\t// pem.Block\n\tprivBlock := pem.Block{\n\t\tType:    \"RSA PRIVATE KEY\",\n\t\tHeaders: nil,\n\t\tBytes:   privDER,\n\t}\n\n\t// Private key in PEM format\n\tprivatePEM := pem.EncodeToMemory(&privBlock)\n\n\treturn privatePEM, nil\n}\n\nfunc TestBuildSsh(t *testing.T) {\n\tname := \"testbuildssh\"\n\n\ttmpf, err := ioutil.TempFile(\"\", \"id_rsa_test\")\n\tif err != nil {\n\t\tt.Fatalf(\"creating temporary file for ssh private key failed: %v\", err)\n\t}\n\n\tdefer os.Remove(tmpf.Name())\n\n\terr = tmpf.Chmod(0600)\n\tif err != nil {\n\t\tt.Fatalf(\"changing file mode failed: %v\", err)\n\t}\n\n\tprivatePEM, err := generatePrivateKeyPEM(4096)\n\tif err != nil {\n\t\tt.Fatalf(\"generating private key failed: %v\", err)\n\t}\n\n\t_, err = tmpf.Write(privatePEM)\n\tif err != nil {\n\t\tt.Fatalf(\"writing private key to temporary file failed: %v\", err)\n\t}\n\n\targs := []string{\"build\", \"-t\", name, \"--ssh\", fmt.Sprintf(\"key=%s\", tmpf.Name()), \"-\"}\n\t_, err = doRun(args, withDockerfile(`\n\tFROM alpine\n\tRUN apk add openssh-client\n\tRUN test -z \"$SSH_AUTH_SOCK\" && echo \"Socket is absent as expected\"\n\tRUN --mount=type=ssh,id=absent ssh-add -l; test 0 -ne \"$?\"\n\tRUN --mount=type=ssh,id=key ssh-add -l; test 0 -eq \"$?\"\n  `))\n\n\tif err != nil {\n\t\tt.Logf(\"img %v failed unexpectedly: %v\", args, err)\n\t\tt.FailNow()\n\t}\n}\n\nfunc TestBuildMultipleTags(t *testing.T) {\n\tnames := []string{\"testbuildmultipletags\", \"testbuildmultipletags:v1\", \"testbuildmultipletagsv1\"}\n\targs := []string{\"build\"}\n\n\tfor _, name := range names {\n\t\targs = append(args, \"-t\", name)\n\t}\n\targs = append(args, \"-\")\n\n\t_, err := doRun(args, withDockerfile(`\n  FROM scratch\n  `))\n\n\tif err != nil {\n\t\tt.Logf(\"img %v failed unexpectedly: %v\", args, err)\n\t\tt.FailNow()\n\t}\n}\n\nfunc TestBuildMultiplePlatforms(t *testing.T) {\n\targs := []string{\"build\", \"--platform\", \"amd64\", \"--platform\", \"linux/arm64,linux/arm/v7\", \"-t\", \"testbuildplatforms\", \"-\"}\n\n\t_, err := doRun(args, withDockerfile(`\n  FROM alpine\n  `))\n\n\tif err != nil {\n\t\tt.Logf(\"img %v failed unexpectedly: %v\", args, err)\n\t\tt.FailNow()\n\t}\n}\n\nfunc TestBuildContextFirstInCommand(t *testing.T) {\n\targs := []string{\"build\", \"-\", \"-t\", \"testbuildargsfirst\"}\n\n\t_, err := doRun(args, withDockerfile(`\n  FROM busybox\n  `))\n\n\tif err != nil {\n\t\tt.Logf(\"img %v failed unexpectedly: %v\", args, err)\n\t\tt.FailNow()\n\t}\n}\n\nfunc TestBuildOutputLocal(t *testing.T) {\n\n\ttmpd, err := ioutil.TempDir(\"\", \"img-buildoutputlocal\")\n\tif err != nil {\n\t\tt.Fatalf(\"creating temporary directory for build output failed: %v\", err)\n\t}\n\tdefer os.RemoveAll(tmpd)\n\trootfs := filepath.Join(tmpd, \"rootfs\")\n\n\targs := []string{\"build\", \"-\", \"-o\", fmt.Sprintf(\"type=local,dest=%s\", rootfs)}\n\t_, err = doRun(args, withDockerfile(`\n\tFROM busybox\n\tRUN touch /imgout\n\t`))\n\tif err != nil {\n\t\tt.Fatalf(\"img %v failed unexpectedly: %v\", args, err)\n\t}\n\n\t// Make sure the image actually is unpacked in the directory.\n\tfile := filepath.Join(rootfs, \"imgout\")\n\tif _, err := os.Stat(file); os.IsNotExist(err) {\n\t\tt.Fatalf(\"expected file at %q to exist but it did not\", file)\n\t}\n}\n\nfunc testBuildOutputArchive(otype string, t *testing.T) {\n\n\ttmpd, err := ioutil.TempDir(\"\", \"img-buildoutput\"+otype)\n\tif err != nil {\n\t\tt.Fatalf(\"creating temporary directory for build output failed: %v\", err)\n\t}\n\tdefer os.RemoveAll(tmpd)\n\tarchive := filepath.Join(tmpd, \"output.tar\")\n\n\targs := []string{\"build\", \"-\", \"-o\", fmt.Sprintf(\"type=%s,dest=%s\", otype, archive)}\n\t_, err = doRun(args, withDockerfile(`\n\tFROM busybox\n\t`))\n\tif err != nil {\n\t\tt.Fatalf(\"img %v failed unexpectedly: %v\", args, err)\n\t}\n\n\t// Make sure the output is a valid tar archive.\n\tf, err := os.Open(archive)\n\tif err != nil {\n\t\tt.Fatalf(\"could not open output archive at %q: %s\", archive, err)\n\t}\n\tdefer f.Close()\n\ttr := tar.NewReader(f)\n\tif _, err = tr.Next(); err != nil {\n\t\tt.Fatalf(\"could not read first item in %s archive: %s\", otype, err)\n\t}\n}\n\nfunc TestBuildOutputTar(t *testing.T) {\n\ttestBuildOutputArchive(\"tar\", t)\n}\n\nfunc TestBuildOutputDocker(t *testing.T) {\n\ttestBuildOutputArchive(\"docker\", t)\n}\n\nfunc TestBuildOutputOCI(t *testing.T) {\n\ttestBuildOutputArchive(\"oci\", t)\n}\n\nfunc TestBuildOutputTarStdout(t *testing.T) {\n\n\targs := []string{\"build\", \"-\", \"-o\", \"type=tar\"}\n\n\t// modified doRun() function to capture stdout seperately\n\tdoRunStdout := func(args []string, stdin io.Reader) ([]byte, error) {\n\t\tprog := \"./testimg\" + exeSuffix\n\n\t\tnewargs := []string{args[0], \"--state\", testStateDir}\n\t\tnewargs = append(newargs, args[1:]...)\n\n\t\tcmd := exec.Command(prog, newargs...)\n\t\tif stdin != nil {\n\t\t\tcmd.Stdin = stdin\n\t\t}\n\t\tout, err := cmd.Output()\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"Error running %s: %v\", strings.Join(newargs, \" \"), err)\n\t\t}\n\t\treturn out, nil\n\t}\n\n\tout, err := doRunStdout(args, withDockerfile(`\n\tFROM busybox\n\t`))\n\tif err != nil {\n\t\tt.Fatalf(\"img %v failed unexpectedly: %v\", args, err)\n\t}\n\n\t// try to read tar entry from stdout\n\ttr := tar.NewReader(bytes.NewReader(out))\n\tif _, err = tr.Next(); err != nil {\n\t\tt.Logf(\"could not read tar archive from stdout: %s\", err)\n\t\tt.Logf(\"first 256 bytes: %s\", out[:256])\n\t\tt.FailNow()\n\t}\n}\n\nfunc TestBuildOutputImage(t *testing.T) {\n\tname := \"testbuildoutputimage\"\n\n\targs := []string{\"build\", \"-\", \"-o\", fmt.Sprintf(\"type=image,name=%s\", name)}\n\t_, err := doRun(args, withDockerfile(`\n\tFROM busybox\n\t`))\n\tif err != nil {\n\t\tt.Fatalf(\"img %v failed unexpectedly: %v\", args, err)\n\t}\n}\n\nfunc TestBuildOutputImageFailing(t *testing.T) {\n\tname := \"testbuildoutputimagefailing\"\n\n\targs := []string{\"build\", \"-\", \"-o\", fmt.Sprintf(\"type=image,dest=%s\", name)}\n\tout, err := doRun(args, withDockerfile(`\n\tFROM busybox\n\t`))\n\tif err == nil {\n\t\tt.Fatalf(\"img %v should have failed but did not: %s\", args, out)\n\t}\n}\n"
        },
        {
          "name": "cli.go",
          "type": "blob",
          "size": 1.755859375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/spf13/cobra\"\n)\n\n// validateHasNoArgs is used for commands that should not be given arguments\nfunc validateHasNoArgs(cmd *cobra.Command, args []string) error {\n\tif len(args) == 0 {\n\t\treturn nil\n\t}\n\n\treturn errors.New(\"no arguments expected\")\n}\n\nfunc allowAnyValue(value string) (string, error) {\n\treturn value, nil\n}\n\n// listValue holds a list of values and a validation function.\ntype listValue struct {\n\tvalues    []string\n\tvalidator validatorFunc\n}\n\n// newListValue creates a new listValue with the specified validator.\nfunc newListValue() *listValue {\n\tvar values []string\n\treturn &listValue{\n\t\tvalues:    values,\n\t\tvalidator: allowAnyValue,\n\t}\n}\n\nfunc (opts *listValue) String() string {\n\tif len(opts.values) == 0 {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(\"%v\", opts.values)\n}\n\n// Set validates if needed the input value and adds it to the\n// internal slice.\nfunc (opts *listValue) Set(value string) error {\n\tif opts.validator != nil {\n\t\tv, err := opts.validator(value)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvalue = v\n\t}\n\topts.values = append(opts.values, value)\n\treturn nil\n}\n\n// GetAll returns the values of slice.\nfunc (opts *listValue) GetAll() []string {\n\treturn opts.values\n}\n\n// Len returns the amount of element in the slice.\nfunc (opts *listValue) Len() int {\n\treturn len(opts.values)\n}\n\n// Type returns a string name for this Option type\nfunc (opts *listValue) Type() string {\n\treturn \"list\"\n}\n\n// WithValidator returns the listValue with validator set.\nfunc (opts *listValue) WithValidator(validator validatorFunc) *listValue {\n\topts.validator = validator\n\treturn opts\n}\n\n// validatorFunc defines a validator function that returns a validated string and/or an error.\ntype validatorFunc func(val string) (string, error)\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "diskusage.go",
          "type": "blob",
          "size": 3.189453125,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\t\"os\"\n\t\"text/tabwriter\"\n\n\t\"github.com/containerd/containerd/namespaces\"\n\t\"github.com/docker/go-units\"\n\t\"github.com/genuinetools/img/client\"\n\tcontrolapi \"github.com/moby/buildkit/api/services/control\"\n\t\"github.com/moby/buildkit/identity\"\n\t\"github.com/moby/buildkit/session\"\n)\n\nconst diskUsageShortHelp = `Show image disk usage.`\n\n// TODO: make the long help actually useful\nconst diskUsageLongHelp = `Show image disk usage.`\n\nfunc newDiskUsageCommand() *cobra.Command {\n\tdiskUsage := &diskUsageCommand{\n\t\tfilters: newListValue(),\n\t}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"du [OPTIONS]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 diskUsageShortHelp,\n\t\tLong:                  diskUsageLongHelp,\n\t\tArgs:                  validateHasNoArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn diskUsage.Run(args)\n\t\t},\n\t}\n\n\tfs := cmd.Flags()\n\n\tfs.VarP(diskUsage.filters, \"filter\", \"f\", \"Filter output based on conditions provided\")\n\n\treturn cmd\n}\n\ntype diskUsageCommand struct {\n\tfilters *listValue\n}\n\nfunc (cmd *diskUsageCommand) Run(args []string) (err error) {\n\treexec()\n\n\t// Create the context.\n\tid := identity.NewID()\n\tctx := session.NewContext(context.Background(), id)\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\tresp, err := c.DiskUsage(ctx, &controlapi.DiskUsageRequest{Filter: cmd.filters.GetAll()})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttw := tabwriter.NewWriter(os.Stdout, 1, 8, 1, '\\t', 0)\n\n\tif debug {\n\t\tprintDebug(tw, resp.Record)\n\t} else {\n\t\tfmt.Fprintln(tw, \"ID\\tRECLAIMABLE\\tSIZE\\tDESCRIPTION\")\n\n\t\tfor _, di := range resp.Record {\n\t\t\tid := di.ID\n\t\t\tif di.Mutable {\n\t\t\t\tid += \"*\"\n\t\t\t}\n\t\t\tdesc := di.Description\n\t\t\tif len(desc) > 50 {\n\t\t\t\tdesc = desc[0:50] + \"...\"\n\t\t\t}\n\t\t\tfmt.Fprintf(tw, \"%s\\t%t\\t%s\\t%s\\n\", id, !di.InUse, units.BytesSize(float64(di.Size_)), desc)\n\t\t}\n\n\t\ttw.Flush()\n\t}\n\n\tif cmd.filters.Len() < 1 {\n\t\ttotal := int64(0)\n\t\treclaimable := int64(0)\n\n\t\tfor _, di := range resp.Record {\n\t\t\tif di.Size_ > 0 {\n\t\t\t\ttotal += di.Size_\n\t\t\t\tif !di.InUse {\n\t\t\t\t\treclaimable += di.Size_\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttw = tabwriter.NewWriter(os.Stdout, 1, 8, 1, '\\t', 0)\n\t\tfmt.Fprintf(tw, \"Reclaimable:\\t%s\\n\", units.BytesSize(float64(reclaimable)))\n\t\tfmt.Fprintf(tw, \"Total:\\t%s\\n\", units.BytesSize(float64(total)))\n\t\ttw.Flush()\n\t}\n\n\treturn nil\n}\n\nfunc printDebug(tw *tabwriter.Writer, du []*controlapi.UsageRecord) {\n\tfor _, di := range du {\n\t\tfmt.Fprintf(tw, \"%s:\\t%v\\n\", \"ID\", di.ID)\n\t\tif di.Parent != \"\" {\n\t\t\tfmt.Fprintf(tw, \"%s:\\t%v\\n\", \"Parent\", di.Parent)\n\t\t}\n\t\tfmt.Fprintf(tw, \"%s:\\t%v\\n\", \"Created at\", di.CreatedAt)\n\t\tfmt.Fprintf(tw, \"%s:\\t%v\\n\", \"Mutable\", di.Mutable)\n\t\tfmt.Fprintf(tw, \"%s:\\t%v\\n\", \"Reclaimable\", !di.InUse)\n\t\tfmt.Fprintf(tw, \"%s:\\t%s\\n\", \"Size\", units.BytesSize(float64(di.Size_)))\n\t\tif di.Description != \"\" {\n\t\t\tfmt.Fprintf(tw, \"%s:\\t%v\\n\", \"Description\", di.Description)\n\t\t}\n\t\tfmt.Fprintf(tw, \"%s:\\t%d\\n\", \"Usage count\", di.UsageCount)\n\t\tif di.LastUsedAt != nil {\n\t\t\tfmt.Fprintf(tw, \"%s:\\t%v\\n\", \"Last used\", di.LastUsedAt)\n\t\t}\n\n\t\tfmt.Fprintf(tw, \"\\n\")\n\t}\n\n\ttw.Flush()\n}\n"
        },
        {
          "name": "diskusage_test.go",
          "type": "blob",
          "size": 0.28515625,
          "content": "package main\n\nimport (\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestDiskUsage(t *testing.T) {\n\t// Test an official image,\n\trun(t, \"pull\", \"alpine\")\n\n\tout := run(t, \"du\")\n\tif !strings.Contains(out, \"pulled from docker.io\") {\n\t\tt.Fatalf(`expected \"pulled from docker.io\" in du output, got: %s`, out)\n\t}\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.646484375,
          "content": "module github.com/genuinetools/img\n\ngo 1.13\n\nreplace github.com/hashicorp/go-immutable-radix => github.com/tonistiigi/go-immutable-radix v0.0.0-20170803185627-826af9ccf0fe\n\nreplace github.com/jaguilar/vt100 => github.com/tonistiigi/vt100 v0.0.0-20190402012908-ad4c4a574305\n\nrequire (\n\tgithub.com/AkihiroSuda/containerd-fuse-overlayfs v1.0.0\n\tgithub.com/containerd/console v0.0.0-20191219165238-8375c3424e4d\n\tgithub.com/containerd/containerd v1.4.0\n\tgithub.com/containerd/go-runc v0.0.0-20200220073739-7016d3ce2328\n\tgithub.com/cyphar/filepath-securejoin v0.2.2\n\tgithub.com/docker/cli v0.0.0-20200227165822-2298e6a3fe24\n\tgithub.com/docker/distribution v2.7.1-0.20190205005809-0d3efadf0154+incompatible\n\tgithub.com/docker/docker v17.12.0-ce-rc1.0.20200309214505-aa6a9891b09c+incompatible\n\tgithub.com/docker/go-connections v0.4.0 // indirect\n\tgithub.com/docker/go-units v0.4.0\n\tgithub.com/genuinetools/reg v0.16.0\n\tgithub.com/mitchellh/hashstructure v1.0.0 // indirect\n\tgithub.com/moby/buildkit v0.7.2\n\tgithub.com/opencontainers/image-spec v1.0.1\n\tgithub.com/opencontainers/runc v1.0.0-rc9.0.20200221051241-688cf6d43cc4\n\tgithub.com/opentracing-contrib/go-stdlib v0.0.0-20180702182724-07a764486eb1 // indirect\n\tgithub.com/opentracing/opentracing-go v1.0.2 // indirect\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/sirupsen/logrus v1.6.0\n\tgithub.com/spf13/cobra v0.0.5\n\tgo.etcd.io/bbolt v1.3.5\n\tgolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e\n\tgoogle.golang.org/grpc v1.27.1\n)\n\nreplace github.com/containerd/containerd => github.com/containerd/containerd v1.3.1-0.20200227195959-4d242818bf55\n\nreplace github.com/docker/docker => github.com/docker/docker v1.4.2-0.20200227233006-38f52c9fec82\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 51.0966796875,
          "content": "bazil.org/fuse v0.0.0-20160811212531-371fbbdaa898/go.mod h1:Xbm+BRKSBEpa4q4hTSxohYNQpsxXPbPry4JJWOB3LB8=\ncloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ngithub.com/AkihiroSuda/containerd-fuse-overlayfs v0.0.0-20200220082720-bb896865146c/go.mod h1:K4kx7xAA5JimeQCnN+dbeLlfaBxzZLaLiDD8lusFI8w=\ngithub.com/AkihiroSuda/containerd-fuse-overlayfs v1.0.0 h1:LhS8BiMh7ULa6zkkF5XI6piLV5XVTR7mSm9j3hTUB/k=\ngithub.com/AkihiroSuda/containerd-fuse-overlayfs v1.0.0/go.mod h1:0mMDvQFeLbbn1Wy8P2j3hwFhqBq+FKn8OZPno8WLmp8=\ngithub.com/Azure/azure-sdk-for-go v16.2.1+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78 h1:w+iIsaOQNcT7OZ575w+acHgRric5iCyQh+xv+KJ4HB8=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=\ngithub.com/Azure/go-autorest v10.8.1+incompatible/go.mod h1:r+4oMnoxhatjLLJ6zxSWATqVooLgysK6ZNox3g/xq24=\ngithub.com/BurntSushi/toml v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/Microsoft/go-winio v0.4.11/go.mod h1:VhR8bwka0BXejwEJY73c50VrPtXAaKcyvVC4A4RozmA=\ngithub.com/Microsoft/go-winio v0.4.14/go.mod h1:qXqCSQ3Xa7+6tgxaGTIe4Kpcdsi+P8jBhyzoq1bpyYA=\ngithub.com/Microsoft/go-winio v0.4.15-0.20190919025122-fc70bd9a86b5 h1:ygIc8M6trr62pF5DucadTWGdEB4mEyvzi0e2nbcmcyA=\ngithub.com/Microsoft/go-winio v0.4.15-0.20190919025122-fc70bd9a86b5/go.mod h1:tTuCMEN+UleMWgg9dVx4Hu52b1bJo+59jBh3ajtinzw=\ngithub.com/Microsoft/hcsshim v0.8.6/go.mod h1:Op3hHsoHPAvb6lceZHDtd9OkTew38wNoXnJs8iY7rUg=\ngithub.com/Microsoft/hcsshim v0.8.7 h1:ptnOoufxGSzauVTsdE+wMYnCWA301PdoN4xg5oRdZpg=\ngithub.com/Microsoft/hcsshim v0.8.7/go.mod h1:OHd7sQqRFrYd3RmSgbgji+ctCwkbq2wbEYNSzOYtcBQ=\ngithub.com/Microsoft/hcsshim v0.8.9 h1:VrfodqvztU8YSOvygU+DN1BGaSGxmrNfqOv5oOuX2Bk=\ngithub.com/Microsoft/hcsshim v0.8.9/go.mod h1:5692vkUqntj1idxauYlpoINNKeqCiG6Sg38RRsjT5y8=\ngithub.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5/go.mod h1:lmUJ/7eu/Q8D7ML55dXQrVaamCz2vxCfdQBasLZfHKk=\ngithub.com/Shopify/logrus-bugsnag v0.0.0-20171204204709-577dee27f20d/go.mod h1:HI8ITrYtUY+O+ZhtlqUnD8+KwNPOyugEhfP9fdUIaEQ=\ngithub.com/apache/thrift v0.0.0-20161221203622-b2a4d4ae21c7/go.mod h1:cp2SuWMxlEZw2r+iP2GNCdIi4C1qmUzdZFSVb+bacwQ=\ngithub.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=\ngithub.com/aws/aws-sdk-go v1.15.11/go.mod h1:mFuSZ37Z9YOHbQEwBWztmVzqXrEkub65tZoCYDt7FT0=\ngithub.com/beorn7/perks v0.0.0-20160804104726-4c0e84591b9a/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973 h1:xJ4a3vCFaGF/jqvzLMYoU8P317H5OQ+Via4RmuPwCS0=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/bitly/go-simplejson v0.5.0/go.mod h1:cXHtHw4XUPsvGaxgjIAn8PhEWG9NfngEKAMDJEczWVA=\ngithub.com/blang/semver v3.1.0+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869/go.mod h1:Ekp36dRnpXw/yCqJaO+ZrUyxD+3VXMFFr56k5XYrpB4=\ngithub.com/bshuster-repo/logrus-logstash-hook v0.4.1/go.mod h1:zsTqEiSzDgAa/8GZR7E1qaXrhYNDKBYy5/dWPTIflbk=\ngithub.com/bugsnag/bugsnag-go v0.0.0-20141110184014-b1d153021fcd/go.mod h1:2oa8nejYd4cQ/b0hMIopN0lCRxU0bueqREvZLWFrtK8=\ngithub.com/bugsnag/osext v0.0.0-20130617224835-0dd3f918b21b/go.mod h1:obH5gd0BsqsP2LwDJ9aOkm/6J86V6lyAXCoQWGw3K50=\ngithub.com/bugsnag/panicwrap v0.0.0-20151223152923-e2c28503fcd0/go.mod h1:D/8v3kj0zr8ZAKg1AQ6crr+5VwKN5eIywRkfhyM/+dE=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cilium/ebpf v0.0.0-20200110133405-4032b1d8aae3 h1:i8+1fuPLjSgAYXUyBlHNhFwjcfAsP4ufiuH1+PWkyDU=\ngithub.com/cilium/ebpf v0.0.0-20200110133405-4032b1d8aae3/go.mod h1:MA5e5Lr8slmEg9bt0VpxxWqJlO4iwu3FBdHUzV7wQVg=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/codahale/hdrhistogram v0.0.0-20160425231609-f8ad88b59a58/go.mod h1:sE/e/2PUdi/liOCUjSTXgM1o87ZssimdTWN964YiIeI=\ngithub.com/containerd/cgroups v0.0.0-20190919134610-bf292b21730f/go.mod h1:OApqhQ4XNSNC13gXIwDjhOQxjWa/NxkwZXJ1EvqT0ko=\ngithub.com/containerd/cgroups v0.0.0-20200217135630-d732e370d46d h1:UKAt78F1OvM4ceTn1VvXuYuatXohsFU1eSI2IBtTw9g=\ngithub.com/containerd/cgroups v0.0.0-20200217135630-d732e370d46d/go.mod h1:CStdkl05lBnJej94BPFoJ7vB8cELKXwViS+dgfW0/M8=\ngithub.com/containerd/console v0.0.0-20180822173158-c12b1e7919c1/go.mod h1:Tj/on1eG8kiEhd0+fhSDzsPAFESxzBBvdyEgyryXffw=\ngithub.com/containerd/console v0.0.0-20191206165004-02ecf6a7291e/go.mod h1:8Pf4gM6VEbTNRIT26AyyU7hxdQU3MvAvxVI0sc00XBE=\ngithub.com/containerd/console v0.0.0-20191219165238-8375c3424e4d h1:VuiIRfgJ2M3vYEU0F6E5lg3+V0l9YpbGQr3jpZor5fo=\ngithub.com/containerd/console v0.0.0-20191219165238-8375c3424e4d/go.mod h1:8Pf4gM6VEbTNRIT26AyyU7hxdQU3MvAvxVI0sc00XBE=\ngithub.com/containerd/containerd v1.3.1-0.20200227195959-4d242818bf55 h1:FGO0nwSBESgoGCakj+w3OQXyrMLsz2omdo9b2UfG/BQ=\ngithub.com/containerd/containerd v1.3.1-0.20200227195959-4d242818bf55/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=\ngithub.com/containerd/continuity v0.0.0-20180921161001-7f53d412b9eb/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=\ngithub.com/containerd/continuity v0.0.0-20181001140422-bd77b46c8352/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=\ngithub.com/containerd/continuity v0.0.0-20190426062206-aaeac12a7ffc h1:TP+534wVlf61smEIq1nwLLAjQVEK2EADoW3CX9AuT+8=\ngithub.com/containerd/continuity v0.0.0-20190426062206-aaeac12a7ffc/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=\ngithub.com/containerd/continuity v0.0.0-20200107194136-26c1120b8d41 h1:kIFnQBO7rQ0XkMe6xEwbybYHBEaWmh/f++laI6Emt7M=\ngithub.com/containerd/continuity v0.0.0-20200107194136-26c1120b8d41/go.mod h1:Dq467ZllaHgAtVp4p1xUQWBrFXR9s/wyoTpG8zOJGkY=\ngithub.com/containerd/continuity v0.0.0-20200710164510-efbc4488d8fe h1:PEmIrUvwG9Yyv+0WKZqjXfSFDeZjs/q15g0m08BYS9k=\ngithub.com/containerd/continuity v0.0.0-20200710164510-efbc4488d8fe/go.mod h1:cECdGN1O8G9bgKTlLhuPJimka6Xb/Gg7vYzCTNVxhvo=\ngithub.com/containerd/fifo v0.0.0-20190226154929-a9fb20d87448/go.mod h1:ODA38xgv3Kuk8dQz2ZQXpnv/UZZUHUCL7pnLehbXgQI=\ngithub.com/containerd/fifo v0.0.0-20191213151349-ff969a566b00 h1:lsjC5ENBl+Zgf38+B0ymougXFp0BaubeIVETltYZTQw=\ngithub.com/containerd/fifo v0.0.0-20191213151349-ff969a566b00/go.mod h1:jPQ2IAeZRCYxpS/Cm1495vGFww6ecHmMk1YJH2Q5ln0=\ngithub.com/containerd/go-cni v0.0.0-20200107172653-c154a49e2c75 h1:5Q5C6jDObSVpjeX8CuZ5yac8d/KIYuPzUHbUzdL+NFw=\ngithub.com/containerd/go-cni v0.0.0-20200107172653-c154a49e2c75/go.mod h1:0mg8r6FCdbxvLDqCXwAx2rO+KA37QICjKL8+wHOG5OE=\ngithub.com/containerd/go-runc v0.0.0-20180907222934-5a6d9f37cfa3 h1:esQOJREg8nw8aXj6uCN5dfW5cKUBiEJ/+nni1Q/D/sw=\ngithub.com/containerd/go-runc v0.0.0-20180907222934-5a6d9f37cfa3/go.mod h1:IV7qH3hrUgRmyYrtgEeGWJfWbgcHL9CSRruz2Vqcph0=\ngithub.com/containerd/go-runc v0.0.0-20200220073739-7016d3ce2328 h1:PRTagVMbJcCezLcHXe8UJvR1oBzp2lG3CEumeFOLOds=\ngithub.com/containerd/go-runc v0.0.0-20200220073739-7016d3ce2328/go.mod h1:PpyHrqVs8FTi9vpyHwPwiNEGaACDxT/N/pLcvMSRA9g=\ngithub.com/containerd/ttrpc v0.0.0-20190828154514-0e0f228740de/go.mod h1:PvCDdDGpgqzQIzDW1TphrGLssLDZp2GuS+X5DkEJB8o=\ngithub.com/containerd/ttrpc v0.0.0-20191028202541-4f1b8fe65a5c/go.mod h1:LPm1u0xBw8r8NOKoOdNMeVHSawSsltak+Ihv+etqsE8=\ngithub.com/containerd/ttrpc v0.0.0-20200121165050-0be804eadb15 h1:+jgiLE5QylzgADj0Yldb4id1NQNRrDOROj7KDvY9PEc=\ngithub.com/containerd/ttrpc v0.0.0-20200121165050-0be804eadb15/go.mod h1:UAxOpgT9ziI0gJrmKvgcZivgxOp8iFPSk8httJEt98Y=\ngithub.com/containerd/ttrpc v1.0.1 h1:IfVOxKbjyBn9maoye2JN95pgGYOmPkQVqxtOu7rtNIc=\ngithub.com/containerd/ttrpc v1.0.1/go.mod h1:UAxOpgT9ziI0gJrmKvgcZivgxOp8iFPSk8httJEt98Y=\ngithub.com/containerd/typeurl v0.0.0-20180627222232-a93fcdb778cd h1:JNn81o/xG+8NEo3bC/vx9pbi/g2WI8mtP2/nXzu297Y=\ngithub.com/containerd/typeurl v0.0.0-20180627222232-a93fcdb778cd/go.mod h1:Cm3kwCdlkCfMSHURc+r6fwoGH6/F1hH3S4sg0rLFWPc=\ngithub.com/containerd/typeurl v0.0.0-20190911142611-5eb25027c9fd/go.mod h1:GeKYzf2pQcqv7tJ0AoCuuhtnqhva5LNU3U+OyKxxJpk=\ngithub.com/containerd/typeurl v0.0.0-20200205145503-b45ef1f1f737 h1:HovfQDS/K3Mr7eyS0QJLxE1CbVUhjZCl6g3OhFJgP1o=\ngithub.com/containerd/typeurl v0.0.0-20200205145503-b45ef1f1f737/go.mod h1:TB1hUtrpaiO88KEK56ijojHS1+NeF0izUACaJW2mdXg=\ngithub.com/containerd/typeurl v1.0.1 h1:PvuK4E3D5S5q6IqsPDCy928FhP0LUIGcmZ/Yhgp5Djw=\ngithub.com/containerd/typeurl v1.0.1/go.mod h1:TB1hUtrpaiO88KEK56ijojHS1+NeF0izUACaJW2mdXg=\ngithub.com/containernetworking/cni v0.7.1 h1:fE3r16wpSEyaqY4Z4oFrLMmIGfBYIKpPrHK31EJ9FzE=\ngithub.com/containernetworking/cni v0.7.1/go.mod h1:LGwApLUm2FpoOfxTDEeq8T9ipbpZ61X79hmU3w8FmsY=\ngithub.com/coreos/clair v0.0.0-20180919182544-44ae4bc9590a/go.mod h1:uXhHPWAoRqw0jJc2f8RrPCwRhIo9otQ8OEWUFtpCiwA=\ngithub.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=\ngithub.com/coreos/go-etcd v2.0.0+incompatible/go.mod h1:Jez6KQU2B/sWsbdaef3ED8NzMklzPG4d5KIOhIy30Tk=\ngithub.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e h1:Wf6HqHfScWJN9/ZjdUKyjop4mf3Qdd+1TvvltAvM3m8=\ngithub.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd/v22 v22.0.0 h1:XJIw/+VlJ+87J+doOxznsAWIdmWuViOVhkQamW5YV28=\ngithub.com/coreos/go-systemd/v22 v22.0.0/go.mod h1:xO0FLkIi5MaZafQlIrOotqXZ90ih+1atmu1JpKERPPk=\ngithub.com/coreos/go-systemd/v22 v22.1.0 h1:kq/SbG2BCKLkDKkjQf5OWwKWUKj1lgs3lFI4PxnR5lg=\ngithub.com/coreos/go-systemd/v22 v22.1.0/go.mod h1:xO0FLkIi5MaZafQlIrOotqXZ90ih+1atmu1JpKERPPk=\ngithub.com/cpuguy83/go-md2man v1.0.10 h1:BSKMNlYxDvnunlTymqtgONjNnaRV1sTpcovwwjF22jk=\ngithub.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0 h1:EoUDS0afbrsXAZ9YQ9jdu/mZ2sXgT1/2yyNng4PGlyM=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/cyphar/filepath-securejoin v0.2.2 h1:jCwT2GTP+PY5nBz3c/YL5PAIbusElVrPujOBSCj8xRg=\ngithub.com/cyphar/filepath-securejoin v0.2.2/go.mod h1:FpkQEhXnPnOthhzymB7CGsFk2G9VLXONKD9G7QGMM+4=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/denverdino/aliyungo v0.0.0-20190125010748-a747050bb1ba/go.mod h1:dV8lFg6daOBZbT6/BDGIz6Y3WFGn8juu6G+CQ6LHtl0=\ngithub.com/dgrijalva/jwt-go v0.0.0-20170104182250-a601269ab70c/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=\ngithub.com/dnaeon/go-vcr v1.0.1/go.mod h1:aBB1+wY4s93YsC3HHjMBMrwTj2R9FHDzUr9KyGc8n1E=\ngithub.com/docker/cli v0.0.0-20180920165730-54c19e67f69c/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=\ngithub.com/docker/cli v0.0.0-20200227165822-2298e6a3fe24 h1:bjsfAvm8BVtvQFxV7TYznmKa35J8+fmgrRJWvcS3yJo=\ngithub.com/docker/cli v0.0.0-20200227165822-2298e6a3fe24/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=\ngithub.com/docker/distribution v0.0.0-20180920194744-16128bbac47f/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=\ngithub.com/docker/distribution v0.0.0-20200223014041-6b972e50feee/go.mod h1:xgJxuOjyp98AvnpRTR1+lGOqQ493ylRnRPmewD5GWtc=\ngithub.com/docker/distribution v2.7.1-0.20190205005809-0d3efadf0154+incompatible h1:dvc1KSkIYTVjZgHf/CTC2diTYC8PzhaA5sFISRfNVrE=\ngithub.com/docker/distribution v2.7.1-0.20190205005809-0d3efadf0154+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=\ngithub.com/docker/docker v1.4.2-0.20200227233006-38f52c9fec82 h1:kZwwJwYnVWtU/byBNjD9rEGWVMvwnfiKu9lFJXjrk04=\ngithub.com/docker/docker v1.4.2-0.20200227233006-38f52c9fec82/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/docker-ce v0.0.0-20180924210327-f53bd8bb8e43 h1:gZ4lWixV821UVbYtr+oz1ZPCHkbtE+ivfmHyZRgyl2Y=\ngithub.com/docker/docker-ce v0.0.0-20180924210327-f53bd8bb8e43/go.mod h1:l1FUGRYBvbjnZ8MS6A2xOji4aZFlY/Qmgz7p4oXH7ac=\ngithub.com/docker/docker-credential-helpers v0.6.0/go.mod h1:WRaJzqw3CTB9bk10avuGsjVBZsD05qeibJ1/TYlvc0Y=\ngithub.com/docker/docker-credential-helpers v0.6.1 h1:Dq4iIfcM7cNtddhLVWe9h4QDjsi4OER3Z8voPu/I52g=\ngithub.com/docker/docker-credential-helpers v0.6.1/go.mod h1:WRaJzqw3CTB9bk10avuGsjVBZsD05qeibJ1/TYlvc0Y=\ngithub.com/docker/go-connections v0.0.0-20180821093606-97c2040d34df/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-connections v0.3.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=\ngithub.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c h1:+pKlWGMw7gf6bQ+oDZB4KHQFypsfjYlq/C4rfL7D3g8=\ngithub.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c/go.mod h1:Uw6UezgYA44ePAFQYUehOuCzmy5zmg/+nl2ZfMWGkpA=\ngithub.com/docker/go-metrics v0.0.0-20180209012529-399ea8c73916 h1:yWHOI+vFjEsAakUTSrtqc/SAHrhSkmn48pqjidZX3QA=\ngithub.com/docker/go-metrics v0.0.0-20180209012529-399ea8c73916/go.mod h1:/u0gXw0Gay3ceNrsHubL3BtdOL2fHf93USgMTe0W5dI=\ngithub.com/docker/go-units v0.3.1/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/docker/go-units v0.3.3 h1:Xk8S3Xj5sLGlG5g67hJmYMmUgXv5N4PhkjJHHqrwnTk=\ngithub.com/docker/go-units v0.3.3/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/docker/go-units v0.4.0 h1:3uh0PgVws3nIA0Q+MwDC8yjEPf9zjRfZZWXZYDct3Tw=\ngithub.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/docker/libnetwork v0.8.0-dev.2.0.20200226230617-d8334ccdb9be h1:GJzljYRqZapOwyfeRyExF2/5qfv8f1feNDMiz0hmRPY=\ngithub.com/docker/libnetwork v0.8.0-dev.2.0.20200226230617-d8334ccdb9be/go.mod h1:93m0aTqz6z+g32wla4l4WxTrdtvBRmVzYRkYvasA5Z8=\ngithub.com/docker/libtrust v0.0.0-20150114040149-fa567046d9b1/go.mod h1:cyGadeNEkKy96OOhEzfZl+yxihPEzKnqJwvfuSUqbZE=\ngithub.com/docker/libtrust v0.0.0-20160708172513-aabc10ec26b7 h1:UhxFibDNY/bfvqU5CAUmr9zpesgbU6SWc8/B4mflAE4=\ngithub.com/docker/libtrust v0.0.0-20160708172513-aabc10ec26b7/go.mod h1:cyGadeNEkKy96OOhEzfZl+yxihPEzKnqJwvfuSUqbZE=\ngithub.com/dustin/go-humanize v0.0.0-20171111073723-bb3d318650d4/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/fernet/fernet-go v0.0.0-20180830025343-9eac43b88a5e/go.mod h1:2H9hjfbpSMHwY503FclkV/lZTBh2YlOmLLSda12uL8c=\ngithub.com/fsnotify/fsnotify v1.4.7 h1:IXs+QLmnXW2CcXuY+8Mzv/fWEsPGWxqefPtCP5CnV9I=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/garyburd/redigo v0.0.0-20150301180006-535138d7bcd7/go.mod h1:NR3MbYisc3/PwhQ00EMzDiPmrwpPxAn5GI05/YaO1SY=\ngithub.com/genuinetools/pkg v0.0.0-20180910213200-1c141f661797/go.mod h1:XTcrCYlXPxnxL2UpnwuRn7tcaTn9HAhxFoFJucootk8=\ngithub.com/genuinetools/reg v0.16.0 h1:ZhLZPT+aUGHLfy45Ub5FLWik+3Dij1iwaj8A/GyAZBw=\ngithub.com/genuinetools/reg v0.16.0/go.mod h1:12Fe9EIvK3dG/qWhNk5e9O96I8SGmCKLsJ8GsXUbk+Y=\ngithub.com/go-ini/ini v1.25.4/go.mod h1:ByCAeIL28uOIIG0E3PJtZPDL8WnHpFKFOtgjp+3Ies8=\ngithub.com/godbus/dbus v0.0.0-20190422162347-ade71ed3457e h1:BWhy2j3IXJhjCbC68FptL43tDKIq8FladmaTs3Xs7Z8=\ngithub.com/godbus/dbus v0.0.0-20190422162347-ade71ed3457e/go.mod h1:bBOAhwG1umN6/6ZUMtDFBMQR8jRg9O75tm9K00oMsK4=\ngithub.com/godbus/dbus/v5 v5.0.3 h1:ZqHaoEF7TBzh4jzPmqVhE/5A1z9of6orkAe5uHoAeME=\ngithub.com/godbus/dbus/v5 v5.0.3/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gofrs/flock v0.7.0 h1:pGFUjl501gafK9HBt1VGL1KCOd/YhIooID+xgyJCf3g=\ngithub.com/gofrs/flock v0.7.0/go.mod h1:F1TvTiK9OcQqauNUHlbJvyl9Qa1QvF/gOUDKA14jxHU=\ngithub.com/gogo/googleapis v1.3.2 h1:kX1es4djPJrsDhY7aZKJy7aZasdcB5oSOEphMjSB53c=\ngithub.com/gogo/googleapis v1.3.2/go.mod h1:5YRNX2z1oM5gXdAkurHa942MDgEJyk02w4OecKY87+c=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=\ngithub.com/gogo/protobuf v1.3.0/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/gogo/protobuf v1.3.1 h1:DqDEcV5aeaTmdFBePNpYsp3FlcVH/2ISVVM9Qf8PSls=\ngithub.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/lint v0.0.0-20180702182130-06c8688daad7/go.mod h1:tluoj9z5200jBnyusfRPU2LqT6J+DAorxEvtC7LHB+E=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0 h1:P3YflyNX/ehuJFLhxviNdFxQPkGK5cDcApsge1SqnvM=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3 h1:gyjaxf+svBWX08ZjK86iN9geUJF0H6gp2IRKX6Nf6/I=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.5 h1:F768QJ1E9tib+q5Sc8MkdJi1RxLTbRcTf8LJV56aRls=\ngithub.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=\ngithub.com/google/go-cmp v0.2.0 h1:+dTQ8DZQJz0Mb/HjFlkptS1FeQ4cWSnN941F8aEG4SQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1 h1:Xye71clBPdm5HgqGwUkwhbynsUJZhDbS20FvLhQ2izg=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/shlex v0.0.0-20150127133951-6f45313302b9 h1:JM174NTeGNJ2m/oLH3UOWOvWQQKd+BoL3hcSCUWFLt0=\ngithub.com/google/shlex v0.0.0-20150127133951-6f45313302b9/go.mod h1:RpwtwJQFrIEPstU94h88MWPXP2ektJZ8cZ0YntAmXiE=\ngithub.com/google/uuid v1.1.1 h1:Gkbcsh/GbpXz7lPftLA3P6TYMwjCLYm83jiFQZF/3gY=\ngithub.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gorilla/context v1.1.1 h1:AWwleXJkX/nhcU9bZSnZoi3h/qGYqQAGhq6zZe/aQW8=\ngithub.com/gorilla/context v1.1.1/go.mod h1:kBGZzfjB9CEq2AlWe17Uuf7NDRt0dE0s8S51q0aT7Yg=\ngithub.com/gorilla/handlers v0.0.0-20150720190736-60c7bfde3e33/go.mod h1:Qkdc/uu4tH4g6mTK6auzZ766c4CA0Ng8+o/OAirnOIQ=\ngithub.com/gorilla/mux v1.6.2 h1:Pgr17XVTNXAk3q/r4CpKzC5xBM/qW1uVLV+IhRZpIIk=\ngithub.com/gorilla/mux v1.6.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gorilla/mux v1.7.2 h1:zoNxOV7WjqXptQOVngLmcSQgXmgk4NMz1HibBchjl/I=\ngithub.com/gorilla/mux v1.7.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gotestyourself/gotestyourself v2.2.0+incompatible/go.mod h1:zZKM6oeNM8k+FRljX1mnzVYeS8wiGgQyvST1/GafPbY=\ngithub.com/grpc-ecosystem/grpc-gateway v1.5.0/go.mod h1:RSKVYQBd5MCa4OVpNdGskqpgL2+G+NZTnrVHpWWfpdw=\ngithub.com/grpc-ecosystem/grpc-opentracing v0.0.0-20180507213350-8e809c8a8645 h1:MJG/KsmcqMwFAkh8mTnAwhyKoB+sTAnY4CACC110tbU=\ngithub.com/grpc-ecosystem/grpc-opentracing v0.0.0-20180507213350-8e809c8a8645/go.mod h1:6iZfnjpejD4L/4DwD7NryNaJyCQdzwWwH2MWhCA90Kw=\ngithub.com/hashicorp/errwrap v0.0.0-20141028054710-7554cd9344ce/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-multierror v0.0.0-20161216184304-ed905158d874/go.mod h1:JMRHfdO9jKNzS/+BTlxCjKNQHg/jZAft8U7LloJvN7I=\ngithub.com/hashicorp/golang-lru v0.5.1 h1:0hERBMJE1eitiLkihrMvRVBYAkpHzc/J3QdDN+dAcgU=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/hashicorp/uuid v0.0.0-20160311170451-ebb0a03e909c h1:nQcv325vxv2fFHJsOt53eSRf1eINt6vOdYUFfXs4rgk=\ngithub.com/hashicorp/uuid v0.0.0-20160311170451-ebb0a03e909c/go.mod h1:fHzc09UnyJyqyW+bFuq864eh+wC7dj65aXmXLRe5to0=\ngithub.com/hpcloud/tail v1.0.0 h1:nfCOvKYfkgYP8hkirhJocXT2+zOD8yUNjXaWfTlyFKI=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/imdario/mergo v0.3.7 h1:Y+UAYTZ7gDEuOfhxKWy+dvb5dRQ6rJjFSdX2HZY1/gI=\ngithub.com/imdario/mergo v0.3.7/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/inconshreveable/mousetrap v1.0.0 h1:Z8tu5sraLXCXIcARxBp/8cbvlwVa7Z1NHg9XEKhtSvM=\ngithub.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\ngithub.com/ishidawataru/sctp v0.0.0-20191218070446-00ab2ac2db07 h1:rw3IAne6CDuVFlZbPOkA7bhxlqawFh7RJJ+CejfMaxE=\ngithub.com/ishidawataru/sctp v0.0.0-20191218070446-00ab2ac2db07/go.mod h1:co9pwDoBCm1kGxawmb4sPq0cSIOOWNPT4KnHotMP1Zg=\ngithub.com/jmespath/go-jmespath v0.0.0-20160202185014-0b12d6b521d8/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=\ngithub.com/jmespath/go-jmespath v0.0.0-20160803190731-bd40a432e4c7/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=\ngithub.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1 h1:mweAR1A6xJ3oS2pRaGiHgQ4OO8tzTaLawm8vnODuwDk=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.2 h1:DB17ag19krx9CFsz4o3enTrPXyIXCl+2iCXH/aMAp9s=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.3 h1:CE8S1cTafDpPvMhIxNJKvHsGVBgn1xWYf1NbHQhywc8=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/marstr/guid v1.1.0/go.mod h1:74gB1z2wpxxInTG6yaqA7KrtM0NZ+RbrcqDvYHefzho=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1 h1:4hp9jkHxhMHkqkrB3Ix0jegS5sx/RkqARlsWZ6pIwiU=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-wordwrap v1.0.0/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\ngithub.com/mitchellh/hashstructure v0.0.0-20170609045927-2bca23e0e452/go.mod h1:QjSHrPWS+BGUVBYkbTZWEnOh3G1DutKwClXU/ABz6AQ=\ngithub.com/mitchellh/hashstructure v1.0.0 h1:ZkRJX1CyOoTkar7p/mLS5TZU4nJ1Rn/F8u9dGS02Q3Y=\ngithub.com/mitchellh/hashstructure v1.0.0/go.mod h1:QjSHrPWS+BGUVBYkbTZWEnOh3G1DutKwClXU/ABz6AQ=\ngithub.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/mitchellh/osext v0.0.0-20151018003038-5e2d6d41470f/go.mod h1:OkQIRizQZAeMln+1tSwduZz7+Af5oFlKirV/MSYes2A=\ngithub.com/moby/buildkit v0.7.2 h1:wp4R0QMXSqwjTJKhhWlJNOCSQ/OVPnsCf3N8rs09+vQ=\ngithub.com/moby/buildkit v0.7.2/go.mod h1:D3DN/Nl4DyMH1LkwpRUJuoghqdigdXd1A6HXt5aZS40=\ngithub.com/morikuni/aec v0.0.0-20170113033406-39771216ff4c h1:nXxl5PrvVm2L/wCy8dQu6DMTwH4oIuGN8GJDAlqDdVE=\ngithub.com/morikuni/aec v0.0.0-20170113033406-39771216ff4c/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/ncw/swift v1.0.47/go.mod h1:23YIA4yWVnGwv2dQlN4bB7egfYX6YLn0Yo/S6zZO/ZM=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.7.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.10.1/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.10.3 h1:OoxbjfXVZyod1fmWYhI7SEyaD8B00ynP3T+D5GiyHOY=\ngithub.com/onsi/ginkgo v1.10.3/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/gomega v1.4.2/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.4.3/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.7.1 h1:K0jcRCwNQM3vFGh1ppMtDh/+7ApJrjldlX8fA0jDTLQ=\ngithub.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=\ngithub.com/opencontainers/go-digest v0.0.0-20170106003457-a6d0ee40d420/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=\ngithub.com/opencontainers/go-digest v0.0.0-20180430190053-c9281466c8b2/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=\ngithub.com/opencontainers/go-digest v1.0.0-rc1 h1:WzifXhOVOEOuFYOJAW6aQqW0TooG2iki3E3Ii+WN7gQ=\ngithub.com/opencontainers/go-digest v1.0.0-rc1/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.0.0/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=\ngithub.com/opencontainers/image-spec v1.0.1 h1:JMemWkRwHx4Zj+fVxWoMCFm/8sYGGrUVojFA6h/TRcI=\ngithub.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=\ngithub.com/opencontainers/runc v0.0.0-20190115041553-12f6a991201f/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=\ngithub.com/opencontainers/runc v0.1.1/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=\ngithub.com/opencontainers/runc v1.0.0-rc6/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=\ngithub.com/opencontainers/runc v1.0.0-rc9.0.20200102164712-2b52db75279c/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=\ngithub.com/opencontainers/runc v1.0.0-rc9.0.20200221051241-688cf6d43cc4 h1:JhRvjyrjq24YPSDS0MQo9KJHQh95naK5fYl9IT+dzPM=\ngithub.com/opencontainers/runc v1.0.0-rc9.0.20200221051241-688cf6d43cc4/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=\ngithub.com/opencontainers/runtime-spec v0.1.2-0.20190507144316-5b71a03e2700/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=\ngithub.com/opencontainers/runtime-spec v1.0.1 h1:wY4pOY8fBdSIvs9+IDHC55thBuEulhzfSgKeC1yFvzQ=\ngithub.com/opencontainers/runtime-spec v1.0.1/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=\ngithub.com/opencontainers/runtime-tools v0.0.0-20181011054405-1d69bd0f9c39/go.mod h1:r3f7wjNzSs2extwzU3Y+6pKfobzPh+kKFJ3ofN+3nfs=\ngithub.com/opencontainers/selinux v1.3.2 h1:DR4lL9SYVjgcTZKEZIncvDU06fKSc/eygjmNGOA3E1s=\ngithub.com/opencontainers/selinux v1.3.2/go.mod h1:yTcKuYAh6R95iDpefGLQaPaRwJFwyzAJufJyiTt7s0g=\ngithub.com/opentracing-contrib/go-stdlib v0.0.0-20171029140428-b1a47cfbdd75/go.mod h1:PLldrQSroqzH70Xl+1DQcGnefIbqsKR7UDaiux3zV+w=\ngithub.com/opentracing-contrib/go-stdlib v0.0.0-20180702182724-07a764486eb1 h1:gmB1XmLjI0RXG8rJCP0PK6g8rwhX8COSGFTiOgJ4Wx4=\ngithub.com/opentracing-contrib/go-stdlib v0.0.0-20180702182724-07a764486eb1/go.mod h1:PLldrQSroqzH70Xl+1DQcGnefIbqsKR7UDaiux3zV+w=\ngithub.com/opentracing/opentracing-go v0.0.0-20171003133519-1361b9cd60be/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/opentracing/opentracing-go v1.0.2 h1:3jA2P6O1F9UOrWVpwrIo17pu01KWvNWg4X946/Y5Zwg=\ngithub.com/opentracing/opentracing-go v1.0.2/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=\ngithub.com/peterhellberg/link v1.0.0 h1:mUWkiegowUXEcmlb+ybF75Q/8D2Y0BjZtR8cxoKhaQo=\ngithub.com/peterhellberg/link v1.0.0/go.mod h1:gtSlOT4jmkY8P47hbTc8PTgiDDWpdPbFYl75keYyBB8=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1-0.20171018195549-f15c970de5b7/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1 h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/profile v1.2.1/go.mod h1:hJw3o1OdXxsrSjjVksARp5W95eeEaEfptyVZyv6JUPA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v0.0.0-20180209125602-c332b6f63c06/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v0.0.0-20180924113449-f69c853d21c1 h1:mEzWvBiJdUbhqHRT6kNSGzD6IDcWCWF2uAhrEEE740M=\ngithub.com/prometheus/client_golang v0.0.0-20180924113449-f69c853d21c1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_model v0.0.0-20171117100541-99fa1f4be8e5/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910 h1:idejC8f05m9MGOsuEi1ATq9shN03HrxNkD/luQvxCv8=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4 h1:gQz4mCbXsO+nc9n1hCxHcGA3Zx3Eo+UHZoInFGUIXNM=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/common v0.0.0-20180110214958-89604d197083/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/common v0.0.0-20180801064454-c7de2306084e h1:n/3MEhJQjQxrOUCzh1Y3Re6aJUUWRp2M9+Oc3eVn/54=\ngithub.com/prometheus/common v0.0.0-20180801064454-c7de2306084e/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/procfs v0.0.0-20180125133057-cb4147076ac7/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20180920065004-418d78d0b9a7 h1:NgR6WN8nQ4SmFC1sSUHY8SriLuWCZ6cCIQtH4vDZN3c=\ngithub.com/prometheus/procfs v0.0.0-20180920065004-418d78d0b9a7/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20190522114515-bc1a522cf7b1/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.0.5 h1:3+auTFlqw+ZaQYJARz6ArODtkaIwtvBTx3N2NehQlL8=\ngithub.com/prometheus/procfs v0.0.5/go.mod h1:4A/X28fw3Fc593LaREMrKMqOKvUAntwMDaekg4FpcdQ=\ngithub.com/russross/blackfriday v1.5.2 h1:HyvC0ARfnZBqnXwABFeSZHpKvJHJJfPz81GNueLj0oo=\ngithub.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=\ngithub.com/russross/blackfriday/v2 v2.0.1 h1:lPqVAte+HuHNfhJ/0LC98ESWRz8afy9tM/0RK8m9o+Q=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=\ngithub.com/serialx/hashring v0.0.0-20190422032157-8b2912629002/go.mod h1:/yeG0My1xr/u+HZrFQ1tOQQQQrOawfyMUH13ai5brBc=\ngithub.com/shurcooL/httpfs v0.0.0-20171119174359-809beceb2371/go.mod h1:ZY1cvUeJuFPAdZ/B6v7RHavJWZn2YPVFQ1OSXhCGOkg=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0 h1:PdmoCO6wvbs+7yrJyMORt4/BmY5IYyJwS/kOiWx8mHo=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/sirupsen/logrus v1.0.3/go.mod h1:pMByvHTf9Beacp5x1UXfOR9xyW/9antXMhjMPG0dEzc=\ngithub.com/sirupsen/logrus v1.0.4-0.20170822132746-89742aefa4b2/go.mod h1:pMByvHTf9Beacp5x1UXfOR9xyW/9antXMhjMPG0dEzc=\ngithub.com/sirupsen/logrus v1.0.6/go.mod h1:pMByvHTf9Beacp5x1UXfOR9xyW/9antXMhjMPG0dEzc=\ngithub.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=\ngithub.com/sirupsen/logrus v1.4.2 h1:SPIRibHv4MatM3XXNO2BJeFLZwZ2LvZgfQ5+UNI2im4=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.6.0 h1:UBcNElsrwanuuMsnGSlYmtmgbb23qDR5dG+6X6Oo89I=\ngithub.com/sirupsen/logrus v1.6.0/go.mod h1:7uNnSEd1DgxDLC74fIahvMZmmYsHGZGEOFrfsX/uA88=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/goconvey v0.0.0-20190330032615-68dc04aab96a/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=\ngithub.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cobra v0.0.2-0.20171109065643-2da4a54c5cee/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=\ngithub.com/spf13/cobra v0.0.3/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=\ngithub.com/spf13/cobra v0.0.5 h1:f0B+LkLX6DtmRH1isoNA9VTtNUK9K8xYd28JNNfOv/s=\ngithub.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=\ngithub.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=\ngithub.com/spf13/pflag v1.0.1-0.20171106142849-4c012f6dcd95/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.3 h1:zPAT6CGy6wXeQ7NtTnaTerfKOsV6V6F8agHXFiazDkg=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/viper v1.3.2/go.mod h1:ZiWeW+zYFKm7srdB9IoDzzZXaJaI5eL9QjNiN/DMA2s=\ngithub.com/stretchr/objx v0.0.0-20180129172003-8a3f7159479f/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1 h1:2vfRuCMp5sSVIDSqO8oNnWJq7mPa6KVP3iPIwFBuy8A=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v0.0.0-20180303142811-b89eecf5ca5d/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0 h1:2E4SXV/wtOkTonXsotYi4li6zVWxYlZuYNCXe9XRJyk=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/syndtr/gocapability v0.0.0-20170704070218-db04d3cc01c8/go.mod h1:hkRG7XYTFWNJGYcbNJQlaLq0fg1yr4J4t/NcTQtrfww=\ngithub.com/syndtr/gocapability v0.0.0-20180916011248-d98352740cb2 h1:b6uOv7YOFK0TYG7HtkIgExQo+2RdLuwRft63jn2HWj8=\ngithub.com/syndtr/gocapability v0.0.0-20180916011248-d98352740cb2/go.mod h1:hkRG7XYTFWNJGYcbNJQlaLq0fg1yr4J4t/NcTQtrfww=\ngithub.com/tonistiigi/fsutil v0.0.0-20200326231323-c2c7d7b0e144 h1:6RY1EKxCnPQShPM46xFDHta2JSOd+YKCgHyyBHtKuo8=\ngithub.com/tonistiigi/fsutil v0.0.0-20200326231323-c2c7d7b0e144/go.mod h1:0G1sLZ/0ttFf09xvh7GR4AEECnjifHRNJN/sYbLianU=\ngithub.com/tonistiigi/go-immutable-radix v0.0.0-20170803185627-826af9ccf0fe h1:pd7hrFSqUPxYS9IB+UMG1AB/8EXGXo17ssx0bSQ5L6Y=\ngithub.com/tonistiigi/go-immutable-radix v0.0.0-20170803185627-826af9ccf0fe/go.mod h1:/+MCh11CJf2oz0BXmlmqyopK/ad1rKkcOXPoYuPCJYU=\ngithub.com/tonistiigi/units v0.0.0-20180711220420-6950e57a87ea h1:SXhTLE6pb6eld/v/cCndK0AMpt1wiVFb/YYmqB3/QG0=\ngithub.com/tonistiigi/units v0.0.0-20180711220420-6950e57a87ea/go.mod h1:WPnis/6cRcDZSUvVmezrxJPkiO87ThFYsoUiMwWNDJk=\ngithub.com/tonistiigi/vt100 v0.0.0-20190402012908-ad4c4a574305 h1:y/1cL5AL2oRcfzz8CAHHhR6kDDfIOT0WEyH5k40sccM=\ngithub.com/tonistiigi/vt100 v0.0.0-20190402012908-ad4c4a574305/go.mod h1:gXOLibKqQTRAVuVZ9gX7G9Ykky8ll8yb4slxsEMoY0c=\ngithub.com/uber/jaeger-client-go v0.0.0-20180103221425-e02c85f9069e/go.mod h1:WVhlPFC8FDjOFMMWRy2pZqQJSXxYSwNYOkTr/Z6d3Kk=\ngithub.com/uber/jaeger-lib v1.2.1/go.mod h1:ComeNDZlWwrWnDv8aPp0Ba6+uUTzImX/AauajbLI56U=\ngithub.com/ugorji/go/codec v0.0.0-20181204163529-d75b2dcb6bc8/go.mod h1:VFNgLljTbGfSG7qAOspJ7OScBnGdDN/yBr0sguwnwf0=\ngithub.com/urfave/cli v0.0.0-20171014202726-7bc6a0acffa5 h1:MCfT24H3f//U5+UCrZp1/riVO3B50BovxtDiNn0XKkk=\ngithub.com/urfave/cli v0.0.0-20171014202726-7bc6a0acffa5/go.mod h1:70zkFmudgCuE/ngEzBv17Jvp/497gISqfk5gWijbERA=\ngithub.com/urfave/cli v1.22.2 h1:gsqYFH8bb9ekPA12kRo0hfjngWQjkJPlN9R0N78BoUo=\ngithub.com/urfave/cli v1.22.2/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/vishvananda/netlink v1.0.0 h1:bqNY2lgheFIu1meHUFSH3d7vG93AFyqg3oGbJCOJgSM=\ngithub.com/vishvananda/netlink v1.0.0/go.mod h1:+SR5DhBJrl6ZM7CoCKvpw5BKroDKQ+PJqOg65H/2ktk=\ngithub.com/vishvananda/netns v0.0.0-20180720170159-13995c7128cc h1:R83G5ikgLMxrBvLh22JhdfI8K6YXEPHx5P03Uu3DRs4=\ngithub.com/vishvananda/netns v0.0.0-20180720170159-13995c7128cc/go.mod h1:ZjcWmFBXmLKZu9Nxj3WKYEafiSqer2rnvPr0en9UNpI=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=\ngithub.com/xeipuuv/gojsonschema v0.0.0-20180618132009-1d523034197f/go.mod h1:5yf86TLmAcydyeJq5YvxkGPE2fm/u4myDekKRoLuqhs=\ngithub.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=\ngithub.com/yvasiyarov/go-metrics v0.0.0-20140926110328-57bccd1ccd43/go.mod h1:aX5oPXxHm3bOH+xeAttToC8pqch2ScQN/JoXYupl6xs=\ngithub.com/yvasiyarov/gorelic v0.0.0-20141212073537-a9bba5b9ab50/go.mod h1:NUSPSUX/bi6SeDMUh6brw0nXpxHnc96TguQh0+r/ssA=\ngithub.com/yvasiyarov/newrelic_platform_go v0.0.0-20140908184405-b21fdbd4370f/go.mod h1:GlGEuHIJweS1mbCqG+7vt2nvWLzLLnRHbXz5JKd/Qbg=\ngo.etcd.io/bbolt v1.3.3 h1:MUGmc65QhB3pIlaQ5bB4LwqSj6GIonVJXpZiaKNyaKk=\ngo.etcd.io/bbolt v1.3.3/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=\ngo.etcd.io/bbolt v1.3.5 h1:XAzx9gjCb0Rxj7EoqcClPD1d5ZBxZJk0jbuoPHenBt0=\ngo.etcd.io/bbolt v1.3.5/go.mod h1:G5EMThwa9y8QZGBClrRx5EY+Yw9kAhnjy3bSjsnlVTQ=\ngo.opencensus.io v0.22.0 h1:C9hSCOW830chIVkdja34wa6Ky+IzWllkUinR+BtRZd4=\ngo.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=\ngolang.org/x/crypto v0.0.0-20171113213409-9f005a07e0d3/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20180910181607-0e37d006457b/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20181203042331-505ab145d0a9/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20200128174031-69ecbb4d6d5d/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200221231518-2aa609cf4a9d h1:1ZiEyfaQIg3Qh0EoqpwAakHVhecoE5wlSg5GjnafJGw=\ngolang.org/x/crypto v0.0.0-20200221231518-2aa609cf4a9d/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/lint v0.0.0-20180702182130-06c8688daad7/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180925072008-f04abc6bdfa7 h1:zKzVgSQ8WOSHzD7I4k8LQjrHUUCNOlBsgc0PcYLVNnY=\ngolang.org/x/net v0.0.0-20180925072008-f04abc6bdfa7/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190619014844-b5b0513f8c1b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191004110552-13f9640d40b9/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b h1:0mm1VjtFUOIlE1SbDlwjYaDxZVDP2S5ou6y0gSgXHu8=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f h1:wMNYb4v58l5UBM7MYRLPG6ZhfOqbKu7X5eyFl8ZhKvA=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e h1:vcxGaoTs7kV8m5Np9uUNQin4BrLOthgV7252N8V+FwY=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180925112736-b09afc3d579e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181205085412-a5c9d58dba9a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190514135907-3a4b5fb9f71f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190522044717-8097e1b27ff5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190602015325-4c4f7f33c9ed/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191022100944-742c48ecaeb7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191115151921-52ab43148777/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191210023423-ac6580df4449/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200120151820-655fe14d7479/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae h1:/WDfKMnPU+m5M4xB+6x4kaepxRw6jWvR5iDRdvjHgy8=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2 h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/time v0.0.0-20180412165947-fbb02b2291d2 h1:+DCIGbF/swA92ohVg0//6X2IVY3KZs6p9mix0ziNYJM=\ngolang.org/x/time v0.0.0-20180412165947-fbb02b2291d2/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20191024005414-555d28b269f0 h1:/5xXl8Y5W96D+TtHSlonuFqGHIWVuyCkGJLwGh9JJFs=\ngolang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180828015842-6cd1fcedba52/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngoogle.golang.org/api v0.0.0-20160322025152-9bf6e6e569ff/go.mod h1:4mhQ8q/RsB7i+udVvVy5NUi08OU8ZlA0gRVgrF7VFY0=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/cloud v0.0.0-20151119220103-975617b05ea8/go.mod h1:0H1ncTHf11KCFhTc/+EFRbzSCOZx+VUbRMk55Yv5MYk=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20180924164928-221a8d4f7494 h1:WIJ3k0fGJRrCVzZTuGmcBnUzWeSDpWiP+jUOxWkA8bo=\ngoogle.golang.org/genproto v0.0.0-20180924164928-221a8d4f7494/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190522204451-c2c4e71fbf69/go.mod h1:z3L6/3dTEVtUr6QSP8miRzeRqwQOioJ9I66odjN4I7s=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20200117163144-32f20d992d24/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200227132054-3f1135a288c9 h1:Koy0f8zyrEVfIHetH7wjP5mQLUXiqDpubSg8V1fAxqc=\ngoogle.golang.org/genproto v0.0.0-20200227132054-3f1135a288c9/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/grpc v0.0.0-20160317175043-d3ddb4469d5a/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=\ngoogle.golang.org/grpc v1.15.0 h1:Az/KuahOM4NAidTEuJCv/RonAA7rYsTPkqXVjr+8OOw=\ngoogle.golang.org/grpc v1.15.0/go.mod h1:0JHn/cJsOMiMfNA9+DeHDlAU7KAAB5GDlYFpa9MZMio=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.21.0/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.23.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.24.0/go.mod h1:XDChyiUovWa60DnaeDeZmSW86xtLtjtZbwvSiRnRtcA=\ngoogle.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.1 h1:zvIju4sqAGvwKspUQOhwnpcqSbzi7/H6QomNNjTL4sk=\ngoogle.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngopkg.in/airbrake/gobrake.v2 v2.0.9/go.mod h1:/h5ZAUhDkGaJfjzjKLSjv6zCL6O0LLBxU4K+aSYdM/U=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20141024133853-64131543e789/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/fsnotify.v1 v1.4.7 h1:xOHLXZwVvI9hhs+cLKq5+I5onOuwQLhQwiu63xxlHs4=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/gemnasium/logrus-airbrake-hook.v2 v2.1.2/go.mod h1:Xk6kEKp8OKb+X14hQBKWaSkCsqBpgog8nAV2xsGOxlo=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4 h1:/eiJrUcujPVeJ3xlSWaiNi3uSVmDGBK1pDHUHAnao1I=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngotest.tools v2.1.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=\ngotest.tools v2.2.0+incompatible h1:VsBPFP1AI068pPrMxtb/S8Zkgf9xEmTLJjfM+P5UIEo=\ngotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=\ngotest.tools/v3 v3.0.2 h1:kG1BFyqVHuQoVQiR1bWGnfz/fmHvvuiSPIV7rvl360E=\ngotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=\nhonnef.co/go/tools v0.0.0-20180728063816-88497007e858/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nk8s.io/kubernetes v1.13.0/go.mod h1:ocZa8+6APFNC2tX1DZASIbocyYT5jHzqFVsY5aoB7Jk=\n"
        },
        {
          "name": "inspect.go",
          "type": "blob",
          "size": 1.7568359375,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\n\t\"github.com/containerd/containerd/namespaces\"\n\t\"github.com/genuinetools/img/client\"\n\t\"github.com/moby/buildkit/identity\"\n\t\"github.com/moby/buildkit/session\"\n)\n\nconst inspectUsageShortHelp = `Return the JSON-encoded OCI image config. The output format is not compatible with \"docker inspect\".`\nconst inspectUsageLongHelp = `Return the JSON-encoded OCI image config. The output format is not compatible with \"docker inspect\".`\n\nfunc newInspectCommand() *cobra.Command {\n\tinspect := &inspectCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"inspect NAME[:TAG]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 inspectUsageShortHelp,\n\t\tLong:                  inspectUsageLongHelp,\n\t\tArgs:                  inspect.ValidateArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn inspect.Run(args)\n\t\t},\n\t}\n\n\treturn cmd\n}\n\ntype inspectCommand struct {\n\timage string\n}\n\nfunc (cmd *inspectCommand) ValidateArgs(c *cobra.Command, args []string) error {\n\tif len(args) < 1 {\n\t\treturn fmt.Errorf(\"must pass an image to inspect\")\n\t}\n\n\treturn nil\n}\n\nfunc (cmd *inspectCommand) Run(args []string) (err error) {\n\treexec()\n\n\t// Get the specified image and target.\n\tcmd.image = args[0]\n\n\t// Create the context.\n\tid := identity.NewID()\n\tctx := session.NewContext(context.Background(), id)\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\timage, err := c.InspectImage(ctx, cmd.image)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfmted, err := json.MarshalIndent(image, \"\", \"\\t\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfmt.Println(string(fmted))\n\n\treturn nil\n}\n"
        },
        {
          "name": "inspect_test.go",
          "type": "blob",
          "size": 0.548828125,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n\t\"testing\"\n\n\tocispec \"github.com/opencontainers/image-spec/specs-go/v1\"\n)\n\nfunc TestInspectImage(t *testing.T) {\n\trunBuild(t, \"inspectthing\", withDockerfile(`\n    FROM busybox\n\tENTRYPOINT [\"echo\"]\n    `))\n\n\tout := run(t, \"inspect\", \"inspectthing\")\n\n\tvar image ocispec.Image\n\tif err := json.Unmarshal([]byte(out), &image); err != nil {\n\t\tt.Fatalf(\"error decoding JSON: %s\", err)\n\t}\n\n\tif !reflect.DeepEqual(image.Config.Entrypoint, []string{\"echo\"}) {\n\t\tt.Fatalf(\"expected entrypoint to be set: %#v\", image)\n\t}\n}\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "list.go",
          "type": "blob",
          "size": 1.857421875,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\t\"os\"\n\t\"text/tabwriter\"\n\t\"time\"\n\n\t\"github.com/containerd/containerd/namespaces\"\n\t\"github.com/docker/go-units\"\n\t\"github.com/genuinetools/img/client\"\n\t\"github.com/moby/buildkit/identity\"\n\t\"github.com/moby/buildkit/session\"\n)\n\nconst listUsageShortHelp = `List images and digests.`\nconst listUsageLongHelp = `List images and digests.`\n\nfunc newListCommand() *cobra.Command {\n\n\tlist := &listCommand{\n\t\tfilters: newListValue(),\n\t}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"ls [OPTIONS]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 listUsageShortHelp,\n\t\tLong:                  listUsageLongHelp,\n\t\tArgs:                  validateHasNoArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn list.Run(args)\n\t\t},\n\t}\n\n\tfs := cmd.Flags()\n\n\tfs.VarP(list.filters, \"filter\", \"f\", \"Filter output based on conditions provided\")\n\n\treturn cmd\n}\n\ntype listCommand struct {\n\tfilters *listValue\n}\n\nfunc (cmd *listCommand) Run(args []string) (err error) {\n\treexec()\n\n\t// Create the context.\n\tid := identity.NewID()\n\tctx := session.NewContext(context.Background(), id)\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\timages, err := c.ListImages(ctx, cmd.filters.GetAll()...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttw := tabwriter.NewWriter(os.Stdout, 1, 8, 1, '\\t', 0)\n\n\tfmt.Fprintln(tw, \"NAME\\tSIZE\\tCREATED AT\\tUPDATED AT\\tDIGEST\")\n\n\tfor _, image := range images {\n\t\tfmt.Fprintf(tw, \"%s\\t%s\\t%s\\t%s\\t%s\\n\",\n\t\t\timage.Name,\n\t\t\tunits.BytesSize(float64(image.ContentSize)),\n\t\t\tunits.HumanDuration(time.Now().UTC().Sub(image.CreatedAt))+\" ago\",\n\t\t\tunits.HumanDuration(time.Now().UTC().Sub(image.UpdatedAt))+\" ago\",\n\t\t\timage.Target.Digest,\n\t\t)\n\t}\n\n\ttw.Flush()\n\n\treturn nil\n}\n"
        },
        {
          "name": "login.go",
          "type": "blob",
          "size": 6.4052734375,
          "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/docker/cli/cli/config\"\n\t\"github.com/docker/cli/cli/config/configfile\"\n\t\"github.com/docker/cli/cli/config/types\"\n\tdockerapitypes \"github.com/docker/docker/api/types\"\n\t\"github.com/docker/docker/pkg/term\"\n\t\"github.com/docker/docker/registry\"\n\tregistryapi \"github.com/genuinetools/reg/registry\"\n\t\"github.com/sirupsen/logrus\"\n)\n\nconst loginUsageShortHelp = `Log in to a Docker registry.`\n\nvar loginUsageLongHelp = loginUsageShortHelp + fmt.Sprintf(\"\\n\\nIf no server is specified, the default (%s) is used.\", defaultDockerRegistry)\n\nfunc newLoginCommand() *cobra.Command {\n\n\tlogin := &loginCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"login [OPTIONS] [SERVER]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 loginUsageShortHelp,\n\t\tLong:                  loginUsageLongHelp,\n\t\tArgs:                  login.ValidateArgs(),\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn login.Run(args)\n\t\t},\n\t}\n\n\tfs := cmd.Flags()\n\n\tfs.StringVarP(&login.user, \"username\", \"u\", \"\", \"Username\")\n\tfs.StringVarP(&login.password, \"password\", \"p\", \"\", \"Password\")\n\tfs.BoolVar(&login.passwordStdin, \"password-stdin\", false, \"Take the password from stdin\")\n\n\treturn cmd\n}\n\ntype loginCommand struct {\n\tuser          string\n\tpassword      string\n\tpasswordStdin bool\n\n\tserverAddress string\n}\n\nfunc (cmd *loginCommand) ValidateArgs() cobra.PositionalArgs {\n\treturn func(_ *cobra.Command, args []string) error {\n\t\tif cmd.password != \"\" {\n\t\t\tlogrus.Warnf(\"WARNING! Using --password via the CLI is insecure. Use --password-stdin.\")\n\t\t\tif cmd.passwordStdin {\n\t\t\t\treturn errors.New(\"--password and --password-stdin are mutually exclusive\")\n\t\t\t}\n\t\t}\n\n\t\t// Handle when the password is coming over stdin.\n\t\tif cmd.passwordStdin {\n\t\t\tif cmd.user == \"\" {\n\t\t\t\treturn errors.New(\"must provide --username with --password-stdin\")\n\t\t\t}\n\n\t\t\t// Read from stadin.\n\t\t\tcontents, err := ioutil.ReadAll(os.Stdin)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tcmd.password = strings.TrimSuffix(string(contents), \"\\n\")\n\t\t\tcmd.password = strings.TrimSuffix(cmd.password, \"\\r\")\n\t\t}\n\n\t\tif len(args) > 0 {\n\t\t\tcmd.serverAddress = args[0]\n\t\t}\n\n\t\t// Set the default registry server address.\n\t\tif cmd.serverAddress == \"\" {\n\t\t\tcmd.serverAddress = defaultDockerRegistry\n\t\t}\n\n\t\treturn nil\n\t}\n}\n\nfunc (cmd *loginCommand) Run(args []string) error {\n\n\t// Get the auth config.\n\tdcfg, authConfig, err := configureAuth(cmd.user, cmd.password, cmd.serverAddress)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Attempt to login to the registry.\n\tr, err := registryapi.New(cliconfigtypes2dockerapitypes(authConfig), registryapi.Opt{Debug: debug})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating registry client failed: %v\", err)\n\t}\n\ttoken, err := r.Token(r.URL)\n\tif err != nil && err != registryapi.ErrBasicAuth {\n\t\treturn fmt.Errorf(\"getting registry token failed: %v\", err)\n\t}\n\n\t// Configure the token.\n\tif token != \"\" {\n\t\tauthConfig.Password = \"\"\n\t\tauthConfig.IdentityToken = token\n\t}\n\n\t// Save the config value.\n\tif err := dcfg.GetCredentialsStore(authConfig.ServerAddress).Store(authConfig); err != nil {\n\t\treturn fmt.Errorf(\"saving credentials failed: %v\", err)\n\t}\n\n\tfmt.Println(\"Login succeeded.\")\n\n\treturn nil\n}\n\n// configureAuth returns an types.AuthConfig from the specified user, password and server.\nfunc configureAuth(flUser, flPassword, serverAddress string) (*configfile.ConfigFile, types.AuthConfig, error) {\n\tif serverAddress != defaultDockerRegistry {\n\t\tserverAddress = registry.ConvertToHostname(serverAddress)\n\t}\n\n\tdcfg, err := config.Load(config.Dir())\n\tif err != nil {\n\t\treturn dcfg, types.AuthConfig{}, fmt.Errorf(\"loading config file failed: %v\", err)\n\t}\n\tauthConfig, err := dcfg.GetAuthConfig(serverAddress)\n\tif err != nil {\n\t\treturn dcfg, authConfig, fmt.Errorf(\"getting auth config for %s failed: %v\", serverAddress, err)\n\t}\n\n\t// A credential helper is being used to populate authentication.\n\tif dcfg.CredentialHelpers[serverAddress] != \"\" && authConfig.Password != \"\" && authConfig.Username != \"\" && flUser == \"\" && flPassword == \"\" {\n\t\treturn dcfg, authConfig, nil\n\t}\n\n\t_, isTerminal := term.GetFdInfo(os.Stdin)\n\tif flPassword == \"\" && !isTerminal {\n\t\treturn dcfg, authConfig, errors.New(\"cannot perform an interactive login from a non TTY device\")\n\t}\n\n\tauthConfig.Username = strings.TrimSpace(authConfig.Username)\n\n\tif flUser = strings.TrimSpace(flUser); flUser == \"\" {\n\t\tif serverAddress == defaultDockerRegistry {\n\t\t\t// if this is a default registry (docker hub), then display the following message.\n\t\t\tfmt.Printf(\"Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\\n\")\n\t\t}\n\t\tpromptWithDefault(os.Stdout, \"Username\", authConfig.Username)\n\t\tflUser = readInput(os.Stdin)\n\t\tflUser = strings.TrimSpace(flUser)\n\t\tif flUser == \"\" {\n\t\t\tflUser = authConfig.Username\n\t\t}\n\t}\n\tif flUser == \"\" {\n\t\treturn dcfg, authConfig, fmt.Errorf(\"username cannot be empty\")\n\t}\n\tif flPassword == \"\" {\n\t\toldState, err := term.SaveState(os.Stdin.Fd())\n\t\tif err != nil {\n\t\t\treturn dcfg, authConfig, err\n\t\t}\n\t\tfmt.Fprintf(os.Stdout, \"Password: \")\n\t\tterm.DisableEcho(os.Stdin.Fd(), oldState)\n\n\t\tflPassword = readInput(os.Stdin)\n\t\tfmt.Fprint(os.Stdout, \"\\n\")\n\n\t\tif err := term.RestoreTerminal(os.Stdin.Fd(), oldState); err != nil {\n\t\t\treturn dcfg, authConfig, fmt.Errorf(\"restoring old terminal failed: %v\", err)\n\t\t}\n\t\tif flPassword == \"\" {\n\t\t\treturn dcfg, authConfig, fmt.Errorf(\"password is required\")\n\t\t}\n\t}\n\n\tauthConfig.Username = flUser\n\tauthConfig.Password = flPassword\n\tauthConfig.ServerAddress = serverAddress\n\tauthConfig.IdentityToken = \"\"\n\n\treturn dcfg, authConfig, nil\n}\n\nfunc readInput(in io.Reader) string {\n\treader := bufio.NewReader(in)\n\tline, _, err := reader.ReadLine()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"reading input failed: %v\", err)\n\t\tos.Exit(1)\n\t}\n\n\treturn string(line)\n}\n\nfunc promptWithDefault(out io.Writer, prompt string, configDefault string) {\n\tif configDefault == \"\" {\n\t\tfmt.Fprintf(out, \"%s: \", prompt)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(out, \"%s (%s): \", prompt, configDefault)\n}\n\nfunc cliconfigtypes2dockerapitypes(in types.AuthConfig) dockerapitypes.AuthConfig {\n\treturn dockerapitypes.AuthConfig{\n\t\tUsername:      in.Username,\n\t\tPassword:      in.Password,\n\t\tAuth:          in.Auth,\n\t\tEmail:         in.Email,\n\t\tServerAddress: in.ServerAddress,\n\t\tIdentityToken: in.IdentityToken,\n\t\tRegistryToken: in.RegistryToken,\n\t}\n}\n"
        },
        {
          "name": "logout.go",
          "type": "blob",
          "size": 2.0107421875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\t\"os\"\n\n\t\"github.com/docker/cli/cli/config\"\n\t\"github.com/docker/docker/registry\"\n)\n\nconst logoutShortHelp = `Log out from a Docker registry.`\n\nvar logoutLongHelp = logoutShortHelp + fmt.Sprintf(\"\\n\\nIf no server is specified, the default (%s) is used.\", defaultDockerRegistry)\n\nfunc newLogoutCommand() *cobra.Command {\n\n\tlogout := &logoutCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"logout [SERVER]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 logoutShortHelp,\n\t\tLong:                  logoutLongHelp,\n\t\tArgs:                  logout.ValidateArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn logout.Run(args)\n\t\t},\n\t}\n\n\treturn cmd\n}\n\ntype logoutCommand struct {\n\tserverAddress string\n}\n\nfunc (cmd *logoutCommand) ValidateArgs(c *cobra.Command, args []string) error {\n\tif len(args) > 1 {\n\t\treturn fmt.Errorf(\"logout expects zero or one arguments, found %d\", len(args))\n\t}\n\n\treturn nil\n}\n\nfunc (cmd *logoutCommand) Run(args []string) error {\n\tif len(args) > 0 {\n\t\tcmd.serverAddress = args[0]\n\t}\n\n\t// Set the default registry server address.\n\tif cmd.serverAddress == \"\" {\n\t\tcmd.serverAddress = defaultDockerRegistry\n\t} else {\n\t\tcmd.serverAddress = registry.ConvertToHostname(cmd.serverAddress)\n\t}\n\n\tdcfg, err := config.Load(config.Dir())\n\tif err != nil {\n\t\treturn fmt.Errorf(\"loading config file failed: %v\", err)\n\t}\n\n\t// check if we're logged in based on the records in the config file\n\t// which means it couldn't have user/pass cause they may be in the creds store\n\tif _, loggedIn := dcfg.AuthConfigs[cmd.serverAddress]; !loggedIn {\n\t\tfmt.Fprintf(os.Stdout, \"Not logged in to %s\\n\", cmd.serverAddress)\n\t\treturn nil\n\t}\n\n\tfmt.Fprintf(os.Stdout, \"Removing login credentials for %s\\n\", cmd.serverAddress)\n\tif err := dcfg.GetCredentialsStore(cmd.serverAddress).Erase(cmd.serverAddress); err != nil {\n\t\tfmt.Fprintf(os.Stdout, \"WARNING: could not erase credentials: %v\\n\", err)\n\t}\n\n\tfmt.Println(\"Logout succeeded.\")\n\n\treturn nil\n}\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 4.1533203125,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/genuinetools/img/internal/binutils\"\n\t_ \"github.com/genuinetools/img/internal/unshare\"\n\t\"github.com/genuinetools/img/types\"\n\t\"github.com/genuinetools/img/version\"\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/spf13/cobra\"\n)\n\nconst (\n\tdefaultBackend        = types.AutoBackend\n\tdefaultDockerRegistry = \"https://index.docker.io/v1/\"\n\tdefaultDockerfileName = \"Dockerfile\"\n)\n\nvar (\n\tbackend  string\n\tstateDir string\n\tdebug    bool\n\n\tvalidBackends = []string{types.AutoBackend, types.NativeBackend, types.OverlayFSBackend, types.FUSEOverlayFSBackend}\n)\n\nconst rootHelpTemplate = `{{if or .Runnable .HasSubCommands}}{{.UsageString}}{{end}}`\n\nconst rootUsageTemplate = `{{.Name}} -  {{.Short}}\n\nUsage: {{if .Runnable}}{{.UseLine}}{{end}}{{if .HasAvailableLocalFlags}}\n\nFlags:\n{{.LocalFlags.FlagUsages | trimTrailingWhitespaces}}{{end}}{{if .HasAvailableInheritedFlags}}\n\nGlobal Flags:\n{{.InheritedFlags.FlagUsages | trimTrailingWhitespaces}}{{end}}{{if .HasAvailableSubCommands}}\n\nCommands:{{range .Commands}}{{if (or .IsAvailableCommand (eq .Name \"help\"))}}\n  {{rpad .Name .NamePadding }} {{.Short}}{{end}}{{end}}{{end}}{{if .HasHelpSubCommands}}\n\nAdditional help topics:{{range .Commands}}{{if .IsAdditionalHelpTopicCommand}}\n  {{rpad .CommandPath .CommandPathPadding}} {{.Short}}{{end}}{{end}}{{end}}{{if .HasAvailableSubCommands}}\n\nUse \"{{.CommandPath}} [command] --help\" for more information about a command.{{end}}\n`\n\nfunc main() {\n\tvar printVersionAndExit bool\n\n\tcmd := &cobra.Command{\n\t\tUse:              \"img [OPTIONS] COMMAND [ARG...]\",\n\t\tShort:            \"Standalone, daemon-less, unprivileged Dockerfile and OCI compatible container image builder\",\n\t\tTraverseChildren: true,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\tif len(args) == 0 {\n\t\t\t\treturn cmd.Help()\n\t\t\t}\n\t\t\treturn fmt.Errorf(\"img: '%s' is not an img command.\\nSee 'img --help'\", args[0])\n\n\t\t},\n\t\tVersion:               fmt.Sprintf(\"%s, build %s\", version.VERSION, version.GITCOMMIT),\n\t\tDisableFlagsInUseLine: true,\n\t}\n\n\tcmd.SetHelpTemplate(rootHelpTemplate)\n\tcmd.SetUsageTemplate(rootUsageTemplate)\n\n\tcmd.AddCommand(\n\t\tnewBuildCommand(),\n\t\tnewDiskUsageCommand(),\n\t\tnewInspectCommand(),\n\t\tnewListCommand(),\n\t\tnewLoginCommand(),\n\t\tnewLogoutCommand(),\n\t\tnewPruneCommand(),\n\t\tnewPullCommand(),\n\t\tnewPushCommand(),\n\t\tnewRemoveCommand(),\n\t\tnewSaveCommand(),\n\t\tnewTagCommand(),\n\t\tnewUnpackCommand(),\n\t\tnewVersionCommand(),\n\t)\n\n\tdefaultStateDir := defaultStateDirectory()\n\n\t// Version flag\n\tcmd.Flags().BoolVarP(&printVersionAndExit, \"version\", \"v\", false, \"Print version information and quit\")\n\n\t// Setup the global flags.\n\tflags := cmd.PersistentFlags()\n\tflags.BoolVarP(&debug, \"debug\", \"d\", false, \"enable debug logging\")\n\tflags.StringVarP(&backend, \"backend\", \"b\", defaultBackend, fmt.Sprintf(\"backend for snapshots (%v)\", validBackends))\n\tflags.StringVarP(&stateDir, \"state\", \"s\", defaultStateDir, \"directory to hold the global state\")\n\n\t// Set the before function.\n\tcmd.PersistentPreRunE = func(cmd *cobra.Command, args []string) error {\n\t\tif printVersionAndExit {\n\t\t\tfmt.Printf(\"img %s, build %s\", version.VERSION, version.GITCOMMIT)\n\t\t\tos.Exit(0)\n\t\t}\n\n\t\t// Set the log level.\n\t\tif debug {\n\t\t\tlogrus.SetLevel(logrus.DebugLevel)\n\t\t}\n\n\t\t// Make sure we have a valid backend.\n\t\tfound := false\n\t\tfor _, vb := range validBackends {\n\t\t\tif vb == backend {\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\treturn fmt.Errorf(\"%s is not a valid snapshots backend\", backend)\n\t\t}\n\n\t\t// check that runc is available\n\t\tb := binutils.BinaryAvailabilityCheck{\n\t\t\tStateDir:            stateDir,\n\t\t\tDisableEmbeddedRunc: len(os.Getenv(\"IMG_DISABLE_EMBEDDED_RUNC\")) > 0,\n\t\t}\n\t\terr := b.EnsureRuncIsAvailable()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn nil\n\t}\n\n\t// Run our program.\n\tif err := cmd.Execute(); err != nil {\n\t\tos.Exit(1)\n\t}\n}\n\nfunc defaultStateDirectory() string {\n\t//  pam_systemd sets XDG_RUNTIME_DIR but not other dirs.\n\txdgDataHome := os.Getenv(\"XDG_DATA_HOME\")\n\tif xdgDataHome != \"\" {\n\t\tdirs := strings.Split(xdgDataHome, \":\")\n\t\treturn filepath.Join(dirs[0], \"img\")\n\t}\n\thome := os.Getenv(\"HOME\")\n\tif home != \"\" {\n\t\treturn filepath.Join(home, \".local\", \"share\", \"img\")\n\t}\n\treturn \"/tmp/img\"\n}\n"
        },
        {
          "name": "main_test.go",
          "type": "blob",
          "size": 2.43359375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"runtime\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n)\n\nvar (\n\t// exeSuffix is the suffix of executable files; \".exe\" on Windows.\n\texeSuffix string\n\t// stateDir is the temporary state directory used for the tests.\n\ttestStateDir string\n\n\tmu sync.Mutex\n)\n\nfunc init() {\n\tswitch runtime.GOOS {\n\tcase \"windows\":\n\t\texeSuffix = \".exe\"\n\t}\n}\n\n// The TestMain function creates a img command for testing purposes and\n// deletes it after the tests have been run.\nfunc TestMain(m *testing.M) {\n\tos.Unsetenv(\"IMG_RUNNING_TESTS\")\n\targs := []string{\"build\", \"-tags\", \"dfrunmount dfsecrets dfssh\", \"-o\", \"testimg\" + exeSuffix}\n\tout, err := exec.Command(\"go\", args...).CombinedOutput()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"building testimg failed: %v\\n%s\\n\", err, out)\n\t\tos.Exit(2)\n\t}\n\n\t// Create the temporary state directory.\n\ttestStateDir, err = ioutil.TempDir(\"\", \"img-test\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"create temporary directory failed: %v\\n\", err)\n\t\tos.Exit(2)\n\t}\n\tdefer os.RemoveAll(testStateDir)\n\n\tr := m.Run()\n\n\tos.Remove(\"testimg\" + exeSuffix)\n\n\tos.Exit(r)\n}\n\n// doRun runs the test command, recording stdout and stderr and\n// returning exit status.\nfunc doRun(args []string, stdin io.Reader) (string, error) {\n\tprog := \"./testimg\" + exeSuffix\n\n\tnewargs := []string{args[0], \"--state\", testStateDir}\n\tnewargs = append(newargs, args[1:]...)\n\n\t// TODO(genuinetools): the sudo here is horrible, I know.\n\tcmd := exec.Command(prog, newargs...)\n\tif stdin != nil {\n\t\tcmd.Stdin = stdin\n\t}\n\tout, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\treturn string(out), fmt.Errorf(\"Error running %s: %s\\n%v\", strings.Join(newargs, \" \"), string(out), err)\n\t}\n\n\treturn string(out), nil\n}\n\n// run runs the test command, and expects it to succeed.\nfunc run(t *testing.T, args ...string) string {\n\tif runtime.GOOS == \"windows\" {\n\t\tmu.Lock()\n\t\tdefer mu.Unlock()\n\t}\n\n\tout, err := doRun(args, nil)\n\tif err != nil {\n\t\tt.Logf(\"img %v failed unexpectedly: %v\", args, err)\n\t\tt.FailNow()\n\t}\n\n\treturn out\n}\n\nfunc runBuild(t *testing.T, name string, stdin io.Reader) {\n\tif runtime.GOOS == \"windows\" {\n\t\tmu.Lock()\n\t\tdefer mu.Unlock()\n\t}\n\n\tbuildCtx := \".\"\n\tif stdin != nil {\n\t\tbuildCtx = \"-\"\n\t}\n\targs := []string{\"build\", \"-t\", name, buildCtx}\n\tif _, err := doRun(args, stdin); err != nil {\n\t\tt.Logf(\"img %v failed unexpectedly: %v\", args, err)\n\t\tt.FailNow()\n\t}\n}\n\nfunc withDockerfile(dockerfile string) io.Reader {\n\treturn strings.NewReader(dockerfile)\n}\n"
        },
        {
          "name": "prune.go",
          "type": "blob",
          "size": 2.0751953125,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\t\"os\"\n\t\"text/tabwriter\"\n\n\t\"github.com/containerd/containerd/namespaces\"\n\t\"github.com/docker/go-units\"\n\t\"github.com/genuinetools/img/client\"\n\t\"github.com/moby/buildkit/identity\"\n\t\"github.com/moby/buildkit/session\"\n)\n\nconst pruneUsageShortHelp = `Prune and clean up the build cache.`\nconst pruneUsageLongHelp = `Prune and clean up the build cache.`\n\nfunc newPruneCommand() *cobra.Command {\n\tprune := &pruneCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"prune [OPTIONS]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 pruneUsageShortHelp,\n\t\tLong:                  pruneUsageLongHelp,\n\t\tArgs:                  validateHasNoArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn prune.Run(args)\n\t\t},\n\t}\n\n\treturn cmd\n}\n\ntype pruneCommand struct{}\n\nfunc (cmd *pruneCommand) Run(args []string) (err error) {\n\treexec()\n\n\t// Create the context.\n\tid := identity.NewID()\n\tctx := session.NewContext(context.Background(), id)\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\tusage, err := c.Prune(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttw := tabwriter.NewWriter(os.Stdout, 1, 8, 1, '\\t', 0)\n\n\tif debug {\n\t\tprintDebug(tw, usage)\n\t} else {\n\t\tfmt.Fprintln(tw, \"ID\\tRECLAIMABLE\\tSIZE\\tDESCRIPTION\")\n\n\t\tfor _, di := range usage {\n\t\t\tid := di.ID\n\t\t\tif di.Mutable {\n\t\t\t\tid += \"*\"\n\t\t\t}\n\t\t\tdesc := di.Description\n\t\t\tif len(desc) > 50 {\n\t\t\t\tdesc = desc[0:50] + \"...\"\n\t\t\t}\n\t\t\tfmt.Fprintf(tw, \"%s\\t%t\\t%s\\t%s\\n\", id, !di.InUse, units.BytesSize(float64(di.Size_)), desc)\n\t\t}\n\n\t\ttw.Flush()\n\t}\n\n\ttotal := int64(0)\n\treclaimable := int64(0)\n\n\tfor _, di := range usage {\n\t\tif di.Size_ > 0 {\n\t\t\ttotal += di.Size_\n\t\t\tif !di.InUse {\n\t\t\t\treclaimable += di.Size_\n\t\t\t}\n\t\t}\n\t}\n\n\ttw = tabwriter.NewWriter(os.Stdout, 1, 8, 1, '\\t', 0)\n\tfmt.Fprintf(tw, \"Reclaimed:\\t%s\\n\", units.BytesSize(float64(reclaimable)))\n\tfmt.Fprintf(tw, \"Total:\\t%s\\n\", units.BytesSize(float64(total)))\n\ttw.Flush()\n\n\treturn nil\n}\n"
        },
        {
          "name": "pull.go",
          "type": "blob",
          "size": 2.015625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\n\t\"github.com/containerd/containerd/namespaces\"\n\t\"github.com/docker/go-units\"\n\t\"github.com/genuinetools/img/client\"\n\t\"github.com/moby/buildkit/session\"\n\t\"github.com/moby/buildkit/util/appcontext\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\nconst pullUsageShortHelp = `Pull an image or a repository from a registry.`\nconst pullUsageLongHelp = `Pull an image or a repository from a registry.`\n\nfunc newPullCommand() *cobra.Command {\n\n\tpull := &pullCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"pull [OPTIONS] NAME[:TAG|@DIGEST]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 pullUsageShortHelp,\n\t\tLong:                  pullUsageLongHelp,\n\t\tArgs:                  validatePullImageArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn pull.Run(args)\n\t\t},\n\t}\n\n\treturn cmd\n}\n\nfunc validatePullImageArgs(cmd *cobra.Command, args []string) error {\n\tif len(args) < 1 {\n\t\treturn fmt.Errorf(\"must pass an image or repository to pull\")\n\t}\n\n\treturn nil\n}\n\ntype pullCommand struct {\n\timage string\n}\n\nfunc (cmd *pullCommand) Run(args []string) (err error) {\n\treexec()\n\n\t// Get the specified image.\n\tcmd.image = args[0]\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\tfmt.Printf(\"Pulling %s...\\n\", cmd.image)\n\n\tvar listedImage *client.ListedImage\n\t// Create the context.\n\tctx := appcontext.Context()\n\tsess, sessDialer, err := c.Session(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tctx = session.NewContext(ctx, sess.ID())\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\teg, ctx := errgroup.WithContext(ctx)\n\n\teg.Go(func() error {\n\t\treturn sess.Run(ctx, sessDialer)\n\t})\n\teg.Go(func() error {\n\t\tdefer sess.Close()\n\t\tvar err error\n\t\tlistedImage, err = c.Pull(ctx, cmd.image)\n\t\treturn err\n\t})\n\tif err := eg.Wait(); err != nil {\n\t\treturn err\n\t}\n\n\tfmt.Printf(\"Pulled: %s\\n\", listedImage.Target.Digest)\n\tfmt.Printf(\"Size: %s\\n\", units.BytesSize(float64(listedImage.ContentSize)))\n\n\treturn nil\n}\n"
        },
        {
          "name": "pull_test.go",
          "type": "blob",
          "size": 1.041015625,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"strings\"\n\t\"testing\"\n\n\tocispec \"github.com/opencontainers/image-spec/specs-go/v1\"\n)\n\nfunc TestPullFromDefaultRegistry(t *testing.T) {\n\t// Test a user repo on docker hub.\n\trun(t, \"pull\", \"jess/stress\")\n}\n\nfunc TestPullFromSelfHostedRegistry(t *testing.T) {\n\t// Test a repo on a private registry.\n\trun(t, \"pull\", \"r.j3ss.co/stress\")\n}\n\nfunc TestPullOfficialImage(t *testing.T) {\n\t// Test an official image,\n\trun(t, \"pull\", \"alpine\")\n}\n\nfunc TestPullIsInListOutput(t *testing.T) {\n\t// Test an official image,\n\trun(t, \"pull\", \"busybox\")\n\n\tout := run(t, \"ls\")\n\tif !strings.Contains(out, \"busybox:latest\") {\n\t\tt.Fatalf(\"expected busybox:latest in ls output, got: %s\", out)\n\t}\n}\n\nfunc TestPullRetainsConfig(t *testing.T) {\n\t// Test an official image,\n\trun(t, \"pull\", \"alpine\")\n\n\tout := run(t, \"inspect\", \"alpine\")\n\n\tvar image ocispec.Image\n\tif err := json.Unmarshal([]byte(out), &image); err != nil {\n\t\tt.Fatalf(\"error decoding JSON: %s\", err)\n\t}\n\n\tif len(image.Config.Cmd) == 0 {\n\t\tt.Fatal(\"image config should be populated\")\n\t}\n}\n"
        },
        {
          "name": "push.go",
          "type": "blob",
          "size": 1.9580078125,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\n\t\"github.com/containerd/containerd/namespaces\"\n\t\"github.com/genuinetools/img/client\"\n\t\"github.com/moby/buildkit/session\"\n\t\"github.com/moby/buildkit/util/appcontext\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\nconst pushUsageShortHelp = `Push an image or a repository to a registry.`\nconst pushUsageLongHelp = `Push an image or a repository to a registry.`\n\nfunc newPushCommand() *cobra.Command {\n\n\tpush := &pushCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"push [OPTIONS] NAME[:TAG]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 pushUsageShortHelp,\n\t\tLong:                  pushUsageLongHelp,\n\t\tArgs:                  push.ValidateArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn push.Run(args)\n\t\t},\n\t}\n\n\tfs := cmd.Flags()\n\n\tfs.BoolVar(&push.insecure, \"insecure-registry\", false, \"Push to insecure registry\")\n\n\treturn cmd\n}\n\ntype pushCommand struct {\n\timage    string\n\tinsecure bool\n}\n\nfunc (cmd *pushCommand) ValidateArgs(c *cobra.Command, args []string) error {\n\tif len(args) < 1 {\n\t\treturn fmt.Errorf(\"must pass an image or repository to push\")\n\t}\n\n\treturn nil\n}\n\nfunc (cmd *pushCommand) Run(args []string) (err error) {\n\treexec()\n\n\t// Get the specified image.\n\tcmd.image = args[0]\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\tfmt.Printf(\"Pushing %s...\\n\", cmd.image)\n\n\t// Create the context.\n\tctx := appcontext.Context()\n\tsess, sessDialer, err := c.Session(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tctx = session.NewContext(ctx, sess.ID())\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\teg, ctx := errgroup.WithContext(ctx)\n\n\teg.Go(func() error {\n\t\treturn sess.Run(ctx, sessDialer)\n\t})\n\teg.Go(func() error {\n\t\tdefer sess.Close()\n\t\treturn c.Push(ctx, cmd.image, cmd.insecure)\n\t})\n\tif err := eg.Wait(); err != nil {\n\t\treturn err\n\t}\n\n\tfmt.Printf(\"Successfully pushed %s\\n\", cmd.image)\n\n\treturn nil\n}\n"
        },
        {
          "name": "reexec.go",
          "type": "blob",
          "size": 1.9423828125,
          "content": "package main\n\nimport (\n\t\"os\"\n\t\"os/exec\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"github.com/opencontainers/runc/libcontainer/system\"\n\t\"github.com/sirupsen/logrus\"\n)\n\nfunc reexec() {\n\t// TODO(jessfraz): This is a hack to re-exec our selves and wait for the\n\t// process since it was not exiting correctly with the constructor.\n\tif len(os.Getenv(\"IMG_RUNNING_TESTS\")) <= 0 && len(os.Getenv(\"IMG_DO_UNSHARE\")) <= 0 && system.GetParentNSeuid() != 0 {\n\t\tvar (\n\t\t\tpgid int\n\t\t\terr  error\n\t\t)\n\n\t\t// On ^C, or SIGTERM handle exit.\n\t\tc := make(chan os.Signal)\n\t\tsignal.Notify(c, os.Interrupt, syscall.SIGTERM)\n\t\tgo func() {\n\t\t\tfor sig := range c {\n\t\t\t\tlogrus.Infof(\"Received %s, exiting.\", sig.String())\n\t\t\t\tif err := syscall.Kill(-pgid, syscall.SIGKILL); err != nil {\n\t\t\t\t\tlogrus.Fatalf(\"syscall.Kill %d error: %v\", pgid, err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tos.Exit(0)\n\t\t\t}\n\t\t}()\n\n\t\t// If newuidmap is not present re-exec will fail\n\t\tif _, err := exec.LookPath(\"newuidmap\"); err != nil {\n\t\t\tlogrus.Fatalf(\"newuidmap not found (install uidmap package?): %v\", err)\n\t\t}\n\n\t\t// Initialize and re-exec with our unshare.\n\t\tcmd := exec.Command(\"/proc/self/exe\", os.Args[1:]...)\n\t\tcmd.Env = append(os.Environ(), \"IMG_DO_UNSHARE=1\")\n\t\tcmd.Stdin = os.Stdin\n\t\tcmd.Stdout = os.Stdout\n\t\tcmd.Stderr = os.Stderr\n\t\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\t\tSetpgid: true,\n\t\t}\n\t\tif err := cmd.Start(); err != nil {\n\t\t\tlogrus.Fatalf(\"cmd.Start error: %v\", err)\n\t\t}\n\n\t\tpgid, err = syscall.Getpgid(cmd.Process.Pid)\n\t\tif err != nil {\n\t\t\tlogrus.Fatalf(\"getpgid error: %v\", err)\n\t\t}\n\n\t\tvar (\n\t\t\tws       syscall.WaitStatus\n\t\t\texitCode int\n\t\t)\n\t\tfor {\n\t\t\t// Store the exitCode before calling wait so we get the real one.\n\t\t\texitCode = ws.ExitStatus()\n\t\t\t_, err := syscall.Wait4(-pgid, &ws, syscall.WNOHANG, nil)\n\t\t\tif err != nil {\n\t\t\t\tif err.Error() == \"no child processes\" {\n\t\t\t\t\t// We exited. We need to pass the correct error code from\n\t\t\t\t\t// the child.\n\t\t\t\t\tos.Exit(exitCode)\n\t\t\t\t}\n\n\t\t\t\tlogrus.Fatalf(\"wait4 error: %v\", err)\n\t\t\t}\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "remove.go",
          "type": "blob",
          "size": 1.572265625,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\n\t\"github.com/containerd/containerd/namespaces\"\n\t\"github.com/genuinetools/img/client\"\n\t\"github.com/moby/buildkit/identity\"\n\t\"github.com/moby/buildkit/session\"\n)\n\nconst removeUsageShortHelp = `Remove one or more images.`\nconst removeUsageLongHelp = `Remove one or more images.`\n\nfunc newRemoveCommand() *cobra.Command {\n\n\tremove := &removeCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"rm [OPTIONS] IMAGE [IMAGE...]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 removeUsageShortHelp,\n\t\tLong:                  removeUsageLongHelp,\n\t\tArgs:                  remove.ValidateArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn remove.Run(args)\n\t\t},\n\t}\n\n\treturn cmd\n}\n\ntype removeCommand struct{}\n\nfunc (cmd *removeCommand) ValidateArgs(c *cobra.Command, args []string) error {\n\tif len(args) < 1 {\n\t\treturn fmt.Errorf(\"must pass an image to remove\")\n\t}\n\n\treturn nil\n}\n\nfunc (cmd *removeCommand) Run(args []string) (err error) {\n\treexec()\n\n\t// Create the context.\n\tid := identity.NewID()\n\tctx := session.NewContext(context.Background(), id)\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\t// Loop over the arguments as images and run remove.\n\tfor _, image := range args {\n\t\tfmt.Printf(\"Removing %s...\\n\", image)\n\n\t\terr = c.RemoveImage(ctx, image)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tfmt.Printf(\"Successfully removed %s\\n\", image)\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "remove_test.go",
          "type": "blob",
          "size": 1.0361328125,
          "content": "package main\n\nimport (\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestRemoveBuiltImage(t *testing.T) {\n\tname := \"testremoveimage\"\n\n\trunBuild(t, name, withDockerfile(`\n    FROM busybox\n    CMD echo test\n    `))\n\n\t// make sure our new image is there\n\tout := run(t, \"ls\")\n\tif !strings.Contains(out, name) {\n\t\tt.Fatalf(\"expected %s in ls output, got: %s\", name, out)\n\t}\n\n\t// remove the image\n\trun(t, \"rm\", name)\n\n\t// make sure the image is not in ls output\n\tout = run(t, \"ls\")\n\tif strings.Contains(out, name) {\n\t\tt.Fatalf(\"expected %s to not be in ls output after removal, got: %s\", name, out)\n\t}\n}\n\nfunc TestRemovePulledImage(t *testing.T) {\n\timage := \"debian:buster\"\n\trun(t, \"pull\", image)\n\n\t// make sure our image is there\n\tout := run(t, \"ls\")\n\tif !strings.Contains(out, image) {\n\t\tt.Fatalf(\"expected %s in ls output, got: %s\", image, out)\n\t}\n\n\t// remove the image\n\trun(t, \"rm\", image)\n\n\t// make sure the image is not in ls output\n\tout = run(t, \"ls\")\n\tif strings.Contains(out, image) {\n\t\tt.Fatalf(\"expected %s to not be in ls output after removal, got: %s\", image, out)\n\t}\n}\n"
        },
        {
          "name": "save.go",
          "type": "blob",
          "size": 2.2138671875,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/containerd/containerd/namespaces\"\n\t\"github.com/docker/docker/pkg/term\"\n\t\"github.com/genuinetools/img/client\"\n\t\"github.com/moby/buildkit/identity\"\n\t\"github.com/moby/buildkit/session\"\n)\n\n// TODO(AkihiroSuda): support OCI archive\nconst saveUsageShortHelp = `Save an image to a tar archive (streamed to STDOUT by default).`\nconst saveUsageLongHelp = `Save an image to a tar archive (streamed to STDOUT by default).`\n\nfunc newSaveCommand() *cobra.Command {\n\n\tsave := &saveCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"save [OPTIONS] IMAGE [IMAGE...]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 saveUsageShortHelp,\n\t\tLong:                  saveUsageLongHelp,\n\t\tArgs:                  save.ValidateArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn save.Run(args)\n\t\t},\n\t}\n\n\tfs := cmd.Flags()\n\n\tfs.StringVarP(&save.output, \"output\", \"o\", \"\", \"write to a file, instead of STDOUT\")\n\tfs.StringVar(&save.format, \"format\", \"docker\", \"image output format (docker|oci)\")\n\n\treturn cmd\n}\n\ntype saveCommand struct {\n\toutput string\n\tformat string\n}\n\nfunc (cmd *saveCommand) ValidateArgs(c *cobra.Command, args []string) error {\n\tif len(args) < 1 {\n\t\treturn fmt.Errorf(\"must pass an image to save\")\n\t}\n\n\treturn nil\n}\n\nfunc (cmd *saveCommand) Run(args []string) (err error) {\n\treexec()\n\n\t// Create the context.\n\tid := identity.NewID()\n\tctx := session.NewContext(context.Background(), id)\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\t// Create the writer.\n\twriter, err := cmd.writer()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Loop over the arguments as images and run save.\n\tfor _, image := range args {\n\t\tif err := c.SaveImage(ctx, image, cmd.format, writer); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (cmd *saveCommand) writer() (io.WriteCloser, error) {\n\tif cmd.output != \"\" {\n\t\treturn os.Create(cmd.output)\n\t}\n\n\tif term.IsTerminal(os.Stdout.Fd()) {\n\t\treturn nil, fmt.Errorf(\"cowardly refusing to save to a terminal. Use the -o flag or redirect\")\n\t}\n\n\treturn os.Stdout, nil\n}\n"
        },
        {
          "name": "save_test.go",
          "type": "blob",
          "size": 1.2890625,
          "content": "package main\n\nimport (\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n)\n\nfunc TestSaveImage(t *testing.T) {\n\trunBuild(t, \"savething\", withDockerfile(`\n    FROM busybox\n\tRUN echo savetest\n    `))\n\n\ttmpf := filepath.Join(os.TempDir(), \"save-image-test.tar\")\n\tdefer os.RemoveAll(tmpf)\n\n\trun(t, \"save\", \"-o\", tmpf, \"savething\")\n\n\t// Make sure the file exists\n\tif _, err := os.Stat(tmpf); os.IsNotExist(err) {\n\t\tt.Fatalf(\"%s should exist after saving the image but it didn't\", tmpf)\n\t}\n}\n\nfunc TestSaveImageOCI(t *testing.T) {\n\trunBuild(t, \"savethingoci\", withDockerfile(`\n    FROM busybox\n\tRUN echo savetest\n    `))\n\n\ttmpf := filepath.Join(os.TempDir(), \"save-oci-test.tar\")\n\tdefer os.RemoveAll(tmpf)\n\n\trun(t, \"save\", \"--format\", \"oci\", \"-o\", tmpf, \"savethingoci\")\n\n\t// Make sure the file exists\n\tif _, err := os.Stat(tmpf); os.IsNotExist(err) {\n\t\tt.Fatalf(\"%s should exist after saving the image but it didn't\", tmpf)\n\t}\n}\n\nfunc TestSaveImageInvalid(t *testing.T) {\n\trunBuild(t, \"savethinginvalid\", withDockerfile(`\n    FROM busybox\n\tRUN echo savetest\n    `))\n\n\ttmpf := filepath.Join(os.TempDir(), \"save-invalid.tar\")\n\tdefer os.RemoveAll(tmpf)\n\n\tout, err := doRun([]string{\"save\", \"--format\", \"blah\", \"-o\", tmpf, \"savethinginvalid\"}, nil)\n\tif err == nil {\n\t\tt.Fatalf(\"expected invalid format to fail but did not: %s\", string(out))\n\t}\n}\n"
        },
        {
          "name": "tag.go",
          "type": "blob",
          "size": 1.642578125,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\n\t\"github.com/containerd/containerd/namespaces\"\n\t\"github.com/genuinetools/img/client\"\n\t\"github.com/moby/buildkit/identity\"\n\t\"github.com/moby/buildkit/session\"\n)\n\nconst tagUsageShortHelp = `Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.`\nconst tagUsageLongHelp = `Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE.`\n\nfunc newTagCommand() *cobra.Command {\n\n\ttag := &tagCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 tagUsageShortHelp,\n\t\tLong:                  tagUsageLongHelp,\n\t\tArgs:                  tag.ValidateArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn tag.Run(args)\n\t\t},\n\t}\n\n\treturn cmd\n}\n\ntype tagCommand struct {\n\timage  string\n\ttarget string\n}\n\nfunc (cmd *tagCommand) ValidateArgs(c *cobra.Command, args []string) error {\n\tif len(args) < 2 {\n\t\treturn fmt.Errorf(\"must pass an image or repository and target to tag\")\n\t}\n\n\treturn nil\n}\n\nfunc (cmd *tagCommand) Run(args []string) (err error) {\n\treexec()\n\n\t// Get the specified image and target.\n\tcmd.image = args[0]\n\tcmd.target = args[1]\n\n\t// Create the context.\n\tid := identity.NewID()\n\tctx := session.NewContext(context.Background(), id)\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\tif err := c.TagImage(ctx, cmd.image, cmd.target); err != nil {\n\t\treturn err\n\t}\n\n\tfmt.Printf(\"Successfully tagged %s as %s\\n\", cmd.image, cmd.target)\n\n\treturn nil\n}\n"
        },
        {
          "name": "tag_test.go",
          "type": "blob",
          "size": 1.7392578125,
          "content": "package main\n\nimport (\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestTagImage(t *testing.T) {\n\trunBuild(t, \"tagthing\", withDockerfile(`\n    FROM busybox\n    RUN echo tagtest\n    `))\n\n\trun(t, \"tag\", \"tagthing\", \"jess/tagtest\")\n\n\tout := run(t, \"ls\")\n\n\tif !strings.Contains(out, \"tagthing:latest\") || !strings.Contains(out, \"jess/tagtest:latest\") {\n\t\tt.Fatalf(\"expected ls output to have tagthing:latest and jess/tagtest:latest but got: %s\", out)\n\t}\n}\n\nfunc TestTagImageAndPush(t *testing.T) {\n\trunBuild(t, \"tagthingandpush\", withDockerfile(`\n    FROM busybox\n    RUN echo tagtestandpush\n    `))\n\n\trun(t, \"tag\", \"tagthingandpush\", \"jess/tagtestandpush\")\n\n\tout := run(t, \"ls\")\n\n\tif !strings.Contains(out, \"tagthingandpush:latest\") || !strings.Contains(out, \"jess/tagtestandpush:latest\") {\n\t\tt.Fatalf(\"expected ls output to have tagthingandpush:latest and jess/tagtestandpush:latest but got: %s\", out)\n\t}\n\n\tout, err := doRun([]string{\"push\", \"jess/tagtestandpush\"}, nil)\n\tif !strings.Contains(err.Error(), \"insufficient_scope: authorization failed\") {\n\t\tt.Fatalf(\"expected push to fail with 'insufficient_scope: authorization failed' got: %s %v\", out, err)\n\t}\n}\n\nfunc TestTagPullAndPush(t *testing.T) {\n\t// Test an official image,\n\trun(t, \"pull\", \"busybox\")\n\n\trun(t, \"tag\", \"busybox\", \"jess/tagpullandpush\")\n\n\tout := run(t, \"ls\")\n\n\tif !strings.Contains(out, \"busybox:latest\") || !strings.Contains(out, \"jess/tagpullandpush:latest\") {\n\t\tt.Fatalf(\"expected ls output to have busybox:latest and jess/tagpullandpush:latest but got: %s\", out)\n\t}\n\n\tout, err := doRun([]string{\"push\", \"jess/tagpullandpush\"}, nil)\n\tif !strings.Contains(err.Error(), \"insufficient_scope: authorization failed\") {\n\t\tt.Fatalf(\"expected push to fail with 'insufficient_scope: authorization failed' got: %s %v\", out, err)\n\t}\n}\n"
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "types",
          "type": "tree",
          "content": null
        },
        {
          "name": "unpack.go",
          "type": "blob",
          "size": 1.9365234375,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"github.com/containerd/containerd/namespaces\"\n\t\"github.com/genuinetools/img/client\"\n\t\"github.com/moby/buildkit/identity\"\n\t\"github.com/moby/buildkit/session\"\n)\n\nconst unpackUsageShortHelp = `Unpack an image to a rootfs directory.`\nconst unpackUsageLongHelp = `Unpack an image to a rootfs directory.`\n\nfunc newUnpackCommand() *cobra.Command {\n\n\tunpack := &unpackCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"unpack [OPTIONS] IMAGE\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 unpackUsageShortHelp,\n\t\tLong:                  unpackUsageLongHelp,\n\t\tArgs:                  validateUnpackImageArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn unpack.Run(args)\n\t\t},\n\t}\n\n\tfs := cmd.Flags()\n\n\tfs.StringVarP(&unpack.output, \"output\", \"o\", \"\", \"Directory to unpack the rootfs to. (defaults to rootfs/ in the current working directory)\")\n\n\treturn cmd\n}\n\nfunc validateUnpackImageArgs(cmd *cobra.Command, args []string) error {\n\tif len(args) < 1 {\n\t\treturn fmt.Errorf(\"must pass an image to unpack as a rootfs\")\n\t}\n\n\treturn nil\n}\n\ntype unpackCommand struct {\n\timage  string\n\toutput string\n}\n\nfunc (cmd *unpackCommand) Run(args []string) (err error) {\n\treexec()\n\n\tcmd.image = args[0]\n\n\tif len(cmd.output) < 1 {\n\t\twd, err := os.Getwd()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"getting current working directory failed: %v\", err)\n\t\t}\n\t\tcmd.output = filepath.Join(wd, \"rootfs\")\n\t}\n\n\t// Create the context.\n\tid := identity.NewID()\n\tctx := session.NewContext(context.Background(), id)\n\tctx = namespaces.WithNamespace(ctx, \"buildkit\")\n\n\t// Create the client.\n\tc, err := client.New(stateDir, backend, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer c.Close()\n\n\tif err := c.Unpack(ctx, cmd.image, cmd.output); err != nil {\n\t\treturn err\n\t}\n\n\tfmt.Printf(\"Successfully unpacked rootfs for %s to: %s\\n\", cmd.image, cmd.output)\n\n\treturn nil\n}\n"
        },
        {
          "name": "unpack_test.go",
          "type": "blob",
          "size": 1.2255859375,
          "content": "package main\n\nimport (\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n)\n\nfunc TestUnpackFromBuild(t *testing.T) {\n\tname := \"testbuildunpack\"\n\n\trunBuild(t, name, withDockerfile(`\n    FROM busybox\n\tRUN echo unpack\n    `))\n\n\ttmpd, err := ioutil.TempDir(\"\", \"img-unpack\")\n\tif err != nil {\n\t\tt.Fatalf(\"creating temporary directory for unpack failed: %v\", err)\n\t}\n\tdefer os.RemoveAll(tmpd)\n\n\trootfs := filepath.Join(tmpd, \"rootfs\")\n\n\trun(t, \"unpack\", \"-o\", rootfs, name)\n\n\t// Make sure the image actually is unpacked in the directory.\n\tetc := filepath.Join(rootfs, \"etc\")\n\tif _, err := os.Stat(etc); os.IsNotExist(err) {\n\t\tt.Fatalf(\"expected etc directory at %q to exist but it did not\", etc)\n\t}\n}\n\nfunc TestUnpackFromPull(t *testing.T) {\n\trun(t, \"pull\", \"r.j3ss.co/stress\")\n\n\ttmpd, err := ioutil.TempDir(\"\", \"img-unpack\")\n\tif err != nil {\n\t\tt.Fatalf(\"creating temporary directory for unpack failed: %v\", err)\n\t}\n\tdefer os.RemoveAll(tmpd)\n\n\trootfs := filepath.Join(tmpd, \"rootfs\")\n\n\trun(t, \"unpack\", \"-o\", rootfs, \"r.j3ss.co/stress\")\n\n\t// Make sure the image actually is unpacked in the directory.\n\tetc := filepath.Join(rootfs, \"etc\")\n\tif _, err := os.Stat(etc); os.IsNotExist(err) {\n\t\tt.Fatalf(\"expected etc directory at %q to exist but it did not\", etc)\n\t}\n}\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.go",
          "type": "blob",
          "size": 1.328125,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/genuinetools/img/internal/binutils\"\n\t\"github.com/genuinetools/img/version\"\n\t\"github.com/spf13/cobra\"\n\t\"runtime\"\n)\n\nconst versionHelp = `Show the version information.`\n\n// newVersionCommand creates a command that returns information about the current build\nfunc newVersionCommand() *cobra.Command {\n\n\tversion := &versionCommand{}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"version\",\n\t\tDisableFlagsInUseLine: true,\n\t\tSilenceUsage:          true,\n\t\tShort:                 versionHelp,\n\t\tLong:                  versionHelp,\n\t\tArgs:                  validateHasNoArgs,\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\treturn version.Run(args)\n\t\t},\n\t}\n\n\treturn cmd\n}\n\ntype versionCommand struct{}\n\nfunc (cmd *versionCommand) Run(args []string) error {\n\tprintImgVersion()\n\tprintRuncVersion()\n\n\treturn nil\n}\n\nfunc printImgVersion() {\n\tfmt.Printf(`%s:\n version     : %s\n git hash    : %s\n go version  : %s\n go compiler : %s\n platform    : %s/%s\n`, \"img\", version.VERSION, version.GITCOMMIT,\n\t\truntime.Version(), runtime.Compiler, runtime.GOOS, runtime.GOARCH)\n}\n\nfunc printRuncVersion() {\n\tv, err := binutils.GetRuncVersion()\n\tif err != nil {\n\t\tfmt.Printf(`runc: \n error: %s\n`, err)\n\t\treturn\n\t}\n\n\tfmt.Printf(`%s:\n version     : %s\n commit      : %s\n spec        : %s\n`, \"runc\", v.Runc, v.Commit,\n\t\tv.Spec)\n}\n"
        },
        {
          "name": "version",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}