{
  "metadata": {
    "timestamp": 1736566943483,
    "page": 523,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jsha/minica",
      "stars": 3067,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.052734375,
          "content": "MIT License\n\nCopyright (c) 2016 Jacob Hoffman-Andrews\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.6474609375,
          "content": "Minica is a simple CA intended for use in situations where the CA operator\nalso operates each host where a certificate will be used. It automatically\ngenerates both a key and a certificate when asked to produce a certificate.\nIt does not offer OCSP or CRL services. Minica is appropriate, for instance,\nfor generating certificates for RPC systems or microservices.\n\nOn first run, minica will generate a keypair and a root certificate in the\ncurrent directory, and will reuse that same keypair and root certificate\nunless they are deleted.\n\nOn each run, minica will generate a new keypair and sign an end-entity (leaf)\ncertificate for that keypair. The certificate will contain a list of DNS names\nand/or IP addresses from the command line flags. The key and certificate are\nplaced in a new directory whose name is chosen as the first domain name from\nthe certificate, or the first IP address if no domain names are present. It\nwill not overwrite existing keys or certificates.\n\nThe certificate will have a validity of 2 years and 30 days.\n\n# Installation\n\nFirst, install the [Go tools](https://golang.org/dl/) and set up your `$GOPATH`.\nThen, run:\n\n`go install github.com/jsha/minica@latest`\n\nWhen using Go 1.11 or newer you don't need a $GOPATH and can instead do the\nfollowing:\n\n```\ncd /ANY/PATH\ngit clone https://github.com/jsha/minica.git\ngo build\n## or\n# go install\n```\n\nMac OS users could alternatively use Homebrew: `brew install minica`\n\n# Example usage\n\n```\n# Generate a root key and cert in minica-key.pem, and minica.pem, then\n# generate and sign an end-entity key and cert, storing them in ./foo.com/\n$ minica --domains foo.com\n\n# Wildcard\n$ minica --domains '*.foo.com'\n```\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0380859375,
          "content": "module github.com/jsha/minica\n\ngo 1.15\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 10.3603515625,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"crypto\"\n\t\"crypto/ecdsa\"\n\t\"crypto/elliptic\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/sha1\"\n\t\"crypto/x509\"\n\t\"crypto/x509/pkix\"\n\t\"encoding/asn1\"\n\t\"encoding/hex\"\n\t\"encoding/pem\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"math\"\n\t\"math/big\"\n\t\"net\"\n\t\"os\"\n\t\"regexp\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc main() {\n\terr := main2()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\ntype issuer struct {\n\tkey  crypto.Signer\n\tcert *x509.Certificate\n}\n\nfunc getIssuer(keyFile, certFile string, alg x509.PublicKeyAlgorithm) (*issuer, error) {\n\tkeyContents, keyErr := ioutil.ReadFile(keyFile)\n\tcertContents, certErr := ioutil.ReadFile(certFile)\n\tif os.IsNotExist(keyErr) && os.IsNotExist(certErr) {\n\t\terr := makeIssuer(keyFile, certFile, alg)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn getIssuer(keyFile, certFile, alg)\n\t} else if keyErr != nil {\n\t\treturn nil, fmt.Errorf(\"%s (but %s exists)\", keyErr, certFile)\n\t} else if certErr != nil {\n\t\treturn nil, fmt.Errorf(\"%s (but %s exists)\", certErr, keyFile)\n\t}\n\tkey, err := readPrivateKey(keyContents)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading private key from %s: %s\", keyFile, err)\n\t}\n\n\tcert, err := readCert(certContents)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading CA certificate from %s: %s\", certFile, err)\n\t}\n\n\tequal, err := publicKeysEqual(key.Public(), cert.PublicKey)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"comparing public keys: %s\", err)\n\t} else if !equal {\n\t\treturn nil, fmt.Errorf(\"public key in CA certificate %s doesn't match private key in %s\",\n\t\t\tcertFile, keyFile)\n\t}\n\treturn &issuer{key, cert}, nil\n}\n\nfunc readPrivateKey(keyContents []byte) (crypto.Signer, error) {\n\tblock, _ := pem.Decode(keyContents)\n\tif block == nil {\n\t\treturn nil, fmt.Errorf(\"no PEM found\")\n\t} else if block.Type == \"PRIVATE KEY\" {\n\t\tsigner, err := x509.ParsePKCS8PrivateKey(block.Bytes)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to parse PKCS8: %w\", err)\n\t\t}\n\t\tswitch t := signer.(type) {\n\t\tcase *rsa.PrivateKey:\n\t\t\treturn signer.(*rsa.PrivateKey), nil\n\t\tcase *ecdsa.PrivateKey:\n\t\t\treturn signer.(*ecdsa.PrivateKey), nil\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unsupported PKCS8 key type: %t\", t)\n\t\t}\n\t} else if block.Type == \"RSA PRIVATE KEY\" {\n\t\treturn x509.ParsePKCS1PrivateKey(block.Bytes)\n\t} else if block.Type == \"EC PRIVATE KEY\" || block.Type == \"ECDSA PRIVATE KEY\" {\n\t\treturn x509.ParseECPrivateKey(block.Bytes)\n\t}\n\treturn nil, fmt.Errorf(\"incorrect PEM type %s\", block.Type)\n}\n\nfunc readCert(certContents []byte) (*x509.Certificate, error) {\n\tblock, _ := pem.Decode(certContents)\n\tif block == nil {\n\t\treturn nil, fmt.Errorf(\"no PEM found\")\n\t} else if block.Type != \"CERTIFICATE\" {\n\t\treturn nil, fmt.Errorf(\"incorrect PEM type %s\", block.Type)\n\t}\n\treturn x509.ParseCertificate(block.Bytes)\n}\n\nfunc makeIssuer(keyFile, certFile string, alg x509.PublicKeyAlgorithm) error {\n\tkey, err := makeKey(keyFile, alg)\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = makeRootCert(key, certFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc makeKey(filename string, alg x509.PublicKeyAlgorithm) (crypto.Signer, error) {\n\tvar key crypto.Signer\n\tvar err error\n\tswitch {\n\tcase alg == x509.RSA:\n\t\tkey, err = rsa.GenerateKey(rand.Reader, 2048)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\tcase alg == x509.ECDSA:\n\t\tkey, err = ecdsa.GenerateKey(elliptic.P384(), rand.Reader)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tder, err := x509.MarshalPKCS8PrivateKey(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfile, err := os.OpenFile(filename, os.O_CREATE|os.O_EXCL|os.O_WRONLY, 0600)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\terr = pem.Encode(file, &pem.Block{\n\t\tType:  \"PRIVATE KEY\",\n\t\tBytes: der,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn key, nil\n}\n\nfunc makeRootCert(key crypto.Signer, filename string) (*x509.Certificate, error) {\n\tserial, err := rand.Int(rand.Reader, big.NewInt(math.MaxInt64))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tskid, err := calculateSKID(key.Public())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttemplate := &x509.Certificate{\n\t\tSubject: pkix.Name{\n\t\t\tCommonName: \"minica root ca \" + hex.EncodeToString(serial.Bytes()[:3]),\n\t\t},\n\t\tSerialNumber: serial,\n\t\tNotBefore:    time.Now(),\n\t\tNotAfter:     time.Now().AddDate(100, 0, 0),\n\n\t\tSubjectKeyId:          skid,\n\t\tAuthorityKeyId:        skid,\n\t\tKeyUsage:              x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth, x509.ExtKeyUsageClientAuth},\n\t\tBasicConstraintsValid: true,\n\t\tIsCA:                  true,\n\t\tMaxPathLenZero:        true,\n\t}\n\n\tder, err := x509.CreateCertificate(rand.Reader, template, template, key.Public(), key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfile, err := os.OpenFile(filename, os.O_CREATE|os.O_EXCL|os.O_WRONLY, 0600)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\terr = pem.Encode(file, &pem.Block{\n\t\tType:  \"CERTIFICATE\",\n\t\tBytes: der,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn x509.ParseCertificate(der)\n}\n\nfunc parseIPs(ipAddresses []string) ([]net.IP, error) {\n\tvar parsed []net.IP\n\tfor _, s := range ipAddresses {\n\t\tp := net.ParseIP(s)\n\t\tif p == nil {\n\t\t\treturn nil, fmt.Errorf(\"invalid IP address %s\", s)\n\t\t}\n\t\tparsed = append(parsed, p)\n\t}\n\treturn parsed, nil\n}\n\nfunc publicKeysEqual(a, b interface{}) (bool, error) {\n\taBytes, err := x509.MarshalPKIXPublicKey(a)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tbBytes, err := x509.MarshalPKIXPublicKey(b)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\treturn bytes.Compare(aBytes, bBytes) == 0, nil\n}\n\nfunc calculateSKID(pubKey crypto.PublicKey) ([]byte, error) {\n\tspkiASN1, err := x509.MarshalPKIXPublicKey(pubKey)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar spki struct {\n\t\tAlgorithm        pkix.AlgorithmIdentifier\n\t\tSubjectPublicKey asn1.BitString\n\t}\n\t_, err = asn1.Unmarshal(spkiASN1, &spki)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tskid := sha1.Sum(spki.SubjectPublicKey.Bytes)\n\treturn skid[:], nil\n}\n\nfunc sign(iss *issuer, domains []string, ipAddresses []string, alg x509.PublicKeyAlgorithm) (*x509.Certificate, error) {\n\tvar cn string\n\tif len(domains) > 0 {\n\t\tcn = domains[0]\n\t} else if len(ipAddresses) > 0 {\n\t\tcn = ipAddresses[0]\n\t} else {\n\t\treturn nil, fmt.Errorf(\"must specify at least one domain name or IP address\")\n\t}\n\tvar cnFolder = strings.Replace(cn, \"*\", \"_\", -1)\n\terr := os.Mkdir(cnFolder, 0700)\n\tif err != nil && !os.IsExist(err) {\n\t\treturn nil, err\n\t}\n\tkey, err := makeKey(fmt.Sprintf(\"%s/key.pem\", cnFolder), alg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tparsedIPs, err := parseIPs(ipAddresses)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tserial, err := rand.Int(rand.Reader, big.NewInt(math.MaxInt64))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttemplate := &x509.Certificate{\n\t\tDNSNames:    domains,\n\t\tIPAddresses: parsedIPs,\n\t\tSubject: pkix.Name{\n\t\t\tCommonName: cn,\n\t\t},\n\t\tSerialNumber: serial,\n\t\tNotBefore:    time.Now(),\n\t\t// Set the validity period to 2 years and 30 days, to satisfy the iOS and\n\t\t// macOS requirements that all server certificates must have validity\n\t\t// shorter than 825 days:\n\t\t// https://derflounder.wordpress.com/2019/06/06/new-tls-security-requirements-for-ios-13-and-macos-catalina-10-15/\n\t\tNotAfter: time.Now().AddDate(2, 0, 30),\n\n\t\tKeyUsage:              x509.KeyUsageDigitalSignature | x509.KeyUsageKeyEncipherment,\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth, x509.ExtKeyUsageClientAuth},\n\t\tBasicConstraintsValid: true,\n\t\tIsCA:                  false,\n\t}\n\tder, err := x509.CreateCertificate(rand.Reader, template, iss.cert, key.Public(), iss.key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfile, err := os.OpenFile(fmt.Sprintf(\"%s/cert.pem\", cnFolder), os.O_CREATE|os.O_EXCL|os.O_WRONLY, 0600)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\terr = pem.Encode(file, &pem.Block{\n\t\tType:  \"CERTIFICATE\",\n\t\tBytes: der,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn x509.ParseCertificate(der)\n}\n\nfunc split(s string) (results []string) {\n\tif len(s) > 0 {\n\t\treturn strings.Split(s, \",\")\n\t}\n\treturn nil\n}\n\nfunc main2() error {\n\tvar caKey = flag.String(\"ca-key\", \"minica-key.pem\", \"Root private key filename, PEM encoded.\")\n\tvar caCert = flag.String(\"ca-cert\", \"minica.pem\", \"Root certificate filename, PEM encoded.\")\n\tvar caAlg = flag.String(\"ca-alg\", \"ecdsa\", \"Algorithm for any new keypairs: RSA or ECDSA.\")\n\tvar domains = flag.String(\"domains\", \"\", \"Comma separated domain names to include as Server Alternative Names.\")\n\tvar ipAddresses = flag.String(\"ip-addresses\", \"\", \"Comma separated IP addresses to include as Server Alternative Names.\")\n\tflag.Usage = func() {\n\t\tfmt.Fprintf(os.Stderr, \"Usage of %s:\\n\", os.Args[0])\n\t\tfmt.Fprintf(os.Stderr, `\nMinica is a simple CA intended for use in situations where the CA operator\nalso operates each host where a certificate will be used. It automatically\ngenerates both a key and a certificate when asked to produce a certificate.\nIt does not offer OCSP or CRL services. Minica is appropriate, for instance,\nfor generating certificates for RPC systems or microservices.\n\nOn first run, minica will generate a keypair and a root certificate in the\ncurrent directory, and will reuse that same keypair and root certificate\nunless they are deleted.\n\nOn each run, minica will generate a new keypair and sign an end-entity (leaf)\ncertificate for that keypair. The certificate will contain a list of DNS names\nand/or IP addresses from the command line flags. The key and certificate are\nplaced in a new directory whose name is chosen as the first domain name from\nthe certificate, or the first IP address if no domain names are present. It\nwill not overwrite existing keys or certificates.\n\n`)\n\t\tflag.PrintDefaults()\n\t}\n\tflag.Parse()\n\tif *domains == \"\" && *ipAddresses == \"\" {\n\t\tflag.Usage()\n\t\tos.Exit(1)\n\t}\n\talg := x509.RSA\n\tif strings.ToLower(*caAlg) == \"ecdsa\" {\n\t\talg = x509.ECDSA\n\t} else if strings.ToLower(*caAlg) != \"rsa\" {\n\t\tfmt.Printf(\"Unrecognized algorithm: %s (use RSA or ECDSA)\\n\", *caAlg)\n\t\tos.Exit(1)\n\t}\n\tif len(flag.Args()) > 0 {\n\t\tfmt.Printf(\"Extra arguments: %s (maybe there are spaces in your domain list?)\\n\", flag.Args())\n\t\tos.Exit(1)\n\t}\n\tdomainSlice := split(*domains)\n\tdomainRe := regexp.MustCompile(\"^[A-Za-z0-9.*-]+$\")\n\tfor _, d := range domainSlice {\n\t\tif !domainRe.MatchString(d) {\n\t\t\tfmt.Printf(\"Invalid domain name %q\\n\", d)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\tipSlice := split(*ipAddresses)\n\tfor _, ip := range ipSlice {\n\t\tif net.ParseIP(ip) == nil {\n\t\t\tfmt.Printf(\"Invalid IP address %q\\n\", ip)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\tissuer, err := getIssuer(*caKey, *caCert, alg)\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = sign(issuer, domainSlice, ipSlice, alg)\n\treturn err\n}\n"
        }
      ]
    }
  ]
}