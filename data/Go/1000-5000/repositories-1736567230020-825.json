{
  "metadata": {
    "timestamp": 1736567230020,
    "page": 825,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "brigadecore/brigade",
      "stars": 2410,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".brigade",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.16015625,
          "content": ".git\n.gocache\nv2/brigadier/dist/\nv2/brigadier/node_modules/\nv2/brigadier-polyfill/dist/\nv2/brigadier-polyfill/node_modules/\nv2/worker/dist/\nv2/worker/node_modules/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1953125,
          "content": ".gocache/\nbin/\ncoverage.txt\nnode_modules/\ndist/\ncharts/brigade/charts\n.npmrc\n.DS_Store\nv2/brigadier/docs\n\n# Docs\ndocs/resources/_gen/\ndocs/.hugo_build.lock\n\n# IDEs\n.vscode/\n.devcontainer/\n.idea/\n.swp\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.259765625,
          "content": "[submodule \"docs/themes/hugo-theme-techdoc\"]\n\tpath = docs/themes/hugo-theme-techdoc\n\turl = https://github.com/thingsym/hugo-theme-techdoc.git\n[submodule \"docs/content/portuguese\"]\n\tpath = docs/content/portuguese\n\turl = https://github.com/brigadecore/docs-portuguese\n"
        },
        {
          "name": ".tiltignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": "charts/brigade/charts\ncharts/brigade/tmpcharts\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.1650390625,
          "content": "# This file is described here:  https://help.github.com/en/articles/about-code-owners\n\n# Global Owners: These are brigadecore org maintainers\n* @brigadecore/maintainers\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.115234375,
          "content": "# Contributing Guide\n\nSee our Brigade project [Contributor Guide](https://docs.brigade.sh/topics/contributor-guide/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.4462890625,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n  \"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n  \"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n  \"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n  \"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n  \"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n  \"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n  \"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n  \"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n  \"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n  \"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n  this License, each Contributor hereby grants to You a perpetual,\n  worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n  copyright license to reproduce, prepare Derivative Works of,\n  publicly display, publicly perform, sublicense, and distribute the\n  Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n  this License, each Contributor hereby grants to You a perpetual,\n  worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n  (except as stated in this section) patent license to make, have made,\n  use, offer to sell, sell, import, and otherwise transfer the Work,\n  where such license applies only to those patent claims licensable\n  by such Contributor that are necessarily infringed by their\n  Contribution(s) alone or by combination of their Contribution(s)\n  with the Work to which such Contribution(s) was submitted. If You\n  institute patent litigation against any entity (including a\n  cross-claim or counterclaim in a lawsuit) alleging that the Work\n  or a Contribution incorporated within the Work constitutes direct\n  or contributory patent infringement, then any patent licenses\n  granted to You under this License for that Work shall terminate\n  as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n  Work or Derivative Works thereof in any medium, with or without\n  modifications, and in Source or Object form, provided that You\n  meet the following conditions:\n\n  (a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n  (b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n  (c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n  (d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n  You may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n  any Contribution intentionally submitted for inclusion in the Work\n  by You to the Licensor shall be under the terms and conditions of\n  this License, without any additional terms or conditions.\n  Notwithstanding the above, nothing herein shall supersede or modify\n  the terms of any separate license agreement you may have executed\n  with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n  names, trademarks, service marks, or product names of the Licensor,\n  except as required for reasonable and customary use in describing the\n  origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n  agreed to in writing, Licensor provides the Work (and each\n  Contributor provides its Contributions) on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n  implied, including, without limitation, any warranties or conditions\n  of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n  PARTICULAR PURPOSE. You are solely responsible for determining the\n  appropriateness of using or redistributing the Work and assume any\n  risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n  whether in tort (including negligence), contract, or otherwise,\n  unless required by applicable law (such as deliberate and grossly\n  negligent acts) or agreed to in writing, shall any Contributor be\n  liable to You for damages, including any direct, indirect, special,\n  incidental, or consequential damages of any character arising as a\n  result of this License or out of the use or inability to use the\n  Work (including but not limited to damages for loss of goodwill,\n  work stoppage, computer failure or malfunction, or any and all\n  other commercial damages or losses), even if such Contributor\n  has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n  the Work or Derivative Works thereof, You may choose to offer,\n  and charge a fee for, acceptance of support, warranty, indemnity,\n  or other liability obligations and/or rights consistent with this\n  License. However, in accepting such obligations, You may act only\n  on Your own behalf and on Your sole responsibility, not on behalf\n  of any other Contributor, and only if You agree to indemnify,\n  defend, and hold each Contributor harmless for any liability\n  incurred by, or claims asserted against, such Contributor by reason\n  of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n\nCopyright 2019 The Brigade Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 14.0751953125,
          "content": "SHELL ?= /bin/bash\n\n.DEFAULT_GOAL := build\n\n################################################################################\n# Version details                                                              #\n################################################################################\n\n# This will reliably return the short SHA1 of HEAD or, if the working directory\n# is dirty, will return that + \"-dirty\"\nGIT_VERSION = $(shell git describe --always --abbrev=7 --dirty --match=NeVeRmAtCh)\n\n################################################################################\n# Containerized development environment-- or lack thereof                      #\n################################################################################\n\nifneq ($(SKIP_DOCKER),true)\n\tPROJECT_ROOT := $(dir $(realpath $(firstword $(MAKEFILE_LIST))))\n\tGO_DEV_IMAGE := brigadecore/go-tools:v0.9.0\n\n\tGO_DOCKER_CMD := docker run \\\n\t\t-it \\\n\t\t--rm \\\n\t\t-e SKIP_DOCKER=true \\\n\t\t-e GITHUB_TOKEN=$${GITHUB_TOKEN} \\\n\t\t-e GOCACHE=/workspaces/brigade/.gocache \\\n\t\t-v $(PROJECT_ROOT):/workspaces/brigade \\\n\t\t-w /workspaces/brigade \\\n\t\t$(GO_DEV_IMAGE)\n\n\tJS_DEV_IMAGE := node:16.11.0-bullseye\n\n\tJS_DOCKER_CMD := docker run \\\n\t\t-it \\\n\t\t--rm \\\n\t\t-e NPM_TOKEN=$${NPM_TOKEN} \\\n\t\t-e SKIP_DOCKER=true \\\n\t\t-v $(PROJECT_ROOT):/workspaces/brigade \\\n\t\t-w /workspaces/brigade \\\n\t\t$(JS_DEV_IMAGE)\n\n\tHELM_IMAGE := brigadecore/helm-tools:v0.4.0\n\n\tHELM_DOCKER_CMD := docker run \\\n\t  -it \\\n\t\t--rm \\\n\t\t-e SKIP_DOCKER=true \\\n\t\t-e HELM_PASSWORD=$${HELM_PASSWORD} \\\n\t\t-v $(PROJECT_ROOT):/workspaces/brigade \\\n\t\t-w /workspaces/brigade \\\n\t\t$(HELM_IMAGE)\nendif\n\n################################################################################\n# Binaries and Docker images we build and publish                              #\n################################################################################\n\nifdef DOCKER_REGISTRY\n\tDOCKER_REGISTRY := $(DOCKER_REGISTRY)/\nendif\n\nifdef DOCKER_ORG\n\tDOCKER_ORG := $(DOCKER_ORG)/\nendif\n\nDOCKER_IMAGE_PREFIX := $(DOCKER_REGISTRY)$(DOCKER_ORG)brigade2-\n\nifdef HELM_REGISTRY\n\tHELM_REGISTRY := $(HELM_REGISTRY)/\nendif\n\nifdef HELM_ORG\n\tHELM_ORG := $(HELM_ORG)/\nendif\n\nHELM_CHART_PREFIX := $(HELM_REGISTRY)$(HELM_ORG)\n\nifdef VERSION\n\tMUTABLE_DOCKER_TAG := latest\nelse\n\tVERSION            := $(GIT_VERSION)\n\tMUTABLE_DOCKER_TAG := edge\nendif\n\nIMMUTABLE_DOCKER_TAG := $(VERSION)\n\n################################################################################\n# Tests                                                                        #\n################################################################################\n\n.PHONY: lint-go\nlint-go:\n\t$(GO_DOCKER_CMD) sh -c ' \\\n\t\tcd sdk/v3 && \\\n\t\tgolangci-lint run --config ../../golangci.yaml && \\\n\t\tcd ../../v2 && \\\n\t\tgolangci-lint run --config ../golangci.yaml \\\n\t'\n\n.PHONY: test-unit-go\ntest-unit-go:\n\t$(GO_DOCKER_CMD) sh -c ' \\\n\t\tcd sdk/v3 && \\\n\t\tgo test \\\n\t\t\t-v \\\n\t\t\t-timeout=60s \\\n\t\t\t-race \\\n\t\t\t-coverprofile=coverage.txt \\\n\t\t\t-covermode=atomic \\\n\t\t\t./... && \\\n\t\tcd ../../v2 && \\\n\t\tgo test \\\n\t\t\t-v \\\n\t\t\t-timeout=60s \\\n\t\t\t-race \\\n\t\t\t-coverprofile=coverage.txt \\\n\t\t\t-covermode=atomic \\\n\t\t\t./... \\\n\t'\n\n.PHONY: style-check-js\nstyle-check-js:\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\tcd v2/brigadier && \\\n\t\tyarn install && \\\n\t\tyarn style:check && \\\n\t\tcd ../brigadier-polyfill && \\\n\t\tyarn install && \\\n\t\tyarn style:check && \\\n\t\tcd ../worker && \\\n\t\tyarn install && \\\n\t\tyarn style:check \\\n\t'\n\n.PHONY: style-fix-js\nstyle-fix-js:\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\tcd v2/brigadier && \\\n\t\tyarn install && \\\n\t\tyarn style:fix && \\\n\t\tcd ../brigadier-polyfill && \\\n\t\tyarn install && \\\n\t\tyarn style:fix && \\\n\t\tcd ../worker && \\\n\t\tyarn install && \\\n\t\tyarn style:fix \\\n\t'\n\n.PHONY: lint-js\nlint-js:\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\tcd v2/brigadier && \\\n\t\tyarn install && \\\n\t\tyarn lint && \\\n\t\tcd ../brigadier-polyfill && \\\n\t\tyarn install && \\\n\t\tyarn lint && \\\n\t\tcd ../worker && \\\n\t\tyarn install && \\\n\t\tyarn lint \\\n\t'\n\n.PHONY: yarn-audit\nyarn-audit:\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\tcd v2/brigadier && \\\n\t\tyarn install && \\\n\t\tyarn audit --groups dependencies && \\\n\t\tcd ../brigadier-polyfill && \\\n\t\tyarn install && \\\n\t\tyarn audit --groups dependencies && \\\n\t\tcd ../worker && \\\n\t\tyarn install && \\\n\t\tyarn audit --groups dependencies \\\n\t'\n\n.PHONY: clean-js\nclean-js:\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\trm -rf \\\n\t\t\tv2/brigadier/dist \\\n\t\t\tv2/brigadier/node_modules \\\n\t\t\tv2/brigadier-polyfill/dist \\\n\t\t\tv2/brigadier-polyfill/node_modules \\\n\t\t\tv2/worker/dist \\\n\t\t\tv2/worker/node_modules \\\n\t'\n\n.PHONY: test-unit-js\ntest-unit-js:\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\tcd v2/brigadier && \\\n\t\tyarn install && \\\n\t\tyarn test && \\\n\t\tyarn build && \\\n\t\tcd ../brigadier-polyfill && \\\n\t\tyarn install && \\\n\t\tyarn test \\\n\t'\n\n.PHONY: lint-chart\nlint-chart:\n\t$(HELM_DOCKER_CMD) sh -c ' \\\n\t\tcd charts/brigade && \\\n\t\thelm dep up && \\\n\t\thelm lint . \\\n\t'\n\nAPISERVER_ADDRESS ?= \"https://localhost:7000\"\nAPISERVER_ROOT_PASSWORD ?= \"F00Bar!!!\"\n\n.PHONY: test-integration\ntest-integration: hack-expose-apiserver\n\t@export VERSION=\"$(VERSION)\" \\\n          APISERVER_ADDRESS=\"$(APISERVER_ADDRESS)\" \\\n          APISERVER_ROOT_PASSWORD=\"$(APISERVER_ROOT_PASSWORD)\" && \\\n\t\tcd v2 && \\\n\t\tgo test \\\n\t\t\t-v \\\n\t\t\t--count=1 \\\n\t\t\t-timeout=10m \\\n\t\t\t-tags=integration \\\n\t\t\t./tests/... || (cd - && $(MAKE) hack-unexpose-apiserver && exit 1)\n\t@$(MAKE) hack-unexpose-apiserver\n\n# Validates the schemas in the v2/apiserver/schemas dir\n#\n# Adds references to any schema that are themselves $ref'd\n# in any of the others.\n.PHONY: validate-schemas\nvalidate-schemas:\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\tnpm install -g ajv-cli@3.3.0 && \\\n\t\tfor schema in $$(ls v2/apiserver/schemas/*.json); do \\\n\t\t\tajv compile -s $$schema \\\n\t\t\t\t-r v2/apiserver/schemas/common.json \\\n\t\t\t\t-r v2/apiserver/schemas/source-state.json ; \\\n\t\tdone \\\n\t'\n\n# Validates the examples in the examples/ dir\n#\n# Currently, they are project-specific;\n# we can add event, job, etc. examples and add validation here.\n.PHONY: validate-examples\nvalidate-examples:\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\tnpm install -g ajv-cli@3.3.0 && \\\n\t\techo \"Validating example projects...\" && \\\n\t\tfor project in $$(ls examples/*/project.yaml); do \\\n\t\t\tajv validate -d $$project \\\n\t\t\t\t-s v2/apiserver/schemas/project.json \\\n\t\t\t\t-r v2/apiserver/schemas/common.json ; \\\n\t\tdone \\\n\t'\n\n################################################################################\n# Build                                                                        #\n################################################################################\n\n.PHONY: build\nbuild: build-brigadier push-images build-cli\n\n.PHONY: build-brigadier\nbuild-brigadier:\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\tcd v2/brigadier && \\\n\t\tyarn install && \\\n\t\tyarn build && \\\n\t\tyarn build-docs \\\n\t'\n\n.PHONY: build-git-initializer-windows\nbuild-git-initializer-windows:\n\tdocker build \\\n\t\t-f v2/git-initializer-windows/Dockerfile \\\n\t\t-t $(DOCKER_IMAGE_PREFIX)git-initializer-windows:$(IMMUTABLE_DOCKER_TAG) \\\n\t\t-t $(DOCKER_IMAGE_PREFIX)git-initializer-windows:$(MUTABLE_DOCKER_TAG) \\\n\t\t--build-arg VERSION=$(VERSION) \\\n\t\t--build-arg COMMIT=$(GIT_VERSION) \\\n\t\t.\n\n.PHONY: build-logger-windows\nbuild-logger-windows:\n\tdocker build \\\n\t\t-f v2/logger-windows/Dockerfile \\\n\t\t-t $(DOCKER_IMAGE_PREFIX)logger-windows:$(IMMUTABLE_DOCKER_TAG) \\\n\t\t-t $(DOCKER_IMAGE_PREFIX)logger-windows:$(MUTABLE_DOCKER_TAG) \\\n\t\t--build-arg VERSION=$(VERSION) \\\n\t\t--build-arg COMMIT=$(GIT_VERSION) \\\n\t\t.\n\n.PHONY: build-cli\nbuild-cli:\n\t$(GO_DOCKER_CMD) sh -c ' \\\n\t\tcd v2 && \\\n\t\tVERSION=$(VERSION) \\\n\t\tCOMMIT=$(GIT_VERSION) \\\n\t\tOSES=\"linux darwin windows\" \\\n\t\tARCHS=amd64 \\\n\t\t../scripts/build-cli.sh && \\\n\t\tVERSION=$(VERSION) \\\n\t\tCOMMIT=$(GIT_VERSION) \\\n\t\tOSES=\"linux darwin\" \\\n\t\tARCHS=arm64 \\\n\t\t../scripts/build-cli.sh \\\n\t'\n\n################################################################################\n# Image security                                                               #\n################################################################################\n\n.PHONY: scan-%\nscan-%:\n\tgrype $(DOCKER_IMAGE_PREFIX)$*:$(IMMUTABLE_DOCKER_TAG) -f medium\n\n.PHONY: generate-sbom-%\ngenerate-sbom-%:\n\tsyft $(DOCKER_IMAGE_PREFIX)$*:$(IMMUTABLE_DOCKER_TAG) \\\n\t\t-o spdx-json \\\n\t\t--file ./artifacts/brigade2-$*-$(VERSION)-SBOM.json\n\n.PHONY: publish-sbom-%\npublish-sbom-%: generate-sbom-%\n\tghr \\\n\t\t-u $(GITHUB_ORG) \\\n\t\t-r $(GITHUB_REPO) \\\n\t\t-c $$(git rev-parse HEAD) \\\n\t\t-t $${GITHUB_TOKEN} \\\n\t\t-n ${VERSION} \\\n\t\t${VERSION} ./artifacts/brigade2-$*-$(VERSION)-SBOM.json\n\n################################################################################\n# Publish                                                                      #\n################################################################################\n\n.PHONY: publish\npublish: publish-brigadier push-images publish-chart publish-cli\n\n.PHONY: publish-brigadier\npublish-brigadier: build-brigadier\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\tcd v2/brigadier && \\\n\t\techo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc && \\\n\t\tyarn publish \\\n\t\t\t--new-version $$(printf $(VERSION) | cut -c 2- ) \\\n\t\t\t--access public \\\n\t\t\t--no-git-tag-version \\\n\t'\n\n.PHONY: publish-brigadier-docs\npublish-brigadier-docs: build-brigadier\n\t$(JS_DOCKER_CMD) sh -c ' \\\n\t\tcd v2/brigadier && \\\n\t\tyarn publish-docs \\\n\t'\n\n.PHONY: push-images\npush-images: push-apiserver push-artemis push-git-initializer push-logger push-observer push-scheduler push-worker\n\n.PHONY: push-git-initializer-windows\npush-git-initializer-windows:\n\tdocker push $(DOCKER_IMAGE_PREFIX)git-initializer-windows:$(IMMUTABLE_DOCKER_TAG)\n\tdocker push $(DOCKER_IMAGE_PREFIX)git-initializer-windows:$(MUTABLE_DOCKER_TAG)\n\n.PHONY: push-logger-windows\npush-logger-windows:\n\tdocker push $(DOCKER_IMAGE_PREFIX)logger-windows:$(IMMUTABLE_DOCKER_TAG)\n\tdocker push $(DOCKER_IMAGE_PREFIX)logger-windows:$(MUTABLE_DOCKER_TAG)\n\n.PHONY: push-%\npush-%:\n\tdocker buildx build \\\n\t\t-f v2/$*/Dockerfile \\\n\t\t-t $(DOCKER_IMAGE_PREFIX)$*:$(IMMUTABLE_DOCKER_TAG) \\\n\t\t-t $(DOCKER_IMAGE_PREFIX)$*:$(MUTABLE_DOCKER_TAG) \\\n\t\t--build-arg VERSION=$(VERSION) \\\n\t\t--build-arg COMMIT=$(GIT_VERSION) \\\n\t\t--platform linux/amd64,linux/arm64 \\\n\t\t--push \\\n\t\t.\n\n.PHONY: sign-%\nsign-%:\n\tdocker pull $(DOCKER_IMAGE_PREFIX)$*:$(IMMUTABLE_DOCKER_TAG)\n\tdocker pull $(DOCKER_IMAGE_PREFIX)$*:$(MUTABLE_DOCKER_TAG)\n\tdocker trust sign $(DOCKER_IMAGE_PREFIX)$*:$(IMMUTABLE_DOCKER_TAG)\n\tdocker trust sign $(DOCKER_IMAGE_PREFIX)$*:$(MUTABLE_DOCKER_TAG)\n\tdocker trust inspect --pretty $(DOCKER_IMAGE_PREFIX)$*:$(IMMUTABLE_DOCKER_TAG)\n\tdocker trust inspect --pretty $(DOCKER_IMAGE_PREFIX)$*:$(MUTABLE_DOCKER_TAG)\n\n.PHONY: publish-chart\npublish-chart:\n\t$(HELM_DOCKER_CMD) sh\t-c ' \\\n\t\tcd charts/brigade && \\\n\t\thelm dep up && \\\n\t\thelm package . --version $(VERSION) --app-version $(VERSION) && \\\n\t\thelm push brigade-$(VERSION).tgz oci://$(HELM_REGISTRY)$(HELM_ORG) \\\n\t'\n\n.PHONY: publish-cli\npublish-cli: build-cli\n\t$(GO_DOCKER_CMD) sh -c ' \\\n\t\tghr \\\n\t\t\t-u $(GITHUB_ORG) \\\n\t\t\t-r $(GITHUB_REPO) \\\n\t\t\t-c $$(git rev-parse HEAD) \\\n\t\t\t-t $${GITHUB_TOKEN} \\\n\t\t\t-n ${VERSION} \\\n\t\t\t${VERSION} ./bin \\\n\t'\n\n################################################################################\n# Targets to facilitate hacking on Brigade.                                    #\n################################################################################\n\n.PHONY: hack-kind-up\nhack-kind-up:\n\tctlptl apply -f hack/kind/cluster.yaml\n\thelm repo ls | grep https://charts.helm.sh/stable || helm repo add stable https://charts.helm.sh/stable\n\thelm upgrade nfs stable/nfs-server-provisioner --install --create-namespace --namespace nfs\n\n.PHONY: hack-kind-down\nhack-kind-down:\n\tctlptl delete -f hack/kind/cluster.yaml\n\n.PHONY: hack-build-cli\nhack-build-cli:\n\t$(GO_DOCKER_CMD) sh -c ' \\\n\t\tcd v2 && \\\n\t\tOSES=$(shell go env GOOS) \\\n\t\tARCHS=$(shell go env GOARCH) \\\n\t\tVERSION=\"$(VERSION)\" \\\n\t\tCOMMIT=\"$(GIT_VERSION)\" \\\n\t\t../scripts/build-cli.sh \\\n\t'\n\n.PHONY: hack-deploy\nhack-deploy:\n\tkubectl get namespace brigade || kubectl create namespace brigade\n\thelm dep up charts/brigade && \\\n\thelm upgrade brigade charts/brigade \\\n\t\t--install \\\n\t\t--namespace brigade \\\n\t\t--wait \\\n\t\t--timeout 600s \\\n\t\t--set artemis.image.repository=$(DOCKER_IMAGE_PREFIX)artemis \\\n\t\t--set artemis.image.tag=$(IMMUTABLE_DOCKER_TAG) \\\n\t\t--set apiserver.image.repository=$(DOCKER_IMAGE_PREFIX)apiserver \\\n\t\t--set apiserver.image.tag=$(IMMUTABLE_DOCKER_TAG) \\\n\t\t--set apiserver.service.type=NodePort \\\n\t\t--set apiserver.service.nodePort=31600 \\\n\t\t--set apiserver.rootUser.password=\"${APISERVER_ROOT_PASSWORD}\" \\\n\t\t--set scheduler.image.repository=$(DOCKER_IMAGE_PREFIX)scheduler \\\n\t\t--set scheduler.image.tag=$(IMMUTABLE_DOCKER_TAG) \\\n\t\t--set observer.image.repository=$(DOCKER_IMAGE_PREFIX)observer \\\n\t\t--set observer.image.tag=$(IMMUTABLE_DOCKER_TAG) \\\n\t\t--set worker.image.repository=$(DOCKER_IMAGE_PREFIX)worker \\\n\t\t--set worker.image.tag=$(IMMUTABLE_DOCKER_TAG) \\\n\t\t--set gitInitializer.linux.image.repository=$(DOCKER_IMAGE_PREFIX)git-initializer \\\n\t\t--set gitInitializer.linux.image.tag=$(IMMUTABLE_DOCKER_TAG) \\\n\t\t--set logger.linux.image.repository=$(DOCKER_IMAGE_PREFIX)logger\\\n\t\t--set logger.linux.image.tag=$(IMMUTABLE_DOCKER_TAG)\n.PHONY: hack-expose-apiserver\nhack-expose-apiserver:\n\t@kubectl --namespace brigade port-forward service/brigade-apiserver 7000:443 &>/dev/null & \\\n\t\techo $$! > /tmp/brigade-apiserver.PID\n\n.PHONY: hack-unexpose-apiserver\nhack-unexpose-apiserver:\n\t@kill -TERM $$(cat /tmp/brigade-apiserver.PID)\n\n################################################################################\n# Docs Preview targets.                                                        #\n################################################################################\n\ndocs-stop-preview:\n\t@docker rm -f brigade-docs &> /dev/null || true\n\ndocs-preview: docs-stop-preview\n\t@docker run -d -v $$PWD:/src -p 1313:1313 --name brigade-docs -w /src/docs \\\n\tklakegg/hugo:0.54.0-ext-alpine server -D -F --noHTTPCache --watch --bind=0.0.0.0\n\t# Wait for the documentation web server to finish rendering\n\t@until docker logs brigade-docs | grep -m 1  \"Web Server is available\"; do : ; done\n\t@open \"http://localhost:1313\"\n\n.PHONY: stop-brigadier-docs-preview\nstop-brigadier-docs-preview:\n\t@docker rm -f brigadier-docs &> /dev/null || true\n\n.PHONY: brigadier-docs-preview\nbrigadier-docs-preview: stop-brigadier-docs-preview build-brigadier\n\t@docker run -d \\\n\t\t-v $$PWD/v2/brigadier/docs:/srv/jekyll \\\n\t\t-p 4000:4000 \\\n\t\t--name brigadier-docs \\\n\t\tjekyll/jekyll:latest jekyll serve\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.255859375,
          "content": "> # ⚠️ Brigade is an [_archived_ CNCF project](https://www.cncf.io/archived-projects/).\n\n<br>\n\n# Brigade: Event-Driven Scripting for Kubernetes\n\n![build](https://badgr.brigade2.io/v1/github/checks/brigadecore/brigade/badge.svg?appID=99005&branch=main)\n[![slack](https://img.shields.io/badge/slack-brigade-brightgreen.svg?logo=slack)](https://kubernetes.slack.com/messages/C87MF1RFD)\n[![Netlify Status](https://api.netlify.com/api/v1/badges/82538e29-5fcd-4196-8fa5-8de57cc096ed/deploy-status)](https://app.netlify.com/sites/brigade-docs/deploys)\n\n<img width=\"100\" align=\"left\" src=\"logo.png\">\n\nBrigade is a full-featured, event-driven scripting platform built on top of\nKubernetes. It integrates with many different event sources, more are always\nbeing added, and it's easy to create your own if you need something specific.\nAnd the best part -- Kubernetes is well-abstracted so even team members without\nextensive Kubernetes experience or without direct access to a cluster can be\nproductive.\n\n<br clear=\"left\"/>\n\n> ⚠️ You are viewing docs and code for Brigade 2. If you are looking for legacy\n> Brigade 1.x documentation and code, visit\n> [the v1 branch](https://github.com/brigadecore/brigade/tree/v1) \n\n## Getting Started\n\nReady to get started? Check out our\n[QuickStart](https://docs.brigade.sh/intro/quickstart/) for comprehensive\ninstructions.\n\n## The Brigade Ecosystem\n\nBrigade's API makes it easy to create all manner of peripherals-- tooling, event\ngateways, and more.\n\n### Gateways\n\nOur event gateways receive events from upstream systems (the \"outside world\")\nand convert them to Brigade events that are emitted into Brigade's event bus.\n\n* [Bitbucket Gateway](https://github.com/brigadecore/brigade-bitbucket-gateway/tree/v2)\n* [CloudEvents Gateway](https://github.com/brigadecore/brigade-cloudevents-gateway)\n* [Docker Hub Gateway](https://github.com/brigadecore/brigade-dockerhub-gateway)\n* [GitHub Gateway](https://github.com/brigadecore/brigade-github-gateway)\n* [Slack Gateway](https://github.com/brigadecore/brigade-slack-gateway)\n\n### Other Event Sources\n\n* [Cron Event Source](https://github.com/brigadecore/brigade-cron-event-source)\n* [Brigade Noisy Neighbor](https://github.com/brigadecore/brigade-noisy-neighbor)\n\n### Monitoring\n\n[Brigade Metrics](https://github.com/brigadecore/brigade-metrics) is a great way\nto obtain operational insights into a Brigade installation.\n\n### SDKs\n\nUse any of these to develop your own integrations!\n\n* [Brigade SDK for Go](https://github.com/brigadecore/brigade/tree/main/sdk) (used by Brigade itself)\n* [Brigade SDK for JavaScript](https://github.com/krancour/brigade-sdk-for-js) (and TypeScript)\n\n## Contributing\n\nThe Brigade project accepts contributions via GitHub pull requests. The\n[Contributing](CONTRIBUTING.md) document outlines the process to help get your\ncontribution accepted.\n\n## Support & Feedback\n\nWe have a slack channel!\n[Kubernetes/#brigade](https://kubernetes.slack.com/messages/C87MF1RFD) Feel free\nto join for any support questions or feedback, we are happy to help. To report\nan issue or to request a feature open an issue\n[here](https://github.com/brigadecore/brigade/issues)\n\n## Code of Conduct\n\nParticipation in the Brigade project is governed by the\n[CNCF Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md).\n"
        },
        {
          "name": "Tiltfile",
          "type": "blob",
          "size": 4.443359375,
          "content": "load('ext://min_k8s_version', 'min_k8s_version')\nmin_k8s_version('1.18.0')\n\ntrigger_mode(TRIGGER_MODE_MANUAL)\n\nload('ext://namespace', 'namespace_create')\nnamespace_create('brigade')\nk8s_resource(\n  new_name = 'namespace',\n  objects = ['brigade:namespace'],\n  labels = ['brigade']\n)\n\nconfig.clear_enabled_resources()\nconfig.set_enabled_resources([\n  'apiserver',\n  'artemis',\n  'logger',\n  'mongodb',\n  'namespace',\n  'observer',\n  'scheduler'\n])\n\nupdate_settings(\n  suppress_unused_image_warnings = [\"brigadecore/brigade2-git-initializer\"]\n)\nupdate_settings(\n  suppress_unused_image_warnings = [\"brigadecore/brigade2-worker\"]\n)\n\ndocker_build(\n  'brigadecore/brigade2-apiserver', '.',\n  dockerfile = 'v2/apiserver/Dockerfile',\n  only = [\n    'sdk/',\n    'v2/apiserver/',\n    'v2/internal/',\n    'v2/go.mod',\n    'v2/go.sum'\n  ],\n  ignore = ['**/*_test.go']\n)\nk8s_resource(\n  workload = 'brigade-apiserver',\n  new_name = 'apiserver',\n  resource_deps = ['artemis', 'mongodb'],\n  port_forwards = '31600:8080',\n  labels = ['brigade']\n)\nk8s_resource(\n  workload = 'apiserver',\n  objects = [\n    'brigade-apiserver:clusterrole',\n    'brigade-apiserver:clusterrolebinding',\n    'brigade-apiserver:secret',\n    'brigade-apiserver:serviceaccount'\n  ]\n)\n\ndocker_build(\n  'brigadecore/brigade2-artemis', '.',\n  dockerfile = 'v2/artemis/Dockerfile',\n  only = ['v2/artemis/'],\n  ignore = ['**/*_test.go']\n)\nk8s_resource(\n  workload = 'brigade-artemis',\n  new_name = 'artemis',\n  labels = ['brigade']\n)\nk8s_resource(\n  workload = 'artemis',\n  objects = [\n    'brigade-artemis:configmap',\n    'brigade-artemis:secret',\n    'brigade-artemis-common-config:secret'\n  ]\n)\n\ndocker_build(\n  'brigadecore/brigade2-git-initializer', '.',\n  dockerfile = 'v2/git-initializer/Dockerfile',\n  only = [\n    'sdk/',\n    'v2/git-initializer/',\n    'v2/internal/',\n    'v2/go.mod',\n    'v2/go.sum'\n  ],\n  ignore = ['**/*_test.go'],\n  match_in_env_vars = True\n)\n\ndocker_build(\n  'brigadecore/brigade2-logger', '.',\n  dockerfile = 'v2/logger/Dockerfile',\n  only = ['v2/logger/'],\n  ignore = ['**/*_test.go']\n)\nk8s_resource(\n  workload = 'brigade-logger',\n  new_name = 'logger',\n  labels = ['brigade'],\n)\nk8s_resource(\n  workload = 'logger',\n  objects = [\n    'brigade-logger:clusterrole',\n    'brigade-logger:clusterrolebinding',\n    'brigade-logger:secret',\n    'brigade-logger:serviceaccount'\n  ]\n)\nk8s_resource(\n  workload = 'brigade-logger-windows',\n  new_name = 'logger-windows',\n  labels = ['brigade'],\n)\n\nk8s_resource(\n  workload = 'brigade-mongodb',\n  new_name = 'mongodb',\n  labels = ['brigade']\n)\nk8s_resource(\n  workload = 'mongodb',\n  objects = [\n    'brigade-mongodb:persistentvolumeclaim',\n    'brigade-mongodb:secret',\n    'brigade-mongodb:serviceaccount'\n  ]\n)\n\ndocker_build(\n  'brigadecore/brigade2-observer', '.',\n  dockerfile = 'v2/observer/Dockerfile',\n  only = [\n    'sdk/',\n    'v2/internal/',\n    'v2/observer/',\n    'v2/go.mod',\n    'v2/go.sum'\n  ],\n  ignore = ['**/*_test.go']\n)\nk8s_resource(\n  workload = 'brigade-observer',\n  new_name = 'observer',\n  resource_deps = ['apiserver'],\n  labels = ['brigade']\n)\nk8s_resource(\n  workload = 'observer',\n  objects = [\n    'brigade-observer:clusterrole',\n    'brigade-observer:clusterrolebinding',\n    'brigade-observer:secret',\n    'brigade-observer:serviceaccount'\n  ]\n)\n\ndocker_build(\n  'brigadecore/brigade2-scheduler',\n  '.',\n  dockerfile = 'v2/scheduler/Dockerfile',\n  only = [\n    'sdk/',\n    'v2/internal/',\n    'v2/scheduler/',\n    'v2/go.mod',\n    'v2/go.sum'\n  ],\n  ignore = ['**/*_test.go']\n)\nk8s_resource(\n  workload = 'brigade-scheduler',\n  new_name = 'scheduler',\n  resource_deps = ['apiserver', 'artemis'],\n  labels = ['brigade'],\n)\nk8s_resource(\n  workload = 'scheduler',\n  objects = [\n    'brigade-scheduler:secret',\n    'brigade-scheduler:serviceaccount',\n  ]\n)\n\ndocker_build(\n  'brigadecore/brigade2-worker', '.',\n  dockerfile = 'v2/worker/Dockerfile',\n  only = [\n    'v2/brigadier/',\n    'v2/brigadier-polyfill/',\n    'v2/worker'\n  ],\n  ignore = ['**/*_test.go'],\n  match_in_env_vars = True\n)\n\nk8s_yaml(\n  helm(\n    './charts/brigade',\n    name = 'brigade',\n    namespace = 'brigade',\n    set = [\n      'apiserver.rootUser.password=F00Bar!!!',\n      'apiserver.tls.enabled=false',\n      'artemis.password=insecure-artemis-password',\n      'gitInitializer.linux.image.repository=brigadecore/brigade2-git-initializer',\n      'observer.apiToken=insecure-observer-token',\n      'scheduler.apiToken=insecure-scheduler-token',\n      'worker.image.repository=brigadecore/brigade2-worker'\n    ],\n  ),\n)\n"
        },
        {
          "name": "charts",
          "type": "tree",
          "content": null
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 0.1376953125,
          "content": "# Code of Conduct\n\nPlease refer to the [CNCF Community Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md/).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "golangci.yaml",
          "type": "blob",
          "size": 3.8427734375,
          "content": "run:\n  concurrency: 1\n  deadline: 10m\n  skip-files:\n\nlinters:\n  disable-all: true\n  enable:\n  # - bodyclose # Not yet working with Go 1.18\n  - depguard\n  # - dupl\n  - errcheck\n  - exportloopref\n  - forcetypeassert\n  - goconst\n  - gocyclo\n  - gofmt\n  - goimports\n  - gosec\n  - govet\n  - lll\n  # - maligned\n  - misspell\n  - nakedret\n  - prealloc\n  - revive\n  - unconvert\n  # - unparam # Not yet working with Go 1.18\n  # - unused # Not yet working with Go 1.18\n\n# all available settings for all linters\nlinters-settings:\n  depguard:\n    list-type: blacklist\n    include-go-root: false\n    packages:\n    - github.com/davecgh/go-spew/spew\n  dupl:\n    # tokens count to trigger issue, 150 by default\n    threshold: 100\n  errcheck:\n    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;\n    # default is false: such cases aren't reported by default.\n    check-type-assertions: false\n\n    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;\n    # default is false: such cases aren't reported by default.\n    check-blank: false\n  goconst:\n    # minimal length of string constant, 3 by default\n    min-len: 3\n    # minimal occurrences count to trigger, 3 by default\n    min-occurrences: 3\n  gocyclo:\n    # minimal code complexity to report, 30 by default (but we recommend 10-20)\n    min-complexity: 20\n  gofmt:\n    # simplify code: gofmt with `-s` option, true by default\n    simplify: true\n  goimports:\n    # put imports beginning with prefix after 3rd-party packages;\n    # it's a comma-separated list of prefixes\n    local-prefixes: github.com/org/project\n  govet:\n    # report about shadowed variables\n    check-shadowing: true\n  lll:\n    # max line length, lines longer will be reported. Default is 120.\n    # '\\t' is counted as 1 character by default, and can be changed with the tab-width option\n    line-length: 80\n    # tab width in spaces. Default to 1.\n    tab-width: 2\n  maligned:\n    # print struct with more effective memory layout or not, false by default\n    suggest-new: true\n  misspell:\n    # Correct spellings using locale preferences for US or UK.\n    # Default is to use a neutral variety of English.\n    # Setting locale to US will correct the British spelling of 'colour' to 'color'.\n    locale: US\n  nakedret:\n    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30\n    max-func-lines: 30\n  prealloc:\n    # XXX: we don't recommend using this linter before doing performance profiling.\n    # For most programs usage of prealloc will be a premature optimization.\n\n    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.\n    # True by default.\n    simple: true\n    range-loops: true # Report preallocation suggestions on range loops, true by default\n    for-loops: false # Report preallocation suggestions on for loops, false by default\n  unparam:\n    # call graph construction algorithm (cha, rta). In general, use cha for libraries,\n    # and rta for programs with main packages. Default is cha.\n    algo: cha\n\n    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.\n    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:\n    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations\n    # with golangci-lint call it on a directory with the changed file.\n    check-exported: false\n  unused:\n    # treat code as a program (not a library) and report unused exported identifiers; default is false.\n    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:\n    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations\n    # with golangci-lint call it on a directory with the changed file.\n    check-exported: false\n"
        },
        {
          "name": "hack",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 9.0283203125,
          "content": null
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.181640625,
          "content": "[build]\n  base = \"docs/\"\n  publish = \"docs/public/\"\n  command = \"hugo\"\n\n[build.environment]\n  HUGO_VERSION = \"0.92.0\"\n  \n[context.deploy-preview]\n  command = \"hugo -b $DEPLOY_PRIME_URL\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "v2",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}