{
  "metadata": {
    "timestamp": 1736567170592,
    "page": 764,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JohannesKaufmann/html-to-markdown",
      "stars": 2508,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.296875,
          "content": "\n# - - - - - General - - - - - #\n\n# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n.DS_Store\n\n\n\n# - - - - - Project Specific - - - - - #\n\nNOTES.md\n.tmp\n\n\ndist/\n"
        },
        {
          "name": ".goreleaser.yaml",
          "type": "blob",
          "size": 1.5029296875,
          "content": "\n# The lines below are called `modelines`. See `:help modeline`\n# Feel free to remove those if you don't want/need to use them.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json\n# vim: set ts=2 sw=2 tw=0 fo=cnqoj\n\nversion: 2\n\nbefore:\n  hooks:\n    - go mod tidy\n\nbuilds:\n  - env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - windows\n      - darwin\n\n    # Note: We only use goreleaser for the CLI,\n    # so we have to go into the \"cli\" directory.\n    dir: cli/html2markdown\n    binary: html2markdown\n\narchives:\n  - format: tar.gz\n    # this name template makes the OS and Arch compatible with the results of `uname`.\n    name_template: >-\n      {{ .ProjectName }}_\n      {{- title .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n    # use zip for windows archives\n    format_overrides:\n      - goos: windows\n        format: zip\n\nbrews:\n  - name: html2markdown\n    repository:\n      owner: JohannesKaufmann\n      name: homebrew-tap\n      token: \"{{ .Env.TAP_GITHUB_TOKEN }}\"\n\nnfpms:\n  - id: default\n    package_name: html2markdown\n\n    vendor: JohannesKaufmann\n    homepage: https://github.com/JohannesKaufmann/html-to-markdown\n    maintainer: Johannes Kaufmann <johannes@joina.de>\n    description: |\n      Convert HTML to Markdown. Even works with entire websites.\n    license: MIT\n\n    formats:\n      - deb\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - \"^docs:\"\n      - \"^test:\"\n"
        },
        {
          "name": "ESCAPING.md",
          "type": "blob",
          "size": 2.14453125,
          "content": "## Escaping\n\nSome characters have a special meaning in markdown. For example, the character \"\\*\" can be used for lists, emphasis and dividers. By placing a backlash before that character (e.g. \"\\\\\\*\") you can \"escape\" it. Then the character will render as a raw \"\\*\" without the _\"markdown meaning\"_ applied.\n\nBut why is \"escaping\" even necessary?\n\n<!-- prettier-ignore -->\n```md\nParagraph 1\n-\nParagraph 2\n```\n\nThe markdown above doesn't seem that problematic. But \"Paragraph 1\" (with only one hyphen below) will be recognized as a _setext heading_.\n\n```html\n<h2>Paragraph 1</h2>\n<p>Paragraph 2</p>\n```\n\nA well-placed backslash character would prevent that...\n\n<!-- prettier-ignore -->\n```md\nParagraph 1\n\\-\nParagraph 2\n```\n\n---\n\nHow to configure escaping? Depending on the `EscapeMode` option, the markdown output is going to be different.\n\n```go\nconv := converter.NewConverter(\n    converter.WithEscapeMode(\"smart\"), // default\n    converter.WithPlugins(\n        // ...\n    )\n)\n```\n\nLets try it out with this HTML input:\n\n|          |                                                       |\n| -------- | ----------------------------------------------------- |\n| input    | `<p>fake **bold** and real <strong>bold</strong></p>` |\n|          |                                                       |\n|          | **With EscapeMode \"smart\"**                           |\n| output   | `fake \\*\\*bold\\*\\* and real **bold**`                 |\n| rendered | fake \\*\\*bold\\*\\* and real **bold**                   |\n|          |                                                       |\n|          | **With EscapeMode \"disabled\"**                        |\n| output   | `fake **bold** and real **bold**`                     |\n| rendered | fake **bold** and real **bold**                       |\n\nWith **smart** escaping, we get some escape characters (the backlash \"\\\\\") but it renders correctly.\n\nWith escaping **disabled**, the fake and real bold can't be distinguished in the markdown. That means it is both going to render as bold.\n\n---\n\nSo now you know the purpose of escaping. However, if you encounter some content where the escaping breaks, you can manually disable it. But please also open an issue!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2018 Johannes Kaufmann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.1064453125,
          "content": "# html-to-markdown\n\nA robust html-to-markdown converter that transforms HTML (even entire websites) into clean, readable Markdown. It supports complex formatting, customizable options, and plugins for full control over the conversion process.\n\nUse the fully extendable [Golang library](#golang-library) or a quick [CLI command](#cli---using-it-on-the-command-line). Alternatively, try the [Online Demo](https://html-to-markdown.com/demo) or [REST API](https://html-to-markdown.com/api) to see it in action!\n\nHere are some _cool features_:\n\n- **Bold & Italic:** Supports bold and italic‚Äîeven within single words.\n\n  ![](./.github/images/point_bold_italic.png)\n\n- **List:** Handles ordered and unordered lists with full nesting support.\n\n  ![](./.github/images/point_list.png)\n\n- **Blockquote:** Blockquotes can include other elements, with seamless support for nested quotes.\n\n  ![](./.github/images/point_blockquote.png)\n\n- **Inline Code & Code Block:** Correctly handles backticks and multi-line code blocks, preserving code structure.\n\n  ![](./.github/images/point_code.png)\n\n- **Link & Image:** Properly formats multi-line links, adding escapes for blank lines where needed.\n\n  ![](./.github/images/point_link_image.png)\n\n- **Smart Escaping:** Escapes special characters only when necessary, to avoid accidental Markdown rendering.\n  üóíÔ∏è [ESCAPING.md](/ESCAPING.md)\n\n  ![](./.github/images/point_escaping.png)\n\n- **Remove/Keep HTML:** Choose to strip or retain specific HTML tags for ultimate control over output.\n\n  ![](./.github/images/point_wrapper.png)\n\n- **Plugins:** Easily extend with plugins. Or create custom ones to enhance functionality.\n\n  ![](./.github/images/point_strikethrough.png)\n\n---\n\n---\n\n## Usage\n\n[üíª Golang library](#golang-library) | [üì¶ CLI](#cli---using-it-on-the-command-line) | [‚ñ∂Ô∏è Hosted Demo](https://html-to-markdown.com/demo) | [üåê Hosted REST API](https://html-to-markdown.com/api)\n\n> [!TIP]\n> Looking for an all in one cloud solution? We're _sponsored_ by [üî• Firecrawl](https://html-to-markdown.com/sponsor/firecrawl), where you can scrape any website and turn it into AI friendly markdown with one API call.\n\n---\n\n## Golang Library\n\n### Installation\n\n```bash\ngo get -u github.com/JohannesKaufmann/html-to-markdown/v2\n```\n\n_Or if you want a specific commit add the suffix `/v2@commithash`_\n\n> [!NOTE]  \n> This is the documentation for the v2 library. For the old version switch to the [\"v1\" branch](https://github.com/JohannesKaufmann/html-to-markdown/tree/v1).\n\n### Usage\n\n[![Go V2 Reference](https://pkg.go.dev/badge/github.com/JohannesKaufmann/html-to-markdown/v2.svg)](https://pkg.go.dev/github.com/JohannesKaufmann/html-to-markdown/v2)\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\thtmltomarkdown \"github.com/JohannesKaufmann/html-to-markdown/v2\"\n)\n\nfunc main() {\n\tinput := `<strong>Bold Text</strong>`\n\n\tmarkdown, err := htmltomarkdown.ConvertString(input)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(markdown)\n\t// Output: **Bold Text**\n}\n```\n\n- üßë‚Äçüíª [Example code, basics](/examples/basics/main.go)\n\nUse `WithDomain` to convert _relative_ links to _absolute_ links:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\thtmltomarkdown \"github.com/JohannesKaufmann/html-to-markdown/v2\"\n\t\"github.com/JohannesKaufmann/html-to-markdown/v2/converter\"\n)\n\nfunc main() {\n\tinput := `<img src=\"/assets/image.png\" />`\n\n\tmarkdown, err := htmltomarkdown.ConvertString(\n\t\tinput,\n\t\tconverter.WithDomain(\"https://example.com\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(markdown)\n\t// Output: ![](https://example.com/assets/image.png)\n}\n```\n\nThe function `htmltomarkdown.ConvertString()` is a _small wrapper_ around `converter.NewConverter()` and the _base_ and _commonmark_ plugins. If you want more control, use the following:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/JohannesKaufmann/html-to-markdown/v2/converter\"\n\t\"github.com/JohannesKaufmann/html-to-markdown/v2/plugin/base\"\n\t\"github.com/JohannesKaufmann/html-to-markdown/v2/plugin/commonmark\"\n)\n\nfunc main() {\n\tinput := `<strong>Bold Text</strong>`\n\n\tconv := converter.NewConverter(\n\t\tconverter.WithPlugins(\n\t\t\tbase.NewBasePlugin(),\n\t\t\tcommonmark.NewCommonmarkPlugin(\n\t\t\t\tcommonmark.WithStrongDelimiter(\"__\"),\n\t\t\t\t// ...additional configurations for the plugin\n\t\t\t),\n\t\t),\n\t)\n\n\tmarkdown, err := conv.ConvertString(input)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(markdown)\n\t// Output: __Bold Text__\n}\n```\n\n- üßë‚Äçüíª [Example code, options](/examples/options/main.go)\n\n> [!NOTE]  \n> If you use `NewConverter` directly make sure to also **register the commonmark and base plugin**.\n\n### Plugins\n\n#### Published Plugins\n\nThese are the plugins located in the [plugin folder](/plugin):\n\n| Name                  | Description                                                                          |\n| --------------------- | ------------------------------------------------------------------------------------ |\n| Base                  | Implements basic shared functionality (e.g. removing nodes)                          |\n| Commonmark            | Implements Markdown according to the [Commonmark Spec](https://spec.commonmark.org/) |\n|                       |                                                                                      |\n| GitHubFlavored        | _planned_                                                                            |\n| TaskListItems         | _planned_                                                                            |\n| Strikethrough         | Converts `<strike>`, `<s>`, and `<del>` to the `~~` syntax.                          |\n| Table                 | _planned_                                                                            |\n|                       |                                                                                      |\n| VimeoEmbed            | _planned_                                                                            |\n| YoutubeEmbed          | _planned_                                                                            |\n|                       |                                                                                      |\n| ConfluenceCodeBlock   | _planned_                                                                            |\n| ConfluenceAttachments | _planned_                                                                            |\n\n> [!NOTE]  \n> Not all the plugins from v1 are already ported to v2. These will soon be implemented...\n\nThese are the plugins in other repositories:\n\n| Name                         | Description         |\n| ---------------------------- | ------------------- |\n| \\[Plugin Name\\]\\(Your Link\\) | A short description |\n\n#### Writing Plugins\n\nYou want to write custom logic?\n\n1. Write your logic and **register** it.\n\n   ![](./.github/images/autocomplete_register.png)\n\n   - üßë‚Äçüíª [Example code, register](/examples/register/main.go)\n\n2. _Optional:_ Package your logic into a **plugin** and publish it.\n\n   - üóíÔ∏è [WRITING_PLUGINS.md](/WRITING_PLUGINS.md)\n\n---\n\n---\n\n## CLI - Using it on the command line\n\nUsing the Golang library provides the most customization, while the CLI is the simplest way to get started.\n\n### Installation\n\n#### Homebrew Tap\n\n```bash\nbrew install JohannesKaufmann/tap/html2markdown\n```\n\n#### Debian\n\nA `deb` package is available. See the [Setup Instructions](https://cloudsmith.io/~html-to-markdown/repos/stable/setup/#formats-deb).\n\n_Note: Support for other Linux distributions is tracked in [#119](https://github.com/JohannesKaufmann/html-to-markdown/issues/119)_\n\n#### Pre-compiled Binaries\n\nDownload pre-compiled binaries for Linux, macOS or Windows from the [releases page](https://github.com/JohannesKaufmann/html-to-markdown/releases). Extract the archive and copy the executable to a location in your system PATH (e.g. `/usr/local/bin`).\n\n#### Installation via Go\n\nIf you have Go installed, you can install the CLI directly using:\n\n```bash\ngo install github.com/JohannesKaufmann/html-to-markdown/v2/cli/html2markdown@latest\n```\n\nThis will download the source code and compile it into an executable in your Go binary directory (typically `$GOPATH/bin`).\n\n#### Build from Source\n\nBinaries are automatically built via [GoReleaser](https://goreleaser.com/) and attached to each [release](https://github.com/JohannesKaufmann/html-to-markdown/releases).\n\nTo build locally (requires Go):\n\n```bash\ngo build ./cli/html2markdown\n```\n\n### Version\n\n```bash\nhtml2markdown --version\n```\n\n> [!NOTE]  \n> Make sure that `--version` prints `2.X.X` as there is a different CLI for V2 of the converter.\n\n### Usage\n\n```bash\n$ echo \"<strong>important</strong>\" | html2markdown\n\n**important**\n```\n\n```text\n$ curl --no-progress-meter http://example.com | html2markdown\n\n# Example Domain\n\nThis domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.\n\n[More information...](https://www.iana.org/domains/example)\n```\n\nUse `--help` to learn about the configurations, for example:\n\n- `--domain=\"https://example.com\"` to convert _relative_ links to _absolute_ links.\n- `--exclude-selector=\".ad\"` to exclude the html elements with `class=\"ad\"` from the conversion.\n- `--include-selector=\"article\"` to only include the `<article>` html elements in the conversion.\n\n_(The cli does not support every option yet. Over time more customization will be added)_\n\n---\n\n---\n\n## FAQ\n\n### Extending with Plugins\n\n- Need your own logic? Write your own code and then **register** it.\n\n  - Don't like the **defaults** that the library uses? You can use `PriorityEarly` to run you logic _earlier_ than others.\n\n  - üßë‚Äçüíª [Example code, register](/examples/register/main.go)\n\n- If you believe that you logic could also benefit others, you can package it up into a **plugin**.\n\n  - üóíÔ∏è [WRITING_PLUGINS.md](/WRITING_PLUGINS.md)\n\n### Bugs\n\nYou found a bug?\n\n[Open an issue](https://github.com/JohannesKaufmann/html-to-markdown/issues/new/choose) with the HTML snippet that does not produce the expected results. Please, please, plase _submit the HTML snippet_ that caused the problem. Otherwise it is very difficult to reproduce and fix...\n\n### Security\n\nThis library produces markdown that is readable and can be changed by humans.\n\nOnce you convert this markdown back to HTML (e.g. using [goldmark](https://github.com/yuin/goldmark) or [blackfriday](https://github.com/russross/blackfriday)) you need to be careful of malicious content.\n\nThis library does NOT sanitize untrusted content. Use an HTML sanitizer such as [bluemonday](https://github.com/microcosm-cc/bluemonday) before displaying the HTML in the browser.\n\nüóíÔ∏è [SECURITY.md](/SECURITY.md) if you find a security vulnerability\n\n### Goroutines\n\nYou can use the `Converter` from (multiple) goroutines. Internally a mutex is used & there is a test to verify that behaviour.\n\n### Escaping & Backslash\n\nSome characters have a special meaning in markdown (e.g. \"\\*\" for emphasis). The backslash `\\` character is used to \"escape\" those characters. That is perfectly safe and won't be displayed in the final render.\n\nüóíÔ∏è [ESCAPING.md](/ESCAPING.md)\n\n### Contributing\n\nYou want to contribute? Thats great to hear! There are many ways to help:\n\nHelping to answer questions, triaging issues, writing documentation, writing code, ...\n\nIf you want to make a code change: Please first discuss the change you wish to make, by opening an issue. I'm also happy to guide you to where a change is most likely needed. There are also extensive tests (see below) so you can freely experiment üßë‚Äçüî¨\n\n_Note: The outside API should not change because of backwards compatibility..._\n\n### Testing\n\nYou don't have to be afraid of breaking the converter, since there are many \"Golden File\" tests:\n\nAdd your problematic HTML snippet to one of the `.in.html` files in the `testdata` folders. Then run `go test -update` and have a look at which `.out.md` files changed in GIT.\n\nYou can now change the internal logic and inspect what impact your change has by running `go test -update` again.\n\n_Note: Before submitting your change as a PR, make sure that you run those tests and check the files into GIT..._\n\n### License\n\nUnless otherwise specified, the project is licensed under the terms of the MIT license.\n\nüóíÔ∏è [LICENSE](/LICENSE)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.212890625,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease report (suspected) security vulnerabilities to johannes@joina.de with the subject _\"Security html-to-markdown\"_ and you will receive a response within 48 hours.\n\n"
        },
        {
          "name": "WRITING_PLUGINS.md",
          "type": "blob",
          "size": 0.08984375,
          "content": "# Writing Plugins\n\nStill in progress, check back later...\n\nTODO: info about writing plugins\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "collapse",
          "type": "tree",
          "content": null
        },
        {
          "name": "convert.go",
          "type": "blob",
          "size": 1.5107421875,
          "content": "package htmltomarkdown\n\nimport (\n\t\"io\"\n\n\t\"github.com/JohannesKaufmann/html-to-markdown/v2/converter\"\n\t\"github.com/JohannesKaufmann/html-to-markdown/v2/plugin/base\"\n\t\"github.com/JohannesKaufmann/html-to-markdown/v2/plugin/commonmark\"\n\t\"golang.org/x/net/html\"\n)\n\n// ConvertString converts a html-string to a markdown-string.\n//\n// Under the hood `html.Parse()` is used to parse the HTML.\nfunc ConvertString(htmlInput string, opts ...converter.ConvertOptionFunc) (string, error) {\n\tconv := converter.NewConverter(\n\t\tconverter.WithPlugins(\n\t\t\tbase.NewBasePlugin(),\n\t\t\tcommonmark.NewCommonmarkPlugin(),\n\t\t),\n\t)\n\n\treturn conv.ConvertString(htmlInput, opts...)\n}\n\n// ConvertReader converts the html from the reader to markdown.\n//\n// Under the hood `html.Parse()` is used to parse the HTML.\nfunc ConvertReader(r io.Reader, opts ...converter.ConvertOptionFunc) ([]byte, error) {\n\tconv := converter.NewConverter(\n\t\tconverter.WithPlugins(\n\t\t\tbase.NewBasePlugin(),\n\t\t\tcommonmark.NewCommonmarkPlugin(),\n\t\t),\n\t)\n\n\treturn conv.ConvertReader(r, opts...)\n}\n\n// ConvertNode converts a `*html.Node` to a markdown byte slice.\n//\n// If you have already parsed an HTML page using the `html.Parse()` function\n// from the \"golang.org/x/net/html\" package then you can pass this node\n// directly to the converter.\nfunc ConvertNode(doc *html.Node, opts ...converter.ConvertOptionFunc) ([]byte, error) {\n\tconv := converter.NewConverter(\n\t\tconverter.WithPlugins(\n\t\t\tbase.NewBasePlugin(),\n\t\t\tcommonmark.NewCommonmarkPlugin(),\n\t\t),\n\t)\n\n\treturn conv.ConvertNode(doc, opts...)\n}\n"
        },
        {
          "name": "convert_test.go",
          "type": "blob",
          "size": 3.4287109375,
          "content": "package htmltomarkdown_test\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\n\thtmltomarkdown \"github.com/JohannesKaufmann/html-to-markdown/v2\"\n\t\"github.com/JohannesKaufmann/html-to-markdown/v2/converter\"\n\t\"github.com/JohannesKaufmann/html-to-markdown/v2/plugin/base\"\n\t\"github.com/JohannesKaufmann/html-to-markdown/v2/plugin/commonmark\"\n\t\"golang.org/x/net/html\"\n)\n\nfunc ExampleConvertString() {\n\tinput := `<strong>Bold Text</strong>`\n\n\tmarkdown, err := htmltomarkdown.ConvertString(input)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(markdown)\n\t// Output: **Bold Text**\n}\n\nfunc ExampleWithDomain() {\n\tinput := `<img src=\"/assets/image.png\" />`\n\n\tmarkdown, err := htmltomarkdown.ConvertString(\n\t\tinput,\n\t\t// Provide a different domain for every convert call:\n\t\tconverter.WithDomain(\"https://example.com\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(markdown)\n\t// Output: ![](https://example.com/assets/image.png)\n}\n\nfunc ExampleConvertNode() {\n\tinput := `<strong>Bold Text</strong>`\n\n\tdoc, err := html.Parse(strings.NewReader(input))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tmarkdown, err := htmltomarkdown.ConvertNode(doc)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(string(markdown))\n\t// Output: **Bold Text**\n}\n\nfunc TestConvertString_WindowsCarriageReturn(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc string\n\n\t\tinput    string\n\t\texpected string\n\t}{\n\t\t{\n\t\t\tdesc: \"just newlines\",\n\n\t\t\tinput:    \"\\r\\n\\r\\n\\r\\n\\r\\n\",\n\t\t\texpected: \"\",\n\t\t},\n\t\t{\n\t\t\tdesc: \"inside strong\",\n\n\t\t\tinput:    \"<strong>Bold\\r\\n\\r\\n\\r\\n\\r\\nText</strong>\",\n\t\t\texpected: \"**Bold Text**\",\n\t\t},\n\t\t{\n\t\t\tdesc: \"inside paragraph\",\n\n\t\t\tinput:    \"<p>Some\\r\\n\\r\\n\\r\\n\\r\\nText</p>\",\n\t\t\texpected: \"Some Text\",\n\t\t},\n\t\t{\n\t\t\tdesc: \"inside list\",\n\n\t\t\tinput:    \"<ul><li>Some\\r\\n\\r\\n\\r\\n\\r\\nText</li></ul>\",\n\t\t\texpected: \"- Some Text\",\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\toutput, err := htmltomarkdown.ConvertString(tC.input)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif output != tC.expected {\n\t\t\t\tt.Errorf(\"expected %q but got %q\", tC.expected, output)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDataRaceDetector(t *testing.T) {\n\tconv := converter.NewConverter(\n\t\tconverter.WithPlugins(\n\t\t\tbase.NewBasePlugin(),\n\t\t\tcommonmark.NewCommonmarkPlugin(),\n\t\t),\n\t)\n\n\tinput := `<i>italic text</i>`\n\n\tvar wg sync.WaitGroup\n\n\tfor i := 0; i < 500; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tconv.Register.EscapedChar('~')\n\t\t\tconv.Register.UnEscaper(\n\t\t\t\tfunc(chars []byte, index int) int { return -1 },\n\t\t\t\tconverter.PriorityStandard,\n\t\t\t)\n\t\t\tconv.Register.PreRenderer(\n\t\t\t\tfunc(ctx converter.Context, doc *html.Node) {},\n\t\t\t\tconverter.PriorityStandard,\n\t\t\t)\n\t\t\tconv.Register.TextTransformer(\n\t\t\t\tfunc(ctx converter.Context, content string) string { return content },\n\t\t\t\tconverter.PriorityStandard,\n\t\t\t)\n\t\t\tconv.Register.Renderer(\n\t\t\t\tfunc(ctx converter.Context, w converter.Writer, n *html.Node) converter.RenderStatus {\n\t\t\t\t\treturn converter.RenderTryNext\n\t\t\t\t},\n\t\t\t\tconverter.PriorityStandard,\n\t\t\t)\n\t\t\tconv.Register.PostRenderer(\n\t\t\t\tfunc(ctx converter.Context, content []byte) []byte {\n\t\t\t\t\treturn content\n\t\t\t\t},\n\t\t\t\tconverter.PriorityStandard,\n\t\t\t)\n\n\t\t\tconv.Register.TagType(\"script\", converter.TagTypeBlock, converter.PriorityStandard)\n\n\t\t\toutput, err := conv.ConvertString(input, converter.WithDomain(\"example.com\"))\n\t\t\tif err != nil {\n\t\t\t\tt.Error(err)\n\t\t\t}\n\t\t\t_ = output\n\n\t\t\toutput2, err := conv.ConvertString(input)\n\t\t\tif err != nil {\n\t\t\t\tt.Error(err)\n\t\t\t}\n\t\t\t_ = output2\n\n\t\t\twg.Done()\n\t\t}()\n\t}\n\twg.Wait()\n}\n"
        },
        {
          "name": "converter",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.7109375,
          "content": "module github.com/JohannesKaufmann/html-to-markdown/v2\n\ngo 1.22.1\n\nrequire (\n\tgithub.com/JohannesKaufmann/dom v0.2.0\n\tgithub.com/agnivade/levenshtein v1.2.0\n\tgithub.com/andybalholm/cascadia v1.3.3\n\tgithub.com/muesli/termenv v0.15.2\n\tgithub.com/sebdah/goldie/v2 v2.5.5\n\tgithub.com/yuin/goldmark v1.7.8\n\tgolang.org/x/net v0.33.0\n)\n\nrequire (\n\tgithub.com/aymanbagabas/go-osc52/v2 v2.0.1 // indirect\n\tgithub.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.16 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgithub.com/sergi/go-diff v1.3.1 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 10.099609375,
          "content": "github.com/JohannesKaufmann/dom v0.2.0 h1:1bragmEb19K8lHAqgFgqCpiPCFEZMTXzOIEjuxkUfLQ=\ngithub.com/JohannesKaufmann/dom v0.2.0/go.mod h1:57iSUl5RKric4bUkgos4zu6Xt5LMHUnw3TF1l5CbGZo=\ngithub.com/agnivade/levenshtein v1.2.0 h1:U9L4IOT0Y3i0TIlUIDJ7rVUziKi/zPbrJGaFrtYH3SY=\ngithub.com/agnivade/levenshtein v1.2.0/go.mod h1:QVVI16kDrtSuwcpd0p1+xMC6Z/VfhtCyDIjcwga4/DU=\ngithub.com/andybalholm/cascadia v1.3.3 h1:AG2YHrzJIm4BZ19iwJ/DAua6Btl3IwJX+VI4kktS1LM=\ngithub.com/andybalholm/cascadia v1.3.3/go.mod h1:xNd9bqTn98Ln4DwST8/nG+H0yuB8Hmgu1YHNnWw0GeA=\ngithub.com/arbovm/levenshtein v0.0.0-20160628152529-48b4e1c0c4d0 h1:jfIu9sQUG6Ig+0+Ap1h4unLjW6YQJpKZVmUzxsD4E/Q=\ngithub.com/arbovm/levenshtein v0.0.0-20160628152529-48b4e1c0c4d0/go.mod h1:t2tdKJDJF9BV14lnkjHmOQgcvEKgtqs5a1N3LNdJhGE=\ngithub.com/aymanbagabas/go-osc52/v2 v2.0.1 h1:HwpRHbFMcZLEVr42D4p7XBqjyuxQH5SMiErDT4WkJ2k=\ngithub.com/aymanbagabas/go-osc52/v2 v2.0.1/go.mod h1:uYgXzlJ7ZpABp8OJ+exZzJJhRNQ2ASbcXHWsFqH8hp8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgryski/trifles v0.0.0-20230903005119-f50d829f2e54 h1:SG7nF6SRlWhcT7cNTs5R6Hk4V2lcmLz2NsG2VnInyNo=\ngithub.com/dgryski/trifles v0.0.0-20230903005119-f50d829f2e54/go.mod h1:if7Fbed8SFyPtHLHbg49SI7NAdJiC5WIA09pe59rfAA=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=\ngithub.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/muesli/termenv v0.15.2 h1:GohcuySI0QmI3wN8Ok9PtKGkgkFIk7y6Vpb5PvrY+Wo=\ngithub.com/muesli/termenv v0.15.2/go.mod h1:Epx+iuz8sNs7mNKhxzH4fWXGNpZwUaJKRS1noLXviQ8=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/sebdah/goldie/v2 v2.5.5 h1:rx1mwF95RxZ3/83sdS4Yp7t2C5TCokvWP4TBRbAyEWY=\ngithub.com/sebdah/goldie/v2 v2.5.5/go.mod h1:oZ9fp0+se1eapSRjfYbsV/0Hqhbuu3bJVvKI/NNtssI=\ngithub.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=\ngithub.com/sergi/go-diff v1.3.1 h1:xkr+Oxo4BOQKmkn/B9eMK0g5Kg/983T9DqqPHwYqD+8=\ngithub.com/sergi/go-diff v1.3.1/go.mod h1:aMJSSKb2lpPvRNec0+w3fl7LP9IOFzdc9Pa4NFbPK1I=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0 h1:2E4SXV/wtOkTonXsotYi4li6zVWxYlZuYNCXe9XRJyk=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/yuin/goldmark v1.7.8 h1:iERMLn0/QJeHFhxSt3p6PeN9mGnvIKSpG9YYorDMnic=\ngithub.com/yuin/goldmark v1.7.8/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=\ngolang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\ngolang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "marker",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}