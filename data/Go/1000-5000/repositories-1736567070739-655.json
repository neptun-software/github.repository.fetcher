{
  "metadata": {
    "timestamp": 1736567070739,
    "page": 655,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ContainerSSH/ContainerSSH",
      "stars": 2738,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clomonitor.yml",
          "type": "blob",
          "size": 0.2880859375,
          "content": "# CLOMonitor metadata file\n# https://github.com/cncf/clomonitor/blob/main/docs/metadata/.clomonitor.yml\n\nexemptions:\n  - check: trademark_disclaimer\n    reason: \"The website root is a (js/html) redirect to the current version which contains the disclaimer. CLOMonitor doesn't follow redirects.\"\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0751953125,
          "content": "Dockerfile\nssh_host_rsa_key\nconfig.yaml\ndocker-compose.yaml\n\nbuild/\ncover.out"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.31640625,
          "content": "build/\ncover.out\nconfig.yaml\nconfig.*.yaml\nssh_host_rsa_key\nvendor\nNOTICE.md\n\n*.iml\n.idea\ntarget\nbuild\ndest\nsite\ntest.yml\n.flattened-pom.xml\n*.tfvars\nterraform.tfstate\nterraform.tfstate.backup\n.terraform\n__pycache__\n*.pyc\ncontainerssh-authconfig-openapi.json\ndocs/api/authconfig/containerssh-authconfig.json\nvenv\nvar\n.vscode"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2099609375,
          "content": "[submodule \"examples\"]\n       path = examples\n       url = https://github.com/ContainerSSH/examples.git\n[submodule \"internal/geoip/data\"]\n\tpath = internal/geoip/data\n\turl = https://github.com/maxmind/MaxMind-DB.git\n"
        },
        {
          "name": ".golangci.optional.yml",
          "type": "blob",
          "size": 0.5751953125,
          "content": "run:\n  timeout: 5m\nlinters:\n  enable:\n    - nestif\n    - gocritic\n    - gocyclo\n    - gocognit\n    - goconst\n    - unparam\n    - funlen\n    - prealloc\n    - gosec\n    - nakedret\n    - godot\n    - godox\n    - gci\nlinters-settings:\n  gomoddirectives:\n    replace-allow-list:\n      - gopkg.in/yaml.v2\n  govet:\n    enable-all: true\n    check-shadowing: false\n    disable:\n      # Remove this in a future PR to optimize struct usage.\n      - fieldalignment\n      # We don't care about variable shadowing.\n      - shadow\n  stylecheck:\n    checks:\n      - all\nissues:\n  exclude-use-default: false"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.677734375,
          "content": "run:\n  timeout: 5m\nlinters:\n  enable:\n    - gomoddirectives\n    - nolintlint\n    - unconvert\n    - asciicheck\n    - bodyclose\n    - dupl\n    - copyloopvar\n    - dogsled\n    - importas\n    - nilerr\n    - errorlint\n    - durationcheck\n    - testpackage\n    - whitespace\n  disable:\n    # TODO remove these\n    - unused\nlinters-settings:\n  gomoddirectives:\n    replace-allow-list:\n      - gopkg.in/yaml.v2\n  govet:\n    enable-all: true\n    check-shadowing: false\n    disable:\n      # Remove this in a future PR to optimize struct usage.\n      - fieldalignment\n      # We don't care about variable shadowing.\n      - shadow\n  stylecheck:\n    checks:\n      - all\nissues:\n  exclude-use-default: false\n"
        },
        {
          "name": ".goreleaser.yaml",
          "type": "blob",
          "size": 2.4619140625,
          "content": "version: 2\nbefore:\n  hooks:\n    - go generate\nbuilds:\n  - id: containerssh\n    main: cmd/containerssh/main.go\n    binary: \"containerssh\"\n    goos:\n      - freebsd\n      - windows\n      - darwin\n      - linux\n    goarch:\n      - amd64\n      - arm64\n    env:\n      - CGO_ENABLED=0\n  - id: containerssh-auditlog-decoder\n    main: cmd/containerssh-auditlog-decoder/main.go\n    binary: \"containerssh-auditlog-decoder\"\n    goos:\n      - freebsd\n      - windows\n      - darwin\n      - linux\n    goarch:\n      - amd64\n      - arm64\n    env:\n      - CGO_ENABLED=0\n  - id: containerssh-testauthconfigserver\n    main: cmd/containerssh-testauthconfigserver/main.go\n    binary: \"containerssh-testauthconfigserver\"\n    goos:\n      - freebsd\n      - windows\n      - darwin\n      - linux\n    goarch:\n      - amd64\n      - arm64\n    env:\n      - CGO_ENABLED=0\narchives:\n  - builds:\n      - containerssh\n      - containerssh-auditlog-decoder\n      - containerssh-testauthconfigserver\n    format_overrides:\n      - goos: windows\n        format: zip\n    files:\n      - LICENSE\n      - NOTICE.md\n      - config.example.yaml\nnfpms:\n  - vendor: ContainerSSH\n    homepage: https://containerssh.io\n    maintainer: Janos Pasztor <handshake@containerssh.io>\n    description: An SSH server that launches Docker containers and Kubernetes pods\n    license: MIT\n    builds:\n      - containerssh\n      - containerssh-testauthconfigserver\n      - containerssh-auditlog-decoder\n    formats:\n      - deb\n      - rpm\n      - apk\n    bindir: /usr/sbin\n    suggests:\n      - docker\n    contents:\n      - dst: /etc/containerssh\n        type: dir\n      - src: config.example.yaml\n        dst: /etc/containerssh/config.yaml\n        type: config\n      - src: LICENSE\n        dst: /usr/share/doc/containerssh/LICENSE\n      - src: NOTICE.md\n        dst: /usr/share/doc/containerssh/NOTICE.md\n      - dst: /etc/containerssh\n        type: dir\n        file_info:\n          owner: root\n          group: root\n          mode: 0755\nsigns:\n  - id: sign-checksums\n    artifacts: checksum\nsource:\n  enabled: true\n  name_template: '{{ .ProjectName }}-{{ .Version }}-source'\nsboms:\n  - id: sbom-config\n    documents : \n      - \"containerssh.cdx.sbom\"  \n    cmd : cyclonedx-gomod\n    args: [ \"mod\", \"-licenses\", \"-json\", \"-output\", \"$document\", \"../\"]\n    artifacts: source \ndist: build\nrelease:\n  github:\n    owner: containerssh\n    name: containerssh\n  prerelease: auto\n  extra_files:\n    - glob: LICENSE\n    - glob: NOTICE.md\n    - glob: containerssh-authconfig-openapi.json\n"
        },
        {
          "name": "CODES.md",
          "type": "blob",
          "size": 0.7724609375,
          "content": "# Message / error codes\n\n| Code | Explanation |\n|------|-------------|\n| `CORE_CONFIG_CANNOT_WRITE_FILE` | ContainerSSH cannot update the configuration file with the new host keys and will only use the host key for the current run. |\n| `CORE_CONFIG_ERROR` | ContainerSSH encountered an error in the configuration. |\n| `CORE_CONFIG_FILE` | ContainerSSH is reading the configuration file. |\n| `CORE_HEALTH_CHECK_FAILED` | A ContainerSSH health check failed. |\n| `CORE_HEALTH_CHECK_SUCCESSFUL` | The health check was successful. |\n| `CORE_HOST_KEY_GENERATION_FAILED` | ContainerSSH could not generate host keys and is aborting the run. |\n| `CORE_NO_HOST_KEYS` | The configuration does not contain host keys. ContainerSSH will attempt to generate host keys and update the configuration file. |\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.9052734375,
          "content": "# ContainerSSH Code of Conduct\n\nWe care about our code *and* our community. With your contribution to this project, you agree to adhere to the ContainerSSH Code of Conduct and follow these four simple rules:\n\n1. Be nice to each other.\n2. Assume good intentions.\n3. Attack the idea, not the person.\n4. Take politics and off-topic discussions elsewhere.\n\nIt can sometimes happen that our words are misunderstood. However, we do neither tolerate nor accept rude behavior of any kind in our community. ContainerSSH core maintainers have the right to remove or edit any contributions from this project should they find that they are violating our code of conduct. Repeat or severe offenders may also be permanently banned from having a space in the community.\n\nIf you witness unacceptable behavior, or are personally attacked, please refrain from answering if possible and contact our core maintainers at handshake@containerssh.io.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.615234375,
          "content": "# Contributing to ContainerSSH\n\nWelcome - and a big thank you for wanting to contribute!\n\nLet's get you started. This project is licensed under the [Apache 2.0 license](LICENSE). This means that the code you submit will be usable for anyone for any purpose free of charge. You should only submit code that you personally own or have permission to submit under this license - and only if you are ok with that.\n\nFor the coding aspects, we recommend reading the [development guide](https://containerssh.io/development/). You can also [join our Slack channel](https://join.slack.com/t/containerssh/shared_invite/zt-w2ulatkm-hjGHk8OaxQCBX79XKJHAQQ) to communicate with our community members directly.\n\n## Steps to your contribution\n\nWhether you have a big contribution incoming, a small typo fix, or any other type of contribution you would like to add, the process is the same:\n\n1. Make sure you understand the [license](LICENSE) and agree to the [Developer Certificate of Origin](DCO.md)\n2. Submit a pull request to the [relevant repository](https://github.com/containerssh)\n3. Wait for a maintainer to review your contribution\n\n## Requirement\n\n⚠️ By contributing to ContainerSSH, you certify that you understand and agree to the contents of the [Developer Certificate of Origin](https://developercertificate.org/).\n\n## Note\n\nIf you would like to appear in the [list of contributors](https://containerssh.io/about/) on the ContainerSSH website, you can also submit a pull request to [our contributors file](https://github.com/ContainerSSH/containerssh.github.io/blob/main/contributors.yaml) once you have successfully completed your first contribution.\n"
        },
        {
          "name": "DCO.md",
          "type": "blob",
          "size": 1.34375,
          "content": "# Developer Certificate of Origin\n\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n---\n\n## Developer's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.080078125,
          "content": "[![ContainerSSH - Launch Containers on Demand](https://containerssh.github.io/images/logo-for-embedding.svg)](https://containerssh.io/)\n\n<!--suppress HtmlDeprecatedAttribute -->\n<h1 align=\"center\">An SSH Server that Launches Containers in Kubernetes and Docker</h1>\n\n[![Documentation: available](https://img.shields.io/badge/documentation-available-green)](https://containerssh.io/)\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/ContainerSSH/ContainerSSH/main.yml?&branch=main)](https://github.com/containerssh/containerssh/actions)\n[![GitHub release (latest SemVer)](https://img.shields.io/github/v/release/containerssh/containerssh?sort=semver)](https://github.com/containerssh/containerssh/releases)\n[![Docker Image Size (latest by date)](https://img.shields.io/docker/image-size/containerssh/containerssh)](http://hub.docker.com/r/containerssh/containerssh)\n[![Go Report Card](https://goreportcard.com/badge/github.com/containerssh/containerssh)](https://goreportcard.com/report/github.com/containerssh/containerssh)\n[![License: Apache 2.0](https://img.shields.io/github/license/ContainerSSH/ContainerSSH)](LICENSE.md)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FContainerSSH%2FContainerSSH.svg?type=shield&issueType=license)](https://app.fossa.com/projects/git%2Bgithub.com%2FContainerSSH%2FContainerSSH?ref=badge_shield&issueType=license)\n\n## ContainerSSH in One Minute\n\nIn a hurry? This one-minute video explains everything you need to know about ContainerSSH.\n\n[![An image with a YouTube play button on it.](https://containerssh.io/images/containerssh-intro-preview.png)](https://youtu.be/Cs9OrnPi2IM)\n\n## Need help?\n\n[Join the #containerssh Slack channel on the CNCF Slack »](https://communityinviter.com/apps/cloud-native/cncf)\n\n## Use cases\n\n### Build a lab\n\nBuilding a lab environment can be time-consuming. ContainerSSH solves this by providing dynamic SSH access with APIs, automatic cleanup on logout using ephemeral containers, and persistent volumes for storing data. **Perfect for vendor and student labs.**\n\n[Read more »](https://containerssh.io/usecases/lab/)\n\n### Debug a production system\n\nProvide **production access to your developers**, give them their usual tools while logging all changes. Authorize their access and create short-lived credentials for the database using simple webhooks. Clean up the environment on disconnect.\n\n[Read more »](https://containerssh.io/usecases/debugging/)\n\n### Run a honeypot\n\nStudy SSH attack patterns up close. Drop attackers safely into network-isolated containers or even virtual machines, and **capture their every move** using the audit logging ContainerSSH provides. The built-in S3 upload ensures you don't lose your data.\n\n[Read more »](https://containerssh.io/usecases/honeypots/)\n\n## How does it work?\n\n![](https://containerssh.io/images/architecture.svg)\n\n1. The user opens an SSH connection to ContainerSSH.\n2. ContainerSSH calls the authentication server with the users username and password/pubkey to check if its valid.\n3. ContainerSSH calls the config server to obtain backend location and configuration (if configured)\n4. ContainerSSH calls the container backend to launch the container with the\n   specified configuration. All input from the user is sent directly to the backend, output from the container is sent\n   to the user.\n\n[▶️ Watch as video »](https://youtu.be/Cs9OrnPi2IM) | [🚀 Get started »](https://containerssh.io/quickstart/)\n\n## Demo\n\n![](https://containerssh.io/images/ssh-in-action.gif)\n\n[🚀 Get started »](https://containerssh.io/quickstart/)\n\n## Verify provenance\n\nEach of the releases come with a SLSA provenance data file `multiple.intoto.jsonl`. This file can be used to verify the source and provenance of the produced artifacts with [`slsa-verifier`](https://github.com/slsa-framework/slsa-verifier).\n\n\nThis aims to ensure the users that the artifacts are coming from containerssh.\n\nAn example of verification :\n```sh\nslsa-verifier verify-artifact <artifact-to-verify> \\\n--provenance-path <path-to-your-provenance> \\\n--source-uri github.com/containerssh/containerssh\n```\n\nIf the verification is successful, the process should produce the following output :\n```\nVerifying artifact <artifact-to-verify>: PASSED\nPASSED: Verified SLSA provenance\n```\n\n\n## Contributing\n\nIf you would like to contribute, please check out our [Code of Conduct](https://github.com/ContainerSSH/community/blob/main/CODE_OF_CONDUCT.md) as well as our [contribution documentation](https://containerssh.io/development/).\n\n## Embedding ContainerSSH\n\nYou can fully embed ContainerSSH into your own application. First, you will need to create the configuration structure:\n\n```go\ncfg := config.AppConfig{}\n// Set the default configuration:\ncfg.Default()\n```\n\nYou can then populate this config with your options and create a ContainerSSH instance like this:\n\n```go\npool, lifecycle, err := containerssh.New(cfg, loggerFactory)\nif err != nil {\n    return err\n}\n```\n\nYou will receive a service pool and a lifecycle as a response. You can use these to start the service pool of ContainerSSH. This will block execution until ContainerSSH stops.\n\n```go\nerr := lifecycle.Run()\n```\n\nThis will run ContainerSSH in the current Goroutine. You can also use the lifecycle to add hooks to lifecycle states of ContainerSSH. You must do this *before* you call `Run()`. For example:\n\n```go\nlifecycle.OnStarting(\n    func(s service.Service, l service.Lifecycle) {\n        print(\"ContainerSSH is starting...\")\n    },\n)\n```\n\nYou can also have ContainerSSH stop gracefully by using the `Stop()` function on the lifecycle. This takes a context as an argument, which is taken as a timeout for the graceful shutdown.\n\nFinally, you can use the returned `pool` variable to rotate the logs. This will trigger all ContainerSSH services to close and reopen their log files.\n\n```\npool.RotateLogs()\n```\n\n## Building an authentication webhook server\n\n## Building a configuration webhook server\n\nThe configuration webhook lets you dynamically configure ContainerSSH. This library contains the tools to create a tiny webserver to serve these webhook requests.\n\nFirst, you need to fetch this library as a dependency using [go modules](https://blog.golang.org/using-go-modules):\n\n```bash\ngo get github.com/containerssh/libcontainerssh\n```\n\nNext, you will have to write an implementation for the following interface:\n\n```go\npackage main\n\nimport (\n\t\"github.com/containerssh/libcontainerssh/config\"\n)\n\ntype ConfigRequestHandler interface {\n\tOnConfig(request config.Request) (config.AppConfig, error)\n}\n```\n\nThe best way to do this is creating a struct and adding a method with a receiver:\n\n```go\ntype myConfigReqHandler struct {\n}\n\nfunc (m *myConfigReqHandler) OnConfig(\n    request configuration.ConfigRequest,\n) (config configuration.AppConfig, err error) {\n    // We recommend using an IDE to discover the possible options here.\n    if request.Username == \"foo\" {\n        config.Docker.Config.ContainerConfig.Image = \"yourcompany/yourimage\"\n    }\n    return config, err\n}\n```\n\n**Warning!** Your `OnConfig` method should *only* return an error if it can genuinely not serve the request. This should not be used as a means to reject users. This should be done using the authentication server. If you return an error ContainerSSH will retry the request several times in an attempt to work around network failures.\n\nOnce you have your handler implemented you must decide which method you want to use for integration.\n\n### The full server method\n\nThis method is useful if you don't want to run anything else on the webserver, only the config endpoint. You can create a new server like this:\n\n```go\npackage main\n\nimport (\n\t\"signal\"\n\t\n\t\"github.com/containerssh/libcontainerssh/config\"\n\t\"github.com/containerssh/libcontainerssh/config/webhook\"\n\t\"github.com/containerssh/libcontainerssh/log\"\n\t\"github.com/containerssh/libcontainerssh/service\"\n)\n\nfunc main() {\n\tlogger := log.NewLogger(&config.LogConfig{\n\t\t// Add logging configuration here\n    })\n\t// Create the webserver service\n    srv, err := webhook.NewServer(\n        config.HTTPServerConfiguration{\n            Listen: \"0.0.0.0:8080\",\n        },\n        &myConfigReqHandler{},\n        logger,\n    )\n\tif err != nil {\n\t\tpanic(err)\n    }\n\n\t// Set up the lifecycle handler\n\tlifecycle := service.NewLifecycle(srv)\n\t\n\t// Launch the webserver in the background\n\tgo func() {\n\t\t//Ignore error, handled later.\n\t\t_ = lifecycle.Run()\n\t}()\n\n    // Handle signals and terminate webserver gracefully when needed.\n\tsignals := make(chan os.Signal, 1)\n\tsignal.Notify(signals, syscall.SIGINT, syscall.SIGTERM)\n\tgo func() {\n\t\tif _, ok := <-signals; ok {\n\t\t\t// ok means the channel wasn't closed, let's trigger a shutdown.\n\t\t\t// The context given is the timeout for the shutdown.\n\t\t\tlifecycle.Stop(\n\t\t\t\tcontext.WithTimeout(\n\t\t\t\t\tcontext.Background(),\n\t\t\t\t\t20 * time.Second,\n\t\t\t\t),\n\t\t\t)\n\t\t}\n\t}()\n\t// Wait for the service to terminate.\n\tlastError := lifecycle.Wait()\n\t// We are already shutting down, ignore further signals\n\tsignal.Ignore(syscall.SIGINT, syscall.SIGTERM)\n\t// close signals channel so the signal handler gets terminated\n\tclose(signals)\n\n\tif lastError != nil {\n\t\t// Exit with a non-zero signal\n\t\tfmt.Fprintf(\n\t\t\tos.Stderr,\n\t\t\t\"an error happened while running the server (%v)\",\n\t\t\tlastError,\n\t\t)\n\t\tos.Exit(1)\n\t}\n\tos.Exit(0)\n}\n```\n\n**Note:** We recommend securing client-server communication with certificates. Please see the [Securing webhooks section below](#securing-webhooks)/\n\n### Integrating with an existing HTTP server\n\nUse this method if you want to integrate your handler with an existing Go HTTP server. This is rather simple:\n\n```go\nhandler, err := configuration.NewHandler(&myConfigReqHandler{}, logger)\n```\n\nYou can now use the `handler` variable as a handler for the [`http` package](https://golang.org/pkg/net/http/) or a MUX like [gorilla/mux](https://github.com/gorilla/mux).\n\n## Using the config client\n\nThis library also contains the components to call the configuration server in a simplified fashion. To create a client simply call the following method:\n\n```go\nclient, err := configuration.NewClient(\n\tconfiguration.ClientConfig{\n        http.ClientConfiguration{\n            URL: \"http://your-server/config-endpoint/\"\n        }\n    },\n\tlogger,\n    metricsCollector,\n)\n```\n\nThe `logger` is a logger from the [log library](https://github.com/containerssh/libcontainerssh/log), the `metricsCollector` is supplied by the [metrics library](https://github.com/containerssh/metrics).\n\nYou can now use the `client` variable to fetch the configuration specific to a connecting client:\n\n```go\nconnectionID := \"0123456789ABCDEF\"\nappConfig, err := client.Get(\n    ctx,\n    \"my-name-is-trinity\",\n    net.TCPAddr{\n        IP: net.ParseIP(\"127.0.0.1\"),\n        Port: 2222,\n    },\n    connectionID,\n) (AppConfig, error)\n```\n\nNow you have the client-specific configuration in `appConfig`.\n\n**Note:** We recommend securing client-server communication with certificates. The details about securing your HTTP requests are documented in the [HTTP library](https://github.com/containerssh/http).\n\n## Loading the configuration from a file\n\nThis library also provides simplified methods for reading the configuration from an `io.Reader` and writing it to an `io.Writer`.\n\n```go\nfile, err := os.Open(\"file.yaml\")\n// ...\nloader, err := configuration.NewReaderLoader(\n\tfile,\n    logger,\n    configuration.FormatYAML,\n)\n// Read global config\nappConfig := &configuration.AppConfig{}\nerr := loader.Load(ctx, appConfig)\n// Read connection-specific config:\nerr := loader.LoadConnection(\n    ctx,\n    \"my-name-is-trinity\",\n    net.TCPAddr{\n        IP: net.ParseIP(\"127.0.0.1\"),\n        Port: 2222,\n    },\n    connectionID,\n    appConfig,\n)\n```\n\nAs you can see these loaders are designed to be chained together. For example, you could add an HTTP loader after the file loader:\n\n```go\nhttpLoader, err := configuration.NewHTTPLoader(clientConfig, logger)\n```\n\nThis HTTP loader calls the HTTP client described above.\n\nConversely, you can write the configuration to a YAML format:\n\n```go\nsaver, err := configuration.NewWriterSaver(\n    os.Stdout,\n    logger,\n    configuration.FormatYAML,\n)\nerr := saver.Save(appConfig)\n```\n\n\n## Building a combined configuration-authentication webhook server\n\n## Securing webhooks\n\n## Reading audit logs\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.4345703125,
          "content": "# Security Policy\n\n## Supported Versions\n\nContainerSSH is very early in development and does not have a stable release yet. When it becomes stable (1.0) we will follow [Semantic Versioning](https://semver.org/) for support. The support period for each branch is still to be determined.\n\n## Reporting a Vulnerability\n\nIf you think you have found a vulnerability please contact us via our [security page](https://containerssh.io/about/security/).\n"
        },
        {
          "name": "agentprotocol",
          "type": "tree",
          "content": null
        },
        {
          "name": "auditlog",
          "type": "tree",
          "content": null
        },
        {
          "name": "auth",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.example.yaml",
          "type": "blob",
          "size": 0.26953125,
          "content": "ssh:\n  hostkeys:\n    - /etc/containerssh/ssh_host_rsa_key\nbackend: docker\nauth:\n  password:\n    method: webhook\n    webhook:\n      url: \"http://127.0.0.1:8080\"\nconfigserver:\n  url: \"http://127.0.0.1:8080/config\"\nmetrics:\n  enable: true\n  listen: 0.0.0.0:9100\n  path: /metrics\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "containerssh.service",
          "type": "blob",
          "size": 0.408203125,
          "content": "[Unit]\nDescription=ContainerSSH\nAfter=network.target\n\n[Service]\nType=simple\nUser=containerssh\nGroup=containerssh\nLimitNOFILE=1024\n\nRestart=on-failure\nRestartSec=10\nstartLimitIntervalSec=60\n\nWorkingDirectory=/\nExecStart=/usr/sbin/containerssh --config /etc/containerssh/config.yaml\n\nPermissionsStartOnly=true\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=containerssh\n\n[Install]\nWantedBy=multi-user.target"
        },
        {
          "name": "e2e_backend_test.go",
          "type": "blob",
          "size": 0.908203125,
          "content": "package containerssh_test\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\n    \"go.containerssh.io/containerssh/config\"\n)\n\n// TestBackends tests all possible backends for basic functionality.\nfunc TestBackends(t *testing.T) {\n\tfor _, backend := range config.BackendValues() {\n\t\tt.Run(\n\t\t\tfmt.Sprintf(\"backend=%s\", backend),\n\t\t\tfunc(t *testing.T) {\n\t\t\t\ttestBackend(NewT(t), backend)\n\t\t\t},\n\t\t)\n\t}\n}\n\n// testBackend tests a single backend.\nfunc testBackend(t T, backend config.Backend) {\n\tt.ConfigureBackend(backend)\n\tt.StartContainerSSH()\n\tt.LoginViaSSH()\n\n\tt.Run(\"CommandExecution\", func(t T) {\n\t\tt.StartSessionChannel()\n\t\tt.RequestCommandExecution(\"echo 'Hello world!' && sleep 3\")\n\t\tt.AssertStdoutHas(\"Hello world!\")\n\t\tt.CloseChannel()\n\t})\n\n\tt.Run(\"Shell\", func(t T) {\n\t\tt.StartSessionChannel()\n\t\tt.RequestShell()\n\t\tt.SendStdin(\"echo 'Hello world!' && sleep 3\\n\")\n\t\tt.AssertStdoutHas(\"Hello world!\")\n\t\tt.SendStdin(\"exit\\n\")\n\t\tt.CloseChannel()\n\t})\n}\n"
        },
        {
          "name": "e2e_framework_test.go",
          "type": "blob",
          "size": 15.529296875,
          "content": "package containerssh_test\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n    containerssh \"go.containerssh.io/containerssh\"\n    auth2 \"go.containerssh.io/containerssh/auth\"\n    \"go.containerssh.io/containerssh/auth/webhook\"\n    \"go.containerssh.io/containerssh/config\"\n    internalssh \"go.containerssh.io/containerssh/internal/ssh\"\n    \"go.containerssh.io/containerssh/internal/test\"\n    \"go.containerssh.io/containerssh/log\"\n    \"go.containerssh.io/containerssh/message\"\n    \"go.containerssh.io/containerssh/metadata\"\n    \"go.containerssh.io/containerssh/service\"\n\t\"golang.org/x/crypto/ssh\"\n)\n\nfunc NewT(t *testing.T) T {\n\tcfg := config.AppConfig{}\n\tcfg.Default()\n\treturn &testContext{\n\t\tt,\n\t\tcfg,\n\t\t&sync.Mutex{},\n\t\tNewAuthUserStorage(),\n\t\t0,\n\t\t0,\n\t\tnil,\n\t\tnil,\n\t\tnil,\n\t\tnil,\n\t}\n}\n\ntype T interface {\n\t// StartContainerSSH starts a ContainerSSH instance on a random port. If no authentication has been previously\n\t// configured, this configures ContainerSSH for webhook authentication with an internal user database.\n\tStartContainerSSH()\n\t// ConfigureBackend configures ContainerSSH to use a specific backend.\n\tConfigureBackend(backend config.Backend)\n\t// LoginViaSSH logs creates a temporary user and logs in via SSH. After this\n\t// has been called new session channels can be requested.\n\tLoginViaSSH()\n\t// StartSessionChannel starts a new session channel in ContainerSSH. Later commands will\n\t// run in the context of this session channel. If multiple session channels are desired,\n\t// each one should be run in a separate subtest.\n\tStartSessionChannel()\n\t// RequestCommandExecution attempts to run the specified command in a previously-opened\n\t// session channel. If no session channel has been opened, this command will fail.\n\tRequestCommandExecution(cmd string)\n\t// RequestShell requests a shell to be executed.\n\tRequestShell()\n\t// AssertStdoutHas waits for the specified output string to be sent from the output.\n\tAssertStdoutHas(output string)\n\t// SendStdin sends the specified string to the SSH server via the standard input.\n\tSendStdin(data string)\n\t// CloseChannel closes the current channel.\n\tCloseChannel()\n\n\tParallel()\n\tRun(name string, f func(t T)) bool\n\tCleanup(func())\n\tError(args ...interface{})\n\tErrorf(format string, args ...interface{})\n\tFail()\n\tFailNow()\n\tFailed() bool\n\tFatal(args ...interface{})\n\tFatalf(format string, args ...interface{})\n\tLog(args ...interface{})\n\tLogf(format string, args ...interface{})\n\tSkip(args ...interface{})\n\tSkipNow()\n\tSkipf(format string, args ...interface{})\n}\n\ntype testContext struct {\n\t*testing.T\n\tcfg       config.AppConfig\n\tlock      *sync.Mutex\n\tusers     AuthUserStorage\n\tauthPort  int\n\tsshPort   int\n\tlifecycle service.Lifecycle\n\tsshConn   *ssh.Client\n\tchannel   ssh.Channel\n\trequests  <-chan *ssh.Request\n}\n\nfunc (c *testContext) StartContainerSSH() {\n\tt := c.T\n\tt.Helper()\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tif c.lifecycle != nil {\n\t\tt.Fatalf(\"ContainerSSH is already running.\")\n\t}\n\n\tt.Logf(\"Starting ContainerSSH...\")\n\n\tc.authPort = test.GetNextPort(c.T, \"auth server\")\n\tc.authServer(c.T, c.users, c.authPort)\n\tc.cfg.Auth.PasswordAuth.Method = config.PasswordAuthMethodWebhook\n\tc.cfg.Auth.PasswordAuth.Webhook.URL = fmt.Sprintf(\"http://127.0.0.1:%d\", c.authPort)\n\tc.cfg.Auth.PublicKeyAuth.Method = config.PubKeyAuthMethodWebhook\n\tc.cfg.Auth.PublicKeyAuth.Webhook.URL = fmt.Sprintf(\"http://127.0.0.1:%d\", c.authPort)\n\n\tc.sshPort = test.GetNextPort(c.T, \"ContainerSSH\")\n\tc.cfg.SSH.Listen = fmt.Sprintf(\"127.0.0.1:%d\", c.sshPort)\n\tif err := c.cfg.SSH.GenerateHostKey(); err != nil {\n\t\tt.Fatalf(\"Failed to generate host keys (%v)\", err)\n\t}\n\tc.cfg.Log.T = c.T\n\tc.cfg.Log.Destination = config.LogDestinationTest\n\n\tcssh, lifecycle, err := containerssh.New(c.cfg, log.NewLoggerFactory())\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to start ContainerSSH (%v)\", err)\n\t}\n\tc.lifecycle = lifecycle\n\trunning := make(chan struct{})\n\tstopped := make(chan struct{})\n\tcrashed := make(chan struct{})\n\tlifecycle.OnRunning(\n\t\tfunc(s service.Service, l service.Lifecycle) {\n\t\t\tclose(running)\n\t\t},\n\t)\n\tlifecycle.OnStopping(\n\t\tfunc(s service.Service, l service.Lifecycle, shutdownContext context.Context) {\n\t\t\tclose(stopped)\n\t\t},\n\t)\n\tlifecycle.OnCrashed(\n\t\tfunc(s service.Service, l service.Lifecycle, err error) {\n\t\t\tclose(crashed)\n\t\t},\n\t)\n\tgo func() {\n\t\t_ = cssh.RunWithLifecycle(lifecycle)\n\t}()\n\tc.T.Cleanup(func() {\n\t\tlifecycle.Stop(context.Background())\n\t})\n\n\tselect {\n\tcase <-running:\n\t\tt.Logf(\"ContainerSSH is now running.\")\n\tcase <-stopped:\n\t\tt.Fatalf(\"ContainerSSH unexpectedly stopped.\")\n\tcase <-crashed:\n\t\tt.Fatalf(\"ContainerSSH unexpectedly crashed.\")\n\t}\n\n\tt.Logf(\"Started ContainerSSH.\")\n}\n\nfunc (c *testContext) ConfigureBackend(backend config.Backend) {\n\tt := c.T\n\tt.Helper()\n\n\tt.Logf(\"Configuring %s backend...\", backend)\n\tc.cfg.Backend = backend\n\tswitch backend {\n\tcase config.BackendKubernetes:\n\t\tkube := test.Kubernetes(t)\n\t\tc.cfg.Kubernetes.Connection.ServerName = kube.ServerName\n\t\tc.cfg.Kubernetes.Connection.Host = kube.Host\n\t\tc.cfg.Kubernetes.Connection.CAData = kube.CACert\n\t\tc.cfg.Kubernetes.Connection.KeyData = kube.UserKey\n\t\tc.cfg.Kubernetes.Connection.CertData = kube.UserCert\n\tcase config.BackendSSHProxy:\n\t\tproxy := test.SSH(t)\n\t\tc.cfg.SSHProxy.Server = proxy.Host()\n\t\tc.cfg.SSHProxy.Port = uint16(proxy.Port())\n\t\tc.cfg.SSHProxy.Username = proxy.Username()\n\t\tc.cfg.SSHProxy.Password = proxy.Password()\n\t\tc.cfg.SSHProxy.AllowedHostKeyFingerprints = []string{\n\t\t\tproxy.FingerprintSHA256(),\n\t\t}\n\t\tc.cfg.SSHProxy.HostKeyAlgorithms = config.MustSSHKeyAlgoListFromStringList(\n\t\t\tproxy.HostKeyAlgorithms(),\n\t\t)\n\t}\n\tt.Logf(\"Configured %s backend.\", backend)\n}\n\nfunc (c *testContext) LoginViaSSH() {\n\tt := c.T\n\tt.Helper()\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\tif c.sshConn != nil {\n\t\tt.Fatalf(\"Already logged in via SSH.\")\n\t}\n\n\tt.Logf(\"Logging in via SSH...\")\n\n\tcfg := ssh.ClientConfig{}\n\tcfg.SetDefaults()\n\tusername := c.T.Name()\n\tuser := c.users.AddUser(username)\n\tpassword := \"test-login\"\n\tuser.SetPassword(password)\n\tcfg.Auth = append(cfg.Auth, ssh.Password(password))\n\n\thostKeys, err := c.cfg.SSH.LoadHostKeys()\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to read back the host keys (%v)\", err)\n\t}\n\thostKeyAlgorithms := make([]string, len(hostKeys))\n\tmarshalledHostKeys := make([]string, len(hostKeys))\n\tfor i, hostKey := range hostKeys {\n\t\thostKeyAlgorithms[i] = hostKey.PublicKey().Type()\n\t\tmarshalledHostKeys[i] = string(ssh.MarshalAuthorizedKey(hostKey.PublicKey()))\n\t}\n\tcfg.HostKeyAlgorithms = hostKeyAlgorithms\n\tcfg.HostKeyCallback = func(hostname string, remote net.Addr, key ssh.PublicKey) error {\n\t\tmarshalledHostKey := string(ssh.MarshalAuthorizedKey(key))\n\t\tfor _, hostKey := range marshalledHostKeys {\n\t\t\tif hostKey == marshalledHostKey {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\treturn fmt.Errorf(\"invalid host key: %s\", marshalledHostKey)\n\t}\n\tcfg.User = username\n\n\tsshConn, err := ssh.Dial(\"tcp\", fmt.Sprintf(\"127.0.0.1:%d\", c.sshPort), &cfg)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to log in via SSH (%v)\", err)\n\t}\n\tc.sshConn = sshConn\n\n\tt.Logf(\"SSH login successful.\")\n}\n\nfunc (c *testContext) StartSessionChannel() {\n\tt := c.T\n\tt.Helper()\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\tif c.sshConn == nil {\n\t\tt.Fatalf(\"SSH connection is not running.\")\n\t}\n\tif c.channel != nil {\n\t\tt.Fatalf(\"A channel is already open.\")\n\t}\n\n\tt.Logf(\"Starting a new session channel...\")\n\n\tchannel, requests, err := c.sshConn.OpenChannel(\"session\", nil)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to open channel (%v)\", err)\n\t}\n\tc.channel = channel\n\tc.requests = requests\n\t// We use c.T here so the cleanup happens in the parent test.\n\tc.T.Cleanup(func() {\n\t\t_ = channel.Close()\n\t\tc.channel = nil\n\t})\n\n\tt.Logf(\"Started a new session channel.\")\n}\n\nfunc (c *testContext) RequestCommandExecution(cmd string) {\n\tt := c.T\n\tt.Helper()\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\tif c.channel == nil {\n\t\tt.Fatalf(\"No channel opened.\")\n\t}\n\tt.Logf(\"Starting program %s ...\", cmd)\n\n\tsuccess, err := c.channel.SendRequest(\n\t\tstring(internalssh.RequestTypeExec),\n\t\ttrue,\n\t\tssh.Marshal(internalssh.ExecRequestPayload{Exec: cmd}),\n\t)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to send exec request. (%v)\", err)\n\t}\n\tif !success {\n\t\tt.Fatalf(\"Server rejected exec request. (%v)\", err)\n\t}\n\tt.Logf(\"Started program.\")\n}\n\nfunc (c *testContext) RequestShell() {\n\tt := c.T\n\tt.Helper()\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\tif c.channel == nil {\n\t\tt.Fatalf(\"No channel opened.\")\n\t}\n\tt.Logf(\"Starting shell...\")\n\n\tsuccess, err := c.channel.SendRequest(\n\t\tstring(internalssh.RequestTypeShell),\n\t\ttrue,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to send exec request. (%v)\", err)\n\t}\n\tif !success {\n\t\tt.Fatalf(\"Server rejected exec request. (%v)\", err)\n\t}\n\tt.Logf(\"Started shell.\")\n}\n\nfunc (c *testContext) AssertStdoutHas(output string) {\n\tt := c.T\n\tt.Helper()\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\tif c.channel == nil {\n\t\tt.Fatalf(\"No channel opened.\")\n\t}\n\tt.Logf(\"Waiting for output...\")\n\n\t// Wait a second to allow the output to arrive\n\ttime.Sleep(1 * time.Second)\n\tdata := make([]byte, 16*1024)\n\tn, err := c.channel.Read(data)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to read channel stdout. (%v)\", err)\n\t}\n\n\tif !strings.Contains(string(data[:n]), output) {\n\t\tt.Fatalf(\"Output does not contain '%s' (output was: %s)\", output, string(data[:n]))\n\t}\n\n\tt.Logf(\"Output check complete.\")\n}\n\nfunc (c *testContext) SendStdin(data string) {\n\tt := c.T\n\tt.Helper()\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\tif c.channel == nil {\n\t\tt.Fatalf(\"No channel opened.\")\n\t}\n\tt.Logf(\"Sending stdin data...\")\n\n\tif _, err := c.channel.Write([]byte(data)); err != nil {\n\t\tt.Fatalf(\"Failed to send stdin data (%v)\", err)\n\t}\n\n\tt.Logf(\"Sent stdin data.\")\n}\n\nfunc (c *testContext) CloseChannel() {\n\tt := c.T\n\tt.Helper()\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\tif c.channel == nil {\n\t\tt.Fatalf(\"No channel opened.\")\n\t}\n\tt.Logf(\"Closing channel...\")\n\n\tif err := c.channel.Close(); err != nil && !errors.Is(err, io.EOF) {\n\t\tt.Fatalf(\"Failed to close channel. (%v)\", err)\n\t}\n\n\tc.channel = nil\n\n\tt.Logf(\"Closed channel.\")\n}\n\nfunc (c *testContext) Run(name string, f func(t T)) bool {\n\tc.T.Helper()\n\treturn c.T.Run(name, func(t *testing.T) {\n\t\tt.Helper()\n\t\tf(&testContext{\n\t\t\tt,\n\t\t\tc.cfg,\n\t\t\tc.lock,\n\t\t\tc.users,\n\t\t\tc.authPort,\n\t\t\tc.sshPort,\n\t\t\tc.lifecycle,\n\t\t\tc.sshConn,\n\t\t\tnil,\n\t\t\tnil,\n\t\t})\n\t})\n}\n\ntype authHandler struct {\n\tuserdb AuthUserStorage\n}\n\nfunc (a *authHandler) OnPassword(meta metadata.ConnectionAuthPendingMetadata, Password []byte) (\n\tbool,\n\tmetadata.ConnectionAuthenticatedMetadata,\n\terror,\n) {\n\tuser, err := a.userdb.GetUser(meta.Username)\n\tif err != nil {\n\t\treturn false, meta.AuthFailed(), err\n\t}\n\tif pw := user.GetPassword(); pw != nil && *pw == string(Password) {\n\t\treturn true, meta.Authenticated(meta.Username), nil\n\t}\n\treturn false, meta.AuthFailed(), fmt.Errorf(\"incorrect password\")\n}\n\nfunc (a *authHandler) OnPubKey(meta metadata.ConnectionAuthPendingMetadata, publicKey auth2.PublicKey) (\n\tbool,\n\tmetadata.ConnectionAuthenticatedMetadata,\n\terror,\n) {\n\tuser, err := a.userdb.GetUser(meta.Username)\n\tif err != nil {\n\t\treturn false, meta.AuthFailed(), err\n\t}\n\tfor _, key := range user.GetAuthorizedKeys() {\n\t\tif key == publicKey.PublicKey {\n\t\t\treturn true, meta.Authenticated(meta.Username), nil\n\t\t}\n\t}\n\treturn false, meta.AuthFailed(), fmt.Errorf(\"authentication failed\")\n}\n\nfunc (a *authHandler) OnAuthorization(meta metadata.ConnectionAuthenticatedMetadata) (\n\tbool,\n\tmetadata.ConnectionAuthenticatedMetadata,\n\terror,\n) {\n\treturn true, meta, nil\n}\n\nfunc (c *testContext) authServer(t *testing.T, userdb AuthUserStorage, port int) {\n\tsrv, err := webhook.NewServer(\n\t\tconfig.HTTPServerConfiguration{\n\t\t\tListen: fmt.Sprintf(\"127.0.0.1:%d\", port),\n\t\t},\n\t\t&authHandler{\n\t\t\tuserdb: userdb,\n\t\t},\n\t\tlog.NewTestLogger(t),\n\t)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to start authentication webhook server. (%v)\", err)\n\t}\n\tlifecycle := service.NewLifecycle(srv)\n\tgo func() {\n\t\t_ = lifecycle.Run()\n\t}()\n\n\tt.Cleanup(func() {\n\t\tshutdownContext, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n\t\tdefer cancel()\n\t\tlifecycle.Stop(shutdownContext)\n\n\t\tlastError := lifecycle.Wait()\n\t\tif lastError != nil {\n\t\t\tt.Fatalf(\"Failed to stop authentication webhook server. (%v)\", lastError)\n\t\t}\n\t})\n}\n\n// AuthUser is an entry in the in-memory AuthUserStorage. It can be used to modify the user used for testing.\ntype AuthUser interface {\n\tSetPassword(password string)\n\t// GetPassword\n\tGetPassword() *string\n\t// AddKey adds a new private and public key to this user.\n\tAddKey() ssh.Signer\n\t// GetKeys returns a list of signers containing the private and public key for this user.\n\tGetKeys() []ssh.Signer\n\t// GetAuthorizedKeys returns a list of public keys in the OpenSSH Authorized Keys format.\n\tGetAuthorizedKeys() []string\n}\n\n// AuthUserStorage is a storage interface for creating and managing in-memory users used for test\n// authentications.\ntype AuthUserStorage interface {\n\t// AddUser adds a new user to the in-memory database. You can then add credentials for the\n\t// SSH connection to the user. If the user already exists, this function throws a panic.\n\tAddUser(username string) AuthUser\n\t// GetUser returns a user with a specific username. If the user is not found, this function\n\t// throws a panic.\n\tGetUser(username string) (AuthUser, error)\n\t// RemoveUser removes a user from the internal database. If the user is not found, this\n\t// function throws a panic.\n\tRemoveUser(username string)\n}\n\ntype authUserStorage struct {\n\tlock  *sync.Mutex\n\tusers map[string]AuthUser\n}\n\nfunc (a *authUserStorage) AddUser(username string) AuthUser {\n\ta.lock.Lock()\n\tdefer a.lock.Unlock()\n\tif _, ok := a.users[username]; ok {\n\t\tpanic(message.NewMessage(message.MTest, \"User %s already exists in test user database.\", username))\n\t}\n\ta.users[username] = &authUser{\n\t\tlock: &sync.Mutex{},\n\t}\n\treturn a.users[username]\n}\n\nfunc (a *authUserStorage) GetUser(username string) (AuthUser, error) {\n\ta.lock.Lock()\n\tdefer a.lock.Unlock()\n\tif user, ok := a.users[username]; ok {\n\t\treturn user, nil\n\t}\n\treturn nil, message.NewMessage(message.MTest, \"User %s not found in test database.\", username)\n}\n\nfunc (a *authUserStorage) RemoveUser(username string) {\n\ta.lock.Lock()\n\tdefer a.lock.Unlock()\n\tdelete(a.users, username)\n}\n\ntype authUser struct {\n\tlock     *sync.Mutex\n\tpassword *string\n\tkeys     []ssh.Signer\n}\n\nfunc (a *authUser) SetPassword(password string) {\n\ta.password = &password\n}\n\nfunc (a *authUser) GetPassword() *string {\n\treturn a.password\n}\n\nfunc (a *authUser) AddKey() ssh.Signer {\n\ta.lock.Lock()\n\tdefer a.lock.Unlock()\n\treader := rand.Reader\n\tbitSize := 4096\n\tkey, err := rsa.GenerateKey(reader, bitSize)\n\tif err != nil {\n\t\tpanic(message.Wrap(err, message.MTest, \"Failed to generate RSA key.\"))\n\t}\n\tvar pemBlock = &pem.Block{\n\t\tType:  \"RSA PRIVATE KEY\",\n\t\tBytes: x509.MarshalPKCS1PrivateKey(key),\n\t}\n\tvar pemBytes bytes.Buffer\n\tif err := pem.Encode(&pemBytes, pemBlock); err != nil {\n\t\tpanic(message.Wrap(err, message.MTest, \"Failed to marshal private key.\"))\n\t}\n\n\tsshPrivateKey, err := ssh.ParsePrivateKey(pemBytes.Bytes())\n\tif err != nil {\n\t\tpanic(message.Wrap(err, message.MTest, \"Failed to parse SSH private key.\"))\n\t}\n\n\ta.keys = append(a.keys, sshPrivateKey)\n\treturn sshPrivateKey\n}\n\nfunc (a *authUser) GetKeys() []ssh.Signer {\n\ta.lock.Lock()\n\tdefer a.lock.Unlock()\n\tresult := make([]ssh.Signer, len(a.keys))\n\tcopy(result, a.keys)\n\treturn result\n}\n\nfunc (a *authUser) GetAuthorizedKeys() []string {\n\ta.lock.Lock()\n\tdefer a.lock.Unlock()\n\tresult := make([]string, len(a.keys))\n\tfor i, key := range a.keys {\n\t\tresult[i] = fmt.Sprintf(\"ssh-rsa %s\", ssh.MarshalAuthorizedKey(key.PublicKey()))\n\t}\n\treturn result\n}\n\n// NewAuthUserStorage creates a new in-memory user storage for authentication.\nfunc NewAuthUserStorage() AuthUserStorage {\n\treturn &authUserStorage{\n\t\tlock:  &sync.Mutex{},\n\t\tusers: map[string]AuthUser{},\n\t}\n}\n"
        },
        {
          "name": "examples",
          "type": "commit",
          "content": null
        },
        {
          "name": "factory.go",
          "type": "blob",
          "size": 5.0791015625,
          "content": "package containerssh\n\nimport (\n\t\"context\"\n\n\t\"go.containerssh.io/containerssh/config\"\n\t\"go.containerssh.io/containerssh/internal/auditlogintegration\"\n\t\"go.containerssh.io/containerssh/internal/authintegration\"\n\t\"go.containerssh.io/containerssh/internal/backend\"\n\t\"go.containerssh.io/containerssh/internal/geoip\"\n\t\"go.containerssh.io/containerssh/internal/geoip/geoipprovider\"\n\t\"go.containerssh.io/containerssh/internal/health\"\n\t\"go.containerssh.io/containerssh/internal/metrics\"\n\t\"go.containerssh.io/containerssh/internal/metricsintegration\"\n\t\"go.containerssh.io/containerssh/internal/sshserver\"\n\t\"go.containerssh.io/containerssh/log\"\n\t\"go.containerssh.io/containerssh/message\"\n\t\"go.containerssh.io/containerssh/service\"\n)\n\n// New creates a new instance of ContainerSSH.\nfunc New(cfg config.AppConfig, factory log.LoggerFactory) (Service, service.Lifecycle, error) {\n\tif err := cfg.Validate(false); err != nil {\n\t\treturn nil, nil, message.Wrap(err, message.ECoreConfig, \"invalid ContainerSSH configuration\")\n\t}\n\n\tlogger, err := factory.Make(cfg.Log)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tpool := service.NewPool(\n\t\tservice.NewLifecycleFactory(),\n\t\tlogger.WithLabel(\"module\", \"service\"),\n\t)\n\n\thealthService, err := health.New(cfg.Health, logger.WithLabel(\"module\", \"health\"))\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tpool.Add(healthService)\n\n\tgeoIPLookupProvider, err := geoip.New(cfg.GeoIP)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tmetricsCollector := metrics.New(geoIPLookupProvider)\n\n\tif err := createMetricsServer(cfg, logger, metricsCollector, pool); err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tcontainerBackend, err := createBackend(cfg, logger, metricsCollector)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tauthHandler, err := createAuthHandler(cfg, logger, containerBackend, metricsCollector, pool)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tauditLogHandler, err := createAuditLogHandler(cfg, logger, authHandler, geoIPLookupProvider)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tmetricsHandler, err := createMetricsBackend(cfg, metricsCollector, auditLogHandler)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tif err := createSSHServer(cfg, logger, metricsHandler, pool); err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\treturn setUpService(pool, logger, healthService)\n}\n\nfunc setUpService(pool service.Pool, logger log.Logger, healthService health.Service) (\n\tService,\n\tservice.Lifecycle,\n\terror,\n) {\n\tpoolWrapper := &servicePool{\n\t\tpool,\n\t\tlogger,\n\t}\n\tlifecycle := service.NewLifecycle(poolWrapper)\n\tlifecycle.OnRunning(\n\t\tfunc(s service.Service, l service.Lifecycle) {\n\t\t\thealthService.ChangeStatus(true)\n\t\t},\n\t).OnStopping(\n\t\tfunc(s service.Service, l service.Lifecycle, shutdownContext context.Context) {\n\t\t\thealthService.ChangeStatus(false)\n\t\t},\n\t).OnCrashed(\n\t\tfunc(s service.Service, l service.Lifecycle, err error) {\n\t\t\thealthService.ChangeStatus(false)\n\t\t},\n\t)\n\n\treturn poolWrapper, lifecycle, nil\n}\n\ntype servicePool struct {\n\tservice.Pool\n\tlogger log.Logger\n}\n\nfunc (s servicePool) RotateLogs() error {\n\treturn s.logger.Rotate()\n}\n\nfunc createMetricsBackend(\n\tcfg config.AppConfig,\n\tcollector metrics.Collector,\n\thandler sshserver.Handler,\n) (sshserver.Handler, error) {\n\treturn metricsintegration.NewHandler(\n\t\tcfg.Metrics,\n\t\tcollector,\n\t\thandler,\n\t)\n}\n\nfunc createMetricsServer(\n\tcfg config.AppConfig,\n\tlogger log.Logger,\n\tmetricsCollector metrics.Collector,\n\tpool service.Pool,\n) error {\n\tmetricsLogger := logger.WithLabel(\"module\", \"metrics\")\n\tmetricsServer, err := metrics.NewServer(cfg.Metrics, metricsCollector, metricsLogger)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif metricsServer == nil {\n\t\treturn nil\n\t}\n\tpool.Add(metricsServer)\n\treturn nil\n}\n\nfunc createSSHServer(\n\tcfg config.AppConfig,\n\tlogger log.Logger,\n\tauditLogHandler sshserver.Handler,\n\tpool service.Pool,\n) error {\n\tsshLogger := logger.WithLabel(\"module\", \"ssh\")\n\tsshServer, err := sshserver.New(\n\t\tcfg.SSH,\n\t\tauditLogHandler,\n\t\tsshLogger,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tpool.Add(sshServer)\n\treturn nil\n}\n\nfunc createAuditLogHandler(\n\tcfg config.AppConfig,\n\tlogger log.Logger,\n\tauthHandler sshserver.Handler,\n\tgeoIPLookupProvider geoipprovider.LookupProvider,\n) (sshserver.Handler, error) {\n\tauditLogger := logger.WithLabel(\"module\", \"audit\")\n\treturn auditlogintegration.New(\n\t\tcfg.Audit,\n\t\tauthHandler,\n\t\tgeoIPLookupProvider,\n\t\tauditLogger,\n\t)\n}\n\nfunc createAuthHandler(\n\tcfg config.AppConfig,\n\tlogger log.Logger,\n\tbackend sshserver.Handler,\n\tmetricsCollector metrics.Collector,\n\tpool service.Pool,\n) (sshserver.Handler, error) {\n\tauthLogger := logger.WithLabel(\"module\", \"auth\")\n\thandler, services, err := authintegration.New(\n\t\tcfg.Auth,\n\t\tbackend,\n\t\tauthLogger,\n\t\tmetricsCollector,\n\t\tauthintegration.BehaviorNoPassthrough,\n\t)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, svc := range services {\n\t\tpool.Add(svc)\n\t}\n\treturn handler, nil\n}\n\nfunc createBackend(cfg config.AppConfig, logger log.Logger, metricsCollector metrics.Collector) (sshserver.Handler, error) {\n\tbackendLogger := logger.WithLabel(\"module\", \"backend\")\n\tcontainerBackend, err := backend.New(cfg, backendLogger, metricsCollector, sshserver.AuthResponseUnavailable)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn containerBackend, nil\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 5.4169921875,
          "content": "module go.containerssh.io/containerssh\n\ngo 1.21\n\ntoolchain go1.22.1\n\nrequire (\n\tgithub.com/aws/aws-sdk-go v1.51.32\n\tgithub.com/containerssh/gokrb5/v8 v8.4.3-0.20211214150832-4bf8b91123af\n\tgithub.com/creasty/defaults v1.7.0\n\tgithub.com/docker/distribution v2.8.2+incompatible\n\tgithub.com/docker/docker v20.10.19+incompatible\n\tgithub.com/docker/go-connections v0.5.0\n\tgithub.com/fxamacker/cbor v1.5.1\n\tgithub.com/fxamacker/cbor/v2 v2.6.0\n\tgithub.com/go-enry/go-license-detector/v4 v4.1.0\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/gorilla/schema v1.4.1\n\tgithub.com/imdario/mergo v0.3.16\n\tgithub.com/mattn/go-shellwords v1.0.12\n\tgithub.com/mitchellh/golicense v0.2.0\n\tgithub.com/mitchellh/mapstructure v1.5.0\n\tgithub.com/opencontainers/image-spec v1.1.0\n\tgithub.com/oschwald/geoip2-golang v1.9.0\n\tgithub.com/qdm12/reprint v0.0.0-20200326205758-722754a53494\n\tgithub.com/rsc/goversion v1.2.0\n\tgithub.com/stretchr/testify v1.8.4\n\tgolang.org/x/crypto v0.23.0\n\tgolang.org/x/sys v0.20.0\n\tgopkg.in/jcmturner/goidentity.v3 v3.0.0\n\tgopkg.in/yaml.v3 v3.0.1\n\tk8s.io/api v0.29.3\n\tk8s.io/apimachinery v0.29.3\n\tk8s.io/client-go v0.29.2\n\tsigs.k8s.io/kind v0.23.0\n\tsigs.k8s.io/yaml v1.4.0\n)\n\nrequire (\n\tgithub.com/BurntSushi/toml v1.3.2 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.1 // indirect\n\tgithub.com/alessio/shellescape v1.4.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/dgryski/go-minhash v0.0.0-20170608043002-7fe510aff544 // indirect\n\tgithub.com/docker/go-units v0.5.0 // indirect\n\tgithub.com/ekzhu/minhash-lsh v0.0.0-20171225071031-5c06ee8586a1 // indirect\n\tgithub.com/emicklei/go-restful/v3 v3.11.2 // indirect\n\tgithub.com/emirpasic/gods v1.12.0 // indirect\n\tgithub.com/evanphx/json-patch/v5 v5.9.0 // indirect\n\tgithub.com/go-git/gcfg v1.5.0 // indirect\n\tgithub.com/go-git/go-billy/v5 v5.0.0 // indirect\n\tgithub.com/go-git/go-git/v5 v5.1.0 // indirect\n\tgithub.com/go-logr/logr v1.4.1 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.20.2 // indirect\n\tgithub.com/go-openapi/jsonreference v0.20.4 // indirect\n\tgithub.com/go-openapi/swag v0.22.9 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang/protobuf v1.5.4 // indirect\n\tgithub.com/google/gnostic-models v0.6.8 // indirect\n\tgithub.com/google/gofuzz v1.2.0 // indirect\n\tgithub.com/google/safetext v0.0.0-20240104143208-7a7d9b3d812f // indirect\n\tgithub.com/gorilla/websocket v1.5.1 // indirect\n\tgithub.com/hashicorp/go-uuid v1.0.3 // indirect\n\tgithub.com/hhatto/gorst v0.0.0-20181029133204-ca9f730cac5b // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 // indirect\n\tgithub.com/jcmturner/aescts/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/dnsutils/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/gofork v1.7.6 // indirect\n\tgithub.com/jcmturner/goidentity/v6 v6.0.1 // indirect\n\tgithub.com/jcmturner/rpc/v2 v2.0.3 // indirect\n\tgithub.com/jdkato/prose v1.1.0 // indirect\n\tgithub.com/jmespath/go-jmespath v0.4.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mitchellh/go-homedir v1.1.0 // indirect\n\tgithub.com/moby/spdystream v0.2.0 // indirect\n\tgithub.com/moby/term v0.0.0-20201216013528-df9cb8a40635 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/montanaflynn/stats v0.0.0-20180911141734-db72e6cae808 // indirect\n\tgithub.com/morikuni/aec v1.0.0 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/oschwald/maxminddb-golang v1.12.0 // indirect\n\tgithub.com/pborman/uuid v1.2.1 // indirect\n\tgithub.com/pelletier/go-toml v1.9.5 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/sergi/go-diff v1.1.0 // indirect\n\tgithub.com/shogo82148/go-shuffle v0.0.0-20180218125048-27e6095f230d // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/spf13/cobra v1.8.0 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/xanzy/ssh-agent v0.2.1 // indirect\n\tgolang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6 // indirect\n\tgolang.org/x/mod v0.15.0 // indirect\n\tgolang.org/x/net v0.23.0 // indirect\n\tgolang.org/x/oauth2 v0.17.0 // indirect\n\tgolang.org/x/term v0.20.0 // indirect\n\tgolang.org/x/text v0.15.0 // indirect\n\tgolang.org/x/time v0.5.0 // indirect\n\tgolang.org/x/tools v0.18.0 // indirect\n\tgonum.org/v1/gonum v0.7.0 // indirect\n\tgoogle.golang.org/appengine v1.6.8 // indirect\n\tgoogle.golang.org/protobuf v1.33.0 // indirect\n\tgopkg.in/inf.v0 v0.9.1 // indirect\n\tgopkg.in/neurosnap/sentences.v1 v1.0.6 // indirect\n\tgopkg.in/warnings.v0 v0.1.2 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n\tgotest.tools/v3 v3.0.2 // indirect\n\tk8s.io/klog/v2 v2.120.1 // indirect\n\tk8s.io/kube-openapi v0.0.0-20240209001042-7a0d5b415232 // indirect\n\tk8s.io/utils v0.0.0-20240102154912-e7106e64919e // indirect\n\tsigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd // indirect\n\tsigs.k8s.io/structured-merge-diff/v4 v4.4.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 43.5107421875,
          "content": "dmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=\ngithub.com/360EntSecGroup-Skylar/excelize v1.4.0/go.mod h1:R8KYLmGns0vDPe6/HyphW0mzW+MFexlGDafU0ykVEnU=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78 h1:w+iIsaOQNcT7OZ575w+acHgRric5iCyQh+xv+KJ4HB8=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=\ngithub.com/BurntSushi/toml v1.3.2 h1:o7IhLm0Msx3BaB+n3Ag7L8EVlByGnpq14C4YWiu/gL8=\ngithub.com/BurntSushi/toml v1.3.2/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=\ngithub.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=\ngithub.com/DHowett/go-plist v0.0.0-20180609054337-500bd5b9081b/go.mod h1:5paT5ZDrOm8eAJPem2Bd+q3FTi3Gxm/U4tb2tH8YIUQ=\ngithub.com/Microsoft/go-winio v0.6.1 h1:9/kr64B9VUZrLm5YYwbGtUJnMgqWVOdUAXu6Migciow=\ngithub.com/Microsoft/go-winio v0.6.1/go.mod h1:LRdKpFKfdobln8UmuiYcKPot9D2v6svN5+sAH+4kjUM=\ngithub.com/agext/levenshtein v1.2.1/go.mod h1:JEDfjyjHDjOF/1e4FlBE/PkbqA9OfWu2ki2W0IB5558=\ngithub.com/ajstarks/svgo v0.0.0-20180226025133-644b8db467af/go.mod h1:K08gAheRH3/J6wwsYMMT4xOr94bZjxIelGM0+d/wbFw=\ngithub.com/alcortesm/tgz v0.0.0-20161220082320-9c5fe88206d7 h1:uSoVVbwJiQipAclBbw+8quDsfcvFjOpI5iCf4p/cqCs=\ngithub.com/alcortesm/tgz v0.0.0-20161220082320-9c5fe88206d7/go.mod h1:6zEj6s6u/ghQa61ZWa/C2Aw3RkjiTBOix7dkqa1VLIs=\ngithub.com/alessio/shellescape v1.4.2 h1:MHPfaU+ddJ0/bYWpgIeUnQUqKrlJ1S7BfEYPM4uEoM0=\ngithub.com/alessio/shellescape v1.4.2/go.mod h1:PZAiSCk0LJaZkiCSkPv8qIobYglO3FPpyFjDCtHLS30=\ngithub.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239 h1:kFOfPq6dUM1hTo4JG6LR5AXSUEsOjtdm0kw0FtQtMJA=\ngithub.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=\ngithub.com/apparentlymart/go-dump v0.0.0-20180507223929-23540a00eaa3/go.mod h1:oL81AME2rN47vu18xqj1S1jPIPuN7afo62yKTNn3XMM=\ngithub.com/apparentlymart/go-textseg v1.0.0/go.mod h1:z96Txxhf3xSFMPmb5X/1W05FF/Nj9VFpLOpjS5yuumk=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5 h1:0CwZNZbxp69SHPdPJAN/hZIm0C4OItdklCFmMRWYpio=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=\ngithub.com/aws/aws-sdk-go v1.51.32 h1:A6mPui7QP4mwmovyzgtdedbRbNur1Iu0/El7hBWNHms=\ngithub.com/aws/aws-sdk-go v1.51.32/go.mod h1:LF8svs817+Nz+DmiMQKTO3ubZ/6IaTpq3TjupRn3Eqk=\ngithub.com/bsm/go-vlq v0.0.0-20150828105119-ec6e8d4f5f4e/go.mod h1:N+BjUcTjSxc2mtRGSCPsat1kze3CUtvJN3/jTXlp29k=\ngithub.com/containerssh/gokrb5/v8 v8.4.3-0.20211214150832-4bf8b91123af h1:zX9MRWT3+n/EssD/tlGgD0hiS/nWja2Q6VNL92ExRz8=\ngithub.com/containerssh/gokrb5/v8 v8.4.3-0.20211214150832-4bf8b91123af/go.mod h1:NwSygCr+mQtAFt0TTYQvAzx3CLRlsytGaLtb6BqVDfY=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.3/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/creack/pty v1.1.11/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/creasty/defaults v1.7.0 h1:eNdqZvc5B509z18lD8yc212CAqJNvfT1Jq6L8WowdBA=\ngithub.com/creasty/defaults v1.7.0/go.mod h1:iGzKe6pbEHnpMPtfDXZEr0NVxWnPTjb1bbDy08fPzYM=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgryski/go-metro v0.0.0-20180109044635-280f6062b5bc h1:8WFBn63wegobsYAX0YjD+8suexZDga5CctH4CCTx2+8=\ngithub.com/dgryski/go-metro v0.0.0-20180109044635-280f6062b5bc/go.mod h1:c9O8+fpSOX1DM8cPNSkX/qsBWdkD4yd2dpciOWQjpBw=\ngithub.com/dgryski/go-minhash v0.0.0-20170608043002-7fe510aff544 h1:54Y/2GF52MSJ4n63HWvNDFRtztgm6tq2UrOX61sjGKc=\ngithub.com/dgryski/go-minhash v0.0.0-20170608043002-7fe510aff544/go.mod h1:VBi0XHpFy0xiMySf6YpVbRqrupW4RprJ5QTyN+XvGSM=\ngithub.com/dgryski/go-spooky v0.0.0-20170606183049-ed3d087f40e2 h1:lx1ZQgST/imDhmLpYDma1O3Cx9L+4Ie4E8S2RjFPQ30=\ngithub.com/dgryski/go-spooky v0.0.0-20170606183049-ed3d087f40e2/go.mod h1:hgHYKsoIw7S/hlWtP7wD1wZ7SX1jPTtKko5X9jrOgPQ=\ngithub.com/docker/distribution v2.8.2+incompatible h1:T3de5rq0dB1j30rp0sA2rER+m322EBzniBPB6ZIzuh8=\ngithub.com/docker/distribution v2.8.2+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=\ngithub.com/docker/docker v20.10.19+incompatible h1:lzEmjivyNHFHMNAFLXORMBXyGIhw/UP4DvJwvyKYq64=\ngithub.com/docker/docker v20.10.19+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=\ngithub.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=\ngithub.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=\ngithub.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/ekzhu/minhash-lsh v0.0.0-20171225071031-5c06ee8586a1 h1:/7G7q8SDJdrah5jDYqZI8pGFjSqiCzfSEO+NgqKCYX0=\ngithub.com/ekzhu/minhash-lsh v0.0.0-20171225071031-5c06ee8586a1/go.mod h1:yEtCVi+QamvzjEH4U/m6ZGkALIkF2xfQnFp0BcKmIOk=\ngithub.com/emicklei/go-restful/v3 v3.11.2 h1:1onLa9DcsMYO9P+CXaL0dStDqQ2EHHXLiz+BtnqkLAU=\ngithub.com/emicklei/go-restful/v3 v3.11.2/go.mod h1:6n3XBCmQQb25CM2LCACGz8ukIrRry+4bhvbpWn3mrbc=\ngithub.com/emirpasic/gods v1.12.0 h1:QAUIPSaCu4G+POclxeqb3F+WPpdKqFGlw36+yOzGlrg=\ngithub.com/emirpasic/gods v1.12.0/go.mod h1:YfzfFFoVP/catgzJb4IKIqXjX78Ha8FMSDh3ymbK86o=\ngithub.com/evanphx/json-patch v4.12.0+incompatible h1:4onqiflcdA9EOZ4RxV643DvftH5pOlLGNtQ5lPWQu84=\ngithub.com/evanphx/json-patch v4.12.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=\ngithub.com/evanphx/json-patch/v5 v5.9.0 h1:kcBlZQbplgElYIlo/n1hJbls2z/1awpXxpRi0/FOJfg=\ngithub.com/evanphx/json-patch/v5 v5.9.0/go.mod h1:VNkHZ/282BpEyt/tObQO8s5CMPmYYq14uClGH4abBuQ=\ngithub.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=\ngithub.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568/go.mod h1:xEzjJPgXI435gkrCt3MPfRiAkVrwSbHsst4LCFVfpJc=\ngithub.com/fogleman/gg v1.2.1-0.20190220221249-0403632d5b90/go.mod h1:R/bRT+9gY/C5z7JzPU0zXsXHKM4/ayA+zqcVNZzPa1k=\ngithub.com/fxamacker/cbor v1.5.1 h1:XjQWBgdmQyqimslUh5r4tUGmoqzHmBFQOImkWGi2awg=\ngithub.com/fxamacker/cbor v1.5.1/go.mod h1:3aPGItF174ni7dDzd6JZ206H8cmr4GDNBGpPa971zsU=\ngithub.com/fxamacker/cbor/v2 v2.6.0 h1:sU6J2usfADwWlYDAFhZBQ6TnLFBHxgesMrQfQgk1tWA=\ngithub.com/fxamacker/cbor/v2 v2.6.0/go.mod h1:pxXPTn3joSm21Gbwsv0w9OSA2y1HFR9qXEeXQVeNoDQ=\ngithub.com/gliderlabs/ssh v0.2.2 h1:6zsha5zo/TWhRhwqCD3+EarCAgZ2yN28ipRnGPnwkI0=\ngithub.com/gliderlabs/ssh v0.2.2/go.mod h1:U7qILu1NlMHj9FlMhZLlkCdDnU1DBEAqr0aevW3Awn0=\ngithub.com/go-enry/go-license-detector/v4 v4.1.0 h1:dfXyLXq508hdfrT8QcizoQzdj9RoGi8AoQ8AgCDM5KQ=\ngithub.com/go-enry/go-license-detector/v4 v4.1.0/go.mod h1:dby7hp454EA0C/Hav+Op5yvejUAOQLTNtEAPfi1Vlx8=\ngithub.com/go-git/gcfg v1.5.0 h1:Q5ViNfGF8zFgyJWPqYwA7qGFoMTEiBmdlkcfRmpIMa4=\ngithub.com/go-git/gcfg v1.5.0/go.mod h1:5m20vg6GwYabIxaOonVkTdrILxQMpEShl1xiMF4ua+E=\ngithub.com/go-git/go-billy/v5 v5.0.0 h1:7NQHvd9FVid8VL4qVUMm8XifBK+2xCoZ2lSk0agRrHM=\ngithub.com/go-git/go-billy/v5 v5.0.0/go.mod h1:pmpqyWchKfYfrkb/UVH4otLvyi/5gJlGI4Hb3ZqZ3W0=\ngithub.com/go-git/go-git-fixtures/v4 v4.0.1 h1:q+IFMfLx200Q3scvt2hN79JsEzy4AmBTp/pqnefH+Bc=\ngithub.com/go-git/go-git-fixtures/v4 v4.0.1/go.mod h1:m+ICp2rF3jDhFgEZ/8yziagdT1C+ZpZcrJjappBCDSw=\ngithub.com/go-git/go-git/v5 v5.1.0 h1:HxJn9g/E7eYvKW3Fm7Jt4ee8LXfPOm/H1cdDu8vEssk=\ngithub.com/go-git/go-git/v5 v5.1.0/go.mod h1:ZKfuPUoY1ZqIG4QG9BDBh3G4gLM5zvPuSJAozQrZuyM=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=\ngithub.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-openapi/jsonpointer v0.20.2 h1:mQc3nmndL8ZBzStEo3JYF8wzmeWffDH4VbXz58sAx6Q=\ngithub.com/go-openapi/jsonpointer v0.20.2/go.mod h1:bHen+N0u1KEO3YlmqOjTT9Adn1RfD91Ar825/PuiRVs=\ngithub.com/go-openapi/jsonreference v0.20.4 h1:bKlDxQxQJgwpUSgOENiMPzCTBVuc7vTdXSSgNeAhojU=\ngithub.com/go-openapi/jsonreference v0.20.4/go.mod h1:5pZJyJP2MnYCpoeoMAql78cCHauHj0V9Lhc506VOpw4=\ngithub.com/go-openapi/swag v0.22.9 h1:XX2DssF+mQKM2DHsbgZK74y/zj4mo9I99+89xUmuZCE=\ngithub.com/go-openapi/swag v0.22.9/go.mod h1:3/OXnFfnMAwBD099SwYRk7GD3xOrr1iL7d/XNLXVVwE=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 h1:tfuBGBXKqDEevZMzYi5KSi8KkcZtzBcTgAUUtapy0OI=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572/go.mod h1:9Pwr4B2jHnOSGXyyzV8ROjYa2ojvAY6HCGYYfMoC3Ls=\ngithub.com/go-test/deep v1.0.1/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0/go.mod h1:E/TSTwGwJL78qG/PmXZO1EjYhfJinVAhrmmHX6Z8B9k=\ngithub.com/golang/protobuf v1.1.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/gnostic-models v0.6.8 h1:yo/ABAfM5IMRsS1VnXjTBvUb61tFIHozhlYvRgGre9I=\ngithub.com/google/gnostic-models v0.6.8/go.mod h1:5n7qKqH0f5wFt+aWF8CW6pZLLNOfYuF5OpfBSENuI8U=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-github/v18 v18.2.0/go.mod h1:Bf4Ut1RTeH0WuX7Z4Zf7N+qp/YqgcFOxvTLuSO+aY/k=\ngithub.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=\ngithub.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/pprof v0.0.0-20210720184732-4bb14d4b1be1 h1:K6RDEckDVWvDI9JAJYCmNdQXq6neHJOYx3V6jnqNEec=\ngithub.com/google/pprof v0.0.0-20210720184732-4bb14d4b1be1/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/safetext v0.0.0-20240104143208-7a7d9b3d812f h1:o2yGZLlsOj5H5uvtQNEdi6DeA0GbUP3lm0gWW5RvY0s=\ngithub.com/google/safetext v0.0.0-20240104143208-7a7d9b3d812f/go.mod h1:H3K1Iu/utuCfa10JO+GsmKUYSWi7ug57Rk6GaDRHaaQ=\ngithub.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/schema v1.4.1 h1:jUg5hUjCSDZpNGLuXQOgIWGdlgrIdYvgQ0wZtdK1M3E=\ngithub.com/gorilla/schema v1.4.1/go.mod h1:Dg5SSm5PV60mhF2NFaTV1xuYYj8tV8NOPRo4FggUMnM=\ngithub.com/gorilla/securecookie v1.1.1 h1:miw7JPhV+b/lAHSXz4qd/nN9jRiAFV5FwjeKyCS8BvQ=\ngithub.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+HVt/4epWDjd4=\ngithub.com/gorilla/sessions v1.2.1 h1:DHd3rPN5lE3Ts3D8rKkQ8x/0kqfeNmBAaiSi+o7FsgI=\ngithub.com/gorilla/sessions v1.2.1/go.mod h1:dk2InVEVJ0sfLlnXv9EAgkf6ecYs/i80K/zI+bUmuGM=\ngithub.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/gorilla/websocket v1.5.1 h1:gmztn0JnHVt9JZquRuzLw3g4wouNVzKL15iLr/zn/QY=\ngithub.com/gorilla/websocket v1.5.1/go.mod h1:x3kM2JMyaluk02fnUJpQuwD2dCS5NDG2ZHL0uE0tcaY=\ngithub.com/gosuri/uilive v0.0.0-20170323041506-ac356e6e42cd/go.mod h1:qkLSc0A5EXSP6B04TrN4oQoxqFI7A8XvoXSlJi8cwk8=\ngithub.com/hashicorp/errwrap v0.0.0-20180715044906-d6c0cd880357/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-multierror v0.0.0-20180717150148-3d5d8f294aa0/go.mod h1:JMRHfdO9jKNzS/+BTlxCjKNQHg/jZAft8U7LloJvN7I=\ngithub.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=\ngithub.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.3 h1:2gKiV6YVmrJ1i2CKKa9obLvRieoRGviZFL26PcT/Co8=\ngithub.com/hashicorp/go-uuid v1.0.3/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/hcl2 v0.0.0-20181111172936-0467c0c38ca2/go.mod h1:4nBvwJRETsbpa0LQ7FbXXVFmo0Crvhya1Dmpbm7cVow=\ngithub.com/hhatto/gorst v0.0.0-20181029133204-ca9f730cac5b h1:Jdu2tbAxkRouSILp2EbposIb8h4gO+2QuZEn3d9sKAc=\ngithub.com/hhatto/gorst v0.0.0-20181029133204-ca9f730cac5b/go.mod h1:HmaZGXHdSwQh1jnUlBGN2BeEYOHACLVGzYOXCbsLvxY=\ngithub.com/imdario/mergo v0.3.9/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/imdario/mergo v0.3.16 h1:wwQJbIsHYGMUyLSPrEq1CT16AhnhNJQ51+4fdHUnCl4=\ngithub.com/imdario/mergo v0.3.16/go.mod h1:WBLT9ZmE3lPoWsEzCh9LPo3TiwVN+ZKEjmz+hD27ysY=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i6rXxKeerYnT8Nvf0QmHCRC1n8sfWVwXF2Frvo=\ngithub.com/jcmturner/aescts/v2 v2.0.0 h1:9YKLH6ey7H4eDBXW8khjYslgyqG2xZikXP0EQFKrle8=\ngithub.com/jcmturner/aescts/v2 v2.0.0/go.mod h1:AiaICIRyfYg35RUkr8yESTqvSy7csK90qZ5xfvvsoNs=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0 h1:lltnkeZGL0wILNvrNiVCR6Ro5PGU/SeBvVO/8c/iPbo=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0/go.mod h1:b0TnjGOvI/n42bZa+hmXL+kFJZsFT7G4t3HTlQ184QM=\ngithub.com/jcmturner/gofork v1.0.0/go.mod h1:MK8+TM0La+2rjBD4jE12Kj1pCCxK7d2LK/UM3ncEo0o=\ngithub.com/jcmturner/gofork v1.7.6 h1:QH0l3hzAU1tfT3rZCnW5zXl+orbkNMMRGJfdJjHVETg=\ngithub.com/jcmturner/gofork v1.7.6/go.mod h1:1622LH6i/EZqLloHfE7IeZ0uEJwMSUyQ/nDd82IeqRo=\ngithub.com/jcmturner/goidentity/v6 v6.0.1 h1:VKnZd2oEIMorCTsFBnJWbExfNN7yZr3EhJAxwOkZg6o=\ngithub.com/jcmturner/goidentity/v6 v6.0.1/go.mod h1:X1YW3bgtvwAXju7V3LCIMpY0Gbxyjn/mY9zx4tFonSg=\ngithub.com/jcmturner/rpc/v2 v2.0.3 h1:7FXXj8Ti1IaVFpSAziCZWNzbNuZmnvw/i6CqLNdWfZY=\ngithub.com/jcmturner/rpc/v2 v2.0.3/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=\ngithub.com/jdkato/prose v1.1.0 h1:LpvmDGwbKGTgdCH3a8VJL56sr7p/wOFPw/R4lM4PfFg=\ngithub.com/jdkato/prose v1.1.0/go.mod h1:jkF0lkxaX5PFSlk9l4Gh9Y+T57TqUZziWT7uZbW5ADg=\ngithub.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=\ngithub.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=\ngithub.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/jung-kurt/gofpdf v1.0.3-0.20190309125859-24315acbbda5/go.mod h1:7Id9E/uU8ce6rXgefFLlgrJj/GYY22cpxn+r32jIOes=\ngithub.com/kevinburke/ssh_config v0.0.0-20180830205328-81db2a75821e/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=\ngithub.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd h1:Coekwdh0v2wtGp9Gmz1Ze3eVRAWJMLokvN3QjdzCHLY=\ngithub.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v0.0.0-20170820004349-d65d576e9348/go.mod h1:B69LEHPfb2qLo0BaaOLcbitczOKLWTsrBG9LczfCD4k=\ngithub.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=\ngithub.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=\ngithub.com/mattn/go-isatty v0.0.4/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-shellwords v1.0.12 h1:M2zGm7EW6UQJvDeQxo4T51eKPurbeFbe8WtebGE2xrk=\ngithub.com/mattn/go-shellwords v1.0.12/go.mod h1:EZzvwXDESEeg03EKmM+RmDnNOPKG4lLtQsUlTZDWQ8Y=\ngithub.com/mitchellh/go-homedir v1.0.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-spdx v0.1.0/go.mod h1:FFi4Cg1fBuN/JCtPtP8PEDmcBjvO3gijQVl28YjIBVQ=\ngithub.com/mitchellh/go-wordwrap v0.0.0-20150314170334-ad45545899c7/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\ngithub.com/mitchellh/golicense v0.2.0 h1:fq7abQb+8xxBA/xLHP74THaTxbZ0pmBnQNHeAivsTms=\ngithub.com/mitchellh/golicense v0.2.0/go.mod h1:znugvQJs26C5fDVxE/rdhky78Jaj6aBLP2sD7kjP/Xs=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/moby/spdystream v0.2.0 h1:cjW1zVyyoiM0T7b6UoySUFqzXMoqRckQtXwGPiBhOM8=\ngithub.com/moby/spdystream v0.2.0/go.mod h1:f7i0iNDQJ059oMTcWxx8MA/zKFIuD/lY+0GqbN2Wy8c=\ngithub.com/moby/term v0.0.0-20201216013528-df9cb8a40635 h1:rzf0wL0CHVc8CEsgyygG0Mn9CNCCPZqOPaz8RiiHYQk=\ngithub.com/moby/term v0.0.0-20201216013528-df9cb8a40635/go.mod h1:FBS0z0QWA44HXygs7VXDUOGoN/1TV3RuWkLO04am3wc=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826/go.mod h1:TaXosZuwdSHYgviHp1DAtfrULt5eUgsSMsZf+YrPgl8=\ngithub.com/montanaflynn/stats v0.0.0-20151014174947-eeaced052adb/go.mod h1:wL8QJuTMNUDYhXwkmfOly8iTdp5TEcJFWZD2D7SIkUc=\ngithub.com/montanaflynn/stats v0.0.0-20180911141734-db72e6cae808 h1:pmpDGKLw4n82EtrNiLqB+xSz/JQwFOaZuMALYUHwX5s=\ngithub.com/montanaflynn/stats v0.0.0-20180911141734-db72e6cae808/go.mod h1:wL8QJuTMNUDYhXwkmfOly8iTdp5TEcJFWZD2D7SIkUc=\ngithub.com/morikuni/aec v1.0.0 h1:nP9CBfwrvYnBRgY6qfDQkygYDmYwOilePFkwzv4dU8A=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f h1:y5//uYreIhSUg3J1GEMiLbxo1LJaP8RfCpH6pymGZus=\ngithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f/go.mod h1:ZdcZmHo+o7JKHSa8/e818NopupXU1YMK5fe1lsApnBw=\ngithub.com/neurosnap/sentences v1.0.6 h1:iBVUivNtlwGkYsJblWV8GGVFmXzZzak907Ci8aA0VTE=\ngithub.com/neurosnap/sentences v1.0.6/go.mod h1:pg1IapvYpWCJJm/Etxeh0+gtMf1rI1STY9S7eUCPbDc=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/onsi/ginkgo/v2 v2.13.0 h1:0jY9lJquiL8fcf3M4LAXN5aMlS/b2BV86HFFPCPMgE4=\ngithub.com/onsi/ginkgo/v2 v2.13.0/go.mod h1:TE309ZR8s5FsKKpuB1YAQYBzCaAfUgatB/xlT/ETL/o=\ngithub.com/onsi/gomega v1.29.0 h1:KIA/t2t5UBzoirT4H9tsML45GEbo3ouUnBHsCfD2tVg=\ngithub.com/onsi/gomega v1.29.0/go.mod h1:9sxs+SwGrKI0+PWe4Fxa9tFQQBG5xSsSbMXOI8PPpoQ=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=\ngithub.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=\ngithub.com/oschwald/geoip2-golang v1.9.0 h1:uvD3O6fXAXs+usU+UGExshpdP13GAqp4GBrzN7IgKZc=\ngithub.com/oschwald/geoip2-golang v1.9.0/go.mod h1:BHK6TvDyATVQhKNbQBdrj9eAvuwOMi2zSFXizL3K81Y=\ngithub.com/oschwald/maxminddb-golang v1.12.0 h1:9FnTOD0YOhP7DGxGsq4glzpGy5+w7pq50AS6wALUMYs=\ngithub.com/oschwald/maxminddb-golang v1.12.0/go.mod h1:q0Nob5lTCqyQ8WT6FYgS1L7PXKVVbgiymefNwIjPzgY=\ngithub.com/pborman/uuid v1.2.1 h1:+ZZIw58t/ozdjRaXh/3awHfmWRbzYxJoAdNJxe/3pvw=\ngithub.com/pborman/uuid v1.2.1/go.mod h1:X/NO0urCmaxf9VXbdlT7C2Yzkj2IKimNn4k+gtPdI/k=\ngithub.com/pelletier/go-buffruneio v0.2.0/go.mod h1:JkE26KsDizTr40EUHkXVtNPvgGtbSNq5BcowyYOWdKo=\ngithub.com/pelletier/go-toml v1.9.5 h1:4yBQzkHv+7BHq2PQUZF3Mx0IYxG7LsP222s7Agd3ve8=\ngithub.com/pelletier/go-toml v1.9.5/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/qdm12/reprint v0.0.0-20200326205758-722754a53494 h1:wSmWgpuccqS2IOfmYrbRiUgv+g37W5suLLLxwwniTSc=\ngithub.com/qdm12/reprint v0.0.0-20200326205758-722754a53494/go.mod h1:yipyliwI08eQ6XwDm1fEwKPdF/xdbkiHtrU+1Hg+vc4=\ngithub.com/remyoudompheng/bigfft v0.0.0-20190728182440-6a916e37a237/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=\ngithub.com/rogpeppe/go-internal v1.11.0 h1:cWPaGQEPrBb5/AsnsZesgZZ9yb1OQ+GOISoDNXVBh4M=\ngithub.com/rogpeppe/go-internal v1.11.0/go.mod h1:ddIwULY96R17DhadqLgMfk9H9tvdUzkipdSkR5nkCZA=\ngithub.com/rsc/goversion v1.2.0 h1:zVF4y5ciA/rw779S62bEAq4Yif1cBc/UwRkXJ2xZyT4=\ngithub.com/rsc/goversion v1.2.0/go.mod h1:Tf/O0TQyfRvp7NelXAyfXYRKUO+LX3KNgXc8ALRUv4k=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sebdah/goldie v0.0.0-20180424091453-8784dd1ab561/go.mod h1:lvjGftC8oe7XPtyrOidaMi0rp5B9+XY/ZRUynGnuaxQ=\ngithub.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=\ngithub.com/sergi/go-diff v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\ngithub.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=\ngithub.com/shogo82148/go-shuffle v0.0.0-20170808115208-59829097ff3b/go.mod h1:2htx6lmL0NGLHlO8ZCf+lQBGBHIbEujyywxJArf+2Yc=\ngithub.com/shogo82148/go-shuffle v0.0.0-20180218125048-27e6095f230d h1:rUbV6LJa5RXK3jT/4jnJUz3UkrXzW6cqB+n9Fkbv9jY=\ngithub.com/shogo82148/go-shuffle v0.0.0-20180218125048-27e6095f230d/go.mod h1:2htx6lmL0NGLHlO8ZCf+lQBGBHIbEujyywxJArf+2Yc=\ngithub.com/shurcooL/sanitized_anchor_name v0.0.0-20170918181015-86672fcb3f95/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/spf13/cobra v1.8.0 h1:7aJaZx1B85qltLMc546zn58BxxfZdR/W22ej9CFoEf0=\ngithub.com/spf13/cobra v1.8.0/go.mod h1:WXLWApfZ71AjXPya3WOlMsY9yMs7YeiHhFVlvLyhcho=\ngithub.com/spf13/pflag v1.0.2/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/src-d/gcfg v1.4.0/go.mod h1:p/UMsR43ujA89BJY9duynAwIpvqEujIH/jFlfL7jWoI=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.6.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/vmihailenco/msgpack v3.3.3+incompatible/go.mod h1:fy3FlTQTDXWkZ7Bh6AcGMlsjHatGryHQYUTf1ShIgkk=\ngithub.com/x448/float16 v0.8.4 h1:qLwI1I70+NjRFUR3zs1JPUCgaCXSh3SW62uAKT1mSBM=\ngithub.com/x448/float16 v0.8.4/go.mod h1:14CWIYCyZA/cWjXOioeEpHeN/83MdbZDRQHoFcYsOfg=\ngithub.com/xanzy/ssh-agent v0.2.0/go.mod h1:0NyE30eGUDliuLEHJgYte/zncp2zdTStcOnWhgSqHD8=\ngithub.com/xanzy/ssh-agent v0.2.1 h1:TCbipTQL2JiiCprBWx9frJ2eJlCYT00NmctrHxVAr70=\ngithub.com/xanzy/ssh-agent v0.2.1/go.mod h1:mLlQY/MoOhWBj+gOGMQkOeiEvkx+8pJSI+0Bx9h2kr4=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/zclconf/go-cty v0.0.0-20180815031001-58bb2bc0302a/go.mod h1:xnAOWiHeOqg2nWS62VtQ7pbOu17FtxJNW8RLEih+O3s=\ngolang.org/x/crypto v0.0.0-20180816225734-aabede6cba87/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20180820150726-614d502a4dac/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190219172222-a4c6cb3142f2/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200302210943-78000ba7a073/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201112155050-0c6587e931a9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.23.0 h1:dIJU/v2J8Mdglj/8rJ6UUOM3Zc9zLZxVZwwxMooUSAI=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/exp v0.0.0-20180321215751-8460e604b9de/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20180807140117-3d87b88a115f/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190125153040-c74c464bbbf2/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190312203227-4b39c73a6495/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=\ngolang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6 h1:QE6XYQK6naiK1EPAe1g/ILLxN5RBoH5xkJk3CqlMI/Y=\ngolang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=\ngolang.org/x/image v0.0.0-20180708004352-c73c2afc3b81/go.mod h1:ux5Hcp/YLpHSI86hEcLt0YII63i6oz57MZXIpbrjZUs=\ngolang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=\ngolang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=\ngolang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.1.1-0.20191107180719-034126e5016b/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.15.0 h1:SernR4v+D55NyBH2QiEQrlBAnj1ECL6AGrA5+dPaMY8=\ngolang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20180811021610-c39426892332/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200301022130-244492dfa37a/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.23.0 h1:7EYJ93RZ9vYSZAIb2x3lnuvqO5zneoD6IvWjuhfxjTs=\ngolang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.17.0 h1:6m3ZPmLEFdVxKKWnKq4VqZ60gutO35zm+zrAHVmHyDQ=\ngolang.org/x/oauth2 v0.17.0/go.mod h1:OzPDGQiuQMguemayvdylqddI7qcD9lnSDb+1FiwQ5HA=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.6.0 h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=\ngolang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180816055513-1c9583448a9c/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180824143301-4910a1d54f87/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180903190138-2b024373dcd9/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190221075227-b4e8571b14e0/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200302150141-5c8b2ff67527/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200831180312-196b9ba8737a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.20.0 h1:Od9JTbYCk261bKm4M/mw7AklTlFYIa0bIp9BgSm1S8Y=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.20.0 h1:VnkxpohqXaOBYJtBmEppKUG6mXpi+4O6purfc2+sMhw=\ngolang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\ngolang.org/x/text v0.15.0 h1:h1V/4gjBv8v9cjcR6+AR5+/cIYK5N/WAgiv4xlsEtAk=\ngolang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=\ngolang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180525024113-a5b4c53f6e8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190206041539-40960b6deb8e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200207183749-b753a1ba74fa/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.18.0 h1:k8NLag8AGHnn+PHbl7g43CtqZAwG60vZkLqgyZgIHgQ=\ngolang.org/x/tools v0.18.0/go.mod h1:GL7B4CwcLLeo59yx/9UWWuNOW1n3VZ4f5axWfML7Lcg=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngonum.org/v1/gonum v0.0.0-20180816165407-929014505bf4/go.mod h1:Y+Yx5eoAFn32cQvJDxZx5Dpnq+c3wtXuadVZAcxbbBo=\ngonum.org/v1/gonum v0.6.0/go.mod h1:9mxDZsDKxgMAuccQkewq682L+0eCu4dCN2yonUJTCLU=\ngonum.org/v1/gonum v0.7.0 h1:Hdks0L0hgznZLG9nzXb8vZ0rRvqNvAcgAp84y7Mwkgw=\ngonum.org/v1/gonum v0.7.0/go.mod h1:L02bwd0sqlsvRv41G7wGWFCsVNZFv/k1xzGIxeANHGM=\ngonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0/go.mod h1:wa6Ws7BG/ESfp6dHfk7C6KdzKA7wR7u/rKwOGE66zvw=\ngonum.org/v1/netlib v0.0.0-20191031114514-eccb95939662 h1:yBPy8lLj+GituDSGQjvXBqT6yTch2BdT9Z/FbX19+to=\ngonum.org/v1/netlib v0.0.0-20191031114514-eccb95939662/go.mod h1:1LGLsuRLSwj1ge7tgC9ees7gfh1phRP5tuyDqlpChGE=\ngonum.org/v1/plot v0.0.0-20190515093506-e2840ee46a6b/go.mod h1:Wt8AAjI+ypCyYX3nZBvf6cAIx93T+c/OS2HFAYskSZc=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.6.8 h1:IhEN5q69dyKagZPYMSdIjS2HqprW324FRQZJcGqPAsM=\ngoogle.golang.org/appengine v1.6.8/go.mod h1:1jJ3jBArFh5pcgW8gCtRJnepW8FzD1V44FJffLiz/Ds=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=\ngopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=\ngopkg.in/jcmturner/goidentity.v3 v3.0.0 h1:1duIyWiTaYvVx3YX2CYtpJbUFd7/UuPYCfgXtQ3VTbI=\ngopkg.in/jcmturner/goidentity.v3 v3.0.0/go.mod h1:oG2kH0IvSYNIu80dVAyu/yoefjq1mNfM5bm88whjWx4=\ngopkg.in/neurosnap/sentences.v1 v1.0.6 h1:v7ElyP020iEZQONyLld3fHILHWOPs+ntzuQTNPkul8E=\ngopkg.in/neurosnap/sentences.v1 v1.0.6/go.mod h1:YlK+SN+fLQZj+kY3r8DkGDhDr91+S3JmTb5LSxFRQo0=\ngopkg.in/russross/blackfriday.v2 v2.0.0/go.mod h1:6sSBNz/GtOm/pJTuh5UmBK2ZHfmnxGbl2NZg1UliSOI=\ngopkg.in/src-d/go-billy-siva.v4 v4.2.2/go.mod h1:4wKeCzOCSsdyFeM5+58M6ObU6FM+lZT12p7zm7A+9n0=\ngopkg.in/src-d/go-billy.v4 v4.3.0/go.mod h1:tm33zBoOwxjYHZIE+OV8bxTWFMJLrconzFMd38aARFk=\ngopkg.in/src-d/go-git-fixtures.v3 v3.5.0/go.mod h1:dLBcvytrw/TYZsNTWCnkNF2DSIlzWYqTe3rJR56Ac7g=\ngopkg.in/src-d/go-git.v4 v4.7.0/go.mod h1:CzbUWqMn4pvmvndg3gnh5iZFmSsbhyhUWdI0IQ60AQo=\ngopkg.in/src-d/go-license-detector.v2 v2.0.0-20180510072912-da552ecf050b/go.mod h1:zfdY69eZLzMJeDFDZAVS0ZEZ98XX+SwLifFOuuUZrC0=\ngopkg.in/src-d/go-siva.v1 v1.3.0/go.mod h1:tk1jnIXawd/PTlRNWdr5V5lC0PttNJmu1fv7wt7IZlw=\ngopkg.in/warnings.v0 v0.1.2 h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=\ngopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.0.2 h1:kG1BFyqVHuQoVQiR1bWGnfz/fmHvvuiSPIV7rvl360E=\ngotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=\nhowett.net/plist v0.0.0-20180609054337-500bd5b9081b/go.mod h1:jInWmjR7JRkkon4jlLXDZGVEeY/wo3kOOJEWYhNE+9Y=\nk8s.io/api v0.29.3 h1:2ORfZ7+bGC3YJqGpV0KSDDEVf8hdGQ6A03/50vj8pmw=\nk8s.io/api v0.29.3/go.mod h1:y2yg2NTyHUUkIoTC+phinTnEa3KFM6RZ3szxt014a80=\nk8s.io/apimachinery v0.29.3 h1:2tbx+5L7RNvqJjn7RIuIKu9XTsIZ9Z5wX2G22XAa5EU=\nk8s.io/apimachinery v0.29.3/go.mod h1:hx/S4V2PNW4OMg3WizRrHutyB5la0iCUbZym+W0EQIU=\nk8s.io/client-go v0.29.2 h1:FEg85el1TeZp+/vYJM7hkDlSTFZ+c5nnK44DJ4FyoRg=\nk8s.io/client-go v0.29.2/go.mod h1:knlvFZE58VpqbQpJNbCbctTVXcd35mMyAAwBdpt4jrA=\nk8s.io/klog/v2 v2.120.1 h1:QXU6cPEOIslTGvZaXvFWiP9VKyeet3sawzTOvdXb4Vw=\nk8s.io/klog/v2 v2.120.1/go.mod h1:3Jpz1GvMt720eyJH1ckRHK1EDfpxISzJ7I9OYgaDtPE=\nk8s.io/kube-openapi v0.0.0-20240209001042-7a0d5b415232 h1:MMq4iF9pHuAz/9dLnHwBQKEoeigXClzs3MFh/seyqtA=\nk8s.io/kube-openapi v0.0.0-20240209001042-7a0d5b415232/go.mod h1:Pa1PvrP7ACSkuX6I7KYomY6cmMA0Tx86waBhDUgoKPw=\nk8s.io/utils v0.0.0-20240102154912-e7106e64919e h1:eQ/4ljkx21sObifjzXwlPKpdGLrCfRziVtos3ofG/sQ=\nk8s.io/utils v0.0.0-20240102154912-e7106e64919e/go.mod h1:OLgZIPagt7ERELqWJFomSt595RzquPNLL48iOWgYOg0=\nmodernc.org/cc v1.0.0/go.mod h1:1Sk4//wdnYJiUIxnW8ddKpaOJCF37yAdqYnkxUpaYxw=\nmodernc.org/golex v1.0.0/go.mod h1:b/QX9oBD/LhixY6NDh+IdGv17hgB+51fET1i2kPSmvk=\nmodernc.org/mathutil v1.0.0/go.mod h1:wU0vUrJsVWBZ4P6e7xtFJEhFSNsfRLJ8H458uRjg03k=\nmodernc.org/strutil v1.1.0/go.mod h1:lstksw84oURvj9y3tn8lGvRxyRC1S2+g5uuIzNfIOBs=\nmodernc.org/xc v1.0.0/go.mod h1:mRNCo0bvLjGhHO9WsyuKVU4q0ceiDDDoEeWDJHrNx8I=\nrsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=\nsigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd h1:EDPBXCAspyGV4jQlpZSudPeMmr1bNJefnuqLsRAsHZo=\nsigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd/go.mod h1:B8JuhiUyNFVKdsE8h686QcCxMaH6HrOAZj4vswFpcB0=\nsigs.k8s.io/kind v0.23.0 h1:8fyDGWbWTeCcCTwA04v4Nfr45KKxbSPH1WO9K+jVrBg=\nsigs.k8s.io/kind v0.23.0/go.mod h1:ZQ1iZuJLh3T+O8fzhdi3VWcFTzsdXtNv2ppsHc8JQ7s=\nsigs.k8s.io/structured-merge-diff/v4 v4.4.1 h1:150L+0vs/8DA78h1u02ooW1/fFq/Lwr+sGiqlzvrtq4=\nsigs.k8s.io/structured-merge-diff/v4 v4.4.1/go.mod h1:N8hJocpFajUSSeSJ9bOZ77VzejKZaXsTtZo4/u7Io08=\nsigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=\nsigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=\n"
        },
        {
          "name": "golicense.json",
          "type": "blob",
          "size": 0.4501953125,
          "content": "{\n  \"allow\": [\n    \"MIT-0\",\n    \"MIT\",\n    \"Apache-2.0\",\n    \"BSD-3-Clause\",\n    \"BSD-2-Clause\",\n    \"BSD-2-Clause-NetBSD\",\n    \"0BSD\",\n    \"MPL-2.0\",\n    \"ISC\"\n  ],\n  \"override\": {\n    \"github.com/opencontainers/go-digest\": \"Apache-2.0\",\n    \"sigs.k8s.io/yaml\": \"MIT\",\n    \"k8s.io/klog\": \"Apache-2.0\",\n    \"sigs.k8s.io/structured-merge-diff\": \"Apache-2.0\",\n    \"github.com/gogo/protobuf\": \"BSD-3-Clause\",\n    \"github.com/docker/spdystream\": \"Apache-2.0\"\n  }\n}\n"
        },
        {
          "name": "http",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 8.87109375,
          "content": "package containerssh\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/signal\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"go.containerssh.io/containerssh/config\"\n\tinternalConfig \"go.containerssh.io/containerssh/internal/config\"\n\t\"go.containerssh.io/containerssh/internal/health\"\n\t\"go.containerssh.io/containerssh/log\"\n\t\"go.containerssh.io/containerssh/message\"\n\t\"go.containerssh.io/containerssh/service\"\n)\n\n// Main is a helper function to start a standard ContainerSSH instance. It should be used as the outer-most function\n// and should never be used as an embedding technique.\nfunc Main() {\n\tcfg := config.AppConfig{}\n\tcfg.Default()\n\n\tloggerFactory := log.NewLoggerFactory()\n\tlogger, err := loggerFactory.Make(\n\t\tcfg.Log,\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tlogger = logger.WithLabel(\"module\", \"core\")\n\n\tconfigFile, actionDumpConfig, actionLicenses, actionHealthCheck := getArguments()\n\n\tif configFile == \"\" {\n\t\tconfigFile = \"config.yaml\"\n\t}\n\trealConfigFile, err := filepath.Abs(configFile)\n\tif err != nil {\n\t\tlogger.Critical(\n\t\t\tmessage.Wrap(\n\t\t\t\terr,\n\t\t\t\tmessage.ECoreConfig,\n\t\t\t\t\"Failed to fetch absolute path for configuration file %s\",\n\t\t\t\tconfigFile,\n\t\t\t))\n\t\tos.Exit(1)\n\t}\n\tconfigFile = realConfigFile\n\tif err = readConfigFile(configFile, loggerFactory, &cfg); err != nil {\n\t\tlogger.Critical(\n\t\t\tmessage.Wrap(\n\t\t\t\terr,\n\t\t\t\tmessage.ECoreConfig,\n\t\t\t\t\"Invalid configuration in file %s\",\n\t\t\t\tconfigFile,\n\t\t\t))\n\t\tos.Exit(1)\n\t}\n\n\tconfiguredLogger, err := loggerFactory.Make(\n\t\tcfg.Log,\n\t)\n\tif err != nil {\n\t\tlogger.Critical(err)\n\t\tos.Exit(1)\n\t}\n\tconfiguredLogger.Debug(message.NewMessage(message.MCoreConfigFile, \"Using configuration file %s...\", configFile))\n\n\tswitch {\n\tcase actionDumpConfig:\n\t\trunDumpConfig(cfg, configuredLogger)\n\tcase actionLicenses:\n\t\trunActionLicenses(configuredLogger)\n\tcase actionHealthCheck:\n\t\trunHealthCheck(cfg, configuredLogger)\n\tdefault:\n\t\trunContainerSSH(loggerFactory, configuredLogger, cfg, configFile)\n\t}\n}\n\nfunc runHealthCheck(cfg config.AppConfig, logger log.Logger) {\n\tif err := healthCheck(cfg, logger); err != nil {\n\t\tlogger.Critical(err)\n\t\tos.Exit(1)\n\t}\n\tlogger.Info(message.NewMessage(message.MCoreHealthCheckSuccessful, \"Health check successful.\"))\n\tos.Exit(0)\n}\n\nfunc runActionLicenses(logger log.Logger) {\n\tif err := printLicenses(os.Stdout); err != nil {\n\t\tlogger.Critical(err)\n\t\tos.Exit(1)\n\t}\n\tos.Exit(0)\n}\n\nfunc runDumpConfig(cfg config.AppConfig, logger log.Logger) {\n\tif err := dumpConfig(os.Stdout, logger, &cfg); err != nil {\n\t\tlogger.Critical(err)\n\t\tos.Exit(1)\n\t}\n\tos.Exit(0)\n}\n\nfunc runContainerSSH(\n\tloggerFactory log.LoggerFactory,\n\tlogger log.Logger,\n\tcfg config.AppConfig,\n\tconfigFile string,\n) {\n\tif len(cfg.SSH.HostKeys) == 0 {\n\t\tlogger.Warning(\n\t\t\tmessage.NewMessage(\n\t\t\t\tmessage.ECoreNoHostKeys,\n\t\t\t\t\"No host keys found in configuration, generating temporary host keys and updating configuration...\",\n\t\t\t),\n\t\t)\n\t\tif err := generateHostKeys(configFile, &cfg, logger); err != nil {\n\t\t\tlogger.Critical(\n\t\t\t\tmessage.Wrap(\n\t\t\t\t\terr,\n\t\t\t\t\tmessage.ECoreHostKeyGenerationFailed,\n\t\t\t\t\t\"failed to generate host keys\",\n\t\t\t\t))\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\n\tif err := startServices(cfg, loggerFactory); err != nil {\n\t\tlogger.Critical(err)\n\t\tos.Exit(1)\n\t}\n\tos.Exit(0)\n}\n\nfunc getArguments() (string, bool, bool, bool) {\n\tconfigFile := \"\"\n\tactionDumpConfig := false\n\tactionLicenses := false\n\thealthCheck := false\n\tflag.StringVar(\n\t\t&configFile,\n\t\t\"config\",\n\t\t\"\",\n\t\t\"Configuration file to load (has to end in .yaml, .yml, or .json)\",\n\t)\n\tflag.BoolVar(\n\t\t&actionDumpConfig,\n\t\t\"dump-config\",\n\t\tfalse,\n\t\t\"Dump configuration and exit\",\n\t)\n\tflag.BoolVar(\n\t\t&actionLicenses,\n\t\t\"licenses\",\n\t\tfalse,\n\t\t\"Print license information\",\n\t)\n\tflag.BoolVar(\n\t\t&healthCheck,\n\t\t\"healthcheck\",\n\t\tfalse,\n\t\t\"Run health check\",\n\t)\n\tflag.Parse()\n\treturn configFile, actionDumpConfig, actionLicenses, healthCheck\n}\n\nfunc startServices(cfg config.AppConfig, loggerFactory log.LoggerFactory) error {\n\tpool, lifecycle, err := New(cfg, loggerFactory)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn startPool(pool, lifecycle)\n}\n\nfunc startPool(pool Service, lifecycle service.Lifecycle) error {\n\tstarting := make(chan struct{})\n\tlifecycle.OnStarting(\n\t\tfunc(s service.Service, l service.Lifecycle) {\n\t\t\tstarting <- struct{}{}\n\t\t},\n\t)\n\tgo func() {\n\t\t_ = lifecycle.Run()\n\t}()\n\n\t<-starting\n\n\texitSignalList := []os.Signal{os.Interrupt, os.Kill, syscall.SIGINT, syscall.SIGTERM}\n\trotateSignalList := []os.Signal{syscall.SIGHUP}\n\texitSignals := make(chan os.Signal, 1)\n\trotateSignals := make(chan os.Signal, 1)\n\tsignal.Notify(exitSignals, exitSignalList...)\n\tsignal.Notify(rotateSignals, rotateSignalList...)\n\tgo func() {\n\t\tif _, ok := <-exitSignals; ok {\n\t\t\t// ok means the channel wasn't closed\n\t\t\tshutdownContext, cancelFunc := context.WithTimeout(\n\t\t\t\tcontext.Background(),\n\t\t\t\t20*time.Second,\n\t\t\t)\n\t\t\tdefer cancelFunc()\n\t\t\tlifecycle.Stop(\n\t\t\t\tshutdownContext,\n\t\t\t)\n\t\t}\n\t}()\n\tgo func() {\n\t\tfor {\n\t\t\tif _, ok := <-rotateSignals; ok {\n\t\t\t\terr := pool.RotateLogs()\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n\terr := lifecycle.Wait()\n\tsignal.Ignore(rotateSignalList...)\n\tsignal.Ignore(exitSignalList...)\n\tclose(exitSignals)\n\treturn err\n}\n\nfunc generateHostKeys(configFile string, cfg *config.AppConfig, logger log.Logger) error {\n\tif err := cfg.SSH.GenerateHostKey(); err != nil {\n\t\treturn err\n\t}\n\n\ttmpFile := fmt.Sprintf(\"%s~\", configFile)\n\tfh, err := os.Create(tmpFile)\n\tif err != nil {\n\t\tlogger.Warning(\n\t\t\tmessage.Wrap(\n\t\t\t\terr,\n\t\t\t\tmessage.ECannotWriteConfigFile,\n\t\t\t\t\"Cannot create temporary configuration file at %s with updated host keys.\",\n\t\t\t\ttmpFile,\n\t\t\t).Label(\"tmpFile\", configFile))\n\t\treturn nil\n\t}\n\tformat := getConfigFileFormat(configFile)\n\tsaver, err := internalConfig.NewWriterSaver(fh, logger, format)\n\tif err != nil {\n\t\t_ = fh.Close()\n\t\tlogger.Warning(\n\t\t\tmessage.Wrap(\n\t\t\t\terr,\n\t\t\t\tmessage.ECannotWriteConfigFile,\n\t\t\t\t\"Cannot initialize temporary configuration file at %s with updated host keys.\",\n\t\t\t\ttmpFile,\n\t\t\t).Label(\"tmpFile\", configFile))\n\t\treturn nil\n\t}\n\tif err := saver.Save(cfg); err != nil {\n\t\t_ = fh.Close()\n\t\tlogger.Warning(\n\t\t\tmessage.Wrap(\n\t\t\t\terr,\n\t\t\t\tmessage.ECannotWriteConfigFile,\n\t\t\t\t\"Cannot save temporary configuration file at %s with updated host keys.\",\n\t\t\t\ttmpFile,\n\t\t\t).Label(\"tmpFile\", configFile))\n\t\treturn nil\n\t}\n\tif err := fh.Close(); err != nil {\n\t\tlogger.Warning(message.Wrap(err,\n\t\t\tmessage.ECannotWriteConfigFile, \"Cannot close temporary configuration file at %s with updated host keys.\", tmpFile).Label(\"tmpFile\", configFile))\n\t\treturn nil\n\t}\n\n\tif err := os.Rename(tmpFile, configFile); err != nil {\n\t\tlogger.Warning(message.Wrap(err,\n\t\t\tmessage.ECannotWriteConfigFile, \"Failed to rename temporary file %s to %s with updated host keys.\", tmpFile, configFile).Label(\"file\", configFile).Label(\"tmpFile\", tmpFile))\n\t\treturn fmt.Errorf(\"failed to rename temporary file %s to %s (%w)\", tmpFile, configFile, err)\n\t}\n\n\treturn nil\n}\n\nfunc healthCheck(cfg config.AppConfig, logger log.Logger) error {\n\thealthClient, err := health.NewClient(cfg.Health, logger)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif healthClient == nil {\n\t\treturn nil\n\t}\n\tif !healthClient.Run() {\n\t\treturn message.NewMessage(message.ECoreHealthCheckFailed, \"Health check failed\")\n\t}\n\treturn nil\n}\n\nfunc printLicenses(writer io.Writer) error {\n\tvar buffer bytes.Buffer\n\n\tbuffer.WriteString(\"# The ContainerSSH license\\n\\n\")\n\tlicenseData, err := os.ReadFile(\"LICENSE.md\")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to read LICENSE.md (%w)\", err)\n\t}\n\tbuffer.Write(licenseData)\n\tbuffer.WriteString(\"\\n\")\n\tnoticeData, err := os.ReadFile(\"NOTICE.md\")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to read NOTICE.md (%w)\", err)\n\t}\n\tbuffer.Write(noticeData)\n\tbuffer.WriteString(\"\\n\")\n\tif _, err := writer.Write(buffer.Bytes()); err != nil {\n\t\treturn fmt.Errorf(\"failed to write licenes information (%w)\", err)\n\t}\n\treturn nil\n}\n\nfunc dumpConfig(writer io.Writer, logger log.Logger, cfg *config.AppConfig) error {\n\tsaver, err := internalConfig.NewWriterSaver(writer, logger, internalConfig.FormatYAML)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := saver.Save(cfg); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc readConfigFile(\n\tconfigFile string,\n\tloggerFactory log.LoggerFactory,\n\tcfg *config.AppConfig,\n) error {\n\tconfigLogger, err := loggerFactory.Make(\n\t\tcfg.Log,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// File inclusion is desired here, no gosec issue.\n\tconfigFH, err := os.Open(configFile) //nolint:gosec\n\tif err != nil {\n\t\treturn err\n\t}\n\tformat := getConfigFileFormat(configFile)\n\tconfigLoader, err := internalConfig.NewReaderLoader(configFH, configLogger, format)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := configLoader.Load(context.Background(), cfg); err != nil {\n\t\treturn fmt.Errorf(\"failed to read configuration file %s (%w)\", configFile, err)\n\t}\n\treturn nil\n}\n\nfunc getConfigFileFormat(configFile string) internalConfig.Format {\n\tvar format internalConfig.Format\n\tif strings.HasSuffix(configFile, \".json\") {\n\t\tformat = internalConfig.FormatJSON\n\t} else {\n\t\tformat = internalConfig.FormatYAML\n\t}\n\treturn format\n}\n"
        },
        {
          "name": "message",
          "type": "tree",
          "content": null
        },
        {
          "name": "metadata",
          "type": "tree",
          "content": null
        },
        {
          "name": "notice_gen.go",
          "type": "blob",
          "size": 0.0634765625,
          "content": "package containerssh\n\n//go:generate go run ./cmd/license-report/\n"
        },
        {
          "name": "service.go",
          "type": "blob",
          "size": 0.2734375,
          "content": "package containerssh\n\nimport (\n    \"go.containerssh.io/containerssh/service\"\n)\n\n// Service is the core ContainerSSH service.\ntype Service interface {\n\tservice.Service\n\n\t// RotateLogs closes the currently open logs and reopens them to allow for log rotation.\n\tRotateLogs() error\n}\n"
        },
        {
          "name": "service",
          "type": "tree",
          "content": null
        },
        {
          "name": "swagger_gen.go",
          "type": "blob",
          "size": 0.09765625,
          "content": "package containerssh\n\n//go:generate go run cmd/swagger/main.go containerssh-authconfig-openapi.json\n"
        }
      ]
    }
  ]
}