{
  "metadata": {
    "timestamp": 1736566725974,
    "page": 279,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tdewolff/minify",
      "stars": 3775,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0732421875,
          "content": "benchmarks/sample_* linguist-generated\ntests/*/corpus/* linguist-generated\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6826171875,
          "content": "release.sh\ndist\nbenchmarks/*\n!benchmarks/*.go\n!benchmarks/sample_*\ntests/*/fuzz-fuzz.zip\ntests/*/crashers\ntests/*/suppressions\ntests/*/corpus/*\n!tests/*/corpus/*.*\nparse/tests/*/fuzz-fuzz.zip\nparse/tests/*/crashers\nparse/tests/*/suppressions\nparse/tests/*/corpus/*\n!parse/tests/*/corpus/*.*\nbindings/js/build\nbindings/js/prebuilds\nbindings/js/minify.h\nbindings/js/minify.a\nbindings/js/node_modules\nbindings/js/example/package-lock.json\nbindings/js/example/node_modules\nbindings/js/example/test.min.html\nbindings/py/go.mod\nbindings/py/go.sum\nbindings/py/**/*.h\nbindings/py/**/*.so\nbindings/py/**/*.egg-info\nbindings/py/example/example.min.html\nbindings/py/dist\nbindings/py/build\nbindings/py/**/*.pyc\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.1904296875,
          "content": "linters:\n  enable:\n  - depguard\n  - dogsled\n  - gofmt\n  - goimports\n  - golint\n  - gosec\n  - govet\n  - megacheck\n  - misspell\n  - nakedret\n  - prealloc\n  - unconvert\n  - unparam\n  - wastedassign\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.453125,
          "content": "# Use this image to build the executable\nFROM golang:1.18-alpine AS build\n\nWORKDIR /go/src/github.com/tdewolff/minify\nCOPY . /go/src/github.com/tdewolff/minify/\n\nRUN apk add --no-cache git ca-certificates make bash\nRUN /usr/bin/env bash -c make install\n\n\n# Final image containing the executable from the previous step\nFROM alpine:3\n\nCOPY --from=build /go/bin/minify /usr/bin/minify\nCOPY \"containerfiles/container-entrypoint.sh\" \"/init.sh\"\n\nENTRYPOINT [\"/init.sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "Copyright (c) 2025 Taco de Wolff\n\n Permission is hereby granted, free of charge, to any person\n obtaining a copy of this software and associated documentation\n files (the \"Software\"), to deal in the Software without\n restriction, including without limitation the rights to use,\n copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the\n Software is furnished to do so, subject to the following\n conditions:\n\n The above copyright notice and this permission notice shall be\n included in all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.494140625,
          "content": "SHELL=/usr/bin/env bash\nNAME=minify\nCMD=./cmd/minify\nTARGETS=linux_amd64 linux_arm64 darwin_amd64 darwin_arm64 freebsd_amd64 netbsd_amd64 openbsd_amd64 windows_amd64\nVERSION=`git describe --tags`\nFLAGS=-ldflags \"-s -w -X 'main.Version=${VERSION}'\" -trimpath\nENVS=GO111MODULES=on CGO_ENABLED=0\n\nall: install\n\ninstall:\n\techo \"Installing ${VERSION}\"\n\t${ENVS} go install ${FLAGS} ./cmd/minify\n\t. cmd/minify/bash_completion\n\nrelease:\n\tTAG=$(shell git describe --tags --exact-match 2> /dev/null);\n\tif [ \"${.SHELLSTATUS}\" -eq 0 ]; then \\\n\t\techo \"Releasing ${VERSION}\"; \\\n\telse \\\n\t\techo \"ERROR: commit is not tagged with a version\"; \\\n\t\techo \"\"; \\\n\t\texit 1; \\\n\tfi\n\trm -rf dist\n\tmkdir -p dist\n\tfor t in ${TARGETS}; do \\\n\t\techo Building $$t...; \\\n\t\tmkdir dist/$$t; \\\n\t\tos=$$(echo $$t | cut -f1 -d_); \\\n\t\tarch=$$(echo $$t | cut -f2 -d_); \\\n\t\t${ENVS} GOOS=$$os GOARCH=$$arch go build ${FLAGS} -o dist/$$t/${NAME} ${CMD}; \\\n\t\t\\\n\t\tcp LICENSE dist/$$t/.; \\\n\t\tcp cmd/minify/README.md dist/$$t/.; \\\n\t\tif [ \"$$os\" == \"windows\" ]; then \\\n\t\t\tmv dist/$$t/${NAME} dist/$$t/${NAME}.exe; \\\n\t\t\tzip -jq dist/${NAME}_$$t.zip dist/$$t/*; \\\n\t\t\tcd dist; \\\n\t\t\tsha256sum ${NAME}_$$t.zip >> checksums.txt; \\\n\t\t\tcd ..; \\\n\t\telse \\\n\t\t\tcp cmd/minify/bash_completion dist/$$t/.; \\\n\t\t\tcd dist/$$t; \\\n\t\t\ttar -cf - * | gzip -9 > ../${NAME}_$$t.tar.gz; \\\n\t\t\tcd ..; \\\n\t\t\tsha256sum ${NAME}_$$t.tar.gz >> checksums.txt; \\\n\t\t\tcd ..; \\\n\t\tfi; \\\n\t\trm -rf dist/$$t; \\\n\tdone\n\nclean:\n\techo \"Cleaning dist/\"\n\trm -rf dist\n\n.PHONY: install release clean\n.SILENT: install release clean\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 32.8017578125,
          "content": "# Minify <a name=\"minify\"></a> [![API reference](https://img.shields.io/badge/godoc-reference-5272B4)](https://pkg.go.dev/github.com/tdewolff/minify/v2?tab=doc) [![Go Report Card](https://goreportcard.com/badge/github.com/tdewolff/minify)](https://goreportcard.com/report/github.com/tdewolff/minify) [![codecov](https://codecov.io/gh/tdewolff/minify/branch/master/graph/badge.svg?token=Cr7r2EKPj2)](https://codecov.io/gh/tdewolff/minify)\n\n**[Online demo](https://go.tacodewolff.nl/minify)** if you need to minify files *now*.\n\n**[Binaries](https://github.com/tdewolff/minify/releases) of CLI for various platforms.** See [CLI](https://github.com/tdewolff/minify/tree/master/cmd/minify) for more installation instructions.\n\n**[Windows binary from scoop](https://scoop.sh/#/apps?q=minify)** install with `scoop install main/minify`\n\n**[Python bindings](https://pypi.org/project/tdewolff-minify/)** install with `pip install tdewolff-minify`\n\n**[JavaScript bindings](https://www.npmjs.com/package/@tdewolff/minify)** install with `npm i @tdewolff/minify`\n\n**[.NET bindings](https://github.com/JKamsker/NMinify)** install with `Install-Package NMinify` or `dotnet add package NMinify`, thanks to Jonas Kamsker for the port\n\n---\n\n*Did you know that the shortest valid piece of HTML5 is `<!doctype html><title>x</title>`? See for yourself at the [W3C Validator](http://validator.w3.org/)!*\n\nMinify is a minifier package written in [Go][1]. It provides HTML5, CSS3, JS, JSON, SVG and XML minifiers and an interface to implement any other minifier. Minification is the process of removing bytes from a file (such as whitespace) without changing its output and therefore shrinking its size and speeding up transmission over the internet and possibly parsing. The implemented minifiers are designed for high performance (see https://github.com/privatenumber/minification-benchmarks where this library is (one of) the fastest JS minifiers).\n\nThe core functionality associates mimetypes with minification functions, allowing embedded resources (like CSS or JS within HTML files) to be minified as well. Users can add new implementations that are triggered based on a mimetype (or pattern), or redirect to an external command (like ClosureCompiler, UglifyCSS, ...).\n\n### Sponsors\nI'm actively looking for support in the form of donations or sponsorships to keep developing this library and highly appreciate any gesture. Please see the Sponsors button in GitHub for ways to contribute, or contact me directly.\n\n[![SiteGround](https://www.siteground.com/img/downloads/siteground-logo-black-transparent-vector.svg)](https://www.siteground.com/)\n\n#### Table of Contents\n\n- [Minify](#minify)\n\t- [Prologue](#prologue)\n\t- [Installation](#installation)\n\t- [API stability](#api-stability)\n\t- [Testing](#testing)\n\t- [Performance](#performance)\n\t- [HTML](#html)\n\t\t- [Whitespace removal](#whitespace-removal)\n\t- [CSS](#css)\n\t- [JS](#js)\n\t\t- [Comparison with other tools](#comparison-with-other-tools)\n            - [Compression ratio (lower is better)](#compression-ratio-lower-is-better)\n            - [Time (lower is better)](#time-lower-is-better)\n\t- [JSON](#json)\n\t- [SVG](#svg)\n\t- [XML](#xml)\n\t- [Usage](#usage)\n\t\t- [New](#new)\n\t\t- [From reader](#from-reader)\n\t\t- [From bytes](#from-bytes)\n\t\t- [From string](#from-string)\n\t\t- [To reader](#to-reader)\n\t\t- [To writer](#to-writer)\n\t\t- [Middleware](#middleware)\n\t\t- [Custom minifier](#custom-minifier)\n\t\t- [Mediatypes](#mediatypes)\n\t- [Examples](#examples)\n\t\t- [Common minifiers](#common-minifiers)\n\t\t- [External minifiers](#external-minifiers)\n            - [Closure Compiler](#closure-compiler)\n            - [UglifyJS](#uglifyjs)\n            - [esbuild](#esbuild)\n\t\t- [Custom minifier](#custom-minifier-example)\n\t\t- [ResponseWriter](#responsewriter)\n\t\t- [Templates](#templates)\n    - [FAQ](#faq)\n\t- [License](#license)\n\n### Roadmap\n\n- [ ] Use ASM/SSE to further speed-up core parts of the parsers/minifiers\n- [x] Improve JS minifiers by shortening variables and proper semicolon omission\n- [ ] Speed-up SVG minifier, it is very slow\n- [x] Proper parser error reporting and line number + column information\n- [ ] Generation of source maps (uncertain, might slow down parsers too much if it cannot run separately nicely)\n- [ ] Create a cmd to pack webfiles (much like webpack), ie. merging CSS and JS files, inlining small external files, minification and gzipping. This would work on HTML files.\n\n## Prologue\nMinifiers or bindings to minifiers exist in almost all programming languages. Some implementations are merely using several regular expressions to trim whitespace and comments (even though regex for parsing HTML/XML is ill-advised, for a good read see [Regular Expressions: Now You Have Two Problems](http://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/)). Some implementations are much more profound, such as the [YUI Compressor](http://yui.github.io/yuicompressor/) and [Google Closure Compiler](https://github.com/google/closure-compiler) for JS. As most existing implementations either use JavaScript, use regexes, and don't focus on performance, they are pretty slow.\n\nThis minifier proves to be that fast and extensive minifier that can handle HTML and any other filetype it may contain (CSS, JS, ...). It is usually orders of magnitude faster than existing minifiers.\n\n## Installation\nMake sure you have [Git](https://git-scm.com/) and [Go](https://golang.org/dl/) (1.18 or higher) installed, run\n```\nmkdir Project\ncd Project\ngo mod init\ngo get -u github.com/tdewolff/minify/v2\n```\n\nThen add the following imports to be able to use the various minifiers\n``` go\nimport (\n\t\"github.com/tdewolff/minify/v2\"\n\t\"github.com/tdewolff/minify/v2/css\"\n\t\"github.com/tdewolff/minify/v2/html\"\n\t\"github.com/tdewolff/minify/v2/js\"\n\t\"github.com/tdewolff/minify/v2/json\"\n\t\"github.com/tdewolff/minify/v2/svg\"\n\t\"github.com/tdewolff/minify/v2/xml\"\n)\n```\n\nYou can optionally run `go mod tidy` to clean up the `go.mod` and `go.sum` files.\n\nSee [CLI tool](https://github.com/tdewolff/minify/tree/master/cmd/minify) for installation instructions of the binary.\n\n### Docker\n\nIf you want to use Docker, please see https://hub.docker.com/r/tdewolff/minify.\n\n```bash\n$ docker run -it tdewolff/minify --help\n```\n\n## API stability\nThere is no guarantee for absolute stability, but I take issues and bugs seriously and don't take API changes lightly. The library will be maintained in a compatible way unless vital bugs prevent me from doing so. There has been one API change after v1 which added options support and I took the opportunity to push through some more API clean up as well. There are no plans whatsoever for future API changes.\n\n## Testing\nFor all subpackages and the imported `parse` package, test coverage of 100% is pursued. Besides full coverage, the minifiers are [fuzz tested](https://github.com/tdewolff/fuzz) using [github.com/dvyukov/go-fuzz](http://www.github.com/dvyukov/go-fuzz), see [the wiki](https://github.com/tdewolff/minify/wiki) for the most important bugs found by fuzz testing. These tests ensure that everything works as intended and that the code does not crash (whatever the input). If you still encounter a bug, please file a [bug report](https://github.com/tdewolff/minify/issues)!\n\n## Performance\nThe benchmarks directory contains a number of standardized samples used to compare performance between changes. To give an indication of the speed of this library, I've ran the tests on my Thinkpad T460 (i5-6300U quad-core 2.4GHz running Arch Linux) using Go 1.15.\n\n```\nname                              time/op\nCSS/sample_bootstrap.css-4          2.70ms ± 0%\nCSS/sample_gumby.css-4              3.57ms ± 0%\nCSS/sample_fontawesome.css-4         767µs ± 0%\nCSS/sample_normalize.css-4          85.5µs ± 0%\nHTML/sample_amazon.html-4           15.2ms ± 0%\nHTML/sample_bbc.html-4              3.90ms ± 0%\nHTML/sample_blogpost.html-4          420µs ± 0%\nHTML/sample_es6.html-4              15.6ms ± 0%\nHTML/sample_stackoverflow.html-4    3.73ms ± 0%\nHTML/sample_wikipedia.html-4        6.60ms ± 0%\nJS/sample_ace.js-4                  28.7ms ± 0%\nJS/sample_dot.js-4                   357µs ± 0%\nJS/sample_jquery.js-4               10.0ms ± 0%\nJS/sample_jqueryui.js-4             20.4ms ± 0%\nJS/sample_moment.js-4               3.47ms ± 0%\nJSON/sample_large.json-4            3.25ms ± 0%\nJSON/sample_testsuite.json-4        1.74ms ± 0%\nJSON/sample_twitter.json-4          24.2µs ± 0%\nSVG/sample_arctic.svg-4             34.7ms ± 0%\nSVG/sample_gopher.svg-4              307µs ± 0%\nSVG/sample_usa.svg-4                57.4ms ± 0%\nSVG/sample_car.svg-4                18.0ms ± 0%\nSVG/sample_tiger.svg-4              5.61ms ± 0%\nXML/sample_books.xml-4              54.7µs ± 0%\nXML/sample_catalog.xml-4            33.0µs ± 0%\nXML/sample_omg.xml-4                7.17ms ± 0%\n\nname                              speed\nCSS/sample_bootstrap.css-4        50.7MB/s ± 0%\nCSS/sample_gumby.css-4            52.1MB/s ± 0%\nCSS/sample_fontawesome.css-4      61.2MB/s ± 0%\nCSS/sample_normalize.css-4        70.8MB/s ± 0%\nHTML/sample_amazon.html-4         31.1MB/s ± 0%\nHTML/sample_bbc.html-4            29.5MB/s ± 0%\nHTML/sample_blogpost.html-4       49.8MB/s ± 0%\nHTML/sample_es6.html-4            65.6MB/s ± 0%\nHTML/sample_stackoverflow.html-4  55.0MB/s ± 0%\nHTML/sample_wikipedia.html-4      67.5MB/s ± 0%\nJS/sample_ace.js-4                22.4MB/s ± 0%\nJS/sample_dot.js-4                14.5MB/s ± 0%\nJS/sample_jquery.js-4             24.8MB/s ± 0%\nJS/sample_jqueryui.js-4           23.0MB/s ± 0%\nJS/sample_moment.js-4             28.6MB/s ± 0%\nJSON/sample_large.json-4           234MB/s ± 0%\nJSON/sample_testsuite.json-4       394MB/s ± 0%\nJSON/sample_twitter.json-4        63.0MB/s ± 0%\nSVG/sample_arctic.svg-4           42.4MB/s ± 0%\nSVG/sample_gopher.svg-4           19.0MB/s ± 0%\nSVG/sample_usa.svg-4              17.8MB/s ± 0%\nSVG/sample_car.svg-4              29.3MB/s ± 0%\nSVG/sample_tiger.svg-4            12.2MB/s ± 0%\nXML/sample_books.xml-4            81.0MB/s ± 0%\nXML/sample_catalog.xml-4          58.6MB/s ± 0%\nXML/sample_omg.xml-4               159MB/s ± 0%\n```\n\n## HTML\n\nHTML (with JS and CSS) minification typically shaves off about 10%.\n\nThe HTML5 minifier uses these minifications:\n\n- strip unnecessary whitespace and otherwise collapse it to one space (or newline if it originally contained a newline)\n- strip superfluous quotes, or uses single/double quotes whichever requires fewer escapes\n- strip default attribute values and attribute boolean values\n- strip some empty attributes\n- strip unrequired tags (`html`, `head`, `body`, ...)\n- strip unrequired end tags (`tr`, `td`, `li`, ... and often `p`)\n- strip default protocols (`http:`, `https:` and `javascript:`)\n- strip all comments (including conditional comments, old IE versions are not supported anymore by Microsoft)\n- shorten `doctype` and `meta` charset\n- lowercase tags, attributes and some values to enhance gzip compression\n\nOptions:\n\n- `KeepSpecialComments` preserve all special comments, including Server Side Includes such as `<!--#include file=\"header.html\" -->` and IE conditional comments such as `<!--[if IE 6]><![endif]-->` and `<![if IE 6]><![endif]>`, see https://msdn.microsoft.com/en-us/library/ms537512(v=vs.85).aspx#syntax\n- `KeepDefaultAttrVals` preserve default attribute values such as `<script type=\"application/javascript\">`\n- `KeepDocumentTags` preserve `html`, `head` and `body` tags\n- `KeepEndTags` preserve all end tags\n- `KeepQuotes` preserve quotes around attribute values\n- `KeepWhitespace` preserve whitespace between inline tags but still collapse multiple whitespace characters into one\n- `TemplateDelims` preserve context within and surrounding the given opening and closing delimiters\n\nAfter recent benchmarking and profiling it became really fast and minifies pages in the 10ms range, making it viable for on-the-fly minification.\n\nHowever, be careful when doing on-the-fly minification. Minification typically trims off 10% and does this at worst around about 20MB/s. This means users have to download slower than 2MB/s to make on-the-fly minification worthwhile. This may or may not apply in your situation. Rather use caching!\n\n### Whitespace removal\nThe whitespace removal mechanism collapses all sequences of whitespace (spaces, newlines, tabs) to a single space. If the sequence contained a newline or carriage return it will collapse into a newline character instead. It trims all text parts (in between tags) depending on whether it was preceded by a space from a previous piece of text and whether it is followed up by a block element or an inline element. In the former case we can omit spaces while for inline elements whitespace has significance.\n\nMake sure your HTML doesn't depend on whitespace between `block` elements that have been changed to `inline` or `inline-block` elements using CSS. Your layout *should not* depend on those whitespaces as the minifier will remove them. An example is a menu consisting of multiple `<li>` that have `display:inline-block` applied and have whitespace in between them. It is bad practise to rely on whitespace for element positioning anyways!\n\n## CSS\n\nMinification typically shaves off about 10%-15%. This CSS minifier will _not_ do structural changes to your stylesheets. Although this could result in smaller files, the complexity is quite high and the risk of breaking website is high too.\n\nThe CSS minifier will only use safe minifications:\n\n- remove comments and unnecessary whitespace (but keep `/*! ... */` which usually contains the license)\n- remove trailing semicolons\n- optimize `margin`, `padding` and `border-width` number of sides\n- shorten numbers by removing unnecessary `+` and zeros and rewriting with/without exponent\n- remove dimension and percentage for zero values\n- remove quotes for URLs\n- remove quotes for font families and make lowercase\n- rewrite hex colors to/from color names, or to three digit hex\n- rewrite `rgb(`, `rgba(`, `hsl(` and `hsla(` colors to hex or name\n- use four digit hex for alpha values (`transparent` &#8594; `#0000`)\n- replace `normal` and `bold` by numbers for `font-weight` and `font`\n- replace `none` &#8594; `0` for `border`, `background` and `outline`\n- lowercase all identifiers except classes, IDs and URLs to enhance gzip compression\n- shorten MS alpha function\n- rewrite data URIs with base64 or ASCII whichever is shorter\n- calls minifier for data URI mediatypes, thus you can compress embedded SVG files if you have that minifier attached\n- shorten aggregate declarations such as `background` and `font`\n\nIt does purposely not use the following techniques:\n\n- (partially) merge rulesets\n- (partially) split rulesets\n- collapse multiple declarations when main declaration is defined within a ruleset (don't put `font-weight` within an already existing `font`, too complex)\n- remove overwritten properties in ruleset (this not always overwrites it, for example with `!important`)\n- rewrite properties into one ruleset if possible (like `margin-top`, `margin-right`, `margin-bottom` and `margin-left` &#8594; `margin`)\n- put nested ID selector at the front (`body > div#elem p` &#8594; `#elem p`)\n- rewrite attribute selectors for IDs and classes (`div[id=a]` &#8594; `div#a`)\n- put space after pseudo-selectors (IE6 is old, move on!)\n\nThere are a couple of comparison tables online, such as [CSS Minifier Comparison](http://www.codenothing.com/benchmarks/css-compressor-3.0/full.html), [CSS minifiers comparison](http://www.phpied.com/css-minifiers-comparison/) and [CleanCSS tests](http://goalsmashers.github.io/css-minification-benchmark/). Comparing speed between each, this minifier will usually be between 10x-300x faster than existing implementations, and even rank among the top for minification ratios. It falls short with the purposely not implemented and often unsafe techniques.\n\nOptions:\n\n- `KeepCSS2` prohibits using CSS3 syntax (such as exponents in numbers, or `rgba(` &#8594; `rgb(`), might be incomplete\n- `Precision` number of significant digits to preserve for numbers, `0` means no trimming\n\n## JS\n\nThe JS minifier typically shaves off about 35% -- 65% of filesize depending on the file, which is a compression close to many other minifiers. Common speeds of PHP and JS implementations are about 100-300kB/s (see [Uglify2](http://lisperator.net/uglifyjs/), [Adventures in PHP web asset minimization](https://www.happyassassin.net/2014/12/29/adventures-in-php-web-asset-minimization/)). This implementation is orders of magnitude faster at around ~25MB/s.\n\nThe following features are implemented:\n\n- remove superfluous whitespace\n- remove superfluous semicolons\n- shorten `true`, `false`, and `undefined` to `!0`, `!1` and `void 0`\n- rename variables and functions to shorter names (not in global scope)\n- move `var` declarations to the top of the global/function scope (if more than one)\n- collapse if/else statements to expressions\n- minify conditional expressions to simpler ones\n- merge sequential expression statements to one, including into `return` and `throw`\n- remove superfluous grouping in expressions\n- shorten or remove string escapes\n- convert object key or index expression from string to identifier or decimal\n- merge concatenated strings\n- rewrite numbers (binary, octal, decimal, hexadecimal) to shorter representations\n\nOptions:\n\n- `KeepVarNames` keeps variable names as they are and omits shortening variable names\n- `Precision` number of significant digits to preserve for numbers, `0` means no trimming\n- `Version` ECMAScript version to use for output, `0` is the latest\n\n### Comparison with other tools\n\nPerformance is measured with `time [command]` ran 10 times and selecting the fastest one, on a Thinkpad T460 (i5-6300U quad-core 2.4GHz running Arch Linux) using Go 1.15.\n\n- [minify](https://github.com/tdewolff/minify): `minify -o script.min.js script.js`\n- [esbuild](https://github.com/evanw/esbuild): `esbuild --minify --outfile=script.min.js script.js`\n- [terser](https://github.com/terser/terser): `terser script.js --compress --mangle -o script.min.js`\n- [UglifyJS](https://github.com/Skalman/UglifyJS-online): `uglifyjs --compress --mangle -o script.min.js script.js`\n- [Closure Compiler](https://github.com/google/closure-compiler): `closure-compiler -O SIMPLE --js script.js --js_output_file script.min.js --language_in ECMASCRIPT_NEXT -W QUIET --jscomp_off=checkVars` optimization level `SIMPLE` instead of `ADVANCED` to make similar assumptions as do the other tools (do not rename/assume anything of global level variables)\n\n#### Compression ratio (lower is better)\nAll tools give very similar results, although UglifyJS compresses slightly better.\n\n| Tool | ace.js | dot.js | jquery.js | jqueryui.js | moment.js |\n| --- | --- | --- | --- | --- | --- |\n| **minify** | 53.7% | 64.8% | 34.2% | 51.3% | 34.8% |\n| esbuild | 53.8% | 66.3% | 34.4% | 53.1% | 34.8% |\n| terser | 53.2% | 65.2% | 34.2% | 51.8% | 34.7% |\n| UglifyJS | 53.1% | 64.7% | 33.8% | 50.7% | 34.2% |\n| Closure Compiler | 53.4% | 64.0% | 35.7% | 53.6% | 34.3% |\n\n#### Time (lower is better)\nMost tools are extremely slow, with `minify` and `esbuild` being orders of magnitudes faster.\n\n| Tool | ace.js | dot.js | jquery.js | jqueryui.js | moment.js |\n| --- | --- | --- | --- | --- | --- |\n| **minify** | 49ms | 5ms | 22ms | 35ms | 13ms |\n| esbuild | 64ms | 9ms | 31ms | 51ms | 17ms |\n| terser | 2900s | 180ms | 1400ms | 2200ms | 730ms |\n| UglifyJS | 3900ms | 210ms | 2000ms | 3100ms | 910ms |\n| Closure Compiler | 6100ms | 2500ms | 4400ms | 5300ms | 3500ms |\n\n## JSON\n\nMinification typically shaves off about 15% of filesize for common indented JSON such as generated by [JSON Generator](http://www.json-generator.com/).\n\nThe JSON minifier only removes whitespace, which is the only thing that can be left out, and minifies numbers (`1000` => `1e3`).\n\nOptions:\n\n- `Precision` number of significant digits to preserve for numbers, `0` means no trimming\n- `KeepNumbers` do not minify numbers if set to `true`, by default numbers will be minified\n\n## SVG\n\nThe SVG minifier uses these minifications:\n\n- trim and collapse whitespace between all tags\n- strip comments, empty `doctype`, XML prelude, `metadata`\n- strip SVG version\n- strip CDATA sections wherever possible\n- collapse tags with no content to a void tag\n- minify style tag and attributes with the CSS minifier\n- minify colors\n- shorten lengths and numbers and remove default `px` unit\n- shorten `path` data\n- use relative or absolute positions in path data whichever is shorter\n\nTODO:\n- convert attributes to style attribute whenever shorter\n- merge path data? (same style and no intersection -- the latter is difficult)\n\nOptions:\n\n- `Precision` number of significant digits to preserve for numbers, `0` means no trimming\n\n## XML\n\nThe XML minifier uses these minifications:\n\n- strip unnecessary whitespace and otherwise collapse it to one space (or newline if it originally contained a newline)\n- strip comments\n- collapse tags with no content to a void tag\n- strip CDATA sections wherever possible\n\nOptions:\n\n- `KeepWhitespace` preserve whitespace between inline tags but still collapse multiple whitespace characters into one\n\n## Usage\nAny input stream is being buffered by the minification functions. This is how the underlying buffer package inherently works to ensure high performance. The output stream however is not buffered. It is wise to preallocate a buffer as big as the input to which the output is written, or otherwise use `bufio` to buffer to a streaming writer.\n\n### New\nRetrieve a minifier struct which holds a map of mediatype &#8594; minifier functions.\n``` go\nm := minify.New()\n```\n\nThe following loads all provided minifiers.\n``` go\nm := minify.New()\nm.AddFunc(\"text/css\", css.Minify)\nm.AddFunc(\"text/html\", html.Minify)\nm.AddFunc(\"image/svg+xml\", svg.Minify)\nm.AddFuncRegexp(regexp.MustCompile(\"^(application|text)/(x-)?(java|ecma)script$\"), js.Minify)\nm.AddFuncRegexp(regexp.MustCompile(\"[/+]json$\"), json.Minify)\nm.AddFuncRegexp(regexp.MustCompile(\"[/+]xml$\"), xml.Minify)\n```\n\nYou can set options to several minifiers.\n``` go\nm.Add(\"text/html\", &html.Minifier{\n\tKeepDefaultAttrVals: true,\n\tKeepWhitespace: true,\n})\n```\n\n### From reader\nMinify from an `io.Reader` to an `io.Writer` for a specific mediatype.\n``` go\nif err := m.Minify(mediatype, w, r); err != nil {\n\tpanic(err)\n}\n```\n\n### From bytes\nMinify from and to a `[]byte` for a specific mediatype.\n``` go\nb, err = m.Bytes(mediatype, b)\nif err != nil {\n\tpanic(err)\n}\n```\n\n### From string\nMinify from and to a `string` for a specific mediatype.\n``` go\ns, err = m.String(mediatype, s)\nif err != nil {\n\tpanic(err)\n}\n```\n\n### To reader\nGet a minifying reader for a specific mediatype.\n``` go\nmr := m.Reader(mediatype, r)\nif _, err := mr.Read(b); err != nil {\n\tpanic(err)\n}\n```\n\n### To writer\nGet a minifying writer for a specific mediatype. Must be explicitly closed because it uses an `io.Pipe` underneath.\n``` go\nmw := m.Writer(mediatype, w)\nif mw.Write([]byte(\"input\")); err != nil {\n\tpanic(err)\n}\nif err := mw.Close(); err != nil {\n\tpanic(err)\n}\n```\n\n### Middleware\nMinify resources on the fly using middleware. It passes a wrapped response writer to the handler that removes the Content-Length header. The minifier is chosen based on the Content-Type header or, if the header is empty, by the request URI file extension. This is on-the-fly processing, you should preferably cache the results though!\n``` go\nfs := http.FileServer(http.Dir(\"www/\"))\nhttp.Handle(\"/\", m.Middleware(fs))\n```\n\n### Custom minifier\nAdd a minifier for a specific mimetype.\n``` go\ntype CustomMinifier struct {\n\tKeepLineBreaks bool\n}\n\nfunc (c *CustomMinifier) Minify(m *minify.M, w io.Writer, r io.Reader, params map[string]string) error {\n\t// ...\n\treturn nil\n}\n\nm.Add(mimetype, &CustomMinifier{KeepLineBreaks: true})\n// or\nm.AddRegexp(regexp.MustCompile(\"/x-custom$\"), &CustomMinifier{KeepLineBreaks: true})\n```\n\nAdd a minify function for a specific mimetype.\n``` go\nm.AddFunc(mimetype, func(m *minify.M, w io.Writer, r io.Reader, params map[string]string) error {\n\t// ...\n\treturn nil\n})\nm.AddFuncRegexp(regexp.MustCompile(\"/x-custom$\"), func(m *minify.M, w io.Writer, r io.Reader, params map[string]string) error {\n\t// ...\n\treturn nil\n})\n```\n\nAdd a command `cmd` with arguments `args` for a specific mimetype.\n``` go\nm.AddCmd(mimetype, exec.Command(cmd, args...))\nm.AddCmdRegexp(regexp.MustCompile(\"/x-custom$\"), exec.Command(cmd, args...))\n```\n\n### Mediatypes\nUsing the `params map[string]string` argument one can pass parameters to the minifier such as seen in mediatypes (`type/subtype; key1=val2; key2=val2`). Examples are the encoding or charset of the data. Calling `Minify` will split the mimetype and parameters for the minifiers for you, but `MinifyMimetype` can be used if you already have them split up.\n\nMinifiers can also be added using a regular expression. For example a minifier with `image/.*` will match any image mime.\n\n## Examples\n### Common minifiers\nBasic example that minifies from stdin to stdout and loads the default HTML, CSS and JS minifiers. Optionally, one can enable `java -jar build/compiler.jar` to run for JS (for example the [ClosureCompiler](https://code.google.com/p/closure-compiler/)). Note that reading the file into a buffer first and writing to a pre-allocated buffer would be faster (but would disable streaming).\n``` go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\n\t\"github.com/tdewolff/minify/v2\"\n\t\"github.com/tdewolff/minify/v2/css\"\n\t\"github.com/tdewolff/minify/v2/html\"\n\t\"github.com/tdewolff/minify/v2/js\"\n\t\"github.com/tdewolff/minify/v2/json\"\n\t\"github.com/tdewolff/minify/v2/svg\"\n\t\"github.com/tdewolff/minify/v2/xml\"\n)\n\nfunc main() {\n\tm := minify.New()\n\tm.AddFunc(\"text/css\", css.Minify)\n\tm.AddFunc(\"text/html\", html.Minify)\n\tm.AddFunc(\"image/svg+xml\", svg.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile(\"^(application|text)/(x-)?(java|ecma)script$\"), js.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile(\"[/+]json$\"), json.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile(\"[/+]xml$\"), xml.Minify)\n\n\tif err := m.Minify(\"text/html\", os.Stdout, os.Stdin); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n### External minifiers\nBelow are some examples of using common external minifiers.\n\n#### Closure Compiler\nSee [Closure Compiler Application](https://developers.google.com/closure/compiler/docs/gettingstarted_app). Not tested.\n\n``` go\nm.AddCmdRegexp(regexp.MustCompile(\"^(application|text)/(x-)?(java|ecma)script$\"),\n    exec.Command(\"java\", \"-jar\", \"build/compiler.jar\"))\n```\n\n### UglifyJS\nSee [UglifyJS](https://github.com/mishoo/UglifyJS2).\n\n``` go\nm.AddCmdRegexp(regexp.MustCompile(\"^(application|text)/(x-)?(java|ecma)script$\"),\n    exec.Command(\"uglifyjs\"))\n```\n\n### esbuild\nSee [esbuild](https://github.com/evanw/esbuild).\n\n``` go\nm.AddCmdRegexp(regexp.MustCompile(\"^(application|text)/(x-)?(java|ecma)script$\"),\n    exec.Command(\"esbuild\", \"$in.js\", \"--minify\", \"--outfile=$out.js\"))\n```\n\n### <a name=\"custom-minifier-example\"></a> Custom minifier\nCustom minifier showing an example that implements the minifier function interface. Within a custom minifier, it is possible to call any minifier function (through `m minify.Minifier`) recursively when dealing with embedded resources.\n``` go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"strings\"\n\n\t\"github.com/tdewolff/minify/v2\"\n)\n\nfunc main() {\n\tm := minify.New()\n\tm.AddFunc(\"text/plain\", func(m *minify.M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t// remove newlines and spaces\n\t\trb := bufio.NewReader(r)\n\t\tfor {\n\t\t\tline, err := rb.ReadString('\\n')\n\t\t\tif err != nil && err != io.EOF {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif _, errws := io.WriteString(w, strings.Replace(line, \" \", \"\", -1)); errws != nil {\n\t\t\t\treturn errws\n\t\t\t}\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\n\tin := \"Because my coffee was too cold, I heated it in the microwave.\"\n\tout, err := m.String(\"text/plain\", in)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(out)\n\t// Output: Becausemycoffeewastoocold,Iheateditinthemicrowave.\n}\n```\n\n### ResponseWriter\n#### Middleware\n``` go\nfunc main() {\n\tm := minify.New()\n\tm.AddFunc(\"text/css\", css.Minify)\n\tm.AddFunc(\"text/html\", html.Minify)\n\tm.AddFunc(\"image/svg+xml\", svg.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile(\"^(application|text)/(x-)?(java|ecma)script$\"), js.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile(\"[/+]json$\"), json.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile(\"[/+]xml$\"), xml.Minify)\n\n\tfs := http.FileServer(http.Dir(\"www/\"))\n\thttp.Handle(\"/\", m.MiddlewareWithError(fs))\n}\n\nfunc handleError(w http.ResponseWriter, r *http.Request, err error) {\n    http.Error(w, err.Error(), http.StatusInternalServerError)\n}\n```\n\nIn order to properly handle minify errors, it is necessary to close the response writer since all writes are concurrently handled. There is no need to check errors on writes since they will be returned on closing.\n\n```go\nfunc main() {\n\tm := minify.New()\n\tm.AddFunc(\"text/html\", html.Minify)\n\tm.AddFuncRegexp(regexp.MustCompile(\"^(application|text)/(x-)?(java|ecma)script$\"), js.Minify)\n\n\tinput := `<script>const i = 1_000_</script>` // Faulty JS\n\treq := httptest.NewRequest(http.MethodGet, \"/\", nil)\n\trec := httptest.NewRecorder()\n\tm.Middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\t_, _ = w.Write([]byte(input))\n\n\t\tif err = w.(io.Closer).Close(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t})).ServeHTTP(rec, req)\n}\n```\n\n#### ResponseWriter\n``` go\nfunc Serve(w http.ResponseWriter, r *http.Request) {\n\tmw := m.ResponseWriter(w, r)\n\tdefer mw.Close()\n\tw = mw\n\n\thttp.ServeFile(w, r, path.Join(\"www\", r.URL.Path))\n}\n```\n\n#### Custom response writer\nResponseWriter example which returns a ResponseWriter that minifies the content and then writes to the original ResponseWriter. Any write after applying this filter will be minified.\n``` go\ntype MinifyResponseWriter struct {\n\thttp.ResponseWriter\n\tio.WriteCloser\n}\n\nfunc (m MinifyResponseWriter) Write(b []byte) (int, error) {\n\treturn m.WriteCloser.Write(b)\n}\n\n// MinifyResponseWriter must be closed explicitly by calling site.\nfunc MinifyFilter(mediatype string, res http.ResponseWriter) MinifyResponseWriter {\n\tm := minify.New()\n\t// add minfiers\n\n\tmw := m.Writer(mediatype, res)\n\treturn MinifyResponseWriter{res, mw}\n}\n```\n\n``` go\n// Usage\nfunc(w http.ResponseWriter, req *http.Request) {\n\tw = MinifyFilter(\"text/html\", w)\n\tif _, err := io.WriteString(w, \"<p class=\"message\"> This HTTP response will be minified. </p>\"); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := w.Close(); err != nil {\n\t\tpanic(err)\n\t}\n\t// Output: <p class=message>This HTTP response will be minified.\n}\n```\n\n### Templates\n\nHere's an example of a replacement for `template.ParseFiles` from `template/html`, which automatically minifies each template before parsing it.\n\nBe aware that minifying templates will work in most cases but not all. Because the HTML minifier only works for valid HTML5, your template must be valid HTML5 of itself. Template tags are parsed as regular text by the minifier.\n\n``` go\nfunc compileTemplates(filenames ...string) (*template.Template, error) {\n\tm := minify.New()\n\tm.AddFunc(\"text/html\", html.Minify)\n\n\tvar tmpl *template.Template\n\tfor _, filename := range filenames {\n\t\tname := filepath.Base(filename)\n\t\tif tmpl == nil {\n\t\t\ttmpl = template.New(name)\n\t\t} else {\n\t\t\ttmpl = tmpl.New(name)\n\t\t}\n\n\t\tb, err := os.ReadFile(filename)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tmb, err := m.Bytes(\"text/html\", b)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ttmpl.Parse(string(mb))\n\t}\n\treturn tmpl, nil\n}\n```\n\nExample usage:\n\n``` go\ntemplates := template.Must(compileTemplates(\"view.html\", \"home.html\"))\n```\n\n## FAQ\n### Newlines remain in minified output\nWhile you might expect the minified output to be on a single line for it to be fully minified, this is not true. In many cases, using a literal newline doesn't affect the file size, and in some cases it may even reduce the file size.\n\nA typical example is HTML. Whitespace is significant in HTML, meaning that spaces and newlines between or around tags may affect how they are displayed. There is no distinction between a space or a newline and they may be interchanged without affecting the displayed HTML. Remember that a space (0x20) and a newline (0x0A) are both one byte long, so that there is no difference in file size when interchanging them. This minifier removes unnecessary whitespace by replacing stretches of spaces and newlines by a single whitespace character. Specifically, if the stretch of white space characters contains a newline, it will replace it by a newline and otherwise by a space. This doesn't affect the file size, but may help somewhat for debugging or file transmission objectives.\n\nAnother example is JavaScript. Single or double quoted string literals may not contain newline characters but instead need to escape them as `\\n`. These are two bytes instead of a single newline byte. Using template literals it is allowed to have literal newline characters and we can use that fact to shave-off one byte! The result is that the minified output contains newlines instead of escaped newline characters, which makes the final file size smaller. Of course, changing from single or double quotes to template literals depends on other factors as well, and this minifier makes a calculation whether the template literal results in a shorter file size or not before converting a string literal.\n\n## License\nReleased under the [MIT license](LICENSE).\n\n[1]: http://golang.org/ \"Go Language\"\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "common.go",
          "type": "blob",
          "size": 12.7529296875,
          "content": "package minify\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\n\t\"github.com/tdewolff/parse/v2\"\n\t\"github.com/tdewolff/parse/v2/strconv\"\n)\n\nvar (\n\ttextMimeBytes     = []byte(\"text/plain\")\n\tcharsetASCIIBytes = []byte(\"charset=us-ascii\")\n\tdataBytes         = []byte(\"data:\")\n\tbase64Bytes       = []byte(\";base64\")\n)\n\n// Epsilon is the closest number to zero that is not considered to be zero.\nvar Epsilon = 0.00001\n\n// Mediatype minifies a given mediatype by removing all whitespace and lowercasing all parts except strings (which may be case sensitive).\nfunc Mediatype(b []byte) []byte {\n\tj := 0\n\tinString := false\n\tstart, lastString := 0, 0\n\tfor i, c := range b {\n\t\tif !inString && parse.IsWhitespace(c) {\n\t\t\tif start != 0 {\n\t\t\t\tj += copy(b[j:], b[start:i])\n\t\t\t} else {\n\t\t\t\tj += i\n\t\t\t}\n\t\t\tstart = i + 1\n\t\t} else if c == '\"' {\n\t\t\tinString = !inString\n\t\t\tif inString {\n\t\t\t\tif i-lastString < 1024 { // ToLower may otherwise slow down minification greatly\n\t\t\t\t\tparse.ToLower(b[lastString:i])\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlastString = j + (i + 1 - start)\n\t\t\t}\n\t\t}\n\t}\n\tif start != 0 {\n\t\tj += copy(b[j:], b[start:])\n\t\tparse.ToLower(b[lastString:j])\n\t\treturn b[:j]\n\t}\n\tparse.ToLower(b[lastString:])\n\treturn b\n}\n\n// DataURI minifies a data URI and calls a minifier by the specified mediatype. Specifications: https://www.ietf.org/rfc/rfc2397.txt.\nfunc DataURI(m *M, dataURI []byte) []byte {\n\torigData := parse.Copy(dataURI)\n\tmediatype, data, err := parse.DataURI(dataURI)\n\tif err != nil {\n\t\treturn dataURI\n\t}\n\n\tdata, _ = m.Bytes(string(mediatype), data)\n\tbase64Len := len(\";base64\") + base64.StdEncoding.EncodedLen(len(data))\n\tasciiLen := len(data)\n\tfor _, c := range data {\n\t\tif parse.DataURIEncodingTable[c] {\n\t\t\tasciiLen += 2\n\t\t}\n\t\tif asciiLen > base64Len {\n\t\t\tbreak\n\t\t}\n\t}\n\tif len(origData) < base64Len && len(origData) < asciiLen {\n\t\treturn origData\n\t}\n\tif base64Len < asciiLen {\n\t\tencoded := make([]byte, base64Len-len(\";base64\"))\n\t\tbase64.StdEncoding.Encode(encoded, data)\n\t\tdata = encoded\n\t\tmediatype = append(mediatype, base64Bytes...)\n\t} else {\n\t\tdata = parse.EncodeURL(data, parse.DataURIEncodingTable)\n\t}\n\tif len(\"text/plain\") <= len(mediatype) && parse.EqualFold(mediatype[:len(\"text/plain\")], textMimeBytes) {\n\t\tmediatype = mediatype[len(\"text/plain\"):]\n\t}\n\tfor i := 0; i+len(\";charset=us-ascii\") <= len(mediatype); i++ {\n\t\t// must start with semicolon and be followed by end of mediatype or semicolon\n\t\tif mediatype[i] == ';' && parse.EqualFold(mediatype[i+1:i+len(\";charset=us-ascii\")], charsetASCIIBytes) && (i+len(\";charset=us-ascii\") >= len(mediatype) || mediatype[i+len(\";charset=us-ascii\")] == ';') {\n\t\t\tmediatype = append(mediatype[:i], mediatype[i+len(\";charset=us-ascii\"):]...)\n\t\t\tbreak\n\t\t}\n\t}\n\treturn append(append(append(dataBytes, mediatype...), ','), data...)\n}\n\n// MaxInt is the maximum value of int.\nconst MaxInt = int(^uint(0) >> 1)\n\n// MinInt is the minimum value of int.\nconst MinInt = -MaxInt - 1\n\n// Decimal minifies a given byte slice containing a decimal and removes superfluous characters. It differs from Number in that it does not parse exponents.\n// It does not parse or output exponents. prec is the number of significant digits. When prec is zero it will keep all digits. Only digits after the dot can be removed to reach the number of significant digits. Very large number may thus have more significant digits.\nfunc Decimal(num []byte, prec int) []byte {\n\tif len(num) <= 1 {\n\t\treturn num\n\t}\n\n\t// omit first + and register mantissa start and end, whether it's negative and the exponent\n\tneg := false\n\tstart := 0\n\tdot := -1\n\tend := len(num)\n\tif 0 < end && (num[0] == '+' || num[0] == '-') {\n\t\tif num[0] == '-' {\n\t\t\tneg = true\n\t\t}\n\t\tstart++\n\t}\n\tfor i, c := range num[start:] {\n\t\tif c == '.' {\n\t\t\tdot = start + i\n\t\t\tbreak\n\t\t}\n\t}\n\tif dot == -1 {\n\t\tdot = end\n\t}\n\n\t// trim leading zeros but leave at least one digit\n\tfor start < end-1 && num[start] == '0' {\n\t\tstart++\n\t}\n\t// trim trailing zeros\n\ti := end - 1\n\tfor ; dot < i; i-- {\n\t\tif num[i] != '0' {\n\t\t\tend = i + 1\n\t\t\tbreak\n\t\t}\n\t}\n\tif i == dot {\n\t\tend = dot\n\t\tif start == end {\n\t\t\tnum[start] = '0'\n\t\t\treturn num[start : start+1]\n\t\t}\n\t} else if start == end-1 && num[start] == '0' {\n\t\treturn num[start:end]\n\t}\n\n\t// apply precision\n\tif 0 < prec && dot <= start+prec {\n\t\tprecEnd := start + prec + 1 // include dot\n\t\tif dot == start {           // for numbers like .012\n\t\t\tdigit := start + 1\n\t\t\tfor digit < end && num[digit] == '0' {\n\t\t\t\tdigit++\n\t\t\t}\n\t\t\tprecEnd = digit + prec\n\t\t}\n\t\tif precEnd < end {\n\t\t\tend = precEnd\n\n\t\t\t// process either an increase from a lesser significant decimal (>= 5)\n\t\t\t// or remove trailing zeros after the dot, or both\n\t\t\ti := end - 1\n\t\t\tinc := '5' <= num[end]\n\t\t\tfor ; start < i; i-- {\n\t\t\t\tif i == dot {\n\t\t\t\t\t// no-op\n\t\t\t\t} else if inc && num[i] != '9' {\n\t\t\t\t\tnum[i]++\n\t\t\t\t\tinc = false\n\t\t\t\t\tbreak\n\t\t\t\t} else if inc && i < dot { // end inc for integer\n\t\t\t\t\tnum[i] = '0'\n\t\t\t\t} else if !inc && (i < dot || num[i] != '0') {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif i < dot {\n\t\t\t\tend = dot\n\t\t\t} else {\n\t\t\t\tend = i + 1\n\t\t\t}\n\n\t\t\tif inc {\n\t\t\t\tif dot == start && end == start+1 {\n\t\t\t\t\tnum[start] = '1'\n\t\t\t\t} else if num[start] == '9' {\n\t\t\t\t\tnum[start] = '1'\n\t\t\t\t\tnum[start+1] = '0'\n\t\t\t\t\tend++\n\t\t\t\t} else {\n\t\t\t\t\tnum[start]++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif neg {\n\t\tstart--\n\t\tnum[start] = '-'\n\t}\n\treturn num[start:end]\n}\n\n// Number minifies a given byte slice containing a number and removes superfluous characters.\nfunc Number(num []byte, prec int) []byte {\n\tif len(num) <= 1 {\n\t\treturn num\n\t}\n\n\t// omit first + and register mantissa start and end, whether it's negative and the exponent\n\tneg := false\n\tstart := 0\n\tdot := -1\n\tend := len(num)\n\torigExp := 0\n\tif num[0] == '+' || num[0] == '-' {\n\t\tif num[0] == '-' {\n\t\t\tneg = true\n\t\t}\n\t\tstart++\n\t}\n\tfor i, c := range num[start:] {\n\t\tif c == '.' {\n\t\t\tdot = start + i\n\t\t} else if c == 'e' || c == 'E' {\n\t\t\tend = start + i\n\t\t\ti += start + 1\n\t\t\tif i < len(num) && num[i] == '+' {\n\t\t\t\ti++\n\t\t\t}\n\t\t\tif tmpOrigExp, n := strconv.ParseInt(num[i:]); 0 < n && int64(MinInt) <= tmpOrigExp && tmpOrigExp <= int64(MaxInt) {\n\t\t\t\t// range checks for when int is 32 bit\n\t\t\t\torigExp = int(tmpOrigExp)\n\t\t\t} else {\n\t\t\t\treturn num\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\tif dot == -1 {\n\t\tdot = end\n\t}\n\n\t// trim leading zeros but leave at least one digit\n\tfor start < end-1 && num[start] == '0' {\n\t\tstart++\n\t}\n\t// trim trailing zeros\n\ti := end - 1\n\tfor ; dot < i; i-- {\n\t\tif num[i] != '0' {\n\t\t\tend = i + 1\n\t\t\tbreak\n\t\t}\n\t}\n\tif i == dot {\n\t\tend = dot\n\t\tif start == end {\n\t\t\tnum[start] = '0'\n\t\t\treturn num[start : start+1]\n\t\t}\n\t} else if start == end-1 && num[start] == '0' {\n\t\treturn num[start:end]\n\t}\n\n\t// apply precision\n\tif 0 < prec { //&& (dot <= start+prec || start+prec+1 < dot || 0 < origExp) { // don't minify 9 to 10, but do 999 to 1e3 and 99e1 to 1e3\n\t\tprecEnd := start + prec\n\t\tif dot == start { // for numbers like .012\n\t\t\tdigit := start + 1\n\t\t\tfor digit < end && num[digit] == '0' {\n\t\t\t\tdigit++\n\t\t\t}\n\t\t\tprecEnd = digit + prec\n\t\t} else if dot < precEnd { // for numbers where precision will include the dot\n\t\t\tprecEnd++\n\t\t}\n\t\tif precEnd < end && (dot < end || 1 < dot-precEnd+origExp) { // do not minify 9=>10 or 99=>100 or 9e1=>1e2 (but 90), but 999=>1e3 and 99e1=>1e3\n\t\t\tend = precEnd\n\t\t\tinc := '5' <= num[end]\n\t\t\tif dot == end {\n\t\t\t\tinc = end+1 < len(num) && '5' <= num[end+1]\n\t\t\t}\n\t\t\tif precEnd < dot {\n\t\t\t\torigExp += dot - precEnd\n\t\t\t\tdot = precEnd\n\t\t\t}\n\t\t\t// process either an increase from a lesser significant decimal (>= 5)\n\t\t\t// and remove trailing zeros\n\t\t\ti := end - 1\n\t\t\tfor ; start < i; i-- {\n\t\t\t\tif i == dot {\n\t\t\t\t\t// no-op\n\t\t\t\t} else if inc && num[i] != '9' {\n\t\t\t\t\tnum[i]++\n\t\t\t\t\tinc = false\n\t\t\t\t\tbreak\n\t\t\t\t} else if !inc && num[i] != '0' {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tend = i + 1\n\t\t\tif end < dot {\n\t\t\t\torigExp += dot - end\n\t\t\t\tdot = end\n\t\t\t}\n\t\t\tif inc { // single digit left\n\t\t\t\tif dot == start {\n\t\t\t\t\tnum[start] = '1'\n\t\t\t\t\tdot = start + 1\n\t\t\t\t} else if num[start] == '9' {\n\t\t\t\t\tnum[start] = '1'\n\t\t\t\t\torigExp++\n\t\t\t\t} else {\n\t\t\t\t\tnum[start]++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// n is the number of significant digits\n\t// normExp would be the exponent if it were normalised (0.1 <= f < 1)\n\tn := 0\n\tnormExp := 0\n\tif dot == start {\n\t\tfor i = dot + 1; i < end; i++ {\n\t\t\tif num[i] != '0' {\n\t\t\t\tn = end - i\n\t\t\t\tnormExp = dot - i + 1\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t} else if dot == end {\n\t\tnormExp = end - start\n\t\tfor i = end - 1; start <= i; i-- {\n\t\t\tif num[i] != '0' {\n\t\t\t\tn = i + 1 - start\n\t\t\t\tend = i + 1\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t} else {\n\t\tn = end - start - 1\n\t\tnormExp = dot - start\n\t}\n\n\tif origExp < 0 && (normExp < MinInt-origExp || normExp-n < MinInt-origExp) || 0 < origExp && (MaxInt-origExp < normExp || MaxInt-origExp < normExp-n) {\n\t\treturn num // exponent overflow\n\t}\n\tnormExp += origExp\n\n\t// intExp would be the exponent if it were an integer\n\tintExp := normExp - n\n\tlenIntExp := strconv.LenInt(int64(intExp))\n\tlenNormExp := strconv.LenInt(int64(normExp))\n\n\t// there are three cases to consider when printing the number\n\t// case 1: without decimals and with a positive exponent (large numbers: 5e4)\n\t// case 2: with decimals and with a negative exponent (small numbers with many digits: .123456e-4)\n\t// case 3: with decimals and without an exponent (around zero: 5.6)\n\t// case 4: without decimals and with a negative exponent (small numbers: 123456e-9)\n\tif n <= normExp {\n\t\t// case 1: print number with positive exponent\n\t\tif dot < end {\n\t\t\t// remove dot, either from the front or copy the smallest part\n\t\t\tif dot == start {\n\t\t\t\tstart = end - n\n\t\t\t} else if dot-start < end-dot-1 {\n\t\t\t\tcopy(num[start+1:], num[start:dot])\n\t\t\t\tstart++\n\t\t\t} else {\n\t\t\t\tcopy(num[dot:], num[dot+1:end])\n\t\t\t\tend--\n\t\t\t}\n\t\t}\n\t\tif n+3 <= normExp {\n\t\t\tnum[end] = 'e'\n\t\t\tend++\n\t\t\tfor i := end + lenIntExp - 1; end <= i; i-- {\n\t\t\t\tnum[i] = byte(intExp%10) + '0'\n\t\t\t\tintExp /= 10\n\t\t\t}\n\t\t\tend += lenIntExp\n\t\t} else if n+2 == normExp {\n\t\t\tnum[end] = '0'\n\t\t\tnum[end+1] = '0'\n\t\t\tend += 2\n\t\t} else if n+1 == normExp {\n\t\t\tnum[end] = '0'\n\t\t\tend++\n\t\t}\n\t} else if normExp < -3 && lenNormExp < lenIntExp && dot < end {\n\t\t// case 2: print normalized number (0.1 <= f < 1)\n\t\tzeroes := -normExp + origExp\n\t\tif 0 < zeroes {\n\t\t\tcopy(num[start+1:], num[start+1+zeroes:end])\n\t\t\tend -= zeroes\n\t\t} else if zeroes < 0 {\n\t\t\tcopy(num[start+1:], num[start:dot])\n\t\t\tnum[start] = '.'\n\t\t}\n\t\tnum[end] = 'e'\n\t\tnum[end+1] = '-'\n\t\tend += 2\n\t\tfor i := end + lenNormExp - 1; end <= i; i-- {\n\t\t\tnum[i] = -byte(normExp%10) + '0'\n\t\t\tnormExp /= 10\n\t\t}\n\t\tend += lenNormExp\n\t} else if -lenIntExp-1 <= normExp {\n\t\t// case 3: print number without exponent\n\t\tzeroes := -normExp\n\t\tif 0 < zeroes {\n\t\t\t// dot placed at the front and negative exponent, adding zeroes\n\t\t\tnewDot := end - n - zeroes - 1\n\t\t\tif newDot != dot {\n\t\t\t\td := start - newDot\n\t\t\t\tif 0 < d {\n\t\t\t\t\tif dot < end {\n\t\t\t\t\t\t// copy original digits after the dot towards the end\n\t\t\t\t\t\tcopy(num[dot+1+d:], num[dot+1:end])\n\t\t\t\t\t\tif start < dot {\n\t\t\t\t\t\t\t// copy original digits before the dot towards the end\n\t\t\t\t\t\t\tcopy(num[start+d+1:], num[start:dot])\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if start < dot {\n\t\t\t\t\t\t// copy original digits before the dot towards the end\n\t\t\t\t\t\tcopy(num[start+d:], num[start:dot])\n\t\t\t\t\t}\n\t\t\t\t\tnewDot = start\n\t\t\t\t\tend += d\n\t\t\t\t} else {\n\t\t\t\t\tstart += -d\n\t\t\t\t}\n\t\t\t\tnum[newDot] = '.'\n\t\t\t\tfor i := 0; i < zeroes; i++ {\n\t\t\t\t\tnum[newDot+1+i] = '0'\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// dot placed in the middle of the number\n\t\t\tif dot == start {\n\t\t\t\t// when there are zeroes after the dot\n\t\t\t\tdot = end - n - 1\n\t\t\t\tstart = dot\n\t\t\t} else if end <= dot {\n\t\t\t\t// when input has no dot in it\n\t\t\t\tdot = end\n\t\t\t\tend++\n\t\t\t}\n\t\t\tnewDot := start + normExp\n\t\t\t// move digits between dot and newDot towards the end\n\t\t\tif dot < newDot {\n\t\t\t\tcopy(num[dot:], num[dot+1:newDot+1])\n\t\t\t} else if newDot < dot {\n\t\t\t\tcopy(num[newDot+1:], num[newDot:dot])\n\t\t\t}\n\t\t\tnum[newDot] = '.'\n\t\t}\n\t} else {\n\t\t// case 4: print number with negative exponent\n\t\t// find new end, considering moving numbers to the front, removing the dot and increasing the length of the exponent\n\t\tnewEnd := end\n\t\tif dot == start {\n\t\t\tnewEnd = start + n\n\t\t} else {\n\t\t\tnewEnd--\n\t\t}\n\t\tnewEnd += 2 + lenIntExp\n\n\t\texp := intExp\n\t\tlenExp := lenIntExp\n\t\tif newEnd < len(num) {\n\t\t\t// it saves space to convert the decimal to an integer and decrease the exponent\n\t\t\tif dot < end {\n\t\t\t\tif dot == start {\n\t\t\t\t\tcopy(num[start:], num[end-n:end])\n\t\t\t\t\tend = start + n\n\t\t\t\t} else {\n\t\t\t\t\tcopy(num[dot:], num[dot+1:end])\n\t\t\t\t\tend--\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// it does not save space and will panic, so we revert to the original representation\n\t\t\texp = origExp\n\t\t\tlenExp = 1\n\t\t\tif origExp <= -10 || 10 <= origExp {\n\t\t\t\tlenExp = strconv.LenInt(int64(origExp))\n\t\t\t}\n\t\t}\n\t\tnum[end] = 'e'\n\t\tnum[end+1] = '-'\n\t\tend += 2\n\t\tfor i := end + lenExp - 1; end <= i; i-- {\n\t\t\tnum[i] = -byte(exp%10) + '0'\n\t\t\texp /= 10\n\t\t}\n\t\tend += lenExp\n\t}\n\n\tif neg {\n\t\tstart--\n\t\tnum[start] = '-'\n\t}\n\treturn num[start:end]\n}\n\nfunc UpdateErrorPosition(err error, input *parse.Input, offset int) error {\n\tif perr, ok := err.(*parse.Error); ok {\n\t\tr := bytes.NewBuffer(input.Bytes())\n\t\tline, column, _ := parse.Position(r, offset)\n\t\tperr.Line += line - 1\n\t\tperr.Column += column - 1\n\t\treturn perr\n\t}\n\treturn err\n}\n"
        },
        {
          "name": "common_test.go",
          "type": "blob",
          "size": 12.447265625,
          "content": "package minify\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"math\"\n\t\"math/rand\"\n\t\"strconv\"\n\t\"testing\"\n\n\t\"github.com/tdewolff/test\"\n)\n\nfunc TestMediatype(t *testing.T) {\n\tmediatypeTests := []struct {\n\t\tmediatype string\n\t\texpected  string\n\t}{\n\t\t{\"text/html\", \"text/html\"},\n\t\t{\"text/html; charset=UTF-8\", \"text/html;charset=utf-8\"},\n\t\t{\"text/html; charset=UTF-8 ; param = \\\" ; \\\"\", \"text/html;charset=utf-8;param=\\\" ; \\\"\"},\n\t\t{\"text/html, text/css\", \"text/html,text/css\"},\n\t\t{`video/mp4; codecs=\"av01.0.05M.08\"`, `video/mp4;codecs=\"av01.0.05M.08\"`}, // #545\n\t}\n\tfor _, tt := range mediatypeTests {\n\t\tt.Run(tt.mediatype, func(t *testing.T) {\n\t\t\tmediatype := Mediatype([]byte(tt.mediatype))\n\t\t\ttest.Minify(t, tt.mediatype, nil, string(mediatype), tt.expected)\n\t\t})\n\t}\n}\n\nfunc TestDataURI(t *testing.T) {\n\tdataURITests := []struct {\n\t\tdataURI  string\n\t\texpected string\n\t}{\n\t\t{\"datx:x\", \"datx:x\"},\n\t\t{\"data:,text\", \"data:,text\"},\n\t\t{\"data:text/plain;charset=us-ascii,text\", \"data:,text\"},\n\t\t{\"data:TEXT/PLAIN;CHARSET=US-ASCII,text\", \"data:,text\"},\n\t\t{\"data:text/plain;charset=us-asciiz,text\", \"data:;charset=us-asciiz,text\"},\n\t\t{\"data:;base64,dGV4dA==\", \"data:,text\"},\n\t\t{\"data:text/svg+xml;base64,IyMjIyMj\", \"data:text/svg+xml;base64,IyMjIyMj\"},\n\t\t{\"data:text/xml;version=2.0,content\", \"data:text/xml;version=2.0,content\"},\n\t\t{\"data:text/xml; version = 2.0,content\", \"data:text/xml;version=2.0,content\"},\n\t\t{\"data:,%23%23%23%23%23\", \"data:,%23%23%23%23%23\"},\n\t\t{\"data:,%23%23%23%23%23%23\", \"data:;base64,IyMjIyMj\"},\n\t\t{\"data:text/x,<?xx?>\", \"data:text/x,%3C?xx?%3E\"},\n\t\t{\"data:text/other,\\\"<\\u2318\", \"data:text/other,%22%3C%E2%8C%98\"},\n\t\t{\"data:text/other,\\\"<\\u2318>\", \"data:text/other;base64,IjzijJg+\"},\n\t\t{`data:text/svg+xml,%3Csvg height=\"100\" width=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /></svg>`, `data:text/svg+xml,%3Csvg height=\"100\" width=\"100\"><circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /></svg>`},\n\t}\n\tm := New()\n\tm.AddFunc(\"text/x\", func(_ *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\tb, _ := io.ReadAll(r)\n\t\ttest.String(t, string(b), \"<?xx?>\")\n\t\t_, _ = w.Write(b)\n\t\treturn nil\n\t})\n\tfor _, tt := range dataURITests {\n\t\tt.Run(tt.dataURI, func(t *testing.T) {\n\t\t\tdataURI := DataURI(m, []byte(tt.dataURI))\n\t\t\ttest.Minify(t, tt.dataURI, nil, string(dataURI), tt.expected)\n\t\t})\n\t}\n}\n\nfunc TestDecimal(t *testing.T) {\n\tnumberTests := []struct {\n\t\tnumber   string\n\t\texpected string\n\t}{\n\t\t{\"\", \"\"},\n\t\t{\"0\", \"0\"},\n\t\t{\".0\", \"0\"},\n\t\t{\"1.0\", \"1\"},\n\t\t{\"0.1\", \".1\"},\n\t\t{\"+1\", \"1\"},\n\t\t{\"-1\", \"-1\"},\n\t\t{\"-0.1\", \"-.1\"},\n\t\t{\"10\", \"10\"},\n\t\t{\"100\", \"100\"},\n\t\t{\"1000\", \"1000\"},\n\t\t{\"0.001\", \".001\"},\n\t\t{\"0.0001\", \".0001\"},\n\t\t{\"0.252\", \".252\"},\n\t\t{\"1.252\", \"1.252\"},\n\t\t{\"-1.252\", \"-1.252\"},\n\t\t{\"0.075\", \".075\"},\n\t\t{\"789012345678901234567890123456789e9234567890123456789\", \"789012345678901234567890123456789e9234567890123456789\"},\n\t\t{\".000100009\", \".000100009\"},\n\t\t{\".0001000009\", \".0001000009\"},\n\t\t{\".0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009\", \".0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009\"},\n\t\t{\"E\\x1f\", \"E\\x1f\"}, // fuzz\n\t}\n\tfor _, tt := range numberTests {\n\t\tt.Run(tt.number, func(t *testing.T) {\n\t\t\tnumber := Decimal([]byte(tt.number), -1)\n\t\t\ttest.Minify(t, tt.number, nil, string(number), tt.expected)\n\t\t})\n\t}\n}\n\nfunc TestDecimalTruncate(t *testing.T) {\n\tnumberTests := []struct {\n\t\tnumber   string\n\t\ttruncate int\n\t\texpected string\n\t}{\n\t\t{\"0.1\", 1, \".1\"},\n\t\t{\"0.0001\", 1, \".0001\"},\n\t\t{\"0.111\", 1, \".1\"},\n\t\t{\"0.111\", 0, \".111\"},\n\t\t{\"1.111\", 1, \"1\"},\n\t\t{\"0.075\", 1, \".08\"},\n\t\t{\"0.025\", 1, \".03\"},\n\t\t{\"0.105\", 2, \".11\"},\n\t\t{\"0.104\", 2, \".1\"},\n\t\t{\"9.99\", 2, \"10\"},\n\t\t{\"9.99\", 1, \"10\"},\n\t\t{\"8.88\", 2, \"8.9\"},\n\t\t{\"8.88\", 1, \"9\"},\n\t\t{\"8.00\", 1, \"8\"},\n\t\t{\".88\", 1, \".9\"},\n\t\t{\"1.234\", 2, \"1.2\"},\n\t\t{\"33.33\", 2, \"33\"},\n\t\t{\"29.666\", 2, \"30\"},\n\t\t{\"1.51\", 2, \"1.5\"},\n\t\t{\"1.01\", 2, \"1\"},\n\t\t{\".99\", 1, \"1\"},\n\t\t{\"-16.400000000000006\", 3, \"-16.4\"}, // #233\n\t\t{\"1.00000000000001\", 15, \"1.00000000000001\"},\n\t\t{\"1.000000000000001\", 15, \"1\"},\n\t\t{\"1.000000000000009\", 15, \"1.00000000000001\"},\n\t\t{\"100000000000009\", 15, \"100000000000009\"},\n\t\t{\"1000000000000009\", 15, \"1000000000000009\"},\n\t\t{\"10000000000000009\", 15, \"10000000000000009\"},\n\t\t{\"139.99999999\", 8, \"140\"},\n\t}\n\tfor _, tt := range numberTests {\n\t\tt.Run(tt.number, func(t *testing.T) {\n\t\t\tnumber := Decimal([]byte(tt.number), tt.truncate)\n\t\t\ttest.Minify(t, tt.number, nil, string(number), tt.expected, \"truncate to\", tt.truncate)\n\t\t})\n\t}\n}\n\nfunc TestNumber(t *testing.T) {\n\tnumberTests := []struct {\n\t\tnumber   string\n\t\texpected string\n\t}{\n\t\t{\"\", \"\"},\n\t\t{\"0\", \"0\"},\n\t\t{\".0\", \"0\"},\n\t\t{\"1.0\", \"1\"},\n\t\t{\"0.1\", \".1\"},\n\t\t{\"+1\", \"1\"},\n\t\t{\"-1\", \"-1\"},\n\t\t{\"-0.1\", \"-.1\"},\n\t\t{\"10\", \"10\"},\n\t\t{\"100\", \"100\"},\n\t\t{\"1000\", \"1e3\"},\n\t\t{\"0.001\", \".001\"},\n\t\t{\"0.0001\", \"1e-4\"},\n\t\t{\"100e1\", \"1e3\"},\n\t\t{\"1e10\", \"1e10\"},\n\t\t{\"1e-10\", \"1e-10\"},\n\t\t{\"1000e-7\", \"1e-4\"},\n\t\t{\"1000e-6\", \".001\"},\n\t\t{\"1.1e+1\", \"11\"},\n\t\t{\"1.1e-1\", \".11\"},\n\t\t{\"1.1e6\", \"11e5\"},\n\t\t{\"1.1e\", \"1.1e\"},   // broken number, don't parse\n\t\t{\"1.1e+\", \"1.1e+\"}, // broken number, don't parse\n\t\t{\"0.252\", \".252\"},\n\t\t{\"1.252\", \"1.252\"},\n\t\t{\"-1.252\", \"-1.252\"},\n\t\t{\"0.075\", \".075\"},\n\t\t{\"789012345678901234567890123456789e9234567890123456789\", \"789012345678901234567890123456789e9234567890123456789\"},\n\t\t{\".000100009\", \"100009e-9\"},\n\t\t{\".0001000009\", \".0001000009\"},\n\t\t{\".0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009\", \".0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009\"},\n\t\t{\".6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e-9\", \".6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e-9\"},\n\t\t{\"E\\x1f\", \"E\\x1f\"}, // fuzz\n\t\t{\"1e9223372036854775807\", \"1e9223372036854775807\"},\n\t\t{\"11e9223372036854775807\", \"11e9223372036854775807\"},\n\t\t{\".01e-9223372036854775808\", \".01e-9223372036854775808\"},\n\t\t{\".011e-9223372036854775808\", \".011e-9223372036854775808\"},\n\n\t\t{\".12345e8\", \"12345e3\"},\n\t\t{\".12345e7\", \"1234500\"},\n\t\t{\".12345e6\", \"123450\"},\n\t\t{\".12345e5\", \"12345\"},\n\t\t{\".012345e6\", \"12345\"},\n\t\t{\".12345e4\", \"1234.5\"},\n\t\t{\"-.12345e4\", \"-1234.5\"},\n\t\t{\".12345e0\", \".12345\"},\n\t\t{\".12345e-1\", \".012345\"},\n\t\t{\".12345e-2\", \".0012345\"},\n\t\t{\".12345e-3\", \"12345e-8\"},\n\t\t{\".12345e-4\", \"12345e-9\"},\n\t\t{\".12345e-5\", \".12345e-5\"},\n\n\t\t{\".123456e-3\", \"123456e-9\"},\n\t\t{\".123456e-2\", \".00123456\"},\n\t\t{\".1234567e-4\", \".1234567e-4\"},\n\t\t{\".1234567e-3\", \".0001234567\"},\n\n\t\t{\"12345678e-1\", \"1234567.8\"},\n\t\t{\"72.e-3\", \".072\"},\n\t\t{\"7640e-2\", \"76.4\"},\n\t\t{\"10.e-3\", \".01\"},\n\t\t{\".0319e3\", \"31.9\"},\n\t\t{\"39.7e-2\", \".397\"},\n\t\t{\"39.7e-3\", \".0397\"},\n\t\t{\".01e1\", \".1\"},\n\t\t{\".001e1\", \".01\"},\n\t\t{\"39.7e-5\", \"397e-6\"},\n\t}\n\tfor _, tt := range numberTests {\n\t\tt.Run(tt.number, func(t *testing.T) {\n\t\t\tnumber := Number([]byte(tt.number), -1)\n\t\t\ttest.Minify(t, tt.number, nil, string(number), tt.expected)\n\t\t})\n\t}\n}\n\nfunc TestNumberTruncate(t *testing.T) {\n\tnumberTests := []struct {\n\t\tnumber   string\n\t\ttruncate int\n\t\texpected string\n\t}{\n\t\t{\"0.1\", 1, \".1\"},\n\t\t{\"0.01\", 1, \".01\"},\n\t\t{\"0.001\", 1, \".001\"},\n\t\t{\"0.0001\", 1, \"1e-4\"},\n\t\t{\"1000\", 0, \"1e3\"},\n\t\t{\"1234\", 0, \"1234\"},\n\t\t{\"0.111\", 1, \".1\"},\n\t\t{\"0.111\", 0, \".111\"},\n\t\t{\"0.075\", 1, \".08\"},\n\t\t{\"0.025\", 1, \".03\"},\n\t\t{\"0.105\", 2, \".11\"},\n\t\t{\"0.104\", 2, \".1\"},\n\t\t{\"9.99\", 2, \"10\"},\n\t\t{\"9.99\", 1, \"10\"},\n\t\t{\"99\", 1, \"99\"},\n\t\t{\"999\", 1, \"1e3\"},\n\t\t{\"99e1\", 1, \"1e3\"},\n\t\t{\"99.9\", 1, \"100\"},\n\t\t{\"999.9\", 1, \"1e3\"},\n\t\t{\"999.99\", 1, \"1e3\"},\n\t\t{\"111.99\", 4, \"112\"},\n\t\t{\"8.88\", 2, \"8.9\"},\n\t\t{\"8.88\", 1, \"9\"},\n\t\t{\"8.00\", 1, \"8\"},\n\t\t{\".88\", 1, \".9\"},\n\t\t{\"1.234\", 2, \"1.2\"},\n\t\t{\"33.33\", 2, \"33\"},\n\t\t{\"29.666\", 2, \"30\"},\n\t\t{\"1.51\", 2, \"1.5\"},\n\t\t{\"1.51\", 1, \"2\"},\n\t\t{\"1.01\", 2, \"1\"},\n\t\t{\"1.01\", 3, \"1.01\"},\n\t\t{\"1.01\", 4, \"1.01\"},\n\t\t{\".99\", 1, \"1\"},\n\t\t{\"-16.400000000000006\", 3, \"-16.4\"}, // #233\n\t\t{\"1.00000000000001\", 15, \"1.00000000000001\"},\n\t\t{\"1.000000000000001\", 15, \"1\"},\n\t\t{\"1.000000000000009\", 15, \"1.00000000000001\"},\n\t\t{\"100000000000009\", 15, \"100000000000009\"},\n\t\t{\"1000000000000009\", 15, \"1000000000000009\"},\n\t\t{\"10000000000000009\", 15, \"1e16\"},\n\t\t{\"0.0000100000000000009\", 15, \".100000000000009e-4\"},\n\t\t{\".000333336\", 0, \"333336e-9\"},\n\t\t{\".0003333337\", 0, \".0003333337\"},\n\t\t{\".000033335\", 0, \"33335e-9\"},\n\t\t{\".0000333336\", 0, \".333336e-4\"},\n\t\t{\".00003333337\", 0, \".3333337e-4\"},\n\t\t{\".0000000003333337\", 0, \".3333337e-9\"},\n\t\t{\".00000000003333338\", 0, \"3333338e-17\"},\n\t\t{\".333336e-3\", 0, \"333336e-9\"},\n\t\t{\".3333337e-3\", 0, \".0003333337\"},\n\t\t{\".33335e-4\", 0, \"33335e-9\"},\n\t\t{\".333336e-4\", 0, \".333336e-4\"},\n\t\t{\".3333337e-4\", 0, \".3333337e-4\"},\n\t\t{\".000033333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333395\", 0, \".33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333395e-4\"},\n\t\t{\".0000333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333396\", 0, \".333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333396e-4\"},\n\t\t{\".00003333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333397\", 0, \".3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333397e-4\"},\n\t\t{\".0000033333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333395\", 0, \".33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333395e-5\"},\n\t\t{\".33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333395e-4\", 0, \".33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333395e-4\"},\n\t\t{\".333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333396e-4\", 0, \".333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333396e-4\"},\n\t\t{\".3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333397e-4\", 0, \".3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333397e-4\"},\n\t\t{\".3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333397e-902\", 0, \"3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333397e-999\"},\n\t\t{\".3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333397e-903\", 0, \".3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333397e-903\"},\n\t\t{\"29.629775e-9\", 0, \".29629775e-7\"},\n\t\t{\"e-9223372036854775808\", 0, \"e-9223372036854775808\"},\n\t\t{\"139.99999999\", 8, \"140\"},\n\t}\n\tfor _, tt := range numberTests {\n\t\tt.Run(tt.number, func(t *testing.T) {\n\t\t\tnumber := Number([]byte(tt.number), tt.truncate)\n\t\t\ttest.Minify(t, tt.number, nil, string(number), tt.expected, \"truncate to\", tt.truncate)\n\t\t})\n\t}\n}\n\nfunc TestDecimalRandom(t *testing.T) {\n\tN := int(1e4)\n\tif testing.Short() {\n\t\tN = 0\n\t}\n\tfor i := 0; i < N; i++ {\n\t\tb := RandNumBytes(false)\n\t\tf, _ := strconv.ParseFloat(string(b), 64)\n\n\t\tb2 := make([]byte, len(b))\n\t\tcopy(b2, b)\n\t\tb2 = Decimal(b2, -1)\n\t\tf2, _ := strconv.ParseFloat(string(b2), 64)\n\t\tif math.Abs(f-f2) > 1e-6 {\n\t\t\tfmt.Println(\"Bad:\", f, \"!=\", f2, \"in\", string(b), \"to\", string(b2))\n\t\t}\n\t}\n}\n\nfunc TestNumberRandom(t *testing.T) {\n\tN := int(1e4)\n\tif testing.Short() {\n\t\tN = 0\n\t}\n\tfor i := 0; i < N; i++ {\n\t\tb := RandNumBytes(true)\n\t\tf, _ := strconv.ParseFloat(string(b), 64)\n\n\t\tb2 := make([]byte, len(b))\n\t\tcopy(b2, b)\n\t\tb2 = Number(b2, -1)\n\t\tf2, _ := strconv.ParseFloat(string(b2), 64)\n\t\tif math.Abs(f-f2) > 1e-6 {\n\t\t\tfmt.Println(\"Bad:\", f, \"!=\", f2, \"in\", string(b), \"to\", string(b2))\n\t\t}\n\t}\n}\n\n////////////////\n\nvar n = 100\nvar numbers [][]byte\n\nfunc TestMain(t *testing.T) {\n\tnumbers = make([][]byte, 0, n)\n\tfor j := 0; j < n; j++ {\n\t\tnumbers = append(numbers, RandNumBytes(true))\n\t}\n}\n\nfunc RandNumBytes(withExp bool) []byte {\n\tvar b []byte\n\tn := rand.Int() % 10\n\tfor i := 0; i < n; i++ {\n\t\tb = append(b, byte(rand.Int()%10)+'0')\n\t}\n\tif rand.Int()%2 == 0 {\n\t\tb = append(b, '.')\n\t\tn = rand.Int() % 10\n\t\tfor i := 0; i < n; i++ {\n\t\t\tb = append(b, byte(rand.Int()%10)+'0')\n\t\t}\n\t}\n\tif withExp && rand.Int()%2 == 0 {\n\t\tb = append(b, 'e')\n\t\tif rand.Int()%2 == 0 {\n\t\t\tb = append(b, '-')\n\t\t}\n\t\tn = 1 + rand.Int()%4\n\t\tfor i := 0; i < n; i++ {\n\t\t\tb = append(b, byte(rand.Int()%10)+'0')\n\t\t}\n\t}\n\treturn b\n}\n\nfunc BenchmarkNumber(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\tNumber(numbers[j], -1)\n\t\t}\n\t}\n}\n\nfunc BenchmarkNumber2(b *testing.B) {\n\tnum := []byte(\"1.2345e-6\")\n\tfor i := 0; i < b.N; i++ {\n\t\tNumber(num, -1)\n\t}\n}\n"
        },
        {
          "name": "containerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "css",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.6484375,
          "content": "module github.com/tdewolff/minify/v2\n\ngo 1.18\n\nrequire (\n\tgithub.com/djherbis/atime v1.1.0\n\tgithub.com/fsnotify/fsnotify v1.8.0\n\tgithub.com/matryer/try v0.0.0-20161228173917-9ac251b645a2\n\tgithub.com/tdewolff/argp v0.0.0-20240625173203-87b04d5d3e52\n\tgithub.com/tdewolff/parse/v2 v2.7.19\n\tgithub.com/tdewolff/test v1.0.11-0.20240106005702-7de5f7df4739\n)\n\nrequire (\n\tfilippo.io/edwards25519 v1.1.0 // indirect\n\tgithub.com/cheekybits/is v0.0.0-20150225183255-68e9c0620927 // indirect\n\tgithub.com/go-sql-driver/mysql v1.8.1 // indirect\n\tgithub.com/jmoiron/sqlx v1.4.0 // indirect\n\tgithub.com/pelletier/go-toml v1.9.5 // indirect\n\tgolang.org/x/sys v0.25.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.15625,
          "content": "filippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=\nfilippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=\ngithub.com/cheekybits/is v0.0.0-20150225183255-68e9c0620927 h1:SKI1/fuSdodxmNNyVBR8d7X/HuLnRpvvFO0AgyQk764=\ngithub.com/cheekybits/is v0.0.0-20150225183255-68e9c0620927/go.mod h1:h/aW8ynjgkuj+NQRlZcDbAbM1ORAbXjXX77sX7T289U=\ngithub.com/djherbis/atime v1.1.0 h1:rgwVbP/5by8BvvjBNrbh64Qz33idKT3pSnMSJsxhi0g=\ngithub.com/djherbis/atime v1.1.0/go.mod h1:28OF6Y8s3NQWwacXc5eZTsEsiMzp7LF8MbXE+XJPdBE=\ngithub.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=\ngithub.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=\ngithub.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/go-sql-driver/mysql v1.7.1/go.mod h1:OXbVy3sEdcQ2Doequ6Z5BW6fXNQTmx+9S1MCJN5yJMI=\ngithub.com/go-sql-driver/mysql v1.8.1 h1:LedoTUt/eveggdHS9qUFC1EFSa8bU2+1pZjSRpvNJ1Y=\ngithub.com/go-sql-driver/mysql v1.8.1/go.mod h1:wEBSXgmK//2ZFJyE+qWnIsVGmvmEKlqwuVSjsCm7DZg=\ngithub.com/jmoiron/sqlx v1.3.5/go.mod h1:nRVWtLre0KfCLJvgxzCsLVMogSvQ1zNJtpYr2Ccp0mQ=\ngithub.com/jmoiron/sqlx v1.4.0 h1:1PLqN7S1UYp5t4SrVVnt4nUVNemrDAtxlulVe+Qgm3o=\ngithub.com/jmoiron/sqlx v1.4.0/go.mod h1:ZrZ7UsYB/weZdl2Bxg6jCRO9c3YHl8r3ahlKmRT4JLY=\ngithub.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=\ngithub.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/matryer/try v0.0.0-20161228173917-9ac251b645a2 h1:JAEbJn3j/FrhdWA9jW8B5ajsLIjeuEHLi8xE4fk997o=\ngithub.com/matryer/try v0.0.0-20161228173917-9ac251b645a2/go.mod h1:0KeJpeMD6o+O4hW7qJOT7vyQPKrWmj26uf5wMc/IiIs=\ngithub.com/mattn/go-sqlite3 v1.14.6/go.mod h1:NyWgC/yNuGj7Q9rpYnZvas74GogHl5/Z4A/KQRfk6bU=\ngithub.com/mattn/go-sqlite3 v1.14.22 h1:2gZY6PC6kBnID23Tichd1K+Z0oS6nE/XwU+Vz/5o4kU=\ngithub.com/mattn/go-sqlite3 v1.14.22/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=\ngithub.com/pelletier/go-toml v1.9.5 h1:4yBQzkHv+7BHq2PQUZF3Mx0IYxG7LsP222s7Agd3ve8=\ngithub.com/pelletier/go-toml v1.9.5/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=\ngithub.com/tdewolff/argp v0.0.0-20240625173203-87b04d5d3e52 h1:bHOA+qzNf3CwchHAIA1k68QgERWiOgZMIh3qoOB3DzA=\ngithub.com/tdewolff/argp v0.0.0-20240625173203-87b04d5d3e52/go.mod h1:e1dkYfBKpwfFhwXWrQpEU2ClFgxYOT4SrHd6fKD7nIE=\ngithub.com/tdewolff/parse/v2 v2.7.19 h1:7Ljh26yj+gdLFEq/7q9LT4SYyKtwQX4ocNrj45UCePg=\ngithub.com/tdewolff/parse/v2 v2.7.19/go.mod h1:3FbJWZp3XT9OWVN3Hmfp0p/a08v4h8J9W1aghka0soA=\ngithub.com/tdewolff/test v1.0.6/go.mod h1:6DAvZliBAAnD7rhVgwaM7DE5/d9NMOAJ09SqYqeK4QE=\ngithub.com/tdewolff/test v1.0.11-0.20231101010635-f1265d231d52/go.mod h1:6DAvZliBAAnD7rhVgwaM7DE5/d9NMOAJ09SqYqeK4QE=\ngithub.com/tdewolff/test v1.0.11-0.20240106005702-7de5f7df4739 h1:IkjBCtQOOjIn03u/dMQK9g+Iw9ewps4mCl1nB8Sscbo=\ngithub.com/tdewolff/test v1.0.11-0.20240106005702-7de5f7df4739/go.mod h1:XPuWBzvdUzhCuxWO1ojpXsyzsA5bFoS3tO/Q3kFuTG8=\ngolang.org/x/sys v0.25.0 h1:r+8e+loiHxRqhXVl6ML1nO3l1+oFoWbnlu2Ehimmi34=\ngolang.org/x/sys v0.25.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\n"
        },
        {
          "name": "html",
          "type": "tree",
          "content": null
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "json",
          "type": "tree",
          "content": null
        },
        {
          "name": "minify.go",
          "type": "blob",
          "size": 12.1220703125,
          "content": "// Package minify relates MIME type to minifiers. Several minifiers are provided in the subpackages.\npackage minify\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"mime\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"regexp\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/tdewolff/parse/v2\"\n\t\"github.com/tdewolff/parse/v2/buffer\"\n)\n\n// Warning is used to report usage warnings such as using a deprecated feature\nvar Warning = log.New(os.Stderr, \"WARNING: \", 0)\n\n// ErrNotExist is returned when no minifier exists for a given mimetype.\nvar ErrNotExist = errors.New(\"minifier does not exist for mimetype\")\n\n// ErrClosedWriter is returned when writing to a closed writer.\nvar ErrClosedWriter = errors.New(\"write on closed writer\") // TODO: DEPRECATED, remove\n\n////////////////////////////////////////////////////////////////\n\n// MinifierFunc is a function that implements Minifer.\ntype MinifierFunc func(*M, io.Writer, io.Reader, map[string]string) error\n\n// Minify calls f(m, w, r, params)\nfunc (f MinifierFunc) Minify(m *M, w io.Writer, r io.Reader, params map[string]string) error {\n\treturn f(m, w, r, params)\n}\n\n// Minifier is the interface for minifiers.\n// The *M parameter is used for minifying embedded resources, such as JS within HTML.\ntype Minifier interface {\n\tMinify(*M, io.Writer, io.Reader, map[string]string) error\n}\n\n////////////////////////////////////////////////////////////////\n\ntype patternMinifier struct {\n\tpattern *regexp.Regexp\n\tMinifier\n}\n\ntype cmdMinifier struct {\n\tcmd *exec.Cmd\n}\n\nvar cmdArgExtension = regexp.MustCompile(`^\\.[0-9a-zA-Z]+`)\n\nfunc (c *cmdMinifier) Minify(_ *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\tcmd := &exec.Cmd{}\n\t*cmd = *c.cmd // concurrency safety\n\n\tvar in, out *os.File\n\tfor i, arg := range cmd.Args {\n\t\tif j := strings.Index(arg, \"$in\"); j != -1 {\n\t\t\tvar err error\n\t\t\text := cmdArgExtension.FindString(arg[j+3:])\n\t\t\tif in, err = os.CreateTemp(\"\", \"minify-in-*\"+ext); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcmd.Args[i] = arg[:j] + in.Name() + arg[j+3+len(ext):]\n\t\t} else if j := strings.Index(arg, \"$out\"); j != -1 {\n\t\t\tvar err error\n\t\t\text := cmdArgExtension.FindString(arg[j+4:])\n\t\t\tif out, err = os.CreateTemp(\"\", \"minify-out-*\"+ext); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcmd.Args[i] = arg[:j] + out.Name() + arg[j+4+len(ext):]\n\t\t}\n\t}\n\n\tif in == nil {\n\t\tcmd.Stdin = r\n\t} else if _, err := io.Copy(in, r); err != nil {\n\t\treturn err\n\t}\n\tif out == nil {\n\t\tcmd.Stdout = w\n\t} else {\n\t\tdefer io.Copy(w, out)\n\t}\n\tstderr := &bytes.Buffer{}\n\tcmd.Stderr = stderr\n\n\terr := cmd.Run()\n\tif _, ok := err.(*exec.ExitError); ok {\n\t\tif stderr.Len() != 0 {\n\t\t\terr = fmt.Errorf(\"%s\", stderr.String())\n\t\t}\n\t\terr = fmt.Errorf(\"command %s failed: %w\", cmd.Path, err)\n\t}\n\treturn err\n}\n\n////////////////////////////////////////////////////////////////\n\n// M holds a map of mimetype => function to allow recursive minifier calls of the minifier functions.\ntype M struct {\n\tmutex   sync.RWMutex\n\tliteral map[string]Minifier\n\tpattern []patternMinifier\n\n\tURL *url.URL\n}\n\n// New returns a new M.\nfunc New() *M {\n\treturn &M{\n\t\tsync.RWMutex{},\n\t\tmap[string]Minifier{},\n\t\t[]patternMinifier{},\n\t\tnil,\n\t}\n}\n\n// Add adds a minifier to the mimetype => function map (unsafe for concurrent use).\nfunc (m *M) Add(mimetype string, minifier Minifier) {\n\tm.mutex.Lock()\n\tm.literal[mimetype] = minifier\n\tm.mutex.Unlock()\n}\n\n// AddFunc adds a minify function to the mimetype => function map (unsafe for concurrent use).\nfunc (m *M) AddFunc(mimetype string, minifier MinifierFunc) {\n\tm.mutex.Lock()\n\tm.literal[mimetype] = minifier\n\tm.mutex.Unlock()\n}\n\n// AddRegexp adds a minifier to the mimetype => function map (unsafe for concurrent use).\nfunc (m *M) AddRegexp(pattern *regexp.Regexp, minifier Minifier) {\n\tm.mutex.Lock()\n\tm.pattern = append(m.pattern, patternMinifier{pattern, minifier})\n\tm.mutex.Unlock()\n}\n\n// AddFuncRegexp adds a minify function to the mimetype => function map (unsafe for concurrent use).\nfunc (m *M) AddFuncRegexp(pattern *regexp.Regexp, minifier MinifierFunc) {\n\tm.mutex.Lock()\n\tm.pattern = append(m.pattern, patternMinifier{pattern, minifier})\n\tm.mutex.Unlock()\n}\n\n// AddCmd adds a minify function to the mimetype => function map (unsafe for concurrent use) that executes a command to process the minification.\n// It allows the use of external tools like ClosureCompiler, UglifyCSS, etc. for a specific mimetype.\nfunc (m *M) AddCmd(mimetype string, cmd *exec.Cmd) {\n\tm.mutex.Lock()\n\tm.literal[mimetype] = &cmdMinifier{cmd}\n\tm.mutex.Unlock()\n}\n\n// AddCmdRegexp adds a minify function to the mimetype => function map (unsafe for concurrent use) that executes a command to process the minification.\n// It allows the use of external tools like ClosureCompiler, UglifyCSS, etc. for a specific mimetype regular expression.\nfunc (m *M) AddCmdRegexp(pattern *regexp.Regexp, cmd *exec.Cmd) {\n\tm.mutex.Lock()\n\tm.pattern = append(m.pattern, patternMinifier{pattern, &cmdMinifier{cmd}})\n\tm.mutex.Unlock()\n}\n\n// Match returns the pattern and minifier that gets matched with the mediatype.\n// It returns nil when no matching minifier exists.\n// It has the same matching algorithm as Minify.\nfunc (m *M) Match(mediatype string) (string, map[string]string, MinifierFunc) {\n\tm.mutex.RLock()\n\tdefer m.mutex.RUnlock()\n\n\tmimetype, params := parse.Mediatype([]byte(mediatype))\n\tif minifier, ok := m.literal[string(mimetype)]; ok { // string conversion is optimized away\n\t\treturn string(mimetype), params, minifier.Minify\n\t}\n\n\tfor _, minifier := range m.pattern {\n\t\tif minifier.pattern.Match(mimetype) {\n\t\t\treturn minifier.pattern.String(), params, minifier.Minify\n\t\t}\n\t}\n\treturn string(mimetype), params, nil\n}\n\n// Minify minifies the content of a Reader and writes it to a Writer (safe for concurrent use).\n// An error is returned when no such mimetype exists (ErrNotExist) or when an error occurred in the minifier function.\n// Mediatype may take the form of 'text/plain', 'text/*', '*/*' or 'text/plain; charset=UTF-8; version=2.0'.\nfunc (m *M) Minify(mediatype string, w io.Writer, r io.Reader) error {\n\tmimetype, params := parse.Mediatype([]byte(mediatype))\n\treturn m.MinifyMimetype(mimetype, w, r, params)\n}\n\n// MinifyMimetype minifies the content of a Reader and writes it to a Writer (safe for concurrent use).\n// It is a lower level version of Minify and requires the mediatype to be split up into mimetype and parameters.\n// It is mostly used internally by minifiers because it is faster (no need to convert a byte-slice to string and vice versa).\nfunc (m *M) MinifyMimetype(mimetype []byte, w io.Writer, r io.Reader, params map[string]string) error {\n\tm.mutex.RLock()\n\tdefer m.mutex.RUnlock()\n\n\tif minifier, ok := m.literal[string(mimetype)]; ok { // string conversion is optimized away\n\t\treturn minifier.Minify(m, w, r, params)\n\t}\n\tfor _, minifier := range m.pattern {\n\t\tif minifier.pattern.Match(mimetype) {\n\t\t\treturn minifier.Minify(m, w, r, params)\n\t\t}\n\t}\n\treturn ErrNotExist\n}\n\n// Bytes minifies an array of bytes (safe for concurrent use). When an error occurs it return the original array and the error.\n// It returns an error when no such mimetype exists (ErrNotExist) or any error occurred in the minifier function.\nfunc (m *M) Bytes(mediatype string, v []byte) ([]byte, error) {\n\tout := buffer.NewWriter(make([]byte, 0, len(v)))\n\tif err := m.Minify(mediatype, out, buffer.NewReader(v)); err != nil {\n\t\treturn v, err\n\t}\n\treturn out.Bytes(), nil\n}\n\n// String minifies a string (safe for concurrent use). When an error occurs it return the original string and the error.\n// It returns an error when no such mimetype exists (ErrNotExist) or any error occurred in the minifier function.\nfunc (m *M) String(mediatype string, v string) (string, error) {\n\tout := buffer.NewWriter(make([]byte, 0, len(v)))\n\tif err := m.Minify(mediatype, out, buffer.NewReader([]byte(v))); err != nil {\n\t\treturn v, err\n\t}\n\treturn string(out.Bytes()), nil\n}\n\n// Reader wraps a Reader interface and minifies the stream.\n// Errors from the minifier are returned by the reader.\nfunc (m *M) Reader(mediatype string, r io.Reader) io.Reader {\n\tpr, pw := io.Pipe()\n\tgo func() {\n\t\tif err := m.Minify(mediatype, pw, r); err != nil {\n\t\t\tpw.CloseWithError(err)\n\t\t} else {\n\t\t\tpw.Close()\n\t\t}\n\t}()\n\treturn pr\n}\n\n// writer makes sure that errors from the minifier are passed down through Close (can be blocking).\ntype writer struct {\n\tio.WriteCloser\n\twg     sync.WaitGroup\n\tclosed bool\n\terr    error\n}\n\n// Close must be called when writing has finished. It returns the error from the minifier.\nfunc (z *writer) Close() error {\n\tif z.closed {\n\t\treturn nil\n\t}\n\tz.closed = true\n\terr := z.WriteCloser.Close()\n\tz.wg.Wait()\n\tif z.err == nil {\n\t\treturn err\n\t}\n\treturn z.err\n}\n\n// Writer wraps a Writer interface and minifies the stream.\n// Errors from the minifier are returned by Close on the writer.\n// The writer must be closed explicitly.\nfunc (m *M) Writer(mediatype string, w io.Writer) io.WriteCloser {\n\tpr, pw := io.Pipe()\n\tz := &writer{pw, sync.WaitGroup{}, false, nil}\n\tz.wg.Add(1)\n\tgo func() {\n\t\tdefer z.wg.Done()\n\t\tdefer pr.Close()\n\t\tif err := m.Minify(mediatype, w, pr); err != nil {\n\t\t\tz.err = err\n\t\t}\n\t}()\n\treturn z\n}\n\n// responseWriter wraps an http.ResponseWriter and makes sure that errors from the minifier are passed down through Close (can be blocking).\n// All writes to the response writer are intercepted and minified on the fly.\n// http.ResponseWriter loses all functionality such as Pusher, Hijacker, Flusher, ...\ntype responseWriter struct {\n\thttp.ResponseWriter\n\n\tz         io.Writer\n\tm         *M\n\tmediatype string\n}\n\n// WriteHeader intercepts any header writes and removes the Content-Length header.\nfunc (w *responseWriter) WriteHeader(status int) {\n\tw.ResponseWriter.Header().Del(\"Content-Length\")\n\tw.ResponseWriter.WriteHeader(status)\n}\n\n// Write intercepts any writes to the response writer.\n// The first write will extract the Content-Type as the mediatype. Otherwise it falls back to the RequestURI extension.\nfunc (w *responseWriter) Write(b []byte) (int, error) {\n\tif w.z == nil {\n\t\t// first write\n\t\tif mediatype := w.ResponseWriter.Header().Get(\"Content-Type\"); mediatype != \"\" {\n\t\t\tw.mediatype = mediatype\n\t\t}\n\t\tif _, params, minifier := w.m.Match(w.mediatype); minifier != nil {\n\t\t\tpr, pw := io.Pipe()\n\t\t\tz := &writer{pw, sync.WaitGroup{}, false, nil}\n\t\t\tz.wg.Add(1)\n\t\t\tgo func() {\n\t\t\t\tdefer z.wg.Done()\n\t\t\t\tdefer pr.Close()\n\t\t\t\tif err := minifier(w.m, w.ResponseWriter, pr, params); err != nil {\n\t\t\t\t\tz.err = err\n\t\t\t\t}\n\t\t\t}()\n\t\t\tw.z = z\n\t\t} else {\n\t\t\tw.z = w.ResponseWriter\n\t\t}\n\t}\n\treturn w.z.Write(b)\n}\n\n// Close must be called when writing has finished. It returns the error from the minifier.\nfunc (w *responseWriter) Close() error {\n\tif closer, ok := w.z.(interface{ Close() error }); ok {\n\t\treturn closer.Close()\n\t}\n\treturn nil\n}\n\n// ResponseWriter minifies any writes to the http.ResponseWriter.\n// http.ResponseWriter loses all functionality such as Pusher, Hijacker, Flusher, ...\n// Minification might be slower than just sending the original file! Caching is advised.\nfunc (m *M) ResponseWriter(w http.ResponseWriter, r *http.Request) *responseWriter {\n\tmediatype := mime.TypeByExtension(path.Ext(r.RequestURI))\n\treturn &responseWriter{w, nil, m, mediatype}\n}\n\n// Middleware provides a middleware function that minifies content on the fly by intercepting writes to http.ResponseWriter.\n// http.ResponseWriter loses all functionality such as Pusher, Hijacker, Flusher, ...\n// Minification might be slower than just sending the original file! Caching is advised.\nfunc (m *M) Middleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tmw := m.ResponseWriter(w, r)\n\t\tnext.ServeHTTP(mw, r)\n\t\tmw.Close()\n\t})\n}\n\n// MiddlewareWithError provides a middleware function that minifies content on the fly by intercepting writes to http.ResponseWriter. The error function allows handling minification errors.\n// http.ResponseWriter loses all functionality such as Pusher, Hijacker, Flusher, ...\n// Minification might be slower than just sending the original file! Caching is advised.\nfunc (m *M) MiddlewareWithError(next http.Handler, errorFunc func(w http.ResponseWriter, r *http.Request, err error)) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tmw := m.ResponseWriter(w, r)\n\t\tnext.ServeHTTP(mw, r)\n\t\tif err := mw.Close(); err != nil {\n\t\t\terrorFunc(w, r, err)\n\t\t\treturn\n\t\t}\n\t})\n}\n"
        },
        {
          "name": "minify",
          "type": "tree",
          "content": null
        },
        {
          "name": "minify_test.go",
          "type": "blob",
          "size": 10.3193359375,
          "content": "package minify\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"regexp\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/tdewolff/test\"\n)\n\nvar errDummy = errors.New(\"dummy error\")\n\n// from os/exec/exec_test.go\nfunc helperCommand(t *testing.T, s ...string) *exec.Cmd {\n\tcs := []string{\"-test.run=TestHelperProcess\", \"--\"}\n\tcs = append(cs, s...)\n\tcmd := exec.Command(os.Args[0], cs...)\n\tcmd.Env = []string{\"GO_WANT_HELPER_PROCESS=1\", \"GOCOVERDIR=.\"}\n\treturn cmd\n}\n\n////////////////////////////////////////////////////////////////\n\nvar m *M\n\nfunc init() {\n\tm = New()\n\tm.AddFunc(\"dummy/copy\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t_, _ = io.Copy(w, r)\n\t\treturn nil\n\t})\n\tm.AddFunc(\"dummy/nil\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\treturn nil\n\t})\n\tm.AddFunc(\"dummy/err\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\treturn errDummy\n\t})\n\tm.AddFunc(\"dummy/charset\", func(m *M, w io.Writer, r io.Reader, params map[string]string) error {\n\t\t_, _ = w.Write([]byte(params[\"charset\"]))\n\t\treturn nil\n\t})\n\tm.AddFunc(\"dummy/params\", func(m *M, w io.Writer, r io.Reader, params map[string]string) error {\n\t\treturn m.Minify(params[\"type\"]+\"/\"+params[\"sub\"], w, r)\n\t})\n\tm.AddFunc(\"type/sub\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t_, _ = w.Write([]byte(\"type/sub\"))\n\t\treturn nil\n\t})\n\tm.AddFuncRegexp(regexp.MustCompile(\"^type/.+$\"), func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t_, _ = w.Write([]byte(\"type/*\"))\n\t\treturn nil\n\t})\n\tm.AddFuncRegexp(regexp.MustCompile(\"^.+/.+$\"), func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t_, _ = w.Write([]byte(\"*/*\"))\n\t\treturn nil\n\t})\n}\n\nfunc TestMinify(t *testing.T) {\n\ttest.T(t, m.Minify(\"?\", nil, nil), ErrNotExist, \"minifier doesn't exist\")\n\ttest.Error(t, m.Minify(\"dummy/nil\", nil, nil))\n\ttest.T(t, m.Minify(\"dummy/err\", nil, nil), errDummy)\n\n\tb := []byte(\"test\")\n\tout, err := m.Bytes(\"dummy/nil\", b)\n\ttest.Error(t, err)\n\ttest.Bytes(t, out, []byte{}, \"dummy/nil returns empty byte slice\")\n\tout, err = m.Bytes(\"?\", b)\n\ttest.T(t, err, ErrNotExist, \"minifier doesn't exist\")\n\ttest.Bytes(t, out, b, \"return input when minifier doesn't exist\")\n\n\ts := \"test\"\n\tout2, err := m.String(\"dummy/nil\", s)\n\ttest.Error(t, err)\n\ttest.String(t, out2, \"\", \"dummy/nil returns empty string\")\n\tout2, err = m.String(\"?\", s)\n\ttest.T(t, err, ErrNotExist, \"minifier doesn't exist\")\n\ttest.String(t, out2, s, \"return input when minifier doesn't exist\")\n}\n\ntype DummyMinifier struct{}\n\nfunc (d *DummyMinifier) Minify(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\treturn errDummy\n}\n\nfunc TestAdd(t *testing.T) {\n\tmAdd := New()\n\tr := bytes.NewBufferString(\"test\")\n\tw := &bytes.Buffer{}\n\tmAdd.Add(\"dummy/err\", &DummyMinifier{})\n\ttest.T(t, mAdd.Minify(\"dummy/err\", nil, nil), errDummy)\n\n\tmAdd.AddRegexp(regexp.MustCompile(\"err1$\"), &DummyMinifier{})\n\ttest.T(t, mAdd.Minify(\"dummy/err1\", nil, nil), errDummy)\n\n\tmAdd.AddFunc(\"dummy/err\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\treturn errDummy\n\t})\n\ttest.T(t, mAdd.Minify(\"dummy/err\", nil, nil), errDummy)\n\n\tmAdd.AddFuncRegexp(regexp.MustCompile(\"err2$\"), func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\treturn errDummy\n\t})\n\ttest.T(t, mAdd.Minify(\"dummy/err2\", nil, nil), errDummy)\n\n\tmAdd.AddCmd(\"dummy/copy\", helperCommand(t, \"dummy/copy\"))\n\tmAdd.AddCmd(\"dummy/file\", helperCommand(t, \"dummy/file\", \"-in=[$in.ext]\", \"-out=$out.ext\"))\n\tmAdd.AddCmd(\"dummy/err\", helperCommand(t, \"dummy/err\"))\n\tmAdd.AddCmdRegexp(regexp.MustCompile(\"err6$\"), helperCommand(t, \"werr6\"))\n\n\ttest.Error(t, mAdd.Minify(\"dummy/copy\", w, r))\n\ttest.String(t, w.String(), \"test\")\n\tw.Reset()\n\n\tr = bytes.NewBufferString(\"test\")\n\ttest.Error(t, mAdd.Minify(\"dummy/file\", w, r))\n\ttest.String(t, w.String(), \"test\")\n\tw.Reset()\n\n\ts := mAdd.Minify(\"dummy/err\", w, r).Error()\n\ttest.String(t, s[len(s)-5:], \"error\")\n\n\ts = mAdd.Minify(\"werr6\", w, r).Error()\n\ttest.String(t, s[len(s)-13:], \"exit status 2\")\n\n\ts = mAdd.Minify(\"stderr6\", w, r).Error()\n\ttest.String(t, s[len(s)-13:], \"exit status 2\")\n}\n\nfunc TestMatch(t *testing.T) {\n\tpattern, params, _ := m.Match(\"dummy/copy; a=b\")\n\ttest.String(t, pattern, \"dummy/copy\")\n\ttest.String(t, params[\"a\"], \"b\")\n\n\tpattern, _, _ = m.Match(\"type/foobar\")\n\ttest.String(t, pattern, \"^type/.+$\")\n\n\t_, _, minifier := m.Match(\"dummy/\")\n\ttest.That(t, minifier == nil)\n}\n\nfunc TestWildcard(t *testing.T) {\n\tmimetypeTests := []struct {\n\t\tmimetype string\n\t\texpected string\n\t}{\n\t\t{\"type/sub\", \"type/sub\"},\n\t\t{\"type/*\", \"type/*\"},\n\t\t{\"*/*\", \"*/*\"},\n\t\t{\"type/sub2\", \"type/*\"},\n\t\t{\"type2/sub\", \"*/*\"},\n\t\t{\"dummy/charset;charset=UTF-8\", \"UTF-8\"},\n\t\t{\"dummy/charset; charset = UTF-8 \", \"UTF-8\"},\n\t\t{\"dummy/params;type=type;sub=two2\", \"type/*\"},\n\t}\n\n\tfor _, tt := range mimetypeTests {\n\t\tr := bytes.NewBufferString(\"\")\n\t\tw := &bytes.Buffer{}\n\t\terr := m.Minify(tt.mimetype, w, r)\n\t\ttest.Error(t, err)\n\t\ttest.Minify(t, tt.mimetype, nil, w.String(), tt.expected)\n\t}\n}\n\nfunc TestReader(t *testing.T) {\n\tm := New()\n\tm.AddFunc(\"dummy/dummy\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t_, err := io.Copy(w, r)\n\t\treturn err\n\t})\n\tm.AddFunc(\"dummy/err\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\treturn errDummy\n\t})\n\n\tw := &bytes.Buffer{}\n\tr := bytes.NewBufferString(\"test\")\n\tmr := m.Reader(\"dummy/dummy\", r)\n\t_, err := io.Copy(w, mr)\n\ttest.Error(t, err)\n\ttest.String(t, w.String(), \"test\", \"equal input after dummy minify reader\")\n\n\tmr = m.Reader(\"dummy/err\", r)\n\t_, err = io.Copy(w, mr)\n\ttest.T(t, err, errDummy)\n}\n\nfunc TestWriter(t *testing.T) {\n\tm := New()\n\tm.AddFunc(\"dummy/dummy\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t_, err := io.Copy(w, r)\n\t\treturn err\n\t})\n\tm.AddFunc(\"dummy/err\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\treturn errDummy\n\t})\n\tm.AddFunc(\"dummy/late-err\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t_, _ = io.ReadAll(r)\n\t\treturn errDummy\n\t})\n\n\tw := &bytes.Buffer{}\n\tmw := m.Writer(\"dummy/dummy\", w)\n\t_, _ = mw.Write([]byte(\"test\"))\n\ttest.Error(t, mw.Close())\n\ttest.String(t, w.String(), \"test\", \"equal input after dummy minify writer\")\n\n\tw = &bytes.Buffer{}\n\tmw = m.Writer(\"dummy/err\", w)\n\t_, _ = mw.Write([]byte(\"test\"))\n\ttest.T(t, mw.Close(), errDummy)\n\ttest.String(t, w.String(), \"\")\n\n\tw = &bytes.Buffer{}\n\tmw = m.Writer(\"dummy/late-err\", w)\n\t_, _ = mw.Write([]byte(\"test\"))\n\ttest.T(t, mw.Close(), errDummy)\n\ttest.String(t, w.String(), \"\")\n}\n\ntype testResponseWriter struct {\n\twriter io.Writer\n\theader http.Header\n}\n\nfunc (w *testResponseWriter) Header() http.Header {\n\treturn w.header\n}\n\nfunc (w *testResponseWriter) WriteHeader(_ int) {}\n\nfunc (w *testResponseWriter) Write(b []byte) (int, error) {\n\treturn w.writer.Write(b)\n}\n\nfunc TestResponseWriter(t *testing.T) {\n\tm := New()\n\tm.AddFunc(\"text/html\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t_, _ = io.ReadAll(r)\n\t\t_, err := w.Write([]byte(\"minified\"))\n\t\treturn err\n\t})\n\n\t// use file extension\n\tb := &bytes.Buffer{}\n\tw := &testResponseWriter{b, http.Header{}}\n\tr := &http.Request{RequestURI: \"/index.html\"}\n\tmw := m.ResponseWriter(w, r)\n\t_, err := mw.Write([]byte(\"input\"))\n\ttest.Error(t, mw.Close())\n\ttest.String(t, b.String(), \"minified\")\n\t_, err = mw.Write([]byte(\"test\"))\n\ttest.T(t, err, io.ErrClosedPipe)\n\n\t// use Content-Type header\n\tb = &bytes.Buffer{}\n\tw = &testResponseWriter{b, http.Header{}}\n\tr = &http.Request{RequestURI: \"/index\"}\n\tmw = m.ResponseWriter(w, r)\n\tmw.Header().Add(\"Content-Type\", \"text/html\")\n\t_, _ = mw.Write([]byte(\"input\"))\n\tmw.WriteHeader(http.StatusForbidden)\n\ttest.Error(t, mw.Close())\n\ttest.String(t, b.String(), \"minified\")\n\n\t// don't minify\n\tb = &bytes.Buffer{}\n\tw = &testResponseWriter{b, http.Header{}}\n\tr = &http.Request{RequestURI: \"/image.png\"}\n\tmw = m.ResponseWriter(w, r)\n\t_, _ = mw.Write([]byte(\"input\"))\n\ttest.Error(t, mw.Close())\n\ttest.String(t, b.String(), \"input\")\n}\n\nfunc TestMiddleware(t *testing.T) {\n\tm := New()\n\tm.AddFunc(\"text/html\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t_, err := io.Copy(w, r)\n\t\treturn err\n\t})\n\n\tb := &bytes.Buffer{}\n\tw := &testResponseWriter{b, http.Header{}}\n\tr := &http.Request{RequestURI: \"/index.html\"}\n\tm.Middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t_, _ = w.Write([]byte(\"test\"))\n\t})).ServeHTTP(w, r)\n\ttest.String(t, b.String(), \"test\", \"equal input after dummy minify middleware\")\n}\n\nfunc TestHelperProcess(*testing.T) {\n\tif os.Getenv(\"GO_WANT_HELPER_PROCESS\") != \"1\" {\n\t\treturn\n\t}\n\targs := os.Args\n\tfor len(args) > 0 {\n\t\tif args[0] == \"--\" {\n\t\t\targs = args[1:]\n\t\t\tbreak\n\t\t}\n\t\targs = args[1:]\n\t}\n\tif len(args) == 0 {\n\t\tfmt.Fprintf(os.Stderr, \"No command\\n\")\n\t\tos.Exit(2)\n\t}\n\n\tswitch args[0] {\n\tcase \"dummy/copy\":\n\t\t_, _ = io.Copy(os.Stdout, os.Stdin)\n\tcase \"dummy/file\":\n\t\t// extract filenames\n\t\tin := args[1][5:]\n\t\tin = in[:len(in)-1]\n\t\tout := args[2][5:]\n\n\t\tw, err := os.Create(out)\n\t\tif err != nil {\n\t\t\tos.Exit(1)\n\t\t\treturn\n\t\t}\n\n\t\tb, err := os.ReadFile(in)\n\t\tif err != nil {\n\t\t\t_, _ = w.WriteString(err.Error())\n\t\t\t_ = w.Close()\n\t\t\tos.Exit(1)\n\t\t\treturn\n\t\t}\n\t\t_, _ = w.Write(b)\n\t\t_ = w.Close()\n\tcase \"dummy/err\":\n\t\tfmt.Fprint(os.Stderr, \"error\")\n\t\tos.Exit(1)\n\tdefault:\n\t\tos.Exit(2)\n\t}\n\tos.Exit(0)\n}\n\n////////////////////////////////////////////////////////////////\n\nfunc ExampleM_Minify_custom() {\n\tm := New()\n\tm.AddFunc(\"text/plain\", func(m *M, w io.Writer, r io.Reader, _ map[string]string) error {\n\t\t// remove all newlines and spaces\n\t\trb := bufio.NewReader(r)\n\t\tfor {\n\t\t\tline, err := rb.ReadString('\\n')\n\t\t\tif err != nil && err != io.EOF {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif _, errws := io.WriteString(w, strings.ReplaceAll(line, \" \", \"\")); errws != nil {\n\t\t\t\treturn errws\n\t\t\t}\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\n\tin := \"Because my coffee was too cold, I heated it in the microwave.\"\n\tout, err := m.String(\"text/plain\", in)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(out)\n\t// Output: Becausemycoffeewastoocold,Iheateditinthemicrowave.\n}\n\nfunc ExampleM_Reader() {\n\tb := bytes.NewReader([]byte(\"input\"))\n\n\tm := New()\n\t// add minfiers\n\n\tr := m.Reader(\"mime/type\", b)\n\tif _, err := io.Copy(os.Stdout, r); err != nil {\n\t\tif _, err := io.Copy(os.Stdout, b); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n\nfunc ExampleM_Writer() {\n\tm := New()\n\t// add minfiers\n\n\tw := m.Writer(\"mime/type\", os.Stdout)\n\tif _, err := w.Write([]byte(\"input\")); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := w.Close(); err != nil {\n\t\tpanic(err)\n\t}\n}\n"
        },
        {
          "name": "svg",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "xml",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}