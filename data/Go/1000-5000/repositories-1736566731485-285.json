{
  "metadata": {
    "timestamp": 1736566731485,
    "page": 285,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hacdias/webdav",
      "stars": 3763,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "dist/\nwebdav"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 0.9150390625,
          "content": "version: 2\n\nbefore:\n  hooks:\n    - go mod tidy\n    - go mod download\n\nbuilds:\n  - main: main.go\n    binary: webdav\n    env:\n      - CGO_ENABLED=0\n    flags:\n      - '-trimpath'\n    ldflags:\n      - '-s -w -X github.com/hacdias/webdav/v5/cmd.version={{.Version}}'\n    goos:\n      - darwin\n      - linux\n      - windows\n      - freebsd\n      - netbsd\n      - openbsd\n    goarch:\n      - amd64\n      - '386'\n      - arm\n      - arm64\n      - mips\n      - mipsle\n      - mips64\n      - mips64le\n    goarm:\n      - '5'\n      - '6'\n      - '7'\n    ignore:\n      - goos: openbsd\n        goarch: arm\n        goarm: 6\n      - goos: freebsd\n        goarch: arm\n        goarm: 6\n\narchives:\n  - name_template: \"{{.Os}}-{{.Arch}}{{if .Arm}}v{{.Arm}}{{end}}-{{ .ProjectName }}\"\n    format: tar.gz\n    format_overrides:\n      - goos: windows\n        format: zip\n\nrelease:\n  github:\n    owner: hacdias\n    name: webdav\n  draft: false\n  prerelease: auto\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4677734375,
          "content": "FROM golang:1.23-alpine3.20 AS build\n\nARG VERSION=\"untracked\"\n\nRUN apk --update add ca-certificates\n\nWORKDIR /webdav/\n\nCOPY ./go.mod ./\nCOPY ./go.sum ./\nRUN go mod download\n\nCOPY . /webdav/\nRUN go build -o main -trimpath -ldflags=\"-s -w -X 'github.com/hacdias/webdav/v5/cmd.version=$VERSION'\" .\n\nFROM scratch\n\nCOPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=build /webdav/main /bin/webdav\n\nEXPOSE 6065\n\nENTRYPOINT [ \"webdav\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0712890625,
          "content": "MIT License\n\nCopyright (c) 2017-present Henrique Dias <hacdias@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.9892578125,
          "content": "# webdav\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/hacdias/webdav?style=flat-square)](https://goreportcard.com/report/hacdias/webdav)\n[![Version](https://img.shields.io/github/release/hacdias/webdav.svg?style=flat-square)](https://github.com/hacdias/webdav/releases/latest)\n[![Docker Pulls](https://img.shields.io/docker/pulls/hacdias/webdav?style=flat-square)](https://hub.docker.com/r/hacdias/webdav)\n\nA simple and standalone [WebDAV](https://en.wikipedia.org/wiki/WebDAV) server.\n\n## Install\n\nFor a manual install, please refer to the [releases](https://github.com/hacdias/webdav/releases) page and download the correct binary for your system. Alternatively, you can build or install it from source using the Go toolchain. You can either clone the repository and execute `go build`, or directly install it, using:\n\n```\ngo install github.com/hacdias/webdav/v5@latest\n```\n\n### Docker\n\nDocker images are provided on both [GitHub's registry](https://github.com/hacdias/webdav/pkgs/container/webdav) and [Docker Hub](https://hub.docker.com/r/hacdias/webdav). You can pull the images using one of the following two commands. Note that this commands pull the latest released version. You can use specific tags to pin specific versions, or use `main` for the development branch.\n\n```bash\n# GitHub Registry\ndocker pull ghcr.io/hacdias/webdav:latest\n\n# Docker Hub\ndocker pull hacdias/webdav:latest\n```\n\n## Usage\n\nFor usage information regarding the CLI, run `webdav --help`.\n\n### Docker\n\nTo use with Docker, you need to provide a configuration file and mount the data directories. For example, let's take the following configuration file that simply sets the port to `6060` and the directory to `/data`.\n\n```yaml\nport: 6060\ndirectory: /data\n```\n\nYou can now run with the following Docker command, where you mount the configuration file inside the container, and the data directory too, as well as forwarding the port 6060. You will need to change this to match your own configuration.\n\n```bash\ndocker run \\\n  -p 6060:6060 \\\n  -v $(pwd)/config.yml:/config.yml:ro \\\n  -v $(pwd)/data:/data \\\n  ghcr.io/hacdias/webdav -c /config.yml\n```\n\nIf you are using [fail2ban](#fail2ban-setup), it would be helpful to add the parameters listed below. They will assist in analyzing the log.\n```bash\n--log-driver journald \\\n--name webdav \\\n```\n\n## Configuration\n\nThe configuration can be provided as a YAML, JSON or TOML file. Below is an example of a YAML configuration file with all the options available, as well as what they mean.\n\n```yaml\naddress: 0.0.0.0\nport: 6065\n\n# TLS-related settings if you want to enable TLS directly.\ntls: false\ncert: cert.pem\nkey: key.pem\n\n# Prefix to apply to the WebDAV path-ing. Default is '/'.\nprefix: /\n\n# Enable or disable debug logging. Default is 'false'.\ndebug: false\n\n# Disable sniffing the files to detect their content type. Default is 'false'.\nnoSniff: false\n\n# Whether the server runs behind a trusted proxy or not. When this is true,\n# the header X-Forwarded-For will be used for logging the remote addresses\n# of logging attempts (if available).\nbehindProxy: false\n\n# The directory that will be able to be accessed by the users when connecting.\n# This directory will be used by users unless they have their own 'directory' defined.\n# Default is '.' (current directory).\ndirectory: .\n\n# The default permissions for users. This is a case insensitive option. Possible\n# permissions: C (Create), R (Read), U (Update), D (Delete). You can combine multiple\n# permissions. For example, to allow to read and create, set \"RC\". Default is \"R\".\npermissions: R\n\n# The default permissions rules for users. Default is none. Rules are applied\n# from last to first, that is, the first rule that matches the request, starting\n# from the end, will be applied to the request.\nrules: []\n\n# The behavior of redefining the rules for users. It can be:\n# - overwrite: when a user has rules defined, these will overwrite any global\n#   rules already defined. That is, the global rules are not applicable to the\n#   user.\n# - append: when a user has rules defined, these will be appended to the global\n#   rules already defined. That is, for this user, their own specific rules will\n#   be checked first, and then the global rules.\n# Default is 'overwrite'.\nrulesBehavior: overwrite\n\n# Logging configuration\nlog:\n  # Logging format ('console', 'json'). Default is 'console'.\n  format: console\n  # Enable or disable colors. Default is 'true'. Only applied if format is 'console'.\n  colors: true\n  # Logging outputs. You can have more than one output. Default is only 'stderr'.\n  outputs:\n  - stderr\n\n# CORS configuration\ncors:\n  # Whether or not CORS configuration should be applied. Default is 'false'.\n  enabled: true\n  credentials: true\n  allowed_headers:\n    - Depth\n  allowed_hosts:\n    - http://localhost:8080\n  allowed_methods:\n    - GET\n  exposed_headers:\n    - Content-Length\n    - Content-Range\n\n# The list of users. If the list is empty, then there will be no authentication.\n# Otherwise, basic authentication will automatically be configured.\n#\n# If you're delegating the authentication to a different service, you can proxy\n# the username using basic authentication, and then disable webdav's password\n# check using the option:\n#\n# noPassword: true\nusers:\n  # Example 'admin' user with plaintext password.\n  - username: admin\n    password: admin\n  # Example 'john' user with bcrypt encrypted password, with custom directory.\n  # You can generate a bcrypt-encrypted password by using the 'webdav bcrypt'\n  # command lint utility.\n  - username: john\n    password: \"{bcrypt}$2y$10$zEP6oofmXFeHaeMfBNLnP.DO8m.H.Mwhd24/TOX2MWLxAExXi4qgi\"\n    directory: /another/path\n  # Example user whose details will be picked up from the environment.\n  - username: \"{env}ENV_USERNAME\"\n    password: \"{env}ENV_PASSWORD\"\n  - username: basic\n    password: basic\n    # Override default permissions.\n    permissions: CRUD\n    rules:\n      # With this rule, the user CANNOT access /some/files.\n      - path: /some/file\n        permissions: none\n      # With this rule, the user CAN create, read, update and delete within /public/access.\n      - path: /public/access/\n        permissions: CRUD\n      # With this rule, the user CAN read and update all files ending with .js. It uses\n      # a regular expression.\n      - regex: \"^.+.js$\"\n        permissions: RU\n```\n\n### CORS\n\nThe `allowed_*` properties are optional, the default value for each of them will be `*`. `exposed_headers` is optional as well, but is not set if not defined. Setting `credentials` to `true` will allow you to:\n\n1. Use `withCredentials = true` in javascript.\n2. Use the `username:password@host` syntax.\n\n## Caveats\n\n### Reverse Proxy Service\n\nWhen using a reverse proxy implementation, like Caddy, Nginx, or Apache, note that you need to forward the correct headers in order to avoid 502 errors. Here's a Nginx configuration example:\n\n```nginx\nlocation / {\n  proxy_pass http://127.0.0.1:8080;\n  proxy_set_header X-Real-IP $remote_addr;\n  proxy_set_header REMOTE-HOST $remote_addr;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_set_header Host $host;\n  proxy_redirect off;\n}\n```\n\n## Examples\n\n### Systemd\n\nExample configuration of a [`systemd`](https://en.wikipedia.org/wiki/Systemd) service:\n\n```conf\n[Unit]\nDescription=WebDAV\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nExecStart=/usr/bin/webdav --config /opt/webdav.yml\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n### Fail2Ban Setup\n\nTo add security against brute-force attacks in your WebDAV server, you can configure Fail2Ban to ban IP addresses after a set number of failed login attempts.\n\n#### Filter Configuration\n\nCreate a new filter rule under `filter.d/webdav.conf`:\n\n```ini\n[INCLUDES]\nbefore = common.conf\n\n[Definition]\n# Failregex to match \"invalid password\" and extract remote_address only\nfailregex = ^.*invalid password\\s*\\{.*\"remote_address\":\\s*\"<HOST>:\\d+\"\\s*\\}\n            ^.*invalid username\\s*\\{.*\"remote_address\":\\s*\"<HOST>:\\d+\"\\s*\\}\n\nignoreregex =\n```\n\nThis configuration will capture invalid login attempts and extract the IP address to ban.\n\n#### Jail Configuration\n\nIn `jail.d/webdav.conf`, define the jail that monitors your WebDAV log for failed login attempts:\n\n```ini\n[webdav]\n\nenabled = true\nport = [your_port]\nfilter = webdav\nlogpath = [your_log_path]\nbanaction = iptables-allports\nignoreself = false\n```\n\n- Replace `[your_port]` with the port your WebDAV server is running on.\n- Replace `[your_log_path]` with the path to your WebDAV log file.\n\nIf you use it with Docker and `--log-driver journald`, replace `logpath` with `journalmatch = CONTAINER_NAME=[your_container_name]`\n\n#### Final Steps\n\n1. Restart Fail2Ban to apply these configurations:\n\n   ```bash\n   sudo systemctl restart fail2ban\n   ```\n\n2. Verify that Fail2Ban is running and monitoring your WebDAV logs:\n\n   ```bash\n   sudo fail2ban-client status webdav\n   ```\n\nWith this setup, Fail2Ban will automatically block IP addresses that exceed the allowed number of failed login attempts.\n\n## Contributing\n\nFeel free to open an issue or a pull request.\n\n## License\n\n[MIT License](LICENSE) © [Henrique Dias](https://hacdias.com)\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.4150390625,
          "content": "module github.com/hacdias/webdav/v5\n\ngo 1.23\n\nrequire (\n\tgithub.com/coreos/go-systemd/v22 v22.5.0\n\tgithub.com/go-viper/mapstructure/v2 v2.2.1\n\tgithub.com/rs/cors v1.11.1\n\tgithub.com/spf13/cobra v1.8.1\n\tgithub.com/spf13/pflag v1.0.5\n\tgithub.com/spf13/viper v1.19.0\n\tgithub.com/stretchr/testify v1.9.0\n\tgithub.com/studio-b12/gowebdav v0.9.0\n\tgo.uber.org/zap v1.27.0\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/net v0.33.0\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/fsnotify/fsnotify v1.8.0 // indirect\n\tgithub.com/hashicorp/hcl v1.0.0 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/magiconair/properties v1.8.9 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.2.3 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/sagikazarmark/locafero v0.6.0 // indirect\n\tgithub.com/sagikazarmark/slog-shim v0.1.0 // indirect\n\tgithub.com/sourcegraph/conc v0.3.0 // indirect\n\tgithub.com/spf13/afero v1.11.0 // indirect\n\tgithub.com/spf13/cast v1.7.1 // indirect\n\tgithub.com/subosito/gotenv v1.6.0 // indirect\n\tgo.uber.org/multierr v1.11.0 // indirect\n\tgolang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgopkg.in/ini.v1 v1.67.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 6.9228515625,
          "content": "github.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=\ngithub.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\ngithub.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=\ngithub.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=\ngithub.com/go-viper/mapstructure/v2 v2.2.1 h1:ZAaOCxANMuZx5RCeg0mBdEZk7DZasvvZIxtHqx8aGss=\ngithub.com/go-viper/mapstructure/v2 v2.2.1/go.mod h1:oJDH3BJKyqBA2TXFhDsKDGDTlndYOZ6rGS0BRZIxGhM=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/magiconair/properties v1.8.9 h1:nWcCbLq1N2v/cpNsy5WvQ37Fb+YElfq20WJ/a8RkpQM=\ngithub.com/magiconair/properties v1.8.9/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=\ngithub.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/rs/cors v1.11.1 h1:eU3gRzXLRK57F5rKMGMZURNdIG4EoAmX8k94r9wXWHA=\ngithub.com/rs/cors v1.11.1/go.mod h1:XyqrcTp5zjWr1wsJ8PIRZssZ8b/WMcMf71DJnit4EMU=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3N51bwOk=\ngithub.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=\ngithub.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=\ngithub.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=\ngithub.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=\ngithub.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=\ngithub.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=\ngithub.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=\ngithub.com/spf13/cast v1.7.1 h1:cuNEagBQEHWN1FnbGEjCXL2szYEXqfJPbP2HNUaca9Y=\ngithub.com/spf13/cast v1.7.1/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v1.19.0 h1:RWq5SEjt8o25SROyN3z2OrDB9l7RPd3lwTWU8EcEdcI=\ngithub.com/spf13/viper v1.19.0/go.mod h1:GQUN9bilAbhU/jgc1bKs99f/suXKeUMct8Adx5+Ntkg=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/studio-b12/gowebdav v0.9.0 h1:1j1sc9gQnNxbXXM4M/CebPOX4aXYtr7MojAVcN4dHjU=\ngithub.com/studio-b12/gowebdav v0.9.0/go.mod h1:bHA7t77X/QFExdeAnDzK6vKM34kEZAcE1OX4MfiwjkE=\ngithub.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=\ngithub.com/subosito/gotenv v1.6.0/go.mod h1:Dk4QP5c2W3ibzajGcXpNraDfq2IrhjMIvMSWPKKo0FU=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngo.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=\ngo.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=\ngo.uber.org/zap v1.27.0 h1:aJMhYGrd5QSmlpLMr2MftRKl7t8J8PTZPA732ud/XR8=\ngo.uber.org/zap v1.27.0/go.mod h1:GB2qFLM7cTU87MWRP2mPIjqfIDnGu+VIO4V/SdhGo2E=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67 h1:1UoZQm6f0P/ZO0w1Ri+f+ifG/gXhegadRdwBIXEFWDo=\ngolang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67/go.mod h1:qj5a5QZpwLU2NLQudwIN5koi3beDhSAlJwa67PuM98c=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.0908203125,
          "content": "package main\n\nimport (\n\t\"github.com/hacdias/webdav/v5/cmd\"\n)\n\nfunc main() {\n\tcmd.Execute()\n}\n"
        }
      ]
    }
  ]
}