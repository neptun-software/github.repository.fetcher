{
  "metadata": {
    "timestamp": 1736567330558,
    "page": 940,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "goreleaser/nfpm",
      "stars": 2218,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2255859375,
          "content": "root = true\n\n[*]\nend_of_line = lf\nindent_size = 4\nindent_style = tab\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ninsert_final_newline = true\ncharset = utf-8\n\n[*.{md,yml,yaml}]\nindent_size = 2\nindent_style = space\n\n\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.009765625,
          "content": "use flake\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.171875,
          "content": "*\t\ttext eol=lf\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n*.ico binary\nwww/docs/static/schema.json linguist-generated=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.216796875,
          "content": "vendor\n*.rpm\n*.deb\n!dummy.deb\n*.apk\ncoverage.txt\ndist\nnfpm.yaml\n.DS_Store\nbin\ncoverage.out\n/nfpm\nwww/site\n.idea/\ntestdata/acceptance/tmp/\ncompletions/\n.task/\ncosign.*\nmanpages\noutput.json\n!acceptance_test.go\n.direnv/\ntmp/\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.5751953125,
          "content": "run:\n  go: \"1.20\"\n  timeout: 5m\nlinters:\n  enable:\n    - thelper\n    - gofumpt\n    - tparallel\n    - unconvert\n    - unparam\n    - wastedassign\n    - revive\n    - forbidigo\n    - tagliatelle\n    - misspell\n    - depguard\n    - testifylint\nlinters-settings:\n  forbidigo:\n    forbid:\n      - 'ioutil\\.*'\n  tagliatelle:\n    case:\n      use-field-name: false\n      rules:\n        yaml: snake\n        json: snake\n  depguard:\n    rules:\n      main:\n        deny:\n          - pkg: \"github.com/pkg/errors\"\n            desc: \"use stdlib instead\"\n  testifylint:\n    disable:\n      - encoded-compare\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 10.35546875,
          "content": "# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json\nversion: 2\nenv:\n  - GO111MODULE=on\n\nbefore:\n  hooks:\n    - go mod tidy\n    - ./scripts/completions.sh\n    - ./scripts/manpages.sh\n\nmetadata:\n  mod_timestamp: \"{{ .CommitTimestamp }}\"\n  description: nFPM is a simple, 0-dependencies, deb, rpm, and apk packager.\n  full_description: |-\n    Simple, 0-dependencies, deb, rpm, and apk packager.\n    nFPM (not FPM) is configurable via YAML and does not need any\n    packaging software installed.\n  homepage: https://nfpm.goreleaser.com\n  license: MIT\n  maintainers:\n    - Carlos Alexandro Becker <carlos@becker.software>\n\ngomod:\n  proxy: true\n\nbuilds:\n  - main: ./cmd/nfpm\n    env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - darwin\n      - windows\n    goarch:\n      - amd64\n      - arm64\n      - ppc64le\n      - s390x\n    mod_timestamp: \"{{ .CommitTimestamp }}\"\n    flags:\n      - -trimpath\n    ldflags:\n      - -s -w -X main.version={{ .Version }} -X main.commit={{ .Commit }} -X main.date={{ .CommitDate }} -X main.builtBy=goreleaser -X main.treeState={{ .IsGitDirty }}\n\ndockers:\n  - image_templates:\n      - \"goreleaser/nfpm:{{ .Tag }}-amd64\"\n      - \"ghcr.io/goreleaser/nfpm:{{ .Tag }}-amd64\"\n    dockerfile: Dockerfile\n    use: buildx\n    build_flag_templates:\n      - \"--pull\"\n      - \"--label=org.opencontainers.image.created={{.Date}}\"\n      - \"--label=org.opencontainers.image.name={{.ProjectName}}\"\n      - \"--label=org.opencontainers.image.revision={{.FullCommit}}\"\n      - \"--label=org.opencontainers.image.version={{.Version}}\"\n      - \"--label=org.opencontainers.image.source={{.GitURL}}\"\n      - \"--platform=linux/amd64\"\n  - image_templates:\n      - \"goreleaser/nfpm:{{ .Tag }}-arm64v8\"\n      - \"ghcr.io/goreleaser/nfpm:{{ .Tag }}-arm64v8\"\n    dockerfile: Dockerfile\n    use: buildx\n    build_flag_templates:\n      - \"--pull\"\n      - \"--label=org.opencontainers.image.created={{.Date}}\"\n      - \"--label=org.opencontainers.image.name={{.ProjectName}}\"\n      - \"--label=org.opencontainers.image.revision={{.FullCommit}}\"\n      - \"--label=org.opencontainers.image.version={{.Version}}\"\n      - \"--label=org.opencontainers.image.source={{.GitURL}}\"\n      - \"--platform=linux/arm64/v8\"\n    goarch: arm64\n\ndocker_manifests:\n  - name_template: \"goreleaser/nfpm:{{ .Tag }}\"\n    image_templates:\n      - \"goreleaser/nfpm:{{ .Tag }}-amd64\"\n      - \"goreleaser/nfpm:{{ .Tag }}-arm64v8\"\n  - name_template: \"ghcr.io/goreleaser/nfpm:{{ .Tag }}\"\n    image_templates:\n      - \"ghcr.io/goreleaser/nfpm:{{ .Tag }}-amd64\"\n      - \"ghcr.io/goreleaser/nfpm:{{ .Tag }}-arm64v8\"\n  - name_template: \"goreleaser/nfpm:latest\"\n    image_templates:\n      - \"goreleaser/nfpm:{{ .Tag }}-amd64\"\n      - \"goreleaser/nfpm:{{ .Tag }}-arm64v8\"\n  - name_template: \"ghcr.io/goreleaser/nfpm:latest\"\n    image_templates:\n      - \"ghcr.io/goreleaser/nfpm:{{ .Tag }}-amd64\"\n      - \"ghcr.io/goreleaser/nfpm:{{ .Tag }}-arm64v8\"\n\narchives:\n  - name_template: >-\n      {{ .ProjectName }}_\n      {{- .Version }}_\n      {{- title .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n    format_overrides:\n      - goos: windows\n        format: zip\n    files:\n      - README.md\n      - LICENSE.md\n      - completions/*\n      - manpages/*\n\nsource:\n  enabled: true\n  name_template: '{{ .ProjectName }}_{{ .Version }}_source'\n\nbrews:\n  - repository:\n      owner: goreleaser\n      name: homebrew-tap\n    directory: Formula\n    test: |\n      system \"#{bin}/nfpm -v\"\n    install: |-\n      bin.install \"nfpm\"\n      bash_completion.install \"completions/nfpm.bash\" => \"nfpm\"\n      zsh_completion.install \"completions/nfpm.zsh\" => \"_nfpm\"\n      fish_completion.install \"completions/nfpm.fish\"\n      man1.install \"manpages/nfpm.1.gz\"\n\nscoops:\n  - repository:\n      owner: goreleaser\n      name: scoop-bucket\n    directory: bucket\n\nnix:\n  - name: nfpm\n    repository:\n      owner: goreleaser\n      name: nur\n    path: pkgs/nfpm/default.nix\n    extra_install: |-\n      installManPage ./manpages/nfpm.1.gz\n      installShellCompletion ./completions/*\n\nwinget:\n  - name: nfpm\n    license_url: https://github.com/goreleaser/nfpm/blob/main/LICENSE.md\n    publisher: goreleaser\n    copyright: Becker Software LTDA\n    repository:\n      owner: goreleaser\n      name: winget-pkgs\n      branch: \"nfpm-{{.Version}}\"\n      pull_request:\n        enabled: true\n        draft: false\n        check_boxes: true\n        base:\n          owner: microsoft\n          name: winget-pkgs\n          branch: master\n\nnfpms:\n  - file_name_template: \"{{ .ConventionalFileName }}\"\n    vendor: GoReleaser\n    formats:\n      - apk\n      - deb\n      - rpm\n    bindir: /usr/bin\n    section: utils\n    contents:\n      - src: ./completions/nfpm.bash\n        dst: /usr/share/bash-completion/completions/nfpm\n        file_info:\n          mode: 0644\n      - src: ./completions/nfpm.fish\n        dst: /usr/share/fish/vendor_completions.d/nfpm.fish\n        file_info:\n          mode: 0644\n      - src: ./completions/nfpm.zsh\n        dst: /usr/share/zsh/vendor-completions/_nfpm\n        file_info:\n          mode: 0644\n      - src: ./manpages/nfpm.1.gz\n        dst: /usr/share/man/man1/nfpm.1.gz\n        file_info:\n          mode: 0644\n      - src: ./LICENSE.md\n        dst: /usr/share/doc/nfpm/copyright\n        file_info:\n          mode: 0644\n      - src: .lintian-overrides\n        dst: ./usr/share/lintian/overrides/nfpm\n        packager: deb\n        file_info:\n          mode: 0644\n\naurs:\n  - maintainers:\n      - \"Fernandez Ludovic <lfernandez dot dev at gmail dot com>\"\n      - \"Carlos Alexandro Becker <carlos at becker dot software>\"\n    private_key: \"{{ .Env.AUR_KEY }}\"\n    git_url: \"ssh://aur@aur.archlinux.org/nfpm-bin.git\"\n    package: |-\n      # bin\n      install -Dm755 \"./nfpm\" \"${pkgdir}/usr/bin/nfpm\"\n      # license\n      install -Dm644 \"./LICENSE.md\" \"${pkgdir}/usr/share/licenses/nfpm/LICENSE\"\n      # completions\n      mkdir -p \"${pkgdir}/usr/share/bash-completion/completions/\"\n      mkdir -p \"${pkgdir}/usr/share/zsh/site-functions/\"\n      mkdir -p \"${pkgdir}/usr/share/fish/vendor_completions.d/\"\n      install -Dm644 \"./completions/nfpm.bash\" \"${pkgdir}/usr/share/bash-completion/completions/nfpm\"\n      install -Dm644 \"./completions/nfpm.zsh\" \"${pkgdir}/usr/share/zsh/site-functions/_nfpm\"\n      install -Dm644 \"./completions/nfpm.fish\" \"${pkgdir}/usr/share/fish/vendor_completions.d/nfpm.fish\"\n      # man pages\n      install -Dm644 \"./manpages/nfpm.1.gz\" \"${pkgdir}/usr/share/man/man1/nfpm.1.gz\"\n\naur_sources:\n  - homepage: https://nfpm.goreleaser.com\n    description: nFPM is a simple, 0-dependencies, deb, rpm and apk packager.\n    maintainers:\n      - \"Fernandez Ludovic <lfernandez dot dev at gmail dot com>\"\n      - \"Carlos Alexandro Becker <carlos at becker dot software>\"\n    license: MIT\n    private_key: \"{{ .Env.AUR_KEY }}\"\n    git_url: \"ssh://aur@aur.archlinux.org/nfpm.git\"\n    build: |-\n      export CGO_CPPFLAGS=\"${CPPFLAGS}\"\n      export CGO_CFLAGS=\"${CFLAGS}\"\n      export CGO_CXXFLAGS=\"${CXXFLAGS}\"\n      export CGO_LDFLAGS=\"${LDFLAGS}\"\n      export GOFLAGS=\"-buildmode=pie -trimpath -mod=readonly -modcacherw\"\n      go build -ldflags=\"-w -s -buildid='' -linkmode=external -X main.version=v${pkgver}\" ./cmd/nfpm\n\n      chmod +x \"./${pkgname}\"\n    package: |-\n      # Bin\n      install -Dsm755 \"./${pkgname}\" \"${pkgdir}/usr/bin/${pkgname}\"\n\n      # License\n      install -Dm644 \"./LICENSE.md\" \"${pkgdir}/usr/share/licenses/${pkgname}/LICENSE\"\n\n      # Completions\n      mkdir -p \"${pkgdir}/usr/share/bash-completion/completions/\"\n      mkdir -p \"${pkgdir}/usr/share/zsh/site-functions/\"\n      mkdir -p \"${pkgdir}/usr/share/fish/vendor_completions.d/\"\n      ./${pkgname} completion bash > \"${pkgdir}/usr/share/bash-completion/completions/${pkgname}\"\n      ./${pkgname} completion zsh > \"${pkgdir}/usr/share/zsh/site-functions/_${pkgname}\"\n      ./${pkgname} completion fish > \"${pkgdir}/usr/share/fish/vendor_completions.d/${pkgname}.fish\"\n\nfuries:\n  - account: goreleaser\n\nsboms:\n  - artifacts: archive\n\nsigns:\n  - cmd: cosign\n    certificate: \"${artifact}.pem\"\n    output: true\n    artifacts: checksum\n    args:\n      - sign-blob\n      - \"--output-certificate=${certificate}\"\n      - \"--output-signature=${signature}\"\n      - \"${artifact}\"\n      - --yes\n\ndocker_signs:\n  - cmd: cosign\n    artifacts: manifests\n    output: true\n    args:\n      - \"sign\"\n      - \"${artifact}\"\n      - --yes\n\nchangelog:\n  sort: asc\n  use: github\n  filters:\n    exclude:\n      - \"^test:\"\n      - \"^chore\"\n      - \"merge conflict\"\n      - Merge pull request\n      - Merge remote-tracking branch\n      - Merge branch\n      - go mod tidy\n  groups:\n    - title: Dependency updates\n      regexp: '^.*?(feat|fix|chore)\\(deps\\)!?:.+$'\n      order: 300\n    - title: \"New Features\"\n      regexp: '^.*?feat(\\([[:word:]]+\\))??!?:.+$'\n      order: 100\n    - title: \"Security updates\"\n      regexp: '^.*?sec(\\([[:word:]]+\\))??!?:.+$'\n      order: 150\n    - title: \"Bug fixes\"\n      regexp: '^.*?fix(\\([[:word:]]+\\))??!?:.+$'\n      order: 200\n    - title: \"Documentation updates\"\n      regexp: ^.*?doc(\\([[:word:]]+\\))??!?:.+$\n      order: 400\n    - title: \"Build process updates\"\n      regexp: ^.*?(build|ci)(\\([[:word:]]+\\))??!?:.+$\n      order: 400\n    - title: Other work\n      order: 9999\n\nchecksum:\n  name_template: \"checksums.txt\"\n\nrelease:\n  footer: |\n    **Full Changelog**: https://github.com/goreleaser/nfpm/compare/{{ .PreviousTag }}...{{ .Tag }}\n\n    ## Helping out\n\n    This release is only possible thanks to **all** the support of **awesome people**!\n\n    Want to be one of them?\n    You can [sponsor](https://goreleaser.com/sponsors/) or [contribute with code](https://goreleaser.com/contributing).\n\n    ## Where to go next?\n\n    * nFPM is a satellite project from GoReleaser. [Check it out](https://goreleaser.com)!\n    * Find examples and commented usage of all options in our [website](https://nfpm.goreleaser.com/).\n    * Reach out on [Discord](https://discord.gg/RGEBtg8vQ6) and [Twitter](https://twitter.com/goreleaser)!\n\n    <a href=\"https://goreleaser.com\"><img src=\"https://raw.githubusercontent.com/goreleaser/artwork/master/opencollective-header.png\" with=\"100%\" alt=\"GoReleaser logo\"></a>\n\nmilestones:\n  - close: true\n\nannounce:\n  twitter:\n    enabled: false\n    message_template: \"nFPM {{ .Tag }} was just released! See what's new: https://github.com/goreleaser/nfpm/releases/tag/{{ .Tag }}\"\n  discord:\n    enabled: true\n    message_template: \"nFPM {{ .Tag }} is out! See what's new: https://github.com/goreleaser/nfpm/releases/tag/{{ .Tag }}\"\n"
        },
        {
          "name": ".lintian-overrides",
          "type": "blob",
          "size": 0.076171875,
          "content": "nfpm: statically-linked-binary\nnfpm: changelog-file-missing-in-native-package\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1552734375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at root@carlosbecker.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.6669921875,
          "content": "# Contributing\n\nBy participating to this project, you agree to abide our [code of conduct](https://github.com/goreleaser/nfpm/blob/main/CODE_OF_CONDUCT.md).\n\n## Setup your machine\n\n`nfpm` is written in [Go](https://golang.org/).\n\nPrerequisites:\n\n- [Task](https://taskfile.dev/#/installation)\n- [Go 1.21+](https://golang.org/doc/install)\n- [Docker](https://www.docker.com/)\n- `gpg` (probably already installed on your system)\n\nClone `nfpm` from source:\n\n```sh\ngit clone git@github.com:goreleaser/nfpm.git\ncd nfpm\n```\n\nInstall the build and lint dependencies:\n\n```console\ntask setup\n```\n\nA good way of making sure everything is all right is running the test suite:\n\n```console\ntask test\n```\n\nIf on the ARM tests you are seeing `standard_init_linux.go:211: exec user process caused \"exec format error\"`:\n\n```console\nsudo docker run --rm --privileged hypriot/qemu-register\n```\n\n### A note about Docker multi-arch builds\n\nIf you want to properly run the Docker tests, or run `goreleaser release\n--snapshot` locally, you might need to setup Docker for it.\nYou can do so by running:\n\n```sh\ntask docker:setup\n```\n\n## Test your change\n\nYou can create a branch for your changes and try to build from the source as you go:\n\n```console\ntask build\n```\n\nWhen you are satisfied with the changes, we suggest you run:\n\n```console\ntask ci\n```\n\nWhich runs all the linters and tests.\n\n## Create a commit\n\nCommit messages should be well formatted.\nStart your commit message with the type. Choose one of the following:\n`feat`, `fix`, `docs`, `style`, `refactor`, `perf`, `test`, `chore`, `revert`, `add`, `remove`, `move`, `bump`, `update`, `release`\n\nAfter a colon, you should give the message a title, starting with uppercase and ending without a dot.\nKeep the width of the text at 72 chars.\nThe title must be followed with a newline, then a more detailed description.\n\nPlease reference any GitHub issues on the last line of the commit message (e.g. `See #123`, `Closes #123`, `Fixes #123`).\n\nAn example:\n\n```\ndocs: Add example for --release-notes flag\n\nI added an example to the docs of the `--release-notes` flag to make\nthe usage more clear.  The example is a realistic use case and might\nhelp others to generate their own changelog.\n\nSee #284\n```\n\n## Submit a pull request\n\nPush your branch to your `nfpm` fork and open a pull request against the main branch.\n\n## Financial contributions\n\nWe also welcome financial contributions in full transparency on our [open collective](https://opencollective.com/goreleaser).\nAnyone can file an expense. If the expense makes sense for the development of the community, it will be \"merged\" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.1064453125,
          "content": "FROM alpine\nCOPY nfpm_*.apk /tmp/\nRUN apk add --allow-untrusted /tmp/nfpm_*.apk\nENTRYPOINT [\"/usr/bin/nfpm\"]\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2018 GoReleaser\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.296875,
          "content": "<p align=\"center\">\n  <img alt=\"GoReleaser Logo\" src=\"https://becker.software/nfpm.png\" height=\"140\" />\n  <p align=\"center\">\n    <a href=\"https://github.com/goreleaser/nfpm/releases/latest\"><img alt=\"Release\" src=\"https://img.shields.io/github/release/goreleaser/nfpm.svg?style=for-the-badge\"></a>\n    <a href=\"/LICENSE.md\"><img alt=\"Software License\" src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg?style=for-the-badge\"></a>\n    <a href=\"https://github.com/goreleaser/nfpm/actions?workflow=build\"><img alt=\"GitHub Actions\" src=\"https://img.shields.io/github/actions/workflow/status/goreleaser/nfpm/build.yml?style=for-the-badge&branch=main\"></a>\n    <a href=\"https://codecov.io/gh/goreleaser/nfpm\"><img alt=\"Codecov branch\" src=\"https://img.shields.io/codecov/c/github/goreleaser/nfpm/main.svg?style=for-the-badge\"></a>\n    <a href=\"https://goreportcard.com/report/github.com/goreleaser/nfpm\"><img alt=\"Go Report Card\" src=\"https://goreportcard.com/badge/github.com/goreleaser/nfpm?style=for-the-badge\"></a>\n    <a href=\"https://pkg.go.dev/github.com/goreleaser/nfpm/v2\"><img alt=\"Go Doc\" src=\"https://img.shields.io/badge/godoc-reference-blue.svg?style=for-the-badge\"></a>\n    <a href=\"https://github.com/goreleaser\"><img alt=\"Powered By: GoReleaser\" src=\"https://img.shields.io/badge/powered%20by-goreleaser-green.svg?style=for-the-badge\"></a>\n  </p>\n</p>\n\n## Why\n\nWhile [fpm][] is great, for me, it is a bummer that it depends on `ruby`, `tar`\nand other software.\n\nI wanted something that could be used as a binary and/or as a library and that\nwas really simple.\n\nSo I created nFPM: a simpler, 0-dependency, as-little-assumptions-as-possible alternative to fpm.\n\n## Getting started\n\n- [Getting Started](https://nfpm.goreleaser.com)\n- [Install](https://nfpm.goreleaser.com/install/)\n- [Usage](https://nfpm.goreleaser.com/usage/)\n- [Configuration reference](https://nfpm.goreleaser.com/configuration/)\n\n## Used and supported by\n\n<p>\n  <a href=\"https://wails.io\">\n    <img src=\"https://github.com/user-attachments/assets/e55bbae4-9551-49f1-92ea-ea9223b91fc0\" width=\"120px\" alt=\"wails icon\" />\n  </a>\n  <br/>\n  <br/>\n  <b>Build beautiful cross-platform applications using Go.</b>\n  <br/>\n</p>\n\n## Special thanks 🙏\n\nThanks to the [fpm][] authors for fpm, which inspires nfpm a lot.\n\n## Community\n\nYou have questions, need support and or just want to talk about GoReleaser/nFPM?\n\nHere are ways to get in touch with the GoReleaser community:\n\n[![Join Discord](https://img.shields.io/badge/Join_our_Discord_server-5865F2?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/RGEBtg8vQ6)\n[![Follow Twitter](https://img.shields.io/badge/follow_on_twitter-1DA1F2?style=for-the-badge&logo=twitter&logoColor=white)](https://twitter.com/goreleaser)\n[![GitHub Discussions](https://img.shields.io/badge/GITHUB_DISCUSSION-181717?style=for-the-badge&logo=github&logoColor=white)](https://github.com/goreleaser/nfpm/discussions)\n\n## Donate\n\nDonations are very much appreciated! You can donate/sponsor on the main\n[goreleaser opencollective](https://opencollective.com/goreleaser)! It's\neasy and will surely help the developers at least buy some ☕️ or 🍺!\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/goreleaser/nfpm.svg?variant=adaptive)](https://starchart.cc/goreleaser/nfpm)\n\n---\n\n[fpm]: https://github.com/jordansissel/fpm\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.236328125,
          "content": "# Security Policy\n\n## Supported Versions\n\nOnly the last stable version at any given point.\n\n## Reporting a Vulnerability\n\nVulnerabilies can be disclosed in private using GitHub advisories: https://github.com/goreleaser/nfpm/security\n\nThanks!\n"
        },
        {
          "name": "Taskfile.yml",
          "type": "blob",
          "size": 5.00390625,
          "content": "# https://taskfile.dev\n\nversion: \"3\"\n\nenv:\n  GO111MODULE: on\n  GOPROXY: https://proxy.golang.org,direct\n\ntasks:\n  dev:\n    desc: Setup git hooks\n    cmds:\n      - git config core.hooksPath .githooks\n\n  setup:\n    desc: Install dependencies\n    cmds:\n      - go mod tidy\n\n  docker:setup:\n    desc: Setup Docker for multi-arch image builds\n    cmds:\n      - docker run --privileged --rm tonistiigi/binfmt --install all\n\n  build:\n    desc: Build the binary\n    sources:\n      - ./**/*.go\n    generates:\n      - ./nfpm\n    cmds:\n      - go build ./cmd/nfpm\n\n  acceptance:windows:package:\n    desc: Build packages for testing\n    vars:\n      SRC: \"./testdata/acceptance/core.complex.yaml\"\n    cmds:\n      - mkdir -p ./dist\n      - go run ./cmd/nfpm/... pkg -f {{.SRC}} -p deb -t ./dist/foo.deb\n      - go run ./cmd/nfpm/... pkg -f {{.SRC}} -p rpm -t ./dist/foo.rpm\n      - go run ./cmd/nfpm/... pkg -f {{.SRC}} -p apk -t ./dist/foo.apk\n      - go run ./cmd/nfpm/... pkg -f {{.SRC}} -p archlinux -t ./dist/foo.pkg.tar.zst\n\n  acceptance:windows:install:\n    desc: Install packages built with package\n    cmds:\n      - docker run --rm --workdir /tmp -v $PWD/dist:/tmp fedora rpm -ivh foo.rpm\n      - docker run --rm --workdir /tmp -v $PWD/dist:/tmp ubuntu dpkg -i foo.deb\n      - docker run --rm --workdir /tmp -v $PWD/dist:/tmp archlinux pacman --noconfirm -U foo.pkg.tar.zst\n      - docker run --rm --workdir /tmp -v $PWD/dist:/tmp alpine apk add --allow-untrusted foo.apk\n\n  acceptance:pull:\n    desc: Pull acceptance test images\n    vars:\n      IMGS:\n        sh: grep FROM ./testdata/acceptance/*.dockerfile | cut -f2 -d' ' | grep -v min | grep -v test | sort | uniq\n    cmds:\n      - echo \"{{.IMGS}}\" | while read -r img; do docker pull $img; done\n\n  acceptance:\n    desc: Run acceptance tests\n    env:\n      LC_ALL: C\n    vars:\n      TEST_OPTIONS: '{{default \"\" .TEST_OPTIONS}}'\n      TEST_PATTERN: '{{default \".\" .TEST_PATTERN}}'\n    cmds:\n      - go test {{.TEST_OPTIONS}} -tags=acceptance -p 4 -failfast -race -coverpkg=./... -covermode=atomic -coverprofile=coverage.txt acceptance_test.go -run {{.TEST_PATTERN}} -timeout=1h\n\n  test:\n    desc: Run unit tests\n    env:\n      LC_ALL: C\n    vars:\n      TEST_OPTIONS: '{{default \"\" .TEST_OPTIONS}}'\n      SOURCE_FILES: '{{default \"./...\" .SOURCE_FILES}}'\n      TEST_PATTERN: '{{default \".\" .TEST_PATTERN}}'\n    cmds:\n      - go test {{.TEST_OPTIONS}} -failfast -race -coverpkg=./... -covermode=atomic -coverprofile=coverage.txt {{.SOURCE_FILES}} -run {{.TEST_PATTERN}} -timeout=5m\n\n  cover:\n    desc: Open the cover tool\n    cmds:\n      - go tool cover -html=coverage.txt\n\n  fmt:\n    desc: gofumpt all code\n    cmds:\n      - gofumpt -w -l .\n\n  ci:\n    desc: Run all CI steps\n    cmds:\n      - task: setup\n      - task: build\n      - task: test\n      - task: acceptance\n\n  default:\n    desc: Runs the default tasks\n    cmds:\n      - task: ci\n\n  schema:generate:\n    desc: Generate JSONSchema\n    cmds:\n      - go run ./cmd/nfpm/ schema -o ./www/docs/static/schema.json\n    sources:\n      - nfpm.go\n    generates:\n      - ./www/docs/static/schema.json\n\n  schema:validate:\n    desc: Validate JSONSchema\n    cmds:\n      - jv ./www/docs/static/schema.json\n    sources:\n      - ./www/docs/static/schema.json\n\n  docs:generate:\n    desc: Generate docs\n    cmds:\n      - ./scripts/cmd_docs.sh\n    sources:\n      - cmd/*.go\n      - files/*.go\n      - ./scripts/cmd_docs.sh\n      - CONTRIBUTING.md\n    generates:\n      - www/docs/cmd/*.md\n      - www/docs/contributing.md\n\n  docs:releases:\n    desc: Generate the latest file\n    cmds:\n      - ./scripts/pages/releases.sh\n    generates:\n      - www/docs/static/latest\n\n  docs:imgs:\n    desc: Download and resize images\n    cmds:\n      - wget -O www/docs/static/logo.png https://github.com/goreleaser/artwork/raw/master/goreleaserfundo.png\n      - wget -O www/docs/static/card.png \"https://og.caarlos0.dev/**GoReleaser**%20%7C%20Deliver%20Go%20binaries%20as%20fast%20and%20easily%20as%20possible.png?theme=light&md=1&fontSize=80px&images=https://github.com/goreleaser.png\"\n      - wget -O www/docs/static/avatar.png https://github.com/goreleaser.png\n      - convert www/docs/static/avatar.png -define icon:auto-resize=64,48,32,16 www/docs/static/favicon.ico\n      - convert www/docs/static/avatar.png -resize x120 www/docs/static/apple-touch-icon.png\n\n  docs:serve:\n    desc: Start documentation server\n    cmds:\n      - task: docs:generate\n      - \"mkdocs serve -f www/mkdocs.yml -a 0.0.0.0:8000\"\n\n  docs:build:\n    desc: Build docs\n    cmds:\n      - task: docs:generate\n      - \"mkdocs build -f www/mkdocs.yml\"\n\n  docs:test:\n    desc: Test docs with htmltest\n    cmds:\n      - task: docs:build\n      - \"htmltest www/site -c www/htmltest.yml\"\n\n  release:\n    desc: Create a new tag\n    vars:\n      NEXT:\n        sh: svu n\n    cmds:\n      - git tag {{.NEXT}}\n      - echo {{.NEXT}}\n      - git push origin --tags\n\n  nix:flake:update-vendor:\n    desc: update default flake package vendor hash\n    cmds:\n      - bash ./scripts/nix-update-flake.sh\n    generates:\n      - flake.nix\n    sources:\n      - flake.lock\n      - go.mod\n      - go.sum\n"
        },
        {
          "name": "acceptance_test.go",
          "type": "blob",
          "size": 11.490234375,
          "content": "//go:build acceptance\n// +build acceptance\n\npackage nfpm_test\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/goreleaser/nfpm/v2\"\n\t_ \"github.com/goreleaser/nfpm/v2/apk\"\n\t_ \"github.com/goreleaser/nfpm/v2/arch\"\n\t_ \"github.com/goreleaser/nfpm/v2/deb\"\n\t_ \"github.com/goreleaser/nfpm/v2/ipk\"\n\t_ \"github.com/goreleaser/nfpm/v2/rpm\"\n\t\"github.com/stretchr/testify/require\"\n)\n\n// nolint: gochecknoglobals\nvar formatArchs = map[string][]string{\n\t\"apk\":       {\"amd64\", \"arm64\", \"386\", \"ppc64le\", \"armv6\", \"armv7\", \"s390x\"},\n\t\"deb\":       {\"amd64\", \"arm64\", \"ppc64le\", \"armv7\", \"s390x\"},\n\t\"ipk\":       {\"x86_64\", \"aarch64_generic\"},\n\t\"rpm\":       {\"amd64\", \"arm64\", \"ppc64le\"},\n\t\"archlinux\": {\"amd64\"},\n}\n\nfunc TestCore(t *testing.T) {\n\tt.Parallel()\n\ttestNames := []string{\n\t\t\"min\",\n\t\t\"simple\",\n\t\t\"no-glob\",\n\t\t\"complex\",\n\t\t\"env-var-version\",\n\t\t\"overrides\",\n\t\t\"meta\",\n\t\t\"withchangelog\",\n\t\t\"symlink\",\n\t\t\"signed\",\n\t}\n\tfor _, name := range testNames {\n\t\tfor format, architecture := range formatArchs {\n\t\t\tfor _, arch := range architecture {\n\t\t\t\tfunc(t *testing.T, testName, testFormat, testArch string) {\n\t\t\t\t\tt.Run(fmt.Sprintf(\"%s/%s/%s\", testFormat, testArch, testName), func(t *testing.T) {\n\t\t\t\t\t\tt.Parallel()\n\t\t\t\t\t\tif testArch == \"ppc64le\" && os.Getenv(\"NO_TEST_PPC64LE\") == \"true\" {\n\t\t\t\t\t\t\tt.Skip(\"ppc64le arch not supported in pipeline\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\taccept(t, acceptParms{\n\t\t\t\t\t\t\tName:   fmt.Sprintf(\"%s_%s\", testName, testArch),\n\t\t\t\t\t\t\tConf:   fmt.Sprintf(\"core.%s.yaml\", testName),\n\t\t\t\t\t\t\tFormat: testFormat,\n\t\t\t\t\t\t\tDocker: dockerParams{\n\t\t\t\t\t\t\t\tFile:   fmt.Sprintf(\"%s.dockerfile\", testFormat),\n\t\t\t\t\t\t\t\tTarget: testName,\n\t\t\t\t\t\t\t\tArch:   testArch,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}(t, name, format, arch)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc TestUpgrade(t *testing.T) {\n\tt.Parallel()\n\ttestNames := []string{\n\t\t\"upgrade\",\n\t}\n\tfor _, name := range testNames {\n\t\tfor format, architecture := range formatArchs {\n\t\t\tfor _, arch := range architecture {\n\t\t\t\tfunc(t *testing.T, testName, testFormat, testArch string) {\n\t\t\t\t\tt.Run(fmt.Sprintf(\"%s/%s/%s\", testFormat, testArch, testName), func(t *testing.T) {\n\t\t\t\t\t\tt.Parallel()\n\t\t\t\t\t\tif testArch == \"ppc64le\" && os.Getenv(\"NO_TEST_PPC64LE\") == \"true\" {\n\t\t\t\t\t\t\tt.Skip(\"ppc64le arch not supported in pipeline\")\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarch := strings.ReplaceAll(testArch, \"armv\", \"arm/\")\n\t\t\t\t\t\toldpkg := fmt.Sprintf(\"tmp/%s_%s.v1.%s\", testName, testArch, testFormat)\n\t\t\t\t\t\ttarget := fmt.Sprintf(\"./testdata/acceptance/%s\", oldpkg)\n\t\t\t\t\t\trequire.NoError(t, os.MkdirAll(\"./testdata/acceptance/tmp\", 0o700))\n\n\t\t\t\t\t\tconfig, err := nfpm.ParseFileWithEnvMapping(fmt.Sprintf(\"./testdata/acceptance/%s.v1.yaml\", testName),\n\t\t\t\t\t\t\tfunc(s string) string {\n\t\t\t\t\t\t\t\tswitch s {\n\t\t\t\t\t\t\t\tcase \"BUILD_ARCH\":\n\t\t\t\t\t\t\t\t\treturn strings.ReplaceAll(arch, \"/\", \"\")\n\t\t\t\t\t\t\t\tcase \"SEMVER\":\n\t\t\t\t\t\t\t\t\treturn \"v1.0.0-0.1.b1+git.abcdefgh\"\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\treturn os.Getenv(s)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t)\n\t\t\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\t\t\tinfo, err := config.Get(testFormat)\n\t\t\t\t\t\trequire.NoError(t, err)\n\t\t\t\t\t\trequire.NoError(t, nfpm.Validate(info))\n\n\t\t\t\t\t\tpkg, err := nfpm.Get(testFormat)\n\t\t\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\t\t\tf, err := os.Create(target)\n\t\t\t\t\t\trequire.NoError(t, err)\n\t\t\t\t\t\tt.Cleanup(func() { require.NoError(t, f.Close()) })\n\t\t\t\t\t\tinfo.Target = target\n\t\t\t\t\t\trequire.NoError(t, pkg.Package(nfpm.WithDefaults(info), f))\n\n\t\t\t\t\t\taccept(t, acceptParms{\n\t\t\t\t\t\t\tName:   fmt.Sprintf(\"%s_%s.v2\", testName, testArch),\n\t\t\t\t\t\t\tConf:   fmt.Sprintf(\"%s.v2.yaml\", testName),\n\t\t\t\t\t\t\tFormat: testFormat,\n\t\t\t\t\t\t\tDocker: dockerParams{\n\t\t\t\t\t\t\t\tFile:      fmt.Sprintf(\"%s.dockerfile\", testFormat),\n\t\t\t\t\t\t\t\tTarget:    testName,\n\t\t\t\t\t\t\t\tArch:      testArch,\n\t\t\t\t\t\t\t\tBuildArgs: []string{fmt.Sprintf(\"oldpackage=%s\", oldpkg)},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}(t, name, format, arch)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc TestRPMCompression(t *testing.T) {\n\tt.Parallel()\n\tformat := \"rpm\"\n\tcompressFormats := []string{\"gzip\", \"xz\", \"lzma\", \"zstd\"}\n\tfor _, arch := range formatArchs[format] {\n\t\tfor _, compFormat := range compressFormats {\n\t\t\tfunc(t *testing.T, testCompFormat, testArch string) {\n\t\t\t\tt.Run(fmt.Sprintf(\"%s/%s/%s\", format, testArch, testCompFormat), func(t *testing.T) {\n\t\t\t\t\tt.Parallel()\n\t\t\t\t\tif testArch == \"ppc64le\" && os.Getenv(\"NO_TEST_PPC64LE\") == \"true\" {\n\t\t\t\t\t\tt.Skip(\"ppc64le arch not supported in pipeline\")\n\t\t\t\t\t}\n\t\t\t\t\taccept(t, acceptParms{\n\t\t\t\t\t\tName:   fmt.Sprintf(\"%s_compression_%s\", testCompFormat, testArch),\n\t\t\t\t\t\tConf:   fmt.Sprintf(\"rpm.%s.compression.yaml\", testCompFormat),\n\t\t\t\t\t\tFormat: format,\n\t\t\t\t\t\tDocker: dockerParams{\n\t\t\t\t\t\t\tFile:      fmt.Sprintf(\"%s.dockerfile\", format),\n\t\t\t\t\t\t\tTarget:    \"compression\",\n\t\t\t\t\t\t\tArch:      testArch,\n\t\t\t\t\t\t\tBuildArgs: []string{fmt.Sprintf(\"compression=%s\", testCompFormat)},\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}(t, compFormat, arch)\n\t\t}\n\t}\n}\n\nfunc TestDebCompression(t *testing.T) {\n\tt.Parallel()\n\tformat := \"deb\"\n\tcompressFormats := []string{\"gzip\", \"xz\", \"zstd\", \"none\"}\n\tfor _, arch := range formatArchs[format] {\n\t\tfor _, compFormat := range compressFormats {\n\t\t\tfunc(t *testing.T, testCompFormat, testArch string) {\n\t\t\t\tt.Run(fmt.Sprintf(\"%s/%s/%s\", format, testArch, testCompFormat), func(t *testing.T) {\n\t\t\t\t\tt.Parallel()\n\t\t\t\t\tif testArch == \"ppc64le\" && os.Getenv(\"NO_TEST_PPC64LE\") == \"true\" {\n\t\t\t\t\t\tt.Skip(\"ppc64le arch not supported in pipeline\")\n\t\t\t\t\t}\n\n\t\t\t\t\ttarget := \"compression\"\n\t\t\t\t\tif testCompFormat == \"zstd\" {\n\t\t\t\t\t\t// we can remove this exception as soon as the debian image supports zstd\n\t\t\t\t\t\ttarget = \"zstdcompression\"\n\t\t\t\t\t}\n\n\t\t\t\t\taccept(t, acceptParms{\n\t\t\t\t\t\tName:   fmt.Sprintf(\"%s_compression_%s\", testCompFormat, testArch),\n\t\t\t\t\t\tConf:   fmt.Sprintf(\"deb.%s.compression.yaml\", testCompFormat),\n\t\t\t\t\t\tFormat: format,\n\t\t\t\t\t\tDocker: dockerParams{\n\t\t\t\t\t\t\tFile:   fmt.Sprintf(\"%s.dockerfile\", format),\n\t\t\t\t\t\t\tTarget: target,\n\t\t\t\t\t\t\tArch:   testArch,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}(t, compFormat, arch)\n\t\t}\n\t}\n}\n\nfunc TestRPMSpecific(t *testing.T) {\n\tt.Parallel()\n\tformat := \"rpm\"\n\ttestNames := []string{\n\t\t\"release\",\n\t\t\"directories\",\n\t\t\"verify\",\n\t}\n\tfor _, name := range testNames {\n\t\tfor _, arch := range formatArchs[format] {\n\t\t\tfunc(t *testing.T, testName, testArch string) {\n\t\t\t\tt.Run(fmt.Sprintf(\"%s/%s/%s\", format, testArch, testName), func(t *testing.T) {\n\t\t\t\t\tt.Parallel()\n\t\t\t\t\tif testArch == \"ppc64le\" && os.Getenv(\"NO_TEST_PPC64LE\") == \"true\" {\n\t\t\t\t\t\tt.Skip(\"ppc64le arch not supported in pipeline\")\n\t\t\t\t\t}\n\t\t\t\t\taccept(t, acceptParms{\n\t\t\t\t\t\tName:   fmt.Sprintf(\"%s_%s\", testName, testArch),\n\t\t\t\t\t\tConf:   fmt.Sprintf(\"%s.%s.yaml\", format, testName),\n\t\t\t\t\t\tFormat: format,\n\t\t\t\t\t\tDocker: dockerParams{\n\t\t\t\t\t\t\tFile:   fmt.Sprintf(\"%s.dockerfile\", format),\n\t\t\t\t\t\t\tTarget: testName,\n\t\t\t\t\t\t\tArch:   testArch,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}(t, name, arch)\n\t\t}\n\t}\n}\n\nfunc TestDebSpecific(t *testing.T) {\n\tt.Parallel()\n\tformat := \"deb\"\n\ttestNames := []string{\n\t\t\"rules\",\n\t\t\"triggers\",\n\t\t\"breaks\",\n\t\t\"predepends\",\n\t}\n\tfor _, name := range testNames {\n\t\tfor _, arch := range formatArchs[format] {\n\t\t\tfunc(t *testing.T, testName, testArch string) {\n\t\t\t\tt.Run(fmt.Sprintf(\"%s/%s/%s\", format, testArch, testName), func(t *testing.T) {\n\t\t\t\t\tt.Parallel()\n\t\t\t\t\tif testArch == \"ppc64le\" && os.Getenv(\"NO_TEST_PPC64LE\") == \"true\" {\n\t\t\t\t\t\tt.Skip(\"ppc64le arch not supported in pipeline\")\n\t\t\t\t\t}\n\t\t\t\t\taccept(t, acceptParms{\n\t\t\t\t\t\tName:   fmt.Sprintf(\"%s_%s\", testName, testArch),\n\t\t\t\t\t\tConf:   fmt.Sprintf(\"%s.%s.yaml\", format, testName),\n\t\t\t\t\t\tFormat: format,\n\t\t\t\t\t\tDocker: dockerParams{\n\t\t\t\t\t\t\tFile:   fmt.Sprintf(\"%s.dockerfile\", format),\n\t\t\t\t\t\t\tTarget: testName,\n\t\t\t\t\t\t\tArch:   testArch,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}(t, name, arch)\n\t\t}\n\t}\n}\n\nfunc TestIPKSpecific(t *testing.T) {\n\tt.Parallel()\n\tformat := \"ipk\"\n\ttestNames := []string{\n\t\t\"alternatives\",\n\t\t\"conflicts\",\n\t\t\"predepends\",\n\t}\n\tfor _, name := range testNames {\n\t\tfor _, arch := range formatArchs[format] {\n\t\t\tfunc(t *testing.T, testName, testArch string) {\n\t\t\t\tt.Run(fmt.Sprintf(\"%s/%s/%s\", format, testArch, testName), func(t *testing.T) {\n\t\t\t\t\tt.Parallel()\n\t\t\t\t\tif testArch == \"ppc64le\" && os.Getenv(\"NO_TEST_PPC64LE\") == \"true\" {\n\t\t\t\t\t\tt.Skip(\"ppc64le arch not supported in pipeline\")\n\t\t\t\t\t}\n\t\t\t\t\taccept(t, acceptParms{\n\t\t\t\t\t\tName:   fmt.Sprintf(\"%s_%s\", testName, testArch),\n\t\t\t\t\t\tConf:   fmt.Sprintf(\"%s.%s.yaml\", format, testName),\n\t\t\t\t\t\tFormat: format,\n\t\t\t\t\t\tDocker: dockerParams{\n\t\t\t\t\t\t\tFile:   fmt.Sprintf(\"%s.dockerfile\", format),\n\t\t\t\t\t\t\tTarget: testName,\n\t\t\t\t\t\t\tArch:   testArch,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}(t, name, arch)\n\t\t}\n\t}\n}\n\nfunc TestRPMSign(t *testing.T) {\n\tt.Parallel()\n\tfor _, os := range []string{\"centos9\", \"fedora34\", \"fedora36\", \"fedora38\"} {\n\t\tos := os\n\t\tt.Run(fmt.Sprintf(\"rpm/amd64/sign/%s\", os), func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\taccept(t, acceptParms{\n\t\t\t\tName:   fmt.Sprintf(\"sign_%s_amd64\", os),\n\t\t\t\tConf:   \"core.signed.yaml\",\n\t\t\t\tFormat: \"rpm\",\n\t\t\t\tDocker: dockerParams{\n\t\t\t\t\tFile:   fmt.Sprintf(\"rpm_%s.dockerfile\", os),\n\t\t\t\t\tTarget: \"signed\",\n\t\t\t\t\tArch:   \"amd64\",\n\t\t\t\t},\n\t\t\t})\n\t\t})\n\t}\n}\n\nfunc TestDebSign(t *testing.T) {\n\tt.Parallel()\n\tfor _, arch := range formatArchs[\"deb\"] {\n\t\tfor _, sigtype := range []string{\"dpkg-sig\", \"debsign\"} {\n\t\t\tfunc(t *testing.T, testSigtype, testArch string) {\n\t\t\t\tt.Run(fmt.Sprintf(\"deb/%s/%s\", testArch, testSigtype), func(t *testing.T) {\n\t\t\t\t\tt.Parallel()\n\t\t\t\t\ttarget := \"signed\"\n\t\t\t\t\tif testSigtype == \"dpkg-sig\" {\n\t\t\t\t\t\ttarget = \"dpkg-signed\"\n\t\t\t\t\t}\n\t\t\t\t\tif testArch == \"ppc64le\" && os.Getenv(\"NO_TEST_PPC64LE\") == \"true\" {\n\t\t\t\t\t\tt.Skip(\"ppc64le arch not supported in pipeline\")\n\t\t\t\t\t}\n\t\t\t\t\taccept(t, acceptParms{\n\t\t\t\t\t\tName:   fmt.Sprintf(\"%s_sign_%s\", testSigtype, testArch),\n\t\t\t\t\t\tConf:   fmt.Sprintf(\"deb.%s.sign.yaml\", testSigtype),\n\t\t\t\t\t\tFormat: \"deb\",\n\t\t\t\t\t\tDocker: dockerParams{\n\t\t\t\t\t\t\tFile:   \"deb.dockerfile\",\n\t\t\t\t\t\t\tTarget: target,\n\t\t\t\t\t\t\tArch:   testArch,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}(t, sigtype, arch)\n\t\t}\n\t}\n}\n\ntype acceptParms struct {\n\tName   string\n\tConf   string\n\tFormat string\n\tDocker dockerParams\n}\n\ntype dockerParams struct {\n\tFile      string\n\tTarget    string\n\tArch      string\n\tBuildArgs []string\n}\n\nfunc accept(t *testing.T, params acceptParms) {\n\tt.Helper()\n\n\tarch := strings.ReplaceAll(params.Docker.Arch, \"armv\", \"arm/\")\n\tconfigFile := filepath.Join(\"./testdata/acceptance/\", params.Conf)\n\ttmp, err := filepath.Abs(\"./testdata/acceptance/tmp\")\n\trequire.NoError(t, err)\n\tpackageName := params.Name + \".\" + params.Format\n\ttarget := filepath.Join(tmp, packageName)\n\trequire.NoError(t, os.MkdirAll(tmp, 0o700))\n\n\tenvFunc := func(s string) string {\n\t\tswitch s {\n\t\tcase \"BUILD_ARCH\":\n\t\t\treturn strings.ReplaceAll(arch, \"/\", \"\")\n\t\tcase \"SEMVER\":\n\t\t\treturn \"v1.0.0-0.1.b1+git.abcdefgh\"\n\t\tdefault:\n\t\t\treturn os.Getenv(s)\n\t\t}\n\t}\n\tconfig, err := nfpm.ParseFileWithEnvMapping(configFile, envFunc)\n\trequire.NoError(t, err)\n\n\tinfo, err := config.Get(params.Format)\n\trequire.NoError(t, err)\n\trequire.NoError(t, nfpm.Validate(info))\n\n\tpkg, err := nfpm.Get(params.Format)\n\trequire.NoError(t, err)\n\n\tcmdArgs := []string{\n\t\t\"build\", \"--rm\", \"--force-rm\",\n\t\t\"--platform\", fmt.Sprintf(\"linux/%s\", arch),\n\t\t\"-f\", params.Docker.File,\n\t\t\"--target\", params.Docker.Target,\n\t\t\"--build-arg\", \"package=\" + filepath.Join(\"tmp\", packageName),\n\t}\n\tfor _, arg := range params.Docker.BuildArgs {\n\t\tcmdArgs = append(cmdArgs, \"--build-arg\", arg)\n\t}\n\tcmdArgs = append(cmdArgs, \".\")\n\n\tf, err := os.OpenFile(target, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0o764)\n\trequire.NoError(t, err)\n\tinfo.Target = target\n\trequire.NoError(t, pkg.Package(nfpm.WithDefaults(info), f))\n\t//nolint:gosec\n\tcmd := exec.Command(\"docker\", cmdArgs...)\n\tcmd.Dir = \"./testdata/acceptance\"\n\tbts, err := cmd.CombinedOutput()\n\trequire.NoError(\n\t\tt,\n\t\terr,\n\t\t\"failed: %v; env BUILD_ARCH: %s; package: %s; output: %s\",\n\t\tcmd.Args,\n\t\tenvFunc(\"BUILD_ARCH\"),\n\t\ttarget,\n\t\tstring(bts),\n\t)\n}\n"
        },
        {
          "name": "apk",
          "type": "tree",
          "content": null
        },
        {
          "name": "arch",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "deb",
          "type": "tree",
          "content": null
        },
        {
          "name": "deprecation",
          "type": "tree",
          "content": null
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.4619140625,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1710146030,\n        \"narHash\": \"sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"b1d9ab70662946ef0850d488da1c9019f3a9752a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1723362943,\n        \"narHash\": \"sha256-dFZRVSgmJkyM0bkPpaYRtG/kRMRTorUIDj8BxoOt1T4=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"a58bc8ad779655e790115244571758e8de055e3d\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.4267578125,
          "content": "{\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n  outputs = { nixpkgs, flake-utils, ... }:\n    flake-utils.lib.eachDefaultSystem (system:\n      let\n        pkgs = nixpkgs.legacyPackages.${system};\n      in\n      {\n        packages.default = pkgs.buildGoModule {\n          pname = \"nfpm\";\n          version = \"unversioned\";\n          src = ./.;\n          ldflags = [ \"-s\" \"-w\" \"-X main.version=dev\" \"-X main.builtBy=flake\" ];\n          doCheck = false;\n          vendorHash = \"\";\n        };\n\n        devShells.default = pkgs.mkShell {\n          shellHook = \"go mod tidy\";\n        };\n\n        # nix develop .#dev\n        devShells.dev = pkgs.mkShell {\n          packages = with pkgs; [\n            go-task\n            gofumpt\n          ];\n        };\n\n        # nix develop .#packagers\n        devShells.packagers = pkgs.mkShell {\n          packages = with pkgs; [\n            dpkg\n          ] ++ (lib.optionals pkgs.stdenv.isLinux [\n            apk-tools\n            rpm\n          ]);\n\n        };\n\n        # nix develop .#docs\n        devShells.docs = pkgs.mkShell {\n          packages = with pkgs; with pkgs.python311Packages; [\n            (pkgs.writeScriptBin \"ci-docs\" \"task docs:test\")\n            go-task\n            htmltest\n            mkdocs-material\n            mkdocs-minify\n          ] ++ mkdocs-material.passthru.optional-dependencies.git;\n        };\n      }\n    );\n}\n\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 3.3125,
          "content": "module github.com/goreleaser/nfpm/v2\n\ngo 1.22\n\nrequire (\n\tdario.cat/mergo v1.0.1\n\tgithub.com/AlekSi/pointer v1.2.0\n\tgithub.com/Masterminds/semver/v3 v3.3.1\n\tgithub.com/ProtonMail/go-crypto v1.1.3\n\tgithub.com/ProtonMail/gopenpgp/v2 v2.7.1\n\tgithub.com/blakesmith/ar v0.0.0-20190502131153-809d4375e1fb\n\tgithub.com/caarlos0/go-version v0.2.0\n\tgithub.com/google/rpmpack v0.6.1-0.20240329070804-c2247cbb881a\n\tgithub.com/goreleaser/chglog v0.6.2\n\tgithub.com/goreleaser/fileglob v1.3.0\n\tgithub.com/invopop/jsonschema v0.13.0\n\tgithub.com/klauspost/compress v1.17.11\n\tgithub.com/klauspost/pgzip v1.2.6\n\tgithub.com/muesli/mango-cobra v1.2.0\n\tgithub.com/muesli/roff v0.1.0\n\tgithub.com/sassoftware/go-rpmutils v0.4.0\n\tgithub.com/spf13/cobra v1.8.1\n\tgithub.com/stretchr/testify v1.10.0\n\tgithub.com/ulikunitz/xz v0.5.12\n\tgolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tgithub.com/DataDog/zstd v1.5.5 // indirect\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/sprig/v3 v3.3.0 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.1 // indirect\n\tgithub.com/ProtonMail/go-mime v0.0.0-20230322103455-7d82a3887f2f // indirect\n\tgithub.com/bahlo/generic-list-go v0.2.0 // indirect\n\tgithub.com/buger/jsonparser v1.1.1 // indirect\n\tgithub.com/cavaliergopher/cpio v1.0.1 // indirect\n\tgithub.com/cloudflare/circl v1.3.8 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.4 // indirect\n\tgithub.com/cyphar/filepath-securejoin v0.3.6 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/emirpasic/gods v1.18.1 // indirect\n\tgithub.com/go-git/gcfg v1.5.1-0.20230307220236-3a3c6141e376 // indirect\n\tgithub.com/go-git/go-billy/v5 v5.6.1 // indirect\n\tgithub.com/go-git/go-git/v5 v5.13.1 // indirect\n\tgithub.com/gobwas/glob v0.2.3 // indirect\n\tgithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/huandu/xstrings v1.5.0 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 // indirect\n\tgithub.com/kevinburke/ssh_config v1.2.0 // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/muesli/mango v0.1.0 // indirect\n\tgithub.com/muesli/mango-pflag v0.1.0 // indirect\n\tgithub.com/pjbgf/sha1cd v0.3.0 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/sergi/go-diff v1.3.2-0.20230802210424-5b0b94c5c0d3 // indirect\n\tgithub.com/shopspring/decimal v1.4.0 // indirect\n\tgithub.com/skeema/knownhosts v1.3.0 // indirect\n\tgithub.com/spf13/cast v1.7.0 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/wk8/go-ordered-map/v2 v2.1.8 // indirect\n\tgithub.com/xanzy/ssh-agent v0.3.3 // indirect\n\tgithub.com/xi2/xz v0.0.0-20171230120015-48954b6210f8 // indirect\n\tgitlab.com/digitalxero/go-conventional-commit v1.0.7 // indirect\n\tgolang.org/x/crypto v0.31.0 // indirect\n\tgolang.org/x/mod v0.19.0 // indirect\n\tgolang.org/x/net v0.33.0 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgolang.org/x/tools v0.23.0 // indirect\n\tgopkg.in/warnings.v0 v0.1.2 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 21.5498046875,
          "content": "dario.cat/mergo v1.0.1 h1:Ra4+bf83h2ztPIQYNP99R6m+Y7KfnARDfID+a+vLl4s=\ndario.cat/mergo v1.0.1/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\ngithub.com/AlekSi/pointer v1.2.0 h1:glcy/gc4h8HnG2Z3ZECSzZ1IX1x2JxRVuDzaJwQE0+w=\ngithub.com/AlekSi/pointer v1.2.0/go.mod h1:gZGfd3dpW4vEc/UlyfKKi1roIqcCgwOIvb0tSNSBle0=\ngithub.com/DataDog/zstd v1.5.5 h1:oWf5W7GtOLgp6bciQYDmhHHjdhYkALu6S/5Ni9ZgSvQ=\ngithub.com/DataDog/zstd v1.5.5/go.mod h1:g4AWEaM3yOg3HYfnJ3YIawPnVdXJh9QME85blwSAmyw=\ngithub.com/Masterminds/goutils v1.1.1 h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=\ngithub.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=\ngithub.com/Masterminds/semver/v3 v3.3.1 h1:QtNSWtVZ3nBfk8mAOu/B6v7FMJ+NHTIgUPi7rj+4nv4=\ngithub.com/Masterminds/semver/v3 v3.3.1/go.mod h1:4V+yj/TJE1HU9XfppCwVMZq3I84lprf4nC11bSS5beM=\ngithub.com/Masterminds/sprig/v3 v3.3.0 h1:mQh0Yrg1XPo6vjYXgtf5OtijNAKJRNcTdOOGZe3tPhs=\ngithub.com/Masterminds/sprig/v3 v3.3.0/go.mod h1:Zy1iXRYNqNLUolqCpL4uhk6SHUMAOSCzdgBfDb35Lz0=\ngithub.com/Microsoft/go-winio v0.5.2/go.mod h1:WpS1mjBmmwHBEWmogvA2mj8546UReBk4v8QkMxJ6pZY=\ngithub.com/Microsoft/go-winio v0.6.1 h1:9/kr64B9VUZrLm5YYwbGtUJnMgqWVOdUAXu6Migciow=\ngithub.com/Microsoft/go-winio v0.6.1/go.mod h1:LRdKpFKfdobln8UmuiYcKPot9D2v6svN5+sAH+4kjUM=\ngithub.com/ProtonMail/go-crypto v0.0.0-20230321155629-9a39f2531310/go.mod h1:8TI4H3IbrackdNgv+92dI+rhpCaLqM0IfpgCgenFvRE=\ngithub.com/ProtonMail/go-crypto v1.1.3 h1:nRBOetoydLeUb4nHajyO2bKqMLfWQ/ZPwkXqXxPxCFk=\ngithub.com/ProtonMail/go-crypto v1.1.3/go.mod h1:rA3QumHc/FZ8pAHreoekgiAbzpNsfQAosU5td4SnOrE=\ngithub.com/ProtonMail/go-mime v0.0.0-20230322103455-7d82a3887f2f h1:tCbYj7/299ekTTXpdwKYF8eBlsYsDVoggDAuAjoK66k=\ngithub.com/ProtonMail/go-mime v0.0.0-20230322103455-7d82a3887f2f/go.mod h1:gcr0kNtGBqin9zDW9GOHcVntrwnjrK+qdJ06mWYBybw=\ngithub.com/ProtonMail/gopenpgp/v2 v2.7.1 h1:Awsg7MPc2gD3I7IFac2qE3Gdls0lZW8SzrFZ3k1oz0s=\ngithub.com/ProtonMail/gopenpgp/v2 v2.7.1/go.mod h1:/BU5gfAVwqyd8EfC3Eu7zmuhwYQpKs+cGD8M//iiaxs=\ngithub.com/anmitsu/go-shlex v0.0.0-20200514113438-38f4b401e2be h1:9AeTilPcZAjCFIImctFaOjnTIavg87rW78vTPkQqLI8=\ngithub.com/anmitsu/go-shlex v0.0.0-20200514113438-38f4b401e2be/go.mod h1:ySMOLuWl6zY27l47sB3qLNK6tF2fkHG55UZxx8oIVo4=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5 h1:0CwZNZbxp69SHPdPJAN/hZIm0C4OItdklCFmMRWYpio=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=\ngithub.com/bahlo/generic-list-go v0.2.0 h1:5sz/EEAK+ls5wF+NeqDpk5+iNdMDXrh3z3nPnH1Wvgk=\ngithub.com/bahlo/generic-list-go v0.2.0/go.mod h1:2KvAjgMlE5NNynlg/5iLrrCCZ2+5xWbdbCW3pNTGyYg=\ngithub.com/blakesmith/ar v0.0.0-20190502131153-809d4375e1fb h1:m935MPodAbYS46DG4pJSv7WO+VECIWUQ7OJYSoTrMh4=\ngithub.com/blakesmith/ar v0.0.0-20190502131153-809d4375e1fb/go.mod h1:PkYb9DJNAwrSvRx5DYA+gUcOIgTGVMNkfSCbZM8cWpI=\ngithub.com/buger/jsonparser v1.1.1 h1:2PnMjfWD7wBILjqQbt530v576A/cAbQvEW9gGIpYMUs=\ngithub.com/buger/jsonparser v1.1.1/go.mod h1:6RYKKt7H4d4+iWqouImQ9R2FZql3VbhNgx27UK13J/0=\ngithub.com/bwesterb/go-ristretto v1.2.0/go.mod h1:fUIoIZaG73pV5biE2Blr2xEzDoMj7NFEuV9ekS419A0=\ngithub.com/caarlos0/go-version v0.2.0 h1:TTD5dF3PBAtRHbfCKRE173SrVVpbE0yX95EDQ4BwTGs=\ngithub.com/caarlos0/go-version v0.2.0/go.mod h1:X+rI5VAtJDpcjCjeEIXpxGa5+rTcgur1FK66wS0/944=\ngithub.com/caarlos0/testfs v0.4.4 h1:3PHvzHi5Lt+g332CiShwS8ogTgS3HjrmzZxCm6JCDr8=\ngithub.com/caarlos0/testfs v0.4.4/go.mod h1:bRN55zgG4XCUVVHZCeU+/Tz1Q6AxEJOEJTliBy+1DMk=\ngithub.com/cavaliergopher/cpio v1.0.1 h1:KQFSeKmZhv0cr+kawA3a0xTQCU4QxXF1vhU7P7av2KM=\ngithub.com/cavaliergopher/cpio v1.0.1/go.mod h1:pBdaqQjnvXxdS/6CvNDwIANIFSP0xRKI16PX4xejRQc=\ngithub.com/cloudflare/circl v1.1.0/go.mod h1:prBCrKB9DV4poKZY1l9zBXg2QJY7mvgRvtMxxK7fi4I=\ngithub.com/cloudflare/circl v1.3.8 h1:j+V8jJt09PoeMFIu2uh5JUyEaIHTXVOHslFoLNAKqwI=\ngithub.com/cloudflare/circl v1.3.8/go.mod h1:PDRU+oXvdD7KCtgKxW95M5Z8BpSCJXQORiZFnBQS5QU=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4 h1:wfIWP927BUkWJb2NmU/kNDYIBTh/ziUX91+lVfRxZq4=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/cyphar/filepath-securejoin v0.3.6 h1:4d9N5ykBnSp5Xn2JkhocYDkOpURL/18CYMpo6xB9uWM=\ngithub.com/cyphar/filepath-securejoin v0.3.6/go.mod h1:Sdj7gXlvMcPZsbhwhQ33GguGLDGQL7h7bg04C/+u9jI=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/elazarl/goproxy v1.2.3 h1:xwIyKHbaP5yfT6O9KIeYJR5549MXRQkoQMRXGztz8YQ=\ngithub.com/elazarl/goproxy v1.2.3/go.mod h1:YfEbZtqP4AetfO6d40vWchF3znWX7C7Vd6ZMfdL8z64=\ngithub.com/emirpasic/gods v1.18.1 h1:FXtiHYKDGKCW2KzwZKx0iC0PQmdlorYgdFG9jPXJ1Bc=\ngithub.com/emirpasic/gods v1.18.1/go.mod h1:8tpGGwCnJ5H4r6BWwaV6OrWmMoPhUl5jm/FMNAnJvWQ=\ngithub.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\ngithub.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/gliderlabs/ssh v0.3.8 h1:a4YXD1V7xMF9g5nTkdfnja3Sxy1PVDCj1Zg4Wb8vY6c=\ngithub.com/gliderlabs/ssh v0.3.8/go.mod h1:xYoytBv1sV0aL3CavoDuJIQNURXkkfPA/wxQ1pL1fAU=\ngithub.com/go-git/gcfg v1.5.1-0.20230307220236-3a3c6141e376 h1:+zs/tPmkDkHx3U66DAb0lQFJrpS6731Oaa12ikc+DiI=\ngithub.com/go-git/gcfg v1.5.1-0.20230307220236-3a3c6141e376/go.mod h1:an3vInlBmSxCcxctByoQdvwPiA7DTK7jaaFDBTtu0ic=\ngithub.com/go-git/go-billy/v5 v5.6.1 h1:u+dcrgaguSSkbjzHwelEjc0Yj300NUevrrPphk/SoRA=\ngithub.com/go-git/go-billy/v5 v5.6.1/go.mod h1:0AsLr1z2+Uksi4NlElmMblP5rPcDZNRCD8ujZCRR2BE=\ngithub.com/go-git/go-git-fixtures/v4 v4.3.2-0.20231010084843-55a94097c399 h1:eMje31YglSBqCdIqdhKBW8lokaMrL3uTkpGYlE2OOT4=\ngithub.com/go-git/go-git-fixtures/v4 v4.3.2-0.20231010084843-55a94097c399/go.mod h1:1OCfN199q1Jm3HZlxleg+Dw/mwps2Wbk9frAWm+4FII=\ngithub.com/go-git/go-git/v5 v5.13.1 h1:DAQ9APonnlvSWpvolXWIuV6Q6zXy2wHbN4cVlNR5Q+M=\ngithub.com/go-git/go-git/v5 v5.13.1/go.mod h1:qryJB4cSBoq3FRoBRf5A77joojuBcmPJ0qu3XXXVixc=\ngithub.com/gobwas/glob v0.2.3 h1:A4xDbljILXROh+kObIiy5kIaPYD8e96x1tgBhUI5J+Y=\ngithub.com/gobwas/glob v0.2.3/go.mod h1:d3Ez4x06l9bZtSvzIay5+Yzi0fmZzPgnTbPcKjJAkT8=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/rpmpack v0.6.1-0.20240329070804-c2247cbb881a h1:JJBdjSfqSy3mnDT0940ASQFghwcZ4y4cb6ttjAoXqwE=\ngithub.com/google/rpmpack v0.6.1-0.20240329070804-c2247cbb881a/go.mod h1:uqVAUVQLq8UY2hCDfmJ/+rtO3aw7qyhc90rCVEabEfI=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gopherjs/gopherjs v1.17.2 h1:fQnZVsXk8uxXIStYb0N4bGk7jeyTalG/wsZjQ25dO0g=\ngithub.com/gopherjs/gopherjs v1.17.2/go.mod h1:pRRIvn/QzFLrKfvEz3qUuEhtE/zLCWfreZ6J5gM2i+k=\ngithub.com/goreleaser/chglog v0.6.2 h1:qroqdMHzwoAPTHHzJtbCfYbwg/yWJrNQApZ6IQAq8bU=\ngithub.com/goreleaser/chglog v0.6.2/go.mod h1:BP0xQQc6B8aM+4dhvSLlVTv0rvhuOF0JacDO1+h7L3U=\ngithub.com/goreleaser/fileglob v1.3.0 h1:/X6J7U8lbDpQtBvGcwwPS6OpzkNVlVEsFUVRx9+k+7I=\ngithub.com/goreleaser/fileglob v1.3.0/go.mod h1:Jx6BoXv3mbYkEzwm9THo7xbr5egkAraxkGorbJb4RxU=\ngithub.com/huandu/xstrings v1.5.0 h1:2ag3IFq9ZDANvthTwTiqSSZLjDc+BedvHPAp5tJy2TI=\ngithub.com/huandu/xstrings v1.5.0/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/invopop/jsonschema v0.13.0 h1:KvpoAJWEjR3uD9Kbm2HWJmqsEaHt8lBUpd0qHcIi21E=\ngithub.com/invopop/jsonschema v0.13.0/go.mod h1:ffZ5Km5SWWRAIN6wbDXItl95euhFz2uON45H2qjYt+0=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i6rXxKeerYnT8Nvf0QmHCRC1n8sfWVwXF2Frvo=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/kevinburke/ssh_config v1.2.0 h1:x584FjTGwHzMwvHx18PXxbBVzfnxogHaAReU4gf13a4=\ngithub.com/kevinburke/ssh_config v1.2.0/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/klauspost/pgzip v1.2.6 h1:8RXeL5crjEUFnR2/Sn6GJNWtSQ3Dk8pq4CL3jvdDyjU=\ngithub.com/klauspost/pgzip v1.2.6/go.mod h1:Ch1tH69qFZu15pkjo5kYi6mth2Zzwzt50oCQKQE9RUs=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=\ngithub.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/matryer/is v1.4.0 h1:sosSmIWwkYITGrxZ25ULNDeKiMNzFSr4V/eqBQP0PeE=\ngithub.com/matryer/is v1.4.0/go.mod h1:8I/i5uYgLzgsgEloJE1U6xx5HkBQpAZvepWuujKwMRU=\ngithub.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=\ngithub.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=\ngithub.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=\ngithub.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/muesli/mango v0.1.0 h1:DZQK45d2gGbql1arsYA4vfg4d7I9Hfx5rX/GCmzsAvI=\ngithub.com/muesli/mango v0.1.0/go.mod h1:5XFpbC8jY5UUv89YQciiXNlbi+iJgt29VDC5xbzrLL4=\ngithub.com/muesli/mango-cobra v1.2.0 h1:DQvjzAM0PMZr85Iv9LIMaYISpTOliMEg+uMFtNbYvWg=\ngithub.com/muesli/mango-cobra v1.2.0/go.mod h1:vMJL54QytZAJhCT13LPVDfkvCUJ5/4jNUKF/8NC2UjA=\ngithub.com/muesli/mango-pflag v0.1.0 h1:UADqbYgpUyRoBja3g6LUL+3LErjpsOwaC9ywvBWe7Sg=\ngithub.com/muesli/mango-pflag v0.1.0/go.mod h1:YEQomTxaCUp8PrbhFh10UfbhbQrM/xJ4i2PB8VTLLW0=\ngithub.com/muesli/roff v0.1.0 h1:YD0lalCotmYuF5HhZliKWlIx7IEhiXeSfq7hNjFqGF8=\ngithub.com/muesli/roff v0.1.0/go.mod h1:pjAHQM9hdUUwm/krAfrLGgJkXJ+YuhtsfZ42kieB2Ig=\ngithub.com/onsi/gomega v1.34.1 h1:EUMJIKUjM8sKjYbtxQI9A4z2o+rruxnzNvpknOXie6k=\ngithub.com/onsi/gomega v1.34.1/go.mod h1:kU1QgUvBDLXBJq618Xvm2LUX6rSAfRaFRTcdOeDLwwY=\ngithub.com/pjbgf/sha1cd v0.3.0 h1:4D5XXmUUBUl/xQ6IjCkEAbqXskkq/4O7LmGn0AqMDs4=\ngithub.com/pjbgf/sha1cd v0.3.0/go.mod h1:nZ1rrWOcGJ5uZgEEVL1VUM9iRQiZvWdbZjkKyFzPPsI=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sassoftware/go-rpmutils v0.4.0 h1:ojND82NYBxgwrV+mX1CWsd5QJvvEZTKddtCdFLPWhpg=\ngithub.com/sassoftware/go-rpmutils v0.4.0/go.mod h1:3goNWi7PGAT3/dlql2lv3+MSN5jNYPjT5mVcQcIsYzI=\ngithub.com/sergi/go-diff v1.3.2-0.20230802210424-5b0b94c5c0d3 h1:n661drycOFuPLCN3Uc8sB6B/s6Z4t2xvBgU1htSHuq8=\ngithub.com/sergi/go-diff v1.3.2-0.20230802210424-5b0b94c5c0d3/go.mod h1:A0bzQcvG0E7Rwjx0REVgAGH58e96+X0MeOfepqsbeW4=\ngithub.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp81k=\ngithub.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=\ngithub.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/skeema/knownhosts v1.3.0 h1:AM+y0rI04VksttfwjkSTNQorvGqmwATnvnAHpSgc0LY=\ngithub.com/skeema/knownhosts v1.3.0/go.mod h1:sPINvnADmT/qYH1kfv+ePMmOBTH6Tbl7b5LvTDjFK7M=\ngithub.com/smarty/assertions v1.15.0 h1:cR//PqUBUiQRakZWqBiFFQ9wb8emQGDb0HeGdqGByCY=\ngithub.com/smarty/assertions v1.15.0/go.mod h1:yABtdzeQs6l1brC900WlRNwj6ZR55d7B+E8C6HtKdec=\ngithub.com/smartystreets/goconvey v1.8.1 h1:qGjIddxOk4grTu9JPOU31tVfq3cNdBlNa5sSznIX1xY=\ngithub.com/smartystreets/goconvey v1.8.1/go.mod h1:+/u4qLyY6x1jReYOp7GOM2FSt8aP9CzCZL03bI28W60=\ngithub.com/spf13/cast v1.7.0 h1:ntdiHjuueXFgm5nzDRdOS4yfT43P5Fnud6DH50rz/7w=\ngithub.com/spf13/cast v1.7.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/ulikunitz/xz v0.5.12 h1:37Nm15o69RwBkXM0J6A5OlE67RZTfzUxTj8fB3dfcsc=\ngithub.com/ulikunitz/xz v0.5.12/go.mod h1:nbz6k7qbPmH4IRqmfOplQw/tblSgqTqBwxkY0oWt/14=\ngithub.com/wk8/go-ordered-map/v2 v2.1.8 h1:5h/BUHu93oj4gIdvHHHGsScSTMijfx5PeYkE/fJgbpc=\ngithub.com/wk8/go-ordered-map/v2 v2.1.8/go.mod h1:5nJHM5DyteebpVlHnWMV0rPz6Zp7+xBAnxjb1X5vnTw=\ngithub.com/xanzy/ssh-agent v0.3.3 h1:+/15pJfg/RsTxqYcX6fHqOXZwwMP+2VyYWJeWM2qQFM=\ngithub.com/xanzy/ssh-agent v0.3.3/go.mod h1:6dzNDKs0J9rVPHPhaGCukekBHKqfl+L3KghI1Bc68Uw=\ngithub.com/xi2/xz v0.0.0-20171230120015-48954b6210f8 h1:nIPpBwaJSVYIxUFsDv3M8ofmx9yWTog9BfvIu0q41lo=\ngithub.com/xi2/xz v0.0.0-20171230120015-48954b6210f8/go.mod h1:HUYIGzjTL3rfEspMxjDjgmT5uz5wzYJKVo23qUhYTos=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngitlab.com/digitalxero/go-conventional-commit v1.0.7 h1:8/dO6WWG+98PMhlZowt/YjuiKhqhGlOCwlIV8SqqGh8=\ngitlab.com/digitalxero/go-conventional-commit v1.0.7/go.mod h1:05Xc2BFsSyC5tKhK0y+P3bs0AwUtNuTp+mTpbCU/DZ0=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20220622213112-05595931fe9d/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.7.0/go.mod h1:pYwdfH91IfpZVANVyUOhSIPZaFoJGxTFbZhFTx+dXZU=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=\ngolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.19.0 h1:fEdghXQSo20giMthA7cd28ZC+jts4amQ3YMXiP5oMQ8=\ngolang.org/x/mod v0.19.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.8.0/go.mod h1:QVkue5JL9kW//ek3r6jTKnTFis1tRmNAW2P1shuFdJc=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211007075335-d3039528d8ac/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.6.0/go.mod h1:m6U89DPEgQRMq3DNkDClhWw02AUbt2daBVO4cn4Hv9U=\ngolang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.8.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.23.0 h1:SGsXPZ+2l4JsgaCKkx+FQ9YZ5XEtA1GZYuoDjenLjvg=\ngolang.org/x/tools v0.23.0/go.mod h1:pnu6ufv6vQkll6szChhK3C3L/ruaIv5eBeztNG8wtsI=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/warnings.v0 v0.1.2 h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=\ngopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "ipk",
          "type": "tree",
          "content": null
        },
        {
          "name": "nfpm.go",
          "type": "blob",
          "size": 25.90234375,
          "content": "// Package nfpm provides ways to package programs in some linux packaging\n// formats.\npackage nfpm\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/fs\"\n\t\"os\"\n\t\"sort\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"dario.cat/mergo\"\n\t\"github.com/AlekSi/pointer\"\n\t\"github.com/Masterminds/semver/v3\"\n\t\"github.com/goreleaser/chglog\"\n\t\"github.com/goreleaser/nfpm/v2/files\"\n\t\"github.com/goreleaser/nfpm/v2/internal/modtime\"\n\t\"gopkg.in/yaml.v3\"\n)\n\n// nolint: gochecknoglobals\nvar (\n\tpackagers = map[string]Packager{}\n\tlock      sync.Mutex\n)\n\n// RegisterPackager a new packager for the given format.\nfunc RegisterPackager(format string, p Packager) {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\tpackagers[format] = p\n}\n\n// ClearPackagers clear all registered packagers, used for testing.\nfunc ClearPackagers() {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\tpackagers = map[string]Packager{}\n}\n\n// ErrNoPackager happens when no packager is registered for the given format.\ntype ErrNoPackager struct {\n\tformat string\n}\n\nfunc (e ErrNoPackager) Error() string {\n\treturn fmt.Sprintf(\"no packager registered for the format %s\", e.format)\n}\n\n// Get a packager for the given format.\nfunc Get(format string) (Packager, error) {\n\tp, ok := packagers[format]\n\tif !ok {\n\t\treturn nil, ErrNoPackager{format}\n\t}\n\treturn p, nil\n}\n\n// Enumerate lists the available packagers\nfunc Enumerate() []string {\n\tlock.Lock()\n\tdefer lock.Unlock()\n\n\tlist := make([]string, 0, len(packagers))\n\tfor key := range packagers {\n\t\tif key != \"\" {\n\t\t\tlist = append(list, key)\n\t\t}\n\t}\n\n\tsort.Strings(list)\n\treturn list\n}\n\n// Parse decodes YAML data from an io.Reader into a configuration struct.\nfunc Parse(in io.Reader) (config Config, err error) {\n\treturn ParseWithEnvMapping(in, os.Getenv)\n}\n\n// ParseWithEnvMapping decodes YAML data from an io.Reader into a configuration struct.\nfunc ParseWithEnvMapping(in io.Reader, mapping func(string) string) (config Config, err error) {\n\tdec := yaml.NewDecoder(in)\n\tdec.KnownFields(true)\n\tif err = dec.Decode(&config); err != nil {\n\t\treturn\n\t}\n\tconfig.envMappingFunc = mapping\n\tif config.envMappingFunc == nil {\n\t\tconfig.envMappingFunc = func(s string) string { return s }\n\t}\n\n\tconfig.expandEnvVars()\n\tWithDefaults(&config.Info)\n\treturn config, nil\n}\n\n// ParseFile decodes YAML data from a file path into a configuration struct.\nfunc ParseFile(path string) (config Config, err error) {\n\tif path == \"-\" {\n\t\treturn ParseWithEnvMapping(os.Stdin, os.Getenv)\n\t}\n\treturn ParseFileWithEnvMapping(path, os.Getenv)\n}\n\n// ParseFileWithEnvMapping decodes YAML data from a file path into a configuration struct.\nfunc ParseFileWithEnvMapping(path string, mapping func(string) string) (config Config, err error) {\n\tvar file *os.File\n\tfile, err = os.Open(path) //nolint:gosec\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer file.Close() // nolint: errcheck,gosec\n\treturn ParseWithEnvMapping(file, mapping)\n}\n\n// Packager represents any packager implementation.\ntype Packager interface {\n\tPackage(info *Info, w io.Writer) error\n\tConventionalFileName(info *Info) string\n}\n\ntype PackagerWithExtension interface {\n\tPackager\n\tConventionalExtension() string\n}\n\n// Config contains the top level configuration for packages.\ntype Config struct {\n\tInfo           `yaml:\",inline\" json:\",inline\"`\n\tOverrides      map[string]*Overridables `yaml:\"overrides,omitempty\" json:\"overrides,omitempty\" jsonschema:\"title=overrides,description=override some fields when packaging with a specific packager,enum=apk,enum=deb,enum=rpm\"`\n\tenvMappingFunc func(string) string\n}\n\n// Get returns the Info struct for the given packager format. Overrides\n// for the given format are merged into the final struct.\nfunc (c *Config) Get(format string) (info *Info, err error) {\n\tinfo = &Info{}\n\t// make a deep copy of info\n\tif err = mergo.Merge(info, c.Info, mergo.WithOverride); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to merge config into info: %w\", err)\n\t}\n\toverride, ok := c.Overrides[format]\n\tif !ok {\n\t\t// no overrides\n\t\treturn info, nil\n\t}\n\tif err = mergo.Merge(&info.Overridables, override, mergo.WithOverride); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to merge overrides into info: %w\", err)\n\t}\n\n\tvar contents []*files.Content\n\tfor _, f := range info.Contents {\n\t\tif f.Packager == format || f.Packager == \"\" {\n\t\t\tcontents = append(contents, f)\n\t\t}\n\t}\n\tinfo.Contents = contents\n\treturn info, nil\n}\n\n// Validate ensures that the config is well typed.\nfunc (c *Config) Validate() error {\n\tif err := Validate(&c.Info); err != nil {\n\t\treturn err\n\t}\n\tfor format := range c.Overrides {\n\t\tif _, err := Get(format); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (c *Config) expandEnvVarsStringSlice(items []string) []string {\n\tfor i, dep := range items {\n\t\tval := strings.TrimSpace(os.Expand(dep, c.envMappingFunc))\n\t\titems[i] = val\n\t}\n\tfor i := 0; i < len(items); i++ {\n\t\tif items[i] == \"\" {\n\t\t\titems = append(items[:i], items[i+1:]...)\n\t\t\ti-- // Since we just deleted items[i], we must redo that index\n\t\t}\n\t}\n\n\treturn items\n}\n\nfunc (c *Config) expandEnvVarsContents(contents files.Contents) files.Contents {\n\tfor i := range contents {\n\t\tf := contents[i]\n\t\tif !f.Expand {\n\t\t\tcontinue\n\t\t}\n\t\tf.Destination = strings.TrimSpace(os.Expand(f.Destination, c.envMappingFunc))\n\t\tf.Source = strings.TrimSpace(os.Expand(f.Source, c.envMappingFunc))\n\t}\n\treturn contents\n}\n\nfunc (c *Config) expandEnvVars() {\n\t// Version related fields\n\tc.Info.Release = os.Expand(c.Info.Release, c.envMappingFunc)\n\tc.Info.Version = os.Expand(c.Info.Version, c.envMappingFunc)\n\tc.Info.Prerelease = os.Expand(c.Info.Prerelease, c.envMappingFunc)\n\tc.Info.Platform = os.Expand(c.Info.Platform, c.envMappingFunc)\n\tc.Info.Arch = os.Expand(c.Info.Arch, c.envMappingFunc)\n\tfor or := range c.Overrides {\n\t\tc.Overrides[or].Conflicts = c.expandEnvVarsStringSlice(c.Overrides[or].Conflicts)\n\t\tc.Overrides[or].Depends = c.expandEnvVarsStringSlice(c.Overrides[or].Depends)\n\t\tc.Overrides[or].Replaces = c.expandEnvVarsStringSlice(c.Overrides[or].Replaces)\n\t\tc.Overrides[or].Recommends = c.expandEnvVarsStringSlice(c.Overrides[or].Recommends)\n\t\tc.Overrides[or].Provides = c.expandEnvVarsStringSlice(c.Overrides[or].Provides)\n\t\tc.Overrides[or].Suggests = c.expandEnvVarsStringSlice(c.Overrides[or].Suggests)\n\t\tc.Overrides[or].Contents = c.expandEnvVarsContents(c.Overrides[or].Contents)\n\t}\n\tc.Info.Conflicts = c.expandEnvVarsStringSlice(c.Info.Conflicts)\n\tc.Info.Depends = c.expandEnvVarsStringSlice(c.Info.Depends)\n\tc.Info.Replaces = c.expandEnvVarsStringSlice(c.Info.Replaces)\n\tc.Info.Recommends = c.expandEnvVarsStringSlice(c.Info.Recommends)\n\tc.Info.Provides = c.expandEnvVarsStringSlice(c.Info.Provides)\n\tc.Info.Suggests = c.expandEnvVarsStringSlice(c.Info.Suggests)\n\tc.Info.Contents = c.expandEnvVarsContents(c.Info.Contents)\n\n\t// Basic metadata fields\n\tc.Info.Name = os.Expand(c.Info.Name, c.envMappingFunc)\n\tc.Info.Homepage = os.Expand(c.Info.Homepage, c.envMappingFunc)\n\tc.Info.Maintainer = os.Expand(c.Info.Maintainer, c.envMappingFunc)\n\tc.Info.Vendor = os.Expand(c.Info.Vendor, c.envMappingFunc)\n\tc.Info.Description = os.Expand(c.Info.Description, c.envMappingFunc)\n\n\t// Package signing related fields\n\tc.Info.Deb.Signature.KeyFile = os.Expand(c.Deb.Signature.KeyFile, c.envMappingFunc)\n\tc.Info.RPM.Signature.KeyFile = os.Expand(c.RPM.Signature.KeyFile, c.envMappingFunc)\n\tc.Info.APK.Signature.KeyFile = os.Expand(c.APK.Signature.KeyFile, c.envMappingFunc)\n\tc.Info.Deb.Signature.KeyID = pointer.ToString(os.Expand(pointer.GetString(c.Deb.Signature.KeyID), c.envMappingFunc))\n\tc.Info.RPM.Signature.KeyID = pointer.ToString(os.Expand(pointer.GetString(c.RPM.Signature.KeyID), c.envMappingFunc))\n\tc.Info.APK.Signature.KeyID = pointer.ToString(os.Expand(pointer.GetString(c.APK.Signature.KeyID), c.envMappingFunc))\n\n\t// Package signing passphrase\n\tgeneralPassphrase := os.Expand(\"$NFPM_PASSPHRASE\", c.envMappingFunc)\n\tc.Info.Deb.Signature.KeyPassphrase = generalPassphrase\n\tc.Info.RPM.Signature.KeyPassphrase = generalPassphrase\n\tc.Info.APK.Signature.KeyPassphrase = generalPassphrase\n\n\tdebPassphrase := os.Expand(\"$NFPM_DEB_PASSPHRASE\", c.envMappingFunc)\n\tif debPassphrase != \"\" {\n\t\tc.Info.Deb.Signature.KeyPassphrase = debPassphrase\n\t}\n\n\trpmPassphrase := os.Expand(\"$NFPM_RPM_PASSPHRASE\", c.envMappingFunc)\n\tif rpmPassphrase != \"\" {\n\t\tc.Info.RPM.Signature.KeyPassphrase = rpmPassphrase\n\t}\n\n\tapkPassphrase := os.Expand(\"$NFPM_APK_PASSPHRASE\", c.envMappingFunc)\n\tif apkPassphrase != \"\" {\n\t\tc.Info.APK.Signature.KeyPassphrase = apkPassphrase\n\t}\n\n\t// RPM specific\n\tc.Info.RPM.Packager = os.Expand(c.RPM.Packager, c.envMappingFunc)\n\n\t// Deb specific\n\tfor k, v := range c.Info.Deb.Fields {\n\t\tc.Info.Deb.Fields[k] = os.Expand(v, c.envMappingFunc)\n\t}\n\tc.Info.Deb.Predepends = c.expandEnvVarsStringSlice(c.Info.Deb.Predepends)\n\n\t// IPK specific\n\tfor k, v := range c.Info.IPK.Fields {\n\t\tc.Info.IPK.Fields[k] = os.Expand(v, c.envMappingFunc)\n\t}\n\tc.Info.IPK.Predepends = c.expandEnvVarsStringSlice(c.Info.IPK.Predepends)\n\n\t// RPM specific\n\tc.Info.RPM.Packager = os.Expand(c.RPM.Packager, c.envMappingFunc)\n}\n\n// Info contains information about a single package.\ntype Info struct {\n\tOverridables    `yaml:\",inline\" json:\",inline\"`\n\tName            string    `yaml:\"name\" json:\"name\" jsonschema:\"title=package name\"`\n\tArch            string    `yaml:\"arch\" json:\"arch\" jsonschema:\"title=target architecture,example=amd64\"`\n\tPlatform        string    `yaml:\"platform,omitempty\" json:\"platform,omitempty\" jsonschema:\"title=target platform,example=linux,default=linux\"`\n\tEpoch           string    `yaml:\"epoch,omitempty\" json:\"epoch,omitempty\" jsonschema:\"title=version epoch,example=2,default=extracted from version\"`\n\tVersion         string    `yaml:\"version\" json:\"version\" jsonschema:\"title=version,example=v1.0.2,example=2.0.1\"`\n\tVersionSchema   string    `yaml:\"version_schema,omitempty\" json:\"version_schema,omitempty\" jsonschema:\"title=version schema,enum=semver,enum=none,default=semver\"`\n\tRelease         string    `yaml:\"release,omitempty\" json:\"release,omitempty\" jsonschema:\"title=version release,example=1\"`\n\tPrerelease      string    `yaml:\"prerelease,omitempty\" json:\"prerelease,omitempty\" jsonschema:\"title=version prerelease,default=extracted from version\"`\n\tVersionMetadata string    `yaml:\"version_metadata,omitempty\" json:\"version_metadata,omitempty\" jsonschema:\"title=version metadata,example=git\"`\n\tSection         string    `yaml:\"section,omitempty\" json:\"section,omitempty\" jsonschema:\"title=package section,example=default\"`\n\tPriority        string    `yaml:\"priority,omitempty\" json:\"priority,omitempty\" jsonschema:\"title=package priority,example=extra\"`\n\tMaintainer      string    `yaml:\"maintainer,omitempty\" json:\"maintainer,omitempty\" jsonschema:\"title=package maintainer,example=me@example.com\"`\n\tDescription     string    `yaml:\"description,omitempty\" json:\"description,omitempty\" jsonschema:\"title=package description\"`\n\tVendor          string    `yaml:\"vendor,omitempty\" json:\"vendor,omitempty\" jsonschema:\"title=package vendor,example=MyCorp\"`\n\tHomepage        string    `yaml:\"homepage,omitempty\" json:\"homepage,omitempty\" jsonschema:\"title=package homepage,example=https://example.com\"`\n\tLicense         string    `yaml:\"license,omitempty\" json:\"license,omitempty\" jsonschema:\"title=package license,example=MIT\"`\n\tChangelog       string    `yaml:\"changelog,omitempty\" json:\"changelog,omitempty\" jsonschema:\"title=package changelog,example=changelog.yaml,description=see https://github.com/goreleaser/chglog for more details\"`\n\tDisableGlobbing bool      `yaml:\"disable_globbing,omitempty\" json:\"disable_globbing,omitempty\" jsonschema:\"title=whether to disable file globbing,default=false\"`\n\tMTime           time.Time `yaml:\"mtime,omitempty\" json:\"mtime,omitempty\" jsonschema:\"title=time to set into the files generated by nFPM\"`\n\tTarget          string    `yaml:\"-\" json:\"-\"`\n}\n\nfunc (i *Info) Validate() error {\n\treturn Validate(i)\n}\n\n// GetChangeLog parses the provided changelog file.\nfunc (i *Info) GetChangeLog() (log *chglog.PackageChangeLog, err error) {\n\t// if the file does not exist chglog.Parse will just silently\n\t// create an empty changelog but we should notify the user instead\n\tif _, err = os.Stat(i.Changelog); errors.Is(err, fs.ErrNotExist) {\n\t\treturn nil, err\n\t}\n\n\tentries, err := chglog.Parse(i.Changelog)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &chglog.PackageChangeLog{\n\t\tName:    i.Name,\n\t\tEntries: entries,\n\t}, nil\n}\n\nfunc (i *Info) parseSemver() {\n\t// parse the version as a semver so we can properly split the parts\n\t// and support proper ordering for both rpm and deb\n\tif v, err := semver.NewVersion(i.Version); err == nil {\n\t\ti.Version = fmt.Sprintf(\"%d.%d.%d\", v.Major(), v.Minor(), v.Patch())\n\t\tif i.Prerelease == \"\" {\n\t\t\ti.Prerelease = v.Prerelease()\n\t\t}\n\n\t\tif i.VersionMetadata == \"\" {\n\t\t\ti.VersionMetadata = v.Metadata()\n\t\t}\n\t}\n}\n\n// Overridables contain the field which are overridable in a package.\ntype Overridables struct {\n\tReplaces   []string       `yaml:\"replaces,omitempty\" json:\"replaces,omitempty\" jsonschema:\"title=replaces directive,example=nfpm\"`\n\tProvides   []string       `yaml:\"provides,omitempty\" json:\"provides,omitempty\" jsonschema:\"title=provides directive,example=nfpm\"`\n\tDepends    []string       `yaml:\"depends,omitempty\" json:\"depends,omitempty\" jsonschema:\"title=depends directive,example=nfpm\"`\n\tRecommends []string       `yaml:\"recommends,omitempty\" json:\"recommends,omitempty\" jsonschema:\"title=recommends directive,example=nfpm\"`\n\tSuggests   []string       `yaml:\"suggests,omitempty\" json:\"suggests,omitempty\" jsonschema:\"title=suggests directive,example=nfpm\"`\n\tConflicts  []string       `yaml:\"conflicts,omitempty\" json:\"conflicts,omitempty\" jsonschema:\"title=conflicts directive,example=nfpm\"`\n\tContents   files.Contents `yaml:\"contents,omitempty\" json:\"contents,omitempty\" jsonschema:\"title=files to add to the package\"`\n\tUmask      os.FileMode    `yaml:\"umask,omitempty\" json:\"umask,omitempty\" jsonschema:\"title=umask for file contents,example=112\"`\n\tScripts    Scripts        `yaml:\"scripts,omitempty\" json:\"scripts,omitempty\" jsonschema:\"title=scripts to execute\"`\n\tRPM        RPM            `yaml:\"rpm,omitempty\" json:\"rpm,omitempty\" jsonschema:\"title=rpm-specific settings\"`\n\tDeb        Deb            `yaml:\"deb,omitempty\" json:\"deb,omitempty\" jsonschema:\"title=deb-specific settings\"`\n\tAPK        APK            `yaml:\"apk,omitempty\" json:\"apk,omitempty\" jsonschema:\"title=apk-specific settings\"`\n\tArchLinux  ArchLinux      `yaml:\"archlinux,omitempty\" json:\"archlinux,omitempty\" jsonschema:\"title=archlinux-specific settings\"`\n\tIPK        IPK            `yaml:\"ipk,omitempty\" json:\"ipk,omitempty\" jsonschema:\"title=ipk-specific settings\"`\n}\n\ntype ArchLinux struct {\n\tPkgbase  string           `yaml:\"pkgbase,omitempty\" json:\"pkgbase,omitempty\" jsonschema:\"title=explicitly specify the name used to refer to a split package, defaults to name\"`\n\tArch     string           `yaml:\"arch,omitempty\" json:\"arch,omitempty\" jsonschema:\"title=architecture in archlinux nomenclature\"`\n\tPackager string           `yaml:\"packager,omitempty\" json:\"packager,omitempty\" jsonschema:\"title=organization that packaged the software\"`\n\tScripts  ArchLinuxScripts `yaml:\"scripts,omitempty\" json:\"scripts,omitempty\" jsonschema:\"title=archlinux-specific scripts\"`\n}\n\ntype ArchLinuxScripts struct {\n\tPreUpgrade  string `yaml:\"preupgrade,omitempty\" json:\"preupgrade,omitempty\" jsonschema:\"title=preupgrade script\"`\n\tPostUpgrade string `yaml:\"postupgrade,omitempty\" json:\"postupgrade,omitempty\" jsonschema:\"title=postupgrade script\"`\n}\n\n// RPM is custom configs that are only available on RPM packages.\ntype RPM struct {\n\tArch        string       `yaml:\"arch,omitempty\" json:\"arch,omitempty\" jsonschema:\"title=architecture in rpm nomenclature\"`\n\tScripts     RPMScripts   `yaml:\"scripts,omitempty\" json:\"scripts,omitempty\" jsonschema:\"title=rpm-specific scripts\"`\n\tGroup       string       `yaml:\"group,omitempty\" json:\"group,omitempty\" jsonschema:\"title=package group,example=Unspecified\"`\n\tSummary     string       `yaml:\"summary,omitempty\" json:\"summary,omitempty\" jsonschema:\"title=package summary\"`\n\tCompression string       `yaml:\"compression,omitempty\" json:\"compression,omitempty\" jsonschema:\"title=compression algorithm to be used,enum=gzip,enum=lzma,enum=xz,default=gzip:-1\"`\n\tSignature   RPMSignature `yaml:\"signature,omitempty\" json:\"signature,omitempty\" jsonschema:\"title=rpm signature\"`\n\tPackager    string       `yaml:\"packager,omitempty\" json:\"packager,omitempty\" jsonschema:\"title=organization that actually packaged the software\"`\n\tPrefixes    []string     `yaml:\"prefixes,omitempty\" json:\"prefixes,omitempty\" jsonschema:\"title=Prefixes for relocatable packages\"`\n}\n\n// RPMScripts represents scripts only available on RPM packages.\ntype RPMScripts struct {\n\tPreTrans  string `yaml:\"pretrans,omitempty\" json:\"pretrans,omitempty\" jsonschema:\"title=pretrans script\"`\n\tPostTrans string `yaml:\"posttrans,omitempty\" json:\"posttrans,omitempty\" jsonschema:\"title=posttrans script\"`\n\tVerify    string `yaml:\"verify,omitempty\" json:\"verify,omitempty\" jsonschema:\"title=verify script\"`\n}\n\ntype PackageSignature struct {\n\t// PGP secret key, can be ASCII-armored\n\tKeyFile       string  `yaml:\"key_file,omitempty\" json:\"key_file,omitempty\" jsonschema:\"title=key file,example=key.gpg\"`\n\tKeyID         *string `yaml:\"key_id,omitempty\" json:\"key_id,omitempty\" jsonschema:\"title=key id,example=bc8acdd415bd80b3\"`\n\tKeyPassphrase string  `yaml:\"-\" json:\"-\"` // populated from environment variable\n\t// SignFn, if set, will be called with the package-specific data to sign.\n\t// For deb and rpm packages, data is the full package content.\n\t// For apk packages, data is the SHA1 digest of control tgz.\n\t//\n\t// This allows for signing implementations other than using a local file\n\t// (for example using a remote signer like KMS).\n\tSignFn func(data io.Reader) ([]byte, error) `yaml:\"-\" json:\"-\"` // populated when used as a library\n}\n\ntype RPMSignature struct {\n\tPackageSignature `yaml:\",inline\" json:\",inline\"`\n}\n\ntype APK struct {\n\tArch      string       `yaml:\"arch,omitempty\" json:\"arch,omitempty\" jsonschema:\"title=architecture in apk nomenclature\"`\n\tSignature APKSignature `yaml:\"signature,omitempty\" json:\"signature,omitempty\" jsonschema:\"title=apk signature\"`\n\tScripts   APKScripts   `yaml:\"scripts,omitempty\" json:\"scripts,omitempty\" jsonschema:\"title=apk scripts\"`\n}\n\ntype APKSignature struct {\n\tPackageSignature `yaml:\",inline\" json:\",inline\"`\n\t// defaults to <maintainer email>.rsa.pub\n\tKeyName string `yaml:\"key_name,omitempty\" json:\"key_name,omitempty\" jsonschema:\"title=key name,example=origin,default=maintainer_email.rsa.pub\"`\n}\n\ntype APKScripts struct {\n\tPreUpgrade  string `yaml:\"preupgrade,omitempty\" json:\"preupgrade,omitempty\" jsonschema:\"title=pre upgrade script\"`\n\tPostUpgrade string `yaml:\"postupgrade,omitempty\" json:\"postupgrade,omitempty\" jsonschema:\"title=post upgrade script\"`\n}\n\n// Deb is custom configs that are only available on deb packages.\ntype Deb struct {\n\tArch        string            `yaml:\"arch,omitempty\" json:\"arch,omitempty\" jsonschema:\"title=architecture in deb nomenclature\"`\n\tScripts     DebScripts        `yaml:\"scripts,omitempty\" json:\"scripts,omitempty\" jsonschema:\"title=scripts\"`\n\tTriggers    DebTriggers       `yaml:\"triggers,omitempty\" json:\"triggers,omitempty\" jsonschema:\"title=triggers\"`\n\tBreaks      []string          `yaml:\"breaks,omitempty\" json:\"breaks,omitempty\" jsonschema:\"title=breaks\"`\n\tSignature   DebSignature      `yaml:\"signature,omitempty\" json:\"signature,omitempty\" jsonschema:\"title=signature\"`\n\tCompression string            `yaml:\"compression,omitempty\" json:\"compression,omitempty\" jsonschema:\"title=compression algorithm to be used,enum=gzip,enum=xz,enum=none,default=gzip\"`\n\tFields      map[string]string `yaml:\"fields,omitempty\" json:\"fields,omitempty\" jsonschema:\"title=fields\"`\n\tPredepends  []string          `yaml:\"predepends,omitempty\" json:\"predepends,omitempty\" jsonschema:\"title=predepends directive,example=nfpm\"`\n}\n\ntype DebSignature struct {\n\tPackageSignature `yaml:\",inline\" json:\",inline\"`\n\t// Only debsign still supported\n\tMethod string `yaml:\"method,omitempty\" json:\"method,omitempty\" jsonschema:\"title=method role,enum=debsign,default=debsign\"`\n\t// origin, maint or archive (defaults to origin)\n\tType   string `yaml:\"type,omitempty\" json:\"type,omitempty\" jsonschema:\"title=signer role,enum=origin,enum=maint,enum=archive,default=origin\"`\n\tSigner string `yaml:\"signer,omitempty\" json:\"signer,omitempty\" jsonschema:\"title=signer\"`\n}\n\n// DebTriggers contains triggers only available for deb packages.\n// https://wiki.debian.org/DpkgTriggers\n// https://man7.org/linux/man-pages/man5/deb-triggers.5.html\ntype DebTriggers struct {\n\tInterest        []string `yaml:\"interest,omitempty\" json:\"interest,omitempty\" jsonschema:\"title=interest\"`\n\tInterestAwait   []string `yaml:\"interest_await,omitempty\" json:\"interest_await,omitempty\" jsonschema:\"title=interest await\"`\n\tInterestNoAwait []string `yaml:\"interest_noawait,omitempty\" json:\"interest_noawait,omitempty\" jsonschema:\"title=interest noawait\"`\n\tActivate        []string `yaml:\"activate,omitempty\" json:\"activate,omitempty\" jsonschema:\"title=activate\"`\n\tActivateAwait   []string `yaml:\"activate_await,omitempty\" json:\"activate_await,omitempty\" jsonschema:\"title=activate await\"`\n\tActivateNoAwait []string `yaml:\"activate_noawait,omitempty\" json:\"activate_noawait,omitempty\" jsonschema:\"title=activate noawait\"`\n}\n\n// DebScripts is scripts only available on deb packages.\ntype DebScripts struct {\n\tRules     string `yaml:\"rules,omitempty\" json:\"rules,omitempty\" jsonschema:\"title=rules\"`\n\tTemplates string `yaml:\"templates,omitempty\" json:\"templates,omitempty\" jsonschema:\"title=templates\"`\n\tConfig    string `yaml:\"config,omitempty\" json:\"config,omitempty\" jsonschema:\"title=config\"`\n}\n\n// IPK is custom configs that are only available on deb packages.\ntype IPK struct {\n\tABIVersion    string            `yaml:\"abi_version,omitempty\" json:\"abi_version,omitempty\" jsonschema:\"title=abi version\"`\n\tAlternatives  []IPKAlternative  `yaml:\"alternatives,omitempty\" json:\"alternatives,omitempty\" jsonschema:\"title=alternatives\"`\n\tArch          string            `yaml:\"arch,omitempty\" json:\"arch,omitempty\" jsonschema:\"title=architecture in deb nomenclature\"`\n\tAutoInstalled bool              `yaml:\"auto_installed,omitempty\" json:\"auto_installed,omitempty\" jsonschema:\"title=auto installed,default=false\"`\n\tEssential     bool              `yaml:\"essential,omitempty\" json:\"essential,omitempty\" jsonschema:\"title=whether package is essential,default=false\"`\n\tFields        map[string]string `yaml:\"fields,omitempty\" json:\"fields,omitempty\" jsonschema:\"title=fields\"`\n\tPredepends    []string          `yaml:\"predepends,omitempty\" json:\"predepends,omitempty\" jsonschema:\"title=predepends directive,example=nfpm\"`\n\tTags          []string          `yaml:\"tags,omitempty\" json:\"tags,omitempty\" jsonschema:\"title=tags\"`\n}\n\n// IPKAlternative represents an alternative for an IPK package.\ntype IPKAlternative struct {\n\tPriority int    `yaml:\"priority,omitempty\" json:\"priority,omitempty\" jsonschema:\"title=priority\"`\n\tTarget   string `yaml:\"target,omitempty\" json:\"target,omitempty\" jsonschema:\"title=target\"`\n\tLinkName string `yaml:\"link_name,omitempty\" json:\"link_name,omitempty\" jsonschema:\"title=link name\"`\n}\n\n// Scripts contains information about maintainer scripts for packages.\ntype Scripts struct {\n\tPreInstall  string `yaml:\"preinstall,omitempty\" json:\"preinstall,omitempty\" jsonschema:\"title=pre install\"`\n\tPostInstall string `yaml:\"postinstall,omitempty\" json:\"postinstall,omitempty\" jsonschema:\"title=post install\"`\n\tPreRemove   string `yaml:\"preremove,omitempty\" json:\"preremove,omitempty\" jsonschema:\"title=pre remove\"`\n\tPostRemove  string `yaml:\"postremove,omitempty\" json:\"postremove,omitempty\" jsonschema:\"title=post remove\"`\n}\n\n// ErrFieldEmpty happens when some required field is empty.\ntype ErrFieldEmpty struct {\n\tfield string\n}\n\nfunc (e ErrFieldEmpty) Error() string {\n\treturn fmt.Sprintf(\"package %s must be provided\", e.field)\n}\n\n// PrepareForPackager validates the configuration for the given packager and\n// prepares the contents for said packager.\nfunc PrepareForPackager(info *Info, packager string) (err error) {\n\tif info.Name == \"\" {\n\t\treturn ErrFieldEmpty{\"name\"}\n\t}\n\n\tif info.Arch == \"\" &&\n\t\t((packager == \"deb\" && info.Deb.Arch == \"\") ||\n\t\t\t(packager == \"rpm\" && info.RPM.Arch == \"\") ||\n\t\t\t(packager == \"apk\" && info.APK.Arch == \"\")) {\n\t\treturn ErrFieldEmpty{\"arch\"}\n\t}\n\tif info.Version == \"\" {\n\t\treturn ErrFieldEmpty{\"version\"}\n\t}\n\n\tinfo.Contents, err = files.PrepareForPackager(\n\t\tinfo.Contents,\n\t\tinfo.Umask,\n\t\tpackager,\n\t\tinfo.DisableGlobbing,\n\t\tinfo.MTime,\n\t)\n\n\treturn err\n}\n\n// Validate the given Info and returns an error if it is invalid. Validate will\n// no change the info's contents.\nfunc Validate(info *Info) (err error) {\n\tif info.Name == \"\" {\n\t\treturn ErrFieldEmpty{\"name\"}\n\t}\n\tif info.Arch == \"\" && (info.Deb.Arch == \"\" || info.RPM.Arch == \"\" || info.APK.Arch == \"\") {\n\t\treturn ErrFieldEmpty{\"arch\"}\n\t}\n\tif info.Version == \"\" {\n\t\treturn ErrFieldEmpty{\"version\"}\n\t}\n\n\tfor packager := range packagers {\n\t\t_, err := files.PrepareForPackager(\n\t\t\tinfo.Contents,\n\t\t\tinfo.Umask,\n\t\t\tpackager,\n\t\t\tinfo.DisableGlobbing,\n\t\t\tinfo.MTime,\n\t\t)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// WithDefaults set some sane defaults into the given Info.\nfunc WithDefaults(info *Info) *Info {\n\tif info.Platform == \"\" {\n\t\tinfo.Platform = \"linux\"\n\t}\n\tif info.Description == \"\" {\n\t\tinfo.Description = \"no description given\"\n\t}\n\tif info.Arch == \"\" {\n\t\tinfo.Arch = \"amd64\"\n\t}\n\tif strings.HasPrefix(info.Arch, \"mips\") {\n\t\tinfo.Arch = strings.NewReplacer(\n\t\t\t\"softfloat\", \"\",\n\t\t\t\"hardfloat\", \"\",\n\t\t).Replace(info.Arch)\n\t}\n\tif info.Version == \"\" {\n\t\tinfo.Version = \"v0.0.0-rc0\"\n\t}\n\tif info.Umask == 0 {\n\t\tinfo.Umask = 0o02\n\t}\n\tif info.MTime.IsZero() {\n\t\tinfo.MTime = modtime.FromEnv()\n\t}\n\tswitch info.VersionSchema {\n\tcase \"none\":\n\t\t// No change to the version or prerelease info set in the YAML file\n\t\tbreak\n\tcase \"semver\":\n\t\tfallthrough\n\tdefault:\n\t\tinfo.parseSemver()\n\t}\n\n\treturn info\n}\n\n// ErrSigningFailure is returned whenever something went wrong during\n// the package signing process. The underlying error can be unwrapped\n// and could be crypto-related or something that occurred while adding\n// the signature to the package.\ntype ErrSigningFailure struct {\n\tErr error\n}\n\nfunc (s *ErrSigningFailure) Error() string {\n\treturn fmt.Sprintf(\"signing error: %v\", s.Err)\n}\n\nfunc (s *ErrSigningFailure) Unwarp() error {\n\treturn s.Err\n}\n"
        },
        {
          "name": "nfpm_test.go",
          "type": "blob",
          "size": 16.6328125,
          "content": "package nfpm_test\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/mail\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/goreleaser/nfpm/v2\"\n\t\"github.com/goreleaser/nfpm/v2/files\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nvar mtime = time.Date(2023, 11, 5, 23, 15, 17, 0, time.UTC)\n\nfunc TestEnumerate(t *testing.T) {\n\tnfpm.RegisterPackager(\"deb\", nil)\n\tresult := nfpm.Enumerate()\n\trequire.NotEmpty(t, result)\n}\n\nfunc TestRegister(t *testing.T) {\n\tformat := \"TestRegister\"\n\tpkgr := &fakePackager{}\n\tnfpm.RegisterPackager(format, pkgr)\n\tgot, err := nfpm.Get(format)\n\trequire.NoError(t, err)\n\trequire.Equal(t, pkgr, got)\n}\n\nfunc TestGet(t *testing.T) {\n\tformat := \"TestGet\"\n\tgot, err := nfpm.Get(format)\n\trequire.Error(t, err)\n\trequire.EqualError(t, err, \"no packager registered for the format \"+format)\n\trequire.Nil(t, got)\n\tpkgr := &fakePackager{}\n\tnfpm.RegisterPackager(format, pkgr)\n\tgot, err = nfpm.Get(format)\n\trequire.NoError(t, err)\n\trequire.Equal(t, pkgr, got)\n}\n\nfunc TestDefaultsVersion(t *testing.T) {\n\tinfo := nfpm.WithDefaults(&nfpm.Info{\n\t\tVersion:       \"v1.0.0\",\n\t\tVersionSchema: \"semver\",\n\t})\n\trequire.NotEmpty(t, info.Platform)\n\trequire.Equal(t, \"1.0.0\", info.Version)\n\trequire.Equal(t, \"\", info.Release)\n\trequire.Equal(t, \"\", info.Prerelease)\n\n\tinfo = nfpm.WithDefaults(&nfpm.Info{\n\t\tVersion: \"v1.0.0-rc1\",\n\t})\n\trequire.Equal(t, \"1.0.0\", info.Version)\n\trequire.Equal(t, \"\", info.Release)\n\trequire.Equal(t, \"rc1\", info.Prerelease)\n\n\tinfo = nfpm.WithDefaults(&nfpm.Info{\n\t\tVersion: \"v1.0.0-beta1\",\n\t})\n\trequire.Equal(t, \"1.0.0\", info.Version)\n\trequire.Equal(t, \"\", info.Release)\n\trequire.Equal(t, \"beta1\", info.Prerelease)\n\n\tinfo = nfpm.WithDefaults(&nfpm.Info{\n\t\tVersion:    \"v1.0.0-1\",\n\t\tRelease:    \"2\",\n\t\tPrerelease: \"beta1\",\n\t})\n\trequire.Equal(t, \"1.0.0\", info.Version)\n\trequire.Equal(t, \"2\", info.Release)\n\trequire.Equal(t, \"beta1\", info.Prerelease)\n\n\tinfo = nfpm.WithDefaults(&nfpm.Info{\n\t\tVersion:    \"v1.0.0-1+xdg2\",\n\t\tRelease:    \"2\",\n\t\tPrerelease: \"beta1\",\n\t})\n\trequire.Equal(t, \"1.0.0\", info.Version)\n\trequire.Equal(t, \"2\", info.Release)\n\trequire.Equal(t, \"beta1\", info.Prerelease)\n\n\tinfo = nfpm.WithDefaults(&nfpm.Info{\n\t\tVersion:       \"this.is.my.version\",\n\t\tVersionSchema: \"none\",\n\t\tRelease:       \"2\",\n\t\tPrerelease:    \"beta1\",\n\t})\n\trequire.Equal(t, \"this.is.my.version\", info.Version)\n\trequire.Equal(t, \"2\", info.Release)\n\trequire.Equal(t, \"beta1\", info.Prerelease)\n}\n\nfunc TestDefaults(t *testing.T) {\n\tt.Run(\"all given\", func(t *testing.T) {\n\t\tmakeinfo := func() nfpm.Info {\n\t\t\treturn nfpm.Info{\n\t\t\t\tPlatform:    \"darwin\",\n\t\t\t\tVersion:     \"2.4.1\",\n\t\t\t\tDescription: \"no description given\",\n\t\t\t\tArch:        \"arm64\",\n\t\t\t\tMTime:       mtime,\n\t\t\t\tOverridables: nfpm.Overridables{\n\t\t\t\t\tUmask: 0o112,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tinfo := makeinfo()\n\t\tnfpm.WithDefaults(&info)\n\t\trequire.Equal(t, makeinfo(), info)\n\t})\n\tt.Run(\"none given\", func(t *testing.T) {\n\t\tt.Setenv(\"SOURCE_DATE_EPOCH\", strconv.FormatInt(mtime.Unix(), 10))\n\t\tgot := nfpm.WithDefaults(&nfpm.Info{})\n\t\trequire.Equal(t, nfpm.Info{\n\t\t\tPlatform:    \"linux\",\n\t\t\tArch:        \"amd64\",\n\t\t\tVersion:     \"0.0.0\",\n\t\t\tPrerelease:  \"rc0\",\n\t\t\tDescription: \"no description given\",\n\t\t\tMTime:       mtime,\n\t\t\tOverridables: nfpm.Overridables{\n\t\t\t\tUmask: 0o002,\n\t\t\t},\n\t\t}, *got)\n\t})\n\tt.Run(\"mips softfloat\", func(t *testing.T) {\n\t\tmakeinfo := func() nfpm.Info {\n\t\t\treturn nfpm.Info{\n\t\t\t\tPlatform: \"linux\",\n\t\t\t\tArch:     \"mips64softfloat\",\n\t\t\t}\n\t\t}\n\t\tinfo := makeinfo()\n\t\tnfpm.WithDefaults(&info)\n\t\trequire.Equal(t, \"mips64\", info.Arch)\n\t})\n\tt.Run(\"mips softfloat\", func(t *testing.T) {\n\t\tmakeinfo := func() nfpm.Info {\n\t\t\treturn nfpm.Info{\n\t\t\t\tPlatform: \"linux\",\n\t\t\t\tArch:     \"mips64hardfloat\",\n\t\t\t}\n\t\t}\n\t\tinfo := makeinfo()\n\t\tnfpm.WithDefaults(&info)\n\t\trequire.Equal(t, \"mips64\", info.Arch)\n\t})\n}\n\nfunc TestPrepareForPackager(t *testing.T) {\n\tt.Run(\"dirs\", func(t *testing.T) {\n\t\tinfo := nfpm.WithDefaults(&nfpm.Info{\n\t\t\tName:    \"as\",\n\t\t\tArch:    \"asd\",\n\t\t\tVersion: \"1.2.3\",\n\t\t\tOverridables: nfpm.Overridables{\n\t\t\t\tUmask: 0o032,\n\t\t\t\tContents: []*files.Content{\n\t\t\t\t\t{\n\t\t\t\t\t\tDestination: \"/usr/share/test\",\n\t\t\t\t\t\tType:        files.TypeDir,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tSource:      \"./testdata/contents.yaml\",\n\t\t\t\t\t\tDestination: \"asd\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tDestination: \"/usr/a\",\n\t\t\t\t\t\tType:        files.TypeDir,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\trequire.NoError(t, nfpm.PrepareForPackager(info, \"\"))\n\t\trequire.Len(t, info.Overridables.Contents, 5)\n\t\tasdFile := info.Overridables.Contents[0]\n\t\trequire.Equal(t, \"/asd\", asdFile.Destination)\n\t\trequire.Equal(t, files.TypeFile, asdFile.Type)\n\t\trequire.Equal(t, \"-rw-r--r--\", asdFile.FileInfo.Mode.String())\n\t\trequire.Equal(t, \"root\", asdFile.FileInfo.Owner)\n\t\trequire.Equal(t, \"root\", asdFile.FileInfo.Group)\n\t\tusrDir := info.Overridables.Contents[1]\n\t\trequire.Equal(t, \"/usr/\", usrDir.Destination)\n\t\trequire.Equal(t, files.TypeImplicitDir, usrDir.Type)\n\t\trequire.Equal(t, \"-rwxr-xr-x\", usrDir.FileInfo.Mode.String())\n\t\trequire.Equal(t, \"root\", usrDir.FileInfo.Owner)\n\t\trequire.Equal(t, \"root\", usrDir.FileInfo.Group)\n\t\taDir := info.Overridables.Contents[2]\n\t\trequire.Equal(t, \"/usr/a/\", aDir.Destination)\n\t\trequire.Equal(t, files.TypeDir, aDir.Type)\n\t\trequire.Equal(t, \"-rwxr-xr-x\", aDir.FileInfo.Mode.String())\n\t\trequire.Equal(t, \"root\", aDir.FileInfo.Owner)\n\t\trequire.Equal(t, \"root\", aDir.FileInfo.Group)\n\t})\n\n\tt.Run(\"config\", func(t *testing.T) {\n\t\trequire.NoError(t, nfpm.PrepareForPackager(&nfpm.Info{\n\t\t\tName:    \"as\",\n\t\t\tArch:    \"asd\",\n\t\t\tVersion: \"1.2.3\",\n\t\t\tOverridables: nfpm.Overridables{\n\t\t\t\tContents: []*files.Content{\n\t\t\t\t\t{\n\t\t\t\t\t\tSource:      \"./testdata/contents.yaml\",\n\t\t\t\t\t\tDestination: \"asd\",\n\t\t\t\t\t\tType:        files.TypeConfig,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, \"\"))\n\t})\n}\n\nfunc TestValidate(t *testing.T) {\n\tt.Run(\"dirs\", func(t *testing.T) {\n\t\tinfo := nfpm.Info{\n\t\t\tName:    \"as\",\n\t\t\tArch:    \"asd\",\n\t\t\tVersion: \"1.2.3\",\n\t\t\tOverridables: nfpm.Overridables{\n\t\t\t\tContents: []*files.Content{\n\t\t\t\t\t{\n\t\t\t\t\t\tDestination: \"/usr/share/test\",\n\t\t\t\t\t\tType:        files.TypeDir,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tSource:      \"./testdata/contents.yaml\",\n\t\t\t\t\t\tDestination: \"asd\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\trequire.NoError(t, nfpm.Validate(&info))\n\t\trequire.Len(t, info.Overridables.Contents, 2)\n\t})\n\n\tt.Run(\"config\", func(t *testing.T) {\n\t\trequire.NoError(t, nfpm.Validate(&nfpm.Info{\n\t\t\tName:    \"as\",\n\t\t\tArch:    \"asd\",\n\t\t\tVersion: \"1.2.3\",\n\t\t\tOverridables: nfpm.Overridables{\n\t\t\t\tContents: []*files.Content{\n\t\t\t\t\t{\n\t\t\t\t\t\tSource:      \"./testdata/contents.yaml\",\n\t\t\t\t\t\tDestination: \"asd\",\n\t\t\t\t\t\tType:        files.TypeConfig,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}))\n\t})\n}\n\nfunc TestValidateError(t *testing.T) {\n\tfor err, info := range map[string]*nfpm.Info{\n\t\t\"package name must be provided\": {},\n\t\t\"package arch must be provided\": {\n\t\t\tName: \"fo\",\n\t\t},\n\t\t\"package version must be provided\": {\n\t\t\tName: \"as\",\n\t\t\tArch: \"asd\",\n\t\t},\n\t} {\n\t\tfunc(inf *nfpm.Info, e string) {\n\t\t\tt.Run(e, func(t *testing.T) {\n\t\t\t\trequire.EqualError(t, nfpm.Validate(inf), e)\n\t\t\t})\n\t\t}(info, err)\n\t}\n}\n\nfunc parseAndValidate(filename string) (nfpm.Config, error) {\n\tconfig, err := nfpm.ParseFile(filename)\n\tif err != nil {\n\t\treturn config, fmt.Errorf(\"parse file: %w\", err)\n\t}\n\n\terr = config.Validate()\n\tif err != nil {\n\t\treturn config, fmt.Errorf(\"validate: %w\", err)\n\t}\n\n\terr = nfpm.PrepareForPackager(&config.Info, \"\")\n\tif err != nil {\n\t\treturn config, fmt.Errorf(\"prepare for packager: %w\", err)\n\t}\n\n\treturn config, nil\n}\n\nfunc TestParseFile(t *testing.T) {\n\tnfpm.ClearPackagers()\n\t_, err := parseAndValidate(\"./testdata/overrides.yaml\")\n\trequire.Error(t, err)\n\tnfpm.RegisterPackager(\"deb\", &fakePackager{})\n\tnfpm.RegisterPackager(\"rpm\", &fakePackager{})\n\tnfpm.RegisterPackager(\"apk\", &fakePackager{})\n\tnfpm.RegisterPackager(\"ipk\", &fakePackager{})\n\t_, err = parseAndValidate(\"./testdata/overrides.yaml\")\n\trequire.NoError(t, err)\n\t_, err = parseAndValidate(\"./testdata/doesnotexist.yaml\")\n\trequire.Error(t, err)\n\tt.Setenv(\"RPM_KEY_FILE\", \"my/rpm/key/file\")\n\tt.Setenv(\"TEST_RELEASE_ENV_VAR\", \"1234\")\n\tt.Setenv(\"TEST_PRERELEASE_ENV_VAR\", \"beta1\")\n\tt.Setenv(\"TEST_DESCRIPTION_ENV_VAR\", \"description\")\n\tconfig, err := parseAndValidate(\"./testdata/env-fields.yaml\")\n\trequire.NoError(t, err)\n\trequire.Equal(t, fmt.Sprintf(\"v%s\", os.Getenv(\"GOROOT\")), config.Version)\n\trequire.Equal(t, \"1234\", config.Release)\n\trequire.Equal(t, \"beta1\", config.Prerelease)\n\trequire.Equal(t, \"My description\", config.Description)\n\trequire.Equal(t, \"my/rpm/key/file\", config.RPM.Signature.KeyFile)\n\trequire.Equal(t, \"hard/coded/file\", config.Deb.Signature.KeyFile)\n\trequire.Equal(t, \"\", config.APK.Signature.KeyFile)\n}\n\nfunc TestParseEnhancedFile(t *testing.T) {\n\tconfig, err := parseAndValidate(\"./testdata/contents.yaml\")\n\trequire.NoError(t, err)\n\trequire.Equal(t, \"contents foo\", config.Name)\n\tshouldFind := 10\n\trequire.Len(t, config.Contents, shouldFind)\n}\n\nfunc TestParseEnhancedNestedGlobFile(t *testing.T) {\n\tconfig, err := parseAndValidate(\"./testdata/contents_glob.yaml\")\n\trequire.NoError(t, err)\n\tshouldFind := 5\n\trequire.Len(t, config.Contents, shouldFind)\n}\n\nfunc TestParseEnhancedNestedNoGlob(t *testing.T) {\n\tconfig, err := parseAndValidate(\"./testdata/contents_directory.yaml\")\n\trequire.NoError(t, err)\n\tshouldFind := 8\n\trequire.Len(t, config.Contents, shouldFind)\n\ttested := 0\n\tfor _, f := range config.Contents {\n\t\tif f.Type == files.TypeImplicitDir {\n\t\t\tcontinue\n\t\t}\n\n\t\tswitch f.Source {\n\t\tcase \"testdata/globtest/nested/b.txt\":\n\t\t\ttested++\n\t\t\trequire.Equal(t, \"/etc/foo/nested/b.txt\", f.Destination)\n\t\tcase \"testdata/globtest/multi-nested/subdir/c.txt\":\n\t\t\ttested++\n\t\t\trequire.Equal(t, \"/etc/foo/multi-nested/subdir/c.txt\", f.Destination)\n\t\tcase \"testdata/globtest/a.txt\":\n\t\t\ttested++\n\t\t\trequire.Equal(t, \"/etc/foo/a.txt\", f.Destination)\n\t\tdefault:\n\t\t\tt.Errorf(\"unknown source %q\", f.Source)\n\t\t}\n\t}\n\trequire.Equal(t, 3, tested)\n}\n\nfunc TestOptionsFromEnvironment(t *testing.T) {\n\tconst (\n\t\tglobalPass      = \"hunter2\"\n\t\tdebPass         = \"password123\"\n\t\trpmPass         = \"secret\"\n\t\tapkPass         = \"foobar\"\n\t\tplatform        = \"linux\"\n\t\tarch            = \"amd64\"\n\t\trelease         = \"3\"\n\t\tversion         = \"1.0.0\"\n\t\tvendor          = \"GoReleaser\"\n\t\tpackager        = \"nope\"\n\t\tmaintainerEmail = \"nope@example.com\"\n\t\thomepage        = \"https://nfpm.goreleaser.com\"\n\t\tvcsBrowser      = \"https://github.com/goreleaser/nfpm\"\n\t\tdescription     = \"barfoo\"\n\t)\n\n\tt.Run(\"platform\", func(t *testing.T) {\n\t\tt.Setenv(\"OS\", platform)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(\"name: foo\\nplatform: $OS\"))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, platform, info.Platform)\n\t})\n\n\tt.Run(\"arch\", func(t *testing.T) {\n\t\tt.Setenv(\"ARCH\", arch)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(\"name: foo\\narch: $ARCH\"))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, arch, info.Arch)\n\t})\n\n\tt.Run(\"version\", func(t *testing.T) {\n\t\tt.Setenv(\"VERSION\", version)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(\"name: foo\\nversion: $VERSION\"))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, version, info.Version)\n\t})\n\n\tt.Run(\"release\", func(t *testing.T) {\n\t\tt.Setenv(\"RELEASE\", release)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(\"name: foo\\nrelease: $RELEASE\"))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, release, info.Release)\n\t})\n\n\tt.Run(\"maintainer\", func(t *testing.T) {\n\t\tt.Setenv(\"GIT_COMMITTER_NAME\", packager)\n\t\tt.Setenv(\"GIT_COMMITTER_EMAIL\", maintainerEmail)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(`\nname: foo\nmaintainer: '\"$GIT_COMMITTER_NAME\" <$GIT_COMMITTER_EMAIL>'\n`))\n\t\trequire.NoError(t, err)\n\t\taddr := mail.Address{\n\t\t\tName:    packager,\n\t\t\tAddress: maintainerEmail,\n\t\t}\n\t\trequire.Equal(t, addr.String(), info.Maintainer)\n\t})\n\n\tt.Run(\"vendor\", func(t *testing.T) {\n\t\tt.Setenv(\"VENDOR\", vendor)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(\"name: foo\\nvendor: $VENDOR\"))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, vendor, info.Vendor)\n\t})\n\n\tt.Run(\"homepage\", func(t *testing.T) {\n\t\tt.Setenv(\"CI_PROJECT_URL\", homepage)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(\"name: foo\\nhomepage: $CI_PROJECT_URL\"))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, homepage, info.Homepage)\n\t})\n\n\tt.Run(\"description\", func(t *testing.T) {\n\t\tt.Setenv(\"DESCRIPTION\", description)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(\"name: foo\\ndescription: $DESCRIPTION\"))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, description, info.Description)\n\t})\n\n\tt.Run(\"global passphrase\", func(t *testing.T) {\n\t\tt.Setenv(\"NFPM_PASSPHRASE\", globalPass)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(\"name: foo\"))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, globalPass, info.Deb.Signature.KeyPassphrase)\n\t\trequire.Equal(t, globalPass, info.RPM.Signature.KeyPassphrase)\n\t\trequire.Equal(t, globalPass, info.APK.Signature.KeyPassphrase)\n\t})\n\n\tt.Run(\"specific passphrases\", func(t *testing.T) {\n\t\tt.Setenv(\"NFPM_PASSPHRASE\", globalPass)\n\t\tt.Setenv(\"NFPM_DEB_PASSPHRASE\", debPass)\n\t\tt.Setenv(\"NFPM_RPM_PASSPHRASE\", rpmPass)\n\t\tt.Setenv(\"NFPM_APK_PASSPHRASE\", apkPass)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(\"name: foo\"))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, debPass, info.Deb.Signature.KeyPassphrase)\n\t\trequire.Equal(t, rpmPass, info.RPM.Signature.KeyPassphrase)\n\t\trequire.Equal(t, apkPass, info.APK.Signature.KeyPassphrase)\n\t})\n\n\tt.Run(\"packager\", func(t *testing.T) {\n\t\tt.Setenv(\"PACKAGER\", packager)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(\"name: foo\\nrpm:\\n  packager: $PACKAGER\"))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, packager, info.RPM.Packager)\n\t})\n\n\tt.Run(\"depends\", func(t *testing.T) {\n\t\tt.Setenv(\"VERSION\", version)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(`---\nname: foo\noverrides:\n  deb:\n    depends:\n    - package (= ${VERSION})\n  rpm:\n    depends:\n    - package = ${VERSION}`))\n\t\trequire.NoError(t, err)\n\t\trequire.Len(t, info.Overrides[\"deb\"].Depends, 1)\n\t\trequire.Equal(t, \"package (= 1.0.0)\", info.Overrides[\"deb\"].Depends[0])\n\t\trequire.Len(t, info.Overrides[\"rpm\"].Depends, 1)\n\t\trequire.Equal(t, \"package = 1.0.0\", info.Overrides[\"rpm\"].Depends[0])\n\t})\n\n\tt.Run(\"depends-strips-empty\", func(t *testing.T) {\n\t\tt.Setenv(\"VERSION\", version)\n\t\tt.Setenv(\"PKG\", \"\")\n\t\tinfo, err := nfpm.Parse(strings.NewReader(`---\nname: foo\noverrides:\n  deb:\n    depends:\n    - ${PKG}\n    - package (= ${VERSION})\n    - ${PKG}\n    - ${PKG}\n  rpm:\n    depends:\n    - package = ${VERSION}\n    - ${PKG}`))\n\t\trequire.NoError(t, err)\n\t\trequire.Len(t, info.Overrides[\"deb\"].Depends, 1)\n\t\trequire.Equal(t, \"package (= 1.0.0)\", info.Overrides[\"deb\"].Depends[0])\n\t\trequire.Len(t, info.Overrides[\"rpm\"].Depends, 1)\n\t\trequire.Equal(t, \"package = 1.0.0\", info.Overrides[\"rpm\"].Depends[0])\n\t})\n\n\tt.Run(\"deb fields\", func(t *testing.T) {\n\t\tt.Setenv(\"CI_PROJECT_URL\", vcsBrowser)\n\t\tinfo, err := nfpm.Parse(strings.NewReader(`\nname: foo\ndeb:\n  fields:\n    Vcs-Browser: ${CI_PROJECT_URL}\n`))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, vcsBrowser, info.Deb.Fields[\"Vcs-Browser\"])\n\t})\n\n\tt.Run(\"contents\", func(t *testing.T) {\n\t\tt.Setenv(\"ARCH\", \"amd64\")\n\t\tt.Setenv(\"NAME\", \"foo\")\n\t\tinfo, err := nfpm.Parse(strings.NewReader(`\nname: foo\ncontents:\n- src: '${NAME}_${ARCH}'\n  dst: /usr/bin/${NAME}\n  expand: true\n- src: '${NAME}'\n  dst: /usr/bin/bar\n\noverrides:\n  deb:\n    contents:\n    - src: '${NAME}_${ARCH}'\n      dst: /debian/usr/bin/${NAME}\n      expand: true\n`))\n\t\trequire.NoError(t, err)\n\t\trequire.Equal(t, 2, info.Contents.Len())\n\t\tcontent1 := info.Contents[0]\n\t\trequire.Equal(t, \"/usr/bin/foo\", content1.Destination)\n\t\trequire.Equal(t, \"foo_amd64\", content1.Source)\n\t\tcontent2 := info.Contents[1]\n\t\trequire.Equal(t, \"/usr/bin/bar\", content2.Destination)\n\t\trequire.Equal(t, \"${NAME}\", content2.Source)\n\t\tcontent3 := info.Overrides[\"deb\"].Contents[0]\n\t\trequire.Equal(t, \"/debian/usr/bin/foo\", content3.Destination)\n\t\trequire.Equal(t, \"foo_amd64\", content3.Source)\n\t})\n}\n\nfunc TestOverrides(t *testing.T) {\n\tnfpm.RegisterPackager(\"deb\", &fakePackager{})\n\tnfpm.RegisterPackager(\"rpm\", &fakePackager{})\n\tnfpm.RegisterPackager(\"apk\", &fakePackager{})\n\n\tfile := \"./testdata/overrides.yaml\"\n\tconfig, err := nfpm.ParseFile(file)\n\trequire.NoError(t, err)\n\trequire.Equal(t, \"foo\", config.Name)\n\trequire.Equal(t, \"amd64\", config.Arch)\n\n\tfor _, format := range []string{\"apk\", \"deb\", \"rpm\"} {\n\t\tformat := format\n\t\tt.Run(format, func(t *testing.T) {\n\t\t\tpkg, err := config.Get(format)\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.Equal(t, []string{format + \"_depend\"}, pkg.Depends)\n\t\t\tfor _, f := range pkg.Contents {\n\t\t\t\tswitch f.Packager {\n\t\t\t\tcase format:\n\t\t\t\t\trequire.Contains(t, f.Destination, \"/\"+format)\n\t\t\t\tcase \"\":\n\t\t\t\t\trequire.Equal(t, \"/etc/foo/whatever.conf\", f.Destination)\n\t\t\t\tdefault:\n\t\t\t\t\tt.Fatalf(\"invalid packager: %s\", f.Packager)\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire.Equal(t, \"amd64\", pkg.Arch)\n\t\t\trequire.Equal(t, time.Date(2023, 0o1, 0o2, 0, 0, 0, 0, time.UTC), pkg.MTime)\n\t\t})\n\t}\n\n\tt.Run(\"no_overrides\", func(t *testing.T) {\n\t\tpkg, err := config.Get(\"doesnotexist\")\n\t\trequire.NoError(t, err)\n\t\trequire.Empty(t, pkg.Depends)\n\t})\n}\n\ntype fakePackager struct{}\n\nfunc (*fakePackager) ConventionalFileName(_ *nfpm.Info) string {\n\treturn \"\"\n}\n\nfunc (*fakePackager) Package(_ *nfpm.Info, _ io.Writer) error {\n\treturn nil\n}\n"
        },
        {
          "name": "rpm",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}