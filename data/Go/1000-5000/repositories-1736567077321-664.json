{
  "metadata": {
    "timestamp": 1736567077321,
    "page": 664,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "maxmcd/webtty",
      "stars": 2728,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03125,
          "content": ".DS_Store\n/webtty\ncoverage.out\n\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 0.3154296875,
          "content": "before:\n  hooks:\n    - go mod download\n\narchives:\n- replacements:\n    darwin: Darwin\n    linux: Linux\n    windows: Windows\n    386: i386\n    amd64: x86_64\n\nchecksum:\n  name_template: 'checksums.txt'\n\nsnapshot:\n  name_template: \"{{ .Tag }}-next\"\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n    - '^docs:'\n    - '^test:'\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2018 Max McDonnell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "client.go",
          "type": "blob",
          "size": 3.7392578125,
          "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"github.com/kr/pty\"\n\t\"github.com/maxmcd/webtty/pkg/sd\"\n\t\"github.com/mitchellh/colorstring\"\n\t\"github.com/pion/webrtc/v3\"\n\t\"golang.org/x/crypto/ssh/terminal\"\n)\n\ntype clientSession struct {\n\tsession\n\tdc          *webrtc.DataChannel\n\tofferString string\n}\n\nfunc sendTermSize(term *os.File, dcSend func(s string) error) error {\n\twinSize, err := pty.GetsizeFull(term)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tsize := fmt.Sprintf(`[\"set_size\",%d,%d,%d,%d]`,\n\t\twinSize.Rows, winSize.Cols, winSize.X, winSize.Y)\n\n\treturn dcSend(size)\n}\n\nfunc (cs *clientSession) dataChannelOnOpen() func() {\n\treturn func() {\n\t\tlog.Printf(\"Data channel '%s'-'%d'='%d' open.\\n\", cs.dc.Label(), cs.dc.ID(), cs.dc.MaxPacketLifeTime())\n\t\tcolorstring.Println(\"[bold]Terminal session started:\")\n\n\t\tif err := cs.makeRawTerminal(); err != nil {\n\t\t\tlog.Println(err)\n\t\t\tcs.errChan <- err\n\t\t}\n\n\t\tch := make(chan os.Signal, 1)\n\t\tsignal.Notify(ch, syscall.SIGWINCH)\n\t\tgo func() {\n\t\t\tfor range ch {\n\t\t\t\terr := sendTermSize(os.Stdin, cs.dc.SendText)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(err)\n\t\t\t\t\tcs.errChan <- err\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t\tch <- syscall.SIGWINCH // Initial resize.\n\t\tbuf := make([]byte, 1024)\n\t\tfor {\n\t\t\tnr, err := os.Stdin.Read(buf)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t\tcs.errChan <- err\n\t\t\t}\n\t\t\terr = cs.dc.Send(buf[0:nr])\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t\tcs.errChan <- err\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (cs *clientSession) dataChannelOnMessage() func(payload webrtc.DataChannelMessage) {\n\treturn func(p webrtc.DataChannelMessage) {\n\t\tif p.IsString {\n\t\t\tif string(p.Data) == \"quit\" {\n\t\t\t\tif cs.isTerminal {\n\t\t\t\t\tterminal.Restore(int(os.Stdin.Fd()), cs.oldTerminalState)\n\t\t\t\t}\n\t\t\t\tcs.errChan <- nil\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcs.errChan <- fmt.Errorf(`Unmatched string message: \"%s\"`, string(p.Data))\n\t\t} else {\n\t\t\tf := bufio.NewWriter(os.Stdout)\n\t\t\tf.Write(p.Data)\n\t\t\tf.Flush()\n\t\t}\n\t}\n}\n\nfunc (cs *clientSession) run() (err error) {\n\tif err = cs.init(); err != nil {\n\t\treturn\n\t}\n\n\tmaxPacketLifeTime := uint16(1000) // Arbitrary\n\tordered := true\n\tif cs.dc, err = cs.pc.CreateDataChannel(\"data\", &webrtc.DataChannelInit{\n\t\tOrdered:           &ordered,\n\t\tMaxPacketLifeTime: &maxPacketLifeTime,\n\t}); err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\tcs.dc.OnOpen(cs.dataChannelOnOpen())\n\tcs.dc.OnMessage(cs.dataChannelOnMessage())\n\n\tif cs.offer, err = sd.Decode(cs.offerString); err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\tif cs.offer.Key != \"\" {\n\t\tif err = cs.offer.Decrypt(); err != nil {\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\t}\n\toffer := webrtc.SessionDescription{\n\t\tType: webrtc.SDPTypeOffer,\n\t\tSDP:  cs.offer.Sdp,\n\t}\n\n\tif err = cs.pc.SetRemoteDescription(offer); err != nil {\n\t\tlog.Println(err)\n\t\treturn err\n\t}\n\t// Sets the LocalDescription, and starts our UDP listeners\n\tanswer, err := cs.pc.CreateAnswer(nil)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\t// Create channel that is blocked until ICE Gathering is complete\n\tgatherComplete := webrtc.GatheringCompletePromise(cs.pc)\n\n\terr = cs.pc.SetLocalDescription(answer)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\t// Block until ICE Gathering is complete\n\t<-gatherComplete\n\n\tanswerSd := sd.SessionDescription{\n\t\tSdp:   cs.pc.LocalDescription().SDP,\n\t\tKey:   cs.offer.Key,\n\t\tNonce: cs.offer.Nonce,\n\t}\n\tif cs.offer.Key != \"\" {\n\t\t// Encrypt with the shared keys from the offer\n\t\t_ = answerSd.Encrypt()\n\n\t\t// Don't upload the keys, the host has them\n\t\tanswerSd.Key = \"\"\n\t\tanswerSd.Nonce = \"\"\n\t}\n\n\tencodedAnswer := sd.Encode(answerSd)\n\tif cs.offer.TenKbSiteLoc == \"\" {\n\t\tfmt.Printf(\"Answer created. Send the following answer to the host:\\n\\n\")\n\t\tfmt.Println(encodedAnswer)\n\t} else {\n\t\tif err := create10kbFile(cs.offer.TenKbSiteLoc, encodedAnswer); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\terr = <-cs.errChan\n\tcs.cleanup()\n\treturn err\n}\n"
        },
        {
          "name": "client_test.go",
          "type": "blob",
          "size": 1.845703125,
          "content": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"testing\"\n\n\t\"github.com/kr/pty\"\n\t\"github.com/pion/webrtc/v3\"\n\t\"golang.org/x/crypto/ssh/terminal\"\n)\n\nfunc TestClientDataChannelOnMessage(t *testing.T) {\n\tcs := clientSession{}\n\tcs.errChan = make(chan error, 1)\n\tcs.oldTerminalState = &terminal.State{}\n\tonMessage := cs.dataChannelOnMessage()\n\tquitPayload := webrtc.DataChannelMessage{IsString: true, Data: []byte(\"quit\")}\n\tonMessage(quitPayload)\n\n\tselect {\n\tcase err := <-cs.errChan:\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\tdefault:\n\t\tt.Error(errors.New(\"should return errChan\"))\n\t}\n\n\tstdoutMock := tmpFile()\n\tstdout := os.Stdout\n\tos.Stdout = stdoutMock\n\tbinaryPayload := webrtc.DataChannelMessage{IsString: false, Data: []byte(\"s\")}\n\tonMessage(binaryPayload)\n\tos.Stdout = stdout\n\tstdoutMock.Seek(0, 0)\n\tmsg, _ := ioutil.ReadAll(stdoutMock)\n\tif string(msg) != \"s\" {\n\t\tt.Error(\"bytes not written to stdout\")\n\t}\n\n}\n\nfunc TestSendTermSize(t *testing.T) {\n\ths := hostSession{ptmxReady: true}\n\tc := exec.Command(\"sh\")\n\tvar err error\n\ths.ptmx, err = pty.Start(c)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tif err := pty.Setsize(hs.ptmx, &pty.Winsize{\n\t\tRows: 19,\n\t\tCols: 29,\n\t\tX:    9,\n\t\tY:    8,\n\t}); err != nil {\n\t\tt.Error(err)\n\t}\n\n\tdcSend := func(msg string) error {\n\t\tonMessage, hs := makeShPty(t)\n\t\tsize, err := pty.GetsizeFull(hs.ptmx)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\t\tif fmt.Sprintf(\"%v\", size) != \"&{0 0 0 0}\" {\n\t\t\tt.Error(\"wrong size\", size)\n\t\t}\n\t\tonMessage(webrtc.DataChannelMessage{IsString: true, Data: []byte(msg)})\n\t\tselect {\n\t\tcase err := <-hs.errChan:\n\t\t\tif err != nil {\n\t\t\t\tt.Error(err)\n\t\t\t}\n\t\tdefault:\n\n\t\t}\n\t\tsize, err = pty.GetsizeFull(hs.ptmx)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\t\tif fmt.Sprintf(\"%v\", size) != \"&{19 29 9 8}\" {\n\t\t\tt.Error(\"wrong size\", size)\n\t\t}\n\t\treturn nil\n\t}\n\tif err := sendTermSize(hs.ptmx, dcSend); err != nil {\n\t\tt.Error(err)\n\t}\n\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.296875,
          "content": "module github.com/maxmcd/webtty\n\ngo 1.12\n\nrequire (\n\tgithub.com/btcsuite/btcutil v0.0.0-20190316010144-3ac1210f4b38\n\tgithub.com/kr/pty v1.1.4\n\tgithub.com/mitchellh/colorstring v0.0.0-20190213212951-d06e56a500db\n\tgithub.com/pion/webrtc/v3 v3.1.29\n\tgolang.org/x/crypto v0.0.0-20220411220226-7b82a4e95df4\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 14.9716796875,
          "content": "github.com/btcsuite/btcutil v0.0.0-20190316010144-3ac1210f4b38 h1:GbQHMJ2u/geMPV1tbN7i7zARSoPAPuXWa44V0KYvJXU=\ngithub.com/btcsuite/btcutil v0.0.0-20190316010144-3ac1210f4b38/go.mod h1:+5NJ2+qvTyV9exUAL/rxXi3DcLg2Ts+ymUAY5y4NvMg=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=\ngithub.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=\ngithub.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/pty v1.1.4 h1:5Myjjh3JY/NaAi4IsUbHADytDyl1VE1Y9PXDlL+P/VQ=\ngithub.com/kr/pty v1.1.4/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/mitchellh/colorstring v0.0.0-20190213212951-d06e56a500db h1:62I3jR2EmQ4l5rM/4FEfDWcRD+abF5XlKShorW5LRoQ=\ngithub.com/mitchellh/colorstring v0.0.0-20190213212951-d06e56a500db/go.mod h1:l0dey0ia/Uv7NcFFVbCLtqEBQbrT4OCwCSKTEv6enCw=\ngithub.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=\ngithub.com/nxadm/tail v1.4.8/go.mod h1:+ncqLTQzXmGhMZNUePPaPqPvBxHAIsmXswZKocGu+AU=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.12.1/go.mod h1:zj2OWP4+oCPe1qIXoGWkgMRwljMUYCdkwsT2108oapk=\ngithub.com/onsi/ginkgo v1.16.4/go.mod h1:dX+/inL/fNMqNlz0e9LfyB9TswhZpCVdJM/Z6Vvnwo0=\ngithub.com/onsi/ginkgo v1.16.5/go.mod h1:+E8gABHa3K6zRBolWtd+ROzc/U5bkGt0FwiG042wbpU=\ngithub.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=\ngithub.com/onsi/gomega v1.10.1/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=\ngithub.com/onsi/gomega v1.17.0/go.mod h1:HnhC7FXeEQY45zxNK3PPoIUhzk/80Xly9PcubAlGdZY=\ngithub.com/pion/datachannel v1.5.2 h1:piB93s8LGmbECrpO84DnkIVWasRMk3IimbcXkTQLE6E=\ngithub.com/pion/datachannel v1.5.2/go.mod h1:FTGQWaHrdCwIJ1rw6xBIfZVkslikjShim5yr05XFuCQ=\ngithub.com/pion/dtls/v2 v2.1.3 h1:3UF7udADqous+M2R5Uo2q/YaP4EzUoWKdfX2oscCUio=\ngithub.com/pion/dtls/v2 v2.1.3/go.mod h1:o6+WvyLDAlXF7YiPB/RlskRoeK+/JtuaZa5emwQcWus=\ngithub.com/pion/ice/v2 v2.2.3 h1:kBVhmtMcI1L3bWDepilO9kKpCGpLQeppCuVxVS8obhE=\ngithub.com/pion/ice/v2 v2.2.3/go.mod h1:SWuHiOGP17lGromHTFadUe1EuPgFh/oCU6FCMZHooVE=\ngithub.com/pion/interceptor v0.1.10 h1:DJ2GjMGm4XGIQgMJxuEpdaExdY/6RdngT7Uh4oVmquU=\ngithub.com/pion/interceptor v0.1.10/go.mod h1:Lh3JSl/cbJ2wP8I3ccrjh1K/deRGRn3UlSPuOTiHb6U=\ngithub.com/pion/logging v0.2.2 h1:M9+AIj/+pxNsDfAT64+MAVgJO0rsyLnoJKCqf//DoeY=\ngithub.com/pion/logging v0.2.2/go.mod h1:k0/tDVsRCX2Mb2ZEmTqNa7CWsQPc+YYCB7Q+5pahoms=\ngithub.com/pion/mdns v0.0.5 h1:Q2oj/JB3NqfzY9xGZ1fPzZzK7sDSD8rZPOvcIQ10BCw=\ngithub.com/pion/mdns v0.0.5/go.mod h1:UgssrvdD3mxpi8tMxAXbsppL3vJ4Jipw1mTCW+al01g=\ngithub.com/pion/randutil v0.1.0 h1:CFG1UdESneORglEsnimhUjf33Rwjubwj6xfiOXBa3mA=\ngithub.com/pion/randutil v0.1.0/go.mod h1:XcJrSMMbbMRhASFVOlj/5hQial/Y8oH/HVo7TBZq+j8=\ngithub.com/pion/rtcp v1.2.6/go.mod h1:52rMNPWFsjr39z9B9MhnkqhPLoeHTv1aN63o/42bWE0=\ngithub.com/pion/rtcp v1.2.9 h1:1ujStwg++IOLIEoOiIQ2s+qBuJ1VN81KW+9pMPsif+U=\ngithub.com/pion/rtcp v1.2.9/go.mod h1:qVPhiCzAm4D/rxb6XzKeyZiQK69yJpbUDJSF7TgrqNo=\ngithub.com/pion/rtp v1.7.0/go.mod h1:bDb5n+BFZxXx0Ea7E5qe+klMuqiBrP+w8XSjiWtCUko=\ngithub.com/pion/rtp v1.7.4/go.mod h1:bDb5n+BFZxXx0Ea7E5qe+klMuqiBrP+w8XSjiWtCUko=\ngithub.com/pion/rtp v1.7.13 h1:qcHwlmtiI50t1XivvoawdCGTP4Uiypzfrsap+bijcoA=\ngithub.com/pion/rtp v1.7.13/go.mod h1:bDb5n+BFZxXx0Ea7E5qe+klMuqiBrP+w8XSjiWtCUko=\ngithub.com/pion/sctp v1.8.0/go.mod h1:xFe9cLMZ5Vj6eOzpyiKjT9SwGM4KpK/8Jbw5//jc+0s=\ngithub.com/pion/sctp v1.8.2 h1:yBBCIrUMJ4yFICL3RIvR4eh/H2BTTvlligmSTy+3kiA=\ngithub.com/pion/sctp v1.8.2/go.mod h1:xFe9cLMZ5Vj6eOzpyiKjT9SwGM4KpK/8Jbw5//jc+0s=\ngithub.com/pion/sdp/v3 v3.0.4 h1:2Kf+dgrzJflNCSw3TV5v2VLeI0s/qkzy2r5jlR0wzf8=\ngithub.com/pion/sdp/v3 v3.0.4/go.mod h1:bNiSknmJE0HYBprTHXKPQ3+JjacTv5uap92ueJZKsRk=\ngithub.com/pion/srtp/v2 v2.0.5 h1:ks3wcTvIUE/GHndO3FAvROQ9opy0uLELpwHJaQ1yqhQ=\ngithub.com/pion/srtp/v2 v2.0.5/go.mod h1:8k6AJlal740mrZ6WYxc4Dg6qDqqhxoRG2GSjlUhDF0A=\ngithub.com/pion/stun v0.3.5 h1:uLUCBCkQby4S1cf6CGuR9QrVOKcvUwFeemaC865QHDg=\ngithub.com/pion/stun v0.3.5/go.mod h1:gDMim+47EeEtfWogA37n6qXZS88L5V6LqFcf+DZA2UA=\ngithub.com/pion/transport v0.12.2/go.mod h1:N3+vZQD9HlDP5GWkZ85LohxNsDcNgofQmyL6ojX5d8Q=\ngithub.com/pion/transport v0.12.3/go.mod h1:OViWW9SP2peE/HbwBvARicmAVnesphkNkCVZIWJ6q9A=\ngithub.com/pion/transport v0.13.0 h1:KWTA5ZrQogizzYwPEciGtHPLwpAjE91FgXnyu+Hv2uY=\ngithub.com/pion/transport v0.13.0/go.mod h1:yxm9uXpK9bpBBWkITk13cLo1y5/ur5VQpG22ny6EP7g=\ngithub.com/pion/turn/v2 v2.0.8 h1:KEstL92OUN3k5k8qxsXHpr7WWfrdp7iJZHx99ud8muw=\ngithub.com/pion/turn/v2 v2.0.8/go.mod h1:+y7xl719J8bAEVpSXBXvTxStjJv3hbz9YFflvkpcGPw=\ngithub.com/pion/udp v0.1.1 h1:8UAPvyqmsxK8oOjloDk4wUt63TzFe9WEJkg5lChlj7o=\ngithub.com/pion/udp v0.1.1/go.mod h1:6AFo+CMdKQm7UiA0eUPA8/eVCTx8jBIITLZHc9DWX5M=\ngithub.com/pion/webrtc/v3 v3.1.29 h1:X/2LbFzBhU2h335azBGmdmrRZIChWTePrg4rwIw91ko=\ngithub.com/pion/webrtc/v3 v3.1.29/go.mod h1:bcD6vrgcflr6lkf3E8VEqnQT7Uf7y1AxcdUWYGKER1w=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/sclevine/agouti v3.0.0+incompatible/go.mod h1:b4WX9W9L1sfQKXeJf1mUTLZKJ48R1S7H23Ji7oFO5Bw=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1 h1:5TQK59W5E3v0r2duFAb7P95B6hEeOyEnHRa8MjYSMTY=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20220131195533-30dcbda58838/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.0.0-20220411220226-7b82a4e95df4 h1:kUhD7nTDoI3fVd9G4ORWrbV5NY0liEs/Jg2pv5f+bBA=\ngolang.org/x/crypto v0.0.0-20220411220226-7b82a4e95df4/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201201195509-5d6afe98e0b7/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20210119194325-5f4716e94777/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20211201190559-0a0e4e1bb54c/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220127200216-cd36cc0744dd/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/net v0.0.0-20220401154927-543a649e0bdd h1:zYlwaUHTmxuf6H7hwO2dgwqozQmH7zf4x+/qql4oVWc=\ngolang.org/x/net v0.0.0-20220401154927-543a649e0bdd/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210112080510-489259a85091/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e h1:fLOSk5Q00efkSvAm+4xcoXD+RRmLmmulPn5I3Y9F2EM=\ngolang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211 h1:JGgROgKl9N8DuW20oFS5gxc+lE67/N3FcwmBPMe7ArY=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20201224043029-2b0845dc783e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "host.go",
          "type": "blob",
          "size": 6.0751953125,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/kr/pty\"\n\t\"github.com/maxmcd/webtty/pkg/sd\"\n\t\"github.com/mitchellh/colorstring\"\n\t\"github.com/pion/webrtc/v3\"\n)\n\ntype hostSession struct {\n\tsession\n\tcmd            []string\n\tnonInteractive bool\n\toneWay         bool\n\tptmx           *os.File\n\tptmxReady      bool\n\ttmux           bool\n}\n\nfunc (hs *hostSession) dataChannelOnOpen() func() {\n\treturn func() {\n\t\tcolorstring.Println(\"[bold]Terminal session started:\")\n\n\t\tcmd := exec.Command(hs.cmd[0], hs.cmd[1:]...)\n\t\tvar err error\n\t\ths.ptmx, err = pty.Start(cmd)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\ths.errChan <- err\n\t\t\treturn\n\t\t}\n\t\ths.ptmxReady = true\n\n\t\tif !hs.nonInteractive {\n\t\t\tif err = hs.makeRawTerminal(); err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t\ths.errChan <- err\n\t\t\t\treturn\n\t\t\t}\n\t\t\tgo func() {\n\t\t\t\tif _, err = io.Copy(hs.ptmx, os.Stdin); err != nil {\n\t\t\t\t\tlog.Println(err)\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\n\t\tc := make(chan os.Signal, 1)\n\t\tsignal.Notify(c, os.Interrupt)\n\t\tgo func() {\n\t\t\tfor range c {\n\t\t\t\tlog.Println(\"Sigint\")\n\t\t\t\ths.errChan <- errors.New(\"sigint\")\n\t\t\t}\n\t\t}()\n\n\t\tbuf := make([]byte, 1024)\n\t\tfor {\n\t\t\tnr, err := hs.ptmx.Read(buf)\n\t\t\tif err != nil {\n\t\t\t\tif err == io.EOF {\n\t\t\t\t\terr = nil\n\t\t\t\t} else {\n\t\t\t\t\tlog.Println(err)\n\t\t\t\t}\n\t\t\t\ths.errChan <- err\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif !hs.nonInteractive {\n\t\t\t\tif _, err = os.Stdout.Write(buf[0:nr]); err != nil {\n\t\t\t\t\tlog.Println(err)\n\t\t\t\t\ths.errChan <- err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif err = hs.dc.Send(buf[0:nr]); err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t\ths.errChan <- err\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (hs *hostSession) dataChannelOnMessage() func(payload webrtc.DataChannelMessage) {\n\treturn func(p webrtc.DataChannelMessage) {\n\n\t\t// OnMessage can fire before onOpen\n\t\t// Let's wait for the pty session to be ready\n\t\tfor hs.ptmxReady != true {\n\t\t\ttime.Sleep(1 * time.Millisecond)\n\t\t}\n\n\t\tif p.IsString {\n\t\t\tif len(p.Data) > 2 && p.Data[0] == '[' && p.Data[1] == '\"' {\n\t\t\t\tvar msg []string\n\t\t\t\terr := json.Unmarshal(p.Data, &msg)\n\t\t\t\tif len(msg) == 0 {\n\t\t\t\t\tlog.Println(err)\n\t\t\t\t\ths.errChan <- err\n\t\t\t\t}\n\t\t\t\tif msg[0] == \"stdin\" {\n\t\t\t\t\ttoWrite := []byte(msg[1])\n\t\t\t\t\tif len(toWrite) == 0 {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\t_, err := hs.ptmx.Write([]byte(msg[1]))\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlog.Println(err)\n\t\t\t\t\t\ths.errChan <- err\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif msg[0] == \"set_size\" {\n\t\t\t\t\tvar size []int\n\t\t\t\t\t_ = json.Unmarshal(p.Data, &size)\n\t\t\t\t\tws, err := pty.GetsizeFull(hs.ptmx)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlog.Println(err)\n\t\t\t\t\t\ths.errChan <- err\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tws.Rows = uint16(size[1])\n\t\t\t\t\tws.Cols = uint16(size[2])\n\n\t\t\t\t\tif len(size) >= 5 {\n\t\t\t\t\t\tws.X = uint16(size[3])\n\t\t\t\t\t\tws.Y = uint16(size[4])\n\t\t\t\t\t}\n\n\t\t\t\t\tif err := pty.Setsize(hs.ptmx, ws); err != nil {\n\t\t\t\t\t\tlog.Println(err)\n\t\t\t\t\t\ths.errChan <- err\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif string(p.Data) == \"quit\" {\n\t\t\t\ths.errChan <- nil\n\t\t\t\treturn\n\t\t\t}\n\t\t\ths.errChan <- fmt.Errorf(\n\t\t\t\t`Unmatched string message: \"%s\"`,\n\t\t\t\tstring(p.Data),\n\t\t\t)\n\t\t} else {\n\t\t\t_, err := hs.ptmx.Write(p.Data)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t\ths.errChan <- err\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (hs *hostSession) onDataChannel() func(dc *webrtc.DataChannel) {\n\treturn func(dc *webrtc.DataChannel) {\n\t\ths.dc = dc\n\t\tdc.OnOpen(hs.dataChannelOnOpen())\n\t\tdc.OnMessage(hs.dataChannelOnMessage())\n\t}\n}\n\nfunc (hs *hostSession) mustReadStdin() (string, error) {\n\tvar input string\n\tfmt.Scanln(&input)\n\tsd, err := sd.Decode(input)\n\treturn sd.Sdp, err\n}\n\nfunc (hs *hostSession) createOffer() (err error) {\n\ths.pc.OnDataChannel(hs.onDataChannel())\n\n\t// Create unused DataChannel, the offer doesn't implictly have\n\t// any media sections otherwise\n\tif _, err = hs.pc.CreateDataChannel(\"offerer-channel\", nil); err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\t// Create an offer to send to the browser\n\toffer, err := hs.pc.CreateOffer(nil)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\t// Create channel that is blocked until ICE Gathering is complete\n\tgatherComplete := webrtc.GatheringCompletePromise(hs.pc)\n\n\terr = hs.pc.SetLocalDescription(offer)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\t// Block until ICE Gathering is complete\n\t<-gatherComplete\n\n\ths.offer = sd.SessionDescription{\n\t\tSdp: hs.pc.LocalDescription().SDP,\n\t}\n\tif hs.oneWay {\n\t\ths.offer.GenKeys()\n\t\ths.offer.Encrypt()\n\t\ths.offer.TenKbSiteLoc = randSeq(100)\n\t}\n\treturn\n}\n\nfunc (hs *hostSession) run() (err error) {\n\tif err = hs.init(); err != nil {\n\t\treturn\n\t}\n\tcolorstring.Printf(\"[bold]Setting up a WebTTY connection.\\n\\n\")\n\tif hs.oneWay {\n\t\tcolorstring.Printf(\n\t\t\t\"Warning: One-way connections rely on a third party to connect. \" +\n\t\t\t\t\"More info here: https://github.com/maxmcd/webtty#one-way-connections\\n\\n\")\n\t}\n\n\tif err = hs.createOffer(); err != nil {\n\t\treturn\n\t}\n\n\t// Output the offer in base64 so we can paste it in browser\n\tcolorstring.Printf(\"[bold]Connection ready. Here is your connection data:\\n\\n\")\n\tfmt.Printf(\"%s\\n\\n\", sd.Encode(hs.offer))\n\tcolorstring.Printf(`[bold]Paste it in the terminal after the webtty command` +\n\t\t\"\\n[bold]Or in a browser: [reset]https://maxmcd.github.io/webtty/\\n\\n\")\n\n\tif hs.oneWay == false {\n\t\tcolorstring.Println(\"[bold]When you have the answer, paste it below and hit enter:\")\n\t\t// Wait for the answer to be pasted\n\t\ths.answer.Sdp, err = hs.mustReadStdin()\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"Answer received, connecting...\")\n\t} else {\n\t\tbody, err := pollForResponse(hs.offer.TenKbSiteLoc)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\treturn err\n\t\t}\n\t\ths.answer, err = sd.Decode(body)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\treturn err\n\t\t}\n\t\ths.answer.Key = hs.offer.Key\n\t\ths.answer.Nonce = hs.offer.Nonce\n\t\tif err = hs.answer.Decrypt(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn hs.setHostRemoteDescriptionAndWait()\n}\n\nfunc (hs *hostSession) setHostRemoteDescriptionAndWait() (err error) {\n\t// Set the remote SessionDescription\n\tanswer := webrtc.SessionDescription{\n\t\tType: webrtc.SDPTypeAnswer,\n\t\tSDP:  hs.answer.Sdp,\n\t}\n\n\t// Apply the answer as the remote description\n\tif err = hs.pc.SetRemoteDescription(answer); err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\t// Wait to quit\n\terr = <-hs.errChan\n\ths.cleanup()\n\treturn\n}\n"
        },
        {
          "name": "host_test.go",
          "type": "blob",
          "size": 1.880859375,
          "content": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os/exec\"\n\t\"testing\"\n\n\t\"github.com/kr/pty\"\n\t\"github.com/pion/webrtc/v3\"\n)\n\nfunc TestHosttDataChannelOnMessage(t *testing.T) {\n\ths := hostSession{ptmxReady: true}\n\ths.errChan = make(chan error, 1)\n\tonMessage := hs.dataChannelOnMessage()\n\tquitPayload := webrtc.DataChannelMessage{IsString: true, Data: []byte(\"quit\")}\n\tonMessage(quitPayload)\n\n\tselect {\n\tcase err := <-hs.errChan:\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\tdefault:\n\t\tt.Error(errors.New(\"should return errChan\"))\n\t}\n\n\tstdoutMock := tmpFile()\n\ths.ptmx = stdoutMock\n\n\tbinaryPayload := webrtc.DataChannelMessage{IsString: false, Data: []byte(\"s\")}\n\tonMessage(binaryPayload)\n\tstdoutMock.Seek(0, 0)\n\tmsg, _ := ioutil.ReadAll(stdoutMock)\n\tif string(msg) != \"s\" {\n\t\tt.Error(\"bytes not written to stdout\")\n\t}\n\n}\n\nfunc makeShPty(t *testing.T) (func(p webrtc.DataChannelMessage), hostSession) {\n\ths := hostSession{ptmxReady: true}\n\ths.errChan = make(chan error, 1)\n\tonMessage := hs.dataChannelOnMessage()\n\tc := exec.Command(\"sh\")\n\tvar err error\n\t// redefine the global ptmx\n\ths.ptmx, err = pty.Start(c)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\treturn onMessage, hs\n}\n\nfunc TestClientSetSizeOnMessage(t *testing.T) {\n\tonMessage, hs := makeShPty(t)\n\n\tsizeOnlyPayload := webrtc.DataChannelMessage{IsString: true, Data: []byte(`[\"set_size\", 20, 30]`)}\n\tonMessage(sizeOnlyPayload)\n\n\tsize, err := pty.GetsizeFull(hs.ptmx)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tif fmt.Sprintf(\"%v\", size) != \"&{20 30 0 0}\" {\n\t\tt.Error(\"wrong size\", size)\n\t}\n\n\tsizeAndCursorPayload := webrtc.DataChannelMessage{IsString: true, Data: []byte(`[\"set_size\", 20, 30, 10, 11]`)}\n\tonMessage(sizeAndCursorPayload)\n\n\tsize, err = pty.GetsizeFull(hs.ptmx)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tif fmt.Sprintf(\"%v\", size) != \"&{20 30 10 11}\" {\n\t\tt.Error(\"wrong size\", size)\n\t}\n\tselect {\n\tcase err := <-hs.errChan:\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\tdefault:\n\n\t}\n}\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 1.509765625,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\toneWay := flag.Bool(\"o\", false, \"One-way connection with no response needed.\")\n\tverbose := flag.Bool(\"v\", false, \"Verbose logging\")\n\tnonInteractive := flag.Bool(\"non-interactive\", false, \"Set host to non-interactive\")\n\tni := flag.Bool(\"ni\", false, \"Set host to non-interactive\")\n\t_ = flag.Bool(\"cmd\", false, \"The command to run. Default is \\\"bash -l\\\"\\n\"+\n\t\t\"Because this flag consumes the remainder of the command line,\\n\"+\n\t\t\"all other args (if present) must appear before this flag.\\n\"+\n\t\t\"eg: webtty -o -v -ni -cmd docker run -it --rm alpine:latest sh\")\n\tstunServer := flag.String(\"s\", \"stun:stun.l.google.com:19302\", \"The stun server to use\")\n\n\tcmd := []string{\"bash\", \"-l\"}\n\tfor i, arg := range os.Args {\n\t\tif arg == \"-cmd\" {\n\t\t\tcmd = os.Args[i+1:]\n\t\t\tos.Args = os.Args[:i]\n\t\t}\n\t}\n\tflag.Parse()\n\tif *verbose {\n\t\tlog.SetFlags(log.LstdFlags | log.Lshortfile)\n\t} else {\n\t\tlog.SetFlags(0)\n\t\tlog.SetOutput(ioutil.Discard)\n\t}\n\targs := flag.Args()\n\tvar offerString string\n\tif len(args) > 0 {\n\t\tofferString = args[len(args)-1]\n\t}\n\n\tvar err error\n\tif len(offerString) == 0 {\n\t\thc := hostSession{\n\t\t\toneWay:         *oneWay,\n\t\t\tcmd:            cmd,\n\t\t\tnonInteractive: *nonInteractive || *ni,\n\t\t}\n\t\thc.stunServers = []string{*stunServer}\n\t\terr = hc.run()\n\t} else {\n\t\tcc := clientSession{\n\t\t\tofferString: offerString,\n\t\t}\n\t\tcc.stunServers = []string{*stunServer}\n\t\terr = cc.run()\n\t}\n\tif err != nil {\n\t\tfmt.Printf(\"Quitting with an unexpected error: \\\"%s\\\"\\n\", err)\n\t}\n}\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 3.666015625,
          "content": "![](https://raw.githubusercontent.com/maxmcd/webtty/70f7911f4e69dffe3eb3cfd6ad9dd8060dc10dd5/out.gif)\n\n## WebTTY\n\nWebTTY allows you to share a terminal session from your machine using WebRTC. You can pair with a friend without setting up a proxy server, debug servers behind NATs, and more. WebTTY also works in-browser. You can connect to a WebTTY session from this static page:  [https://maxmcd.github.io/webtty/](https://maxmcd.github.io/webtty/)\n\n### Status\n\nThere are a handful of bugs to fix, but everything works pretty well at the moment. Please open an issue if you find a bug.\n\n### Installation\n\nDownload a binary from the releases page: https://github.com/maxmcd/webtty/releases\n\nOr, install directly with Go. WebTTY requires Go version 1.9 or higher.\n\nFor Go versions below 1.7:\n```bash\ngo get -u github.com/maxmcd/webtty\n```\n\nFor Go versions 1.7 and up:\n```bash\ngo install github.com/maxmcd/webtty@latest\n```\n\n\nThere were recent breaking api changes in the pion/webrtc library. Make sure to run `go get -u github.com/pion/webrtc` if you're running into any installation errors.\n\n### Running\n\n```shell\n> webtty -h\nUsage of webtty:\n  -cmd\n        The command to run. Default is \"bash -l\"\n        Because this flag consumes the remainder of the command line,\n        all other args (if present) must appear before this flag.\n        eg: webtty -o -v -ni -cmd docker run -it --rm alpine:latest sh\n  -ni\n        Set host to non-interactive\n  -non-interactive\n        Set host to non-interactive\n  -o    One-way connection with no response needed.\n  -s string\n        The stun server to use (default \"stun:stun.l.google.com:19302\")\n  -v    Verbose logging\n```\n\n#### On the host computer\n\n```shell\n> webtty\nSetting up a WebTTY connection.\n\nConnection ready. Here is your connection data:\n\n25FrtDEjh7yuGdWMk7R9PhzPmphst7FdsotL11iXa4r9xyTM4koAauQYivKViWYBskf8habEc5vHf3DZge5VivuAT79uSCvzc6aL2M11kcUn9rzb4DX4...\n\nPaste it in the terminal after the webtty command\nOr in a browser: https://maxmcd.github.io/webtty/\n\nWhen you have the answer, paste it below and hit enter.\n```\n\n#### On the client computer\n\n```shell\n> webtty 25FrtDEjh7yuGdWMk7R9PhzPmphst7FdsotL11iXa4r9xyTM4koAauQYivKViWYBskf8habEc5vHf3DZge5VivuAT79uSCvzc6aL2M11kcUn9rzb4DX4...\n\n```\n\n### Terminal Size\n\nBy default WebTTY forces the size of the client terminal. This means the host size can frequently render incorrectly. One way you can fix this is by using tmux:\n\n```bash\ntmux new-session -s shared\n# in another terminal\nwebtty -ni -cmd tmux attach-session -t shared\n```\nTmux will now resize the session to the smallest terminal viewport.\n\n### One-way Connections\n\nOne-way connections can be enabled with the `-o` flag. A typical webrtc connection requires an SDP exchange between both parties. By default, WebTTY will create an SDP offer and wait for you to enter the SDP answer. With the `-o` flag the initial offer is sent along with a public url that the receiver is expected to post their response to. This uses my service [10kb.site](https://www.10kb.site). The host then polls the url continually until it gets an answer.\n\nI think this somewhat violates the spirit of this tool because it relies on a third party service. However, one-way connections allow you to do very cool things. Eg: I can have a build server output a WebTTY connection string on error and allow anyone to attach to the session.\n\nSDP descriptions are encrypted when uploaded and encryption keys are shared with the connection data to decrypt. So presumably the service being compromised is not problematic.\n\nVery open to any ideas on how to enable trusted one-way connections. Please open an issue or reach out if you have thoughts. For now, the `-o` flag will print a warning and link to this explanation.\n"
        },
        {
          "name": "session.go",
          "type": "blob",
          "size": 1.794921875,
          "content": "package main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/maxmcd/webtty/pkg/sd\"\n\t\"github.com/pion/webrtc/v3\"\n\t\"golang.org/x/crypto/ssh/terminal\"\n)\n\ntype session struct {\n\t// mutex?\n\toldTerminalState *terminal.State\n\tstunServers      []string\n\terrChan          chan error\n\tisTerminal       bool\n\tpc               *webrtc.PeerConnection\n\toffer            sd.SessionDescription\n\tanswer           sd.SessionDescription\n\tdc               *webrtc.DataChannel\n}\n\nfunc (s *session) init() (err error) {\n\ts.errChan = make(chan error, 1)\n\ts.isTerminal = terminal.IsTerminal(int(os.Stdin.Fd()))\n\tif err = s.createPeerConnection(); err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\treturn\n}\n\nfunc (s *session) cleanup() {\n\tif s.dc != nil {\n\t\t// TODO: check dc state?\n\t\tif err := s.dc.SendText(\"quit\"); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n\tif s.isTerminal {\n\t\tif err := s.restoreTerminalState(); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n\n}\n\nfunc (s *session) restoreTerminalState() error {\n\tif s.oldTerminalState != nil {\n\t\treturn terminal.Restore(int(os.Stdin.Fd()), s.oldTerminalState)\n\t}\n\treturn nil\n}\n\nfunc (s *session) makeRawTerminal() error {\n\tvar err error\n\ts.oldTerminalState, err = terminal.MakeRaw(int(os.Stdin.Fd()))\n\treturn err\n}\n\nfunc (s *session) createPeerConnection() (err error) {\n\tconfig := webrtc.Configuration{\n\t\tICEServers: []webrtc.ICEServer{\n\t\t\t{\n\t\t\t\tURLs: s.stunServers,\n\t\t\t},\n\t\t},\n\t}\n\ts.pc, err = webrtc.NewPeerConnection(config)\n\tif err != nil {\n\t\treturn\n\t}\n\t// fmt.Println(s.pc)\n\t// fmt.Println(s.pc.SignalingState)\n\t// fmt.Println(s.pc.ConnectionState)\n\n\t// if s.pc.OnDataChannel == nil {\n\t// \treturn errors.New(\"Couldn't create a peerConnection\")\n\t// }\n\ts.pc.OnICEConnectionStateChange(func(connectionState webrtc.ICEConnectionState) {\n\t\tlog.Printf(\"ICE Connection State has changed: %s\\n\", connectionState.String())\n\t})\n\treturn\n}\n"
        },
        {
          "name": "ten_kb_site.go",
          "type": "blob",
          "size": 1.5673828125,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"time\"\n)\n\nvar tenKbUpURL = \"https://up.10kb.site/\"\nvar tenKbURL = \"https://www.10kb.site/\"\n\nfunc create10kbFile(path, body string) error {\n\tresp, err := http.Post(\n\t\ttenKbUpURL+path, \"text/plain\", bytes.NewBuffer([]byte(body)))\n\tif err != nil {\n\t\treturn err\n\t}\n\tif resp.StatusCode != http.StatusCreated {\n\t\tbody, _ := ioutil.ReadAll(resp.Body)\n\t\treturn fmt.Errorf(\n\t\t\t\"Resp %d 10kb.site error: %s\", resp.StatusCode, string(body))\n\t}\n\treturn nil\n}\n\nfunc read10kbFile(path string) (int, string, error) {\n\tresp, err := http.Get(fmt.Sprintf(\"%s%s\", tenKbURL, path))\n\tif err != nil {\n\t\treturn 0, \"\", err\n\t}\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif resp.StatusCode != http.StatusNotFound && resp.StatusCode != http.StatusOK {\n\t\treturn resp.StatusCode, \"\", fmt.Errorf(\n\t\t\t\"Resp %d 10kb.site error: %s\", resp.StatusCode, string(body))\n\t}\n\tif err != nil {\n\t\treturn resp.StatusCode, \"\", err\n\t}\n\treturn resp.StatusCode, string(body), nil\n}\n\nfunc pollForResponse(path string) (body string, err error) {\n\tvar sc int\n\t// timeout?\n\tfor {\n\t\tsc, body, err = read10kbFile(path)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tif sc == http.StatusOK {\n\t\t\treturn\n\t\t}\n\t\tif sc == http.StatusNotFound {\n\t\t\ttime.Sleep(300 * time.Millisecond)\n\t\t}\n\t}\n}\n\nfunc randSeq(n int) string {\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\tletters := []rune(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\t// antiLig = []rune(\"acemnorsuvwxz\")\n\tb := make([]rune, n)\n\tfor i := range b {\n\t\tb[i] = letters[r.Intn(len(letters))]\n\t}\n\treturn string(b)\n}\n"
        },
        {
          "name": "ten_kb_site_test.go",
          "type": "blob",
          "size": 2.3642578125,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestCreate10kbFile(t *testing.T) {\n\tpath := randSeq(100)\n\tbody := \"secret\"\n\terrorBody := randSeq(10*1000 + 1)\n\n\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif \"/\"+path != r.URL.String() {\n\t\t\tt.Errorf(\"wrong path: %s\", r.URL)\n\t\t}\n\t\tbytes, err := ioutil.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\n\t\tif len(bytes) > 10*1000 {\n\t\t\tw.WriteHeader(http.StatusUnprocessableEntity)\n\t\t\tw.Write([]byte(\"to long\"))\n\t\t\treturn\n\t\t}\n\t\tif string(bytes) != body {\n\t\t\tt.Error(\"body is wrong\")\n\t\t}\n\t\tw.WriteHeader(http.StatusCreated)\n\t}))\n\ttenKbUpURL = ts.URL + \"/\"\n\n\terr := create10kbFile(path, body)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\n\terr = create10kbFile(path, errorBody)\n\tif err == nil {\n\t\tt.Error(\"should have errored\")\n\t}\n\tif !strings.Contains(err.Error(), fmt.Sprintf(\"%d\", http.StatusUnprocessableEntity)) {\n\t\tt.Error(err.Error())\n\t}\n}\n\nfunc TestRead10kbFile(t *testing.T) {\n\tpath := randSeq(100)\n\n\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif \"/not-found.txt\" == r.URL.String() {\n\t\t\tw.WriteHeader(http.StatusNotFound)\n\t\t\treturn\n\t\t}\n\t\tif \"/err\" == r.URL.String() {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tif \"/\"+path != r.URL.String() {\n\t\t\tt.Errorf(\"wrong path: %s\", r.URL)\n\t\t}\n\t\tw.Write([]byte(\"body\"))\n\t}))\n\ttenKbURL = ts.URL + \"/\"\n\n\tstatus, body, err := read10kbFile(path)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tif status != http.StatusOK {\n\t\tt.Error(status)\n\t}\n\tif body != \"body\" {\n\t\tt.Error(body)\n\t}\n\n\tstatus, body, err = read10kbFile(\"not-found.txt\")\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tif status != http.StatusNotFound {\n\t\tt.Error(status)\n\t}\n\tif body != \"\" {\n\t\tt.Error(body)\n\t}\n\n\tstatus, body, err = read10kbFile(\"err\")\n\tif err == nil {\n\t\tt.Error(\"should have errored\")\n\t}\n\tif !strings.Contains(err.Error(), fmt.Sprintf(\"%d\", http.StatusInternalServerError)) {\n\t\tt.Error(err.Error())\n\t}\n\n}\n\nfunc TestPollForResponse(t *testing.T) {\n\tvar count int\n\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tcount++\n\t\tif count < 3 {\n\t\t\tw.WriteHeader(http.StatusNotFound)\n\t\t\treturn\n\t\t}\n\t\tw.Write([]byte(\"body\"))\n\t}))\n\ttenKbURL = ts.URL + \"/\"\n\n\tbody, err := pollForResponse(\"path\")\n\tif body != \"body\" {\n\t\tt.Error(body)\n\t}\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\n}\n"
        },
        {
          "name": "test_utils.go",
          "type": "blob",
          "size": 0.1728515625,
          "content": "package main\n\nimport \"os\"\n\nfunc tmpFile() *os.File {\n\ttmpdir := os.TempDir()\n\tfile, err := os.Create(tmpdir + \"/\" + randSeq(10))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn file\n}\n"
        },
        {
          "name": "web-client",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}