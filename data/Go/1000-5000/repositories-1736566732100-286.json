{
  "metadata": {
    "timestamp": 1736566732100,
    "page": 286,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xo/xo",
      "stars": 3757,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1767578125,
          "content": "_examples/**/*.xo.* linguist-generated\n**/*.go.tpl linguist-language=go\n**/*.yaml.tpl linguist-language=yaml\n**/*.json.tpl linguist-language=json\n**/*.dot.tpl linguist-language=dot\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.115234375,
          "content": "/xo\n/xo.exe\n/build/\n/x/\n/tmp/\n/test/\n\n*.txt\n*.db\n*.dot\n*.json\n*.yaml\n*.yml\n*.sqlite3\n*.sqlite3-journal\n*.svg\n*.xo.sql\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2023 Kenneth Shaw\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.8427734375,
          "content": "# xo\n\n`xo` is a command-line tool to generate _idiomatic_ code for different\nlanguages code based on a database schema or a custom query.\n\n<p align=\"center\">\n  <a href=\"#installing\" title=\"Installing\">Installing</a> |\n  <a href=\"#building\" title=\"Building\">Building</a> |\n  <a href=\"#using\" title=\"Using\">Using</a> |\n  <a href=\"https://github.com/xo/xo/releases\" title=\"Releases\">Releases</a>\n</p>\n\n[![Releases][release-status]][Releases]\n[![Discord Discussion][discord-status]][discord]\n\n[releases]: https://github.com/xo/xo/releases \"Releases\"\n[release-status]: https://img.shields.io/github/v/release/xo/xo?display_name=tag&sort=semver \"Latest Release\"\n[discord]: https://discord.gg/WDWAgXwJqN \"Discord Discussion\"\n[discord-status]: https://img.shields.io/discord/829150509658013727.svg?label=Discord&logo=Discord&colorB=7289da&style=flat-square \"Discord Discussion\"\n\n#### Supported languages\n\nAt the moment, `xo` only supports [Go](https://golang.org). Support for other\nlanguages will come soon.\n\n#### How it works\n\nIn schema mode, `xo` connects to your database and generates code using Go\ntemplates. `xo` works by using database metadata and SQL introspection queries to\ndiscover the types and relationships contained within a schema, and applying a\nstandard set of base (or customized) Go [templates](templates) against the\ndiscovered relationships.\n\nCurrently, `xo` can generate types for tables, enums, stored procedures, and\ncustom SQL queries for PostgreSQL, MySQL, Oracle, Microsoft SQL Server, and\nSQLite3 databases.\n\n> **Note:** While the code generated by xo is production quality, it is not the\n> goal, nor the intention for xo to be a \"silver bullet,\" nor to completely\n> eliminate the manual authoring of SQL / Go code.\n\nIn query mode, `xo` parses your query to generate code from Go templates.\nIt finds related tables in your database to ensure type safety.\n\n## Database Feature Support\n\nThe following is a matrix of the feature support for each database:\n\n|              |     PostgreSQL     |       MySQL        |       Oracle       | Microsoft SQL Server |       SQLite       |\n| ------------ | :----------------: | :----------------: | :----------------: | :------------------: | :----------------: |\n| Models       | :white_check_mark: | :white_check_mark: | :white_check_mark: |  :white_check_mark:  | :white_check_mark: |\n| Primary Keys | :white_check_mark: | :white_check_mark: | :white_check_mark: |  :white_check_mark:  | :white_check_mark: |\n| Foreign Keys | :white_check_mark: | :white_check_mark: | :white_check_mark: |  :white_check_mark:  | :white_check_mark: |\n| Indexes      | :white_check_mark: | :white_check_mark: | :white_check_mark: |  :white_check_mark:  | :white_check_mark: |\n| Stored Procs | :white_check_mark: | :white_check_mark: | :white_check_mark: |  :white_check_mark:  | :white_check_mark: |\n| Functions    | :white_check_mark: | :white_check_mark: | :white_check_mark: |  :white_check_mark:  | :white_check_mark: |\n| ENUM types   | :white_check_mark: | :white_check_mark: |                    |                      |                    |\n| Custom types | :white_check_mark: |                    |                    |                      |                    |\n\n## Installing\n\n`xo` can be installed [via Release][], [via Homebrew][], [via AUR][], [via\nScoop][] or [via Go][]:\n\n[via Release]: #installing-via-release\n[via Homebrew]: #installing-via-homebrew-macos-and-linux\n[via AUR]: #installing-via-aur-arch-linux\n[via Scoop]: #installing-via-scoop-windows\n[via Go]: #installing-via-go\n\n### Installing via Release\n\n1. [Download a release for your platform][releases]\n2. Extract the `xo` or `xo.exe` file from the `.tar.bz2` or `.zip` file\n3. Move the extracted executable to somewhere on your `$PATH` (Linux/macOS) or\n   `%PATH%` (Windows)\n\n### Installing via Homebrew (macOS and Linux)\n\nInstall `xo` from the [`xo/xo` tap][xo-tap] in the usual way with the [`brew`\ncommand][homebrew]:\n\n```sh\n# install\n$ brew install xo/xo/xo\n```\n\n### Installing via AUR (Arch Linux)\n\nInstall `xo` from the [Arch Linux AUR][aur] in the usual way with the [`yay`\ncommand][yay]:\n\n```sh\n# install\n$ yay -S xo-cli\n```\n\nAlternately, build and [install using `makepkg`][arch-makepkg]:\n\n```sh\n# clone package repo and make/install package\n$ git clone https://aur.archlinux.org/xo-cli.git && cd xo-cli\n$ makepkg -si\n==> Making package: xo-cli 0.4.4-1 (Sat 11 Nov 2023 02:28:28 PM WIB)\n==> Checking runtime dependencies...\n==> Checking buildtime dependencies...\n==> Retrieving sources...\n...\n```\n\n### Installing via Scoop (Windows)\n\nInstall `xo` using [Scoop](https://scoop.sh):\n\n```powershell\n# Optional: Needed to run a remote script the first time\n> Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n\n# install scoop if not already installed\n> irm get.scoop.sh | iex\n\n# install xo with scoop\n> scoop install xo\n```\n\n### Installing via Go\n\nInstall `xo` in the usual Go fashion:\n\n```sh\n# install latest xo version\n$ go install github.com/xo/xo@latest\n```\n\n## Quickstart\n\nThe following is a quick overview of using `xo` on the command-line:\n\n```sh\n# Make an output directory for generated code.\n$ mkdir -p models\n\n# Generate code from your Postgres schema. (Default output folder is models)\n$ xo schema postgres://user:pass@host/dbname\n\n# Generate code from a Microsoft SQL schema using a custom template directory (see notes below)\n$ mkdir -p mssqlmodels\n$ xo schema mssql://user:pass@host/dbname -o mssqlmodels --src custom/templates\n\n# Generate code from a custom SQL query for Postgres\n$ xo query postgres://user:pass@host/dbname -M -B -2 -T AuthorResult << ENDSQL\nSELECT\n  a.name::varchar AS name,\n  b.type::integer AS my_type\nFROM authors a\n  INNER JOIN authortypes b ON a.id = b.author_id\nWHERE\n  a.id = %%authorID int%%\nLIMIT %%limit int%%\nENDSQL\n\n# Build generated code - verify it compiles\n$ go build ./models/\n$ go build ./mssqlmodels/\n```\n\n## Command Line Options\n\nThe following are `xo`'s command-line commands, arguments, and options:\n\n```sh\n$ xo --help-long\nusage: xo [<flags>] <command> [<args> ...]\n\nFlags:\n      --help     Show context-sensitive help (also try --help-long and\n                 --help-man).\n  -v, --verbose  enable verbose output\n      --version  display version and exit\n\nCommands:\n  help [<command>...]\n    Show help.\n\n\n  query [<flags>] <DSN>\n    Generate code for a database custom query from a template.\n\n    -s, --schema=<name>            database schema name\n    -t, --template=go              template type (createdb, dot, go, json, yaml;\n                                   default: go)\n    -f, --suffix=<ext>             file extension suffix for generated files\n                                   (otherwise set by template type)\n    -o, --out=models               out path (default: models)\n    -a, --append                   enable append mode\n    -S, --single=<file>            enable single file output\n    -D, --debug                    debug generated code (writes generated code\n                                   to disk without post processing)\n    -Q, --query=\"\"                 custom database query (uses stdin if not\n                                   provided)\n    -T, --type=<name>              type name\n        --type-comment=\"\"          type comment\n    -F, --func=<name>              func name\n        --func-comment=\"\"          func comment\n    -M, --trim                     enable trimming whitespace\n    -B, --strip                    enable stripping type casts\n    -1, --one                      enable returning single (only one) result\n    -l, --flat                     enable returning unstructured values\n    -X, --exec                     enable exec (no introspection performed)\n    -I, --interpolate              enable interpolation of embedded params\n    -L, --delimiter=%%             delimiter used for embedded params (default:\n                                   %%)\n    -Z, --fields=<field>           override field names for results\n    -U, --allow-nulls              allow result fields with NULL values\n    -d, --src=<path>               template source directory\n    -2, --go-not-first             disable package comment (ie, not first\n                                   generated file)\n        --go-int32=int             int32 type (default: int)\n        --go-uint32=uint           uint32 type (default: uint)\n        --go-pkg=<name>            package name\n        --go-tag=\"\" ...            build tags\n        --go-import=\"\" ...         package imports\n        --go-uuid=<pkg>            uuid type package\n        --go-custom=<name>         package name for custom types\n        --go-conflict=Val          name conflict suffix (default: Val)\n        --go-initialism=<val> ...  add initialism (i.e ID, API, URI)\n        --go-esc=none ...          escape fields (none, schema, table, column,\n                                   all; default: none)\n    -g, --go-field-tag=<tag>       field tag\n        --go-context=only          context mode (disable, both, only; default:\n                                   only)\n        --go-inject=\"\"             insert code into generated file headers\n        --go-inject-file=<file>    insert code into generated file headers from\n                                   a file\n        --go-legacy                enables legacy v1 template funcs\n        --go-enum-table-prefix     enables table name prefix to enums\n        --json-indent=\"  \"         indent spacing\n        --json-ugly                disable indentation\n\n  schema [<flags>] <DSN>\n    Generate code for a database schema from a template.\n\n    -s, --schema=<name>            database schema name\n    -t, --template=go              template type (createdb, dot, go, json, yaml;\n                                   default: go)\n    -f, --suffix=<ext>             file extension suffix for generated files\n                                   (otherwise set by template type)\n    -o, --out=models               out path (default: models)\n    -a, --append                   enable append mode\n    -S, --single=<file>            enable single file output\n    -D, --debug                    debug generated code (writes generated code\n                                   to disk without post processing)\n    -k, --fk-mode=smart            foreign key resolution mode (smart, parent,\n                                   field, key; default: smart)\n    -i, --include=<glob> ...       include types (<type>)\n    -e, --exclude=<glob> ...       exclude types/fields (<type>[.<field>])\n    -j, --use-index-names          use index names as defined in schema for\n                                   generated code\n    -d, --src=<path>               template source directory\n        --createdb-fmt=<path>      fmt command (default:\n                                   /home/ken/.npm-global/bin/sql-formatter)\n        --createdb-fmt-opts=<opts> ...\n                                   fmt options (default: -u, -l={{ . }}, -i=2,\n                                   --lines-between-queries=2)\n        --createdb-constraint      enable constraint name in output (postgres,\n                                   mysql, sqlite3)\n        --createdb-escape=none     escape mode (none, types, all; default: none)\n        --createdb-engine=\"\"       mysql table engine (default: InnoDB)\n        --createdb-trim-comment    trim leading comment from views and procs\n                                   (--no-createdb-trim-comment)\n        --dot-defaults=\"\" ...      default statements (default: node\n                                   [shape=none, margin=0])\n        --dot-bold                 bold header row\n        --dot-color=\"\"             header color (default: lightblue)\n        --dot-row=\"\"               row value template (default: {{ .Name }}: {{\n                                   .Type.Type }})\n        --dot-direction            enable edge directions\n    -2, --go-not-first             disable package comment (ie, not first\n                                   generated file)\n        --go-int32=int             int32 type (default: int)\n        --go-uint32=uint           uint32 type (default: uint)\n        --go-pkg=<name>            package name\n        --go-tag=\"\" ...            build tags\n        --go-import=\"\" ...         package imports\n        --go-uuid=<pkg>            uuid type package\n        --go-custom=<name>         package name for custom types\n        --go-conflict=Val          name conflict suffix (default: Val)\n        --go-initialism=<val> ...  add initialism (i.e ID, API, URI)\n        --go-esc=none ...          escape fields (none, schema, table, column,\n                                   all; default: none)\n    -g, --go-field-tag=<tag>       field tag\n        --go-context=only          context mode (disable, both, only; default:\n                                   only)\n        --go-inject=\"\"             insert code into generated file headers\n        --go-inject-file=<file>    insert code into generated file headers from\n                                   a file\n        --go-legacy                enables legacy v1 template funcs\n        --go-enum-table-prefix     enables table name prefix to enums\n        --json-indent=\"  \"         indent spacing\n        --json-ugly                disable indentation\n        --postgres-oids            enable postgres OIDs\n\n  dump [<flags>] <out>\n    Dump internal templates to path.\n\n    -t, --template=go   template type (createdb, dot, go, json, yaml; default:\n                        go)\n    -f, --suffix=<ext>  file extension suffix for generated files (otherwise set\n                        by template type)\n```\n\n## About Base Templates\n\n`xo` provides a set of generic \"base\" [templates](templates) for each of the\nsupported databases, but it is understood these templates are not suitable for\nevery organization or every schema out there. As such, you can author your own\ncustom templates, or modify the base templates available in the `xo` source\ntree, and use those with `xo` by a passing a directory path via the `--src`\nflag.\n\nFor non-trivial schemas, custom templates are the most practical, common, and\nbest way to use `xo` (see below quickstart and related example).\n\n### Custom Template Quickstart\n\nThe following is a quick overview of copying the base templates contained in\nthe `xo` project's [`templates/`](templates) directory, editing to suit, and\nusing with `xo`:\n\n```sh\n# Create a working directory\n$ mkdir -p my-tpl\n\n# Dump an embedded template to disk\n$ xo dump -t createdb my-tpl\n\n# edit base template files\n$ vi my-tpl/*.go.tpl\n\n# see command line options for the template\n$ xo schema --src my-tpl --help\n\n# generate a schema using the custom template\n$ xo schema --src my-tpl -o models postgres://user:pass@host/db\n```\n\nSee the Custom Template example below for more information on adapting the base\ntemplates in the `xo` source tree for use within your own project.\n\n### Storing Project Templates\n\nIdeally, custom templates for your project/schema should be stored alongside\nyour project. and generated as part of an automated build pipeline using `go\ngenerate`:\n\n```sh\n# Add to custom xo command to go generate:\n$ tee -a gen.go << END\npackage mypackage\n\n//go:generate xo postgres://user:pass@host/db -o models --src templates\nEND\n\n# Run go generate\n$ go generate\n\n# Add custom templates and gen.go to project\n$ git add templates gen.go && git commit -m 'Adding custom xo templates for models'\n```\n\n> **Note**: via the `--template`/`-t` parameter of `xo dump` you can generate\n> other templates with `xo`. The default template is the `go` template.\n\n### Template Language/Syntax\n\n`xo` templates are standard Go text templates. Please see the [documentation\nfor Go's standard `text/template` package](https://pkg.go.dev/text/template)\nfor information concerning the syntax, logic, and variable use within Go\ntemplates.\n\n### Template Context and File Layout\n\nThe contexts (ie, the `.` identifier in templates) made available to custom\ntemplates can be found in [templates/types.go](templates/types.go)\n(see below table for more information on which file uses which type).\n\nEach language, has its own set of templates for `$TYPE` and are\navailable in the [templates/](templates).\n\n|        Template File        | [Type](templates/types.go) | Description                                                                            |\n| :-------------------------: | :------------------------: | -------------------------------------------------------------------------------------- |\n|        hdr.xo.\\*.tpl        |                            | Base template. Executed with content for a template.                                   |\n|        db.xo.\\*.tpl         |                            | Package level template with base types and interface data. Generated once per package. |\n|    schema/enum.xo.\\*.tpl    |            Enum            | Template for schema enum type definitions. Generates types and related methods.        |\n| schema/foreignkey.xo.\\*.tpl |         ForeignKey         | Template for foreign key relationships. Generates related method.                      |\n|   schema/index.xo.\\*.tpl    |           Index            | Template for schema indexes. Generates related method.                                 |\n|    schema/proc.xo.\\*.tpl    |            Proc            | Template to generate functions to call defined stored procedures in the db.            |\n|  schema/typedef.xo.\\*.tpl   |            Type            | Template for schema table/views.                                                       |\n|   query/custom.xo.\\*.tpl    |           Query            | Template for custom query execution.                                                   |\n|   query/typedef.xo.\\*.tpl   |            Type            | Template for custom query's generated type.                                            |\n\nFor example, Go has [`templates/gotpl/schema/foreignkey.xo.go.tpl`](templates/gotpl/schema/foreignkey.xo.go.tpl)\nwhich defines the template used by `xo` for generating a function to get the\nforeign key type in Go. The templates are designed to be Database agnostic, so\nthey are used for both PostgreSQL and Microsoft SQL the same, and all other\nsupported database types. The template is passed a different instance of\n`templates.ForeignKey` instance (for each foreign key in a table). To get the\n`Name` field in from `ForeignKey`, the template can use ` {{ .Data.Name }}`, or\nany other field similarly.\n\n## Examples\n\n### Example: End-to-End\n\nPlease see the [booktest example](_examples/booktest) for a full end-to-end\nexample for each supported database, showcasing how to use a database schema\nwith `xo`, and the resulting code generated by `xo`.\n\nAdditionally, please see the [`northwind`](_examples/northwind) and\n[`django`](_examples/django) for a demonstration of running `xo` against larger\nschema and against databases from other frameworks. Please note that these\nexamples are works in progress, and may not work properly in all scenarios.\n\n### Example: Ignoring Fields\n\nSometimes you may wish to have the database manage the values of columns\ninstead of having them managed by code generated by `xo`. As such, when you\nneed `xo` to ignore fields for a database schema, you can use the `-e` or\n`--exclude` flag. For example, a common use case is to define a table with\n`created_at` and/or `modified_at` timestamps fields, where the database is\nresponsible for setting column values on `INSERT` and `UPDATE`, respectively.\n\nConsider the following PostgreSQL schema where a `users` table has a\n`created_at` and `modified_at` field, where `created_at` has a default value of\n`now()` and where `modified_at` is updated by a trigger on `UPDATE`:\n\n```postgresql\nCREATE TABLE users (\n  id          SERIAL PRIMARY KEY,\n  name        text NOT NULL DEFAULT '' UNIQUE,\n  created_at  timestamptz   default now(),\n  modified_at timestamptz   default now()\n);\n\nCREATEOR REPLACE FUNCTION update_modified_column() RETURNS TRIGGER AS $$\nBEGIN\n    NEW.modified_at= now();\nRETURN NEW;\nEND;\n$$language 'plpgsql';\n\nCREATE TRIGGER update_users_modtime BEFORE UPDATE ON users\n  FOR EACH ROW EXECUTE PROCEDURE update_modified_column();\n```\n\nWe can ensure that these columns are managed by PostgreSQL and not by the\napplication logic but by `xo` by passing the `--exclude` or `-e` flag:\n\n```sh\n# Ignore special fields\n$ xo schema postgres://user:pass@host/db -e users.created_at -e users.modified_at\n# or, To ignore these fields in all tables\n$ xo schema postgres://user:pass@host/db -e *.created_at -e *.modified_at\n```\n\n### Example: Custom Template -- adding a `GetMostRecent` lookup for all tables (Go)\n\nOften, a schema has a common layout/pattern, such as every table having a\n`created_at` and `modified_at` field (as in the PostgreSQL schema in the\nprevious example). It is then a common use-case to have a `GetMostRecent`\nlookup for each table type, retrieving the most recently modified rows for each\ntable (up to some limit, N).\n\nTo accomplish this with `xo`, we will need to create our own set of custom\ntemplates, and then add a `GetMostRecent` lookup to the `.type.go.tpl`\ntemplate.\n\nFirst, we dump the base `xo` Go template:\n\n```sh\n$ mkdir -p my-tpl\n\n$ xo dump my-tpl\n```\n\nWe can now modify the templates to suit our specific schema, adding lookups,\nhelpers, or anything else necessary for our schema.\n\nTo add a `GetMostRecent` lookup, we edit our copy of the `typedef.xo.go.tpl`\ntemplate:\n\n```sh\n$ vi templates/gotpl/schema/typedef.xo.go.tpl\n```\n\nAnd add the following templated `GetMostRecent` func at the end of the file:\n\n```go\n// GetMostRecent{{ $type.Name }} returns n most recent rows from '{{ $table }}',\n// ordered by \"created_at\" in descending order.\nfunc GetMostRecent{{ $type.Name }}(ctx context.Context, db DB, n int) ([]*{{ $type.Name }}, error) {\n    const sqlstr = `SELECT ` +\n        `{{ $type.Fields \"created_at\" \"modified_at\" }}` +\n        `FROM {{ $table }} ` +\n        `ORDER BY created_at DESC LIMIT $1`\n\n    rows, err := db.QueryContext(ctx, sqlstr, n)\n    if err != nil {\n        return nil, logerror(err)\n    }\n    defer rows.Close()\n\n    // load results\n    var res []*{{ $type.Name }}\n    for rows.Next() {\n        {{ $short }} := {{ $type.Name }}{\n        {{- if $type.PrimaryKey }}\n            _exists: true,\n        {{ end -}}\n        }\n        // scan\n        if err := rows.Scan({{ fieldnames $type.Fields (print \"&\" $short) }}); err != nil {\n            return nil, logerror(err)\n        }\n        res = append(res, &{{ $short }})\n    }\n    return res, nil\n}\n```\n\nWe can then use the templates in conjunction with `xo` to generate our \"model\"\ncode:\n\n```sh\n$ xo schema postgres://user:pass@localhost/dbname --src templates/\n```\n\nThere will now be a `GetMostRecentUsers` func defined in `models/user.xo.go`,\nwhich can be used as follows:\n\n```go\ndb, err := dburl.Open(\"postgres://user:pass@localhost/dbname\")\nif err != nil { /* ... */ }\n\n// retrieve 15 most recent items\nmostRecentUsers, err := models.GetMostRecentUsers(context.Background(), db, 15)\nif err != nil { /* ... */ }\nfor _, user := range users {\n    log.Printf(\"got user: %+v\", user)\n}\n```\n\n## Using SQL Drivers\n\nPlease note that the base `xo` templates do not import any SQL drivers. It is\nleft for the user of `xo`'s generated code to import the actual drivers. For\nreference, these are the expected drivers to use with the code generated by\n`xo`:\n\n| Database (driver)            | Package                                                                    |\n| ---------------------------- | -------------------------------------------------------------------------- |\n| PostgreSQL (postgres)        | [github.com/lib/pq](https://github.com/lib/pq)                             |\n| SQLite3 (sqlite3)            | [github.com/mattn/go-sqlite3](https://github.com/mattn/go-sqlite3)         |\n| MySQL (mysql)                | [github.com/go-sql-driver/mysql](https://github.com/go-sql-driver/mysql)   |\n| Microsoft SQL Server (mssql) | [github.com/microsoft/go-mssqldb](https://github.com/microsoft/go-mssqldb) |\n| Oracle (ora)                 | [github.com/sijms/go-ora/v2](https://github.com/sijms/go-ora/v2)           |\n\nAdditionally, please see below for usage notes on specific SQL database\ndrivers.\n\n### MySQL (mysql)\n\nIf your schema or custom query contains table or column names that need to be\nescaped using any of the `--escape-*` options, you must pass the `sql_mode=ansi`\noption to the MySQL driver:\n\n```sh\n$ xo --escape-all 'mysql://user:pass@host/?parseTime=true&sql_mode=ansi' -o models\n```\n\nAnd when opening a database connection:\n\n```go\ndb, err := dburl.Open(\"mysql://user:pass@host/?parseTime=true&sql_mode=ansi\")\n```\n\nAdditionally, when working with date/time column types in MySQL, one should\npass the `parseTime=true` option to the MySQL driver:\n\n```sh\n$ xo schema 'mysql://user:pass@host/dbname?parseTime=true' -o models\n```\n\nAnd when opening a database connection:\n\n```go\ndb, err := dburl.Open(\"mysql://user:pass@host/dbname?parseTime=true\")\n```\n\n### SQLite3 (sqlite3)\n\nWhile not required, one should specify the `loc=auto` option when using `xo`\nwith a SQLite3 database:\n\n```sh\n$ xo schema 'file:mydatabase.sqlite3?loc=auto' -o models\n```\n\nAnd when opening a database connection:\n\n```go\ndb, err := dburl.Open(\"file:mydatabase.sqlite3?loc=auto\")\n```\n\n## About Primary Keys\n\nFor row inserts `xo` determines whether the primary key is\nautomatically generated by the DB or must be provided by the application for the\ntable row being inserted. For example a table that has a primary key that is\nalso a foreign key to another table, or a table that has multiple primary keys\nin a many-to-many link table, it is desired that the application provide the\nprimary key(s) for the insert rather than the DB.\n\n`xo` will query the schema to determine if the database provides an automatic\nprimary key and if the table does not provide one then it will require that the\napplication provide the primary key for the object passed to the Insert method.\nBelow is information on how the logic works for each database type to determine\nif the DB automatically provides the PK.\n\n### PostgreSQL Auto PK Logic\n\n- Checks for a sequence that is owned by the table in question.\n\n### MySQL Auto PK Logic\n\n- Checks for an autoincrement row in the information_schema for the table in\n  question.\n\n### SQLite Auto PK Logic\n\n- Checks the SQL that is used to generate the table contains\n  the _AUTOINCREMENT_ keyword.\n- Checks that the table was created with the primary key type of _INTEGER_.\n\nIf either of the above conditions are satisfied then the PK is determined to be\nautomatically provided by the DB. For the case of integer PK's when you want to\noverride that the PK be manually provided then you can define the key type as\n_INT_ instead of _INTEGER_, for example as in the following many-to-many link\ntable:\n\n```sql\n  CREATE TABLE site_contacts (\n  contact_id\tINT NOT NULL,\n  site_id\tINT NOT NULL,\n  PRIMARY KEY(contact_id,siteid),\n  FOREIGN KEY(contact_id) REFERENCES contacts (contact_id),\n  FOREIGN KEY(site_id) REFERENCES sites (site_id)\n)\n```\n\n### SQL Server Auto PK Logic\n\n- Checks for an identity associated with one of the columns for the table in\n  question.\n\n### Oracle Auto PK Logic\n\n`ALWAYS GENERATED` types will be parsed as Auto PK types for Oracle.\n\n## About xo: Design, Origin, Philosophy, and History\n\n`xo` can likely get you 99% \"of the way there\" on medium or large database\nschemas and 100% of the way there for small or trivial database schemas. In\nshort, xo is a great launching point for developing standardized packages for\nstandard database abstractions/relationships, and `xo`'s most common use-case is\nindeed in a code generation pipeline, ala `stringer`.\n\n### Design\n\n`xo` is **NOT** designed to be an ORM or to generate an ORM. Instead, `xo` is\ndesigned to vastly reduce the overhead/redundancy of (re-)writing types and\nfuncs for common database queries/relationships -- it is not meant to be\na \"silver bullet\".\n\n### History\n\n`xo` was originally developed while migrating a large application written in\nPHP to Go. The schema in use in the original app, while well-designed, had\nbecome inconsistent over multiple iterations/generations, mainly due to\ndifferent naming styles adopted by various developers/database admins over the\npreceding years. Additionally, some components had been written in different\nlanguages (Ruby, Java) and had also accumulated significant drift from the\noriginal application and accompanying schema. Simultaneously, a large amount of\ngrowth meant that the PHP/Ruby code could no longer efficiently serve the\ntraffic volumes.\n\nIn late 2014/early 2015, a decision was made to unify and strip out certain\nbackend services and to fully isolate the API from the original application,\nallowing the various components to instead speak to a common API layer instead\nof directly to the database, and to build that service layer in Go.\n\nHowever, unraveling the old PHP/Ruby/Java code became a large headache, as the\ncode, the database, and the API, all had significant drift -- thus, underlying\nfunction names, fields, and API methods no longer coincided with the actual\ndatabase schema, and were named differently in each language. As such, after a\nround of standardizing names, dropping cruft, and adding a few relationship\nchanges to the schema, the various codebases were fixed to match the schema\nchanges. After that was determined to be a success, the next target was to\nrewrite the backend services in Go.\n\nIn order to keep a similar and consistent workflow for the developers, the\nprevious code generator (written in PHP and Twig templates) was modified to\ngenerate Go code. Additionally, at this time, but tangential to the story, the\nAPI definitions were ported from JSON to Protobuf to make use of its code\ngeneration abilities as well.\n\n`xo` is the open source version of that code generation tool, and is the fruits\nof those development efforts. It is hoped that others will be able to use and\nexpand `xo` to support other databases -- SQL or otherwise -- and that `xo` can\nbecome a common tool in any Go developer's toolbox.\n\n### Goals\n\nPart of `xo`'s goals is to avoid writing an ORM, or an ORM-like in Go, and to\ninstead generate static, type-safe, fast, and idiomatic Go code across\nlanguages and databases. Additionally, the `xo` developers are of the opinion\nthat relational databases should have proper, well-designed relationships and\nall the related definitions should reside within the database schema itself:\nie, a \"self-documenting\" schema. `xo` is an end to that pursuit.\n\n## Related Projects\n\n- [dburl](https://github.com/xo/dburl) - a Go package providing a standard, URL\n  style mechanism for parsing and opening database connection URLs\n- [usql](https://github.com/xo/usql) - a universal command-line interface for\n  SQL databases\n\n### Other Projects\n\nThe following projects work with similar concepts as xo:\n\n#### Go Generators\n\n- [ModelQ](https://github.com/mijia/modelq)\n- [sqlgen](https://github.com/drone/sqlgen)\n- [squirrel](https://github.com/Masterminds/squirrel)\n- [scaneo](https://github.com/variadico/scaneo)\n- [acorn](https://github.com/willowtreeapps/acorn) and\n  [rootx](https://github.com/willowtreeapps/rootx) ([read overview here](http://willowtreeapps.com/blog/go-generate-your-database-code/))\n\n#### Go ORM-likes\n\n- [sqlc](https://github.com/relops/sqlc)\n\n[homebrew]: https://brew.sh/\n[xo-tap]: https://github.com/xo/homebrew-xo\n[aur]: https://aur.archlinux.org/packages/xo-cli\n[arch-makepkg]: https://wiki.archlinux.org/title/makepkg\n[yay]: https://github.com/Jguer/yay\n"
        },
        {
          "name": "_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 4.44921875,
          "content": "#!/bin/bash\n\nset -e\n\nSRC=$(realpath $(cd -P \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd))\n\nNAME=$(basename $SRC)\nVER=\nSTATIC=0\nFORCE=0\nCHECK=1\nINSTALL=0\nBUILDONLY=0\nVERBOSE=false\nCGO_ENABLED=1\nLDNAME=main.name\nLDVERSION=main.version\nPLATFORM=$(go env GOOS)\nARCH=$(go env GOARCH)\nGOARCH=$ARCH\n\nTAGS=(\n)\n\nlatest_tag() {\n  # get latest tag version\n  pushd $SRC &> /dev/null\n  git tag -l|grep -E '^v[0-9]+\\.[0-9]+\\.[0-9]+(\\.[0-9]+)?$'|sort -r -V|head -1||:\n  popd &> /dev/null\n}\n\nOPTIND=1\nwhile getopts \"a:v:sfnibxt:r\" opt; do\ncase \"$opt\" in\n  a) ARCH=$OPTARG ;;\n  v) VER=$OPTARG ;;\n  s) STATIC=1 ;;\n  f) FORCE=1 ;;\n  n) CHECK=0 ;;\n  i) INSTALL=1 ;;\n  b) BUILDONLY=1 ;;\n  x) VERBOSE=true ;;\n  t) TAGS=($OPTARG) ;;\n  r) VER=$(latest_tag) ;;\nesac\ndone\n\n# neither -v or -r specified, or -v=master, set FORCE and VER\nif [[ \"$VER\" = \"\" || \"$VER\" == \"master\" ]]; then\n  VER=0.0.0-dev\n  FORCE=1\nfi\n\nVER=\"${VER#v}\"\n\nBUILD=$SRC/build\nDIR=$BUILD/$PLATFORM/$ARCH/$VER\n\nTAR=tar\nEXT=tar.bz2\nBIN=$DIR/$NAME\n\ncase $PLATFORM in\n  windows)\n    EXT=zip\n    BIN=$BIN.exe\n  ;;\n  darwin)\n    TAR=gtar\n  ;;\nesac\nOUT=$DIR/$NAME-$VER-$PLATFORM-$ARCH.$EXT\n\nCARCH=\nQEMUARCH=\nGNUTYPE=\nCC=\nCXX=\nEXTLD=g++\n\nif [[ \"$PLATFORM\" == \"linux\" && \"$ARCH\" != \"$GOARCH\" ]]; then\n  case $ARCH in\n    arm)   CARCH=armhf   QEMUARCH=arm     GNUTYPE=gnueabihf ;;\n    arm64) CARCH=aarch64 QEMUARCH=aarch64 GNUTYPE=gnu ;;\n    *)\n      echo \"error: unknown arch $ARCH\"\n      exit 1\n    ;;\n  esac\n  LDARCH=$CARCH\n  if [[ \"$ARCH\" == \"arm\" ]]; then\n    if [ -d /usr/arm-linux-$GNUTYPE ]; then\n      LDARCH=arm\n    elif [ -d /usr/arm-none-linux-$GNUTYPE ]; then\n      LDARCH=arm-none\n    fi\n  fi\n  CC=$LDARCH-linux-$GNUTYPE-gcc\n  CXX=$LDARCH-linux-$GNUTYPE-c++\n  EXTLD=$LDARCH-linux-$GNUTYPE-g++\nfi\n\nLDFLAGS=(\n  -s\n  -w\n  -X $LDNAME=$NAME\n  -X $LDVERSION=$VER\n)\n\nif [ \"$STATIC\" = \"1\" ]; then\n  OUT=$DIR/${NAME}_static-$VER-$PLATFORM-$ARCH.$EXT\n  BIN=$DIR/${NAME}_static\n  case $PLATFORM in\n    linux)\n      TAGS+=(\n        netgo\n        osusergo\n      )\n      EXTLDFLAGS=(\n        -static\n        -lm\n        -ldl\n      )\n      EXTLDFLAGS=\"${EXTLDFLAGS[@]}\"\n      LDFLAGS+=(\n        -linkmode=external\n        -extldflags \\'$EXTLDFLAGS\\'\n        -extld $EXTLD\n      )\n    ;;\n    *)\n      echo \"ERROR: fully static builds not currently supported for $PLATFORM/$ARCH\"\n      exit 1\n    ;;\n  esac\nfi\n\n# check not overwriting existing build artifacts\nif [[ -e $OUT && \"$FORCE\" != \"1\" && \"$INSTALL\" == \"0\" ]]; then\n  echo \"ERROR: $OUT exists and FORCE != 1 (try $0 -f)\"\n  exit 1\nfi\n\nTAGS=\"${TAGS[@]}\"\nLDFLAGS=\"${LDFLAGS[@]}\"\n\necho \"APP:         $NAME/${VER} ($PLATFORM/$ARCH)\"\nif [ \"$STATIC\" = \"1\" ]; then\n  echo \"STATIC:      yes\"\nfi\necho \"BUILD TAGS:  $TAGS\"\necho \"LDFLAGS:     $LDFLAGS\"\n\npushd $SRC &> /dev/null\n\nif [ -f $OUT ]; then\n  echo \"REMOVING:    $OUT\"\n  rm -rf $OUT\nfi\nmkdir -p $DIR\necho \"BUILDING:    $BIN\"\n\n# build\necho \"BUILD:\"\n\nVERB=build\nOUTPUT=\"-o $BIN\"\nif [ \"$INSTALL\" = \"1\" ]; then\n  VERB=install OUTPUT=\"\"\nelif [ \"$BUILDONLY\" = \"1\" ]; then\n  OUTPUT=\"\"\nfi\n(set -x;\n  CC=$CC \\\n  CXX=$CXX \\\n  CGO_ENABLED=$CGO_ENABLED \\\n  GOARCH=$ARCH \\\n  go $VERB \\\n    -v=$VERBOSE \\\n    -x=$VERBOSE \\\n    -ldflags=\"$LDFLAGS\" \\\n    -tags=\"$TAGS\" \\\n    -trimpath \\\n    $OUTPUT\n)\n\nif [[ \"$INSTALL\" == \"1\" || \"$BUILDONLY\" == \"1\" ]]; then\n  exit\nfi\n\n(set -x;\n  file $BIN\n)\nif [[ \"$PLATFORM\" != \"windows\" ]]; then\n  (set -x;\n    chmod +x $BIN\n  )\nfi\n\n# purge disk cache\nif [[ \"$PLATFORM\" == \"darwin\" && \"$CI\" == \"true\" ]]; then\n  (set -x;\n    sudo /usr/sbin/purge\n  )\nfi\n\nbuilt_ver() {\n  if [[ \"$PLATFORM\" == \"linux\" && \"$ARCH\" != \"$GOARCH\" ]]; then\n    EXTRA=\n    if [ -d /usr/$LDARCH-linux-$GNUTYPE/libc ]; then\n      EXTRA=\"-L /usr/$LDARCH-linux-$GNUTYPE/libc\"\n    fi\n    qemu-$QEMUARCH \\\n      -L /usr/$LDARCH-linux-$GNUTYPE \\\n      $EXTRA \\\n      $BIN --version\n  elif [[ \"$PLATFORM\" == \"darwin\" && \"$ARCH\" != \"$GOARCH\" ]]; then\n    echo \"$NAME ${VER#v}\"\n  else\n    $BIN --version\n  fi\n}\n\n# check build\nif [[ \"$CHECK\" == \"1\" ]]; then\n  BUILT_VER=$(built_ver)\n  if [ \"$BUILT_VER\" != \"$NAME ${VER#v}\" ]; then\n    echo -e \"\\n\\nERROR: expected $NAME --version to report '$NAME ${VER#v}', got: '$BUILT_VER'\"\n    exit 1\n  fi\n  echo \"REPORTED:    $BUILT_VER\"\nfi\n\n# pack\ncp $SRC/LICENSE $DIR\ncase $EXT in\n  tar.bz2) $TAR -C $DIR -cjf $OUT $(basename $BIN) LICENSE ;;\n  zip) zip $OUT -j $BIN LICENSE ;;\nesac\n\n# report\necho \"PACKED:      $OUT ($(du -sh $OUT|awk '{print $1}'))\"\n\ncase $EXT in\n  tar.bz2) (set -x; $TAR  -jvtf $OUT) ;;\n  zip)     (set -x; unzip -l    $OUT) ;;\nesac\n\n(set -x;\n  sha256sum $DIR/*\n)\n\npopd &> /dev/null\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen.sh",
          "type": "blob",
          "size": 31.216796875,
          "content": "#!/bin/bash\n\nPGDB=pg://\nMYDB=my://localhost/mysql\nMSDB=ms://\nSQDB=sq:xo.db\nORDB=or://localhost/free\n\nDEST=$1\nif [ -z \"$DEST\" ]; then\n  echo \"usage: $0 <DEST>\"\n  exit 1\nfi\nshift\n\nXOBIN=$(which xo)\nif [ -e ./xo ]; then\n  XOBIN=./xo\nfi\nXOBIN=$(realpath $XOBIN)\n\nset -ex\n\nmkdir -p $DEST\nrm -f *.db\nrm -rf $DEST/*.xo.go\n\n# postgres view create query\nCOMMENT='{{ . }} creates a view for introspection.'\n$XOBIN query $PGDB -M -B -X -F PostgresViewCreate --func-comment \"$COMMENT\" --single=models.xo.go -I -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nCREATE TEMPORARY VIEW %%id string,interpolate%% AS %%query []string,interpolate,join%%\nENDSQL\n\n# postgres view schema query\nCOMMENT='{{ . }} retrieves the schema for a view created for introspection.'\n$XOBIN query $PGDB -M -B -l -F PostgresViewSchema --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\nSELECT\n  n.nspname::varchar AS schema_name\nFROM pg_class c\n  JOIN pg_namespace n ON n.oid = c.relnamespace\nWHERE n.nspname LIKE 'pg_temp%'\n  AND c.relname = %%id string%%\nENDSQL\n\n# postgres view drop query\nCOMMENT='{{ . }} drops a view created for introspection.'\n$XOBIN query $PGDB -M -B -X -F PostgresViewDrop --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nDROP VIEW %%id string,interpolate%%\nENDSQL\n\n# postgres schema query\nCOMMENT='{{ . }} retrieves the schema.'\n$XOBIN query $PGDB -M -B -l -F PostgresSchema --func-comment \"$COMMENT\" --single=models.xo.go -a -o $DEST $@ << ENDSQL\nSELECT\n  CURRENT_SCHEMA()::varchar AS schema_name\nENDSQL\n\n# postgres enum list query\nCOMMENT='{{ . }} is a enum.'\n$XOBIN query $PGDB -M -B -2 -T Enum -F PostgresEnums --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  DISTINCT t.typname::varchar AS enum_name\nFROM pg_type t\n  JOIN ONLY pg_namespace n ON n.oid = t.typnamespace\n  JOIN ONLY pg_enum e ON t.oid = e.enumtypid\nWHERE n.nspname = %%schema string%%\nENDSQL\n\n# postgres enum value list query\nCOMMENT='{{ . }} is a enum value.'\n$XOBIN query $PGDB -M -B -2 -T EnumValue -F PostgresEnumValues --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  e.enumlabel::varchar AS enum_value,\n  e.enumsortorder::integer AS const_value\nFROM pg_type t\n  JOIN ONLY pg_namespace n ON n.oid = t.typnamespace\n  LEFT JOIN pg_enum e ON t.oid = e.enumtypid\nWHERE n.nspname = %%schema string%%\n  AND t.typname = %%enum string%%\nENDSQL\n\n# postgres proc list query\nCOMMENT='{{ . }} is a stored procedure.'\n$XOBIN query $PGDB -M -B -2 -T Proc -F PostgresProcs --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  p.oid::varchar AS proc_id,\n  p.proname::varchar AS proc_name,\n  pp.proc_type::varchar AS proc_type,\n  format_type(pp.return_type, NULL)::varchar AS return_type,\n  pp.return_name::varchar AS return_name,\n  p.prosrc::varchar AS proc_def\nFROM pg_catalog.pg_proc p\n  JOIN pg_catalog.pg_namespace n ON (p.pronamespace = n.oid)\n  JOIN (\n    SELECT\n      p.oid,\n      (CASE WHEN EXISTS(\n          SELECT\n            column_name\n          FROM information_schema.columns\n          WHERE table_name = 'pg_proc'\n            AND column_name = 'prokind'\n        )\n        THEN (CASE p.prokind\n          WHEN 'p' THEN 'procedure'\n          WHEN 'f' THEN 'function'\n        END)\n        ELSE ''\n      END) AS proc_type,\n      UNNEST(COALESCE(p.proallargtypes, ARRAY[p.prorettype])) AS return_type,\n      UNNEST(CASE\n        WHEN p.proargmodes IS NULL THEN ARRAY['']\n        ELSE p.proargnames\n      END) AS return_name,\n      UNNEST(COALESCE(p.proargmodes, ARRAY['o'])) AS param_type\n    FROM pg_catalog.pg_proc p\n  ) AS pp ON p.oid = pp.oid\nWHERE p.prorettype <> 'pg_catalog.cstring'::pg_catalog.regtype\n  AND (p.proargtypes[0] IS NULL\n    OR p.proargtypes[0] <> 'pg_catalog.cstring'::pg_catalog.regtype)\n  AND (pp.proc_type = 'function'\n    OR pp.proc_type = 'procedure')\n  AND pp.param_type = 'o'\n  AND n.nspname = %%schema string%%\nENDSQL\n\n# postgres proc parameter list query\nCOMMENT='{{ . }} is a stored procedure param.'\n$XOBIN query $PGDB -M -B -2 -T ProcParam -F PostgresProcParams --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  COALESCE(pp.param_name, '')::varchar AS param_name,\n  pp.param_type::varchar AS param_type\nFROM pg_proc p\n  JOIN ONLY pg_namespace n ON p.pronamespace = n.oid\n  JOIN (\n    SELECT\n      p.oid,\n      UNNEST(p.proargnames) AS param_name,\n      format_type(UNNEST(p.proargtypes), NULL) AS param_type\n    FROM pg_proc p\n  ) AS pp ON p.oid = pp.oid\nWHERE n.nspname = %%schema string%%\n  AND p.oid::varchar = %%id string%%\n  AND pp.param_type IS NOT NULL\nENDSQL\n\n# postgres table list query\nCOMMENT='{{ . }} is a table.'\n$XOBIN query $PGDB -M -B -2 -T Table -F PostgresTables --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  (CASE c.relkind\n    WHEN 'r' THEN 'table'\n    WHEN 'v' THEN 'view'\n  END)::varchar AS type,\n  c.relname::varchar AS table_name,\n  false::boolean AS manual_pk,\n  CASE c.relkind\n    WHEN 'r' THEN COALESCE(obj_description(c.relname::regclass), '')\n    WHEN 'v' THEN v.definition\n  END AS view_def\nFROM pg_class c\n  JOIN ONLY pg_namespace n ON n.oid = c.relnamespace\n  LEFT JOIN pg_views v ON n.nspname = v.schemaname\n    AND v.viewname = c.relname\nWHERE n.nspname = %%schema string%%\n  AND (CASE c.relkind\n    WHEN 'r' THEN 'table'\n    WHEN 'v' THEN 'view'\n  END) = LOWER(%%typ string%%)\nENDSQL\n\n# postgres table column list query\nFIELDS='FieldOrdinal int,ColumnName string,DataType string,NotNull bool,DefaultValue sql.NullString,IsPrimaryKey bool,Comment sql.NullString'\nCOMMENT='{{ . }} is a column.'\n$XOBIN query $PGDB -M -B -2 -T Column -F PostgresTableColumns -Z \"$FIELDS\" --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  a.attnum::integer AS field_ordinal,\n  a.attname::varchar AS column_name,\n  format_type(a.atttypid, a.atttypmod)::varchar AS data_type,\n  a.attnotnull::boolean AS not_null,\n  COALESCE(pg_get_expr(ad.adbin, ad.adrelid), '')::varchar AS default_value,\n  COALESCE(ct.contype = 'p', false)::boolean AS is_primary_key,\n  d.description::varchar as comment\nFROM pg_attribute a\n  JOIN ONLY pg_class c ON c.oid = a.attrelid\n  JOIN ONLY pg_namespace n ON n.oid = c.relnamespace\n  LEFT JOIN pg_constraint ct ON ct.conrelid = c.oid\n    AND a.attnum = ANY(ct.conkey)\n    AND ct.contype = 'p'\n  LEFT JOIN pg_attrdef ad ON ad.adrelid = c.oid\n    AND ad.adnum = a.attnum\n  LEFT JOIN pg_description d on d.objoid = c.oid\n\t\tAND d.objsubid = a.attnum\nWHERE a.attisdropped = false\n  AND n.nspname = %%schema string%%\n  AND c.relname = %%table string%%\n  AND (%%sys bool%% OR a.attnum > 0)\nORDER BY a.attnum\nENDSQL\n\n# postgres sequence list query\nCOMMENT='{{ . }} is a sequence.'\n$XOBIN query $PGDB -M -B -2 -T Sequence -F PostgresTableSequences --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  a.attname::varchar as column_name\nFROM pg_class s\n  JOIN pg_depend d ON d.objid = s.oid\n  JOIN pg_class t ON d.objid = s.oid AND d.refobjid = t.oid\n  JOIN pg_attribute a ON (d.refobjid, d.refobjsubid) = (a.attrelid, a.attnum)\n  JOIN pg_namespace n ON n.oid = s.relnamespace\nWHERE s.relkind = 'S'\n  AND n.nspname = %%schema string%%\n  AND t.relname = %%table string%%\nENDSQL\n\n# postgres table foreign key list query\nCOMMENT='{{ . }} is a foreign key.'\n$XOBIN query $PGDB -M -B -2 -T ForeignKey -F PostgresTableForeignKeys --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  tc.constraint_name::varchar AS foreign_key_name,\n  kcu.column_name::varchar AS column_name,\n  ccu.table_name::varchar AS ref_table_name,\n  ccu.column_name::varchar AS ref_column_name,\n  0::integer AS key_id\nFROM information_schema.table_constraints tc\n  JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name\n    AND tc.table_schema = kcu.table_schema\n    AND tc.table_name = kcu.table_name\n  JOIN (\n    SELECT\n      ROW_NUMBER() OVER (\n        PARTITION BY\n          table_schema,\n          table_name,\n          constraint_name\n        ORDER BY row_num\n      ) AS ordinal_position,\n      table_schema,\n      table_name,\n      column_name,\n      constraint_name\n    FROM (\n      SELECT\n        ROW_NUMBER() OVER (ORDER BY 1) AS row_num,\n        table_schema,\n        table_name,\n        column_name,\n        constraint_name\n      FROM information_schema.constraint_column_usage\n    ) t\n  ) AS ccu ON ccu.constraint_name = tc.constraint_name\n    AND ccu.table_schema = tc.table_schema\n    AND ccu.ordinal_position = kcu.ordinal_position\nWHERE tc.constraint_type = 'FOREIGN KEY'\n  AND tc.table_schema = %%schema string%%\n  AND tc.table_name = %%table string%%\nENDSQL\n\n# postgres table index list query\nCOMMENT='{{ . }} is a index.'\n$XOBIN query $PGDB -M -B -2 -T Index -F PostgresTableIndexes --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  DISTINCT ic.relname::varchar AS index_name,\n  i.indisunique::boolean AS is_unique,\n  i.indisprimary::boolean AS is_primary\nFROM pg_index i\n  JOIN ONLY pg_class c ON c.oid = i.indrelid\n  JOIN ONLY pg_namespace n ON n.oid = c.relnamespace\n  JOIN ONLY pg_class ic ON ic.oid = i.indexrelid\nWHERE i.indkey <> '0'\n  AND n.nspname = %%schema string%%\n  AND c.relname = %%table string%%\nENDSQL\n\n# postgres index column list query\nCOMMENT='{{ . }} is a index column.'\n$XOBIN query $PGDB -M -B -2 -T IndexColumn -F PostgresIndexColumns --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  (row_number() over())::integer AS seq_no,\n  a.attnum::integer AS cid,\n  a.attname::varchar AS column_name\nFROM pg_index i\n  JOIN ONLY pg_class c ON c.oid = i.indrelid\n  JOIN ONLY pg_namespace n ON n.oid = c.relnamespace\n  JOIN ONLY pg_class ic ON ic.oid = i.indexrelid\n  LEFT JOIN pg_attribute a ON i.indrelid = a.attrelid\n    AND a.attnum = ANY(i.indkey)\n    AND a.attisdropped = false\nWHERE i.indkey <> '0'\n  AND n.nspname = %%schema string%%\n  AND ic.relname = %%index string%%\nENDSQL\n\n# postgres index column order query\nCOMMENT='{{ . }} is a index column order.'\n$XOBIN query $PGDB -M -B -1 -2 -T PostgresColOrder -F PostgresGetColOrder --type-comment \"$COMMENT\" -o $DEST $@ << ENDSQL\nSELECT\n  i.indkey::varchar AS ord\nFROM pg_index i\n  JOIN ONLY pg_class c ON c.oid = i.indrelid\n  JOIN ONLY pg_namespace n ON n.oid = c.relnamespace\n  JOIN ONLY pg_class ic ON ic.oid = i.indexrelid\nWHERE n.nspname = %%schema string%%\n  AND ic.relname = %%index string%%\nENDSQL\n\n# mysql view create query\nCOMMENT='{{ . }} creates a view for introspection.'\n$XOBIN query $MYDB -M -B -X -F MysqlViewCreate --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nCREATE VIEW %%id string,interpolate%% AS %%query []string,interpolate,join%%\nENDSQL\n\n# mysql view drop query\nCOMMENT='{{ . }} drops a view created for introspection.'\n$XOBIN query $MYDB -M -B -X -F MysqlViewDrop --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nDROP VIEW %%id string,interpolate%%\nENDSQL\n\n# mysql schema query\nCOMMENT='{{ . }} retrieves the schema.'\n$XOBIN query $MYDB -M -B -l -F MysqlSchema --func-comment \"$COMMENT\" --single=models.xo.go -a -o $DEST $@ << ENDSQL\nSELECT\n  SCHEMA() AS schema_name\nENDSQL\n\n# mysql enum list query\n$XOBIN query $MYDB -M -B -2 -T Enum -F MysqlEnums -a -o $DEST $@ << ENDSQL\nSELECT\n  DISTINCT column_name AS enum_name\nFROM information_schema.columns\nWHERE data_type = 'enum'\n  AND table_schema = %%schema string%%\nENDSQL\n\n# mysql enum value list query\n$XOBIN query $MYDB -M -B -1 -2 -T MysqlEnumValue -F MysqlEnumValues -o $DEST $@ << ENDSQL\nSELECT\n  SUBSTRING(column_type, 6, CHAR_LENGTH(column_type) - 6) AS enum_values\nFROM information_schema.columns\nWHERE data_type = 'enum'\n  AND table_schema = %%schema string%%\n  AND column_name = %%enum string%%\nENDSQL\n\n# mysql proc list query\n$XOBIN query $MYDB -M -B -2 -T Proc -F MysqlProcs -a -o $DEST $@ << ENDSQL\nSELECT\n  r.routine_name AS proc_id,\n  r.routine_name AS proc_name,\n  LOWER(r.routine_type) AS proc_type,\n  COALESCE(p.dtd_identifier, 'void') AS return_type,\n  COALESCE(p.parameter_name, '') AS return_name,\n  r.routine_definition AS proc_def\nFROM information_schema.routines r\n  LEFT JOIN information_schema.parameters p ON p.specific_schema = r.routine_schema\n    AND p.specific_name = r.routine_name\n    AND (p.parameter_mode = 'OUT' OR p.ordinal_position = 0)\nWHERE r.routine_schema = %%schema string%%\nORDER BY r.routine_name, p.ordinal_position\nENDSQL\n\n# mysql proc parameter list query\n$XOBIN query $MYDB -M -B -2 -T ProcParam -F MysqlProcParams -a -o $DEST $@ << ENDSQL\nSELECT\n  p.parameter_name AS param_name,\n  p.dtd_identifier AS param_type\nFROM information_schema.routines r\n  INNER JOIN information_schema.parameters p ON p.specific_schema = r.routine_schema\n    AND p.specific_name = r.routine_name\n    AND p.parameter_mode = 'IN'\nWHERE r.routine_schema = %%schema string%%\n  AND r.routine_name = %%id string%%\nORDER BY p.ordinal_position\nENDSQL\n\n# mysql table list query\n$XOBIN query $MYDB -M -B -2 -T Table -F MysqlTables -a -o $DEST $@ << ENDSQL\nSELECT\n  (CASE t.table_type\n    WHEN 'BASE TABLE' THEN 'table'\n    WHEN 'VIEW' THEN 'view'\n  END) AS type,\n  t.table_name,\n  CASE t.table_type\n    WHEN 'BASE TABLE' THEN ''\n    WHEN 'VIEW' then v.view_definition\n  END AS view_def\nFROM information_schema.tables t\n  LEFT JOIN information_schema.views v ON t.table_schema = v.table_schema\n    AND t.table_name = v.table_name\nWHERE t.table_schema = %%schema string%%\n  AND (CASE t.table_type\n    WHEN 'BASE TABLE' THEN 'table'\n    WHEN 'VIEW' THEN 'view'\n  END) = LOWER(%%typ string%%)\nENDSQL\n\n# mysql table column list query\n$XOBIN query $MYDB -M -B -2 -T Column -F MysqlTableColumns -a -o $DEST $@ << ENDSQL\nSELECT\n  ordinal_position AS field_ordinal,\n  column_name,\n  IF(data_type = 'enum', column_name, column_type) AS data_type,\n  IF(is_nullable = 'YES', false, true) AS not_null,\n  column_default AS default_value,\n  IF(column_key = 'PRI', true, false) AS is_primary_key,\n  column_comment AS comment\nFROM information_schema.columns\nWHERE table_schema = %%schema string%%\n  AND table_name = %%table string%%\nORDER BY ordinal_position\nENDSQL\n\n# mysql sequence list query\n$XOBIN query $MYDB -M -B -2 -T Sequence -F MysqlTableSequences -a -o $DEST $@ << ENDSQL\nSELECT\n  column_name\nFROM information_schema.columns c\nWHERE c.extra = 'auto_increment'\n  AND c.table_schema = %%schema string%%\n  AND c.table_name = %%table string%%\nENDSQL\n\n# mysql table foreign key list query\n$XOBIN query $MYDB -M -B -2 -T ForeignKey -F MysqlTableForeignKeys -a -o $DEST $@ << ENDSQL\nSELECT\n  constraint_name AS foreign_key_name,\n  column_name AS column_name,\n  referenced_table_name AS ref_table_name,\n  referenced_column_name AS ref_column_name\nFROM information_schema.key_column_usage\nWHERE referenced_table_name IS NOT NULL\n  AND table_schema = %%schema string%%\n  AND table_name = %%table string%%\nENDSQL\n\n# mysql table index list query\n$XOBIN query $MYDB -M -B -2 -T Index -F MysqlTableIndexes -a -o $DEST $@ << ENDSQL\nSELECT\n  DISTINCT index_name,\n  NOT non_unique AS is_unique\nFROM information_schema.statistics\nWHERE index_name <> 'PRIMARY'\n  AND index_schema = %%schema string%%\n  AND table_name = %%table string%%\nENDSQL\n\n# mysql index column list query\n$XOBIN query $MYDB -M -B -2 -T IndexColumn -F MysqlIndexColumns -a -o $DEST $@ << ENDSQL\nSELECT\n  seq_in_index AS seq_no,\n  column_name\nFROM information_schema.statistics\nWHERE index_schema = %%schema string%%\n  AND table_name = %%table string%%\n  AND index_name = %%index string%%\nORDER BY seq_in_index\nENDSQL\n\n# sqlite3 view create query\nCOMMENT='{{ . }} creates a view for introspection.'\n$XOBIN query $SQDB -M -B -X -F Sqlite3ViewCreate --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nCREATE TEMPORARY VIEW %%id string,interpolate%% AS %%query []string,interpolate,join%%\nENDSQL\n\n# sqlite3 view drop query\nCOMMENT='{{ . }} drops a view created for introspection.'\n$XOBIN query $SQDB -M -B -X -F Sqlite3ViewDrop --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nDROP VIEW %%id string,interpolate%%\nENDSQL\n\n# sqlite3 schema query\nCOMMENT='{{ . }} retrieves the schema.'\n$XOBIN query $SQDB -M -B -l -F Sqlite3Schema --func-comment \"$COMMENT\" --single=models.xo.go -a -o $DEST $@ << ENDSQL\nSELECT\n  REPLACE(file, RTRIM(file, REPLACE(file, '/', '')), '') AS schema_name\nFROM pragma_database_list()\nENDSQL\n\n# sqlite3 table list query\n$XOBIN query $SQDB -M -B -2 -T Table -F Sqlite3Tables -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nSELECT\n  type,\n  tbl_name AS table_name,\n  CASE LOWER(type)\n    WHEN 'table' THEN ''\n    WHEN 'view' THEN sql\n  END AS view_def\nFROM sqlite_master\nWHERE tbl_name NOT LIKE 'sqlite_%'\n  AND LOWER(type) = LOWER(%%typ string%%)\nENDSQL\n\n# sqlite3 table column list query\n$XOBIN query $SQDB -M -B -2 -T Column -F Sqlite3TableColumns -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nSELECT\n  cid AS field_ordinal,\n  name AS column_name,\n  type AS data_type,\n  \"notnull\" AS not_null,\n  dflt_value AS default_value,\n  CAST(pk <> 0 AS boolean) AS is_primary_key\nFROM pragma_table_info(%%table string%%)\nENDSQL\n\n# sqlite3 sequence list query\n$XOBIN query $SQDB -M -B -2 -T Sequence -F Sqlite3TableSequences -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nWITH RECURSIVE\n  a AS (\n    SELECT name, lower(replace(replace(sql, char(13), ' '), char(10), ' ')) AS sql\n    FROM sqlite_master\n    WHERE lower(sql) LIKE '%integer% autoincrement%'\n  ),\n  b AS (\n    SELECT name, trim(substr(sql, instr(sql, '(') + 1)) AS sql\n    FROM a\n  ),\n  c AS (\n    SELECT b.name, sql, '' AS col\n    FROM b\n    UNION ALL\n    SELECT\n      c.name,\n      trim(substr(c.sql, ifnull(nullif(instr(c.sql, ','), 0), instr(c.sql, ')')) + 1)) AS sql,\n      trim(substr(c.sql, 1, ifnull(nullif(instr(c.sql, ','), 0), instr(c.sql, ')')) - 1)) AS col\n    FROM c JOIN b ON c.name = b.name\n    WHERE c.sql != ''\n  ),\n  d AS (\n    SELECT name, substr(col, 1, instr(col, ' ') - 1) AS col\n    FROM c\n    WHERE col LIKE '%autoincrement%'\n  )\nSELECT col AS column_name\nFROM d\nWHERE name = %%table string%%\nENDSQL\n\n# sqlite3 table foreign key list query\n$XOBIN query $SQDB -M -B -2 -T ForeignKey -F Sqlite3TableForeignKeys -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nSELECT\n  id AS key_id,\n  \"table\" AS ref_table_name,\n  \"from\" AS column_name,\n  \"to\" AS ref_column_name\nFROM pragma_foreign_key_list(%%table string%%)\nENDSQL\n\n# sqlite3 table index list query\n$XOBIN query $SQDB -M -B -2 -T Index -F Sqlite3TableIndexes -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nSELECT\n  name AS index_name,\n  \"unique\" AS is_unique,\n  CAST(origin = 'pk' AS boolean) AS is_primary\nFROM pragma_index_list(%%table string%%)\nENDSQL\n\n# sqlite3 index column list query\n$XOBIN query $SQDB -M -B -2 -T IndexColumn -F Sqlite3IndexColumns -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% %%table string,interpolate%% */\nSELECT\n  seqno AS seq_no,\n  cid,\n  name AS column_name\nFROM pragma_index_info(%%index string%%)\nENDSQL\n\n# sqlserver view create query\nCOMMENT='{{ . }} creates a view for introspection.'\n$XOBIN query $MSDB -M -B -X -F SqlserverViewCreate --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nCREATE VIEW %%id string,interpolate%% AS %%query []string,interpolate,join%%\nENDSQL\n\n# sqlserver view drop query\nCOMMENT='{{ . }} drops a view created for introspection.'\n$XOBIN query $MSDB -M -B -X -F SqlserverViewDrop --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nDROP VIEW %%id string,interpolate%%\nENDSQL\n\n# sqlserver schema query\nCOMMENT='{{ . }} retrieves the schema.'\n$XOBIN query $MSDB -M -B -l -F SqlserverSchema --func-comment \"$COMMENT\" --single=models.xo.go -a -o $DEST $@ << ENDSQL\nSELECT\n  SCHEMA_NAME() AS schema_name\nENDSQL\n\n# sqlserver proc list query\n$XOBIN query $MSDB -M -B -2 -T Proc -F SqlserverProcs -a -o $DEST $@ << ENDSQL\nSELECT\n  STR(o.object_id) AS proc_id,\n  o.name AS proc_name,\n  (CASE o.type\n    WHEN 'P' THEN 'procedure'\n    WHEN 'FN' THEN 'function'\n  END) AS proc_type,\n  CASE\n    WHEN p.object_id IS NOT NULL\n      THEN TYPE_NAME(p.system_type_id)+IIF(p.precision > 0, '('+CAST(p.precision AS varchar)+IIF(p.scale > 0,','+CAST(p.scale AS varchar),'')+')', '')\n    ELSE 'void'\n  END AS return_type,\n  CASE\n  WHEN p.object_id IS NOT NULL AND p.name <> ''\n      THEN SUBSTRING(p.name, 2, LEN(p.name)-1)\n    ELSE ''\n  END AS return_name,\n  OBJECT_DEFINITION(o.object_id) AS proc_def\nFROM sys.objects o\n  LEFT JOIN sys.parameters p ON o.object_id = p.object_id\n    AND (p.object_id IS NULL OR p.is_output = 'true')\nWHERE o.type = 'P'\n   OR o.type = 'FN'\n  AND SCHEMA_NAME(o.schema_id) = %%schema string%%\nORDER BY o.object_id\nENDSQL\n\n# sqlserver proc parameter list query\n$XOBIN query $MSDB -M -B -2 -T ProcParam -F SqlserverProcParams -a -o $DEST $@ << ENDSQL\nSELECT\n  SUBSTRING(p.name, 2, LEN(p.name)-1) AS param_name,\n  TYPE_NAME(p.user_type_id) AS param_type\nFROM sys.objects o\n  INNER JOIN sys.parameters p ON o.object_id = p.object_id\nWHERE SCHEMA_NAME(schema_id) = %%schema string%%\n  AND STR(o.object_id) = %%id string%%\n  AND p.is_output = 'false'\nORDER BY p.parameter_id\nENDSQL\n\n# sqlserver table list query\n$XOBIN query $MSDB -M -B -2 -T Table -F SqlserverTables -a -o $DEST $@ << ENDSQL\nSELECT\n  (CASE xtype\n    WHEN 'U' THEN 'table'\n    WHEN 'V' THEN 'view'\n  END) AS type,\n  name AS table_name,\n  CASE xtype\n    WHEN 'U' THEN ''\n    WHEN 'V' THEN OBJECT_DEFINITION(id)\n  END AS view_def\nFROM sysobjects\nWHERE SCHEMA_NAME(uid) = %%schema string%%\n  AND (CASE xtype\n    WHEN 'U' THEN 'table'\n    WHEN 'V' THEN 'view'\n  END) = LOWER(%%typ string%%)\nENDSQL\n\n# sqlserver table column list query\n$XOBIN query $MSDB -M -B -2 -T Column -F SqlserverTableColumns -a -o $DEST $@ << ENDSQL\nSELECT\n  c.colid AS field_ordinal,\n  c.name AS column_name,\n  TYPE_NAME(c.xtype)+IIF(c.prec > 0, '('+CAST(c.prec AS varchar)+IIF(c.scale > 0,','+CAST(c.scale AS varchar),'')+')', '') AS data_type,\n  IIF(c.isnullable=1, 0, 1) AS not_null,\n  x.text AS default_value,\n  IIF(COALESCE((\n    SELECT COUNT(z.colid)\n    FROM sysindexes i\n      INNER JOIN sysindexkeys z ON i.id = z.id\n        AND i.indid = z.indid\n        AND z.colid = c.colid\n    WHERE i.id = o.id\n      AND i.name = k.name\n  ), 0) > 0, 1, 0) AS is_primary_key\nFROM syscolumns c\n  JOIN sysobjects o ON o.id = c.id\n  LEFT JOIN sysobjects k ON k.xtype = 'PK'\n    AND k.parent_obj = o.id\n  LEFT JOIN syscomments x ON x.id = c.cdefault\nWHERE o.type IN('U', 'V')\n  AND SCHEMA_NAME(o.uid) = %%schema string%%\n  AND o.name = %%table string%%\nORDER BY c.colid\nENDSQL\n\n# sqlserver sequence list query\n$XOBIN query $MSDB -M -B -2 -T Sequence -F SqlserverTableSequences -a -o $DEST $@ << ENDSQL\nSELECT\n  COL_NAME(o.object_id, c.column_id) AS column_name\nFROM sys.objects o\n  INNER JOIN sys.columns c ON o.object_id = c.object_id\nWHERE c.is_identity = 1\n  AND o.type = 'U'\n  AND SCHEMA_NAME(o.schema_id) = %%schema string%%\n  AND o.name = %%table string%%\nENDSQL\n\n# sqlserver table foreign key list query\n$XOBIN query $MSDB -M -B -2 -T ForeignKey -F SqlserverTableForeignKeys -a -o $DEST $@ << ENDSQL\nSELECT\n  fk.name AS foreign_key_name,\n  col.name AS column_name,\n  pk_tab.name AS ref_table_name,\n  pk_col.name AS ref_column_name\nFROM sys.tables tab\n  INNER JOIN sys.columns col ON col.object_id = tab.object_id\n  LEFT OUTER JOIN sys.foreign_key_columns fk_cols ON fk_cols.parent_object_id = tab.object_id\n    AND fk_cols.parent_column_id = col.column_id\n  LEFT OUTER JOIN sys.foreign_keys fk ON fk.object_id = fk_cols.constraint_object_id\n  LEFT OUTER JOIN sys.tables pk_tab ON pk_tab.object_id = fk_cols.referenced_object_id\n  LEFT OUTER JOIN sys.columns pk_col ON pk_col.column_id = fk_cols.referenced_column_id\n    AND pk_col.object_id = fk_cols.referenced_object_id\nWHERE schema_name(tab.schema_id) = %%schema string%%\n  AND tab.name = %%table string%%\n  AND fk.object_id IS NOT NULL\nENDSQL\n\n# sqlserver table index list query\n$XOBIN query $MSDB -M -B -2 -T Index -F SqlserverTableIndexes -a -o $DEST $@ << ENDSQL\nSELECT\n  i.name AS index_name,\n  i.is_primary_key AS is_primary,\n  i.is_unique\nFROM sys.indexes i\n  INNER JOIN sysobjects o ON i.object_id = o.id\nWHERE i.name IS NOT NULL\n  AND o.type = 'U'\n  AND SCHEMA_NAME(o.uid) = %%schema string%%\n  AND o.name = %%table string%%\nENDSQL\n\n# sqlserver index column list query\n$XOBIN query $MSDB -M -B -2 -T IndexColumn -F SqlserverIndexColumns -a -o $DEST $@ << ENDSQL\nSELECT\n  k.keyno AS seq_no,\n  k.colid AS cid,\n  c.name AS column_name\nFROM sysindexes i\n  INNER JOIN sysobjects o ON i.id = o.id\n  INNER JOIN sysindexkeys k ON k.id = o.id\n    AND k.indid = i.indid\n  INNER JOIN syscolumns c ON c.id = o.id\n    AND c.colid = k.colid\nWHERE o.type = 'U'\n  AND SCHEMA_NAME(o.uid) = %%schema string%%\n  AND o.name = %%table string%%\n  AND i.name = %%index string%%\nORDER BY k.keyno\nENDSQL\n\n# oracle view create query\nCOMMENT='{{ . }} creates a view for introspection.'\n$XOBIN query $ORDB -M -B -X -F OracleViewCreate --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nCREATE GLOBAL TEMPORARY TABLE %%id string,interpolate%% ON COMMIT PRESERVE ROWS AS %%query []string,interpolate,join%%\nENDSQL\n\n# oracle view truncate query\nCOMMENT='{{ . }} truncates a view created for introspection.'\n$XOBIN query $ORDB -M -B -X -F OracleViewTruncate --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nTRUNCATE TABLE %%id string,interpolate%%\nENDSQL\n\n# oracle view drop query\nCOMMENT='{{ . }} drops a view created for introspection.'\n$XOBIN query $ORDB -M -B -X -F OracleViewDrop --func-comment \"$COMMENT\" --single=models.xo.go -I -a -o $DEST $@ << ENDSQL\n/* %%schema string,interpolate%% */\nDROP TABLE %%id string,interpolate%%\nENDSQL\n\n# oracle schema query\nCOMMENT='{{ . }} retrieves the schema.'\n$XOBIN query $ORDB -M -B -l -F OracleSchema --func-comment \"$COMMENT\" --single=models.xo.go -a -o $DEST $@ << ENDSQL\nSELECT\n  LOWER(SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')) AS schema_name\nFROM dual\nENDSQL\n\n# oracle proc list query\n$XOBIN query $ORDB -M -B -2 -T Proc -F OracleProcs -a -o $DEST $@ << ENDSQL\nSELECT\n  CAST(o.object_id AS NVARCHAR2(255)) AS proc_id,\n  LOWER(o.object_name) AS proc_name,\n  LOWER(o.object_type) AS proc_type,\n  LOWER(CASE\n    WHEN a.data_type IS NULL THEN 'void'\n    WHEN a.data_type = 'CHAR' THEN 'CHAR(' || a.data_length || ')'\n    WHEN a.data_type = 'VARCHAR2' THEN 'VARCHAR2(' || a.data_length || ')'\n    WHEN a.data_type = 'NUMBER' THEN 'NUMBER(' || NVL(a.data_precision, 0) || ',' || NVL(a.data_scale, 0) || ')'\n    ELSE a.data_type END) AS return_type,\n  LOWER(CASE\n    WHEN a.argument_name IS NULL THEN '-'\n    ELSE a.argument_name END) AS return_name,\n  s.src AS proc_def\nFROM all_objects o\n  LEFT JOIN sys.all_arguments a ON a.object_id = o.object_id\n    AND a.in_out = 'OUT'\n  JOIN (\n    SELECT\n      s.owner,\n      s.name,\n      listagg(s.text) WITHIN GROUP (ORDER BY s.line) AS src\n    FROM all_source s\n    GROUP BY s.owner, s.name\n  ) s ON s.owner = o.owner\n  AND s.name = o.object_name\nWHERE o.object_type IN ('FUNCTION','PROCEDURE')\n  AND o.owner = UPPER(%%schema string%%)\nORDER BY o.object_id\nENDSQL\n\n# oracle proc parameter list query\n$XOBIN query $ORDB -M -B -2 -T ProcParam -F OracleProcParams -a -o $DEST $@ << ENDSQL\nSELECT\n  LOWER(a.argument_name) AS param_name,\n  LOWER(CASE a.data_type\n    WHEN 'CHAR' THEN 'CHAR(' || a.data_length || ')'\n    WHEN 'VARCHAR2' THEN 'VARCHAR2(' || a.data_length || ')'\n    WHEN 'NUMBER' THEN 'NUMBER(' || NVL(a.data_precision, 0) || ',' || NVL(a.data_scale, 0) || ')'\n    ELSE a.data_type END) AS param_type\nFROM all_objects o\n  JOIN sys.all_arguments a ON a.object_id = o.object_id\n    AND a.in_out = 'IN'\nWHERE o.object_type IN ('FUNCTION','PROCEDURE')\n  AND o.owner = UPPER(%%schema string%%)\n  AND CAST(o.object_id AS NVARCHAR2(255)) = UPPER(%%id string%%)\nORDER BY a.position\nENDSQL\n\n# oracle table list query\n$XOBIN query $ORDB -M -B -2 -T Table -F OracleTables -a -o $DEST $@ << ENDSQL\nSELECT\n  LOWER(o.object_type) AS type,\n  LOWER(o.object_name) AS table_name,\n  CASE o.object_type\n    WHEN 'TABLE' THEN ' '\n    WHEN 'VIEW' THEN v.text_vc\n  END AS view_def\nFROM all_objects o\n  LEFT JOIN all_views v ON o.owner = v.owner\n    AND o.object_name = v.view_name\nWHERE o.object_name NOT LIKE '%$%'\n  AND o.object_name NOT LIKE 'LOGMNR%_%'\n  AND o.object_name NOT LIKE 'REDO_%'\n  AND o.object_name NOT LIKE 'SCHEDULER_%_TBL'\n  AND o.object_name NOT LIKE 'SQLPLUS_%'\n  AND o.owner = UPPER(%%schema string%%)\n  AND o.object_type = UPPER(%%typ string%%)\nENDSQL\n\n# Thanks to github.com/svenwiltink\n# oracle table column list query\n$XOBIN query $ORDB -M -B -2 -T Column -F OracleTableColumns -a -o $DEST $@ << ENDSQL\nSELECT\n  c.column_id AS field_ordinal,\n  LOWER(c.column_name) AS column_name,\n  LOWER(CASE c.data_type\n    WHEN 'CHAR' THEN 'CHAR(' || c.char_length || ')'\n    WHEN 'NCHAR' THEN 'NCHAR(' || c.char_length || ')'\n    WHEN 'VARCHAR2' THEN 'VARCHAR2(' || c.char_length || ')'\n    WHEN 'NVARCHAR2' THEN 'NVARCHAR2(' || c.char_length || ')'\n    WHEN 'NUMBER' THEN 'NUMBER(' || NVL(c.data_precision, 0) || ',' || NVL(c.data_scale, 0) || ')'\n    WHEN 'RAW' THEN 'RAW(' || c.data_length || ')'\n    ELSE c.data_type END) AS data_type,\n  CASE WHEN c.nullable = 'N' THEN '1' ELSE '0' END AS not_null,\n  CASE WHEN p.column_id IS NOT NULL THEN '1' ELSE '0' END as is_primary_key\nFROM all_tab_columns c\n  LEFT JOIN (\n    SELECT distinct c.column_id FROM all_tab_columns c\n    JOIN all_cons_columns l ON l.owner = c.owner\n      AND c.column_name = l.column_name\n    JOIN all_constraints r ON r.owner = c.owner\n      AND r.table_name = c.table_name\n      AND r.constraint_name = l.constraint_name\n      AND r.constraint_type = 'P'\n    WHERE c.owner = UPPER(%%schema string%%)\n    AND c.table_name = UPPER(%%table string%%)\n  ) p on p.column_id = c.column_id\nWHERE c.owner = UPPER(%%schema string%%)\n  AND c.table_name = UPPER(%%table string%%)\nORDER BY c.column_id\nENDSQL\n\n# oracle sequence list query\n$XOBIN query $ORDB -M -B -2 -T Sequence -F OracleTableSequences -a -o $DEST $@ << ENDSQL\nSELECT\n  LOWER(c.column_name) AS column_name\nFROM all_tab_columns c\nWHERE c.identity_column='YES'\n  AND c.owner = UPPER(%%schema string%%)\n  AND c.table_name  = UPPER(%%table string%%)\nENDSQL\n\n# oracle table foreign key list query\n$XOBIN query $ORDB -M -B -2 -T ForeignKey -F OracleTableForeignKeys -a -o $DEST $@ << ENDSQL\nSELECT\n  LOWER(a.constraint_name) AS foreign_key_name,\n  LOWER(a.column_name) AS column_name,\n  LOWER(c_pk.table_name) AS ref_table_name,\n  LOWER(b.column_name) AS ref_column_name\nFROM user_cons_columns a\n  JOIN user_constraints c ON a.owner = c.owner\n       AND a.constraint_name = c.constraint_name\n  JOIN user_constraints c_pk ON c.r_owner = c_pk.owner\n       AND c.r_constraint_name = c_pk.constraint_name\n  JOIN user_cons_columns b ON C_PK.owner = b.owner\n       AND C_PK.CONSTRAINT_NAME = b.constraint_name AND b.POSITION = a.POSITION\nWHERE c.constraint_type = 'R'\n  AND a.owner = UPPER(%%schema string%%)\n  AND a.table_name = UPPER(%%table string%%)\nENDSQL\n\n# oracle table index list query\n$XOBIN query $ORDB -M -B -2 -T Index -F OracleTableIndexes -a -o $DEST $@ << ENDSQL\nSELECT\n  LOWER(index_name) AS index_name,\n  CASE WHEN uniqueness = 'UNIQUE' THEN '1' ELSE '0' END AS is_unique\nFROM all_indexes\nWHERE owner = UPPER(%%schema string%%)\n  AND table_name = UPPER(%%table string%%)\nENDSQL\n\n# oracle index column list query\n$XOBIN query $ORDB -M -B -2 -T IndexColumn -F OracleIndexColumns -a -o $DEST $@ << ENDSQL\nSELECT\n  column_position AS seq_no,\n  LOWER(column_name) AS column_name\nFROM all_ind_columns\nWHERE index_owner = UPPER(%%schema string%%)\n  AND table_name = UPPER(%%table string%%)\n  AND index_name = UPPER(%%index string%%)\nORDER BY column_position\nENDSQL\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.6806640625,
          "content": "module github.com/xo/xo\n\ngo 1.22\n\nrequire (\n\tgithub.com/Masterminds/sprig/v3 v3.2.3\n\tgithub.com/go-sql-driver/mysql v1.8.1\n\tgithub.com/gobwas/glob v0.2.3\n\tgithub.com/goccy/go-yaml v1.11.3\n\tgithub.com/kenshaw/inflector v0.2.0\n\tgithub.com/kenshaw/snaker v0.2.0\n\tgithub.com/lib/pq v1.10.9\n\tgithub.com/mattn/go-sqlite3 v1.14.22\n\tgithub.com/microsoft/go-mssqldb v1.7.1\n\tgithub.com/sijms/go-ora/v2 v2.8.19\n\tgithub.com/spf13/cobra v1.8.0\n\tgithub.com/traefik/yaegi v0.16.1\n\tgithub.com/xo/dburl v0.23.1\n\tgithub.com/yookoala/realpath v1.0.0\n\tgolang.org/x/tools v0.21.0\n\tmvdan.cc/gofumpt v0.6.0\n)\n\nrequire (\n\tfilippo.io/edwards25519 v1.1.0 // indirect\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/semver/v3 v3.2.1 // indirect\n\tgithub.com/fatih/color v1.17.0 // indirect\n\tgithub.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9 // indirect\n\tgithub.com/golang-sql/sqlexp v0.1.0 // indirect\n\tgithub.com/google/go-cmp v0.6.0 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/huandu/xstrings v1.4.0 // indirect\n\tgithub.com/imdario/mergo v0.3.16 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/shopspring/decimal v1.4.0 // indirect\n\tgithub.com/spf13/cast v1.6.0 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgolang.org/x/crypto v0.23.0 // indirect\n\tgolang.org/x/mod v0.17.0 // indirect\n\tgolang.org/x/sys v0.20.0 // indirect\n\tgolang.org/x/text v0.15.0 // indirect\n\tgolang.org/x/xerrors v0.0.0-20231012003039-104605ab7028 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 15.2646484375,
          "content": "filippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=\nfilippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore v1.9.1 h1:lGlwhPtrX6EVml1hO0ivjkUxsSyl4dsiw9qcA1k/3IQ=\ngithub.com/Azure/azure-sdk-for-go/sdk/azcore v1.9.1/go.mod h1:RKUqNu35KJYcVG/fqTRqmuXJZYNhYkBrnC/hX7yGbTA=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity v1.5.1 h1:sO0/P7g68FrryJzljemN+6GTssUXdANk6aJ7T1ZxnsQ=\ngithub.com/Azure/azure-sdk-for-go/sdk/azidentity v1.5.1/go.mod h1:h8hyGFDsU5HMivxiS2iYFZsgDbU9OnnJ163x5UGVKYo=\ngithub.com/Azure/azure-sdk-for-go/sdk/internal v1.5.1 h1:6oNBlSdi1QqM1PNW7FPA6xOGA5UNsXnkaYZz9vdPGhA=\ngithub.com/Azure/azure-sdk-for-go/sdk/internal v1.5.1/go.mod h1:s4kgfzA0covAXNicZHDMN58jExvcng2mC/DepXiF1EI=\ngithub.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys v1.0.1 h1:MyVTgWR8qd/Jw1Le0NZebGBUCLbtak3bJ3z1OlqZBpw=\ngithub.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys v1.0.1/go.mod h1:GpPjLhVR9dnUoJMyHWSPy71xY9/lcmpzIPZXmF0FCVY=\ngithub.com/Azure/azure-sdk-for-go/sdk/security/keyvault/internal v1.0.0 h1:D3occbWoio4EBLkbkevetNMAVX197GkzbUMtqjGWn80=\ngithub.com/Azure/azure-sdk-for-go/sdk/security/keyvault/internal v1.0.0/go.mod h1:bTSOgj05NGRuHHhQwAdPnYr9TOdNmKlZTgGLL6nyAdI=\ngithub.com/AzureAD/microsoft-authentication-library-for-go v1.2.1 h1:DzHpqpoJVaCgOUdVHxE8QB52S6NiVdDQvGlny1qvPqA=\ngithub.com/AzureAD/microsoft-authentication-library-for-go v1.2.1/go.mod h1:wP83P5OoQ5p6ip3ScPr0BAq0BvuPAvacpEuSzyouqAI=\ngithub.com/Masterminds/goutils v1.1.1 h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=\ngithub.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=\ngithub.com/Masterminds/semver/v3 v3.2.0/go.mod h1:qvl/7zhW3nngYb5+80sSMF+FG2BjYrf8m9wsX0PNOMQ=\ngithub.com/Masterminds/semver/v3 v3.2.1 h1:RN9w6+7QoMeJVGyfmbcgs28Br8cvmnucEXnY0rYXWg0=\ngithub.com/Masterminds/semver/v3 v3.2.1/go.mod h1:qvl/7zhW3nngYb5+80sSMF+FG2BjYrf8m9wsX0PNOMQ=\ngithub.com/Masterminds/sprig/v3 v3.2.3 h1:eL2fZNezLomi0uOLqjQoN6BfsDD+fyLtgbJMAj9n6YA=\ngithub.com/Masterminds/sprig/v3 v3.2.3/go.mod h1:rXcFaZ2zZbLRJv/xSysmlgIM1u11eBaRMhvYXJNkGuM=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.3/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=\ngithub.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=\ngithub.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\ngithub.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/go-playground/locales v0.13.0 h1:HyWk6mgj5qFqCT5fjGBuRArbVDfE4hi8+e8ceBS/t7Q=\ngithub.com/go-playground/locales v0.13.0/go.mod h1:taPMhCMXrRLJO55olJkUXHZBHCxTMfnGwq/HNwmWNS8=\ngithub.com/go-playground/universal-translator v0.17.0 h1:icxd5fm+REJzpZx7ZfpaD876Lmtgy7VtROAbHHXk8no=\ngithub.com/go-playground/universal-translator v0.17.0/go.mod h1:UkSxE5sNxxRwHyU+Scu5vgOQjsIJAF8j9muTVoKLVtA=\ngithub.com/go-playground/validator/v10 v10.4.1 h1:pH2c5ADXtd66mxoE0Zm9SUhxE20r7aM3F26W0hOn+GE=\ngithub.com/go-playground/validator/v10 v10.4.1/go.mod h1:nlOn6nFhuKACm19sB/8EGNn9GlaMV7XkbRSipzJ0Ii4=\ngithub.com/go-sql-driver/mysql v1.8.1 h1:LedoTUt/eveggdHS9qUFC1EFSa8bU2+1pZjSRpvNJ1Y=\ngithub.com/go-sql-driver/mysql v1.8.1/go.mod h1:wEBSXgmK//2ZFJyE+qWnIsVGmvmEKlqwuVSjsCm7DZg=\ngithub.com/gobwas/glob v0.2.3 h1:A4xDbljILXROh+kObIiy5kIaPYD8e96x1tgBhUI5J+Y=\ngithub.com/gobwas/glob v0.2.3/go.mod h1:d3Ez4x06l9bZtSvzIay5+Yzi0fmZzPgnTbPcKjJAkT8=\ngithub.com/goccy/go-yaml v1.11.3 h1:B3W9IdWbvrUu2OYQGwvU1nZtvMQJPBKgBUuweJjLj6I=\ngithub.com/goccy/go-yaml v1.11.3/go.mod h1:wKnAMd44+9JAAnGQpWVEgBzGt3YuTaQ4uXoHvE4m7WU=\ngithub.com/golang-jwt/jwt/v5 v5.2.0 h1:d/ix8ftRUorsN+5eMIlF4T6J8CAt9rch3My2winC1Jw=\ngithub.com/golang-jwt/jwt/v5 v5.2.0/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=\ngithub.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9 h1:au07oEsX2xN0ktxqI+Sida1w446QrXBRJ0nee3SNZlA=\ngithub.com/golang-sql/civil v0.0.0-20220223132316-b832511892a9/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\ngithub.com/golang-sql/sqlexp v0.1.0 h1:ZCD6MBpcuOVfGVqsEmY5/4FtYiKz6tSyUv9LPEDei6A=\ngithub.com/golang-sql/sqlexp v0.1.0/go.mod h1:J4ad9Vo8ZCWQ2GMrC4UCQy1JpCbwU9m3EOqtpKwwwHI=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/huandu/xstrings v1.3.3/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=\ngithub.com/huandu/xstrings v1.4.0 h1:D17IlohoQq4UcpqD7fDk80P7l+lwAmlFaBHgOipl2FU=\ngithub.com/huandu/xstrings v1.4.0/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=\ngithub.com/imdario/mergo v0.3.11/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=\ngithub.com/imdario/mergo v0.3.16 h1:wwQJbIsHYGMUyLSPrEq1CT16AhnhNJQ51+4fdHUnCl4=\ngithub.com/imdario/mergo v0.3.16/go.mod h1:WBLT9ZmE3lPoWsEzCh9LPo3TiwVN+ZKEjmz+hD27ysY=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/kenshaw/inflector v0.2.0 h1:6HuXXlzqIIptlIkKvZ4fFSgfr0opnV6/LVIg+1+DlqY=\ngithub.com/kenshaw/inflector v0.2.0/go.mod h1:g5nxVgwZsIPE0eesk201Sp4YBwDDHZDfJHl6L2PUTM4=\ngithub.com/kenshaw/snaker v0.2.0 h1:DPlxCtAv9mw1wSsvIN1khUAPJUIbFJUckMIDWSQ7TC8=\ngithub.com/kenshaw/snaker v0.2.0/go.mod h1:DNyRUqHMZ18/zioxr6R7m4kSxxf2+QmB0BXoORsXRaY=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/leodido/go-urn v1.2.0 h1:hpXL4XnriNwQ/ABnpepYM/1vCLWNDfUNts8dX3xTG6Y=\ngithub.com/leodido/go-urn v1.2.0/go.mod h1:+8+nEpDfqqsY+g338gtMEUOtuK+4dEMhiQEgxpxOKII=\ngithub.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=\ngithub.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-sqlite3 v1.14.22 h1:2gZY6PC6kBnID23Tichd1K+Z0oS6nE/XwU+Vz/5o4kU=\ngithub.com/mattn/go-sqlite3 v1.14.22/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=\ngithub.com/microsoft/go-mssqldb v1.7.1 h1:KU/g8aWeM3Hx7IMOFpiwYiUkU+9zeISb4+tx3ScVfsM=\ngithub.com/microsoft/go-mssqldb v1.7.1/go.mod h1:kOvZKUdrhhFQmxLZqbwUV0rHkNkZpthMITIb2Ko1IoA=\ngithub.com/mitchellh/copystructure v1.0.0/go.mod h1:SNtv71yrdKgLRyLFxmLdkAbkKEFWgYaq1OVrnRcwhnw=\ngithub.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=\ngithub.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=\ngithub.com/mitchellh/reflectwalk v1.0.0/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=\ngithub.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c h1:+mdjkGKdHQG3305AYmdv1U2eRNDiU2ErMBj1gwrq8eQ=\ngithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c/go.mod h1:7rwL4CYBLnjLxUqIJNnCWiEdr3bn6IUYi15bNlnbCCU=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/shopspring/decimal v1.2.0/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp81k=\ngithub.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=\ngithub.com/sijms/go-ora/v2 v2.8.19 h1:7LoKZatDYGi18mkpQTR/gQvG9yOdtc7hPAex96Bqisc=\ngithub.com/sijms/go-ora/v2 v2.8.19/go.mod h1:EHxlY6x7y9HAsdfumurRfTd+v8NrEOTR3Xl4FWlH6xk=\ngithub.com/spf13/cast v1.3.1/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cast v1.6.0 h1:GEiTHELF+vaR5dhz3VqZfFSzZjYbgeKDpBxQVS4GYJ0=\ngithub.com/spf13/cast v1.6.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/spf13/cobra v1.8.0 h1:7aJaZx1B85qltLMc546zn58BxxfZdR/W22ej9CFoEf0=\ngithub.com/spf13/cobra v1.8.0/go.mod h1:WXLWApfZ71AjXPya3WOlMsY9yMs7YeiHhFVlvLyhcho=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/traefik/yaegi v0.16.1 h1:f1De3DVJqIDKmnasUF6MwmWv1dSEEat0wcpXhD2On3E=\ngithub.com/traefik/yaegi v0.16.1/go.mod h1:4eVhbPb3LnD2VigQjhYbEJ69vDRFdT2HQNrXx8eEwUY=\ngithub.com/xo/dburl v0.23.1 h1:PX1RgQaaJV1S5iADcM1TT39OLrg5daeV6Hp7RYwVoYw=\ngithub.com/xo/dburl v0.23.1/go.mod h1:B7/G9FGungw6ighV8xJNwWYQPMfn3gsi2sn5SE8Bzco=\ngithub.com/yookoala/realpath v1.0.0 h1:7OA9pj4FZd+oZDsyvXWQvjn5oBdcHRTV44PpdMSuImQ=\ngithub.com/yookoala/realpath v1.0.0/go.mod h1:gJJMA9wuX7AcqLy1+ffPatSCySA1FQ2S8Ya9AIoYBpE=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.3.0/go.mod h1:hebNnKkNXi2UzZN1eVRvBB7co0a+JxK6XbPiWVs/3J4=\ngolang.org/x/crypto v0.23.0 h1:dIJU/v2J8Mdglj/8rJ6UUOM3Zc9zLZxVZwwxMooUSAI=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.17.0 h1:zY54UmvipHiNd+pm+m0x9KhZ9hl1/7QNMyxXbc6ICqA=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.2.0/go.mod h1:KqCZLdyyvdV855qA2rE3GC2aiw5xGR5TEjj8smXukLY=\ngolang.org/x/net v0.25.0 h1:d/OCCoBEUq33pjydKrGQhw7IlUPI2Oylr+8qLx49kac=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.7.0 h1:YsImfSBoP9QPYL0xyKJPq0gcaJdG3rInoqxTWbfQu9M=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.20.0 h1:Od9JTbYCk261bKm4M/mw7AklTlFYIa0bIp9BgSm1S8Y=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.2.0/go.mod h1:TVmDHMZPmdnySmBfhjOoOdhjzdE1h4u1VwSiw2l1Nuc=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.15.0 h1:h1V/4gjBv8v9cjcR6+AR5+/cIYK5N/WAgiv4xlsEtAk=\ngolang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.21.0 h1:qc0xYgIbsSDt9EyWz05J5wfa7LOVW0YTLOXrqdLAWIw=\ngolang.org/x/tools v0.21.0/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20231012003039-104605ab7028 h1:+cNy6SZtPcJQH3LJVLOSmiC7MMxXNOb3PU/VUEz+EhU=\ngolang.org/x/xerrors v0.0.0-20231012003039-104605ab7028/go.mod h1:NDW/Ps6MPRej6fsCIbMTohpP40sJ/P/vI1MoTEGwX90=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nmvdan.cc/gofumpt v0.6.0 h1:G3QvahNDmpD+Aek/bNOLrFR2XC6ZAdo62dZu65gmwGo=\nmvdan.cc/gofumpt v0.6.0/go.mod h1:4L0wf+kgIPZtcCWXynNS2e6bhmj73umwnuXSZarixzA=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "loader",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.677734375,
          "content": "// Command xo generates code from database schemas and custom queries. Works\n// with PostgreSQL, MySQL, Microsoft SQL Server, Oracle Database, and SQLite3.\npackage main\n\n//go:generate ./gen.sh models\n//go:generate go generate ./internal\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t// drivers\n\t_ \"github.com/go-sql-driver/mysql\"\n\t_ \"github.com/lib/pq\"\n\t_ \"github.com/mattn/go-sqlite3\"\n\t_ \"github.com/microsoft/go-mssqldb\"\n\t_ \"github.com/sijms/go-ora/v2\"\n\n\t\"github.com/xo/xo/cmd\"\n)\n\n// version is the app version.\nvar version = \"0.0.0-dev\"\n\nfunc main() {\n\tif err := cmd.Run(context.Background(), \"xo\", version, os.Args[1:]...); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "types",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}