{
  "metadata": {
    "timestamp": 1736567103289,
    "page": 695,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NVIDIA/nvidia-container-toolkit",
      "stars": 2665,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".common-ci.yml",
          "type": "blob",
          "size": 6.69921875,
          "content": "# Copyright (c) 2021-2022, NVIDIA CORPORATION.  All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\ndefault:\n  image: docker\n  services:\n    - name: docker:dind\n      command: [\"--experimental\"]\n\nvariables:\n  GIT_SUBMODULE_STRATEGY: recursive\n  BUILD_MULTI_ARCH_IMAGES: \"true\"\n\nstages:\n  - trigger\n  - image\n  - lint\n  - go-checks\n  - go-build\n  - unit-tests\n  - package-build\n  - image-build\n  - test\n  - scan\n  - release\n  - sign\n\n.pipeline-trigger-rules:\n  rules:\n    # We trigger the pipeline if started manually\n    - if: $CI_PIPELINE_SOURCE == \"web\"\n    # We trigger the pipeline on the main branch\n    - if: $CI_COMMIT_BRANCH == \"main\"\n    # We trigger the pipeline on the release- branches\n    - if: $CI_COMMIT_BRANCH =~ /^release-.*$/\n    # We trigger the pipeline on tags\n    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG != \"\"\n\nworkflow:\n  rules:\n    # We trigger the pipeline on a merge request\n    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'\n    # We then add all the regular triggers\n    - !reference [.pipeline-trigger-rules, rules]\n\n# The main or manual job is used to filter out distributions or architectures that are not required on\n# every build.\n.main-or-manual:\n  rules:\n    - !reference [.pipeline-trigger-rules, rules]\n    - if: $CI_PIPELINE_SOURCE == \"schedule\"\n      when: manual\n\n# The trigger-pipeline job adds a manualy triggered job to the pipeline on merge requests.\ntrigger-pipeline:\n  stage: trigger\n  script:\n    - echo \"starting pipeline\"\n  rules:\n    - !reference [.main-or-manual, rules]\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n      when: manual\n      allow_failure: false\n    - when: always\n\n# Define the distribution targets\n.dist-centos7:\n  rules:\n    - !reference [.main-or-manual, rules]\n  variables:\n    DIST: centos7\n\n.dist-centos8:\n  variables:\n    DIST: centos8\n\n.dist-ubi8:\n  rules:\n    - !reference [.main-or-manual, rules]\n  variables:\n    DIST: ubi8\n\n.dist-ubuntu18.04:\n  variables:\n    DIST: ubuntu18.04\n\n.dist-ubuntu20.04:\n  variables:\n    DIST: ubuntu20.04\n\n.dist-packaging:\n  variables:\n    DIST: packaging\n\n# Define architecture targets\n.arch-aarch64:\n  variables:\n    ARCH: aarch64\n\n.arch-amd64:\n  variables:\n    ARCH: amd64\n\n.arch-arm64:\n  variables:\n    ARCH: arm64\n\n.arch-ppc64le:\n  rules:\n    - !reference [.main-or-manual, rules]\n  variables:\n    ARCH: ppc64le\n\n.arch-x86_64:\n  variables:\n    ARCH: x86_64\n\n# Define the platform targets\n.platform-amd64:\n  variables:\n    PLATFORM: linux/amd64\n\n.platform-arm64:\n  variables:\n    PLATFORM: linux/arm64\n\n# Define test helpers\n.integration:\n  stage: test\n  variables:\n    IMAGE_NAME: \"${CI_REGISTRY_IMAGE}/container-toolkit\"\n    VERSION: \"${CI_COMMIT_SHORT_SHA}\"\n  before_script:\n    - apk add --no-cache make bash jq\n    - docker login -u \"${CI_REGISTRY_USER}\" -p \"${CI_REGISTRY_PASSWORD}\" \"${CI_REGISTRY}\"\n    - docker pull \"${IMAGE_NAME}:${VERSION}-${DIST}\"\n  script:\n    - make -f deployments/container/Makefile test-${DIST}\n\n# Define the test targets\ntest-packaging:\n  extends:\n    - .integration\n    - .dist-packaging\n  needs:\n    - image-packaging\n\n# Download the regctl binary for use in the release steps\n.regctl-setup:\n  before_script:\n    - export REGCTL_VERSION=v0.4.5\n    - apk add --no-cache curl\n    - mkdir -p bin\n    - curl -sSLo bin/regctl https://github.com/regclient/regclient/releases/download/${REGCTL_VERSION}/regctl-linux-amd64\n    - chmod a+x bin/regctl\n    - export PATH=$(pwd)/bin:${PATH}\n\n# .release forms the base of the deployment jobs which push images to the CI registry.\n# This is extended with the version to be deployed (e.g. the SHA or TAG) and the\n# target os.\n.release:\n  stage: release\n  variables:\n    # Define the source image for the release\n    IMAGE_NAME: \"${CI_REGISTRY_IMAGE}/container-toolkit\"\n    VERSION: \"${CI_COMMIT_SHORT_SHA}\"\n    # OUT_IMAGE_VERSION is overridden for external releases\n    OUT_IMAGE_VERSION: \"${CI_COMMIT_SHORT_SHA}\"\n  before_script:\n    - !reference [.regctl-setup, before_script]\n\n    # We ensure that the OUT_IMAGE_VERSION is set\n    - 'echo Version: ${OUT_IMAGE_VERSION} ; [[ -n \"${OUT_IMAGE_VERSION}\" ]] || exit 1'\n\n    # In the case where we are deploying a different version to the CI_COMMIT_SHA, we\n    # need to tag the image.\n    # Note: a leading 'v' is stripped from the version if present\n    - apk add --no-cache make bash\n  script:\n    # Log in to the \"output\" registry, tag the image and push the image\n    - 'echo \"Logging in to CI registry ${CI_REGISTRY}\"'\n    - regctl registry login \"${CI_REGISTRY}\" -u \"${CI_REGISTRY_USER}\" -p \"${CI_REGISTRY_PASSWORD}\"\n    - '[ ${CI_REGISTRY} = ${OUT_REGISTRY} ] || echo \"Logging in to output registry ${OUT_REGISTRY}\"'\n    - '[ ${CI_REGISTRY} = ${OUT_REGISTRY} ] || regctl registry login \"${OUT_REGISTRY}\" -u \"${OUT_REGISTRY_USER}\" -p \"${OUT_REGISTRY_TOKEN}\"'\n\n    # Since OUT_IMAGE_NAME and OUT_IMAGE_VERSION are set, this will push the CI image to the\n    # Target\n    - make -f deployments/container/Makefile push-${DIST}\n\n# Define a staging release step that pushes an image to an internal \"staging\" repository\n# This is triggered for all pipelines (i.e. not only tags) to test the pipeline steps\n# outside of the release process.\n.release:staging:\n  extends:\n    - .release\n  variables:\n    OUT_REGISTRY_USER: \"${CI_REGISTRY_USER}\"\n    OUT_REGISTRY_TOKEN: \"${CI_REGISTRY_PASSWORD}\"\n    OUT_REGISTRY: \"${CI_REGISTRY}\"\n    OUT_IMAGE_NAME: \"${CI_REGISTRY_IMAGE}/staging/container-toolkit\"\n\n# Define an external release step that pushes an image to an external repository.\n# This includes a devlopment image off main.\n.release:external:\n  extends:\n    - .release\n  variables:\n    FORCE_PUBLISH_IMAGES: \"yes\"\n  rules:\n    - if: $CI_COMMIT_TAG\n      variables:\n        OUT_IMAGE_VERSION: \"${CI_COMMIT_TAG}\"\n    - if: $CI_COMMIT_BRANCH == $RELEASE_DEVEL_BRANCH\n      variables:\n        OUT_IMAGE_VERSION: \"${DEVEL_RELEASE_IMAGE_VERSION}\"\n\n# Define the release jobs\nrelease:staging-ubi8:\n  extends:\n    - .release:staging\n    - .dist-ubi8\n  needs:\n    - image-ubi8\n\nrelease:staging-ubuntu20.04:\n  extends:\n    - .release:staging\n    - .dist-ubuntu20.04\n  needs:\n    - test-toolkit-ubuntu20.04\n    - test-containerd-ubuntu20.04\n    - test-crio-ubuntu20.04\n    - test-docker-ubuntu20.04\n\nrelease:staging-packaging:\n  extends:\n    - .release:staging\n    - .dist-packaging\n  needs:\n    - test-packaging\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0146484375,
          "content": ".git\n/shared-*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.197265625,
          "content": "/dist\n/artifacts\n*.swp\n*.swo\n/coverage.out*\n/test/output/\n/nvidia-container-runtime\n/nvidia-container-runtime.*\n/nvidia-container-runtime-hook\n/nvidia-container-toolkit\n/nvidia-ctk\n/shared-*\n/release-*\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 5.51953125,
          "content": "# Copyright (c) 2019-2022, NVIDIA CORPORATION.  All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ninclude:\n  - .common-ci.yml\n\n# Define the package build helpers\n.multi-arch-build:\n  before_script:\n    - apk add --no-cache coreutils build-base sed git bash make\n    - '[[ -n \"${SKIP_QEMU_SETUP}\" ]] || docker run --rm --privileged multiarch/qemu-user-static --reset -p yes -c yes'\n\n.package-artifacts:\n  variables:\n    ARTIFACTS_NAME: \"toolkit-container-${CI_PIPELINE_ID}\"\n    ARTIFACTS_ROOT: \"toolkit-container-${CI_PIPELINE_ID}\"\n    DIST_DIR: ${CI_PROJECT_DIR}/${ARTIFACTS_ROOT}\n\n.package-build:\n  extends:\n    - .multi-arch-build\n    - .package-artifacts\n  stage: package-build\n  timeout: 3h\n  script:\n    - ./scripts/build-packages.sh ${DIST}-${ARCH}\n\n  artifacts:\n    name: ${ARTIFACTS_NAME}\n    paths:\n      - ${ARTIFACTS_ROOT}\n  needs:\n    - job: package-meta-packages\n      artifacts: true\n\n# Define the package build targets\npackage-meta-packages:\n  extends:\n    - .package-artifacts\n  stage: package-build\n  variables:\n    SKIP_LIBNVIDIA_CONTAINER: \"yes\"\n    SKIP_NVIDIA_CONTAINER_TOOLKIT: \"yes\"\n  parallel:\n    matrix:\n      - PACKAGING: [deb, rpm]\n  before_script:\n    - apk add --no-cache coreutils build-base sed git bash make\n  script:\n    - ./scripts/build-packages.sh ${PACKAGING}\n  artifacts:\n    name: ${ARTIFACTS_NAME}\n    paths:\n      - ${ARTIFACTS_ROOT}\n\npackage-centos7-aarch64:\n  extends:\n    - .package-build\n    - .dist-centos7\n    - .arch-aarch64\n\npackage-centos7-x86_64:\n  extends:\n    - .package-build\n    - .dist-centos7\n    - .arch-x86_64\n\npackage-centos8-ppc64le:\n  extends:\n    - .package-build\n    - .dist-centos8\n    - .arch-ppc64le\n\npackage-ubuntu18.04-amd64:\n  extends:\n    - .package-build\n    - .dist-ubuntu18.04\n    - .arch-amd64\n\npackage-ubuntu18.04-arm64:\n  extends:\n    - .package-build\n    - .dist-ubuntu18.04\n    - .arch-arm64\n\npackage-ubuntu18.04-ppc64le:\n  extends:\n    - .package-build\n    - .dist-ubuntu18.04\n    - .arch-ppc64le\n\n.buildx-setup:\n  before_script:\n    -  export BUILDX_VERSION=v0.6.3\n    -  apk add --no-cache curl\n    -  mkdir -p ~/.docker/cli-plugins\n    -  curl -sSLo ~/.docker/cli-plugins/docker-buildx \"https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.linux-amd64\"\n    -  chmod a+x ~/.docker/cli-plugins/docker-buildx\n\n    -  docker buildx create --use --platform=linux/amd64,linux/arm64\n\n    -  '[[ -n \"${SKIP_QEMU_SETUP}\" ]] || docker run --rm --privileged multiarch/qemu-user-static --reset -p yes'\n\n# Define the image build targets\n.image-build:\n  stage: image-build\n  variables:\n    IMAGE_NAME: \"${CI_REGISTRY_IMAGE}/container-toolkit\"\n    VERSION: \"${CI_COMMIT_SHORT_SHA}\"\n    PUSH_ON_BUILD: \"true\"\n  before_script:\n    - !reference [.buildx-setup, before_script]\n\n    - apk add --no-cache bash make git\n    - 'echo \"Logging in to CI registry ${CI_REGISTRY}\"'\n    - docker login -u \"${CI_REGISTRY_USER}\" -p \"${CI_REGISTRY_PASSWORD}\" \"${CI_REGISTRY}\"\n  script:\n    - make -f deployments/container/Makefile build-${DIST}\n\nimage-ubi8:\n  extends:\n    - .image-build\n    - .package-artifacts\n    - .dist-ubi8\n  needs:\n    # Note: The ubi8 image uses the centos7 packages\n    - package-centos7-aarch64\n    - package-centos7-x86_64\n\nimage-ubuntu20.04:\n  extends:\n    - .image-build\n    - .package-artifacts\n    - .dist-ubuntu20.04\n  needs:\n    - package-ubuntu18.04-amd64\n    - package-ubuntu18.04-arm64\n    - job: package-ubuntu18.04-ppc64le\n      optional: true\n\n# The DIST=packaging target creates an image containing all built packages\nimage-packaging:\n  extends:\n    - .image-build\n    - .package-artifacts\n    - .dist-packaging\n  needs:\n    - job: package-ubuntu18.04-amd64\n    - job: package-ubuntu18.04-arm64\n    - job: package-amazonlinux2-aarch64\n      optional: true\n    - job: package-amazonlinux2-x86_64\n      optional: true\n    - job: package-centos7-aarch64\n      optional: true\n    - job: package-centos7-x86_64\n      optional: true\n    - job: package-centos8-ppc64le\n      optional: true\n    - job: package-debian10-amd64\n      optional: true\n    - job: package-opensuse-leap15.1-x86_64\n      optional: true\n    - job: package-ubuntu18.04-ppc64le\n      optional: true\n\n# Define publish test helpers\n.test:docker:\n  extends:\n    - .integration\n  variables:\n    TEST_CASES: \"docker\"\n\n.test:containerd:\n  # TODO: The containerd tests fail due to issues with SIGHUP.\n  # Until this is resolved with retry up to twice and allow failure here.\n  retry: 2\n  allow_failure: true\n  extends:\n    - .integration\n  variables:\n    TEST_CASES: \"containerd\"\n\n.test:crio:\n  extends:\n    - .integration\n  variables:\n    TEST_CASES: \"crio\"\n\n# Define the test targets\ntest-toolkit-ubuntu20.04:\n  extends:\n    - .test:toolkit\n    - .dist-ubuntu20.04\n  needs:\n    - image-ubuntu20.04\n\ntest-containerd-ubuntu20.04:\n  extends:\n    - .test:containerd\n    - .dist-ubuntu20.04\n  needs:\n    - image-ubuntu20.04\n\ntest-crio-ubuntu20.04:\n  extends:\n    - .test:crio\n    - .dist-ubuntu20.04\n  needs:\n    - image-ubuntu20.04\n\ntest-docker-ubuntu20.04:\n  extends:\n    - .test:docker\n    - .dist-ubuntu20.04\n  needs:\n    - image-ubuntu20.04\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.154296875,
          "content": "[submodule \"third_party/libnvidia-container\"]\n\tpath = third_party/libnvidia-container\n\turl = https://github.com/NVIDIA/libnvidia-container.git\n\tbranch = main\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 1.0830078125,
          "content": "run:\n  timeout: 10m\n\nlinters:\n  enable:\n    - contextcheck\n    - gocritic\n    - gofmt\n    - goimports\n    - gosec\n    - gosimple\n    - govet\n    - ineffassign\n    - misspell\n    - staticcheck\n    - unconvert\n\nlinters-settings:\n  goimports:\n    local-prefixes: github.com/NVIDIA/nvidia-container-toolkit\n\nissues:\n  exclude:\n  # The legacy hook relies on spec.Hooks.Prestart, which is deprecated as of the v1.2.0 OCI runtime spec.\n  - \"SA1019:(.+).Prestart is deprecated(.+)\"\n  # TODO: We should address each of the following integer overflows.\n  - \"G115: integer overflow conversion(.+)\"\n  exclude-rules:\n  # Exclude the gocritic dupSubExpr issue for cgo files.\n  - path: internal/dxcore/dxcore.go\n    linters:\n    - gocritic\n    text: dupSubExpr\n  # Exclude the checks for usage of returns to config.Delete(Path) in the crio and containerd config packages.\n  - path: pkg/config/engine/\n    linters:\n    - errcheck\n    text: config.Delete\n  # RENDERD refers to the Render Device and not the past tense of render.\n  - path: .*.go\n    linters:\n    - misspell\n    text: \"`RENDERD` is a misspelling of `RENDERED`\"\n"
        },
        {
          "name": ".nvidia-ci.yml",
          "type": "blob",
          "size": 9.146484375,
          "content": "# Copyright (c) 2021-2022, NVIDIA CORPORATION.  All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ninclude:\n  - local: '.common-ci.yml'\n\ndefault:\n  tags:\n    - cnt\n    - container-dev\n    - docker/multi-arch\n    - docker/privileged\n    - os/linux\n    - type/docker\n\nvariables:\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: \"/certs\"\n  # Release \"devel\"-tagged images off the main branch\n  RELEASE_DEVEL_BRANCH: \"main\"\n  DEVEL_RELEASE_IMAGE_VERSION: \"devel\"\n  # On the multi-arch builder we don't need the qemu setup.\n  SKIP_QEMU_SETUP: \"1\"\n  # Define the public staging registry\n  STAGING_REGISTRY: ghcr.io/nvidia\n  STAGING_VERSION: ${CI_COMMIT_SHORT_SHA}\n  ARTIFACTORY_REPO_BASE: \"https://urm.nvidia.com/artifactory/sw-gpu-cloudnative\"\n  KITMAKER_RELEASE_FOLDER: \"kitmaker\"\n  PACKAGE_ARCHIVE_RELEASE_FOLDER: \"releases\"\n\n.image-pull:\n  stage: image-build\n  variables:\n    IN_REGISTRY: \"${STAGING_REGISTRY}\"\n    IN_IMAGE_NAME: container-toolkit\n    IN_VERSION: \"${STAGING_VERSION}\"\n    OUT_REGISTRY_USER: \"${CI_REGISTRY_USER}\"\n    OUT_REGISTRY_TOKEN: \"${CI_REGISTRY_PASSWORD}\"\n    OUT_REGISTRY: \"${CI_REGISTRY}\"\n    OUT_IMAGE_NAME: \"${CI_REGISTRY_IMAGE}/container-toolkit\"\n    PUSH_MULTIPLE_TAGS: \"false\"\n  # We delay the job start to allow the public pipeline to generate the required images.\n  rules:\n    - when: delayed\n      start_in: 30 minutes\n  timeout: 30 minutes\n  retry:\n    max: 2\n    when:\n      - job_execution_timeout\n      - stuck_or_timeout_failure\n  before_script:\n    - !reference [.regctl-setup, before_script]\n    - apk add --no-cache make bash\n    - >\n      regctl manifest get ${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST} --list > /dev/null && echo \"${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST}\" || ( echo \"${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST} does not exist\" && sleep infinity )\n  script:\n    - regctl registry login \"${OUT_REGISTRY}\" -u \"${OUT_REGISTRY_USER}\" -p \"${OUT_REGISTRY_TOKEN}\"\n    - make -f deployments/container/Makefile IMAGE=${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST} OUT_IMAGE=${OUT_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}-${DIST} push-${DIST}\n\nimage-ubi8:\n  extends:\n    - .dist-ubi8\n    - .image-pull\n\nimage-ubuntu20.04:\n  extends:\n    - .dist-ubuntu20.04\n    - .image-pull\n\n# The DIST=packaging target creates an image containing all built packages\nimage-packaging:\n  extends:\n    - .dist-packaging\n    - .image-pull\n\n# We skip the integration tests for the internal CI:\n.integration:\n  stage: test\n  before_script:\n    - echo \"Skipped in internal CI\"\n  script:\n    - echo \"Skipped in internal CI\"\n\n# The .scan step forms the base of the image scan operation performed before releasing\n# images.\n.scan:\n  stage: scan\n  image: \"${PULSE_IMAGE}\"\n  variables:\n    IMAGE: \"${CI_REGISTRY_IMAGE}/container-toolkit:${CI_COMMIT_SHORT_SHA}-${DIST}\"\n    IMAGE_ARCHIVE: \"container-toolkit-${DIST}-${ARCH}-${CI_JOB_ID}.tar\"\n  rules:\n    - if: $SKIP_SCANS != \"yes\"\n    - when: manual\n  before_script:\n    - docker login -u \"${CI_REGISTRY_USER}\" -p \"${CI_REGISTRY_PASSWORD}\" \"${CI_REGISTRY}\"\n    # TODO: We should specify the architecture here and scan all architectures\n    - docker pull --platform=\"${PLATFORM}\" \"${IMAGE}\"\n    - docker save \"${IMAGE}\" -o \"${IMAGE_ARCHIVE}\"\n    - AuthHeader=$(echo -n $SSA_CLIENT_ID:$SSA_CLIENT_SECRET | base64 -w0)\n    - >\n      export SSA_TOKEN=$(curl --request POST --header \"Authorization: Basic $AuthHeader\" --header \"Content-Type: application/x-www-form-urlencoded\" ${SSA_ISSUER_URL} | jq \".access_token\" |  tr -d '\"')\n    - if [ -z \"$SSA_TOKEN\" ]; then exit 1; else echo \"SSA_TOKEN set!\"; fi\n  script:\n    - pulse-cli -n $NSPECT_ID --ssa $SSA_TOKEN scan -i $IMAGE_ARCHIVE -p $CONTAINER_POLICY -o\n    - rm -f \"${IMAGE_ARCHIVE}\"\n  artifacts:\n    when: always\n    expire_in: 1 week\n    paths:\n      - pulse-cli.log\n      - licenses.json\n      - sbom.json\n      - vulns.json\n      - policy_evaluation.json\n\n# Define the scan targets\nscan-ubuntu20.04-amd64:\n  extends:\n    - .dist-ubuntu20.04\n    - .platform-amd64\n    - .scan\n  needs:\n    - image-ubuntu20.04\n\nscan-ubuntu20.04-arm64:\n  extends:\n    - .dist-ubuntu20.04\n    - .platform-arm64\n    - .scan\n  needs:\n    - image-ubuntu20.04\n    - scan-ubuntu20.04-amd64\n\nscan-ubi8-amd64:\n  extends:\n    - .dist-ubi8\n    - .platform-amd64\n    - .scan\n  needs:\n    - image-ubi8\n\nscan-ubi8-arm64:\n  extends:\n    - .dist-ubi8\n    - .platform-arm64\n    - .scan\n  needs:\n    - image-ubi8\n    - scan-ubi8-amd64\n\nscan-packaging:\n  extends:\n    - .dist-packaging\n    - .scan\n  needs:\n    - image-packaging\n\n# Define external release helpers\n.release:ngc:\n  extends:\n    - .release:external\n  variables:\n    OUT_REGISTRY_USER: \"${NGC_REGISTRY_USER}\"\n    OUT_REGISTRY_TOKEN: \"${NGC_REGISTRY_TOKEN}\"\n    OUT_REGISTRY: \"${NGC_REGISTRY}\"\n    OUT_IMAGE_NAME: \"${NGC_REGISTRY_IMAGE}\"\n\n.release:packages:\n  stage: release\n  needs:\n    - image-packaging\n  variables:\n    VERSION: \"${CI_COMMIT_SHORT_SHA}\"\n    PACKAGE_REGISTRY: \"${CI_REGISTRY}\"\n    PACKAGE_REGISTRY_USER: \"${CI_REGISTRY_USER}\"\n    PACKAGE_REGISTRY_TOKEN: \"${CI_REGISTRY_PASSWORD}\"\n    PACKAGE_IMAGE_NAME: \"${CI_REGISTRY_IMAGE}/container-toolkit\"\n    PACKAGE_IMAGE_TAG: \"${CI_COMMIT_SHORT_SHA}-packaging\"\n    KITMAKER_ARTIFACTORY_REPO: \"${ARTIFACTORY_REPO_BASE}-generic-local/${KITMAKER_RELEASE_FOLDER}\"\n    ARTIFACTS_DIR: \"${CI_PROJECT_DIR}/artifacts\"\n  script:\n    - !reference [.regctl-setup, before_script]\n    - apk add --no-cache bash git\n    - regctl registry login \"${PACKAGE_REGISTRY}\" -u \"${PACKAGE_REGISTRY_USER}\" -p \"${PACKAGE_REGISTRY_TOKEN}\"\n    - ./scripts/extract-packages.sh \"${PACKAGE_IMAGE_NAME}:${PACKAGE_IMAGE_TAG}\"\n    - ./scripts/release-kitmaker-artifactory.sh \"${KITMAKER_ARTIFACTORY_REPO}\"\n    - rm -rf ${ARTIFACTS_DIR}\n\n# Define the package release targets\nrelease:packages:kitmaker:\n  extends:\n    - .release:packages\n\nrelease:archive:\n  extends:\n    - .release:external\n  needs:\n    - image-packaging\n  variables:\n    VERSION: \"${CI_COMMIT_SHORT_SHA}\"\n    PACKAGE_REGISTRY: \"${CI_REGISTRY}\"\n    PACKAGE_REGISTRY_USER: \"${CI_REGISTRY_USER}\"\n    PACKAGE_REGISTRY_TOKEN: \"${CI_REGISTRY_PASSWORD}\"\n    PACKAGE_IMAGE_NAME: \"${CI_REGISTRY_IMAGE}/container-toolkit\"\n    PACKAGE_IMAGE_TAG: \"${CI_COMMIT_SHORT_SHA}-packaging\"\n    PACKAGE_ARCHIVE_ARTIFACTORY_REPO: \"${ARTIFACTORY_REPO_BASE}-generic-local/${PACKAGE_ARCHIVE_RELEASE_FOLDER}\"\n  script:\n    - apk add --no-cache bash git\n    - ./scripts/archive-packages.sh \"${PACKAGE_ARCHIVE_ARTIFACTORY_REPO}\"\n\nrelease:staging-ubuntu20.04:\n  extends:\n    - .release:staging\n    - .dist-ubuntu20.04\n  needs:\n    - image-ubuntu20.04\n\n# Define the external release targets\n# Release to NGC\nrelease:ngc-ubuntu20.04:\n  extends:\n    - .dist-ubuntu20.04\n    - .release:ngc\n\nrelease:ngc-ubi8:\n  extends:\n    - .dist-ubi8\n    - .release:ngc\n\nrelease:ngc-packaging:\n  extends:\n    - .dist-packaging\n    - .release:ngc\n\n# Define the external image signing steps for NGC\n# Download the ngc cli binary for use in the sign steps\n.ngccli-setup:\n  before_script:\n    - apt-get update && apt-get install -y curl unzip jq\n    - |\n      if [ -z \"${NGCCLI_VERSION}\" ]; then\n        NGC_VERSION_URL=\"https://api.ngc.nvidia.com/v2/resources/nvidia/ngc-apps/ngc_cli/versions\"\n        # Extract the latest version from the JSON data using jq\n        export NGCCLI_VERSION=$(curl -s $NGC_VERSION_URL | jq -r '.recipe.latestVersionIdStr')\n      fi\n      echo \"NGCCLI_VERSION ${NGCCLI_VERSION}\"\n    - curl -sSLo ngccli_linux.zip https://api.ngc.nvidia.com/v2/resources/nvidia/ngc-apps/ngc_cli/versions/${NGCCLI_VERSION}/files/ngccli_linux.zip\n    - unzip ngccli_linux.zip\n    - chmod u+x ngc-cli/ngc\n\n# .sign forms the base of the deployment jobs which signs images in the CI registry.\n# This is extended with the image name and version to be deployed.\n.sign:ngc:\n  image: ubuntu:latest\n  stage: sign\n  rules:\n    - if: $CI_COMMIT_TAG\n  variables:\n    NGC_CLI_API_KEY: \"${NGC_REGISTRY_TOKEN}\"\n    IMAGE_NAME: \"${NGC_REGISTRY_IMAGE}\"\n    IMAGE_TAG: \"${CI_COMMIT_TAG}-${DIST}\"\n  retry:\n    max: 2\n  before_script:\n    - !reference [.ngccli-setup, before_script]\n    # We ensure that the IMAGE_NAME and IMAGE_TAG is set\n    - 'echo Image Name: ${IMAGE_NAME} && [[ -n \"${IMAGE_NAME}\" ]] || exit 1'\n    - 'echo Image Tag: ${IMAGE_TAG} && [[ -n \"${IMAGE_TAG}\" ]] || exit 1'\n  script:\n    - 'echo \"Signing the image ${IMAGE_NAME}:${IMAGE_TAG}\"'\n    - ngc-cli/ngc registry image publish --source ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:${IMAGE_TAG} --public --discoverable --allow-guest --sign --org nvidia\n\nsign:ngc-ubuntu20.04:\n  extends:\n    - .dist-ubuntu20.04\n    - .sign:ngc\n  needs:\n    - release:ngc-ubuntu20.04\n\nsign:ngc-ubi8:\n  extends:\n    - .dist-ubi8\n    - .sign:ngc\n  needs:\n    - release:ngc-ubi8\n\nsign:ngc-packaging:\n  extends:\n    - .dist-packaging\n    - .sign:ngc\n  needs:\n    - release:ngc-packaging\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 25.87890625,
          "content": "# NVIDIA Container Toolkit Changelog\n\n## v1.17.3\n- Only allow host-relative LDConfig paths by default.\n### Changes in libnvidia-container\n- Create virtual copy of host ldconfig binary before calling fexecve()\n\n## v1.17.2\n- Fixed a bug where legacy images would set imex channels as `all`.\n\n## v1.17.1\n- Fixed a bug where specific symlinks existing in a container image could cause a container to fail to start.\n- Fixed a bug on Tegra-based systems where a container would fail to start.\n- Fixed a bug where the default container runtime config path was not properly set.\n\n### Changes in the Toolkit Container\n- Fallback to using a config file if the current runtime config can not be determined from the command line.\n\n## v1.17.0\n- Promote v1.17.0-rc.2 to v1.17.0\n- Fix bug when using just-in-time CDI spec generation\n- Check for valid paths in create-symlinks hook\n\n## v1.17.0-rc.2\n- Fix bug in locating libcuda.so from ldcache\n- Fix bug in sorting of symlink chain\n- Remove unsupported print-ldcache command\n- Remove csv-filename support from create-symlinks\n\n### Changes in the Toolkit Container\n- Fallback to `crio-status` if `crio status` does not work when configuring the crio runtime\n\n## v1.17.0-rc.1\n- Allow IMEX channels to be requested as volume mounts\n- Fix typo in error message\n- Add disable-imex-channel-creation feature flag\n- Add -z,lazy to LDFLAGS\n- Add imex channels to management CDI spec\n- Add support to fetch current container runtime config from the command line.\n- Add creation of select driver symlinks to CDI spec generation.\n- Remove support for config overrides when configuring runtimes.\n- Skip explicit creation of libnvidia-allocator.so.1 symlink\n- Add vdpau as as a driver library search path.\n- Add support for using libnvsandboxutils to generate CDI specifications.\n\n### Changes in the Toolkit Container\n\n- Allow opt-in features to be selected when deploying the toolkit-container.\n- Bump CUDA base image version to 12.6.2\n- Remove support for config overrides when configuring runtimes.\n\n### Changes in libnvidia-container\n\n- Add no-create-imex-channels command line option.\n\n## v1.16.2\n- Exclude libnvidia-allocator from graphics mounts. This fixes a bug that leaks mounts when a container is started with bi-directional mount propagation.\n- Use empty string for default runtime-config-override. This removes a redundant warning for runtimes (e.g. Docker) where this is not applicable.\n\n### Changes in the Toolkit Container\n- Bump CUDA base image version to 12.6.0\n\n### Changes in libnvidia-container\n- Add no-gsp-firmware command line option\n- Add no-fabricmanager command line option\n- Add no-persistenced command line option\n- Skip directories and symlinks when mounting libraries.\n\n## v1.16.1\n- Fix bug with processing errors during CDI spec generation for MIG devices\n\n## v1.16.0\n- Promote v1.16.0-rc.2 to v1.16.0\n\n### Changes in the Toolkit Container\n- Bump CUDA base image version to 12.5.1\n\n## v1.16.0-rc.2\n- Use relative path to locate driver libraries\n- Add RelativeToRoot function to Driver\n- Inject additional libraries for full X11 functionality\n- Extract options from default runtime if runc does not exist\n- Avoid using map pointers as maps are always passed by reference\n- Reduce logging for the NVIDIA Container runtime\n- Fix bug in argument parsing for logger creation\n\n## v1.16.0-rc.1\n\n- Support vulkan ICD files directly in a driver root. This allows for the discovery of vulkan files in GKE driver installations.\n- Increase priority of ld.so.conf.d config file injected into container. This ensures that injected libraries are preferred over libraries present in the container.\n- Set default CDI spec permissions to 644. This fixes permission issues when using the `nvidia-ctk cdi transform` functions.\n- Add `dev-root` option to `nvidia-ctk system create-device-nodes` command.\n- Fix location of `libnvidia-ml.so.1` when a non-standard driver root is used. This enabled CDI spec generation when using the driver container on a host.\n- Recalculate minimum required CDI spec version on save.\n- Move `nvidia-ctk hook` commands to a separate `nvidia-cdi-hook` binary. The same subcommands are supported.\n- Use `:` as an `nvidia-ctk config --set` list separator. This fixes a bug when trying to set config options that are lists.\n\n- [toolkit-container] Bump CUDA base image version to 12.5.0\n- [toolkit-container] Allow the path to `toolkit.pid` to be specified directly.\n- [toolkit-container] Remove provenance information from image manifests.\n- [toolkit-container] Add `dev-root` option when configuring the toolkit. This adds support for GKE driver installations.\n\n## v1.15.0\n\n* Remove `nvidia-container-runtime` and `nvidia-docker2` packages.\n* Use `XDG_DATA_DIRS` environment variable when locating config files such as graphics config files.\n* Add support for v0.7.0 Container Device Interface (CDI) specification.\n* Add `--config-search-path` option to `nvidia-ctk cdi generate` command. These paths are used when locating driver files such as graphics config files.\n* Use D3DKMTEnumAdapters3 to enumerate adpaters on WSL2 if available.\n* Add support for v1.2.0 OCI Runtime specification.\n* Explicitly set `NVIDIA_VISIBLE_DEVICES=void` in generated CDI specifications. This prevents the NVIDIA Container Runtime from making additional modifications.\n\n* [libnvidia-container] Use D3DKMTEnumAdapters3 to enumerate adpaters on WSL2 if available.\n\n* [toolkit-container] Bump CUDA base image version to 12.4.1\n\n## v1.15.0-rc.4\n* Add a `--spec-dir` option to the `nvidia-ctk cdi generate` command. This allows specs outside of `/etc/cdi` and `/var/run/cdi` to be processed.\n* Add support for extracting device major number from `/proc/devices` if `nvidia` is used as a device name over `nvidia-frontend`.\n* Allow multiple device naming strategies for `nvidia-ctk cdi generate` command. This allows a single\n  CDI spec to be generated that includes GPUs by index and UUID.\n* Set the default `--device-name-strategy` for the `nvidia-ctk cdi generate` command to `[index, uuid]`.\n* Remove `libnvidia-container0` jetpack dependency included for legacy Tegra-based systems.\n* Add `NVIDIA_VISIBLE_DEVICES=void` to generated CDI specifications.\n\n* [toolkit-container] Remove centos7 image. The ubi8 image can be used on all RPM-based platforms.\n* [toolkit-container] Bump CUDA base image version to 12.3.2\n\n## v1.15.0-rc.3\n* Fix bug in `nvidia-ctk hook update-ldcache` where default `--ldconfig-path` value was not applied.\n\n## v1.15.0-rc.2\n* Extend the `runtime.nvidia.com/gpu` CDI kind to support full-GPUs and MIG devices specified by index or UUID.\n* Fix bug when specifying `--dev-root` for Tegra-based systems.\n* Log explicitly requested runtime mode.\n* Remove package dependency on libseccomp.\n* Added detection of libnvdxgdmal.so.1 on WSL2\n* Use devRoot to resolve MIG device nodes.\n* Fix bug in determining default nvidia-container-runtime.user config value on SUSE-based systems.\n* Add `crun` to the list of configured low-level runtimes.\n* Added support for `--ldconfig-path` to `nvidia-ctk cdi generate` command.\n* Fix `nvidia-ctk runtime configure --cdi.enabled` for Docker.\n* Add discovery of the GDRCopy device (`gdrdrv`) if the `NVIDIA_GDRCOPY` environment variable of the container is set to `enabled`\n\n* [toolkit-container] Bump CUDA base image version to 12.3.1.\n\n## v1.15.0-rc.1\n* Skip update of ldcache in containers without ldconfig. The .so.SONAME symlinks are still created.\n* Normalize ldconfig path on use. This automatically adjust the ldconfig setting applied to ldconfig.real on systems where this exists.\n* Include `nvidia/nvoptix.bin` in list of graphics mounts.\n* Include `vulkan/icd.d/nvidia_layers.json` in list of graphics mounts.\n* Add support for `--library-search-paths` to `nvidia-ctk cdi generate` command.\n* Add support for injecting /dev/nvidia-nvswitch* devices if the NVIDIA_NVSWITCH=enabled envvar is specified.\n* Added support for `nvidia-ctk runtime configure --enable-cdi` for the `docker` runtime. Note that this requires Docker >= 25.\n* Fixed bug in `nvidia-ctk config` command when using `--set`. The types of applied config options are now applied correctly.\n* Add `--relative-to` option to `nvidia-ctk transform root` command. This controls whether the root transformation is applied to host or container paths.\n* Added automatic CDI spec generation when the `runtime.nvidia.com/gpu=all` device is requested by a container.\n\n* [libnvidia-container] Fix device permission check when using cgroupv2 (fixes #227)\n\n## v1.14.3\n* [toolkit-container] Bump CUDA base image version to 12.2.2.\n\n## v1.14.2\n* Fix bug on Tegra-based systems where symlinks were not created in containers.\n* Add --csv.ignore-pattern command line option to nvidia-ctk cdi generate command.\n\n## v1.14.1\n* Fixed bug where contents of `/etc/nvidia-container-runtime/config.toml` is ignored by the NVIDIA Container Runtime Hook.\n\n* [libnvidia-container] Use libelf.so on RPM-based systems due to removed mageia repositories hosting pmake and bmake.\n\n## v1.14.0\n* Promote v1.14.0-rc.3 to v1.14.0\n\n## v1.14.0-rc.3\n* Added support for generating OCI hook JSON file to `nvidia-ctk runtime configure` command.\n* Remove installation of OCI hook JSON from RPM package.\n* Refactored config for `nvidia-container-runtime-hook`.\n* Added a `nvidia-ctk config` command which supports setting config options using a `--set` flag.\n* Added `--library-search-path` option to `nvidia-ctk cdi generate` command in `csv` mode. This allows folders where\n  libraries are located to be specified explicitly.\n* Updated go-nvlib to support devices which are not present in the PCI device database. This allows the creation of dev/char symlinks on systems with such devices installed.\n* Added `UsesNVGPUModule` info function for more robust platform detection. This is required on Tegra-based systems where libnvidia-ml.so is also supported.\n\n* [toolkit-container] Set `NVIDIA_VISIBLE_DEVICES=void` to prevent injection of NVIDIA devices and drivers into the NVIDIA Container Toolkit container.\n\n## v1.14.0-rc.2\n* Fix bug causing incorrect nvidia-smi symlink to be created on WSL2 systems with multiple driver roots.\n* Remove dependency on coreutils when installing package on RPM-based systems.\n* Create output folders if required when running `nvidia-ctk runtime configure`\n* Generate default config as post-install step.\n* Added support for detecting GSP firmware at custom paths when generating CDI specifications.\n* Added logic to skip the extraction of image requirements if `NVIDIA_DISABLE_REQUIRES` is set to `true`.\n\n* [libnvidia-container] Include Shared Compiler Library (libnvidia-gpucomp.so) in the list of compute libaries.\n\n* [toolkit-container] Ensure that common envvars have higher priority when configuring the container engines.\n* [toolkit-container] Bump CUDA base image version to 12.2.0.\n* [toolkit-container] Remove installation of nvidia-experimental runtime. This is superceded by the NVIDIA Container Runtime in CDI mode.\n\n## v1.14.0-rc.1\n\n* Add support for updating containerd configs to the `nvidia-ctk runtime configure` command.\n* Create file in `etc/ld.so.conf.d` with permissions `644` to support non-root containers.\n* Generate CDI specification files with `644` permissions to allow rootless applications (e.g. podman)\n* Add `nvidia-ctk cdi list` command to show the known CDI devices.\n* Add support for generating merged devices (e.g. `all` device) to the nvcdi API.\n* Use *.* pattern to locate libcuda.so when generating a CDI specification to support platforms where a patch version is not specified.\n* Update go-nvlib to skip devices that are not MIG capable when generating CDI specifications.\n* Add `nvidia-container-runtime-hook.path` config option to specify NVIDIA Container Runtime Hook path explicitly.\n* Fix bug in creation of `/dev/char` symlinks by failing operation if kernel modules are not loaded.\n* Add option to load kernel modules when creating device nodes\n* Add option to create device nodes when creating `/dev/char` symlinks\n\n* [libnvidia-container] Support OpenSSL 3 with the Encrypt/Decrypt library\n\n* [toolkit-container] Allow same envars for all runtime configs\n\n## v1.13.1\n\n* Update `update-ldcache` hook to only update ldcache if it exists.\n* Update `update-ldcache` hook to create `/etc/ld.so.conf.d` folder if it doesn't exist.\n* Fix failure when libcuda cannot be located during XOrg library discovery.\n* Fix CDI spec generation on systems that use `/etc/alternatives` (e.g. Debian)\n\n## v1.13.0\n\n* Promote 1.13.0-rc.3 to 1.13.0\n\n## v1.13.0-rc.3\n\n* Only initialize NVML for modes that require it when runing `nvidia-ctk cdi generate`.\n* Prefer /run over /var/run when locating nvidia-persistenced and nvidia-fabricmanager sockets.\n* Fix the generation of CDI specifications for management containers when the driver libraries are not in the LDCache.\n* Add transformers to deduplicate and simplify CDI specifications.\n* Generate a simplified CDI specification by default. This means that entities in the common edits in a spec are not included in device definitions.\n* Also return an error from the nvcdi.New constructor instead of panicing.\n* Detect XOrg libraries for injection and CDI spec generation.\n* Add `nvidia-ctk system create-device-nodes` command to create control devices.\n* Add `nvidia-ctk cdi transform` command to apply transforms to CDI specifications.\n* Add `--vendor` and `--class` options to `nvidia-ctk cdi generate`\n\n* [libnvidia-container] Fix segmentation fault when RPC initialization fails.\n* [libnvidia-container] Build centos variants of the NVIDIA Container Library with static libtirpc v1.3.2.\n* [libnvidia-container] Remove make targets for fedora35 as the centos8 packages are compatible.\n\n* [toolkit-container] Add `nvidia-container-runtime.modes.cdi.annotation-prefixes` config option that allows the CDI annotation prefixes that are read to be overridden.\n* [toolkit-container] Create device nodes when generating CDI specification for management containers.\n* [toolkit-container] Add `nvidia-container-runtime.runtimes` config option to set the low-level runtime for the NVIDIA Container Runtime\n\n## v1.13.0-rc.2\n\n* Don't fail chmod hook if paths are not injected\n* Only create `by-path` symlinks if CDI devices are actually requested.\n* Fix possible blank `nvidia-ctk` path in generated CDI specifications\n* Fix error in postun scriplet on RPM-based systems\n* Only check `NVIDIA_VISIBLE_DEVICES` for environment variables if no annotations are specified.\n* Add `cdi.default-kind` config option for constructing fully-qualified CDI device names in CDI mode\n* Add support for `accept-nvidia-visible-devices-envvar-unprivileged` config setting in CDI mode\n* Add `nvidia-container-runtime-hook.skip-mode-detection` config option to bypass mode detection. This allows `legacy` and `cdi` mode, for example, to be used at the same time.\n* Add support for generating CDI specifications for GDS and MOFED devices\n* Ensure CDI specification is validated on save when generating a spec\n* Rename `--discovery-mode` argument to `--mode` for `nvidia-ctk cdi generate`\n* [libnvidia-container] Fix segfault on WSL2 systems\n* [toolkit-container] Add `--cdi-enabled` flag to toolkit config\n* [toolkit-container] Install `nvidia-ctk` from toolkit container\n* [toolkit-container] Use installed `nvidia-ctk` path in NVIDIA Container Toolkit config\n* [toolkit-container] Bump CUDA base images to 12.1.0\n* [toolkit-container] Set `nvidia-ctk` path in the\n* [toolkit-container] Add `cdi.k8s.io/*` to set of allowed annotations in containerd config\n* [toolkit-container] Generate CDI specification for use in management containers\n* [toolkit-container] Install experimental runtime as `nvidia-container-runtime.experimental` instead of `nvidia-container-runtime-experimental`\n* [toolkit-container] Install and configure mode-specific runtimes for `cdi` and `legacy` modes\n\n## v1.13.0-rc.1\n\n* Include MIG-enabled devices as GPUs when generating CDI specification\n* Fix missing NVML symbols when running `nvidia-ctk` on some platforms [#49]\n* Add CDI spec generation for WSL2-based systems to `nvidia-ctk cdi generate` command\n* Add `auto` mode to `nvidia-ctk cdi generate` command to automatically detect a WSL2-based system over a standard NVML-based system.\n* Add mode-specific (`.cdi` and `.legacy`) NVIDIA Container Runtime binaries for use in the GPU Operator\n* Discover all `gsb*.bin` GSP firmware files when generating CDI specification.\n* Align `.deb` and `.rpm` release candidate package versions\n* Remove `fedora35` packaging targets\n* [libnvidia-container] Include all `gsp*.bin` firmware files if present\n* [libnvidia-container] Align `.deb` and `.rpm` release candidate package versions\n* [libnvidia-container] Remove `fedora35` packaging targets\n* [toolkit-container] Install `nvidia-container-toolkit-operator-extensions` package for mode-specific executables.\n* [toolkit-container] Allow `nvidia-container-runtime.mode` to be set when configuring the NVIDIA Container Toolkit\n\n## v1.12.0\n\n* Promote `v1.12.0-rc.5` to `v1.12.0`\n* Rename `nvidia cdi generate` `--root` flag to `--driver-root` to better indicate intent\n* [libnvidia-container] Add nvcubins.bin to DriverStore components under WSL2\n* [toolkit-container] Bump CUDA base images to 12.0.1\n\n## v1.12.0-rc.5\n\n* Fix bug here the `nvidia-ctk` path was not properly resolved. This causes failures to run containers when the runtime is configured in `csv` mode or if the `NVIDIA_DRIVER_CAPABILITIES` includes `graphics` or `display` (e.g. `all`).\n\n## v1.12.0-rc.4\n\n* Generate a minimum CDI spec version for improved compatibility.\n* Add `--device-name-strategy` options to the `nvidia-ctk cdi generate` command that can be used to control how device names are constructed.\n* Set default for CDI device name generation to `index` to generate device names such as `nvidia.com/gpu=0` or `nvidia.com/gpu=1:0` by default.\n\n## v1.12.0-rc.3\n\n* Don't fail if by-path symlinks for DRM devices do not exist\n* Replace the --json flag with a --format [json|yaml] flag for the nvidia-ctk cdi generate command\n* Ensure that the CDI output folder is created if required\n* When generating a CDI specification use a blank host path for devices to ensure compatibility with the v0.4.0 CDI specification\n* Add injection of Wayland JSON files\n* Add GSP firmware paths to generated CDI specification\n* Add --root flag to nvidia-ctk cdi generate command\n\n## v1.12.0-rc.2\n\n* Inject Direct Rendering Manager (DRM) devices into a container using the NVIDIA Container Runtime\n* Improve logging of errors from the NVIDIA Container Runtime\n* Improve CDI specification generation to support rootless podman\n* Use `nvidia-ctk cdi generate` to generate CDI specifications instead of `nvidia-ctk info generate-cdi`\n* [libnvidia-container] Skip creation of existing files when these are already mounted\n\n## v1.12.0-rc.1\n\n* Add support for multiple Docker Swarm resources\n* Improve injection of Vulkan configurations and libraries\n* Add `nvidia-ctk info generate-cdi` command to generated CDI specification for available devices\n* [libnvidia-container] Include NVVM compiler library in compute libs\n\n## v1.11.0\n\n* Promote v1.11.0-rc.3 to v1.11.0\n\n## v1.11.0-rc.3\n\n* Build fedora35 packages\n* Introduce an `nvidia-container-toolkit-base` package for better dependency management\n* Fix removal of `nvidia-container-runtime-hook` on RPM-based systems\n* Inject platform files into container on Tegra-based systems\n* [toolkit container] Update CUDA base images to 11.7.1\n* [libnvidia-container] Preload libgcc_s.so.1 on arm64 systems\n\n## v1.11.0-rc.2\n\n* Allow `accept-nvidia-visible-devices-*` config options to be set by toolkit container\n* [libnvidia-container] Fix bug where LDCache was not updated when the `--no-pivot-root` option was specified\n\n## v1.11.0-rc.1\n\n* Add discovery of GPUDirect Storage (`nvidia-fs*`) devices if the `NVIDIA_GDS` environment variable of the container is set to `enabled`\n* Add discovery of MOFED Infiniband devices if the `NVIDIA_MOFED` environment variable of the container is set to `enabled`\n* Fix bug in CSV mode where libraries listed as `sym` entries in mount specification are not added to the LDCache.\n* Rename `nvidia-container-toolkit` executable to `nvidia-container-runtime-hook` and create `nvidia-container-toolkit` as a symlink to `nvidia-container-runtime-hook` instead.\n* Add `nvidia-ctk runtime configure` command to configure the Docker config file (e.g. `/etc/docker/daemon.json`) for use with the NVIDIA Container Runtime.\n\n## v1.10.0\n\n* Promote v1.10.0-rc.3 to v1.10.0\n\n## v1.10.0-rc.3\n\n* Use default config instead of raising an error if config file cannot be found\n* Ignore NVIDIA_REQUIRE_JETPACK* environment variables for requirement checks\n* Fix bug in detection of Tegra systems where `/sys/devices/soc0/family` is ignored\n* Fix bug where links to devices were detected as devices\n* [libnvida-container] Fix bug introduced when adding libcudadebugger.so to list of libraries\n\n## v1.10.0-rc.2\n\n* Add support for NVIDIA_REQUIRE_* checks for cuda version and arch to csv mode\n* Switch to debug logging to reduce log verbosity\n* Support logging to logs requested in command line\n* Fix bug when launching containers with relative root path (e.g. using containerd)\n* Allow low-level runtime path to be set explicitly as nvidia-container-runtime.runtimes option\n* Fix failure to locate low-level runtime if PATH envvar is unset\n* Replace experimental option for NVIDIA Container Runtime with nvidia-container-runtime.mode = csv option\n* Use csv as default mode on Tegra systems without NVML\n* Add --version flag to all CLIs\n* [libnvidia-container] Bump libtirpc to 1.3.2\n* [libnvidia-container] Fix bug when running host ldconfig using glibc compiled with a non-standard prefix\n* [libnvidia-container] Add libcudadebugger.so to list of compute libraries\n\n## v1.10.0-rc.1\n\n* Include nvidia-ctk CLI in installed binaries\n* Add experimental option to NVIDIA Container Runtime\n\n## v1.9.0\n\n* [libnvidia-container] Add additional check for Tegra in /sys/.../family file in CLI\n* [libnvidia-container] Update jetpack-specific CLI option to only load Base CSV files by default\n* [libnvidia-container] Fix bug (from 1.8.0) when mounting GSP firmware into containers without /lib to /usr/lib symlinks\n* [libnvidia-container] Update nvml.h to CUDA 11.6.1 nvML_DEV 11.6.55\n* [libnvidia-container] Update switch statement to include new brands from latest nvml.h\n* [libnvidia-container] Process all --require flags on Jetson platforms\n* [libnvidia-container] Fix long-standing issue with running ldconfig on Debian systems\n\n## v1.8.1\n\n* [libnvidia-container] Fix bug in determining cgroup root when running in nested containers\n* [libnvidia-container] Fix permission issue when determining cgroup version\n\n## v1.8.0\n\n* Promote 1.8.0-rc.2-1 to 1.8.0\n\n## v1.8.0-rc.2\n\n* Remove support for building amazonlinux1 packages\n\n## v1.8.0-rc.1\n\n* [libnvidia-container] Add support for cgroupv2\n* Release toolkit-container images from nvidia-container-toolkit repository\n\n## v1.7.0\n\n* Promote 1.7.0-rc.1-1 to 1.7.0\n * Bump Golang version to 1.16.4\n\n## v1.7.0-rc.1\n\n* Specify containerd runtime type as string in config tools to remove dependency on containerd package\n* Add supported-driver-capabilities config option to allow for a subset of all driver capabilities to be specified\n\n## v1.6.0\n\n* Promote 1.6.0-rc.3-1 to 1.6.0\n * Fix unnecessary logging to stderr instead of configured nvidia-container-runtime log file\n\n## v1.6.0-rc.3\n\n* Add supported-driver-capabilities config option to the nvidia-container-toolkit\n* Move OCI and command line checks for runtime to internal oci package\n\n## v1.6.0-rc.2\n\n* Use relative path to OCI specification file (config.json) if bundle path is not specified as an argument to the nvidia-container-runtime\n\n## v1.6.0-rc.1\n\n* Add AARCH64 package for Amazon Linux 2\n* Include nvidia-container-runtime into nvidia-container-toolkit package\n\n## v1.5.1\n\n* Fix bug where Docker Swarm device selection is ignored if NVIDIA_VISIBLE_DEVICES is also set\n* Improve unit testing by using require package and adding coverage reports\n* Remove unneeded go dependencies by running go mod tidy\n* Move contents of pkg directory to cmd for CLI tools\n* Ensure make binary target explicitly sets GOOS\n\n## v1.5.0\n\n* Add dependence on libnvidia-container-tools >= 1.4.0\n* Add golang check targets to Makefile\n* Add Jenkinsfile definition for build targets\n* Move docker.mk to docker folder\n\n## v1.4.2\n\n* Add dependence on libnvidia-container-tools >= 1.3.3\n\n## v1.4.1\n\n* Ignore NVIDIA_VISIBLE_DEVICES for containers with insufficent privileges\n* Add dependence on libnvidia-container-tools >= 1.3.2\n\n## v1.4.0\n\n* Add 'compute' capability to list of defaults\n* Add dependence on libnvidia-container-tools >= 1.3.1\n\n## v1.3.0\n\n* Promote 1.3.0-rc.2-1 to 1.3.0\n* Add dependence on libnvidia-container-tools >= 1.3.0\n\n## v1.3.0-rc.2\n\n* 2c180947 Add more tests for new semantics with device list from volume mounts\n* 7c003857 Refactor accepting device lists from volume mounts as a boolean\n\n## v1.3.0-rc.1\n\n* b50d86c1 Update build system to accept a TAG variable for things like rc.x\n* fe65573b Add common CI tests for things like golint, gofmt, unit tests, etc.\n* da6fbb34 Revert \"Add ability to merge envars of the form NVIDIA_VISIBLE_DEVICES_*\"\n* a7fb3330 Flip build-all targets to run automatically on merge requests\n* 8b248b66 Rename github.com/NVIDIA/container-toolkit to nvidia-container-toolkit\n* da36874e Add new config options to pull device list from mounted files instead of ENVVAR\n\n## v1.2.1\n\n* 4e6e0ed4 Add 'ngx' to list of*all* driver capabilities\n* 2f4af743 List config.toml as a config file in the RPM SPEC\n\n## v1.2.0\n\n*  8e0aab46 Fix repo listed in changelog for debian distributions\n*  320bb6e4 Update dependence on libnvidia-container to 1.2.0\n*  6cfc8097 Update package license to match source license\n*  e7dc3cbb Fix debian copyright file\n*  d3aee3e0 Add the 'ngx' driver capability\n\n## v1.1.2\n\n* c32237f3 Add support for parsing Linux Capabilities for older OCI specs\n\n## v1.1.1\n\n* d202aded Update dependence to libnvidia-container 1.1.1\n\n## v1.1.0\n\n* 4e4de762 Update build system to support multi-arch builds\n* fcc1d116 Add support for MIG (Multi-Instance GPUs)\n* d4ff0416 Add ability to merge envars of the form NVIDIA_VISIBLE_DEVICES_*\n* 60f165ad Add no-pivot option to toolkit\n\n## v1.0.5\n\n* Initial release. Replaces older package nvidia-container-runtime-hook. (Closes: #XXXXXX)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.1962890625,
          "content": "# Contribute to the NVIDIA Container Toolkit\n\nWant to hack on the NVIDIA Container Toolkit Project? Awesome!\nWe only require you to sign your work, the below section describes this!\n\n## Sign your work\n\nThe sign-off is a simple line at the end of the explanation for the patch. Your\nsignature certifies that you wrote the patch or otherwise have the right to pass\nit on as an open-source patch. The rules are pretty simple: if you can certify\nthe below (from [developercertificate.org](http://developercertificate.org/)):\n\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\nThen you just add a line to every git commit message:\n\n    Signed-off-by: Joe Smith <joe.smith@email.com>\n\nUse your real name (sorry, no pseudonyms or anonymous contributions.)\n\nIf you set your `user.name` and `user.email` git configs, you can sign your\ncommit automatically with `git commit -s`.\n\n"
        },
        {
          "name": "DEVELOPMENT.md",
          "type": "blob",
          "size": 2.2890625,
          "content": "# NVIDIA Container Toolkit Release Tooling\n\nThis repository allows for the components of the NVIDIA container stack to be\nbuilt and released as the NVIDIA Container Toolkit from a single repository. The components:\n* `libnvidia-container`\n* `nvidia-container-runtime`\n* `nvidia-docker`\nare included as submodules in the `third_party` folder.\n\nThe `nvidia-container-toolkit` resides in this repo directly.\n\n## Building\n\nIn oder to build the packages, the following command is executed\n```sh\n./scripts/build-packages.sh TARGET\n```\nwhere `TARGET` is a make target that is valid for each of the sub-components.\n\nThese include:\n* `ubuntu18.04-amd64`\n* `centos7-x86_64`\n\nIf no `TARGET` is specified, all valid release targets are built.\n\nThe packages are generated in the `dist` folder.\n\n## Testing local changes\n\nIn oder to use the same build logic to be used to generate packages with local changes,\nthe location of the individual components can be overridded using the: `LIBNVIDIA_CONTAINER_ROOT`,\n`NVIDIA_CONTAINER_TOOLKIT_ROOT`, `NVIDIA_CONTAINER_RUNTIME_ROOT`, and `NVIDIA_DOCKER_ROOT`\nenvironment variables.\n\n## Testing packages locally\n\nThe [test/release](./test/release/) folder contains documentation on how the installation of local or staged packages can be tested.\n\n\n## Releasing\n\nIn order to release packages required for a release, a utility script\n[`scripts/release-packages.sh`](./scripts/release-packages.sh) is provided.\nThis script can be executed as follows:\n\n```bash\nGPG_LOCAL_USER=\"GPG_USER\" \\\nMASTER_KEY_PATH=/path/to/gpg-master.key \\\nSUB_KEY_PATH=/path/to/gpg-subkey.key \\\n    ./scripts/release-packages.sh REPO PACKAGE_REPO_ROOT [REFERENCE]\n```\n\nWhere `REPO` is one of `stable` or `experimental`, `PACKAGE_REPO_ROOT` is the local path to the `libnvidia-container` repository checked out to the `gh-pages` branch, and `REFERENCE` is the git SHA that is to be released. If reference is not specified `HEAD` is assumed.\n\nThis scripts performs the following basic functions:\n* Pulls the package image defined by the `REFERENCE` git SHA from the staging registry,\n* Copies the required packages to the package repository at `PACKAGE_REPO_ROOT/REPO`,\n* Signs the packages using the specified GPG keys\n\nWhile the last two are performed, commits are added to the package repository. These can be pushed to the relevant repository.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.009765625,
          "content": "# Copyright (c) 2017-2021, NVIDIA CORPORATION.  All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nDOCKER   ?= docker\nMKDIR    ?= mkdir\nDIST_DIR ?= $(CURDIR)/dist\n\ninclude $(CURDIR)/versions.mk\n\nMODULE := github.com/NVIDIA/nvidia-container-toolkit\n\n# By default run all native docker-based targets\ndocker-native:\ninclude $(CURDIR)/docker/docker.mk\n\nifeq ($(IMAGE_NAME),)\nREGISTRY ?= nvidia\nIMAGE_NAME = $(REGISTRY)/container-toolkit\nendif\n\nBUILDIMAGE_TAG ?= golang$(GOLANG_VERSION)\nBUILDIMAGE ?= $(IMAGE_NAME)-build:$(BUILDIMAGE_TAG)\n\nEXAMPLES := $(patsubst ./examples/%/,%,$(sort $(dir $(wildcard ./examples/*/))))\nEXAMPLE_TARGETS := $(patsubst %,example-%, $(EXAMPLES))\n\nCMDS := $(patsubst ./cmd/%/,%,$(sort $(dir $(wildcard ./cmd/*/))))\nCMD_TARGETS := $(patsubst %,cmd-%, $(CMDS))\n\nCHECK_TARGETS := lint\nMAKE_TARGETS := binaries build check fmt test examples cmds coverage generate licenses vendor check-vendor $(CHECK_TARGETS)\n\nTARGETS := $(MAKE_TARGETS) $(EXAMPLE_TARGETS) $(CMD_TARGETS)\n\nDOCKER_TARGETS := $(patsubst %,docker-%, $(TARGETS))\n.PHONY: $(TARGETS) $(DOCKER_TARGETS)\n\nifeq ($(VERSION),)\nCLI_VERSION = $(LIB_VERSION)$(if $(LIB_TAG),-$(LIB_TAG))\nelse\nCLI_VERSION = $(VERSION)\nendif\nCLI_VERSION_PACKAGE = github.com/NVIDIA/nvidia-container-toolkit/internal/info\n\nbinaries: cmds\nifneq ($(PREFIX),)\ncmd-%: COMMAND_BUILD_OPTIONS = -o $(PREFIX)/$(*)\nendif\ncmds: $(CMD_TARGETS)\n\nifneq ($(shell uname),Darwin)\nEXTLDFLAGS = -Wl,--export-dynamic -Wl,--unresolved-symbols=ignore-in-object-files -Wl,-z,lazy\nelse\nEXTLDFLAGS = -Wl,-undefined,dynamic_lookup\nendif\n$(CMD_TARGETS): cmd-%:\n\tgo build -ldflags \"-s -w '-extldflags=$(EXTLDFLAGS)' -X $(CLI_VERSION_PACKAGE).gitCommit=$(GIT_COMMIT) -X $(CLI_VERSION_PACKAGE).version=$(CLI_VERSION)\" $(COMMAND_BUILD_OPTIONS) $(MODULE)/cmd/$(*)\n\nbuild:\n\tgo build ./...\n\nexamples: $(EXAMPLE_TARGETS)\n$(EXAMPLE_TARGETS): example-%:\n\tgo build ./examples/$(*)\n\nall: check test build binary\ncheck: $(CHECK_TARGETS)\n\n# Apply go fmt to the codebase\nfmt:\n\tgo list -f '{{.Dir}}' $(MODULE)/... \\\n\t\t| xargs gofmt -s -l -w\n\n# Apply goimports -local github.com/NVIDIA/container-toolkit to the codebase\ngoimports:\n\tgo list -f {{.Dir}} $(MODULE)/... \\\n\t\t| xargs goimports -local $(MODULE) -w\n\nlint:\n\tgolangci-lint run ./...\n\nvendor:\n\tgo mod tidy\n\tgo mod vendor\n\tgo mod verify\n\ncheck-vendor: vendor\n\tgit diff --quiet HEAD -- go.mod go.sum vendor\n\nlicenses:\n\tgo-licenses csv $(MODULE)/...\n\nCOVERAGE_FILE := coverage.out\ntest: build cmds\n\tgo test -coverprofile=$(COVERAGE_FILE) $(MODULE)/...\n\ncoverage: test\n\tcat $(COVERAGE_FILE) | grep -v \"_mock.go\" > $(COVERAGE_FILE).no-mocks\n\tgo tool cover -func=$(COVERAGE_FILE).no-mocks\n\ngenerate:\n\tgo generate $(MODULE)/...\n\n# Generate an image for containerized builds\n# Note: This image is local only\n.PHONY: .build-image\n.build-image:\n\tmake -f deployments/devel/Makefile .build-image\n\nifeq ($(BUILD_DEVEL_IMAGE),yes)\n$(DOCKER_TARGETS): .build-image\n.shell: .build-image\nendif\n\n$(DOCKER_TARGETS): docker-%:\n\t@echo \"Running 'make $(*)' in container image $(BUILDIMAGE)\"\n\t$(DOCKER) run \\\n\t\t--rm \\\n\t\t-e GOCACHE=/tmp/.cache/go \\\n\t\t-e GOMODCACHE=/tmp/.cache/gomod \\\n\t\t-e GOLANGCI_LINT_CACHE=/tmp/.cache/golangci-lint \\\n\t\t-v $(PWD):/work \\\n\t\t-w /work \\\n\t\t--user $$(id -u):$$(id -g) \\\n\t\t$(BUILDIMAGE) \\\n\t\t\tmake $(*)\n\n# Start an interactive shell using the development image.\nPHONY: .shell\n.shell:\n\t$(DOCKER) run \\\n\t\t--rm \\\n\t\t-ti \\\n\t\t-e GOCACHE=/tmp/.cache/go \\\n\t\t-e GOMODCACHE=/tmp/.cache/gomod \\\n\t\t-e GOLANGCI_LINT_CACHE=/tmp/.cache/golangci-lint \\\n\t\t-v $(PWD):/work \\\n\t\t-w /work \\\n\t\t--user $$(id -u):$$(id -g) \\\n\t\t$(BUILDIMAGE)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.2626953125,
          "content": "# NVIDIA Container Toolkit\n\n[![GitHub license](https://img.shields.io/github/license/NVIDIA/nvidia-container-toolkit?style=flat-square)](https://raw.githubusercontent.com/NVIDIA/nvidia-container-toolkit/main/LICENSE)\n[![Documentation](https://img.shields.io/badge/documentation-wiki-blue.svg?style=flat-square)](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/overview.html)\n[![Package repository](https://img.shields.io/badge/packages-repository-b956e8.svg?style=flat-square)](https://nvidia.github.io/libnvidia-container)\n\n![nvidia-container-stack](https://cloud.githubusercontent.com/assets/3028125/12213714/5b208976-b632-11e5-8406-38d379ec46aa.png)\n\n## Introduction\n\nThe NVIDIA Container Toolkit allows users to build and run GPU accelerated containers. The toolkit includes a container runtime [library](https://github.com/NVIDIA/libnvidia-container) and utilities to automatically configure containers to leverage NVIDIA GPUs.\n\nProduct documentation including an architecture overview, platform support, and installation and usage guides can be found in the [documentation repository](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/overview.html).\n\n## Getting Started\n\n**Make sure you have installed the [NVIDIA driver](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#nvidia-drivers) for your Linux Distribution**\n**Note that you do not need to install the CUDA Toolkit on the host system, but the NVIDIA driver needs to be installed**\n\nFor instructions on getting started with the NVIDIA Container Toolkit, refer to the [installation guide](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#installation-guide).\n\n## Usage\n\nThe [user guide](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/user-guide.html) provides information on the configuration and command line options available when running GPU containers with Docker.\n\n## Issues and Contributing\n\n[Checkout the Contributing document!](CONTRIBUTING.md)\n\n* Please let us know by [filing a new issue](https://github.com/NVIDIA/nvidia-container-toolkit/issues/new)\n* You can contribute by creating a [merge request](https://gitlab.com/nvidia/container-toolkit/container-toolkit/-/merge_requests/new) to our public GitLab repository\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 1.728515625,
          "content": "# Release Process\n\nThe NVIDIA Container Toolkit consists of the following artifacts:\n- The NVIDIA Container Toolkit container\n- Packages for debian-based systems\n- Packages for rpm-based systems\n\n# Release Process Checklist:\n- [ ] Create a release PR:\n    - [ ] Run the `./hack/prepare-release.sh` script to update the version in all the needed files. This also creates a [release issue](https://github.com/NVIDIA/cloud-native-team/issues?q=is%3Aissue+is%3Aopen+label%3Arelease)\n    - [ ] Run the `./hack/generate-changelog.sh` script to generate the a draft changelog and update `CHANGELOG.md` with the changes.\n    - [ ] Create a PR from the created `bump-release-{{ .VERSION }}` branch.\n- [ ] Merge the release PR\n- [ ] Tag the release and push the tag to the `internal` mirror:\n    - [ ] Image release pipeline: https://gitlab-master.nvidia.com/dl/container-dev/container-toolkit/-/pipelines/16466098\n- [ ] Wait for the image release to complete.\n- [ ] Push the tag to the the upstream GitHub repo.\n- [ ] Wait for the [`Release`](https://github.com/NVIDIA/k8s-device-plugin/actions/workflows/release.yaml) GitHub Action to complete\n- [ ] Publish the [draft release](https://github.com/NVIDIA/k8s-device-plugin/releases) created by the GitHub Action\n- [ ] Publish the packages to the gh-pages branch of the libnvidia-container repo\n- [ ] Create a KitPick\n\n## Troubleshooting\n\n*Note*: This assumes that we have the release tag checked out locally.\n\n- If the `Release` GitHub Action fails:\n    - Check the logs for the error first.\n    - Create the helm packages locally by running:\n      ```bash\n      ./hack/prepare-artifacts.sh {{ .VERSION }}\n      ```\n    - Create the draft release by running:\n      ```bash\n      ./hack/create-release.sh {{ .VERSION }}\n      ```\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "deployments",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.435546875,
          "content": "module github.com/NVIDIA/nvidia-container-toolkit\n\ngo 1.20\n\nrequire (\n\tgithub.com/NVIDIA/go-nvlib v0.6.1\n\tgithub.com/NVIDIA/go-nvml v0.12.4-0\n\tgithub.com/fsnotify/fsnotify v1.7.0\n\tgithub.com/moby/sys/symlink v0.3.0\n\tgithub.com/opencontainers/runtime-spec v1.2.0\n\tgithub.com/pelletier/go-toml v1.9.5\n\tgithub.com/sirupsen/logrus v1.9.3\n\tgithub.com/stretchr/testify v1.9.0\n\tgithub.com/urfave/cli/v2 v2.27.4\n\tgolang.org/x/mod v0.20.0\n\tgolang.org/x/sys v0.29.0\n\ttags.cncf.io/container-device-interface v0.8.0\n\ttags.cncf.io/container-device-interface/specs-go v0.8.0\n)\n\nrequire (\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.4 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n\tgithub.com/kr/pretty v0.3.1 // indirect\n\tgithub.com/opencontainers/runtime-tools v0.9.1-0.20221107090550-2e043c6bd626 // indirect\n\tgithub.com/opencontainers/selinux v1.11.0 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635 // indirect\n\tgithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb // indirect\n\tgithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 // indirect\n\tgopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\tsigs.k8s.io/yaml v1.3.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 8.5537109375,
          "content": "github.com/NVIDIA/go-nvlib v0.6.1 h1:0/5FvaKvDJoJeJ+LFlh+NDQMxMlVw9wOXrOVrGXttfE=\ngithub.com/NVIDIA/go-nvlib v0.6.1/go.mod h1:9UrsLGx/q1OrENygXjOuM5Ey5KCtiZhbvBlbUIxtGWY=\ngithub.com/NVIDIA/go-nvml v0.12.4-0 h1:4tkbB3pT1O77JGr0gQ6uD8FrsUPqP1A/EOEm2wI1TUg=\ngithub.com/NVIDIA/go-nvml v0.12.4-0/go.mod h1:8Llmj+1Rr+9VGGwZuRer5N/aCjxGuR5nPb/9ebBiIEQ=\ngithub.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM=\ngithub.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4 h1:wfIWP927BUkWJb2NmU/kNDYIBTh/ziUX91+lVfRxZq4=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=\ngithub.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\ngithub.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/mndrix/tap-go v0.0.0-20171203230836-629fa407e90b/go.mod h1:pzzDgJWZ34fGzaAZGFW22KVZDfyrYW+QABMrWnJBnSs=\ngithub.com/moby/sys/symlink v0.3.0 h1:GZX89mEZ9u53f97npBy4Rc3vJKj7JBDj/PN2I22GrNU=\ngithub.com/moby/sys/symlink v0.3.0/go.mod h1:3eNdhduHmYPcgsJtZXW1W4XUJdZGBIkttZ8xKqPUJq0=\ngithub.com/mrunalp/fileutils v0.5.0/go.mod h1:M1WthSahJixYnrXQl/DFQuteStB1weuxD2QJNHXfbSQ=\ngithub.com/opencontainers/runtime-spec v1.0.3-0.20220825212826-86290f6a00fb/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=\ngithub.com/opencontainers/runtime-spec v1.2.0 h1:z97+pHb3uELt/yiAWD691HNHQIF07bE7dzrbT927iTk=\ngithub.com/opencontainers/runtime-spec v1.2.0/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=\ngithub.com/opencontainers/runtime-tools v0.9.1-0.20221107090550-2e043c6bd626 h1:DmNGcqH3WDbV5k8OJ+esPWbqUOX5rMLR2PMvziDMJi0=\ngithub.com/opencontainers/runtime-tools v0.9.1-0.20221107090550-2e043c6bd626/go.mod h1:BRHJJd0E+cx42OybVYSgUvZmU0B8P9gZuRXlZUP7TKI=\ngithub.com/opencontainers/selinux v1.9.1/go.mod h1:2i0OySw99QjzBBQByd1Gr9gSjvuho1lHsJxIJ3gGbJI=\ngithub.com/opencontainers/selinux v1.11.0 h1:+5Zbo97w3Lbmb3PeqQtpmTkMwsW5nRI3YaLpt7tQ7oU=\ngithub.com/opencontainers/selinux v1.11.0/go.mod h1:E5dMC3VPuVvVHDYmi78qvhJp8+M586T4DlDRYpFkyec=\ngithub.com/pelletier/go-toml v1.9.5 h1:4yBQzkHv+7BHq2PQUZF3Mx0IYxG7LsP222s7Agd3ve8=\ngithub.com/pelletier/go-toml v1.9.5/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635 h1:kdXcSzyDtseVEc4yCz2qF8ZrQvIDBJLl4S1c3GCXmoI=\ngithub.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635/go.mod h1:hkRG7XYTFWNJGYcbNJQlaLq0fg1yr4J4t/NcTQtrfww=\ngithub.com/urfave/cli v1.19.1/go.mod h1:70zkFmudgCuE/ngEzBv17Jvp/497gISqfk5gWijbERA=\ngithub.com/urfave/cli/v2 v2.27.4 h1:o1owoI+02Eb+K107p27wEX9Bb8eqIoZCfLXloLUSWJ8=\ngithub.com/urfave/cli/v2 v2.27.4/go.mod h1:m4QzxcD2qpra4z7WhzEGn74WZLViBnMpb1ToCAKdGRQ=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb h1:zGWFAtiMcyryUHoUjUJX0/lt1H2+i2Ka2n+D3DImSNo=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 h1:EzJWgHovont7NscjpAxXsDA8S8BMYve8Y5+7cuRE7R0=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=\ngithub.com/xeipuuv/gojsonschema v1.2.0 h1:LhYJRs+L4fBtjZUfuSZIKGeVu0QRy8e5Xi7D17UxZ74=\ngithub.com/xeipuuv/gojsonschema v1.2.0/go.mod h1:anYRn/JVcOK2ZgGU+IjEV4nwlhoK5sQluxsYJ78Id3Y=\ngithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 h1:gEOO8jv9F4OT7lGCjxCBTO/36wtF6j2nSip77qHd4x4=\ngithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1/go.mod h1:Ohn+xnUBiLI6FVj/9LpzZWtj1/D6lUovWYBkxHVV3aM=\ngolang.org/x/mod v0.20.0 h1:utOm6MM3R3dnawAiJgn0y+xvuYRsm1RKM/4giyfDgV0=\ngolang.org/x/mod v0.20.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191115151921-52ab43148777/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nsigs.k8s.io/yaml v1.3.0 h1:a2VclLzOGrwOHDiV8EfBGhvjHvP46CtW5j6POvhYGGo=\nsigs.k8s.io/yaml v1.3.0/go.mod h1:GeOyir5tyXNByN85N/dRIT9es5UQNerPYEKK56eTBm8=\ntags.cncf.io/container-device-interface v0.8.0 h1:8bCFo/g9WODjWx3m6EYl3GfUG31eKJbaggyBDxEldRc=\ntags.cncf.io/container-device-interface v0.8.0/go.mod h1:Apb7N4VdILW0EVdEMRYXIDVRZfNJZ+kmEUss2kRRQ6Y=\ntags.cncf.io/container-device-interface/specs-go v0.8.0 h1:QYGFzGxvYK/ZLMrjhvY0RjpUavIn4KcmRmVP/JjdBTA=\ntags.cncf.io/container-device-interface/specs-go v0.8.0/go.mod h1:BhJIkjjPh4qpys+qm4DAYtUyryaTDg9zris+AczXyws=\n"
        },
        {
          "name": "hack",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "versions.mk",
          "type": "blob",
          "size": 1.3818359375,
          "content": "# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nLIB_NAME := nvidia-container-toolkit\nLIB_VERSION := 1.17.3\nLIB_TAG :=\n\n# The package version is the combination of the library version and tag.\n# If the tag is specified the two components are joined with a tilde (~).\nPACKAGE_VERSION := $(LIB_VERSION)$(if $(LIB_TAG),~$(LIB_TAG))\nPACKAGE_REVISION := 1\n\nGOLANG_VERSION := $(shell ./hack/golang-version.sh)\n\nBUILDIMAGE_TAG ?= devel-go$(GOLANG_VERSION)\nBUILDIMAGE ?=  $(LIB_NAME):$(BUILDIMAGE_TAG)\n\nGIT_COMMIT ?= $(shell git describe --match=\"\" --dirty --long --always --abbrev=40 2> /dev/null || echo \"\")\nGIT_COMMIT_SHORT ?= $(shell git rev-parse --short HEAD 2> /dev/null || echo \"\")\nGIT_BRANCH ?= $(shell git rev-parse --abbrev-ref HEAD 2> /dev/null || echo \"${GIT_COMMIT}\")\nSOURCE_DATE_EPOCH ?= $(shell git log -1 --format=%ct  2> /dev/null || echo \"\")\n"
        }
      ]
    }
  ]
}