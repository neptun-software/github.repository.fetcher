{
  "metadata": {
    "timestamp": 1736567062000,
    "page": 647,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mum4k/termdash",
      "stars": 2753,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0693359375,
          "content": "# Exclude MacOS attribute files.\n.DS_Store\n\n# Exclude IDE files.\n.idea/"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 18.0361328125,
          "content": "# Changelog\n\nAll notable changes to this project are documented here.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.20.0] - 10-Mar-2024\n\n### Added\n\n- Support for an alternative way of splitting containers where the size or\n  percentage is specified for the right (or bottom) container and the left (or\n  top) is calculated.\n\n### Changed\n\n- Bump github.com/gdamore/tcell/v2 from 2.7.0 to 2.7.4.\n\n## [0.19.0] - 29-Jan-2024\n\n### Added\n\n- Support for \"Backtab\" (a.k.a. Shift+Tab) as a supported keystroke for tcell\n  widgets.\n\n### Changed\n\n- Migrated CI from Travis to Github Actions.\n- Bump github.com/gdamore/tcell/v2 from 2.5.4 to 2.7.0.\n- Change the Go version in `go.mod` to 1.21.\n- Executed `go mod tidy`.\n- CI now executes tests with Golang v1.20 and v1.21.\n\n## [0.18.0] - 08-Feb-2023\n\n### Added\n\n- The `gauge` widget now supports drawing of a vertical threshold bar.\n- The `TextInput` widget now supports an OnChange handler that allows user code\n  to be notified when the content of the text input changes.\n\n### Changed\n\n- Bump github.com/gdamore/tcell/v2 from 2.5.1 to 2.5.4.\n- Bump github.com/mattn/go-runewidth from 0.0.13 to 0.0.14.\n- Bump github.com/gdamore/tcell/v2 from 2.5.1 to 2.5.3.\n- Bump github.com/gdamore/tcell/v2 from 2.5.1 to 2.5.2\n- Change the Go version in `go.mod` to 1.20.\n- Executed `go mod tidy`.\n- CI now executes tests with Golang v1.20 only.\n\n### Removed\n\n- Removed the `Sourcegraph` badge from the main page.\n\n### Fixed\n\n- Formatted all Go files with `gofmt` from Golang v1.20.\n- Fixed line coverage reporting.\n\n## [0.17.0] - 07-Jul-2022\n\n### Added\n\n- Added support for `tcell`'s `Dim` text style.\n\n### Changed\n\n- Bump github.com/gdamore/tcell from 2.4.0 to 2.5.1.\n- Bump github.com/nsf/termbox-go to v1.1.1.\n- Change the Go version in `go.mod` to 1.17.\n- Executed `go mod tidy`.\n\n### Fixed\n\n- Fixed invalid path to the `autogen_licences.sh` script in `.travis.ci`.\n\n## [0.16.1] - 13-Jan-2022\n\n### Changed\n\n- Change the Go versions the CI builds with up to 1.17.\n- Bump github.com/gdamore/tcell from 2.2.0 to 2.4.0.\n- Bump github.com/mattn/go-runewidth from 0.0.12 to 0.0.13.\n\n## [0.16.0] - 03-Apr-2021\n\n### Added\n\n- The `Text` widget has a new option `MaxTextCells` which can be used to limit\n  the maximum number of cells the widget keeps in memory.\n\n### Changed\n\n- Bump github.com/mattn/go-runewidth from 0.0.10 to 0.0.12.\n\n## [0.15.0] - 06-Mar-2021\n\n### Changed\n\n- Bump github.com/gdamore/tcell/v2 from 2.0.0 to 2.2.0.\n- Bump github.com/mattn/go-runewidth from 0.0.9 to 0.0.10.\n- Allowing CI to modify go.mod and go.sum when necessary.\n- Executed `go mod tidy`.\n\n### Added\n\n- TitleColor and TitleFocusedColor options for border title which enables the\n  setting of separate colors for border and title on a container.\n\n## [0.14.0] - 30-Dec-2020\n\n### Breaking API changes\n\n- The `widgetapi.Widget.Keyboard` and `widgetapi.Widget.Mouse` methods now\n  accepts a second argument which provides widgets with additional metadata.\n  All widgets implemented outside of the `termdash` repository will need to be\n  updated similarly to the `Barchart` example below. Change the original method\n  signatures:\n  ```go\n  func (*BarChart) Keyboard(k *terminalapi.Keyboard) error { ... }\n\n  func (*BarChart) Mouse(m *terminalapi.Mouse) error { ... }\n\n  ```\n\n  By adding the new `*widgetapi.EventMeta` argument as follows:\n  ```go\n  func (*BarChart) Keyboard(k *terminalapi.Keyboard, meta *widgetapi.EventMeta) error { ... }\n\n  func (*BarChart) Mouse(m *terminalapi.Mouse, meta *widgetapi.EventMeta) error { ... }\n  ```\n\n### Fixed\n\n- `termdash` no longer crashes when `tcell` is used and the terminal window\n  downsizes while content is being drawn.\n\n### Added\n\n#### Text input form functionality with keyboard navigation\n\n- added a new `formdemo` that demonstrates a text input form with keyboard\n  navigation.\n\n#### Infrastructure changes\n\n- `container` now allows users to configure keyboard keys that move focus to\n  the next or the previous container.\n- containers can request to be skipped when focus is moved using keyboard keys.\n- containers can register into separate focus groups and specific keyboard keys\n  can be configured to move the focus within each focus group.\n- widgets can now request keyboard events exclusively when focused.\n- users can now set a `container` as focused using the new `container.Focused`\n  option.\n\n#### Updates to the `button` widget\n\n- the `button` widget allows users to specify multiple trigger keys.\n- the `button` widget now supports different keys for the global and focused\n  scope.\n- the `button` widget can now be drawn without the shadow or the press\n  animation.\n- the `button` widget can now be drawn without horizontal padding around its\n  text.\n- the `button` widget now allows specifying cell options for each cell of the\n  displayed text. Separate cell options can be specified for each of button's\n  main states (up, focused and up, down).\n- the `button` widget allows specifying separate fill color values for each of\n  its main states (up, focused and up, down).\n- the `button` widget now has a method `SetCallback` that allows updating the\n  callback function on an existing `button` instance.\n\n#### Updates to the `textinput` widget\n\n- the `textinput` widget can now be configured to request keyboard events\n  exclusively when focused.\n- the `textinput` widget can now be initialized with a default text in the\n  input box.\n\n## [0.13.0] - 17-Nov-2020\n\n### Added\n\n- the `Text` widget now allows user to specify custom scroll marker runes.\n\n### Changed\n\n- terminal cells now support font modifier options (bold, italic,\n  underline, strike through).\n- `tcell` dependency was upgraded to v2.0.0.\n- upgraded versions of all other dependencies.\n- aligned the definition of the first 16 colors with the definition used by\n  Xterm and `tcell`. Defined two non-standard colors `ColorMagenta` and\n  `ColorCyan` to make this change backward compatible for users that use\n  `termbox-go`.\n- made `tcell` terminal implementation the default in examples, demos and\n  documentation.\n\n### Fixed\n\n- coveralls again triggers and reports on PRs.\n- addressed some lint issues.\n- improved test coverage in some modules.\n- changed the Blue color in demos to a more visible shade.\n- fixed a bug where segment display text in `termdashdemo` appeared to be\n  jumping.\n\n## [0.12.2] - 31-Aug-2020\n\n### Fixed\n\n- advanced the CI Go versions up to Go 1.15.\n- fixed the build status badge to correctly point to travis-ci.com instead of\n  travis-ci.org.\n\n## [0.12.1] - 20-Jun-2020\n\n### Fixed\n\n- the `tcell` unit test can now pass in headless mode (when TERM=\"\") which\n  happens under bazel.\n- switching coveralls integration to Github application.\n\n## [0.12.0] - 10-Apr-2020\n\n### Added\n\n- Migrating to [Go modules](https://blog.golang.org/using-go-modules).\n- Renamed directory `internal` to `private` so that external widget development\n  is possible. Noted in\n  [README.md](https://github.com/mum4k/termdash/blob/master/README.md) that packages in the\n  `private` directory don't have any API stability guarantee.\n\n## [0.11.0] - 7-Mar-2020\n\n#### Breaking API changes\n\n- Termdash now requires at least Go version 1.11.\n\n### Added\n\n- New [`tcell`](https://github.com/gdamore/tcell) based terminal implementation\n  which implements the `terminalapi.Terminal` interface.\n- tcell implementation supports two initialization `Option`s:\n  - `ColorMode` the terminal color output mode (defaults to 256 color mode)\n  - `ClearStyle` the foreground and background color style to use when clearing\n     the screen (defaults to the global ColorDefault for both foreground and\n     background)\n\n### Fixed\n\n- Improved test coverage of the `Gauge` widget.\n\n## [0.10.0] - 5-Jun-2019\n\n### Added\n\n- Added `time.Duration` based `ValueFormatter` for the `LineChart` Y-axis labels.\n- Added round and suffix `ValueFormatter` for the `LineChart` Y-axis labels.\n- Added decimal and suffix `ValueFormatter` for the `LineChart` Y-axis labels.\n- Added a `container.SplitOption` that allows fixed size container splits.\n- Added `grid` functions that allow fixed size rows and columns.\n\n### Changed\n\n- The `LineChart` can format the labels on the Y-axis with a `ValueFormatter`.\n- The `SegmentDisplay` can now display dots and colons ('.' and ':').\n- The `Donut` widget now guarantees spacing between the donut and its label.\n- The continuous build on Travis CI now builds with cgo explicitly disabled to\n  ensure both Termdash and its dependencies use pure Go.\n\n### Fixed\n\n- Lint issues found on the Go report card.\n- An internal library belonging to the `Text` widget was incorrectly passing\n  `math.MaxUint32` as an int argument.\n\n## [0.9.1] - 15-May-2019\n\n### Fixed\n\n- Termdash could deadlock when a `Button` or a `TextInput` was configured to\n  call the `Container.Update` method.\n\n## [0.9.0] - 28-Apr-2019\n\n### Added\n\n- The `TextInput` widget, an input field allowing interactive text input.\n- The `Donut` widget can now display an optional text label under the donut.\n\n### Changed\n\n- Widgets now get information whether their container is focused when Draw is\n  executed.\n- The SegmentDisplay widget now has a method that returns the observed character\n  capacity the last time Draw was called.\n- The grid.Builder API now allows users to specify options for intermediate\n  containers, i.e. containers that don't have widgets, but represent rows and\n  columns.\n- Line chart widget now allows `math.NaN` values to represent \"no value\" (values\n  that will not be rendered) in the values slice.\n\n#### Breaking API changes\n\n- The widgetapi.Widget.Draw method now accepts a second argument which provides\n  widgets with additional metadata. This affects all implemented widgets.\n- Termdash now requires at least Go version 1.10, which allows us to utilize\n  `math.Round` instead of our own implementation and `strings.Builder` instead\n  of `bytes.Buffer`.\n- Terminal shortcuts like `Ctrl-A` no longer come as two separate events,\n  Termdash now mirrors termbox-go and sends these as one event.\n\n## [0.8.0] - 30-Mar-2019\n\n### Added\n\n- New API for building layouts, a grid.Builder. Allows defining the layout\n  iteratively as repetitive Elements, Rows and Columns.\n- Containers now support margin around them and padding of their content.\n- Container now supports dynamic layout changes via the new Update method.\n\n### Changed\n\n- The Text widget now supports content wrapping on word boundaries.\n- The BarChart and SparkLine widgets now have a method that returns the\n  observed value capacity the last time Draw was called.\n- Moving widgetapi out of the internal directory to allow external users to\n  develop their own widgets.\n- Event delivery to widgets now has a stable defined order and happens when the\n  container is unlocked so that widgets can trigger dynamic layout changes.\n\n### Fixed\n\n- The termdash_test now correctly waits until all subscribers processed events,\n  not just received them.\n- Container focus tracker now correctly tracks focus changes in enlarged areas,\n  i.e. when the terminal size increased.\n- The BarChart, LineChart and SegmentDisplay widgets now protect against\n  external mutation of the values passed into them by copying the data they\n  receive.\n\n## [0.7.2] - 25-Feb-2019\n\n### Added\n\n- Test coverage for data only packages.\n\n### Changed\n\n- Refactoring packages that contained a mix of public and internal identifiers.\n\n#### Breaking API changes\n\nThe following packages were refactored, no impact is expected as the removed\nidentifiers shouldn't be used externally.\n\n- Functions align.Text and align.Rectangle were moved to a new\n  internal/alignfor package.\n- Types cell.Cell and cell.Buffer were moved into a new internal/canvas/buffer\n  package.\n\n## [0.7.1] - 24-Feb-2019\n\n### Fixed\n\n- Some of the packages that were moved into internal are required externally.\n  This release makes them available again.\n\n### Changed\n\n#### Breaking API changes\n\n- The draw.LineStyle enum was refactored into its own package\n  linestyle.LineStyle. Users will have to replace:\n\n  - draw.LineStyleNone -> linestyle.None\n  - draw.LineStyleLight -> linestyle.Light\n  - draw.LineStyleDouble -> linestyle.Double\n  - draw.LineStyleRound -> linestyle.Round\n\n## [0.7.0] - 24-Feb-2019\n\n### Added\n\n#### New widgets\n\n- The Button widget.\n\n#### Improvements to documentation\n\n- Clearly marked the public API surface by moving private packages into\n  internal directory.\n- Started a GitHub wiki for Termdash.\n\n#### Improvements to the LineChart widget\n\n- The LineChart widget can display X axis labels in vertical orientation.\n- The LineChart widget allows the user to specify a custom scale for the Y\n  axis.\n- The LineChart widget now has an option that disables scaling of the X axis.\n  Useful for applications that want to continuously feed data and make them\n  \"roll\" through the linechart.\n- The LineChart widget now has a method that returns the observed capacity of\n  the LineChart the last time Draw was called.\n- The LineChart widget now supports zoom of the content triggered by mouse\n  events.\n\n#### Improvements to the Text widget\n\n- The Text widget now has a Write option that atomically replaces the entire\n  text content.\n\n#### Improvements to the infrastructure\n\n- A function that draws text vertically.\n- A non-blocking event distribution system that can throttle repetitive events.\n- Generalized mouse button FSM for use in widgets that need to track mouse\n  button clicks.\n\n### Changed\n\n- Termbox is now initialized in 256 color mode by default.\n- The infrastructure now uses the non-blocking event distribution system to\n  distribute events to subscribers. Each widget is now an individual\n  subscriber.\n- The infrastructure now throttles event driven screen redraw rather than\n  redrawing for each input event.\n- Widgets can now specify the scope at which they want to receive keyboard and\n  mouse events.\n\n#### Breaking API changes\n\n##### High impact\n\n- The constructors of all the widgets now also return an error so that they\n  can validate the options. This is a breaking change for the following\n  widgets: BarChart, Gauge, LineChart, SparkLine, Text. The callers will have\n  to handle the returned error.\n\n##### Low impact\n\n- The container package no longer exports separate methods to receive Keyboard\n  and Mouse events which were replaced by a Subscribe method for the event\n  distribution system. This shouldn't affect users as the removed methods\n  aren't needed by container users.\n- The widgetapi.Options struct now uses an enum instead of a boolean when\n  widget specifies if it wants keyboard or mouse events. This only impacts\n  development of new widgets.\n\n### Fixed\n\n- The LineChart widget now correctly determines the Y axis scale when multiple\n  series are provided.\n- Lint issues in the codebase, and updated Travis configuration so that golint\n  is executed on every run.\n- Termdash now correctly starts in locales like zh_CN.UTF-8 where some of the\n  characters it uses internally can have ambiguous width.\n\n## [0.6.1] - 12-Feb-2019\n\n### Fixed\n\n- The LineChart widget now correctly places custom labels.\n\n## [0.6.0] - 07-Feb-2019\n\n### Added\n\n- The SegmentDisplay widget.\n- A CHANGELOG.\n- New line styles for borders.\n\n### Changed\n\n- Better recordings of the individual demos.\n\n### Fixed\n\n- The LineChart now has an option to change the behavior of the Y axis from\n  zero anchored to adaptive.\n- Lint errors reported on the Go report card.\n- Widgets now correctly handle a race when new user data are supplied between\n  calls to their Options() and Draw() methods.\n\n## [0.5.0] - 21-Jan-2019\n\n### Added\n\n- Draw primitives for drawing circles.\n- The Donut widget.\n\n### Fixed\n\n- Bugfixes in the braille canvas.\n- Lint errors reported on the Go report card.\n- Flaky behavior in termdash_test.\n\n## [0.4.0] - 15-Jan-2019\n\n### Added\n\n- 256 color support.\n- Variable size container splits.\n- A more complete demo of the functionality.\n\n### Changed\n\n- Updated documentation and README.\n\n## [0.3.0] - 13-Jan-2019\n\n### Added\n\n- Primitives for drawing lines.\n- Implementation of a Braille canvas.\n- The LineChart widget.\n\n## [0.2.0] - 02-Jul-2018\n\n### Added\n\n- The SparkLine widget.\n- The BarChart widget.\n- Manually triggered redraw.\n- Travis now checks for presence of licence headers.\n\n### Fixed\n\n- Fixing races in termdash_test.\n\n## 0.1.0 - 13-Jun-2018\n\n### Added\n\n- Documentation of the project and its goals.\n- Drawing infrastructure.\n- Testing infrastructure.\n- The Gauge widget.\n- The Text widget.\n\n[unreleased]: https://github.com/mum4k/termdash/compare/v0.20.0...devel\n[0.20.0]: https://github.com/mum4k/termdash/compare/v0.19.0...v0.20.0\n[0.19.0]: https://github.com/mum4k/termdash/compare/v0.18.0...v0.19.0\n[0.18.0]: https://github.com/mum4k/termdash/compare/v0.17.0...v0.18.0\n[0.17.0]: https://github.com/mum4k/termdash/compare/v0.16.1...v0.17.0\n[0.16.1]: https://github.com/mum4k/termdash/compare/v0.16.0...v0.16.1\n[0.16.0]: https://github.com/mum4k/termdash/compare/v0.15.0...v0.16.0\n[0.15.0]: https://github.com/mum4k/termdash/compare/v0.14.0...v0.15.0\n[0.14.0]: https://github.com/mum4k/termdash/compare/v0.13.0...v0.14.0\n[0.13.0]: https://github.com/mum4k/termdash/compare/v0.12.2...v0.13.0\n[0.12.2]: https://github.com/mum4k/termdash/compare/v0.12.1...v0.12.2\n[0.12.1]: https://github.com/mum4k/termdash/compare/v0.12.0...v0.12.1\n[0.12.0]: https://github.com/mum4k/termdash/compare/v0.11.0...v0.12.0\n[0.11.0]: https://github.com/mum4k/termdash/compare/v0.10.0...v0.11.0\n[0.10.0]: https://github.com/mum4k/termdash/compare/v0.9.1...v0.10.0\n[0.9.1]: https://github.com/mum4k/termdash/compare/v0.9.0...v0.9.1\n[0.9.0]: https://github.com/mum4k/termdash/compare/v0.8.0...v0.9.0\n[0.8.0]: https://github.com/mum4k/termdash/compare/v0.7.2...v0.8.0\n[0.7.2]: https://github.com/mum4k/termdash/compare/v0.7.1...v0.7.2\n[0.7.1]: https://github.com/mum4k/termdash/compare/v0.7.0...v0.7.1\n[0.7.0]: https://github.com/mum4k/termdash/compare/v0.6.1...v0.7.0\n[0.6.1]: https://github.com/mum4k/termdash/compare/v0.6.0...v0.6.1\n[0.6.0]: https://github.com/mum4k/termdash/compare/v0.5.0...v0.6.0\n[0.5.0]: https://github.com/mum4k/termdash/compare/v0.4.0...v0.5.0\n[0.4.0]: https://github.com/mum4k/termdash/compare/v0.3.0...v0.4.0\n[0.3.0]: https://github.com/mum4k/termdash/compare/v0.2.0...v0.3.0\n[0.2.0]: https://github.com/mum4k/termdash/compare/v0.1.0...v0.2.0\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4755859375,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Fork and merge into the \"devel\" branch\n\nAll development in termdash repository must happen in the [devel\nbranch](https://github.com/mum4k/termdash/tree/devel). The devel branch is\nmerged into the master branch during release of each new version.\n\nWhen you fork the termdash repository, be sure to checkout the devel branch.\nWhen you are creating a pull request, be sure to pull back into the devel\nbranch.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows [Google's Open Source Community\nGuidelines](https://opensource.google.com/conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.3798828125,
          "content": "[![Doc Status](https://godoc.org/github.com/mum4k/termdash?status.png)](https://godoc.org/github.com/mum4k/termdash)\n[![Build Status](https://app.travis-ci.com/mum4k/termdash.svg?branch=master)](https://app.travis-ci.com/github/mum4k/termdash)\n[![Coverage Status](https://coveralls.io/repos/github/mum4k/termdash/badge.svg?branch=master)](https://coveralls.io/github/mum4k/termdash?branch=master)\n[![Go Report Card](https://goreportcard.com/badge/github.com/mum4k/termdash)](https://goreportcard.com/report/github.com/mum4k/termdash)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/mum4k/termdash/blob/master/LICENSE)\n[![Mentioned in Awesome Go](https://awesome.re/mentioned-badge.svg)](https://github.com/avelino/awesome-go)\n\n# [<img src=\"./doc/images/termdash.png\" alt=\"termdashlogo\" type=\"image/png\" width=\"30%\">](http://github.com/mum4k/termdash/wiki)\n\nTermdash is a cross-platform customizable terminal based dashboard.\n\n[<img src=\"./doc/images/termdashdemo_0_9_0.gif\" alt=\"termdashdemo\" type=\"image/gif\">](termdashdemo/termdashdemo.go)\n\nThe feature set is inspired by the\n[gizak/termui](http://github.com/gizak/termui) project, which in turn was\ninspired by\n[yaronn/blessed-contrib](http://github.com/yaronn/blessed-contrib).\n\nThis rewrite focuses on code readability, maintainability and testability, see\nthe [design goals](doc/design_goals.md). It aims to achieve the following\n[requirements](doc/requirements.md). See the [high-level design](doc/hld.md)\nfor more details.\n\n# Public API and status\n\nThe public API surface is documented in the\n[wiki](http://github.com/mum4k/termdash/wiki).\n\nPrivate packages can be identified by the presence of the **/private/**\ndirectory in their import path. Stability of the private packages isn't\nguaranteed and changes won't be backward compatible.\n\nThere might still be breaking changes to the public API, at least until the\nproject reaches version 1.0.0. Any breaking changes will be published in the\n[changelog](CHANGELOG.md).\n\n# Current feature set\n\n- Full support for terminal window resizing throughout the infrastructure.\n- Customizable layout, widget placement, borders, margins, padding, colors, etc.\n- Dynamic layout changes at runtime.\n- Binary tree and Grid forms of setting up the layout.\n- Focusable containers and widgets.\n- Processing of keyboard and mouse events.\n- Periodic and event driven screen redraw.\n- A library of widgets, see below.\n- UTF-8 for all text elements.\n- Drawing primitives (Go functions) for widget development with character and\n  sub-character resolution.\n\n# Installation\n\nTo install this library, run the following:\n\n```go\ngo get -u github.com/mum4k/termdash\ncd github.com/mum4k/termdash\n```\n\n# Usage\n\nThe usage of most of these elements is demonstrated in\n[termdashdemo.go](termdashdemo/termdashdemo.go). To execute the demo:\n\n```go\ngo run termdashdemo/termdashdemo.go\n```\n\n# Documentation\n\nPlease refer to the [Termdash wiki](http://github.com/mum4k/termdash/wiki) for\nall documentation and resources.\n\n# Implemented Widgets\n\n## The Button\n\nAllows users to interact with the application, each button press runs a callback function.\nRun the\n[buttondemo](widgets/button/buttondemo/buttondemo.go).\n\n```go\ngo run widgets/button/buttondemo/buttondemo.go\n```\n\n[<img src=\"./doc/images/buttondemo.gif\" alt=\"buttondemo\" type=\"image/gif\" width=\"50%\">](widgets/button/buttondemo/buttondemo.go)\n\n## The TextInput\n\nAllows users to interact with the application by entering, editing and\nsubmitting text data. Run the\n[textinputdemo](widgets/textinput/textinputdemo/textinputdemo.go).\n\n```go\ngo run widgets/textinput/textinputdemo/textinputdemo.go\n```\n\n[<img src=\"./doc/images/textinputdemo.gif\" alt=\"textinputdemo\" type=\"image/gif\" width=\"80%\">](widgets/textinput/textinputdemo/textinputdemo.go)\n\nCan be used to create text input forms that support keyboard navigation:\n\n```go\ngo run widgets/textinput/formdemo/formdemo.go\n```\n\n[<img src=\"./doc/images/formdemo.gif\" alt=\"formdemo\" type=\"image/gif\" width=\"50%\">](widgets/textinput/formdemo/formdemo.go)\n\n## The Gauge\n\nDisplays the progress of an operation. Run the\n[gaugedemo](widgets/gauge/gaugedemo/gaugedemo.go).\n\n```go\ngo run widgets/gauge/gaugedemo/gaugedemo.go\n```\n\n[<img src=\"./doc/images/gaugedemo.gif\" alt=\"gaugedemo\" type=\"image/gif\">](widgets/gauge/gaugedemo/gaugedemo.go)\n\n## The Donut\n\nVisualizes progress of an operation as a partial or a complete donut. Run the\n[donutdemo](widgets/donut/donutdemo/donutdemo.go).\n\n```go\ngo run widgets/donut/donutdemo/donutdemo.go\n```\n\n[<img src=\"./doc/images/donutdemo.gif\" alt=\"donutdemo\" type=\"image/gif\">](widgets/donut/donutdemo/donutdemo.go)\n\n## The Text\n\nDisplays text content, supports trimming and scrolling of content. Run the\n[textdemo](widgets/text/textdemo/textdemo.go).\n\n```go\ngo run widgets/text/textdemo/textdemo.go\n```\n\n[<img src=\"./doc/images/textdemo.gif\" alt=\"textdemo\" type=\"image/gif\">](widgets/text/textdemo/textdemo.go)\n\n## The SparkLine\n\nDraws a graph showing a series of values as vertical bars. The bars can have\nsub-cell height. Run the\n[sparklinedemo](widgets/sparkline/sparklinedemo/sparklinedemo.go).\n\n```go\ngo run widgets/sparkline/sparklinedemo/sparklinedemo.go\n```\n\n[<img src=\"./doc/images/sparklinedemo.gif\" alt=\"sparklinedemo\" type=\"image/gif\" width=\"50%\">](widgets/sparkline/sparklinedemo/sparklinedemo.go)\n\n## The BarChart\n\nDisplays multiple bars showing relative ratios of values. Run the\n[barchartdemo](widgets/barchart/barchartdemo/barchartdemo.go).\n\n```go\ngo run widgets/barchart/barchartdemo/barchartdemo.go\n```\n\n[<img src=\"./doc/images/barchartdemo.gif\" alt=\"barchartdemo\" type=\"image/gif\" width=\"50%\">](widgets/barchart/barchartdemo/barchartdemo.go)\n\n## The LineChart\n\nDisplays series of values on a line chart, supports zoom triggered by mouse\nevents. Run the\n[linechartdemo](widgets/linechart/linechartdemo/linechartdemo.go).\n\n```go\ngo run widgets/linechart/linechartdemo/linechartdemo.go\n```\n\n[<img src=\"./doc/images/linechartdemo.gif\" alt=\"linechartdemo\" type=\"image/gif\" width=\"70%\">](widgets/linechart/linechartdemo/linechartdemo.go)\n\n## The SegmentDisplay\n\nDisplays text by simulating a 16-segment display. Run the\n[segmentdisplaydemo](widgets/segmentdisplay/segmentdisplaydemo/segmentdisplaydemo.go).\n\n```go\ngo run widgets/segmentdisplay/segmentdisplaydemo/segmentdisplaydemo.go\n```\n\n[<img src=\"./doc/images/segmentdisplaydemo.gif\" alt=\"segmentdisplaydemo\" type=\"image/gif\">](widgets/segmentdisplay/segmentdisplaydemo/segmentdisplaydemo.go)\n\n# Contributing\n\nIf you are willing to contribute, improve the infrastructure or develop a\nwidget, first of all Thank You! Your help is appreciated.\n\nPlease see the [CONTRIBUTING.md](CONTRIBUTING.md) file for guidelines related\nto the Google's CLA, and code review requirements.\n\nAs stated above the primary goal of this project is to develop readable, well\ndesigned code, the functionality and efficiency come second. This is achieved\nthrough detailed code reviews, design discussions and following of the [design\nguidelines](doc/design_guidelines.md). Please familiarize yourself with these\nbefore contributing.\n\nIf you're developing a new widget, please see the [widget\ndevelopment](doc/widget_development.md) section.\n\nTermdash uses [this branching model](https://nvie.com/posts/a-successful-git-branching-model/). When you fork the repository, base your changes off the [devel](https://github.com/mum4k/termdash/tree/devel) branch and the pull request should merge it back to the devel branch. Commits to the master branch are limited to releases, major bug fixes and documentation updates.\n\n# Similar projects in Go\n\n- [clui](https://github.com/VladimirMarkelov/clui)\n- [gocui](https://github.com/jroimartin/gocui)\n- [gowid](https://github.com/gcla/gowid)\n- [termui](https://github.com/gizak/termui)\n- [tui-go](https://github.com/marcusolsson/tui-go)\n- [tview](https://github.com/rivo/tview)\n\n# Projects using Termdash\n\n- [datadash](https://github.com/keithknott26/datadash): Visualize streaming or tabular data inside the terminal.\n- [grafterm](https://github.com/slok/grafterm): Metrics dashboards visualization on the terminal.\n- [perfstat](https://github.com/flaviostutz/perfstat): Analyze and show tips about possible bottlenecks in Linux systems.\n- [gex](https://github.com/Tosch110/gex): Cosmos SDK explorer in-terminal.\n- [ali](https://github.com/nakabonne/ali): ALI HTTP load testing tool with realtime analysis.\n- [suimon](https://github.com/bartosian/suimon): SUI blockchain explorer and monitor. \n\n# Disclaimer\n\nThis is not an official Google product.\n"
        },
        {
          "name": "align",
          "type": "tree",
          "content": null
        },
        {
          "name": "cell",
          "type": "tree",
          "content": null
        },
        {
          "name": "container",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.4658203125,
          "content": "module github.com/mum4k/termdash\n\ngo 1.21\n\nrequire (\n\tgithub.com/gdamore/tcell/v2 v2.7.4\n\tgithub.com/kylelemons/godebug v1.1.0\n\tgithub.com/mattn/go-runewidth v0.0.15\n\tgithub.com/nsf/termbox-go v1.1.1\n)\n\nrequire (\n\tgithub.com/gdamore/encoding v1.0.0 // indirect\n\tgithub.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\tgithub.com/rivo/uniseg v0.4.3 // indirect\n\tgolang.org/x/sys v0.17.0 // indirect\n\tgolang.org/x/term v0.17.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 4.6669921875,
          "content": "github.com/gdamore/encoding v1.0.0 h1:+7OoQ1Bc6eTm5niUzBa0Ctsh6JbMW6Ra+YNuAtDBdko=\ngithub.com/gdamore/encoding v1.0.0/go.mod h1:alR0ol34c49FCSBLjhosxzcPHQbf2trDkoo5dl+VrEg=\ngithub.com/gdamore/tcell/v2 v2.7.4 h1:sg6/UnTM9jGpZU+oFYAsDahfchWAFW8Xx2yFinNSAYU=\ngithub.com/gdamore/tcell/v2 v2.7.4/go.mod h1:dSXtXTSK0VsW1biw65DZLZ2NKr7j0qP/0J7ONmsraWg=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.15 h1:UNAjwbU9l54TA3KzvqLGxwWjHmMgBUVhBiTjelZgg3U=\ngithub.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/nsf/termbox-go v1.1.1 h1:nksUPLCb73Q++DwbYUBEglYBRPZyoXJdrj5L+TkjyZY=\ngithub.com/nsf/termbox-go v1.1.1/go.mod h1:T0cTdVuOwf7pHQNtfhnEbzHbcNyCEcVU4YPpouCbVxo=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.3 h1:utMvzDsuh3suAEnhH0RdHmoPbU648o6CvXxTx4SBMOw=\ngithub.com/rivo/uniseg v0.4.3/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0 h1:25cE3gD+tdBA7lp7QfhuV+rJiE9YXTcS3VG1SqssI/Y=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.17.0 h1:mkTF7LCd6WGJNL3K1Ad7kwxNfYAW6a8a8QqtMblp/4U=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n"
        },
        {
          "name": "keyboard",
          "type": "tree",
          "content": null
        },
        {
          "name": "linestyle",
          "type": "tree",
          "content": null
        },
        {
          "name": "mouse",
          "type": "tree",
          "content": null
        },
        {
          "name": "private",
          "type": "tree",
          "content": null
        },
        {
          "name": "termdash.go",
          "type": "blob",
          "size": 9.92578125,
          "content": "// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/*\nPackage termdash implements a terminal based dashboard.\n\nWhile running, the terminal dashboard performs the following:\n  - Periodic redrawing of the canvas and all the widgets.\n  - Event based redrawing of the widgets (i.e. on Keyboard or Mouse events).\n  - Forwards input events to widgets and optional subscribers.\n  - Handles terminal resize events.\n*/\npackage termdash\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/mum4k/termdash/container\"\n\t\"github.com/mum4k/termdash/private/event\"\n\t\"github.com/mum4k/termdash/terminal/terminalapi\"\n)\n\n// DefaultRedrawInterval is the default for the RedrawInterval option.\nconst DefaultRedrawInterval = 250 * time.Millisecond\n\n// Option is used to provide options.\ntype Option interface {\n\t// set sets the provided option.\n\tset(td *termdash)\n}\n\n// option implements Option.\ntype option func(td *termdash)\n\n// set implements Option.set.\nfunc (o option) set(td *termdash) {\n\to(td)\n}\n\n// RedrawInterval sets how often termdash redraws the container and all the widgets.\n// Defaults to DefaultRedrawInterval. Use the controller to disable the\n// periodic redraw.\nfunc RedrawInterval(t time.Duration) Option {\n\treturn option(func(td *termdash) {\n\t\ttd.redrawInterval = t\n\t})\n}\n\n// ErrorHandler is used to provide a function that will be called with all\n// errors that occur while the dashboard is running. If not provided, any\n// errors panic the application.\n// The provided function must be thread-safe.\nfunc ErrorHandler(f func(error)) Option {\n\treturn option(func(td *termdash) {\n\t\ttd.errorHandler = f\n\t})\n}\n\n// KeyboardSubscriber registers a subscriber for Keyboard events. Each\n// keyboard event is forwarded to the container and the registered subscriber.\n// The provided function must be thread-safe.\nfunc KeyboardSubscriber(f func(*terminalapi.Keyboard)) Option {\n\treturn option(func(td *termdash) {\n\t\ttd.keyboardSubscriber = f\n\t})\n}\n\n// MouseSubscriber registers a subscriber for Mouse events. Each mouse event\n// is forwarded to the container and the registered subscriber.\n// The provided function must be thread-safe.\nfunc MouseSubscriber(f func(*terminalapi.Mouse)) Option {\n\treturn option(func(td *termdash) {\n\t\ttd.mouseSubscriber = f\n\t})\n}\n\n// withEDS indicates that termdash should run with the provided event\n// distribution system instead of creating one.\n// Useful for tests.\nfunc withEDS(eds *event.DistributionSystem) Option {\n\treturn option(func(td *termdash) {\n\t\ttd.eds = eds\n\t})\n}\n\n// Run runs the terminal dashboard with the provided container on the terminal.\n// Redraws the terminal periodically. If you prefer a manual redraw, use the\n// Controller instead.\n// Blocks until the context expires.\nfunc Run(ctx context.Context, t terminalapi.Terminal, c *container.Container, opts ...Option) error {\n\ttd := newTermdash(t, c, opts...)\n\n\terr := td.start(ctx)\n\t// Only return the status (error or nil) after the termdash event\n\t// processing goroutine actually exits.\n\ttd.stop()\n\treturn err\n}\n\n// Controller controls a termdash instance.\n// The controller instance is only valid until Close() is called.\n// The controller is not thread-safe.\ntype Controller struct {\n\ttd     *termdash\n\tcancel context.CancelFunc\n}\n\n// NewController initializes termdash and returns an instance of the controller.\n// Periodic redrawing is disabled when using the controller, the RedrawInterval\n// option is ignored.\n// Close the controller when it isn't needed anymore.\nfunc NewController(t terminalapi.Terminal, c *container.Container, opts ...Option) (*Controller, error) {\n\tctx, cancel := context.WithCancel(context.Background())\n\tctrl := &Controller{\n\t\ttd:     newTermdash(t, c, opts...),\n\t\tcancel: cancel,\n\t}\n\n\t// stops when Close() is called.\n\tgo ctrl.td.processEvents(ctx)\n\tif err := ctrl.td.periodicRedraw(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn ctrl, nil\n}\n\n// Redraw triggers redraw of the terminal.\nfunc (c *Controller) Redraw() error {\n\tif c.td == nil {\n\t\treturn errors.New(\"the termdash instance is no longer running, this controller is now invalid\")\n\t}\n\n\tc.td.mu.Lock()\n\tdefer c.td.mu.Unlock()\n\treturn c.td.redraw()\n}\n\n// Close closes the Controller and its termdash instance.\nfunc (c *Controller) Close() {\n\tc.cancel()\n\tc.td.stop()\n\tc.td = nil\n}\n\n// termdash is a terminal based dashboard.\n// This object is thread-safe.\ntype termdash struct {\n\t// term is the terminal the dashboard runs on.\n\tterm terminalapi.Terminal\n\n\t// container maintains terminal splits and places widgets.\n\tcontainer *container.Container\n\n\t// eds distributes input events to subscribers.\n\teds *event.DistributionSystem\n\n\t// closeCh gets closed when Stop() is called, which tells the event\n\t// collecting goroutine to exit.\n\tcloseCh chan struct{}\n\t// exitCh gets closed when the event collecting goroutine actually exits.\n\texitCh chan struct{}\n\n\t// clearNeeded indicates if the terminal needs to be cleared next time\n\t// we're drawing it. Terminal needs to be cleared if its sized changed.\n\tclearNeeded bool\n\n\t// mu protects termdash.\n\tmu sync.Mutex\n\n\t// Options.\n\tredrawInterval     time.Duration\n\terrorHandler       func(error)\n\tmouseSubscriber    func(*terminalapi.Mouse)\n\tkeyboardSubscriber func(*terminalapi.Keyboard)\n}\n\n// newTermdash creates a new termdash.\nfunc newTermdash(t terminalapi.Terminal, c *container.Container, opts ...Option) *termdash {\n\ttd := &termdash{\n\t\tterm:           t,\n\t\tcontainer:      c,\n\t\teds:            event.NewDistributionSystem(),\n\t\tcloseCh:        make(chan struct{}),\n\t\texitCh:         make(chan struct{}),\n\t\tredrawInterval: DefaultRedrawInterval,\n\t}\n\n\tfor _, opt := range opts {\n\t\topt.set(td)\n\t}\n\ttd.subscribers()\n\tc.Subscribe(td.eds)\n\treturn td\n}\n\n// subscribers subscribes event receivers that live in this package to EDS.\nfunc (td *termdash) subscribers() {\n\t// Handler for all errors that occur during input event processing.\n\ttd.eds.Subscribe([]terminalapi.Event{terminalapi.NewError(\"\")}, func(ev terminalapi.Event) {\n\t\ttd.handleError(ev.(*terminalapi.Error).Error())\n\t})\n\n\t// Handles terminal resize events.\n\ttd.eds.Subscribe([]terminalapi.Event{&terminalapi.Resize{}}, func(terminalapi.Event) {\n\t\ttd.setClearNeeded()\n\t})\n\n\t// Redraws the screen on Keyboard and Mouse events.\n\t// These events very likely change the content of the widgets (e.g. zooming\n\t// a LineChart) so a redraw is needed to make that visible.\n\ttd.eds.Subscribe([]terminalapi.Event{\n\t\t&terminalapi.Keyboard{},\n\t\t&terminalapi.Mouse{},\n\t}, func(terminalapi.Event) {\n\t\ttd.evRedraw()\n\t}, event.MaxRepetitive(0)) // No repetitive events that cause terminal redraw.\n\n\t// Keyboard and Mouse subscribers specified via options.\n\tif td.keyboardSubscriber != nil {\n\t\ttd.eds.Subscribe([]terminalapi.Event{&terminalapi.Keyboard{}}, func(ev terminalapi.Event) {\n\t\t\ttd.keyboardSubscriber(ev.(*terminalapi.Keyboard))\n\t\t})\n\t}\n\tif td.mouseSubscriber != nil {\n\t\ttd.eds.Subscribe([]terminalapi.Event{&terminalapi.Mouse{}}, func(ev terminalapi.Event) {\n\t\t\ttd.mouseSubscriber(ev.(*terminalapi.Mouse))\n\t\t})\n\t}\n}\n\n// handleError forwards the error to the error handler if one was\n// provided or panics.\nfunc (td *termdash) handleError(err error) {\n\tif td.errorHandler != nil {\n\t\ttd.errorHandler(err)\n\t} else {\n\t\tpanic(err)\n\t}\n}\n\n// setClearNeeded flags that the terminal needs to be cleared next time we're\n// drawing it.\nfunc (td *termdash) setClearNeeded() {\n\ttd.mu.Lock()\n\tdefer td.mu.Unlock()\n\ttd.clearNeeded = true\n}\n\n// redraw redraws the container and its widgets.\n// The caller must hold td.mu.\nfunc (td *termdash) redraw() error {\n\tif td.clearNeeded {\n\t\tif err := td.term.Clear(); err != nil {\n\t\t\treturn fmt.Errorf(\"term.Clear => error: %v\", err)\n\t\t}\n\t\ttd.clearNeeded = false\n\t}\n\n\tif err := td.container.Draw(); err != nil {\n\t\treturn fmt.Errorf(\"container.Draw => error: %v\", err)\n\t}\n\n\tif err := td.term.Flush(); err != nil {\n\t\treturn fmt.Errorf(\"term.Flush => error: %v\", err)\n\t}\n\treturn nil\n}\n\n// evRedraw redraws the container and its widgets.\nfunc (td *termdash) evRedraw() error {\n\ttd.mu.Lock()\n\tdefer td.mu.Unlock()\n\n\t// Don't redraw immediately, give widgets that are performing enough time\n\t// to update.\n\t// We don't want to actually synchronize until all widgets update, we are\n\t// purposefully leaving slow widgets behind.\n\ttime.Sleep(25 * time.Millisecond)\n\treturn td.redraw()\n}\n\n// periodicRedraw is called once each RedrawInterval.\nfunc (td *termdash) periodicRedraw() error {\n\ttd.mu.Lock()\n\tdefer td.mu.Unlock()\n\treturn td.redraw()\n}\n\n// processEvents processes terminal input events.\n// This is the body of the event collecting goroutine.\nfunc (td *termdash) processEvents(ctx context.Context) {\n\tdefer close(td.exitCh)\n\n\tfor {\n\t\tev := td.term.Event(ctx)\n\t\tif ev != nil {\n\t\t\ttd.eds.Event(ev)\n\t\t}\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\t}\n}\n\n// start starts the terminal dashboard. Blocks until the context expires or\n// until stop() is called.\nfunc (td *termdash) start(ctx context.Context) error {\n\t// Redraw once to initialize the container sizes.\n\tif err := td.periodicRedraw(); err != nil {\n\t\tclose(td.exitCh)\n\t\treturn err\n\t}\n\n\tredrawTimer := time.NewTicker(td.redrawInterval)\n\tdefer redrawTimer.Stop()\n\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\n\t// stops when stop() is called or the context expires.\n\tgo td.processEvents(ctx)\n\n\tfor {\n\t\tselect {\n\t\tcase <-redrawTimer.C:\n\t\t\tif err := td.periodicRedraw(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\n\t\tcase <-td.closeCh:\n\t\t\treturn nil\n\t\t}\n\t}\n}\n\n// stop tells the event collecting goroutine to stop.\n// Blocks until it exits.\nfunc (td *termdash) stop() {\n\tclose(td.closeCh)\n\t<-td.exitCh\n}\n"
        },
        {
          "name": "termdash_test.go",
          "type": "blob",
          "size": 16.2138671875,
          "content": "// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage termdash\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"image\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/kylelemons/godebug/pretty\"\n\t\"github.com/mum4k/termdash/container\"\n\t\"github.com/mum4k/termdash/keyboard\"\n\t\"github.com/mum4k/termdash/mouse\"\n\t\"github.com/mum4k/termdash/private/canvas/testcanvas\"\n\t\"github.com/mum4k/termdash/private/event\"\n\t\"github.com/mum4k/termdash/private/event/eventqueue\"\n\t\"github.com/mum4k/termdash/private/event/testevent\"\n\t\"github.com/mum4k/termdash/private/faketerm\"\n\t\"github.com/mum4k/termdash/private/fakewidget\"\n\t\"github.com/mum4k/termdash/terminal/tcell\"\n\t\"github.com/mum4k/termdash/terminal/terminalapi\"\n\t\"github.com/mum4k/termdash/widgetapi\"\n\t\"github.com/mum4k/termdash/widgets/barchart\"\n\t\"github.com/mum4k/termdash/widgets/gauge\"\n)\n\n// Example shows how to setup and run termdash with periodic redraw.\nfunc Example() {\n\t// Create the terminal.\n\tt, err := tcell.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer t.Close()\n\n\t// Create some widgets.\n\tbc, err := barchart.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tg, err := gauge.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Create the container with two widgets.\n\tc, err := container.New(\n\t\tt,\n\t\tcontainer.SplitVertical(\n\t\t\tcontainer.Left(\n\t\t\t\tcontainer.PlaceWidget(bc),\n\t\t\t),\n\t\t\tcontainer.Right(\n\t\t\t\tcontainer.PlaceWidget(g),\n\t\t\t),\n\t\t\tcontainer.SplitPercent(30),\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Termdash runs until the context expires.\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tif err := Run(ctx, t, c); err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Example shows how to setup and run termdash with manually triggered redraw.\nfunc Example_triggered() {\n\t// Create the terminal.\n\tt, err := tcell.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer t.Close()\n\n\t// Create a widget.\n\tbc, err := barchart.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Create the container with a widget.\n\tc, err := container.New(\n\t\tt,\n\t\tcontainer.PlaceWidget(bc),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Create the controller and disable periodic redraw.\n\tctrl, err := NewController(t, c)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Close the controller and termdash once it isn't required anymore.\n\tdefer ctrl.Close()\n\n\t// Redraw the terminal manually.\n\tif err := ctrl.Redraw(); err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// errorHandler just stores the last error received.\ntype errorHandler struct {\n\terr error\n\tmu  sync.Mutex\n}\n\nfunc (eh *errorHandler) get() error {\n\teh.mu.Lock()\n\tdefer eh.mu.Unlock()\n\treturn eh.err\n}\n\nfunc (eh *errorHandler) handle(err error) {\n\teh.mu.Lock()\n\tdefer eh.mu.Unlock()\n\teh.err = err\n}\n\n// keySubscriber just stores the last pressed key.\ntype keySubscriber struct {\n\treceived terminalapi.Keyboard\n\tmu       sync.Mutex\n}\n\nfunc (ks *keySubscriber) get() terminalapi.Keyboard {\n\tks.mu.Lock()\n\tdefer ks.mu.Unlock()\n\treturn ks.received\n}\n\nfunc (ks *keySubscriber) receive(k *terminalapi.Keyboard) {\n\tks.mu.Lock()\n\tdefer ks.mu.Unlock()\n\tks.received = *k\n}\n\n// mouseSubscriber just stores the last mouse event.\ntype mouseSubscriber struct {\n\treceived terminalapi.Mouse\n\tmu       sync.Mutex\n}\n\nfunc (ms *mouseSubscriber) get() terminalapi.Mouse {\n\tms.mu.Lock()\n\tdefer ms.mu.Unlock()\n\treturn ms.received\n}\n\nfunc (ms *mouseSubscriber) receive(m *terminalapi.Mouse) {\n\tms.mu.Lock()\n\tdefer ms.mu.Unlock()\n\tms.received = *m\n}\n\ntype eventHandlers struct {\n\thandler  errorHandler\n\tkeySub   keySubscriber\n\tmouseSub mouseSubscriber\n}\n\nfunc TestRun(t *testing.T) {\n\tt.Parallel()\n\n\ttests := []struct {\n\t\tdesc   string\n\t\tsize   image.Point\n\t\topts   func(*eventHandlers) []Option\n\t\tevents []terminalapi.Event\n\t\t// The number of expected processed events, used for synchronization.\n\t\t// Equals len(events) * number of subscribers for the event type.\n\t\twantProcessed int\n\t\t// function to execute after the test case, can do additional comparison.\n\t\tafter   func(*eventHandlers) error\n\t\twant    func(size image.Point) *faketerm.Terminal\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tdesc: \"draws the dashboard until closed\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\topts: func(*eventHandlers) []Option {\n\t\t\t\treturn []Option{\n\t\t\t\t\tRedrawInterval(1),\n\t\t\t\t}\n\t\t\t},\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\n\t\t\t\tfakewidget.MustDraw(\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t\twidgetapi.Options{},\n\t\t\t\t)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"fails when the widget doesn't draw due to size too small\",\n\t\t\tsize: image.Point{1, 1},\n\t\t\topts: func(*eventHandlers) []Option {\n\t\t\t\treturn []Option{\n\t\t\t\t\tRedrawInterval(1),\n\t\t\t\t}\n\t\t\t},\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tdesc: \"forwards mouse events to container\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\topts: func(*eventHandlers) []Option {\n\t\t\t\treturn []Option{\n\t\t\t\t\tRedrawInterval(1),\n\t\t\t\t}\n\t\t\t},\n\t\t\tevents: []terminalapi.Event{\n\t\t\t\t&terminalapi.Mouse{Position: image.Point{0, 0}, Button: mouse.ButtonLeft},\n\t\t\t},\n\t\t\twantProcessed: 2,\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\n\t\t\t\tfakewidget.MustDraw(\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t\twidgetapi.Options{\n\t\t\t\t\t\tWantMouse: widgetapi.MouseScopeWidget,\n\t\t\t\t\t},\n\t\t\t\t\t&fakewidget.Event{\n\t\t\t\t\t\tEv:   &terminalapi.Mouse{Position: image.Point{0, 0}, Button: mouse.ButtonLeft},\n\t\t\t\t\t\tMeta: &widgetapi.EventMeta{Focused: true},\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"forwards keyboard events to container\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\topts: func(*eventHandlers) []Option {\n\t\t\t\treturn []Option{\n\t\t\t\t\tRedrawInterval(1),\n\t\t\t\t}\n\t\t\t},\n\t\t\tevents: []terminalapi.Event{\n\t\t\t\t&terminalapi.Keyboard{Key: keyboard.KeyEnter},\n\t\t\t},\n\t\t\twantProcessed: 2,\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\n\t\t\t\tfakewidget.MustDraw(\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t\twidgetapi.Options{\n\t\t\t\t\t\tWantKeyboard: widgetapi.KeyScopeFocused,\n\t\t\t\t\t\tWantMouse:    widgetapi.MouseScopeWidget,\n\t\t\t\t\t},\n\t\t\t\t\t&fakewidget.Event{\n\t\t\t\t\t\tEv:   &terminalapi.Keyboard{Key: keyboard.KeyEnter},\n\t\t\t\t\t\tMeta: &widgetapi.EventMeta{Focused: true},\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"forwards input errors to the error handler\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\topts: func(eh *eventHandlers) []Option {\n\t\t\t\treturn []Option{\n\t\t\t\t\tRedrawInterval(1),\n\t\t\t\t\tErrorHandler(eh.handler.handle),\n\t\t\t\t}\n\t\t\t},\n\t\t\tevents: []terminalapi.Event{\n\t\t\t\tterminalapi.NewError(\"input error\"),\n\t\t\t},\n\t\t\twantProcessed: 1,\n\t\t\tafter: func(eh *eventHandlers) error {\n\t\t\t\tif want := \"input error\"; eh.handler.get().Error() != want {\n\t\t\t\t\treturn fmt.Errorf(\"errorHandler got %v, want %v\", eh.handler.get(), want)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\n\t\t\t\tfakewidget.MustDraw(\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t\twidgetapi.Options{},\n\t\t\t\t)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"forwards keyboard events to the subscriber\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\topts: func(eh *eventHandlers) []Option {\n\t\t\t\treturn []Option{\n\t\t\t\t\tRedrawInterval(1),\n\t\t\t\t\tKeyboardSubscriber(eh.keySub.receive),\n\t\t\t\t}\n\t\t\t},\n\t\t\tevents: []terminalapi.Event{\n\t\t\t\t&terminalapi.Keyboard{Key: keyboard.KeyF1},\n\t\t\t},\n\t\t\twantProcessed: 3,\n\t\t\tafter: func(eh *eventHandlers) error {\n\t\t\t\twant := terminalapi.Keyboard{Key: keyboard.KeyF1}\n\t\t\t\tif diff := pretty.Compare(want, eh.keySub.get()); diff != \"\" {\n\t\t\t\t\treturn fmt.Errorf(\"keySubscriber got unexpected value, diff (-want, +got):\\n%s\", diff)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\n\t\t\t\tfakewidget.MustDraw(\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t\twidgetapi.Options{\n\t\t\t\t\t\tWantKeyboard: widgetapi.KeyScopeFocused,\n\t\t\t\t\t},\n\t\t\t\t\t&fakewidget.Event{\n\t\t\t\t\t\tEv:   &terminalapi.Keyboard{Key: keyboard.KeyF1},\n\t\t\t\t\t\tMeta: &widgetapi.EventMeta{Focused: true},\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"forwards mouse events to the subscriber\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\topts: func(eh *eventHandlers) []Option {\n\t\t\t\treturn []Option{\n\t\t\t\t\tRedrawInterval(1),\n\t\t\t\t\tMouseSubscriber(eh.mouseSub.receive),\n\t\t\t\t}\n\t\t\t},\n\t\t\tevents: []terminalapi.Event{\n\t\t\t\t&terminalapi.Mouse{Position: image.Point{0, 0}, Button: mouse.ButtonWheelUp},\n\t\t\t},\n\t\t\twantProcessed: 3,\n\t\t\tafter: func(eh *eventHandlers) error {\n\t\t\t\twant := terminalapi.Mouse{Position: image.Point{0, 0}, Button: mouse.ButtonWheelUp}\n\t\t\t\tif diff := pretty.Compare(want, eh.mouseSub.get()); diff != \"\" {\n\t\t\t\t\treturn fmt.Errorf(\"mouseSubscriber got unexpected value, diff (-want, +got):\\n%s\", diff)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\n\t\t\t\tfakewidget.MustDraw(\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t\twidgetapi.Options{\n\t\t\t\t\t\tWantMouse: widgetapi.MouseScopeWidget,\n\t\t\t\t\t},\n\t\t\t\t\t&fakewidget.Event{\n\t\t\t\t\t\tEv:   &terminalapi.Mouse{Position: image.Point{0, 0}, Button: mouse.ButtonWheelUp},\n\t\t\t\t\t\tMeta: &widgetapi.EventMeta{Focused: true},\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.desc, func(t *testing.T) {\n\t\t\ttc := tc\n\t\t\tt.Parallel()\n\n\t\t\thandlers := &eventHandlers{\n\t\t\t\thandler:  errorHandler{},\n\t\t\t\tkeySub:   keySubscriber{},\n\t\t\t\tmouseSub: mouseSubscriber{},\n\t\t\t}\n\n\t\t\teq := eventqueue.New()\n\t\t\tfor _, ev := range tc.events {\n\t\t\t\teq.Push(ev)\n\t\t\t}\n\n\t\t\tgot, err := faketerm.New(tc.size, faketerm.WithEventQueue(eq))\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"faketerm.New => unexpected error: %v\", err)\n\t\t\t}\n\n\t\t\tcont, err := container.New(\n\t\t\t\tgot,\n\t\t\t\tcontainer.PlaceWidget(fakewidget.New(widgetapi.Options{\n\t\t\t\t\tWantKeyboard: widgetapi.KeyScopeFocused,\n\t\t\t\t\tWantMouse:    widgetapi.MouseScopeWidget,\n\t\t\t\t})),\n\t\t\t)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"container.New => unexpected error: %v\", err)\n\t\t\t}\n\n\t\t\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\n\t\t\teds := event.NewDistributionSystem()\n\t\t\topts := tc.opts(handlers)\n\t\t\topts = append(opts, withEDS(eds))\n\t\t\terr = Run(ctx, got, cont, opts...)\n\t\t\tcancel()\n\t\t\tif (err != nil) != tc.wantErr {\n\t\t\t\tt.Errorf(\"Run => unexpected error: %v, wantErr: %v\", err, tc.wantErr)\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif err := testevent.WaitFor(5*time.Second, func() error {\n\t\t\t\tif got, want := eds.Processed(), tc.wantProcessed; got != want {\n\t\t\t\t\treturn fmt.Errorf(\"the event distribution system processed %d events, want %d\", got, want)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t}); err != nil {\n\t\t\t\tt.Fatalf(\"testevent.WaitFor => %v\", err)\n\t\t\t}\n\n\t\t\tif tc.after != nil {\n\t\t\t\tif err := tc.after(handlers); err != nil {\n\t\t\t\t\tt.Errorf(\"after => unexpected error: %v\", err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif diff := faketerm.Diff(tc.want(got.Size()), got); diff != \"\" {\n\t\t\t\tt.Errorf(\"Run => %v\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestController(t *testing.T) {\n\tt.Parallel()\n\n\ttests := []struct {\n\t\tdesc   string\n\t\tsize   image.Point\n\t\topts   []Option\n\t\tevents []terminalapi.Event\n\t\t// The number of expected processed events, used for synchronization.\n\t\t// Equals len(events) * number of subscribers for the event type.\n\t\twantProcessed int\n\t\tapiEvents     func(*fakewidget.Mirror) // Calls to the API of the widget.\n\t\tcontrols      func(*Controller) error\n\t\twant          func(size image.Point) *faketerm.Terminal\n\t\twantErr       bool\n\t}{\n\t\t{\n\t\t\tdesc: \"event triggers a redraw\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\tevents: []terminalapi.Event{\n\t\t\t\t&terminalapi.Keyboard{Key: keyboard.KeyEnter},\n\t\t\t},\n\t\t\twantProcessed: 2,\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\n\t\t\t\tfakewidget.MustDraw(\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t\twidgetapi.Options{\n\t\t\t\t\t\tWantKeyboard: widgetapi.KeyScopeFocused,\n\t\t\t\t\t\tWantMouse:    widgetapi.MouseScopeWidget,\n\t\t\t\t\t},\n\t\t\t\t\t&fakewidget.Event{\n\t\t\t\t\t\tEv:   &terminalapi.Keyboard{Key: keyboard.KeyEnter},\n\t\t\t\t\t\tMeta: &widgetapi.EventMeta{Focused: true},\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t\treturn ft\n\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"controller triggers redraw\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\tapiEvents: func(mi *fakewidget.Mirror) {\n\t\t\t\tmi.Text(\"hello\")\n\t\t\t},\n\t\t\tcontrols: func(ctrl *Controller) error {\n\t\t\t\treturn ctrl.Redraw()\n\t\t\t},\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\n\t\t\t\tmirror := fakewidget.New(widgetapi.Options{})\n\t\t\t\tmirror.Text(\"hello\")\n\t\t\t\tfakewidget.MustDrawWithMirror(\n\t\t\t\t\tmirror,\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"ignores periodic redraw via the controller\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\topts: []Option{\n\t\t\t\tRedrawInterval(1),\n\t\t\t},\n\t\t\tapiEvents: func(mi *fakewidget.Mirror) {\n\t\t\t\tmi.Text(\"hello\")\n\t\t\t},\n\t\t\tcontrols: func(ctrl *Controller) error {\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\n\t\t\t\tfakewidget.MustDraw(\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t\twidgetapi.Options{},\n\t\t\t\t)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"does not redraw unless triggered when periodic disabled\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\tapiEvents: func(mi *fakewidget.Mirror) {\n\t\t\t\tmi.Text(\"hello\")\n\t\t\t},\n\t\t\tcontrols: func(ctrl *Controller) error {\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(size)\n\n\t\t\t\tfakewidget.MustDraw(\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t\twidgetapi.Options{},\n\t\t\t\t)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdesc: \"fails when redraw fails\",\n\t\t\tsize: image.Point{1, 1},\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\treturn faketerm.MustNew(size)\n\t\t\t},\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tdesc: \"resizes the terminal\",\n\t\t\tsize: image.Point{60, 10},\n\t\t\tevents: []terminalapi.Event{\n\t\t\t\t&terminalapi.Resize{Size: image.Point{70, 10}},\n\t\t\t},\n\t\t\twantProcessed: 1,\n\t\t\tcontrols: func(ctrl *Controller) error {\n\t\t\t\treturn ctrl.Redraw()\n\t\t\t},\n\t\t\twant: func(size image.Point) *faketerm.Terminal {\n\t\t\t\tft := faketerm.MustNew(image.Point{70, 10})\n\n\t\t\t\tfakewidget.MustDraw(\n\t\t\t\t\tft,\n\t\t\t\t\ttestcanvas.MustNew(ft.Area()),\n\t\t\t\t\t&widgetapi.Meta{Focused: true},\n\t\t\t\t\twidgetapi.Options{},\n\t\t\t\t)\n\t\t\t\treturn ft\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.desc, func(t *testing.T) {\n\t\t\ttc := tc\n\t\t\tt.Parallel()\n\n\t\t\teq := eventqueue.New()\n\t\t\tfor _, ev := range tc.events {\n\t\t\t\teq.Push(ev)\n\t\t\t}\n\n\t\t\tgot, err := faketerm.New(tc.size, faketerm.WithEventQueue(eq))\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"faketerm.New => unexpected error: %v\", err)\n\t\t\t}\n\n\t\t\tmi := fakewidget.New(widgetapi.Options{\n\t\t\t\tWantKeyboard: widgetapi.KeyScopeFocused,\n\t\t\t\tWantMouse:    widgetapi.MouseScopeWidget,\n\t\t\t})\n\t\t\tcont, err := container.New(\n\t\t\t\tgot,\n\t\t\t\tcontainer.PlaceWidget(mi),\n\t\t\t)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"container.New => unexpected error: %v\", err)\n\t\t\t}\n\n\t\t\teds := event.NewDistributionSystem()\n\t\t\topts := tc.opts\n\t\t\topts = append(opts, withEDS(eds))\n\t\t\tctrl, err := NewController(got, cont, opts...)\n\t\t\tif (err != nil) != tc.wantErr {\n\t\t\t\tt.Errorf(\"NewController => unexpected error: %v, wantErr: %v\", err, tc.wantErr)\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif tc.apiEvents != nil {\n\t\t\t\ttc.apiEvents(mi)\n\t\t\t}\n\n\t\t\tif err := testevent.WaitFor(5*time.Second, func() error {\n\t\t\t\tif got, want := eds.Processed(), tc.wantProcessed; got != want {\n\t\t\t\t\treturn fmt.Errorf(\"the event distribution system processed %d events, want %d\", got, want)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t}); err != nil {\n\t\t\t\tt.Fatalf(\"testevent.WaitFor => %v\", err)\n\t\t\t}\n\n\t\t\tif tc.controls != nil {\n\t\t\t\tif err := tc.controls(ctrl); err != nil {\n\t\t\t\t\tt.Errorf(\"controls => unexpected error: %v\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tctrl.Close()\n\n\t\t\tif diff := faketerm.Diff(tc.want(got.Size()), got); diff != \"\" {\n\t\t\t\tt.Errorf(\"Run => %v\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "termdashdemo",
          "type": "tree",
          "content": null
        },
        {
          "name": "terminal",
          "type": "tree",
          "content": null
        },
        {
          "name": "widgetapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "widgets",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}