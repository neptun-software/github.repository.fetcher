{
  "metadata": {
    "timestamp": 1736567080488,
    "page": 668,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "HouzuoGuo/tiedot",
      "stars": 2724,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.041015625,
          "content": "coverage.txt\n.idea\npkgcoverage.txt\ntiedot\n"
        },
        {
          "name": ".project",
          "type": "blob",
          "size": 0.34375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>tiedot</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>com.googlecode.goclipse.goBuilder</name>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>goclipse.goNature</nature>\n\t</natures>\n</projectDescription>\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3310546875,
          "content": "language: go\ngo_import_path: github.com/HouzuoGuo/tiedot\nsudo: false\ngo:\n  - 1.11\nos:\n  - linux\n  - osx\nmatrix:\n  allow_failures:\n    - go: tip\ninstall:\n  - go get github.com/dgrijalva/jwt-go\n  - go get github.com/pkg/errors\nscript:\n - go build\n - bash test-and-coverage-report.sh\nafter_success:\n - bash <(curl -s https://codecov.io/bash)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.400390625,
          "content": "FROM golang:1.8.3 as builder\nWORKDIR /go/src/tiedot/\nCOPY ./    .\nWORKDIR /go/\nRUN go get -v -d tiedot\nRUN CGO_ENABLED=0 GOOS=linux go install -a -installsuffix cgo -v tiedot\n\nFROM alpine:latest\nRUN apk --no-cache add ca-certificates\nWORKDIR /root/\nCOPY --from=builder /go/bin/tiedot /bin/\nRUN chmod +x /bin/tiedot\nEXPOSE 8080\nVOLUME [\"/data\"]\nCMD [\"/bin/tiedot\",\"-dir\",\"/data\",\"-port\",\"8080\",\"-mode\",\"httpd\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.271484375,
          "content": "Copyright (c) 2014, Contributors and Howard Guo\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.357421875,
          "content": "<p>2021-09-05: thanks for evaluating tiedot! The project started as a short programming exercise and I am very grateful for the small user base it has received. I am afraid the project has been dormant since 2016, the feature set is minimal and lacking for a modern application. Please consider other embedded DB engine alternatives. In the meanwhile, check out this actively maintained open source project of mine: <a href=\"https://github.com/HouzuoGuo/laitos\">laitos - Top geek's chindogu</a>.</p>\n\n<h1 align=\"center\">tiedot</h1>\n<p align=\"center\">\n<a href=\"https://travis-ci.org/HouzuoGuo/tiedot.svg?branch=master\"><img src=\"https://travis-ci.org/HouzuoGuo/tiedot.svg?branch=master\" alt=\"Build Status\"></a>\n    <a href=\"https://codecov.io/gh/HouzuoGuo/tiedot\"><img src=\"https://codecov.io/gh/HouzuoGuo/tiedot/branch/master/graph/badge.svg\" alt=\"codecov\"></a>\n      <a href=\"https://godoc.org/github.com/HouzuoGuo/tiedot\"><img src=\"https://godoc.org/github.com/HouzuoGuo/tiedot?status.svg\" alt=\"GoDoc\"></a> \n </p>\n \n<p align=\"center\"> <a href=\"https://github.com/HouzuoGuo/tiedot/wiki\"><strong>Documentation</strong></a> </p>\n\nKeywords: Golang, go, document database, NoSQL, JSON\n\n<img src=\"http://golang.org/doc/gopher/frontpage.png\" alt=\"Golang logo\" align=\"right\"/>\n\n### tiedot - Your NoSQL database powered by Golang\n\ntiedot is a document database engine that uses __JSON__ as document notation; it has a powerful query processor that supports advanced set operations; it can be __embedded__ into your program, or run a stand-alone server using __HTTP__ for an API. It runs on *nix and Windows operating systems.\n\ntiedot has fault-tolerant data structures that put your data safety *first*, while easily scales to 4+ CPU cores.\n\n> tiedot has very stable performance, even with millions of records! It consistently achieves high throughput - swallow more than 120k records or 80k complicated queries per second with confidence.\n\n### Get tiedot!\n\ntiedot is distributed under the [Simplified BSD license][Contributors and License].\n\nThe newest version 3.4 comes with general performance and compatibility improvements. Find out more in [releases](https://github.com/HouzuoGuo/tiedot/releases).\n\n### Running in Docker\nRun tiedot with help from [docker](https://docs.docker.com/engine/installation/) and [docker compose](https://docs.docker.com/compose/install/):\n\n    $ docker-compose build\n    $ docker-compose up -d\n\nTo view the logs:\n\n    $ docker-compose logs\n\n### References\n- [Tutorial: tiedot in 10 minutes]\n- [API reference and embedded usage]\n- [Limitations]\n\n... and more\n\n- [Performance tuning and benchmarks]\n- [Data structures]\n- [Query processor and index]\n- [Concurrency and networking]\n\n### Contributions welcome!\ntiedot is a very small project in the large open source community - it is growing fast thanks to the 800+ stars and watchers, as well as many contributors for their feedback, comments, ideas and code. Your contribution matters a lot!\n\nPull requests/forks all welcome, and please share your thoughts, questions and feature requests in [Issues] section.\n\nLet me know what you think about tiedot, I'd love to hear from you! Please [Email me], follow my [Twitter] and [blog].\n\nThe Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/).\nThe Go gopher is covered by the [Creative Commons Attribution 3.0][Creative Commons Attribution 3.0] license.\n\n[Tutorial: tiedot in 10 minutes]: https://github.com/HouzuoGuo/tiedot/wiki/Tutorial\n[API reference and embedded usage]: https://github.com/HouzuoGuo/tiedot/wiki/API-reference-and-embedded-usage\n[Version History]: https://github.com/HouzuoGuo/tiedot/wiki/Version-History\n[Data structures]: https://github.com/HouzuoGuo/tiedot/wiki/Data-structures\n[Query processor and index]: https://github.com/HouzuoGuo/tiedot/wiki/Query-processor-and-index\n[Concurrency and networking]: https://github.com/HouzuoGuo/tiedot/wiki/Concurrency-and-networking\n[Performance tuning and benchmarks]: https://github.com/HouzuoGuo/tiedot/wiki/Performance-tuning-and-benchmarks\n[Limitations]: https://github.com/HouzuoGuo/tiedot/wiki/Limitations\n[Email me]: mailto:guohouzuo@gmail.com\n[Twitter]: https://twitter.com/hzguo\n[blog]: http://allstarnix.blogspot.com.au\n[Issues]: https://github.com/HouzuoGuo/tiedot/issues\n[Contributors and License]: https://github.com/HouzuoGuo/tiedot/wiki/Contributors-and-License\n[Creative Commons Attribution 3.0]: http://creativecommons.org/licenses/by/3.0\n\n\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "db",
          "type": "tree",
          "content": null
        },
        {
          "name": "dberr",
          "type": "tree",
          "content": null
        },
        {
          "name": "distributable",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.390625,
          "content": "version: \"3\"\n\nservices:\n  tiedot:\n    build:\n      context: .\n    image: tiedot:latest\n    volumes:\n      - \"tiedot-data:/data\"\n    networks:\n      - tiedot\n    ports:\n      - \"8080:8080\"\n    deploy:\n      mode: replicated\n      replicas: 1\n      update_config:\n        parallelism: 1\n        delay: 1s\n      restart_policy:\n        condition: on-failure\n\nvolumes:\n  tiedot-data:\n\nnetworks:\n  tiedot:"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "gommap",
          "type": "tree",
          "content": null
        },
        {
          "name": "httpapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 5.3369140625,
          "content": "// Run tiedot HTTP API server, benchmarks, or embedded usage example.\npackage main\n\nimport (\n\t\"flag\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/signal\"\n\t\"runtime\"\n\t\"runtime/pprof\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/HouzuoGuo/tiedot/benchmark\"\n\t\"github.com/HouzuoGuo/tiedot/examples\"\n\t\"github.com/HouzuoGuo/tiedot/httpapi\"\n\t\"github.com/HouzuoGuo/tiedot/tdlog\"\n)\n\n// Read Linux system VM parameters and print performance configuration advice when necessary.\nfunc linuxPerfAdvice() {\n\treadFileIntContent := func(filePath string) (contentInt int, err error) {\n\t\tcontent, err := ioutil.ReadFile(filePath)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tcontentInt, err = strconv.Atoi(strings.TrimSpace(string(content)))\n\t\treturn\n\t}\n\tswappiness, err := readFileIntContent(\"/proc/sys/vm/swappiness\")\n\tif err != nil {\n\t\ttdlog.Notice(\"Non-fatal - unable to offer performance advice based on vm.swappiness.\")\n\t} else if swappiness > 30 {\n\t\ttdlog.Noticef(\"System vm.swappiness is very high (%d), lower it below 30 for optimal burst performance.\", swappiness)\n\t}\n\tdirtyRatio, err := readFileIntContent(\"/proc/sys/vm/dirty_ratio\")\n\tif err != nil {\n\t\ttdlog.Notice(\"Non-fatal - unable to offer performance advice based on vm.dirty_ratio.\")\n\t} else if dirtyRatio < 40 {\n\t\ttdlog.Noticef(\"System vm.dirty_ratio is very low (%d), raise it above 40 for optimal burst performance.\", dirtyRatio)\n\t}\n}\n\nfunc main() {\n\tvar err error\n\tvar defaultMaxprocs int\n\tif defaultMaxprocs, err = strconv.Atoi(os.Getenv(\"GOMAXPROCS\")); err != nil {\n\t\tdefaultMaxprocs = runtime.NumCPU()\n\t}\n\n\t// Parse CLI parameters\n\n\t// General params\n\tvar mode string\n\tvar maxprocs int\n\tflag.StringVar(&mode, \"mode\", \"\", \"Mandatory - specify the execution mode [httpd|bench|bench2|example]\")\n\tflag.IntVar(&maxprocs, \"gomaxprocs\", defaultMaxprocs, \"GOMAXPROCS\")\n\t// Debug params\n\tvar profile, debug bool\n\tflag.BoolVar(&tdlog.VerboseLog, \"verbose\", false, \"Turn verbose logging on/off\")\n\tflag.BoolVar(&profile, \"profile\", false, \"Write profiler results to prof.out\")\n\tflag.BoolVar(&debug, \"debug\", false, \"Dump goroutine stack traces upon receiving interrupt signal\")\n\t// HTTP mode params\n\tvar dir string\n\tvar bind string\n\tvar port int\n\tvar authToken string\n\tvar tlsCrt, tlsKey string\n\tflag.StringVar(&dir, \"dir\", \"\", \"(HTTP server) database directory\")\n\tflag.StringVar(&bind, \"bind\", \"\", \"(HTTP server) bind to IP address (all network interfaces by default)\")\n\tflag.IntVar(&port, \"port\", 8080, \"(HTTP server) port number\")\n\tflag.StringVar(&tlsCrt, \"tlscrt\", \"\", \"(HTTP server) TLS certificate (empty to disable TLS).\")\n\tflag.StringVar(&tlsKey, \"tlskey\", \"\", \"(HTTP server) TLS certificate key (empty to disable TLS).\")\n\tflag.StringVar(&authToken, \"authtoken\", \"\", \"(HTTP server) Only authorize requests carrying this token in 'Authorization: token TOKEN' header. (empty to disable)\")\n\n\t// HTTP + JWT params\n\tvar jwtPubKey, jwtPrivateKey string\n\tflag.StringVar(&jwtPubKey, \"jwtpubkey\", \"\", \"(HTTP JWT server) Public key for signing tokens (empty to disable JWT)\")\n\tflag.StringVar(&jwtPrivateKey, \"jwtprivatekey\", \"\", \"(HTTP JWT server) Private key for decoding tokens (empty to disable JWT)\")\n\n\t// Benchmark mode params\n\tvar (\n\t\t// Size of benchmark sample\n\t\tbenchSize int\n\t\t// Whether to clean up (delete benchmark DB) after benchmark\n\t\tbenchCleanup bool\n\t)\n\tflag.IntVar(&benchSize, \"benchsize\", 400000, \"Benchmark sample size\")\n\tflag.BoolVar(&benchCleanup, \"benchcleanup\", true, \"Whether to clean up (delete benchmark DB) after benchmark\")\n\tflag.Parse()\n\n\t// User must specify a mode to run\n\tif mode == \"\" {\n\t\tflag.PrintDefaults()\n\t\tos.Exit(1)\n\t}\n\n\t// Set appropriate GOMAXPROCS\n\truntime.GOMAXPROCS(maxprocs)\n\ttdlog.Noticef(\"GOMAXPROCS is set to %d\", maxprocs)\n\n\t// Performance advices\n\tif maxprocs < runtime.NumCPU() {\n\t\ttdlog.Noticef(\"GOMAXPROCS (%d) is less than number of CPUs (%d), this may reduce performance. You can change it via environment variable GOMAXPROCS or by passing CLI parameter -gomaxprocs\", maxprocs, runtime.NumCPU())\n\t}\n\tlinuxPerfAdvice()\n\n\t// Start profiler if enabled\n\tif profile {\n\t\tresultFile, err := os.Create(\"perf.out\")\n\t\tif err != nil {\n\t\t\ttdlog.Noticef(\"Cannot create profiler result file %v\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tpprof.StartCPUProfile(resultFile)\n\t\tdefer pprof.StopCPUProfile()\n\t}\n\n\t// Dump goroutine stacktraces upon receiving interrupt signal\n\tif debug {\n\t\tc := make(chan os.Signal, 1)\n\t\tsignal.Notify(c, os.Interrupt)\n\t\tgo func() {\n\t\t\tfor range c {\n\t\t\t\tpprof.Lookup(\"goroutine\").WriteTo(os.Stderr, 1)\n\t\t\t}\n\t\t}()\n\t}\n\n\tswitch mode {\n\tcase \"httpd\":\n\t\t// Run HTTP API server\n\t\tif dir == \"\" {\n\t\t\ttdlog.Notice(\"Please specify database directory, for example -dir=/tmp/db\")\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif port == 0 {\n\t\t\ttdlog.Notice(\"Please specify port number, for example -port=8080\")\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif tlsCrt != \"\" && tlsKey == \"\" || tlsKey != \"\" && tlsCrt == \"\" {\n\t\t\ttdlog.Notice(\"To enable HTTPS, please specify both RSA certificate and key file.\")\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif jwtPrivateKey != \"\" && jwtPubKey == \"\" || jwtPubKey != \"\" && jwtPrivateKey == \"\" {\n\t\t\ttdlog.Notice(\"To enable JWT, please specify RSA private and public key.\")\n\t\t\tos.Exit(1)\n\t\t}\n\t\thttpapi.Start(dir, port, tlsCrt, tlsKey, jwtPubKey, jwtPrivateKey, bind, authToken)\n\tcase \"example\":\n\t\t// Run embedded usage examples\n\t\texamples.EmbeddedExample()\n\tcase \"bench\":\n\t\t// Benchmark scenarios\n\t\tbenchmark.Benchmark(benchSize, benchCleanup)\n\tcase \"bench2\":\n\t\tbenchmark.Benchmark2(benchSize, benchCleanup)\n\tdefault:\n\t\tflag.PrintDefaults()\n\t\treturn\n\t}\n}\n"
        },
        {
          "name": "tdlog",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-and-coverage-report.sh",
          "type": "blob",
          "size": 0.32421875,
          "content": "#!/usr/bin/env bash\n\nset -e\necho '' > coverage.txt\n\nfor dir in $(go list ./... | grep -v vendor | grep -v examples | grep -v benchmark); do\n    go test -race -coverprofile=pkgcoverage.txt -covermode=atomic \"$dir\"\n    if [ -f pkgcoverage.txt ]; then\n        cat pkgcoverage.txt >> coverage.txt\n        rm pkgcoverage.txt\n    fi\ndone\n"
        }
      ]
    }
  ]
}