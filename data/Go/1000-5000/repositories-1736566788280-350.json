{
  "metadata": {
    "timestamp": 1736566788280,
    "page": 350,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "egonelbre/gophers",
      "stars": 3539,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "~*\n.DS_Store\n"
        },
        {
          "name": ".thumb",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE-CC0",
          "type": "blob",
          "size": 6.5126953125,
          "content": "CC0 1.0 Universal\r\n\r\nStatement of Purpose\r\n\r\nThe laws of most jurisdictions throughout the world automatically confer\r\nexclusive Copyright and Related Rights (defined below) upon the creator and\r\nsubsequent owner(s) (each and all, an \"owner\") of an original work of\r\nauthorship and/or a database (each, a \"Work\").\r\n\r\nCertain owners wish to permanently relinquish those rights to a Work for the\r\npurpose of contributing to a commons of creative, cultural and scientific\r\nworks (\"Commons\") that the public can reliably and without fear of later\r\nclaims of infringement build upon, modify, incorporate in other works, reuse\r\nand redistribute as freely as possible in any form whatsoever and for any\r\npurposes, including without limitation commercial purposes. These owners may\r\ncontribute to the Commons to promote the ideal of a free culture and the\r\nfurther production of creative, cultural and scientific works, or to gain\r\nreputation or greater distribution for their Work in part through the use and\r\nefforts of others.\r\n\r\nFor these and/or other purposes and motivations, and without any expectation\r\nof additional consideration or compensation, the person associating CC0 with a\r\nWork (the \"Affirmer\"), to the extent that he or she is an owner of Copyright\r\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work\r\nand publicly distribute the Work under its terms, with knowledge of his or her\r\nCopyright and Related Rights in the Work and the meaning and intended legal\r\neffect of CC0 on those rights.\r\n\r\n1. Copyright and Related Rights. A Work made available under CC0 may be\r\nprotected by copyright and related or neighboring rights (\"Copyright and\r\nRelated Rights\"). Copyright and Related Rights include, but are not limited\r\nto, the following:\r\n\r\n  i. the right to reproduce, adapt, distribute, perform, display, communicate,\r\n  and translate a Work;\r\n\r\n  ii. moral rights retained by the original author(s) and/or performer(s);\r\n\r\n  iii. publicity and privacy rights pertaining to a person's image or likeness\r\n  depicted in a Work;\r\n\r\n  iv. rights protecting against unfair competition in regards to a Work,\r\n  subject to the limitations in paragraph 4(a), below;\r\n\r\n  v. rights protecting the extraction, dissemination, use and reuse of data in\r\n  a Work;\r\n\r\n  vi. database rights (such as those arising under Directive 96/9/EC of the\r\n  European Parliament and of the Council of 11 March 1996 on the legal\r\n  protection of databases, and under any national implementation thereof,\r\n  including any amended or successor version of such directive); and\r\n\r\n  vii. other similar, equivalent or corresponding rights throughout the world\r\n  based on applicable law or treaty, and any national implementations thereof.\r\n\r\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\r\napplicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\r\nunconditionally waives, abandons, and surrenders all of Affirmer's Copyright\r\nand Related Rights and associated claims and causes of action, whether now\r\nknown or unknown (including existing as well as future claims and causes of\r\naction), in the Work (i) in all territories worldwide, (ii) for the maximum\r\nduration provided by applicable law or treaty (including future time\r\nextensions), (iii) in any current or future medium and for any number of\r\ncopies, and (iv) for any purpose whatsoever, including without limitation\r\ncommercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes\r\nthe Waiver for the benefit of each member of the public at large and to the\r\ndetriment of Affirmer's heirs and successors, fully intending that such Waiver\r\nshall not be subject to revocation, rescission, cancellation, termination, or\r\nany other legal or equitable action to disrupt the quiet enjoyment of the Work\r\nby the public as contemplated by Affirmer's express Statement of Purpose.\r\n\r\n3. Public License Fallback. Should any part of the Waiver for any reason be\r\njudged legally invalid or ineffective under applicable law, then the Waiver\r\nshall be preserved to the maximum extent permitted taking into account\r\nAffirmer's express Statement of Purpose. In addition, to the extent the Waiver\r\nis so judged Affirmer hereby grants to each affected person a royalty-free,\r\nnon transferable, non sublicensable, non exclusive, irrevocable and\r\nunconditional license to exercise Affirmer's Copyright and Related Rights in\r\nthe Work (i) in all territories worldwide, (ii) for the maximum duration\r\nprovided by applicable law or treaty (including future time extensions), (iii)\r\nin any current or future medium and for any number of copies, and (iv) for any\r\npurpose whatsoever, including without limitation commercial, advertising or\r\npromotional purposes (the \"License\"). The License shall be deemed effective as\r\nof the date CC0 was applied by Affirmer to the Work. Should any part of the\r\nLicense for any reason be judged legally invalid or ineffective under\r\napplicable law, such partial invalidity or ineffectiveness shall not\r\ninvalidate the remainder of the License, and in such case Affirmer hereby\r\naffirms that he or she will not (i) exercise any of his or her remaining\r\nCopyright and Related Rights in the Work or (ii) assert any associated claims\r\nand causes of action with respect to the Work, in either case contrary to\r\nAffirmer's express Statement of Purpose.\r\n\r\n4. Limitations and Disclaimers.\r\n\r\n  a. No trademark or patent rights held by Affirmer are waived, abandoned,\r\n  surrendered, licensed or otherwise affected by this document.\r\n\r\n  b. Affirmer offers the Work as-is and makes no representations or warranties\r\n  of any kind concerning the Work, express, implied, statutory or otherwise,\r\n  including without limitation warranties of title, merchantability, fitness\r\n  for a particular purpose, non infringement, or the absence of latent or\r\n  other defects, accuracy, or the present or absence of errors, whether or not\r\n  discoverable, all to the greatest extent permissible under applicable law.\r\n\r\n  c. Affirmer disclaims responsibility for clearing rights of other persons\r\n  that may apply to the Work or any use thereof, including without limitation\r\n  any person's Copyright and Related Rights in the Work. Further, Affirmer\r\n  disclaims responsibility for obtaining any necessary consents, permissions\r\n  or other rights required for any use of the Work.\r\n\r\n  d. Affirmer understands and acknowledges that Creative Commons is not a\r\n  party to this document and has no duty or obligation with respect to this\r\n  CC0 or use of the Work.\r\n\r\nFor more information, please see\r\n<http://creativecommons.org/publicdomain/zero/1.0/>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.5830078125,
          "content": "\n# Gophers....\n\nThe Go gopher was designed by the awesome [Renee French](http://reneefrench.blogspot.com/). Read http://blog.golang.org/gopher for more details.\n\nThe images and art-work in this repository are under [CC0 license](https://creativecommons.org/publicdomain/zero/1.0/).\n\nHowever, if you do use something, you are encouraged to:\n\n* tweet about the used, remixed or printed result @egonelbre\n* submit new ideas via twitter @egonelbre\n* request some sketch to be vectorized\n\nOr if you like to directly support me:\n\n<a target=\"_blank\" href=\"https://www.buymeacoffee.com/egon\"><img alt=\"Buy me a Coffee\" src=\".thumb/animation/buy-morning-coffee-3x.gif\"></a>\n\n<img src=\".thumb/icon/emoji-3x.png \">\n\n<img src=\".thumb/animation/gopher-dance-long-3x.gif \"> <img src=\".thumb/icon/gotham-3x.png \">\n\n<img src=\".thumb/animation/2bit-sprite/demo.gif \">\n\n\n\n# Vector\n\nHere are svg images that can be modified for your own needs.\n\n\n[<img src=\".thumb/vector/adventure/hiking.png\">](vector/adventure/hiking.svg)\n[<img src=\".thumb/vector/arts/ballet.png\">](vector/arts/ballet.svg)\n[<img src=\".thumb/vector/arts/upright.png\">](vector/arts/upright.svg)\n[<img src=\".thumb/vector/computer/gamer.png\">](vector/computer/gamer.svg)\n[<img src=\".thumb/vector/computer/music.png\">](vector/computer/music.svg)\n[<img src=\".thumb/vector/dandy/umbrella.png\">](vector/dandy/umbrella.svg)\n[<img src=\".thumb/vector/fairy-tale/king.png\">](vector/fairy-tale/king.svg)\n[<img src=\".thumb/vector/fairy-tale/knight.png\">](vector/fairy-tale/knight.svg)\n[<img src=\".thumb/vector/fairy-tale/sage.png\">](vector/fairy-tale/sage.svg)\n[<img src=\".thumb/vector/fairy-tale/witch-learning.png\">](vector/fairy-tale/witch-learning.svg)\n[<img src=\".thumb/vector/fairy-tale/witch-too-much-candy.png\">](vector/fairy-tale/witch-too-much-candy.svg)\n[<img src=\".thumb/vector/friends/crash-dummy.png\">](vector/friends/crash-dummy.svg)\n[<img src=\".thumb/vector/friends/docker.png\">](vector/friends/docker.svg)\n[<img src=\".thumb/vector/friends/empire-silhouette.png\">](vector/friends/empire-silhouette.svg)\n[<img src=\".thumb/vector/friends/heart-balloon.png\">](vector/friends/heart-balloon.svg)\n[<img src=\".thumb/vector/friends/heart-hug.png\">](vector/friends/heart-hug.svg)\n[<img src=\".thumb/vector/friends/hugging-docker.png\">](vector/friends/hugging-docker.svg)\n[<img src=\".thumb/vector/friends/liberty.png\">](vector/friends/liberty.svg)\n[<img src=\".thumb/vector/friends/monkfish.png\">](vector/friends/monkfish.svg)\n[<img src=\".thumb/vector/friends/stovepipe-hat-front.png\">](vector/friends/stovepipe-hat-front.svg)\n[<img src=\".thumb/vector/friends/stovepipe-hat.png\">](vector/friends/stovepipe-hat.svg)\n[<img src=\".thumb/vector/party/birthday.png\">](vector/party/birthday.svg)\n[<img src=\".thumb/vector/party/music.png\">](vector/party/music.svg)\n[<img src=\".thumb/vector/projects/emacs-go.png\">](vector/projects/emacs-go.svg)\n[<img src=\".thumb/vector/projects/go-fuzz.png\">](vector/projects/go-fuzz.svg)\n[<img src=\".thumb/vector/projects/go-grpc-web.png\">](vector/projects/go-grpc-web.svg)\n[<img src=\".thumb/vector/projects/network-side.png\">](vector/projects/network-side.svg)\n[<img src=\".thumb/vector/projects/network.png\">](vector/projects/network.svg)\n[<img src=\".thumb/vector/projects/surfing-js.png\">](vector/projects/surfing-js.svg)\n[<img src=\".thumb/vector/projects/vim-go.png\">](vector/projects/vim-go.svg)\n[<img src=\".thumb/vector/projects/with-C-book.png\">](vector/projects/with-C-book.svg)\n[<img src=\".thumb/vector/projects/wwgl.png\">](vector/projects/wwgl.svg)\n[<img src=\".thumb/vector/science/gas-mask.png\">](vector/science/gas-mask.svg)\n[<img src=\".thumb/vector/science/jet-pack.png\">](vector/science/jet-pack.svg)\n[<img src=\".thumb/vector/science/mistake.png\">](vector/science/mistake.svg)\n[<img src=\".thumb/vector/science/power-to-the-linux.png\">](vector/science/power-to-the-linux.svg)\n[<img src=\".thumb/vector/science/power-to-the-mac.png\">](vector/science/power-to-the-mac.svg)\n[<img src=\".thumb/vector/science/power-to-the-masses.png\">](vector/science/power-to-the-masses.svg)\n[<img src=\".thumb/vector/science/rocket.png\">](vector/science/rocket.svg)\n[<img src=\".thumb/vector/science/scientist.png\">](vector/science/scientist.svg)\n[<img src=\".thumb/vector/science/soldering.png\">](vector/science/soldering.svg)\n[<img src=\".thumb/vector/superhero/gotham.png\">](vector/superhero/gotham.svg)\n[<img src=\".thumb/vector/superhero/lifting-1TB.png\">](vector/superhero/lifting-1TB.svg)\n[<img src=\".thumb/vector/superhero/standing.png\">](vector/superhero/standing.svg)\n[<img src=\".thumb/vector/superhero/zorro.png\">](vector/superhero/zorro.svg)\n\n\n\n# Sketches\n\nHere are several hand-drawn images. Let me know if you would like to\nsee a particular one be vectorized.\n\n\n[<img src=\".thumb/sketch/adventure/hiking.png\">](sketch/adventure/hiking.png)\n[<img src=\".thumb/sketch/adventure/pirate-boat.png\">](sketch/adventure/pirate-boat.png)\n[<img src=\".thumb/sketch/adventure/pirate-lifting-goods.png\">](sketch/adventure/pirate-lifting-goods.png)\n[<img src=\".thumb/sketch/adventure/pirate-parroted.png\">](sketch/adventure/pirate-parroted.png)\n[<img src=\".thumb/sketch/adventure/pirate-sword.png\">](sketch/adventure/pirate-sword.png)\n[<img src=\".thumb/sketch/adventure/poking-fire.png\">](sketch/adventure/poking-fire.png)\n[<img src=\".thumb/sketch/adventure/pushing-cart.png\">](sketch/adventure/pushing-cart.png)\n[<img src=\".thumb/sketch/arts/ballet-v2.png\">](sketch/arts/ballet-v2.png)\n[<img src=\".thumb/sketch/arts/ballet.png\">](sketch/arts/ballet.png)\n[<img src=\".thumb/sketch/arts/saxophone.png\">](sketch/arts/saxophone.png)\n[<img src=\".thumb/sketch/convict/chained.png\">](sketch/convict/chained.png)\n[<img src=\".thumb/sketch/convict/hard-times.png\">](sketch/convict/hard-times.png)\n[<img src=\".thumb/sketch/convict/working-hard.png\">](sketch/convict/working-hard.png)\n[<img src=\".thumb/sketch/dandy/raining.png\">](sketch/dandy/raining.png)\n[<img src=\".thumb/sketch/dandy/standing.png\">](sketch/dandy/standing.png)\n[<img src=\".thumb/sketch/dandy/umbrella.png\">](sketch/dandy/umbrella.png)\n[<img src=\".thumb/sketch/fairy-tale/armored-knight.png\">](sketch/fairy-tale/armored-knight.png)\n[<img src=\".thumb/sketch/fairy-tale/king.png\">](sketch/fairy-tale/king.png)\n[<img src=\".thumb/sketch/fairy-tale/messenger-reading.png\">](sketch/fairy-tale/messenger-reading.png)\n[<img src=\".thumb/sketch/fairy-tale/messenger-red-letter.png\">](sketch/fairy-tale/messenger-red-letter.png)\n[<img src=\".thumb/sketch/fairy-tale/messenger-running.png\">](sketch/fairy-tale/messenger-running.png)\n[<img src=\".thumb/sketch/fairy-tale/messenger-showing.png\">](sketch/fairy-tale/messenger-showing.png)\n[<img src=\".thumb/sketch/fairy-tale/princess.png\">](sketch/fairy-tale/princess.png)\n[<img src=\".thumb/sketch/fairy-tale/robin-hood.png\">](sketch/fairy-tale/robin-hood.png)\n[<img src=\".thumb/sketch/fairy-tale/witch-broom.png\">](sketch/fairy-tale/witch-broom.png)\n[<img src=\".thumb/sketch/fairy-tale/witch-cooking.png\">](sketch/fairy-tale/witch-cooking.png)\n[<img src=\".thumb/sketch/fairy-tale/witch-learning.png\">](sketch/fairy-tale/witch-learning.png)\n[<img src=\".thumb/sketch/fairy-tale/witch-old.png\">](sketch/fairy-tale/witch-old.png)\n[<img src=\".thumb/sketch/fairy-tale/witch-too-much-candy.png\">](sketch/fairy-tale/witch-too-much-candy.png)\n[<img src=\".thumb/sketch/friends/docker.png\">](sketch/friends/docker.png)\n[<img src=\".thumb/sketch/friends/hugging-docker-pink.png\">](sketch/friends/hugging-docker-pink.png)\n[<img src=\".thumb/sketch/friends/hugging-docker.png\">](sketch/friends/hugging-docker.png)\n[<img src=\".thumb/sketch/misc/cool-one.png\">](sketch/misc/cool-one.png)\n[<img src=\".thumb/sketch/misc/standing-left.png\">](sketch/misc/standing-left.png)\n[<img src=\".thumb/sketch/misc/standing-v2.png\">](sketch/misc/standing-v2.png)\n[<img src=\".thumb/sketch/misc/with-candy.png\">](sketch/misc/with-candy.png)\n[<img src=\".thumb/sketch/projects/surfing-js.png\">](sketch/projects/surfing-js.jpg)\n[<img src=\".thumb/sketch/projects/with-C-book.png\">](sketch/projects/with-C-book.jpg)\n[<img src=\".thumb/sketch/science/experiment-mishap.png\">](sketch/science/experiment-mishap.png)\n[<img src=\".thumb/sketch/science/jetpack.png\">](sketch/science/jetpack.png)\n[<img src=\".thumb/sketch/science/lightbulb.png\">](sketch/science/lightbulb.png)\n[<img src=\".thumb/sketch/science/power-to-the-masses.png\">](sketch/science/power-to-the-masses.png)\n[<img src=\".thumb/sketch/science/welding.png\">](sketch/science/welding.png)\n[<img src=\".thumb/sketch/superhero/flying.png\">](sketch/superhero/flying.png)\n[<img src=\".thumb/sketch/superhero/getting-ready.png\">](sketch/superhero/getting-ready.png)\n[<img src=\".thumb/sketch/superhero/lifting-1TB.png\">](sketch/superhero/lifting-1TB.png)\n[<img src=\".thumb/sketch/superhero/standing.png\">](sketch/superhero/standing.png)\n\n\n"
        },
        {
          "name": "animation",
          "type": "tree",
          "content": null
        },
        {
          "name": "export-emoji.bat",
          "type": "blob",
          "size": 0.69921875,
          "content": "@set ASESPRITE=f:\\Games\\Steam\\steamapps\\common\\Aseprite\\Aseprite.exe\r\n\r\n%ASESPRITE% -b icon/emoji.ase -scale 3 --format json-array --sheet .thumb/icon/emoji-3x.png --data ~rendered\\emoji-3x.json --sheet-type rows -sheet-width 672\r\ngo run twitterify.go .thumb/icon/emoji-3x.png ~rendered\\emoji-3x-twitter.png\r\n\r\n%ASESPRITE% -b icon/emoji.ase -scale 3 --save-as ~rendered/emoji-3x/gopher-{tag}-{frame}.png\r\n\r\n%ASESPRITE% -b icon/emoji.ase --format json-array --sheet icon/emoji.png --data icon/emoji.json --sheet-type rows -sheet-width 224\r\n\r\n%ASESPRITE% -b icon/emoji.ase --save-as icon/emoji/gopher-{tag}.png{frame}\r\n\r\npushd icon\\emoji\r\ndel *.png\r\nren *.png0 *.png\r\npopd\r\n\r\ngo run normalize-alpha.go icon/emoji/*.png"
        },
        {
          "name": "fix-svg-style.go",
          "type": "blob",
          "size": 4.443359375,
          "content": "// fix-svg-style fixes Inkscape palette to be compatible with Affinity Designer\n//\n\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\n\t\"golang.org/x/net/html\"\n\t\"golang.org/x/net/html/atom\"\n)\n\nfunc main() {\n\terr := filepath.Walk(\"vector\", func(path string, info os.FileInfo, err error) error {\n\t\tif info.IsDir() {\n\t\t\treturn nil\n\t\t}\n\t\tif filepath.Ext(path) == \".svg\" {\n\t\t\treturn ProcessSVGFile(path)\n\t\t}\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc ProcessSVGFile(file string) error {\n\tdata, err := ioutil.ReadFile(file)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tinput := bytes.NewReader(data)\n\tcontext := &html.Node{\n\t\tType: html.ElementNode,\n\t}\n\n\tnodes, err := html.ParseFragment(input, context)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tchanged := ProcessSVG(nodes)\n\n\toutput := bytes.NewBuffer(nil)\n\tfor _, node := range nodes {\n\t\thtml.Render(output, node)\n\t}\n\n\toutdata := output.Bytes()\n\tif changed {\n\t\tfmt.Println(\"Wrinting \", file)\n\t\terr2 := ioutil.WriteFile(file, outdata, 0755)\n\t\tif err2 != nil {\n\t\t\treturn err2\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc ProcessSVG(nodes []*html.Node) bool {\n\tchanged := false\n\n\tgetElementByID := map[string]*html.Node{}\n\tvar process func(node *html.Node)\n\n\trxRemoveStyle := regexp.MustCompile(`(visibility:visible)[;$]`)\n\trxFillStyle := regexp.MustCompile(`fill:url\\((#[a-zA-Z0-9\\-]+)\\)`)\n\trxStrokeStyle := regexp.MustCompile(`stroke:url\\((#[a-zA-Z0-9\\-]+)\\)`)\n\trxStopColor := regexp.MustCompile(`stop-color:([^;]*)[;$]`)\n\n\tresolveColorCache := map[string]string{}\n\tresolveColor := func(id string) string {\n\t\tif cached, ok := resolveColorCache[id]; ok {\n\t\t\treturn cached\n\t\t}\n\n\t\tnode := getElementByID[id]\n\t\tfor {\n\t\t\txlink := GetAttributeValue(node, \"href\")\n\t\t\tif xlink == \"\" {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tnode = getElementByID[xlink[1:]]\n\t\t}\n\n\t\tstops := GetElementsByTagName(node, \"stop\")\n\t\tif len(stops) == 0 {\n\t\t\treturn \"rgba(0,0,0,0)\"\n\t\t}\n\t\tif len(stops) >= 2 {\n\t\t\treturn \"url(#\" + id + \")\"\n\t\t}\n\n\t\tstop := stops[0]\n\t\tstyle := GetAttributeValue(stop, \"style\")\n\t\tmatch := rxStopColor.FindStringSubmatch(style)\n\n\t\tresolveColorCache[id] = match[1]\n\t\treturn match[1]\n\t}\n\n\tprocess = func(node *html.Node) {\n\t\t// build index\n\t\tid := GetAttributeValue(node, \"id\")\n\t\tif id != \"\" {\n\t\t\tgetElementByID[id] = node\n\t\t}\n\n\t\t// recurse\n\t\tfor child := node.FirstChild; child != nil; child = child.NextSibling {\n\t\t\tprocess(child)\n\t\t}\n\n\t\tif style := GetAttribute(node, \"style\"); style != nil {\n\t\t\tstyle.Val = rxRemoveStyle.ReplaceAllString(style.Val, \"\")\n\t\t\tstyle.Val = rxFillStyle.ReplaceAllStringFunc(style.Val, func(attribute string) string {\n\t\t\t\t// fill:url(#xyz)\n\t\t\t\tcolorId := attribute[10 : len(attribute)-1]\n\n\t\t\t\treplacement := \"fill:\" + resolveColor(colorId)\n\t\t\t\tchanged = changed || (replacement != attribute)\n\t\t\t\treturn replacement\n\t\t\t})\n\n\t\t\tstyle.Val = rxStrokeStyle.ReplaceAllStringFunc(style.Val, func(attribute string) string {\n\t\t\t\t// colore:url(#xyz)\n\t\t\t\tcolorId := attribute[12 : len(attribute)-1]\n\n\t\t\t\treplacement := \"stroke:\" + resolveColor(colorId)\n\t\t\t\tchanged = changed || (replacement != attribute)\n\t\t\t\treturn replacement\n\t\t\t})\n\t\t}\n\t}\n\n\tfor _, node := range nodes {\n\t\tprocess(node)\n\t}\n\n\t// remove all dead gradients\n\tfor _, node := range nodes {\n\t\tdefss := GetElementsByTagName(node, \"defs\")\n\t\tfor _, defs := range defss {\n\t\t\ttoRemove := []*html.Node{}\n\t\t\tfor child := defs.FirstChild; child != nil; child = child.NextSibling {\n\t\t\t\tif child.Data == \"linearGradient\" {\n\t\t\t\t\tid := GetAttributeValue(child, \"id\")\n\t\t\t\t\tnoReplacement := \"url(#\" + id + \")\"\n\t\t\t\t\tif noReplacement != resolveColor(id) {\n\t\t\t\t\t\ttoRemove = append(toRemove, child)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor _, child := range toRemove {\n\t\t\t\tchanged = true\n\t\t\t\tdefs.RemoveChild(child)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn changed\n}\n\nfunc GetAttributeValue(node *html.Node, name string) string {\n\tfor i := range node.Attr {\n\t\tif node.Attr[i].Key == name {\n\t\t\treturn node.Attr[i].Val\n\t\t}\n\t}\n\treturn \"\"\n}\n\nfunc GetAttribute(node *html.Node, name string) *html.Attribute {\n\tfor i := range node.Attr {\n\t\tif node.Attr[i].Key == name {\n\t\t\treturn &node.Attr[i]\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc GetElementsByTagName(node *html.Node, tagname string) []*html.Node {\n\txs := []*html.Node{}\n\n\tdataAtom := atom.Lookup([]byte(tagname))\n\tif dataAtom != 0 {\n\t\ttagname = \"\"\n\t}\n\n\tfor child := node.FirstChild; child != nil; child = child.NextSibling {\n\t\tif child.Type != html.ElementNode {\n\t\t\tcontinue\n\t\t}\n\t\tif child.DataAtom == dataAtom && child.Data == tagname {\n\t\t\txs = append(xs, child)\n\t\t\tcontinue\n\t\t}\n\t}\n\treturn xs\n}\n\nfunc check(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"
        },
        {
          "name": "icon",
          "type": "tree",
          "content": null
        },
        {
          "name": "normalize-alpha.go",
          "type": "blob",
          "size": 2.0361328125,
          "content": "package main\n\nimport (\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"image\"\n\t\"image/png\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc handleFile(name string) error {\n\tvar source *image.NRGBA\n\t{\n\t\tfile, err := os.Open(name)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tm, err := png.Decode(file)\n\t\tif err != nil {\n\t\t\tfile.Close()\n\t\t\treturn err\n\t\t}\n\t\tfile.Close()\n\n\t\tif rgba, ok := m.(*image.NRGBA); !ok {\n\t\t\treturn errors.New(\"not RGBA\")\n\t\t} else {\n\t\t\tsource = rgba\n\t\t}\n\t}\n\n\tbackground := [4]uint8{0, 0, 0, 0}\n\tif source.Pix[3] == 0 {\n\t\tcopy(background[:], source.Pix[:4])\n\t}\n\n\tfor i := 0; i < len(source.Pix); i += 4 {\n\t\tif source.Pix[i+3] == 0 {\n\t\t\tcopy(source.Pix[i:i+4], background[:])\n\t\t}\n\t}\n\n\t{\n\t\tfile, err := os.Create(name)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer file.Close()\n\n\t\tif err := png.Encode(file, source); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tif flag.Arg(0) == \"\" {\n\t\tflag.Usage()\n\t\tos.Exit(1)\n\t}\n\n\tmatches, err := filepath.Glob(flag.Arg(0))\n\tcheck(err)\n\tfor _, match := range matches {\n\t\terr := handleFile(match)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"%v: %v\\n\", match, err)\n\t\t}\n\t}\n\t/*\n\t\tinfile, err := os.Open(flag.Arg(0))\n\t\tcheck(err)\n\t\tdefer infile.Close()\n\n\t\tatlasfile, err := os.Open(flag.Arg(1))\n\t\tcheck(err)\n\t\tdefer atlasfile.Close()\n\n\t\tsource, err := png.Decode(infile)\n\t\tcheck(err)\n\n\t\tvar atlas Atlas\n\t\tcheck(json.NewDecoder(atlasfile).Decode(&atlas))\n\n\t\tfor _, frametag := range atlas.Meta.FrameTags {\n\t\t\tframe := atlas.Frames[frametag.From].Frame\n\n\t\t\ttarget := image.NewRGBA(image.Rect(0, 0, frame.W, frame.H))\n\t\t\tif !*transparent {\n\t\t\t\tdraw.Draw(target, target.Bounds(), &image.Uniform{color.White}, image.ZP, draw.Src)\n\t\t\t}\n\n\t\t\tdraw.Draw(target, target.Bounds(), source, image.Pt(frame.X, frame.Y), draw.Src)\n\n\t\t\toutname := filepath.Join(flag.Arg(2), \"gopher-\"+frametag.Name+\".png\")\n\t\t\tos.MkdirAll(filepath.Dir(outname), 0755)\n\t\t\toutfile, err := os.Create(outname)\n\t\t\tcheck(err)\n\t\t\tcheck(png.Encode(outfile, target))\n\t\t\toutfile.Close()\n\t\t}\n\t*/\n}\n\nfunc check(err error) {\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"failed: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "sketch",
          "type": "tree",
          "content": null
        },
        {
          "name": "split-sheet.go",
          "type": "blob",
          "size": 1.609375,
          "content": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"golang.org/x/image/draw\"\n)\n\ntype Atlas struct {\n\tFrames []Frame\n\tMeta   Meta\n}\n\ntype Frame struct {\n\tFrame struct {\n\t\tX, Y, W, H int\n\t}\n}\n\ntype Meta struct {\n\tFrameTags []FrameTag\n}\n\ntype FrameTag struct {\n\tName string\n\tFrom int\n}\n\nvar (\n\tfolder      = flag.String(\"folder\", \"\", \"output folder\")\n\ttransparent = flag.Bool(\"transparent\", true, \"transparent background\")\n)\n\nfunc handlePng(infile io.Reader, outfile io.Writer) error {\n\n\treturn nil\n}\nfunc main() {\n\tflag.Parse()\n\n\tif flag.Arg(0) == \"\" || flag.Arg(1) == \"\" || flag.Arg(2) == \"\" {\n\t\tflag.Usage()\n\t\tos.Exit(1)\n\t}\n\n\tinfile, err := os.Open(flag.Arg(0))\n\tcheck(err)\n\tdefer infile.Close()\n\n\tatlasfile, err := os.Open(flag.Arg(1))\n\tcheck(err)\n\tdefer atlasfile.Close()\n\n\tsource, err := png.Decode(infile)\n\tcheck(err)\n\n\tvar atlas Atlas\n\tcheck(json.NewDecoder(atlasfile).Decode(&atlas))\n\n\tfor _, frametag := range atlas.Meta.FrameTags {\n\t\tframe := atlas.Frames[frametag.From].Frame\n\n\t\ttarget := image.NewRGBA(image.Rect(0, 0, frame.W, frame.H))\n\t\tif !*transparent {\n\t\t\tdraw.Draw(target, target.Bounds(), &image.Uniform{color.White}, image.ZP, draw.Src)\n\t\t}\n\n\t\tdraw.Draw(target, target.Bounds(), source, image.Pt(frame.X, frame.Y), draw.Src)\n\n\t\toutname := filepath.Join(flag.Arg(2), \"gopher-\"+frametag.Name+\".png\")\n\t\tos.MkdirAll(filepath.Dir(outname), 0755)\n\t\toutfile, err := os.Create(outname)\n\t\tcheck(err)\n\t\tcheck(png.Encode(outfile, target))\n\t\toutfile.Close()\n\t}\n}\n\nfunc check(err error) {\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"failed: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "twitterify.go",
          "type": "blob",
          "size": 4.0498046875,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/gif\"\n\t\"image/png\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"golang.org/x/image/draw\"\n)\n\nvar (\n\twidth       = flag.Int(\"width\", 506, \"target min width\")\n\theight      = flag.Int(\"height\", 128, \"target min height\")\n\trepeat      = flag.Int(\"repeat\", 3, \"repeat count\")\n\ttransparent = flag.Bool(\"transparent\", false, \"transparent background\")\n\tduplicate   = flag.Bool(\"duplicate\", false, \"use duplication instead of repeating animation\")\n\tduration    = flag.Int(\"duration\", 0, \"override frame duration\")\n)\n\nfunc handleGif(infile io.Reader, outfile io.Writer) error {\n\t// TODO: fix handling of different disposals\n\n\tsource, err := gif.DecodeAll(infile)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to decode gif: %v\", err)\n\t}\n\n\tsize := image.Pt(source.Config.Width, source.Config.Height)\n\tif size.X < *width {\n\t\tsize.X = *width\n\t}\n\tif size.Y < *height {\n\t\tsize.Y = *height\n\t}\n\n\tvar target gif.GIF\n\ttarget.Config = source.Config\n\ttarget.Config.Width = size.X\n\ttarget.Config.Height = size.Y\n\n\ttarget.LoopCount = source.LoopCount\n\ttarget.BackgroundIndex = source.BackgroundIndex\n\n\toffset := image.Pt(\n\t\tsize.X/2-source.Config.Width/2,\n\t\tsize.Y/2-source.Config.Height/2,\n\t)\n\n\tfor i, m := range source.Image {\n\t\td := image.NewPaletted(image.Rectangle{image.ZP, size}, m.Palette)\n\t\tif !*transparent {\n\t\t\tfor k := range d.Pix {\n\t\t\t\td.Pix[k] = m.Pix[0]\n\t\t\t}\n\t\t}\n\t\tdraw.Draw(d, m.Bounds().Add(offset), m, image.ZP, draw.Over)\n\n\t\tdelay := source.Delay[i]\n\t\tif *duration > 0 {\n\t\t\tdelay = *duration\n\t\t}\n\n\t\tif *duplicate {\n\t\t\ttarget.Image = append(target.Image, d)\n\t\t\ttarget.Delay = append(target.Delay, delay/2)\n\t\t\tif len(source.Disposal) > 0 {\n\t\t\t\ttarget.Disposal = append(target.Disposal, source.Disposal[i])\n\t\t\t}\n\t\t\tif i != len(source.Image)-1 {\n\t\t\t\ttarget.Image = append(target.Image, d)\n\t\t\t\ttarget.Delay = append(target.Delay, delay/2)\n\t\t\t\tif len(source.Disposal) > 0 {\n\t\t\t\t\ttarget.Disposal = append(target.Disposal, source.Disposal[i])\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\ttarget.Image = append(target.Image, d)\n\t\t\ttarget.Delay = append(target.Delay, delay)\n\t\t\tif len(source.Disposal) > 0 {\n\t\t\t\ttarget.Disposal = append(target.Disposal, source.Disposal[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tif !*duplicate {\n\t\tn := len(source.Image)\n\t\tfor k := 1; k < *repeat; k++ {\n\t\t\tfor i := 0; i < n; i++ {\n\t\t\t\ttarget.Image = append(target.Image, target.Image[i])\n\t\t\t\ttarget.Delay = append(target.Delay, target.Delay[i])\n\t\t\t\tif len(target.Disposal) > 0 {\n\t\t\t\t\ttarget.Disposal = append(target.Disposal, target.Disposal[i])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\terr = gif.EncodeAll(outfile, &target)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode to gif: %v\", err)\n\t}\n\n\treturn nil\n}\n\nfunc handlePng(infile io.Reader, outfile io.Writer) error {\n\tsource, err := png.Decode(infile)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to decode png: %v\", err)\n\t}\n\n\tsize := source.Bounds().Size()\n\tif size.X < *width {\n\t\tsize.X = *width\n\t}\n\tif size.Y < *height {\n\t\tsize.Y = *height\n\t}\n\n\toffset := image.Pt(\n\t\tsize.X/2-source.Bounds().Dx()/2,\n\t\tsize.Y/2-source.Bounds().Dy()/2,\n\t)\n\n\ttarget := image.NewRGBA(image.Rectangle{image.ZP, size})\n\tif !*transparent {\n\t\tdraw.Draw(target, target.Bounds(), &image.Uniform{color.White}, image.ZP, draw.Over)\n\t}\n\tdraw.Draw(target, source.Bounds().Add(offset), source, image.ZP, draw.Over)\n\n\terr = png.Encode(outfile, target)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to encode to png: %v\", err)\n\t}\n\n\treturn nil\n}\nfunc main() {\n\tflag.Parse()\n\n\tif flag.Arg(0) == \"\" || flag.Arg(1) == \"\" {\n\t\tflag.Usage()\n\t\tos.Exit(1)\n\t}\n\n\tinfile, err := os.Open(flag.Arg(0))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"%v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer infile.Close()\n\n\toutfile, err := os.Create(flag.Arg(1))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"%v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer outfile.Close()\n\n\tswitch filepath.Ext(flag.Arg(0)) {\n\tcase \".gif\":\n\t\terr := handleGif(infile, outfile)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"failed twitterifying gif: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\tcase \".png\":\n\t\terr := handlePng(infile, outfile)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"failed twitterifying png: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "update.go",
          "type": "blob",
          "size": 10.4296875,
          "content": "package main\r\n\r\nimport (\r\n\t\"bytes\"\r\n\t\"errors\"\r\n\t\"fmt\"\r\n\t\"io/ioutil\"\r\n\t\"log\"\r\n\t\"os\"\r\n\t\"os/exec\"\r\n\t\"path/filepath\"\r\n\t\"sort\"\r\n\t\"strconv\"\r\n\t\"strings\"\r\n\r\n\t\"image\"\r\n\t\"image/jpeg\"\r\n\t\"image/png\"\r\n\r\n\t\"golang.org/x/image/draw\"\r\n)\r\n\r\nconst (\r\n\tThumbnailSize = 128\r\n\tMaxColumns    = 6\r\n\r\n\tInkscapePath = `c:\\Program Files\\Inkscape\\inkscape.exe`\r\n)\r\n\r\nconst README_HEADER = `\r\n# Gophers....\r\n\r\nThe Go gopher was designed by the awesome [Renee French](http://reneefrench.blogspot.com/). Read http://blog.golang.org/gopher for more details.\r\n\r\nThe images and art-work in this repository are under [CC0 license](https://creativecommons.org/publicdomain/zero/1.0/).\r\n\r\nHowever, if you do use something, you are encouraged to:\r\n\r\n* tweet about the used, remixed or printed result @egonelbre\r\n* submit new ideas via twitter @egonelbre\r\n* request some sketch to be vectorized\r\n\r\nOr if you like to directly support me:\r\n\r\n<a target=\"_blank\" href=\"https://www.buymeacoffee.com/egon\"><img alt=\"Buy me a Coffee\" src=\".thumb/animation/buy-morning-coffee-3x.gif\"></a>\r\n\r\n<img src=\".thumb/icon/emoji-3x.png \">\r\n\r\n<img src=\".thumb/animation/gopher-dance-long-3x.gif \"> <img src=\".thumb/icon/gotham-3x.png \">\r\n\r\n<img src=\".thumb/animation/2bit-sprite/demo.gif \">\r\n\r\n`\r\n\r\nconst VECTOR_HEADER = `\r\n# Vector\r\n\r\nHere are svg images that can be modified for your own needs.\r\n\r\n`\r\n\r\nconst SKETCHES_HEADER = `\r\n# Sketches\r\n\r\nHere are several hand-drawn images. Let me know if you would like to\r\nsee a particular one be vectorized.\r\n\r\n`\r\n\r\ntype ImageLink struct {\r\n\tThumb  string\r\n\tActual string\r\n\tBounds image.Rectangle\r\n}\r\n\r\ntype Collage struct {\r\n\tImage *image.RGBA\r\n\tX, Y  int\r\n\r\n\tColumnsPerRow int\r\n\tCellSize      int\r\n\r\n\tName   string\r\n\tOutput string\r\n\tFolder string\r\n\tLinks  []ImageLink\r\n}\r\n\r\nfunc NewCollage(count, columnsPerRow, cellSize int) *Collage {\r\n\tif count < columnsPerRow {\r\n\t\tcolumnsPerRow = count\r\n\t}\r\n\r\n\trowCount := (count + columnsPerRow - 1) / columnsPerRow\r\n\tbounds := image.Rect(0, 0, columnsPerRow*cellSize, rowCount*cellSize)\r\n\tcollage := &Collage{\r\n\t\tImage: image.NewRGBA(bounds),\r\n\t\tX:     0, Y: 0,\r\n\t\tColumnsPerRow: columnsPerRow,\r\n\t\tCellSize:      cellSize,\r\n\t}\r\n\r\n\tdraw.Draw(collage.Image, collage.Image.Bounds(), image.White, image.ZP, draw.Src)\r\n\r\n\treturn collage\r\n}\r\n\r\nfunc (collage *Collage) Bounds(x, y int) image.Rectangle {\r\n\tx0 := x * collage.CellSize\r\n\ty0 := y * collage.CellSize\r\n\treturn image.Rect(x0, y0, x0+collage.CellSize, y0+collage.CellSize)\r\n}\r\n\r\nfunc (collage *Collage) Draw(path string, m image.Image) {\r\n\tframe := collage.Bounds(collage.X, collage.Y)\r\n\tcollage.Links = append(collage.Links, ImageLink{\r\n\t\tActual: path,\r\n\t\tBounds: frame,\r\n\t})\r\n\r\n\tinner := FitBoundsIntoFrame(m.Bounds(), frame)\r\n\tdraw.CatmullRom.Scale(collage.Image, inner, m, m.Bounds(), draw.Over, nil)\r\n\r\n\tcollage.X++\r\n\tif collage.X >= collage.ColumnsPerRow {\r\n\t\tcollage.X = 0\r\n\t\tcollage.Y++\r\n\t}\r\n}\r\n\r\nfunc MakeCollage(name, folder, output string) *Collage {\r\n\tlog.Printf(\"Creating collage\\n\")\r\n\tlog.Printf(\"> name  : %v\\n\", name)\r\n\tlog.Printf(\"> folder: %v\\n\", folder)\r\n\tlog.Printf(\"> save  : %v\\n\", output)\r\n\r\n\tfiles, err := ioutil.ReadDir(folder)\r\n\tif err != nil {\r\n\t\tlog.Printf(\"> ERROR: %v\\n\", err)\r\n\t\treturn nil\r\n\t}\r\n\r\n\tif len(files) == 0 {\r\n\t\tlog.Printf(\"> error: no files\\n\")\r\n\t\treturn nil\r\n\t}\r\n\r\n\tsort.Sort(FileInfos(files))\r\n\r\n\tcollage := NewCollage(len(files), MaxColumns, ThumbnailSize)\r\n\tcollage.Name = name\r\n\tcollage.Output = output\r\n\tcollage.Folder = folder\r\n\tfor _, file := range files {\r\n\t\tpath := filepath.Join(folder, file.Name())\r\n\t\tlog.Printf(\"> add: %v\\n\", path)\r\n\t\tm, err := LoadImage(path)\r\n\t\tif err != nil {\r\n\t\t\tlog.Printf(\"> error: %v\\n\", err)\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tcollage.Draw(path, m)\r\n\t}\r\n\r\n\tif err := SaveImage(collage.Image, output); err != nil {\r\n\t\tlog.Printf(\"> ERROR: %v\\n\", err)\r\n\t}\r\n\r\n\treturn collage\r\n}\r\n\r\ntype Thumbs struct {\r\n\tSize   int\r\n\tName   string\r\n\tOutput string\r\n\tFolder string\r\n\tLinks  []ImageLink\r\n}\r\n\r\nfunc (thumbs *Thumbs) ExportSVG(actual, out string) {\r\n\tos.MkdirAll(filepath.Dir(out), 0755)\r\n\tos.Remove(out)\r\n\r\n\t// inkscape -h 128 -e hiking.png hiking.svg\r\n\tcmd := exec.Command(InkscapePath,\r\n\t\t\"-h\", strconv.Itoa(thumbs.Size),\r\n\t\t\"-e\", out,\r\n\t\tactual)\r\n\tcmd.Run()\r\n\r\n\tthumbs.Links = append(thumbs.Links, ImageLink{\r\n\t\tActual: actual,\r\n\t\tThumb:  out,\r\n\t})\r\n}\r\n\r\nfunc (thumbs *Thumbs) Downscale(actual, out string, m image.Image) image.Image {\r\n\ttargetSize := image.Point{0, thumbs.Size}\r\n\ttargetSize.X = m.Bounds().Dx() * thumbs.Size / m.Bounds().Dy()\r\n\tinner := image.Rectangle{image.ZP, targetSize}\r\n\r\n\tthumbs.Links = append(thumbs.Links, ImageLink{\r\n\t\tActual: actual,\r\n\t\tThumb:  out,\r\n\t\tBounds: inner,\r\n\t})\r\n\r\n\trgba := image.NewRGBA(inner)\r\n\tdraw.CatmullRom.Scale(rgba, rgba.Bounds(), m, m.Bounds(), draw.Over, nil)\r\n\r\n\treturn rgba\r\n}\r\n\r\nfunc MakeThumbs(name, folder, output string) *Thumbs {\r\n\tlog.Printf(\"Creating thumbs\\n\")\r\n\tlog.Printf(\"> name  : %v\\n\", name)\r\n\tlog.Printf(\"> folder: %v\\n\", folder)\r\n\tlog.Printf(\"> save  : %v\\n\", output)\r\n\r\n\tfiles, err := ioutil.ReadDir(folder)\r\n\tif err != nil {\r\n\t\tlog.Printf(\"> ERROR: %v\\n\", err)\r\n\t\treturn nil\r\n\t}\r\n\r\n\tif len(files) == 0 {\r\n\t\tlog.Printf(\"> error: no files\\n\")\r\n\t\treturn nil\r\n\t}\r\n\r\n\tsort.Sort(FileInfos(files))\r\n\r\n\tthumbs := &Thumbs{}\r\n\tthumbs.Size = ThumbnailSize\r\n\tthumbs.Name = name\r\n\tthumbs.Output = output\r\n\tthumbs.Folder = folder\r\n\r\n\tfor _, file := range files {\r\n\t\tif strings.Contains(file.Name(), \".sheet.\") {\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tpath := filepath.Join(folder, file.Name())\r\n\t\tlog.Printf(\"> add: %v\\n\", path)\r\n\r\n\t\toutpath := filepath.Join(output, file.Name())\r\n\t\toutpath = ReplaceExt(outpath, \".png\")\r\n\r\n\t\tif filepath.Ext(path) == \".svg\" {\r\n\t\t\tthumbs.ExportSVG(path, outpath)\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tm, err := LoadImage(path)\r\n\t\tif err != nil {\r\n\t\t\tlog.Printf(\"> error: %v\\n\", err)\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tout := thumbs.Downscale(path, outpath, m)\r\n\t\tif err := SavePNG(out, outpath); err != nil {\r\n\t\t\tlog.Printf(\"> error: %v\\n\", err)\r\n\t\t\tcontinue\r\n\t\t}\r\n\t}\r\n\r\n\treturn thumbs\r\n}\r\n\r\nfunc main() {\r\n\tdirs, _ := ioutil.ReadDir(\"sketch\")\r\n\tsort.Sort(FileInfos(dirs))\r\n\r\n\tsketches := []*Thumbs{}\r\n\tfor _, dir := range dirs {\r\n\t\tif !dir.IsDir() {\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tthumbs := MakeThumbs(\r\n\t\t\tstrings.Title(dir.Name()),\r\n\t\t\tfilepath.Join(\"sketch\", dir.Name()),\r\n\t\t\tfilepath.Join(\".thumb\", \"sketch\", dir.Name()))\r\n\r\n\t\tif thumbs != nil {\r\n\t\t\tsketches = append(sketches, thumbs)\r\n\t\t}\r\n\t}\r\n\r\n\tdirs, _ = ioutil.ReadDir(\"vector\")\r\n\tsort.Sort(FileInfos(dirs))\r\n\r\n\tvectors := []*Thumbs{}\r\n\tfor _, dir := range dirs {\r\n\t\tif !dir.IsDir() {\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tthumbs := MakeThumbs(\r\n\t\t\tstrings.Title(dir.Name()),\r\n\t\t\tfilepath.Join(\"vector\", dir.Name()),\r\n\t\t\tfilepath.Join(\".thumb\", \"vector\", dir.Name()))\r\n\r\n\t\tif thumbs != nil {\r\n\t\t\tvectors = append(vectors, thumbs)\r\n\t\t}\r\n\t}\r\n\r\n\tfile, err := os.Create(\"README.md\")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer file.Close()\r\n\r\n\tfmt.Fprintf(file, \"%v\\n\", README_HEADER)\r\n\r\n\tfmt.Fprintf(file, \"%v\\n\", VECTOR_HEADER)\r\n\tfile.Write(CreateThumbsIndex(false, vectors))\r\n\r\n\tfmt.Fprintf(file, \"%v\\n\", SKETCHES_HEADER)\r\n\tfile.Write(CreateThumbsIndex(false, sketches))\r\n}\r\n\r\nfunc CreateThumbsIndex(withtitle bool, thumbsets []*Thumbs) []byte {\r\n\tvar buf bytes.Buffer\r\n\r\n\tfor _, thumbs := range thumbsets {\r\n\t\tif withtitle {\r\n\t\t\tfmt.Fprintf(&buf, \"\\n### [%v](%v)\\n\\n\",\r\n\t\t\t\tthumbs.Name,\r\n\t\t\t\tfilepath.ToSlash(thumbs.Folder))\r\n\t\t}\r\n\r\n\t\tfor _, thumb := range thumbs.Links {\r\n\t\t\tfmt.Fprintf(&buf, \"[<img src=\\\"%v\\\">](%v)\\n\",\r\n\t\t\t\tfilepath.ToSlash(thumb.Thumb),\r\n\t\t\t\tfilepath.ToSlash(thumb.Actual))\r\n\t\t}\r\n\t}\r\n\tfmt.Fprintf(&buf, \"\\n\\n\")\r\n\r\n\treturn buf.Bytes()\r\n}\r\n\r\nfunc CreateCollageIndex(withtitle bool, collages []*Collage) []byte {\r\n\tvar buf bytes.Buffer\r\n\tfor _, collage := range collages {\r\n\t\tif withtitle {\r\n\t\t\tfmt.Fprintf(&buf, \"\\n### [%v](%v)\\n\\n\",\r\n\t\t\t\tcollage.Name,\r\n\t\t\t\tfilepath.ToSlash(collage.Folder))\r\n\t\t}\r\n\r\n\t\tfmt.Fprintf(&buf, \"[<img src=\\\"%v\\\">](%v)\\n\",\r\n\t\t\tfilepath.ToSlash(collage.Output),\r\n\t\t\tfilepath.ToSlash(collage.Folder))\r\n\r\n\t\t/*\r\n\t\t\tfmt.Fprintf(&buf, \"<div>\\n\")\r\n\t\t\tfmt.Fprintf(&buf, \"  <img src=\\\"%v\\\" usemap=\\\"#%v\\\" />\\n\", , collage.Name)\r\n\t\t\tfmt.Fprintf(&buf, \"  <map name=\\\"%v\\\">\\n\", collage.Name)\r\n\t\t\tfor _, link := range collage.Links {\r\n\t\t\t\tr := link.Bounds\r\n\t\t\t\tfmt.Fprintf(&buf, \"    <area shape=\\\"rect\\\" \")\r\n\t\t\t\tfmt.Fprintf(&buf, \"coords=\\\"%v,%v,%v,%v\\\" \", r.Min.X, r.Min.Y, r.Max.X, r.Max.Y)\r\n\t\t\t\tfmt.Fprintf(&buf, \"href=\\\"%v\\\" \", filepath.ToSlash(link.Actual))\r\n\t\t\t\tfmt.Fprintf(&buf, \">\\n\")\r\n\t\t\t}\r\n\t\t\tfmt.Fprintf(&buf, \"  </map>\\n\")\r\n\t\t\tfmt.Fprintf(&buf, \"</div>\\n\\n\")\r\n\t\t*/\r\n\t}\r\n\r\n\treturn buf.Bytes()\r\n}\r\n\r\n/* geometry */\r\n\r\nfunc FitBoundsIntoFrame(bounds, frame image.Rectangle) image.Rectangle {\r\n\tsize := bounds.Size()\r\n\tframeSize := frame.Size()\r\n\ttargetSize := image.Point{}\r\n\r\n\taspect := float64(size.X) / float64(size.Y)\r\n\r\n\tif aspect < 1.0 { // x is smaller\r\n\t\ttargetSize.X = frameSize.Y * size.X / size.Y\r\n\t\ttargetSize.Y = frameSize.Y\r\n\t} else { // y is smaller\r\n\t\ttargetSize.X = frameSize.X\r\n\t\ttargetSize.Y = frameSize.X * size.Y / size.X\r\n\t}\r\n\r\n\tframeCenter := frame.Min.Add(frameSize.Div(2))\r\n\tx0 := frameCenter.X - targetSize.X/2\r\n\tx1 := frameCenter.X + targetSize.X/2\r\n\r\n\ty0 := frame.Max.Y - targetSize.Y\r\n\ty1 := frame.Max.Y\r\n\r\n\treturn image.Rectangle{\r\n\t\tMin: image.Point{x0, y0},\r\n\t\tMax: image.Point{x1, y1},\r\n\t}\r\n}\r\n\r\n/* basic file utilties */\r\n\r\ntype FileInfos []os.FileInfo\r\n\r\nfunc (xs FileInfos) Len() int      { return len(xs) }\r\nfunc (xs FileInfos) Swap(i, k int) { xs[i], xs[k] = xs[k], xs[i] }\r\nfunc (xs FileInfos) Less(i, k int) bool {\r\n\treturn xs[i].Name() < xs[k].Name()\r\n}\r\n\r\nfunc LoadImage(path string) (image.Image, error) {\r\n\tfile, err := os.Open(path)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tdefer file.Close()\r\n\r\n\tm, _, err := image.Decode(file)\r\n\treturn m, err\r\n}\r\n\r\nfunc ReplaceExt(path, ext string) string {\r\n\treturn path[:len(path)-len(filepath.Ext(path))] + ext\r\n}\r\n\r\nfunc SaveImage(m image.Image, path string) error {\r\n\tswitch filepath.Ext(path) {\r\n\tcase \".jpg\":\r\n\t\treturn SaveJPG(m, path)\r\n\tcase \".png\":\r\n\t\treturn SavePNG(m, path)\r\n\t}\r\n\treturn errors.New(\"unknown output format\")\r\n}\r\n\r\nfunc SaveJPG(m image.Image, path string) error {\r\n\tos.MkdirAll(filepath.Dir(path), 0755)\r\n\tpath = ReplaceExt(path, \".jpg\")\r\n\r\n\tfile, err := os.Create(path)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tdefer file.Close()\r\n\treturn jpeg.Encode(file, m, &jpeg.Options{Quality: 90})\r\n}\r\n\r\nfunc SavePNG(m image.Image, path string) error {\r\n\tos.MkdirAll(filepath.Dir(path), 0755)\r\n\tpath = ReplaceExt(path, \".png\")\r\n\r\n\tpath = path[:len(path)-len(filepath.Ext(path))] + \".png\"\r\n\tfile, err := os.Create(path)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tdefer file.Close()\r\n\r\n\treturn png.Encode(file, m)\r\n}\r\n"
        },
        {
          "name": "vector",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}