{
  "metadata": {
    "timestamp": 1736566791226,
    "page": 353,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "charmbracelet/freeze",
      "stars": 3538,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2080078125,
          "content": "examples/*.svg filter=lfs diff=lfs merge=lfs -text\ntapes/*.gif filter=lfs diff=lfs merge=lfs -text\ntest/output/**/*.png filter=lfs diff=lfs merge=lfs -text\ntest/golden/**/*.png filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.078125,
          "content": "*.svg\n*.png\n!test/golden/**/*.svg\n!test/golden/**/*.png\n!examples/*.svg\n/result\n"
        },
        {
          "name": ".golangci-soft.yml",
          "type": "blob",
          "size": 0.55859375,
          "content": "run:\n  tests: false\n\nissues:\n  include:\n    - EXC0001\n    - EXC0005\n    - EXC0011\n    - EXC0012\n    - EXC0013\n\n  max-issues-per-linter: 0\n  max-same-issues: 0\n\nlinters:\n  enable:\n    - exhaustive\n    - goconst\n    - godot\n    - godox\n    - gomoddirectives\n    - goprintffuncname\n    - misspell\n    - nakedret\n    - nestif\n    - noctx\n    - nolintlint\n    - prealloc\n    - wrapcheck\n\n  # disable default linters, they are already enabled in .golangci.yml\n  disable:\n    - errcheck\n    - gosimple\n    - govet\n    - ineffassign\n    - staticcheck\n    - typecheck\n    - unused\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.3603515625,
          "content": "run:\n  tests: false\n\nissues:\n  include:\n    - EXC0001\n    - EXC0005\n    - EXC0011\n    - EXC0012\n    - EXC0013\n\n  max-issues-per-linter: 0\n  max-same-issues: 0\n\nlinters:\n  enable:\n    - bodyclose\n    - goimports\n    - gosec\n    - nilerr\n    - predeclared\n    - revive\n    - rowserrcheck\n    - sqlclosecheck\n    - tparallel\n    - unconvert\n    - unparam\n    - whitespace\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 0.3447265625,
          "content": "includes:\n  - from_url:\n      url: charmbracelet/meta/main/goreleaser-simple.yaml\n\nvariables:\n  main: \".\"\n  description: \"Generate images of code and terminal output.\"\n  github_url: \"https://github.com/charmbracelet/freeze\"\n  maintainer: \"Maas Lalani <maas@charm.sh>\"\n  brew_commit_author_name: \"Maas Lalani\"\n  brew_commit_author_email: \"maas@charm.sh\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2024 Charmbracelet, Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.0751953125,
          "content": ".PHONY: test\n\ntest:\n\tgo test ./...\n\ngolden:\n\tcp -r test/output/* test/golden\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.455078125,
          "content": "# Freeze\n\n<p>\n  <a href=\"https://stuff.charm.sh/freeze/freeze-4k.png\"><img src=\"https://github.com/charmbracelet/freeze/assets/25087/de76b799-fa67-4b5b-8da2-d990ca5b4e06\" width=\"500\" /></a><br>\n  <a href=\"https://github.com/charmbracelet/freeze/releases\"><img src=\"https://img.shields.io/github/release/charmbracelet/freeze.svg\" alt=\"Latest Release\"></a>\n  <a href=\"https://github.com/charmbracelet/freeze/actions\"><img src=\"https://github.com/charmbracelet/freeze/workflows/build/badge.svg\" alt=\"Build Status\"></a>\n</p>\n\nGenerate images of code and terminal output.\n\n<p align=\"left\">\n  <a><img width=\"600\" src=\"https://vhs.charm.sh/vhs-1C6z5SUKlTdqdj4KL1ADlH.gif\" alt=\"Freeze code screenshot\"></a>\n</p>\n\n## Examples\n\nFreeze generates PNGs, SVGs, and WebPs of code and terminal output alike.\n\n### Generate an image of code\n\n```sh\nfreeze artichoke.hs -o artichoke.png\n```\n\n<p align=\"center\">\n  <a href=\"https://github.com/charmbracelet/freeze/assets/42545625/f15efdda-8e9b-4cb1-9e87-3d32b692eb7c\">\n    <img alt=\"output of freeze command, Haskell code block\" src=\"./test/golden/svg/shadow.svg\" width=\"800\" />\n  </a>\n</p>\n\n### Generate an image of terminal output\n\nYou can use `freeze` to capture ANSI output of a terminal command with the\n`--execute` flag.\n\n```bash\nfreeze --execute \"eza -lah\"\n```\n\n<p align=\"center\">\n  <a href=\"https://github.com/charmbracelet/freeze/assets/42545625/aa5447ed-999a-4809-909d-67093d758f5a\">\n    <img alt=\"output of freeze command, ANSI\" src=\"./test/golden/svg/eza.svg\" width=\"800\" />\n  </a>\n</p>\n\nFreeze is also [super customizable](#customization) and ships with an [interactive TUI](#interactive-mode).\n\n## Installation\n\n```sh\n# macOS or Linux\nbrew install charmbracelet/tap/freeze\n\n# Arch Linux (btw)\nyay -S freeze\n\n# Nix\nnix-env -iA nixpkgs.charm-freeze\n```\n\nOr, download it:\n\n- [Packages][releases] are available in Debian and RPM formats\n- [Binaries][releases] are available for Linux, macOS, and Windows\n\nOr, just install it with `go`:\n\n```sh\ngo install github.com/charmbracelet/freeze@latest\n```\n\n[releases]: https://github.com/charmbracelet/freeze/releases\n\n## Customization\n\n### Interactive mode\n\nFreeze features a fully interactive mode for easy customization.\n\n```bash\nfreeze --interactive\n```\n\n<img alt=\"freeze interactive mode\" src=\"https://vhs.charm.sh/vhs-1AGhIlc2Mtn9Ltc8vPtaAP.gif\" width=\"400\" />\n\nSettings are written to `$XDG_CONFIG/freeze/user.json` and can be accessed with\n`freeze --config user`.\n\n### Flags\n\nScreenshots can be customized with `--flags` or [Configuration](#configuration) files.\n\n> [!NOTE]\n> You can view all freeze customization with `freeze --help`.\n\n- [`-b`](#background), [`--background`](#background): Apply a background fill.\n- [`-c`](#configuration), [`--config`](#configuration): Base configuration file or template.\n- [`-l`](#language), [`--language`](#language): Language to apply to code\n- [`-m`](#margin), [`--margin`](#margin): Apply margin to the window.\n- [`-o`](#output), [`--output`](#output): Output location for .svg, .png, .jpg.\n- [`-p`](#padding), [`--padding`](#padding): Apply padding to the code.\n- [`-r`](#border-radius), [`--border.radius`](#border-radius): Corner radius of window.\n- [`-t`](#theme), [`--theme`](#theme): Theme to use for syntax highlighting.\n- [`-w`](#window), [`--window`](#window): Display window controls.\n- [`-H`](#height), [`--height`](#height): Height of terminal window.\n- [`--border.width`](#border-width): Border width thickness.\n- [`--border.color`](#border-width): Border color.\n- [`--shadow.blur`](#shadow): Shadow Gaussian Blur.\n- [`--shadow.x`](#shadow): Shadow offset x coordinate.\n- [`--shadow.y`](#shadow): Shadow offset y coordinate.\n- [`--font.family`](#font): Font family to use for code.\n- [`--font.ligatures`](#font): Use ligatures in the font.\n- [`--font.size`](#font): Font size to use for code.\n- [`--font.file`](#font): File path to the font to use (embedded in the SVG).\n- [`--line-height`](#font): Line height relative to font size.\n- [`--show-line-numbers`](#line-numbers): Show line numbers.\n- [`--lines`](#line-numbers): Lines to capture (start,end).\n\n### Language\n\nIf possible, `freeze` auto-detects the language from the file name or analyzing\nthe file contents. Override this inference with the `--language` flag.\n\n```bash\ncat artichoke.hs | freeze --language haskell\n```\n\n<br />\n\n<a href=\"https://github.com/charmbracelet/freeze/assets/42545625/d746f028-3d51-4bfd-ba81-94bbc47b3587\">\n  <img alt=\"output of freeze command, Haskell code block\" src=\"./test/golden/svg/haskell.svg\" width=\"600\" />\n</a>\n\n### Theme\n\nChange the color theme.\n\n```bash\nfreeze artichoke.hs --theme dracula\n```\n\n<br />\n\n<a href=\"https://github.com/charmbracelet/freeze/assets/42545625/c693dc80-89b8-43c6-a34e-2d49a332d0c7\">\n  <img alt=\"output of freeze command, Haskell code block with dracula theme\" src=\"./test/golden/svg/dracula.svg\" width=\"600\" />\n</a>\n\n### Output\n\nChange the output file location, defaults to `out.svg` or stdout if piped. This\nvalue supports `.svg`, `.png`, `.webp`.\n\n```bash\nfreeze main.go --output out.svg\nfreeze main.go --output out.png\nfreeze main.go --output out.webp\n\n# or all of the above\nfreeze main.go --output out.{svg,png,webp}\n```\n\n### Font\n\nSpecify the font family, font size, and font line height of the output image.\nDefaults to `JetBrains Mono`, `14`(px), `1.2`(em).\n\n```bash\nfreeze artichoke.hs \\\n  --font.family \"SF Mono\" \\\n  --font.size 16 \\\n  --line-height 1.4\n```\n\nYou can also embed a font file (in TTF, WOFF, or WOFF2 format) using the\n`--font.file` flag.\n\nTo use ligatures in the font, you can apply the `--font.ligatures` flag.\n\n### Line Numbers\n\nShow line numbers in the terminal window with the `--show-line-numbers` flag.\n\n```bash\nfreeze artichoke.hs --show-line-numbers\n```\n\nTo capture only a specific range of line numbers you can use the `--lines` flag.\n\n```bash\nfreeze artichoke.hs --show-line-numbers --lines 2,3\n```\n\n### Border Radius\n\nAdd rounded corners to the terminal.\n\n```bash\nfreeze artichoke.hs --border.radius 8\n```\n\n<br />\n\n<a href=\"https://github.com/charmbracelet/freeze/assets/42545625/50932b10-56fd-4312-adbd-f64b36a15441\">\n  <img alt=\"code screenshot with corner radius of 8px\" src=\"./test/golden/svg/border-radius.svg\" width=\"600\" />\n</a>\n\n### Window\n\nAdd window controls to the terminal, macOS-style.\n\n```bash\nfreeze artichoke.hs --window\n```\n\n<a href=\"https://github.com/charmbracelet/freeze/assets/42545625/ba46bc4a-fb36-4718-88d4-f63b93343615\">\n  <img alt=\"output of freeze command, Haskell code block with window controls applied\" src=\"./test/golden/svg/window.svg\" width=\"600\" />\n</a>\n\n### Background\n\nSet the background color of the terminal window.\n\n```bash\nfreeze artichoke.hs --background \"#08163f\"\n```\n\n### Height\n\nSet the height of the terminal window.\n\n```bash\nfreeze artichoke.hs --height 400\n```\n\n### Border Width\n\nAdd a border outline to the terminal window.\n\n```bash\nfreeze artichoke.hs --border.width 1 --border.color \"#515151\" --border.radius 8\n```\n\n<br />\n\n<a href=\"https://github.com/charmbracelet/freeze/assets/42545625/b9207976-50fe-479b-974b-e1bf2ad1684c\">\n  <img alt=\"output of freeze command, Haskell code block with border applied\" src=\"./test/golden/svg/border-width.svg\" width=\"600\" />\n</a>\n\n### Padding\n\nAdd padding to the terminal window. You can provide 1, 2, or 4 values.\n\n```bash\nfreeze main.go --padding 20          # all sides\nfreeze main.go --padding 20,40       # vertical, horizontal\nfreeze main.go --padding 20,60,20,40 # top, right, bottom, left\n```\n\n<br />\n\n<a href=\"https://github.com/charmbracelet/freeze/assets/42545625/41da80bb-a6d8-402b-9f14-c73050720c0f\">\n  <img alt=\"output of freeze command, Haskell code block with padding applied\" src=\"./test/golden/svg/padding.svg\" width=\"600\" />\n</a>\n\n### Margin\n\nAdd margin to the terminal window. You can provide 1, 2, or 4 values.\n\n```bash\nfreeze main.go --margin 20          # all sides\nfreeze main.go --margin 20,40       # vertical, horizontal\nfreeze main.go --margin 20,60,20,40 # top, right, bottom, left\n```\n\n<br />\n\n<a href=\"https://github.com/charmbracelet/freeze/assets/42545625/eca78a8e-2dbc-4cfa-81da-6c2194925238\">\n  <img alt=\"output of freeze command, Haskell code block with margin applied\" src=\"./test/golden/svg/margin.svg\" width=\"720\" />\n</a>\n\n### Shadow\n\nAdd a shadow under the terminal window.\n\n```bash\nfreeze artichoke.hs --shadow.blur 20 --shadow.x 0 --shadow.y 10\n```\n\n<br />\n\n<a href=\"https://github.com/charmbracelet/freeze/assets/42545625/b9a8cc17-5ec6-4004-941b-5ae1b65d2b18\">\n  <img alt=\"output of freeze command, Haskell code block with a shadow\" src=\"./test/golden/svg/shadow.svg\" width=\"720\" />\n</a>\n\n## Screenshot TUIs\n\nUse `tmux capture-pane` to generate screenshots of TUIs.\n\nRun your TUI in `tmux` and get it to the state you want to capture.\nNext, use `capture-pane` to capture the pane and pipe that to freeze.\n\n```bash\nhx # in a separate pane\ntmux capture-pane -pet 1 | freeze -c full\n```\n\n<img width=\"650px\" src=\"./test/golden/svg/helix.svg\" alt=\"helix captured with freeze\">\n\n## Configuration\n\nFreeze also supports configuration via a JSON file which can be passed with the\n`--config` / `-c` flag. In general, all `--flag` options map directly to keys\nand values in the config file\n\nThere are also some default configurations built into `freeze` which can be passed by name.\n\n- `base`: Simple screenshot of code.\n- `full`: macOS-like screenshot.\n- `user`: Uses `~/.config/freeze/user.json`.\n\nIf you use `--interactive` mode, a configuration file will be created for you at\n`~/.config/freeze/user.json`. This will be the default configuration file used\nin your screenshots.\n\n```bash\nfreeze -c base main.go\nfreeze -c full main.go\nfreeze -c user main.go # alias for ~/.config/freeze/user.json\nfreeze -c ./custom.json main.go\n```\n\nHere's what an example configuration looks like:\n\n```json\n{\n  \"window\": false,\n  \"border\": {\n    \"radius\": 0,\n    \"width\": 0,\n    \"color\": \"#515151\"\n  },\n  \"shadow\": false,\n  \"padding\": [20, 40, 20, 20],\n  \"margin\": \"0\",\n  \"font\": {\n    \"family\": \"JetBrains Mono\",\n    \"size\": 14\n  },\n  \"line_height\": 1.2\n}\n```\n\n## Contributing\n\nSee [contributing][contribute].\n\n[contribute]: https://github.com/charmbracelet/freeze/contribute\n\n## Feedback\n\nWe’d love to hear your thoughts on this project. Feel free to drop us a note!\n\n- [Twitter](https://twitter.com/charmcli)\n- [The Fediverse](https://mastodon.social/@charmcli)\n- [Discord](https://charm.sh/chat)\n\n## License\n\n[MIT](https://github.com/charmbracelet/freeze/raw/main/LICENSE)\n\n---\n\nPart of [Charm](https://charm.sh).\n\n<a href=\"https://charm.sh/\">\n  <img\n    alt=\"The Charm logo\"\n    width=\"400\"\n    src=\"https://stuff.charm.sh/charm-badge.jpg\"\n  />\n</a>\n\nCharm热爱开源 • Charm loves open source\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.0751953125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease email vt100@charm.sh\n"
        },
        {
          "name": "ansi.go",
          "type": "blob",
          "size": 7.666015625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/beevik/etree\"\n\t\"github.com/charmbracelet/x/ansi\"\n\t\"github.com/mattn/go-runewidth\"\n)\n\ntype dispatcher struct {\n\tscale   float64\n\tsvg     *etree.Element\n\tbg      *etree.Element\n\tconfig  *Config\n\tlines   []*etree.Element\n\trow     int\n\tcol     int\n\tbgWidth int\n}\n\nfunc (p *dispatcher) dispatch(s ansi.Sequence) {\n\tswitch s := s.(type) {\n\tcase ansi.Rune:\n\t\tp.Print(rune(s))\n\tcase ansi.ControlCode:\n\t\tp.Execute(byte(s))\n\tcase ansi.CsiSequence:\n\t\tp.CsiDispatch(s)\n\t}\n}\n\nfunc (p *dispatcher) Print(r rune) {\n\tp.row = clamp(p.row, 0, len(p.lines)-1)\n\t// insert the rune in the last tspan\n\tchildren := p.lines[p.row].ChildElements()\n\tvar lastChild *etree.Element\n\tisFirstChild := len(children) == 0\n\tif isFirstChild {\n\t\tlastChild = etree.NewElement(\"tspan\")\n\t\tlastChild.CreateAttr(\"xml:space\", \"preserve\")\n\t\tp.lines[p.row].AddChild(lastChild)\n\t} else {\n\t\tlastChild = children[len(children)-1]\n\t}\n\n\tif runewidth.RuneWidth(r) > 1 {\n\t\tnewChild := lastChild.Copy()\n\t\tnewChild.SetText(string(r))\n\t\tnewChild.CreateAttr(\"dx\", fmt.Sprintf(\"%.2fpx\", (p.config.Font.Size/5)*p.scale))\n\t\tp.lines[p.row].AddChild(newChild)\n\t} else {\n\t\tlastChild.SetText(lastChild.Text() + string(r))\n\t}\n\n\tp.col += runewidth.RuneWidth(r)\n\tif p.bg != nil {\n\t\tp.bgWidth += runewidth.RuneWidth(r)\n\t}\n}\n\nfunc (p *dispatcher) Execute(code byte) {\n\tif code == '\\t' {\n\t\tfor p.col%16 != 0 {\n\t\t\tp.Print(' ')\n\t\t}\n\t}\n\tif code == '\\n' {\n\t\tp.endBackground()\n\t\tp.row++\n\t\tp.col = 0\n\t}\n}\n\nconst fontHeightToWidthRatio = 1.68\n\nfunc (p *dispatcher) beginBackground(fill string) {\n\trect := etree.NewElement(\"rect\")\n\trect.CreateAttr(\"fill\", fill)\n\n\ttopOffset := p.config.Padding[top] + p.config.Margin[top] + (((p.config.Font.Size + p.config.LineHeight) / 5) * p.scale)\n\trowMultiplier := p.config.Font.Size * p.config.LineHeight\n\n\ty := fmt.Sprintf(\"%.2fpx\", float64(p.row)*rowMultiplier+topOffset)\n\tx := p.scale * float64(p.col) * (p.config.Font.Size / fontHeightToWidthRatio)\n\tx += float64(p.config.Margin[left] + p.config.Padding[left])\n\tif p.config.ShowLineNumbers {\n\t\tx += float64(p.config.Font.Size) * 3\n\t}\n\trect.CreateAttr(\"x\", fmt.Sprintf(\"%.2fpx\", x))\n\trect.CreateAttr(\"y\", y)\n\trect.CreateAttr(\"height\", fmt.Sprintf(\"%.2fpx\", p.config.Font.Size*p.config.LineHeight+1))\n\tp.bg = rect\n}\n\nfunc (p *dispatcher) endBackground() {\n\tif p.bg == nil {\n\t\treturn\n\t}\n\n\twidth := (float64(p.bgWidth) + 0.5) * p.scale\n\tif p.bgWidth == 0 {\n\t\twidth = 0\n\t}\n\n\tp.bg.CreateAttr(\"width\", fmt.Sprintf(\"%.5fpx\", width*(p.config.Font.Size/fontHeightToWidthRatio)))\n\tp.svg.InsertChildAt(0, p.bg)\n\tp.bg = nil\n\tp.bgWidth = 0\n}\n\nfunc (p *dispatcher) CsiDispatch(s ansi.CsiSequence) {\n\tif s.Cmd != 'm' {\n\t\t// ignore incomplete or non Style (SGR) sequences\n\t\treturn\n\t}\n\n\tspan := etree.NewElement(\"tspan\")\n\tspan.CreateAttr(\"xml:space\", \"preserve\")\n\treset := func() {\n\t\t// reset ANSI, this is done by creating a new empty tspan,\n\t\t// which would reset all the styles such that when text is appended to the last\n\t\t// child of this line there is no styling applied.\n\t\tp.lines[p.row].AddChild(span)\n\t\tp.endBackground()\n\t}\n\n\tif len(s.Params) == 0 {\n\t\t// zero params means reset\n\t\treset()\n\t\treturn\n\t}\n\n\tvar i int\n\tfor i < len(s.Params) {\n\t\tv := s.Param(i)\n\t\tswitch v {\n\t\tcase 0:\n\t\t\treset()\n\t\tcase 1:\n\t\t\t// span.CreateAttr(\"font-weight\", \"bold\")\n\t\t\tp.lines[p.row].AddChild(span)\n\t\tcase 9:\n\t\t\tspan.CreateAttr(\"text-decoration\", \"line-through\")\n\t\t\tp.lines[p.row].AddChild(span)\n\t\tcase 3:\n\t\t\tspan.CreateAttr(\"font-style\", \"italic\")\n\t\t\tp.lines[p.row].AddChild(span)\n\t\tcase 4:\n\t\t\tspan.CreateAttr(\"text-decoration\", \"underline\")\n\t\t\tp.lines[p.row].AddChild(span)\n\t\tcase 30, 31, 32, 33, 34, 35, 36, 37, 90, 91, 92, 93, 94, 95, 96, 97:\n\t\t\tspan.CreateAttr(\"fill\", ansiPalette[v])\n\t\t\tp.lines[p.row].AddChild(span)\n\t\tcase 38:\n\t\t\ti++\n\t\t\tswitch s.Param(i) {\n\t\t\tcase 5:\n\t\t\t\tn := s.Param(i + 1)\n\t\t\t\ti++\n\t\t\t\tfill := palette[n]\n\t\t\t\tspan.CreateAttr(\"fill\", fill)\n\t\t\t\tp.lines[p.row].AddChild(span)\n\t\t\tcase 2:\n\t\t\t\tspan.CreateAttr(\"fill\", fmt.Sprintf(\"#%02x%02x%02x\", s.Param(i+1), s.Param(i+2), s.Param(i+3)))\n\t\t\t\tp.lines[p.row].AddChild(span)\n\t\t\t\ti += 3\n\t\t\t}\n\t\tcase 48:\n\t\t\tp.endBackground()\n\t\t\ti++\n\t\t\tswitch s.Param(i) {\n\t\t\tcase 5:\n\t\t\t\tn := s.Param(i + 1)\n\t\t\t\ti++\n\t\t\t\tfill := palette[n]\n\t\t\t\tp.beginBackground(fill)\n\t\t\tcase 2:\n\t\t\t\tfill := fmt.Sprintf(\"#%02x%02x%02x\", s.Param(i+1), s.Param(i+2), s.Param(i+3))\n\t\t\t\tp.beginBackground(fill)\n\t\t\t\ti += 3\n\t\t\t}\n\t\tcase 100, 101, 102, 103, 104, 105, 106, 107:\n\t\t\tp.beginBackground(ansiPalette[v])\n\t\t}\n\t\ti++\n\t}\n}\n\nvar ansiPalette = map[int]string{\n\t30: \"#282a2e\", // black\n\t31: \"#D74E6F\", // red\n\t32: \"#31BB71\", // green\n\t33: \"#D3E561\", // yellow\n\t34: \"#8056FF\", // blue\n\t35: \"#ED61D7\", // magenta\n\t36: \"#04D7D7\", // cyan\n\t37: \"#C5C8C6\", // white\n\n\t90: \"#4B4B4B\", // bright black\n\t91: \"#FE5F86\", // bright red\n\t92: \"#00D787\", // bright green\n\t93: \"#EBFF71\", // bright yellow\n\t94: \"#8F69FF\", // bright blue\n\t95: \"#FF7AEA\", // bright magenta\n\t96: \"#00FEFE\", // bright cyan\n\t97: \"#FFFFFF\", // bright white\n}\n\nvar palette = []string{\n\t\"#000000\", \"#800000\", \"#008000\", \"#808000\", \"#000080\", \"#800080\", \"#008080\", \"#c0c0c0\",\n\t\"#808080\", \"#ff0000\", \"#00ff00\", \"#ffff00\", \"#0000ff\", \"#ff00ff\", \"#00ffff\", \"#ffffff\",\n\t\"#000000\", \"#00005f\", \"#000087\", \"#0000af\", \"#0000d7\", \"#0000ff\", \"#005f00\", \"#005f5f\",\n\t\"#005f87\", \"#005faf\", \"#005fd7\", \"#005fff\", \"#008700\", \"#00875f\", \"#008787\", \"#0087af\",\n\t\"#0087d7\", \"#0087ff\", \"#00af00\", \"#00af5f\", \"#00af87\", \"#00afaf\", \"#00afd7\", \"#00afff\",\n\t\"#00d700\", \"#00d75f\", \"#00d787\", \"#00d7af\", \"#00d7d7\", \"#00d7ff\", \"#00ff00\", \"#00ff5f\",\n\t\"#00ff87\", \"#00ffaf\", \"#00ffd7\", \"#00ffff\", \"#5f0000\", \"#5f005f\", \"#5f0087\", \"#5f00af\",\n\t\"#5f00d7\", \"#5f00ff\", \"#5f5f00\", \"#5f5f5f\", \"#5f5f87\", \"#5f5faf\", \"#5f5fd7\", \"#5f5fff\",\n\t\"#5f8700\", \"#5f875f\", \"#5f8787\", \"#5f87af\", \"#5f87d7\", \"#5f87ff\", \"#5faf00\", \"#5faf5f\",\n\t\"#5faf87\", \"#5fafaf\", \"#5fafd7\", \"#5fafff\", \"#5fd700\", \"#5fd75f\", \"#5fd787\", \"#5fd7af\",\n\t\"#5fd7d7\", \"#5fd7ff\", \"#5fff00\", \"#5fff5f\", \"#5fff87\", \"#5fffaf\", \"#5fffd7\", \"#5fffff\",\n\t\"#870000\", \"#87005f\", \"#870087\", \"#8700af\", \"#8700d7\", \"#8700ff\", \"#875f00\", \"#875f5f\",\n\t\"#875f87\", \"#875faf\", \"#875fd7\", \"#875fff\", \"#878700\", \"#87875f\", \"#878787\", \"#8787af\",\n\t\"#8787d7\", \"#8787ff\", \"#87af00\", \"#87af5f\", \"#87af87\", \"#87afaf\", \"#87afd7\", \"#87afff\",\n\t\"#87d700\", \"#87d75f\", \"#87d787\", \"#87d7af\", \"#87d7d7\", \"#87d7ff\", \"#87ff00\", \"#87ff5f\",\n\t\"#87ff87\", \"#87ffaf\", \"#87ffd7\", \"#87ffff\", \"#af0000\", \"#af005f\", \"#af0087\", \"#af00af\",\n\t\"#af00d7\", \"#af00ff\", \"#af5f00\", \"#af5f5f\", \"#af5f87\", \"#af5faf\", \"#af5fd7\", \"#af5fff\",\n\t\"#af8700\", \"#af875f\", \"#af8787\", \"#af87af\", \"#af87d7\", \"#af87ff\", \"#afaf00\", \"#afaf5f\",\n\t\"#afaf87\", \"#afafaf\", \"#afafd7\", \"#afafff\", \"#afd700\", \"#afd75f\", \"#afd787\", \"#afd7af\",\n\t\"#afd7d7\", \"#afd7ff\", \"#afff00\", \"#afff5f\", \"#afff87\", \"#afffaf\", \"#afffd7\", \"#afffff\",\n\t\"#d70000\", \"#d7005f\", \"#d70087\", \"#d700af\", \"#d700d7\", \"#d700ff\", \"#d75f00\", \"#d75f5f\",\n\t\"#d75f87\", \"#d75faf\", \"#d75fd7\", \"#d75fff\", \"#d78700\", \"#d7875f\", \"#d78787\", \"#d787af\",\n\t\"#d787d7\", \"#d787ff\", \"#d7af00\", \"#d7af5f\", \"#d7af87\", \"#d7afaf\", \"#d7afd7\", \"#d7afff\",\n\t\"#d7d700\", \"#d7d75f\", \"#d7d787\", \"#d7d7af\", \"#d7d7d7\", \"#d7d7ff\", \"#d7ff00\", \"#d7ff5f\",\n\t\"#d7ff87\", \"#d7ffaf\", \"#d7ffd7\", \"#d7ffff\", \"#ff0000\", \"#ff005f\", \"#ff0087\", \"#ff00af\",\n\t\"#ff00d7\", \"#ff00ff\", \"#ff5f00\", \"#ff5f5f\", \"#ff5f87\", \"#ff5faf\", \"#ff5fd7\", \"#ff5fff\",\n\t\"#ff8700\", \"#ff875f\", \"#ff8787\", \"#ff87af\", \"#ff87d7\", \"#ff87ff\", \"#ffaf00\", \"#ffaf5f\",\n\t\"#ffaf87\", \"#ffafaf\", \"#ffafd7\", \"#ffafff\", \"#ffd700\", \"#ffd75f\", \"#ffd787\", \"#ffd7af\",\n\t\"#ffd7d7\", \"#ffd7ff\", \"#ffff00\", \"#ffff5f\", \"#ffff87\", \"#ffffaf\", \"#ffffd7\", \"#ffffff\",\n\t\"#080808\", \"#121212\", \"#1c1c1c\", \"#262626\", \"#303030\", \"#3a3a3a\", \"#444444\", \"#4e4e4e\",\n\t\"#585858\", \"#606060\", \"#666666\", \"#767676\", \"#808080\", \"#8a8a8a\", \"#949494\", \"#9e9e9e\",\n\t\"#a8a8a8\", \"#b2b2b2\", \"#bcbcbc\", \"#c6c6c6\", \"#d0d0d0\", \"#dadada\", \"#e4e4e4\", \"#eeeeee\",\n}\n"
        },
        {
          "name": "config.go",
          "type": "blob",
          "size": 4.9296875,
          "content": "package main\n\nimport (\n\t\"embed\"\n\t\"encoding/json\"\n\t\"io/fs\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/adrg/xdg\"\n)\n\nconst defaultOutputFilename = \"freeze.png\"\n\n// Config is the configuration options for a screenshot.\ntype Config struct {\n\tInput string `json:\",omitempty\" arg:\"\" help:\"Code to screenshot.\" optional:\"\"`\n\n\t// Window\n\tBackground string    `json:\"background\" help:\"Apply a background fill.\" short:\"b\" placeholder:\"#171717\" group:\"Window\"`\n\tMargin     []float64 `json:\"margin\" help:\"Apply margin to the window.\" short:\"m\" placeholder:\"0\" group:\"Window\"`\n\tPadding    []float64 `json:\"padding\" help:\"Apply padding to the code.\" short:\"p\" placeholder:\"0\" group:\"Window\"`\n\tWindow     bool      `json:\"window\" help:\"Display window controls.\" group:\"Window\"`\n\tWidth      float64   `json:\"width\" help:\"Width of terminal window.\" short:\"W\" group:\"Window\"`\n\tHeight     float64   `json:\"height\" help:\"Height of terminal window.\" short:\"H\" group:\"Window\"`\n\n\t// Settings\n\tConfig      string `json:\"config,omitempty\" help:\"Base configuration file or template.\" short:\"c\" group:\"Settings\" default:\"default\" placeholder:\"base\"`\n\tInteractive bool   `hidden:\"\" json:\",omitempty\" help:\"Use an interactive form for configuration options.\" short:\"i\" group:\"Settings\"`\n\tLanguage    string `json:\"language,omitempty\" help:\"Language of code file.\" short:\"l\" group:\"Settings\" placeholder:\"go\"`\n\tTheme       string `json:\"theme\" help:\"Theme to use for syntax highlighting.\" short:\"t\" group:\"Settings\" placeholder:\"charm\"`\n\tWrap        int    `json:\"wrap\" help:\"Wrap lines at a specific width.\" short:\"w\" group:\"Settings\" default:\"0\" placeholder:\"80\"`\n\n\tOutput         string        `json:\"output,omitempty\" help:\"Output location for {{.svg}}, {{.png}}, or {{.webp}}.\" short:\"o\" group:\"Settings\" default:\"\" placeholder:\"freeze.svg\"`\n\tExecute        string        `json:\"-\" help:\"Capture output of command execution.\" short:\"x\" group:\"Settings\" default:\"\"`\n\tExecuteTimeout time.Duration `json:\"-\" help:\"Execution timeout.\" group:\"Settings\" default:\"10s\" prefix:\"execute.\" name:\"timeout\" hidden:\"\"`\n\n\t// Decoration\n\tBorder Border `json:\"border\" embed:\"\" prefix:\"border.\" group:\"Border\"`\n\tShadow Shadow `json:\"shadow\" embed:\"\" prefix:\"shadow.\" help:\"add a shadow to the window\" short:\"s\" group:\"Shadow\"`\n\n\t// Font\n\tFont Font `json:\"font\" embed:\"\" prefix:\"font.\" group:\"Font\"`\n\n\t// Line\n\tLineHeight      float64 `json:\"line_height\" help:\"Line height relative to font size.\" group:\"Line\" placeholder:\"1.2\"`\n\tLines           []int   `json:\"-\" help:\"Lines to capture (start,end).\" group:\"Line\" placeholder:\"0,-1\" value:\"0,-1\"`\n\tShowLineNumbers bool    `json:\"show_line_numbers\" help:\"\" group:\"Line\" placeholder:\"false\"`\n}\n\n// Shadow is the configuration options for a drop shadow.\ntype Shadow struct {\n\tBlur float64 `json:\"blur\" help:\"Shadow Gaussian Blur.\" placeholder:\"0\"`\n\tX    float64 `json:\"x\" help:\"Shadow offset {{x}} coordinate.\" placeholder:\"0\"`\n\tY    float64 `json:\"y\" help:\"Shadow offset {{y}} coordinate.\" placeholder:\"0\"`\n}\n\n// Border is the configuration options for a window border.\ntype Border struct {\n\tRadius float64 `json:\"radius\" help:\"Corner radius of window.\" short:\"r\" placeholder:\"0\"`\n\tWidth  float64 `json:\"width\" help:\"Border width thickness.\" placeholder:\"1\"`\n\tColor  string  `json:\"color\" help:\"Border color.\" placeholder:\"#000\"`\n}\n\n// Font is the configuration options for a font.\ntype Font struct {\n\tFamily    string  `json:\"family\" help:\"Font family to use for code.\" placeholder:\"monospace\"`\n\tFile      string  `json:\"file\" help:\"Font file to embed.\" placeholder:\"monospace.ttf\"`\n\tSize      float64 `json:\"size\" help:\"Font size to use for code.\" placeholder:\"14\"`\n\tLigatures bool    `json:\"ligatures\" help:\"Use ligatures in the font.\" placeholder:\"true\" value:\"true\" negatable:\"\"`\n}\n\n//go:embed configurations/*\nvar configs embed.FS\n\nfunc expandPadding(p []float64, scale float64) []float64 {\n\tswitch len(p) {\n\tcase 1:\n\t\treturn []float64{p[top] * scale, p[top] * scale, p[top] * scale, p[top] * scale}\n\tcase 2:\n\t\treturn []float64{p[top] * scale, p[right] * scale, p[top] * scale, p[right] * scale}\n\tcase 4:\n\t\treturn []float64{p[top] * scale, p[right] * scale, p[bottom] * scale, p[left] * scale}\n\tdefault:\n\t\treturn []float64{0, 0, 0, 0}\n\t}\n}\n\nvar expandMargin = expandPadding\n\ntype side int\n\nconst (\n\ttop    side = 0\n\tright  side = 1\n\tbottom side = 2\n\tleft   side = 3\n)\n\nvar userConfigPath = filepath.Join(xdg.ConfigHome, \"freeze\", \"user.json\")\n\nfunc loadUserConfig() (fs.File, error) {\n\treturn os.Open(userConfigPath) //nolint: wrapcheck\n}\n\nfunc saveUserConfig(config Config) error {\n\tconfig.Input = \"\"\n\tconfig.Output = \"\"\n\tconfig.Interactive = false\n\n\terr := os.MkdirAll(filepath.Dir(userConfigPath), os.ModePerm)\n\tif err != nil {\n\t\treturn err //nolint: wrapcheck\n\t}\n\tf, err := os.Create(userConfigPath)\n\tif err != nil {\n\t\treturn err //nolint: wrapcheck\n\t}\n\tb, err := json.Marshal(config)\n\tif err != nil {\n\t\treturn err //nolint: wrapcheck\n\t}\n\t_, err = f.Write(b)\n\n\tprintFilenameOutput(userConfigPath)\n\n\treturn err //nolint: wrapcheck\n}\n"
        },
        {
          "name": "config_test.go",
          "type": "blob",
          "size": 0.42578125,
          "content": "package main\n\nimport (\n\t\"testing\"\n\n\t\"github.com/alecthomas/kong\"\n)\n\nfunc TestConfig(t *testing.T) {\n\tdir := \"configurations\"\n\n\tentries, err := configs.ReadDir(dir)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tif len(entries) != 2 {\n\t\tt.Fatal(entries)\n\t}\n\n\tfor _, entry := range entries {\n\t\tf, err := configs.Open(dir + \"/\" + entry.Name())\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\t_, err = kong.JSON(f)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "configurations",
          "type": "tree",
          "content": null
        },
        {
          "name": "cut.go",
          "type": "blob",
          "size": 0.7685546875,
          "content": "package main\n\nimport \"strings\"\n\nfunc cut(input string, window []int) string {\n\tif len(window) == 0 {\n\t\treturn input\n\t}\n\tif len(window) == 1 && window[0] == 0 {\n\t\treturn input\n\t}\n\tif len(window) == 2 && window[0] == 0 && window[1] == -1 {\n\t\treturn input\n\t}\n\n\tlines := strings.Split(input, \"\\n\")\n\n\tstart := 0\n\tend := len(lines)\n\n\tswitch len(window) {\n\tcase 1:\n\t\tif window[0] > 0 {\n\t\t\tstart = window[0]\n\t\t} else {\n\t\t\tstart = len(lines) + window[0] // add negative = subtract\n\t\t}\n\tcase 2:\n\t\tstart = window[0]\n\t\tend = window[1]\n\t}\n\n\tstart = clamp(start, 0, len(lines))\n\tend = clamp(end+1, start, len(lines))\n\n\tif start == end && start < len(lines) {\n\t\treturn lines[start]\n\t}\n\n\treturn strings.Join(lines[start:end], \"\\n\")\n}\n\nfunc clamp(n, low, high int) int {\n\treturn min(max(n, low), high)\n}\n"
        },
        {
          "name": "cut_test.go",
          "type": "blob",
          "size": 1.19140625,
          "content": "package main\n\nimport (\n\t\"testing\"\n)\n\nconst test = `1 package main\n2 \n3 import (\n4   \"fmt\"\n5 )\n6\n7 func main() {\n8    fmt.Println(\"Hello World\")\n9 }`\n\nfunc TestCut(t *testing.T) {\n\ttests := []struct {\n\t\tinput    string\n\t\tlines    []int\n\t\texpected string\n\t}{\n\t\t{\"\", []int{0, 0}, \"\"},\n\t\t{\"Hello World\", []int{0, 0}, \"Hello World\"},\n\t\t{\"Hello World\", []int{0, 1}, \"Hello World\"},\n\t\t{\"Hello World\", []int{0, 10}, \"Hello World\"},\n\t\t{\"Hello World\", []int{10, 10}, \"\"},\n\t\t{test, []int{0, 10}, test},\n\t\t{test, []int{0, 1}, \"1 package main\\n2 \"},\n\t\t{test, []int{1, 2}, \"2 \\n3 import (\"},\n\t\t{test, []int{2, 4}, \"3 import (\\n4   \\\"fmt\\\"\\n5 )\"},\n\t\t{test, []int{6}, \"7 func main() {\\n8    fmt.Println(\\\"Hello World\\\")\\n9 }\"},\n\t\t{test, []int{-3}, \"7 func main() {\\n8    fmt.Println(\\\"Hello World\\\")\\n9 }\"},\n\t\t{test, []int{-2}, \"8    fmt.Println(\\\"Hello World\\\")\\n9 }\"},\n\t\t{test, []int{-1}, \"9 }\"},\n\t\t{test, []int{0, 9}, test},\n\t\t{test, []int{6, 6}, \"7 func main() {\"},\n\t\t{test, []int{7, 7}, \"8    fmt.Println(\\\"Hello World\\\")\"},\n\t}\n\n\tfor _, test := range tests {\n\t\tactual := cut(test.input, test.lines)\n\t\tif actual != test.expected {\n\t\t\tt.Log(actual)\n\t\t\tt.Log(test.expected)\n\t\t\tt.Errorf(\"cut(%s, %v)\", test.input, test.lines)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "default.nix",
          "type": "blob",
          "size": 0.1298828125,
          "content": "{pkgs}:\npkgs.buildGoModule {\n  name = \"freeze\";\n  src = ./.;\n  vendorHash = \"sha256-AUFzxmQOb/h0UgcprY09IVI7Auitn3JTDU/ptKicIAU=\";\n}\n"
        },
        {
          "name": "error.go",
          "type": "blob",
          "size": 0.63671875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/charmbracelet/lipgloss\"\n)\n\nvar (\n\terrorHeader = lipgloss.NewStyle().\n\t\t\tForeground(lipgloss.Color(\"#F1F1F1\")).\n\t\t\tBackground(lipgloss.Color(\"#FF5F87\")).\n\t\t\tBold(true).\n\t\t\tPadding(0, 1).\n\t\t\tMargin(1).\n\t\t\tMarginLeft(2).\n\t\t\tSetString(\"ERROR\")\n\terrorDetails = lipgloss.NewStyle().\n\t\t\tForeground(lipgloss.Color(\"#757575\")).\n\t\t\tMarginLeft(2)\n)\n\nfunc printError(title string, err error) {\n\tfmt.Println(lipgloss.JoinHorizontal(lipgloss.Center, errorHeader.String(), title))\n\tfmt.Println(errorDetails.Render(err.Error()))\n}\n\nfunc printErrorFatal(title string, err error) {\n\tprintError(title, err)\n\tos.Exit(1)\n}\n"
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.458984375,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1710146030,\n        \"narHash\": \"sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"b1d9ab70662946ef0850d488da1c9019f3a9752a\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1711460390,\n        \"narHash\": \"sha256-akSgjDZL6pVHEfSE6sz1DNSXuYX6hq+P/1Z5IoYWs7E=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"44733514b72e732bd49f5511bd0203dea9b9a434\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixos-23.11\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.548828125,
          "content": "{\n  description = \"A tool for generating images of code and terminal output\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-23.11\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs = {\n    self,\n    nixpkgs,\n    flake-utils,\n  }:\n    flake-utils.lib.eachDefaultSystem (system: let\n      pkgs = import nixpkgs {inherit system;};\n    in {\n      packages.default = import ./default.nix {inherit pkgs;};\n    })\n    // {\n      overlays.default = final: prev: {\n        freeze = import ./default.nix {pkgs = final;};\n      };\n    };\n}\n"
        },
        {
          "name": "font.go",
          "type": "blob",
          "size": 1.19921875,
          "content": "package main\n\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"github.com/alecthomas/chroma/v2/formatters/svg\"\n\t\"github.com/charmbracelet/freeze/font\"\n)\n\nfunc fontOptions(config *Config) ([]svg.Option, error) {\n\tif config.Font.File != \"\" {\n\t\tbts, err := os.ReadFile(config.Font.File)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"invalid font file: %w\", err)\n\t\t}\n\n\t\tvar format svg.FontFormat\n\t\tswitch ext := filepath.Ext(config.Font.File); ext {\n\t\tcase \".ttf\":\n\t\t\tformat = svg.TRUETYPE\n\t\tcase \".woff2\":\n\t\t\tformat = svg.WOFF2\n\t\tcase \".woff\":\n\t\t\tformat = svg.WOFF\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"%s is not a supported font extension\", ext)\n\t\t}\n\n\t\treturn []svg.Option{\n\t\t\tsvg.EmbedFont(\n\t\t\t\tconfig.Font.Family,\n\t\t\t\tbase64.StdEncoding.EncodeToString(bts),\n\t\t\t\tformat,\n\t\t\t),\n\t\t\tsvg.FontFamily(config.Font.Family),\n\t\t}, nil\n\t}\n\tif config.Font.Family != \"JetBrains Mono\" {\n\t\treturn []svg.Option{\n\t\t\tsvg.FontFamily(config.Font.Family),\n\t\t}, nil\n\t}\n\tconfig.Font.Family = \"JetBrains Mono\"\n\tfontBase64 := font.JetBrainsMono\n\tif !config.Font.Ligatures {\n\t\tfontBase64 = font.JetBrainsMonoNL\n\t}\n\treturn []svg.Option{\n\t\tsvg.EmbedFont(config.Font.Family, fontBase64, svg.WOFF2),\n\t\tsvg.FontFamily(config.Font.Family),\n\t}, nil\n}\n"
        },
        {
          "name": "font",
          "type": "tree",
          "content": null
        },
        {
          "name": "freeze_test.go",
          "type": "blob",
          "size": 7.923828125,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/aymanbagabas/go-udiff\"\n)\n\nconst binary = \"./test/freeze-test\"\n\nvar (\n\tupdate = flag.Bool(\"update\", false, \"update golden files\")\n\tpng    = flag.Bool(\"png\", false, \"update pngs\")\n)\n\nfunc TestMain(m *testing.M) {\n\tflag.Parse()\n\tcmd := exec.Command(\"go\", \"build\", \"-o\", binary)\n\terr := cmd.Run()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\texit := m.Run()\n\terr = os.Remove(binary)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tos.Exit(exit)\n}\n\nfunc TestFreeze(t *testing.T) {\n\tcmd := exec.Command(binary)\n\terr := cmd.Run()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\nfunc TestFreezeOutput(t *testing.T) {\n\toutput := \"artichoke-test.svg\"\n\tdefer os.Remove(output)\n\n\tcmd := exec.Command(binary, \"test/input/artichoke.hs\", \"-o\", output)\n\terr := cmd.Run()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t_, err = os.Stat(output)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\nfunc TestFreezeHelp(t *testing.T) {\n\tout := bytes.Buffer{}\n\tcmd := exec.Command(binary)\n\tcmd.Stdout = &out\n\terr := cmd.Run()\n\tif err != nil {\n\t\tt.Fatal(\"unexpected error\")\n\t}\n\n\tgot := out.String()\n\n\tcontains := []string{\n\t\t\"Generate images of code and terminal output.\",\n\t\t\"freeze main.go [-o code.svg] [--flags]\",\n\t\t\"--theme\", \"Theme to use for syntax highlighting\",\n\t\t\"--border.color\", \"Border color.\",\n\t\t\"--shadow.blur\", \"Shadow Gaussian Blur.\",\n\t\t\"--font.family\", \"Font family to use for code.\",\n\t}\n\n\tfor _, c := range contains {\n\t\tif !strings.Contains(got, c) {\n\t\t\tt.Fatalf(\"expected %s to contain \\\"%s\\\"\", got, c)\n\t\t}\n\t}\n}\n\nfunc TestFreezeErrorFileMissing(t *testing.T) {\n\tout := bytes.Buffer{}\n\tcmd := exec.Command(binary, \"this-file-does-not-exist\")\n\tcmd.Stdout = &out\n\terr := cmd.Run()\n\n\tif err == nil {\n\t\tt.Fatal(\"expected error\")\n\t}\n\n\tgot := out.String()\n\n\tcontains := []string{\"ERROR\", \"File not found\", \"open this-file-does-not-exist: no such file or directory\"}\n\n\tfor _, c := range contains {\n\t\tif !strings.Contains(got, c) {\n\t\t\tt.Fatalf(\"expected %s to contain \\\"%s\\\"\", got, c)\n\t\t}\n\t}\n}\n\nfunc TestFreezeConfigurations(t *testing.T) {\n\ttests := []struct {\n\t\tinput  string\n\t\tflags  []string\n\t\toutput string\n\t}{\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--config\", \"test/configurations/base.json\"},\n\t\t\toutput: \"artichoke-base\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--config\", \"test/configurations/full.json\"},\n\t\t\toutput: \"artichoke-full\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/eza.ansi\",\n\t\t\tflags:  []string{\"--config\", \"full\"},\n\t\t\toutput: \"eza\",\n\t\t},\n\t\t{\n\t\t\tflags:  []string{\"--execute\", `echo \"Hello, world!\"`},\n\t\t\toutput: \"execute\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/bubbletea.model\",\n\t\t\tflags:  []string{\"--language\", \"go\", \"--height\", \"800\", \"--width\", \"750\", \"--config\", \"full\", \"--window=false\", \"--show-line-numbers\"},\n\t\t\toutput: \"bubbletea\",\n\t\t},\n\t\t// {\n\t\t// \tflags:  []string{\"--execute\", \"layout\", \"--height\", \"800\", \"--config\", \"full\", \"--margin\", \"50,10\"},\n\t\t// \toutput: \"composite-2\",\n\t\t// },\n\t\t{\n\t\t\tinput:  \"test/input/layout.ansi\",\n\t\t\tflags:  []string{},\n\t\t\toutput: \"layout\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--language\", \"haskell\"},\n\t\t\toutput: \"haskell\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--theme\", \"dracula\"},\n\t\t\toutput: \"dracula\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--border.radius\", \"8\"},\n\t\t\toutput: \"border-radius\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--border.radius\", \"8\", \"--window\"},\n\t\t\toutput: \"window\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--border.radius\", \"8\", \"--window\", \"--border.width\", \"1\"},\n\t\t\toutput: \"border-width\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--border.radius\", \"8\", \"--window\", \"--border.width\", \"1\", \"--padding\", \"30,50,30,30\"},\n\t\t\toutput: \"padding\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--border.radius\", \"8\", \"--window\", \"--border.width\", \"1\", \"--padding\", \"30,50,30,30\", \"--margin\", \"50,60,100,60\"},\n\t\t\toutput: \"margin\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--config\", \"full\"},\n\t\t\toutput: \"shadow\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--width\", \"1920\", \"--height\", \"1080\"},\n\t\t\toutput: \"dimensions\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--margin\", \"50\", \"--width\", \"600\", \"--height\", \"300\"},\n\t\t\toutput: \"dimensions-margin\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--margin\", \"50\", \"--width\", \"600\", \"--height\", \"300\", \"--show-line-numbers\"},\n\t\t\toutput: \"dimensions-margin-line-numbers\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--padding\", \"50\", \"--width\", \"600\", \"--height\", \"300\"},\n\t\t\toutput: \"dimensions-padding\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--config\", \"full\", \"--width\", \"600\", \"--height\", \"300\"},\n\t\t\toutput: \"dimensions-config\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/goreleaser-full.yml\",\n\t\t\tflags:  []string{\"--config\", \"full\", \"--width\", \"600\", \"--height\", \"900\"},\n\t\t\toutput: \"overflow\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--config\", \"full\", \"--lines\", \"4,8\", \"--show-line-numbers\"},\n\t\t\toutput: \"lines\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--font.size\", \"28\"},\n\t\t\toutput: \"font-size-28\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--font.size\", \"14\"},\n\t\t\toutput: \"font-size-14\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/artichoke.hs\",\n\t\t\tflags:  []string{\"--line-height\", \"2\"},\n\t\t\toutput: \"line-height-2\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/goreleaser-full.yml\",\n\t\t\tflags:  []string{\"--config\", \"full\", \"--height\", \"2000\", \"--show-line-numbers\"},\n\t\t\toutput: \"overflow-line-numbers\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/helix.ansi\",\n\t\t\tflags:  []string{\"--background\", \"#0d1116\"},\n\t\t\toutput: \"helix\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/glow.ansi\",\n\t\t\tflags:  []string{},\n\t\t\toutput: \"glow\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/tab.go\",\n\t\t\tflags:  []string{},\n\t\t\toutput: \"tab\",\n\t\t},\n\t\t{\n\t\t\tinput:  \"test/input/wrap.go\",\n\t\t\tflags:  []string{\"--wrap\", \"80\", \"--width\", \"600\"},\n\t\t\toutput: \"wrap\",\n\t\t},\n\t}\n\n\terr := os.RemoveAll(\"test/output/svg\")\n\tif err != nil {\n\t\tt.Fatal(\"unable to remove output files\")\n\t}\n\terr = os.MkdirAll(\"test/output/svg\", 0o755)\n\tif err != nil {\n\t\tt.Fatal(\"unable to create output directory\")\n\t}\n\terr = os.MkdirAll(\"test/golden/svg\", 0o755)\n\tif err != nil {\n\t\tt.Fatal(\"unable to create output directory\")\n\t}\n\terr = os.MkdirAll(\"test/output/png\", 0o755)\n\tif err != nil {\n\t\tt.Fatal(\"unable to create output directory\")\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.output, func(t *testing.T) {\n\t\t\t// output SVG\n\t\t\tout := bytes.Buffer{}\n\t\t\targs := []string{tc.input}\n\t\t\targs = append(args, tc.flags...)\n\t\t\targs = append(args, \"--output\", \"test/output/svg/\"+tc.output+\".svg\")\n\t\t\tcmd := exec.Command(binary, args...)\n\t\t\tcmd.Stdout = &out\n\t\t\terr := cmd.Run()\n\t\t\tif err != nil {\n\t\t\t\tt.Log(err)\n\t\t\t\tt.Log(out.String())\n\t\t\t\tt.Fatal(\"unexpected error\")\n\t\t\t}\n\t\t\tgotfile := \"test/output/svg/\" + tc.output + \".svg\"\n\t\t\tgot, err := os.ReadFile(gotfile)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(\"no output file for:\", gotfile)\n\t\t\t}\n\t\t\tgoldenfile := \"test/golden/svg/\" + tc.output + \".svg\"\n\t\t\tif *update {\n\t\t\t\tif err := os.WriteFile(goldenfile, got, 0o644); err != nil {\n\t\t\t\t\tt.Log(err)\n\t\t\t\t\tt.Fatal(\"unexpected error\")\n\t\t\t\t}\n\t\t\t}\n\t\t\twant, err := os.ReadFile(goldenfile)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(\"no golden file for:\", goldenfile)\n\t\t\t}\n\t\t\tif string(want) != string(got) {\n\t\t\t\tt.Log(udiff.Unified(\"want\", \"got\", string(want), string(got)))\n\t\t\t\tt.Fatalf(\"%s != %s\", goldenfile, gotfile)\n\t\t\t}\n\n\t\t\t// output PNG\n\t\t\tif png != nil && *png {\n\t\t\t\tout = bytes.Buffer{}\n\t\t\t\targs = []string{tc.input}\n\t\t\t\targs = append(args, tc.flags...)\n\t\t\t\targs = append(args, \"--output\", \"test/output/png/\"+tc.output+\".png\")\n\t\t\t\tcmd = exec.Command(binary, args...)\n\t\t\t\tcmd.Stdout = &out\n\t\t\t\terr = cmd.Run()\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Log(err)\n\t\t\t\t\tt.Log(out.String())\n\t\t\t\t\tt.Fatal(\"unexpected error\")\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.1201171875,
          "content": "module github.com/charmbracelet/freeze\n\ngo 1.21.0\n\ntoolchain go1.22.5\n\nrequire (\n\tgithub.com/adrg/xdg v0.5.2\n\tgithub.com/alecthomas/chroma/v2 v2.15.0\n\tgithub.com/alecthomas/kong v1.6.1\n\tgithub.com/aymanbagabas/go-udiff v0.2.0\n\tgithub.com/beevik/etree v1.4.1\n\tgithub.com/caarlos0/go-shellwords v1.0.12\n\tgithub.com/charmbracelet/huh v0.6.0\n\tgithub.com/charmbracelet/lipgloss v0.13.1\n\tgithub.com/charmbracelet/log v0.4.0\n\tgithub.com/charmbracelet/x/ansi v0.4.0\n\tgithub.com/charmbracelet/x/term v0.2.1\n\tgithub.com/charmbracelet/x/xpty v0.1.1\n\tgithub.com/kanrichan/resvg-go v0.0.2-0.20231001163256-63db194ca9f5\n\tgithub.com/mattn/go-isatty v0.0.20\n\tgithub.com/mattn/go-runewidth v0.0.16\n\tgithub.com/muesli/reflow v0.3.0\n)\n\nrequire (\n\tgithub.com/atotto/clipboard v0.1.4 // indirect\n\tgithub.com/aymanbagabas/go-osc52/v2 v2.0.1 // indirect\n\tgithub.com/catppuccin/go v0.2.0 // indirect\n\tgithub.com/charmbracelet/bubbles v0.20.0 // indirect\n\tgithub.com/charmbracelet/bubbletea v1.1.2 // indirect\n\tgithub.com/charmbracelet/x/conpty v0.1.0 // indirect\n\tgithub.com/charmbracelet/x/errors v0.0.0-20240906161213-162f3037fef5 // indirect\n\tgithub.com/charmbracelet/x/exp/strings v0.0.0-20240906161213-162f3037fef5 // indirect\n\tgithub.com/charmbracelet/x/termios v0.1.0 // indirect\n\tgithub.com/creack/pty v1.1.24 // indirect\n\tgithub.com/dlclark/regexp2 v1.11.4 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/erikgeiser/coninput v0.0.0-20211004153227-1c3628e74d0f // indirect\n\tgithub.com/go-logfmt/logfmt v0.6.0 // indirect\n\tgithub.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\tgithub.com/mattn/go-localereader v0.0.1 // indirect\n\tgithub.com/mitchellh/hashstructure/v2 v2.0.2 // indirect\n\tgithub.com/muesli/ansi v0.0.0-20230316100256-276c6243b2f6 // indirect\n\tgithub.com/muesli/cancelreader v0.2.2 // indirect\n\tgithub.com/muesli/termenv v0.15.3-0.20240618155329-98d742f6907a // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgithub.com/tetratelabs/wazero v1.8.0 // indirect\n\tgolang.org/x/exp v0.0.0-20240904232852-e7e105dedf7e // indirect\n\tgolang.org/x/sync v0.8.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/text v0.18.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 9.3720703125,
          "content": "github.com/MakeNowJust/heredoc v1.0.0 h1:cXCdzVdstXyiTqTvfqk9SDHpKNjxuom+DOlyEeQ4pzQ=\ngithub.com/MakeNowJust/heredoc v1.0.0/go.mod h1:mG5amYoWBHf8vpLOuehzbGGw0EHxpZZ6lCpQ4fNJ8LE=\ngithub.com/adrg/xdg v0.5.2 h1:HNeVffMIG56GLMaoKTcTcyFhD2xS/dhyuBlKSNCM6Ug=\ngithub.com/adrg/xdg v0.5.2/go.mod h1:nlTsY+NNiCBGCK2tpm09vRqfVzrc2fLmXGpBLF0zlTQ=\ngithub.com/alecthomas/assert/v2 v2.11.0 h1:2Q9r3ki8+JYXvGsDyBXwH3LcJ+WK5D0gc5E8vS6K3D0=\ngithub.com/alecthomas/assert/v2 v2.11.0/go.mod h1:Bze95FyfUr7x34QZrjL+XP+0qgp/zg8yS+TtBj1WA3k=\ngithub.com/alecthomas/chroma/v2 v2.15.0 h1:LxXTQHFoYrstG2nnV9y2X5O94sOBzf0CIUpSTbpxvMc=\ngithub.com/alecthomas/chroma/v2 v2.15.0/go.mod h1:gUhVLrPDXPtp/f+L1jo9xepo9gL4eLwRuGAunSZMkio=\ngithub.com/alecthomas/kong v1.6.1 h1:/7bVimARU3uxPD0hbryPE8qWrS3Oz3kPQoxA/H2NKG8=\ngithub.com/alecthomas/kong v1.6.1/go.mod h1:p2vqieVMeTAnaC83txKtXe8FLke2X07aruPWXyMPQrU=\ngithub.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=\ngithub.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=\ngithub.com/atotto/clipboard v0.1.4 h1:EH0zSVneZPSuFR11BlR9YppQTVDbh5+16AmcJi4g1z4=\ngithub.com/atotto/clipboard v0.1.4/go.mod h1:ZY9tmq7sm5xIbd9bOK4onWV4S6X0u6GY7Vn0Yu86PYI=\ngithub.com/aymanbagabas/go-osc52/v2 v2.0.1 h1:HwpRHbFMcZLEVr42D4p7XBqjyuxQH5SMiErDT4WkJ2k=\ngithub.com/aymanbagabas/go-osc52/v2 v2.0.1/go.mod h1:uYgXzlJ7ZpABp8OJ+exZzJJhRNQ2ASbcXHWsFqH8hp8=\ngithub.com/aymanbagabas/go-udiff v0.2.0 h1:TK0fH4MteXUDspT88n8CKzvK0X9O2xu9yQjWpi6yML8=\ngithub.com/aymanbagabas/go-udiff v0.2.0/go.mod h1:RE4Ex0qsGkTAJoQdQQCA0uG+nAzJO/pI/QwceO5fgrA=\ngithub.com/beevik/etree v1.4.1 h1:PmQJDDYahBGNKDcpdX8uPy1xRCwoCGVUiW669MEirVI=\ngithub.com/beevik/etree v1.4.1/go.mod h1:gPNJNaBGVZ9AwsidazFZyygnd+0pAU38N4D+WemwKNs=\ngithub.com/caarlos0/go-shellwords v1.0.12 h1:HWrUnu6lGbWfrDcFiHcZiwOLzHWjjrPVehULaTFgPp8=\ngithub.com/caarlos0/go-shellwords v1.0.12/go.mod h1:bYeeX1GrTLPl5cAMYEzdm272qdsQAZiaHgeF0KTk1Gw=\ngithub.com/catppuccin/go v0.2.0 h1:ktBeIrIP42b/8FGiScP9sgrWOss3lw0Z5SktRoithGA=\ngithub.com/catppuccin/go v0.2.0/go.mod h1:8IHJuMGaUUjQM82qBrGNBv7LFq6JI3NnQCF6MOlZjpc=\ngithub.com/charmbracelet/bubbles v0.20.0 h1:jSZu6qD8cRQ6k9OMfR1WlM+ruM8fkPWkHvQWD9LIutE=\ngithub.com/charmbracelet/bubbles v0.20.0/go.mod h1:39slydyswPy+uVOHZ5x/GjwVAFkCsV8IIVy+4MhzwwU=\ngithub.com/charmbracelet/bubbletea v1.1.2 h1:naQXF2laRxyLyil/i7fxdpiz1/k06IKquhm4vBfHsIc=\ngithub.com/charmbracelet/bubbletea v1.1.2/go.mod h1:9HIU/hBV24qKjlehyj8z1r/tR9TYTQEag+cWZnuXo8E=\ngithub.com/charmbracelet/huh v0.6.0 h1:mZM8VvZGuE0hoDXq6XLxRtgfWyTI3b2jZNKh0xWmax8=\ngithub.com/charmbracelet/huh v0.6.0/go.mod h1:GGNKeWCeNzKpEOh/OJD8WBwTQjV3prFAtQPpLv+AVwU=\ngithub.com/charmbracelet/lipgloss v0.13.1 h1:Oik/oqDTMVA01GetT4JdEC033dNzWoQHdWnHnQmXE2A=\ngithub.com/charmbracelet/lipgloss v0.13.1/go.mod h1:zaYVJ2xKSKEnTEEbX6uAHabh2d975RJ+0yfkFpRBz5U=\ngithub.com/charmbracelet/log v0.4.0 h1:G9bQAcx8rWA2T3pWvx7YtPTPwgqpk7D68BX21IRW8ZM=\ngithub.com/charmbracelet/log v0.4.0/go.mod h1:63bXt/djrizTec0l11H20t8FDSvA4CRZJ1KH22MdptM=\ngithub.com/charmbracelet/x/ansi v0.4.0 h1:NqwHA4B23VwsDn4H3VcNX1W1tOmgnvY1NDx5tOXdnOU=\ngithub.com/charmbracelet/x/ansi v0.4.0/go.mod h1:dk73KoMTT5AX5BsX0KrqhsTqAnhZZoCBjs7dGWp4Ktw=\ngithub.com/charmbracelet/x/conpty v0.1.0 h1:4zc8KaIcbiL4mghEON8D72agYtSeIgq8FSThSPQIb+U=\ngithub.com/charmbracelet/x/conpty v0.1.0/go.mod h1:rMFsDJoDwVmiYM10aD4bH2XiRgwI7NYJtQgl5yskjEQ=\ngithub.com/charmbracelet/x/errors v0.0.0-20240906161213-162f3037fef5 h1:rIt3LGU1yOC7U48eZjaAtjdzuSjH6Y0GA1KsRN7wqn8=\ngithub.com/charmbracelet/x/errors v0.0.0-20240906161213-162f3037fef5/go.mod h1:2P0UgXMEa6TsToMSuFqKFQR+fZTO9CNGUNokkPatT/0=\ngithub.com/charmbracelet/x/exp/strings v0.0.0-20240906161213-162f3037fef5 h1:73C9VsX8PMlXxVMKjg7ix67cZWg+zySdyzWRaXS239A=\ngithub.com/charmbracelet/x/exp/strings v0.0.0-20240906161213-162f3037fef5/go.mod h1:pBhA0ybfXv6hDjQUZ7hk1lVxBiUbupdw5R31yPUViVQ=\ngithub.com/charmbracelet/x/term v0.2.1 h1:AQeHeLZ1OqSXhrAWpYUtZyX1T3zVxfpZuEQMIQaGIAQ=\ngithub.com/charmbracelet/x/term v0.2.1/go.mod h1:oQ4enTYFV7QN4m0i9mzHrViD7TQKvNEEkHUMCmsxdUg=\ngithub.com/charmbracelet/x/termios v0.1.0 h1:y4rjAHeFksBAfGbkRDmVinMg7x7DELIGAFbdNvxg97k=\ngithub.com/charmbracelet/x/termios v0.1.0/go.mod h1:H/EVv/KRnrYjz+fCYa9bsKdqF3S8ouDK0AZEbG7r+/U=\ngithub.com/charmbracelet/x/xpty v0.1.1 h1:A3DxWhvNjSkBR8/thRTcVnJ5bdv7OXRmChdMKtsi/5M=\ngithub.com/charmbracelet/x/xpty v0.1.1/go.mod h1:jnu0EnSUYO5l+BExMLFiKVgpGPPV/RT2+6LYyCyf8zs=\ngithub.com/creack/pty v1.1.24 h1:bJrF4RRfyJnbTJqzRLHzcGaZK1NeM5kTC9jGgovnR1s=\ngithub.com/creack/pty v1.1.24/go.mod h1:08sCNb52WyoAwi2QDyzUCTgcvVFhUzewun7wtTfvcwE=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dlclark/regexp2 v1.11.4 h1:rPYF9/LECdNymJufQKmri9gV604RvvABwgOA8un7yAo=\ngithub.com/dlclark/regexp2 v1.11.4/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/erikgeiser/coninput v0.0.0-20211004153227-1c3628e74d0f h1:Y/CXytFA4m6baUTXGLOoWe4PQhGxaX0KpnayAqC48p4=\ngithub.com/erikgeiser/coninput v0.0.0-20211004153227-1c3628e74d0f/go.mod h1:vw97MGsxSvLiUE2X8qFplwetxpGLQrlU1Q9AUEIzCaM=\ngithub.com/go-logfmt/logfmt v0.6.0 h1:wGYYu3uicYdqXVgoYbvnkrPVXkuLM1p1ifugDMEdRi4=\ngithub.com/go-logfmt/logfmt v0.6.0/go.mod h1:WYhtIu8zTZfxdn5+rREduYbwxfcBr/Vr6KEVveWlfTs=\ngithub.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=\ngithub.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=\ngithub.com/kanrichan/resvg-go v0.0.2-0.20231001163256-63db194ca9f5 h1:BXnB1Gz4y/zwQh+ZFNy7rgd+ZfMOrwRr4uZSHEI+ieY=\ngithub.com/kanrichan/resvg-go v0.0.2-0.20231001163256-63db194ca9f5/go.mod h1:c9+VS9GaommgIOzNWb5ze4lYwfT8BZ2UDyGiuQTT7yc=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-localereader v0.0.1 h1:ygSAOl7ZXTx4RdPYinUpg6W99U8jWvWi9Ye2JC/oIi4=\ngithub.com/mattn/go-localereader v0.0.1/go.mod h1:8fBrzywKY7BI3czFoHkuzRoWE9C+EiG4R1k4Cjx5p88=\ngithub.com/mattn/go-runewidth v0.0.12/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=\ngithub.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=\ngithub.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mitchellh/hashstructure/v2 v2.0.2 h1:vGKWl0YJqUNxE8d+h8f6NJLcCJrgbhC4NcD46KavDd4=\ngithub.com/mitchellh/hashstructure/v2 v2.0.2/go.mod h1:MG3aRVU/N29oo/V/IhBX8GR/zz4kQkprJgF2EVszyDE=\ngithub.com/muesli/ansi v0.0.0-20230316100256-276c6243b2f6 h1:ZK8zHtRHOkbHy6Mmr5D264iyp3TiX5OmNcI5cIARiQI=\ngithub.com/muesli/ansi v0.0.0-20230316100256-276c6243b2f6/go.mod h1:CJlz5H+gyd6CUWT45Oy4q24RdLyn7Md9Vj2/ldJBSIo=\ngithub.com/muesli/cancelreader v0.2.2 h1:3I4Kt4BQjOR54NavqnDogx/MIoWBFa0StPA8ELUXHmA=\ngithub.com/muesli/cancelreader v0.2.2/go.mod h1:3XuTXfFS2VjM+HTLZY9Ak0l6eUKfijIfMUZ4EgX0QYo=\ngithub.com/muesli/reflow v0.3.0 h1:IFsN6K9NfGtjeggFP+68I4chLZV2yIKsXJFNZ+eWh6s=\ngithub.com/muesli/reflow v0.3.0/go.mod h1:pbwTDkVPibjO2kyvBQRBxTWEEGDGq0FlB1BIKtnHY/8=\ngithub.com/muesli/termenv v0.15.3-0.20240618155329-98d742f6907a h1:2MaM6YC3mGu54x+RKAA6JiFFHlHDY1UbkxqppT7wYOg=\ngithub.com/muesli/termenv v0.15.3-0.20240618155329-98d742f6907a/go.mod h1:hxSnBBYLK21Vtq/PHd0S2FYCxBXzBua8ov5s1RobyRQ=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.1.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tetratelabs/wazero v1.8.0 h1:iEKu0d4c2Pd+QSRieYbnQC9yiFlMS9D+Jr0LsRmcF4g=\ngithub.com/tetratelabs/wazero v1.8.0/go.mod h1:yAI0XTsMBhREkM/YDAK/zNou3GoiAce1P6+rp/wQhjs=\ngolang.org/x/exp v0.0.0-20240904232852-e7e105dedf7e h1:I88y4caeGeuDQxgdoFPUq097j7kNfw6uvuiNxUBfcBk=\ngolang.org/x/exp v0.0.0-20240904232852-e7e105dedf7e/go.mod h1:akd2r19cwCdwSwWeIdzYQGa/EZZyqcOdwWiwj5L5eKQ=\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20210809222454-d867a43fc93e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.18.0 h1:XvMDiNzPAl0jr17s6W9lcaIhGUfUORdGCNsuLmPG224=\ngolang.org/x/text v0.18.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "help.go",
          "type": "blob",
          "size": 2.998046875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"strings\"\n\n\t\"github.com/alecthomas/kong\"\n\t\"github.com/charmbracelet/lipgloss\"\n)\n\nconst space = 18\n\nvar highlighter = regexp.MustCompile(\"{{(.+?)}}\")\n\nfunc helpPrinter(_ kong.HelpOptions, ctx *kong.Context) error {\n\tcodeBlockStyle := lipgloss.NewStyle().Background(lipgloss.AdaptiveColor{Light: \"254\", Dark: \"235\"}).MarginLeft(2).Padding(1, 2)\n\tprogramStyle := lipgloss.NewStyle().Background(codeBlockStyle.GetBackground()).Foreground(lipgloss.Color(\"#7E65FF\")).PaddingLeft(1)\n\tstringStyle := lipgloss.NewStyle().Background(codeBlockStyle.GetBackground()).Foreground(lipgloss.AdaptiveColor{Light: \"#02BA84\", Dark: \"#02BF87\"}).PaddingLeft(1)\n\targumentStyle := lipgloss.NewStyle().Background(codeBlockStyle.GetBackground()).Foreground(lipgloss.Color(\"248\")).PaddingLeft(1)\n\tflagStyle := lipgloss.NewStyle().Background(codeBlockStyle.GetBackground()).Foreground(lipgloss.Color(\"244\")).PaddingLeft(1)\n\ttitleStyle := lipgloss.NewStyle().Bold(true).Transform(strings.ToUpper).Margin(1, 0, 0, 2).Foreground(lipgloss.Color(\"#6C50FF\"))\n\n\tfmt.Println()\n\tfmt.Println(\"  Generate images of code and terminal output. 📸\")\n\n\tfmt.Println(titleStyle.Render(strings.ToUpper(\"Usage\")))\n\tfmt.Println()\n\tfmt.Println(\n\t\tcodeBlockStyle.Render(\n\t\t\tlipgloss.JoinVertical(\n\t\t\t\tlipgloss.Top,\n\t\t\t\tlipgloss.JoinHorizontal(lipgloss.Left, programStyle.Render(\"freeze\"), argumentStyle.Render(\"main.go\"), flagStyle.Render(\"[-o code.svg] [--flags]\")),\n\t\t\t\tlipgloss.JoinHorizontal(lipgloss.Left, programStyle.Render(\"freeze\"), argumentStyle.Render(\"--execute\"), stringStyle.Render(\"\\\"ls -la\\\"\"), flagStyle.Render(\"[--flags]   \")),\n\t\t\t),\n\t\t),\n\t)\n\n\tflags := ctx.Flags()\n\tlastGroup := \"\"\n\n\tfmt.Println()\n\tfor _, f := range flags {\n\t\tif f.Name == \"interactive\" {\n\t\t\tprintFlag(f)\n\t\t}\n\t}\n\n\tfmt.Println(titleStyle.Render(\"Settings\"))\n\n\tfor _, f := range flags {\n\t\tif f.Group != nil && f.Group.Title == \"Settings\" {\n\t\t\tif f.Hidden || f.Name == \"help\" {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tprintFlag(f)\n\t\t}\n\t}\n\n\tfmt.Print(titleStyle.Render(\"Customization\"))\n\n\tfor _, f := range flags {\n\t\tif f.Hidden || f.Name == \"help\" || f.Group.Title == \"Settings\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tif f.Group != nil && lastGroup != f.Group.Title {\n\t\t\tlastGroup = f.Group.Title\n\t\t\tfmt.Println()\n\t\t}\n\n\t\tprintFlag(f)\n\t}\n\tfmt.Println()\n\treturn nil\n}\n\nconst helpForeground = \"243\"\n\nfunc printFlag(f *kong.Flag) {\n\tdashStyle := lipgloss.NewStyle().Foreground(lipgloss.Color(\"240\")).MarginLeft(1)\n\thelpStyle := lipgloss.NewStyle().Foreground(lipgloss.Color(helpForeground))\n\tkeywordStyle := lipgloss.NewStyle().Foreground(lipgloss.Color(\"1\"))\n\n\tif f.Short > 0 {\n\t\tfmt.Print(\"    \", dashStyle.Render(\"-\"), string(f.Short))\n\t\tfmt.Print(dashStyle.Render(\"--\"), f.Name)\n\t\tfmt.Print(strings.Repeat(\" \", space-len(f.Name)))\n\t} else {\n\t\tfmt.Print(\"    \", dashStyle.Render(\" \"), \" \")\n\t\tfmt.Print(dashStyle.Render(\"--\"), f.Name)\n\t\tfmt.Print(strings.Repeat(\" \", space-len(f.Name)))\n\t}\n\thelp := highlighter.ReplaceAllString(f.Help, keywordStyle.Render(\"$1\")+\"\\x1b[38;5;\"+helpForeground+\"m\")\n\tfmt.Println(helpStyle.Render(help))\n}\n"
        },
        {
          "name": "input",
          "type": "tree",
          "content": null
        },
        {
          "name": "interactive.go",
          "type": "blob",
          "size": 7.212890625,
          "content": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/alecthomas/chroma/v2/styles\"\n\t\"github.com/charmbracelet/huh\"\n\t\"github.com/charmbracelet/lipgloss\"\n)\n\nvar green = lipgloss.Color(\"#03BF87\")\n\nfunc runForm(config *Config) (*Config, error) {\n\tvar (\n\t\tpadding      = strings.Trim(fmt.Sprintf(\"%v\", config.Padding), \"[]\")\n\t\tmargin       = strings.Trim(fmt.Sprintf(\"%v\", config.Margin), \"[]\")\n\t\tfontSize     = fmt.Sprintf(\"%d\", int(config.Font.Size))\n\t\tlineHeight   = fmt.Sprintf(\"%.1f\", config.LineHeight)\n\t\tborderRadius = fmt.Sprintf(\"%.0f\", config.Border.Radius)\n\t\tborderWidth  = fmt.Sprintf(\"%.0f\", config.Border.Width)\n\t\tshadowBlur   = fmt.Sprintf(\"%.0f\", config.Shadow.Blur)\n\t\tshadowX      = fmt.Sprintf(\"%.0f\", config.Shadow.X)\n\t\tshadowY      = fmt.Sprintf(\"%.0f\", config.Shadow.Y)\n\t)\n\n\ttheme := huh.ThemeCharm()\n\ttheme.FieldSeparator = lipgloss.NewStyle()\n\ttheme.Blurred.TextInput.Text = theme.Blurred.TextInput.Text.Foreground(lipgloss.Color(\"243\"))\n\ttheme.Blurred.BlurredButton = lipgloss.NewStyle().Foreground(lipgloss.Color(\"8\")).PaddingRight(1)\n\ttheme.Blurred.FocusedButton = lipgloss.NewStyle().Foreground(lipgloss.Color(\"7\")).PaddingRight(1)\n\ttheme.Focused.BlurredButton = lipgloss.NewStyle().Foreground(lipgloss.Color(\"8\")).PaddingRight(1)\n\ttheme.Focused.FocusedButton = lipgloss.NewStyle().Foreground(lipgloss.Color(\"15\")).PaddingRight(1)\n\ttheme.Focused.NoteTitle = theme.Focused.NoteTitle.Margin(1, 0)\n\ttheme.Blurred.NoteTitle = theme.Blurred.NoteTitle.Margin(1, 0)\n\ttheme.Blurred.Description = theme.Blurred.Description.Foreground(lipgloss.Color(\"0\"))\n\ttheme.Focused.Description = theme.Focused.Description.Foreground(lipgloss.Color(\"7\"))\n\ttheme.Blurred.Title = theme.Blurred.Title.Width(18).Foreground(lipgloss.Color(\"7\"))\n\ttheme.Focused.Title = theme.Focused.Title.Width(18).Foreground(green).Bold(true)\n\ttheme.Blurred.SelectedOption = theme.Blurred.SelectedOption.Foreground(lipgloss.Color(\"243\"))\n\ttheme.Focused.SelectedOption = lipgloss.NewStyle().Foreground(green)\n\ttheme.Focused.Base.BorderForeground(green)\n\n\tf := huh.NewForm(\n\t\thuh.NewGroup(\n\t\t\thuh.NewNote().Title(\"\\nCapture file\"),\n\n\t\t\thuh.NewFilePicker().\n\t\t\t\tTitle(\"\").\n\t\t\t\tPicking(true).\n\t\t\t\tHeight(10).\n\t\t\t\tValue(&config.Input),\n\n\t\t\thuh.NewNote().Description(\"Choose a code file to screenshot.\"),\n\t\t).WithHide(config.Input != \"\" || config.Execute != \"\"),\n\t\thuh.NewGroup(\n\t\t\thuh.NewNote().Title(\"Settings\"),\n\n\t\t\thuh.NewInput().\n\t\t\t\tTitle(\"Output\").\n\t\t\t\tPlaceholder(defaultOutputFilename).\n\t\t\t\t// Description(\"Output location for image.\").\n\t\t\t\tInline(true).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValue(&config.Output),\n\n\t\t\thuh.NewSelect[string]().Title(\"Theme \").\n\t\t\t\t// Description(\"Theme for syntax highlighting.\").\n\t\t\t\tInline(true).\n\t\t\t\tOptions(huh.NewOptions(styles.Names()...)...).\n\t\t\t\tValue(&config.Theme),\n\n\t\t\t// huh.NewInput().Title(\"Background \").\n\t\t\t// \t// Description(\"Apply a background fill.\").\n\t\t\t// \tPlaceholder(\"#FFF\").\n\t\t\t// \tValue(&config.Background).\n\t\t\t// \tInline(true).\n\t\t\t// \tPrompt(\"\").\n\t\t\t// \tValidate(validateColor),\n\n\t\t\thuh.NewNote().Title(\"Window\"),\n\n\t\t\thuh.NewInput().Title(\"Padding \").\n\t\t\t\t// Description(\"Apply padding to the code.\").\n\t\t\t\tPlaceholder(\"20 40\").\n\t\t\t\tInline(true).\n\t\t\t\tValue(&padding).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValidate(validatePadding),\n\n\t\t\thuh.NewInput().Title(\"Margin \").\n\t\t\t\t// Description(\"Apply margin to the window.\").\n\t\t\t\tPlaceholder(\"20\").\n\t\t\t\tInline(true).\n\t\t\t\tValue(&margin).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValidate(validatePadding),\n\n\t\t\thuh.NewConfirm().Title(\"Controls\").\n\t\t\t\tInline(true).\n\t\t\t\tValue(&config.Window),\n\n\t\t\thuh.NewNote().Title(\"Font\"),\n\n\t\t\thuh.NewInput().Title(\"Font Family \").\n\t\t\t\t// Description(\"Font family to use for code\").\n\t\t\t\tPlaceholder(\"JetBrains Mono\").\n\t\t\t\tInline(true).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValue(&config.Font.Family),\n\n\t\t\thuh.NewInput().Title(\"Font Size \").\n\t\t\t\t// Description(\"Font size to use for code.\").\n\t\t\t\tPlaceholder(\"14\").\n\t\t\t\tInline(true).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValue(&fontSize).\n\t\t\t\tValidate(validateInteger),\n\n\t\t\thuh.NewInput().Title(\"Line Height \").\n\t\t\t\t// Description(\"Line height relative to size.\").\n\t\t\t\tPlaceholder(\"1.2\").\n\t\t\t\tInline(true).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValue(&lineHeight).\n\t\t\t\tValidate(validateFloat),\n\n\t\t\thuh.NewNote().Title(\"Border\"),\n\n\t\t\thuh.NewInput().Title(\"Border Radius \").\n\t\t\t\t// Description(\"Corner radius of the window.\").\n\t\t\t\tPlaceholder(\"0\").\n\t\t\t\tInline(true).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValue(&borderRadius).\n\t\t\t\tValidate(validateInteger),\n\n\t\t\thuh.NewInput().Title(\"Border Width \").\n\t\t\t\t// Description(\"Border width thickness.\").\n\t\t\t\tPlaceholder(\"1\").\n\t\t\t\tInline(true).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValue(&borderWidth).\n\t\t\t\tValidate(validateInteger),\n\n\t\t\thuh.NewInput().Title(\"Border Color \").\n\t\t\t\t// Description(\"Color of outline stroke.\").\n\t\t\t\tValidate(validateColor).\n\t\t\t\tInline(true).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValue(&config.Border.Color).\n\t\t\t\tPlaceholder(\"#515151\"),\n\n\t\t\thuh.NewNote().Title(\"Shadow\"),\n\n\t\t\thuh.NewInput().Title(\"Blur \").\n\t\t\t\t// Description(\"Shadow Gaussian Blur.\").\n\t\t\t\tPlaceholder(\"0\").\n\t\t\t\tInline(true).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValue(&shadowBlur).\n\t\t\t\tValidate(validateInteger),\n\n\t\t\thuh.NewInput().Title(\"X Offset \").\n\t\t\t\t// Description(\"Shadow offset x coordinate\").\n\t\t\t\tPlaceholder(\"0\").\n\t\t\t\tInline(true).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValue(&shadowX).\n\t\t\t\tValidate(validateInteger),\n\n\t\t\thuh.NewInput().Title(\"Y Offset \").\n\t\t\t\t// Description(\"Shadow offset y coordinate\").\n\t\t\t\tPlaceholder(\"0\").\n\t\t\t\tInline(true).\n\t\t\t\tPrompt(\"\").\n\t\t\t\tValue(&shadowY).\n\t\t\t\tValidate(validateInteger),\n\t\t).WithHeight(33),\n\t).WithTheme(theme).WithWidth(40)\n\n\terr := f.Run()\n\n\tif config.Output == \"\" {\n\t\tconfig.Output = defaultOutputFilename\n\t}\n\n\tconfig.Padding = parsePadding(padding)\n\tconfig.Margin = parseMargin(margin)\n\tconfig.Font.Size, _ = strconv.ParseFloat(fontSize, 64)\n\tconfig.LineHeight, _ = strconv.ParseFloat(lineHeight, 64)\n\tconfig.Border.Radius, _ = strconv.ParseFloat(borderRadius, 64)\n\tconfig.Border.Width, _ = strconv.ParseFloat(borderWidth, 64)\n\tconfig.Shadow.Blur, _ = strconv.ParseFloat(shadowBlur, 64)\n\tconfig.Shadow.X, _ = strconv.ParseFloat(shadowX, 64)\n\tconfig.Shadow.Y, _ = strconv.ParseFloat(shadowY, 64)\n\treturn config, err //nolint: wrapcheck\n}\n\nfunc validateMargin(s string) error {\n\ttokens := strings.Fields(s)\n\tif len(tokens) > 4 {\n\t\treturn errors.New(\"maximum four values\")\n\t}\n\tfor _, t := range tokens {\n\t\t_, err := strconv.Atoi(t)\n\t\tif err != nil {\n\t\t\treturn errors.New(\"must be valid space-separated integers\")\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc validatePadding(s string) error {\n\treturn validateMargin(s)\n}\n\nfunc validateInteger(s string) error {\n\tif len(s) <= 0 {\n\t\treturn nil\n\t}\n\n\t_, err := strconv.Atoi(s)\n\tif err != nil {\n\t\treturn errors.New(\"must be valid integer\")\n\t}\n\treturn nil\n}\n\nfunc validateFloat(s string) error {\n\tif len(s) <= 0 {\n\t\treturn nil\n\t}\n\n\t_, err := strconv.ParseFloat(s, 64)\n\tif err != nil {\n\t\treturn errors.New(\"must be valid float\")\n\t}\n\treturn nil\n}\n\nvar colorRegex = regexp.MustCompile(\"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\")\n\nfunc validateColor(s string) error {\n\tif len(s) <= 0 {\n\t\treturn nil\n\t}\n\n\tif !colorRegex.MatchString(s) {\n\t\treturn errors.New(\"must be valid color\")\n\t}\n\treturn nil\n}\n\nfunc parsePadding(v string) []float64 {\n\t//nolint: prealloc\n\tvar values []float64\n\tfor _, p := range strings.Fields(v) {\n\t\tpi, _ := strconv.ParseFloat(p, 64) // already validated\n\t\tvalues = append(values, pi)\n\t}\n\treturn expandPadding(values, 1)\n}\n\nvar parseMargin = parsePadding\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 11.8232421875,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"runtime/debug\"\n\t\"strings\"\n\n\t\"github.com/alecthomas/chroma/v2\"\n\tformatter \"github.com/alecthomas/chroma/v2/formatters/svg\"\n\t\"github.com/alecthomas/chroma/v2/lexers\"\n\t\"github.com/alecthomas/chroma/v2/styles\"\n\t\"github.com/alecthomas/kong\"\n\t\"github.com/beevik/etree\"\n\tin \"github.com/charmbracelet/freeze/input\"\n\t\"github.com/charmbracelet/freeze/svg\"\n\t\"github.com/charmbracelet/lipgloss\"\n\t\"github.com/charmbracelet/log\"\n\t\"github.com/charmbracelet/x/ansi\"\n\t\"github.com/charmbracelet/x/ansi/parser\"\n\t\"github.com/mattn/go-isatty\"\n\t\"github.com/muesli/reflow/wordwrap\"\n)\n\nconst (\n\tdefaultFontSize   = 14.0\n\tdefaultLineHeight = 1.2\n)\n\nvar (\n\t// Version contains the application version number. It's set via ldflags\n\t// when building.\n\tVersion = \"\"\n\n\t// CommitSHA contains the SHA of the commit that this application was built\n\t// against. It's set via ldflags when building.\n\tCommitSHA = \"\"\n)\n\nfunc main() {\n\tconst shaLen = 7\n\n\tvar (\n\t\tinput  string\n\t\terr    error\n\t\tlexer  chroma.Lexer\n\t\tconfig Config\n\t\tscale  float64\n\t)\n\n\tk, err := kong.New(&config, kong.Help(helpPrinter))\n\tif err != nil {\n\t\tprintErrorFatal(\"Something went wrong\", err)\n\t}\n\tctx, err := k.Parse(os.Args[1:])\n\tif err != nil || ctx.Error != nil {\n\t\tprintErrorFatal(\"Invalid Usage\", err)\n\t}\n\n\t//nolint: nestif\n\tif len(ctx.Args) > 0 {\n\t\tswitch ctx.Args[0] {\n\t\tcase \"version\":\n\t\t\tif Version == \"\" {\n\t\t\t\tif info, ok := debug.ReadBuildInfo(); ok && info.Main.Sum != \"\" {\n\t\t\t\t\tVersion = info.Main.Version\n\t\t\t\t} else {\n\t\t\t\t\tVersion = \"unknown (built from source)\"\n\t\t\t\t}\n\t\t\t}\n\t\t\tversion := fmt.Sprintf(\"freeze version %s\", Version)\n\t\t\tif len(CommitSHA) >= shaLen {\n\t\t\t\tversion += \" (\" + CommitSHA[:shaLen] + \")\"\n\t\t\t}\n\n\t\t\tfmt.Println(version)\n\t\t\tos.Exit(0)\n\t\t}\n\t}\n\n\t// Copy the pty output to buffer\n\tif config.Execute != \"\" {\n\t\tinput, err = executeCommand(config)\n\t\tif err != nil {\n\t\t\tif input != \"\" {\n\t\t\t\terr = fmt.Errorf(\"%w\\n%s\", err, input)\n\t\t\t}\n\t\t\tprintErrorFatal(\"Something went wrong\", err)\n\t\t}\n\t\tif input == \"\" {\n\t\t\tprintErrorFatal(\"Something went wrong\", errors.New(\"no command output\"))\n\t\t}\n\t}\n\n\tisDefaultConfig := config.Config == \"default\"\n\tconfigFile, err := configs.Open(\"configurations/\" + config.Config + \".json\")\n\tif config.Config == \"user\" {\n\t\tconfigFile, err = loadUserConfig()\n\t}\n\tif err != nil {\n\t\tconfigFile, err = os.Open(config.Config)\n\t}\n\tif err != nil {\n\t\tconfigFile, _ = configs.Open(\"configurations/base.json\")\n\t}\n\tr, err := kong.JSON(configFile)\n\tif err != nil {\n\t\tprintErrorFatal(\"Invalid JSON\", err)\n\t}\n\tk, err = kong.New(&config, kong.Help(helpPrinter), kong.Resolvers(r))\n\tif err != nil {\n\t\tprintErrorFatal(\"Something went wrong\", err)\n\t}\n\tctx, err = k.Parse(os.Args[1:])\n\tif err != nil {\n\t\tprintErrorFatal(\"Invalid Usage\", err)\n\t}\n\n\tif config.Interactive {\n\t\tcfg, interactiveErr := runForm(&config)\n\t\tconfig = *cfg\n\t\tif interactiveErr != nil {\n\t\t\tprintErrorFatal(\"\", interactiveErr)\n\t\t}\n\t\tif isDefaultConfig {\n\t\t\t_ = saveUserConfig(*cfg)\n\t\t}\n\t}\n\n\tautoHeight := config.Height == 0\n\tautoWidth := config.Width == 0\n\n\tif config.Output == \"\" {\n\t\tconfig.Output = defaultOutputFilename\n\t}\n\n\tscale = 1\n\tif autoHeight && autoWidth && strings.HasSuffix(config.Output, \".png\") {\n\t\tscale = 4\n\t}\n\n\tconfig.Margin = expandMargin(config.Margin, scale)\n\tconfig.Padding = expandPadding(config.Padding, scale)\n\n\tif config.Input == \"\" && !in.IsPipe(os.Stdin) && len(ctx.Args) <= 0 {\n\t\t_ = helpPrinter(kong.HelpOptions{}, ctx)\n\t\tos.Exit(0)\n\t}\n\n\tif config.Input == \"-\" || in.IsPipe(os.Stdin) {\n\t\tinput, err = in.ReadInput(os.Stdin)\n\t\tlexer = lexers.Analyse(input)\n\t} else if config.Execute != \"\" {\n\t\tconfig.Language = \"ansi\"\n\t} else {\n\t\tinput, err = in.ReadFile(config.Input)\n\t\tif err != nil {\n\t\t\tprintErrorFatal(\"File not found\", err)\n\t\t}\n\t\tlexer = lexers.Get(config.Input)\n\t}\n\n\tif config.Language != \"\" {\n\t\tlexer = lexers.Get(config.Language)\n\t}\n\n\t// adjust for 1-indexing\n\tfor i := range config.Lines {\n\t\tconfig.Lines[i]--\n\t}\n\n\tvar strippedInput string = ansi.Strip(input)\n\tisAnsi := strings.ToLower(config.Language) == \"ansi\" || strippedInput != input\n\tstrippedInput = cut(strippedInput, config.Lines)\n\n\t// wrap to character limit.\n\tif config.Wrap > 0 {\n\t\tstrippedInput = wordwrap.String(strippedInput, config.Wrap)\n\t\tinput = wordwrap.String(input, config.Wrap)\n\t}\n\n\tif !isAnsi && lexer == nil {\n\t\tprintErrorFatal(\"Language Unknown\", errors.New(\"specify a language with the --language flag\"))\n\t}\n\n\tinput = cut(input, config.Lines)\n\tif input == \"\" {\n\t\tif err != nil {\n\t\t\tprintErrorFatal(\"No input\", err)\n\t\t} else {\n\t\t\tprintErrorFatal(\"No input\", errors.New(\"check --lines is within bounds\"))\n\t\t}\n\t}\n\n\ts, ok := styles.Registry[strings.ToLower(config.Theme)]\n\tif s == nil || !ok {\n\t\ts = charmStyle\n\t}\n\tif !s.Has(chroma.Background) {\n\t\ts, err = s.Builder().Add(chroma.Background, \"bg:\"+config.Background).Build()\n\t\tif err != nil {\n\t\t\tprintErrorFatal(\"Could not add background\", err)\n\t\t}\n\t}\n\n\t// Create a token iterator.\n\tvar it chroma.Iterator\n\tif isAnsi {\n\t\t// For ANSI output, we'll inject our own SVG. For now, let's just strip the ANSI\n\t\t// codes and print the text to properly size the input.\n\t\tit = chroma.Literator(chroma.Token{Type: chroma.Text, Value: strippedInput})\n\t} else {\n\t\tit, err = chroma.Coalesce(lexer).Tokenise(nil, input)\n\t\tif err != nil {\n\t\t\tprintErrorFatal(\"Could not lex file\", err)\n\t\t}\n\t}\n\n\t// Format the code to an SVG.\n\toptions, err := fontOptions(&config)\n\tif err != nil {\n\t\tprintErrorFatal(\"Invalid font options\", err)\n\t}\n\n\tf := formatter.New(options...)\n\tif err != nil {\n\t\tprintErrorFatal(\"Malformed text\", err)\n\t}\n\n\tbuf := &bytes.Buffer{}\n\terr = f.Format(buf, s, it)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Parse SVG (XML document)\n\tdoc := etree.NewDocument()\n\t_, err = doc.ReadFrom(buf)\n\tif err != nil {\n\t\tprintErrorFatal(\"Bad SVG\", err)\n\t}\n\n\telements := doc.ChildElements()\n\tif len(elements) < 1 {\n\t\tprintErrorFatal(\"Bad Output\", nil)\n\t}\n\n\timage := elements[0]\n\n\thPadding := config.Padding[left] + config.Padding[right]\n\thMargin := config.Margin[left] + config.Margin[right]\n\tvMargin := config.Margin[top] + config.Margin[bottom]\n\tvPadding := config.Padding[top] + config.Padding[bottom]\n\n\tterminal := image.SelectElement(\"rect\")\n\n\tw, h := svg.GetDimensions(image)\n\n\timageWidth := float64(w)\n\timageHeight := float64(h)\n\n\timageWidth *= scale\n\timageHeight *= scale\n\n\t// chroma automatically calculates the height based on a font size of 14\n\t// and a line height of 1.2\n\timageHeight *= (config.Font.Size / defaultFontSize)\n\timageHeight *= (config.LineHeight / defaultLineHeight)\n\n\tterminalWidth := imageWidth\n\tterminalHeight := imageHeight\n\n\tif !autoWidth {\n\t\timageWidth = config.Width\n\t\tterminalWidth = config.Width - hMargin\n\t} else {\n\t\timageWidth += hMargin + hPadding\n\t\tterminalWidth += hPadding\n\t}\n\n\tif !autoHeight {\n\t\timageHeight = config.Height\n\t\tterminalHeight = config.Height - vMargin\n\t} else {\n\t\timageHeight += vMargin + vPadding\n\t\tterminalHeight += vPadding\n\t}\n\n\tif config.Window {\n\t\twindowControls := svg.NewWindowControls(5.5*float64(scale), 19.0*scale, 12.0*scale)\n\t\tsvg.Move(windowControls, float64(config.Margin[left]), float64(config.Margin[top]))\n\t\timage.AddChild(windowControls)\n\t\tconfig.Padding[top] += (15 * scale)\n\t}\n\n\tif config.Border.Radius > 0 {\n\t\tsvg.AddCornerRadius(terminal, config.Border.Radius*scale)\n\t}\n\n\tif config.Shadow.Blur > 0 || config.Shadow.X > 0 || config.Shadow.Y > 0 {\n\t\tid := \"shadow\"\n\t\tsvg.AddShadow(image, id, config.Shadow.X*scale, config.Shadow.Y*scale, config.Shadow.Blur*scale)\n\t\tterminal.CreateAttr(\"filter\", fmt.Sprintf(\"url(#%s)\", id))\n\t}\n\n\ttextGroup := image.SelectElement(\"g\")\n\ttextGroup.CreateAttr(\"font-size\", fmt.Sprintf(\"%.2fpx\", config.Font.Size*float64(scale)))\n\ttextGroup.CreateAttr(\"clip-path\", \"url(#terminalMask)\")\n\ttext := textGroup.SelectElements(\"text\")\n\n\td := dispatcher{lines: text, svg: textGroup, config: &config, scale: scale}\n\n\toffsetLine := 0\n\tif len(config.Lines) > 0 {\n\t\toffsetLine = config.Lines[0]\n\t}\n\n\tconfig.LineHeight *= float64(scale)\n\n\tfor i, line := range text {\n\t\tif isAnsi {\n\t\t\tline.SetText(\"\")\n\t\t}\n\t\t// Offset the text by padding...\n\t\t// (x, y) -> (x+p, y+p)\n\t\tif config.ShowLineNumbers {\n\t\t\tln := etree.NewElement(\"tspan\")\n\t\t\tln.CreateAttr(\"xml:space\", \"preserve\")\n\t\t\tln.CreateAttr(\"fill\", s.Get(chroma.LineNumbers).Colour.String())\n\t\t\tln.SetText(fmt.Sprintf(\"%3d  \", i+1+offsetLine))\n\t\t\tline.InsertChildAt(0, ln)\n\t\t}\n\t\tx := float64(config.Padding[left] + config.Margin[left])\n\t\ty := (float64(i+1))*(config.Font.Size*config.LineHeight) + float64(config.Padding[top]) + float64(config.Margin[top])\n\n\t\tsvg.Move(line, x, y)\n\n\t\t// We are passed visible lines, remove the rest.\n\t\tif y > float64(imageHeight-config.Margin[bottom]-config.Padding[bottom]) {\n\t\t\ttextGroup.RemoveChild(line)\n\t\t}\n\t}\n\n\tif autoWidth {\n\t\ttabWidth := 4\n\t\tif isAnsi {\n\t\t\ttabWidth = 6\n\t\t}\n\t\tlongestLine := lipgloss.Width(strings.ReplaceAll(strippedInput, \"\\t\", strings.Repeat(\" \", tabWidth)))\n\t\tterminalWidth = float64(longestLine+1) * (config.Font.Size / fontHeightToWidthRatio)\n\t\tterminalWidth *= scale\n\t\tterminalWidth += hPadding\n\t\timageWidth = terminalWidth + hMargin\n\t}\n\n\tif config.Border.Width > 0 {\n\t\tsvg.AddOutline(terminal, config.Border.Width, config.Border.Color)\n\n\t\t// NOTE: necessary so that we don't clip the outline.\n\t\tterminalHeight -= (config.Border.Width * 2)\n\t\tterminalWidth -= (config.Border.Width * 2)\n\t}\n\n\tif config.ShowLineNumbers {\n\t\tif autoWidth {\n\t\t\tterminalWidth += config.Font.Size * 3 * scale\n\t\t\timageWidth += config.Font.Size * 3 * scale\n\t\t} else {\n\t\t\tterminalWidth -= config.Font.Size * 3\n\t\t}\n\t}\n\n\tif !autoHeight || !autoWidth {\n\t\tsvg.AddClipPath(image, \"terminalMask\",\n\t\t\tconfig.Margin[left], config.Margin[top],\n\t\t\tterminalWidth, terminalHeight-config.Padding[bottom])\n\t}\n\n\tsvg.Move(terminal, max(float64(config.Margin[left]), float64(config.Border.Width)/2), max(float64(config.Margin[top]), float64(config.Border.Width)/2))\n\tsvg.SetDimensions(image, imageWidth, imageHeight)\n\tsvg.SetDimensions(terminal, terminalWidth, terminalHeight)\n\n\tif isAnsi {\n\t\tparser := ansi.NewParser(parser.MaxParamsSize, 0)\n\t\t// parser := ansi.Parser{\n\t\t// \tPrint:       d.Print,\n\t\t// \tExecute:     d.Execute,\n\t\t// \tCsiDispatch: d.CsiDispatch,\n\t\t// }\n\t\tfor _, line := range strings.Split(input, \"\\n\") {\n\t\t\tparser.Parse(d.dispatch, []byte(line))\n\t\t\td.Execute(ansi.LF) // simulate a newline\n\t\t}\n\t}\n\n\tistty := isatty.IsTerminal(os.Stdout.Fd())\n\n\tswitch {\n\tcase strings.HasSuffix(config.Output, \".png\"):\n\t\t// use libsvg conversion.\n\t\tsvgConversionErr := libsvgConvert(doc, imageWidth, imageHeight, config.Output)\n\t\tif svgConversionErr == nil {\n\t\t\tprintFilenameOutput(config.Output)\n\t\t\tbreak\n\t\t}\n\n\t\t// could not convert with libsvg, try resvg\n\t\tsvgConversionErr = resvgConvert(doc, imageWidth, imageHeight, config.Output)\n\t\tif svgConversionErr != nil {\n\t\t\tprintErrorFatal(\"Unable to convert SVG to PNG\", svgConversionErr)\n\t\t}\n\t\tprintFilenameOutput(config.Output)\n\n\tdefault:\n\t\t// output file specified.\n\t\tif config.Output != \"\" {\n\t\t\terr = doc.WriteToFile(config.Output)\n\t\t\tif err != nil {\n\t\t\t\tprintErrorFatal(\"Unable to write output\", err)\n\t\t\t}\n\t\t\tprintFilenameOutput(config.Output)\n\t\t\treturn\n\t\t}\n\n\t\t// reading from stdin.\n\t\tif config.Input == \"\" || config.Input == \"-\" {\n\t\t\tif istty {\n\t\t\t\terr = doc.WriteToFile(defaultOutputFilename)\n\t\t\t\tprintFilenameOutput(defaultOutputFilename)\n\t\t\t} else {\n\t\t\t\t_, err = doc.WriteTo(os.Stdout)\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tprintErrorFatal(\"Unable to write output\", err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\t// reading from file.\n\t\tif istty {\n\t\t\tconfig.Output = strings.TrimSuffix(filepath.Base(config.Input), filepath.Ext(config.Input)) + \".svg\"\n\t\t\terr = doc.WriteToFile(config.Output)\n\t\t\tprintFilenameOutput(config.Output)\n\t\t} else {\n\t\t\t_, err = doc.WriteTo(os.Stdout)\n\t\t}\n\t\tif err != nil {\n\t\t\tprintErrorFatal(\"Unable to write output\", err)\n\t\t}\n\t}\n}\n\nvar outputHeader = lipgloss.NewStyle().Foreground(lipgloss.Color(\"#F1F1F1\")).Background(lipgloss.Color(\"#6C50FF\")).Bold(true).Padding(0, 1).MarginRight(1).SetString(\"WROTE\")\n\nfunc printFilenameOutput(filename string) {\n\tfmt.Println(lipgloss.JoinHorizontal(lipgloss.Center, outputHeader.String(), filename))\n}\n"
        },
        {
          "name": "png.go",
          "type": "blob",
          "size": 2.3837890625,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"os\"\n\t\"os/exec\"\n\n\t\"github.com/beevik/etree\"\n\t\"github.com/charmbracelet/freeze/font\"\n\t\"github.com/kanrichan/resvg-go\"\n)\n\nfunc libsvgConvert(doc *etree.Document, _, _ float64, output string) error {\n\t_, err := exec.LookPath(\"rsvg-convert\")\n\tif err != nil {\n\t\treturn err //nolint: wrapcheck\n\t}\n\n\tsvg, err := doc.WriteToBytes()\n\tif err != nil {\n\t\treturn err //nolint: wrapcheck\n\t}\n\n\t// rsvg-convert is installed use that to convert the SVG to PNG,\n\t// since it is faster.\n\trsvgConvert := exec.Command(\"rsvg-convert\", \"-o\", output)\n\trsvgConvert.Stdin = bytes.NewReader(svg)\n\terr = rsvgConvert.Run()\n\treturn err //nolint: wrapcheck\n}\n\nfunc resvgConvert(doc *etree.Document, w, h float64, output string) error {\n\tsvg, err := doc.WriteToBytes()\n\tif err != nil {\n\t\treturn err //nolint: wrapcheck\n\t}\n\n\tworker, err := resvg.NewDefaultWorker(context.Background())\n\tif err != nil {\n\t\tprintErrorFatal(\"Unable to write output\", err)\n\t}\n\tdefer worker.Close() //nolint: errcheck\n\n\tfontdb, err := worker.NewFontDBDefault()\n\tif err != nil {\n\t\tprintErrorFatal(\"Unable to write output\", err)\n\t}\n\tdefer fontdb.Close() //nolint: errcheck\n\terr = fontdb.LoadFontData(font.JetBrainsMonoTTF)\n\tif err != nil {\n\t\tprintErrorFatal(\"Unable to load font\", err)\n\t}\n\terr = fontdb.LoadFontData(font.JetBrainsMonoNLTTF)\n\tif err != nil {\n\t\tprintErrorFatal(\"Unable to load font\", err)\n\t}\n\n\tpixmap, err := worker.NewPixmap(uint32(w), uint32(h))\n\tif err != nil {\n\t\tprintError(\"Unable to write output\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer pixmap.Close() //nolint: errcheck\n\n\ttree, err := worker.NewTreeFromData(svg, &resvg.Options{\n\t\tDpi:                192,\n\t\tShapeRenderingMode: resvg.ShapeRenderingModeGeometricPrecision,\n\t\tTextRenderingMode:  resvg.TextRenderingModeOptimizeLegibility,\n\t\tImageRenderingMode: resvg.ImageRenderingModeOptimizeQuality,\n\t\tDefaultSizeWidth:   float32(w),\n\t\tDefaultSizeHeight:  float32(h),\n\t})\n\tif err != nil {\n\t\tprintError(\"Unable to write output\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer tree.Close() //nolint: errcheck\n\n\terr = tree.ConvertText(fontdb)\n\tif err != nil {\n\t\treturn err //nolint: wrapcheck\n\t}\n\terr = tree.Render(resvg.TransformIdentity(), pixmap)\n\tif err != nil {\n\t\treturn err //nolint: wrapcheck\n\t}\n\tpng, err := pixmap.EncodePNG()\n\tif err != nil {\n\t\treturn err //nolint: wrapcheck\n\t}\n\n\terr = os.WriteFile(output, png, 0o600)\n\tif err != nil {\n\t\treturn err //nolint: wrapcheck\n\t}\n\treturn err //nolint: wrapcheck\n}\n"
        },
        {
          "name": "pty.go",
          "type": "blob",
          "size": 1.1279296875,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\n\t\"github.com/caarlos0/go-shellwords\"\n\t\"github.com/charmbracelet/x/term\"\n\t\"github.com/charmbracelet/x/xpty\"\n)\n\nfunc executeCommand(config Config) (string, error) {\n\targs, err := shellwords.Parse(config.Execute)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"could not execute: %w\", err)\n\t}\n\n\tctx, cancel := context.WithTimeout(context.Background(), config.ExecuteTimeout)\n\tdefer cancel()\n\n\twidth, height, err := term.GetSize(os.Stdout.Fd())\n\tif err != nil {\n\t\twidth = 80\n\t\theight = 24\n\t}\n\n\tpty, err := xpty.NewPty(width, height)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"could not execute: %w\", err)\n\t}\n\tdefer func() { _ = pty.Close() }()\n\n\tcmd := exec.CommandContext(ctx, args[0], args[1:]...) //nolint: gosec\n\tif err := pty.Start(cmd); err != nil {\n\t\treturn \"\", fmt.Errorf(\"could not execute: %w\", err)\n\t}\n\n\tvar out bytes.Buffer\n\tvar errorOut bytes.Buffer\n\tgo func() {\n\t\t_, _ = io.Copy(&out, pty)\n\t\terrorOut.Write(out.Bytes())\n\t}()\n\n\tif err := xpty.WaitProcess(ctx, cmd); err != nil {\n\t\treturn errorOut.String(), fmt.Errorf(\"could not execute: %w\", err)\n\t}\n\treturn out.String(), nil\n}\n"
        },
        {
          "name": "style.go",
          "type": "blob",
          "size": 1.228515625,
          "content": "package main\n\nimport (\n\t\"github.com/alecthomas/chroma/v2\"\n\t\"github.com/alecthomas/chroma/v2/styles\"\n)\n\nvar charmStyle = styles.Register(chroma.MustNewStyle(\"charm\", chroma.StyleEntries{\n\tchroma.Text:                \"#C4C4C4\",\n\tchroma.Error:               \"#F1F1F1 bg:#F05B5B\",\n\tchroma.Comment:             \"#676767\",\n\tchroma.CommentPreproc:      \"#FF875F\",\n\tchroma.Keyword:             \"#00AAFF\",\n\tchroma.KeywordReserved:     \"#FF48DD\",\n\tchroma.KeywordNamespace:    \"#FF5F87\",\n\tchroma.KeywordType:         \"#635ADF\",\n\tchroma.Operator:            \"#FF7F83\",\n\tchroma.Punctuation:         \"#E8E8A8\",\n\tchroma.Name:                \"#C4C4C4\",\n\tchroma.NameBuiltin:         \"#FF7CDB\",\n\tchroma.NameTag:             \"#B083EA\",\n\tchroma.NameAttribute:       \"#7A7AE6\",\n\tchroma.NameClass:           \"#F1F1F1 underline bold\",\n\tchroma.NameDecorator:       \"#FFFF87\",\n\tchroma.NameFunction:        \"#00DC7F\",\n\tchroma.LiteralNumber:       \"#6EEFC0\",\n\tchroma.LiteralString:       \"#E38356\",\n\tchroma.LiteralStringEscape: \"#AFFFD7\",\n\tchroma.GenericDeleted:      \"#FD5B5B\",\n\tchroma.GenericEmph:         \"italic\",\n\tchroma.GenericInserted:     \"#00D787\",\n\tchroma.GenericStrong:       \"bold\",\n\tchroma.GenericSubheading:   \"#777777\",\n\t// chroma.Background:          \"bg:#171717\",\n}))\n"
        },
        {
          "name": "svg",
          "type": "tree",
          "content": null
        },
        {
          "name": "tapes",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}