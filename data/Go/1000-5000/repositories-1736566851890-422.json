{
  "metadata": {
    "timestamp": 1736566851890,
    "page": 422,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "francoismichel/ssh3",
      "stars": 3302,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": "/bin/"
        },
        {
          "name": ".goreleaser-client-only-windows.yml",
          "type": "blob",
          "size": 1.486328125,
          "content": "# This is an example .goreleaser.yml file with some sensible defaults.\n# Make sure to check the documentation at https://goreleaser.com\n\n# The lines below are called `modelines`. See `:help modeline`\n# Feel free to remove those if you don't want/need to use them.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json\n# vim: set ts=2 sw=2 tw=0 fo=cnqoj\n\nversion: 1\n\nbefore:\n  hooks:\n    # You may remove this if you don't use go modules.\n    - go mod tidy\n    # you may remove this if you don't need go generate\n    - go generate ./...\n\nbuilds:\n  - \n    id: \"ssh3\"\n    main: ./cmd/ssh3/main.go\n    binary: ssh3\n    goos:\n      - windows\n    goarch:\n      - '386'\n      - amd64\n      - arm\n      - arm64\n      \narchives:\n  - format: tar.gz\n    format_overrides:\n      - goos: windows\n        format: zip\n    name_template: >-\n      {{ .ProjectName }}_\n      {{- .Version }}_clientonly_\n      {{- .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - \"^docs:\"\n      - \"^test:\"\n\nchecksum:\n  name_template: '{{ .ProjectName }}_{{ .Version }}_clientonly_windows_checksums.txt'\n\nrelease:\n  # If set to auto, will mark the release as not ready for production\n  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1\n  # If set to true, will mark the release as not ready for production.\n  # Default is false.\n  prerelease: auto\n"
        },
        {
          "name": ".goreleaser-linux-amd64.yml",
          "type": "blob",
          "size": 2.2353515625,
          "content": "# This is an example .goreleaser.yml file with some sensible defaults.\n# Make sure to check the documentation at https://goreleaser.com\n\n# The lines below are called `modelines`. See `:help modeline`\n# Feel free to remove those if you don't want/need to use them.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json\n# vim: set ts=2 sw=2 tw=0 fo=cnqoj\n\nversion: 1\n\nbefore:\n  hooks:\n    # You may remove this if you don't use go modules.\n    - go mod tidy\n    # you may remove this if you don't need go generate\n    - go generate ./...\n\nbuilds:\n  - \n    id: \"ssh3\"\n    main: ./cmd/ssh3/main.go\n    binary: ssh3\n    goos:\n      - linux\n    goarch:\n      - amd64\n    tags:\n      - osusergo\n      - netgo\n      - static_build\n      - feature\n  - \n    id: \"ssh3-server\"\n    main: ./cmd/ssh3-server/main.go\n    binary: ssh3-server\n    env:\n      - CGO_ENABLED=1\n      - CC=/usr/local/musl/bin/musl-gcc\n      - CGO_CFLAGS=-I/usr/local/musl/include/\n    goos:\n      - linux\n    goarch:\n      - amd64\n    hooks:\n      pre:\n        - sudo cp /usr/bin/{{ .Arch }}-ld /usr/bin/ld\n    overrides:\n      - goos: linux\n        goarch: arm64\n        env:\n          - CC=/tmp/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc\n          - CGO_ENABLED=1\n          - CGO_CFLAGS=\n        ldflags:\n          - -extld=/tmp/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc\n          - -extldflags=-static\n          - -linkmode=external\n    tags:\n      - osusergo\n      - netgo\n      - static_build\n      - feature\n    ldflags:\n      - -extldflags=-static\n      - -linkmode=external\n      \narchives:\n  - format: tar.gz\n    name_template: >-\n      {{ .ProjectName }}_\n      {{- .Version }}_linux_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - \"^docs:\"\n      - \"^test:\"\n\nchecksum:\n  name_template: '{{ .ProjectName }}_{{ .Version }}_linux_x86_64_checksums.txt'\n\n\nrelease:\n  # If set to auto, will mark the release as not ready for production\n  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1\n  # If set to true, will mark the release as not ready for production.\n  # Default is false.\n  prerelease: auto"
        },
        {
          "name": ".goreleaser-linux-arm64.yml",
          "type": "blob",
          "size": 1.9619140625,
          "content": "# This is an example .goreleaser.yml file with some sensible defaults.\n# Make sure to check the documentation at https://goreleaser.com\n\n# The lines below are called `modelines`. See `:help modeline`\n# Feel free to remove those if you don't want/need to use them.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json\n# vim: set ts=2 sw=2 tw=0 fo=cnqoj\n\nversion: 1\n\nbefore:\n  hooks:\n    # You may remove this if you don't use go modules.\n    - go mod tidy\n    # you may remove this if you don't need go generate\n    - go generate ./...\n\nbuilds:\n  - \n    id: \"ssh3\"\n    main: ./cmd/ssh3/main.go\n    binary: ssh3\n    goos:\n      - linux\n    goarch: \n      - arm64\n    tags:\n      - osusergo\n      - netgo\n      - static_build\n      - feature\n  - \n    id: \"ssh3-server\"\n    main: ./cmd/ssh3-server/main.go\n    binary: ssh3-server\n    env:\n      - CC=/tmp/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc\n      - CGO_ENABLED=1\n      - CGO_CFLAGS=\n    ldflags:\n      - -extld=/tmp/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc\n      - -extldflags=-static\n      - -linkmode=external\n    goos:\n      - linux\n    goarch:\n      - arm64\n    hooks:\n      pre:\n        - sudo cp /usr/bin/{{ .Arch }}-ld /usr/bin/ld\n    tags:\n      - osusergo\n      - netgo\n      - static_build\n      - feature\n\narchives:\n  - format: tar.gz\n    name_template: >-\n      {{ .ProjectName }}_\n      {{- .Version }}_linux_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - \"^docs:\"\n      - \"^test:\"\n\nchecksum:\n  name_template: '{{ .ProjectName }}_{{ .Version }}_linux_arm64_checksums.txt'\n\n\nrelease:\n  # If set to auto, will mark the release as not ready for production\n  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1\n  # If set to true, will mark the release as not ready for production.\n  # Default is false.\n  prerelease: auto"
        },
        {
          "name": ".goreleaser-unix.yml",
          "type": "blob",
          "size": 2.044921875,
          "content": "# This is an example .goreleaser.yml file with some sensible defaults.\n# Make sure to check the documentation at https://goreleaser.com\n\n# The lines below are called `modelines`. See `:help modeline`\n# Feel free to remove those if you don't want/need to use them.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json\n# vim: set ts=2 sw=2 tw=0 fo=cnqoj\n\nversion: 1\n\nbefore:\n  hooks:\n    # You may remove this if you don't use go modules.\n    - go mod tidy\n    # you may remove this if you don't need go generate\n    - go generate ./...\n\nbuilds:\n  - \n    id: \"ssh3\"\n    main: ./cmd/ssh3/main.go\n    binary: ssh3\n    goos:\n      - darwin\n      - freebsd\n      - openbsd\n    goarch:\n      - amd64\n      - arm64\n      - arm\n      - 386\n    ignore:\n      - goos: linux\n        goarch: amd64\n      - goos: linux\n        goarch: arm64\n    tags:\n      - osusergo\n      - netgo\n      - static_build\n  -\n    id: \"ssh3-server\"\n    main: ./cmd/ssh3-server/main.go\n    binary: ssh3-server\n    goos:\n      - darwin\n      - freebsd\n      - openbsd\n    goarch:\n      - amd64\n      - arm64\n      - arm\n      - 386\n    ignore:\n      - goos: linux\n        goarch: amd64\n      - goos: linux\n        goarch: arm64\n    tags:\n      - osusergo\n      - netgo\n      - static_build\n      - disable_password_auth\narchives:\n  - format: tar.gz\n    # this name template makes the OS and Arch compatible with the results of `uname`.\n    name_template: >-\n      {{ .ProjectName }}_\n      {{- .Version }}_{{ .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - \"^docs:\"\n      - \"^test:\"\n\nchecksum:\n  name_template: '{{ .ProjectName }}_{{ .Version }}_other_unix_checksums.txt'\n\n\nrelease:\n  # If set to auto, will mark the release as not ready for production\n  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1\n  # If set to true, will mark the release as not ready for production.\n  # Default is false.\n  prerelease: auto\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.1845703125,
          "content": "GOOS?=linux\nBUILDFLAGS ?=-ldflags \"-X main.version=$(shell git describe --tags --always --dirty) -X main.buildDate=$(shell date +%Y-%m-%d)\"\n\nGO_OPTS?=CGO_ENABLED=$(CGO_ENABLED) GOOS=$(GOOS)\nGO_TAGS?=\nTEST_OPTS?=GOOS=$(GOOS) GOARCH=$(GOARCH)\n\nlint:\n\tgo fmt ./...\n\t# FIXME: fix vet errors before turning this on\n\t# go vet ./...\n\ntest:\n\t$(TEST_OPTS) go test ./...\n\t$(TEST_OPTS) go run github.com/onsi/ginkgo/v2/ginkgo -r\n\nintegration-tests:\n\tCERT_PEM=$(CERT_PEM) \\\n\t\tCERT_PRIV_KEY=$(CERT_PRIV_KEY) \\\n\t\tATTACKER_PRIVKEY=$(ATTACKER_PRIVKEY) \\\n\t\tTESTUSER_PRIVKEY=$(TESTUSER_PRIVKEY) \\\n\t\tTESTUSER_ED25519_PRIVKEY=$(TESTUSER_ED25519_PRIVKEY) \\\n\t\tTESTUSER_ECDSA_PRIVKEY=$(TESTUSER_ECDSA_PRIVKEY) \\\n\t\tTESTUSER_USERNAME=$(TESTUSER_USERNAME) \\\n\t\tCC=$(CC) \\\n\t\tCGO_ENABLED=1 \\\n\t\tGOOS=$(GOOS) \\\n\t\tSSH3_INTEGRATION_TESTS_WITH_SERVER_ENABLED=1 \\\n\t\tgo run github.com/onsi/ginkgo/v2/ginkgo ./integration_tests\n\ninstall:\n\t$(GO_OPTS) go install $(BUILDFLAGS) ./cmd/ssh3\n\t$(GO_OPTS) go install $(BUILDFLAGS) ./cmd/ssh3-server\n\nbuild: client server\n\nclient:\n\t$(GO_OPTS) go build -tags \"$(GO_TAGS)\" $(BUILD_FLAGS) -o bin/client ./cmd/ssh3/\n\nserver:\n\t$(GO_OPTS) go build -tags \"$(GO_TAGS)\" $(BUILD_FLAGS) -o bin/server ./cmd/ssh3-server/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.9990234375,
          "content": "\n<div align=center>\n<img src=\"resources/figures/ssh3.png\" style=\"display: block; width: 60%\">\n</div>\n\n> [!NOTE]\n> SSH3 is probably going to change its name. It is still the SSH Connection Protocol (RFC4254) running on top of HTTP/3 Extended connect, but the required changes are heavy and\n> too distant from the philosophy of popular SSH implementations to be considered for integration. The [specification draft](https://datatracker.ietf.org/doc/draft-michel-remote-terminal-http3/) has already been renamed (\"Remote Terminals over HTTP/3\"),\n> but we need some time to come up with a nice permanent name.\n\n# SSH3: faster and rich secure shell using HTTP/3\nSSH3 is a complete revisit of the SSH\nprotocol, mapping its semantics on top of the HTTP mechanisms. It comes from our research work and we (researchers) recently proposed it as an [Internet-Draft](https://www.ietf.org/how/ids/) ([draft-michel-remote-terminal-http3-00](https://datatracker.ietf.org/doc/draft-michel-remote-terminal-http3/)).\n\nIn a nutshell, SSH3 uses [QUIC](https://datatracker.ietf.org/doc/html/rfc9000)+[TLS1.3](https://datatracker.ietf.org/doc/html/rfc8446) for\nsecure channel establishment and the [HTTP Authorization](https://www.rfc-editor.org/rfc/rfc9110.html#name-authorization) mechanisms for user authentication.\nAmong others, SSH3 allows the following improvements:\n- Significantly faster session establishment\n- New HTTP authentication methods such as [OAuth 2.0](https://datatracker.ietf.org/doc/html/rfc6749) and [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html) in addition to classical SSH authentication\n- Robustness to port scanning attacks: your SSH3 server can be made **invisible** to other Internet users\n- UDP port forwarding in addition to classical TCP port forwarding\n- All the features allowed by the modern QUIC protocol: including connection migration (soon) and multipath connections\n\n> [!TIP]\n> Quickly want to get started ? Checkout how to [install SSH3](#installing-ssh3). You will learn to [setup an SSH3 server](#deploying-an-ssh3-server) and [use the SSH3 client](#using-the-ssh3-client).\n\n## ⚡ SSH3 is faster\nFaster for session establishment, not throughput ! SSH3 offers a significantly faster session establishment than SSHv2. Establishing a new session with SSHv2 can take 5 to 7 network round-trip times, which can easily be noticed by the user. SSH3 only needs 3 round-trip times. The keystroke latency in a running session is unchanged.\n\n<p align=\"center\">\n<img src=\"resources/figures/ssh3_100ms_rtt.gif\"/>\n<i>SSH3 (top) VS SSHv2 (bottom) session establishement with a 100ms ping towards the server.</i>\n</p>\n\n## 🔒 SSH3 security\nWhile SSHv2 defines its own protocols for user authentication and secure channel establishment, SSH3 relies on the robust and time-tested mechanisms of TLS 1.3, QUIC and HTTP. These protocols are already extensively used to secure security-critical applications on the Internet such as e-commerce and Internet banking.\n\nSSH3 already implements the common password-based and public-key (RSA and EdDSA/ed25519) authentication methods. It also supports new authentication methods such as OAuth 2.0 and allows logging in to your servers using your Google/Microsoft/Github accounts.\n\n### 🧪 SSH3 is still experimental\nWhile SSH3 shows promise for faster session establishment, it is still at an early proof-of-concept stage. As with any new complex protocol, **expert cryptographic review over an extended timeframe is required before reasonable security conclusions can be made**.\n\nWe are developing SSH3 as an open source project to facilitate community feedback and analysis. However, we **cannot yet endorse its appropriateness for production systems** without further peer review. Please collaborate with us if you have relevant expertise!\n\n### 🥷 Do not deploy the SSH3 server on your production servers for now\nGiven the current prototype state, we advise *testing SSH3 in sandboxed environments or private networks*. Be aware that making experimental servers directly Internet-accessible could introduce risk before thorough security vetting.\n\nWhile [hiding](#-your-ssh3-public-server-can-be-hidden) servers behind secret paths has potential benefits, it does not negate the need for rigorous vulnerability analysis before entering production. We are excited by SSH3's future possibilities but encourage additional scrutiny first.\n\n## 🥷 Your SSH3 public server can be hidden\nUsing SSH3, you can avoid the usual stress of scanning and dictionary attacks against your SSH server. Similarly to your secret Google Drive documents, your SSH3 server can be hidden behind a secret link and only answer to authentication attempts that made an HTTP request to this specific link, like the following:\n\n    ssh3-server -bind 192.0.2.0:443 -url-path <my-long-secret>\n\nBy replacing `<my-long-secret>` by, let's say, the random value `M3MzkxYWMxMjYxMjc5YzJkODZiMTAyMjU`, your SSH3 server will only answer to SSH3 connection attempts made to the URL `https://192.0.2.0:443/M3MzkxYWMxMjYxMjc5YzJkODZiMTAyMjU` and it will respond a `404 Not Found` to other requests. Attackers and crawlers on the Internet can therefore not detect the presence of your SSH3 server. They will only see a simple web server answering 404 status codes to every request.\n\n**NOTE WELL**: placing your SSH3 server behind a secret URL may reduce the impact of scanning attacks but will and must *never* replace classical authentication mechanisms. The secret link should only be used to avoid your host to be discovered. Knowing the secret URL should not grant someone access to your server. Use the classical authentication mechanisms described above to protect your server. \n\n## 💐 SSH3 is already feature-rich\nSSH3 provides new feature that could not be provided by the SSHv2 protocol.\n\n### Brand new features\n- **UDP port forwarding**: you can now access your QUIC, DNS, RTP or any UDP-based server that are only reachable from your SSH3 host.\nUDP packets are forwarded using QUIC datagrams.\n- **X.509 certificates**: you can now use your classical HTTPS certificates to authenticate your SSH3 server. This mechanism is more secure than the classical SSHv2 host key mechanism. Certificates can be obtained easily using LetsEncrypt for instance.\n- **Hiding** your server behind a secret link.\n- **Keyless** secure user authentication using **OpenID Connect**. You can connect to your SSH3 server using the SSO of your company or your Google/Github account, and you don't need to copy the public keys of your users anymore.\n\n### Famous OpenSSH features implemented\nThis SSH3 implementation already provides many of the popular features of OpenSSH, so if you are used to OpenSSH, the process of adopting SSH3 will be smooth. Here is a list of some OpenSSH features that SSH3 also implements:\n- Parses `~/.ssh/authorized_keys` on the server\n- Certificate-based server authentication\n- `known_hosts` mechanism when X.509 certificates are not used.\n- Automatically using the `ssh-agent` for public key authentication\n- SSH agent forwarding to use your local keys on your remote server\n- Direct TCP port forwarding (reverse port forwarding will be implemented in the future)\n- Proxy jump (see the `-proxy-jump` parameter). If A is an SSH3 client and B and C are both SSH3 servers, you can connect from A to C using B as a gateway/proxy. The proxy uses UDP forwarding to forward the QUIC packets from A to C, so B cannot decrypt the traffic A<->C SSH3 traffic.\n- Parses `~/.ssh/config` on the client and handles the `Hostname`, `User`, `Port` and `IdentityFile` config options (the other options are currently ignored). Also parses a new `UDPProxyJump` that behaves similarly to OpenSSH's `ProxyJump`.\n\n## 🙏 Community support\nHelp us progress SSH3 responsibly! We welcome capable security researchers to review our codebase and provide feedback. Please also connect us with relevant standards bodies to potentially advance SSH3 through the formal IETF/IRTF processes over time.\n\nWith collaborative assistance, we hope to iteratively improve SSH3 towards safe production readiness. But we cannot credibly make definitive security claims without evidence of extensive expert cryptographic review and adoption by respected security authorities. Let's work together to realize SSH3's possibilities!\n\n## Installing SSH3\nYou can either download the last [release binaries](https://github.com/francoismichel/ssh3/releases),\n[install it using `go install`](#installing-ssh3-and-ssh3-server-using-go-install) or generate these binaries yourself by compiling the code from source.\n\n> [!TIP]\n> SSH3 is still experimental and is the fruit of a research work. If you are afraid of deploying publicly a new SSH3 server, you can use the\n> [secret path](#-your-ssh3-public-server-can-be-hidden) feature of SSH3 to hide it behing a secret URL.\n\n### Installing ssh3 and ssh3-server using Go install\n```bash\ngo install github.com/francoismichel/ssh3/cmd/...@latest\n```\n\n\n\n### Compiling SSH3 from source\nYou need a recent [Golang](https://go.dev/dl/) version to do this.\nDownloading the source code and compiling the binaries can be done with the following steps:\n\n```bash\ngit clone https://github.com/francoismichel/ssh3    # clone the repo\ncd ssh3\ngo build -o ssh3 cmd/ssh3/main.go                        # build the client\nCGO_ENABLED=1 go build -o ssh3-server cmd/ssh3-server/main.go   # build the server, requires having gcc installed\n```\n\nIf you have root/sudo privileges and you want to make ssh3 accessible to all you users,\nyou can then directly copy the binaries to `/usr/bin`:\n\n```bash\ncp ssh3 /usr/bin/ && cp ssh3-server /usr/bin\n```\n\nOtherwise, you can simply add the executables to your `PATH` environment variable by adding\nthe following line at the end of your `.bashrc` or equivalent:\n\n```bash\nexport PATH=$PATH:/path/to/the/ssh3/directory\n```\n\n### Deploying an SSH3 server\nBefore connecting to your host, you need to deploy an SSH3 server on it. There is currently\nno SSH3 daemon, so right now, you will have to run the `ssh3-server` executable in background\nusing `screen` or a similar utility.\n\n\n> [!NOTE]\n> As SSH3 runs on top of HTTP/3, a server needs an X.509 certificate and its corresponding private key. Public certificates can be generated automatically for your public domain name through Let's Encrypt using the `-generate-public-cert` command-line argument on the server. If you do not want to generate a certificate signed by a real certificate authority or if you don't have any public domain name, you can generate a self-signed one using the `-generate-selfsigned-cert` command-line argument. Self-signed certificates provide you with similar security guarantees to SSHv2's host keys mechanism, with the same security issue: you may be vulnerable to machine-in-the-middle attacks during your first connection to your server. Using real certificates signed by public certificate authorities such as Let's Encrypt avoids this issue.\n\n\nHere is the usage of the `ssh3-server` executable:\n\n```\nUsage of ./ssh3-server:\n  -bind string\n        the address:port pair to listen to, e.g. 0.0.0.0:443 (default \"[::]:443\")\n  -cert string\n        the filename of the server certificate (or fullchain) (default \"./cert.pem\")\n  -key string\n        the filename of the certificate private key (default \"./priv.key\")\n  -enable-password-login\n        if set, enable password authentication (disabled by default)\n  -generate-public-cert value\n        Automatically produce and use a valid public certificate usingLet's Encrypt for the provided domain name. The flag can be used several times to generate several certificates.If certificates have already been generated previously using this flag, they will simply be reused without being regenerated. The public certificates are automatically renewed as long as the server is running. Automatically-generated IP public certificates are not available yet.\n  -generate-selfsigned-cert\n        if set, generates a self-self-signed cerificate and key that will be stored at the paths indicated by the -cert and -key args (they must not already exist)\n  -url-path string\n        the secret URL path on which the ssh3 server listens (default \"/ssh3-term\")\n  -v    verbose mode, if set\n  -version\n        if set, displays the software version on standard output and exit\n```\n\nThe following command starts a public SSH3 server on port 443 with a valid Let's Encrypt public certificate\nfor domain `my-domain.example.org` and answers to new sessions requests querying the `/ssh3` URL path:\n\n    ssh3-server -generate-public-cert my-domain.example.org -url-path /ssh3\n\nIf you don't have a public domain name (i.e. only an IP address), you can either use an existing certificate\nfor your IP address using the `-cert` and `-key` arguments or generate a self-signed certificate using the\n`-generate-selfsigned-cert` argument.\n\nIf you have existing certificates and keys, you can run the server as follows to use them=\n\n    ssh3-server -cert /path/to/cert/or/fullchain -key /path/to/cert/private/key -url-path /ssh3\n\n> [!NOTE]\n> Similarly to OpenSSH, the server must be run with root priviledges to log in as other users.\n\n#### Authorized keys and authorized identities\nBy default, the SSH3 server will look for identities in the `~/.ssh/authorized_keys` and `~/.ssh3/authorized_identities` files for each user.\n`~/.ssh3/authorized_identities` allows new identities such as OpenID Connect (`oidc`) discussed [below](#openid-connect-authentication-still-experimental).\nPopular key types such as `rsa`, `ed25519` and keys in the OpenSSH format can be used.\n\n### Using the SSH3 client\nOnce you have an SSH3 server running, you can connect to it using the SSH3 client similarly to what\nyou did with your classical SSHv2 tool.\n\nHere is the usage of the `ssh3` executable:\n\n```\nUsage of ssh3:\n  -pubkey-for-agent string\n        if set, use an agent key whose public key matches the one in the specified path\n  -privkey string\n        private key file\n  -use-password\n        if set, do classical password authentication\n  -forward-agent\n        if set, forwards ssh agent to be used with sshv2 connections on the remote host\n  -forward-tcp string\n        if set, take a localport/remoteip@remoteport forwarding localhost@localport towards remoteip@remoteport\n  -forward-udp string\n        if set, take a localport/remoteip@remoteport forwarding localhost@localport towards remoteip@remoteport\n  -proxy-jump string\n    \tif set, performs a proxy jump using the specified remote host as proxy\n  -insecure\n        if set, skip server certificate verification\n  -keylog string\n        Write QUIC TLS keys and master secret in the specified keylog file: only for debugging purpose\n  -use-oidc string\n        if set, force the use of OpenID Connect with the specified issuer url as parameter\n  -oidc-config string\n        OpenID Connect json config file containing the \"client_id\" and \"client_secret\" fields needed for most identity providers\n  -do-pkce\n        if set, perform PKCE challenge-response with oidc\n  -v    if set, enable verbose mode\n```\n\n#### Private-key authentication\nYou can connect to your SSH3 server at my-server.example.org listening on `/my-secret-path` using the private key located in `~/.ssh/id_rsa` with the following command:\n\n      ssh3 -privkey ~/.ssh/id_rsa username@my-server.example.org/my-secret-path\n\n#### Agent-based private key authentication\nThe SSH3 client works with the OpenSSH agent and uses the classical `SSH_AUTH_SOCK` environment variable to\ncommunicate with this agent. Similarly to OpenSSH, SSH3 will list the keys provided by the SSH agent\nand connect using the first key listen by the agent by default.\nIf you want to specify a specific key to use with the agent, you can either specify the private key\ndirectly with the `-privkey` argument like above, or specify the corresponding public key using the\n`-pubkey-for-agent` argument. This allows you to authenticate in situations where only the agent has\na direct access to the private key but you only have access to the public key.\n\n#### Password-based authentication\nWhile discouraged, you can connect to your server using passwords (if explicitly enabled on the `ssh3-server`)\nwith the following command:\n\n      ssh3 -use-password username@my-server.example.org/my-secret-path\n\n#### Config-based session establishment\n`ssh3` parses your OpenSSH config. Currently, it only handles the `Hostname`; `User`, `Port` and `IdentityFile` OpenSSH options.\nIt also adds new option only used by SSH3, such as `URLPath` or `UDPProxyJump`. `URLPath` allows you to omit the secret URL path in your\nSSH3 command. `UDPProxyJump` allows you to perform SSH3 (#proxy-jump)[Proxy Jump] and has the same meaning as the `-proxy-jump` command-line argument.\nLet's say you have the following lines in your OpenSSH config located in `~/.ssh/config` :\n```\nIgnoreUnknown URLPath\nHost my-server\n  HostName 192.0.2.0\n  User username\n  IdentityFile ~/.ssh/id_rsa\n  URLPath /my-secret-path\n```\n\nSimilarly to what OpenSSH does, the following `ssh3` command will connect you to the SSH3 server running on 192.0.2.0 on UDP port 443 using public key authentication with the private key located in `.ssh/id_rsa` :\n\n      ssh3 my-server/my-secret-path\n\nIf you do not want a config-based utilization of SSH3, you can read the sections below to see how to use the CLI parameters of `ssh3`.\n\n#### OpenID Connect authentication (still experimental)\nThis feature allows you to connect using an external identity provider such as the one\nof your company or any other provider that implements the OpenID Connect standard, such as Google Identity,\nGithub or Microsoft Entra. The authentication flow is illustrated in the GIF below.\n\n<div align=\"center\">\n<img src=\"resources/figures/ssh3_oidc.gif\" width=75%>\n\n*Secure connection without private key using a Google account.*\n</div>\n\nThe way it connects to your identity provider is configured in a file named `~/.ssh3/oidc_config.json`.\nBelow is an example `config.json` file for use with a Google account. This configuration file is an array\nand can contain several identity providers configurations.\n```json\n[\n    {\n        \"issuer_url\": \"https://accounts.google.com\",\n        \"client_id\": \"<your_client_id>\",\n        \"client_secret\": \"<your_client_secret>\"\n    }\n]\n```\nThis might change in the future, but currently, to make this feature work with your Google account, you will need to setup a new experimental application in your Google Cloud console and add your email as authorized users.\nThis will provide you with a `client_id` and a `client_secret` that you can then set in your `~/.ssh3/oidc_config.json`. On the server side, you just have to add the following line in your `~/.ssh3/authorized_identities`:\n\n```\noidc <client_id> https://accounts.google.com <email>\n```\nWe currently consider removing the need of setting the client_id in the `authorized_identities` file in the future.\n\n#### Proxy jump\nIt is often the case that some SSH hosts can only be accessed through a gateway. SSH3 allows you to perform a Proxy Jump similarly to what is proposed by OpenSSH.\nYou can connect from A to C using B as a gateway/proxy. B and C must both be running a valid SSH3 server. This works by establishing UDP port forwarding on B to forward QUIC packets from A to C.\nThe connection from A to C is therefore fully end-to-end and B cannot decrypt or alter the SSH3 traffic between A and C.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.4267578125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nWe take the security of SSH3 very seriously. SSH3 is still experimental and under development. If you believe you have found a security vulnerability the current version of SSH3, please report it to us *privately*,\n[using the following method](https://github.com/francoismichel/ssh3/security/advisories/new). We will first fix the vulnerability before making it public if it is serious.\n\n"
        },
        {
          "name": "auth",
          "type": "tree",
          "content": null
        },
        {
          "name": "channel.go",
          "type": "blob",
          "size": 11.083984375,
          "content": "package ssh3\n\nimport (\n\t\"context\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\n\tssh3 \"github.com/francoismichel/ssh3/message\"\n\t\"github.com/francoismichel/ssh3/util\"\n\n\t\"github.com/quic-go/quic-go\"\n)\n\ntype ChannelOpenFailure struct {\n\tReasonCode uint64\n\tErrorMsg   string\n}\n\nfunc (e ChannelOpenFailure) Error() string {\n\treturn fmt.Sprintf(\"Channel open failure: reason: %d: %s\", e.ReasonCode, e.ErrorMsg)\n}\n\ntype MessageOnNonConfirmedChannel struct {\n\tmessage ssh3.Message\n}\n\nfunc (e MessageOnNonConfirmedChannel) Error() string {\n\treturn fmt.Sprintf(\"A message of type %T has been received on a non-confirmed channel\", e.message)\n}\n\ntype ReceivedDatagramOnNonDatagramChannel struct {\n\tchannelID uint64\n}\n\nfunc (e ReceivedDatagramOnNonDatagramChannel) Error() string {\n\treturn fmt.Sprintf(\"a datagram has been received on non-datagram channel %d\", e.channelID)\n}\n\ntype SentDatagramOnNonDatagramChannel struct {\n\tchannelID uint64\n}\n\nfunc (e SentDatagramOnNonDatagramChannel) Error() string {\n\treturn fmt.Sprintf(\"a datagram has been sent on non-datagram channel %d\", e.channelID)\n}\n\ntype PtyReqHandler func(channel Channel, request ssh3.PtyRequest, wantReply bool)\ntype X11ReqHandler func(channel Channel, request ssh3.X11Request, wantReply bool)\ntype ShellReqHandler func(channel Channel, request ssh3.ShellRequest, wantReply bool)\ntype ExecReqHandler func(channel Channel, request ssh3.ExecRequest, wantReply bool)\ntype SubsystemReqHandler func(channel Channel, request ssh3.SubsystemRequest, wantReply bool)\ntype WindowChangeReqHandler func(channel Channel, request ssh3.WindowChangeRequest, wantReply bool)\ntype SignalReqHandler func(channel Channel, request ssh3.SignalRequest, wantReply bool)\ntype ExitStatusReqHandler func(channel Channel, request ssh3.ExitStatusRequest, wantReply bool)\ntype ExitSignalReqHandler func(channel Channel, request ssh3.ExitSignalRequest, wantReply bool)\n\ntype ChannelDataHandler func(channel Channel, dataType ssh3.SSHDataType, data string)\n\ntype channelCloseListener interface {\n\tonChannelClose(channel Channel)\n}\n\ntype ChannelInfo struct {\n\tMaxPacketSize        uint64\n\tConversationStreamID uint64\n\tConversationID       ConversationID\n\tChannelID            uint64\n\tChannelType          string\n}\n\ntype Channel interface {\n\tChannelID() util.ChannelID\n\tConversationID() ConversationID\n\tConversationStreamID() uint64\n\tNextMessage() (ssh3.Message, error)\n\tReceiveDatagram(ctx context.Context) ([]byte, error)\n\tSendDatagram(datagram []byte) error\n\tSendRequest(r *ssh3.ChannelRequestMessage) error\n\tCancelRead()\n\tClose()\n\tMaxPacketSize() uint64\n\tWriteData(dataBuf []byte, dataType ssh3.SSHDataType) (int, error)\n\tChannelType() string\n\tconfirmChannel(maxPacketSize uint64) error\n\tsetDatagramSender(func(datagram []byte) error)\n\twaitAddDatagram(ctx context.Context, datagram []byte) error\n\taddDatagram(datagram []byte) bool\n\tmaybeSendHeader() error\n\tsetDgramQueue(*util.DatagramsQueue)\n}\n\ntype channelImpl struct {\n\tChannelInfo\n\tconfirmSent     bool\n\tconfirmReceived bool\n\theader          []byte\n\n\tdatagramSender util.SSH3DatagramSenderFunc\n\n\tchannelCloseListener\n\n\trecv           quic.ReceiveStream\n\tsend           io.WriteCloser\n\tdatagramsQueue *util.DatagramsQueue\n\tPtyReqHandler\n\tX11ReqHandler\n\tShellReqHandler\n\tExecReqHandler\n\tSubsystemReqHandler\n\tWindowChangeReqHandler\n\tSignalReqHandler\n\tExitStatusReqHandler\n\tExitSignalReqHandler\n\n\tChannelDataHandler\n}\n\ntype UDPForwardingChannelImpl struct {\n\tRemoteAddr *net.UDPAddr\n\tChannel\n}\n\ntype TCPForwardingChannelImpl struct {\n\tRemoteAddr *net.TCPAddr\n\tChannel\n}\n\nfunc buildHeader(conversationStreamID uint64, channelType string, maxPacketSize uint64, additionalBytes []byte) []byte {\n\tchannelTypeBuf := make([]byte, util.SSHStringLen(channelType))\n\tutil.WriteSSHString(channelTypeBuf, channelType)\n\n\tbuf := util.AppendVarInt(nil, 0xaf3627e6)\n\tbuf = util.AppendVarInt(buf, conversationStreamID)\n\tbuf = append(buf, channelTypeBuf...)\n\tbuf = util.AppendVarInt(buf, maxPacketSize)\n\tif additionalBytes != nil {\n\t\tbuf = append(buf, additionalBytes...)\n\t}\n\treturn buf\n}\n\nfunc buildForwardingChannelAdditionalBytes(remoteAddr net.IP, port uint16) []byte {\n\tvar buf []byte\n\n\tvar addressFamily util.SSHForwardingAddressFamily\n\tif len(remoteAddr) == 4 {\n\t\taddressFamily = util.SSHAFIpv4\n\t} else {\n\t\taddressFamily = util.SSHAFIpv6\n\t}\n\n\tbuf = util.AppendVarInt(buf, addressFamily)\n\n\tbuf = append(buf, remoteAddr...)\n\tvar portBuf [2]byte\n\tbinary.BigEndian.PutUint16(portBuf[:], uint16(port))\n\tbuf = append(buf, portBuf[:]...)\n\treturn buf\n}\n\nfunc parseHeader(channelID uint64, r util.Reader) (conversationControlStreamID ControlStreamID, channelType string, maxPacketSize uint64, err error) {\n\tconversationControlStreamID, err = util.ReadVarInt(r)\n\tif err != nil {\n\t\treturn 0, \"\", 0, err\n\t}\n\tchannelType, err = util.ParseSSHString(r)\n\tif err != nil {\n\t\treturn 0, \"\", 0, err\n\t}\n\tmaxPacketSize, err = util.ReadVarInt(r)\n\tif err != nil {\n\t\treturn 0, \"\", 0, err\n\t}\n\treturn conversationControlStreamID, channelType, maxPacketSize, nil\n}\n\nfunc parseForwardingHeader(channelID uint64, buf util.Reader) (net.IP, uint16, error) {\n\taddressFamily, err := util.ReadVarInt(buf)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tvar address net.IP\n\tif addressFamily == util.SSHAFIpv4 {\n\t\taddress = make([]byte, 4)\n\t} else if addressFamily == util.SSHAFIpv6 {\n\t\taddress = make([]byte, 16)\n\t} else {\n\t\treturn nil, 0, fmt.Errorf(\"invalid address family: %d\", addressFamily)\n\t}\n\n\t_, err = buf.Read(address)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tvar portBuf [2]byte\n\t_, err = buf.Read(portBuf[:])\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tport := binary.BigEndian.Uint16(portBuf[:])\n\n\treturn address, port, nil\n}\n\nfunc parseUDPForwardingHeader(channelID uint64, buf util.Reader) (*net.UDPAddr, error) {\n\taddress, port, err := parseForwardingHeader(channelID, buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &net.UDPAddr{\n\t\tIP:   address,\n\t\tPort: int(port),\n\t}, nil\n}\n\nfunc parseTCPForwardingHeader(channelID uint64, buf util.Reader) (*net.TCPAddr, error) {\n\taddress, port, err := parseForwardingHeader(channelID, buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &net.TCPAddr{\n\t\tIP:   address,\n\t\tPort: int(port),\n\t}, nil\n}\n\nfunc NewChannel(conversationStreamID uint64, conversationID ConversationID, channelID uint64, channelType string, maxPacketSize uint64, recv quic.ReceiveStream,\n\tsend io.WriteCloser, datagramSender util.SSH3DatagramSenderFunc, channelCloseListener channelCloseListener, sendHeader bool, confirmSent bool,\n\tconfirmReceived bool, datagramsQueueSize uint64, additonalHeaderBytes []byte) Channel {\n\tvar header []byte = nil\n\tif sendHeader {\n\t\theader = buildHeader(conversationStreamID, channelType, maxPacketSize, additonalHeaderBytes)\n\t}\n\treturn &channelImpl{\n\t\tChannelInfo: ChannelInfo{\n\t\t\tMaxPacketSize:        maxPacketSize,\n\t\t\tConversationStreamID: conversationStreamID,\n\t\t\tConversationID:       conversationID,\n\t\t\tChannelID:            channelID,\n\t\t\tChannelType:          channelType,\n\t\t},\n\t\trecv:                 recv,\n\t\tsend:                 send,\n\t\tdatagramsQueue:       util.NewDatagramsQueue(datagramsQueueSize),\n\t\tdatagramSender:       datagramSender,\n\t\tchannelCloseListener: channelCloseListener,\n\t\theader:               header,\n\t\tconfirmSent:          confirmSent,\n\t\tconfirmReceived:      confirmReceived,\n\t}\n}\n\nfunc (c *channelImpl) ChannelID() util.ChannelID {\n\treturn c.ChannelInfo.ChannelID\n}\n\nfunc (c *channelImpl) ConversationStreamID() uint64 {\n\treturn c.ChannelInfo.ConversationStreamID\n}\n\nfunc (c *channelImpl) ConversationID() ConversationID {\n\treturn c.ChannelInfo.ConversationID\n}\n\n// / The error is EOF only if no bytes were read. If an EOF happens\n// / after reading some but not all the bytes, nextMessage returns\n// / ErrUnexpectedEOF.\nfunc (c *channelImpl) nextMessage() (ssh3.Message, error) {\n\treturn ssh3.ParseMessage(util.NewReader(c.recv))\n}\n\n// The returned  message will neither be ChannelOpenConfirmationMessage nor ChannelOpenFailureMessage\n// as this function handles it internally\nfunc (c *channelImpl) NextMessage() (ssh3.Message, error) {\n\tgenericMessage, err := c.nextMessage()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tswitch message := genericMessage.(type) {\n\tcase *ssh3.ChannelOpenConfirmationMessage:\n\t\tc.confirmReceived = true\n\t\t// let's read the next message\n\t\treturn c.NextMessage()\n\tcase *ssh3.ChannelOpenFailureMessage:\n\t\treturn nil, ChannelOpenFailure{ReasonCode: message.ReasonCode, ErrorMsg: message.ErrorMessageUTF8}\n\t}\n\n\t// TODO: might be problematic if a peer already sends data along the channel opening\n\tif !c.confirmSent {\n\t\treturn nil, MessageOnNonConfirmedChannel{message: genericMessage}\n\t}\n\treturn genericMessage, nil\n}\n\nfunc (c *channelImpl) maybeSendHeader() error {\n\tif len(c.header) > 0 {\n\t\twritten, err := c.send.Write(c.header)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc.header = c.header[written:]\n\t}\n\treturn nil\n}\n\nfunc (c *channelImpl) WriteData(dataBuf []byte, dataType ssh3.SSHDataType) (int, error) {\n\terr := c.maybeSendHeader()\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\twritten := 0\n\tfor len(dataBuf) > 0 {\n\t\tdataMsg := &ssh3.DataOrExtendedDataMessage{\n\t\t\tDataType: dataType,\n\t\t\tData:     \"\",\n\t\t}\n\t\temptyMsgLen := dataMsg.Length()\n\t\tmsgLen := util.MinUint64(c.ChannelInfo.MaxPacketSize-uint64(emptyMsgLen), uint64(len(dataBuf)))\n\n\t\tdataMsg.Data = string(dataBuf[:msgLen])\n\t\tdataBuf = dataBuf[msgLen:]\n\t\t// TODO: avoid unnecessary copies and buffer creations\n\t\tmsgBuf := make([]byte, dataMsg.Length())\n\t\t_, err := dataMsg.Write(msgBuf)\n\t\tif err != nil {\n\t\t\treturn written, err\n\t\t}\n\t\tn, err := c.send.Write(msgBuf)\n\t\twritten += n\n\t\tif err != nil {\n\t\t\treturn written, err\n\t\t}\n\t}\n\treturn written, nil\n}\n\nfunc (c *channelImpl) confirmChannel(maxPacketSize uint64) error {\n\terr := c.sendMessage(&ssh3.ChannelOpenConfirmationMessage{MaxPacketSize: maxPacketSize})\n\tif err == nil {\n\t\tc.confirmSent = true\n\t}\n\treturn err\n}\n\nfunc (c *channelImpl) sendMessage(m ssh3.Message) error {\n\terr := c.maybeSendHeader()\n\tif err != nil {\n\t\treturn err\n\t}\n\tbuf := make([]byte, m.Length())\n\t_, err = m.Write(buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\tc.send.Write(buf)\n\treturn nil\n}\n\n// blocks until the datagram is added\nfunc (c *channelImpl) waitAddDatagram(ctx context.Context, datagram []byte) error {\n\treturn c.datagramsQueue.WaitAdd(ctx, datagram)\n}\n\n// blocks until the datagram is added\nfunc (c *channelImpl) addDatagram(datagram []byte) bool {\n\treturn c.datagramsQueue.Add(datagram)\n}\n\nfunc (c *channelImpl) ReceiveDatagram(ctx context.Context) ([]byte, error) {\n\treturn c.datagramsQueue.WaitNext(ctx)\n}\n\nfunc (c *channelImpl) SendDatagram(datagram []byte) error {\n\tc.maybeSendHeader()\n\tif c.datagramSender == nil {\n\t\treturn SentDatagramOnNonDatagramChannel{c.ChannelID()}\n\t}\n\treturn c.datagramSender(datagram)\n}\n\nfunc (c *channelImpl) SendRequest(r *ssh3.ChannelRequestMessage) error {\n\t//TODO: make it thread safe\n\treturn c.sendMessage(r)\n}\n\nfunc (c *channelImpl) CancelRead() {\n\tc.recv.CancelRead(42)\n}\n\nfunc (c *channelImpl) Close() {\n\tc.send.Close()\n}\n\nfunc (c *channelImpl) MaxPacketSize() uint64 {\n\treturn c.ChannelInfo.MaxPacketSize\n}\n\nfunc (c *channelImpl) ChannelType() string {\n\treturn c.ChannelInfo.ChannelType\n}\n\nfunc (c *channelImpl) setDatagramSender(datagramSender func(datagram []byte) error) {\n\tc.datagramSender = datagramSender\n}\n\nfunc (c *channelImpl) setDgramQueue(q *util.DatagramsQueue) {\n\tc.datagramsQueue = q\n}\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "client_auth.go",
          "type": "blob",
          "size": 9.751953125,
          "content": "package ssh3\n\nimport (\n\t\"crypto\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/francoismichel/ssh3/auth/oidc\"\n\tclient_config \"github.com/francoismichel/ssh3/client/config\"\n\t\"github.com/francoismichel/ssh3/util\"\n\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"github.com/kevinburke/ssh_config\"\n\t\"github.com/rs/zerolog/log\"\n\t\"golang.org/x/crypto/ssh\"\n\t\"golang.org/x/crypto/ssh/agent\"\n)\n\ntype PasswordAuthMethod struct{}\ntype OidcAuthMethod struct {\n\tdoPKCE bool\n\tconfig *oidc.OIDCConfig\n}\n\nfunc (m *OidcAuthMethod) OIDCConfig() *oidc.OIDCConfig {\n\treturn m.config\n}\n\nfunc (m *OidcAuthMethod) DoPKCE() bool {\n\treturn m.doPKCE\n}\n\ntype PrivkeyFileAuthMethod struct {\n\tfilename string\n}\ntype AgentAuthMethod struct {\n\tpubkey ssh.PublicKey\n}\n\nfunc NewPasswordAuthMethod() *PasswordAuthMethod {\n\treturn &PasswordAuthMethod{}\n}\n\nfunc (m *PasswordAuthMethod) IntoIdentity(password string) Identity {\n\treturn passwordIdentity(password)\n}\n\nfunc NewOidcAuthMethod(doPKCE bool, config *oidc.OIDCConfig) *OidcAuthMethod {\n\treturn &OidcAuthMethod{\n\t\tdoPKCE: doPKCE,\n\t\tconfig: config,\n\t}\n}\n\nfunc (m *OidcAuthMethod) IntoIdentity(bearerToken string) Identity {\n\treturn rawBearerTokenIdentity(bearerToken)\n}\n\nfunc NewPrivkeyFileAuthMethod(filename string) *PrivkeyFileAuthMethod {\n\treturn &PrivkeyFileAuthMethod{\n\t\tfilename: util.ExpandTildeWithHomeDir(filename),\n\t}\n}\n\nfunc (m *PrivkeyFileAuthMethod) Filename() string {\n\treturn m.filename\n}\n\n// IntoIdentityWithoutPassphrase returns an SSH3 identity stored on the provided path.\n// It supports the same keys as ssh.ParsePrivateKey\n// If the private key is encrypted, it returns an ssh.PassphraseMissingError.\nfunc (m *PrivkeyFileAuthMethod) IntoIdentityWithoutPassphrase() (Identity, error) {\n\treturn m.intoIdentity(nil)\n}\n\n// IntoIdentityPassphrase returns a passphrase-protected private key stored on the provided path.\n// It supports the same keys as ssh.ParsePrivateKey\n// If the passphrase is wrong, it returns an x509.IncorrectPasswordError.\nfunc (m *PrivkeyFileAuthMethod) IntoIdentityPassphrase(passphrase string) (Identity, error) {\n\treturn m.intoIdentity(&passphrase)\n}\n\nfunc (m *PrivkeyFileAuthMethod) intoIdentity(passphrase *string) (Identity, error) {\n\n\tpemBytes, err := os.ReadFile(m.filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar cryptoSigner crypto.Signer\n\tvar signer interface{}\n\tvar ok bool\n\tif passphrase == nil {\n\t\tsigner, err = ssh.ParseRawPrivateKey(pemBytes)\n\t} else {\n\t\tsigner, err = ssh.ParseRawPrivateKeyWithPassphrase(pemBytes, []byte(*passphrase))\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// transform the abstract type into a crypto.Signer that can be used with the jwt lib\n\tif cryptoSigner, ok = signer.(crypto.Signer); !ok {\n\t\treturn nil, fmt.Errorf(\"the provided key file does not result in a crypto.Signer type\")\n\t}\n\tsigningMethod, err := util.JWTSigningMethodFromCryptoPubkey(cryptoSigner.Public())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &privkeyFileIdentity{\n\t\tprivkey:       cryptoSigner,\n\t\tsigningMethod: signingMethod,\n\t}, nil\n}\n\nfunc NewAgentAuthMethod(pubkey ssh.PublicKey) *AgentAuthMethod {\n\treturn &AgentAuthMethod{\n\t\tpubkey: pubkey,\n\t}\n}\n\n// A prerequisite of calling this methiod is that the provided pubkey is explicitly listed by the agent\n// This can be verified beforehand by calling agent.List()\nfunc (m *AgentAuthMethod) IntoIdentity(agent agent.ExtendedAgent) Identity {\n\treturn &agentBasedIdentity{\n\t\tpubkey: m.pubkey,\n\t\tagent:  agent,\n\t}\n}\n\n// a generic way to generate SSH3 identities to populate the HTTP Authorization header\ntype Identity interface {\n\tSetAuthorizationHeader(req *http.Request, username string, conversation *Conversation) error\n\t// provides an authentication name that can be used as a hint for the server in the url query params\n\tAuthHint() string\n\tfmt.Stringer\n}\n\n// represents private keys stored in a classical file\ntype privkeyFileIdentity struct {\n\tprivkey       crypto.Signer\n\tsigningMethod jwt.SigningMethod\n}\n\nfunc (i *privkeyFileIdentity) SetAuthorizationHeader(req *http.Request, username string, conversation *Conversation) error {\n\tbearerToken, err := BuildJWTBearerToken(i.signingMethod, i.privkey, username, conversation)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", bearerToken))\n\treturn nil\n}\n\nfunc (i *privkeyFileIdentity) AuthHint() string {\n\treturn \"pubkey\"\n}\n\nfunc (i *privkeyFileIdentity) String() string {\n\treturn fmt.Sprintf(\"pubkey-identity: ALG=%s\", i.signingMethod.Alg())\n}\n\ntype agentSigningMethod struct {\n\tAgent agent.ExtendedAgent\n\tKey   ssh.PublicKey\n}\n\nfunc (m *agentSigningMethod) Verify(signingString string, sig []byte, key interface{}) error {\n\tpanic(\"not implemented\")\n}\n\nfunc (m *agentSigningMethod) Sign(signingString string, key interface{}) ([]byte, error) {\n\tpk, ok := key.(ssh.PublicKey)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"bad key type: %T instead of ssh.PublicKey\", pk)\n\t}\n\tsignature, err := m.Agent.SignWithFlags(pk, []byte(signingString), agent.SignatureFlagRsaSha256)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn signature.Blob, nil\n}\n\nfunc (m *agentSigningMethod) Alg() string {\n\tswitch m.Key.Type() {\n\tcase \"ssh-rsa\":\n\t\treturn \"RS256\"\n\tcase \"ssh-ed25519\":\n\t\treturn \"EdDSA\"\n\t}\n\treturn \"\"\n}\n\n// represents an identity using a running SSH agent\ntype agentBasedIdentity struct {\n\tpubkey ssh.PublicKey\n\tagent  agent.ExtendedAgent\n}\n\nfunc (i *agentBasedIdentity) SetAuthorizationHeader(req *http.Request, username string, conversation *Conversation) error {\n\tsigningMethod := &agentSigningMethod{\n\t\tAgent: i.agent,\n\t\tKey:   i.pubkey,\n\t}\n\n\tbearerToken, err := BuildJWTBearerToken(signingMethod, i.pubkey, username, conversation)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", bearerToken))\n\treturn nil\n}\n\nfunc (i *agentBasedIdentity) AuthHint() string {\n\treturn \"pubkey\"\n}\n\nfunc (i *agentBasedIdentity) String() string {\n\tretval := \"agent-identity\"\n\tif stringer, ok := i.pubkey.(fmt.Stringer); ok {\n\t\tretval = fmt.Sprintf(\"%s: %s\", retval, stringer.String())\n\t}\n\treturn retval\n}\n\ntype passwordIdentity string\n\nfunc (i passwordIdentity) SetAuthorizationHeader(req *http.Request, username string, conversation *Conversation) error {\n\treq.SetBasicAuth(username, string(i))\n\treturn nil\n}\n\nfunc (i passwordIdentity) AuthHint() string {\n\treturn \"password\"\n}\n\nfunc (i passwordIdentity) String() string {\n\treturn \"password-identity\"\n}\n\ntype rawBearerTokenIdentity string\n\nfunc (i rawBearerTokenIdentity) SetAuthorizationHeader(req *http.Request, username string, conversation *Conversation) error {\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", string(i)))\n\treturn nil\n}\n\nfunc (i rawBearerTokenIdentity) AuthHint() string {\n\treturn \"jwt\"\n}\n\nfunc (i rawBearerTokenIdentity) String() string {\n\treturn \"raw-bearer-identity\"\n}\n\nfunc GetConfigForHost(host string, config *ssh_config.Config, pluginsOptionsParsers map[client_config.OptionName]client_config.OptionParser) (hostname string, port int, user string, urlPath string, authMethodsToTry []interface{}, pluginOptions map[client_config.OptionName]client_config.Option, err error) {\n\tpluginOptions = make(map[client_config.OptionName]client_config.Option)\n\tport = -1\n\tif config == nil {\n\t\treturn\n\t}\n\thostname, err = config.Get(host, \"HostName\")\n\tif err != nil {\n\t\tlog.Error().Msgf(\"Could not get HostName from config: %s\", err)\n\t\treturn\n\t}\n\tportStr, err := config.Get(host, \"Port\")\n\tif err != nil {\n\t\tlog.Error().Msgf(\"Could not get Port from config: %s\", err)\n\t\treturn\n\t}\n\tuser, err = config.Get(host, \"User\")\n\tif err != nil {\n\t\tlog.Error().Msgf(\"Could not get User from config: %s\", err)\n\t\treturn\n\t}\n\turlPath, err = config.Get(host, \"URLPath\")\n\tif err != nil {\n\t\tlog.Error().Msgf(\"Could not get URLPath from config: %s\", err)\n\t\treturn\n\t}\n\tif len(urlPath) > 0 && urlPath[0] != '/' {\n\t\tlog.Error().Msgf(\"Non-empty URLPath in config file must start by a '/'\")\n\t\terr = util.InvalidConfig{\n\t\t\tField: \"URLPath\",\n\t\t\tValue: urlPath,\n\t\t}\n\t\treturn\n\t}\n\tp, err := strconv.Atoi(portStr)\n\tif err == nil {\n\t\tport = p\n\t}\n\tidentityFiles, err := config.GetAll(host, \"IdentityFile\")\n\tif err != nil {\n\t\tlog.Error().Msgf(\"Could not get IdentityFiles from config: %s\", err)\n\t\treturn\n\t}\n\tfor _, identityFile := range identityFiles {\n\t\tauthMethodsToTry = append(authMethodsToTry, NewPrivkeyFileAuthMethod(identityFile))\n\t}\n\n\tlog.Debug().Msgf(\"parsing options using option parsers: %+v\", pluginsOptionsParsers)\n\tfor optionName, optionParser := range pluginsOptionsParsers {\n\t\tlog.Debug().Msgf(\"search for option %s (%s) in config\", optionName, optionParser.OptionConfigName())\n\t\tvar optionValues []string\n\t\toptionValues, err = config.GetAll(host, optionParser.OptionConfigName())\n\t\tif err != nil {\n\t\t\tlog.Error().Msgf(\"config.Get returned an error: %s\", err)\n\t\t\treturn\n\t\t}\n\t\tif optionValues != nil {\n\t\t\tvar option client_config.Option\n\t\t\tlog.Debug().Msgf(\"found value(s) for %s: %s\", optionParser.OptionConfigName(), optionValues)\n\t\t\toption, err = optionParser.Parse(optionValues)\n\t\t\tif err != nil {\n\t\t\t\tlog.Error().Msgf(\"config option parser returned an error: %s\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tpluginOptions[optionName] = option\n\t\t}\n\t}\n\n\treturn hostname, port, user, urlPath, authMethodsToTry, pluginOptions, nil\n}\n\nfunc BuildJWTBearerToken(signingMethod jwt.SigningMethod, key interface{}, username string, conversation *Conversation) (string, error) {\n\tconvID := conversation.ConversationID()\n\tb64ConvID := base64.StdEncoding.EncodeToString(convID[:])\n\ttoken := jwt.NewWithClaims(signingMethod, jwt.MapClaims{\n\t\t\"iss\":       username,\n\t\t\"iat\":       jwt.NewNumericDate(time.Now()),\n\t\t\"exp\":       jwt.NewNumericDate(time.Now().Add(10 * time.Second)),\n\t\t\"sub\":       \"ssh3\",\n\t\t\"aud\":       \"unused\",\n\t\t\"client_id\": fmt.Sprintf(\"ssh3-%s\", username),\n\t\t\"jti\":       b64ConvID,\n\t})\n\n\t// the jwt lib handles \"any kind\" of crypto signer\n\tsignedString, err := token.SignedString(key)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"could not sign token: %s\", err)\n\t}\n\treturn signedString, nil\n}\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "conversation.go",
          "type": "blob",
          "size": 13.412109375,
          "content": "package ssh3\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/tls\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\n\t\"github.com/francoismichel/ssh3/util\"\n\t\"golang.org/x/exp/slices\"\n\n\t\"github.com/quic-go/quic-go\"\n\t\"github.com/quic-go/quic-go/http3\"\n\t\"github.com/rs/zerolog/log\"\n)\n\nconst SSH_FRAME_TYPE = 0xaf3627e6\n\ntype ConversationID [32]byte\n\nfunc (cid ConversationID) String() string {\n\treturn base64.StdEncoding.EncodeToString(cid[:])\n}\n\ntype Conversation struct {\n\tcontrolStream             http3.Stream\n\tmaxPacketSize             uint64\n\tdefaultDatagramsQueueSize uint64\n\tstreamCreator             http3.StreamCreator\n\tmessageSender             util.DatagramSender\n\tchannelsManager           *channelsManager\n\tcontext                   context.Context\n\tcancelContext             context.CancelCauseFunc\n\tconversationID            ConversationID // generated using TLS exporters\n\tpeerVersion               Version\n\n\tchannelsAcceptQueue *util.AcceptQueue[Channel]\n}\n\nfunc GenerateConversationID(tls *tls.ConnectionState) (convID ConversationID, err error) {\n\tret, err := tls.ExportKeyingMaterial(\"EXPORTER-SSH3\", nil, 32)\n\tif err != nil {\n\t\treturn convID, err\n\t}\n\tif len(ret) != len(convID) {\n\t\treturn convID, fmt.Errorf(\"TLS returned a tls-exporter with the wrong length (%d instead of %d)\", len(ret), len(convID))\n\t}\n\tcopy(convID[:], ret)\n\treturn convID, err\n}\n\nfunc NewClientConversation(maxPacketsize uint64, defaultDatagramsQueueSize uint64, tls *tls.ConnectionState) (*Conversation, error) {\n\tconvID, err := GenerateConversationID(tls)\n\tif err != nil {\n\t\tlog.Error().Msgf(\"could not generate conversation ID: %s\", err)\n\t\treturn nil, err\n\t}\n\tbackgroundCtx, backgroundCancelCauseFunc := context.WithCancelCause(context.Background())\n\tconv := &Conversation{\n\t\tcontrolStream:             nil,\n\t\tchannelsAcceptQueue:       util.NewAcceptQueue[Channel](),\n\t\tstreamCreator:             nil,\n\t\tmaxPacketSize:             maxPacketsize,\n\t\tdefaultDatagramsQueueSize: defaultDatagramsQueueSize,\n\t\tchannelsManager:           newChannelsManager(),\n\t\tcontext:                   backgroundCtx,\n\t\tcancelContext:             backgroundCancelCauseFunc,\n\t\tconversationID:            convID,\n\n\t\t// peerVersion set afterwards\n\t}\n\treturn conv, nil\n}\n\nfunc (c *Conversation) EstablishClientConversation(req *http.Request, roundTripper *http3.RoundTripper, supportedVersions []Version) error {\n\n\troundTripper.StreamHijacker = func(frameType http3.FrameType, qconn quic.Connection, stream quic.Stream, err error) (bool, error) {\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif frameType != SSH_FRAME_TYPE {\n\t\t\treturn false, nil\n\t\t}\n\n\t\tcontrolStreamID, channelType, maxPacketSize, err := parseHeader(uint64(stream.StreamID()), &StreamByteReader{stream})\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\t// todo: handle several conversations for the same client on the same connection ?\n\t\t// This can be done by defining the conversation ID as a combination between the control stream ID\n\t\t// and the tls exporter value, or computing the exporter value depending on the stream ID\n\t\tif controlStreamID != uint64(c.controlStream.StreamID()) {\n\t\t\terr := fmt.Errorf(\"wrong conversation control stream ID: %d instead of expected %d\", controlStreamID, c.controlStream.StreamID())\n\t\t\tlog.Error().Msgf(\"%s\", err)\n\t\t\treturn false, err\n\t\t}\n\t\tchannelInfo := &ChannelInfo{\n\t\t\tConversationID:       c.ConversationID(),\n\t\t\tConversationStreamID: controlStreamID,\n\t\t\tChannelID:            uint64(stream.StreamID()),\n\t\t\tChannelType:          channelType,\n\t\t\tMaxPacketSize:        maxPacketSize,\n\t\t}\n\n\t\tnewChannel := NewChannel(channelInfo.ConversationStreamID, channelInfo.ConversationID, uint64(stream.StreamID()), channelInfo.ChannelType, channelInfo.MaxPacketSize, &StreamByteReader{stream}, stream, nil, c.channelsManager, false, false, true, c.defaultDatagramsQueueSize, nil)\n\t\tnewChannel.setDatagramSender(c.getDatagramSenderForChannel(newChannel.ChannelID()))\n\t\tc.channelsAcceptQueue.Add(newChannel)\n\t\treturn true, nil\n\t}\n\n\tdoReq := func(version Version, req *http.Request) (*http.Response, Version, error) {\n\t\treq.Header.Set(\"User-Agent\", version.GetVersionString())\n\t\tlog.Debug().Msgf(\"send %s request on URL %s, User-Agent=\\\"%s\\\"\", req.Method, req.URL, req.Header.Get(\"User-Agent\"))\n\t\trsp, err := roundTripper.RoundTripOpt(req, http3.RoundTripOpt{DontCloseRequestStream: true})\n\t\tif err != nil {\n\t\t\treturn rsp, Version{}, err\n\t\t}\n\n\t\tlog.Debug().Msgf(\"got response with %s status code\", rsp.Status)\n\n\t\tserverVersionStr := rsp.Header.Get(\"Server\")\n\t\tserverVersion, err := ParseVersionString(serverVersionStr)\n\t\tif err != nil {\n\t\t\tlog.Error().Msgf(\"Could not parse server version: \\\"%s\\\"\", serverVersionStr)\n\t\t\tif rsp.StatusCode == 200 {\n\t\t\t\treturn rsp, Version{}, InvalidSSHVersion{versionString: serverVersionStr}\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Debug().Msgf(\"server has valid version \\\"%s\\\" (protocol version = %s, software version = %s)\",\n\t\t\t\tserverVersionStr, serverVersion.GetProtocolVersion(), serverVersion.GetSoftwareVersion())\n\t\t}\n\t\treturn rsp, serverVersion, nil\n\t}\n\n\trsp, serverVersion, err := doReq(ThisVersion(), req)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tserverProtocolVersion := serverVersion.GetProtocolVersion()\n\tthisProtocolVersion := ThisVersion().GetProtocolVersion()\n\tif rsp.StatusCode == http.StatusForbidden && serverProtocolVersion != thisProtocolVersion {\n\t\t// This version negotiation code might feel a bit heavy but is only there for a smooth transition\n\t\t// between early versions and versions coming from an actual IETF specification that include\n\t\t// proper version negotiation. Older version of this implementation strictly check the exact protocol\n\t\t// version (i.e. must be 3.0) and then check the software version. In next iterations, everything will be\n\t\t// based on the protocol version for better interoperability.\n\n\t\t// see if there is an exact version match (including software version, which is useful\n\t\t// for old versions that do not support version negotiation based on the protocol version)\n\t\tmatchingVersionIndex := slices.Index(supportedVersions, serverVersion)\n\n\t\t// there is no exact match, the implementation/software version might differ, but the\n\t\t// protocol version may still match\n\t\tif matchingVersionIndex == -1 {\n\t\t\tmatchingVersionIndex = slices.IndexFunc(supportedVersions, func(supportedVersion Version) bool {\n\t\t\t\treturn serverProtocolVersion == supportedVersion.GetProtocolVersion()\n\t\t\t})\n\t\t}\n\t\tif matchingVersionIndex != -1 {\n\t\t\tlog.Warn().Msgf(\"The server runs an old version of the protocol (%s). This software is still experimental, \"+\n\t\t\t\t\"you may want to update the server version before support is removed. Also, note that connecting to old \"+\n\t\t\t\t\"servers may increase the connection establishment time.\", serverVersion.GetVersionString())\n\t\t\t// now retry the request with the compatible version\n\t\t\trsp, serverVersion, err = doReq(supportedVersions[matchingVersionIndex], req)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\tif rsp.StatusCode == 200 {\n\t\tif !IsVersionSupported(serverVersion) {\n\t\t\tlog.Warn().Msgf(\"The server runs an unsupported SSH version (%s), you may want to consider to update the client (currently %s)\",\n\t\t\t\tserverVersion.GetProtocolVersion(), ThisVersion().GetProtocolVersion())\n\t\t}\n\t\tc.controlStream = rsp.Body.(http3.HTTPStreamer).HTTPStream()\n\t\tc.streamCreator = rsp.Body.(http3.Hijacker).StreamCreator()\n\t\tqconn := c.streamCreator.(quic.Connection)\n\t\tc.messageSender = qconn\n\t\tc.context, c.cancelContext = context.WithCancelCause(qconn.Context())\n\t\tgo func() {\n\t\t\t// TODO: this hijacks the datagrams for the whole quic connection, so the server\n\t\t\t//\t\t currently does not work for several conversations in the same QUIC connection\n\n\t\t\tfor {\n\t\t\t\tdgram, err := qconn.ReceiveDatagram(c.Context())\n\t\t\t\tif err != nil {\n\t\t\t\t\tif err != context.Canceled {\n\t\t\t\t\t\tlog.Error().Msgf(\"could not receive message from conn: %s\", err)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbuf := &util.BytesReadCloser{Reader: bytes.NewReader(dgram)}\n\t\t\t\tconvID, err := util.ReadVarInt(buf)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Error().Msgf(\"could not read conv id from datagram on conv %d: %s\", c.controlStream.StreamID(), err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif convID == uint64(c.controlStream.StreamID()) {\n\t\t\t\t\terr = c.AddDatagram(c.Context(), dgram[buf.Size()-int64(buf.Len()):])\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlog.Error().Msgf(\"could not add datagram to conv id %d: %s\", c.controlStream.StreamID(), err)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlog.Error().Msgf(\"discarding datagram with invalid conv id %d\", convID)\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t\tc.peerVersion = serverVersion\n\t\treturn nil\n\t} else if rsp.StatusCode == http.StatusUnauthorized {\n\t\treturn util.Unauthorized{}\n\t} else {\n\t\tbodyContent, err := io.ReadAll(rsp.Body)\n\t\trsp.Body.Close()\n\t\tif err != nil {\n\t\t\tlog.Error().Msgf(\"could not read response body from server: %s\", err)\n\t\t}\n\n\t\treturn util.OtherHTTPError{\n\t\t\tHasBody:    rsp.ContentLength > 0,\n\t\t\tBody:       string(bodyContent),\n\t\t\tStatusCode: rsp.StatusCode,\n\t\t}\n\t}\n}\n\nfunc NewServerConversation(ctx context.Context, controlStream http3.Stream, qconn quic.Connection, messageSender util.DatagramSender, maxPacketsize uint64, peerVersion Version) (*Conversation, error) {\n\tbackgroundContext, backgroundCancelFunc := context.WithCancelCause(ctx)\n\n\ttls := qconn.ConnectionState().TLS\n\tconvID, err := GenerateConversationID(&tls)\n\tif err != nil {\n\t\tlog.Error().Msgf(\"could not generate conversation ID on server\")\n\t\treturn nil, err\n\t}\n\n\tconv := &Conversation{\n\t\tcontrolStream:       controlStream,\n\t\tchannelsAcceptQueue: util.NewAcceptQueue[Channel](),\n\t\tstreamCreator:       qconn,\n\t\tmaxPacketSize:       maxPacketsize,\n\t\tmessageSender:       messageSender,\n\t\tchannelsManager:     newChannelsManager(),\n\t\tcontext:             backgroundContext,\n\t\tcancelContext:       backgroundCancelFunc,\n\t\tconversationID:      convID,\n\t\tpeerVersion:         peerVersion,\n\t}\n\treturn conv, nil\n}\n\ntype StreamByteReader struct {\n\thttp3.Stream\n}\n\nfunc (r *StreamByteReader) ReadByte() (byte, error) {\n\tbuf := [1]byte{0}\n\t_, err := r.Stream.Read(buf[:])\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn buf[0], nil\n}\n\nfunc (c *Conversation) OpenChannel(channelType string, maxPacketSize uint64, datagramsQueueSize uint64) (Channel, error) {\n\tstr, err := c.streamCreator.OpenStream()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tchannel := NewChannel(uint64(c.controlStream.StreamID()), c.conversationID, uint64(str.StreamID()), channelType, maxPacketSize, &StreamByteReader{str}, str, nil, c.channelsManager, true, true, false, datagramsQueueSize, nil)\n\tc.channelsManager.addChannel(channel)\n\treturn channel, nil\n}\n\nfunc (c *Conversation) OpenUDPForwardingChannel(maxPacketSize uint64, datagramsQueueSize uint64, localAddr *net.UDPAddr, remoteAddr *net.UDPAddr) (Channel, error) {\n\n\tstr, err := c.streamCreator.OpenStream()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tadditionalBytes := buildForwardingChannelAdditionalBytes(remoteAddr.IP, uint16(remoteAddr.Port))\n\n\tchannel := NewChannel(uint64(c.controlStream.StreamID()), c.conversationID, uint64(str.StreamID()), \"direct-udp\", maxPacketSize, &StreamByteReader{str}, str, nil, c.channelsManager, true, true, false, datagramsQueueSize, additionalBytes)\n\tchannel.setDatagramSender(c.getDatagramSenderForChannel(channel.ChannelID()))\n\tchannel.maybeSendHeader()\n\tc.channelsManager.addChannel(channel)\n\treturn &UDPForwardingChannelImpl{Channel: channel, RemoteAddr: remoteAddr}, nil\n}\n\nfunc (c *Conversation) OpenTCPForwardingChannel(maxPacketSize uint64, datagramsQueueSize uint64, localAddr *net.TCPAddr, remoteAddr *net.TCPAddr) (Channel, error) {\n\n\tstr, err := c.streamCreator.OpenStream()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tadditionalBytes := buildForwardingChannelAdditionalBytes(remoteAddr.IP, uint16(remoteAddr.Port))\n\n\tchannel := NewChannel(uint64(c.controlStream.StreamID()), c.conversationID, uint64(str.StreamID()), \"direct-tcp\", maxPacketSize, &StreamByteReader{str}, str, nil, c.channelsManager, true, true, false, datagramsQueueSize, additionalBytes)\n\tchannel.maybeSendHeader()\n\tc.channelsManager.addChannel(channel)\n\treturn &TCPForwardingChannelImpl{Channel: channel, RemoteAddr: remoteAddr}, nil\n}\n\nfunc (c *Conversation) AcceptChannel(ctx context.Context) (Channel, error) {\n\tfor {\n\t\tif channel := c.channelsAcceptQueue.Next(); channel != nil {\n\t\t\tchannel.confirmChannel(c.maxPacketSize)\n\t\t\tc.channelsManager.addChannel(channel)\n\t\t\treturn channel, nil\n\t\t}\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, ctx.Err()\n\t\tcase <-c.channelsAcceptQueue.Chan():\n\t\t}\n\t}\n\n}\n\n// blocks until the datagram is added\n// the first field must be the channel ID\nfunc (c *Conversation) AddDatagram(ctx context.Context, datagram []byte) error {\n\tbuf := &util.BytesReadCloser{Reader: bytes.NewReader(datagram)}\n\tchannelID, err := util.ReadVarInt(buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\tchannel, ok := c.channelsManager.getChannel(channelID)\n\tif !ok {\n\t\tdgramQueue := util.NewDatagramsQueue(10)\n\t\tdgramQueue.Add(datagram[buf.Size()-int64(buf.Len()):])\n\t\tc.channelsManager.addDanglingDatagramsQueue(channelID, dgramQueue)\n\t\treturn util.ChannelNotFound{ChannelID: channelID}\n\t}\n\treturn channel.waitAddDatagram(ctx, datagram[buf.Size()-int64(buf.Len()):])\n}\n\nfunc (c *Conversation) Close() {\n\tc.controlStream.Close()\n\tc.cancelContext(nil)\n}\n\nfunc (c *Conversation) Context() context.Context {\n\treturn c.context\n}\n\nfunc (c *Conversation) getDatagramSenderForChannel(channelID util.ChannelID) func(datagram []byte) error {\n\treturn func(datagram []byte) error {\n\t\tbuf := util.AppendVarInt(nil, uint64(c.controlStream.StreamID()))\n\t\tbuf = util.AppendVarInt(buf, channelID)\n\t\tbuf = append(buf, datagram...)\n\t\treturn c.messageSender.SendDatagram(buf)\n\t}\n}\n\nfunc (c *Conversation) ConversationID() ConversationID {\n\treturn c.conversationID\n}\n"
        },
        {
          "name": "generate_openssl_selfsigned_certificate.sh",
          "type": "blob",
          "size": 0.4833984375,
          "content": "#! /bin/bash\n\n# we strongly recommend using classical certificates through e.g. letencrypt\n# however, if you want a comparable security level to OpenSSH's host keys,\n# you can use this script to generate a self-signed certificate for every host\n# and every IP address to install on your server\nopenssl req -x509 -sha256 -nodes -newkey rsa:4096 -keyout priv.key -days 3660 -out cert.pem -subj \"/C=XX/O=Default Company/OU=XX/CN=selfsigned.ssh3\" -addext \"subjectAltName = DNS:selfsigned.ssh3,DNS:*\""
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.736328125,
          "content": "module github.com/francoismichel/ssh3\n\nrequire (\n\tgithub.com/caddyserver/certmagic v0.20.0\n\tgithub.com/coreos/go-oidc/v3 v3.7.0\n\tgithub.com/creack/pty v1.1.18\n\tgithub.com/golang-jwt/jwt/v5 v5.0.0\n\tgithub.com/kevinburke/ssh_config v1.2.0\n\tgithub.com/onsi/ginkgo/v2 v2.13.0\n\tgithub.com/onsi/gomega v1.29.0\n\tgithub.com/quic-go/quic-go v0.40.1-0.20240102075208-1083d1fb8f98\n\tgithub.com/rs/zerolog v1.31.0\n\tgo.uber.org/zap v1.24.0\n\tgolang.org/x/crypto v0.17.0\n\tgolang.org/x/exp v0.0.0-20221205204356-47842c84f3db\n\tgolang.org/x/oauth2 v0.13.0\n\tgolang.org/x/term v0.15.0\n)\n\nrequire (\n\tgithub.com/go-jose/go-jose/v3 v3.0.1 // indirect\n\tgithub.com/go-logr/logr v1.2.4 // indirect\n\tgithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 // indirect\n\tgithub.com/golang/protobuf v1.5.3 // indirect\n\tgithub.com/google/go-cmp v0.6.0 // indirect\n\tgithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.5 // indirect\n\tgithub.com/kr/pretty v0.3.1 // indirect\n\tgithub.com/libdns/libdns v0.2.1 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgithub.com/mholt/acmez v1.2.0 // indirect\n\tgithub.com/miekg/dns v1.1.55 // indirect\n\tgithub.com/quic-go/qpack v0.4.0 // indirect\n\tgithub.com/zeebo/blake3 v0.2.3 // indirect\n\tgo.uber.org/atomic v1.11.0 // indirect\n\tgo.uber.org/mock v0.3.0 // indirect\n\tgo.uber.org/multierr v1.11.0 // indirect\n\tgolang.org/x/mod v0.12.0 // indirect\n\tgolang.org/x/net v0.17.0 // indirect\n\tgolang.org/x/sys v0.15.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n\tgolang.org/x/tools v0.12.0 // indirect\n\tgoogle.golang.org/appengine v1.6.8 // indirect\n\tgoogle.golang.org/protobuf v1.31.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n\ngo 1.21\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 13.955078125,
          "content": "github.com/benbjohnson/clock v1.1.0 h1:Q92kusRqC1XV2MjkWETPvjJVqKetz1OzxZB7mHJLju8=\ngithub.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=\ngithub.com/caddyserver/certmagic v0.20.0 h1:bTw7LcEZAh9ucYCRXyCpIrSAGplplI0vGYJ4BpCQ/Fc=\ngithub.com/caddyserver/certmagic v0.20.0/go.mod h1:N4sXgpICQUskEWpj7zVzvWD41p3NYacrNoZYiRM2jTg=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/coreos/go-oidc/v3 v3.7.0 h1:FTdj0uexT4diYIPlF4yoFVI5MRO1r5+SEcIpEw9vC0o=\ngithub.com/coreos/go-oidc/v3 v3.7.0/go.mod h1:yQzSCqBnK3e6Fs5l+f5i0F8Kwf0zpH9bPEsbY00KanM=\ngithub.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=\ngithub.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-jose/go-jose/v3 v3.0.1 h1:pWmKFVtt+Jl0vBZTIpz/eAKwsm6LkIxDVVbFHKkchhA=\ngithub.com/go-jose/go-jose/v3 v3.0.1/go.mod h1:RNkWWRld676jZEYoV3+XK8L2ZnNSvIsxFMht0mSX+u8=\ngithub.com/go-logr/logr v1.2.4 h1:g01GSCwiDw2xSZfjJ2/T9M+S6pFdcNtFYsp+Y43HYDQ=\ngithub.com/go-logr/logr v1.2.4/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 h1:tfuBGBXKqDEevZMzYi5KSi8KkcZtzBcTgAUUtapy0OI=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572/go.mod h1:9Pwr4B2jHnOSGXyyzV8ROjYa2ojvAY6HCGYYfMoC3Ls=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/golang-jwt/jwt/v5 v5.0.0 h1:1n1XNM9hk7O9mnQoNBGolZvzebBQ7p93ULHRc28XJUE=\ngithub.com/golang-jwt/jwt/v5 v5.0.0/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38 h1:yAJXTCF9TqKcTiHJAE8dj7HMvPfh66eeA2JYW7eFpSE=\ngithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/kevinburke/ssh_config v1.2.0 h1:x584FjTGwHzMwvHx18PXxbBVzfnxogHaAReU4gf13a4=\ngithub.com/kevinburke/ssh_config v1.2.0/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=\ngithub.com/klauspost/cpuid/v2 v2.0.12/go.mod h1:g2LTdtYhdyuGPqyWyv7qRAmj1WBqxuObKfj5c0PQa7c=\ngithub.com/klauspost/cpuid/v2 v2.2.5 h1:0E5MSMDEoAulmXNFquVs//DdoomxaoTY1kUhbc/qbZg=\ngithub.com/klauspost/cpuid/v2 v2.2.5/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/libdns/libdns v0.2.1 h1:Wu59T7wSHRgtA0cfxC+n1c/e+O3upJGWytknkmFEDis=\ngithub.com/libdns/libdns v0.2.1/go.mod h1:yQCXzk1lEZmmCPa857bnk4TsOiqYasqpyOEeSObbb40=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.19 h1:JITubQf0MOLdlGRuRq+jtsDlekdYPia9ZFsB8h/APPA=\ngithub.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mholt/acmez v1.2.0 h1:1hhLxSgY5FvH5HCnGUuwbKY2VQVo8IU7rxXKSnZ7F30=\ngithub.com/mholt/acmez v1.2.0/go.mod h1:VT9YwH1xgNX1kmYY89gY8xPJC84BFAisjo8Egigt4kE=\ngithub.com/miekg/dns v1.1.55 h1:GoQ4hpsj0nFLYe+bWiCToyrBEJXkQfOOIvFGFy0lEgo=\ngithub.com/miekg/dns v1.1.55/go.mod h1:uInx36IzPl7FYnDcMeVWxj9byh7DutNykX4G9Sj60FY=\ngithub.com/onsi/ginkgo/v2 v2.13.0 h1:0jY9lJquiL8fcf3M4LAXN5aMlS/b2BV86HFFPCPMgE4=\ngithub.com/onsi/ginkgo/v2 v2.13.0/go.mod h1:TE309ZR8s5FsKKpuB1YAQYBzCaAfUgatB/xlT/ETL/o=\ngithub.com/onsi/gomega v1.29.0 h1:KIA/t2t5UBzoirT4H9tsML45GEbo3ouUnBHsCfD2tVg=\ngithub.com/onsi/gomega v1.29.0/go.mod h1:9sxs+SwGrKI0+PWe4Fxa9tFQQBG5xSsSbMXOI8PPpoQ=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/quic-go/qpack v0.4.0 h1:Cr9BXA1sQS2SmDUWjSofMPNKmvF6IiIfDRmgU0w1ZCo=\ngithub.com/quic-go/qpack v0.4.0/go.mod h1:UZVnYIfi5GRk+zI9UMaCPsmZ2xKJP7XBUvVyT1Knj9A=\ngithub.com/quic-go/quic-go v0.40.1-0.20240102075208-1083d1fb8f98 h1:XSdekoU+UVlq/Mav+6dYyPuyy5+qzDa/TglBVi+L7Rs=\ngithub.com/quic-go/quic-go v0.40.1-0.20240102075208-1083d1fb8f98/go.mod h1:qCkNjqczPEvgsOnxZ0eCD14lv+B2LHlFAB++CNOh9hA=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/rs/xid v1.5.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=\ngithub.com/rs/zerolog v1.31.0 h1:FcTR3NnLWW+NnTwwhFWiJSZr4ECLpqCm6QsEnyvbV4A=\ngithub.com/rs/zerolog v1.31.0/go.mod h1:/7mN4D5sKwJLZQ2b/znpjC3/GQWY/xaDXUM0kKWRHss=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0 h1:pSgiaMZlXftHpm5L7V1+rVB+AZJydKsMxsQBIJw4PKk=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/zeebo/assert v1.1.0 h1:hU1L1vLTHsnO8x8c9KAR5GmM5QscxHg5RNU5z5qbUWY=\ngithub.com/zeebo/assert v1.1.0/go.mod h1:Pq9JiuJQpG8JLJdtkwrJESF0Foym2/D9XMU5ciN/wJ0=\ngithub.com/zeebo/blake3 v0.2.3 h1:TFoLXsjeXqRNFxSbk35Dk4YtszE/MQQGK10BH4ptoTg=\ngithub.com/zeebo/blake3 v0.2.3/go.mod h1:mjJjZpnsyIVtVgTOSpJ9vmRE4wgDeyt2HU3qXvvKCaQ=\ngithub.com/zeebo/pcg v1.0.1 h1:lyqfGeWiv4ahac6ttHs+I5hwtH/+1mrhlCtVNQM2kHo=\ngithub.com/zeebo/pcg v1.0.1/go.mod h1:09F0S9iiKrwn9rlI5yjLkmrug154/YRW6KnnXVDM/l4=\ngo.uber.org/atomic v1.11.0 h1:ZvwS0R+56ePWxUNi+Atn9dWONBPp/AUETXlHW0DxSjE=\ngo.uber.org/atomic v1.11.0/go.mod h1:LUxbIzbOniOlMKjJjyPfpl4v+PKK2cNJn91OQbhoJI0=\ngo.uber.org/goleak v1.1.11 h1:wy28qYRKZgnJTxGxvye5/wgWr1EKjmUDGYox5mGlRlI=\ngo.uber.org/goleak v1.1.11/go.mod h1:cwTWslyiVhfpKIDGSZEM2HlOvcqm+tG4zioyIeLoqMQ=\ngo.uber.org/mock v0.3.0 h1:3mUxI1No2/60yUYax92Pt8eNOEecx2D3lcXZh2NEZJo=\ngo.uber.org/mock v0.3.0/go.mod h1:a6FSlNadKUHUa9IP5Vyt1zh4fC7uAwxMutEAscFbkZc=\ngo.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=\ngo.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=\ngo.uber.org/zap v1.24.0 h1:FiJd5l1UOLj0wCgbSE0rwwXHzEdAZS6hiiSnxJN/D60=\ngo.uber.org/zap v1.24.0/go.mod h1:2kMP+WWQ8aoFoedH3T2sq6iJ2yDWpHbP0f6MQbS9Gkg=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190911031432-227b76d455e7/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.17.0 h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=\ngolang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=\ngolang.org/x/exp v0.0.0-20221205204356-47842c84f3db h1:D/cFflL63o2KSLJIwjlcIt8PR064j/xsmdEJL/YvY/o=\ngolang.org/x/exp v0.0.0-20221205204356-47842c84f3db/go.mod h1:CxIveKay+FTh1D0yPZemJVgC/95VzuuOLq5Qi4xnoYc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.12.0 h1:rmsUpXtvNzj340zd98LZ4KntptpfRHwpFOHG188oHXc=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.17.0 h1:pVaXccu2ozPjCXewfr1S7xza/zcXTity9cCdXQYSjIM=\ngolang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=\ngolang.org/x/oauth2 v0.13.0 h1:jDDenyj+WgFtmV3zYVoi8aE2BwtXFLWOA67ZfNWftiY=\ngolang.org/x/oauth2 v0.13.0/go.mod h1:/JMhi4ZRXAf4HG9LiNmxvk+45+96RUlVThiH8FzNBn0=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.3.0 h1:ftCYgMx6zT/asHUrPw8BLLscYtGznsLAnjq5RH9P66E=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.15.0 h1:h48lPFYpsTvQJZF4EKyI4aLHaev3CxivZmv7yZig9pc=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.15.0 h1:y/Oo/a/q3IXu26lQgl04j/gjuBDOBlx7X6Om1j2CPW4=\ngolang.org/x/term v0.15.0/go.mod h1:BDl952bC7+uMoWR75FIrCDx79TPU9oHkTZ9yRbYOrX0=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.12.0 h1:YW6HUoUmYBpwSgyaGaZq1fHjrBjX1rlpZ54T6mu2kss=\ngolang.org/x/tools v0.12.0/go.mod h1:Sc0INKfu04TlqNoRA1hgpFZbhYXHPr4V5DzpSBTPqQM=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.6.8 h1:IhEN5q69dyKagZPYMSdIjS2HqprW324FRQZJcGqPAsM=\ngoogle.golang.org/appengine v1.6.8/go.mod h1:1jJ3jBArFh5pcgW8gCtRJnepW8FzD1V44FJffLiz/Ds=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.31.0 h1:g0LDEJHgrBl9N9r17Ru3sqWhkIx2NB67okBHPwC7hs8=\ngoogle.golang.org/protobuf v1.31.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "integration_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "known_hosts.go",
          "type": "blob",
          "size": 1.83203125,
          "content": "package ssh3\n\nimport (\n\t\"bufio\"\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"syscall\"\n)\n\ntype KnownHosts map[string][]*x509.Certificate\n\nfunc (kh KnownHosts) Knows(hostname string) bool {\n\tif len(kh) == 0 {\n\t\treturn false\n\t}\n\t_, ok := kh[hostname]\n\treturn ok\n}\n\ntype InvalidKnownHost struct {\n\tline string\n}\n\nfunc (e InvalidKnownHost) Error() string {\n\treturn fmt.Sprintf(\"invalid known host line: %s\", e.line)\n}\n\nfunc ParseKnownHosts(filename string) (knownHosts KnownHosts, invalidLines []int, err error) {\n\tknownHosts = make(map[string][]*x509.Certificate)\n\tfile, err := os.Open(filename)\n\tif os.IsNotExist(err) {\n\t\t// the known hosts file simply does not exist yet, so there is no known host\n\t\treturn knownHosts, nil, nil\n\t}\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tscanner := bufio.NewScanner(file)\n\n\tfor i := 0; scanner.Scan(); i++ {\n\t\tknownHost := strings.TrimSpace(scanner.Text())\n\t\tfields := strings.Fields(knownHost)\n\t\tif len(fields) != 3 || fields[1] != \"x509-certificate\" {\n\t\t\tinvalidLines = append(invalidLines, i)\n\t\t\tcontinue\n\t\t}\n\t\tcertBytes, err := base64.StdEncoding.DecodeString(fields[2])\n\t\tif err != nil {\n\t\t\tinvalidLines = append(invalidLines, i)\n\t\t\tcontinue\n\t\t}\n\t\tcert, err := x509.ParseCertificate(certBytes)\n\t\tif err != nil {\n\t\t\tinvalidLines = append(invalidLines, i)\n\t\t\tcontinue\n\t\t}\n\t\tcerts := knownHosts[fields[0]]\n\t\tcerts = append(certs, cert)\n\t\tknownHosts[fields[0]] = certs\n\t}\n\treturn knownHosts, invalidLines, nil\n}\n\nfunc AppendKnownHost(filename string, host string, cert *x509.Certificate) error {\n\tencodedCert := base64.StdEncoding.EncodeToString(cert.Raw)\n\tknownHosts, err := os.OpenFile(filename, os.O_CREATE|syscall.O_APPEND|syscall.O_WRONLY, 0600)\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = knownHosts.WriteString(fmt.Sprintf(\"%s x509-certificate %s\\n\", host, encodedCert))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "message",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources_manager.go",
          "type": "blob",
          "size": 2.482421875,
          "content": "package ssh3\n\nimport (\n\t\"sync\"\n\n\t\"github.com/francoismichel/ssh3/util\"\n\t\"github.com/quic-go/quic-go/http3\"\n)\n\ntype ControlStreamID = uint64\n\ntype conversationsManager struct {\n\tconnection    http3.StreamCreator\n\tconversations map[ControlStreamID]*Conversation\n\tlock          sync.Mutex\n}\n\nfunc newConversationManager(connection http3.StreamCreator) *conversationsManager {\n\treturn &conversationsManager{connection: connection, conversations: make(map[ControlStreamID]*Conversation)}\n}\n\nfunc (m *conversationsManager) addConversation(conversation *Conversation) {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\tm.conversations[uint64(conversation.controlStream.StreamID())] = conversation\n}\n\nfunc (m *conversationsManager) getConversation(id ControlStreamID) (*Conversation, bool) {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\tconv, ok := m.conversations[id]\n\treturn conv, ok\n}\n\nfunc (m *conversationsManager) removeConversation(conversation *Conversation) {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\tdelete(m.conversations, uint64(conversation.controlStream.StreamID()))\n}\n\ntype channelsManager struct {\n\tchannels            map[util.ChannelID]Channel\n\tdanglingDgramQueues map[util.ChannelID]*util.DatagramsQueue\n\tlock                sync.Mutex\n}\n\nfunc newChannelsManager() *channelsManager {\n\treturn &channelsManager{channels: make(map[util.ChannelID]Channel), danglingDgramQueues: make(map[util.ChannelID]*util.DatagramsQueue)}\n}\n\nfunc (m *channelsManager) addChannel(channel Channel) {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\tif dgramsQueue, ok := m.danglingDgramQueues[channel.ChannelID()]; ok {\n\t\tchannel.setDgramQueue(dgramsQueue)\n\t\tdelete(m.danglingDgramQueues, channel.ChannelID())\n\t}\n\tm.channels[util.ChannelID(channel.ChannelID())] = channel\n}\n\nfunc (m *channelsManager) addDanglingDatagramsQueue(id util.ChannelID, queue *util.DatagramsQueue) {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\t// let's first check if a channel has recently been added\n\tif channel, ok := m.channels[id]; ok {\n\t\tdgram := queue.Next()\n\t\tfor ; dgram != nil; dgram = queue.Next() {\n\t\t\tchannel.addDatagram(dgram)\n\t\t}\n\t} else {\n\t\tm.danglingDgramQueues[id] = queue\n\t}\n}\n\nfunc (m *channelsManager) getChannel(id util.ChannelID) (Channel, bool) {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\tchannel, ok := m.channels[id]\n\treturn channel, ok\n}\n\nfunc (m *channelsManager) removeChannel(channel Channel) {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\tdelete(m.channels, util.ChannelID(channel.ChannelID()))\n}\n\nfunc (m *channelsManager) onChannelClose(channel Channel) {\n\tm.removeChannel(channel)\n}\n"
        },
        {
          "name": "server.go",
          "type": "blob",
          "size": 6.884765625,
          "content": "package ssh3\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/quic-go/quic-go\"\n\t\"github.com/quic-go/quic-go/http3\"\n\t\"github.com/rs/zerolog/log\"\n\n\t\"github.com/francoismichel/ssh3/util\"\n)\n\ntype ServerConversationHandler func(authenticatedUsername string, conversation *Conversation) error\n\ntype Server struct {\n\tmaxPacketSize       uint64\n\th3Server            *http3.Server\n\tconversations       map[http3.StreamCreator]*conversationsManager\n\tconversationHandler ServerConversationHandler\n\tlock                sync.Mutex\n\t// conversations map[]\n}\n\n// Creates a new server handling http requests for SSH conversations\n\nfunc NewServer(maxPacketSize uint64, defaultDatagramQueueSize uint64, h3Server *http3.Server, conversationHandler ServerConversationHandler) *Server {\n\tssh3Server := &Server{\n\t\tmaxPacketSize:       maxPacketSize,\n\t\th3Server:            h3Server,\n\t\tconversations:       make(map[http3.StreamCreator]*conversationsManager),\n\t\tconversationHandler: conversationHandler,\n\t}\n\n\th3Server.StreamHijacker = func(frameType http3.FrameType, qconn quic.Connection, stream quic.Stream, err error) (bool, error) {\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif frameType != SSH_FRAME_TYPE {\n\t\t\tlog.Error().Msgf(\"bad HTTP frame type: %d\", frameType)\n\t\t\treturn false, nil\n\t\t}\n\n\t\tconversationsManager, ok := ssh3Server.getConversationsManager(qconn)\n\t\tif !ok {\n\t\t\terr := fmt.Errorf(\"could not find SSH3 conversation for new channel %d on conn %+v\", stream.StreamID(), qconn)\n\t\t\tlog.Error().Msgf(\"%s\", err)\n\t\t\treturn false, err\n\t\t}\n\n\t\tconversationControlStreamID, channelType, maxPacketSize, err := parseHeader(uint64(stream.StreamID()), &StreamByteReader{stream})\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\n\t\tconversation, ok := conversationsManager.getConversation(conversationControlStreamID)\n\t\tif !ok {\n\t\t\terr := fmt.Errorf(\"could not find SSH3 conversation with control stream id %d for new channel %d\", conversationControlStreamID,\n\t\t\t\tuint64(stream.StreamID()))\n\t\t\tlog.Error().Msgf(\"%s\", err)\n\t\t\treturn false, err\n\t\t}\n\n\t\tchannelInfo := &ChannelInfo{\n\t\t\tConversationID:       conversation.conversationID,\n\t\t\tConversationStreamID: conversationControlStreamID,\n\t\t\tChannelID:            uint64(stream.StreamID()),\n\t\t\tChannelType:          channelType,\n\t\t\tMaxPacketSize:        maxPacketSize,\n\t\t}\n\n\t\tnewChannel := NewChannel(channelInfo.ConversationStreamID, channelInfo.ConversationID, uint64(stream.StreamID()), channelInfo.ChannelType, channelInfo.MaxPacketSize, &StreamByteReader{stream},\n\t\t\tstream, nil, conversation.channelsManager, false, false, true, defaultDatagramQueueSize, nil)\n\n\t\tswitch channelInfo.ChannelType {\n\t\tcase \"direct-udp\":\n\t\t\tudpAddr, err := parseUDPForwardingHeader(channelInfo.ChannelID, &StreamByteReader{stream})\n\t\t\tif err != nil {\n\t\t\t\treturn false, err\n\t\t\t}\n\t\t\tnewChannel.setDatagramSender(conversation.getDatagramSenderForChannel(channelInfo.ChannelID))\n\t\t\tnewChannel = &UDPForwardingChannelImpl{Channel: newChannel, RemoteAddr: udpAddr}\n\t\tcase \"direct-tcp\":\n\t\t\ttcpAddr, err := parseTCPForwardingHeader(channelInfo.ChannelID, &StreamByteReader{stream})\n\t\t\tif err != nil {\n\t\t\t\treturn false, err\n\t\t\t}\n\t\t\tnewChannel = &TCPForwardingChannelImpl{Channel: newChannel, RemoteAddr: tcpAddr}\n\t\t}\n\t\tconversation.channelsAcceptQueue.Add(newChannel)\n\t\treturn true, nil\n\t}\n\treturn ssh3Server\n}\n\nfunc (s *Server) getConversationsManager(streamCreator http3.StreamCreator) (*conversationsManager, bool) {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tconversations, ok := s.conversations[streamCreator]\n\treturn conversations, ok\n}\n\nfunc (s *Server) getOrCreateConversationsManager(streamCreator http3.StreamCreator) *conversationsManager {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tconversationsManager, ok := s.conversations[streamCreator]\n\tif !ok {\n\t\ts.conversations[streamCreator] = newConversationManager(streamCreator)\n\t\tconversationsManager = s.conversations[streamCreator]\n\t}\n\treturn conversationsManager\n}\n\nfunc (s *Server) removeConnection(streamCreator http3.StreamCreator) {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tdelete(s.conversations, streamCreator)\n}\n\ntype AuthenticatedHandlerFunc func(authenticatedUserName string, newConv *Conversation, w http.ResponseWriter, r *http.Request)\n\ntype UnauthenticatedBearerFunc func(unauthenticatedBearerString string, base64ConversationID string, w http.ResponseWriter, r *http.Request)\n\nfunc (s *Server) GetHTTPHandlerFunc(ctx context.Context) AuthenticatedHandlerFunc {\n\n\treturn func(authenticatedUsername string, newConv *Conversation, w http.ResponseWriter, r *http.Request) {\n\t\tlog.Info().Msgf(\"got request: method: %s, URL: %s\", r.Method, r.URL.String())\n\t\tif r.Method == http.MethodConnect && r.Proto == \"ssh3\" {\n\t\t\thijacker, ok := w.(http3.Hijacker)\n\t\t\tif !ok { // should never happen, unless quic-go change their API\n\t\t\t\tlog.Error().Msg(\"failed to hijack HTTP conversation: is it an HTTP/3 conversation ?\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tstreamCreator := hijacker.StreamCreator()\n\t\t\tqconn := streamCreator.(quic.Connection)\n\t\t\tconversationsManager := s.getOrCreateConversationsManager(streamCreator)\n\t\t\tconversationsManager.addConversation(newConv)\n\n\t\t\tw.WriteHeader(200)\n\n\t\t\tgo func() {\n\t\t\t\t// TODO: this hijacks the datagrams for the whole quic connection, so the server\n\t\t\t\t//\t\t currently does not work for several conversations in the same QUIC connection\n\t\t\t\tfor {\n\t\t\t\t\tdgram, err := qconn.ReceiveDatagram(ctx)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tif !errors.Is(err, context.Canceled) && !errors.Is(err, net.ErrClosed) {\n\t\t\t\t\t\t\tlog.Error().Msgf(\"could not receive message from conn: %s\", err)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tbuf := &util.BytesReadCloser{Reader: bytes.NewReader(dgram)}\n\t\t\t\t\tconvID, err := util.ReadVarInt(buf)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlog.Error().Msgf(\"could not read conv id from datagram on conv %d: %s\", newConv.controlStream.StreamID(), err)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif convID == uint64(newConv.controlStream.StreamID()) {\n\t\t\t\t\t\terr = newConv.AddDatagram(ctx, dgram[buf.Size()-int64(buf.Len()):])\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tswitch e := err.(type) {\n\t\t\t\t\t\t\tcase util.ChannelNotFound:\n\t\t\t\t\t\t\t\tlog.Warn().Msgf(\"could not find channel %d, queue datagram in the meantime\", e.ChannelID)\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tlog.Error().Msgf(\"could not add datagram to conv id %d: %s\", newConv.controlStream.StreamID(), err)\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.Error().Msgf(\"discarding datagram with invalid conv id %d\", convID)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()\n\t\t\tgo func() {\n\t\t\t\tdefer newConv.Close()\n\t\t\t\tdefer conversationsManager.removeConversation(newConv)\n\t\t\t\tdefer s.removeConnection(streamCreator)\n\t\t\t\tif err := s.conversationHandler(authenticatedUsername, newConv); err != nil {\n\t\t\t\t\tif errors.Is(err, context.Canceled) {\n\t\t\t\t\t\tlog.Info().Msgf(\"conversation canceled for conversation id %s, user %s\", newConv.ConversationID(), authenticatedUsername)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.Error().Msgf(\"error while handing new conversation: %s for user %s: %s\", newConv.ConversationID(), authenticatedUsername, err)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "server_auth",
          "type": "tree",
          "content": null
        },
        {
          "name": "ssh3_suite_test.go",
          "type": "blob",
          "size": 0.18359375,
          "content": "package ssh3_test\n\nimport (\n\t\"testing\"\n\n\t. \"github.com/onsi/ginkgo/v2\"\n\t. \"github.com/onsi/gomega\"\n)\n\nfunc TestSsh3(t *testing.T) {\n\tRegisterFailHandler(Fail)\n\tRunSpecs(t, \"Ssh3 Suite\")\n}\n"
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.go",
          "type": "blob",
          "size": 10.435546875,
          "content": "package ssh3\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/rs/zerolog/log\"\n)\n\n// EXPERIMENTAL_SPEC_VERSION specifies which version of the protocol this software\n// is implementing.\n// The protocol version string format is:\n//\n//\tmajor + \".\" + minor[ + \"_\" + additional-version-information].\n//\n// It currently implements a first early version with no specification (alpha).\n// Once IETF drafts get published, we plan on having versions such as\n// 3.0_draft-michel-ssh3-XX when implementing the IETF specification from\n// draft-michel-ssh3-XX.\nconst PROTOCOL_MAJOR int = 3\nconst PROTOCOL_MINOR int = 0\nconst PROTOCOL_EXPERIMENTAL_SPEC_VERSION string = \"alpha-00\"\n\nconst SOFTWARE_IMPLEMENTATION_NAME string = \"francoismichel/ssh3\"\nconst SOFTWARE_MAJOR int = 0\nconst SOFTWARE_MINOR int = 1\nconst SOFTWARE_PATCH int = 7\n\nconst SOFTWARE_RC int = 0\n\nvar AVAILABLE_CLIENT_VERSIONS []Version = []Version{\n\tThisVersion(),\n\tNewVersion(\"SSH\", NewProtocolVersion(3, 0, \"\"), NewSoftwareVersion(0, 1, 5, SOFTWARE_IMPLEMENTATION_NAME)),\n\tNewVersion(\"SSH\", NewProtocolVersion(3, 0, \"\"), NewSoftwareVersion(0, 1, 4, SOFTWARE_IMPLEMENTATION_NAME)),\n\tNewVersion(\"SSH\", NewProtocolVersion(3, 0, \"\"), NewSoftwareVersion(0, 1, 3, SOFTWARE_IMPLEMENTATION_NAME)),\n}\n\nfunc ThisVersion() Version {\n\treturn Version{\n\t\tprotocolName: \"SSH\",\n\t\tprotocolVersion: ProtocolVersion{\n\t\t\tMajor:                   PROTOCOL_MAJOR,\n\t\t\tMinor:                   PROTOCOL_MINOR,\n\t\t\tExperimentalSpecVersion: PROTOCOL_EXPERIMENTAL_SPEC_VERSION,\n\t\t},\n\t\tsoftwareVersion: SoftwareVersion{\n\t\t\tImplementationName: SOFTWARE_IMPLEMENTATION_NAME,\n\t\t\tMajor:              SOFTWARE_MAJOR,\n\t\t\tMinor:              SOFTWARE_MINOR,\n\t\t\tPatch:              SOFTWARE_PATCH,\n\t\t},\n\t}\n}\n\n// Tells if the this version (a.k.a. the version returned by ThisVersion())\n// is compatible with `other`.\nfunc IsVersionSupported(other Version) bool {\n\tthis := ThisVersion()\n\t// right now, no check for protocol name as it is subject to change\n\n\t// strict protocol version checking\n\tif other.protocolVersion.Major != this.protocolVersion.Major || other.protocolVersion.Minor != this.protocolVersion.Minor {\n\t\treturn false\n\t}\n\n\t// special case: to our knowledge, experimental spec version older than alpha-00 are only implemented by us (i.e. francoismichel/ssh3)\n\t// this should be removed in the near future, once we remove support for these legacy servers\n\tif other.protocolVersion.ExperimentalSpecVersion == \"\" && other.softwareVersion.ImplementationName == \"francoismichel/ssh3\" &&\n\t\tother.softwareVersion.Major == 0 && other.softwareVersion.Minor == 1 && other.softwareVersion.Patch <= 5 {\n\t\t// then, only support software version >= 0.1.3\n\t\treturn other.softwareVersion.Patch >= 3\n\t}\n\n\t// Starting from here, we have proper experimental spec version signalling.\n\t// this version is version alpha-00, other versions are not supported.\n\t// If a server receives a request with an unsupported spec version, the client should\n\t// start a new request with a compatible version.\n\treturn other.protocolVersion.ExperimentalSpecVersion == \"alpha-00\"\n}\n\ntype SoftwareVersion struct {\n\tImplementationName string\n\tMajor              int\n\tMinor              int\n\tPatch              int\n}\n\nfunc NewSoftwareVersion(major int, minor int, patch int, implementationName string) SoftwareVersion {\n\treturn SoftwareVersion{\n\t\tMajor:              major,\n\t\tMinor:              minor,\n\t\tPatch:              patch,\n\t\tImplementationName: implementationName,\n\t}\n}\n\ntype InvalidSoftwareVersion struct {\n\tsoftwareVersionString string\n}\n\nfunc (e InvalidSoftwareVersion) Error() string {\n\treturn fmt.Sprintf(\"invalid protocol version string: %s\", e.softwareVersionString)\n}\n\nfunc ParseSoftwareVersion(implementationName string, versionString string) (SoftwareVersion, error) {\n\tmajorDotMinor := strings.Split(versionString, \".\")\n\tif len(majorDotMinor) != 3 {\n\t\tlog.Error().Msgf(\"bad SSH version major.minor.patch field\")\n\t\treturn SoftwareVersion{}, InvalidSoftwareVersion{softwareVersionString: versionString}\n\t}\n\tmajor, err := strconv.Atoi(majorDotMinor[0])\n\tif err != nil {\n\t\tlog.Error().Msgf(\"bad software version major value\")\n\t\treturn SoftwareVersion{}, InvalidSoftwareVersion{softwareVersionString: versionString}\n\t}\n\tminor, err := strconv.Atoi(majorDotMinor[1])\n\tif err != nil {\n\t\tlog.Error().Msgf(\"bad software version minor value\")\n\t\treturn SoftwareVersion{}, InvalidSoftwareVersion{softwareVersionString: versionString}\n\t}\n\tpatch, err := strconv.Atoi(majorDotMinor[2])\n\tif err != nil {\n\t\tlog.Error().Msgf(\"bad software version patch value\")\n\t\treturn SoftwareVersion{}, InvalidSoftwareVersion{softwareVersionString: versionString}\n\t}\n\treturn SoftwareVersion{\n\t\tImplementationName: implementationName,\n\t\tMajor:              major,\n\t\tMinor:              minor,\n\t\tPatch:              patch,\n\t}, nil\n}\n\nfunc (v SoftwareVersion) String() string {\n\treturn fmt.Sprintf(\"%s %d.%d.%d\", v.ImplementationName, v.Major, v.Minor, v.Patch)\n}\n\ntype ProtocolVersion struct {\n\tMajor                   int\n\tMinor                   int\n\tExperimentalSpecVersion string\n}\n\nfunc NewProtocolVersion(major int, minor int, experimentalspecversion string) ProtocolVersion {\n\treturn ProtocolVersion{\n\t\tMajor:                   major,\n\t\tMinor:                   minor,\n\t\tExperimentalSpecVersion: experimentalspecversion,\n\t}\n}\n\nfunc (v ProtocolVersion) String() string {\n\tret := fmt.Sprintf(\"%d.%d\", v.Major, v.Minor)\n\tif v.ExperimentalSpecVersion != \"\" {\n\t\tret = fmt.Sprintf(\"%s_%s\", ret, v.ExperimentalSpecVersion)\n\t}\n\treturn ret\n}\n\ntype InvalidProtocolVersion struct {\n\tprotocolVersionString string\n}\n\nfunc (e InvalidProtocolVersion) Error() string {\n\treturn fmt.Sprintf(\"invalid protocol version string: %s\", e.protocolVersionString)\n}\n\nfunc ParseProtocolVersion(versionString string) (ProtocolVersion, error) {\n\tfields := strings.Split(versionString, \"_\")\n\tif len(fields) == 0 || len(fields) > 2 {\n\t\treturn ProtocolVersion{}, InvalidProtocolVersion{protocolVersionString: versionString}\n\t}\n\tmajorDotMinor := strings.Split(fields[0], \".\")\n\tif len(majorDotMinor) != 2 {\n\t\tlog.Error().Msgf(\"protocol version should be in format x.y, got: %s\", fields[0])\n\t\treturn ProtocolVersion{}, InvalidProtocolVersion{protocolVersionString: versionString}\n\t}\n\tmajor, err := strconv.Atoi(majorDotMinor[0])\n\tif err != nil {\n\t\tlog.Error().Msgf(\"bad protocol version major value %s: %s\", majorDotMinor[0], err)\n\t\treturn ProtocolVersion{}, InvalidSSHVersion{versionString: versionString}\n\t}\n\tminor, err := strconv.Atoi(majorDotMinor[1])\n\tif err != nil {\n\t\tlog.Error().Msgf(\"bad protocol version minor value %s: %s\", majorDotMinor[1], err)\n\t\treturn ProtocolVersion{}, InvalidSSHVersion{versionString: versionString}\n\t}\n\texperimentalSpecVersion := \"\"\n\tif len(fields) == 2 {\n\t\texperimentalSpecVersion = fields[1]\n\t}\n\treturn ProtocolVersion{\n\t\tMajor:                   major,\n\t\tMinor:                   minor,\n\t\tExperimentalSpecVersion: experimentalSpecVersion,\n\t}, nil\n}\n\ntype Version struct {\n\tprotocolName    string // having the protocol name here might sound silly but there are discussions about updating the name right now and we want to support a change\n\tprotocolVersion ProtocolVersion\n\tsoftwareVersion SoftwareVersion\n}\n\nfunc (v Version) GetProtocolVersion() ProtocolVersion {\n\treturn v.protocolVersion\n}\n\nfunc (v Version) GetSoftwareVersion() SoftwareVersion {\n\treturn v.softwareVersion\n}\n\n// GetVersionString() returns the version string to be exchanged between two\n// endpoints for version negotiation\nfunc (v Version) GetVersionString() string {\n\t// currently put the experimental spec version as an additional attribute for better compatibility with recent 0.1.5 software rcs\n\tret := fmt.Sprintf(\"%s %d.%d %s %d.%d.%d\", v.protocolName, v.protocolVersion.Major, v.protocolVersion.Minor,\n\t\tv.softwareVersion.ImplementationName, v.softwareVersion.Major, v.softwareVersion.Minor, v.softwareVersion.Patch)\n\tif v.protocolVersion.ExperimentalSpecVersion != \"\" {\n\t\tret = fmt.Sprintf(\"%s experimental_spec_version=%s\", ret, v.protocolVersion.ExperimentalSpecVersion)\n\t}\n\treturn ret\n}\n\nfunc NewVersion(protocolName string, protocolVersion ProtocolVersion, softwareVersion SoftwareVersion) Version {\n\treturn Version{\n\t\tprotocolName:    protocolName,\n\t\tprotocolVersion: protocolVersion,\n\t\tsoftwareVersion: softwareVersion,\n\t}\n}\n\ntype InvalidSSHVersion struct {\n\tversionString string\n}\n\nfunc (e InvalidSSHVersion) Error() string {\n\treturn fmt.Sprintf(\"invalid ssh version string: %s\", e.versionString)\n}\n\ntype UnsupportedSSHVersion struct {\n\tversionString string\n}\n\nfunc (e UnsupportedSSHVersion) Error() string {\n\treturn fmt.Sprintf(\"unsupported ssh version: %s\", e.versionString)\n}\n\n// GetCurrentVersionString() returns the version string to be exchanged between two\n// endpoints for version negotiation\nfunc GetCurrentVersionString() string {\n\treturn ThisVersion().GetVersionString()\n}\n\nfunc ParseVersionString(versionString string) (version Version, err error) {\n\tfields := strings.Fields(versionString)\n\tif len(fields) < 4 {\n\t\tlog.Error().Msgf(\"bad SSH version fields\")\n\t\treturn Version{}, InvalidSSHVersion{versionString: versionString}\n\t}\n\tprotocolName := fields[0]\n\n\tprotocolVersion, err := ParseProtocolVersion(fields[1])\n\tif err != nil {\n\t\tlog.Error().Msgf(\"could not parse protocol version: %s\", err)\n\t\treturn Version{}, err\n\t}\n\n\tsoftwareVersion, err := ParseSoftwareVersion(fields[2], fields[3])\n\tif err != nil {\n\t\tlog.Error().Msgf(\"could not parse software version: %s\", err)\n\t\treturn Version{}, err\n\t}\n\n\t// Temporary tweak to announce a spec version while keeping compatibility with alpha-00 and older versions,\n\t// as alpha-00 and older versions do strict version checking and error as soon as the protocol version is not \"3.0\".\n\t// This will likely disappear once we decide to remove support for alpha-00 and older versions.\n\t// From that point onwards, the spec version will be announced as part of the version field.\n\tif len(fields) > 4 {\n\t\tfor _, field := range fields[4:] {\n\t\t\tsubfields := strings.Split(field, \"=\")\n\t\t\tif len(subfields) == 2 && subfields[0] == \"experimental_spec_version\" {\n\t\t\t\tprotocolVersion.ExperimentalSpecVersion = subfields[1]\n\t\t\t} else {\n\t\t\t\tlog.Debug().Msgf(\"skipping custom version field %s\", field)\n\t\t\t}\n\t\t}\n\n\t}\n\treturn NewVersion(protocolName, protocolVersion, softwareVersion), nil\n}\n\n// GetCurrentSoftwareVersion() returns the current software version to be displayed to the user\n// For version string to be communicated between endpoints, use GetCurrentVersionString() instead.\nfunc GetCurrentSoftwareVersion() string {\n\tversionStr := ThisVersion().softwareVersion.String()\n\tif SOFTWARE_RC > 0 {\n\t\tversionStr += fmt.Sprintf(\"-rc%d\", SOFTWARE_RC)\n\t}\n\treturn versionStr\n}\n"
        }
      ]
    }
  ]
}