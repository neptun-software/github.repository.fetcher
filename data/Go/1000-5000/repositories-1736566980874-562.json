{
  "metadata": {
    "timestamp": 1736566980874,
    "page": 562,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vouch/vouch-proxy",
      "stars": 2957,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".defaults.yml",
          "type": "blob",
          "size": 1.365234375,
          "content": "# default values for Vouch Proxy\n# this is related to Env Vars\n# https://github.com/vouch/vouch-proxy/issues/132\n# https://github.com/vouch/vouch-proxy/pull/134\n\n# you don't want to mess with these\nvouch:\n  logLevel: info\n  testing: false\n  listen: 0.0.0.0\n  port: 9090\n  socket_mode: 0660 \n  # document_root:\n  # domains:\n  allowAllUsers: false\n  publicAccess: false\n  # whiteList:\n  # teamWhitelist:\n  writeTimeout: 15\n  readTimeout: 15\n  idleTimeout: 15\n  tls:\n    # cert:\n    # key:\n    profile: intermediate\n\n  jwt:\n    #   secret:\n    issuer: Vouch\n    maxAge: 240\n    compress: true\n    signing_method: HS256\n\n  cookie:\n    name: VouchCookie\n    # domain:\n    secure: true\n    httpOnly: true\n    maxAge: 240\n    # sameSite:\n\n  session:\n    name: VouchSession\n    maxAge: 5\n    # key:\n\n  headers:\n    jwt: X-Vouch-Token\n    user: X-Vouch-User\n    success: X-Vouch-Success\n    error: X-Vouch-Error\n    querystring: access_token\n    redirect: X-Vouch-Requested-URI\n    # claims:\n    claimheader: X-Vouch-IdP-Claims-\n    # https://github.com/vouch/vouch-proxy/issues/287\n    # accesstoken: X-Vouch-IdP-AccessToken\n    # idtoken: X-Vouch-IdP-IdToken\n  # test_url:\n  # post_logout_redirect_uris:\n# oauth:\n#   provider:\n#   client_id:\n#   client_secret:\n#   callback_url:\n#   callback_urls:\n#   preferredDomain:\n#   auth_url:\n#   token_url:\n#   user_info_url:\n#   end_session_endpoint:\n#   scopes:\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.25390625,
          "content": "config/config.yml\npkg/model/storage-test.db\nmain\nconfig/google_config.json\n.vscode/*\nlasso\nconfig/config.yml_google\nconfig/config.yml_github\nconfig/secret\nconfig/config.yml_orig\n.dockerignore\nDockerfile\nhandlers/rice-box.go\ncerts\n.cover/*\n.github\n.whitesource\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2724609375,
          "content": "vouch\nvouch-proxy\nmain\nconfig/config.yml\nconfig/*config.yml\nconfig/config.yml_*\nconfig/google_config.json\nconfig/secret\n!config/testing/*\npkg/model/storage-test.db\n.vscode/*\ncerts/*\ncoverage.out\ncoverage.html.env_google\n.env*\n.cover\nconfig/testing/rsa.key\nconfig/testing/rsa.pub\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.7451171875,
          "content": "language: go\ngo_import_path: github.com/vouch/vouch-proxy\n\nsudo: false\n\nservices:\n  - docker\n\ngo:\n  - \"1.23\"\n\nenv:\n  - ISTRAVIS=true\n\nbefore_install:\n  - sudo apt-get install openssl\n  - ./do.sh goget\n  # - go get github.com/golang/lint/golint # Linter\n  # - go get github.com/fzipp/gocyclo\n\nscript:\n  # TODO: enable gofmt\n  # - gofmt -w -s . && git diff --exit-code\n  - ./do.sh build\n  - ./do.sh test\n#  - docker build -t $TRAVIS_REPO_SLUG .\n\n#deploy:\n#  - provider: script\n#    skip_cleanup: true\n#    script: bash .travis/docker_push\n#    on:\n#      go: \"1.10\"\n#      branch: master\n#  - provider: script\n#    skip_cleanup: true\n#    script: bash .travis/docker_push\n#    on:\n#      go: \"1.10\"\n#      tags: true\n#\nnotifications:\n  irc: \"irc.libera.chat#vouch\"\n"
        },
        {
          "name": ".travis",
          "type": "tree",
          "content": null
        },
        {
          "name": ".whitesource",
          "type": "blob",
          "size": 0.2080078125,
          "content": "{\n  \"scanSettings\": {\n    \"baseBranches\": []\n  },\n  \"checkRunSettings\": {\n    \"vulnerableCheckRunConclusionLevel\": \"failure\",\n    \"displayMode\": \"diff\"\n  },\n  \"issueSettings\": {\n    \"minSeverityLevel\": \"LOW\"\n  }\n}"
        },
        {
          "name": "AUTHORS.txt",
          "type": "blob",
          "size": 0.0146484375,
          "content": "bnfinet\naaronpk"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.5341796875,
          "content": "# Changelog for Vouch Proxy\n\n## Unreleased\n\nComing soon! Please document any work in progress here as part of your PR. It will be moved to the next tag when released.\n\n## v0.41.0\n\n- upgrade golang to `v1.23` from `v1.22`\n\n## v0.40.0\n\n- upgrade golang to `v1.22` from `v1.18`\n\n## v0.39.0\n\n- [add support for listening on unix domain sockets](https://github.com/vouch/vouch-proxy/pull/488)\n\n## v0.38.0\n\n- upgrade golang to `v1.18` from `v1.16`\n\n## v0.37.0\n\n- [allow configurable Write, Read and Idle timeouts for the http server](https://github.com/vouch/vouch-proxy/pull/468)\n\n## v0.36.0\n\n- [run Docker containers as non-root user](https://github.com/vouch/vouch-proxy/pull/444)\n\nPermissions may need to be adjusted for `/config/secret` and `/config/config.yml` in Docker environemnts. See the [README](https://github.com/vouch/vouch-proxy#running-from-docker)\n\n## v0.35.1\n\n- [include DocumentRoot if configured in error pages](https://github.com/vouch/vouch-proxy/pull/439)\n\n## v0.35.0\n\n- [make session.MaxAge configurable](https://github.com/vouch/vouch-proxy/issues/318) to allow more time to login at the IdP\n\n## v0.34.2\n\n- [log github token only at `logLevel: debug`](https://github.com/vouch/vouch-proxy/pull/436)\n- documentation edits\n- move `cookie.sameSite` configuration to `cookie.Configure()`\n\n## v0.34.1\n\n- bug fix: [Azure provider no longer requires `oauth.user_info_url` to be configured](https://github.com/vouch/vouch-proxy/issues/417)\n\n## v0.34.0\n\n- add support for [the \"claims\" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter) to support Twitch OIDC as IdP\n- add [Twitch OIDC example](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example_twitch)\n\n## v0.33.0\n\n- [Vouch Proxy running in a path](https://github.com/vouch/vouch-proxy/issues/373)\n\n## v0.32.0\n\n- [Slack oidc example](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example_slack) and [slack app manifest](https://github.com/vouch/vouch-proxy/blob/master/examples/slack/vouch-slack-oidc-app-manifest.yml)\n- [CHANGELOG.md](https://github.com/vouch/vouch-proxy/blob/master/CHANGELOG.md)\n\n## v0.31.0\n\n- [use quay.io](https://quay.io/repository/vouch/vouch-proxy?tab=tags) instead of Docker Hub for docker image hosting\n- use [httprouter's](https://github.com/julienschmidt/httprouter) more performant mux\n\n## v0.29.0\n\n- embed static assets as templates using [go:embed](https://golang.org/pkg/embed/)\n\n## v0.28.0\n\n- add support for a custom 'relying party identifier' for ADFS\n\n_the rest is history_ and can be teased out with `git log`\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9111328125,
          "content": "# Setting up a Development Environment\n\n## Running Tests \n\n```bash\n export VOUCH_ROOT=`pwd` # if not using GOPATH\n ./do.sh test\n```\n\nAfter running these tests manually once (which creates a test key pair), it is possible to run the tests with VSCode Test Explorer.\n\nTo get it to work, we must set some environment variables in `.vscode/settings.json` which otherwise would be set by `do.sh`:\n\n```json\n{\n    \"go.testEnvVars\": {\n        \"VOUCH_ROOT\": \"${workspaceFolder}\",\n        \"VOUCH_CONFIG\": \"${workspaceFolder}/config/testing/test_config.yml\",\n        \"TEST_PRIVATE_KEY_FILE\": \"${workspaceFolder}/config/testing/rsa.key\",\n        \"TEST_PUBLIC_KEY_FILE\": \"${workspaceFolder}/config/testing/rsa.pub\",\n    }\n}\n```\n\n### Contributing to Vouch Proxy by submitting a Pull Request\n\n**_I really love Vouch Proxy! I wish it did XXXX..._**\n\nThat's really wonderful and contributions are greatly appreciated. However, please search through the existing issues, both open and closed, to look for any prior work or conversation. Then please make a proposal before we all spend valuable time considering and integrating a new feature.\n\nCode contributions should..\n\n- generally be discussed beforehand in a GitHub issue\n- include unit tests and in some cases end-to-end tests\n- be formatted with `go fmt`, checked with `go vet` and other common go tools\n- accomodate configuration via `config.yml` as well as `ENVIRONMENT_VARIABLEs`.\n- not break existing setups without a clear reason (usually security related)\n- include an entry at the top of CHANGELOG.md in the **Unreleased** section\n\nFor larger contributions or code related to a platform that we don't currently support we will ask you to commit to supporting the feature for an agreed upon period. Invariably someone will pop up here with a question and we want to be able to support these requests.\n\n**Thank you to all of the contributors that have provided their time and effort and thought to improving VP.**\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.849609375,
          "content": "# quay.io/vouch/vouch-proxy\n# https://github.com/vouch/vouch-proxy\nFROM golang:1.23 AS builder\n\nARG UID=999\nARG GID=999\nLABEL maintainer=\"vouch@bnf.net\"\n\nRUN mkdir -p ${GOPATH}/src/github.com/vouch/vouch-proxy\nWORKDIR ${GOPATH}/src/github.com/vouch/vouch-proxy\n\nRUN groupadd -g $GID vouch \\\n    && useradd --system vouch --uid=$UID --gid=$GID\n\nCOPY . .\n\n\nRUN ./do.sh goget\nRUN ./do.sh gobuildstatic # see `do.sh` for vouch-proxy build details\nRUN ./do.sh install\n\nFROM scratch\nLABEL maintainer=\"vouch@bnf.net\"\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=builder /etc/passwd /etc/passwd\nCOPY --from=builder /etc/group /etc/group\nCOPY --from=builder /go/bin/vouch-proxy /vouch-proxy\n\nUSER vouch\n\nEXPOSE 9090\nENTRYPOINT [\"/vouch-proxy\"]\nHEALTHCHECK --interval=1m --timeout=5s CMD [ \"/vouch-proxy\", \"-healthcheck\" ]\n"
        },
        {
          "name": "Dockerfile.alpine",
          "type": "blob",
          "size": 0.9404296875,
          "content": "# quay.io/vouch/vouch-proxy\n# https://github.com/vouch/vouch-proxy\nFROM golang:1.23 AS builder\n\nARG UID=999\nARG GID=999\nLABEL maintainer=\"vouch@bnf.net\"\n\nRUN mkdir -p ${GOPATH}/src/github.com/vouch/vouch-proxy\nWORKDIR ${GOPATH}/src/github.com/vouch/vouch-proxy\n\nCOPY . .\n\nRUN ./do.sh goget\nRUN ./do.sh gobuildstatic # see `do.sh` for vouch-proxy build details\nRUN ./do.sh install\n\nRUN groupadd -g $GID vouch \\\n    && useradd --system vouch --uid=$UID --gid=$GID\n\nFROM alpine:latest\nLABEL maintainer=\"vouch@bnf.net\"\nENV VOUCH_ROOT=/\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\n\n#  do.sh requires bash\nRUN apk add --no-cache bash\nCOPY do.sh /do.sh\n\nCOPY --from=builder /etc/passwd /etc/passwd\nCOPY --from=builder /etc/group /etc/group\nCOPY --from=builder /go/bin/vouch-proxy /vouch-proxy\n\nUSER vouch\n\nEXPOSE 9090\nENTRYPOINT [\"/vouch-proxy\"]\nHEALTHCHECK --interval=1m --timeout=5s CMD [ \"/vouch-proxy\", \"-healthcheck\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0634765625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 The Vouch Proxy Authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.8115234375,
          "content": "# Vouch Proxy\n\n[![GitHub stars](https://img.shields.io/github/stars/vouch/vouch-proxy.svg)](https://github.com/vouch/vouch-proxy)\n[![Build Status](https://travis-ci.org/vouch/vouch-proxy.svg?branch=master)](https://travis-ci.org/vouch/vouch-proxy)\n[![Go Report Card](https://goreportcard.com/badge/github.com/vouch/vouch-proxy)](https://goreportcard.com/report/github.com/vouch/vouch-proxy)\n[![MIT license](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/vouch/vouch-proxy/blob/master/LICENSE)\n[![GitHub version](https://img.shields.io/github/v/tag/vouch/vouch-proxy.svg?sort=semver&color=green)](https://github.com/vouch/vouch-proxy)\n\nAn SSO solution for Nginx using the [auth_request](http://nginx.org/en/docs/http/ngx_http_auth_request_module.html) module. Vouch Proxy can protect all of your websites at once.\n\nVouch Proxy supports many OAuth and OIDC login providers and can enforce authentication to...\n\n- [Google](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example_google)\n- [GitHub](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example_github)\n- [GitHub Enterprise](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example_github_enterprise)\n- [IndieAuth](https://indieauth.spec.indieweb.org/)\n- [Okta](https://developer.okta.com/blog/2018/08/28/nginx-auth-request)\n- [Slack](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example_slack)\n- [ADFS](https://github.com/vouch/vouch-proxy/pull/68)\n- [Azure AD](https://github.com/vouch/vouch-proxy/issues/290)\n- [Alibaba / Aliyun iDaas](https://github.com/vouch/vouch-proxy/issues/344)\n- [AWS Cognito](https://github.com/vouch/vouch-proxy/issues/105)\n- [Twitch](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example_twitch)\n- [Discord](https://github.com/eltariel/foundry-docker-nginx-vouch)\n- [SecureAuth](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example_secureauth)\n- [Gitea](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example_gitea)\n- Keycloak\n- [OAuth2 Server Library for PHP](https://github.com/vouch/vouch-proxy/issues/99)\n- [HomeAssistant](https://developers.home-assistant.io/docs/en/auth_api.html)\n- [OpenStax](https://github.com/vouch/vouch-proxy/pull/141)\n- [Ory Hydra](https://github.com/vouch/vouch-proxy/issues/288)\n- [Nextcloud](https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/oauth2.html)\n- most other OpenID Connect (OIDC) providers\n\nPlease do let us know when you have deployed Vouch Proxy with your preffered IdP or library so we can update the list.\n\nIf Vouch is running on the same host as the Nginx reverse proxy the response time from the `/validate` endpoint to Nginx should be **less than 1ms**.\n\n---\n\n## Table of Contents\n\n- [What Vouch Proxy Does...](#what-vouch-proxy-does)\n- [Installation and Configuration](#installation-and-configuration)\n  - [Vouch Proxy \"in a path\"](#vouch-proxy-in-a-path)\n  - [Additional Nginx Configurations](#additional-nginx-configurations)\n  - [Configuration via Environmental Variables](#configuring-via-environmental-variables)\n- [Tips, Tricks and Advanced Configurations](#tips-tricks-and-advanced-configurations)\n  - [Scopes and Claims](#scopes-and-claims)\n- [Running from Docker](#running-from-docker)\n- [Kubernetes Nginx Ingress](#kubernetes-nginx-ingress)\n- [Compiling from source and running the binary](#compiling-from-source-and-running-the-binary)\n- [/login and /logout endpoint redirection](#-login-and--logout-endpoint-redirection)\n- [Troubleshooting, Support and Feature Requests](#troubleshooting-support-and-feature-requests-read-this-before-submitting-an-issue-at-github)\n  (Read this before submitting an issue at GitHub)\n  - [I'm getting an infinite redirect loop which returns me to my IdP (Google/Okta/GitHub/...)](#i-m-getting-an-infinite-redirect-loop-which-returns-me-to-my-idp--google-okta-github--)\n  - [Okay, I looked at the issues and have tried some things with my configs but it's still not working](#okay--i-looked-at-the-issues-and-have-tried-some-things-with-my-configs-but-it-s-still-not-working)\n  - [Contributing to Vouch Proxy](#contributing)\n- [Advanced Authorization Using OpenResty](#advanced-authorization-using-openresty)\n- [The flow of login and authentication using Google Oauth](#the-flow-of-login-and-authentication-using-google-oauth)\n\n## What Vouch Proxy Does\n\nVouch Proxy (VP) forces visitors to login and authenticate with an [IdP](https://en.wikipedia.org/wiki/Identity_provider) (such as one of the services listed above) before allowing them access to a website.\n\n![Vouch Proxy protects websites](https://github.com/vouch/vouch-proxy/blob/master/examples/nginx-vouch-private_simple.png?raw=true)\n\nVP can also be used as a Single Sign On (SSO) solution to protect all web applications in the same domain.\n\n![Vouch Proxy is a Single Sign On solution](https://github.com/vouch/vouch-proxy/blob/master/examples/nginx-vouch-private_appA_appB_appC.png?raw=true)\n\nAfter a visitor logs in Vouch Proxy allows access to the protected websites for several hours. Every request is checked by VP to ensure that it is valid.\n\nVP can send the visitor's email, name and other information which the IdP provides (including access tokens) to the web application as HTTP headers. VP can be used to replace application user management entirely.\n\n## Installation and Configuration\n\nVouch Proxy relies on the ability to share a cookie between the Vouch Proxy server and the application it's protecting. Typically this will be done by running Vouch on a subdomain such as `vouch.yourdomain.com` with apps running at `app1.yourdomain.com` and `app2.yourdomain.com`. The protected domain is `.yourdomain.com` and the Vouch Proxy cookie must be set in this domain by setting [vouch.domains](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example#L38-L48) to include `yourdomain.com` or sometimes by setting [vouch.cookie.domain](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example#L109-L114) to `yourdomain.com`.\n\n- `cp ./config/config.yml_example_$OAUTH_PROVIDER ./config/config.yml`\n- create OAuth credentials for Vouch Proxy at [google](https://console.developers.google.com/apis/credentials) or [github](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-authorization-options-for-oauth-apps/), etc\n  - be sure to direct the callback URL to the Vouch Proxy `/auth` endpoint\n- configure Nginx...\n\nThe following Nginx config assumes..\n\n- Nginx, `vouch.yourdomain.com` and `protectedapp.yourdomain.com` are running on the same server\n- both domains are served as `https` and have valid certs (if not, change to `listen 80` and set [vouch.cookie.secure](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example#L84-L85) to `false`)\n\n```nginx\nserver {\n    listen 443 ssl http2;\n    server_name protectedapp.yourdomain.com;\n    root /var/www/html/;\n\n    ssl_certificate /etc/letsencrypt/live/protectedapp.yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/protectedapp.yourdomain.com/privkey.pem;\n\n    # send all requests to the `/validate` endpoint for authorization\n    auth_request /validate;\n\n    location = /validate {\n      # forward the /validate request to Vouch Proxy\n      proxy_pass http://127.0.0.1:9090/validate;\n      # be sure to pass the original host header\n      proxy_set_header Host $http_host;\n\n      # Vouch Proxy only acts on the request headers\n      proxy_pass_request_body off;\n      proxy_set_header Content-Length \"\";\n\n      # optionally add X-Vouch-User as returned by Vouch Proxy along with the request\n      auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;\n\n      # optionally add X-Vouch-IdP-Claims-* custom claims you are tracking\n      #    auth_request_set $auth_resp_x_vouch_idp_claims_groups $upstream_http_x_vouch_idp_claims_groups;\n      #    auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;\n      # optinally add X-Vouch-IdP-AccessToken or X-Vouch-IdP-IdToken\n      #    auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;\n      #    auth_request_set $auth_resp_x_vouch_idp_idtoken $upstream_http_x_vouch_idp_idtoken;\n\n      # these return values are used by the @error401 call\n      auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;\n      auth_request_set $auth_resp_err $upstream_http_x_vouch_err;\n      auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;\n\n      # Vouch Proxy can run behind the same Nginx reverse proxy\n      # may need to comply to \"upstream\" server naming\n      # proxy_pass http://vouch.yourdomain.com/validate;\n      # proxy_set_header Host $http_host;\n    }\n\n    # if validate returns `401 not authorized` then forward the request to the error401block\n    error_page 401 = @error401;\n\n    location @error401 {\n        # redirect to Vouch Proxy for login\n        return 302 https://vouch.yourdomain.com/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;\n        # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https\n        # but to get started you can just forward the end user to the port that vouch is running on\n        # return 302 http://vouch.yourdomain.com:9090/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;\n    }\n\n    location / {\n      # forward authorized requests to your service protectedapp.yourdomain.com\n      proxy_pass http://127.0.0.1:8080;\n      # you may need to set these variables in this block as per https://github.com/vouch/vouch-proxy/issues/26#issuecomment-425215810\n      #    auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user\n      #    auth_request_set $auth_resp_x_vouch_idp_claims_groups $upstream_http_x_vouch_idp_claims_groups;\n      #    auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;\n\n      # set user header (usually an email)\n      proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;\n      # optionally pass any custom claims you are tracking\n      #     proxy_set_header X-Vouch-IdP-Claims-Groups $auth_resp_x_vouch_idp_claims_groups;\n      #     proxy_set_header X-Vouch-IdP-Claims-Given_Name $auth_resp_x_vouch_idp_claims_given_name;\n      # optionally pass the accesstoken or idtoken\n      #     proxy_set_header X-Vouch-IdP-AccessToken $auth_resp_x_vouch_idp_accesstoken;\n      #     proxy_set_header X-Vouch-IdP-IdToken $auth_resp_x_vouch_idp_idtoken;\n    }\n}\n\n```\n\nIf Vouch is configured behind the **same** nginx reverseproxy ([perhaps so you can configure ssl](https://github.com/vouch/vouch-proxy/issues/64#issuecomment-461085139)) be sure to pass the `Host` header properly, otherwise the JWT cookie cannot be set into the domain\n\n```nginx\nserver {\n    listen 443 ssl http2;\n    server_name vouch.yourdomain.com;\n    ssl_certificate /etc/letsencrypt/live/vouch.yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/vouch.yourdomain.com/privkey.pem;\n\n    location / {\n      proxy_pass http://127.0.0.1:9090;\n      # be sure to pass the original host header\n      proxy_set_header Host $http_host;\n    }\n}\n```\n\n### Vouch Proxy \"in a path\"\n\nAs of `v0.33.0` Vouch Proxy can be served within an Nginx location (path) by configuring `vouch.document_root: /vp_in_a_path`\n\nThis avoids the need to setup a separate domain for Vouch Proxy such as `vouch.yourdomain.com`. For example VP login will be served from `https://protectedapp.yourdomain.com/vp_in_a_path/login`\n\n```nginx\nserver {\n    listen 443 ssl http2;\n    server_name protectedapp.yourdomain.com;\n\n    ssl_certificate /etc/letsencrypt/live/protectedapp.yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/protectedapp.yourdomain.com/privkey.pem;\n\n    # This location serves all Vouch Proxy endpoints as /vp_in_a_path/$uri\n    #   including /vp_in_a_path/validate, /vp_in_a_path/login, /vp_in_a_path/logout, /vp_in_a_path/auth, /vp_in_a_path/auth/$STATE, etc\n    location /vp_in_a_path {\n      proxy_pass http://127.0.0.1:9090; # must not! have a slash at the end\n      proxy_set_header Host $http_host;\n      proxy_pass_request_body off;\n      proxy_set_header Content-Length \"\";\n\n      # these return values are used by the @error401 call\n      auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;\n      auth_request_set $auth_resp_err $upstream_http_x_vouch_err;\n      auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;\n    }\n\n    # if /vp_in_a_path/validate returns `401 not authorized` then forward the request to the error401block\n    error_page 401 = @error401;\n\n    location @error401 {\n        # redirect to Vouch Proxy for login\n        return 302 https://protectedapp.yourdomain.com/vp_in_a_path/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;\n    }\n\n    location / {\n      auth_request /vp_in_a_path/validate;\n      proxy_pass http://127.0.0.1:8080;\n      # see the Nginx config above for additional headers which can be set from Vouch Proxy\n    }\n}\n```\n\n### Additional Nginx Configurations\n\nAdditional Nginx configurations can be found in the [examples](https://github.com/vouch/vouch-proxy/tree/master/examples) directory.\n\n### Configuring via Environmental Variables\n\nHere's a minimal setup using Google's OAuth...\n\n```bash\nVOUCH_DOMAINS=yourdomain.com \\\n  OAUTH_PROVIDER=google \\\n  OAUTH_CLIENT_ID=1234 \\\n  OAUTH_CLIENT_SECRET=secretsecret \\\n  OAUTH_CALLBACK_URL=https://vouch.yourdomain.com/auth \\\n  ./vouch-proxy\n```\n\nEnvironmental variable names are documented in [config/config.yml_example](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example)\n\nAll lists with multiple values must be comma separated: `VOUCH_DOMAINS=\"yourdomain.com,yourotherdomain.com\"`\n\nThe variable `VOUCH_CONFIG` can be used to set an alternate location for the configuration file. `VOUCH_ROOT` can be used to set an alternate root directory for Vouch Proxy to look for support files.\n\n## Tips, Tricks and Advanced Configurations\n\nAll Vouch Proxy configuration items are documented in [config/config.yml_example](https://github.com/vouch/vouch-proxy/blob/master/config/config.yml_example)\n\n- [Cacheing of the Vouch Proxy `/validate` response in Nginx](https://github.com/vouch/vouch-proxy/issues/76#issuecomment-464028743)\n- [Handleing `OPTIONS` requests when protecting an API with Vouch Proxy](https://github.com/vouch/vouch-proxy/issues/216)\n- [Validation by GitHub Team or GitHub Org](https://github.com/vouch/vouch-proxy/pull/205)\n- [Running VP on a Raspberry Pi using the ARM based Docker image](https://github.com/vouch/vouch-proxy/pull/247)\n- [Kubernetes architecture post ingress](https://github.com/vouch/vouch-proxy/pull/263#issuecomment-628297832)\n- [set `HTTP_PROXY` to relay Vouch Proxy IdP requests through an outbound proxy server](https://github.com/vouch/vouch-proxy/issues/291)\n- [Reverse Proxy for Google Cloud Run Services](https://github.com/karthikv2k/oauth_reverse_proxy)\n- [Enable native TLS in Vouch Proxy](https://github.com/vouch/vouch-proxy/pull/332#issue-522612010)\n- [FreeBSD support](https://github.com/vouch/vouch-proxy/issues/368)\n- [`systemd` startup of Vouch Proxy](https://github.com/vouch/vouch-proxy/tree/master/examples/startup)\n- [Using Node.js instead of Nginx to route requests](https://github.com/vouch/vouch-proxy/issues/359)\n- [Developing a Single Page App (SPA) while consuming a VP protected API](https://github.com/vouch/vouch-proxy/issues/416)\n- [Integrate Vouch Proxy into a server side application for User Authn and Authz](https://github.com/vouch/vouch-proxy/issues/421)\n- [Filter by IP address before VP validation by using `satisfy any;`](https://github.com/vouch/vouch-proxy/issues/378#issuecomment-814423460)\n\nPlease do help us to expand this list.\n\n### Scopes and Claims\n\nWith Vouch Proxy you can request various `scopes` (standard and custom) to obtain more information about the user or gain access to the provider's APIs. Internally, Vouch Proxy launches a requests to `user_info_url` after successful authentication. The required `claims` are extracted from the provider's response and stored in the VP cookie.\n\n⚠️ **Additional claims and tokens will be added to the VP cookie and can make it large**\n\nThe VP cookie may be split into several cookies to accomdate browser cookie size limits. But if you need it, you need it. Large cookies and headers require Nginx to be configured with larger buffers. See [large_client_header_buffers](http://nginx.org/en/docs/http/ngx_http_core_module.html#large_client_header_buffers) and [proxy_buffer_size](http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffer_size) for more information.\n\n#### Setup `scopes` and `claims` in Vouch Proxy with Nginx\n\n0. Configure Vouch Proxy for Nginx and your IdP as normal (See: [Installation and Configuration](#installation-and-configuration))\n\n1. Set the necessary `scope`s in the `oauth` section of the vouch-proxy `config.yml` ([example config](config/config.yml_example_scopes_and_claims))\n   1. set `idtoken: X-Vouch-IdP-IdToken` in the `headers` section of vouch-proxy's `config.yml`\n   2. log in and call the `/validate` endpoint in a modern browser\n   3. check the response header for a `X-Vouch-IdP-IdToken` header\n   4. copy the value of the header into the debugger at [https://jwt.io/](https://jwt.io/) and ensure that the necessary claims are part of the jwt\n   5. if they are not, you need to adjust the `scopes` in the `oauth` section of your `config.yml` or reconfigure your oauth provider\n2. Set the necessary `claims` in the `header` section of the vouch-proxy `config.yml`\n   1. log in and call the `/validate` endpoint in a modern browser\n   2. check the response headers for headers of the form `X-Vouch-IdP-Claims-<ClaimName>`\n   3. If they are not there clear your cookies and cached browser data\n   4. 🐞 If they are still not there but exist in the jwt (esp. custom claims) there might be a bug\n   5. remove the `idtoken: X-Vouch-IdP-IdToken` from the `headers` section of vouch-proxy's `config.yml` if you don't need it\n3. Use `auth_request_set` after `auth_request` inside the protected location in the nginx [`server.conf`](examples/nginx/nginx_scopes_and_claims.conf)\n4. Consume the claim ([example nginx config](examples/nginx/nginx_scopes_and_claims.conf))\n\n## Running from Docker\n\n```bash\ndocker run -d \\\n    -p 9090:9090 \\\n    --name vouch-proxy \\\n    -v ${PWD}/config:/config \\\n    quay.io/vouch/vouch-proxy\n```\n\nor\n\n```bash\ndocker run -d \\\n    -p 9090:9090 \\\n    --name vouch-proxy \\\n    -e VOUCH_DOMAINS=yourdomain.com \\\n    -e OAUTH_PROVIDER=google \\\n    -e OAUTH_CLIENT_ID=1234 \\\n    -e OAUTH_CLIENT_SECRET=secretsecret \\\n    -e OAUTH_CALLBACK_URL=https://vouch.yourdomain.com/auth \\\n    quay.io/vouch/vouch-proxy\n```\n\nAs of `v0.36.0` the docker process in the container runs as user `vouch` with UID 999 and GID 999. You may need to set the permissions of `/config/config.yml` and `/config/secret` to correspond to be readable by this user, or otherwise use `docker run --user $UID:$GID ...` or perhaps build the docker container from source and use the available ARGs for UID and GID.\n\nAutomated container builds for each Vouch Proxy release are available from [quay.io](https://quay.io/repository/vouch/vouch-proxy). Each release produces..\n\na minimal go binary container built from `Dockerfile`\n\n- `quay.io/vouch/vouch-proxy:latest`\n- `quay.io/vouch/vouch-proxy:x.y.z` such as `quay.io/vouch/vouch-proxy:0.28.0`\n\nan `alpine` based container built from `Dockerfile.alpine`\n\n- `quay.io/vouch/vouch-proxy:alpine-latest`\n- `quay.io/vouch/vouch-proxy:alpine-x.y.z`\n\nVouch Proxy `arm` images are available on [Docker Hub](https://hub.docker.com/r/voucher/vouch-proxy/)\n\n- `voucher/vouch-proxy:latest-arm`\n\n## Kubernetes Nginx Ingress\n\nIf you are using kubernetes with [nginx-ingress](https://github.com/kubernetes/ingress-nginx), you can configure your ingress with the following annotations (note quoting the `auth-signin` annotation):\n\n```bash\n    nginx.ingress.kubernetes.io/auth-signin: \"https://vouch.yourdomain.com/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err\"\n    nginx.ingress.kubernetes.io/auth-url: https://vouch.yourdomain.com/validate\n    nginx.ingress.kubernetes.io/auth-response-headers: X-Vouch-User\n    nginx.ingress.kubernetes.io/auth-snippet: |\n      # these return values are used by the @error401 call\n      auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;\n      auth_request_set $auth_resp_err $upstream_http_x_vouch_err;\n      auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;\n      # when VP is hosted externally to k8s ensure the SSL cert is valid to avoid MITM risk\n      # proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;\n      # proxy_ssl_session_reuse on;\n      # proxy_ssl_verify_depth 2;\n      # proxy_ssl_verify on;\n```\n\nHelm Charts are maintained by [punkle](https://github.com/punkle), [martina-if](https://github.com/martina-if) and [halkeye](https://github.com/halkeye) and are available at [https://github.com/vouch/helm-charts](https://github.com/vouch/helm-charts)\n\n## Compiling from source and running the binary\n\n```bash\n  ./do.sh goget\n  ./do.sh build\n  ./vouch-proxy\n```\n\nAs of `v0.29.0` all templates, static assets and configuration defaults in `.defaults.yml` are built into the static binary using [go:embed](https://pkg.go.dev/embed) directives.\n\n## /login and /logout endpoint redirection\n\nAs of `v0.11.0` additional checks are in place to reduce [the attack surface of url redirection](https://blog.detectify.com/2019/05/16/the-real-impact-of-an-open-redirect/).\n\n### /login?url=POST_LOGIN_URL\n\nThe passed URL...\n\n- must start with either `http` or `https`\n- must have a domain overlap with either a domain in the `vouch.domains` list or the `vouch.cookie.domain` (if either of those are configured)\n- cannot have a parameter which includes a URL to [prevent URL chaining attacks](https://hackerone.com/reports/202781)\n\n### /logout?url=NEXT_URL\n\nThe Vouch Proxy `/logout` endpoint accepts a `url` parameter in the query string which can be used to `302` redirect a user to your orignal OAuth provider/IDP/OIDC provider's [revocation_endpoint](https://tools.ietf.org/html/rfc7009)\n\n```bash\n    https://vouch.oursites.com/logout?url=https://oauth2.googleapis.com/revoke\n```\n\nthis url must be present in the configuration file on the list `vouch.post_logout_redirect_uris`\n\n```yaml\n# in order to prevent redirection attacks all redirected URLs to /logout must be specified\n# the URL must still be passed to Vouch Proxy as https://vouch.yourdomain.com/logout?url=${ONE OF THE URLS BELOW}\npost_logout_redirect_uris:\n  # your apps login page\n  - https://yourdomain.com/login\n  # your IdPs logout enpoint\n  # from https://accounts.google.com/.well-known/openid-configuration\n  - https://oauth2.googleapis.com/revoke\n  # you may be daisy chaining to your IdP\n  - https://myorg.okta.com/oauth2/123serverid/v1/logout?post_logout_redirect_uri=http://myapp.yourdomain.com/login\n```\n\nNote that your IdP will likely carry their own, separate `post_logout_redirect_uri` list.\n\nlogout resources..\n\n- [Google](https://developers.google.com/identity/protocols/OAuth2WebServer#tokenrevoke)\n- [Okta](https://developer.okta.com/docs/api/resources/oidc#logout)\n- [Auth0](https://auth0.com/docs/logout/guides/logout-idps)\n\n## Troubleshooting, Support and Feature Requests (Read this before submitting an issue at GitHub)\n\nGetting the stars to align between Nginx, Vouch Proxy and your IdP can be tricky. We want to help you get up and running as quickly as possible. The most common problem is..\n\n### I'm getting an infinite redirect loop which returns me to my IdP (Google/Okta/GitHub/...)\n\nDouble check that you are running Vouch Proxy and your apps on a common domain that can share cookies. For example, `vouch.yourdomain.com` and `app.yourdomain.com` can share cookies on the `.yourdomain.com` domain. (It will not work if you are trying to use `vouch.yourdomain.org` and `app.yourdomain.net`.)\n\nYou may need to explicitly define the domain that the cookie should be set on. You can do this in the config file by setting the option:\n\n```yaml\nvouch:\n  cookie:\n    # force the domain of the cookie to set\n    domain: yourdomain.com\n```\n\nIf you continue to have trouble, try the following:\n\n- **turn on `vouch.testing: true`**. This will slow down the loop.\n- set `vouch.logLevel: debug`.\n- the `Host:` header in the http request, the `oauth.callback_url` and the configured `vouch.domains` must all align so that the cookie that carries the JWT can be placed properly into the browser and then returned on each request\n- it helps to **_think like a cookie_**.\n\n  - a cookie is set into a domain. If you have `siteA.yourdomain.com` and `siteB.yourdomain.com` protected by Vouch Proxy, you want the Vouch Proxy cookie to be set into `.yourdomain.com`\n  - if you authenticate to `vouch.yourdomain.com` the cookie will not be able to be seen by `dev.anythingelse.com`\n  - unless you are using https, you should set `vouch.cookie.secure: false`\n  - cookies **are** available to all ports of a domain\n\n- please see the [issues which have been closed that mention redirect](https://github.com/vouch/vouch-proxy/issues?utf8=%E2%9C%93&q=is%3Aissue+redirect+)\n\n### Okay, I looked at the issues and have tried some things with my configs but it's still not working\n\nPlease [submit a new issue](https://github.com/vouch/vouch-proxy/issues) in the following fashion..\n\nTLDR:\n\n- set `vouch.testing: true`\n- set `vouch.logLevel: debug`\n- conduct two full round trips of `./vouch-proxy` capturing the output..\n  - VP startup\n  - `/validate`\n  - `/login` - even if the error is here\n  - `/auth`\n  - `/validate` - capture everything\n- put all your logs and config in a `gist`.\n- `./do.sh bug_report` is your friend\n\n#### But read this anyways because we'll ask you to read it if you don't follow these instruction. :)\n\n- **turn on `vouch.testing: true`** and set `vouch.logLevel: debug`.\n- use a [gist](https://gist.github.com/) or another **paste service** such as [hasteb.in](https://hasteb.in/). **_DO NOT PUT YOUR LOGS AND CONFIG INTO THE GITHUB ISSUE_**. Using a paste service is important as it will maintain spacing and will provide line numbers and formatting. We are hunting for needles in haystacks with setups with several moving parts, these features help considerably. Paste services save your time and our time and help us to help you quickly. You're more likely to get good support from us in a timely manner by following this advice.\n- run `./do.sh bug_report secretdomain.com secretpass [anothersecret..]` which will create a redacted version of your config and logs removing each of those strings\n  - and follow the instructions at the end to redact your Nginx config\n- all of those go into a [gist](https://gist.github.com/)\n- then [open a new issue](https://github.com/vouch/vouch-proxy/issues/new) in this repository\n\nA bug report can be generated from a docker environment using the `quay.io/vouch/vouch-proxy:alpine` image...\n\n```!bash\ndocker run --name vouch_proxy -v $PWD/config:/config -v $PWD/certs:/certs -it --rm --entrypoint /do.sh quay.io/vouch/vouch-proxy:alpine bug_report yourdomain.com anotherdomain.com someothersecret\n```\n\n### Contributing\n\nWe'd love to have you contribute! Please refer to our [contribution guidelines](https://github.com/vouch/vouch-proxy/blob/master/CONTRIBUTING.md) for details.\n\n## Advanced Authorization Using OpenResty\n\nOpenResty® is a full-fledged web platform that integrates the standard Nginx core, LuaJIT, many carefully written Lua libraries, lots of high quality 3rd-party Nginx modules, and most of their external dependencies.\n\nYou can replace nginx with [OpenResty](https://openresty.org/en/installation.html) fairly easily.\n\nWith OpenResty and Lua it is possible to provide customized and advanced authorization on any header or claims vouch passes down.\n\nOpenResty and configs for a variety of scenarios are available in the [examples](https://github.com/vouch/vouch-proxy/tree/master/examples) directory.\n\n## The flow of login and authentication using Google Oauth\n\n- Bob visits `https://private.oursites.com`\n- the Nginx reverse proxy...\n\n  - recieves the request for private.oursites.com from Bob\n  - uses the `auth_request` module configured for the `/validate` path\n  - `/validate` is configured to `proxy_pass` requests to the authentication service at `https://vouch.oursites.com/validate`\n    - if `/validate` returns...\n      - 200 OK then SUCCESS allow Bob through\n      - 401 NotAuthorized then\n        - respond to Bob with a 302 redirect to `https://vouch.oursites.com/login?url=https://private.oursites.com`\n\n- Vouch Proxy `https://vouch.oursites.com/validate`\n\n  - recieves the request for private.oursites.com from Bob via Nginx `proxy_pass`\n  - looks for a cookie named \"oursitesSSO\" that contains a JWT\n  - if the cookie is found, and the JWT is valid\n    - returns `200 OK` to Nginx, which will allow access (bob notices nothing)\n  - if the cookie is NOT found, or the JWT is NOT valid\n    - return `401 NotAuthorized` to Nginx (which forwards the request on to login)\n\n- Bob is first forwarded briefly to `https://vouch.oursites.com/login?url=https://private.oursites.com`\n\n  - clears out the cookie named \"oursitesSSO\" if it exists\n  - generates a nonce and stores it in session variable \\$STATE\n  - stores the url `https://private.oursites.com` from the query string in session variable `$requestedURL`\n  - respond to Bob with a 302 redirect to Google's OAuth Login form, including the `$STATE` nonce\n\n- Bob logs into his Google account using Oauth\n\n  - after successful login\n  - Google responds to Bob with a 302 redirect to `https://vouch.oursites.com/auth?state=$STATE`\n\n- Bob is forwarded to `https://vouch.oursites.com/auth?state=$STATE`\n  - if the \\$STATE nonce from the url matches the session variable \"state\"\n  - make a \"third leg\" request of Google (server to server) to exchange the OAuth code for Bob's user info including email address bob@oursites.com\n  - if the email address matches the domain oursites.com (it does)\n    - issue bob a JWT in the form of a cookie named \"oursitesSSO\"\n    - retrieve the session variable `$requestedURL` and 302 redirect bob back to `https://private.oursites.com`\n\nNote that outside of some innocuos redirection, Bob only ever sees `https://private.oursites.com` and the Google Login screen in his browser. While Vouch does interact with Bob's browser several times, it is just to set cookies, and if the 302 redirects work properly Bob will log in quickly.\n\nOnce the JWT is set, Bob will be authorized for all other sites which are configured to use `https://vouch.oursites.com/validate` from the `auth_request` Nginx module.\n\nThe next time Bob is forwarded to google for login, since he has already authorized the Vouch Proxy OAuth app, Google immediately forwards him back and sets the cookie and sends him on his merry way. In some browsers such as Chrome, Bob may not even notice that he logged in using Vouch Proxy.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2568359375,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nIf you have discovered a vulnerability in Vouch Proxy DO NOT post an issue on GitHub.\n\nPlease do email the maintainers at vouch-proxy-security@bnf.net\n\nWe will respond in short order (usually within a day or two).\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "do.sh",
          "type": "blob",
          "size": 11.4619140625,
          "content": "#!/usr/bin/env bash\nset -e\n\n# change dir to where this script is running\nCURDIR=${PWD}\nSCRIPT=$(readlink -f \"$0\")\nSDIR=$(dirname \"$SCRIPT\")\ncd $SDIR\n\nif [ -z \"$VOUCH_ROOT\" ]; then\n  export VOUCH_ROOT=${GOPATH}/src/github.com/vouch/vouch-proxy/\nfi\n\nIMAGE=quay.io/vouch/vouch-proxy:latest\nALPINE=quay.io/vouch/vouch-proxy:alpine-latest\nGOIMAGE=golang:1.23\nNAME=vouch-proxy\nHTTPPORT=9090\nGODOC_PORT=5050\n\nrun () {\n  go run main.go\n}\n\nbuild () {\n  local VERSION=$(git describe --always --long)\n  local DT=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\") # ISO-8601\n  local UQDN=$(_hostname)\n  local SEMVER=$(git tag --list --sort=\"v:refname\" | tail -n -1)\n  local BRANCH=$(git rev-parse --abbrev-ref HEAD)\n  local UNAME=$(uname)\n  go build -v -ldflags=\" -X main.version=${VERSION} -X main.uname=${UNAME} -X main.builddt=${DT} -X main.host=${UQDN} -X main.semver=${SEMVER} -X main.branch=${BRANCH}\" .\n}\n\n_hostname() {\n  local FQDN\n  local UQDN\n  FQDN=$(hostname)\n  UQDN=${FQDN/.*/}\n\n  if [ -z \"$UQDN\" ]; then\n    >&2 echo \"error: Could determine the fully qualified domain name.\"\n    return 1\n  fi\n  echo \"$UQDN\"\n  return 0;\n}\n\ninstall () {\n  cp ./vouch-proxy ${GOPATH}/bin/vouch-proxy\n}\n\ngogo () {\n  docker run --rm -i -t -v /var/run/docker.sock:/var/run/docker.sock -v ${SDIR}/go:/go --name gogo $GOIMAGE $*\n}\n\ndbuild () {\n  docker build -f Dockerfile -t $IMAGE .\n}\n\ndbuildalpine () {\n  docker build -f Dockerfile.alpine -t $ALPINE .\n}\n\ngobuildstatic () {\n  export CGO_ENABLED=0\n  export GOOS=linux\n  build\n}\n\ndrun () {\n  if [ \"$(docker ps | grep $NAME)\" ]; then\n    docker stop $NAME\n    docker rm $NAME\n  fi\n  WITHCERTS=\"\"\n  if [ -d \"${SDIR}/certs\" ] && [ -z $(find ${SDIR}/certs -type d -empty) ]; then\n    WITHCERTS=\"-v ${SDIR}/certs:/certs\"\n  fi\n\n\n  CMD=\"docker run --rm -i -t\n    -p ${HTTPPORT}:${HTTPPORT}\n    --name $NAME\n    -v ${SDIR}/config:/config\n    $WITHCERTS\n    $IMAGE $* \"\n\n    echo $CMD\n    $CMD\n}\n\ndrunalpine () {\n  IMAGE=$ALPINE\n  drun $*\n}\n\n\nwatch () {\n  CMD=$@;\n  if [ -z \"$CMD\" ]; then\n      CMD=\"go run main.go\"\n  fi\n  clear\n  echo -e \"starting watcher for:\\n\\t$CMD\"\n\n  # TODO: add *.tmpl and *.css\n  # find . -type f -name '*.css' | entr -cr $CMD\n  find . -name '*.go' | entr -cr $CMD\n}\n\ngoget () {\n  # install all the things\n  go get -u -v ./...\n  go mod tidy\n}\n\nREDACT=\"\"\nbug_report() {\n  set +e\n  # CONFIG=$1; shift;\n  CONFIG=config/config.yml\n  REDACT=$*\n\n  if [ -z \"$REDACT\" ]; then\n    cat <<EOF\n\n    bug_report cleans the ${CONFIG} and the Vouch Proxy logs of secrets and any additional strings (usually domains and email addresses)\n\n    usage:\n\n      $0 bug_report redacted_string redacted_string\n\nEOF\n    exit 1;\n  fi\n  echo -e \"#\\n# If sensitive information is still visible in the output, first try appending the string..\"\n  echo -e \"#\\n#    '$0 bug_report badstring1 badstring2'\\n#\\n\"\n  echo -e \"#\\n# Please consider submitting a PR for the './do.sh _redact' routine if you feel that it should be improved.\\n#\"\n  echo -e \"\\n-------------------------\\n\\n#\\n# redacted Vouch Proxy ${CONFIG}\\n# $(date -I)\\n#\\n\"\n  cat $CONFIG | _redact\n\n  echo -e \"\\n-------------------------\\n\\n#\\n# redacted Vouch Proxy logs\\n# $(date -I)\\n#\\n\"\n  echo -e \"# be sure to set 'vouch.testing: true' and 'vouch.logLevel: debug' in your config\\n\"\n\n  trap _redact_exit SIGINT\n  ./vouch-proxy 2>&1 | _redact\n\n}\n\n_redact_exit () {\n  echo -e \"\\n\\n-------------------------\\n\"\n  echo -e \"redact your nginx config with:\\n\"\n  echo -e \"\\tcat nginx.conf | sed 's/yourdomain.com/DOMAIN.COM/g'\\n\"\n  echo -e \"Please upload configs and logs to a gist and open an issue on GitHub at https://github.com/vouch/vouch-proxy/issues\\n\"\n}\n\n_redact() {\n  SECRET_FIELDS=(\"client_id client_secret secret ClientSecret ClientID\")\n  while IFS= read -r LINE; do\n    for i in $SECRET_FIELDS; do\n      LINE=$(echo \"$LINE\" | sed -r \"s/${i}..[[:graph:]]*\\>/${i}: XXXXXXXXXXX/g\")\n    done\n    # j=$(expr $j + 1)\n    for i in $REDACT; do\n      r=$i\n      r=$(echo \"$r\" | sed \"s/[[:alnum:]]/+/g\")\n      # LINE=$(echo \"$LINE\" | sed \"s/${i}/+++++++/g\")\n      LINE=$(echo \"$LINE\" | sed \"s/${i}/${r}/g\")\n    done\n    echo \"${LINE}\"\n  done\n}\n\ncoverage() {\n  mkdir -p .cover && go test -v -coverprofile=.cover/cover.out ./...\n}\n\ncoveragereport() {\n  go tool cover -html=.cover/cover.out -o .cover/coverage.html\n}\n\ntest() {\n  if [ -z \"$VOUCH_CONFIG\" ]; then\n    export VOUCH_CONFIG=\"$SDIR/config/testing/test_config.yml\"\n  fi\n\n  TEST_PRIVATE_KEY_FILE=\"$SDIR/config/testing/rsa.key\"\n  TEST_PUBLIC_KEY_FILE=\"$SDIR/config/testing/rsa.pub\"\n  if [[ ! -f \"$TEST_PRIVATE_KEY_FILE\" ]]; then\n    openssl genrsa -out \"$TEST_PRIVATE_KEY_FILE\" 4096\n  fi\n  if [[ ! -f \"$TEST_PUBLIC_KEY_FILE\" ]]; then\n    openssl rsa -in \"$TEST_PRIVATE_KEY_FILE\" -pubout > \"$TEST_PUBLIC_KEY_FILE\"\n  fi\n\n  go get -t ./...\n  # test all the things\n  if [ -n \"$*\" ]; then\n    # go test -v -race $EXTRA_TEST_ARGS $*\n    go test -race $EXTRA_TEST_ARGS $*\n  else\n    # go test -v -race $EXTRA_TEST_ARGS ./...\n    go test -race $EXTRA_TEST_ARGS ./...\n  fi\n}\n\ntest_logging() {\n  build\n\n  declare -a levels=(error warn info debug)\n\n  echo \"testing loglevel set from command line\"\n  levelcount=0\n  for ll in ${levels[*]}; do\n    # test that we can see the current level and no level below this level\n\n    declare -a shouldnotfind=()\n    for (( i=0; i<${#levels[@]}; i++ ));  do\n      if (( $i > $levelcount )); then\n        shouldnotfind+=(${levels[$i]})\n      fi\n    done\n\n    linesread=0\n    IFS=$'\\n';for line in $(./vouch-proxy -logtest -loglevel ${ll} -config ./config/testing/test_config.yml); do\n      let \"linesread+=1\"\n      # echo \"$linesread $line\"\n      # first line is log info\n      if (( $linesread > 1 )); then\n        for nono in ${shouldnotfind[*]} ; do\n          if echo $line | grep $nono; then\n            echo \"error: line should not contain '$nono' when loglevel is '$ll'\"\n            echo \"$linesread $line\"\n            exit 1;\n          fi\n        done\n      fi\n    done\n    let \"levelcount+=1\"\n  done\n  echo \"passed\"\n\n  echo \"testing loglevel set from config file\"\n  levelcount=0\n  for ll in ${levels[*]}; do\n    # test that we can see the current level and no level below this level\n    declare -a shouldnotfind=()\n    for (( i=0; i<${#levels[@]}; i++ ));  do\n      if (( $i > $levelcount )); then\n        shouldnotfind+=(${levels[$i]})\n      fi\n    done\n\n    linesread=0\n    IFS=$'\\n';for line in $(./vouch-proxy -logtest -config ./config/testing/logging_${ll}.yml); do\n      let \"linesread+=1\"\n      # the first four messages are log and info when starting from the command line\n      if (( $linesread > 4 )); then\n        # echo \"$linesread $line\"\n        for nono in ${shouldnotfind[*]} ; do\n          # echo \"testing $nono\"\n          if echo $line | grep $nono; then\n            echo \"error: line should not contain '$nono' when loglevel is '$ll'\"\n            echo \"$linesread $line\"\n            exit 1;\n          fi\n        done\n      fi\n    done\n    let \"levelcount+=1\"\n\n  done\n  echo \"passed\"\n  exit 0\n}\n\nstats () {\n  echo -n \"lines of code: \"\n  find . -name '*.go' | xargs wc -l | grep total\n\n  echo -n \"number of go files: \"\n  find . -name '*.go' | wc -l\n\n  echo -n \"number of covered packages: \"\n  covered=$(coverage | grep ok | wc -l)\n  echo $covered\n  echo -n \"number of packages not covered: \"\n  coverage | grep -v ok | wc -l\n\n  echo -n \"average of coverage for all covered packages: \"\n  sumcoverage=$(coverage | grep ok | awk '{print $5}' | sed 's/%//' | paste -sd+ - | bc)\n  # echo \" sumcoverage: $sumcoverage \"\n  perl -le \"print $sumcoverage/$covered, '%'\"\n  exit 0;\n}\n\nlicense() {\n  local FILE=$1;\n  if [ ! -f \"${FILE}\" ]; then\n    echo \"need filename\";\n    exit 1;\n  fi\n  FOUND=$(_has_license $FILE)\n  if [ -z \"${FOUND}\" ]; then\n    local YEAR=$(git log -1 --format=\"%ai\" -- $FILE | cut -d- -f1);\n    _print_license $YEAR > ${FILE}_licensed\n    cat $FILE >> ${FILE}_licensed\n    mv ${FILE}_licensed $FILE\n    echo \"added license to the header of $FILE\"\n  fi\n\n  # and then format the codebase\n  gofmt\n\n}\n\n_print_license() {\n  local YEAR=$1;\n  if [ -z \"$YEAR\" ]; then\n    YEAR=$(date +%Y)\n  fi\n  cat <<EOF\n/*\n\nCopyright $YEAR The Vouch Proxy Authors.\nUse of this source code is governed by The MIT License (MIT) that\ncan be found in the LICENSE file. Software distributed under The\nMIT License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\nOR CONDITIONS OF ANY KIND, either express or implied.\n\n*/\n\nEOF\n\n}\n\n_has_license() {\n  local FILE=$1;\n  # echo checking $FILE\n  echo $(grep -P 'Copyright \\d\\d\\d\\d The Vouch Proxy Authors' ${FILE})\n}\n\nprofile() {\n  echo \"for profiling to work you may need to uncomment the code in main.go\"\n  build\n  ./vouch-proxy -profile\n  go tool pprof -http=0.0.0.0:19091 http://0.0.0.0:9090/debug/pprof/profile?seconds=10\n}\n\ngofmt() {\n  # segfault's without exec since it would just call this function infinitely :)\n  exec gofmt -w -s .\n}\n\ngosec() {\n  # segfault's without exec since it would just call this function infinitely :)\n  exec gosec ./...\n}\n\nselfcert() {\n  # https://stackoverflow.com/questions/63588254/how-to-set-up-an-https-server-with-a-self-signed-certificate-in-golang\n  set -e\n  mkdir -p $SDIR/certs\n  # openssl genrsa -out $SDIR/certs/server.key 2048\n  openssl ecparam -genkey -name secp384r1 -out $SDIR/certs/server.key\n  openssl req -new -x509 -sha256 -key $SDIR/certs/server.key -out $SDIR/certs/server.crt -days 3650\n  echo -e \"created self signed certs in '$SDIR/certs'\\n\"\n}\n\nusage() {\n   cat <<EOF\n   usage:\n     $0 run                                - go run main.go\n     $0 build                              - go build\n     $0 install                            - move binary to ${GOPATH}/bin/vouch\n     $0 goget                              - get all dependencies\n     $0 gofmt                              - gofmt the entire code base\n     $0 gosec                              - gosec security audit of the entire code base\n     $0 selfcert                           - calls openssl to create a self signed key and cert\n     $0 dbuild                             - build docker container\n     $0 drun [args]                        - run docker container\n     $0 dbuildalpine                       - build docker container for alpine\n     $0 drunalpine [args]                  - run docker container for alpine\n     $0 test [./pkg_test.go]               - run go tests (defaults to all tests)\n     $0 test_logging                       - test the logging output\n     $0 coverage                           - coverage test\n     $0 coveragereport                     - coverage report published to .cover/coverage.html\n     $0 profile                            - go pprof tools\n     $0 bug_report domain.com [badstr2..]  - print config file and log removing secrets and each provided string\n     $0 gogo [gocmd]                       - run, build, any go cmd\n     $0 stats                              - simple metrics (lines of code in project, number of go files)\n     $0 watch [cmd]                        - watch the \\$CWD for any change and re-reun the [cmd] (defaults to 'go run main.go')\n     $0 license [file]                     - apply the license to the file\n\n  do is like make\n\nEOF\n  exit 1\n\n}\n\nARG=$1;\n\ncase \"$ARG\" in\n   'run' \\\n   |'build' \\\n   |'dbuild' \\\n   |'drun' \\\n   |'dbuildalpine' \\\n   |'drunalpine' \\\n   |'install' \\\n   |'test' \\\n   |'goget' \\\n   |'selfcert' \\\n   |'gogo' \\\n   |'watch' \\\n   |'gobuildstatic' \\\n   |'coverage' \\\n   |'coveragereport' \\\n   |'stats' \\\n   |'usage' \\\n   |'bug_report' \\\n   |'test_logging' \\\n   |'license' \\\n   |'profile' \\\n   |'gosec' \\\n   |'gofmt')\n   shift\n   $ARG $*\n   ;;\n   'godoc')\n   echo \"godoc running at http://${GODOC_PORT}\"\n   godoc -http=:${GODOC_PORT}\n   ;;\n   'all')\n   shift\n   gobuildstatic\n   dbuild\n   drun $*\n   ;;\n   *)\n   usage\n   ;;\nesac\n\nexit;\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.3369140625,
          "content": "module github.com/vouch/vouch-proxy\n\ngo 1.23\n\nrequire (\n\tgithub.com/golang-jwt/jwt v3.2.2+incompatible\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/gorilla/sessions v1.2.2\n\tgithub.com/julienschmidt/httprouter v1.3.0\n\tgithub.com/karupanerura/go-mock-http-response v0.0.0-20171201120521-7c242a447d45\n\tgithub.com/kelseyhightower/envconfig v1.4.0\n\tgithub.com/mitchellh/mapstructure v1.5.0\n\tgithub.com/nirasan/go-oauth-pkce-code-verifier v0.0.0-20220510032225-4f9f17eaec4c\n\tgithub.com/patrickmn/go-cache v2.1.0+incompatible\n\tgithub.com/spf13/viper v1.18.2\n\tgithub.com/stretchr/testify v1.9.0\n\tgithub.com/theckman/go-securerandom v0.1.1\n\tgithub.com/tsenart/vegeta v12.7.0+incompatible\n\tgo.uber.org/zap v1.27.0\n\tgolang.org/x/net v0.22.0\n\tgolang.org/x/oauth2 v0.18.0\n)\n\nrequire (\n\tcloud.google.com/go/compute v1.25.1 // indirect\n\tcloud.google.com/go/compute/metadata v0.2.3 // indirect\n\tgithub.com/bmizerany/perks v0.0.0-20141205001514-d9a9656a3a4b // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/dgryski/go-gk v0.0.0-20200319235926-a69029f61654 // indirect\n\tgithub.com/fsnotify/fsnotify v1.7.0 // indirect\n\tgithub.com/golang/protobuf v1.5.4 // indirect\n\tgithub.com/gorilla/securecookie v1.1.2 // indirect\n\tgithub.com/hashicorp/hcl v1.0.0 // indirect\n\tgithub.com/influxdata/tdigest v0.0.1 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/magiconair/properties v1.8.7 // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.2.0 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/sagikazarmark/locafero v0.4.0 // indirect\n\tgithub.com/sagikazarmark/slog-shim v0.1.0 // indirect\n\tgithub.com/sourcegraph/conc v0.3.0 // indirect\n\tgithub.com/spf13/afero v1.11.0 // indirect\n\tgithub.com/spf13/cast v1.6.0 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/streadway/quantile v0.0.0-20150917103942-b0c588724d25 // indirect\n\tgithub.com/subosito/gotenv v1.6.0 // indirect\n\tgo.uber.org/multierr v1.11.0 // indirect\n\tgolang.org/x/exp v0.0.0-20240318143956-a85f2c67cd81 // indirect\n\tgolang.org/x/sys v0.18.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n\tgoogle.golang.org/appengine v1.6.8 // indirect\n\tgoogle.golang.org/protobuf v1.33.0 // indirect\n\tgopkg.in/ini.v1 v1.67.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 14.23828125,
          "content": "cloud.google.com/go/compute v1.25.1 h1:ZRpHJedLtTpKgr3RV1Fx23NuaAEN1Zfx9hw1u4aJdjU=\ncloud.google.com/go/compute v1.25.1/go.mod h1:oopOIR53ly6viBYxaDhBfJwzUAxf1zE//uf3IB011ls=\ncloud.google.com/go/compute/metadata v0.2.3 h1:mg4jlk7mCAj6xXp9UJ4fjI9VUI5rubuGBW5aJ7UnBMY=\ncloud.google.com/go/compute/metadata v0.2.3/go.mod h1:VAV5nSsACxMJvgaAuX6Pk2AawlZn8kiOGuCv6gTkwuA=\ngithub.com/bmizerany/perks v0.0.0-20141205001514-d9a9656a3a4b h1:AP/Y7sqYicnjGDfD5VcY4CIfh1hRXBUavxrvELjTiOE=\ngithub.com/bmizerany/perks v0.0.0-20141205001514-d9a9656a3a4b/go.mod h1:ac9efd0D1fsDb3EJvhqgXRbFx7bs2wqZ10HQPeU8U/Q=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgryski/go-gk v0.0.0-20200319235926-a69029f61654 h1:XOPLOMn/zT4jIgxfxSsoXPxkrzz0FaCHwp33x5POJ+Q=\ngithub.com/dgryski/go-gk v0.0.0-20200319235926-a69029f61654/go.mod h1:qm+vckxRlDt0aOla0RYJJVeqHZlWfOm2UIxHaqPB46E=\ngithub.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\ngithub.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=\ngithub.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=\ngithub.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/gorilla/securecookie v1.1.2 h1:YCIWL56dvtr73r6715mJs5ZvhtnY73hBvEF8kXD8ePA=\ngithub.com/gorilla/securecookie v1.1.2/go.mod h1:NfCASbcHqRSY+3a8tlWJwsQap2VX5pwzwo4h3eOamfo=\ngithub.com/gorilla/sessions v1.2.2 h1:lqzMYz6bOfvn2WriPUjNByzeXIlVzURcPmgMczkmTjY=\ngithub.com/gorilla/sessions v1.2.2/go.mod h1:ePLdVu+jbEgHH+KWw8I1z2wqd0BAdAQh/8LRvBeoNcQ=\ngithub.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/influxdata/tdigest v0.0.1 h1:XpFptwYmnEKUqmkcDjrzffswZ3nvNeevbUSLPP/ZzIY=\ngithub.com/influxdata/tdigest v0.0.1/go.mod h1:Z0kXnxzbTC2qrx4NaIzYkE1k66+6oEDQTvL95hQFh5Y=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/julienschmidt/httprouter v1.3.0 h1:U0609e9tgbseu3rBINet9P48AI/D3oJs4dN7jwJOQ1U=\ngithub.com/julienschmidt/httprouter v1.3.0/go.mod h1:JR6WtHb+2LUe8TCKY3cZOxFyyO8IZAc4RVcycCCAKdM=\ngithub.com/karupanerura/go-mock-http-response v0.0.0-20171201120521-7c242a447d45 h1:XSik/ETzj52cVbZcv7tJuUFX14XzvRX0te26UaKY0Aw=\ngithub.com/karupanerura/go-mock-http-response v0.0.0-20171201120521-7c242a447d45/go.mod h1:FULZ2B7LE0CUYtI8XLMYxI58AF9M6MTg6nWmZvWoFHQ=\ngithub.com/kelseyhightower/envconfig v1.4.0 h1:Im6hONhd3pLkfDFsbRgu68RDNkGF1r3dvMUtDTo2cv8=\ngithub.com/kelseyhightower/envconfig v1.4.0/go.mod h1:cccZRl6mQpaq41TPp5QxidR+Sa3axMbJDNb//FQX6Gg=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=\ngithub.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=\ngithub.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/nirasan/go-oauth-pkce-code-verifier v0.0.0-20220510032225-4f9f17eaec4c h1:4RYnE0ISVwRxm9Dfo7utw1dh0kdRDEmVYq2MFVLy5zI=\ngithub.com/nirasan/go-oauth-pkce-code-verifier v0.0.0-20220510032225-4f9f17eaec4c/go.mod h1:DvuJJ/w1Y59rG8UTDxsMk5U+UJXJwuvUgbiJSm9yhX8=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=\ngithub.com/pelletier/go-toml/v2 v2.2.0 h1:QLgLl2yMN7N+ruc31VynXs1vhMZa7CeHHejIeBAsoHo=\ngithub.com/pelletier/go-toml/v2 v2.2.0/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/sagikazarmark/locafero v0.4.0 h1:HApY1R9zGo4DBgr7dqsTH/JJxLTTsOt7u6keLGt6kNQ=\ngithub.com/sagikazarmark/locafero v0.4.0/go.mod h1:Pe1W6UlPYUk/+wc/6KFhbORCfqzgYEpgQ3O5fPuL3H4=\ngithub.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=\ngithub.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=\ngithub.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=\ngithub.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=\ngithub.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=\ngithub.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=\ngithub.com/spf13/cast v1.6.0 h1:GEiTHELF+vaR5dhz3VqZfFSzZjYbgeKDpBxQVS4GYJ0=\ngithub.com/spf13/cast v1.6.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v1.18.2 h1:LUXCnvUvSM6FXAsj6nnfc8Q2tp1dIgUfY9Kc8GsSOiQ=\ngithub.com/spf13/viper v1.18.2/go.mod h1:EKmWIqdnk5lOcmR72yw6hS+8OPYcwD0jteitLMVB+yk=\ngithub.com/streadway/quantile v0.0.0-20150917103942-b0c588724d25 h1:7z3LSn867ex6VSaahyKadf4WtSsJIgne6A1WLOAGM8A=\ngithub.com/streadway/quantile v0.0.0-20150917103942-b0c588724d25/go.mod h1:lbP8tGiBjZ5YWIc2fzuRpTaz0b/53vT6PEs3QuAWzuU=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=\ngithub.com/subosito/gotenv v1.6.0/go.mod h1:Dk4QP5c2W3ibzajGcXpNraDfq2IrhjMIvMSWPKKo0FU=\ngithub.com/theckman/go-securerandom v0.1.1 h1:5KctSyM0D5KKFK+bsypIyLq7yik0CEaI5i2fGcUGcsQ=\ngithub.com/theckman/go-securerandom v0.1.1/go.mod h1:bmkysLfBH6i891sBpcP4xRM3XIB7jMeiKJB31jlResI=\ngithub.com/tsenart/vegeta v12.7.0+incompatible h1:sGlrv11EMxQoKOlDuMWR23UdL90LE5VlhKw/6PWkZmU=\ngithub.com/tsenart/vegeta v12.7.0+incompatible/go.mod h1:Smz/ZWfhKRcyDDChZkG3CyTHdj87lHzio/HOCkbndXM=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngo.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=\ngo.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=\ngo.uber.org/zap v1.27.0 h1:aJMhYGrd5QSmlpLMr2MftRKl7t8J8PTZPA732ud/XR8=\ngo.uber.org/zap v1.27.0/go.mod h1:GB2qFLM7cTU87MWRP2mPIjqfIDnGu+VIO4V/SdhGo2E=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/exp v0.0.0-20180321215751-8460e604b9de/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20240318143956-a85f2c67cd81 h1:6R2FC06FonbXQ8pK11/PDFY6N6LWlf9KlzibaCapmqc=\ngolang.org/x/exp v0.0.0-20240318143956-a85f2c67cd81/go.mod h1:CQ1k9gNrJ50XIzaKCRR2hssIjF07kZFEiieALBM/ARQ=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.22.0 h1:9sGLhx7iRIHEiX0oAJ3MRZMUCElJgy7Br1nO+AMN3Tc=\ngolang.org/x/net v0.22.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=\ngolang.org/x/oauth2 v0.18.0 h1:09qnuIAgzdx1XplqJvW6CQqMCtGZykZWcXzPMPUusvI=\ngolang.org/x/oauth2 v0.18.0/go.mod h1:Wf7knwG0MPoWIMMBgFlEaSUDaKskp0dCfrlJRJXbBi8=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180525024113-a5b4c53f6e8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngonum.org/v1/gonum v0.0.0-20181121035319-3f7ecaa7e8ca h1:PupagGYwj8+I4ubCxcmcBRk3VlUWtTg5huQpZR9flmE=\ngonum.org/v1/gonum v0.0.0-20181121035319-3f7ecaa7e8ca/go.mod h1:Y+Yx5eoAFn32cQvJDxZx5Dpnq+c3wtXuadVZAcxbbBo=\ngonum.org/v1/netlib v0.0.0-20181029234149-ec6d1f5cefe6/go.mod h1:wa6Ws7BG/ESfp6dHfk7C6KdzKA7wR7u/rKwOGE66zvw=\ngoogle.golang.org/appengine v1.6.8 h1:IhEN5q69dyKagZPYMSdIjS2HqprW324FRQZJcGqPAsM=\ngoogle.golang.org/appengine v1.6.8/go.mod h1:1jJ3jBArFh5pcgW8gCtRJnepW8FzD1V44FJffLiz/Ds=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "handlers",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 9.3857421875,
          "content": "/*\n\nCopyright 2020 The Vouch Proxy Authors.\nUse of this source code is governed by The MIT License (MIT) that\ncan be found in the LICENSE file. Software distributed under The\nMIT License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\nOR CONDITIONS OF ANY KIND, either express or implied.\n\n*/\n\npackage main\n\n// Vouch Proxy\n// github.com/vouch/vouch-proxy\n\n/*\n\nHello Developer!  Thanks for looking at the code!\n\nBefore submitting PRs, please see the README...\nhttps://github.com/vouch/vouch-proxy#submitting-a-pull-request-for-a-new-feature\n\n*/\n\nimport (\n\t\"embed\"\n\t\"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/fs\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/user\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t// \"net/http/pprof\"\n\n\t\"github.com/julienschmidt/httprouter\"\n\t\"go.uber.org/zap\"\n\n\t\"github.com/vouch/vouch-proxy/handlers\"\n\t\"github.com/vouch/vouch-proxy/pkg/cfg\"\n\t\"github.com/vouch/vouch-proxy/pkg/cookie\"\n\t\"github.com/vouch/vouch-proxy/pkg/domains\"\n\t\"github.com/vouch/vouch-proxy/pkg/healthcheck\"\n\t\"github.com/vouch/vouch-proxy/pkg/jwtmanager\"\n\t\"github.com/vouch/vouch-proxy/pkg/responses\"\n\t\"github.com/vouch/vouch-proxy/pkg/timelog\"\n)\n\n// `version`, `semver` and others are populated during build by..\n// go build -i -v -ldflags=\"-X main.version=$(git describe --always --long) -X main.semver=v$(git semver get)\"\nvar (\n\tversion     = \"undefined\"\n\tbuilddt     = \"undefined\"\n\thost        = \"undefined\"\n\tsemver      = \"undefined\"\n\tbranch      = \"undefined\"\n\tuname       = \"undefined\"\n\tlogger      *zap.SugaredLogger\n\tfastlog     *zap.Logger\n\tshowVersion = flag.Bool(\"version\", false, \"display version and exit\")\n\thelp        = flag.Bool(\"help\", false, \"show usage\")\n\tscheme      = map[bool]string{\n\t\tfalse: \"http\",\n\t\ttrue:  \"https\",\n\t}\n\t// doProfile = flag.Bool(\"profile\", false, \"run profiler at /debug/pprof\")\n)\n\n//go:embed static\nvar staticFs embed.FS\n\n//go:embed templates\nvar templatesFs embed.FS\n\n//go:embed .defaults.yml\nvar defaultsFs embed.FS\n\n// fwdToZapWriter allows us to use the zap.Logger as our http.Server ErrorLog\n// see https://stackoverflow.com/questions/52294334/net-http-set-custom-logger\ntype fwdToZapWriter struct {\n\tlogger *zap.Logger\n}\n\nfunc (fw *fwdToZapWriter) Write(p []byte) (n int, err error) {\n\tfw.logger.Error(string(p))\n\treturn len(p), nil\n}\n\n// configure() is essentially init()\n// for most other projects you would think of this as init()\n// this epic issue related to the flag.parse change of behavior for go 1.13 explains some of what's going on here\n// https://github.com/golang/go/issues/31859\n// essentially, flag.parse() must be called in vouch-proxy's main() and *not* in init()\n// this has a cascading effect on the zap logger since the log level can be set on the command line\n// configure() explicitly calls package configure functions (domains.Configure() etc) mostly to set the logger\n// without this setup testing and logging are screwed up\nfunc configure() {\n\tflag.Parse()\n\n\tif *help {\n\t\tflag.PrintDefaults()\n\t\tos.Exit(1)\n\t}\n\n\tif *showVersion {\n\t\tfmt.Printf(\"%s\\n\", semver)\n\t\tos.Exit(0)\n\t}\n\n\tcfg.Templates = templatesFs\n\tcfg.Defaults = defaultsFs\n\n\tcfg.Configure()\n\thealthcheck.CheckAndExitIfIsHealthCheck()\n\n\tlogger = cfg.Logging.Logger\n\tfastlog = cfg.Logging.FastLogger\n\n\tif err := cfg.ValidateConfiguration(); err != nil {\n\t\tlogger.Fatal(err)\n\t}\n\n\tdomains.Configure()\n\tjwtmanager.Configure()\n\tcookie.Configure()\n\tresponses.Configure()\n\thandlers.Configure()\n\ttimelog.Configure()\n}\n\nfunc main() {\n\tconfigure()\n\tlistenStr := cfg.Cfg.Listen\n\tif !strings.HasPrefix(cfg.Cfg.Listen, \"unix:\") {\n\t\tlistenStr = cfg.Cfg.Listen + \":\" + strconv.Itoa(cfg.Cfg.Port)\n\t\tcheckTCPPortAvailable(listenStr)\n\t}\n\n\ttls := (cfg.Cfg.TLS.Cert != \"\" && cfg.Cfg.TLS.Key != \"\")\n\tlogger.Infow(\"starting \"+cfg.Branding.FullName,\n\t\t// \"semver\":    semver,\n\t\t\"version\", version,\n\t\t\"buildtime\", builddt,\n\t\t\"uname\", uname,\n\t\t\"buildhost\", host,\n\t\t\"branch\", branch,\n\t\t\"semver\", semver,\n\t\t\"listen\", scheme[tls]+\"://\"+listenStr,\n\t\t\"tls\", tls,\n\t\t\"document_root\", cfg.Cfg.DocumentRoot,\n\t\t\"oauth.provider\", cfg.GenOAuth.Provider)\n\n\t// router := mux.NewRouter()\n\trouter := httprouter.New()\n\n\tif cfg.Cfg.DocumentRoot != \"\" {\n\t\tlogger.Debugf(\"adjusting all served URIs to be under %s\", cfg.Cfg.DocumentRoot)\n\t}\n\n\tauthH := http.HandlerFunc(handlers.ValidateRequestHandler)\n\trouter.HandlerFunc(http.MethodGet, cfg.Cfg.DocumentRoot+\"/validate\", timelog.TimeLog(jwtmanager.JWTCacheHandler(authH)))\n\trouter.HandlerFunc(http.MethodGet, cfg.Cfg.DocumentRoot+\"/_external-auth-:id\", timelog.TimeLog(jwtmanager.JWTCacheHandler(authH)))\n\n\tloginH := http.HandlerFunc(handlers.LoginHandler)\n\trouter.HandlerFunc(http.MethodGet, cfg.Cfg.DocumentRoot+\"/login\", timelog.TimeLog(loginH))\n\n\tlogoutH := http.HandlerFunc(handlers.LogoutHandler)\n\trouter.HandlerFunc(http.MethodGet, cfg.Cfg.DocumentRoot+\"/logout\", timelog.TimeLog(logoutH))\n\n\tcallH := http.HandlerFunc(handlers.CallbackHandler)\n\trouter.HandlerFunc(http.MethodGet, cfg.Cfg.DocumentRoot+\"/auth\", timelog.TimeLog(callH))\n\n\tauthStateH := http.HandlerFunc(handlers.AuthStateHandler)\n\trouter.HandlerFunc(http.MethodGet, cfg.Cfg.DocumentRoot+\"/auth/:state/\", timelog.TimeLog(authStateH))\n\n\thealthH := http.HandlerFunc(handlers.HealthcheckHandler)\n\trouter.HandlerFunc(http.MethodGet, \"/healthcheck\", timelog.TimeLog(healthH))\n\n\t// this is the documented implemenation for static file serving but it doesn't seem to work with go:embed\n\t// router.ServeFiles(\"/static/*filepath\", http.FS(staticFs))\n\n\t// so instead we publish all three routes\n\trouter.Handler(http.MethodGet, cfg.Cfg.DocumentRoot+\"/static/css/main.css\", http.StripPrefix(cfg.Cfg.DocumentRoot, http.FileServer(http.FS(staticFs))))\n\trouter.Handler(http.MethodGet, cfg.Cfg.DocumentRoot+\"/static/img/favicon.ico\", http.StripPrefix(cfg.Cfg.DocumentRoot, http.FileServer(http.FS(staticFs))))\n\trouter.Handler(http.MethodGet, cfg.Cfg.DocumentRoot+\"/static/img/multicolor_V_500x500.png\", http.StripPrefix(cfg.Cfg.DocumentRoot, http.FileServer(http.FS(staticFs))))\n\n\t// this also works for static files\n\t// router.NotFound = http.FileServer(http.FS(staticFs))\n\n\t//\n\t// if *doProfile {\n\t// \taddProfilingHandlers(router)\n\t// }\n\n\tsrv := &http.Server{\n\t\tHandler: router,\n\t\t// Good practice: enforce timeouts for servers you create!\n\t\tWriteTimeout: time.Duration(cfg.Cfg.WriteTimeout) * time.Second,\n\t\tReadTimeout:  time.Duration(cfg.Cfg.ReadTimeout) * time.Second,\n\t\tIdleTimeout:  time.Duration(cfg.Cfg.IdleTimeout) * time.Second,\n\t\tErrorLog:     log.New(&fwdToZapWriter{fastlog}, \"\", 0),\n\t}\n\n\tlis, cleanupFn, err := listen()\n\tif err != nil {\n\t\tlogger.Fatal(err)\n\t}\n\tdefer cleanupFn()\n\n\tif tls {\n\t\tsrv.TLSConfig = cfg.TLSConfig(cfg.Cfg.TLS.Profile)\n\t\tlogger.Fatal(srv.ServeTLS(lis, cfg.Cfg.TLS.Cert, cfg.Cfg.TLS.Key))\n\t} else {\n\t\tlogger.Fatal(srv.Serve(lis))\n\t}\n\n}\n\nfunc listen() (lis net.Listener, cleanupFn func(), err error) {\n\tif !strings.HasPrefix(cfg.Cfg.Listen, \"unix:\") {\n\t\tlis, err = net.Listen(\"tcp\", fmt.Sprintf(\"%s:%d\", cfg.Cfg.Listen, cfg.Cfg.Port))\n\t\treturn lis, func() {}, err\n\t}\n\n\tsocketPath := strings.TrimPrefix(cfg.Cfg.Listen, \"unix:\")\n\t_, err = os.Stat(socketPath)\n\tif err == nil {\n\t\tif err = os.Remove(socketPath); err != nil {\n\t\t\treturn nil, nil, fmt.Errorf(\"remove existing socket file %s: %w\", socketPath, err)\n\t\t}\n\t} else if !os.IsNotExist(err) {\n\t\treturn nil, nil, fmt.Errorf(\"stat socket file %s: %w\", socketPath, err)\n\t}\n\n\tlis, err = net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"listen %s: %w\", socketPath, err)\n\t}\n\n\tmode := fs.FileMode(cfg.Cfg.SocketMode) // defaults to 0660 - see .defaults.yml\n\tif err = os.Chmod(socketPath, mode); err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"chmod socket file %s %#o\", socketPath, mode)\n\t}\n\n\tif cfg.Cfg.SocketGroup != \"\" {\n\t\tgroup, err := user.LookupGroup(cfg.Cfg.SocketGroup)\n\t\tif err != nil {\n\t\t\treturn nil, nil, fmt.Errorf(\"lookup socket group: %s %w\", cfg.Cfg.SocketGroup, err)\n\t\t}\n\t\tgid, err := strconv.Atoi(group.Gid)\n\t\tif err != nil {\n\t\t\treturn nil, nil, fmt.Errorf(\"lookup socket group: invalid gid: %w\", err)\n\t\t}\n\t\tif err := os.Chown(socketPath, -1, gid); err != nil {\n\t\t\treturn nil, nil, fmt.Errorf(\"chown socket: group: %s %w\", socketPath, err)\n\t\t}\n\t}\n\treturn lis, func() { _ = os.Remove(socketPath) }, nil\n}\n\nfunc checkTCPPortAvailable(listen string) {\n\tlogger.Debug(\"checking availability of tcp port: \" + listen)\n\tconn, err := net.Listen(\"tcp\", listen)\n\tif err != nil {\n\t\tlogger.Error(err)\n\t\tlogger.Fatal(errors.New(listen + \" is not available (is \" + cfg.Branding.FullName + \" already running?)\"))\n\t}\n\tif err = conn.Close(); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n\n// if you'd like to enable profiling uncomment these\n// func addProfilingHandlers(router *httprouter.Router) {\n// \t// https://stackoverflow.com/questions/47452471/pprof-profile-with-julienschmidtrouter-and-benchmarks-not-profiling-handler\n// \tlogger.Debugf(\"profiling routes added at http://%s:%d/debug/pprof/\", cfg.Cfg.Listen, cfg.Cfg.Port)\n// \trouter.HandlerFunc(http.MethodGet, \"/debug/pprof/\", pprof.Index)\n// \trouter.HandlerFunc(http.MethodGet, \"/debug/pprof/cmdline\", pprof.Cmdline)\n// \trouter.HandlerFunc(http.MethodGet, \"/debug/pprof/profile\", pprof.Profile)\n// \trouter.HandlerFunc(http.MethodGet, \"/debug/pprof/symbol\", pprof.Symbol)\n// \trouter.HandlerFunc(http.MethodGet, \"/debug/pprof/trace\", pprof.Trace)\n// \trouter.Handler(http.MethodGet, \"/debug/pprof/goroutine\", pprof.Handler(\"goroutine\"))\n// \trouter.Handler(http.MethodGet, \"/debug/pprof/heap\", pprof.Handler(\"heap\"))\n// \trouter.Handler(http.MethodGet, \"/debug/pprof/threadcreate\", pprof.Handler(\"threadcreate\"))\n// \trouter.Handler(http.MethodGet, \"/debug/pprof/block\", pprof.Handler(\"block\"))\n// }\n"
        },
        {
          "name": "main_test.go",
          "type": "blob",
          "size": 2.4580078125,
          "content": "package main\n\nimport (\n\t\"io/fs\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/vouch/vouch-proxy/pkg/cfg\"\n)\n\nfunc Test_listenUds(t *testing.T) {\n\tsetUp(t, \"testing/socket_basic.yml\")\n\tdefer cleanUp()\n\ttempDir, err := os.MkdirTemp(\"\", \"\")\n\tassert.NoError(t, err)\n\tdefer func() {\n\t\t_ = os.RemoveAll(tempDir)\n\t}()\n\tsocketPath := filepath.Join(tempDir, \"socket0\")\n\n\tcfg.Cfg.Listen = strings.Join([]string{\"unix\", socketPath}, \":\")\n\tlis, cleanupFn, err := listen()\n\tassert.NoError(t, err)\n\tassertSocket(t, socketPath)\n\n\tfi, err := os.Stat(socketPath)\n\tassert.NoError(t, err)\n\tassert.Equal(t, fs.FileMode(0660), fi.Mode().Perm())\n\n\tassert.NotNil(t, lis)\n\tassert.NoError(t, lis.Close())\n\tcleanupFn()\n\t_, err = os.Stat(socketPath)\n\tassert.True(t, os.IsNotExist(err))\n}\n\n// check that socket listening works when the socket path already exists\nfunc Test_listenUds_alreadyExists(t *testing.T) {\n\tsetUp(t, \"testing/socket_basic.yml\")\n\tdefer cleanUp()\n\ttempDir, err := os.MkdirTemp(\"\", \"\")\n\tassert.NoError(t, err)\n\tdefer func() {\n\t\t_ = os.RemoveAll(tempDir)\n\t}()\n\tsocketPath := filepath.Join(tempDir, \"socket0\")\n\tassert.NoError(t, os.WriteFile(socketPath, []byte(\"stuff in the socket file\"), 0600))\n\n\tcfg.Cfg.Listen = strings.Join([]string{\"unix\", socketPath}, \":\")\n\tlis, cleanupFn, err := listen()\n\tassert.NoError(t, err)\n\tassertSocket(t, socketPath)\n\n\tassert.NotNil(t, lis)\n\tassert.NoError(t, lis.Close())\n\tcleanupFn()\n}\n\n// check that the socket mode is adjusted when the SocketMode configuration is present\nfunc Test_listenUds_mode(t *testing.T) {\n\tsetUp(t, \"config/testing/socket_mode.yml\")\n\tdefer cleanUp()\n\ttempDir, err := os.MkdirTemp(\"\", \"\")\n\tassert.NoError(t, err)\n\tdefer func() {\n\t\t_ = os.RemoveAll(tempDir)\n\t}()\n\tsocketPath := filepath.Join(tempDir, \"socket0\")\n\tcfg.Cfg.Listen = strings.Join([]string{\"unix\", socketPath}, \":\")\n\n\tlis, cleanupFn, err := listen()\n\tassert.NoError(t, err)\n\tassert.NotNil(t, lis)\n\tassertSocket(t, socketPath)\n\n\tstat, err := os.Stat(socketPath)\n\tassert.NoError(t, err)\n\tassert.Equal(t, fs.FileMode(cfg.Cfg.SocketMode), stat.Mode().Perm())\n\n\tassert.NoError(t, lis.Close())\n\tcleanupFn()\n}\n\nfunc assertSocket(t *testing.T, socketPath string) {\n\tfi, err := os.Stat(socketPath)\n\tassert.NoError(t, err)\n\tassert.Equal(t, os.ModeSocket, fi.Mode()&os.ModeSocket)\n}\n\nfunc setUp(t *testing.T, configFile string) {\n\tassert.NoError(t, os.Setenv(cfg.Branding.UCName+\"_CONFIG\", configFile))\n\tcfg.InitForTestPurposes()\n}\n\nfunc cleanUp() {\n\tos.Clearenv()\n}\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}