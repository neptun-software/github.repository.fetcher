{
  "metadata": {
    "timestamp": 1736566847875,
    "page": 419,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DrDonk/unlocker",
      "stars": 3306,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4033203125,
          "content": "# Recommedations from GitHub help pages\n# Set the default behavior, in case people don't have core.autocrlf set.\n* text=lf\n\n# Declare files that will always have CRLF line endings on checkout.\n*.cmd text eol=crlf\n*.ps1 text eol=crlf\n*.txt text eol=crlf\n\n# Declare files that will always have LF line endings on checkout.\n*.sh text eol=lf\n*.go text eol=lf\n\n# Declare files that are binary on checkout.\n*.exe binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.197265625,
          "content": "/.idea\n/backup/\n/build/\n/samples/\n/tests/\n\n/darwin/\n/dist/linux/patchgos\n/dist/linux/patchsmc\n/dist/linux/patchvmkctl\n/dist/windows/patchgos.exe\n/dist/windows/patchsmc.exe\n/dist/windows/patchvmkctl.exe\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.5908203125,
          "content": "# Changes\n\nAll dates are UK DD/MM/YY format.\n\n## 01/11/23 4.2.7\n## IMPORTANT: Security Update\nPlease redownload the unlocker as VMware have\n[announced](https://www.vmware.com/security/advisories/VMSA-2023-0024.html) and fixed a vulnerability in\nVMware Tools across macOS, Linux and Windows guests. The unlocker has been updated with the latest ISOs which fix the\nissue. Alternatively download the tools directly from VMware https://vmware.com/go/tools.\n\n_drdonk_\n* Update VMware tools as CVE vuklnerability in earlier versions\n\n## 03/03/23 4.2.6\n\n_drdonk:_\n* Tidy up of code\n* Removed template VMs\n* Added macOS recovery VMDK utility\n\n## 06/02/23 4.2.5\n_drdonk_\n* Added dumpsmc to release build as useful for diagnostic info\n* SMC text labels for private and public key count incorrectly swapped\n* Add wait for key press to hostcaps\n* Updated cpuid binaries from http://github.com/drdonk/cpuid\n* Build process updated to make it more automatedbuilding\n* Added TAR Gzipped distribution file for Linux \n\n## 21/12/22 4.2.4\n_drdonk_\n* Changes to templates to disable webcam in VM\n* Removed files from templates that are generated when VM is first opened to ensure uniqueness of VMs.\n* New templates with good defaults for different versions of VMware and macOS guests\n* Remove some duplicate messages in executables\n* Removed a marker in patches as never used (KPPW/KPST)\n* Wiki now source of more dynamic informtion such as Ventura supoort\n\n_samhocevar_\n* Check for vmware-vmx-stats file exists before trying to patch\n\n_SimPilotAdamT_\n* Clarification on using AUR with Unlocker\n\n## 21/09/22 4.2.3\n_drdonk_\n* VMware Tools 12.1.0 - last VMware tools for macOS to be released\n* Template VMs for Intel and AMD CPUs with sensible defaults and preformatted HFS+J virtual disk\n\n## 30/07/22 4.2.2\n_drdonk_\n* Re-worked README.md file\n* Updated darwin.iso to version 12.0.6\n* relock restarts Windows services unpatching fails\n* Initial changes for 22H2 tech previews. New Windows service for auto-starting VMs needs to be stopped and started\n* Ensure using bash and fix dist folder creation in the source code build scripts fro Linux/macOS\n\n## 03/06/22 4.2.1\n_drdonk_:\n* Missing message when removing ISOs in relock\n* Updated darwin.iso to version 12.0.5\n\n## 13/05/22 4.2.0\n_drdonk:_\n* Split unlocker.exe into 2 new files unlock.exe and relock.exe so can be directly executed on Windows without \nhaving to pass a parameter to install or uninstall\n* Added Windows manifest to allow the executables to directly run as Administrator without using re-spawn code \n* Minimize false AV detection especially Windows Defender\n* Added a new command to check the status of the patching called check.exe\n* Fix to restarting vmware-tray.exe on Windows which had the wrong working directory\n\n## 03/03/22 4.1.3\n_drdonk:_\n* Update VMware Tools to version 12.0.0\n\n## 15/02/22 4.1.2\n\n_drdonk:_\n* Fix stopping/starting services on Windows due to service dependencies\n\n## 26/01/22 4.1.1\n\n_drdonk:_\n* Fix copying of VMware tools ISO to the VMware installation folder\n* Added a new troubleshooting page\n* Updated copyright to 2022\n\n## 09/12/21 4.1.0\n\nChanged version to 4.1.0 due to the large number of changes to code submitted by boostchicken. \nThanks to boostchicken for the fixes and improvements to the code.\n\n_boostchicken:_\n* Refactor to be more go like\n* Fix vmware-shell-ext-thunker.exe preventing patching on windows\n* Fixed header offset bug and binpack allocs\n* Cleaned up logic regarding restoring backups or not\n* Elevate permissions on Windows automatically\n\n_drdonk:_\n* Key press message changed to correct input of enter key\n* Build macOS dumpsmc executable\n\n## 06/12/21 4.0.0\n* Initial release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0732421875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014-2023 David Parsons & Sam Bingner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.564453125,
          "content": "# macOS Unlocker V4 for VMware Workstation\n\n## IMPORTANT: Security Update\nPlease redownload the unlocker as VMware have \n[announced](https://www.vmware.com/security/advisories/VMSA-2023-0024.html) and fixed a vulnerability in \nVMware Tools across macOS, Linux and Windows guests. The unlocker has been updated with the latest ISOs which fix the \nissue. Alternatively download the tools directly from VMware https://vmware.com/go/tools.\n\n## Unlocker 2007-2023\nThis project is now archived.\n\nThe unlocker should continue to run as there have been few changes to the VMware code in many years.\nI have stopped developemnt as I no longer use VMware but would be happy to refer to a fork if someone\nsends me an email with the relevant details.\n\nThere is also [Auto Unlocker](https://github.com/paolo-projects/auto-unlocker) which is still active.\n\n***\n\nPlease checkout the wiki. https://github.com/DrDonk/unlocker/wiki\n***\n \n## 1. Introduction\nUnlocker 4 is designed for VMware Workstation and Player and has been tested against:\n\n* Workstation Pro 16/17 on Windows and Linux\n* Workstation Player 16/17 on Windows and Linux\n\nThe Unlocker enables certain flags and data tables that are required to see the macOS type when setting\nthe guest OS type, and modify the implmentation of the virtual SMC controller device. These capabiltiites are normally \nexposed in Fusion and ESXi when running on Apple hardware.\n\nThe patch code carries out the following modifications dependent on the product being patched:\n\n* Patch vmware-vmx and derivatives to allow macOS to boot\n* Patch vmwarebase.dll or libvmwarebase.so to allow Apple guests to be selected during VM creation\n* Provide a copy of the macOS VMware Tools for the guest\n\nIt is important to understand that the Unlocker cannot add any new capabilities to VMware Workstation and Player\nbut enables support for macOS that is disabled in the VMware products that do not run on Apple hardware.\n\nThe Unlocker cannot:\n\n* add AMD CPU support\n* add support for new versions of macOS\n* add paravirtualized Apple GPU support \n\nor any other features that are not already in the VMware compiled code. \n\n## 2. Running the Unlocker\n### 2.1 Download Release\nThe code is written in Go and has no pre-requisites and should run directly from the release zip download.\n\n* Download a binary release from https://github.com/DrDonk/unlocker/releases\n* Optionally check the sha256 checksum matches that published in the release\n* Unzip (Windows) or untar (Linux) the archive to extract the executables and VMware Tools images\n* Navigate to the folder with the extracted files\n\n### 2.2 Windows\nOn Windows you can double-click the executables to launch them from the \"windows\" folder. You may be prompted to run \nwith Administrator rights which are required to patch VMware.\n\n* unlock.exe - apply patches to VMware\n* relock.exe - remove patches from VMware\n* check.exe  - check the patch status of VMware \n\n### 2.3 Linux\nOn Linux navigate to the folder where the unlocker has been unpacked, and run the required command from the \n\"linux\" folder. You will need to be either root or use sudo to run the scripts in the terminal.\n\n* unlock - apply patches to VMware\n* relock - remove patches from VMware\n* check  - check the patch status of your VMware installation\n\n### 2.3.1 Arch Linux and its derivatives\nIf you are using Arch Linux or a derivative of Arch, you can install and use this like any normal package\n[from the AUR](https://aur.archlinux.org/packages/vmware-unlocker-bin). Precompiled binaries and PKGBUILDs to build\nfrom the [source of the latest release](https://aur.archlinux.org/packages/vmware-unlocker) as well \nas [from the main branch](https://aur.archlinux.org/packages/vmware-unlocker-git) are provided. \nIncluded in all of the packages are some Pacman hooks to help unlock and relock VMware whenever there is an update \nto Unlocker, VMware Worksation Pro/Player, or any of VMware Workstation Pro/Player's components. The binary files \nare installed to the `/usr/bin` directory so they are already added to your `$PATH`.\n\n## 2.4 Upgrading VMware\nIf a new VMware version is installed the patches will be lost as the update will overwrite the patched files.\nYou will need to re-run the unlock program to patch the newly installed VMware files. This does not apply to the Arch Linux AUR packages due to the provided ALPM hooks.\n\n## 2.5 VMware Tools\nThe Unlocker provides the VMware tools ISO images. Version 16/17 of Workstation Pro recognises the darwin.iso files and the tools can be installed in the usual way by using the \"Install VMware Tools\" menu item. The Player version does not automatically pick up the ISO images and so\nthe ISO must be maually attached to the VM via the guest's settings.\n\n## 3. VMware Downloads\nThese URLs will link to the latest versions of VMware's hosted products:\n\n* VMware Fusion https://vmware.com/go/getfusion\n* VMware Workstation for Windows https://www.vmware.com/go/getworkstation-win\n* VMware Workstation for Linux https://www.vmware.com/go/getworkstation-linux\n* VMware Player for Windows https://www.vmware.com/go/getplayer-win\n* VMware Player for Linux https://www.vmware.com/go/getplayer-linux\n* VMware Guest Tools https://vmware.com/go/tools\n\n## 4. Thanks\nThanks to Zenith432 for originally building the C++ Unlocker and Mac Son of Knife\n(MSoK) for all the testing and support.\n\nThanks also to Sam B for finding the solution for ESXi 6 and helping me with\ndebugging expertise. Sam also wrote the code for patching ESXi ELF files and\nmodified the Unlocker code to run on Python 3 in the ESXi 6.5 environment.\n\nThere have also been many new testers via GitHub, some who want to remain anoymous, but a big thanks to them.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0048828125,
          "content": "4.2.7"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 1.525390625,
          "content": "@echo off\n\necho Building release executables\nif [%1]==[] (\n  echo Product version not found: x.y.z (e.g. 1.2.3)\n  exit /b 1\n)\n\npushd .\\commands\\check\necho Building check\ngo-winres make --arch amd64 --product-version %1 --file-version %1\nset GOOS=windows\nset GOARCH=amd64\ngo build -o ..\\..\\build\\windows\\check.exe\nset GOOS=linux\nset GOARCH=amd64\ngo build -o ..\\..\\build\\linux\\check\ndel /q rsrc_windows_amd64.syso\npopd\n\npushd .\\commands\\relock\necho Building relock\ngo-winres make --arch amd64 --product-version %1 --file-version %1\nset GOOS=windows\nset GOARCH=amd64\ngo build -o ..\\..\\build\\windows\\relock.exe\nset GOOS=linux\nset GOARCH=amd64\ngo build -o ..\\..\\build\\linux\\relock\ndel /q rsrc_windows_amd64.syso\npopd\n\npushd .\\commands\\dumpsmc\necho Building dumpsmc\ngo-winres make --arch amd64 --product-version %1 --file-version %1\nset GOOS=windows\nset GOARCH=amd64\ngo build -o ..\\..\\build\\windows\\dumpsmc.exe\nset GOOS=linux\nset GOARCH=amd64\ngo build -o ..\\..\\build\\linux\\dumpsmc\ndel /q rsrc_windows_amd64.syso\npopd\n\npushd .\\commands\\hostcaps\necho Building hostcaps\ngo-winres make --arch amd64 --product-version %1 --file-version %1\nset GOOS=windows\nset GOARCH=amd64\ngo build -o ..\\..\\build\\windows\\hostcaps.exe\nset GOOS=linux\nset GOARCH=amd64\ngo build -o ..\\..\\build\\linux\\hostcaps\ndel /q rsrc_windows_amd64.syso\npopd\n\nxcopy /R /Y LICENSE .\\build\\\nxcopy /R /Y *.md .\\build\\\nxcopy /R /Y cpuid\\linux\\cpuid .\\build\\linux\\cpuid\nxcopy /R /Y cpuid\\windows\\cpuid.exe .\\build\\windows\\cpuid.exe\nxcopy /E /F /I /R /Y ISO .\\build\\ISO\nxcopy /E /F /I /R /Y ISO .\\'dist\\templates\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 1.9072265625,
          "content": "#!/usr/bin/env bash\n#set -x\n\n# Read current version\nVERSION=$(<VERSION)\necho package vmwpatch > ./vmwpatch/version.go\necho const VERSION = \\\"$VERSION\\\" >> ./vmwpatch/version.go\n\necho Building release executables - $VERSION\n\nmkdir -p ./build/iso\nmkdir -p ./build/linux\nmkdir -p ./build/windows\n\npushd ./commands/check\necho \"Building check\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/check.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/check\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/relock\necho \"Building relock\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/relock.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/relock\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/unlock\necho \"Building unlock\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/unlock.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/unlock\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/dumpsmc\necho \"Building dumpsmc\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/dumpsmc.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/dumpsmc\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/hostcaps\necho \"Building hostcaps\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/hostcaps.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/hostcaps\nrm rsrc_windows_amd64.syso\npopd\n\ncp -v LICENSE ./build\ncp -v *.md ./build\ncp -v ./cpuid/linux/cpuid ./build/linux/cpuid\ncp -v ./cpuid/windows/cpuid.exe ./build/windows/cpuid.exe\ncp -vr ./iso ./build\n"
        },
        {
          "name": "clean.cmd",
          "type": "blob",
          "size": 0.05859375,
          "content": "@echo off\necho Clean distribution\nrd /S /Q build\nmkdir dist\n"
        },
        {
          "name": "clean.sh",
          "type": "blob",
          "size": 0.2080078125,
          "content": "#!/usr/bin/env bash\n#set -x\necho Clean buildribution\nrm -vfr ./build\nmkdir -vp ./build/iso\nmkdir -vp ./build/linux\nmkdir -vp ./build/windows\nmkdir -vp ./build/templates\n\nrm -vfr ./commands/rsrc_windows_amd64.syso\n"
        },
        {
          "name": "commands",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpuid",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug-build.sh",
          "type": "blob",
          "size": 3.28125,
          "content": "#!/usr/bin/env bash\n#set -x\n# Read current version\nVERSION=$(<VERSION)\n\necho Building debug executables - $VERSION\necho package vmwpatch > ./vmwpatch/version.go\necho const VERSION = \\\"$VERSION\\\" >> ./vmwpatch/version.go\n\nmkdir -p ./build/iso\nmkdir -p ./build/linux\nmkdir -p ./build/macos\nmkdir -p ./build/windows\n\npushd ./commands/check\necho \"Building check\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/check.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/check\nenv GOOS=darwin GOARCH=amd64 go build -o ../../build/macos/check\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/relock\necho \"Building relock\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/relock.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/relock\nenv GOOS=darwin GOARCH=amd64 go build -o ../../build/macos/relock\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/unlock\necho \"Building unlock\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/unlock.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/unlock\nenv GOOS=darwin GOARCH=amd64 go build -o ../../build/macos/unlock\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/dumpsmc\necho \"Building dumpsmc\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/dumpsmc.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/dumpsmc\nenv GOOS=darwin GOARCH=amd64 go build -o ../../build/macos/dumpsmc\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/patchgos\necho \"Building patchgos\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/patchgos.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/patchgos\nenv GOOS=darwin GOARCH=amd64 go build -o ../../build/macos/patchgos\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/patchsmc\necho \"Building patchsmc\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/patchsmc.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/patchsmc\nenv GOOS=darwin GOARCH=amd64 go build -o ../../build/macos/patchsmc\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/patchvmkctl\necho \"Building patchvmkctl\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/patchvmkctl.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/patchvmkctl\nenv GOOS=darwin GOARCH=amd64 go build -o ../../build/macos/patchvmkctl\nrm rsrc_windows_amd64.syso\npopd\n\npushd ./commands/hostcaps\necho \"Building hostcaps\"\ngo-winres make --arch amd64 --product-version $VERSION --file-version $VERSION\nenv GOOS=windows GOARCH=amd64 go build -o ../../build/windows/hostcaps.exe\nenv GOOS=linux GOARCH=amd64 go build -o ../../build/linux/hostcaps\nenv GOOS=darwin GOARCH=amd64 go build -o ../../build/macos/hostcaps\nrm rsrc_windows_amd64.syso\npopd\n\ncp -v LICENSE ./build\ncp -v *.md ./build\ncp -vr ./cpuid/* ./build\ncp -vr ./iso ./build\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.3046875,
          "content": "module github.com/drdonk/golocker\n\ngo 1.17\n\nrequire (\n\tgithub.com/canhlinh/go-binary-pack v0.0.0-20181203110405-72348cf47f32\n\tgithub.com/djherbis/times v1.5.0\n\tgithub.com/drdonk/cpuid-go v0.0.0-20221221123718-7e9d0cd9e933\n\tgithub.com/mitchellh/go-ps v1.0.0\n\tgolang.org/x/sys v0.0.0-20220704084225-05e143d24a9e\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.9931640625,
          "content": "github.com/canhlinh/go-binary-pack v0.0.0-20181203110405-72348cf47f32 h1:2frz5u51940fkPXzOlKhY/zL4FBtXerEdNEs2AEicMA=\ngithub.com/canhlinh/go-binary-pack v0.0.0-20181203110405-72348cf47f32/go.mod h1:5oL/IK/HhX2kkOQK0V5dpmpFQET3dRgjS+4hfSjs+Pw=\ngithub.com/djherbis/times v1.5.0 h1:79myA211VwPhFTqUk8xehWrsEO+zcIZj0zT8mXPVARU=\ngithub.com/djherbis/times v1.5.0/go.mod h1:5q7FDLvbNg1L/KaBmPcWlVR9NmoKo3+ucqUA3ijQhA0=\ngithub.com/drdonk/cpuid-go v0.0.0-20221221123718-7e9d0cd9e933 h1:lwtJvu6rISm+gqZAnd6rrLNps/qRmTScuu9PyxLgS2w=\ngithub.com/drdonk/cpuid-go v0.0.0-20221221123718-7e9d0cd9e933/go.mod h1:vykNdUXx0AFn3wlm3/IVrtZKpmGGbG3NnaF3hXLGFZg=\ngithub.com/mitchellh/go-ps v1.0.0 h1:i6ampVEEF4wQFF+bkYfwYgY+F/uYJDktmvLPf7qIgjc=\ngithub.com/mitchellh/go-ps v1.0.0/go.mod h1:J4lOc8z8yJs6vUwklHw2XEIiT4z4C40KtWVN3nvg8Pg=\ngolang.org/x/sys v0.0.0-20220704084225-05e143d24a9e h1:CsOuNlbOuf0mzxJIefr6Q4uAUetRUwZE4qt7VfzP+xo=\ngolang.org/x/sys v0.0.0-20220704084225-05e143d24a9e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n"
        },
        {
          "name": "iso",
          "type": "tree",
          "content": null
        },
        {
          "name": "recovery-maker",
          "type": "tree",
          "content": null
        },
        {
          "name": "sha256sums",
          "type": "blob",
          "size": 1.28125,
          "content": "371c1a65ad42dbd2d8c11360b930b588db8308c9d208c6b95e6cc36e3b3126c4  unlocker400.zip\n58cca0998aa5bb1b6d2170fef43de2fcea239af1a52438474c9ff550b867bcc3  unlocker410.zip\n156478bf75b27efeb66585b51991aa645cfc827bcea929b6bfa7d5a5c8a6f82a  unlocker411.zip\n5a09da32a8506d0956fabd05521c1a41624c9806f6f69ae94314e5f4010b0992  unlocker412.zip\n47e642bcfa0733fc94e20287b034f6655169160e16c522c367e6cce5d69f3e8c  unlocker413.zip\ndbf8de2a9761da204fdf841ad07ebb720d095e5cf763b6b2a941e2369ae7fa2e  unlocker420.zip\n6230dfa55332fac5ed9dd713790438b7e2ddc36221da6bb73833430be1e408e6  unlocker421.zip\nf320f723c76b6582139b2f6de7c8f032ba2473638d3d2e410e0a031ab0956500  unlocker422.zip\n29aab76a5bae00fb6b0fe276008eb22ce8c6cef06c545d61cc9d9e30c980ab9b  unlocker423.zip\nf6f8c9f3e74cc35b76b4f95f03e69b00af76f0518aaf65bba81da4f9ec007bfc  unlocker424.zip\n966cc44ca03e41393a67aa094dc72a4c07ba257c4ce7af51d9bd0442f03054ab  unlocker425.tgz\n1c6164076301d2b789bd07e1c2a3fc567eb02f5fd2c1b8aac1dd7e64010f641f  unlocker425.zip\nfdfb7494d1ecf565ce9ae0ac0d1663ba8a07f39f3b43b85cdf856dd8d169d1ed  unlocker426.zip\n44653614651f8c77f10273703f96a2f717f470670b84787f7470fda25028f45d  unlocker426.tgz\na82bfdcc226e4e64b6afb5f62f4355a529bd46a62a4095f3e87b8ba471ab8c91  unlocker427.tgz\na642b405bc3c994dab9f3748efe5d4b69ecd7c9f87b61e0ccc30d348d78411d3  unlocker427.zip\n"
        },
        {
          "name": "sha512sums",
          "type": "blob",
          "size": 2.265625,
          "content": "unlocker400.zip 2cab202111160ff9f65b232cb2dda0d369b02c9ce6644c4e84596f89fcf7b1f15f675f77b39bc4f3caa4a6eae47380554c26471c3e2f01155cf97e46638586a7\nunlocker410.zip a4ba1c9c4f9fce8c02e3488c17e61278ad03e17fe3ed04f97d7f14ad7827d0c87aa1eaf70c26d9cf4e8b5f9d8384d28be3c549649592eca1a356c36db3db8667\nunlocker411.zip 3c604e175d921b898b76795c22b1d996629af0732c008f2ef60d58f2db4aa69527eadd286601ef688604ad26c42ca99d8543cdfb2f4fa5ce1be81f2afaecfdc8\nunlocker412.zip 43fc868be37c39e54234cead1611113954f2ef3d68be4d55f081be6a40d8de50976f488df79363a4bd0e3d31d21561261c85cb1135e777469536cc2eb3b66233\nunlocker413.zip 9925fdcae4c6e0574bd3912d01abac88ecc562ec49dd837b0bccefd6d20fdf96f6d89888659d50e57657656284c85c7d3e8ce7c164757278e87b464621ab1e83\nunlocker420.zip ead5851d50bf4e3a9e528d67b012c7b1a009e38f11d9ba1ce6e246a47dc7e305f8aed8e7ba0c094435f9070c5c82bd0192c3d834603aaa6b55268be78b2d4e2a\nunlocker421.zip 4d33f49e61e3efc2536c2af1de71fb18243ee10806ca009f80f935d786e4ef6204b60a48fa1ceecbe1335f1e48c91bb28c68c9909ec858a4ff0f6f043aebd945\nunlocker422.zip 04856505d62b63a982a2aa66b70502d3490f7c1511b35f386979f075cfece4781ea8e0c820fb551786266f37724931487fb098a16ab24a8393bbd6c4a40d82a3\nunlocker423.zip 2345b049e260551162e78db10f3f3e5edbade071f7360b21b695253f1cc6dcb20937dd43401a75e16affdfdbd69ba505e41120ed56a43ff63accb1a372e31f5e\nunlocker424.zip 137aa50d3a4a46c622d8f99edf5c2a0f063f65bdbbd7405b76653b5b41555ca7a860565d0995dca905fc01e6b6944c0b5114268bf264feae4ccc096fb6cbe6de\nunlocker425.tgz a7acbeb1b597a9ba47b9a46c2a5f812e400f8c934a5f448c21082a2215b0b66c0331814cd64c99dcf4a589d4bcffcf02d4c837e436840ec2450830ebbeaa554f\nunlocker425.zip aa59475c604d9dd0a16bfcf38bcbbd02852949ed9fbf48628cc953e30b56dd88483ea9fbe2afe568588e31e4c60fe14ed4c41efdb303378b1b7b33dae8b0dbce\nunlocker426.tgz 180a3e6d206afad382a9e3977f643ee6dfb40009f7c7332d4db934de8a3df5744881cf990a0648f9905f74ddd328c92038c3f1d77e9ea1573331f24a79d8d86d\nunlocker426.zip b7a959a2578efecff92887137dff0ac30c475a075fa3767299f1360cf9094c248f572ccbf2f5ec59e8c3a4124147afc1a0486689fdf879666d8cb3f5f81a2652\nunlocker427.tgz 0b4dc57f222e8ab4d6a0380a07da206d170ed90f787ced06a918e1028908196d3b9b433d228e3b42ca0d32dacd77ac9d5e3fb6e650223a37c8bbcea5a3764c4a\nunlocker427.zip 2c1d6a403467191ca0481b15d8b07261fe29e910dfd88d263f9a7399ce36df8e2995ef1b9d0b96314144c8b7ff6cfd95d025d64b0319ed8d236c94c096be525e\n"
        },
        {
          "name": "vmwpatch",
          "type": "tree",
          "content": null
        },
        {
          "name": "wiki",
          "type": "tree",
          "content": null
        },
        {
          "name": "zipit.sh",
          "type": "blob",
          "size": 0.5146484375,
          "content": "#!/bin/sh\n#set -x\n\n# Read current version\nVERSION=$(<VERSION)\nVERSION=${VERSION//.}\n\necho Create distribution files - $VERSION\n\nrm -vf ./dist/unlocker$VERSION.zip\nrm -vrf ./dist/unlocker$VERSION\n7z a ./dist/unlocker$VERSION.zip ./build/*\ncd ./build\ntar czvf ../dist/unlocker$VERSION.tgz *\ncd ..\n7z x -o./dist/unlocker$VERSION ./dist/unlocker$VERSION.zip\n\nshasum -a 256  ./dist/unlocker$VERSION.tgz\nshasum -a 256  ./dist/unlocker$VERSION.zip\nshasum -a 512  ./dist/unlocker$VERSION.tgz\nshasum -a 512  ./dist/unlocker$VERSION.zip\n"
        }
      ]
    }
  ]
}