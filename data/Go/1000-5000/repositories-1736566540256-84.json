{
  "metadata": {
    "timestamp": 1736566540256,
    "page": 84,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "knqyf263/pet",
      "stars": 4633,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3759765625,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n.env\nout\npkg\n.DS_Store\n.idea/\n.vscode/\n\n.glide/\nvendor/\npet\ndist/\n\n# Tools and nix\nflake.nix\nflake.lock\n.direnv\n.envrc\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.2509765625,
          "content": "version: 2\nrelease:\n  github:\n    owner: knqyf263\n    name: pet\n  name_template: '{{.Tag}}'\nbrews:\n  -\n    name: pet\n    repository:\n      owner: knqyf263\n      name: homebrew-pet\n    commit_author:\n      name: goreleaserbot\n      email: goreleaser@carlosbecker.com\n    description: \"Simple command-line snippet manager\"\n    homepage: \"https://github.com/knqyf263/pet\"\n    dependencies:\n      - fzf\n    install: |\n      bin.install Dir['pet']\n      zsh_completion.install \"misc/completions/zsh/_pet\"\n    test: |\n      system \"#{bin}/pet\"\nbuilds:\n- goos:\n  - linux\n  - darwin\n  - windows\n  goarch:\n  - amd64\n  - arm\n  - arm64\n  - \"386\"\n  goarm:\n  - \"6\"\n  main: .\n  ldflags: -s -w -X github.com/knqyf263/pet/cmd.version={{.Version}}\narchives:\n  -\n    format: tar.gz\n    name_template: '{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{\n      .Arm }}{{ end }}'\n    files:\n    - LICENSE*\n    - README*\n    - CHANGELOG*\n    - misc/completions/zsh/_pet\nnfpms:\n  -\n    homepage: https://github.com/knqyf263/pet\n    maintainer: Teppei Fukuda <knqyf263@gmail.com>\n    description: \"Simple command-line snippet manager\"\n    bindir: /usr/local/bin\n    license: MIT\n    formats:\n    - deb\n    - rpm\nchecksum:\n  name_template: '{{ .ProjectName }}_{{ .Version }}_checksums.txt'\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2017 Teppei Fukuda\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.1708984375,
          "content": ".PHONY: \\\n\tdep \\\n\tinstall \\\n\tbuild \\\n\tvet \\\n\ttest\n\ndep:\n\tgo mod download\n\nbuild: main.go\n\tgo build -o pet $<\n\ninstall: main.go\n\tgo install\n\ntest:\n\tgo test ./...\n\nvet:\n\tgo vet\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.001953125,
          "content": "# Pet - CLI Snippet Manager\n\n[![GitHub release](https://img.shields.io/github/release/knqyf263/pet.svg)](https://github.com/knqyf263/pet/releases/latest)\n[![MIT License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://github.com/knqyf263/pet/blob/master/LICENSE)\n\n<div align=\"center\">\n<img src=\"doc/logo.png\" width=\"350\">\n</div>\n\n\n# Motivation\n\n`pet` is a simple command-line snippet manager (inspired by [memo](https://github.com/mattn/memo)).\n\nI have a hard time remembering complex command or ones that I rarely use. Moreover, it is difficult to find them in shell history.\n\nIt's time to let go of the expectation of remembering every command, and focus on productivity and finding the right commands as fast as possible. It's fun when you're 2 years in and work with 2 tools, but less so when you're a decade in and work across backend/frontend/infrastructure with tons of tools. You most probably relate to this if you're a developer.\n\n`pet` is a simple tool that allows you to save, tag, search, and execute command-line snippets easily! It's now nearly 8 years old and is used by many developers around the world.\n\n`pet` is written in Go, and therefore you can just grab the binary releases and drop it in your $PATH.\n\n<img src=\"doc/pet01.gif\" width=\"700\">\n\nYou can use variables (`<param>` or `<param=default_value>` ) in snippets.\n\n<img src=\"doc/pet08.gif\" width=\"700\">\n\n# TOC\n\n- [Main features](#main-features)\n- [Parameters](#parameters)\n- [Examples](#examples)\n  - [Register the previous command easily](#register-the-previous-command-easily)\n    - [bash](#bash-prev-function)\n    - [zsh](#zsh-prev-function)\n    - [fish](#fish)\n  - [Select snippets at the current line (like C-r) (RECOMMENDED)](#select-snippets-at-the-current-line-like-c-r-recommended)\n    - [bash](#bash)\n    - [zsh](#zsh)\n    - [fish](#fish-1)\n  - [Copy snippets to clipboard](#copy-snippets-to-clipboard)\n- [Features](#features)\n  - [Edit snippets](#edit-snippets)\n  - [Sync snippets](#sync-snippets)\n- [Hands-on Tutorial](#hands-on-tutorial)\n- [Usage](#usage)\n- [Snippet](#snippet)\n- [Configuration](#configuration)\n  - [Selector option](#selector-option)\n  - [Tag](#tag)\n  - [Sync](#sync)\n  - [Auto Sync](#auto-sync)\n- [Installation](#installation)\n  - [Binary](#binary)\n  - [Mac OS X / Homebrew](#mac-os-x--homebrew)\n  - [RedHat, CentOS](#redhat-centos)\n  - [Debian, Ubuntu](#debian-ubuntu)\n  - [Archlinux](#archlinux)\n  - [Build](#build)\n- [Migration](#migration)\n- [Contribute](#contribute)\n\n# Main features\n`pet` has the following features.\n\n- Register your command snippets easily.\n- Use variables (with one or several default values) in snippets.\n- Search snippets interactively\n- Run snippets directly.\n- Edit snippets easily (config is just a TOML file).\n- Sync snippets via Gist or GitLab Snippets automatically.\n\n# Creating a snippet\n\nYou can create a snippet by running `pet new`.\n\n```\n$ pet new\nCommand> echo Hello world!\nDescription> print Hello world\n```\n\nTo see all available arguments, run `pet new --help`.\n\nMultiline commands can be entered by using the multiline argument `pet new --multiline`\n\nYou can use also use variables in snippets, these are called parameters. More information on that in the next section.\n\nYou can also *tag* snippets to search for them faster. More information on that in the tag section.\n\n\n# Parameters\nThere are `<n_ways>` ways of entering parameters.\n\nThey can contain default values: Hello `<subject=world>`\ndefined by the equal sign. \n\nThey can even contain `<content=spaces & = signs>` where the default value would be \\<content=<mark>spaces & = signs</mark>\\>.\n\nDefault values just can't \\<end with spaces \\>.\n\nThey can also contain multiple default values:\nHello `<subject=|_John_||_Sam_||_Jane Doe = special #chars_|>`\n\nThe values in this case would be :Hello \\<subject=\\|\\_<mark>John</mark>\\_\\|\\|\\_<mark>Sam</mark>\\_\\|\\|\\_<mark>Jane Doe = special #chars</mark>\\_\\|\\>\n\n# Examples\nSome examples are shown below.\n\n## Register the previous command easily\nBy adding the following config to `.bashrc` or `.zshrc`, you can easily register the previous command.\n\n### bash prev function\n\n```\nfunction prev() {\n  PREV=$(echo `history | tail -n2 | head -n1` | sed 's/[0-9]* //')\n  sh -c \"pet new `printf %q \"$PREV\"`\"\n}\n```\n\n### zsh prev function\n\n```\ncat .zshrc\nfunction prev() {\n  PREV=$(fc -lrn | head -n 1)\n  sh -c \"pet new `printf %q \"$PREV\"`\"\n}\n```\n\n### fish\nSee below for details.  \nhttps://github.com/otms61/fish-pet\n\n<img src=\"doc/pet02.gif\" width=\"700\">\n\n## Select snippets at the current line (like C-r) (RECOMMENDED)\n\n### bash\nBy adding the following config to `.bashrc`, you can search snippets and output on the shell.\nThis will also allow you to execute the commands yourself, which will add them to your shell history! This is basically the only way we can manipulate shell history.\nThis also allows you to *chain* commands! [Example here](https://github.com/knqyf263/pet/discussions/266)\n\nYou can also customize the search and list commands with options, example `-t` or `--tags`, for example to only search the subset of snippets tagged with myjob `pet search -t myjob`.\n\n```\ncat .bashrc\nfunction pet-select() {\n  BUFFER=$(pet search --query \"$READLINE_LINE\")\n  READLINE_LINE=$BUFFER\n  READLINE_POINT=${#BUFFER}\n}\nbind -x '\"\\C-x\\C-r\": pet-select'\n```\n\n### zsh\n\n```\ncat .zshrc\nfunction pet-select() {\n  BUFFER=$(pet search --query \"$LBUFFER\")\n  CURSOR=$#BUFFER\n  zle redisplay\n}\nzle -N pet-select\nstty -ixon\nbindkey '^s' pet-select\n```\n\n### fish\nSee below for details.  \nhttps://github.com/otms61/fish-pet\n\n<img src=\"doc/pet03.gif\" width=\"700\">\n\n\n## Copy snippets to clipboard\nBy using `pbcopy` on OS X, you can copy snippets to clipboard.\n\n<img src=\"doc/pet06.gif\" width=\"700\">\n\n## Allow to register from history when using fzf\n\nJust export this to your `.bashrc` or `.zshrc` file. This will show your history\nas default (when using fzf) and it also binds the `alt+s` key combination\nto allow you to search and save some previous used command command.\n\n```\nexport FZF_CTRL_R_OPTS=\"\n  --reverse\n  --cycle\n  --info=right\n  --color header:italic\n  --header 'alt+s (pet new)'\n  --preview 'echo {}' --preview-window down:3:hidden:wrap \n  --bind '?:toggle-preview'\n  --bind 'alt-s:execute(pet new --tag {2..})+abort'\"\n```\n\n# Features\n\n## Edit snippets\nThe snippets are managed in the TOML file, so it's easy to edit.\n\n<img src=\"doc/pet04.gif\" width=\"700\">\n\n\n## Sync snippets\nYou can share snippets via Gist.\n\n<img src=\"doc/pet05.gif\" width=\"700\">\n\n# Usage\n\n```\nUsage:\n  pet [command]\n\nAvailable Commands:\n  clip        Copy the selected commands\n  configure   Edit config file\n  edit        Edit snippet file\n  exec        Run the selected commands\n  help        Help about any command\n  list        Show all snippets\n  new         Create a new snippet\n  search      Search snippets\n  sync        Sync snippets\n  version     Print the version number\n\nFlags:\n      --config string   config file (default is $HOME/.config/pet/config.toml)\n      --debug           debug mode\n  -h, --help            help for pet\n\nUse \"pet [command] --help\" for more information about a command.\n```\n\n# Snippet\nRun `pet edit`  \nYou can also register the output of command (but cannot search).\n\n```\n[[snippets]]\n  command = \"echo | openssl s_client -connect example.com:443 2>/dev/null |openssl x509 -dates -noout\"\n  description = \"Show expiration date of SSL certificate\"\n  output = \"\"\"\nnotBefore=Nov  3 00:00:00 2015 GMT\nnotAfter=Nov 28 12:00:00 2018 GMT\"\"\"\n```\n\nRun `pet list`\n\n```\n    Command: echo | openssl s_client -connect example.com:443 2>/dev/null |openssl x509 -dates -noout\nDescription: Show expiration date of SSL certificate\n     Output: notBefore=Nov  3 00:00:00 2015 GMT\n             notAfter=Nov 28 12:00:00 2018 GMT\n------------------------------\n```\n\n\n# Configuration\n\nRun `pet configure`\n\n```\n[General]\n  snippetfile = \"path/to/snippet\" # specify snippet directory\n  editor = \"vim\"                  # your favorite text editor\n  column = 40                     # column size for list command\n  selectcmd = \"fzf\"               # selector command for edit command (fzf or peco)\n  backend = \"gist\"                # specify backend service to sync snippets (gist, ghe or gitlab, default: gist)\n  sortby  = \"description\"         # specify how snippets get sorted (recency (default), -recency, description, -description, command, -command, output, -output)\n  cmd = [\"sh\", \"-c\"]              # specify the command to execute the snippet with\n  color = false                   # enables output coloring with fzf, same as '--color' flag\n  format = \"[$description]: $command $tags\" controls the format of the output when searching\n\n[Gist]\n  file_name = \"pet-snippet.toml\"  # specify gist file name\n  access_token = \"\"               # your access token\n  gist_id = \"\"                    # Gist ID\n  public = false                  # public or priate\n  auto_sync = false               # sync automatically when editing snippets\n\n[GitLab]\n  file_name = \"pet-snippet.toml\"  # specify GitLab Snippets file name\n  access_token = \"XXXXXXXXXXXXX\"  # your access token\n  id = \"\"                         # GitLab Snippets ID\n  visibility = \"private\"          # public or internal or private\n  auto_sync = false               # sync automatically when editing snippets\n```\n\n## Multi directory and multi file setup\n\nDirectories must be specified as an array.\nAll `toml` files will be scraped and found snippets will be added.\n\nExample1: single directory\n\n```toml\n[GHEGist]\n  base_url = \"\"                   # GHE base URL\n  upload_url = \"\"                 # GHE upload URL (often the same as the base URL)\n  file_name = \"pet-snippet.toml\"  # specify gist file name\n  access_token = \"\"               # your access token\n  gist_id = \"\"                    # Gist ID\n  public = false                  # public or priate\n  auto_sync = false               # sync automatically when editing snippets\n```\n\n```\n$ pet configure\n[General]\n...\n  snippetdirs = [\"/path/to/some/snippets/\"]\n...\n```\n\nExample2: multiple directories\n\n```\n$ pet configure\n[General]\n...\n  snippetdirs = [\"/path/to/some/snippets/\", \"/more/snippets/\"]\n...\n```\n If `snippetfile` setting is omitted, new snippets will be added in a separate file to the first directory. The generated filename is time based.\n\nSnippet files in `snippetdirs` will not be added to Gist or GitLab. You've to do version control manually.\n\n\n## Selector option\nExample1: Change layout (bottom up)\n\n```\npet configure\n[General]\n...\n  selectcmd = \"fzf\"\n...\n```\n\nExample2: Enable colorized output\n```\npet configure\n[General]\n...\n  selectcmd = \"fzf --ansi\"\n...\npet search --color\n```\n\n## Tag\nYou can use tags (delimiter: space).\n```\npet new -t\nCommand> ping 8.8.8.8\nDescription> ping\nTag> network google\n```\n\nOr edit manually.\n```\npet edit\n[[snippets]]\n  description = \"ping\"\n  command = \"ping 8.8.8.8\"\n  tag = [\"network\", \"google\"]\n  output = \"\"\n```\n\nThey are displayed with snippets.\n```\npet search\n[ping]: ping 8.8.8.8 #network #google\n```\n\nYou can exec snippet with filtering the tag\n\n```\npet exec -t google\n\n[ping]: ping 8.8.8.8 #network #google\n```\n\n## Sync\n### Gist\nYou must obtain access token.\nGo https://github.com/settings/tokens/new and create access token (only need \"gist\" scope).\nSet that to `access_token` in `[Gist]` or use an environment variable with the name `$PET_GITHUB_ACCESS_TOKEN`.\n\nAfter setting, you can upload snippets to Gist.  \nIf `gist_id` is not set, new gist will be created.\n```\npet sync\nGist ID: 1cedddf4e06d1170bf0c5612fb31a758\nUpload success\n```\n\nSet `Gist ID` to `gist_id` in `[Gist]`.\n`pet sync` compares the local file and gist with the update date and automatically download or upload.\n\nIf the local file is older than gist, `pet sync` download snippets.\n```\npet sync\nDownload success\n```\n\nIf gist is older than the local file, `pet sync` upload snippets.\n```\npet sync\nUpload success\n```\n\n*Note: `-u` option is deprecated*\n\n### GHE Gist\n\nTo use Gist with GitHub Enterprise, you need to follow these steps:\n\n1. Obtain an Access Token: Visit your GitHub Enterprise settings page to create a new access token with just the \"gist\" scope. This is necessary to authenticate and interact with the Gist API on GitHub Enterprise.\n2. Set the Access Token: Assign the newly created access token to `access_token` in the `[GHEGist]` section of your configuration. Alternatively, you can use an environment variable named `$PET_GITHUB_ENTERPRISE_ACCESS_TOKEN` to manage your token securely.\n3. Configure API Endpoints: Unlike the regular Gist config, you need to set `base_url` and `upload_url` to point to your GitHub Enterprise API endpoints. For example:\n\n```toml\n\n[GHEGist]\nbase_url = \"https://github-enterprise.example.com/api/v3/gists\"\nupload_url = \"https://github-enterprise.example.com/api/v3/gists\"  # Often the same as the base URL\n```\n\nBy setting these parameters, your tool will be configured to interact with GitHub Enterprise Gist, enabling you to sync and manage your snippets just as you would with the standard GitHub Gist service.\n\nRemember to replace `https://github-enterprise.example.com` with the actual URL of your GitHub Enterprise instance. This customization allows your tool to correctly connect to and use the Gist service in a GitHub Enterprise environment.\n\n### GitLab Snippets\nYou must obtain access token.\nGo https://gitlab.com/-/profile/personal_access_tokens and create access token.\nSet that to `access_token` in `[GitLab]` or use an environment variable with the name `$PET_GITLAB_ACCESS_TOKEN`.\n\nYou also have to configure the `url` under `[GitLab]`, so pet knows which endpoint to access. You would use `url = \"https://gitlab.com\"`unless you have another instance of Gitlab.\n\nAt last, switch the `backend` under `[General]` to `backend = \"gitlab\"`.\n\nAfter setting, you can upload snippets to GitLab Snippets.\nIf `id` is not set, new snippet will be created.\n```\npet sync\nGitLab Snippet ID: 12345678\nUpload success\n```\n\nSet `GitLab Snippet ID` to `id` in `[GitLab]`.\n`pet sync` compares the local file and gitlab with the update date and automatically download or upload.\n\nIf the local file is older than gitlab, `pet sync` download snippets.\n```\npet sync\nDownload success\n```\n\nIf gitlab is older than the local file, `pet sync` upload snippets.\n```\npet sync\nUpload success\n```\n\n## Auto Sync\nYou can sync snippets automatically.\nSet `true` to `auto_sync` in `[Gist]`, `[GHEGist]` or `[GitLab]`.\nThen, your snippets sync automatically when `pet new` or `pet edit`.\n\n```\npet edit\nGetting Gist...\nUpdating Gist...\nUpload success\n```\n\n# Installation\nYou need to install selector command ([fzf](https://github.com/junegunn/fzf) or [peco](https://github.com/peco/peco)).  \n`homebrew` install `fzf` automatically.\n\nAfter you install Pet, it's HIGHLY recommended to install the shortcuts mentioned in the section on [ZSH Prev](zsh-prev-function)\n\n\n## Binary\nGo to [the releases page](https://github.com/knqyf263/pet/releases), find the version you want, and download the zip file. Unpack the zip file, and put the binary to somewhere you want (on UNIX-y systems, /usr/local/bin or the like). Make sure it has execution bits turned on. \n\n## Mac OS X / Homebrew\n\nInstall [selector command](#Installation) first.\nYou can use homebrew on OS X.\n```\nbrew install knqyf263/pet/pet\n```\n\nIf you receive an error (`Error: knqyf263/pet/pet 64 already installed`) during `brew upgrade`, try the following command\n\n```\nbrew unlink pet && brew uninstall pet\n(rm -rf /usr/local/Cellar/pet/64)\nbrew install knqyf263/pet/pet\n```\n\n## Fedora, RedHat, CentOS\nInstall [selector command](#Installation) first.\nDownload rpm package from [the releases page](https://github.com/knqyf263/pet/releases)\n```\nsudo rpm -ivh https://github.com/knqyf263/pet/releases/download/vx.x.x/pet_x.x.x_linux_amd64.rpm\n```\nAlso available on the [Terra repository](https://terra.fyralabs.com/) (3rd party) for Fedora/Fedora-based distros\n```\nsudo dnf install pet\n```\n\n## Debian, Ubuntu\nInstall [selector command](#Installation) first.\nDownload deb package from [the releases page](https://github.com/knqyf263/pet/releases)\n```\nwget https://github.com/knqyf263/pet/releases/download/vx.x.x/pet_x.x.x_linux_amd64.deb\ndpkg -i pet_x.x.x_linux_amd64.deb\n```\n\n## Archlinux\nInstall [selector command](#Installation) first.\nTwo packages are available in [AUR](https://wiki.archlinux.org/index.php/Arch_User_Repository).\nYou can install the package [from source](https://aur.archlinux.org/packages/pet-git):\n```\nyaourt -S pet-git\n```\nOr [from the binary](https://aur.archlinux.org/packages/pet-bin):\n```\nyaourt -S pet-bin\n```\n\n## Build\nInstall [selector command](#Installation) first.\n\n```\nmkdir -p $GOPATH/src/github.com/knqyf263\ncd $GOPATH/src/github.com/knqyf263\ngit clone https://github.com/knqyf263/pet.git\ncd pet\nmake install\n```\n\n# Migration\n## From Keep\nhttps://blog.saltedbrain.org/2018/12/converting-keep-to-pet-snippets.html\n\n# Contribute\n\n1. fork a repository: github.com/knqyf263/pet to github.com/you/repo\n2. get original code: `go get github.com/knqyf263/pet`\n3. work on original code\n4. add remote to your repo: git remote add myfork https://github.com/you/repo.git\n5. push your changes: git push myfork\n6. create a new Pull Request\n\n- see [GitHub and Go: forking, pull requests, and go-getting](http://blog.campoy.cat/2014/03/github-and-go-forking-pull-requests-and.html)\n\n----\n\n# License\nMIT\n\n# Author\nTeppei Fukuda\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.23828125,
          "content": "## Reporting a Vulnerability\n\nIf you discover a potential security issue in this project we ask that you notify our maintainers via email to rami.awar.ra {at} gmail.com or knqyf263 {at} gmail.com\n\nPlease do **not** create a public github issue."
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "dialog",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.51953125,
          "content": "module github.com/knqyf263/pet\n\ngo 1.21\n\nrequire (\n\tgithub.com/atotto/clipboard v0.1.4\n\tgithub.com/briandowns/spinner v1.23.1\n\tgithub.com/chzyer/readline v1.5.1\n\tgithub.com/fatih/color v1.18.0\n\tgithub.com/google/go-github v17.0.0+incompatible\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.16\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/spf13/cobra v1.8.1\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/xanzy/go-gitlab v0.114.0\n\tgolang.org/x/oauth2 v0.24.0\n)\n\nrequire gopkg.in/alessio/shellescape.v1 v1.0.0-20170105083845-52074bc9df61\n\nrequire (\n\tgithub.com/awesome-gocui/gocui v1.1.0\n\tgithub.com/go-test/deep v1.1.1\n\tgithub.com/pelletier/go-toml v1.9.5\n\tgolang.org/x/term v0.27.0\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n\nrequire (\n\tgithub.com/alessio/shellescape v1.4.1 // indirect\n\tgithub.com/gdamore/encoding v1.0.1 // indirect\n\tgithub.com/gdamore/tcell/v2 v2.7.4 // indirect\n\tgithub.com/google/go-querystring v1.1.0 // indirect\n\tgithub.com/hashicorp/go-cleanhttp v0.5.2 // indirect\n\tgithub.com/hashicorp/go-retryablehttp v0.7.7 // indirect\n\tgithub.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgithub.com/stretchr/testify v1.10.0\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgolang.org/x/time v0.8.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 11.283203125,
          "content": "github.com/alessio/shellescape v1.4.1 h1:V7yhSDDn8LP4lc4jS8pFkt0zCnzVJlG5JXy9BVKJUX0=\ngithub.com/alessio/shellescape v1.4.1/go.mod h1:PZAiSCk0LJaZkiCSkPv8qIobYglO3FPpyFjDCtHLS30=\ngithub.com/atotto/clipboard v0.1.4 h1:EH0zSVneZPSuFR11BlR9YppQTVDbh5+16AmcJi4g1z4=\ngithub.com/atotto/clipboard v0.1.4/go.mod h1:ZY9tmq7sm5xIbd9bOK4onWV4S6X0u6GY7Vn0Yu86PYI=\ngithub.com/awesome-gocui/gocui v1.1.0 h1:db2j7yFEoHZjpQFeE2xqiatS8bm1lO3THeLwE6MzOII=\ngithub.com/awesome-gocui/gocui v1.1.0/go.mod h1:M2BXkrp7PR97CKnPRT7Rk0+rtswChPtksw/vRAESGpg=\ngithub.com/briandowns/spinner v1.23.1 h1:t5fDPmScwUjozhDj4FA46p5acZWIPXYE30qW2Ptu650=\ngithub.com/briandowns/spinner v1.23.1/go.mod h1:LaZeM4wm2Ywy6vO571mvhQNRcWfRUnXOs0RcKV0wYKM=\ngithub.com/chzyer/logex v1.2.1 h1:XHDu3E6q+gdHgsdTPH6ImJMIp436vR6MPtH8gP05QzM=\ngithub.com/chzyer/logex v1.2.1/go.mod h1:JLbx6lG2kDbNRFnfkgvh4eRJRPX1QCoOIWomwysCBrQ=\ngithub.com/chzyer/readline v1.5.1 h1:upd/6fQk4src78LMRzh5vItIt361/o4uq553V8B5sGI=\ngithub.com/chzyer/readline v1.5.1/go.mod h1:Eh+b79XXUwfKfcPLepksvw2tcLE/Ct21YObkaSkeBlk=\ngithub.com/chzyer/test v1.0.0 h1:p3BQDXSxOhOG0P9z6/hGnII4LGiEPOYBhs8asl/fC04=\ngithub.com/chzyer/test v1.0.0/go.mod h1:2JlltgoNkt4TW/z9V/IzDdFaMTM2JPIi26O1pF38GC8=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fatih/color v1.18.0 h1:S8gINlzdQ840/4pfAwic/ZE0djQEH3wM94VfqLTZcOM=\ngithub.com/fatih/color v1.18.0/go.mod h1:4FelSpRwEGDpQ12mAdzqdOukCy4u8WUtOY6lkT/6HfU=\ngithub.com/gdamore/encoding v1.0.0/go.mod h1:alR0ol34c49FCSBLjhosxzcPHQbf2trDkoo5dl+VrEg=\ngithub.com/gdamore/encoding v1.0.1 h1:YzKZckdBL6jVt2Gc+5p82qhrGiqMdG/eNs6Wy0u3Uhw=\ngithub.com/gdamore/encoding v1.0.1/go.mod h1:0Z0cMFinngz9kS1QfMjCP8TY7em3bZYeeklsSDPivEo=\ngithub.com/gdamore/tcell/v2 v2.4.0/go.mod h1:cTTuF84Dlj/RqmaCIV5p4w8uG1zWdk0SF6oBpwHp4fU=\ngithub.com/gdamore/tcell/v2 v2.7.4 h1:sg6/UnTM9jGpZU+oFYAsDahfchWAFW8Xx2yFinNSAYU=\ngithub.com/gdamore/tcell/v2 v2.7.4/go.mod h1:dSXtXTSK0VsW1biw65DZLZ2NKr7j0qP/0J7ONmsraWg=\ngithub.com/go-test/deep v1.1.1 h1:0r/53hagsehfO4bzD2Pgr/+RgHqhmf+k1Bpse2cTu1U=\ngithub.com/go-test/deep v1.1.1/go.mod h1:5C2ZWiW0ErCdrYzpqxLbTX7MG14M9iiw8DgHncVwcsE=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-github v17.0.0+incompatible h1:N0LgJ1j65A7kfXrZnUDaYCs/Sf4rEjNlfyDHW9dolSY=\ngithub.com/google/go-github v17.0.0+incompatible/go.mod h1:zLgOLi98H3fifZn+44m+umXrS52loVEgC2AApnigrVQ=\ngithub.com/google/go-querystring v1.1.0 h1:AnCroh3fv4ZBgVIf1Iwtovgjaw/GiKJo8M8yD/fhyJ8=\ngithub.com/google/go-querystring v1.1.0/go.mod h1:Kcdr2DB4koayq7X8pmAG4sNG59So17icRSOU623lUBU=\ngithub.com/hashicorp/go-cleanhttp v0.5.2 h1:035FKYIWjmULyFRBKPs8TBQoi0x6d9G4xc9neXJWAZQ=\ngithub.com/hashicorp/go-cleanhttp v0.5.2/go.mod h1:kO/YDlP8L1346E6Sodw+PrpBSV4/SoxCXGY6BqNFT48=\ngithub.com/hashicorp/go-hclog v1.6.3 h1:Qr2kF+eVWjTiYmU7Y31tYlP1h0q/X3Nl3tPGdaB11/k=\ngithub.com/hashicorp/go-hclog v1.6.3/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=\ngithub.com/hashicorp/go-retryablehttp v0.7.7 h1:C8hUCYzor8PIfXHa4UrZkU4VvK8o9ISHxT2Q8+VepXU=\ngithub.com/hashicorp/go-retryablehttp v0.7.7/go.mod h1:pkQpWZeYWskR+D1tR2O5OcBFOxfA7DoAO6xtkuQnHTk=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/lucasb-eyer/go-colorful v1.0.3/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.10/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=\ngithub.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=\ngithub.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/pelletier/go-toml v1.9.5 h1:4yBQzkHv+7BHq2PQUZF3Mx0IYxG7LsP222s7Agd3ve8=\ngithub.com/pelletier/go-toml v1.9.5/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.1.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.3/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/xanzy/go-gitlab v0.114.0 h1:0wQr/KBckwrZPfEMjRqpUz0HmsKKON9UhCYv9KDy19M=\ngithub.com/xanzy/go-gitlab v0.114.0/go.mod h1:wKNKh3GkYDMOsGmnfuX+ITCmDuSDWFO0G+C4AygL9RY=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220310020820-b874c991c1a5/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20201210144234-2321bbc49cbf/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.8.0 h1:9i3RxcPv3PZnitoVGMPDKZSq1xW1gK1Xy3ArNOGZfEg=\ngolang.org/x/time v0.8.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/alessio/shellescape.v1 v1.0.0-20170105083845-52074bc9df61 h1:8ajkpB4hXVftY5ko905id+dOnmorcS2CHNxxHLLDcFM=\ngopkg.in/alessio/shellescape.v1 v1.0.0-20170105083845-52074bc9df61/go.mod h1:IfMagxm39Ys4ybJrDb7W3Ob8RwxftP0Yy+or/NVz1O8=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.6611328125,
          "content": "// Copyright © 2017 Teppei Fukuda\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage main\n\nimport \"github.com/knqyf263/pet/cmd\"\n\nfunc main() {\n\tcmd.Execute()\n}\n"
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "path",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "snippet",
          "type": "tree",
          "content": null
        },
        {
          "name": "sync",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}