{
  "metadata": {
    "timestamp": 1736567083658,
    "page": 672,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ergochat/ergo",
      "stars": 2720,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".check-gofmt.sh",
          "type": "blob",
          "size": 0.2568359375,
          "content": "#!/bin/bash\n\n# exclude vendor/\nSOURCES=\"./ergo.go ./irc\"\n\nif [ \"$1\" = \"--fix\" ]; then\n\texec gofmt -s -w $SOURCES\nfi\n\nif [ -n \"$(gofmt -s -l $SOURCES)\" ]; then\n    echo \"Go code is not formatted correctly with \\`gofmt -s\\`:\"\n    gofmt -s -d $SOURCES\n    exit 1\nfi\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.05859375,
          "content": "vendor/*    linguist-vendored\nlanguages/* linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.4169921875,
          "content": "# Created by https://www.gitignore.io/api/windows,osx,linux,go\n\n### Windows ###\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n\n### OSX ###\n*.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n\n### Linux ###\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# vim swapfiles\n*.swp\n\n### Go ###\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n\n### custom ###\n/_site/\n/.vscode/*\n/ircd*\n/web-*\n/web.*\n/ssl.*\n/tls.*\n/ergo\n/build/*\n_test\nergo.prof\nergo.mprof\n/dist\n*.pem\n.dccache"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0791015625,
          "content": "[submodule \"irctest\"]\n\tpath = irctest\n\turl = https://github.com/ergochat/irctest\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.662109375,
          "content": "# .goreleaser.yml\n# Build customization\nversion: 2\nproject_name: ergo\nbuilds:\n  - main: ergo.go\n    env:\n      - CGO_ENABLED=0\n    binary: ergo\n    goos:\n      - linux\n      - windows\n      - darwin\n      - freebsd\n      - openbsd\n      - plan9\n    goarch:\n      - amd64\n      - arm\n      - arm64\n      - riscv64\n    goarm:\n      - 6\n    ignore:\n      - goos: windows\n        goarch: arm\n      - goos: windows\n        goarch: arm64\n      - goos: windows\n        goarch: riscv64\n      - goos: darwin\n        goarch: arm\n      - goos: darwin\n        goarch: riscv64\n      - goos: freebsd\n        goarch: arm\n      - goos: freebsd\n        goarch: arm64\n      - goos: freebsd\n        goarch: riscv64\n      - goos: openbsd\n        goarch: arm\n      - goos: openbsd\n        goarch: arm64\n      - goos: openbsd\n        goarch: riscv64\n      - goos: plan9\n        goarch: arm\n      - goos: plan9\n        goarch: arm64\n      - goos: plan9\n        goarch: riscv64\n    flags:\n      - -trimpath\n\narchives:\n  -\n    name_template: >-\n            {{ .ProjectName }}-{{ .Version }}-\n            {{- if eq .Os \"darwin\" }}macos{{- else }}{{ .Os }}{{ end -}}-\n            {{- if eq .Arch \"amd64\" }}x86_64{{- else }}{{ .Arch }}{{ end -}}\n            {{ if .Arm }}v{{ .Arm }}{{ end -}}\n    format: tar.gz\n    format_overrides:\n      - goos: windows\n        format: zip\n    files:\n      - README\n      - CHANGELOG.md\n      - LICENSE\n      - ergo.motd\n      - default.yaml\n      - traditional.yaml\n      - docs/MANUAL.md\n      - docs/USERGUIDE.md\n      - languages/*.yaml\n      - languages/*.json\n      - languages/*.md\n    wrap_in_directory: true\nchecksum:\n  name_template: \"{{ .ProjectName }}-{{ .Version }}-checksums.txt\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 150.1181640625,
          "content": "# Changelog\nAll notable changes to Ergo will be documented in this file.\n\n## [2.14.0] - 2024-06-30\n\nWe're pleased to be publishing v2.14.0, a new stable release. This release contains primarily bug fixes, with the addition of some new authentication mechanisms for integrating with web clients.\n\nThis release includes changes to the config file format, all of which are fully backwards-compatible and do not require updating the file before upgrading. It includes no changes to the database file format.\n\nMany thanks to [@al3xandros](https://github.com/al3xandros), donio, [@eeeeeta](https://github.com/eeeeeta), [@emersion](https://github.com/emersion), [@Eriner](https://github.com/Eriner), [@eskimo](https://github.com/eskimo), [@Herringway](https://github.com/Herringway), [@jwheare](https://github.com/jwheare), [@knolley](https://github.com/knolley), [@mengzhuo](https://github.com/mengzhuo), pathof, [@poVoq](https://github.com/poVoq), [@progval](https://github.com/progval), [@RNDpacman](https://github.com/RNDpacman), and [@xnaas](https://github.com/xnaas) for contributing patches, reporting issues, and helping test.\n\n### Config changes\n* Added `accounts.oauth2` and `accounts.jwt-auth` blocks for configuring OAuth2 and JWT authentication (#2004)\n* Added `protocol` and `local-address` options to `accounts.registration.email-verification`, to force emails to be sent over IPv4 (or IPv6) or to force the use of a particular source address (#2142)\n* Added `limits.realnamelen`, a configurable limit on the length of realnames. If unset, no limit is enforced beyond the IRC protocol line length limits (the previous behavior). (#2123, thanks [@eskimo](https://github.com/eskimo)!)\n* Added the `accept-hostname` option to the webirc config block, allowing Ergo to accept hostnames passed from reverse proxies on the `WEBIRC` line. Note that this will have no effect under the default/recommended configuration, in which cloaks are used instead (#1686, #2146, thanks [@RNDpacman](https://github.com/RNDpacman)!)\n* The default/recommended value of `limits.chan-list-modes` (the size limit for ban/except/invite lists) was raised to 100 (#2081, #2165, #2167)\n\n### Added\n* Added support for the `OAUTHBEARER` SASL mechanism, allowing Ergo to interoperate with Gamja and an OAuth2 provider (#2004, #2122, thanks [@emersion](https://github.com/emersion)!)\n* Added support for the [`IRCV3BEARER` SASL mechanism](https://github.com/ircv3/ircv3-specifications/pull/545), allowing Ergo to accept OAuth2 or JWT bearer tokens (#2158)\n* Added support for the legacy `rfc1459` and `rfc1459-strict` casemappings (#2099, #2159, thanks [@xnaas](https://github.com/xnaas)!)\n* The new `ergo defaultconfig` subcommand prints a copy of the default config file to standard output (#2157, #2160, thanks [@al3xandros](https://github.com/al3xandros)!)\n\n### Fixed\n* Even with `allow-truncation: false` (the recommended default), some oversized messages were being accepted and relayed with truncation. These messages will now be rejected with `417 ERR_INPUTTOOLONG` as expected (#2170)\n* NICK and QUIT from invisible members of auditorium channels are no longer recorded in history (#2133, #2137, thanks [@knolley](https://github.com/knolley) and [@poVoq](https://github.com/poVoq)!)\n* If channel registration was disabled, registered channels could become inaccessible after rehash; this has been fixed (#2130, thanks [@eeeeeta](https://github.com/eeeeeta)!)\n* Attempts to use unrecognized SASL mechanisms no longer count against the login throttle, improving compatibility with Pidgin (#2156, thanks donio and pathof!)\n* Fixed database autoupgrade on Windows, which was previously broken due to the use of a colon in the backup filename (#2139, #2140, thanks [@Herringway](https://github.com/Herringway)!)\n* Fixed handling of `NS CERT ADD <user> <fp>` when an unprivileged user invokes it on themself (#2128, #2098, thanks [@Eriner](https://github.com/Eriner)!)\n* Fixed missing human-readable trailing parameters for two multiline `FAIL` messages (#2043, #2162, thanks [@jwheare](https://github.com/jwheare) and [@progval](https://github.com/progval)!)\n* Fixed symbol sent by `353 RPL_NAMREPLY` for secret channels (#2144, #2145, thanks savoyard!)\n\n### Changed\n* Trying to claim a registered nickname that is also actually in use by another client now produces `433 ERR_NICKNAMEINUSE` as expected (#2135, #2136, thanks savoyard!)\n* `SAMODE` now overrides the enforcement of `limits.chan-list-modes` (the size limit for ban/except/invite lists) (#2081, #2165)\n* Certain unsuccessful `MODE` changes no longer send `324 RPL_CHANNELMODEIS` and `329 RPL_CREATIONTIME` (#2163)\n* Debug logging for environment variable configuration overrides no longer prints the value, only the key (#2129, #2132, thanks [@eeeeeta](https://github.com/eeeeeta)!)\n\n### Internal\n\n* Official release builds use Go 1.22.4\n* Added a linux/riscv64 release (#2172, #2173, thanks [@mengzhuo](https://github.com/mengzhuo)!)\n\n## [2.13.1] - 2024-05-06\n\nErgo 2.13.1 is a bugfix release, fixing an exploitable deadlock that could lead to a denial of service. We regret the oversight.\n\nThis release includes no changes to the config file format or database format.\n\n### Security\n\n* Fixed an exploitable deadlock that could lead to a denial of service (#2149)\n\n### Internal\n\n* Official release builds use Go 1.22.2\n\n\n## [2.13.0] - 2024-01-14\n\nWe're pleased to be publishing v2.13.0, a new stable release. This is a bugfix release that fixes some issues, including a crash.\n\nThis release includes no changes to the config file format or database format.\n\nMany thanks to [@dallemon](https://github.com/dallemon), [@jwheare](https://github.com/jwheare), [@Mikaela](https://github.com/Mikaela), [@nealey](https://github.com/nealey), and [@Sheikah45](https://github.com/Sheikah45) for contributing patches, reporting issues, and helping test.\n\n### Fixed\n\n* Fixed a (hopefully rare) crash when persisting always-on client statuses (#2113, #2117, thanks [@Sheikah45](https://github.com/Sheikah45)!)\n* Fixed not being able to message channels with `/` (or the configured `RELAYMSG` separator) in their names (#2114, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Verification emails now always include a `Message-ID` header, improving compatibility with Gmail (#2108, #2110)\n* Improved human-readable description of `REDACT_FORBIDDEN` (#2101, thanks [@jwheare](https://github.com/jwheare)!)\n\n### Removed\n\n* Removed numerics associated with the retired ACC spec (#2109, #2111, thanks [@jwheare](https://github.com/jwheare)!)\n\n### Internal\n\n* Upgraded the Docker base image from Alpine 3.13 to 3.19. The resulting images are incompatible with Docker 19.x and lower (all currently non-EOL Docker versions should be supported). (#2103)\n* Official release builds use Go 1.21.6\n\n\n## [2.12.0] - 2023-10-10\n\nWe're pleased to be publishing v2.12.0, a new stable release. This is another bugfix release aimed at improving client compatibility and keeping up with the IRCv3 specification process.\n\nThis release includes changes to the config file format, one of which is a compatibility break: if you were using `accounts.email-verification.blacklist-regexes`, you can restore the previous functionality by renaming `blacklist-regexes` to `address-blacklist` and setting the additional key `address-blacklist-syntax: regex`. See [default.yaml](https://github.com/ergochat/ergo/blob/e7597876d987a6fc061b768fcf878d0035d1c85a/default.yaml#L422-L424) for an example; for more details, see the \"Changed\" section below.\n\nThis release includes a database change. If you have `datastore.autoupgrade` set to `true` in your configuration, it will be automatically applied when you restart Ergo. Otherwise, you can update the database manually by running `ergo upgradedb` (see the manual for complete instructions).\n\nMany thanks to [@adsr](https://github.com/adsr), [@avollmerhaus](https://github.com/avollmerhaus), [@csmith](https://github.com/csmith), [@EchedeyLR](https://github.com/EchedeyLR), [@emersion](https://github.com/emersion), [@eskimo](https://github.com/eskimo), [@julio-b](https://github.com/julio-b), knolle, [@KoxSosen](https://github.com/KoxSosen), [@Mikaela](https://github.com/Mikaela), [@mogad0n](https://github.com/mogad0n), and [@progval](https://github.com/progval) for contributing patches, reporting issues, and helping test.\n\n### Config changes\n* Removed `accounts.email-verification.blacklist-regexes` in favor of `address-blacklist`, `address-blacklist-syntax`, and `address-blacklist-file`. See the \"Changed\" section below for the semantics of these new keys. (#1997, #2088)\n* Added `implicit-tls` (TLS from the first byte) support for MTAs (#2048, #2049, thanks [@EchedeyLR](https://github.com/EchedeyLR)!)\n\n### Fixed\n* Fixed an edge case under `allow-truncation: true` (the recommended default is `false`) where Ergo could truncate a message in the middle of a UTF-8 codepoint (#2074)\n* Fixed `CHATHISTORY TARGETS` being sent in a batch even without negotiation of the `batch` capability (#2066, thanks [@julio-b](https://github.com/julio-b)!)\n* Errors from `/REHASH` are now properly sanitized before being sent to the user, fixing an edge case where they would be dropped (#2031, thanks [@eskimo](https://github.com/eskimo)!\n* Fixed some edge cases in auto-away aggregation (#2044)\n* Fixed a FAIL code sent by draft/account-registration (#2092, thanks [@progval](https://github.com/progval)!)\n* Fixed a socket leak in the ident client (default/recommended configurations of Ergo disable ident and are not affected by this issue) (#2089)\n\n### Changed\n* Bouncer reattach from an \"insecure\" session is no longer disallowed. We continue to recommend that operators preemptively disable all insecure transports, such as plaintext listeners (#2013)\n* Email addresses are now converted to lowercase before checking them against the blacklist (#1997, #2088)\n* The default syntax for the email address blacklist is now \"glob\" (expressions with `*` and `?` as wildcard characters), as opposed to the full [Go regular expression syntax](https://github.com/google/re2/wiki/Syntax). To enable full regular expression syntax, set `address-blacklist-syntax: regex`.\n* Due to line length limitations, some capabilities are now hidden from clients that only support version 301 CAP negotiation. To the best of our knowledge, all clients that support these capabilities also support version 302 CAP negotiation, rendering this moot (#2068)\n* The default/recommended configuration now advertises the SCRAM-SHA-256 SASL method. We still do not recommend using this method in production. (#2032)\n* Improved KILL messages (#2053, #2041, thanks [@mogad0n](https://github.com/mogad0n)!)\n\n### Added\n* Added support for automatically joining new clients to a channel or channels (#2077, #2079, thanks [@adsr](https://github.com/adsr)!)\n* Added implicit TLS (TLS from the first byte) support for MTAs (#2048, #2049, thanks [@EchedeyLR](https://github.com/EchedeyLR)!)\n* Added support for [draft/message-redaction](https://github.com/ircv3/ircv3-specifications/pull/524) (#2065, thanks [@progval](https://github.com/progval)!)\n* Added support for [draft/pre-away](https://github.com/ircv3/ircv3-specifications/pull/514) (#2044)\n* Added support for [draft/no-implicit-names](https://github.com/ircv3/ircv3-specifications/pull/527) (#2083)\n* Added support for the [MSGREFTYPES](https://ircv3.net/specs/extensions/chathistory#isupport-tokens) 005 token (#2042)\n* Ergo now advertises the [standard-replies](https://ircv3.net/specs/extensions/standard-replies) capability. Requesting this capability does not change Ergo's behavior.\n\n### Internal\n* Release builds are now statically linked by default. This should not affect normal chat operations, but may disrupt attempts to connect to external services (e.g. MTAs) that are configured using a hostname that relies on libc's name resolution behavior. To restore the old behavior, build from source with `CGO_ENABLED=1`. (#2023)\n* Upgraded to Go 1.21 (#2045, #2084); official release builds use Go 1.21.3, which includes a fix for CVE-2023-44487\n* The default `make` target is now `build` (which builds an `ergo` binary in the working directory) instead of `install` (which builds and installs an `ergo` binary to `${GOPATH}/bin/ergo`). Take note if building from source, or testing Ergo in development! (#2047)\n* `make irctest` now depends on `make install`, in an attempt to ensure that irctest runs against the intended development version of Ergo (#2047)\n\n## [2.11.1] - 2022-01-22\n\nErgo 2.11.1 is a bugfix release, fixing a denial-of-service issue in our websocket implementation. We regret the oversight.\n\nThis release includes no changes to the config file format or database file format.\n\n### Security\n* Fixed a denial-of-service issue affecting websocket clients (#2039)\n\n## [2.11.0] - 2022-12-25\n\nWe're pleased to be publishing v2.11.0, a new stable release. This is another bugfix release aimed at improving client compatibility and keeping up with the IRCv3 specification process.\n\nThis release includes changes to the config file format, all of which are fully backwards-compatible and do not require updating the file before upgrading. It includes no changes to the database file format.\n\nMany thanks to dedekro, [@emersion](https://github.com/emersion), [@eskimo](https://github.com/eskimo), [@FiskFan1999](https://github.com/FiskFan1999), hauser, [@jwheare](https://github.com/jwheare), [@kingter-sutjiadi](https://github.com/kingter-sutjiadi), knolle, [@Mikaela](https://github.com/Mikaela), [@mogad0n](https://github.com/mogad0n), [@PeGaSuS-Coder](https://github.com/PeGaSuS-Coder), and [@progval](https://github.com/progval) for contributing patches, reporting issues, and helping test.\n\n### Config changes\n\n* Added `fakelag.command-budgets`, which allows each client session a limited number of specific commands that are exempt from fakelag. This improves compatibility with Goguma in particular. For the current recommended default, see `default.yaml` (#1978, thanks [@emersion](https://github.com/emersion)!)\n* The recommended value of `server.casemapping` is now `ascii` instead of `precis`. PRECIS remains fully supported; if you are already running an Ergo instance, we do not recommend changing the value unless you are confident that your existing users are not relying on non-ASCII nicknames and channel names. (#1718)\n\n### Changed\n\n* Network services like `NickServ` now appear in `WHO` responses where applicable (#1850, thanks [@emersion](https://github.com/emersion)!)\n* The `extended-monitor` capability now appears under its ratified name (#2006, thanks [@progval](https://github.com/progval)!)\n* `TAGMSG` no longer receives automatic `RPL_AWAY` responses (#1983, thanks [@eskimo](https://github.com/eskimo)!)\n* `UBAN` now states explicitly that bans without a time limit have \"indefinite\" duration (#1988, thanks [@mogad0n](https://github.com/mogad0n)!)\n\n### Fixed\n\n* `WHO` with a bare nickname as an argument now shows invisible users, comparable to `WHOIS` (#1991, thanks [@emersion](https://github.com/emersion)!)\n* MySQL did not work on 32-bit architectures; this has been fixed (#1969, thanks hauser!)\n* Fixed the name of the `CHATHISTORY` 005 token (#2008, #2009, thanks [@emersion](https://github.com/emersion)!)\n* Fixed handling of the address `::1` in WHOX output (#1980, thanks knolle!)\n* Fixed handling of `AWAY` with an empty parameter (the de facto standard is to treat as a synonym for no parameter, which means \"back\") (#1996, thanks [@emersion](https://github.com/emersion), [@jwheare](https://github.com/jwheare)!)\n* Fixed incorrect handling of some invalid modes in `CS AMODE` (#2002, thanks [@eskimo](https://github.com/eskimo)!)\n* Fixed incorrect help text for `NS SAVERIFY` (#2021, thanks [@FiskFan1999](https://github.com/FiskFan1999)!)\n\n### Added\n\n* Added the `draft/persistence` capability and associated `PERSISTENCE` command. This is a first attempt to standardize Ergo's \"always-on\" functionality so that clients can interact with it programmatically. (#1982)\n* Sending `SIGUSR1` to the Ergo process now prints a full goroutine stack dump to stderr, allowing debugging even when the HTTP pprof listener is disabled (#1975)\n\n### Internal\n\n* Upgraded to Go 1.19; this makes further architecture-specific bugs like #1969 much less likely (#1987, #1989)\n* The test suite is now parallelized (#1976, thanks [@progval](https://github.com/progval)!)\n\n\n## [2.10.0] - 2022-05-29\n\nWe're pleased to be publishing v2.10.0, a new stable release.\n\nThis release contains no changes to the config file format or database file format.\n\nMany thanks to [@csmith](https://github.com/csmith), [@FiskFan1999](https://github.com/FiskFan1999), [@Mikaela](https://github.com/Mikaela), [@progval](https://github.com/progval), and [@thesamesam](https://github.com/thesamesam) for contributing patches, and to [@emersion](https://github.com/emersion), [@eskimo](https://github.com/eskimo), [@FiskFan1999](https://github.com/FiskFan1999), [@jigsy1](https://github.com/jigsy1), [@Mikaela](https://github.com/Mikaela), [@mogad0n](https://github.com/mogad0n), [@progval](https://github.com/progval), and [@xnaas](https://github.com/xnaas) for reporting issues and helping test.\n\n### Config changes\n\n* For better interoperability with [Goguma](https://sr.ht/~emersion/goguma/), the recommended value of `history.chathistory-maxmessages` has been increased to `1000` (previously `100`) (#1919)\n\n### Changed\n* Persistent voice (`AMODE +v`) in a channel is now treated as a permanent invite (i.e. overriding `+i` on the channel) (#1901, thanks [@eskimo](https://github.com/eskimo)!)\n* If you are `+R`, sending a direct message to an anonymous user allows them to send you replies (#1687, #1688, thanks [@Mikaela](https://github.com/Mikaela) and [@progval](https://github.com/progval)!)\n* `0` is no longer valid as a nickname or account name, with a grandfather exception if it was registered on a previous version of Ergo (#1896)\n* Implemented the [ratified version of the bot mode spec](https://ircv3.net/specs/extensions/bot-mode); the tag name is now `bot` instead of `draft/bot` (#1938)\n* Privileged WHOX on a user with multiclient shows an arbitrarily chosen client IP address, comparable to WHO (#1897)\n* `SAREGISTER` is allowed even under `DEFCON` levels 4 and lower (#1922)\n* Operators with the `history` capability are now exempted from time cutoff restrictions on history retrieval (#1593, #1955)\n\n### Added\n* Added `draft/read-marker` capability, allowing server-side tracking of read messages for synchronization across multiple clients. (#1926, thanks [@emersion](https://github.com/emersion)!)\n* `INFO` now includes the server start time (#1895, thanks [@xnaas](https://github.com/xnaas)!)\n* Added `ACCEPT` command modeled on Charybdis/Solanum, allowing `+R` users to whitelist users who can DM them (#1688, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Added `NS SAVERIFY` for operators to manually complete an account verification (#1924, #1952, thanks [@tacerus](https://github.com/tacerus)!)\n\n### Fixed\n* Having the `samode` operator capability made all uses of the `KICK` command privileged (i.e. overriding normal channel privilege checks); this has been fixed (#1906, thanks [@pcho](https://github.com/pcho)!)\n* Fixed `LIST <n` always returning no results (#1934, thanks [@progval](https://github.com/progval) and [@mitchr](https://github.com/mitchr)!)\n* NickServ commands are now more clear about when a nickname is unavailable because it was previously registered and unregistered (#1886, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Fixed KLINE'd clients producing a `QUIT` snotice without a corresponding `CONNECT` snotice (#1941, thanks [@tacerus](https://github.com/tacerus), [@xnaas](https://github.com/xnaas)!)\n* Fixed incorrect handling of long/multiline `319 RPL_WHOISCHANNELS` responses (#1935, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Fixed `LIST` returning `403 ERR_NOSUCHCHANNEL` for a nonexistent channel; the correct response is an empty list (#1928, thanks [@emersion](https://github.com/emersion)!)\n* Fixed `+s` (\"secret\") channels not appearing in `LIST` even when the client is already a member (#1911, #1923, thanks [@jigsy1](https://github.com/jigsy1) and [@FiskFan1999](https://github.com/FiskFan1999)!)\n* Fixed a spurious success message in `HISTSERV DELETE` by always requiring a consistent number of parameters (#1881, #1927, thanks [@FiskFan1999](https://github.com/FiskFan1999)!)\n* Sending the empty string as a nickname would not always produce the expected error numeric `431 ERR_NONICKNAMEGIVEN`; this has been fixed (#1933, #1936, thanks [@kylef](https://github.com/kylef)!)\n* `znc.in/playback` timestamps are now parsed as pairs of exact integers, not as floats (#1918)\n\n### Internal\n* Upgraded to Go 1.18 (#1925)\n* Upgraded Alpine version in official Docker image\n* Fixed some issues in the example OpenRC init scripts (#1914, #1920, thanks [@thesamesam](https://github.com/thesamesam)!)\n\n\n## [2.9.1] - 2022-01-10\n\nErgo 2.9.1 is a bugfix release, fixing a regression introduced in 2.9.0. We regret the oversight.\n\nThis release includes no changes to the config file format or database format relative to 2.9.0.\n\nMany thanks to [@FiskFan1999](https://github.com/FiskFan1999) for reporting the issue.\n\n### Fixed\n* Every use of NS SAREGISTER would fail; this has been fixed (#1898, thanks [@FiskFan1999](https://github.com/FiskFan1999)!)\n\n\n## [2.9.0] - 2022-01-09\n\nWe're pleased to be publishing 2.9.0, a new stable release. This release contains mostly bug fixes, with some enhancements to moderation tools.\n\nThis release includes changes to the config file format, all of which are fully backwards-compatible and do not require updating the file before upgrading. It includes no changes to the database file format.\n\nMany thanks to [@erincerys](https://github.com/erincerys), [@FiskFan1999](https://github.com/FiskFan1999), [@mogad0n](https://github.com/mogad0n), and [@tacerus](https://github.com/tacerus) for contributing patches, and to [@ajaspers](https://github.com/ajaspers), [@emersion](https://github.com/emersion), [@FiskFan1999](https://github.com/FiskFan1999), [@Jobe1986](https://github.com/Jobe1986), [@kylef](https://github.com/kylef), [@Mikaela](https://github.com/Mikaela), [@mogad0n](https://github.com/mogad0n), [@pcho](https://github.com/pcho), and [@progval](https://github.com/progval) for reporting issues and helping test.\n\n\n### Config changes\n* Added `lock-file`, which helps protect against accidentally starting multiple instances of Ergo. This is a no-op if unset. The recommended default value is `ircd.lock`, which (like the default datastore path `ircd.db`) is relative to the working directory of the Ergo process. If your `datastore.path` is absolute, this path (if set) should be absolute as well. (#1823)\n* `+C` (no channel-wide CTCP messages other than ACTION) is now a recommended default channel mode (#1851)\n* Added `exempt-sasl` boolean to `server.ip-check-script`; if enabled, IP check scripts are run only for connections without SASL, improving performance for registered users (#1888)\n* `hidden: true` is now the recommended default for operator definitions (#1730)\n\n### Changed\n* The semantics of `+R` have been changed. `+R` now only prevents unauthenticated users from joining, so unregistered users who have already joined can still speak. The old semantics are still available via `+RM` (i.e. `+R` together with the `+M` \"moderated-registered\" mode). (#1858, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Unauthenticated users matching a `+I` invite exception mask can now join `+R` channels (#1871)\n* INVITE now exempts the user from `+b` bans (#1876, thanks [@progval](https://github.com/progval)!)\n* NS SUSPEND now only requires only the `ban` operator capability, as opposed to `accreg` (#1828, #1839, thanks [@mogad0n](https://github.com/mogad0n)!)\n\n### Added\n* SHA-256 certificate fingerprints can now be imported from Anope and Atheme (#1864, #1869, thanks [@tacerus](https://github.com/tacerus)!)\n* IP check scripts can now be run only for users that have not authenticated with SASL by the end of the handshake, improving performance for registered users (#1888)\n* Logging into an unverified account with SASL sends the new `NOTE AUTHENTICATE VERIFICATION_REQUIRED` [standard reply code](https://ircv3.net/specs/extensions/standard-replies) (#1852, #1853, thanks [@emersion](https://github.com/emersion)!)\n* CS PURGE now sends a snotice (#1826, thanks [@tacerus](https://github.com/tacerus)!)\n* The `v` snomask is now used to send notifications about vhost changes initiated by operators (#1844, thanks [@pcho](https://github.com/pcho)!)\n\n### Fixed\n* CAP LS and LIST responses after connection registration could be truncated in some cases; this has been fixed (#1872)\n* Unprivileged users with both a password and a certfp could not remove their password with `NS PASSWD <password> * *` as expected; this has been fixed (#1883, #1884, thanks [@FiskFan1999](https://github.com/FiskFan1999)!)\n* RELAYMSG identifiers that were not already in their case-normalized form could not be muted with `+b m:`; this has been fixed (#1838, thanks [@mogad0n](https://github.com/mogad0n)!)\n* CS AMODE changes did not take immediate effect if `force-nick-equals-account` was disabled and the nick did not coincide with the account; this has been fixed (#1860, thanks [@eskimo](https://github.com/eskimo)!)\n* `315 RPL_ENDOFWHO` now sends the exact, un-normalized mask argument provided by the client (#1831, thanks [@progval](https://github.com/progval)!)\n* A leading `$` character is now disallowed in new nicknames and account names, to avoid collision with the massmessage syntax (#1857, thanks [@emersion](https://github.com/emersion)!)\n* The [deprecated](https://github.com/ircdocs/modern-irc/pull/138) `o` parameter of `WHO` now returns an empty list of results, instead of being ignored (#1730, thanks [@kylef](https://github.com/kylef), [@emersion](https://github.com/emersion), [@progval](https://github.com/progval)!)\n* WHOX queries for channel oplevel now receive `*` instead of `0` (#1866, thanks [@Jobe1986](https://github.com/Jobe1986)!)\n\n### Internal\n* Updated list of official release binaries: added Apple M1, OpenBSD x86-64, and Plan 9 x86-64, removed Linux armv7, FreeBSD x86-32, and Windows x86-32. (The removed platforms are still fully supported by Ergo; you can build them from source or ask us for help.) (#1833)\n* Added an official Linux arm64 Docker image (#1855, thanks [@erincerys](https://github.com/erincerys)!)\n* Added service management files for OpenSolaris/Illumos (#1846, thanks [@tacerus](https://github.com/tacerus)!)\n\n\n## [2.8.0] - 2021-11-14\n\nWe're pleased to be publishing Ergo 2.8.0. This release contains many fixes and enhancements, plus one major user-facing feature: user-initiated password resets via e-mail (#734).\n\nThis release includes changes to the config file format, all of which are fully backwards-compatible and do not require updating the file before upgrading.\n\nThis release includes a database change. If you have `datastore.autoupgrade` set to `true` in your configuration, it will be automatically applied when you restart Ergo. Otherwise, you can update the database manually by running `ergo upgradedb` (see the manual for complete instructions).\n\nAs part of this release, our official Docker images have moved from Docker Hub to the GitHub Container Registry, at `ghcr.io/ergochat/ergo`. The `stable` and `master` tags correspond to the respective branches. Tagged releases (e.g. `v2.8.0`) are available under the corresponding named tags.\n\nMany thanks to [@ajaspers](https://github.com/ajaspers), [@delthas](https://github.com/delthas), [@mogad0n](https://github.com/mogad0n), [@majiru](https://github.com/majiru), [@ProgVal](https://github.com/ProgVal), and [@tacerus](https://github.com/tacerus) for contributing patches, to [@ajaspers](https://github.com/ajaspers) for contributing code review, to [@ajaspers](https://github.com/ajaspers), [@cxxboy](https://github.com/cxxboy), [@dallemon](https://github.com/dallemon), [@emersion](https://github.com/emersion), [@erikh](https://github.com/erikh), [@eskimo](https://github.com/eskimo), [@jwheare](https://github.com/jwheare), [@kylef](https://github.com/kylef), [@Mikaela](https://github.com/Mikaela), [@mogad0n](https://github.com/mogad0n), [@MystaraTheGreat](https://github.com/MystaraTheGreat), [@ProgVal](https://github.com/ProgVal), [@tacerus](https://github.com/tacerus), [@tamiko](https://github.com/tamiko), and [@xnaas](https://github.com/xnaas) for reporting issues and helping test, and to our translators for contributing translations.\n\n### Config changes\n* Added `accounts.registration.email-verification.password-reset` block to configure e-mail-based password reset (#734, #1779)\n* Added `accounts.registration.email-verification.timeout` to impose a timeout on e-mail sending; the recommended default value is `60s` (60 seconds) (#1741)\n* Added `server.suppress-lusers` to allow hiding the LUSERS counts (#1802, thanks [@eskimo](https://github.com/eskimo)!)\n\n### Security\n* Added `accounts.registration.email-verification.timeout` to impose a timeout on e-mail sending; the recommended default value is `60s` (60 seconds) (#1741)\n\n### Added\n* Added user-initiated password resets via email (#734). This requires e-mail verification of accounts, and must additionally be enabled explicitly: see the `email-verification` block in `default.yaml` for more information.\n* Added the `draft/extended-monitor` capability (#1761, thanks [@delthas](https://github.com/delthas)!)\n* When doing direct sending of verification emails, make email delivery failures directly visible to the end user (#1659, #1741, thanks [@tacerus](https://github.com/tacerus)!)\n* For operators, `NS INFO` now shows the user's email address (you can also view your own address) (#1677, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Operators with the appropriate permissions will now see IPs in `/WHOWAS` output (#1702, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Added the `+s d` snomask, for operators to receive information about session disconnections that do not result in a full QUIT (#1709, #1728, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Added support for the `SCRAM-SHA-256` SASL authentication mechanism (#175). This mechanism is not currently advertised in `CAP LS` output because IRCCloud handles it incorrectly. We also [recommend against using SCRAM because of its lack of genuine security benefits](https://gist.github.com/slingamn/3f2fed196df5ef14d1316a1ffa9d59f8).\n* `/UBAN LIST` output now includes the time the ban was created (#1725, #1755, thanks [@Mikaela](https://github.com/Mikaela) and [@mogad0n](https://github.com/mogad0n)!)\n* Added support for running as a `Type=notify` systemd service (#1733)\n* Added a warning to help users detect incorrect uses of `/QUOTE` (#1530)\n\n### Fixed\n* The `+M` (only registered users can speak) channel mode did not work; this has been fixed (#1696, thanks [@Mikaela](https://github.com/Mikaela)!)\n* A channel `/RENAME` that only changed the case of the channel would delete the channel registration; this has been fixed (#1751, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Fixed `allow-truncation: true` not actually allowing truncation of overlong lines (#1766, thanks [@tacerus](https://github.com/tacerus)!)\n* Fixed several pagination bugs in `CHATHISTORY` (#1676, thanks [@emersion](https://github.com/emersion)!)\n* Fixed support for kicking multiple users from a channel on the same line, the `TARGMAX` 005 parameter that advertises this, and the default kick message (#1748, #1777, #1776), thanks [@ProgVal](https://github.com/ProgVal)!)\n* Fixed `/SAMODE` on a channel not producing a snomask (#1787, thanks [@mogad0n](https://github.com/mogad0n), [@ajaspers](https://github.com/ajaspers)!)\n* Adding `+f` to a channel with `SAMODE` used to require channel operator privileges on the receiving channel; this has been fixed (#1825, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Fixed parameters sent with `697 ERR_LISTMODEALREADYSET` and `698 ERR_LISTMODENOTSET` (#1727, thanks [@kylef](https://github.com/kylef)!)\n* Fixed parameter sent with `696 ERR_INVALIDMODEPARAM` (#1773, thanks [@kylef](https://github.com/kylef)!)\n* Fixed handling of channel mode `+k` with an empty parameter (#1774, #1775, thanks [@ProgVal](https://github.com/ProgVal)!)\n* `WHOWAS` with an empty string as the parameter now produces an appropriate error response (#1703, thanks [@kylef](https://github.com/kylef)!)\n* Fixed error response to an empty realname on the `USER` line (#1778, thanks [@ProgVal](https://github.com/ProgVal)!)\n* Fixed `/UBAN ADD` of a NUH mask (i.e. a k-line) not killing affected clients (#1736, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Fixed buggy behavior when `+i` is configured as a default mode for channels (#1756, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Fixed issues with `channels.operator-only-creation` not respecting `/SAJOIN` or always-on clients (#1757)\n* Protocol-breaking operator vhosts are now disallowed during config validation (#1722)\n* Fixed error message associated with `/NS PASSWD` on a nonexistent account (#1738, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Fixed an incorrect `CHATHISTORY` fail message (#1731, thanks [@ProgVal](https://github.com/ProgVal)!)\n* Fixed a panic on an invalid configuration case (#1714, thanks [@erikh](https://github.com/erikh)!)\n\n### Changed\n* Upgraded the `draft/register` capability to the latest [`draft/account-registration`](https://github.com/ircv3/ircv3-specifications/pull/435) iteration (#1740)\n* Unregistered users with `+v` or higher can now speak in `+R` (registered-only) channels (#1715, thanks [@Mikaela](https://github.com/Mikaela) and [@ajaspers](https://github.com/ajaspers)!)\n* For always-on clients with at least one active connection, `338 RPL_WHOISACTUALLY` now displays an arbitrarily chosen client IP address (#1650, thanks [@MystaraTheGreat](https://github.com/MystaraTheGreat)!)\n* `#` can no longer be used in new account names and nicknames, or as the RELAYMSG separator (#1679)\n* The `oragono.io/nope` capability was renamed to `ergo.chat/nope` (#1793)\n\n### Removed\n* `never` is no longer accepted as a value of the `replay-joins` NickServ setting (`/NS SET replay-joins`); user accounts which enabled this setting have been reverted to the default value of `commands-only` (#1676)\n\n### Internal\n* We have a cool new logo!\n* Official builds now use Go 1.17 (#1781)\n* Official Docker containers are now at [ghcr.io/ergochat/ergo](https://ghcr.io/ergochat/ergo) (#1808)\n* Added a traditional SysV init script (#1691, thanks [@tacerus](https://github.com/tacerus)!)\n* Added an s6 init script (#1786, thanks [@majiru](https://github.com/majiru)!)\n\n## [2.7.0] - 2021-06-07\n\nWe're pleased to be publishing Ergo 2.7.0, our first official release under our new name of Ergo. This release contains bug fixes and minor enhancements.\n\nThis release includes changes to the config file format, all of which are fully backwards-compatible and do not require updating the file before upgrading. This release includes no changes to the database format.\n\nBecause the name of the executable has changed from `oragono` to `ergo` (`ergo.exe` on Windows), you may need to update your system configuration (e.g., scripts or systemd unit files that reference the executable).\n\nMany thanks to [@ajaspers](https://github.com/ajaspers) and [@jesopo](https://github.com/jesopo) for contributing patches, to [@ajaspers](https://github.com/ajaspers), [@ChrisTX](https://github.com/ChrisTX), [@emersion](https://github.com/emersion), [@jwheare](https://github.com/jwheare), [@kylef](https://github.com/kylef), [@Mikaela](https://github.com/Mikaela), [@mogad0n](https://github.com/mogad0n), and [@ProgVal](https://github.com/ProgVal) for reporting issues and helping test, and to our translators for contributing translations.\n\n### Changed\n* The project was renamed from \"Oragono\" to \"Ergo\" (#897, thanks to everyone who contributed feedback or voted in the poll)\n\n### Config changes\n* Entries in `server.listeners` now take a new key, `min-tls-version`, that can be used to set the minimum required TLS version; the recommended default value is `1.2` (#1611, thanks [@ChrisTX](https://github.com/ChrisTX)!)\n* Added `max-conns` (maximum connection count) and `max-conn-lifetime` (maximum lifetime of a connection before it is cycled) to `datastore.mysql` (#1622)\n* Added `massmessage` operator capability to allow sending NOTICEs to all connected users (#1153, #1629, thanks [@jesopo](https://github.com/jesopo)!)\n\n### Security\n* If `require-sasl.enabled` is set to `true`, `tor-listeners.require-sasl` will be automatically set to `true` as well (#1636)\n* It is now possible to set the minimum required TLS version, using the `min-tls-version` key in listener configuration\n* Configurations that require SASL but allow user registration now produce a warning (#1637)\n\n### Added:\n* Operators with the correct permissions can now send \"mass messages\", e.g. `/NOTICE $$*` will send a `NOTICE` to all users (#1153, #1629, thanks [@jesopo](https://github.com/jesopo)!)\n* Operators can now extend the maximum (non-tags) length of the IRC line using the `server.max-line-len` configuration key. This is not recommended for use outside of \"closed-circuit\" deployments where IRC operators have full control of all client software. (#1651)\n\n### Fixed\n* `RELAYMSG` now sends a full NUH (\"nick-user-host\"), instead of only the relay nickname, as the message source (#1647, thanks [@ProgVal](https://github.com/ProgVal), [@jwheare](https://github.com/jwheare), and [@Mikaela](https://github.com/Mikaela)!)\n* Fixed a case where channels would remain visible in `/LIST` after unregistration (#1619, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Fixed incorrect tags on `JOIN` lines in `+u` (\"auditorium\") channels (#1642)\n* Fixed an issue where LUSERS counts could get out of sync (#1617)\n* It was impossible to add a restricted set of snomasks to an operator's permissions; this has been fixed (#1618)\n* Fixed incorrect language in `NS INFO` responses (#1627, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Fixed a case where the `REGISTER` command would emit an invalid error message (#1633, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Fixed snomasks displaying in a nondeterministic order (#1669, thanks [@Mikaela](https://github.com/Mikaela)!)\n\n### Removed\n* Removed the `draft/resume-0.5` capability, and the associated `RESUME` and `BRB` commands (#1624)\n\n### Internal\n* Optimized MySQL storage of direct messages (#1615)\n\n## [2.6.1] - 2021-04-26\n\nOragono 2.6.1 is a bugfix release, fixing a security issue that is critical for some private server configurations. We regret the oversight.\n\nThe issue affects two classes of server configuration:\n\n1. Private servers that use `server.password` (i.e., the `PASS` command) for protection. If `accounts.registration.allow-before-connect` is enabled, the `REGISTER` command can be used to bypass authentication. Affected operators should set this field to `false`, or upgrade to 2.6.1, which disallows the insecure configuration. (If the field does not appear in the configuration file, the configuration is secure since the value defaults to false when unset.)\n2. Private servers that use `accounts.require-sasl` for protection. If these servers do not additionally set `accounts.registration.enabled` to `false`, the `REGISTER` command can potentially be used to bypass authentication. Affected operators should set `accounts.registration.enabled` to false; this recommendation appeared in the operator manual but was not emphasized sufficiently. (Configurations that require SASL but allow open registration are potentially valid, e.g., in the case of public servers that require everyone to use a registered account; accordingly, Oragono 2.6.1 continues to permit such configurations.)\n\nThis release includes no changes to the config file format or the database.\n\nMany thanks to [@ajaspers](https://github.com/ajaspers) for reporting the issue.\n\n### Security\n* Fixed and documented potential authentication bypasses via the `REGISTER` command (#1634, thanks [@ajaspers](https://github.com/ajaspers)!)\n\n## [2.6.0] - 2021-04-18\n\nWe're pleased to announce Oragono 2.6.0, a new stable release.\n\nThis release has some user-facing enhancements, but is primarily focused on fixing bugs and advancing the state of IRCv3 standardization (by publishing a release that implements the latest drafts). Some highlights:\n\n* A new CHATHISTORY API for listing direct message conversations (#1592)\n* The latest proposal for IRC-over-websockets, which should be backwards-compatible with existing clients (#1558)\n* The latest specification for the bot usermode (`+B` in our implementation) (#1562)\n\nThis release includes changes to the config file format, all of which are fully backwards-compatible and do not require updating the file before upgrading.\n\nThis release includes no changes to the embedded database format. If you are using MySQL for history storage, it adds a new table; this change is backwards and forwards-compatible and does not require any manual intervention.\n\nIf you are using nginx as a reverse proxy for IRC-over-websockets, previous documentation did not recommend increasing `proxy_read_timeout`; the default value of `60s` is too low and can lead to user disconnections. The current recommended value is `proxy_read_timeout 600s;`; see the manual for an example configuration.\n\nMany thanks to [@ajaspers](https://github.com/ajaspers) and [@Mikaela](https://github.com/Mikaela) for contributing patches, to [@aster1sk](https://github.com/aster1sk), [@emersion](https://github.com/emersion), [@eskimo](https://github.com/eskimo),  [@hhirtz](https://github.com/hhirtz), [@jlu5](https://github.com/jlu5), [@jwheare](https://github.com/jwheare), [@KoraggKnightWolf](https://github.com/KoraggKnightWolf), [@kylef](https://github.com/kylef), [@Mikaela](https://github.com/Mikaela), [@mogad0n](https://github.com/mogad0n), [@ProgVal](https://github.com/ProgVal), and [@szlend](https://github.com/szlend) for reporting issues and helping test, and to our translators for contributing translations.\n\n### Config changes\n* Listeners now support multiple TLS certificates for use with SNI; see the manual for details (#875, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Added `server.compatibility.allow-truncation`, controlling whether the server accepts messages that are too long to be relayed intact; this value defaults to `true` when unset (#1577, #1586, thanks [@kylef](https://github.com/kylef)!)\n* Added new `snomasks` operator capability; operators must have either the `ban` or `snomasks` capability to subscribe to additional snomasks (#1176)\n\n### Security\n* Fixed several edge cases where Oragono might relay invalid UTF8 despite the `UTF8ONLY` guarantee, or to a text-mode websocket client (#1575, #1596, thanks [@ProgVal](https://github.com/ProgVal)!)\n* All operator privilege checks now use the capabilities system, making it easier to define operators with restricted powers (#1176)\n* Adding and removing bans with `UBAN` now produces snomasks and audit loglines (#1518, thanks [@mogad0n](https://github.com/mogad0n)!)\n\n### Fixed\n* Fixed an edge case in line buffering that could result in client disconnections (#1572, thanks [@ProgVal](https://github.com/ProgVal)!)\n* Upgraded buntdb, our embedded database library, fixing an edge case that could cause data corruption (#1603, thanks [@Mikaela](https://github.com/Mikaela), [@tidwall](https://github.com/tidwall)!)\n* Improved compatibility with the published `draft/register` specification (#1568, thanks [@ProgVal](https://github.com/ProgVal)!)\n* `433 ERR_NICKNAMEINUSE` is no longer sent when a fully connected (\"registered\") client fails to claim a reserved nickname, fixing a bad interaction with some client software (#1594, thanks [@ProgVal](https://github.com/ProgVal)!)\n* Fixed `znc.in/playback` commands causing client disconnections when history is disabled (#1552, thanks [@szlend](https://github.com/szlend)!)\n* Fixed syntactically invalid `696 ERR_INVALIDMODEPARAM` response for invalid channel keys (#1563, thanks [@ProgVal](https://github.com/ProgVal)!)\n* User-set nickserv settings now display as \"enabled\" instead of \"mandatory\" (#1544, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Improved error messages for some invalid configuration cases (#1559, thanks [@aster1sk](https://github.com/aster1sk)!)\n* Improved `CS TRANSFER` error messages (#1534, thanks burning!)\n* Handle panics caused when rehashing with SIGHUP (#1570)\n\n### Changed\n* Registered channels will always appear in `/LIST` output, even with no members (#1507)\n* In the new recommended default configuration, Oragono will preemptively reject messages that are too long to be relayed to clients without truncation. This is controlled by the config variable `server.compatibility.allow-truncation`; this field defaults to `true` when unset, preserving the legacy behavior for older config files (#1577, #1586, thanks [@kylef](https://github.com/kylef)!)\n* Auto-away behavior now respects individual clients; the user is not considered away unless all clients are away or disconnected (#1531, thanks [@kylef](https://github.com/kylef)!)\n* Direct messages rejected due to the `+R` registered-only usermode now produce an error message (#1064, thanks [@KoraggKnightWolf](https://github.com/KoraggKnightWolf), [@ajaspers](https://github.com/ajaspers)!)\n* RELAYMSG identifiers now respect bans and mutes (#1502)\n* If end user message deletion is enabled, channel operators can now delete channel messages (#1565, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Halfops can change the channel topic (#1523)\n* Snomask add/remove syntax now matches other ircds more closely (#1074)\n* `CS OP` will regrant your channel `AMODE`, in case you removed it (#1516, #1307, thanks [@jlu5](https://github.com/jlu5)!)\n* User passwords may no longer begin with `:` (#1571)\n* Improved documentation of `CS AMODE` and `NS UNREGISTER` (#1524, #1545, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Disabling history disables history-related CAPs (#1549)\n\n### Added\n* Implemented the new [CHATHISTORY TARGETS](https://github.com/ircv3/ircv3-specifications/pull/450) API for listing direct message conversations (#1592, thanks [@emersion](https://github.com/emersion), [@hhirtz](https://github.com/hhirtz), [@jwheare](https://github.com/jwheare), [@kylef](https://github.com/kylef)!)\n* Implemented the new [IRC-over-websockets draft](https://github.com/ircv3/ircv3-specifications/pull/342), adding support for binary websockets and subprotocol negotiation (#1558, thanks [@jwheare](https://github.com/jwheare)!)\n* Implemented the new [bot mode spec](https://github.com/ircv3/ircv3-specifications/pull/439) (#1562)\n* Implemented the new [forward mode spec](https://github.com/ircv3/ircv3-specifications/pull/440) (#1612, thanks [@ProgVal](https://github.com/ProgVal)!)\n* `WARN NICK ACCOUNT_REQUIRED` is sent on failed attempts to claim a reserved nickname (#1594)\n* `NS CLIENTS LIST` displays enabled client capabilities (#1576)\n* `CS INFO` with no arguments lists your registered channels (#765)\n* `NS PASSWORD` is now accepted as an alias for `NS PASSWD` (#1547)\n\n### Internal\n* Upgraded to Go 1.16 (#1510)\n\n## [2.5.1] - 2021-02-02\n\nOragono 2.5.1 is a bugfix release that fixes a significant security issue. We apologize for the oversight.\n\nThis release includes no changes to the config file format or the database.\n\nMany thanks to [@xnaas](https://github.com/xnaas) for reporting the issue.\n\n### Security\n* Fix an incorrect permissions check in NickServ (#1520, thanks [@xnaas](https://github.com/xnaas)!)\n\n## [2.5.0] - 2021-01-31\n\nWe're pleased to announce Oragono 2.5.0, a new stable release.\n\nThis release includes enhancements based on the needs of real-world operators, as well as bug fixes. Highlights include:\n\n* `UBAN`, a new \"unified ban\" system for server operators, with a corresponding `CHANSERV HOWTOBAN` command for channel operators (#1447)\n* A new forwarding/overflow channel mode `+f` (#1260)\n* Support for PROXY protocol v2 (#1389)\n\nThis release includes changes to the config file format, including two breaking changes. One is fairly significant: enabling a websocket listener now requires the use of `server.enforce-utf8`, as has been the recommended default since 2.2.0 (so continuing to accept legacy non-UTF-8 content will require disabling websockets). The other is that the \"unban\" operator capability has been removed (it is now included in the \"ban\" capability). Other config changes are backwards compatible and do not require updating the file before upgrading.\n\nThis release includes a database change. If you have `datastore.autoupgrade` set to `true` in your configuration, it will be automatically applied when you restart Oragono. Otherwise, you can update the database manually by running `oragono upgradedb` (see the manual for complete instructions).\n\nMany thanks to [@jlu5](https://github.com/jlu5), [@kylef](https://github.com/kylef) and [@Mikaela](https://github.com/Mikaela) for contributing patches, to [@bogdomania](https://github.com/bogdomania), [@eskimo](https://github.com/eskimo), [@happyhater](https://github.com/happyhater), [@jlu5](https://github.com/jlu5), [@kylef](https://github.com/kylef), [@LukeHoersten](https://github.com/LukeHoersten), [@Mikaela](https://github.com/Mikaela), [@mogad0n](https://github.com/mogad0n), [@robinlemon](https://github.com/robinlemon), and [@vertisan](https://github.com/vertisan) for reporting issues and helping test, and to our translators for contributing translations.\n\n### Config changes\n* Enabling websockets now requires `server.enforce-utf8 = true` (#1483)\n* `proxy` is now a top-level field of the listener config block; in particular, the PROXY protocol (v1 or v2) can now be required ahead of a plaintext connection. The field is still accepted in its legacy position (inside the `tls` block). (#1389, thanks [@robinlemon](https://github.com/robinlemon)!)\n* Added `accounts.multiclient.always-on-expiration`, allowing always-on clients to be timed out for inactivity (#810, thanks [@bogdomania](https://github.com/bogdomania)!)\n* `local_` prefixes have been stripped from operator capability names, so that, e.g., `local_ban` is now just `ban`. The old names are still accepted. (#1442)\n* The `local_unban` operator capability has been removed (unbanning is now contained in the `ban` permission). (#1442)\n* The recommended value of `accounts.bcrypt-cost` is now `4`, the minimum acceptable value (#1497)\n* `server.ip-limits.custom-limits` now accepts networks that contain multiple CIDRs; the old syntax is still accepted (#1421, thanks [@Mikaela](https://github.com/Mikaela)!\n* A new field, `history.restrictions.query-cutoff`, generalizes the old `history.restrictions.enforce-registration-date` (the old field is still accepted) (#1490, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Added `server.override-services-hostname`, allowing the hostname of NickServ, ChanServ, etc. to be overridden (#1407, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Added a boolean `hide-sts` key to the listener block; this can be used to hide the STS CAP when the listener is secured at layer 3 or 4 (e.g., by a VPN or an E2E mixnet). It will still be necessary to add the relevant IPs to `secure-nets`. (#1428, thanks [@Mikaela](https://github.com/Mikaela)!)\n\n### Security\n* Improved validation of names and encodings for client-only tags (#1385)\n* Improved auditability of sensitive operator actions (#1443, thanks [@mogad0n](https://github.com/mogad0n)!)\n* `DEFCON 4` and lower now require Tor users to authenticate with SASL (#1450)\n\n### Fixed\n* Fixed `NS UNSUSPEND` requiring the casefolded / lowercase version of the account name (#1382, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Fixed client-only tags in direct (user-to-user) `PRIVMSG` not being replayed (#1411)\n* Fixed many bugs in import of Anope and Atheme databases (#1403, #1423, #1424, #1431, #1435, #1439, #1444, thanks [@jlu5](https://github.com/jlu5), [@kylef](https://github.com/kylef), and [@Mikaela](https://github.com/Mikaela)!)\n* Fixed case-handling bugs in `RENAME` (i.e., channel rename) (#1456, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Fixed incorrect processing of color code escapes in MOTD files (#1467, thanks [@mogad0n](https://github.com/mogad0n)!)\n* STS is no longer advertised to Tor clients (#1428, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Fixed HELP/HELPOP numerics not including the nick as an argument (#1472, thanks [@kylef](https://github.com/kylef)!)\n* Made connection registration snomasks less confusing (#1396, thanks [@eskimo](https://github.com/eskimo)!)\n* Fixed duplicated nicks in `KLINE` response (#1379, thanks [@mogad0n](https://github.com/mogad0n)!)\n* The `RELAYMSG` tag name is now `draft/relaymsg`, conforming to the amended draft specification (#1468, thanks [@jlu5](https://github.com/jlu5)!)\n* Fixed `SAJOIN` not sending a `MODE` line to the originating client (#1383, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Improved consistency of message sources sent by `CS AMODE` (#1383, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Fixed duplicated `JOIN` line sent to some clients using the `draft/resume-0.5` extension (#1397, thanks [@kylef](https://github.com/kylef)!)\n* Added a warning that MySQL cannot be enabled by rehash (#1452, thanks [@Mikaela](https://github.com/Mikaela)!)\n\n### Changed\n* Channel-user modes (e.g., `+o`, `+v`) of always-on clients are now persisted in the database (#1345)\n* `/CHANSERV PURGE` now takes `ADD`, `DEL`, and `LIST` subcommands; the separate `UNPURGE` command has been removed; `PURGE ADD` now requires a confirmation code (#1294, thanks [@mogad0n](https://github.com/mogad0n)!)\n* The characters `<`, `>`, `'`, `\"`, and `;` are no longer allowed in nicknames (previously registered account names containing these characters are still accepted) (#1436, thanks [@happyhater](https://github.com/happyhater)!)\n* Authenticated clients from Tor now receive their (account-unique) always-on cloaked hostname; this allows channel operators to ban unauthenticated Tor users by banning `*!*@tor-network.onion` (#1479, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Included the network name in the human-readable final parameter of `001 RPL_WELCOME` (#1410)\n* `RELAYMSG` can now take client-only tags (#1470)\n* WebSocket listeners will attempt to negotiate the `text.ircv3.net` [subprotocol](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#subprotocols); negotiating this is optional for clients (#1483)\n\n### Added\n* Added `UBAN`, a new command giving server operators a unified interface to D-LINEs (IP bans), K-LINEs (NUH mask bans, which are now deprecated), and account suspensions (`NS SUSPEND`) (#1447)\n* Added `CHANSERV HOWTOBAN`, a ChanServ subcommand that helps channel operators choose an appropriate ban (#1447)\n* Added a new channel mode `+f`; users who cannot join the channel due to `+i` or `+l` will be forwarded to the channel specified by `+f`. (#1260)\n* Added support for the PROXY protocol v2 (#1389, thanks [@robinlemon](https://github.com/robinlemon)!)\n* Added support for `/JOIN 0` (part all channels), requiring a confirmation code (#1417, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Added support for grouped nicknames as SASL usernames (#1476, thanks [@eskimo](https://github.com/eskimo)!)\n* Added history support for `INVITE` (#1409, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Added a new channel setting accessible via `/CS SET`: `history-cutoff`, allowing the channel owner more fine-grained control over who can see history (#1490, thanks [@Mikaela](https://github.com/Mikaela)!)\n* Added the `UTF8ONLY` ISUPPORT token, allowing the server to advertise to clients that only UTF-8 content is accepted (#1483)\n* Added `/NICKSERV RENAME`, an operator-only command that can change the case of an account name (#1380, thanks [@LukeHoersten](https://github.com/LukeHoersten)!)\n\n### Internal\n* Added caching for serialized messages (#1387)\n* Improved memory efficiency of line reading (#1231)\n\n## [2.4.0] - 2020-11-08\n\nWe're pleased to announce Oragono 2.4.0, a new stable release.\n\nThis release includes a number of exciting enhancements and fixes. Here are some highlights:\n\n* Support for migrating an Anope or Atheme database to Oragono (#1042)\n* A pluggable system for validating external IPs, e.g., via DNSBLs (#68, thanks [@moortens](https://github.com/moortens)!)\n* [draft/relaymsg](https://github.com/ircv3/ircv3-specifications/pull/417), a new draft extension simplifying bridging with other chat systems (thanks [@jlu5](https://github.com/jlu5)!)\n* New moderation tools: `+u` (\"auditorium\", #1300), `+U` (\"op-moderated\", #1178), `+M` (\"moderated-registered\", #1182, thanks [@ajaspers](https://github.com/ajaspers)!), and `+b m:` (an extban for muting users, #307)\n\nThis release includes changes to the config file format, including one breaking change: `roleplay.enabled` now defaults to false (the new recommended default) instead of true when unset. Other config changes are backwards compatible and do not require updating the file before upgrading.\n\nThis release includes a database change. If you have `datastore.autoupgrade` set to `true` in your configuration, it will be automatically applied when you restart Oragono. Otherwise, you can update the database manually by running `oragono upgradedb` (see the manual for complete instructions).\n\nMany thanks to [@ajaspers](https://github.com/ajaspers), [@jesopo](https://github.com/jesopo), [@moortens](https://github.com/moortens), and [@RunBarryRun](https://github.com/RunBarryRun) for contributing patches, to [@csmith](https://github.com/csmith) for contributing code reviews, to [@ajaspers](https://github.com/ajaspers), [@Amiga60077](https://github.com/Amiga60077), [@bogdomania](https://github.com/bogdomania), [@csmith](https://github.com/csmith), [@edk0](https://github.com/edk0), [@eskimo](https://github.com/eskimo), [@jlu5](https://github.com/jlu5), [@jwheare](https://github.com/jwheare), [@KoraggKnightWolf](https://github.com/KoraggKnightWolf), [@Mitaka8](https://github.com/Mitaka8), [@mogad0n](https://github.com/mogad0n), [@RyanSquared](https://github.com/RyanSquared), and [@vertisan](https://github.com/vertisan) for reporting issues and helping test, and to our translators for contributing translations.\n\n### Config changes\n* Added `server.ip-cloaking.enabled-for-always-on`, which generates a unique hostname for each always-on client. The recommended default value of this field is `true` (#1312)\n* Added `server.coerce-ident`; if this is set to a string value, all user/ident fields supplied by clients are ignored and replaced with this value. The recommended default value of this field is `~u`. This simplifies bans. (#1340)\n* Simplified the config file format for email verification into a new `accounts.nick-reservation.email-verification` section. The old format (`callbacks`) is still accepted (#1075)\n* The recommended value of `roleplay.enabled` is now `false`; this field now defaults to false when unset (#1240, #1271)\n* Added `server.relaymsg` section for configuring the new `draft/relaymsg` capability; added the new `relaymsg` operator capability for exercising it (#1119)\n* Added `allow-environment-overrides` config variable, allowing config options to be overridden by environment variables. See the manual for more details. (#1049, thanks [@csmith](https://github.com/csmith)!)\n* Added `server.ip-check-script` for configuring IP check plugins (#68, #1267, thanks [@moortens](https://github.com/moortens)!)\n* Added `max-concurrency` restriction to `accounts.auth-script` section. The recommended default value is `64` (`0` or unset disable the restriction) (#1267)\n* Added `accounts.registration.allow-before-connect`; this allows the use of the new `REGISTER` command before connecting to the server (#1075)\n* Added `hidden` option in operator blocks: if set to `true`, operator status is hidden from commands like `WHOIS` that would otherwise display it (#1194)\n* Added `accounts.nick-reservation.forbid-anonymous-nick-changes`, which forbids anonymous users from changing their nicknames after initially connecting (#1337, thanks [@Amiga60077](https://github.com/Amiga60077)!)\n* Added `channels.invite-expiration`, allowing invites to `+i` channels to expire after a given amount of time (#1171)\n\n### Security\n* Added `/NICKSERV CLIENTS LOGOUT` command for disconnecting clients connected to a user account (#1072, #1272, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Disallowed the use of service nicknames during roleplaying (#1240, thanks [@Mitaka8](https://github.com/Mitaka8)!)\n* Improved security properties of `INVITE` for invite-only channels, including an `UNINVITE` command (#1171)\n\n### Removed\n* Removed the request queue system for HostServ, i.e., the `REQUEST`, `APPROVE`, and `REJECT` subcommands of `HOSTSERV` (#1346)\n\n### Fixed\n* `PONG` is now sent with the server name as the first parameter, matching the behavior of other ircds (#1249, thanks [@jesopo](https://github.com/jesopo)!)\n* It was not possible to set or unset the `+T` no-CTCP user mode; this has been fixed (#1299, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Fixed edge cases with `/NICKSERV SAREGISTER` of confusable nicknames (#1322, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Fixed websocket listeners with proxy-before-TLS enabled closing on invalid PROXY lines (#1269, thanks [@RyanSquared](https://github.com/RyanSquared)!)\n* Fixed error responses and history for SANICK (#1277, #1278, thanks [@eskimo](https://github.com/eskimo)!)\n* Ensured that stored realnames of always-on clients are deleted during account unregistration (#1330)\n* Whitespace is now stripped from KLINEs (#1327, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Fixed incorrect `LUSERS` counts caused by KLINE (#1303, thanks [@mogad0n](https://github.com/mogad0n)!)\n* `CHATHISTORY` queries for invalid channels now get an empty batch instead of a `FAIL` (#1322)\n* `fakelag.messages-per-window = 0` no longer causes a panic (#861, thanks [@vertisan](https://github.com/vertisan)!)\n\n### Added\n* Added `oragono importdb` command for importing a converted Anope or Atheme database; see the manual for details (#1042)\n* Added support for the new [draft/relaymsg](https://github.com/ircv3/ircv3-specifications/pull/417) extension, which simplifies bridging IRC with other protocols relaymsg (#1119, thanks [@jlu5](https://github.com/jlu5)!)\n* Added `ip-check-script`, a scripting API for restricting access by client IP. We provide [oragono-dnsbl](https://github.com/oragono/oragono-dnsbl), an external script that can query DNSBLs for this purpose (#68, #1267, thanks [@moortens](https://github.com/moortens)!)\n* Added channel mode `+u`. This is an \"auditorium\" mode that prevents unprivileged users from seeing each other's `JOIN` and `PART` lines. It's useful for large public-announcement channels, possibly in conjunction with `+m` (#1300)\n* Added channel mode `+U`. This is an \"op-moderated\" mode; messages from unprivileged users are sent only to channel operators, who can then choose to grant them `+v`. (#1178)\n* Added a mute extban `+b m:`: users matching the ban expression (e.g., `+b m:*!*@j6dwi4vacx47y.irc`) will be able to join the channel, but will be unable to speak. (#307)\n* Added support for the new [draft/register](https://gist.github.com/edk0/bf3b50fc219fd1bed1aa15d98bfb6495) extension, which exposes a cleaner account registration API to clients (#1075, thanks [@edk0](https://github.com/edk0)!)\n* Added a `379 RPL_WHOISMODES` line to the `WHOIS` response, making it easier for operators to see other users' modes (#769, thanks [@Amiga60077](https://github.com/Amiga60077) and [@KoraggKnightWolf](https://github.com/KoraggKnightWolf)!)\n* Added `/CHANSERV DEOP` command for removing channel operator privileges (#361, thanks [@RunBarryRun](https://github.com/RunBarryRun)!)\n* Added `r` flag to `/WHO` responses for registered nicknames (#1366, thanks [@Amiga60077](https://github.com/Amiga60077)!)\n\n### Changed\n* Always-on clients now receive a user/ident of `~u` by default, instead of `~user`; this can be changed by setting the `coerce-ident` field (#1340)\n* `/NICKSERV SUSPEND` has been modified to take subcommands (`ADD`, `DEL`, and `LIST`); the `ADD` subcommand now accepts time duration and reason arguments. See `/msg NickServ HELP SUSPEND` for details. (#1274, thanks [@mogad0n](https://github.com/mogad0n)!)\n* Only the channel founder can kick the channel founder, regardless of either party's modes (#1262)\n* `/NICKSERV SESSIONS` is now `/NICKSERV CLIENTS LIST`, but the old command is still accepted (#1272, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Improved `SETNAME` behavior for legacy clients (#1358, thanks [@KoraggKnightWolf](https://github.com/KoraggKnightWolf)!)\n* Halfops can set the channel topic (#1306)\n* Full client certificates are now passed to auth scripts. This allows for more flexible checks on certificates, including verification against an internal CA (#414)\n\n### Internal\n* Added a logline for debugging client disconnections (#1293)\n* Renamed `conventional.yaml` to `traditional.yaml` (#1350)\n* Integration tests are now run during CI (#1279)\n\n\n## [2.3.0] - 2020-09-06\n\nWe're pleased to announce Oragono 2.3.0, a new stable release.\n\nThis release contains primarily bug fixes, but includes one notable feature enhancement: a change contributed by [@hhirtz](https://github.com/hhirtz) that updates the `draft/rename` specification to correspond to the new (soon-to-be) published draft.\n\nMany thanks to [@hhirtz](https://github.com/hhirtz) for contributing patches, to [@bogdomania](https://github.com/bogdomania), [@digitalcircuit](https://github.com/digitalcircuit), [@ivan-avalos](https://github.com/ivan-avalos), [@jesopo](https://github.com/jesopo), [@kylef](https://github.com/kylef), [@Mitaka8](https://github.com/Mitaka8), [@mogad0n](https://github.com/mogad0n), and [@ProgVal](https://github.com/ProgVal) for reporting issues and helping test, and to our translators for contributing translations.\n\nThis release includes no changes to the config file format or database changes.\n\n### Config changes\n* The recommended value of `lookup-hostnames` for configurations that cloak IPs (as has been the default since 2.1.0) is now `false` (#1228)\n\n### Security\n* Mitigated a potential DoS attack on websocket listeners (#1226)\n\n### Removed\n* Removed `/HOSTSERV OFFERLIST` and related commands; this functionality is superseded by IP cloaking (#1190)\n\n### Fixed\n* Fixed an edge case in handling no-op nick changes (#1242)\n* Fixed edge cases with users transitioning in and out of always-on status (#1218, #1219, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Fixed a race condition related to the registration timeout (#1225, thanks [@hhirtz](https://github.com/hhirtz)!)\n* Fixed incorrectly formatted account tags on some messages (#1254, thanks [@digitalcircuit](https://github.com/digitalcircuit)!)\n* Improved checks for invalid config files (#1244, thanks [@ivan-avalos](https://github.com/ivan-avalos)!)\n* Fixed messages to services and `*playback` not receiving echo-message when applicable (#1204, thanks [@kylef](https://github.com/kylef)!)\n* Fixed a help string (#1237, thanks [@Mitaka8](https://github.com/Mitaka8)!)\n\n### Changed\n* Updated `draft/rename` implementation to the latest draft (#1223, thanks [@hhirtz](https://github.com/hhirtz)!)\n\n### Internal\n* Official release builds now use Go 1.15 (#1195)\n* `/INFO` now includes the Go version (#1234)\n\n## [2.2.0] - 2020-07-26\n\nWe're pleased to announce Oragono 2.2.0, a new stable release.\n\nThis release contains several notable enhancements, as well as bug fixes:\n\n* Support for tracking seen/missed messages across multiple devices (#843)\n* WHOX support contributed by @jesopo (#938)\n* Authentication of users via external scripts (#1107)\n\nMany thanks to [@clukawski](https://github.com/clukawski) and [@jesopo](https://github.com/jesopo) for contributing patches, to [@ajaspers](https://github.com/ajaspers), [@bogdomania](https://github.com/bogdomania), [@csmith](https://github.com/csmith), [@daurnimator](https://github.com/daurnimator), [@emersonveenstra](https://github.com/emersonveenstra), [@eskil](https://github.com/eskil), [@eskimo](https://github.com/eskimo), Geo-, [@happyhater](https://github.com/happyhater), [@jesopo](https://github.com/jesopo), [@jwheare](https://github.com/jwheare), [@k4bek4be](https://github.com/k4bek4be), [@KoraggKnightWolf](https://github.com/KoraggKnightWolf), [@kylef](https://github.com/kylef), [@LukeHoersten](https://github.com/LukeHoersten), [@mogad0n](https://github.com/mogad0n), r3m, [@RyanSquared](https://github.com/RyanSquared), savoyard, and [@wrmsr](https://github.com/wrmsr) for reporting issues and helping test, and to our translators for contributing translations.\n\nThis release includes changes to the config file format, including one breaking change: `timeout` is no longer an acceptable value of `accounts.nick-reservation.method`. (If you were using it, we suggest `strict` as a replacement.) All other changes to the config file format are backwards compatible and do not require updating before restart.\n\nThis release includes a database change. If you have `datastore.autoupgrade` set to `true` in your configuration, it will be automatically applied when you restart Oragono. Otherwise, you can update the database manually by running `oragono upgradedb` (see the manual for complete instructions).\n\n### Removed\n* Timeout-based nickname enforcement has been removed. We recommend `strict` as the default enforcement method. Users who configured `timeout` for their account will be upgraded to `strict`. With `accounts.login-via-pass-command` enabled, clients lacking support for SASL can authenticate via the `PASS` (server password command) by sending `account_name:account_password` as the server password. (#1027)\n* Native support for LDAP has been removed. LDAP is now supported via the external [oragono-ldap](https://github.com/oragono/oragono-ldap) plugin; see its repository page for details. (#1142, #1107)\n\n### Config changes\n* Added `server.enforce-utf8`, controlling whether the server enforces that messages be valid UTF-8; a value of `true` for this is now the recommended default (#1151)\n* Added `history.tagmsg-storage` for configuring which TAGMSG are stored in history; if this is not configured, TAGMSG will not be stored (#1172)\n* All TLS certificate fingerprints in the config file are now named `certfp` instead of `fingerprint` (the old name of `fingerprint` is still accepted) (#1050, thanks [@RyanSquared](https://github.com/RyanSquared)!)\n* Added `accounts.auth-script` section for configuring external authentication scripts (#1107, thanks [@daurnimator](https://github.com/daurnimator)!)\n* Removed `accounts.ldap` section for configuring LDAP; LDAP is now available via the auth-script plugin interface (#1142)\n* Added `defcon` operator capability, allowing use of the new `/DEFCON` command (#328)\n* Default `awaylen`, `kicklen`, and `topiclen` limits now reflect the 512-character line limit (#1112, thanks [@k4bek4be](https://github.com/k4bek4be)!)\n* Added `extjwt` section for configuring the EXTJWT extension (#948, #1136)\n* `login-via-pass-command: true` is now a recommended default (#1186)\n\n### Added\n* Added support for [WHOX](https://github.com/ircv3/ircv3-specifications/issues/81), contributed by [@jesopo](https://github.com/jesopo) (#938, thanks!)\n* Added support for tracking missed messages across multiple devices; see the \"history\" section of the manual for details (#843, thanks [@jwheare](https://github.com/jwheare) and [@wrmsr](https://github.com/wrmsr)!)\n* Added `/NICKSERV SUSPEND` and `/NICKSERV UNSUSPEND` commands, allowing operators to suspend access to an abusive user account (#1135)\n* Added support for external authentication systems, via subprocess (\"auth-script\") invocation (#1107, thanks [@daurnimator](https://github.com/daurnimator)!)\n* Added the `/DEFCON` command, allowing operators to respond to spam or DoS attacks by disabling features at runtime without a rehash. (This feature requires that the operator have a newly defined capability, named `defcon`; this can be added to the appropriate oper blocks in the config file.) (#328, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Added support for the [EXTJWT](https://github.com/ircv3/ircv3-specifications/pull/341) draft extension, allowing Oragono to be integrated with other systems like Jitsi (#948, #1136)\n* Services (NickServ, ChanServ, etc.) now respond to CTCP VERSION messages (#1055, thanks [@jesopo](https://github.com/jesopo)!)\n* Added `BOT` ISUPPORT token, plus a `B` flag for bots in `352 RPL_WHOREPLY` (#1117)\n* Added support for the `+T` no-CTCP user mode (#1007, thanks [@clukawski](https://github.com/clukawski)!)\n* Added support for persisting the realname of always-on clients (#1065, thanks [@clukawski](https://github.com/clukawski)!)\n* Added a warning on incorrect arguments to `/NICKSERV REGISTER` (#1179, thanks [@LukeHoersten](https://github.com/LukeHoersten)!)\n* `/NICKSERV SET PASSWORD` now sends a warning (#1208)\n\n### Fixed\n* Fixed channels with only invisible users not being displayed in `/LIST` output (#1161, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Fixed `INVITE` not overriding a `+b` ban (#1168)\n* Fixed incorrect `CHGHOST` lines during authentication with `/NICKSERV IDENTIFY` under some circumstances (#1108, thanks Geo-!)\n* Fixed incorrect `CHGHOST` lines sent to users during connection registration (#1125, thanks [@jesopo](https://github.com/jesopo)!)\n* Fixed a number of issues affecting the `znc.in/playback` capability, in particular restoring compatibility with Palaver (#1205, thanks [@kylef](https://github.com/kylef)!)\n* Fixed interaction of auto-away with the regular `/AWAY` command (#1207)\n* Fixed an incorrect interaction between always-on and `/NS SAREGISTER` (#1216)\n* Fixed a race condition where nicknames of signed-out users could remain in the channel names list (#1166, thanks [@eskimo](https://github.com/eskimo)!)\n* Fixed the last line of the MOTD being truncated in the absence of a terminating `\\n` (#1167, thanks [@eskimo](https://github.com/eskimo)!)\n* Fixed `away-notify` lines not being sent on channel JOIN (#1198, thanks savoyard!)\n* Fixed incorrect source of some nickserv messages (#1185)\n* Fixed idle time being updated on non-PRIVMSG commands (thanks r3m and [@happyhater](https://github.com/happyhater)!)\n* Fixed `/NICKSERV UNREGISTER` and `/NICKSERV ERASE` not deleting stored user modes (#1157)\n\n### Security\n* Connections to an STS-only listener no longer reveal the exact server version or server creation time (#802, thanks [@csmith](https://github.com/csmith)!)\n\n### Changed\n* `/DLINE` now operates on individual client connections (#1135)\n* When using the multiclient feature, each client now has its own independent `MONITOR` list (#1053, thanks [@ajaspers](https://github.com/ajaspers)!)\n* `MONITOR L` now lists the nicknames in the form they were originally sent with `MONITOR +`, without casefolding (#1083)\n* We now send the traditional `445 ERR_SUMMONDISABLED` and `446 ERR_USERSDISABLED` in response to the `SUMMON` and `USERS` commands (#1078, thanks [@KoraggKnightWolf](https://github.com/KoraggKnightWolf)!)\n* RPL_ISUPPORT parameters with no values are now sent without an `=` (#1067, #1069, #1091, thanks [@KoraggKnightWolf](https://github.com/KoraggKnightWolf) and [@jesopo](https;//github.com/jesopo)!)\n* TAGMSG storage is now controlled via the `history.tagmsg-storage` config block (#1172)\n* `/NICKSERV CERT ADD` with no argument now adds the user's current TLS certificate fingerprint, when applicable (#1059, thanks [@emersonveenstra](https://github.com/emersonveenstra)!)\n\n### Internal\n* The config file containing recommended defaults is now named `default.yaml`, instead of `oragono.yaml` (#1130, thanks [@k4bek4be](https://github.com/k4bek4be)!)\n* The output of the `/INFO` command now includes the full git hash, when applicable (#1105)\n\n## [2.1.0] - 2020-06-01\nWe're pleased to announce Oragono 2.1.0, a new stable release.\n\nSince the release of 2.0.0 in March, a number of new communities and organizations have adopted Oragono as a communications tool. This new release incorporates many improvements and fixes derived from the experiences of real-world operators and end users. Highlights include:\n\n* Native support for websockets contributed by [@hhirtz](https://github.com/hhirtz), eliminating the need for a separate websockets-to-IRC proxy server\n* Tighter control over the relationship between account names and nicknames, eliminating the need for extbans\n* Support for sending account verification emails directly from Oragono, including DKIM signatures\n\nMany thanks to [@ajaspers](https://github.com/ajaspers) and [@hhirtz](https://github.com/hhirtz) for contributing patches, to [@ajaspers](https://github.com/ajaspers), [@eklitzke](https://github.com/eklitzke), and [@hhirtz](https://github.com/hhirtz) for contributing code reviews, to [@ajaspers](https://github.com/ajaspers), [@bogdomania](https://github.com/bogdomania), [@clukawski](https://github.com/clukawski), Csibesz, [@csmith](https://github.com/csmith), [@eklitzke](https://github.com/eklitzke), [@nxths](https://github.com/nxths), [@hhirtz](https://github.com/hhirtz), [@jesopo](https://github.com/jesopo), [@jlnt](https://github.com/jlnt), [@justjanne](https://github.com/justjanne), [@jwheare](https://github.com/jwheare), [@k4bek4be](https://github.com/k4bek4be), [@KoraggKnightWolf](https://github.com/KoraggKnightWolf), [@kula](https://github.com/kula), [@kylef](https://github.com/kylef), [@Mitaka8](https://github.com/Mitaka8), [@petteri](https://github.com/petteri), [@PizzaLover2007](https://github.com/PizzaLover2007), [@prawnsalad](https://github.com/prawnsalad), [@RyanSquared](https://github.com/RyanSquared), savoyard, and [@xPaw](https://github.com/xPaw) for reporting issues, and to [@bogdomania](https://github.com/bogdomania), [@boppy](https://github.com/boppy), Nuve, stickytoffeepuddingwithcaramel, and [@vegax87](https://github.com/vegax87) for contributing translations.\n\nThis release includes changes to the config file format, including one breaking change: support for `server.ip-cloaking.secret-environment-variable` has been removed. (See below for instructions on how to upgrade if you were using this feature.) All other changes to the config file format are backwards compatible and do not require updating before restart.\n\nThis release includes a database change. If you have `datastore.autoupgrade` set to `true` in your configuration, it will be automatically applied when you restart Oragono. Otherwise, you can update the database manually by running `oragono upgradedb` (see the manual for complete instructions).\n\nThis release includes a change to the MySQL schema. This change will be applied automatically when you restart Oragono. It is fully backwards compatible (i.e., if it is necessary for you to downgrade Oragono back to 2.0.0, it will not be necessary to downgrade the schema).\n\n### Config Changes\n* Added `websocket` attribute of individual listeners, and a new `server.websockets` section, for configuring websocket listeners. (#967, thanks [@hhirtz](https://github.com/hhirtz)!)\n* The recommended default is now to enable IP cloaking. In order to facilitate this, the cloaking secret is now stored in the database, instead of the config file. If you currently have a secret stored in the config file (as `server.ip-cloaking.secret`), it will be automatically imported into the database. If you were using `secret-environment-variable` to distribute your cloaking secret, you can import it manually after restart using the new `/HOSTSERV SETCLOAKSECRET` command. (#952)\n* Added `accounts.nick-reservation.force-nick-equals-account`, which ensures that logged-in clients are using their account name as their nickname. This eliminates the need for extbans and is a new recommended default. (#864)\n* Added `guest-nickname-format` and `force-guest-format`, which optionally add a prefix like `Guest-` to the nicknames of unauthenticated users (#749)\n* The recommended default is now to enable history storage and playback, with messages expiring after 7 days. (As with all changes in recommended config values, applying this to an existing config file requires explicitly changing the values.) (#1030)\n* Added `history.retention` section for controlling new features related to history storage and deletion (#858)\n* The recommended default for `accounts.multiclient.always-on` is now `opt-in` (#919)\n* Added `accounts.default-user-modes`; the recommended default is now to set `+i` on all users automatically (#942, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Added `channels.list-delay`, allowing restrictions on channel listings as a defence against spambots (#964)\n* Added `accounts.multiclient.auto-away`, allowing always-on clients to be automatically marked as away when all their sessions disconnect\n* Added `accounts.throttling` as a global throttle on the creation of new accounts (#913)\n* New format for `accounts.callbacks.mailto`, allowing direct email sending and DKIM signing (#921)\n* Added `accounts.login-via-pass-command`, providing a new mechanism for legacy clients to authenticate to accounts by sending `PASS account:password` pre-registration (#1020)\n* Added `datastore.mysql.socket-path`, allowing MySQL connections over UNIX domain sockets (#1016, thanks savoyard and [@ajaspers](https://github.com/ajaspers)!)\n* Added `roleplay` section for controlling the server's roleplay features (#865)\n* The recommended default for `accounts.nick-reservation.allow-custom-enforcement` is now `false` (#918)\n* The recommended default is now to allow PROXY and WEBIRC lines from localhost (#989, #1011)\n* Added `channels.registration.operator-only`, optionally restricting channel registrations to operators (#685)\n* Added `server.output-path` for controlling where the server writes output files (#1004)\n* Operator capability names prefixed with `oper:` have been normalized to remove the prefix (the old names are still respected in the config file) (#868)\n* The log category names `localconnect` and `localconnect-ip` have been changed to `connect` and `connect-ip` respectively (the old names are still respected in the config file) (#940)\n\n### Security\n* Fixed incorrect enforcement of ban/invite/exception masks under some circumstances (#983)\n* STATUSMSG were being stored in history without the relevant minimum-prefix information, so they could be replayed to unprivileged users. This was fixed by not storing them at all. (#959, thanks [@prawnsalad](https://github.com/prawnsalad)!)\n* Fixed invisible users not being hidden from `WHO *` queries (#991, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Restricted nicknames of some additional common services: `OperServ`, `BotServ`, `MemoServ`, and `Global` (#1080, thanks [@KoraggKnightWolf](https://github.com/KoraggKnightWolf)!)\n\n### Fixed\n* Fixed incorrect rejection of `draft/multiline` messages containing blank lines (#1005, thanks [@jwheare](https://github.com/jwheare)!)\n* Fixed roleplay commands, which were completely broken from v1.1.0 through v2.0.0 (#865, thanks [@petteri](https://github.com/petteri) and [@Mitaka8](https://github.com/Mitaka8)!)\n* Fixed `/SAMODE` applying user mode changes to the operator instead of the target user (#866, thanks [@csmith](https://github.com/csmith)!)\n* Fixed some channels not being unregistered during account unregistration (#889)\n* Fixed `/NICKSERV SET` and related commands being unavailable when account registration is disabled (#922, thanks [@PizzaLover2007](https://github.com/PizzaLover2007)!)\n* Fixed `TAGMSG` not being replayed correctly in history (#1044)\n* Fixed incorrect `401 ERR_NOSUCHNICK` responses on `TAGMSG` sent to a service (#1051, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Fixed `301 RPL_AWAY` not being sent in `WHOIS` responses when applicable (#850)\n* `/OPER` with no password no longer disconnects the client (#951)\n* Fixed failure to send extended-join responses after account unregistration (#933, thanks [@jesopo](https://github.com/jesopo)!)\n* Improved validation of channel keys (#1021, thanks [@kylef](https://github.com/kylef)!)\n* Fixed labeling of `421 ERR_UNKNOWNCOMMAND` responses (#994, thanks [@k4bek4be](https://github.com/k4bek4be)!)\n* Fixed incorrect parsing of ident protocol responses (#1002, thanks [@justjanne](https://github.com/justjanne)!)\n* Fixed registration completing after `NICK` and an ident response, without waiting for `USER` (#1057, thanks [@KoraggKnightWolf](https://github.com/KoraggKnightWolf)!)\n* Fixed messages rejected by the `+R` mode being stored in history (#1061, thanks [@KoraggKnightWolf](https://github.com/KoraggKnightWolf)!)\n* Fixed redundant `/INVITE` commands not sending `443 ERR_USERONCHANNEL` (#842, thanks [@hhirtz](https://github.com/hhirtz)!)\n* Fixed `/NICKSERV REGISTER` response displaying `mailto:` out of context (#985, thanks [@eklitzke](https://github.com/eklitzke)!)\n* Fixed nickname changes not sending `731 RPL_MONOFFLINE` when appropriate (#1076, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Fixed incorrect MONITOR responses in some cases (#1086, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Fixed HostServ approval and rejection notices being sent from the wrong source (#805)\n* Error messages for invalid TLS certificate/key pairs are now more informative (#982)\n* Fixed error message when attempting to attach a plaintext session to an always-on client (#955, thanks [@bogdomania](https://github.com/bogdomania) and [@xPaw](https://github.com/xPaw)!)\n* Increased the TLS handshake timeout, increasing reliability under high CPU contention (#894)\n* Fixed `CHANMODES` ISUPPORT token (#408, #874, thanks [@hhirtz](https://github.com/hhirtz)!)\n* Fixed `002 RPL_MYINFO` parameters (#1058, thanks [@KoraggKnightWolf](https://github.com/KoraggKnightWolf)!)\n* Fixed incorrect parameter limit for `MONITOR` in the `TARGMAX` isupport token (#1090, thanks [@KoraggKnightWolf](https://github.com/KoraggKnightWolf)!)\n* Fixed edge cases in handling of the `+k` channel mode parameter (#874, thanks [@hhirtz](https://github.com/hhirtz)!)\n* `account-notify` lines are now part of the labeled-response batch when applicable (#1018)\n* Fixed incorrect help description of channel mode `+R` (#930, thanks [@PizzaLover2007](https://github.com/PizzaLover2007)!)\n* Fixed `255 RPL_LUSERME` response to indicate that the number of federated peer servers is 0 (#846, thanks [@RyanSquared](https://github.com/RyanSquared)!)\n\n### Changed\n* Account names are now permanent identifiers; they cannot be re-registered after unregistration, and applicable nickname protections remain in force. (#793)\n* User modes of always-on clients now persist across server restarts (#819)\n* Registered channels with no members remain present on the server, including their in-memory history messages when applicable (#704, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Updated the [setname](https://ircv3.net/specs/extensions/setname) IRCv3 capability to its ratified version (#1001)\n* `/CHANSERV AMODE` now takes immediate effect (#729)\n* The channel founder can now take any action that would require channel privileges without actually having the `+q` mode (#950, #998)\n* Account unregistration now always disconnects the client (#1028)\n* Fakelag is now temporarily disabled during the sending of a `draft/multiline` message batch (#817)\n* Failed attempts to join a `+R` channel now send `477 ERR_NEEDREGGEDNICK` (#936, thanks [@PizzaLover2007](https://github.com/PizzaLover2007), [@jesopo](https://github.com/jesopo)!)\n* `353 RPL_NAMREPLY` now always uses a trailing parameter, for compatibility with incorrect client implementations (#854, #862)\n* Channels with persistent history can no longer be renamed with `/RENAME` (#827)\n* The self-signed certificate generation command `oragono mkcerts` now generates a 2048-bit RSA certificate, instead of a NIST P-521 ECDSA certificate (#898)\n* Cleaned up compatibility with an obsolete WEBIRC escaping convention (#869)\n* The cloak secret is now stored in the database, so it can no longer be rotated by changing `server.ip-cloaking.secret`. To rotate the secret, use the new `/HOSTSERV SETCLOAKSECRET` command. (#952)\n\n### Added\n* Added native support for websockets (#967, thanks [@hhirtz](https://github.com/hhirtz)!)\n* Added support for sending verification emails directly (i.e., without a MTA/smarthost), including DKIM signing (#920, #921)\n* Added `/NICKSERV LIST` and `/CHANSERV LIST`, allowing operators to list registered nicknames and channels (#974, thanks [@ajaspers](https://github.com/ajaspers)!)\n* Added auto-away feature for marking always-on clients away when all their sessions are disconnected; see `accounts.multiclient.auto-away` and `/NICKSERV HELP SET` for more information (#824)\n* Added `/HISTSERV PLAY`, which plays back history messages as NOTICEs from the `HistServ` service (#383, thanks [@nxths](https://github.com/nxths)!)\n* Added `/HISTSERV DELETE` for deleting history messages (see the config option `history.retention.allow-individual-delete`) (#858)\n* Added `/HISTSERV FORGET` for deleting all history messages associated with an account (see the config option `history.retention.enable-account-indexing`) (#858)\n* Added `/HISTSERV EXPORT` for exporting all history messages associated with an account as JSON. This can be used at the user's request for regulatory compliance reasons (see the config option `history.retention.enable-account-indexing`) (#858)\n* Added support for logging legacy clients into accounts via the `PASS` command, with the [account:password](https://freenode.net/kb/answer/registration#logging-in) syntax used by Freenode. To enable this feature, set `accounts.login-via-pass-command` to `true`. (#1020, thanks [@jlnt](https://github.com/jlnt)!)\n* Added `/NICKSERV ERASE` as an escape hatch for operators, allowing an account to be erased and re-registered (#793)\n* Added support for playing back `MODE` and `TOPIC` messages in history (#532)\n* Added `conventional.yaml`, a version of the config file that provides a more traditional IRC experience. We recommend a config file based on `oragono.yaml` for production networks, and one based on `conventional.yaml` for IRCv3 conformance testing. (#918)\n* Added an optional global throttle on the creation of new accounts (#913)\n* Added support for restricting `/LIST` responses sent to anonymous clients (#964)\n* Added support for the Plan 9 operating system and its derivatives, including testing on 9front (#1025, thanks [@clukawski](https://github.com/clukawski)!)\n\n### Removed\n* Removed support for colored log output (#940, #939)\n* Removed support for distributing the cloaking secret via environment variables (#952)\n\n### Internal\n* `make build` now includes an abbreviated git hash in the `002 RPL_YOURHOST` and `004 RPL_MYINFO` version strings, when applicable (#1031)\n* Official releases no longer contain the git hash, only the revision tag (#1031)\n* Official releases are now built with `-trimpath` (#901)\n\n## [2.0.0] - 2020-03-08\nWe're pleased to announce Oragono 2.0.0, a major update with a wide range of enhancements and fixes. Highlights include:\n\n* Support for storing chat history in a MySQL backend\n* Full \"bouncer\" functionality, including \"always-on\" clients that remain present on the server even when disconnected\n* LDAP support contributed by [@mattouille](https://github.com/mattouille)\n* Support for the ratified [labeled-response](https://ircv3.net/specs/extensions/labeled-response.html) IRCv3 capability\n* Enhanced support for Kubernetes\n* Many new service commands, improving management of client certificates, vhosts, and channel ownership\n\nMany thanks to [@csmith](https://github.com/csmith), [@mattouille](https://github.com/mattouille), and [@xPaw](https://github.com/xPaw) for contributing patches, to [@csmith](https://github.com/csmith) and [@wrmsr](https://github.com/wrmsr) for contributing code reviews, to [@bogdomania](https://github.com/bogdomania), [@brenns10](https://github.com/brenns10), [@daurnimator](https://github.com/daurnimator), [@ekianjo](https://github.com/ekianjo), horseface, [@ivucica](https://github.com/ivucica), [@jesopo](https://github.com/jesopo), [@jwheare](https://github.com/jwheare), KoDi, lover, [@notbandali](https://github.com/notbandali), [@poVoq](https://github.com/poVoq), [@TETYYS](https://github.com/TETYYS), and [@zaher](https://github.com/zaher) for reporting issues, and to [@bogdomania](https://github.com/bogdomania) and Nuve for contributing translations.\n\nThis release includes changes to the config file format, including two breaking changes:\n\n1. Backwards compatibility with the old `server.listen` format for configuring listeners has been removed; you must now use the `server.listeners` format that was introduced in 1.2.0.\n2. The two sections `server.connection-limits` and `server.connection-throttling` have been consolidated into one new section, `server.ip-limits`.\n\nOther changes to the config file format are backwards compatible and do not require updating before restart. To minimize potential downtime, we suggest the following workflow:\n\n1. Without upgrading your `oragono` binary, edit your config file to add new `server.listeners` and `server.ip-limits` sections, based on the example config file\n2. Rehash your server, confirming that the new config file is valid for for the previous version of the server\n3. Upgrade your `oragono` binary to the new 2.0.x version and restart your server\n4. Once your deployment is stable on 2.0.x, delete the old `server.listen`, `server.connection-limits`, and `server.connection-throttling` sections from your config, and rehash your server to confirm\n\nThis release includes a database change. If you have `datastore.autoupgrade` set to `true` in your configuration, it will be automatically applied when you restart Oragono. Otherwise, you can update the database manually by running `oragono upgradedb` (see the manual for complete instructions).\n\n### Config Changes\n* Desupported `server.listen` in favor of `server.listeners`, a breaking change (#794)\n* Desupported `server.connection-limits` and `server.connection-throttling` in favor of `server.ip-limits`, a breaking change (#646)\n* The recommended default is now to allow plaintext only on loopback interfaces (#801)\n* Added `server.casemapping` option to control which Unicode nicknames and channels are allowed (#693)\n* Added `server.lookup-hostnames` and `server.forward-confirm-hostnames` options to control hostname lookup (#688)\n* Added new `limits.multiline` section to control the new `draft/multiline` capability\n* Added sections for enabling the optional MySQL history storage backend: `datastore.mysql` for connecting to the server and `history.persistent` for controlling which messages are stored\n* Added `history.restrictions` for preventing people from retrieving arbitrarily old history messages\n* Added `history.znc-maxmessages`, allowing a higher history replay limit for bouncer emulation relative to CHATHISTORY\n* Added `accounts.vhosts.offer-list`, allowing users to take pre-approved vhosts without operator approval (#737)\n* Renamed `accounts.bouncer` to `accounts.multiclient` (the old name still works) (#787)\n* New recommended values of `server.max-sendq`, `server.ip-cloaking.num-bits`, `accounts.registration.bcrypt-cost`, `accounts.nick-reservation.enabled` (now true), `accounts.multiclient.allowed-by-default` (now true)\n* Added `server.ip-cloaking.secret-environment-variable`, allowing the cloaking secret to be deployed via an environment variable for use in Kubernetes (#741, thanks [@daurnimator](https://github.com/daurnimator)!)\n\n### Security\n* Added forward confirmation of reverse DNS lookups for hostnames: to enable this, set `server.forward-confirm-hostnames` to true (#688)\n* Added protection against confusable channel names (#581)\n* Fixed cases where Tor users could receive CTCP messages, contrary to expectations (#752, #753)\n* Fixed `NS INFO` displaying the local timezone (#710)\n* Fixed `accounts.authentication-enabled` failing to disable the `NS IDENTIFY` command (#721)\n\n### Added\n* Added support for persistent history storage in MySQL (#348)\n* Added support for \"always-on\" clients that remain present on the server even when disconnected (#348, #701)\n* Added support for LDAP (#690, thanks [@mattouille](https://github.com/mattouille), [@ivucica](https://github.com/ivucica), and [@mabgnu](https://github.com/mabgnu)!)\n* Added support for the new [draft/multiline](https://github.com/ircv3/ircv3-specifications/pull/398) specification (#670, thanks [@jwheare](https://github.com/jwheare) and [@jesopo](https://github.com/jesopo)!)\n* Added new modes for Unicode characters in nicknames and channel names: ASCII-only and \"permissive\" (allowing emoji) (#693)\n* Added support for plaintext PROXY lines ahead of a TLS handshake, improving compatibility with some Kubernetes load balancers (#561, thanks [@RyanSquared](https://github.com/RyanSquared) and [@daurnimator](https://github.com/daurnimator)!)\n* Added support for authenticating operators by TLS client certificates, and automatically applying operator privileges on login (#696, thanks [@RyanSquared](https://github.com/RyanSquared)!)\n* Added `/DEOPER` command to remove operator privileges (#549, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Added `/CHANSERV TRANSFER`, allowing transfers of channel ownership (#684)\n* Added `/NICKSERV CERT`, allowing users to manage their authorized client certificates (#530)\n* Added `/HOSTSERV TAKE`, allowing users to take pre-approved vhosts without operator approval (#737)\n* Added support for configuring connection limits and throttling for individual CIDRs (#646, thanks KoDi!)\n* Added `/CHANSERV PURGE`, allowing server administrators to shut down channels (#683)\n* Added `/CHANSERV CLEAR`, allowing channel founders to reset stored bans and privileges (#692)\n* Added `/CHANSERV SET`, allowing channel founders to disable channel history (#379)\n* Added account preference `AUTOREPLAY-JOINS`, allowing greater control over when joins and parts appear in history replay (#616, thanks [@zaher](https://github.com/zaher)!)\n* Added `/DEBUG CRASHSERVER` command (#791)\n* `znc.in/playback` now supports nicknames as targets (#830)\n* Added channel mode `+C` to suppress CTCP messages to a channel (#756)\n* Added some missing snomasks for events related to accounts and vhosts (`+s v` to enable vhost snomasks) (#347, #103)\n\n### Changed\n* Updated CHATHISTORY support to the [latest draft](https://github.com/ircv3/ircv3-specifications/pull/393) (#621, thanks [@prawnsalad](https://github.com/prawnsalad)!)\n* Updated to the ratified [labeled-response](https://ircv3.net/specs/extensions/labeled-response.html) specification from the earlier `draft/labeled-response-0.2` (#757)\n* `/HISTORY` now defaults to returning 100 messages, and also takes time durations like `1h` as arguments (#621, thanks lover!)\n* D-Lines are no longer enforced against loopback IPs (#671)\n* Password length limit was reduced from 600 bytes to 300 bytes (#775)\n\n### Fixed\n* Fixed a bug where `znc.in/playback` commands would play every channel, regardless of the target parameter (#760, thanks [@brenns10](https://github.com/brenns10)!)\n* Fixed `MODE -o` not removing all operator permissions (#725, #549, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Fixed client-only tags being relayed in direct messages to users without the `message-tags` capability (#754, thanks [@jesopo](https://github.com/jesopo)!)\n* Fixed the channel user limit (the `+l` mode) not persisting after server restart (#705, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Fixed response to `JOIN` lines with parameters ending in a comma (#679, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Fixed confusable protection not being removed from unregistered accounts (#745, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Fixed rehash not enabling nickname reservation, vhosts, or history under some circumstances (#702, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Fixed responses to the `USERHOST` command (#682)\n* Fixed bad results when running `oragono upgradedb` against a missing database file (#715, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Fixed confusing `NS GHOST` behavior when nickname reservation is disabled (#727, thanks horseface!)\n* Fixed validation of authzid during SASL (#716, thanks [@xPaw](https://github.com/xPaw)!)\n* Non-ASCII characters are proactively disallowed in `ip-cloaking.netname` (#713, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Limited the time during which `znc.in/playback` affects channel joins (#829)\n\n### Removed\n* Removed `oragono.io/maxline-2` capability in favor of the new `draft/multiline` capability (#670, #752)\n* Removed `oragono.io/bnc` capability (multiclient functionality is now controllable only via server config and `/NS SET MULTICLIENT`) (#787)\n* Removed `draft/acc` capability and related `ACC` command (#723)\n\n### Internal Notes\n* Updated to Go 1.14 and modules, simplifying the build process (#699)\n\n## [1.2.0] - 2019-11-17\nWe're pleased to announce Oragono 1.2.0. This version contains bug fixes and minor improvements.\n\nMany thanks to [@bogdomania](https://github.com/bogdomania), [@csmith](https://github.com/csmith), [@edmund-huber](https://github.com/edmund-huber), [@jesopo](https://github.com/jesopo), [@jwheare](https://github.com/jwheare), [@poVoq](https://github.com/oragono/oragono/issues/624), [@prawnsalad](https://github.com/prawnsalad), and stealthgin for reporting issues and contributing code reviews, and also to [@bogdomania](https://github.com/bogdomania), Forbidden (cptbl00dra1n), Nuve, [@streaps](https://github.com/streaps), and UnLokitoFeliz for contributing translations.\n\nThis release includes a change to the config file format: the old `server.listen` format for configuring listeners has been replaced by a new `server.listeners` format. See the bundled `oragono.yaml` configuration file for a commented example. For now, Oragono maintains backwards compatibility with the old format. To minimize potential downtime, we recommend the following workflow:\n\n1. Without rewriting your config file, upgrade your `oragono` binary to the new 1.2.x version and restart your server\n2. Rewrite your configuration file to use the new `server.listeners` format\n3. Rehash your server, confirming that the rewritten config file is valid and correct\n\nThis release includes a database change. If you have `datastore.autoupgrade` set to `true` in your configuration, it will be automatically applied when you restart Oragono. Otherwise, you can update the database manually by running `oragono upgradedb` (see the manual for complete instructions).\n\n### Config Changes\n* Replaced `server.listen` section with `server.listeners`; see `oragono.yaml` for a commented example (#565)\n* Added `history.autoresize_window` for automatically resizing history buffers (#349)\n\n### Added\n* Added STS-only listeners; you can configure port 6667 so that it \"redirects\" clients to TLS on port 6697. See the manual for details. (#448)\n* Added the `CHANLIMIT` ISUPPORT token (#625, thanks [@poVoq](https://github.com/oragono/oragono/issues/624)!)\n* Added ban creator and creation time to banlist output (#644, thanks stealthgin!)\n\n### Changed\n* Upgraded to the new `draft/labeled-response-0.2` capability (#555)\n* `oragono mkcerts` no longer overwrites existing certificate files (#622, thanks [@poVoq](https://github.com/oragono/oragono/issues/624)!)\n* Allowed Tor and non-Tor connections to attach to the same nickname via bouncer functionality (#632)\n\n### Fixed\n* Fixed `CAP LS 302` response being potentially truncated (#594, #661)\n* Fixed redundant output to some `MODE` commands (#649)\n* Improved display of replies to `/msg NickServ verify` in some clients (#567, thanks [@edmund-huber](https://github.com/edmund-huber)!)\n* Improved display of NickServ timeout warnings in some clients (#572, thanks [@bogdomania](https://github.com/bogdomania)!)\n* `LUSERS` output is now sent at the end of connection registration (#526)\n* Fixed operators not being able to `WHOIS` some Unicode nicknames (#331, thanks [@bogdomania](https://github.com/bogdomania)!)\n* Fixed `RESUME` not clearing the `BRB` reason (#592, thanks [@jesopo](https://github.com/jesopo)!)\n* Fixed an edge case where the `BRB` timestamp wasn't reset correctly (#642)\n* Fixed behavior of `SAMODE` issued against a different user (#585)\n* Fixed a false-positive error logline (#601)\n* `oragono.io/bnc` is no longer advertised when disabled in the config (#595)\n* Made the connection limiter and throttler more resilient against the failure to whitelist a reverse proxy IP (#197, thanks [@prawnsalad](https://github.com/prawnsalad)!)\n\n### Internal Notes\n* Official builds now use Go 1.13, which includes native TLS 1.3 support (#626)\n* Minor performance improvements (#640, #615)\n\n## [1.1.1] - 2019-07-21\nOragono 1.1.1 is a bugfix release for flaws in message handling, including one with security implications.\n\nMany thanks to [@streaps](https://github.com/streaps) for reporting issues.\n\n### Upgrade notes\n\nThis release does not change the database or configuration file format.\n\n### Security\n* Previous releases of Oragono would incorrectly relay chat messages containing the `\\r` byte. An attacker could use this to spoof protocol messages from the server (depending on the implementation of the victim's client). This has been fixed. (#610)\n\n### Fixed\n* Fixed incorrect rejection of messages with multiple spaces (#602, thanks [@streaps](https://github.com/streaps)!)\n\n## [1.1.0] - 2019-06-27\nWe're pleased to announce Oragono version 1.1.0. This version has a number of exciting improvements, including:\n\n* Simplified commands for registering new accounts with NickServ.\n* Support for IP cloaking.\n* Support for attaching multiple clients to the same nickname.\n* Support for the newly ratified [message tags](https://ircv3.net/specs/extensions/message-tags.html) and [message ID](https://ircv3.net/specs/extensions/message-ids.html) IRCv3 specifications; client developers are invited to use Oragono as a reference when implementing these specifications.\n* Support for running Oragono as a Tor hidden service.\n\nMany thanks to [@Ascrod](https://github.com/Ascrod), [@amyspark](https://github.com/amyspark), [@bogdomania](https://github.com/bogdomania), [@csmith](https://github.com/csmith), [@jesopo](https://github.com/jesopo), [@jwheare](https://github.com/jwheare), lover, and [@transitracer](https://github.com/oragono/oragono/issues/456) for reporting issues and contributing patches, and also to [@bogdomania](https://github.com/bogdomania), Elvedin Hušić, Nuve, and [@streaps](https://github.com/streaps) for contributing translations.\n\n### Upgrade notes\n\nThis release includes a database change. If you have `datastore.autoupgrade` set to `true` in your configuration, it will be automatically applied when you restart Oragono. Otherwise, you can update the database manually by running `oragono upgradedb` (see the manual for complete instructions).\n\nNo changes to your configuration file should be required for this upgrade. However, updating the file is necessary to enable some new functionality, as described below.\n\n### Config changes\n* `tor-listeners` section added for configuring listeners for use with Tor.\n* `compatibility` section added for toggling compatibility behaviors for legacy clients.\n* `ip-cloaking` section added for configuring cloaking.\n* `bouncer` section added for configuring bouncer-like features (in particular, whether multiple clients can use the same nickname).\n* `check-ident` now has recommended value `false`.\n* `nick-reservation.method` now has recommended value \"strict\"`.\n* `fakelag.enabled` now has recommended value `true`.\n* `limits.linelen.tags` removed due to ratification of the [message-tags spec](https://ircv3.net/specs/extensions/message-tags.html), which fixes the maximum tags length at 8191 bytes.\n* `limits.registration-messages` added to restrict how many messages a user can send to the server during connection registration (while connecting to the server).\n* `channels.operator-only-creation` added to optionally restrict creation of new channels to ircops (#537).\n\n### Security\n* Users can no longer impersonate network services like ChanServ by using confusing nicks like \"ChɑnServ\" (#519, thanks [@csmith](https://github.com/csmith)!).\n* Closed several loopholes in confusable nick detection (#562, #564, #570, thanks lover!)\n* Secret channels (mode `+s`) now act more secret (#380, thanks [@csmith](https://github.com/csmith)!).\n* The `+R` (registered-only) mode now prevents unregistered users from joining the channel, not just from speaking (#463, thanks [@bogdomania](https://github.com/bogdomania)!).\n* Limited how many messages clients can send during connection registration to mitigate potential DoS attacks (#505).\n* Attempting to reauthenticate with SASL now fails with `907 ERR_SASLALREADY` (#476).\n\n### Fixed\n* Fixed `/ISON` command reporting users as always being online (#479).\n* Fixed clients who negotiated CAP version 302 or higher not receiving cap-notify messages (#464).\n* We now treat channel privileges such as halfop more consistently (#400).\n* Fixed a bug where clients could receive message tags they hadn't enabled (#434).\n* When replaying history, messages now have more consistent IDs and timestamps\n* IDs and timestamps are now applied more consistently to messages (#388, #477, #483).\n* Client-to-client tags are now stored and replayed in message history (#437).\n* Fixed various error numerics that were being sent with incorrect parameters (#425, thanks [@Ascrod](https://github.com/Ascrod)!).\n* Fixed STATUSMSG not adding the correct prefix to the channel when relaying the message (#467).\n* Fixed `/RENAME` command not correctly renaming the channel for some users (#300, thanks [@jesopo](https://github.com/jesopo)!).\n* History playback is now batched when applicable (#456, thanks [@transitracer](https://github.com/oragono/oragono/issues/456)!).\n* Notices from NickServ/ChanServ/etc should display better in some clients (#496, thanks [@jwheare](https://github.com/jwheare)!).\n* Fixed nickname timer warnings not displaying correctly sometimes (#449, thanks [@bogdomania](https://github.com/bogdomania)!).\n* When history playback is disabled, the `/HISTORY` command now says so instead of silently failing (#429, thanks [@bogdomania](https://github.com/bogdomania)!).\n* The `/HOSTSERV ON/OFF` commands now tell you when you don't have a vhost (#404, thanks [@bogdomania](https://github.com/bogdomania)!).\n* When operators use the `/SANICK` command, the snomask now says which operator did it instead of saying the target changed their nickname themselves (#360, thanks [@bogdomania](https://github.com/bogdomania)!).\n* History playback now includes messages that the user sent themselves (especially useful with the new bouncer-like capabilities) (#487).\n\n### Added\n* IP cloaking is now supported (see the manual for details) (#108).\n* Users can now attach multiple clients to the same nickname (see the manual for details) (#403).\n* Oragono can now be used as a Tor hidden service (see the manual for details) (#369).\n* The `znc.in/playback` capability is now supported, which can automate history playback for clients that support it (#486).\n* User preference system controlling various behaviors (`/msg NickServ help set` for details) (#466).\n* Support for the [draft/event-playback](https://github.com/DanielOaks/ircv3-specifications/blob/master+event-playback/extensions/batch/history.md) spec (#457).\n* The `TAGMSG` and `NICK` messages are now replayable in history (#457).\n* Added the draft IRCv3 [`SETNAME` command](https://ircv3.net/specs/extensions/setname) for changing your realname (#372).\n* Added new Bosnian (bs-BA) translation (thanks to Elvedin Hušić!).\n* Added new German (de-DE) translation (thanks to streaps!).\n\n### Changed\n* Registering an account with NickServ is now `/msg NickServ register <password>`, which registers the current nickname as an account, matching other services (#410).\n* Added a compatibility hack to make SASL work with ZNC 1.6.x (#261).\n* We now support the ratified [message-tags](https://ircv3.net/specs/extensions/message-tags.html) spec, replacing `draft/message-tags-0.2`.\n* We now support the ratified [message IDs](https://ircv3.net/specs/extensions/message-ids.html) spec, replacing `draft/msgid`.\n* The [`oragono.io/maxline-2`](https://oragono.io/maxline-2) capability has replaced `oragono.io/maxline`, the new version now working alongside the ratified message-tags spec (#433).\n* We now support [`draft/resume-0.5`](https://github.com/ircv3/ircv3-specifications/pull/306) and the associated `BRB` command, replacing `draft/resume-0.3`.\n* Upgraded support for the `/RENAME` command to the [latest draft of the specification](https://github.com/ircv3/ircv3-specifications/pull/308).\n* Upgraded support for the `/ACC` command to the [latest draft of the specification](https://github.com/DanielOaks/ircv3-specifications/blob/register-and-verify/extensions/acc-core.md) (#453, #455).\n* Removed the `+a` away mode as no other servers use it (#468, thanks [@jesopo](https://github.com/jesopo) and [@jwheare](https://github.com/jwheare)!).\n* Forcing trailing parameters for legacy compatibility can now be disabled in config (#479).\n* `autoreplay-on-join` no longer replays `JOIN` and `PART` lines by default (#474, thanks [@amyspark](https://github.com/amyspark)!).\n* snomasks are no longer sent for unregistered clients (#362, thanks [@bogdomania](https://github.com/bogdomania)!).\n* `WHOIS` responses no longer include the `690 RPL_WHOISLANGUAGE` numeric, as it doesn't show anything useful to other users (#516).\n* `ISON` now reports services (ChanServ/NickServ/etc) as online (#488).\n* All times are now reported in UTC (#480).\n* `NICKSERV ENFORCE` is deprecated in favor of the new `NICKSERV SET ENFORCE` (the old syntax is still available as an alias).\n* The `WHO` command is now treated like `PONG` in that it doesn't count as user activity, since client software often uses it automatically (#485).\n* The `NAMES` command now only returns results for the first given channel (#534).\n* Updated French (fr-FR) translation (thanks to Nuve!).\n* Updated Română (ro-RO) translation (thanks to [@bogdomania](https://github.com/bogdomania)!).\n\n### Internal Notes\n* Building Oragono is now easier (#409).\n* Official builds now use Go 1.12 (#406).\n* Our message building and parsing code is slightly faster now (#387).\n* Added the [`oragono.io/nope`](https://oragono.io/nope) capability to encourage clients to request capabilities safely (#511).\n* Made some previously untranslatable strings translatable (#407).\n* Fixed portability issues with 32-bit architectures (#527).\n\n\n## [1.0.0] - 2019-02-24\nWe've finally made it to v1.0.0! With this release, our list of need-to-haves is rounded out, and we reckon the software's ready for production use in smaller networks. slingamn and I have been working with our contributors and translators to prepare a cracker of a release. Thanks to [@csmith](https://github.com/csmith) our [Docker builds](https://hub.docker.com/r/oragono/oragono/) have been updated, with automatic rebuilds as we develop the software. Thanks to [@bogdomania](https://github.com/bogdomania) our translation workflow has been improved a lot.\n\nHighlights include:\n\n* Optional support for storing and replaying message history with the [`draft/resume-0.3` capability](https://github.com/ircv3/ircv3-specifications/pull/306), the draft IRCv3 `CHATHISTORY` command, and a custom `HISTORY` command.\n* Better detection of confusing nick/account/channel names.\n* User-customizable nickname protection methods.\n* An account-only mode in which all clients must have an account and login to it (using SASL) before they can join the server.\n\nThanks to Mauropek, [@modinfo](https://github.com/modinfo), [@bogdomania](https://github.com/bogdomania), [@Shillos](https://github.com/Shillos), Tony Chen, and Remini for adding new translations. Thanks to [@Ascrod](https://github.com/Ascrod), [@bogdomania](https://github.com/bogdomania), [@csmith](https://github.com/csmith), [@jesopo](https://github.com/jesopo), [@jwheare](https://github.com/jwheare), [@remini1998](https://github.com/remini1998), [@enckse](https://github.com/enckse), and [@iNecas](https://github.com/iNecas) for finding bugs and/or writing new features.\n\n### Config Changes\n* `allow-custom-enforcement` key added under `accounts`.\n* `allow-plaintext-resume` key added under `server`.\n* `history` section added.\n* `identlen` key added under `limits`.\n* `login-throttling` section added under `accounts`.\n* `max-channels-per-account` key added under `channels.registration` (limiting the number of channels that can be registered).\n* `max-channels-per-client` key added under `channels` (limiting the number of channels that can be joined).\n* `method` key now under `accounts` now allows the value `\"optional\"`.\n* Exemption lists now accept `localhost` as a value, meaning any loopback IPV4, loopback IPV6, or unix domain address.\n* Logging type `server` has been added, replacing the `startup`, `rehash`, and `shutdown` types.\n* The default logging configuration now logs to stderr only, rather than to both stderr and a file.\n* We no longer listen on port `6668` by default (this fixes Docker installs).\n\n### Security\n* Added a SASL-only mode in which all clients must authenticate with SASL.\n* Added login throttling as a hardening measure against password guessing.\n* Configurable limits are imposed on how many channels clients can join or register.\n\n### Added\n* Added automagic datastore creation on `oragono run`.\n* Added detection and prevention of confusing nicknames, account names, and channel names.\n* Added limited message history for connection resuming (to be extended in future).\n* Added new Español (es) translation (thanks to Mauropek!).\n* Added new Polski (pl) translation (thanks to [@modinfo](https://github.com/modinfo)!).\n* Added new Română (ro) translation (thanks to [@bogdomania](https://github.com/bogdomania)!).\n* Added new Ελληνικά (el) translation (thanks to [@Shillos](https://github.com/Shillos)!).\n* Added new 简体中文 (zh-CN) translation (thanks to Tony Chen and Remini!)).\n* Added proposed IRCv3 capability [`draft/setname`](https://github.com/ircv3/ircv3-specifications/pull/361).\n* Added subcommands to `NICKSERV`, including:\n    * `PASSWD` to change account passwords.\n    * `ENFORCE` to set a specific enforcement mechanism on your nick.\n    * `SAREGISTER` to allow operators to manually create new user accounts.\n\n### Changed\n* `SASL PLAIN` logins now log more correctly.\n* Database upgrade failures now provide information about the error that occurred.\n* Halfops can now kick unprivileged users.\n* Idents (sometimes called \"usernames\") are now restricted to ASCII, similar to other servers.\n* Improved compatibility with ZNC's nickserv module.\n* In addition to the founder, now auto-ops (halfop and higher) automatically bypass channel join restrictions.\n* Log lines now display time down to milliseconds, instead of just seconds.\n* Updated all translation files (thanks to our amazing translators!).\n* Updated proposed IRCv3 capability `draft/resume` to [`draft/resume-0.3`](https://github.com/ircv3/ircv3-specifications/pull/306).\n* When nick ownership is enabled, users can now select which enforcement mechanism to use with their nickname.\n\n### Fixed\n* `INVITE`: Fixed bug where invited users could not join the channel they were invited to (thanks to [@unendingpattern](https://github.com/unendingpattern)!).\n* [`oragono.io/maxline`](https://oragono.io/maxline) capability was accidentally disabled, and is now re-enabled.\n* `oragono genpasswd` now works when piping input in (fixes Docker installs).\n* `PRIVMSG`: Messages sent to multiple clients (such as channel messages) now share the same timestamp (previously each client got a very slightly different time).\n* `WHOIS`: Now responds properly for NickServ, ChanServ, etc.\n* Channel names with right-to-left characters are now casefolded correctly (thanks to [@remini1998](https://github.com/remini1998)!).\n* Fixed handling of CIDR width in connection limiting/throttling.\n* Fixed incorrect behavior of `CHANSERV OP` command.\n* Fixed incorrect rejection of nickmasks with Unicode RTL nicknames.\n* Fixed many responses that violated the specifications (thanks to [@Ascrod](https://github.com/Ascrod), [@bogdomania](https://github.com/bogdomania), [@csmith](https://github.com/csmith), [@jesopo](https://github.com/jesopo), and [@jwheare](https://github.com/jwheare)!).\n* Fixed nickname sync issue which could cause clients to fail to see each other.\n* Invalid `ISUPPORT` tokens are now explicitly rejected.\n* Made `server-time` timestamp format more consistent and safer.\n* Oragono now exits with status (1) if it fails to start.\n* Prevent logging in multiple times when using `/NS IDENTIFY`.\n* Prevented the db handler from automagically creating the database without initializing it (thanks [@enckse](https://github.com/enckse)!). We also now automatically create the datastore on `run`.\n\n### Internal Notes\n* `DLINE` and `KLINE` refactored, and expired bans are now removed from the database.\n* Command-line parsing was upgraded to match modern best practices (thanks to [@iNecas](https://github.com/iNecas)!).\n* Direct responses to client commands are now sent \"synchronously\", bypassing the sendq.\n* Logging system optimised.\n* Services handlers refactored.\n* Translations are now sent to/PR'd from CrowdIn automagically as we develop the software.\n\n\n## [0.12.0] - 2018-10-15\nThere's been a host of changes in the past six months, and this Halloween release has a number of very useful improvements.\n\nFor example, passwords are now hashed in a _much_ better way than we did it before (jlatt's original method back from [Ergonomadic](https://github.com/edmund-huber/ergonomadic) was the right way to do things), the database now auto-upgrades for you when it detects a new version, thanks to Slingamn we now have vhosts, and there's been a ton of rewrites under-the-hood to improve stability and performance.\n\nIf you have any trouble with this release, please let us know with an issue on our tracker, or by talking to us in `#oragono` on Freenode.\n\nThanks to [slingamn](https://github.com/slingamn) for a lot of heavy lifting this release and to [vilmibm](https://github.com/vilmibm) for contributing a documentation fix!\n\n### Config Changes\n* `allow-multiple-per-connection` key removed from `accounts`.\n* `autoupgrade` key added under `datastore`, specifying whether to upgrade to new database versions automatically.\n* `bcrypt-cost` key added under `accounts`, to control how strongly account passwords are hashed.\n* `stackimpact` section removed from `debug`.\n* `unix-bind-mode` key added under `server`, controlling the bind mode used for unix listening sockets.\n* `vhosts` section added under `accounts`, configuring our new vhost support.\n* new oper capabilities `accreg`, `sajoin`, `vhosts` and `chanreg` added.\n\n### Security\n* Password hashing has been improved (with current passwords being automatically upgraded to use the new method).\n* Various crashes have been resolved.\n\n### Added\n* Added database auto-upgrades.\n* Added new subcommands to `ChanServ` including:\n    * `AMODE` to allow setting persistent channel modes for users.\n    * `DROP` to unregister a channel.\n* Added vhosts (virtual/vanity hosts), controlled via `HostServ`.\n\n### Changed\n* `ChanServ` and `NickServ` now show in their help output when commands have been disabled.\n* Channel keys and modes are now stored for registered channels.\n* Client capability handling rewritten under-the-hood.\n* Disabled services commands now show as disabled (rather than being completely hidden).\n* Many under-the-hood optimisations (thanks @slingamn!).\n* Rehashing is now more consistent and safe.\n\n### Removed\n* Removed StackImpact debug support, as we don't find it useful these days.\n\n### Fixed\n* Fixed `LUSERS` to make it display correct client count and output correct params (thanks [@moortens](https://github.com/moortens)!.\n* Fixed `PROXY` support for IPv6 clients.\n* Fixed `SAMODE` crash when using it on a channel you're not joined to.\n* Fixed `WHOIS` so that `RPL_WHOISACCOUNT` is now sent correctly.\n* Fixed fakelag timing to better match expected values.\n* Fixed issue where incoming and outgoing private messages were being incorrectly modified (a space was being added to the end) due to a bug with our protocol handling.\n* Fixed password hashing method, with existing passwords being auto-upgraded to use the new method.\n\n\n## [0.11.0] - 2018-04-15\nAnd v0.11.0 finally comes along! This release has been in the works for almost four months now, with an alpha and beta helping square away the issues.\n\nWe're adding a lot of features to improve debugging, better support international users, and make things better for network administrators. Among the new features, you can use the `LANGUAGE` command to set a custom server language (see our [CrowdIn](https://crowdin.com/project/ergochat) to contribute), expose a debugging `pprof` endpoint, reserve nicknames with `NickServ`, and force email verification for new user accounts. On the improvements side we have a `CAP REQ` fix, and we now have a manual that contains a nice overview of Oragono's documentation.\n\nIf you have any trouble with this release, please let us know with an issue on our tracker, or by talking to us in `#oragono` on Freenode.\n\nThanks a bunch to everyone for the help with this release – especially to our translators and to Slingamn for being an awesome co-maintainer!\n\n### Config Changes\n* `callbacks` section added under `accounts/registration`, configuring our new email verification (disabled by default).\n* `fakelag` section added, configuring our new fakelag implementation.\n* `ips-per-subnet` key renamed to `connections-per-subnet`.\n* `motd-formatting` is now enabled by default.\n* `nick-reservation` section added under `accounts`, configuring our new nickname ownership abilities.\n* `nofakelag` and `unregister` oper classes added.\n* `pprof-listener` key added under `debug` (disabled by default).\n* `skip-server-password` key added under `accounts`, to better support certain clients.\n* `verify-timeout` default value changed from 120 hours to 32 hours under `accounts/registration`.\n\n### Added\n* Added 32-bit builds.\n* Added a debug pprof endpoint, which is disabled by default and can be exposed in the config.\n* Added a manual to our documentation! This is primarily where we'll be adding user-facing information and instructions from now on.\n* Added current running git commit to the sent version string.\n* Added fakelag, so that the server can slow down clients hitting it too aggressively. Disabled by default while we work out the kinks and the specific settings (thanks @slingamn!).\n* Added IRCv3 capability [`batch`](https://ircv3.net/specs/extensions/batch-3.2.html) and draft capability [`draft/labeled-response`](https://ircv3.net/specs/extensions/labeled-response.html).\n* Added listening support for unix sockets.\n* Added new Brazilian Portuguese translation (thanks to [Alexandre Oliveira](https://github.com/RockyTV)!)).\n* Added new French translation (thanks to [Joshua](https://github.com/joshk0)!).\n* Added new Norwegian translation (thanks to Morten!).\n* Added new subcommands to `CHANSERV`, including:\n    * `OP` to op yourself or the given user (can only be run by channel founders).\n* Added new subcommands to `NICKSERV`, including:\n    * `DROP` to de-associate a nickname from your current account.\n    * `GHOST` to remove the given client (if they're logged in with your user account).\n    * `GROUP` to associate a nickname with your current account.\n    * `IDENTIFY` to login to an account.\n    * `INFO` to see information about the given (or your own) account.\n    * `REGISTER` to register an account.\n    * `UNREGISTER` to delete your account.\n* Added new Turkish translation (thanks to [Yaser](https://crowdin.com/profile/Apsimati)!).\n* Added proposed IRCv3 capabilities [`draft/languages`](https://gist.github.com/DanielOaks/8126122f74b26012a3de37db80e4e0c6) and [`draft/resume`](https://github.com/ircv3/ircv3-specifications/pull/306).\n* Added the ability to associate multiple nicknames with your account, and enforce nickname ownership.\n* Added the ability to force email verification when users register accounts.\n* Added user modes, including:\n    * `B`: Mark yourself as a bot, and display that you're a bot in WHOIS.\n\n### Changed\n* `genpasswd` now requires that you confirm the input passphrase.\n* Message IDs are now much shorter and easier to read – down from 39 characters to 16 while preserving a very similar gaurantee of uniqueness (thanks [@prawnsalad](https://github.com/prawnsalad) for bringing up this issue).\n\n### Fixed\n* We now correctly suspend registration when receiving a `CAP REQ`, as per [the spec](https://ircv3.net/specs/core/capability-negotiation-3.1.html).\n* We now properly cut off clients who try to send us too much data at once.\n\n\n## [0.10.3] - 2017-12-26\nThis patch fixes a couple bugs, updates cap/isupport token names in response to spec changes, and allows unprivileged users to list channel bans. Ah, DLINE and KLINE also store oper names, so you can see who set those pesky bans later on!\n\nOverall, a fairly standard patch that just improves things. No config changes, no database changes.\n\nAlso, Merry Christmas and Happy Holidays!\n\n### Added\n* `DLINE`/`KLINE`: We now save the name of whichever oper set the ban (and display it later).\n\n### Changed\n* `draft/maxline` capability is now [`oragono.io/maxline`](https://oragono.io/maxline).\n* `WHO`: First parameter now must be a mask or channel name, cannot be ommitted.\n* Casemapping is now advertised using the `UTF8MAPPING` token, matching the new spec changes.\n* We now allow unprivileged users to list channel bans.\n\n### Fixed\n* Fixed a bug around removing channel bans.\n* Fixed a client timeout bug.\n\n\n## [0.10.2] - 2017-11-13\nThis patch release fixes a bunch of crashes that were introduced in the last release, `0.10.1`.\n\nIf you have `0.10.1` running, replace it with this release.\n\n### Security\n* Fixed lots of miscellaneous crashes.\n\n\n## [0.10.1] - 2017-11-09\nThis patch release of Oragono fixes a fairly big channel mode bug, where users could set channel modes when they weren't actually allowed to.\n\n### Config Changes\n* `recover-from-errors` key added under `debug`, which enables recovery from client-caused errors (at the cost of possible server instability).\n\n### Security\n* Clients could set channel modes when they weren't supposed to be able to.\n\n### Added\n* We now allow recovering from client-caused panics.\n\n### Fixed\n* `SAMODE` now lists other users' modes.\n* Removed some possible crashes and races.\n\n\n## [0.10.0] - 2017-10-23\nThere has been a bunch of new changes in this release! From [`sts`](http://ircv3.net/specs/extensions/sts.html) being ratified to supporting [`WEBIRC`](ircv3.net/specs/extensions/webirc.html) to rewriting a whole lot of our internals, 0.10.0 represents a real step forward in terms of where Oragono's going.\n\nIn addition to the new features, this issue fixes a bunch of fairly large bugs (such as an errant `INVITE` being able to crash the server, the `+mR`channel modes not working at all, and making rehashing safer).\n\nI'd like to thank @slingamn for really contributing a lot in this release! He's done a whole bunch of the internal work, cleaned up the code, and in general just been a great help while developing. Running Oragono on an actual network has really helped find and track down some serious bugs, and lead us to some much-needed improvements.\n\n### Config Changes\n* `motd-formatting` key added under `server`, which supports MOTD formatting characters.\n* `rest-api` section removed from `server` (since we no longer support the Rest API).\n* `webirc` section added under `server`, which specifies the gateways can use the `WEBIRC` command.\n* `ws-listen` key removed from `server` (since we no longer support websocket ports).\n* Connection limits and connection throttling has become more relaxed by default.\n\n### Security\n* `INVITE`: Fixed a server crash when sending an invite for a channel that doesn't exist (thanks @josephbisch for telling me about the bug!).\n\n### Added\n* Added support for the [`WEBIRC`](ircv3.net/specs/extensions/webirc.html) command, allowing gateways to connect.\n* We now list XLINEs with `DLINE LIST` and `KLINE LIST`.\n* We now support using escaped formatting codes in the MOTD (tl;dr easy colors, bold and italics).\n\n### Changed\n* D-LINE and K-LINE code is now cleaner under the hood and less likely to crash.\n* Ident (looking up usernames) now times out a whole lot quicker, meaning you connect to the server more quickly.\n* IRCv3 capability `draft/sts` has been renamed to `sts`, since it's now been ratified.\n* Rehashing is now safer.\n* Server opers could always speak on channels, even when they shouldn't be able to. Now they aren't above the law.\n\n### Removed\n* Removed the `draft/message-ids` cap since... it doesn't actually exist. The feature is now enabled by default when clients request the `draft/message-tags-0.2` capability, as written in the [Message IDs spec](http://ircv3.net/specs/extensions/message-ids.html).\n* Removed websocket support (conflicted with existing larger IRCd's implementations and not used by any real clients).\n* REST API has been removed, until we can build up the web interface in parallel with it.\n\n### Fixed\n* `AWAY` was sending an incorrect mode string, and now sends the correct mode string (thanks @jwheare for pointing this out).\n* Fixed some bugs with our `MONITOR` implementation which meant we weren't returning the right info to clients.\n* The Moderated (`+m`) and RegisteredOnly (`+R`) channel modes could not be set. Now they can be set.\n\n\n## [0.9.1] - 2017-09-28\nThis is a patch release to fix compatibility with Irssi and resolve some issues! Thanks very much @dequis, @slingamn and squigz for the help and for bringing up the issues.\n\n### Added\n* Allow the `MODE b` syntax, which certain clients use to check lists.\n\n### Changed\n* `QUIT`: We now send the actual quit message to other users.\n\n### Fixed\n* Fix incorrectly forwarding `AWAY` messages to clients without `away-notify`.\n* Fix incorrect login check which prevented account registration.\n* Fix `ERR_NOSUCHNICK` numerics (we weren't sending the nick correctly).\n\n\n## [0.9.0] - 2017-09-25\nSo many fixes! You can now set the default modes for new channels, use HAProxy again, use the umode `+R` to protect yourself against unwanted PMs, and we now warn on configurations/setups that look incorrect!\n\nIn addition, this release makes testing easier, makes sure we better adhere to the SASL specification and also removes some memory leaks around the place. All in all, just a solid upgrade and less bugs across the board.\n\n### Config Changes\n* Added `allow-multiple-per-connection` flag under `accounts/registration`, which can be used for account setup by testing software. **Never enable it in production.**\n* Added `default-modes` key under `channels`, which is a standard modestring that's applied to new channels.\n* Added `proxy-allowed-from` key under `server`, which is a list of hostnames/IPs that the HAProxy `PROXY` command can be used from.\n\n### Security\n* Clients could use a nickname that isn't sane. This has the possibility of allowing clients to subvert our admin commands and monitoring features.\n\n### Added\n* Added a warning if the server's not listening on a TLS port or if it's not listening for TLS connections on port 6697.\n* Added a warning if you're trying to run from source or an otherwise unreleased version.\n* Added INFO.md document to better explain the design decisions behind Oragono, exactly how to rehash, etc.\n* Added support for HAProxy's PROXY v1 command, useful for certain installations.\n* Added user modes, including:\n    * `R`: Only receive private messages and notices from other registered users.\n\n### Fixed\n* Fixed a bug where certain clients couldn't connect as we were incorrectly rejecting their valid PTR record (thanks @slingamn!).\n* Fixed a crash around monitoring clients.\n* Fixed a memory leak in our socket code when clients disconnect.\n* Fixed a SASL bug that resulted in certains clients getting caught in a cycle of trying (and failing) to abort authentication.\n* Fixed an instance where clients could use a nickname that isn't sane (thanks @euank!).\n* Fixed an issue where certain clients who connect incorrectly would stay connected (thanks @euank!).\n* Fixed how we handle particularly unique Unicode strings (we now ensure they stabilize while casefolding).\n* Fixed some issues around rehashing, where listeners wouldn't rehash in time and could crash (thanks @slingamn!).\n\n\n## [0.8.2] - 2017-06-30\nJust a patch release to fix a bug! The bug that's been fixed prevented you from modifying channel privilidges at all, which isn't great. With this release, now you can do so again!\n\nThis is one I'm gonna have to add to [the testcases](https://github.com/DanielOaks/irctest), to make sure it doesn't happen again.\n\n### Fixed\n* Fixed a bug where users could not give other users operator/halfop/voice in channels.\n\n\n## [0.8.1] - 2017-06-26\nLots of quality-of-life fixes, improved oversight for opers, and a proposed channel renaming command!\n\nWith this release, we're moving to a proper [Github organisation](https://github.com/oragono), becoming more consistent with other IRCds, and introducing a bunch more snomasks. In addition, when setting `DLINE` and `KLINE` bans, you can also kill all clients who match the ban by supplying the parameter `ANDKILL` when you set the ban.\n\nChannel `LIST` filtering is now more useful, and I'll keep expanding this in future releases. As well, there's been some useful extensions to `WHOIS`, and a bug with `SANICK` fixed thanks to @lbeziaud. @enckse has also added Oragono to the Arch AUR, to make it easier to install on that distro.\n\nThanks to everyone for suggesting improvements and reporting issues! There's a lot to do as we move forward, and I have a pretty decent plan of where to go next.\n\n### Added\n* Added proposed channel rename capability [draft/rename](https://github.com/ircv3/ircv3-specifications/pull/308).\n* Send a bunch more server notice masks, now including:\n    * `j`: Channel registration.\n    * `k`: Kills, including those resulting from `DLINE`s and `KLINE`s.\n    * `n`: Nick changes.\n    * `o`: Clients opering-up.\n    * `q`: Clients quitting.\n    * `u`: Account registration and login.\n    * `x`: Setting and removing `DLINE`/`KLINE`.\n\n### Changed\n* `DLINE` and `KLINE`: Added `ANDKILL` parameter to also kill all clients that match the ban.\n* `LIST`: Implement extended list conditions `U` (which filters the channels by user count).\n* Renamed a number of dependency libraries, and changed Oragono to its' own organisation (only useful if you're building Oragono from source).\n* `WHOIS`: Show the target's real IP address if you're whoising yourself or you're an oper.\n* `WHOIS`: Show whether the target has connected securely using TLS.\n\n### Removed\n* Removed the `JOIN 0` command (matching what InspIRCd has done here), since this is easily abusable.\n\n### Fixed\n* `SANICK` works properly now (thanks @lbeziaud!).\n\n\n## [0.8.0] - 2017-05-09\nDebugging! Fixes! Better realtime monitoring!\n\nThis release isn't too exciting, but packs large improvements to how we handle floods and similar issues. As well, the introduction of snomasks (take a look at `/HELPOP snomasks`) should help opers keep a basic view over their server during use. Only the `\"c\"` (connects) snomask is active right now, but others will be added and extended in future releases.\n\n### Config Changes\n* Added `debug` section containing additional debug settings.\n* Added `modes` key on oper config, for setting modes on oper-up.\n* Added ability to log to `stdout` in logger methods.\n\n### Added\n* Added ability to log to stdout.\n* Added ability to use StackImpact profiling.\n* Added initial server notice masks (snomasks).\n\n### Changed\n* Socket code rewritten to be a lot faster and safer.\n* Updated account registration to use the latest proposed syntax (now being `/ACC REGISTER` instead of `/REG CREATE`).\n\n### Fixed\n* Clients now timeout properly if they don't complete connection registration.\n* Word wrapping (with `draft/maxline`) no longer randomly drops characters.\n\n\n## [0.7.2] - 2017-04-17\nThis is a patch release of Oragono to fix discovered bugs and crashes. I'll also be implementing some more stringent checks before pushing releases after this, to ensure these same sort of bugs don't happen again.\n \n### Security\n* Fixed a bug where any user joining an unregistered channel was given chanop status (thanks @vegax87).\n \n### Fixed\n* Fixed a number of various crashes and races.\n\n\n## [0.7.1] - 2017-03-28\nThis is a quick patch release of Oragono to work around a discovered bug.\n\n### Security\n* Fixed a bug where non-logged in users could register channels. Bleh.\n \n\n## [0.7.0] - 2017-03-27\nThis release brings channel registration with ChanServ, logging improvements, and a whole host of improvements across the board.\n\nThanks to a suggestion by `dp-` on our channel (`#oragono` on Freenode), the socket handling code has been overhauled to allow for a larger number of more stable connections. As well, improved testing has brought with it a bunch of strange hang and crash fixes, which means that Oragono should be more stable than ever.\n\nChannel registration is really cool. Essentially, you register the channel with `/CS REGISTER` as you would on any network, and then all topic changes, the `+b/+e/+I` lists, and your founder status, are all remembered and re-applied when the server's restarted.\n \n### Config Changes\n* `channels` section added to control channel registration.\n* `logging` key under `server` removed, replaced with `logging` section.\n* `max-sendq` key added under `server`.\n* `registration` and `authentication-enabled` keys moved under `accounts` section.\n* `samode` capability added to oper capabilities.\n* `sts` section added under `server`.\n\n### Added\n* Added `ChanServ` service, to allow channel registration.\n* Added `USERHOST` command (thanks @vegax87).\n* Added `SAMODE` command.\n* Added draft IRCv3 capability [draft/sts](http://ircv3.net/specs/core/sts-3.3.html).\n \n### Changed\n* `DLINE` and `KLINE` now let you specify years, months and days (e.g. `1y12m30d`) in durations.\n* Logging is now much more useful, displays colours and can log to disk.\n* Socket handling has been rewritten, which means we should support more connections more effectively (thanks dp- for the suggestion!).\n\n### Fixed\n* Fixed a bunch of small hangs and crashes.\n* Fixed an account issue where clients could login to multiple accounts at once.\n* Fixed an issue where server times were incorrect (thanks @martinlindhe!).\n* Fixed halfops not being able to talk during moderated mode (`+m`).\n* Fixed issues that prevented rehashing after the first rehash had gone through successfully.\n* Fixed the inability to view channel ban, ban exception, and invite exception lists.\n\n\n## [0.6.0] - 2017-01-19\nWe've added a ton of new features in this release! Automated connection throttling, the ability to `KLINE`, updated casemapping and line-length specifications.\n\nI've also started including a new section in the changelog called **Config Changes**, which should help you find what you need to update across releases.\n\n### Config Changes\n* `enabled` key added under the `connection-limits` section.\n* `connection-throttling` section added under `server`.\n* `linelen` section added under `limits`.\n\n### Added\n* Added ARM build (for Raspberry PIs and similar).\n* Added automated connection throttling! See the new `connection-throttling` section in the config.\n* Added `KLINE` and `UNKLINE` commands. Complementing `DLINE`'s per-IP and per-network bans, this lets you ban masks from the server.\n* Added `LUSERS` command (thanks @vegax87).\n* Added draft IRCv3 capabilities [`draft/message-tags-0.2`](http://ircv3.net/specs/core/message-tags-3.3.html) and [`draft/message-ids`](http://ircv3.net/specs/extensions/message-ids.html).\n* Added proposed IRCv3 capability [`draft/maxline`](https://github.com/ircv3/ircv3-specifications/pull/281).\n\n### Changed\n* Changed casemapping from \"rfc7700\" to \"rfc7613\", to match new draft spec.\n* Connection limits can now be freely enabled or disabled. If updating, check the new `enabled` flag under the `connection-limits` section of the config.\n\n### Fixed\n* Fixed an issue where `UNDLINE` didn't save across server launches.\n* Removed several race conditions which could result in server panics.\n* WHOIS: Multiple channels now appear in a single reply (thanks @vegax87).\n\n\n## [0.5.0] - 2016-12-10\nThis release includes a ton of fixes, as well as the ability to ban IP addresses from your network with the `DLINE` command!\n\nAs well, there are some major fixes with the libraries Oragono depends on, which fix various DoS attacks, crashes and timeouts. In short, this release is more stable and fixes a bunch of issues.\n\nThis release also updates the database, so be sure to run the `oragono upgradedb` command.\n\n### Added\n* Added ability to ban IP addresses and networks from the server with the `DLINE` and `UNDLINE` commands.\n* Added alpha REST API (intended primarily for use with a future web interface to manage accounts, DLINEs, etc).\n\n### Changed\n* Database upgraded to make handling accounts simpler.\n* Only give chanop (`@`) on channel join, not channel founder (`~`). We'll do channel founder and all on registered chans only.\n\n### Fixed\n* Fixed a bunch of bugs around setting nicknames on join.\n* Fixed crash when using STATUSMSG-like messaging.\n* Fixed crash with gIRC-Go ircmsg library we depend on.\n* Fixed not sending `MODE` changes to all clients in a channel.\n* Fixed timeout issue with go-ident library we depend on (which caused hangs on connection).\n* Prevented a DoS related to lots of clients connecting at once.\n* Removed races around setting and changing `NICK`s, to be more safe.\n* Send channel `NOTICE`s properly.\n\n\n## [0.4.0] - 2016-11-03\nThis release packs a more extensive oper privelege framework, bugfixes for capabilities/modes, support for new RP commands and more `RPL_ISUPPORT` tokens. In general, a bunch of new features and bugfixes to make using Oragono more smooth.\n\n### Added\n* Added automatic client connection limiting, similar to other IRCds.\n* Added operator classes, allowing for more finely-grained permissions for operators.\n* Added roleplaying commands, both inside channels and between clients.\n* Length of channel mode lists (ban / ban-except / invite-except) is now restricted to the limit in config.\n* Support `MAXLIST`, `MAXTARGETS`, `MODES`, `TARGMAX` in `RPL_ISUPPORT`.\n* Added support for IRCv3 capability [`chghost`](http://ircv3.net/specs/extensions/chghost-3.2.html).\n\n### Changed\n* In the config file, \"operator\" changed to \"opers\", and new oper class is required.\n\n### Fixed\n* Fixed being able to change modes when not an operator.\n* Fixed bug where `HELP` wouldn't correctly display for operators, and added more help topics.\n* Fixed bug where you would always have certain capabilities enabled.\n* Fixed display of large `MONITOR` lists.\n\n\n## [0.3.0] - 2016-10-23\nWe now support dynamically reloading the config file, along with some new IRCv3 capabilities and some fixes.\n\nThe `REHASH` changes are fairly extensive here, but should now be stable (this also fixes a denial of service possible with the old code).\n\n### Security\n* Prevent a denial of service where the server would stop accepting connections.\n\n### Added\n* Added `REHASH` command.\n* Added ability to message channel members with a specific privelege (i.e. support for `STATUSMSG`).\n* Added ability to enable and disable SASL.\n* Added support for IRCv3 capabilities [`cap-notify`](http://ircv3.net/specs/extensions/cap-notify-3.2.html) and [`echo-message`](http://ircv3.net/specs/extensions/echo-message-3.2.html).\n\n### Changed\n* Server operators no longer have permissions to do everything in channels.\n\n### Fixed\n* MODE: Fixed issue where channel privelege changes returned incorrectly.\n\n\n## [0.2.0] - 2016-10-16\nImproved compatibility, more features.\n\nNow comes with a new proper Unicode-capable casemapping and integrated help!\n\n### Added\n* Added integrated help (with the `/HELP` command).\n* Added support for IRCv3.2 [capability negotiation](http://ircv3.net/specs/core/capability-negotiation-3.2.html) including CAP values.\n* Added support for IRCv3 capabilities [`account-notify`](http://ircv3.net/specs/extensions/account-notify-3.1.html), [`invite-notify`](http://ircv3.net/specs/extensions/invite-notify-3.2.html), [`monitor`](http://ircv3.net/specs/core/monitor-3.2.html), [`sasl`](http://ircv3.net/specs/extensions/sasl-3.2.html), and draft capability [`message-tags`](http://ircv3.net/specs/core/message-tags-3.3.html) as `draft/message-tags`.\n\n### Changed\n* Casemapping changed from custom unicode mapping to preliminary [rfc7700](https://github.com/ircv3/ircv3-specifications/pull/272) mapping.\n\n### Removed\n* Removed channel persistence with the `+P` mode (not too useful as currently implemented, to be replaced later).\n* Removed the `PROXY` command (breaks our TLS user mode, and our integrated support for TLS should be fine).\n\n\n## [0.1.0] - 2016-09-18\nInitial release of Oragono!\n\n### Security\n* PROXY command is now restricted appropriately.\n* Nicknames, usernames and channel names that break the protocol are no longer allowed.\n* Default channel modes set to restrict new channels more appropriately by default.\n\n### Added\n* YAML config file format.\n* buntdb key-value store for persistent data.\n* Native SSL/TLS support (thanks to @edmand).\n* Ability to generate testing certificates from the command line.\n* Support for looking up usernames with [ident](https://tools.ietf.org/html/rfc1413) on client connection.\n* [`RPL_ISUPPORT`](http://modern.ircdocs.horse/#rplisupport-005) numeric as advertised by most other IRCds today.\n* Ability to parse complex mode change syntax commonly used these days (i.e. `+h-ov dan dan dan`).\n* User mode for clients connected via TLS (`+Z`).\n* Ability to register and login to accounts (with passphrase or certfp).\n* Added support for IRCv3 capabilities [`account-tag`](http://ircv3.net/specs/extensions/account-tag-3.2.html), [`away-notify`](http://ircv3.net/specs/extensions/away-notify-3.1.html), [`extended-join`](http://ircv3.net/specs/extensions/extended-join-3.1.html), [`sasl`](http://ircv3.net/specs/extensions/sasl-3.1.html), [`server-time`](http://ircv3.net/specs/extensions/server-time-3.2.html), and [`userhost-in-names`](http://ircv3.net/specs/extensions/userhost-in-names-3.2.html).\n\n### Changed\n* Channel creator (`O`) privilege changed to founder/admin/halfops (`qah`) privileges.\n* Private (`+p`) channel mode changed to secret (`+s`), to match what's used by servers today.\n* Default channel modes changed to (`+nt`), matching most other IRCds.\n* CLI commands and arguments made more consistent with typical software.\n* Usernames set by the `USER` command now start with `\"~\"` (to work with new ident support).\n* Renamed `ONICK` command to `SANICK` to be more consistent with other IRCds.\n* Made maximum nickname and channel name lengths configurable.\n* Made maximum `WHOWAS` entries configurable.\n\n### Removed\n* Removed gitconfig configuration format [replaced with YAML].\n* Removed sqlite database [replaced with buntdb key-value store].\n* Removed `THEATER` command (it broke and I'm not that interested in putting the work in to get it working again with the aim of this project. PRs accepted).\n\n### Fixed\n* Fixed clients no longer being able to send commands after a single command errored out.\n* CAP: Registration is now properly suspended during CAP negotiation.\n* CAP: Remove CAP CLEAR (recommended in IRCv3 3.2), and allow capability negotiation after registration.\n* MODE: Fixed `<modestring>` evaluation (we were parsing all ungrabbed parameters as a modestring, when it is actually only the first param).\n* MODE: New-style mode change syntax (with both adding and removing modes in a single MODE command) is now parsed properly.\n* MOTD: Now store MOTD in-memory rather than on-disk, and don't limit it to 80 characters per line (not required with today's servers or clients).\n* NICK: Restrict nicknames that break the protocol.\n* USER: Restrict usernames that break the protocol.\n* PROXY: Restrict to specified hostnames only.\n* WHOIS: Include the required `<nick>` param on `RPL_ENDOFWHOIS`.\n* WHOIS: Hide hidden channels in WHOIS responses.\n"
        },
        {
          "name": "DEVELOPING.md",
          "type": "blob",
          "size": 12.3955078125,
          "content": "# Developing Ergo\n\nThis is a guide to modifying Ergo's code. If you're just trying to run your own Ergo, or use one, you shouldn't need to worry about these issues.\n\n\n## Golang issues\n\nYou should use the [latest distribution of the Go language for your OS and architecture](https://golang.org/dl/). (If `uname -m` on your Raspberry Pi reports `armv7l`, use the `armv6l` distribution of Go; if it reports v8, you may be able to use the `arm64` distribution.)\n\nErgo vendors all its dependencies. Because of this, Ergo is self-contained and you should not need to fetch any dependencies with `go get`. Doing so is not recommended, since it may fetch incompatible versions of the dependencies.\n\nIf you're upgrading the Go version used by Ergo, there are several places where it's hard-coded and must be changed:\n\n1. `.github/workflows/build.yml`, which controls the version that our CI test suite uses to build and test the code (e.g., for a PR)\n2. `Dockerfile`, which controls the version that the Ergo binaries in our Docker images are built with\n3. `go.mod`: this should be updated automatically by Go when you do module-related operations\n\n\n## Branches\n\nThe recommended workflow for development is to create a new branch starting from the current `master`. Even though `master` is not recommended for production use, we strive to keep it in a usable state. Starting from `master` increases the likelihood that your patches will be accepted.\n\nLong-running feature branches that aren't ready for merge into `master` may be maintained under a `devel+` prefix, e.g. `devel+metadata` for a feature branch implementing the IRCv3 METADATA extension.\n\n\n## Workflow\n\nWe have two test suites:\n\n1. `make test`, which runs some relatively shallow unit tests, checks `go vet`, and does some other internal consistency checks\n1. `make irctest`, which runs the [irctest](https://github.com/ProgVal/irctest) integration test suite\n\nBarring special circumstances, both must pass for a PR to be accepted. irctest will test the `ergo` binary visible on `$PATH`; make sure your development version is the one being tested. (If you have `~/go/bin` on your `$PATH`, a successful `make install` will accomplish this.)\n\nThe project style is [gofmt](https://go.dev/blog/gofmt); it is enforced by `make test`. You can fix any style issues automatically by running `make gofmt`.\n\n\n## Updating dependencies\n\nErgo vendors all dependencies using `go mod vendor`. To update a dependency, or add a new one:\n\n1. `go get -v bazbat.com/path/to/dependency` ; this downloads the new dependency\n2. `go mod vendor` ; this writes the dependency's source files to the `vendor/` directory\n3. `git add go.mod go.sum vendor/` ; this stages all relevant changes to the vendor directory, including file deletions. Take care that spurious changes (such as editor swapfiles) aren't added.\n4. `git commit`\n\n\n## Releasing a new version\n\n1. Ensure the tests pass, locally on travis (`make test`, `make smoke`, and `make irctest`)\n1. Test backwards compatibility guarantees. Get an example config file and an example database from the previous stable release. Make sure the current build still works with them (modulo anything explicitly called out in the changelog as a breaking change).\n1. Run the `ircstress` chanflood benchmark to look for data races (enable race detection) and performance regressions (disable it).\n1. Update the changelog with new changes and write release notes.\n1. Update the version number `irc/version.go` (either change `-unreleased` to `-rc1`, or remove `-rc1`, as appropriate).\n1. Commit the new changelog and constants change.\n1. Tag the release with `git tag --sign v0.0.0 -m \"Release v0.0.0\"` (`0.0.0` replaced with the real ver number).\n1. Build binaries using `make release`\n1. Sign the checksums file with `gpg --sign --detach-sig --local-user <fingerprint>`\n1. Smoke-test a built binary locally\n1. Point of no return: `git push origin master --tags` (this publishes the tag; any fixes after this will require a new point release)\n1. Publish the release on GitHub (Releases -> \"Draft a new release\"); use the new tag, post the changelog entries, upload the binaries, the checksums file, and the signature of the checksums file\n1. Update the `irctest_stable` branch with the new changes (this may be a force push).\n1. If it's a production release (as opposed to a release candidate), update the `stable` branch with the new changes. (This may be a force push in the event that stable contained a backport. This is fine because all stable releases and release candidates are tagged.)\n1. Similarly, for a production release, update the `irctest_stable` branch (this is the branch used by upstream irctest to integration-test against Ergo).\n1. Make the appropriate announcements:\n    * For a release candidate:\n        1. the channel topic\n        1. any operators who may be interested\n        1. update the testnet\n    * For a production release:\n        1. everything applicable to a release candidate\n        1. Twitter\n        1. ergo.chat/news\n        1. ircv3.net support tables, if applicable\n        1. other social media?\n\nOnce it's built and released, you need to setup the new development version. To do so:\n\n1. Ensure dependencies are up-to-date.\n1. Bump the version number in `irc/version.go`, typically by incrementing the second number in the 3-tuple, and add '-unreleased' (for instance, `2.2.0` -> `2.3.0-unreleased`).\n1. Commit the new version number and changelog with the message `\"Setup v0.0.1-unreleased devel ver\"`.\n\n**Unreleased changelog content**\n\n```md\n## Unreleased\nNew release of Ergo!\n\n### Config Changes\n\n### Security\n\n### Added\n\n### Changed\n\n### Removed\n\n### Fixed\n```\n\n\n\n## Debugging\n\nIt's helpful to enable all loglines while developing. Here's how to configure this:\n\n```yaml\nlogging:\n    -\n        method: stderr\n        type: \"*\"\n        level: debug\n```\n\nTo debug a hang, the best thing to do is to get a stack trace. The easiest way to get stack traces is with the [pprof listener](https://golang.org/pkg/net/http/pprof/), which can be enabled in the `debug` section of the config. Once it's enabled, you can navigate to `http://localhost:6060/debug/pprof/` in your browser and go from there. If that doesn't work, try:\n\n    $ kill -ABRT <procid>\n\nThis will kill Ergo and print out a stack trace for you to take a look at.\n\n\n## Concurrency design\n\nErgo involves a fair amount of shared state. Here are some of the main points:\n\n1. Each client has a separate goroutine that listens for incoming messages and synchronously processes them.\n1. All sends to clients are asynchronous; `client.Send` appends the message to a queue, which is then processed on a separate goroutine. It is always safe to call `client.Send`.\n1. The server has a few of its own goroutines, for listening on sockets and handing off new client connections to their dedicated goroutines.\n1. A few tasks are done asynchronously in ad-hoc goroutines.\n\nIn consequence, there is a lot of state (in particular, server and channel state) that can be read and written from multiple goroutines. This state is protected with mutexes. To avoid deadlocks, mutexes are arranged in \"tiers\"; while holding a mutex of one tier, you're only allowed to acquire mutexes of a strictly *higher* tier. The tiers are:\n\n1. Tier 1 mutexes: these are the \"innermost\" mutexes. They typically protect getters and setters on objects, or invariants that are local to the state of a single object. Example: `Channel.stateMutex`.\n1. Tier 2 mutexes: these protect some invariants of their own, but also need to access fields on other objects that themselves require synchronization. Example: `ChannelManager.RWMutex`.\n1. Tier 3 mutexes: these protect macroscopic operations, where it doesn't make sense for more than one to occur concurrently. Example; `Server.rehashMutex`, which prevents rehashes from overlapping.\n\nThere are some mutexes that are \"tier 0\": anything in a subpackage of `irc` (e.g., `irc/logger` or `irc/connection_limits`) shouldn't acquire mutexes defined in `irc`.\n\nWe are using `buntdb` for persistence; a `buntdb.DB` has an `RWMutex` inside it, with read-write transactions getting the `Lock()` and read-only transactions getting the `RLock()`. This mutex is considered tier 1. However, it's shared globally across all consumers, so if possible you should avoid acquiring it while holding ordinary application-level mutexes.\n\n\n## Command handlers and ResponseBuffer\n\nWe support a lot of IRCv3 specs. Pretty much all of them, in fact. And a lot of proposed/draft ones. One of the draft specifications that we support is called [\"labeled responses\"](https://ircv3.net/specs/extensions/labeled-response.html).\n\nWith labeled responses, when a client sends a label along with their command, they are assured that they will receive the response messages with that same label.\n\nFor example, if the client sends this to the server:\n\n    @label=pQraCjj82e PRIVMSG #channel :hi!\n\nThey will expect to receive this (with echo-message also enabled):\n\n    @label=pQraCjj82e :nick!user@host PRIVMSG #channel :hi!\n\nThey receive the response with the same label, so they can match the sent command to the received response. They can also do the same with any other command.\n\nIn order to allow this, in command handlers we don't send responses directly back to the user. Instead, we buffer the responses in an object called a ResponseBuffer. When the command handler returns, the contents of the ResponseBuffer is sent to the user with the appropriate label (and batches, if they're required).\n\nBasically, if you're in a command handler and you're sending a response back to the requesting client, use `rb.Add*` instead of `client.Send*`. Doing this makes sure the labeled responses feature above works as expected. The handling around `PRIVMSG`/`NOTICE`/`TAGMSG` is strange, so simply defer to [irctest](https://github.com/DanielOaks/irctest)'s judgement about whether that's correct for the most part.\n\n\n## Translated strings\n\nThe function `client.t()` is used fairly widely throughout the codebase. This function translates the given string using the client's negotiated language. If the parameter of the function is a string, the translation update script below will grab that string and mark it for translation.\n\nIn addition, throughout most of the codebase, if a string is created using the backtick characters ``(`)``, that string will also be marked for translation. This is really useful in the cases of general errors and other strings that are created far away from the final `client.t` function they are sent through.\n\n\n## Updating Translations\n\nWe support translating server strings using [CrowdIn](https://crowdin.com/project/ergochat)! To send updated source strings to CrowdIn, you should:\n\n1. `cd` to the base directory (the one this `DEVELOPING` file is in).\n2. Install the `pyyaml` and `docopt` deps using `pip3 install pyyamp docopt`.\n3. Run the `updatetranslations.py` script with: `./updatetranslations.py run irc languages`\n4. Commit the changes\n\nCrowdIn's integration should grab the new translation files automagically.\n\nWhen new translations are available, CrowsIn will submit a new PR with the updates. The `INFO` command should be used to see whether the credits strings has been updated/translated properly, since that can be a bit of a sticking point for our wonderful translators :)\n\n### Updating Translations Manually\n\nYou shouldn't need to do this, but to update 'em manually:\n\n1. `cd` to the base directory (the one this `DEVELOPING` file is in).\n2. Install the `pyyaml` and `docopt` deps using `pip3 install pyyamp docopt`.\n3. Run the `updatetranslations.py` script with: `./updatetranslations.py run irc languages`\n4. Install the [CrowdIn CLI tool](https://support.crowdin.com/cli-tool/).\n5. Make sure the CrowdIn API key is correct in `~/.crowdin.yaml`\n6. Run `crowdin upload sources`\n\nWe also support grabbing translations directly from CrowdIn. To do this:\n\n1. `cd` to the base directory (the one this `DEVELOPING` file is in).\n2. Install the [CrowdIn CLI tool](https://support.crowdin.com/cli-tool/).\n3. Make sure the CrowdIn API key is correct in `~/.crowdin.yaml`\n4. Run `crowdin download`\n\nThis will download a bunch of updated files and put them in the right place\n\n\n## Adding a mode\n\nWhen adding a mode, keep in mind the following places it may need to be referenced:\n\n1. The mode needs to be defined in the `irc/modes` subpackage\n1. It may need to be special-cased in `modes.RplMyInfo()`\n1. It may need to be added to the `CHANMODES` ISUPPORT token\n1. It may need special handling in `ApplyUserModeChanges` or `ApplyChannelModeChanges`\n1. It may need special persistence handling code\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.4736328125,
          "content": "## build ergo binary\nFROM docker.io/golang:1.23-alpine AS build-env\n\nRUN apk upgrade -U --force-refresh --no-cache && apk add --no-cache --purge --clean-protected -l -u make git\n\n# copy ergo source\nWORKDIR /go/src/github.com/ergochat/ergo\nCOPY . .\n\n# modify default config file so that it doesn't die on IPv6\n# and so it can be exposed via 6667 by default\nRUN sed -i 's/^\\(\\s*\\)\\\"127.0.0.1:6667\\\":.*$/\\1\":6667\":/' /go/src/github.com/ergochat/ergo/default.yaml && \\\n    sed -i 's/^\\s*\\\"\\[::1\\]:6667\\\":.*$//' /go/src/github.com/ergochat/ergo/default.yaml\n\n# compile\nRUN make install\n\n## build ergo container\nFROM docker.io/alpine:3.19\n\n# metadata\nLABEL maintainer=\"Daniel Oaks <daniel@danieloaks.net>,Daniel Thamdrup <dallemon@protonmail.com>\" \\\n      description=\"Ergo is a modern, experimental IRC server written in Go\"\n\n# standard ports listened on\nEXPOSE 6667/tcp 6697/tcp\n\n# ergo itself\nCOPY --from=build-env /go/bin/ergo \\\n                      /go/src/github.com/ergochat/ergo/default.yaml \\\n                      /go/src/github.com/ergochat/ergo/distrib/docker/run.sh \\\n                      /ircd-bin/\nCOPY --from=build-env /go/src/github.com/ergochat/ergo/languages /ircd-bin/languages/\n\n# running volume holding config file, db, certs\nVOLUME /ircd\nWORKDIR /ircd\n\n# default motd\nCOPY --from=build-env /go/src/github.com/ergochat/ergo/ergo.motd /ircd/ergo.motd\n\n# launch\nENTRYPOINT [\"/ircd-bin/run.sh\"]\n\n# # uncomment to debug\n# RUN apk add --no-cache bash\n# RUN apk add --no-cache vim\n# CMD /bin/bash\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2012-2014 Jeremy Latt\nCopyright (c) 2014-2015 Edmund Huber\nCopyright (c) 2016-2020 Daniel Oaks\nCopyright (c) 2017-2020 Shivaram Lingamneni\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.9482421875,
          "content": ".PHONY: all install build release capdefs test smoke gofmt irctest\n\nGIT_COMMIT := $(shell git rev-parse HEAD 2> /dev/null)\nGIT_TAG := $(shell git tag --points-at HEAD 2> /dev/null | head -n 1)\n\n# disable linking against native libc / libpthread by default;\n# this can be overridden by passing CGO_ENABLED=1 to make\nexport CGO_ENABLED ?= 0\n\ncapdef_file = ./irc/caps/defs.go\n\nall: build\n\ninstall:\n\tgo install -v -ldflags \"-X main.commit=$(GIT_COMMIT) -X main.version=$(GIT_TAG)\"\n\nbuild:\n\tgo build -v -ldflags \"-X main.commit=$(GIT_COMMIT) -X main.version=$(GIT_TAG)\"\n\nrelease:\n\tgoreleaser --skip=publish --clean\n\ncapdefs:\n\tpython3 ./gencapdefs.py > ${capdef_file}\n\ntest:\n\tpython3 ./gencapdefs.py | diff - ${capdef_file}\n\tgo test ./...\n\tgo vet ./...\n\t./.check-gofmt.sh\n\nsmoke: install\n\tergo mkcerts --conf ./default.yaml || true\n\tergo run --conf ./default.yaml --smoke\n\ngofmt:\n\t./.check-gofmt.sh --fix\n\nirctest: install\n\tgit submodule update --init\n\tcd irctest && make ergo\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 1.9521484375,
          "content": "   ___ _ __ __ _  ___  \n  / _ \\ '__/ _` |/ _ \\ \n |  __/ | | (_| | (_) |\n  \\___|_|  \\__, |\\___/ \n            __/ |      \n           |___/       \n-----------------------------------------------------------------------------------------------\n\nErgo is a modern IRC server written in Go. Its core design principles are:\n\n* Being simple to set up and use\n* Combining the features of an ircd, a services framework, and a bouncer:\n  * Integrated account management\n  * History storage\n  * Bouncer functionality\n* Bleeding-edge IRCv3 support\n* High customizability via a rehashable (i.e., reloadable at runtime) YAML config\n\n                                     https://ergo.chat/\n                              https://github.com/ergochat/ergo\n                          #ergo on irc.ergo.chat or irc.libera.chat\n\n-----------------------------------------------------------------------------------------------\n\n\n=== Installing ===\n\nCopy the example config file to ircd.yaml with a command like:\n\n    $ cp default.yaml ircd.yaml\n\nModify the config file as needed (the recommendations at the top may be helpful).\n\nTo generate passwords for opers and connect passwords, you can use this command:\n\n    $ ./ergo genpasswd\n\nIf you need to generate self-signed TLS certificates, use this command:\n\n    $ ./ergo mkcerts\n\nYou are now ready to start Ergo!\n\n    $ ./ergo run\n\nFor further instructions, consult the manual. A copy of the manual should be\nincluded in your release under `docs/MANUAL.md`. Or you can view it on the\nWeb: https://ergo.chat/manual.html\n\n=== Updating ===\n\nIf you're updating from a previous version of Ergo, check out the CHANGELOG for a list\nof important changes you'll want to take a look at. The change log details config changes,\nfixes, new features and anything else you'll want to be aware of!\n\n=== Credits ===\n\n* Jeremy Latt (2012-2014)\n* Edmund Huber (2014-2015)\n* Daniel Oaks (2016-present)\n* Shivaram Lingamneni (2017-present)\n* Many other contributors and friends of the project <3\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.759765625,
          "content": "![Ergo logo](docs/logo.png)\n\nErgo (formerly known as Oragono) is a modern IRC server written in Go. Its core design principles are:\n\n* Being simple to set up and use\n* Combining the features of an ircd, a services framework, and a bouncer (integrated account management, history storage, and bouncer functionality)\n* Bleeding-edge [IRCv3 support](https://ircv3.net/software/servers.html), suitable for use as an IRCv3 reference implementation\n* High customizability via a rehashable (i.e., reloadable at runtime) YAML config\n\nErgo is a fork of the [Ergonomadic](https://github.com/jlatt/ergonomadic) IRC daemon <3\n\n---\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/ergochat/ergo)](https://goreportcard.com/report/github.com/ergochat/ergo)\n[![build](https://github.com/ergochat/ergo/actions/workflows/build.yml/badge.svg)](https://github.com/ergochat/ergo/actions/workflows/build.yml)\n[![Download Latest Release](https://img.shields.io/badge/downloads-latest%20release-green.svg)](https://github.com/ergochat/ergo/releases/latest)\n[![Crowdin](https://d322cqt584bo4o.cloudfront.net/ergochat/localized.svg)](https://crowdin.com/project/ergochat)\n\nIf you want to take a look at a running Ergo instance or test some client code, feel free to play with [testnet.ergo.chat](https://testnet.ergo.chat/) (TLS on port 6697 or plaintext on port 6667).\n\n---\n\n\n## Features\n\n* integrated services: NickServ for user accounts, ChanServ for channel registration, and HostServ for vanity hosts\n* bouncer-like features: storing and replaying history, allowing multiple clients to use the same nickname\n* native TLS/SSL support, including support for client certificates\n* [IRCv3 support](https://ircv3.net/software/servers.html)\n* [yaml](https://yaml.org/) configuration\n* updating server config and TLS certificates on-the-fly (rehashing)\n* SASL authentication\n* [LDAP support](https://github.com/ergochat/ergo-ldap)\n* supports [multiple languages](https://crowdin.com/project/ergochat) (you can also set a default language for your network)\n* optional support for UTF-8 nick and channel names with RFC 8265 (PRECIS)\n* advanced security and privacy features (support for requiring SASL for all logins, cloaking IPs, and running as a Tor hidden service)\n* an extensible privilege system for IRC operators\n* ident lookups for usernames\n* automated client connection limits\n* passwords stored with [bcrypt](https://godoc.org/golang.org/x/crypto)\n* `UBAN`, a unified ban system that can target IPs, networks, masks, and registered accounts (`KLINE` and `DLINE` are also supported)\n* a focus on developing with [specifications](https://ergo.chat/specs.html)\n\nFor more detailed information on Ergo's functionality, see:\n\n* [MANUAL.md, the operator manual](https://github.com/ergochat/ergo/blob/stable/docs/MANUAL.md)\n* [USERGUIDE.md, the guide for end users](https://github.com/ergochat/ergo/blob/stable/docs/USERGUIDE.md)\n\n## Quick start guide\n\nDownload the latest release from this page: https://github.com/ergochat/ergo/releases/latest\n\nExtract it into a folder, then run the following commands:\n\n```sh\ncp default.yaml ircd.yaml\nvim ircd.yaml  # modify the config file to your liking\n./ergo mkcerts\n./ergo run     # server should be ready to go!\n```\n\n**Note:** See the [productionizing guide in our manual](https://github.com/ergochat/ergo/blob/stable/docs/MANUAL.md#productionizing-with-systemd) for recommendations on how to run a production network, including obtaining valid TLS certificates.\n\n### Platform Packages\n\nSome platforms/distros also have Ergo packages maintained for them:\n\n* Arch Linux [AUR](https://aur.archlinux.org/packages/ergochat/) - Maintained by [Jason Papakostas (@vith)](https://github.com/vith).\n* [Gentoo Linux](https://packages.gentoo.org/packages/net-irc/ergo) - Maintained by [Sam James (@thesamesam)](https://github.com/thesamesam).\n\n### Using Docker\n\nA Dockerfile and example docker-compose recipe are available in the `distrib/docker` directory. Ergo is automatically published\nto the GitHub Container Registry at [ghcr.io/ergochat/ergo](https://ghcr.io/ergochat/ergo). For more information, see the distrib/docker\n[README file](https://github.com/ergochat/ergo/blob/master/distrib/docker/README.md).\n\n### From Source\n\nYou can also clone this repository and build from source. Typical deployments should use the `stable` branch, which points to the latest stable release. In general, `stable` should coincide with the latest published tag that is not designated as a beta or release candidate (for example, `v2.7.0-rc1` was an unstable release candidate and `v2.7.0` was the corresponding stable release), so you can also identify the latest stable release tag on the [releases page](https://github.com/ergochat/ergo/releases) and build that.\n\nThe `master` branch is not recommended for production use since it may contain bugs, and because the forwards compatibility guarantees for the config file and the database that apply to releases do not apply to master. That is to say, running master may result in changes to your database that end up being incompatible with future versions of Ergo.\n\nFor information on contributing to Ergo, see [DEVELOPING.md](https://github.com/ergochat/ergo/blob/master/DEVELOPING.md).\n\n#### Building\n\nYou'll need an [up-to-date distribution of the Go language for your OS and architecture](https://golang.org/dl/). Once that's installed (check the output of `go version`), just check out your desired branch or tag and run `make`. This will produce an executable binary named `ergo` in the base directory of the project. (Ergo vendors all its dependencies, so you will not need to fetch any dependencies remotely.)\n\n## Configuration\n\nThe default config file [`default.yaml`](default.yaml) helps walk you through what each option means and changes.\n\nYou can use the `--conf` parameter when launching Ergo to control where it looks for the config file. For instance: `ergo run --conf /path/to/ircd.yaml`. The configuration file also stores where the log, database, certificate, and other files are opened. Normally, all these files use relative paths, but you can change them to be absolute (such as `/var/log/ircd.log`) when running Ergo as a service.\n\n### Logs\n\nBy default, logs go to stderr only. They can be configured to go to a file, or you can use systemd to direct the stderr to the system journal (see the manual for details). The configuration format of logs is designed to be easily pluggable, and is inspired by the logging config provided by InspIRCd.\n\n### Passwords\n\nPasswords (for both `PASS` and oper logins) are stored using bcrypt. To generate encrypted strings for use in the config, use the `genpasswd` subcommand as such:\n\n```sh\nergo genpasswd\n```\n\nWith this, you receive a blob of text which you can plug into your configuration file.\n\n### Nickname and channel registration\n\nErgo relies heavily on user accounts to enable its distinctive features (such as allowing multiple clients per nickname). As a user, you can register your current nickname as an account using `/msg NickServ register <password>`. Once you have done so, you should [enable SASL in your clients](https://libera.chat/guides/sasl), ensuring that you will be automatically logged into your account on each connection. This will prevent [problems claiming your registered nickname](https://github.com/ergochat/ergo/blob/master/docs/MANUAL.md#nick-equals-account).\n\nOnce you have registered your nickname, you can use it to register channels:\n\n1. Join the channel with `/join #channel`\n2. Register the channel with `/CS REGISTER #channel`\n\nAfter this, your channel will remember the fact that you're the owner, the topic, and any modes set on it!\n\n\n# Credits\n\n* Jeremy Latt (2012-2014)\n* Edmund Huber (2014-2015)\n* Daniel Oaks (2016-present)\n* Shivaram Lingamneni (2017-present)\n* [Many other contributors and friends of the project <3](https://github.com/ergochat/ergo/blob/master/CHANGELOG.md)\n"
        },
        {
          "name": "crowdin.yml",
          "type": "blob",
          "size": 1.3076171875,
          "content": "#\n# Your crowdin's credentials\n#\n\"project_identifier\" : \"oragono\"\n# \"api_key\" : \"\"\n# \"base_path\" : \"\"\n#\"base_url\" : \"\"\n\n#\n# Choose file structure in crowdin\n# e.g. true or false\n#\n\"preserve_hierarchy\": true\n\n#\n# Files configuration\n#\nfiles: [\n {\n  \"source\" : \"/languages/example/translation.lang.yaml\",\n  \"translation\" : \"/languages/%locale%.lang.yaml\",\n  \"dest\" : \"translation.lang.yaml\"\n },\n {\n  \"source\" : \"/languages/example/irc.lang.json\",\n  \"translation\" : \"/languages/%locale%-irc.lang.json\",\n  \"dest\" : \"irc.lang.json\"\n },\n {\n  \"source\" : \"/languages/example/help.lang.json\",\n  \"translation\" : \"/languages/%locale%-help.lang.json\",\n  \"dest\" : \"help.lang.json\",\n  \"update_option\" : \"update_as_unapproved\",\n },\n {\n  \"source\" : \"/languages/example/chanserv.lang.json\",\n  \"translation\" : \"/languages/%locale%-chanserv.lang.json\",\n  \"dest\" : \"services/chanserv.lang.json\",\n  \"update_option\" : \"update_as_unapproved\",\n },\n {\n  \"source\" : \"/languages/example/nickserv.lang.json\",\n  \"translation\" : \"/languages/%locale%-nickserv.lang.json\",\n  \"dest\" : \"services/nickserv.lang.json\",\n  \"update_option\" : \"update_as_unapproved\",\n },\n {\n  \"source\" : \"/languages/example/hostserv.lang.json\",\n  \"translation\" : \"/languages/%locale%-hostserv.lang.json\",\n  \"dest\" : \"services/hostserv.lang.json\",\n  \"update_option\" : \"update_as_unapproved\",\n },\n]"
        },
        {
          "name": "default.yaml",
          "type": "blob",
          "size": 46.40625,
          "content": "# This is the default config file for Ergo.\n# It contains recommended defaults for all settings, including some behaviors\n# that differ from conventional ircd+services setups. See traditional.yaml\n# for a config with more \"mainstream\" behavior.\n#\n# If you are setting up a new Ergo server, you should copy this file\n# to a new one named 'ircd.yaml', then look through the file to see which\n# settings you want to customize. If you don't understand a setting, or\n# aren't sure what behavior you want, most of the defaults are fine\n# to start with (you can change them later, even on a running server).\n# However, there are a few that you should probably change up front:\n# 1. network.name (a human-readable name that identifies your network,\n#    no spaces or special characters) and server.name (consider using the\n#    domain name of your server)\n# 2. if you have valid TLS certificates (for example, from letsencrypt.org),\n#    you should enable them in server.listeners in place of the default\n#    self-signed certificates\n# 3. the operator password in the 'opers' section\n# 4. by default, message history is enabled, using in-memory history storage\n#    and with messages expiring after 7 days. depending on your needs, you may\n#    want to disable history entirely, remove the expiration time, switch to\n#    persistent history stored in MySQL, or do something else entirely. See\n#    the 'history' section of the config.\n\n# network configuration\nnetwork:\n    # name of the network\n    name: ErgoTest\n\n# server configuration\nserver:\n    # server name\n    name: ergo.test\n\n    # addresses to listen on\n    listeners:\n        # The standard plaintext port for IRC is 6667. Allowing plaintext over the\n        # public Internet poses serious security and privacy issues. Accordingly,\n        # we recommend using plaintext only on local (loopback) interfaces:\n        \"127.0.0.1:6667\": # (loopback ipv4, localhost-only)\n        \"[::1]:6667\":     # (loopback ipv6, localhost-only)\n        # If you need to serve plaintext on public interfaces, comment out the above\n        # two lines and uncomment the line below (which listens on all interfaces):\n        # \":6667\":\n        # Alternately, if you have a TLS certificate issued by a recognized CA,\n        # you can configure port 6667 as an STS-only listener that only serves\n        # \"redirects\" to the TLS port, but doesn't allow chat. See the manual\n        # for details.\n\n        # The standard SSL/TLS port for IRC is 6697. This will listen on all interfaces:\n        \":6697\":\n            # this is a standard TLS configuration with a single certificate;\n            # see the manual for instructions on how to configure SNI\n            tls:\n                cert: fullchain.pem\n                key: privkey.pem\n            # 'proxy' should typically be false. It's for cloud load balancers that\n            # always send a PROXY protocol header ahead of the connection. See the\n            # manual (\"Reverse proxies\") for more details.\n            proxy: false\n            # set the minimum TLS version:\n            min-tls-version: 1.2\n\n        # Example of a Unix domain socket for proxying:\n        # \"/tmp/ergo_sock\":\n\n        # Example of a Tor listener: any connection that comes in on this listener will\n        # be considered a Tor connection. It is strongly recommended that this listener\n        # *not* be on a public interface --- it should be on 127.0.0.0/8 or unix domain:\n        # \"/hidden_service_sockets/ergo_tor_sock\":\n        #     tor: true\n\n        # Example of a WebSocket listener:\n        # \":8097\":\n        #     websocket: true\n        #     tls:\n        #         cert: fullchain.pem\n        #         key: privkey.pem\n\n    # sets the permissions for Unix listen sockets. on a typical Linux system,\n    # the default is 0775 or 0755, which prevents other users/groups from connecting\n    # to the socket. With 0777, it behaves like a normal TCP socket\n    # where anyone can connect.\n    unix-bind-mode: 0777\n\n    # configure the behavior of Tor listeners (ignored if you didn't enable any):\n    tor-listeners:\n        # if this is true, connections from Tor must authenticate with SASL\n        require-sasl: false\n\n        # what hostname should be displayed for Tor connections?\n        vhost: \"tor-network.onion\"\n\n        # allow at most this many connections at once (0 for no limit):\n        max-connections: 64\n\n        # connection throttling (limit how many connection attempts are allowed at once):\n        throttle-duration: 10m\n        # set to 0 to disable throttling:\n        max-connections-per-duration: 64\n\n    # strict transport security, to get clients to automagically use TLS\n    sts:\n        # whether to advertise STS\n        #\n        # to stop advertising STS, leave this enabled and set 'duration' below to \"0\". this will\n        # advertise to connecting users that the STS policy they have saved is no longer valid\n        enabled: false\n\n        # how long clients should be forced to use TLS for.\n        # setting this to a too-long time will mean bad things if you later remove your TLS.\n        # the default duration below is 1 month, 2 days and 5 minutes.\n        duration: 1mo2d5m\n\n        # tls port - you should be listening on this port above\n        port: 6697\n\n        # should clients include this STS policy when they ship their inbuilt preload lists?\n        preload: false\n\n    websockets:\n        # Restrict the origin of WebSocket connections by matching the \"Origin\" HTTP\n        # header. This setting causes ergo to reject websocket connections unless\n        # they originate from a page on one of the whitelisted websites in this list.\n        # This prevents malicious websites from making their visitors connect to your\n        # ergo instance without their knowledge. An empty list means there are no\n        # restrictions.\n        allowed-origins:\n            # - \"https://ergo.chat\"\n            # - \"https://*.ergo.chat\"\n\n    # casemapping controls what kinds of strings are permitted as identifiers (nicknames,\n    # channel names, account names, etc.), and how they are normalized for case.\n    # the recommended default is 'ascii' (traditional ASCII-only identifiers).\n    # the other options are 'precis', which allows UTF8 identifiers that are \"sane\"\n    # (according to UFC 8265), with additional mitigations for homoglyph attacks,\n    # 'permissive', which allows identifiers containing unusual characters like\n    # emoji, at the cost of increased vulnerability to homoglyph attacks and potential\n    # client compatibility problems, and the legacy mappings 'rfc1459' and\n    # 'rfc1459-strict'. we recommend leaving this value at its default;\n    # however, note that changing it once the network is already up and running is\n    # problematic.\n    casemapping: \"ascii\"\n\n    # enforce-utf8 controls whether the server will preemptively discard non-UTF8\n    # messages (since they cannot be relayed to websocket clients), or will allow\n    # them and relay them to non-websocket clients (as in traditional IRC).\n    enforce-utf8: true\n\n    # whether to look up user hostnames with reverse DNS. there are 3 possibilities:\n    # 1. lookup-hostnames enabled, IP cloaking disabled; users will see each other's hostnames\n    # 2. lookup-hostnames disabled, IP cloaking disabled; users will see each other's numeric IPs\n    # 3. [the default] IP cloaking enabled; users will see cloaked hostnames\n    lookup-hostnames: false\n    # whether to confirm hostname lookups using \"forward-confirmed reverse DNS\", i.e., for\n    # any hostname returned from reverse DNS, resolve it back to an IP address and reject it\n    # unless it matches the connecting IP\n    forward-confirm-hostnames: true\n\n    # use ident protocol to get usernames\n    check-ident: false\n\n    # ignore the supplied user/ident string from the USER command, always setting user/ident\n    # to the following literal value; this can potentially reduce confusion and simplify bans.\n    # the value must begin with a '~' character. comment out / omit to disable:\n    coerce-ident: '~u'\n\n    # 'password' allows you to require a global, shared password (the IRC `PASS` command)\n    # to connect to the server. for operator passwords, see the `opers` section of the\n    # config. for a more secure way to create a private server, see the `require-sasl`\n    # section. you must hash the password with `ergo genpasswd`, then enter the hash here:\n    #password: \"$2a$04$0123456789abcdef0123456789abcdef0123456789abcdef01234\"\n\n    # motd filename\n    # if you change the motd, you should move it to ircd.motd\n    motd: ergo.motd\n\n    # motd formatting codes\n    # if this is true, the motd is escaped using formatting codes like $c, $b, and $i\n    motd-formatting: true\n\n    # relaying using the RELAYMSG command\n    relaymsg:\n        # is relaymsg enabled at all?\n        enabled: true\n\n        # which character(s) are reserved for relayed nicks?\n        separators: \"/\"\n\n        # can channel operators use RELAYMSG in their channels?\n        # our implementation of RELAYMSG makes it safe for chanops to use without the\n        # possibility of real users being silently spoofed\n        available-to-chanops: true\n\n    # IPs/CIDRs the PROXY command can be used from\n    # This should be restricted to localhost (127.0.0.1/8, ::1/128, and unix sockets).\n    # Unless you have a good reason. you should also add these addresses to the\n    # connection limits and throttling exemption lists.\n    proxy-allowed-from:\n        - localhost\n        # - \"192.168.1.1\"\n        # - \"192.168.10.1/24\"\n\n    # controls the use of the WEBIRC command (by IRC<->web interfaces, bouncers and similar)\n    webirc:\n        # one webirc block -- should correspond to one set of gateways\n        -\n            # SHA-256 fingerprint of the TLS certificate the gateway must use to connect\n            # (comment this out to use passwords only)\n            certfp: \"abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789\"\n\n            # password the gateway uses to connect, made with `ergo genpasswd`\n            password: \"$2a$04$abcdef0123456789abcdef0123456789abcdef0123456789abcde\"\n\n            # IPs/CIDRs that can use this webirc command\n            # you should also add these addresses to the connection limits and throttling exemption lists\n            hosts:\n                - localhost\n                # - \"192.168.1.1\"\n                # - \"192.168.10.1/24\"\n\n            # whether to accept the hostname parameter on the WEBIRC line as the IRC hostname\n            # (the default/recommended Ergo configuration will use cloaks instead)\n            accept-hostname: false\n\n    # maximum length of clients' sendQ in bytes\n    # this should be big enough to hold bursts of channel/direct messages\n    max-sendq: 96k\n\n    # compatibility with legacy clients\n    compatibility:\n        # many clients require that the final parameter of certain messages be an\n        # RFC1459 trailing parameter, i.e., prefixed with :, whether or not this is\n        # actually required. this forces Ergo to send those parameters\n        # as trailings. this is recommended unless you're testing clients for conformance;\n        # defaults to true when unset for that reason.\n        force-trailing: true\n\n        # some clients (ZNC 1.6.x and lower, Pidgin 2.12 and lower) do not\n        # respond correctly to SASL messages with the server name as a prefix:\n        # https://github.com/znc/znc/issues/1212\n        # this works around that bug, allowing them to use SASL.\n        send-unprefixed-sasl: true\n\n        # traditionally, IRC servers will truncate and send messages that are\n        # too long to be relayed intact. this behavior can be disabled by setting\n        # allow-truncation to false, in which case Ergo will reject the message\n        # and return an error to the client. (note that this option defaults to true\n        # when unset.)\n        allow-truncation: false\n\n    # IP-based DoS protection\n    ip-limits:\n        # whether to limit the total number of concurrent connections per IP/CIDR\n        count: true\n        # maximum concurrent connections per IP/CIDR\n        max-concurrent-connections: 16\n\n        # whether to restrict the rate of new connections per IP/CIDR\n        throttle: true\n        # how long to keep track of connections for\n        window: 10m\n        # maximum number of new connections per IP/CIDR within the given duration\n        max-connections-per-window: 32\n\n        # how wide the CIDR should be for IPv4 (a /32 is a fully specified IPv4 address)\n        cidr-len-ipv4: 32\n        # how wide the CIDR should be for IPv6 (a /64 is the typical prefix assigned\n        # by an ISP to an individual customer for their LAN)\n        cidr-len-ipv6: 64\n\n        # IPs/networks which are exempted from connection limits\n        exempted:\n            - \"localhost\"\n            # - \"192.168.1.1\"\n            # - \"2001:0db8::/32\"\n\n        # custom connection limits for certain IPs/networks.\n        custom-limits:\n            #\"irccloud\":\n            #    nets:\n            #        - \"192.184.9.108\"  # highgate.irccloud.com\n            #        - \"192.184.9.110\"  # ealing.irccloud.com\n            #        - \"192.184.9.112\"  # charlton.irccloud.com\n            #        - \"192.184.10.118\" # brockwell.irccloud.com\n            #        - \"192.184.10.9\"   # tooting.irccloud.com\n            #        - \"192.184.8.73\"   # hathersage.irccloud.com\n            #        - \"192.184.8.103\"  # stonehaven.irccloud.com\n            #        - \"5.254.36.57\"    # tinside.irccloud.com\n            #        - \"5.254.36.56/29\" # additional ipv4 net\n            #        - \"2001:67c:2f08::/48\"\n            #        - \"2a03:5180:f::/64\"\n            #    max-concurrent-connections: 2048\n            #    max-connections-per-window: 2048\n\n    # pluggable IP ban mechanism, via subprocess invocation\n    # this can be used to check new connections against a DNSBL, for example\n    # see the manual for details on how to write an IP ban checking script\n    ip-check-script:\n        enabled: false\n        command: \"/usr/local/bin/check-ip-ban\"\n        # constant list of args to pass to the command; the actual query\n        # and result are transmitted over stdin/stdout:\n        args: []\n        # timeout for process execution, after which we send a SIGTERM:\n        timeout: 9s\n        # how long after the SIGTERM before we follow up with a SIGKILL:\n        kill-timeout: 1s\n        # how many scripts are allowed to run at once? 0 for no limit:\n        max-concurrency: 64\n        # if true, only check anonymous connections (not logged into an account)\n        # at the very end of the handshake:\n        exempt-sasl: false\n\n    # IP cloaking hides users' IP addresses from other users and from channel admins\n    # (but not from server admins), while still allowing channel admins to ban\n    # offending IP addresses or networks. In place of hostnames derived from reverse\n    # DNS, users see fake domain names like pwbs2ui4377257x8.irc. These names are\n    # generated deterministically from the underlying IP address, but if the underlying\n    # IP is not already known, it is infeasible to recover it from the cloaked name.\n    # If you disable this, you should probably enable lookup-hostnames in its place.\n    ip-cloaking:\n        # whether to enable IP cloaking\n        enabled: true\n\n        # whether to use these cloak settings (specifically, `netname` and `num-bits`)\n        # to produce unique hostnames for always-on clients. you can enable this even if\n        # you disabled IP cloaking for normal clients above. if this is disabled,\n        # always-on clients will all have an identical hostname (the server name).\n        enabled-for-always-on: true\n\n        # fake TLD at the end of the hostname, e.g., pwbs2ui4377257x8.irc\n        # you may want to use your network name here\n        netname: \"irc\"\n\n        # the cloaked hostname is derived only from the CIDR (most significant bits\n        # of the IP address), up to a configurable number of bits. this is the\n        # granularity at which bans will take effect for IPv4. Note that changing\n        # this value will invalidate any stored bans.\n        cidr-len-ipv4: 32\n\n        # analogous granularity for IPv6\n        cidr-len-ipv6: 64\n\n        # number of bits of hash output to include in the cloaked hostname.\n        # more bits means less likelihood of distinct IPs colliding,\n        # at the cost of a longer cloaked hostname. if this value is set to 0,\n        # all users will receive simply `netname` as their cloaked hostname.\n        num-bits: 64\n\n    # secure-nets identifies IPs and CIDRs which are secure at layer 3,\n    # for example, because they are on a trusted internal LAN or a VPN.\n    # plaintext connections from these IPs and CIDRs will be considered\n    # secure (clients will receive the +Z mode and be allowed to resume\n    # or reattach to secure connections). note that loopback IPs are always\n    # considered secure:\n    secure-nets:\n        # - \"10.0.0.0/8\"\n\n    # Ergo will write files to disk under certain circumstances, e.g.,\n    # CPU profiling or data export. by default, these files will be written\n    # to the working directory. set this to customize:\n    #output-path: \"/home/ergo/out\"\n\n    # the hostname used by \"services\", e.g., NickServ, defaults to \"localhost\",\n    # e.g., `NickServ!NickServ@localhost`. uncomment this to override:\n    #override-services-hostname: \"example.network\"\n\n    # in a \"closed-loop\" system where you control the server and all the clients,\n    # you may want to increase the maximum (non-tag) length of an IRC line from\n    # the default value of 512. DO NOT change this on a public server:\n    #max-line-len: 512\n\n    # send all 0's as the LUSERS (user counts) output to non-operators; potentially useful\n    # if you don't want to publicize how popular the server is\n    suppress-lusers: false\n\n# account options\naccounts:\n    # is account authentication enabled, i.e., can users log into existing accounts?\n    authentication-enabled: true\n\n    # account registration\n    registration:\n        # can users register new accounts for themselves? if this is false, operators with\n        # the `accreg` capability can still create accounts with `/NICKSERV SAREGISTER`\n        enabled: true\n\n        # can users use the REGISTER command to register before fully connecting?\n        allow-before-connect: true\n\n        # global throttle on new account creation\n        throttling:\n            enabled: true\n            # window\n            duration: 10m\n            # number of attempts allowed within the window\n            max-attempts: 30\n\n        # this is the bcrypt cost we'll use for account passwords\n        # (note that 4 is the lowest value allowed by the bcrypt library)\n        bcrypt-cost: 4\n\n        # length of time a user has to verify their account before it can be re-registered\n        verify-timeout: \"32h\"\n\n        # options for email verification of account registrations\n        email-verification:\n            enabled: false\n            sender: \"admin@my.network\"\n            require-tls: true\n            helo-domain: \"my.network\" # defaults to server name if unset\n            # set to `tcp4` to force sending over IPv4, `tcp6` to force IPv6:\n            # protocol: \"tcp4\"\n            # set to force a specific source/local IPv4 or IPv6 address:\n            # local-address: \"1.2.3.4\"\n            # options to enable DKIM signing of outgoing emails (recommended, but\n            # requires creating a DNS entry for the public key):\n            # dkim:\n            #     domain: \"my.network\"\n            #     selector: \"20200229\"\n            #     key-file: \"dkim.pem\"\n            # to use an MTA/smarthost instead of sending email directly:\n            # mta:\n            #     server: localhost\n            #     port: 25\n            #     username: \"admin\"\n            #     password: \"hunter2\"\n            #     implicit-tls: false # TLS from the first byte, typically on port 465\n            # addresses that are not accepted for registration:\n            address-blacklist:\n            #    - \"*@mailinator.com\"\n            address-blacklist-syntax: \"glob\" # change to \"regex\" for regular expressions\n            # file of newline-delimited address blacklist entries (no enclosing quotes)\n            # in the above syntax (i.e. either globs or regexes). supersedes\n            # address-blacklist if set:\n            # address-blacklist-file: \"/path/to/address-blacklist-file\"\n            timeout: 60s\n            # email-based password reset:\n            password-reset:\n                enabled: false\n                # time before we allow resending the email\n                cooldown: 1h\n                # time for which a password reset code is valid\n                timeout: 1d\n\n    # throttle account login attempts (to prevent either password guessing, or DoS\n    # attacks on the server aimed at forcing repeated expensive bcrypt computations)\n    login-throttling:\n        enabled: true\n\n        # window\n        duration:  1m\n\n        # number of attempts allowed within the window\n        max-attempts: 3\n\n    # some clients (notably Pidgin and Hexchat) offer only a single password field,\n    # which makes it impossible to specify a separate server password (for the PASS\n    # command) and SASL password. if this option is set to true, a client that\n    # successfully authenticates with SASL will not be required to send\n    # PASS as well, so it can be configured to authenticate with SASL only.\n    skip-server-password: false\n\n    # enable login to accounts via the PASS command, e.g., PASS account:password\n    # this is useful for compatibility with old clients that don't support SASL\n    login-via-pass-command: true\n\n    # advertise the SCRAM-SHA-256 authentication method. set to false in case of\n    # compatibility issues with certain clients:\n    advertise-scram: true\n\n    # require-sasl controls whether clients are required to have accounts\n    # (and sign into them using SASL) to connect to the server\n    require-sasl:\n        # if this is enabled, all clients must authenticate with SASL while connecting.\n        # WARNING: for a private server, you MUST set accounts.registration.enabled\n        # to false as well, in order to prevent non-administrators from registering\n        # accounts.\n        enabled: false\n\n        # IPs/CIDRs which are exempted from the account requirement\n        exempted:\n            - \"localhost\"\n            # - '10.10.0.0/16'\n\n    # nick-reservation controls how, and whether, nicknames are linked to accounts\n    nick-reservation:\n        # is there any enforcement of reserved nicknames?\n        enabled: true\n\n        # how many nicknames, in addition to the account name, can be reserved?\n        # (note that additional nicks are unusable under force-nick-equals-account\n        # or if the client is always-on)\n        additional-nick-limit: 0\n\n        # method describes how nickname reservation is handled\n        #   strict:   users must already be logged in to their account (via\n        #             SASL, PASS account:password, or /NickServ IDENTIFY)\n        #             in order to use their reserved nickname(s)\n        #   optional: no enforcement by default, but allow users to opt in to\n        #             the enforcement level of their choice\n        method: strict\n\n        # allow users to set their own nickname enforcement status, e.g.,\n        # to opt out of strict enforcement\n        allow-custom-enforcement: false\n\n        # format for guest nicknames:\n        # 1. these nicknames cannot be registered or reserved\n        # 2. if a client is automatically renamed by the server,\n        #    this is the template that will be used (e.g., Guest-nccj6rgmt97cg)\n        # 3. if enforce-guest-format (see below) is enabled, clients without\n        #    a registered account will have this template applied to their\n        #    nicknames (e.g., 'katie' will become 'Guest-katie')\n        guest-nickname-format: \"Guest-*\"\n\n        # when enabled, forces users not logged into an account to use\n        # a nickname matching the guest template. a caveat: this may prevent\n        # users from choosing nicknames in scripts different from the guest\n        # nickname format.\n        force-guest-format: false\n\n        # when enabled, forces users logged into an account to use the\n        # account name as their nickname. when combined with strict nickname\n        # enforcement, this lets users treat nicknames and account names\n        # as equivalent for the purpose of ban/invite/exception lists.\n        force-nick-equals-account: true\n\n        # parallel setting to force-nick-equals-account: if true, this forbids\n        # anonymous users (i.e., users not logged into an account) to change their\n        # nickname after the initial connection is complete\n        forbid-anonymous-nick-changes: false\n\n    # multiclient controls whether Ergo allows multiple connections to\n    # attach to the same client/nickname identity; this is part of the\n    # functionality traditionally provided by a bouncer like ZNC\n    multiclient:\n        # when disabled, each connection must use a separate nickname (as is the\n        # typical behavior of IRC servers). when enabled, a new connection that\n        # has authenticated with SASL can associate itself with an existing\n        # client\n        enabled: true\n\n        # if this is disabled, clients have to opt in to bouncer functionality\n        # using nickserv or the cap system. if it's enabled, they can opt out\n        # via nickserv\n        allowed-by-default: true\n\n        # whether to allow clients that remain on the server even\n        # when they have no active connections. The possible values are:\n        # \"disabled\", \"opt-in\", \"opt-out\", or \"mandatory\".\n        always-on: \"opt-in\"\n\n        # whether to mark always-on clients away when they have no active connections:\n        auto-away: \"opt-in\"\n\n        # QUIT always-on clients from the server if they go this long without connecting\n        # (use 0 or omit for no expiration):\n        #always-on-expiration: 90d\n\n    # vhosts controls the assignment of vhosts (strings displayed in place of the user's\n    # hostname/IP) by the HostServ service\n    vhosts:\n        # are vhosts enabled at all?\n        enabled: true\n\n        # maximum length of a vhost\n        max-length: 64\n\n        # regexp for testing the validity of a vhost\n        # (make sure any changes you make here are RFC-compliant)\n        valid-regexp: '^[0-9A-Za-z.\\-_/]+$'\n\n    # modes that are set by default when a user connects\n    # if unset, no user modes will be set by default\n    # +i is invisible (a user's channels are hidden from whois replies)\n    # see  /QUOTE HELP umodes  for more user modes\n    default-user-modes: +i\n\n    # pluggable authentication mechanism, via subprocess invocation\n    # see the manual for details on how to write an authentication plugin script\n    auth-script:\n        enabled: false\n        command: \"/usr/local/bin/authenticate-irc-user\"\n        # constant list of args to pass to the command; the actual authentication\n        # data is transmitted over stdin/stdout:\n        args: []\n        # should we automatically create users if the plugin returns success?\n        autocreate: true\n        # timeout for process execution, after which we send a SIGTERM:\n        timeout: 9s\n        # how long after the SIGTERM before we follow up with a SIGKILL:\n        kill-timeout: 1s\n        # how many scripts are allowed to run at once? 0 for no limit:\n        max-concurrency: 64\n\n    # support for login via OAuth2 bearer tokens\n    oauth2:\n        enabled: false\n        # should we automatically create users on presentation of a valid token?\n        autocreate: true\n        # enable this to use auth-script for validation:\n        auth-script: false\n        introspection-url: \"https://example.com/api/oidc/introspection\"\n        introspection-timeout: 10s\n        # omit for auth method `none`; required for auth method `client_secret_basic`:\n        client-id: \"ergo\"\n        client-secret: \"4TA0I7mJ3fUUcW05KJiODg\"\n\n    # support for login via JWT bearer tokens\n    jwt-auth:\n        enabled: false\n        # should we automatically create users on presentation of a valid token?\n        autocreate: true\n        # any of these token definitions can be accepted, allowing for key rotation\n        tokens:\n            -\n                algorithm: \"hmac\" # either 'hmac', 'rsa', or 'eddsa' (ed25519)\n                # hmac takes a symmetric key, rsa and eddsa take PEM-encoded public keys;\n                # either way, the key can be specified either as a YAML string:\n                key: \"nANiZ1De4v6WnltCHN2H7Q\"\n                # or as a path to the file containing the key:\n                #key-file: \"jwt_pubkey.pem\"\n                # list of JWT claim names to search for the user's account name (make sure the format\n                # is what you expect, especially if using \"sub\"):\n                account-claims: [\"preferred_username\"]\n                # if a claim is formatted as an email address, require it to have the following domain,\n                # and then strip off the domain and use the local-part as the account name:\n                #strip-domain: \"example.com\"\n\n# channel options\nchannels:\n    # modes that are set when new channels are created\n    # +n is no-external-messages, +t is op-only-topic,\n    # +C is no CTCPs (besides ACTION)\n    # see  /QUOTE HELP cmodes  for more channel modes\n    default-modes: +ntC\n\n    # how many channels can a client be in at once?\n    max-channels-per-client: 100\n\n    # if this is true, new channels can only be created by operators with the\n    # `chanreg` operator capability\n    operator-only-creation: false\n\n    # channel registration - requires an account\n    registration:\n        # can users register new channels?\n        enabled: true\n\n        # restrict new channel registrations to operators only?\n        # (operators can then transfer channels to regular users using /CS TRANSFER)\n        operator-only: false\n\n        # how many channels can each account register?\n        max-channels-per-account: 15\n\n    # as a crude countermeasure against spambots, anonymous connections younger\n    # than this value will get an empty response to /LIST (a time period of 0 disables)\n    list-delay: 0s\n\n    # INVITE to an invite-only channel expires after this amount of time\n    # (0 or omit for no expiration):\n    invite-expiration: 24h\n\n    # channels that new clients will automatically join. this should be used with\n    # caution, since traditional IRC users will likely view it as an antifeature.\n    # it may be useful in small community networks that have a single \"primary\" channel:\n    #auto-join:\n    #    - \"#lounge\"\n\n# operator classes:\n# an operator has a single \"class\" (defining a privilege level), which can include\n# multiple \"capabilities\" (defining privileged actions they can take). all\n# currently available operator capabilities are associated with either the\n# 'chat-moderator' class (less privileged) or the 'server-admin' class (full\n# privileges) below: you can mix and match to create new classes.\noper-classes:\n    # chat moderator: can ban/unban users from the server, join channels,\n    # fix mode issues and sort out vhosts.\n    \"chat-moderator\":\n        # title shown in WHOIS\n        title: Chat Moderator\n\n        # capability names\n        capabilities:\n            - \"kill\"      # disconnect user sessions\n            - \"ban\"       # ban IPs, CIDRs, NUH masks, and suspend accounts (UBAN / DLINE / KLINE)\n            - \"nofakelag\" # exempted from \"fakelag\" restrictions on rate of message sending\n            - \"relaymsg\"  # use RELAYMSG in any channel (see the `relaymsg` config block)\n            - \"vhosts\"    # add and remove vhosts from users\n            - \"sajoin\"    # join arbitrary channels, including private channels\n            - \"samode\"    # modify arbitrary channel and user modes\n            - \"snomasks\"  # subscribe to arbitrary server notice masks\n            - \"roleplay\"  # use the (deprecated) roleplay commands in any channel\n\n    # server admin: has full control of the ircd, including nickname and\n    # channel registrations\n    \"server-admin\":\n        # title shown in WHOIS\n        title: Server Admin\n\n        # oper class this extends from\n        extends: \"chat-moderator\"\n\n        # capability names\n        capabilities:\n            - \"rehash\"       # rehash the server, i.e. reload the config at runtime\n            - \"accreg\"       # modify arbitrary account registrations\n            - \"chanreg\"      # modify arbitrary channel registrations\n            - \"history\"      # modify or delete history messages\n            - \"defcon\"       # use the DEFCON command (restrict server capabilities)\n            - \"massmessage\"  # message all users on the server\n\n# ircd operators\nopers:\n    # default operator named 'admin'; log in with /OPER admin <password>\n    admin:\n        # which capabilities this oper has access to\n        class: \"server-admin\"\n\n        # traditionally, operator status is visible to unprivileged users in\n        # WHO and WHOIS responses. this can be disabled with 'hidden'.\n        hidden: true\n\n        # custom whois line (if `hidden` is enabled, visible only to other operators)\n        whois-line: is the server administrator\n\n        # custom hostname (ignored if `hidden` is enabled)\n        #vhost: \"staff\"\n\n        # modes are modes to auto-set upon opering-up. uncomment this to automatically\n        # enable snomasks (\"server notification masks\" that alert you to server events;\n        # see `/quote help snomasks` while opered-up for more information):\n        #modes: +is acdjknoqtuxv\n\n        # operators can be authenticated either by password (with the /OPER command),\n        # or by certificate fingerprint, or both. if a password hash is set, then a\n        # password is required to oper up (e.g., /OPER dan mypassword). to generate\n        # the hash, use `ergo genpasswd`.\n        password: \"$2a$04$0123456789abcdef0123456789abcdef0123456789abcdef01234\"\n\n        # if a SHA-256 certificate fingerprint is configured here, then it will be\n        # required to /OPER. if you comment out the password hash above, then you can\n        # /OPER without a password.\n        #certfp: \"abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789\"\n        # if 'auto' is set (and no password hash is set), operator permissions will be\n        # granted automatically as soon as you connect with the right fingerprint.\n        #auto: true\n\n    # example of a moderator named 'alice'\n    # (log in with /OPER alice <password>):\n    #alice:\n    #    class: \"chat-moderator\"\n    #    whois-line: \"can help with moderation issues!\"\n    #    password: \"$2a$04$0123456789abcdef0123456789abcdef0123456789abcdef01234\"\n\n# logging, takes inspiration from Insp\nlogging:\n    -\n        # how to log these messages\n        #\n        #   file    log to a file\n        #   stdout  log to stdout\n        #   stderr  log to stderr\n        #   (you can specify multiple methods, e.g., to log to both stderr and a file)\n        method: stderr\n\n        # filename to log to, if file method is selected\n        # filename: ircd.log\n\n        # type(s) of logs to keep here. you can use - to exclude those types\n        #\n        # exclusions take precedent over inclusions, so if you exclude a type it will NEVER\n        # be logged, even if you explicitly include it\n        #\n        # useful types include:\n        #   *               everything (usually used with exclusing some types below)\n        #   server          server startup, rehash, and shutdown events\n        #   accounts        account registration and authentication\n        #   channels        channel creation and operations\n        #   opers           oper actions, authentication, etc\n        #   services        actions related to NickServ, ChanServ, etc.\n        #   internal        unexpected runtime behavior, including potential bugs\n        #   userinput       raw lines sent by users\n        #   useroutput      raw lines sent to users\n        type: \"* -userinput -useroutput\"\n\n        # one of: debug info warn error\n        level: info\n    #-\n    #   # example of a file log that avoids logging IP addresses\n    #   method: file\n    #   filename: ircd.log\n    #   type: \"* -userinput -useroutput -connect-ip\"\n    #   level: debug\n\n# debug options\ndebug:\n    # when enabled, Ergo will attempt to recover from certain kinds of\n    # client-triggered runtime errors that would normally crash the server.\n    # this makes the server more resilient to DoS, but could result in incorrect\n    # behavior. deployments that would prefer to \"start from scratch\", e.g., by\n    # letting the process crash and auto-restarting it with systemd, can set\n    # this to false.\n    recover-from-errors: true\n\n    # optionally expose a pprof http endpoint: https://golang.org/pkg/net/http/pprof/\n    # it is strongly recommended that you don't expose this on a public interface;\n    # if you need to access it remotely, you can use an SSH tunnel.\n    # set to `null`, \"\", leave blank, or omit to disable\n    # pprof-listener: \"localhost:6060\"\n\n# lock file preventing multiple instances of Ergo from accidentally being\n# started at once. comment out or set to the empty string (\"\") to disable.\n# this path is relative to the working directory; if your datastore.path\n# is absolute, you should use an absolute path here as well.\nlock-file: \"ircd.lock\"\n\n# datastore configuration\ndatastore:\n    # path to the database file (used to store account and channel registrations):\n    path: ircd.db\n\n    # if the database schema requires an upgrade, `autoupgrade` will attempt to\n    # perform it automatically on startup. the database will be backed\n    # up, and if the upgrade fails, the original database will be restored.\n    autoupgrade: true\n\n    # connection information for MySQL (currently only used for persistent history):\n    mysql:\n        enabled: false\n        host: \"localhost\"\n        port: 3306\n        # if socket-path is set, it will be used instead of host:port\n        #socket-path: \"/var/run/mysqld/mysqld.sock\"\n        user: \"ergo\"\n        password: \"hunter2\"\n        history-database: \"ergo_history\"\n        timeout: 3s\n        max-conns: 4\n        # this may be necessary to prevent middleware from closing your connections:\n        #conn-max-lifetime: 180s\n\n# languages config\nlanguages:\n    # whether to load languages\n    enabled: true\n\n    # default language to use for new clients\n    # 'en' is the default English language in the code\n    default: en\n\n    # which directory contains our language files\n    path: languages\n\n# limits - these need to be the same across the network\nlimits:\n    # nicklen is the max nick length allowed\n    nicklen: 32\n\n    # identlen is the max ident length allowed\n    identlen: 20\n\n    # realnamelen is the maximum realname length allowed\n    realnamelen: 150\n\n    # channellen is the max channel length allowed\n    channellen: 64\n\n    # awaylen is the maximum length of an away message\n    awaylen: 390\n\n    # kicklen is the maximum length of a kick message\n    kicklen: 390\n\n    # topiclen is the maximum length of a channel topic\n    topiclen: 390\n\n    # maximum number of monitor entries a client can have\n    monitor-entries: 100\n\n    # whowas entries to store\n    whowas-entries: 100\n\n    # maximum length of channel lists (beI modes)\n    chan-list-modes: 100\n\n    # maximum number of messages to accept during registration (prevents\n    # DoS / resource exhaustion attacks):\n    registration-messages: 1024\n\n    # message length limits for the new multiline cap\n    multiline:\n        max-bytes: 4096 # 0 means disabled\n        max-lines: 100  # 0 means no limit\n\n# fakelag: prevents clients from spamming commands too rapidly\nfakelag:\n    # whether to enforce fakelag\n    enabled: true\n\n    # time unit for counting command rates\n    window: 1s\n\n    # clients can send this many commands without fakelag being imposed\n    burst-limit: 5\n\n    # once clients have exceeded their burst allowance, they can send only\n    # this many commands per `window`:\n    messages-per-window: 2\n\n    # client status resets to the default state if they go this long without\n    # sending any commands:\n    cooldown: 2s\n\n    # exempt a certain number of command invocations per session from fakelag;\n    # this is to speed up \"resynchronization\" of client state during reattach\n    command-budgets:\n        \"CHATHISTORY\": 16\n        \"MARKREAD\":    16\n        \"MONITOR\":     1\n        \"WHO\":         4\n\n# the roleplay commands are semi-standardized extensions to IRC that allow\n# sending and receiving messages from pseudo-nicknames. this can be used either\n# for actual roleplaying, or for bridging IRC with other protocols.\nroleplay:\n    # are roleplay commands enabled at all? (channels and clients still have to\n    # opt in individually with the +E mode)\n    enabled: false\n\n    # require the \"roleplay\" oper capability to send roleplay messages?\n    require-oper: false\n\n    # require channel operator permissions to send roleplay messages?\n    require-chanops: false\n\n    # add the real nickname, in parentheses, to the end of every roleplay message?\n    add-suffix: true\n\n# external services can integrate with the ircd using JSON Web Tokens (https://jwt.io).\n# in effect, the server can sign a token attesting that the client is present on\n# the server, is a member of a particular channel, etc.\nextjwt:\n    # # default service config (for `EXTJWT #channel`).\n    # # expiration time for the token:\n    # expiration: 45s\n    # # you can configure tokens to be signed either with HMAC and a symmetric secret:\n    # secret: \"65PHvk0K1_sM-raTsCEhatVkER_QD8a0zVV8gG2EWcI\"\n    # # or with an RSA private key:\n    # #rsa-private-key-file: \"extjwt.pem\"\n\n    # # named services (for `EXTJWT #channel service_name`):\n    # services:\n    #     \"jitsi\":\n    #         expiration: 30s\n    #         secret: \"qmamLKDuOzIzlO8XqsGGewei_At11lewh6jtKfSTbkg\"\n\n# history message storage: this is used by CHATHISTORY, HISTORY, znc.in/playback,\n# various autoreplay features, and the resume extension\nhistory:\n    # should we store messages for later playback?\n    # by default, messages are stored in RAM only; they do not persist\n    # across server restarts. however, you may want to understand how message\n    # history interacts with the GDPR and/or any data privacy laws that apply\n    # in your country and the countries of your users.\n    enabled: true\n\n    # how many channel-specific events (messages, joins, parts) should be tracked per channel?\n    channel-length: 2048\n\n    # how many direct messages and notices should be tracked per user?\n    client-length: 256\n\n    # how long should we try to preserve messages?\n    # if `autoresize-window` is 0, the in-memory message buffers are preallocated to\n    # their maximum length. if it is nonzero, the buffers are initially small and\n    # are dynamically expanded up to the maximum length. if the buffer is full\n    # and the oldest message is older than `autoresize-window`, then it will overwrite\n    # the oldest message rather than resize; otherwise, it will expand if possible.\n    autoresize-window: 3d\n\n    # number of messages to automatically play back on channel join (0 to disable):\n    autoreplay-on-join: 0\n\n    # maximum number of CHATHISTORY messages that can be\n    # requested at once (0 disables support for CHATHISTORY)\n    chathistory-maxmessages: 1000\n\n    # maximum number of messages that can be replayed at once during znc emulation\n    # (znc.in/playback, or automatic replay on initial reattach to a persistent client):\n    znc-maxmessages: 2048\n\n    # options to delete old messages, or prevent them from being retrieved\n    restrictions:\n        # if this is set, messages older than this cannot be retrieved by anyone\n        # (and will eventually be deleted from persistent storage, if that's enabled)\n        expire-time: 1w\n\n        # this restricts access to channel history (it can be overridden by channel\n        # owners). options are: 'none' (no restrictions), 'registration-time'\n        # (logged-in users cannot retrieve messages older than their account\n        # registration date, and anonymous users cannot retrieve messages older than\n        # their sign-on time, modulo the grace-period described below), and\n        # 'join-time' (users cannot retrieve messages older than the time they\n        # joined the channel, so only always-on clients can view history).\n        query-cutoff: 'none'\n\n        # if query-cutoff is set to 'registration-time', this allows retrieval\n        # of messages that are up to 'grace-period' older than the above cutoff.\n        # if you use 'registration-time', this is recommended to allow logged-out\n        # users to query history after disconnections.\n        grace-period: 1h\n\n    # options to store history messages in a persistent database (currently only MySQL).\n    # in order to enable any of this functionality, you must configure a MySQL server\n    # in the `datastore.mysql` section. enabling persistence overrides the history\n    # size limits above (`channel-length`, `client-length`, etc.); persistent\n    # history has no limits other than those imposed by expire-time.\n    persistent:\n        enabled: false\n\n        # store unregistered channel messages in the persistent database?\n        unregistered-channels: false\n\n        # for a registered channel, the channel owner can potentially customize\n        # the history storage setting. as the server operator, your options are\n        # 'disabled' (no persistent storage, regardless of per-channel setting),\n        # 'opt-in', 'opt-out', and 'mandatory' (force persistent storage, ignoring\n        # per-channel setting):\n        registered-channels: \"opt-out\"\n\n        # direct messages are only stored in the database for logged-in clients;\n        # you can control how they are stored here (same options as above).\n        # if you enable this, strict nickname reservation is strongly recommended\n        # as well.\n        direct-messages: \"opt-out\"\n\n    # options to control how messages are stored and deleted:\n    retention:\n        # allow users to delete their own messages from history,\n        # and channel operators to delete messages in their channel?\n        allow-individual-delete: false\n\n        # if persistent history is enabled, create additional index tables,\n        # allowing deletion of JSON export of an account's messages. this\n        # may be needed for compliance with data privacy regulations.\n        enable-account-indexing: false\n\n    # options to control storage of TAGMSG\n    tagmsg-storage:\n        # by default, should TAGMSG be stored?\n        default: false\n\n        # if `default` is false, store TAGMSG containing any of these tags:\n        whitelist:\n            - \"+draft/react\"\n            - \"+react\"\n\n        # if `default` is true, don't store TAGMSG containing any of these tags:\n        #blacklist:\n        #    - \"+draft/typing\"\n        #    - \"typing\"\n\n# whether to allow customization of the config at runtime using environment variables,\n# e.g., ERGO__SERVER__MAX_SENDQ=128k. see the manual for more details.\nallow-environment-overrides: true\n"
        },
        {
          "name": "distrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ergo.go",
          "type": "blob",
          "size": 5.6796875,
          "content": "// Copyright (c) 2012-2014 Jeremy Latt\n// Copyright (c) 2014-2015 Edmund Huber\n// Copyright (c) 2016-2017 Daniel Oaks <daniel@danieloaks.net>\n// released under the MIT license\n\npackage main\n\nimport (\n\t\"bufio\"\n\t_ \"embed\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"syscall\"\n\n\t\"golang.org/x/crypto/bcrypt\"\n\t\"golang.org/x/term\"\n\n\t\"github.com/docopt/docopt-go\"\n\t\"github.com/ergochat/ergo/irc\"\n\t\"github.com/ergochat/ergo/irc/logger\"\n\t\"github.com/ergochat/ergo/irc/mkcerts\"\n)\n\n// set via linker flags, either by make or by goreleaser:\nvar commit = \"\"  // git hash\nvar version = \"\" // tagged version\n\n//go:embed default.yaml\nvar defaultConfig string\n\n// get a password from stdin from the user\nfunc getPasswordFromTerminal() string {\n\tbytePassword, err := term.ReadPassword(int(syscall.Stdin))\n\tif err != nil {\n\t\tlog.Fatal(\"Error reading password:\", err.Error())\n\t}\n\treturn string(bytePassword)\n}\n\nfunc fileDoesNotExist(file string) bool {\n\tif _, err := os.Stat(file); os.IsNotExist(err) {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// implements the `ergo mkcerts` command\nfunc doMkcerts(configFile string, quiet bool) {\n\tconfig, err := irc.LoadRawConfig(configFile)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif !quiet {\n\t\tlog.Println(\"making self-signed certificates\")\n\t}\n\n\tcertToKey := make(map[string]string)\n\tfor name, conf := range config.Server.Listeners {\n\t\tif conf.TLS.Cert == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\texistingKey, ok := certToKey[conf.TLS.Cert]\n\t\tif ok {\n\t\t\tif existingKey == conf.TLS.Key {\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tlog.Fatal(\"Conflicting TLS key files for \", conf.TLS.Cert)\n\t\t\t}\n\t\t}\n\t\tif !quiet {\n\t\t\tlog.Printf(\" making cert for %s listener\\n\", name)\n\t\t}\n\t\thost := config.Server.Name\n\t\tcert, key := conf.TLS.Cert, conf.TLS.Key\n\t\tif !(fileDoesNotExist(cert) && fileDoesNotExist(key)) {\n\t\t\tlog.Fatalf(\"Preexisting TLS cert and/or key files: %s %s\", cert, key)\n\t\t}\n\t\terr := mkcerts.CreateCert(\"Ergo\", host, cert, key)\n\t\tif err == nil {\n\t\t\tif !quiet {\n\t\t\t\tlog.Printf(\"  Certificate created at %s : %s\\n\", cert, key)\n\t\t\t}\n\t\t\tcertToKey[cert] = key\n\t\t} else {\n\t\t\tlog.Fatal(\"  Could not create certificate:\", err.Error())\n\t\t}\n\t}\n}\n\nfunc main() {\n\tirc.SetVersionString(version, commit)\n\tusage := `ergo.\nUsage:\n\tergo initdb [--conf <filename>] [--quiet]\n\tergo upgradedb [--conf <filename>] [--quiet]\n\tergo importdb <database.json> [--conf <filename>] [--quiet]\n\tergo genpasswd [--conf <filename>] [--quiet]\n\tergo mkcerts [--conf <filename>] [--quiet]\n\tergo defaultconfig\n\tergo run [--conf <filename>] [--quiet] [--smoke]\n\tergo -h | --help\n\tergo --version\nOptions:\n\t--conf <filename>  Configuration file to use [default: ircd.yaml].\n\t--quiet            Don't show startup/shutdown lines.\n\t-h --help          Show this screen.\n\t--version          Show version.`\n\n\targuments, _ := docopt.ParseArgs(usage, nil, irc.Ver)\n\n\t// don't require a config file for genpasswd\n\tif arguments[\"genpasswd\"].(bool) {\n\t\tvar password string\n\t\tif term.IsTerminal(int(syscall.Stdin)) {\n\t\t\tfmt.Print(\"Enter Password: \")\n\t\t\tpassword = getPasswordFromTerminal()\n\t\t\tfmt.Print(\"\\n\")\n\t\t\tfmt.Print(\"Reenter Password: \")\n\t\t\tconfirm := getPasswordFromTerminal()\n\t\t\tfmt.Print(\"\\n\")\n\t\t\tif confirm != password {\n\t\t\t\tlog.Fatal(\"passwords do not match\")\n\t\t\t}\n\t\t} else {\n\t\t\treader := bufio.NewReader(os.Stdin)\n\t\t\ttext, _ := reader.ReadString('\\n')\n\t\t\tpassword = strings.TrimSpace(text)\n\t\t}\n\t\tif err := irc.ValidatePassphrase(password); err != nil {\n\t\t\tlog.Printf(\"WARNING: this password contains characters that may cause problems with your IRC client software.\\n\")\n\t\t\tlog.Printf(\"We strongly recommend choosing a different password.\\n\")\n\t\t}\n\t\thash, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.MinCost)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"encoding error:\", err.Error())\n\t\t}\n\t\tfmt.Println(string(hash))\n\t\treturn\n\t} else if arguments[\"defaultconfig\"].(bool) {\n\t\tfmt.Print(defaultConfig)\n\t\treturn\n\t} else if arguments[\"mkcerts\"].(bool) {\n\t\tdoMkcerts(arguments[\"--conf\"].(string), arguments[\"--quiet\"].(bool))\n\t\treturn\n\t}\n\n\tconfigfile := arguments[\"--conf\"].(string)\n\tconfig, err := irc.LoadConfig(configfile)\n\tif err != nil {\n\t\t_, isCertError := err.(*irc.CertKeyError)\n\t\tif !(isCertError && arguments[\"mkcerts\"].(bool)) {\n\t\t\tlog.Fatal(\"Config file did not load successfully: \", err.Error())\n\t\t}\n\t}\n\n\tlogman, err := logger.NewManager(config.Logging)\n\tif err != nil {\n\t\tlog.Fatal(\"Logger did not load successfully:\", err.Error())\n\t}\n\n\tif arguments[\"initdb\"].(bool) {\n\t\terr = irc.InitDB(config.Datastore.Path)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"Error while initializing db:\", err.Error())\n\t\t}\n\t\tif !arguments[\"--quiet\"].(bool) {\n\t\t\tlog.Println(\"database initialized: \", config.Datastore.Path)\n\t\t}\n\t} else if arguments[\"upgradedb\"].(bool) {\n\t\terr = irc.UpgradeDB(config)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"Error while upgrading db:\", err.Error())\n\t\t}\n\t\tif !arguments[\"--quiet\"].(bool) {\n\t\t\tlog.Println(\"database upgraded: \", config.Datastore.Path)\n\t\t}\n\t} else if arguments[\"importdb\"].(bool) {\n\t\terr = irc.ImportDB(config, arguments[\"<database.json>\"].(string))\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"Error while importing db:\", err.Error())\n\t\t}\n\t} else if arguments[\"run\"].(bool) {\n\t\tif !arguments[\"--quiet\"].(bool) {\n\t\t\tlogman.Info(\"server\", fmt.Sprintf(\"%s starting\", irc.Ver))\n\t\t}\n\n\t\t// warning if running a non-final version\n\t\tif strings.Contains(irc.Ver, \"unreleased\") {\n\t\t\tlogman.Warning(\"server\", \"You are currently running an unreleased beta version of Ergo that may be unstable and could corrupt your database.\\nIf you are running a production network, please download the latest build from https://ergo.chat/downloads.html and run that instead.\")\n\t\t}\n\n\t\tserver, err := irc.NewServer(config, logman)\n\t\tif err != nil {\n\t\t\tlogman.Error(\"server\", fmt.Sprintf(\"Could not load server: %s\", err.Error()))\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif !arguments[\"--smoke\"].(bool) {\n\t\t\tserver.Run()\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "ergo.motd",
          "type": "blob",
          "size": 1.7314453125,
          "content": "     __ __  ______ ___  ______ ___ \n  __/ // /_/ ____/ __ \\/ ____/ __ \\\n /_  // __/ __/ / /_/ / / __/ / / /\n/_  // __/ /___/ _, _/ /_/ / /_/ / \n /_//_/ /_____/_/ |_|\\____/\\____/  \n\n\nThis is the default Ergo MOTD.\n\n\nIf motd-formatting is enabled in the config file, you can use the dollarsign character to\ncreate special formatting such as bold, italics and color codes.\n\nFor example, here are a few formatted lines (enable motd-formatting to see these in action):\n\n- this is $bbold text$r.\n- this is $iitalics text$r.\n- this is $c[red]red$c and $c[blue]blue$c text.\n- this is $c[red,light blue]red text with a light blue background$c.\n- this is a normal escaped dollarsign: $$\n\nAnd now a few fun colour charts!\n\n$c1,0 00 $c0,1 01 $c0,2 02 $c0,3 03 $c1,4 04 $c0,5 05 $c0,6 06 $c1,7 07 \n$c1,8 08 $c1,9 09 $c0,10 10 $c1,11 11 $c0,12 12 $c1,13 13 $c1,14 14 $c1,15 15 \n\n$c0,16 16 $c0,17 17 $c0,18 18 $c0,19 19 $c0,20 20 $c0,21 21 $c0,22 22 $c0,23 23 $c0,24 24 $c0,25 25 $c0,26 26 $c0,27 27 \n$c0,28 28 $c0,29 29 $c0,30 30 $c0,31 31 $c0,32 32 $c0,33 33 $c0,34 34 $c0,35 35 $c0,36 36 $c0,37 37 $c0,38 38 $c0,39 39 \n$c0,40 40 $c0,41 41 $c0,42 42 $c0,43 43 $c0,44 44 $c0,45 45 $c0,46 46 $c0,47 47 $c0,48 48 $c0,49 49 $c0,50 50 $c0,51 51 \n$c0,52 52 $c0,53 53 $c1,54 54 $c1,55 55 $c1,56 56 $c1,57 57 $c1,58 58 $c0,59 59 $c0,60 60 $c0,61 61 $c0,62 62 $c0,63 63 \n$c0,64 64 $c1,65 65 $c1,66 66 $c1,67 67 $c1,68 68 $c1,69 69 $c1,70 70 $c1,71 71 $c0,72 72 $c0,73 73 $c0,74 74 $c0,75 75 \n$c1,76 76 $c1,77 77 $c1,78 78 $c1,79 79 $c1,80 80 $c1,81 81 $c1,82 82 $c1,83 83 $c1,84 84 $c1,85 85 $c1,86 86 $c1,87 87 \n$c0,88 88 $c0,89 89 $c0,90 90 $c0,91 91 $c0,92 92 $c0,93 93 $c0,94 94 $c0,95 95 $c1,96 96 $c1,97 97 $c1,98 98 $c99,99 99 \n\nFor more information on using these, see MOTDFORMATTING.md\n"
        },
        {
          "name": "gencapdefs.py",
          "type": "blob",
          "size": 8.5166015625,
          "content": "#!/usr/bin/env python3\n\n\"\"\"\nUpdates the capability definitions at irc/caps/defs.go\n\nTo add a capability, add it to the CAPDEFS list below,\nthen run `make capdefs` from the project root.\n\"\"\"\n\nimport io\nimport subprocess\nimport sys\nfrom collections import namedtuple\n\nCapDef = namedtuple(\"CapDef\", ['identifier', 'name', 'url', 'standard'])\n\nCAPDEFS = [\n    CapDef(\n        identifier=\"AccountNotify\",\n        name=\"account-notify\",\n        url=\"https://ircv3.net/specs/extensions/account-notify-3.1.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"AccountTag\",\n        name=\"account-tag\",\n        url=\"https://ircv3.net/specs/extensions/account-tag-3.2.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"AwayNotify\",\n        name=\"away-notify\",\n        url=\"https://ircv3.net/specs/extensions/away-notify-3.1.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"Batch\",\n        name=\"batch\",\n        url=\"https://ircv3.net/specs/extensions/batch-3.2.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"CapNotify\",\n        name=\"cap-notify\",\n        url=\"https://ircv3.net/specs/extensions/cap-notify-3.2.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"ChgHost\",\n        name=\"chghost\",\n        url=\"https://ircv3.net/specs/extensions/chghost-3.2.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"EchoMessage\",\n        name=\"echo-message\",\n        url=\"https://ircv3.net/specs/extensions/echo-message-3.2.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"ExtendedJoin\",\n        name=\"extended-join\",\n        url=\"https://ircv3.net/specs/extensions/extended-join-3.1.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"ExtendedMonitor\",\n        name=\"extended-monitor\",\n        url=\"https://ircv3.net/specs/extensions/extended-monitor.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"InviteNotify\",\n        name=\"invite-notify\",\n        url=\"https://ircv3.net/specs/extensions/invite-notify-3.2.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"LabeledResponse\",\n        name=\"labeled-response\",\n        url=\"https://ircv3.net/specs/extensions/labeled-response.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"Languages\",\n        name=\"draft/languages\",\n        url=\"https://gist.github.com/DanielOaks/8126122f74b26012a3de37db80e4e0c6\",\n        standard=\"proposed IRCv3\",\n    ),\n    CapDef(\n        identifier=\"MessageRedaction\",\n        name=\"draft/message-redaction\",\n        url=\"https://github.com/progval/ircv3-specifications/blob/redaction/extensions/message-redaction.md\",\n        standard=\"proposed IRCv3\",\n    ),\n    CapDef(\n        identifier=\"MessageTags\",\n        name=\"message-tags\",\n        url=\"https://ircv3.net/specs/extensions/message-tags.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"MultiPrefix\",\n        name=\"multi-prefix\",\n        url=\"https://ircv3.net/specs/extensions/multi-prefix-3.1.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"Relaymsg\",\n        name=\"draft/relaymsg\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/417\",\n        standard=\"proposed IRCv3\",\n    ),\n    CapDef(\n        identifier=\"ChannelRename\",\n        name=\"draft/channel-rename\",\n        url=\"https://ircv3.net/specs/extensions/channel-rename\",\n        standard=\"draft IRCv3\",\n    ),\n    CapDef(\n        identifier=\"SASL\",\n        name=\"sasl\",\n        url=\"https://ircv3.net/specs/extensions/sasl-3.2.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"ServerTime\",\n        name=\"server-time\",\n        url=\"https://ircv3.net/specs/extensions/server-time-3.2.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"SetName\",\n        name=\"setname\",\n        url=\"https://ircv3.net/specs/extensions/setname.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"STS\",\n        name=\"sts\",\n        url=\"https://ircv3.net/specs/extensions/sts.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"UserhostInNames\",\n        name=\"userhost-in-names\",\n        url=\"https://ircv3.net/specs/extensions/userhost-in-names-3.2.html\",\n        standard=\"IRCv3\",\n    ),\n    CapDef(\n        identifier=\"ZNCSelfMessage\",\n        name=\"znc.in/self-message\",\n        url=\"https://wiki.znc.in/Query_buffers\",\n        standard=\"ZNC vendor\",\n    ),\n    CapDef(\n        identifier=\"EventPlayback\",\n        name=\"draft/event-playback\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/362\",\n        standard=\"proposed IRCv3\",\n    ),\n    CapDef(\n        identifier=\"ZNCPlayback\",\n        name=\"znc.in/playback\",\n        url=\"https://wiki.znc.in/Playback\",\n        standard=\"ZNC vendor\",\n    ),\n    CapDef(\n        identifier=\"Nope\",\n        name=\"ergo.chat/nope\",\n        url=\"https://ergo.chat/nope\",\n        standard=\"Ergo vendor\",\n    ),\n    CapDef(\n        identifier=\"Multiline\",\n        name=\"draft/multiline\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/398\",\n        standard=\"proposed IRCv3\",\n    ),\n    CapDef(\n        identifier=\"Chathistory\",\n        name=\"draft/chathistory\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/393\",\n        standard=\"proposed IRCv3\",\n    ),\n    CapDef(\n        identifier=\"AccountRegistration\",\n        name=\"draft/account-registration\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/435\",\n        standard=\"draft IRCv3\",\n    ),\n    CapDef(\n        identifier=\"ReadMarker\",\n        name=\"draft/read-marker\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/489\",\n        standard=\"draft IRCv3\",\n    ),\n    CapDef(\n        identifier=\"Persistence\",\n        name=\"draft/persistence\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/503\",\n        standard=\"proposed IRCv3\",\n    ),\n    CapDef(\n        identifier=\"Preaway\",\n        name=\"draft/pre-away\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/514\",\n        standard=\"proposed IRCv3\",\n    ),\n    CapDef(\n        identifier=\"StandardReplies\",\n        name=\"standard-replies\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/506\",\n        standard=\"IRCv3\",\n    ),\n   CapDef(\n        identifier=\"NoImplicitNames\",\n        name=\"draft/no-implicit-names\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/527\",\n        standard=\"proposed IRCv3\",\n    ),\n   CapDef(\n        identifier=\"ExtendedISupport\",\n        name=\"draft/extended-isupport\",\n        url=\"https://github.com/ircv3/ircv3-specifications/pull/543\",\n        standard=\"proposed IRCv3\",\n    ),\n]\n\ndef validate_defs():\n    CAPDEFS.sort(key=lambda d: d.name)\n    numCaps = len(CAPDEFS)\n    numNames = len(set(capdef.name for capdef in CAPDEFS))\n    if numCaps != numNames:\n        raise Exception(\"defs must have unique names, but found duplicates\")\n    numIdentifiers = len(set(capdef.identifier for capdef in CAPDEFS))\n    if numCaps != numIdentifiers:\n        raise Exception(\"defs must have unique identifiers, but found duplicates\")\n\ndef main():\n    validate_defs()\n    output = io.StringIO()\n    print(\"\"\"\npackage caps\n\n/*\n\tWARNING: this file is autogenerated by `make capdefs`\n\tDO NOT EDIT MANUALLY.\n*/\n\n\n    \"\"\", file=output)\n\n\n    numCapabs = len(CAPDEFS)\n    bitsetLen = numCapabs // 32\n    if numCapabs % 32 > 0:\n        bitsetLen += 1\n    print (\"\"\"\nconst (\n\t// number of recognized capabilities:\n\tnumCapabs = %d\n\t// length of the uint32 array that represents the bitset:\n\tbitsetLen = %d\n)\n    \"\"\" % (numCapabs, bitsetLen), file=output)\n\n    print(\"const (\", file=output)\n    for capdef in CAPDEFS:\n        print(\"// %s is the %s capability named \\\"%s\\\":\" % (capdef.identifier, capdef.standard, capdef.name), file=output)\n        print(\"// %s\" % (capdef.url,), file=output)\n        print(\"%s Capability = iota\" % (capdef.identifier,), file=output)\n        print(file=output)\n    print(\")\", file=output)\n\n    print(\"// `capabilityNames[capab]` is the string name of the capability `capab`\", file=output)\n    print(\"\"\"var ( capabilityNames = [numCapabs]string{\"\"\", file=output)\n    for capdef in CAPDEFS:\n        print(\"\\\"%s\\\",\" % (capdef.name,), file=output)\n    print(\"})\", file=output)\n\n    # run the generated code through `gofmt -s`, which will print it to stdout\n    gofmt = subprocess.Popen(['gofmt', '-s'], stdin=subprocess.PIPE)\n    gofmt.communicate(input=output.getvalue().encode('utf-8'))\n    if gofmt.poll() != 0:\n        print(output.getvalue())\n        raise Exception(\"gofmt failed\")\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.587890625,
          "content": "module github.com/ergochat/ergo\n\ngo 1.23\n\nrequire (\n\tcode.cloudfoundry.org/bytefmt v0.0.0-20200131002437-cf55d5288a48\n\tgithub.com/GehirnInc/crypt v0.0.0-20200316065508-bb7000b8a962\n\tgithub.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815\n\tgithub.com/ergochat/confusables v0.0.0-20201108231250-4ab98ab61fb1\n\tgithub.com/ergochat/go-ident v0.0.0-20230911071154-8c30606d6881\n\tgithub.com/ergochat/irc-go v0.5.0-rc2\n\tgithub.com/go-sql-driver/mysql v1.7.0\n\tgithub.com/go-test/deep v1.0.6 // indirect\n\tgithub.com/gofrs/flock v0.8.1\n\tgithub.com/gorilla/websocket v1.4.2\n\tgithub.com/okzk/sdnotify v0.0.0-20180710141335-d9becc38acbd\n\tgithub.com/onsi/ginkgo v1.12.0 // indirect\n\tgithub.com/onsi/gomega v1.9.0 // indirect\n\tgithub.com/stretchr/testify v1.4.0 // indirect\n\tgithub.com/tidwall/buntdb v1.3.1\n\tgithub.com/toorop/go-dkim v0.0.0-20201103131630-e1cd1a0a5208\n\tgithub.com/xdg-go/scram v1.0.2\n\tgolang.org/x/crypto v0.25.0\n\tgolang.org/x/term v0.22.0\n\tgolang.org/x/text v0.16.0\n\tgopkg.in/yaml.v2 v2.4.0\n)\n\nrequire github.com/golang-jwt/jwt/v5 v5.2.1\n\nrequire (\n\tgithub.com/tidwall/btree v1.4.2 // indirect\n\tgithub.com/tidwall/gjson v1.14.3 // indirect\n\tgithub.com/tidwall/grect v0.1.4 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.0 // indirect\n\tgithub.com/tidwall/rtred v0.1.2 // indirect\n\tgithub.com/tidwall/tinyqueue v0.1.1 // indirect\n\tgithub.com/xdg-go/pbkdf2 v1.0.0 // indirect\n\tgolang.org/x/sys v0.22.0 // indirect\n)\n\nreplace github.com/gorilla/websocket => github.com/ergochat/websocket v1.4.2-oragono1\n\nreplace github.com/xdg-go/scram => github.com/ergochat/scram v1.0.2-ergo1\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 8.9453125,
          "content": "code.cloudfoundry.org/bytefmt v0.0.0-20200131002437-cf55d5288a48 h1:/EMHruHCFXR9xClkGV/t0rmHrdhX4+trQUcBqjwc9xE=\ncode.cloudfoundry.org/bytefmt v0.0.0-20200131002437-cf55d5288a48/go.mod h1:wN/zk7mhREp/oviagqUXY3EwuHhWyOvAdsn5Y4CzOrc=\ngithub.com/GehirnInc/crypt v0.0.0-20200316065508-bb7000b8a962 h1:KeNholpO2xKjgaaSyd+DyQRrsQjhbSeS7qe4nEw8aQw=\ngithub.com/GehirnInc/crypt v0.0.0-20200316065508-bb7000b8a962/go.mod h1:kC29dT1vFpj7py2OvG1khBdQpo3kInWP+6QipLbdngo=\ngithub.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815 h1:bWDMxwH3px2JBh6AyO7hdCn/PkvCZXii8TGj7sbtEbQ=\ngithub.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815/go.mod h1:WwZ+bS3ebgob9U8Nd0kOddGdZWjyMGR8Wziv+TBNwSE=\ngithub.com/ergochat/confusables v0.0.0-20201108231250-4ab98ab61fb1 h1:WLHTOodthVyv5NvYLIvWl112kSFv5IInKKrRN2qpons=\ngithub.com/ergochat/confusables v0.0.0-20201108231250-4ab98ab61fb1/go.mod h1:mov+uh1DPWsltdQnOdzn08UO9GsJ3MEvhtu0Ci37fdk=\ngithub.com/ergochat/go-ident v0.0.0-20230911071154-8c30606d6881 h1:+J5m88nvybxB5AnBVGzTXM/yHVytt48rXBGcJGzSbms=\ngithub.com/ergochat/go-ident v0.0.0-20230911071154-8c30606d6881/go.mod h1:ASYJtQujNitna6cVHsNQTGrfWvMPJ5Sa2lZlmsH65uM=\ngithub.com/ergochat/irc-go v0.5.0-rc1 h1:kFoIHExoNFQ2CV+iShAVna/H4xrXQB4t4jK5Sep2j9k=\ngithub.com/ergochat/irc-go v0.5.0-rc1/go.mod h1:2vi7KNpIPWnReB5hmLpl92eMywQvuIeIIGdt/FQCph0=\ngithub.com/ergochat/irc-go v0.5.0-rc2 h1:VuSQJF5K4hWvYSzGa4b8vgL6kzw8HF6LSOejE+RWpAo=\ngithub.com/ergochat/irc-go v0.5.0-rc2/go.mod h1:2vi7KNpIPWnReB5hmLpl92eMywQvuIeIIGdt/FQCph0=\ngithub.com/ergochat/scram v1.0.2-ergo1 h1:2bYXiRFQH636pT0msOG39fmEYl4Eq+OuutcyDsCix/g=\ngithub.com/ergochat/scram v1.0.2-ergo1/go.mod h1:1WAq6h33pAW+iRreB34OORO2Nf7qel3VV3fjBj+hCSs=\ngithub.com/ergochat/websocket v1.4.2-oragono1 h1:plMUunFBM6UoSCIYCKKclTdy/TkkHfUslhOfJQzfueM=\ngithub.com/ergochat/websocket v1.4.2-oragono1/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/go-sql-driver/mysql v1.7.0 h1:ueSltNNllEqE3qcWBTD0iQd3IpL/6U+mJxLkazJ7YPc=\ngithub.com/go-sql-driver/mysql v1.7.0/go.mod h1:OXbVy3sEdcQ2Doequ6Z5BW6fXNQTmx+9S1MCJN5yJMI=\ngithub.com/go-test/deep v1.0.6 h1:UHSEyLZUwX9Qoi99vVwvewiMC8mM2bf7XEM2nqvzEn8=\ngithub.com/go-test/deep v1.0.6/go.mod h1:QV8Hv/iy04NyLBxAdO9njL0iVPN1S4d/A3NVv1V36o8=\ngithub.com/gofrs/flock v0.8.1 h1:+gYjHKf32LDeiEEFhQaotPbLuUXjY5ZqxKgXy7n59aw=\ngithub.com/gofrs/flock v0.8.1/go.mod h1:F1TvTiK9OcQqauNUHlbJvyl9Qa1QvF/gOUDKA14jxHU=\ngithub.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=\ngithub.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/hpcloud/tail v1.0.0 h1:nfCOvKYfkgYP8hkirhJocXT2+zOD8yUNjXaWfTlyFKI=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/okzk/sdnotify v0.0.0-20180710141335-d9becc38acbd h1:+iAPaTbi1gZpcpDwe/BW1fx7Xoesv69hLNGPheoyhBs=\ngithub.com/okzk/sdnotify v0.0.0-20180710141335-d9becc38acbd/go.mod h1:4soZNh0zW0LtYGdQ416i0jO0EIqMGcbtaspRS4BDvRQ=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.12.0 h1:Iw5WCbBcaAAd0fpRb1c9r5YCylv4XDoCSigm1zLevwU=\ngithub.com/onsi/ginkgo v1.12.0/go.mod h1:oUhWkIvk5aDxtKvDDuw8gItl8pKl42LzjC9KZE0HfGg=\ngithub.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=\ngithub.com/onsi/gomega v1.9.0 h1:R1uwffexN6Pr340GtYRIdZmAiN4J+iw6WG4wog1DUXg=\ngithub.com/onsi/gomega v1.9.0/go.mod h1:Ho0h+IUsWyvy1OpqCwxlQ/21gkhVunqlU8fDGcoTdcA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.4.0 h1:2E4SXV/wtOkTonXsotYi4li6zVWxYlZuYNCXe9XRJyk=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/tidwall/assert v0.1.0 h1:aWcKyRBUAdLoVebxo95N7+YZVTFF/ASTr7BN4sLP6XI=\ngithub.com/tidwall/assert v0.1.0/go.mod h1:QLYtGyeqse53vuELQheYl9dngGCJQ+mTtlxcktb+Kj8=\ngithub.com/tidwall/btree v1.4.2 h1:PpkaieETJMUxYNADsjgtNRcERX7mGc/GP2zp/r5FM3g=\ngithub.com/tidwall/btree v1.4.2/go.mod h1:LGm8L/DZjPLmeWGjv5kFrY8dL4uVhMmzmmLYmsObdKE=\ngithub.com/tidwall/buntdb v1.3.1 h1:HKoDF01/aBhl9RjYtbaLnvX9/OuenwvQiC3OP1CcL4o=\ngithub.com/tidwall/buntdb v1.3.1/go.mod h1:lZZrZUWzlyDJKlLQ6DKAy53LnG7m5kHyrEHvvcDmBpU=\ngithub.com/tidwall/gjson v1.12.1/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/gjson v1.14.3 h1:9jvXn7olKEHU1S9vwoMGliaT8jq1vJ7IH/n9zD9Dnlw=\ngithub.com/tidwall/gjson v1.14.3/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/grect v0.1.4 h1:dA3oIgNgWdSspFzn1kS4S/RDpZFLrIxAZOdJKjYapOg=\ngithub.com/tidwall/grect v0.1.4/go.mod h1:9FBsaYRaR0Tcy4UwefBX/UDcDcDy9V5jUcxHzv2jd5Q=\ngithub.com/tidwall/lotsa v1.0.2 h1:dNVBH5MErdaQ/xd9s769R31/n2dXavsQ0Yf4TMEHHw8=\ngithub.com/tidwall/lotsa v1.0.2/go.mod h1:X6NiU+4yHA3fE3Puvpnn1XMDrFZrE9JO2/w+UMuqgR8=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.2.0 h1:RWIZEg2iJ8/g6fDDYzMpobmaoGh5OLl4AXtGUGPcqCs=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/rtred v0.1.2 h1:exmoQtOLvDoO8ud++6LwVsAMTu0KPzLTUrMln8u1yu8=\ngithub.com/tidwall/rtred v0.1.2/go.mod h1:hd69WNXQ5RP9vHd7dqekAz+RIdtfBogmglkZSRxCHFQ=\ngithub.com/tidwall/tinyqueue v0.1.1 h1:SpNEvEggbpyN5DIReaJ2/1ndroY8iyEGxPYxoSaymYE=\ngithub.com/tidwall/tinyqueue v0.1.1/go.mod h1:O/QNHwrnjqr6IHItYrzoHAKYhBkLI67Q096fQP5zMYw=\ngithub.com/toorop/go-dkim v0.0.0-20201103131630-e1cd1a0a5208 h1:PM5hJF7HVfNWmCjMdEfbuOBNXSVF2cMFGgQTPdKCbwM=\ngithub.com/toorop/go-dkim v0.0.0-20201103131630-e1cd1a0a5208/go.mod h1:BzWtXXrXzZUvMacR0oF/fbDDgUPO8L36tDMmRAf14ns=\ngithub.com/xdg-go/pbkdf2 v1.0.0 h1:Su7DPu48wXMwC3bs7MCNG+z4FhcyEuz5dlvchbq0B0c=\ngithub.com/xdg-go/pbkdf2 v1.0.0/go.mod h1:jrpuAogTd400dnrH08LKmI/xc1MbPOebTwRqcT5RDeI=\ngithub.com/xdg-go/stringprep v1.0.2 h1:6iq84/ryjjeRmMJwxutI51F2GIPlP5BfTvXHeYjyhBc=\ngithub.com/xdg-go/stringprep v1.0.2/go.mod h1:8F9zXuvzgwmyT5DUm4GUfZGDdT3W+LCvS6+da4O5kxM=\ngolang.org/x/crypto v0.25.0 h1:ypSNr+bnYL2YhwoMt2zPxHFmbAN1KZs/njMG3hxUp30=\ngolang.org/x/crypto v0.25.0/go.mod h1:T+wALwcMOSE0kXgUAnPAHqTLW+XHgcELELW8VaDgm/M=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.21.0 h1:AQyQV4dYCvJ7vGmJyKki9+PBdyvhkSd8EIx/qb0AYv4=\ngolang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.22.0 h1:RI27ohtqKCnwULzJLqkv897zojh5/DwS/ENaMzUOaWI=\ngolang.org/x/sys v0.22.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.22.0 h1:BbsgPEJULsl2fV/AT3v15Mjva5yXKQDyKf+TbDz7QJk=\ngolang.org/x/term v0.22.0/go.mod h1:F3qCibpT5AMpCRfhfT53vVJwhLtIVHhB9XDjfFvnMI4=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.16.0 h1:a94ExnEXNtEwYLGJSIUxnWoxoRz/ZcCsV63ROupILh4=\ngolang.org/x/text v0.16.0/go.mod h1:GhwF1Be+LQoKShO3cGOHzqOgRrGaYc9AvblQOmPVHnI=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7 h1:9zdDQZ7Thm29KFXgAX/+yaf3eVbP7djjWp/dXAppNCc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/fsnotify.v1 v1.4.7 h1:xOHLXZwVvI9hhs+cLKq5+I5onOuwQLhQwiu63xxlHs4=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\n"
        },
        {
          "name": "irc",
          "type": "tree",
          "content": null
        },
        {
          "name": "irctest",
          "type": "commit",
          "content": null
        },
        {
          "name": "languages",
          "type": "tree",
          "content": null
        },
        {
          "name": "traditional.yaml",
          "type": "blob",
          "size": 44.6083984375,
          "content": "# This is the \"traditional\" or \"mainstream\" config file for Ergo.\n# It tries to replicate the behavior of other ircds, at the cost of not\n# taking full advantage of Ergo's features. This config is suitable for use\n# in IRCv3 conformance testing.\n\n# network configuration\nnetwork:\n    # name of the network\n    name: ErgoTest\n\n# server configuration\nserver:\n    # server name\n    name: ergo.test\n\n    # addresses to listen on\n    listeners:\n        # This version of the config provides a public plaintext listener on\n        # port 6667 for testing and compatibility with legacy applications.\n        # We recommend disabling this listener in a production setting\n        # and replacing it with loopback-only listeners (see default.yaml):\n        \":6667\":\n\n        # The standard SSL/TLS port for IRC is 6697. This will listen on all interfaces:\n        \":6697\":\n            # this is a standard TLS configuration with a single certificate;\n            # see the manual for instructions on how to configure SNI\n            tls:\n                cert: fullchain.pem\n                key: privkey.pem\n            # 'proxy' should typically be false. It's for cloud load balancers that\n            # always send a PROXY protocol header ahead of the connection. See the\n            # manual (\"Reverse proxies\") for more details.\n            proxy: false\n            # optionally set the minimum TLS version (defaults to 1.0):\n            # min-tls-version: 1.2\n\n        # Example of a Unix domain socket for proxying:\n        # \"/tmp/ergo_sock\":\n\n        # Example of a Tor listener: any connection that comes in on this listener will\n        # be considered a Tor connection. It is strongly recommended that this listener\n        # *not* be on a public interface --- it should be on 127.0.0.0/8 or unix domain:\n        # \"/hidden_service_sockets/ergo_tor_sock\":\n        #     tor: true\n\n        # Example of a WebSocket listener:\n        # \":8097\":\n        #     websocket: true\n        #     tls:\n        #         cert: fullchain.pem\n        #         key: privkey.pem\n\n    # sets the permissions for Unix listen sockets. on a typical Linux system,\n    # the default is 0775 or 0755, which prevents other users/groups from connecting\n    # to the socket. With 0777, it behaves like a normal TCP socket\n    # where anyone can connect.\n    unix-bind-mode: 0777\n\n    # configure the behavior of Tor listeners (ignored if you didn't enable any):\n    tor-listeners:\n        # if this is true, connections from Tor must authenticate with SASL\n        require-sasl: false\n\n        # what hostname should be displayed for Tor connections?\n        vhost: \"tor-network.onion\"\n\n        # allow at most this many connections at once (0 for no limit):\n        max-connections: 64\n\n        # connection throttling (limit how many connection attempts are allowed at once):\n        throttle-duration: 10m\n        # set to 0 to disable throttling:\n        max-connections-per-duration: 64\n\n    # strict transport security, to get clients to automagically use TLS\n    sts:\n        # whether to advertise STS\n        #\n        # to stop advertising STS, leave this enabled and set 'duration' below to \"0\". this will\n        # advertise to connecting users that the STS policy they have saved is no longer valid\n        enabled: false\n\n        # how long clients should be forced to use TLS for.\n        # setting this to a too-long time will mean bad things if you later remove your TLS.\n        # the default duration below is 1 month, 2 days and 5 minutes.\n        duration: 1mo2d5m\n\n        # tls port - you should be listening on this port above\n        port: 6697\n\n        # should clients include this STS policy when they ship their inbuilt preload lists?\n        preload: false\n\n    websockets:\n        # Restrict the origin of WebSocket connections by matching the \"Origin\" HTTP\n        # header. This setting causes ergo to reject websocket connections unless\n        # they originate from a page on one of the whitelisted websites in this list.\n        # This prevents malicious websites from making their visitors connect to your\n        # ergo instance without their knowledge. An empty list means there are no\n        # restrictions.\n        allowed-origins:\n            # - \"https://ergo.chat\"\n            # - \"https://*.ergo.chat\"\n\n    # casemapping controls what kinds of strings are permitted as identifiers (nicknames,\n    # channel names, account names, etc.), and how they are normalized for case.\n    # the recommended default is 'ascii' (traditional ASCII-only identifiers).\n    # the other options are 'precis', which allows UTF8 identifiers that are \"sane\"\n    # (according to UFC 8265), with additional mitigations for homoglyph attacks,\n    # 'permissive', which allows identifiers containing unusual characters like\n    # emoji, at the cost of increased vulnerability to homoglyph attacks and potential\n    # client compatibility problems, and the legacy mappings 'rfc1459' and\n    # 'rfc1459-strict'. we recommend leaving this value at its default;\n    # however, note that changing it once the network is already up and running is\n    # problematic.\n    casemapping: \"ascii\"\n\n    # enforce-utf8 controls whether the server will preemptively discard non-UTF8\n    # messages (since they cannot be relayed to websocket clients), or will allow\n    # them and relay them to non-websocket clients (as in traditional IRC).\n    enforce-utf8: true\n\n    # whether to look up user hostnames with reverse DNS. there are 3 possibilities:\n    # 1. [enabled here] lookup-hostnames enabled, IP cloaking disabled; users will see each other's hostnames\n    # 2. lookup-hostnames disabled, IP cloaking disabled; users will see each other's numeric IPs\n    # 3. IP cloaking enabled; users will see cloaked hostnames\n    lookup-hostnames: true\n    # whether to confirm hostname lookups using \"forward-confirmed reverse DNS\", i.e., for\n    # any hostname returned from reverse DNS, resolve it back to an IP address and reject it\n    # unless it matches the connecting IP\n    forward-confirm-hostnames: true\n\n    # use ident protocol to get usernames\n    check-ident: true\n\n    # ignore the supplied user/ident string from the USER command, always setting user/ident\n    # to the following literal value; this can potentially reduce confusion and simplify bans.\n    # the value must begin with a '~' character. comment out / omit to disable:\n    #coerce-ident: '~u'\n\n    # 'password' allows you to require a global, shared password (the IRC `PASS` command)\n    # to connect to the server. for operator passwords, see the `opers` section of the\n    # config. for a more secure way to create a private server, see the `require-sasl`\n    # section. you must hash the password with `ergo genpasswd`, then enter the hash here:\n    #password: \"$2a$04$0123456789abcdef0123456789abcdef0123456789abcdef01234\"\n\n    # motd filename\n    # if you change the motd, you should move it to ircd.motd\n    motd: ergo.motd\n\n    # motd formatting codes\n    # if this is true, the motd is escaped using formatting codes like $c, $b, and $i\n    motd-formatting: true\n\n    # relaying using the RELAYMSG command\n    relaymsg:\n        # is relaymsg enabled at all?\n        enabled: true\n\n        # which character(s) are reserved for relayed nicks?\n        separators: \"/\"\n\n        # can channel operators use RELAYMSG in their channels?\n        # our implementation of RELAYMSG makes it safe for chanops to use without the\n        # possibility of real users being silently spoofed\n        available-to-chanops: true\n\n    # IPs/CIDRs the PROXY command can be used from\n    # This should be restricted to localhost (127.0.0.1/8, ::1/128, and unix sockets).\n    # Unless you have a good reason. you should also add these addresses to the\n    # connection limits and throttling exemption lists.\n    proxy-allowed-from:\n        - localhost\n        # - \"192.168.1.1\"\n        # - \"192.168.10.1/24\"\n\n    # controls the use of the WEBIRC command (by IRC<->web interfaces, bouncers and similar)\n    webirc:\n        # one webirc block -- should correspond to one set of gateways\n        -\n            # SHA-256 fingerprint of the TLS certificate the gateway must use to connect\n            # (comment this out to use passwords only)\n            certfp: \"abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789\"\n\n            # password the gateway uses to connect, made with `ergo genpasswd`\n            password: \"$2a$04$abcdef0123456789abcdef0123456789abcdef0123456789abcde\"\n\n            # IPs/CIDRs that can use this webirc command\n            # you should also add these addresses to the connection limits and throttling exemption lists\n            hosts:\n                - localhost\n                # - \"192.168.1.1\"\n                # - \"192.168.10.1/24\"\n\n            # whether to accept the hostname parameter on the WEBIRC line as the IRC hostname\n            accept-hostname: true\n\n    # maximum length of clients' sendQ in bytes\n    # this should be big enough to hold bursts of channel/direct messages\n    max-sendq: 96k\n\n    # compatibility with legacy clients\n    compatibility:\n        # many clients require that the final parameter of certain messages be an\n        # RFC1459 trailing parameter, i.e., prefixed with :, whether or not this is\n        # actually required. this forces Ergo to send those parameters\n        # as trailings. this is recommended unless you're testing clients for conformance;\n        # defaults to true when unset for that reason.\n        force-trailing: true\n\n        # some clients (ZNC 1.6.x and lower, Pidgin 2.12 and lower) do not\n        # respond correctly to SASL messages with the server name as a prefix:\n        # https://github.com/znc/znc/issues/1212\n        # this works around that bug, allowing them to use SASL.\n        send-unprefixed-sasl: true\n\n        # traditionally, IRC servers will truncate and send messages that are\n        # too long to be relayed intact. this behavior can be disabled by setting\n        # allow-truncation to false, in which case Ergo will reject the message\n        # and return an error to the client. (note that this option defaults to true\n        # when unset.)\n        allow-truncation: true\n\n    # IP-based DoS protection\n    ip-limits:\n        # whether to limit the total number of concurrent connections per IP/CIDR\n        count: true\n        # maximum concurrent connections per IP/CIDR\n        max-concurrent-connections: 16\n\n        # whether to restrict the rate of new connections per IP/CIDR\n        throttle: true\n        # how long to keep track of connections for\n        window: 10m\n        # maximum number of new connections per IP/CIDR within the given duration\n        max-connections-per-window: 32\n\n        # how wide the CIDR should be for IPv4 (a /32 is a fully specified IPv4 address)\n        cidr-len-ipv4: 32\n        # how wide the CIDR should be for IPv6 (a /64 is the typical prefix assigned\n        # by an ISP to an individual customer for their LAN)\n        cidr-len-ipv6: 64\n\n        # IPs/networks which are exempted from connection limits\n        exempted:\n            - \"localhost\"\n            # - \"192.168.1.1\"\n            # - \"2001:0db8::/32\"\n\n        # custom connection limits for certain IPs/networks.\n        custom-limits:\n            #\"irccloud\":\n            #    nets:\n            #        - \"192.184.9.108\"  # highgate.irccloud.com\n            #        - \"192.184.9.110\"  # ealing.irccloud.com\n            #        - \"192.184.9.112\"  # charlton.irccloud.com\n            #        - \"192.184.10.118\" # brockwell.irccloud.com\n            #        - \"192.184.10.9\"   # tooting.irccloud.com\n            #        - \"192.184.8.73\"   # hathersage.irccloud.com\n            #        - \"192.184.8.103\"  # stonehaven.irccloud.com\n            #        - \"5.254.36.57\"    # tinside.irccloud.com\n            #        - \"5.254.36.56/29\" # additional ipv4 net\n            #        - \"2001:67c:2f08::/48\"\n            #        - \"2a03:5180:f::/64\"\n            #    max-concurrent-connections: 2048\n            #    max-connections-per-window: 2048\n\n    # pluggable IP ban mechanism, via subprocess invocation\n    # this can be used to check new connections against a DNSBL, for example\n    # see the manual for details on how to write an IP ban checking script\n    ip-check-script:\n        enabled: false\n        command: \"/usr/local/bin/check-ip-ban\"\n        # constant list of args to pass to the command; the actual query\n        # and result are transmitted over stdin/stdout:\n        args: []\n        # timeout for process execution, after which we send a SIGTERM:\n        timeout: 9s\n        # how long after the SIGTERM before we follow up with a SIGKILL:\n        kill-timeout: 1s\n        # how many scripts are allowed to run at once? 0 for no limit:\n        max-concurrency: 64\n        # if true, only check anonymous connections (not logged into an account)\n        # at the very end of the handshake:\n        exempt-sasl: false\n\n    # IP cloaking hides users' IP addresses from other users and from channel admins\n    # (but not from server admins), while still allowing channel admins to ban\n    # offending IP addresses or networks. In place of hostnames derived from reverse\n    # DNS, users see fake domain names like pwbs2ui4377257x8.irc. These names are\n    # generated deterministically from the underlying IP address, but if the underlying\n    # IP is not already known, it is infeasible to recover it from the cloaked name.\n    ip-cloaking:\n        # whether to enable IP cloaking\n        enabled: false\n\n        # whether to use these cloak settings (specifically, `netname` and `num-bits`)\n        # to produce unique hostnames for always-on clients. you can enable this even if\n        # you disabled IP cloaking for normal clients above. if this is disabled,\n        # always-on clients will all have an identical hostname (the server name).\n        enabled-for-always-on: true\n\n        # fake TLD at the end of the hostname, e.g., pwbs2ui4377257x8.irc\n        # you may want to use your network name here\n        netname: \"irc\"\n\n        # the cloaked hostname is derived only from the CIDR (most significant bits\n        # of the IP address), up to a configurable number of bits. this is the\n        # granularity at which bans will take effect for IPv4. Note that changing\n        # this value will invalidate any stored bans.\n        cidr-len-ipv4: 32\n\n        # analogous granularity for IPv6\n        cidr-len-ipv6: 64\n\n        # number of bits of hash output to include in the cloaked hostname.\n        # more bits means less likelihood of distinct IPs colliding,\n        # at the cost of a longer cloaked hostname. if this value is set to 0,\n        # all users will receive simply `netname` as their cloaked hostname.\n        num-bits: 64\n\n    # secure-nets identifies IPs and CIDRs which are secure at layer 3,\n    # for example, because they are on a trusted internal LAN or a VPN.\n    # plaintext connections from these IPs and CIDRs will be considered\n    # secure (clients will receive the +Z mode and be allowed to resume\n    # or reattach to secure connections). note that loopback IPs are always\n    # considered secure:\n    secure-nets:\n        # - \"10.0.0.0/8\"\n\n    # Ergo will write files to disk under certain circumstances, e.g.,\n    # CPU profiling or data export. by default, these files will be written\n    # to the working directory. set this to customize:\n    #output-path: \"/home/ergo/out\"\n\n    # the hostname used by \"services\", e.g., NickServ, defaults to \"localhost\",\n    # e.g., `NickServ!NickServ@localhost`. uncomment this to override:\n    #override-services-hostname: \"example.network\"\n\n    # in a \"closed-loop\" system where you control the server and all the clients,\n    # you may want to increase the maximum (non-tag) length of an IRC line from\n    # the default value of 512. DO NOT change this on a public server:\n    #max-line-len: 512\n\n    # send all 0's as the LUSERS (user counts) output to non-operators; potentially useful\n    # if you don't want to publicize how popular the server is\n    suppress-lusers: false\n\n# account options\naccounts:\n    # is account authentication enabled, i.e., can users log into existing accounts?\n    authentication-enabled: true\n\n    # account registration\n    registration:\n        # can users register new accounts for themselves? if this is false, operators with\n        # the `accreg` capability can still create accounts with `/NICKSERV SAREGISTER`\n        enabled: true\n\n        # can users use the REGISTER command to register before fully connecting?\n        allow-before-connect: true\n\n        # global throttle on new account creation\n        throttling:\n            enabled: true\n            # window\n            duration: 10m\n            # number of attempts allowed within the window\n            max-attempts: 30\n\n        # this is the bcrypt cost we'll use for account passwords\n        # (note that 4 is the lowest value allowed by the bcrypt library)\n        bcrypt-cost: 4\n\n        # length of time a user has to verify their account before it can be re-registered\n        verify-timeout: \"32h\"\n\n        # options for email verification of account registrations\n        email-verification:\n            enabled: false\n            sender: \"admin@my.network\"\n            require-tls: true\n            helo-domain: \"my.network\" # defaults to server name if unset\n            # set to `tcp4` to force sending over IPv4, `tcp6` to force IPv6:\n            # protocol: \"tcp4\"\n            # set to force a specific source/local IPv4 or IPv6 address:\n            # local-address: \"1.2.3.4\"\n            # options to enable DKIM signing of outgoing emails (recommended, but\n            # requires creating a DNS entry for the public key):\n            # dkim:\n            #     domain: \"my.network\"\n            #     selector: \"20200229\"\n            #     key-file: \"dkim.pem\"\n            # to use an MTA/smarthost instead of sending email directly:\n            # mta:\n            #     server: localhost\n            #     port: 25\n            #     username: \"admin\"\n            #     password: \"hunter2\"\n            #     implicit-tls: false # TLS from the first byte, typically on port 465\n            # addresses that are not accepted for registration:\n            address-blacklist:\n            #    - \"*@mailinator.com\"\n            address-blacklist-syntax: \"glob\" # change to \"regex\" for regular expressions\n            # file of newline-delimited address blacklist entries (no enclosing quotes)\n            # in the above syntax (i.e. either globs or regexes). supersedes\n            # address-blacklist if set:\n            # address-blacklist-file: \"/path/to/address-blacklist-file\"\n            timeout: 60s\n            # email-based password reset:\n            password-reset:\n                enabled: false\n                # time before we allow resending the email\n                cooldown: 1h\n                # time for which a password reset code is valid\n                timeout: 1d\n\n    # throttle account login attempts (to prevent either password guessing, or DoS\n    # attacks on the server aimed at forcing repeated expensive bcrypt computations)\n    login-throttling:\n        enabled: true\n\n        # window\n        duration:  1m\n\n        # number of attempts allowed within the window\n        max-attempts: 3\n\n    # some clients (notably Pidgin and Hexchat) offer only a single password field,\n    # which makes it impossible to specify a separate server password (for the PASS\n    # command) and SASL password. if this option is set to true, a client that\n    # successfully authenticates with SASL will not be required to send\n    # PASS as well, so it can be configured to authenticate with SASL only.\n    skip-server-password: false\n\n    # enable login to accounts via the PASS command, e.g., PASS account:password\n    # this is useful for compatibility with old clients that don't support SASL\n    login-via-pass-command: false\n\n    # advertise the SCRAM-SHA-256 authentication method. set to false in case of\n    # compatibility issues with certain clients:\n    advertise-scram: true\n\n    # require-sasl controls whether clients are required to have accounts\n    # (and sign into them using SASL) to connect to the server\n    require-sasl:\n        # if this is enabled, all clients must authenticate with SASL while connecting.\n        # WARNING: for a private server, you MUST set accounts.registration.enabled\n        # to false as well, in order to prevent non-administrators from registering\n        # accounts.\n        enabled: false\n\n        # IPs/CIDRs which are exempted from the account requirement\n        exempted:\n            - \"localhost\"\n            # - '10.10.0.0/16'\n\n    # nick-reservation controls how, and whether, nicknames are linked to accounts\n    nick-reservation:\n        # is there any enforcement of reserved nicknames?\n        enabled: true\n\n        # how many nicknames, in addition to the account name, can be reserved?\n        # (note that additional nicks are unusable under force-nick-equals-account\n        # or if the client is always-on)\n        additional-nick-limit: 2\n\n        # method describes how nickname reservation is handled\n        #   strict:   users must already be logged in to their account (via\n        #             SASL, PASS account:password, or /NickServ IDENTIFY)\n        #             in order to use their reserved nickname(s)\n        #   optional: no enforcement by default, but allow users to opt in to\n        #             the enforcement level of their choice\n        method: optional\n\n        # allow users to set their own nickname enforcement status, e.g.,\n        # to opt out of strict enforcement\n        allow-custom-enforcement: true\n\n        # format for guest nicknames:\n        # 1. these nicknames cannot be registered or reserved\n        # 2. if a client is automatically renamed by the server,\n        #    this is the template that will be used (e.g., Guest-nccj6rgmt97cg)\n        # 3. if enforce-guest-format (see below) is enabled, clients without\n        #    a registered account will have this template applied to their\n        #    nicknames (e.g., 'katie' will become 'Guest-katie')\n        guest-nickname-format: \"Guest-*\"\n\n        # when enabled, forces users not logged into an account to use\n        # a nickname matching the guest template. a caveat: this may prevent\n        # users from choosing nicknames in scripts different from the guest\n        # nickname format.\n        force-guest-format: false\n\n        # when enabled, forces users logged into an account to use the\n        # account name as their nickname. when combined with strict nickname\n        # enforcement, this lets users treat nicknames and account names\n        # as equivalent for the purpose of ban/invite/exception lists.\n        force-nick-equals-account: false\n\n        # parallel setting to force-nick-equals-account: if true, this forbids\n        # anonymous users (i.e., users not logged into an account) to change their\n        # nickname after the initial connection is complete\n        forbid-anonymous-nick-changes: false\n\n    # multiclient controls whether Ergo allows multiple connections to\n    # attach to the same client/nickname identity; this is part of the\n    # functionality traditionally provided by a bouncer like ZNC\n    multiclient:\n        # when disabled, each connection must use a separate nickname (as is the\n        # typical behavior of IRC servers). when enabled, a new connection that\n        # has authenticated with SASL can associate itself with an existing\n        # client\n        enabled: true\n\n        # if this is disabled, clients have to opt in to bouncer functionality\n        # using nickserv or the cap system. if it's enabled, they can opt out\n        # via nickserv\n        allowed-by-default: false\n\n        # whether to allow clients that remain on the server even\n        # when they have no active connections. The possible values are:\n        # \"disabled\", \"opt-in\", \"opt-out\", or \"mandatory\".\n        always-on: \"disabled\"\n\n        # whether to mark always-on clients away when they have no active connections:\n        auto-away: \"opt-in\"\n\n        # QUIT always-on clients from the server if they go this long without connecting\n        # (use 0 or omit for no expiration):\n        #always-on-expiration: 90d\n\n    # vhosts controls the assignment of vhosts (strings displayed in place of the user's\n    # hostname/IP) by the HostServ service\n    vhosts:\n        # are vhosts enabled at all?\n        enabled: true\n\n        # maximum length of a vhost\n        max-length: 64\n\n        # regexp for testing the validity of a vhost\n        # (make sure any changes you make here are RFC-compliant)\n        valid-regexp: '^[0-9A-Za-z.\\-_/]+$'\n\n    # modes that are set by default when a user connects\n    # if unset, no user modes will be set by default\n    # +i is invisible (a user's channels are hidden from whois replies)\n    # see  /QUOTE HELP umodes  for more user modes\n    # default-user-modes: +i\n\n    # pluggable authentication mechanism, via subprocess invocation\n    # see the manual for details on how to write an authentication plugin script\n    auth-script:\n        enabled: false\n        command: \"/usr/local/bin/authenticate-irc-user\"\n        # constant list of args to pass to the command; the actual authentication\n        # data is transmitted over stdin/stdout:\n        args: []\n        # should we automatically create users if the plugin returns success?\n        autocreate: true\n        # timeout for process execution, after which we send a SIGTERM:\n        timeout: 9s\n        # how long after the SIGTERM before we follow up with a SIGKILL:\n        kill-timeout: 1s\n        # how many scripts are allowed to run at once? 0 for no limit:\n        max-concurrency: 64\n\n    # support for login via OAuth2 bearer tokens\n    oauth2:\n        enabled: false\n        # should we automatically create users on presentation of a valid token?\n        autocreate: true\n        # enable this to use auth-script for validation:\n        auth-script: false\n        introspection-url: \"https://example.com/api/oidc/introspection\"\n        introspection-timeout: 10s\n        # omit for auth method `none`; required for auth method `client_secret_basic`:\n        client-id: \"ergo\"\n        client-secret: \"4TA0I7mJ3fUUcW05KJiODg\"\n\n    # support for login via JWT bearer tokens\n    jwt-auth:\n        enabled: false\n        # should we automatically create users on presentation of a valid token?\n        autocreate: true\n        # any of these token definitions can be accepted, allowing for key rotation\n        tokens:\n            -\n                algorithm: \"hmac\" # either 'hmac', 'rsa', or 'eddsa' (ed25519)\n                # hmac takes a symmetric key, rsa and eddsa take PEM-encoded public keys;\n                # either way, the key can be specified either as a YAML string:\n                key: \"nANiZ1De4v6WnltCHN2H7Q\"\n                # or as a path to the file containing the key:\n                #key-file: \"jwt_pubkey.pem\"\n                # list of JWT claim names to search for the user's account name (make sure the format\n                # is what you expect, especially if using \"sub\"):\n                account-claims: [\"preferred_username\"]\n                # if a claim is formatted as an email address, require it to have the following domain,\n                # and then strip off the domain and use the local-part as the account name:\n                #strip-domain: \"example.com\"\n\n# channel options\nchannels:\n    # modes that are set when new channels are created\n    # +n is no-external-messages and +t is op-only-topic\n    # see  /QUOTE HELP cmodes  for more channel modes\n    default-modes: +nt\n\n    # how many channels can a client be in at once?\n    max-channels-per-client: 100\n\n    # if this is true, new channels can only be created by operators with the\n    # `chanreg` operator capability\n    operator-only-creation: false\n\n    # channel registration - requires an account\n    registration:\n        # can users register new channels?\n        enabled: true\n\n        # restrict new channel registrations to operators only?\n        # (operators can then transfer channels to regular users using /CS TRANSFER)\n        operator-only: false\n\n        # how many channels can each account register?\n        max-channels-per-account: 15\n\n    # as a crude countermeasure against spambots, anonymous connections younger\n    # than this value will get an empty response to /LIST (a time period of 0 disables)\n    list-delay: 0s\n\n    # INVITE to an invite-only channel expires after this amount of time\n    # (0 or omit for no expiration):\n    invite-expiration: 24h\n\n    # channels that new clients will automatically join. this should be used with\n    # caution, since traditional IRC users will likely view it as an antifeature.\n    # it may be useful in small community networks that have a single \"primary\" channel:\n    #auto-join:\n    #    - \"#lounge\"\n\n# operator classes:\n# an operator has a single \"class\" (defining a privilege level), which can include\n# multiple \"capabilities\" (defining privileged actions they can take). all\n# currently available operator capabilities are associated with either the\n# 'chat-moderator' class (less privileged) or the 'server-admin' class (full\n# privileges) below: you can mix and match to create new classes.\noper-classes:\n    # chat moderator: can ban/unban users from the server, join channels,\n    # fix mode issues and sort out vhosts.\n    \"chat-moderator\":\n        # title shown in WHOIS\n        title: Chat Moderator\n\n        # capability names\n        capabilities:\n            - \"kill\"      # disconnect user sessions\n            - \"ban\"       # ban IPs, CIDRs, NUH masks, and suspend accounts (UBAN / DLINE / KLINE)\n            - \"nofakelag\" # exempted from \"fakelag\" restrictions on rate of message sending\n            - \"relaymsg\"  # use RELAYMSG in any channel (see the `relaymsg` config block)\n            - \"vhosts\"    # add and remove vhosts from users\n            - \"sajoin\"    # join arbitrary channels, including private channels\n            - \"samode\"    # modify arbitrary channel and user modes\n            - \"snomasks\"  # subscribe to arbitrary server notice masks\n            - \"roleplay\"  # use the (deprecated) roleplay commands in any channel\n\n    # server admin: has full control of the ircd, including nickname and\n    # channel registrations\n    \"server-admin\":\n        # title shown in WHOIS\n        title: Server Admin\n\n        # oper class this extends from\n        extends: \"chat-moderator\"\n\n        # capability names\n        capabilities:\n            - \"rehash\"       # rehash the server, i.e. reload the config at runtime\n            - \"accreg\"       # modify arbitrary account registrations\n            - \"chanreg\"      # modify arbitrary channel registrations\n            - \"history\"      # modify or delete history messages\n            - \"defcon\"       # use the DEFCON command (restrict server capabilities)\n            - \"massmessage\"  # message all users on the server\n\n# ircd operators\nopers:\n    # default operator named 'admin'; log in with /OPER admin <password>\n    admin:\n        # which capabilities this oper has access to\n        class: \"server-admin\"\n\n        # traditionally, operator status is visible to unprivileged users in\n        # WHO and WHOIS responses. this can be disabled with 'hidden'.\n        hidden: false\n\n        # custom whois line (if `hidden` is enabled, visible only to other operators)\n        whois-line: is the server administrator\n\n        # custom hostname (ignored if `hidden` is enabled)\n        vhost: \"staff\"\n\n        # modes are modes to auto-set upon opering-up. uncomment this to automatically\n        # enable snomasks (\"server notification masks\" that alert you to server events;\n        # see `/quote help snomasks` while opered-up for more information):\n        #modes: +is acdjknoqtuxv\n\n        # operators can be authenticated either by password (with the /OPER command),\n        # or by certificate fingerprint, or both. if a password hash is set, then a\n        # password is required to oper up (e.g., /OPER dan mypassword). to generate\n        # the hash, use `ergo genpasswd`.\n        password: \"$2a$04$0123456789abcdef0123456789abcdef0123456789abcdef01234\"\n\n        # if a SHA-256 certificate fingerprint is configured here, then it will be\n        # required to /OPER. if you comment out the password hash above, then you can\n        # /OPER without a password.\n        #certfp: \"abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789\"\n        # if 'auto' is set (and no password hash is set), operator permissions will be\n        # granted automatically as soon as you connect with the right fingerprint.\n        #auto: true\n\n    # example of a moderator named 'alice'\n    # (log in with /OPER alice <password>):\n    #alice:\n    #    class: \"chat-moderator\"\n    #    whois-line: \"can help with moderation issues!\"\n    #    password: \"$2a$04$0123456789abcdef0123456789abcdef0123456789abcdef01234\"\n\n# logging, takes inspiration from Insp\nlogging:\n    -\n        # how to log these messages\n        #\n        #   file    log to a file\n        #   stdout  log to stdout\n        #   stderr  log to stderr\n        #   (you can specify multiple methods, e.g., to log to both stderr and a file)\n        method: stderr\n\n        # filename to log to, if file method is selected\n        # filename: ircd.log\n\n        # type(s) of logs to keep here. you can use - to exclude those types\n        #\n        # exclusions take precedent over inclusions, so if you exclude a type it will NEVER\n        # be logged, even if you explicitly include it\n        #\n        # useful types include:\n        #   *               everything (usually used with exclusing some types below)\n        #   server          server startup, rehash, and shutdown events\n        #   accounts        account registration and authentication\n        #   channels        channel creation and operations\n        #   opers           oper actions, authentication, etc\n        #   services        actions related to NickServ, ChanServ, etc.\n        #   internal        unexpected runtime behavior, including potential bugs\n        #   userinput       raw lines sent by users\n        #   useroutput      raw lines sent to users\n        type: \"* -userinput -useroutput\"\n\n        # one of: debug info warn error\n        level: info\n    #-\n    #   # example of a file log that avoids logging IP addresses\n    #   method: file\n    #   filename: ircd.log\n    #   type: \"* -userinput -useroutput -connect-ip\"\n    #   level: debug\n\n# debug options\ndebug:\n    # when enabled, Ergo will attempt to recover from certain kinds of\n    # client-triggered runtime errors that would normally crash the server.\n    # this makes the server more resilient to DoS, but could result in incorrect\n    # behavior. deployments that would prefer to \"start from scratch\", e.g., by\n    # letting the process crash and auto-restarting it with systemd, can set\n    # this to false.\n    recover-from-errors: true\n\n    # optionally expose a pprof http endpoint: https://golang.org/pkg/net/http/pprof/\n    # it is strongly recommended that you don't expose this on a public interface;\n    # if you need to access it remotely, you can use an SSH tunnel.\n    # set to `null`, \"\", leave blank, or omit to disable\n    # pprof-listener: \"localhost:6060\"\n\n# lock file preventing multiple instances of Ergo from accidentally being\n# started at once. comment out or set to the empty string (\"\") to disable.\n# this path is relative to the working directory; if your datastore.path\n# is absolute, you should use an absolute path here as well.\nlock-file: \"ircd.lock\"\n\n# datastore configuration\ndatastore:\n    # path to the database file (used to store account and channel registrations):\n    path: ircd.db\n\n    # if the database schema requires an upgrade, `autoupgrade` will attempt to\n    # perform it automatically on startup. the database will be backed\n    # up, and if the upgrade fails, the original database will be restored.\n    autoupgrade: true\n\n    # connection information for MySQL (currently only used for persistent history):\n    mysql:\n        enabled: false\n        host: \"localhost\"\n        port: 3306\n        # if socket-path is set, it will be used instead of host:port\n        #socket-path: \"/var/run/mysqld/mysqld.sock\"\n        user: \"ergo\"\n        password: \"hunter2\"\n        history-database: \"ergo_history\"\n        timeout: 3s\n        max-conns: 4\n        # this may be necessary to prevent middleware from closing your connections:\n        #conn-max-lifetime: 180s\n\n# languages config\nlanguages:\n    # whether to load languages\n    enabled: true\n\n    # default language to use for new clients\n    # 'en' is the default English language in the code\n    default: en\n\n    # which directory contains our language files\n    path: languages\n\n# limits - these need to be the same across the network\nlimits:\n    # nicklen is the max nick length allowed\n    nicklen: 32\n\n    # identlen is the max ident length allowed\n    identlen: 20\n\n    # realnamelen is the maximum realname length allowed\n    realnamelen: 150\n\n    # channellen is the max channel length allowed\n    channellen: 64\n\n    # awaylen is the maximum length of an away message\n    awaylen: 390\n\n    # kicklen is the maximum length of a kick message\n    kicklen: 390\n\n    # topiclen is the maximum length of a channel topic\n    topiclen: 390\n\n    # maximum number of monitor entries a client can have\n    monitor-entries: 100\n\n    # whowas entries to store\n    whowas-entries: 100\n\n    # maximum length of channel lists (beI modes)\n    chan-list-modes: 100\n\n    # maximum number of messages to accept during registration (prevents\n    # DoS / resource exhaustion attacks):\n    registration-messages: 1024\n\n    # message length limits for the new multiline cap\n    multiline:\n        max-bytes: 4096 # 0 means disabled\n        max-lines: 100  # 0 means no limit\n\n# fakelag: prevents clients from spamming commands too rapidly\nfakelag:\n    # whether to enforce fakelag\n    enabled: true\n\n    # time unit for counting command rates\n    window: 1s\n\n    # clients can send this many commands without fakelag being imposed\n    burst-limit: 5\n\n    # once clients have exceeded their burst allowance, they can send only\n    # this many commands per `window`:\n    messages-per-window: 2\n\n    # client status resets to the default state if they go this long without\n    # sending any commands:\n    cooldown: 2s\n\n    # exempt a certain number of command invocations per session from fakelag;\n    # this is to speed up \"resynchronization\" of client state during reattach\n    command-budgets:\n        \"CHATHISTORY\": 16\n        \"MARKREAD\":    16\n        \"MONITOR\":     1\n        \"WHO\":         4\n\n# the roleplay commands are semi-standardized extensions to IRC that allow\n# sending and receiving messages from pseudo-nicknames. this can be used either\n# for actual roleplaying, or for bridging IRC with other protocols.\nroleplay:\n    # are roleplay commands enabled at all? (channels and clients still have to\n    # opt in individually with the +E mode)\n    enabled: false\n\n    # require the \"roleplay\" oper capability to send roleplay messages?\n    require-oper: false\n\n    # require channel operator permissions to send roleplay messages?\n    require-chanops: false\n\n    # add the real nickname, in parentheses, to the end of every roleplay message?\n    add-suffix: true\n\n# external services can integrate with the ircd using JSON Web Tokens (https://jwt.io).\n# in effect, the server can sign a token attesting that the client is present on\n# the server, is a member of a particular channel, etc.\nextjwt:\n    # # default service config (for `EXTJWT #channel`).\n    # # expiration time for the token:\n    # expiration: 45s\n    # # you can configure tokens to be signed either with HMAC and a symmetric secret:\n    # secret: \"65PHvk0K1_sM-raTsCEhatVkER_QD8a0zVV8gG2EWcI\"\n    # # or with an RSA private key:\n    # #rsa-private-key-file: \"extjwt.pem\"\n\n    # # named services (for `EXTJWT #channel service_name`):\n    # services:\n    #     \"jitsi\":\n    #         expiration: 30s\n    #         secret: \"qmamLKDuOzIzlO8XqsGGewei_At11lewh6jtKfSTbkg\"\n\n# history message storage: this is used by CHATHISTORY, HISTORY, znc.in/playback,\n# various autoreplay features, and the resume extension\nhistory:\n    # should we store messages for later playback?\n    # by default, messages are stored in RAM only; they do not persist\n    # across server restarts. however, you may want to understand how message\n    # history interacts with the GDPR and/or any data privacy laws that apply\n    # in your country and the countries of your users.\n    enabled: true\n\n    # how many channel-specific events (messages, joins, parts) should be tracked per channel?\n    channel-length: 2048\n\n    # how many direct messages and notices should be tracked per user?\n    client-length: 256\n\n    # how long should we try to preserve messages?\n    # if `autoresize-window` is 0, the in-memory message buffers are preallocated to\n    # their maximum length. if it is nonzero, the buffers are initially small and\n    # are dynamically expanded up to the maximum length. if the buffer is full\n    # and the oldest message is older than `autoresize-window`, then it will overwrite\n    # the oldest message rather than resize; otherwise, it will expand if possible.\n    autoresize-window: 3d\n\n    # number of messages to automatically play back on channel join (0 to disable):\n    autoreplay-on-join: 0\n\n    # maximum number of CHATHISTORY messages that can be\n    # requested at once (0 disables support for CHATHISTORY)\n    chathistory-maxmessages: 1000\n\n    # maximum number of messages that can be replayed at once during znc emulation\n    # (znc.in/playback, or automatic replay on initial reattach to a persistent client):\n    znc-maxmessages: 2048\n\n    # options to delete old messages, or prevent them from being retrieved\n    restrictions:\n        # if this is set, messages older than this cannot be retrieved by anyone\n        # (and will eventually be deleted from persistent storage, if that's enabled)\n        expire-time: 1w\n\n        # this restricts access to channel history (it can be overridden by channel\n        # owners). options are: 'none' (no restrictions), 'registration-time'\n        # (logged-in users cannot retrieve messages older than their account\n        # registration date, and anonymous users cannot retrieve messages older than\n        # their sign-on time, modulo the grace-period described below), and\n        # 'join-time' (users cannot retrieve messages older than the time they\n        # joined the channel, so only always-on clients can view history).\n        query-cutoff: 'none'\n\n        # if query-cutoff is set to 'registration-time', this allows retrieval\n        # of messages that are up to 'grace-period' older than the above cutoff.\n        # if you use 'registration-time', this is recommended to allow logged-out\n        # users to query history after disconnections.\n        grace-period: 1h\n\n    # options to store history messages in a persistent database (currently only MySQL).\n    # in order to enable any of this functionality, you must configure a MySQL server\n    # in the `datastore.mysql` section. enabling persistence overrides the history\n    # size limits above (`channel-length`, `client-length`, etc.); persistent\n    # history has no limits other than those imposed by expire-time.\n    persistent:\n        enabled: false\n\n        # store unregistered channel messages in the persistent database?\n        unregistered-channels: false\n\n        # for a registered channel, the channel owner can potentially customize\n        # the history storage setting. as the server operator, your options are\n        # 'disabled' (no persistent storage, regardless of per-channel setting),\n        # 'opt-in', 'opt-out', and 'mandatory' (force persistent storage, ignoring\n        # per-channel setting):\n        registered-channels: \"opt-out\"\n\n        # direct messages are only stored in the database for logged-in clients;\n        # you can control how they are stored here (same options as above).\n        # if you enable this, strict nickname reservation is strongly recommended\n        # as well.\n        direct-messages: \"opt-out\"\n\n    # options to control how messages are stored and deleted:\n    retention:\n        # allow users to delete their own messages from history,\n        # and channel operators to delete messages in their channel?\n        allow-individual-delete: false\n\n        # if persistent history is enabled, create additional index tables,\n        # allowing deletion of JSON export of an account's messages. this\n        # may be needed for compliance with data privacy regulations.\n        enable-account-indexing: false\n\n    # options to control storage of TAGMSG\n    tagmsg-storage:\n        # by default, should TAGMSG be stored?\n        default: false\n\n        # if `default` is false, store TAGMSG containing any of these tags:\n        whitelist:\n            - \"+draft/react\"\n            - \"+react\"\n\n        # if `default` is true, don't store TAGMSG containing any of these tags:\n        #blacklist:\n        #    - \"+draft/typing\"\n        #    - \"typing\"\n\n# whether to allow customization of the config at runtime using environment variables,\n# e.g., ERGO__SERVER__MAX_SENDQ=128k. see the manual for more details.\nallow-environment-overrides: true\n"
        },
        {
          "name": "updatetranslations.py",
          "type": "blob",
          "size": 7.251953125,
          "content": "#!/usr/bin/env python3\n# updatetranslations.py\n#\n# tl;dr this script updates our translation file with the newest, coolest strings we've added!\n# it manually searches the source code, extracts strings and then updates the language files.\n\n# Written in 2018 by Daniel Oaks <daniel@danieloaks.net>\n#\n# To the extent possible under law, the author(s) have dedicated all copyright\n# and related and neighboring rights to this software to the public domain\n# worldwide. This software is distributed without any warranty.\n#\n# You should have received a copy of the CC0 Public Domain Dedication along\n# with this software. If not, see\n# <http://creativecommons.org/publicdomain/zero/1.0/>.\n\n\"\"\"updatetranslations.py\n\nUsage:\n    updatetranslations.py run <irc-dir> <languages-dir>\n    updatetranslations.py --version\n    updatetranslations.py (-h | --help)\n\nOptions:\n    <irc-dir>        Oragono's irc subdirectory where the Go code is kept.\n    <languages-dir>  Languages directory.\"\"\"\nimport os\nimport re\nimport json\n\nfrom docopt import docopt\nimport yaml\n\nignored_strings = [\n    'none', 'saset'\n]\n\nif __name__ == '__main__':\n    arguments = docopt(__doc__, version=\"0.1.0\")\n\n    if arguments['run']:\n        # general IRC strings\n        irc_strings = []\n\n        for subdir, dirs, files in os.walk(arguments['<irc-dir>']):\n            for fname in files:\n                filepath = subdir + os.sep + fname\n                if filepath.endswith('.go'):\n                    content = open(filepath, 'r', encoding='UTF-8').read()\n\n                    matches = re.findall(r'\\.t\\(\"((?:[^\"]|\\\\\")+)\"\\)', content)\n                    for match in matches:\n                        if match not in irc_strings:\n                            irc_strings.append(match)\n\n                    matches = re.findall(r'\\.t\\(\\`([^\\`]+)\\`\\)', content)\n                    for match in matches:\n                        if match not in irc_strings:\n                            irc_strings.append(match)\n\n        for s in ignored_strings:\n            try:\n                irc_strings.remove(s)\n            except ValueError:\n                # ignore any that don't exist\n                ...\n\n        print(\"irc strings:\", len(irc_strings))\n        with open(os.path.join(arguments['<languages-dir>'], 'example', 'irc.lang.json'), 'w') as f:\n            f.write(json.dumps({k:k for k in irc_strings}, sort_keys=True, indent=2, separators=(',', ': ')))\n            f.write('\\n')\n\n        for string in irc_strings:\n            if 1 < string.count('%s') + string.count('%d') + string.count('%f'):\n                print('   confirm:', string)\n\n        # help entries\n        help_strings = []\n\n        for subdir, dirs, files in os.walk(arguments['<irc-dir>']):\n            for fname in files:\n                filepath = subdir + os.sep + fname\n                if fname == 'help.go':\n                    content = open(filepath, 'r', encoding='UTF-8').read()\n\n                    matches = re.findall(r'\\`([^\\`]+)\\`', content)\n                    for match in matches:\n                        if '\\n' in match and match not in help_strings:\n                            help_strings.append(match)\n\n        for s in ignored_strings:\n            try:\n                help_strings.remove(s)\n            except ValueError:\n                # ignore any that don't exist\n                ...\n\n        print(\"help strings:\", len(help_strings))\n        with open(os.path.join(arguments['<languages-dir>'], 'example', 'help.lang.json'), 'w') as f:\n            f.write(json.dumps({k:k for k in help_strings}, sort_keys=True, indent=2, separators=(',', ': ')))\n            f.write('\\n')\n\n        for string in help_strings:\n            if 1 < string.count('%s') + string.count('%d') + string.count('%f'):\n                print('   confirm:', string.split('\\n')[0])\n\n        # nickserv help entries\n        help_strings = []\n\n        for subdir, dirs, files in os.walk(arguments['<irc-dir>']):\n            for fname in files:\n                filepath = subdir + os.sep + fname\n                if fname == 'nickserv.go':\n                    content = open(filepath, 'r', encoding='UTF-8').read()\n\n                    matches = re.findall(r'\\`([^\\`]+)\\`', content)\n                    for match in matches:\n                        if match not in help_strings:\n                            help_strings.append(match)\n\n        for s in ignored_strings:\n            try:\n                help_strings.remove(s)\n            except ValueError:\n                # ignore any that don't exist\n                ...\n\n        print(\"nickserv help strings:\", len(help_strings))\n        with open(os.path.join(arguments['<languages-dir>'], 'example', 'nickserv.lang.json'), 'w') as f:\n            f.write(json.dumps({k:k for k in help_strings}, sort_keys=True, indent=2, separators=(',', ': ')))\n            f.write('\\n')\n\n        for string in help_strings:\n            if 1 < string.count('%s') + string.count('%d') + string.count('%f'):\n                print('   confirm:', string)\n\n        # chanserv help entries\n        help_strings = []\n\n        for subdir, dirs, files in os.walk(arguments['<irc-dir>']):\n            for fname in files:\n                filepath = subdir + os.sep + fname\n                if fname == 'chanserv.go':\n                    content = open(filepath, 'r', encoding='UTF-8').read()\n\n                    matches = re.findall(r'\\`([^\\`]+)\\`', content)\n                    for match in matches:\n                        if match not in help_strings:\n                            help_strings.append(match)\n\n        for s in ignored_strings:\n            try:\n                help_strings.remove(s)\n            except ValueError:\n                # ignore any that don't exist\n                ...\n\n        print(\"chanserv help strings:\", len(help_strings))\n        with open(os.path.join(arguments['<languages-dir>'], 'example', 'chanserv.lang.json'), 'w') as f:\n            f.write(json.dumps({k:k for k in help_strings}, sort_keys=True, indent=2, separators=(',', ': ')))\n            f.write('\\n')\n\n        for string in help_strings:\n            if 1 < string.count('%s') + string.count('%d') + string.count('%f'):\n                print('   confirm:', string)\n\n        # hostserv help entries\n        help_strings = []\n\n        for subdir, dirs, files in os.walk(arguments['<irc-dir>']):\n            for fname in files:\n                filepath = subdir + os.sep + fname\n                if fname == 'hostserv.go':\n                    content = open(filepath, 'r', encoding='UTF-8').read()\n\n                    matches = re.findall(r'\\`([^\\`]+)\\`', content)\n                    for match in matches:\n                        if match not in help_strings:\n                            help_strings.append(match)\n\n        for s in ignored_strings:\n            try:\n                help_strings.remove(s)\n            except ValueError:\n                # ignore any that don't exist\n                ...\n\n        print(\"hostserv help strings:\", len(help_strings))\n        with open(os.path.join(arguments['<languages-dir>'], 'example', 'hostserv.lang.json'), 'w') as f:\n            f.write(json.dumps({k:k for k in help_strings}, sort_keys=True, indent=2, separators=(',', ': ')))\n            f.write('\\n')\n\n        for string in help_strings:\n            if 1 < string.count('%s') + string.count('%d') + string.count('%f'):\n                print('   confirm:', string)\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}