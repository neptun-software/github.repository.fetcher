{
  "metadata": {
    "timestamp": 1736566531316,
    "page": 75,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gliderlabs/logspout",
      "stars": 4663,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "release\nbuild\n.git\nvendor\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03125,
          "content": "/logspout\nrelease\nbuild\nvendor/\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 1.8349609375,
          "content": "linters-settings:\n  errcheck:\n    # ignore cases where we truly don't care about the returned error\n    ignore: net/http:^Write$,io:^WriteString$\n  govet:\n    check-shadowing: true\n    settings:\n      printf:\n        funcs:\n          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof\n          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf\n          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf\n          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf\n  golint:\n    min-confidence: 0\n  gocyclo:\n    min-complexity: 12\n  maligned:\n    suggest-new: true\n  dupl:\n    threshold: 100\n  goconst:\n    min-len: 2\n    min-occurrences: 2\n  depguard:\n    list-type: blacklist\n  misspell:\n    locale: US\n  lll:\n    line-length: 160\n  goimports:\n    local-prefixes: github.com/gliderlabs/logspout\n  gocritic:\n    settings:\n      hugeParam:\n        sizeThreshold: 160\n    enabled-tags:\n      - performance\n  nakedret:\n      max-func-lines: 65\n\nlinters:\n  enable-all: true\n  disable:\n    - maligned\n    - prealloc\n    - gochecknoglobals\n    - funlen\n    - gochecknoinits\n    - godot\n    - wsl\n    - nolintlint\n    - testpackage\n    - dupl\n    - goerr113\n\nissues:\n  # Excluding configuration per-path, per-linter, per-text and per-source\n  exclude-rules:\n    # Exclude some linters from running on tests files.\n    - path: _test\\.go\n      linters:\n        - dupl\n        - errcheck\n        - goconst\n        - gocyclo\n        - gosec\n        - lll\n        - nakedret\n        - unparam\n        - funlen\n\nrun:\n  deadline: 2m\n  issues-exit-code: 1\n\n# golangci.com configuration\n# https://github.com/golangci/golangci/wiki/Configuration\nservice:\n  golangci-lint-version: 1.27.x # use the fixed version to not introduce new linters unexpectedly\n  prepare:\n    - echo \"here I can run custom commands, but no preparation needed for this repo\"\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.2138671875,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\n\n## [Unreleased][unreleased]\n### Fixed\n\n### Added\n\n### Removed\n\n### Changed\n\n## [v3.2.14] - 2021-12-03\n### Fixed\n- @0xflotus fix: typo error in project name\n\n### Changed\n- @skyzh upgrade dockerclient dependency\n- @merowing1279 retrieve logs from already started containers\n- @odidev Release docker image for arm64\n\n## [v3.2.13] - 2020-11-26\n### Changed\n- @michaelshobbs bump golangci-lint to 1.27 and fix lintballs\n\n### Fixed\n- @michaelshobbs fix backlog() logic and add tests\n\n## [v3.2.12] - 2020-10-22\n### Changed\n- @michaelshobbs bump alpine to 3.12\n\n## [v3.2.11] - 2020-05-08\n### Added\n- @hhromic Add Syslog TCP framing documentation to README\n\n### Changed\n- @hhromic syslog adapter refactor\n- @michaelshobbs use type assertion instead of reflection to determine connection type\n- @michaelshobbs use // + space for all human readable comments\n\n## [v3.2.10] - 2020-05-01\n### Added\n- @jszwedko Add optional TCP framing to syslog adapter\n\n### Fixed\n- @bbigras add missing syntax highlighting in README.md\n\n## [v3.2.9] - 2020-04-30\n### Fixed\n- @bbigras add missing syntax highlighting in README.md\n\n### Added\n- @edorgeville Adds `db` log driver to `logDriverSupported`\n- @renehernandez Add support for multiple exclusion labels\n- @renehernandez Add support for EXCLUDE_LABELS envvar with fallback to existing EXCLUDE_LABEL\n- @hhromic adapters/syslog: add ContainerNameSplitN utility message function\n\n### Changed\n- @hhromic adapters/syslog: enforce RFC size limits in message fields\n\n## [v3.2.8] - 2020-04-03\n### Changed\n- @michaelshobbs bump alpine to 3.11 and go to 1.13.4-r1\n\n## [v3.2.7] - 2020-04-03\n### Fixed\n- @CodeLingoBot @gbolo Fix function comments based on best practices from Effective Go\n\n### Changed\n- @michaelshobbs update alpine to 3.10/go 1.12.12-r0 and fix linting\n- @whoisteri DOC Document accessible data in RAW_FORMAT template\n- @tiagorlampert DOC typos\n- @michaelshobbs DOC CHANGLELOG formatting\n- @tomlankhorst DOC Suggest to disable userns-remap for logspout\n- @StudioEtrange DOC add link to logspout-fluentd\n\n## [v3.2.6] - 2018-10-04\n### Fixed\n- @jdgiotta Spelling corrections and fixed stack compose formatting in example\n- @dylanmei dylanmei Update 3rd party module link in README\n\n### Added\n- @vbeausoleil added a simple healthcheck\n- @gbolo added option to load TLS client certificate and key\n- @gbolo added ability to control the TLS client trust store\n- @gbolo added option to harden the TLS client\n- @chopmann added option to bind the http server to an address\n- @ibrokethecloud added ability to add custom key:value pairs as EXCLUDE_LABEL\n\n### Changed\n- @develar alpine 3.8 + golang 1.10.1\n- @gbolo enforced the use of `go 1.8+` in order to accommodate some TLS settings\n\n## [v3.2.5] - 2018-06-05\n### Fixed\n- @michaelshobbs fix working_directory so we don't duplicate test runs\n- @gmelika panic if reconnect fails\n- @masterada Added multiline adapter\n- @billimek sleeping and syncing to fix issues with docker hub builds\n\n### Added\n- @chris7444 take the hostname from /etc/host_hostname if the file is there\n- @chris7444 update README.md for swarm deployments PR #329\n- @nvanheuverzwijn strip \\r and \\n when reading the file /etc/host_hostname\n- @lucassabreu toJSON with examples\n\n### Changed\n- @michaelshobbs pass debug to test container\n- @jgreat Strip header bytes from log stream\n- @trondvh chmod +x build.sh\n- @develar alpine 3.7 + golang 1.9.2\n\n## [v3.2.3] - 2017-09-23\n### Added\n- @guigouz guigouz Add `RAW_FORMAT` to the documentation\n- @stevecalvert Allow docker log tail to be specified, default to 'all\n\n### Fixed\n- @jeanlouisboudart RawTerminal should be set to true if we want to collect tty logs\n- @michaelshobbs fix new golint lintballs\n\n## [v3.2.2] - 2017-05-25\n### Fixed\n- @michaelshobbs router: fix empty routes response. fixes #299\n- @Crashthatch Close existing routes when adding a new route with an existing ID. fixes #305\n\n### Changed\n- @mattaitchison router/pump: remove logstream send timeout\n\n## [v3.2.1] - 2017-04-13\n### Fixed\n- @michaelshobbs build: fix missing ca-certificates. closes #294\n\n### Added\n- @michaelshobbs build: add tls test case\n\n### Changed\n- @michaelshobbs use circleci 2.0\n\n## [v3.2] - 2017-04-13\n### Fixed\n- @ekkinox FIX: add build-base package install to fix missing gcc\n- @bobzoller reconnect log stream unless container is dead\n- @mattaitchison Fix locking around custom route loading\n- @bobzoller avoid duplicate pumps with mutex lock\n- @markine Use InactivityTimeout to work around a bug in docker (#204)\n- @mattaitchison install ca-certificates fixes #247\n- @mattaitchison Dockerfile: use alpine 3.5 to fix build issue from missing context pkg\n\n### Added\n- @micahhausler Add Graylog GELF module\n- @Selim Ekizoglu  Exclude containers by label.\n- @treeder Some help for working on custom modules\n- @davidnortonjr Add more configuration examples to README\n- @davidnortonjr Filter by label (#236)\n- @mattaitchison first pass at tests (#218)\n- @grosskur syslog: Add support for SYSLOG_TIMESTAMP (#260)\n- @michaelshobbs add linting with go vet and golint\n- @andrewgaul Allow configuration of retry count via environment\n- @davidnortonjr Allow containers with TTY enabled using environment variable ALLOW_TTY\n- @michaelshobbs add golint in ci and filter /vendor/ from linting\n- @ebr add env.var switch to turn off backlogs\n- @michaelshobbs add test for max image size\n\n### Changed\n- @selimekizoglu Ignore empty EXCLUDE_LABEL values\n- @pmbauer ignore containers with unsupported log drivers\n- @robertjustjones Updated README to include tls\n- @jmreicha custom: Update README and include example build script\n- @josegonzalez Add a note about build.sh needing to be in the docker build directory\n- @treeder Much, much faster builds\n- @michaelshobbs set common test name prefix for -run ease\n- @michaelshobbs make ignoreContainerTTY more testable and add test\n- @michaelshobbs make retryCount testable and add test\n- @michaelshobbs use glide in dockerfile\n- @michaelshobbs use alpine + build script and add test for custom image building\n- @michaelshobbs attempt to preserve buffer on reconnect()\n- @michaelshobbs race detector for alpine is broken. disable it for now\n- @michaelshobbs make vet more reliable\n- @luketurner Don't retry sending on ECONNRESET\n\n## [v3.1] - 2016-05-23\n### Fixed\n- Panic when renaming stopped container #183\n- won't start without route configuration #185\n- RouteManager.Name() didn't return name\n### Added\n- update container name if we get a rename event. closes #144 (#180)\n\n### Removed\n\n### Changed\n- Now using Alpine Linux 3.3 and GO 1.5.3, removed the \"edge\" package repo for building the official Docker image (#174)\n- Fix exposed ports in Dockerfile and readme. Remove references to /tmp/docker.sock from readme\n\n## [v3] - 2016-03-03\n### Fixed\n- use start/die like old version not create/destroy\n- performance fix, generalizing SyslogMessage, minor cleanups\n- Initialize Route options map\n- Fixed a couple of typos, updated narrative\n- UDP message delivery should not kill the program\n- Exit with return code 1 on job setup failure\n- Simplify and add early exit to RoutingFrom\n- Unmarshal without buffering\n- Remove unnecessary closure\n- Undo change introduced in 07555c5\n- Fix port number in httpstream example\n- Use correct nilvalue for structured data as per rfc 5424\n- retry tcp errors and don't hang forever on failure\n\n### Added\n- mention irc channel\n- allowing easy custom builds of logspout\n- Allow env vars in stream URLs\n- Allow you to ignore log messages from individual containers by setting container environment variable, LOGSPOUT=ignore, when starting\n- Add URL for Logstash module\n- Adding CircleCI, Docker and IRC badges to readme.\n- Add TLS transport. Fixes #116\n\n### Removed\n- Removed attach on restart event\n- remove dev containers\n- Removed deprecated library hosted in google code in favor of its new home\n\n### Changed\n- switched to gliderlabs org\n- assume build\n- rough pass at breaking logspout.go into separate packages\n- fully split up packages. major refactoring of router\n- simpler matching. working routesapi. dropped old utils\n- make sure all uri params get into route options\n- readme updates and module specific readmes\n- renamed ConnectionFactory to AdapterTransport\n- updated readme to use current schema\n- names and parama\n- more readable\n- hold handler from returning until streamer finishes\n- primarily designed new boot output, but came with it architectural changes\n- updating docker sock location\n- support old location for docker socket\n- force link in case its run again, such as with custom builds\n- analytics test\n- update analytics\n- Update README.md\n- Update README with tls module\n- Wrong port in README.md #136\n\n\n## [v2] - 2015-02-12\n### Added\n- Allow comma-separated routes on boot\n- Added project versioning\n- Development Dockerfile and make task\n- Deis sponsorship / support\n\n### Removed\n- Staging binary. Built entirely in Docker.\n- Dropped unnecessary layers in Dockerfile\n\n### Changed\n- Base container is now Alpine\n- Moved to gliderlabs organization\n\n[unreleased]: https://github.com/gliderlabs/logspout/compare/v3.2.14...HEAD\n[v3.2.14]: https://github.com/gliderlabs/logspout/compare/v3.2.13...v3.2.14\n[v3.2.13]: https://github.com/gliderlabs/logspout/compare/v3.2.12...v3.2.13\n[v3.2.12]: https://github.com/gliderlabs/logspout/compare/v3.2.11...v3.2.12\n[v3.2.11]: https://github.com/gliderlabs/logspout/compare/v3.2.10...v3.2.11\n[v3.2.10]: https://github.com/gliderlabs/logspout/compare/v3.2.9...v3.2.10\n[v3.2.9]: https://github.com/gliderlabs/logspout/compare/v3.2.8...v3.2.9\n[v3.2.8]: https://github.com/gliderlabs/logspout/compare/v3.2.7...v3.2.8\n[v3.2.7]: https://github.com/gliderlabs/logspout/compare/v3.2.6...v3.2.7\n[v3.2.6]: https://github.com/gliderlabs/logspout/compare/v3.2.5...v3.2.6\n[v3.2.5]: https://github.com/gliderlabs/logspout/compare/v3.2.4...v3.2.5\n[v3.2.4]: https://github.com/gliderlabs/logspout/compare/v3.2.3...v3.2.4\n[v3.2.3]: https://github.com/gliderlabs/logspout/compare/v3.2.2...v3.2.3\n[v3.2.2]: https://github.com/gliderlabs/logspout/compare/v3.2.1...v3.2.2\n[v3.2.1]: https://github.com/gliderlabs/logspout/compare/v3.2...v3.2.1\n[v3.2]: https://github.com/gliderlabs/logspout/compare/v3.1...v3.2\n[v3.1]: https://github.com/gliderlabs/logspout/compare/v3...v3.1\n[v3]: https://github.com/gliderlabs/logspout/compare/v2...v3\n[v2]: https://github.com/gliderlabs/logspout/compare/v1...v2\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3046875,
          "content": "FROM alpine:3.12\nENTRYPOINT [\"/bin/logspout\"]\nVOLUME /mnt/routes\nEXPOSE 80\n\nCOPY . /src\nRUN cd /src && ./build.sh \"$(cat VERSION)\"\n\nONBUILD COPY ./build.sh /src/build.sh\nONBUILD COPY ./modules.go /src/modules.go\nONBUILD RUN cd /src && chmod +x ./build.sh && sleep 1 && sync && ./build.sh \"$(cat VERSION)-custom\"\n"
        },
        {
          "name": "Dockerfile.custom",
          "type": "blob",
          "size": 0.0673828125,
          "content": "FROM iron/go:dev\n\nWORKDIR /app\nADD . /app\n\nENTRYPOINT [\"./logspout\"]\n"
        },
        {
          "name": "Dockerfile.dev",
          "type": "blob",
          "size": 0.2255859375,
          "content": "FROM alpine:3.12\nVOLUME /mnt/routes\nEXPOSE 80\n\nRUN apk --no-cache add go build-base git mercurial ca-certificates curl\nCOPY . /src\nWORKDIR /src\nCMD go build -ldflags \"-X main.Version=dev\" -o /bin/logspout \\\n\t\t&& exec /bin/logspout\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (C) 2015 Glider Labs, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MODULES.md",
          "type": "blob",
          "size": 0.9326171875,
          "content": "Instructions on how to build/test your own modules. \n\n## Getting Started\n\n1. Fork this repository\n1. Create a new repository for your adapter\n1. Copy something like [raw.go](https://github.com/gliderlabs/logspout/blob/master/adapters/raw/raw.go) to get started.\n1. Add your module to modules.go\n\n> You'll need to add the `build.sh` from this repository to the directory from which you run `docker build` or you will get errors\n\nNow build and run logspout with your adapter, replace SYSLOG with your own syslog url. \n\n```sh\nSYSLOG=syslog://logs.papertrailapp.com:55555 ./run-custom.sh\n```\n\nNow let's add your new adapter to the running logspout (replace address below with your final stats destination):\n\n```sh\ncurl http://localhost:8000/routes -d '{\n  \"adapter\": \"myadapter\",\n  \"filter_sources\": [\"stdout\" ,\"stderr\"],\n  \"address\": \"localhost:1234\"\n}'\n```\n\nNow any log messages that come out of any container on your machine will go through your adapter. \n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.6357421875,
          "content": "NAME=logspout\nVERSION=$(shell cat VERSION)\n# max image size of 40MB\nMAX_IMAGE_SIZE := 40000000\n\nGOBIN := $(shell go env GOPATH | awk -F \":\" '{ print $$1 }')/bin\nGOLANGCI_LINT_VERSION := v1.27.0\n\nifeq ($(shell uname), Darwin)\n\tXARGS_ARG=\"-L1\"\nendif\nGOPACKAGES ?= $(shell go list ./... | egrep -v 'custom|vendor')\nTEST_ARGS ?= -race\n\nifdef TEST_RUN\n\tTESTRUN := -run ${TEST_RUN}\nendif\n\nbuild-dev:\n\tdocker build -f Dockerfile.dev -t $(NAME):dev .\n\ndev: build-dev\n\t@docker run --rm \\\n\t\t-e DEBUG=true \\\n\t\t-v /var/run/docker.sock:/var/run/docker.sock \\\n\t\t-v $(PWD):/go/src/github.com/gliderlabs/logspout \\\n\t\t-p 8000:80 \\\n\t\t-e ROUTE_URIS=$(ROUTE) \\\n\t\t$(NAME):dev\n\nbuild:\n\tmkdir -p build\n\tdocker build -t $(NAME):$(VERSION) .\n\tdocker save $(NAME):$(VERSION) | gzip -9 > build/$(NAME)_$(VERSION).tgz\n\nbuild-custom:\n\tdocker tag $(NAME):$(VERSION) gliderlabs/$(NAME):master\n\tcd custom && docker build -t $(NAME):custom .\n\nlint-requirements:\nifeq ($(shell which golangci-lint), )\n\tcurl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(GOBIN) $(GOLANGCI_LINT_VERSION)\nendif\n\nlint: lint-requirements\n\t$(GOBIN)/golangci-lint run\n\nlint-ci-direct: lint-requirements\n\t$(GOBIN)/golangci-lint --verbose run\n\nlint-ci: build-dev\n\tdocker run \\\n\t\t-v $(PWD):/go/src/github.com/gliderlabs/logspout \\\n\t\t$(NAME):dev make -e lint-ci-direct\n\ntest: build-dev\n\tdocker run \\\n\t\t-v /var/run/docker.sock:/var/run/docker.sock \\\n\t\t-v $(PWD):/go/src/github.com/gliderlabs/logspout \\\n\t\t-e TEST_ARGS=\"\" \\\n\t\t-e DEBUG=$(DEBUG) \\\n\t\t$(NAME):dev make -e test-direct\n\ntest-direct:\n\tgo test -p 1 -v $(TEST_ARGS) $(GOPACKAGES) $(TESTRUN)\n\ntest-image-size:\n\t@if [ $(shell docker inspect -f '{{ .Size }}' $(NAME):$(VERSION)) -gt $(MAX_IMAGE_SIZE) ]; then \\\n\t\techo ERROR: image size greater than $(MAX_IMAGE_SIZE); \\\n\t\texit 2; \\\n\tfi\n\ntest-tls:\n\tdocker run -d --name $(NAME)-tls \\\n\t\t-v /var/run/docker.sock:/var/run/docker.sock \\\n\t\t$(NAME):$(VERSION) syslog+tls://logs3.papertrailapp.com:54202\n\tsleep 2\n\tdocker logs $(NAME)-tls\n\tdocker inspect --format='{{ .State.Running }}' $(NAME)-tls | grep true\n\tdocker stop $(NAME)-tls || true\n\tdocker rm $(NAME)-tls || true\n\ntest-healthcheck:\n\tdocker run -d --name $(NAME)-healthcheck \\\n\t\t-p 8000:80 \\\n\t\t-v /var/run/docker.sock:/var/run/docker.sock \\\n\t\t$(NAME):$(VERSION)\n\tsleep 5\n\tdocker logs $(NAME)-healthcheck\n\tdocker inspect --format='{{ .State.Running }}' $(NAME)-healthcheck | grep true\n\tcurl --head --silent localhost:8000/health | grep \"200 OK\"\n\tdocker stop $(NAME)-healthcheck || true\n\tdocker rm $(NAME)-healthcheck || true\n\ntest-custom:\n\tdocker run --name $(NAME)-custom $(NAME):custom || true\n\tdocker logs $(NAME)-custom 2>&1 | grep -q logstash\n\tdocker rmi gliderlabs/$(NAME):master || true\n\tdocker rm $(NAME)-custom || true\n\ntest-tls-custom:\n\tdocker run -d --name $(NAME)-tls-custom \\\n\t\t-v /var/run/docker.sock:/var/run/docker.sock \\\n\t\t$(NAME):custom syslog+tls://logs3.papertrailapp.com:54202\n\tsleep 2\n\tdocker logs $(NAME)-tls-custom\n\tdocker inspect --format='{{ .State.Running }}' $(NAME)-tls-custom | grep true\n\tdocker stop $(NAME)-tls-custom || true\n\tdocker rm $(NAME)-tls-custom || true\n\n.PHONY: release\nrelease:\n\trm -rf release && mkdir release\n\tgo get github.com/progrium/gh-release/...\n\tcp build/* release\n\tgh-release create gliderlabs/$(NAME) $(VERSION) \\\n\t\t$(shell git rev-parse --abbrev-ref HEAD) $(VERSION)\n\n.PHONY: circleci\ncircleci:\nifneq ($(CIRCLE_BRANCH), release)\n\techo build-$$CIRCLE_BUILD_NUM > VERSION\nendif\n\n.PHONY: clean\nclean:\n\trm -rf build/\n\tdocker rm $(shell docker ps -aq) || true\n\tdocker rmi $(NAME):dev $(NAME):$(VERSION) || true\n\tdocker rmi $(shell docker images -f 'dangling=true' -q) || true\n\n.PHONY: publish-requirements\npublish-requirements:\n\tmkdir -vp ~/.docker/cli-plugins/\n\tcurl --silent -L --output ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64\n\tchmod a+x ~/.docker/cli-plugins/docker-buildx\n\tdocker run -it --rm --privileged tonistiigi/binfmt --install all\n\tdocker buildx create --use --name mybuilder\n\n.PHONY: publish-test\npublish-test:\n\tdocker buildx build --load --platform linux/amd64 -t gliderlabs/$(NAME):linux-amd64-${CIRCLE_BRANCH} .\n\tdocker buildx build --load --platform linux/arm/v6 -t gliderlabs/$(NAME):linux-arm-v6-${CIRCLE_BRANCH} .\n\tdocker buildx build --load --platform linux/arm64 -t gliderlabs/$(NAME):linux-arm64-${CIRCLE_BRANCH} .\n\tdocker images\n\n.PHONY: publish-master\npublish-master:\n\tdocker buildx build --push --platform linux/amd64,linux/arm/v6,linux/arm64 -t gliderlabs/$(NAME):master -t gliderlabs/$(NAME):latest .\n\n.PHONY: publish-release\npublish-release:\n\tdocker buildx build --push --platform linux/amd64,linux/arm/v6,linux/arm64 -t gliderlabs/$(NAME):$(VERSION) .\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.66015625,
          "content": "# logspout\n\n[![CircleCI](https://img.shields.io/circleci/project/gliderlabs/logspout/release.svg)](https://circleci.com/gh/gliderlabs/logspout)\n[![Docker pulls](https://img.shields.io/docker/pulls/gliderlabs/logspout.svg)](https://hub.docker.com/r/gliderlabs/logspout/)\n[![IRC Channel](https://img.shields.io/badge/irc-%23gliderlabs-blue.svg)](https://kiwiirc.com/client/irc.freenode.net/#gliderlabs)\n\n> Docker Hub automated builds for `gliderlabs/logspout:latest` and `progrium/logspout:latest` are now pointing to the `release` branch. For `master`, use `gliderlabs/logspout:master`. Individual versions are also available as saved images in [releases](https://github.com/gliderlabs/logspout/releases).\n\nLogspout is a log router for Docker containers that runs inside Docker. It attaches to all containers on a host, then routes their logs wherever you want. It also has an extensible module system.\n\nIt's a mostly stateless log appliance. It's not meant for managing log files or looking at history. It is just a means to get your logs out to live somewhere else, where they belong.\n\nFor now it only captures stdout and stderr, but a module to collect container syslog is planned.\n\n## Getting logspout\n\nLogspout is a very small Docker container (15.2MB virtual, based on [Alpine](https://github.com/gliderlabs/docker-alpine)). Pull the latest release from the index:\n\n\t$ docker pull gliderlabs/logspout:latest\n\nYou can also download and load a specific version:\n\n\t$ curl -s dl.gliderlabs.com/logspout/v2.tgz | docker load\n\n## Using logspout\n\n#### Route all container output to remote syslog\n\nThe simplest way to use logspout is to just take all logs and ship to a remote syslog. Just pass a syslog URI (or several comma separated URIs) as the command. Here we show use of the `tls` encrypted transport option in the URI. Also, we always mount the Docker Unix socket with `-v` to `/var/run/docker.sock`:\n\n\t$ docker run --name=\"logspout\" \\\n\t\t--volume=/var/run/docker.sock:/var/run/docker.sock \\\n\t\tgliderlabs/logspout \\\n\t\tsyslog+tls://logs.papertrailapp.com:55555\n\nlogspout will gather logs from other containers that are started **without the `-t` option** and are configured with a logging driver that works with `docker logs` (`journald` and `json-file`).\n\nTo see what data is used for syslog messages, see the [syslog adapter](http://github.com/gliderlabs/logspout/blob/master/adapters) docs.\n\nThe container must be able to access the Docker Unix socket to mount it. This is typically a problem when [namespace remapping](https://docs.docker.com/engine/security/userns-remap/) is enabled. To disable remapping for the logspout container, pass the `--userns=host` flag to `docker run`, `.. create`, etc. \n\n#### Ignoring specific containers\n\nYou can tell logspout to ignore specific containers by setting an environment variable when starting your container, like so:-\n\n    $ docker run -d -e 'LOGSPOUT=ignore' image\n\nOr, by adding a label which you define by setting an environment variable when running logspout:\n\n    $ docker run --name=\"logspout\" \\\n        -e EXCLUDE_LABEL=logspout.exclude \\\n        --volume=/var/run/docker.sock:/var/run/docker.sock \\\n        gliderlabs/logspout\n    $ docker run -d --label logspout.exclude=true image\n\nLogspout also allows to ignore containers by specifying a list of labels using the environment variables `EXCLUDE_LABELS` or `EXCLUDE_LABEL`, using the `;` as separator:\n\n    $ $ docker run --name=\"logspout\" \\\n        -e EXCLUDE_LABELS=k8s:app;backend:rails;io.kubernetes.pod.namespace:default \\\n        --volume=/var/run/docker.sock:/var/run/docker.sock \\\n        gliderlabs/logspout\n    $ docker run -d --label k8s=app image1\n    $ docker run -d --label backend=rails image2\n\n**NOTE** Setting `EXCLUDE_LABELS` would take precedence over setting `EXCLUDE_LABEL`\n\n#### Including specific containers\n\nYou can tell logspout to only include certain containers by setting filter parameters on the URI:\n\n\t$ docker run \\\n\t\t--volume=/var/run/docker.sock:/var/run/docker.sock \\\n\t\tgliderlabs/logspout \\\n\t\traw://192.168.10.10:5000?filter.name=*_db\n\t\n\t$ docker run \\\n\t\t--volume=/var/run/docker.sock:/var/run/docker.sock \\\n\t\tgliderlabs/logspout \\\n\t\traw://192.168.10.10:5000?filter.id=3b6ba57db54a\n\t\n\t$ docker run \\\n\t\t--volume=/var/run/docker.sock:/var/run/docker.sock \\\n\t\tgliderlabs/logspout \\\n\t\traw://192.168.10.10:5000?filter.sources=stdout%2Cstderr\n\t\n\t# Forward logs from containers with both label 'a' starting with 'x', and label 'b' ending in 'y'.\n\t$ docker run \\\n\t\t--volume=/var/run/docker.sock:/var/run/docker.sock \\\n\t\tgliderlabs/logspout \\\n\t\traw://192.168.10.10:5000?filter.labels=a:x*%2Cb:*y\n\nNote that you must URL-encode parameter values such as the comma in `filter.sources` and `filter.labels`.\n\n#### Multiple logging destinations\n\nYou can route to multiple destinations by comma-separating the URIs:\n\n\t$ docker run \\\n\t\t--volume=/var/run/docker.sock:/var/run/docker.sock \\\n\t\tgliderlabs/logspout \\\n\t\traw://192.168.10.10:5000?filter.name=*_db,syslog+tls://logs.papertrailapp.com:55555?filter.name=*_app\n\n#### Suppressing backlog tail\nYou can tell logspout to only display log entries since container \"start\" or \"restart\" event by setting a `BACKLOG=false` environment variable (equivalent to `docker logs --since=0s`):\n\n\t$ docker run -d --name=\"logspout\" \\\n\t\t-e 'BACKLOG=false' \\\n\t\t--volume=/var/run/docker.sock:/var/run/docker.sock \\\n\t\tgliderlabs/logspout\n\nThe default behaviour is to output all logs since creation of the container (equivalent to `docker logs --tail=all` or simply `docker logs`).\n\n> NOTE: Use of this option **may** cause the first few lines of log output to be missed following a container being started, if the container starts outputting logs before logspout has a chance to see them. If consistent capture of *every* line of logs is critical to your application, you might want to test thoroughly and/or avoid this option (at the expense of getting the entire backlog for every restarting container). This does not affect containers that are removed and recreated.\n\n\n#### Environment variable, TAIL\nWhilst BACKLOG=false restricts the tail by setting the Docker Logs.Options.Since to time.Now(), another mechanism to restrict the tail is to set TAIL=n.  Use of this mechanism avoids parsing the earlier content of the logfile which may have a speed advantage if the tail content is of no interest or has become corrupted.\n\n#### Inspect log streams using curl\n\nUsing the [httpstream module](http://github.com/gliderlabs/logspout/blob/master/httpstream), you can connect with curl to see your local aggregated logs in realtime. You can do this without setting up a route URI.\n\n\t$ docker run -d --name=\"logspout\" \\\n\t\t--volume=/var/run/docker.sock:/var/run/docker.sock \\\n\t\t--publish=127.0.0.1:8000:80 \\\n\t\tgliderlabs/logspout\n\t$ curl http://127.0.0.1:8000/logs\n\nYou should see a nicely colored stream of all your container logs. You can filter by container name and more. You can also get JSON objects, or you can upgrade to WebSocket and get JSON logs in your browser.\n\nSee [httpstream module](http://github.com/gliderlabs/logspout/blob/master/httpstream) for all options.\n\n#### Create custom routes via HTTP\n\nUsing the [routesapi module](http://github.com/gliderlabs/logspout/blob/master/routesapi) logspout can also expose a `/routes` resource to create and manage routes.\n\n\t$ curl $(docker port `docker ps -lq` 8000)/routes \\\n\t\t-X POST \\\n\t\t-d '{\"source\": {\"filter\": \"db\", \"types\": [\"stderr\"]}, \"target\": {\"type\": \"syslog\", \"addr\": \"logs.papertrailapp.com:55555\"}}'\n\nThat example creates a new syslog route to [Papertrail](https://papertrailapp.com) of only `stderr` for containers with `db` in their name.\n\nRoutes are stored on disk, so by default routes are ephemeral. You can mount a volume to `/mnt/routes` to persist them.\n\nSee [routesapi module](http://github.com/gliderlabs/logspout/blob/master/routesapi) for all options.\n\n#### Detecting timeouts in Docker log streams\n\nLogspout relies on the Docker API to retrieve container logs. A failure in the API may cause a log stream to hang. Logspout can detect and restart inactive Docker log streams. Use the environment variable `INACTIVITY_TIMEOUT` to enable this feature. E.g.: `INACTIVITY_TIMEOUT=1m` for a 1-minute threshold.\n\n#### Multiline logging\n\nIn order to enable multiline logging, you must first prefix your adapter with the multiline adapter:\n\n\t$ docker run \\\n\t\t--volume=/var/run/docker.sock:/var/run/docker.sock \\\n\t\tgliderlabs/logspout \\\n\t\tmultiline+raw://192.168.10.10:5000?filter.name=*_db\n\nUsing the the above prefix enables multiline logging on all containers by default. To enable it only to specific containers set MULTILINE_ENABLE_DEFAULT=false for logspout, and use the LOGSPOUT_MULTILINE environment variable on the monitored container:\n\n    $ docker run -d -e 'LOGSPOUT_MULTILINE=true' image\n\n##### MULTILINE_MATCH\n\nUsing the environment variable `MULTILINE_MATCH`=<first|last|nonfirst|nonlast> (default `nonfirst`) you define, which lines should be matched to the `MULTILINE_PATTERN`.\n* first: match first line only and append following messages until you match another line\n* last: concatenate all messages until the pattern matches the next line\n* nonlast: match a line, append upcoming matching lines, also append first non-matching line and start\n* nonfirst: append all matching lines to first line and start over with the next non-matching line\n\n##### Important!\nIf you use multiline logging with raw, it's recommended to json encode the Data to avoid line breaks in the output, eg:\n    \n    \"RAW_FORMAT={{ toJSON .Data }}\\n\"\n\n#### Environment variables\n\n* `ALLOW_TTY` - include logs from containers started with `-t` or `--tty` (i.e. `Allocate a pseudo-TTY`)\n* `BACKLOG` - suppress container tail backlog\n* `TAIL` - specify the number of lines in the log tail to capture when logspout starts (default `all`)\n* `DEBUG` - emit debug logs\n* `EXCLUDE_LABEL` - exclude containers with a given label. The label can have a value of true or a custom value matched with : after the label name like label_name:label_value.\n* `INACTIVITY_TIMEOUT` - detect hang in Docker API (default 0)\n* `HTTP_BIND_ADDRESS` - configure which interface address to listen on (default 0.0.0.0)\n* `PORT` or `HTTP_PORT` - configure which port to listen on (default 80)\n* `RAW_FORMAT` - log format for the raw adapter (default `{{.Data}}\\n`)\n* `RETRY_COUNT` - how many times to retry a broken socket (default 10)\n* `ROUTESPATH` - path to routes (default `/mnt/routes`)\n* `SYSLOG_DATA` - datum for data field (default `{{.Data}}`)\n* `SYSLOG_FORMAT` - syslog format to emit, either `rfc3164` or `rfc5424` (default `rfc5424`)\n* `SYSLOG_HOSTNAME` - datum for hostname field (default `{{.Container.Config.Hostname}}`)\n* `SYSLOG_PID` - datum for pid field (default `{{.Container.State.Pid}}`)\n* `SYSLOG_PRIORITY` - datum for priority field (default `{{.Priority}}`)\n* `SYSLOG_STRUCTURED_DATA` - datum for structured data field\n* `SYSLOG_TAG` - datum for tag field (default `{{.ContainerName}}+route.Options[\"append_tag\"]`)\n* `SYSLOG_TCP_FRAMING` - for TCP or TLS transports, whether to use `octet-counted` framing in emitted messages or `traditional` LF framing (default `traditional`)\n* `SYSLOG_TIMESTAMP` - datum for timestamp field (default `{{.Timestamp}}`)\n* `MULTILINE_ENABLE_DEFAULT` - enable multiline logging for all containers when using the multiline adapter (default `true`)\n* `MULTILINE_MATCH` - determines which lines the pattern should match, one of first|last|nonfirst|nonlast, for details see: [MULTILINE_MATCH](#multiline_match) (default `nonfirst`)\n* `MULTILINE_PATTERN` - pattern for multiline logging, see: [MULTILINE_MATCH](#multiline_match) (default: `^\\s`)\n* `MULTILINE_FLUSH_AFTER` - maximum time between the first and last lines of a multiline log entry in milliseconds (default: 500)\n* `MULTILINE_SEPARATOR` - separator between lines for output (default: `\\n`)\n\n#### Raw Format\n\nThe raw adapter has a function `toJSON` that can be used to format the message/fields to generate JSON-like output in a simple way, or full JSON output.\n\nThe RAW_FORMAT env variable is used as a [Go template](https://golang.org/pkg/text/template/) with a [`Message` struct](https://github.com/gliderlabs/logspout/blob/master/router/types.go#L52) passed as data. You can access the following fields\n\n* `Source` - source stream name (\"stdout\", \"stderr\", ...)\n* `Data` - original log message \n* `Time` - a Go [`Time` struct](https://golang.org/pkg/time/#Time)\n* `Container` - a [go-dockerclient](https://github.com/fsouza/go-dockerclient) `Container` struct (see [container.go](https://github.com/fsouza/go-dockerclient/blob/master/container.go#L443) source file for accessible fields)\n\n\nUse examples:\n\n##### Mixed JSON + generic:\n```\n{{ .Time.Format \"2006-01-02T15:04:05Z07:00\" }} { \"container\" : \"{{ .Container.Name }}\", \"labels\": {{ toJSON .Container.Config.Labels }}, \"timestamp\": \"{{ .Time.Format \"2006-01-02T15:04:05Z07:00\" }}\", \"source\" : \"{{ .Source }}\", \"message\": {{ toJSON .Data }} }\n```\n\n```\n2017-10-26T11:59:32Z { \"container\" : \"/catalogo_worker_1\", \"image\": \"sha256:e9bce6c17c80c603c4c8dbac2ad2285982d218f6ea0332f8b0fb84572941b773\", \"labels\": {\"com.docker.compose.config-hash\":\"4f9c3d3bfb2f65e29a4bc8a4a1b3f0a1c8a42323106a5e9106fe9279f8031321\",\"com.docker.compose.container-number\":\"1\",\"com.docker.compose.oneoff\":\"False\",\"com.docker.compose.project\":\"catalogo\",\"com.docker.compose.service\":\"worker\",\"com.docker.compose.version\":\"1.16.1\",\"logging\":\"true\"}, \"timestamp\": \"2017-10-26T11:59:32Z\", \"source\" : \"stdout\", \"message\": \"2017-10-26 11:59:32,950 INFO success: command_bus_0 entered RUNNING state, process has stayed up for \\u003e than 1 seconds (startsecs)\" }\n```\n\n##### Full JSON like:\n\n```\n{ \"container\" : \"{{ .Container.Name }}\", \"labels\": {{ toJSON .Container.Config.Labels }}, \"timestamp\": \"{{ .Time.Format \"2006-01-02T15:04:05Z07:00\" }}\", \"source\" : \"{{ .Source }}\", \"message\": {{ toJSON .Data }} }\n```\n\n```json\n{\n  \"container\": \"/a_container\",\n  \"image\": \"sha256:e9bce6c17c80c603c4c8dbac2ad2285982d218f6ea0332f8b0fb84572941b773\",\n  \"labels\": {\n    \"com.docker.compose.config-hash\": \"4f9c3d3bfb2f65e29a4bc8a4a1b3f0a1c8a42323106a5e9106fe9279f8031321\",\n    \"com.docker.compose.container-number\": \"1\",\n    \"com.docker.compose.oneoff\": \"False\",\n    \"com.docker.compose.project\": \"a_project\",\n    \"com.docker.compose.service\": \"worker\",\n    \"com.docker.compose.version\": \"1.16.1\",\n    \"logging\": \"true\"\n  },\n  \"timestamp\": \"2017-10-26T11:59:32Z\",\n  \"source\": \"stdout\",\n  \"message\": \"2017-10-26 11:59:32,950 INFO success: command_bus_0 entered RUNNING state, process has stayed up for > than 1 seconds (startsecs)\"\n}\n\n```\n\n#### Syslog TCP Framing\n\nWhen using a TCP or TLS transport with the Syslog adapter, it is possible to add octet-counting to the emitted frames as described in [RFC6587 (Syslog over TCP) 3.4.1](https://tools.ietf.org/html/rfc6587#section-3.4.1) and [RFC5424 (Syslog over TLS)](https://tools.ietf.org/html/rfc5424).\n\nThis prefixes each message with the length of the message to allow consumers to easily determine where the message ends (rather than traditional LF framing). This also enables multiline Syslog messages without escaping.\n\nTo enable octet-counted framing for Syslog over TCP or TLS, use the `SYSLOG_TCP_FRAMING` environment variable:\n\n    $ docker run --name=\"logspout\" \\\n        -e SYSLOG_TCP_FRAMING=octet-counted \\\n        --volume=/var/run/docker.sock:/var/run/docker.sock \\\n        gliderlabs/logspout \\\n        syslog+tcp://logs.papertrailapp.com:55555\n\n> NOTE: The default is to use traditional LF framing for backwards compatibility though octet-counted framing is preferred when it is known the downstream consumer can handle it.\n\n#### Using Logspout in a swarm\n\nIn a swarm, logspout is best deployed as a global service.  When running logspout with 'docker run', you can change the value of the hostname field using the `SYSLOG_HOSTNAME` environment variable as explained above. However, this does not work in a compose file because the value for `SYSLOG_HOSTNAME` will be the same for all logspout \"tasks\", regardless of the docker host on which they run. To support this mode of deployment, the syslog adapter will look for the file `/etc/host_hostname` and, if the file exists and it is not empty, will configure the hostname field with the content of this file. You can then use a volume mount to map a file on the docker hosts with the file `/etc/host_hostname` in the container.  The sample compose file below illustrates how this can be done\n\n```yml\nversion: \"3\"\nnetworks:\n  logging:\nservices:\n  logspout:\n    image: gliderlabs/logspout:latest\n    networks:\n      - logging\n    volumes:\n      - /etc/hostname:/etc/host_hostname:ro\n      - /var/run/docker.sock:/var/run/docker.sock\n    command:\n      syslog://svt2-logger.am2.cloudra.local:514\n    deploy:\n      mode: global\n      resources:\n        limits:\n          cpus: '0.20'\n          memory: 256M\n        reservations:\n          cpus: '0.10'\n          memory: 128M\n```\n\nlogspout can then be deployed as a global service in the swarm with the following command\n\n```bash\ndocker stack deploy --compose-file <name of your compose file> STACK\n```\n\nMore information about services and their mode of deployment can be found here:\nhttps://docs.docker.com/engine/swarm/how-swarm-mode-works/services/ \n\n### TLS Settings\nlogspout supports modification of the client TLS settings via environment variables described below:\n\n| Environment Variable  | Description |\n| :---                  |  :---       |\n| `LOGSPOUT_TLS_DISABLE_SYSTEM_ROOTS` | when set to `true` it disables loading the system trust store into the trust store of logspout |\n| `LOGSPOUT_TLS_CA_CERTS` | a comma separated list of filesystem paths to pem encoded CA certificates that should be added to logspout's TLS trust store. Each pem file can contain more than one certificate |\n| `LOGSPOUT_TLS_CLIENT_CERT` | filesystem path to pem encoded x509 client certificate to load when TLS mutual authentication is desired |\n| `LOGSPOUT_TLS_CLIENT_KEY` | filesystem path to pem encoded client private key to load when TLS mutual authentication is desired |\n| `LOGSPOUT_TLS_HARDENING` | when set to `true` it enables stricter client TLS settings designed to mitigate some known TLS vulnerabilities |\n\n#### Example TLS settings\nThe following settings cover some common use cases.\nWhen running docker, use the `-e` flag to supply environment variables\n\n**add your own CAs to the list of trusted authorities**\n```\nexport LOGSPOUT_TLS_CA_CERTS=\"/opt/tls/ca/myRootCA1.pem,/opt/tls/ca/myRootCA2.pem\"\n```\n\n**force logspout to ONLY trust your own CA**\n```\nexport LOGSPOUT_TLS_DISABLE_SYSTEM_ROOTS=true\nexport LOGSPOUT_TLS_CA_CERTS=\"/opt/tls/ca/myRootCA1.pem\"\n```\n\n**configure client authentication**\n```\nexport LOGSPOUT_TLS_CLIENT_CERT=\"/opt/tls/client/myClient.pem\"\nexport LOGSPOUT_TLS_CLIENT_KEY=\"/opt/tls/client/myClient-key.pem\"\n```\n\n**highest possible security settings (paranoid mode)**\n```\nexport LOGSPOUT_TLS_DISABLE_SYSTEM_ROOTS=true\nexport LOGSPOUT_TLS_HARDENING=true\nexport LOGSPOUT_TLS_CA_CERTS=\"/opt/tls/ca/myRootCA1.pem\"\nexport LOGSPOUT_TLS_CLIENT_CERT=\"/opt/tls/client/myClient.pem\"\nexport LOGSPOUT_TLS_CLIENT_KEY=\"/opt/tls/client/myClient-key.pem\"\n```\n\n## Modules\n\nThe standard distribution of logspout comes with all modules defined in this repository. You can remove or add new modules with custom builds of logspout. In the `custom` dir, edit the `modules.go` file and do a `docker build`.\n\n### Builtin modules\n\n * adapters/raw\n * adapters/syslog\n * transports/tcp\n * transports/tls\n * transports/udp\n * httpstream\n * routesapi\n\n### Third-party modules\n\n * [logspout-kafka](https://github.com/dylanmei/logspout-kafka)\n * logspout-redis...\n * [logspout-logstash](https://github.com/looplab/logspout-logstash)\n * [logspout-redis-logstash](https://github.com/rtoma/logspout-redis-logstash)\n * [logspout-gelf](https://github.com/micahhausler/logspout-gelf) for Graylog\n * [logspout-fluentd](https://github.com/dsouzajude/logspout-fluentd) for fluentd or fluent-bit - instead of using fluentd log driver\n * [logspout-slack](https://github.com/kalisio/logspout-slack) for [Slack](https://slack.com/) notifications\n\n### Loggly support\n\nUse logspout to stream your docker logs to Loggly via the [Loggly syslog endpoint](https://www.loggly.com/docs/streaming-syslog-without-using-files/).\n```\n$ docker run --name logspout -d --volume=/var/run/docker.sock:/var/run/docker.sock \\\n    -e SYSLOG_STRUCTURED_DATA=\"<Loggly API Key>@41058 tag=\\\"some tag name\\\"\" \\\n    gliderlabs/logspout \\\n    syslog+tcp://logs-01.loggly.com:514\n```\n\n## Contributing\n\nAs usual, pull requests are welcome. You can also propose releases by opening a PR against the `release` branch from `master`. Please be sure to bump the version and update `CHANGELOG.md` and include your changelog text in the PR body.\n\nDiscuss logspout development with us on Freenode in `#gliderlabs`.\n\n## Sponsor\n\nThis project was made possible by [DigitalOcean](http://digitalocean.com) and [Deis](http://deis.io).\n\n## License\n\nBSD\n<img src=\"https://ga-beacon.appspot.com/UA-58928488-2/logspout/readme?pixel\" />\n"
        },
        {
          "name": "SPONSORS",
          "type": "blob",
          "size": 0.064453125,
          "content": "DigitalOcean \thttp://digitalocean.com\nDeis Project\thttp://deis.io\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0078125,
          "content": "v3.2.14\n"
        },
        {
          "name": "adapters",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-custom.sh",
          "type": "blob",
          "size": 0.2099609375,
          "content": "set -ex\n\ndocker run --rm -v \"$GOPATH\":/go -w /go/src/github.com/gliderlabs/logspout -e \"GOPATH=/go\" iron/go:dev sh -c 'go build -o logspout'\n\n# Can build the image too\n# docker build -t gliderlabs/logspout:latest .\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.2763671875,
          "content": "#!/bin/sh\nset -e\napk add --update go build-base git mercurial ca-certificates\ncd /src\ngo build -ldflags \"-X main.Version=$1\" -o /bin/logspout\napk del go git mercurial build-base\nrm -rf /root/go /var/cache/apk/*\n\n# backwards compatibility\nln -fs /tmp/docker.sock /var/run/docker.sock\n"
        },
        {
          "name": "cfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "custom",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.2841796875,
          "content": "module github.com/gliderlabs/logspout\n\ngo 1.13\n\nrequire (\n\tgithub.com/Microsoft/hcsshim v0.8.14 // indirect\n\tgithub.com/Sirupsen/logrus v0.10.1-0.20160601113210-f3cfb454f4c2 // indirect\n\tgithub.com/containerd/cgroups v0.0.0-20210114181951-8a68de567b68 // indirect\n\tgithub.com/containerd/containerd v1.4.3 // indirect\n\tgithub.com/containerd/continuity v0.0.0-20201208142359-180525291bb7 // indirect\n\tgithub.com/docker/docker v20.10.3+incompatible // indirect\n\tgithub.com/docker/engine-api v0.3.2-0.20160708123604-98348ad6f9c8 // indirect\n\tgithub.com/fsouza/go-dockerclient v1.7.0\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/gorilla/context v0.0.0-20160525203319-aed02d124ae4 // indirect\n\tgithub.com/gorilla/mux v1.8.0\n\tgithub.com/hashicorp/go-cleanhttp v0.0.0-20160407174126-ad28ea4487f0 // indirect\n\tgithub.com/hashicorp/golang-lru v0.5.4 // indirect\n\tgithub.com/looplab/logspout-logstash v0.0.0-20171130125839-68a4e47e757d\n\tgithub.com/moby/term v0.0.0-20201216013528-df9cb8a40635 // indirect\n\tgithub.com/opencontainers/runc v1.0.0-rc1.0.20160706165155-9d7831e41d3e // indirect\n\tgo.opencensus.io v0.22.6 // indirect\n\tgolang.org/x/net v0.0.0-20201110031124-69a78807bb2b\n\tgolang.org/x/sync v0.0.0-20201207232520-09787c993a3a // indirect\n\tgolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 27.6123046875,
          "content": "bazil.org/fuse v0.0.0-20160811212531-371fbbdaa898/go.mod h1:Xbm+BRKSBEpa4q4hTSxohYNQpsxXPbPry4JJWOB3LB8=\ncloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78 h1:w+iIsaOQNcT7OZ575w+acHgRric5iCyQh+xv+KJ4HB8=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/Microsoft/go-winio v0.4.15-0.20200908182639-5b44b70ab3ab/go.mod h1:tTuCMEN+UleMWgg9dVx4Hu52b1bJo+59jBh3ajtinzw=\ngithub.com/Microsoft/go-winio v0.4.16-0.20201130162521-d1ffc52c7331/go.mod h1:XB6nPKklQyQ7GC9LdcBEcBl8PF76WugXOPRXwdLnMv0=\ngithub.com/Microsoft/go-winio v0.4.16 h1:FtSW/jqD+l4ba5iPBj9CODVtgfYAD8w2wS923g/cFDk=\ngithub.com/Microsoft/go-winio v0.4.16/go.mod h1:XB6nPKklQyQ7GC9LdcBEcBl8PF76WugXOPRXwdLnMv0=\ngithub.com/Microsoft/hcsshim v0.8.10 h1:k5wTrpnVU2/xv8ZuzGkbXVd3js5zJ8RnumPo5RxiIxU=\ngithub.com/Microsoft/hcsshim v0.8.10/go.mod h1:g5uw8EV2mAlzqe94tfNBNdr89fnbD/n3HV0OhsddkmM=\ngithub.com/Microsoft/hcsshim v0.8.14 h1:lbPVK25c1cu5xTLITwpUcxoA9vKrKErASPYygvouJns=\ngithub.com/Microsoft/hcsshim v0.8.14/go.mod h1:NtVKoYxQuTLx6gEq0L96c9Ju4JbRJ4nY2ow3VK6a9Lg=\ngithub.com/Sirupsen/logrus v0.10.1-0.20160601113210-f3cfb454f4c2 h1:3BYvDlSNPyoYk6lr17s9IueNAabOBur3f3uVULjbhTA=\ngithub.com/Sirupsen/logrus v0.10.1-0.20160601113210-f3cfb454f4c2/go.mod h1:rmk17hk6i8ZSAJkSDa7nOxamrG+SP4P0mm+DAvExv4U=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cilium/ebpf v0.0.0-20200110133405-4032b1d8aae3/go.mod h1:MA5e5Lr8slmEg9bt0VpxxWqJlO4iwu3FBdHUzV7wQVg=\ngithub.com/cilium/ebpf v0.2.0/go.mod h1:To2CFviqOWL/M0gIMsvSMlqe7em/l1ALkX1PyjrX2Qs=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/containerd/cgroups v0.0.0-20200531161412-0dbf7f05ba59 h1:qWj4qVYZ95vLWwqyNJCQg7rDsG5wPdze0UaPolH7DUk=\ngithub.com/containerd/cgroups v0.0.0-20200531161412-0dbf7f05ba59/go.mod h1:pA0z1pT8KYB3TCXK/ocprsh7MAkoW8bZVzPdih9snmM=\ngithub.com/containerd/cgroups v0.0.0-20210114181951-8a68de567b68 h1:hkGVFjz+plgr5UfxZUTPFbUFIF/Km6/s+RVRIRHLrrY=\ngithub.com/containerd/cgroups v0.0.0-20210114181951-8a68de567b68/go.mod h1:ZJeTFisyysqgcCdecO57Dj79RfL0LNeGiFUqLYQRYLE=\ngithub.com/containerd/console v0.0.0-20180822173158-c12b1e7919c1/go.mod h1:Tj/on1eG8kiEhd0+fhSDzsPAFESxzBBvdyEgyryXffw=\ngithub.com/containerd/containerd v1.3.2/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=\ngithub.com/containerd/containerd v1.4.1 h1:pASeJT3R3YyVn+94qEPk0SnU1OQ20Jd/T+SPKy9xehY=\ngithub.com/containerd/containerd v1.4.1/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=\ngithub.com/containerd/containerd v1.4.3 h1:ijQT13JedHSHrQGWFcGEwzcNKrAGIiZ+jSD5QQG07SY=\ngithub.com/containerd/containerd v1.4.3/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=\ngithub.com/containerd/continuity v0.0.0-20190426062206-aaeac12a7ffc/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=\ngithub.com/containerd/continuity v0.0.0-20200928162600-f2cc35102c2a h1:jEIoR0aA5GogXZ8pP3DUzE+zrhaF6/1rYZy+7KkYEWM=\ngithub.com/containerd/continuity v0.0.0-20200928162600-f2cc35102c2a/go.mod h1:W0qIOTD7mp2He++YVq+kgfXezRYqzP1uDuMVH1bITDY=\ngithub.com/containerd/continuity v0.0.0-20201208142359-180525291bb7 h1:6ejg6Lkk8dskcM7wQ28gONkukbQkM4qpj4RnYbpFzrI=\ngithub.com/containerd/continuity v0.0.0-20201208142359-180525291bb7/go.mod h1:kR3BEg7bDFaEddKm54WSmrol1fKWDU1nKYkgrcgZT7Y=\ngithub.com/containerd/fifo v0.0.0-20190226154929-a9fb20d87448/go.mod h1:ODA38xgv3Kuk8dQz2ZQXpnv/UZZUHUCL7pnLehbXgQI=\ngithub.com/containerd/go-runc v0.0.0-20180907222934-5a6d9f37cfa3/go.mod h1:IV7qH3hrUgRmyYrtgEeGWJfWbgcHL9CSRruz2Vqcph0=\ngithub.com/containerd/ttrpc v0.0.0-20190828154514-0e0f228740de/go.mod h1:PvCDdDGpgqzQIzDW1TphrGLssLDZp2GuS+X5DkEJB8o=\ngithub.com/containerd/typeurl v0.0.0-20180627222232-a93fcdb778cd/go.mod h1:Cm3kwCdlkCfMSHURc+r6fwoGH6/F1hH3S4sg0rLFWPc=\ngithub.com/coreos/go-systemd/v22 v22.0.0/go.mod h1:xO0FLkIi5MaZafQlIrOotqXZ90ih+1atmu1JpKERPPk=\ngithub.com/coreos/go-systemd/v22 v22.1.0/go.mod h1:xO0FLkIi5MaZafQlIrOotqXZ90ih+1atmu1JpKERPPk=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/creack/pty v1.1.11/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/docker/docker v1.4.2-0.20160708193732-ad969f1aa782 h1:akNYo0V5gmaDl8LUnd9G1/3Y8ohMl3s2b8gfvBHnURo=\ngithub.com/docker/docker v1.4.2-0.20160708193732-ad969f1aa782/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/docker v20.10.0-beta1.0.20201113105859-b6bfff2a628f+incompatible h1:lwpV3629md5omgAKjxPWX17shI7vMRpE3nyb9WHn8pA=\ngithub.com/docker/docker v20.10.0-beta1.0.20201113105859-b6bfff2a628f+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/docker v20.10.3+incompatible h1:+HS4XO73J41FpA260ztGujJ+0WibrA2TPJEnWNSyGNE=\ngithub.com/docker/docker v20.10.3+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/engine-api v0.3.2-0.20160708123604-98348ad6f9c8 h1:H443uS3liJKNFX8++m61ng44AnC+HKV1MU9Uhmq3hUk=\ngithub.com/docker/engine-api v0.3.2-0.20160708123604-98348ad6f9c8/go.mod h1:xtQCpzf4YysNZCVFfIGIm7qfLvYbxtLkEVVfKhTVOvw=\ngithub.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=\ngithub.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-units v0.3.1 h1:QAFdsA6jLCnglbqE6mUsHuPcJlntY94DkxHf4deHKIU=\ngithub.com/docker/go-units v0.3.1/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/docker/go-units v0.4.0 h1:3uh0PgVws3nIA0Q+MwDC8yjEPf9zjRfZZWXZYDct3Tw=\ngithub.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/fsouza/go-dockerclient v0.0.0-20160624230725-1a3d0cfd7814 h1:FSgKZZ2VFfEZkvrRfZ5LmUEgVapd9pnam49bjbV6a7M=\ngithub.com/fsouza/go-dockerclient v0.0.0-20160624230725-1a3d0cfd7814/go.mod h1:KpcjM623fQYE9MZiTGzKhjfxXAV9wbyX2C1cyRHfhl0=\ngithub.com/fsouza/go-dockerclient v1.7.0 h1:Ie1/8pAnBHNyCbSIDnYKBdXUEobk4AeJhWZz7k6rWfc=\ngithub.com/fsouza/go-dockerclient v1.7.0/go.mod h1:Ny0LfP7OOsYu9nAi4339E4Ifor6nGBFO2M8lnd2nR+c=\ngithub.com/godbus/dbus/v5 v5.0.3/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gogo/protobuf v1.3.1 h1:DqDEcV5aeaTmdFBePNpYsp3FlcVH/2ISVVM9Qf8PSls=\ngithub.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e h1:1r7pUrabqp18hOBcwBwiTsbnFeTZHV9eER/QT5JVZxY=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/context v0.0.0-20160525203319-aed02d124ae4 h1:3nOfQt8sRPYbXORD5tJ8YyQ3HlL2Jt3LJ2U17CbNh6I=\ngithub.com/gorilla/context v0.0.0-20160525203319-aed02d124ae4/go.mod h1:kBGZzfjB9CEq2AlWe17Uuf7NDRt0dE0s8S51q0aT7Yg=\ngithub.com/gorilla/mux v0.0.0-20160605233521-9fa818a44c2b h1:OFvZV3a+25cGJH9dETHw0nk0wV6hLZI7IJijOkXEFS0=\ngithub.com/gorilla/mux v0.0.0-20160605233521-9fa818a44c2b/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gorilla/mux v1.8.0 h1:i40aqfkR1h2SlN9hojwV5ZA91wcXFOvkdNIeFDP5koI=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/hashicorp/go-cleanhttp v0.0.0-20160407174126-ad28ea4487f0 h1:2l0haPDqCzZEO160UR5DSrrl8RWptFCoxFsSbRLJBaI=\ngithub.com/hashicorp/go-cleanhttp v0.0.0-20160407174126-ad28ea4487f0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/golang-lru v0.5.1 h1:0hERBMJE1eitiLkihrMvRVBYAkpHzc/J3QdDN+dAcgU=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\ngithub.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.3 h1:CE8S1cTafDpPvMhIxNJKvHsGVBgn1xWYf1NbHQhywc8=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/looplab/logspout-logstash v0.0.0-20171130125839-68a4e47e757d h1:XHk6tU5oWCIrflIeYkS7/6nKMvqo3q//bJud+L4BguI=\ngithub.com/looplab/logspout-logstash v0.0.0-20171130125839-68a4e47e757d/go.mod h1:JGtIU22PbW89UiPrH/M1qcGZ9WkWlibloyUHGQ3Tgok=\ngithub.com/moby/sys/mount v0.2.0 h1:WhCW5B355jtxndN5ovugJlMFJawbUODuW8fSnEH6SSM=\ngithub.com/moby/sys/mount v0.2.0/go.mod h1:aAivFE2LB3W4bACsUXChRHQ0qKWsetY4Y9V7sxOougM=\ngithub.com/moby/sys/mountinfo v0.4.0 h1:1KInV3Huv18akCu58V7lzNlt+jFmqlu1EaErnEHE/VM=\ngithub.com/moby/sys/mountinfo v0.4.0/go.mod h1:rEr8tzG/lsIZHBtN/JjGG+LMYx9eXgW2JI+6q0qou+A=\ngithub.com/moby/term v0.0.0-20201110203204-bea5bbe245bf h1:Un6PNx5oMK6CCwO3QTUyPiK2mtZnPrpDl5UnZ64eCkw=\ngithub.com/moby/term v0.0.0-20201110203204-bea5bbe245bf/go.mod h1:FBS0z0QWA44HXygs7VXDUOGoN/1TV3RuWkLO04am3wc=\ngithub.com/moby/term v0.0.0-20201216013528-df9cb8a40635 h1:rzf0wL0CHVc8CEsgyygG0Mn9CNCCPZqOPaz8RiiHYQk=\ngithub.com/moby/term v0.0.0-20201216013528-df9cb8a40635/go.mod h1:FBS0z0QWA44HXygs7VXDUOGoN/1TV3RuWkLO04am3wc=\ngithub.com/morikuni/aec v1.0.0 h1:nP9CBfwrvYnBRgY6qfDQkygYDmYwOilePFkwzv4dU8A=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/opencontainers/go-digest v0.0.0-20180430190053-c9281466c8b2/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.0.1 h1:JMemWkRwHx4Zj+fVxWoMCFm/8sYGGrUVojFA6h/TRcI=\ngithub.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=\ngithub.com/opencontainers/runc v0.0.0-20190115041553-12f6a991201f/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=\ngithub.com/opencontainers/runc v0.1.1/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=\ngithub.com/opencontainers/runc v1.0.0-rc1.0.20160706165155-9d7831e41d3e h1:SO9iqX0giNVXkTwPdEENwl1wK+RqviyAnCEbJS5azMU=\ngithub.com/opencontainers/runc v1.0.0-rc1.0.20160706165155-9d7831e41d3e/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=\ngithub.com/opencontainers/runtime-spec v1.0.2/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/procfs v0.0.0-20180125133057-cb4147076ac7/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.6.0 h1:UBcNElsrwanuuMsnGSlYmtmgbb23qDR5dG+6X6Oo89I=\ngithub.com/sirupsen/logrus v1.6.0/go.mod h1:7uNnSEd1DgxDLC74fIahvMZmmYsHGZGEOFrfsX/uA88=\ngithub.com/sirupsen/logrus v1.7.0 h1:ShrD1U9pZB12TX0cVy0DtePoCH97K8EtX+mg7ZARUtM=\ngithub.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/spf13/cobra v0.0.2-0.20171109065643-2da4a54c5cee/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=\ngithub.com/spf13/pflag v1.0.1-0.20171106142849-4c012f6dcd95/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.4.0 h1:2E4SXV/wtOkTonXsotYi4li6zVWxYlZuYNCXe9XRJyk=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/urfave/cli v1.22.2/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngo.opencensus.io v0.22.0 h1:C9hSCOW830chIVkdja34wa6Ky+IzWllkUinR+BtRZd4=\ngo.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=\ngo.opencensus.io v0.22.6 h1:BdkrbWrzDlV9dnbzoP7sfN+dHheJ4J9JOaYxcUDL+ok=\ngo.opencensus.io v0.22.6/go.mod h1:XItmlyltB5F7CS4xOC1DcqMoFqwtC6OG2xF7mCv7P7E=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20160707223729-f841c39de738 h1:N5K0l3yYkhlC0RSRoAhtspo2WgRvBMwZYoyB2ji+gkg=\ngolang.org/x/net v0.0.0-20160707223729-f841c39de738/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191004110552-13f9640d40b9/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201110031124-69a78807bb2b h1:uwuIcX0g4Yl1NC5XAz37xsr2lTtcqevgzYNVt49waME=\ngolang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58 h1:8gQV6CLnAEikrhgkHFbMAEhagSSnXWGV915qUMm9mrU=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201207232520-09787c993a3a h1:DcqTD9SDLc+1P/r1EmRBwnVsrOwW+kk2vWf9n+1sGhs=\ngolang.org/x/sync v0.0.0-20201207232520-09787c993a3a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20160704031755-a408501be4d1 h1:QtO5ZFD1u7KisZhuRLL2GaZAZDdJqUcTdjFJj8OEePA=\ngolang.org/x/sys v0.0.0-20160704031755-a408501be4d1/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191022100944-742c48ecaeb7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200120151820-655fe14d7479/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200124204421-9fbb57f87de9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200831180312-196b9ba8737a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200909081042-eff7692f9009/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200922070232-aee5d888a860 h1:YEu4SMq7D0cmT7CBbXfcH0NZeuChAXwsHe/9XueUO6o=\ngolang.org/x/sys v0.0.0-20200922070232-aee5d888a860/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201201145000-ef89a241ccb3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c h1:VwygUrnw9jn88c4u8GD3rZQbqrP/tgas88tPUbBxQrk=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/term v0.0.0-20201113234701-d7a72108b828/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.23.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2 h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=\ngotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=\ngotest.tools/v3 v3.0.3/go.mod h1:Z7Lb0S5l+klDB31fvDQX8ss/FlKDxtlFlw3Oa8Ymbl8=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\n"
        },
        {
          "name": "healthcheck",
          "type": "tree",
          "content": null
        },
        {
          "name": "httpstream",
          "type": "tree",
          "content": null
        },
        {
          "name": "logspout.go",
          "type": "blob",
          "size": 1.6875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"text/tabwriter\"\n\n\t\"github.com/gliderlabs/logspout/cfg\"\n\t\"github.com/gliderlabs/logspout/router\"\n)\n\n// Version is the running version of logspout\nvar Version string\n\nfunc main() {\n\tif len(os.Args) == 2 && os.Args[1] == \"--version\" {\n\t\tfmt.Printf(\"%s\\n\", Version)\n\t\tos.Exit(0)\n\t}\n\n\tlog.Printf(\"# logspout %s by gliderlabs\\n\", Version)\n\tlog.Printf(\"# adapters: %s\\n\", strings.Join(router.AdapterFactories.Names(), \" \"))\n\tlog.Printf(\"# options : \")\n\tif d := cfg.GetEnvDefault(\"DEBUG\", \"\"); d != \"\" {\n\t\tlog.Printf(\"debug:%s\\n\", d)\n\t}\n\tif b := cfg.GetEnvDefault(\"BACKLOG\", \"\"); b != \"\" {\n\t\tlog.Printf(\"backlog:%s\\n\", b)\n\t}\n\tlog.Printf(\"persist:%s\\n\", cfg.GetEnvDefault(\"ROUTESPATH\", \"/mnt/routes\"))\n\n\tvar jobs []string\n\tfor _, job := range router.Jobs.All() {\n\t\tif err := job.Setup(); err != nil {\n\t\t\tlog.Printf(\"!! %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif job.Name() != \"\" {\n\t\t\tjobs = append(jobs, job.Name())\n\t\t}\n\t}\n\tlog.Printf(\"# jobs    : %s\\n\", strings.Join(jobs, \" \"))\n\n\troutes, _ := router.Routes.GetAll()\n\tif len(routes) > 0 {\n\t\tlog.Println(\"# routes  :\")\n\t\tw := new(tabwriter.Writer)\n\t\tw.Init(os.Stdout, 0, 8, 0, '\\t', 0)\n\t\tfmt.Fprintln(w, \"#   ADAPTER\\tADDRESS\\tCONTAINERS\\tSOURCES\\tOPTIONS\") //nolint:errcheck\n\t\tfor _, route := range routes {\n\t\t\tfmt.Fprintf(w, \"#   %s\\t%s\\t%s\\t%s\\t%s\\n\",\n\t\t\t\troute.Adapter,\n\t\t\t\troute.Address,\n\t\t\t\troute.FilterID+route.FilterName+strings.Join(route.FilterLabels, \",\"),\n\t\t\t\tstrings.Join(route.FilterSources, \",\"),\n\t\t\t\troute.Options)\n\t\t}\n\t\tw.Flush()\n\t} else {\n\t\tlog.Println(\"# routes  : none\")\n\t}\n\n\tfor _, job := range router.Jobs.All() {\n\t\tjob := job\n\t\tgo func() {\n\t\t\tlog.Fatalf(\"%s ended: %s\", job.Name(), job.Run())\n\t\t}()\n\t}\n\n\tselect {}\n}\n"
        },
        {
          "name": "modules.go",
          "type": "blob",
          "size": 0.4638671875,
          "content": "package main\n\nimport (\n\t_ \"github.com/gliderlabs/logspout/adapters/multiline\"\n\t_ \"github.com/gliderlabs/logspout/adapters/raw\"\n\t_ \"github.com/gliderlabs/logspout/adapters/syslog\"\n\t_ \"github.com/gliderlabs/logspout/healthcheck\"\n\t_ \"github.com/gliderlabs/logspout/httpstream\"\n\t_ \"github.com/gliderlabs/logspout/routesapi\"\n\t_ \"github.com/gliderlabs/logspout/transports/tcp\"\n\t_ \"github.com/gliderlabs/logspout/transports/tls\"\n\t_ \"github.com/gliderlabs/logspout/transports/udp\"\n)\n"
        },
        {
          "name": "router",
          "type": "tree",
          "content": null
        },
        {
          "name": "routesapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "run-custom.sh",
          "type": "blob",
          "size": 0.212890625,
          "content": "set -ex\n\n./build-custom.sh\ndocker build --file Dockerfile.custom -t mylogspouter .\ndocker run --rm --name=logspout \\\n    -v=/var/run/docker.sock:/var/run/docker.sock \\\n    -p 8000:80 \\\n    mylogspouter \\\n    ${SYSLOG}\n"
        },
        {
          "name": "transports",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}