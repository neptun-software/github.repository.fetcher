{
  "metadata": {
    "timestamp": 1736567334019,
    "page": 944,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/gapid",
      "stars": 2210,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Symlink from the gapic/README instructions\nbazel-external\nfused\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 1.859375,
          "content": "# Copyright (C) 2018 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Bazel RC file for the GAPID build.\n\n# Import any user defined rules.\ntry-import %workspace%/user.bazelrc\n\n# Adjusting defaults to favour developer workflows\nbuild --verbose_failures\ntest --test_output=errors\nquery --nohost_deps --noimplicit_deps\n\n# Adding in c++11 compiling, this really should be done in the android toolchains\nbuild --cxxopt=\"-std=c++11\" --host_cxxopt=\"-std=c++11\"\n\n# Android special build configurations\nbuild --fat_apk_cpu armeabi-v7a,arm64-v8a,x86\n\n# Default version defines\nbuild --define GAPID_BUILD_NUMBER=0 --define GAPID_BUILD_SHA=developer\n\n# Without this, bazel wraps each cc_library with \"--whole-archive\" flags for the\n# linker when building the dynamic library, which leads to over-bloated libs.\nbuild --incompatible_remove_legacy_whole_archive\n\n# Makes bazel use Python 2 for genrules using Python executable targets.\nbuild --host_force_python=PY2\n\n# Sets the go +build tags to use during compilation.\nbuild --define gotags=analytics,crashreporting\n\n# Disable c-ares for grpc.\nbuild --define grpc_no_ares=true\n\n# Config used by the build servers to dump symbols.\nbuild:symbols --copt=\"-g\"\n\n# Config that will exclude Android from the //:pkg target.\nbuild:nodroid --define NO_ANDROID=1\n\n# Tests requiring a GPU fail in the sandbox.\ntest --strategy TestRunner=standalone --test_env DISPLAY\n"
        },
        {
          "name": ".bazelversion",
          "type": "blob",
          "size": 0.005859375,
          "content": "2.0.0\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1103515625,
          "content": "BasedOnStyle: Google\n\n# Force pointers to the type for C++.\nDerivePointerAlignment: false\nPointerAlignment: Left\n"
        },
        {
          "name": ".classpath",
          "type": "blob",
          "size": 7.1103515625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<classpath>\n\t<classpathentry excluding=\"BUILD.bazel\" kind=\"src\" path=\"gapic/src/main\"/>\n\t<classpathentry excluding=\"BUILD.bazel\" kind=\"src\" path=\"platform_src\"/>\n\t<classpathentry excluding=\"BUILD.bazel\" kind=\"src\" path=\"gapic/res\"/>\n\t<classpathentry including=\"com/google/gapid/**\" kind=\"src\" path=\"bazel-bin/gapic/src/main\"/>\n\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/core/data/pod/libpod_proto-speed.jar\" sourcepath=\"bazel-bin/core/data/pod/pod_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/core/image/libimage_proto-speed.jar\" sourcepath=\"bazel-bin/core/image/image_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/core/log/log_pb/liblog_pb_proto-speed.jar\" sourcepath=\"bazel-bin/core/log/log_pb/log_pb_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/core/os/device/libdevice_proto-speed.jar\" sourcepath=\"bazel-bin/core/os/device/device_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/core/stream/libstream_proto-speed.jar\" sourcepath=\"bazel-bin/core/stream/stream_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/external/com_google_protobuf/libprotobuf_java.jar\" sourcepath=\"bazel-external/com_google_protobuf/java\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/external/perfetto/libprotos_perfetto_config_merged_config_protos-speed.jar\" sourcepath=\"bazel-bin/external/perfetto/protos_perfetto_config_merged_config_protos-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapidapk/pkginfo/libpkginfo_proto-speed.jar\" sourcepath=\"bazel-bin/gapidapk/pkginfo/pkginfo_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/api/libapi_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/api/api_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/memory/libmemory_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/memory/memory_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/perfetto/service/libservice_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/perfetto/service/service_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/service/box/libbox_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/service/box/box_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/service/memory_box/libmemory_box_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/service/memory_box/memory_box_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/service/path/libpath_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/service/path/path_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/service/severity/libseverity_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/service/severity/severity_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/service/types/libtypes_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/service/types/types_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/service/libservice_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/service/service_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/stringtable/libstringtable_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/stringtable/stringtable_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapis/vertex/libvertex_proto-speed.jar\" sourcepath=\"bazel-bin/gapis/vertex/vertex_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapic/src/main/libservice_grpc.jar\" sourcepath=\"bazel-bin/gapic/src/main/service_grpc-src-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-bin/gapic/src/main/libsettings_proto-speed.jar\" sourcepath=\"bazel-bin/gapic/src/main/settings_proto-speed-src.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/com_google_guava/guava.jar\" sourcepath=\"bazel-external/com_google_guava/guava-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/com_squareup_okhttp/okhttp.jar\" sourcepath=\"bazel-external/com_squareup_okhttp/okhttp-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/com_squareup_okio/okio.jar\" sourcepath=\"bazel-external/com_squareup_okio/okio-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/io_grpc_context/grpc-context.jar\" sourcepath=\"bazel-external/io_grpc_context/grpc-context-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/io_grpc_core/grpc-core.jar\" sourcepath=\"bazel-external/io_grpc_core/grpc-core-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/io_grpc_okhttp/grpc-okhttp.jar\" sourcepath=\"bazel-external/io_grpc_okhttp/grpc-okhttp-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/io_grpc_protobuf/grpc-protobuf.jar\" sourcepath=\"bazel-external/io_grpc_protobuf/grpc-protobuf-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/io_grpc_protobuf_lite/grpc-protobuf-lite.jar\" sourcepath=\"bazel-external/io_grpc_protobuf_lite/grpc-protobuf-lite-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/io_grpc_stub/grpc-stub.jar\" sourcepath=\"bazel-external/io_grpc_stub/grpc-stub-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/io_opencensus_api/opencensus-api.jar\" sourcepath=\"bazel-external/io_opencensus_api/opencensus-api-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/io_opencensus_contrib_grpc_metrics/opencensus-contrib-grpc-metrics.jar\" sourcepath=\"bazel-external/io_opencensus_contrib_grpc_metrics/opencensus-contrib-grpc-metrics-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/jface/org.eclipse.core.commands.jar\" sourcepath=\"bazel-external/jface/org.eclipse.core.commands-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/jface/org.eclipse.core.runtime.jar\" sourcepath=\"bazel-external/jface/org.eclipse.core.runtime-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/jface/org.eclipse.equinox.common.jar\" sourcepath=\"bazel-external/jface/org.eclipse.equinox.common-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/jface/org.eclipse.jface.databinding.jar\" sourcepath=\"bazel-external/jface/org.eclipse.jface.databinding-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/jface/org.eclipse.jface.jar\" sourcepath=\"bazel-external/jface/org.eclipse.jface-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/jface/org.eclipse.jface.text.jar\" sourcepath=\"bazel-external/jface/org.eclipse.jface.text-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/jface/org.eclipse.osgi.jar\" sourcepath=\"bazel-external/jface/org.eclipse.osgi-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/jface/org.eclipse.text.jar\" sourcepath=\"bazel-external/jface/org.eclipse.text-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/org_lwjgl_core/lwjgl.jar\" sourcepath=\"bazel-external/org_lwjgl_core/lwjgl-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/org_lwjgl_opengl/lwjgl-opengl.jar\" sourcepath=\"bazel-external/org_lwjgl_opengl/lwjgl-opengl-sources.jar\"/>\n\t<classpathentry kind=\"lib\" path=\"bazel-external/swt/swt.jar\" sourcepath=\"bazel-external/swt/src.zip\"/>\n\t<classpathentry kind=\"output\" path=\"gapic/bin\"/>\n</classpath>\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.248046875,
          "content": "# Directories\n/.DS_Store\n/.idea\n/.vscode\n/bazel-*\n/fused\n\n# Single files\n/.gapid-config\n/user.bazelrc\n/user.locals\n/screenshot.png\n\n# General patterns\n*.gfxtrace\n*.perfetto\n*ycm_extra_conf.py*\ngapir.log\ngapis.log\n\n# Vim\n[._]*.s[a-w][a-z]\n[._]s[a-w][a-z]\n"
        },
        {
          "name": ".project",
          "type": "blob",
          "size": 2.6435546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>gapic</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n\t</natures>\n\t<linkedResources>\n\t\t<link>\n\t\t\t<name>platform_src</name>\n\t\t\t<type>2</type>\n\t\t\t<locationURI>GAPIC_PLATFORM_SRC</locationURI>\n\t\t</link>\n\t</linkedResources>\n\t<filteredResources>\n\t\t<filter>\n\t\t\t<id>1576009800852</id>\n\t\t\t<name></name>\n\t\t\t<type>29</type>\n\t\t\t<matcher>\n\t\t\t\t<id>org.eclipse.ui.ide.orFilterMatcher</id>\n\t\t\t\t<arguments>\n\t\t\t\t\t<matcher>\n\t\t\t\t\t\t<id>org.eclipse.ui.ide.multiFilter</id>\n\t\t\t\t\t\t<arguments>1.0-projectRelativePath-matches-false-false-bazel-bin</arguments>\n\t\t\t\t\t</matcher>\n\t\t\t\t\t<matcher>\n\t\t\t\t\t\t<id>org.eclipse.ui.ide.multiFilter</id>\n\t\t\t\t\t\t<arguments>1.0-projectRelativePath-matches-false-false-bazel-bin/*</arguments>\n\t\t\t\t\t</matcher>\n\t\t\t\t\t<matcher>\n\t\t\t\t\t\t<id>org.eclipse.ui.ide.multiFilter</id>\n\t\t\t\t\t\t<arguments>1.0-projectRelativePath-matches-false-false-bazel-external</arguments>\n\t\t\t\t\t</matcher>\n\t\t\t\t\t<matcher>\n\t\t\t\t\t\t<id>org.eclipse.ui.ide.andFilterMatcher</id>\n\t\t\t\t\t\t<arguments>\n\t\t\t\t\t\t\t<matcher>\n\t\t\t\t\t\t\t\t<id>org.eclipse.ui.ide.multiFilter</id>\n\t\t\t\t\t\t\t\t<arguments>1.0-projectRelativePath-matches-false-false-bazel-external/*</arguments>\n\t\t\t\t\t\t\t</matcher>\n\t\t\t\t\t\t\t<matcher>\n\t\t\t\t\t\t\t\t<id>org.eclipse.ui.ide.notFilterMatcher</id>\n\t\t\t\t\t\t\t\t<arguments>\n\t\t\t\t\t\t\t\t\t<matcher>\n\t\t\t\t\t\t\t\t\t\t<id>org.eclipse.ui.ide.multiFilter</id>\n\t\t\t\t\t\t\t\t\t\t<arguments>1.0-projectRelativePath-matches-false-false-bazel-external/gapid*</arguments>\n\t\t\t\t\t\t\t\t\t</matcher>\n\t\t\t\t\t\t\t\t\t<matcher>\n\t\t\t\t\t\t\t\t\t\t<id>org.eclipse.ui.ide.multiFilter</id>\n\t\t\t\t\t\t\t\t\t\t<arguments>1.0-projectRelativePath-matches-false-false-bazel-external/androidndk</arguments>\n\t\t\t\t\t\t\t\t\t</matcher>\n\t\t\t\t\t\t\t\t\t<matcher>\n\t\t\t\t\t\t\t\t\t\t<id>org.eclipse.ui.ide.multiFilter</id>\n\t\t\t\t\t\t\t\t\t\t<arguments>1.0-projectRelativePath-matches-false-false-bazel-external/androidsdk</arguments>\n\t\t\t\t\t\t\t\t\t</matcher>\n\t\t\t\t\t\t\t\t\t<matcher>\n\t\t\t\t\t\t\t\t\t\t<id>org.eclipse.ui.ide.multiFilter</id>\n\t\t\t\t\t\t\t\t\t\t<arguments>1.0-projectRelativePath-matches-false-false-bazel-external/llvm</arguments>\n\t\t\t\t\t\t\t\t\t</matcher>\n\t\t\t\t\t\t\t\t</arguments>\n\t\t\t\t\t\t\t</matcher>\n\t\t\t\t\t\t</arguments>\n\t\t\t\t\t</matcher>\n\t\t\t\t\t<matcher>\n\t\t\t\t\t\t<id>org.eclipse.ui.ide.notFilterMatcher</id>\n\t\t\t\t\t\t<arguments>\n\t\t\t\t\t\t\t<matcher>\n\t\t\t\t\t\t\t\t<id>org.eclipse.ui.ide.multiFilter</id>\n\t\t\t\t\t\t\t\t<arguments>1.0-projectRelativePath-matches-false-false-bazel-*</arguments>\n\t\t\t\t\t\t\t</matcher>\n\t\t\t\t\t\t</arguments>\n\t\t\t\t\t</matcher>\n\t\t\t\t</arguments>\n\t\t\t</matcher>\n\t\t</filter>\n\t</filteredResources>\n</projectDescription>\n"
        },
        {
          "name": ".settings",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 14.9248046875,
          "content": "# Copyright (C) 2018 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Description:\n#\n# Gapid is a graphics API debugger.\n\nlicenses([\"notice\"])  # Apache 2.0\n\nexports_files([\"LICENSE\"])\n\nload(\"@bazel_gazelle//:def.bzl\", \"gazelle\")\nload(\"//tools/build:rules.bzl\", \"copy_to\", \"copy_tree\")\n\n# gazelle:prefix github.com/google/gapid\n# gazelle:resolve go    go    llvm/bindings/go/llvm                        @llvm//:go\n# gazelle:resolve go    go    protos/perfetto/common                       //tools/build/third_party/perfetto:common_go_proto\n# gazelle:resolve go    go    protos/perfetto/config                       //tools/build/third_party/perfetto:config_go_proto\n# gazelle:resolve go    go    protos/perfetto/ipc                          //tools/build/third_party/perfetto:ipc_go_proto\n# gazelle:resolve proto proto protos/perfetto/config/perfetto_config.proto @perfetto//:protos_perfetto_config_merged_config_protos\n# gazelle:resolve proto go    protos/perfetto/config/perfetto_config.proto @gapid//tools/build/third_party/perfetto:config_go_proto\n# gazelle:exclude gapic\n\ngazelle(\n    name = \"gazelle\",\n    build_tags = [\n        \"analytics\",\n        \"crashreporting\",\n    ],\n    mode = \"fix\",\n)\n\n# Alias meant to be used with 'bazel run <alias> -- <arguments>'.\nalias(\n    name = \"gapid\",\n    actual = \"//cmd/gapid\",\n)\n\nalias(\n    name = \"gapis\",\n    actual = \"//cmd/gapis\",\n)\n\nalias(\n    name = \"gapir\",\n    actual = \"//cmd/gapir/cc:gapir\",\n)\n\nalias(\n    name = \"gapit\",\n    actual = \"//cmd/gapit\",\n)\n\nalias(\n    name = \"apic\",\n    actual = \"//cmd/apic\",\n)\n\nalias(\n    name = \"enum_lookup\",\n    actual = \"//cmd/enum_lookup\",\n)\n\nalias(\n    name = \"smoketests\",\n    actual = \"//cmd/smoketests\",\n)\n\n# Rules to build the expected installed structure for running\nfilegroup(\n    name = \"pkg\",\n    srcs = [\n        \":pkg-lib\",\n        \":pkg-root\",\n        \":pkg-strings\",\n    ] + select({\n        \"//tools/build:linux\": [\":perfetto\"],\n        \"//tools/build:windows\": [],\n        \"//tools/build:darwin\": [],\n    }),\n)\n\nfilegroup(\n    name = \"symbols\",\n    srcs = [\n        \"//cmd/gapir/cc:gapir.sym\",\n    ] + select({\n        \"//tools/build:linux\": [\n            \"//gapidapk/android/apk:arm64-v8a_gapir.sym\",\n            \"//gapidapk/android/apk:armeabi-v7a_gapir.sym\",\n            \"//gapidapk/android/apk:x86_gapir.sym\",\n        ],\n        \"//conditions:default\": [],\n    }),\n)\n\n# Rules to build the expected installed structure for running\nfilegroup(\n    name = \"gfxapi-ls\",\n    srcs = [\n        \":extension-files\",\n        \":langsvr\",\n        \":vscode-jsonrpc\",\n        \":vscode-languageclient\",\n        \":vscode-languageserver-types\",\n    ],\n)\n\ncopy_to(\n    name = \"extension-files\",\n    srcs = [\n        \"//gapil/langsvr/vscode\",\n    ],\n    to = \"gfxapi-ls-0.0.1\",\n)\n\ncopy_to(\n    name = \"langsvr\",\n    srcs = [\n        \"//gapil/langsvr\",\n    ],\n    to = \"gfxapi-ls-0.0.1/bin\",\n)\n\ncopy_tree(\n    name = \"vscode-languageclient\",\n    srcs = [\n        \"@vscode-languageclient//:vscode-languageclient\",\n    ],\n    strip = \"external/vscode-languageclient/package\",\n    to = \"gfxapi-ls-0.0.1/node_modules/vscode-languageclient\",\n)\n\ncopy_tree(\n    name = \"vscode-jsonrpc\",\n    srcs = [\n        \"@vscode-jsonrpc//:vscode-jsonrpc\",\n    ],\n    strip = \"external/vscode-jsonrpc/package\",\n    to = \"gfxapi-ls-0.0.1/node_modules/vscode-jsonrpc\",\n)\n\ncopy_tree(\n    name = \"vscode-languageserver-types\",\n    srcs = [\n        \"@vscode-languageserver-types//:vscode-languageserver-types\",\n    ],\n    strip = \"external/vscode-languageserver-types/package\",\n    to = \"gfxapi-ls-0.0.1/node_modules/vscode-languageserver-types\",\n)\n\ncopy_to(\n    name = \"pkg-root\",\n    srcs = [\n        \"//cmd/gapid\",\n        \"//cmd/gapir/cc:gapir\",\n        \"//cmd/gapis\",\n        \"//cmd/gapit\",\n        \"//tools/build:build.properties\",\n        \"//cmd/device-info:device-info\",\n    ] + select({\n        \"//tools/build:no-android\": [],\n        \"//conditions:default\": [\n            \"//gapidapk/android/apk:arm64-v8a.apk\",\n            \"//gapidapk/android/apk:armeabi-v7a.apk\",\n            \"//gapidapk/android/apk:x86.apk\",\n        ],\n    }),\n    rename = {\n        \"armeabi-v7a.apk\": \"gapid-armeabi-v7a.apk\",\n        \"arm64-v8a.apk\": \"gapid-arm64-v8a.apk\",\n        \"x86.apk\": \"gapid-x86.apk\",\n    },\n    to = \"pkg\",\n)\n\ncopy_to(\n    name = \"pkg-lib\",\n    srcs = [\n        \"//core/vulkan/vk_virtual_swapchain/cc:json\",\n        \"//core/vulkan/vk_virtual_swapchain/cc:libVkLayer_VirtualSwapchain\",\n        \"//gapic:gapic_deploy.jar\",\n        \"//gapii/cc:libgapii\",\n        \"//gapii/vulkan/vk_graphics_spy/cc:json\",\n    ] + select({\n        \"@gapid//tools/build:linux\": [\n            \"//core/vulkan/vk_api_timing_layer/cc:json\",\n            \"//core/vulkan/vk_api_timing_layer/cc:libVkLayer_CPUTiming\",\n        ],\n        \"//conditions:default\": [\n        ],\n    }) + select({\n        \"@gapid//tools/build:linux\": [\n            \"//core/vulkan/vk_memory_tracker_layer/cc:json\",\n            \"//core/vulkan/vk_memory_tracker_layer/cc:libVkLayer_MemoryTracker\",\n        ],\n        \"//conditions:default\": [\n        ],\n    }),\n    rename = {\n        \"gapic_deploy.jar\": \"gapic.jar\",\n    },\n    to = \"pkg/lib\",\n)\n\ncopy_to(\n    name = \"pkg-strings\",\n    srcs = [\"//gapis/messages:stb\"],\n    to = \"pkg/strings\",\n)\n\ncopy_to(\n    name = \"perfetto\",\n    srcs = [\n        \"@perfetto\",\n        \"@perfetto//:traced\",\n        \"@perfetto//:traced_probes\",\n    ],\n    to = \"pkg/perfetto\",\n)\n\ntest_suite(\n    name = \"tests-core\",\n    tests = [\n        \"//core/app/analytics:go_default_test\",\n        \"//core/app/auth:go_default_test\",\n        \"//core/app/benchmark:go_default_test\",\n        \"//core/app/crash/reporting:go_default_test\",\n        \"//core/app/flags:go_default_test\",\n        \"//core/assert:go_default_test\",\n        \"//core/cc:tests\",\n        \"//core/codegen:go_default_test\",\n        \"//core/context/keys:go_default_test\",\n        \"//core/data:go_default_test\",\n        \"//core/data/binary:go_default_test\",\n        \"//core/data/compare:go_default_test\",\n        \"//core/data/deep:go_default_test\",\n        \"//core/data/dictionary:go_default_test\",\n        \"//core/data/endian:go_default_test\",\n        \"//core/data/generic:go_default_test\",\n        \"//core/data/id:go_default_test\",\n        \"//core/data/pack:go_default_test\",\n        \"//core/data/slice:go_default_test\",\n        \"//core/event/task:go_default_test\",\n        \"//core/fault:go_default_test\",\n        \"//core/fault/stacktrace:go_default_test\",\n        \"//core/fault/stacktrace/crunch:go_default_test\",\n        \"//core/git:go_default_test\",\n        \"//core/image:go_default_test\",\n        # \"//core/java/jdbg:go_default_test\", # disabled: flaky on Kokoro\n        \"//core/java/jdwp:go_default_test\",\n        \"//core/langsvr:go_default_test\",\n        \"//core/log:go_default_test\",\n        \"//core/math/f16:go_default_test\",\n        \"//core/math/f32:go_default_test\",\n        \"//core/math/f64:go_default_test\",\n        \"//core/math/interval:go_default_test\",\n        \"//core/math/sint:go_default_test\",\n        \"//core/memory/arena:go_default_test\",\n        \"//core/memory/arena/cc:tests\",\n        \"//core/memory_tracker/cc:tests\",\n        \"//core/net:go_default_test\",\n        \"//core/net/grpcutil:go_default_test\",\n        \"//core/os/android/adb:go_default_test\",\n        \"//core/os/android/binaryxml:go_default_test\",\n        \"//core/os/android/manifest:go_default_test\",\n        \"//core/os/device:go_default_test\",\n        \"//core/os/device/host:go_default_test\",\n        \"//core/os/device/remotessh:go_default_test\",\n        \"//core/os/file:go_default_test\",\n        \"//core/os/flock:go_default_test\",\n        \"//core/os/shell:go_default_test\",\n        \"//core/os/shell/stub:go_default_test\",\n        \"//core/stream:go_default_test\",\n        \"//core/stream/fmts:go_default_test\",\n        \"//core/text:go_default_test\",\n        \"//core/text/cases:go_default_test\",\n        \"//core/text/parse:go_default_test\",\n    ],\n)\n\ntest_suite(\n    name = \"tests-gapil\",\n    tests = [\n        \"//gapil/analysis:go_default_test\",\n        \"//gapil/bapi:go_default_test\",\n        \"//gapil/compiler:go_default_test\",\n        \"//gapil/compiler/mangling/c:go_default_test\",\n        \"//gapil/compiler/mangling/ia64:go_default_test\",\n        \"//gapil/compiler/plugins/encoder/test:go_default_test\",\n        \"//gapil/compiler/plugins/replay:go_default_test\",\n        \"//gapil/fuzz:go_default_test\",\n        \"//gapil/parser:go_default_test\",\n        \"//gapil/resolver:go_default_test\",\n        \"//gapil/runtime/cc:tests\",\n        \"//gapil/semantic:go_default_test\",\n        \"//gapil/template:go_default_test\",\n        \"//gapil/validate:go_default_test\",\n    ],\n)\n\ntest_suite(\n    name = \"tests-gapis-api\",\n    tests = [\n        \"//gapis/api:go_default_test\",\n        \"//gapis/api/gles:go_default_test\",\n        \"//gapis/api/test:go_default_test\",\n        \"//gapis/api/transform:go_default_test\",\n        \"//gapis/api/vulkan:go_default_test\",\n    ],\n)\n\ntest_suite(\n    name = \"tests-gapis-replay-resolve\",\n    tests = [\n        \"//gapis/replay/asm:go_default_test\",\n        \"//gapis/replay/builder:go_default_test\",\n        \"//gapis/replay/scheduler:go_default_test\",\n        \"//gapis/resolve:go_default_test\",\n        \"//gapis/resolve/dependencygraph:go_default_test\",\n        \"//gapis/resolve/dependencygraph2:go_default_test\",\n        \"//gapis/resolve/dependencygraph2/graph_visualization:go_default_test\",\n    ],\n)\n\ntest_suite(\n    name = \"tests-gapis-other\",\n    tests = [\n        \"//gapis/capture:go_default_test\",\n        \"//gapis/memory:go_default_test\",\n        \"//gapis/service/box:go_default_test\",\n        \"//gapis/shadertools:go_default_test\",\n        \"//gapis/shadertools/cc:tests\",\n        \"//gapis/stringtable/minidown/parser:go_default_test\",\n        \"//gapis/stringtable/minidown/scanner:go_default_test\",\n        \"//gapis/stringtable/parser:go_default_test\",\n        \"//gapis/vertex:go_default_test\",\n    ],\n)\n\ntest_suite(\n    name = \"tests-gapir\",\n    tests = [\n        \"//gapir/cc:tests\",\n    ],\n)\n\ntest_suite(\n    name = \"tests-general\",\n    tests = [\n        \"//test/integration/gles/replay:go_default_test\",\n        \"//test/integration/replay:go_default_test\",\n        \"//test/integration/service:go_default_test\",\n        \"//test/robot/stash/grpc:go_default_test\",\n    ],\n)\n\ntest_suite(\n    name = \"tests\",\n    tests = [\n        # __BEGIN_TESTS\n        \"//core/app/analytics:go_default_test\",\n        \"//core/app/auth:go_default_test\",\n        \"//core/app/benchmark:go_default_test\",\n        \"//core/app/crash/reporting:go_default_test\",\n        \"//core/app/flags:go_default_test\",\n        \"//core/assert:go_default_test\",\n        \"//core/cc:tests\",\n        \"//core/codegen:go_default_test\",\n        \"//core/context/keys:go_default_test\",\n        \"//core/data:go_default_test\",\n        \"//core/data/binary:go_default_test\",\n        \"//core/data/compare:go_default_test\",\n        \"//core/data/deep:go_default_test\",\n        \"//core/data/dictionary:go_default_test\",\n        \"//core/data/endian:go_default_test\",\n        \"//core/data/generic:go_default_test\",\n        \"//core/data/id:go_default_test\",\n        \"//core/data/pack:go_default_test\",\n        \"//core/data/slice:go_default_test\",\n        \"//core/event/task:go_default_test\",\n        \"//core/fault:go_default_test\",\n        \"//core/fault/stacktrace:go_default_test\",\n        \"//core/fault/stacktrace/crunch:go_default_test\",\n        \"//core/git:go_default_test\",\n        \"//core/image:go_default_test\",\n        \"//core/java/jdbg:go_default_test\",\n        \"//core/java/jdwp:go_default_test\",\n        \"//core/langsvr:go_default_test\",\n        \"//core/log:go_default_test\",\n        \"//core/math/f16:go_default_test\",\n        \"//core/math/f32:go_default_test\",\n        \"//core/math/f64:go_default_test\",\n        \"//core/math/interval:go_default_test\",\n        \"//core/math/sint:go_default_test\",\n        \"//core/memory/arena:go_default_test\",\n        \"//core/memory/arena/cc:tests\",\n        \"//core/memory_tracker/cc:tests\",\n        \"//core/net:go_default_test\",\n        \"//core/net/grpcutil:go_default_test\",\n        \"//core/os/android/adb:go_default_test\",\n        \"//core/os/android/binaryxml:go_default_test\",\n        \"//core/os/android/manifest:go_default_test\",\n        \"//core/os/device:go_default_test\",\n        \"//core/os/device/host:go_default_test\",\n        \"//core/os/device/remotessh:go_default_test\",\n        \"//core/os/file:go_default_test\",\n        \"//core/os/flock:go_default_test\",\n        \"//core/os/shell:go_default_test\",\n        \"//core/os/shell/stub:go_default_test\",\n        \"//core/stream:go_default_test\",\n        \"//core/stream/fmts:go_default_test\",\n        \"//core/text:go_default_test\",\n        \"//core/text/cases:go_default_test\",\n        \"//core/text/parse:go_default_test\",\n        \"//gapil/analysis:go_default_test\",\n        \"//gapil/bapi:go_default_test\",\n        \"//gapil/compiler:go_default_test\",\n        \"//gapil/compiler/mangling/c:go_default_test\",\n        \"//gapil/compiler/mangling/ia64:go_default_test\",\n        \"//gapil/compiler/plugins/encoder/test:go_default_test\",\n        \"//gapil/compiler/plugins/replay:go_default_test\",\n        \"//gapil/fuzz:go_default_test\",\n        \"//gapil/parser:go_default_test\",\n        \"//gapil/resolver:go_default_test\",\n        \"//gapil/runtime/cc:tests\",\n        \"//gapil/semantic:go_default_test\",\n        \"//gapil/template:go_default_test\",\n        \"//gapil/validate:go_default_test\",\n        \"//gapir/cc:tests\",\n        \"//gapis/api:go_default_test\",\n        \"//gapis/api/gles:go_default_test\",\n        \"//gapis/api/test:go_default_test\",\n        \"//gapis/api/transform:go_default_test\",\n        \"//gapis/api/vulkan:go_default_test\",\n        \"//gapis/capture:go_default_test\",\n        \"//gapis/memory:go_default_test\",\n        \"//gapis/replay/asm:go_default_test\",\n        \"//gapis/replay/builder:go_default_test\",\n        \"//gapis/replay/scheduler:go_default_test\",\n        \"//gapis/resolve:go_default_test\",\n        \"//gapis/resolve/dependencygraph:go_default_test\",\n        \"//gapis/resolve/dependencygraph2:go_default_test\",\n        \"//gapis/resolve/dependencygraph2/graph_visualization:go_default_test\",\n        \"//gapis/service/box:go_default_test\",\n        \"//gapis/shadertools:go_default_test\",\n        \"//gapis/shadertools/cc:tests\",\n        \"//gapis/stringtable/minidown/parser:go_default_test\",\n        \"//gapis/stringtable/minidown/scanner:go_default_test\",\n        \"//gapis/stringtable/parser:go_default_test\",\n        \"//gapis/vertex:go_default_test\",\n        \"//test/integration/gles/replay:go_default_test\",\n        \"//test/integration/replay:go_default_test\",\n        \"//test/integration/service:go_default_test\",\n        \"//test/robot/stash/grpc:go_default_test\",\n        # __END_TESTS\n    ],\n)\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 7.1728515625,
          "content": "# Building GAPID\n\nGAPID uses the [Bazel build system](https://bazel.build/). The recommended version of Bazel is **1.2.0**.\n\nBazel is able to fetch most of the dependencies required to build GAPID, but currently the Android SDK and NDK both need to be downloaded and installed by hand.\n\nPlease see the following OS specific guides for setting up the build environment.\n\nAfter setting up the build environment, GAPID can be built in a terminal with:\n\n```\ncd <path-to-gapid-source>\nbazel build pkg\n```\n\nThe build output will be at `<path-to-gapid-source>/bazel-bin/pkg`.\n\n---\n\n## Windows\n\n### Install Chocolatey\n\n[Follow these instructions](https://chocolatey.org/install) to install Chocolatey.\n\n### Install Bazel\n\nIn the console (with administrator privilege) type:\n\n`choco install bazel`\n\nNote: Installing bazel will also install MSYS into `C:\\tools\\msys64` and Python into `C:\\tools\\python27`.\n\n### Install additional tools\n\nUsing the msys64 shell at `C:\\tools\\msys64\\mingw64`:\n1. Update MSYS with: `pacman -Syu`.\n2. If the update ends with “close the window and run it again”, close and reopen the window and repeat 1.\n3. Fetch required tools with: `pacman -S curl git zip unzip patch`\n4. Download gcc with: `curl -O http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gcc-7.3.0-2-any.pkg.tar.xz`\n5. Download gcc-libs with: `curl -O http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gcc-libs-7.3.0-2-any.pkg.tar.xz`\n6. Install gcc with: `pacman -U mingw-w64-x86_64-gcc*-7.3.0-2-any.pkg.tar.xz`\n7. Close the MSYS terminal\n\n### Install Java Development Kit 8\n\nA JDK is required to build the user interface. If you do not already have a JDK installed, you can [install OpenJDK from here](https://adoptopenjdk.net) (good defaults are version 8 and Hotspot JVM).\n\nMake sure the `JAVA_HOME` environment variable points to the JDK.\n\n### Install Android SDK and NDK\n\nUnzip the [Android SDK](https://dl.google.com/android/repository/sdk-tools-windows-3859397.zip) to a directory of your choosing.\n\nTo fetch the required packages, using a console type:\n\n```\ncd <sdk-path>\ntools\\bin\\sdkmanager.bat \"platforms;android-26\" \"build-tools;29.0.2\" ndk-bundle\n```\n\nNote: this will install the latest NDK in `<sdk-path>\\ndk-bundle`. The minimum required version of the NDK is **r21**.\n\nIf you do not have adb installed you can do so with:\n```\ncd <sdk-path>\ntools\\bin\\sdkmanager.bat platform-tools\n```\n\n### Configure the environment\n\nEither do this globally or in your shell every time.\n\nMake sure the environment is setup before you run bazel (`bazel shutdown` will shut it down).\n\n1. Add `C:\\tools\\msys64\\mingw64` to the PATH:\n   `set PATH=C:\\tools\\msys64\\mingw64\\bin;%PATH%`\n   Running `where gcc` should now find mingw’s gcc.\n\n1. Add `C:\\tools\\python27` to the PATH:\n   `set PATH=C:\\tools\\python27;%PATH%`\n   Alternatively, pass the path to python via the `--python_path` to bazel. See the [bazel documentation](https://docs.bazel.build/versions/master/windows.html#build-python) for more info.\n\n1. Set TMP to something very short. `C:\\tmp` is known to work. For faster builds, add this folder to the excemptions of the Windows Defender anti-malware scanner.\n\nThe following environment variables will need to be set prior to building:\n\n| Variable            | Target                             |\n| ------------------- | ---------------------------------- |\n| `ANDROID_HOME`      | Path to Android SDK                |\n| `ANDROID_NDK_HOME`  | Path to Android NDK                |\n| `BAZEL_SH`          | `C:\\tools\\msys64\\usr\\bin\\bash.exe` |\n| `TMP`               | `C:\\tmp`                           |\n\n---\n\n## MacOS\n\n### Install Bazel\n\nFollow the [MacOS Bazel Install](https://docs.bazel.build/versions/master/install-os-x.html) directions to install bazel.\n\n### Install Java Development Kit 8\n\nA JDK is required to build the user interface. If you do not already have a JDK installed, you can [install OpenJDK from here](https://adoptopenjdk.net) (good defaults are version 8 and Hotspot JVM).\n\nMake sure the `JAVA_HOME` environment variable points to the JDK.\n\n### Install Android SDK and NDK\n\nUnzip the [Android SDK](https://dl.google.com/android/repository/sdk-tools-darwin-3859397.zip) to a directory of your choosing.\n\nTo fetch the required packages, using a console type:\n\n```\ncd <sdk-path>\ntools/bin/sdkmanager \"platforms;android-26\" \"build-tools;29.0.2\" ndk-bundle\n```\n\nNote: this will install the latest NDK in `<sdk-path>/ndk-bundle`. The minimum required version of the NDK is r16b.\n\nIf you do not have adb installed you can do so with:\n```\ncd <sdk-path>\ntools/bin/sdkmanager platform-tools\n```\n\n### Install the XCode command line tools\n\nAfter installing, ensure the XCode license is signed with:\n\n```\nsudo xcode-select -s /Applications/Xcode.app/Contents/Developer\nsudo xcodebuild -license\n```\n\n### Increase the maximum number of OS file handles\n\nBazel can concurrently use more file handles than the OS supports by default. This can be easily fixed by typing:\n\n```\nsudo sysctl -w kern.maxfiles=122880\nsudo sysctl -w kern.maxfilesperproc=102400\necho ulimit -S -n 102400 >> ~/.bashrc\n```\n\n### Configure the environment\n\nEither do this globally or in your shell every time.\n\nMake sure the environment is setup before you run bazel (`bazel shutdown` will shut it down).\n\nThe following environment variables will need to be set prior to building:\n\n| Variable            | Target               |\n| ------------------- | -------------------- |\n| `ANDROID_HOME`      | Path to Android SDK  |\n| `ANDROID_NDK_HOME`  | Path to Android NDK  |\n\n---\n\n## Linux\n\n### Install Bazel\n\nFollow the [Ubuntu Bazel Install](https://docs.bazel.build/versions/master/install-ubuntu.html) or the[Fedora/CentOS Bazel Install](https://docs.bazel.build/versions/master/install-redhat.html) directions to install bazel.\n\nAlternatively, bazel can be downloaded from its [GitHub Releases Page](https://github.com/bazelbuild/bazel/releases).\n\n### Install Java Development Kit 8\n\nA JDK is required to build the user interface. If you do not already have a JDK installed, you can [install OpenJDK from here](https://adoptopenjdk.net) (good defaults are version 8 and Hotspot JVM).\n\nMake sure the `JAVA_HOME` environment variable points to the JDK.\n\n### Install Android SDK and NDK\n\nUnzip the [Android SDK](https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip) to a directory of your choosing.\n\nTo fetch the required packages, using a console type:\n\n```\ncd <sdk-path>\ntools/bin/sdkmanager \"platforms;android-26\" \"build-tools;29.0.2\" ndk-bundle\n```\n\nNote: this will install the latest NDK in `<sdk-path>/ndk-bundle`. The minimum required version of the NDK is r16b.\n\nIf you do not have adb installed you can do so with:\n```\ncd <sdk-path>\ntools/bin/sdkmanager platform-tools\n```\n\n### Install other libraries\n\n```\nsudo apt-get update\nsudo apt-get install mesa-common-dev libncurses5-dev libgl1-mesa-dev zlib1g-dev\n```\n\n### Configure the environment\n\nEither do this globally or in your shell every time.\n\nMake sure the environment is setup before you run bazel (`bazel shutdown` will shut it down).\n\nThe following environment variables will need to be set prior to building:\n\n| Variable            | Target              |\n| ------------------- | ------------------- |\n| `ANDROID_HOME`      | Path to Android SDK |\n| `ANDROID_NDK_HOME`  | Path to Android NDK |\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.2666015625,
          "content": "# How to contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Check out the source\n\nDo the following to check out the GAPID source code on GitHub:\n\n1.  Sign up for GitHub at https://github.com/ if you don’t already have an account.\n1.  (Optional) Set up an SSH key to [connect to your account using SSH].\n1.  (Optional) [Add a GPG signing key to your account].\n1.  Go to the project landing page at https://github.com/google/gapid.\n1.  [Fork the repository]. This creates a copy of the repository in your account.\n1.  Create a work folder on your workstation. The rest of this document assumes `~/work`, adjust as needed.\n1.  On _your_ GAPID project page, [clone your copy of the repository] and add it to your local work folder:\n    ```\n    cd ~/work\n    git clone <clone-url>\n    cd gapid\n    ```\n1.  Add the Google remote repository to your local repository:\n    ```\n    git remote add goog git@github.com:google/gapid.git\n    git fetch goog\n    ```\n\n## (Optional) Configure git\n\nUse the following commands to configure git for GAPID development:\n```\n# Assume the remote branch has the same name as your local branch to make pushing changes easier\ngit config push.default current \n# Default to pushing to your fork (assuming the above directions)\ngit config remote.pushDefault origin\n# Make git clean up all the remote tags it creates when you delete remote branches\ngit config fetch.prune true\ngit config user.name <your-name> # Add --global to make this a global setting\ngit config user.email <you@your-email.com> # Can also be a global setting\n# If you added a GPG signing key, run the following commands:\ngit config user.signingkey <keyid> \ngit config commit.gpgsign true\n```\n\n## Build GAPID for the first time\n\nFollow the [build instructions] in the GAPID repository.\n\n## Sign the Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.\n\n## Open a pull request (PR)\n\nDo the following to contribute to the GAPID project:\n\n1.  Prepare your changes on a dedicated branch in your local repository:\n    ```\n    git checkout -b <my-branch>\n    ```  \n1.  Make changes, commit the changes, and squash them into a single commit. \n1.  Use the presubmit script to check code formatting and other things:\n    ```\n    # Install clang-format 6.0 \n    sudo apt-get install -y clang-format-6.0 \n    export CLANG_FORMAT=clang-format-6.0\n    # Run the script\n    ./kokoro/presubmit/presubmit.sh\n    ```\n1.  Fix potential issues, commit the fix, squash into a single commit again.\n1.  Re-run presubmit script until it passes without warnings.\n1.  Check that the tests pass:\n    ```\n    bazel test tests\n    ```\n1.  Push to your GitHub repo:\n    ```\n    git push \n    ```\n1.  Visit https://github.com/google/gapid to see a pop-up dialog inviting you  to open a PR; click on the dialog to create a PR. See [Creating a pull request from a fork] for more information.\n1.  All submissions, including submissions by project members, require review. You can request specific reviewers for your PR or leave the reviewers section blank. A GAPID team member will review the request.\n\nConsult [GitHub Help] for more information on using pull requests.\n\n[connect to your account using SSH]: https://help.github.com/en/articles/connecting-to-github-with-ssh\n[Add a GPG signing key to your account]: https://help.github.com/en/articles/adding-a-new-gpg-key-to-your-github-account\n[Fork the repository]: https://help.github.com/en/articles/fork-a-repo\n[clone your copy of the repository]: https://help.github.com/en/articles/cloning-a-repository\n[build instructions]: https://github.com/google/gapid/blob/master/BUILDING.md\n[Creating a pull request from a fork]: https://help.github.com/en/articles/creating-a-pull-request-from-a-fork\n[GitHub Help]: https://help.github.com/articles/about-pull-requests/"
        },
        {
          "name": "DEVDOC.md",
          "type": "blob",
          "size": 6.7470703125,
          "content": "# GAPID Developer Documentation\n\n## Setup Golang development\n\nThis project contains Golang code, but it does not have the file hierarchy of\nregular Golang projects (this is due to the use of Bazel as a build system).\nThe `cmd/gofuse` utility enables to re-create the file hierarchy expected by Go\ntools:\n\n```sh\n# Make sure to build to have all compile-time generated files\ncd <path-to-gapid-source>\nbazel build pkg\n\n# Prepare a gapid-gofuse directory **outside of the gapid checkout directory**\nmkdir <path-outside-gapid-source>/gapid-gofuse\n\n# Run gofuse with the previous directory as a target\nbazel run //cmd/gofuse -- -dir <path-to-gapid-gofuse>\n\n# Add gapid-gofuse directory to your GOPATH environment variable.\n# On Linux, with a bash shell, you can add the following to your ~/.bashrc file:\nexport GOPATH=\"${GOPATH:+${GOPATH}:}<path-to-gapid-gofuse>\"\n# On other configurations, please search online how to add/edit environment variables.\n```\n\nIf you encounter a symlink error on Windows like 'a required privilege is not held by the client',\nyou have to use a command prompt with administrator privileges or enable\n[Developer Mode](https://docs.microsoft.com/en-us/windows/uwp/get-started/enable-your-device-for-development)\nas described [here](https://blogs.windows.com/windowsdeveloper/2016/12/02/symlinks-windows-10/).\n\nAfter adding the gofuse directory to your GOPATH, Go tools should work as\nexpected. You can edit files under the newly populated gofuse directory. You\nshould still compile under the original checkout directory of GAPID.\n\n> Despite its name, the gofuse command does NOT use FUSE (filesystem in userspace).\n> It just creates directories and links to source files, including generated files.\n> It is a good idea to re-run gofuse from time to time, to re-sync links to potential\n> new files.\n\nIn terms of editor, [VsCode](https://code.visualstudio.com/) has good Go support\nthanks to its\n[Go extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go).\nWith the GOPATH setup to gofuse and opening the `<path-to-gapid-gofuse>` directory,\nas the root of your workspace, you should get some jump-to-definition and autocomplete\nfeatures working. Make sure to edit the files through their link found under the gofuse directory.\n\n## How to debug / breakpoint in Golang code\n\nThe recommended Golang debugger is\n[delve](https://github.com/go-delve/delve). You can start a debug build of gapis\nor a client under this debugger.\n\n### Debugging GAPIS\n\nTo debug gapis, you can do:\n\n```\ndlv exec ./bazel-bin/pkg/gapis -- -enable-local-files -persist -rpc localhost:8888\n```\n\nYou can then use dlv commands to add breakpoints, and actually start GAPIS, e.g.:\n\n```\n(dlv) break gapis/server/server.go:228\n\n(dlv) continue  # this actually starts gapis\n```\n\n> See delve documentation on how to specify a breakpoint location, there are\n> more convenient alternatives than `path/to/file:line`\n\nOnce gapis is started, you can run a client to interact with it and hit somes\nbreakpoints:\n\n```\n# in another terminal\n./bazel-bin/pkg/gapit <verb> -gapis-port 8888 <verb args>\n```\n\n### Debugging a client\n\nIf you want to debug a client like gapit, just start it under dlv:\n\n```\ndlv exec ./bazel-bin/pkg/gapit <verb> <verb args>\n```\n\n### Use a Delve init script\n\nTo automate a delve startup sequence, you can edit a script of delve commands to\nbe executed when delve starts. The script looks like:\n\n```\n# This is a comment.\nbreak gapis/server/server.go:228\n\n# add a second breakpoint, with a condition for it to trigger\nbreak gapis/foo/bar.go:123\ncondition 2 some_variable == 42\n\n# launch program\ncontinue\n```\n\nAnd you can pass this script to delve using the `--init` flag:\n\n```\ndlv exec --init my-delve-init-script.txt <program to debug...>\n```\n\n### Integration with an IDE\n\nIf you want to interact with the debugger via your editor or IDE, be aware that\ndelve will think file paths start from the gapid top directory, and not your\nroot directory. This is very likely due to Bazel compilation. You may have to\nfind workarounds if you call delve from an editor/IDE which consider the file\npaths to start from another directory, typically your root directory. There may\nbe a way to adjust using GOPATH to tell to your IDE a possible root for filename\nlookups.\n\nSee the workaround for VSCode below, any help to fix it for other IDEs is very welcome!\n\n#### Integration with VSCode and Delve\n\nTo use the delve debugger for Go with VSCode to debug `gapis`. These steps can be followed:\n\n1. Make sure to complete Golang Setup for GAPID.\n\n2. Create a `launch.json` under the workspace directory with `Ctrl + Shift + P` and `Debug: Open launch.json`\n\n3. Paste this as one of the launch configurations. This will ensure that there is a launch configuration for attaching to Delve.\n```\n{\n    ...\n    \"configurations\": [\n        ...,\n        {\n            \"name\": \"Attach to Delve\",\n            \"type\": \"go\",\n            \"request\": \"attach\",\n            \"mode\": \"remote\",\n            \"apiVersion\": 2,\n            \"remotePath\": \"gapis/\",\n            \"cwd\": \"${workspaceFolder}/src/github.com/google/gapid/gapis\",\n            \"dlvLoadConfig\": {\n                \"followPointers\": true,\n                \"maxVariableRecurse\": 1,\n                \"maxStringLen\": 120,\n                \"maxArrayValues\": 120,\n                \"maxStructFields\": -1\n            },\n            \"host\": <host>,\n            \"port\": <port>,\n        },\n    ],\n    ...\n}\n```\nAs an example, `<host>` could be `127.0.0.1` and `<port>` could be `1234`.\n\n4. Start delve in headless mode at gapid check-in folder.\n```\ndlv exec --headless --listen=<host>:<port> --api-version 2 ./bazel-bin/pkg/gapis -- <gapis-arguments>\n```\n\nThe command below will allow using port `1234` (or any other preferred port) to connect to delve from VSCode.\n```\ndlv exec --headless --listen=127.0.0.1:1234 --api-version 2 ./bazel-bin/pkg/gapis -- -persist -rpc localhost:8888\n```\n\n5. Start debugging with `Debug->Start Debugging` (on Linux with `F5`) and make sure `Attach to Delve` is selected as the launch configuration.\n\n6. Now VSCode can interact with Delve and can be used for debugging `gapis` in VSCode UI instead of command line. Enjoy your debugging :)\n\n## How to debug via printing message\n\nYou can use the built-in logging functions to place debug prints.\n\nIn Golang:\n\n```go\nimport (\n\t// ...\n\t\"github.com/google/gapid/core/log\"\n)\n\n// ...\n\tlog.E(ctx, \"Here debug print, myVar: %v\", myVar)\n```\n\nIn C++:\n\n```c++\n#include \"core/cc/log.h\"\n\n// ...\n    GAPID_ERROR(\"Here debug print, myStr: %s\", myStr)\n```\n\nThe usual logging levels are available, listed for instance with `gapit -fullhelp`:\n\n```\n$ ./bazel-bin/pkg/gapit -fullhelp\n...\n-log-level value\n\tThe severity to enable logs at [one of: \"Verbose\", \"Debug\", \"Info\", \"Warning\", \"Error\", \"Fatal\"] (default Info)\n```\n\nThe Error level is recommended when adding debug print, to make sure it is not\nfiltered away.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1533203125,
          "content": "# GAPID: Graphics API Debugger\n\n[![GoDoc](https://godoc.org/github.com/google/gapid?status.svg)](https://godoc.org/github.com/google/gapid)\n<img alt=\"Linux\" src=\"kokoro/img/linux.png\" width=\"20px\" height=\"20px\" hspace=\"2px\"/>\n[![Linux Build Status](https://gapid-build.storage.googleapis.com/badges/build_status_linux.svg)](https://gapid-build.storage.googleapis.com/badges/build_result_linux.html)\n<img alt=\"MacOS\" src=\"kokoro/img/macos.png\" width=\"20px\" height=\"20px\" hspace=\"2px\"/>\n[![MacOS Build Status](https://gapid-build.storage.googleapis.com/badges/build_status_macos.svg)](https://gapid-build.storage.googleapis.com/badges/build_result_macos.html)\n<img alt=\"Windows\" src=\"kokoro/img/windows.png\" width=\"20px\" height=\"20px\" hspace=\"2px\"/>\n[![Windows Build Status](https://gapid-build.storage.googleapis.com/badges/build_status_windows.svg)](https://gapid-build.storage.googleapis.com/badges/build_result_windows.html)\n\n## Maintenance Mode\n\nGAPID is not currently under active development. Issues filed against this repo might not be answered.\n\nFor Android GPU debugging and profiling, please use [AGI](https://github.com/google/agi) which is based on GAPID.\n\n## Downloads\n\n**[Download the latest version of GAPID here.](https://github.com/google/gapid/releases)**\n\n*Unstable* developer releases are [here](https://github.com/google/gapid-dev-releases/releases).\n\n## Documentation\n\n**[User documentation can be found at gapid.dev](https://gapid.dev)**\n\nThe [developer documentation](DEVDOC.md) contains some hints for GAPID\ndevelopers. See also the README files under some source directories.\n\n## About\n\nGAPID is a collection of tools that allows you to inspect, tweak and replay calls from an application to a graphics driver.\n\nGAPID can trace any Android [debuggable application](https://developer.android.com/guide/topics/manifest/application-element.html#debug), or if you have root access to the device any application can be traced.\nGAPID can also trace any desktop Vulkan application.\n\n<table>\n  <tr>\n    <td>\n      <a href=\"https://gapid.dev/images/screenshots/framebuffer.png\">\n        <img src=\"https://gapid.dev/images/screenshots/framebuffer_thumb.jpg\" alt=\"Screenshot 1\">\n      </a>\n    </td>\n    <td>\n      <a href=\"https://gapid.dev/images/screenshots/geometry.png\">\n        <img src=\"https://gapid.dev/images/screenshots/geometry_thumb.jpg\" alt=\"Screenshot 2\">\n      </a>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <a href=\"https://gapid.dev/images/screenshots/textures.png\">\n        <img src=\"https://gapid.dev/images/screenshots/textures_thumb.jpg\" alt=\"Screenshot 3\">\n      </a>\n    </td>\n    <td>\n      <a href=\"https://gapid.dev/images/screenshots/shaders.png\">\n        <img src=\"https://gapid.dev/images/screenshots/shaders_thumb.jpg\" alt=\"Screenshot 4\">\n      </a>\n    </td>\n  </tr>\n</table>\n\n## Building\n\n**See [Building GAPID](BUILDING.md).**\n\n## Running the client\n\nAfter building GAPID, you can run the client from `<gapid-root>/bazel-bin/pkg/gapid`.\n\n## Command-Line Interface\n\nGAPID exposes most of its functionality via a CLI *gapit*. You can find auto-generated documentation [here](https://gapid.dev/cli/).\n\n## Project Structure\n\nGAPID consists of the following sub-components:\n\n### [`gapii`](gapii): Graphics API Interceptor\nA layer that sits between the application / game and the GPU driver, recording all the calls and memory accesses.\n\n### [`gapis`](gapis): Graphics API Server\nA process that analyses capture streams reporting incorrect API usage, processes the data for replay on various target devices, and provides an RPC interface to the client.\n\n### [`gapir`](gapir): Graphics API Replay daemon\nA stack-based VM used to playback capture files, imitating the original application’s / game's calls to the GPU driver. Supports read-back of any buffer / framebuffer, and provides profiling functionality.\n\n### [`gapic`](gapic): Graphics API Client\nThe frontend user interface application. Provides visual inspection of the capture data, memory, resources, and frame-buffer content.\n\n### [`gapil`](gapil): Graphics API Language\nA new domain specific language to describe a graphics API in its entirety. Combined with our template system to generate huge parts of the interceptor, server and replay systems.\n\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.3115234375,
          "content": "# Copyright (C) 2018 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nworkspace(name = \"gapid\")\n\nload(\"@gapid//tools/build:locals.bzl\", \"user_local_repos\")\nuser_local_repos(__workspace_dir__)\nload(\"@user_locals//:locals.bzl\", \"LOCALS\")\n\nload(\"@gapid//tools/build:workspace.bzl\", \"gapid_dependencies\")\ngapid_dependencies(locals = LOCALS)\n\nload(\"@gapid//tools/build:workspace_go.bzl\", \"gapid_go_dependencies\")\ngapid_go_dependencies()\n\nload(\"@gapid//tools/build:workspace_gapic.bzl\", \"gapic_dependencies\", \"gapic_third_party\")\ngapic_dependencies(locals = LOCALS)\ngapic_third_party()\n\nload(\"@io_bazel_rules_go//go:deps.bzl\", \"go_rules_dependencies\", \"go_register_toolchains\")\nload(\"@bazel_gazelle//:deps.bzl\", \"gazelle_dependencies\")\ngo_rules_dependencies()\ngo_register_toolchains()\n\n# gazelle:repo bazel_gazelle\ngazelle_dependencies()\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "gapic",
          "type": "tree",
          "content": null
        },
        {
          "name": "gapidapk",
          "type": "tree",
          "content": null
        },
        {
          "name": "gapii",
          "type": "tree",
          "content": null
        },
        {
          "name": "gapil",
          "type": "tree",
          "content": null
        },
        {
          "name": "gapir",
          "type": "tree",
          "content": null
        },
        {
          "name": "gapis",
          "type": "tree",
          "content": null
        },
        {
          "name": "kokoro",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.bzl",
          "type": "blob",
          "size": 1.7080078125,
          "content": "# Copyright (C) 2018 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# True source of GAPID versions.\n# Increment these numbers immediately after releasing a new version.\nGAPID_VERSION_MAJOR=\"1\"\nGAPID_VERSION_MINOR=\"7\"\nGAPID_VERSION_POINT=\"0\"\n\n# See bazel.rc. Can be overriden on the command line with:\n#   bazel build --define GAPID_BUILD_NUMBER=<#> --define GAPID_BUILD_SHA=<sha>\nGAPID_BUILD_NUMBER=\"$(GAPID_BUILD_NUMBER)\"\nGAPID_BUILD_SHA=\"$(GAPID_BUILD_SHA)\"\n\ndef _gapid_version(ctx):\n    ctx.actions.expand_template(\n        template = ctx.file.template,\n        output = ctx.outputs.out,\n        substitutions = {\n            \"@GAPID_VERSION_MAJOR@\": GAPID_VERSION_MAJOR,\n            \"@GAPID_VERSION_MINOR@\": GAPID_VERSION_MINOR,\n            \"@GAPID_VERSION_POINT@\": GAPID_VERSION_POINT,\n            \"@GAPID_BUILD_NUMBER@\": ctx.var.get(\"GAPID_BUILD_NUMBER\"),\n            \"@GAPID_BUILD_SHA@\": ctx.var.get(\"GAPID_BUILD_SHA\"),\n        }\n    )\n\ngapid_version = rule(\n    implementation=_gapid_version,\n    attrs = {\n        \"template\": attr.label(\n            mandatory = True,\n            allow_single_file = True,\n        ),\n        \"out\": attr.output(\n            mandatory = True,\n        ),\n    },\n    output_to_genfiles = True,\n)\n"
        }
      ]
    }
  ]
}