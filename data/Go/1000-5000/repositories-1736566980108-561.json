{
  "metadata": {
    "timestamp": 1736566980108,
    "page": 561,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pquerna/ffjson",
      "stars": 2965,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.162109375,
          "content": "tests/go.stripe/ff/customer_ffjson.go\ntests/goser/ff/goser_ffjson.go\ntests/types/ff/everything_ffjson.go\ntests/number/ff/number_ffjson.go\ntests/ff_ffjson.go\nfuzzing/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.587890625,
          "content": "language: go\n\nservices:\n  - docker\n\ninstall:\n  - A=${PWD#*github.com/};A=${A%/ffjson};cd ../..;mv $A pquerna;cd pquerna/ffjson\n  - go get -d -v -t ./...\n\nscript: make clean && make lint && make test && make test \n\njobs:\n  include:\n    - stage: Fuzz regression\n      go: 1.12.x\n      dist: bionic\n      script:\n        - cd tests/fuzz\n        - ./fuzzit.sh local-regression\n    - stage: Fuzz\n      if: branch = master AND type IN (push)\n      go: 1.12.x\n      dist: bionic\n      script:\n        - cd tests/fuzz\n        - ./fuzzit.sh fuzzing\n\ngo:\n  - \"1.10.x\"\n  - \"1.11.x\"\n\nenv:\n  GO15VENDOREXPERIMENT=1\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.54296875,
          "content": "\nall: test install\n\t@echo \"Done\"\n\ninstall:\n\tgo install github.com/pquerna/ffjson\n\ndeps:\n\nfmt:\n\tgo fmt github.com/pquerna/ffjson/...\n\ncov:\n\t# TODO: cleanup this make target.\n\tmkdir -p coverage\n\trm -f coverage/*.html\n\t# gocov test github.com/pquerna/ffjson/generator | gocov-html > coverage/generator.html\n\t# gocov test github.com/pquerna/ffjson/inception | gocov-html > coverage/inception.html\n\tgocov test github.com/pquerna/ffjson/fflib/v1 | gocov-html > coverage/fflib.html\n\t@echo \"coverage written\"\n\ntest-core:\n\tgo test -v github.com/pquerna/ffjson/fflib/v1 github.com/pquerna/ffjson/generator github.com/pquerna/ffjson/inception\n\ntest: ffize test-core\n\tgo test -v github.com/pquerna/ffjson/tests/...\n\nffize: install\n\tffjson -force-regenerate tests/ff.go\n\tffjson -force-regenerate tests/goser/ff/goser.go\n\tffjson -force-regenerate tests/go.stripe/ff/customer.go\n\tffjson -force-regenerate -reset-fields tests/types/ff/everything.go\n\tffjson -force-regenerate tests/number/ff/number.go\n\nlint: ffize\n\tgo get github.com/golang/lint/golint\n\tgolint --set_exit_status tests/...\n\nbench: ffize all\n\tgo test -v -benchmem -bench MarshalJSON  github.com/pquerna/ffjson/tests\n\tgo test -v -benchmem -bench MarshalJSON  github.com/pquerna/ffjson/tests/goser github.com/pquerna/ffjson/tests/go.stripe\n\tgo test -v -benchmem -bench UnmarshalJSON  github.com/pquerna/ffjson/tests/goser github.com/pquerna/ffjson/tests/go.stripe\n\nclean:\n\tgo clean -i github.com/pquerna/ffjson/...\n\tfind . -name '*_ffjson.go' -delete\n\tfind . -name 'ffjson-inception*' -delete\n\n.PHONY: deps clean test fmt install all\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.2099609375,
          "content": "ffjson\nCopyright (c) 2014, Paul Querna\n\nThis product includes software developed by \nPaul Querna (http://paul.querna.org/).\n\nPortions of this software were developed as\npart of Go, Copyright (c) 2012 The Go Authors."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.0751953125,
          "content": "# ffjson: faster JSON for Go\n\n[![Build Status](https://travis-ci.org/pquerna/ffjson.svg?branch=master)](https://travis-ci.org/pquerna/ffjson)\n[![Fuzzit Status](https://app.fuzzit.dev/badge?org_id=pquerna)](https://app.fuzzit.dev/orgs/pquerna/dashboard)\n\n`ffjson` generates static `MarshalJSON` and `UnmarshalJSON` functions for structures in Go. The generated functions reduce the reliance upon runtime reflection to do serialization and are generally 2 to 3 times faster.  In cases where `ffjson` doesn't understand a Type involved, it falls back to `encoding/json`, meaning it is a safe drop in replacement.  By using `ffjson` your JSON serialization just gets faster with no additional code changes.\n\nWhen you change your `struct`, you will need to run `ffjson` again (or make it part of your build tools).\n\n## Blog Posts\n\n* 2014-03-31: [First Release and Background](https://journal.paul.querna.org/articles/2014/03/31/ffjson-faster-json-in-go/)\n\n## Getting Started\n\nIf `myfile.go` contains the `struct` types you would like to be faster, and assuming `GOPATH` is set to a reasonable value for an existing project (meaning that in this particular example if `myfile.go` is in the `myproject` directory, the project should be under `$GOPATH/src/myproject`), you can just run:\n\n    go get -u github.com/pquerna/ffjson\n    ffjson myfile.go\n    git add myfile_ffjson.go\n\n\n## Performance Status:\n\n* `MarshalJSON` is **2x to 3x** faster than `encoding/json`.\n* `UnmarshalJSON` is **2x to 3x** faster than `encoding/json`.\n\n## Features\n\n* **Unmarshal Support:** Since v0.9, `ffjson` supports Unmarshaling of structures.\n* **Drop in Replacement:** Because `ffjson` implements the interfaces already defined by `encoding/json` the performance enhancements are transparent to users of your structures.\n* **Supports all types:** `ffjson` has native support for most of Go's types -- for any type it doesn't support with fast paths, it falls back to using `encoding/json`.  This means all structures should work out of the box. If they don't, [open a issue!](https://github.com/pquerna/ffjson/issues)\n* **ffjson: skip**: If you have a structure you want `ffjson` to ignore, add `ffjson: skip` to the doc string for this structure.\n* **Extensive Tests:** `ffjson` contains an extensive test suite including fuzz'ing against the JSON parser.\n\n\n# Using ffjson\n\n`ffjson` generates code based upon existing `struct` types.  For example, `ffjson foo.go` will by default create a new file `foo_ffjson.go` that contains serialization functions for all structs found in `foo.go`.\n\n```\nUsage of ffjson:\n\n        ffjson [options] [input_file]\n\nffjson generates Go code for optimized JSON serialization.\n\n  -go-cmd=\"\": Path to go command; Useful for `goapp` support.\n  -import-name=\"\": Override import name in case it cannot be detected.\n  -nodecoder: Do not generate decoder functions\n  -noencoder: Do not generate encoder functions\n  -w=\"\": Write generate code to this path instead of ${input}_ffjson.go.\n```\n\nYour code must be in a compilable state for `ffjson` to work. If you code doesn't compile ffjson will most likely exit with an error.\n\n## Disabling code generation for structs\n\nYou might not want all your structs to have JSON code generated. To completely disable generation for a struct, add `ffjson: skip` to the struct comment. For example:\n\n```Go\n// ffjson: skip\ntype Foo struct {\n   Bar string\n}\n```\n\nYou can also choose not to have either the decoder or encoder generated by including `ffjson: nodecoder` or `ffjson: noencoder` in your comment. For instance, this will only generate the encoder (marshal) part for this struct:\n\n```Go\n// ffjson: nodecoder\ntype Foo struct {\n   Bar string\n}\n```\n\nYou can also disable encoders/decoders entirely for a file by using the `-noencoder`/`-nodecoder` commandline flags.\n\n## Using ffjson with `go generate`\n\n`ffjson` is a great fit with `go generate`. It allows you to specify the ffjson command inside your individual go files and run them all at once. This way you don't have to maintain a separate build file with the files you need to generate.\n\nAdd this comment anywhere inside your go files:\n\n```Go\n//go:generate ffjson $GOFILE\n```\n\nTo re-generate ffjson for all files with the tag in a folder, simply execute:\n\n```sh\ngo generate\n```\n\nTo generate for the current package and all sub-packages, use:\n\n```sh\ngo generate ./...\n```\nThis is most of what you need to know about go generate, but you can sese more about [go generate on the golang blog](http://blog.golang.org/generate).\n\n## Should I include ffjson files in VCS?\n\nThat question is really up to you. If you don't, you will have a more complex build process. If you do, you have to keep the generated files updated if you change the content of your structs.\n\nThat said, ffjson operates deterministically, so it will generate the same code every time it run, so unless your code changes, the generated content should not change. Note however that this is only true if you are using the same ffjson version, so if you have several people working on a project, you might need to synchronize your ffjson version.\n\n## Performance pitfalls\n\n`ffjson` has a few cases where it will fall back to using the runtime encoder/decoder. Notable cases are:\n\n* Interface struct members. Since it isn't possible to know the type of these types before runtime, ffjson has to use the reflect based coder.\n* Structs with custom marshal/unmarshal.\n* Map with a complex value. Simple types like `map[string]int` is fine though.\n* Inline struct definitions `type A struct{B struct{ X int} }` are handled by the encoder, but currently has fallback in the decoder.\n* Slices of slices / slices of maps are currently falling back when generating the decoder.\n\n## Reducing Garbage Collection\n\n`ffjson` already does a lot to help garbage generation. However whenever you go through the json.Marshal you get a new byte slice back. On very high throughput servers this can lead to increased GC pressure. \n\n### Tip 1: Use ffjson.Marshal() / ffjson.Unmarshal()\n\nThis is probably the easiest optimization for you. Instead of going through encoding/json, you can call ffjson. This will disable the checks that encoding/json does to the json when it receives it from struct functions.\n\n```Go\n\timport \"github.com/pquerna/ffjson/ffjson\"\n\n\t// BEFORE:\n\tbuf, err := json.Marshal(&item)\n\n\t// AFTER:\n\tbuf, err := ffjson.Marshal(&item)\n```\nThis simple change is likely to double the speed of your encoding/decoding.\n\n\n[![GoDoc][1]][2]\n[1]: https://godoc.org/github.com/pquerna/ffjson/ffjson?status.svg\n[2]: https://godoc.org/github.com/pquerna/ffjson/ffjson#Marshal\n\n### Tip 2: Pooling the buffer\n\nOn servers where you have a lot of concurrent encoding going on, you can hand back the byte buffer you get from json.Marshal once you are done using it. An example could look like this:\n```Go\nimport \"github.com/pquerna/ffjson/ffjson\"\n\nfunc Encode(item interface{}, out io.Writer) {\n\t// Encode\n\tbuf, err := ffjson.Marshal(&item)\n\t\n\t// Write the buffer\n\t_,_ = out.Write(buf)\n\t\n\t// We are now no longer need the buffer so we pool it. \n\tffjson.Pool(buf)\n}\n```\nNote that the buffers you put back in the pool can still be reclaimed by the garbage collector, so you wont risk your program building up a big memory use by pooling the buffers.\n\n[![GoDoc][1]][2]\n[1]: https://godoc.org/github.com/pquerna/ffjson/ffjson?status.svg\n[2]: https://godoc.org/github.com/pquerna/ffjson/ffjson#Pool\n\n### Tip 3: Creating an Encoder\n\nThere might be cases where you need to encode many objects at once. This could be a server backing up, writing a lot of entries to files, etc.\n\nTo do this, there is an interface similar to `encoding/json`, that allow you to create a re-usable encoder. Here is an example where we want to encode an array of the `Item` type, with a comma between entries:\n```Go\nimport \"github.com/pquerna/ffjson/ffjson\"\n\nfunc EncodeItems(items []Item, out io.Writer) {\n        // We create an encoder.\n\tenc := ffjson.NewEncoder(out)\n\t\n\tfor i, item := range items {\n\t\t// Encode into the buffer\n\t\terr := enc.Encode(&item)\n\t\t\n\t\t// If err is nil, the content is written to out, so we can write to it as well.\n\t\tif i != len(items) -1 {\n\t\t\t_,_ = out.Write([]byte{','})\n\t\t}\n\t}\n}\n```\n\n\nDocumentation: [![GoDoc][1]][2]\n[1]: https://godoc.org/github.com/pquerna/ffjson/ffjson?status.svg\n[2]: https://godoc.org/github.com/pquerna/ffjson/ffjson#Encoder\n\n## Tip 4: Avoid interfaces\n\nWe don't want to dictate how you structure your data, but having interfaces in your code will make ffjson use the golang encoder for these. When ffjson has to do this, it may even become slower than using `json.Marshal` directly. \n\nTo see where that happens, search the generated `_ffjson.go` file for the text `Falling back`, which will indicate where ffjson is unable to generate code for your data structure.\n\n## Tip 5: `ffjson` all the things!\n\nYou should not only create ffjson code for your main struct, but also any structs that is included/used in your json code.\n\nSo if your struct looks like this:\n```Go\ntype Foo struct {\n  V Bar\n}\n```\nYou should also make sure that code is generated for `Bar` if it is placed in another file. Also note that currently it requires you to do this in order, since generating code for `Foo` will check if code for `Bar` exists. This is only an issue if `Foo` and `Bar` are placed in different files. We are currently working on allowing simultaneous generation of an entire package.\n\n\n## Improvements, bugs, adding features, and taking ffjson new directions!\n\nPlease [open issues in Github](https://github.com/pquerna/ffjson/issues) for ideas, bugs, and general thoughts.  Pull requests are of course preferred :)\n\n## Similar projects\n\n* [go-codec](https://github.com/ugorji/go/tree/master/codec#readme). Very good project, that also allows streaming en/decoding, but requires you to call the library to use.\n* [megajson](https://github.com/benbjohnson/megajson). This has limited support, and development seems to have almost stopped at the time of writing.\n\n# Credits\n\n`ffjson` has recieved significant contributions from:\n\n* [Klaus Post](https://github.com/klauspost)\n* [Paul Querna](https://github.com/pquerna) \n* [Erik Dubbelboer](https://github.com/erikdubbelboer)\n\n## License\n\n`ffjson` is licensed under the [Apache License, Version 2.0](./LICENSE)\n\n"
        },
        {
          "name": "ffjson.go",
          "type": "blob",
          "size": 2.3779296875,
          "content": "/**\n *  Copyright 2014 Paul Querna\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\npackage main\n\nimport (\n\t_ \"github.com/pquerna/ffjson/fflib/v1\"\n\t\"github.com/pquerna/ffjson/generator\"\n\t_ \"github.com/pquerna/ffjson/inception\"\n\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n)\n\nvar outputPathFlag = flag.String(\"w\", \"\", \"Write generate code to this path instead of ${input}_ffjson.go.\")\nvar goCmdFlag = flag.String(\"go-cmd\", \"\", \"Path to go command; Useful for `goapp` support.\")\nvar importNameFlag = flag.String(\"import-name\", \"\", \"Override import name in case it cannot be detected.\")\nvar forceRegenerateFlag = flag.Bool(\"force-regenerate\", false, \"Regenerate every input file, without checking modification date.\")\nvar resetFields = flag.Bool(\"reset-fields\", false, \"When unmarshalling reset all fields missing in the JSON\")\n\nfunc usage() {\n\tfmt.Fprintf(os.Stderr, \"Usage of %s:\\n\\n\", os.Args[0])\n\tfmt.Fprintf(os.Stderr, \"\\t%s [options] [input_file]\\n\\n\", os.Args[0])\n\tfmt.Fprintf(os.Stderr, \"%s generates Go code for optimized JSON serialization.\\n\\n\", os.Args[0])\n\tflag.PrintDefaults()\n\tos.Exit(1)\n}\n\nvar extRe = regexp.MustCompile(`(.*)(\\.go)$`)\n\nfunc main() {\n\tflag.Parse()\n\textra := flag.Args()\n\n\tif len(extra) != 1 {\n\t\tusage()\n\t}\n\n\tinputPath := filepath.ToSlash(extra[0])\n\n\tvar outputPath string\n\tif outputPathFlag == nil || *outputPathFlag == \"\" {\n\t\toutputPath = extRe.ReplaceAllString(inputPath, \"${1}_ffjson.go\")\n\t} else {\n\t\toutputPath = *outputPathFlag\n\t}\n\n\tvar goCmd string\n\tif goCmdFlag == nil || *goCmdFlag == \"\" {\n\t\tgoCmd = \"go\"\n\t} else {\n\t\tgoCmd = *goCmdFlag\n\t}\n\n\tvar importName string\n\tif importNameFlag != nil && *importNameFlag != \"\" {\n\t\timportName = *importNameFlag\n\t}\n\n\terr := generator.GenerateFiles(goCmd, inputPath, outputPath, importName, *forceRegenerateFlag, *resetFields)\n\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %s:\\n\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tprintln(outputPath)\n}\n"
        },
        {
          "name": "ffjson",
          "type": "tree",
          "content": null
        },
        {
          "name": "fflib",
          "type": "tree",
          "content": null
        },
        {
          "name": "generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "inception",
          "type": "tree",
          "content": null
        },
        {
          "name": "shared",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}