{
  "metadata": {
    "timestamp": 1736566811973,
    "page": 377,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "goby-lang/goby",
      "stars": 3489,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codeclimate.yml",
          "type": "blob",
          "size": 0.1806640625,
          "content": "engines:\n  govet:\n    enabled: true\n  golint:\n    enabled: true\n  gofmt:\n    enabled: true\n\nexclude_paths:\n  - \"Godeps\"\n  - \"test_fixtures\"\n  - \"vendor\"\n\nratings:\n  paths:\n    - \"**.go\""
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.02734375,
          "content": "*.gb linguist-language=Ruby\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3740234375,
          "content": "\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n.vscode\n\n.idea\n\ngoby\n\n*.gbbc\ncoverage.txt\nprofile.out\n.DS_Store\n\n.tmp_benchmarks\n.tmp_benchmark_comparison\n\n/plugins"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.82421875,
          "content": "\nlanguage: go\n\nmatrix:\n  include:\n    - go: 1.14\n      dist: xenial\n    - go: 1.15\n      dist: xenial\n\nservices:\n  - postgresql\n\ngo_import_path: github.com/goby-lang/goby\n\nbefore_install:\n  - sudo apt-get install apache2-utils\n\nbefore_script:\n  - psql -c 'create database goby_test;' -U postgres\n\nscript:\n  - ./travis.sh\n\nenv:\n  - \"GOBY_ROOT=$HOME/gopath/src/github.com/goby-lang/goby\"\n\nafter_success:\n  - bash <(curl -s https://codecov.io/bash)\n\nnotifications:\n  slack:\n    rooms:\n      - goby-lang:Ler5Uge2Vlx3O8Yt2OFcKg5W#general\n    on_success: always\n    on_failure: always\n    on_start: never\n  webhooks:\n    urls:\n      - https://webhooks.gitter.im/e/149378fb1b44bbaf21f0\n    on_success: change\n    on_failure: always\n    on_start: never\n  email:\n    recipients:\n      - stan001212@gmail.com\n    on_failure: change\n    on_success: never\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1416015625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at stan001212@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6279296875,
          "content": "First of all, thank you for trying to contribute goby, any contribution will be appreciated 😁\n\nThe following is the guideline (not rules) for contributing goby, I suggest you read them all before you start your contribution.\n\nIf you are very interested in `Goby` or planning contribute `Goby` frequently, please contact me directly.\n\n## What to contribute\n\n- Any issues you see, and if you think the ticket is confusing, please open an issue or ask me on [slack](https://goby-slack-invite.herokuapp.com/).\n- Any grammar error in readme, wiki, and code comments...etc.\n- Any issues listed in goby's [Go Report Card](https://goreportcard.com/report/github.com/goby-lang/goby).\n- Play around goby and report any bug you find.\n- Write benchmarks for goby (we really need this and really haven't had time to do it yet 😢)\n- Help us document built in class and libraries' api, see the [guideline](https://github.com/goby-lang/goby/wiki/Documenting-Goby-Code)\n\n\n#### If you're interested in lexeing/parsing, please check `token`, `lexer`, `ast` and `parser` packages\n\n#### If you're interested in compiler, check [bytecode specifications](https://github.com/goby-lang/goby/wiki/Bytecode-Instruction-specs) and bytecode package's [tests](https://github.com/goby-lang/goby/blob/master/bytecode/generator_test.go) for some compiled examples.\n\n#### If you're interested in VM's structure, please contact me directly since a lot of things haven't been documented yet.\n\n#### If you're a Ruby developer:\n  - you can start with adding methods to built in classes like [`Array`](https://github.com/goby-lang/goby/blob/master/vm/array.go) or [`Hash`](https://github.com/goby-lang/goby/blob/master/vm/hash.go) using `Golang`. And here's a [guideline](https://github.com/goby-lang/goby/wiki/Contibuting-a-Method) for contributing built in methods.\n  - you can also porting Ruby's standard lib using `Goby` (not Go), see [lib directory](https://github.com/goby-lang/goby/tree/master/lib/net). You'll feel like you're just writing plain Ruby 😄\n\n#### If you want to propose a feature, just open an issue with `[feature request]` prefix on title.\n\n**Note**:\n  - Before sending PR, you should perform `make test` on the root directory of the project to perform all tests (`go test` works only against goby.go file and will be incomplete for the test).\n  - DB library tests requires Postgresql to be opened and export port `5432`\n\n\n## Setup Environment\n\n\n### `$GOBY_ROOT`\n\nBy default Goby finds standard libs in `/usr/local/goby` when you install it via homebrew.\nBut if you want to develop Goby or you installed Goby from source, you might want to set `$GOBY_ROOT` to Goby's project root so you can use latest libs.\nAdd the following line to your shell config file, either `~/.bashrc`, `~/.bash_profile`, or `~/.zshrc` if you're using zsh.\n\n```\nexport GOBY_ROOT=$GOPATH/src/github.com/goby-lang/goby\n```\n\nThe most common messages you'll see if you do not set `$GOBY_ROOT` right are 'library not found'. For example:\n\n```ruby\nrequire 'net/http'\n# => Internal Error: open lib/net/http/response.gb: no such file or directory\n```\n\n\n\n## To Run Tests\n\nIf you want to run Go tests, you can run:\n\n```\n$ go test PKG_NAME -run TestName\n```\n\nFor example, this will run any tests in the `vm` package that matches `TestIncludeFail` with their names:\n\n```\n$ go test ./vm -run TestIncludeFail\n```\n\nYou can run `go help test` to see more options.\n\nAnd if you want to run Goby tests, you can use:\n\n```\n$ goby test specs\n```\n\nor if you want to test it against your latest changes in Goby source code, you can use\n\n```\n$ go run goby.go test specs\n```\n\nBut we haven't support running single Goby test at the moment (contribution is welcomed 😉).\n\n\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2529296875,
          "content": "FROM golang:1.14\n\nENV GOPATH=/go\nENV PATH=$GOPATH/bin:$PATH\n\nENV GO111MODULE=on\n\nRUN mkdir -p $GOPATH/src/github.com/goby-lang/goby\nENV GOBY_ROOT=$GOPATH/src/github.com/goby-lang/goby\n\nWORKDIR $GOPATH/src/github.com/goby-lang/goby\n\nADD . ./\n\nRUN go install .\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2017 Stan Lo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.4755859375,
          "content": "GOFMT ?= gofmt -s\nGOFILES := $(shell find . -name \"*.go\" -type f -not -path \"./vendor/*\")\nRELEASE_OPTIONS := -ldflags \"-s -w -X github.com/goby-lang/goby/vm.DefaultLibPath=${GOBY_LIBPATH}\" -tags release\nTEST_OPTIONS := -ldflags \"-s -w\"\n\n.PHONY: fmt\nfmt:\n\t$(GOFMT) -w $(GOFILES)\n\n.PHONY: build\nbuild:\n\tgo build $(RELEASE_OPTIONS) .\n\n.PHONY: install\ninstall:\n\tgo install $(RELEASE_OPTIONS) .\n\n.PHONY: test\ntest:\n\tgo test $(TEST_OPTIONS) ./...\n\tmake clean\n\n.PHONY: clean\nclean:\n\tgo clean .\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.9345703125,
          "content": "![Goby](http://i.imgur.com/ElGAzRn.png?3)\n=========\n\n[![](https://goby-slack-invite.herokuapp.com/badge.svg)](https://goby-slack-invite.herokuapp.com)\n[![Build Status](https://travis-ci.com/goby-lang/goby.svg?branch=master)](https://travis-ci.com/goby-lang/goby)\n[![GoDoc](https://godoc.org/github.com/goby-lang/goby?status.svg)](https://godoc.org/github.com/goby-lang/goby)\n[![Go Report Card](https://goreportcard.com/badge/github.com/goby-lang/goby)](https://goreportcard.com/report/github.com/goby-lang/goby)\n[![codecov](https://codecov.io/gh/goby-lang/goby/branch/master/graph/badge.svg)](https://codecov.io/gh/goby-lang/goby)\n[![Readme Score](http://readme-score-api.herokuapp.com/score.svg?url=goby-lang/goby)](http://clayallsopp.github.io/readme-score?url=goby-lang/goby)\n[![Snap Status](https://build.snapcraft.io/badge/goby-lang/goby.svg)](https://build.snapcraft.io/user/goby-lang/goby)\n[![Open Source Helpers](https://www.codetriage.com/goby-lang/goby/badges/users.svg)](https://www.codetriage.com/goby-lang/goby)\n[![Reviewed by Hound](https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg)](https://houndci.com)\n\n**Goby** is an object-oriented interpreter language deeply inspired by **Ruby** as well as its core implementation by 100% pure **Go**. Moreover, it has standard libraries to provide several features such as the Plugin system. Note that we do not intend to reproduce whole of the honorable works of Ruby syntax/implementation/libraries.\n\nThe expected use case for Goby would be backend development. With this goal, it equips (but not limited to) the following features:\n\n- thread/channel mechanism powered by Go's goroutine\n- Builtin database library (currently only support PostgreSQL adapter)\n- JSON support\n- [Plugin system](https://goby-lang.gitbooks.io/goby/content/plugin-system.html) that can load existing Go packages dynamically (Only for Linux and MacOS right now)\n- Accessing Go objects from Goby directly\n\n> Note: Goby had formerly been known as \"Rooby\", which was renamed in May 2017.\n\n## Table of contents\n\n- [Demo screen and sample Goby app](#demo-screen-and-sample-goby-app)\n- [Structure](#structure)\n- [3D Visualization](#3d-visualization)\n- [Features](#major-features)\n- [Installation](#installation)\n- [Usage](#verifying-goby-installation)\n- [Sample codes](#sample-codes)\n- [Documentation](https://goby-lang.org/docs/introduction.html)\n- [Joining to Goby](#joining-to-goby)\n- [Maintainers](#maintainers)\n- [Supporters](#supporters)\n- [References](#references)\n\n## Demo screen and sample Goby app\n\nClick to see the demo below (powered by [asciinema](https://asciinema.org) and [GIPHY](https://giphy.com/)).\n\n![](https://github.com/goby-lang/animation-gif/blob/master/goby_demo_large.gif)\n\n**New!** Check-out our [sample app](http://sample.goby-lang.org) built with Goby. Source code is also available [here](https://github.com/goby-lang/sample-web-app).\n\n## Structure\n\n![](https://github.com/goby-lang/goby/blob/master/wiki/goby_structure.png)\n\n## 3D Visualization\n\nA 3D visualization of Goby codebase, powered by [GoCity](https://go-city.github.io/)\n\n[![Goby 3D Visualization](https://github.com/goby-lang/goby/blob/master/wiki/goby_codebase_gocity-min.png)](https://go-city.github.io/#/github.com/goby-lang/goby)\n\n## Major Features\n\n- Plugin system\n    - Allows using Go libraries (packages) dynamically\n    - Allows calling Go's methods from Goby directly (only on Linux for now)\n- Builtin multi-threaded server and DB library\n- REPL (run `goby -i`)\n\nHere's a [complete list](https://github.com/goby-lang/goby/wiki/Features) of all the features.\n\n## Installation\n\nConfirmed Goby runs on Mac OS and Linux for now. Try Goby on Windows and let us know the result.\n\n### A. Via Homebrew (binary installation for Mac OS)\n\n**Note: Please check the [latest release](https://github.com/goby-lang/goby/releases) before installing Goby via Homebrew**\n\n```\nbrew tap goby-lang/goby\nbrew install goby\n```\n\nIn the case, `$GOBY_ROOT` is automatically configured.\n\n### B. From Source\n\nTry this if you'd like to contribute Goby! Skip 1 if you already have Golang in your environment.\n\n1. Prepare Golang environment\n    - Install Golang >= 1.14\n    - Make sure `$GOPATH` in your shell's config file( like .bashrc) is correct\n    - Add your `$GOPATH/bin` to `$PATH`\n    - Add `export GO111MODULE=on` to your shell profile\n2. Run `go get github.com/goby-lang/goby`\n3. Set the Goby project's exact root path `$GOBY_ROOT` manually, which should be:\n\n```\n$GOPATH/src/github.com/goby-lang/goby\n```\n\n### C. Installation on a Linux system\n\nIn order to install Go, Goby and PostgreSQL on a Linux system, see the [wiki page](https://github.com/goby-lang/goby/wiki/Setup-Go,-Goby-and-PostgreSQL-on-a-Linux-system).\n\n### Verifying Goby installation\n\n1. Run `goby -v` to see the version.\n2. Run `goby -i` to launch igb REPL.\n3. Type `require \"uri\"` in igb.\n\nFYI: You can just run `brew test goby` to check Homebrew installation.\n\n**If you have any issue installing Goby, please let us know via [GitHub issues](https://github.com/goby-lang/goby/issues)**\n\n### Using Docker\n\nGoby has official [docker image](https://hub.docker.com/r/gobylang/goby/) as well. You can try the [Plugin System](https://goby-lang.gitbooks.io/goby/content/plugin-system.html) using docker.\n\n## Syntax highlighting\n\nThe Goby syntax is currently a subset of the Ruby one, with an exception (`get_block`), therefore, it's possible to attain syntax highlighting on any platform/editor by simply switching it to Ruby for the currently opened file.\n\n### Sublime Text 3\n\nSublime Text 3 users can use the `Only Goby` package, by typing the following in a terminal:\n\n```sh\ngit clone git@github.com:saveriomiroddi/only-goby-for-sublime-text \"$HOME/.config/sublime-text-3/Packages/only-goby-for-sublime-text\"\n```\n\nthis will automatically apply the Goby syntax highlighting to the `.gb` files.\n\n### Vim\n\nVim users can use the `vim-goby-syntax-highlighting` definition, by typing the following in a terminal:\n\n```sh\nmkdir -p \"$HOME/.vim/syntax\"\nwget -O \"$HOME/.vim/syntax/goby.vim\" https://raw.githubusercontent.com/saveriomiroddi/vim-goby-syntax-highlighting/master/goby.vim\necho 'au BufNewFile,BufRead *.gb    setf goby' >> \"$HOME/.vim/filetype.vim\"\n```\n\nthis will automatically apply the Goby syntax highlighting to the `.gb` files.\n\n### SpaceVim\n\nSpaceVim users can load the [`lang#goby`](https://spacevim.org/layers/lang/goby/) layer by adding following configuration:\n\n```toml\n[[layers]]\n  name = \"lang#goby\"\n```\n\n## Sample codes\n\n- [Built a stack data structure using Goby](https://github.com/goby-lang/goby/blob/master/samples/stack.gb)\n- [Running a \"Hello World\" app with built in server library](https://github.com/goby-lang/goby/blob/master/samples/server/server.gb)\n- [Sending request using http library](https://github.com/goby-lang/goby/blob/master/samples/http.gb)\n- [Running load test on blocking server](https://github.com/goby-lang/goby/blob/master/samples/server/blocking_server.gb) (This shows `Goby`'s simple server is very performant and can handle requests concurrently)\n- [One thousand threads](https://github.com/goby-lang/goby/blob/master/samples/one_thousand_threads.gb)\n\nMore sample Goby codes can be found in [sample directory](https://github.com/goby-lang/goby/tree/master/samples).\n\n## Joining to Goby\n\n**Join us on Slack!** [![](https://goby-slack-invite.herokuapp.com/badge.svg)](https://goby-slack-invite.herokuapp.com)\n\nSee the [guideline](https://github.com/goby-lang/goby/blob/master/CONTRIBUTING.md).\n\n## Maintainers\n\n- @st0012\n- @hachi8833\n- @saveriomiroddi\n\n## Designer\n- [steward379](https://dribbble.com/steward379)\n\n## Supporters\n\n<a href=\"https://opencollective.com/goby/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/backer/29/avatar.svg\"></a>\n\n### Sponsors\n\n<a href=\"https://opencollective.com/goby/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/goby/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/goby/sponsor/9/avatar.svg\"></a>\n\n### Powered by\n\n* JetBrains [Goland IDE](https://www.jetbrains.com/go/?from=goby)\n\n[![JetBrains Goland](https://github.com/goby-lang/goby/blob/master/wiki/goland_logo-text.png)](https://www.jetbrains.com/go/?from=goby)\n\n**Supporting Goby by sending your first PR! See [contribution guideline](https://github.com/goby-lang/goby/blob/master/CONTRIBUTING.md)**\n\n\n## References\n\nThe followings are the essential resources to create Goby; I highly recommend you to check them first if you'd be interested in building your own languages:\n\n- [Write An Interpreter In Go](https://interpreterbook.com)\n- [Nand2Tetris II](https://www.coursera.org/learn/nand2tetris2/home/welcome)\n- [Ruby under a microscope](http://patshaughnessy.net/ruby-under-a-microscope)\n- [YARV's instruction table](http://www.atdot.net/yarv/insnstbl.html)\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0283203125,
          "content": "theme: jekyll-theme-architect"
        },
        {
          "name": "benchmark.rb",
          "type": "blob",
          "size": 1.271484375,
          "content": "#! /usr/bin/env ruby\nrequire 'optparse'\nrequire 'tempfile'\n\noptions = {\n  before: 'master',\n  after: 'HEAD',\n  bench_time: '1s'\n}\n\nOptionParser.new do |opts|\n  opts.banner = 'Runs benchmarks on two branches and compares the results'\n  opts.on('-b hash', '--before hash') do |v|\n    options[:before] = v\n  end\n\n  opts.on('-a hash', '--after hash') do |v|\n    options[:after] = v\n  end\n\n  opts.on('-t time', '--bench_time time') do |v|\n    options[:bench_time] = v\n  end\nend.parse!\n\nbenchmark_options = \"-run '^$' -bench '.' -benchmem -benchtime #{options[:bench_time]}\"\nreturn_to = `git rev-parse --abbrev-ref HEAD`\nbefore_hash = `git rev-parse #{options[:before]}`.strip\nafter_hash = `git rev-parse #{options[:after]}`.strip\n\nbf = Tempfile.new('before')\naf = Tempfile.new('after')\nbegin\n  `git checkout #{before_hash} 2>&1`\n\n  puts \"benchmarking #{before_hash}\"\n  bf.write `go test #{benchmark_options} ./...`\n\n  `git checkout #{after_hash} 2>&1`\n  puts \"benchmarking #{after_hash}\"\n  af.write `go test #{benchmark_options} ./...`\n  af.close\n  bf.close\n\n  `go get golang.org/x/tools/cmd/benchcmp`\n  comparison = `$GOPATH/bin/benchcmp #{bf.path} #{af.path}`\n\n  puts RUBY_PLATFORM\n  puts comparison\nrescue StandardError => e\n  puts e\nensure\n  bf.unlink\n  af.unlink\n  `git checkout #{return_to} 2>&1`\nend\n"
        },
        {
          "name": "bzt.yml",
          "type": "blob",
          "size": 0.3349609375,
          "content": "# Please install Taurus first\n# Then run `bzt bzt.yml\n# See https://gettaurus.org/docs/ConfigSyntax/ for more setting options\nexecution:\n  - concurrency: 50\n    throughput: 10 # requests per second\n    ramp-up: 10s\n    hold-for: 1m\n    scenario:\n      requests:\n      - http://localhost:3000/\n\nsettings:\n  artifacts-dir: /tmp/%Y-%m-%d_%H-%M-%S"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.087890625,
          "content": "ignore:\n  - \"**/inspection_methods.go\"\n  - \"./test_fixtures/**\"\n  - \"./vendor\"\n  - \"./lib\""
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.71484375,
          "content": "module github.com/goby-lang/goby\n\ngo 1.12\n\nrequire (\n\tgithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e\n\tgithub.com/dave/jennifer v0.19.0\n\tgithub.com/dlclark/regexp2 v1.2.0\n\tgithub.com/fatih/camelcase v1.0.0\n\tgithub.com/fatih/structs v1.1.0\n\tgithub.com/gorilla/context v1.1.1 // indirect\n\tgithub.com/gorilla/mux v1.7.3\n\tgithub.com/jmoiron/sqlx v1.2.0\n\tgithub.com/lib/pq v1.2.0\n\tgithub.com/looplab/fsm v0.1.0\n\tgithub.com/mattn/go-colorable v0.1.4\n\tgithub.com/mattn/go-isatty v0.0.10 // indirect\n\tgithub.com/pkg/profile v1.3.0\n\tgithub.com/st0012/metago v0.0.0-20170803060228-9a814882b21a\n\tgolang.org/x/sys v0.0.0-20191029155521-f43be2a4598c // indirect\n\tgolang.org/x/tools v0.0.0-20200417140056-c07e33ef3290 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 7.9599609375,
          "content": "github.com/chzyer/readline v0.0.0-20170313234921-41eea22f717c h1:XivOW3zP3dR0iERq+wQGK8K6JHCXKIpsAu/RjuARbUU=\ngithub.com/chzyer/readline v0.0.0-20170313234921-41eea22f717c/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e h1:fY5BOSpyZCqRo5OhCuC+XN+r/bBCmeuuJtjz+bCNIf8=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/dave/jennifer v0.19.0 h1:HuBCbwbdRdqyOvUodzdBn2vwG5Jpr7DNBGFLYuYl8Rc=\ngithub.com/dave/jennifer v0.19.0/go.mod h1:fIb+770HOpJ2fmN9EPPKOqm1vMGhB+TwXKMZhrIygKg=\ngithub.com/dlclark/regexp2 v1.1.6 h1:CqB4MjHw0MFCDj+PHHjiESmHX+N7t0tJzKvC6M97BRg=\ngithub.com/dlclark/regexp2 v1.1.6/go.mod h1:2pZnwuY/m+8K6iRw6wQdMtk+rH5tNGR1i55kozfMjCc=\ngithub.com/dlclark/regexp2 v1.2.0 h1:8sAhBGEM0dRWogWqWyQeIJnxjWO6oIjl8FKqREDsGfk=\ngithub.com/dlclark/regexp2 v1.2.0/go.mod h1:2pZnwuY/m+8K6iRw6wQdMtk+rH5tNGR1i55kozfMjCc=\ngithub.com/fatih/camelcase v1.0.0 h1:hxNvNX/xYBp0ovncs8WyWZrOrpBNub/JfaMvbURyft8=\ngithub.com/fatih/camelcase v1.0.0/go.mod h1:yN2Sb0lFhZJUdVvtELVWefmrXpuZESvPmqwoZc+/fpc=\ngithub.com/fatih/structs v0.0.0-20170524075631-74a29b9fac73 h1:GJSqM4dNAfh2RArT0qS0/PXmq60F4iAjY/P0Zw8RvJs=\ngithub.com/fatih/structs v0.0.0-20170524075631-74a29b9fac73/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=\ngithub.com/fatih/structs v1.1.0 h1:Q7juDM0QtcnhCpeyLGQKyg4TOIghuNXrkL32pHAUMxo=\ngithub.com/fatih/structs v1.1.0/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=\ngithub.com/go-sql-driver/mysql v1.4.0/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=\ngithub.com/gorilla/context v0.0.0-20141217160251-215affda49ad h1:wJwKN6X6iRRVnjdBgrkWjhBOvYm7yw5boqXwFUnBtbE=\ngithub.com/gorilla/context v0.0.0-20141217160251-215affda49ad/go.mod h1:kBGZzfjB9CEq2AlWe17Uuf7NDRt0dE0s8S51q0aT7Yg=\ngithub.com/gorilla/context v1.1.1 h1:AWwleXJkX/nhcU9bZSnZoi3h/qGYqQAGhq6zZe/aQW8=\ngithub.com/gorilla/context v1.1.1/go.mod h1:kBGZzfjB9CEq2AlWe17Uuf7NDRt0dE0s8S51q0aT7Yg=\ngithub.com/gorilla/mux v0.0.0-20140926153814-e444e69cbd2e h1:nH09qCdJVZxw0nRVfm14xjXkw2puLyLPN56n4u+vTC0=\ngithub.com/gorilla/mux v0.0.0-20140926153814-e444e69cbd2e/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gorilla/mux v1.7.3 h1:gnP5JzjVOuiZD07fKKToCAOjS0yOpj/qPETTXCCS6hw=\ngithub.com/gorilla/mux v1.7.3/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/jmoiron/sqlx v0.0.0-20160206221533-398dd5876282 h1:6C9piDBtoXfkPcl1pitty4DkBX3VN2rcH5ZXmQMaM0U=\ngithub.com/jmoiron/sqlx v0.0.0-20160206221533-398dd5876282/go.mod h1:IiEW3SEiiErVyFdH8NTuWjSifiEQKUoyK3LNqr2kCHU=\ngithub.com/jmoiron/sqlx v1.2.0 h1:41Ip0zITnmWNR/vHV+S4m+VoUivnWY5E4OJfLZjCJMA=\ngithub.com/jmoiron/sqlx v1.2.0/go.mod h1:1FEQNm3xlJgrMD+FBdI9+xvCksHtbpVBBw5dYhBSsks=\ngithub.com/lib/pq v0.0.0-20160316202507-3cd0097429be h1:FpIQCxe7U4bihlYIMAYrdDu7DKHvOHUF3EZ0xftWGGA=\ngithub.com/lib/pq v0.0.0-20160316202507-3cd0097429be/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.2.0 h1:LXpIM/LZ5xGFhOpXAQUIMM1HdyqzVYM13zNdjCEEcA0=\ngithub.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/looplab/fsm v0.0.0-20170404094036-bcc3636384ce h1:/kHlhGMhXnoVgYIRC63Vkdh1CI43Yq5ry8slZMknCRI=\ngithub.com/looplab/fsm v0.0.0-20170404094036-bcc3636384ce/go.mod h1:m2VaOfDHxqXBBMgc26m6yUOwkFn8H2AlJDE+jd/uafI=\ngithub.com/looplab/fsm v0.1.0 h1:Qte7Zdn/5hBNbXzP7yxVU4OIFHWXBovyTT2LaBTyC20=\ngithub.com/looplab/fsm v0.1.0/go.mod h1:m2VaOfDHxqXBBMgc26m6yUOwkFn8H2AlJDE+jd/uafI=\ngithub.com/mattn/go-colorable v0.0.0-20170811043054-6df6d4d004b6 h1:/MxK5074UXZalLmf4T93crUVOdq0P1VX250umbSx2jc=\ngithub.com/mattn/go-colorable v0.0.0-20170811043054-6df6d4d004b6/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=\ngithub.com/mattn/go-colorable v0.1.4 h1:snbPLB8fVfU9iwbbo30TPtbLRzwWu6aJS6Xh4eaaviA=\ngithub.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-isatty v0.0.2 h1:F+DnWktyadxnOrohKLNUC9/GjFii5RJgY4GFG6ilggw=\ngithub.com/mattn/go-isatty v0.0.2/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-isatty v0.0.8 h1:HLtExJ+uU2HOZ+wI0Tt5DtUDrx8yhUqDcp7fYERX4CE=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.10 h1:qxFzApOv4WsAL965uUPIsXzAKCZxN2p9UqdhFS4ZW10=\ngithub.com/mattn/go-isatty v0.0.10/go.mod h1:qgIWMr58cqv1PHHyhnkY9lrL7etaEgOFcMEpPG5Rm84=\ngithub.com/mattn/go-sqlite3 v1.9.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/pkg/profile v0.0.0-20170413231811-06b906832ed0 h1:wBza4Dlm/NCQF572oSGNZ69flNFxlwIHjtwS6oy3Rvw=\ngithub.com/pkg/profile v0.0.0-20170413231811-06b906832ed0/go.mod h1:hJw3o1OdXxsrSjjVksARp5W95eeEaEfptyVZyv6JUPA=\ngithub.com/pkg/profile v1.3.0 h1:OQIvuDgm00gWVWGTf4m4mCt6W1/0YqU7Ntg0mySWgaI=\ngithub.com/pkg/profile v1.3.0/go.mod h1:hJw3o1OdXxsrSjjVksARp5W95eeEaEfptyVZyv6JUPA=\ngithub.com/st0012/metago v0.0.0-20170729114159-0405a10ef6ad h1:Q3QshZmCyIZjo4S9JND0FJ2Q3LZwuMb+TB5LybexTX4=\ngithub.com/st0012/metago v0.0.0-20170729114159-0405a10ef6ad/go.mod h1:Ad5ZuP0Q5pBQ7YPmgVvW+MsrpJryZs7HdOctZwj5quA=\ngithub.com/st0012/metago v0.0.0-20170803060228-9a814882b21a h1:J659HSUKwR6UrK2Do7Ma23ZXeLFg24SfIdMb1cum434=\ngithub.com/st0012/metago v0.0.0-20170803060228-9a814882b21a/go.mod h1:Ad5ZuP0Q5pBQ7YPmgVvW+MsrpJryZs7HdOctZwj5quA=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20170710161658-abf9c25f5445 h1:ihxcHCoeP6QVHLnvt4PXvpgB9U94enD3OVEM+UcAuVs=\ngolang.org/x/sys v0.0.0-20170710161658-abf9c25f5445/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223 h1:DH4skfRX4EBpamg7iV4ZlCpblAHI6s6TDM39bFZumv8=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191008105621-543471e840be h1:QAcqgptGM8IQBC9K/RC4o+O9YmqEm0diQn9QmZw/0mU=\ngolang.org/x/sys v0.0.0-20191008105621-543471e840be/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191029155521-f43be2a4598c h1:S/FtSvpNLtFBgjTqcKsRpsa6aVsI6iztaz1bQd9BJwE=\ngolang.org/x/sys v0.0.0-20191029155521-f43be2a4598c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200417140056-c07e33ef3290 h1:NXNmtp0ToD36cui5IqWy95LC4Y6vT/4y3RnPxlQPinU=\ngolang.org/x/tools v0.0.0-20200417140056-c07e33ef3290/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n"
        },
        {
          "name": "goby.go",
          "type": "blob",
          "size": 3.76171875,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/goby-lang/goby/compiler\"\n\t\"github.com/goby-lang/goby/compiler/parser\"\n\t\"github.com/goby-lang/goby/igb\"\n\t_ \"github.com/goby-lang/goby/native/db\"\n\t_ \"github.com/goby-lang/goby/native/plugin\"\n\t_ \"github.com/goby-lang/goby/native/result\"\n\t_ \"github.com/goby-lang/goby/native/ripper\"\n\t\"github.com/goby-lang/goby/vm\"\n\t\"github.com/pkg/profile\"\n)\n\nconst version string = vm.Version\n\nfunc main() {\n\tprofileCPUOptionPtr := flag.Bool(\"profile-cpu\", false, \"Profile cpu usage\")\n\tprofileMemOptionPtr := flag.Bool(\"profile-mem\", false, \"Profile memory allocation\")\n\tversionOptionPtr := flag.Bool(\"v\", false, \"Show current Goby version\")\n\tinteractiveOptionPtr := flag.Bool(\"i\", false, \"Run interactive goby\")\n\tissueOptionPtr := flag.Bool(\"e\", false, \"Generate reporting format\")\n\n\tflag.Parse()\n\n\tif *interactiveOptionPtr {\n\t\tigb.StartIgb(version)\n\t\tos.Exit(0)\n\t}\n\n\tif *profileCPUOptionPtr {\n\t\tdefer profile.Start().Stop()\n\t}\n\n\tif *profileMemOptionPtr {\n\t\tdefer profile.Start(profile.MemProfile).Stop()\n\t}\n\n\tif *versionOptionPtr {\n\t\tfmt.Println(version)\n\t\tos.Exit(0)\n\t}\n\n\tvar fp string\n\n\tswitch flag.Arg(0) {\n\tcase \"\":\n\t\tflag.Usage()\n\t\tos.Exit(0)\n\tcase \"test\":\n\t\targs := flag.Args()[1:]\n\t\tfilePath := flag.Arg(1)\n\t\tfileInfo, err := os.Stat(filePath)\n\t\treportErrorAndExit(err)\n\n\t\tdir := extractDirFromFilePath(filePath, fileInfo)\n\t\tv, err := vm.New(dir, args)\n\t\tif err != nil {\n\t\t\treportErrorAndExit(err)\n\t\t}\n\n\t\tif fileInfo.Mode().IsDir() {\n\t\t\tfileInfos, err := ioutil.ReadDir(filePath)\n\t\t\treportErrorAndExit(err)\n\n\t\t\tfor _, fileInfo := range fileInfos {\n\t\t\t\tfp := filepath.Join(dir, fileInfo.Name())\n\t\t\t\treportErrorAndExit(err)\n\n\t\t\t\terr := runSpecFile(v, fp)\n\t\t\t\treportErrorAndExit(err)\n\t\t\t}\n\t\t} else {\n\t\t\terr := runSpecFile(v, filePath)\n\t\t\treportErrorAndExit(err)\n\t\t}\n\n\t\tinstructionSets, err := compiler.CompileToInstructions(\"Spec.run\", parser.NormalMode)\n\t\tif err != nil {\n\t\t\treportErrorAndExit(err)\n\t\t}\n\t\tv.ExecInstructions(instructionSets, filePath)\n\t\treturn\n\tdefault:\n\t\tfp = flag.Arg(0)\n\n\t\tif !strings.Contains(fp, \".\") {\n\t\t\tflag.Usage()\n\t\t\tos.Exit(0)\n\t\t}\n\t}\n\n\t// Execute files normally\n\tdir, _, fileExt := extractFileInfo(fp)\n\tfile := readFile(fp)\n\n\tswitch fileExt {\n\tcase \"gb\", \"rb\":\n\t\targs := flag.Args()[1:]\n\t\tinstructionSets, err := compiler.CompileToInstructions(string(file), parser.NormalMode)\n\t\treportErrorAndExit(err)\n\n\t\tvar v *vm.VM\n\n\t\tif *issueOptionPtr {\n\t\t\tfmt.Println(\"Will generate issue report on error...\")\n\t\t\tv, err = vm.InitIssueReportVM(dir, args)\n\t\t\tdefer vm.PrintError(v)\n\t\t} else {\n\t\t\tv, err = vm.New(dir, args)\n\t\t}\n\t\treportErrorAndExit(err)\n\n\t\tfp, err := filepath.Abs(fp)\n\t\treportErrorAndExit(err)\n\n\t\tv.ExecInstructions(instructionSets, fp)\n\tdefault:\n\t\tfmt.Printf(\"Unknown file extension: %s\", fileExt)\n\t}\n}\n\nfunc extractFileInfo(fp string) (dir, filename, fileExt string) {\n\tdir, filename = filepath.Split(fp)\n\tdir, _ = filepath.Abs(dir)\n\tfileExt = filepath.Ext(fp)\n\tsplited := strings.Split(filename, \".\")\n\tfilename, fileExt = splited[0], splited[1]\n\treturn\n}\n\nfunc extractDirFromFilePath(filePath string, fileInfo os.FileInfo) string {\n\tif fileInfo.Mode().IsDir() {\n\t\tdir, err := filepath.Abs(filePath)\n\t\treportErrorAndExit(err)\n\t\treturn dir\n\t}\n\n\tfilePath, err := filepath.Abs(filePath)\n\treportErrorAndExit(err)\n\tdir, _, _ := extractFileInfo(filePath)\n\treturn dir\n}\n\nfunc readFile(filepath string) (file []byte) {\n\tfile, err := ioutil.ReadFile(filepath)\n\treportErrorAndExit(err)\n\treturn\n}\n\nfunc runSpecFile(v *vm.VM, fp string) (err error) {\n\tfile := readFile(fp)\n\tinstructionSets, err := compiler.CompileToInstructions(string(file), parser.NormalMode)\n\n\tif err != nil {\n\t\treturn\n\t}\n\n\tv.ExecInstructions(instructionSets, fp)\n\treturn\n}\n\nfunc reportErrorAndExit(err error) {\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "goby_test.go",
          "type": "blob",
          "size": 4.46875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"runtime\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/goby-lang/goby/vm\"\n)\n\nfunc init() {\n\t_, err := os.Stat(\"./goby\")\n\tif err == nil {\n\t\terr := exec.Command(\"rm\", \"./goby\").Run()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n\tfmt.Println(\"Building Goby binary\")\n\terr = exec.Command(\"make\", \"build\").Run()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc execGoby(t *testing.T, args ...string) (in io.WriteCloser, out io.ReadCloser, e io.ReadCloser) {\n\tt.Helper()\n\n\tcmd := exec.Command(\"./goby\", args...)\n\n\tin, err := cmd.StdinPipe()\n\tif err != nil {\n\t\tt.Fatalf(\"Error getting stdin\\n%s\", err.Error())\n\t}\n\n\tout, err = cmd.StdoutPipe()\n\tif err != nil {\n\t\tt.Fatalf(\"Error getting stdout\\n%s\", err.Error())\n\t}\n\n\te, err = cmd.StderrPipe()\n\tif err != nil {\n\t\tt.Fatalf(\"Error getting stderr\\n%s\", err.Error())\n\t}\n\n\terr = cmd.Start()\n\tif err != nil {\n\t\tt.Fatalf(\"Error running goby\\n%s\", err.Error())\n\t}\n\n\treturn\n}\n\nfunc partialReport() (md string) {\n\n\tmd += fmt.Sprintf(\"### Goby version\\n%s\\n\", vm.Version)\n\tmd += fmt.Sprintf(\"### GOBY_ROOT\\n%s\\n\", os.Getenv(\"GOBY_ROOT\"))\n\tmd += fmt.Sprintf(\"### Go version\\n%s\\n\", runtime.Version())\n\tmd += fmt.Sprintf(\"### GOROOT\\n%s\\n\", os.Getenv(\"GOROOT\"))\n\tmd += fmt.Sprintf(\"### GOPATH\\n%s\\n\", os.Getenv(\"GOPATH\"))\n\tmd += fmt.Sprintf(\"### Operating system\\n%s\\n\", runtime.GOOS)\n\n\treturn\n}\n\nfunc TestArgE(t *testing.T) {\n\n\t_, out, _ := execGoby(t, \"-e\", \"samples/error-report.gb\")\n\n\tbyt, err := ioutil.ReadAll(out)\n\tif err != nil {\n\t\tt.Fatalf(\"Couldn't read from pipe: %s\", err.Error())\n\t}\n\n\tif !strings.Contains(string(byt), partialReport()) {\n\t\tt.Fatalf(\"Interpreter -e output incorrect:\\nExpected \\n`%s` in string `\\n%s`\", partialReport(), string(byt))\n\t}\n}\n\nfunc TestArgI(t *testing.T) {\n\n\tin, out, _ := execGoby(t, \"-i\")\n\n\tfmt.Fprintln(in, `puts \"hello world\"`)\n\tfmt.Fprintln(in, `exit`)\n\n\texpectedOutput := \"hello world\\n\"\n\n\tbyt, err := ioutil.ReadAll(out)\n\tif err != nil {\n\t\tt.Fatalf(\"Couldn't read from pipe: %s\", err.Error())\n\t}\n\n\tif !strings.HasSuffix(string(byt), expectedOutput) {\n\t\tt.Fatalf(\"Interpreter output incorrect. Expect '%s' to contain '%s'\", string(byt), expectedOutput)\n\t}\n}\n\nfunc TestArgV(t *testing.T) {\n\n\t_, out, _ := execGoby(t, \"-v\")\n\n\tbyt, err := ioutil.ReadAll(out)\n\tif err != nil {\n\t\tt.Fatalf(\"Couldn't read from pipe: %s\", err.Error())\n\t}\n\n\tif !strings.Contains(string(byt), vm.Version) {\n\t\tt.Fatalf(\"Interpreter -v output incorrect:\\nExpected '%s' in string '%s'.\", vm.Version, string(byt))\n\t}\n}\n\nfunc TestArgProfileCPU(t *testing.T) {\n\n\t_, out, _ := execGoby(t, \"-profile-cpu\", \"samples/one_thousand_threads.gb\")\n\n\tbyt, err := ioutil.ReadAll(out)\n\tif err != nil {\n\t\tt.Fatalf(\"Couldn't read from pipe: %s\", err.Error())\n\t}\n\n\tif string(byt) != \"500500\\n\" {\n\t\tt.Fatalf(\"Test failed, excpected 500500, got %s\", string(byt))\n\t}\n}\n\nfunc TestArgProfileMem(t *testing.T) {\n\n\t_, out, _ := execGoby(t, \"-profile-mem\", \"samples/one_thousand_threads.gb\")\n\n\tbyt, err := ioutil.ReadAll(out)\n\tif err != nil {\n\t\tt.Fatalf(\"Couldn't read from pipe: %s\", err.Error())\n\t}\n\n\tif string(byt) != \"500500\\n\" {\n\t\tt.Fatalf(\"Test failed, excpected 500500, got %s\", string(byt))\n\t}\n}\n\nfunc TestExecFileWithError(t *testing.T) {\n\texpectedError := \"NoMethodError: Undefined Method 'foo' for \"\n\n\t_, _, stderr := execGoby(t, \"test_fixtures/file_with_error.gb\")\n\n\toutput, _ := ioutil.ReadAll(stderr)\n\n\tif !strings.Contains(string(output), expectedError) {\n\t\tt.Fatalf(\"Expect to see error: '%s'. But got: '%s' instead\", expectedError, string(output))\n\t}\n}\n\nfunc TestTestCommand(t *testing.T) {\n\t// Folder name with slash\n\t_, out, _ := execGoby(t, \"test\", \"test_fixtures/test_command_test/\")\n\n\tbyt, err := ioutil.ReadAll(out)\n\tif err != nil {\n\t\tt.Fatalf(\"Couldn't read from pipe: %s\", err.Error())\n\t}\n\n\tif !strings.Contains(string(byt), \"Spec test 2\") {\n\t\tt.Fatalf(\"Test files by giving folder name with slash failed, got: %s\", string(byt))\n\t}\n\n\t// Folder name\n\t_, out, _ = execGoby(t, \"test\", \"test_fixtures/test_command_test\")\n\n\tbyt, err = ioutil.ReadAll(out)\n\tif err != nil {\n\t\tt.Fatalf(\"Couldn't read from pipe: %s\", err.Error())\n\t}\n\n\tif !strings.Contains(string(byt), \"Spec test 2\") {\n\t\tt.Fatalf(\"Test files by giving folder name failed, got: %s\", string(byt))\n\t}\n\n\t// File name\n\t_, out, _ = execGoby(t, \"test\", \"test_fixtures/test_command_test/test_spec.gb\")\n\n\tbyt, err = ioutil.ReadAll(out)\n\tif err != nil {\n\t\tt.Fatalf(\"Couldn't read from pipe: %s\", err.Error())\n\t}\n\n\tif !strings.Contains(string(byt), \"Spec\") {\n\t\tt.Fatalf(\"Test files by giving file name failed, got: %s\", string(byt))\n\t}\n}\n"
        },
        {
          "name": "igb",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "native",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "specs",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_fixtures",
          "type": "tree",
          "content": null
        },
        {
          "name": "travis.sh",
          "type": "blob",
          "size": 1.302734375,
          "content": "#!/usr/bin/env bash\n\nSLEEP=0.5\n\nset -e\necho \"\" > coverage.txt\n\nfor d in $(go list ./...); do\n    if [ $d == \"github.com/goby-lang/goby/vm\" ]; then\n        # Test vm's code without running race detection because that breaks plugin tests.\n        # This can generate full coverage report of vm package.\n        # Test that need to run without race detection include NoRaceDetection in the name,\n        # otherwise, they will run twice (in the run below).\n        NO_RACE_DETECTION=true go test -coverprofile=profile.out -covermode=atomic $d -run NoRaceDetection\n        if [ -f profile.out ]; then\n          cat profile.out >> coverage.txt\n          rm profile.out\n        fi\n\n        # TODO: Add -race flag back when ready\n        # Then we test other tests with race detection\n        go test -coverprofile=profile.out -covermode=atomic $d\n        if [ -f profile.out ]; then\n          cat profile.out >> coverage.txt\n          rm profile.out\n        fi\n        continue\n    fi\n    # TODO: Add -race flag back when ready\n    go test -coverprofile=profile.out -covermode=atomic $d\n    if [ -f profile.out ]; then\n      cat profile.out >> coverage.txt\n      rm profile.out\n    fi\ndone\n\n# Test if libs that require built in Goby script would work.\n# TODO: Write a test for this specific case\nmake install\ngoby test specs\n\n./benchmark.rb"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "vm",
          "type": "tree",
          "content": null
        },
        {
          "name": "wiki",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}