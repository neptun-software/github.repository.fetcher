{
  "metadata": {
    "timestamp": 1736566633489,
    "page": 190,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tucnak/telebot",
      "stars": 4119,
      "defaultBranch": "v4",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3828125,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n.idea\n.DS_Store\ncoverage.txt\n\n# Terraform artifacts\n*.zip\n.terraform*\nterraform*\n/examples/awslambdaechobot/awslambdaechobot\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 llya Kowalewski\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.0263671875,
          "content": "# Telebot\n>\"I never knew creating Telegram bots could be so _sexy_!\"\n\n[![GoDoc](https://godoc.org/gopkg.in/telebot.v4?status.svg)](https://godoc.org/gopkg.in/telebot.v4)\n[![GitHub Actions](https://github.com/tucnak/telebot/actions/workflows/go.yml/badge.svg)](https://github.com/tucnak/telebot/actions)\n[![codecov.io](https://codecov.io/gh/tucnak/telebot/coverage.svg?branch=v3)](https://codecov.io/gh/tucnak/telebot)\n[![Discuss on Telegram](https://img.shields.io/badge/telegram-discuss-0088cc.svg)](https://t.me/go_telebot)\n\n```bash\ngo get -u gopkg.in/telebot.v4\n```\n\n* [Overview](#overview)\n* [Getting Started](#getting-started)\n\t- [Context](#context)\n\t- [Middleware](#middleware)\n\t- [Poller](#poller)\n\t- [Commands](#commands)\n\t- [Files](#files)\n\t- [Sendable](#sendable)\n\t- [Editable](#editable)\n\t- [Keyboards](#keyboards)\n\t- [Inline mode](#inline-mode)\n* [Contributing](#contributing)\n* [Donate](#donate)\n* [License](#license)\n\n# Overview\nTelebot is a bot framework for [Telegram Bot API](https://core.telegram.org/bots/api).\nThis package provides the best of its kind API for command routing, inline query requests and keyboards, as well\nas callbacks. Actually, I went a couple steps further, so instead of making a 1:1 API wrapper I chose to focus on\nthe beauty of API and performance. Some strong sides of Telebot are:\n\n* Real concise API\n* Command routing\n* Middleware\n* Transparent File API\n* Effortless bot callbacks\n\nAll the methods of Telebot API are _extremely_ easy to memorize and get used to. Also, consider Telebot a\nhighload-ready solution. I'll test and benchmark the most popular actions and if necessary, optimize\nagainst them without sacrificing API quality.\n\n# Getting Started\nLet's take a look at the minimal Telebot setup:\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\ttele \"gopkg.in/telebot.v4\"\n)\n\nfunc main() {\n\tpref := tele.Settings{\n\t\tToken:  os.Getenv(\"TOKEN\"),\n\t\tPoller: &tele.LongPoller{Timeout: 10 * time.Second},\n\t}\n\n\tb, err := tele.NewBot(pref)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\n\tb.Handle(\"/hello\", func(c tele.Context) error {\n\t\treturn c.Send(\"Hello!\")\n\t})\n\n\tb.Start()\n}\n\n```\n\nSimple, innit? Telebot's routing system takes care of delivering updates\nto their endpoints, so in order to get to handle any meaningful event,\nall you got to do is just plug your function into one of the Telebot-provided\nendpoints. You can find the full list\n[here](https://godoc.org/gopkg.in/telebot.v4#pkg-constants).\n\nThere are dozens of supported endpoints (see package consts). Let me know\nif you'd like to see some endpoint or endpoint ideas implemented. This system\nis completely extensible, so I can introduce them without breaking\nbackwards compatibility.\n\n## Context\nContext is a special type that wraps a huge update structure and represents\nthe context of the current event. It provides several helpers, which allow\ngetting, for example, the chat that this update had been sent in, no matter\nwhat kind of update this is.\n\n```go\nb.Handle(tele.OnText, func(c tele.Context) error {\n\t// All the text messages that weren't\n\t// captured by existing handlers.\n\n\tvar (\n\t\tuser = c.Sender()\n\t\ttext = c.Text()\n\t)\n\n\t// Use full-fledged bot's functions\n\t// only if you need a result:\n\tmsg, err := b.Send(user, text)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Instead, prefer a context short-hand:\n\treturn c.Send(text)\n})\n\nb.Handle(tele.OnChannelPost, func(c tele.Context) error {\n\t// Channel posts only.\n\tmsg := c.Message()\n})\n\nb.Handle(tele.OnPhoto, func(c tele.Context) error {\n\t// Photos only.\n\tphoto := c.Message().Photo\n})\n\nb.Handle(tele.OnQuery, func(c tele.Context) error {\n\t// Incoming inline queries.\n\treturn c.Answer(...)\n})\n```\n\n## Middleware\nTelebot has a simple and recognizable way to set up middleware — chained functions with access to `Context`, called before the handler execution.\n\nImport a `middleware` package to get some basic out-of-box middleware\nimplementations:\n```go\nimport \"gopkg.in/telebot.v4/middleware\"\n```\n\n```go\n// Global-scoped middleware:\nb.Use(middleware.Logger())\nb.Use(middleware.AutoRespond())\n\n// Group-scoped middleware:\nadminOnly := b.Group()\nadminOnly.Use(middleware.Whitelist(adminIDs...))\nadminOnly.Handle(\"/ban\", onBan)\nadminOnly.Handle(\"/kick\", onKick)\n\n// Handler-scoped middleware:\nb.Handle(tele.OnText, onText, middleware.IgnoreVia())\n```\n\nCustom middleware example:\n```go\n// AutoResponder automatically responds to every callback update.\nfunc AutoResponder(next tele.HandlerFunc) tele.HandlerFunc {\n\treturn func(c tele.Context) error {\n\t\tif c.Callback() != nil {\n\t\t\tdefer c.Respond()\n\t\t}\n\t\treturn next(c) // continue execution chain\n\t}\n}\n```\n\n## Poller\nTelebot doesn't really care how you provide it with incoming updates, as long\nas you set it up with a Poller, or call ProcessUpdate for each update:\n\n```go\n// Poller is a provider of Updates.\n//\n// All pollers must implement Poll(), which accepts bot\n// pointer and subscription channel and start polling\n// synchronously straight away.\ntype Poller interface {\n\t// Poll is supposed to take the bot object\n\t// subscription channel and start polling\n\t// for Updates immediately.\n\t//\n\t// Poller must listen for stop constantly and close\n\t// it as soon as it's done polling.\n\tPoll(b *Bot, updates chan Update, stop chan struct{})\n}\n```\n\n## Commands\nWhen handling commands, Telebot supports both direct (`/command`) and group-like\nsyntax (`/command@botname`) and will never deliver messages addressed to some\nother bot, even if [privacy mode](https://core.telegram.org/bots#privacy-mode) is off.\n\nFor simplified deep-linking, Telebot also extracts payload:\n```go\n// Command: /start <PAYLOAD>\nb.Handle(\"/start\", func(c tele.Context) error {\n\tfmt.Println(c.Message().Payload) // <PAYLOAD>\n})\n```\n\nFor multiple arguments use:\n```go\n// Command: /tags <tag1> <tag2> <...>\nb.Handle(\"/tags\", func(c tele.Context) error {\n\ttags := c.Args() // list of arguments splitted by a space\n\tfor _, tag := range tags {\n\t\t// iterate through passed arguments\n\t}\n})\n```\n\n## Files\n>Telegram allows files up to 50 MB in size.\n\nTelebot allows to both upload (from disk or by URL) and download (from Telegram)\nfiles in bot's scope. Also, sending any kind of media with a File created\nfrom disk will upload the file to Telegram automatically:\n```go\na := &tele.Audio{File: tele.FromDisk(\"file.ogg\")}\n\nfmt.Println(a.OnDisk()) // true\nfmt.Println(a.InCloud()) // false\n\n// Will upload the file from disk and send it to the recipient\nb.Send(recipient, a)\n\n// Next time you'll be sending this very *Audio, Telebot won't\n// re-upload the same file but rather utilize its Telegram FileID\nb.Send(otherRecipient, a)\n\nfmt.Println(a.OnDisk()) // true\nfmt.Println(a.InCloud()) // true\nfmt.Println(a.FileID) // <Telegram file ID>\n```\n\nYou might want to save certain `File`s in order to avoid re-uploading. Feel free\nto marshal them into whatever format, `File` only contain public fields, so no\ndata will ever be lost.\n\n## Sendable\nSend is undoubtedly the most important method in Telebot. `Send()` accepts a\n`Recipient` (could be user, group or a channel) and a `Sendable`. Other types other than\nthe Telebot-provided media types (`Photo`, `Audio`, `Video`, etc.) are `Sendable`.\nIf you create composite types of your own, and they satisfy the `Sendable` interface,\nTelebot will be able to send them out.\n\n```go\n// Sendable is any object that can send itself.\n//\n// This is pretty cool, since it lets bots implement\n// custom Sendables for complex kinds of media or\n// chat objects spanning across multiple messages.\ntype Sendable interface {\n\tSend(*Bot, Recipient, *SendOptions) (*Message, error)\n}\n```\n\nThe only type at the time that doesn't fit `Send()` is `Album` and there is a reason\nfor that. Albums were added not so long ago, so they are slightly quirky for backwards\ncompatibilities sake. In fact, an `Album` can be sent, but never received. Instead,\nTelegram returns a `[]Message`, one for each media object in the album:\n```go\np := &tele.Photo{File: tele.FromDisk(\"chicken.jpg\")}\nv := &tele.Video{File: tele.FromURL(\"http://video.mp4\")}\n\nmsgs, err := b.SendAlbum(user, tele.Album{p, v})\n```\n\n### Send options\nSend options are objects and flags you can pass to `Send()`, `Edit()` and friends\nas optional arguments (following the recipient and the text/media). The most\nimportant one is called `SendOptions`, it lets you control _all_ the properties of\nthe message supported by Telegram. The only drawback is that it's rather\ninconvenient to use at times, so `Send()` supports multiple shorthands:\n```go\n// regular send options\nb.Send(user, \"text\", &tele.SendOptions{\n\t// ...\n})\n\n// ReplyMarkup is a part of SendOptions,\n// but often it's the only option you need\nb.Send(user, \"text\", &tele.ReplyMarkup{\n\t// ...\n})\n\n// flags: no notification && no web link preview\nb.Send(user, \"text\", tele.Silent, tele.NoPreview)\n```\n\nFull list of supported option-flags you can find\n[here](https://pkg.go.dev/gopkg.in/telebot.v4#Option).\n\n## Editable\nIf you want to edit some existing message, you don't really need to store the\noriginal `*Message` object. In fact, upon edit, Telegram only requires `chat_id`\nand `message_id`. So you don't really need the Message as a whole. Also, you\nmight want to store references to certain messages in the database, so I thought\nit made sense for *any* Go struct to be editable as a Telegram message, to implement\n`Editable`:\n```go\n// Editable is an interface for all objects that\n// provide \"message signature\", a pair of 32-bit\n// message ID and 64-bit chat ID, both required\n// for edit operations.\n//\n// Use case: DB model struct for messages to-be\n// edited with, say two columns: msg_id,chat_id\n// could easily implement MessageSig() making\n// instances of stored messages editable.\ntype Editable interface {\n\t// MessageSig is a \"message signature\".\n\t//\n\t// For inline messages, return chatID = 0.\n\tMessageSig() (messageID int, chatID int64)\n}\n```\n\nFor example, `Message` type is Editable. Here is the implementation of `StoredMessage`\ntype, provided by Telebot:\n```go\n// StoredMessage is an example struct suitable for being\n// stored in the database as-is or being embedded into\n// a larger struct, which is often the case (you might\n// want to store some metadata alongside, or might not.)\ntype StoredMessage struct {\n\tMessageID int   `sql:\"message_id\" json:\"message_id\"`\n\tChatID    int64 `sql:\"chat_id\" json:\"chat_id\"`\n}\n\nfunc (x StoredMessage) MessageSig() (int, int64) {\n\treturn x.MessageID, x.ChatID\n}\n```\n\nWhy bother at all? Well, it allows you to do things like this:\n```go\n// just two integer columns in the database\nvar msgs []tele.StoredMessage\ndb.Find(&msgs) // gorm syntax\n\nfor _, msg := range msgs {\n\tbot.Edit(&msg, \"Updated text\")\n\t// or\n\tbot.Delete(&msg)\n}\n```\n\nI find it incredibly neat. Worth noting, at this point of time there exists\nanother method in the Edit family, `EditCaption()` which is of a pretty\nrare use, so I didn't bother including it to `Edit()`, just like I did with\n`SendAlbum()` as it would inevitably lead to unnecessary complications.\n```go\nvar m *Message\n\n// change caption of a photo, audio, etc.\nbot.EditCaption(m, \"new caption\")\n```\n\n## Keyboards\nTelebot supports both kinds of keyboards Telegram provides: reply and inline\nkeyboards. Any button can also act as endpoints for `Handle()`.\n\n```go\nvar (\n\t// Universal markup builders.\n\tmenu     = &tele.ReplyMarkup{ResizeKeyboard: true}\n\tselector = &tele.ReplyMarkup{}\n\n\t// Reply buttons.\n\tbtnHelp     = menu.Text(\"ℹ Help\")\n\tbtnSettings = menu.Text(\"⚙ Settings\")\n\n\t// Inline buttons.\n\t//\n\t// Pressing it will cause the client to\n\t// send the bot a callback.\n\t//\n\t// Make sure Unique stays unique as per button kind\n\t// since it's required for callback routing to work.\n\t//\n\tbtnPrev = selector.Data(\"⬅\", \"prev\", ...)\n\tbtnNext = selector.Data(\"➡\", \"next\", ...)\n)\n\nmenu.Reply(\n\tmenu.Row(btnHelp),\n\tmenu.Row(btnSettings),\n)\nselector.Inline(\n\tselector.Row(btnPrev, btnNext),\n)\n\nb.Handle(\"/start\", func(c tele.Context) error {\n\treturn c.Send(\"Hello!\", menu)\n})\n\n// On reply button pressed (message)\nb.Handle(&btnHelp, func(c tele.Context) error {\n\treturn c.Edit(\"Here is some help: ...\")\n})\n\n// On inline button pressed (callback)\nb.Handle(&btnPrev, func(c tele.Context) error {\n\treturn c.Respond()\n})\n```\n\nYou can use markup constructor for every type of possible button:\n```go\nr := b.NewMarkup()\n\n// Reply buttons:\nr.Text(\"Hello!\")\nr.Contact(\"Send phone number\")\nr.Location(\"Send location\")\nr.Poll(tele.PollQuiz)\n\n// Inline buttons:\nr.Data(\"Show help\", \"help\") // data is optional\nr.Data(\"Delete item\", \"delete\", item.ID)\nr.URL(\"Visit\", \"https://google.com\")\nr.Query(\"Search\", query)\nr.QueryChat(\"Share\", query)\nr.Login(\"Login\", &tele.Login{...})\n```\n\n## Inline mode\nSo if you want to handle incoming inline queries you better plug the `tele.OnQuery`\nendpoint and then use the `Answer()` method to send a list of inline queries\nback. I think at the time of writing, Telebot supports all of the provided result\ntypes (but not the cached ones). This is what it looks like:\n\n```go\nb.Handle(tele.OnQuery, func(c tele.Context) error {\n\turls := []string{\n\t\t\"http://photo.jpg\",\n\t\t\"http://photo2.jpg\",\n\t}\n\n\tresults := make(tele.Results, len(urls)) // []tele.Result\n\tfor i, url := range urls {\n\t\tresult := &tele.PhotoResult{\n\t\t\tURL:      url,\n\t\t\tThumbURL: url, // required for photos\n\t\t}\n\n\t\tresults[i] = result\n\t\t// needed to set a unique string ID for each result\n\t\tresults[i].SetResultID(strconv.Itoa(i))\n\t}\n\n\treturn c.Answer(&tele.QueryResponse{\n\t\tResults:   results,\n\t\tCacheTime: 60, // a minute\n\t})\n})\n```\n\nThere's not much to talk about really. It also supports some form of authentication\nthrough deep-linking. For that, use fields `SwitchPMText` and `SwitchPMParameter`\nof `QueryResponse`.\n\n# Contributing\n\n1. Fork it\n2. Clone v3: `git clone -b v3 https://github.com/tucnak/telebot`\n3. Create your feature branch: `git checkout -b v3-feature`\n4. Make changes and add them: `git add .`\n5. Commit: `git commit -m \"add some feature\"`\n6. Push: `git push origin v3-feature`\n7. Pull request\n\n# Donate\n\nI do coding for fun, but I also try to search for interesting solutions and\noptimize them as much as possible.\nIf you feel like it's a good piece of software, I wouldn't mind a tip!\n\nLitecoin: `ltc1qskt5ltrtyg7esfjm0ftx6jnacwffhpzpqmerus`\n\nEthereum: `0xB78A2Ac1D83a0aD0b993046F9fDEfC5e619efCAB`\n\n# License\n\nTelebot is distributed under MIT.\n"
        },
        {
          "name": "admin.go",
          "type": "blob",
          "size": 9.3388671875,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"strconv\"\n\t\"time\"\n)\n\n// Rights is a list of privileges available to chat members.\ntype Rights struct {\n\t// Anonymous is true, if the user's presence in the chat is hidden.\n\tAnonymous bool `json:\"is_anonymous\"`\n\n\tCanBeEdited         bool `json:\"can_be_edited\"`\n\tCanChangeInfo       bool `json:\"can_change_info\"`\n\tCanPostMessages     bool `json:\"can_post_messages\"`\n\tCanEditMessages     bool `json:\"can_edit_messages\"`\n\tCanDeleteMessages   bool `json:\"can_delete_messages\"`\n\tCanPinMessages      bool `json:\"can_pin_messages\"`\n\tCanInviteUsers      bool `json:\"can_invite_users\"`\n\tCanRestrictMembers  bool `json:\"can_restrict_members\"`\n\tCanPromoteMembers   bool `json:\"can_promote_members\"`\n\tCanSendMessages     bool `json:\"can_send_messages\"`\n\tCanSendPolls        bool `json:\"can_send_polls\"`\n\tCanSendOther        bool `json:\"can_send_other_messages\"`\n\tCanAddPreviews      bool `json:\"can_add_web_page_previews\"`\n\tCanManageVideoChats bool `json:\"can_manage_video_chats\"`\n\tCanManageChat       bool `json:\"can_manage_chat\"`\n\tCanManageTopics     bool `json:\"can_manage_topics\"`\n\n\tCanSendMedia      bool `json:\"can_send_media_messages,omitempty\"` // deprecated\n\tCanSendAudios     bool `json:\"can_send_audios\"`\n\tCanSendDocuments  bool `json:\"can_send_documents\"`\n\tCanSendPhotos     bool `json:\"can_send_photos\"`\n\tCanSendVideos     bool `json:\"can_send_videos\"`\n\tCanSendVideoNotes bool `json:\"can_send_video_notes\"`\n\tCanSendVoiceNotes bool `json:\"can_send_voice_notes\"`\n\n\tCanPostStories   bool `json:\"can_post_stories\"`\n\tCanEditStories   bool `json:\"can_edit_stories\"`\n\tCanDeleteStories bool `json:\"can_delete_stories\"`\n\n\t// Independent defines whether the chat permissions are set independently.\n\t// If not, the can_send_other_messages and can_add_web_page_previews permissions\n\t// will imply the can_send_messages, can_send_audios, can_send_documents, can_send_photos,\n\t// can_send_videos, can_send_video_notes, and can_send_voice_notes permissions;\n\t// the can_send_polls permission will imply the can_send_messages permission.\n\t//\n\t// Works for Restrict and SetGroupPermissions methods only.\n\tIndependent bool `json:\"-\"`\n}\n\n// NoRights is the default Rights{}.\nfunc NoRights() Rights { return Rights{} }\n\n// NoRestrictions should be used when un-restricting or\n// un-promoting user.\n//\n//\tmember.Rights = tele.NoRestrictions()\n//\tb.Restrict(chat, member)\nfunc NoRestrictions() Rights {\n\treturn Rights{\n\t\tCanBeEdited:         true,\n\t\tCanChangeInfo:       false,\n\t\tCanPostMessages:     false,\n\t\tCanEditMessages:     false,\n\t\tCanDeleteMessages:   false,\n\t\tCanInviteUsers:      false,\n\t\tCanRestrictMembers:  false,\n\t\tCanPinMessages:      false,\n\t\tCanPromoteMembers:   false,\n\t\tCanSendMessages:     true,\n\t\tCanSendPolls:        true,\n\t\tCanSendOther:        true,\n\t\tCanAddPreviews:      true,\n\t\tCanManageVideoChats: false,\n\t\tCanManageChat:       false,\n\t\tCanManageTopics:     false,\n\t\tCanSendAudios:       true,\n\t\tCanSendDocuments:    true,\n\t\tCanSendPhotos:       true,\n\t\tCanSendVideos:       true,\n\t\tCanSendVideoNotes:   true,\n\t\tCanSendVoiceNotes:   true,\n\t}\n}\n\n// AdminRights could be used to promote user to admin.\nfunc AdminRights() Rights {\n\treturn Rights{\n\t\tCanBeEdited:         true,\n\t\tCanChangeInfo:       true,\n\t\tCanPostMessages:     true,\n\t\tCanEditMessages:     true,\n\t\tCanDeleteMessages:   true,\n\t\tCanInviteUsers:      true,\n\t\tCanRestrictMembers:  true,\n\t\tCanPinMessages:      true,\n\t\tCanPromoteMembers:   true,\n\t\tCanSendMessages:     true,\n\t\tCanSendPolls:        true,\n\t\tCanSendOther:        true,\n\t\tCanAddPreviews:      true,\n\t\tCanManageVideoChats: true,\n\t\tCanManageChat:       true,\n\t\tCanManageTopics:     true,\n\t\tCanSendAudios:       true,\n\t\tCanSendDocuments:    true,\n\t\tCanSendPhotos:       true,\n\t\tCanSendVideos:       true,\n\t\tCanSendVideoNotes:   true,\n\t\tCanSendVoiceNotes:   true,\n\t\tCanPostStories:      true,\n\t\tCanEditStories:      true,\n\t\tCanDeleteStories:    true,\n\t}\n}\n\n// Forever is a ExpireUnixtime of \"forever\" banning.\nfunc Forever() int64 {\n\treturn time.Now().Add(367 * 24 * time.Hour).Unix()\n}\n\n// Ban will ban user from chat until `member.RestrictedUntil`.\nfunc (b *Bot) Ban(chat *Chat, member *ChatMember, revokeMessages ...bool) error {\n\tparams := map[string]string{\n\t\t\"chat_id\":    chat.Recipient(),\n\t\t\"user_id\":    member.User.Recipient(),\n\t\t\"until_date\": strconv.FormatInt(member.RestrictedUntil, 10),\n\t}\n\tif len(revokeMessages) > 0 {\n\t\tparams[\"revoke_messages\"] = strconv.FormatBool(revokeMessages[0])\n\t}\n\n\t_, err := b.Raw(\"kickChatMember\", params)\n\treturn err\n}\n\n// Unban will unban user from chat, who would have thought eh?\n// forBanned does nothing if the user is not banned.\nfunc (b *Bot) Unban(chat *Chat, user *User, forBanned ...bool) error {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t\t\"user_id\": user.Recipient(),\n\t}\n\n\tif len(forBanned) > 0 {\n\t\tparams[\"only_if_banned\"] = strconv.FormatBool(forBanned[0])\n\t}\n\n\t_, err := b.Raw(\"unbanChatMember\", params)\n\treturn err\n}\n\n// Restrict lets you restrict a subset of member's rights until\n// member.RestrictedUntil, such as:\n//\n//   - can send messages\n//   - can send media\n//   - can send other\n//   - can add web page previews\nfunc (b *Bot) Restrict(chat *Chat, member *ChatMember) error {\n\tperms, until := member.Rights, member.RestrictedUntil\n\n\tparams := map[string]interface{}{\n\t\t\"chat_id\":     chat.Recipient(),\n\t\t\"user_id\":     member.User.Recipient(),\n\t\t\"until_date\":  strconv.FormatInt(until, 10),\n\t\t\"permissions\": perms,\n\t}\n\tif perms.Independent {\n\t\tparams[\"use_independent_chat_permissions\"] = true\n\t}\n\n\t_, err := b.Raw(\"restrictChatMember\", params)\n\treturn err\n}\n\n// Promote lets you update member's admin rights, such as:\n//\n//   - can change info\n//   - can post messages\n//   - can edit messages\n//   - can delete messages\n//   - can invite users\n//   - can restrict members\n//   - can pin messages\n//   - can promote members\nfunc (b *Bot) Promote(chat *Chat, member *ChatMember) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\":      chat.Recipient(),\n\t\t\"user_id\":      member.User.Recipient(),\n\t\t\"is_anonymous\": member.Anonymous,\n\t}\n\tembedRights(params, member.Rights)\n\n\t_, err := b.Raw(\"promoteChatMember\", params)\n\treturn err\n}\n\n// AdminsOf returns a member list of chat admins.\n//\n// On success, returns an Array of ChatMember objects that\n// contains information about all chat administrators except other bots.\n//\n// If the chat is a group or a supergroup and\n// no administrators were appointed, only the creator will be returned.\nfunc (b *Bot) AdminsOf(chat *Chat) ([]ChatMember, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\tdata, err := b.Raw(\"getChatAdministrators\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult []ChatMember\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// Len returns the number of members in a chat.\nfunc (b *Bot) Len(chat *Chat) (int, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\tdata, err := b.Raw(\"getChatMembersCount\", params)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tvar resp struct {\n\t\tResult int\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn 0, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// SetAdminTitle sets a custom title for an administrator.\n// A title should be 0-16 characters length, emoji are not allowed.\nfunc (b *Bot) SetAdminTitle(chat *Chat, user *User, title string) error {\n\tparams := map[string]string{\n\t\t\"chat_id\":      chat.Recipient(),\n\t\t\"user_id\":      user.Recipient(),\n\t\t\"custom_title\": title,\n\t}\n\n\t_, err := b.Raw(\"setChatAdministratorCustomTitle\", params)\n\treturn err\n}\n\n// BanSenderChat will use this method to ban a channel chat in a supergroup or a channel.\n// Until the chat is unbanned, the owner of the banned chat won't be able\n// to send messages on behalf of any of their channels.\nfunc (b *Bot) BanSenderChat(chat *Chat, sender Recipient) error {\n\tparams := map[string]string{\n\t\t\"chat_id\":        chat.Recipient(),\n\t\t\"sender_chat_id\": sender.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"banChatSenderChat\", params)\n\treturn err\n}\n\n// UnbanSenderChat will use this method to unban a previously banned channel chat in a supergroup or channel.\n// The bot must be an administrator for this to work and must have the appropriate administrator rights.\nfunc (b *Bot) UnbanSenderChat(chat *Chat, sender Recipient) error {\n\tparams := map[string]string{\n\t\t\"chat_id\":        chat.Recipient(),\n\t\t\"sender_chat_id\": sender.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"unbanChatSenderChat\", params)\n\treturn err\n}\n\n// DefaultRights returns the current default administrator rights of the bot.\nfunc (b *Bot) DefaultRights(forChannels bool) (*Rights, error) {\n\tparams := map[string]bool{\n\t\t\"for_channels\": forChannels,\n\t}\n\n\tdata, err := b.Raw(\"getMyDefaultAdministratorRights\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *Rights\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// SetDefaultRights changes the default administrator rights requested by the bot\n// when it's added as an administrator to groups or channels.\nfunc (b *Bot) SetDefaultRights(rights Rights, forChannels bool) error {\n\tparams := map[string]interface{}{\n\t\t\"rights\":       rights,\n\t\t\"for_channels\": forChannels,\n\t}\n\n\t_, err := b.Raw(\"setMyDefaultAdministratorRights\", params)\n\treturn err\n}\n\nfunc embedRights(p map[string]interface{}, rights Rights) {\n\tdata, _ := json.Marshal(rights)\n\t_ = json.Unmarshal(data, &p)\n}\n"
        },
        {
          "name": "admin_test.go",
          "type": "blob",
          "size": 1.341796875,
          "content": "package telebot\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestEmbedRights(t *testing.T) {\n\trights := NoRestrictions()\n\tparams := map[string]interface{}{\n\t\t\"chat_id\": \"1\",\n\t\t\"user_id\": \"2\",\n\t}\n\tembedRights(params, rights)\n\n\texpected := map[string]interface{}{\n\t\t\"is_anonymous\":              false,\n\t\t\"chat_id\":                   \"1\",\n\t\t\"user_id\":                   \"2\",\n\t\t\"can_be_edited\":             true,\n\t\t\"can_send_messages\":         true,\n\t\t\"can_send_polls\":            true,\n\t\t\"can_send_other_messages\":   true,\n\t\t\"can_add_web_page_previews\": true,\n\t\t\"can_change_info\":           false,\n\t\t\"can_post_messages\":         false,\n\t\t\"can_edit_messages\":         false,\n\t\t\"can_delete_messages\":       false,\n\t\t\"can_invite_users\":          false,\n\t\t\"can_restrict_members\":      false,\n\t\t\"can_pin_messages\":          false,\n\t\t\"can_promote_members\":       false,\n\t\t\"can_manage_video_chats\":    false,\n\t\t\"can_manage_chat\":           false,\n\t\t\"can_manage_topics\":         false,\n\t\t\"can_send_audios\":           true,\n\t\t\"can_send_documents\":        true,\n\t\t\"can_send_photos\":           true,\n\t\t\"can_send_videos\":           true,\n\t\t\"can_send_video_notes\":      true,\n\t\t\"can_send_voice_notes\":      true,\n\t\t\"can_post_stories\":          false,\n\t\t\"can_edit_stories\":          false,\n\t\t\"can_delete_stories\":        false,\n\t}\n\tassert.Equal(t, expected, params)\n}\n"
        },
        {
          "name": "api.go",
          "type": "blob",
          "size": 5.8291015625,
          "content": "package telebot\n\nimport \"io\"\n\n// API is the interface that wraps all basic methods for interacting\n// with Telegram Bot API.\ntype API interface {\n\tRaw(method string, payload interface{}) ([]byte, error)\n\n\tAccept(query *PreCheckoutQuery, errorMessage ...string) error\n\tAddStickerToSet(of Recipient, name string, sticker InputSticker) error\n\tAdminsOf(chat *Chat) ([]ChatMember, error)\n\tAnswer(query *Query, resp *QueryResponse) error\n\tAnswerWebApp(query *Query, r Result) (*WebAppMessage, error)\n\tApproveJoinRequest(chat Recipient, user *User) error\n\tBan(chat *Chat, member *ChatMember, revokeMessages ...bool) error\n\tBanSenderChat(chat *Chat, sender Recipient) error\n\tBusinessConnection(id string) (*BusinessConnection, error)\n\tChatByID(id int64) (*Chat, error)\n\tChatByUsername(name string) (*Chat, error)\n\tChatMemberOf(chat, user Recipient) (*ChatMember, error)\n\tClose() (bool, error)\n\tCloseGeneralTopic(chat *Chat) error\n\tCloseTopic(chat *Chat, topic *Topic) error\n\tCommands(opts ...interface{}) ([]Command, error)\n\tCopy(to Recipient, msg Editable, opts ...interface{}) (*Message, error)\n\tCopyMany(to Recipient, msgs []Editable, opts ...*SendOptions) ([]Message, error)\n\tCreateInviteLink(chat Recipient, link *ChatInviteLink) (*ChatInviteLink, error)\n\tCreateInvoiceLink(i Invoice) (string, error)\n\tCreateStickerSet(of Recipient, set *StickerSet) error\n\tCreateTopic(chat *Chat, topic *Topic) (*Topic, error)\n\tCustomEmojiStickers(ids []string) ([]Sticker, error)\n\tDeclineJoinRequest(chat Recipient, user *User) error\n\tDefaultRights(forChannels bool) (*Rights, error)\n\tDelete(msg Editable) error\n\tDeleteCommands(opts ...interface{}) error\n\tDeleteGroupPhoto(chat *Chat) error\n\tDeleteGroupStickerSet(chat *Chat) error\n\tDeleteMany(msgs []Editable) error\n\tDeleteSticker(sticker string) error\n\tDeleteStickerSet(name string) error\n\tDeleteTopic(chat *Chat, topic *Topic) error\n\tDownload(file *File, localFilename string) error\n\tEdit(msg Editable, what interface{}, opts ...interface{}) (*Message, error)\n\tEditCaption(msg Editable, caption string, opts ...interface{}) (*Message, error)\n\tEditGeneralTopic(chat *Chat, topic *Topic) error\n\tEditInviteLink(chat Recipient, link *ChatInviteLink) (*ChatInviteLink, error)\n\tEditMedia(msg Editable, media Inputtable, opts ...interface{}) (*Message, error)\n\tEditReplyMarkup(msg Editable, markup *ReplyMarkup) (*Message, error)\n\tEditTopic(chat *Chat, topic *Topic) error\n\tFile(file *File) (io.ReadCloser, error)\n\tFileByID(fileID string) (File, error)\n\tForward(to Recipient, msg Editable, opts ...interface{}) (*Message, error)\n\tForwardMany(to Recipient, msgs []Editable, opts ...*SendOptions) ([]Message, error)\n\tGameScores(user Recipient, msg Editable) ([]GameHighScore, error)\n\tHideGeneralTopic(chat *Chat) error\n\tInviteLink(chat *Chat) (string, error)\n\tLeave(chat Recipient) error\n\tLen(chat *Chat) (int, error)\n\tLogout() (bool, error)\n\tMenuButton(chat *User) (*MenuButton, error)\n\tMyDescription(language string) (*BotInfo, error)\n\tMyName(language string) (*BotInfo, error)\n\tMyShortDescription(language string) (*BotInfo, error)\n\tNotify(to Recipient, action ChatAction, threadID ...int) error\n\tPin(msg Editable, opts ...interface{}) error\n\tProfilePhotosOf(user *User) ([]Photo, error)\n\tPromote(chat *Chat, member *ChatMember) error\n\tReact(to Recipient, msg Editable, r Reactions) error\n\tRefundStars(to Recipient, chargeID string) error\n\tRemoveWebhook(dropPending ...bool) error\n\tReopenGeneralTopic(chat *Chat) error\n\tReopenTopic(chat *Chat, topic *Topic) error\n\tReplaceStickerInSet(of Recipient, stickerSet, oldSticker string, sticker InputSticker) (bool, error)\n\tReply(to *Message, what interface{}, opts ...interface{}) (*Message, error)\n\tRespond(c *Callback, resp ...*CallbackResponse) error\n\tRestrict(chat *Chat, member *ChatMember) error\n\tRevokeInviteLink(chat Recipient, link string) (*ChatInviteLink, error)\n\tSend(to Recipient, what interface{}, opts ...interface{}) (*Message, error)\n\tSendAlbum(to Recipient, a Album, opts ...interface{}) ([]Message, error)\n\tSendPaid(to Recipient, stars int, a PaidAlbum, opts ...interface{}) (*Message, error)\n\tSetAdminTitle(chat *Chat, user *User, title string) error\n\tSetCommands(opts ...interface{}) error\n\tSetCustomEmojiStickerSetThumb(name, id string) error\n\tSetDefaultRights(rights Rights, forChannels bool) error\n\tSetGameScore(user Recipient, msg Editable, score GameHighScore) (*Message, error)\n\tSetGroupDescription(chat *Chat, description string) error\n\tSetGroupPermissions(chat *Chat, perms Rights) error\n\tSetGroupStickerSet(chat *Chat, setName string) error\n\tSetGroupTitle(chat *Chat, title string) error\n\tSetMenuButton(chat *User, mb interface{}) error\n\tSetMyDescription(desc, language string) error\n\tSetMyName(name, language string) error\n\tSetMyShortDescription(desc, language string) error\n\tSetStickerEmojis(sticker string, emojis []string) error\n\tSetStickerKeywords(sticker string, keywords []string) error\n\tSetStickerMaskPosition(sticker string, mask MaskPosition) error\n\tSetStickerPosition(sticker string, position int) error\n\tSetStickerSetThumb(of Recipient, set *StickerSet) error\n\tSetStickerSetTitle(s StickerSet) error\n\tSetWebhook(w *Webhook) error\n\tShip(query *ShippingQuery, what ...interface{}) error\n\tStarTransactions(offset, limit int) ([]StarTransaction, error)\n\tStickerSet(name string) (*StickerSet, error)\n\tStopLiveLocation(msg Editable, opts ...interface{}) (*Message, error)\n\tStopPoll(msg Editable, opts ...interface{}) (*Poll, error)\n\tTopicIconStickers() ([]Sticker, error)\n\tUnban(chat *Chat, user *User, forBanned ...bool) error\n\tUnbanSenderChat(chat *Chat, sender Recipient) error\n\tUnhideGeneralTopic(chat *Chat) error\n\tUnpin(chat Recipient, messageID ...int) error\n\tUnpinAll(chat Recipient) error\n\tUnpinAllGeneralTopicMessages(chat *Chat) error\n\tUnpinAllTopicMessages(chat *Chat, topic *Topic) error\n\tUploadSticker(to Recipient, format StickerSetFormat, f File) (*File, error)\n\tUserBoosts(chat, user Recipient) ([]Boost, error)\n\tWebhook() (*Webhook, error)\n}\n"
        },
        {
          "name": "boost.go",
          "type": "blob",
          "size": 3.0205078125,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"time\"\n)\n\n// Boost contains information about a chat boost.\ntype Boost struct {\n\t// Unique identifier of the boost.\n\tID string `json:\"boost_id\"`\n\n\t// Point in time (Unix timestamp) when the chat was boosted.\n\tAddUnixtime int64 `json:\"add_date\"`\n\n\t// Point in time (Unix timestamp) when the boost will automatically expire,\n\t// unless the booster's Telegram Premium subscription is prolonged.\n\tExpirationUnixtime int64 `json:\"expiration_date\"`\n\n\t// Source of the added boost.\n\tSource *BoostSource `json:\"source\"`\n}\n\n// AddDate returns the moment of time when the chat has been boosted in local time.\nfunc (c *Boost) AddDate() time.Time {\n\treturn time.Unix(c.AddUnixtime, 0)\n}\n\n// ExpirationDate returns the moment of time when the boost of the channel\n// will expire in local time.\nfunc (c *Boost) ExpirationDate() time.Time {\n\treturn time.Unix(c.ExpirationUnixtime, 0)\n}\n\n// BoostSourceType describes a type of boost.\ntype BoostSourceType = string\n\nconst (\n\tBoostPremium  BoostSourceType = \"premium\"\n\tBoostGiftCode BoostSourceType = \"gift_code\"\n\tBoostGiveaway BoostSourceType = \"giveaway\"\n)\n\n// BoostSource describes the source of a chat boost.\ntype BoostSource struct {\n\t// Source of the boost, always (“premium”, “gift_code”, “giveaway”).\n\tSource BoostSourceType `json:\"source\"`\n\n\t// User that boosted the chat.\n\tBooster *User `json:\"user\"`\n\n\t// Identifier of a message in the chat with the giveaway; the message\n\t// could have been deleted already. May be 0 if the message isn't sent yet.\n\tGiveawayMessageID int `json:\"giveaway_message_id,omitempty\"`\n\n\t// (Optional) True, if the giveaway was completed, but there was\n\t// no user to win the prize.\n\tUnclaimed bool `json:\"is_unclaimed,omitempty\"`\n}\n\n// BoostAdded represents a service message about a user boosting a chat.\ntype BoostAdded struct {\n\t// Number of boosts added by the user.\n\tCount int `json:\"boost_count\"`\n}\n\n// BoostUpdated represents a boost added to a chat or changed.\ntype BoostUpdated struct {\n\t// Chat which was boosted.\n\tChat *Chat `json:\"chat\"`\n\n\t// Information about the chat boost.\n\tBoost *Boost `json:\"boost\"`\n}\n\n// BoostRemoved represents a boost removed from a chat.\ntype BoostRemoved struct {\n\t// Chat which was boosted.\n\tChat *Chat `json:\"chat\"`\n\n\t// Unique identifier of the boost.\n\tBoostID string `json:\"boost_id\"`\n\n\t// Point in time (Unix timestamp) when the boost was removed.\n\tRemoveUnixtime int64 `json:\"remove_date\"`\n\n\t// Source of the removed boost.\n\tSource *BoostSource `json:\"source\"`\n}\n\n// UserBoosts gets the list of boosts added to a chat by a user.\n// Requires administrator rights in the chat.\nfunc (b *Bot) UserBoosts(chat, user Recipient) ([]Boost, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t\t\"user_id\": user.Recipient(),\n\t}\n\n\tdata, err := b.Raw(\"getUserChatBoosts\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult struct {\n\t\t\tBoosts []Boost `json:\"boosts\"`\n\t\t}\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result.Boosts, nil\n}\n"
        },
        {
          "name": "bot.go",
          "type": "blob",
          "size": 32.75390625,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\n// NewBot does try to build a Bot with token `token`, which\n// is a secret API key assigned to particular bot.\nfunc NewBot(pref Settings) (*Bot, error) {\n\tif pref.Updates == 0 {\n\t\tpref.Updates = 100\n\t}\n\n\tclient := pref.Client\n\tif client == nil {\n\t\tclient = &http.Client{Timeout: time.Minute}\n\t}\n\n\tif pref.URL == \"\" {\n\t\tpref.URL = DefaultApiURL\n\t}\n\tif pref.Poller == nil {\n\t\tpref.Poller = &LongPoller{}\n\t}\n\tif pref.OnError == nil {\n\t\tpref.OnError = defaultOnError\n\t}\n\n\tbot := &Bot{\n\t\tToken:   pref.Token,\n\t\tURL:     pref.URL,\n\t\tPoller:  pref.Poller,\n\t\tonError: pref.OnError,\n\n\t\tUpdates:  make(chan Update, pref.Updates),\n\t\thandlers: make(map[string]HandlerFunc),\n\t\tstop:     make(chan chan struct{}),\n\n\t\tsynchronous: pref.Synchronous,\n\t\tverbose:     pref.Verbose,\n\t\tparseMode:   pref.ParseMode,\n\t\tclient:      client,\n\t}\n\n\tif pref.Offline {\n\t\tbot.Me = &User{}\n\t} else {\n\t\tuser, err := bot.getMe()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tbot.Me = user\n\t}\n\n\tbot.group = bot.Group()\n\treturn bot, nil\n}\n\n// Bot represents a separate Telegram bot instance.\ntype Bot struct {\n\tMe      *User\n\tToken   string\n\tURL     string\n\tUpdates chan Update\n\tPoller  Poller\n\tonError func(error, Context)\n\n\tgroup       *Group\n\thandlers    map[string]HandlerFunc\n\tsynchronous bool\n\tverbose     bool\n\tparseMode   ParseMode\n\tstop        chan chan struct{}\n\tclient      *http.Client\n\n\tstopMu     sync.RWMutex\n\tstopClient chan struct{}\n}\n\n// Settings represents a utility struct for passing certain\n// properties of a bot around and is required to make bots.\ntype Settings struct {\n\tURL   string\n\tToken string\n\n\t// Updates channel capacity, defaulted to 100.\n\tUpdates int\n\n\t// Poller is the provider of Updates.\n\tPoller Poller\n\n\t// Synchronous prevents handlers from running in parallel.\n\t// It makes ProcessUpdate return after the handler is finished.\n\tSynchronous bool\n\n\t// Verbose forces bot to log all upcoming requests.\n\t// Use for debugging purposes only.\n\tVerbose bool\n\n\t// ParseMode used to set default parse mode of all sent messages.\n\t// It attaches to every send, edit or whatever method. You also\n\t// will be able to override the default mode by passing a new one.\n\tParseMode ParseMode\n\n\t// OnError is a callback function that will get called on errors\n\t// resulted from the handler. It is used as post-middleware function.\n\t// Notice that context can be nil.\n\tOnError func(error, Context)\n\n\t// HTTP Client used to make requests to telegram api\n\tClient *http.Client\n\n\t// Offline allows to create a bot without network for testing purposes.\n\tOffline bool\n}\n\nvar defaultOnError = func(err error, c Context) {\n\tif c != nil {\n\t\tlog.Println(c.Update().ID, err)\n\t} else {\n\t\tlog.Println(err)\n\t}\n}\n\nfunc (b *Bot) OnError(err error, c Context) {\n\tb.onError(err, c)\n}\n\nfunc (b *Bot) debug(err error) {\n\tif b.verbose {\n\t\tb.OnError(err, nil)\n\t}\n}\n\n// Group returns a new group.\nfunc (b *Bot) Group() *Group {\n\treturn &Group{b: b}\n}\n\n// Use adds middleware to the global bot chain.\nfunc (b *Bot) Use(middleware ...MiddlewareFunc) {\n\tb.group.Use(middleware...)\n}\n\nvar (\n\tcmdRx   = regexp.MustCompile(`^(/\\w+)(@(\\w+))?(\\s|$)(.+)?`)\n\tcbackRx = regexp.MustCompile(`^\\f([-\\w]+)(\\|(.+))?$`)\n)\n\n// Handle lets you set the handler for some command name or\n// one of the supported endpoints. It also applies middleware\n// if such passed to the function.\n//\n// Example:\n//\n//\tb.Handle(\"/start\", func (c tele.Context) error {\n//\t\treturn c.Reply(\"Hello!\")\n//\t})\n//\n//\tb.Handle(&inlineButton, func (c tele.Context) error {\n//\t\treturn c.Respond(&tele.CallbackResponse{Text: \"Hello!\"})\n//\t})\n//\n// Middleware usage:\n//\n//\tb.Handle(\"/ban\", onBan, middleware.Whitelist(ids...))\nfunc (b *Bot) Handle(endpoint interface{}, h HandlerFunc, m ...MiddlewareFunc) {\n\tend := extractEndpoint(endpoint)\n\tif end == \"\" {\n\t\tpanic(\"telebot: unsupported endpoint\")\n\t}\n\n\tif len(b.group.middleware) > 0 {\n\t\tm = appendMiddleware(b.group.middleware, m)\n\t}\n\n\tb.handlers[end] = func(c Context) error {\n\t\treturn applyMiddleware(h, m...)(c)\n\t}\n}\n\n// Trigger executes the registered handler by the endpoint.\nfunc (b *Bot) Trigger(endpoint interface{}, c Context) error {\n\tend := extractEndpoint(endpoint)\n\tif end == \"\" {\n\t\treturn fmt.Errorf(\"telebot: unsupported endpoint\")\n\t}\n\n\thandler, ok := b.handlers[end]\n\tif !ok {\n\t\treturn fmt.Errorf(\"telebot: no handler found for given endpoint\")\n\t}\n\n\treturn handler(c)\n}\n\n// Start brings bot into motion by consuming incoming\n// updates (see Bot.Updates channel).\nfunc (b *Bot) Start() {\n\tif b.Poller == nil {\n\t\tpanic(\"telebot: can't start without a poller\")\n\t}\n\n\t// do nothing if called twice\n\tb.stopMu.Lock()\n\tif b.stopClient != nil {\n\t\tb.stopMu.Unlock()\n\t\treturn\n\t}\n\n\tb.stopClient = make(chan struct{})\n\tb.stopMu.Unlock()\n\n\tstop := make(chan struct{})\n\tstopConfirm := make(chan struct{})\n\n\tgo func() {\n\t\tb.Poller.Poll(b, b.Updates, stop)\n\t\tclose(stopConfirm)\n\t}()\n\n\tfor {\n\t\tselect {\n\t\t// handle incoming updates\n\t\tcase upd := <-b.Updates:\n\t\t\tb.ProcessUpdate(upd)\n\t\t\t// call to stop polling\n\t\tcase confirm := <-b.stop:\n\t\t\tclose(stop)\n\t\t\t<-stopConfirm\n\t\t\tclose(confirm)\n\t\t\treturn\n\t\t}\n\t}\n}\n\n// Stop gracefully shuts the poller down.\nfunc (b *Bot) Stop() {\n\tb.stopMu.Lock()\n\tif b.stopClient != nil {\n\t\tclose(b.stopClient)\n\t\tb.stopClient = nil\n\t}\n\tb.stopMu.Unlock()\n\n\tconfirm := make(chan struct{})\n\tb.stop <- confirm\n\t<-confirm\n}\n\n// NewMarkup simply returns newly created markup instance.\nfunc (b *Bot) NewMarkup() *ReplyMarkup {\n\treturn &ReplyMarkup{}\n}\n\n// NewContext returns a new native context object,\n// field by the passed update.\nfunc (b *Bot) NewContext(u Update) Context {\n\treturn NewContext(b, u)\n}\n\n// Send accepts 2+ arguments, starting with destination chat, followed by\n// some Sendable (or string!) and optional send options.\n//\n// NOTE:\n//\n//\tSince most arguments are of type interface{}, but have pointer\n//\tmethod receivers, make sure to pass them by-pointer, NOT by-value.\n//\n// What is a send option exactly? It can be one of the following types:\n//\n//   - *SendOptions (the actual object accepted by Telegram API)\n//   - *ReplyMarkup (a component of SendOptions)\n//   - Option (a shortcut flag for popular options)\n//   - ParseMode (HTML, Markdown, etc)\nfunc (b *Bot) Send(to Recipient, what interface{}, opts ...interface{}) (*Message, error) {\n\tif to == nil {\n\t\treturn nil, ErrBadRecipient\n\t}\n\n\tsendOpts := b.extractOptions(opts)\n\n\tswitch object := what.(type) {\n\tcase string:\n\t\treturn b.sendText(to, object, sendOpts)\n\tcase Sendable:\n\t\treturn object.Send(b, to, sendOpts)\n\tdefault:\n\t\treturn nil, ErrUnsupportedWhat\n\t}\n}\n\n// SendPaid sends multiple instances of paid media as a single message.\n// To include the caption, make sure the first PaidInputtable of an album has it.\nfunc (b *Bot) SendPaid(to Recipient, stars int, a PaidAlbum, opts ...interface{}) (*Message, error) {\n\tif to == nil {\n\t\treturn nil, ErrBadRecipient\n\t}\n\n\tparams := map[string]string{\n\t\t\"chat_id\":    to.Recipient(),\n\t\t\"star_count\": strconv.Itoa(stars),\n\t}\n\tsendOpts := b.extractOptions(opts)\n\n\tmedia := make([]string, len(a))\n\tfiles := make(map[string]File)\n\n\tfor i, x := range a {\n\t\trepr := x.MediaFile().process(strconv.Itoa(i), files)\n\t\tif repr == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"telebot: paid media entry #%d does not exist\", i)\n\t\t}\n\n\t\tim := x.InputMedia()\n\t\tim.Media = repr\n\n\t\tif i == 0 {\n\t\t\tparams[\"caption\"] = im.Caption\n\t\t\tif im.CaptionAbove {\n\t\t\t\tparams[\"show_caption_above_media\"] = \"true\"\n\t\t\t}\n\t\t}\n\n\t\tdata, _ := json.Marshal(im)\n\t\tmedia[i] = string(data)\n\t}\n\n\tparams[\"media\"] = \"[\" + strings.Join(media, \",\") + \"]\"\n\tb.embedSendOptions(params, sendOpts)\n\n\tdata, err := b.sendFiles(\"sendPaidMedia\", files, params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// SendAlbum sends multiple instances of media as a single message.\n// To include the caption, make sure the first Inputtable of an album has it.\n// From all existing options, it only supports tele.Silent.\nfunc (b *Bot) SendAlbum(to Recipient, a Album, opts ...interface{}) ([]Message, error) {\n\tif to == nil {\n\t\treturn nil, ErrBadRecipient\n\t}\n\n\tsendOpts := b.extractOptions(opts)\n\tmedia := make([]string, len(a))\n\tfiles := make(map[string]File)\n\n\tfor i, x := range a {\n\t\trepr := x.MediaFile().process(strconv.Itoa(i), files)\n\t\tif repr == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"telebot: album entry #%d does not exist\", i)\n\t\t}\n\n\t\tim := x.InputMedia()\n\t\tim.Media = repr\n\n\t\tif len(sendOpts.Entities) > 0 {\n\t\t\tim.Entities = sendOpts.Entities\n\t\t} else {\n\t\t\tim.ParseMode = sendOpts.ParseMode\n\t\t}\n\n\t\tdata, _ := json.Marshal(im)\n\t\tmedia[i] = string(data)\n\t}\n\n\tparams := map[string]string{\n\t\t\"chat_id\": to.Recipient(),\n\t\t\"media\":   \"[\" + strings.Join(media, \",\") + \"]\",\n\t}\n\tb.embedSendOptions(params, sendOpts)\n\n\tdata, err := b.sendFiles(\"sendMediaGroup\", files, params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult []Message\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\n\tfor attachName := range files {\n\t\ti, _ := strconv.Atoi(attachName)\n\t\tr := resp.Result[i]\n\n\t\tvar newID string\n\t\tswitch {\n\t\tcase r.Photo != nil:\n\t\t\tnewID = r.Photo.FileID\n\t\tcase r.Video != nil:\n\t\t\tnewID = r.Video.FileID\n\t\tcase r.Audio != nil:\n\t\t\tnewID = r.Audio.FileID\n\t\tcase r.Document != nil:\n\t\t\tnewID = r.Document.FileID\n\t\t}\n\n\t\ta[i].MediaFile().FileID = newID\n\t}\n\n\treturn resp.Result, nil\n}\n\n// Reply behaves just like Send() with an exception of \"reply-to\" indicator.\n// This function will panic upon nil Message.\nfunc (b *Bot) Reply(to *Message, what interface{}, opts ...interface{}) (*Message, error) {\n\tsendOpts := b.extractOptions(opts)\n\tif sendOpts == nil {\n\t\tsendOpts = &SendOptions{}\n\t}\n\n\tsendOpts.ReplyTo = to\n\treturn b.Send(to.Chat, what, sendOpts)\n}\n\n// Forward behaves just like Send() but of all options it only supports Silent (see Bots API).\n// This function will panic upon nil Editable.\nfunc (b *Bot) Forward(to Recipient, msg Editable, opts ...interface{}) (*Message, error) {\n\tif to == nil {\n\t\treturn nil, ErrBadRecipient\n\t}\n\tmsgID, chatID := msg.MessageSig()\n\n\tparams := map[string]string{\n\t\t\"chat_id\":      to.Recipient(),\n\t\t\"from_chat_id\": strconv.FormatInt(chatID, 10),\n\t\t\"message_id\":   msgID,\n\t}\n\n\tsendOpts := b.extractOptions(opts)\n\tb.embedSendOptions(params, sendOpts)\n\n\tdata, err := b.Raw(\"forwardMessage\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// ForwardMany method forwards multiple messages of any kind.\n// If some of the specified messages can't be found or forwarded, they are skipped.\n// Service messages and messages with protected content can't be forwarded.\n// Album grouping is kept for forwarded messages.\nfunc (b *Bot) ForwardMany(to Recipient, msgs []Editable, opts ...*SendOptions) ([]Message, error) {\n\tif to == nil {\n\t\treturn nil, ErrBadRecipient\n\t}\n\treturn b.forwardCopyMany(to, msgs, \"forwardMessages\", opts...)\n}\n\n// Copy behaves just like Forward() but the copied message doesn't have a link to the original message (see Bots API).\n//\n// This function will panic upon nil Editable.\nfunc (b *Bot) Copy(to Recipient, msg Editable, opts ...interface{}) (*Message, error) {\n\tif to == nil {\n\t\treturn nil, ErrBadRecipient\n\t}\n\tmsgID, chatID := msg.MessageSig()\n\n\tparams := map[string]string{\n\t\t\"chat_id\":      to.Recipient(),\n\t\t\"from_chat_id\": strconv.FormatInt(chatID, 10),\n\t\t\"message_id\":   msgID,\n\t}\n\n\tsendOpts := b.extractOptions(opts)\n\tb.embedSendOptions(params, sendOpts)\n\n\tdata, err := b.Raw(\"copyMessage\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// CopyMany this method makes a copy of messages of any kind.\n// If some of the specified messages can't be found or copied, they are skipped.\n// Service messages, giveaway messages, giveaway winners messages, and\n// invoice messages can't be copied. A quiz poll can be copied only if the value of the field\n// correct_option_id is known to the bot. The method is analogous\n// to the method forwardMessages, but the copied messages don't have a link to the original message.\n// Album grouping is kept for copied messages.\nfunc (b *Bot) CopyMany(to Recipient, msgs []Editable, opts ...*SendOptions) ([]Message, error) {\n\tif to == nil {\n\t\treturn nil, ErrBadRecipient\n\t}\n\treturn b.forwardCopyMany(to, msgs, \"copyMessages\", opts...)\n}\n\n// Edit is magic, it lets you change already sent message.\n// This function will panic upon nil Editable.\n//\n// If edited message is sent by the bot, returns it,\n// otherwise returns nil and ErrTrueResult.\n//\n// Use cases:\n//\n//\tb.Edit(m, m.Text, newMarkup)\n//\tb.Edit(m, \"new <b>text</b>\", tele.ModeHTML)\n//\tb.Edit(m, &tele.ReplyMarkup{...})\n//\tb.Edit(m, &tele.Photo{File: ...})\n//\tb.Edit(m, tele.Location{42.1337, 69.4242})\n//\tb.Edit(c, \"edit inline message from the callback\")\n//\tb.Edit(r, \"edit message from chosen inline result\")\nfunc (b *Bot) Edit(msg Editable, what interface{}, opts ...interface{}) (*Message, error) {\n\tvar (\n\t\tmethod string\n\t\tparams = make(map[string]string)\n\t)\n\n\tswitch v := what.(type) {\n\tcase *ReplyMarkup:\n\t\treturn b.EditReplyMarkup(msg, v)\n\tcase Inputtable:\n\t\treturn b.EditMedia(msg, v, opts...)\n\tcase string:\n\t\tmethod = \"editMessageText\"\n\t\tparams[\"text\"] = v\n\tcase Location:\n\t\tmethod = \"editMessageLiveLocation\"\n\t\tparams[\"latitude\"] = fmt.Sprintf(\"%f\", v.Lat)\n\t\tparams[\"longitude\"] = fmt.Sprintf(\"%f\", v.Lng)\n\n\t\tif v.HorizontalAccuracy != nil {\n\t\t\tparams[\"horizontal_accuracy\"] = fmt.Sprintf(\"%f\", *v.HorizontalAccuracy)\n\t\t}\n\t\tif v.Heading != 0 {\n\t\t\tparams[\"heading\"] = strconv.Itoa(v.Heading)\n\t\t}\n\t\tif v.AlertRadius != 0 {\n\t\t\tparams[\"proximity_alert_radius\"] = strconv.Itoa(v.AlertRadius)\n\t\t}\n\t\tif v.LivePeriod != 0 {\n\t\t\tparams[\"live_period\"] = strconv.Itoa(v.LivePeriod)\n\t\t}\n\tdefault:\n\t\treturn nil, ErrUnsupportedWhat\n\t}\n\n\tmsgID, chatID := msg.MessageSig()\n\n\tif chatID == 0 { // if inline message\n\t\tparams[\"inline_message_id\"] = msgID\n\t} else {\n\t\tparams[\"chat_id\"] = strconv.FormatInt(chatID, 10)\n\t\tparams[\"message_id\"] = msgID\n\t}\n\n\tsendOpts := b.extractOptions(opts)\n\tb.embedSendOptions(params, sendOpts)\n\n\tdata, err := b.Raw(method, params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// EditReplyMarkup edits reply markup of already sent message.\n// This function will panic upon nil Editable.\n// Pass nil or empty ReplyMarkup to delete it from the message.\n//\n// If edited message is sent by the bot, returns it,\n// otherwise returns nil and ErrTrueResult.\nfunc (b *Bot) EditReplyMarkup(msg Editable, markup *ReplyMarkup) (*Message, error) {\n\tmsgID, chatID := msg.MessageSig()\n\tparams := make(map[string]string)\n\n\tif chatID == 0 { // if inline message\n\t\tparams[\"inline_message_id\"] = msgID\n\t} else {\n\t\tparams[\"chat_id\"] = strconv.FormatInt(chatID, 10)\n\t\tparams[\"message_id\"] = msgID\n\t}\n\n\tif markup == nil {\n\t\t// will delete reply markup\n\t\tmarkup = &ReplyMarkup{}\n\t}\n\n\tprocessButtons(markup.InlineKeyboard)\n\tdata, _ := json.Marshal(markup)\n\tparams[\"reply_markup\"] = string(data)\n\n\tdata, err := b.Raw(\"editMessageReplyMarkup\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// EditCaption edits already sent photo caption with known recipient and message id.\n// This function will panic upon nil Editable.\n//\n// If edited message is sent by the bot, returns it,\n// otherwise returns nil and ErrTrueResult.\nfunc (b *Bot) EditCaption(msg Editable, caption string, opts ...interface{}) (*Message, error) {\n\tmsgID, chatID := msg.MessageSig()\n\n\tparams := map[string]string{\n\t\t\"caption\": caption,\n\t}\n\n\tif chatID == 0 { // if inline message\n\t\tparams[\"inline_message_id\"] = msgID\n\t} else {\n\t\tparams[\"chat_id\"] = strconv.FormatInt(chatID, 10)\n\t\tparams[\"message_id\"] = msgID\n\t}\n\n\tsendOpts := b.extractOptions(opts)\n\tb.embedSendOptions(params, sendOpts)\n\n\tdata, err := b.Raw(\"editMessageCaption\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// EditMedia edits already sent media with known recipient and message id.\n// This function will panic upon nil Editable.\n//\n// If edited message is sent by the bot, returns it,\n// otherwise returns nil and ErrTrueResult.\n//\n// Use cases:\n//\n//\tb.EditMedia(m, &tele.Photo{File: tele.FromDisk(\"chicken.jpg\")})\n//\tb.EditMedia(m, &tele.Video{File: tele.FromURL(\"http://video.mp4\")})\nfunc (b *Bot) EditMedia(msg Editable, media Inputtable, opts ...interface{}) (*Message, error) {\n\tvar (\n\t\trepr  string\n\t\tfile  = media.MediaFile()\n\t\tfiles = make(map[string]File)\n\n\t\tthumb     *Photo\n\t\tthumbName = \"thumb\"\n\t)\n\n\tswitch {\n\tcase file.InCloud():\n\t\trepr = file.FileID\n\tcase file.FileURL != \"\":\n\t\trepr = file.FileURL\n\tcase file.OnDisk() || file.FileReader != nil:\n\t\ts := file.FileLocal\n\t\tif file.FileReader != nil {\n\t\t\ts = \"0\"\n\t\t} else if s == thumbName {\n\t\t\tthumbName = \"thumb2\"\n\t\t}\n\n\t\trepr = \"attach://\" + s\n\t\tfiles[s] = *file\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"telebot: cannot edit media, it does not exist\")\n\t}\n\n\tswitch m := media.(type) {\n\tcase *Video:\n\t\tthumb = m.Thumbnail\n\tcase *Audio:\n\t\tthumb = m.Thumbnail\n\tcase *Document:\n\t\tthumb = m.Thumbnail\n\tcase *Animation:\n\t\tthumb = m.Thumbnail\n\t}\n\n\tmsgID, chatID := msg.MessageSig()\n\tparams := make(map[string]string)\n\n\tsendOpts := b.extractOptions(opts)\n\tb.embedSendOptions(params, sendOpts)\n\n\tim := media.InputMedia()\n\tim.Media = repr\n\n\tif len(sendOpts.Entities) > 0 {\n\t\tim.Entities = sendOpts.Entities\n\t} else {\n\t\tim.ParseMode = sendOpts.ParseMode\n\t}\n\n\tif thumb != nil {\n\t\tim.Thumbnail = \"attach://\" + thumbName\n\t\tfiles[thumbName] = *thumb.MediaFile()\n\t}\n\n\tdata, _ := json.Marshal(im)\n\tparams[\"media\"] = string(data)\n\n\tif chatID == 0 { // if inline message\n\t\tparams[\"inline_message_id\"] = msgID\n\t} else {\n\t\tparams[\"chat_id\"] = strconv.FormatInt(chatID, 10)\n\t\tparams[\"message_id\"] = msgID\n\t}\n\n\tdata, err := b.sendFiles(\"editMessageMedia\", files, params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// Delete removes the message, including service messages.\n// This function will panic upon nil Editable.\n//\n//   - A message can only be deleted if it was sent less than 48 hours ago.\n//   - A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.\n//   - Bots can delete outgoing messages in private chats, groups, and supergroups.\n//   - Bots can delete incoming messages in private chats.\n//   - Bots granted can_post_messages permissions can delete outgoing messages in channels.\n//   - If the bot is an administrator of a group, it can delete any message there.\n//   - If the bot has can_delete_messages permission in a supergroup or a\n//     channel, it can delete any message there.\nfunc (b *Bot) Delete(msg Editable) error {\n\tmsgID, chatID := msg.MessageSig()\n\n\tparams := map[string]string{\n\t\t\"chat_id\":    strconv.FormatInt(chatID, 10),\n\t\t\"message_id\": msgID,\n\t}\n\n\t_, err := b.Raw(\"deleteMessage\", params)\n\treturn err\n}\n\n// DeleteMany deletes multiple messages simultaneously.\n// If some of the specified messages can't be found, they are skipped.\nfunc (b *Bot) DeleteMany(msgs []Editable) error {\n\tparams := make(map[string]string)\n\tembedMessages(params, msgs)\n\n\t_, err := b.Raw(\"deleteMessages\", params)\n\treturn err\n}\n\n// Notify updates the chat action for recipient.\n//\n// Chat action is a status message that recipient would see where\n// you typically see \"Harry is typing\" status message. The only\n// difference is that bots' chat actions live only for 5 seconds\n// and die just once the client receives a message from the bot.\n//\n// Currently, Telegram supports only a narrow range of possible\n// actions, these are aligned as constants of this package.\nfunc (b *Bot) Notify(to Recipient, action ChatAction, threadID ...int) error {\n\tif to == nil {\n\t\treturn ErrBadRecipient\n\t}\n\n\tparams := map[string]string{\n\t\t\"chat_id\": to.Recipient(),\n\t\t\"action\":  string(action),\n\t}\n\n\tif len(threadID) > 0 {\n\t\tparams[\"message_thread_id\"] = strconv.Itoa(threadID[0])\n\t}\n\n\t_, err := b.Raw(\"sendChatAction\", params)\n\treturn err\n}\n\n// Ship replies to the shipping query, if you sent an invoice\n// requesting an address and the parameter is_flexible was specified.\n//\n// Example:\n//\n//\tb.Ship(query)          // OK\n//\tb.Ship(query, opts...) // OK with options\n//\tb.Ship(query, \"Oops!\") // Error message\nfunc (b *Bot) Ship(query *ShippingQuery, what ...interface{}) error {\n\tparams := map[string]string{\n\t\t\"shipping_query_id\": query.ID,\n\t}\n\n\tif len(what) == 0 {\n\t\tparams[\"ok\"] = \"true\"\n\t} else if s, ok := what[0].(string); ok {\n\t\tparams[\"ok\"] = \"false\"\n\t\tparams[\"error_message\"] = s\n\t} else {\n\t\tvar opts []ShippingOption\n\t\tfor _, v := range what {\n\t\t\topt, ok := v.(ShippingOption)\n\t\t\tif !ok {\n\t\t\t\treturn ErrUnsupportedWhat\n\t\t\t}\n\t\t\topts = append(opts, opt)\n\t\t}\n\n\t\tparams[\"ok\"] = \"true\"\n\t\tdata, _ := json.Marshal(opts)\n\t\tparams[\"shipping_options\"] = string(data)\n\t}\n\n\t_, err := b.Raw(\"answerShippingQuery\", params)\n\treturn err\n}\n\n// Accept finalizes the deal.\nfunc (b *Bot) Accept(query *PreCheckoutQuery, errorMessage ...string) error {\n\tparams := map[string]string{\n\t\t\"pre_checkout_query_id\": query.ID,\n\t}\n\n\tif len(errorMessage) == 0 {\n\t\tparams[\"ok\"] = \"true\"\n\t} else {\n\t\tparams[\"ok\"] = \"False\"\n\t\tparams[\"error_message\"] = errorMessage[0]\n\t}\n\n\t_, err := b.Raw(\"answerPreCheckoutQuery\", params)\n\treturn err\n}\n\n// Respond sends a response for a given callback query. A callback can\n// only be responded to once, subsequent attempts to respond to the same callback\n// will result in an error.\n//\n// Example:\n//\n//\tb.Respond(c)\n//\tb.Respond(c, response)\nfunc (b *Bot) Respond(c *Callback, resp ...*CallbackResponse) error {\n\tvar r *CallbackResponse\n\tif resp == nil {\n\t\tr = &CallbackResponse{}\n\t} else {\n\t\tr = resp[0]\n\t}\n\n\tr.CallbackID = c.ID\n\t_, err := b.Raw(\"answerCallbackQuery\", r)\n\treturn err\n}\n\n// Answer sends a response for a given inline query. A query can only\n// be responded to once, subsequent attempts to respond to the same query\n// will result in an error.\nfunc (b *Bot) Answer(query *Query, resp *QueryResponse) error {\n\tresp.QueryID = query.ID\n\n\tfor _, result := range resp.Results {\n\t\tresult.Process(b)\n\t}\n\n\t_, err := b.Raw(\"answerInlineQuery\", resp)\n\treturn err\n}\n\n// AnswerWebApp sends a response for a query from Web App and returns\n// information about an inline message sent by a Web App on behalf of a user\nfunc (b *Bot) AnswerWebApp(query *Query, r Result) (*WebAppMessage, error) {\n\tr.Process(b)\n\n\tparams := map[string]interface{}{\n\t\t\"web_app_query_id\": query.ID,\n\t\t\"result\":           r,\n\t}\n\n\tdata, err := b.Raw(\"answerWebAppQuery\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *WebAppMessage\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\n\treturn resp.Result, err\n}\n\n// FileByID returns full file object including File.FilePath, allowing you to\n// download the file from the server.\n//\n// Usually, Telegram-provided File objects miss FilePath so you might need to\n// perform an additional request to fetch them.\nfunc (b *Bot) FileByID(fileID string) (File, error) {\n\tparams := map[string]string{\n\t\t\"file_id\": fileID,\n\t}\n\n\tdata, err := b.Raw(\"getFile\", params)\n\tif err != nil {\n\t\treturn File{}, err\n\t}\n\n\tvar resp struct {\n\t\tResult File\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn File{}, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// Download saves the file from Telegram servers locally.\n// Maximum file size to download is 20 MB.\nfunc (b *Bot) Download(file *File, localFilename string) error {\n\treader, err := b.File(file)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer reader.Close()\n\n\tout, err := os.Create(localFilename)\n\tif err != nil {\n\t\treturn wrapError(err)\n\t}\n\tdefer out.Close()\n\n\t_, err = io.Copy(out, reader)\n\tif err != nil {\n\t\treturn wrapError(err)\n\t}\n\n\tfile.FileLocal = localFilename\n\treturn nil\n}\n\n// File gets a file from Telegram servers.\nfunc (b *Bot) File(file *File) (io.ReadCloser, error) {\n\tf, err := b.FileByID(file.FileID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\turl := b.URL + \"/file/bot\" + b.Token + \"/\" + f.FilePath\n\tfile.FilePath = f.FilePath // saving file path\n\n\treq, err := http.NewRequest(http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\n\tresp, err := b.client.Do(req)\n\tif err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tresp.Body.Close()\n\t\treturn nil, fmt.Errorf(\"telebot: expected status 200 but got %s\", resp.Status)\n\t}\n\n\treturn resp.Body, nil\n}\n\n// StopLiveLocation stops broadcasting live message location\n// before Location.LivePeriod expires.\n//\n// It supports ReplyMarkup.\n// This function will panic upon nil Editable.\n//\n// If the message is sent by the bot, returns it,\n// otherwise returns nil and ErrTrueResult.\nfunc (b *Bot) StopLiveLocation(msg Editable, opts ...interface{}) (*Message, error) {\n\tmsgID, chatID := msg.MessageSig()\n\n\tparams := map[string]string{\n\t\t\"chat_id\":    strconv.FormatInt(chatID, 10),\n\t\t\"message_id\": msgID,\n\t}\n\n\tsendOpts := b.extractOptions(opts)\n\tb.embedSendOptions(params, sendOpts)\n\n\tdata, err := b.Raw(\"stopMessageLiveLocation\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// StopPoll stops a poll which was sent by the bot and returns\n// the stopped Poll object with the final results.\n//\n// It supports ReplyMarkup.\n// This function will panic upon nil Editable.\nfunc (b *Bot) StopPoll(msg Editable, opts ...interface{}) (*Poll, error) {\n\tmsgID, chatID := msg.MessageSig()\n\n\tparams := map[string]string{\n\t\t\"chat_id\":    strconv.FormatInt(chatID, 10),\n\t\t\"message_id\": msgID,\n\t}\n\n\tsendOpts := b.extractOptions(opts)\n\tb.embedSendOptions(params, sendOpts)\n\n\tdata, err := b.Raw(\"stopPoll\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *Poll\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// Leave makes bot leave a group, supergroup or channel.\nfunc (b *Bot) Leave(chat Recipient) error {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"leaveChat\", params)\n\treturn err\n}\n\n// Pin pins a message in a supergroup or a channel.\n//\n// It supports Silent option.\n// This function will panic upon nil Editable.\nfunc (b *Bot) Pin(msg Editable, opts ...interface{}) error {\n\tmsgID, chatID := msg.MessageSig()\n\n\tparams := map[string]string{\n\t\t\"chat_id\":    strconv.FormatInt(chatID, 10),\n\t\t\"message_id\": msgID,\n\t}\n\n\tsendOpts := b.extractOptions(opts)\n\tb.embedSendOptions(params, sendOpts)\n\n\t_, err := b.Raw(\"pinChatMessage\", params)\n\treturn err\n}\n\n// Unpin unpins a message in a supergroup or a channel.\n// It supports tb.Silent option.\nfunc (b *Bot) Unpin(chat Recipient, messageID ...int) error {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\tif len(messageID) > 0 {\n\t\tparams[\"message_id\"] = strconv.Itoa(messageID[0])\n\t}\n\n\t_, err := b.Raw(\"unpinChatMessage\", params)\n\treturn err\n}\n\n// UnpinAll unpins all messages in a supergroup or a channel.\n// It supports tb.Silent option.\nfunc (b *Bot) UnpinAll(chat Recipient) error {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"unpinAllChatMessages\", params)\n\treturn err\n}\n\n// ChatByID fetches chat info of its ID.\n//\n// Including current name of the user for one-on-one conversations,\n// current username of a user, group or channel, etc.\nfunc (b *Bot) ChatByID(id int64) (*Chat, error) {\n\treturn b.ChatByUsername(strconv.FormatInt(id, 10))\n}\n\n// ChatByUsername fetches chat info by its username.\nfunc (b *Bot) ChatByUsername(name string) (*Chat, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": name,\n\t}\n\n\tdata, err := b.Raw(\"getChat\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *Chat\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\tif resp.Result.Type == ChatChannel && resp.Result.Username == \"\" {\n\t\tresp.Result.Type = ChatChannelPrivate\n\t}\n\treturn resp.Result, nil\n}\n\n// ProfilePhotosOf returns list of profile pictures for a user.\nfunc (b *Bot) ProfilePhotosOf(user *User) ([]Photo, error) {\n\tparams := map[string]string{\n\t\t\"user_id\": user.Recipient(),\n\t}\n\n\tdata, err := b.Raw(\"getUserProfilePhotos\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult struct {\n\t\t\tCount  int     `json:\"total_count\"`\n\t\t\tPhotos []Photo `json:\"photos\"`\n\t\t}\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result.Photos, nil\n}\n\n// ChatMemberOf returns information about a member of a chat.\nfunc (b *Bot) ChatMemberOf(chat, user Recipient) (*ChatMember, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t\t\"user_id\": user.Recipient(),\n\t}\n\n\tdata, err := b.Raw(\"getChatMember\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *ChatMember\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// MenuButton returns the current value of the bot's menu button in a private chat,\n// or the default menu button.\nfunc (b *Bot) MenuButton(chat *User) (*MenuButton, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\tdata, err := b.Raw(\"getChatMenuButton\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *MenuButton\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// SetMenuButton changes the bot's menu button in a private chat,\n// or the default menu button.\n//\n// It accepts two kinds of menu button arguments:\n//\n//   - MenuButtonType for simple menu buttons (default, commands)\n//   - MenuButton complete structure for web_app menu button type\nfunc (b *Bot) SetMenuButton(chat *User, mb interface{}) error {\n\tparams := map[string]interface{}{}\n\n\t// chat_id is optional\n\tif chat != nil {\n\t\tparams[\"chat_id\"] = chat.Recipient()\n\t}\n\n\tswitch v := mb.(type) {\n\tcase MenuButtonType:\n\t\tparams[\"menu_button\"] = MenuButton{Type: v}\n\tcase *MenuButton:\n\t\tparams[\"menu_button\"] = v\n\t}\n\n\t_, err := b.Raw(\"setChatMenuButton\", params)\n\treturn err\n}\n\n// Logout logs out from the cloud Bot API server before launching the bot locally.\nfunc (b *Bot) Logout() (bool, error) {\n\tdata, err := b.Raw(\"logOut\", nil)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\tvar resp struct {\n\t\tResult bool `json:\"result\"`\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn false, wrapError(err)\n\t}\n\n\treturn resp.Result, nil\n}\n\n// Close closes the bot instance before moving it from one local server to another.\nfunc (b *Bot) Close() (bool, error) {\n\tdata, err := b.Raw(\"close\", nil)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\tvar resp struct {\n\t\tResult bool `json:\"result\"`\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn false, wrapError(err)\n\t}\n\n\treturn resp.Result, nil\n}\n\n// BotInfo represents a single object of BotName, BotDescription, BotShortDescription instances.\ntype BotInfo struct {\n\tName             string `json:\"name,omitempty\"`\n\tDescription      string `json:\"description,omitempty\"`\n\tShortDescription string `json:\"short_description,omitempty\"`\n}\n\n// SetMyName change's the bot name.\nfunc (b *Bot) SetMyName(name, language string) error {\n\tparams := map[string]string{\n\t\t\"name\":          name,\n\t\t\"language_code\": language,\n\t}\n\n\t_, err := b.Raw(\"setMyName\", params)\n\treturn err\n}\n\n// MyName returns the current bot name for the given user language.\nfunc (b *Bot) MyName(language string) (*BotInfo, error) {\n\treturn b.botInfo(language, \"getMyName\")\n}\n\n// SetMyDescription change's the bot description, which is shown in the chat\n// with the bot if the chat is empty.\nfunc (b *Bot) SetMyDescription(desc, language string) error {\n\tparams := map[string]string{\n\t\t\"description\":   desc,\n\t\t\"language_code\": language,\n\t}\n\n\t_, err := b.Raw(\"setMyDescription\", params)\n\treturn err\n}\n\n// MyDescription the current bot description for the given user language.\nfunc (b *Bot) MyDescription(language string) (*BotInfo, error) {\n\treturn b.botInfo(language, \"getMyDescription\")\n}\n\n// SetMyShortDescription change's the bot short description, which is shown on\n// the bot's profile page and is sent together with the link when users share the bot.\nfunc (b *Bot) SetMyShortDescription(desc, language string) error {\n\tparams := map[string]string{\n\t\t\"short_description\": desc,\n\t\t\"language_code\":     language,\n\t}\n\n\t_, err := b.Raw(\"setMyShortDescription\", params)\n\treturn err\n}\n\n// MyShortDescription the current bot short description for the given user language.\nfunc (b *Bot) MyShortDescription(language string) (*BotInfo, error) {\n\treturn b.botInfo(language, \"getMyShortDescription\")\n}\n\nfunc (b *Bot) StarTransactions(offset, limit int) ([]StarTransaction, error) {\n\tparams := map[string]int{\n\t\t\"offset\": offset,\n\t\t\"limit\":  limit,\n\t}\n\n\tdata, err := b.Raw(\"getStarTransactions\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult struct {\n\t\t\tTransactions []StarTransaction `json:\"transactions\"`\n\t\t}\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result.Transactions, nil\n}\n\nfunc (b *Bot) botInfo(language, key string) (*BotInfo, error) {\n\tparams := map[string]string{\n\t\t\"language_code\": language,\n\t}\n\n\tdata, err := b.Raw(key, params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *BotInfo\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\nfunc extractEndpoint(endpoint interface{}) string {\n\tswitch end := endpoint.(type) {\n\tcase string:\n\t\treturn end\n\tcase CallbackEndpoint:\n\t\treturn end.CallbackUnique()\n\t}\n\treturn \"\"\n}\n"
        },
        {
          "name": "bot_raw.go",
          "type": "blob",
          "size": 8.1875,
          "content": "package telebot\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\n// Raw lets you call any method of Bot API manually.\n// It also handles API errors, so you only need to unwrap\n// result field from json data.\nfunc (b *Bot) Raw(method string, payload interface{}) ([]byte, error) {\n\turl := b.URL + \"/bot\" + b.Token + \"/\" + method\n\n\tvar buf bytes.Buffer\n\tif err := json.NewEncoder(&buf).Encode(payload); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Cancel the request immediately without waiting for the timeout\n\t// when bot is about to stop.\n\t// This may become important if doing long polling with long timeout.\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tgo func() {\n\t\tb.stopMu.RLock()\n\t\tstopCh := b.stopClient\n\t\tb.stopMu.RUnlock()\n\n\t\tselect {\n\t\tcase <-stopCh:\n\t\t\tcancel()\n\t\tcase <-ctx.Done():\n\t\t}\n\t}()\n\n\treq, err := http.NewRequestWithContext(ctx, http.MethodPost, url, &buf)\n\tif err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tresp, err := b.client.Do(req)\n\tif err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\tresp.Close = true\n\tdefer resp.Body.Close()\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\n\tif b.verbose {\n\t\tverbose(method, payload, data)\n\t}\n\n\t// returning data as well\n\treturn data, extractOk(data)\n}\n\nfunc (b *Bot) sendFiles(method string, files map[string]File, params map[string]string) ([]byte, error) {\n\trawFiles := make(map[string]interface{})\n\tfor name, f := range files {\n\t\tswitch {\n\t\tcase f.InCloud():\n\t\t\tparams[name] = f.FileID\n\t\tcase f.FileURL != \"\":\n\t\t\tparams[name] = f.FileURL\n\t\tcase f.OnDisk():\n\t\t\trawFiles[name] = f.FileLocal\n\t\tcase f.FileReader != nil:\n\t\t\trawFiles[name] = f.FileReader\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"telebot: file for field %s doesn't exist\", name)\n\t\t}\n\t}\n\n\tif len(rawFiles) == 0 {\n\t\treturn b.Raw(method, params)\n\t}\n\n\tpipeReader, pipeWriter := io.Pipe()\n\twriter := multipart.NewWriter(pipeWriter)\n\n\tgo func() {\n\t\tdefer pipeWriter.Close()\n\n\t\tfor field, file := range rawFiles {\n\t\t\tif err := addFileToWriter(writer, files[field].fileName, field, file); err != nil {\n\t\t\t\tpipeWriter.CloseWithError(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tfor field, value := range params {\n\t\t\tif err := writer.WriteField(field, value); err != nil {\n\t\t\t\tpipeWriter.CloseWithError(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tif err := writer.Close(); err != nil {\n\t\t\tpipeWriter.CloseWithError(err)\n\t\t\treturn\n\t\t}\n\t}()\n\n\turl := b.URL + \"/bot\" + b.Token + \"/\" + method\n\n\tresp, err := b.client.Post(url, writer.FormDataContentType(), pipeReader)\n\tif err != nil {\n\t\terr = wrapError(err)\n\t\tpipeReader.CloseWithError(err)\n\t\treturn nil, err\n\t}\n\tresp.Close = true\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode == http.StatusInternalServerError {\n\t\treturn nil, ErrInternal\n\t}\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\n\treturn data, extractOk(data)\n}\n\nfunc addFileToWriter(writer *multipart.Writer, filename, field string, file interface{}) error {\n\tvar reader io.Reader\n\tif r, ok := file.(io.Reader); ok {\n\t\treader = r\n\t} else if path, ok := file.(string); ok {\n\t\tf, err := os.Open(path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer f.Close()\n\t\treader = f\n\t} else {\n\t\treturn fmt.Errorf(\"telebot: file for field %v should be io.ReadCloser or string\", field)\n\t}\n\n\tpart, err := writer.CreateFormFile(field, filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t_, err = io.Copy(part, reader)\n\treturn err\n}\n\nfunc (f *File) process(name string, files map[string]File) string {\n\tswitch {\n\tcase f.InCloud():\n\t\treturn f.FileID\n\tcase f.FileURL != \"\":\n\t\treturn f.FileURL\n\tcase f.OnDisk() || f.FileReader != nil:\n\t\tfiles[name] = *f\n\t\treturn \"attach://\" + name\n\t}\n\treturn \"\"\n}\n\nfunc (b *Bot) sendText(to Recipient, text string, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": to.Recipient(),\n\t\t\"text\":    text,\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tdata, err := b.Raw(\"sendMessage\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\nfunc (b *Bot) sendMedia(media Media, params map[string]string, files map[string]File) (*Message, error) {\n\tkind := media.MediaType()\n\twhat := \"send\" + strings.Title(kind)\n\n\tif kind == \"videoNote\" {\n\t\tkind = \"video_note\"\n\t}\n\n\tsendFiles := map[string]File{kind: *media.MediaFile()}\n\tfor k, v := range files {\n\t\tsendFiles[k] = v\n\t}\n\n\tdata, err := b.sendFiles(what, sendFiles, params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\nfunc (b *Bot) getMe() (*User, error) {\n\tdata, err := b.Raw(\"getMe\", nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *User\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\nfunc (b *Bot) getUpdates(offset, limit int, timeout time.Duration, allowed []string) ([]Update, error) {\n\tparams := map[string]string{\n\t\t\"offset\":  strconv.Itoa(offset),\n\t\t\"timeout\": strconv.Itoa(int(timeout / time.Second)),\n\t}\n\n\tdata, _ := json.Marshal(allowed)\n\tparams[\"allowed_updates\"] = string(data)\n\n\tif limit != 0 {\n\t\tparams[\"limit\"] = strconv.Itoa(limit)\n\t}\n\n\tdata, err := b.Raw(\"getUpdates\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult []Update\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\nfunc (b *Bot) forwardCopyMany(to Recipient, msgs []Editable, key string, opts ...*SendOptions) ([]Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": to.Recipient(),\n\t}\n\n\tembedMessages(params, msgs)\n\n\tif len(opts) > 0 {\n\t\tb.embedSendOptions(params, opts[0])\n\t}\n\n\tdata, err := b.Raw(key, params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult []Message\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\tvar resp struct {\n\t\t\tResult bool\n\t\t}\n\t\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\t\treturn nil, wrapError(err)\n\t\t}\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// extractOk checks given result for error. If result is ok returns nil.\n// In other cases it extracts API error. If error is not presented\n// in errors.go, it will be prefixed with `unknown` keyword.\nfunc extractOk(data []byte) error {\n\tvar e struct {\n\t\tOk          bool                   `json:\"ok\"`\n\t\tCode        int                    `json:\"error_code\"`\n\t\tDescription string                 `json:\"description\"`\n\t\tParameters  map[string]interface{} `json:\"parameters\"`\n\t}\n\tif json.NewDecoder(bytes.NewReader(data)).Decode(&e) != nil {\n\t\treturn nil // FIXME\n\t}\n\tif e.Ok {\n\t\treturn nil\n\t}\n\n\terr := Err(e.Description)\n\tswitch err {\n\tcase nil:\n\tcase ErrGroupMigrated:\n\t\tmigratedTo, ok := e.Parameters[\"migrate_to_chat_id\"]\n\t\tif !ok {\n\t\t\treturn NewError(e.Code, e.Description)\n\t\t}\n\n\t\treturn GroupError{\n\t\t\terr:        err.(*Error),\n\t\t\tMigratedTo: int64(migratedTo.(float64)),\n\t\t}\n\tdefault:\n\t\treturn err\n\t}\n\n\tswitch e.Code {\n\tcase http.StatusTooManyRequests:\n\t\tretryAfter, ok := e.Parameters[\"retry_after\"]\n\t\tif !ok {\n\t\t\treturn NewError(e.Code, e.Description)\n\t\t}\n\n\t\terr = FloodError{\n\t\t\terr:        NewError(e.Code, e.Description),\n\t\t\tRetryAfter: int(retryAfter.(float64)),\n\t\t}\n\tdefault:\n\t\terr = fmt.Errorf(\"telegram: %s (%d)\", e.Description, e.Code)\n\t}\n\n\treturn err\n}\n\n// extractMessage extracts common Message result from given data.\n// Should be called after extractOk or b.Raw() to handle possible errors.\nfunc extractMessage(data []byte) (*Message, error) {\n\tvar resp struct {\n\t\tResult *Message\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\tvar resp struct {\n\t\t\tResult bool\n\t\t}\n\t\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\t\treturn nil, wrapError(err)\n\t\t}\n\t\tif resp.Result {\n\t\t\treturn nil, ErrTrueResult\n\t\t}\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\nfunc verbose(method string, payload interface{}, data []byte) {\n\tbody, _ := json.Marshal(payload)\n\tbody = bytes.ReplaceAll(body, []byte(`\\\"`), []byte(`\"`))\n\tbody = bytes.ReplaceAll(body, []byte(`\"{`), []byte(`{`))\n\tbody = bytes.ReplaceAll(body, []byte(`}\"`), []byte(`}`))\n\n\tindent := func(b []byte) string {\n\t\tvar buf bytes.Buffer\n\t\tjson.Indent(&buf, b, \"\", \"  \")\n\t\treturn buf.String()\n\t}\n\n\tlog.Printf(\n\t\t\"[verbose] telebot: sent request\\nMethod: %v\\nParams: %v\\nResponse: %v\",\n\t\tmethod, indent(body), indent(data),\n\t)\n}\n"
        },
        {
          "name": "bot_raw_test.go",
          "type": "blob",
          "size": 2.7529296875,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n// testPayload implements json.Marshaler\n// to test json encoding error behaviour.\ntype testPayload struct{}\n\nfunc (testPayload) MarshalJSON() ([]byte, error) {\n\treturn nil, errors.New(\"test error\")\n}\n\nfunc testRawServer(w http.ResponseWriter, r *http.Request) {\n\tswitch {\n\t// causes EOF error on ioutil.ReadAll\n\tcase strings.HasSuffix(r.URL.Path, \"/testReadError\"):\n\t\t// tells the body is 1 byte length but actually it's 0\n\t\tw.Header().Set(\"Content-Length\", \"1\")\n\n\t// returns unknown telegram error\n\tcase strings.HasSuffix(r.URL.Path, \"/testUnknownError\"):\n\t\tdata, _ := json.Marshal(struct {\n\t\t\tOk          bool   `json:\"ok\"`\n\t\t\tCode        int    `json:\"error_code\"`\n\t\t\tDescription string `json:\"description\"`\n\t\t}{\n\t\t\tOk:          false,\n\t\t\tCode:        400,\n\t\t\tDescription: \"unknown error\",\n\t\t})\n\n\t\tw.WriteHeader(400)\n\t\tw.Write(data)\n\t}\n}\n\nfunc TestRaw(t *testing.T) {\n\tif token == \"\" {\n\t\tt.Skip(\"TELEBOT_SECRET is required\")\n\t}\n\n\tb, err := newTestBot()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t_, err = b.Raw(\"BAD METHOD\", nil)\n\tassert.EqualError(t, err, ErrNotFound.Error())\n\n\t_, err = b.Raw(\"\", &testPayload{})\n\tassert.Error(t, err)\n\n\tsrv := httptest.NewServer(http.HandlerFunc(testRawServer))\n\tdefer srv.Close()\n\n\tb.URL = srv.URL\n\tb.client = srv.Client()\n\n\t_, err = b.Raw(\"testReadError\", nil)\n\tassert.EqualError(t, err, \"telebot: \"+io.ErrUnexpectedEOF.Error())\n\n\t_, err = b.Raw(\"testUnknownError\", nil)\n\tassert.EqualError(t, err, \"telegram: unknown error (400)\")\n}\n\nfunc TestExtractOk(t *testing.T) {\n\tdata := []byte(`{\"ok\": true, \"result\": {}}`)\n\trequire.NoError(t, extractOk(data))\n\n\tdata = []byte(`{\n\t\t\"ok\": false,\n\t\t\"error_code\": 400,\n\t\t\"description\": \"Bad Request: reply message not found\"\n\t}`)\n\tassert.EqualError(t, extractOk(data), ErrNotFoundToReply.Error())\n\n\tdata = []byte(`{\n\t\t\"ok\": false,\n\t\t\"error_code\": 429,\n\t\t\"description\": \"Too Many Requests: retry after 8\",\n\t\t\"parameters\": {\"retry_after\": 8}\n\t}`)\n\tassert.Equal(t, FloodError{\n\t\terr:        NewError(429, \"Too Many Requests: retry after 8\"),\n\t\tRetryAfter: 8,\n\t}, extractOk(data))\n\n\tdata = []byte(`{\n\t\t\"ok\": false,\n\t\t\"error_code\": 400,\n\t\t\"description\": \"Bad Request: group chat was upgraded to a supergroup chat\",\n\t\t\"parameters\": {\"migrate_to_chat_id\": -100123456789}\n\t}`)\n\tassert.Equal(t, GroupError{\n\t\terr:        ErrGroupMigrated,\n\t\tMigratedTo: -100123456789,\n\t}, extractOk(data))\n}\n\nfunc TestExtractMessage(t *testing.T) {\n\tdata := []byte(`{\"ok\":true,\"result\":true}`)\n\t_, err := extractMessage(data)\n\tassert.Equal(t, ErrTrueResult, err)\n\n\tdata = []byte(`{\"ok\":true,\"result\":{\"foo\":\"bar\"}}`)\n\t_, err = extractMessage(data)\n\trequire.NoError(t, err)\n}\n"
        },
        {
          "name": "bot_test.go",
          "type": "blob",
          "size": 21.048828125,
          "content": "package telebot\n\nimport (\n\t\"errors\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nvar (\n\t// required to test send and edit methods\n\ttoken = os.Getenv(\"TELEBOT_SECRET\")\n\tb, _  = newTestBot() // cached bot instance to avoid getMe method flooding\n\n\tchatID, _    = strconv.ParseInt(os.Getenv(\"CHAT_ID\"), 10, 64)\n\tuserID, _    = strconv.ParseInt(os.Getenv(\"USER_ID\"), 10, 64)\n\tchannelID, _ = strconv.ParseInt(os.Getenv(\"CHANNEL_ID\"), 10, 64)\n\n\tto      = &Chat{ID: chatID}    // to chat recipient for send and edit methods\n\tuser    = &User{ID: userID}    // to user recipient for some special cases\n\tchannel = &Chat{ID: channelID} // to channel recipient for some special cases\n\n\tlogo  = FromURL(\"https://telegra.ph/file/c95b8fe46dd3df15d12e5.png\")\n\tthumb = FromURL(\"https://telegra.ph/file/fe28e378784b3a4e367fb.png\")\n)\n\nfunc defaultSettings() Settings {\n\treturn Settings{Token: token}\n}\n\nfunc newTestBot() (*Bot, error) {\n\treturn NewBot(defaultSettings())\n}\n\nfunc TestNewBot(t *testing.T) {\n\tvar pref Settings\n\t_, err := NewBot(pref)\n\tassert.Error(t, err)\n\n\tpref.Token = \"BAD TOKEN\"\n\t_, err = NewBot(pref)\n\tassert.Error(t, err)\n\n\tpref.URL = \"BAD URL\"\n\t_, err = NewBot(pref)\n\tassert.Error(t, err)\n\n\tb, err := NewBot(Settings{Offline: true})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tassert.NotNil(t, b.Me)\n\tassert.Equal(t, DefaultApiURL, b.URL)\n\tassert.Equal(t, 100, cap(b.Updates))\n\tassert.NotZero(t, b.client.Timeout)\n\n\tpref = defaultSettings()\n\tclient := &http.Client{Timeout: time.Minute}\n\tpref.URL = \"http://api.telegram.org\" // not https\n\tpref.Client = client\n\tpref.Poller = &LongPoller{Timeout: time.Second}\n\tpref.Updates = 50\n\tpref.ParseMode = ModeHTML\n\tpref.Offline = true\n\n\tb, err = NewBot(pref)\n\trequire.NoError(t, err)\n\tassert.Equal(t, client, b.client)\n\tassert.Equal(t, pref.URL, b.URL)\n\tassert.Equal(t, pref.Poller, b.Poller)\n\tassert.Equal(t, 50, cap(b.Updates))\n\tassert.Equal(t, ModeHTML, b.parseMode)\n}\n\nfunc TestBotHandle(t *testing.T) {\n\tif b == nil {\n\t\tt.Skip(\"Cached bot instance is bad (probably wrong or empty TELEBOT_SECRET)\")\n\t}\n\n\tb.Handle(\"/start\", func(c Context) error { return nil })\n\tassert.Contains(t, b.handlers, \"/start\")\n\n\treply := ReplyButton{Text: \"reply\"}\n\tb.Handle(&reply, func(c Context) error { return nil })\n\n\tinline := InlineButton{Unique: \"inline\"}\n\tb.Handle(&inline, func(c Context) error { return nil })\n\n\tbtnReply := (&ReplyMarkup{}).Text(\"btnReply\")\n\tb.Handle(&btnReply, func(c Context) error { return nil })\n\n\tbtnInline := (&ReplyMarkup{}).Data(\"\", \"btnInline\")\n\tb.Handle(&btnInline, func(c Context) error { return nil })\n\n\tassert.Contains(t, b.handlers, btnReply.CallbackUnique())\n\tassert.Contains(t, b.handlers, btnInline.CallbackUnique())\n\tassert.Contains(t, b.handlers, reply.CallbackUnique())\n\tassert.Contains(t, b.handlers, inline.CallbackUnique())\n}\n\nfunc TestBotStart(t *testing.T) {\n\tif token == \"\" {\n\t\tt.Skip(\"TELEBOT_SECRET is required\")\n\t}\n\n\tpref := defaultSettings()\n\tpref.Poller = &LongPoller{}\n\n\tb, err := NewBot(pref)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// remove webhook to be sure that bot can poll\n\trequire.NoError(t, b.RemoveWebhook())\n\n\tgo b.Start()\n\tb.Stop()\n\n\ttp := newTestPoller()\n\tgo func() {\n\t\ttp.updates <- Update{Message: &Message{Text: \"/start\"}}\n\t}()\n\n\tb, err = NewBot(pref)\n\trequire.NoError(t, err)\n\tb.Poller = tp\n\n\tvar ok bool\n\tb.Handle(\"/start\", func(c Context) error {\n\t\tassert.Equal(t, c.Text(), \"/start\")\n\t\ttp.done <- struct{}{}\n\t\tok = true\n\t\treturn nil\n\t})\n\n\tgo b.Start()\n\t<-tp.done\n\tb.Stop()\n\n\tassert.True(t, ok)\n}\n\nfunc TestBotProcessUpdate(t *testing.T) {\n\tb, err := NewBot(Settings{Synchronous: true, Offline: true})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tb.Handle(OnMedia, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Photo)\n\t\treturn nil\n\t})\n\tb.ProcessUpdate(Update{Message: &Message{Photo: &Photo{}}})\n\n\tb.Handle(\"/start\", func(c Context) error {\n\t\tassert.Equal(t, \"/start\", c.Text())\n\t\treturn nil\n\t})\n\tb.Handle(\"hello\", func(c Context) error {\n\t\tassert.Equal(t, \"hello\", c.Text())\n\t\treturn nil\n\t})\n\tb.Handle(OnText, func(c Context) error {\n\t\tassert.Equal(t, \"text\", c.Text())\n\t\treturn nil\n\t})\n\tb.Handle(OnPinned, func(c Context) error {\n\t\tassert.NotNil(t, c.Message())\n\t\treturn nil\n\t})\n\tb.Handle(OnPhoto, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Photo)\n\t\treturn nil\n\t})\n\tb.Handle(OnVoice, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Voice)\n\t\treturn nil\n\t})\n\tb.Handle(OnAudio, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Audio)\n\t\treturn nil\n\t})\n\tb.Handle(OnAnimation, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Animation)\n\t\treturn nil\n\t})\n\tb.Handle(OnDocument, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Document)\n\t\treturn nil\n\t})\n\tb.Handle(OnSticker, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Sticker)\n\t\treturn nil\n\t})\n\tb.Handle(OnVideo, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Video)\n\t\treturn nil\n\t})\n\tb.Handle(OnVideoNote, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().VideoNote)\n\t\treturn nil\n\t})\n\tb.Handle(OnContact, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Contact)\n\t\treturn nil\n\t})\n\tb.Handle(OnLocation, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Location)\n\t\treturn nil\n\t})\n\tb.Handle(OnVenue, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Venue)\n\t\treturn nil\n\t})\n\tb.Handle(OnDice, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Dice)\n\t\treturn nil\n\t})\n\tb.Handle(OnInvoice, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Invoice)\n\t\treturn nil\n\t})\n\tb.Handle(OnPayment, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().Payment)\n\t\treturn nil\n\t})\n\tb.Handle(OnRefund, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().RefundedPayment)\n\t\treturn nil\n\t})\n\tb.Handle(OnAddedToGroup, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().GroupCreated)\n\t\treturn nil\n\t})\n\tb.Handle(OnUserJoined, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().UserJoined)\n\t\treturn nil\n\t})\n\tb.Handle(OnUserLeft, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().UserLeft)\n\t\treturn nil\n\t})\n\tb.Handle(OnNewGroupTitle, func(c Context) error {\n\t\tassert.Equal(t, \"title\", c.Message().NewGroupTitle)\n\t\treturn nil\n\t})\n\tb.Handle(OnNewGroupPhoto, func(c Context) error {\n\t\tassert.NotNil(t, c.Message().NewGroupPhoto)\n\t\treturn nil\n\t})\n\tb.Handle(OnGroupPhotoDeleted, func(c Context) error {\n\t\tassert.True(t, c.Message().GroupPhotoDeleted)\n\t\treturn nil\n\t})\n\tb.Handle(OnMigration, func(c Context) error {\n\t\tfrom, to := c.Migration()\n\t\tassert.Equal(t, int64(1), from)\n\t\tassert.Equal(t, int64(2), to)\n\t\treturn nil\n\t})\n\tb.Handle(OnEdited, func(c Context) error {\n\t\tassert.Equal(t, \"edited\", c.Message().Text)\n\t\treturn nil\n\t})\n\tb.Handle(OnChannelPost, func(c Context) error {\n\t\tassert.Equal(t, \"post\", c.Message().Text)\n\t\treturn nil\n\t})\n\tb.Handle(OnEditedChannelPost, func(c Context) error {\n\t\tassert.Equal(t, \"edited post\", c.Message().Text)\n\t\treturn nil\n\t})\n\tb.Handle(OnCallback, func(c Context) error {\n\t\tif data := c.Callback().Data; data[0] != '\\f' {\n\t\t\tassert.Equal(t, \"callback\", data)\n\t\t}\n\t\treturn nil\n\t})\n\tb.Handle(\"\\funique\", func(c Context) error {\n\t\tassert.Equal(t, \"callback\", c.Callback().Data)\n\t\treturn nil\n\t})\n\tb.Handle(OnQuery, func(c Context) error {\n\t\tassert.Equal(t, \"query\", c.Data())\n\t\treturn nil\n\t})\n\tb.Handle(OnInlineResult, func(c Context) error {\n\t\tassert.Equal(t, \"result\", c.InlineResult().ResultID)\n\t\treturn nil\n\t})\n\tb.Handle(OnShipping, func(c Context) error {\n\t\tassert.Equal(t, \"shipping\", c.ShippingQuery().ID)\n\t\treturn nil\n\t})\n\tb.Handle(OnCheckout, func(c Context) error {\n\t\tassert.Equal(t, \"checkout\", c.PreCheckoutQuery().ID)\n\t\treturn nil\n\t})\n\tb.Handle(OnPoll, func(c Context) error {\n\t\tassert.Equal(t, \"poll\", c.Poll().ID)\n\t\treturn nil\n\t})\n\tb.Handle(OnPollAnswer, func(c Context) error {\n\t\tassert.Equal(t, \"poll\", c.PollAnswer().PollID)\n\t\treturn nil\n\t})\n\n\tb.Handle(OnWebApp, func(c Context) error {\n\t\tassert.Equal(t, \"webapp\", c.Message().WebAppData.Data)\n\t\treturn nil\n\t})\n\n\tb.ProcessUpdate(Update{Message: &Message{Text: \"/start\"}})\n\tb.ProcessUpdate(Update{Message: &Message{Text: \"/start@other_bot\"}})\n\tb.ProcessUpdate(Update{Message: &Message{Text: \"hello\"}})\n\tb.ProcessUpdate(Update{Message: &Message{Text: \"text\"}})\n\tb.ProcessUpdate(Update{Message: &Message{PinnedMessage: &Message{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Photo: &Photo{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Voice: &Voice{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Audio: &Audio{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Animation: &Animation{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Document: &Document{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Sticker: &Sticker{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Video: &Video{}}})\n\tb.ProcessUpdate(Update{Message: &Message{VideoNote: &VideoNote{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Contact: &Contact{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Location: &Location{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Venue: &Venue{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Invoice: &Invoice{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Payment: &Payment{}}})\n\tb.ProcessUpdate(Update{Message: &Message{RefundedPayment: &RefundedPayment{}}})\n\tb.ProcessUpdate(Update{Message: &Message{Dice: &Dice{}}})\n\tb.ProcessUpdate(Update{Message: &Message{GroupCreated: true}})\n\tb.ProcessUpdate(Update{Message: &Message{UserJoined: &User{ID: 1}}})\n\tb.ProcessUpdate(Update{Message: &Message{UsersJoined: []User{{ID: 1}}}})\n\tb.ProcessUpdate(Update{Message: &Message{UserLeft: &User{}}})\n\tb.ProcessUpdate(Update{Message: &Message{NewGroupTitle: \"title\"}})\n\tb.ProcessUpdate(Update{Message: &Message{NewGroupPhoto: &Photo{}}})\n\tb.ProcessUpdate(Update{Message: &Message{GroupPhotoDeleted: true}})\n\tb.ProcessUpdate(Update{Message: &Message{Chat: &Chat{ID: 1}, MigrateTo: 2}})\n\tb.ProcessUpdate(Update{EditedMessage: &Message{Text: \"edited\"}})\n\tb.ProcessUpdate(Update{ChannelPost: &Message{Text: \"post\"}})\n\tb.ProcessUpdate(Update{ChannelPost: &Message{PinnedMessage: &Message{}}})\n\tb.ProcessUpdate(Update{EditedChannelPost: &Message{Text: \"edited post\"}})\n\tb.ProcessUpdate(Update{Callback: &Callback{MessageID: \"inline\", Data: \"callback\"}})\n\tb.ProcessUpdate(Update{Callback: &Callback{Data: \"callback\"}})\n\tb.ProcessUpdate(Update{Callback: &Callback{Data: \"\\funique|callback\"}})\n\tb.ProcessUpdate(Update{Query: &Query{Text: \"query\"}})\n\tb.ProcessUpdate(Update{InlineResult: &InlineResult{ResultID: \"result\"}})\n\tb.ProcessUpdate(Update{ShippingQuery: &ShippingQuery{ID: \"shipping\"}})\n\tb.ProcessUpdate(Update{PreCheckoutQuery: &PreCheckoutQuery{ID: \"checkout\"}})\n\tb.ProcessUpdate(Update{Poll: &Poll{ID: \"poll\"}})\n\tb.ProcessUpdate(Update{PollAnswer: &PollAnswer{PollID: \"poll\"}})\n\tb.ProcessUpdate(Update{Message: &Message{WebAppData: &WebAppData{Data: \"webapp\"}}})\n}\n\nfunc TestBotOnError(t *testing.T) {\n\tb, err := NewBot(Settings{Synchronous: true, Offline: true})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tvar ok bool\n\tb.onError = func(err error, c Context) {\n\t\tassert.Equal(t, b, c.(*nativeContext).b)\n\t\tassert.NotNil(t, err)\n\t\tok = true\n\t}\n\n\tb.runHandler(func(c Context) error {\n\t\treturn errors.New(\"not nil\")\n\t}, &nativeContext{b: b})\n\n\tassert.True(t, ok)\n}\n\nfunc TestBotMiddleware(t *testing.T) {\n\tt.Run(\"calling order\", func(t *testing.T) {\n\t\tvar trace []string\n\n\t\thandler := func(name string) HandlerFunc {\n\t\t\treturn func(c Context) error {\n\t\t\t\ttrace = append(trace, name)\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\n\t\tmiddleware := func(name string) MiddlewareFunc {\n\t\t\treturn func(next HandlerFunc) HandlerFunc {\n\t\t\t\treturn func(c Context) error {\n\t\t\t\t\ttrace = append(trace, name+\":in\")\n\t\t\t\t\terr := next(c)\n\t\t\t\t\ttrace = append(trace, name+\":out\")\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tb, err := NewBot(Settings{Synchronous: true, Offline: true})\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\tb.Use(middleware(\"global1\"), middleware(\"global2\"))\n\t\tb.Handle(\"/a\", handler(\"/a\"), middleware(\"handler1a\"), middleware(\"handler2a\"))\n\n\t\tgroup := b.Group()\n\t\tgroup.Use(middleware(\"group1\"), middleware(\"group2\"))\n\t\tgroup.Handle(\"/b\", handler(\"/b\"), middleware(\"handler1b\"))\n\n\t\tb.ProcessUpdate(Update{\n\t\t\tMessage: &Message{Text: \"/a\"},\n\t\t})\n\t\tassert.Equal(t, []string{\n\t\t\t\"global1:in\", \"global2:in\",\n\t\t\t\"handler1a:in\", \"handler2a:in\",\n\t\t\t\"/a\",\n\t\t\t\"handler2a:out\", \"handler1a:out\",\n\t\t\t\"global2:out\", \"global1:out\",\n\t\t}, trace)\n\n\t\ttrace = trace[:0]\n\n\t\tb.ProcessUpdate(Update{\n\t\t\tMessage: &Message{Text: \"/b\"},\n\t\t})\n\t\tassert.Equal(t, []string{\n\t\t\t\"global1:in\", \"global2:in\",\n\t\t\t\"group1:in\", \"group2:in\",\n\t\t\t\"handler1b:in\",\n\t\t\t\"/b\",\n\t\t\t\"handler1b:out\",\n\t\t\t\"group2:out\", \"group1:out\",\n\t\t\t\"global2:out\", \"global1:out\",\n\t\t}, trace)\n\t})\n\n\tfatal := func(next HandlerFunc) HandlerFunc {\n\t\treturn func(c Context) error {\n\t\t\tt.Fatal(\"fatal middleware should not be called\")\n\t\t\treturn nil\n\t\t}\n\t}\n\n\tnop := func(next HandlerFunc) HandlerFunc {\n\t\treturn func(c Context) error {\n\t\t\treturn next(c)\n\t\t}\n\t}\n\n\tt.Run(\"combining with global middleware\", func(t *testing.T) {\n\t\tb, err := NewBot(Settings{Synchronous: true, Offline: true})\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\t// Pre-allocate middleware slice to make sure\n\t\t// it has extra capacity after group-level middleware is added.\n\t\tb.group.middleware = make([]MiddlewareFunc, 0, 2)\n\t\tb.Use(nop)\n\n\t\tb.Handle(\"/a\", func(c Context) error { return nil }, nop)\n\t\tb.Handle(\"/b\", func(c Context) error { return nil }, fatal)\n\n\t\tb.ProcessUpdate(Update{Message: &Message{Text: \"/a\"}})\n\t})\n\n\tt.Run(\"combining with group middleware\", func(t *testing.T) {\n\t\tb, err := NewBot(Settings{Synchronous: true, Offline: true})\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\tg := b.Group()\n\t\t// Pre-allocate middleware slice to make sure\n\t\t// it has extra capacity after group-level middleware is added.\n\t\tg.middleware = make([]MiddlewareFunc, 0, 2)\n\t\tg.Use(nop)\n\n\t\tg.Handle(\"/a\", func(c Context) error { return nil }, nop)\n\t\tg.Handle(\"/b\", func(c Context) error { return nil }, fatal)\n\n\t\tb.ProcessUpdate(Update{Message: &Message{Text: \"/a\"}})\n\t})\n}\n\nfunc TestBot(t *testing.T) {\n\tif b == nil {\n\t\tt.Skip(\"Cached bot instance is bad (probably wrong or empty TELEBOT_SECRET)\")\n\t}\n\tif chatID == 0 {\n\t\tt.Skip(\"CHAT_ID is required for Bot methods test\")\n\t}\n\n\t_, err := b.Send(to, nil)\n\tassert.Equal(t, ErrUnsupportedWhat, err)\n\t_, err = b.Edit(&Message{Chat: &Chat{}}, nil)\n\tassert.Equal(t, ErrUnsupportedWhat, err)\n\n\t_, err = b.Send(nil, \"\")\n\tassert.Equal(t, ErrBadRecipient, err)\n\t_, err = b.Forward(nil, nil)\n\tassert.Equal(t, ErrBadRecipient, err)\n\n\tphoto := &Photo{\n\t\tFile:    logo,\n\t\tCaption: t.Name(),\n\t}\n\tvar msg *Message\n\n\tt.Run(\"Send(what=Sendable)\", func(t *testing.T) {\n\t\tmsg, err = b.Send(to, photo)\n\t\trequire.NoError(t, err)\n\t\tassert.NotNil(t, msg.Photo)\n\t\tassert.Equal(t, photo.Caption, msg.Caption)\n\t})\n\n\tt.Run(\"SendAlbum()\", func(t *testing.T) {\n\t\t_, err = b.SendAlbum(nil, nil)\n\t\tassert.Equal(t, ErrBadRecipient, err)\n\n\t\t_, err = b.SendAlbum(to, nil)\n\t\tassert.Error(t, err)\n\n\t\tphoto2 := *photo\n\t\tphoto2.Caption = \"\"\n\n\t\tmsgs, err := b.SendAlbum(to, Album{photo, &photo2}, ModeHTML)\n\t\trequire.NoError(t, err)\n\t\tassert.Len(t, msgs, 2)\n\t\tassert.NotEmpty(t, msgs[0].AlbumID)\n\t})\n\n\tt.Run(\"SendPaid()\", func(t *testing.T) {\n\t\t_, err = b.SendPaid(nil, 0, nil)\n\t\tassert.Equal(t, ErrBadRecipient, err)\n\n\t\t_, err = b.SendPaid(channel, 0, nil)\n\t\tassert.Error(t, err)\n\n\t\tphoto2 := *photo\n\t\tphoto2.Caption = \"\"\n\n\t\tmsg, err := b.SendPaid(channel, 1, PaidAlbum{photo, &photo2}, ModeHTML)\n\t\trequire.NoError(t, err)\n\t\trequire.NotNil(t, msg)\n\t\tassert.Equal(t, 1, msg.PaidMedia.Stars)\n\t\tassert.Equal(t, 2, len(msg.PaidMedia.PaidMedia))\n\t})\n\n\tt.Run(\"EditCaption()+ParseMode\", func(t *testing.T) {\n\t\tb.parseMode = \"html\"\n\n\t\tedited, err := b.EditCaption(msg, \"<b>new caption with html</b>\")\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, \"new caption with html\", edited.Caption)\n\t\tassert.Equal(t, EntityBold, edited.CaptionEntities[0].Type)\n\n\t\tsleep()\n\n\t\tedited, err = b.EditCaption(msg, \"*new caption with markdown*\", ModeMarkdown)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, \"new caption with markdown\", edited.Caption)\n\t\tassert.Equal(t, EntityBold, edited.CaptionEntities[0].Type)\n\n\t\tsleep()\n\n\t\tedited, err = b.EditCaption(msg, \"_new caption with markdown \\\\(V2\\\\)_\", ModeMarkdownV2)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, \"new caption with markdown (V2)\", edited.Caption)\n\t\tassert.Equal(t, EntityItalic, edited.CaptionEntities[0].Type)\n\t})\n\n\tt.Run(\"Edit(what=Media)\", func(t *testing.T) {\n\t\tphoto.Caption = \"<code>new caption with html</code>\"\n\n\t\tedited, err := b.Edit(msg, photo)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, edited.Photo.UniqueID, photo.UniqueID)\n\t\tassert.Equal(t, EntityCode, edited.CaptionEntities[0].Type)\n\n\t\tresp, err := http.Get(\"https://telegra.ph/file/274e5eb26f348b10bd8ee.mp4\")\n\t\trequire.NoError(t, err)\n\t\tdefer resp.Body.Close()\n\n\t\tfile, err := ioutil.TempFile(\"\", \"\")\n\t\trequire.NoError(t, err)\n\n\t\t_, err = io.Copy(file, resp.Body)\n\t\trequire.NoError(t, err)\n\n\t\tanimation := &Animation{\n\t\t\tFile:     FromDisk(file.Name()),\n\t\t\tCaption:  t.Name(),\n\t\t\tFileName: \"animation.gif\",\n\t\t}\n\n\t\tmsg, err := b.Send(msg.Chat, animation)\n\t\trequire.NoError(t, err)\n\n\t\tif msg.Animation != nil {\n\t\t\tassert.Equal(t, msg.Animation.FileID, animation.FileID)\n\t\t} else {\n\t\t\tassert.Equal(t, msg.Document.FileID, animation.FileID)\n\t\t}\n\n\t\t_, err = b.Edit(edited, animation)\n\t\trequire.NoError(t, err)\n\t})\n\n\tt.Run(\"Edit(what=Animation)\", func(t *testing.T) {})\n\n\tt.Run(\"Send(what=string)\", func(t *testing.T) {\n\t\tmsg, err = b.Send(to, t.Name())\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, t.Name(), msg.Text)\n\n\t\trpl, err := b.Reply(msg, t.Name())\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, rpl.Text, msg.Text)\n\t\tassert.NotNil(t, rpl.ReplyTo)\n\t\tassert.Equal(t, rpl.ReplyTo, msg)\n\t\tassert.True(t, rpl.IsReply())\n\n\t\tfwd, err := b.Forward(to, msg)\n\t\trequire.NoError(t, err)\n\t\tassert.NotNil(t, msg, fwd)\n\t\tassert.True(t, fwd.IsForwarded())\n\n\t\tfwd.ID += 1 // nonexistent message\n\t\t_, err = b.Forward(to, fwd)\n\t\tassert.Equal(t, ErrNotFoundToForward, err)\n\t})\n\n\tt.Run(\"Edit(what=string)\", func(t *testing.T) {\n\t\tmsg, err = b.Edit(msg, t.Name())\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, t.Name(), msg.Text)\n\n\t\t_, err = b.Edit(msg, msg.Text)\n\t\tassert.Error(t, err) // message is not modified\n\t})\n\n\tt.Run(\"Edit(what=ReplyMarkup)\", func(t *testing.T) {\n\t\tgood := &ReplyMarkup{\n\t\t\tInlineKeyboard: [][]InlineButton{\n\t\t\t\t{{\n\t\t\t\t\tData: \"btn\",\n\t\t\t\t\tText: \"Hi Telebot!\",\n\t\t\t\t}},\n\t\t\t},\n\t\t}\n\t\tbad := &ReplyMarkup{\n\t\t\tInlineKeyboard: [][]InlineButton{\n\t\t\t\t{{\n\t\t\t\t\tData: strings.Repeat(\"*\", 65),\n\t\t\t\t\tText: \"Bad Button\",\n\t\t\t\t}},\n\t\t\t},\n\t\t}\n\n\t\tedited, err := b.Edit(msg, good)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, edited.ReplyMarkup.InlineKeyboard, good.InlineKeyboard)\n\n\t\tedited, err = b.EditReplyMarkup(edited, nil)\n\t\trequire.NoError(t, err)\n\t\tassert.Nil(t, edited.ReplyMarkup)\n\n\t\t_, err = b.Edit(edited, bad)\n\t\tassert.Equal(t, ErrBadButtonData, err)\n\t})\n\n\tt.Run(\"Edit(what=Location)\", func(t *testing.T) {\n\t\tloc := &Location{Lat: 42, Lng: 69, LivePeriod: 60}\n\t\tedited, err := b.Send(to, loc)\n\t\trequire.NoError(t, err)\n\t\tassert.NotNil(t, edited.Location)\n\n\t\tloc = &Location{Lat: loc.Lng, Lng: loc.Lat}\n\t\tedited, err = b.Edit(edited, *loc)\n\t\trequire.NoError(t, err)\n\t\tassert.NotNil(t, edited.Location)\n\t})\n\n\t// Should be after the Edit tests.\n\tt.Run(\"Delete()\", func(t *testing.T) {\n\t\trequire.NoError(t, b.Delete(msg))\n\t})\n\n\tt.Run(\"Notify()\", func(t *testing.T) {\n\t\tassert.Equal(t, ErrBadRecipient, b.Notify(nil, Typing))\n\t\trequire.NoError(t, b.Notify(to, Typing))\n\t})\n\n\tt.Run(\"Answer()\", func(t *testing.T) {\n\t\tassert.Error(t, b.Answer(&Query{}, &QueryResponse{\n\t\t\tResults: Results{&ArticleResult{}},\n\t\t}))\n\t})\n\n\tt.Run(\"Respond()\", func(t *testing.T) {\n\t\tassert.Error(t, b.Respond(&Callback{}, &CallbackResponse{}))\n\t})\n\n\tt.Run(\"Payments\", func(t *testing.T) {\n\t\tassert.NotPanics(t, func() {\n\t\t\tb.Accept(&PreCheckoutQuery{})\n\t\t\tb.Accept(&PreCheckoutQuery{}, \"error\")\n\t\t})\n\t\tassert.NotPanics(t, func() {\n\t\t\tb.Ship(&ShippingQuery{})\n\t\t\tb.Ship(&ShippingQuery{}, \"error\")\n\t\t\tb.Ship(&ShippingQuery{}, ShippingOption{}, ShippingOption{})\n\t\t\tassert.Equal(t, ErrUnsupportedWhat, b.Ship(&ShippingQuery{}, 0))\n\t\t})\n\t})\n\n\tt.Run(\"Commands\", func(t *testing.T) {\n\t\tvar (\n\t\t\tset1 = []Command{{\n\t\t\t\tText:        \"test1\",\n\t\t\t\tDescription: \"test command 1\",\n\t\t\t}}\n\t\t\tset2 = []Command{{\n\t\t\t\tText:        \"test2\",\n\t\t\t\tDescription: \"test command 2\",\n\t\t\t}}\n\t\t\tscope = CommandScope{\n\t\t\t\tType:   CommandScopeChat,\n\t\t\t\tChatID: chatID,\n\t\t\t}\n\t\t)\n\n\t\terr := b.SetCommands(set1)\n\t\trequire.NoError(t, err)\n\n\t\tcmds, err := b.Commands()\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, set1, cmds)\n\n\t\terr = b.SetCommands(set2, \"en\", scope)\n\t\trequire.NoError(t, err)\n\n\t\tcmds, err = b.Commands()\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, set1, cmds)\n\n\t\tcmds, err = b.Commands(\"en\", scope)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, set2, cmds)\n\n\t\trequire.NoError(t, b.DeleteCommands(\"en\", scope))\n\t\trequire.NoError(t, b.DeleteCommands())\n\t})\n\n\tt.Run(\"InviteLink\", func(t *testing.T) {\n\t\tinviteLink, err := b.CreateInviteLink(&Chat{ID: chatID}, nil)\n\t\trequire.NoError(t, err)\n\t\tassert.True(t, len(inviteLink.InviteLink) > 0)\n\n\t\tsleep()\n\n\t\tresponse, err := b.EditInviteLink(&Chat{ID: chatID}, &ChatInviteLink{InviteLink: inviteLink.InviteLink})\n\t\trequire.NoError(t, err)\n\t\tassert.True(t, len(response.InviteLink) > 0)\n\n\t\tsleep()\n\n\t\tresponse, err = b.RevokeInviteLink(&Chat{ID: chatID}, inviteLink.InviteLink)\n\t\trequire.Nil(t, err)\n\t\tassert.True(t, len(response.InviteLink) > 0)\n\t})\n}\n\nfunc sleep() {\n\ttime.Sleep(time.Second)\n}\n"
        },
        {
          "name": "business.go",
          "type": "blob",
          "size": 3.14453125,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"time\"\n)\n\ntype BusinessConnection struct {\n\t// Unique identifier of the business connection\n\tID string `json:\"id\"`\n\n\t// Business account user that created the business connection\n\tSender *User `json:\"user\"`\n\n\t// Identifier of a private chat with the user who created the business connection. This\n\t// number may have more than 32 significant bits and some programming languages may\n\t// have difficulty/silent defects in interpreting it. But it has at most 52 significant bits,\n\t// so a 64-bit integer or double-precision float type are safe for storing this identifier.\n\tUserChatID int64 `json:\"user_chat_id\"`\n\n\t// Unixtime, use BusinessConnection.Time() to get time.Time.\n\tUnixtime int64 `json:\"date\"`\n\n\t// True, if the bot can act on behalf of the business account in chats that were active in the last 24 hours\n\tCanReply bool `json:\"can_reply\"`\n\n\t// True, if the connection is active\n\tEnabled bool `json:\"is_enabled\"`\n}\n\n// Time returns the moment of business connection creation in local time.\nfunc (b *BusinessConnection) Time() time.Time {\n\treturn time.Unix(b.Unixtime, 0)\n}\n\ntype BusinessMessagesDeleted struct {\n\t// Unique identifier of the business connection\n\tBusinessConnectionID string `json:\"business_connection_id\"`\n\n\t// Information about a chat in the business account. The bot\n\t// may not have access to the chat or the corresponding user.\n\tChat *Chat `json:\"chat\"`\n\n\t// The list of identifiers of deleted messages in the chat of the business account\n\tMessageIDs []int `json:\"message_ids\"`\n}\n\ntype BusinessIntro struct {\n\t// (Optional)\n\t// Title text of the business intro\n\tTitle string `json:\"title\"`\n\n\t// Message text of the business intro\n\tMessage string `json:\"message\"`\n\n\t// Sticker of the business intro\n\tSticker *Sticker `json:\"sticker\"`\n}\n\ntype BusinessLocation struct {\n\t// Address of the business\n\tAddress string `json:\"address\"`\n\n\t// (Optional) Location of the business\n\tLocation *Location `json:\"location\"`\n}\n\ntype BusinessOpeningHoursInterval struct {\n\t// The minute's sequence number in a week, starting on Monday,\n\t// marking the start of the time interval during which the business\n\t// is open; 0 - 7 * 24 * 60\n\tOpeningMinute int `json:\"opening_minute\"`\n\n\t// The minute's sequence number in a week, starting on Monday,\n\t// marking the start of the time interval during which the business\n\t// is open; 0 - 7 * 24 * 60\n\tClosingMinute int `json:\"closing_minute\"`\n}\n\ntype BusinessOpeningHours struct {\n\t// Unique name of the time zone for which the opening hours are defined\n\tTimezone string `json:\"time_zone_name\"`\n\n\t// List of time intervals describing business opening hours\n\tOpeningHours []BusinessOpeningHoursInterval `json:\"opening_hours\"`\n}\n\n// BusinessConnection returns the information about the connection of the bot with a business account.\nfunc (b *Bot) BusinessConnection(id string) (*BusinessConnection, error) {\n\tparams := map[string]string{\n\t\t\"business_connection_id\": id,\n\t}\n\n\tdata, err := b.Raw(\"getBusinessConnection\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *BusinessConnection\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n"
        },
        {
          "name": "callback.go",
          "type": "blob",
          "size": 2.99609375,
          "content": "package telebot\n\n// CallbackEndpoint is an interface any element capable\n// of responding to a callback `\\f<unique>`.\ntype CallbackEndpoint interface {\n\tCallbackUnique() string\n}\n\n// Callback object represents a query from a callback button in an\n// inline keyboard.\ntype Callback struct {\n\tID string `json:\"id\"`\n\n\t// For message sent to channels, Sender may be empty\n\tSender *User `json:\"from\"`\n\n\t// Message will be set if the button that originated the query\n\t// was attached to a message sent by a bot.\n\tMessage *Message `json:\"message\"`\n\n\t// MessageID will be set if the button was attached to a message\n\t// sent via the bot in inline mode.\n\tMessageID string `json:\"inline_message_id\"`\n\n\t// Data associated with the callback button. Be aware that\n\t// a bad client can send arbitrary data in this field.\n\tData string `json:\"data\"`\n\n\t// ChatInstance is a global identifier, uniquely corresponding to\n\t// the chat to which the message with the callback button was sent.\n\tChatInstance string `json:\"chat_instance\"`\n\n\t// GameShortName is a unique identifier of the game for which a URL\n\t// is requested from the bot when a user presses the Play button of\n\t// that game. GameShortName may be empty\n\tGameShortName string `json:\"game_short_name\"`\n\n\t// Unique displays an unique of the button from which the\n\t// callback was fired. Sets immediately before the handling,\n\t// while the Data field stores only with payload.\n\tUnique string `json:\"-\"`\n}\n\n// MessageSig satisfies Editable interface.\nfunc (c *Callback) MessageSig() (string, int64) {\n\tif c.IsInline() {\n\t\treturn c.MessageID, 0\n\t}\n\treturn c.Message.MessageSig()\n}\n\n// IsInline says whether message is an inline message.\nfunc (c *Callback) IsInline() bool {\n\treturn c.MessageID != \"\"\n}\n\n// CallbackResponse builds a response to a Callback query.\ntype CallbackResponse struct {\n\t// The ID of the callback to which this is a response.\n\t//\n\t// Note: Telebot sets this field automatically!\n\tCallbackID string `json:\"callback_query_id\"`\n\n\t// Text of the notification. If not specified, nothing will be\n\t// shown to the user.\n\tText string `json:\"text,omitempty\"`\n\n\t// (Optional) If true, an alert will be shown by the client instead\n\t// of a notification at the top of the chat screen. Defaults to false.\n\tShowAlert bool `json:\"show_alert,omitempty\"`\n\n\t// (Optional) URL that will be opened by the user's client.\n\t// If you have created a Game and accepted the conditions via\n\t// @BotFather, specify the URL that opens your game.\n\t//\n\t// Note: this will only work if the query comes from a game\n\t// callback button. Otherwise, you may use deep-linking:\n\t// https://telegram.me/your_bot?start=XXXX\n\tURL string `json:\"url,omitempty\"`\n}\n\n// CallbackUnique returns ReplyButton.Text.\nfunc (t *ReplyButton) CallbackUnique() string {\n\treturn t.Text\n}\n\n// CallbackUnique returns InlineButton.Unique.\nfunc (t *InlineButton) CallbackUnique() string {\n\treturn \"\\f\" + t.Unique\n}\n\n// CallbackUnique implements CallbackEndpoint.\nfunc (t *Btn) CallbackUnique() string {\n\tif t.Unique != \"\" {\n\t\treturn \"\\f\" + t.Unique\n\t}\n\treturn t.Text\n}\n"
        },
        {
          "name": "chat.go",
          "type": "blob",
          "size": 17.64453125,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"strconv\"\n\t\"time\"\n)\n\n// User object represents a Telegram user, bot.\ntype User struct {\n\tID int64 `json:\"id\"`\n\n\tFirstName           string   `json:\"first_name\"`\n\tLastName            string   `json:\"last_name\"`\n\tIsForum             bool     `json:\"is_forum\"`\n\tUsername            string   `json:\"username\"`\n\tLanguageCode        string   `json:\"language_code\"`\n\tIsBot               bool     `json:\"is_bot\"`\n\tIsPremium           bool     `json:\"is_premium\"`\n\tAddedToMenu         bool     `json:\"added_to_attachment_menu\"`\n\tUsernames           []string `json:\"active_usernames\"`\n\tStatusCustomEmojiID string   `json:\"emoji_status_custom_emoji_id\"`\n\n\t// Returns only in getMe\n\tCanJoinGroups        bool `json:\"can_join_groups\"`\n\tCanReadMessages      bool `json:\"can_read_all_group_messages\"`\n\tSupportsInline       bool `json:\"supports_inline_queries\"`\n\tCanConnectToBusiness bool `json:\"can_connect_to_business\"`\n\tHasMainWebApp        bool `json:\"has_main_web_app\"`\n}\n\n// Recipient returns user ID (see Recipient interface).\nfunc (u *User) Recipient() string {\n\treturn strconv.FormatInt(u.ID, 10)\n}\n\n// Chat object represents a Telegram user, bot, group or a channel.\ntype Chat struct {\n\tID int64 `json:\"id\"`\n\n\t// See ChatType and consts.\n\tType ChatType `json:\"type\"`\n\n\t// Won't be there for ChatPrivate.\n\tTitle string `json:\"title\"`\n\n\tFirstName string `json:\"first_name\"`\n\tLastName  string `json:\"last_name\"`\n\tUsername  string `json:\"username\"`\n\n\t// Returns only in getChat\n\tBio                            string               `json:\"bio,omitempty\"`\n\tPhoto                          *ChatPhoto           `json:\"photo,omitempty\"`\n\tDescription                    string               `json:\"description,omitempty\"`\n\tInviteLink                     string               `json:\"invite_link,omitempty\"`\n\tPinnedMessage                  *Message             `json:\"pinned_message,omitempty\"`\n\tPermissions                    *Rights              `json:\"permissions,omitempty\"`\n\tReactions                      []Reaction           `json:\"available_reactions\"`\n\tSlowMode                       int                  `json:\"slow_mode_delay,omitempty\"`\n\tStickerSet                     string               `json:\"sticker_set_name,omitempty\"`\n\tCanSetStickerSet               bool                 `json:\"can_set_sticker_set,omitempty\"`\n\tCanSendPaidMedia               bool                 `json:\"can_send_paid_media\"`\n\tCustomEmojiStickerSet          string               `json:\"custom_emoji_sticker_set_name\"`\n\tLinkedChatID                   int64                `json:\"linked_chat_id,omitempty\"`\n\tChatLocation                   *ChatLocation        `json:\"location,omitempty\"`\n\tPrivate                        bool                 `json:\"has_private_forwards,omitempty\"`\n\tProtected                      bool                 `json:\"has_protected_content,omitempty\"`\n\tNoVoiceAndVideo                bool                 `json:\"has_restricted_voice_and_video_messages\"`\n\tHasHiddenMembers               bool                 `json:\"has_hidden_members,omitempty\"`\n\tAggressiveAntiSpam             bool                 `json:\"has_aggressive_anti_spam_enabled,omitempty\"`\n\tStatusCustomEmojiID            string               `json:\"emoji_status_custom_emoji_id\"`\n\tEmojiExpirationUnixtime        int64                `json:\"emoji_status_expiration_date\"`\n\tBackgroundCustomEmojiID        string               `json:\"background_custom_emoji_id\"`\n\tAccentColorID                  int                  `json:\"accent_color_id\"`\n\tProfileAccentColorID           int                  `json:\"profile_accent_color_id\"`\n\tProfileBackgroundCustomEmojiID string               `json:\"profile_background_custom_emoji_id\"`\n\tHasVisibleHistory              bool                 `json:\"has_visible_history\"`\n\tUnrestrictBoosts               int                  `json:\"unrestrict_boost_count\"`\n\tMaxReactions                   int                  `json:\"max_reaction_count\"`\n\tBirthdate                      Birthdate            `json:\"birthdate,omitempty\"`\n\tPersonalChat                   *Chat                `json:\"personal_chat,omitempty\"`\n\tBusinessIntro                  BusinessIntro        `json:\"business_intro,omitempty\"`\n\tBusinessLocation               BusinessLocation     `json:\"business_location,omitempty\"`\n\tBusinessOpeningHours           BusinessOpeningHours `json:\"business_opening_hours,omitempty\"`\n}\n\n// Recipient returns chat ID (see Recipient interface).\nfunc (c *Chat) Recipient() string {\n\treturn strconv.FormatInt(c.ID, 10)\n}\n\n// ChatType represents one of the possible chat types.\ntype ChatType string\n\nconst (\n\tChatPrivate        ChatType = \"private\"\n\tChatGroup          ChatType = \"group\"\n\tChatSuperGroup     ChatType = \"supergroup\"\n\tChatChannel        ChatType = \"channel\"\n\tChatChannelPrivate ChatType = \"privatechannel\"\n)\n\n// ChatLocation represents a location to which a chat is connected.\ntype ChatLocation struct {\n\tLocation Location `json:\"location,omitempty\"`\n\tAddress  string   `json:\"address,omitempty\"`\n}\n\n// ChatPhoto object represents a chat photo.\ntype ChatPhoto struct {\n\t// File identifiers of small (160x160) chat photo\n\tSmallFileID   string `json:\"small_file_id\"`\n\tSmallUniqueID string `json:\"small_file_unique_id\"`\n\n\t// File identifiers of big (640x640) chat photo\n\tBigFileID   string `json:\"big_file_id\"`\n\tBigUniqueID string `json:\"big_file_unique_id\"`\n}\n\n// ChatMember object represents information about a single chat member.\ntype ChatMember struct {\n\tRights\n\n\tUser      *User        `json:\"user\"`\n\tRole      MemberStatus `json:\"status\"`\n\tTitle     string       `json:\"custom_title\"`\n\tAnonymous bool         `json:\"is_anonymous\"`\n\tMember    bool         `json:\"is_member,omitempty\"`\n\n\t// Date when restrictions will be lifted for the user, unix time.\n\t//\n\t// If user is restricted for more than 366 days or less than\n\t// 30 seconds from the current time, they are considered to be\n\t// restricted forever.\n\t//\n\t// Use tele.Forever().\n\t//\n\tRestrictedUntil int64 `json:\"until_date,omitempty\"`\n\n\tJoinToSend    string `json:\"join_to_send_messages\"`\n\tJoinByRequest string `json:\"join_by_request\"`\n}\n\n// MemberStatus is one's chat status.\ntype MemberStatus string\n\nconst (\n\tCreator       MemberStatus = \"creator\"\n\tAdministrator MemberStatus = \"administrator\"\n\tMember        MemberStatus = \"member\"\n\tRestricted    MemberStatus = \"restricted\"\n\tLeft          MemberStatus = \"left\"\n\tKicked        MemberStatus = \"kicked\"\n)\n\n// ChatMemberUpdate object represents changes in the status of a chat member.\ntype ChatMemberUpdate struct {\n\t// Chat where the user belongs to.\n\tChat *Chat `json:\"chat\"`\n\n\t// Sender which user the action was triggered.\n\tSender *User `json:\"from\"`\n\n\t// Unixtime, use Date() to get time.Time.\n\tUnixtime int64 `json:\"date\"`\n\n\t// Previous information about the chat member.\n\tOldChatMember *ChatMember `json:\"old_chat_member\"`\n\n\t// New information about the chat member.\n\tNewChatMember *ChatMember `json:\"new_chat_member\"`\n\n\t// (Optional) InviteLink which was used by the user to\n\t// join the chat; for joining by invite link events only.\n\tInviteLink *ChatInviteLink `json:\"invite_link\"`\n\n\t// (Optional) True, if the user joined the chat after sending\n\t// a direct join request without using an invite link and being\n\t// approved by an administrator\n\tViaJoinRequest bool `json:\"via_join_request\"`\n\n\t// (Optional) True, if the user joined the chat via a chat folder invite link.\n\tViaFolderLink bool `json:\"via_chat_folder_invite_link\"`\n}\n\n// Time returns the moment of the change in local time.\nfunc (c *ChatMemberUpdate) Time() time.Time {\n\treturn time.Unix(c.Unixtime, 0)\n}\n\n// ChatID represents a chat or an user integer ID, which can be used\n// as recipient in bot methods. It is very useful in cases where\n// you have special group IDs, for example in your config, and don't\n// want to wrap it into *tele.Chat every time you send messages.\n//\n// Example:\n//\n//\tgroup := tele.ChatID(-100756389456)\n//\tb.Send(group, \"Hello!\")\n//\n//\ttype Config struct {\n//\t\tAdminGroup tele.ChatID `json:\"admin_group\"`\n//\t}\n//\tb.Send(conf.AdminGroup, \"Hello!\")\ntype ChatID int64\n\n// Recipient returns chat ID (see Recipient interface).\nfunc (i ChatID) Recipient() string {\n\treturn strconv.FormatInt(int64(i), 10)\n}\n\n// ChatJoinRequest represents a join request sent to a chat.\ntype ChatJoinRequest struct {\n\t// Chat to which the request was sent.\n\tChat *Chat `json:\"chat\"`\n\n\t// Sender is the user that sent the join request.\n\tSender *User `json:\"from\"`\n\n\t// UserChatID is an ID of a private chat with the user\n\t// who sent the join request. The bot can use this ID\n\t// for 5 minutes to send messages until the join request\n\t// is processed, assuming no other administrator contacted the user.\n\tUserChatID int64 `json:\"user_chat_id\"`\n\n\t// Unixtime, use ChatJoinRequest.Time() to get time.Time.\n\tUnixtime int64 `json:\"date\"`\n\n\t// Bio of the user, optional.\n\tBio string `json:\"bio\"`\n\n\t// InviteLink is the chat invite link that was used by\n\t//the user to send the join request, optional.\n\tInviteLink *ChatInviteLink `json:\"invite_link\"`\n}\n\n// ChatInviteLink object represents an invite for a chat.\ntype ChatInviteLink struct {\n\t// The invite link.\n\tInviteLink string `json:\"invite_link\"`\n\n\t// Invite link name.\n\tName string `json:\"name\"`\n\n\t// The creator of the link.\n\tCreator *User `json:\"creator\"`\n\n\t// If the link is primary.\n\tIsPrimary bool `json:\"is_primary\"`\n\n\t// If the link is revoked.\n\tIsRevoked bool `json:\"is_revoked\"`\n\n\t// (Optional) Point in time when the link will expire,\n\t// use ExpireDate() to get time.Time.\n\tExpireUnixtime int64 `json:\"expire_date,omitempty\"`\n\n\t// (Optional) Maximum number of users that can be members of\n\t// the chat simultaneously.\n\tMemberLimit int `json:\"member_limit,omitempty\"`\n\n\t// (Optional) True, if users joining the chat via the link need to\n\t// be approved by chat administrators. If True, member_limit can't be specified.\n\tJoinRequest bool `json:\"creates_join_request\"`\n\n\t// (Optional) Number of pending join requests created using this link.\n\tPendingCount int `json:\"pending_join_request_count\"`\n}\n\ntype Story struct {\n\t// Unique identifier for the story in the chat\n\tID int `json:\"id\"`\n\n\t// Chat that posted the story\n\tPoster *Chat `json:\"chat\"`\n}\n\ntype Birthdate struct {\n\t// Day of the user's birth; 1-31\n\tDay int `json:\"day\"`\n\n\t// Month of the user's birth; 1-12\n\tMonth int `json:\"month\"`\n\n\t// (Optional) Year of the user's birth\n\tYear int `json:\"year\"`\n}\n\ntype ChatBackground struct {\n\t// Type of the background\n\tType BackgroundType `json:\"type\"`\n}\n\ntype BackgroundType struct {\n\t// Type of the background, always “fill”\n\tType string `json:\"type\"`\n\n\t// The background fill\n\tFill BackgroundFill `json:\"fill,omitempty\"`\n\n\t// Document with the wallpaper\n\tDocument Document `json:\"document,omitempty\"`\n\n\t// Dimming of the background in dark themes, as a percentage; 0-100\n\tDarkThemeDimming int `json:\"dark_theme_dimming,omitempty\"`\n\n\t// Intensity of the pattern when it is shown above the filled background; 0-100\n\tIntensity int `json:\"intensity,omitempty\"`\n\n\t// (Optional) True, if the wallpaper is downscaled to fit in a 450x450\n\t// square and then box-blurred with radius 12\n\tBlurred bool `json:\"is_blurred,omitempty\"`\n\n\t// (Optional) True, if the background moves slightly when the device is tilted\n\tMoving bool `json:\"is_moving,omitempty\"`\n\n\t// (Optional) True, if the background fill must be applied only to the pattern itself.\n\t// All other pixels are black in this case. For dark themes only\n\tInverted bool `json:\"is_inverted,omitempty\"`\n\n\t// Name of the chat theme, which is usually an emoji\n\tThemeName string `json:\"theme_name,omitempty\"`\n}\n\ntype BackgroundFill struct {\n\t// Type of the background fill.\n\tType string `json:\"type\"`\n\n\t// The color of the background fill in the RGB24 format\n\tSolidColor int `json:\"color,omitempty\"`\n\n\t// Top color of the gradient in the RGB24 format\n\tGradientTopColor int `json:\"top_color,omitempty\"`\n\n\t// Bottom color of the gradient in the RGB24 format\n\tGradientBottomColor int `json:\"bottom_color,omitempty\"`\n\n\t// Clockwise rotation angle of the background fill in degrees; 0-359\n\tGradientRotationAngle int `json:\"rotation_angle,omitempty\"`\n\n\t// A list of the 3 or 4 base colors that are used to generate\n\t// the freeform gradient in the RGB24 format\n\tGradientColors []int `json:\"colors,omitempty\"`\n}\n\n// ExpireDate returns the moment of the link expiration in local time.\nfunc (c *ChatInviteLink) ExpireDate() time.Time {\n\treturn time.Unix(c.ExpireUnixtime, 0)\n}\n\n// Time returns the moment of chat join request sending in local time.\nfunc (r ChatJoinRequest) Time() time.Time {\n\treturn time.Unix(r.Unixtime, 0)\n}\n\n// Time returns the moment of the emoji status expiration.\nfunc (c *Chat) Time() time.Time {\n\treturn time.Unix(c.EmojiExpirationUnixtime, 0)\n}\n\n// InviteLink should be used to export chat's invite link.\nfunc (b *Bot) InviteLink(chat *Chat) (string, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\tdata, err := b.Raw(\"exportChatInviteLink\", params)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tvar resp struct {\n\t\tResult string\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn \"\", wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// CreateInviteLink creates an additional invite link for a chat.\nfunc (b *Bot) CreateInviteLink(chat Recipient, link *ChatInviteLink) (*ChatInviteLink, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\tif link != nil {\n\t\tparams[\"name\"] = link.Name\n\n\t\tif link.ExpireUnixtime != 0 {\n\t\t\tparams[\"expire_date\"] = strconv.FormatInt(link.ExpireUnixtime, 10)\n\t\t}\n\t\tif link.MemberLimit > 0 {\n\t\t\tparams[\"member_limit\"] = strconv.Itoa(link.MemberLimit)\n\t\t} else if link.JoinRequest {\n\t\t\tparams[\"creates_join_request\"] = \"true\"\n\t\t}\n\t}\n\n\tdata, err := b.Raw(\"createChatInviteLink\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult ChatInviteLink `json:\"result\"`\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\n\treturn &resp.Result, nil\n}\n\n// EditInviteLink edits a non-primary invite link created by the bot.\nfunc (b *Bot) EditInviteLink(chat Recipient, link *ChatInviteLink) (*ChatInviteLink, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\tif link != nil {\n\t\tparams[\"invite_link\"] = link.InviteLink\n\t\tparams[\"name\"] = link.Name\n\n\t\tif link.ExpireUnixtime != 0 {\n\t\t\tparams[\"expire_date\"] = strconv.FormatInt(link.ExpireUnixtime, 10)\n\t\t}\n\t\tif link.MemberLimit > 0 {\n\t\t\tparams[\"member_limit\"] = strconv.Itoa(link.MemberLimit)\n\t\t} else if link.JoinRequest {\n\t\t\tparams[\"creates_join_request\"] = \"true\"\n\t\t}\n\t}\n\n\tdata, err := b.Raw(\"editChatInviteLink\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult ChatInviteLink `json:\"result\"`\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\n\treturn &resp.Result, nil\n}\n\n// RevokeInviteLink revokes an invite link created by the bot.\nfunc (b *Bot) RevokeInviteLink(chat Recipient, link string) (*ChatInviteLink, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\":     chat.Recipient(),\n\t\t\"invite_link\": link,\n\t}\n\n\tdata, err := b.Raw(\"revokeChatInviteLink\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult ChatInviteLink `json:\"result\"`\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\n\treturn &resp.Result, nil\n}\n\n// ApproveJoinRequest approves a chat join request.\nfunc (b *Bot) ApproveJoinRequest(chat Recipient, user *User) error {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t\t\"user_id\": user.Recipient(),\n\t}\n\n\tdata, err := b.Raw(\"approveChatJoinRequest\", params)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn extractOk(data)\n}\n\n// DeclineJoinRequest declines a chat join request.\nfunc (b *Bot) DeclineJoinRequest(chat Recipient, user *User) error {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t\t\"user_id\": user.Recipient(),\n\t}\n\n\tdata, err := b.Raw(\"declineChatJoinRequest\", params)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn extractOk(data)\n}\n\n// SetGroupTitle should be used to update group title.\nfunc (b *Bot) SetGroupTitle(chat *Chat, title string) error {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t\t\"title\":   title,\n\t}\n\n\t_, err := b.Raw(\"setChatTitle\", params)\n\treturn err\n}\n\n// SetGroupDescription should be used to update group description.\nfunc (b *Bot) SetGroupDescription(chat *Chat, description string) error {\n\tparams := map[string]string{\n\t\t\"chat_id\":     chat.Recipient(),\n\t\t\"description\": description,\n\t}\n\n\t_, err := b.Raw(\"setChatDescription\", params)\n\treturn err\n}\n\n// SetGroupPhoto should be used to update group photo.\nfunc (b *Bot) SetGroupPhoto(chat *Chat, p *Photo) error {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\t_, err := b.sendFiles(\"setChatPhoto\", map[string]File{\"photo\": p.File}, params)\n\treturn err\n}\n\n// SetGroupStickerSet should be used to update group's group sticker set.\nfunc (b *Bot) SetGroupStickerSet(chat *Chat, setName string) error {\n\tparams := map[string]string{\n\t\t\"chat_id\":          chat.Recipient(),\n\t\t\"sticker_set_name\": setName,\n\t}\n\n\t_, err := b.Raw(\"setChatStickerSet\", params)\n\treturn err\n}\n\n// SetGroupPermissions sets default chat permissions for all members.\nfunc (b *Bot) SetGroupPermissions(chat *Chat, perms Rights) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\":     chat.Recipient(),\n\t\t\"permissions\": perms,\n\t}\n\tif perms.Independent {\n\t\tparams[\"use_independent_chat_permissions\"] = true\n\t}\n\n\t_, err := b.Raw(\"setChatPermissions\", params)\n\treturn err\n}\n\n// DeleteGroupPhoto should be used to just remove group photo.\nfunc (b *Bot) DeleteGroupPhoto(chat *Chat) error {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"deleteChatPhoto\", params)\n\treturn err\n}\n\n// DeleteGroupStickerSet should be used to just remove group sticker set.\nfunc (b *Bot) DeleteGroupStickerSet(chat *Chat) error {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"deleteChatStickerSet\", params)\n\treturn err\n}\n"
        },
        {
          "name": "chat_test.go",
          "type": "blob",
          "size": 0.4326171875,
          "content": "package telebot\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestChat(t *testing.T) {\n\tuser := &User{ID: 1}\n\tchat := &Chat{ID: 1}\n\tchatID := ChatID(1)\n\n\tassert.Implements(t, (*Recipient)(nil), user)\n\tassert.Implements(t, (*Recipient)(nil), chat)\n\tassert.Implements(t, (*Recipient)(nil), chatID)\n\n\tassert.Equal(t, \"1\", user.Recipient())\n\tassert.Equal(t, \"1\", chat.Recipient())\n\tassert.Equal(t, \"1\", chatID.Recipient())\n}\n"
        },
        {
          "name": "commands.go",
          "type": "blob",
          "size": 2.6435546875,
          "content": "package telebot\n\nimport \"encoding/json\"\n\n// Command represents a bot command.\ntype Command struct {\n\t// Text is a text of the command, 1-32 characters.\n\t// Can contain only lowercase English letters, digits and underscores.\n\tText string `json:\"command\"`\n\n\t// Description of the command, 3-256 characters.\n\tDescription string `json:\"description\"`\n}\n\n// CommandParams controls parameters for commands-related methods (setMyCommands, deleteMyCommands and getMyCommands).\ntype CommandParams struct {\n\tCommands     []Command     `json:\"commands,omitempty\"`\n\tScope        *CommandScope `json:\"scope,omitempty\"`\n\tLanguageCode string        `json:\"language_code,omitempty\"`\n}\n\ntype CommandScopeType = string\n\nconst (\n\tCommandScopeDefault         CommandScopeType = \"default\"\n\tCommandScopeAllPrivateChats CommandScopeType = \"all_private_chats\"\n\tCommandScopeAllGroupChats   CommandScopeType = \"all_group_chats\"\n\tCommandScopeAllChatAdmin    CommandScopeType = \"all_chat_administrators\"\n\tCommandScopeChat            CommandScopeType = \"chat\"\n\tCommandScopeChatAdmin       CommandScopeType = \"chat_administrators\"\n\tCommandScopeChatMember      CommandScopeType = \"chat_member\"\n)\n\n// CommandScope object represents a scope to which bot commands are applied.\ntype CommandScope struct {\n\tType   CommandScopeType `json:\"type\"`\n\tChatID int64            `json:\"chat_id,omitempty\"`\n\tUserID int64            `json:\"user_id,omitempty\"`\n}\n\n// Commands returns the current list of the bot's commands for the given scope and user language.\nfunc (b *Bot) Commands(opts ...interface{}) ([]Command, error) {\n\tparams := extractCommandsParams(opts...)\n\tdata, err := b.Raw(\"getMyCommands\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult []Command\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// SetCommands changes the list of the bot's commands.\nfunc (b *Bot) SetCommands(opts ...interface{}) error {\n\tparams := extractCommandsParams(opts...)\n\t_, err := b.Raw(\"setMyCommands\", params)\n\treturn err\n}\n\n// DeleteCommands deletes the list of the bot's commands for the given scope and user language.\nfunc (b *Bot) DeleteCommands(opts ...interface{}) error {\n\tparams := extractCommandsParams(opts...)\n\t_, err := b.Raw(\"deleteMyCommands\", params)\n\treturn err\n}\n\n// extractCommandsParams extracts parameters for commands-related methods from the given options.\nfunc extractCommandsParams(opts ...interface{}) (params CommandParams) {\n\tfor _, opt := range opts {\n\t\tswitch value := opt.(type) {\n\t\tcase []Command:\n\t\t\tparams.Commands = value\n\t\tcase string:\n\t\t\tparams.LanguageCode = value\n\t\tcase CommandScope:\n\t\t\tparams.Scope = &value\n\t\t}\n\t}\n\treturn\n}\n"
        },
        {
          "name": "context.go",
          "type": "blob",
          "size": 14.6474609375,
          "content": "package telebot\n\nimport (\n\t\"errors\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\n// HandlerFunc represents a handler function, which is\n// used to handle actual endpoints.\ntype HandlerFunc func(Context) error\n\n// NewContext returns a new native context object,\n// field by the passed update.\nfunc NewContext(b API, u Update) Context {\n\treturn &nativeContext{\n\t\tb: b,\n\t\tu: u,\n\t}\n}\n\n// Context wraps an update and represents the context of current event.\ntype Context interface {\n\t// Bot returns the bot instance.\n\tBot() API\n\n\t// Update returns the original update.\n\tUpdate() Update\n\n\t// Message returns stored message if such presented.\n\tMessage() *Message\n\n\t// Callback returns stored callback if such presented.\n\tCallback() *Callback\n\n\t// Query returns stored query if such presented.\n\tQuery() *Query\n\n\t// InlineResult returns stored inline result if such presented.\n\tInlineResult() *InlineResult\n\n\t// ShippingQuery returns stored shipping query if such presented.\n\tShippingQuery() *ShippingQuery\n\n\t// PreCheckoutQuery returns stored pre checkout query if such presented.\n\tPreCheckoutQuery() *PreCheckoutQuery\n\n\t// Payment returns payment instance.\n\tPayment() *Payment\n\n\t// Poll returns stored poll if such presented.\n\tPoll() *Poll\n\n\t// PollAnswer returns stored poll answer if such presented.\n\tPollAnswer() *PollAnswer\n\n\t// ChatMember returns chat member changes.\n\tChatMember() *ChatMemberUpdate\n\n\t// ChatJoinRequest returns the chat join request.\n\tChatJoinRequest() *ChatJoinRequest\n\n\t// Migration returns both migration from and to chat IDs.\n\tMigration() (int64, int64)\n\n\t// Topic returns the topic changes.\n\tTopic() *Topic\n\n\t// Boost returns the boost instance.\n\tBoost() *BoostUpdated\n\n\t// BoostRemoved returns the boost removed from a chat instance.\n\tBoostRemoved() *BoostRemoved\n\n\t// Sender returns the current recipient, depending on the context type.\n\t// Returns nil if user is not presented.\n\tSender() *User\n\n\t// Chat returns the current chat, depending on the context type.\n\t// Returns nil if chat is not presented.\n\tChat() *Chat\n\t// Recipient combines both Sender and Chat functions. If there is no user\n\t// the chat will be returned. The native context cannot be without sender,\n\t// but it is useful in the case when the context created intentionally\n\t// by the NewContext constructor and have only Chat field inside.\n\tRecipient() Recipient\n\n\t// Text returns the message text, depending on the context type.\n\t// In the case when no related data presented, returns an empty string.\n\tText() string\n\n\t// Entities returns the message entities, whether it's media caption's or the text's.\n\t// In the case when no entities presented, returns a nil.\n\tEntities() Entities\n\n\t// Data returns the current data, depending on the context type.\n\t// If the context contains command, returns its arguments string.\n\t// If the context contains payment, returns its payload.\n\t// In the case when no related data presented, returns an empty string.\n\tData() string\n\n\t// Args returns a raw slice of command or callback arguments as strings.\n\t// The message arguments split by space, while the callback's ones by a \"|\" symbol.\n\tArgs() []string\n\n\t// Send sends a message to the current recipient.\n\t// See Send from bot.go.\n\tSend(what interface{}, opts ...interface{}) error\n\n\t// SendAlbum sends an album to the current recipient.\n\t// See SendAlbum from bot.go.\n\tSendAlbum(a Album, opts ...interface{}) error\n\n\t// Reply replies to the current message.\n\t// See Reply from bot.go.\n\tReply(what interface{}, opts ...interface{}) error\n\n\t// Forward forwards the given message to the current recipient.\n\t// See Forward from bot.go.\n\tForward(msg Editable, opts ...interface{}) error\n\n\t// ForwardTo forwards the current message to the given recipient.\n\t// See Forward from bot.go\n\tForwardTo(to Recipient, opts ...interface{}) error\n\n\t// Edit edits the current message.\n\t// See Edit from bot.go.\n\tEdit(what interface{}, opts ...interface{}) error\n\n\t// EditCaption edits the caption of the current message.\n\t// See EditCaption from bot.go.\n\tEditCaption(caption string, opts ...interface{}) error\n\n\t// EditOrSend edits the current message if the update is callback,\n\t// otherwise the content is sent to the chat as a separate message.\n\tEditOrSend(what interface{}, opts ...interface{}) error\n\n\t// EditOrReply edits the current message if the update is callback,\n\t// otherwise the content is replied as a separate message.\n\tEditOrReply(what interface{}, opts ...interface{}) error\n\n\t// Delete removes the current message.\n\t// See Delete from bot.go.\n\tDelete() error\n\n\t// DeleteAfter waits for the duration to elapse and then removes the\n\t// message. It handles an error automatically using b.OnError callback.\n\t// It returns a Timer that can be used to cancel the call using its Stop method.\n\tDeleteAfter(d time.Duration) *time.Timer\n\n\t// Notify updates the chat action for the current recipient.\n\t// See Notify from bot.go.\n\tNotify(action ChatAction) error\n\n\t// Ship replies to the current shipping query.\n\t// See Ship from bot.go.\n\tShip(what ...interface{}) error\n\n\t// Accept finalizes the current deal.\n\t// See Accept from bot.go.\n\tAccept(errorMessage ...string) error\n\n\t// Answer sends a response to the current inline query.\n\t// See Answer from bot.go.\n\tAnswer(resp *QueryResponse) error\n\n\t// Respond sends a response for the current callback query.\n\t// See Respond from bot.go.\n\tRespond(resp ...*CallbackResponse) error\n\n\t// RespondText sends a popup response for the current callback query.\n\tRespondText(text string) error\n\n\t// RespondAlert sends an alert response for the current callback query.\n\tRespondAlert(text string) error\n\n\t// Get retrieves data from the context.\n\tGet(key string) interface{}\n\n\t// Set saves data in the context.\n\tSet(key string, val interface{})\n}\n\n// nativeContext is a native implementation of the Context interface.\n// \"context\" is taken by context package, maybe there is a better name.\ntype nativeContext struct {\n\tb     API\n\tu     Update\n\tlock  sync.RWMutex\n\tstore map[string]interface{}\n}\n\nfunc (c *nativeContext) Bot() API {\n\treturn c.b\n}\n\nfunc (c *nativeContext) Update() Update {\n\treturn c.u\n}\n\nfunc (c *nativeContext) Message() *Message {\n\tswitch {\n\tcase c.u.Message != nil:\n\t\treturn c.u.Message\n\tcase c.u.Callback != nil:\n\t\treturn c.u.Callback.Message\n\tcase c.u.EditedMessage != nil:\n\t\treturn c.u.EditedMessage\n\tcase c.u.ChannelPost != nil:\n\t\tif c.u.ChannelPost.PinnedMessage != nil {\n\t\t\treturn c.u.ChannelPost.PinnedMessage\n\t\t}\n\t\treturn c.u.ChannelPost\n\tcase c.u.EditedChannelPost != nil:\n\t\treturn c.u.EditedChannelPost\n\tdefault:\n\t\treturn nil\n\t}\n}\n\nfunc (c *nativeContext) Callback() *Callback {\n\treturn c.u.Callback\n}\n\nfunc (c *nativeContext) Query() *Query {\n\treturn c.u.Query\n}\n\nfunc (c *nativeContext) InlineResult() *InlineResult {\n\treturn c.u.InlineResult\n}\n\nfunc (c *nativeContext) ShippingQuery() *ShippingQuery {\n\treturn c.u.ShippingQuery\n}\n\nfunc (c *nativeContext) PreCheckoutQuery() *PreCheckoutQuery {\n\treturn c.u.PreCheckoutQuery\n}\n\nfunc (c *nativeContext) Payment() *Payment {\n\tif c.u.Message == nil {\n\t\treturn nil\n\t}\n\treturn c.u.Message.Payment\n}\n\nfunc (c *nativeContext) ChatMember() *ChatMemberUpdate {\n\tswitch {\n\tcase c.u.ChatMember != nil:\n\t\treturn c.u.ChatMember\n\tcase c.u.MyChatMember != nil:\n\t\treturn c.u.MyChatMember\n\tdefault:\n\t\treturn nil\n\t}\n}\n\nfunc (c *nativeContext) ChatJoinRequest() *ChatJoinRequest {\n\treturn c.u.ChatJoinRequest\n}\n\nfunc (c *nativeContext) Poll() *Poll {\n\treturn c.u.Poll\n}\n\nfunc (c *nativeContext) PollAnswer() *PollAnswer {\n\treturn c.u.PollAnswer\n}\n\nfunc (c *nativeContext) Migration() (int64, int64) {\n\tm := c.u.Message\n\tif m == nil {\n\t\treturn 0, 0\n\t}\n\treturn m.MigrateFrom, m.MigrateTo\n}\n\nfunc (c *nativeContext) Topic() *Topic {\n\tm := c.u.Message\n\tif m == nil {\n\t\treturn nil\n\t}\n\tswitch {\n\tcase m.TopicCreated != nil:\n\t\treturn m.TopicCreated\n\tcase m.TopicReopened != nil:\n\t\treturn m.TopicReopened\n\tcase m.TopicEdited != nil:\n\t\treturn m.TopicEdited\n\t}\n\treturn nil\n}\n\nfunc (c *nativeContext) Boost() *BoostUpdated {\n\treturn c.u.Boost\n}\n\nfunc (c *nativeContext) BoostRemoved() *BoostRemoved {\n\treturn c.u.BoostRemoved\n}\n\nfunc (c *nativeContext) Sender() *User {\n\tswitch {\n\tcase c.u.Callback != nil:\n\t\treturn c.u.Callback.Sender\n\tcase c.Message() != nil:\n\t\treturn c.Message().Sender\n\tcase c.u.Query != nil:\n\t\treturn c.u.Query.Sender\n\tcase c.u.InlineResult != nil:\n\t\treturn c.u.InlineResult.Sender\n\tcase c.u.ShippingQuery != nil:\n\t\treturn c.u.ShippingQuery.Sender\n\tcase c.u.PreCheckoutQuery != nil:\n\t\treturn c.u.PreCheckoutQuery.Sender\n\tcase c.u.PollAnswer != nil:\n\t\treturn c.u.PollAnswer.Sender\n\tcase c.u.MyChatMember != nil:\n\t\treturn c.u.MyChatMember.Sender\n\tcase c.u.ChatMember != nil:\n\t\treturn c.u.ChatMember.Sender\n\tcase c.u.ChatJoinRequest != nil:\n\t\treturn c.u.ChatJoinRequest.Sender\n\tcase c.u.Boost != nil:\n\t\tif b := c.u.Boost.Boost; b != nil && b.Source != nil {\n\t\t\treturn b.Source.Booster\n\t\t}\n\tcase c.u.BoostRemoved != nil:\n\t\tif b := c.u.BoostRemoved; b.Source != nil {\n\t\t\treturn b.Source.Booster\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (c *nativeContext) Chat() *Chat {\n\tswitch {\n\tcase c.Message() != nil:\n\t\treturn c.Message().Chat\n\tcase c.u.MyChatMember != nil:\n\t\treturn c.u.MyChatMember.Chat\n\tcase c.u.ChatMember != nil:\n\t\treturn c.u.ChatMember.Chat\n\tcase c.u.ChatJoinRequest != nil:\n\t\treturn c.u.ChatJoinRequest.Chat\n\tdefault:\n\t\treturn nil\n\t}\n}\n\nfunc (c *nativeContext) Recipient() Recipient {\n\tchat := c.Chat()\n\tif chat != nil {\n\t\treturn chat\n\t}\n\treturn c.Sender()\n}\n\nfunc (c *nativeContext) Text() string {\n\tm := c.Message()\n\tif m == nil {\n\t\treturn \"\"\n\t}\n\tif m.Caption != \"\" {\n\t\treturn m.Caption\n\t}\n\treturn m.Text\n}\n\nfunc (c *nativeContext) Entities() Entities {\n\tm := c.Message()\n\tif m == nil {\n\t\treturn nil\n\t}\n\tif len(m.CaptionEntities) > 0 {\n\t\treturn m.CaptionEntities\n\t}\n\treturn m.Entities\n}\n\nfunc (c *nativeContext) Data() string {\n\tswitch {\n\tcase c.u.Message != nil:\n\t\tm := c.u.Message\n\t\tif m.Payment != nil {\n\t\t\treturn m.Payment.Payload\n\t\t}\n\t\treturn m.Payload\n\tcase c.u.Callback != nil:\n\t\treturn c.u.Callback.Data\n\tcase c.u.Query != nil:\n\t\treturn c.u.Query.Text\n\tcase c.u.InlineResult != nil:\n\t\treturn c.u.InlineResult.Query\n\tcase c.u.ShippingQuery != nil:\n\t\treturn c.u.ShippingQuery.Payload\n\tcase c.u.PreCheckoutQuery != nil:\n\t\treturn c.u.PreCheckoutQuery.Payload\n\tdefault:\n\t\treturn \"\"\n\t}\n}\n\nfunc (c *nativeContext) Args() []string {\n\tm := c.u.Message\n\tswitch {\n\tcase m != nil && m.Payment != nil:\n\t\treturn strings.Split(m.Payment.Payload, \"|\")\n\tcase m != nil:\n\t\tpayload := strings.Trim(m.Payload, \" \")\n\t\tif payload != \"\" {\n\t\t\treturn strings.Fields(payload)\n\t\t}\n\tcase c.u.Callback != nil:\n\t\treturn strings.Split(c.u.Callback.Data, \"|\")\n\tcase c.u.Query != nil:\n\t\treturn strings.Split(c.u.Query.Text, \" \")\n\tcase c.u.InlineResult != nil:\n\t\treturn strings.Split(c.u.InlineResult.Query, \" \")\n\t}\n\treturn nil\n}\n\nfunc (c *nativeContext) Send(what interface{}, opts ...interface{}) error {\n\topts = c.inheritOpts(opts...)\n\t_, err := c.b.Send(c.Recipient(), what, opts...)\n\treturn err\n}\n\nfunc (c *nativeContext) inheritOpts(opts ...interface{}) []interface{} {\n\tvar (\n\t\tignoreThread bool\n\t)\n\n\tif opts == nil {\n\t\topts = make([]interface{}, 0)\n\t}\n\n\tfor _, opt := range opts {\n\t\tswitch opt.(type) {\n\t\tcase Option:\n\t\t\tswitch opt {\n\t\t\tcase IgnoreThread:\n\t\t\t\tignoreThread = true\n\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t}\n\n\tswitch {\n\tcase !ignoreThread && c.Message() != nil && c.Message().ThreadID != 0:\n\t\topts = append(opts, &Topic{ThreadID: c.Message().ThreadID})\n\t}\n\n\treturn opts\n}\n\nfunc (c *nativeContext) SendAlbum(a Album, opts ...interface{}) error {\n\topts = c.inheritOpts(opts...)\n\n\t_, err := c.b.SendAlbum(c.Recipient(), a, opts...)\n\treturn err\n}\n\nfunc (c *nativeContext) Reply(what interface{}, opts ...interface{}) error {\n\tmsg := c.Message()\n\tif msg == nil {\n\t\treturn ErrBadContext\n\t}\n\topts = c.inheritOpts(opts...)\n\t_, err := c.b.Reply(msg, what, opts...)\n\treturn err\n}\n\nfunc (c *nativeContext) Forward(msg Editable, opts ...interface{}) error {\n\t_, err := c.b.Forward(c.Recipient(), msg, opts...)\n\treturn err\n}\n\nfunc (c *nativeContext) ForwardTo(to Recipient, opts ...interface{}) error {\n\tmsg := c.Message()\n\tif msg == nil {\n\t\treturn ErrBadContext\n\t}\n\t_, err := c.b.Forward(to, msg, opts...)\n\treturn err\n}\n\nfunc (c *nativeContext) Edit(what interface{}, opts ...interface{}) error {\n\topts = c.inheritOpts(opts...)\n\n\tif c.u.InlineResult != nil {\n\t\t_, err := c.b.Edit(c.u.InlineResult, what, opts...)\n\t\treturn err\n\t}\n\tif c.u.Callback != nil {\n\t\t_, err := c.b.Edit(c.u.Callback, what, opts...)\n\t\treturn err\n\t}\n\treturn ErrBadContext\n}\n\nfunc (c *nativeContext) EditCaption(caption string, opts ...interface{}) error {\n\topts = c.inheritOpts(opts...)\n\n\tif c.u.InlineResult != nil {\n\t\t_, err := c.b.EditCaption(c.u.InlineResult, caption, opts...)\n\t\treturn err\n\t}\n\tif c.u.Callback != nil {\n\t\t_, err := c.b.EditCaption(c.u.Callback, caption, opts...)\n\t\treturn err\n\t}\n\treturn ErrBadContext\n}\n\nfunc (c *nativeContext) EditOrSend(what interface{}, opts ...interface{}) error {\n\terr := c.Edit(what, opts...)\n\tif err == ErrBadContext {\n\t\treturn c.Send(what, opts...)\n\t}\n\treturn err\n}\n\nfunc (c *nativeContext) EditOrReply(what interface{}, opts ...interface{}) error {\n\terr := c.Edit(what, opts...)\n\tif err == ErrBadContext {\n\t\treturn c.Reply(what, opts...)\n\t}\n\treturn err\n}\n\nfunc (c *nativeContext) Delete() error {\n\tmsg := c.Message()\n\tif msg == nil {\n\t\treturn ErrBadContext\n\t}\n\treturn c.b.Delete(msg)\n}\n\nfunc (c *nativeContext) DeleteAfter(d time.Duration) *time.Timer {\n\treturn time.AfterFunc(d, func() {\n\t\tif err := c.Delete(); err != nil {\n\t\t\tif b, ok := c.b.(*Bot); ok {\n\t\t\t\tb.OnError(err, c)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (c *nativeContext) Notify(action ChatAction) error {\n\treturn c.b.Notify(c.Recipient(), action)\n}\n\nfunc (c *nativeContext) Ship(what ...interface{}) error {\n\tif c.u.ShippingQuery == nil {\n\t\treturn errors.New(\"telebot: context shipping query is nil\")\n\t}\n\treturn c.b.Ship(c.u.ShippingQuery, what...)\n}\n\nfunc (c *nativeContext) Accept(errorMessage ...string) error {\n\tif c.u.PreCheckoutQuery == nil {\n\t\treturn errors.New(\"telebot: context pre checkout query is nil\")\n\t}\n\treturn c.b.Accept(c.u.PreCheckoutQuery, errorMessage...)\n}\n\nfunc (c *nativeContext) Respond(resp ...*CallbackResponse) error {\n\tif c.u.Callback == nil {\n\t\treturn errors.New(\"telebot: context callback is nil\")\n\t}\n\treturn c.b.Respond(c.u.Callback, resp...)\n}\n\nfunc (c *nativeContext) RespondText(text string) error {\n\treturn c.Respond(&CallbackResponse{Text: text})\n}\n\nfunc (c *nativeContext) RespondAlert(text string) error {\n\treturn c.Respond(&CallbackResponse{Text: text, ShowAlert: true})\n}\n\nfunc (c *nativeContext) Answer(resp *QueryResponse) error {\n\tif c.u.Query == nil {\n\t\treturn errors.New(\"telebot: context inline query is nil\")\n\t}\n\treturn c.b.Answer(c.u.Query, resp)\n}\n\nfunc (c *nativeContext) Set(key string, value interface{}) {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tif c.store == nil {\n\t\tc.store = make(map[string]interface{})\n\t}\n\n\tc.store[key] = value\n}\n\nfunc (c *nativeContext) Get(key string) interface{} {\n\tc.lock.RLock()\n\tdefer c.lock.RUnlock()\n\treturn c.store[key]\n}\n"
        },
        {
          "name": "context_test.go",
          "type": "blob",
          "size": 0.302734375,
          "content": "package telebot\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nvar _ Context = (*nativeContext)(nil)\n\nfunc TestContext(t *testing.T) {\n\tt.Run(\"Get,Set\", func(t *testing.T) {\n\t\tvar c Context\n\t\tc = new(nativeContext)\n\t\tc.Set(\"name\", \"Jon Snow\")\n\t\tassert.Equal(t, \"Jon Snow\", c.Get(\"name\"))\n\t})\n}\n"
        },
        {
          "name": "editable.go",
          "type": "blob",
          "size": 0.9609375,
          "content": "package telebot\n\n// Editable is an interface for all objects that\n// provide \"message signature\", a pair of 32-bit\n// message ID and 64-bit chat ID, both required\n// for edit operations.\n//\n// Use case: DB model struct for messages to-be\n// edited with, say two columns: msg_id,chat_id\n// could easily implement MessageSig() making\n// instances of stored messages editable.\ntype Editable interface {\n\t// MessageSig is a \"message signature\".\n\t//\n\t// For inline messages, return chatID = 0.\n\tMessageSig() (messageID string, chatID int64)\n}\n\n// StoredMessage is an example struct suitable for being\n// stored in the database as-is or being embedded into\n// a larger struct, which is often the case (you might\n// want to store some metadata alongside, or might not.)\ntype StoredMessage struct {\n\tMessageID string `sql:\"message_id\" json:\"message_id\"`\n\tChatID    int64  `sql:\"chat_id\" json:\"chat_id\"`\n}\n\nfunc (x StoredMessage) MessageSig() (string, int64) {\n\treturn x.MessageID, x.ChatID\n}\n"
        },
        {
          "name": "errors.go",
          "type": "blob",
          "size": 10.212890625,
          "content": "package telebot\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"strings\"\n)\n\ntype (\n\tError struct {\n\t\tCode        int\n\t\tDescription string\n\t\tMessage     string\n\t}\n\n\tFloodError struct {\n\t\terr        *Error\n\t\tRetryAfter int\n\t}\n\n\tGroupError struct {\n\t\terr        *Error\n\t\tMigratedTo int64\n\t}\n)\n\n// ʔ returns description of error.\n// A tiny shortcut to make code clearer.\nfunc (err *Error) ʔ() string {\n\treturn err.Description\n}\n\n// Error implements error interface.\nfunc (err *Error) Error() string {\n\tmsg := err.Message\n\tif msg == \"\" {\n\t\tsplit := strings.Split(err.Description, \": \")\n\t\tif len(split) == 2 {\n\t\t\tmsg = split[1]\n\t\t} else {\n\t\t\tmsg = err.Description\n\t\t}\n\t}\n\treturn fmt.Sprintf(\"telegram: %s (%d)\", msg, err.Code)\n}\n\n// Error implements error interface.\nfunc (err FloodError) Error() string {\n\treturn err.err.Error()\n}\n\n// Error implements error interface.\nfunc (err GroupError) Error() string {\n\treturn err.err.Error()\n}\n\n// NewError returns new Error instance with given description.\n// First element of msgs is Description. The second is optional Message.\nfunc NewError(code int, msgs ...string) *Error {\n\terr := &Error{Code: code}\n\tif len(msgs) >= 1 {\n\t\terr.Description = msgs[0]\n\t}\n\tif len(msgs) >= 2 {\n\t\terr.Message = msgs[1]\n\t}\n\treturn err\n}\n\n// General errors\nvar (\n\tErrTooLarge     = NewError(400, \"Request Entity Too Large\")\n\tErrUnauthorized = NewError(401, \"Unauthorized\")\n\tErrNotFound     = NewError(404, \"Not Found\")\n\tErrInternal     = NewError(500, \"Internal Server Error\")\n)\n\n// Bad request errors\nvar (\n\tErrBadButtonData          = NewError(400, \"Bad Request: BUTTON_DATA_INVALID\")\n\tErrBadUserID              = NewError(400, \"Bad Request: USER_ID_INVALID\")\n\tErrBadPollOptions         = NewError(400, \"Bad Request: expected an Array of String as options\")\n\tErrBadURLContent          = NewError(400, \"Bad Request: failed to get HTTP URL content\")\n\tErrCantEditMessage        = NewError(400, \"Bad Request: message can't be edited\")\n\tErrCantRemoveOwner        = NewError(400, \"Bad Request: can't remove chat owner\")\n\tErrCantUploadFile         = NewError(400, \"Bad Request: can't upload file by URL\")\n\tErrCantUseMediaInAlbum    = NewError(400, \"Bad Request: can't use the media of the specified type in the album\")\n\tErrChatAboutNotModified   = NewError(400, \"Bad Request: chat description is not modified\")\n\tErrChatNotFound           = NewError(400, \"Bad Request: chat not found\")\n\tErrEmptyChatID            = NewError(400, \"Bad Request: chat_id is empty\")\n\tErrEmptyMessage           = NewError(400, \"Bad Request: message must be non-empty\")\n\tErrEmptyText              = NewError(400, \"Bad Request: text is empty\")\n\tErrFailedImageProcess     = NewError(400, \"Bad Request: IMAGE_PROCESS_FAILED\", \"Image process failed\")\n\tErrGroupMigrated          = NewError(400, \"Bad Request: group chat was upgraded to a supergroup chat\")\n\tErrMessageNotModified     = NewError(400, \"Bad Request: message is not modified\")\n\tErrNoRightsToDelete       = NewError(400, \"Bad Request: message can't be deleted\")\n\tErrNoRightsToRestrict     = NewError(400, \"Bad Request: not enough rights to restrict/unrestrict chat member\")\n\tErrNoRightsToSend         = NewError(400, \"Bad Request: have no rights to send a message\")\n\tErrNoRightsToSendGifs     = NewError(400, \"Bad Request: CHAT_SEND_GIFS_FORBIDDEN\", \"sending GIFS is not allowed in this chat\")\n\tErrNoRightsToSendPhoto    = NewError(400, \"Bad Request: not enough rights to send photos to the chat\")\n\tErrNoRightsToSendStickers = NewError(400, \"Bad Request: not enough rights to send stickers to the chat\")\n\tErrNotFoundToDelete       = NewError(400, \"Bad Request: message to delete not found\")\n\tErrNotFoundToForward      = NewError(400, \"Bad Request: message to forward not found\")\n\tErrNotFoundToReply        = NewError(400, \"Bad Request: reply message not found\")\n\tErrQueryTooOld            = NewError(400, \"Bad Request: query is too old and response timeout expired or query ID is invalid\")\n\tErrSameMessageContent     = NewError(400, \"Bad Request: message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message\")\n\tErrStickerEmojisInvalid   = NewError(400, \"Bad Request: invalid sticker emojis\")\n\tErrStickerSetInvalid      = NewError(400, \"Bad Request: STICKERSET_INVALID\", \"Stickerset is invalid\")\n\tErrStickerSetInvalidName  = NewError(400, \"Bad Request: invalid sticker set name is specified\")\n\tErrStickerSetNameOccupied = NewError(400, \"Bad Request: sticker set name is already occupied\")\n\tErrTooLongMarkup          = NewError(400, \"Bad Request: reply markup is too long\")\n\tErrTooLongMessage         = NewError(400, \"Bad Request: message is too long\")\n\tErrUserIsAdmin            = NewError(400, \"Bad Request: user is an administrator of the chat\")\n\tErrWrongFileID            = NewError(400, \"Bad Request: wrong file identifier/HTTP URL specified\")\n\tErrWrongFileIDCharacter   = NewError(400, \"Bad Request: wrong remote file id specified: Wrong character in the string\")\n\tErrWrongFileIDLength      = NewError(400, \"Bad Request: wrong remote file id specified: Wrong string length\")\n\tErrWrongFileIDPadding     = NewError(400, \"Bad Request: wrong remote file id specified: Wrong padding in the string\")\n\tErrWrongFileIDSymbol      = NewError(400, \"Bad Request: wrong remote file id specified: can't unserialize it. Wrong last symbol\")\n\tErrWrongTypeOfContent     = NewError(400, \"Bad Request: wrong type of the web page content\")\n\tErrWrongURL               = NewError(400, \"Bad Request: wrong HTTP URL specified\")\n\tErrForwardMessage         = NewError(400, \"Bad Request: administrators of the chat restricted message forwarding\")\n\tErrUserAlreadyParticipant = NewError(400, \"Bad Request: USER_ALREADY_PARTICIPANT\", \"User is already a participant\")\n\tErrHideRequesterMissing   = NewError(400, \"Bad Request: HIDE_REQUESTER_MISSING\")\n\tErrChannelsTooMuch        = NewError(400, \"Bad Request: CHANNELS_TOO_MUCH\")\n\tErrChannelsTooMuchUser    = NewError(400, \"Bad Request: USER_CHANNELS_TOO_MUCH\")\n)\n\n// Forbidden errors\nvar (\n\tErrBlockedByUser        = NewError(403, \"Forbidden: bot was blocked by the user\")\n\tErrKickedFromGroup      = NewError(403, \"Forbidden: bot was kicked from the group chat\")\n\tErrKickedFromSuperGroup = NewError(403, \"Forbidden: bot was kicked from the supergroup chat\")\n\tErrKickedFromChannel    = NewError(403, \"Forbidden: bot was kicked from the channel chat\")\n\tErrNotStartedByUser     = NewError(403, \"Forbidden: bot can't initiate conversation with a user\")\n\tErrUserIsDeactivated    = NewError(403, \"Forbidden: user is deactivated\")\n\tErrNotChannelMember     = NewError(403, \"Forbidden: bot is not a member of the channel chat\")\n)\n\n// Err returns Error instance by given description.\nfunc Err(s string) error {\n\tswitch s {\n\tcase ErrTooLarge.ʔ():\n\t\treturn ErrTooLarge\n\tcase ErrUnauthorized.ʔ():\n\t\treturn ErrUnauthorized\n\tcase ErrNotFound.ʔ():\n\t\treturn ErrNotFound\n\tcase ErrInternal.ʔ():\n\t\treturn ErrInternal\n\tcase ErrBadButtonData.ʔ():\n\t\treturn ErrBadButtonData\n\tcase ErrBadUserID.ʔ():\n\t\treturn ErrBadUserID\n\tcase ErrBadPollOptions.ʔ():\n\t\treturn ErrBadPollOptions\n\tcase ErrBadURLContent.ʔ():\n\t\treturn ErrBadURLContent\n\tcase ErrCantEditMessage.ʔ():\n\t\treturn ErrCantEditMessage\n\tcase ErrCantRemoveOwner.ʔ():\n\t\treturn ErrCantRemoveOwner\n\tcase ErrCantUploadFile.ʔ():\n\t\treturn ErrCantUploadFile\n\tcase ErrCantUseMediaInAlbum.ʔ():\n\t\treturn ErrCantUseMediaInAlbum\n\tcase ErrChatAboutNotModified.ʔ():\n\t\treturn ErrChatAboutNotModified\n\tcase ErrChatNotFound.ʔ():\n\t\treturn ErrChatNotFound\n\tcase ErrEmptyChatID.ʔ():\n\t\treturn ErrEmptyChatID\n\tcase ErrEmptyMessage.ʔ():\n\t\treturn ErrEmptyMessage\n\tcase ErrEmptyText.ʔ():\n\t\treturn ErrEmptyText\n\tcase ErrFailedImageProcess.ʔ():\n\t\treturn ErrFailedImageProcess\n\tcase ErrGroupMigrated.ʔ():\n\t\treturn ErrGroupMigrated\n\tcase ErrMessageNotModified.ʔ():\n\t\treturn ErrMessageNotModified\n\tcase ErrNoRightsToDelete.ʔ():\n\t\treturn ErrNoRightsToDelete\n\tcase ErrNoRightsToRestrict.ʔ():\n\t\treturn ErrNoRightsToRestrict\n\tcase ErrNoRightsToSend.ʔ():\n\t\treturn ErrNoRightsToSend\n\tcase ErrNoRightsToSendGifs.ʔ():\n\t\treturn ErrNoRightsToSendGifs\n\tcase ErrNoRightsToSendPhoto.ʔ():\n\t\treturn ErrNoRightsToSendPhoto\n\tcase ErrNoRightsToSendStickers.ʔ():\n\t\treturn ErrNoRightsToSendStickers\n\tcase ErrNotFoundToDelete.ʔ():\n\t\treturn ErrNotFoundToDelete\n\tcase ErrNotFoundToForward.ʔ():\n\t\treturn ErrNotFoundToForward\n\tcase ErrNotFoundToReply.ʔ():\n\t\treturn ErrNotFoundToReply\n\tcase ErrQueryTooOld.ʔ():\n\t\treturn ErrQueryTooOld\n\tcase ErrSameMessageContent.ʔ():\n\t\treturn ErrSameMessageContent\n\tcase ErrStickerEmojisInvalid.ʔ():\n\t\treturn ErrStickerEmojisInvalid\n\tcase ErrStickerSetInvalid.ʔ():\n\t\treturn ErrStickerSetInvalid\n\tcase ErrStickerSetInvalidName.ʔ():\n\t\treturn ErrStickerSetInvalidName\n\tcase ErrStickerSetNameOccupied.ʔ():\n\t\treturn ErrStickerSetNameOccupied\n\tcase ErrTooLongMarkup.ʔ():\n\t\treturn ErrTooLongMarkup\n\tcase ErrTooLongMessage.ʔ():\n\t\treturn ErrTooLongMessage\n\tcase ErrUserIsAdmin.ʔ():\n\t\treturn ErrUserIsAdmin\n\tcase ErrWrongFileID.ʔ():\n\t\treturn ErrWrongFileID\n\tcase ErrWrongFileIDCharacter.ʔ():\n\t\treturn ErrWrongFileIDCharacter\n\tcase ErrWrongFileIDLength.ʔ():\n\t\treturn ErrWrongFileIDLength\n\tcase ErrWrongFileIDPadding.ʔ():\n\t\treturn ErrWrongFileIDPadding\n\tcase ErrWrongFileIDSymbol.ʔ():\n\t\treturn ErrWrongFileIDSymbol\n\tcase ErrWrongTypeOfContent.ʔ():\n\t\treturn ErrWrongTypeOfContent\n\tcase ErrWrongURL.ʔ():\n\t\treturn ErrWrongURL\n\tcase ErrBlockedByUser.ʔ():\n\t\treturn ErrBlockedByUser\n\tcase ErrKickedFromGroup.ʔ():\n\t\treturn ErrKickedFromGroup\n\tcase ErrKickedFromSuperGroup.ʔ():\n\t\treturn ErrKickedFromSuperGroup\n\tcase ErrKickedFromChannel.ʔ():\n\t\treturn ErrKickedFromChannel\n\tcase ErrNotStartedByUser.ʔ():\n\t\treturn ErrNotStartedByUser\n\tcase ErrUserIsDeactivated.ʔ():\n\t\treturn ErrUserIsDeactivated\n\tcase ErrForwardMessage.ʔ():\n\t\treturn ErrForwardMessage\n\tcase ErrUserAlreadyParticipant.ʔ():\n\t\treturn ErrUserAlreadyParticipant\n\tcase ErrHideRequesterMissing.ʔ():\n\t\treturn ErrHideRequesterMissing\n\tcase ErrChannelsTooMuch.ʔ():\n\t\treturn ErrChannelsTooMuch\n\tcase ErrChannelsTooMuchUser.ʔ():\n\t\treturn ErrChannelsTooMuchUser\n\tcase ErrNotChannelMember.ʔ():\n\t\treturn ErrNotChannelMember\n\tdefault:\n\t\treturn nil\n\t}\n}\n\n// ErrIs checks if the error with given description matches an error err.\nfunc ErrIs(s string, err error) bool {\n\treturn errors.Is(err, Err(s))\n}\n\n// wrapError returns new wrapped telebot-related error.\nfunc wrapError(err error) error {\n\treturn fmt.Errorf(\"telebot: %w\", err)\n}\n"
        },
        {
          "name": "file.go",
          "type": "blob",
          "size": 2.2744140625,
          "content": "package telebot\n\nimport (\n\t\"io\"\n\t\"os\"\n)\n\n// File object represents any sort of file.\ntype File struct {\n\tFileID   string `json:\"file_id\"`\n\tUniqueID string `json:\"file_unique_id\"`\n\tFileSize int64  `json:\"file_size\"`\n\n\t// FilePath is used for files on Telegram server.\n\tFilePath string `json:\"file_path\"`\n\n\t// FileLocal is used for files on local file system.\n\tFileLocal string `json:\"file_local\"`\n\n\t// FileURL is used for file on the internet.\n\tFileURL string `json:\"file_url\"`\n\n\t// FileReader is used for file backed with io.Reader.\n\tFileReader io.Reader `json:\"-\"`\n\n\tfileName string\n}\n\n// FromDisk constructs a new local (on-disk) file object.\n//\n// Note, it returns File, not *File for a very good reason:\n// in telebot, File is pretty much an embeddable struct,\n// so upon uploading media you'll need to set embedded File\n// with something. NewFile() returning File makes it a one-liner.\n//\n//\t\tphoto := &tele.Photo{File: tele.FromDisk(\"chicken.jpg\")}\n//\nfunc FromDisk(filename string) File {\n\treturn File{FileLocal: filename}\n}\n\n// FromURL constructs a new file on provided HTTP URL.\n//\n// Note, it returns File, not *File for a very good reason:\n// in telebot, File is pretty much an embeddable struct,\n// so upon uploading media you'll need to set embedded File\n// with something. NewFile() returning File makes it a one-liner.\n//\n//\t\tphoto := &tele.Photo{File: tele.FromURL(\"https://site.com/picture.jpg\")}\n//\nfunc FromURL(url string) File {\n\treturn File{FileURL: url}\n}\n\n// FromReader constructs a new file from io.Reader.\n//\n// Note, it returns File, not *File for a very good reason:\n// in telebot, File is pretty much an embeddable struct,\n// so upon uploading media you'll need to set embedded File\n// with something. NewFile() returning File makes it a one-liner.\n//\n//\t\tphoto := &tele.Photo{File: tele.FromReader(bytes.NewReader(...))}\n//\nfunc FromReader(reader io.Reader) File {\n\treturn File{FileReader: reader}\n}\n\nfunc (f *File) stealRef(g *File) {\n\tif g.OnDisk() {\n\t\tf.FileLocal = g.FileLocal\n\t}\n\n\tif g.FileURL != \"\" {\n\t\tf.FileURL = g.FileURL\n\t}\n}\n\n// InCloud tells whether the file is present on Telegram servers.\nfunc (f *File) InCloud() bool {\n\treturn f.FileID != \"\"\n}\n\n// OnDisk will return true if file is present on disk.\nfunc (f *File) OnDisk() bool {\n\t_, err := os.Stat(f.FileLocal)\n\treturn err == nil\n}\n"
        },
        {
          "name": "file_test.go",
          "type": "blob",
          "size": 0.5263671875,
          "content": "package telebot\n\nimport (\n\t\"io\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestFile(t *testing.T) {\n\tf := FromDisk(\"telebot.go\")\n\tg := FromURL(\"http://\")\n\n\tassert.True(t, f.OnDisk())\n\tassert.True(t, (&File{FileID: \"1\"}).InCloud())\n\tassert.Equal(t, File{FileLocal: \"telebot.go\"}, f)\n\tassert.Equal(t, File{FileURL: \"http://\"}, g)\n\tassert.Equal(t, File{FileReader: io.Reader(nil)}, FromReader(io.Reader(nil)))\n\n\tg.stealRef(&f)\n\tf.stealRef(&g)\n\tassert.Equal(t, g.FileLocal, f.FileLocal)\n\tassert.Equal(t, f.FileURL, g.FileURL)\n}\n"
        },
        {
          "name": "game.go",
          "type": "blob",
          "size": 2.5703125,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"strconv\"\n)\n\n// Game object represents a game.\n// Their short names acts as unique identifiers.\ntype Game struct {\n\tName string `json:\"game_short_name\"`\n\n\tTitle       string `json:\"title\"`\n\tDescription string `json:\"description\"`\n\tPhoto       *Photo `json:\"photo\"`\n\n\t// (Optional)\n\tText      string          `json:\"text\"`\n\tEntities  []MessageEntity `json:\"text_entities\"`\n\tAnimation *Animation      `json:\"animation\"`\n}\n\n// CallbackGame is a placeholder, currently holds no information\ntype CallbackGame struct {\n}\n\n// GameHighScore object represents one row\n// of the high scores table for a game.\ntype GameHighScore struct {\n\tUser     *User `json:\"user\"`\n\tPosition int   `json:\"position\"`\n\n\tScore  int  `json:\"score\"`\n\tForce  bool `json:\"force\"`\n\tNoEdit bool `json:\"disable_edit_message\"`\n}\n\n// GameScores returns the score of the specified user\n// and several of their neighbors in a game.\n//\n// This function will panic upon nil Editable.\n//\n// Currently, it returns scores for the target user,\n// plus two of their closest neighbors on each side.\n// Will also return the top three users\n// if the user and his neighbors are not among them.\nfunc (b *Bot) GameScores(user Recipient, msg Editable) ([]GameHighScore, error) {\n\tmsgID, chatID := msg.MessageSig()\n\n\tparams := map[string]string{\n\t\t\"user_id\": user.Recipient(),\n\t}\n\n\tif chatID == 0 { // if inline message\n\t\tparams[\"inline_message_id\"] = msgID\n\t} else {\n\t\tparams[\"chat_id\"] = strconv.FormatInt(chatID, 10)\n\t\tparams[\"message_id\"] = msgID\n\t}\n\n\tdata, err := b.Raw(\"getGameHighScores\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult []GameHighScore\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp.Result, nil\n}\n\n// SetGameScore sets the score of the specified user in a game.\n//\n// If the message was sent by the bot, returns the edited Message,\n// otherwise returns nil and ErrTrueResult.\nfunc (b *Bot) SetGameScore(user Recipient, msg Editable, score GameHighScore) (*Message, error) {\n\tmsgID, chatID := msg.MessageSig()\n\n\tparams := map[string]string{\n\t\t\"user_id\":              user.Recipient(),\n\t\t\"score\":                strconv.Itoa(score.Score),\n\t\t\"force\":                strconv.FormatBool(score.Force),\n\t\t\"disable_edit_message\": strconv.FormatBool(score.NoEdit),\n\t}\n\n\tif chatID == 0 { // if inline message\n\t\tparams[\"inline_message_id\"] = msgID\n\t} else {\n\t\tparams[\"chat_id\"] = strconv.FormatInt(chatID, 10)\n\t\tparams[\"message_id\"] = msgID\n\t}\n\n\tdata, err := b.Raw(\"setGameScore\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn extractMessage(data)\n}\n"
        },
        {
          "name": "giveaway.go",
          "type": "blob",
          "size": 3.830078125,
          "content": "package telebot\n\nimport \"time\"\n\n// Giveaway represents a message about a scheduled giveaway.\ntype Giveaway struct {\n\t// The list of chats which the user must join to participate in the giveaway.\n\tChats []Chat `json:\"chats\"`\n\n\t// Point in time (Unix timestamp) when winners of the giveaway will be selected.\n\tSelectionUnixtime int64 `json:\"winners_selection_date\"`\n\n\t// The number of users which are supposed to be selected as winners of the giveaway.\n\tWinnerCount int `json:\"winner_count\"`\n\n\t// (Optional) True, if only users who join the chats after the giveaway\n\t// started should be eligible to win.\n\tOnlyNewMembers bool `json:\"only_new_members\"`\n\n\t// (Optional) True, if the list of giveaway winners will be visible to everyone.\n\tHasPublicWinners bool `json:\"has_public_winners\"`\n\n\t// (Optional) Description of additional giveaway prize.\n\tPrizeDescription string `json:\"prize_description\"`\n\n\t// (Optional) A list of two-letter ISO 3166-1 alpha-2 country codes indicating\n\t// the countries from which eligible users for the giveaway must come.\n\t// If empty, then all users can participate in the giveaway. Users with a phone number\n\t// that was bought on Fragment can always participate in giveaways.\n\tCountryCodes []string `json:\"country_codes\"`\n\n\t// (Optional) The number of months the Telegram Premium subscription won from\n\t// the giveaway will be active for.\n\tPremiumMonthCount int `json:\"premium_subscription_month_count\"`\n}\n\n// SelectionDate returns the moment of when winners of the giveaway were selected in local time.\nfunc (g *Giveaway) SelectionDate() time.Time {\n\treturn time.Unix(g.SelectionUnixtime, 0)\n}\n\n// GiveawayWinners object represents a message about the completion of a\n// giveaway with public winners.\ntype GiveawayWinners struct {\n\t// The chat that created the giveaway.\n\tChat *Chat `json:\"chat\"`\n\n\t// Identifier of the message with the giveaway in the chat.\n\tMessageID int `json:\"message_id\"`\n\n\t// Point in time (Unix timestamp) when winners of the giveaway were selected.\n\tSelectionUnixtime int64 `json:\"winners_selection_date\"`\n\n\t// The number of users which are supposed to be selected as winners of the giveaway.\n\tWinnerCount int `json:\"winner_count\"`\n\n\t// List of up to 100 winners of the giveaway.\n\tWinners []User `json:\"winners\"`\n\n\t// (Optional) The number of other chats the user had to join in order\n\t// to be eligible for the giveaway.\n\tAdditionalChats int `json:\"additional_chat_count\"`\n\n\t// (Optional) The number of months the Telegram Premium subscription won from\n\t// the giveaway will be active for.\n\tPremiumMonthCount int `json:\"premium_subscription_month_count\"`\n\n\t// (Optional) Number of undistributed prizes.\n\tUnclaimedPrizes int `json:\"unclaimed_prize_count\"`\n\n\t// (Optional) True, if only users who had joined the chats after the giveaway started\n\t// were eligible to win.\n\tOnlyNewMembers bool `json:\"only_new_members\"`\n\n\t// (Optional) True, if the giveaway was canceled because the payment for it was refunded.\n\tRefunded bool `json:\"was_refunded\"`\n\n\t// (Optional) Description of additional giveaway prize.\n\tPrizeDescription string `json:\"prize_description\"`\n}\n\n// SelectionDate returns the moment of when winners of the giveaway\n// were selected in local time.\nfunc (g *GiveawayWinners) SelectionDate() time.Time {\n\treturn time.Unix(g.SelectionUnixtime, 0)\n}\n\n// GiveawayCreated represents a service message about the creation of a scheduled giveaway.\n// Currently holds no information.\ntype GiveawayCreated struct{}\n\n// GiveawayCompleted represents a service message about the completion of a\n// giveaway without public winners.\ntype GiveawayCompleted struct {\n\t// Number of winners in the giveaway.\n\tWinnerCount int `json:\"winner_count\"`\n\n\t// (Optional) Number of undistributed prizes.\n\tUnclaimedPrizes int `json:\"unclaimed_prize_count\"`\n\n\t// (Optional) Message with the giveaway that was completed, if it wasn't deleted.\n\tMessage *Message `json:\"giveaway_message\"`\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.146484375,
          "content": "module gopkg.in/telebot.v4\n\ngo 1.16\n\nrequire (\n\tgithub.com/goccy/go-yaml v1.9.5\n\tgithub.com/spf13/viper v1.13.0\n\tgithub.com/stretchr/testify v1.8.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 85.96875,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=\ncloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=\ncloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.44.3/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.45.1/go.mod h1:RpBamKRgapWJb87xiFSdk4g1CME7QZg3uwTez+TSTjc=\ncloud.google.com/go v0.46.3/go.mod h1:a6bKKbmY7er1mI7TEI4lsAkts/mkhTSZK8w33B4RAg0=\ncloud.google.com/go v0.50.0/go.mod h1:r9sluTvynVuxRIOHXQEHMFffphuXHOMZMycpNR5e6To=\ncloud.google.com/go v0.52.0/go.mod h1:pXajvRH/6o3+F9jDHZWQ5PbGhn+o8w9qiu/CffaVdO4=\ncloud.google.com/go v0.53.0/go.mod h1:fp/UouUEsRkN6ryDKNW/Upv/JBKnv6WDthjR6+vze6M=\ncloud.google.com/go v0.54.0/go.mod h1:1rq2OEkV3YMf6n/9ZvGWI3GWw0VoqH/1x2nd8Is/bPc=\ncloud.google.com/go v0.56.0/go.mod h1:jr7tqZxxKOVYizybht9+26Z/gUq7tiRzu+ACVAMbKVk=\ncloud.google.com/go v0.57.0/go.mod h1:oXiQ6Rzq3RAkkY7N6t3TcE6jE+CIBBbA36lwQ1JyzZs=\ncloud.google.com/go v0.62.0/go.mod h1:jmCYTdRCQuc1PHIIJ/maLInMho30T/Y0M4hTdTShOYc=\ncloud.google.com/go v0.65.0/go.mod h1:O5N8zS7uWy9vkA9vayVHs65eM1ubvY4h553ofrNHObY=\ncloud.google.com/go v0.72.0/go.mod h1:M+5Vjvlc2wnp6tjzE102Dw08nGShTscUx2nZMufOKPI=\ncloud.google.com/go v0.74.0/go.mod h1:VV1xSbzvo+9QJOxLDaJfTjx5e+MePCpCWwvftOeQmWk=\ncloud.google.com/go v0.75.0/go.mod h1:VGuuCn7PG0dwsd5XPVm2Mm3wlh3EL55/79EKB6hlPTY=\ncloud.google.com/go v0.78.0/go.mod h1:QjdrLG0uq+YwhjoVOLsS1t7TW8fs36kLs4XO5R5ECHg=\ncloud.google.com/go v0.79.0/go.mod h1:3bzgcEeQlzbuEAYu4mrWhKqWjmpprinYgKJLgKHnbb8=\ncloud.google.com/go v0.81.0/go.mod h1:mk/AM35KwGk/Nm2YSeZbxXdrNK3KZOYHmLkOqC2V6E0=\ncloud.google.com/go v0.83.0/go.mod h1:Z7MJUsANfY0pYPdw0lbnivPx4/vhy/e2FEkSkF7vAVY=\ncloud.google.com/go v0.84.0/go.mod h1:RazrYuxIK6Kb7YrzzhPoLmCVzl7Sup4NrbKPg8KHSUM=\ncloud.google.com/go v0.87.0/go.mod h1:TpDYlFy7vuLzZMMZ+B6iRiELaY7z/gJPaqbMx6mlWcY=\ncloud.google.com/go v0.90.0/go.mod h1:kRX0mNRHe0e2rC6oNakvwQqzyDmg57xJ+SZU1eT2aDQ=\ncloud.google.com/go v0.93.3/go.mod h1:8utlLll2EF5XMAV15woO4lSbWQlk8rer9aLOfLh7+YI=\ncloud.google.com/go v0.94.1/go.mod h1:qAlAugsXlC+JWO+Bke5vCtc9ONxjQT3drlTTnAplMW4=\ncloud.google.com/go v0.97.0/go.mod h1:GF7l59pYBVlXQIBLx3a761cZ41F9bBH3JUlihCt2Udc=\ncloud.google.com/go v0.99.0/go.mod h1:w0Xx2nLzqWJPuozYQX+hFfCSI8WioryfRDzkoI/Y2ZA=\ncloud.google.com/go v0.100.2/go.mod h1:4Xra9TjzAeYHrl5+oeLlzbM2k3mjVhZh4UqTZ//w99A=\ncloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=\ncloud.google.com/go/bigquery v1.3.0/go.mod h1:PjpwJnslEMmckchkHFfq+HTD2DmtT67aNFKH1/VBDHE=\ncloud.google.com/go/bigquery v1.4.0/go.mod h1:S8dzgnTigyfTmLBfrtrhyYhwRxG72rYxvftPBK2Dvzc=\ncloud.google.com/go/bigquery v1.5.0/go.mod h1:snEHRnqQbz117VIFhE8bmtwIDY80NLUZUMb4Nv6dBIg=\ncloud.google.com/go/bigquery v1.7.0/go.mod h1://okPTzCYNXSlb24MZs83e2Do+h+VXtc4gLoIoXIAPc=\ncloud.google.com/go/bigquery v1.8.0/go.mod h1:J5hqkt3O0uAFnINi6JXValWIb1v0goeZM77hZzJN/fQ=\ncloud.google.com/go/compute v0.1.0/go.mod h1:GAesmwr110a34z04OlxYkATPBEfVhkymfTBXtfbBFow=\ncloud.google.com/go/compute v1.3.0/go.mod h1:cCZiE1NHEtai4wiufUhW8I8S1JKkAnhnQJWM7YD99wM=\ncloud.google.com/go/compute v1.5.0/go.mod h1:9SMHyhJlzhlkJqrPAc839t2BZFTSk6Jdj6mkzQJeu0M=\ncloud.google.com/go/compute v1.6.0/go.mod h1:T29tfhtVbq1wvAPo0E3+7vhgmkOYeXjhFvz/FMzPu0s=\ncloud.google.com/go/compute v1.6.1/go.mod h1:g85FgpzFvNULZ+S8AYq87axRKuf2Kh7deLqV/jJ3thU=\ncloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=\ncloud.google.com/go/datastore v1.1.0/go.mod h1:umbIZjpQpHh4hmRpGhH4tLFup+FVzqBi1b3c64qFpCk=\ncloud.google.com/go/firestore v1.6.1/go.mod h1:asNXNOzBdyVQmEU+ggO8UPodTkEVFW5Qx+rwHnAz+EY=\ncloud.google.com/go/pubsub v1.0.1/go.mod h1:R0Gpsv3s54REJCy4fxDixWD93lHJMoZTyQ2kNxGRt3I=\ncloud.google.com/go/pubsub v1.1.0/go.mod h1:EwwdRX2sKPjnvnqCa270oGRyludottCI76h+R3AArQw=\ncloud.google.com/go/pubsub v1.2.0/go.mod h1:jhfEVHT8odbXTkndysNHCcx0awwzvfOlguIAii9o8iA=\ncloud.google.com/go/pubsub v1.3.1/go.mod h1:i+ucay31+CNRpDW4Lu78I4xXG+O1r/MAHgjpRVR+TSU=\ncloud.google.com/go/storage v1.0.0/go.mod h1:IhtSnM/ZTZV8YYJWCY8RULGVqBDmpoyjwiyrjsg+URw=\ncloud.google.com/go/storage v1.5.0/go.mod h1:tpKbwo567HUNpVclU5sGELwQWBDZ8gh0ZeosJ0Rtdos=\ncloud.google.com/go/storage v1.6.0/go.mod h1:N7U0C8pVQ/+NIKOBQyamJIeKQKkZ+mxpohlUTyfDhBk=\ncloud.google.com/go/storage v1.8.0/go.mod h1:Wv1Oy7z6Yz3DshWRJFhqM/UCfaWIRTdp0RXyy7KQOVs=\ncloud.google.com/go/storage v1.10.0/go.mod h1:FLPqc6j+Ki4BU591ie1oL6qBQGu2Bl/tZ9ullr3+Kg0=\ncloud.google.com/go/storage v1.14.0/go.mod h1:GrKmX003DSIwi9o29oFT7YDnHYwZoctc3fOKtUw0Xmo=\ndmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=\ngithub.com/DataDog/datadog-go v3.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=\ngithub.com/OneOfOne/xxhash v1.2.2/go.mod h1:HSdplMjZKSmBqAxg5vPj2TmRDmfkzw+cTzAElWljhcU=\ngithub.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alecthomas/units v0.0.0-20190924025748-f65c72e2690d/go.mod h1:rBZYJk541a8SKzHPHnH3zbiI+7dagKZ0cgpgrD7Fyho=\ngithub.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=\ngithub.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e/go.mod h1:3U/XgcO3hCbHZ8TKRvWD2dDTCfh9M9ya+I9JpbB7O8o=\ngithub.com/armon/go-metrics v0.0.0-20180917152333-f0300d1749da/go.mod h1:Q73ZrmVTwzkszR9V5SSuryQ31EELlFMUz1kKyl939pY=\ngithub.com/armon/go-metrics v0.3.10/go.mod h1:4O98XIr/9W0sxpJ8UaYkvjk10Iff7SnFrb4QAOwNTFc=\ngithub.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=\ngithub.com/armon/go-radix v1.0.0/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=\ngithub.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/circonus-labs/circonus-gometrics v2.3.1+incompatible/go.mod h1:nmEj6Dob7S7YxXgwXpfOuvO54S+tGdZdw9fuRZt25Ag=\ngithub.com/circonus-labs/circonusllhist v0.1.3/go.mod h1:kMXHVDlOchFAehlya5ePtbp5jckzBHf4XRpQvBOLI+I=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/cncf/udpa/go v0.0.0-20200629203442-efcf912fb354/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\ngithub.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\ngithub.com/cncf/udpa/go v0.0.0-20210930031921-04548b0d99d4/go.mod h1:6pvJx4me5XPnfI9Z40ddWsdw2W/uZgQLFXToKeRcDiI=\ngithub.com/cncf/xds/go v0.0.0-20210312221358-fbca930ec8ed/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cncf/xds/go v0.0.0-20210805033703-aa0b78936158/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cncf/xds/go v0.0.0-20210922020428-25de7278fc84/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cncf/xds/go v0.0.0-20211001041855-01bcc9b48dfe/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cncf/xds/go v0.0.0-20211011173535-cb28da3451f1/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/coreos/go-semver v0.3.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/go-control-plane v0.9.7/go.mod h1:cwu0lG7PUMfa9snN8LXBig5ynNVH9qI8YYLbd1fK2po=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20201210154907-fd9021fe5dad/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20210217033140-668b12f5399d/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20210512163311-63b5d3c536b0/go.mod h1:hliV/p42l8fGbc6Y9bQ70uLwIvmJyVE5k4iMKlh8wCQ=\ngithub.com/envoyproxy/go-control-plane v0.9.10-0.20210907150352-cf90f659a021/go.mod h1:AFq3mo9L8Lqqiid3OhADV3RfLJnjiw63cSpi+fDTRC0=\ngithub.com/envoyproxy/go-control-plane v0.10.2-0.20220325020618-49ff273808a1/go.mod h1:KJwIaB5Mv44NWtYuAOFCVOjcI94vtpEz2JU/D2v6IjE=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=\ngithub.com/fatih/color v1.9.0/go.mod h1:eQcE1qtQxscV5RaZvpXrrb8Drkc3/DdQ+uUYCNjL+zU=\ngithub.com/fatih/color v1.10.0/go.mod h1:ELkj/draVOlAH/xkhN6mQ50Qd0MPOk5AAr3maGEBuJM=\ngithub.com/fatih/color v1.13.0 h1:8LOYc1KYPPmyKMuN8QV2DNRWNbLo6LZ0iLs8+mlH53w=\ngithub.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=\ngithub.com/frankban/quicktest v1.14.3 h1:FJKSZTDHjyhriyC81FLQ0LY93eSai0ZyR/ZIkd3ZUKE=\ngithub.com/frankban/quicktest v1.14.3/go.mod h1:mgiwOwqx65TmIk1wJ6Q7wvnVMocbUorkibMOrVTHZps=\ngithub.com/fsnotify/fsnotify v1.5.4 h1:jRbGcIw6P2Meqdwuo0H1p6JVLbL5DHKAKlYndzMwVZI=\ngithub.com/fsnotify/fsnotify v1.5.4/go.mod h1:OVB6XrOHzAwXMpEM7uPOzcehqUV2UqJxmVXmkdnm1bU=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/log v0.1.0/go.mod h1:zbhenjAZHb184qTLMA9ZjW7ThYL0H2mk7Q6pNt4vbaY=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=\ngithub.com/go-logfmt/logfmt v0.5.0/go.mod h1:wCYkCAKZfumFQihp8CzCvQ3paCTfi41vtzG1KdI/P7A=\ngithub.com/go-playground/assert/v2 v2.0.1 h1:MsBgLAaY856+nPRTKrp3/OZK38U/wa0CcBYNjji3q3A=\ngithub.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=\ngithub.com/go-playground/locales v0.13.0 h1:HyWk6mgj5qFqCT5fjGBuRArbVDfE4hi8+e8ceBS/t7Q=\ngithub.com/go-playground/locales v0.13.0/go.mod h1:taPMhCMXrRLJO55olJkUXHZBHCxTMfnGwq/HNwmWNS8=\ngithub.com/go-playground/universal-translator v0.17.0 h1:icxd5fm+REJzpZx7ZfpaD876Lmtgy7VtROAbHHXk8no=\ngithub.com/go-playground/universal-translator v0.17.0/go.mod h1:UkSxE5sNxxRwHyU+Scu5vgOQjsIJAF8j9muTVoKLVtA=\ngithub.com/go-playground/validator/v10 v10.4.1 h1:pH2c5ADXtd66mxoE0Zm9SUhxE20r7aM3F26W0hOn+GE=\ngithub.com/go-playground/validator/v10 v10.4.1/go.mod h1:nlOn6nFhuKACm19sB/8EGNn9GlaMV7XkbRSipzJ0Ii4=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/goccy/go-yaml v1.9.5 h1:Eh/+3uk9kLxG4koCX6lRMAPS1OaMSAi+FJcya0INdB0=\ngithub.com/goccy/go-yaml v1.9.5/go.mod h1:U/jl18uSupI5rdI2jmuCswEA2htH9eXfferR3KfscvA=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=\ngithub.com/golang/mock v1.4.0/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.1/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.3/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.4/go.mod h1:l3mdAwkq5BuhzHwde/uurv3sEJeZMXNpwsxVWU71h+4=\ngithub.com/golang/mock v1.5.0/go.mod h1:CWnOUgYIOo4TcNZ0wHX3YZCqsaM1I1Jvs6v3mP3KVu8=\ngithub.com/golang/mock v1.6.0/go.mod h1:p6yTPP+5HYm5mzsMV8JkE6ZKdX+/wYM6Hr+LicevLPs=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.4/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.1/go.mod h1:DopwsBzvsk0Fs44TXzsVbJyPhcCPeIwnvohx4u74HPM=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/snappy v0.0.3/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.4.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.7/go.mod h1:n+brtR0CgQNWTVd5ZUFpTBC8YFBDLK/h/bpaJ8/DtOE=\ngithub.com/google/go-cmp v0.5.8 h1:e6P7q2lk1O+qJJb4BtCQXlK8vWEO8V1ZeuEdJNOqZyg=\ngithub.com/google/go-cmp v0.5.8/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=\ngithub.com/google/martian/v3 v3.0.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=\ngithub.com/google/martian/v3 v3.1.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=\ngithub.com/google/martian/v3 v3.2.1/go.mod h1:oBOf6HBosgwRXnUGWUB05QECsc6uvmMiJ3+6W4l/CUk=\ngithub.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20190515194954-54271f7e092f/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20191218002539-d4f498aebedc/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200212024743-f11f1df84d12/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200229191704-1ebb73c60ed3/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200430221834-fc25d7d30c6d/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200708004538-1a94d8640e99/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20201023163331-3e6fc7fc9c4c/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20201203190320-1bf35d6f28c2/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20201218002935-b9804c9f04c2/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210122040257-d980be63207e/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210226084205-cbba55b83ad5/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210601050228-01bbb1931b22/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210609004039-a478d1d731e9/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210720184732-4bb14d4b1be1/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=\ngithub.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=\ngithub.com/googleapis/gax-go/v2 v2.1.0/go.mod h1:Q3nei7sK6ybPYH7twZdmQpAd1MKb7pfu6SK+H1/DsU0=\ngithub.com/googleapis/gax-go/v2 v2.1.1/go.mod h1:hddJymUZASv3XPyGkUpKj8pPO47Rmb0eJc8R6ouapiM=\ngithub.com/googleapis/gax-go/v2 v2.2.0/go.mod h1:as02EH8zWkzwUoLbBaFeQ+arQaj/OthfcblKl4IGNaM=\ngithub.com/googleapis/gax-go/v2 v2.3.0/go.mod h1:b8LNqSzNabLiUpXKkY7HAR5jr6bIT99EXz9pXxye9YM=\ngithub.com/googleapis/gax-go/v2 v2.4.0/go.mod h1:XOTVJ59hdnfJLIP/dh8n5CGryZR2LxK9wbMD5+iXC6c=\ngithub.com/googleapis/google-cloud-go-testing v0.0.0-20200911160855-bcd43fbb19e8/go.mod h1:dvDLG8qkwmyD9a/MJJN3XJcT3xFxOKAvTZGvuZmac9g=\ngithub.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=\ngithub.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=\ngithub.com/hashicorp/consul/api v1.12.0/go.mod h1:6pVBMo0ebnYdt2S3H87XhekM/HHrUoTD2XXb/VrZVy0=\ngithub.com/hashicorp/consul/sdk v0.8.0/go.mod h1:GBvyrGALthsZObzUGsfgHZQDXjg4lOjagTIwIR1vPms=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-cleanhttp v0.5.1/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-cleanhttp v0.5.2/go.mod h1:kO/YDlP8L1346E6Sodw+PrpBSV4/SoxCXGY6BqNFT48=\ngithub.com/hashicorp/go-hclog v0.12.0/go.mod h1:whpDNt7SSdeAju8AWKIWsul05p54N/39EeqMAyrmvFQ=\ngithub.com/hashicorp/go-hclog v1.2.0/go.mod h1:whpDNt7SSdeAju8AWKIWsul05p54N/39EeqMAyrmvFQ=\ngithub.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-immutable-radix v1.3.1/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-msgpack v0.5.3/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=\ngithub.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=\ngithub.com/hashicorp/go-multierror v1.1.0/go.mod h1:spPvp8C1qA32ftKqdAHm4hHTbPw+vmowP0z+KUhOZdA=\ngithub.com/hashicorp/go-retryablehttp v0.5.3/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=\ngithub.com/hashicorp/go-rootcerts v1.0.2/go.mod h1:pqUvnprVnM5bf7AOirdbb01K4ccR319Vf4pU3K5EGc8=\ngithub.com/hashicorp/go-sockaddr v1.0.0/go.mod h1:7Xibr9yA9JjQq1JpNB2Vw7kxv8xerXegt+ozgdvDeDU=\ngithub.com/hashicorp/go-syslog v1.0.0/go.mod h1:qPfqrKkXGihmCqbJM2mZgkZGvKG1dFdvsLplgctolz4=\ngithub.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.1/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=\ngithub.com/hashicorp/mdns v1.0.4/go.mod h1:mtBihi+LeNXGtG8L9dX59gAEa12BDtBQSp4v/YAJqrc=\ngithub.com/hashicorp/memberlist v0.3.0/go.mod h1:MS2lj3INKhZjWNqd3N0m3J+Jxf3DAOnAH9VT3Sh9MUE=\ngithub.com/hashicorp/serf v0.9.6/go.mod h1:TXZNMjZQijwlDvp+r0b63xZ45H7JmCmgg4gpTwn9UV4=\ngithub.com/hashicorp/serf v0.9.7/go.mod h1:TXZNMjZQijwlDvp+r0b63xZ45H7JmCmgg4gpTwn9UV4=\ngithub.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/jpillora/backoff v1.0.0/go.mod h1:J/6gKK9jxlEcS3zixgDgUAsiuZ7yrSoa/FX5e0EB2j4=\ngithub.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.10/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.11/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=\ngithub.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=\ngithub.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=\ngithub.com/julienschmidt/httprouter v1.3.0/go.mod h1:JR6WtHb+2LUe8TCKY3cZOxFyyO8IZAc4RVcycCCAKdM=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/fs v0.1.0/go.mod h1:FFnZGqtBN9Gxj7eW1uZ42v5BccTP0vu6NEaFoC2HwRg=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.0/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.0 h1:WgNl7dwNpEZ6jJ9k1snq4pZsg7DOEN8hP9Xw0Tsjwk0=\ngithub.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/leodido/go-urn v1.2.0 h1:hpXL4XnriNwQ/ABnpepYM/1vCLWNDfUNts8dX3xTG6Y=\ngithub.com/leodido/go-urn v1.2.0/go.mod h1:+8+nEpDfqqsY+g338gtMEUOtuK+4dEMhiQEgxpxOKII=\ngithub.com/magiconair/properties v1.8.6 h1:5ibWZ6iY0NctNGWo87LalDlEZ6R41TqbbDamhfG/Qzo=\ngithub.com/magiconair/properties v1.8.6/go.mod h1:y3VJvCyxH9uVvJTWEGAELF3aiYNyPKd5NZ3oSwXrF60=\ngithub.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=\ngithub.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-colorable v0.1.6/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.8/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.12 h1:jF+Du6AlPIjs2BiUiQlKOX0rt3SujHxPnksPKZbaA40=\ngithub.com/mattn/go-colorable v0.1.12/go.mod h1:u5H1YNBxpqRaxsYJYSkiCWKzEfiAb1Gb520KVy5xxl4=\ngithub.com/mattn/go-isatty v0.0.3/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.10/go.mod h1:qgIWMr58cqv1PHHyhnkY9lrL7etaEgOFcMEpPG5Rm84=\ngithub.com/mattn/go-isatty v0.0.11/go.mod h1:PhnuNfih5lzO57/f3n+odYbM4JtupLOxQOAqxQCu2WE=\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-isatty v0.0.14 h1:yVuAays6BHfxijgZPzw+3Zlu5yQgKGP2/hcQbHb7S9Y=\ngithub.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/miekg/dns v1.1.26/go.mod h1:bPDLeHnStXmXAq1m/Ch/hvfNHr14JKNPMBo3VZKjuso=\ngithub.com/miekg/dns v1.1.41/go.mod h1:p6aan82bvRIyn+zDIv9xYNUpwa73JcSh9BKwknJysuI=\ngithub.com/mitchellh/cli v1.1.0/go.mod h1:xcISNoH86gajksDmfB23e/pu+B+GeFRMYmoHXxx3xhI=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-testing-interface v1.0.0/go.mod h1:kRemZodwjscx+RGhAo8eIhFbs2+BFgRtFPeD/KE+zxI=\ngithub.com/mitchellh/mapstructure v0.0.0-20160808181253-ca63d7c062ee/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/mitchellh/mapstructure v1.4.3/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/pascaldekloe/goe v0.0.0-20180627143212-57f6aae5913c/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=\ngithub.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=\ngithub.com/pelletier/go-toml v1.9.5 h1:4yBQzkHv+7BHq2PQUZF3Mx0IYxG7LsP222s7Agd3ve8=\ngithub.com/pelletier/go-toml v1.9.5/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=\ngithub.com/pelletier/go-toml/v2 v2.0.5 h1:ipoSadvV8oGUjnUbMub59IDPPwfxF694nG/jwbMiyQg=\ngithub.com/pelletier/go-toml/v2 v2.0.5/go.mod h1:OMHamSCAODeSsVrwwvcJOaoN0LIUIaFVNZzmWyNfXas=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/sftp v1.13.1/go.mod h1:3HaPG6Dq1ILlpPZRO0HVMrsydcdLt6HRDccSgb87qRg=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=\ngithub.com/posener/complete v1.2.3/go.mod h1:WZIdtGGp+qx0sLrYKtIRAruyNpv6hFCicSgv7Sy7s/s=\ngithub.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=\ngithub.com/prometheus/client_golang v1.4.0/go.mod h1:e9GMxYsXl05ICDXkRhurwBS4Q3OK1iX/F2sw+iXX5zU=\ngithub.com/prometheus/client_golang v1.7.1/go.mod h1:PY5Wy2awLA44sXw4AOSfFBetzPP4j5+D6mVACh+pe2M=\ngithub.com/prometheus/client_golang v1.11.1/go.mod h1:Z6t4BnS23TR94PD6BsDNk8yVqroYurpAkEiz0P2BEV0=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.9.1/go.mod h1:yhUN8i9wzaXS3w1O07YhxHEBxD+W35wd8bs7vj7HSQ4=\ngithub.com/prometheus/common v0.10.0/go.mod h1:Tlit/dnDKsSWFlCLTWaA1cyBgKHSMdTB80sz/V91rCo=\ngithub.com/prometheus/common v0.26.0/go.mod h1:M7rCNAaPfAosfx8veZJCuw84e35h3Cfd9VFqTh1DIvc=\ngithub.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.0.8/go.mod h1:7Qr8sr6344vo1JqZ6HhLceV9o3AJ1Ff+GxbHq6oeK9A=\ngithub.com/prometheus/procfs v0.1.3/go.mod h1:lV6e/gmhEcM9IjHGsFOCxxuZ+z1YqCvr4OA4YeYWdaU=\ngithub.com/prometheus/procfs v0.6.0/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=\ngithub.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=\ngithub.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.6.1 h1:/FiVV8dS/e+YqF2JvO3yXRFbBLTIuSDkuC7aBOAvL+k=\ngithub.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=\ngithub.com/ryanuber/columnize v0.0.0-20160712163229-9b3edd62028f/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=\ngithub.com/sagikazarmark/crypt v0.6.0/go.mod h1:U8+INwJo3nBv1m6A/8OBXAq7Jnpspk5AxSgDyEQcea8=\ngithub.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=\ngithub.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.6.0/go.mod h1:7uNnSEd1DgxDLC74fIahvMZmmYsHGZGEOFrfsX/uA88=\ngithub.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spf13/afero v1.8.2 h1:xehSyVa0YnHWsJ49JFljMpg1HX19V6NDZ1fkm1Xznbo=\ngithub.com/spf13/afero v1.8.2/go.mod h1:CtAatgMJh6bJEIs48Ay/FOnkljP3WeGUG0MC1RfAqwo=\ngithub.com/spf13/cast v1.5.0 h1:rj3WzYc11XZaIZMPKmwP96zkFEnnAmV8s6XbB2aY32w=\ngithub.com/spf13/cast v1.5.0/go.mod h1:SpXXQ5YoyJw6s3/6cMTQuxvgRl3PCJiyaX9p6b155UU=\ngithub.com/spf13/jwalterweatherman v1.1.0 h1:ue6voC5bR5F8YxI5S67j9i582FU4Qvo2bmqnqMYADFk=\ngithub.com/spf13/jwalterweatherman v1.1.0/go.mod h1:aNWZUN0dPAAO/Ljvb5BEdw96iTZ0EXowPYD95IqWIGo=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v1.13.0 h1:BWSJ/M+f+3nmdz9bxB+bWX28kkALN2ok11D0rSo8EJU=\ngithub.com/spf13/viper v1.13.0/go.mod h1:Icm2xNL3/8uyh/wFuB1jI7TiTNKp8632Nwegu+zgdYw=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.5/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.0 h1:pSgiaMZlXftHpm5L7V1+rVB+AZJydKsMxsQBIJw4PKk=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/subosito/gotenv v1.4.1 h1:jyEFiXpy21Wm81FBN71l9VoMMV8H8jG+qIK3GCpY6Qs=\ngithub.com/subosito/gotenv v1.4.1/go.mod h1:ayKnFf/c6rvx/2iiLrJUk1e6plDbT3edrFNGqEflhK0=\ngithub.com/tv42/httpunix v0.0.0-20150427012821-b75d8614f926/go.mod h1:9ESjWnEqriFuLhtthL60Sar/7RFoluCcXsuvEwTV5KM=\ngithub.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngo.etcd.io/etcd/api/v3 v3.5.4/go.mod h1:5GB2vv4A4AOn3yk7MftYGHkUfGtDHnEraIjym4dYz5A=\ngo.etcd.io/etcd/client/pkg/v3 v3.5.4/go.mod h1:IJHfcCEKxYu1Os13ZdwCwIUTUVGYTSAM3YSwc9/Ac1g=\ngo.etcd.io/etcd/client/v2 v2.305.4/go.mod h1:Ud+VUwIi9/uQHOMA+4ekToJ12lTxlv0zB/+DHwTGEbU=\ngo.etcd.io/etcd/client/v3 v3.5.4/go.mod h1:ZaRkVgBZC+L+dLCjTcF1hRXpgZXQPOvnA/Ak/gq3kiY=\ngo.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=\ngo.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=\ngo.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.4/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.5/go.mod h1:5pWMHQbX5EPX2/62yrJeAkowc+lfs/XD7Uxpq3pI6kk=\ngo.opencensus.io v0.23.0/go.mod h1:XItmlyltB5F7CS4xOC1DcqMoFqwtC6OG2xF7mCv7P7E=\ngo.opentelemetry.io/proto/otlp v0.7.0/go.mod h1:PqfVotwruBrMGOCsRd/89rSnXhoiJIqeYNgFYFoEGnI=\ngo.uber.org/atomic v1.7.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/multierr v1.6.0/go.mod h1:cdWPpRnG4AhwMwsgIHip0KRBQjJy5kYEpYjJxpXp9iU=\ngo.uber.org/zap v1.17.0/go.mod h1:MXVU+bhUf/A7Xi2HNOnopQOrmycQ5Ih87HtOu4q5SSo=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190923035154-9ee001bba392/go.mod h1:/lpIB1dKB+9EgE3H3cr1v9wB50oz8l4C4h62xy7jSTY=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\ngolang.org/x/crypto v0.0.0-20211108221036-ceb1ce70b4fa/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20220411220226-7b82a4e95df4 h1:kUhD7nTDoI3fVd9G4ORWrbV5NY0liEs/Jg2pv5f+bBA=\ngolang.org/x/crypto v0.0.0-20220411220226-7b82a4e95df4/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=\ngolang.org/x/exp v0.0.0-20190829153037-c13cbed26979/go.mod h1:86+5VVa7VpoJ4kLfm080zCjGlMRFzhUhsZKEZO7MGek=\ngolang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136/go.mod h1:JXzH8nQsPlswgeRAPE3MuO9GYsAcnJvJ4vnMwN/5qkY=\ngolang.org/x/exp v0.0.0-20191129062945-2f5052295587/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20191227195350-da58074b4299/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=\ngolang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=\ngolang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=\ngolang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190909230951-414d861bb4ac/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20191125180803-fdd1cda4f05f/go.mod h1:5qLYkcX4OjUUV8bRuDixDT3tpyyb+LUpUlRWLxfhWrs=\ngolang.org/x/lint v0.0.0-20200130185559-910be7a94367/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20201208152925-83fdc39ff7b5/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20210508222113-6edffad5e616/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=\ngolang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=\ngolang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=\ngolang.org/x/mod v0.1.0/go.mod h1:0QHyrYULN0/3qlju5TqG8bIK38QM8yzMo5ekMj3DlcY=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.1.1-0.20191107180719-034126e5016b/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.1/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190628185345-da137c7871d7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200222125558-5a598a2470a0/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200301022130-244492dfa37a/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200501053045-e0ff5e5a1de5/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200506145744-7e3656a0809f/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200513185701-a91f0712d120/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201031054903-ff519b6c9102/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201209123823-ac852fbbde11/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20201224014010-6772e930b67b/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210119194325-5f4716e94777/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210316092652-d523dce5a7f4/go.mod h1:RBQZq4jEuRlivfhVLdyRGr576XBO4/greRjx4P4O3yc=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.0.0-20210410081132-afb366fc7cd1/go.mod h1:9tjilg8BloeKEkVJvy7fQ90B1CfIiPueXVOjqfkSzI8=\ngolang.org/x/net v0.0.0-20210503060351-7fd8e65b6420/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220127200216-cd36cc0744dd/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/net v0.0.0-20220325170049-de3da57026de/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/net v0.0.0-20220412020605-290c469a71a5/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/net v0.0.0-20220425223048-2871e0cb64e4/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/net v0.0.0-20220520000938-2e3eb7b945c2/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20191202225959-858c2ad4c8b6/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20200902213428-5d25da1a8d43/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20201109201403-9fd604954f58/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20201208152858-08078c50e5b5/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210218202405-ba52d332ba99/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210220000619-9bb904979d93/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210313182246-cd4f82c27b84/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210514164344-f6687ab2804c/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210628180205-a41e5a781914/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210805134026-6f1e6394065a/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210819190943-2bc19b11175f/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20211005180243-6b3c2da341f1/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20211104180415-d3ed0bb246c8/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20220223155221-ee480838109b/go.mod h1:DAh4E804XQdzx2j+YRIaUnCqCV2RuMz24cGBJ5QYIrc=\ngolang.org/x/oauth2 v0.0.0-20220309155454-6242fa91716a/go.mod h1:DAh4E804XQdzx2j+YRIaUnCqCV2RuMz24cGBJ5QYIrc=\ngolang.org/x/oauth2 v0.0.0-20220411215720-9780585627b5/go.mod h1:DAh4E804XQdzx2j+YRIaUnCqCV2RuMz24cGBJ5QYIrc=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201207232520-09787c993a3a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220513210516-0976fa681c29/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190922100055-0a153f010e69/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190924154521-2837fb4f24fe/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191008105621-543471e840be/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191228213918-04cbcbbfeed8/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200106162015-b016eb3dc98e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200124204421-9fbb57f87de9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200212091648-12a6c2dcc1e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200302150141-5c8b2ff67527/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200331124033-c3d80250170d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200501052902-10377860bb8e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200511232937-7e40ca221e25/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200515095857-1151b9dac4a9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200615200032-f1bc736245b1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200625212154-ddb9806d33ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200803210538-64077c9b5642/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200905004654-be1d3432aa8f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201201145000-ef89a241ccb3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210104204734-6f8348627aad/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210220050731-9a76102bfb43/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210225134936-a50acf3fe073/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210303074136-134d130e1a04/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210305230114-8fe3ee5dd75b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210315160823-c6e025ad8005/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210320140829-1e4c9ba3b0c4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210403161142-5e06dd20ab57/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423185535-09eb48e85fd7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210514084401-e8d321eab015/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210603081109-ebe580a85c40/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210603125802-9665404d3644/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210806184541-e5e7981a1069/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210823070655-63515b42dcdf/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210908233432-aa78b53d3365/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211007075335-d3039528d8ac/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211124211545-fe61309f8881/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211210111614-af8b64212486/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220128215802-99c3d69c2c27/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220209214540-3681064d5158/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220227234510-4e6760a101f9/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220328115105-d36c6a25d886/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220412211240-33da011f77ad/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220502124256-b6088ccd6cba/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a h1:dGzPydgVsqGcTRVwiLJ1jVbufYwmzD3LfVPLKsKg+0k=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190506145303-2d16b83fe98c/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190606124116-d0a3d012864b/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190907020128-2ca718005c18/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191113191852-77e3bb0ad9e7/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191115202509-3a792d9c32b2/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191125144606-a911d9008d1f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191130070609-6e064ea0cf2d/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191216173652-a0e659d51361/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20191227053925-7b8e75db28f4/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200117161641-43d50277825c/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200122220014-bf1340f18c4a/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200204074204-1cc6d1ef6c74/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200207183749-b753a1ba74fa/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200212150539-ea181f53ac56/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200224181240-023911ca70b2/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200227222343-706bc42d1f0d/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200304193943-95d2e580d8eb/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=\ngolang.org/x/tools v0.0.0-20200312045724-11d5b4c81c7d/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=\ngolang.org/x/tools v0.0.0-20200331025713-a30bf2db82d4/go.mod h1:Sl4aGygMT6LrqrWclx+PTx3U+LnKx/seiNR+3G19Ar8=\ngolang.org/x/tools v0.0.0-20200501065659-ab2804fb9c9d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200512131952-2bc93b1c0c88/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200515010526-7d3b6ebf133d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200618134242-20370b0cb4b2/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200729194436-6467de6f59a7/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200804011535-6c149bb5ef0d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200825202427-b303f430e36d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200904185747-39188db58858/go.mod h1:Cj7w3i3Rnn0Xh82ur9kSqwfTHTeVxaDqrfMjpcNT6bE=\ngolang.org/x/tools v0.0.0-20201110124207-079ba7bd75cd/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201201161351-ac6f37ff4c2a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201208233053-a543418bbed2/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210105154028-b0ab187a4818/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210108195828-e2f9c7f1fc8e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=\ngolang.org/x/tools v0.1.1/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.2/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.3/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.4/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20220411194840-2f41105eb62f/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20220517211312-f3a8303e98df h1:5Pf6pFKu98ODmgnpvkJ3kFUOQGGLIzLIkbzUHp47618=\ngolang.org/x/xerrors v0.0.0-20220517211312-f3a8303e98df/go.mod h1:K8+ghG5WaK9qNqU5K3HdILfMLy1f3aNYFI/wnl100a8=\ngoogle.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=\ngoogle.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=\ngoogle.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.9.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.13.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.14.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.15.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.17.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.18.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.19.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.20.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.22.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.24.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.28.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.29.0/go.mod h1:Lcubydp8VUV7KeIHD9z2Bys/sm/vGKnG1UHuDBSrHWM=\ngoogle.golang.org/api v0.30.0/go.mod h1:QGmEvQ87FHZNiUVJkT14jQNYJ4ZJjdRF23ZXz5138Fc=\ngoogle.golang.org/api v0.35.0/go.mod h1:/XrVsuzM0rZmrsbjJutiuftIzeuTQcEeaYcSk/mQ1dg=\ngoogle.golang.org/api v0.36.0/go.mod h1:+z5ficQTmoYpPn8LCUNVpK5I7hwkpjbcgqA7I34qYtE=\ngoogle.golang.org/api v0.40.0/go.mod h1:fYKFpnQN0DsDSKRVRcQSDQNtqWPfM9i+zNPxepjRCQ8=\ngoogle.golang.org/api v0.41.0/go.mod h1:RkxM5lITDfTzmyKFPt+wGrCJbVfniCr2ool8kTBzRTU=\ngoogle.golang.org/api v0.43.0/go.mod h1:nQsDGjRXMo4lvh5hP0TKqF244gqhGcr/YSIykhUk/94=\ngoogle.golang.org/api v0.47.0/go.mod h1:Wbvgpq1HddcWVtzsVLyfLp8lDg6AA241LmgIL59tHXo=\ngoogle.golang.org/api v0.48.0/go.mod h1:71Pr1vy+TAZRPkPs/xlCf5SsU8WjuAWv1Pfjbtukyy4=\ngoogle.golang.org/api v0.50.0/go.mod h1:4bNT5pAuq5ji4SRZm+5QIkjny9JAyVD/3gaSihNefaw=\ngoogle.golang.org/api v0.51.0/go.mod h1:t4HdrdoNgyN5cbEfm7Lum0lcLDLiise1F8qDKX00sOU=\ngoogle.golang.org/api v0.54.0/go.mod h1:7C4bFFOvVDGXjfDTAsgGwDgAxRDeQ4X8NvUedIt6z3k=\ngoogle.golang.org/api v0.55.0/go.mod h1:38yMfeP1kfjsl8isn0tliTjIb1rJXcQi4UXlbqivdVE=\ngoogle.golang.org/api v0.56.0/go.mod h1:38yMfeP1kfjsl8isn0tliTjIb1rJXcQi4UXlbqivdVE=\ngoogle.golang.org/api v0.57.0/go.mod h1:dVPlbZyBo2/OjBpmvNdpn2GRm6rPy75jyU7bmhdrMgI=\ngoogle.golang.org/api v0.59.0/go.mod h1:sT2boj7M9YJxZzgeZqXogmhfmRWDtPzT31xkieUbuZU=\ngoogle.golang.org/api v0.61.0/go.mod h1:xQRti5UdCmoCEqFxcz93fTl338AVqDgyaDRuOZ3hg9I=\ngoogle.golang.org/api v0.63.0/go.mod h1:gs4ij2ffTRXwuzzgJl/56BdwJaA194ijkfn++9tDuPo=\ngoogle.golang.org/api v0.67.0/go.mod h1:ShHKP8E60yPsKNw/w8w+VYaj9H6buA5UqDp8dhbQZ6g=\ngoogle.golang.org/api v0.70.0/go.mod h1:Bs4ZM2HGifEvXwd50TtW70ovgJffJYw2oRCOFU/SkfA=\ngoogle.golang.org/api v0.71.0/go.mod h1:4PyU6e6JogV1f9eA4voyrTY2batOLdgZ5qZ5HOCc4j8=\ngoogle.golang.org/api v0.74.0/go.mod h1:ZpfMZOVRMywNyvJFeqL9HRWBgAuRfSjJFpe9QtRRyDs=\ngoogle.golang.org/api v0.75.0/go.mod h1:pU9QmyHLnzlpar1Mjt4IbapUCy8J+6HD6GeELN69ljA=\ngoogle.golang.org/api v0.78.0/go.mod h1:1Sg78yoMLOhlQTeF+ARBoytAcH1NNyyl390YMy6rKmw=\ngoogle.golang.org/api v0.81.0/go.mod h1:FA6Mb/bZxj706H2j+j2d6mHEEaHBmbbWnkfvmorOCko=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=\ngoogle.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/appengine v1.6.6/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/appengine v1.6.7/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190801165951-fa694d86fc64/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190911173649-1774047e7e51/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=\ngoogle.golang.org/genproto v0.0.0-20191108220845-16a3f7862a1a/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191115194625-c23dd37a84c9/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191216164720-4f79533eabd1/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191230161307-f3c370f40bfb/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200115191322-ca5a22157cba/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200122232147-0452cf42e150/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200204135345-fa8e72b47b90/go.mod h1:GmwEX6Z4W5gMy59cAlVYjN9JhxgbQH6Gn+gFDQe2lzA=\ngoogle.golang.org/genproto v0.0.0-20200212174721-66ed5ce911ce/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200224152610-e50cd9704f63/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200228133532-8c2c7df3a383/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200305110556-506484158171/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200312145019-da6875a35672/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200331122359-1ee6d9798940/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200430143042-b979b6f78d84/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200511104702-f5ebc3bea380/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200515170657-fc4c6c6a6587/go.mod h1:YsZOwe1myG/8QRHRsmBRE1LrgQY60beZKjly0O1fX9U=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/genproto v0.0.0-20200618031413-b414f8b61790/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=\ngoogle.golang.org/genproto v0.0.0-20200729003335-053ba62fc06f/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200804131852-c06518451d9c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200825200019-8632dd797987/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200904004341-0bd0a958aa1d/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201109203340-2640f1f9cdfb/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201201144952-b05cb90ed32e/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201210142538-e3217bee35cc/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201214200347-8c77b98c765d/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210108203827-ffc7fda8c3d7/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210222152913-aa3ee6e6a81c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210226172003-ab064af71705/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210303154014-9728d6b83eeb/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210310155132-4ce2db91004e/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210319143718-93e7006c17a6/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210402141018-6c239bbf2bb1/go.mod h1:9lPAdzaEmUacj36I+k7YKbEc5CXzPIeORRgDAUOu28A=\ngoogle.golang.org/genproto v0.0.0-20210513213006-bf773b8c8384/go.mod h1:P3QM42oQyzQSnHPnZ/vqoCdDmzH28fzWByN9asMeM8A=\ngoogle.golang.org/genproto v0.0.0-20210602131652-f16073e35f0c/go.mod h1:UODoCrxHCcBojKKwX1terBiRUaqAsFqJiF615XL43r0=\ngoogle.golang.org/genproto v0.0.0-20210604141403-392c879c8b08/go.mod h1:UODoCrxHCcBojKKwX1terBiRUaqAsFqJiF615XL43r0=\ngoogle.golang.org/genproto v0.0.0-20210608205507-b6d2f5bf0d7d/go.mod h1:UODoCrxHCcBojKKwX1terBiRUaqAsFqJiF615XL43r0=\ngoogle.golang.org/genproto v0.0.0-20210624195500-8bfb893ecb84/go.mod h1:SzzZ/N+nwJDaO1kznhnlzqS8ocJICar6hYhVyhi++24=\ngoogle.golang.org/genproto v0.0.0-20210713002101-d411969a0d9a/go.mod h1:AxrInvYm1dci+enl5hChSFPOmmUF1+uAa/UsgNRWd7k=\ngoogle.golang.org/genproto v0.0.0-20210716133855-ce7ef5c701ea/go.mod h1:AxrInvYm1dci+enl5hChSFPOmmUF1+uAa/UsgNRWd7k=\ngoogle.golang.org/genproto v0.0.0-20210728212813-7823e685a01f/go.mod h1:ob2IJxKrgPT52GcgX759i1sleT07tiKowYBGbczaW48=\ngoogle.golang.org/genproto v0.0.0-20210805201207-89edb61ffb67/go.mod h1:ob2IJxKrgPT52GcgX759i1sleT07tiKowYBGbczaW48=\ngoogle.golang.org/genproto v0.0.0-20210813162853-db860fec028c/go.mod h1:cFeNkxwySK631ADgubI+/XFU/xp8FD5KIVV4rj8UC5w=\ngoogle.golang.org/genproto v0.0.0-20210821163610-241b8fcbd6c8/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210828152312-66f60bf46e71/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210831024726-fe130286e0e2/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210903162649-d08c68adba83/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210909211513-a8c4777a87af/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210924002016-3dee208752a0/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/genproto v0.0.0-20211008145708-270636b82663/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/genproto v0.0.0-20211028162531-8db9c33dc351/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/genproto v0.0.0-20211118181313-81c1377c94b1/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/genproto v0.0.0-20211206160659-862468c7d6e0/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/genproto v0.0.0-20211208223120-3a66f561d7aa/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/genproto v0.0.0-20211221195035-429b39de9b1c/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/genproto v0.0.0-20220126215142-9970aeb2e350/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/genproto v0.0.0-20220207164111-0872dc986b00/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/genproto v0.0.0-20220218161850-94dd64e39d7c/go.mod h1:kGP+zUP2Ddo0ayMi4YuN7C3WZyJvGLZRh8Z5wnAqvEI=\ngoogle.golang.org/genproto v0.0.0-20220222213610-43724f9ea8cf/go.mod h1:kGP+zUP2Ddo0ayMi4YuN7C3WZyJvGLZRh8Z5wnAqvEI=\ngoogle.golang.org/genproto v0.0.0-20220304144024-325a89244dc8/go.mod h1:kGP+zUP2Ddo0ayMi4YuN7C3WZyJvGLZRh8Z5wnAqvEI=\ngoogle.golang.org/genproto v0.0.0-20220310185008-1973136f34c6/go.mod h1:kGP+zUP2Ddo0ayMi4YuN7C3WZyJvGLZRh8Z5wnAqvEI=\ngoogle.golang.org/genproto v0.0.0-20220324131243-acbaeb5b85eb/go.mod h1:hAL49I2IFola2sVEjAn7MEwsja0xp51I0tlGAf9hz4E=\ngoogle.golang.org/genproto v0.0.0-20220407144326-9054f6ed7bac/go.mod h1:8w6bsBMX6yCPbAVTeqQHvzxW0EIFigd5lZyahWgyfDo=\ngoogle.golang.org/genproto v0.0.0-20220413183235-5e96e2839df9/go.mod h1:8w6bsBMX6yCPbAVTeqQHvzxW0EIFigd5lZyahWgyfDo=\ngoogle.golang.org/genproto v0.0.0-20220414192740-2d67ff6cf2b4/go.mod h1:8w6bsBMX6yCPbAVTeqQHvzxW0EIFigd5lZyahWgyfDo=\ngoogle.golang.org/genproto v0.0.0-20220421151946-72621c1f0bd3/go.mod h1:8w6bsBMX6yCPbAVTeqQHvzxW0EIFigd5lZyahWgyfDo=\ngoogle.golang.org/genproto v0.0.0-20220429170224-98d788798c3e/go.mod h1:8w6bsBMX6yCPbAVTeqQHvzxW0EIFigd5lZyahWgyfDo=\ngoogle.golang.org/genproto v0.0.0-20220505152158-f39f71e6c8f3/go.mod h1:RAyBrSAP7Fh3Nc84ghnVLDPuV51xc9agzmm4Ph6i0Q4=\ngoogle.golang.org/genproto v0.0.0-20220519153652-3a47de7e79bd/go.mod h1:RAyBrSAP7Fh3Nc84ghnVLDPuV51xc9agzmm4Ph6i0Q4=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.28.0/go.mod h1:rpkK4SK4GF4Ach/+MFLZUBavHOvF2JJB5uozKKal+60=\ngoogle.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=\ngoogle.golang.org/grpc v1.30.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.31.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.31.1/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=\ngoogle.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=\ngoogle.golang.org/grpc v1.34.0/go.mod h1:WotjhfgOW/POjDeRt8vscBtXq+2VjORFy659qA51WJ8=\ngoogle.golang.org/grpc v1.35.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.36.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.36.1/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.37.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=\ngoogle.golang.org/grpc v1.37.1/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=\ngoogle.golang.org/grpc v1.38.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=\ngoogle.golang.org/grpc v1.39.0/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnDzfrE=\ngoogle.golang.org/grpc v1.39.1/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnDzfrE=\ngoogle.golang.org/grpc v1.40.0/go.mod h1:ogyxbiOoUXAkP+4+xa6PZSE9DZgIHtSpzjDTB9KAK34=\ngoogle.golang.org/grpc v1.40.1/go.mod h1:ogyxbiOoUXAkP+4+xa6PZSE9DZgIHtSpzjDTB9KAK34=\ngoogle.golang.org/grpc v1.44.0/go.mod h1:k+4IHHFw41K8+bbowsex27ge2rCb65oeWqe4jJ590SU=\ngoogle.golang.org/grpc v1.45.0/go.mod h1:lN7owxKUQEqMfSyQikvvk5tf/6zMPsrK+ONuO11+0rQ=\ngoogle.golang.org/grpc v1.46.0/go.mod h1:vN9eftEi1UMyUsIF80+uQXhHjbXYbm0uXoFCACuMGWk=\ngoogle.golang.org/grpc v1.46.2/go.mod h1:vN9eftEi1UMyUsIF80+uQXhHjbXYbm0uXoFCACuMGWk=\ngoogle.golang.org/grpc/cmd/protoc-gen-go-grpc v1.1.0/go.mod h1:6Kw0yEErY5E/yWrBtf03jp27GLLJujG4z/JK95pnjjw=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.28.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=\nhonnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nhonnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nrsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=\nrsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nsigs.k8s.io/yaml v1.2.0/go.mod h1:yfXDCHCao9+ENCvLSE62v9VSji2MKu5jeNfTrofGhJc=\n"
        },
        {
          "name": "inline.go",
          "type": "blob",
          "size": 5.5546875,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\n// Query is an incoming inline query. When the user sends\n// an empty query, your bot could return some default or\n// trending results.\ntype Query struct {\n\t// Unique identifier for this query. 1-64 bytes.\n\tID string `json:\"id\"`\n\n\t// Sender.\n\tSender *User `json:\"from\"`\n\n\t// Sender location, only for bots that request user location.\n\tLocation *Location `json:\"location\"`\n\n\t// Text of the query (up to 512 characters).\n\tText string `json:\"query\"`\n\n\t// Offset of the results to be returned, can be controlled by the bot.\n\tOffset string `json:\"offset\"`\n\n\t// ChatType of the type of the chat, from which the inline query was sent.\n\tChatType string `json:\"chat_type\"`\n}\n\n// QueryResponse builds a response to an inline Query.\ntype QueryResponse struct {\n\t// The ID of the query to which this is a response.\n\t//\n\t// Note: Telebot sets this field automatically!\n\tQueryID string `json:\"inline_query_id\"`\n\n\t// The results for the inline query.\n\tResults Results `json:\"results\"`\n\n\t// (Optional) The maximum amount of time in seconds that the result\n\t// of the inline query may be cached on the server.\n\tCacheTime int `json:\"cache_time,omitempty\"`\n\n\t// (Optional) Pass True, if results may be cached on the server side\n\t// only for the user that sent the query. By default, results may\n\t// be returned to any user who sends the same query.\n\tIsPersonal bool `json:\"is_personal\"`\n\n\t// (Optional) Pass the offset that a client should send in the next\n\t// query with the same text to receive more results. Pass an empty\n\t// string if there are no more results or if you don‘t support\n\t// pagination. Offset length can’t exceed 64 bytes.\n\tNextOffset string `json:\"next_offset\"`\n\n\t// (Optional) If passed, clients will display a button with specified\n\t// text that switches the user to a private chat with the bot and sends\n\t// the bot a start message with the parameter switch_pm_parameter.\n\tSwitchPMText string `json:\"switch_pm_text,omitempty\"`\n\n\t// (Optional) Parameter for the start message sent to the bot when user\n\t// presses the switch button.\n\tSwitchPMParameter string `json:\"switch_pm_parameter,omitempty\"`\n\n\t// (Optional) A JSON-serialized object describing a button to be shown\n\t// above inline query results.\n\tButton *QueryResponseButton `json:\"button,omitempty\"`\n}\n\n// QueryResponseButton represents a button to be shown above inline query results.\n// You must use exactly one of the optional fields.\ntype QueryResponseButton struct {\n\t// Label text on the button\n\tText string `json:\"text\"`\n\n\t// (Optional) Description of the Web App that will be launched when the\n\t// user presses the button. The Web App will be able to switch back to the\n\t// inline mode using the method switchInlineQuery inside the Web App.\n\tWebApp *WebApp `json:\"web_app\"`\n\n\t// (Optional) Deep-linking parameter for the /start message sent to the bot\n\t// when a user presses the button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed.\n\tStart string `json:\"start_parameter,omitempty\"`\n}\n\n// SwitchInlineQuery represents an inline button that switches the current\n// user to inline mode in a chosen chat, with an optional default inline query.\ntype SwitchInlineQuery struct {\n\t// (Optional) The default inline query to be inserted in the input field.\n\t// If left empty, only the bot's username will be inserted.\n\tQuery string `json:\"query\"`\n\n\t// (Optional) True, if private chats with users can be chosen.\n\tAllowUserChats bool `json:\"allow_user_chats\"`\n\n\t// (Optional) True, if private chats with bots can be chosen.\n\tAllowBotChats bool `json:\"allow_bot_chats\"`\n\n\t// (Optional) True, if group and supergroup chats can be chosen.\n\tAllowGroupChats bool `json:\"allow_group_chats\"`\n\n\t// (Optional) True, if channel chats can be chosen.\n\tAllowChannelChats bool `json:\"allow_channel_chats\"`\n}\n\n// InlineResult represents a result of an inline query that was chosen\n// by the user and sent to their chat partner.\ntype InlineResult struct {\n\tSender    *User     `json:\"from\"`\n\tLocation  *Location `json:\"location,omitempty\"`\n\tResultID  string    `json:\"result_id\"`\n\tQuery     string    `json:\"query\"`\n\tMessageID string    `json:\"inline_message_id\"` // inline messages only!\n}\n\n// MessageSig satisfies Editable interface.\nfunc (ir *InlineResult) MessageSig() (string, int64) {\n\treturn ir.MessageID, 0\n}\n\n// Result represents one result of an inline query.\ntype Result interface {\n\tResultID() string\n\tSetResultID(string)\n\tSetParseMode(ParseMode)\n\tSetContent(InputMessageContent)\n\tSetReplyMarkup(*ReplyMarkup)\n\tProcess(*Bot)\n}\n\n// Results is a slice wrapper for convenient marshalling.\ntype Results []Result\n\n// MarshalJSON makes sure IQRs have proper IDs and Type variables set.\nfunc (results Results) MarshalJSON() ([]byte, error) {\n\tfor i, result := range results {\n\t\tif result.ResultID() == \"\" {\n\t\t\tresult.SetResultID(fmt.Sprintf(\"%d\", &results[i]))\n\t\t}\n\t\tif err := inferIQR(result); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn json.Marshal([]Result(results))\n}\n\nfunc inferIQR(result Result) error {\n\tswitch r := result.(type) {\n\tcase *ArticleResult:\n\t\tr.Type = \"article\"\n\tcase *AudioResult:\n\t\tr.Type = \"audio\"\n\tcase *ContactResult:\n\t\tr.Type = \"contact\"\n\tcase *DocumentResult:\n\t\tr.Type = \"document\"\n\tcase *GifResult:\n\t\tr.Type = \"gif\"\n\tcase *LocationResult:\n\t\tr.Type = \"location\"\n\tcase *Mpeg4GifResult:\n\t\tr.Type = \"mpeg4_gif\"\n\tcase *PhotoResult:\n\t\tr.Type = \"photo\"\n\tcase *VenueResult:\n\t\tr.Type = \"venue\"\n\tcase *VideoResult:\n\t\tr.Type = \"video\"\n\tcase *VoiceResult:\n\t\tr.Type = \"voice\"\n\tcase *StickerResult:\n\t\tr.Type = \"sticker\"\n\tcase *GameResult:\n\t\tr.Type = \"game\"\n\tdefault:\n\t\treturn fmt.Errorf(\"telebot: result %v is not supported\", result)\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "inline_types.go",
          "type": "blob",
          "size": 10.837890625,
          "content": "package telebot\n\n// ResultBase must be embedded into all IQRs.\ntype ResultBase struct {\n\t// Unique identifier for this result, 1-64 Bytes.\n\t// If left unspecified, a 64-bit FNV-1 hash will be calculated\n\tID string `json:\"id\"`\n\n\t// Ignore. This field gets set automatically.\n\tType string `json:\"type\"`\n\n\t// Optional. Send Markdown or HTML, if you want Telegram apps to show\n\t// bold, italic, fixed-width text or inline URLs in the media caption.\n\tParseMode ParseMode `json:\"parse_mode,omitempty\"`\n\n\t// Optional. Content of the message to be sent.\n\tContent InputMessageContent `json:\"input_message_content,omitempty\"`\n\n\t// Optional. Inline keyboard attached to the message.\n\tReplyMarkup *ReplyMarkup `json:\"reply_markup,omitempty\"`\n}\n\n// ResultID returns ResultBase.ID.\nfunc (r *ResultBase) ResultID() string {\n\treturn r.ID\n}\n\n// SetResultID sets ResultBase.ID.\nfunc (r *ResultBase) SetResultID(id string) {\n\tr.ID = id\n}\n\n// SetParseMode sets ResultBase.ParseMode.\nfunc (r *ResultBase) SetParseMode(mode ParseMode) {\n\tr.ParseMode = mode\n}\n\n// SetContent sets ResultBase.Content.\nfunc (r *ResultBase) SetContent(content InputMessageContent) {\n\tr.Content = content\n}\n\n// SetReplyMarkup sets ResultBase.ReplyMarkup.\nfunc (r *ResultBase) SetReplyMarkup(markup *ReplyMarkup) {\n\tr.ReplyMarkup = markup\n}\n\nfunc (r *ResultBase) Process(b *Bot) {\n\tif r.ParseMode == ModeDefault {\n\t\tr.ParseMode = b.parseMode\n\t}\n\tif r.Content != nil {\n\t\tc, ok := r.Content.(*InputTextMessageContent)\n\t\tif ok && c.ParseMode == ModeDefault {\n\t\t\tc.ParseMode = r.ParseMode\n\t\t}\n\t}\n\tif r.ReplyMarkup != nil {\n\t\tprocessButtons(r.ReplyMarkup.InlineKeyboard)\n\t}\n}\n\n// GameResult represents a game. Game is a content type\n// supported by Telegram, which can be sent back to the\n// user as a result for an inline query.\ntype GameResult struct {\n\tResultBase\n\n\t// ShortName is a unique identifier of the game.\n\tShortName string `json:\"game_short_name\"`\n}\n\n// ArticleResult represents a link to an article or web page.\ntype ArticleResult struct {\n\tResultBase\n\n\t// Title of the result.\n\tTitle string `json:\"title\"`\n\n\t// Message text. Shortcut (and mutually exclusive to) specifying\n\t// InputMessageContent.\n\tText string `json:\"message_text,omitempty\"`\n\n\t// Optional. URL of the result.\n\tURL string `json:\"url,omitempty\"`\n\n\t// Optional. Pass True, if you don't want the URL to be shown in the message.\n\tHideURL bool `json:\"hide_url,omitempty\"`\n\n\t// Optional. Short description of the result.\n\tDescription string `json:\"description,omitempty\"`\n\n\t// Optional. URL of the thumbnail for the result.\n\tThumbURL string `json:\"thumbnail_url,omitempty\"`\n\n\t// Optional. Width of the thumbnail for the result.\n\tThumbWidth int `json:\"thumbnail_width,omitempty\"`\n\n\t// Optional. Height of the thumbnail for the result.\n\tThumbHeight int `json:\"thumbnail_height,omitempty\"`\n}\n\n// AudioResult represents a link to an mp3 audio file.\ntype AudioResult struct {\n\tResultBase\n\n\t// Title.\n\tTitle string `json:\"title\"`\n\n\t// A valid URL for the audio file.\n\tURL string `json:\"audio_url\"`\n\n\t// Optional. Performer.\n\tPerformer string `json:\"performer,omitempty\"`\n\n\t// Optional. Audio duration in seconds.\n\tDuration int `json:\"audio_duration,omitempty\"`\n\n\t// Optional. Caption, 0-1024 characters.\n\tCaption string `json:\"caption,omitempty\"`\n\n\t// If Cache != \"\", it'll be used instead\n\tCache string `json:\"audio_file_id,omitempty\"`\n}\n\n// ContactResult represents a contact with a phone number.\ntype ContactResult struct {\n\tResultBase\n\n\t// Contact's phone number.\n\tPhoneNumber string `json:\"phone_number\"`\n\n\t// Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes.\n\tVCard string `json:\"vcard,omitempty\"`\n\n\t// Contact's first name.\n\tFirstName string `json:\"first_name\"`\n\n\t// Optional. Contact's last name.\n\tLastName string `json:\"last_name,omitempty\"`\n\n\t// Optional. URL of the thumbnail for the result.\n\tThumbURL string `json:\"thumbnail_url,omitempty\"`\n\n\t// Optional. Width of the thumbnail for the result.\n\tThumbWidth int `json:\"thumbnail_width,omitempty\"`\n\n\t// Optional. Height of the thumbnail for the result.\n\tThumbHeight int `json:\"thumbnail_height,omitempty\"`\n}\n\n// DocumentResult represents a link to a file.\ntype DocumentResult struct {\n\tResultBase\n\n\t// Title for the result.\n\tTitle string `json:\"title\"`\n\n\t// A valid URL for the file\n\tURL string `json:\"document_url\"`\n\n\t// Mime type of the content of the file, either “application/pdf” or\n\t// “application/zip”.\n\tMIME string `json:\"mime_type\"`\n\n\t// Optional. Caption of the document to be sent, 0-200 characters.\n\tCaption string `json:\"caption,omitempty\"`\n\n\t// Optional. Short description of the result.\n\tDescription string `json:\"description,omitempty\"`\n\n\t// Optional. URL of the thumbnail (jpeg only) for the file.\n\tThumbURL string `json:\"thumbnail_url,omitempty\"`\n\n\t// Optional. Width of the thumbnail for the result.\n\tThumbWidth int `json:\"thumbnail_width,omitempty\"`\n\n\t// Optional. Height of the thumbnail for the result.\n\tThumbHeight int `json:\"thumbnail_height,omitempty\"`\n\n\t// If Cache != \"\", it'll be used instead\n\tCache string `json:\"document_file_id,omitempty\"`\n}\n\n// GifResult represents a link to an animated GIF file.\ntype GifResult struct {\n\tResultBase\n\n\t// A valid URL for the GIF file. File size must not exceed 1MB.\n\tURL string `json:\"gif_url\"`\n\n\t// Optional. Width of the GIF.\n\tWidth int `json:\"gif_width,omitempty\"`\n\n\t// Optional. Height of the GIF.\n\tHeight int `json:\"gif_height,omitempty\"`\n\n\t// Optional. Duration of the GIF.\n\tDuration int `json:\"gif_duration,omitempty\"`\n\n\t// URL of the static thumbnail for the result (jpeg or gif).\n\tThumbURL string `json:\"thumbnail_url\"`\n\n\t// Optional. MIME type of the thumbnail, must be one of\n\t// “image/jpeg”, “image/gif”, or “video/mp4”.\n\tThumbMIME string `json:\"thumbnail_mime_type,omitempty\"`\n\n\t// Optional. Title for the result.\n\tTitle string `json:\"title,omitempty\"`\n\n\t// Optional. Caption of the GIF file to be sent, 0-200 characters.\n\tCaption string `json:\"caption,omitempty\"`\n\n\t// If Cache != \"\", it'll be used instead\n\tCache string `json:\"gif_file_id,omitempty\"`\n\n\t// (Optional) Pass True, if the caption must be shown above the message media\n\tCaptionAbove bool `json:\"show_caption_above_media,omitempty\"`\n}\n\n// LocationResult represents a location on a map.\ntype LocationResult struct {\n\tResultBase\n\n\tLocation\n\n\t// Location title.\n\tTitle string `json:\"title\"`\n\n\t// Optional. Url of the thumbnail for the result.\n\tThumbURL string `json:\"thumbnail_url,omitempty\"`\n}\n\n// Mpeg4GifResult represents a link to a video animation\n// (H.264/MPEG-4 AVC video without sound).\ntype Mpeg4GifResult struct {\n\tResultBase\n\n\t// A valid URL for the MP4 file.\n\tURL string `json:\"mpeg4_url\"`\n\n\t// Optional. Video width.\n\tWidth int `json:\"mpeg4_width,omitempty\"`\n\n\t// Optional. Video height.\n\tHeight int `json:\"mpeg4_height,omitempty\"`\n\n\t// Optional. Video duration.\n\tDuration int `json:\"mpeg4_duration,omitempty\"`\n\n\t// URL of the static thumbnail (jpeg or gif) for the result.\n\tThumbURL string `json:\"thumbnail_url,omitempty\"`\n\n\t// Optional. MIME type of the thumbnail, must be one of\n\t// “image/jpeg”, “image/gif”, or “video/mp4”.\n\tThumbMIME string `json:\"thumbnail_mime_type,omitempty\"`\n\n\t// Optional. Title for the result.\n\tTitle string `json:\"title,omitempty\"`\n\n\t// Optional. Caption of the MPEG-4 file to be sent, 0-200 characters.\n\tCaption string `json:\"caption,omitempty\"`\n\n\t// If Cache != \"\", it'll be used instead\n\tCache string `json:\"mpeg4_file_id,omitempty\"`\n\n\t// (Optional) Pass True, if the caption must be shown above the message media\n\tCaptionAbove bool `json:\"show_caption_above_media,omitempty\"`\n}\n\n// PhotoResult represents a link to a photo.\ntype PhotoResult struct {\n\tResultBase\n\n\t// A valid URL of the photo. Photo must be in jpeg format.\n\t// Photo size must not exceed 5MB.\n\tURL string `json:\"photo_url\"`\n\n\t// Optional. Width of the photo.\n\tWidth int `json:\"photo_width,omitempty\"`\n\n\t// Optional. Height of the photo.\n\tHeight int `json:\"photo_height,omitempty\"`\n\n\t// Optional. Title for the result.\n\tTitle string `json:\"title,omitempty\"`\n\n\t// Optional. Short description of the result.\n\tDescription string `json:\"description,omitempty\"`\n\n\t// Optional. Caption of the photo to be sent, 0-200 characters.\n\tCaption string `json:\"caption,omitempty\"`\n\n\t// URL of the thumbnail for the photo.\n\tThumbURL string `json:\"thumbnail_url\"`\n\n\t// If Cache != \"\", it'll be used instead\n\tCache string `json:\"photo_file_id,omitempty\"`\n\n\t// (Optional) Pass True, if the caption must be shown above the message media\n\tCaptionAbove bool `json:\"show_caption_above_media,omitempty\"`\n}\n\n// VenueResult represents a venue.\ntype VenueResult struct {\n\tResultBase\n\n\tLocation\n\n\t// Title of the venue.\n\tTitle string `json:\"title\"`\n\n\t// Address of the venue.\n\tAddress string `json:\"address\"`\n\n\t// Optional. Foursquare identifier of the venue if known.\n\tFoursquareID string `json:\"foursquare_id,omitempty\"`\n\n\t// Optional. URL of the thumbnail for the result.\n\tThumbURL string `json:\"thumbnail_url,omitempty\"`\n\n\t// Optional. Width of the thumbnail for the result.\n\tThumbWidth int `json:\"thumbnail_width,omitempty\"`\n\n\t// Optional. Height of the thumbnail for the result.\n\tThumbHeight int `json:\"thumbnail_height,omitempty\"`\n}\n\n// VideoResult represents a link to a page containing an embedded\n// video player or a video file.\ntype VideoResult struct {\n\tResultBase\n\n\t// A valid URL for the embedded video player or video file.\n\tURL string `json:\"video_url\"`\n\n\t// Mime type of the content of video url, “text/html” or “video/mp4”.\n\tMIME string `json:\"mime_type\"`\n\n\t// URL of the thumbnail (jpeg only) for the video.\n\tThumbURL string `json:\"thumbnail_url\"`\n\n\t// Title for the result.\n\tTitle string `json:\"title\"`\n\n\t// Optional. Caption of the video to be sent, 0-200 characters.\n\tCaption string `json:\"caption,omitempty\"`\n\n\t// Optional. Video width.\n\tWidth int `json:\"video_width,omitempty\"`\n\n\t// Optional. Video height.\n\tHeight int `json:\"video_height,omitempty\"`\n\n\t// Optional. Video duration in seconds.\n\tDuration int `json:\"video_duration,omitempty\"`\n\n\t// Optional. Short description of the result.\n\tDescription string `json:\"description,omitempty\"`\n\n\t// If Cache != \"\", it'll be used instead\n\tCache string `json:\"video_file_id,omitempty\"`\n\n\t// (Optional) Pass True, if the caption must be shown above the message media\n\tCaptionAbove bool `json:\"show_caption_above_media,omitempty\"`\n}\n\n// VoiceResult represents a link to a voice recording in an .ogg\n// container encoded with OPUS.\ntype VoiceResult struct {\n\tResultBase\n\n\t// A valid URL for the voice recording.\n\tURL string `json:\"voice_url\"`\n\n\t// Recording title.\n\tTitle string `json:\"title\"`\n\n\t// Optional. Recording duration in seconds.\n\tDuration int `json:\"voice_duration\"`\n\n\t// Optional. Caption, 0-1024 characters.\n\tCaption string `json:\"caption,omitempty\"`\n\n\t// If Cache != \"\", it'll be used instead\n\tCache string `json:\"voice_file_id,omitempty\"`\n}\n\n// StickerResult represents an inline cached sticker response.\ntype StickerResult struct {\n\tResultBase\n\n\t// If Cache != \"\", it'll be used instead\n\tCache string `json:\"sticker_file_id,omitempty\"`\n}\n"
        },
        {
          "name": "input_types.go",
          "type": "blob",
          "size": 2.138671875,
          "content": "package telebot\n\n// InputMessageContent objects represent the content of a message to be sent\n// as a result of an inline query.\ntype InputMessageContent interface {\n\tIsInputMessageContent() bool\n}\n\n// InputTextMessageContent represents the content of a text message to be\n// sent as the result of an inline query.\ntype InputTextMessageContent struct {\n\t// Text of the message to be sent, 1-4096 characters.\n\tText string `json:\"message_text\"`\n\n\t// (Optional) Send Markdown or HTML, if you want Telegram apps to show\n\t// bold, italic, fixed-width text or inline URLs in your bot's message.\n\tParseMode string `json:\"parse_mode,omitempty\"`\n\n\t// (Optional) Link preview generation options for the message.\n\tPreviewOptions *PreviewOptions `json:\"link_preview_options,omitempty\"`\n}\n\nfunc (input *InputTextMessageContent) IsInputMessageContent() bool {\n\treturn true\n}\n\n// InputLocationMessageContent represents the content of a location message\n// to be sent as the result of an inline query.\ntype InputLocationMessageContent struct {\n\tLat float32 `json:\"latitude\"`\n\tLng float32 `json:\"longitude\"`\n}\n\nfunc (input *InputLocationMessageContent) IsInputMessageContent() bool {\n\treturn true\n}\n\n// InputVenueMessageContent represents the content of a venue message to\n// be sent as the result of an inline query.\ntype InputVenueMessageContent struct {\n\tLat float32 `json:\"latitude\"`\n\tLng float32 `json:\"longitude\"`\n\n\t// Name of the venue.\n\tTitle string `json:\"title\"`\n\n\t// Address of the venue.\n\tAddress string `json:\"address\"`\n\n\t// Optional. Foursquare identifier of the venue, if known.\n\tFoursquareID string `json:\"foursquare_id,omitempty\"`\n}\n\nfunc (input *InputVenueMessageContent) IsInputMessageContent() bool {\n\treturn true\n}\n\n// InputContactMessageContent represents the content of a contact\n// message to be sent as the result of an inline query.\ntype InputContactMessageContent struct {\n\t// Contact's phone number.\n\tPhoneNumber string `json:\"phone_number\"`\n\n\t// Contact's first name.\n\tFirstName string `json:\"first_name\"`\n\n\t// Optional. Contact's last name.\n\tLastName string `json:\"last_name,omitempty\"`\n}\n\nfunc (input *InputContactMessageContent) IsInputMessageContent() bool {\n\treturn true\n}\n"
        },
        {
          "name": "layout",
          "type": "tree",
          "content": null
        },
        {
          "name": "markup.go",
          "type": "blob",
          "size": 12.4541015625,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"strings\"\n)\n\n// ReplyMarkup controls two convenient options for bot-user communications\n// such as reply keyboard and inline \"keyboard\" (a grid of buttons as a part\n// of the message).\ntype ReplyMarkup struct {\n\t// InlineKeyboard is a grid of InlineButtons displayed in the message.\n\t//\n\t// Note: DO NOT confuse with ReplyKeyboard and other keyboard properties!\n\tInlineKeyboard [][]InlineButton `json:\"inline_keyboard,omitempty\"`\n\n\t// ReplyKeyboard is a grid, consisting of keyboard buttons.\n\t//\n\t// Note: you don't need to set HideCustomKeyboard field to show custom keyboard.\n\tReplyKeyboard [][]ReplyButton `json:\"keyboard,omitempty\"`\n\n\t// ForceReply forces Telegram clients to display\n\t// a reply interface to the user (act as if the user\n\t// has selected the bot‘s message and tapped \"Reply\").\n\tForceReply bool `json:\"force_reply,omitempty\"`\n\n\t// Requests clients to resize the keyboard vertically for optimal fit\n\t// (e.g. make the keyboard smaller if there are just two rows of buttons).\n\t//\n\t// Defaults to false, in which case the custom keyboard is always of the\n\t// same height as the app's standard keyboard.\n\tResizeKeyboard bool `json:\"resize_keyboard,omitempty\"`\n\n\t// Requests clients to hide the reply keyboard as soon as it's been used.\n\t//\n\t// Defaults to false.\n\tOneTimeKeyboard bool `json:\"one_time_keyboard,omitempty\"`\n\n\t// Requests clients to remove the reply keyboard.\n\t//\n\t// Defaults to false.\n\tRemoveKeyboard bool `json:\"remove_keyboard,omitempty\"`\n\n\t// Use this param if you want to force reply from\n\t// specific users only.\n\t//\n\t// Targets:\n\t// 1) Users that are @mentioned in the text of the Message object;\n\t// 2) If the bot's message is a reply (has SendOptions.ReplyTo),\n\t//       sender of the original message.\n\tSelective bool `json:\"selective,omitempty\"`\n\n\t// Placeholder will be shown in the input field when the reply is active.\n\tPlaceholder string `json:\"input_field_placeholder,omitempty\"`\n\n\t// IsPersistent allows to control when the keyboard is shown.\n\tIsPersistent bool `json:\"is_persistent,omitempty\"`\n}\n\nfunc (r *ReplyMarkup) copy() *ReplyMarkup {\n\tcp := *r\n\n\tif len(r.ReplyKeyboard) > 0 {\n\t\tcp.ReplyKeyboard = make([][]ReplyButton, len(r.ReplyKeyboard))\n\t\tfor i, row := range r.ReplyKeyboard {\n\t\t\tcp.ReplyKeyboard[i] = make([]ReplyButton, len(row))\n\t\t\tcopy(cp.ReplyKeyboard[i], row)\n\t\t}\n\t}\n\n\tif len(r.InlineKeyboard) > 0 {\n\t\tcp.InlineKeyboard = make([][]InlineButton, len(r.InlineKeyboard))\n\t\tfor i, row := range r.InlineKeyboard {\n\t\t\tcp.InlineKeyboard[i] = make([]InlineButton, len(row))\n\t\t\tcopy(cp.InlineKeyboard[i], row)\n\t\t}\n\t}\n\n\treturn &cp\n}\n\n// Btn is a constructor button, which will later become either a reply, or an inline button.\ntype Btn struct {\n\tUnique          string          `json:\"unique,omitempty\"`\n\tText            string          `json:\"text,omitempty\"`\n\tURL             string          `json:\"url,omitempty\"`\n\tData            string          `json:\"callback_data,omitempty\"`\n\tInlineQuery     string          `json:\"switch_inline_query,omitempty\"`\n\tInlineQueryChat string          `json:\"switch_inline_query_current_chat,omitempty\"`\n\tLogin           *Login          `json:\"login_url,omitempty\"`\n\tWebApp          *WebApp         `json:\"web_app,omitempty\"`\n\tContact         bool            `json:\"request_contact,omitempty\"`\n\tLocation        bool            `json:\"request_location,omitempty\"`\n\tPoll            PollType        `json:\"request_poll,omitempty\"`\n\tUser            *ReplyRecipient `json:\"request_user,omitempty\"`\n\tChat            *ReplyRecipient `json:\"request_chat,omitempty\"`\n}\n\n// Row represents an array of buttons, a row.\ntype Row []Btn\n\n// Row creates a row of buttons.\nfunc (r *ReplyMarkup) Row(many ...Btn) Row {\n\treturn many\n}\n\n// Split splits the keyboard into the rows with N maximum number of buttons.\n// For example, if you pass six buttons and 3 as the max, you get two rows with\n// three buttons in each.\n//\n// `Split(3, []Btn{six buttons...}) -> [[1, 2, 3], [4, 5, 6]]`\n// `Split(2, []Btn{six buttons...}) -> [[1, 2],[3, 4],[5, 6]]`\nfunc (r *ReplyMarkup) Split(max int, btns []Btn) []Row {\n\trows := make([]Row, (max-1+len(btns))/max)\n\tfor i, b := range btns {\n\t\ti /= max\n\t\trows[i] = append(rows[i], b)\n\t}\n\treturn rows\n}\n\nfunc (r *ReplyMarkup) Inline(rows ...Row) {\n\tinlineKeys := make([][]InlineButton, 0, len(rows))\n\tfor i, row := range rows {\n\t\tkeys := make([]InlineButton, 0, len(row))\n\t\tfor j, btn := range row {\n\t\t\tbtn := btn.Inline()\n\t\t\tif btn == nil {\n\t\t\t\tpanic(fmt.Sprintf(\n\t\t\t\t\t\"telebot: button row %d column %d is not an inline button\",\n\t\t\t\t\ti, j))\n\t\t\t}\n\t\t\tkeys = append(keys, *btn)\n\t\t}\n\t\tinlineKeys = append(inlineKeys, keys)\n\t}\n\n\tr.InlineKeyboard = inlineKeys\n}\n\nfunc (r *ReplyMarkup) Reply(rows ...Row) {\n\treplyKeys := make([][]ReplyButton, 0, len(rows))\n\tfor i, row := range rows {\n\t\tkeys := make([]ReplyButton, 0, len(row))\n\t\tfor j, btn := range row {\n\t\t\tbtn := btn.Reply()\n\t\t\tif btn == nil {\n\t\t\t\tpanic(fmt.Sprintf(\n\t\t\t\t\t\"telebot: button row %d column %d is not a reply button\",\n\t\t\t\t\ti, j))\n\t\t\t}\n\t\t\tkeys = append(keys, *btn)\n\t\t}\n\t\treplyKeys = append(replyKeys, keys)\n\t}\n\n\tr.ReplyKeyboard = replyKeys\n}\n\nfunc (r *ReplyMarkup) Text(text string) Btn {\n\treturn Btn{Text: text}\n}\n\nfunc (r *ReplyMarkup) Data(text, unique string, data ...string) Btn {\n\treturn Btn{\n\t\tUnique: unique,\n\t\tText:   text,\n\t\tData:   strings.Join(data, \"|\"),\n\t}\n}\n\nfunc (r *ReplyMarkup) URL(text, url string) Btn {\n\treturn Btn{Text: text, URL: url}\n}\n\nfunc (r *ReplyMarkup) Query(text, query string) Btn {\n\treturn Btn{Text: text, InlineQuery: query}\n}\n\nfunc (r *ReplyMarkup) QueryChat(text, query string) Btn {\n\treturn Btn{Text: text, InlineQueryChat: query}\n}\n\nfunc (r *ReplyMarkup) Contact(text string) Btn {\n\treturn Btn{Contact: true, Text: text}\n}\n\nfunc (r *ReplyMarkup) Location(text string) Btn {\n\treturn Btn{Location: true, Text: text}\n}\n\nfunc (r *ReplyMarkup) Poll(text string, poll PollType) Btn {\n\treturn Btn{Poll: poll, Text: text}\n}\n\nfunc (r *ReplyMarkup) User(text string, user *ReplyRecipient) Btn {\n\treturn Btn{Text: text, User: user}\n}\n\nfunc (r *ReplyMarkup) Chat(text string, chat *ReplyRecipient) Btn {\n\treturn Btn{Text: text, Chat: chat}\n}\n\nfunc (r *ReplyMarkup) Login(text string, login *Login) Btn {\n\treturn Btn{Login: login, Text: text}\n}\n\nfunc (r *ReplyMarkup) WebApp(text string, app *WebApp) Btn {\n\treturn Btn{Text: text, WebApp: app}\n}\n\n// ReplyButton represents a button displayed in reply-keyboard.\n//\n// Set either Contact or Location to true in order to request\n// sensitive info, such as user's phone number or current location.\ntype ReplyButton struct {\n\tText string `json:\"text\"`\n\n\tContact  bool            `json:\"request_contact,omitempty\"`\n\tLocation bool            `json:\"request_location,omitempty\"`\n\tPoll     PollType        `json:\"request_poll,omitempty\"`\n\tUser     *ReplyRecipient `json:\"request_users,omitempty\"`\n\tChat     *ReplyRecipient `json:\"request_chat,omitempty\"`\n\tWebApp   *WebApp         `json:\"web_app,omitempty\"`\n}\n\n// MarshalJSON implements json.Marshaler. It allows passing PollType as a\n// keyboard's poll type instead of KeyboardButtonPollType object.\nfunc (pt PollType) MarshalJSON() ([]byte, error) {\n\treturn json.Marshal(&struct {\n\t\tType string `json:\"type\"`\n\t}{\n\t\tType: string(pt),\n\t})\n}\n\n// ReplyRecipient combines both KeyboardButtonRequestUser\n// and KeyboardButtonRequestChat objects. Use inside ReplyButton\n// to request the user or chat sharing with respective settings.\n//\n// To pass the pointers to bool use a special tele.Flag function,\n// that way you will be able to reflect the three-state bool (nil, false, true).\ntype ReplyRecipient struct {\n\tID int32 `json:\"request_id\"`\n\n\tBot      *bool `json:\"user_is_bot,omitempty\"`     // user only, optional\n\tPremium  *bool `json:\"user_is_premium,omitempty\"` // user only, optional\n\tQuantity int   `json:\"max_quantity,omitempty\"`    // user only, optional\n\n\tChannel         bool    `json:\"chat_is_channel,omitempty\"`           // chat only, required\n\tForum           *bool   `json:\"chat_is_forum,omitempty\"`             // chat only, optional\n\tWithUsername    *bool   `json:\"chat_has_username,omitempty\"`         // chat only, optional\n\tCreated         *bool   `json:\"chat_is_created,omitempty\"`           // chat only, optional\n\tUserRights      *Rights `json:\"user_administrator_rights,omitempty\"` // chat only, optional\n\tBotRights       *Rights `json:\"bot_administrator_rights,omitempty\"`  // chat only, optional\n\tBotMember       *bool   `json:\"bot_is_member,omitempty\"`             // chat only, optional\n\tRequestTitle    *bool   `json:\"request_title,omitempty\"`             // chat only, optional\n\tRequestName     *bool   `json:\"request_name,omitempty\"`              // user only, optional\n\tRequestUsername *bool   `json:\"request_username,omitempty\"`          // user only, optional\n\tRequestPhoto    *bool   `json:\"request_photo,omitempty\"`             // user only, optional\n}\n\n// RecipientShared combines both UserShared and ChatShared objects.\ntype RecipientShared struct {\n\tID       int32  `json:\"request_id\"` // chat, users\n\tChatID   int64  `json:\"chat_id\"`    // chat only\n\tTitle    string `json:\"title\"`      // chat only\n\tUsername string `json:\"username\"`   // chat only\n\tPhoto    *Photo `json:\"photo\"`      // chat only\n\n\tUsers []struct {\n\t\tUserID    int64  `json:\"user_id\"`\n\t\tFirstName string `json:\"first_name\"`\n\t\tLastName  string `json:\"last_name\"`\n\t\tUsername  string `json:\"username\"`\n\t\tPhoto     *Photo `json:\"photo\"`\n\t} `json:\"users\"` // users only\n\n}\n\n// InlineButton represents a button displayed in the message.\ntype InlineButton struct {\n\t// Unique slagish name for this kind of button,\n\t// try to be as specific as possible.\n\t//\n\t// It will be used as a callback endpoint.\n\tUnique string `json:\"unique,omitempty\"`\n\n\tText                  string             `json:\"text\"`\n\tURL                   string             `json:\"url,omitempty\"`\n\tData                  string             `json:\"callback_data,omitempty\"`\n\tInlineQuery           string             `json:\"switch_inline_query,omitempty\"`\n\tInlineQueryChat       string             `json:\"switch_inline_query_current_chat\"`\n\tInlineQueryChosenChat *SwitchInlineQuery `json:\"switch_inline_query_chosen_chat,omitempty\"`\n\tLogin                 *Login             `json:\"login_url,omitempty\"`\n\tWebApp                *WebApp            `json:\"web_app,omitempty\"`\n\tCallbackGame          *CallbackGame      `json:\"callback_game,omitempty\"`\n\tPay                   bool               `json:\"pay,omitempty\"`\n}\n\n// MarshalJSON implements json.Marshaler interface.\n// It needed to avoid InlineQueryChat and Login or WebApp fields conflict.\n// If you have Login or WebApp field in your button, InlineQueryChat must be skipped.\nfunc (t *InlineButton) MarshalJSON() ([]byte, error) {\n\ttype IB InlineButton\n\n\tif t.Login != nil || t.WebApp != nil {\n\t\treturn json.Marshal(struct {\n\t\t\tIB\n\t\t\tInlineQueryChat string `json:\"switch_inline_query_current_chat,omitempty\"`\n\t\t}{\n\t\t\tIB: IB(*t),\n\t\t})\n\t}\n\treturn json.Marshal(IB(*t))\n}\n\n// With returns a copy of the button with data.\nfunc (t *InlineButton) With(data string) *InlineButton {\n\treturn &InlineButton{\n\t\tUnique:          t.Unique,\n\t\tText:            t.Text,\n\t\tURL:             t.URL,\n\t\tInlineQuery:     t.InlineQuery,\n\t\tInlineQueryChat: t.InlineQueryChat,\n\t\tLogin:           t.Login,\n\t\tData:            data,\n\t}\n}\n\nfunc (b Btn) Reply() *ReplyButton {\n\tif b.Unique != \"\" {\n\t\treturn nil\n\t}\n\n\treturn &ReplyButton{\n\t\tText:     b.Text,\n\t\tContact:  b.Contact,\n\t\tLocation: b.Location,\n\t\tPoll:     b.Poll,\n\t\tUser:     b.User,\n\t\tChat:     b.Chat,\n\t\tWebApp:   b.WebApp,\n\t}\n}\n\nfunc (b Btn) Inline() *InlineButton {\n\treturn &InlineButton{\n\t\tUnique:          b.Unique,\n\t\tText:            b.Text,\n\t\tURL:             b.URL,\n\t\tData:            b.Data,\n\t\tInlineQuery:     b.InlineQuery,\n\t\tInlineQueryChat: b.InlineQueryChat,\n\t\tLogin:           b.Login,\n\t\tWebApp:          b.WebApp,\n\t}\n}\n\n// Login represents a parameter of the inline keyboard button\n// used to automatically authorize a user. Serves as a great replacement\n// for the Telegram Login Widget when the user is coming from Telegram.\ntype Login struct {\n\tURL         string `json:\"url\"`\n\tText        string `json:\"forward_text,omitempty\"`\n\tUsername    string `json:\"bot_username,omitempty\"`\n\tWriteAccess bool   `json:\"request_write_access,omitempty\"`\n}\n\n// MenuButton describes the bot's menu button in a private chat.\ntype MenuButton struct {\n\tType   MenuButtonType `json:\"type\"`\n\tText   string         `json:\"text,omitempty\"`\n\tWebApp *WebApp        `json:\"web_app,omitempty\"`\n}\n\ntype MenuButtonType = string\n\nconst (\n\tMenuButtonDefault  MenuButtonType = \"default\"\n\tMenuButtonCommands MenuButtonType = \"commands\"\n\tMenuButtonWebApp   MenuButtonType = \"web_app\"\n)\n"
        },
        {
          "name": "markup_test.go",
          "type": "blob",
          "size": 1.958984375,
          "content": "package telebot\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestBtn(t *testing.T) {\n\tr := &ReplyMarkup{}\n\n\tassert.Equal(t, &ReplyButton{Text: \"T\"}, r.Text(\"T\").Reply())\n\tassert.Equal(t, &ReplyButton{Text: \"T\", Contact: true}, r.Contact(\"T\").Reply())\n\tassert.Equal(t, &ReplyButton{Text: \"T\", Location: true}, r.Location(\"T\").Reply())\n\tassert.Equal(t, &ReplyButton{Text: \"T\", Poll: PollAny}, r.Poll(\"T\", PollAny).Reply())\n\n\tassert.Nil(t, r.Data(\"T\", \"u\").Reply())\n\tassert.Equal(t, &InlineButton{Unique: \"u\", Text: \"T\"}, r.Data(\"T\", \"u\").Inline())\n\tassert.Equal(t, &InlineButton{Unique: \"u\", Text: \"T\", Data: \"1|2\"}, r.Data(\"T\", \"u\", \"1\", \"2\").Inline())\n\tassert.Equal(t, &InlineButton{Text: \"T\", URL: \"url\"}, r.URL(\"T\", \"url\").Inline())\n\tassert.Equal(t, &InlineButton{Text: \"T\", InlineQuery: \"q\"}, r.Query(\"T\", \"q\").Inline())\n\tassert.Equal(t, &InlineButton{Text: \"T\", InlineQueryChat: \"q\"}, r.QueryChat(\"T\", \"q\").Inline())\n\tassert.Equal(t, &InlineButton{Text: \"T\", Login: &Login{Text: \"T\"}}, r.Login(\"T\", &Login{Text: \"T\"}).Inline())\n\tassert.Equal(t, &InlineButton{Text: \"T\", WebApp: &WebApp{URL: \"url\"}}, r.WebApp(\"T\", &WebApp{URL: \"url\"}).Inline())\n}\n\nfunc TestOptions(t *testing.T) {\n\tr := &ReplyMarkup{}\n\tr.Reply(\n\t\tr.Row(r.Text(\"Menu\")),\n\t\tr.Row(r.Text(\"Settings\")),\n\t)\n\n\tassert.Equal(t, [][]ReplyButton{\n\t\t{{Text: \"Menu\"}},\n\t\t{{Text: \"Settings\"}},\n\t}, r.ReplyKeyboard)\n\n\ti := &ReplyMarkup{}\n\ti.Inline(i.Row(\n\t\ti.Data(\"Previous\", \"prev\"),\n\t\ti.Data(\"Next\", \"next\"),\n\t))\n\n\tassert.Equal(t, [][]InlineButton{{\n\t\t{Unique: \"prev\", Text: \"Previous\"},\n\t\t{Unique: \"next\", Text: \"Next\"},\n\t}}, i.InlineKeyboard)\n\n\tassert.Panics(t, func() {\n\t\tr.Reply(r.Row(r.Data(\"T\", \"u\")))\n\t\ti.Inline(i.Row(i.Text(\"T\")))\n\t})\n\n\tassert.Equal(t, r.copy(), r)\n\tassert.Equal(t, i.copy(), i)\n\n\to := &SendOptions{ReplyMarkup: r}\n\tassert.Equal(t, o.copy(), o)\n\n\tdata, err := PollQuiz.MarshalJSON()\n\trequire.NoError(t, err)\n\tassert.Equal(t, []byte(`{\"type\":\"quiz\"}`), data)\n}\n"
        },
        {
          "name": "media.go",
          "type": "blob",
          "size": 11.044921875,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"math\"\n)\n\n// Media is a generic type for all kinds of media that includes File.\ntype Media interface {\n\t// MediaType returns string-represented media type.\n\tMediaType() string\n\n\t// MediaFile returns a pointer to the media file.\n\tMediaFile() *File\n}\n\n// InputMedia represents a composite InputMedia struct that is\n// used by Telebot in sending and editing media methods.\ntype InputMedia struct {\n\tType                 string   `json:\"type\"`\n\tMedia                string   `json:\"media\"`\n\tCaption              string   `json:\"caption\"`\n\tThumbnail            string   `json:\"thumbnail,omitempty\"`\n\tParseMode            string   `json:\"parse_mode,omitempty\"`\n\tEntities             Entities `json:\"caption_entities,omitempty\"`\n\tWidth                int      `json:\"width,omitempty\"`\n\tHeight               int      `json:\"height,omitempty\"`\n\tDuration             int      `json:\"duration,omitempty\"`\n\tTitle                string   `json:\"title,omitempty\"`\n\tPerformer            string   `json:\"performer,omitempty\"`\n\tStreaming            bool     `json:\"supports_streaming,omitempty\"`\n\tDisableTypeDetection bool     `json:\"disable_content_type_detection,omitempty\"`\n\tCaptionAbove         bool     `json:\"show_caption_above_media,omitempty\"`\n\tHasSpoiler           bool     `json:\"has_spoiler,omitempty\"`\n}\n\n// Inputtable is a generic type for all kinds of media you\n// can put into an album.\ntype Inputtable interface {\n\tMedia\n\n\t// InputMedia returns already marshalled InputMedia type\n\t// ready to be used in sending and editing media methods.\n\tInputMedia() InputMedia\n}\n\n// Album lets you group multiple media into a single message.\ntype Album []Inputtable\n\nfunc (a Album) SetCaption(caption string) {\n\tif len(a) < 1 {\n\t\treturn\n\t}\n\tswitch a[0].MediaType() {\n\tcase \"audio\":\n\t\ta[0].(*Audio).Caption = caption\n\tcase \"video\":\n\t\ta[0].(*Video).Caption = caption\n\tcase \"document\":\n\t\ta[0].(*Document).Caption = caption\n\tcase \"photo\":\n\t\ta[0].(*Photo).Caption = caption\n\tcase \"animation\":\n\t\ta[0].(*Animation).Caption = caption\n\t}\n}\n\n// Photo object represents a single photo file.\ntype Photo struct {\n\tFile\n\n\t// (Optional)\n\tWidth        int    `json:\"width\"`\n\tHeight       int    `json:\"height\"`\n\tCaption      string `json:\"caption,omitempty\"`\n\tHasSpoiler   bool   `json:\"has_spoiler,omitempty\"`\n\tCaptionAbove bool   `json:\"show_caption_above_media,omitempty\"`\n}\n\ntype photoSize struct {\n\tFile\n\n\tWidth   int    `json:\"width\"`\n\tHeight  int    `json:\"height\"`\n\tCaption string `json:\"caption,omitempty\"`\n}\n\nfunc (p *Photo) MediaType() string {\n\treturn \"photo\"\n}\n\nfunc (p *Photo) MediaFile() *File {\n\treturn &p.File\n}\n\nfunc (p *Photo) InputMedia() InputMedia {\n\treturn InputMedia{\n\t\tType:         p.MediaType(),\n\t\tCaption:      p.Caption,\n\t\tHasSpoiler:   p.HasSpoiler,\n\t\tCaptionAbove: p.CaptionAbove,\n\t}\n}\n\nfunc (p *Photo) Paid() bool {\n\treturn true\n}\n\n// UnmarshalJSON is custom unmarshaller required to abstract\n// away the hassle of treating different thumbnail sizes.\n// Instead, Telebot chooses the hi-res one and just sticks to it.\n//\n// I really do find it a beautiful solution.\nfunc (p *Photo) UnmarshalJSON(data []byte) error {\n\tvar hq photoSize\n\n\tif data[0] == '{' {\n\t\tif err := json.Unmarshal(data, &hq); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tvar sizes []photoSize\n\t\tif err := json.Unmarshal(data, &sizes); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\thq = sizes[len(sizes)-1]\n\t}\n\n\tp.File = hq.File\n\tp.Width = hq.Width\n\tp.Height = hq.Height\n\tp.Caption = hq.Caption\n\n\treturn nil\n}\n\n// Audio object represents an audio file.\ntype Audio struct {\n\tFile\n\n\tDuration int `json:\"duration,omitempty\"`\n\n\t// (Optional)\n\tCaption   string `json:\"caption,omitempty\"`\n\tThumbnail *Photo `json:\"thumbnail,omitempty\"`\n\tTitle     string `json:\"title,omitempty\"`\n\tPerformer string `json:\"performer,omitempty\"`\n\tMIME      string `json:\"mime_type,omitempty\"`\n\tFileName  string `json:\"file_name,omitempty\"`\n}\n\nfunc (a *Audio) MediaType() string {\n\treturn \"audio\"\n}\n\nfunc (a *Audio) MediaFile() *File {\n\ta.fileName = a.FileName\n\treturn &a.File\n}\n\nfunc (a *Audio) InputMedia() InputMedia {\n\treturn InputMedia{\n\t\tType:      a.MediaType(),\n\t\tCaption:   a.Caption,\n\t\tDuration:  a.Duration,\n\t\tTitle:     a.Title,\n\t\tPerformer: a.Performer,\n\t}\n\n}\n\n// Document object represents a general file (as opposed to Photo or Audio).\n// Telegram users can send files of any type of up to 1.5 GB in size.\ntype Document struct {\n\tFile\n\n\t// (Optional)\n\tThumbnail            *Photo `json:\"thumbnail,omitempty\"`\n\tCaption              string `json:\"caption,omitempty\"`\n\tMIME                 string `json:\"mime_type\"`\n\tFileName             string `json:\"file_name,omitempty\"`\n\tDisableTypeDetection bool   `json:\"disable_content_type_detection,omitempty\"`\n}\n\nfunc (d *Document) MediaType() string {\n\treturn \"document\"\n}\n\nfunc (d *Document) MediaFile() *File {\n\td.fileName = d.FileName\n\treturn &d.File\n}\n\nfunc (d *Document) InputMedia() InputMedia {\n\treturn InputMedia{\n\t\tType:                 d.MediaType(),\n\t\tCaption:              d.Caption,\n\t\tDisableTypeDetection: d.DisableTypeDetection,\n\t}\n}\n\n// Video object represents a video file.\ntype Video struct {\n\tFile\n\n\tWidth    int `json:\"width\"`\n\tHeight   int `json:\"height\"`\n\tDuration int `json:\"duration,omitempty\"`\n\n\t// (Optional)\n\tCaption      string `json:\"caption,omitempty\"`\n\tThumbnail    *Photo `json:\"thumbnail,omitempty\"`\n\tStreaming    bool   `json:\"supports_streaming,omitempty\"`\n\tMIME         string `json:\"mime_type,omitempty\"`\n\tFileName     string `json:\"file_name,omitempty\"`\n\tHasSpoiler   bool   `json:\"has_spoiler,omitempty\"`\n\tCaptionAbove bool   `json:\"show_caption_above_media,omitempty\"`\n}\n\nfunc (v *Video) MediaType() string {\n\treturn \"video\"\n}\n\nfunc (v *Video) MediaFile() *File {\n\tv.fileName = v.FileName\n\treturn &v.File\n}\n\nfunc (v *Video) InputMedia() InputMedia {\n\treturn InputMedia{\n\t\tType:         v.MediaType(),\n\t\tCaption:      v.Caption,\n\t\tWidth:        v.Width,\n\t\tHeight:       v.Height,\n\t\tDuration:     v.Duration,\n\t\tStreaming:    v.Streaming,\n\t\tHasSpoiler:   v.HasSpoiler,\n\t\tCaptionAbove: v.CaptionAbove,\n\t}\n}\n\nfunc (v *Video) Paid() bool {\n\treturn true\n}\n\n// Animation object represents a animation file.\ntype Animation struct {\n\tFile\n\n\tWidth    int `json:\"width\"`\n\tHeight   int `json:\"height\"`\n\tDuration int `json:\"duration,omitempty\"`\n\n\t// (Optional)\n\tCaption      string `json:\"caption,omitempty\"`\n\tThumbnail    *Photo `json:\"thumbnail,omitempty\"`\n\tMIME         string `json:\"mime_type,omitempty\"`\n\tFileName     string `json:\"file_name,omitempty\"`\n\tHasSpoiler   bool   `json:\"has_spoiler,omitempty\"`\n\tCaptionAbove bool   `json:\"show_caption_above_media,omitempty\"`\n}\n\nfunc (a *Animation) MediaType() string {\n\treturn \"animation\"\n}\n\nfunc (a *Animation) MediaFile() *File {\n\ta.fileName = a.FileName\n\treturn &a.File\n}\n\nfunc (a *Animation) InputMedia() InputMedia {\n\treturn InputMedia{\n\t\tType:         a.MediaType(),\n\t\tCaption:      a.Caption,\n\t\tWidth:        a.Width,\n\t\tHeight:       a.Height,\n\t\tDuration:     a.Duration,\n\t\tHasSpoiler:   a.HasSpoiler,\n\t\tCaptionAbove: a.CaptionAbove,\n\t}\n}\n\n// Voice object represents a voice note.\ntype Voice struct {\n\tFile\n\n\tDuration int `json:\"duration\"`\n\n\t// (Optional)\n\tCaption string `json:\"caption,omitempty\"`\n\tMIME    string `json:\"mime_type,omitempty\"`\n}\n\nfunc (v *Voice) MediaType() string {\n\treturn \"voice\"\n}\n\nfunc (v *Voice) MediaFile() *File {\n\treturn &v.File\n}\n\n// VideoNote represents a video message.\ntype VideoNote struct {\n\tFile\n\n\tDuration int `json:\"duration\"`\n\n\t// (Optional)\n\tThumbnail *Photo `json:\"thumbnail,omitempty\"`\n\tLength    int    `json:\"length,omitempty\"`\n}\n\nfunc (v *VideoNote) MediaType() string {\n\treturn \"videoNote\"\n}\n\nfunc (v *VideoNote) MediaFile() *File {\n\treturn &v.File\n}\n\n// Sticker object represents a WebP image, so-called sticker.\ntype Sticker struct {\n\tFile\n\tType             StickerSetType `json:\"type\"`\n\tWidth            int            `json:\"width\"`\n\tHeight           int            `json:\"height\"`\n\tAnimated         bool           `json:\"is_animated\"`\n\tVideo            bool           `json:\"is_video\"`\n\tThumbnail        *Photo         `json:\"thumbnail\"`\n\tEmoji            string         `json:\"emoji\"`\n\tSetName          string         `json:\"set_name\"`\n\tPremiumAnimation *File          `json:\"premium_animation\"`\n\tMaskPosition     *MaskPosition  `json:\"mask_position\"`\n\tCustomEmojiID    string         `json:\"custom_emoji_id\"`\n\tRepaint          bool           `json:\"needs_repainting\"`\n}\n\nfunc (s *Sticker) MediaType() string {\n\treturn \"sticker\"\n}\n\nfunc (s *Sticker) MediaFile() *File {\n\treturn &s.File\n}\n\n// Contact object represents a contact to Telegram user.\ntype Contact struct {\n\tPhoneNumber string `json:\"phone_number\"`\n\tFirstName   string `json:\"first_name\"`\n\n\t// (Optional)\n\tLastName string `json:\"last_name\"`\n\tUserID   int64  `json:\"user_id,omitempty\"`\n\tVCard    string `json:\"vcard,omitempty\"`\n}\n\n// LiveForever is an alias for math.MaxInt32.\n// Use it for LivePeriod of the Location.\nconst LiveForever = math.MaxInt32\n\n// Location object represents geographic position.\ntype Location struct {\n\tLat                float32  `json:\"latitude\"`\n\tLng                float32  `json:\"longitude\"`\n\tHorizontalAccuracy *float32 `json:\"horizontal_accuracy,omitempty\"`\n\tHeading            int      `json:\"heading,omitempty\"`\n\tAlertRadius        int      `json:\"proximity_alert_radius,omitempty\"`\n\n\t// Period in seconds for which the location will be updated\n\t// (see Live Locations, should be between 60 and 86400.)\n\tLivePeriod int `json:\"live_period,omitempty\"`\n\n\t// (Optional) Unique identifier of the business connection\n\t// on behalf of which the message to be edited was sent\n\tBusinessConnectionID string `json:\"business_connection_id,omitempty\"`\n}\n\n// Venue object represents a venue location with name, address and\n// optional foursquare ID.\ntype Venue struct {\n\tLocation Location `json:\"location\"`\n\tTitle    string   `json:\"title\"`\n\tAddress  string   `json:\"address\"`\n\n\t// (Optional)\n\tFoursquareID    string `json:\"foursquare_id,omitempty\"`\n\tFoursquareType  string `json:\"foursquare_type,omitempty\"`\n\tGooglePlaceID   string `json:\"google_place_id,omitempty\"`\n\tGooglePlaceType string `json:\"google_place_type,omitempty\"`\n}\n\n// Dice object represents a dice with a random value\n// from 1 to 6 for currently supported base emoji.\ntype Dice struct {\n\tType  DiceType `json:\"emoji\"`\n\tValue int      `json:\"value\"`\n}\n\n// DiceType defines dice types.\ntype DiceType string\n\nvar (\n\tCube = &Dice{Type: \"🎲\"}\n\tDart = &Dice{Type: \"🎯\"}\n\tBall = &Dice{Type: \"🏀\"}\n\tGoal = &Dice{Type: \"⚽\"}\n\tSlot = &Dice{Type: \"🎰\"}\n\tBowl = &Dice{Type: \"🎳\"}\n)\n\n// PaidInputtable is a generic type for all kinds of media you\n// can put into an album that are paid.\ntype PaidInputtable interface {\n\tInputtable\n\n\t// Paid shows if the media is paid.\n\tPaid() bool\n}\n\n// PaidAlbum lets you group multiple paid media into a single message.\ntype PaidAlbum []PaidInputtable\n\ntype PaidMedias struct {\n\tStars     int         `json:\"star_count\"`\n\tPaidMedia []PaidMedia `json:\"paid_media\"`\n}\n\ntype PaidMedia struct {\n\tType     string `json:\"type\"`\n\tPhoto    *Photo `json:\"photo\"`    // photo\n\tVideo    *Video `json:\"video\"`    // video\n\tWidth    int    `json:\"width\"`    // preview only\n\tHeight   int    `json:\"height\"`   // preview only\n\tDuration int    `json:\"duration\"` // preview only\n}\n"
        },
        {
          "name": "media_test.go",
          "type": "blob",
          "size": 0.8681640625,
          "content": "package telebot\n\nimport (\n\t\"github.com/stretchr/testify/assert\"\n\t\"testing\"\n)\n\nfunc TestAlbumSetCaption(t *testing.T) {\n\ttests := []struct {\n\t\tname  string\n\t\tmedia Inputtable\n\t}{\n\t\t{\n\t\t\tname:  \"photo\",\n\t\t\tmedia: &Photo{Caption: \"wrong_caption\"},\n\t\t},\n\t\t{\n\t\t\tname:  \"animation\",\n\t\t\tmedia: &Animation{Caption: \"wrong_caption\"},\n\t\t},\n\t\t{\n\t\t\tname:  \"video\",\n\t\t\tmedia: &Video{Caption: \"wrong_caption\"},\n\t\t},\n\t\t{\n\t\t\tname:  \"audio\",\n\t\t\tmedia: &Audio{Caption: \"wrong_caption\"},\n\t\t},\n\t\t{\n\t\t\tname:  \"document\",\n\t\t\tmedia: &Document{Caption: \"wrong_caption\"},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tvar a Album\n\t\t\ta = append(a, tt.media)\n\t\t\ta = append(a, &Photo{Caption: \"random_caption\"})\n\t\t\ta.SetCaption(\"correct_caption\")\n\t\t\tassert.Equal(t, \"correct_caption\", a[0].InputMedia().Caption)\n\t\t\tassert.Equal(t, \"random_caption\", a[1].InputMedia().Caption)\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "message.go",
          "type": "blob",
          "size": 24.9765625,
          "content": "package telebot\n\nimport (\n\t\"strconv\"\n\t\"time\"\n\t\"unicode/utf16\"\n)\n\n// Message object represents a message.\ntype Message struct {\n\tID int `json:\"message_id\"`\n\n\t// (Optional) Unique identifier of a message thread to which the message belongs; for supergroups only\n\tThreadID int `json:\"message_thread_id\"`\n\n\t// For message sent to channels, Sender will be nil\n\tSender *User `json:\"from\"`\n\n\t// Unixtime, use Message.Time() to get time.Time\n\tUnixtime int64 `json:\"date\"`\n\n\t// Conversation the message belongs to.\n\tChat *Chat `json:\"chat\"`\n\n\t// Sender of the message, sent on behalf of a chat.\n\tSenderChat *Chat `json:\"sender_chat\"`\n\n\t// For forwarded messages, sender of the original message.\n\tOriginalSender *User `json:\"forward_from\"`\n\n\t// For forwarded messages, chat of the original message when\n\t// forwarded from a channel.\n\tOriginalChat *Chat `json:\"forward_from_chat\"`\n\n\t// For forwarded messages, identifier of the original message\n\t// when forwarded from a channel.\n\tOriginalMessageID int `json:\"forward_from_message_id\"`\n\n\t// For forwarded messages, signature of the post author.\n\tOriginalSignature string `json:\"forward_signature\"`\n\n\t// For forwarded messages, sender's name from users who\n\t// disallow adding a link to their account.\n\tOriginalSenderName string `json:\"forward_sender_name\"`\n\n\t// For forwarded messages, unixtime of the original message.\n\tOriginalUnixtime int `json:\"forward_date\"`\n\n\t// For information about the original message for forwarded messages.\n\tOrigin *MessageOrigin `json:\"forward_origin\"`\n\n\t// Message is a channel post that was automatically forwarded to the connected discussion group.\n\tAutomaticForward bool `json:\"is_automatic_forward\"`\n\n\t// For replies, ReplyTo represents the original message.\n\t//\n\t// Note that the Message object in this field will not\n\t// contain further ReplyTo fields even if it\n\t// itself is a reply.\n\tReplyTo *Message `json:\"reply_to_message\"`\n\n\t// (Optional) For replies to a story, the original story\n\tStory *Story `json:\"story\"`\n\n\t// (Optional) Information about the message that is being replied to,\n\t// which may come from another chat or forum topic.\n\tExternalReply *ExternalReply `json:\"external_reply\"`\n\n\t// (Optional) For replies that quote part of the original message,\n\t// the quoted part of the message.\n\tQuote *TextQuote `json:\"quote\"`\n\n\t// Shows through which bot the message was sent.\n\tVia *User `json:\"via_bot\"`\n\n\t// For replies to a story, the original story.\n\tReplyToStory *Story `json:\"reply_to_story\"`\n\n\t// (Optional) Time of last edit in Unix.\n\tLastEdit int64 `json:\"edit_date\"`\n\n\t// (Optional) True, if the message is sent to a forum topic.\n\tTopicMessage bool `json:\"is_topic_message\"`\n\n\t// (Optional) Message can't be forwarded.\n\tProtected bool `json:\"has_protected_content,omitempty\"`\n\n\t// (Optional) True, if the message was sent by an implicit action,\n\t// for example, as an away or a greeting business message, or as a scheduled message\n\tFromOffline bool `json:\"is_from_offline,omitempty\"`\n\n\t// AlbumID is the unique identifier of a media message group\n\t// this message belongs to.\n\tAlbumID string `json:\"media_group_id\"`\n\n\t// Author signature (in channels).\n\tSignature string `json:\"author_signature\"`\n\n\t// For a text message, the actual UTF-8 text of the message.\n\tText string `json:\"text\"`\n\n\t// For registered commands, will contain the string payload:\n\t//\n\t// Ex: `/command <payload>` or `/command@botname <payload>`\n\tPayload string `json:\"-\"`\n\n\t// For text messages, special entities like usernames, URLs, bot commands,\n\t// etc. that appear in the text.\n\tEntities Entities `json:\"entities,omitempty\"`\n\n\t// (Optional) PreviewOptions used for link preview generation for the message,\n\t// if it is a text message and link preview options were changed.\n\tPreviewOptions *PreviewOptions `json:\"link_preview_options,omitempty\"`\n\n\t// (Optional) Unique identifier of the message effect added to the message\n\tEffectID string `json:\"effect_id\"`\n\n\t// Some messages containing media, may as well have a caption.\n\tCaption string `json:\"caption,omitempty\"`\n\n\t// For messages with a caption, special entities like usernames, URLs,\n\t// bot commands, etc. that appear in the caption.\n\tCaptionEntities Entities `json:\"caption_entities,omitempty\"`\n\n\t// For an audio recording, information about it.\n\tAudio *Audio `json:\"audio\"`\n\n\t// For a general file, information about it.\n\tDocument *Document `json:\"document\"`\n\n\t// Message contains paid media; information about the paid media\n\tPaidMedia PaidMedias `json:\"paid_media\"`\n\n\t// For a photo, all available sizes (thumbnails).\n\tPhoto *Photo `json:\"photo\"`\n\n\t// For a sticker, information about it.\n\tSticker *Sticker `json:\"sticker\"`\n\n\t// For a voice message, information about it.\n\tVoice *Voice `json:\"voice\"`\n\n\t// For a video note, information about it.\n\tVideoNote *VideoNote `json:\"video_note\"`\n\n\t// For a video, information about it.\n\tVideo *Video `json:\"video\"`\n\n\t// For an animation, information about it.\n\tAnimation *Animation `json:\"animation\"`\n\n\t// For a contact, contact information itself.\n\tContact *Contact `json:\"contact\"`\n\n\t// For a location, its longitude and latitude.\n\tLocation *Location `json:\"location\"`\n\n\t// For a venue, information about it.\n\tVenue *Venue `json:\"venue\"`\n\n\t// For a poll, information the native poll.\n\tPoll *Poll `json:\"poll\"`\n\n\t// For a game, information about it.\n\tGame *Game `json:\"game\"`\n\n\t// For a dice, information about it.\n\tDice *Dice `json:\"dice\"`\n\n\t// (Optional) The message is a scheduled giveaway message.\n\tGiveaway *Giveaway `json:\"giveaway\"`\n\n\t// (Optional) A giveaway with public winners was completed.\n\tGiveawayWinners *GiveawayWinners `json:\"giveaway_winners\"`\n\n\t// (Optional) Service message: a scheduled giveaway was created.\n\tGiveawayCreated *GiveawayCreated `json:\"giveaway_created\"`\n\n\t// (Optional) Service message: a giveaway without public winners was completed.\n\tGiveawayCompleted *GiveawayCompleted `json:\"giveaway_completed\"`\n\n\t// (Optional) Unique identifier of the business connection from which the message\n\t// was received. If non-empty, the message belongs to a chat of the corresponding\n\t// business account that is independent from any potential bot chat which might\n\t// share the same identifier.\n\tBusinessConnectionID string `json:\"business_connection_id\"`\n\n\t// (Optional) The bot that actually sent the message on behalf of the business account.\n\t// Available only for outgoing messages sent on behalf of the connected business account.\n\tBusinessBot *User `json:\"sender_business_bot\"`\n\n\t// For a service message, represents a user,\n\t// that just got added to chat, this message came from.\n\t//\n\t// Sender leads to User, capable of invite.\n\t//\n\t// UserJoined might be the Bot itself.\n\tUserJoined *User `json:\"new_chat_member\"`\n\n\t// For a service message, represents a user,\n\t// that just left chat, this message came from.\n\t//\n\t// If user was kicked, Sender leads to a User,\n\t// capable of this kick.\n\t//\n\t// UserLeft might be the Bot itself.\n\tUserLeft *User `json:\"left_chat_member\"`\n\n\t// For a service message, represents a new title\n\t// for chat this message came from.\n\t//\n\t// Sender would lead to a User, capable of change.\n\tNewGroupTitle string `json:\"new_chat_title\"`\n\n\t// For a service message, represents all available\n\t// thumbnails of the new chat photo.\n\t//\n\t// Sender would lead to a User, capable of change.\n\tNewGroupPhoto *Photo `json:\"new_chat_photo\"`\n\n\t// For a service message, new members that were added to\n\t// the group or supergroup and information about them\n\t// (the bot itself may be one of these members).\n\tUsersJoined []User `json:\"new_chat_members\"`\n\n\t// For a service message, true if chat photo just\n\t// got removed.\n\t//\n\t// Sender would lead to a User, capable of change.\n\tGroupPhotoDeleted bool `json:\"delete_chat_photo\"`\n\n\t// For a service message, true if group has been created.\n\t//\n\t// You would receive such a message if you are one of\n\t// initial group chat members.\n\t//\n\t// Sender would lead to creator of the chat.\n\tGroupCreated bool `json:\"group_chat_created\"`\n\n\t// For a service message, true if supergroup has been created.\n\t//\n\t// You would receive such a message if you are one of\n\t// initial group chat members.\n\t//\n\t// Sender would lead to creator of the chat.\n\tSuperGroupCreated bool `json:\"supergroup_chat_created\"`\n\n\t// For a service message, true if channel has been created.\n\t//\n\t// You would receive such a message if you are one of\n\t// initial channel administrators.\n\t//\n\t// Sender would lead to creator of the chat.\n\tChannelCreated bool `json:\"channel_chat_created\"`\n\n\t// For a service message, the destination (supergroup) you\n\t// migrated to.\n\t//\n\t// You would receive such a message when your chat has migrated\n\t// to a supergroup.\n\t//\n\t// Sender would lead to creator of the migration.\n\tMigrateTo int64 `json:\"migrate_to_chat_id\"`\n\n\t// For a service message, the Origin (normal group) you migrated\n\t// from.\n\t//\n\t// You would receive such a message when your chat has migrated\n\t// to a supergroup.\n\t//\n\t// Sender would lead to creator of the migration.\n\tMigrateFrom int64 `json:\"migrate_from_chat_id\"`\n\n\t// Specified message was pinned. Note that the Message object\n\t// in this field will not contain further ReplyTo fields even\n\t// if it is itself a reply.\n\tPinnedMessage *Message `json:\"pinned_message\"`\n\n\t// Message is an invoice for a payment.\n\tInvoice *Invoice `json:\"invoice\"`\n\n\t// Message is a service message about a successful payment.\n\tPayment *Payment `json:\"successful_payment\"`\n\n\t// Message is a service message about a refunded payment, information about the payment.\n\tRefundedPayment *RefundedPayment `json:\"refunded_payment\"`\n\n\t// For a service message, a user was shared with the bot.\n\tUserShared *RecipientShared `json:\"users_shared,omitempty\"`\n\n\t// For a service message, a chat was shared with the bot.\n\tChatShared *RecipientShared `json:\"chat_shared,omitempty\"`\n\n\t// The domain name of the website on which the user has logged in.\n\tConnectedWebsite string `json:\"connected_website,omitempty\"`\n\n\t// For a service message, a video chat started in the chat.\n\tVideoChatStarted *VideoChatStarted `json:\"video_chat_started,omitempty\"`\n\n\t// For a service message, a video chat ended in the chat.\n\tVideoChatEnded *VideoChatEnded `json:\"video_chat_ended,omitempty\"`\n\n\t// For a service message, some users were invited in the video chat.\n\tVideoChatParticipants *VideoChatParticipants `json:\"video_chat_participants_invited,omitempty\"`\n\n\t// For a service message, a video chat schedule in the chat.\n\tVideoChatScheduled *VideoChatScheduled `json:\"video_chat_scheduled,omitempty\"`\n\n\t// For a data sent by a Web App.\n\tWebAppData *WebAppData `json:\"web_app_data,omitempty\"`\n\n\t// For a service message, represents the content of a service message,\n\t// sent whenever a user in the chat triggers a proximity alert set by another user.\n\tProximityAlert *ProximityAlert `json:\"proximity_alert_triggered,omitempty\"`\n\n\t// For a service message, represents about a change in auto-delete timer settings.\n\tAutoDeleteTimer *AutoDeleteTimer `json:\"message_auto_delete_timer_changed,omitempty\"`\n\n\t// Inline keyboard attached to the message.\n\tReplyMarkup *ReplyMarkup `json:\"reply_markup,omitempty\"`\n\n\t// Service message: user boosted the chat.\n\tBoostAdded *BoostAdded `json:\"boost_added\"`\n\n\t// Service message: chat background set\n\tChatBackground ChatBackground `json:\"chat_background_set\"`\n\n\t// If the sender of the message boosted the chat, the number of boosts\n\t// added by the user.\n\tSenderBoosts int `json:\"sender_boost_count\"`\n\n\t// Service message: forum topic created\n\tTopicCreated *Topic `json:\"forum_topic_created,omitempty\"`\n\n\t// Service message: forum topic closed\n\tTopicClosed *struct{} `json:\"forum_topic_closed,omitempty\"`\n\n\t// Service message: forum topic reopened\n\tTopicReopened *Topic `json:\"forum_topic_reopened,omitempty\"`\n\n\t// Service message: forum topic deleted\n\tTopicEdited *Topic `json:\"forum_topic_edited,omitempty\"`\n\n\t// Service message: general forum topic hidden\n\tGeneralTopicHidden *struct{} `json:\"general_topic_hidden,omitempty\"`\n\n\t// Service message: general forum topic unhidden\n\tGeneralTopicUnhidden *struct{} `json:\"general_topic_unhidden,omitempty\"`\n\n\t// Service message: represents spoiler information about the message.\n\tHasMediaSpoiler bool `json:\"has_media_spoiler,omitempty\"`\n\n\t// (Optional) Pass True, if the caption must be shown above the message media\n\tCaptionAbove bool `json:\"show_caption_above_media\"`\n\n\t// Service message: the user allowed the bot added to the attachment menu to write messages\n\tWriteAccessAllowed *WriteAccessAllowed `json:\"write_access_allowed,omitempty\"`\n}\n\n// MessageEntity object represents \"special\" parts of text messages,\n// including hashtags, usernames, URLs, etc.\ntype MessageEntity struct {\n\t// Specifies entity type.\n\tType EntityType `json:\"type\"`\n\n\t// Offset in UTF-16 code units to the start of the entity.\n\tOffset int `json:\"offset\"`\n\n\t// Length of the entity in UTF-16 code units.\n\tLength int `json:\"length\"`\n\n\t// (Optional) For EntityTextLink entity type only.\n\t//\n\t// URL will be opened after user taps on the text.\n\tURL string `json:\"url,omitempty\"`\n\n\t// (Optional) For EntityTMention entity type only.\n\tUser *User `json:\"user,omitempty\"`\n\n\t// (Optional) For EntityCodeBlock entity type only.\n\tLanguage string `json:\"language,omitempty\"`\n\n\t// (Optional) For EntityCustomEmoji entity type only.\n\tCustomEmojiID string `json:\"custom_emoji_id\"`\n}\n\n// EntityType is a MessageEntity type.\ntype EntityType string\n\nconst (\n\tEntityMention       EntityType = \"mention\"\n\tEntityTMention      EntityType = \"text_mention\"\n\tEntityHashtag       EntityType = \"hashtag\"\n\tEntityCashtag       EntityType = \"cashtag\"\n\tEntityCommand       EntityType = \"bot_command\"\n\tEntityURL           EntityType = \"url\"\n\tEntityEmail         EntityType = \"email\"\n\tEntityPhone         EntityType = \"phone_number\"\n\tEntityBold          EntityType = \"bold\"\n\tEntityItalic        EntityType = \"italic\"\n\tEntityUnderline     EntityType = \"underline\"\n\tEntityStrikethrough EntityType = \"strikethrough\"\n\tEntityCode          EntityType = \"code\"\n\tEntityCodeBlock     EntityType = \"pre\"\n\tEntityTextLink      EntityType = \"text_link\"\n\tEntitySpoiler       EntityType = \"spoiler\"\n\tEntityCustomEmoji   EntityType = \"custom_emoji\"\n\tEntityBlockquote    EntityType = \"blockquote\"\n\tEntityEBlockquote   EntityType = \"expandable_blockquote\"\n)\n\n// Entities are used to set message's text entities as a send option.\ntype Entities []MessageEntity\n\n// ProximityAlert sent whenever a user in the chat triggers\n// a proximity alert set by another user.\ntype ProximityAlert struct {\n\tTraveler *User `json:\"traveler,omitempty\"`\n\tWatcher  *User `json:\"watcher,omitempty\"`\n\tDistance int   `json:\"distance\"`\n}\n\n// AutoDeleteTimer represents a service message about a change in auto-delete timer settings.\ntype AutoDeleteTimer struct {\n\tUnixtime int `json:\"message_auto_delete_time\"`\n}\n\n// Inaccessible shows whether the message is InaccessibleMessage object.\nfunc (m *Message) Inaccessible() bool {\n\treturn m.Sender == nil\n}\n\n// MessageSig satisfies Editable interface (see Editable.)\nfunc (m *Message) MessageSig() (string, int64) {\n\treturn strconv.Itoa(m.ID), m.Chat.ID\n}\n\n// Time returns the moment of message creation in local time.\nfunc (m *Message) Time() time.Time {\n\treturn time.Unix(m.Unixtime, 0)\n}\n\n// LastEdited returns time.Time of last edit.\nfunc (m *Message) LastEdited() time.Time {\n\treturn time.Unix(m.LastEdit, 0)\n}\n\n// IsForwarded says whether message is forwarded copy of another\n// message or not.\nfunc (m *Message) IsForwarded() bool {\n\treturn m.OriginalSender != nil || m.OriginalChat != nil\n}\n\n// IsReply says whether message is a reply to another message.\nfunc (m *Message) IsReply() bool {\n\treturn m.ReplyTo != nil\n}\n\n// Private returns true, if it's a personal message.\nfunc (m *Message) Private() bool {\n\treturn m.Chat.Type == ChatPrivate\n}\n\n// FromGroup returns true, if message came from a group OR a supergroup.\nfunc (m *Message) FromGroup() bool {\n\treturn m.Chat.Type == ChatGroup || m.Chat.Type == ChatSuperGroup\n}\n\n// FromChannel returns true, if message came from a channel.\nfunc (m *Message) FromChannel() bool {\n\treturn m.Chat.Type == ChatChannel\n}\n\n// IsService returns true, if message is a service message,\n// returns false otherwise.\n//\n// Service messages are automatically sent messages, which\n// typically occur on some global action. For instance, when\n// anyone leaves the chat or chat title changes.\nfunc (m *Message) IsService() bool {\n\tfact := false\n\n\tfact = fact || m.UserJoined != nil\n\tfact = fact || len(m.UsersJoined) > 0\n\tfact = fact || m.UserLeft != nil\n\tfact = fact || m.NewGroupTitle != \"\"\n\tfact = fact || m.NewGroupPhoto != nil\n\tfact = fact || m.GroupPhotoDeleted\n\tfact = fact || m.GroupCreated || m.SuperGroupCreated\n\tfact = fact || (m.MigrateTo != m.MigrateFrom)\n\n\treturn fact\n}\n\n// EntityText returns the substring of the message identified by the\n// given MessageEntity.\n//\n// It's safer than manually slicing Text because Telegram uses\n// UTF-16 indices whereas Go string are []byte.\nfunc (m *Message) EntityText(e MessageEntity) string {\n\ttext := m.Text\n\tif text == \"\" {\n\t\ttext = m.Caption\n\t}\n\n\ta := utf16.Encode([]rune(text))\n\toff, end := e.Offset, e.Offset+e.Length\n\n\tif off < 0 || end > len(a) {\n\t\treturn \"\"\n\t}\n\n\treturn string(utf16.Decode(a[off:end]))\n}\n\n// Media returns the message's media if it contains either photo,\n// voice, audio, animation, sticker, document, video or video note.\nfunc (m *Message) Media() Media {\n\tswitch {\n\tcase m.Photo != nil:\n\t\treturn m.Photo\n\tcase m.Voice != nil:\n\t\treturn m.Voice\n\tcase m.Audio != nil:\n\t\treturn m.Audio\n\tcase m.Animation != nil:\n\t\treturn m.Animation\n\tcase m.Sticker != nil:\n\t\treturn m.Sticker\n\tcase m.Document != nil:\n\t\treturn m.Document\n\tcase m.Video != nil:\n\t\treturn m.Video\n\tcase m.VideoNote != nil:\n\t\treturn m.VideoNote\n\tdefault:\n\t\treturn nil\n\t}\n}\n\n// MessageReaction object represents a change of a reaction on a message performed by a user.\ntype MessageReaction struct {\n\t// The chat containing the message the user reacted to.\n\tChat *Chat `json:\"chat\"`\n\n\t// Unique identifier of the message inside the chat.\n\tMessageID int `json:\"message_id\"`\n\n\t// (Optional) The user that changed the reaction,\n\t// if the user isn't anonymous\n\tUser *User `json:\"user\"`\n\n\t// (Optional) The chat on behalf of which the reaction was changed,\n\t// if the user is anonymous.\n\tActorChat *Chat `json:\"actor_chat\"`\n\n\t// Date of the change in Unix time.\n\tDateUnixtime int64 `json:\"date\"`\n\n\t// Previous list of reaction types that were set by the user.\n\tOldReaction []Reaction `json:\"old_reaction\"`\n\n\t// New list of reaction types that have been set by the user.\n\tNewReaction []Reaction `json:\"new_reaction\"`\n}\n\nfunc (mu *MessageReaction) Time() time.Time {\n\treturn time.Unix(mu.DateUnixtime, 0)\n}\n\n// MessageReactionCount represents reaction changes on a message with\n// anonymous reactions.\ntype MessageReactionCount struct {\n\t// The chat containing the message.\n\tChat *Chat `json:\"chat\"`\n\n\t// Unique message identifier inside the chat.\n\tMessageID int `json:\"message_id\"`\n\n\t// Date of the change in Unix time.\n\tDateUnixtime int64 `json:\"date\"`\n\n\t// List of reactions that are present on the message.\n\tReactions []*ReactionCount `json:\"reactions\"`\n}\n\n// Time returns the moment of change in local time.\nfunc (mc *MessageReactionCount) Time() time.Time {\n\treturn time.Unix(mc.DateUnixtime, 0)\n}\n\n// TextQuote contains information about the quoted part of a message that is\n// replied to by the given message.\ntype TextQuote struct {\n\t// Text of the quoted part of a message that is replied to by the given message.\n\tText string `json:\"text\"`\n\n\t// (Optional) Special entities that appear in the quote.\n\t// Currently, only bold, italic, underline, strikethrough, spoiler,\n\t// and custom_emoji entities are kept in quotes.\n\tEntities []MessageEntity `json:\"entities\"`\n\n\t// Approximate quote position in the original message in UTF-16 code units\n\t// as specified by the sender.\n\tPosition int `json:\"position\"`\n\n\t// (Optional) True, if the quote was chosen manually by the message sender.\n\t// Otherwise, the quote was added automatically by the server.\n\tManual bool `json:\"is_manual\"`\n}\n\n// MessageOrigin a message reference that has been sent originally by a known user.\ntype MessageOrigin struct {\n\t// Type of the message origin, always “channel”.\n\tType string `json:\"type\"`\n\n\t// Date the message was sent originally in Unix time.\n\tDateUnixtime int64 `json:\"date\"`\n\n\t// User that sent the message originally.\n\tSender *User `json:\"sender_user,omitempty\"`\n\n\t// Name of the user that sent the message originally.\n\tSenderUsername string `json:\"sender_user_name,omitempty\"`\n\n\t// Chat that sent the message originally.\n\tSenderChat *Chat `json:\"sender_chat,omitempty\"`\n\n\t// Channel chat to which the message was originally sent.\n\tChat *Chat `json:\"chat,omitempty\"`\n\n\t// Unique message identifier inside the chat.\n\tMessageID int `json:\"message_id,omitempty\"`\n\n\t// (Optional) For messages originally sent by an anonymous chat administrator,\n\t// original message author signature.\n\tSignature string `json:\"author_signature,omitempty\"`\n}\n\n// Time returns the moment of message that was sent originally in local time.\nfunc (mo *MessageOrigin) Time() time.Time {\n\treturn time.Unix(mo.DateUnixtime, 0)\n}\n\n// ExternalReply contains information about a message that is being replied to,\n// which may come from another chat or forum topic.\ntype ExternalReply struct {\n\t// Origin of the message replied to by the given message.\n\tOrigin *MessageOrigin `json:\"origin\"`\n\n\t// (Optional) Chat the original message belongs to.\n\t// Available only if the chat is a supergroup or a channel.\n\tChat *Chat `json:\"chat\"`\n\n\t// (Optional) Unique message identifier inside the original chat.\n\t// Available only if the original chat is a supergroup or a channel.\n\tMessageID int `json:\"message_id\"`\n\n\t// (Optional) PreviewOptions used for link preview generation for the original message,\n\t// if it is a text message.\n\tPreviewOptions *PreviewOptions `json:\"link_preview_options\"`\n\n\t// (Optional) Message is an animation, information about the animation.\n\tAnimation *Animation `json:\"animation\"`\n\n\t// (Optional) Message is an audio file, information about the file.\n\tAudio *Audio `json:\"audio\"`\n\n\t// (Optional) Message is a general file, information about the file.\n\tDocument *Document `json:\"document\"`\n\n\t// (Optional) Message is a photo, available sizes of the photo.\n\tPhoto []Photo `json:\"photo\"`\n\n\t// (Optional) Message is a sticker, information about the sticker.\n\tSticker *Sticker `json:\"sticker\"`\n\n\t// (Optional) Message is a forwarded story.\n\tStory *Story `json:\"story\"`\n\n\t// (Optional) Message is a video, information about the video.\n\tVideo *Video `json:\"video\"`\n\n\t// (Optional) Message is a video note, information about the video message.\n\tNote *VideoNote `json:\"video_note\"`\n\n\t// (Optional) Message is a voice message, information about the file.\n\tVoice *Voice `json:\"voice\"`\n\n\t// (Optional) Message is a shared contact, information about the contact.\n\tContact *Contact `json:\"contact\"`\n\n\t// (Optional) Message is a dice with random value.\n\tDice *Dice `json:\"dice\"`\n\n\t//( Optional) Message is a game, information about the game.\n\tGame *Game `json:\"game\"`\n\n\t// (Optional) Message is a venue, information about the venue.\n\tVenue *Venue `json:\"venue\"`\n\n\t// (Optional) Message is a native poll, information about the poll.\n\tPoll *Poll `json:\"poll\"`\n\n\t// (Optional) Message is a shared location, information about the location.\n\tLocation *Location `json:\"location\"`\n\n\t// (Optional) Message is an invoice for a payment, information about the invoice.\n\tInvoice *Invoice `json:\"invoice\"`\n\n\t// (Optional) Message is a scheduled giveaway, information about the giveaway.\n\tGiveaway *Giveaway `json:\"giveaway\"`\n\n\t// (Optional) A giveaway with public winners was completed.\n\tGiveawayWinners *GiveawayWinners `json:\"giveaway_winners\"`\n\n\t// Message contains paid media; information about the paid media\n\tPaidMedia PaidMedias `json:\"paid_media\"`\n\n\t// (Optional) True, if the message media is covered by a spoiler animation.\n\tHasMediaSpoiler bool `json:\"has_media_spoiler\"`\n}\n\n// ReplyParams describes reply parameters for the message that is being sent.\ntype ReplyParams struct {\n\t// Identifier of the message that will be replied to in the current chat,\n\t// or in the chat chat_id if it is specified.\n\tMessageID int `json:\"message_id\"`\n\n\t// (Optional) If the message to be replied to is from a different chat,\n\t// unique identifier for the chat or username of the channel.\n\tChatID int64 `json:\"chat_id\"`\n\n\t// Optional. Pass True if the message should be sent even if the specified message\n\t// to be replied to is not found; can be used only for replies in the\n\t// same chat and forum topic.\n\tAllowWithoutReply bool `json:\"allow_sending_without_reply\"`\n\n\t// (Optional) Quoted part of the message to be replied to; 0-1024 characters after\n\t// entities parsing. The quote must be an exact substring of the message to be replied to,\n\t// including bold, italic, underline, strikethrough, spoiler, and custom_emoji entities.\n\t// The message will fail to send if the quote isn't found in the original message.\n\tQuote string `json:\"quote\"`\n\n\t// (Optional) Mode for parsing entities in the quote.\n\tQuoteParseMode ParseMode `json:\"quote_parse_mode\"`\n\n\t// (Optional) A JSON-serialized list of special entities that appear in the quote.\n\t// It can be specified instead of quote_parse_mode.\n\tQuoteEntities []MessageEntity `json:\"quote_entities\"`\n\n\t// (Optional) Position of the quote in the original message in UTF-16 code units.\n\tQuotePosition int `json:\"quote_position\"`\n}\n"
        },
        {
          "name": "middleware.go",
          "type": "blob",
          "size": 1.044921875,
          "content": "package telebot\n\n// MiddlewareFunc represents a middleware processing function,\n// which get called before the endpoint group or specific handler.\ntype MiddlewareFunc func(HandlerFunc) HandlerFunc\n\nfunc appendMiddleware(a, b []MiddlewareFunc) []MiddlewareFunc {\n\tif len(a) == 0 {\n\t\treturn b\n\t}\n\n\tm := make([]MiddlewareFunc, 0, len(a)+len(b))\n\treturn append(m, append(a, b...)...)\n}\n\nfunc applyMiddleware(h HandlerFunc, m ...MiddlewareFunc) HandlerFunc {\n\tfor i := len(m) - 1; i >= 0; i-- {\n\t\th = m[i](h)\n\t}\n\treturn h\n}\n\n// Group is a separated group of handlers, united by the general middleware.\ntype Group struct {\n\tb          *Bot\n\tmiddleware []MiddlewareFunc\n}\n\n// Use adds middleware to the chain.\nfunc (g *Group) Use(middleware ...MiddlewareFunc) {\n\tg.middleware = append(g.middleware, middleware...)\n}\n\n// Handle adds endpoint handler to the bot, combining group's middleware\n// with the optional given middleware.\nfunc (g *Group) Handle(endpoint interface{}, h HandlerFunc, m ...MiddlewareFunc) {\n\tg.b.Handle(endpoint, h, appendMiddleware(g.middleware, m)...)\n}\n"
        },
        {
          "name": "middleware",
          "type": "tree",
          "content": null
        },
        {
          "name": "options.go",
          "type": "blob",
          "size": 7.14453125,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"strconv\"\n)\n\n// Option is a shortcut flag type for certain message features\n// (so-called options). It means that instead of passing\n// fully-fledged SendOptions* to Send(), you can use these\n// flags instead.\n//\n// Supported options are defined as iota-constants.\ntype Option int\n\nconst (\n\t// NoPreview = SendOptions.DisableWebPagePreview\n\tNoPreview Option = iota\n\n\t// Silent = SendOptions.DisableNotification\n\tSilent\n\n\t// AllowWithoutReply = SendOptions.AllowWithoutReply\n\tAllowWithoutReply\n\n\t// Protected = SendOptions.Protected\n\tProtected\n\n\t// ForceReply = ReplyMarkup.ForceReply\n\tForceReply\n\n\t// OneTimeKeyboard = ReplyMarkup.OneTimeKeyboard\n\tOneTimeKeyboard\n\n\t// RemoveKeyboard = ReplyMarkup.RemoveKeyboard\n\tRemoveKeyboard\n\n\t// IgnoreThread is used to ignore the thread when responding to a message via context.\n\tIgnoreThread\n)\n\n// Placeholder is used to set input field placeholder as a send option.\nfunc Placeholder(text string) *SendOptions {\n\treturn &SendOptions{\n\t\tReplyMarkup: &ReplyMarkup{\n\t\t\tForceReply:  true,\n\t\t\tPlaceholder: text,\n\t\t},\n\t}\n}\n\n// SendOptions has most complete control over in what way the message\n// must be sent, providing an API-complete set of custom properties\n// and options.\n//\n// Despite its power, SendOptions is rather inconvenient to use all\n// the way through bot logic, so you might want to consider storing\n// and re-using it somewhere or be using Option flags instead.\ntype SendOptions struct {\n\t// If the message is a reply, original message.\n\tReplyTo *Message\n\n\t// See ReplyMarkup struct definition.\n\tReplyMarkup *ReplyMarkup\n\n\t// For text messages, disables previews for links in this message.\n\tDisableWebPagePreview bool\n\n\t// Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.\n\tDisableNotification bool\n\n\t// ParseMode controls how client apps render your message.\n\tParseMode ParseMode\n\n\t// Entities is a list of special entities that appear in message text, which can be specified instead of parse_mode.\n\tEntities Entities\n\n\t// AllowWithoutReply allows sending messages not a as reply if the replied-to message has already been deleted.\n\tAllowWithoutReply bool\n\n\t// Protected protects the contents of sent message from forwarding and saving.\n\tProtected bool\n\n\t// ThreadID supports sending messages to a thread.\n\tThreadID int\n\n\t// HasSpoiler marks the message as containing a spoiler.\n\tHasSpoiler bool\n\n\t// ReplyParams Describes the message to reply to\n\tReplyParams *ReplyParams\n\n\t// Unique identifier of the business connection\n\tBusinessConnectionID string\n\n\t// Unique identifier of the message effect to be added to the message; for private chats only\n\tEffectID string\n}\n\nfunc (og *SendOptions) copy() *SendOptions {\n\tcp := *og\n\tif cp.ReplyMarkup != nil {\n\t\tcp.ReplyMarkup = cp.ReplyMarkup.copy()\n\t}\n\treturn &cp\n}\n\nfunc (b *Bot) extractOptions(how []interface{}) *SendOptions {\n\topts := &SendOptions{\n\t\tParseMode: b.parseMode,\n\t}\n\n\tfor _, prop := range how {\n\t\tswitch opt := prop.(type) {\n\t\tcase *SendOptions:\n\t\t\topts = opt.copy()\n\t\tcase *ReplyMarkup:\n\t\t\tif opt != nil {\n\t\t\t\topts.ReplyMarkup = opt.copy()\n\t\t\t}\n\t\tcase *ReplyParams:\n\t\t\topts.ReplyParams = opt\n\t\tcase *Topic:\n\t\t\topts.ThreadID = opt.ThreadID\n\t\tcase Option:\n\t\t\tswitch opt {\n\t\t\tcase NoPreview:\n\t\t\t\topts.DisableWebPagePreview = true\n\t\t\tcase Silent:\n\t\t\t\topts.DisableNotification = true\n\t\t\tcase AllowWithoutReply:\n\t\t\t\topts.AllowWithoutReply = true\n\t\t\tcase ForceReply:\n\t\t\t\tif opts.ReplyMarkup == nil {\n\t\t\t\t\topts.ReplyMarkup = &ReplyMarkup{}\n\t\t\t\t}\n\t\t\t\topts.ReplyMarkup.ForceReply = true\n\t\t\tcase OneTimeKeyboard:\n\t\t\t\tif opts.ReplyMarkup == nil {\n\t\t\t\t\topts.ReplyMarkup = &ReplyMarkup{}\n\t\t\t\t}\n\t\t\t\topts.ReplyMarkup.OneTimeKeyboard = true\n\t\t\tcase RemoveKeyboard:\n\t\t\t\tif opts.ReplyMarkup == nil {\n\t\t\t\t\topts.ReplyMarkup = &ReplyMarkup{}\n\t\t\t\t}\n\t\t\t\topts.ReplyMarkup.RemoveKeyboard = true\n\t\t\tcase Protected:\n\t\t\t\topts.Protected = true\n\t\t\tdefault:\n\t\t\t\tpanic(\"telebot: unsupported flag-option\")\n\t\t\t}\n\t\tcase ParseMode:\n\t\t\topts.ParseMode = opt\n\t\tcase Entities:\n\t\t\topts.Entities = opt\n\t\tdefault:\n\t\t\tpanic(\"telebot: unsupported send-option\")\n\t\t}\n\t}\n\n\treturn opts\n}\n\nfunc (b *Bot) embedSendOptions(params map[string]string, opt *SendOptions) {\n\tif opt == nil {\n\t\treturn\n\t}\n\n\tif opt.ReplyTo != nil && opt.ReplyTo.ID != 0 {\n\t\tparams[\"reply_to_message_id\"] = strconv.Itoa(opt.ReplyTo.ID)\n\t}\n\n\tif opt.DisableWebPagePreview {\n\t\tparams[\"disable_web_page_preview\"] = \"true\"\n\t}\n\n\tif opt.DisableNotification {\n\t\tparams[\"disable_notification\"] = \"true\"\n\t}\n\n\tif opt.ParseMode != ModeDefault {\n\t\tparams[\"parse_mode\"] = opt.ParseMode\n\t}\n\n\tif len(opt.Entities) > 0 {\n\t\tdelete(params, \"parse_mode\")\n\t\tentities, _ := json.Marshal(opt.Entities)\n\n\t\tif params[\"caption\"] != \"\" {\n\t\t\tparams[\"caption_entities\"] = string(entities)\n\t\t} else {\n\t\t\tparams[\"entities\"] = string(entities)\n\t\t}\n\t}\n\n\tif opt.AllowWithoutReply {\n\t\tparams[\"allow_sending_without_reply\"] = \"true\"\n\t}\n\n\tif opt.ReplyMarkup != nil {\n\t\tprocessButtons(opt.ReplyMarkup.InlineKeyboard)\n\t\treplyMarkup, _ := json.Marshal(opt.ReplyMarkup)\n\t\tparams[\"reply_markup\"] = string(replyMarkup)\n\t}\n\n\tif opt.Protected {\n\t\tparams[\"protect_content\"] = \"true\"\n\t}\n\n\tif opt.ThreadID != 0 {\n\t\tparams[\"message_thread_id\"] = strconv.Itoa(opt.ThreadID)\n\t}\n\n\tif opt.HasSpoiler {\n\t\tparams[\"has_spoiler\"] = \"true\"\n\t}\n\n\tif opt.BusinessConnectionID != \"\" {\n\t\tparams[\"business_connection_id\"] = opt.BusinessConnectionID\n\t}\n\n\tif opt.EffectID != \"\" {\n\t\tparams[\"message_effect_id\"] = opt.EffectID\n\t}\n}\n\nfunc processButtons(keys [][]InlineButton) {\n\tif keys == nil || len(keys) < 1 || len(keys[0]) < 1 {\n\t\treturn\n\t}\n\n\tfor i := range keys {\n\t\tfor j := range keys[i] {\n\t\t\tkey := &keys[i][j]\n\t\t\tif key.Unique != \"\" {\n\t\t\t\t// Format: \"\\f<callback_name>|<data>\"\n\t\t\t\tdata := key.Data\n\t\t\t\tif data == \"\" {\n\t\t\t\t\tkey.Data = \"\\f\" + key.Unique\n\t\t\t\t} else {\n\t\t\t\t\tkey.Data = \"\\f\" + key.Unique + \"|\" + data\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// PreviewOptions describes the options used for link preview generation.\ntype PreviewOptions struct {\n\t// (Optional) True, if the link preview is disabled.\n\tDisabled bool `json:\"is_disabled\"`\n\n\t// (Optional) URL to use for the link preview. If empty, then the first URL\n\t// found in the message text will be used.\n\tURL string `json:\"url\"`\n\n\t// (Optional) True, if the media in the link preview is supposed to be shrunk;\n\t// ignored if the URL isn't explicitly specified or media size change.\n\t// isn't supported for the preview.\n\tSmallMedia bool `json:\"prefer_small_media\"`\n\n\t// (Optional) True, if the media in the link preview is supposed to be enlarged;\n\t// ignored if the URL isn't explicitly specified or media size change.\n\t// isn't supported for the preview.\n\tLargeMedia bool `json:\"prefer_large_media\"`\n\n\t// (Optional) True, if the link preview must be shown above the message text;\n\t// otherwise, the link preview will be shown below the message text.\n\tAboveText bool `json:\"show_above_text\"`\n}\n\nfunc embedMessages(params map[string]string, msgs []Editable) {\n\tids := make([]string, 0, len(msgs))\n\n\t_, chatID := msgs[0].MessageSig()\n\tfor _, msg := range msgs {\n\t\tmsgID, _ := msg.MessageSig()\n\t\tids = append(ids, msgID)\n\t}\n\n\tdata, err := json.Marshal(ids)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tparams[\"message_ids\"] = string(data)\n\tparams[\"chat_id\"] = strconv.FormatInt(chatID, 10)\n}\n"
        },
        {
          "name": "payments.go",
          "type": "blob",
          "size": 6.673828125,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"math\"\n\t\"strconv\"\n)\n\n// Stars is a provider token for Telegram Stars.\nconst Stars = \"XTR\"\n\n// ShippingQuery contains information about an incoming shipping query.\ntype ShippingQuery struct {\n\tSender  *User           `json:\"from\"`\n\tID      string          `json:\"id\"`\n\tPayload string          `json:\"invoice_payload\"`\n\tAddress ShippingAddress `json:\"shipping_address\"`\n}\n\n// ShippingAddress represents a shipping address.\ntype ShippingAddress struct {\n\tCountryCode string `json:\"country_code\"`\n\tState       string `json:\"state\"`\n\tCity        string `json:\"city\"`\n\tStreetLine1 string `json:\"street_line1\"`\n\tStreetLine2 string `json:\"street_line2\"`\n\tPostCode    string `json:\"post_code\"`\n}\n\n// ShippingOption represents one shipping option.\ntype ShippingOption struct {\n\tID     string  `json:\"id\"`\n\tTitle  string  `json:\"title\"`\n\tPrices []Price `json:\"prices\"`\n}\n\n// Payment contains basic information about a successful payment.\ntype Payment struct {\n\tCurrency         string `json:\"currency\"`\n\tTotal            int    `json:\"total_amount\"`\n\tPayload          string `json:\"invoice_payload\"`\n\tOptionID         string `json:\"shipping_option_id\"`\n\tOrder            Order  `json:\"order_info\"`\n\tTelegramChargeID string `json:\"telegram_payment_charge_id\"`\n\tProviderChargeID string `json:\"provider_payment_charge_id\"`\n}\n\ntype RefundedPayment struct {\n\tCurrency         string `json:\"currency\"`\n\tTotal            int    `json:\"total_amount\"`\n\tPayload          string `json:\"invoice_payload\"`\n\tTelegramChargeID string `json:\"telegram_payment_charge_id\"`\n\tProviderChargeID string `json:\"provider_payment_charge_id\"`\n}\n\n// PreCheckoutQuery contains information about an incoming pre-checkout query.\ntype PreCheckoutQuery struct {\n\tSender   *User  `json:\"from\"`\n\tID       string `json:\"id\"`\n\tCurrency string `json:\"currency\"`\n\tPayload  string `json:\"invoice_payload\"`\n\tTotal    int    `json:\"total_amount\"`\n\tOptionID string `json:\"shipping_option_id\"`\n\tOrder    Order  `json:\"order_info\"`\n}\n\n// Order represents information about an order.\ntype Order struct {\n\tName        string          `json:\"name\"`\n\tPhoneNumber string          `json:\"phone_number\"`\n\tEmail       string          `json:\"email\"`\n\tAddress     ShippingAddress `json:\"shipping_address\"`\n}\n\n// Invoice contains basic information about an invoice.\ntype Invoice struct {\n\tTitle       string  `json:\"title\"`\n\tDescription string  `json:\"description\"`\n\tPayload     string  `json:\"payload\"`\n\tCurrency    string  `json:\"currency\"`\n\tPrices      []Price `json:\"prices\"`\n\tToken       string  `json:\"provider_token\"`\n\tData        string  `json:\"provider_data\"`\n\n\tPhoto     *Photo `json:\"photo\"`\n\tPhotoSize int    `json:\"photo_size\"`\n\n\t// Unique deep-linking parameter that can be used to\n\t// generate this invoice when used as a start parameter (0).\n\tStart string `json:\"start_parameter\"`\n\n\t// Shows the total price in the smallest units of the currency.\n\t// For example, for a price of US$ 1.45 pass amount = 145.\n\tTotal int `json:\"total_amount\"`\n\n\tMaxTipAmount        int   `json:\"max_tip_amount\"`\n\tSuggestedTipAmounts []int `json:\"suggested_tip_amounts\"`\n\n\tNeedName            bool `json:\"need_name\"`\n\tNeedPhoneNumber     bool `json:\"need_phone_number\"`\n\tNeedEmail           bool `json:\"need_email\"`\n\tNeedShippingAddress bool `json:\"need_shipping_address\"`\n\tSendPhoneNumber     bool `json:\"send_phone_number_to_provider\"`\n\tSendEmail           bool `json:\"send_email_to_provider\"`\n\tFlexible            bool `json:\"is_flexible\"`\n}\n\nfunc (i Invoice) params() map[string]string {\n\tparams := map[string]string{\n\t\t\"title\":                         i.Title,\n\t\t\"description\":                   i.Description,\n\t\t\"start_parameter\":               i.Start,\n\t\t\"payload\":                       i.Payload,\n\t\t\"provider_token\":                i.Token,\n\t\t\"provider_data\":                 i.Data,\n\t\t\"currency\":                      i.Currency,\n\t\t\"max_tip_amount\":                strconv.Itoa(i.MaxTipAmount),\n\t\t\"need_name\":                     strconv.FormatBool(i.NeedName),\n\t\t\"need_phone_number\":             strconv.FormatBool(i.NeedPhoneNumber),\n\t\t\"need_email\":                    strconv.FormatBool(i.NeedEmail),\n\t\t\"need_shipping_address\":         strconv.FormatBool(i.NeedShippingAddress),\n\t\t\"send_phone_number_to_provider\": strconv.FormatBool(i.SendPhoneNumber),\n\t\t\"send_email_to_provider\":        strconv.FormatBool(i.SendEmail),\n\t\t\"is_flexible\":                   strconv.FormatBool(i.Flexible),\n\t}\n\tif i.Photo != nil {\n\t\tif i.Photo.FileURL != \"\" {\n\t\t\tparams[\"photo_url\"] = i.Photo.FileURL\n\t\t}\n\t\tif i.PhotoSize > 0 {\n\t\t\tparams[\"photo_size\"] = strconv.Itoa(i.PhotoSize)\n\t\t}\n\t\tif i.Photo.Width > 0 {\n\t\t\tparams[\"photo_width\"] = strconv.Itoa(i.Photo.Width)\n\t\t}\n\t\tif i.Photo.Height > 0 {\n\t\t\tparams[\"photo_height\"] = strconv.Itoa(i.Photo.Height)\n\t\t}\n\t}\n\tif len(i.Prices) > 0 {\n\t\tdata, _ := json.Marshal(i.Prices)\n\t\tparams[\"prices\"] = string(data)\n\t}\n\tif len(i.SuggestedTipAmounts) > 0 {\n\t\tvar amounts []string\n\t\tfor _, n := range i.SuggestedTipAmounts {\n\t\t\tamounts = append(amounts, strconv.Itoa(n))\n\t\t}\n\n\t\tdata, _ := json.Marshal(amounts)\n\t\tparams[\"suggested_tip_amounts\"] = string(data)\n\t}\n\treturn params\n}\n\n// Price represents a portion of the price for goods or services.\ntype Price struct {\n\tLabel  string `json:\"label\"`\n\tAmount int    `json:\"amount\"`\n}\n\n// Currency contains information about supported currency for payments.\ntype Currency struct {\n\tCode         string      `json:\"code\"`\n\tTitle        string      `json:\"title\"`\n\tSymbol       string      `json:\"symbol\"`\n\tNative       string      `json:\"native\"`\n\tThousandsSep string      `json:\"thousands_sep\"`\n\tDecimalSep   string      `json:\"decimal_sep\"`\n\tSymbolLeft   bool        `json:\"symbol_left\"`\n\tSpaceBetween bool        `json:\"space_between\"`\n\tExp          int         `json:\"exp\"`\n\tMinAmount    interface{} `json:\"min_amount\"`\n\tMaxAmount    interface{} `json:\"max_amount\"`\n}\n\nfunc (c Currency) FromTotal(total int) float64 {\n\treturn float64(total) / math.Pow(10, float64(c.Exp))\n}\n\nfunc (c Currency) ToTotal(total float64) int {\n\treturn int(total) * int(math.Pow(10, float64(c.Exp)))\n}\n\n// CreateInvoiceLink creates a link for a payment invoice.\nfunc (b *Bot) CreateInvoiceLink(i Invoice) (string, error) {\n\tdata, err := b.Raw(\"createInvoiceLink\", i.params())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tvar resp struct {\n\t\tResult string\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn \"\", wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// RefundStars returns a successful payment in Telegram Stars.\nfunc (b *Bot) RefundStars(to Recipient, chargeID string) error {\n\tparams := map[string]string{\n\t\t\"user_id\":                    to.Recipient(),\n\t\t\"telegram_payment_charge_id\": chargeID,\n\t}\n\n\t_, err := b.Raw(\"refundStarPayment\", params)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "payments_data.go",
          "type": "blob",
          "size": 17.6572265625,
          "content": "package telebot\n\nimport \"encoding/json\"\n\nconst dataCurrencies = `{\"AED\":{\"code\":\"AED\",\"title\":\"United Arab Emirates Dirham\",\"symbol\":\"AED\",\"native\":\"\\u062f.\\u0625.\\u200f\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"367\",\"max_amount\":\"3673200\"},\"AFN\":{\"code\":\"AFN\",\"title\":\"Afghan Afghani\",\"symbol\":\"AFN\",\"native\":\"\\u060b\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"7554\",\"max_amount\":\"75540495\"},\"ALL\":{\"code\":\"ALL\",\"title\":\"Albanian Lek\",\"symbol\":\"ALL\",\"native\":\"Lek\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":false,\"exp\":2,\"min_amount\":\"10908\",\"max_amount\":\"109085036\"},\"AMD\":{\"code\":\"AMD\",\"title\":\"Armenian Dram\",\"symbol\":\"AMD\",\"native\":\"\\u0564\\u0580.\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"48398\",\"max_amount\":\"483984962\"},\"ARS\":{\"code\":\"ARS\",\"title\":\"Argentine Peso\",\"symbol\":\"ARS\",\"native\":\"$\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"3720\",\"max_amount\":\"37202998\"},\"AUD\":{\"code\":\"AUD\",\"title\":\"Australian Dollar\",\"symbol\":\"AU$\",\"native\":\"$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"139\",\"max_amount\":\"1392750\"},\"AZN\":{\"code\":\"AZN\",\"title\":\"Azerbaijani Manat\",\"symbol\":\"AZN\",\"native\":\"\\u043c\\u0430\\u043d.\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"170\",\"max_amount\":\"1702500\"},\"BAM\":{\"code\":\"BAM\",\"title\":\"Bosnia & Herzegovina Convertible Mark\",\"symbol\":\"BAM\",\"native\":\"KM\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"171\",\"max_amount\":\"1715550\"},\"BDT\":{\"code\":\"BDT\",\"title\":\"Bangladeshi Taka\",\"symbol\":\"BDT\",\"native\":\"\\u09f3\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"8336\",\"max_amount\":\"83367500\"},\"BGN\":{\"code\":\"BGN\",\"title\":\"Bulgarian Lev\",\"symbol\":\"BGN\",\"native\":\"\\u043b\\u0432.\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"171\",\"max_amount\":\"1716850\"},\"BND\":{\"code\":\"BND\",\"title\":\"Brunei Dollar\",\"symbol\":\"BND\",\"native\":\"$\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"134\",\"max_amount\":\"1349850\"},\"BOB\":{\"code\":\"BOB\",\"title\":\"Bolivian Boliviano\",\"symbol\":\"BOB\",\"native\":\"Bs\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"687\",\"max_amount\":\"6877150\"},\"BRL\":{\"code\":\"BRL\",\"title\":\"Brazilian Real\",\"symbol\":\"R$\",\"native\":\"R$\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"377\",\"max_amount\":\"3775397\"},\"CAD\":{\"code\":\"CAD\",\"title\":\"Canadian Dollar\",\"symbol\":\"CA$\",\"native\":\"$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"132\",\"max_amount\":\"1321950\"},\"CHF\":{\"code\":\"CHF\",\"title\":\"Swiss Franc\",\"symbol\":\"CHF\",\"native\":\"CHF\",\"thousands_sep\":\"'\",\"decimal_sep\":\".\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"99\",\"max_amount\":\"993220\"},\"CLP\":{\"code\":\"CLP\",\"title\":\"Chilean Peso\",\"symbol\":\"CLP\",\"native\":\"$\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":true,\"exp\":0,\"min_amount\":\"666\",\"max_amount\":\"6665199\"},\"CNY\":{\"code\":\"CNY\",\"title\":\"Chinese Renminbi Yuan\",\"symbol\":\"CN\\u00a5\",\"native\":\"CN\\u00a5\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"674\",\"max_amount\":\"6747298\"},\"COP\":{\"code\":\"COP\",\"title\":\"Colombian Peso\",\"symbol\":\"COP\",\"native\":\"$\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"315595\",\"max_amount\":\"3155950000\"},\"CRC\":{\"code\":\"CRC\",\"title\":\"Costa Rican Col\\u00f3n\",\"symbol\":\"CRC\",\"native\":\"\\u20a1\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"60113\",\"max_amount\":\"601130282\"},\"CZK\":{\"code\":\"CZK\",\"title\":\"Czech Koruna\",\"symbol\":\"CZK\",\"native\":\"K\\u010d\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"2251\",\"max_amount\":\"22510978\"},\"DKK\":{\"code\":\"DKK\",\"title\":\"Danish Krone\",\"symbol\":\"DKK\",\"native\":\"kr\",\"thousands_sep\":\"\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"654\",\"max_amount\":\"6545403\"},\"DOP\":{\"code\":\"DOP\",\"title\":\"Dominican Peso\",\"symbol\":\"DOP\",\"native\":\"$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"5032\",\"max_amount\":\"50329504\"},\"DZD\":{\"code\":\"DZD\",\"title\":\"Algerian Dinar\",\"symbol\":\"DZD\",\"native\":\"\\u062f.\\u062c.\\u200f\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"11872\",\"max_amount\":\"118729869\"},\"EGP\":{\"code\":\"EGP\",\"title\":\"Egyptian Pound\",\"symbol\":\"EGP\",\"native\":\"\\u062c.\\u0645.\\u200f\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"1791\",\"max_amount\":\"17912012\"},\"EUR\":{\"code\":\"EUR\",\"title\":\"Euro\",\"symbol\":\"\\u20ac\",\"native\":\"\\u20ac\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"87\",\"max_amount\":\"877155\"},\"GBP\":{\"code\":\"GBP\",\"title\":\"British Pound\",\"symbol\":\"\\u00a3\",\"native\":\"\\u00a3\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"75\",\"max_amount\":\"757605\"},\"GEL\":{\"code\":\"GEL\",\"title\":\"Georgian Lari\",\"symbol\":\"GEL\",\"native\":\"GEL\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"266\",\"max_amount\":\"2663750\"},\"GTQ\":{\"code\":\"GTQ\",\"title\":\"Guatemalan Quetzal\",\"symbol\":\"GTQ\",\"native\":\"Q\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"768\",\"max_amount\":\"7689850\"},\"HKD\":{\"code\":\"HKD\",\"title\":\"Hong Kong Dollar\",\"symbol\":\"HK$\",\"native\":\"$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"784\",\"max_amount\":\"7845505\"},\"HNL\":{\"code\":\"HNL\",\"title\":\"Honduran Lempira\",\"symbol\":\"HNL\",\"native\":\"L\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"2427\",\"max_amount\":\"24277502\"},\"HRK\":{\"code\":\"HRK\",\"title\":\"Croatian Kuna\",\"symbol\":\"HRK\",\"native\":\"kn\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"650\",\"max_amount\":\"6506302\"},\"HUF\":{\"code\":\"HUF\",\"title\":\"Hungarian Forint\",\"symbol\":\"HUF\",\"native\":\"Ft\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"27844\",\"max_amount\":\"278440341\"},\"IDR\":{\"code\":\"IDR\",\"title\":\"Indonesian Rupiah\",\"symbol\":\"IDR\",\"native\":\"Rp\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"1406555\",\"max_amount\":\"14065550000\"},\"ILS\":{\"code\":\"ILS\",\"title\":\"Israeli New Sheqel\",\"symbol\":\"\\u20aa\",\"native\":\"\\u20aa\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"366\",\"max_amount\":\"3668230\"},\"INR\":{\"code\":\"INR\",\"title\":\"Indian Rupee\",\"symbol\":\"\\u20b9\",\"native\":\"\\u20b9\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"7090\",\"max_amount\":\"70900503\"},\"ISK\":{\"code\":\"ISK\",\"title\":\"Icelandic Kr\\u00f3na\",\"symbol\":\"ISK\",\"native\":\"kr\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":0,\"min_amount\":\"119\",\"max_amount\":\"1195599\"},\"JMD\":{\"code\":\"JMD\",\"title\":\"Jamaican Dollar\",\"symbol\":\"JMD\",\"native\":\"$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"13153\",\"max_amount\":\"131539958\"},\"JPY\":{\"code\":\"JPY\",\"title\":\"Japanese Yen\",\"symbol\":\"\\u00a5\",\"native\":\"\\uffe5\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":0,\"min_amount\":\"109\",\"max_amount\":\"1095549\"},\"KES\":{\"code\":\"KES\",\"title\":\"Kenyan Shilling\",\"symbol\":\"KES\",\"native\":\"Ksh\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"10032\",\"max_amount\":\"100322011\"},\"KGS\":{\"code\":\"KGS\",\"title\":\"Kyrgyzstani Som\",\"symbol\":\"KGS\",\"native\":\"KGS\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\"-\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"6982\",\"max_amount\":\"69820300\"},\"KRW\":{\"code\":\"KRW\",\"title\":\"South Korean Won\",\"symbol\":\"\\u20a9\",\"native\":\"\\u20a9\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":0,\"min_amount\":\"1119\",\"max_amount\":\"11190001\"},\"KZT\":{\"code\":\"KZT\",\"title\":\"Kazakhstani Tenge\",\"symbol\":\"KZT\",\"native\":\"\\u20b8\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\"-\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"37767\",\"max_amount\":\"377674954\"},\"LBP\":{\"code\":\"LBP\",\"title\":\"Lebanese Pound\",\"symbol\":\"LBP\",\"native\":\"\\u0644.\\u0644.\\u200f\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"150080\",\"max_amount\":\"1500802255\"},\"LKR\":{\"code\":\"LKR\",\"title\":\"Sri Lankan Rupee\",\"symbol\":\"LKR\",\"native\":\"\\u0dbb\\u0dd4.\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"18078\",\"max_amount\":\"180789638\"},\"MAD\":{\"code\":\"MAD\",\"title\":\"Moroccan Dirham\",\"symbol\":\"MAD\",\"native\":\"\\u062f.\\u0645.\\u200f\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"955\",\"max_amount\":\"9554850\"},\"MDL\":{\"code\":\"MDL\",\"title\":\"Moldovan Leu\",\"symbol\":\"MDL\",\"native\":\"MDL\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"1703\",\"max_amount\":\"17038967\"},\"MNT\":{\"code\":\"MNT\",\"title\":\"Mongolian T\\u00f6gr\\u00f6g\",\"symbol\":\"MNT\",\"native\":\"MNT\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"261750\",\"max_amount\":\"2617500000\"},\"MUR\":{\"code\":\"MUR\",\"title\":\"Mauritian Rupee\",\"symbol\":\"MUR\",\"native\":\"MUR\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"3438\",\"max_amount\":\"34384499\"},\"MVR\":{\"code\":\"MVR\",\"title\":\"Maldivian Rufiyaa\",\"symbol\":\"MVR\",\"native\":\"MVR\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"1550\",\"max_amount\":\"15501063\"},\"MXN\":{\"code\":\"MXN\",\"title\":\"Mexican Peso\",\"symbol\":\"MX$\",\"native\":\"$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"1898\",\"max_amount\":\"18988704\"},\"MYR\":{\"code\":\"MYR\",\"title\":\"Malaysian Ringgit\",\"symbol\":\"MYR\",\"native\":\"RM\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"412\",\"max_amount\":\"4124501\"},\"MZN\":{\"code\":\"MZN\",\"title\":\"Mozambican Metical\",\"symbol\":\"MZN\",\"native\":\"MTn\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"6188\",\"max_amount\":\"61889913\"},\"NGN\":{\"code\":\"NGN\",\"title\":\"Nigerian Naira\",\"symbol\":\"NGN\",\"native\":\"\\u20a6\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"36174\",\"max_amount\":\"361749532\"},\"NIO\":{\"code\":\"NIO\",\"title\":\"Nicaraguan C\\u00f3rdoba\",\"symbol\":\"NIO\",\"native\":\"C$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"3241\",\"max_amount\":\"32415503\"},\"NOK\":{\"code\":\"NOK\",\"title\":\"Norwegian Krone\",\"symbol\":\"NOK\",\"native\":\"kr\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"851\",\"max_amount\":\"8510100\"},\"NPR\":{\"code\":\"NPR\",\"title\":\"Nepalese Rupee\",\"symbol\":\"NPR\",\"native\":\"\\u0928\\u0947\\u0930\\u0942\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"11299\",\"max_amount\":\"112995016\"},\"NZD\":{\"code\":\"NZD\",\"title\":\"New Zealand Dollar\",\"symbol\":\"NZ$\",\"native\":\"$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"146\",\"max_amount\":\"1461850\"},\"PAB\":{\"code\":\"PAB\",\"title\":\"Panamanian Balboa\",\"symbol\":\"PAB\",\"native\":\"B\\/.\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"99\",\"max_amount\":\"995290\"},\"PEN\":{\"code\":\"PEN\",\"title\":\"Peruvian Nuevo Sol\",\"symbol\":\"PEN\",\"native\":\"S\\/.\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"333\",\"max_amount\":\"3331250\"},\"PHP\":{\"code\":\"PHP\",\"title\":\"Philippine Peso\",\"symbol\":\"PHP\",\"native\":\"\\u20b1\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"5260\",\"max_amount\":\"52602981\"},\"PKR\":{\"code\":\"PKR\",\"title\":\"Pakistani Rupee\",\"symbol\":\"PKR\",\"native\":\"\\u20a8\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"13921\",\"max_amount\":\"139214990\"},\"PLN\":{\"code\":\"PLN\",\"title\":\"Polish Z\\u0142oty\",\"symbol\":\"PLN\",\"native\":\"z\\u0142\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"376\",\"max_amount\":\"3764026\"},\"PYG\":{\"code\":\"PYG\",\"title\":\"Paraguayan Guaran\\u00ed\",\"symbol\":\"PYG\",\"native\":\"\\u20b2\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":true,\"exp\":0,\"min_amount\":\"6013\",\"max_amount\":\"60134502\"},\"QAR\":{\"code\":\"QAR\",\"title\":\"Qatari Riyal\",\"symbol\":\"QAR\",\"native\":\"\\u0631.\\u0642.\\u200f\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"364\",\"max_amount\":\"3641101\"},\"RON\":{\"code\":\"RON\",\"title\":\"Romanian Leu\",\"symbol\":\"RON\",\"native\":\"RON\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"417\",\"max_amount\":\"4172003\"},\"RSD\":{\"code\":\"RSD\",\"title\":\"Serbian Dinar\",\"symbol\":\"RSD\",\"native\":\"\\u0434\\u0438\\u043d.\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"10391\",\"max_amount\":\"103910127\"},\"RUB\":{\"code\":\"RUB\",\"title\":\"Russian Ruble\",\"symbol\":\"RUB\",\"native\":\"\\u0440\\u0443\\u0431.\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"6598\",\"max_amount\":\"65986027\"},\"SAR\":{\"code\":\"SAR\",\"title\":\"Saudi Riyal\",\"symbol\":\"SAR\",\"native\":\"\\u0631.\\u0633.\\u200f\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"373\",\"max_amount\":\"3732650\"},\"SEK\":{\"code\":\"SEK\",\"title\":\"Swedish Krona\",\"symbol\":\"SEK\",\"native\":\"kr\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"904\",\"max_amount\":\"9047896\"},\"SGD\":{\"code\":\"SGD\",\"title\":\"Singapore Dollar\",\"symbol\":\"SGD\",\"native\":\"$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"135\",\"max_amount\":\"1353897\"},\"THB\":{\"code\":\"THB\",\"title\":\"Thai Baht\",\"symbol\":\"\\u0e3f\",\"native\":\"\\u0e3f\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"3156\",\"max_amount\":\"31563499\"},\"TJS\":{\"code\":\"TJS\",\"title\":\"Tajikistani Somoni\",\"symbol\":\"TJS\",\"native\":\"TJS\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\";\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"938\",\"max_amount\":\"9389950\"},\"TRY\":{\"code\":\"TRY\",\"title\":\"Turkish Lira\",\"symbol\":\"TRY\",\"native\":\"TL\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"526\",\"max_amount\":\"5267200\"},\"TTD\":{\"code\":\"TTD\",\"title\":\"Trinidad and Tobago Dollar\",\"symbol\":\"TTD\",\"native\":\"$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"675\",\"max_amount\":\"6757850\"},\"TWD\":{\"code\":\"TWD\",\"title\":\"New Taiwan Dollar\",\"symbol\":\"NT$\",\"native\":\"NT$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"3072\",\"max_amount\":\"30722993\"},\"TZS\":{\"code\":\"TZS\",\"title\":\"Tanzanian Shilling\",\"symbol\":\"TZS\",\"native\":\"TSh\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"230200\",\"max_amount\":\"2302000188\"},\"UAH\":{\"code\":\"UAH\",\"title\":\"Ukrainian Hryvnia\",\"symbol\":\"UAH\",\"native\":\"\\u20b4\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":false,\"exp\":2,\"min_amount\":\"2764\",\"max_amount\":\"27648991\"},\"UGX\":{\"code\":\"UGX\",\"title\":\"Ugandan Shilling\",\"symbol\":\"UGX\",\"native\":\"USh\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":0,\"min_amount\":\"3657\",\"max_amount\":\"36575502\"},\"USD\":{\"code\":\"USD\",\"title\":\"United States Dollar\",\"symbol\":\"$\",\"native\":\"$\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":false,\"exp\":2,\"min_amount\":\"100\",\"max_amount\":1000000},\"UYU\":{\"code\":\"UYU\",\"title\":\"Uruguayan Peso\",\"symbol\":\"UYU\",\"native\":\"$\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"3246\",\"max_amount\":\"32469503\"},\"UZS\":{\"code\":\"UZS\",\"title\":\"Uzbekistani Som\",\"symbol\":\"UZS\",\"native\":\"UZS\",\"thousands_sep\":\"\\u00a0\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":2,\"min_amount\":\"832759\",\"max_amount\":\"8327599915\"},\"VND\":{\"code\":\"VND\",\"title\":\"Vietnamese \\u0110\\u1ed3ng\",\"symbol\":\"\\u20ab\",\"native\":\"\\u20ab\",\"thousands_sep\":\".\",\"decimal_sep\":\",\",\"symbol_left\":false,\"space_between\":true,\"exp\":0,\"min_amount\":\"23084\",\"max_amount\":\"230840500\"},\"YER\":{\"code\":\"YER\",\"title\":\"Yemeni Rial\",\"symbol\":\"YER\",\"native\":\"\\u0631.\\u064a.\\u200f\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"25030\",\"max_amount\":\"250301249\"},\"ZAR\":{\"code\":\"ZAR\",\"title\":\"South African Rand\",\"symbol\":\"ZAR\",\"native\":\"R\",\"thousands_sep\":\",\",\"decimal_sep\":\".\",\"symbol_left\":true,\"space_between\":true,\"exp\":2,\"min_amount\":\"1362\",\"max_amount\":\"13620106\"}}`\n\nvar SupportedCurrencies = make(map[string]Currency)\n\nfunc init() {\n\terr := json.Unmarshal([]byte(dataCurrencies), &SupportedCurrencies)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"
        },
        {
          "name": "poll.go",
          "type": "blob",
          "size": 2.4111328125,
          "content": "package telebot\n\nimport \"time\"\n\n// PollType defines poll types.\ntype PollType string\n\nconst (\n\t// NOTE:\n\t// Despite \"any\" type isn't described in documentation,\n\t// it needed for proper KeyboardButtonPollType marshaling.\n\tPollAny PollType = \"any\"\n\n\tPollQuiz    PollType = \"quiz\"\n\tPollRegular PollType = \"regular\"\n)\n\n// Poll contains information about a poll.\ntype Poll struct {\n\tID         string       `json:\"id\"`\n\tType       PollType     `json:\"type\"`\n\tQuestion   string       `json:\"question\"`\n\tOptions    []PollOption `json:\"options\"`\n\tVoterCount int          `json:\"total_voter_count\"`\n\n\t// (Optional)\n\tClosed            bool            `json:\"is_closed,omitempty\"`\n\tCorrectOption     int             `json:\"correct_option_id,omitempty\"`\n\tMultipleAnswers   bool            `json:\"allows_multiple_answers,omitempty\"`\n\tExplanation       string          `json:\"explanation,omitempty\"`\n\tParseMode         ParseMode       `json:\"explanation_parse_mode,omitempty\"`\n\tEntities          []MessageEntity `json:\"explanation_entities,omitempty\"`\n\tQuestionParseMode string          `json:\"question_parse_mode,omitempty\"`\n\tQuestionEntities  []MessageEntity `json:\"question_entities,omitempty\"`\n\n\t// True by default, shouldn't be omitted.\n\tAnonymous bool `json:\"is_anonymous\"`\n\n\t// (Mutually exclusive)\n\tOpenPeriod    int   `json:\"open_period,omitempty\"`\n\tCloseUnixdate int64 `json:\"close_date,omitempty\"`\n}\n\n// PollOption contains information about one answer option in a poll.\ntype PollOption struct {\n\tText       string          `json:\"text\"`\n\tVoterCount int             `json:\"voter_count\"`\n\tParseMode  ParseMode       `json:\"text_parse_mode,omitempty\"`\n\tEntities   []MessageEntity `json:\"text_entities,omitempty\"`\n}\n\n// PollAnswer represents an answer of a user in a non-anonymous poll.\ntype PollAnswer struct {\n\tPollID  string `json:\"poll_id\"`\n\tSender  *User  `json:\"user\"`\n\tChat    *Chat  `json:\"voter_chat\"`\n\tOptions []int  `json:\"option_ids\"`\n}\n\n// IsRegular says whether poll is a regular.\nfunc (p *Poll) IsRegular() bool {\n\treturn p.Type == PollRegular\n}\n\n// IsQuiz says whether poll is a quiz.\nfunc (p *Poll) IsQuiz() bool {\n\treturn p.Type == PollQuiz\n}\n\n// CloseDate returns the close date of poll in local time.\nfunc (p *Poll) CloseDate() time.Time {\n\treturn time.Unix(p.CloseUnixdate, 0)\n}\n\n// AddOptions adds text options to the poll.\nfunc (p *Poll) AddOptions(opts ...string) {\n\tfor _, t := range opts {\n\t\tp.Options = append(p.Options, PollOption{Text: t})\n\t}\n}\n"
        },
        {
          "name": "poll_test.go",
          "type": "blob",
          "size": 1.3095703125,
          "content": "package telebot\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestPoll(t *testing.T) {\n\tassert.True(t, (&Poll{Type: PollRegular}).IsRegular())\n\tassert.True(t, (&Poll{Type: PollQuiz}).IsQuiz())\n\n\tp := &Poll{}\n\topts := []PollOption{{Text: \"Option 1\"}, {Text: \"Option 2\"}}\n\tp.AddOptions(opts[0].Text, opts[1].Text)\n\tassert.Equal(t, opts, p.Options)\n}\n\nfunc TestPollSend(t *testing.T) {\n\tif b == nil {\n\t\tt.Skip(\"Cached bot instance is bad (probably wrong or empty TELEBOT_SECRET)\")\n\t}\n\tif userID == 0 {\n\t\tt.Skip(\"USER_ID is required for Poll methods test\")\n\t}\n\n\t_, err := b.Send(user, &Poll{}) // empty poll\n\tassert.Equal(t, ErrBadPollOptions, err)\n\n\tpoll := &Poll{\n\t\tType:          PollQuiz,\n\t\tQuestion:      \"Test Poll\",\n\t\tCloseUnixdate: time.Now().Unix() + 60,\n\t\tExplanation:   \"Explanation\",\n\t}\n\tpoll.AddOptions(\"1\", \"2\")\n\n\tmsg, err := b.Send(user, poll)\n\trequire.NoError(t, err)\n\tassert.Equal(t, poll.Type, msg.Poll.Type)\n\tassert.Equal(t, poll.Question, msg.Poll.Question)\n\tassert.Equal(t, poll.Options, msg.Poll.Options)\n\tassert.Equal(t, poll.CloseUnixdate, msg.Poll.CloseUnixdate)\n\tassert.Equal(t, poll.CloseDate(), msg.Poll.CloseDate())\n\n\tp, err := b.StopPoll(msg)\n\trequire.NoError(t, err)\n\tassert.Equal(t, poll.Options, p.Options)\n\tassert.Equal(t, 0, p.VoterCount)\n}\n"
        },
        {
          "name": "poller.go",
          "type": "blob",
          "size": 2.7939453125,
          "content": "package telebot\n\nimport \"time\"\n\nvar AllowedUpdates = []string{\n\t\"message\",\n\t\"edited_message\",\n\t\"channel_post\",\n\t\"edited_channel_post\",\n\t\"message_reaction\",\n\t\"message_reaction_count\",\n\t\"inline_query\",\n\t\"chosen_inline_result\",\n\t\"callback_query\",\n\t\"shipping_query\",\n\t\"pre_checkout_query\",\n\t\"poll\",\n\t\"poll_answer\",\n\t\"my_chat_member\",\n\t\"chat_member\",\n\t\"chat_join_request\",\n\t\"chat_boost\",\n\t\"removed_chat_boost\",\n}\n\n// Poller is a provider of Updates.\n//\n// All pollers must implement Poll(), which accepts bot\n// pointer and subscription channel and start polling\n// synchronously straight away.\ntype Poller interface {\n\t// Poll is supposed to take the bot object\n\t// subscription channel and start polling\n\t// for Updates immediately.\n\t//\n\t// Poller must listen for stop constantly and close\n\t// it as soon as it's done polling.\n\tPoll(b *Bot, updates chan Update, stop chan struct{})\n}\n\n// LongPoller is a classic LongPoller with timeout.\ntype LongPoller struct {\n\tLimit        int\n\tTimeout      time.Duration\n\tLastUpdateID int\n\n\t// AllowedUpdates contains the update types\n\t// you want your bot to receive.\n\t//\n\t// Possible values:\n\t//\t\tmessage\n\t// \t\tedited_message\n\t// \t\tchannel_post\n\t// \t\tedited_channel_post\n\t// \t\tinline_query\n\t// \t\tchosen_inline_result\n\t// \t\tcallback_query\n\t// \t\tshipping_query\n\t// \t\tpre_checkout_query\n\t// \t\tpoll\n\t// \t\tpoll_answer\n\t//\n\tAllowedUpdates []string `yaml:\"allowed_updates\"`\n}\n\n// Poll does long polling.\nfunc (p *LongPoller) Poll(b *Bot, dest chan Update, stop chan struct{}) {\n\tfor {\n\t\tselect {\n\t\tcase <-stop:\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tupdates, err := b.getUpdates(p.LastUpdateID+1, p.Limit, p.Timeout, p.AllowedUpdates)\n\t\tif err != nil {\n\t\t\tb.debug(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, update := range updates {\n\t\t\tp.LastUpdateID = update.ID\n\t\t\tdest <- update\n\t\t}\n\t}\n}\n\n// MiddlewarePoller is a special kind of poller that acts\n// like a filter for updates. It could be used for spam\n// handling, banning or whatever.\n//\n// For heavy middleware, use increased capacity.\ntype MiddlewarePoller struct {\n\tCapacity int // Default: 1\n\tPoller   Poller\n\tFilter   func(*Update) bool\n}\n\n// NewMiddlewarePoller wait for it... constructs a new middleware poller.\nfunc NewMiddlewarePoller(original Poller, filter func(*Update) bool) *MiddlewarePoller {\n\treturn &MiddlewarePoller{\n\t\tPoller: original,\n\t\tFilter: filter,\n\t}\n}\n\n// Poll sieves updates through middleware filter.\nfunc (p *MiddlewarePoller) Poll(b *Bot, dest chan Update, stop chan struct{}) {\n\tif p.Capacity < 1 {\n\t\tp.Capacity = 1\n\t}\n\n\tmiddle := make(chan Update, p.Capacity)\n\tstopPoller := make(chan struct{})\n\tstopConfirm := make(chan struct{})\n\n\tgo func() {\n\t\tp.Poller.Poll(b, middle, stopPoller)\n\t\tclose(stopConfirm)\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-stop:\n\t\t\tclose(stopPoller)\n\t\t\t<-stopConfirm\n\t\t\treturn\n\t\tcase upd := <-middle:\n\t\t\tif p.Filter(&upd) {\n\t\t\t\tdest <- upd\n\t\t\t}\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "poller_test.go",
          "type": "blob",
          "size": 1.001953125,
          "content": "package telebot\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\ntype testPoller struct {\n\tupdates chan Update\n\tdone    chan struct{}\n}\n\nfunc newTestPoller() *testPoller {\n\treturn &testPoller{\n\t\tupdates: make(chan Update, 1),\n\t\tdone:    make(chan struct{}, 1),\n\t}\n}\n\nfunc (p *testPoller) Poll(b *Bot, updates chan Update, stop chan struct{}) {\n\tfor {\n\t\tselect {\n\t\tcase upd := <-p.updates:\n\t\t\tupdates <- upd\n\t\tcase <-stop:\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\t}\n}\n\nfunc TestMiddlewarePoller(t *testing.T) {\n\ttp := newTestPoller()\n\tvar ids []int\n\n\tpref := defaultSettings()\n\tpref.Offline = true\n\n\tb, err := NewBot(pref)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tb.Poller = NewMiddlewarePoller(tp, func(u *Update) bool {\n\t\tif u.ID > 0 {\n\t\t\tids = append(ids, u.ID)\n\t\t\treturn true\n\t\t}\n\n\t\ttp.done <- struct{}{}\n\t\treturn false\n\t})\n\n\tgo func() {\n\t\ttp.updates <- Update{ID: 1}\n\t\ttp.updates <- Update{ID: 2}\n\t\ttp.updates <- Update{ID: 0}\n\t}()\n\n\tgo b.Start()\n\t<-tp.done\n\tb.Stop()\n\n\tassert.Contains(t, ids, 1)\n\tassert.Contains(t, ids, 2)\n}\n"
        },
        {
          "name": "react.go",
          "type": "blob",
          "size": 1.625,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n)\n\nconst (\n\tReactionTypeEmoji       = \"emoji\"\n\tReactionTypeCustomEmoji = \"custom_emoji\"\n)\n\n// Reaction describes the type of reaction.\n// Describes an instance of ReactionTypeCustomEmoji and ReactionTypeEmoji.\ntype Reaction struct {\n\t// Type of the reaction, always “emoji”\n\tType string `json:\"type\"`\n\n\t// Reaction emoji.\n\tEmoji string `json:\"emoji,omitempty\"`\n\n\t// Custom emoji identifier.\n\tCustomEmojiID string `json:\"custom_emoji_id,omitempty\"`\n}\n\n// ReactionCount represents a reaction added to a message along\n// with the number of times it was added.\ntype ReactionCount struct {\n\t// Type of the reaction.\n\tType Reaction `json:\"type\"`\n\n\t// Number of times the reaction was added.\n\tCount int `json:\"total_count\"`\n}\n\n// Reactions represents an object of reaction options.\ntype Reactions struct {\n\t// List of reaction types to set on the message.\n\tReactions []Reaction `json:\"reaction\"`\n\n\t// Pass True to set the reaction with a big animation.\n\tBig bool `json:\"is_big\"`\n}\n\n// React changes the chosen reactions on a message. Service messages can't be\n// reacted to. Automatically forwarded messages from a channel to its discussion group have\n// the same available reactions as messages in the channel.\nfunc (b *Bot) React(to Recipient, msg Editable, r Reactions) error {\n\tif to == nil {\n\t\treturn ErrBadRecipient\n\t}\n\n\tmsgID, _ := msg.MessageSig()\n\tparams := map[string]string{\n\t\t\"chat_id\":    to.Recipient(),\n\t\t\"message_id\": msgID,\n\t}\n\n\tdata, _ := json.Marshal(r.Reactions)\n\tparams[\"reaction\"] = string(data)\n\n\tif r.Big {\n\t\tparams[\"is_big\"] = \"true\"\n\t}\n\n\t_, err := b.Raw(\"setMessageReaction\", params)\n\treturn err\n}\n"
        },
        {
          "name": "react",
          "type": "tree",
          "content": null
        },
        {
          "name": "sendable.go",
          "type": "blob",
          "size": 9.6171875,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"path/filepath\"\n\t\"strconv\"\n)\n\n// Recipient is any possible endpoint you can send\n// messages to: either user, group or a channel.\ntype Recipient interface {\n\tRecipient() string // must return legit Telegram chat_id or username\n}\n\n// Sendable is any object that can send itself.\n//\n// This is pretty cool, since it lets bots implement\n// custom Sendables for complex kind of media or\n// chat objects spanning across multiple messages.\ntype Sendable interface {\n\tSend(*Bot, Recipient, *SendOptions) (*Message, error)\n}\n\n// Send delivers media through bot b to recipient.\nfunc (p *Photo) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": to.Recipient(),\n\t\t\"caption\": p.Caption,\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tmsg, err := b.sendMedia(p, params, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmsg.Photo.File.stealRef(&p.File)\n\t*p = *msg.Photo\n\tp.Caption = msg.Caption\n\n\treturn msg, nil\n}\n\n// Send delivers media through bot b to recipient.\nfunc (a *Audio) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\":   to.Recipient(),\n\t\t\"caption\":   a.Caption,\n\t\t\"performer\": a.Performer,\n\t\t\"title\":     a.Title,\n\t\t\"file_name\": a.FileName,\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tif a.Duration != 0 {\n\t\tparams[\"duration\"] = strconv.Itoa(a.Duration)\n\t}\n\n\tmsg, err := b.sendMedia(a, params, thumbnailToFilemap(a.Thumbnail))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif msg.Audio != nil {\n\t\tmsg.Audio.File.stealRef(&a.File)\n\t\t*a = *msg.Audio\n\t\ta.Caption = msg.Caption\n\t}\n\n\tif msg.Document != nil {\n\t\tmsg.Document.File.stealRef(&a.File)\n\t\ta.File = msg.Document.File\n\t}\n\n\treturn msg, nil\n}\n\n// Send delivers media through bot b to recipient.\nfunc (d *Document) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\":   to.Recipient(),\n\t\t\"caption\":   d.Caption,\n\t\t\"file_name\": d.FileName,\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tif d.FileSize != 0 {\n\t\tparams[\"file_size\"] = strconv.FormatInt(d.FileSize, 10)\n\t}\n\tif d.DisableTypeDetection {\n\t\tparams[\"disable_content_type_detection\"] = \"true\"\n\t}\n\n\tmsg, err := b.sendMedia(d, params, thumbnailToFilemap(d.Thumbnail))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif doc := msg.Document; doc != nil {\n\t\tdoc.File.stealRef(&d.File)\n\t\t*d = *doc\n\t\td.Caption = msg.Caption\n\t} else if vid := msg.Video; vid != nil {\n\t\tvid.File.stealRef(&d.File)\n\t\td.Caption = vid.Caption\n\t\td.MIME = vid.MIME\n\t\td.Thumbnail = vid.Thumbnail\n\t}\n\n\treturn msg, nil\n}\n\n// Send delivers media through bot b to recipient.\nfunc (s *Sticker) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": to.Recipient(),\n\t\t\"emoji\":   s.Emoji,\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tmsg, err := b.sendMedia(s, params, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmsg.Sticker.File.stealRef(&s.File)\n\t*s = *msg.Sticker\n\n\treturn msg, nil\n}\n\n// Send delivers media through bot b to recipient.\nfunc (v *Video) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\":   to.Recipient(),\n\t\t\"caption\":   v.Caption,\n\t\t\"file_name\": v.FileName,\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tif v.Duration != 0 {\n\t\tparams[\"duration\"] = strconv.Itoa(v.Duration)\n\t}\n\tif v.Width != 0 {\n\t\tparams[\"width\"] = strconv.Itoa(v.Width)\n\t}\n\tif v.Height != 0 {\n\t\tparams[\"height\"] = strconv.Itoa(v.Height)\n\t}\n\tif v.Streaming {\n\t\tparams[\"supports_streaming\"] = \"true\"\n\t}\n\n\tmsg, err := b.sendMedia(v, params, thumbnailToFilemap(v.Thumbnail))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif vid := msg.Video; vid != nil {\n\t\tvid.File.stealRef(&v.File)\n\t\t*v = *vid\n\t\tv.Caption = msg.Caption\n\t} else if doc := msg.Document; doc != nil {\n\t\t// If video has no sound, Telegram can turn it into Document (GIF)\n\t\tdoc.File.stealRef(&v.File)\n\n\t\tv.Caption = doc.Caption\n\t\tv.MIME = doc.MIME\n\t\tv.Thumbnail = doc.Thumbnail\n\t}\n\n\treturn msg, nil\n}\n\n// Send delivers animation through bot b to recipient.\nfunc (a *Animation) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\":   to.Recipient(),\n\t\t\"caption\":   a.Caption,\n\t\t\"file_name\": a.FileName,\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tif a.Duration != 0 {\n\t\tparams[\"duration\"] = strconv.Itoa(a.Duration)\n\t}\n\tif a.Width != 0 {\n\t\tparams[\"width\"] = strconv.Itoa(a.Width)\n\t}\n\tif a.Height != 0 {\n\t\tparams[\"height\"] = strconv.Itoa(a.Height)\n\t}\n\n\t// file_name is required, without it animation sends as a document\n\tif params[\"file_name\"] == \"\" && a.File.OnDisk() {\n\t\tparams[\"file_name\"] = filepath.Base(a.File.FileLocal)\n\t}\n\n\tmsg, err := b.sendMedia(a, params, thumbnailToFilemap(a.Thumbnail))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif anim := msg.Animation; anim != nil {\n\t\tanim.File.stealRef(&a.File)\n\t\t*a = *msg.Animation\n\t} else if doc := msg.Document; doc != nil {\n\t\t*a = Animation{\n\t\t\tFile:      doc.File,\n\t\t\tThumbnail: doc.Thumbnail,\n\t\t\tMIME:      doc.MIME,\n\t\t\tFileName:  doc.FileName,\n\t\t}\n\t}\n\n\ta.Caption = msg.Caption\n\treturn msg, nil\n}\n\n// Send delivers media through bot b to recipient.\nfunc (v *Voice) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": to.Recipient(),\n\t\t\"caption\": v.Caption,\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tif v.Duration != 0 {\n\t\tparams[\"duration\"] = strconv.Itoa(v.Duration)\n\t}\n\n\tmsg, err := b.sendMedia(v, params, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmsg.Voice.File.stealRef(&v.File)\n\t*v = *msg.Voice\n\n\treturn msg, nil\n}\n\n// Send delivers media through bot b to recipient.\nfunc (v *VideoNote) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": to.Recipient(),\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tif v.Duration != 0 {\n\t\tparams[\"duration\"] = strconv.Itoa(v.Duration)\n\t}\n\tif v.Length != 0 {\n\t\tparams[\"length\"] = strconv.Itoa(v.Length)\n\t}\n\n\tmsg, err := b.sendMedia(v, params, thumbnailToFilemap(v.Thumbnail))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmsg.VideoNote.File.stealRef(&v.File)\n\t*v = *msg.VideoNote\n\n\treturn msg, nil\n}\n\n// Send delivers media through bot b to recipient.\nfunc (x *Location) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\":     to.Recipient(),\n\t\t\"latitude\":    fmt.Sprintf(\"%f\", x.Lat),\n\t\t\"longitude\":   fmt.Sprintf(\"%f\", x.Lng),\n\t\t\"live_period\": strconv.Itoa(x.LivePeriod),\n\t}\n\tif x.HorizontalAccuracy != nil {\n\t\tparams[\"horizontal_accuracy\"] = fmt.Sprintf(\"%f\", *x.HorizontalAccuracy)\n\t}\n\tif x.Heading != 0 {\n\t\tparams[\"heading\"] = strconv.Itoa(x.Heading)\n\t}\n\tif x.AlertRadius != 0 {\n\t\tparams[\"proximity_alert_radius\"] = strconv.Itoa(x.Heading)\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tdata, err := b.Raw(\"sendLocation\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// Send delivers media through bot b to recipient.\nfunc (v *Venue) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\":           to.Recipient(),\n\t\t\"latitude\":          fmt.Sprintf(\"%f\", v.Location.Lat),\n\t\t\"longitude\":         fmt.Sprintf(\"%f\", v.Location.Lng),\n\t\t\"title\":             v.Title,\n\t\t\"address\":           v.Address,\n\t\t\"foursquare_id\":     v.FoursquareID,\n\t\t\"foursquare_type\":   v.FoursquareType,\n\t\t\"google_place_id\":   v.GooglePlaceID,\n\t\t\"google_place_type\": v.GooglePlaceType,\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tdata, err := b.Raw(\"sendVenue\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// Send delivers invoice through bot b to recipient.\nfunc (i *Invoice) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := i.params()\n\tparams[\"chat_id\"] = to.Recipient()\n\tb.embedSendOptions(params, opt)\n\n\tdata, err := b.Raw(\"sendInvoice\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// Send delivers poll through bot b to recipient.\nfunc (p *Poll) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\":                 to.Recipient(),\n\t\t\"question\":                p.Question,\n\t\t\"type\":                    string(p.Type),\n\t\t\"is_closed\":               strconv.FormatBool(p.Closed),\n\t\t\"is_anonymous\":            strconv.FormatBool(p.Anonymous),\n\t\t\"allows_multiple_answers\": strconv.FormatBool(p.MultipleAnswers),\n\t\t\"correct_option_id\":       strconv.Itoa(p.CorrectOption),\n\t}\n\tif p.Explanation != \"\" {\n\t\tparams[\"explanation\"] = p.Explanation\n\t\tparams[\"explanation_parse_mode\"] = p.ParseMode\n\t}\n\tif p.OpenPeriod != 0 {\n\t\tparams[\"open_period\"] = strconv.Itoa(p.OpenPeriod)\n\t} else if p.CloseUnixdate != 0 {\n\t\tparams[\"close_date\"] = strconv.FormatInt(p.CloseUnixdate, 10)\n\t}\n\tb.embedSendOptions(params, opt)\n\n\topts, _ := json.Marshal(p.Options)\n\tparams[\"options\"] = string(opts)\n\n\tdata, err := b.Raw(\"sendPoll\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// Send delivers dice through bot b to recipient.\nfunc (d *Dice) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": to.Recipient(),\n\t\t\"emoji\":   string(d.Type),\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tdata, err := b.Raw(\"sendDice\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\n// Send delivers game through bot b to recipient.\nfunc (g *Game) Send(b *Bot, to Recipient, opt *SendOptions) (*Message, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\":         to.Recipient(),\n\t\t\"game_short_name\": g.Name,\n\t}\n\tb.embedSendOptions(params, opt)\n\n\tdata, err := b.Raw(\"sendGame\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn extractMessage(data)\n}\n\nfunc thumbnailToFilemap(thumb *Photo) map[string]File {\n\tif thumb != nil {\n\t\treturn map[string]File{\"thumbnail\": thumb.File}\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "stars.go",
          "type": "blob",
          "size": 2.1943359375,
          "content": "package telebot\n\nimport \"time\"\n\ntype TransactionType = string\n\nconst (\n\tTransactionTypeUser           TransactionType = \"user\"\n\tTransactionTypeFragment       TransactionType = \"fragment\"\n\tTransactionPartnerTelegramAds TransactionType = \"telegram_ads\"\n\tTransactionTypeOther          TransactionType = \"other\"\n)\n\ntype RevenueState = string\n\nconst (\n\tRevenueStatePending   RevenueState = \"pending\"\n\tRevenueStateSucceeded RevenueState = \"succeeded\"\n\tRevenueStateFailed    RevenueState = \"failed\"\n)\n\ntype StarTransaction struct {\n\t// Unique identifier of the transaction. Coincides with the identifier of the\n\t// original transaction for refund transactions. Coincides with\n\t// SuccessfulPayment.telegram_payment_charge_id for successful incoming\n\t// payments from users.\n\tID string `json:\"id\"`\n\n\t// Number of Telegram Stars transferred by the transaction\n\tAmount int `json:\"amount\"`\n\n\t// Date the transaction was created in Unix time\n\tUnixtime int64 `json:\"date\"`\n\n\t// (Optional) Source of an incoming transaction (e.g., a user purchasing goods\n\t// or services, Fragment refunding a failed withdrawal). Only for incoming transactions\n\tSource TransactionPartner `json:\"source\"`\n\n\t// (Optional) Receiver of an outgoing transaction (e.g., a user for a purchase\n\t// refund, Fragment for a withdrawal). Only for outgoing transactions\n\tReceiver TransactionPartner `json:\"receiver\"`\n}\n\ntype TransactionPartner struct {\n\t// Type of the state\n\tType    TransactionType `json:\"type\"`\n\tUser    *User           `json:\"user,omitempty\"`\n\tPayload string          `json:\"invoice_payload\"`\n\n\t// (Optional) State of the transaction if the transaction is outgoing$$\n\tWithdrawal RevenueWithdrawal `json:\"withdrawal_state,omitempty\"`\n}\n\ntype RevenueWithdrawal struct {\n\t// Type of the state\n\tType RevenueState `json:\"type\"`\n\n\t// Date the withdrawal was completed in Unix time\n\tUnixtime int `json:\"date,omitempty\"`\n\n\t// An HTTPS URL that can be used to see transaction details\n\tURL string `json:\"url,omitempty\"`\n}\n\n// Time returns the date of the transaction.\nfunc (c *StarTransaction) Time() time.Time {\n\treturn time.Unix(c.Unixtime, 0)\n}\n\n// Time returns the date of the withdrawal.\nfunc (s *RevenueWithdrawal) Time() time.Time {\n\treturn time.Unix(int64(s.Unixtime), 0)\n}\n"
        },
        {
          "name": "sticker.go",
          "type": "blob",
          "size": 8.4541015625,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"strconv\"\n)\n\ntype (\n\tStickerSetType   = string\n\tStickerSetFormat = string\n\tMaskFeature      = string\n)\n\nconst (\n\tStickerRegular     StickerSetType = \"regular\"\n\tStickerMask        StickerSetType = \"mask\"\n\tStickerCustomEmoji StickerSetType = \"custom_emoji\"\n)\n\nconst (\n\tStickerStatic   StickerSetFormat = \"static\"\n\tStickerAnimated StickerSetFormat = \"animated\"\n\tStickerVideo    StickerSetFormat = \"video\"\n)\n\nconst (\n\tMaskForehead MaskFeature = \"forehead\"\n\tMaskEyes     MaskFeature = \"eyes\"\n\tMaskMouth    MaskFeature = \"mouth\"\n\tMaskChin     MaskFeature = \"chin\"\n)\n\n// StickerSet represents a sticker set.\ntype StickerSet struct {\n\tType          StickerSetType   `json:\"sticker_type\"`\n\tFormat        StickerSetFormat `json:\"sticker_format\"`\n\tName          string           `json:\"name\"`\n\tTitle         string           `json:\"title\"`\n\tStickers      []Sticker        `json:\"stickers\"`\n\tThumbnail     *Photo           `json:\"thumbnail\"`\n\tEmojis        string           `json:\"emojis\"`\n\tContainsMasks bool             `json:\"contains_masks\"` // FIXME: can be removed\n\tMaskPosition  *MaskPosition    `json:\"mask_position\"`\n\tRepaint       bool             `json:\"needs_repainting\"`\n\n\t// Input is a field used in createNewStickerSet method to specify a list\n\t// of pre-defined stickers of type InputSticker to add to the set.\n\tInput []InputSticker\n}\n\ntype InputSticker struct {\n\tFile\n\tSticker      string        `json:\"sticker\"`\n\tFormat       string        `json:\"format\"`\n\tMaskPosition *MaskPosition `json:\"mask_position\"`\n\tEmojis       []string      `json:\"emoji_list\"`\n\tKeywords     []string      `json:\"keywords\"`\n}\n\n// MaskPosition describes the position on faces where\n// a mask should be placed by default.\ntype MaskPosition struct {\n\tFeature MaskFeature `json:\"point\"`\n\tXShift  float32     `json:\"x_shift\"`\n\tYShift  float32     `json:\"y_shift\"`\n\tScale   float32     `json:\"scale\"`\n}\n\n// UploadSticker uploads a sticker file for later use.\nfunc (b *Bot) UploadSticker(to Recipient, format StickerSetFormat, f File) (*File, error) {\n\tparams := map[string]string{\n\t\t\"user_id\":        to.Recipient(),\n\t\t\"sticker_format\": format,\n\t}\n\n\tdata, err := b.sendFiles(\"uploadStickerFile\", map[string]File{\"0\": f}, params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult File\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn &resp.Result, nil\n}\n\n// StickerSet returns a sticker set on success.\nfunc (b *Bot) StickerSet(name string) (*StickerSet, error) {\n\tdata, err := b.Raw(\"getStickerSet\", map[string]string{\"name\": name})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *StickerSet\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// CreateStickerSet creates a new sticker set.\nfunc (b *Bot) CreateStickerSet(of Recipient, set *StickerSet) error {\n\tfiles := make(map[string]File)\n\tfor i, s := range set.Input {\n\t\trepr := s.File.process(strconv.Itoa(i), files)\n\t\tif repr == \"\" {\n\t\t\treturn fmt.Errorf(\"telebot: sticker #%d does not exist\", i+1)\n\t\t}\n\t\tset.Input[i].Sticker = repr\n\t}\n\n\tdata, _ := json.Marshal(set.Input)\n\n\tparams := map[string]string{\n\t\t\"user_id\":  of.Recipient(),\n\t\t\"name\":     set.Name,\n\t\t\"title\":    set.Title,\n\t\t\"stickers\": string(data),\n\t}\n\tif set.Type != \"\" {\n\t\tparams[\"sticker_type\"] = set.Type\n\t}\n\tif set.Repaint {\n\t\tparams[\"needs_repainting\"] = \"true\"\n\t}\n\n\t_, err := b.sendFiles(\"createNewStickerSet\", files, params)\n\treturn err\n}\n\n// AddStickerToSet adds a new sticker to the existing sticker set.\nfunc (b *Bot) AddStickerToSet(of Recipient, name string, sticker InputSticker) error {\n\tfiles := make(map[string]File)\n\trepr := sticker.File.process(\"0\", files)\n\tif repr == \"\" {\n\t\treturn errors.New(\"telebot: sticker does not exist\")\n\t}\n\n\tsticker.Sticker = repr\n\tdata, _ := json.Marshal(sticker)\n\n\tparams := map[string]string{\n\t\t\"user_id\": of.Recipient(),\n\t\t\"name\":    name,\n\t\t\"sticker\": string(data),\n\t}\n\n\t_, err := b.sendFiles(\"addStickerToSet\", files, params)\n\treturn err\n}\n\n// SetStickerPosition moves a sticker in set to a specific position.\nfunc (b *Bot) SetStickerPosition(sticker string, position int) error {\n\tparams := map[string]string{\n\t\t\"sticker\":  sticker,\n\t\t\"position\": strconv.Itoa(position),\n\t}\n\n\t_, err := b.Raw(\"setStickerPositionInSet\", params)\n\treturn err\n}\n\n// DeleteSticker deletes a sticker from a set created by the bot.\nfunc (b *Bot) DeleteSticker(sticker string) error {\n\t_, err := b.Raw(\"deleteStickerFromSet\", map[string]string{\"sticker\": sticker})\n\treturn err\n\n}\n\n// SetStickerSetThumb sets a thumbnail of the sticker set.\n// Animated thumbnails can be set for animated sticker sets only.\n//\n// Thumbnail must be a PNG image, up to 128 kilobytes in size\n// and have width and height exactly 100px, or a TGS animation\n// up to 32 kilobytes in size.\n//\n// Animated sticker set thumbnail can't be uploaded via HTTP URL.\nfunc (b *Bot) SetStickerSetThumb(of Recipient, set *StickerSet) error {\n\tif set.Thumbnail == nil {\n\t\treturn errors.New(\"telebot: thumbnail is required\")\n\t}\n\n\tfiles := make(map[string]File)\n\trepr := set.Thumbnail.File.process(\"thumb\", files)\n\tif repr == \"\" {\n\t\treturn errors.New(\"telebot: thumbnail does not exist\")\n\t}\n\n\tparams := map[string]string{\n\t\t\"user_id\":   of.Recipient(),\n\t\t\"name\":      set.Name,\n\t\t\"format\":    set.Format,\n\t\t\"thumbnail\": repr,\n\t}\n\n\t_, err := b.sendFiles(\"setStickerSetThumbnail\", files, params)\n\treturn err\n}\n\n// SetStickerSetTitle sets the title of a created sticker set.\nfunc (b *Bot) SetStickerSetTitle(s StickerSet) error {\n\tparams := map[string]string{\n\t\t\"name\":  s.Name,\n\t\t\"title\": s.Title,\n\t}\n\n\t_, err := b.Raw(\"setStickerSetTitle\", params)\n\treturn err\n}\n\n// DeleteStickerSet deletes a sticker set that was created by the bot.\nfunc (b *Bot) DeleteStickerSet(name string) error {\n\tparams := map[string]string{\"name\": name}\n\n\t_, err := b.Raw(\"deleteStickerSet\", params)\n\treturn err\n}\n\n// SetStickerEmojis changes the list of emoji assigned to a regular or custom emoji sticker.\nfunc (b *Bot) SetStickerEmojis(sticker string, emojis []string) error {\n\tdata, err := json.Marshal(emojis)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tparams := map[string]string{\n\t\t\"sticker\":    sticker,\n\t\t\"emoji_list\": string(data),\n\t}\n\n\t_, err = b.Raw(\"setStickerEmojiList\", params)\n\treturn err\n}\n\n// SetStickerKeywords changes search keywords assigned to a regular or custom emoji sticker.\nfunc (b *Bot) SetStickerKeywords(sticker string, keywords []string) error {\n\tmk, err := json.Marshal(keywords)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tparams := map[string]string{\n\t\t\"sticker\":  sticker,\n\t\t\"keywords\": string(mk),\n\t}\n\n\t_, err = b.Raw(\"setStickerKeywords\", params)\n\treturn err\n}\n\n// SetStickerMaskPosition changes the mask position of a mask sticker.\nfunc (b *Bot) SetStickerMaskPosition(sticker string, mask MaskPosition) error {\n\tdata, err := json.Marshal(mask)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tparams := map[string]string{\n\t\t\"sticker\":       sticker,\n\t\t\"mask_position\": string(data),\n\t}\n\n\t_, err = b.Raw(\"setStickerMaskPosition\", params)\n\treturn err\n}\n\n// CustomEmojiStickers returns the information about custom emoji stickers by their ids.\nfunc (b *Bot) CustomEmojiStickers(ids []string) ([]Sticker, error) {\n\tdata, _ := json.Marshal(ids)\n\n\tparams := map[string]string{\n\t\t\"custom_emoji_ids\": string(data),\n\t}\n\n\tdata, err := b.Raw(\"getCustomEmojiStickers\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult []Sticker\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// SetCustomEmojiStickerSetThumb sets the thumbnail of a custom emoji sticker set.\nfunc (b *Bot) SetCustomEmojiStickerSetThumb(name, id string) error {\n\tparams := map[string]string{\n\t\t\"name\":            name,\n\t\t\"custom_emoji_id\": id,\n\t}\n\n\t_, err := b.Raw(\"setCustomEmojiStickerSetThumbnail\", params)\n\treturn err\n}\n\n// ReplaceStickerInSet returns True on success, if existing sticker was replaced with a new one.\nfunc (b *Bot) ReplaceStickerInSet(of Recipient, stickerSet, oldSticker string, sticker InputSticker) (bool, error) {\n\tfiles := make(map[string]File)\n\n\trepr := sticker.File.process(\"0\", files)\n\tif repr == \"\" {\n\t\treturn false, errors.New(\"telebot: sticker does not exist\")\n\t}\n\tsticker.Sticker = repr\n\n\tdata, err := json.Marshal(sticker)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\tparams := map[string]string{\n\t\t\"user_id\":     of.Recipient(),\n\t\t\"name\":        stickerSet,\n\t\t\"old_sticker\": oldSticker,\n\t\t\"sticker\":     string(data),\n\t}\n\n\t_, err = b.sendFiles(\"replaceStickerInSet\", files, params)\n\treturn true, err\n}\n"
        },
        {
          "name": "sticker_test.go",
          "type": "blob",
          "size": 1.400390625,
          "content": "package telebot\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestStickerSet(t *testing.T) {\n\tif b == nil {\n\t\tt.Skip(\"Cached bot instance is bad (probably wrong or empty TELEBOT_SECRET)\")\n\t}\n\tif userID == 0 {\n\t\tt.Skip(\"USER_ID is required for StickerSet methods test\")\n\t}\n\n\tinput := []InputSticker{\n\t\t{\n\t\t\tFile:     FromURL(\"https://placehold.co/512/000000/FFFFFF/png\"),\n\t\t\tEmojis:   []string{\"🤖\"},\n\t\t\tKeywords: []string{\"telebot\", \"robot\", \"bot\"},\n\t\t},\n\t\t{\n\t\t\tFile:     FromURL(\"https://placehold.co/512/000000/999999/png\"),\n\t\t\tEmojis:   []string{\"🤖\"},\n\t\t\tKeywords: []string{\"telebot\", \"robot\", \"bot\"},\n\t\t},\n\t}\n\n\toriginal := &StickerSet{\n\t\tName:   fmt.Sprintf(\"telebot_%d_by_%s\", time.Now().Unix(), b.Me.Username),\n\t\tType:   StickerRegular,\n\t\tFormat: StickerStatic,\n\t\tTitle:  \"Telebot Stickers\",\n\t\tInput:  input[:1],\n\t}\n\n\t// 1\n\terr := b.CreateStickerSet(user, original)\n\trequire.NoError(t, err)\n\t// 2\n\terr = b.AddStickerToSet(user, original.Name, input[1])\n\trequire.NoError(t, err)\n\n\toriginal.Thumbnail = &Photo{File: thumb}\n\terr = b.SetStickerSetThumb(user, original)\n\trequire.NoError(t, err)\n\n\tset, err := b.StickerSet(original.Name)\n\trequire.NoError(t, err)\n\trequire.Equal(t, original.Name, set.Name)\n\trequire.Equal(t, len(input), len(set.Stickers))\n\n\t_, err = b.Send(user, &set.Stickers[0])\n\trequire.NoError(t, err)\n\n\t_, err = b.Send(user, &set.Stickers[1])\n\trequire.NoError(t, err)\n}\n"
        },
        {
          "name": "telebot.go",
          "type": "blob",
          "size": 5.103515625,
          "content": "// Package telebot is a framework for Telegram bots.\n//\n// Example:\n//\n//\tpackage main\n//\n//\timport (\n//\t\t\"time\"\n//\t\ttele \"gopkg.in/telebot.v4\"\n//\t)\n//\n//\tfunc main() {\n//\t\tb, err := tele.NewBot(tele.Settings{\n//\t\t\tToken:  \"...\",\n//\t\t\tPoller: &tele.LongPoller{Timeout: 10 * time.Second},\n//\t\t})\n//\t\tif err != nil {\n//\t\t\treturn\n//\t\t}\n//\n//\t\tb.Handle(\"/start\", func(c tele.Context) error {\n//\t\t\treturn c.Send(\"Hello world!\")\n//\t\t})\n//\n//\t\tb.Start()\n//\t}\npackage telebot\n\nimport \"errors\"\n\nvar (\n\tErrBadRecipient    = errors.New(\"telebot: recipient is nil\")\n\tErrUnsupportedWhat = errors.New(\"telebot: unsupported what argument\")\n\tErrCouldNotUpdate  = errors.New(\"telebot: could not fetch new updates\")\n\tErrTrueResult      = errors.New(\"telebot: result is True\")\n\tErrBadContext      = errors.New(\"telebot: context does not contain message\")\n)\n\nconst DefaultApiURL = \"https://api.telegram.org\"\n\n// These are one of the possible events Handle() can deal with.\n//\n// For convenience, all Telebot-provided endpoints start with\n// an \"alert\" character \\a.\nconst (\n\t// Basic message handlers.\n\tOnText                 = \"\\atext\"\n\tOnForward              = \"\\aforward\"\n\tOnReply                = \"\\areply\"\n\tOnEdited               = \"\\aedited\"\n\tOnPhoto                = \"\\aphoto\"\n\tOnAudio                = \"\\aaudio\"\n\tOnAnimation            = \"\\aanimation\"\n\tOnDocument             = \"\\adocument\"\n\tOnSticker              = \"\\asticker\"\n\tOnVideo                = \"\\avideo\"\n\tOnVoice                = \"\\avoice\"\n\tOnVideoNote            = \"\\avideo_note\"\n\tOnContact              = \"\\acontact\"\n\tOnLocation             = \"\\alocation\"\n\tOnVenue                = \"\\avenue\"\n\tOnDice                 = \"\\adice\"\n\tOnInvoice              = \"\\ainvoice\"\n\tOnPayment              = \"\\apayment\"\n\tOnRefund               = \"\\arefund\"\n\tOnGame                 = \"\\agame\"\n\tOnPoll                 = \"\\apoll\"\n\tOnPollAnswer           = \"\\apoll_answer\"\n\tOnPinned               = \"\\apinned\"\n\tOnChannelPost          = \"\\achannel_post\"\n\tOnEditedChannelPost    = \"\\aedited_channel_post\"\n\tOnTopicCreated         = \"\\atopic_created\"\n\tOnTopicReopened        = \"\\atopic_reopened\"\n\tOnTopicClosed          = \"\\atopic_closed\"\n\tOnTopicEdited          = \"\\atopic_edited\"\n\tOnGeneralTopicHidden   = \"\\ageneral_topic_hidden\"\n\tOnGeneralTopicUnhidden = \"\\ageneral_topic_unhidden\"\n\tOnWriteAccessAllowed   = \"\\awrite_access_allowed\"\n\n\tOnAddedToGroup      = \"\\aadded_to_group\"\n\tOnUserJoined        = \"\\auser_joined\"\n\tOnUserLeft          = \"\\auser_left\"\n\tOnUserShared        = \"\\auser_shared\"\n\tOnChatShared        = \"\\achat_shared\"\n\tOnNewGroupTitle     = \"\\anew_chat_title\"\n\tOnNewGroupPhoto     = \"\\anew_chat_photo\"\n\tOnGroupPhotoDeleted = \"\\achat_photo_deleted\"\n\tOnGroupCreated      = \"\\agroup_created\"\n\tOnSuperGroupCreated = \"\\asupergroup_created\"\n\tOnChannelCreated    = \"\\achannel_created\"\n\n\t// OnMigration happens when group switches to\n\t// a supergroup. You might want to update\n\t// your internal references to this chat\n\t// upon switching as its ID will change.\n\tOnMigration = \"\\amigration\"\n\n\tOnMedia           = \"\\amedia\"\n\tOnCallback        = \"\\acallback\"\n\tOnQuery           = \"\\aquery\"\n\tOnInlineResult    = \"\\ainline_result\"\n\tOnShipping        = \"\\ashipping_query\"\n\tOnCheckout        = \"\\apre_checkout_query\"\n\tOnMyChatMember    = \"\\amy_chat_member\"\n\tOnChatMember      = \"\\achat_member\"\n\tOnChatJoinRequest = \"\\achat_join_request\"\n\tOnProximityAlert  = \"\\aproximity_alert_triggered\"\n\tOnAutoDeleteTimer = \"\\amessage_auto_delete_timer_changed\"\n\tOnWebApp          = \"\\aweb_app\"\n\n\tOnVideoChatStarted      = \"\\avideo_chat_started\"\n\tOnVideoChatEnded        = \"\\avideo_chat_ended\"\n\tOnVideoChatParticipants = \"\\avideo_chat_participants_invited\"\n\tOnVideoChatScheduled    = \"\\avideo_chat_scheduled\"\n\n\tOnBoost        = \"\\aboost_updated\"\n\tOnBoostRemoved = \"\\aboost_removed\"\n\n\tOnBusinessConnection      = \"\\abusiness_connection\"\n\tOnBusinessMessage         = \"\\abusiness_message\"\n\tOnEditedBusinessMessage   = \"\\aedited_business_message\"\n\tOnDeletedBusinessMessages = \"\\adeleted_business_messages\"\n)\n\n// ChatAction is a client-side status indicating bot activity.\ntype ChatAction string\n\nconst (\n\tTyping            ChatAction = \"typing\"\n\tUploadingPhoto    ChatAction = \"upload_photo\"\n\tUploadingVideo    ChatAction = \"upload_video\"\n\tUploadingAudio    ChatAction = \"upload_audio\"\n\tUploadingDocument ChatAction = \"upload_document\"\n\tUploadingVNote    ChatAction = \"upload_video_note\"\n\tRecordingVideo    ChatAction = \"record_video\"\n\tRecordingAudio    ChatAction = \"record_audio\"\n\tRecordingVNote    ChatAction = \"record_video_note\"\n\tFindingLocation   ChatAction = \"find_location\"\n\tChoosingSticker   ChatAction = \"choose_sticker\"\n)\n\n// ParseMode determines the way client applications treat the text of the message\ntype ParseMode = string\n\nconst (\n\tModeDefault    ParseMode = \"\"\n\tModeMarkdown   ParseMode = \"Markdown\"\n\tModeMarkdownV2 ParseMode = \"MarkdownV2\"\n\tModeHTML       ParseMode = \"HTML\"\n)\n\n// M is a shortcut for map[string]interface{}.\n// Useful for passing arguments to the layout functions.\ntype M = map[string]interface{}\n\n// Flag returns a pointer to the given bool.\n// Useful for passing the three-state flags to a Bot API.\n// For example, see ReplyRecipient type.\nfunc Flag(b bool) *bool {\n\treturn &b\n}\n"
        },
        {
          "name": "topic.go",
          "type": "blob",
          "size": 4.9287109375,
          "content": "package telebot\n\nimport (\n\t\"encoding/json\"\n\t\"strconv\"\n)\n\ntype Topic struct {\n\tName              string `json:\"name\"`\n\tIconColor         int    `json:\"icon_color\"`\n\tIconCustomEmojiID string `json:\"icon_custom_emoji_id\"`\n\tThreadID          int    `json:\"message_thread_id\"`\n}\n\n// CreateTopic creates a topic in a forum supergroup chat.\nfunc (b *Bot) CreateTopic(chat *Chat, topic *Topic) (*Topic, error) {\n\tparams := map[string]string{\n\t\t\"chat_id\": chat.Recipient(),\n\t\t\"name\":    topic.Name,\n\t}\n\n\tif topic.IconColor != 0 {\n\t\tparams[\"icon_color\"] = strconv.Itoa(topic.IconColor)\n\t}\n\tif topic.IconCustomEmojiID != \"\" {\n\t\tparams[\"icon_custom_emoji_id\"] = topic.IconCustomEmojiID\n\t}\n\n\tdata, err := b.Raw(\"createForumTopic\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult *Topic\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, err\n}\n\n// EditTopic edits name and icon of a topic in a forum supergroup chat.\nfunc (b *Bot) EditTopic(chat *Chat, topic *Topic) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\":           chat.Recipient(),\n\t\t\"message_thread_id\": topic.ThreadID,\n\t}\n\n\tif topic.Name != \"\" {\n\t\tparams[\"name\"] = topic.Name\n\t}\n\tif topic.IconCustomEmojiID != \"\" {\n\t\tparams[\"icon_custom_emoji_id\"] = topic.IconCustomEmojiID\n\t}\n\n\t_, err := b.Raw(\"editForumTopic\", params)\n\treturn err\n}\n\n// CloseTopic closes an open topic in a forum supergroup chat.\nfunc (b *Bot) CloseTopic(chat *Chat, topic *Topic) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\":           chat.Recipient(),\n\t\t\"message_thread_id\": topic.ThreadID,\n\t}\n\n\t_, err := b.Raw(\"closeForumTopic\", params)\n\treturn err\n}\n\n// ReopenTopic reopens a closed topic in a forum supergroup chat.\nfunc (b *Bot) ReopenTopic(chat *Chat, topic *Topic) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\":           chat.Recipient(),\n\t\t\"message_thread_id\": topic.ThreadID,\n\t}\n\n\t_, err := b.Raw(\"reopenForumTopic\", params)\n\treturn err\n}\n\n// DeleteTopic deletes a forum topic along with all its messages in a forum supergroup chat.\nfunc (b *Bot) DeleteTopic(chat *Chat, topic *Topic) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\":           chat.Recipient(),\n\t\t\"message_thread_id\": topic.ThreadID,\n\t}\n\n\t_, err := b.Raw(\"deleteForumTopic\", params)\n\treturn err\n}\n\n// UnpinAllTopicMessages clears the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup.\nfunc (b *Bot) UnpinAllTopicMessages(chat *Chat, topic *Topic) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\":           chat.Recipient(),\n\t\t\"message_thread_id\": topic.ThreadID,\n\t}\n\n\t_, err := b.Raw(\"unpinAllForumTopicMessages\", params)\n\treturn err\n}\n\n// TopicIconStickers gets custom emoji stickers, which can be used as a forum topic icon by any user.\nfunc (b *Bot) TopicIconStickers() ([]Sticker, error) {\n\tparams := map[string]string{}\n\n\tdata, err := b.Raw(\"getForumTopicIconStickers\", params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult []Sticker\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn resp.Result, nil\n}\n\n// EditGeneralTopic edits name of the 'General' topic in a forum supergroup chat.\nfunc (b *Bot) EditGeneralTopic(chat *Chat, topic *Topic) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\": chat.Recipient(),\n\t\t\"name\":    topic.Name,\n\t}\n\n\t_, err := b.Raw(\"editGeneralForumTopic\", params)\n\treturn err\n}\n\n// CloseGeneralTopic closes an open 'General' topic in a forum supergroup chat.\nfunc (b *Bot) CloseGeneralTopic(chat *Chat) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"closeGeneralForumTopic\", params)\n\treturn err\n}\n\n// ReopenGeneralTopic reopens a closed 'General' topic in a forum supergroup chat.\nfunc (b *Bot) ReopenGeneralTopic(chat *Chat) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"reopenGeneralForumTopic\", params)\n\treturn err\n}\n\n// HideGeneralTopic hides the 'General' topic in a forum supergroup chat.\nfunc (b *Bot) HideGeneralTopic(chat *Chat) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"hideGeneralForumTopic\", params)\n\treturn err\n}\n\n// UnhideGeneralTopic unhides the 'General' topic in a forum supergroup chat.\nfunc (b *Bot) UnhideGeneralTopic(chat *Chat) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"unhideGeneralForumTopic\", params)\n\treturn err\n}\n\n// UnpinAllGeneralTopicMessages clears the list of pinned messages in a General forum topic.\n// The bot must be an administrator in the chat for this to work and must have the\n// can_pin_messages administrator right in the supergroup.\nfunc (b *Bot) UnpinAllGeneralTopicMessages(chat *Chat) error {\n\tparams := map[string]interface{}{\n\t\t\"chat_id\": chat.Recipient(),\n\t}\n\n\t_, err := b.Raw(\"unpinAllGeneralForumTopicMessages\", params)\n\treturn err\n}\n"
        },
        {
          "name": "update.go",
          "type": "blob",
          "size": 8.623046875,
          "content": "package telebot\n\nimport \"strings\"\n\n// Update object represents an incoming update.\ntype Update struct {\n\tID int `json:\"update_id\"`\n\n\tMessage                 *Message                 `json:\"message,omitempty\"`\n\tEditedMessage           *Message                 `json:\"edited_message,omitempty\"`\n\tChannelPost             *Message                 `json:\"channel_post,omitempty\"`\n\tEditedChannelPost       *Message                 `json:\"edited_channel_post,omitempty\"`\n\tMessageReaction         *MessageReaction         `json:\"message_reaction\"`\n\tMessageReactionCount    *MessageReactionCount    `json:\"message_reaction_count\"`\n\tCallback                *Callback                `json:\"callback_query,omitempty\"`\n\tQuery                   *Query                   `json:\"inline_query,omitempty\"`\n\tInlineResult            *InlineResult            `json:\"chosen_inline_result,omitempty\"`\n\tShippingQuery           *ShippingQuery           `json:\"shipping_query,omitempty\"`\n\tPreCheckoutQuery        *PreCheckoutQuery        `json:\"pre_checkout_query,omitempty\"`\n\tPoll                    *Poll                    `json:\"poll,omitempty\"`\n\tPollAnswer              *PollAnswer              `json:\"poll_answer,omitempty\"`\n\tMyChatMember            *ChatMemberUpdate        `json:\"my_chat_member,omitempty\"`\n\tChatMember              *ChatMemberUpdate        `json:\"chat_member,omitempty\"`\n\tChatJoinRequest         *ChatJoinRequest         `json:\"chat_join_request,omitempty\"`\n\tBoost                   *BoostUpdated            `json:\"chat_boost\"`\n\tBoostRemoved            *BoostRemoved            `json:\"removed_chat_boost\"`\n\tBusinessConnection      *BusinessConnection      `json:\"business_connection\"`\n\tBusinessMessage         *Message                 `json:\"business_message\"`\n\tEditedBusinessMessage   *Message                 `json:\"edited_business_message\"`\n\tDeletedBusinessMessages *BusinessMessagesDeleted `json:\"deleted_business_messages\"`\n}\n\n// ProcessUpdate processes a single incoming update.\n// A started bot calls this function automatically.\nfunc (b *Bot) ProcessUpdate(u Update) {\n\tb.ProcessContext(b.NewContext(u))\n}\n\n// ProcessContext processes the given context.\n// A started bot calls this function automatically.\nfunc (b *Bot) ProcessContext(c Context) {\n\tu := c.Update()\n\n\tif u.Message != nil {\n\t\tm := u.Message\n\n\t\tif m.PinnedMessage != nil {\n\t\t\tb.handle(OnPinned, c)\n\t\t\treturn\n\t\t}\n\n\t\tif m.Origin != nil {\n\t\t\tb.handle(OnForward, c)\n\t\t}\n\n\t\t// Commands\n\t\tif m.Text != \"\" {\n\t\t\t// Filtering malicious messages\n\t\t\tif m.Text[0] == '\\a' {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmatch := cmdRx.FindAllStringSubmatch(m.Text, -1)\n\t\t\tif match != nil {\n\t\t\t\t// Syntax: \"</command>@<bot> <payload>\"\n\t\t\t\tcommand, botName := match[0][1], match[0][3]\n\n\t\t\t\tif botName != \"\" && !strings.EqualFold(b.Me.Username, botName) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tm.Payload = match[0][5]\n\t\t\t\tif b.handle(command, c) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 1:1 satisfaction\n\t\t\tif b.handle(m.Text, c) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif m.ReplyTo != nil {\n\t\t\t\tb.handle(OnReply, c)\n\t\t\t}\n\n\t\t\tb.handle(OnText, c)\n\t\t\treturn\n\t\t}\n\n\t\tif b.handleMedia(c) {\n\t\t\treturn\n\t\t}\n\n\t\tif m.Contact != nil {\n\t\t\tb.handle(OnContact, c)\n\t\t\treturn\n\t\t}\n\t\tif m.Location != nil {\n\t\t\tb.handle(OnLocation, c)\n\t\t\treturn\n\t\t}\n\t\tif m.Venue != nil {\n\t\t\tb.handle(OnVenue, c)\n\t\t\treturn\n\t\t}\n\t\tif m.Game != nil {\n\t\t\tb.handle(OnGame, c)\n\t\t\treturn\n\t\t}\n\t\tif m.Dice != nil {\n\t\t\tb.handle(OnDice, c)\n\t\t\treturn\n\t\t}\n\t\tif m.Invoice != nil {\n\t\t\tb.handle(OnInvoice, c)\n\t\t\treturn\n\t\t}\n\t\tif m.Payment != nil {\n\t\t\tb.handle(OnPayment, c)\n\t\t\treturn\n\t\t}\n\t\tif m.RefundedPayment != nil {\n\t\t\tb.handle(OnRefund, c)\n\t\t\treturn\n\t\t}\n\t\tif m.TopicCreated != nil {\n\t\t\tb.handle(OnTopicCreated, c)\n\t\t\treturn\n\t\t}\n\t\tif m.TopicReopened != nil {\n\t\t\tb.handle(OnTopicReopened, c)\n\t\t\treturn\n\t\t}\n\t\tif m.TopicClosed != nil {\n\t\t\tb.handle(OnTopicClosed, c)\n\t\t\treturn\n\t\t}\n\t\tif m.TopicEdited != nil {\n\t\t\tb.handle(OnTopicEdited, c)\n\t\t\treturn\n\t\t}\n\t\tif m.GeneralTopicHidden != nil {\n\t\t\tb.handle(OnGeneralTopicHidden, c)\n\t\t\treturn\n\t\t}\n\t\tif m.GeneralTopicUnhidden != nil {\n\t\t\tb.handle(OnGeneralTopicUnhidden, c)\n\t\t\treturn\n\t\t}\n\t\tif m.WriteAccessAllowed != nil {\n\t\t\tb.handle(OnWriteAccessAllowed, c)\n\t\t\treturn\n\t\t}\n\n\t\twasAdded := (m.UserJoined != nil && m.UserJoined.ID == b.Me.ID) ||\n\t\t\t(m.UsersJoined != nil && isUserInList(b.Me, m.UsersJoined))\n\t\tif m.GroupCreated || m.SuperGroupCreated || wasAdded {\n\t\t\tb.handle(OnAddedToGroup, c)\n\t\t\treturn\n\t\t}\n\n\t\tif m.UserJoined != nil {\n\t\t\tb.handle(OnUserJoined, c)\n\t\t\treturn\n\t\t}\n\t\tif m.UsersJoined != nil {\n\t\t\tfor _, user := range m.UsersJoined {\n\t\t\t\tm.UserJoined = &user\n\t\t\t\tb.handle(OnUserJoined, c)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif m.UserLeft != nil {\n\t\t\tb.handle(OnUserLeft, c)\n\t\t\treturn\n\t\t}\n\n\t\tif m.UserShared != nil {\n\t\t\tb.handle(OnUserShared, c)\n\t\t\treturn\n\t\t}\n\t\tif m.ChatShared != nil {\n\t\t\tb.handle(OnChatShared, c)\n\t\t\treturn\n\t\t}\n\n\t\tif m.NewGroupTitle != \"\" {\n\t\t\tb.handle(OnNewGroupTitle, c)\n\t\t\treturn\n\t\t}\n\t\tif m.NewGroupPhoto != nil {\n\t\t\tb.handle(OnNewGroupPhoto, c)\n\t\t\treturn\n\t\t}\n\t\tif m.GroupPhotoDeleted {\n\t\t\tb.handle(OnGroupPhotoDeleted, c)\n\t\t\treturn\n\t\t}\n\n\t\tif m.GroupCreated {\n\t\t\tb.handle(OnGroupCreated, c)\n\t\t\treturn\n\t\t}\n\t\tif m.SuperGroupCreated {\n\t\t\tb.handle(OnSuperGroupCreated, c)\n\t\t\treturn\n\t\t}\n\t\tif m.ChannelCreated {\n\t\t\tb.handle(OnChannelCreated, c)\n\t\t\treturn\n\t\t}\n\n\t\tif m.MigrateTo != 0 {\n\t\t\tm.MigrateFrom = m.Chat.ID\n\t\t\tb.handle(OnMigration, c)\n\t\t\treturn\n\t\t}\n\n\t\tif m.VideoChatStarted != nil {\n\t\t\tb.handle(OnVideoChatStarted, c)\n\t\t\treturn\n\t\t}\n\t\tif m.VideoChatEnded != nil {\n\t\t\tb.handle(OnVideoChatEnded, c)\n\t\t\treturn\n\t\t}\n\t\tif m.VideoChatParticipants != nil {\n\t\t\tb.handle(OnVideoChatParticipants, c)\n\t\t\treturn\n\t\t}\n\t\tif m.VideoChatScheduled != nil {\n\t\t\tb.handle(OnVideoChatScheduled, c)\n\t\t\treturn\n\t\t}\n\n\t\tif m.WebAppData != nil {\n\t\t\tb.handle(OnWebApp, c)\n\t\t\treturn\n\t\t}\n\n\t\tif m.ProximityAlert != nil {\n\t\t\tb.handle(OnProximityAlert, c)\n\t\t\treturn\n\t\t}\n\t\tif m.AutoDeleteTimer != nil {\n\t\t\tb.handle(OnAutoDeleteTimer, c)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif u.EditedMessage != nil {\n\t\tb.handle(OnEdited, c)\n\t\treturn\n\t}\n\n\tif u.ChannelPost != nil {\n\t\tm := u.ChannelPost\n\n\t\tif m.PinnedMessage != nil {\n\t\t\tb.handle(OnPinned, c)\n\t\t\treturn\n\t\t}\n\n\t\tb.handle(OnChannelPost, c)\n\t\treturn\n\t}\n\n\tif u.EditedChannelPost != nil {\n\t\tb.handle(OnEditedChannelPost, c)\n\t\treturn\n\t}\n\n\tif u.Callback != nil {\n\t\tif data := u.Callback.Data; data != \"\" && data[0] == '\\f' {\n\t\t\tmatch := cbackRx.FindAllStringSubmatch(data, -1)\n\t\t\tif match != nil {\n\t\t\t\tunique, payload := match[0][1], match[0][3]\n\t\t\t\tif handler, ok := b.handlers[\"\\f\"+unique]; ok {\n\t\t\t\t\tu.Callback.Unique = unique\n\t\t\t\t\tu.Callback.Data = payload\n\t\t\t\t\tb.runHandler(handler, c)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tb.handle(OnCallback, c)\n\t\treturn\n\t}\n\n\tif u.Query != nil {\n\t\tb.handle(OnQuery, c)\n\t\treturn\n\t}\n\n\tif u.InlineResult != nil {\n\t\tb.handle(OnInlineResult, c)\n\t\treturn\n\t}\n\n\tif u.ShippingQuery != nil {\n\t\tb.handle(OnShipping, c)\n\t\treturn\n\t}\n\n\tif u.PreCheckoutQuery != nil {\n\t\tb.handle(OnCheckout, c)\n\t\treturn\n\t}\n\n\tif u.Poll != nil {\n\t\tb.handle(OnPoll, c)\n\t\treturn\n\t}\n\tif u.PollAnswer != nil {\n\t\tb.handle(OnPollAnswer, c)\n\t\treturn\n\t}\n\n\tif u.MyChatMember != nil {\n\t\tb.handle(OnMyChatMember, c)\n\t\treturn\n\t}\n\tif u.ChatMember != nil {\n\t\tb.handle(OnChatMember, c)\n\t\treturn\n\t}\n\tif u.ChatJoinRequest != nil {\n\t\tb.handle(OnChatJoinRequest, c)\n\t\treturn\n\t}\n\n\tif u.Boost != nil {\n\t\tb.handle(OnBoost, c)\n\t\treturn\n\t}\n\tif u.BoostRemoved != nil {\n\t\tb.handle(OnBoostRemoved, c)\n\t\treturn\n\t}\n\n\tif u.BusinessConnection != nil {\n\t\tb.handle(OnBusinessConnection, c)\n\t\treturn\n\t}\n\tif u.BusinessMessage != nil {\n\t\tb.handle(OnBusinessMessage, c)\n\t\treturn\n\t}\n\tif u.EditedBusinessMessage != nil {\n\t\tb.handle(OnEditedBusinessMessage, c)\n\t\treturn\n\t}\n\tif u.DeletedBusinessMessages != nil {\n\t\tb.handle(OnDeletedBusinessMessages, c)\n\t\treturn\n\t}\n}\n\nfunc (b *Bot) handle(end string, c Context) bool {\n\tif handler, ok := b.handlers[end]; ok {\n\t\tb.runHandler(handler, c)\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc (b *Bot) handleMedia(c Context) bool {\n\tvar (\n\t\tm     = c.Message()\n\t\tfired = true\n\t)\n\n\tswitch {\n\tcase m.Photo != nil:\n\t\tfired = b.handle(OnPhoto, c)\n\tcase m.Voice != nil:\n\t\tfired = b.handle(OnVoice, c)\n\tcase m.Audio != nil:\n\t\tfired = b.handle(OnAudio, c)\n\tcase m.Animation != nil:\n\t\tfired = b.handle(OnAnimation, c)\n\tcase m.Document != nil:\n\t\tfired = b.handle(OnDocument, c)\n\tcase m.Sticker != nil:\n\t\tfired = b.handle(OnSticker, c)\n\tcase m.Video != nil:\n\t\tfired = b.handle(OnVideo, c)\n\tcase m.VideoNote != nil:\n\t\tfired = b.handle(OnVideoNote, c)\n\tdefault:\n\t\treturn false\n\t}\n\n\tif !fired {\n\t\treturn b.handle(OnMedia, c)\n\t}\n\n\treturn true\n}\n\nfunc (b *Bot) runHandler(h HandlerFunc, c Context) {\n\tf := func() {\n\t\tif err := h(c); err != nil {\n\t\t\tb.OnError(err, c)\n\t\t}\n\t}\n\tif b.synchronous {\n\t\tf()\n\t} else {\n\t\tgo f()\n\t}\n}\n\nfunc isUserInList(user *User, list []User) bool {\n\tfor _, user2 := range list {\n\t\tif user.ID == user2.ID {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"
        },
        {
          "name": "video_chat.go",
          "type": "blob",
          "size": 0.828125,
          "content": "package telebot\n\nimport \"time\"\n\ntype (\n\t// VideoChatStarted represents a service message about a video chat\n\t// started in the chat.\n\tVideoChatStarted struct{}\n\n\t// VideoChatEnded represents a service message about a video chat\n\t// ended in the chat.\n\tVideoChatEnded struct {\n\t\tDuration int `json:\"duration\"` // in seconds\n\t}\n\n\t// VideoChatParticipants represents a service message about new\n\t// members invited to a video chat\n\tVideoChatParticipants struct {\n\t\tUsers []User `json:\"users\"`\n\t}\n\n\t// VideoChatScheduled represents a service message about a video chat scheduled in the chat.\n\tVideoChatScheduled struct {\n\t\tUnixtime int64 `json:\"start_date\"`\n\t}\n)\n\n// StartsAt returns the point when the video chat is supposed to be started by a chat administrator.\nfunc (v *VideoChatScheduled) StartsAt() time.Time {\n\treturn time.Unix(v.Unixtime, 0)\n}\n"
        },
        {
          "name": "web_app.go",
          "type": "blob",
          "size": 0.8837890625,
          "content": "package telebot\n\n// WebApp represents a parameter of the inline keyboard button\n// or the keyboard button used to launch Web App.\ntype WebApp struct {\n\tURL string `json:\"url\"`\n}\n\n// WebAppMessage describes an inline message sent by a Web App on behalf of a user.\ntype WebAppMessage struct {\n\tInlineMessageID string `json:\"inline_message_id\"`\n}\n\n// WebAppData object represents a data sent from a Web App to the bot\ntype WebAppData struct {\n\tData string `json:\"data\"`\n\tText string `json:\"button_text\"`\n}\n\n// WebAppAccessAllowed represents a service message about a user allowing\n// a bot to write messages after adding the bot to the attachment menu or launching a Web App from a link.\ntype WriteAccessAllowed struct {\n\tWebAppName         string `json:\"web_app_name,omitempty\"`\n\tFromRequest        bool   `json:\"from_request,omitempty\"`\n\tFromAttachmentMenu bool   `json:\"from_attachment_menu,omitempty\"`\n}\n"
        },
        {
          "name": "webhook.go",
          "type": "blob",
          "size": 5.9345703125,
          "content": "package telebot\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\n// A WebhookTLS specifies the path to a key and a cert so the poller can open\n// a TLS listener.\ntype WebhookTLS struct {\n\tKey  string `json:\"key\"`\n\tCert string `json:\"cert\"`\n}\n\n// A WebhookEndpoint describes the endpoint to which telegram will send its requests.\n// This must be a public URL and can be a loadbalancer or something similar. If the\n// endpoint uses TLS and the certificate is self-signed you have to add the certificate\n// path of this certificate so telegram will trust it. This field can be ignored if you\n// have a trusted certificate (letsencrypt, ...).\ntype WebhookEndpoint struct {\n\tPublicURL string `json:\"public_url\"`\n\tCert      string `json:\"cert\"`\n}\n\n// A Webhook configures the poller for webhooks. It opens a port on the given\n// listen address. If TLS is filled, the listener will use the key and cert to open\n// a secure port. Otherwise it will use plain HTTP.\n//\n// If you have a loadbalancer ore other infrastructure in front of your service, you\n// must fill the Endpoint structure so this poller will send this data to telegram. If\n// you leave these values empty, your local address will be sent to telegram which is mostly\n// not what you want (at least while developing). If you have a single instance of your\n// bot you should consider to use the LongPoller instead of a WebHook.\n//\n// You can also leave the Listen field empty. In this case it is up to the caller to\n// add the Webhook to a http-mux.\n//\n// If you want to ignore the automatic setWebhook call, you can set IgnoreSetWebhook to true.\n//\ntype Webhook struct {\n\tListen           string   `json:\"url\"`\n\tMaxConnections   int      `json:\"max_connections\"`\n\tAllowedUpdates   []string `json:\"allowed_updates\"`\n\tIP               string   `json:\"ip_address\"`\n\tDropUpdates      bool     `json:\"drop_pending_updates\"`\n\tSecretToken      string   `json:\"secret_token\"`\n\tIgnoreSetWebhook bool     `json:\"ignore_set_web_hook\"`\n\n\t// (WebhookInfo)\n\tHasCustomCert     bool   `json:\"has_custom_certificate\"`\n\tPendingUpdates    int    `json:\"pending_update_count\"`\n\tErrorUnixtime     int64  `json:\"last_error_date\"`\n\tErrorMessage      string `json:\"last_error_message\"`\n\tSyncErrorUnixtime int64  `json:\"last_synchronization_error_date\"`\n\n\tTLS      *WebhookTLS\n\tEndpoint *WebhookEndpoint\n\n\tdest chan<- Update\n\tbot  *Bot\n}\n\nfunc (h *Webhook) getFiles() map[string]File {\n\tm := make(map[string]File)\n\n\tif h.TLS != nil {\n\t\tm[\"certificate\"] = FromDisk(h.TLS.Cert)\n\t}\n\t// check if it is overwritten by an endpoint\n\tif h.Endpoint != nil {\n\t\tif h.Endpoint.Cert == \"\" {\n\t\t\t// this can be the case if there is a loadbalancer or reverseproxy in\n\t\t\t// front with a public cert. in this case we do not need to upload it\n\t\t\t// to telegram. we delete the certificate from the map, because someone\n\t\t\t// can have an internal TLS listener with a private cert\n\t\t\tdelete(m, \"certificate\")\n\t\t} else {\n\t\t\t// someone configured a certificate\n\t\t\tm[\"certificate\"] = FromDisk(h.Endpoint.Cert)\n\t\t}\n\t}\n\treturn m\n}\n\nfunc (h *Webhook) getParams() map[string]string {\n\tparams := make(map[string]string)\n\n\tif h.MaxConnections != 0 {\n\t\tparams[\"max_connections\"] = strconv.Itoa(h.MaxConnections)\n\t}\n\tif len(h.AllowedUpdates) > 0 {\n\t\tdata, _ := json.Marshal(h.AllowedUpdates)\n\t\tparams[\"allowed_updates\"] = string(data)\n\t}\n\tif h.IP != \"\" {\n\t\tparams[\"ip_address\"] = h.IP\n\t}\n\tif h.DropUpdates {\n\t\tparams[\"drop_pending_updates\"] = strconv.FormatBool(h.DropUpdates)\n\t}\n\tif h.SecretToken != \"\" {\n\t\tparams[\"secret_token\"] = h.SecretToken\n\t}\n\n\tif h.TLS != nil {\n\t\tparams[\"url\"] = \"https://\" + h.Listen\n\t} else {\n\t\t// this will not work with telegram, they want TLS\n\t\t// but i allow this because telegram will send an error\n\t\t// when you register this hook. in their docs they write\n\t\t// that port 80/http is allowed ...\n\t\tparams[\"url\"] = \"http://\" + h.Listen\n\t}\n\tif h.Endpoint != nil {\n\t\tparams[\"url\"] = h.Endpoint.PublicURL\n\t}\n\treturn params\n}\n\nfunc (h *Webhook) Poll(b *Bot, dest chan Update, stop chan struct{}) {\n\t// by default, the set webhook method will be called, to ignore it, set IgnoreSetWebhook to true\n\tif !h.IgnoreSetWebhook {\n\t\tif err := b.SetWebhook(h); err != nil {\n\t\t\tb.OnError(err, nil)\n\t\t\tclose(stop)\n\t\t\treturn\n\t\t}\n\t}\n\n\t// store the variables so the HTTP-handler can use 'em\n\th.dest = dest\n\th.bot = b\n\n\tif h.Listen == \"\" {\n\t\th.waitForStop(stop)\n\t\treturn\n\t}\n\n\ts := &http.Server{\n\t\tAddr:    h.Listen,\n\t\tHandler: h,\n\t}\n\n\tgo func(stop chan struct{}) {\n\t\th.waitForStop(stop)\n\t\ts.Shutdown(context.Background())\n\t}(stop)\n\n\tif h.TLS != nil {\n\t\ts.ListenAndServeTLS(h.TLS.Cert, h.TLS.Key)\n\t} else {\n\t\ts.ListenAndServe()\n\t}\n}\n\nfunc (h *Webhook) waitForStop(stop chan struct{}) {\n\t<-stop\n\tclose(stop)\n}\n\n// The handler simply reads the update from the body of the requests\n// and writes them to the update channel.\nfunc (h *Webhook) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif h.SecretToken != \"\" && r.Header.Get(\"X-Telegram-Bot-Api-Secret-Token\") != h.SecretToken {\n\t\th.bot.debug(fmt.Errorf(\"invalid secret token in request\"))\n\t\treturn\n\t}\n\n\tvar update Update\n\tif err := json.NewDecoder(r.Body).Decode(&update); err != nil {\n\t\th.bot.debug(fmt.Errorf(\"cannot decode update: %v\", err))\n\t\treturn\n\t}\n\th.dest <- update\n}\n\n// Webhook returns the current webhook status.\nfunc (b *Bot) Webhook() (*Webhook, error) {\n\tdata, err := b.Raw(\"getWebhookInfo\", nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp struct {\n\t\tResult Webhook\n\t}\n\tif err := json.Unmarshal(data, &resp); err != nil {\n\t\treturn nil, wrapError(err)\n\t}\n\treturn &resp.Result, nil\n}\n\n// SetWebhook configures a bot to receive incoming\n// updates via an outgoing webhook.\nfunc (b *Bot) SetWebhook(w *Webhook) error {\n\t_, err := b.sendFiles(\"setWebhook\", w.getFiles(), w.getParams())\n\treturn err\n}\n\n// RemoveWebhook removes webhook integration.\nfunc (b *Bot) RemoveWebhook(dropPending ...bool) error {\n\tdrop := false\n\tif len(dropPending) > 0 {\n\t\tdrop = dropPending[0]\n\t}\n\t_, err := b.Raw(\"deleteWebhook\", map[string]bool{\n\t\t\"drop_pending_updates\": drop,\n\t})\n\treturn err\n}\n"
        }
      ]
    }
  ]
}