{
  "metadata": {
    "timestamp": 1736566986050,
    "page": 566,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ClickHouse/clickhouse-go",
      "stars": 2949,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.408203125,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n*.cap\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.out\n*.exe\n*.test\n*.prof\n\ncoverage.txt\n.idea/**\n.vscode/**\ndev/*\n.run/**\n\nvendor\n\n**.tfstate*\n.terraform.lock.hcl\n**/.terraform*\npipeline.auto.tfvars\n*.tfvars\n\n.env\n"
        },
        {
          "name": ".golangci.yaml",
          "type": "blob",
          "size": 1.3037109375,
          "content": "run:\n  tests: false\n  skip-dirs:\n  - benchmark\n  - tests\n  - internal/cmd\n\nlinters-settings:\n  gocritic:\n    disabled-checks:\n    - singleCaseSwitch\n    - commentFormatting\n\n  decorder:\n    dec-order:\n    - type\n    - const\n    - var\n    - func\n    disable-dec-order-check: false\n\n  revive:\n    enable-all-rules: true\n    rules:\n    - name:     cyclomatic\n      disabled: true\n    - name:     argument-limit\n      disabled: true\n    - name:     function-length\n      disabled: true\n    - name:     function-result-limit\n      disabled: true\n    - name:     line-length-limit\n      disabled: true\n    - name:     file-header\n      disabled: true\n    - name:     cognitive-complexity\n      disabled: true\n    - name:     banned-characters\n      disabled: true\n    - name:     max-public-structs\n      disabled: true\n    - name:     add-constant\n      disabled: true\n    - name:     unhandled-error\n      disabled: true\n    - name:     deep-exit\n      disabled: true\n    - name:     nested-structs\n      disabled: true\n\n  gofmt:\n    rewrite-rules:\n    - pattern:     'interface{}'\n      replacement: 'any'\n    - pattern:     'a[b:len(a)]'\n      replacement: 'a[b:]'\n\nlinters:\n  disable-all: true\n  enable:\n  - asciicheck\n  - bodyclose\n  - depguard\n  - gocritic\n  - gofmt\n  - govet\n  - ineffassign\n  - imports\n  - misspell\n  - staticcheck\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 42.1953125,
          "content": "# v2.30.0, 2024-10-16 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Extended support for HTTP proxy in driver options by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1424\r\n* Default implementation of column.IterableOrderedMap by @earwin in https://github.com/ClickHouse/clickhouse-go/pull/1417\r\n### Fixes üêõ\r\n* Fix serialization for slices of OrderedMap/IterableOrderedMap (#1365) by @earwin in https://github.com/ClickHouse/clickhouse-go/pull/1418\r\n* Retry on broken pipe in batch by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1423\r\n### Other Changes üõ†\r\n* Add 'clickhouse-go-rows-utils' to third-party libraries by @EpicStep in https://github.com/ClickHouse/clickhouse-go/pull/1413\r\n\r\n## New Contributors\r\n* @earwin made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1418\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.29.0...v2.30.0\n\n# v2.29.0, 2024-09-24 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Add ability to handle context cancellations for TCP protocol by @tinybit in https://github.com/ClickHouse/clickhouse-go/pull/1389\r\n### Other Changes üõ†\r\n* Add Examples for batch.Column(n).AppendRow in columnar_insert.go by @achmad-dev in https://github.com/ClickHouse/clickhouse-go/pull/1410\r\n\r\n## New Contributors\r\n* @achmad-dev made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1410\r\n* @tinybit made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1389\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.28.3...v2.29.0\n\n# v2.28.3, 2024-09-12 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Other Changes üõ†\r\n* Revert the minimum required Go version to 1.21 by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1405\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.28.2...v2.28.3\n\n# v2.28.2, 2024-08-30 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Validate connection in bad state before query execution in the stdlib database/sql driver by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1396\r\n### Other Changes üõ†\r\n* Update README with newer Go versions by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1393\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.28.1...v2.28.2\n\n# v2.28.1, 2024-08-27 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Recognize empty strings as a valid enum key by @genzgd in https://github.com/ClickHouse/clickhouse-go/pull/1387\r\n### Other Changes üõ†\r\n* ClickHouse 24.8 by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1385\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.28.0...v2.28.1\n\n# v2.28.0, 2024-08-23 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Fix Enum column definition parse logic to match ClickHouse spec by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1380\r\n* Fix support custom serialization in Nested type by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1381\r\n* Fix panic on nil map append by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1383\r\n### Other Changes üõ†\r\n* Remove test coverage for deprecated Object('JSON') type by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1377\r\n* Remove JSON type use from a context use example by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1379\r\n* Make sure non-secure port is used during readiness check by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1382\r\n* Deprecate Go 1.21 ended support and require Go 1.22 by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1378\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.27.2...v2.28.0\n\n# v2.27.2, 2024-08-20 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Optimize Date/Date32 scan by @ShoshinNikita in https://github.com/ClickHouse/clickhouse-go/pull/1374\r\n### Fixes üêõ\r\n* Fix column list parsing for multiline INSERT statements by @Fiery-Fenix in https://github.com/ClickHouse/clickhouse-go/pull/1373\r\n\r\n## New Contributors\r\n* @Fiery-Fenix made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1373\r\n* @ShoshinNikita made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1374\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.27.1...v2.27.2\n\n# v2.27.1, 2024-08-05 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Fix INSERT statement normalization match backtick table name by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1366\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.27.0...v2.27.1\n\n# v2.27.0, 2024-08-01 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## Breaking change notice\r\n\r\nv2.25.0 was released with a breaking change in https://github.com/ClickHouse/clickhouse-go/pull/1306. Please review your implementation.\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Unpack value of indirect types in array column to support nested structures in interfaced slices/arrays by @jmaicher in https://github.com/ClickHouse/clickhouse-go/pull/1350\r\n### Fixes üêõ\r\n* Common HTTP insert query normalization by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1341\r\n### Other Changes üõ†\r\n* Update examples std json by @xjeway in https://github.com/ClickHouse/clickhouse-go/pull/1240\r\n* ClickHouse 24.6 by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1352\r\n* ClickHouse 24.7 release by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1363\r\n* Update CHANGELOG with a breaking change note by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1364\r\n\r\n## New Contributors\r\n* @xjeway made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1240\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.26.0...v2.27.0\n\n# v2.26.0, 2024-06-25 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Reintroduce the random connection strategy by @larry-cdn77 in https://github.com/ClickHouse/clickhouse-go/pull/1313\r\n* Make custom debug log function on-par with the built-in one by @vespian in https://github.com/ClickHouse/clickhouse-go/pull/1317\r\n* Remove date overflow check as it's normalised by ClickHouse server by @gogingersnap777 in https://github.com/ClickHouse/clickhouse-go/pull/1315\r\n* Batch: impl `Columns() []column.Interface` method by @egsam98 in https://github.com/ClickHouse/clickhouse-go/pull/1277\r\n### Fixes üêõ\r\n* Fix rows.Close do not return too early by @yujiarista in https://github.com/ClickHouse/clickhouse-go/pull/1314\r\n* Setting `X-Clickhouse-SSL-Certificate-Auth` header correctly given `X-ClickHouse-Key` by @gogingersnap777 in https://github.com/ClickHouse/clickhouse-go/pull/1316\r\n* Retry on network errors and fix retries on async inserts with `database/sql` interface by @tommyzli in https://github.com/ClickHouse/clickhouse-go/pull/1330\r\n* BatchInsert parentheses issue fix by @ramzes642 in https://github.com/ClickHouse/clickhouse-go/pull/1327\r\n### Other Changes üõ†\r\n* ClickHouse 24.5 by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1319\r\n* Align `allow_suspicious_low_cardinality_types` and `allow_suspicious_low_cardinality_types ` settings in tests due to ClickHouse Cloud incompatibility by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1331\r\n* Use HTTPs scheme in std connection failover tests by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1332\r\n\r\n## New Contributors\r\n* @larry-cdn77 made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1313\r\n* @vespian made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1317\r\n* @gogingersnap777 made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1315\r\n* @yujiarista made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1314\r\n* @egsam98 made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1277\r\n* @tommyzli made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1330\r\n* @ramzes642 made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1327\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.25.0...v2.26.0\r\n\r\n# v2.25.0, 2024-05-28 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Breaking Changes üö®\r\n* Add a compatibility layer for a database/sql driver to work with sql.NullString and ClickHouse nullable column by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1306\r\n### Other Changes üõ†\r\n* Use Go 1.22 in head tests by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1305\r\n* Skip flaky 1127 test by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1307\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.24.0...v2.25.0\r\n\r\n# v2.24.0, 2024-05-08 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Always compress responses when the client compression is on by @zhkvia in https://github.com/ClickHouse/clickhouse-go/pull/1286\r\n* Optional flag to close query with flush by @hongker in https://github.com/ClickHouse/clickhouse-go/pull/1276\r\n### Fixes üêõ\r\n* Fix prepare batch does not break on `values` substring in table name by @Wang in https://github.com/ClickHouse/clickhouse-go/pull/1290\r\n* Fix nil checks when appending slices of pointers by @markandrus in https://github.com/ClickHouse/clickhouse-go/pull/1283\r\n### Other Changes üõ†\r\n* Don't recreate keys from LC columns from direct stream by @genzgd in https://github.com/ClickHouse/clickhouse-go/pull/1291\r\n\r\n## New Contributors\r\n* @zhkvia made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1286\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.23.2...v2.24.0\r\n\r\n# v2.23.2, 2024-04-25 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Fixed panic on concurrent context key map write by @Wang in https://github.com/ClickHouse/clickhouse-go/pull/1284\r\n### Other Changes üõ†\r\n* Fix ClickHouse Terraform provider version by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1285\r\n\r\n## New Contributors\r\n* @Wang made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1284\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.23.1...v2.23.2\r\n\r\n# v2.23.1, 2024-04-15 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Zero-value timestamp to be formatted as toDateTime(0) in bind by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1260\r\n### Other Changes üõ†\r\n* Update #1127 test case to reproduce a progress handle when exception is thrown by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1259\r\n* Set max parallel for GH jobs by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1261\r\n* Ensure test container termination by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1274\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.23.0...v2.23.1\r\n\r\n# v2.23.0, 2024-03-27 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Implement `ConnBeginTx` as replacement for deprecated `Begin` by @FelipeLema in https://github.com/ClickHouse/clickhouse-go/pull/1255\r\n### Other Changes üõ†\r\n* Align error message assertion to new missing custom setting error formatting by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1256\r\n* CI chores by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1258\r\n\r\n## New Contributors\r\n* @FelipeLema made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1255\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.22.4...v2.23.0\r\n\r\n# v2.22.4, 2024-03-25 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Fix column name with parantheses handle in prepare batch by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1252\r\n### Other Changes üõ†\r\n* Fix TestBatchAppendRows work different on cloud by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1251\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.22.3...v2.22.4\r\n\r\n# v2.22.3, 2024-03-25 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Fix panic on tuple scan on []any by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1249\r\n### Other Changes üõ†\r\n* Error channel deadlock fix test case by @threadedstream in https://github.com/ClickHouse/clickhouse-go/pull/1239\r\n* Add a test case for #1127 by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1242\r\n* Run cloud/head jobs when label by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1250\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.22.2...v2.22.3\r\n\r\n# v2.22.2, 2024-03-18 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Fix for Map columns with Enums by @leklund in https://github.com/ClickHouse/clickhouse-go/pull/1236\r\n\r\n## New Contributors\r\n* @leklund made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1236\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.22.1...v2.22.2\r\n\r\n# v2.22.1, 2024-03-18 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Make errors channel buffered inside query()  by @threadedstream in https://github.com/ClickHouse/clickhouse-go/pull/1237\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.22.0...v2.22.1\r\n\r\n# v2.20.0, 2024-02-28 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Support [n]byte/[]byte type Scan/Append to FixedString column by @rogeryk in https://github.com/ClickHouse/clickhouse-go/pull/1205\r\n### Other Changes üõ†\r\n* Enable cloud tests by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1202\r\n* Removed LowCardinality(UInt64) tests that caused allow_suspicious_low_cardinality_types related error by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1206\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.19.0...v2.20.0\r\n\r\n# v2.19.0, 2024-02-26 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* handle ctx.Done() in acquire by @threadedstream in https://github.com/ClickHouse/clickhouse-go/pull/1199\r\n### Fixes üêõ\r\n* Fix panic on format nil *fmt.Stringer type value by @zaneli in https://github.com/ClickHouse/clickhouse-go/pull/1200\r\n### Other Changes üõ†\r\n* Update Go/ClickHouse versions by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1201\r\n\r\n## New Contributors\r\n* @threadedstream made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1199\r\n* @zaneli made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1200\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.18.0...v2.19.0\r\n\r\n# v2.18.0, 2024-02-01 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Add WithAllocBufferColStrProvider string column allocator for batch insert performance boost by @hongker in https://github.com/ClickHouse/clickhouse-go/pull/1181\r\n### Fixes üêõ\r\n* Fix bind for seconds scale DateTime by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1184\r\n### Other Changes üõ†\r\n* resolves #1163 debugF function is not respected by @omurbekjk in https://github.com/ClickHouse/clickhouse-go/pull/1166\r\n\r\n## New Contributors\r\n* @omurbekjk made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1166\r\n* @hongker made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1181\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.17.1...v2.18.0\r\n\r\n# v2.17.1, 2023-12-27 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* fix panic in contextWatchDog nil pointer check by @nityanandagohain in https://github.com/ClickHouse/clickhouse-go/pull/1168\r\n\r\n## New Contributors\r\n* @nityanandagohain made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1168\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.17.0...v2.17.1\r\n\r\n# v2.17.0, 2023-12-21 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Iterable ordered map alternative with improved performance by @hanjm in https://github.com/ClickHouse/clickhouse-go/pull/1152\r\n* Support bool alias type by @yogasw in https://github.com/ClickHouse/clickhouse-go/pull/1156\r\n### Fixes üêõ\r\n* Update README - mention HTTP protocol usable only with `database/sql` interface by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1160\r\n* Fix README example for Debugf by @aramperes in https://github.com/ClickHouse/clickhouse-go/pull/1153\r\n\r\n## New Contributors\r\n* @yogasw made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1156\r\n* @aramperes made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1153\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.16.0...v2.17.0\r\n\r\n# v2.16.0, 2023-12-01 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Add sql.Valuer support for all types by @deankarn in https://github.com/ClickHouse/clickhouse-go/pull/1144\r\n### Fixes üêõ\r\n* Fix DateTime64 range to actual supported range per ClickHouse documentation by @phil-schreiber in https://github.com/ClickHouse/clickhouse-go/pull/1148\r\n\r\n## New Contributors\r\n* @phil-schreiber made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1148\r\n* @deankarn made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1144\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.15.0...v2.16.0\r\n\r\n# v2.14.3, 2023-10-12 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Fix insertion of empty map into JSON column by using _dummy subcolumn by @leodido in https://github.com/ClickHouse/clickhouse-go/pull/1116\r\n### Other Changes üõ†\r\n* chore: specify method field on compression in example by @rdaniels6813 in https://github.com/ClickHouse/clickhouse-go/pull/1111\r\n* chore: remove extra error checks by @rutaka-n in https://github.com/ClickHouse/clickhouse-go/pull/1095\r\n\r\n## New Contributors\r\n* @leodido made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1116\r\n* @rdaniels6813 made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1111\r\n* @rutaka-n made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1095\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.14.2...v2.14.3\r\n\r\n# v2.14.2, 2023-10-04 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Fix: Block stream read process would be terminated by empty block with zero rows by @crisismaple in https://github.com/ClickHouse/clickhouse-go/pull/1104\r\n* Free compressor's buffer when FreeBufOnConnRelease enabled by @cergxx in https://github.com/ClickHouse/clickhouse-go/pull/1100\r\n* Fix truncate ` for HTTP adapter by @beck917 in https://github.com/ClickHouse/clickhouse-go/pull/1103\r\n### Other Changes üõ†\r\n* docs: update readme.md by @rfyiamcool in https://github.com/ClickHouse/clickhouse-go/pull/1068\r\n* Remove dependency on github.com/satori/go.uuid by @srikanthccv in https://github.com/ClickHouse/clickhouse-go/pull/1085\r\n\r\n## New Contributors\r\n* @rfyiamcool made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1068\r\n* @beck917 made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1103\r\n* @srikanthccv made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1085\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.14.1...v2.14.2\r\n\r\n# v2.14.1, 2023-09-14 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* parseDSN: support connection pool settings (#1082) by @hanjm in https://github.com/ClickHouse/clickhouse-go/pull/1084\r\n\r\n## New Contributors\r\n* @hanjm made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1084\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.14.0...v2.14.1\r\n\r\n# v2.14.0, 2023-09-12 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Add FreeBufOnConnRelease to clickhouse.Options by @cergxx in https://github.com/ClickHouse/clickhouse-go/pull/1091\r\n* Improving object allocation for (positional) parameter binding by @mdonkers in https://github.com/ClickHouse/clickhouse-go/pull/1092\r\n### Fixes üêõ\r\n* Fix escaping double quote in SQL statement in prepare batch by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1083\r\n### Other Changes üõ†\r\n* Update Go & ClickHouse versions by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1079\r\n* Return status code from any http error by @RoryCrispin in https://github.com/ClickHouse/clickhouse-go/pull/1090\r\n* tests: fix dropped error by @alrs in https://github.com/ClickHouse/clickhouse-go/pull/1081\r\n* chore: unnecessary use of fmt.Sprintf by @testwill in https://github.com/ClickHouse/clickhouse-go/pull/1080\r\n* Run CI on self hosted runner by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1094\r\n\r\n## New Contributors\r\n* @cergxx made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1091\r\n* @alrs made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1081\r\n* @testwill made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1080\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.13.4...v2.14\r\n\r\n# v2.13.4, 2023-08-30 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* fix(proto): add TCP protocol version in query packet by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1077\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.13.3...v2.13.4\r\n\r\n# v2.13.3, 2023-08-23 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* fix(column.json): fix bool type handling by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1073\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.13.2...v2.13.3\r\n\r\n# v2.13.2, 2023-08-18 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* fix: update ch-go to remove string length limit by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1071\r\n### Other Changes üõ†\r\n* Test against latest and head CH by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1060\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.13.1...v2.13.2\r\n\r\n# v2.13.1, 2023-08-17 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* fix: native format Date32 representation by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1069\r\n\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.13.0...v2.13.1\r\n\r\n# v2.13.0, 2023-08-10 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Support scan from uint8 to bool by @ValManP in https://github.com/ClickHouse/clickhouse-go/pull/1051\r\n* Binding arguments for AsyncInsert interface by @mdonkers in https://github.com/ClickHouse/clickhouse-go/pull/1052\r\n* Batch rows count API by @EpicStep in https://github.com/ClickHouse/clickhouse-go/pull/1063\r\n* Implement release connection in batch by @EpicStep in https://github.com/ClickHouse/clickhouse-go/pull/1062\r\n### Other Changes üõ†\r\n* Restore test against CH 23.7 by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1059\r\n\r\n## New Contributors\r\n* @ValManP made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1051\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.12.1...v2.13.0\r\n\r\n# v2.12.1, 2023-08-02 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Fix InsertAsync typo in docs  by @et in https://github.com/ClickHouse/clickhouse-go/pull/1044\r\n* Fix panic and releasing in batch column by @EpicStep in https://github.com/ClickHouse/clickhouse-go/pull/1055\r\n* Docs/changelog fixes by @jmaicher in https://github.com/ClickHouse/clickhouse-go/pull/1046\r\n* Clarify error message re custom serializaion support by @RoryCrispin in https://github.com/ClickHouse/clickhouse-go/pull/1056\r\n* Fix send query on batch retry by @EpicStep in https://github.com/ClickHouse/clickhouse-go/pull/1045\r\n### Other Changes üõ†\r\n* Update ClickHouse versions by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1054\r\n\r\n## New Contributors\r\n* @et made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1044\r\n* @EpicStep made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1055\r\n* @jmaicher made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1046\r\n* @RoryCrispin made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1056\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.12.0...v2.12.1\r\n\r\n# v2.12.0, 2023-07-27 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Implement elapsed time in query progress by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1039\r\n### Fixes üêõ\r\n* Release connection slot on connection acquire timeout by @sentanos in https://github.com/ClickHouse/clickhouse-go/pull/1042\r\n\r\n## New Contributors\r\n* @sentanos made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1042\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.11.0...v2.12.0\r\n\r\n# v2.11.0, 2023-07-20 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Retry for batch API by @djosephsen in https://github.com/ClickHouse/clickhouse-go/pull/941\r\n### Fixes üêõ\r\n* Fix startAutoCloseIdleConnections cause goroutine leak by @YenchangChan in https://github.com/ClickHouse/clickhouse-go/pull/1011\r\n* Fix netip.Addr pointer panic by @anjmao in https://github.com/ClickHouse/clickhouse-go/pull/1029\r\n### Other Changes üõ†\r\n* Git actions terraform by @gingerwizard in https://github.com/ClickHouse/clickhouse-go/pull/1023\r\n\r\n## New Contributors\r\n* @YenchangChan made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1011\r\n* @djosephsen made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/941\r\n* @anjmao made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1029\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.10.1...v2.11.0\r\n\r\n# v2.10.1, 2023-06-06 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Other Changes üõ†\r\n* Update outdated README.md by @kokizzu in https://github.com/ClickHouse/clickhouse-go/pull/1006\r\n* Remove incorrect usage of KeepAlive in DialContext by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/1009\r\n\r\n## New Contributors\r\n* @kokizzu made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/1006\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.10.0...v2.10.1\r\n\r\n# v2.10.0, 2023-05-17 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Support [16]byte/[]byte typed scan/append for IPv6 column by @crisismaple in https://github.com/ClickHouse/clickhouse-go/pull/996\r\n* Add custom dialer option to http protocol by @stephaniehingtgen in https://github.com/ClickHouse/clickhouse-go/pull/998\r\n### Fixes üêõ\r\n* Tuple scan respects both value and pointer variable by @crisismaple in https://github.com/ClickHouse/clickhouse-go/pull/971\r\n* Auto close idle connections in native protocol in respect of ConnMaxLifetime option by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/999\r\n\r\n## New Contributors\r\n* @stephaniehingtgen made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/998\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.9.3...v2.10.0\r\n\r\n# v2.9.2, 2023-05-08 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Fixes üêõ\r\n* Pass http.ProxyFromEnvironment configuration to http.Transport by @slvrtrn in https://github.com/ClickHouse/clickhouse-go/pull/987\r\n### Other Changes üõ†\r\n* Use `any` instead of `interface{}` by @candiduslynx in https://github.com/ClickHouse/clickhouse-go/pull/984\r\n\r\n## New Contributors\r\n* @candiduslynx made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/984\r\n* @slvrtrn made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/987\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.9.1...v2.9.2\r\n\r\n# v2.9.1, 2023-04-24 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* Do not return hard error on unparsable version in HTTP proto by @hexchain in https://github.com/ClickHouse/clickhouse-go/pull/975\r\n### Fixes üêõ\r\n* Return ErrBadConn in stdDriver Prepare if connection is broken by @czubocha in https://github.com/ClickHouse/clickhouse-go/pull/977\r\n\r\n## New Contributors\r\n* @czubocha made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/977\r\n* @hexchain made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/975\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.9.0...v2.9.1\r\n\r\n# v2.9.0, 2023-04-13 <!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n## What's Changed\r\n### Enhancements üéâ\r\n* External tables support for HTTP protocol by @crisismaple in https://github.com/ClickHouse/clickhouse-go/pull/942\r\n* Support driver.Valuer in String and FixedString columns by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/946\r\n* Support boolean and pointer type parameter binding by @crisismaple in https://github.com/ClickHouse/clickhouse-go/pull/963\r\n* Support insert/scan IPv4 using UInt32/*UInt32 types by @crisismaple in https://github.com/ClickHouse/clickhouse-go/pull/966\r\n### Fixes üêõ\r\n* Reset the pointer to the nullable field by @xiaochaoren1 in https://github.com/ClickHouse/clickhouse-go/pull/964\r\n* Enable to use ternary operator with named arguments by @crisismaple in https://github.com/ClickHouse/clickhouse-go/pull/965\r\n### Other Changes üõ†\r\n* chore: explain async insert in docs by @jkaflik in https://github.com/ClickHouse/clickhouse-go/pull/969\r\n\r\n## New Contributors\r\n* @xiaochaoren1 made their first contribution in https://github.com/ClickHouse/clickhouse-go/pull/964\r\n\r\n**Full Changelog**: https://github.com/ClickHouse/clickhouse-go/compare/v2.8.3...v2.9.0\r\n\r\n## 2.8.3, 2023-04-03\r\n\r\n### Bug fixes\r\n\r\n- Revert: Expire idle connections no longer acquired during lifetime [#958](https://github.com/ClickHouse/clickhouse-go/pull/958) by @jkaflik\r\n\r\n## 2.8.2, 2023-03-31\r\n\r\n### Bug fixes\r\n\r\n- Expire idle connections no longer acquired during lifetime [#945](https://github.com/ClickHouse/clickhouse-go/pull/945) by @jkaflik\r\n\r\n## 2.8.1, 2023-03-29\r\n\r\n### Bug fixes\r\n\r\n- Fix idle connection check for TLS connections [#951](https://github.com/ClickHouse/clickhouse-go/pull/951) by @jkaflik & @alekar\r\n\r\n## 2.8.0, 2023-03-27\r\n\r\n### New features\r\n\r\n- Support customized \"url path\" in http connection [#938](https://github.com/ClickHouse/clickhouse-go/pull/938) by @crisismaple\r\n- Allow Auth.Database option to be empty [#926](https://github.com/ClickHouse/clickhouse-go/pull/938) by @v4run\r\n\r\n### Chores\r\n\r\n- Bump github.com/stretchr/testify from 1.8.1 to 1.8.2 [#933](https://github.com/ClickHouse/clickhouse-go/pull/933)\r\n- fix: small typo in the text of an error [#936](https://github.com/ClickHouse/clickhouse-go/pull/936) by @lspgn\r\n- Improved bug template [#916](https://github.com/ClickHouse/clickhouse-go/pull/916) by @mshustov\r\n\r\n## 2.7.0, 2023-03-08\r\n\r\n### New features\r\n\r\n- Date type with user location [#923](https://github.com/ClickHouse/clickhouse-go/pull/923) by @jkaflik\r\n- Add AppendRow function to BatchColumn [#927](https://github.com/ClickHouse/clickhouse-go/pull/927) by @pikot\r\n\r\n### Bug fixes\r\n\r\n- fix: fix connect.compression's format verb [#924](https://github.com/ClickHouse/clickhouse-go/pull/924) by @mind1949\r\n- Add extra padding for strings shorter than FixedColumn length [#910](https://github.com/ClickHouse/clickhouse-go/pull/910) by @jkaflik\r\n\r\n### Chore\r\n\r\n- Bump github.com/andybalholm/brotli from 1.0.4 to 1.0.5 [#911](https://github.com/ClickHouse/clickhouse-go/pull/911)\r\n- Bump github.com/paulmach/orb from 0.8.0 to 0.9.0 [#912](https://github.com/ClickHouse/clickhouse-go/pull/912)\r\n- Bump golang.org/x/net from 0.0.0-20220722155237-a158d28d115b to 0.7.0 [#928](https://github.com/ClickHouse/clickhouse-go/pull/928)\r\n\r\n## 2.6.5, 2023-02-28\r\n\r\n### Bug fixes\r\n\r\n- Fix array parameter formatting in binding mechanism [#921](https://github.com/ClickHouse/clickhouse-go/pull/921) by @genzgd\r\n\r\n## 2.6.4, 2023-02-23\r\n\r\n### Bug fixes\r\n\r\n- Fixed concurrency issue in stdConnOpener [#918](https://github.com/ClickHouse/clickhouse-go/pull/918) by @jkaflik\r\n\r\n## 2.6.3, 2023-02-22\r\n\r\n### Bug fixes\r\n\r\n- Fixed `lib/binary/string_safe.go` for non 64bit arch [#914](https://github.com/ClickHouse/clickhouse-go/pull/914) by @atoulme\r\n \r\n## 2.6.2, 2023-02-20\r\n\r\n### Bug fixes\r\n\r\n- Fix decimal encoding with non-standard exponential representation [#909](https://github.com/ClickHouse/clickhouse-go/pull/909) by @vogrelord\r\n- Add extra padding for strings shorter than FixedColumn length [#910](https://github.com/ClickHouse/clickhouse-go/pull/910) by @jkaflik\r\n\r\n### Chore\r\n\r\n- Remove Yandex ClickHouse image from Makefile [#895](https://github.com/ClickHouse/clickhouse-go/pull/895) by @alexey-milovidov\r\n- Remove duplicate of error handling [#898](https://github.com/ClickHouse/clickhouse-go/pull/898) by @Astemirdum\r\n- Bump github.com/ClickHouse/ch-go from 0.51.2 to 0.52.1 [#901](https://github.com/ClickHouse/clickhouse-go/pull/901)\r\n\r\n## 2.6.1, 2023-02-13\r\n\r\n### Bug fixes\r\n\r\n- Do not reuse expired connections (`ConnMaxLifetime`) [#892](https://github.com/ClickHouse/clickhouse-go/pull/892) by @iamluc\r\n- Extend default dial timeout value to 30s [#893](https://github.com/ClickHouse/clickhouse-go/pull/893) by @jkaflik\r\n- Compression name fixed in sendQuery log  [#884](https://github.com/ClickHouse/clickhouse-go/pull/884) by @fredngr\r\n\r\n## 2.6.0, 2023-01-27\r\n\r\n### New features\r\n\r\n- Client info specification implementation [#876](https://github.com/ClickHouse/clickhouse-go/pull/876) by @jkaflik\r\n\r\n### Bug fixes\r\n\r\n- Better handling for broken connection errors in the std interface [#879](https://github.com/ClickHouse/clickhouse-go/pull/879) by @n-oden\r\n\r\n### Chore\r\n\r\n- Document way to provide table or database identifier with query parameters [#875](https://github.com/ClickHouse/clickhouse-go/pull/875) by @jkaflik\r\n- Bump github.com/ClickHouse/ch-go from 0.51.0 to 0.51.2 [#881](https://github.com/ClickHouse/clickhouse-go/pull/881)\r\n\r\n## 2.5.1, 2023-01-10\r\n\r\n### Bug fixes\r\n\r\n- Flag connection as closed on broken pipe [#871](https://github.com/ClickHouse/clickhouse-go/pull/871) by @n-oden\r\n\r\n## 2.5.0, 2023-01-10\r\n\r\n### New features\r\n\r\n- Buffered compression column by column for a native protocol. Introduces the `MaxCompressionBuffer` option - max size (bytes) of compression buffer during column-by-column compression (default 10MiB) [#808](https://github.com/ClickHouse/clickhouse-go/pull/808) by @gingerwizard and @jkaflik\r\n- Support custom types that implement `sql.Scanner` interface (e.g. `type customString string`) [#850](https://github.com/ClickHouse/clickhouse-go/pull/850) by @DarkDrim\r\n- Append query options to the context instead of overwriting [#860](https://github.com/ClickHouse/clickhouse-go/pull/860) by @aaron276h\r\n- Query parameters support [#854](https://github.com/ClickHouse/clickhouse-go/pull/854) by @jkaflik\r\n- Expose `DialStrategy` function to the user for custom connection routing. [#855](https://github.com/ClickHouse/clickhouse-go/pull/855) by @jkaflik\r\n\r\n### Bug fixes\r\n\r\n- Close connection on `Cancel`. This is to make sure context timed out/canceled connection is not reused further [#764](https://github.com/ClickHouse/clickhouse-go/pull/764) by @gingerwizard\r\n- Fully parse `secure` and `skip_verify` in DSN query parameters. [#862](https://github.com/ClickHouse/clickhouse-go/pull/862) by @n-oden\r\n\r\n### Chore\r\n\r\n- Added tests covering read-only user queries [#837](https://github.com/ClickHouse/clickhouse-go/pull/837) by @jkaflik\r\n- Agreed on a batch append fail semantics [#853](https://github.com/ClickHouse/clickhouse-go/pull/853) by @jkaflik\r\n\r\n## 2.4.3, 2022-11-30\r\n### Bug Fixes\r\n* Fix in batch concurrency - batch could panic if used in separate go routines. <br/>\r\nThe issue was originally detected due to the use of a batch in a go routine and Abort being called after the connection was released on the batch. This would invalidate the connection which had been subsequently reassigned. <br/>\r\nThis issue could occur as soon as the conn is released (this can happen in a number of places e.g. after Send or an Append error), and it potentially returns to the pool for use in another go routine. Subsequent releases could then occur e.g., the user calls Abort mainly but also Send would do it. The result is the connection being closed in the release function while another batch or query potentially used it. <br/>\r\nThis release includes a guard to prevent release from being called more than once on a batch. It assumes that batches are not thread-safe - they aren't (only connections are).\r\n## 2.4.2, 2022-11-24\r\n### Bug Fixes\r\n- Don't panic on `Send()` on batch after invalid `Append`. [#830](https://github.com/ClickHouse/clickhouse-go/pull/830)\r\n- Fix JSON issue with `nil` if column order is inconsistent. [#824](https://github.com/ClickHouse/clickhouse-go/pull/824)\r\n\r\n## 2.4.1, 2022-11-23\r\n### Bug Fixes\r\n- Patch release to fix \"Regression - escape character was not considered when comparing column names\". [#828](https://github.com/ClickHouse/clickhouse-go/issues/828)\r\n\r\n## 2.4.0, 2022-11-22\r\n### New Features\r\n- Support for Nullables in Tuples. [#821](https://github.com/ClickHouse/clickhouse-go/pull/821) [#817](https://github.com/ClickHouse/clickhouse-go/pull/817)\r\n- Use headers for auth and not url if SSL. [#811](https://github.com/ClickHouse/clickhouse-go/pull/811)\r\n- Support additional headers. [#811](https://github.com/ClickHouse/clickhouse-go/pull/811)\r\n- Support int64 for DateTime. [#807](https://github.com/ClickHouse/clickhouse-go/pull/807)\r\n- Support inserting Enums as int8/int16/int. [#802](https://github.com/ClickHouse/clickhouse-go/pull/802)\r\n- Print error if unsupported server. [#792](https://github.com/ClickHouse/clickhouse-go/pull/792)\r\n- Allow block buffer size to tuned for performance - see `BlockBufferSize`. [#776](https://github.com/ClickHouse/clickhouse-go/pull/776)\r\n- Support custom datetime in Scan. [#767](https://github.com/ClickHouse/clickhouse-go/pull/767)\r\n- Support insertion of an orderedmap. [#763](https://github.com/ClickHouse/clickhouse-go/pull/763)\r\n\r\n### Bug Fixes\r\n- Decompress errors over HTTP. [#792](https://github.com/ClickHouse/clickhouse-go/pull/792)\r\n- Use `timezone` vs `timeZone` so we work on older versions. [#781](https://github.com/ClickHouse/clickhouse-go/pull/781)\r\n- Ensure only columns specified in INSERT are required in batch. [#790](https://github.com/ClickHouse/clickhouse-go/pull/790)\r\n- Respect order of columns in insert for batch. [#790](https://github.com/ClickHouse/clickhouse-go/pull/790)\r\n- Handle double pointers for Nullable columns when batch inserting. [#774](https://github.com/ClickHouse/clickhouse-go/pull/774)\r\n- Use nil for `LowCardinality(Nullable(X))`. [#768](https://github.com/ClickHouse/clickhouse-go/pull/768)\r\n\r\n### Breaking Changes\r\n- Align timezone handling with spec. [#776](https://github.com/ClickHouse/clickhouse-go/pull/766), specifically:\r\n    - If parsing strings for datetime, datetime64 or dates we assume the locale is Local (i.e. the client) if not specified in the string.\r\n    - The server (or column tz) is used for datetime and datetime64 rendering. For date/date32, these have no tz info in the server. For now, they will be rendered as UTC - consistent with the clickhouse-client\r\n    - Addresses bind when no location is set\r\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.1220703125,
          "content": "# Contributing notes\n\n## Local setup\n\nThe easiest way to run tests is to use Docker Compose:\n\n```\ndocker-compose up\nmake\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1220703125,
          "content": "Copyright 2016-2023 ClickHouse, Inc.\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2016-2023 ClickHouse, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.818359375,
          "content": "CLICKHOUSE_VERSION ?= latest\nCLICKHOUSE_TEST_TIMEOUT ?= 240s\nCLICKHOUSE_QUORUM_INSERT ?= 1\n\nup:\n\t@docker compose up -d\ndown:\n\t@docker compose down\n\ncli:\n\tdocker run -it --rm --net clickhouse-go_clickhouse --link clickhouse:clickhouse-server --host clickhouse-server\n\ntest:\n\t@go install -race -v\n\t@CLICKHOUSE_VERSION=$(CLICKHOUSE_VERSION) CLICKHOUSE_QUORUM_INSERT=$(CLICKHOUSE_QUORUM_INSERT) go test -race -timeout $(CLICKHOUSE_TEST_TIMEOUT) -count=1 -v ./...\n\nlint:\n\tgolangci-lint run || :\n\ncontributors:\n\t@git log --pretty=\"%an <%ae>%n%cn <%ce>\" | sort -u -t '<' -k 2,2 | LC_ALL=C sort | \\\n\t\tgrep -v \"users.noreply.github.com\\|GitHub <noreply@github.com>\" \\\n\t\t> contributors/list\n\nstaticcheck:\n\tstaticcheck ./...\n\ncodegen: contributors\n\t@go run lib/column/codegen/main.go\n\t@go-licenser -licensor \"ClickHouse, Inc.\"\n\n.PHONY: contributors\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.056640625,
          "content": "# ClickHouse [![run-tests](https://github.com/ClickHouse/clickhouse-go/actions/workflows/run-tests.yml/badge.svg?branch=v2)](https://github.com/ClickHouse/clickhouse-go/actions/workflows/run-tests.yml) [![Go Reference](https://pkg.go.dev/badge/github.com/ClickHouse/clickhouse-go/v2.svg)](https://pkg.go.dev/github.com/ClickHouse/clickhouse-go/v2)\n\nGolang SQL database client for [ClickHouse](https://clickhouse.com/).\n\n## Key features\n\n* Uses ClickHouse native format for optimal performance. Utilises low level [ch-go](https://github.com/ClickHouse/ch-go) client for encoding/decoding and compression (versions >= 2.3.0).\n* Supports native ClickHouse TCP client-server protocol\n* Compatibility with [`database/sql`](#std-databasesql-interface) ([slower](#benchmark) than [native interface](#native-interface)!)\n* [`database/sql`](#std-databasesql-interface) supports http protocol for transport. (Experimental)\n* Marshal rows into structs ([ScanStruct](examples/clickhouse_api/scan_struct.go), [Select](examples/clickhouse_api/select_struct.go))\n* Unmarshal struct to row ([AppendStruct](benchmark/v2/write-native-struct/main.go))\n* Connection pool\n* Failover and load balancing\n* [Bulk write support](examples/clickhouse_api/batch.go) (for `database/sql` [use](examples/std/batch.go) `begin->prepare->(in loop exec)->commit`)\n* [PrepareBatch options](#preparebatch-options)\n* [AsyncInsert](benchmark/v2/write-async/main.go) (more details in [Async insert](#async-insert) section)\n* Named and numeric placeholders support\n* LZ4/ZSTD compression support\n* External data\n* [Query parameters](examples/std/query_parameters.go)\n\nSupport for the ClickHouse protocol advanced features using `Context`:\n\n* Query ID\n* Quota Key\n* Settings\n* [Query parameters](examples/clickhouse_api/query_parameters.go)\n* OpenTelemetry\n* Execution events:\n\t* Logs\n\t* Progress\n\t* Profile info\n\t* Profile events\n\n\n## Supported ClickHouse Versions\n\nThe client is tested against the currently [supported versions](https://github.com/ClickHouse/ClickHouse/blob/master/SECURITY.md) of ClickHouse\n\n## Supported Golang Versions\n\n| Client Version | Golang Versions  |\n|----------------|------------------|\n| => 2.0 <= 2.2  | 1.17, 1.18       |\n| >= 2.3         | 1.18.4+, 1.19    |\n| >= 2.14        | 1.20, 1.21       |\n| >= 2.19        | 1.21, 1.22       |\n| >= 2.28        | 1.22, 1.23       |\n| >= 2.29        | 1.21, 1.22, 1.23 |\n\n## Documentation\n\n[https://clickhouse.com/docs/en/integrations/go](https://clickhouse.com/docs/en/integrations/go)\n\n# `clickhouse` interface (formally `native` interface)\n\n```go\n\tconn, err := clickhouse.Open(&clickhouse.Options{\n\t\tAddr: []string{\"127.0.0.1:9000\"},\n\t\tAuth: clickhouse.Auth{\n\t\t\tDatabase: \"default\",\n\t\t\tUsername: \"default\",\n\t\t\tPassword: \"\",\n\t\t},\n\t\tDialContext: func(ctx context.Context, addr string) (net.Conn, error) {\n\t\t\tdialCount++\n\t\t\tvar d net.Dialer\n\t\t\treturn d.DialContext(ctx, \"tcp\", addr)\n\t\t},\n\t\tDebug: true,\n\t\tDebugf: func(format string, v ...any) {\n\t\t\tfmt.Printf(format+\"\\n\", v...)\n\t\t},\n\t\tSettings: clickhouse.Settings{\n\t\t\t\"max_execution_time\": 60,\n\t\t},\n\t\tCompression: &clickhouse.Compression{\n\t\t\tMethod: clickhouse.CompressionLZ4,\n\t\t},\n\t\tDialTimeout:      time.Second * 30,\n\t\tMaxOpenConns:     5,\n\t\tMaxIdleConns:     5,\n\t\tConnMaxLifetime:  time.Duration(10) * time.Minute,\n\t\tConnOpenStrategy: clickhouse.ConnOpenInOrder,\n\t\tBlockBufferSize: 10,\n\t\tMaxCompressionBuffer: 10240,\n\t\tClientInfo: clickhouse.ClientInfo{ // optional, please see Client info section in the README.md\n\t\t\tProducts: []struct {\n\t\t\t\tName    string\n\t\t\t\tVersion string\n\t\t\t}{\n\t\t\t\t{Name: \"my-app\", Version: \"0.1\"},\n\t\t\t},\n\t\t},\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn conn.Ping(context.Background())\n```\n\n# `database/sql` interface\n\n## OpenDB\n\n```go\nconn := clickhouse.OpenDB(&clickhouse.Options{\n\tAddr: []string{\"127.0.0.1:9999\"},\n\tAuth: clickhouse.Auth{\n\t\tDatabase: \"default\",\n\t\tUsername: \"default\",\n\t\tPassword: \"\",\n\t},\n\tTLS: &tls.Config{\n\t\tInsecureSkipVerify: true,\n\t},\n\tSettings: clickhouse.Settings{\n\t\t\"max_execution_time\": 60,\n\t},\n\tDialTimeout: time.Second * 30,\n\tCompression: &clickhouse.Compression{\n\t\tMethod: clickhouse.CompressionLZ4,\n\t},\n\tDebug: true,\n\tBlockBufferSize: 10,\n\tMaxCompressionBuffer: 10240,\n\tClientInfo: clickhouse.ClientInfo{ // optional, please see Client info section in the README.md\n\t\tProducts: []struct {\n\t\t\tName    string\n\t\t\tVersion string\n\t\t}{\n\t\t\t{Name: \"my-app\", Version: \"0.1\"},\n\t\t},\n\t},\n})\nconn.SetMaxIdleConns(5)\nconn.SetMaxOpenConns(10)\nconn.SetConnMaxLifetime(time.Hour)\n```\n\n## DSN\n\n* hosts  - comma-separated list of single address hosts for load-balancing and failover\n* username/password - auth credentials\n* database - select the current default database\n* dial_timeout -  a duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix such as \"300ms\", \"1s\". Valid time units are \"ms\", \"s\", \"m\". (default 30s)\n* connection_open_strategy - random/round_robin/in_order (default in_order).\n    * random      - choose random server from the set\n    * round_robin - choose a round-robin server from the set\n    * in_order    - first live server is chosen in specified order\n* debug - enable debug output (boolean value)\n* compress - compress - specify the compression algorithm - ‚Äúnone‚Äù (default), `zstd`, `lz4`, `gzip`, `deflate`, `br`. If set to `true`, `lz4` will be used.\n* compress_level - Level of compression (default is 0). This is algorithm specific:\n  - `gzip` - `-2` (Best Speed) to `9` (Best Compression)\n  - `deflate` - `-2` (Best Speed) to `9` (Best Compression)\n  - `br` - `0` (Best Speed) to `11` (Best Compression)\n  - `zstd`, `lz4` - ignored\n* block_buffer_size - size of block buffer (default 2)\n* read_timeout - a duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix such as \"300ms\", \"1s\". Valid time units are \"ms\", \"s\", \"m\" (default 5m).\n* max_compression_buffer - max size (bytes) of compression buffer during column by column compression (default 10MiB)\n* client_info_product - optional list (comma separated) of product name and version pair separated with `/`. This value will be pass a part of client info. e.g. `client_info_product=my_app/1.0,my_module/0.1` More details in [Client info](#client-info) section.\n* http_proxy - HTTP proxy address\n\nSSL/TLS parameters:\n\n* secure - establish secure connection (default is false)\n* skip_verify - skip certificate verification (default is false)\n\nExample:\n\n```sh\nclickhouse://username:password@host1:9000,host2:9000/database?dial_timeout=200ms&max_execution_time=60\n```\n\n### HTTP Support (Experimental)\n\n**Note**: using HTTP protocol is possible only with `database/sql` interface.\n\nThe native format can be used over the HTTP protocol. This is useful in scenarios where users need to proxy traffic e.g. using [ChProxy](https://www.chproxy.org/) or via load balancers.\n\nThis can be achieved by modifying the DSN to specify the HTTP protocol.\n\n```sh\nhttp://host1:8123,host2:8123/database?dial_timeout=200ms&max_execution_time=60\n```\n\nAlternatively, use `OpenDB` and specify the interface type.\n\n```go\nconn := clickhouse.OpenDB(&clickhouse.Options{\n\tAddr: []string{\"127.0.0.1:8123\"},\n\tAuth: clickhouse.Auth{\n\t\tDatabase: \"default\",\n\t\tUsername: \"default\",\n\t\tPassword: \"\",\n\t},\n\tSettings: clickhouse.Settings{\n\t\t\"max_execution_time\": 60,\n\t},\n\tDialTimeout: 30 * time.Second,\n\tCompression: &clickhouse.Compression{\n\t\tMethod: clickhouse.CompressionLZ4,\n\t},\n\tProtocol:  clickhouse.HTTP,\n})\n```\n\n#### Proxy support\n\nHTTP proxy can be set in the DSN string by specifying the `http_proxy` parameter.\n(make sure to URL encode the proxy address)\n\n```sh\nhttp://host1:8123,host2:8123/database?dial_timeout=200ms&max_execution_time=60&http_proxy=http%3A%2F%2Fproxy%3A8080\n```\n\nIf you are using `clickhouse.OpenDB`, set the `HTTProxy` field in the `clickhouse.Options`.\n\nAn alternative way is to enable proxy by setting the `HTTP_PROXY` (for HTTP) or `HTTPS_PROXY` (for HTTPS) environment variables.\nSee more details in the [Go documentation](https://pkg.go.dev/net/http#ProxyFromEnvironment).\n\n## Compression\n\nZSTD/LZ4 compression is supported over native and http protocols. This is performed column by column at a block level and is only used for inserts. Compression buffer size is set as `MaxCompressionBuffer` option.\n\nIf using `Open` via the std interface and specifying a DSN, compression can be enabled via the `compress` flag. Currently, this is a boolean flag which enables `LZ4` compression.\n\nOther compression methods will be added in future PRs.\n\n## TLS/SSL\n\nAt a low level all client connect methods (DSN/OpenDB/Open) will use the [Go tls package](https://pkg.go.dev/crypto/tls) to establish a secure connection. The client knows to use TLS if the Options struct contains a non-nil tls.Config pointer.\n\nSetting secure in the DSN creates a minimal tls.Config struct with only the InsecureSkipVerify field set (either true or false).  It is equivalent to this code:\n\n```go\nconn := clickhouse.OpenDB(&clickhouse.Options{\n\t...\n    TLS: &tls.Config{\n            InsecureSkipVerify: false\n\t}\n\t...\n    })\n```\nThis minimal tls.Config is normally all that is necessary to connect to the secure native port (normally 9440) on a ClickHouse server. If the ClickHouse server does not have a valid certificate (expired, wrong host name, not signed by a publicly recognized root Certificate Authority), InsecureSkipVerify can be to `true`, but that is strongly discouraged.\n\nIf additional TLS parameters are necessary the application code should set the desired fields in the tls.Config struct. That can include specific cipher suites, forcing a particular TLS version (like 1.2 or 1.3), adding an internal CA certificate chain, adding a client certificate (and private key) if required by the ClickHouse server, and most of the other options that come with a more specialized security setup.\n\n### HTTPS (Experimental)\n\nTo connect using HTTPS either:\n\n- Use `https` in your dsn string e.g.\n\n    ```sh\n    https://host1:8443,host2:8443/database?dial_timeout=200ms&max_execution_time=60\n    ```\n\n- Specify the interface type as `HttpsInterface` e.g.\n\n```go\nconn := clickhouse.OpenDB(&clickhouse.Options{\n\tAddr: []string{\"127.0.0.1:8443\"},\n\tAuth: clickhouse.Auth{\n\t\tDatabase: \"default\",\n\t\tUsername: \"default\",\n\t\tPassword: \"\",\n\t},\n\tProtocol:  clickhouse.HTTP,\n})\n```\n\n## Client info\n\n\nClickhouse-go implements [client info](https://docs.google.com/document/d/1924Dvy79KXIhfqKpi1EBVY3133pIdoMwgCQtZ-uhEKs/edit#heading=h.ah33hoz5xei2) as a part of language client specification. `client_name` for native protocol and HTTP `User-Agent` header values are provided with the exact client info string.\n\nUsers can extend client options with additional product information included in client info. This might be useful for analysis [on a server side](https://clickhouse.com/docs/en/operations/system-tables/query_log/).\n\nOrder is the highest abstraction to the lowest level implementation left to right.\n\nUsage examples for [native API](examples/clickhouse_api/client_info.go) and [database/sql](examples/std/client_info.go)  are provided.\n\n## Async insert\n\n[Asynchronous insert](https://clickhouse.com/docs/en/optimize/asynchronous-inserts#enabling-asynchronous-inserts) is supported via dedicated `AsyncInsert` method. This allows to insert data with a non-blocking call.\nEffectively, it controls a `async_insert` setting for the query. \n\n### Using with batch API\n\nUsing native protocol, asynchronous insert does not support batching. It means, only inline query data is supported. Please see an example [here](examples/std/async.go).\n\nHTTP protocol supports batching. It can be enabled by setting `async_insert` when using standard `Prepare` method.\n\nFor more details please see [asynchronous inserts](https://clickhouse.com/docs/en/optimize/asynchronous-inserts#enabling-asynchronous-inserts) documentation.\n\n## PrepareBatch options\n\nAvailable options:\n- [WithReleaseConnection](examples/clickhouse_api/batch_release_connection.go) - after PrepareBatch connection will be returned to the pool. It can help you make a long-lived batch.\n\n## Benchmark\n\n| [V1 (READ)](benchmark/v1/read/main.go) | [V2 (READ) std](benchmark/v2/read/main.go) | [V2 (READ) clickhouse API](benchmark/v2/read-native/main.go) |\n| -------------------------------------- | ------------------------------------------ |--------------------------------------------------------------|\n| 1.218s                                 | 924.390ms                                  | 675.721ms                                                    |\n\n\n| [V1 (WRITE)](benchmark/v1/write/main.go) | [V2 (WRITE) std](benchmark/v2/write/main.go) | [V2 (WRITE) clickhouse API](benchmark/v2/write-native/main.go) | [V2 (WRITE) by column](benchmark/v2/write-native-columnar/main.go) |\n| ---------------------------------------- | -------------------------------------------- | ------------------------------------------------------ | ------------------------------------------------------------------ |\n| 1.899s                                   | 1.177s                                       | 699.203ms                                              | 661.973ms                                                          |\n\n\n\n## Install\n\n```sh\ngo get -u github.com/ClickHouse/clickhouse-go/v2\n```\n\n## Examples\n\n### native interface\n\n* [batch](examples/clickhouse_api/batch.go)\n* [batch with release connection](examples/clickhouse_api/batch_release_connection.go)\n* [async insert](examples/clickhouse_api/async.go)\n* [batch struct](examples/clickhouse_api/append_struct.go)\n* [columnar](examples/clickhouse_api/columnar_insert.go)\n* [scan struct](examples/clickhouse_api/scan_struct.go)\n* [query parameters](examples/clickhouse_api/query_parameters.go)\n* [bind params](examples/clickhouse_api/bind.go) (deprecated in favour of native query parameters)\n* [client info](examples/clickhouse_api/client_info.go)\n\n### std `database/sql` interface\n\n* [batch](examples/std/batch.go)\n* [async insert](examples/std/async.go)\n* [open db](examples/std/connect.go)\n* [query parameters](examples/std/query_parameters.go)\n* [bind params](examples/std/bind.go) (deprecated in favour of native query parameters)\n* [client info](examples/std/client_info.go)\n\n## Third-party libraries\n\n* [clickhouse-go-rows-utils](https://github.com/EpicStep/clickhouse-go-rows-utils) - utilities that simplify working with rows.\n\n## ClickHouse alternatives - ch-go\n\nVersions of this client >=2.3.x utilise [ch-go](https://github.com/ClickHouse/ch-go) for their low level encoding/decoding. This low lever client provides a high performance columnar interface and should be used in performance critical use cases. This client provides more familar row orientated and `database/sql` semantics at the cost of some performance.\n\nBoth clients are supported by ClickHouse.\n\n## Third-party alternatives\n\n* Database client/clients:\n\t* [mailru/go-clickhouse](https://github.com/mailru/go-clickhouse) (uses the HTTP protocol)\n\t* [uptrace/go-clickhouse](https://github.com/uptrace/go-clickhouse) (uses the native TCP protocol with `database/sql`-like API)\n\t* Drivers with columnar interface:\n\t\t* [vahid-sohrabloo/chconn](https://github.com/vahid-sohrabloo/chconn)\n\n* Insert collectors:\n\t* [KittenHouse](https://github.com/YuriyNasretdinov/kittenhouse)\n\t* [nikepan/clickhouse-bulk](https://github.com/nikepan/clickhouse-bulk)\n"
        },
        {
          "name": "TYPES.md",
          "type": "blob",
          "size": 20.85546875,
          "content": "The following table aims to capture the Golang types supported for each ClickHouse Column Type. \n\nWhilst each ClickHouse type often has a logical Golang type, we aim to support implicit conversions where possible and provided no precision loss will be incurred - thus alleviating the need for users to ensure their data aligns perfectly with ClickHouse types.\n\nThis effort is ongoing and can be separated in to insertion (`Append`/`AppendRow`) and read time (via a `Scan`). Should you need support for a specific conversion, please raise an issue.\n\n## Append Support\n\nAll types can be inserted as a value or pointer.\n\n|               | **ClickHouse Type** | String | Decimal | Bool | FixedString | UInt8 | UInt16 | UInt32 | UInt64 | UInt128 | UInt256 | Int8 | Int16 | Int32 | Int64 | Int128 | Int256 | Float32 | Float64 | UUID | Date | Date32 | DateTime | DateTime64 | Enum8 | Enum16 | Point | Ring | Polygon | MultiPolygon |\n|---------------|---------------------|--------|---------|------|-------------|-------|--------|--------|--------|---------|---------|------|-------|-------|-------|--------|--------|---------|---------|------|------|--------|----------|------------|-------|--------|-------|------|---------|--------------|\n| **Golang Type** |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| uint          |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| unit64        |                     |        |         |      |             |       |        |        |    X   |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| uint32        |                     |        |         |      |             |       |        |    X   |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| uint16        |                     |        |         |      |             |       |    X   |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| uint8         |                     |        |         |      |             |   X   |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| int           |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |   X   |    X   |       |      |         |              |\n| int64         |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |   X   |        |        |         |         |      |      |        |     X    |      X     |       |        |       |      |         |              |\n| int32         |                     |        |         |      |             |       |        |        |        |         |         |      |       |   X   |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| int16         |                     |        |         |      |             |       |        |        |        |         |         |      |   X   |       |       |        |        |         |         |      |      |        |          |            |       |    X   |       |      |         |              |\n| int8          |                     |        |         |      |             |       |        |        |        |         |         |   X  |       |       |       |        |        |         |         |      |      |        |          |            |   X   |        |       |      |         |              |\n| float32       |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |    X    |         |      |      |        |          |            |       |        |       |      |         |              |\n| float64       |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |    X    |      |      |        |          |            |       |        |       |      |         |              |\n| string        |                     |    X   |         |      |      X      |       |        |        |        |         |         |      |       |       |       |        |        |         |         |   X  |   X  |    X   |     X    |      X     |   X   |    X   |       |      |         |              |\n| bool          |                     |        |         | X    |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| time.Time     |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |   X  |    X   |     X    |      X     |       |        |       |      |         |              |\n| big.Int       |                     |        |         |      |             |       |        |        |        |    X    |    X    |      |       |       |       |    X   |    X   |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| decimal.Decimal |                     |        |    X    |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| uuid.UUID     |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |   X  |      |        |          |            |       |        |       |      |         |              |\n| orb.Point     |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |   X   |      |         |              |\n| orb.Polygon   |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |    X    |              |\n| orb.Ring      |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |   X  |         |              |\n| orb.MultiPolygon |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |       X      |\n| []byte        |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |       X      |\n | fmt.Stringer  |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullString |                     |    X   |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullTime  |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |   X  |    X   |     X    |      X     |       |        |       |      |         |              |\n| sql.NullFloat64 |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |    X    |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullInt64 |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |   X   |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullInt32 |                     |        |         |      |             |       |        |        |        |         |         |      |       |   X   |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullInt16 |                     |        |         |      |             |       |        |        |        |         |         |      |   X   |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullBool  |                     |        |         | X    |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n\n## Scan Support\n\nAll types can be read into a pointer or pointer to a pointer.\n\n|               | **ClickHouse Type** | String | Decimal | Bool | FixedString | UInt8 | UInt16 | UInt32 | UInt64 | UInt128 | UInt256 | Int8 | Int16 | Int32 | Int64 | Int128 | Int256 | Float32 | Float64 | UUID | Date | Date32 | DateTime | DateTime64 | Enum8 | Enum16 | Point | Ring | Polygon | MultiPolygon |\n|---------------|---------------------|--------|---------|------|-------------|-------|--------|--------|--------|---------|---------|------|-------|-------|-------|--------|--------|---------|---------|------|------|--------|----------|------------|-------|--------|-------|------|---------|--------------|\n| **Golang Type** |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| uint          |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| unit64        |                     |        |         |      |             |       |        |        |    X   |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| uint32        |                     |        |         |      |             |       |        |    X   |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| uint16        |                     |        |         |      |             |       |    X   |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| uint8         |                     |        |         |      |             |   X   |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| int           |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| int64         |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |   X   |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| int32         |                     |        |         |      |             |       |        |        |        |         |         |      |       |   X   |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| int16         |                     |        |         |      |             |       |        |        |        |         |         |      |   X   |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| int8          |                     |        |         |      |             |       |        |        |        |         |         |   X  |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| float32       |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |    X    |         |      |      |        |          |            |       |        |       |      |         |              |\n| float64       |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |    X    |      |      |        |          |            |       |        |       |      |         |              |\n| string        |                     |    X   |         |      |      X      |       |        |        |        |         |         |      |       |       |       |        |        |         |         |   X  |      |        |          |            |   X   |    X   |       |      |         |              |\n| bool          |                     |        |         | X    |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| time.Time     |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |   X  |    X   |     X    |      X     |       |        |       |      |         |              |\n| big.Int       |                     |        |         |      |             |       |        |        |        |    X    |    X    |      |       |       |       |    X   |    X   |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| decimal.Decimal |                     |        |    X    |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| uuid.UUID     |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |   X  |      |        |          |            |       |        |       |      |         |              |\n| orb.Point     |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |   X   |      |         |              |\n| orb.Polygon   |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |    X    |              |\n| orb.Ring      |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |   X  |         |              |\n| orb.MultiPolygon |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |       X      |\n| sql.Scan      |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |   X  |   X  |    X   |     X    |      X     |       |        |       |      |         |              |\n| sql.NullString |                     |    X   |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullTime  |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |   X  |    X   |     X    |      X     |       |        |       |      |         |              |\n| sql.NullFloat64 |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |       |        |        |         |    X    |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullInt64 |                     |        |         |      |             |       |        |        |        |         |         |      |       |       |   X   |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullInt32 |                     |        |         |      |             |       |        |        |        |         |         |      |       |   X   |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullInt16 |                     |        |         |      |             |       |        |        |        |         |         |      |   X   |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n| sql.NullBool  |                     |        |         | X    |             |       |        |        |        |         |         |      |       |       |       |        |        |         |         |      |      |        |          |            |       |        |       |      |         |              |\n"
        },
        {
          "name": "batch.go",
          "type": "blob",
          "size": 2.169921875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"strings\"\n\n\t\"github.com/pkg/errors\"\n)\n\nvar normalizeInsertQueryMatch = regexp.MustCompile(`(?i)(INSERT\\s+INTO\\s+([^(]+)(?:\\s*\\([^()]*(?:\\([^()]*\\)[^()]*)*\\))?)(?:\\s*VALUES)?`)\nvar truncateFormat = regexp.MustCompile(`(?i)\\sFORMAT\\s+[^\\s]+`)\nvar truncateValues = regexp.MustCompile(`\\sVALUES\\s.*$`)\nvar extractInsertColumnsMatch = regexp.MustCompile(`(?si)INSERT INTO .+\\s\\((?P<Columns>.+)\\)$`)\n\nfunc extractNormalizedInsertQueryAndColumns(query string) (normalizedQuery string, tableName string, columns []string, err error) {\n\tquery = truncateFormat.ReplaceAllString(query, \"\")\n\tquery = truncateValues.ReplaceAllString(query, \"\")\n\n\tmatches := normalizeInsertQueryMatch.FindStringSubmatch(query)\n\tif len(matches) == 0 {\n\t\terr = errors.Errorf(\"invalid INSERT query: %s\", query)\n\t\treturn\n\t}\n\n\tnormalizedQuery = fmt.Sprintf(\"%s FORMAT Native\", matches[1])\n\ttableName = strings.TrimSpace(matches[2])\n\n\tcolumns = make([]string, 0)\n\tmatches = extractInsertColumnsMatch.FindStringSubmatch(matches[1])\n\tif len(matches) == 2 {\n\t\tcolumns = strings.Split(matches[1], \",\")\n\t\tfor i := range columns {\n\t\t\t// refers to https://clickhouse.com/docs/en/sql-reference/syntax#identifiers\n\t\t\t// we can use identifiers with double quotes or backticks, for example: \"id\", `id`, but not both, like `\"id\"`.\n\t\t\tcolumns[i] = strings.Trim(strings.Trim(strings.TrimSpace(columns[i]), \"\\\"\"), \"`\")\n\t\t}\n\t}\n\n\treturn\n}\n"
        },
        {
          "name": "batch_test.go",
          "type": "blob",
          "size": 8.0078125,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestExtractNormalizedInsertQueryAndColumns(t *testing.T) {\n\tvar testCases = []struct {\n\t\tname                    string\n\t\tquery                   string\n\t\texpectedNormalizedQuery string\n\t\texpectedTableName       string\n\t\texpectedColumns         []string\n\t\texpectedError           bool\n\t}{\n\t\t{\n\t\t\tname:                    \"Regular insert\",\n\t\t\tquery:                   \"INSERT INTO table_name (col1, col2) VALUES (1, 2)\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO table_name (col1, col2) FORMAT Native\",\n\t\t\texpectedTableName:       \"table_name\",\n\t\t\texpectedColumns:         []string{\"col1\", \"col2\"},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Lowercase insert\",\n\t\t\tquery:                   \"insert into table_name (col1, col2) values (1, 2)\",\n\t\t\texpectedNormalizedQuery: \"insert into table_name (col1, col2) FORMAT Native\",\n\t\t\texpectedTableName:       \"table_name\",\n\t\t\texpectedColumns:         []string{\"col1\", \"col2\"},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname: \"Insert with mixed case, multiline and format specified\",\n\t\t\tquery: `INSERT INTO \"db\".\"table_name\" (\n\t\t\t\t\t\tcol1,\n\t\t\t\t\t\tcol2\n\t\t\t\t\t) Values (\n\t\t\t\t\t\t1,\n\t\t\t\t\t\t2\n\t\t\t\t\t)\n\t\t\t\t\tformat JSONEachRow`,\n\t\t\texpectedNormalizedQuery: `INSERT INTO \"db\".\"table_name\" (\n\t\t\t\t\t\tcol1,\n\t\t\t\t\t\tcol2\n\t\t\t\t\t) FORMAT Native`,\n\t\t\texpectedTableName: \"\\\"db\\\".\\\"table_name\\\"\",\n\t\t\texpectedColumns:   []string{\"col1\", \"col2\"},\n\t\t\texpectedError:     false,\n\t\t},\n\t\t{\n\t\t\tname: \"Multiline insert\",\n\t\t\tquery: `INSERT INTO table_name (\n\t\t\t\t\t\tcol1,\n\t\t\t\t\t\tcol2\n\t\t\t\t\t) VALUES (\n\t\t\t\t\t\t1,\n\t\t\t\t\t\t2\n\t\t\t\t\t)`,\n\t\t\texpectedNormalizedQuery: `INSERT INTO table_name (\n\t\t\t\t\t\tcol1,\n\t\t\t\t\t\tcol2\n\t\t\t\t\t) FORMAT Native`,\n\t\t\texpectedTableName: \"table_name\",\n\t\t\texpectedColumns:   []string{\"col1\", \"col2\"},\n\t\t\texpectedError:     false,\n\t\t},\n\t\t{\n\t\t\tname: \"Multiline insert, with columns inline\",\n\t\t\tquery: `INSERT INTO table_name (col1, col2) VALUES (\n\t\t\t\t\t\t1,\n\t\t\t\t\t\t2\n\t\t\t\t\t)`,\n\t\t\texpectedNormalizedQuery: `INSERT INTO table_name (col1, col2) FORMAT Native`,\n\t\t\texpectedTableName:       \"table_name\",\n\t\t\texpectedColumns:         []string{\"col1\", \"col2\"},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname: \"Multiline insert, with values inline\",\n\t\t\tquery: `INSERT INTO table_name (\n\t\t\t\t\t\tcol1,\n\t\t\t\t\t\tcol2\n\t\t\t\t\t) VALUES (1, 2)`,\n\t\t\texpectedNormalizedQuery: `INSERT INTO table_name (\n\t\t\t\t\t\tcol1,\n\t\t\t\t\t\tcol2\n\t\t\t\t\t) FORMAT Native`,\n\t\t\texpectedTableName: \"table_name\",\n\t\t\texpectedColumns:   []string{\"col1\", \"col2\"},\n\t\t\texpectedError:     false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert with backtick quoted database and table names\",\n\t\t\tquery:                   \"INSERT INTO `db`.`table_name` (col1, col2) VALUES (1, 2)\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO `db`.`table_name` (col1, col2) FORMAT Native\",\n\t\t\texpectedTableName:       \"`db`.`table_name`\",\n\t\t\texpectedColumns:         []string{\"col1\", \"col2\"},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert with double quoted database and table names\",\n\t\t\tquery:                   \"INSERT INTO \\\"db\\\".\\\"table_name\\\" (col1, col2) VALUES (1, 2)\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO \\\"db\\\".\\\"table_name\\\" (col1, col2) FORMAT Native\",\n\t\t\texpectedTableName:       \"\\\"db\\\".\\\"table_name\\\"\",\n\t\t\texpectedColumns:         []string{\"col1\", \"col2\"},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert with special characters in database and table names\",\n\t\t\tquery:                   \"INSERT INTO `_test_1345# $.–î–ë`.`2. –¢–∞–±–ª–∏—Ü–∞ ‚Ññ2`\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO `_test_1345# $.–î–ë`.`2. –¢–∞–±–ª–∏—Ü–∞ ‚Ññ2` FORMAT Native\",\n\t\t\texpectedTableName:       \"`_test_1345# $.–î–ë`.`2. –¢–∞–±–ª–∏—Ü–∞ ‚Ññ2`\",\n\t\t\texpectedColumns:         []string{},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert with special characters in database and table names, with columns\",\n\t\t\tquery:                   \"INSERT INTO `_test_1345# $.–î–ë`.`2. –¢–∞–±–ª–∏—Ü–∞ ‚Ññ2` (col1, col2)\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO `_test_1345# $.–î–ë`.`2. –¢–∞–±–ª–∏—Ü–∞ ‚Ññ2` (col1, col2) FORMAT Native\",\n\t\t\texpectedTableName:       \"`_test_1345# $.–î–ë`.`2. –¢–∞–±–ª–∏—Ü–∞ ‚Ññ2`\",\n\t\t\texpectedColumns:         []string{\"col1\", \"col2\"},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert with special characters in database and table names, with columns and values\",\n\t\t\tquery:                   \"INSERT INTO `_test_1345# $.–î–ë`.`2. –¢–∞–±–ª–∏—Ü–∞ ‚Ññ2` (col1, col2) VALUES (1, 2)\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO `_test_1345# $.–î–ë`.`2. –¢–∞–±–ª–∏—Ü–∞ ‚Ññ2` (col1, col2) FORMAT Native\",\n\t\t\texpectedTableName:       \"`_test_1345# $.–î–ë`.`2. –¢–∞–±–ª–∏—Ü–∞ ‚Ññ2`\",\n\t\t\texpectedColumns:         []string{\"col1\", \"col2\"},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert without database name\",\n\t\t\tquery:                   \"INSERT INTO table_name (col1, col2) VALUES (1, 2) FORMAT Native\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO table_name (col1, col2) FORMAT Native\",\n\t\t\texpectedTableName:       \"table_name\",\n\t\t\texpectedColumns:         []string{\"col1\", \"col2\"},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert without columns and values\",\n\t\t\tquery:                   \"INSERT INTO table_name\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO table_name FORMAT Native\",\n\t\t\texpectedTableName:       \"table_name\",\n\t\t\texpectedColumns:         []string{},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert with format\",\n\t\t\tquery:                   \"INSERT INTO table_name FORMAT Native\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO table_name FORMAT Native\",\n\t\t\texpectedTableName:       \"table_name\",\n\t\t\texpectedColumns:         []string{},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert with lowercase format\",\n\t\t\tquery:                   \"INSERT INTO table_name format Native\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO table_name FORMAT Native\",\n\t\t\texpectedTableName:       \"table_name\",\n\t\t\texpectedColumns:         []string{},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert with JSONEachRow format\",\n\t\t\tquery:                   \"INSERT INTO table_name FORMAT JSONEachRow\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO table_name FORMAT Native\",\n\t\t\texpectedTableName:       \"table_name\",\n\t\t\texpectedColumns:         []string{},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:                    \"Insert with quoted table name only\",\n\t\t\tquery:                   \"INSERT INTO `table_name` VALUES (1, 2)\",\n\t\t\texpectedNormalizedQuery: \"INSERT INTO `table_name` FORMAT Native\",\n\t\t\texpectedTableName:       \"`table_name`\",\n\t\t\texpectedColumns:         []string{},\n\t\t\texpectedError:           false,\n\t\t},\n\t\t{\n\t\t\tname:          \"Select, should produce error\",\n\t\t\tquery:         \"SELECT * FROM table_name\",\n\t\t\texpectedError: true,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.query, func(t *testing.T) {\n\t\t\tnormalizedQuery, tableName, columns, err := extractNormalizedInsertQueryAndColumns(tc.query)\n\t\t\tif tc.expectedError {\n\t\t\t\tassert.Error(t, err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.Equal(t, tc.expectedNormalizedQuery, normalizedQuery)\n\t\t\tassert.Equal(t, tc.expectedTableName, tableName)\n\t\t\tassert.Equal(t, tc.expectedColumns, columns)\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "bind.go",
          "type": "blob",
          "size": 10.4794921875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\tstd_driver \"database/sql/driver\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"regexp\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/column\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/driver\"\n)\n\nfunc Named(name string, value any) driver.NamedValue {\n\treturn driver.NamedValue{\n\t\tName:  name,\n\t\tValue: value,\n\t}\n}\n\ntype TimeUnit uint8\n\nconst (\n\tSeconds TimeUnit = iota\n\tMilliSeconds\n\tMicroSeconds\n\tNanoSeconds\n)\n\ntype GroupSet struct {\n\tValue []any\n}\n\ntype ArraySet []any\n\nfunc DateNamed(name string, value time.Time, scale TimeUnit) driver.NamedDateValue {\n\treturn driver.NamedDateValue{\n\t\tName:  name,\n\t\tValue: value,\n\t\tScale: uint8(scale),\n\t}\n}\n\nvar (\n\tbindNumericRe    = regexp.MustCompile(`\\$[0-9]+`)\n\tbindPositionalRe = regexp.MustCompile(`[^\\\\][?]`)\n)\n\nfunc bind(tz *time.Location, query string, args ...any) (string, error) {\n\tif len(args) == 0 {\n\t\treturn query, nil\n\t}\n\tvar (\n\t\thaveNumeric    bool\n\t\thavePositional bool\n\t)\n\n\tallArgumentsNamed, err := checkAllNamedArguments(args...)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif allArgumentsNamed {\n\t\treturn bindNamed(tz, query, args...)\n\t}\n\n\thaveNumeric = bindNumericRe.MatchString(query)\n\thavePositional = bindPositionalRe.MatchString(query)\n\tif haveNumeric && havePositional {\n\t\treturn \"\", ErrBindMixedParamsFormats\n\t}\n\tif haveNumeric {\n\t\treturn bindNumeric(tz, query, args...)\n\t}\n\treturn bindPositional(tz, query, args...)\n}\n\nfunc checkAllNamedArguments(args ...any) (bool, error) {\n\tvar (\n\t\thaveNamed     bool\n\t\thaveAnonymous bool\n\t)\n\tfor _, v := range args {\n\t\tswitch v.(type) {\n\t\tcase driver.NamedValue, driver.NamedDateValue:\n\t\t\thaveNamed = true\n\t\tdefault:\n\t\t\thaveAnonymous = true\n\t\t}\n\t\tif haveNamed && haveAnonymous {\n\t\t\treturn haveNamed, ErrBindMixedParamsFormats\n\t\t}\n\t}\n\treturn haveNamed, nil\n}\n\nfunc bindPositional(tz *time.Location, query string, args ...any) (_ string, err error) {\n\tvar (\n\t\tlastMatchIndex = -1 // Position of previous match for copying\n\t\targIndex       = 0  // Index for the argument at current position\n\t\tbuf            = make([]byte, 0, len(query))\n\t\tunbindCount    = 0 // Number of positional arguments that couldn't be matched\n\t)\n\n\tfor i := 0; i < len(query); i++ {\n\t\t// It's fine looping through the query string as bytes, because the (fixed) characters we're looking for\n\t\t// are in the ASCII range to won't take up more than one byte.\n\t\tif query[i] == '?' {\n\t\t\tif i > 0 && query[i-1] == '\\\\' {\n\t\t\t\t// Copy all previous index to here characters\n\t\t\t\tbuf = append(buf, query[lastMatchIndex+1:i-1]...)\n\t\t\t\tbuf = append(buf, '?')\n\t\t\t} else {\n\t\t\t\t// Copy all previous index to here characters\n\t\t\t\tbuf = append(buf, query[lastMatchIndex+1:i]...)\n\n\t\t\t\t// Append the argument value\n\t\t\t\tif argIndex < len(args) {\n\t\t\t\t\tv := args[argIndex]\n\t\t\t\t\tif fn, ok := v.(std_driver.Valuer); ok {\n\t\t\t\t\t\tif v, err = fn.Value(); err != nil {\n\t\t\t\t\t\t\treturn \"\", nil\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvalue, err := format(tz, Seconds, v)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn \"\", err\n\t\t\t\t\t}\n\n\t\t\t\t\tbuf = append(buf, value...)\n\t\t\t\t\targIndex++\n\t\t\t\t} else {\n\t\t\t\t\tunbindCount++\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastMatchIndex = i\n\t\t}\n\t}\n\n\t// If there were no replacements, quick return without copying the string\n\tif lastMatchIndex < 0 {\n\t\treturn query, nil\n\t}\n\n\t// Append the remainder\n\tbuf = append(buf, query[lastMatchIndex+1:]...)\n\n\tif unbindCount > 0 {\n\t\treturn \"\", fmt.Errorf(\"have no arg for param ? at last %d positions\", unbindCount)\n\t}\n\n\treturn string(buf), nil\n}\n\nfunc bindNumeric(tz *time.Location, query string, args ...any) (_ string, err error) {\n\tvar (\n\t\tunbind = make(map[string]struct{})\n\t\tparams = make(map[string]string)\n\t)\n\tfor i, v := range args {\n\t\tif fn, ok := v.(std_driver.Valuer); ok {\n\t\t\tif v, err = fn.Value(); err != nil {\n\t\t\t\treturn \"\", nil\n\t\t\t}\n\t\t}\n\t\tval, err := format(tz, Seconds, v)\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tparams[fmt.Sprintf(\"$%d\", i+1)] = val\n\t}\n\tquery = bindNumericRe.ReplaceAllStringFunc(query, func(n string) string {\n\t\tif _, found := params[n]; !found {\n\t\t\tunbind[n] = struct{}{}\n\t\t\treturn \"\"\n\t\t}\n\t\treturn params[n]\n\t})\n\tfor param := range unbind {\n\t\treturn \"\", fmt.Errorf(\"have no arg for %s param\", param)\n\t}\n\treturn query, nil\n}\n\nvar bindNamedRe = regexp.MustCompile(`@[a-zA-Z0-9\\_]+`)\n\nfunc bindNamed(tz *time.Location, query string, args ...any) (_ string, err error) {\n\tvar (\n\t\tunbind = make(map[string]struct{})\n\t\tparams = make(map[string]string)\n\t)\n\tfor _, v := range args {\n\t\tswitch v := v.(type) {\n\t\tcase driver.NamedValue:\n\t\t\tvalue := v.Value\n\t\t\tif fn, ok := v.Value.(std_driver.Valuer); ok {\n\t\t\t\tif value, err = fn.Value(); err != nil {\n\t\t\t\t\treturn \"\", err\n\t\t\t\t}\n\t\t\t}\n\t\t\tval, err := format(tz, Seconds, value)\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", err\n\t\t\t}\n\t\t\tparams[\"@\"+v.Name] = val\n\t\tcase driver.NamedDateValue:\n\t\t\tval, err := format(tz, TimeUnit(v.Scale), v.Value)\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", err\n\t\t\t}\n\t\t\tparams[\"@\"+v.Name] = val\n\t\t}\n\t}\n\tquery = bindNamedRe.ReplaceAllStringFunc(query, func(n string) string {\n\t\tif _, found := params[n]; !found {\n\t\t\tunbind[n] = struct{}{}\n\t\t\treturn \"\"\n\t\t}\n\t\treturn params[n]\n\t})\n\tfor param := range unbind {\n\t\treturn \"\", fmt.Errorf(\"have no arg for %q param\", param)\n\t}\n\treturn query, nil\n}\n\nfunc formatTime(tz *time.Location, scale TimeUnit, value time.Time) (string, error) {\n\tswitch value.Location().String() {\n\tcase \"Local\", \"\":\n\t\t// It's required to pass timestamp as string due to decimal overflow for higher precision,\n\t\t// but zero-value string \"toDateTime('0')\" will be not parsed by ClickHouse.\n\t\tif value.Unix() == 0 {\n\t\t\treturn \"toDateTime(0)\", nil\n\t\t}\n\n\t\tswitch scale {\n\t\tcase Seconds:\n\t\t\treturn fmt.Sprintf(\"toDateTime('%d')\", value.Unix()), nil\n\t\tcase MilliSeconds:\n\t\t\treturn fmt.Sprintf(\"toDateTime64('%d', 3)\", value.UnixMilli()), nil\n\t\tcase MicroSeconds:\n\t\t\treturn fmt.Sprintf(\"toDateTime64('%d', 6)\", value.UnixMicro()), nil\n\t\tcase NanoSeconds:\n\t\t\treturn fmt.Sprintf(\"toDateTime64('%d', 9)\", value.UnixNano()), nil\n\t\t}\n\tcase tz.String():\n\t\tif scale == Seconds {\n\t\t\treturn value.Format(\"toDateTime('2006-01-02 15:04:05')\"), nil\n\t\t}\n\t\treturn fmt.Sprintf(\"toDateTime64('%s', %d)\", value.Format(fmt.Sprintf(\"2006-01-02 15:04:05.%0*d\", int(scale*3), 0)), int(scale*3)), nil\n\t}\n\tif scale == Seconds {\n\t\treturn fmt.Sprintf(\"toDateTime('%s', '%s')\", value.Format(\"2006-01-02 15:04:05\"), value.Location().String()), nil\n\t}\n\treturn fmt.Sprintf(\"toDateTime64('%s', %d, '%s')\", value.Format(fmt.Sprintf(\"2006-01-02 15:04:05.%0*d\", int(scale*3), 0)), int(scale*3), value.Location().String()), nil\n}\n\nvar stringQuoteReplacer = strings.NewReplacer(`\\`, `\\\\`, `'`, `\\'`)\n\nfunc format(tz *time.Location, scale TimeUnit, v any) (string, error) {\n\tquote := func(v string) string {\n\t\treturn \"'\" + stringQuoteReplacer.Replace(v) + \"'\"\n\t}\n\tswitch v := v.(type) {\n\tcase nil:\n\t\treturn \"NULL\", nil\n\tcase string:\n\t\treturn quote(v), nil\n\tcase time.Time:\n\t\treturn formatTime(tz, scale, v)\n\tcase bool:\n\t\tif v {\n\t\t\treturn \"1\", nil\n\t\t}\n\t\treturn \"0\", nil\n\tcase GroupSet:\n\t\tval, err := join(tz, scale, v.Value)\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn fmt.Sprintf(\"(%s)\", val), nil\n\tcase []GroupSet:\n\t\tval, err := join(tz, scale, v)\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn val, err\n\tcase ArraySet:\n\t\tval, err := join(tz, scale, v)\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn fmt.Sprintf(\"[%s]\", val), nil\n\tcase fmt.Stringer:\n\t\tif v := reflect.ValueOf(v); v.Kind() == reflect.Pointer &&\n\t\t\tv.IsNil() &&\n\t\t\tv.Type().Elem().Implements(reflect.TypeOf((*fmt.Stringer)(nil)).Elem()) {\n\t\t\treturn \"NULL\", nil\n\t\t}\n\t\treturn quote(v.String()), nil\n\tcase column.OrderedMap:\n\t\tvalues := make([]string, 0)\n\t\tfor key := range v.Keys() {\n\t\t\tname, err := format(tz, scale, key)\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", err\n\t\t\t}\n\t\t\tvalue, _ := v.Get(key)\n\t\t\tval, err := format(tz, scale, value)\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", err\n\t\t\t}\n\t\t\tvalues = append(values, fmt.Sprintf(\"%s, %s\", name, val))\n\t\t}\n\n\t\treturn \"map(\" + strings.Join(values, \", \") + \")\", nil\n\tcase column.IterableOrderedMap:\n\t\tvalues := make([]string, 0)\n\t\titer := v.Iterator()\n\t\tfor iter.Next() {\n\t\t\tkey, value := iter.Key(), iter.Value()\n\t\t\tname, err := format(tz, scale, key)\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", err\n\t\t\t}\n\t\t\tval, err := format(tz, scale, value)\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", err\n\t\t\t}\n\t\t\tvalues = append(values, fmt.Sprintf(\"%s, %s\", name, val))\n\t\t}\n\n\t\treturn \"map(\" + strings.Join(values, \", \") + \")\", nil\n\t}\n\tswitch v := reflect.ValueOf(v); v.Kind() {\n\tcase reflect.String:\n\t\treturn quote(v.String()), nil\n\tcase reflect.Slice, reflect.Array:\n\t\tvalues := make([]string, 0, v.Len())\n\t\tfor i := 0; i < v.Len(); i++ {\n\t\t\tval, err := format(tz, scale, v.Index(i).Interface())\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", err\n\t\t\t}\n\t\t\tvalues = append(values, val)\n\t\t}\n\t\treturn fmt.Sprintf(\"[%s]\", strings.Join(values, \", \")), nil\n\tcase reflect.Map: // map\n\t\tvalues := make([]string, 0, len(v.MapKeys()))\n\t\tfor _, key := range v.MapKeys() {\n\t\t\tname := fmt.Sprint(key.Interface())\n\t\t\tif key.Kind() == reflect.String {\n\t\t\t\tname = fmt.Sprintf(\"'%s'\", name)\n\t\t\t}\n\t\t\tval, err := format(tz, scale, v.MapIndex(key).Interface())\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", err\n\t\t\t}\n\t\t\tvalues = append(values, fmt.Sprintf(\"%s, %s\", name, val))\n\t\t}\n\t\treturn \"map(\" + strings.Join(values, \", \") + \")\", nil\n\tcase reflect.Ptr:\n\t\tif v.IsNil() {\n\t\t\treturn \"NULL\", nil\n\t\t}\n\t\treturn format(tz, scale, v.Elem().Interface())\n\t}\n\treturn fmt.Sprint(v), nil\n}\n\nfunc join[E any](tz *time.Location, scale TimeUnit, values []E) (string, error) {\n\titems := make([]string, len(values), len(values))\n\tfor i := range values {\n\t\tval, err := format(tz, scale, values[i])\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\titems[i] = val\n\t}\n\treturn strings.Join(items, \", \"), nil\n}\n\nfunc rebind(in []std_driver.NamedValue) []any {\n\targs := make([]any, 0, len(in))\n\tfor _, v := range in {\n\t\tswitch {\n\t\tcase len(v.Name) != 0:\n\t\t\targs = append(args, driver.NamedValue{\n\t\t\t\tName:  v.Name,\n\t\t\t\tValue: v.Value,\n\t\t\t})\n\n\t\tdefault:\n\t\t\targs = append(args, v.Value)\n\t\t}\n\t}\n\treturn args\n}\n"
        },
        {
          "name": "bind_test.go",
          "type": "blob",
          "size": 11.1826171875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestBindNumeric(t *testing.T) {\n\t_, err := bind(time.Local, `\n\tSELECT * FROM t WHERE col = $1\n\t\tAND col2 = $2\n\t\tAND col3 = $1\n\t\tANS col4 = $3\n\t\tAND null_coll = $4\n\t)\n\t`, 1, 2, \"I'm a string param\", nil)\n\tvar nilPtr *bool = nil\n\tvar nilPtrPtr **any = nil\n\tvaluedPtr := &([]any{123}[0])\n\tnilValuePtr := &([]any{nil}[0])\n\t_, err = bind(time.Local, `\n\tSELECT * FROM t WHERE col = $5\n\t\tAND col2 = $2\n\t\tAND col3 = $1\n\t\tAND col4 = $3\n\t\tAND col5 = $4\n\t`, nilPtr, valuedPtr, nilPtrPtr, nilValuePtr, &nilValuePtr)\n\tassert.NoError(t, err)\n\n\tif assert.NoError(t, err) {\n\t\tassets := []struct {\n\t\t\tquery    string\n\t\t\tparams   []any\n\t\t\texpected string\n\t\t}{\n\t\t\t{\n\t\t\t\tquery:    \"SELECT $1\",\n\t\t\t\tparams:   []any{1},\n\t\t\t\texpected: \"SELECT 1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery:    \"SELECT $2 $1 $3\",\n\t\t\t\tparams:   []any{1, 2, 3},\n\t\t\t\texpected: \"SELECT 2 1 3\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery:    \"SELECT $2 $1 $3\",\n\t\t\t\tparams:   []any{\"a\", \"b\", \"c\"},\n\t\t\t\texpected: \"SELECT 'b' 'a' 'c'\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery:    \"SELECT $2 $1\",\n\t\t\t\tparams:   []any{true, false},\n\t\t\t\texpected: \"SELECT 0 1\",\n\t\t\t},\n\t\t}\n\n\t\tfor _, asset := range assets {\n\t\t\tif actual, err := bind(time.Local, asset.query, asset.params...); assert.NoError(t, err) {\n\t\t\t\tassert.Equal(t, asset.expected, actual)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc TestBindNamed(t *testing.T) {\n\t_, err := bind(time.Local, `\n\tSELECT * FROM t WHERE col = @col1\n\t\tAND col2 = @col2\n\t\tAND col3 = @col1\n\t\tANS col4 = @col3\n\t\tAND col  @> 42\n\t\tAND null_coll = @col4\n\t)\n\t`,\n\t\tNamed(\"col1\", 1),\n\t\tNamed(\"col2\", 2),\n\t\tNamed(\"col3\", \"I'm a string param\"),\n\t\tNamed(\"col4\", nil),\n\t)\n\tvar nilPtr *bool = nil\n\tvar nilPtrPtr **any = nil\n\tvaluedPtr := &([]any{123}[0])\n\tnilValuePtr := &([]any{nil}[0])\n\t_, err = bind(time.Local, `\n\tSELECT * FROM t WHERE col =  @col1\n\t\tAND col2 =  @col2\n\t\tAND col3 =  @col3\n\t\tAND col4 =  @col4\n\t\tAND col5 =  @col5\n\t`,\n\t\tNamed(\"col1\", nilPtr),\n\t\tNamed(\"col2\", nilPtrPtr),\n\t\tNamed(\"col3\", valuedPtr),\n\t\tNamed(\"col4\", nilValuePtr),\n\t\tNamed(\"col5\", &nilValuePtr))\n\tassert.NoError(t, err)\n\n\tif assert.NoError(t, err) {\n\t\tassets := []struct {\n\t\t\tquery    string\n\t\t\tparams   []any\n\t\t\texpected string\n\t\t}{\n\t\t\t{\n\t\t\t\tquery: \"SELECT @col1\",\n\t\t\t\tparams: []any{\n\t\t\t\t\tNamed(\"col1\", 1),\n\t\t\t\t},\n\t\t\t\texpected: \"SELECT 1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery: \"SELECT @col2 @col1 @col3\",\n\t\t\t\tparams: []any{\n\t\t\t\t\tNamed(\"col1\", 1),\n\t\t\t\t\tNamed(\"col2\", 2),\n\t\t\t\t\tNamed(\"col3\", 3),\n\t\t\t\t},\n\t\t\t\texpected: \"SELECT 2 1 3\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery: \"SELECT @col2 @col1 @col3\",\n\t\t\t\tparams: []any{\n\t\t\t\t\tNamed(\"col1\", \"a\"),\n\t\t\t\t\tNamed(\"col2\", \"b\"),\n\t\t\t\t\tNamed(\"col3\", \"c\"),\n\t\t\t\t},\n\t\t\t\texpected: \"SELECT 'b' 'a' 'c'\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery: \"SELECT @col2 @col1\",\n\t\t\t\tparams: []any{\n\t\t\t\t\tNamed(\"col1\", true),\n\t\t\t\t\tNamed(\"col2\", false),\n\t\t\t\t},\n\t\t\t\texpected: \"SELECT 0 1\",\n\t\t\t},\n\t\t}\n\t\tfor _, asset := range assets {\n\t\t\tif actual, err := bind(time.Local, asset.query, asset.params...); assert.NoError(t, err) {\n\t\t\t\tassert.Equal(t, asset.expected, actual)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc TestBindPositional(t *testing.T) {\n\t_, err := bind(time.Local, `\n\tSELECT * FROM t WHERE col = ?\n\t\tAND col2 = ?\n\t\tAND col3 = ?\n\t\tANS col4 = ?\n\t\tAND null_coll = ?\n\t)\n\t`, 1, 2, 1, \"I'm a string param\", nil)\n\tif assert.NoError(t, err) {\n\t\tassets := []struct {\n\t\t\tquery    string\n\t\t\tparams   []any\n\t\t\texpected string\n\t\t}{\n\t\t\t{\n\t\t\t\tquery:    \"SELECT ?\",\n\t\t\t\tparams:   []any{1},\n\t\t\t\texpected: \"SELECT 1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery:    \"SELECT ? ? ?\",\n\t\t\t\tparams:   []any{1, 2, 3},\n\t\t\t\texpected: \"SELECT 1 2 3\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery:    \"SELECT ? ? ?\",\n\t\t\t\tparams:   []any{\"a\", \"b\", \"c\"},\n\t\t\t\texpected: \"SELECT 'a' 'b' 'c'\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery:    \"SELECT ? ? '\\\\?'\",\n\t\t\t\tparams:   []any{\"a\", \"b\"},\n\t\t\t\texpected: \"SELECT 'a' 'b' '?'\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery:    \"SELECT x where col = 'blah\\\\?' AND col2 = ?\",\n\t\t\t\tparams:   []any{\"a\"},\n\t\t\t\texpected: \"SELECT x where col = 'blah?' AND col2 = 'a'\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tquery:    \"SELECT ? ?\",\n\t\t\t\tparams:   []any{true, false},\n\t\t\t\texpected: \"SELECT 1 0\",\n\t\t\t},\n\t\t}\n\n\t\tfor _, asset := range assets {\n\t\t\tif actual, err := bind(time.Local, asset.query, asset.params...); assert.NoError(t, err) {\n\t\t\t\tassert.Equal(t, asset.expected, actual)\n\t\t\t}\n\t\t}\n\t}\n\n\t_, err = bind(time.Local, `\n\tSELECT * FROM t WHERE col = ?\n\t\tAND col2 = ?\n\t\tAND col3 = ?\n\t\tANS col4 = ?\n\t\tAND null_coll = ?\n\t)\n\t`, 1, 2, \"I'm a string param\", nil, Named(\"namedArg\", nil))\n\tassert.Error(t, err)\n\n\tvar nilPtr *bool = nil\n\tvar nilPtrPtr **any = nil\n\tvaluedPtr := &([]any{123}[0])\n\tnilValuePtr := &([]any{nil}[0])\n\n\t_, err = bind(time.Local, `\n\tSELECT * FROM t WHERE col = ?\n\t\tAND col2 = ?\n\t\tAND col3 = ?\n\t\tAND col4 = ?\n\t\tAND col5 = ?\n\t`, nilPtr, valuedPtr, nilPtrPtr, nilValuePtr, &nilValuePtr)\n\tassert.NoError(t, err)\n}\n\nfunc TestFormatTime(t *testing.T) {\n\tvar (\n\t\tt1, _   = time.Parse(\"2006-01-02 15:04:05\", \"2022-01-12 15:00:00\")\n\t\ttz, err = time.LoadLocation(\"Europe/London\")\n\t)\n\tif assert.NoError(t, err) {\n\t\tval, _ := format(t1.Location(), Seconds, t1)\n\t\tif assert.Equal(t, \"toDateTime('2022-01-12 15:00:00')\", val) {\n\t\t\tval, _ = format(tz, Seconds, t1)\n\t\t\tassert.Equal(t, \"toDateTime('2022-01-12 15:00:00', 'UTC')\", val)\n\t\t}\n\t}\n}\n\nfunc TestFormatScaledTime(t *testing.T) {\n\tvar (\n\t\tt1, _   = time.Parse(\"2006-01-02 15:04:05.000000000\", \"2022-01-12 15:00:00.123456789\")\n\t\ttz, err = time.LoadLocation(\"Europe/London\")\n\t)\n\trequire.NoError(t, err)\n\t// seconds\n\tval, _ := format(t1.Location(), Seconds, t1)\n\trequire.Equal(t, \"toDateTime('2022-01-12 15:00:00')\", val)\n\tval, _ = format(t1.Location(), Seconds, t1.In(time.Now().Location()))\n\trequire.Equal(t, \"toDateTime('1641999600')\", val)\n\tval, _ = format(t1.Location(), Seconds, time.Unix(0, 0))\n\trequire.Equal(t, \"toDateTime(0)\", val)\n\tval, _ = format(tz, Seconds, t1)\n\trequire.Equal(t, \"toDateTime('2022-01-12 15:00:00', 'UTC')\", val)\n\t// milliseconds\n\tval, _ = format(t1.Location(), MilliSeconds, t1)\n\trequire.Equal(t, \"toDateTime64('2022-01-12 15:00:00.123', 3)\", val)\n\tval, _ = format(t1.Location(), MilliSeconds, t1.In(time.Now().Location()))\n\trequire.Equal(t, \"toDateTime64('1641999600123', 3)\", val)\n\tval, _ = format(t1.Location(), MilliSeconds, time.Unix(0, 0))\n\trequire.Equal(t, \"toDateTime(0)\", val)\n\tval, _ = format(tz, MilliSeconds, t1)\n\trequire.Equal(t, \"toDateTime64('2022-01-12 15:00:00.123', 3, 'UTC')\", val)\n\t// microseconds\n\tval, _ = format(t1.Location(), MicroSeconds, t1)\n\trequire.Equal(t, \"toDateTime64('2022-01-12 15:00:00.123456', 6)\", val)\n\tval, _ = format(t1.Location(), MicroSeconds, t1.In(time.Now().Location()))\n\trequire.Equal(t, \"toDateTime64('1641999600123456', 6)\", val)\n\tval, _ = format(t1.Location(), MicroSeconds, time.Unix(0, 0))\n\trequire.Equal(t, \"toDateTime(0)\", val)\n\tval, _ = format(tz, MicroSeconds, t1)\n\trequire.Equal(t, \"toDateTime64('2022-01-12 15:00:00.123456', 6, 'UTC')\", val)\n\t// nanoseconds\n\tval, _ = format(t1.Location(), NanoSeconds, t1)\n\trequire.Equal(t, \"toDateTime64('2022-01-12 15:00:00.123456789', 9)\", val)\n\tval, _ = format(t1.Location(), NanoSeconds, t1.In(time.Now().Location()))\n\trequire.Equal(t, \"toDateTime64('1641999600123456789', 9)\", val)\n\tval, _ = format(t1.Location(), NanoSeconds, time.Unix(0, 0))\n\trequire.Equal(t, \"toDateTime(0)\", val)\n\tval, _ = format(tz, NanoSeconds, t1)\n\trequire.Equal(t, \"toDateTime64('2022-01-12 15:00:00.123456789', 9, 'UTC')\", val)\n}\n\nfunc TestStringBasedType(t *testing.T) {\n\ttype (\n\t\tSupperString       string\n\t\tSupperSupperString string\n\t)\n\tval, _ := format(time.UTC, Seconds, SupperString(\"a\"))\n\trequire.Equal(t, \"'a'\", val)\n\tval, _ = format(time.UTC, Seconds, SupperSupperString(\"a\"))\n\trequire.Equal(t, \"'a'\", val)\n\tval, _ = format(time.UTC, Seconds, []SupperSupperString{\"a\", \"b\", \"c\"})\n\trequire.Equal(t, \"['a', 'b', 'c']\", val)\n}\n\nfunc TestFormatGroup(t *testing.T) {\n\tgroupSet := GroupSet{Value: []any{\"A\", 1}}\n\tval, _ := format(time.UTC, Seconds, groupSet)\n\tassert.Equal(t, \"('A', 1)\", val)\n\t{\n\t\ttuples := []GroupSet{\n\t\t\t{Value: []any{\"A\", 1}},\n\t\t\t{Value: []any{\"B\", 2}},\n\t\t}\n\t\tval, _ = format(time.UTC, Seconds, tuples)\n\t\tassert.Equal(t, \"('A', 1), ('B', 2)\", val)\n\t}\n}\n\nfunc TestFormatArray(t *testing.T) {\n\tarraySet := ArraySet{\"A\", 1}\n\tval, _ := format(time.UTC, Seconds, arraySet)\n\tassert.Equal(t, \"['A', 1]\", val)\n}\n\nfunc TestFormatMap(t *testing.T) {\n\tval, _ := format(time.UTC, Seconds, map[string]uint8{\"a\": 1})\n\tassert.Equal(t, \"map('a', 1)\", val)\n}\n\n// a simple (non thread safe) ordered map, implementing the column.OrderedMap interface\ntype OrderedMap struct {\n\tkeys   []any\n\tvalues map[any]any\n}\n\nfunc NewOrderedMap() *OrderedMap {\n\tom := OrderedMap{}\n\tom.keys = []any{}\n\tom.values = map[any]any{}\n\treturn &om\n}\n\nfunc (om *OrderedMap) Get(key any) (any, bool) {\n\tif value, present := om.values[key]; present {\n\t\treturn value, present\n\t}\n\treturn nil, false\n}\n\nfunc (om *OrderedMap) Put(key any, value any) {\n\tif _, present := om.values[key]; present {\n\t\tom.values[key] = value\n\t\treturn\n\t}\n\tom.keys = append(om.keys, key)\n\tom.values[key] = value\n}\n\nfunc (om *OrderedMap) Keys() <-chan any {\n\tch := make(chan any)\n\tgo func() {\n\t\tdefer close(ch)\n\t\tfor _, key := range om.keys {\n\t\t\tch <- key\n\t\t}\n\t}()\n\treturn ch\n}\n\nfunc TestFormatMapOrdered(t *testing.T) {\n\tom := NewOrderedMap()\n\tom.Put(\"b\", 2)\n\tom.Put(\"a\", 1)\n\n\tval, _ := format(time.UTC, Seconds, om)\n\tassert.Equal(t, \"map('b', 2, 'a', 1)\", val)\n}\n\nfunc TestBindNamedWithTernaryOperator(t *testing.T) {\n\tsqls := []string{\n\t\t`SELECT if(@arg1,@arg2,@arg3)`, // correct\n\t\t`SELECT @arg1?@arg2:@arg3`,     // failed here\n\t}\n\tfor _, sql := range sqls {\n\t\t_, err := bind(time.Local, sql,\n\t\t\tNamed(\"arg1\", 0),\n\t\t\tNamed(\"arg2\", 1),\n\t\t\tNamed(\"arg3\", 2))\n\t\tassert.NoError(t, err)\n\t}\n}\n\nfunc BenchmarkBindNumeric(b *testing.B) {\n\tb.ReportAllocs()\n\tfor i := 0; i < b.N; i++ {\n\t\t_, err := bind(time.Local, `\n\t\tSELECT * FROM t WHERE col = $1\n\t\t\tAND col2 = $2\n\t\t\tAND col3 = $1\n\t\t\tANS col4 = $3\n\t\t\tAND null_coll = $4\n\t\t)\n\t\t`, 1, 2, \"I'm a string param\", nil)\n\t\tif err != nil {\n\t\t\tb.Fatal(err)\n\t\t}\n\t}\n}\n\nfunc BenchmarkBindPositional(b *testing.B) {\n\tb.ReportAllocs()\n\tfor i := 0; i < b.N; i++ {\n\t\t_, err := bind(time.Local, `\n\t\tSELECT * FROM t WHERE col = ?\n\t\t\tAND col2 = ?\n\t\t\tAND col3 = ?\n\t\t\tANS col4 = ?\n\t\t\tAND null_coll = ?\n\t\t)\n\t\t`, 1, 2, 1, \"I'm a string param\", nil)\n\t\tif err != nil {\n\t\t\tb.Fatal(err)\n\t\t}\n\t}\n}\n\nfunc BenchmarkBindNamed(b *testing.B) {\n\tb.ReportAllocs()\n\tfor i := 0; i < b.N; i++ {\n\t\t_, err := bind(time.Local, `\n\t\tSELECT * FROM t WHERE col = @col1\n\t\t\tAND col2 = @col2\n\t\t\tAND col3 = @col1\n\t\t\tANS col4 = @col3\n\t\t\tAND null_coll = @col4\n\t\t)\n\t\t`,\n\t\t\tNamed(\"col1\", 1),\n\t\t\tNamed(\"col2\", 2),\n\t\t\tNamed(\"col3\", \"I'm a string param\"),\n\t\t\tNamed(\"col4\", nil),\n\t\t)\n\t\tif err != nil {\n\t\t\tb.Fatal(err)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "chcol.go",
          "type": "blob",
          "size": 1.24609375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport \"github.com/ClickHouse/clickhouse-go/v2/lib/chcol\"\n\n// Re-export chcol types/funcs to top level clickhouse package\n\ntype (\n\tVariant = chcol.Variant\n)\n\n// NewVariant creates a new Variant with the given value\nfunc NewVariant(v any) Variant {\n\treturn chcol.NewVariant(v)\n}\n\n// NewVariantWithType creates a new Variant with the given value and ClickHouse type\nfunc NewVariantWithType(v any, chType string) Variant {\n\treturn chcol.NewVariantWithType(v, chType)\n}\n"
        },
        {
          "name": "clickhouse.go",
          "type": "blob",
          "size": 8.619140625,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t_ \"time/tzdata\"\n\n\tchproto \"github.com/ClickHouse/ch-go/proto\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/contributors\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/column\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/driver\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\ntype Conn = driver.Conn\n\ntype (\n\tProgress      = proto.Progress\n\tException     = proto.Exception\n\tProfileInfo   = proto.ProfileInfo\n\tServerVersion = proto.ServerHandshake\n)\n\nvar (\n\tErrBatchInvalid              = errors.New(\"clickhouse: batch is invalid. check appended data is correct\")\n\tErrBatchAlreadySent          = errors.New(\"clickhouse: batch has already been sent\")\n\tErrBatchNotSent              = errors.New(\"clickhouse: invalid retry, batch not sent yet\")\n\tErrAcquireConnTimeout        = errors.New(\"clickhouse: acquire conn timeout. you can increase the number of max open conn or the dial timeout\")\n\tErrUnsupportedServerRevision = errors.New(\"clickhouse: unsupported server revision\")\n\tErrBindMixedParamsFormats    = errors.New(\"clickhouse [bind]: mixed named, numeric or positional parameters\")\n\tErrAcquireConnNoAddress      = errors.New(\"clickhouse: no valid address supplied\")\n\tErrServerUnexpectedData      = errors.New(\"code: 101, message: Unexpected packet Data received from client\")\n)\n\ntype OpError struct {\n\tOp         string\n\tColumnName string\n\tErr        error\n}\n\nfunc (e *OpError) Error() string {\n\tswitch err := e.Err.(type) {\n\tcase *column.Error:\n\t\treturn fmt.Sprintf(\"clickhouse [%s]: (%s %s) %s\", e.Op, e.ColumnName, err.ColumnType, err.Err)\n\tcase *column.ColumnConverterError:\n\t\tvar hint string\n\t\tif len(err.Hint) != 0 {\n\t\t\thint += \". \" + err.Hint\n\t\t}\n\t\treturn fmt.Sprintf(\"clickhouse [%s]: (%s) converting %s to %s is unsupported%s\",\n\t\t\terr.Op, e.ColumnName,\n\t\t\terr.From, err.To,\n\t\t\thint,\n\t\t)\n\t}\n\treturn fmt.Sprintf(\"clickhouse [%s]: %s\", e.Op, e.Err)\n}\n\nfunc Open(opt *Options) (driver.Conn, error) {\n\tif opt == nil {\n\t\topt = &Options{}\n\t}\n\to := opt.setDefaults()\n\tconn := &clickhouse{\n\t\topt:  o,\n\t\tidle: make(chan *connect, o.MaxIdleConns),\n\t\topen: make(chan struct{}, o.MaxOpenConns),\n\t\texit: make(chan struct{}),\n\t}\n\tgo conn.startAutoCloseIdleConnections()\n\treturn conn, nil\n}\n\ntype clickhouse struct {\n\topt    *Options\n\tidle   chan *connect\n\topen   chan struct{}\n\texit   chan struct{}\n\tconnID int64\n}\n\nfunc (clickhouse) Contributors() []string {\n\tlist := contributors.List\n\tif len(list[len(list)-1]) == 0 {\n\t\treturn list[:len(list)-1]\n\t}\n\treturn list\n}\n\nfunc (ch *clickhouse) ServerVersion() (*driver.ServerVersion, error) {\n\tvar (\n\t\tctx, cancel = context.WithTimeout(context.Background(), ch.opt.DialTimeout)\n\t\tconn, err   = ch.acquire(ctx)\n\t)\n\tdefer cancel()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tch.release(conn, nil)\n\treturn &conn.server, nil\n}\n\nfunc (ch *clickhouse) Query(ctx context.Context, query string, args ...any) (rows driver.Rows, err error) {\n\tconn, err := ch.acquire(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconn.debugf(\"[acquired] connection [%d]\", conn.id)\n\treturn conn.query(ctx, ch.release, query, args...)\n}\n\nfunc (ch *clickhouse) QueryRow(ctx context.Context, query string, args ...any) (rows driver.Row) {\n\tconn, err := ch.acquire(ctx)\n\tif err != nil {\n\t\treturn &row{\n\t\t\terr: err,\n\t\t}\n\t}\n\tconn.debugf(\"[acquired] connection [%d]\", conn.id)\n\treturn conn.queryRow(ctx, ch.release, query, args...)\n}\n\nfunc (ch *clickhouse) Exec(ctx context.Context, query string, args ...any) error {\n\tconn, err := ch.acquire(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := conn.exec(ctx, query, args...); err != nil {\n\t\tch.release(conn, err)\n\t\treturn err\n\t}\n\tch.release(conn, nil)\n\treturn nil\n}\n\nfunc (ch *clickhouse) PrepareBatch(ctx context.Context, query string, opts ...driver.PrepareBatchOption) (driver.Batch, error) {\n\tconn, err := ch.acquire(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbatch, err := conn.prepareBatch(ctx, query, getPrepareBatchOptions(opts...), ch.release, ch.acquire)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn batch, nil\n}\n\nfunc getPrepareBatchOptions(opts ...driver.PrepareBatchOption) driver.PrepareBatchOptions {\n\tvar options driver.PrepareBatchOptions\n\n\tfor _, opt := range opts {\n\t\topt(&options)\n\t}\n\n\treturn options\n}\n\nfunc (ch *clickhouse) AsyncInsert(ctx context.Context, query string, wait bool, args ...any) error {\n\tconn, err := ch.acquire(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := conn.asyncInsert(ctx, query, wait, args...); err != nil {\n\t\tch.release(conn, err)\n\t\treturn err\n\t}\n\tch.release(conn, nil)\n\treturn nil\n}\n\nfunc (ch *clickhouse) Ping(ctx context.Context) (err error) {\n\tconn, err := ch.acquire(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := conn.ping(ctx); err != nil {\n\t\tch.release(conn, err)\n\t\treturn err\n\t}\n\tch.release(conn, nil)\n\treturn nil\n}\n\nfunc (ch *clickhouse) Stats() driver.Stats {\n\treturn driver.Stats{\n\t\tOpen:         len(ch.open),\n\t\tIdle:         len(ch.idle),\n\t\tMaxOpenConns: cap(ch.open),\n\t\tMaxIdleConns: cap(ch.idle),\n\t}\n}\n\nfunc (ch *clickhouse) dial(ctx context.Context) (conn *connect, err error) {\n\tconnID := int(atomic.AddInt64(&ch.connID, 1))\n\n\tdialFunc := func(ctx context.Context, addr string, opt *Options) (DialResult, error) {\n\t\tconn, err := dial(ctx, addr, connID, opt)\n\n\t\treturn DialResult{conn}, err\n\t}\n\n\tdialStrategy := DefaultDialStrategy\n\tif ch.opt.DialStrategy != nil {\n\t\tdialStrategy = ch.opt.DialStrategy\n\t}\n\n\tresult, err := dialStrategy(ctx, connID, ch.opt, dialFunc)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn result.conn, nil\n}\n\nfunc DefaultDialStrategy(ctx context.Context, connID int, opt *Options, dial Dial) (r DialResult, err error) {\n\trandom := rand.Int()\n\tfor i := range opt.Addr {\n\t\tvar num int\n\t\tswitch opt.ConnOpenStrategy {\n\t\tcase ConnOpenInOrder:\n\t\t\tnum = i\n\t\tcase ConnOpenRoundRobin:\n\t\t\tnum = (int(connID) + i) % len(opt.Addr)\n\t\tcase ConnOpenRandom:\n\t\t\tnum = (random + i) % len(opt.Addr)\n\t\t}\n\n\t\tif r, err = dial(ctx, opt.Addr[num], opt); err == nil {\n\t\t\treturn r, nil\n\t\t}\n\t}\n\n\tif err == nil {\n\t\terr = ErrAcquireConnNoAddress\n\t}\n\n\treturn r, err\n}\n\nfunc (ch *clickhouse) acquire(ctx context.Context) (conn *connect, err error) {\n\ttimer := time.NewTimer(ch.opt.DialTimeout)\n\tdefer timer.Stop()\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn nil, ctx.Err()\n\tdefault:\n\t}\n\tselect {\n\tcase <-timer.C:\n\t\treturn nil, ErrAcquireConnTimeout\n\tcase <-ctx.Done():\n\t\treturn nil, ctx.Err()\n\tcase ch.open <- struct{}{}:\n\t}\n\tselect {\n\tcase <-timer.C:\n\t\tselect {\n\t\tcase <-ch.open:\n\t\tdefault:\n\t\t}\n\t\treturn nil, ErrAcquireConnTimeout\n\tcase conn := <-ch.idle:\n\t\tif conn.isBad() {\n\t\t\tconn.close()\n\t\t\tif conn, err = ch.dial(ctx); err != nil {\n\t\t\t\tselect {\n\t\t\t\tcase <-ch.open:\n\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t\tconn.released = false\n\t\treturn conn, nil\n\tdefault:\n\t}\n\tif conn, err = ch.dial(ctx); err != nil {\n\t\tselect {\n\t\tcase <-ch.open:\n\t\tdefault:\n\t\t}\n\t\treturn nil, err\n\t}\n\treturn conn, nil\n}\n\nfunc (ch *clickhouse) startAutoCloseIdleConnections() {\n\tticker := time.NewTicker(ch.opt.ConnMaxLifetime)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tch.closeIdleExpired()\n\t\tcase <-ch.exit:\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (ch *clickhouse) closeIdleExpired() {\n\tcutoff := time.Now().Add(-ch.opt.ConnMaxLifetime)\n\tfor {\n\t\tselect {\n\t\tcase conn := <-ch.idle:\n\t\t\tif conn.connectedAt.Before(cutoff) {\n\t\t\t\tconn.close()\n\t\t\t} else {\n\t\t\t\tselect {\n\t\t\t\tcase ch.idle <- conn:\n\t\t\t\tdefault:\n\t\t\t\t\tconn.close()\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\tdefault:\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (ch *clickhouse) release(conn *connect, err error) {\n\tif conn.released {\n\t\treturn\n\t}\n\tconn.released = true\n\tselect {\n\tcase <-ch.open:\n\tdefault:\n\t}\n\tif err != nil || time.Since(conn.connectedAt) >= ch.opt.ConnMaxLifetime {\n\t\tconn.close()\n\t\treturn\n\t}\n\tif ch.opt.FreeBufOnConnRelease {\n\t\tconn.buffer = new(chproto.Buffer)\n\t\tconn.compressor.Data = nil\n\t}\n\tselect {\n\tcase ch.idle <- conn:\n\tdefault:\n\t\tconn.close()\n\t}\n}\n\nfunc (ch *clickhouse) Close() error {\n\tfor {\n\t\tselect {\n\t\tcase c := <-ch.idle:\n\t\t\tc.close()\n\t\tdefault:\n\t\t\tch.exit <- struct{}{}\n\t\t\treturn nil\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "clickhouse_options.go",
          "type": "blob",
          "size": 9.8388671875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/ClickHouse/ch-go/compress\"\n\t\"github.com/pkg/errors\"\n)\n\ntype CompressionMethod byte\n\nfunc (c CompressionMethod) String() string {\n\tswitch c {\n\tcase CompressionNone:\n\t\treturn \"none\"\n\tcase CompressionZSTD:\n\t\treturn \"zstd\"\n\tcase CompressionLZ4:\n\t\treturn \"lz4\"\n\tcase CompressionGZIP:\n\t\treturn \"gzip\"\n\tcase CompressionDeflate:\n\t\treturn \"deflate\"\n\tcase CompressionBrotli:\n\t\treturn \"br\"\n\tdefault:\n\t\treturn \"\"\n\t}\n}\n\nconst (\n\tCompressionNone    = CompressionMethod(compress.None)\n\tCompressionLZ4     = CompressionMethod(compress.LZ4)\n\tCompressionZSTD    = CompressionMethod(compress.ZSTD)\n\tCompressionGZIP    = CompressionMethod(0x95)\n\tCompressionDeflate = CompressionMethod(0x96)\n\tCompressionBrotli  = CompressionMethod(0x97)\n)\n\nvar compressionMap = map[string]CompressionMethod{\n\t\"none\":    CompressionNone,\n\t\"zstd\":    CompressionZSTD,\n\t\"lz4\":     CompressionLZ4,\n\t\"gzip\":    CompressionGZIP,\n\t\"deflate\": CompressionDeflate,\n\t\"br\":      CompressionBrotli,\n}\n\ntype Auth struct { // has_control_character\n\tDatabase string\n\tUsername string\n\tPassword string\n}\n\ntype Compression struct {\n\tMethod CompressionMethod\n\t// this only applies to zlib and brotli compression algorithms\n\tLevel int\n}\n\ntype ConnOpenStrategy uint8\n\nconst (\n\tConnOpenInOrder ConnOpenStrategy = iota\n\tConnOpenRoundRobin\n\tConnOpenRandom\n)\n\ntype Protocol int\n\nconst (\n\tNative Protocol = iota\n\tHTTP\n)\n\nfunc (p Protocol) String() string {\n\tswitch p {\n\tcase Native:\n\t\treturn \"native\"\n\tcase HTTP:\n\t\treturn \"http\"\n\tdefault:\n\t\treturn \"\"\n\t}\n}\n\nfunc ParseDSN(dsn string) (*Options, error) {\n\topt := &Options{}\n\tif err := opt.fromDSN(dsn); err != nil {\n\t\treturn nil, err\n\t}\n\treturn opt, nil\n}\n\ntype Dial func(ctx context.Context, addr string, opt *Options) (DialResult, error)\ntype DialResult struct {\n\tconn *connect\n}\n\ntype HTTPProxy func(*http.Request) (*url.URL, error)\n\ntype Options struct {\n\tProtocol   Protocol\n\tClientInfo ClientInfo\n\n\tTLS                  *tls.Config\n\tAddr                 []string\n\tAuth                 Auth\n\tDialContext          func(ctx context.Context, addr string) (net.Conn, error)\n\tDialStrategy         func(ctx context.Context, connID int, options *Options, dial Dial) (DialResult, error)\n\tDebug                bool\n\tDebugf               func(format string, v ...any) // only works when Debug is true\n\tSettings             Settings\n\tCompression          *Compression\n\tDialTimeout          time.Duration // default 30 second\n\tMaxOpenConns         int           // default MaxIdleConns + 5\n\tMaxIdleConns         int           // default 5\n\tConnMaxLifetime      time.Duration // default 1 hour\n\tConnOpenStrategy     ConnOpenStrategy\n\tFreeBufOnConnRelease bool              // drop preserved memory buffer after each query\n\tHttpHeaders          map[string]string // set additional headers on HTTP requests\n\tHttpUrlPath          string            // set additional URL path for HTTP requests\n\tBlockBufferSize      uint8             // default 2 - can be overwritten on query\n\tMaxCompressionBuffer int               // default 10485760 - measured in bytes  i.e.\n\n\t// HTTPProxy specifies an HTTP proxy URL to use for requests made by the client.\n\tHTTPProxyURL *url.URL\n\n\tscheme      string\n\tReadTimeout time.Duration\n}\n\nfunc (o *Options) fromDSN(in string) error {\n\tdsn, err := url.Parse(in)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif dsn.Host == \"\" {\n\t\treturn errors.New(\"parse dsn address failed\")\n\t}\n\n\tif o.Settings == nil {\n\t\to.Settings = make(Settings)\n\t}\n\tif dsn.User != nil {\n\t\to.Auth.Username = dsn.User.Username()\n\t\to.Auth.Password, _ = dsn.User.Password()\n\t}\n\to.Addr = append(o.Addr, strings.Split(dsn.Host, \",\")...)\n\tvar (\n\t\tsecure     bool\n\t\tparams     = dsn.Query()\n\t\tskipVerify bool\n\t)\n\to.Auth.Database = strings.TrimPrefix(dsn.Path, \"/\")\n\n\tfor v := range params {\n\t\tswitch v {\n\t\tcase \"debug\":\n\t\t\to.Debug, _ = strconv.ParseBool(params.Get(v))\n\t\tcase \"compress\":\n\t\t\tif on, _ := strconv.ParseBool(params.Get(v)); on {\n\t\t\t\tif o.Compression == nil {\n\t\t\t\t\to.Compression = &Compression{}\n\t\t\t\t}\n\n\t\t\t\to.Compression.Method = CompressionLZ4\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif compressMethod, ok := compressionMap[params.Get(v)]; ok {\n\t\t\t\tif o.Compression == nil {\n\t\t\t\t\to.Compression = &Compression{\n\t\t\t\t\t\t// default for now same as Clickhouse - https://clickhouse.com/docs/en/operations/settings/settings#settings-http_zlib_compression_level\n\t\t\t\t\t\tLevel: 3,\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\to.Compression.Method = compressMethod\n\t\t\t}\n\t\tcase \"compress_level\":\n\t\t\tlevel, err := strconv.ParseInt(params.Get(v), 10, 8)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"compress_level invalid value\")\n\t\t\t}\n\n\t\t\tif o.Compression == nil {\n\t\t\t\to.Compression = &Compression{\n\t\t\t\t\t// a level alone doesn't enable compression\n\t\t\t\t\tMethod: CompressionNone,\n\t\t\t\t\tLevel:  int(level),\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\to.Compression.Level = int(level)\n\t\tcase \"max_compression_buffer\":\n\t\t\tmax, err := strconv.Atoi(params.Get(v))\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"max_compression_buffer invalid value\")\n\t\t\t}\n\t\t\to.MaxCompressionBuffer = max\n\t\tcase \"dial_timeout\":\n\t\t\tduration, err := time.ParseDuration(params.Get(v))\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"clickhouse [dsn parse]: dial timeout: %s\", err)\n\t\t\t}\n\t\t\to.DialTimeout = duration\n\t\tcase \"block_buffer_size\":\n\t\t\tif blockBufferSize, err := strconv.ParseUint(params.Get(v), 10, 8); err == nil {\n\t\t\t\tif blockBufferSize <= 0 {\n\t\t\t\t\treturn fmt.Errorf(\"block_buffer_size must be greater than 0\")\n\t\t\t\t}\n\t\t\t\to.BlockBufferSize = uint8(blockBufferSize)\n\t\t\t} else {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase \"read_timeout\":\n\t\t\tduration, err := time.ParseDuration(params.Get(v))\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"clickhouse [dsn parse]:read timeout: %s\", err)\n\t\t\t}\n\t\t\to.ReadTimeout = duration\n\t\tcase \"secure\":\n\t\t\tsecureParam := params.Get(v)\n\t\t\tif secureParam == \"\" {\n\t\t\t\tsecure = true\n\t\t\t} else {\n\t\t\t\tsecure, err = strconv.ParseBool(secureParam)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"clickhouse [dsn parse]:secure: %s\", err)\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"skip_verify\":\n\t\t\tskipVerifyParam := params.Get(v)\n\t\t\tif skipVerifyParam == \"\" {\n\t\t\t\tskipVerify = true\n\t\t\t} else {\n\t\t\t\tskipVerify, err = strconv.ParseBool(skipVerifyParam)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"clickhouse [dsn parse]:verify: %s\", err)\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"connection_open_strategy\":\n\t\t\tswitch params.Get(v) {\n\t\t\tcase \"in_order\":\n\t\t\t\to.ConnOpenStrategy = ConnOpenInOrder\n\t\t\tcase \"round_robin\":\n\t\t\t\to.ConnOpenStrategy = ConnOpenRoundRobin\n\t\t\tcase \"random\":\n\t\t\t\to.ConnOpenStrategy = ConnOpenRandom\n\t\t\t}\n\t\tcase \"max_open_conns\":\n\t\t\tmaxOpenConns, err := strconv.Atoi(params.Get(v))\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"max_open_conns invalid value\")\n\t\t\t}\n\t\t\to.MaxOpenConns = maxOpenConns\n\t\tcase \"max_idle_conns\":\n\t\t\tmaxIdleConns, err := strconv.Atoi(params.Get(v))\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"max_idle_conns invalid value\")\n\t\t\t}\n\t\t\to.MaxIdleConns = maxIdleConns\n\t\tcase \"conn_max_lifetime\":\n\t\t\tconnMaxLifetime, err := time.ParseDuration(params.Get(v))\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"conn_max_lifetime invalid value\")\n\t\t\t}\n\t\t\to.ConnMaxLifetime = connMaxLifetime\n\t\tcase \"username\":\n\t\t\to.Auth.Username = params.Get(v)\n\t\tcase \"password\":\n\t\t\to.Auth.Password = params.Get(v)\n\t\tcase \"client_info_product\":\n\t\t\tchunks := strings.Split(params.Get(v), \",\")\n\n\t\t\tfor _, chunk := range chunks {\n\t\t\t\tname, version, _ := strings.Cut(chunk, \"/\")\n\n\t\t\t\to.ClientInfo.Products = append(o.ClientInfo.Products, struct{ Name, Version string }{\n\t\t\t\t\tname,\n\t\t\t\t\tversion,\n\t\t\t\t})\n\t\t\t}\n\t\tcase \"http_proxy\":\n\t\t\tproxyURL, err := url.Parse(params.Get(v))\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"clickhouse [dsn parse]: http_proxy: %s\", err)\n\t\t\t}\n\t\t\to.HTTPProxyURL = proxyURL\n\t\tdefault:\n\t\t\tswitch p := strings.ToLower(params.Get(v)); p {\n\t\t\tcase \"true\":\n\t\t\t\to.Settings[v] = int(1)\n\t\t\tcase \"false\":\n\t\t\t\to.Settings[v] = int(0)\n\t\t\tdefault:\n\t\t\t\tif n, err := strconv.Atoi(p); err == nil {\n\t\t\t\t\to.Settings[v] = n\n\t\t\t\t} else {\n\t\t\t\t\to.Settings[v] = p\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif secure {\n\t\to.TLS = &tls.Config{\n\t\t\tInsecureSkipVerify: skipVerify,\n\t\t}\n\t}\n\to.scheme = dsn.Scheme\n\tswitch dsn.Scheme {\n\tcase \"http\":\n\t\tif secure {\n\t\t\treturn fmt.Errorf(\"clickhouse [dsn parse]: http with TLS specify\")\n\t\t}\n\t\to.Protocol = HTTP\n\tcase \"https\":\n\t\tif !secure {\n\t\t\treturn fmt.Errorf(\"clickhouse [dsn parse]: https without TLS\")\n\t\t}\n\t\to.Protocol = HTTP\n\tdefault:\n\t\to.Protocol = Native\n\t}\n\treturn nil\n}\n\n// receive copy of Options, so we don't modify original - so its reusable\nfunc (o Options) setDefaults() *Options {\n\tif len(o.Auth.Username) == 0 {\n\t\to.Auth.Username = \"default\"\n\t}\n\tif o.DialTimeout == 0 {\n\t\to.DialTimeout = time.Second * 30\n\t}\n\tif o.ReadTimeout == 0 {\n\t\to.ReadTimeout = time.Second * time.Duration(300)\n\t}\n\tif o.MaxIdleConns <= 0 {\n\t\to.MaxIdleConns = 5\n\t}\n\tif o.MaxOpenConns <= 0 {\n\t\to.MaxOpenConns = o.MaxIdleConns + 5\n\t}\n\tif o.ConnMaxLifetime == 0 {\n\t\to.ConnMaxLifetime = time.Hour\n\t}\n\tif o.BlockBufferSize <= 0 {\n\t\to.BlockBufferSize = 2\n\t}\n\tif o.MaxCompressionBuffer <= 0 {\n\t\to.MaxCompressionBuffer = 10485760\n\t}\n\tif o.Addr == nil || len(o.Addr) == 0 {\n\t\tswitch o.Protocol {\n\t\tcase Native:\n\t\t\to.Addr = []string{\"localhost:9000\"}\n\t\tcase HTTP:\n\t\t\to.Addr = []string{\"localhost:8123\"}\n\t\t}\n\t}\n\treturn &o\n}\n"
        },
        {
          "name": "clickhouse_options_test.go",
          "type": "blob",
          "size": 11.2958984375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"crypto/tls\"\n\t\"net/url\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\n// TestParseDSN does not implement all use cases yet\nfunc TestParseDSN(t *testing.T) {\n\ttestCases := []struct {\n\t\tname        string\n\t\tdsn         string\n\t\texpected    *Options\n\t\texpectedErr string\n\t}{\n\t\t{\n\t\t\t\"empty dsn\",\n\t\t\t\"\",\n\t\t\tnil,\n\t\t\t\"parse dsn address failed\",\n\t\t},\n\t\t{\n\t\t\t\"no host\",\n\t\t\t\"/test_database\",\n\t\t\tnil,\n\t\t\t\"parse dsn address failed\",\n\t\t},\n\t\t{\n\t\t\t\"no protocol\",\n\t\t\t\"127.0.0.1/test_database\",\n\t\t\tnil,\n\t\t\t\"parse dsn address failed\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol\",\n\t\t\t\"clickhouse://127.0.0.1/\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tscheme:   \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"http protocol\",\n\t\t\t\"http://127.0.0.1/\",\n\t\t\t&Options{\n\t\t\t\tProtocol: HTTP,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tscheme:   \"http\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol\",\n\t\t\t\"clickhouse://127.0.0.1/test_database\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"http protocol\",\n\t\t\t\"http://127.0.0.1/test_database\",\n\t\t\t&Options{\n\t\t\t\tProtocol: HTTP,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"http\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with user\",\n\t\t\t\"clickhouse://user@127.0.0.1/test_database\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t\tUsername: \"user\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with authenticated user\",\n\t\t\t\"clickhouse://joe:Ys31@127.0.0.1/test_database\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t\tUsername: \"joe\",\n\t\t\t\t\tPassword: \"Ys31\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with debug\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?debug=true\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tDebug:  true,\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with secure\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?secure=true\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS: &tls.Config{\n\t\t\t\t\tInsecureSkipVerify: false,\n\t\t\t\t},\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with skip_verify\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?secure=true&skip_verify=true\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS: &tls.Config{\n\t\t\t\t\tInsecureSkipVerify: true,\n\t\t\t\t},\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with secure (legacy)\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?secure\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS: &tls.Config{\n\t\t\t\t\tInsecureSkipVerify: false,\n\t\t\t\t},\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with skip_verify (legacy)\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?secure&skip_verify\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS: &tls.Config{\n\t\t\t\t\tInsecureSkipVerify: true,\n\t\t\t\t},\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with secure (bad)\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?secure=ture\",\n\t\t\tnil,\n\t\t\t\"clickhouse [dsn parse]:secure: strconv.ParseBool: parsing \\\"ture\\\": invalid syntax\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with skip_verify (bad)\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?secure&skip_verify=ture\",\n\t\t\tnil,\n\t\t\t\"clickhouse [dsn parse]:verify: strconv.ParseBool: parsing \\\"ture\\\": invalid syntax\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with default lz4 compression\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?compress=true\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tCompression: &Compression{\n\t\t\t\t\tMethod: CompressionLZ4,\n\t\t\t\t},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with none compression\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?compress=none\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tCompression: &Compression{\n\t\t\t\t\tMethod: CompressionNone,\n\t\t\t\t\tLevel:  3,\n\t\t\t\t},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with zstd compression\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?compress=zstd\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tCompression: &Compression{\n\t\t\t\t\tMethod: CompressionZSTD,\n\t\t\t\t\tLevel:  3,\n\t\t\t\t},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with lz4 compression\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?compress=lz4\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tCompression: &Compression{\n\t\t\t\t\tMethod: CompressionLZ4,\n\t\t\t\t\tLevel:  3,\n\t\t\t\t},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with gzip compression\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?compress=gzip\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tCompression: &Compression{\n\t\t\t\t\tMethod: CompressionGZIP,\n\t\t\t\t\tLevel:  3,\n\t\t\t\t},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with deflate compression\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?compress=deflate\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tCompression: &Compression{\n\t\t\t\t\tMethod: CompressionDeflate,\n\t\t\t\t\tLevel:  3,\n\t\t\t\t},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with br compression\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?compress=br\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tCompression: &Compression{\n\t\t\t\t\tMethod: CompressionBrotli,\n\t\t\t\t\tLevel:  3,\n\t\t\t\t},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with default lz4 compression and compression level 5\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?compress=true&compress_level=5\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tCompression: &Compression{\n\t\t\t\t\tMethod: CompressionLZ4,\n\t\t\t\t\tLevel:  5,\n\t\t\t\t},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with 1KiB max compression buffer\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?max_compression_buffer=1024\",\n\t\t\t&Options{\n\t\t\t\tProtocol:             Native,\n\t\t\t\tTLS:                  nil,\n\t\t\t\tAddr:                 []string{\"127.0.0.1\"},\n\t\t\t\tSettings:             Settings{},\n\t\t\t\tMaxCompressionBuffer: 1024,\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with invalid numeric max compression buffer\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?max_compression_buffer=onebyte\",\n\t\t\tnil,\n\t\t\t\"max_compression_buffer invalid value: strconv.Atoi: parsing \\\"onebyte\\\": invalid syntax\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol with invalid numeric compress level\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?compress_level=first\",\n\t\t\tnil,\n\t\t\t\"compress_level invalid value: strconv.ParseInt: parsing \\\"first\\\": invalid syntax\",\n\t\t},\n\t\t{\n\t\t\t\"native protocol dial timeout\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?max_compression_buffer=1024\",\n\t\t\t&Options{\n\t\t\t\tProtocol:             Native,\n\t\t\t\tTLS:                  nil,\n\t\t\t\tAddr:                 []string{\"127.0.0.1\"},\n\t\t\t\tSettings:             Settings{},\n\t\t\t\tMaxCompressionBuffer: 1024,\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"client info\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?client_info_product=grafana/6.1,clickhouse-datasource/1.1\",\n\t\t\t&Options{\n\t\t\t\tProtocol: Native,\n\t\t\t\tClientInfo: ClientInfo{\n\t\t\t\t\tProducts: []struct{ Name, Version string }{\n\t\t\t\t\t\t{\"grafana\", \"6.1\"},\n\t\t\t\t\t\t{\"clickhouse-datasource\", \"1.1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTLS:      nil,\n\t\t\t\tAddr:     []string{\"127.0.0.1\"},\n\t\t\t\tSettings: Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"client connection pool settings\",\n\t\t\t\"clickhouse://127.0.0.1/test_database?max_open_conns=-1&max_idle_conns=0&conn_max_lifetime=1h\",\n\t\t\t&Options{\n\t\t\t\tProtocol:        Native,\n\t\t\t\tMaxOpenConns:    -1,\n\t\t\t\tMaxIdleConns:    0,\n\t\t\t\tConnMaxLifetime: time.Hour,\n\t\t\t\tAddr:            []string{\"127.0.0.1\"},\n\t\t\t\tSettings:        Settings{},\n\t\t\t\tAuth: Auth{\n\t\t\t\t\tDatabase: \"test_database\",\n\t\t\t\t},\n\t\t\t\tscheme: \"clickhouse\",\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t\t{\n\t\t\t\"http protocol with proxy\",\n\t\t\t\"http://127.0.0.1/?http_proxy=http%3A%2F%2Fproxy.example.com%3A3128\",\n\t\t\t&Options{\n\t\t\t\tProtocol:     HTTP,\n\t\t\t\tTLS:          nil,\n\t\t\t\tAddr:         []string{\"127.0.0.1\"},\n\t\t\t\tSettings:     Settings{},\n\t\t\t\tscheme:       \"http\",\n\t\t\t\tHTTPProxyURL: parseURL(t, \"http://proxy.example.com:3128\"),\n\t\t\t},\n\t\t\t\"\",\n\t\t},\n\t}\n\n\tfor _, testCase := range testCases {\n\t\tt.Run(testCase.name, func(t *testing.T) {\n\t\t\topts, err := ParseDSN(testCase.dsn)\n\n\t\t\tif testCase.expectedErr != \"\" {\n\t\t\t\tassert.Nil(t, opts)\n\t\t\t\tassert.EqualError(t, err, testCase.expectedErr)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tassert.Equal(t, testCase.expected, opts)\n\t\t\tassert.Nil(t, err)\n\t\t})\n\t}\n}\n\nfunc parseURL(t *testing.T, v string) *url.URL {\n\tu, err := url.Parse(v)\n\trequire.NoError(t, err)\n\treturn u\n}\n"
        },
        {
          "name": "clickhouse_rows.go",
          "type": "blob",
          "size": 3.35546875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"database/sql\"\n\t\"io\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\ntype rows struct {\n\terr       error\n\trow       int\n\tblock     *proto.Block\n\ttotals    *proto.Block\n\terrors    chan error\n\tstream    chan *proto.Block\n\tcolumns   []string\n\tstructMap *structMap\n}\n\nfunc (r *rows) Next() (result bool) {\n\tdefer func() {\n\t\tif !result {\n\t\t\tr.Close()\n\t\t}\n\t}()\n\tif r.block == nil {\n\t\treturn false\n\t}\nnext:\n\tif r.row >= r.block.Rows() {\n\t\tif r.stream == nil {\n\t\t\treturn false\n\t\t}\n\t\tselect {\n\t\tcase err := <-r.errors:\n\t\t\tif err != nil {\n\t\t\t\tr.err = err\n\t\t\t\treturn false\n\t\t\t}\n\t\tcase block := <-r.stream:\n\t\t\tif block == nil {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif block.Packet == proto.ServerTotals {\n\t\t\t\tr.row, r.block, r.totals = 0, nil, block\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tr.row, r.block = 0, block\n\t\t}\n\t\tgoto next\n\t}\n\tr.row++\n\treturn r.row <= r.block.Rows()\n}\n\nfunc (r *rows) Scan(dest ...any) error {\n\tif r.block == nil || (r.row == 0 && r.row >= r.block.Rows()) { // call without next when result is empty\n\t\treturn io.EOF\n\t}\n\treturn scan(r.block, r.row, dest...)\n}\n\nfunc (r *rows) ScanStruct(dest any) error {\n\tvalues, err := r.structMap.Map(\"ScanStruct\", r.columns, dest, true)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn r.Scan(values...)\n}\n\nfunc (r *rows) Totals(dest ...any) error {\n\tif r.totals == nil {\n\t\treturn sql.ErrNoRows\n\t}\n\treturn scan(r.totals, 1, dest...)\n}\n\nfunc (r *rows) Columns() []string {\n\treturn r.columns\n}\n\nfunc (r *rows) Close() error {\n\tif r.errors == nil && r.stream == nil {\n\t\treturn r.err\n\t}\n\n\tif r.errors == nil {\n\t\tfor range r.stream {\n\t\t}\n\t\treturn nil\n\t}\n\n\tif r.stream == nil {\n\t\tfor err := range r.errors {\n\t\t\tr.err = err\n\t\t}\n\t\treturn r.err\n\t}\n\n\terrorsClosed := false\n\tstreamClosed := false\n\tfor {\n\t\tselect {\n\t\tcase _, ok := <-r.stream:\n\t\t\tif !ok {\n\t\t\t\tstreamClosed = true\n\t\t\t}\n\t\tcase err, ok := <-r.errors:\n\t\t\tif err != nil {\n\t\t\t\tr.err = err\n\t\t\t}\n\t\t\tif !ok {\n\t\t\t\terrorsClosed = true\n\t\t\t}\n\t\t}\n\n\t\tif errorsClosed && streamClosed {\n\t\t\treturn r.err\n\t\t}\n\t}\n}\n\nfunc (r *rows) Err() error {\n\treturn r.err\n}\n\ntype row struct {\n\terr  error\n\trows *rows\n}\n\nfunc (r *row) Err() error {\n\treturn r.err\n}\n\nfunc (r *row) ScanStruct(dest any) error {\n\tif r.err != nil {\n\t\treturn r.err\n\t}\n\tvalues, err := r.rows.structMap.Map(\"ScanStruct\", r.rows.columns, dest, true)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn r.Scan(values...)\n}\n\nfunc (r *row) Scan(dest ...any) error {\n\tif r.err != nil {\n\t\treturn r.err\n\t}\n\tif !r.rows.Next() {\n\t\tr.rows.Close()\n\t\tif err := r.rows.Err(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn sql.ErrNoRows\n\t}\n\tif err := r.rows.Scan(dest...); err != nil {\n\t\treturn err\n\t}\n\treturn r.rows.Close()\n}\n"
        },
        {
          "name": "clickhouse_rows_column_type.go",
          "type": "blob",
          "size": 1.60546875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"reflect\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/column\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/driver\"\n)\n\ntype columnType struct {\n\tname     string\n\tchType   string\n\tnullable bool\n\tscanType reflect.Type\n}\n\nfunc (c *columnType) Name() string {\n\treturn c.name\n}\n\nfunc (c *columnType) Nullable() bool {\n\treturn c.nullable\n}\n\nfunc (c *columnType) ScanType() reflect.Type {\n\treturn c.scanType\n}\n\nfunc (c *columnType) DatabaseTypeName() string {\n\treturn c.chType\n}\n\nfunc (r *rows) ColumnTypes() []driver.ColumnType {\n\ttypes := make([]driver.ColumnType, 0, len(r.columns))\n\tfor i, c := range r.block.Columns {\n\t\t_, nullable := c.(*column.Nullable)\n\t\ttypes = append(types, &columnType{\n\t\t\tname:     r.columns[i],\n\t\t\tchType:   string(c.Type()),\n\t\t\tnullable: nullable,\n\t\t\tscanType: c.ScanType(),\n\t\t})\n\t}\n\treturn types\n}\n"
        },
        {
          "name": "clickhouse_rows_test.go",
          "type": "blob",
          "size": 2.23046875,
          "content": "package clickhouse\n\nimport (\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"strconv\"\n\t\"testing\"\n)\n\nfunc TestReadWithEmptyBlock(t *testing.T) {\n\tblockInitFunc := func() *proto.Block {\n\t\tretVal := &proto.Block{\n\t\t\tPacket:   0,\n\t\t\tColumns:  nil,\n\t\t\tTimezone: nil,\n\t\t}\n\t\tretVal.AddColumn(\"col1\", (\"Int64\"))\n\t\tretVal.AddColumn(\"col2\", (\"String\"))\n\t\treturn retVal\n\t}\n\n\ttestCases := map[string]struct {\n\t\tactual   func() rows\n\t\texpected int\n\t}{\n\t\t\"none empty\": {\n\t\t\tfunc() rows {\n\t\t\t\tfirstBlock := blockInitFunc()\n\t\t\t\tfirstBlock.Append(int64(0), strconv.Itoa(0))\n\t\t\t\tblockChan := make(chan *proto.Block)\n\t\t\t\tgo func() {\n\t\t\t\t\tfor i := 1; i < 10; i++ {\n\t\t\t\t\t\tblock := blockInitFunc()\n\t\t\t\t\t\tblock.Append(int64(i), strconv.Itoa(i))\n\t\t\t\t\t\tblockChan <- block\n\t\t\t\t\t}\n\t\t\t\t\tclose(blockChan)\n\t\t\t\t}()\n\t\t\t\treturn rows{\n\t\t\t\t\terr:       nil,\n\t\t\t\t\trow:       0,\n\t\t\t\t\tblock:     firstBlock,\n\t\t\t\t\ttotals:    nil,\n\t\t\t\t\terrors:    nil,\n\t\t\t\t\tstream:    blockChan,\n\t\t\t\t\tcolumns:   nil,\n\t\t\t\t\tstructMap: nil,\n\t\t\t\t}\n\t\t\t},\n\t\t\t10,\n\t\t},\n\t\t\"all empty\": {\n\t\t\tfunc() rows {\n\t\t\t\tfirstBlock := blockInitFunc()\n\t\t\t\tblockChan := make(chan *proto.Block)\n\t\t\t\tgo func() {\n\t\t\t\t\tfor i := 1; i < 10; i++ {\n\t\t\t\t\t\tblock := blockInitFunc()\n\t\t\t\t\t\tblockChan <- block\n\t\t\t\t\t}\n\t\t\t\t\tclose(blockChan)\n\t\t\t\t}()\n\t\t\t\treturn rows{\n\t\t\t\t\terr:       nil,\n\t\t\t\t\trow:       0,\n\t\t\t\t\tblock:     firstBlock,\n\t\t\t\t\ttotals:    nil,\n\t\t\t\t\terrors:    nil,\n\t\t\t\t\tstream:    blockChan,\n\t\t\t\t\tcolumns:   nil,\n\t\t\t\t\tstructMap: nil,\n\t\t\t\t}\n\t\t\t},\n\t\t\t0,\n\t\t},\n\t\t\"some empty\": {\n\t\t\tfunc() rows {\n\t\t\t\tfirstBlock := blockInitFunc()\n\t\t\t\tblockChan := make(chan *proto.Block)\n\t\t\t\tgo func() {\n\t\t\t\t\tfor i := 1; i < 10; i++ {\n\t\t\t\t\t\tblock := blockInitFunc()\n\t\t\t\t\t\tif i%2 == 0 {\n\t\t\t\t\t\t\tblock.Append(int64(i), strconv.Itoa(i))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tblockChan <- block\n\t\t\t\t\t}\n\t\t\t\t\tclose(blockChan)\n\t\t\t\t}()\n\t\t\t\treturn rows{\n\t\t\t\t\terr:       nil,\n\t\t\t\t\trow:       0,\n\t\t\t\t\tblock:     firstBlock,\n\t\t\t\t\ttotals:    nil,\n\t\t\t\t\terrors:    nil,\n\t\t\t\t\tstream:    blockChan,\n\t\t\t\t\tcolumns:   nil,\n\t\t\t\t\tstructMap: nil,\n\t\t\t\t}\n\t\t\t},\n\t\t\t4,\n\t\t},\n\t}\n\n\tfor name, testCase := range testCases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tactual := testCase.actual()\n\n\t\t\trowCnt := 0\n\t\t\tfor actual.Next() {\n\t\t\t\trowCnt++\n\t\t\t}\n\t\t\tassert.Equal(t, testCase.expected, rowCnt)\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "clickhouse_std.go",
          "type": "blob",
          "size": 13.8310546875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"database/sql/driver\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"math/rand\"\n\t\"net\"\n\t\"os\"\n\t\"reflect\"\n\t\"strings\"\n\t\"sync/atomic\"\n\t\"syscall\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/column\"\n\tldriver \"github.com/ClickHouse/clickhouse-go/v2/lib/driver\"\n)\n\nvar globalConnID int64\n\ntype stdConnOpener struct {\n\terr    error\n\topt    *Options\n\tdebugf func(format string, v ...any)\n}\n\nfunc (o *stdConnOpener) Driver() driver.Driver {\n\tvar debugf = func(format string, v ...any) {}\n\tif o.opt.Debug {\n\t\tif o.opt.Debugf != nil {\n\t\t\tdebugf = o.opt.Debugf\n\t\t} else {\n\t\t\tdebugf = log.New(os.Stdout, \"[clickhouse-std] \", 0).Printf\n\t\t}\n\t}\n\treturn &stdDriver{debugf: debugf}\n}\n\nfunc (o *stdConnOpener) Connect(ctx context.Context) (_ driver.Conn, err error) {\n\tif o.err != nil {\n\t\to.debugf(\"[connect] opener error: %v\\n\", o.err)\n\t\treturn nil, o.err\n\t}\n\tvar (\n\t\tconn     stdConnect\n\t\tconnID   = int(atomic.AddInt64(&globalConnID, 1))\n\t\tdialFunc func(ctx context.Context, addr string, num int, opt *Options) (stdConnect, error)\n\t)\n\n\tswitch o.opt.Protocol {\n\tcase HTTP:\n\t\tdialFunc = func(ctx context.Context, addr string, num int, opt *Options) (stdConnect, error) {\n\t\t\treturn dialHttp(ctx, addr, num, opt)\n\t\t}\n\tdefault:\n\t\tdialFunc = func(ctx context.Context, addr string, num int, opt *Options) (stdConnect, error) {\n\t\t\treturn dial(ctx, addr, num, opt)\n\t\t}\n\t}\n\n\tif o.opt.Addr == nil || len(o.opt.Addr) == 0 {\n\t\treturn nil, ErrAcquireConnNoAddress\n\t}\n\n\trandom := rand.Int()\n\tfor i := range o.opt.Addr {\n\t\tvar num int\n\t\tswitch o.opt.ConnOpenStrategy {\n\t\tcase ConnOpenInOrder:\n\t\t\tnum = i\n\t\tcase ConnOpenRoundRobin:\n\t\t\tnum = (int(connID) + i) % len(o.opt.Addr)\n\t\tcase ConnOpenRandom:\n\t\t\tnum = (random + i) % len(o.opt.Addr)\n\t\t}\n\t\tif conn, err = dialFunc(ctx, o.opt.Addr[num], connID, o.opt); err == nil {\n\t\t\tvar debugf = func(format string, v ...any) {}\n\t\t\tif o.opt.Debug {\n\t\t\t\tif o.opt.Debugf != nil {\n\t\t\t\t\tdebugf = o.opt.Debugf\n\t\t\t\t} else {\n\t\t\t\t\tdebugf = log.New(os.Stdout, fmt.Sprintf(\"[clickhouse-std][conn=%d][%s] \", num, o.opt.Addr[num]), 0).Printf\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn &stdDriver{\n\t\t\t\tconn:   conn,\n\t\t\t\tdebugf: debugf,\n\t\t\t}, nil\n\t\t} else {\n\t\t\to.debugf(\"[connect] error connecting to %s on connection %d: %v\\n\", o.opt.Addr[num], connID, err)\n\t\t}\n\t}\n\n\treturn nil, err\n}\n\nvar _ driver.Connector = (*stdConnOpener)(nil)\n\nfunc init() {\n\tvar debugf = func(format string, v ...any) {}\n\tsql.Register(\"clickhouse\", &stdDriver{debugf: debugf})\n}\n\n// isConnBrokenError returns true if the error class indicates that the\n// db connection is no longer usable and should be marked bad\nfunc isConnBrokenError(err error) bool {\n\tif errors.Is(err, io.EOF) || errors.Is(err, syscall.EPIPE) || errors.Is(err, syscall.ECONNRESET) {\n\t\treturn true\n\t}\n\tif _, ok := err.(*net.OpError); ok {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc Connector(opt *Options) driver.Connector {\n\tif opt == nil {\n\t\topt = &Options{}\n\t}\n\n\to := opt.setDefaults()\n\n\tvar debugf = func(format string, v ...any) {}\n\tif o.Debug {\n\t\tif o.Debugf != nil {\n\t\t\tdebugf = o.Debugf\n\t\t} else {\n\t\t\tdebugf = log.New(os.Stdout, \"[clickhouse-std][opener] \", 0).Printf\n\t\t}\n\t}\n\treturn &stdConnOpener{\n\t\topt:    o,\n\t\tdebugf: debugf,\n\t}\n}\n\nfunc OpenDB(opt *Options) *sql.DB {\n\tvar debugf = func(format string, v ...any) {}\n\tif opt == nil {\n\t\topt = &Options{}\n\t}\n\tvar settings []string\n\tif opt.MaxIdleConns > 0 {\n\t\tsettings = append(settings, \"SetMaxIdleConns\")\n\t}\n\tif opt.MaxOpenConns > 0 {\n\t\tsettings = append(settings, \"SetMaxOpenConns\")\n\t}\n\tif opt.ConnMaxLifetime > 0 {\n\t\tsettings = append(settings, \"SetConnMaxLifetime\")\n\t}\n\tif opt.Debug {\n\t\tif opt.Debugf != nil {\n\t\t\tdebugf = opt.Debugf\n\t\t} else {\n\t\t\tdebugf = log.New(os.Stdout, \"[clickhouse-std][opener] \", 0).Printf\n\t\t}\n\t}\n\tif len(settings) != 0 {\n\t\treturn sql.OpenDB(&stdConnOpener{\n\t\t\terr:    fmt.Errorf(\"cannot connect. invalid settings. use %s (see https://pkg.go.dev/database/sql)\", strings.Join(settings, \",\")),\n\t\t\tdebugf: debugf,\n\t\t})\n\t}\n\to := opt.setDefaults()\n\treturn sql.OpenDB(&stdConnOpener{\n\t\topt:    o,\n\t\tdebugf: debugf,\n\t})\n}\n\ntype stdConnect interface {\n\tisBad() bool\n\tclose() error\n\tquery(ctx context.Context, release func(*connect, error), query string, args ...any) (*rows, error)\n\texec(ctx context.Context, query string, args ...any) error\n\tping(ctx context.Context) (err error)\n\tprepareBatch(ctx context.Context, query string, options ldriver.PrepareBatchOptions, release func(*connect, error), acquire func(context.Context) (*connect, error)) (ldriver.Batch, error)\n\tasyncInsert(ctx context.Context, query string, wait bool, args ...any) error\n}\n\ntype stdDriver struct {\n\tconn   stdConnect\n\tcommit func() error\n\tdebugf func(format string, v ...any)\n}\n\nvar _ driver.Conn = (*stdDriver)(nil)\nvar _ driver.ConnBeginTx = (*stdDriver)(nil)\nvar _ driver.ExecerContext = (*stdDriver)(nil)\nvar _ driver.QueryerContext = (*stdDriver)(nil)\nvar _ driver.ConnPrepareContext = (*stdDriver)(nil)\n\nfunc (std *stdDriver) Open(dsn string) (_ driver.Conn, err error) {\n\tvar opt Options\n\tif err := opt.fromDSN(dsn); err != nil {\n\t\tstd.debugf(\"Open dsn error: %v\\n\", err)\n\t\treturn nil, err\n\t}\n\to := opt.setDefaults()\n\tvar debugf = func(format string, v ...any) {}\n\tif o.Debug {\n\t\tdebugf = log.New(os.Stdout, \"[clickhouse-std][opener] \", 0).Printf\n\t}\n\to.ClientInfo.comment = []string{\"database/sql\"}\n\treturn (&stdConnOpener{opt: o, debugf: debugf}).Connect(context.Background())\n}\n\nvar _ driver.Driver = (*stdDriver)(nil)\n\nfunc (std *stdDriver) ResetSession(ctx context.Context) error {\n\tif std.conn.isBad() {\n\t\tstd.debugf(\"Resetting session because connection is bad\")\n\t\treturn driver.ErrBadConn\n\t}\n\treturn nil\n}\n\nvar _ driver.SessionResetter = (*stdDriver)(nil)\n\nfunc (std *stdDriver) Ping(ctx context.Context) error {\n\tif std.conn.isBad() {\n\t\tstd.debugf(\"Ping: connection is bad\")\n\t\treturn driver.ErrBadConn\n\t}\n\n\treturn std.conn.ping(ctx)\n}\n\nvar _ driver.Pinger = (*stdDriver)(nil)\n\nfunc (std *stdDriver) Begin() (driver.Tx, error) {\n\tif std.conn.isBad() {\n\t\tstd.debugf(\"Begin: connection is bad\")\n\t\treturn nil, driver.ErrBadConn\n\t}\n\n\treturn std, nil\n}\n\nfunc (std *stdDriver) BeginTx(ctx context.Context, opts driver.TxOptions) (driver.Tx, error) {\n\tif std.conn.isBad() {\n\t\tstd.debugf(\"BeginTx: connection is bad\")\n\t\treturn nil, driver.ErrBadConn\n\t}\n\n\treturn std, nil\n}\n\nfunc (std *stdDriver) Commit() error {\n\tif std.commit == nil {\n\t\treturn nil\n\t}\n\tdefer func() {\n\t\tstd.commit = nil\n\t}()\n\n\tif err := std.commit(); err != nil {\n\t\tif isConnBrokenError(err) {\n\t\t\tstd.debugf(\"Commit got EOF error: resetting connection\")\n\t\t\treturn driver.ErrBadConn\n\t\t}\n\t\tstd.debugf(\"Commit error: %v\\n\", err)\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (std *stdDriver) Rollback() error {\n\tstd.commit = nil\n\tstd.conn.close()\n\treturn nil\n}\n\nvar _ driver.Tx = (*stdDriver)(nil)\n\nfunc (std *stdDriver) CheckNamedValue(nv *driver.NamedValue) error { return nil }\n\nvar _ driver.NamedValueChecker = (*stdDriver)(nil)\n\nfunc (std *stdDriver) ExecContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Result, error) {\n\tif std.conn.isBad() {\n\t\tstd.debugf(\"ExecContext: connection is bad\")\n\t\treturn nil, driver.ErrBadConn\n\t}\n\n\tvar err error\n\tif options := queryOptions(ctx); options.async.ok {\n\t\terr = std.conn.asyncInsert(ctx, query, options.async.wait, rebind(args)...)\n\t} else {\n\t\terr = std.conn.exec(ctx, query, rebind(args)...)\n\t}\n\n\tif err != nil {\n\t\tif isConnBrokenError(err) {\n\t\t\tstd.debugf(\"ExecContext got a fatal error, resetting connection: %v\\n\", err)\n\t\t\treturn nil, driver.ErrBadConn\n\t\t}\n\t\tstd.debugf(\"ExecContext error: %v\\n\", err)\n\t\treturn nil, err\n\t}\n\treturn driver.RowsAffected(0), nil\n}\n\nfunc (std *stdDriver) QueryContext(ctx context.Context, query string, args []driver.NamedValue) (driver.Rows, error) {\n\tif std.conn.isBad() {\n\t\tstd.debugf(\"QueryContext: connection is bad\")\n\t\treturn nil, driver.ErrBadConn\n\t}\n\n\tr, err := std.conn.query(ctx, func(*connect, error) {}, query, rebind(args)...)\n\tif isConnBrokenError(err) {\n\t\tstd.debugf(\"QueryContext got a fatal error, resetting connection: %v\\n\", err)\n\t\treturn nil, driver.ErrBadConn\n\t}\n\tif err != nil {\n\t\tstd.debugf(\"QueryContext error: %v\\n\", err)\n\t\treturn nil, err\n\t}\n\treturn &stdRows{\n\t\trows:   r,\n\t\tdebugf: std.debugf,\n\t}, nil\n}\n\nfunc (std *stdDriver) Prepare(query string) (driver.Stmt, error) {\n\treturn std.PrepareContext(context.Background(), query)\n}\n\nfunc (std *stdDriver) PrepareContext(ctx context.Context, query string) (driver.Stmt, error) {\n\tif std.conn.isBad() {\n\t\tstd.debugf(\"PrepareContext: connection is bad\")\n\t\treturn nil, driver.ErrBadConn\n\t}\n\n\tbatch, err := std.conn.prepareBatch(ctx, query, ldriver.PrepareBatchOptions{}, func(*connect, error) {}, func(context.Context) (*connect, error) { return nil, nil })\n\tif err != nil {\n\t\tif isConnBrokenError(err) {\n\t\t\tstd.debugf(\"PrepareContext got a fatal error, resetting connection: %v\\n\", err)\n\t\t\treturn nil, driver.ErrBadConn\n\t\t}\n\t\tstd.debugf(\"PrepareContext error: %v\\n\", err)\n\t\treturn nil, err\n\t}\n\tstd.commit = batch.Send\n\treturn &stdBatch{\n\t\tbatch:  batch,\n\t\tdebugf: std.debugf,\n\t}, nil\n}\n\nfunc (std *stdDriver) Close() error {\n\terr := std.conn.close()\n\tif err != nil {\n\t\tif isConnBrokenError(err) {\n\t\t\tstd.debugf(\"Close got a fatal error, resetting connection: %v\\n\", err)\n\t\t\treturn driver.ErrBadConn\n\t\t}\n\t\tstd.debugf(\"Close error: %v\\n\", err)\n\t}\n\treturn err\n}\n\ntype stdBatch struct {\n\tbatch  ldriver.Batch\n\tdebugf func(format string, v ...any)\n}\n\nfunc (s *stdBatch) NumInput() int { return -1 }\nfunc (s *stdBatch) Exec(args []driver.Value) (driver.Result, error) {\n\tvalues := make([]any, 0, len(args))\n\tfor _, v := range args {\n\t\tvalues = append(values, v)\n\t}\n\tif err := s.batch.Append(values...); err != nil {\n\t\ts.debugf(\"[batch][exec] append error: %v\", err)\n\t\treturn nil, err\n\t}\n\treturn driver.RowsAffected(0), nil\n}\n\nfunc (s *stdBatch) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {\n\tvalues := make([]driver.Value, 0, len(args))\n\tfor _, v := range args {\n\t\tvalues = append(values, v.Value)\n\t}\n\treturn s.Exec(values)\n}\n\nvar _ driver.StmtExecContext = (*stdBatch)(nil)\n\nfunc (s *stdBatch) Query(args []driver.Value) (driver.Rows, error) {\n\t// Note: not implementing driver.StmtQueryContext accordingly\n\treturn nil, errors.New(\"only Exec method supported in batch mode\")\n}\n\nfunc (s *stdBatch) Close() error { return nil }\n\ntype stdRows struct {\n\trows   *rows\n\tdebugf func(format string, v ...any)\n}\n\nfunc (r *stdRows) Columns() []string {\n\treturn r.rows.Columns()\n}\n\nfunc (r *stdRows) ColumnTypeScanType(idx int) reflect.Type {\n\treturn r.rows.block.Columns[idx].ScanType()\n}\n\nvar _ driver.RowsColumnTypeScanType = (*stdRows)(nil)\n\nfunc (r *stdRows) ColumnTypeDatabaseTypeName(idx int) string {\n\treturn string(r.rows.block.Columns[idx].Type())\n}\n\nfunc (r *stdRows) ColumnTypeNullable(idx int) (nullable, ok bool) {\n\t_, ok = r.rows.block.Columns[idx].(*column.Nullable)\n\treturn ok, true\n}\n\nfunc (r *stdRows) ColumnTypePrecisionScale(idx int) (precision, scale int64, ok bool) {\n\tswitch col := r.rows.block.Columns[idx].(type) {\n\tcase *column.Decimal:\n\t\treturn col.Precision(), col.Scale(), true\n\tcase interface{ Base() column.Interface }:\n\t\tswitch col := col.Base().(type) {\n\t\tcase *column.Decimal:\n\t\t\treturn col.Precision(), col.Scale(), true\n\t\t}\n\t}\n\treturn 0, 0, false\n}\n\nvar _ driver.Rows = (*stdRows)(nil)\nvar _ driver.RowsNextResultSet = (*stdRows)(nil)\nvar _ driver.RowsColumnTypeDatabaseTypeName = (*stdRows)(nil)\nvar _ driver.RowsColumnTypeNullable = (*stdRows)(nil)\nvar _ driver.RowsColumnTypePrecisionScale = (*stdRows)(nil)\n\nfunc (r *stdRows) Next(dest []driver.Value) error {\n\tif len(r.rows.block.Columns) != len(dest) {\n\t\terr := fmt.Errorf(\"expected %d destination arguments in Next, not %d\", len(r.rows.block.Columns), len(dest))\n\t\tr.debugf(\"Next length error: %v\\n\", err)\n\t\treturn &OpError{\n\t\t\tOp:  \"Next\",\n\t\t\tErr: err,\n\t\t}\n\t}\n\tif r.rows.Next() {\n\t\tfor i := range dest {\n\t\t\tnullable, ok := r.ColumnTypeNullable(i)\n\t\t\tswitch value := r.rows.block.Columns[i].Row(r.rows.row-1, nullable && ok).(type) {\n\t\t\tcase driver.Valuer:\n\t\t\t\tv, err := value.Value()\n\t\t\t\tif err != nil {\n\t\t\t\t\tr.debugf(\"Next row error: %v\\n\", err)\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tdest[i] = v\n\t\t\tdefault:\n\t\t\t\t// We don't know what is the destination type at this stage,\n\t\t\t\t// but destination type might be a sql.Null* type that expects to receive a value\n\t\t\t\t// instead of a pointer to a value. ClickHouse-go returns pointers to values for nullable columns.\n\t\t\t\t//\n\t\t\t\t// This is a compatibility layer to make sure that the driver works with the standard library.\n\t\t\t\t// Due to reflection used it has a performance cost.\n\t\t\t\tif nullable {\n\t\t\t\t\tif value == nil {\n\t\t\t\t\t\tdest[i] = nil\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\trv := reflect.ValueOf(value)\n\t\t\t\t\tvalue = rv.Elem().Interface()\n\t\t\t\t}\n\n\t\t\t\tdest[i] = value\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\tif err := r.rows.Err(); err != nil {\n\t\tr.debugf(\"Next rows error: %v\\n\", err)\n\t\treturn err\n\t}\n\treturn io.EOF\n}\n\nfunc (r *stdRows) HasNextResultSet() bool {\n\treturn r.rows.totals != nil\n}\n\nfunc (r *stdRows) NextResultSet() error {\n\tswitch {\n\tcase r.rows.totals != nil:\n\t\tr.rows.block = r.rows.totals\n\t\tr.rows.totals = nil\n\tdefault:\n\t\treturn io.EOF\n\t}\n\treturn nil\n}\n\nvar _ driver.RowsNextResultSet = (*stdRows)(nil)\n\nfunc (r *stdRows) Close() error {\n\terr := r.rows.Close()\n\tif err != nil {\n\t\tr.debugf(\"Rows Close error: %v\\n\", err)\n\t}\n\treturn err\n}\n\nvar _ driver.Rows = (*stdRows)(nil)\n"
        },
        {
          "name": "client_info.go",
          "type": "blob",
          "size": 2.1513671875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"fmt\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n\t\"runtime\"\n\t\"sort\"\n\t\"strings\"\n)\n\nconst ClientName = \"clickhouse-go\"\n\nconst (\n\tClientVersionMajor       = 2\n\tClientVersionMinor       = 30\n\tClientVersionPatch       = 0\n\tClientTCPProtocolVersion = proto.DBMS_TCP_PROTOCOL_VERSION\n)\n\ntype ClientInfo struct {\n\tProducts []struct {\n\t\tName    string\n\t\tVersion string\n\t}\n\n\tcomment []string\n}\n\nfunc (o ClientInfo) String() string {\n\tvar s strings.Builder\n\n\tinfo := o\n\n\tinfo.Products = append(info.Products, struct{ Name, Version string }{\n\t\tName:    ClientName,\n\t\tVersion: fmt.Sprintf(\"%d.%d.%d\", ClientVersionMajor, ClientVersionMinor, ClientVersionPatch),\n\t})\n\n\tencodedProducts := make([]string, len(info.Products))\n\tfor i, product := range info.Products {\n\t\tencodedProducts[i] = fmt.Sprintf(\"%s/%s\", product.Name, product.Version)\n\t}\n\ts.WriteString(strings.Join(encodedProducts, \" \"))\n\n\tlvMeta := \"lv:go/\" + runtime.Version()[2:]\n\tosMeta := \"os:\" + runtime.GOOS\n\n\tchunks := append(info.comment, lvMeta, osMeta) // nolint:gocritic\n\n\ts.WriteByte(' ')\n\ts.WriteByte('(')\n\ts.WriteString(strings.Join(chunks, \"; \"))\n\ts.WriteByte(')')\n\n\treturn s.String()\n}\n\nfunc mapKeysInOrder[V any](m map[string]V) []string {\n\tkeys := make([]string, 0, len(m))\n\tfor key := range m {\n\t\tkeys = append(keys, key)\n\t}\n\n\tsort.Slice(keys, func(i, j int) bool {\n\t\treturn keys[i] < keys[j]\n\t})\n\n\treturn keys\n}\n"
        },
        {
          "name": "client_info_test.go",
          "type": "blob",
          "size": 2.681640625,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"fmt\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"runtime\"\n\t\"testing\"\n)\n\nfunc TestClientInfoString(t *testing.T) {\n\t// e.g. clickhouse-go/2.5.1\n\texpectedClientProduct := fmt.Sprintf(\"%s/%d.%d.%d\", ClientName, ClientVersionMajor, ClientVersionMinor, ClientVersionPatch)\n\n\t// e.g. lv:go/1.19.5; os:darwin\n\texpectedDefaultMeta := fmt.Sprintf(\"lv:go/%s; os:%s\", runtime.Version()[2:], runtime.GOOS)\n\n\ttestCases := map[string]struct {\n\t\tactual   ClientInfo\n\t\texpected string\n\t}{\n\t\t\"client\": {\n\t\t\tClientInfo{},\n\t\t\t// e.g. clickhouse-go/2.5.1 (lv:go/1.19.5; os:darwin)\n\t\t\tfmt.Sprintf(\"%s (%s)\", expectedClientProduct, expectedDefaultMeta),\n\t\t},\n\t\t\"client with comment\": {\n\t\t\tClientInfo{\n\t\t\t\tcomment: []string{\"database/sql\"},\n\t\t\t},\n\t\t\t// e.g. clickhouse-go/2.5.1 (database/sql; lv:go/1.19.5; os:darwin)\n\t\t\tfmt.Sprintf(\"%s (database/sql; %s)\", expectedClientProduct, expectedDefaultMeta),\n\t\t},\n\t\t\"additional product\": {\n\t\t\tClientInfo{\n\t\t\t\tProducts: []struct {\n\t\t\t\t\tName    string\n\t\t\t\t\tVersion string\n\t\t\t\t}{\n\t\t\t\t\t{Name: \"grafana-datasource\", Version: \"0.1.1\"},\n\t\t\t\t},\n\t\t\t},\n\t\t\t// e.g. grafana-datasource/0.1.1 clickhouse-go/2.5.1 (lv:go/1.19.5; os:darwin)\n\t\t\tfmt.Sprintf(\"grafana-datasource/0.1.1 %s (%s)\", expectedClientProduct, expectedDefaultMeta),\n\t\t},\n\t\t\"additional products with comment\": {\n\t\t\tClientInfo{\n\t\t\t\tProducts: []struct {\n\t\t\t\t\tName    string\n\t\t\t\t\tVersion string\n\t\t\t\t}{\n\t\t\t\t\t{Name: \"grafana\", Version: \"6.1\"},\n\t\t\t\t\t{Name: \"grafana-datasource\", Version: \"0.1.1\"},\n\t\t\t\t},\n\t\t\t\tcomment: []string{\"database/sql\"},\n\t\t\t},\n\t\t\t// e.g. grafana/6.1 grafana-datasource/0.1.1 clickhouse-go/2.5.1 (database/sql; lv:go/1.19.5; os:darwin)\n\t\t\tfmt.Sprintf(\"grafana/6.1 grafana-datasource/0.1.1 %s (database/sql; %s)\", expectedClientProduct, expectedDefaultMeta),\n\t\t},\n\t}\n\n\tfor name, testCase := range testCases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tactual := testCase.actual.String()\n\n\t\t\tassert.Equal(t, testCase.expected, actual)\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "conn.go",
          "type": "blob",
          "size": 8.896484375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/resources\"\n\t\"github.com/pkg/errors\"\n\n\t\"github.com/ClickHouse/ch-go/compress\"\n\tchproto \"github.com/ClickHouse/ch-go/proto\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\nfunc dial(ctx context.Context, addr string, num int, opt *Options) (*connect, error) {\n\tvar (\n\t\terr    error\n\t\tconn   net.Conn\n\t\tdebugf = func(format string, v ...any) {}\n\t)\n\n\tswitch {\n\tcase opt.DialContext != nil:\n\t\tconn, err = opt.DialContext(ctx, addr)\n\tdefault:\n\t\tswitch {\n\t\tcase opt.TLS != nil:\n\t\t\tconn, err = tls.DialWithDialer(&net.Dialer{Timeout: opt.DialTimeout}, \"tcp\", addr, opt.TLS)\n\t\tdefault:\n\t\t\tconn, err = net.DialTimeout(\"tcp\", addr, opt.DialTimeout)\n\t\t}\n\t}\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif opt.Debug {\n\t\tif opt.Debugf != nil {\n\t\t\tdebugf = func(format string, v ...any) {\n\t\t\t\topt.Debugf(\n\t\t\t\t\t\"[clickhouse][conn=%d][%s] \"+format,\n\t\t\t\t\tappend([]interface{}{num, conn.RemoteAddr()}, v...)...,\n\t\t\t\t)\n\t\t\t}\n\t\t} else {\n\t\t\tdebugf = log.New(os.Stdout, fmt.Sprintf(\"[clickhouse][conn=%d][%s]\", num, conn.RemoteAddr()), 0).Printf\n\t\t}\n\t}\n\n\tcompression := CompressionNone\n\tif opt.Compression != nil {\n\t\tswitch opt.Compression.Method {\n\t\tcase CompressionLZ4, CompressionZSTD, CompressionNone:\n\t\t\tcompression = opt.Compression.Method\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unsupported compression method for native protocol\")\n\t\t}\n\t}\n\n\tvar (\n\t\tconnect = &connect{\n\t\t\tid:                   num,\n\t\t\topt:                  opt,\n\t\t\tconn:                 conn,\n\t\t\tdebugf:               debugf,\n\t\t\tbuffer:               new(chproto.Buffer),\n\t\t\treader:               chproto.NewReader(conn),\n\t\t\trevision:             ClientTCPProtocolVersion,\n\t\t\tstructMap:            &structMap{},\n\t\t\tcompression:          compression,\n\t\t\tconnectedAt:          time.Now(),\n\t\t\tcompressor:           compress.NewWriter(),\n\t\t\treadTimeout:          opt.ReadTimeout,\n\t\t\tblockBufferSize:      opt.BlockBufferSize,\n\t\t\tmaxCompressionBuffer: opt.MaxCompressionBuffer,\n\t\t}\n\t)\n\n\tif err := connect.handshake(opt.Auth.Database, opt.Auth.Username, opt.Auth.Password); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif connect.revision >= proto.DBMS_MIN_PROTOCOL_VERSION_WITH_ADDENDUM {\n\t\tif err := connect.sendAddendum(); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\t// warn only on the first connection in the pool\n\tif num == 1 && !resources.ClientMeta.IsSupportedClickHouseVersion(connect.server.Version) {\n\t\tdebugf(\"[handshake] WARNING: version %v of ClickHouse is not supported by this client - client supports %v\", connect.server.Version, resources.ClientMeta.SupportedVersions())\n\t}\n\n\treturn connect, nil\n}\n\n// https://github.com/ClickHouse/ClickHouse/blob/master/src/Client/Connection.cpp\ntype connect struct {\n\tid                   int\n\topt                  *Options\n\tconn                 net.Conn\n\tdebugf               func(format string, v ...any)\n\tserver               ServerVersion\n\tclosed               bool\n\tbuffer               *chproto.Buffer\n\treader               *chproto.Reader\n\treleased             bool\n\trevision             uint64\n\tstructMap            *structMap\n\tcompression          CompressionMethod\n\tconnectedAt          time.Time\n\tcompressor           *compress.Writer\n\treadTimeout          time.Duration\n\tblockBufferSize      uint8\n\tmaxCompressionBuffer int\n\treaderMutex          sync.Mutex\n\tcloseMutex           sync.Mutex\n}\n\nfunc (c *connect) settings(querySettings Settings) []proto.Setting {\n\tsettingToProtoSetting := func(k string, v any) proto.Setting {\n\t\tisCustom := false\n\t\tif cv, ok := v.(CustomSetting); ok {\n\t\t\tv = cv.Value\n\t\t\tisCustom = true\n\t\t}\n\n\t\treturn proto.Setting{\n\t\t\tKey:       k,\n\t\t\tValue:     v,\n\t\t\tImportant: !isCustom,\n\t\t\tCustom:    isCustom,\n\t\t}\n\t}\n\n\tsettings := make([]proto.Setting, 0, len(c.opt.Settings)+len(querySettings))\n\tfor k, v := range c.opt.Settings {\n\t\tsettings = append(settings, settingToProtoSetting(k, v))\n\t}\n\n\tfor k, v := range querySettings {\n\t\tsettings = append(settings, settingToProtoSetting(k, v))\n\t}\n\n\treturn settings\n}\n\nfunc (c *connect) isBad() bool {\n\tif c.isClosed() {\n\t\treturn true\n\t}\n\n\tif time.Since(c.connectedAt) >= c.opt.ConnMaxLifetime {\n\t\treturn true\n\t}\n\n\tif err := c.connCheck(); err != nil {\n\t\treturn true\n\t}\n\n\treturn false\n}\n\nfunc (c *connect) isClosed() bool {\n\tc.closeMutex.Lock()\n\tdefer c.closeMutex.Unlock()\n\n\treturn c.closed\n}\n\nfunc (c *connect) setClosed() {\n\tc.closeMutex.Lock()\n\tdefer c.closeMutex.Unlock()\n\n\tc.closed = true\n}\n\nfunc (c *connect) close() error {\n\tc.closeMutex.Lock()\n\tif c.closed {\n\t\tc.closeMutex.Unlock()\n\t\treturn nil\n\t}\n\tc.closed = true\n\tc.closeMutex.Unlock()\n\n\tif err := c.conn.Close(); err != nil {\n\t\treturn err\n\t}\n\n\tc.buffer = nil\n\n\tc.readerMutex.Lock()\n\tc.reader = nil\n\tc.readerMutex.Unlock()\n\n\treturn nil\n}\n\nfunc (c *connect) progress() (*Progress, error) {\n\tvar progress proto.Progress\n\tif err := progress.Decode(c.reader, c.revision); err != nil {\n\t\treturn nil, err\n\t}\n\n\tc.debugf(\"[progress] %s\", &progress)\n\treturn &progress, nil\n}\n\nfunc (c *connect) exception() error {\n\tvar e Exception\n\tif err := e.Decode(c.reader); err != nil {\n\t\treturn err\n\t}\n\n\tc.debugf(\"[exception] %s\", e.Error())\n\treturn &e\n}\n\nfunc (c *connect) compressBuffer(start int) error {\n\tif c.compression != CompressionNone && len(c.buffer.Buf) > 0 {\n\t\tdata := c.buffer.Buf[start:]\n\t\tif err := c.compressor.Compress(compress.Method(c.compression), data); err != nil {\n\t\t\treturn errors.Wrap(err, \"compress\")\n\t\t}\n\t\tc.buffer.Buf = append(c.buffer.Buf[:start], c.compressor.Data...)\n\t}\n\treturn nil\n}\n\nfunc (c *connect) sendData(block *proto.Block, name string) error {\n\tif c.isClosed() {\n\t\terr := errors.New(\"attempted sending on closed connection\")\n\t\tc.debugf(\"[send data] err: %v\", err)\n\t\treturn err\n\t}\n\n\tc.debugf(\"[send data] compression=%q\", c.compression)\n\tc.buffer.PutByte(proto.ClientData)\n\tc.buffer.PutString(name)\n\n\tcompressionOffset := len(c.buffer.Buf)\n\n\tif err := block.EncodeHeader(c.buffer, c.revision); err != nil {\n\t\treturn err\n\t}\n\n\tfor i := range block.Columns {\n\t\tif err := block.EncodeColumn(c.buffer, c.revision, i); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif len(c.buffer.Buf) >= c.maxCompressionBuffer {\n\t\t\tif err := c.compressBuffer(compressionOffset); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tc.debugf(\"[buff compress] buffer size: %d\", len(c.buffer.Buf))\n\t\t\tif err := c.flush(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcompressionOffset = 0\n\t\t}\n\t}\n\n\tif err := c.compressBuffer(compressionOffset); err != nil {\n\t\treturn err\n\t}\n\n\tif err := c.flush(); err != nil {\n\t\tswitch {\n\t\tcase errors.Is(err, syscall.EPIPE):\n\t\t\tc.debugf(\"[send data] pipe is broken, closing connection\")\n\t\t\tc.setClosed()\n\t\tcase errors.Is(err, io.EOF):\n\t\t\tc.debugf(\"[send data] unexpected EOF, closing connection\")\n\t\t\tc.setClosed()\n\t\tdefault:\n\t\t\tc.debugf(\"[send data] unexpected error: %v\", err)\n\t\t}\n\t\treturn err\n\t}\n\n\tdefer func() {\n\t\tc.buffer.Reset()\n\t}()\n\n\treturn nil\n}\n\nfunc (c *connect) readData(ctx context.Context, packet byte, compressible bool) (*proto.Block, error) {\n\tif c.isClosed() {\n\t\terr := errors.New(\"attempted reading on closed connection\")\n\t\tc.debugf(\"[read data] err: %v\", err)\n\t\treturn nil, err\n\t}\n\n\tif c.reader == nil {\n\t\terr := errors.New(\"attempted reading on nil reader\")\n\t\tc.debugf(\"[read data] err: %v\", err)\n\t\treturn nil, err\n\t}\n\n\tif _, err := c.reader.Str(); err != nil {\n\t\tc.debugf(\"[read data] str error: %v\", err)\n\t\treturn nil, err\n\t}\n\n\tif compressible && c.compression != CompressionNone {\n\t\tc.reader.EnableCompression()\n\t\tdefer c.reader.DisableCompression()\n\t}\n\n\topts := queryOptions(ctx)\n\tlocation := c.server.Timezone\n\tif opts.userLocation != nil {\n\t\tlocation = opts.userLocation\n\t}\n\n\tblock := proto.Block{Timezone: location}\n\tif err := block.Decode(c.reader, c.revision); err != nil {\n\t\tc.debugf(\"[read data] decode error: %v\", err)\n\t\treturn nil, err\n\t}\n\n\tblock.Packet = packet\n\tc.debugf(\"[read data] compression=%q. block: columns=%d, rows=%d\", c.compression, len(block.Columns), block.Rows())\n\treturn &block, nil\n}\n\nfunc (c *connect) flush() error {\n\tif len(c.buffer.Buf) == 0 {\n\t\t// Nothing to flush.\n\t\treturn nil\n\t}\n\n\tn, err := c.conn.Write(c.buffer.Buf)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"write\")\n\t}\n\n\tif n != len(c.buffer.Buf) {\n\t\treturn errors.New(\"wrote less than expected\")\n\t}\n\n\tc.buffer.Reset()\n\treturn nil\n}\n"
        },
        {
          "name": "conn_async_insert.go",
          "type": "blob",
          "size": 1.5361328125,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\nfunc (c *connect) asyncInsert(ctx context.Context, query string, wait bool, args ...any) error {\n\toptions := queryOptions(ctx)\n\t{\n\t\toptions.settings[\"async_insert\"] = 1\n\t\toptions.settings[\"wait_for_async_insert\"] = 0\n\t\tif wait {\n\t\t\toptions.settings[\"wait_for_async_insert\"] = 1\n\t\t}\n\t}\n\n\tif len(args) > 0 {\n\t\tqueryParamsProtocolSupport := c.revision >= proto.DBMS_MIN_PROTOCOL_VERSION_WITH_PARAMETERS\n\t\tvar err error\n\t\tquery, err = bindQueryOrAppendParameters(queryParamsProtocolSupport, &options, query, c.server.Timezone, args...)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := c.sendQuery(query, &options); err != nil {\n\t\treturn err\n\t}\n\treturn c.process(ctx, options.onProcess())\n}\n"
        },
        {
          "name": "conn_batch.go",
          "type": "blob",
          "size": 8.029296875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"regexp\"\n\t\"slices\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/column\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/driver\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\nvar insertMatch = regexp.MustCompile(`(?i)(INSERT\\s+INTO\\s+[^( ]+(?:\\s*\\([^()]*(?:\\([^()]*\\)[^()]*)*\\))?)(?:\\s*VALUES)?`)\nvar columnMatch = regexp.MustCompile(`INSERT INTO .+\\s\\((?P<Columns>.+)\\)$`)\n\nfunc (c *connect) prepareBatch(ctx context.Context, query string, opts driver.PrepareBatchOptions, release func(*connect, error), acquire func(context.Context) (*connect, error)) (driver.Batch, error) {\n\tquery, _, queryColumns, verr := extractNormalizedInsertQueryAndColumns(query)\n\tif verr != nil {\n\t\treturn nil, verr\n\t}\n\n\toptions := queryOptions(ctx)\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tc.conn.SetDeadline(deadline)\n\t\tdefer c.conn.SetDeadline(time.Time{})\n\t}\n\tif err := c.sendQuery(query, &options); err != nil {\n\t\trelease(c, err)\n\t\treturn nil, err\n\t}\n\tvar (\n\t\tonProcess  = options.onProcess()\n\t\tblock, err = c.firstBlock(ctx, onProcess)\n\t)\n\tif err != nil {\n\t\trelease(c, err)\n\t\treturn nil, err\n\t}\n\t// resort batch to specified columns\n\tif err = block.SortColumns(queryColumns); err != nil {\n\t\treturn nil, err\n\t}\n\n\tb := &batch{\n\t\tctx:          ctx,\n\t\tquery:        query,\n\t\tconn:         c,\n\t\tblock:        block,\n\t\treleased:     false,\n\t\tconnRelease:  release,\n\t\tconnAcquire:  acquire,\n\t\tonProcess:    onProcess,\n\t\tcloseOnFlush: opts.CloseOnFlush,\n\t}\n\n\tif opts.ReleaseConnection {\n\t\tb.release(b.closeQuery())\n\t}\n\n\treturn b, nil\n}\n\ntype batch struct {\n\terr          error\n\tctx          context.Context\n\tquery        string\n\tconn         *connect\n\tsent         bool // sent signalize that batch is send to ClickHouse.\n\treleased     bool // released signalize that conn was returned to pool and can't be used.\n\tcloseOnFlush bool // closeOnFlush signalize that batch should close query and release conn when use Flush\n\tblock        *proto.Block\n\tconnRelease  func(*connect, error)\n\tconnAcquire  func(context.Context) (*connect, error)\n\tonProcess    *onProcess\n}\n\nfunc (b *batch) release(err error) {\n\tif !b.released {\n\t\tb.released = true\n\t\tb.connRelease(b.conn, err)\n\t}\n}\n\nfunc (b *batch) Abort() error {\n\tdefer func() {\n\t\tb.sent = true\n\t\tb.release(os.ErrProcessDone)\n\t}()\n\tif b.sent {\n\t\treturn ErrBatchAlreadySent\n\t}\n\treturn nil\n}\n\nfunc (b *batch) Append(v ...any) error {\n\tif b.sent {\n\t\treturn ErrBatchAlreadySent\n\t}\n\tif b.err != nil {\n\t\treturn b.err\n\t}\n\n\tif len(v) > 0 {\n\t\tif r, ok := v[0].(*rows); ok {\n\t\t\treturn b.appendRowsBlocks(r)\n\t\t}\n\t}\n\n\tif err := b.block.Append(v...); err != nil {\n\t\tb.err = errors.Wrap(ErrBatchInvalid, err.Error())\n\t\tb.release(err)\n\t\treturn err\n\t}\n\treturn nil\n}\n\n// appendRowsBlocks is an experimental feature that allows rows blocks be appended directly to the batch.\n// This API is not stable and may be changed in the future.\n// See: tests/batch_block_test.go\nfunc (b *batch) appendRowsBlocks(r *rows) error {\n\tvar lastReadLock *proto.Block\n\tvar blockNum int\n\n\tfor r.Next() {\n\t\tif lastReadLock == nil { // make sure the first block is logged\n\t\t\tb.conn.debugf(\"[batch.appendRowsBlocks] blockNum = %d\", blockNum)\n\t\t}\n\n\t\t// rows.Next() will read the next block from the server only if the current block is empty\n\t\t// only if new block is available we should flush the current block\n\t\t// the last block will be handled by the batch.Send() method\n\t\tif lastReadLock != nil && lastReadLock != r.block {\n\t\t\tif err := b.Flush(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tblockNum++\n\t\t\tb.conn.debugf(\"[batch.appendRowsBlocks] blockNum = %d\", blockNum)\n\t\t}\n\n\t\tb.block = r.block\n\t\tlastReadLock = r.block\n\t}\n\n\treturn nil\n}\n\nfunc (b *batch) AppendStruct(v any) error {\n\tif b.err != nil {\n\t\treturn b.err\n\t}\n\tvalues, err := b.conn.structMap.Map(\"AppendStruct\", b.block.ColumnsNames(), v, false)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn b.Append(values...)\n}\n\nfunc (b *batch) IsSent() bool {\n\treturn b.sent\n}\n\nfunc (b *batch) Column(idx int) driver.BatchColumn {\n\tif len(b.block.Columns) <= idx {\n\t\terr := &OpError{\n\t\t\tOp:  \"batch.Column\",\n\t\t\tErr: fmt.Errorf(\"invalid column index %d\", idx),\n\t\t}\n\n\t\tb.release(err)\n\n\t\treturn &batchColumn{\n\t\t\terr: err,\n\t\t}\n\t}\n\treturn &batchColumn{\n\t\tbatch:  b,\n\t\tcolumn: b.block.Columns[idx],\n\t\trelease: func(err error) {\n\t\t\tb.err = err\n\t\t\tb.release(err)\n\t\t},\n\t}\n}\n\nfunc (b *batch) Send() (err error) {\n\tstopCW := contextWatchdog(b.ctx, func() {\n\t\t// close TCP connection on context cancel. There is no other way simple way to interrupt underlying operations.\n\t\t// as verified in the test, this is safe to do and cleanups resources later on\n\t\tif b.conn != nil {\n\t\t\t_ = b.conn.conn.Close()\n\t\t}\n\t})\n\n\tdefer func() {\n\t\tstopCW()\n\t\tb.sent = true\n\t\tb.release(err)\n\t}()\n\tif b.err != nil {\n\t\treturn b.err\n\t}\n\tif b.sent || b.released {\n\t\tif err = b.resetConnection(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif b.block.Rows() != 0 {\n\t\tif err = b.conn.sendData(b.block, \"\"); err != nil {\n\t\t\t// there might be an error caused by context cancellation\n\t\t\t// in this case we should return context error instead of net.OpError\n\t\t\tif ctxErr := b.ctx.Err(); ctxErr != nil {\n\t\t\t\treturn ctxErr\n\t\t\t}\n\n\t\t\treturn err\n\t\t}\n\t}\n\tif err = b.closeQuery(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (b *batch) resetConnection() (err error) {\n\t// acquire a new conn\n\tif b.conn, err = b.connAcquire(b.ctx); err != nil {\n\t\treturn err\n\t}\n\n\tdefer func() {\n\t\tb.released = false\n\t}()\n\n\toptions := queryOptions(b.ctx)\n\tif deadline, ok := b.ctx.Deadline(); ok {\n\t\tb.conn.conn.SetDeadline(deadline)\n\t\tdefer b.conn.conn.SetDeadline(time.Time{})\n\t}\n\n\tif err = b.conn.sendQuery(b.query, &options); err != nil {\n\t\tb.release(err)\n\t\treturn err\n\t}\n\n\tif _, err = b.conn.firstBlock(b.ctx, b.onProcess); err != nil {\n\t\tb.release(err)\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc (b *batch) Flush() error {\n\tif b.sent {\n\t\treturn ErrBatchAlreadySent\n\t}\n\tif b.err != nil {\n\t\treturn b.err\n\t}\n\tif b.released {\n\t\tif err := b.resetConnection(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif b.block.Rows() != 0 {\n\t\tif err := b.conn.sendData(b.block, \"\"); err != nil {\n\t\t\t// broken pipe/conn reset aren't generally recoverable on retry\n\t\t\tif errors.Is(err, syscall.EPIPE) || errors.Is(err, syscall.ECONNRESET) {\n\t\t\t\tb.release(err)\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tif b.closeOnFlush {\n\t\t\tb.release(b.closeQuery())\n\t\t}\n\t}\n\tb.block.Reset()\n\treturn nil\n}\n\nfunc (b *batch) Rows() int {\n\treturn b.block.Rows()\n}\n\nfunc (b *batch) Columns() []column.Interface {\n\treturn slices.Clone(b.block.Columns)\n}\n\nfunc (b *batch) closeQuery() error {\n\tif err := b.conn.sendData(&proto.Block{}, \"\"); err != nil {\n\t\treturn err\n\t}\n\n\tif err := b.conn.process(b.ctx, b.onProcess); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\ntype batchColumn struct {\n\terr     error\n\tbatch   driver.Batch\n\tcolumn  column.Interface\n\trelease func(error)\n}\n\nfunc (b *batchColumn) Append(v any) (err error) {\n\tif b.err != nil {\n\t\treturn b.err\n\t}\n\tif b.batch.IsSent() {\n\t\treturn ErrBatchAlreadySent\n\t}\n\tif _, err = b.column.Append(v); err != nil {\n\t\tb.release(err)\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (b *batchColumn) AppendRow(v any) (err error) {\n\tif b.err != nil {\n\t\treturn b.err\n\t}\n\tif b.batch.IsSent() {\n\t\treturn ErrBatchAlreadySent\n\t}\n\tif err = b.column.AppendRow(v); err != nil {\n\t\tb.release(err)\n\t\treturn err\n\t}\n\treturn nil\n}\n\nvar (\n\t_ (driver.Batch)       = (*batch)(nil)\n\t_ (driver.BatchColumn) = (*batchColumn)(nil)\n)\n"
        },
        {
          "name": "conn_check.go",
          "type": "blob",
          "size": 1.6787109375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n//go:build linux || darwin || dragonfly || freebsd || netbsd || openbsd || solaris || illumos\n// +build linux darwin dragonfly freebsd netbsd openbsd solaris illumos\n\npackage clickhouse\n\nimport (\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"io\"\n\t\"syscall\"\n)\n\nfunc (c *connect) connCheck() error {\n\tconn := c.conn\n\tif tlsConn, ok := c.conn.(*tls.Conn); ok {\n\t\tconn = tlsConn.NetConn()\n\t}\n\n\tvar sysErr error\n\tsysConn, ok := conn.(syscall.Conn)\n\tif !ok {\n\t\treturn nil\n\t}\n\trawConn, err := sysConn.SyscallConn()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = rawConn.Read(func(fd uintptr) bool {\n\t\tvar buf [1]byte\n\t\tn, err := syscall.Read(int(fd), buf[:])\n\t\tswitch {\n\t\tcase n == 0 && err == nil:\n\t\t\tsysErr = io.EOF\n\t\tcase n > 0:\n\t\t\tsysErr = errors.New(\"unexpected read from socket\")\n\t\tcase err == syscall.EAGAIN || err == syscall.EWOULDBLOCK:\n\t\t\tsysErr = nil\n\t\tdefault:\n\t\t\tsysErr = err\n\t\t}\n\t\treturn true\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn sysErr\n}\n"
        },
        {
          "name": "conn_check_ping.go",
          "type": "blob",
          "size": 1.2041015625,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n//go:build !linux && !darwin && !dragonfly && !freebsd && !netbsd && !openbsd && !solaris && !illumos\n// +build !linux,!darwin,!dragonfly,!freebsd,!netbsd,!openbsd,!solaris,!illumos\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"time\"\n)\n\nfunc (c *connect) connCheck() error {\n\tctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(time.Second))\n\tdefer cancel()\n\tif err := c.ping(ctx); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "conn_exec.go",
          "type": "blob",
          "size": 1.7431640625,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n\t\"time\"\n)\n\nfunc (c *connect) exec(ctx context.Context, query string, args ...any) error {\n\tvar (\n\t\toptions                    = queryOptions(ctx)\n\t\tqueryParamsProtocolSupport = c.revision >= proto.DBMS_MIN_PROTOCOL_VERSION_WITH_PARAMETERS\n\t\tbody, err                  = bindQueryOrAppendParameters(queryParamsProtocolSupport, &options, query, c.server.Timezone, args...)\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// set a read deadline - alternative to context.Read operation will fail if no data is received after deadline.\n\tc.conn.SetReadDeadline(time.Now().Add(c.readTimeout))\n\tdefer c.conn.SetReadDeadline(time.Time{})\n\t// context level deadlines override any read deadline\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tc.conn.SetDeadline(deadline)\n\t\tdefer c.conn.SetDeadline(time.Time{})\n\t}\n\tif err := c.sendQuery(body, &options); err != nil {\n\t\treturn err\n\t}\n\treturn c.process(ctx, options.onProcess())\n}\n"
        },
        {
          "name": "conn_handshake.go",
          "type": "blob",
          "size": 2.7294921875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t_ \"embed\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\nfunc (c *connect) handshake(database, username, password string) error {\n\tdefer c.buffer.Reset()\n\tc.debugf(\"[handshake] -> %s\", proto.ClientHandshake{})\n\t// set a read deadline - alternative to context.Read operation will fail if no data is received after deadline.\n\tc.conn.SetReadDeadline(time.Now().Add(c.readTimeout))\n\tdefer c.conn.SetReadDeadline(time.Time{})\n\t// context level deadlines override any read deadline\n\tc.conn.SetDeadline(time.Now().Add(c.opt.DialTimeout))\n\tdefer c.conn.SetDeadline(time.Time{})\n\t{\n\t\tc.buffer.PutByte(proto.ClientHello)\n\t\thandshake := &proto.ClientHandshake{\n\t\t\tProtocolVersion: ClientTCPProtocolVersion,\n\t\t\tClientName:      c.opt.ClientInfo.String(),\n\t\t\tClientVersion:   proto.Version{ClientVersionMajor, ClientVersionMinor, ClientVersionPatch}, //nolint:govet\n\t\t}\n\t\thandshake.Encode(c.buffer)\n\t\t{\n\t\t\tc.buffer.PutString(database)\n\t\t\tc.buffer.PutString(username)\n\t\t\tc.buffer.PutString(password)\n\t\t}\n\t\tif err := c.flush(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\t{\n\t\tpacket, err := c.reader.ReadByte()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tswitch packet {\n\t\tcase proto.ServerException:\n\t\t\treturn c.exception()\n\t\tcase proto.ServerHello:\n\t\t\tif err := c.server.Decode(c.reader); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase proto.ServerEndOfStream:\n\t\t\tc.debugf(\"[handshake] <- end of stream\")\n\t\t\treturn nil\n\t\tdefault:\n\t\t\treturn fmt.Errorf(\"[handshake] unexpected packet [%d] from server\", packet)\n\t\t}\n\t}\n\tif c.server.Revision < proto.DBMS_MIN_REVISION_WITH_CLIENT_INFO {\n\t\treturn ErrUnsupportedServerRevision\n\t}\n\n\tif c.revision > c.server.Revision {\n\t\tc.revision = c.server.Revision\n\t\tc.debugf(\"[handshake] downgrade client proto\")\n\t}\n\tc.debugf(\"[handshake] <- %s\", c.server)\n\treturn nil\n}\n\nfunc (c *connect) sendAddendum() error {\n\tif c.revision >= proto.DBMS_MIN_PROTOCOL_VERSION_WITH_QUOTA_KEY {\n\t\tc.buffer.PutString(\"\") // todo quota key support\n\t}\n\n\treturn c.flush()\n}\n"
        },
        {
          "name": "conn_http.go",
          "type": "blob",
          "size": 14.7900390625,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"bytes\"\n\t\"compress/flate\"\n\t\"compress/gzip\"\n\t\"compress/zlib\"\n\t\"context\"\n\t\"database/sql/driver\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"mime/multipart\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/resources\"\n\n\t\"github.com/ClickHouse/ch-go/compress\"\n\tchproto \"github.com/ClickHouse/ch-go/proto\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n\t\"github.com/andybalholm/brotli\"\n\t\"github.com/pkg/errors\"\n)\n\nconst (\n\tquotaKeyParamName = \"quota_key\"\n\tqueryIDParamName  = \"query_id\"\n)\n\ntype Pool[T any] struct {\n\tpool *sync.Pool\n}\n\nfunc NewPool[T any](fn func() T) Pool[T] {\n\treturn Pool[T]{\n\t\tpool: &sync.Pool{New: func() any { return fn() }},\n\t}\n}\n\nfunc (p *Pool[T]) Get() T {\n\treturn p.pool.Get().(T)\n}\n\nfunc (p *Pool[T]) Put(x T) {\n\tp.pool.Put(x)\n}\n\ntype HTTPReaderWriter struct {\n\treader io.Reader\n\twriter io.WriteCloser\n\terr    error\n\tmethod CompressionMethod\n}\n\n// NewReader will return a reader that will decompress data if needed.\nfunc (rw *HTTPReaderWriter) NewReader(res *http.Response) (io.Reader, error) {\n\tenc := res.Header.Get(\"Content-Encoding\")\n\tif !res.Uncompressed && rw.method.String() == enc {\n\t\tswitch rw.method {\n\t\tcase CompressionGZIP:\n\t\t\treader := rw.reader.(*gzip.Reader)\n\t\t\tif err := reader.Reset(res.Body); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn reader, nil\n\t\tcase CompressionDeflate:\n\t\t\treader := rw.reader\n\t\t\tif err := reader.(flate.Resetter).Reset(res.Body, nil); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn reader, nil\n\t\tcase CompressionBrotli:\n\t\t\treader := rw.reader.(*brotli.Reader)\n\t\t\tif err := reader.Reset(res.Body); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn reader, nil\n\t\t}\n\t}\n\treturn res.Body, nil\n}\n\nfunc (rw *HTTPReaderWriter) reset(pw *io.PipeWriter) io.WriteCloser {\n\tswitch rw.method {\n\tcase CompressionGZIP:\n\t\trw.writer.(*gzip.Writer).Reset(pw)\n\t\treturn rw.writer\n\tcase CompressionDeflate:\n\t\trw.writer.(*zlib.Writer).Reset(pw)\n\t\treturn rw.writer\n\tcase CompressionBrotli:\n\t\trw.writer.(*brotli.Writer).Reset(pw)\n\t\treturn rw.writer\n\tdefault:\n\t\treturn pw\n\t}\n}\n\nfunc dialHttp(ctx context.Context, addr string, num int, opt *Options) (*httpConnect, error) {\n\tvar debugf = func(format string, v ...any) {}\n\tif opt.Debug {\n\t\tif opt.Debugf != nil {\n\t\t\tdebugf = func(format string, v ...any) {\n\t\t\t\topt.Debugf(\n\t\t\t\t\t\"[clickhouse][conn=%d][%s] \"+format,\n\t\t\t\t\tappend([]interface{}{num, addr}, v...)...,\n\t\t\t\t)\n\t\t\t}\n\t\t} else {\n\t\t\tdebugf = log.New(os.Stdout, fmt.Sprintf(\"[clickhouse][conn=%d][%s]\", num, addr), 0).Printf\n\t\t}\n\t}\n\n\tif opt.scheme == \"\" {\n\t\tswitch opt.Protocol {\n\t\tcase HTTP:\n\t\t\topt.scheme = opt.Protocol.String()\n\t\t\tif opt.TLS != nil {\n\t\t\t\topt.scheme = fmt.Sprintf(\"%ss\", opt.scheme)\n\t\t\t}\n\t\tdefault:\n\t\t\treturn nil, errors.New(\"invalid interface type for http\")\n\t\t}\n\t}\n\tu := &url.URL{\n\t\tScheme: opt.scheme,\n\t\tHost:   addr,\n\t\tPath:   opt.HttpUrlPath,\n\t}\n\n\theaders := make(map[string]string)\n\tfor k, v := range opt.HttpHeaders {\n\t\theaders[k] = v\n\t}\n\n\tif opt.TLS == nil && len(opt.Auth.Username) > 0 {\n\t\tif len(opt.Auth.Password) > 0 {\n\t\t\tu.User = url.UserPassword(opt.Auth.Username, opt.Auth.Password)\n\t\t} else {\n\t\t\tu.User = url.User(opt.Auth.Username)\n\t\t}\n\t} else if opt.TLS != nil && len(opt.Auth.Username) > 0 {\n\t\theaders[\"X-ClickHouse-User\"] = opt.Auth.Username\n\t\tif len(opt.Auth.Password) > 0 {\n\t\t\theaders[\"X-ClickHouse-Key\"] = opt.Auth.Password\n\t\t\theaders[\"X-ClickHouse-SSL-Certificate-Auth\"] = \"off\"\n\t\t} else {\n\t\t\theaders[\"X-ClickHouse-SSL-Certificate-Auth\"] = \"on\"\n\t\t}\n\t}\n\n\theaders[\"User-Agent\"] = opt.ClientInfo.String()\n\n\tquery := u.Query()\n\tif len(opt.Auth.Database) > 0 {\n\t\tquery.Set(\"database\", opt.Auth.Database)\n\t}\n\n\tif opt.Compression == nil {\n\t\topt.Compression = &Compression{\n\t\t\tMethod: CompressionNone,\n\t\t}\n\t}\n\n\tcompressionPool, err := createCompressionPool(opt.Compression)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor k, v := range opt.Settings {\n\t\tif cv, ok := v.(CustomSetting); ok {\n\t\t\tv = cv.Value\n\t\t}\n\n\t\tquery.Set(k, fmt.Sprint(v))\n\t}\n\n\tquery.Set(\"default_format\", \"Native\")\n\tu.RawQuery = query.Encode()\n\n\thttpProxy := http.ProxyFromEnvironment\n\tif opt.HTTPProxyURL != nil {\n\t\thttpProxy = http.ProxyURL(opt.HTTPProxyURL)\n\t}\n\n\tt := &http.Transport{\n\t\tProxy: httpProxy,\n\t\tDialContext: (&net.Dialer{\n\t\t\tTimeout: opt.DialTimeout,\n\t\t}).DialContext,\n\t\tMaxIdleConns:          1,\n\t\tIdleConnTimeout:       opt.ConnMaxLifetime,\n\t\tResponseHeaderTimeout: opt.ReadTimeout,\n\t\tTLSClientConfig:       opt.TLS,\n\t}\n\n\tif opt.DialContext != nil {\n\t\tt.DialContext = func(ctx context.Context, network, addr string) (net.Conn, error) {\n\t\t\treturn opt.DialContext(ctx, addr)\n\t\t}\n\t}\n\n\tconn := &httpConnect{\n\t\tclient: &http.Client{\n\t\t\tTransport: t,\n\t\t},\n\t\turl:             u,\n\t\tbuffer:          new(chproto.Buffer),\n\t\tcompression:     opt.Compression.Method,\n\t\tblockCompressor: compress.NewWriter(),\n\t\tcompressionPool: compressionPool,\n\t\tblockBufferSize: opt.BlockBufferSize,\n\t\theaders:         headers,\n\t}\n\tlocation, err := conn.readTimeZone(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif num == 1 {\n\t\tversion, err := conn.readVersion(ctx)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif !resources.ClientMeta.IsSupportedClickHouseVersion(version) {\n\t\t\tdebugf(\"WARNING: version %v of ClickHouse is not supported by this client\\n\", version)\n\t\t}\n\t}\n\n\treturn &httpConnect{\n\t\tclient: &http.Client{\n\t\t\tTransport: t,\n\t\t},\n\t\turl:             u,\n\t\tbuffer:          new(chproto.Buffer),\n\t\tcompression:     opt.Compression.Method,\n\t\tblockCompressor: compress.NewWriter(),\n\t\tcompressionPool: compressionPool,\n\t\tlocation:        location,\n\t\tblockBufferSize: opt.BlockBufferSize,\n\t\theaders:         headers,\n\t}, nil\n}\n\ntype httpConnect struct {\n\turl             *url.URL\n\tclient          *http.Client\n\tlocation        *time.Location\n\tbuffer          *chproto.Buffer\n\tcompression     CompressionMethod\n\tblockCompressor *compress.Writer\n\tcompressionPool Pool[HTTPReaderWriter]\n\tblockBufferSize uint8\n\theaders         map[string]string\n}\n\nfunc (h *httpConnect) isBad() bool {\n\treturn h.client == nil\n}\n\nfunc (h *httpConnect) readTimeZone(ctx context.Context) (*time.Location, error) {\n\trows, err := h.query(Context(ctx, ignoreExternalTables()), func(*connect, error) {}, \"SELECT timezone()\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !rows.Next() {\n\t\treturn nil, errors.New(\"unable to determine server timezone\")\n\t}\n\n\tvar serverLocation string\n\tif err := rows.Scan(&serverLocation); err != nil {\n\t\treturn nil, err\n\t}\n\n\tlocation, err := time.LoadLocation(serverLocation)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn location, nil\n}\n\nfunc (h *httpConnect) readVersion(ctx context.Context) (proto.Version, error) {\n\trows, err := h.query(Context(ctx, ignoreExternalTables()), func(*connect, error) {}, \"SELECT version()\")\n\tif err != nil {\n\t\treturn proto.Version{}, err\n\t}\n\n\tif !rows.Next() {\n\t\treturn proto.Version{}, errors.New(\"unable to determine version\")\n\t}\n\n\tvar v string\n\tif err := rows.Scan(&v); err != nil {\n\t\treturn proto.Version{}, err\n\t}\n\tversion := proto.ParseVersion(v)\n\treturn version, nil\n}\n\nfunc createCompressionPool(compression *Compression) (Pool[HTTPReaderWriter], error) {\n\tpool := NewPool(func() HTTPReaderWriter {\n\t\tswitch compression.Method {\n\t\tcase CompressionGZIP:\n\t\t\t// trick so we can init the reader to something to Reset when we reuse\n\t\t\twriter, err := gzip.NewWriterLevel(io.Discard, compression.Level)\n\t\t\tif err != nil {\n\t\t\t\treturn HTTPReaderWriter{err: err}\n\t\t\t}\n\t\t\tb := new(bytes.Buffer)\n\t\t\twriter.Reset(b)\n\t\t\twriter.Flush()\n\t\t\twriter.Close()\n\t\t\treader, err := gzip.NewReader(bytes.NewReader(b.Bytes()))\n\t\t\treturn HTTPReaderWriter{writer: writer, reader: reader, err: err, method: compression.Method}\n\t\tcase CompressionDeflate:\n\t\t\twriter, err := zlib.NewWriterLevel(io.Discard, compression.Level)\n\t\t\tif err != nil {\n\t\t\t\treturn HTTPReaderWriter{err: err}\n\t\t\t}\n\t\t\tb := new(bytes.Buffer)\n\t\t\twriter.Reset(b)\n\t\t\twriter.Flush()\n\t\t\twriter.Close()\n\t\t\treader, err := zlib.NewReader(bytes.NewReader(b.Bytes()))\n\t\t\tif err != nil {\n\t\t\t\treturn HTTPReaderWriter{err: err}\n\t\t\t}\n\t\t\treturn HTTPReaderWriter{writer: writer, reader: reader, method: compression.Method}\n\t\tcase CompressionBrotli:\n\t\t\twriter := brotli.NewWriterLevel(io.Discard, compression.Level)\n\t\t\tb := new(bytes.Buffer)\n\t\t\twriter.Reset(b)\n\t\t\twriter.Flush()\n\t\t\twriter.Close()\n\t\t\treader := brotli.NewReader(bytes.NewReader(b.Bytes()))\n\t\t\treturn HTTPReaderWriter{writer: writer, reader: reader, method: compression.Method}\n\t\tdefault:\n\t\t\treturn HTTPReaderWriter{method: CompressionNone}\n\t\t}\n\t})\n\terr := pool.Get().err\n\tif err != nil {\n\t\treturn pool, err\n\t}\n\treturn pool, nil\n}\n\nfunc (h *httpConnect) writeData(block *proto.Block) error {\n\t// Saving offset of compressible data\n\tstart := len(h.buffer.Buf)\n\tif err := block.Encode(h.buffer, 0); err != nil {\n\t\treturn err\n\t}\n\tif h.compression == CompressionLZ4 || h.compression == CompressionZSTD {\n\t\t// Performing compression. Supported and requires\n\t\tdata := h.buffer.Buf[start:]\n\t\tif err := h.blockCompressor.Compress(compress.Method(h.compression), data); err != nil {\n\t\t\treturn errors.Wrap(err, \"compress\")\n\t\t}\n\t\th.buffer.Buf = append(h.buffer.Buf[:start], h.blockCompressor.Data...)\n\t}\n\treturn nil\n}\n\nfunc (h *httpConnect) readData(reader *chproto.Reader, timezone *time.Location) (*proto.Block, error) {\n\tlocation := h.location\n\tif timezone != nil {\n\t\tlocation = timezone\n\t}\n\n\tblock := proto.Block{Timezone: location}\n\tif h.compression == CompressionLZ4 || h.compression == CompressionZSTD {\n\t\treader.EnableCompression()\n\t\tdefer reader.DisableCompression()\n\t}\n\tif err := block.Decode(reader, 0); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &block, nil\n}\n\nfunc (h *httpConnect) sendStreamQuery(ctx context.Context, r io.Reader, options *QueryOptions, headers map[string]string) (*http.Response, error) {\n\treq, err := h.createRequest(ctx, h.url.String(), r, options, headers)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tres, err := h.executeRequest(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn res, nil\n}\n\nfunc (h *httpConnect) sendQuery(ctx context.Context, query string, options *QueryOptions, headers map[string]string) (*http.Response, error) {\n\treq, err := h.prepareRequest(ctx, query, options, headers)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tres, err := h.executeRequest(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn res, nil\n}\n\nfunc (h *httpConnect) readRawResponse(response *http.Response) (body []byte, err error) {\n\trw := h.compressionPool.Get()\n\tdefer h.compressionPool.Put(rw)\n\n\treader, err := rw.NewReader(response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif h.compression == CompressionLZ4 || h.compression == CompressionZSTD {\n\t\tchReader := chproto.NewReader(reader)\n\t\tchReader.EnableCompression()\n\t\treader = chReader\n\t}\n\n\tbody, err = io.ReadAll(reader)\n\tif err != nil && !errors.Is(err, io.EOF) {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}\n\nfunc (h *httpConnect) createRequest(ctx context.Context, requestUrl string, reader io.Reader, options *QueryOptions, headers map[string]string) (*http.Request, error) {\n\treq, err := http.NewRequestWithContext(ctx, http.MethodPost, requestUrl, reader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor k, v := range headers {\n\t\treq.Header.Add(k, v)\n\t}\n\tvar query url.Values\n\tif options != nil {\n\t\tquery = req.URL.Query()\n\t\tif options.queryID != \"\" {\n\t\t\tquery.Set(queryIDParamName, options.queryID)\n\t\t}\n\t\tif options.quotaKey != \"\" {\n\t\t\tquery.Set(quotaKeyParamName, options.quotaKey)\n\t\t}\n\t\tfor key, value := range options.settings {\n\t\t\t// check that query doesn't change format\n\t\t\tif key == \"default_format\" {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif cv, ok := value.(CustomSetting); ok {\n\t\t\t\tvalue = cv.Value\n\t\t\t}\n\t\t\tquery.Set(key, fmt.Sprint(value))\n\t\t}\n\t\tfor key, value := range options.parameters {\n\t\t\tquery.Set(fmt.Sprintf(\"param_%s\", key), value)\n\t\t}\n\t\treq.URL.RawQuery = query.Encode()\n\t}\n\treturn req, nil\n}\n\nfunc (h *httpConnect) prepareRequest(ctx context.Context, query string, options *QueryOptions, headers map[string]string) (*http.Request, error) {\n\tif options == nil || len(options.external) == 0 {\n\t\treturn h.createRequest(ctx, h.url.String(), strings.NewReader(query), options, headers)\n\t}\n\treturn h.createRequestWithExternalTables(ctx, query, options, headers)\n}\n\nfunc (h *httpConnect) createRequestWithExternalTables(ctx context.Context, query string, options *QueryOptions, headers map[string]string) (*http.Request, error) {\n\tpayload := &bytes.Buffer{}\n\tw := multipart.NewWriter(payload)\n\tcurrentUrl := new(url.URL)\n\t*currentUrl = *h.url\n\tqueryValues := currentUrl.Query()\n\tbuf := &chproto.Buffer{}\n\tfor _, table := range options.external {\n\t\ttableName := table.Name()\n\t\tqueryValues.Set(fmt.Sprintf(\"%v_format\", tableName), \"Native\")\n\t\tqueryValues.Set(fmt.Sprintf(\"%v_structure\", tableName), table.Structure())\n\t\tpartWriter, err := w.CreateFormFile(tableName, \"\")\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tbuf.Reset()\n\t\terr = table.Block().Encode(buf, 0)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t_, err = partWriter.Write(buf.Buf)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tcurrentUrl.RawQuery = queryValues.Encode()\n\terr := w.WriteField(\"query\", query)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = w.Close()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\theaders[\"Content-Type\"] = w.FormDataContentType()\n\treturn h.createRequest(ctx, currentUrl.String(), bytes.NewReader(payload.Bytes()), options, headers)\n}\n\nfunc (h *httpConnect) executeRequest(req *http.Request) (*http.Response, error) {\n\tif h.client == nil {\n\t\treturn nil, driver.ErrBadConn\n\t}\n\tresp, err := h.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tdefer resp.Body.Close()\n\t\tmsg, err := h.readRawResponse(resp)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"clickhouse [execute]:: %d code: failed to read the response: %w\", resp.StatusCode, err)\n\t\t}\n\t\treturn nil, fmt.Errorf(\"clickhouse [execute]:: %d code: %s\", resp.StatusCode, string(msg))\n\t}\n\treturn resp, nil\n}\n\nfunc (h *httpConnect) ping(ctx context.Context) error {\n\trows, err := h.query(Context(ctx, ignoreExternalTables()), nil, \"SELECT 1\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tcolumn := rows.Columns()\n\t// check that we got column 1\n\tif len(column) == 1 && column[0] == \"1\" {\n\t\treturn nil\n\t}\n\treturn errors.New(\"clickhouse [ping]:: cannot ping clickhouse\")\n}\n\nfunc (h *httpConnect) close() error {\n\tif h.client == nil {\n\t\treturn nil\n\t}\n\th.client.CloseIdleConnections()\n\th.client = nil\n\treturn nil\n}\n"
        },
        {
          "name": "conn_http_async_insert.go",
          "type": "blob",
          "size": 1.474609375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"io\"\n)\n\nfunc (h *httpConnect) asyncInsert(ctx context.Context, query string, wait bool, args ...any) error {\n\n\toptions := queryOptions(ctx)\n\toptions.settings[\"async_insert\"] = 1\n\toptions.settings[\"wait_for_async_insert\"] = 0\n\tif wait {\n\t\toptions.settings[\"wait_for_async_insert\"] = 1\n\t}\n\tif len(args) > 0 {\n\t\tvar err error\n\t\tquery, err = bindQueryOrAppendParameters(true, &options, query, h.location, args...)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tres, err := h.sendQuery(ctx, query, &options, h.headers)\n\tif res != nil {\n\t\tdefer res.Body.Close()\n\t\t// we don't care about result, so just discard it to reuse connection\n\t\t_, _ = io.Copy(io.Discard, res.Body)\n\t}\n\n\treturn err\n}\n"
        },
        {
          "name": "conn_http_batch.go",
          "type": "blob",
          "size": 5.49609375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"slices\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/column\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/driver\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\n// release is ignored, because http used by std with empty release function.\n// Also opts ignored because all options unused in http batch.\nfunc (h *httpConnect) prepareBatch(ctx context.Context, query string, opts driver.PrepareBatchOptions, release func(*connect, error), acquire func(context.Context) (*connect, error)) (driver.Batch, error) {\n\tquery, tableName, queryColumns, err := extractNormalizedInsertQueryAndColumns(query)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdescribeTableQuery := fmt.Sprintf(\"DESCRIBE TABLE %s\", tableName)\n\tr, err := h.query(ctx, release, describeTableQuery)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tblock := &proto.Block{}\n\n\tcolumns := make(map[string]string)\n\tvar colNames []string\n\tfor r.Next() {\n\t\tvar (\n\t\t\tcolName      string\n\t\t\tcolType      string\n\t\t\tdefault_type string\n\t\t\tignore       string\n\t\t)\n\n\t\tif err = r.Scan(&colName, &colType, &default_type, &ignore, &ignore, &ignore, &ignore); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// these column types cannot be specified in INSERT queries\n\t\tif default_type == \"MATERIALIZED\" || default_type == \"ALIAS\" {\n\t\t\tcontinue\n\t\t}\n\t\tcolNames = append(colNames, colName)\n\t\tcolumns[colName] = colType\n\t}\n\n\tswitch len(queryColumns) {\n\tcase 0:\n\t\tfor _, colName := range colNames {\n\t\t\tif err = block.AddColumn(colName, column.Type(columns[colName])); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\tdefault:\n\t\t// user has requested specific columns so only include these\n\t\tfor _, colName := range queryColumns {\n\t\t\tif colType, ok := columns[colName]; ok {\n\t\t\t\tif err = block.AddColumn(colName, column.Type(colType)); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn nil, fmt.Errorf(\"column %s is not present in the table %s\", colName, tableName)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn &httpBatch{\n\t\tctx:       ctx,\n\t\tconn:      h,\n\t\tstructMap: &structMap{},\n\t\tblock:     block,\n\t\tquery:     query,\n\t}, nil\n}\n\ntype httpBatch struct {\n\tquery     string\n\terr       error\n\tctx       context.Context\n\tconn      *httpConnect\n\tstructMap *structMap\n\tsent      bool\n\tblock     *proto.Block\n}\n\n// Flush TODO: noop on http currently - requires streaming to be implemented\nfunc (b *httpBatch) Flush() error {\n\treturn nil\n}\n\nfunc (b *httpBatch) Abort() error {\n\tdefer func() {\n\t\tb.sent = true\n\t}()\n\tif b.sent {\n\t\treturn ErrBatchAlreadySent\n\t}\n\treturn nil\n}\n\nfunc (b *httpBatch) Append(v ...any) error {\n\tif b.sent {\n\t\treturn ErrBatchAlreadySent\n\t}\n\tif err := b.block.Append(v...); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (b *httpBatch) AppendStruct(v any) error {\n\tvalues, err := b.structMap.Map(\"AppendStruct\", b.block.ColumnsNames(), v, false)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn b.Append(values...)\n}\n\nfunc (b *httpBatch) Column(idx int) driver.BatchColumn {\n\tif len(b.block.Columns) <= idx {\n\t\treturn &batchColumn{\n\t\t\terr: &OpError{\n\t\t\t\tOp:  \"batch.Column\",\n\t\t\t\tErr: fmt.Errorf(\"invalid column index %d\", idx),\n\t\t\t},\n\t\t}\n\t}\n\treturn &batchColumn{\n\t\tbatch:  b,\n\t\tcolumn: b.block.Columns[idx],\n\t\trelease: func(err error) {\n\t\t\tb.err = err\n\t\t},\n\t}\n}\n\nfunc (b *httpBatch) IsSent() bool {\n\treturn b.sent\n}\n\nfunc (b *httpBatch) Send() (err error) {\n\tdefer func() {\n\t\tb.sent = true\n\t}()\n\tif b.sent {\n\t\treturn ErrBatchAlreadySent\n\t}\n\tif b.err != nil {\n\t\treturn b.err\n\t}\n\toptions := queryOptions(b.ctx)\n\n\theaders := make(map[string]string)\n\n\tr, pw := io.Pipe()\n\tcrw := b.conn.compressionPool.Get()\n\tw := crw.reset(pw)\n\n\tdefer b.conn.compressionPool.Put(crw)\n\n\tswitch b.conn.compression {\n\tcase CompressionGZIP, CompressionDeflate, CompressionBrotli:\n\t\theaders[\"Content-Encoding\"] = b.conn.compression.String()\n\tcase CompressionZSTD, CompressionLZ4:\n\t\toptions.settings[\"decompress\"] = \"1\"\n\t\toptions.settings[\"compress\"] = \"1\"\n\t}\n\n\tgo func() {\n\t\tvar err error = nil\n\t\tdefer pw.CloseWithError(err)\n\t\tdefer w.Close()\n\t\tb.conn.buffer.Reset()\n\t\tif b.block.Rows() != 0 {\n\t\t\tif err = b.conn.writeData(b.block); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tif err = b.conn.writeData(&proto.Block{}); err != nil {\n\t\t\treturn\n\t\t}\n\t\tif _, err = w.Write(b.conn.buffer.Buf); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\n\toptions.settings[\"query\"] = b.query\n\theaders[\"Content-Type\"] = \"application/octet-stream\"\n\tfor k, v := range b.conn.headers {\n\t\theaders[k] = v\n\t}\n\tres, err := b.conn.sendStreamQuery(b.ctx, r, &options, headers)\n\n\tif res != nil {\n\t\tdefer res.Body.Close()\n\t\t// we don't care about result, so just discard it to reuse connection\n\t\t_, _ = io.Copy(io.Discard, res.Body)\n\t}\n\n\treturn err\n}\n\nfunc (b *httpBatch) Rows() int {\n\treturn b.block.Rows()\n}\n\nfunc (b *httpBatch) Columns() []column.Interface {\n\treturn slices.Clone(b.block.Columns)\n}\n\nvar _ driver.Batch = (*httpBatch)(nil)\n"
        },
        {
          "name": "conn_http_exec.go",
          "type": "blob",
          "size": 1.271484375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"io\"\n)\n\nfunc (h *httpConnect) exec(ctx context.Context, query string, args ...any) error {\n\toptions := queryOptions(ctx)\n\tquery, err := bindQueryOrAppendParameters(true, &options, query, h.location, args...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tres, err := h.sendQuery(ctx, query, &options, h.headers)\n\tif res != nil {\n\t\tdefer res.Body.Close()\n\t\t// we don't care about result, so just discard it to reuse connection\n\t\t_, _ = io.Copy(io.Discard, res.Body)\n\t}\n\n\treturn err\n}\n"
        },
        {
          "name": "conn_http_query.go",
          "type": "blob",
          "size": 3.4599609375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"io\"\n\n\tchproto \"github.com/ClickHouse/ch-go/proto\"\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\n// release is ignored, because http used by std with empty release function\nfunc (h *httpConnect) query(ctx context.Context, release func(*connect, error), query string, args ...any) (*rows, error) {\n\toptions := queryOptions(ctx)\n\tquery, err := bindQueryOrAppendParameters(true, &options, query, h.location, args...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\theaders := make(map[string]string)\n\tswitch h.compression {\n\tcase CompressionZSTD, CompressionLZ4:\n\t\toptions.settings[\"compress\"] = \"1\"\n\tcase CompressionGZIP, CompressionDeflate, CompressionBrotli:\n\t\t// request encoding\n\t\theaders[\"Accept-Encoding\"] = h.compression.String()\n\t}\n\n\tfor k, v := range h.headers {\n\t\theaders[k] = v\n\t}\n\n\tres, err := h.sendQuery(ctx, query, &options, headers)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif res.ContentLength == 0 {\n\t\tblock := &proto.Block{}\n\t\treturn &rows{\n\t\t\tblock:     block,\n\t\t\tcolumns:   block.ColumnsNames(),\n\t\t\tstructMap: &structMap{},\n\t\t}, nil\n\t}\n\n\trw := h.compressionPool.Get()\n\t// The HTTPReaderWriter.NewReader will create a reader that will decompress it if needed,\n\t// cause adding Accept-Encoding:gzip on your request means response won‚Äôt be automatically decompressed\n\t// per https://github.com/golang/go/blob/master/src/net/http/transport.go#L182-L190.\n\t// Note user will need to have set enable_http_compression for CH to respond with compressed data. we don't set this\n\t// automatically as they might not have permissions.\n\treader, err := rw.NewReader(res)\n\tif err != nil {\n\t\tres.Body.Close()\n\t\th.compressionPool.Put(rw)\n\t\treturn nil, err\n\t}\n\tchReader := chproto.NewReader(reader)\n\tblock, err := h.readData(chReader, options.userLocation)\n\tif err != nil && !errors.Is(err, io.EOF) {\n\t\tres.Body.Close()\n\t\th.compressionPool.Put(rw)\n\t\treturn nil, err\n\t}\n\n\tbufferSize := h.blockBufferSize\n\tif options.blockBufferSize > 0 {\n\t\t// allow block buffer sze to be overridden per query\n\t\tbufferSize = options.blockBufferSize\n\t}\n\tvar (\n\t\terrCh  = make(chan error)\n\t\tstream = make(chan *proto.Block, bufferSize)\n\t)\n\tgo func() {\n\t\tfor {\n\t\t\tblock, err := h.readData(chReader, options.userLocation)\n\t\t\tif err != nil {\n\t\t\t\t// ch-go wraps EOF errors\n\t\t\t\tif !errors.Is(err, io.EOF) {\n\t\t\t\t\terrCh <- err\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\terrCh <- ctx.Err()\n\t\t\t\tbreak\n\t\t\tcase stream <- block:\n\t\t\t}\n\t\t}\n\t\tres.Body.Close()\n\t\th.compressionPool.Put(rw)\n\t\tclose(stream)\n\t\tclose(errCh)\n\t}()\n\n\tif block == nil {\n\t\tblock = &proto.Block{}\n\t}\n\treturn &rows{\n\t\tblock:     block,\n\t\tstream:    stream,\n\t\terrors:    errCh,\n\t\tcolumns:   block.ColumnsNames(),\n\t\tstructMap: &structMap{},\n\t}, nil\n}\n"
        },
        {
          "name": "conn_logs.go",
          "type": "blob",
          "size": 2.2509765625,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\ntype Log struct {\n\tTime      time.Time\n\tTimeMicro uint32\n\tHostname  string\n\tQueryID   string\n\tThreadID  uint64\n\tPriority  int8\n\tSource    string\n\tText      string\n}\n\nfunc (c *connect) logs(ctx context.Context) ([]Log, error) {\n\tblock, err := c.readData(ctx, proto.ServerLog, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tc.debugf(\"[logs] rows=%d\", block.Rows())\n\tvar (\n\t\tlogs  []Log\n\t\tnames = block.ColumnsNames()\n\t)\n\tfor r := 0; r < block.Rows(); r++ {\n\t\tvar log Log\n\t\tfor i, b := range block.Columns {\n\t\t\tswitch names[i] {\n\t\t\tcase \"event_time\":\n\t\t\t\tif err := b.ScanRow(&log.Time, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"event_time_microseconds\":\n\t\t\t\tif err := b.ScanRow(&log.TimeMicro, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"host_name\":\n\t\t\t\tif err := b.ScanRow(&log.Hostname, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"query_id\":\n\t\t\t\tif err := b.ScanRow(&log.QueryID, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"thread_id\":\n\t\t\t\tif err := b.ScanRow(&log.ThreadID, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"priority\":\n\t\t\t\tif err := b.ScanRow(&log.Priority, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"source\":\n\t\t\t\tif err := b.ScanRow(&log.Source, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"text\":\n\t\t\t\tif err := b.ScanRow(&log.Text, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlogs = append(logs, log)\n\t}\n\treturn logs, nil\n}\n"
        },
        {
          "name": "conn_ping.go",
          "type": "blob",
          "size": 1.912109375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\n// Connection::ping\n// https://github.com/ClickHouse/ClickHouse/blob/master/src/Client/Connection.cpp\nfunc (c *connect) ping(ctx context.Context) (err error) {\n\t// set a read deadline - alternative to context.Read operation will fail if no data is received after deadline.\n\tc.conn.SetReadDeadline(time.Now().Add(c.readTimeout))\n\tdefer c.conn.SetReadDeadline(time.Time{})\n\t// context level deadlines override any read deadline\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tc.conn.SetDeadline(deadline)\n\t\tdefer c.conn.SetDeadline(time.Time{})\n\t}\n\tc.debugf(\"[ping] -> ping\")\n\tc.buffer.PutByte(proto.ClientPing)\n\tif err := c.flush(); err != nil {\n\t\treturn err\n\t}\n\n\tvar packet byte\n\tfor {\n\t\tif packet, err = c.reader.ReadByte(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tswitch packet {\n\t\tcase proto.ServerException:\n\t\t\treturn c.exception()\n\t\tcase proto.ServerProgress:\n\t\t\tif _, err = c.progress(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase proto.ServerPong:\n\t\t\tc.debugf(\"[ping] <- pong\")\n\t\t\treturn nil\n\t\tdefault:\n\t\t\treturn fmt.Errorf(\"unexpected packet %d\", packet)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "conn_process.go",
          "type": "blob",
          "size": 4.95703125,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n\t\"github.com/pkg/errors\"\n)\n\ntype onProcess struct {\n\tdata          func(*proto.Block)\n\tlogs          func([]Log)\n\tprogress      func(*Progress)\n\tprofileInfo   func(*ProfileInfo)\n\tprofileEvents func([]ProfileEvent)\n}\n\nfunc (c *connect) firstBlock(ctx context.Context, on *onProcess) (*proto.Block, error) {\n\t// if context is already timedout/cancelled ‚Äî we're done\n\tselect {\n\tcase <-ctx.Done():\n\t\tc.cancel()\n\t\treturn nil, ctx.Err()\n\tdefault:\n\t}\n\n\t// do reads in background\n\tresultCh := make(chan *proto.Block, 1)\n\terrCh := make(chan error, 1)\n\n\tgo func() {\n\t\tblock, err := c.firstBlockImpl(ctx, on)\n\t\tif err != nil {\n\t\t\terrCh <- err\n\t\t\treturn\n\t\t}\n\t\tresultCh <- block\n\t}()\n\n\t// select on context or read channels (results/errors)\n\tselect {\n\tcase <-ctx.Done():\n\t\tc.cancel()\n\t\treturn nil, ctx.Err()\n\n\tcase err := <-errCh:\n\t\treturn nil, err\n\n\tcase block := <-resultCh:\n\t\treturn block, nil\n\t}\n}\n\nfunc (c *connect) firstBlockImpl(ctx context.Context, on *onProcess) (*proto.Block, error) {\n\tc.readerMutex.Lock()\n\tdefer c.readerMutex.Unlock()\n\n\tfor {\n\t\tif c.reader == nil {\n\t\t\treturn nil, errors.New(\"unexpected state: c.reader is nil\")\n\t\t}\n\n\t\tpacket, err := c.reader.ReadByte()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tswitch packet {\n\t\tcase proto.ServerData:\n\t\t\treturn c.readData(ctx, packet, true)\n\n\t\tcase proto.ServerEndOfStream:\n\t\t\tc.debugf(\"[end of stream]\")\n\t\t\treturn nil, io.EOF\n\n\t\tdefault:\n\t\t\tif err := c.handle(ctx, packet, on); err != nil {\n\t\t\t\t// handling error, return\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\t// handled okay, read next byte\n\t\t}\n\t}\n}\n\nfunc (c *connect) process(ctx context.Context, on *onProcess) error {\n\t// if context is already timedout/cancelled ‚Äî we're done\n\tselect {\n\tcase <-ctx.Done():\n\t\tc.cancel()\n\t\treturn ctx.Err()\n\tdefault:\n\t}\n\n\t// do reads in background\n\terrCh := make(chan error, 1)\n\tdoneCh := make(chan bool, 1)\n\n\tgo func() {\n\t\terr := c.processImpl(ctx, on)\n\t\tif err != nil {\n\t\t\terrCh <- err\n\t\t\treturn\n\t\t}\n\n\t\tdoneCh <- true\n\t}()\n\n\t// select on context or read channel (errors)\n\tselect {\n\tcase <-ctx.Done():\n\t\tc.cancel()\n\t\treturn ctx.Err()\n\n\tcase err := <-errCh:\n\t\treturn err\n\n\tcase <-doneCh:\n\t\treturn nil\n\t}\n}\n\nfunc (c *connect) processImpl(ctx context.Context, on *onProcess) error {\n\tc.readerMutex.Lock()\n\tdefer c.readerMutex.Unlock()\n\n\tfor {\n\t\tif c.reader == nil {\n\t\t\treturn errors.New(\"unexpected state: c.reader is nil\")\n\t\t}\n\n\t\tpacket, err := c.reader.ReadByte()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tswitch packet {\n\t\tcase proto.ServerEndOfStream:\n\t\t\tc.debugf(\"[end of stream]\")\n\t\t\treturn nil\n\t\t}\n\n\t\tif err := c.handle(ctx, packet, on); err != nil {\n\t\t\t// handling error, return\n\t\t\treturn err\n\t\t}\n\n\t\t// handled okay, read next byte\n\t}\n}\n\nfunc (c *connect) handle(ctx context.Context, packet byte, on *onProcess) error {\n\tswitch packet {\n\tcase proto.ServerData, proto.ServerTotals, proto.ServerExtremes:\n\t\tblock, err := c.readData(ctx, packet, true)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif block.Rows() != 0 && on.data != nil {\n\t\t\ton.data(block)\n\t\t}\n\tcase proto.ServerException:\n\t\treturn c.exception()\n\tcase proto.ServerProfileInfo:\n\t\tvar info proto.ProfileInfo\n\t\tif err := info.Decode(c.reader, c.revision); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc.debugf(\"[profile info] %s\", &info)\n\t\ton.profileInfo(&info)\n\tcase proto.ServerTableColumns:\n\t\tvar info proto.TableColumns\n\t\tif err := info.Decode(c.reader, c.revision); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc.debugf(\"[table columns]\")\n\tcase proto.ServerProfileEvents:\n\t\tevents, err := c.profileEvents(ctx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ton.profileEvents(events)\n\tcase proto.ServerLog:\n\t\tlogs, err := c.logs(ctx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ton.logs(logs)\n\tcase proto.ServerProgress:\n\t\tprogress, err := c.progress()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tc.debugf(\"[progress] %s\", progress)\n\t\ton.progress(progress)\n\tdefault:\n\t\treturn &OpError{\n\t\t\tOp:  \"process\",\n\t\t\tErr: fmt.Errorf(\"unexpected packet %d\", packet),\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (c *connect) cancel() error {\n\tc.debugf(\"[cancel]\")\n\tc.buffer.PutUVarInt(proto.ClientCancel)\n\twErr := c.flush()\n\t// don't reuse a cancelled query as we don't drain the connection\n\tif cErr := c.close(); cErr != nil {\n\t\treturn cErr\n\t}\n\treturn wErr\n}\n"
        },
        {
          "name": "conn_profile_events.go",
          "type": "blob",
          "size": 2.3056640625,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"reflect\"\n\t\"time\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\ntype ProfileEvent struct {\n\tHostname    string\n\tCurrentTime time.Time\n\tThreadID    uint64\n\tType        string\n\tName        string\n\tValue       int64\n}\n\nfunc (c *connect) profileEvents(ctx context.Context) ([]ProfileEvent, error) {\n\tblock, err := c.readData(ctx, proto.ServerProfileEvents, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tc.debugf(\"[profile events] rows=%d\", block.Rows())\n\tvar (\n\t\tevents []ProfileEvent\n\t\tnames  = block.ColumnsNames()\n\t)\n\tfor r := 0; r < block.Rows(); r++ {\n\t\tvar event ProfileEvent\n\t\tfor i, b := range block.Columns {\n\t\t\tswitch names[i] {\n\t\t\tcase \"host_name\":\n\t\t\t\tif err := b.ScanRow(&event.Hostname, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"current_time\":\n\t\t\t\tif err := b.ScanRow(&event.CurrentTime, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"thread_id\":\n\t\t\t\tif err := b.ScanRow(&event.ThreadID, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"type\":\n\t\t\t\tif err := b.ScanRow(&event.Type, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"name\":\n\t\t\t\tif err := b.ScanRow(&event.Name, r); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\tcase \"value\":\n\t\t\t\tswitch b.ScanType().Kind() {\n\t\t\t\tcase reflect.Uint64:\n\t\t\t\t\tvar v uint64\n\t\t\t\t\tif err := b.ScanRow(&v, r); err != nil {\n\t\t\t\t\t\treturn nil, err\n\t\t\t\t\t}\n\t\t\t\t\tevent.Value = int64(v)\n\t\t\t\tdefault:\n\t\t\t\t\tif err := b.ScanRow(&event.Value, r); err != nil {\n\t\t\t\t\t\treturn nil, err\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevents = append(events, event)\n\t}\n\treturn events, nil\n}\n"
        },
        {
          "name": "conn_query.go",
          "type": "blob",
          "size": 2.9013671875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\nfunc (c *connect) query(ctx context.Context, release func(*connect, error), query string, args ...any) (*rows, error) {\n\tvar (\n\t\toptions                    = queryOptions(ctx)\n\t\tonProcess                  = options.onProcess()\n\t\tqueryParamsProtocolSupport = c.revision >= proto.DBMS_MIN_PROTOCOL_VERSION_WITH_PARAMETERS\n\t\tbody, err                  = bindQueryOrAppendParameters(queryParamsProtocolSupport, &options, query, c.server.Timezone, args...)\n\t)\n\n\tif err != nil {\n\t\tc.debugf(\"[bindQuery] error: %v\", err)\n\t\trelease(c, err)\n\t\treturn nil, err\n\t}\n\n\t// set a read deadline - alternative to context.Read operation will fail if no data is received after deadline.\n\tc.conn.SetReadDeadline(time.Now().Add(c.readTimeout))\n\tdefer c.conn.SetReadDeadline(time.Time{})\n\t// context level deadlines override any read deadline\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tc.conn.SetDeadline(deadline)\n\t\tdefer c.conn.SetDeadline(time.Time{})\n\t}\n\n\tif err = c.sendQuery(body, &options); err != nil {\n\t\trelease(c, err)\n\t\treturn nil, err\n\t}\n\n\tinit, err := c.firstBlock(ctx, onProcess)\n\n\tif err != nil {\n\t\tc.debugf(\"[query] first block error: %v\", err)\n\t\trelease(c, err)\n\t\treturn nil, err\n\t}\n\tbufferSize := c.blockBufferSize\n\tif options.blockBufferSize > 0 {\n\t\t// allow block buffer sze to be overridden per query\n\t\tbufferSize = options.blockBufferSize\n\t}\n\tvar (\n\t\terrors = make(chan error, 1)\n\t\tstream = make(chan *proto.Block, bufferSize)\n\t)\n\n\tgo func() {\n\t\tonProcess.data = func(b *proto.Block) {\n\t\t\tstream <- b\n\t\t}\n\t\terr := c.process(ctx, onProcess)\n\t\tif err != nil {\n\t\t\tc.debugf(\"[query] process error: %v\", err)\n\t\t\terrors <- err\n\t\t}\n\t\tclose(stream)\n\t\tclose(errors)\n\t\trelease(c, err)\n\t}()\n\n\treturn &rows{\n\t\tblock:     init,\n\t\tstream:    stream,\n\t\terrors:    errors,\n\t\tcolumns:   init.ColumnsNames(),\n\t\tstructMap: c.structMap,\n\t}, nil\n}\n\nfunc (c *connect) queryRow(ctx context.Context, release func(*connect, error), query string, args ...any) *row {\n\trows, err := c.query(ctx, release, query, args...)\n\tif err != nil {\n\t\treturn &row{\n\t\t\terr: err,\n\t\t}\n\t}\n\treturn &row{\n\t\trows: rows,\n\t}\n}\n"
        },
        {
          "name": "conn_send_query.go",
          "type": "blob",
          "size": 2.21484375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\n// Connection::sendQuery\n// https://github.com/ClickHouse/ClickHouse/blob/master/src/Client/Connection.cpp\nfunc (c *connect) sendQuery(body string, o *QueryOptions) error {\n\tc.debugf(\"[send query] compression=%q %s\", c.compression, body)\n\tc.buffer.PutByte(proto.ClientQuery)\n\tq := proto.Query{\n\t\tClientTCPProtocolVersion: ClientTCPProtocolVersion,\n\t\tClientName:               c.opt.ClientInfo.String(),\n\t\tClientVersion:            proto.Version{ClientVersionMajor, ClientVersionMinor, ClientVersionPatch}, //nolint:govet\n\t\tID:                       o.queryID,\n\t\tBody:                     body,\n\t\tSpan:                     o.span,\n\t\tQuotaKey:                 o.quotaKey,\n\t\tCompression:              c.compression != CompressionNone,\n\t\tInitialAddress:           c.conn.LocalAddr().String(),\n\t\tSettings:                 c.settings(o.settings),\n\t\tParameters:               parametersToProtoParameters(o.parameters),\n\t}\n\tif err := q.Encode(c.buffer, c.revision); err != nil {\n\t\treturn err\n\t}\n\tfor _, table := range o.external {\n\t\tif err := c.sendData(table.Block(), table.Name()); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif err := c.sendData(&proto.Block{}, \"\"); err != nil {\n\t\treturn err\n\t}\n\treturn c.flush()\n}\n\nfunc parametersToProtoParameters(parameters Parameters) (s proto.Parameters) {\n\tfor k, v := range parameters {\n\t\ts = append(s, proto.Parameter{\n\t\t\tKey:   k,\n\t\t\tValue: v,\n\t\t})\n\t}\n\n\treturn s\n}\n"
        },
        {
          "name": "context.go",
          "type": "blob",
          "size": 5.0087890625,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/ext\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\nvar _contextOptionKey = &QueryOptions{\n\tsettings: Settings{\n\t\t\"_contextOption\": struct{}{},\n\t},\n}\n\ntype Settings map[string]any\n\n// CustomSetting is a helper struct to distinguish custom settings from important ones.\n// For native protocol, is_important flag is set to value 0x02 (see https://github.com/ClickHouse/ClickHouse/blob/c873560fe7185f45eed56520ec7d033a7beb1551/src/Core/BaseSettings.h#L516-L521)\n// Only string value is supported until formatting logic that exists in ClickHouse is implemented in clickhouse-go. (https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/Field.cpp#L312 and https://github.com/ClickHouse/clickhouse-go/issues/992)\ntype CustomSetting struct {\n\tValue string\n}\n\ntype Parameters map[string]string\ntype (\n\tQueryOption  func(*QueryOptions) error\n\tQueryOptions struct {\n\t\tspan  trace.SpanContext\n\t\tasync struct {\n\t\t\tok   bool\n\t\t\twait bool\n\t\t}\n\t\tqueryID  string\n\t\tquotaKey string\n\t\tevents   struct {\n\t\t\tlogs          func(*Log)\n\t\t\tprogress      func(*Progress)\n\t\t\tprofileInfo   func(*ProfileInfo)\n\t\t\tprofileEvents func([]ProfileEvent)\n\t\t}\n\t\tsettings        Settings\n\t\tparameters      Parameters\n\t\texternal        []*ext.Table\n\t\tblockBufferSize uint8\n\t\tuserLocation    *time.Location\n\t}\n)\n\nfunc WithSpan(span trace.SpanContext) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.span = span\n\t\treturn nil\n\t}\n}\n\nfunc WithQueryID(queryID string) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.queryID = queryID\n\t\treturn nil\n\t}\n}\n\nfunc WithBlockBufferSize(size uint8) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.blockBufferSize = size\n\t\treturn nil\n\t}\n}\n\nfunc WithQuotaKey(quotaKey string) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.quotaKey = quotaKey\n\t\treturn nil\n\t}\n}\n\nfunc WithSettings(settings Settings) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.settings = settings\n\t\treturn nil\n\t}\n}\n\nfunc WithParameters(params Parameters) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.parameters = params\n\t\treturn nil\n\t}\n}\n\nfunc WithLogs(fn func(*Log)) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.events.logs = fn\n\t\treturn nil\n\t}\n}\n\nfunc WithProgress(fn func(*Progress)) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.events.progress = fn\n\t\treturn nil\n\t}\n}\n\nfunc WithProfileInfo(fn func(*ProfileInfo)) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.events.profileInfo = fn\n\t\treturn nil\n\t}\n}\n\nfunc WithProfileEvents(fn func([]ProfileEvent)) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.events.profileEvents = fn\n\t\treturn nil\n\t}\n}\n\nfunc WithExternalTable(t ...*ext.Table) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.external = append(o.external, t...)\n\t\treturn nil\n\t}\n}\n\nfunc WithStdAsync(wait bool) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.async.ok, o.async.wait = true, wait\n\t\treturn nil\n\t}\n}\n\nfunc WithUserLocation(location *time.Location) QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.userLocation = location\n\t\treturn nil\n\t}\n}\n\nfunc ignoreExternalTables() QueryOption {\n\treturn func(o *QueryOptions) error {\n\t\to.external = nil\n\t\treturn nil\n\t}\n}\n\nfunc Context(parent context.Context, options ...QueryOption) context.Context {\n\topt := queryOptions(parent)\n\tfor _, f := range options {\n\t\tf(&opt)\n\t}\n\treturn context.WithValue(parent, _contextOptionKey, opt)\n}\n\nfunc queryOptions(ctx context.Context) QueryOptions {\n\tif o, ok := ctx.Value(_contextOptionKey).(QueryOptions); ok {\n\t\tif deadline, ok := ctx.Deadline(); ok {\n\t\t\tif sec := time.Until(deadline).Seconds(); sec > 1 {\n\t\t\t\to.settings[\"max_execution_time\"] = int(sec + 5)\n\t\t\t}\n\t\t}\n\t\treturn o\n\t}\n\treturn QueryOptions{\n\t\tsettings: make(Settings),\n\t}\n}\n\nfunc (q *QueryOptions) onProcess() *onProcess {\n\treturn &onProcess{\n\t\tlogs: func(logs []Log) {\n\t\t\tif q.events.logs != nil {\n\t\t\t\tfor _, l := range logs {\n\t\t\t\t\tq.events.logs(&l)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tprogress: func(p *Progress) {\n\t\t\tif q.events.progress != nil {\n\t\t\t\tq.events.progress(p)\n\t\t\t}\n\t\t},\n\t\tprofileInfo: func(p *ProfileInfo) {\n\t\t\tif q.events.profileInfo != nil {\n\t\t\t\tq.events.profileInfo(p)\n\t\t\t}\n\t\t},\n\t\tprofileEvents: func(events []ProfileEvent) {\n\t\t\tif q.events.profileEvents != nil {\n\t\t\t\tq.events.profileEvents(events)\n\t\t\t}\n\t\t},\n\t}\n}\n"
        },
        {
          "name": "context_test.go",
          "type": "blob",
          "size": 1.6064453125,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestContext(t *testing.T) {\n\tt.Run(\"call context multiple times making sure query options are persisted across calls\",\n\t\tfunc(t *testing.T) {\n\t\t\tctx := Context(context.Background(), WithQueryID(\"a\"))\n\t\t\tctx = Context(ctx, WithQuotaKey(\"b\"))\n\t\t\tctx = Context(ctx, WithSettings(Settings{\n\t\t\t\t\"c\": \"d\",\n\t\t\t}))\n\n\t\t\topts := queryOptions(ctx)\n\t\t\tassert.Equal(t, \"a\", opts.queryID)\n\t\t\tassert.Equal(t, \"b\", opts.quotaKey)\n\t\t\tassert.Equal(t, \"d\", opts.settings[\"c\"])\n\t\t},\n\t)\n\n\tt.Run(\"call context multiple times making sure query options are persisted across calls\",\n\t\tfunc(t *testing.T) {\n\t\t\tctx := Context(context.Background(), WithQueryID(\"a\"))\n\t\t\tctx = Context(ctx, WithQueryID(\"b\"))\n\n\t\t\topts := queryOptions(ctx)\n\t\t\tassert.Equal(t, \"b\", opts.queryID)\n\t\t},\n\t)\n}\n"
        },
        {
          "name": "context_watchdog.go",
          "type": "blob",
          "size": 1.4814453125,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport \"context\"\n\n// contextWatchdog is a helper function to run a callback when the context is done.\n// it has a cancellation function to prevent the callback from running.\n// Useful for interrupting some logic when the context is done,\n// but you want to not bother about context cancellation if your logic is already done.\n// Example:\n// stopCW := contextWatchdog(ctx, func() { /* do something */ })\n// // do something else\n// defer stopCW()\nfunc contextWatchdog(ctx context.Context, callback func()) (cancel func()) {\n\texit := make(chan struct{})\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-exit:\n\t\t\t\treturn\n\t\t\tcase <-ctx.Done():\n\t\t\t\tcallback()\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn func() {\n\t\texit <- struct{}{}\n\t}\n}\n"
        },
        {
          "name": "contributors",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.2646484375,
          "content": "---\nversion: '3.9'\nservices:\n  clickhouse:\n    networks:\n      - clickhouse\n    container_name: clickhouse\n    image: clickhouse/clickhouse-server\n    ports:\n      - 127.0.0.1:8123:8123\n      - 127.0.0.1:9000:9000\n      - 127.0.0.1:9009:9009\nnetworks:\n  clickhouse: null\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 3.4677734375,
          "content": "module github.com/ClickHouse/clickhouse-go/v2\n\ngo 1.21\n\nrequire (\n\tgithub.com/ClickHouse/ch-go v0.63.1\n\tgithub.com/ClickHouse/clickhouse-go v1.5.4\n\tgithub.com/andybalholm/brotli v1.1.1\n\tgithub.com/docker/docker v27.4.1+incompatible\n\tgithub.com/docker/go-connections v0.5.0\n\tgithub.com/docker/go-units v0.5.0\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/mkevac/debugcharts v0.0.0-20191222103121-ae1c48aa8615\n\tgithub.com/paulmach/orb v0.11.1\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/shopspring/decimal v1.4.0\n\tgithub.com/stretchr/testify v1.10.0\n\tgithub.com/testcontainers/testcontainers-go v0.33.0\n\tgo.opentelemetry.io/otel/trace v1.26.0\n\tgolang.org/x/net v0.34.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire go.opentelemetry.io/otel v1.26.0 // indirect\n\nrequire (\n\tdario.cat/mergo v1.0.0 // indirect\n\tgithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 // indirect\n\tgithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.2 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.3.0 // indirect\n\tgithub.com/cloudflare/golz4 v0.0.0-20150217214814-ef862a3cdc58 // indirect\n\tgithub.com/containerd/log v0.1.0 // indirect\n\tgithub.com/containerd/platforms v0.2.1 // indirect\n\tgithub.com/cpuguy83/dockercfg v0.3.1 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/distribution/reference v0.6.0 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/go-faster/city v1.0.1 // indirect\n\tgithub.com/go-faster/errors v0.7.1 // indirect\n\tgithub.com/go-logr/logr v1.4.1 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-ole/go-ole v1.2.6 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/gorilla/websocket v1.4.2 // indirect\n\tgithub.com/klauspost/compress v1.17.11 // indirect\n\tgithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0 // indirect\n\tgithub.com/magiconair/properties v1.8.7 // indirect\n\tgithub.com/moby/docker-image-spec v1.3.1 // indirect\n\tgithub.com/moby/patternmatcher v0.6.0 // indirect\n\tgithub.com/moby/sys/sequential v0.5.0 // indirect\n\tgithub.com/moby/sys/user v0.1.0 // indirect\n\tgithub.com/moby/sys/userns v0.1.0 // indirect\n\tgithub.com/moby/term v0.5.0 // indirect\n\tgithub.com/morikuni/aec v1.0.0 // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.1.0 // indirect\n\tgithub.com/pierrec/lz4/v4 v4.1.21 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c // indirect\n\tgithub.com/segmentio/asm v1.2.0 // indirect\n\tgithub.com/shirou/gopsutil v3.21.11+incompatible // indirect\n\tgithub.com/shirou/gopsutil/v3 v3.23.12 // indirect\n\tgithub.com/shoenig/go-m1cpu v0.1.6 // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.12 // indirect\n\tgithub.com/tklauser/numcpus v0.6.1 // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.3 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.49.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.19.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.26.0 // indirect\n\tgolang.org/x/crypto v0.32.0 // indirect\n\tgolang.org/x/sys v0.29.0 // indirect\n\tgolang.org/x/time v0.0.0-20220210224613-90d013bbcef8 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20240318140521-94a12d6c2237 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240318140521-94a12d6c2237 // indirect\n\tgoogle.golang.org/protobuf v1.33.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 23.9921875,
          "content": "dario.cat/mergo v1.0.0 h1:AGCNq9Evsj31mOgNPcLyXc+4PNABt905YmuqPYYpBWk=\ndario.cat/mergo v1.0.0/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 h1:bvDV9vkmnHYOMsOr4WLk+Vo07yKIzd94sVoIqshQ4bU=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24/go.mod h1:8o94RPi1/7XTJvwPpRSzSUedZrtlirdB3r9Z20bi2f8=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 h1:UQHMgLO+TxOElx5B5HZ4hJQsoJ/PvUvKRhJHDQXO8P8=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=\ngithub.com/ClickHouse/ch-go v0.63.1 h1:s2JyZvWLTCSAGdtjMBBmAgQQHMco6pawLJMOXi0FODM=\ngithub.com/ClickHouse/ch-go v0.63.1/go.mod h1:I1kJJCL3WJcBMGe1m+HVK0+nREaG+JOYYBWjrDrF3R0=\ngithub.com/ClickHouse/clickhouse-go v1.5.4 h1:cKjXeYLNWVJIx2J1K6H2CqyRmfwVJVY1OV1coaaFcI0=\ngithub.com/ClickHouse/clickhouse-go v1.5.4/go.mod h1:EaI/sW7Azgz9UATzd5ZdZHRUhHgv5+JMS9NSr2smCJI=\ngithub.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=\ngithub.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=\ngithub.com/StackExchange/wmi v0.0.0-20190523213315-cbe66965904d/go.mod h1:3eOhrUMpNV+6aFIbp5/iudMxNCF27Vw2OZgy4xEx0Fg=\ngithub.com/andybalholm/brotli v1.1.1 h1:PR2pgnyFznKEugtsUo0xLdDop5SKXd5Qf5ysW+7XdTA=\ngithub.com/andybalholm/brotli v1.1.1/go.mod h1:05ib4cKhjx3OQYUY22hTVd34Bc8upXjOLL2rKwwZBoA=\ngithub.com/bkaradzic/go-lz4 v1.0.0 h1:RXc4wYsyz985CkXXeX04y4VnZFGG8Rd43pRaHsOXAKk=\ngithub.com/bkaradzic/go-lz4 v1.0.0/go.mod h1:0YdlkowM3VswSROI7qDxhRvJ3sLhlFrRRwjwegp5jy4=\ngithub.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=\ngithub.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=\ngithub.com/cloudflare/golz4 v0.0.0-20150217214814-ef862a3cdc58 h1:F1EaeKL/ta07PY/k9Os/UFtwERei2/XzGemhpGnBKNg=\ngithub.com/cloudflare/golz4 v0.0.0-20150217214814-ef862a3cdc58/go.mod h1:EOBUe0h4xcZ5GoxqC5SDxFQ8gwyZPKQoEzownBlhI80=\ngithub.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=\ngithub.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=\ngithub.com/containerd/platforms v0.2.1 h1:zvwtM3rz2YHPQsF2CHYM8+KtB5dvhISiXh5ZpSBQv6A=\ngithub.com/containerd/platforms v0.2.1/go.mod h1:XHCb+2/hzowdiut9rkudds9bE5yJ7npe7dG/wG+uFPw=\ngithub.com/cpuguy83/dockercfg v0.3.1 h1:/FpZ+JaygUR/lZP2NlFI2DVfrOEMAIKP5wWEJdoYe9E=\ngithub.com/cpuguy83/dockercfg v0.3.1/go.mod h1:sugsbF4//dDlL/i+S+rtpIWp+5h0BHJHfjj5/jFyUJc=\ngithub.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=\ngithub.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/distribution/reference v0.6.0 h1:0IXCQ5g4/QMHHkarYzh5l+u8T3t73zM5QvfrDyIgxBk=\ngithub.com/distribution/reference v0.6.0/go.mod h1:BbU0aIcezP1/5jX/8MP0YiH4SdvB5Y4f/wlDRiLyi3E=\ngithub.com/docker/docker v27.4.1+incompatible h1:ZJvcY7gfwHn1JF48PfbyXg7Jyt9ZCWDW+GGXOIxEwp4=\ngithub.com/docker/docker v27.4.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=\ngithub.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=\ngithub.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=\ngithub.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/go-faster/city v1.0.1 h1:4WAxSZ3V2Ws4QRDrscLEDcibJY8uf41H6AhXDrNDcGw=\ngithub.com/go-faster/city v1.0.1/go.mod h1:jKcUJId49qdW3L1qKHH/3wPeUstCVpVSXTM6vO3VcTw=\ngithub.com/go-faster/errors v0.7.1 h1:MkJTnDoEdi9pDabt1dpWf7AA8/BaSYZqibYyhZ20AYg=\ngithub.com/go-faster/errors v0.7.1/go.mod h1:5ySTjWFiphBs07IKuiL69nxdfd5+fzh1u7FPGZP2quo=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=\ngithub.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-ole/go-ole v1.2.4/go.mod h1:XCwSNxSkXRo4vlyPy93sltvi/qJq0jqQhjqQNIwKuxM=\ngithub.com/go-ole/go-ole v1.2.6 h1:/Fpf6oFPoeFik9ty7siob0G6Ke8QvQEuVcuChpwXzpY=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-sql-driver/mysql v1.4.0/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/handlers v1.4.2/go.mod h1:Qkdc/uu4tH4g6mTK6auzZ766c4CA0Ng8+o/OAirnOIQ=\ngithub.com/gorilla/websocket v1.4.1/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\ngithub.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.16.0 h1:YBftPWNWd4WwGqtY2yeZL2ef8rHAxPBD8KFhJpmcqms=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.16.0/go.mod h1:YN5jB8ie0yfIUg6VvR9Kz84aCaG7AsGZnLjhHbUqwPg=\ngithub.com/jmoiron/sqlx v1.2.0/go.mod h1:1FEQNm3xlJgrMD+FBdI9+xvCksHtbpVBBw5dYhBSsks=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/klauspost/compress v1.13.6/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0 h1:6E+4a0GO5zZEnZ81pIr0yLvtUWk2if982qA3F3QD6H4=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0/go.mod h1:zJYVVT2jmtg6P3p1VtQj7WsuWi/y4VnjVBn7F8KPB3I=\ngithub.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=\ngithub.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/mattn/go-sqlite3 v1.9.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/mkevac/debugcharts v0.0.0-20191222103121-ae1c48aa8615 h1:/mD+ABZyXD39BzJI2XyRJlqdZG11gXFo0SSynL+OFeU=\ngithub.com/mkevac/debugcharts v0.0.0-20191222103121-ae1c48aa8615/go.mod h1:Ad7oeElCZqA1Ufj0U9/liOF4BtVepxRcTvr2ey7zTvM=\ngithub.com/moby/docker-image-spec v1.3.1 h1:jMKff3w6PgbfSa69GfNg+zN/XLhfXJGnEx3Nl2EsFP0=\ngithub.com/moby/docker-image-spec v1.3.1/go.mod h1:eKmb5VW8vQEh/BAr2yvVNvuiJuY6UIocYsFu/DxxRpo=\ngithub.com/moby/patternmatcher v0.6.0 h1:GmP9lR19aU5GqSSFko+5pRqHi+Ohk1O69aFiKkVGiPk=\ngithub.com/moby/patternmatcher v0.6.0/go.mod h1:hDPoyOpDY7OrrMDLaYoY3hf52gNCR/YOUYxkhApJIxc=\ngithub.com/moby/sys/sequential v0.5.0 h1:OPvI35Lzn9K04PBbCLW0g4LcFAJgHsvXsRyewg5lXtc=\ngithub.com/moby/sys/sequential v0.5.0/go.mod h1:tH2cOOs5V9MlPiXcQzRC+eEyab644PWKGRYaaV5ZZlo=\ngithub.com/moby/sys/user v0.1.0 h1:WmZ93f5Ux6het5iituh9x2zAG7NFY9Aqi49jjE1PaQg=\ngithub.com/moby/sys/user v0.1.0/go.mod h1:fKJhFOnsCN6xZ5gSfbM6zaHGgDJMrqt9/reuj4T7MmU=\ngithub.com/moby/sys/userns v0.1.0 h1:tVLXkFOxVu9A64/yh59slHVv9ahO9UIev4JZusOLG/g=\ngithub.com/moby/sys/userns v0.1.0/go.mod h1:IHUYgu/kao6N8YZlp9Cf444ySSvCmDlmzUcYfDHOl28=\ngithub.com/moby/term v0.5.0 h1:xt8Q1nalod/v7BqbG21f8mQPqH+xAaC9C3N3wfWbVP0=\ngithub.com/moby/term v0.5.0/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=\ngithub.com/montanaflynn/stats v0.0.0-20171201202039-1bf9dbcd8cbe/go.mod h1:wL8QJuTMNUDYhXwkmfOly8iTdp5TEcJFWZD2D7SIkUc=\ngithub.com/morikuni/aec v1.0.0 h1:nP9CBfwrvYnBRgY6qfDQkygYDmYwOilePFkwzv4dU8A=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=\ngithub.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=\ngithub.com/paulmach/orb v0.11.1 h1:3koVegMC4X/WeiXYz9iswopaTwMem53NzTJuTF20JzU=\ngithub.com/paulmach/orb v0.11.1/go.mod h1:5mULz1xQfs3bmQm63QEJA6lNGujuRafwA5S/EnuLaLU=\ngithub.com/paulmach/protoscan v0.2.1/go.mod h1:SpcSwydNLrxUGSDvXvO0P7g7AuhJ7lcKfDlhJCDw2gY=\ngithub.com/pierrec/lz4 v2.0.5+incompatible h1:2xWsjqPFWcplujydGg4WmhC/6fZqK42wMM8aXeqhl0I=\ngithub.com/pierrec/lz4 v2.0.5+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=\ngithub.com/pierrec/lz4/v4 v4.1.21 h1:yOVMLb6qSIDP67pl/5F7RepeKYu/VmTyEXvuMI5d9mQ=\ngithub.com/pierrec/lz4/v4 v4.1.21/go.mod h1:gZWDp/Ze/IJXGXf23ltt2EXimqmTUXEy0GFuRQyBid4=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c h1:ncq/mPwQF4JjgDlrVEn3C11VoGHZN7m8qihwgMEtzYw=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=\ngithub.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=\ngithub.com/segmentio/asm v1.2.0 h1:9BQrFxC+YOHJlTlHGkTrFWf59nbL3XnCoFLTwDCI7ys=\ngithub.com/segmentio/asm v1.2.0/go.mod h1:BqMnlJP91P8d+4ibuonYZw9mfnzI9HfxselHZr5aAcs=\ngithub.com/shirou/gopsutil v2.19.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=\ngithub.com/shirou/gopsutil v3.21.11+incompatible h1:+1+c1VGhc88SSonWP6foOcLhvnKlUeu/erjjvaPEYiI=\ngithub.com/shirou/gopsutil v3.21.11+incompatible/go.mod h1:5b4v6he4MtMOwMlS0TUMTu2PcXUg8+E1lC7eC3UO/RA=\ngithub.com/shirou/gopsutil/v3 v3.23.12 h1:z90NtUkp3bMtmICZKpC4+WaknU1eXtp5vtbQ11DgpE4=\ngithub.com/shirou/gopsutil/v3 v3.23.12/go.mod h1:1FrWgea594Jp7qmjHUUPlJDTPgcsb9mGnXDxavtikzM=\ngithub.com/shirou/w32 v0.0.0-20160930032740-bb4de0191aa4/go.mod h1:qsXQc7+bwAM3Q1u/4XEfrquwF8Lw7D7y5cD8CuHnfIc=\ngithub.com/shoenig/go-m1cpu v0.1.6 h1:nxdKQNcEB6vzgA2E2bvzKIYRuNj7XNJ4S/aRSwKzFtM=\ngithub.com/shoenig/go-m1cpu v0.1.6/go.mod h1:1JJMcUBvfNwpq05QDQVAnx3gUHr9IYF7GNg9SUEw2VQ=\ngithub.com/shoenig/test v0.6.4 h1:kVTaSd7WLz5WZ2IaoM0RSzRsUD+m8wRR+5qvntpn4LU=\ngithub.com/shoenig/test v0.6.4/go.mod h1:byHiCGXqrVaflBLAMq/srcZIHynQPQgeyvkvXnjqq0k=\ngithub.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp81k=\ngithub.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/testcontainers/testcontainers-go v0.33.0 h1:zJS9PfXYT5O0ZFXM2xxXfk4J5UMw/kRiISng037Gxdw=\ngithub.com/testcontainers/testcontainers-go v0.33.0/go.mod h1:W80YpTa8D5C3Yy16icheD01UTDu+LmXIA2Keo+jWtT8=\ngithub.com/tidwall/pretty v1.0.0/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=\ngithub.com/tklauser/go-sysconf v0.3.12 h1:0QaGUFOdQaIVdPgfITYzaTegZvdCjmYO52cSFAEVmqU=\ngithub.com/tklauser/go-sysconf v0.3.12/go.mod h1:Ho14jnntGE1fpdOqQEEaiKRpvIavV0hSfmBq8nJbHYI=\ngithub.com/tklauser/numcpus v0.6.1 h1:ng9scYS7az0Bk4OZLvrNXNSAO2Pxr1XXRAPyjhIx+Fk=\ngithub.com/tklauser/numcpus v0.6.1/go.mod h1:1XfjsgE2zo8GVw7POkMbHENHzVg3GzmoZ9fESEdAacY=\ngithub.com/xdg-go/pbkdf2 v1.0.0/go.mod h1:jrpuAogTd400dnrH08LKmI/xc1MbPOebTwRqcT5RDeI=\ngithub.com/xdg-go/scram v1.1.1/go.mod h1:RaEWvsqvNKKvBPvcKeFjrG2cJqOkHTiyTpzz23ni57g=\ngithub.com/xdg-go/stringprep v1.0.3/go.mod h1:W3f5j4i+9rC0kuIEJL0ky1VpHXQU3ocBgklLGvcBnW8=\ngithub.com/xyproto/randomstring v1.0.5 h1:YtlWPoRdgMu3NZtP45drfy1GKoojuR7hmRcnhZqKjWU=\ngithub.com/xyproto/randomstring v1.0.5/go.mod h1:rgmS5DeNXLivK7YprL0pY+lTuhNQW3iGxZ18UQApw/E=\ngithub.com/youmark/pkcs8 v0.0.0-20181117223130-1be2e3e5546d/go.mod h1:rHwXgn7JulP+udvsHwJoVG1YGAP6VLg4y9I5dyZdqmA=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yusufpapurcu/wmi v1.2.3 h1:E1ctvB7uKFMOJw3fdOW32DwGE9I7t++CRUEMKvFoFiw=\ngithub.com/yusufpapurcu/wmi v1.2.3/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=\ngo.mongodb.org/mongo-driver v1.11.4/go.mod h1:PTSz5yu21bkT/wXpkS7WR5f0ddqw5quethTUn9WM+2g=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.49.0 h1:jq9TW8u3so/bN+JPT166wjOI6/vQPF6Xe7nMNIltagk=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.49.0/go.mod h1:p8pYQP+m5XfbZm9fxtSKAbM6oIllS7s2AfxrChvc7iw=\ngo.opentelemetry.io/otel v1.26.0 h1:LQwgL5s/1W7YiiRwxf03QGnWLb2HW4pLiAhaA5cZXBs=\ngo.opentelemetry.io/otel v1.26.0/go.mod h1:UmLkJHUAidDval2EICqBMbnAd0/m2vmpf/dAM+fvFs4=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.19.0 h1:Mne5On7VWdx7omSrSSZvM4Kw7cS7NQkOOmLcgscI51U=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.19.0/go.mod h1:IPtUMKL4O3tH5y+iXVyAXqpAwMuzC1IrxVS81rummfE=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.19.0 h1:IeMeyr1aBvBiPVYihXIaeIZba6b8E1bYp7lbdxK8CQg=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.19.0/go.mod h1:oVdCUtjq9MK9BlS7TtucsQwUcXcymNiEDjgDD2jMtZU=\ngo.opentelemetry.io/otel/metric v1.26.0 h1:7S39CLuY5Jgg9CrnA9HHiEjGMF/X2VHvoXGgSllRz30=\ngo.opentelemetry.io/otel/metric v1.26.0/go.mod h1:SY+rHOI4cEawI9a7N1A4nIg/nTQXe1ccCNWYOJUrpX4=\ngo.opentelemetry.io/otel/sdk v1.24.0 h1:YMPPDNymmQN3ZgczicBY3B6sf9n62Dlj9pWD3ucgoDw=\ngo.opentelemetry.io/otel/sdk v1.24.0/go.mod h1:KVrIYw6tEubO9E96HQpcmpTKDVn9gdv35HoYiQWGDFg=\ngo.opentelemetry.io/otel/trace v1.26.0 h1:1ieeAUb4y0TE26jUFrCIXKpTuVK7uJGN9/Z/2LP5sQA=\ngo.opentelemetry.io/otel/trace v1.26.0/go.mod h1:4iDxvGDQuUkHve82hJJ8UqrwswHYsZuWCBllGV2U2y0=\ngo.opentelemetry.io/proto/otlp v1.0.0 h1:T0TX0tmXU8a3CbNXzEKGeU5mIVOdf0oykP+u2lIVU/I=\ngo.opentelemetry.io/proto/otlp v1.0.0/go.mod h1:Sy6pihPLfYHkr3NkUbEhGHFhINUSI/v80hjKIs5JXpM=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20220622213112-05595931fe9d/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.32.0 h1:euUpcYgM8WcP71gNpTqQCn6rC2t6ULUPiOzfWaXVVfc=\ngolang.org/x/crypto v0.32.0/go.mod h1:ZnnJkOaASj8g0AjIduWNlq2NRxL0PlBrbKVyZ6V/Ugc=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.34.0 h1:Mb7Mrk043xzHgnRM88suvJFwzVrRfHEHJEl5/71CKw0=\ngolang.org/x/net v0.34.0/go.mod h1:di0qlW3YNM5oh6GqDGQr92MyTozJPmybPK4Ev/Gm31k=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191220220014-0732a990476f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.11.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.28.0 h1:/Ts8HFuMR2E6IP/jlo7QVLZHggjKQbhu/7H0LJFr3Gg=\ngolang.org/x/term v0.28.0/go.mod h1:Sw/lC2IAUZ92udQNf3WodGtn4k/XoLyZoh8v/8uiwek=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.0.0-20220210224613-90d013bbcef8 h1:vVKdlvoWBphwdxWKrFZEuM0kGgGLxUOYcY4U/2Vjg44=\ngolang.org/x/time v0.0.0-20220210224613-90d013bbcef8/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240318140521-94a12d6c2237 h1:RFiFrvy37/mpSpdySBDrUdipW/dHwsRwh3J3+A9VgT4=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240318140521-94a12d6c2237/go.mod h1:Z5Iiy3jtmioajWHDGFk7CeugTyHtPvMHA4UTmUkyalE=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240318140521-94a12d6c2237 h1:NnYq6UN9ReLM9/Y01KWNOWyI5xQ9kbIms5GGJVwS/Yc=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240318140521-94a12d6c2237/go.mod h1:WtryC6hu0hhx87FDGxWCDptyssuo68sk10vYjF+T9fY=\ngoogle.golang.org/grpc v1.64.1 h1:LKtvyfbX3UGVPFcGqJ9ItpVWW6oN/2XqTxfAnwRRXiA=\ngoogle.golang.org/grpc v1.64.1/go.mod h1:hiQF4LFZelK2WKaP6W0L92zGHtiQdZxk8CrSdvyjeP0=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.5.1 h1:EENdUnS3pdur5nybKYIh2Vfgc8IUNBjxDPSjtiJcOzU=\ngotest.tools/v3 v3.5.1/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=\n"
        },
        {
          "name": "go.test.sh",
          "type": "blob",
          "size": 0.2822265625,
          "content": "#!/usr/bin/env bash\n\nset -e\necho \"\" > coverage.txt\n\nfor d in $(go list ./... | grep -v vendor | grep -v examples); do\n    go test -race -coverprofile=profile.out -covermode=atomic $d\n    if [ -f profile.out ]; then\n        cat profile.out >> coverage.txt\n        rm profile.out\n    fi\ndone"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "query_parameters.go",
          "type": "blob",
          "size": 1.986328125,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/driver\"\n\t\"github.com/pkg/errors\"\n\t\"regexp\"\n\t\"time\"\n)\n\nvar (\n\tErrExpectedStringValueInNamedValueForQueryParameter = errors.New(\"expected string value in NamedValue for query parameter\")\n\n\thasQueryParamsRe = regexp.MustCompile(\"{.+:.+}\")\n)\n\nfunc bindQueryOrAppendParameters(paramsProtocolSupport bool, options *QueryOptions, query string, timezone *time.Location, args ...any) (string, error) {\n\t// prefer native query parameters over legacy bind if query parameters provided explicit\n\tif len(options.parameters) > 0 {\n\t\treturn query, nil\n\t}\n\n\t// validate if query contains a {<name>:<data type>} syntax, so it's intentional use of query parameters\n\t// parameter values will be loaded from `args ...any` for compatibility\n\tif paramsProtocolSupport &&\n\t\tlen(args) > 0 &&\n\t\thasQueryParamsRe.MatchString(query) {\n\t\toptions.parameters = make(Parameters, len(args))\n\t\tfor _, a := range args {\n\t\t\tif p, ok := a.(driver.NamedValue); ok {\n\t\t\t\tif str, ok := p.Value.(string); ok {\n\t\t\t\t\toptions.parameters[p.Name] = str\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn \"\", ErrExpectedStringValueInNamedValueForQueryParameter\n\t\t}\n\n\t\treturn query, nil\n\t}\n\n\treturn bind(timezone, query, args...)\n}\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scan.go",
          "type": "blob",
          "size": 2.4130859375,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"reflect\"\n\n\t\"github.com/ClickHouse/clickhouse-go/v2/lib/proto\"\n)\n\nfunc (ch *clickhouse) Select(ctx context.Context, dest any, query string, args ...any) error {\n\tvalue := reflect.ValueOf(dest)\n\tif value.Kind() != reflect.Ptr {\n\t\treturn &OpError{\n\t\t\tOp:  \"Select\",\n\t\t\tErr: errors.New(\"must pass a pointer, not a value, to Select destination\"),\n\t\t}\n\t}\n\tif value.IsNil() {\n\t\treturn &OpError{\n\t\t\tOp:  \"Select\",\n\t\t\tErr: errors.New(\"nil pointer passed to Select destination\"),\n\t\t}\n\t}\n\tdirect := reflect.Indirect(value)\n\tif direct.Kind() != reflect.Slice {\n\t\treturn fmt.Errorf(\"must pass a slice to Select destination\")\n\t}\n\tif direct.Len() != 0 {\n\t\t// dest should point to empty slice\n\t\t// to make select result correct\n\t\tdirect.Set(reflect.MakeSlice(direct.Type(), 0, direct.Cap()))\n\t}\n\tvar (\n\t\tbase      = direct.Type().Elem()\n\t\trows, err = ch.Query(ctx, query, args...)\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\tfor rows.Next() {\n\t\telem := reflect.New(base)\n\t\tif err := rows.ScanStruct(elem.Interface()); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdirect.Set(reflect.Append(direct, elem.Elem()))\n\t}\n\tif err := rows.Close(); err != nil {\n\t\treturn err\n\t}\n\treturn rows.Err()\n}\n\nfunc scan(block *proto.Block, row int, dest ...any) error {\n\tcolumns := block.Columns\n\tif len(columns) != len(dest) {\n\t\treturn &OpError{\n\t\t\tOp:  \"Scan\",\n\t\t\tErr: fmt.Errorf(\"expected %d destination arguments in Scan, not %d\", len(columns), len(dest)),\n\t\t}\n\t}\n\tfor i, d := range dest {\n\t\tif err := columns[i].ScanRow(d, row-1); err != nil {\n\t\t\treturn &OpError{\n\t\t\t\tErr:        err,\n\t\t\t\tColumnName: block.ColumnsNames()[i],\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "struct_map.go",
          "type": "blob",
          "size": 2.5888671875,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"sync\"\n)\n\ntype structMap struct {\n\tcache sync.Map\n}\n\nfunc (m *structMap) Map(op string, columns []string, s any, ptr bool) ([]any, error) {\n\tv := reflect.ValueOf(s)\n\tif v.Kind() != reflect.Ptr {\n\t\treturn nil, &OpError{\n\t\t\tOp:  op,\n\t\t\tErr: fmt.Errorf(\"must pass a pointer, not a value, to %s destination\", op),\n\t\t}\n\t}\n\tif v.IsNil() {\n\t\treturn nil, &OpError{\n\t\t\tOp:  op,\n\t\t\tErr: fmt.Errorf(\"nil pointer passed to %s destination\", op),\n\t\t}\n\t}\n\tt := reflect.TypeOf(s)\n\tif v = reflect.Indirect(v); t.Kind() == reflect.Ptr {\n\t\tt = t.Elem()\n\t}\n\tif v.Kind() != reflect.Struct {\n\t\treturn nil, &OpError{\n\t\t\tOp:  op,\n\t\t\tErr: fmt.Errorf(\"%s expects a struct dest\", op),\n\t\t}\n\t}\n\n\tvar (\n\t\tindex  map[string][]int\n\t\tvalues = make([]any, 0, len(columns))\n\t)\n\n\tswitch idx, found := m.cache.Load(t); {\n\tcase found:\n\t\tindex = idx.(map[string][]int)\n\tdefault:\n\t\tindex = structIdx(t)\n\t\tm.cache.Store(t, index)\n\t}\n\tfor _, name := range columns {\n\t\tidx, found := index[name]\n\t\tif !found {\n\t\t\treturn nil, &OpError{\n\t\t\t\tOp:  op,\n\t\t\t\tErr: fmt.Errorf(\"missing destination name %q in %T\", name, s),\n\t\t\t}\n\t\t}\n\t\tswitch field := v.FieldByIndex(idx); {\n\t\tcase ptr:\n\t\t\tvalues = append(values, field.Addr().Interface())\n\t\tdefault:\n\t\t\tvalues = append(values, field.Interface())\n\t\t}\n\t}\n\treturn values, nil\n}\n\nfunc structIdx(t reflect.Type) map[string][]int {\n\tfields := make(map[string][]int)\n\tfor i := 0; i < t.NumField(); i++ {\n\t\tvar (\n\t\t\tf    = t.Field(i)\n\t\t\tname = f.Name\n\t\t)\n\t\tif tn := f.Tag.Get(\"ch\"); len(tn) != 0 {\n\t\t\tname = tn\n\t\t}\n\t\tswitch {\n\t\tcase name == \"-\", len(f.PkgPath) != 0 && !f.Anonymous:\n\t\t\tcontinue\n\t\t}\n\t\tswitch {\n\t\tcase f.Anonymous:\n\t\t\tif f.Type.Kind() != reflect.Ptr {\n\t\t\t\tfor k, idx := range structIdx(f.Type) {\n\t\t\t\t\tfields[k] = append(f.Index, idx...)\n\t\t\t\t}\n\t\t\t}\n\t\tdefault:\n\t\t\tfields[name] = f.Index\n\t\t}\n\t}\n\treturn fields\n}\n"
        },
        {
          "name": "struct_map_test.go",
          "type": "blob",
          "size": 2.20703125,
          "content": "// Licensed to ClickHouse, Inc. under one or more contributor\n// license agreements. See the NOTICE file distributed with\n// this work for additional information regarding copyright\n// ownership. ClickHouse, Inc. licenses this file to you under\n// the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\npackage clickhouse\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestStructIdx(t *testing.T) {\n\ttype Embed2 struct {\n\t\tCol6 uint8\n\t}\n\ttype Embed struct {\n\t\tCol4 string `ch:\"named\"`\n\t\tEmbed2\n\t}\n\ttype Example struct {\n\t\tCol1   string\n\t\tCol2   time.Time\n\t\tColPtr *string\n\t\tEmbed\n\t\t*Embed2\n\t}\n\tindex := structIdx(reflect.TypeOf(Example{\n\t\tCol1: \"X\",\n\t}))\n\tassert.Equal(t, map[string][]int{\n\t\t\"Col1\":   {0},\n\t\t\"Col2\":   {1},\n\t\t\"ColPtr\": {2},\n\t\t\"named\":  {3, 0},\n\t\t\"Col6\":   {3, 1, 0},\n\t}, index)\n}\n\nfunc TestMapper(t *testing.T) {\n\ttype Embed2 struct {\n\t\tCol6 uint8\n\t}\n\ttype Embed struct {\n\t\tCol4 string `ch:\"named\"`\n\t\tEmbed2\n\t}\n\ttype Example struct {\n\t\tCol1   string\n\t\tCol2   time.Time\n\t\tColPtr *string\n\t\tEmbed\n\t\t*Embed2\n\t}\n\tmapper := structMap{}\n\tvalues, err := mapper.Map(\"\", []string{\"Col1\", \"named\"}, &Example{\n\t\tCol1: \"X\",\n\t\tEmbed: Embed{\n\t\t\tCol4: \"Named value\",\n\t\t},\n\t}, false)\n\n\tt.Log(values, err)\n}\n\nfunc BenchmarkStructMap(b *testing.B) {\n\ttype Embed2 struct {\n\t\tCol6 uint8\n\t}\n\ttype Embed struct {\n\t\tCol4 string `ch:\"named\"`\n\t\tEmbed2\n\t}\n\ttype Example struct {\n\t\tCol1   string\n\t\tCol2   time.Time\n\t\tColPtr *string\n\t\tEmbed\n\t\t*Embed2\n\t}\n\tvar (\n\t\tmapper = structMap{}\n\t\tdata   = &Example{\n\t\t\tCol1: \"X\",\n\t\t\tEmbed: Embed{\n\t\t\t\tCol4: \"Named value\",\n\t\t\t},\n\t\t}\n\t)\n\tb.ResetTimer()\n\tb.ReportAllocs()\n\tfor i := 0; i < b.N; i++ {\n\t\tif _, err := mapper.Map(\"\", []string{\"Col1\", \"named\"}, data, false); err != nil {\n\t\t\tb.Fatal(err)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "v1_v2_CHANGES.md",
          "type": "blob",
          "size": 0.935546875,
          "content": "# Breaking Changes v1 to v2\n\nKnown breaking changes for v1 to v2 are collated below. These are subject to change, if a fix is possible, and reflect the latest release only.\n\n- v1 allowed precision loss when inserting types. For example, a sql.NullInt32 could be inserted to a UInt8 column and float64 and Decimals were interchangeable. Whilst v2 aims to be flexible, it will not transparently loose precision. Users must accept and explicitly perform this work outside the client.\n- strings cannot be inserted in Date or DateTime columns in v2. [#574](https://github.com/ClickHouse/clickhouse-go/issues/574)\n- Arrays must be strongly typed in v2 e.g. a `[]any` containing strings cannot be inserted into a string column. This conversion must be down outside the client, since it incurs a cost - the array must be iterated and converted. The client will not conceal this overhead in v2.\n- v1 used a connection strategy of random. v2 uses in_order by default.\n"
        }
      ]
    }
  ]
}