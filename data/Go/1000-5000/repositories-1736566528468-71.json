{
  "metadata": {
    "timestamp": 1736566528468,
    "page": 71,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "arp242/goatcounter",
      "stars": 4667,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2197265625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_style = tab\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{yaml,yml}]\nindent_style = space\nindent_size = 2\n\n[*.{css,markdown,md}]\nindent_style = space\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.201171875,
          "content": "# Mark as generated so it won't show up in diffs etc.\n/go.sum       linguist-generated=true\n/tpl/api.html linguist-generated=true\n/tpl/api.json linguist-generated=true\n/refspam.go   linguist-generated=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.341796875,
          "content": "# \"go build\" binary.\n/goatcounter\n/goatcounter.*\n/goatcounter-*\n\n# UPX creates temporary files.\n*.upx\n\n# dist directory from gogo-release\n/dist\n\n# SQLite3 database; may also store journal hence last *.\n*.sqlite3*\n\n# Never store certificates.\n*.pem\n\n# Default acme-secrets.\n/acme-secrets\n\n# Coverage reports\n/coverage\n/coverage.*\n\n# Dev log\n/.dev.log\n"
        },
        {
          "name": ".gogo-release",
          "type": "blob",
          "size": 0.28515625,
          "content": "matrix=\"\nlinux amd64\nlinux arm   CC=armv7l-linux-musleabihf-gcc\nlinux arm64 CC=aarch64-linux-musl-gcc\n\"\n\nbuild_flags=\"-trimpath -ldflags='-extldflags=-static -w -s -X zgo.at/goatcounter/v2.Version=$tag' -tags osusergo,netgo,sqlite_omit_load_extension ./cmd/goatcounter\"\n\nexport CGO_ENABLED=1\n"
        },
        {
          "name": ".ignore",
          "type": "blob",
          "size": 0.0439453125,
          "content": "/public/jquery.js\n/public/*.min.*\n/pack\n/msg\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 26.2109375,
          "content": "ChangeLog for GoatCounter\n=========================\nThis list is not comprehensive, and only lists new features and major changes,\nbut not every minor bugfix. The goatcounter.com service generally runs the\nlatest master.\n\n2023-12-10 v2.5.0\n-----------------\nThis release requires Go 1.21.\n\nFeatures:\n\n- Quite a few tables are rewritten to a more efficient format. For small to\n  medium instances this will take a few minutes at the most, but if you have\n  very large instances this may take a few hours. It also requires enough free\n  disk space to rewrite the `hits` table.\n\n  If you want to run steps manually then you can view the migration with:\n\n      % goatcounter db migrate -show 2023-05-16-1-hits\n\n  Or if you use PostgreSQL:\n\n      % goatcounter db migrate -show -db postgresql+dbname=goatcounter 2023-05-16-1-hits\n\n- The `User-Agent` header is no longer stored; only the browser and system\n  parsed out of there. It's pretty reliable, and especially mobile browser\n  User-Agents are ridiculously unique. It was always stored only \"in case the\n  detection got it horribly wrong\", but this has never been needed.\n\n- Add `proxy` option in `serve -tls` flag,  to give a hint that a secure\n  connection will be used, so we know what value to use for the cookie\n  secure/samesite flags.\n\n- Add *experimental* \"dark mode\"; this needs to be enabled explicitly in the\n  user settings. I need help to make this decent:\n  https://github.com/arp242/goatcounter/issues/586#issuecomment-1287995673\n\n- Show difference of pageviews compared to previous period on the dashboard.\n\n- Make setup of a new installation a bit easier: instead of telling people to\n  use the CLI, display a form when the database is 100% empty.\n\nFixes:\n\n- Collecting stats was broken when \"sessions\" was disabled in the site settings.\n\n- Use navigator.sendBeacon by default in count.js. This will allow using click\n  events on things like PDF files and external URLs:\n\n      <a href=\"file.pdf\" data-goatcounter-event=\"file.pdf\">\n      <a href=\"http://example.com\" data-goatcounter-event=\"ext-example.com\">\n\n- Sometimes the order of pages was wrong when using PostgreSQL.\n\n- Few smaller bugfixes.\n\n2022-11-15 v2.4.1\n-----------------\n- Fix regression that caused the charts for SQLite to be off.\n\n2022-11-08 v2.4.0\n-----------------\n- Add a more fully-featured API that can also retrieve the dashboard statistics.\n  See https://www.goatcounter.com/help/api for documentation.\n\n  This is still as \"v0\" because some details may still change.\n\n- Default API ratelimit is now 4 requests/second, rather than 4 requests/10\n  seconds. You can use the `-ratelimit` flag to configure this.\n\n- Can now also merge paths instead of just deleting them (the \"Settings → Delete\n  pageviews\" tab was changed to \"Manage pageviews\").\n\n- Add `goatcounter dashboard`, which uses the new API to display the dashboard\n  in the terminal (only a basic non-interactive overview for now).\n\n- Add a \"Show fewer numbers\" user setting; this is intended to still give a\n  reasonably useful overview of what happens on your site but prevent an\n  “obsession” over the exact number of visitors and stats.\n\n- No longer store or display \"pageviews\": always store and display \"visitors\"\n  instead.\n\n  The visitor count is the only thing that's interesting in pretty much all\n  cases; the \"raw\" pageviews are still stored for some future purposes (such as\n  \"time on page\"), but are no longer stored in most other contexts.\n\n- Add infrastructure for \"dark mode\".\n\n  This is not yet enabled by default because all \"dark mode\" themes look \"bad\"\n  on my eyes, and I'm not really sure what works well for people who do like it.\n\n  So some help is needed here. See:\n  https://github.com/arp242/goatcounter/issues/586#issuecomment-1287995673\n\n2022-10-17 v2.3.0\n-----------------\n- Expand campaigns: the `utm_campaign` or `campaign` parameter now is tracked\n  separately, and add a dashboard panel for campaigns. See:\n  https://www.goatcounter.com/help/campaigns\n\n  Old data isn't backfilled as this information wasn't stored.\n\n- There are now binaries for Windows, macOS, {Free,Open}BSD, and illumos.\n\n- WebSockets are now disabled by default, as it turned out a lot of people had\n  trouble proxying them. You can enable it with `goatcounter serve -websocket`.\n\n- Add `-dbconn` flag for `serve` to allow setting the maximum number of\n  connections. The default is also lowered from 25 to 16 for PostgreSQL.\n\n- Add `-store-every` flag to control how often to persist pageviews to the\n  database.\n\n- Add \"Sites that can embed GoatCounter\" setting to allow embedding GoatCounter\n  in a frame.\n\n- Add \"Hide UI for public view\" setting to allow hiding the UI chrome and\n  display only the charts.\n\n- Quite a few bugfixes and minor additions.\n\n2022-02-16 v2.2.0\n-----------------\n- The database connection string changed; you now need to use `-db\n  engine+connect string` rather than `engine://connect string`:\n\n      -db sqlite+[sqlite connection string]\n      -db postgresql+[sqlite connection string]\n\n  Various aliases such a `sqlite3`, `postgres` also work.\n\n  The previous \"url-like\" strings conflicted with PostgreSQL's URL connection\n  strings, causing confusion.\n\n  `://`-type strings without a `+` will be rewritten, but will issue a warning.\n\n- GoatCounter can now collect language statistics as well, from the\n  `Accept-Language` HTTP header. This is disabled by default, but can be enabled\n  in the site settings.\n\n- Charts are now drawn as a line chart by default; you can choose to use bar\n  charts in the widget settings menu by selecting the \"chart style\" for the\n  \"Paths overview\" and/or \"Total site pageviews\"\n\n  Both charts are also completely reïmplemented by drawing on a canvas instead\n  of aligning divs in a flexbox because rendering thousands of divs in a flexbox\n  is actually fairly slow.\n\n- The \"View as text table\" button in the header moved to the \"Chart style\"\n  section mentioned above; this checkbox was added before the configurable\n  dashboard feature, and especially now that you can set a chart style it makes\n  more sense to set it there.\n\n- Data is now sent over a WebSocket, rather than rendering everything. The\n  upshot of this is that the perceived performance is better: it only needs to\n  calculate the data that's initially visible, and it's okay to wait a bit for\n  the data that's not. The downside is that you need JavaScript, but that was\n  already the case to render the charts.\n\n- There is a \"server management\" tab in the settings which allows viewing and\n  editing some server internals. This page is only available to users with the\n  (new) \"server management\" access.\n\n  All sites with just one user have this user's permissions automatically\n  \"upgraded\"; sites with more than one user since I don't know which user should\n  have which permissions.\n\n  To prevent updating users, you can use (*before* running migrations):\n\n      % goatcounter db query \"insert into version values ('2021-12-13-2-superuser')\"\n\n  To update an existing user, you can use:\n\n      % goatcounter db update users -access superuser -find=martin@arp242.net\n\n- Add `-ratelimit` flag to configure the built-in ratelimits (the default values\n  are unchanged). See `goatcounter help serve` for details.\n\n- New translations: Italian, Spanish (Chilean), Turkish.\n\n2021-12-01 v2.1.0\n-----------------\nAside from a number of small fixes and improvements, major changes include:\n\n- Support for translations; see https://www.goatcounter.com/translating for\n  details how to translate GoatCounter.\n\n- The import path is now updated to use \"zgo.at/goatcounter/v2\" so that e.g. \"go\n  install zgo.at/goatcounter/v2\" works. This should have been done with the 2.0\n  release, but I didn't realize how this all worked.\n\n- The visitor counter now supports the `start` and `end` parameters and the JSON\n  endpoint returns `count` as well, to get the total pageview count.\n\n- You can now make the dashboard viewable to anyone who has a secret token (e.g.\n  https://mystats.example.com?access-token=5g4..)\n\nThis release requires Go 1.17 to build.\n\n2021-04-13 v2.0.4\n-----------------\n- Deal with duplicate entries in the `user_agents` table in the migration\n  instead of erroring out; mostly fixes a situation that could happen if you ran\n  the broken migrations in 2.0.0 or 2.0.1.\n\n2021-04-02 v2.0.3\n-----------------\n- Fix if you had already run the broken migrations in 2.0.0 or 2.0.1.\n\n- Handle failures in `goatcounter import` a bit more gracefully.\n\n\n2021-04-02 v2.0.2\n-----------------\n- Fix migration order.\n\n- Don't display the expected \"Memstore.Init: json: cannot unmarshal number /\n  into Go struct field storedSession.paths of type int64\" error log on startup;\n  this got displayed once, but was a bit confusing.\n\n- Display a message on startup after the first update to direct people towards\n  the 2.0 release notes and \"goatcounter reindex\".\n\n\n2021-03-29 v2.0.1\n-----------------\n- Fix migrations 🤦 They worked when they were written, but a bunch of things\n  changed in GoatCounter and some older ones didn't run any more.\n\n- Add `-test` flag to `goatcounter db migrate` to rollback a migration, so it's\n  easier to test if migrations will run correctly without actually changing the\n  database.\n\n\n2021-03-29 v2.0.0\n-----------------\nThe version is bumped to 2.0 because this contains a number of incompatible\nchanges: several CLI commands got changed, and it includes some large database\nmigrations – running them is a bit more complex than the standard migrations.\n\nAn overview of **incompatible** changes:\n\n- There are some rather large changes to the database layout for better\n  efficiency; this means:\n\n  - Somewhat faster queries.\n  - Greatly reduced disk space requirements for the database.\n  - The Browsers, systems, size, and location stats are filtered if you enter\n    something in \"filter paths\". Previously this always displayed the site\n    totals.\n  - \"Purge path\" now works as expected for all stats.\n  - Easier to add new statistics in the future.\n\n  To update:\n\n  1. You **must** first update to 1.4.2 and run all migrations from that.\n     **Updating from older versions directly to 2.0.0 will not work!**\n\n  2. Run the migrations with `goatcounter serve -automigrate` or `goatcounter\n     migrate`.\n\n  3. You probably want to manually run `VACUUM` (or `VACUUM FULL` for\n     PostgreSQL) after the migration to free up unused rows. This isn't strictly\n     required, but frees up disk space, and removes some of the autovacuum\n     pressure that will run in the background.\n\n  4. Run `goatcounter reindex`.\n\n  All of this may take a while if you've got a lot of data. For about 500,000\n  pageviews it takes about 3 minutes on SQLite, but if you've got millions of\n  pageviews it may take an hour or more.\n\n  If you want to keep pageviews while this is running you can:\n\n  1. Write it to a logfile from a proxy or temporary HTTP server and run\n     `goatcounter import` on this after the migrations are done.\n\n  2. Use `goatcounter buffer`.\n\n- `goatcounter migrate` is now `goatcounter db migrate`. It also behaves a bit\n  different:\n\n  - `goatcounter db migrate pending` lists only pending migrations, and will use\n    exit code 1 if there are any pending migrations.\n  - `goatcounter db migrate list` lists all migrations, always exits with 0.\n\n- If you use PostgreSQL you need PostgreSQL 12 or newer; this was already the\n  case before and you could run in to some edge cases where things didn't work,\n  but this is enforced now.\n\n- The `none` value got removed from the `-tls` flag; use `tls=http` to not serve\n  TLS. This was confusingly named as you can do `-tls=none,acme` to still\n  generate ACME certificates, but `none` implies that nothing is done.\n\n- `goatcounter create` is now `goatcounter db site create`, and some flags got\n  changed:\n\n  - `-domain` is now `-vhost`.\n  - `-parent` is now `-link`.\n  - `-email` is now `-user.email`.\n  - `-password` is now `-user.password`.\n\n- The `-port` flag for `goatcounter serve` is renamed to `-public-port`. This\n  should clarify that this isn't the *listen* port, but just the port\n  GoatCounter is publicly accessible on.\n\n- The `-site` flag got removed from `goatcounter import`; you can now only use\n  `-url` to set a GoatCounter site to import to. The automagic API key creation\n  was more confusing than anything else.\n\n  You can use `goatcounter db create apitoken` to create an API key from the CLI.\n\n- If you build from source, the build flag to set the version changed from:\n\n      -ldflags=\"-X main.version=...\"\n\n  to:\n\n      -ldflags=\"-X zgo.at/goatcounter.Version=...\"\n\n- The CSV export format was increased to `2`; it now includes the parsed browser\n  and system values in addition to the User-Agent header. Version 2.0 will not\n  be able to import the older exports from version `1`.\n\n\n**Other changes**:\n\n- You can read pageviews from logfiles with the `goatcounter import` command;\n  you can also send pageviews to goatcounter.com with this (you don’t need to\n  self-host it). See `goatcounter help import` and the site code documentation\n  for details.\n\n- You can now create multiple users; before there was always a single one. You\n  can add users in *Settings → Users*.\n\n  As a consequence, \"Site settings\" and \"User preferences\" are now split in to\n  two screens. The Settings button in the top-right now displays only site\n  settings, and clicking on your email address in the top right displays user\n  preferences, which every user can configure to their liking.\n\n- You can now configure what's displayed on the dashboard, in what order, and\n  configure some aspects of various \"widgets\". You can set it in *User\n  preferences → Dashboard*. Some settings from the main settings page have moved\n  there.\n\n- You can save a default view for the dashboard. Instead of always loading the\n  last week by default, you can now configure it to load the last month, or view\n  by day, or anything you want really.\n\n- You can choose which data to collect; you can disable collecting any\n  User-Agent, location, Referrer information.\n\n- Ability to record state/province/district in addition to country, so it\n  records \"US-TX\" or \"NL-NB\" instead of \"United States\" or \"Netherlands\".\n\n  This option can be disabled separately from recording the country (enabled by\n  default) and you can set which countries to record it for (defaults to `US,\n  RU, CH`).\n\n  This requires specifying the path to a GeoIP City database, which isn't\n  included since it's ~30M.\n\n- There are now stable `count.v*.js` scripts that can use subresource integrity.\n  See the integration code for a list and hashes.\n\n- You can use `data-goatcounter-settings` on the `<script>` tag to load the\n  settings (requires `count.v2.js` or newer).\n\n- New `goatcounter buffer` command; this allows buffering of pageviews in case\n  the backend is down, running migrations, etc. See `goatcounter help buffer`\n  for more information.\n\n- The database for PostgreSQL is now created automatically; you no longer need\n  to do this manually.\n\n- You can copy settings from a site to other sites in *Settings → Sites*.\n\n- Add `goatcounter db` command; you can now edit and delete sites, users, and\n  API keys from the CLI. The `create` and `migrate` commands are now merged in\n  to this as subcommands.\n\n- Add a `gcbench` utility for inserting random pageviews in a database; for\n  testing and comparing performance. This might be useful for end-users too in\n  some cases, for example to see how much performance difference SQLite and\n  PostgreSQL will give you, or to test if frobbing with server settings makes a\n  difference:\n\n      $ go run ./cmd/gcbench -db sqlite://db/gcbench.sqlite3 -ndays=90 -npaths=100 -nhits=1_000_000\n      $ go run ./cmd/gcbench -db postgresql://dbname=gcbench -ndays=90 -npaths=100 -nhits=1_000_000\n\n  Right now it doesn't try super-hard to simulate read-world usage patterns: the\n  distribution is always uniform, but it still gives a reasonably accurate\n  indication for comparison purposes.\n\n- Many other minor changes and improvements.\n\n- For changes since RC1 see:\n  https://github.com/arp242/goatcounter/compare/v2.0.0-rc1...v2.0.0\n\n\n2020-11-10, v1.4.2\n------------------\n\n- Add a \"visitor counter\" image you can add to your website to display the\n  number of visitors, similar to old-style counters back in the ’90s.\n\n- Other than this, it's mostly contains a few minor bugfixes and the like. You\n  can see a list of changes in the git log:\n  https://github.com/arp242/goatcounter/compare/v1.4.1...v1.4.2\n\n\n2020-09-04 v1.4.1\n-----------------\n\nA few small updates, fixes, and performance enhancements. Nothing major.\n\nYou can see a list of changes in the git log:\nhttps://github.com/arp242/goatcounter/compare/v1.4.0...v1.4.1\n\n\n2020-08-24 v1.4.0\n-----------------\n\n- **Change defaults for `-listen`**.\n\n  The default for the `-listen` flag changed from `localhost:8081` to `:443`,\n  which is probably a better and less confusing default for most people. There\n  is also some more detailed docs available in `goatcounter help listen`.\n\n- Set Cache-Control header for static files.\n\n  The `Cache-Control` header is now set for static files. Since the \"cache\n  busting\" happens based on the goatcounter version it's now recommended to set\n  this if you're compiling GoatCounter yourself. See the updated README for\n  instructions.\n\n- Add multi-factor auth.\n\n  TOTP-based multi-factor auth is now supported.\n\n- Better export, export API, add import feature.\n\n  You can now import the CSV exports, useful for migrating from self-hosted to\n  goatcounter.com or vice versa, or for migrating from other systems. There is a\n  web interface and a `goatcounter import` command.\n\n  The export now supports a \"pagination cursor\", so you can export only rows you\n  didn't previously export. This is especially useful with the new export API.\n  which should make it easy to sync GoatCounter data with another external\n  platform.\n\n  See http://goatcounter.com/api for details on the export API.\n\n- API for sending pageviews.\n\n  Doing that with the regular `/count` is actually quite painful, as you quickly\n  run in to ratelimits, need to set specific headers, etc. Adding an API\n  endpoint for that makes things much easier.\n\n- API for creating and editing additional sites.\n\n- Some redesigns.\n\n  The \"Totals\" is now placed below the Pages; I think it makes more sense there.\n  The Y-axis for the totals is now also independent. There's also been a quite a\n  few restylings.\n\n- Add \"text view\" mode.\n\n  View your data as a simple table without too much graphics; only the main\n  \"Pages\" overview is implemented for now.\n\n- Make it easier to skip your own views.\n\n  Previously this required adding custom code, but now loading any page with\n  `#toggle-goatcounter` added will enable/disable the GoatCounter tracking for\n  that browser.\n\n- Can now manage \"additional sites\" from self-hosted GoatCounter.\n\n  This wasn't possible before for no other reason than laziness on my part 🙃\n\n- public/count.js is now ISC licensed.\n\n  Previously the EUPL applied, which is fairly restrictive and may prevent\n  people from including/self-hosting the count.js script.\n\n- Add `goatcounter db` command\n\n  This is mostly useful for writing deploy scripts: `goatcounter db\n  schema-sqlite` prints the SQLite schema, `schema-pgsql` prints the PostgreSQL\n  schema, and `goatcounter db test` tests if the database exists.\n\n- Session hashes are no longer persisted to the database\n\n  This is kind of an internal change, but session hashes are now stored in\n  memory only and never recorded to the database. There's no real reason to\n  persistently store this information, and this is a (small) privacy/GDPR\n  compliance improvement.\n\n\n2020-06-01 v1.3.0\n-----------------\n\nNote: this release contains quite a few database migrations; they make take a\nminute to run (depending on your table size), and you may want to run a `VACUUM`\nafterwards.\n\n- Remove email auth, replace `-auth` with `-email-from`.\n\n  As mentioned in the 1.2 release the email authentication is now removed. You\n  can still reset the password for old accounts.\n\n  Since the email auth no longer exists the `-auth` parameter no longer makes\n  sense. It's now replaced with `-email-from`, which can be set to just an email\n  address.\n\n  **Action required**: if you set the email address with `-auth` you'll have to\n  change it to `-email-from`.\n\n- Add OS stats, improve accuracy of browser stats.\n\n  GoatCounter now tracks the OS/platform in addition to just the browser, and\n  the accuracy of the browser stats should be improved.\n\n  **Action required**: you'll need to populate the `system_stats` table:\n\n      $ goatcounter reindex -table system_stats\n\n  If you want to process all browser stats with the new logic too, then use this\n  instead:\n\n      $ goatcounter reindex -table system_stats,browser_stats\n\n- Improve performance.\n\n  Increase performance by quite a bit on large sites and time ranges.\n\n- Remove the per-path scaling.\n\n  Previously GoatCounter would scale the Y-axis different for every path in the\n  dashboard, but this was more confusing than helpful. It's now always scaled to\n  the maximum of all paths in the selected date range and filter, with a field\n  to scale it lower on-demand if desired.\n\n- Add totals overview.\n\n  Add chart with totals for the selected date range and filter.\n\n- Add `goatcounter.url()`, `goatcounter.filter()`.\n\n  Adds two new methods to the `count.js` script so it's easier to use write own\n  implementation. In addition the script will now issue a `console.warn()` if a\n  request isn't being counted for some reason.\n\n\n2020-05-18 v1.2.0\n-----------------\n\nThere are a number of changes in 1.2, and a few which require a bit of action\nwhen updating. Also see: https://www.arp242.net/goatcounter-1.2.html\n\n- Password authentication.\n\n  The email-based authentication has been deprecated in favour of password\n  authentication.\n\n  **Action required** Use the interface to set a password (you will get a\n  notification about this). Email authentication still works, but will be\n  removed in the next release, after which updating the password will be tricky.\n\n- Unique visit tracking.\n\n  GoatCounter now tracks unique visits (without using cookies).\n\n  Technical documentation about the implementation is in\n  [doc/sessions.md](doc/sessions.md).\n\n  There are two ways to display the older stats:\n\n  1. Do nothing; meaning that \"visits\" will be 0 for previous date ranges.\n\n  2. Assign a new 'session' to every hit, so that unique visits will be the same\n     as the number of pageviews.\n\n  Doing option 2 is a potentially expensive database operation and not everyone\n  may care so it's not done automatically; instructions for doing this are:\n\n  - SQLite (do *not* do this on a running system; as far as I can tell there's\n    no good way to get the next sequence ID while incrementing it):\n\n        delete from sessions;\n        update hits set session=id, first_visit=1;\n        update sqlite_sequence set seq = (select max(session) from hits) where name='sessions';\n\n  - PostgreSQL:\n\n        update hits set session=nextval('sessions_id_seq'), first_visit=1;\n\n  And then run `goatcounter reindex`.\n\n- Improve bot detection.\n\n  The bot detection is now improved; this will be applied to older pageviews in\n  the database with a migration, but the cached statistics aren't updated\n  automatically (as it can take a while for larger sites). Use the `reindex`\n  command to fully update older pageviews (this is entirely optional).\n\n- Track events.\n\n  There is now better support to track events; see the updated documentation on\n  the Site Code page for details.\n\n- Better support for campaigns.\n\n  There is now a \"campaign parameters\" setting; if the URL matches one of these\n  parameters it will be set as the referrer (overriding the `Referer` header).\n\n  The default is `utm_campaign, utm_source, ref`.\n\n- Better export.\n\n  The export was a quick feature added in the first version, but didn't scale\n  well to larger sites with a lot of pageviews. This now works well for any\n  number of pageviews.\n\n- Many small improvements and bug fixes\n\n  It's almost 2 months of work, and there have been many small changes, fixes,\n  and improvements. I didn’t keep track of them all 😅\n\n\n2020-03-27 v1.1.2\n-----------------\n\n- Fix small issue with the domain not showing correct in the site code 😅\n\n\n2020-03-27 v1.1.1\n-----------------\n\n- Small bugfix release which fixes some small issues and improves a few small\n  documentation issues. List of changes:\n  https://github.com/arp242/goatcounter/compare/v1.1.0...v1.1.1\n\n- The biggest change is that the `saas` command no longer works (and is no\n  longer documented). It was only ever useful for hosting goatcounter.com, and\n  has a number of assumptions and hard-coded values.\n\n  If you're using `saas`, then you can migrate to `serve` by setting a custom\n  domain (`sites.cname`) for all the sites. The `serve` command should work\n  after that.\n\n\n2020-03-18 v1.1.0\n-----------------\n\n- **Incompatible** Improve CLI UX.\n\n  The entire CLI has been redone; the original wasn't very user-friendly for\n  self-hosting. See `goatcounter help` for the full docs, but in brief:\n\n      o Use \"goatcounter serve\" instead of just \"goatcounter\".\n      o Create new sites with \"goatcounter create\".\n      o Good support for TLS hosting and ACME certificates (see -tls flag).\n      o Invert -prod to -dev (i.e. just drop -prod for production services, add -dev for development).\n      o -smtp flag is no longer required.\n      o -dbconnect                 →  -db\n      o -pgsql                     →  -db postgresql://...\n      o -staticdomain              →  no longer needed, but if you really want it you can\n                                      append to domain: -domain example.com,static.example.com\n      o -emailerrors               →  -errors mailto:...\n      o goatcounter -migrate       →  goatcounter migrate\n      o goatcounter -migrate auto  →  goatcounter serve -automigrate\n\n- **Action required** Show top referrals.\n\n  To populate the ref_stats and size_stats tables for older data, update first\n  and then run:\n\n      $ goatcounter reindex -confirm -table ref_stats\n      $ goatcounter reindex -confirm -table size_stats\n\n- Charts are displayed in local timezone.\n\n- Add \"IgnoreIPs\" setting to ignore your own views.\n\n- Link to paths by adding a new domain setting.\n\n- Add configurable data retention.\n\n- Allow configuring the thousands separator.\n\n- Allow filtering pages in the dashboard.\n\n- Improve the integration code.\n\n- Allow sending emails without a relay.\n\n- Add get_query() to count.js to get query parameter.\n\n- Allow viewing the charts by day, instead of only by hour.\n\n\n2020-01-13 v1.0.0\n-----------------\n\nInitial stable release.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 22.8056640625,
          "content": "Copyright © Martin Tournoij <martin@arp242.net>\n\nGoatCounter is licensed under a slightly modified version of European Union\nPublic License (EUPL) 1.2; the only difference is that the “Compatible Licenses”\nAppendix removes some licenses, but is otherwise identical.\n\nThe EUPL is available in the 22 official languages of the EU. Only the English\none is provided here, for the official translations see: http://eupl12.zgo.at\n\nMotivation for choosing the EUPL: https://www.arp242.net/license.html\n\nThe count.js integration script is licensed under the permissive ISC license to\nease integrating it. GoatCounter also contains various 3rd-party components,\nmost of which are MIT or BSD licensed (the licenses for which are included in\nthis file as well). See docs/sbom.md for a list of all dependencies and their\nlicenses.\n\n\n––– public/count.js; ISC license ––––––––––––––––––––––––––––––––––––––––––––––\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n\n\n––– Start of license text –––––––––––––––––––––––––––––––––––––––––––––––––––––\n\n                      EUROPEAN UNION PUBLIC LICENCE v. 1.2\n                      EUPL © the European Union 2007, 2016\n\nThis European Union Public Licence (the ‘EUPL’) applies to the Work (as defined\nbelow) which is provided under the terms of this Licence. Any use of the Work,\nother than as authorised under this Licence is prohibited (to the extent such\nuse is covered by a right of the copyright holder of the Work).\n\nThe Work is provided under the terms of this Licence when the Licensor (as\ndefined below) has placed the following notice immediately following the\ncopyright notice for the Work:\n\n        Licensed under the EUPL\n\nor has expressed by any other means his willingness to license under the EUPL.\n\n1. Definitions\n\nIn this Licence, the following terms have the following meaning:\n\n- ‘The Licence’: this Licence.\n\n- ‘The Original Work’: the work or software distributed or communicated by the\n  Licensor under this Licence, available as Source Code and also as Executable\n  Code as the case may be.\n\n- ‘Derivative Works’: the works or software that could be created by the\n  Licensee, based upon the Original Work or modifications thereof. This Licence\n  does not define the extent of modification or dependence on the Original Work\n  required in order to classify a work as a Derivative Work; this extent is\n  determined by copyright law applicable in the country mentioned in Article 15.\n\n- ‘The Work’: the Original Work or its Derivative Works.\n\n- ‘The Source Code’: the human-readable form of the Work which is the most\n  convenient for people to study and modify.\n\n- ‘The Executable Code’: any code which has generally been compiled and which is\n  meant to be interpreted by a computer as a program.\n\n- ‘The Licensor’: the natural or legal person that distributes or communicates\n  the Work under the Licence.\n\n- ‘Contributor(s)’: any natural or legal person who modifies the Work under the\n  Licence, or otherwise contributes to the creation of a Derivative Work.\n\n- ‘The Licensee’ or ‘You’: any natural or legal person who makes any usage of\n  the Work under the terms of the Licence.\n\n- ‘Distribution’ or ‘Communication’: any act of selling, giving, lending,\n  renting, distributing, communicating, transmitting, or otherwise making\n  available, online or offline, copies of the Work or providing access to its\n  essential functionalities at the disposal of any other natural or legal\n  person.\n\n2. Scope of the rights granted by the Licence\n\nThe Licensor hereby grants You a worldwide, royalty-free, non-exclusive,\nsublicensable licence to do the following, for the duration of copyright vested\nin the Original Work:\n\n- use the Work in any circumstance and for all usage,\n- reproduce the Work,\n- modify the Work, and make Derivative Works based upon the Work,\n- communicate to the public, including the right to make available or display\n  the Work or copies thereof to the public and perform publicly, as the case may\n  be, the Work,\n- distribute the Work or copies thereof,\n- lend and rent the Work or copies thereof,\n- sublicense rights in the Work or copies thereof.\n\nThose rights can be exercised on any media, supports and formats, whether now\nknown or later invented, as far as the applicable law permits so.\n\nIn the countries where moral rights apply, the Licensor waives his right to\nexercise his moral right to the extent allowed by law in order to make effective\nthe licence of the economic rights here above listed.\n\nThe Licensor grants to the Licensee royalty-free, non-exclusive usage rights to\nany patents held by the Licensor, to the extent necessary to make use of the\nrights granted on the Work under this Licence.\n\n3. Communication of the Source Code\n\nThe Licensor may provide the Work either in its Source Code form, or as\nExecutable Code. If the Work is provided as Executable Code, the Licensor\nprovides in addition a machine-readable copy of the Source Code of the Work\nalong with each copy of the Work that the Licensor distributes or indicates, in\na notice following the copyright notice attached to the Work, a repository where\nthe Source Code is easily and freely accessible for as long as the Licensor\ncontinues to distribute or communicate the Work.\n\n4. Limitations on copyright\n\nNothing in this Licence is intended to deprive the Licensee of the benefits from\nany exception or limitation to the exclusive rights of the rights owners in the\nWork, of the exhaustion of those rights or of other applicable limitations\nthereto.\n\n5. Obligations of the Licensee\n\nThe grant of the rights mentioned above is subject to some restrictions and\nobligations imposed on the Licensee. Those obligations are the following:\n\nAttribution right: The Licensee shall keep intact all copyright, patent or\ntrademarks notices and all notices that refer to the Licence and to the\ndisclaimer of warranties. The Licensee must include a copy of such notices and a\ncopy of the Licence with every copy of the Work he/she distributes or\ncommunicates. The Licensee must cause any Derivative Work to carry prominent\nnotices stating that the Work has been modified and the date of modification.\n\nCopyleft clause: If the Licensee distributes or communicates copies of the\nOriginal Works or Derivative Works, this Distribution or Communication will be\ndone under the terms of this Licence or of a later version of this Licence\nunless the Original Work is expressly distributed only under this version of the\nLicence — for example by communicating ‘EUPL v. 1.2 only’. The Licensee\n(becoming Licensor) cannot offer or impose any additional terms or conditions on\nthe Work or Derivative Work that alter or restrict the terms of the Licence.\n\nCompatibility clause: If the Licensee Distributes or Communicates Derivative\nWorks or copies thereof based upon both the Work and another work licensed under\na Compatible Licence, this Distribution or Communication can be done under the\nterms of this Compatible Licence. For the sake of this clause, ‘Compatible\nLicence’ refers to the licences listed in the appendix attached to this Licence.\nShould the Licensee's obligations under the Compatible Licence conflict with\nhis/her obligations under this Licence, the obligations of the Compatible\nLicence shall prevail.\n\nProvision of Source Code: When distributing or communicating copies of the Work,\nthe Licensee will provide a machine-readable copy of the Source Code or indicate\na repository where this Source will be easily and freely available for as long\nas the Licensee continues to distribute or communicate the Work.\n\nLegal Protection: This Licence does not grant permission to use the trade names,\ntrademarks, service marks, or names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the copyright notice.\n\n6. Chain of Authorship\n\nThe original Licensor warrants that the copyright in the Original Work granted\nhereunder is owned by him/her or licensed to him/her and that he/she has the\npower and authority to grant the Licence.\n\nEach Contributor warrants that the copyright in the modifications he/she brings\nto the Work are owned by him/her or licensed to him/her and that he/she has the\npower and authority to grant the Licence.\n\nEach time You accept the Licence, the original Licensor and subsequent\nContributors grant You a licence to their contributions to the Work, under the\nterms of this Licence.\n\n7. Disclaimer of Warranty\n\nThe Work is a work in progress, which is continuously improved by numerous\nContributors. It is not a finished work and may therefore contain defects or\n‘bugs’ inherent to this type of development.\n\nFor the above reason, the Work is provided under the Licence on an ‘as is’ basis\nand without warranties of any kind concerning the Work, including without\nlimitation merchantability, fitness for a particular purpose, absence of defects\nor errors, accuracy, non-infringement of intellectual property rights other than\ncopyright as stated in Article 6 of this Licence.\n\nThis disclaimer of warranty is an essential part of the Licence and a condition\nfor the grant of any rights to the Work.\n\n8. Disclaimer of Liability\n\nExcept in the cases of wilful misconduct or damages directly caused to natural\npersons, the Licensor will in no event be liable for any direct or indirect,\nmaterial or moral, damages of any kind, arising out of the Licence or of the use\nof the Work, including without limitation, damages for loss of goodwill, work\nstoppage, computer failure or malfunction, loss of data or any commercial\ndamage, even if the Licensor has been advised of the possibility of such damage.\nHowever, the Licensor will be liable under statutory product liability laws as\nfar such laws apply to the Work.\n\n9. Additional agreements\n\nWhile distributing the Work, You may choose to conclude an additional agreement,\ndefining obligations or services consistent with this Licence. However, if\naccepting obligations, You may act only on your own behalf and on your sole\nresponsibility, not on behalf of the original Licensor or any other Contributor,\nand only if You agree to indemnify, defend, and hold each Contributor harmless\nfor any liability incurred by, or claims asserted against such Contributor by\nthe fact You have accepted any warranty or additional liability.\n\n10. Acceptance of the Licence\n\nThe provisions of this Licence can be accepted by clicking on an icon ‘I agree’\nplaced under the bottom of a window displaying the text of this Licence or by\naffirming consent in any other similar way, in accordance with the rules of\napplicable law. Clicking on that icon indicates your clear and irrevocable\nacceptance of this Licence and all of its terms and conditions.\n\nSimilarly, you irrevocably accept this Licence and all of its terms and\nconditions by exercising any rights granted to You by Article 2 of this Licence,\nsuch as the use of the Work, the creation by You of a Derivative Work or the\nDistribution or Communication by You of the Work or copies thereof.\n\n11. Information to the public\n\nIn case of any Distribution or Communication of the Work by means of electronic\ncommunication by You (for example, by offering to download the Work from a\nremote location) the distribution channel or media (for example, a website) must\nat least provide to the public the information requested by the applicable law\nregarding the Licensor, the Licence and the way it may be accessible, concluded,\nstored and reproduced by the Licensee.\n\n12. Termination of the Licence\n\nThe Licence and the rights granted hereunder will terminate automatically upon\nany breach by the Licensee of the terms of the Licence.\n\nSuch a termination will not terminate the licences of any person who has\nreceived the Work from the Licensee under the Licence, provided such persons\nremain in full compliance with the Licence.\n\n13. Miscellaneous\n\nWithout prejudice of Article 9 above, the Licence represents the complete\nagreement between the Parties as to the Work.\n\nIf any provision of the Licence is invalid or unenforceable under applicable\nlaw, this will not affect the validity or enforceability of the Licence as a\nwhole. Such provision will be construed or reformed so as necessary to make it\nvalid and enforceable.\n\nThe European Commission may publish other linguistic versions or new versions of\nthis Licence or updated versions of the Appendix, so far this is required and\nreasonable, without reducing the scope of the rights granted by the Licence. New\nversions of the Licence will be published with a unique version number.\n\nAll linguistic versions of this Licence, approved by the European Commission,\nhave identical value. Parties can take advantage of the linguistic version of\ntheir choice.\n\n14. Jurisdiction\n\nWithout prejudice to specific agreement between parties,\n\n- any litigation resulting from the interpretation of this License, arising\n  between the European Union institutions, bodies, offices or agencies, as a\n  Licensor, and any Licensee, will be subject to the jurisdiction of the Court\n  of Justice of the European Union, as laid down in article 272 of the Treaty on\n  the Functioning of the European Union,\n\n- any litigation arising between other parties and resulting from the\n  interpretation of this License, will be subject to the exclusive jurisdiction\n  of the competent court where the Licensor resides or conducts its primary\n  business.\n\n15. Applicable Law\n\nWithout prejudice to specific agreement between parties,\n\n- this Licence shall be governed by the law of the European Union Member State\n  where the Licensor has his seat, resides or has his registered office,\n\n- this licence shall be governed by Belgian law if the Licensor has no seat,\n  residence or registered office inside a European Union Member State.\n\nAppendix\n\n‘Compatible Licences’ according to Article 5 EUPL are:\n\n- GNU Affero General Public License (AGPL) v. 3\n- Open Software License (OSL) v. 2.1, v. 3.0\n\nThe European Commission may update this Appendix to later versions of the above\nlicences without producing a new version of the EUPL, as long as they provide\nthe rights granted in Article 2 of this Licence and protect the covered Source\nCode from exclusive appropriation.\n\nAll other changes or additions to this Appendix require the production of a new\nEUPL version.\n\n\n––– public/jquery.js; MIT license; https://jquery.org/license –––––––––––––––––\n\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n––– public/pikaday.*; MIT license; https://github.com/Pikaday/Pikaday –––––––––\n\nCopyright (c) 2014 David Bushell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n––– public/dragula.js; MIT license; https://github.com/bevacqua/dragula –––––––\n\nCopyright © 2015-2016 Nicolas Bevacqua\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n––– public/fonts/*; OFL 1.1; http://www.latofonts.com –––––––––––––––––––––––––\n\nCopyright (c) 2010-2015, Łukasz Dziedzic (dziedzic@typoland.com),\nwith Reserved Font Name Lato.\n\nThis Font Software is licensed under the SIL Open Font License, Version 1.1.\nThis license is copied below, and is also available with a FAQ at:\nhttp://scripts.sil.org/OFL\n\n\n-----------------------------------------------------------\nSIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\n-----------------------------------------------------------\n\nPREAMBLE\nThe goals of the Open Font License (OFL) are to stimulate worldwide\ndevelopment of collaborative font projects, to support the font creation\nefforts of academic and linguistic communities, and to provide a free and\nopen framework in which fonts may be shared and improved in partnership\nwith others.\n\nThe OFL allows the licensed fonts to be used, studied, modified and\nredistributed freely as long as they are not sold by themselves. The\nfonts, including any derivative works, can be bundled, embedded,\nredistributed and/or sold with any software provided that any reserved\nnames are not used by derivative works. The fonts and derivatives,\nhowever, cannot be released under any other type of license. The\nrequirement for fonts to remain under this license does not apply\nto any document created using the fonts or their derivatives.\n\nDEFINITIONS\n\"Font Software\" refers to the set of files released by the Copyright\nHolder(s) under this license and clearly marked as such. This may\ninclude source files, build scripts and documentation.\n\n\"Reserved Font Name\" refers to any names specified as such after the\ncopyright statement(s).\n\n\"Original Version\" refers to the collection of Font Software components as\ndistributed by the Copyright Holder(s).\n\n\"Modified Version\" refers to any derivative made by adding to, deleting,\nor substituting -- in part or in whole -- any of the components of the\nOriginal Version, by changing formats or by porting the Font Software to a\nnew environment.\n\n\"Author\" refers to any designer, engineer, programmer, technical\nwriter or other person who contributed to the Font Software.\n\nPERMISSION & CONDITIONS\nPermission is hereby granted, free of charge, to any person obtaining\na copy of the Font Software, to use, study, copy, merge, embed, modify,\nredistribute, and sell modified and unmodified copies of the Font\nSoftware, subject to the following conditions:\n\n1) Neither the Font Software nor any of its individual components,\nin Original or Modified Versions, may be sold by itself.\n\n2) Original or Modified Versions of the Font Software may be bundled,\nredistributed and/or sold with any software, provided that each copy\ncontains the above copyright notice and this license. These can be\nincluded either as stand-alone text files, human-readable headers or\nin the appropriate machine-readable metadata fields within text or\nbinary files as long as those fields can be easily viewed by the user.\n\n3) No Modified Version of the Font Software may use the Reserved Font\nName(s) unless explicit written permission is granted by the corresponding\nCopyright Holder. This restriction only applies to the primary font name as\npresented to the users.\n\n4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font\nSoftware shall not be used to promote, endorse or advertise any\nModified Version, except to acknowledge the contribution(s) of the\nCopyright Holder(s) and the Author(s) or with their explicit written\npermission.\n\n5) The Font Software, modified or unmodified, in part or in whole,\nmust be distributed entirely under this license, and must not be\ndistributed under any other license. The requirement for fonts to\nremain under this license does not apply to any document created\nusing the Font Software.\n\nTERMINATION\nThis license becomes null and void if any of the above conditions are\nnot met.\n\nDISCLAIMER\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\nOTHER DEALINGS IN THE FONT SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.55078125,
          "content": "GoatCounter is an open source web analytics platform available as a (free)\nhosted service or self-hosted app. It aims to offer easy to use and meaningful\nprivacy-friendly web analytics as an alternative to Google Analytics or Matomo.\n\nThere are two ways to run this: as hosted service on [goatcounter.com][www], or\nrun it on your own server. The source code is completely Open Source/Free\nSoftware, and it can be self-hosted without restrictions.\n\nSee [docs/rationale.md](docs/rationale.md) for some more details on the *\"why?\"*\nof this project.\n\nThere's a live demo at [https://stats.arp242.net](https://stats.arp242.net).\n\nPlease consider [contributing financially][sponsor] if you're using\ngoatcounter.com to pay for the server costs.\n\n[sponsor]: http://www.goatcounter.com/contribute\n[www]: https://www.goatcounter.com\n\n\nFeatures\n--------\n- **Privacy-aware**; doesn’t track users with unique identifiers and doesn't\n  need a GDPR notice. Fine-grained **control over which data is collected**.\n  Also see the [privacy policy][privacy] and [GDPR consent notices][gdpr].\n\n- **Lightweight** and **fast**; adds just ~3.5K of extra data to your site. Also\n  has JavaScript-free \"tracking pixel\" option, or you can use it from your\n  application's middleware or **import from logfiles**.\n\n- Identify **unique visits** without cookies using a non-identifiable hash\n  ([technical details][sessions]).\n\n- Keeps useful statistics such as **browser** information, **location**, and\n  **screen size**. Keep track of **referring sites** and **campaigns**.\n\n- **Easy**; if you've been confused by the myriad of options and flexibility of\n  Google Analytics and Matomo that you don't need then GoatCounter will be a\n  breath of fresh air.\n\n- **Accessibility** is a high-priority feature, and the interface works well\n  with assistive technology such as screen readers.\n\n- 100% committed to **open source**; you can see exactly what the code does and\n  make improvements, or <strong>self-host</strong> it for any purpose.\n\n- **Own your data**; you can always export all data and **cancel at any time**.\n\n- Integrate on your site with just a **single script tag**:\n\n      <script data-goatcounter=\"https://yoursite.goatcounter.com/count\"\n              async src=\"//gc.zgo.at/count.js\"></script>\n\n- The JavaScript integration is a good option for most, but you can also use a\n  **no-JavaScript image-based tracker**, integrate it in your **backend\n  middleware**, or **parse log files**.\n\n[privacy]: https://www.goatcounter.com/privacy\n[gdpr]: https://www.goatcounter.com/gdpr\n[sessions]: http://www.goatcounter.com/help/sessions\n\n\nGetting data in to GoatCounter\n------------------------------\nThere are three ways:\n\n1. Add the JavaScript code on your site; this is the easiest and most common\n   method. Detailed documentation for this is available at\n   https://www.goatcounter.com/code\n\n2. Integrate in your middleware; send data to GoatCounter by calling the API\n   from your backend server middleware. Detailed documentation for this is\n   available at https://www.goatcounter.com/api#backend-integration\n\n3. Parse logfiles. GoatCounter can parse logfiles from nginx, Apache,\n   CloudFront, or any other HTTP middleware or proxy. See `goatcounter help\n   import` for detailed documentation on this.\n\n\nRunning your own\n----------------\n**Note this README is for the latest master and may be inaccurate for the latest\nreleased version; use the [`release-2.5`][latest] branch for the 2.5 README.**\n\nThe [release page][releases] has binaries for Linux amd64, arm, and arm64. These\nare statically compiled, contain everything you need, and should work in pretty\nmuch any Linux environment. The only other thing you need is somewhere to store\na SQLite database file or a PostgreSQL connection.\n\nGoatCounter should run on any platform supported by Go, but there are no\nbinaries for them (yet) as cross-compiling SQLite is somewhat complex. You'll\nhave to build from source if you want to run it on e.g. FreeBSD or macOS.\n\nGenerally speaking only the latest release is supported, although critical fixes\n(security, data loss, etc.) may get backported to previous releases.\n\n[releases]: https://github.com/arp242/goatcounter/releases\n[latest]: https://github.com/arp242/goatcounter/tree/release-2.5\n\n### Deploy scripts and such\n- [\"StackScript\" for Linode][stackscript]; Alpine Linux VPS; you can also use\n  this for other Alpine Linux machines.\n\n  If you don't have a Linode account yet then consider using my [referral\n  URL][linode] and I'll get some kickback from Linode :-)\n\n  [stackscript]: https://cloud.linode.com/stackscripts/659823\n  [linode]: https://www.linode.com/?r=7acaf75737436d859e785dd5c9abe1ae99b4387e\n\n- Some people have created Dockerfiles. You don't really need Docker since\n  GoatCounter has no external dependencies; it probably [creates more problems\n  than it solves][docker] IMHO. At any rate, here are some that seem alright at\n  a glance if you must:\n\n  - https://github.com/baethon/docker-goatcounter (https://hub.docker.com/r/baethon/goatcounter)\n  - https://github.com/sent-hil/dokku-gocounter\n  - https://github.com/anarcat/goatcounter/blob/Dockerfile/Dockerfile\n\n  [docker]: https://www.youtube.com/watch?v=PivpCKEiQOQ\n\n- Some other guides people have written:\n  - [Replacing Google Analytics with GoatCounter](https://rgth.co/blog/replacing-google-analytics-with-goatcounter/) (Ubuntu)\n  - [GoatCounter self-hosted setup on a VPS](https://actually.fyi/posts/goatcounter-vps/) (Arch Linux)\n  - [GoatCounter server setup on OpenBSD](https://daulton.ca/2021/01/openbsd-goatcounter-server/)\n\n\n### Building from source\nYou need Go 1.21 or newer and a C compiler (for SQLite). If you compile it with\n`CGO_ENABLED=0` you don't need a C compiler but can only use PostgreSQL.\n\nYou can install from source to $GOBIN (`go env GOBIN`) with:\n\n    % git clone --branch=release-2.5 https://github.com/arp242/goatcounter.git\n    % cd goatcounter\n    % go build -ldflags=\"-X zgo.at/goatcounter/v2.Version=$(git log -n1 --format='%h_%cI')\" ./cmd/goatcounter\n\nWhich will produce a `goatcounter` binary in the current directory.\n\nThe `-ldflags=[..]` sets the version; this isn't *strictly* required as such,\nbut it's recommended as it's used to \"bust\" the cache for static files and may\nalso be useful later when reporting bugs. This can be any string and doesn't\nfollow any particular format, you can also set this to the current date or\n`banana` or anything you want really.\n\nTo use the latest development version switch to the `master` branch.\n\nTo build a fully statically linked binary:\n\n    % go build -tags osusergo,netgo,sqlite_omit_load_extension \\\n        -ldflags=\"-X zgo.at/goatcounter/v2.Version=$(git log -n1 --format='%h_%cI') -extldflags=-static\" \\\n        ./cmd/goatcounter\n\nIt's recommended to use the latest release as in the above command. The master\nbranch should be reasonably stable but no guarantees, and sometimes I don't\nwrite detailed release/upgrade notes until the actual release so you may run in\nto surprises.\n\nYou can compile goatcounter without cgo if you're planning to use PostgreSQL and\ndon't use SQLite:\n\n    % CGO_ENABLED=0 go build \\\n        -ldflags=\"-X zgo.at/goatcounter.Version=$(git log -n1 --format='%h_%cI')\" \\\n        ./cmd/goatcounter\n\nFunctionally it doesn't matter too much, but builds will be a bit easier and\nfaster as it won't require a C compiler.\n\n### Running\nYou can start a server with:\n\n    % goatcounter serve\n\nThe default is to use an SQLite database at `./db/goatcounter.sqlite3`, which\nwill be created if it doesn't exist yet. See the `-db` flag and `goatcounter\nhelp db` to customize this.\n\nBoth SQLite and PostgreSQL are supported. SQLite should work well for most\nsmaller sites, but PostgreSQL gives better performance. There are [some\nbenchmarks over here][bench] to give some indication of what performance to\nexpect from SQLite and PostgreSQL.\n\nGoatCounter will listen on port `*:80` and `*:443` by default. You don't need\nto run it as root and can grant the appropriate permissions on Linux with:\n\n    % setcap 'cap_net_bind_service=+ep' goatcounter\n\nListening on a different port can be a bit tricky due to the ACME/Let's Encrypt\ncertificate generation; `goatcounter help listen` documents this in depth.\n\nYou can create new sites with the `db create site` command:\n\n    % goatcounter db create site -vhost stats.example.com -user.email me@example.com\n\nThis will ask for a password for your new account; you can also add a password\non the commandline with `-password`. You must also pass the `-db` flag here if\nyou use something other than the default.\n\n[bench]: https://github.com/arp242/goatcounter/blob/master/docs/benchmark.md\n\n### Updating\nYou may need to run the database migrations when updating. Use  `goatcounter\nserve -automigrate` to always run all pending migrations on startup. This is the\neasiest way, although arguably not the \"best\" way.\n\nUse `goatcounter db migrate <file>` or `goatcounter db migrate all` to manually run\nmigrations; generally you want to upload the new version, run migrations while\nthe old one is still running, and then restart so the new version takes effect.\n\nUse `goatcounter db migrate pending` to get a list of pending migrations, or\n`goatcounter db migrate list` to show all migrations.\n\n### PostgreSQL\nTo use PostgreSQL run GoatCounter with a custom `-db` flag; for example:\n\n    % goatcounter serve -db 'postgresql+dbname=goatcounter'\n    % goatcounter serve -db 'postgresql+host=/run/postgresql dbname=goatcounter sslmode=disable'\n\nThis follows the format in the `psql` CLI; you can also use the `PG*`\n[environment variables](https://www.postgresql.org/docs/current/libpq-envars.html):\n\n    % PGDATABASE=goatcounter PGHOST=/run/postgresql goatcounter serve -db 'postgresql'\n\nThe database will be created automatically if possible; if you want to create it\nfor a specific user you can use:\n\n    % createuser --interactive --pwprompt goatcounter\n    % createdb --owner goatcounter goatcounter\n\nYou can manually import the schema with:\n\n    % goatcounter db schema-pgsql | psql --user=goatcounter --dbname=goatcounter\n\nSee `goatcounter help db` and the [pq docs][pq] for more details.\n\n[pq]: https://pkg.go.dev/github.com/lib/pq#hdr-Connection_String_Parameters\n\n### Development/testing\nYou can start a test/development server with:\n\n    % goatcounter serve -dev\n\nThe `-dev` flag makes some small things a bit more convenient for development;\nTLS is disabled by default, it will listen on localhost:8081, the application\nwill automatically restart on recompiles, templates and static files will be\nread directly from the filesystem, and a few other minor changes.\n\nSee [.github/CONTRIBUTING.md](/.github/CONTRIBUTING.md) for more details on how\nto run a development server, write patches, etc.\n"
        },
        {
          "name": "acme",
          "type": "tree",
          "content": null
        },
        {
          "name": "api_token.go",
          "type": "blob",
          "size": 6.390625,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"strings\"\n\t\"time\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/zcrypto\"\n\t\"zgo.at/zstd/zint\"\n\t\"zgo.at/zstd/ztime\"\n\t\"zgo.at/zstd/ztype\"\n)\n\n// APIToken permissions.\n//\n// DO NOT change the values of these constants; they're stored in the database.\nconst (\n\tAPIPermNothing    zint.Bitflag64 = 1 << iota\n\tAPIPermCount                     // 2\n\tAPIPermExport                    // 4\n\tAPIPermSiteRead                  // 8\n\tAPIPermSiteCreate                // 16\n\tAPIPermSiteUpdate                // 32\n\tAPIPermStats                     // 64\n)\n\ntype APIToken struct {\n\tID     int64 `db:\"api_token_id\" json:\"-\"`\n\tSiteID int64 `db:\"site_id\" json:\"-\"`\n\tUserID int64 `db:\"user_id\" json:\"-\"`\n\n\tName        string         `db:\"name\" json:\"name\"`\n\tToken       string         `db:\"token\" json:\"-\"`\n\tPermissions zint.Bitflag64 `db:\"permissions\" json:\"permissions\"`\n\n\tCreatedAt  time.Time  `db:\"created_at\" json:\"-\"`\n\tLastUsedAt *time.Time `db:\"last_used_at\" json:\"-\"`\n}\n\ntype PermissionFlag struct {\n\tLabel, Help string\n\tFlag        zint.Bitflag64\n}\n\n// PermissionFlags returns a list of all flags we know for the Permissions settings.\nfunc (t APIToken) PermissionFlags(only ...zint.Bitflag64) []PermissionFlag {\n\tif len(only) > 1 {\n\t\tfor _, o := range only[1:] {\n\t\t\tonly[0] |= o\n\t\t}\n\t}\n\n\tall := []PermissionFlag{\n\t\t{\n\t\t\tLabel: \"Record pageviews\",\n\t\t\tHelp:  \"Record pageviews with /api/v0/count\",\n\t\t\tFlag:  APIPermCount,\n\t\t},\n\t\t{\n\t\t\tLabel: \"Read statistics\",\n\t\t\tHelp:  \"Get statistics out of GoatCounter\",\n\t\t\tFlag:  APIPermStats,\n\t\t},\n\t\t{\n\t\t\tLabel: \"Export\",\n\t\t\tHelp:  \"Export data with /api/v0/export\",\n\t\t\tFlag:  APIPermExport,\n\t\t},\n\t\t{\n\t\t\tLabel: \"Read sites\",\n\t\t\tFlag:  APIPermSiteRead,\n\t\t},\n\t\t{\n\t\t\tLabel: \"Create sites\",\n\t\t\tFlag:  APIPermSiteCreate,\n\t\t},\n\t\t{\n\t\t\tLabel: \"Update sites\",\n\t\t\tFlag:  APIPermSiteUpdate,\n\t\t},\n\t}\n\n\tif len(only) == 0 {\n\t\treturn all\n\t}\n\n\tfilter := make([]PermissionFlag, 0, len(all))\n\tfor _, a := range all {\n\t\tif !only[0].Has(a.Flag) {\n\t\t\tcontinue\n\t\t}\n\t\tfilter = append(filter, a)\n\t}\n\treturn filter\n}\n\nfunc (t APIToken) FormatPermissions() string {\n\tvar all []string\n\tif t.Permissions.Has(APIPermCount) {\n\t\tall = append(all, \"count\")\n\t}\n\tif t.Permissions.Has(APIPermExport) {\n\t\tall = append(all, \"export\")\n\t}\n\tif t.Permissions.Has(APIPermSiteRead) {\n\t\tall = append(all, \"site-read\")\n\t}\n\tif t.Permissions.Has(APIPermSiteCreate) {\n\t\tall = append(all, \"site-create\")\n\t}\n\tif t.Permissions.Has(APIPermSiteUpdate) {\n\t\tall = append(all, \"site-update\")\n\t}\n\treturn \"'\" + strings.Join(all, \"', '\") + \"'\"\n}\n\n// Defaults sets fields to default values, unless they're already set.\nfunc (t *APIToken) Defaults(ctx context.Context) {\n\tt.SiteID = MustGetSite(ctx).ID\n\tt.Token = zcrypto.Secret256()\n\tt.CreatedAt = ztime.Now()\n}\n\nfunc (t *APIToken) Validate(ctx context.Context) error {\n\tv := NewValidate(ctx)\n\tv.Required(\"name\", t.Name)\n\tv.Required(\"site_id\", t.SiteID)\n\tv.Required(\"user_id\", t.SiteID)\n\tv.Required(\"token\", t.Token)\n\tif t.Permissions == 1 {\n\t\tv.Append(\"permissions\", \"must set at least one permission\")\n\t}\n\treturn v.ErrorOrNil()\n}\n\n// Insert a new row.\nfunc (t *APIToken) Insert(ctx context.Context) error {\n\tif t.ID > 0 {\n\t\treturn errors.New(\"ID > 0\")\n\t}\n\n\tt.Defaults(ctx)\n\terr := t.Validate(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tt.ID, err = zdb.InsertID(ctx, \"api_token_id\",\n\t\t`insert into api_tokens (site_id, user_id, name, token, permissions, created_at) values (?)`,\n\t\t[]any{t.SiteID, GetUser(ctx).ID, t.Name, t.Token, t.Permissions, t.CreatedAt})\n\treturn errors.Wrap(err, \"APIToken.Insert\")\n}\n\n// Update the name and permissions.\nfunc (t *APIToken) Update(ctx context.Context) error {\n\tif t.ID == 0 {\n\t\treturn errors.New(\"ID == 0\")\n\t}\n\n\tt.Defaults(ctx)\n\terr := t.Validate(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = zdb.Exec(ctx, `update api_tokens set name=?, permissions=? where api_token_id=?`,\n\t\tt.Name, t.Permissions, t.ID)\n\treturn errors.Wrap(err, \"APIToken.Update\")\n}\n\n// UpdateLastUsed sets the last used time to the current time.\nfunc (t *APIToken) UpdateLastUsed(ctx context.Context) error {\n\tif t.ID == 0 {\n\t\treturn errors.New(\"ID == 0\")\n\t}\n\n\tt.Defaults(ctx)\n\terr := t.Validate(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tt.LastUsedAt = ztype.Ptr(ztime.Now())\n\terr = zdb.Exec(ctx, `update api_tokens set last_used_at=? where api_token_id=?`,\n\t\tt.LastUsedAt, t.ID)\n\treturn errors.Wrap(err, \"APIToken.UpdateLastUsed\")\n}\n\nfunc (t *APIToken) ByID(ctx context.Context, id int64) error {\n\treturn errors.Wrapf(zdb.Get(ctx, t, `/* APIToken.ByID */\n\t\tselect * from api_tokens where api_token_id=$1 and site_id=$2`,\n\t\tid, MustGetSite(ctx).ID), \"APIToken.ByID %d\", id)\n}\n\nfunc (t *APIToken) ByToken(ctx context.Context, token string) error {\n\treturn errors.Wrap(zdb.Get(ctx, t,\n\t\t`/* APIToken.ByID */ select * from api_tokens where token=$1 and site_id=$2`,\n\t\ttoken, MustGetSite(ctx).ID), \"APIToken.ByToken\")\n}\n\nfunc (t *APIToken) Delete(ctx context.Context) error {\n\terr := zdb.Exec(ctx,\n\t\t`/* APIToken.Delete */ delete from api_tokens where api_token_id=$1 and site_id=$2`,\n\t\tt.ID, MustGetSite(ctx).ID)\n\treturn errors.Wrapf(err, \"APIToken.Delete %d\", t.ID)\n}\n\ntype APITokens []APIToken\n\nfunc (t *APITokens) List(ctx context.Context) error {\n\treturn errors.Wrap(zdb.Select(ctx, t,\n\t\t`select * from api_tokens where site_id=$1 and user_id=$2`,\n\t\tMustGetSite(ctx).ID, GetUser(ctx).ID), \"APITokens.List\")\n}\n\n// Find API tokens: by ID if ident is a number, or by token if it's not.\nfunc (t *APITokens) Find(ctx context.Context, ident []string) error {\n\tids, strs := splitIntStr(ident)\n\terr := zdb.Select(ctx, t, `select * from api_tokens where\n\t\t{{:ids api_token_id in (:ids) or}}\n\t\t{{:strs! 0=1}}\n\t\t{{:strs token in (:strs)}}`,\n\t\tmap[string]any{\"ids\": ids, \"strs\": strs})\n\treturn errors.Wrap(err, \"APITokens.Find\")\n}\n\n// IDs gets a list of all IDs for these API tokens.\nfunc (t *APITokens) IDs() []int64 {\n\tids := make([]int64, 0, len(*t))\n\tfor _, tt := range *t {\n\t\tids = append(ids, tt.ID)\n\t}\n\treturn ids\n}\n\n// Delete all API tokens in this selection.\nfunc (t *APITokens) Delete(ctx context.Context, _ bool) error {\n\terr := zdb.TX(ctx, func(ctx context.Context) error {\n\t\tfor _, tt := range *t {\n\t\t\terr := tt.Delete(WithSite(ctx, &Site{ID: tt.SiteID}))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\treturn errors.Wrap(err, \"Users.Delete\")\n}\n"
        },
        {
          "name": "bgrun",
          "type": "tree",
          "content": null
        },
        {
          "name": "bosmang.go",
          "type": "blob",
          "size": 2.1240234375,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/zcache\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/zjson\"\n\t\"zgo.at/zstd/zruntime\"\n)\n\ntype BosmangStat struct {\n\tID        int64     `db:\"site_id\"`\n\tCodes     string    `db:\"codes\"`\n\tEmail     string    `db:\"email\"`\n\tCreatedAt time.Time `db:\"created_at\"`\n\tLastMonth int       `db:\"last_month\"`\n\tTotal     int       `db:\"total\"`\n\tAvg       int       `db:\"avg\"`\n}\n\ntype BosmangStats []BosmangStat\n\n// List stats for all sites, for all time.\nfunc (a *BosmangStats) List(ctx context.Context) error {\n\terr := zdb.Select(ctx, a, \"load:bosmang.List\")\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"BosmangStats.List\")\n\t}\n\treturn nil\n}\n\nfunc ListCache(ctx context.Context) map[string]struct {\n\tSize  int64\n\tItems map[string]string\n} {\n\tc := make(map[string]struct {\n\t\tSize  int64\n\t\tItems map[string]string\n\t})\n\n\tcaches := map[string]func(context.Context) *zcache.Cache{\n\t\t\"sites\":          cacheSites,\n\t\t\"ua\":             cacheUA,\n\t\t\"browsers\":       cacheBrowsers,\n\t\t\"systems\":        cacheSystems,\n\t\t\"paths\":          cachePaths,\n\t\t\"loc\":            cacheLoc,\n\t\t\"changed_titles\": cacheChangedTitles,\n\t\t//\"loader\":         handler.loader.conns,\n\t}\n\n\tfor name, f := range caches {\n\t\tvar (\n\t\t\tcontent = f(ctx).Items()\n\t\t\ts       = zruntime.SizeOf(content)\n\t\t\titems   = make(map[string]string)\n\t\t)\n\t\tfor k, v := range content {\n\t\t\titems[k] = fmt.Sprintf(\"%s\\n\", zjson.MustMarshalIndent(v.Object, \"\", \"  \"))\n\t\t\ts += c[name].Size + zruntime.SizeOf(v.Object)\n\t\t}\n\t\tc[name] = struct {\n\t\t\tSize  int64\n\t\t\tItems map[string]string\n\t\t}{s / 1024, items}\n\t}\n\n\t{\n\t\tvar (\n\t\t\tname    = \"sites_host\"\n\t\t\tcontent = cacheSitesHost(ctx).Items()\n\t\t\ts       = zruntime.SizeOf(content)\n\t\t\titems   = make(map[string]string)\n\t\t)\n\t\tfor k, v := range content {\n\t\t\titems[k] = v\n\t\t\ts += c[name].Size + zruntime.SizeOf(v)\n\t\t}\n\t\tc[name] = struct {\n\t\t\tSize  int64\n\t\t\tItems map[string]string\n\t\t}{s / 1024, items}\n\t}\n\treturn c\n}\n"
        },
        {
          "name": "campaign.go",
          "type": "blob",
          "size": 1.47265625,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zvalidate\"\n)\n\ntype Campaign struct {\n\tID     int64  `db:\"campaign_id\" json:\"campaign_id\"`\n\tSiteID int64  `db:\"site_id\" json:\"site_id\"`\n\tName   string `db:\"name\" json:\"name\"`\n}\n\nfunc (c *Campaign) Defaults(ctx context.Context) {}\n\nfunc (c *Campaign) Validate() error {\n\tv := zvalidate.New()\n\tv.Required(\"name\", c.Name)\n\treturn v.ErrorOrNil()\n}\n\nfunc (c *Campaign) Insert(ctx context.Context) error {\n\tif c.ID > 0 {\n\t\treturn errors.Errorf(\"Campaign.Insert: c.ID>0: %d\", c.ID)\n\t}\n\n\tc.Defaults(ctx)\n\terr := c.Validate()\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Campaign.Insert\")\n\t}\n\n\tc.ID, err = zdb.InsertID(ctx, \"campaign_id\",\n\t\t`insert into campaigns (site_id, name) values (?, ?)`, MustGetSite(ctx).ID, c.Name)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Campaign.Insert\")\n\t}\n\treturn nil\n}\n\nfunc (c *Campaign) ByName(ctx context.Context, name string) error {\n\tk := c.Name\n\tif cc, ok := cacheCampaigns(ctx).Get(k); ok {\n\t\t*c = *cc.(*Campaign)\n\t\treturn nil\n\t}\n\n\terr := zdb.Get(ctx, c, `select * from campaigns where site_id=? and lower(name)=lower(?)`,\n\t\tMustGetSite(ctx).ID, name)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Campaign.ByName\")\n\t}\n\n\tcacheCampaigns(ctx).SetDefault(k, c)\n\treturn nil\n}\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "compose.yaml",
          "type": "blob",
          "size": 0.36328125,
          "content": "name: 'goatcounter'\n\nvolumes:\n  postgres-data: {}\n\nservices:\n  postgres:\n    image:   'postgres:16-alpine'\n    ports:   ['127.0.0.1:5433:5432']  # 5433 instead of default 5432\n    volumes: ['postgres-data:/var/lib/postgresql/data']\n    environment:\n      'POSTGRES_USER':     'goatcounter'\n      'POSTGRES_PASSWORD': 'goatcounter'\n      'POSTGRES_DATABASE': 'goatcounter'\n"
        },
        {
          "name": "context.go",
          "type": "blob",
          "size": 8.220703125,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"zgo.at/z18n\"\n\t\"zgo.at/zcache\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zhttp/ctxkey\"\n)\n\n// Version of GoatCounter; set at compile-time with:\n//\n//   -ldflags=\"-X zgo.at/goatcounter/v2.Version=…\"\n\nvar Version = \"dev\"\n\nvar (\n\tkeyCacheSites      = &struct{ n string }{\"\"}\n\tkeyCacheUA         = &struct{ n string }{\"\"}\n\tkeyCacheBrowsers   = &struct{ n string }{\"\"}\n\tkeyCacheSystems    = &struct{ n string }{\"\"}\n\tkeyCachePaths      = &struct{ n string }{\"\"}\n\tkeyCacheRefs       = &struct{ n string }{\"\"}\n\tkeyCacheSizes      = &struct{ n string }{\"\"}\n\tkeyCacheLoc        = &struct{ n string }{\"\"}\n\tkeyCacheCampaigns  = &struct{ n string }{\"\"}\n\tkeyChangedTitles   = &struct{ n string }{\"\"}\n\tkeyCacheSitesProxy = &struct{ n string }{\"\"}\n\tkeyCacheI18n       = &struct{ n string }{\"\"}\n\n\tkeyConfig = &struct{ n string }{\"\"}\n)\n\ntype GlobalConfig struct {\n\tDomain         string\n\tDomainStatic   string\n\tDomainCount    string\n\tBasePath       string\n\tURLStatic      string\n\tDev            bool\n\tGoatcounterCom bool\n\tPort           string\n\tWebsocket      bool\n\tEmailFrom      string\n\tBcryptMinCost  bool\n}\n\n// WithSite adds the site to the context.\nfunc WithSite(ctx context.Context, s *Site) context.Context {\n\treturn context.WithValue(ctx, ctxkey.Site, s)\n}\n\n// GetSite gets the current site.\nfunc GetSite(ctx context.Context) *Site {\n\ts, _ := ctx.Value(ctxkey.Site).(*Site)\n\treturn s\n}\n\n// MustGetSite behaves as GetSite(), panicking if this fails.\nfunc MustGetSite(ctx context.Context) *Site {\n\ts, ok := ctx.Value(ctxkey.Site).(*Site)\n\tif !ok {\n\t\tpanic(\"MustGetSite: no site on context\")\n\t}\n\treturn s\n}\n\n// GetAccount gets this site's \"account site\" on which the users, etc. are\n// stored.\nfunc GetAccount(ctx context.Context) (*Site, error) {\n\ts := MustGetSite(ctx)\n\tif s.Parent == nil {\n\t\treturn s, nil\n\t}\n\n\tvar account Site\n\terr := account.ByID(ctx, *s.Parent)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"GetAccount: %w\", err)\n\t}\n\treturn &account, nil\n}\n\nfunc MustGetAccount(ctx context.Context) *Site {\n\ta, err := GetAccount(ctx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn a\n}\n\n// WithUser adds the site to the context.\nfunc WithUser(ctx context.Context, u *User) context.Context {\n\treturn context.WithValue(ctx, ctxkey.User, u)\n}\n\n// GetUser gets the currently logged in user.\nfunc GetUser(ctx context.Context) *User {\n\tu, _ := ctx.Value(ctxkey.User).(*User)\n\tif u == nil || u.ID == 0 {\n\t\ts := GetSite(ctx)\n\t\tif s != nil {\n\t\t\treturn &User{Settings: s.UserDefaults}\n\t\t}\n\t}\n\treturn u\n}\n\n// MustGetUser behaves as GetUser(), panicking if this fails.\nfunc MustGetUser(ctx context.Context) *User {\n\tu := GetUser(ctx)\n\tif u == nil {\n\t\tpanic(\"MustGetUser: no user on context\")\n\t}\n\treturn u\n}\n\n// CopyContextValues creates a new context with the all the request values set.\n//\n// Useful for tests, or for \"removing\" the timeout on the request context so it\n// can be passed to background functions.\nfunc CopyContextValues(ctx context.Context) context.Context {\n\tn := zdb.WithDB(context.Background(), zdb.MustGetDB(ctx))\n\n\tif c := ctx.Value(keyCacheSites); c != nil {\n\t\tn = context.WithValue(n, keyCacheSites, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyCacheUA); c != nil {\n\t\tn = context.WithValue(n, keyCacheUA, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyCacheBrowsers); c != nil {\n\t\tn = context.WithValue(n, keyCacheBrowsers, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyCacheSystems); c != nil {\n\t\tn = context.WithValue(n, keyCacheSystems, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyCachePaths); c != nil {\n\t\tn = context.WithValue(n, keyCachePaths, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyCacheRefs); c != nil {\n\t\tn = context.WithValue(n, keyCacheRefs, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyCacheSizes); c != nil {\n\t\tn = context.WithValue(n, keyCacheSizes, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyCacheLoc); c != nil {\n\t\tn = context.WithValue(n, keyCacheLoc, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyCacheCampaigns); c != nil {\n\t\tn = context.WithValue(n, keyCacheCampaigns, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyCacheI18n); c != nil {\n\t\tn = context.WithValue(n, keyCacheI18n, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyChangedTitles); c != nil {\n\t\tn = context.WithValue(n, keyChangedTitles, c.(*zcache.Cache))\n\t}\n\tif c := ctx.Value(keyCacheSitesProxy); c != nil {\n\t\tn = context.WithValue(n, keyCacheSitesProxy, c.(*zcache.Proxy))\n\t}\n\tif c := Config(ctx); c != nil {\n\t\tn = context.WithValue(n, keyConfig, c)\n\t}\n\tif s := GetSite(ctx); s != nil {\n\t\tn = context.WithValue(n, ctxkey.Site, s)\n\t}\n\tif u := GetUser(ctx); u != nil {\n\t\tn = context.WithValue(n, ctxkey.User, u)\n\t}\n\tif l := z18n.Get(ctx); l != nil {\n\t\tn = z18n.With(n, l)\n\t}\n\treturn n\n}\n\n// NewContext creates a new context with all values set.\nfunc NewContext(db zdb.DB) context.Context {\n\tctx := zdb.WithDB(context.Background(), db)\n\tctx = NewCache(ctx)\n\tctx = NewConfig(ctx)\n\treturn ctx\n}\n\nfunc NewCache(ctx context.Context) context.Context {\n\ts := zcache.New(24*time.Hour, 1*time.Hour)\n\tctx = context.WithValue(ctx, keyCacheSites, s)\n\tctx = context.WithValue(ctx, keyCacheSitesProxy, zcache.NewProxy(s))\n\n\tctx = context.WithValue(ctx, keyCacheUA, zcache.New(1*time.Hour, 5*time.Minute))\n\tctx = context.WithValue(ctx, keyCacheBrowsers, zcache.New(1*time.Hour, 5*time.Minute))\n\tctx = context.WithValue(ctx, keyCacheSystems, zcache.New(1*time.Hour, 5*time.Minute))\n\tctx = context.WithValue(ctx, keyCachePaths, zcache.New(1*time.Hour, 5*time.Minute))\n\tctx = context.WithValue(ctx, keyCacheRefs, zcache.New(1*time.Hour, 5*time.Minute))\n\tctx = context.WithValue(ctx, keyCacheSizes, zcache.New(1*time.Hour, 5*time.Minute))\n\tctx = context.WithValue(ctx, keyCacheLoc, zcache.New(zcache.NoExpiration, zcache.NoExpiration))\n\tctx = context.WithValue(ctx, keyCacheCampaigns, zcache.New(24*time.Hour, 15*time.Minute))\n\tctx = context.WithValue(ctx, keyCacheI18n, zcache.New(zcache.NoExpiration, zcache.NoExpiration))\n\tctx = context.WithValue(ctx, keyChangedTitles, zcache.New(48*time.Hour, 1*time.Hour))\n\treturn ctx\n}\n\nfunc NewConfig(ctx context.Context) context.Context {\n\treturn context.WithValue(ctx, keyConfig, &GlobalConfig{})\n}\n\nfunc Config(ctx context.Context) *GlobalConfig {\n\tif c := ctx.Value(keyConfig); c != nil {\n\t\treturn c.(*GlobalConfig)\n\t}\n\treturn &GlobalConfig{}\n}\n\nfunc cacheSites(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyCacheSites); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cacheUA(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyCacheUA); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cacheBrowsers(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyCacheBrowsers); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cacheSystems(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyCacheSystems); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cachePaths(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyCachePaths); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cacheRefs(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyCacheRefs); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cacheSizes(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyCacheSizes); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cacheLoc(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyCacheLoc); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cacheCampaigns(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyCacheCampaigns); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cacheI18n(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyCacheI18n); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cacheChangedTitles(ctx context.Context) *zcache.Cache {\n\tif c := ctx.Value(keyChangedTitles); c != nil {\n\t\treturn c.(*zcache.Cache)\n\t}\n\treturn zcache.New(0, 0)\n}\nfunc cacheSitesHost(ctx context.Context) *zcache.Proxy {\n\tif c := ctx.Value(keyCacheSitesProxy); c != nil {\n\t\treturn c.(*zcache.Proxy)\n\t}\n\treturn zcache.NewProxy(zcache.New(0, 0))\n}\n"
        },
        {
          "name": "context_test.go",
          "type": "blob",
          "size": 0.7109375,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"testing\"\n)\n\nfunc TestContext(t *testing.T) {\n\tctx := context.Background()\n\t{\n\t\tc := cacheSites(ctx)\n\t\tif c == nil {\n\t\t\tt.Error(\"c is nil\")\n\t\t}\n\n\t\tcfg := Config(ctx)\n\t\tif cfg == nil {\n\t\t\tt.Error(\"cfg is nil\")\n\t\t}\n\t}\n\n\tctx = NewCache(ctx)\n\t{\n\t\tc1 := cacheSites(ctx)\n\t\tc2 := cacheSites(ctx)\n\t\tif c1 != c2 {\n\t\t\tt.Errorf(\"%v %v\", c1, c2)\n\t\t}\n\t}\n\n\tctx = NewConfig(ctx)\n\t{\n\t\tc1 := Config(ctx)\n\t\tc2 := Config(ctx)\n\t\tif c1 != c2 {\n\t\t\tt.Errorf(\"%v %v\", c1, c2)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "cron",
          "type": "tree",
          "content": null
        },
        {
          "name": "db",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "export.go",
          "type": "blob",
          "size": 11.193359375,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"compress/gzip\"\n\t\"context\"\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"reflect\"\n\t\"strings\"\n\t\"time\"\n\n\t\"zgo.at/blackmail\"\n\t\"zgo.at/errors\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zlog\"\n\t\"zgo.at/zstd/zbool\"\n\t\"zgo.at/zstd/zcrypto\"\n\t\"zgo.at/zstd/zint\"\n\t\"zgo.at/zstd/ztime\"\n)\n\nconst ExportVersion = \"2\"\n\ntype Export struct {\n\tID     int64 `db:\"export_id\" json:\"id,readonly\"`\n\tSiteID int64 `db:\"site_id\" json:\"site_id,readonly\"`\n\n\t// The hit ID this export was started from.\n\tStartFromHitID int64 `db:\"start_from_hit_id\" json:\"start_from_hit_id\"`\n\n\t// Last hit ID that was exported; can be used as start_from_hit_id.\n\tLastHitID *int64 `db:\"last_hit_id\" json:\"last_hit_id,readonly\"`\n\n\tPath      string    `db:\"path\" json:\"path,readonly\"` // {omitdoc}\n\tCreatedAt time.Time `db:\"created_at\" json:\"created_at,readonly\"`\n\n\tFinishedAt *time.Time `db:\"finished_at\" json:\"finished_at,readonly\"`\n\tNumRows    *int       `db:\"num_rows\" json:\"num_rows,readonly\"`\n\n\t// File size in MB.\n\tSize *string `db:\"size\" json:\"size,readonly\"`\n\n\t// SHA256 hash.\n\tHash *string `db:\"hash\" json:\"hash,readonly\"`\n\n\t// Any errors that may have occured.\n\tError *string `db:\"error\" json:\"error,readonly\"`\n}\n\nfunc (e *Export) ByID(ctx context.Context, id int64) error {\n\treturn errors.Wrapf(zdb.Get(ctx, e,\n\t\t`/* Export.ByID */ select * from exports where export_id=$1 and site_id=$2`,\n\t\tid, MustGetSite(ctx).ID), \"Export.ByID %d\", id)\n}\n\n// Create a new export.\n//\n// Inserts a row in exports table and returns open file pointer to the\n// destination file.\nfunc (e *Export) Create(ctx context.Context, startFrom int64) (*os.File, error) {\n\tsite := MustGetSite(ctx)\n\n\te.SiteID = site.ID\n\te.CreatedAt = ztime.Now()\n\te.StartFromHitID = startFrom\n\te.Path = fmt.Sprintf(\"%s%sgoatcounter-export-%s-%s-%d.csv.gz\",\n\t\tos.TempDir(), string(os.PathSeparator), site.Code,\n\t\te.CreatedAt.Format(\"20060102T150405Z\"), startFrom)\n\n\tvar err error\n\te.ID, err = zdb.InsertID(ctx, \"export_id\",\n\t\t`insert into exports (site_id, path, created_at, start_from_hit_id) values (?, ?, ?, ?)`,\n\t\te.SiteID, e.Path, e.CreatedAt, e.StartFromHitID)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"Export.Create\")\n\t}\n\n\tfp, err := os.Create(e.Path)\n\treturn fp, errors.Wrap(err, \"Export.Create\")\n}\n\n// Export all data to a CSV file.\nfunc (e *Export) Run(ctx context.Context, fp *os.File, mailUser bool) {\n\tl := zlog.Module(\"export\").Field(\"id\", e.ID)\n\tl.Print(\"export started\")\n\n\tgzfp := gzip.NewWriter(fp)\n\tdefer fp.Close() // No need to error-check; just for safety.\n\tdefer gzfp.Close()\n\n\tc := csv.NewWriter(gzfp)\n\tc.Write([]string{ExportVersion + \"Path\", \"Title\", \"Event\", \"UserAgent\",\n\t\t\"Browser\", \"System\", \"Session\", \"Bot\", \"Referrer\", \"Referrer scheme\",\n\t\t\"Screen size\", \"Location\", \"FirstVisit\", \"Date\"})\n\n\tvar exportErr error\n\te.LastHitID = &e.StartFromHitID\n\tvar z int\n\te.NumRows = &z\n\tfor {\n\t\tvar (\n\t\t\thits ExportRows\n\t\t\tlast int64\n\t\t)\n\t\tlast, exportErr = hits.Export(ctx, 5000, *e.LastHitID)\n\t\te.LastHitID = &last\n\t\tif len(hits) == 0 {\n\t\t\tbreak\n\t\t}\n\t\tif exportErr != nil {\n\t\t\tbreak\n\t\t}\n\n\t\t*e.NumRows += len(hits)\n\n\t\tfor _, hit := range hits {\n\t\t\tc.Write([]string{hit.Path, hit.Title, hit.Event, hit.UserAgent,\n\t\t\t\thit.Browser, hit.System, hit.Session.String(), hit.Bot, hit.Ref,\n\t\t\t\thit.RefScheme, hit.Size, hit.Location, hit.FirstVisit,\n\t\t\t\thit.CreatedAt})\n\t\t}\n\n\t\tc.Flush()\n\t\texportErr = c.Error()\n\t\tif exportErr != nil {\n\t\t\tbreak\n\t\t}\n\n\t\t// Small amount of breathing space.\n\t\tif !Config(ctx).Dev {\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t}\n\t}\n\n\tif exportErr != nil {\n\t\tl.Field(\"export\", e).Error(exportErr)\n\n\t\terr := zdb.Exec(ctx,\n\t\t\t`update exports set error=$1 where export_id=$2`,\n\t\t\texportErr.Error(), e.ID)\n\t\tif err != nil {\n\t\t\tzlog.Error(err)\n\t\t}\n\n\t\t_ = gzfp.Close()\n\t\t_ = fp.Close()\n\t\t_ = os.Remove(fp.Name())\n\t\treturn\n\t}\n\n\terr := gzfp.Close()\n\tif err != nil {\n\t\tl.Error(err)\n\t\treturn\n\t}\n\terr = fp.Sync() // Ensure stat is correct.\n\tif err != nil {\n\t\tl.Error(err)\n\t\treturn\n\t}\n\n\tstat, err := fp.Stat()\n\tsize := \"0\"\n\tif err == nil {\n\t\tsize = fmt.Sprintf(\"%.1f\", float64(stat.Size())/1024/1024)\n\t\tif size == \"0.0\" {\n\t\t\tsize = \"0.1\"\n\t\t}\n\t}\n\te.Size = &size\n\n\terr = fp.Close()\n\tif err != nil {\n\t\tl.Error(err)\n\t\treturn\n\t}\n\n\thash, err := zcrypto.HashFile(e.Path)\n\te.Hash = &hash\n\tif err != nil {\n\t\tl.Error(err)\n\t\treturn\n\t}\n\n\tnow := ztime.Now()\n\terr = zdb.Exec(ctx, `update exports set\n\t\tfinished_at=$1, num_rows=$2, size=$3, hash=$4, last_hit_id=$5\n\t\twhere export_id=$6`,\n\t\t&now, e.NumRows, e.Size, e.Hash, e.LastHitID, e.ID)\n\tif err != nil {\n\t\tzlog.Error(err)\n\t}\n\n\tif mailUser {\n\t\tsite := MustGetSite(ctx)\n\t\tuser := GetUser(ctx)\n\t\terr = blackmail.Send(\"GoatCounter export ready\",\n\t\t\tblackmail.From(\"GoatCounter export\", Config(ctx).EmailFrom),\n\t\t\tblackmail.To(user.Email),\n\t\t\tblackmail.HeadersAutoreply(),\n\t\t\tblackmail.BodyMustText(TplEmailExportDone{ctx, *site, *user, *e}.Render))\n\t\tif err != nil {\n\t\t\tl.Error(err)\n\t\t}\n\t}\n}\n\nfunc (e Export) Exists() bool {\n\tif e.Path == \"\" {\n\t\treturn false\n\t}\n\n\t_, err := os.Stat(e.Path)\n\treturn err == nil\n}\n\ntype Exports []Export\n\nfunc (e *Exports) List(ctx context.Context) error {\n\treturn errors.Wrap(zdb.Select(ctx, e, `/* Exports.List */\n\t\tselect * from exports where site_id=$1 order by created_at desc limit 10`,\n\t\tMustGetSite(ctx).ID), \"Exports.List\")\n}\n\n// Import data from an export.\n//\n// The persist() callback will be called for every hit; you usually want to\n// collect a bunch of them and then persist them.\n//\n// After everything is done, this will be called once more with an empty hit and\n// final set to true, to persist the last batch.\nfunc Import(\n\tctx context.Context, fp io.Reader, replace, email bool,\n\tpersist func(Hit, bool),\n) (*time.Time, error) {\n\tsite := MustGetSite(ctx)\n\n\tl := zlog.Module(\"import\").Field(\"site\", site.ID).Field(\"replace\", replace)\n\tl.Print(\"import started\")\n\n\tc := csv.NewReader(fp)\n\theader, err := c.Read()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"goatcounter.Import\")\n\t}\n\n\tif len(header) == 0 || !strings.HasPrefix(header[0], ExportVersion) {\n\t\treturn nil, errors.Errorf(\n\t\t\t\"goatcounter.Import: wrong version of CSV database: %s (expected: %s)\",\n\t\t\theader[0][:1], ExportVersion)\n\t}\n\n\tif replace {\n\t\terr := site.DeleteAll(ctx)\n\t\tif err != nil {\n\t\t\tl.Error(err)\n\t\t\treturn nil, errors.Wrap(err, \"goatcounter.Import\")\n\t\t}\n\t}\n\n\tvar (\n\t\tsessions   = make(map[zint.Uint128]zint.Uint128)\n\t\tn          = 0\n\t\terrs       = errors.NewGroup(50)\n\t\tfirstHitAt = site.FirstHitAt\n\t)\n\tfor {\n\t\tline, err := c.Read()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif errs.Append(err) {\n\t\t\tcontinue\n\t\t}\n\n\t\tvar row ExportRow\n\t\terr = row.Read(line)\n\t\tif errs.Append(err) {\n\t\t\tcontinue\n\t\t}\n\n\t\thit, err := row.Hit(ctx, site.ID)\n\t\tif errs.Append(err) {\n\t\t\tcontinue\n\t\t}\n\t\tif hit.CreatedAt.Before(firstHitAt) {\n\t\t\tfirstHitAt = hit.CreatedAt\n\t\t}\n\n\t\t// Map session IDs to new session IDs.\n\t\ts, ok := sessions[row.Session]\n\t\tif !ok {\n\t\t\tsessions[row.Session] = Memstore.SessionID()\n\t\t\ts = sessions[row.Session]\n\t\t}\n\t\thit.Session = s\n\n\t\tpersist(hit, false)\n\t\tn++\n\t}\n\tpersist(Hit{}, true)\n\n\tl.Printf(\"imported %d rows\", n)\n\tif errs.Len() > 0 {\n\t\tl.Error(errs)\n\t}\n\n\tif email {\n\t\t// Send email after 10s delay to make sure the cron task has finished\n\t\t// updating all the rows.\n\t\ttime.Sleep(10 * time.Second)\n\t\terr = blackmail.Send(\"GoatCounter import ready\",\n\t\t\tblackmail.From(\"GoatCounter import\", Config(ctx).EmailFrom),\n\t\t\tblackmail.To(GetUser(ctx).Email),\n\t\t\tblackmail.BodyMustText(TplEmailImportDone{ctx, *site, n, errs}.Render))\n\t\tif err != nil {\n\t\t\tl.Error(err)\n\t\t}\n\t}\n\n\tif firstHitAt.Equal(site.FirstHitAt) {\n\t\treturn nil, nil\n\t}\n\treturn &firstHitAt, nil\n}\n\n// TODO: would be nice to have generic csv marshal/unmarshaler, so you can do:\n//\n//    Path string `csv:\"1\"`\n//\n// Or something, or perhaps even get by header:\n//\n//    Path string `csv:\"path\"`\n//\n// Looks like there's some existing stuff for that already:\n//\n// https://github.com/gocarina/gocsv\n// https://github.com/jszwec/csvutil\n\ntype ExportRow struct { // Fields in order!\n\tID     int64 `db:\"hit_id\"`\n\tSiteID int64 `db:\"site_id\"`\n\n\tPath  string `db:\"path\"`\n\tTitle string `db:\"title\"`\n\tEvent string `db:\"event\"`\n\n\tUserAgent string `db:\"ua\"`\n\tBrowser   string `db:\"browser\"`\n\tSystem    string `db:\"system\"`\n\n\tSession    zint.Uint128 `db:\"session\"`\n\tBot        string       `db:\"bot\"`\n\tRef        string       `db:\"ref\"`\n\tRefScheme  string       `db:\"ref_s\"`\n\tSize       string       `db:\"size\"`\n\tLocation   string       `db:\"loc\"`\n\tFirstVisit string       `db:\"first\"`\n\tCreatedAt  string       `db:\"created_at\"`\n}\n\nfunc (row *ExportRow) Read(line []string) error {\n\tconst offset = 2 // Ignore first n fields\n\n\tvalues := reflect.ValueOf(row).Elem()\n\tif len(line) != values.NumField()-offset {\n\t\treturn fmt.Errorf(\"wrong number of fields: %d (want: %d)\", len(line), values.NumField()-offset)\n\t}\n\n\tfor i := offset; i <= len(line)+1; i++ {\n\t\tf := values.Field(i)\n\t\tv := line[i-offset]\n\n\t\tswitch f.Kind() {\n\t\tdefault:\n\t\tcase reflect.Array:\n\t\t\tzi, _ := zint.ParseUint128(v, 16)\n\t\t\tf.Set(reflect.ValueOf(zi))\n\t\tcase reflect.Ptr:\n\t\t\tf.Set(reflect.New(f.Type().Elem()))\n\t\t\tf.Elem().SetString(v)\n\t\tcase reflect.String:\n\t\t\tf.SetString(v)\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (row ExportRow) Hit(ctx context.Context, siteID int64) (Hit, error) {\n\thit := Hit{\n\t\tSite:            siteID,\n\t\tPath:            row.Path,\n\t\tTitle:           row.Title,\n\t\tRef:             row.Ref,\n\t\tUserAgentHeader: row.UserAgent,\n\t\tLocation:        row.Location, // TODO: validate from list?\n\t}\n\n\tv := NewValidate(ctx)\n\tv.Required(\"path\", row.Path)\n\thit.Event = zbool.Bool(v.Boolean(\"event\", row.Event))\n\thit.Bot = int(v.Integer(\"bot\", row.Bot))\n\thit.FirstVisit = zbool.Bool(v.Boolean(\"firstVisit\", row.FirstVisit))\n\thit.CreatedAt = v.Date(\"createdAt\", row.CreatedAt, time.RFC3339)\n\n\tif row.RefScheme != \"\" {\n\t\tv.Include(\"refScheme\", row.RefScheme,\n\t\t\t[]string{*RefSchemeHTTP, *RefSchemeOther, *RefSchemeGenerated, *RefSchemeCampaign})\n\t\tif row.RefScheme != \"\" {\n\t\t\thit.RefScheme = &row.RefScheme\n\t\t}\n\t}\n\n\tif row.Size != \"\" {\n\t\terr := hit.Size.UnmarshalText([]byte(row.Size))\n\t\treturn hit, err\n\t}\n\n\treturn hit, v.ErrorOrNil()\n}\n\ntype ExportRows []ExportRow\n\n// Export all hits for a site, including bot requests.\nfunc (h *ExportRows) Export(ctx context.Context, limit, paginate int64) (int64, error) {\n\tif limit == 0 || limit > 5000 {\n\t\tlimit = 5000\n\t}\n\n\terr := zdb.Select(ctx, h, `\n\t\tselect\n\t\t\thits.hit_id,\n\t\t\thits.site_id,\n\n\t\t\tpaths.path,\n\t\t\tpaths.title,\n\t\t\tpaths.event,\n\n\t\t\tcoalesce(browsers.name || ' ' || browsers.version, '') as browser,\n\t\t\tcoalesce(systems.name  || ' ' || systems.version, '')  as system,\n\n\t\t\thits.session,\n\t\t\thits.bot,\n\t\t\tcoalesce(refs.ref, '')        as ref,\n\t\t\tcoalesce(refs.ref_scheme, '') as ref_s,\n\t\t\tcoalesce(sizes.size, '')      as size,\n\t\t\tcoalesce(hits.location, '')   as loc,\n\t\t\thits.first_visit              as first,\n\t\t\thits.created_at\n\t\tfrom hits\n\t\tjoin paths         using (path_id)\n\t\tleft join refs     using (ref_id)\n\t\tleft join sizes    using (size_id)\n\t\tleft join browsers using (browser_id)\n\t\tleft join systems  using (system_id)\n\t\twhere hits.site_id=$1 and hit_id>$2\n\t\torder by hit_id asc\n\t\tlimit $3`,\n\t\tMustGetSite(ctx).ID, paginate, limit)\n\n\tlast := paginate\n\tif len(*h) > 0 {\n\t\thh := *h\n\t\tlast = hh[len(hh)-1].ID\n\t}\n\n\treturn last, errors.Wrap(err, \"Hits.List\")\n}\n"
        },
        {
          "name": "export_test.go",
          "type": "blob",
          "size": 3.646484375,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"compress/gzip\"\n\t\"os\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"zgo.at/blackmail\"\n\t\"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/zjson\"\n\t\"zgo.at/zstd/ztest\"\n)\n\nfunc TestExport(t *testing.T) {\n\tblackmail.DefaultMailer = blackmail.NewMailer(blackmail.ConnectWriter)\n\tctx := gctest.DB(t)\n\n\tvar site goatcounter.Site\n\tsite.Defaults(ctx)\n\tsite.Code = \"gctest2\"\n\tsite.Settings.Collect.Set(goatcounter.CollectHits)\n\tctx = gctest.Site(ctx, t, &site, nil)\n\tctx = goatcounter.WithSite(ctx, &site)\n\n\tdump := func() string {\n\t\treturn zdb.DumpString(ctx, `\n\t\tselect\n\t\t\thits.site_id,\n\n\t\t\tpaths.path,\n\t\t\tpaths.title,\n\t\t\tpaths.event,\n\n\t\t\tbrowsers.name || ' ' || browsers.version as browser,\n\t\t\tsystems.name  || ' ' || systems.version  as system,\n\n\t\t\t-- hits.session,\n\t\t\thits.bot,\n\t\t\thits.ref,\n\t\t\thits.ref_scheme as ref_s,\n\t\t\thits.size,\n\t\t\thits.location as loc,\n\t\t\thits.first_visit as first,\n\t\t\thits.created_at\n\t\tfrom hits\n\t\tjoin paths       using (path_id)\n\t\tjoin browsers    using (browser_id)\n\t\tjoin systems     using (system_id)\n\t\torder by hit_id asc`)\n\t}\n\n\td1 := time.Date(2019, 6, 18, 0, 0, 0, 0, time.UTC)\n\td2 := time.Date(2019, 6, 19, 0, 0, 0, 0, time.UTC)\n\tgctest.StoreHits(ctx, t, false, []goatcounter.Hit{\n\t\t{Path: \"/asd\", CreatedAt: d1, UserAgentHeader: \"Mozilla/5.0 (X11; Linux x86_64; rv:80.0) Gecko/20100101 Firefox/80.0\", Title: \"Page asd\"},\n\t\t{Path: \"/zxc\", CreatedAt: d1, UserAgentHeader: \"Mozilla/5.0 (X11; Linux x86_64; rv:80.0) Gecko/20100101 Firefox/80.0\", Title: \"Page zxc\"},\n\t\t{Path: \"event\", CreatedAt: d2, Event: true},\n\t\t{Path: \"bot-event\", CreatedAt: d2, Event: true, Bot: 1},\n\t\t{\n\t\t\tPath:            \"/asd\",\n\t\t\tCreatedAt:       d2,\n\t\t\tUserAgentHeader: \"Mozilla/5.0 (X11; Linux x86_64; rv:79.0) Gecko/20100101 Firefox/79.0\",\n\t\t\tTitle:           \"Other\",\n\t\t\tLocation:        \"ID\",\n\t\t\tSize:            goatcounter.Floats{1024, 768, 1},\n\t\t\tRef:             \"https://example.com/p\",\n\t\t},\n\t}...)\n\n\tinitial := dump()\n\n\tvar export goatcounter.Export\n\tdefer func() {\n\t\tif export.Path != \"\" {\n\t\t\tos.Remove(export.Path)\n\t\t}\n\t}()\n\tt.Run(\"export\", func(t *testing.T) {\n\t\tfp, err := export.Create(ctx, 0)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tdefer fp.Close()\n\n\t\texport.Run(ctx, fp, false)\n\n\t\twant := strings.ReplaceAll(`{\n\t\t\t\"id\": 1,\n\t\t\t\"site_id\": 2,\n\t\t\t\"start_from_hit_id\": 0,\n\t\t\t\"last_hit_id\": 5,\n\t\t\t\"path\": \"%(ANY)goatcounter-export-gctest2-%(YEAR)%(MONTH)%(DAY)T%(ANY)Z-0.csv.gz\",\n\t\t\t\"created_at\": \"%(YEAR)-%(MONTH)-%(DAY)T%(ANY)Z\",\n\t\t\t\"finished_at\": null,\n\t\t\t\"num_rows\": 5,\n\t\t\t\"size\": \"0.1\",\n\t\t\t\"hash\": \"sha256-7fb7060000c3e8a1e05bc9f6156fc5571218a234b0a62b4ad6d67a529ad13707\",\n\t\t\t\"error\": null\n\t\t}`, \"\\t\", \"\")\n\t\tgot := string(zjson.MustMarshalIndent(export, \"\", \"\"))\n\t\tif d := ztest.DiffMatch(got, want); d != \"\" {\n\t\t\tt.Fatal(d)\n\t\t}\n\n\t\tvar exports goatcounter.Exports\n\t\terr = exports.List(ctx)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tif len(exports) != 1 {\n\t\t\tt.Fatal(\"exports.List()\")\n\t\t}\n\t})\n\n\tt.Run(\"import\", func(t *testing.T) {\n\t\tfp, err := os.Open(export.Path)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tdefer fp.Close()\n\n\t\tgzfp, err := gzip.NewReader(fp)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tdefer gzfp.Close()\n\n\t\tgoatcounter.Import(ctx, gzfp, true, false, func(hit goatcounter.Hit, final bool) {\n\t\t\tif !final {\n\t\t\t\tgoatcounter.Memstore.Append(hit)\n\t\t\t}\n\t\t})\n\n\t\t_, err = goatcounter.Memstore.Persist(ctx)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\tout := dump()\n\t\tif d := ztest.Diff(out, initial); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t})\n}\n"
        },
        {
          "name": "gctest",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen.go",
          "type": "blob",
          "size": 1.5126953125,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\n//go:build go_run_only\n\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/zstd/zio\"\n\t\"zgo.at/zstd/zruntime\"\n)\n\nfunc main() {\n\tif _, ok := os.LookupEnv(\"CI\"); ok {\n\t\treturn\n\t}\n\n\tfor _, f := range []func() error{kommentaar} {\n\t\terr := f()\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"%s: %s\\n\", zruntime.FuncName(f), err)\n\t\t}\n\t}\n}\n\n// TODO: would be better to just generate this on the first request, but it\n// takes about 10s now so that's a bit too slow :-/\nfunc kommentaar() error {\n\tif !zio.ChangedFrom(\"./handlers/api.go\", \"./tpl/api.json\") &&\n\t\t!zio.ChangedFrom(\"./kommentaar.conf\", \"./tpl/api.json\") {\n\t\treturn nil\n\t}\n\n\tcommands := map[string][]string{\n\t\t\"tpl/api.json\": {\"-config\", \"../kommentaar.conf\", \"-output\", \"openapi2-jsonindent\", \".\"},\n\t\t\"tpl/api.html\": {\"-config\", \"../kommentaar.conf\", \"-output\", \"html\", \".\"},\n\t}\n\n\tfor file, args := range commands {\n\t\tstderr := new(bytes.Buffer)\n\t\tcmd := exec.Command(\"kommentaar\", args...)\n\t\tcmd.Dir = \"./handlers\"\n\t\tcmd.Stderr = stderr\n\n\t\tfmt.Println(\"running\", cmd.Args)\n\t\tout, err := cmd.Output()\n\t\tif err != nil {\n\t\t\tout = stderr.Bytes()\n\t\t\treturn errors.Errorf(\"running kommentaar: %s\\n%s\", err, out)\n\t\t}\n\n\t\terr = os.WriteFile(file, out, 0666)\n\t\tif err != nil {\n\t\t\treturn errors.Errorf(\"kommentaar: %s\\n%s\", err)\n\t\t}\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.345703125,
          "content": "module zgo.at/goatcounter/v2\n\ngo 1.23.0\n\nrequire (\n\tcode.soquee.net/otp v0.0.4\n\tgithub.com/BurntSushi/toml v1.4.0\n\tgithub.com/PuerkitoBio/goquery v1.9.2\n\tgithub.com/bmatcuk/doublestar/v4 v4.6.1\n\tgithub.com/boombuler/barcode v1.0.2\n\tgithub.com/go-chi/chi/v5 v5.1.0\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/gorilla/websocket v1.5.3\n\tgithub.com/mattn/go-sqlite3 v1.14.22\n\tgithub.com/monoculum/formam/v3 v3.6.1-0.20221106124510-6a93f49ac1f8\n\tgithub.com/oschwald/geoip2-golang v1.4.0\n\tgithub.com/russross/blackfriday/v2 v2.1.0\n\tgithub.com/teamwork/reload v1.4.2\n\tgolang.org/x/crypto v0.26.0\n\tgolang.org/x/image v0.19.0\n\tgolang.org/x/net v0.28.0\n\tgolang.org/x/sync v0.8.0\n\tgolang.org/x/text v0.17.0\n\tzgo.at/bgrun v0.0.0-00010101000000-000000000000\n\tzgo.at/blackmail v0.0.0-20221021025740-b3fdfc32a1aa\n\tzgo.at/errors v1.3.0\n\tzgo.at/follow v0.0.0-20240522232612-673fb184d32f\n\tzgo.at/gadget v1.0.0\n\tzgo.at/guru v1.2.0\n\tzgo.at/isbot v1.0.0\n\tzgo.at/json v0.0.0-20221020004326-fe4f75bb278e\n\tzgo.at/termtext v1.5.0\n\tzgo.at/tz v0.0.0-20240819050900-3c7bf6122612\n\tzgo.at/z18n v0.0.0-20240522230155-4d5af439f8c4\n\tzgo.at/zcache v1.2.0\n\tzgo.at/zcache/v2 v2.1.0\n\tzgo.at/zdb v0.0.0-20240820041039-abefdffc704f\n\tzgo.at/zhttp v0.0.0-20240819012318-b761c83c740e\n\tzgo.at/zli v0.0.0-20240614180544-47534b1ce136\n\tzgo.at/zlog v0.0.0-20211017235224-dd4772ddf860\n\tzgo.at/zprof v0.0.0-20211217104121-c3c12596d8f0\n\tzgo.at/zstd v0.0.0-20240801180155-977f077a1a7f\n\tzgo.at/ztpl v0.0.0-20240522225602-574aca1079e7\n\tzgo.at/zvalidate v0.0.0-20221021025449-cb54fa8efade\n)\n\n// Need to finish this and put it in its own repo.\nreplace zgo.at/bgrun => ./bgrun\n\n// https://github.com/oschwald/maxminddb-golang/pull/75\nreplace github.com/oschwald/maxminddb-golang => github.com/arp242/maxminddb-golang v1.8.1-0.20221021031716-eb1bbbb3fc5d\n\n// https://github.com/oschwald/geoip2-golang/pull/68\nreplace github.com/oschwald/geoip2-golang => github.com/arp242/geoip2-golang v1.4.1-0.20220825052315-37df63691c60\n\nrequire (\n\tgithub.com/andybalholm/cascadia v1.3.2 // indirect\n\tgithub.com/fsnotify/fsnotify v1.7.0 // indirect\n\tgithub.com/lib/pq v1.10.9 // indirect\n\tgithub.com/oschwald/maxminddb-golang v1.10.0 // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgolang.org/x/mod v0.17.0 // indirect\n\tgolang.org/x/sys v0.23.0 // indirect\n\tgolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d // indirect\n\tzgo.at/runewidth v0.1.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 13.310546875,
          "content": "code.soquee.net/otp v0.0.4 h1:ANxYY0VMAkjx7LhCBOQo7yoYRCFbJWD+T1Q9cjZqP5I=\ncode.soquee.net/otp v0.0.4/go.mod h1:uRGadR4aJxaHpudNJxmCad1v8IBzdWGwnYXU9STqTqk=\nfilippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=\nfilippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=\ngithub.com/BurntSushi/toml v1.4.0 h1:kuoIxZQy2WRRk1pttg9asf+WVv6tWQuBNVmK8+nqPr0=\ngithub.com/BurntSushi/toml v1.4.0/go.mod h1:ukJfTF/6rtPPRCnwkur4qwRxa8vTRFBF0uk2lLoLwho=\ngithub.com/PuerkitoBio/goquery v1.9.2 h1:4/wZksC3KgkQw7SQgkKotmKljk0M6V8TUvA8Wb4yPeE=\ngithub.com/PuerkitoBio/goquery v1.9.2/go.mod h1:GHPCaP0ODyyxqcNoFGYlAprUFH81NuRPd0GX3Zu2Mvk=\ngithub.com/andybalholm/cascadia v1.3.2 h1:3Xi6Dw5lHF15JtdcmAHD3i1+T8plmv7BQ/nsViSLyss=\ngithub.com/andybalholm/cascadia v1.3.2/go.mod h1:7gtRlve5FxPPgIgX36uWBX58OdBsSS6lUvCFb+h7KvU=\ngithub.com/arp242/geoip2-golang v1.4.1-0.20220825052315-37df63691c60 h1:rjfH4qDB07JeSJY+kqcJ7AbIG/IxnASGDbnQU2Prtk4=\ngithub.com/arp242/geoip2-golang v1.4.1-0.20220825052315-37df63691c60/go.mod h1:R7bRvYjOeaoenAp9sKRS8GX5bJWcZ0laWO5+DauEktw=\ngithub.com/arp242/maxminddb-golang v1.8.1-0.20221021031716-eb1bbbb3fc5d h1:pYlDUZV4i+d3roLHQcouOUjqYKDvNwfnNWate7btDnw=\ngithub.com/arp242/maxminddb-golang v1.8.1-0.20221021031716-eb1bbbb3fc5d/go.mod h1:RG0BzzVtEvvYxYdJK8AeSiwXlmaDDMOh+eQjHwpK5LY=\ngithub.com/bmatcuk/doublestar/v4 v4.6.1 h1:FH9SifrbvJhnlQpztAx++wlkk70QBf0iBWDwNy7PA4I=\ngithub.com/bmatcuk/doublestar/v4 v4.6.1/go.mod h1:xBQ8jztBU6kakFMg+8WGxn0c6z1fTSPVIjEY1Wr7jzc=\ngithub.com/boombuler/barcode v1.0.2 h1:79yrbttoZrLGkL/oOI8hBrUKucwOL0oOjUgEguGMcJ4=\ngithub.com/boombuler/barcode v1.0.2/go.mod h1:paBWMcWSl3LHKBqUq+rly7CNSldXjb2rDl3JlRe0mD8=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=\ngithub.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=\ngithub.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=\ngithub.com/go-chi/chi/v5 v5.1.0 h1:acVI1TYaD+hhedDJ3r54HyA6sExp3HfXq7QWEEY/xMw=\ngithub.com/go-chi/chi/v5 v5.1.0/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\ngithub.com/go-sql-driver/mysql v1.8.1 h1:LedoTUt/eveggdHS9qUFC1EFSa8bU2+1pZjSRpvNJ1Y=\ngithub.com/go-sql-driver/mysql v1.8.1/go.mod h1:wEBSXgmK//2ZFJyE+qWnIsVGmvmEKlqwuVSjsCm7DZg=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=\ngithub.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/jackc/pgpassfile v1.0.0 h1:/6Hmqy13Ss2zCq62VdNG8tM1wchn8zjSGOBJ6icpsIM=\ngithub.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=\ngithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a h1:bbPeKD0xmW/Y25WS6cokEszi5g+S0QxI/d45PkRi7Nk=\ngithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a/go.mod h1:5TJZWKEWniPve33vlWYSoGYefn3gLQRzjfDlhSJ9ZKM=\ngithub.com/jackc/pgx/v5 v5.6.0 h1:SWJzexBzPL5jb0GEsrPMLIsi/3jOo7RHlzTjcAeDrPY=\ngithub.com/jackc/pgx/v5 v5.6.0/go.mod h1:DNZ/vlrUnhWCoFGxHAG8U2ljioxukquj7utPDgtQdTw=\ngithub.com/jackc/puddle/v2 v2.2.1 h1:RhxXJtFG022u4ibrCSMSiu5aOq1i77R3OHKNJj77OAk=\ngithub.com/jackc/puddle/v2 v2.2.1/go.mod h1:vriiEXHvEE654aYKXXjOvZM39qJ0q+azkZFrfEOc3H4=\ngithub.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=\ngithub.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/mattn/go-sqlite3 v1.14.22 h1:2gZY6PC6kBnID23Tichd1K+Z0oS6nE/XwU+Vz/5o4kU=\ngithub.com/mattn/go-sqlite3 v1.14.22/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=\ngithub.com/monoculum/formam/v3 v3.6.1-0.20221106124510-6a93f49ac1f8 h1:U84aMvgwMFHrzGw/QOy1TNxYdY5k1xIW8sQxzHRS/h8=\ngithub.com/monoculum/formam/v3 v3.6.1-0.20221106124510-6a93f49ac1f8/go.mod h1:kWmkNHidfOgIjrLj2pLt+Yq9qL5MGXSl6mpKY30QV/o=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/stretchr/testify v1.8.0 h1:pSgiaMZlXftHpm5L7V1+rVB+AZJydKsMxsQBIJw4PKk=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/teamwork/reload v1.4.2 h1:e3U0xXFmhzOSgWNBuyOMOvKS2Q34YNo5bp9Z1uOujYE=\ngithub.com/teamwork/reload v1.4.2/go.mod h1:tGCBzttv2CSfSjBTRlIdnQ4kopxrCXPGCTXeOO61SWg=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=\ngolang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=\ngolang.org/x/image v0.19.0 h1:D9FX4QWkLfkeqaC62SonffIIuYdOk/UE2XKUBgRIBIQ=\ngolang.org/x/image v0.19.0/go.mod h1:y0zrRqlQRWQ5PXaYCOMLTW2fpsxZ8Qh9I/ohnInJEys=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.17.0 h1:zY54UmvipHiNd+pm+m0x9KhZ9hl1/7QNMyxXbc6ICqA=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=\ngolang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=\ngolang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.4.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.23.0 h1:YfKFowiIMvtgl1UERQoTPPToxltDeZfbj4H7dVUCwmM=\ngolang.org/x/sys v0.23.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.7.0/go.mod h1:P32HKFT3hSsZrRxla30E9HqToFYAQPCMs/zFMBUFqPY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=\ngolang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d h1:vU5i/LfpvrRCpgM/VPfJLg5KjxD3E+hfT1SH+d9zLwg=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nzgo.at/blackmail v0.0.0-20221021025740-b3fdfc32a1aa h1:0Hk0Ckgqz1LDp2rbyopdn0y1zsKp3eIWZRc3YEevxB8=\nzgo.at/blackmail v0.0.0-20221021025740-b3fdfc32a1aa/go.mod h1:GJGG5S0K6R1SxIvJuT+vQPVYF3uusvljesKv/E3/7hs=\nzgo.at/errors v1.3.0 h1:MxTUFVyWi+7qQfz+oVm/O7/bLxxMFZQB4GxAbaF3f2k=\nzgo.at/errors v1.3.0/go.mod h1:POfgvh1LafF2NZJk6buGYCIhcHWuR/miB3nndyf3ozs=\nzgo.at/follow v0.0.0-20240522232612-673fb184d32f h1:i18eV/TqcF/vwAHQmtqeJ3AprzAek7lfNwStbdN13aA=\nzgo.at/follow v0.0.0-20240522232612-673fb184d32f/go.mod h1:4OJUid1+SqN/MT4BjPQj+A25nwouKPuP5/1O0kli4rg=\nzgo.at/gadget v1.0.0 h1:aY+h6cRSY1KgjuNWb1fFzT8KWAGllhuYEcf18f1adWw=\nzgo.at/gadget v1.0.0/go.mod h1:1x0AKFOjKScVTzJh+V69Ku6hTwvEM56MlnKOtrjMwSo=\nzgo.at/guru v1.2.0 h1:qiU8pEiekni+XtzXFUxu/Qep9snC7wxhxNuGcybWyQE=\nzgo.at/guru v1.2.0/go.mod h1:eltnfk6QwmM7ic3OLzmGMjEChP2iLuYXERyliREiA00=\nzgo.at/isbot v1.0.0 h1:wM+40WO2LudR5352eCAQlHQdWsdNVpngB8Oe1qlTpdM=\nzgo.at/isbot v1.0.0/go.mod h1:/w+LTWbHsV7G5fT41VnwM0kTdk1H/prynfMqaxcBWjA=\nzgo.at/json v0.0.0-20221020004326-fe4f75bb278e h1:rEyfeeAnUDOYdH9PVHe5EZ8seo1V1UdbIAMmusS1LjQ=\nzgo.at/json v0.0.0-20221020004326-fe4f75bb278e/go.mod h1:yvrHxciuKpi1XgJoCIfg/EDybcgkcXvjV2tCVp8O2ks=\nzgo.at/runewidth v0.1.0 h1:ED4PzJpYJlZMDEkoz+iPKjb5NrwbKnWPXDMJlNlfk9g=\nzgo.at/runewidth v0.1.0/go.mod h1:Ugl6FGPF5Ib/NRu2UAV2wVthEgYfEz51Bu/uyNbWZSw=\nzgo.at/termtext v1.5.0 h1:4p9GVUDYUR8oWvpxOZsO5ZrNSkA99bp8gXNKxKj+Kl0=\nzgo.at/termtext v1.5.0/go.mod h1:AcdAAiydkqSFadljJaEj9jv7bpyJxfQqGtPWyZCLenQ=\nzgo.at/tz v0.0.0-20240819050900-3c7bf6122612 h1:cg4VMBRZ8qFJ9n/HqfQmZmtOIRfrlb6Q43S2M34yx8c=\nzgo.at/tz v0.0.0-20240819050900-3c7bf6122612/go.mod h1:UMT8M059Fm0DBlbdu68P5oBkhKeAZDAxTqHcsJ+Qd80=\nzgo.at/z18n v0.0.0-20240522230155-4d5af439f8c4 h1:H69hFT4lTSyFj6giWaeFJJslobuYQwpfn6X/T84x7wE=\nzgo.at/z18n v0.0.0-20240522230155-4d5af439f8c4/go.mod h1:hyMzuQ1BFVoFEMTaWr9qj9tWMUpJM6s4f0OFbijhkeA=\nzgo.at/zcache v1.2.0 h1:++0dNWOrmUBa10WSja+eHx5bEO2PzZLRY6MJlBD47yk=\nzgo.at/zcache v1.2.0/go.mod h1:xWQo2ha/bamTmx8CbfrZl9Nf8AoT5uNh2hWfbQi8TiE=\nzgo.at/zcache/v2 v2.1.0 h1:USo+ubK+R4vtjw4viGzTe/zjXyPw6R7SK/RL3epBBxs=\nzgo.at/zcache/v2 v2.1.0/go.mod h1:gyCeoLVo01QjDZynjime8xUGHHMbsLiPyUTBpDGd4Gk=\nzgo.at/zdb v0.0.0-20240820041039-abefdffc704f h1:oMMrRuJTMEJhIQfvv558sasUQc6FMj+ehqgSeHLwdDo=\nzgo.at/zdb v0.0.0-20240820041039-abefdffc704f/go.mod h1:hXIbV/v/ENSl5CfzICL/jpTjYb50k/gKi2kN8UeuZcY=\nzgo.at/zhttp v0.0.0-20240819012318-b761c83c740e h1:XkppPemmGbgCauiZOCUpWtvPor9yiB9611AsFUoVmho=\nzgo.at/zhttp v0.0.0-20240819012318-b761c83c740e/go.mod h1:OEB7qL85qu5BBFfdmep9TTnUUb25j3aqEYYuUnmFqX4=\nzgo.at/zli v0.0.0-20240614180544-47534b1ce136 h1:Q0j5M5+5YGNaECQmKOcznyDYX3jZUCVN+c7GKUkoV8o=\nzgo.at/zli v0.0.0-20240614180544-47534b1ce136/go.mod h1:0jjx+AGEkWOOQ0NtzbMnpko+H2G+aTg8mfCKqoc/BuA=\nzgo.at/zlog v0.0.0-20211017235224-dd4772ddf860 h1:7n74jp98CwBdqGCqJoVv2+XygJ3yD43GPUivnj/RPwo=\nzgo.at/zlog v0.0.0-20211017235224-dd4772ddf860/go.mod h1:2Pa5cqKA/6S9FrMFeNowtHPd7JEzqwooLXcxU6Wk7Hc=\nzgo.at/zprof v0.0.0-20211217104121-c3c12596d8f0 h1:nUshmGDnI3+N1OeU265xaqR6weTN2xgrqls8nrkGzbA=\nzgo.at/zprof v0.0.0-20211217104121-c3c12596d8f0/go.mod h1:JqClLxeT9Uui3apqyN3U6KryFanocqM7E3X4Gle2FAU=\nzgo.at/zstd v0.0.0-20240801180155-977f077a1a7f h1:78QC73Ks3k2sfNG63srA4CUG+Qr6Tp3xdJmGcllFGc4=\nzgo.at/zstd v0.0.0-20240801180155-977f077a1a7f/go.mod h1:o/Q8+EtSahHnfkbB3t8wXE0FnoDTmJ0sBDlzezv9XeM=\nzgo.at/ztpl v0.0.0-20240522225602-574aca1079e7 h1:opHnftGXVqUubaE2RRZ2InOoeMFRhdOH6PiTDBqqvNs=\nzgo.at/ztpl v0.0.0-20240522225602-574aca1079e7/go.mod h1:p1QiGvNPY5YJ3DAXzZtgAga+SG+19Ycr+TLzvGo2xZo=\nzgo.at/zvalidate v0.0.0-20221021025449-cb54fa8efade h1:eT6K9Iv+U3IPAmJVDCoRMbkbXL4NVeB0HaFob5J/hE0=\nzgo.at/zvalidate v0.0.0-20221021025449-cb54fa8efade/go.mod h1:E0pwS0q26cQtyWOOyzc7hEIMQgmtRC0xDIpEnrYct/8=\n"
        },
        {
          "name": "handlers",
          "type": "tree",
          "content": null
        },
        {
          "name": "helper.go",
          "type": "blob",
          "size": 5.2939453125,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\n//go:generate go run gen.go\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"embed\"\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\n\t\"github.com/google/uuid\"\n\t\"github.com/mattn/go-sqlite3\"\n\t\"zgo.at/z18n\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/zcrypto\"\n\t\"zgo.at/zstd/zint\"\n\t\"zgo.at/zvalidate\"\n)\n\n// DB contains all files in db/*\n//\n//go:embed db/schema.gotxt\n//go:embed db/languages.sql\n//go:embed db/migrate/*.sql\n//go:embed db/migrate/*.gotxt\n//go:embed db/query/*\nvar DB embed.FS\n\n// Static contains all the static files to serve.\n//\n//go:embed public/*\nvar Static embed.FS\n\n// Templates contains all templates.\n//\n//go:embed tpl/*\nvar Templates embed.FS\n\n// GeoDB contains the GeoIP countries database.\n//\n//go:embed pack/GeoLite2-Country.mmdb.gz\nvar GeoDB []byte\n\n// State column values.\nconst (\n\tStateActive  = \"a\"\n\tStateRequest = \"r\"\n\tStateDeleted = \"d\"\n)\n\nvar States = []string{StateActive, StateRequest, StateDeleted}\n\nvar SQLiteHook = func(c *sqlite3.SQLiteConn) error {\n\treturn c.RegisterFunc(\"percent_diff\", func(start, final int) float64 {\n\t\tif start == 0 {\n\t\t\treturn math.Inf(0)\n\t\t}\n\t\treturn (float64(final - start)) / float64(start) * 100.0\n\t}, true)\n}\n\n// TODO: Move to zdb\nfunc Interval(ctx context.Context, days int) string {\n\tif zdb.SQLDialect(ctx) == zdb.DialectPostgreSQL {\n\t\treturn fmt.Sprintf(\" now() - interval '%d days' \", days)\n\t}\n\treturn fmt.Sprintf(\" datetime(datetime(), '-%d days') \", days)\n}\n\nconst numChars = 12\n\n// Compress all the data in to 12 chunks.\nfunc ChunkStat(stats []HitListStat) (int, []int) {\n\tvar (\n\t\tchunked   = make([]int, numChars)\n\t\tchunkSize = len(stats) * 24 / numChars\n\t\tmax       = 0\n\t\tchunk     = 0\n\t\ti         = 0\n\t\tn         = 0\n\t)\n\tfor _, stat := range stats {\n\t\tfor _, h := range stat.Hourly {\n\t\t\ti++\n\t\t\tchunk += h\n\t\t\tif i == chunkSize {\n\t\t\t\tchunked[n] = chunk\n\t\t\t\tif chunk > max {\n\t\t\t\t\tmax = chunk\n\t\t\t\t}\n\t\t\t\tn++\n\t\t\t\tchunk, i = 0, 0\n\t\t\t}\n\t\t}\n\t}\n\n\treturn max, chunked\n}\n\nfunc NewBufferKey(ctx context.Context) (string, error) {\n\tsecret := zcrypto.Secret256()\n\terr := zdb.TX(ctx, func(ctx context.Context) error {\n\t\terr := zdb.Exec(ctx, `delete from store where key='buffer-secret'`, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\terr = zdb.Exec(ctx, `insert into store (key, value) values ('buffer-secret', :s)`, map[string]any{\"s\": secret})\n\t\treturn err\n\t})\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"NewBufferKey: %w\", err)\n\t}\n\treturn secret, nil\n}\n\nfunc LoadBufferKey(ctx context.Context) ([]byte, error) {\n\tvar key []byte\n\terr := zdb.Get(ctx, &key, `select value from store where key='buffer-secret'`)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"LoadBufferKey: %w\", err)\n\t}\n\treturn key, nil\n}\n\n// UUID created a new UUID v4.\nfunc UUID() zint.Uint128 {\n\tu, err := uuid.NewRandom()\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"uuid.NewRandom: %s\", err))\n\t}\n\ti, err := zint.NewUint128(u[:])\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn i\n}\n\nfunc splitIntStr(ident []string) ([]int64, []string) {\n\tvar (\n\t\tids  []int64\n\t\tstrs []string\n\t)\n\tfor _, i := range ident {\n\t\tid, err := strconv.ParseInt(i, 10, 64)\n\t\tif err == nil {\n\t\t\tids = append(ids, id)\n\t\t} else {\n\t\t\tstrs = append(strs, i)\n\t\t}\n\t}\n\treturn ids, strs\n}\n\nfunc NewValidate(ctx context.Context) zvalidate.Validator {\n\tv := zvalidate.New()\n\tv.Messages(zvalidate.Messages{\n\t\tRequired:    func() string { return z18n.T(ctx, \"validate/required|must be set\") },\n\t\tDomain:      func() string { return z18n.T(ctx, \"validate/domain|must be a valid domain\") },\n\t\tHostname:    func() string { return z18n.T(ctx, \"validate/hostname|must be a valid hostname\") },\n\t\tURL:         func() string { return z18n.T(ctx, \"validate/url|must be a valid url\") },\n\t\tEmail:       func() string { return z18n.T(ctx, \"validate/email|must be a valid email address\") },\n\t\tIPv4:        func() string { return z18n.T(ctx, \"validate/ipv4|must be a valid IPv4 address\") },\n\t\tIP:          func() string { return z18n.T(ctx, \"validate/ip|must be a valid IPv4 or IPv6 address\") },\n\t\tHexColor:    func() string { return z18n.T(ctx, \"validate/color|must be a valid color code\") },\n\t\tLenLonger:   func() string { return z18n.T(ctx, \"validate/len-longer|must be longer than %d characters\") },\n\t\tLenShorter:  func() string { return z18n.T(ctx, \"validate/len-shorter|must be shorter than %d characters\") },\n\t\tExclude:     func() string { return z18n.T(ctx, \"validate/exclude|cannot be ‘%s’\") },\n\t\tInclude:     func() string { return z18n.T(ctx, \"validate/include|must be one of ‘%s’\") },\n\t\tInteger:     func() string { return z18n.T(ctx, \"validate/int|must be a whole number\") },\n\t\tBool:        func() string { return z18n.T(ctx, \"validate/bool|must be a boolean\") },\n\t\tDate:        func() string { return z18n.T(ctx, \"validate/date|must be a date as ‘%s’\") },\n\t\tPhone:       func() string { return z18n.T(ctx, \"validate/phone|must be a valid phone number\") },\n\t\tRangeHigher: func() string { return z18n.T(ctx, \"validate/range-higher|must be %d or higher\") },\n\t\tRangeLower:  func() string { return z18n.T(ctx, \"validate/range-lower|must be %d or lower\") },\n\t\tUTF8:        func() string { return z18n.T(ctx, \"validate/utf8|must be UTF-8\") },\n\t\tContains:    func() string { return z18n.T(ctx, \"validate/contains|cannot contain the characters %s\") },\n\t})\n\treturn v\n}\n"
        },
        {
          "name": "helper_cgo.go",
          "type": "blob",
          "size": 0.38671875,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\n//go:build cgo\n\npackage goatcounter\n\nimport \"github.com/mattn/go-sqlite3\"\n\nfunc init() {\n\tsqlite3.SQLiteTimestampFormats = []string{\"2006-01-02 15:04:05\", \"2006-01-02\"}\n}\n"
        },
        {
          "name": "helper_test.go",
          "type": "blob",
          "size": 0.9716796875,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"testing/fstest\"\n\n\t\"zgo.at/zdb\"\n)\n\nfunc TestEmbed(t *testing.T) {\n\terr := fstest.TestFS(DB, \"db/schema.gotxt\", \"db/migrate/2022-10-17-1-campaigns.gotxt\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\terr = fstest.TestFS(DB, \"db/goatcounter.sqlite3\", \"db/migrate/gomig/gomig.go\")\n\tif err == nil {\n\t\tt.Fatal(\"db/goatcounter.sqlite3 in embeded files\")\n\t}\n}\n\nfunc TestSQLiteJSON(t *testing.T) {\n\tzdb.RunTest(t, func(t *testing.T, ctx context.Context) {\n\t\tif zdb.SQLDialect(ctx) != zdb.DialectSQLite {\n\t\t\treturn\n\t\t}\n\n\t\tvar out string\n\t\terr := zdb.Get(ctx, &out, `select json('[\"a\"  ,  \"b\"]')`)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\twant := `[\"a\",\"b\"]`\n\t\tif out != want {\n\t\t\tt.Errorf(\"\\ngot:  %q\\nwant: %q\", out, want)\n\t\t}\n\t})\n}\n"
        },
        {
          "name": "hit.go",
          "type": "blob",
          "size": 11.0126953125,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/url\"\n\t\"slices\"\n\t\"strings\"\n\t\"time\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/zbool\"\n\t\"zgo.at/zstd/zint\"\n\t\"zgo.at/zstd/ztime\"\n)\n\ntype Hit struct {\n\tID         int64        `db:\"hit_id\" json:\"-\"`\n\tSite       int64        `db:\"site_id\" json:\"-\"`\n\tPathID     int64        `db:\"path_id\" json:\"-\"`\n\tRefID      int64        `db:\"ref_id\" json:\"-\"`\n\tSizeID     *int64       `db:\"size_id\" json:\"-\"`\n\tBrowserID  int64        `db:\"browser_id\" json:\"-\"`\n\tSystemID   int64        `db:\"system_id\" json:\"-\"`\n\tCampaignID *int64       `db:\"campaign\" json:\"-\"`\n\tSession    zint.Uint128 `db:\"session\" json:\"-\"`\n\n\tPath  string     `db:\"-\" json:\"p,omitempty\"`\n\tTitle string     `db:\"-\" json:\"t,omitempty\"`\n\tRef   string     `db:\"-\" json:\"r,omitempty\"`\n\tEvent zbool.Bool `db:\"-\" json:\"e,omitempty\"`\n\tSize  Floats     `db:\"-\" json:\"s,omitempty\"`\n\tQuery string     `db:\"-\" json:\"q,omitempty\"`\n\tBot   int        `db:\"bot\" json:\"b,omitempty\"`\n\n\tRefScheme       *string    `db:\"ref_scheme\" json:\"-\"`\n\tUserAgentHeader string     `db:\"-\" json:\"-\"`\n\tLocation        string     `db:\"location\" json:\"-\"`\n\tLanguage        *string    `db:\"language\" json:\"-\"`\n\tFirstVisit      zbool.Bool `db:\"first_visit\" json:\"-\"`\n\tCreatedAt       time.Time  `db:\"created_at\" json:\"-\"`\n\n\tRefURL *url.URL `db:\"-\" json:\"-\"`   // Parsed Ref\n\tRandom string   `db:\"-\" json:\"rnd\"` // Browser cache buster, as they don't always listen to Cache-Control\n\n\t// Some values we need to pass from the HTTP handler to memstore\n\tRemoteAddr    string `db:\"-\" json:\"-\"`\n\tUserSessionID string `db:\"-\" json:\"-\"`\n\n\tNoStore   bool `db:\"-\" json:\"-\"` // Don't store in hits (still store in stats).\n\tnoProcess bool `db:\"-\" json:\"-\"` // Don't process in memstore; for merging paths.\n}\n\nfunc (h *Hit) Ignore() bool {\n\t// kproxy.com; not easy to get the original path, so just ignore it.\n\tif strings.HasPrefix(h.Path, \"/servlet/redirect.srv/\") {\n\t\treturn true\n\t}\n\t// Almost certainly some broken HTML or whatnot.\n\tif strings.Contains(h.Path, \"<html>\") || strings.Contains(h.Path, \"<HTML>\") {\n\t\treturn true\n\t}\n\t// Don't record favicon from logfiles.\n\tif h.Path == \"/favicon.ico\" {\n\t\treturn true\n\t}\n\n\treturn false\n}\n\nfunc (h *Hit) cleanPath(ctx context.Context) {\n\th.Path = strings.TrimSpace(h.Path)\n\tif h.Event {\n\t\th.Path = strings.TrimLeft(h.Path, \"/\")\n\t\treturn\n\t}\n\n\tif h.Path == \"\" { // Don't fill empty path to \"/\"\n\t\treturn\n\t}\n\n\th.Path = \"/\" + strings.Trim(h.Path, \"/\")\n\n\t// Normalize the path when accessed from e.g. offline storage or internet\n\t// archive.\n\t{\n\t\t// Some offline reader thing.\n\t\t// /storage/emulated/[..]/Curl_to_shell_isn_t_so_bad2019-11-09-11-07-58/curl-to-sh.html\n\t\tif strings.HasPrefix(h.Path, \"/storage/emulated/0/Android/data/jonas.tool.saveForOffline/files/\") {\n\t\t\th.Path = h.Path[65:]\n\t\t\tif s := strings.IndexRune(h.Path, '/'); s > -1 {\n\t\t\t\th.Path = h.Path[s:]\n\t\t\t}\n\t\t}\n\n\t\t// Internet archive.\n\t\t// /web/20200104233523/https://www.arp242.net/tmux.html\n\t\tif strings.HasPrefix(h.Path, \"/web/20\") {\n\t\t\tu, err := url.Parse(h.Path[20:])\n\t\t\tif err == nil {\n\t\t\t\th.Path = u.Path\n\t\t\t\tif h.Path == \"\" {\n\t\t\t\t\th.Path = \"/\"\n\t\t\t\t}\n\t\t\t\tif q := u.Query().Encode(); q != \"\" {\n\t\t\t\t\th.Path += \"?\" + q\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove various tracking query parameters.\n\t{\n\t\th.Path = strings.TrimRight(h.Path, \"?&\")\n\t\tif !strings.Contains(h.Path, \"?\") { // No query parameters.\n\t\t\treturn\n\t\t}\n\n\t\tu, err := url.Parse(h.Path)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tq := u.Query()\n\n\t\tq.Del(\"fbclid\") // Magic undocumented Facebook tracking parameter.\n\t\tq.Del(\"ref\")    // ProductHunt and a few others.\n\t\tq.Del(\"mc_cid\") // MailChimp\n\t\tq.Del(\"mc_eid\")\n\t\tfor k := range q { // Google tracking parameters.\n\t\t\tif strings.HasPrefix(k, \"utm_\") {\n\t\t\t\tq.Del(k)\n\t\t\t}\n\t\t}\n\t\tq.Del(\"gclid\") // AdWords click ID\n\n\t\t// Some WeChat tracking thing; see e.g:\n\t\t// https://translate.google.com/translate?sl=auto&tl=en&u=https%3A%2F%2Fsheshui.me%2Fblogs%2Fexplain-wechat-nsukey-url\n\t\t// https://translate.google.com/translate?sl=auto&tl=en&u=https%3A%2F%2Fwww.v2ex.com%2Ft%2F312163\n\t\tq.Del(\"nsukey\")\n\t\tq.Del(\"isappinstalled\")\n\t\tif q.Get(\"from\") == \"singlemessage\" || q.Get(\"from\") == \"groupmessage\" {\n\t\t\tq.Del(\"from\")\n\t\t}\n\n\t\t// Cloudflare\n\t\tq.Del(\"__cf_chl_captcha_tk__\")\n\t\tq.Del(\"__cf_chl_jschl_tk__\")\n\n\t\t// Added by Weibo.cn (a sort of Chinese Twitter), with a random ID:\n\t\t//   /?continueFlag=4020a77be9019cf14fefc373267aa46e\n\t\t//   /?continueFlag=c397418f4346f293408b311b1bc819d4\n\t\t// Presumably a tracking thing?\n\t\tq.Del(\"continueFlag\")\n\n\t\tq.Del(\"_x_tr_sl\") // Google translate\n\t\tq.Del(\"_x_tr_hl\")\n\t\tq.Del(\"_x_tr_pto\")\n\t\tif q.Has(\"_x_tr_tl\") { // Rename the destination language.\n\t\t\tq.Set(\"translate-to\", q.Get(\"_x_tr_tl\"))\n\t\t\tq.Del(\"_x_tr_tl\")\n\t\t}\n\n\t\tu.RawQuery = q.Encode()\n\t\th.Path = \"/\" + strings.Trim(u.String(), \"/\")\n\t}\n}\n\n// Defaults sets fields to default values, unless they're already set.\nfunc (h *Hit) Defaults(ctx context.Context, initial bool) error {\n\tsite := MustGetSite(ctx)\n\th.Site = site.ID\n\n\tif h.CreatedAt.IsZero() {\n\t\th.CreatedAt = ztime.Now()\n\t}\n\n\tif h.Event {\n\t\th.Path = strings.TrimLeft(h.Path, \"/\")\n\t\t// In case people send \"/\" as the event path.\n\t\tif h.Path == \"\" {\n\t\t\th.Path = \"(no event name)\"\n\t\t}\n\t} else {\n\t\th.cleanPath(ctx)\n\t}\n\n\t// Set campaign.\n\tif !h.Event && h.Query != \"\" {\n\t\tif h.Query[0] != '?' {\n\t\t\th.Query = \"?\" + h.Query\n\t\t}\n\t\tu, err := url.Parse(h.Query)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"Hit.Defaults\")\n\t\t}\n\t\tq := u.Query()\n\n\t\t// Get referral from query\n\t\tfor _, c := range []string{\"utm_source\", \"ref\", \"src\", \"source\"} {\n\t\t\tv := strings.TrimSpace(q.Get(c))\n\t\t\tif v == \"\" {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\th.Ref = v\n\t\t\th.RefURL = nil\n\t\t\th.RefScheme = RefSchemeCampaign\n\t\t\tbreak\n\t\t}\n\n\t\t// Get campaign.\n\t\tfor _, c := range []string{\"utm_campaign\", \"campaign\"} {\n\t\t\tv := strings.TrimSpace(q.Get(c))\n\t\t\tif v == \"\" {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tc := Campaign{Name: v}\n\t\t\terr := c.ByName(ctx, c.Name)\n\t\t\tif err != nil && !zdb.ErrNoRows(err) {\n\t\t\t\treturn errors.Wrap(err, \"Hit.Defaults\")\n\t\t\t}\n\n\t\t\tif zdb.ErrNoRows(err) {\n\t\t\t\terr := c.Insert(ctx)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn errors.Wrap(err, \"Hit.Defaults\")\n\t\t\t\t}\n\t\t\t}\n\t\t\th.CampaignID = &c.ID\n\t\t\th.RefScheme = RefSchemeCampaign\n\t\t}\n\t}\n\n\tif h.RefScheme == nil && h.Ref != \"\" && h.RefURL != nil {\n\t\tif h.RefURL.Scheme == \"http\" || h.RefURL.Scheme == \"https\" {\n\t\t\th.RefScheme = RefSchemeHTTP\n\t\t} else {\n\t\t\th.RefScheme = RefSchemeOther\n\t\t}\n\n\t\tvar generated bool\n\t\th.Ref, generated = cleanRefURL(h.Ref, h.RefURL)\n\t\tif generated {\n\t\t\th.RefScheme = RefSchemeGenerated\n\t\t}\n\t}\n\th.Ref = strings.TrimRight(h.Ref, \"/\")\n\n\tif initial {\n\t\treturn nil\n\t}\n\n\t// Get or insert path.\n\tpath := Path{Path: h.Path, Title: h.Title, Event: h.Event}\n\terr := path.GetOrInsert(ctx)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Hit.Defaults\")\n\t}\n\th.PathID = path.ID\n\n\t// Get or insert ref.\n\tref := Ref{Ref: h.Ref, RefScheme: h.RefScheme}\n\terr = ref.GetOrInsert(ctx)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Hit.Defaults\")\n\t}\n\th.RefID = ref.ID\n\n\t// Get or insert size.\n\tif site.Settings.Collect.Has(CollectScreenSize) {\n\t\tvar size Size\n\t\terr = size.GetOrInsert(ctx, h.Size)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"Hit.Defaults\")\n\t\t}\n\t\th.SizeID = &size.ID\n\t}\n\n\t// Get or insert browser and system.\n\tif site.Settings.Collect.Has(CollectUserAgent) {\n\t\tua := UserAgent{UserAgent: h.UserAgentHeader}\n\t\terr = ua.GetOrInsert(ctx)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"Hit.Defaults\")\n\t\t}\n\t\th.BrowserID = ua.BrowserID\n\t\th.SystemID = ua.SystemID\n\t}\n\n\treturn nil\n}\n\n// Validate the object.\nfunc (h *Hit) Validate(ctx context.Context, initial bool) error {\n\tv := NewValidate(ctx)\n\n\tv.Required(\"site\", h.Site)\n\t//v.Required(\"session\", h.Session)\n\tv.Required(\"created_at\", h.CreatedAt)\n\tv.UTF8(\"ref\", h.Ref)\n\tv.Len(\"ref\", h.Ref, 0, 2048)\n\n\t// Small margin as client's clocks may not be 100% accurate.\n\tif h.CreatedAt.After(ztime.Now().Add(5 * time.Second)) {\n\t\tv.Append(\"created_at\", \"in the future\")\n\t}\n\n\tif initial {\n\t\tv.Required(\"path\", h.Path)\n\t\tv.UTF8(\"path\", h.Path)\n\t\tv.UTF8(\"title\", h.Title)\n\t\tv.UTF8(\"user_agent_header\", h.UserAgentHeader)\n\t\tv.Len(\"path\", h.Path, 1, 2048)\n\t\tv.Len(\"title\", h.Title, 0, 1024)\n\t\tv.Len(\"user_agent_header\", h.UserAgentHeader, 0, 512)\n\t} else {\n\t\tv.Required(\"path_id\", h.PathID)\n\n\t\tif MustGetSite(ctx).Settings.Collect.Has(CollectUserAgent) {\n\t\t\tv.Required(\"browser_id\", h.BrowserID)\n\t\t\tv.Required(\"system_id\", h.SystemID)\n\t\t}\n\t}\n\n\treturn v.ErrorOrNil()\n}\n\ntype Hits []Hit\n\n// TestList lists all hits, for all sites, with browser_id, system_id, and paths\n// set.\n//\n// This is intended for tests.\nfunc (h *Hits) TestList(ctx context.Context, siteOnly bool) error {\n\tvar hh []struct {\n\t\tHit\n\t\tB    int64      `db:\"browser_id\"`\n\t\tS    int64      `db:\"system_id\"`\n\t\tP    string     `db:\"path\"`\n\t\tT    string     `db:\"title\"`\n\t\tE    zbool.Bool `db:\"event\"`\n\t\tR    string     `db:\"ref\"`\n\t\tSize Floats     `db:\"size\"`\n\t}\n\n\terr := zdb.Select(ctx, &hh, `/* Hits.TestList */\n\t\tselect\n\t\t\thits.*,\n\t\t\tbrowser_id,\n\t\t\tsystem_id,\n\t\t\tpaths.path,\n\t\t\tpaths.title,\n\t\t\tpaths.event,\n\t\t\trefs.ref,\n\t\t\tsizes.size\n\t\tfrom hits\n\t\tjoin paths using (path_id)\n\t\tleft join refs  using (ref_id)\n\t\tleft join sizes using (size_id)\n\t\t{{:site_only where hits.site_id = :site}}\n\t\torder by hit_id asc`,\n\t\tmap[string]any{\n\t\t\t\"site\":      MustGetSite(ctx).ID,\n\t\t\t\"site_only\": siteOnly,\n\t\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Hits.TestList\")\n\t}\n\n\tfor _, x := range hh {\n\t\tx.Hit.BrowserID = x.B\n\t\tx.Hit.SystemID = x.S\n\t\tx.Hit.Path = x.P\n\t\tx.Hit.Title = x.T\n\t\tx.Hit.Event = x.E\n\t\tx.Hit.Ref = x.R\n\t\tx.Hit.Size = x.Size\n\n\t\t*h = append(*h, x.Hit)\n\t}\n\treturn nil\n}\n\n// Purge the given paths.\nfunc (h *Hits) Purge(ctx context.Context, pathIDs []int64) error {\n\tquery := `/* Hits.Purge */\n\t\tdelete from %s where site_id=? and path_id in (?)`\n\n\treturn zdb.TX(ctx, func(ctx context.Context) error {\n\t\tsite := MustGetSite(ctx).ID\n\n\t\tfor _, t := range append(statTables, \"hit_counts\", \"ref_counts\", \"hits\", \"paths\") {\n\t\t\terr := zdb.Exec(ctx, fmt.Sprintf(query, t), site, pathIDs)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrapf(err, \"Hits.Purge %s\", t)\n\t\t\t}\n\t\t}\n\n\t\tMustGetSite(ctx).ClearCache(ctx, true)\n\t\treturn nil\n\t})\n}\n\n// Merge the given paths.\nfunc (h *Hits) Merge(ctx context.Context, dst int64, pathIDs []int64) error {\n\t// Shouldn't happen, but just in case.\n\tpathIDs = slices.DeleteFunc(pathIDs, func(p int64) bool { return p == dst })\n\n\tsite := MustGetSite(ctx).ID\n\n\terr := (&Path{}).ByID(ctx, dst) // Ensure this site owns the path.\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Hits.Merge\")\n\t}\n\n\t// Push back to lot to memstore to re-add it again, and then just call\n\t// Purge() to delete the old ones.\n\terr = zdb.Select(ctx, h, `select * from hits where site_id=? and path_id in (?)`, site, pathIDs)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Hits.Merge\")\n\t}\n\thh := *h\n\tfor i := range hh {\n\t\thh[i].PathID = dst\n\t\thh[i].noProcess = true\n\t}\n\n\terr = errors.Wrap(h.Purge(ctx, pathIDs), \"Hits.Merge\")\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Hits.Merge\")\n\t}\n\n\t// Only push back if delete worked.\n\tMemstore.Append(hh...)\n\treturn nil\n}\n"
        },
        {
          "name": "hit_list.go",
          "type": "blob",
          "size": 12.4365234375,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"sort\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/tz\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/zbool\"\n\t\"zgo.at/zstd/zjson\"\n\t\"zgo.at/zstd/ztime\"\n)\n\ntype HitList struct {\n\t// Number of visitors for the selected date range.\n\tCount int `db:\"count\" json:\"count\"`\n\n\t// Path ID\n\tPathID int64 `db:\"path_id\" json:\"path_id\"`\n\n\t// Path name (e.g. /hello.html).\n\tPath string `db:\"path\" json:\"path\"`\n\n\t// Is this an event?\n\tEvent zbool.Bool `db:\"event\" json:\"event\"`\n\n\t// Page title.\n\tTitle string `db:\"title\" json:\"title\"`\n\n\t// Highest visitors per hour or day (depending on daily being set).\n\tMax int `json:\"max\"`\n\n\t// Statistics by day and hour.\n\tStats []HitListStat `json:\"stats\"`\n\n\t// What kind of referral this is; only set when retrieving referrals {enum: h g c o}.\n\t//\n\t//  h   HTTP Referal header.\n\t//  g   Generated; for example are Google domains (google.com, google.nl,\n\t//      google.co.nz, etc.) are grouped as the generated referral \"Google\".\n\t//  c   Campaign (via query parameter)\n\t//  o   Other\n\tRefScheme *string `db:\"ref_scheme\" json:\"ref_scheme,omitempty\"`\n}\n\ntype HitListStat struct {\n\tDay    string `json:\"day\"`    // Day these statistics are for {date}.\n\tHourly []int  `json:\"hourly\"` // Visitors per hour.\n\tDaily  int    `json:\"daily\"`  // Total visitors for this day.\n}\n\n// PathCount gets the visit count for one path.\nfunc (h *HitList) PathCount(ctx context.Context, path string, rng ztime.Range) error {\n\terr := zdb.Get(ctx, h, \"load:hit_list.PathCount\", map[string]any{\n\t\t\"site\":  MustGetSite(ctx).ID,\n\t\t\"path\":  path,\n\t\t\"start\": rng.Start,\n\t\t\"end\":   rng.End,\n\t})\n\treturn errors.Wrap(err, \"HitList.PathCount\")\n}\n\n// SiteTotal gets the total counts for all paths. This always uses UTC.\nfunc (h *HitList) SiteTotalUTC(ctx context.Context, rng ztime.Range) error {\n\terr := zdb.Get(ctx, h, `/* *HitList.SiteTotalUTC */\n\t\t\tselect\n\t\t\t\tcoalesce(sum(total), 0) as count\n\t\t\tfrom hit_counts\n\t\t\twhere site_id = :site\n\t\t\t{{:start and hour >= :start}}\n\t\t\t{{:end   and hour <= :end}}\n\t\t`, map[string]any{\n\t\t\"site\":  MustGetSite(ctx).ID,\n\t\t\"start\": rng.Start,\n\t\t\"end\":   rng.End,\n\t})\n\treturn errors.Wrap(err, \"HitList.SiteTotalUTC\")\n}\n\ntype HitLists []HitList\n\n// ListPathsLike lists all paths matching the like pattern.\nfunc (h *HitLists) ListPathsLike(ctx context.Context, search string, matchTitle, matchCase bool) error {\n\terr := zdb.Select(ctx, h, \"load:hit_list.ListPathsLike\", map[string]any{\n\t\t\"site\":        MustGetSite(ctx).ID,\n\t\t\"search\":      search,\n\t\t\"match_title\": matchTitle,\n\t\t\"match_case\":  matchCase,\n\t})\n\treturn errors.Wrap(err, \"Hits.ListPathsLike\")\n}\n\nvar allDays = []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n\n// List the top paths for this site in the given time period.\nfunc (h *HitLists) List(\n\tctx context.Context, rng ztime.Range, pathFilter, exclude []int64, limit int, daily bool,\n) (int, bool, error) {\n\tsite := MustGetSite(ctx)\n\tuser := MustGetUser(ctx)\n\n\t// List the pages for this time period; this gets the path_id, path, title.\n\tvar more bool\n\t{\n\t\terr := zdb.Select(ctx, h, \"load:hit_list.List-counts\", map[string]any{\n\t\t\t\"site\":    site.ID,\n\t\t\t\"start\":   rng.Start,\n\t\t\t\"end\":     rng.End,\n\t\t\t\"filter\":  pathFilter,\n\t\t\t\"limit\":   limit + 1,\n\t\t\t\"exclude\": exclude,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn 0, false, errors.Wrap(err, \"HitLists.List hit_counts\")\n\t\t}\n\n\t\t// Check if there are more entries.\n\t\tif len(*h) > limit {\n\t\t\thh := *h\n\t\t\thh = hh[:len(hh)-1]\n\t\t\t*h = hh\n\t\t\tmore = true\n\t\t}\n\t}\n\n\tif len(*h) == 0 { // No data yet.\n\t\treturn 0, false, nil\n\t}\n\n\t// Get stats for every page.\n\thh := *h\n\tvar st []struct {\n\t\tPathID int64     `db:\"path_id\"`\n\t\tDay    time.Time `db:\"day\"`\n\t\tStats  []byte    `db:\"stats\"`\n\t}\n\t{\n\t\tpaths := make([]int64, len(hh))\n\t\tfor i := range hh {\n\t\t\tpaths[i] = hh[i].PathID\n\t\t}\n\n\t\terr := zdb.Select(ctx, &st, \"load:hit_list.List-stats\", map[string]any{\n\t\t\t\"site\":  site.ID,\n\t\t\t\"start\": rng.Start.Format(\"2006-01-02\"),\n\t\t\t\"end\":   rng.End.Format(\"2006-01-02\"),\n\t\t\t\"paths\": paths,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn 0, false, errors.Wrap(err, \"HitLists.List hit_stats\")\n\t\t}\n\t}\n\n\t// Add the hit_stats.\n\t{\n\t\tfor i := range hh {\n\t\t\tfor _, s := range st {\n\t\t\t\tif s.PathID == hh[i].PathID {\n\t\t\t\t\tvar y []int\n\t\t\t\t\tzjson.MustUnmarshal(s.Stats, &y)\n\t\t\t\t\thh[i].Stats = append(hh[i].Stats, HitListStat{\n\t\t\t\t\t\tDay:    s.Day.Format(\"2006-01-02\"),\n\t\t\t\t\t\tHourly: y,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfillBlankDays(hh, rng)\n\tapplyOffset(hh, user.Settings.Timezone)\n\n\t// Add total and max.\n\tvar totalDisplay int\n\taddTotals(hh, daily, &totalDisplay)\n\n\treturn totalDisplay, more, nil\n}\n\n// PathTotals is a special path to indicate this is the \"total\" overview.\n//\n// Trailing whitespace is trimmed on paths, so this should never conflict.\nconst PathTotals = \"TOTAL \"\n\n// Totals gets the data for the \"Totals\" chart/widget.\nfunc (h *HitList) Totals(ctx context.Context, rng ztime.Range, pathFilter []int64, daily, noEvents bool) (int, error) {\n\tsite := MustGetSite(ctx)\n\tuser := MustGetUser(ctx)\n\n\tvar tc []struct {\n\t\tHour  time.Time `db:\"hour\"`\n\t\tTotal int       `db:\"total\"`\n\t}\n\terr := zdb.Select(ctx, &tc, \"load:hit_list.Totals\", map[string]any{\n\t\t\"site\":      site.ID,\n\t\t\"start\":     rng.Start,\n\t\t\"end\":       rng.End,\n\t\t\"filter\":    pathFilter,\n\t\t\"no_events\": noEvents,\n\t})\n\tif err != nil {\n\t\treturn 0, errors.Wrap(err, \"HitList.Totals\")\n\t}\n\n\ttotalst := HitList{\n\t\tPath:  PathTotals,\n\t\tTitle: \"\",\n\t}\n\tstats := make(map[string]HitListStat)\n\tfor _, t := range tc {\n\t\td := t.Hour.Format(\"2006-01-02\")\n\t\thour, _ := strconv.ParseInt(t.Hour.Format(\"15\"), 10, 32)\n\t\ts, ok := stats[d]\n\t\tif !ok {\n\t\t\ts = HitListStat{\n\t\t\t\tDay:    d,\n\t\t\t\tHourly: make([]int, 24),\n\t\t\t}\n\t\t}\n\n\t\ts.Hourly[hour] += t.Total\n\t\ttotalst.Count += t.Total\n\n\t\tstats[d] = s\n\t}\n\n\tmax := 0\n\tfor _, v := range stats {\n\t\ttotalst.Stats = append(totalst.Stats, v)\n\t\tif !daily {\n\t\t\tfor _, x := range v.Hourly {\n\t\t\t\tif x > max {\n\t\t\t\t\tmax = x\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tsort.Slice(totalst.Stats, func(i, j int) bool {\n\t\treturn totalst.Stats[i].Day < totalst.Stats[j].Day\n\t})\n\n\thh := []HitList{totalst}\n\tfillBlankDays(hh, rng)\n\tapplyOffset(hh, user.Settings.Timezone)\n\n\tif daily {\n\t\tfor i := range hh[0].Stats {\n\t\t\tfor _, n := range hh[0].Stats[i].Hourly {\n\t\t\t\thh[0].Stats[i].Daily += n\n\t\t\t}\n\t\t\tif daily && hh[0].Stats[i].Daily > max {\n\t\t\t\tmax = hh[0].Stats[i].Daily\n\t\t\t}\n\t\t}\n\t}\n\n\tif max < 10 {\n\t\tmax = 10\n\t}\n\n\t*h = hh[0]\n\treturn max, nil\n}\n\n// The database stores everything in UTC, so we need to apply\n// the offset for HitLists.List()\n//\n// Let's say we have two days with an offset of UTC+2, this means we\n// need to transform this:\n//\n//\t2019-12-05 → [0,0,0,0,0,0,0,0,0,0,0,4,7,0,0,0,0,0,0,0,0,0,1,0]\n//\t2019-12-06 → [0,0,0,0,0,0,0,0,0,0,0,4,7,0,0,0,0,0,0,0,0,0,1,0]\n//\t2019-12-07 → [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n//\n// To:\n//\n//\t2019-12-05 → [0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,0,0,0,0,0,0,0,0,0]\n//\t2019-12-06 → [1,0,0,0,0,0,0,0,0,0,0,0,0,4,7,0,0,0,0,0,0,0,0,0]\n//\t2019-12-07 → [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n//\n// And skip the first 2 hours of the first day.\n//\n// Or, for UTC-2:\n//\n//\t2019-12-04 → [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n//\t2019-12-05 → [0,0,0,0,0,0,0,0,0,4,7,0,0,0,0,0,0,0,0,0,1,0,0,0]\n//\t2019-12-06 → [0,0,0,0,0,0,0,0,0,4,7,0,0,0,0,0,0,0,0,0,1,0,0,0]\n//\n// And skip the last 2 hours of the last day.\n//\n// Offsets that are not whole hours (e.g. 6:30) are treated like 7:00. I don't\n// know how to do that otherwise.\nfunc applyOffset(hh HitLists, tz *tz.Zone) {\n\tif len(hh) == 0 {\n\t\treturn\n\t}\n\n\toffset := tz.Offset()\n\tif offset%60 != 0 {\n\t\toffset += 30\n\t}\n\toffset /= 60\n\n\tswitch {\n\tcase offset > 0:\n\t\tfor i := range hh {\n\t\t\tstats := hh[i].Stats\n\n\t\t\tpopped := make([]int, offset)\n\t\t\tfor i := range stats {\n\t\t\t\tstats[i].Hourly = append(popped, stats[i].Hourly...)\n\t\t\t\to := len(stats[i].Hourly) - offset\n\t\t\t\tpopped = stats[i].Hourly[o:]\n\t\t\t\tstats[i].Hourly = stats[i].Hourly[:o]\n\t\t\t}\n\t\t\tif len(hh[i].Stats) > 1 {\n\t\t\t\thh[i].Stats = stats[1:] // Overselect a day to get the stats for it, remove it.\n\t\t\t}\n\t\t}\n\n\tcase offset < 0:\n\t\toffset = -offset\n\n\t\tfor i := range hh {\n\t\t\tstats := hh[i].Stats\n\n\t\t\tpopped := make([]int, offset)\n\t\t\tfor i := len(stats) - 1; i >= 0; i-- {\n\t\t\t\tstats[i].Hourly = append(stats[i].Hourly, popped...)\n\t\t\t\tpopped = stats[i].Hourly[:offset]\n\t\t\t\tstats[i].Hourly = stats[i].Hourly[offset:]\n\t\t\t}\n\t\t\thh[i].Stats = stats[:len(stats)-1] // Overselect a day to get the stats for it, remove it.\n\t\t}\n\t}\n}\n\nfunc fillBlankDays(hh HitLists, rng ztime.Range) {\n\t// Should Never Happen™ but if it does the below loop will never break, so\n\t// be safe.\n\tif rng.Start.After(rng.End) {\n\t\treturn\n\t}\n\n\tendFmt := rng.End.Format(\"2006-01-02\")\n\tfor i := range hh {\n\t\tvar (\n\t\t\tday     = rng.Start.Add(-24 * time.Hour)\n\t\t\tnewStat []HitListStat\n\t\t\tj       int\n\t\t)\n\n\t\tfor {\n\t\t\tday = day.Add(24 * time.Hour)\n\t\t\tdayFmt := day.Format(\"2006-01-02\")\n\n\t\t\tif len(hh[i].Stats)-1 >= j && dayFmt == hh[i].Stats[j].Day {\n\t\t\t\tnewStat = append(newStat, hh[i].Stats[j])\n\t\t\t\tj++\n\t\t\t} else {\n\t\t\t\tnewStat = append(newStat, HitListStat{Day: dayFmt, Hourly: allDays})\n\t\t\t}\n\t\t\tif dayFmt == endFmt {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\thh[i].Stats = newStat\n\t}\n}\n\nfunc addTotals(hh HitLists, daily bool, totalDisplay *int) {\n\tfor i := range hh {\n\t\tfor j := range hh[i].Stats {\n\t\t\tfor k := range hh[i].Stats[j].Hourly {\n\t\t\t\thh[i].Stats[j].Daily += hh[i].Stats[j].Hourly[k]\n\t\t\t\tif !daily && hh[i].Stats[j].Hourly[k] > hh[i].Max {\n\t\t\t\t\thh[i].Max = hh[i].Stats[j].Hourly[k]\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thh[i].Count += hh[i].Stats[j].Daily\n\t\t\tif daily && hh[i].Stats[j].Daily > hh[i].Max {\n\t\t\t\thh[i].Max = hh[i].Stats[j].Daily\n\t\t\t}\n\t\t}\n\n\t\t*totalDisplay += hh[i].Count\n\t}\n\n\t// We sort in SQL, but this is not always 100% correct after applying\n\t// the TZ offset, so order here as well.\n\t//\n\t// TODO: this is still not 100% correct, as the \"first 10\" after\n\t// applying the TZ offset may be different than the first 10 being\n\t// fetched in the SQL query. There is no easy fix for that in the\n\t// current design. I considered storing everything in the DB as the\n\t// configured TZ, but that would make changing the TZ expensive, I'm not\n\t// 100% sure yet what a good solution here is. For now, this is \"good\n\t// enough\".\n\tsort.Slice(hh, func(i, j int) bool { return hh[i].Count > hh[j].Count })\n}\n\ntype TotalCount struct {\n\tTotal       int `db:\"total\" json:\"total\"`               // Total number of visitors (including events).\n\tTotalEvents int `db:\"total_events\" json:\"total_events\"` // Total number of visitors for events.\n\t// Total number of visitors in UTC. The browser, system, etc, stats are\n\t// always in UTC.\n\tTotalUTC int `db:\"total_utc\" json:\"total_utc\"`\n}\n\n// GetTotalCount gets the total number of pageviews for the selected timeview in\n// the timezone the user configured.\n//\n// This also gets the total number of pageviews for the selected time period in\n// UTC. This is needed since the _stats tables are per day, rather than\n// per-hour, so we need to use the correct totals to make sure the percentage\n// calculations are accurate.\nfunc GetTotalCount(ctx context.Context, rng ztime.Range, pathFilter []int64, noEvents bool) (TotalCount, error) {\n\tsite := MustGetSite(ctx)\n\tuser := MustGetUser(ctx)\n\n\tvar t TotalCount\n\terr := zdb.Get(ctx, &t, \"load:hit_list.GetTotalCount\", map[string]any{\n\t\t\"site\":      site.ID,\n\t\t\"start\":     rng.Start,\n\t\t\"end\":       rng.End,\n\t\t\"start_utc\": rng.Start.In(user.Settings.Timezone.Location),\n\t\t\"end_utc\":   rng.End.In(user.Settings.Timezone.Location),\n\t\t\"filter\":    pathFilter,\n\t\t\"no_events\": noEvents,\n\t\t\"tz\":        user.Settings.Timezone.Offset(),\n\t})\n\treturn t, errors.Wrap(err, \"GetTotalCount\")\n}\n\n// Diff gets the difference in percentage of all paths in this HitList.\n//\n// e.g. if called with start=2020-01-20; end=2020-01-2020-01-27, then it will\n// compare this to start=2020-01-12; end=2020-01-19\n//\n// The return value is in the same order as paths.\nfunc (h HitLists) Diff(ctx context.Context, rng, prev ztime.Range) ([]float64, error) {\n\tif len(h) == 0 {\n\t\treturn nil, nil\n\t}\n\n\td := -rng.End.Sub(rng.Start)\n\tprev = ztime.NewRange(rng.Start.Add(d)).To(rng.End.Add(d))\n\n\tpaths := make([]int64, 0, len(h))\n\tfor _, hh := range h {\n\t\tpaths = append(paths, hh.PathID)\n\t}\n\n\tvar diffs []float64\n\terr := zdb.Select(ctx, &diffs, \"load:hit_list.DiffTotal\", map[string]any{\n\t\t\"site\":      MustGetSite(ctx).ID,\n\t\t\"start\":     rng.Start,\n\t\t\"end\":       rng.End,\n\t\t\"prevstart\": prev.Start,\n\t\t\"prevend\":   prev.End,\n\t\t\"paths\":     paths,\n\t})\n\treturn diffs, errors.Wrap(err, \"HitList.DiffTotal\")\n}\n"
        },
        {
          "name": "hit_list_test.go",
          "type": "blob",
          "size": 13.9267578125,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t. \"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/zjson\"\n\t\"zgo.at/zstd/ztest\"\n\t\"zgo.at/zstd/ztime\"\n)\n\nfunc TestHitListsList(t *testing.T) {\n\trng := ztime.NewRange(time.Date(2019, 8, 10, 0, 0, 0, 0, time.UTC)).\n\t\tTo(time.Date(2019, 8, 17, 23, 59, 59, 0, time.UTC))\n\thit := rng.Start.Add(1 * time.Second)\n\n\ttests := []struct {\n\t\tin         []Hit\n\t\tinFilter   string\n\t\tinExclude  []int64\n\t\twantReturn string\n\t\twantStats  HitLists\n\t}{\n\t\t{\n\t\t\tin: []Hit{\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/asd\"},\n\t\t\t\t{FirstVisit: true, CreatedAt: hit.Add(40 * time.Hour), Path: \"/asd/\"},\n\t\t\t\t{FirstVisit: true, CreatedAt: hit.Add(100 * time.Hour), Path: \"/zxc\"},\n\t\t\t},\n\t\t\twantReturn: \"3 false <nil>\",\n\t\t\twantStats: HitLists{\n\t\t\t\tHitList{Count: 2, Path: \"/asd\", RefScheme: nil, Stats: []HitListStat{\n\t\t\t\t\t{Day: \"2019-08-10\", Hourly: dayStat(map[int]int{14: 1})},\n\t\t\t\t\t{Day: \"2019-08-11\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-12\", Hourly: dayStat(map[int]int{6: 1})},\n\t\t\t\t\t{Day: \"2019-08-13\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-14\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-15\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-16\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-17\", Hourly: dayStat(nil)},\n\t\t\t\t}},\n\t\t\t\tHitList{Count: 1, Path: \"/zxc\", RefScheme: nil, Stats: []HitListStat{\n\t\t\t\t\t{Day: \"2019-08-10\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-11\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-12\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-13\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-14\", Hourly: dayStat(map[int]int{18: 1})},\n\t\t\t\t\t{Day: \"2019-08-15\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-16\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-17\", Hourly: dayStat(nil)},\n\t\t\t\t}},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tin: []Hit{\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/asd\"},\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/zxc\"},\n\t\t\t},\n\t\t\tinFilter:   \"x\",\n\t\t\twantReturn: \"1 false <nil>\",\n\t\t\twantStats: HitLists{\n\t\t\t\tHitList{Count: 1, Path: \"/zxc\", RefScheme: nil, Stats: []HitListStat{\n\t\t\t\t\t{Day: \"2019-08-10\", Hourly: dayStat(map[int]int{14: 1})},\n\t\t\t\t\t{Day: \"2019-08-11\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-12\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-13\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-14\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-15\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-16\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-17\", Hourly: dayStat(nil)},\n\t\t\t\t}},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tin: []Hit{\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/a\"},\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/aa\"},\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/aaa\"},\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/aaaa\"},\n\t\t\t},\n\t\t\tinFilter:   \"a\",\n\t\t\twantReturn: \"2 true <nil>\",\n\t\t\twantStats: HitLists{\n\t\t\t\tHitList{Count: 1, Path: \"/aaaa\", RefScheme: nil, Stats: []HitListStat{\n\t\t\t\t\t{Day: \"2019-08-10\", Hourly: dayStat(map[int]int{14: 1})},\n\t\t\t\t\t{Day: \"2019-08-11\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-12\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-13\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-14\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-15\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-16\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-17\", Hourly: dayStat(nil)},\n\t\t\t\t}},\n\t\t\t\tHitList{Count: 1, Path: \"/aaa\", RefScheme: nil, Stats: []HitListStat{\n\t\t\t\t\t{Day: \"2019-08-10\", Hourly: dayStat(map[int]int{14: 1})},\n\t\t\t\t\t{Day: \"2019-08-11\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-12\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-13\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-14\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-15\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-16\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-17\", Hourly: dayStat(nil)},\n\t\t\t\t}},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tin: []Hit{\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/a\"},\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/aa\"},\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/aaa\"},\n\t\t\t\t{FirstVisit: true, CreatedAt: hit, Path: \"/aaaa\"},\n\t\t\t},\n\t\t\tinFilter:   \"a\",\n\t\t\tinExclude:  []int64{4, 3},\n\t\t\twantReturn: \"2 false <nil>\",\n\t\t\twantStats: HitLists{\n\t\t\t\tHitList{Count: 1, Path: \"/aa\", RefScheme: nil, Stats: []HitListStat{\n\t\t\t\t\t{Day: \"2019-08-10\", Hourly: dayStat(map[int]int{14: 1})},\n\t\t\t\t\t{Day: \"2019-08-11\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-12\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-13\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-14\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-15\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-16\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-17\", Hourly: dayStat(nil)},\n\t\t\t\t}},\n\t\t\t\tHitList{Count: 1, Path: \"/a\", RefScheme: nil, Stats: []HitListStat{\n\t\t\t\t\t{Day: \"2019-08-10\", Hourly: dayStat(map[int]int{14: 1})},\n\t\t\t\t\t{Day: \"2019-08-11\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-12\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-13\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-14\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-15\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-16\", Hourly: dayStat(nil)},\n\t\t\t\t\t{Day: \"2019-08-17\", Hourly: dayStat(nil)},\n\t\t\t\t}},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor i, tt := range tests {\n\t\tt.Run(fmt.Sprintf(\"%d\", i), func(t *testing.T) {\n\t\t\tctx := gctest.DB(t)\n\n\t\t\tsite := MustGetSite(ctx)\n\t\t\tfor j := range tt.in {\n\t\t\t\tif tt.in[j].Site == 0 {\n\t\t\t\t\ttt.in[j].Site = site.ID\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgctest.StoreHits(ctx, t, false, tt.in...)\n\n\t\t\tpathsFilter, err := PathFilter(ctx, tt.inFilter, true)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\n\t\t\tvar stats HitLists\n\t\t\tuniqueDisplay, more, err := stats.List(ctx, rng, pathsFilter, tt.inExclude, 2, false)\n\n\t\t\thave := fmt.Sprintf(\"%d %t %v\", uniqueDisplay, more, err)\n\t\t\tif have != tt.wantReturn {\n\t\t\t\tt.Errorf(\"wrong return\\nhave: %s\\nwant: %s\\n\", have, tt.wantReturn)\n\t\t\t\tzdb.Dump(ctx, os.Stdout, \"select * from paths\")\n\t\t\t\tzdb.Dump(ctx, os.Stdout, \"select * from hit_counts\")\n\t\t\t\tzdb.Dump(ctx, os.Stdout, \"select * from hit_stats\")\n\t\t\t}\n\n\t\t\tout := strings.ReplaceAll(\", \", \",\\n\", fmt.Sprintf(\"%+v\", stats))\n\t\t\twant := strings.ReplaceAll(\", \", \",\\n\", fmt.Sprintf(\"%+v\", tt.wantStats))\n\t\t\tif d := ztest.Diff(out, want); d != \"\" {\n\t\t\t\tt.Fatal(d)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestGetTotalCount(t *testing.T) {\n\tztime.SetNow(t, \"2020-06-18 12:00:00\")\n\tctx := gctest.DB(t)\n\n\trng := ztime.NewRange(ztime.Now()).To(ztime.Now())\n\n\tgctest.StoreHits(ctx, t, false,\n\t\tHit{Path: \"/a\", FirstVisit: true},\n\t\tHit{Path: \"/b\", FirstVisit: true},\n\t\tHit{Path: \"/a\", FirstVisit: false},\n\t\tHit{Path: \"ev\", FirstVisit: true, Event: true},\n\t\tHit{Path: \"ev\", FirstVisit: false, Event: true})\n\n\t{\n\t\thave, err := GetTotalCount(ctx, rng, nil, false)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\twant := `{\n\t\t\t\"total\": 3,\n\t\t\t\"total_events\": 1,\n\t\t\t\"total_utc\": 3\n\t\t}`\n\t\tif d := ztest.Diff(zjson.MustMarshalString(have), want, ztest.DiffJSON); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t}\n}\n\nfunc TestHitListTotals(t *testing.T) {\n\tztime.SetNow(t, \"2020-06-18 12:00:00\")\n\tctx := gctest.DB(t)\n\n\tgctest.StoreHits(ctx, t, false,\n\t\tHit{Path: \"/a\", FirstVisit: true},\n\t\tHit{Path: \"/b\", FirstVisit: true},\n\t\tHit{Path: \"/a\"},\n\t\tHit{Path: \"/a\"},\n\t\tHit{Path: \"/a\"},\n\t\tHit{Path: \"/a\"},\n\t\tHit{Path: \"/a\"},\n\t\tHit{Path: \"/a\"},\n\t\tHit{Path: \"/a\"},\n\t\tHit{Path: \"/a\"},\n\t\tHit{Path: \"/a\"},\n\t\tHit{Path: \"/a\"},\n\t)\n\n\tt.Run(\"hourly\", func(t *testing.T) {\n\t\trng := ztime.NewRange(ztime.Now()).To(ztime.Now())\n\n\t\twant := [][]string{\n\t\t\t{`10`, `{\n\t\t\t\t\"count\":  2,\n\t\t\t\t\"path_id\":       0,\n\t\t\t\t\"path\":          \"TOTAL \",\n\t\t\t\t\"event\":         false,\n\t\t\t\t\"title\":         \"\",\n\t\t\t\t\"max\":           0,\n\t\t\t\t\"stats\":[{\n\t\t\t\t\t\"day\":            \"2020-06-18\",\n\t\t\t\t\t\"hourly\":  [0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\"daily\":   0\n\t\t\t\t}]}`},\n\n\t\t\t{`10`, `{\n\t\t\t\t\"count\":  1,\n\t\t\t\t\"path_id\":       0,\n\t\t\t\t\"path\":          \"TOTAL \",\n\t\t\t\t\"event\":         false,\n\t\t\t\t\"title\":         \"\",\n\t\t\t\t\"max\":           0,\n\t\t\t\t\"stats\":[{\n\t\t\t\t\t\"day\":            \"2020-06-18\",\n\t\t\t\t\t\"hourly\":  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\"daily\":   0\n\t\t\t\t}]}`},\n\n\t\t\t{`10`, `{\n\t\t\t\t\"count\":  1,\n\t\t\t\t\"path_id\":       0,\n\t\t\t\t\"path\":          \"TOTAL \",\n\t\t\t\t\"event\":         false,\n\t\t\t\t\"title\":         \"\",\n\t\t\t\t\"max\":           0,\n\t\t\t\t\"stats\":[{\n\t\t\t\t\t\"day\":            \"2020-06-18\",\n\t\t\t\t\t\"hourly\":  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\"daily\":   0\n\t\t\t\t}]}`},\n\n\t\t\t{`10`, `{\n\t\t\t\t\"count\":  2,\n\t\t\t\t\"path_id\":       0,\n\t\t\t\t\"path\":          \"TOTAL \",\n\t\t\t\t\"event\":         false,\n\t\t\t\t\"title\":         \"\",\n\t\t\t\t\"max\":           0,\n\t\t\t\t\"stats\":[{\n\t\t\t\t\t\"day\":            \"2020-06-18\",\n\t\t\t\t\t\"hourly\":  [0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\"daily\":   0\n\t\t\t\t}]}`},\n\t\t}\n\t\tfor i, filter := range [][]int64{nil, []int64{1}, []int64{2}, []int64{1, 2}} {\n\t\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\t\tvar hs HitList\n\t\t\t\tcount, err := hs.Totals(ctx, rng, filter, false, false)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\n\t\t\t\tif strconv.Itoa(count) != want[i][0] {\n\t\t\t\t\tt.Errorf(\"count wrong\\nhave: %d\\nwant: %s\", count, want[i][0])\n\t\t\t\t}\n\t\t\t\tif d := ztest.Diff(zjson.MustMarshalString(hs), want[i][1], ztest.DiffJSON); d != \"\" {\n\t\t\t\t\tt.Error(d)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n\n\tt.Run(\"daily\", func(t *testing.T) {\n\t\trng := ztime.NewRange(ztime.Now()).To(ztime.Now())\n\n\t\twant := [][]string{\n\t\t\t{`10`, `{\n\t\t\t\t\"count\":  2,\n\t\t\t\t\"path_id\":       0,\n\t\t\t\t\"path\":          \"TOTAL \",\n\t\t\t\t\"event\":         false,\n\t\t\t\t\"title\":         \"\",\n\t\t\t\t\"max\":           0,\n\t\t\t\t\"stats\":[{\n\t\t\t\t\t\"day\":            \"2020-06-18\",\n\t\t\t\t\t\"hourly\":  [0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\"daily\":   2\n\t\t\t\t}]}`},\n\n\t\t\t{`10`, `{\n\t\t\t\t\"count\":  1,\n\t\t\t\t\"path_id\":       0,\n\t\t\t\t\"path\":          \"TOTAL \",\n\t\t\t\t\"event\":         false,\n\t\t\t\t\"title\":         \"\",\n\t\t\t\t\"max\":           0,\n\t\t\t\t\"stats\":[{\n\t\t\t\t\t\"day\":            \"2020-06-18\",\n\t\t\t\t\t\"hourly\":  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\"daily\":   1\n\t\t\t\t}]}`},\n\n\t\t\t{`10`, `{\n\t\t\t\t\"count\":  1,\n\t\t\t\t\"path_id\":       0,\n\t\t\t\t\"path\":          \"TOTAL \",\n\t\t\t\t\"event\":         false,\n\t\t\t\t\"title\":         \"\",\n\t\t\t\t\"max\":           0,\n\t\t\t\t\"stats\":[{\n\t\t\t\t\t\"day\":            \"2020-06-18\",\n\t\t\t\t\t\"hourly\":  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\"daily\":   1\n\t\t\t\t}]}`},\n\n\t\t\t{`10`, `{\n\t\t\t\t\"count\":  2,\n\t\t\t\t\"path_id\":       0,\n\t\t\t\t\"path\":          \"TOTAL \",\n\t\t\t\t\"event\":         false,\n\t\t\t\t\"title\":         \"\",\n\t\t\t\t\"max\":           0,\n\t\t\t\t\"stats\":[{\n\t\t\t\t\t\"day\":            \"2020-06-18\",\n\t\t\t\t\t\"hourly\":  [0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\"daily\":   2\n\t\t\t\t}]}`},\n\t\t}\n\n\t\tfor i, filter := range [][]int64{nil, []int64{1}, []int64{2}, []int64{1, 2}} {\n\t\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\t\tvar hs HitList\n\t\t\t\tcount, err := hs.Totals(ctx, rng, filter, true, false)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\n\t\t\t\tif strconv.Itoa(count) != want[i][0] {\n\t\t\t\t\tt.Errorf(\"count wrong\\nhave: %d\\nwant: %s\", count, want[i][0])\n\t\t\t\t}\n\t\t\t\tif d := ztest.Diff(zjson.MustMarshalString(hs), want[i][1], ztest.DiffJSON); d != \"\" {\n\t\t\t\t\tt.Error(d)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n}\n\nfunc TestHitListsPathCount(t *testing.T) {\n\tztime.SetNow(t, \"2020-06-18\")\n\tctx := gctest.DB(t)\n\n\tgctest.StoreHits(ctx, t, false,\n\t\tHit{FirstVisit: true, Path: \"/\"},\n\t\tHit{FirstVisit: true, Path: \"/\", CreatedAt: ztime.Now().Add(-2 * 24 * time.Hour)},\n\t\tHit{FirstVisit: true, Path: \"/\", CreatedAt: ztime.Now().Add(-2 * 24 * time.Hour)},\n\t\tHit{FirstVisit: true, Path: \"/\", CreatedAt: ztime.Now().Add(-9 * 24 * time.Hour)},\n\t\tHit{FirstVisit: true, Path: \"/\", CreatedAt: ztime.Now().Add(-9 * 24 * time.Hour)},\n\t\tHit{FirstVisit: false, Path: \"/\"},\n\n\t\tHit{FirstVisit: true, Path: \"/a\"},\n\t\tHit{FirstVisit: true, Path: \"/a\", CreatedAt: ztime.Now().Add(-2 * 24 * time.Hour)},\n\t)\n\n\t{\n\t\tvar have HitList\n\t\terr := have.PathCount(ctx, \"/\", ztime.Range{})\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\twant := `{\n\t\t\t\"count\":  5,\n\t\t\t\"event\":         false,\n\t\t\t\"max\":           0,\n\t\t\t\"path\":          \"/\",\n\t\t\t\"path_id\":       0,\n\t\t\t\"stats\":         null,\n\t\t\t\"title\":         \"\"\n\t\t}`\n\t\tif d := ztest.Diff(zjson.MustMarshalString(have), want, ztest.DiffJSON); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t}\n\n\t{\n\t\tvar have HitList\n\t\terr := have.PathCount(ctx, \"/\", ztime.NewRange(\n\t\t\tztime.Now().Add(-8*24*time.Hour)).\n\t\t\tTo(ztime.Now().Add(-1*24*time.Hour)))\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\twant := `{\n\t\t\t\"count\":  2,\n\t\t\t\"event\":         false,\n\t\t\t\"max\":           0,\n\t\t\t\"path\":          \"/\",\n\t\t\t\"path_id\":       0,\n\t\t\t\"stats\":         null,\n\t\t\t\"title\":         \"\"\n\t\t}`\n\t\tif d := ztest.Diff(zjson.MustMarshalString(have), want, ztest.DiffJSON); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t}\n}\n\nfunc TestHitListSiteTotalUnique(t *testing.T) {\n\tztime.SetNow(t, \"2020-06-18\")\n\tctx := gctest.DB(t)\n\n\tgctest.StoreHits(ctx, t, false,\n\t\tHit{FirstVisit: true, Path: \"/\"},\n\t\tHit{FirstVisit: true, Path: \"/\", CreatedAt: ztime.Now().Add(-2 * 24 * time.Hour)},\n\t\tHit{FirstVisit: true, Path: \"/\", CreatedAt: ztime.Now().Add(-2 * 24 * time.Hour)},\n\t\tHit{FirstVisit: true, Path: \"/\", CreatedAt: ztime.Now().Add(-9 * 24 * time.Hour)},\n\t\tHit{FirstVisit: true, Path: \"/\", CreatedAt: ztime.Now().Add(-9 * 24 * time.Hour)},\n\n\t\tHit{FirstVisit: false, Path: \"/\"},\n\t\tHit{FirstVisit: true, Path: \"/a\"},\n\t\tHit{FirstVisit: true, Path: \"/a\", CreatedAt: ztime.Now().Add(-2 * 24 * time.Hour)},\n\t)\n\n\t{\n\t\tvar have HitList\n\t\terr := have.SiteTotalUTC(ctx, ztime.Range{})\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\twant := `{\n\t\t\t\"count\":  7,\n\t\t\t\"event\":         false,\n\t\t\t\"max\":           0,\n\t\t\t\"path\":          \"\",\n\t\t\t\"path_id\":       0,\n\t\t\t\"stats\":         null,\n\t\t\t\"title\":         \"\"\n\t\t}`\n\t\tif d := ztest.Diff(zjson.MustMarshalString(have), want, ztest.DiffJSON); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t}\n\n\t{\n\t\tvar have HitList\n\t\terr := have.SiteTotalUTC(ctx, ztime.NewRange(\n\t\t\tztime.Now().Add(-8*24*time.Hour)).\n\t\t\tTo(ztime.Now().Add(-1*24*time.Hour)))\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\twant := `{\n\t\t\t\"count\":  3,\n\t\t\t\"event\":         false,\n\t\t\t\"max\":           0,\n\t\t\t\"path\":          \"\",\n\t\t\t\"path_id\":       0,\n\t\t\t\"stats\":         null,\n\t\t\t\"title\":         \"\"\n\t\t}`\n\t\tif d := ztest.Diff(zjson.MustMarshalString(have), want, ztest.DiffJSON); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "hit_stats.go",
          "type": "blob",
          "size": 10.6044921875,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/ztime\"\n)\n\ntype HitStat struct {\n\t// ID for selecting more details; not present in the detail view.\n\tID    string `db:\"id\" json:\"id,omitempty\"`\n\tName  string `db:\"name\" json:\"name\"`   // Display name.\n\tCount int    `db:\"count\" json:\"count\"` // Number of visitors.\n\n\t// What kind of referral this is; only set when retrieving referrals {enum: h g c o}.\n\t//\n\t//  h   HTTP Referal header.\n\t//  g   Generated; for example are Google domains (google.com, google.nl,\n\t//      google.co.nz, etc.) are grouped as the generated referral \"Google\".\n\t//  c   Campaign (via query parameter)\n\t//  o   Other\n\tRefScheme *string `db:\"ref_scheme\" json:\"ref_scheme,omitempty\"`\n}\n\ntype HitStats struct {\n\tMore  bool      `json:\"more\"`\n\tStats []HitStat `json:\"stats\"`\n}\n\nfunc asUTCDate(u *User, t time.Time) string {\n\treturn t.In(u.Settings.Timezone.Location).Format(\"2006-01-02\")\n}\n\n// ListTopRefs lists all ref statistics for the given time period, excluding\n// referrals from the configured LinkDomain.\n//\n// The returned count is the count without LinkDomain, and is different from the\n// total number of hits.\nfunc (h *HitStats) ListTopRefs(ctx context.Context, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tsite := MustGetSite(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:ref.ListTopRefs.sql\", map[string]any{\n\t\t\"site\":       site.ID,\n\t\t\"start\":      rng.Start,\n\t\t\"end\":        rng.End,\n\t\t\"filter\":     pathFilter,\n\t\t\"ref\":        site.LinkDomainURL(false) + \"%\",\n\t\t\"limit\":      limit + 1,\n\t\t\"limit2\":     limit + (limit * 3),\n\t\t\"offset\":     offset,\n\t\t\"has_domain\": site.LinkDomain != \"\",\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"HitStats.ListAllRefs\")\n\t}\n\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn nil\n}\n\n// ListTopRef lists all paths by referrer.\nfunc (h *HitStats) ListTopRef(ctx context.Context, ref string, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ByRef\", map[string]any{\n\t\t\"site\":   MustGetSite(ctx).ID,\n\t\t\"start\":  rng.Start,\n\t\t\"end\":    rng.End,\n\t\t\"filter\": pathFilter,\n\t\t\"ref\":    ref,\n\t\t\"limit\":  limit + 1,\n\t\t\"offset\": offset,\n\t})\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ByRef\")\n}\n\n// ListBrowsers lists all browser statistics for the given time period.\nfunc (h *HitStats) ListBrowsers(ctx context.Context, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListBrowsers\", map[string]any{\n\t\t\"site\":   MustGetSite(ctx).ID,\n\t\t\"start\":  asUTCDate(user, rng.Start),\n\t\t\"end\":    asUTCDate(user, rng.End),\n\t\t\"filter\": pathFilter,\n\t\t\"limit\":  limit + 1,\n\t\t\"offset\": offset,\n\t})\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ListBrowsers\")\n}\n\n// ListBrowser lists all the versions for one browser.\nfunc (h *HitStats) ListBrowser(ctx context.Context, browser string, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListBrowser\", map[string]any{\n\t\t\"site\":    MustGetSite(ctx).ID,\n\t\t\"start\":   asUTCDate(user, rng.Start),\n\t\t\"end\":     asUTCDate(user, rng.End),\n\t\t\"filter\":  pathFilter,\n\t\t\"browser\": browser,\n\t\t\"limit\":   limit + 1,\n\t\t\"offset\":  offset,\n\t})\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ListBrowser\")\n}\n\n// ListSystems lists OS statistics for the given time period.\nfunc (h *HitStats) ListSystems(ctx context.Context, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListSystems\", map[string]any{\n\t\t\"site\":   MustGetSite(ctx).ID,\n\t\t\"start\":  asUTCDate(user, rng.Start),\n\t\t\"end\":    asUTCDate(user, rng.End),\n\t\t\"filter\": pathFilter,\n\t\t\"limit\":  limit + 1,\n\t\t\"offset\": offset,\n\t})\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ListSystems\")\n}\n\n// ListSystem lists all the versions for one system.\nfunc (h *HitStats) ListSystem(ctx context.Context, system string, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListSystem\", map[string]any{\n\t\t\"site\":   MustGetSite(ctx).ID,\n\t\t\"start\":  asUTCDate(user, rng.Start),\n\t\t\"end\":    asUTCDate(user, rng.End),\n\t\t\"filter\": pathFilter,\n\t\t\"system\": system,\n\t\t\"limit\":  limit + 1,\n\t\t\"offset\": offset,\n\t})\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ListSystem\")\n}\n\nconst (\n\tsizePhones      = \"phone\"\n\tsizeLargePhones = \"largephone\"\n\tsizeTablets     = \"tablet\"\n\tsizeDesktop     = \"desktop\"\n\tsizeDesktopHD   = \"desktophd\"\n\tsizeUnknown     = \"unknown\"\n)\n\n// ListSizes lists all device sizes.\nfunc (h *HitStats) ListSizes(ctx context.Context, rng ztime.Range, pathFilter []int64) error {\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListSizes\", map[string]any{\n\t\t\"site\":   MustGetSite(ctx).ID,\n\t\t\"start\":  asUTCDate(user, rng.Start),\n\t\t\"end\":    asUTCDate(user, rng.End),\n\t\t\"filter\": pathFilter,\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"HitStats.ListSize\")\n\t}\n\n\t// Group a bit more user-friendly.\n\tns := []HitStat{\n\t\t{ID: sizePhones, Count: 0},\n\t\t{ID: sizeLargePhones, Count: 0},\n\t\t{ID: sizeTablets, Count: 0},\n\t\t{ID: sizeDesktop, Count: 0},\n\t\t{ID: sizeDesktopHD, Count: 0},\n\t\t{ID: sizeUnknown, Count: 0},\n\t}\n\tfor i := range h.Stats {\n\t\tx, _ := strconv.ParseInt(h.Stats[i].Name, 10, 16)\n\t\tswitch {\n\t\tcase x == 0:\n\t\t\tns[5].Count += h.Stats[i].Count\n\t\tcase x <= 384:\n\t\t\tns[0].Count += h.Stats[i].Count\n\t\tcase x <= 1024:\n\t\t\tns[1].Count += h.Stats[i].Count\n\t\tcase x <= 1440:\n\t\t\tns[2].Count += h.Stats[i].Count\n\t\tcase x <= 1920:\n\t\t\tns[3].Count += h.Stats[i].Count\n\t\tdefault:\n\t\t\tns[4].Count += h.Stats[i].Count\n\t\t}\n\t}\n\th.Stats = ns\n\n\treturn nil\n}\n\n// ListSize lists all sizes for one grouping.\nfunc (h *HitStats) ListSize(ctx context.Context, id string, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tvar (\n\t\tminSize, maxSize int\n\t\tempty            bool\n\t)\n\tswitch id {\n\tcase sizePhones:\n\t\tmaxSize = 384\n\tcase sizeLargePhones:\n\t\tminSize, maxSize = 384, 1024\n\tcase sizeTablets:\n\t\tminSize, maxSize = 1024, 1440\n\tcase sizeDesktop:\n\t\tminSize, maxSize = 1440, 1920\n\tcase sizeDesktopHD:\n\t\tminSize, maxSize = 1920, 99999\n\tcase sizeUnknown:\n\t\tempty = true\n\tdefault:\n\t\treturn errors.Errorf(\"HitStats.ListSizes: invalid value for name: %#v\", id)\n\t}\n\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListSize\", map[string]any{\n\t\t\"site\":     MustGetSite(ctx).ID,\n\t\t\"start\":    asUTCDate(user, rng.Start),\n\t\t\"end\":      asUTCDate(user, rng.End),\n\t\t\"filter\":   pathFilter,\n\t\t\"min_size\": minSize,\n\t\t\"max_size\": maxSize,\n\t\t\"empty\":    empty,\n\t\t\"limit\":    limit + 1,\n\t\t\"offset\":   offset,\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"HitStats.ListSize\")\n\t}\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\tfor i := range h.Stats { // TODO: see if we can do this in SQL.\n\t\th.Stats[i].Name = strings.ReplaceAll(h.Stats[i].Name, \"↔\", \"↔\\ufe0e\")\n\t}\n\treturn nil\n}\n\n// ListLocations lists all location statistics for the given time period.\nfunc (h *HitStats) ListLocations(ctx context.Context, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListLocations\", map[string]any{\n\t\t\"site\":   MustGetSite(ctx).ID,\n\t\t\"start\":  asUTCDate(user, rng.Start),\n\t\t\"end\":    asUTCDate(user, rng.End),\n\t\t\"filter\": pathFilter,\n\t\t\"limit\":  limit + 1,\n\t\t\"offset\": offset,\n\t})\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ListLocations\")\n}\n\n// ListLocation lists all divisions for a location\nfunc (h *HitStats) ListLocation(ctx context.Context, country string, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListLocation\", map[string]any{\n\t\t\"site\":    MustGetSite(ctx).ID,\n\t\t\"start\":   asUTCDate(user, rng.Start),\n\t\t\"end\":     asUTCDate(user, rng.End),\n\t\t\"filter\":  pathFilter,\n\t\t\"country\": country,\n\t\t\"limit\":   limit + 1,\n\t\t\"offset\":  offset,\n\t})\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ListLocation\")\n}\n\n// ListLanguages lists all language statistics for the given time period.\nfunc (h *HitStats) ListLanguages(ctx context.Context, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListLanguages\", map[string]any{\n\t\t\"site\":   MustGetSite(ctx).ID,\n\t\t\"start\":  asUTCDate(user, rng.Start),\n\t\t\"end\":    asUTCDate(user, rng.End),\n\t\t\"filter\": pathFilter,\n\t\t\"limit\":  limit + 1,\n\t\t\"offset\": offset,\n\t})\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ListLanguages\")\n}\n\n// ListCampaigns lists all campaigns statistics for the given time period.\nfunc (h *HitStats) ListCampaigns(ctx context.Context, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListCampaigns\", map[string]any{\n\t\t\"site\":   MustGetSite(ctx).ID,\n\t\t\"start\":  asUTCDate(user, rng.Start),\n\t\t\"end\":    asUTCDate(user, rng.End),\n\t\t\"filter\": pathFilter,\n\t\t\"limit\":  limit + 1,\n\t\t\"offset\": offset,\n\t})\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ListCampaigns\")\n}\n\n// ListCampaign lists all statistics for a campaign.\nfunc (h *HitStats) ListCampaign(ctx context.Context, campaign int64, rng ztime.Range, pathFilter []int64, limit, offset int) error {\n\tuser := MustGetUser(ctx)\n\terr := zdb.Select(ctx, &h.Stats, \"load:hit_stats.ListCampaign\", map[string]any{\n\t\t\"site\":     MustGetSite(ctx).ID,\n\t\t\"start\":    asUTCDate(user, rng.Start),\n\t\t\"end\":      asUTCDate(user, rng.End),\n\t\t\"filter\":   pathFilter,\n\t\t\"campaign\": campaign,\n\t\t\"limit\":    limit + 1,\n\t\t\"offset\":   offset,\n\t})\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ListCampaign\")\n}\n"
        },
        {
          "name": "hit_stats_test.go",
          "type": "blob",
          "size": 7.9013671875,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t. \"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/zjson\"\n\t\"zgo.at/zstd/ztest\"\n\t\"zgo.at/zstd/ztime\"\n)\n\nfunc TestHitStats(t *testing.T) {\n\tctx := gctest.DB(t)\n\n\ts := MustGetSite(ctx)\n\ts.Settings.CollectRegions = Strings{}\n\terr := s.Update(ctx)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tgctest.StoreHits(ctx, t, false,\n\t\tHit{Path: \"/x\", Location: \"NL-NB\", Size: []float64{1920, 1080, 1}, UserAgentHeader: \"Mozilla/5.0 (X11; Linux x86_64; rv:81.0) Gecko/20100101 Firefox/81.0\", FirstVisit: true},\n\t\tHit{Path: \"/x\", Location: \"NL-NB\", Size: []float64{1920, 1080, 1}, UserAgentHeader: \"Mozilla/5.0 (X11; Linux x86_64; rv:81.0) Gecko/20100101 Firefox/81.0\"},\n\t\tHit{Path: \"/y\", Location: \"ID-BA\", Size: []float64{800, 600, 2}, UserAgentHeader: \"Mozilla/5.0 (X11; Linux x86_64; Ubuntu; rv:79.0) Gecko/20100101 Firefox/79.0\", FirstVisit: true},\n\t)\n\n\trng := ztime.NewRange(ztime.Now()).To(ztime.Now())\n\n\tcmp := func(t *testing.T, want string, stats ...HitStats) {\n\t\tt.Helper()\n\n\t\tvar got string\n\t\tfor _, s := range stats {\n\t\t\tgot += string(zjson.MustMarshalIndent(s, \"\\t\\t\\t\", \"\\t\"))\n\t\t}\n\t\tif d := ztest.Diff(got, want); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t}\n\n\tfor _, filter := range [][]int64{nil} {\n\t\t// Browsers\n\t\t{\n\t\t\tvar list HitStats\n\t\t\terr := list.ListBrowsers(ctx, rng, filter, 5, 0)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tvar get HitStats\n\t\t\terr = get.ListBrowser(ctx, \"Firefox\", rng, filter, 10, 0)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tcmp(t, `{\n\t\t\t\t\"more\": false,\n\t\t\t\t\"stats\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"Firefox\",\n\t\t\t\t\t\t\"count\": 2\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}{\n\t\t\t\t\"more\": false,\n\t\t\t\t\"stats\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"Firefox 79\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"Firefox 81\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}`, list, get)\n\t\t}\n\n\t\t// Systems\n\t\t{\n\t\t\tvar list HitStats\n\t\t\terr := list.ListSystems(ctx, rng, filter, 5, 0)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tvar get HitStats\n\t\t\terr = get.ListSystem(ctx, \"Linux\", rng, filter, 10, 0)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tcmp(t, `{\n\t\t\t\t\"more\": false,\n\t\t\t\t\"stats\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"Linux\",\n\t\t\t\t\t\t\"count\": 2\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}{\n\t\t\t\t\"more\": false,\n\t\t\t\t\"stats\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"Linux\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"Linux Ubuntu\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}`, list, get)\n\t\t}\n\n\t\t// Sizes\n\t\t{\n\t\t\tvar list HitStats\n\t\t\terr := list.ListSizes(ctx, rng, filter)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tvar get HitStats\n\t\t\terr = get.ListSize(ctx, \"desktop\", rng, filter, 10, 0)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tcmp(t, strings.ReplaceAll(`{\n\t\t\t\t\"more\": false,\n\t\t\t\t\"stats\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"phone\",\n\t\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\t\"count\": 0\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"largephone\",\n\t\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"tablet\",\n\t\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\t\"count\": 0\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"desktop\",\n\t\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"desktophd\",\n\t\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\t\"count\": 0\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"unknown\",\n\t\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\t\"count\": 0\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}{\n\t\t\t\t\"more\": false,\n\t\t\t\t\"stats\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"↔\\ufe0e 1920px\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}`, `\\ufe0e`, \"\\ufe0e\"), list, get)\n\t\t}\n\n\t\t// Locations\n\t\t{\n\t\t\tvar list HitStats\n\t\t\terr := list.ListLocations(ctx, rng, filter, 5, 0)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tvar get HitStats\n\t\t\terr = get.ListLocation(ctx, \"ID\", rng, filter, 10, 0)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\n\t\t\t// We don't have the cities db in tests, so it's expected to be\n\t\t\t// blank.\n\t\t\terr = zdb.Exec(ctx, `update locations set region_name='Noord-Brabant' where iso_3166_2='NL-NB';\n\t\t\t\tupdate locations set region_name='Bali' where iso_3166_2='ID-BA';`)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tvar getRegion HitStats\n\t\t\terr = getRegion.ListLocation(ctx, \"ID\", rng, filter, 10, 0)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\n\t\t\tcmp(t, `{\n\t\t\t\t\"more\": false,\n\t\t\t\t\"stats\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"ID\",\n\t\t\t\t\t\t\"name\": \"Indonesia\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"NL\",\n\t\t\t\t\t\t\"name\": \"The Netherlands\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}{\n\t\t\t\t\"more\": false,\n\t\t\t\t\"stats\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}{\n\t\t\t\t\"more\": false,\n\t\t\t\t\"stats\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"Bali\",\n\t\t\t\t\t\t\"count\": 1\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}`, list, get, getRegion)\n\t\t}\n\t}\n}\n\nfunc TestListSizes(t *testing.T) {\n\tctx := gctest.DB(t)\n\n\t// Copy from hit_stats\n\tconst (\n\t\tsizePhones      = \"phone\"\n\t\tsizeLargePhones = \"largephone\"\n\t\tsizeTablets     = \"tablet\"\n\t\tsizeDesktop     = \"desktop\"\n\t\tsizeDesktopHD   = \"desktophd\"\n\t\tsizeUnknown     = \"unknown\"\n\t)\n\n\tnow := ztime.Now()\n\twidths := []struct {\n\t\tw  float64\n\t\tid string\n\t}{\n\t\t{0, sizeUnknown},\n\t\t{300, sizePhones},\n\t\t{1000, sizeLargePhones},\n\t\t{1100, sizeTablets},\n\t\t{1920, sizeDesktop},\n\t\t{3000, sizeDesktopHD},\n\t}\n\n\tfor _, w := range widths {\n\t\tgctest.StoreHits(ctx, t, false,\n\t\t\tHit{CreatedAt: now, Size: []float64{w.w, 0, 1}},\n\t\t\tHit{CreatedAt: now, Size: []float64{w.w, 0, 1}, FirstVisit: true},\n\t\t)\n\t}\n\tgctest.StoreHits(ctx, t, false,\n\t\tHit{CreatedAt: now, Size: []float64{4000, 0, 1}},\n\t\tHit{CreatedAt: now, Size: []float64{4000, 0, 1}, FirstVisit: true},\n\t\tHit{CreatedAt: now, Size: []float64{4200, 0, 1}},\n\t\tHit{CreatedAt: now, Size: []float64{4200, 0, 1}, FirstVisit: true},\n\t)\n\n\tt.Run(\"ListSizes\", func(t *testing.T) {\n\t\tvar s HitStats\n\t\terr := s.ListSizes(ctx, ztime.NewRange(now).To(now), nil)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\tgot := string(zjson.MustMarshalIndent(s, \"\\t\\t\", \"\\t\"))\n\t\twant := `{\n\t\t\t\"more\": false,\n\t\t\t\"stats\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"phone\",\n\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"largephone\",\n\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"tablet\",\n\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"desktop\",\n\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"desktophd\",\n\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\"count\": 3\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"unknown\",\n\t\t\t\t\t\"name\": \"\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t}`\n\t\tif d := ztest.Diff(got, want); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t})\n\n\tt.Run(\"ListSize\", func(t *testing.T) {\n\t\tvar got string\n\t\tfor _, w := range widths {\n\t\t\tvar s HitStats\n\t\t\terr := s.ListSize(ctx, w.id, ztime.NewRange(now).To(now), nil, 10, 0)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\n\t\t\tgot += string(zjson.MustMarshalIndent(s, \"\\t\\t\", \"\\t\"))\n\t\t}\n\n\t\twant := strings.ReplaceAll(`{\n\t\t\t\"more\": false,\n\t\t\t\"stats\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"↔\\ufe0e 0px\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t}{\n\t\t\t\"more\": false,\n\t\t\t\"stats\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"↔\\ufe0e 300px\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t}{\n\t\t\t\"more\": false,\n\t\t\t\"stats\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"↔\\ufe0e 1000px\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t}{\n\t\t\t\"more\": false,\n\t\t\t\"stats\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"↔\\ufe0e 1100px\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t}{\n\t\t\t\"more\": false,\n\t\t\t\"stats\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"↔\\ufe0e 1920px\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t}{\n\t\t\t\"more\": false,\n\t\t\t\"stats\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"↔\\ufe0e 3000px\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"↔\\ufe0e 4000px\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"↔\\ufe0e 4200px\",\n\t\t\t\t\t\"count\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t}`, `\\ufe0e`, \"\\ufe0e\")\n\t\tif d := ztest.Diff(got, want); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t})\n}\n\nfunc TestStatsByRef(t *testing.T) {\n\tctx := gctest.DB(t)\n\n\tgctest.StoreHits(ctx, t, false,\n\t\tHit{Path: \"/a\", Ref: \"https://example.com\"},\n\t\tHit{Path: \"/b\", Ref: \"https://example.com\"},\n\t\tHit{Path: \"/a\", Ref: \"https://example.org\"})\n\n\tvar have HitStats\n\terr := have.ListTopRef(ctx, \"example.com\", ztime.NewRange(ztime.Now().Add(-1*time.Hour)).To(ztime.Now().Add(1*time.Hour)),\n\t\t[]int64{1}, 10, 0)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\twant := `{\n\t\t\"more\": false,\n\t\t\"stats\": [{\n\t\t\t\"count\": 0,\n\t\t\t\"name\": \"/a\"\n\t\t}]\n\t}`\n\tif d := ztest.Diff(zjson.MustMarshalString(have), want, ztest.DiffJSON); d != \"\" {\n\t\tt.Error(d)\n\t}\n}\n"
        },
        {
          "name": "hit_test.go",
          "type": "blob",
          "size": 3.8017578125,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"net/url\"\n\t\"testing\"\n\n\t. \"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/zstd/ztype\"\n)\n\nfunc dayStat(days map[int]int) []int {\n\ts := make([]int, 24)\n\tfor k, v := range days {\n\t\ts[k] = v\n\t}\n\treturn s\n}\n\nfunc TestHitDefaultsRef(t *testing.T) {\n\ta := \"arp242.net\"\n\tset := ztype.Ptr(\"_\")\n\n\ttests := []struct {\n\t\tin           string\n\t\twantRef      string\n\t\twantParams   *string\n\t\twantOriginal *string\n\t\twantScheme   string\n\t}{\n\t\t{\"\", \"\", nil, nil, \"\"},\n\n\t\t{\"xx:\", \"\", nil, nil, \"o\"}, // Empty as \"xx:\" is parsed as the scheme.\n\n\t\t// Split out query parameters.\n\t\t{\"https://arp242.net\", a, nil, nil, \"h\"},\n\t\t{\"https://arp242.net?a=b\", a, ztype.Ptr(\"a=b\"), nil, \"h\"},\n\t\t{\"https://arp242.net?a=b&c=d\", a, ztype.Ptr(\"a=b&c=d\"), nil, \"h\"},\n\n\t\t// Clean up query parameters.\n\t\t{\"https://t.co/asd\", \"twitter.com/search?q=https%3A%2F%2Ft.co%2Fasd\", nil, nil, \"h\"},\n\t\t{\"https://t.co/asd?amp=1\", \"twitter.com/search?q=https%3A%2F%2Ft.co%2Fasd\", nil, nil, \"h\"},\n\t\t{\"https://arp242.net?utm_source=asd\", a, nil, set, \"h\"},\n\t\t{\"https://arp242.net?utm_source=asd&a=b\", a, ztype.Ptr(\"a=b\"), set, \"h\"},\n\n\t\t// Groups\n\t\t{\"https://mail.google.com?a=b&c=d\", \"Email\", nil, set, \"g\"},\n\t\t{\"android-app://com.laurencedawson.reddit_sync.pro\", \"www.reddit.com\", nil, set, \"g\"},\n\n\t\t// Host aliases.\n\t\t{\"https://en.m.wikipedia.org/wiki/Foo\", \"en.wikipedia.org/wiki/Foo\", nil, set, \"h\"},\n\t\t{\"https://en.m.wikipedia.org/wiki/Foo?a=b\", \"en.wikipedia.org/wiki/Foo\", ztype.Ptr(\"a=b\"), set, \"h\"},\n\n\t\t// Reddit Cleaning.\n\t\t{\"https://www.reddit.com/r/programming/top\", \"www.reddit.com/r/programming\", nil, set, \"h\"},\n\t\t{\"https://np.reddit.com/r/programming/.compact\", \"www.reddit.com/r/programming\", nil, set, \"h\"},\n\n\t\t{\"android-app://com.example.android\", \"com.example.android\", nil, nil, \"o\"},\n\n\t\t{\"/?fbclid=PAAaa9RPz6YNKOc1LT4OzcjmuQpMiQl214kJ5YluqNF77eDp8JZQJOazM_GQc\", \"\", nil, nil, \"o\"},\n\t}\n\n\tctx := gctest.DB(t)\n\n\tfor _, tt := range tests {\n\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\th := Hit{Ref: tt.in}\n\t\t\th.RefURL, _ = url.Parse(tt.in)\n\t\t\th.Defaults(ctx, false)\n\n\t\t\tif tt.wantOriginal != nil && *tt.wantOriginal == \"_\" {\n\t\t\t\ttt.wantOriginal = &tt.in\n\t\t\t}\n\n\t\t\tif h.Ref != tt.wantRef {\n\t\t\t\tt.Fatalf(\"wrong Ref\\nout:  %#v\\nwant: %#v\\n\",\n\t\t\t\t\th.Ref, tt.wantRef)\n\t\t\t}\n\t\t\tif ztype.Deref(h.RefScheme, \"\") != tt.wantScheme {\n\t\t\t\tt.Fatalf(\"wrong RefScheme\\nout:  %#v\\nwant: %#v\\n\",\n\t\t\t\t\tztype.Deref(h.RefScheme, \"\"), tt.wantScheme)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestHitDefaultsPath(t *testing.T) {\n\ttests := []struct {\n\t\tin       string\n\t\twantPath string\n\t}{\n\t\t{\"/page\", \"/page\"},\n\t\t{\"//page/\", \"/page\"},\n\t\t{\"//\", \"/\"},\n\t\t{\"\", \"\"},\n\n\t\t{\"/page?q=a\", \"/page?q=a\"},\n\t\t{\"/page?fbclid=foo\", \"/page\"},\n\t\t{\"/page/?fbclid=foo\", \"/page\"},\n\t\t{\"/page?fbclid=foo&a=b\", \"/page?a=b\"},\n\t\t{\"/page?\", \"/page\"},\n\t\t{\"/page?\", \"/page\"},\n\n\t\t{\n\t\t\t\"/storage/emulated/0/Android/data/jonas.tool.saveForOffline/files/Curl_to_shell_isn_t_so_bad2019-11-09-11-07-58/curl-to-sh.html\",\n\t\t\t\"/curl-to-sh.html\",\n\t\t},\n\n\t\t{\"/web/20200104233523/https://www.arp242.net/tmux.html\", \"/tmux.html\"},\n\t\t{\"/web/20190820072242/https://arp242.net\", \"/\"},\n\t\t{\"/web/20190820072242/https://arp242.net?a=b\", \"/?a=b\"},\n\t\t{\"/web/20190820072242/https://arp242.net?a=b&c=d\", \"/?a=b&c=d\"},\n\t\t{\"/web/20200104233523/https://www.arp242.net/many/more/slashes\", \"/many/more/slashes\"},\n\t\t{\"/web/assets/images/social-github.svg\", \"/web/assets/images/social-github.svg\"},\n\t}\n\n\tctx := gctest.DB(t)\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.in, func(t *testing.T) {\n\t\t\th := Hit{Path: tt.in}\n\t\t\th.Defaults(ctx, false)\n\n\t\t\tif h.Path != tt.wantPath {\n\t\t\t\tt.Fatalf(\"wrong Path\\nout:  %#v\\nwant: %#v\\n\",\n\t\t\t\t\th.Path, tt.wantPath)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "i18n.go",
          "type": "blob",
          "size": 4.33203125,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"embed\"\n\t\"fmt\"\n\t\"io/fs\"\n\t\"testing/fstest\"\n\n\t\"github.com/BurntSushi/toml\"\n\t\"golang.org/x/text/language\"\n\t\"zgo.at/errors\"\n\t\"zgo.at/json\"\n\t\"zgo.at/z18n\"\n\t\"zgo.at/z18n/msgfile\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zlog\"\n\t\"zgo.at/zstd/zfs\"\n)\n\n// Translations contains all translation messages.\n//\n//go:embed i18n/*\nvar translations embed.FS\n\n// Translations gets the translation messages; a user can have a local override,\n// so we need to apply that per-user.\nfunc Translations(ctx context.Context) fs.FS {\n\tbuiltin, _ := fs.Sub(translations, \"i18n\")\n\tif ctx == nil || GetUser(ctx) == nil {\n\t\treturn builtin\n\t}\n\n\tvar over OverrideTranslations\n\terr := over.Get(ctx, false)\n\tif err != nil {\n\t\treturn builtin\n\t}\n\n\tmapfs := fstest.MapFS{}\n\tfor _, o := range over {\n\t\tt, _ := o.File.TOML()\n\t\tmapfs[o.Name] = &fstest.MapFile{Data: []byte(t)}\n\t}\n\treturn zfs.NewOverlayFS(builtin, mapfs)\n}\n\nvar defaultBundle = func() *z18n.Bundle {\n\tb, err := newBundle(Translations(context.TODO()))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn b\n}()\n\nfunc DefaultLocale() *z18n.Locale {\n\treturn defaultBundle.Locale(\"en\")\n}\n\nfunc GetBundle(ctx context.Context) *z18n.Bundle {\n\tif ctx == nil || GetUser(ctx) == nil {\n\t\treturn defaultBundle\n\t}\n\n\tvar over OverrideTranslations\n\terr := over.Get(ctx, false)\n\tif err != nil {\n\t\tif !zdb.ErrNoRows(err) {\n\t\t\tzlog.Error(err)\n\t\t}\n\t\treturn defaultBundle\n\t}\n\n\tb, err := newBundle(Translations(ctx))\n\tif err != nil {\n\t\tzlog.Error(err)\n\t\treturn defaultBundle\n\t}\n\n\treturn b\n}\n\nfunc newBundle(fsys fs.FS) (*z18n.Bundle, error) {\n\tb := z18n.NewBundle(language.MustParse(\"en-GB\"))\n\terr := b.ReadMessagesDir(fsys, \"*.toml\")\n\treturn b, err\n}\n\ntype OverrideTranslation struct {\n\tName    string       `json:\"name\"`\n\tUpdated string       `json:\"updated\"`\n\tFile    msgfile.File `json:\"file\"`\n\tDiff    string       `json:\"diff\"`\n}\n\ntype OverrideTranslations []OverrideTranslation\n\nfunc (OverrideTranslations) Key(ctx context.Context) string {\n\treturn fmt.Sprintf(\"i18n-%d\", MustGetUser(ctx).ID)\n}\n\ntype wrap []wrapF\ntype wrapF struct{ Name, Updated, TOML string }\n\nfunc (o OverrideTranslations) encode() (string, error) {\n\tvar w wrap\n\tfor _, oo := range o {\n\t\tt, err := oo.File.TOML()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tw = append(w, wrapF{\n\t\t\tName:    oo.Name,\n\t\t\tUpdated: oo.Updated,\n\t\t\tTOML:    t,\n\t\t})\n\t}\n\tj, err := json.MarshalIndent(w, \"\", \"    \")\n\treturn string(j), err\n}\n\nfunc (o *OverrideTranslations) Decode(data string) error {\n\tvar w wrap\n\terr := json.Unmarshal([]byte(data), &w)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\too := make(OverrideTranslations, 0, len(w))\n\tfor _, ww := range w {\n\t\tvar f msgfile.File\n\t\t_, err := toml.Decode(ww.TOML, &f)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\too = append(oo, OverrideTranslation{\n\t\t\tName:    ww.Name,\n\t\t\tUpdated: ww.Updated,\n\t\t\tFile:    f,\n\t\t})\n\t}\n\n\t*o = oo\n\treturn nil\n}\n\nfunc (o *OverrideTranslations) Insert(ctx context.Context) error {\n\tt, err := o.encode()\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"OverrideTranslations.Insert\")\n\t}\n\n\terr = zdb.Exec(ctx, `insert into store (key, value) values (?, ?)`, o.Key(ctx), t)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"OverrideTranslations.Insert\")\n\t}\n\n\tcacheI18n(ctx).Delete(o.Key(ctx))\n\treturn nil\n}\n\nfunc (o *OverrideTranslations) Update(ctx context.Context) error {\n\tt, err := o.encode()\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"OverrideTranslations.Update\")\n\t}\n\n\terr = zdb.Exec(ctx, `update store set value=? where key=?`, t, o.Key(ctx))\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"OverrideTranslations.Update\")\n\t}\n\n\tcacheI18n(ctx).Delete(o.Key(ctx))\n\treturn nil\n}\n\nfunc (o *OverrideTranslations) Get(ctx context.Context, insert bool) error {\n\tif oo, ok := cacheI18n(ctx).Get(o.Key(ctx)); ok {\n\t\t*o = *oo.(*OverrideTranslations)\n\t\treturn nil\n\t}\n\n\tvar data []byte\n\terr := zdb.Get(ctx, &data, `select value from store where key = ?`, o.Key(ctx))\n\tif err != nil {\n\t\tif insert && zdb.ErrNoRows(err) {\n\t\t\t*o = OverrideTranslations{}\n\t\t\treturn o.Insert(ctx)\n\t\t}\n\t\treturn errors.Wrap(err, \"OverrideTranslations.Get\")\n\t}\n\n\terr = o.Decode(string(data))\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"OverrideTranslations.List\")\n\t}\n\n\tcacheI18n(ctx).SetDefault(o.Key(ctx), o)\n\treturn nil\n}\n"
        },
        {
          "name": "i18n",
          "type": "tree",
          "content": null
        },
        {
          "name": "kommentaar.conf",
          "type": "blob",
          "size": 0.9501953125,
          "content": "# vim:ft=config\n\ntitle                GoatCounter\nversion              0.1\ncontact-name         Martin Tournoij\ncontact-email        support@goatcounter.com\ncontact-site         https://www.goatcounter.com/help/api\nauth                 basic\ndescription\n\t<p>Reference documentation for the <a href=\"https://www.goatcounter.com\">GoatCounter</a> API.</p>\n\n\t<p>See <a href=\"/help/api\">/help/api</a> for a more general introduction and a few examples.</p>\n\n\t<p>Viewing this documentation at https://[my-code].goatcounter.com/api2.html (rather than using the www.goatcounter.com) enables the \"try\" feature.</p>\n\ndefault-request-ct   application/json\ndefault-response-ct  application/json\n\ndefault-response 400: zgo.at/goatcounter/v2/handlers.apiError\ndefault-response 401: zgo.at/goatcounter/v2/handlers.authError\ndefault-response 403: zgo.at/goatcounter/v2/handlers.authError\nadd-default-response 400 401 403\n\nmap-types\n    time.Time string\n\nmap-format\n    time.Time date-time\n"
        },
        {
          "name": "locations.go",
          "type": "blob",
          "size": 5.3818359375,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"bytes\"\n\t\"compress/gzip\"\n\t\"context\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\n\t\"github.com/oschwald/geoip2-golang\"\n\t\"zgo.at/errors\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zlog\"\n)\n\nvar geodb *geoip2.Reader\n\n// InitGeoDB sets up the geoDB database located at the given path.\n//\n// The database can be the \"Countries\" or \"Cities\" version.\n//\n// It will use the embeded \"Countries\" database if path is an empty string.\nfunc InitGeoDB(path string) {\n\tvar err error\n\n\tif path != \"\" {\n\t\tgeodb, err = geoip2.Open(path)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tGeoDB = nil // Save some memory.\n\t\treturn\n\t}\n\n\tgz, err := gzip.NewReader(bytes.NewReader(GeoDB))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\td, err := io.ReadAll(gz)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgeodb, err = geoip2.FromBytes(d)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\ntype Location struct {\n\tID int64 `db:\"location_id\"`\n\n\tCountry     string `db:\"country\"`\n\tRegion      string `db:\"region\"`\n\tCountryName string `db:\"country_name\"`\n\tRegionName  string `db:\"region_name\"`\n\n\t// TODO: send patch to staticcheck to deal with this better. This shouldn't\n\t// errror since \"ISO\" is an initialism.\n\tISO3166_2 string `db:\"iso_3166_2\"` //lint:ignore ST1003 staticcheck bug\n}\n\n// ByCode gets a location by ISO-3166-2 code; e.g. \"US\" or \"US-TX\".\nfunc (l *Location) ByCode(ctx context.Context, code string) error {\n\tif ll, ok := cacheLoc(ctx).Get(code); ok {\n\t\t*l = *ll.(*Location)\n\t\treturn nil\n\t}\n\n\terr := zdb.Get(ctx, l, `select * from locations where iso_3166_2 = $1`, code)\n\tif zdb.ErrNoRows(err) {\n\t\tl.ISO3166_2 = code\n\t\tl.Country, l.Region, _ = strings.Cut(code, \"-\")\n\t\tl.CountryName, l.RegionName = findGeoName(l.Country, l.Region)\n\t\terr = l.insert(ctx)\n\t}\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Location.ByCode\")\n\t}\n\n\tcacheLoc(ctx).SetDefault(l.ISO3166_2, l)\n\treturn nil\n}\n\n// Lookup a location by IPv4 or IPv6 address.\n//\n// This will insert a row in the locations table if one doesn't exist yet.\nfunc (l *Location) Lookup(ctx context.Context, ip string) error {\n\tif geodb == nil {\n\t\tpanic(\"Location.Lookup: geo.Init not called\")\n\t}\n\n\tloc, err := geodb.City(net.ParseIP(ip))\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Location.Lookup\")\n\t}\n\tl.Country = loc.Country.IsoCode\n\tl.CountryName = loc.Country.Names[\"en\"]\n\tif len(loc.Subdivisions) > 0 {\n\t\tl.Region, l.RegionName = loc.Subdivisions[0].IsoCode, loc.Subdivisions[0].Names[\"en\"]\n\t}\n\n\tl.ISO3166_2 = loc.Country.IsoCode\n\tif l.Region != \"\" {\n\t\tl.ISO3166_2 += \"-\" + l.Region\n\t}\n\tif ll, ok := cacheLoc(ctx).Get(l.ISO3166_2); ok {\n\t\t*l = *ll.(*Location)\n\t\treturn nil\n\t}\n\n\terr = zdb.Get(ctx, l,\n\t\t`select * from locations where country = $1 and region = $2`,\n\t\tl.Country, l.Region)\n\tif zdb.ErrNoRows(err) {\n\t\terr = l.insert(ctx)\n\t}\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Location.Lookup\")\n\t}\n\n\tcacheLoc(ctx).SetDefault(l.ISO3166_2, l)\n\treturn nil\n}\n\n// LookupIP is a shorthand for Lookup(); returns id 1 on errors (\"unknown\").\nfunc (l Location) LookupIP(ctx context.Context, ip string) string {\n\terr := l.Lookup(ctx, ip)\n\tif err != nil {\n\t\treturn \"\" // Special ID: \"unknown\".\n\t}\n\treturn l.ISO3166_2\n}\n\nfunc (l *Location) insert(ctx context.Context) (err error) {\n\tl.ID, err = zdb.InsertID(ctx, \"location_id\",\n\t\t`insert into locations (country, region, country_name, region_name) values (?, ?, ?, ?)`,\n\t\tl.Country, l.Region, l.CountryName, l.RegionName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Make sure there is an entry for the country as well.\n\tif l.Region != \"\" {\n\t\terr := (&Location{}).ByCode(ctx, l.Country)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Locations []Location\n\n// ListCountries lists all counties. The region code/name will always be blank.\nfunc (l *Locations) ListCountries(ctx context.Context) error {\n\terr := zdb.Select(ctx, l, `\n\t\tselect country, country_name\n        from locations\n        where country != '' and country_name != '' and region = ''\n        order by country_name`)\n\treturn errors.Wrap(err, \"Locations.ListCountries\")\n}\n\n// This takes ~13s for a full iteration for the Cities database on my laptop\n// (Countries is much faster, ~100ms) which is not a great worst case scenario,\n// but in most cases it should be (much) faster, and this should get called\n// extremely infrequently anyway, if ever.\nfunc findGeoName(country, region string) (string, string) {\n\thasRegions := geodb.Metadata().DatabaseType == \"City\"\n\titer := geodb.DB().Data()\n\tfor iter.Next() {\n\t\tvar r struct {\n\t\t\tCountry struct {\n\t\t\t\tISOCode string            `maxminddb:\"iso_code\"`\n\t\t\t\tNames   map[string]string `maxminddb:\"names\"`\n\t\t\t} `maxminddb:\"country\"`\n\t\t\tSubdivisions []struct {\n\t\t\t\tISOCode string            `maxminddb:\"iso_code\"`\n\t\t\t\tNames   map[string]string `maxminddb:\"names\"`\n\t\t\t} `maxminddb:\"subdivisions\"`\n\t\t}\n\t\terr := iter.Data(&r)\n\t\tif err != nil {\n\t\t\tzlog.Error(err)\n\t\t\treturn \"\", \"\"\n\t\t}\n\n\t\tswitch {\n\t\t// Country database, no region.\n\t\tcase r.Country.ISOCode == country && !hasRegions:\n\t\t\treturn r.Country.Names[\"en\"], \"\"\n\t\t// City database, no region requested.\n\t\tcase r.Country.ISOCode == country && region == \"\":\n\t\t\treturn r.Country.Names[\"en\"], \"\"\n\t\t// Match region.\n\t\tcase r.Country.ISOCode == country && len(r.Subdivisions) > 0 && r.Subdivisions[0].ISOCode == region:\n\t\t\treturn r.Country.Names[\"en\"], r.Subdivisions[0].Names[\"en\"]\n\t\t}\n\t}\n\treturn \"\", \"\"\n}\n"
        },
        {
          "name": "locations_test.go",
          "type": "blob",
          "size": 1.7978515625,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\n\t. \"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/ztest\"\n)\n\nfunc TestLocations(t *testing.T) {\n\tctx := gctest.DB(t)\n\n\trun := func() {\n\t\t{\n\t\t\tvar l Location\n\t\t\terr := l.Lookup(ctx, \"51.171.91.33\")\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\n\t\t\tout := fmt.Sprintf(\"%#v\", l)\n\t\t\twant := `goatcounter.Location{ID:2, Country:\"IE\", Region:\"\", CountryName:\"Ireland\", RegionName:\"\", ISO3166_2:\"IE\"}`\n\t\t\tif out != want {\n\t\t\t\tt.Error(out)\n\t\t\t}\n\t\t}\n\t\t{\n\t\t\tvar l Location\n\t\t\terr := l.ByCode(ctx, \"US-TX\")\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\n\t\t\tout := fmt.Sprintf(\"%#v\", l)\n\t\t\twant := `goatcounter.Location{ID:3, Country:\"US\", Region:\"TX\", CountryName:\"United States\", RegionName:\"\", ISO3166_2:\"US-TX\"}`\n\t\t\tif out != want {\n\t\t\t\tt.Error(out)\n\t\t\t}\n\t\t}\n\n\t\tout := zdb.DumpString(ctx, `select * from locations`)\n\t\twant := `\n\t\t\tlocation_id  iso_3166_2  country  region  country_name   region_name\n\t\t\t1                                         (unknown)\n\t\t\t2            IE          IE               Ireland\n\t\t\t3            US-TX       US       TX      United States\n\t\t\t4            US          US               United States`\n\t\tif d := ztest.Diff(out, want, ztest.DiffNormalizeWhitespace); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t}\n\n\t// Run it multiple times, since it should always give the same resuts.\n\trun()\n\trun()\n\tctx = NewContext(zdb.MustGetDB(ctx)) // Reset cache\n\trun()\n}\n\nfunc BenchmarkLocationsByCode(b *testing.B) {\n\tctx := gctest.DB(b)\n\n\tb.ReportAllocs()\n\tb.ResetTimer()\n\tfor n := 0; n < b.N; n++ {\n\t\t(&Location{}).ByCode(ctx, \"US-TX\")\n\t}\n}\n"
        },
        {
          "name": "logscan",
          "type": "tree",
          "content": null
        },
        {
          "name": "memstore.go",
          "type": "blob",
          "size": 8.9248046875,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/url\"\n\t\"slices\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"zgo.at/json\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zlog\"\n\t\"zgo.at/zstd/zbool\"\n\t\"zgo.at/zstd/zint\"\n\t\"zgo.at/zstd/ztime\"\n\t\"zgo.at/zstd/ztype\"\n\t\"zgo.at/zvalidate\"\n)\n\nvar (\n\t// Valid UUID for testing: 00112233-4455-6677-8899-aabbccddeeff\n\tTestSession    = zint.Uint128{0x11223344556677, 0x8899aabbccddeeff}\n\tTestSeqSession = zint.Uint128{TestSession[0], TestSession[1] + 1}\n)\n\ntype sessionKey string\n\ntype ms struct {\n\thitMu sync.RWMutex\n\thits  []Hit\n\n\tsessionMu     sync.RWMutex\n\tsessions      map[sessionKey]zint.Uint128         // sessionKey → sessionID\n\tsessionHashes map[zint.Uint128]sessionKey         // sessionID → sessionKey\n\tsessionPaths  map[zint.Uint128]map[int64]struct{} // SessionID → path_id\n\tsessionSeen   map[zint.Uint128]int64              // SessionID → lastseen\n\n\ttestHook bool\n}\n\nvar Memstore ms\n\ntype storedSession struct {\n\tSessions map[sessionKey]zint.Uint128         `json:\"sessions\"`\n\tHashes   map[zint.Uint128]sessionKey         `json:\"hashes\"`\n\tPaths    map[zint.Uint128]map[int64]struct{} `json:\"paths\"`\n\tSeen     map[zint.Uint128]int64              `json:\"seen\"`\n}\n\nfunc (m *ms) Reset() {\n\tm.sessionMu.Lock()\n\tdefer m.sessionMu.Unlock()\n\n\tm.sessions = make(map[sessionKey]zint.Uint128)\n\tm.sessionHashes = make(map[zint.Uint128]sessionKey)\n\tm.sessionPaths = make(map[zint.Uint128]map[int64]struct{})\n\tm.sessionSeen = make(map[zint.Uint128]int64)\n\tTestSeqSession = zint.Uint128{TestSession[0], TestSession[1] + 1}\n}\n\n// TestInit is like Init(), but enables the test hook to return sequential UUIDs\n// instead of random ones.\nfunc (m *ms) TestInit(db zdb.DB) error {\n\tm.testHook = true\n\treturn m.Init(db)\n}\n\nfunc (m *ms) Init(db zdb.DB) error {\n\tm.hitMu.Lock()\n\tdefer m.hitMu.Unlock()\n\n\tm.Reset()\n\tm.sessionMu.Lock()\n\tdefer m.sessionMu.Unlock()\n\tdefer func() {\n\t\terr := db.Exec(context.Background(), `delete from store where key='session'`)\n\t\tif err != nil {\n\t\t\tzlog.Errorf(\"Memstore.Init: delete DB store: %w\", err)\n\t\t}\n\t}()\n\n\tvar s []byte\n\terr := db.Get(context.Background(), &s, `select value from store where key='session'`)\n\tif err != nil {\n\t\tif zdb.ErrNoRows(err) {\n\t\t\treturn nil\n\t\t}\n\t\tzlog.Errorf(\"Memstore.Init: load from DB store: %w\", err)\n\t\treturn nil\n\t}\n\n\tvar stored storedSession\n\terr = json.Unmarshal(s, &stored)\n\tif err != nil {\n\t\tzlog.Errorf(\"Memstore.Init: %w\", err)\n\t\treturn nil\n\t}\n\n\tif stored.Sessions != nil {\n\t\tm.sessions = stored.Sessions\n\t}\n\tif stored.Hashes != nil {\n\t\tm.sessionHashes = stored.Hashes\n\t}\n\tif stored.Paths != nil {\n\t\tm.sessionPaths = stored.Paths\n\t}\n\tif stored.Seen != nil {\n\t\tm.sessionSeen = stored.Seen\n\t}\n\treturn nil\n}\n\nfunc (m *ms) StoreSessions(db zdb.DB) {\n\tm.sessionMu.Lock()\n\tdefer m.sessionMu.Unlock()\n\n\td, err := json.Marshal(storedSession{\n\t\tSessions: m.sessions,\n\t\tPaths:    m.sessionPaths,\n\t\tSeen:     m.sessionSeen,\n\t\tHashes:   m.sessionHashes,\n\t})\n\tif err != nil {\n\t\tzlog.Error(err)\n\t\treturn\n\t}\n\n\terr = db.Exec(context.Background(),\n\t\t`insert into store (key, value) values ('session', $1)`, d)\n\tif err != nil {\n\t\tzlog.Error(err)\n\t}\n}\n\nfunc (m *ms) Append(hits ...Hit) {\n\tm.hitMu.Lock()\n\tm.hits = append(m.hits, hits...)\n\tm.hitMu.Unlock()\n}\n\nfunc (m *ms) SessionsLen() int {\n\tm.sessionMu.Lock()\n\tdefer m.sessionMu.Unlock()\n\treturn len(m.sessions)\n}\n\nfunc (m *ms) Len() int {\n\tm.hitMu.Lock()\n\tdefer m.hitMu.Unlock()\n\treturn len(m.hits)\n}\n\nvar (\n\trefspamSubdomains []string\n\trefspamOnce       sync.Once\n)\n\nfunc isRefspam(host string) bool {\n\tif _, ok := refspam[host]; ok {\n\t\treturn true\n\t}\n\n\trefspamOnce.Do(func() {\n\t\trefspamSubdomains = make([]string, 0, len(refspam))\n\t\tfor v := range refspam {\n\t\t\trefspamSubdomains = append(refspamSubdomains, \".\"+v)\n\t\t}\n\t})\n\n\tfor _, v := range refspamSubdomains {\n\t\tif strings.HasSuffix(host, v) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc (m *ms) Persist(ctx context.Context) ([]Hit, error) {\n\tif m.Len() == 0 {\n\t\treturn nil, nil\n\t}\n\n\tm.hitMu.Lock()\n\thits := make([]Hit, len(m.hits))\n\tcopy(hits, m.hits)\n\tm.hits = make([]Hit, 0, 16)\n\tm.hitMu.Unlock()\n\n\tnewHits := make([]Hit, 0, len(hits))\n\tins := zdb.NewBulkInsert(ctx, \"hits\", []string{\"site_id\", \"path_id\", \"ref_id\",\n\t\t\"browser_id\", \"system_id\", \"size_id\", \"location\", \"language\", \"created_at\", \"bot\",\n\t\t\"session\", \"first_visit\"})\n\tfor _, h := range hits {\n\t\tif m.processHit(ctx, &h) {\n\t\t\t// Don't return hits that failed validation; otherwise cron will try to\n\t\t\t// insert them.\n\t\t\tnewHits = append(newHits, h)\n\n\t\t\tif !h.NoStore {\n\t\t\t\tins.Values(h.Site, h.PathID, h.RefID, h.BrowserID, h.SystemID, h.SizeID,\n\t\t\t\t\th.Location, h.Language, h.CreatedAt.Round(time.Second), h.Bot, h.Session, h.FirstVisit)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newHits, ins.Finish()\n}\n\nfunc (m *ms) processHit(ctx context.Context, h *Hit) bool {\n\tdefer zlog.Recover(func(l zlog.Log) zlog.Log { return l.Field(\"hit\", fmt.Sprintf(\"%#v\", h)) })\n\n\tl := zlog.Module(\"memstore\")\n\n\tif h.noProcess {\n\t\treturn true\n\t}\n\n\t// Ignore spammers.\n\th.RefURL, _ = url.Parse(h.Ref)\n\tif h.RefURL != nil {\n\t\tif isRefspam(h.RefURL.Host) {\n\t\t\tl.Debugf(\"refspam ignored: %q\", h.RefURL.Host)\n\t\t\treturn false\n\t\t}\n\t}\n\n\tvar site Site\n\terr := site.ByID(ctx, h.Site)\n\tif err != nil {\n\t\tl.Field(\"hit\", fmt.Sprintf(\"%#v\", h)).Error(err)\n\t\treturn false\n\t}\n\tctx = WithSite(ctx, &site)\n\tif !site.Settings.Collect.Has(CollectHits) && h.Bot == 0 {\n\t\th.NoStore = true\n\t}\n\n\tif !site.Settings.Collect.Has(CollectReferrer) {\n\t\th.Query = \"\"\n\t\th.Ref = \"\"\n\t\th.RefScheme = nil\n\t\th.RefURL = nil\n\t}\n\n\terr = h.Defaults(ctx, false)\n\tif err != nil {\n\t\tif errors.As(err, ztype.Ptr(&zvalidate.Validator{})) {\n\t\t\tl.Field(\"hit\", fmt.Sprintf(\"%#v\", h)).Debug(err)\n\t\t} else {\n\t\t\tl.Field(\"hit\", fmt.Sprintf(\"%#v\", h)).Error(err)\n\t\t}\n\t\treturn false\n\t}\n\n\tif h.Session.IsZero() && site.Settings.Collect.Has(CollectSession) {\n\t\th.Session, h.FirstVisit = m.session(ctx, site.ID, h.PathID, h.UserSessionID, h.UserAgentHeader, h.RemoteAddr)\n\t}\n\n\tif !site.Settings.Collect.Has(CollectSession) {\n\t\th.Session = zint.Uint128{}\n\t\th.FirstVisit = true\n\t}\n\n\tif !site.Settings.Collect.Has(CollectScreenSize) {\n\t\th.Size = nil\n\t}\n\tif !site.Settings.Collect.Has(CollectUserAgent) {\n\t\th.UserAgentHeader = \"\"\n\t\th.BrowserID = 0\n\t\th.SystemID = 0\n\t}\n\tif !site.Settings.Collect.Has(CollectLanguage) {\n\t\th.Language = nil\n\t}\n\tif !site.Settings.Collect.Has(CollectLocation) {\n\t\th.Location = \"\"\n\t}\n\tif strings.ContainsRune(h.Location, '-') {\n\t\ttrim := !site.Settings.Collect.Has(CollectLocationRegion)\n\t\tif !trim && len(site.Settings.CollectRegions) > 0 {\n\t\t\ttrim = !slices.Contains(site.Settings.CollectRegions, h.Location[:2])\n\t\t}\n\t\tif trim {\n\t\t\tvar l Location\n\t\t\terr := l.ByCode(ctx, h.Location[:2])\n\t\t\tif err != nil {\n\t\t\t\tzlog.Errorf(\"lookup %q: %w\", h.Location[:2], err)\n\t\t\t}\n\t\t\th.Location = l.ISO3166_2\n\t\t}\n\t}\n\n\tif h.Ignore() {\n\t\treturn false\n\t}\n\n\terr = h.Validate(ctx, false)\n\tif err != nil {\n\t\tl.Field(\"hit\", fmt.Sprintf(\"%#v\", h)).Error(err)\n\t\treturn false\n\t}\n\n\treturn true\n}\n\n// SessionTime is the maximum length of sessions; exported here for tests.\nvar SessionTime = 8 * time.Hour\n\n// For 10k sessions this takes about 5ms on my laptop; that's a small enough\n// delay to not overly worry about (there are rarely more than a few hundred\n// sessions at a time).\nfunc (m *ms) EvictSessions() {\n\tm.sessionMu.Lock()\n\tdefer m.sessionMu.Unlock()\n\n\tev := ztime.Now().Add(-SessionTime).Unix()\n\tfor id, seen := range m.sessionSeen {\n\t\tif seen > ev {\n\t\t\tcontinue\n\t\t}\n\n\t\tsk := m.sessionHashes[id]\n\n\t\tsessLog.Fields(zlog.F{\n\t\t\t\"session-id\":  id,\n\t\t\t\"last-seen\":   seen,\n\t\t\t\"session-key\": sk,\n\t\t}).Debug(\"evicting session\")\n\n\t\tdelete(m.sessions, sk)\n\t\tdelete(m.sessionPaths, id)\n\t\tdelete(m.sessionSeen, id)\n\t\tdelete(m.sessionHashes, id)\n\t}\n}\n\n// SessionID gets a new UUID4 session ID.\nfunc (m *ms) SessionID() zint.Uint128 {\n\tif m.testHook {\n\t\tTestSeqSession[1]++\n\t\treturn TestSeqSession\n\t}\n\treturn UUID()\n}\n\nvar sessLog = zlog.Module(\"session\")\n\nfunc (m *ms) session(ctx context.Context, siteID, pathID int64, userSessionID, ua, remoteAddr string) (zint.Uint128, zbool.Bool) {\n\tsk := sessionKey(userSessionID)\n\tif userSessionID == \"\" {\n\t\tsk = sessionKey(fmt.Sprintf(\"%s-%s-%d\", ua, remoteAddr, siteID))\n\t}\n\n\tm.sessionMu.Lock()\n\tdefer m.sessionMu.Unlock()\n\n\tid, ok := m.sessions[sk]\n\tif ok { // Existing session\n\t\tm.sessionSeen[id] = ztime.Now().Unix()\n\t\t_, seenPath := m.sessionPaths[id][pathID]\n\t\tif !seenPath {\n\t\t\tm.sessionPaths[id][pathID] = struct{}{}\n\t\t}\n\n\t\tsessLog.Fields(zlog.F{\n\t\t\t\"session-key\": sk,\n\t\t\t\"session-id\":  id,\n\t\t\t\"path\":        pathID,\n\t\t\t\"seen-path\":   seenPath,\n\t\t}).Debug(\"HIT\")\n\t\treturn id, zbool.Bool(!seenPath)\n\t}\n\n\t// New session\n\tid = m.SessionID()\n\tm.sessions[sk] = id\n\tm.sessionPaths[id] = map[int64]struct{}{pathID: struct{}{}}\n\tm.sessionSeen[id] = ztime.Now().Unix()\n\tm.sessionHashes[id] = sk\n\n\tsessLog.Fields(zlog.F{\n\t\t\"session-key\": sk,\n\t\t\"session-id\":  id,\n\t\t\"path\":        pathID,\n\t}).Debug(\"MISS: created new\")\n\treturn id, true\n}\n"
        },
        {
          "name": "memstore_test.go",
          "type": "blob",
          "size": 4.4755859375,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t. \"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/zint\"\n\t\"zgo.at/zstd/ztime\"\n)\n\nfunc TestMemstore(t *testing.T) {\n\tctx := gctest.DB(t)\n\tvar site Site\n\tsite.Defaults(ctx)\n\tsite.Settings.Collect.Set(CollectHits)\n\tctx = gctest.Site(ctx, t, &site, nil)\n\tctx = WithSite(ctx, &site)\n\n\tfor i := 0; i < 2000; i++ {\n\t\tMemstore.Append(gen(ctx))\n\t}\n\n\t_, err := Memstore.Persist(ctx)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tvar count int\n\terr = zdb.Get(ctx, &count, `select count(*) from hits`)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif count != 2000 {\n\t\tt.Errorf(\"wrong count; wanted 2000 but have %d\", count)\n\t}\n}\n\nfunc gen(ctx context.Context) Hit {\n\ts := MustGetSite(ctx)\n\treturn Hit{\n\t\tSite:            s.ID,\n\t\tSession:         TestSession,\n\t\tPath:            \"/test\",\n\t\tRef:             \"https://example.com/test\",\n\t\tUserAgentHeader: \"test\",\n\t}\n}\n\nfunc TestNextUUID(t *testing.T) {\n\twant := `11223344556677-8899aabbccddef01\n11223344556677-8899aabbccddef02\n11223344556677-8899aabbccddef03\n11223344556677-8899aabbccddeeff`\n\n\tt.Run(\"\", func(t *testing.T) {\n\t\tgctest.DB(t)\n\n\t\thave := Memstore.SessionID().Format(16) + \"\\n\" +\n\t\t\tMemstore.SessionID().Format(16) + \"\\n\" +\n\t\t\tMemstore.SessionID().Format(16) + \"\\n\" +\n\t\t\tTestSession.Format(16)\n\t\tif have != want {\n\t\t\tt.Errorf(\"wrong:\\n%s\", have)\n\t\t}\n\t})\n\n\tt.Run(\"\", func(t *testing.T) {\n\t\tgctest.DB(t)\n\n\t\thave := Memstore.SessionID().Format(16) + \"\\n\" +\n\t\t\tMemstore.SessionID().Format(16) + \"\\n\" +\n\t\t\tMemstore.SessionID().Format(16) + \"\\n\" +\n\t\t\tTestSession.Format(16)\n\t\tif have != want {\n\t\t\tt.Errorf(\"wrong after reset:\\n%s\", have)\n\t\t}\n\t})\n}\n\nfunc TestMemstoreCollect(t *testing.T) {\n\tall := func() zint.Bitflag16 {\n\t\ts := SiteSettings{}\n\t\ts.Defaults(context.Background())\n\t\ts.Collect.Set(CollectHits)\n\t\treturn s.Collect\n\t}()\n\n\ttests := []struct {\n\t\tcollect        zint.Bitflag16\n\t\tcollectRegions Strings\n\t\twant           string\n\t}{\n\t\t{all, Strings{}, `\n\t\t\tsession                           bot  path    ref          ref_scheme  size     location  first_visit\n\t\t\t00112233445566778899aabbccddeeff  0    /test   example.com  h           5,6,7.0  NL        0\n\t\t\t00112233445566778899aabbccddeeff  0    /other  xxx          c           5,6,7.0  ID-BA     1\n\t\t`},\n\n\t\t{CollectNothing, Strings{}, `\n\t\t\tsession  bot  path  ref  ref_scheme  size  location  first_visit\n\t\t`},\n\n\t\t{all ^ CollectLocationRegion, Strings{}, `\n\t\t\tsession                           bot  path    ref          ref_scheme  size     location  first_visit\n\t\t\t00112233445566778899aabbccddeeff  0    /test   example.com  h           5,6,7.0  NL        0\n\t\t\t00112233445566778899aabbccddeeff  0    /other  xxx          c           5,6,7.0  ID        1\n\t\t`},\n\n\t\t{all, Strings{\"US\"}, `\n\t\t\tsession                           bot  path    ref          ref_scheme  size     location  first_visit\n\t\t\t00112233445566778899aabbccddeeff  0    /test   example.com  h           5,6,7.0  NL        0\n\t\t\t00112233445566778899aabbccddeeff  0    /other  xxx          c           5,6,7.0  ID        1\n\t\t`},\n\t\t{all, Strings{\"ID\"}, `\n\t\t\tsession                           bot  path    ref          ref_scheme  size     location  first_visit\n\t\t\t00112233445566778899aabbccddeeff  0    /test   example.com  h           5,6,7.0  NL        0\n\t\t\t00112233445566778899aabbccddeeff  0    /other  xxx          c           5,6,7.0  ID-BA     1\n\t\t`},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\tctx := gctest.DB(t)\n\t\t\tztime.SetNow(t, \"2020-06-18\")\n\n\t\t\tsite := Site{Settings: SiteSettings{\n\t\t\t\tCollect:        tt.collect,\n\t\t\t\tCollectRegions: tt.collectRegions,\n\t\t\t}}\n\t\t\tctx = gctest.Site(ctx, t, &site, nil)\n\n\t\t\tgctest.StoreHits(ctx, t, false, Hit{\n\t\t\t\tSite:     site.ID,\n\t\t\t\tPath:     \"/test\",\n\t\t\t\tRef:      \"https://example.com\",\n\t\t\t\tLocation: \"NL\",\n\t\t\t\tSize:     Floats{5, 6, 7},\n\t\t\t}, Hit{\n\t\t\t\tSite:       site.ID,\n\t\t\t\tPath:       \"/other\",\n\t\t\t\tQuery:      \"ref=xxx\",\n\t\t\t\tLocation:   \"ID-BA\",\n\t\t\t\tSize:       Floats{5, 6, 7},\n\t\t\t\tFirstVisit: true,\n\t\t\t})\n\n\t\t\thave := zdb.DumpString(ctx, `\n\t\t\t\tselect session, bot, paths.path, refs.ref, refs.ref_scheme, sizes.size, location, first_visit\n\t\t\t\tfrom hits\n\t\t\t\tjoin paths using (path_id)\n\t\t\t\tleft join refs  using (ref_id)\n\t\t\t\tleft join sizes using (size_id)\n\t\t\t`)\n\t\t\tif d := zdb.Diff(have, tt.want); d != \"\" {\n\t\t\t\tt.Error(d)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "metrics",
          "type": "tree",
          "content": null
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.876953125,
          "content": "[[headers]]\n\tfor = \"/*\"\n\t[headers.values]\n\t\t# Netlify sets cache to 0 to allow rollbacks, but we use \"cache buster\"\n\t\t# query parameters for the backend, so we can just cache this.\n\t\tCache-Control = \"public, max-age=7776000\"  # 90 days\n\t\tAccess-Control-Allow-Origin = \"*\"\n\n[[headers]]\n\tfor = \"/count.js\"\n\t[headers.values]\n\t\t# Don't cache count.js too aggressively so changes don't take too long\n\t\t# to show up, but it's okay to cache for a few days.\n\t\tCache-Control = \"public, max-age=604800\"  # 7 days\n\t\tCross-Origin-Resource-Policy = \"cross-origin\"\n\n[[headers]]\n\tfor = \"/count.v*.js\"\n\t[headers.values]\n\t\t# The versioned count.js never change; we can cache very aggressively.\n\t\tCache-Control = \"public, max-age=31968000\"  # 1 year\n\t\tCross-Origin-Resource-Policy = \"cross-origin\"\n\n# count.min.js no longer exists, so redirect to count.js\n[[redirects]]\n  from = \"/count.min.js\"\n  to   = \"/count.js\"\n"
        },
        {
          "name": "pack",
          "type": "tree",
          "content": null
        },
        {
          "name": "path.go",
          "type": "blob",
          "size": 4.21875,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"strconv\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/zcache\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zlog\"\n\t\"zgo.at/zstd/zbool\"\n)\n\ntype Path struct {\n\tID    int64      `db:\"path_id\" json:\"id\"` // Path ID\n\tSite  int64      `db:\"site_id\" json:\"-\"`\n\tPath  string     `db:\"path\" json:\"path\"`   // Path name\n\tTitle string     `db:\"title\" json:\"title\"` // Page title\n\tEvent zbool.Bool `db:\"event\" json:\"event\"` // Is this an event?\n}\n\nfunc (p *Path) Defaults(ctx context.Context) {}\n\nfunc (p *Path) Validate(ctx context.Context) error {\n\tv := NewValidate(ctx)\n\n\tv.UTF8(\"path\", p.Path)\n\tv.UTF8(\"title\", p.Title)\n\tv.Len(\"path\", p.Path, 1, 2048)\n\tv.Len(\"title\", p.Title, 0, 1024)\n\n\treturn v.ErrorOrNil()\n}\n\nfunc (p *Path) ByID(ctx context.Context, id int64) error {\n\treturn errors.Wrapf(zdb.Get(ctx, p,\n\t\t`/* Path.ByID */ select * from paths where path_id=? and site_id=?`,\n\t\tid, MustGetSite(ctx).ID), \"Path.ByID %d\", id)\n}\n\nfunc (p *Path) GetOrInsert(ctx context.Context) error {\n\tsite := MustGetSite(ctx)\n\ttitle := p.Title\n\tk := strconv.FormatInt(site.ID, 10) + p.Path\n\tc, ok := cachePaths(ctx).Get(k)\n\tif ok {\n\t\t*p = c.(Path)\n\t\tcachePaths(ctx).Touch(k, zcache.DefaultExpiration)\n\n\t\terr := p.updateTitle(ctx, p.Title, title)\n\t\tif err != nil {\n\t\t\tzlog.Fields(zlog.F{\n\t\t\t\t\"path_id\": p.ID,\n\t\t\t\t\"title\":   title,\n\t\t\t}).Error(err)\n\t\t}\n\t\treturn nil\n\t}\n\n\tp.Defaults(ctx)\n\terr := p.Validate(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = zdb.Get(ctx, p, `/* Path.GetOrInsert */\n\t\tselect * from paths\n\t\twhere site_id = $1 and lower(path) = lower($2)\n\t\tlimit 1`, site.ID, p.Path)\n\tif err != nil && !zdb.ErrNoRows(err) {\n\t\treturn errors.Errorf(\"Path.GetOrInsert select: %w\", err)\n\t}\n\tif err == nil {\n\t\terr := p.updateTitle(ctx, p.Title, title)\n\t\tif err != nil {\n\t\t\tzlog.Fields(zlog.F{\n\t\t\t\t\"path_id\": p.ID,\n\t\t\t\t\"title\":   title,\n\t\t\t}).Error(err)\n\t\t}\n\t\tcachePaths(ctx).SetDefault(k, *p)\n\t\treturn nil\n\t}\n\n\t// Insert new row.\n\tp.ID, err = zdb.InsertID(ctx, \"path_id\",\n\t\t`insert into paths (site_id, path, title, event) values (?, ?, ?, ?)`,\n\t\tsite.ID, p.Path, p.Title, p.Event)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Path.GetOrInsert insert\")\n\t}\n\n\tcachePaths(ctx).SetDefault(k, *p)\n\treturn nil\n}\n\nfunc (p Path) updateTitle(ctx context.Context, currentTitle, newTitle string) error {\n\tif newTitle == currentTitle {\n\t\treturn nil\n\t}\n\n\tk := strconv.FormatInt(p.ID, 10)\n\t_, ok := cacheChangedTitles(ctx).Get(k)\n\tif !ok {\n\t\tcacheChangedTitles(ctx).SetDefault(k, []string{newTitle})\n\t\treturn nil\n\t}\n\n\tvar titles []string\n\tcacheChangedTitles(ctx).Modify(k, func(v any) any {\n\t\tvv := v.([]string)\n\t\tvv = append(vv, newTitle)\n\t\ttitles = vv\n\t\treturn vv\n\t})\n\n\tgrouped := make(map[string]int)\n\tfor _, t := range titles {\n\t\tgrouped[t]++\n\t}\n\n\tfor t, n := range grouped {\n\t\tif n > 10 {\n\t\t\terr := zdb.Exec(ctx, `update paths set title = $1 where path_id = $2`, t, p.ID)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"Paths.updateTitle\")\n\t\t\t}\n\t\t\tcacheChangedTitles(ctx).Delete(k)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn nil\n}\n\ntype Paths []Path\n\n// List all paths for a site.\nfunc (p *Paths) List(ctx context.Context, siteID, after int64, limit int) (bool, error) {\n\terr := zdb.Select(ctx, p, \"load:paths.List\", map[string]any{\n\t\t\"site\":  siteID,\n\t\t\"after\": after,\n\t\t\"limit\": limit + 1,\n\t})\n\tif err != nil {\n\t\treturn false, errors.Wrap(err, \"Paths.List\")\n\t}\n\n\tmore := len(*p) > limit\n\tif more {\n\t\tpp := *p\n\t\tpp = pp[:len(pp)-1]\n\t\t*p = pp\n\t}\n\treturn more, nil\n}\n\n// PathFilter returns a list of IDs matching the path name.\n//\n// if matchTitle is true it will match the title as well.\nfunc PathFilter(ctx context.Context, filter string, matchTitle bool) ([]int64, error) {\n\tvar paths []int64\n\terr := zdb.Select(ctx, &paths, \"load:paths.PathFilter\", map[string]any{\n\t\t\"site\":        MustGetSite(ctx).ID,\n\t\t\"filter\":      \"%\" + filter + \"%\",\n\t\t\"match_title\": matchTitle,\n\t})\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"PathFilter\")\n\t}\n\n\t// Nothing matches: make sure there's a slice with an invalid path_id, so\n\t// the queries using the result don't select anything.\n\tif len(paths) == 0 {\n\t\tpaths = []int64{-1}\n\t}\n\treturn paths, nil\n}\n"
        },
        {
          "name": "path_test.go",
          "type": "blob",
          "size": 1.134765625,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"testing\"\n\n\t. \"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/zdb\"\n)\n\nfunc TestPathsUpdateTitle(t *testing.T) {\n\tctx := gctest.DB(t)\n\n\twantTitle := func(want string) {\n\t\tvar got string\n\t\terr := zdb.Get(ctx, &got, `select title from paths limit 1`)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\tif want != got {\n\t\t\tt.Errorf(\"want: %q, got: %q\", want, got)\n\t\t}\n\t}\n\n\tp := Path{Path: \"/x\", Title: \"original\"}\n\terr := p.GetOrInsert(ctx)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\twantTitle(\"original\")\n\n\tfor i := 0; i < 10; i++ {\n\t\tp2 := Path{Path: \"/x\", Title: \"new\"}\n\t\terr := p2.GetOrInsert(ctx)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tif p2.ID != p.ID {\n\t\t\tt.Fatalf(\"wrong ID: %d\", p2.ID)\n\t\t}\n\t\twantTitle(\"original\")\n\t}\n\n\tp2 := Path{Path: \"/x\", Title: \"new\"}\n\terr = p2.GetOrInsert(ctx)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif p2.ID != p.ID {\n\t\tt.Fatalf(\"wrong ID: %d\", p2.ID)\n\t}\n\twantTitle(\"new\")\n}\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "ref.go",
          "type": "blob",
          "size": 7.4599609375,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/zcache\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/ztime\"\n\t\"zgo.at/zstd/ztype\"\n)\n\n// ref_scheme column\nvar (\n\tRefSchemeHTTP      = ztype.Ptr(\"h\")\n\tRefSchemeOther     = ztype.Ptr(\"o\")\n\tRefSchemeGenerated = ztype.Ptr(\"g\")\n\tRefSchemeCampaign  = ztype.Ptr(\"c\")\n)\n\nvar groups = map[string]string{\n\t// HN has <meta name=\"referrer\" content=\"origin\"> so we only get the domain.\n\t\"news.ycombinator.com\":               \"Hacker News\",\n\t\"hn.algolia.com\":                     \"Hacker News\",\n\t\"hckrnews.com\":                       \"Hacker News\",\n\t\"hn.premii.com\":                      \"Hacker News\",\n\t\"com.stefandekanski.hackernews.free\": \"Hacker News\",\n\t\"io.github.hidroh.materialistic\":     \"Hacker News\",\n\t\"hackerweb.app\":                      \"Hacker News\",\n\t\"www.daemonology.net/hn-daily\":       \"Hacker News\",\n\t\"quiethn.com\":                        \"Hacker News\",\n\t\"hnews.xyz\":                          \"Hacker News\",\n\t\"hackernewsmobile.com\":               \"Hacker News\",\n\t// http://www.elegantreader.com/item/17358103\n\t// https://www.daemonology.net/hn-daily/2019-05.html\n\n\t\"mail.google.com\":       \"Email\",\n\t\"com.google.android.gm\": \"Email\",\n\t\"mail.yahoo.com\":        \"Email\",\n\t//  https://mailchi.mp\n\n\t\"org.fox.ttrss\":            \"RSS\",\n\t\"www.inoreader.com\":        \"RSS\",\n\t\"com.innologica.inoreader\": \"RSS\",\n\t\"usepanda.com\":             \"RSS\",\n\t\"feedly.com\":               \"RSS\",\n\n\t\"com.google.android.googlequicksearchbox\":                      \"Google\",\n\t\"com.google.android.googlequicksearchbox/https/www.google.com\": \"Google\",\n\n\t\"com.andrewshu.android.reddit\":       \"www.reddit.com\",\n\t\"com.laurencedawson.reddit_sync\":     \"www.reddit.com\",\n\t\"com.laurencedawson.reddit_sync.dev\": \"www.reddit.com\",\n\t\"com.laurencedawson.reddit_sync.pro\": \"www.reddit.com\",\n\n\t\"m.facebook.com\":  \"www.facebook.com\",\n\t\"l.facebook.com\":  \"www.facebook.com\",\n\t\"lm.facebook.com\": \"www.facebook.com\",\n\n\t\"org.telegram.messenger\": \"Telegram Messenger\",\n\n\t// Slack\n\t\"com.slack\": \"Slack Chat\",\n\n\t// Baidu\n\t\"baidu.com\":         \"Baidu\",\n\t\"c.tieba.baidu.com\": \"Baidu\",\n\t\"m.baidu.com\":       \"Baidu\",\n\t\"tieba.baidu.com\":   \"Baidu\",\n\t\"www.baidu.com\":     \"Baidu\",\n}\n\nvar hostAlias = map[string]string{\n\t\"en.m.wikipedia.org\": \"en.wikipedia.org\",\n\t\"m.facebook.com\":     \"www.facebook.com\",\n\t\"m.habr.com\":         \"habr.com\",\n\t\"old.reddit.com\":     \"www.reddit.com\",\n\t\"i.reddit.com\":       \"www.reddit.com\",\n\t\"np.reddit.com\":      \"www.reddit.com\",\n\t\"fr.reddit.com\":      \"www.reddit.com\",\n}\n\ntype Ref struct {\n\tID        int64   `db:\"ref_id\"`\n\tRef       string  `db:\"ref\"`\n\tRefScheme *string `db:\"ref_scheme\"`\n}\n\nfunc (r *Ref) Defaults(ctx context.Context) {}\n\nfunc (r *Ref) Validate(ctx context.Context) error {\n\tv := NewValidate(ctx)\n\n\t//v.Required(\"ref\", r.Ref)\n\t//v.Required(\"ref_scheme\", r.RefScheme)\n\n\tv.UTF8(\"ref\", r.Ref)\n\tv.Len(\"ref\", r.Ref, 0, 2048)\n\n\treturn v.ErrorOrNil()\n}\n\nfunc (r *Ref) GetOrInsert(ctx context.Context) error {\n\tk := r.Ref\n\tif r.RefScheme != nil {\n\t\tk += string(*r.RefScheme)\n\t}\n\tif r.Ref == \"\" && r.RefScheme == nil {\n\t\tr.ID = 1\n\t\treturn nil\n\t}\n\tc, ok := cacheRefs(ctx).Get(k)\n\tif ok {\n\t\t*r = c.(Ref)\n\t\tcacheRefs(ctx).Touch(k, zcache.DefaultExpiration)\n\t\treturn nil\n\t}\n\n\tr.Defaults(ctx)\n\terr := r.Validate(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = zdb.Get(ctx, r, `/* Ref.GetOrInsert */\n\t\tselect * from refs\n\t\twhere lower(ref) = lower(?) and ref_scheme = ?\n\t\tlimit 1`, r.Ref, r.RefScheme)\n\tif err == nil {\n\t\tcacheRefs(ctx).SetDefault(k, *r)\n\t\treturn nil\n\t}\n\tif !zdb.ErrNoRows(err) {\n\t\treturn errors.Wrap(err, \"Ref.GetOrInsert get\")\n\t}\n\n\tr.ID, err = zdb.InsertID(ctx, \"ref_id\",\n\t\t`insert into refs (ref, ref_scheme) values (?, ?)`,\n\t\tr.Ref, r.RefScheme)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Ref.GetOrInsert insert\")\n\t}\n\n\tcacheRefs(ctx).SetDefault(k, *r)\n\treturn nil\n}\n\nfunc cleanRefURL(ref string, refURL *url.URL) (string, bool) {\n\t// I'm not sure where these links are generated, but there are *a lot* of\n\t// them.\n\tif refURL.Host == \"link.oreilly.com\" {\n\t\treturn \"link.oreilly.com\", false\n\t}\n\n\t// Always remove protocol.\n\tref = strings.TrimPrefix(ref, refURL.Scheme)\n\trefURL.Scheme = \"\"\n\n\t// Normalize some hosts.\n\tif a, ok := hostAlias[refURL.Host]; ok {\n\t\trefURL.Host = a\n\t}\n\n\t// Group based on URL.\n\tif strings.HasPrefix(refURL.Host, \"www.google.\") || strings.HasPrefix(refURL.Host, \"google.\") {\n\t\t// Group all \"google.co.nz\", \"google.nl\", etc. as \"Google\".\n\t\treturn \"Google\", true\n\t}\n\n\tif strings.Contains(refURL.Host, \"search.yahoo.com\") {\n\t\treturn \"Yahoo\", true\n\t}\n\n\tif g, ok := groups[strings.ToLower(refURL.Host)]; ok {\n\t\treturn g, true\n\t}\n\tif g, ok := groups[strings.ToLower(ref)]; ok {\n\t\treturn g, true\n\t}\n\n\t// Useful: https://lobste.rs/s/tslw6k/why_i_m_still_using_jquery_2019\n\t// Not really: https://lobste.rs/newest/page/8, https://lobste.rs/page/7\n\t//             https://lobste.rs/search, https://lobste.rs/t/javascript\n\tif refURL.Host == \"lobste.rs\" && !strings.HasPrefix(refURL.Path, \"/s/\") {\n\t\treturn \"lobste.rs\", false\n\t}\n\tif refURL.Host == \"gambe.ro\" && !strings.HasPrefix(refURL.Path, \"/s/\") {\n\t\treturn \"lobste.rs\", false\n\t}\n\n\t// No sense in retaining path for Pocket:\n\t// app.getpocket.com\n\t// app.getpocket.com/read/2369667792\n\t// getpocket.com\n\t// getpocket.com/a/read/2580004052\n\t// getpocket.com/recommendations\n\t// getpocket.com/redirect\n\t// getpocket.com/users/AAA/feed/read\n\tif refURL.Host == \"getpocket.com\" || refURL.Host == \"app.getpocket.com\" {\n\t\treturn \"getpocket.com\", false\n\t}\n\n\t// Reddit\n\t// www.reddit.com/r/programming/top\n\t// www.reddit.com/r/programming/.compact\n\t// www.reddit.com/r/programming.compact\n\t// www.reddit.com/r/webdev/new\n\t// www.reddit.com/r/vim/search\n\tif refURL.Host == \"www.reddit.com\" {\n\t\tswitch {\n\t\tcase strings.HasSuffix(refURL.Path, \"/top\") || strings.HasSuffix(refURL.Path, \"/new\"):\n\t\t\trefURL.Path = refURL.Path[:len(refURL.Path)-4]\n\t\tcase strings.HasSuffix(refURL.Path, \"/search\"):\n\t\t\trefURL.Path = refURL.Path[:len(refURL.Path)-7]\n\t\tcase strings.HasSuffix(refURL.Path, \".compact\"):\n\t\t\trefURL.Path = refURL.Path[:len(refURL.Path)-8]\n\t\t}\n\t}\n\n\t// Linking https://t.co/c3MITw38Yq isn't too useful as that will link back\n\t// to the page, so link to the Tweet instead.\n\tif refURL.Host == \"t.co\" && len(refURL.Path) > 1 {\n\t\treturn \"twitter.com/search?q=https%3A%2F%2Ft.co\" +\n\t\t\turl.QueryEscape(refURL.Path), false\n\t}\n\n\t// Clean query parameters.\n\ti := strings.Index(ref, \"?\")\n\tif i == -1 {\n\t\t// No parameters so no work.\n\t\treturn strings.TrimLeft(refURL.String(), \"/\"), false\n\t}\n\n\tq := refURL.Query()\n\trefURL.RawQuery = \"\"\n\n\tq.Del(\"utm_source\") // Google analytics tracking parameters.\n\tq.Del(\"utm_medium\")\n\tq.Del(\"utm_campaign\")\n\tq.Del(\"utm_term\")\n\tq.Del(\"utm_content\")\n\n\tq.Del(\"__cf_chl_captcha_tk__\") // Cloudflare\n\tq.Del(\"__cf_chl_jschl_tk__\")\n\n\ts := refURL.String()\n\tif len(s) > 1 {\n\t\treturn s[2:], false\n\t}\n\treturn \"/\", false\n}\n\n// ListRefsByPath lists all references for a pathID.\nfunc (h *HitStats) ListRefsByPathID(ctx context.Context, pathID int64, rng ztime.Range, limit, offset int) error {\n\terr := zdb.Select(ctx, &h.Stats, \"load:ref.ListRefsByPathID.sql\", map[string]any{\n\t\t\"site\":   MustGetSite(ctx).ID,\n\t\t\"start\":  rng.Start,\n\t\t\"end\":    rng.End,\n\t\t\"path\":   pathID,\n\t\t\"limit\":  limit + 1,\n\t\t\"offset\": offset,\n\t})\n\n\tif len(h.Stats) > limit {\n\t\th.More = true\n\t\th.Stats = h.Stats[:len(h.Stats)-1]\n\t}\n\treturn errors.Wrap(err, \"HitStats.ListRefsByPathID\")\n}\n"
        },
        {
          "name": "ref_test.go",
          "type": "blob",
          "size": 2.322265625,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t. \"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/zstd/zjson\"\n\t\"zgo.at/zstd/ztest\"\n\t\"zgo.at/zstd/ztime\"\n)\n\nfunc TestListRefsByPathID(t *testing.T) {\n\tctx := gctest.DB(t)\n\n\tgctest.StoreHits(ctx, t, false,\n\t\tHit{Path: \"/x\", Ref: \"http://example.com\"},\n\t\tHit{Path: \"/x\", Ref: \"http://example.com\"},\n\t\tHit{Path: \"/x\", Ref: \"http://example.org\"},\n\t\tHit{Path: \"/y\", Ref: \"http://example.org\"})\n\n\trng := ztime.NewRange(ztime.Now().Add(-1 * time.Hour)).To(ztime.Now().Add(1 * time.Hour))\n\n\tvar have HitStats\n\terr := have.ListRefsByPathID(ctx, 1, rng, 10, 0)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\twant := `{\n\t\t\"more\": false,\n\t\t\"stats\": [{\n\t\t\t\"count\": 0,\n\t\t\t\"name\": \"example.com\",\n\t\t\t\"ref_scheme\": \"h\"\n\t\t}, {\n\t\t\t\"count\": 0,\n\t\t\t\"name\": \"example.org\",\n\t\t\t\"ref_scheme\": \"h\"\n\t\t}]}`\n\tif d := ztest.Diff(zjson.MustMarshalString(have), want, ztest.DiffJSON); d != \"\" {\n\t\tt.Error(d)\n\t}\n}\n\nfunc TestListTopRefs(t *testing.T) {\n\tctx := gctest.DB(t)\n\n\tgctest.StoreHits(ctx, t, false,\n\t\tHit{Path: \"/x\", Ref: \"http://example.com\", FirstVisit: true},\n\t\tHit{Path: \"/x\", Ref: \"http://example.com\"},\n\t\tHit{Path: \"/x\", Ref: \"http://example.org\"},\n\t\tHit{Path: \"/y\", Ref: \"http://example.org\", FirstVisit: true},\n\t\tHit{Path: \"/x\", Ref: \"http://example.org\"})\n\n\trng := ztime.NewRange(ztime.Now().Add(-1 * time.Hour)).To(ztime.Now().Add(1 * time.Hour))\n\n\t{\n\t\tvar have HitStats\n\t\terr := have.ListTopRefs(ctx, rng, nil, 10, 0)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\twant := `{\n\t\t\t\"more\": false,\n\t\t\t\"stats\": [{\n\t\t\t\t\"name\": \"example.com\",\n\t\t\t\t\"count\": 1,\n\t\t\t\t\"ref_scheme\": \"h\"\n\t\t\t}, {\n\t\t\t\t\"name\": \"example.org\",\n\t\t\t\t\"count\": 1,\n\t\t\t\t\"ref_scheme\": \"h\"\n\t\t\t}]\n\t\t}`\n\t\tif d := ztest.Diff(zjson.MustMarshalString(have), want, ztest.DiffJSON); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t}\n\n\t{\n\t\tvar have HitStats\n\t\terr := have.ListTopRefs(ctx, rng, []int64{2}, 10, 0)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\n\t\twant := `{\n\t\t\t\"more\": false,\n\t\t\t\"stats\": [{\n\t\t\t\t\"name\": \"example.org\",\n\t\t\t\t\"count\": 1,\n\t\t\t\t\"ref_scheme\": \"h\"\n\t\t\t}]\n\t\t}`\n\t\tif d := ztest.Diff(zjson.MustMarshalString(have), want, ztest.DiffJSON); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "refspam.go",
          "type": "blob",
          "size": 103.638671875,
          "content": "// Code generated by CLI command below; DO NOT EDIT.\n\npackage goatcounter\n\n/*\ncurl -s https://raw.githubusercontent.com/matomo-org/referrer-spam-list/master/spammers.txt |\nsort -u |\nsed 's!.*!\\t\"\\0\": {},!' |\nsed -e '/^\\t\\/\\/ %%START%%/r /dev/stdin' -e '/^\\t\\/\\/ %%START%%/,/^\\t\\/\\/ %%END%%/{//!d}' refspam.go |\ngofmt > x && mv -f x refspam.go\n*/\nvar refspam = map[string]struct{}{\n\t\"localhost\": {}, // Not spam, but we never really want to accept requests from localhost.\n\n\t// %%START%%\n\t\"0-0.fr\":                               {},\n\t\"01casino-x.ru\":                        {},\n\t\"033nachtvandeliteratuur.nl\":           {},\n\t\"03e.info\":                             {},\n\t\"03p.info\":                             {},\n\t\"0n-line.tv\":                           {},\n\t\"1-99seo.com\":                          {},\n\t\"1-best-seo.com\":                       {},\n\t\"1-free-share-buttons.com\":             {},\n\t\"100-reasons-for-seo.com\":              {},\n\t\"100dollars-seo.com\":                   {},\n\t\"12-reasons-for-seo.net\":               {},\n\t\"12masterov.com\":                       {},\n\t\"12u.info\":                             {},\n\t\"15-reasons-for-seo.com\":               {},\n\t\"1kreditzaim.ru\":                       {},\n\t\"1pamm.ru\":                             {},\n\t\"1st-urist.ru\":                         {},\n\t\"1webmaster.ml\":                        {},\n\t\"1wek.top\":                             {},\n\t\"1winru.ru\":                            {},\n\t\"1x-slot.site\":                         {},\n\t\"1x-slots.site\":                        {},\n\t\"1xbet-entry.ru\":                       {},\n\t\"1xbetcc.com\":                          {},\n\t\"1xbetonlines1.ru\":                     {},\n\t\"1xbetportugal.com\":                    {},\n\t\"1xbetts.ru\":                           {},\n\t\"1xslot-casino.online\":                 {},\n\t\"1xslot-casino.ru\":                     {},\n\t\"1xslot-casino.site\":                   {},\n\t\"1xslot.site\":                          {},\n\t\"1xslots-africa.site\":                  {},\n\t\"1xslots-brasil.site\":                  {},\n\t\"1xslots-casino.site\":                  {},\n\t\"1xslots.africa\":                       {},\n\t\"1xslots.site\":                         {},\n\t\"2-best-seo.com\":                       {},\n\t\"2-easy.xyz\":                           {},\n\t\"2-go-now.xyz\":                         {},\n\t\"24h.doctor\":                           {},\n\t\"24x7-server-support.site\":             {},\n\t\"2your.site\":                           {},\n\t\"3-best-seo.com\":                       {},\n\t\"3-letter-domains.net\":                 {},\n\t\"3dgame3d.com\":                         {},\n\t\"3waynetworks.com\":                     {},\n\t\"4-best-seo.com\":                       {},\n\t\"40momporntube.com\":                    {},\n\t\"4inn.ru\":                              {},\n\t\"4ip.su\":                               {},\n\t\"4istoshop.com\":                        {},\n\t\"4webmasters.org\":                      {},\n\t\"4xcasino.ru\":                          {},\n\t\"5-best-seo.com\":                       {},\n\t\"5-steps-to-start-business.com\":        {},\n\t\"5elementov.ru\":                        {},\n\t\"5forex.ru\":                            {},\n\t\"6-best-seo.com\":                       {},\n\t\"69-13-59.ru\":                          {},\n\t\"6hopping.com\":                         {},\n\t\"7-best-seo.com\":                       {},\n\t\"70casino.online\":                      {},\n\t\"7kop.ru\":                              {},\n\t\"7makemoneyonline.com\":                 {},\n\t\"7milliondollars.com\":                  {},\n\t\"7ooo.ru\":                              {},\n\t\"7zap.com\":                             {},\n\t\"8-best-seo.com\":                       {},\n\t\"8xv8.com\":                             {},\n\t\"9-best-seo.com\":                       {},\n\t\"99-reasons-for-seo.com\":               {},\n\t\"QIWI.xyz\":                             {},\n\t\"a-elita.in.ua\":                        {},\n\t\"abacoasale.xyz\":                       {},\n\t\"abaiak.com\":                           {},\n\t\"abcdefh.xyz\":                          {},\n\t\"abcdeg.xyz\":                           {},\n\t\"abclauncher.com\":                      {},\n\t\"abuser.shop\":                          {},\n\t\"acads.net\":                            {},\n\t\"acarreo.ru\":                           {},\n\t\"account-my1.xyz\":                      {},\n\t\"accs-store.ru\":                        {},\n\t\"actualremont.ru\":                      {},\n\t\"acunetix-referrer.com\":                {},\n\t\"adanih.com\":                           {},\n\t\"adcash.com\":                           {},\n\t\"adelachrist.top\":                      {},\n\t\"adf.ly\":                               {},\n\t\"adpostmalta.com\":                      {},\n\t\"adrenalinebot.net\":                    {},\n\t\"adrenalinebot.ru\":                     {},\n\t\"adspart.com\":                          {},\n\t\"adtiger.tk\":                           {},\n\t\"adult-video-chat.ru\":                  {},\n\t\"adventureparkcostarica.com\":           {},\n\t\"advertisefree.co.uk\":                  {},\n\t\"adviceforum.info\":                     {},\n\t\"advokateg.xyz\":                        {},\n\t\"aerodizain.com\":                       {},\n\t\"aerotour.ru\":                          {},\n\t\"affiliate-programs.biz\":               {},\n\t\"affordablewebsitesandmobileapps.com\":  {},\n\t\"afora.ru\":                             {},\n\t\"afshan.shop\":                          {},\n\t\"agro-gid.com\":                         {},\n\t\"agtl.com.ua\":                          {},\n\t\"ahecmarket.xyz\":                       {},\n\t\"ahhjf.com\":                            {},\n\t\"ai-seo-services.com\":                  {},\n\t\"aibolita.com\":                         {},\n\t\"aidarmebel.kz\":                        {},\n\t\"aimeesblog.xyz\":                       {},\n\t\"aimiot.net\":                           {},\n\t\"aitiman.ae\":                           {},\n\t\"akmussale.xyz\":                        {},\n\t\"akuhni.by\":                            {},\n\t\"albuteroli.com\":                       {},\n\t\"alcobutik24.com\":                      {},\n\t\"alertomall.xyz\":                       {},\n\t\"alexsander.ch\":                        {},\n\t\"alfabot.xyz\":                          {},\n\t\"alibestsale.com\":                      {},\n\t\"aliexsale.ru\":                         {},\n\t\"alinabaniecka.pl\":                     {},\n\t\"aliviahome.online\":                    {},\n\t\"alkanfarma.org\":                       {},\n\t\"all-news.kz\":                          {},\n\t\"all4bath.ru\":                          {},\n\t\"allcryptonews.com\":                    {},\n\t\"allergick.com\":                        {},\n\t\"allergija.com\":                        {},\n\t\"allfan.ru\":                            {},\n\t\"allknow.info\":                         {},\n\t\"allmarketsnewdayli.gdn\":               {},\n\t\"allnews.md\":                           {},\n\t\"allnews24.in\":                         {},\n\t\"allproblog.com\":                       {},\n\t\"allvacancy.ru\":                        {},\n\t\"allwomen.info\":                        {},\n\t\"allwrighter.ru\":                       {},\n\t\"alma-mramor.com.ua\":                   {},\n\t\"alp-rk.ru\":                            {},\n\t\"alphaopt24.ru\":                        {},\n\t\"alpharma.net\":                         {},\n\t\"altermix.ua\":                          {},\n\t\"amatocanizalez.net\":                   {},\n\t\"amazon-seo-service.com\":               {},\n\t\"amos-kids.ru\":                         {},\n\t\"amp-project.pro\":                      {},\n\t\"amt-k.ru\":                             {},\n\t\"amtel-vredestein.com\":                 {},\n\t\"amylynnandrews.xyz\":                   {},\n\t\"anabolics.shop\":                       {},\n\t\"analytics-ads.xyz\":                    {},\n\t\"ananumous.ru\":                         {},\n\t\"anapa-inns.ru\":                        {},\n\t\"andrewancheta.com\":                    {},\n\t\"android-style.com\":                    {},\n\t\"animalphotos.xyz\":                     {},\n\t\"animenime.ru\":                         {},\n\t\"annaeydlish.top\":                      {},\n\t\"anrtmall.xyz\":                         {},\n\t\"anti-crisis-seo.com\":                  {},\n\t\"anticrawler.org\":                      {},\n\t\"antiguabarbuda.ru\":                    {},\n\t\"antonovich-design.com.ua\":             {},\n\t\"anydesk.site\":                         {},\n\t\"aoul.top\":                             {},\n\t\"apilian.xyz\":                          {},\n\t\"apollon-market-url.org\":               {},\n\t\"applepharma.ru\":                       {},\n\t\"apteka-doc.ru\":                        {},\n\t\"apteka-pharm.ru\":                      {},\n\t\"apteka.info\":                          {},\n\t\"arabic-poetry.com\":                    {},\n\t\"arendadogovor.ru\":                     {},\n\t\"arendakvartir.kz\":                     {},\n\t\"arendovalka.xyz\":                      {},\n\t\"argo-visa.ru\":                         {},\n\t\"arkansale.xyz\":                        {},\n\t\"arkkivoltti.net\":                      {},\n\t\"arpe.top\":                             {},\n\t\"artblog.top\":                          {},\n\t\"artclipart.ru\":                        {},\n\t\"artdeko.info\":                         {},\n\t\"artpaint-market.ru\":                   {},\n\t\"artparquet.ru\":                        {},\n\t\"artpress.top\":                         {},\n\t\"artsmarket.xyz\":                       {},\n\t\"arturs.moscow\":                        {},\n\t\"aruplighting.com\":                     {},\n\t\"ascotgoods.xyz\":                       {},\n\t\"ask-yug.com\":                          {},\n\t\"asupro.com\":                           {},\n\t\"asynt.net\":                            {},\n\t\"aszokshop.xyz\":                        {},\n\t\"atleticpharm.org\":                     {},\n\t\"atoblog.online\":                       {},\n\t\"atyks.ru\":                             {},\n\t\"aucoinhomes.com\":                      {},\n\t\"auto-b2b-seo-service.com\":             {},\n\t\"auto-complex.by\":                      {},\n\t\"auto-kia-fulldrive.ru\":                {},\n\t\"auto-seo-service.org\":                 {},\n\t\"autoblog.org.ua\":                      {},\n\t\"autofuct.ru\":                          {},\n\t\"automobile-spec.com\":                  {},\n\t\"autoseo-service.org\":                  {},\n\t\"autoseo-traffic.com\":                  {},\n\t\"autoseotips.com\":                      {},\n\t\"autoservic.by\":                        {},\n\t\"autovideobroadcast.com\":               {},\n\t\"avcoast.com\":                          {},\n\t\"aviaseller.su\":                        {},\n\t\"aviva-limoux.com\":                     {},\n\t\"avkzarabotok.info\":                    {},\n\t\"avtointeres.ru\":                       {},\n\t\"avtorskoe-vino.ru\":                    {},\n\t\"avtovykup.kz\":                         {},\n\t\"aworlds.com\":                          {},\n\t\"axcus.top\":                            {},\n\t\"ayongoods.xyz\":                        {},\n\t\"azartclub.org\":                        {},\n\t\"azbukafree.com\":                       {},\n\t\"azlex.uz\":                             {},\n\t\"backlinks-fast-top.com\":               {},\n\t\"bahisgunceladresi.com\":                {},\n\t\"baixar-musicas-gratis.com\":            {},\n\t\"baladur.ru\":                           {},\n\t\"balakhna.online\":                      {},\n\t\"balayazh.com\":                         {},\n\t\"balitouroffice.com\":                   {},\n\t\"balkanfarma.org\":                      {},\n\t\"bankhummer.co\":                        {},\n\t\"barbarahome.top\":                      {},\n\t\"bard-real.com.ua\":                     {},\n\t\"batietiket.com\":                       {},\n\t\"batut-fun.ru\":                         {},\n\t\"bavariagid.de\":                        {},\n\t\"bavsac.com\":                           {},\n\t\"bdf-tracker.top\":                      {},\n\t\"beachtoday.ru\":                        {},\n\t\"beauty-lesson.com\":                    {},\n\t\"beclean-nn.ru\":                        {},\n\t\"bedroomlighting.us\":                   {},\n\t\"belreferatov.net\":                     {},\n\t\"beremenyashka.com\":                    {},\n\t\"berglion.com\":                         {},\n\t\"berkinan.xyz\":                         {},\n\t\"best-deal-hdd.pro\":                    {},\n\t\"best-mam.ru\":                          {},\n\t\"best-ping-service-usa.blue\":           {},\n\t\"best-printmsk.ru\":                     {},\n\t\"best-seo-offer.com\":                   {},\n\t\"best-seo-software.xyz\":                {},\n\t\"best-seo-solution.com\":                {},\n\t\"bestbookclub.ru\":                      {},\n\t\"bestfortraders.com\":                   {},\n\t\"besthatcheries.com\":                   {},\n\t\"bestmobilityscooterstoday.com\":        {},\n\t\"bestofferhddbyt.info\":                 {},\n\t\"bestofferhddeed.info\":                 {},\n\t\"bestvpnrating.com\":                    {},\n\t\"bestwebsitesawards.com\":               {},\n\t\"bet-winner1.ru\":                       {},\n\t\"bet2much.ru\":                          {},\n\t\"betslive.ru\":                          {},\n\t\"betterhealthbeauty.com\":               {},\n\t\"bettorschool.ru\":                      {},\n\t\"bez-zabora.ru\":                        {},\n\t\"bezprostatita.com\":                    {},\n\t\"bhf.vc\":                               {},\n\t\"bibprsale.xyz\":                        {},\n\t\"bif-ru.info\":                          {},\n\t\"biglistofwebsites.com\":                {},\n\t\"billiard-classic.com.ua\":              {},\n\t\"billyblog.online\":                     {},\n\t\"bin-brokers.com\":                      {},\n\t\"binokna.ru\":                           {},\n\t\"bio-market.kz\":                        {},\n\t\"biplanecentre.ru\":                     {},\n\t\"bird1.ru\":                             {},\n\t\"bitcoin-ua.top\":                       {},\n\t\"biteg.xyz\":                            {},\n\t\"bitniex.com\":                          {},\n\t\"biz-law.ru\":                           {},\n\t\"bizru.info\":                           {},\n\t\"bki24.info\":                           {},\n\t\"black-friday.ga\":                      {},\n\t\"black-tip.top\":                        {},\n\t\"blackhatworth.com\":                    {},\n\t\"blancablog.online\":                    {},\n\t\"blockchaintop.nl\":                     {},\n\t\"blog.xsk.in\":                          {},\n\t\"blog100.org\":                          {},\n\t\"blog2019.top\":                         {},\n\t\"blog2019.xyz\":                         {},\n\t\"blog4u.top\":                           {},\n\t\"blogking.top\":                         {},\n\t\"bloglag.com\":                          {},\n\t\"blognet.top\":                          {},\n\t\"blogseo.xyz\":                          {},\n\t\"blogstar.fun\":                         {},\n\t\"blogtotal.de\":                         {},\n\t\"blogua.org\":                           {},\n\t\"blue-square.biz\":                      {},\n\t\"bluerobot.info\":                       {},\n\t\"bmusshop.xyz\":                         {},\n\t\"bo-vtb24.ru\":                          {},\n\t\"boltalko.xyz\":                         {},\n\t\"boltushkiclub.ru\":                     {},\n\t\"bonkers.name\":                         {},\n\t\"bonniesblog.online\":                   {},\n\t\"bonus-betting.ru\":                     {},\n\t\"bonus-spasibo-sberbank.ru\":            {},\n\t\"bonus-vtb.ru\":                         {},\n\t\"books-top.com\":                        {},\n\t\"boost24.biz\":                          {},\n\t\"boostmyppc.com\":                       {},\n\t\"bostonline.xyz\":                       {},\n\t\"bot-traffic.icu\":                      {},\n\t\"bot-traffic.xyz\":                      {},\n\t\"botamycos.fr\":                         {},\n\t\"bottraffic.live\":                      {},\n\t\"bottraffic143.xyz\":                    {},\n\t\"bottraffic329.xyz\":                    {},\n\t\"bottraffic4free.club\":                 {},\n\t\"bottraffic4free.host\":                 {},\n\t\"bottraffic999.xyz\":                    {},\n\t\"bowigosale.xyz\":                       {},\n\t\"bpro1.top\":                            {},\n\t\"bradleylive.xyz\":                      {},\n\t\"brakehawk.com\":                        {},\n\t\"brateg.xyz\":                           {},\n\t\"brauni.com.ua\":                        {},\n\t\"bravica.biz\":                          {},\n\t\"bravica.com\":                          {},\n\t\"bravica.me\":                           {},\n\t\"bravica.net\":                          {},\n\t\"bravica.news\":                         {},\n\t\"bravica.online\":                       {},\n\t\"bravica.pro\":                          {},\n\t\"bravica.ru\":                           {},\n\t\"bravica.su\":                           {},\n\t\"break-the-chains.com\":                 {},\n\t\"briankatrine.top\":                     {},\n\t\"brickmaster.pro\":                      {},\n\t\"brillianty.info\":                      {},\n\t\"britneyblog.online\":                   {},\n\t\"brk-rti.ru\":                           {},\n\t\"brooklynsays.com\":                     {},\n\t\"brothers-smaller.ru\":                  {},\n\t\"brusilov.ru\":                          {},\n\t\"bsell.ru\":                             {},\n\t\"btcnix.com\":                           {},\n\t\"btt-club.pro\":                         {},\n\t\"budilneg.xyz\":                         {},\n\t\"budmavtomatika.com.ua\":                {},\n\t\"bufetout.ru\":                          {},\n\t\"buhproffi.ru\":                         {},\n\t\"buildnw.ru\":                           {},\n\t\"buildwithwendy.com\":                   {},\n\t\"buketeg.xyz\":                          {},\n\t\"bukleteg.xyz\":                         {},\n\t\"bulgaria-web-developers.com\":          {},\n\t\"bur-rk.ru\":                            {},\n\t\"burger-imperia.com\":                   {},\n\t\"burn-fat.ga\":                          {},\n\t\"business-online-sberbank.ru\":          {},\n\t\"buttons-for-website.com\":              {},\n\t\"buttons-for-your-website.com\":         {},\n\t\"buy-cheap-online.info\":                {},\n\t\"buy-cheap-pills-order-online.com\":     {},\n\t\"buy-forum.ru\":                         {},\n\t\"buy-meds24.com\":                       {},\n\t\"buynorxx.com\":                         {},\n\t\"buypillsonline24h.com\":                {},\n\t\"buypuppies.ca\":                        {},\n\t\"c2bit.hk\":                             {},\n\t\"call-of-duty.info\":                    {},\n\t\"cancerfungus.com\":                     {},\n\t\"candida-society.org.uk\":               {},\n\t\"cannazon-market.org\":                  {},\n\t\"carder.me\":                            {},\n\t\"carder.tv\":                            {},\n\t\"carders.ug\":                           {},\n\t\"cardiosport.com.ua\":                   {},\n\t\"cardsdumps.com\":                       {},\n\t\"carezi.com\":                           {},\n\t\"carivka.com.ua\":                       {},\n\t\"carscrim.com\":                         {},\n\t\"cartechnic.ru\":                        {},\n\t\"cashforum.cc\":                         {},\n\t\"casino-top3.fun\":                      {},\n\t\"casino-top3.online\":                   {},\n\t\"casino-top3.ru\":                       {},\n\t\"casino-top3.site\":                     {},\n\t\"casino-top3.space\":                    {},\n\t\"casino-top3.website\":                  {},\n\t\"casino-v.site\":                        {},\n\t\"casino-vulkane.com\":                   {},\n\t\"casino-x-now.ru\":                      {},\n\t\"casino-x.host\":                        {},\n\t\"casinosbewertung.de\":                  {},\n\t\"casinox-jp.com\":                       {},\n\t\"catherinemill.xyz\":                    {},\n\t\"catterybengal.com\":                    {},\n\t\"cattyhealth.com\":                      {},\n\t\"cauxmall.xyz\":                         {},\n\t\"cazino-v.online\":                      {},\n\t\"cazino-v.ru\":                          {},\n\t\"ccfullzshop.com\":                      {},\n\t\"celestepage.xyz\":                      {},\n\t\"cenokos.ru\":                           {},\n\t\"cenoval.ru\":                           {},\n\t\"certifywebsite.win\":                   {},\n\t\"cezartabac.ro\":                        {},\n\t\"chainii.ru\":                           {},\n\t\"chatmall.xyz\":                         {},\n\t\"chatrazvrat.ru\":                       {},\n\t\"chatroulette.life\":                    {},\n\t\"chcu.net\":                             {},\n\t\"cheap-trusted-backlinks.com\":          {},\n\t\"cheapkeys.ovh\":                        {},\n\t\"cheappills24h.com\":                    {},\n\t\"chinese-amezon.com\":                   {},\n\t\"chip35.ru\":                            {},\n\t\"chipmp3.ru\":                           {},\n\t\"chizhik-2.ru\":                         {},\n\t\"chomexun.com\":                         {},\n\t\"ci.ua\":                                {},\n\t\"cilolamall.xyz\":                       {},\n\t\"cityadspix.com\":                       {},\n\t\"citybur.ru\":                           {},\n\t\"cityreys.ru\":                          {},\n\t\"civilwartheater.com\":                  {},\n\t\"cleandom.in.ua\":                       {},\n\t\"clicksor.com\":                         {},\n\t\"climate.by\":                           {},\n\t\"clothing-deal.club\":                   {},\n\t\"club-lukojl.ru\":                       {},\n\t\"cmrrsale.xyz\":                         {},\n\t\"cmseshop.xyz\":                         {},\n\t\"coderstate.com\":                       {},\n\t\"codysbbq.com\":                         {},\n\t\"coeus-solutions.de\":                   {},\n\t\"coffeemashiny.ru\":                     {},\n\t\"coinswitch.cash\":                      {},\n\t\"coleso.md\":                            {},\n\t\"collectinviolity.com\":                 {},\n\t\"columb.net.ua\":                        {},\n\t\"commentag.com\":                        {},\n\t\"commerage.ru\":                         {},\n\t\"comp-pomosch.ru\":                      {},\n\t\"compliance-alex.xyz\":                  {},\n\t\"compliance-alexa.xyz\":                 {},\n\t\"compliance-andrew.xyz\":                {},\n\t\"compliance-barak.xyz\":                 {},\n\t\"compliance-brian.xyz\":                 {},\n\t\"compliance-don.xyz\":                   {},\n\t\"compliance-donald.xyz\":                {},\n\t\"compliance-elena.xyz\":                 {},\n\t\"compliance-fred.xyz\":                  {},\n\t\"compliance-george.xyz\":                {},\n\t\"compliance-irvin.xyz\":                 {},\n\t\"compliance-ivan.xyz\":                  {},\n\t\"compliance-john.top\":                  {},\n\t\"compliance-julianna.top\":              {},\n\t\"computer-remont.ru\":                   {},\n\t\"comuneshop.xyz\":                       {},\n\t\"conciergegroup.org\":                   {},\n\t\"concretepol.com\":                      {},\n\t\"connectikastudio.com\":                 {},\n\t\"constanceonline.top\":                  {},\n\t\"cookie-law-enforcement-aa.xyz\":        {},\n\t\"cookie-law-enforcement-bb.xyz\":        {},\n\t\"cookie-law-enforcement-cc.xyz\":        {},\n\t\"cookie-law-enforcement-dd.xyz\":        {},\n\t\"cookie-law-enforcement-ee.xyz\":        {},\n\t\"cookie-law-enforcement-ff.xyz\":        {},\n\t\"cookie-law-enforcement-gg.xyz\":        {},\n\t\"cookie-law-enforcement-hh.xyz\":        {},\n\t\"cookie-law-enforcement-ii.xyz\":        {},\n\t\"cookie-law-enforcement-jj.xyz\":        {},\n\t\"cookie-law-enforcement-kk.xyz\":        {},\n\t\"cookie-law-enforcement-ll.xyz\":        {},\n\t\"cookie-law-enforcement-mm.xyz\":        {},\n\t\"cookie-law-enforcement-nn.xyz\":        {},\n\t\"cookie-law-enforcement-oo.xyz\":        {},\n\t\"cookie-law-enforcement-pp.xyz\":        {},\n\t\"cookie-law-enforcement-qq.xyz\":        {},\n\t\"cookie-law-enforcement-rr.xyz\":        {},\n\t\"cookie-law-enforcement-ss.xyz\":        {},\n\t\"cookie-law-enforcement-tt.xyz\":        {},\n\t\"cookie-law-enforcement-uu.xyz\":        {},\n\t\"cookie-law-enforcement-vv.xyz\":        {},\n\t\"cookie-law-enforcement-ww.xyz\":        {},\n\t\"cookie-law-enforcement-xx.xyz\":        {},\n\t\"cookie-law-enforcement-yy.xyz\":        {},\n\t\"cookie-law-enforcement-zz.xyz\":        {},\n\t\"cool-mining.com\":                      {},\n\t\"copyrightclaims.org\":                  {},\n\t\"copyrightinstitute.org\":               {},\n\t\"coral-info.com\":                       {},\n\t\"cosmediqueresults.com\":                {},\n\t\"covadhosting.biz\":                     {},\n\t\"covblog.top\":                          {},\n\t\"coverage-my.com\":                      {},\n\t\"covid-schutzmasken.de\":                {},\n\t\"cp24.com.ua\":                          {},\n\t\"cpnbshop.xyz\":                         {},\n\t\"crazy-mining.org\":                     {},\n\t\"credit-card-tinkoff.ru\":               {},\n\t\"credit-cards-online24.ru\":             {},\n\t\"credit.co.ua\":                         {},\n\t\"crypto-bear.com\":                      {},\n\t\"crypto-bears.com\":                     {},\n\t\"crypto-mining.club\":                   {},\n\t\"crypto-wallets.org\":                   {},\n\t\"crypto1x1.com\":                        {},\n\t\"curenaturalicancro.com\":               {},\n\t\"curenaturalicancro.nl\":                {},\n\t\"customsua.com.ua\":                     {},\n\t\"cvta.xyz\":                             {},\n\t\"cyber-monday.ga\":                      {},\n\t\"czcedu.com\":                           {},\n\t\"dacha-svoimi-rukami.com\":              {},\n\t\"dailyblog.xyz\":                        {},\n\t\"dailyrank.net\":                        {},\n\t\"dailyseo.xyz\":                         {},\n\t\"dailystorm.ru\":                        {},\n\t\"damianis.ru\":                          {},\n\t\"danhale.xyz\":                          {},\n\t\"darcysassoon.top\":                     {},\n\t\"darknet-hydra-onion.biz\":              {},\n\t\"darknet.sb\":                           {},\n\t\"darknetsitesguide.com\":                {},\n\t\"darleneblog.online\":                   {},\n\t\"darodar.com\":                          {},\n\t\"dav.kz\":                               {},\n\t\"davilaonline.shop\":                    {},\n\t\"dawlenie.com\":                         {},\n\t\"dbutton.net\":                          {},\n\t\"dcdcapital.com\":                       {},\n\t\"deart-13.ru\":                          {},\n\t\"deirdre.top\":                          {},\n\t\"delfin-aqua.com.ua\":                   {},\n\t\"delo.fund\":                            {},\n\t\"deluxewatch.su\":                       {},\n\t\"demenageur.com\":                       {},\n\t\"dengi-v-kredit.in.ua\":                 {},\n\t\"denisecarey.top\":                      {},\n\t\"deniseconnie.top\":                     {},\n\t\"dent-home.ru\":                         {},\n\t\"dentuled.net\":                         {},\n\t\"dermatovenerologiya.com\":              {},\n\t\"deryie.com\":                           {},\n\t\"descargar-musica-gratis.net\":          {},\n\t\"detailedvideos.com\":                   {},\n\t\"detoolzon.xyz\":                        {},\n\t\"detskie-konstruktory.ru\":              {},\n\t\"deutsche-poesie.com\":                  {},\n\t\"dev-seo.blog\":                         {},\n\t\"devochki-video.ru\":                    {},\n\t\"dezeypmall.xyz\":                       {},\n\t\"dgdsoutlet.xyz\":                       {},\n\t\"diatelier.ru\":                         {},\n\t\"dicru.info\":                           {},\n\t\"dienai.ru\":                            {},\n\t\"dienmaytot.xyz\":                       {},\n\t\"diplomas-ru.com\":                      {},\n\t\"dipstar.org\":                          {},\n\t\"discounttaxi.kz\":                      {},\n\t\"distonija.com\":                        {},\n\t\"divan-dekor.com.ua\":                   {},\n\t\"dividendo.ru\":                         {},\n\t\"djekxa.ru\":                            {},\n\t\"djonwatch.ru\":                         {},\n\t\"dktr.ru\":                              {},\n\t\"dldsshop.xyz\":                         {},\n\t\"dna-sklad.ru\":                         {},\n\t\"dnmetall.ru\":                          {},\n\t\"docs4all.com\":                         {},\n\t\"docsarchive.net\":                      {},\n\t\"docsportal.net\":                       {},\n\t\"doctmalls.xyz\":                        {},\n\t\"doctornadezhda.ru\":                    {},\n\t\"documentbase.net\":                     {},\n\t\"documentserver.net\":                   {},\n\t\"documentsite.net\":                     {},\n\t\"dodge-forum.eu\":                       {},\n\t\"doggyhealthy.com\":                     {},\n\t\"dogovorpodryada.ru\":                   {},\n\t\"dogsrun.net\":                          {},\n\t\"dojki-devki.ru\":                       {},\n\t\"dojki-hd.com\":                         {},\n\t\"dom-international.ru\":                 {},\n\t\"domain-tracker.com\":                   {},\n\t\"domashniy-hotel.ru\":                   {},\n\t\"domashniy-recepti.ru\":                 {},\n\t\"dominateforex.ml\":                     {},\n\t\"domination.ml\":                        {},\n\t\"dommdom.com\":                          {},\n\t\"domovozik.ru\":                         {},\n\t\"dompechey.by\":                         {},\n\t\"domsadiogorod.ru\":                     {},\n\t\"doreenblog.online\":                    {},\n\t\"doska-vsem.ru\":                        {},\n\t\"dostavka-v-krym.com\":                  {},\n\t\"dosugrostov.site\":                     {},\n\t\"doxyporno.com\":                        {},\n\t\"doxysexy.com\":                         {},\n\t\"draniki.org\":                          {},\n\t\"dreamland-bg.com\":                     {},\n\t\"dreams-works.net\":                     {},\n\t\"drev.biz\":                             {},\n\t\"drugs-no-rx.info\":                     {},\n\t\"drugstoreforyou.com\":                  {},\n\t\"drupa.com\":                            {},\n\t\"dspautomations.com\":                   {},\n\t\"duitbux.info\":                         {},\n\t\"dumpsccshop.com\":                      {},\n\t\"dvk-stroi.ru\":                         {},\n\t\"dvr.biz.ua\":                           {},\n\t\"dzinerstudio.com\":                     {},\n\t\"e-buyeasy.com\":                        {},\n\t\"e-commerce-seo.com\":                   {},\n\t\"e-commerce-seo1.com\":                  {},\n\t\"e-stroymart.kz\":                       {},\n\t\"eaptekaplus.ru\":                       {},\n\t\"earn-from-articles.com\":               {},\n\t\"earnian-money.info\":                   {},\n\t\"easycommerce.cf\":                      {},\n\t\"ecblog.xyz\":                           {},\n\t\"ecommerce-seo.org\":                    {},\n\t\"ecomp3.ru\":                            {},\n\t\"econom.co\":                            {},\n\t\"edakgfvwql.ru\":                        {},\n\t\"edmed-sonline.com\":                    {},\n\t\"ednetstore.xyz\":                       {},\n\t\"eduardoluis.com\":                      {},\n\t\"educhess.ru\":                          {},\n\t\"edudocs.net\":                          {},\n\t\"eduinfosite.com\":                      {},\n\t\"eduserver.net\":                        {},\n\t\"eecz.org\":                             {},\n\t\"eets.net\":                             {},\n\t\"ege-essay.ru\":                         {},\n\t\"ege-krasnoyarsk.ru\":                   {},\n\t\"egovaleo.it\":                          {},\n\t\"ek-invest.ru\":                         {},\n\t\"ekatalog.xyz\":                         {},\n\t\"ekbspravka.ru\":                        {},\n\t\"eko-gazon.ru\":                         {},\n\t\"ekoproekt-kr.ru\":                      {},\n\t\"ekto.ee\":                              {},\n\t\"elainasblog.xyz\":                      {},\n\t\"eldoradorent.az\":                      {},\n\t\"electric-blue-industries.com\":         {},\n\t\"elegante-vitrage.ru\":                  {},\n\t\"elektrikovich.ru\":                     {},\n\t\"elementspluss.ru\":                     {},\n\t\"elenatkachenko.com.ua\":                {},\n\t\"elentur.com.ua\":                       {},\n\t\"elizabethbruno.top\":                   {},\n\t\"ellemarket.com\":                       {},\n\t\"elmifarhangi.com\":                     {},\n\t\"elvel.com.ua\":                         {},\n\t\"emctestlab.ru\":                        {},\n\t\"emerson-rus.ru\":                       {},\n\t\"emicef.com\":                           {},\n\t\"empire-market.org\":                    {},\n\t\"empire-market.xyz\":                    {},\n\t\"empiremarket-link.org\":                {},\n\t\"empiremarketlink24.com\":               {},\n\t\"empirestuff.org\":                      {},\n\t\"energomash.net\":                       {},\n\t\"energysexy.com\":                       {},\n\t\"englishtopic.ru\":                      {},\n\t\"enter-unicredit.ru\":                   {},\n\t\"envistore.xyz\":                        {},\n\t\"epcpolo.com\":                          {},\n\t\"epicdiving.com\":                       {},\n\t\"eraglass.com\":                         {},\n\t\"erias.xyz\":                            {},\n\t\"eric-artem.com\":                       {},\n\t\"ericshome.store\":                      {},\n\t\"erinhome.xyz\":                         {},\n\t\"ero-video-chat.org\":                   {},\n\t\"erofus.online\":                        {},\n\t\"eropho.com\":                           {},\n\t\"eropho.net\":                           {},\n\t\"erot.co\":                              {},\n\t\"erotag.com\":                           {},\n\t\"eroticheskij-video-chat.ru\":           {},\n\t\"es-pfrf.ru\":                           {},\n\t\"escort-russian.com\":                   {},\n\t\"eskei83.com\":                          {},\n\t\"esoterikforum.at\":                     {},\n\t\"essaytags.com\":                        {},\n\t\"estdj.com\":                            {},\n\t\"este-line.com.ua\":                     {},\n\t\"etairikavideo.gr\":                     {},\n\t\"etehnika.com.ua\":                      {},\n\t\"etotupo.ru\":                           {},\n\t\"ets-2-mod.ru\":                         {},\n\t\"etsfshop.xyz\":                         {},\n\t\"eu-cookie-law-enforcement2.xyz\":       {},\n\t\"eurocredit.xyz\":                       {},\n\t\"euromasterclass.ru\":                   {},\n\t\"europages.com.ru\":                     {},\n\t\"eurosamodelki.ru\":                     {},\n\t\"event-tracking.com\":                   {},\n\t\"eventiyahall.ru\":                      {},\n\t\"evreuxshop.xyz\":                       {},\n\t\"exclusive-profit.com\":                 {},\n\t\"exdocsfiles.com\":                      {},\n\t\"execedmall.xyz\":                       {},\n\t\"exotic-video-chat.ru\":                 {},\n\t\"expediacustomerservicenumber.online\":  {},\n\t\"expert-find.ru\":                       {},\n\t\"express-vyvoz.ru\":                     {},\n\t\"eyes-on-you.ga\":                       {},\n\t\"f1nder.org\":                           {},\n\t\"fainaidea.com\":                        {},\n\t\"faithe.top\":                           {},\n\t\"falco3d.com\":                          {},\n\t\"falcoware.com\":                        {},\n\t\"fanoboi.com\":                          {},\n\t\"fartunabest.ru\":                       {},\n\t\"fashiong.ru\":                          {},\n\t\"fast-wordpress-start.com\":             {},\n\t\"fastgg.net\":                           {},\n\t\"favoritki-msk.ru\":                     {},\n\t\"fazika.ru\":                            {},\n\t\"fbdownloader.com\":                     {},\n\t\"feminist.org.ua\":                      {},\n\t\"fidalsa.de\":                           {},\n\t\"fierrohack.ru\":                        {},\n\t\"figensahin.com\":                       {},\n\t\"filesclub.net\":                        {},\n\t\"filesdatabase.net\":                    {},\n\t\"films2018.com\":                        {},\n\t\"filter-ot-zheleza.ru\":                 {},\n\t\"financial-simulation.com\":             {},\n\t\"finansov.info\":                        {},\n\t\"finder.cool\":                          {},\n\t\"findercarphotos.com\":                  {},\n\t\"fineblog.top\":                         {},\n\t\"firmgeo.xyz\":                          {},\n\t\"firstblog.top\":                        {},\n\t\"fit-discount.ru\":                      {},\n\t\"fitodar.com.ua\":                       {},\n\t\"fix-website-errors.com\":               {},\n\t\"flexderek.com\":                        {},\n\t\"floating-share-buttons.com\":           {},\n\t\"flowertherapy.ru\":                     {},\n\t\"flyblog.xyz\":                          {},\n\t\"foojo.net\":                            {},\n\t\"for-marketersy.info\":                  {},\n\t\"for-your.website\":                     {},\n\t\"forex-procto.ru\":                      {},\n\t\"forsex.info\":                          {},\n\t\"fortwosmartcar.pw\":                    {},\n\t\"forum69.info\":                         {},\n\t\"foxweber.com\":                         {},\n\t\"fpclub.ru\":                            {},\n\t\"francaise-poesie.com\":                 {},\n\t\"frankofficial.ru\":                     {},\n\t\"frauplus.ru\":                          {},\n\t\"free-fb-traffic.com\":                  {},\n\t\"free-fbook-traffic.com\":               {},\n\t\"free-floating-buttons.com\":            {},\n\t\"free-games-download.falcoware.com\":    {},\n\t\"free-share-buttons.com\":               {},\n\t\"free-social-buttons.com\":              {},\n\t\"free-social-buttons.xyz\":              {},\n\t\"free-social-buttons7.xyz\":             {},\n\t\"free-traffic.xyz\":                     {},\n\t\"free-video-chat.ru\":                   {},\n\t\"free-video-tool.com\":                  {},\n\t\"free-website-traffic.com\":             {},\n\t\"freenode.info\":                        {},\n\t\"freewhatsappload.com\":                 {},\n\t\"freewlan.info\":                        {},\n\t\"freshnails.com.ua\":                    {},\n\t\"fsalas.com\":                           {},\n\t\"fsin-pokypka.ru\":                      {},\n\t\"fullzdumps.cc\":                        {},\n\t\"furniturehomewares.com\":               {},\n\t\"fvetgoods.xyz\":                        {},\n\t\"galblog.top\":                          {},\n\t\"gamblingpp.ru\":                        {},\n\t\"game300.ru\":                           {},\n\t\"gammatraffic.com\":                     {},\n\t\"gandikapper.ru\":                       {},\n\t\"gaokr.xyz\":                            {},\n\t\"garantprava.com\":                      {},\n\t\"gasvleningrade.ru\":                    {},\n\t\"gatwick.ru\":                           {},\n\t\"gays-video-chat.ru\":                   {},\n\t\"gazel-72.ru\":                          {},\n\t\"gbh-invest.ru\":                        {},\n\t\"gcmx.net\":                             {},\n\t\"gearcraft.us\":                         {},\n\t\"gearsadspromo.club\":                   {},\n\t\"geliyballon.ru\":                       {},\n\t\"gelstate.ru\":                          {},\n\t\"generalporn.org\":                      {},\n\t\"geniusfood.co.uk\":                     {},\n\t\"georgeblog.online\":                    {},\n\t\"gepatit-info.top\":                     {},\n\t\"germes-trans.com\":                     {},\n\t\"get-clickize.info\":                    {},\n\t\"get-free-social-traffic.com\":          {},\n\t\"get-free-traffic-now.com\":             {},\n\t\"get-more-freeer-visitors.info\":        {},\n\t\"get-more-freeish-visitors.info\":       {},\n\t\"get-seo-help.com\":                     {},\n\t\"get-your-social-buttons.info\":         {},\n\t\"getaadsincome.info\":                   {},\n\t\"getadsincomely.info\":                  {},\n\t\"getbottraffic4free.xyz\":               {},\n\t\"getfy-click.info\":                     {},\n\t\"getlamborghini.ga\":                    {},\n\t\"getpy-click.info\":                     {},\n\t\"getrichquick.ml\":                      {},\n\t\"getrichquickly.info\":                  {},\n\t\"gezlev.com.ua\":                        {},\n\t\"ghazel.ru\":                            {},\n\t\"ghostvisitor.com\":                     {},\n\t\"gidonline.one\":                        {},\n\t\"gidro-partner.ru\":                     {},\n\t\"giftbig.ru\":                           {},\n\t\"girlporn.ru\":                          {},\n\t\"gk-casino.fun\":                        {},\n\t\"gk-casino.online\":                     {},\n\t\"gk-casino.ru\":                         {},\n\t\"gk-casino.site\":                       {},\n\t\"gk-casino.space\":                      {},\n\t\"gk-casino.website\":                    {},\n\t\"gkvector.ru\":                          {},\n\t\"glavprofit.ru\":                        {},\n\t\"glktfw.net\":                           {},\n\t\"global-smm.ru\":                        {},\n\t\"gobongo.info\":                         {},\n\t\"golden-praga.ru\":                      {},\n\t\"goldvaultmetals.com\":                  {},\n\t\"golyedevushki.com\":                    {},\n\t\"good-potolok.ru\":                      {},\n\t\"goodbyecellulite.ru\":                  {},\n\t\"goodcoffeepremium.com\":                {},\n\t\"goodhumor24.com\":                      {},\n\t\"goodprotein.ru\":                       {},\n\t\"google-liar.ru\":                       {},\n\t\"googlemare.com\":                       {},\n\t\"googlsucks.com\":                       {},\n\t\"gorgaz.info\":                          {},\n\t\"goyua.xyz\":                            {},\n\t\"graceonline.shop\":                     {},\n\t\"grafaman.ru\":                          {},\n\t\"greatblog.top\":                        {},\n\t\"greentechsy.com\":                      {},\n\t\"groshi-kredut.com.ua\":                 {},\n\t\"growth-hackingan.info\":                {},\n\t\"growth-hackingor.info\":                {},\n\t\"growth-hackingy.info\":                 {},\n\t\"gruzchiki24.ru\":                       {},\n\t\"gttpsale.xyz\":                         {},\n\t\"guardlink.org\":                        {},\n\t\"guidetopetersburg.com\":                {},\n\t\"gxcb.net\":                             {},\n\t\"halat.xyz\":                            {},\n\t\"halefa.com\":                           {},\n\t\"hamyshop.xyz\":                         {},\n\t\"handicapvantoday.com\":                 {},\n\t\"hankspring.xyz\":                       {},\n\t\"happysong.ru\":                         {},\n\t\"hard-porn.mobi\":                       {},\n\t\"hardosale.xyz\":                        {},\n\t\"harpro.net\":                           {},\n\t\"havepussy.com\":                        {},\n\t\"hawaiisurf.com\":                       {},\n\t\"hd1080film.ru\":                        {},\n\t\"hdhc.site\":                            {},\n\t\"hdmoviecamera.net\":                    {},\n\t\"hdmoviecams.com\":                      {},\n\t\"hdsmartvideoreg.ru\":                   {},\n\t\"headpharmacy.com\":                     {},\n\t\"healbio.ru\":                           {},\n\t\"healgastro.com\":                       {},\n\t\"healthhacks.ru\":                       {},\n\t\"heeha.net\":                            {},\n\t\"hentai-manga.porn\":                    {},\n\t\"heroero.com\":                          {},\n\t\"hexometer.com\":                        {},\n\t\"hilaryblog.top\":                       {},\n\t\"himandmall.xyz\":                       {},\n\t\"hit-kino.ru\":                          {},\n\t\"hitree.shop\":                          {},\n\t\"hiwpro.xyz\":                           {},\n\t\"hkjrsale.xyz\":                         {},\n\t\"holiday-shop.ru\":                      {},\n\t\"holistickenko.com\":                    {},\n\t\"holodkovich.com\":                      {},\n\t\"homeafrikalike.tk\":                    {},\n\t\"homemypicture.tk\":                     {},\n\t\"hongfanji.com\":                        {},\n\t\"hostiman.ru\":                          {},\n\t\"hosting-tracker.com\":                  {},\n\t\"hotblognetwork.com\":                   {},\n\t\"hottour.com\":                          {},\n\t\"housedesigning.ru\":                    {},\n\t\"housediz.com\":                         {},\n\t\"housemilan.ru\":                        {},\n\t\"howopen.ru\":                           {},\n\t\"howtostopreferralspam.eu\":             {},\n\t\"hoztorg-opt.ru\":                       {},\n\t\"hrtonline.xyz\":                        {},\n\t\"hseipaa.kz\":                           {},\n\t\"hsoutdoor.com\":                        {},\n\t\"hugblog.xyz\":                          {},\n\t\"hulfingtonpost.com\":                   {},\n\t\"humanorightswatch.org\":                {},\n\t\"hundejo.com\":                          {},\n\t\"huntdown.info\":                        {},\n\t\"hvd-store.com\":                        {},\n\t\"hydra-2019.ru\":                        {},\n\t\"hydra-2020.online\":                    {},\n\t\"hydra-2020.ru\":                        {},\n\t\"hydra-centr.fun\":                      {},\n\t\"hydra-dealer.com\":                     {},\n\t\"hydra-guide.org\":                      {},\n\t\"hydra-new.online\":                     {},\n\t\"hydra-onion-faq.com\":                  {},\n\t\"hydra-pc.com\":                         {},\n\t\"hydra-shop.org\":                       {},\n\t\"hydra-site.ru\":                        {},\n\t\"hydra-slon.net\":                       {},\n\t\"hydra-vhod2020.com\":                   {},\n\t\"hydra-zerkalo20.com\":                  {},\n\t\"hydra.online\":                         {},\n\t\"hydra1717.com\":                        {},\n\t\"hydra2.market\":                        {},\n\t\"hydra2020.top\":                        {},\n\t\"hydra2020gate.com\":                    {},\n\t\"hydra2020market.com\":                  {},\n\t\"hydra2020onion.com\":                   {},\n\t\"hydra2020ru.com\":                      {},\n\t\"hydra2020zerkala.com\":                 {},\n\t\"hydra2020zerkalo.com\":                 {},\n\t\"hydra20onion.com\":                     {},\n\t\"hydra20online.com\":                    {},\n\t\"hydra20original.com\":                  {},\n\t\"hydra2use.com\":                        {},\n\t\"hydra2zahod.com\":                      {},\n\t\"hydraena.com\":                         {},\n\t\"hydrahow.com\":                         {},\n\t\"hydrahudra.com\":                       {},\n\t\"hydraland.net\":                        {},\n\t\"hydramarket2020.com\":                  {},\n\t\"hydramirror2020.com\":                  {},\n\t\"hydranten.net\":                        {},\n\t\"hydraonion2019.net\":                   {},\n\t\"hydrarusmarket.com\":                   {},\n\t\"hydraruz-2020.com\":                    {},\n\t\"hydraruzonion2020.com\":                {},\n\t\"hydraruzonionx.ru\":                    {},\n\t\"hydraruzxpnew4af.com.co\":              {},\n\t\"hydraruzxpnew4af.ink\":                 {},\n\t\"hydraruzxpnew4aff.ru\":                 {},\n\t\"hydraruzxpwnew4afonion.com\":           {},\n\t\"hydraulicoilcooler.net\":               {},\n\t\"hydrauliczny.com\":                     {},\n\t\"hydravizoficial.info\":                 {},\n\t\"hydrazerkalo2019.net\":                 {},\n\t\"hydrazerkalo2020.com\":                 {},\n\t\"hyip-zanoza.me\":                       {},\n\t\"i-spare.ru\":                           {},\n\t\"ib-homecredit.ru\":                     {},\n\t\"ib-rencredit.ru\":                      {},\n\t\"iblogpress.xyz\":                       {},\n\t\"iceton.net\":                           {},\n\t\"ico.re\":                               {},\n\t\"ideayz.com\":                           {},\n\t\"ieeeoutlet.xyz\":                       {},\n\t\"igadgetsworld.com\":                    {},\n\t\"igamingtop.com\":                       {},\n\t\"igru-xbox.net\":                        {},\n\t\"ilikevitaly.com\":                      {},\n\t\"iloveitaly.ro\":                        {},\n\t\"iloveitaly.ru\":                        {},\n\t\"ilovevitaly.co\":                       {},\n\t\"ilovevitaly.com\":                      {},\n\t\"ilovevitaly.info\":                     {},\n\t\"ilovevitaly.org\":                      {},\n\t\"ilovevitaly.ru\":                       {},\n\t\"ilovevitaly.xyz\":                      {},\n\t\"iminent.com\":                          {},\n\t\"immigrational.info\":                   {},\n\t\"immobilieralgerie.net\":                {},\n\t\"imperiafilm.ru\":                       {},\n\t\"impotentik.com\":                       {},\n\t\"in-mostbet.ru\":                        {},\n\t\"in-sto.ru\":                            {},\n\t\"incanto.in.ua\":                        {},\n\t\"incitystroy.ru\":                       {},\n\t\"incomekey.net\":                        {},\n\t\"incoonline.xyz\":                       {},\n\t\"increasewwwtraffic.info\":              {},\n\t\"inet-shop.su\":                         {},\n\t\"infektsii.com\":                        {},\n\t\"infodocsportal.com\":                   {},\n\t\"infogame.name\":                        {},\n\t\"inform-ua.info\":                       {},\n\t\"ingramreed.xyz\":                       {},\n\t\"inmoll.com\":                           {},\n\t\"insider.pro\":                          {},\n\t\"installspartners.com\":                 {},\n\t\"instasexyblog.com\":                    {},\n\t\"insultu-net.ru\":                       {},\n\t\"interferencer.ru\":                     {},\n\t\"intex-air.ru\":                         {},\n\t\"intimchats.ru\":                        {},\n\t\"investpamm.ru\":                        {},\n\t\"iridsale.xyz\":                         {},\n\t\"iskalko.ru\":                           {},\n\t\"iskussnica.ru\":                        {},\n\t\"isotoner.com\":                         {},\n\t\"ispaniya-costa-blanca.ru\":             {},\n\t\"it-max.com.ua\":                        {},\n\t\"it-worlds.com\":                        {},\n\t\"iyfsearch.com\":                        {},\n\t\"izamorfix.ru\":                         {},\n\t\"izhevskjob.xyz\":                       {},\n\t\"izhstrelok.ru\":                        {},\n\t\"izi24.ru\":                             {},\n\t\"jabug.xyz\":                            {},\n\t\"jacblog.xyz\":                          {},\n\t\"jackonline.store\":                     {},\n\t\"janemill.xyz\":                         {},\n\t\"jav-fetish.com\":                       {},\n\t\"jav-fetish.site\":                      {},\n\t\"jav-idol.com\":                         {},\n\t\"javcoast.com\":                         {},\n\t\"javlibrary.cc\":                        {},\n\t\"jeffbullas.xyz\":                       {},\n\t\"jikem.com\":                            {},\n\t\"jintub.com\":                           {},\n\t\"jjbabskoe.ru\":                         {},\n\t\"job-opros.ru\":                         {},\n\t\"job-prosto.ru\":                        {},\n\t\"jobgirl24.ru\":                         {},\n\t\"jobius.com.ua\":                        {},\n\t\"johnnyhaley.top\":                      {},\n\t\"josephineblog.top\":                    {},\n\t\"joyceblog.top\":                        {},\n\t\"joycee.xyz\":                           {},\n\t\"judyandsimon.com\":                     {},\n\t\"jumkite.com\":                          {},\n\t\"justkillingti.me\":                     {},\n\t\"justprofit.xyz\":                       {},\n\t\"jweber.ru\":                            {},\n\t\"jyrxd.com\":                            {},\n\t\"kabbalah-red-bracelets.com\":           {},\n\t\"kabinet-5ka.ru\":                       {},\n\t\"kabinet-alfaclick.ru\":                 {},\n\t\"kabinet-binbank.ru\":                   {},\n\t\"kabinet-card-5ka.ru\":                  {},\n\t\"kabinet-click-alfabank.ru\":            {},\n\t\"kabinet-esia-gosuslugi.ru\":            {},\n\t\"kabinet-faberlic.ru\":                  {},\n\t\"kabinet-gosuslugi.ru\":                 {},\n\t\"kabinet-ipoteka-domclick.ru\":          {},\n\t\"kabinet-karta-5ka.ru\":                 {},\n\t\"kabinet-lk-megafon.ru\":                {},\n\t\"kabinet-lk-rt.ru\":                     {},\n\t\"kabinet-login-mts.ru\":                 {},\n\t\"kabinet-mil.ru\":                       {},\n\t\"kabinet-mos.ru\":                       {},\n\t\"kabinet-my-beeline.ru\":                {},\n\t\"kabinet-my-pochtabank.ru\":             {},\n\t\"kabinet-nalog.ru\":                     {},\n\t\"kabinet-online-bm.ru\":                 {},\n\t\"kabinet-online-open.ru\":               {},\n\t\"kabinet-online-rsb.ru\":                {},\n\t\"kabinet-online-rshb.ru\":               {},\n\t\"kabinet-online-sberbank.ru\":           {},\n\t\"kabinet-online-sovcombank.ru\":         {},\n\t\"kabinet-online-vtb.ru\":                {},\n\t\"kabinet-pfr.ru\":                       {},\n\t\"kabinet-pfrf.ru\":                      {},\n\t\"kabinet-platon.ru\":                    {},\n\t\"kabinet-qiwi.ru\":                      {},\n\t\"kabinet-tele2.ru\":                     {},\n\t\"kabinet-tinkoff.ru\":                   {},\n\t\"kabinet-tricolor.ru\":                  {},\n\t\"kabinet-ttk.ru\":                       {},\n\t\"kabinet-vtb24.ru\":                     {},\n\t\"kakablog.net\":                         {},\n\t\"kakadu-interior.com.ua\":               {},\n\t\"kakworldoftanks.ru\":                   {},\n\t\"kambasoft.com\":                        {},\n\t\"kamin-sam.ru\":                         {},\n\t\"kanakox.com\":                          {},\n\t\"karapuz.org.ua\":                       {},\n\t\"katrd.xyz\":                            {},\n\t\"kazka.ru\":                             {},\n\t\"kazlenta.kz\":                          {},\n\t\"kazrent.com\":                          {},\n\t\"kellyonline.xyz\":                      {},\n\t\"kendrablog.online\":                    {},\n\t\"kenyagoods.xyz\":                       {},\n\t\"kerch.site\":                           {},\n\t\"kevblog.top\":                          {},\n\t\"kevinsnow.online\":                     {},\n\t\"kexihao.xyz\":                          {},\n\t\"keywords-monitoring-success.com\":      {},\n\t\"keywords-monitoring-your-success.com\": {},\n\t\"kharkov.ua\":                           {},\n\t\"kierowca-praca.pl\":                    {},\n\t\"kimblog.top\":                          {},\n\t\"kinnarimasajes.com\":                   {},\n\t\"kino-fun.ru\":                          {},\n\t\"kino-key.info\":                        {},\n\t\"kino2018.cc\":                          {},\n\t\"kinobum.org\":                          {},\n\t\"kinopolet.net\":                        {},\n\t\"kinosed.net\":                          {},\n\t\"kinostar.online\":                      {},\n\t\"kiyany-za-spravedluvist.com.ua\":       {},\n\t\"klfd.net\":                             {},\n\t\"knigonosha.net\":                       {},\n\t\"kolcasale.xyz\":                        {},\n\t\"kollekcioner.ru\":                      {},\n\t\"komp-pomosch.ru\":                      {},\n\t\"komputers-best.ru\":                    {},\n\t\"komukc.com.ua\":                        {},\n\t\"konkursov.net\":                        {},\n\t\"kosunnyclub.com\":                      {},\n\t\"kozhakoshek.com\":                      {},\n\t\"kozhasobak.com\":                       {},\n\t\"kozhniebolezni.com\":                   {},\n\t\"kpcconline.xyz\":                       {},\n\t\"krasivoe-hd.net\":                      {},\n\t\"krasnodar-avtolombard.ru\":             {},\n\t\"krasota-zdorovie.pw\":                  {},\n\t\"krasota.ru\":                           {},\n\t\"kredutu.com.ua\":                       {},\n\t\"kredytbank.com.ua\":                    {},\n\t\"kruiz-sochi.ru\":                       {},\n\t\"krumble-adsde.info\":                   {},\n\t\"krumble-adsen.info\":                   {},\n\t\"krumbleent-ads.info\":                  {},\n\t\"kursy-ege.ru\":                         {},\n\t\"l2soft.eu\":                            {},\n\t\"lafppshop.xyz\":                        {},\n\t\"lakiikraski.ru\":                       {},\n\t\"lalalove.ru\":                          {},\n\t\"lambreshop.xyz\":                       {},\n\t\"laminat.com.ua\":                       {},\n\t\"landliver.org\":                        {},\n\t\"landoftracking.com\":                   {},\n\t\"laptop-4-less.com\":                    {},\n\t\"law-check-two.xyz\":                    {},\n\t\"law-enforcement-bot-ff.xyz\":           {},\n\t\"law-enforcement-check-three.xyz\":      {},\n\t\"law-enforcement-ee.xyz\":               {},\n\t\"law-six.xyz\":                          {},\n\t\"lawrenceblog.online\":                  {},\n\t\"laxdrills.com\":                        {},\n\t\"lcecshop.xyz\":                         {},\n\t\"leboard.ru\":                           {},\n\t\"lebowmall.xyz\":                        {},\n\t\"ledalfa.by\":                           {},\n\t\"leddjc.net\":                           {},\n\t\"ledx.by\":                              {},\n\t\"leeboyrussia.com\":                     {},\n\t\"legalrc.biz\":                          {},\n\t\"leon-official.site\":                   {},\n\t\"lerporn.info\":                         {},\n\t\"leto-dacha.ru\":                        {},\n\t\"lider82.ru\":                           {},\n\t\"lifespeaker.ru\":                       {},\n\t\"ligastavok-in.ru\":                     {},\n\t\"lighthearteds.shop\":                   {},\n\t\"lindsayblog.online\":                   {},\n\t\"lipidofobia.com.br\":                   {},\n\t\"littleberry.ru\":                       {},\n\t\"live-xbet.com\":                        {},\n\t\"livefixer.com\":                        {},\n\t\"livejournal.top\":                      {},\n\t\"livia-pache.ru\":                       {},\n\t\"livingroomdecoratingideas.website\":    {},\n\t\"livingsimply.com\":                     {},\n\t\"lk-gosuslugi.ru\":                      {},\n\t\"lk-lk-rt.ru\":                          {},\n\t\"local-seo-for-multiple-locations.com\": {},\n\t\"login-tinkoff.ru\":                     {},\n\t\"logo-all.ru\":                          {},\n\t\"lolz.guru\":                            {},\n\t\"lolzteam.online\":                      {},\n\t\"lolzteam.org\":                         {},\n\t\"lookover.ru\":                          {},\n\t\"lotoflotto.ru\":                        {},\n\t\"loveorganic.ch\":                       {},\n\t\"lowpricesiterx.com\":                   {},\n\t\"lsex.xyz\":                             {},\n\t\"lsitenonrepeat.com\":                   {},\n\t\"luckybull.io\":                         {},\n\t\"lukoilcard.ru\":                        {},\n\t\"lumb.co\":                              {},\n\t\"luton-invest.ru\":                      {},\n\t\"luxup.ru\":                             {},\n\t\"luxurybet.ru\":                         {},\n\t\"madisonclothingny.com\":                {},\n\t\"madjonline.xyz\":                       {},\n\t\"magicart.store\":                       {},\n\t\"magicdiet.gq\":                         {},\n\t\"magnetic-bracelets.ru\":                {},\n\t\"mainhunter.com\":                       {},\n\t\"makemoneyonline.com\":                  {},\n\t\"makeprogress.ga\":                      {},\n\t\"makler.org.ua\":                        {},\n\t\"malbgoods.xyz\":                        {},\n\t\"maltadailypost.com\":                   {},\n\t\"mamidushop.xyz\":                       {},\n\t\"mamylik.ru\":                           {},\n\t\"manimpotence.com\":                     {},\n\t\"manonstore.xyz\":                       {},\n\t\"manwang.net\":                          {},\n\t\"maofengjx.com\":                        {},\n\t\"marathonbet-in.ru\":                    {},\n\t\"marblestyle.ru\":                       {},\n\t\"maridan.com.ua\":                       {},\n\t\"marihome.online\":                      {},\n\t\"marjorieblog.online\":                  {},\n\t\"marketland.ml\":                        {},\n\t\"martinahome.xyz\":                      {},\n\t\"masterseek.com\":                       {},\n\t\"mathoutlet.xyz\":                       {},\n\t\"matomete.net\":                         {},\n\t\"matras.space\":                         {},\n\t\"mattgibson.us\":                        {},\n\t\"max-apprais.com\":                      {},\n\t\"maxinesamson.top\":                     {},\n\t\"maxxximoda.ru\":                        {},\n\t\"mebel-arts.com\":                       {},\n\t\"mebel-ekb.com\":                        {},\n\t\"mebel-iz-dereva.kiev.ua\":              {},\n\t\"mebelcomplekt.ru\":                     {},\n\t\"mebeldekor.com.ua\":                    {},\n\t\"meblieco.com\":                         {},\n\t\"med-dopomoga.com\":                     {},\n\t\"med-recept.ru\":                        {},\n\t\"med-zdorovie.com.ua\":                  {},\n\t\"medbrowse.info\":                       {},\n\t\"medcor-list.ru\":                       {},\n\t\"medic-al.ru\":                          {},\n\t\"medicaltranslate.ru\":                  {},\n\t\"medicineseasybuy.com\":                 {},\n\t\"meds-online24.com\":                    {},\n\t\"meduza-consult.ru\":                    {},\n\t\"megalit-d.ru\":                         {},\n\t\"megapolis-96.ru\":                      {},\n\t\"megatkani.ru\":                         {},\n\t\"melbet-in.ru\":                         {},\n\t\"melissahome.top\":                      {},\n\t\"mercanmall.xyz\":                       {},\n\t\"meriton.ru\":                           {},\n\t\"meroyharte.top\":                       {},\n\t\"metallo-konstruktsii.ru\":              {},\n\t\"metallosajding.ru\":                    {},\n\t\"meteocast.net\":                        {},\n\t\"mhp.su\":                               {},\n\t\"mhrdmall.xyz\":                         {},\n\t\"miaxxx.com\":                           {},\n\t\"michellblog.online\":                   {},\n\t\"midnight.im\":                          {},\n\t\"mifepriston.net\":                      {},\n\t\"migronis.com\":                         {},\n\t\"mikozstop.com\":                        {},\n\t\"mikrocement.com.ua\":                   {},\n\t\"mikrozaim.site\":                       {},\n\t\"mikrozaym2you.ru\":                     {},\n\t\"minegam.com\":                          {},\n\t\"miningblack.net\":                      {},\n\t\"mirfairytale.ru\":                      {},\n\t\"mirobuvi.com.ua\":                      {},\n\t\"mirtorrent.net\":                       {},\n\t\"misselle.ru\":                          {},\n\t\"mksoap.ru\":                            {},\n\t\"mksport.ru\":                           {},\n\t\"mmdoors.ru\":                           {},\n\t\"mmm.lc\":                               {},\n\t\"mmm.sb\":                               {},\n\t\"mnogabukaff.net\":                      {},\n\t\"mobicover.com.ua\":                     {},\n\t\"mobilemedia.md\":                       {},\n\t\"mobisport.ru\":                         {},\n\t\"mockupui.com\":                         {},\n\t\"modforwot.ru\":                         {},\n\t\"modnie-futbolki.net\":                  {},\n\t\"moe1.ru\":                              {},\n\t\"moinozhki.com\":                        {},\n\t\"moiragracie.top\":                      {},\n\t\"moisadogorod.ru\":                      {},\n\t\"monetizationking.net\":                 {},\n\t\"money-for-placing-articles.com\":       {},\n\t\"money7777.info\":                       {},\n\t\"moneytop.ru\":                          {},\n\t\"moneyzzz.ru\":                          {},\n\t\"monicablog.xyz\":                       {},\n\t\"moon.market\":                          {},\n\t\"moonci.ru\":                            {},\n\t\"mosputana.info\":                       {},\n\t\"mosputana.top\":                        {},\n\t\"mosrif.ru\":                            {},\n\t\"mossiemckenzie.shop\":                  {},\n\t\"mostbet-285.com\":                      {},\n\t\"mostbet-original.ru\":                  {},\n\t\"mostcool.top\":                         {},\n\t\"mostorgnerud.ru\":                      {},\n\t\"moy-dokument.com\":                     {},\n\t\"moy-evroopt.ru\":                       {},\n\t\"moyakuhnia.ru\":                        {},\n\t\"moyaskidka.ru\":                        {},\n\t\"moygorod-online.ru\":                   {},\n\t\"moyparnik.com\":                        {},\n\t\"mrbojikobi4.biz\":                      {},\n\t\"mrt-info.ru\":                          {},\n\t\"msk-sprawka.com\":                      {},\n\t\"mtras.xyz\":                            {},\n\t\"mtsguru.ru\":                           {},\n\t\"mukis.ru\":                             {},\n\t\"muscle-factory.com.ua\":                {},\n\t\"musichallaudio.ru\":                    {},\n\t\"mvmagoods.xyz\":                        {},\n\t\"mwductwork.com\":                       {},\n\t\"mybestoffers.club\":                    {},\n\t\"myborder.ru\":                          {},\n\t\"mybuh.kz\":                             {},\n\t\"mycheaptraffic.com\":                   {},\n\t\"mycollegereview.com\":                  {},\n\t\"mydirtystuff.com\":                     {},\n\t\"mydoctorok.ru\":                        {},\n\t\"myecomir.com\":                         {},\n\t\"myftpupload.com\":                      {},\n\t\"myplaycity.com\":                       {},\n\t\"mysexpics.ru\":                         {},\n\t\"mytherealshop.com\":                    {},\n\t\"mytraffic.shop\":                       {},\n\t\"nachalka21.ru\":                        {},\n\t\"nakozhe.com\":                          {},\n\t\"nancyblog.top\":                        {},\n\t\"nanochskazki.ru\":                      {},\n\t\"nanwar.xyz\":                           {},\n\t\"naobumium.info\":                       {},\n\t\"naphi.xyz\":                            {},\n\t\"narkomaniya-stop.ru\":                  {},\n\t\"narosty.com\":                          {},\n\t\"natali-forex.com\":                     {},\n\t\"natprof.ru\":                           {},\n\t\"naturalpharm.com.ua\":                  {},\n\t\"navek.by\":                             {},\n\t\"nbok.net\":                             {},\n\t\"nebbiasale.xyz\":                       {},\n\t\"needtosellmyhousefast.com\":            {},\n\t\"net-profits.xyz\":                      {},\n\t\"nethouse.ru\":                          {},\n\t\"nevapotolok.ru\":                       {},\n\t\"newagebev.com\":                        {},\n\t\"newsrosprom.ru\":                       {},\n\t\"newstaffadsshop.club\":                 {},\n\t\"nfocusdriver.com\":                     {},\n\t\"nhmrcsale.xyz\":                        {},\n\t\"nicola.top\":                           {},\n\t\"nicolaonline.top\":                     {},\n\t\"niki-mlt.ru\":                          {},\n\t\"ninacecillia.top\":                     {},\n\t\"niuting.org\":                          {},\n\t\"no-rx.info\":                           {},\n\t\"nomerounddec.cf\":                      {},\n\t\"novosti-avto.ru\":                      {},\n\t\"novosti-hi-tech.ru\":                   {},\n\t\"novostic.ru\":                          {},\n\t\"now-hydra2020.com\":                    {},\n\t\"ntdtv.ru\":                             {},\n\t\"nubuilderian.info\":                    {},\n\t\"nufaq.com\":                            {},\n\t\"nutriwestncahi.com\":                   {},\n\t\"nvkzsale.xyz\":                         {},\n\t\"nwrcz.com\":                            {},\n\t\"nyinfo.org\":                           {},\n\t\"o-o-11-o-o.com\":                       {},\n\t\"o-o-6-o-o.com\":                        {},\n\t\"o-o-6-o-o.ru\":                         {},\n\t\"o-o-8-o-o.com\":                        {},\n\t\"o-o-8-o-o.ru\":                         {},\n\t\"o-promyshlennosti.ru\":                 {},\n\t\"oblismall.xyz\":                        {},\n\t\"obnallpro.cc\":                         {},\n\t\"obsessionphrases.com\":                 {},\n\t\"obyavka.org.ua\":                       {},\n\t\"obzor-casino-x.online\":                {},\n\t\"obzor-casino-x.ru\":                    {},\n\t\"odiabetikah.com\":                      {},\n\t\"odsadsmobile.biz\":                     {},\n\t\"ofermerah.com\":                        {},\n\t\"office2web.com\":                       {},\n\t\"officedocuments.net\":                  {},\n\t\"ogorodnic.com\":                        {},\n\t\"okna-systems.pro\":                     {},\n\t\"okno.ooo\":                             {},\n\t\"okoshkah.com\":                         {},\n\t\"oledonline.xyz\":                       {},\n\t\"olovoley.ru\":                          {},\n\t\"omega.best\":                           {},\n\t\"one-a-plus.xyz\":                       {},\n\t\"onenews24.ru\":                         {},\n\t\"onion20hydra.ru\":                      {},\n\t\"onionhydra.net\":                       {},\n\t\"onionshydra.com\":                      {},\n\t\"online-akbars.ru\":                     {},\n\t\"online-binbank.ru\":                    {},\n\t\"online-hit.info\":                      {},\n\t\"online-intim.com\":                     {},\n\t\"online-mkb.ru\":                        {},\n\t\"online-pharma.ru\":                     {},\n\t\"online-pochtabank.ru\":                 {},\n\t\"online-raiffeisen.ru\":                 {},\n\t\"online-sbank.ru\":                      {},\n\t\"online-templatestore.com\":             {},\n\t\"online-video-chat.ru\":                 {},\n\t\"online-vostbank.ru\":                   {},\n\t\"online-vtb.ru\":                        {},\n\t\"onlinedic.net\":                        {},\n\t\"onlinetvseries.me\":                    {},\n\t\"onlinewot.ru\":                         {},\n\t\"onlywoman.org\":                        {},\n\t\"oohlivecams.com\":                      {},\n\t\"ooo-olni.ru\":                          {},\n\t\"oooh.pro\":                             {},\n\t\"optsol.ru\":                            {},\n\t\"oqex.io\":                              {},\n\t\"oracle-patches.ru\":                    {},\n\t\"orakul.spb.ru\":                        {},\n\t\"osteochondrosis.ru\":                   {},\n\t\"otdbiaxaem-vmeste.ru\":                 {},\n\t\"otdyx-s-komfortom.ru\":                 {},\n\t\"oudallas.net\":                         {},\n\t\"own-ahrefs.com\":                       {},\n\t\"ownshop.cf\":                           {},\n\t\"ozas.net\":                             {},\n\t\"pacobarrero.com\":                      {},\n\t\"pageinsider.org\":                      {},\n\t\"paidonlinesites.com\":                  {},\n\t\"painting-planet.com\":                  {},\n\t\"palma-de-sochi.ru\":                    {},\n\t\"palvira.com.ua\":                       {},\n\t\"pamjatnik.com.ua\":                     {},\n\t\"pamyatnik-spb.ru\":                     {},\n\t\"pamyatnik-tsena.ru\":                   {},\n\t\"pandoshop.xyz\":                        {},\n\t\"parcsmalls.xyz\":                       {},\n\t\"paretto.ru\":                           {},\n\t\"parking-invest.ru\":                    {},\n\t\"partizan19.ru\":                        {},\n\t\"partnerskie-programmy.net\":            {},\n\t\"patonsale.xyz\":                        {},\n\t\"paulinho.ru\":                          {},\n\t\"pay.ru\":                               {},\n\t\"pc-services.ru\":                       {},\n\t\"pecmastore.xyz\":                       {},\n\t\"penzu.xyz\":                            {},\n\t\"perform-like-alibabaity.info\":         {},\n\t\"perform-likeism-alibaba.info\":         {},\n\t\"perimetor.ru\":                         {},\n\t\"perm.dienai.ru\":                       {},\n\t\"perper.ru\":                            {},\n\t\"petrovka-online.com\":                  {},\n\t\"petrushka-restoran.ru\":                {},\n\t\"petscar.ru\":                           {},\n\t\"pfrf-kabinet.ru\":                      {},\n\t\"pharm--shop.ru\":                       {},\n\t\"phimmakinhdi.com\":                     {},\n\t\"photo-clip.ru\":                        {},\n\t\"photokitchendesign.com\":               {},\n\t\"php-market.ru\":                        {},\n\t\"picturesmania.com\":                    {},\n\t\"pills24h.com\":                         {},\n\t\"piluli.info\":                          {},\n\t\"pinupcasinos.ru\":                      {},\n\t\"pinupcasinos1.ru\":                     {},\n\t\"pinupp1.com\":                          {},\n\t\"piratbike.ru\":                         {},\n\t\"pirelli-matador.ru\":                   {},\n\t\"piulatte.cz\":                          {},\n\t\"pizdeishn.com\":                        {},\n\t\"pizdeishn.net\":                        {},\n\t\"pizza-imperia.com\":                    {},\n\t\"pizza-tycoon.com\":                     {},\n\t\"pk-pomosch.ru\":                        {},\n\t\"pk-services.ru\":                       {},\n\t\"plagscan.com\":                         {},\n\t\"podarkilove.ru\":                       {},\n\t\"poddon-moskva.ru\":                     {},\n\t\"podemnik.pro\":                         {},\n\t\"podseka1.ru\":                          {},\n\t\"poiskzakona.ru\":                       {},\n\t\"poker-royal777.com\":                   {},\n\t\"pokupaylegko.ru\":                      {},\n\t\"polemikon.ru\":                         {},\n\t\"politika.bg\":                          {},\n\t\"polyana-skazok.org.ua\":                {},\n\t\"popads.net\":                           {},\n\t\"popelina.com\":                         {},\n\t\"pops.foundation\":                      {},\n\t\"popugauka.ru\":                         {},\n\t\"popugaychiki.com\":                     {},\n\t\"porn-video-chat.ru\":                   {},\n\t\"porndl.org\":                           {},\n\t\"pornhive.org\":                         {},\n\t\"pornhub-forum.ga\":                     {},\n\t\"pornhub-ru.com\":                       {},\n\t\"porno-asia.com\":                       {},\n\t\"porno-chaman.info\":                    {},\n\t\"porno-gallery.ru\":                     {},\n\t\"porno2xl.net\":                         {},\n\t\"pornobest.su\":                         {},\n\t\"pornoelita.info\":                      {},\n\t\"pornoforadult.com\":                    {},\n\t\"pornofoto.org\":                        {},\n\t\"pornogig.com\":                         {},\n\t\"pornohd1080.online\":                   {},\n\t\"pornoklad.ru\":                         {},\n\t\"pornonik.com\":                         {},\n\t\"pornoplen.com\":                        {},\n\t\"pornorasskazy.net\":                    {},\n\t\"pornosemki.info\":                      {},\n\t\"pornoslave.net\":                       {},\n\t\"portnoff.od.ua\":                       {},\n\t\"pospektr.ru\":                          {},\n\t\"posteezy.xyz\":                         {},\n\t\"potolokelekor.ru\":                     {},\n\t\"povodok-shop.ru\":                      {},\n\t\"pozdravleniya-c.ru\":                   {},\n\t\"predmety.in.ua\":                       {},\n\t\"prezidentshop.ru\":                     {},\n\t\"priceg.com\":                           {},\n\t\"pricheski-video.com\":                  {},\n\t\"primfootball.com\":                     {},\n\t\"primoblog.xyz\":                        {},\n\t\"print-technology.ru\":                  {},\n\t\"private-service.best\":                 {},\n\t\"prizesk.com\":                          {},\n\t\"prizrn.site\":                          {},\n\t\"prlog.ru\":                             {},\n\t\"probenzo.com.ua\":                      {},\n\t\"procrafts.ru\":                         {},\n\t\"prodaemdveri.com\":                     {},\n\t\"producm.ru\":                           {},\n\t\"prodvigator.ua\":                       {},\n\t\"professionalsolutions.eu\":             {},\n\t\"profnastil-moscow.ru\":                 {},\n\t\"progressive-seo.com\":                  {},\n\t\"prointer.net.ua\":                      {},\n\t\"prom23.ru\":                            {},\n\t\"promoforum.ru\":                        {},\n\t\"promoteapps.online\":                   {},\n\t\"promotion-for99.com\":                  {},\n\t\"pron.pro\":                             {},\n\t\"proquoshop.xyz\":                       {},\n\t\"prosmibank.ru\":                        {},\n\t\"prostitutki-rostova.ru.com\":           {},\n\t\"prostoacc.com\":                        {},\n\t\"psa48.ru\":                             {},\n\t\"psiosale.xyz\":                         {},\n\t\"psn-card.ru\":                          {},\n\t\"ptashkatextil.ua\":                     {},\n\t\"ptfic.org\":                            {},\n\t\"punch.media\":                          {},\n\t\"purchasepillsnorx.com\":                {},\n\t\"puzzleweb.ru\":                         {},\n\t\"qoinex.top\":                           {},\n\t\"qtrstar.xyz\":                          {},\n\t\"qualitymarketzone.com\":                {},\n\t\"quickchange.cc\":                       {},\n\t\"quit-smoking.ga\":                      {},\n\t\"qwesa.ru\":                             {},\n\t\"qxnr.net\":                             {},\n\t\"rachelblog.online\":                    {},\n\t\"rainbirds.ru\":                         {},\n\t\"rangjued.com\":                         {},\n\t\"rank-checker.online\":                  {},\n\t\"rankings-analytics.com\":               {},\n\t\"ranksonic.info\":                       {},\n\t\"ranksonic.net\":                        {},\n\t\"ranksonic.org\":                        {},\n\t\"rapidgator-porn.ga\":                   {},\n\t\"rapidsites.pro\":                       {},\n\t\"raschtextil.com.ua\":                   {},\n\t\"raymondblog.top\":                      {},\n\t\"razborka-skoda.org.ua\":                {},\n\t\"rb-str.ru\":                            {},\n\t\"rcb101.ru\":                            {},\n\t\"rczhan.com\":                           {},\n\t\"realresultslist.com\":                  {},\n\t\"recinziireale.com\":                    {},\n\t\"rednise.com\":                          {},\n\t\"redraincine.com\":                      {},\n\t\"refpawro.xyz\":                         {},\n\t\"reginablog.top\":                       {},\n\t\"reginanahum.top\":                      {},\n\t\"regionshop.biz\":                       {},\n\t\"reklamnoe.agency\":                     {},\n\t\"releshop.ru\":                          {},\n\t\"rembash.ru\":                           {},\n\t\"remkompov.ru\":                         {},\n\t\"remont-kvartirspb.com\":                {},\n\t\"remontvau.ru\":                         {},\n\t\"rent2spb.ru\":                          {},\n\t\"replica-watch.ru\":                     {},\n\t\"research.ifmo.ru\":                     {},\n\t\"resell-seo-services.com\":              {},\n\t\"resellerclub.com\":                     {},\n\t\"residualforlife.com\":                  {},\n\t\"responsive-test.net\":                  {},\n\t\"resurs-2012.ru\":                       {},\n\t\"reversing.cc\":                         {},\n\t\"revolgc.pro\":                          {},\n\t\"rfavon.ru\":                            {},\n\t\"rfesc.net\":                            {},\n\t\"riedismall.xyz\":                       {},\n\t\"rightenergysolutions.com.au\":          {},\n\t\"rkmbonline.xyz\":                       {},\n\t\"robocheck.info\":                       {},\n\t\"roof-city.ru\":                         {},\n\t\"room-mebel.ru\":                        {},\n\t\"rospromtest.ru\":                       {},\n\t\"royal-casino.online\":                  {},\n\t\"royal-casino.ru\":                      {},\n\t\"royal-casinos.online\":                 {},\n\t\"royal-casinos.ru\":                     {},\n\t\"royal-cazino.online\":                  {},\n\t\"royal-cazino.ru\":                      {},\n\t\"rrutw.com\":                            {},\n\t\"rspectr.com\":                          {},\n\t\"ru-lk-rt.ru\":                          {},\n\t\"ru-onion.com\":                         {},\n\t\"ru-online-sberbank.ru\":                {},\n\t\"rufreechats.com\":                      {},\n\t\"ruhydraru.ru\":                         {},\n\t\"ruinfocomp.ru\":                        {},\n\t\"rulate.ru\":                            {},\n\t\"rumamba.com\":                          {},\n\t\"runetki-online.net\":                   {},\n\t\"rupolitshow.ru\":                       {},\n\t\"rus-lit.com\":                          {},\n\t\"ruscams-com.ru\":                       {},\n\t\"rusexy.xyz\":                           {},\n\t\"ruspoety.ru\":                          {},\n\t\"russian-postindex.ru\":                 {},\n\t\"russian-translator.com\":               {},\n\t\"russian-videochats.ru\":                {},\n\t\"russkie-sochineniya.ru\":               {},\n\t\"rustag.ru\":                            {},\n\t\"rutor.group\":                          {},\n\t\"rxshop.md\":                            {},\n\t\"rybalka-opt.ru\":                       {},\n\t\"s-forum.biz\":                          {},\n\t\"s-luna.me\":                            {},\n\t\"sabinablog.xyz\":                       {},\n\t\"sad-torg.com.ua\":                      {},\n\t\"sady-urala.ru\":                        {},\n\t\"saltspray.ru\":                         {},\n\t\"samanthablog.online\":                  {},\n\t\"samara-airport.com\":                   {},\n\t\"samara-comfort.ru\":                    {},\n\t\"samchist.ru\":                          {},\n\t\"samlaurabrown.top\":                    {},\n\t\"samogonius.ru\":                        {},\n\t\"sanjosestartups.com\":                  {},\n\t\"santaren.by\":                          {},\n\t\"santasgift.ml\":                        {},\n\t\"santehnovich.ru\":                      {},\n\t\"sapaship.ru\":                          {},\n\t\"sarahmilne.top\":                       {},\n\t\"saudegoods.xyz\":                       {},\n\t\"sauna-v-ufe.ru\":                       {},\n\t\"sauni-lipetsk.ru\":                     {},\n\t\"sauni-moskva.ru\":                      {},\n\t\"savetubevideo.com\":                    {},\n\t\"savetubevideo.info\":                   {},\n\t\"scansafe.net\":                         {},\n\t\"scat.porn\":                            {},\n\t\"sciedsale.xyz\":                        {},\n\t\"screen-led.ru\":                        {},\n\t\"screentoolkit.com\":                    {},\n\t\"scripted.com\":                         {},\n\t\"search-error.com\":                     {},\n\t\"searchencrypt.com\":                    {},\n\t\"security-corporation.com.ua\":          {},\n\t\"seekanvdoo22.live\":                    {},\n\t\"seisasale.xyz\":                        {},\n\t\"sel-hoz.com\":                          {},\n\t\"selfhotdog.com\":                       {},\n\t\"sell-fb-group-here.com\":               {},\n\t\"semalt.com\":                           {},\n\t\"semalt.net\":                           {},\n\t\"semaltmedia.com\":                      {},\n\t\"semxiu.com\":                           {},\n\t\"senacertificados.co\":                  {},\n\t\"seo-2-0.com\":                          {},\n\t\"seo-platform.com\":                     {},\n\t\"seo-services-b2b.com\":                 {},\n\t\"seo-services-wordpress.com\":           {},\n\t\"seo-smm.kz\":                           {},\n\t\"seo-tips.top\":                         {},\n\t\"seo-traffic.xyz\":                      {},\n\t\"seoanalyses.com\":                      {},\n\t\"seobook.top\":                          {},\n\t\"seocheckupx.com\":                      {},\n\t\"seocheckupx.net\":                      {},\n\t\"seoexperimenty.ru\":                    {},\n\t\"seojokes.net\":                         {},\n\t\"seopub.net\":                           {},\n\t\"seoriseome.netlify.app\":               {},\n\t\"seoservices2018.com\":                  {},\n\t\"serenamall.xyz\":                       {},\n\t\"serialsx.ru\":                          {},\n\t\"servemlixo.xyz\":                       {},\n\t\"sex-porno.site\":                       {},\n\t\"sex-spying.ru\":                        {},\n\t\"sex-videochats.ru\":                    {},\n\t\"sexpornotales.net\":                    {},\n\t\"sexreliz.com\":                         {},\n\t\"sexreliz.net\":                         {},\n\t\"sexsaoy.com\":                          {},\n\t\"sexuria.net\":                          {},\n\t\"sexwife.net\":                          {},\n\t\"sexy-girl-chat.ru\":                    {},\n\t\"sexyali.com\":                          {},\n\t\"shagtomsk.ru\":                         {},\n\t\"shamcisale.xyz\":                       {},\n\t\"shanscasino1.ru\":                      {},\n\t\"share-buttons-for-free.com\":           {},\n\t\"share-buttons.xyz\":                    {},\n\t\"sharebutton.io\":                       {},\n\t\"sharebutton.net\":                      {},\n\t\"sharebutton.to\":                       {},\n\t\"shcrose.com\":                          {},\n\t\"sheki-spb.ru\":                         {},\n\t\"shisenshop.xyz\":                       {},\n\t\"shnyagi.net\":                          {},\n\t\"shop-garena.ru\":                       {},\n\t\"shop.garena.ru.com\":                   {},\n\t\"shop2hydra.com\":                       {},\n\t\"shop4fit.ru\":                          {},\n\t\"shopfishing.com.ua\":                   {},\n\t\"shoppinglocation.com\":                 {},\n\t\"shoppingmiracles.co.uk\":               {},\n\t\"shoprybalka.ru\":                       {},\n\t\"shops-ru.ru\":                          {},\n\t\"shopsellcardsdumps.com\":               {},\n\t\"shtaketniki.ru\":                       {},\n\t\"shtormmall.xyz\":                       {},\n\t\"shulepov.ru\":                          {},\n\t\"sib-kukla.ru\":                         {},\n\t\"sibecoprom.ru\":                        {},\n\t\"sibkukla.ru\":                          {},\n\t\"sign-service.ru\":                      {},\n\t\"sihugoods.xyz\":                        {},\n\t\"silvergull.ru\":                        {},\n\t\"sim-dealer.ru\":                        {},\n\t\"similarmoviesdb.com\":                  {},\n\t\"simoncinicancertherapy.com\":           {},\n\t\"simple-share-buttons.com\":             {},\n\t\"singularwebs.net\":                     {},\n\t\"sinhronperevod.ru\":                    {},\n\t\"sirhoutlet.xyz\":                       {},\n\t\"siritshop.xyz\":                        {},\n\t\"site-auditor.online\":                  {},\n\t\"site5.com\":                            {},\n\t\"siteripz.net\":                         {},\n\t\"sitesadd.com\":                         {},\n\t\"sitevaluation.org\":                    {},\n\t\"sjmsw.net\":                            {},\n\t\"skidku.org.ua\":                        {},\n\t\"skinali.com\":                          {},\n\t\"skinali.photo-clip.ru\":                {},\n\t\"sladkoevideo.com\":                     {},\n\t\"sledstvie-veli.net\":                   {},\n\t\"slftsdybbg.ru\":                        {},\n\t\"slkrm.ru\":                             {},\n\t\"slomm.ru\":                             {},\n\t\"sloopyjoes.com.top\":                   {},\n\t\"slotron.com\":                          {},\n\t\"slow-website.xyz\":                     {},\n\t\"smailik.org\":                          {},\n\t\"smartphonediscount.info\":              {},\n\t\"smt4.ru\":                              {},\n\t\"smzt.shop\":                            {},\n\t\"snabs.kz\":                             {},\n\t\"snaiper-bg.net\":                       {},\n\t\"sneakerfreaker.com\":                   {},\n\t\"snegozaderzhatel.ru\":                  {},\n\t\"snip.to\":                              {},\n\t\"snip.tw\":                              {},\n\t\"soaksoak.ru\":                          {},\n\t\"sochi-3d.ru\":                          {},\n\t\"social-button.xyz\":                    {},\n\t\"social-buttons-ii.xyz\":                {},\n\t\"social-buttons.com\":                   {},\n\t\"social-traffic-1.xyz\":                 {},\n\t\"social-traffic-2.xyz\":                 {},\n\t\"social-traffic-3.xyz\":                 {},\n\t\"social-traffic-4.xyz\":                 {},\n\t\"social-traffic-5.xyz\":                 {},\n\t\"social-traffic-7.xyz\":                 {},\n\t\"social-widget.xyz\":                    {},\n\t\"socialbuttons.xyz\":                    {},\n\t\"socialine.net\":                        {},\n\t\"socialseet.ru\":                        {},\n\t\"socialtrade.biz\":                      {},\n\t\"sohoindia.net\":                        {},\n\t\"solartek.ru\":                          {},\n\t\"solitaire-game.ru\":                    {},\n\t\"solnplast.ru\":                         {},\n\t\"sosdepotdebilan.com\":                  {},\n\t\"souvenirua.com\":                       {},\n\t\"sovetogorod.ru\":                       {},\n\t\"sovetskie-plakaty.ru\":                 {},\n\t\"sowhoz.ru\":                            {},\n\t\"soyuzexpedition.ru\":                   {},\n\t\"sp-laptop.ru\":                         {},\n\t\"sp-zakupki.ru\":                        {},\n\t\"space2019.top\":                        {},\n\t\"spain-poetry.com\":                     {},\n\t\"spartania.com.ua\":                     {},\n\t\"spb-plitka.ru\":                        {},\n\t\"spb-scenar.ru\":                        {},\n\t\"specstroy36.ru\":                       {},\n\t\"speedup-my.site\":                      {},\n\t\"spin2016.cf\":                          {},\n\t\"sportobzori.ru\":                       {},\n\t\"sportwizard.ru\":                       {},\n\t\"spravka130.ru\":                        {},\n\t\"spravkavspb.net\":                      {},\n\t\"spravkavspb.work\":                     {},\n\t\"sprawka-help.com\":                     {},\n\t\"spscmall.xyz\":                         {},\n\t\"spy-app.info\":                         {},\n\t\"sqadia.com\":                           {},\n\t\"squarespace.top\":                      {},\n\t\"sribno.net\":                           {},\n\t\"ssn.is\":                               {},\n\t\"sssexxx.net\":                          {},\n\t\"ssve.ru\":                              {},\n\t\"st-komf.ru\":                           {},\n\t\"sta-grand.ru\":                         {},\n\t\"startraffic.online\":                   {},\n\t\"stat.lviv.ua\":                         {},\n\t\"statashop.xyz\":                        {},\n\t\"stavimdveri.ru\":                       {},\n\t\"steame.ru\":                            {},\n\t\"stiralkovich.ru\":                      {},\n\t\"stocktwists.com\":                      {},\n\t\"stoletie.ru\":                          {},\n\t\"stoliar.org\":                          {},\n\t\"stomatologi.moscow\":                   {},\n\t\"stop-nark.ru\":                         {},\n\t\"stop-zavisimost.com\":                  {},\n\t\"store-rx.com\":                         {},\n\t\"strady.org.ua\":                        {},\n\t\"stream-tds.com\":                       {},\n\t\"stroi-24.ru\":                          {},\n\t\"strongtools.ga\":                       {},\n\t\"stroy-matrix.ru\":                      {},\n\t\"stroyalp.ru\":                          {},\n\t\"stroyka-gid.ru\":                       {},\n\t\"stroyka47.ru\":                         {},\n\t\"studentguide.ru\":                      {},\n\t\"stuffhydra.com\":                       {},\n\t\"stylecaster.top\":                      {},\n\t\"su1ufa.ru\":                            {},\n\t\"success-seo.com\":                      {},\n\t\"suckoutlet.xyz\":                       {},\n\t\"sudachitravel.com\":                    {},\n\t\"sundrugstore.com\":                     {},\n\t\"super-seo-guru.com\":                   {},\n\t\"superiends.org\":                       {},\n\t\"supermama.top\":                        {},\n\t\"supermodni.com.ua\":                    {},\n\t\"superoboi.com.ua\":                     {},\n\t\"superslots-casino.online\":             {},\n\t\"superslots-casino.site\":               {},\n\t\"superslots-cazino.online\":             {},\n\t\"superslots-cazino.site\":               {},\n\t\"superslotz-casino.site\":               {},\n\t\"superslotz-cazino.site\":               {},\n\t\"supertraffic.xyz\":                     {},\n\t\"supervesti.ru\":                        {},\n\t\"suzanneboswell.top\":                   {},\n\t\"svadba-teplohod.ru\":                   {},\n\t\"svarog-jez.com\":                       {},\n\t\"svensk-poesi.com\":                     {},\n\t\"svet-depo.ru\":                         {},\n\t\"svetka.info\":                          {},\n\t\"svetoch.moscow\":                       {},\n\t\"svoimi-rukamy.com\":                    {},\n\t\"svs-avto.com\":                         {},\n\t\"swaplab.io\":                           {},\n\t\"sweet.tv\":                             {},\n\t\"t-machinery.ru\":                       {},\n\t\"t-rec.su\":                             {},\n\t\"taartstore.xyz\":                       {},\n\t\"tagmeanvice.live\":                     {},\n\t\"taihouse.ru\":                          {},\n\t\"tam-gde-more.ru\":                      {},\n\t\"tamada69.com\":                         {},\n\t\"tammyblog.online\":                     {},\n\t\"targetpay.nl\":                         {},\n\t\"tattoo-stickers.ru\":                   {},\n\t\"tattooha.com\":                         {},\n\t\"tccp.xyz\":                             {},\n\t\"tcenavoprosa.ru\":                      {},\n\t\"tcsinksale.xyz\":                       {},\n\t\"tcyh.net\":                             {},\n\t\"td-abs.ru\":                            {},\n\t\"td-l-market.ru\":                       {},\n\t\"td-perimetr.ru\":                       {},\n\t\"tdbatik.com\":                          {},\n\t\"tds-west.ru\":                          {},\n\t\"technika-remont.ru\":                   {},\n\t\"tedxrj.com\":                           {},\n\t\"telfer.ru\":                            {},\n\t\"teman.com.ua\":                         {},\n\t\"tennis-bet.ru\":                        {},\n\t\"tentcomplekt.ru\":                      {},\n\t\"teplohod-gnezdo.ru\":                   {},\n\t\"teplokomplex.ru\":                      {},\n\t\"terapist.xyz\":                         {},\n\t\"teresablog.top\":                       {},\n\t\"tesla-audit.ru\":                       {},\n\t\"texnika.com.ua\":                       {},\n\t\"tgsubs.com\":                           {},\n\t\"tgtclick.com\":                         {},\n\t\"thaimassage-slon.ru\":                  {},\n\t\"thaoduoctoc.com\":                      {},\n\t\"the-world.ru\":                         {},\n\t\"theautoprofit.ml\":                     {},\n\t\"thegreensociety.net\":                  {},\n\t\"theguardlan.com\":                      {},\n\t\"thelotter.su\":                         {},\n\t\"therealshop.exaccess.com\":             {},\n\t\"thesensehousehotel.com\":               {},\n\t\"thesmartsearch.net\":                   {},\n\t\"timmy.by\":                             {},\n\t\"tocan.biz\":                            {},\n\t\"tocan.com.ua\":                         {},\n\t\"tokshow.online\":                       {},\n\t\"tomck.com\":                            {},\n\t\"tommysautomotivecare.com\":             {},\n\t\"top-gan.ru\":                           {},\n\t\"top-instagram.info\":                   {},\n\t\"top-kasyna.com\":                       {},\n\t\"top-l2.com\":                           {},\n\t\"top1-seo-service.com\":                 {},\n\t\"top10-online-games.com\":               {},\n\t\"top10-way.com\":                        {},\n\t\"topgurudeals.com\":                     {},\n\t\"topmebeltorg.ru\":                      {},\n\t\"toposvita.com\":                        {},\n\t\"topquality.cf\":                        {},\n\t\"topseoservices.co\":                    {},\n\t\"tor.vc\":                               {},\n\t\"torobrand.com\":                        {},\n\t\"torospa.ru\":                           {},\n\t\"torrentgamer.net\":                     {},\n\t\"torrentred.games\":                     {},\n\t\"totppgoods.xyz\":                       {},\n\t\"tourburlington.com\":                   {},\n\t\"track-rankings.online\":                {},\n\t\"tracker24-gps.ru\":                     {},\n\t\"trade365.org\":                         {},\n\t\"trafers.com\":                          {},\n\t\"traffic-cash.xyz\":                     {},\n\t\"traffic2cash.org\":                     {},\n\t\"traffic2cash.xyz\":                     {},\n\t\"traffic2money.com\":                    {},\n\t\"trafficbot.life\":                      {},\n\t\"trafficbot4free.xyz\":                  {},\n\t\"trafficdrive.club\":                    {},\n\t\"trafficgenius.xyz\":                    {},\n\t\"trafficmonetize.org\":                  {},\n\t\"trafficmonetizer.org\":                 {},\n\t\"trafficstudio.club\":                   {},\n\t\"transit.in.ua\":                        {},\n\t\"transsex-videochat.ru\":                {},\n\t\"traphouselatino.net\":                  {},\n\t\"travel-semantics.com\":                 {},\n\t\"travgoods.xyz\":                        {},\n\t\"trex-casino.com\":                      {},\n\t\"trex.casino\":                          {},\n\t\"tricolortv-online.com\":                {},\n\t\"trieste.io\":                           {},\n\t\"trion.od.ua\":                          {},\n\t\"truebeauty.cc\":                        {},\n\t\"tsatu.edu.ua\":                         {},\n\t\"tsc-koleso.ru\":                        {},\n\t\"tudusale.xyz\":                         {},\n\t\"tuningdom.ru\":                         {},\n\t\"tvfru.org\":                            {},\n\t\"twsufa.ru\":                            {},\n\t\"ua.tc\":                                {},\n\t\"uaecdsale.xyz\":                        {},\n\t\"uasb.ru\":                              {},\n\t\"ucanfly.ru\":                           {},\n\t\"ucban.xyz\":                            {},\n\t\"ucoz.ru\":                              {},\n\t\"ucsfstore.xyz\":                        {},\n\t\"udav.net\":                             {},\n\t\"ufolabs.net\":                          {},\n\t\"uginekologa.com\":                      {},\n\t\"ukrainian-poetry.com\":                 {},\n\t\"ukrcargo.com\":                         {},\n\t\"ukrtvory.in.ua\":                       {},\n\t\"ukstmalls.xyz\":                        {},\n\t\"ul-potolki.ru\":                        {},\n\t\"undergroundcityphoto.com\":             {},\n\t\"unibus.su\":                            {},\n\t\"uniqgen.net\":                          {},\n\t\"univerfiles.com\":                      {},\n\t\"unlimitdocs.net\":                      {},\n\t\"unpredictable.ga\":                     {},\n\t\"upcronline.xyz\":                       {},\n\t\"uptime-as.net\":                        {},\n\t\"uptime-eu.net\":                        {},\n\t\"uptime-us.net\":                        {},\n\t\"uptimechecker.com\":                    {},\n\t\"urbanblog.shop\":                       {},\n\t\"urblog.xyz\":                           {},\n\t\"urlumbrella.com\":                      {},\n\t\"uruto.ru\":                             {},\n\t\"uslugi-tatarstan.ru\":                  {},\n\t\"uterkysale.xyz\":                       {},\n\t\"uusmsale.xyz\":                         {},\n\t\"uyut-dom.pro\":                         {},\n\t\"uyutmaster73.ru\":                      {},\n\t\"uzpaket.com\":                          {},\n\t\"uzungil.com\":                          {},\n\t\"v-casino.fun\":                         {},\n\t\"v-casino.host\":                        {},\n\t\"v-casino.ru\":                          {},\n\t\"v-casino.site\":                        {},\n\t\"v-casino.website\":                     {},\n\t\"v-casino.xyz\":                         {},\n\t\"v-cazino.online\":                      {},\n\t\"v-cazino.ru\":                          {},\n\t\"vaderenergy.ru\":                       {},\n\t\"valid-cc.com\":                         {},\n\t\"validccseller.com\":                    {},\n\t\"validus.pro\":                          {},\n\t\"vanessablog.online\":                   {},\n\t\"vape-x.ru\":                            {},\n\t\"vardenafil20.com\":                     {},\n\t\"varikozdok.ru\":                        {},\n\t\"vavada-casino.host\":                   {},\n\t\"vavada-casino.top\":                    {},\n\t\"vavada-cazino.host\":                   {},\n\t\"vavada-cazino.site\":                   {},\n\t\"vbikse.com\":                           {},\n\t\"vchulkah.net\":                         {},\n\t\"veles.shop\":                           {},\n\t\"veloland.in.ua\":                       {},\n\t\"ventopt.by\":                           {},\n\t\"veronicablog.top\":                     {},\n\t\"vescenter.ru\":                         {},\n\t\"veselokloun.ru\":                       {},\n\t\"vesnatehno.com\":                       {},\n\t\"vetbvc.ru\":                            {},\n\t\"vezdevoz.com.ua\":                      {},\n\t\"vgoloveboli.net\":                      {},\n\t\"viagra-soft.ru\":                       {},\n\t\"video--production.com\":                {},\n\t\"video-girl-online.ru\":                 {},\n\t\"video-woman.com\":                      {},\n\t\"videochat-dating.ru\":                  {},\n\t\"videochat.guru\":                       {},\n\t\"videochat.world\":                      {},\n\t\"videos-for-your-business.com\":         {},\n\t\"videotop.biz\":                         {},\n\t\"vidzwap.xyz\":                          {},\n\t\"viel.su\":                              {},\n\t\"viktoria-center.ru\":                   {},\n\t\"virtchats.ru\":                         {},\n\t\"virtual-love-video.ru\":                {},\n\t\"virtual-sex-chat.ru\":                  {},\n\t\"virtual-sex-time.ru\":                  {},\n\t\"virtual-sex-videochat.ru\":             {},\n\t\"virtual-zaim.ru\":                      {},\n\t\"virtualbb.com\":                        {},\n\t\"virus-schutzmasken.de\":                {},\n\t\"vkonche.com\":                          {},\n\t\"vksex.ru\":                             {},\n\t\"vladtime.ru\":                          {},\n\t\"vodabur.by\":                           {},\n\t\"vodaodessa.com\":                       {},\n\t\"vodkoved.ru\":                          {},\n\t\"volond.com\":                           {},\n\t\"vpdr.pl\":                              {},\n\t\"vrazbor59.ru\":                         {},\n\t\"vrnhnmall.xyz\":                        {},\n\t\"vsdelke.ru\":                           {},\n\t\"vseigru.one\":                          {},\n\t\"vseigry.fun\":                          {},\n\t\"vseprobrak.ru\":                        {},\n\t\"vulkan-nadengi.ru\":                    {},\n\t\"vulkan-oficial.com\":                   {},\n\t\"vulkanrussia1.ru\":                     {},\n\t\"vzheludke.com\":                        {},\n\t\"vzubah.com\":                           {},\n\t\"vzube.com\":                            {},\n\t\"vzubkah.com\":                          {},\n\t\"w2mobile-za.com\":                      {},\n\t\"w3javascript.com\":                     {},\n\t\"wakeupseoconsultant.com\":              {},\n\t\"wallabag.malooma.bzh\":                 {},\n\t\"wallet-prlzn.space\":                   {},\n\t\"wallinside.top\":                       {},\n\t\"wallpaperdesk.info\":                   {},\n\t\"wallpapers-all.com\":                   {},\n\t\"wallstore.xyz\":                        {},\n\t\"wandamary.online\":                     {},\n\t\"warmex.com.ua\":                        {},\n\t\"wasabisale.xyz\":                       {},\n\t\"wave-games.ru\":                        {},\n\t\"wayfcoin.space\":                       {},\n\t\"wbjm.net\":                             {},\n\t\"wdss.com.ua\":                          {},\n\t\"we-ping-for-youic.info\":               {},\n\t\"web-analytics.date\":                   {},\n\t\"web-revenue.xyz\":                      {},\n\t\"webalex.pro\":                          {},\n\t\"weblibrary.win\":                       {},\n\t\"webmaster-traffic.com\":                {},\n\t\"webmonetizer.net\":                     {},\n\t\"website-analytics.online\":             {},\n\t\"website-analyzer.info\":                {},\n\t\"website-speed-check.site\":             {},\n\t\"website-speed-checker.site\":           {},\n\t\"websitebottraffic.host\":               {},\n\t\"websites-reviews.com\":                 {},\n\t\"websocial.me\":                         {},\n\t\"weburlopener.com\":                     {},\n\t\"weightbelts.ru\":                       {},\n\t\"wfdesigngroup.com\":                    {},\n\t\"wjxmenye.com\":                         {},\n\t\"wmasterlead.com\":                      {},\n\t\"woman-orgasm.ru\":                      {},\n\t\"wordpress-crew.net\":                   {},\n\t\"wordpresscore.com\":                    {},\n\t\"workius.ru\":                           {},\n\t\"workona.com\":                          {},\n\t\"works.if.ua\":                          {},\n\t\"worldgamenews.com\":                    {},\n\t\"worldmed.info\":                        {},\n\t\"worldofbtc.com\":                       {},\n\t\"wpnull.org\":                           {},\n\t\"wptraffic.xyz\":                        {},\n\t\"wrc-info.ru\":                          {},\n\t\"wufak.com\":                            {},\n\t\"ww2awards.info\":                       {},\n\t\"www-lk-rt.ru\":                         {},\n\t\"x-lime.com\":                           {},\n\t\"x-lime.net\":                           {},\n\t\"x5market.ru\":                          {},\n\t\"xaker26.net\":                          {},\n\t\"xexe.club\":                            {},\n\t\"xion.cash\":                            {},\n\t\"xkaz.org\":                             {},\n\t\"xmnb.net\":                             {},\n\t\"xn-------53dbcapga5atlplfdm6ag1ab1bvehl0b7toa0k.xn--p1ai\":         {},\n\t\"xn------6cdbciescapvf0a8bibwx0a1bu.xn--90ais\":                     {},\n\t\"xn-----6kcacs9ajdmhcwdcbwwcnbgd13a.xn--p1ai\":                      {},\n\t\"xn-----6kcamwewcd9bayelq.xn--p1ai\":                                {},\n\t\"xn-----7kcaaxchbbmgncr7chzy0k0hk.xn--p1ai\":                        {},\n\t\"xn-----clckdac3bsfgdft3aebjp5etek.xn--p1ai\":                       {},\n\t\"xn----7sbabb9a1b7bddgm6a1i.xn--p1ai\":                              {},\n\t\"xn----7sbabhjc3ccc5aggbzfmfi.xn--p1ai\":                            {},\n\t\"xn----7sbabhv4abd8aih6bb7k.xn--p1ai\":                              {},\n\t\"xn----7sbabm1ahc4b2aqff.su\":                                       {},\n\t\"xn----7sbabn5abjehfwi8bj.xn--p1ai\":                                {},\n\t\"xn----7sbbpe3afguye.xn--p1ai\":                                     {},\n\t\"xn----7sbho2agebbhlivy.xn--p1ai\":                                  {},\n\t\"xn----8sbaki4azawu5b.xn--p1ai\":                                    {},\n\t\"xn----8sbarihbihxpxqgaf0g1e.xn--80adxhks\":                         {},\n\t\"xn----8sbbjimdeyfsi.xn--p1ai\":                                     {},\n\t\"xn----8sbhefaln6acifdaon5c6f4axh.xn--p1ai\":                        {},\n\t\"xn----8sblgmbj1a1bk8l.xn----161-4vemb6cjl7anbaea3afninj.xn--p1ai\": {},\n\t\"xn----8sbowe2akbcd4h.xn--p1ai\":                                    {},\n\t\"xn----8sbpmgeilbd8achi0c.xn--p1ai\":                                {},\n\t\"xn----btbdvdh4aafrfciljm6k.xn--p1ai\":                              {},\n\t\"xn----ctbbcjd3dbsehgi.xn--p1ai\":                                   {},\n\t\"xn----ctbfcdjl8baejhfb1oh.xn--p1ai\":                               {},\n\t\"xn----ctbigni3aj4h.xn--p1ai\":                                      {},\n\t\"xn----dtbffp5aagjgfm.xn--p1ai\":                                    {},\n\t\"xn----ftbeoaiyg1ak1cb7d.xn--p1ai\":                                 {},\n\t\"xn----itbbudqejbfpg3l.com\":                                        {},\n\t\"xn----jtbjfcbdfr0afji4m.xn--p1ai\":                                 {},\n\t\"xn--78-6kc6akkhn3a3k.xn--p1ai\":                                    {},\n\t\"xn--78-6kcmzqfpcb1amd1q.xn--p1ai\":                                 {},\n\t\"xn--80aaajkrncdlqdh6ane8t.xn--p1ai\":                               {},\n\t\"xn--80aabcsc3bqirlt.xn--p1ai\":                                     {},\n\t\"xn--80aanaardaperhcem4a6i.com\":                                    {},\n\t\"xn--80adaggc5bdhlfamsfdij4p7b.xn--p1ai\":                           {},\n\t\"xn--80adgcaax6acohn6r.xn--p1ai\":                                   {},\n\t\"xn--80aeb6argv.xn--p1ai\":                                          {},\n\t\"xn--80aebzmbfeebe.xn--p1ai\":                                       {},\n\t\"xn--80ahdheogk5l.xn--p1ai\":                                        {},\n\t\"xn--90acenikpebbdd4f6d.xn--p1ai\":                                  {},\n\t\"xn--90acjmaltae3acm.xn--p1acf\":                                    {},\n\t\"xn--b1adccayqiirhu.xn--p1ai\":                                      {},\n\t\"xn--c1acygb.xn--p1ai\":                                             {},\n\t\"xn--d1abj0abs9d.in.ua\":                                            {},\n\t\"xn--d1aifoe0a9a.top\":                                              {},\n\t\"xn--e1aaajzchnkg.ru.com\":                                          {},\n\t\"xn--e1aahcgdjkg4aeje6j.kz\":                                        {},\n\t\"xn--e1agf4c.xn--80adxhks\":                                         {},\n\t\"xpert.com.ua\":                                                     {},\n\t\"xrp-ripple.info\":                                                  {},\n\t\"xtraffic.plus\":                                                    {},\n\t\"xtrafficplus.com\":                                                 {},\n\t\"xtrafficplus.online\":                                              {},\n\t\"xtrafficplus.shop\":                                                {},\n\t\"xtrafficplus.xyz\":                                                 {},\n\t\"xxxhamster.me\":                                                    {},\n\t\"xxxvideochat.ru\":                                                  {},\n\t\"xz618.com\":                                                        {},\n\t\"yaderenergy.ru\":                                                   {},\n\t\"yes-com.com\":                                                      {},\n\t\"yes-do-now.com\":                                                   {},\n\t\"yhirurga.ru\":                                                      {},\n\t\"ykecwqlixx.ru\":                                                    {},\n\t\"yodse.io\":                                                         {},\n\t\"yoga4.ru\":                                                         {},\n\t\"yougame.biz\":                                                      {},\n\t\"youhack.info\":                                                     {},\n\t\"youporn-forum.ga\":                                                 {},\n\t\"youporn-ru.com\":                                                   {},\n\t\"your-good-links.com\":                                              {},\n\t\"your-tales.ru\":                                                    {},\n\t\"yourserverisdown.com\":                                             {},\n\t\"yourtraffic.club\":                                                 {},\n\t\"yqpc.net\":                                                         {},\n\t\"yur-p.ru\":                                                         {},\n\t\"yurcons.pro\":                                                      {},\n\t\"yuristproffi.ru\":                                                  {},\n\t\"zagadki.in.ua\":                                                    {},\n\t\"zahodi2hydra.net\":                                                 {},\n\t\"zahvat.ru\":                                                        {},\n\t\"zakaznoy.com.ua\":                                                  {},\n\t\"zakis-azota24.ru\":                                                 {},\n\t\"zakisazota-official.com\":                                          {},\n\t\"zamolotkom.ru\":                                                    {},\n\t\"zapnado.ru\":                                                       {},\n\t\"zarabotat-v-internete.biz\":                                        {},\n\t\"zastroyka.org\":                                                    {},\n\t\"zavod-gm.ru\":                                                      {},\n\t\"zdm-auto.com\":                                                     {},\n\t\"zdm-auto.ru\":                                                      {},\n\t\"zdorovie-nogi.info\":                                               {},\n\t\"zelena-mriya.com.ua\":                                              {},\n\t\"zexhgoods.xyz\":                                                    {},\n\t\"zhcsapp.net\":                                                      {},\n\t\"zhoobintravel.com\":                                                {},\n\t\"zonefiles.bid\":                                                    {},\n\t\"zot.moscow\":                                                       {},\n\t\"zt-m.ru\":                                                          {},\n\t\"zvetki.ru\":                                                        {},\n\t\"zvooq.eu\":                                                         {},\n\t\"zvuker.net\":                                                       {},\n\t// %%END%%\n}\n"
        },
        {
          "name": "refspam_test.go",
          "type": "blob",
          "size": 1.005859375,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"testing\"\n)\n\nfunc TestRefspam(t *testing.T) {\n\ttests := []struct {\n\t\tin   string\n\t\twant bool\n\t}{\n\t\t{\"notinthelist.com\", false},\n\t\t{\"foo.notinthelist.com\", false},\n\n\t\t{\"localhost\", true},\n\t\t{\"a.localhost\", true},\n\t\t{\"c.a.localhost\", true},\n\n\t\t{\"adcash.com\", true},\n\t\t{\"d.adcash.com\", true},\n\n\t\t{\"dadcash.com\", false},\n\t\t{\"localhost.com\", false},\n\t\t{\"asdlocalhost.com\", false},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.in, func(t *testing.T) {\n\t\t\tgot := isRefspam(tt.in)\n\t\t\tif got != tt.want {\n\t\t\t\tt.Errorf(\"\\ngot:  %t\\nwant: %t\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc BenchmarkRefspam(b *testing.B) {\n\tisRefspam(\"notinthelist.com\") // Run the sync.Once\n\n\tb.ReportAllocs()\n\tb.ResetTimer()\n\tv := false\n\tfor n := 0; n < b.N; n++ {\n\t\tv = isRefspam(\"notinthelist.com\")\n\t}\n\t_ = v\n}\n"
        },
        {
          "name": "settings.go",
          "type": "blob",
          "size": 19.1083984375,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"database/sql/driver\"\n\t\"fmt\"\n\t\"slices\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\t\"unicode\"\n\n\t\"zgo.at/json\"\n\t\"zgo.at/tz\"\n\t\"zgo.at/z18n\"\n\t\"zgo.at/zstd/zint\"\n\t\"zgo.at/zstd/zjson\"\n\t\"zgo.at/zvalidate\"\n)\n\n// Settings.Collect values (bitmask)\n//\n// DO NOT change the values of these constants; they're stored in the database.\n//\n// Note: also update CollectFlags() method below.\n//\n// Nothing is 1 and 0 is \"unset\". This is so we can distinguish between \"this\n// field was never sent in the form\" vs. \"user unchecked all boxes\".\nconst (\n\tCollectNothing        zint.Bitflag16 = 1 << iota\n\tCollectReferrer                      // 2\n\tCollectUserAgent                     // 4\n\tCollectScreenSize                    // 8\n\tCollectLocation                      // 16\n\tCollectLocationRegion                // 32\n\tCollectLanguage                      // 64\n\tCollectSession                       // 128\n\tCollectHits                          // 256\n)\n\n// UserSettings.EmailReport values.\nconst (\n\tEmailReportNever = iota // Email once after 2 weeks; for new sites.\n\tEmailReportDaily\n\tEmailReportWeekly\n\tEmailReportBiWeekly\n\tEmailReportMonthly\n)\n\nvar EmailReports = []int{EmailReportNever, EmailReportDaily, EmailReportWeekly,\n\tEmailReportBiWeekly, EmailReportMonthly}\n\ntype (\n\t// SiteSettings contains all the user-configurable settings for a site, with\n\t// the exception of the domain settings.\n\t//\n\t// This is stored as JSON in the database.\n\tSiteSettings struct {\n\t\tPublic         string         `json:\"public\"`\n\t\tSecret         string         `json:\"secret\"`\n\t\tAllowCounter   bool           `json:\"allow_counter\"`\n\t\tAllowBosmang   bool           `json:\"allow_bosmang\"`\n\t\tDataRetention  int            `json:\"data_retention\"`\n\t\tCampaigns      Strings        `json:\"-\"`\n\t\tIgnoreIPs      Strings        `json:\"ignore_ips\"`\n\t\tCollect        zint.Bitflag16 `json:\"collect\"`\n\t\tCollectRegions Strings        `json:\"collect_regions\"`\n\t\tAllowEmbed     Strings        `json:\"allow_embed\"`\n\t}\n\n\t// UserSettings are all user preferences.\n\tUserSettings struct {\n\t\tTwentyFourHours       bool      `json:\"twenty_four_hours\"`\n\t\tSundayStartsWeek      bool      `json:\"sunday_starts_week\"`\n\t\tLanguage              string    `json:\"language\"`\n\t\tDateFormat            string    `json:\"date_format\"`\n\t\tNumberFormat          rune      `json:\"number_format\"`\n\t\tTimezone              *tz.Zone  `json:\"timezone\"`\n\t\tWidgets               Widgets   `json:\"widgets\"`\n\t\tViews                 Views     `json:\"views\"`\n\t\tEmailReports          zint.Int  `json:\"email_reports\"`\n\t\tFewerNumbers          bool      `json:\"fewer_numbers\"`\n\t\tFewerNumbersLockUntil time.Time `json:\"fewer_numbers_lock_until\"`\n\t\tTheme                 string    `json:\"theme\"`\n\t}\n\n\t// Widgets is a list of widgets to be printed, in order.\n\tWidgets []Widget\n\tWidget  map[string]any\n\n\tWidgetSettings map[string]WidgetSetting\n\tWidgetSetting  struct {\n\t\tType        string\n\t\tHidden      bool\n\t\tLabel       string\n\t\tHelp        string\n\t\tOptions     [][2]string\n\t\tOptionsFunc func(context.Context) [][2]string\n\t\tValidate    func(*zvalidate.Validator, any)\n\t\tValue       any\n\t}\n\n\t// Views for the dashboard; these settings apply to all widget and are\n\t// configurable in the yellow box at the top.\n\tViews []View\n\tView  struct {\n\t\tName   string `json:\"name\"`\n\t\tFilter string `json:\"filter\"`\n\t\tDaily  bool   `json:\"daily\"`\n\t\tPeriod string `json:\"period\"` // \"week\", \"week-cur\", or n days: \"8\"\n\t}\n)\n\n// Default widgets for new sites.\n//\n// This *must* return a list of all configurable widgets; even if it's off by\n// default.\n//\n// As a function to ensure a global map isn't accidentally modified.\nfunc defaultWidgets(ctx context.Context) Widgets {\n\ts := defaultWidgetSettings(ctx)\n\tw := Widgets{}\n\tfor _, n := range []string{\"pages\", \"totalpages\", \"toprefs\", \"campaigns\", \"browsers\", \"systems\", \"locations\", \"languages\", \"sizes\"} {\n\t\tw = append(w, map[string]any{\"n\": n, \"s\": s[n].getMap()})\n\t}\n\treturn w\n}\n\n// List of all settings for widgets with some data.\nfunc defaultWidgetSettings(ctx context.Context) map[string]WidgetSettings {\n\treturn map[string]WidgetSettings{\n\t\t\"pages\": map[string]WidgetSetting{\n\t\t\t\"limit_pages\": WidgetSetting{\n\t\t\t\tType:  \"number\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/page-size|Page size\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/page-size|Number of pages to load\"),\n\t\t\t\tValue: float64(10),\n\t\t\t\tValidate: func(v *zvalidate.Validator, val any) {\n\t\t\t\t\tv.Range(\"limit_pages\", int64(val.(float64)), 1, 100)\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"limit_refs\": WidgetSetting{\n\t\t\t\tType:  \"number\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/ref-page-size|Referrers page size\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/ref-page-size|Number of referrers to load when clicking on a path\"),\n\t\t\t\tValue: float64(10),\n\t\t\t\tValidate: func(v *zvalidate.Validator, val any) {\n\t\t\t\t\tv.Range(\"limit_pages\", int64(val.(float64)), 1, 100)\n\t\t\t\t},\n\t\t\t},\n\t\t\t// \"compare\": WidgetSetting{\n\t\t\t// \tType:  \"select\",\n\t\t\t// \tValue: \"none\",\n\t\t\t// \tLabel: z18n.T(ctx, \"widget-setting/label/compare|Compare\"),\n\t\t\t// \tHelp:  z18n.T(ctx, \"widget-setting/help/compare|Show comparison\"),\n\t\t\t// \tOptions: [][2]string{\n\t\t\t// \t\t[2]string{\"none\", z18n.T(ctx, \"widget-settings/none|None\")},\n\t\t\t// \t\t[2]string{\"period\", z18n.T(ctx, \"widget-settings/previous-period|Previous period\")},\n\t\t\t// \t\t[2]string{\"quarter\", z18n.T(ctx, \"widget-settings/previous-quarter|Previous quarter\")},\n\t\t\t// \t\t[2]string{\"year\", z18n.T(ctx, \"widget-settings/pervious-year|Previous year\")},\n\t\t\t// \t},\n\t\t\t// },\n\t\t\t\"style\": WidgetSetting{\n\t\t\t\tType:  \"select\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/chart-style|Chart style\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/chart-style|How to draw the charts\"),\n\t\t\t\tValue: \"line\",\n\t\t\t\tOptions: [][2]string{\n\t\t\t\t\t[2]string{\"line\", z18n.T(ctx, \"widget-settings/line-chart|Line chart\")},\n\t\t\t\t\t[2]string{\"bar\", z18n.T(ctx, \"widget-settings/bar-chart|Bar chart\")},\n\t\t\t\t\t[2]string{\"text\", z18n.T(ctx, \"widget-settings/text-chart|Text table\")},\n\t\t\t\t},\n\t\t\t\tValidate: func(v *zvalidate.Validator, val any) {\n\t\t\t\t\tv.Include(\"style\", val.(string), []string{\"line\", \"bar\", \"text\"})\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"totalpages\": map[string]WidgetSetting{\n\t\t\t\"align\": WidgetSetting{\n\t\t\t\tType:  \"checkbox\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/align|Align with pages\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/align|Add margin to the left so it aligns with pages charts\"),\n\t\t\t\tValue: false,\n\t\t\t},\n\t\t\t\"no-events\": WidgetSetting{\n\t\t\t\tType:  \"checkbox\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/no-events|Exclude events\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/no-events|Don't include events in the Totals overview\"),\n\t\t\t\tValue: false,\n\t\t\t},\n\t\t\t\"style\": WidgetSetting{\n\t\t\t\tType:  \"select\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/chart-style|Chart style\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/chart-style|How to draw the charts\"),\n\t\t\t\tValue: \"line\",\n\t\t\t\tOptions: [][2]string{\n\t\t\t\t\t[2]string{\"line\", z18n.T(ctx, \"widget-settings/line-chart|Line chart\")},\n\t\t\t\t\t[2]string{\"bar\", z18n.T(ctx, \"widget-settings/bar-chart|Bar chart\")},\n\t\t\t\t},\n\t\t\t\tValidate: func(v *zvalidate.Validator, val any) {\n\t\t\t\t\tv.Include(\"style\", val.(string), []string{\"line\", \"bar\"})\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"toprefs\": map[string]WidgetSetting{\n\t\t\t\"limit\": WidgetSetting{\n\t\t\t\tType:  \"number\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/page-size|Page size\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/page-size|Number of pages to load\"),\n\t\t\t\tValue: float64(6),\n\t\t\t\tValidate: func(v *zvalidate.Validator, val any) {\n\t\t\t\t\tv.Range(\"limit\", int64(val.(float64)), 1, 20)\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"key\": WidgetSetting{Hidden: true},\n\t\t},\n\t\t\"browsers\": map[string]WidgetSetting{\n\t\t\t\"limit\": WidgetSetting{\n\t\t\t\tType:  \"number\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/page-size|Page size\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/page-size|Number of pages to load\"),\n\t\t\t\tValue: float64(6),\n\t\t\t\tValidate: func(v *zvalidate.Validator, val any) {\n\t\t\t\t\tv.Range(\"limit\", int64(val.(float64)), 1, 20)\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"key\": WidgetSetting{Hidden: true},\n\t\t},\n\t\t\"systems\": map[string]WidgetSetting{\n\t\t\t\"limit\": WidgetSetting{\n\t\t\t\tType:  \"number\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/page-size|Page size\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/page-size|Number of pages to load\"),\n\t\t\t\tValue: float64(6),\n\t\t\t\tValidate: func(v *zvalidate.Validator, val any) {\n\t\t\t\t\tv.Range(\"limit\", int64(val.(float64)), 1, 20)\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"key\": WidgetSetting{Hidden: true},\n\t\t},\n\t\t\"sizes\": map[string]WidgetSetting{\n\t\t\t\"key\": WidgetSetting{Hidden: true},\n\t\t},\n\t\t\"locations\": map[string]WidgetSetting{\n\t\t\t\"limit\": WidgetSetting{\n\t\t\t\tType:  \"number\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/page-size|Page size\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/page-size|Number of pages to load\"),\n\t\t\t\tValue: float64(6),\n\t\t\t\tValidate: func(v *zvalidate.Validator, val any) {\n\t\t\t\t\tv.Range(\"limit\", int64(val.(float64)), 1, 20)\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"key\": WidgetSetting{\n\t\t\t\tType:  \"select\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/regions|Show regions\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/regions|Show regions for this country instead of a country list\"),\n\t\t\t\tValue: \"\",\n\t\t\t\tOptionsFunc: func(ctx context.Context) [][2]string {\n\t\t\t\t\tvar l Locations\n\t\t\t\t\terr := l.ListCountries(ctx)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tpanic(err)\n\t\t\t\t\t}\n\t\t\t\t\tcountries := make([][2]string, 0, len(l)+1)\n\t\t\t\t\tcountries = append(countries, [2]string{\"\", \"\"})\n\t\t\t\t\tfor _, ll := range l {\n\t\t\t\t\t\tcountries = append(countries, [2]string{ll.Country, ll.CountryName})\n\t\t\t\t\t}\n\t\t\t\t\treturn countries\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"languages\": map[string]WidgetSetting{\n\t\t\t\"limit\": WidgetSetting{\n\t\t\t\tType:  \"number\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/page-size|Page size\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/page-size|Number of pages to load\"),\n\t\t\t\tValue: float64(6),\n\t\t\t\tValidate: func(v *zvalidate.Validator, val any) {\n\t\t\t\t\tv.Range(\"limit\", int64(val.(float64)), 1, 20)\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"campaigns\": map[string]WidgetSetting{\n\t\t\t\"limit\": WidgetSetting{\n\t\t\t\tType:  \"number\",\n\t\t\t\tLabel: z18n.T(ctx, \"widget-setting/label/page-size|Page size\"),\n\t\t\t\tHelp:  z18n.T(ctx, \"widget-setting/help/page-size|Number of pages to load\"),\n\t\t\t\tValue: float64(6),\n\t\t\t\tValidate: func(v *zvalidate.Validator, val any) {\n\t\t\t\t\tv.Range(\"limit\", int64(val.(float64)), 1, 20)\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"key\": WidgetSetting{Hidden: true},\n\t\t},\n\t}\n}\n\nfunc (ss SiteSettings) String() string               { return string(zjson.MustMarshal(ss)) }\nfunc (ss SiteSettings) Value() (driver.Value, error) { return json.Marshal(ss) }\nfunc (ss *SiteSettings) Scan(v any) error {\n\tswitch vv := v.(type) {\n\tcase []byte:\n\t\treturn json.Unmarshal(vv, ss)\n\tcase string:\n\t\treturn json.Unmarshal([]byte(vv), ss)\n\tdefault:\n\t\treturn fmt.Errorf(\"SiteSettings.Scan: unsupported type: %T\", v)\n\t}\n}\nfunc (ss UserSettings) String() string               { return string(zjson.MustMarshal(ss)) }\nfunc (ss UserSettings) Value() (driver.Value, error) { return json.Marshal(ss) }\nfunc (ss *UserSettings) Scan(v any) error {\n\tswitch vv := v.(type) {\n\tcase []byte:\n\t\treturn json.Unmarshal(vv, ss)\n\tcase string:\n\t\treturn json.Unmarshal([]byte(vv), ss)\n\tdefault:\n\t\treturn fmt.Errorf(\"UserSettings.Scan: unsupported type: %T\", v)\n\t}\n}\n\n// This exists as a work-around because a migration set this column wrong >_<\n//\n// https://github.com/arp242/goatcounter/issues/569#issuecomment-1042013488\nfunc (w *Widgets) UnmarshalJSON(d []byte) error {\n\ttype alias Widgets\n\tww := alias(*w)\n\terr := json.Unmarshal(d, &ww)\n\t*w = Widgets(ww)\n\n\tif err != nil {\n\t\t*w = defaultWidgets(context.Background())\n\t}\n\treturn nil\n}\n\nfunc (ss *SiteSettings) Defaults(ctx context.Context) {\n\tif ss.Public == \"\" {\n\t\tss.Public = \"private\"\n\t}\n\tif ss.Collect == 0 {\n\t\tss.Collect = CollectReferrer | CollectUserAgent | CollectScreenSize | CollectLocation | CollectLocationRegion | CollectSession\n\t}\n\tif ss.Collect.Has(CollectLocationRegion) { // Collecting region without country makes no sense.\n\t\tss.Collect |= CollectLocation\n\t}\n\tif ss.CollectRegions == nil {\n\t\tss.CollectRegions = []string{\"US\", \"RU\", \"CN\"}\n\t}\n}\n\nfunc (ss *SiteSettings) Validate(ctx context.Context) error {\n\tv := NewValidate(ctx)\n\n\tv.Include(\"public\", ss.Public, []string{\"private\", \"secret\", \"public\"})\n\tif ss.Public == \"secret\" {\n\t\tv.Len(\"secret\", ss.Secret, 8, 40)\n\t\tv.Contains(\"secret\", ss.Secret, []*unicode.RangeTable{zvalidate.AlphaNumeric}, nil)\n\t}\n\n\tif ss.DataRetention > 0 {\n\t\tv.Range(\"data_retention\", int64(ss.DataRetention), 31, 0)\n\t}\n\n\tif len(ss.IgnoreIPs) > 0 {\n\t\tfor _, ip := range ss.IgnoreIPs {\n\t\t\tv.IP(\"ignore_ips\", ip)\n\t\t}\n\t}\n\tif len(ss.AllowEmbed) > 0 {\n\t\tfor _, d := range ss.AllowEmbed {\n\t\t\tif d == \"*\" {\n\t\t\t\tv.Append(\"allow_embed\", \"'*' is not allowed\")\n\t\t\t} else {\n\t\t\t\tv.URL(\"allow_embed\", d)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn v.ErrorOrNil()\n}\n\nfunc (ss SiteSettings) CanView(token string) bool {\n\treturn ss.Public == \"public\" || (ss.Public == \"secret\" && token == ss.Secret)\n}\n\nfunc (ss SiteSettings) IsPublic() bool {\n\treturn ss.Public == \"public\"\n}\n\ntype CollectFlag struct {\n\tLabel, Help string\n\tFlag        zint.Bitflag16\n}\n\n// CollectFlags returns a list of all flags we know for the Collect settings.\nfunc (ss SiteSettings) CollectFlags(ctx context.Context) []CollectFlag {\n\treturn []CollectFlag{\n\t\t{\n\t\t\tLabel: z18n.T(ctx, \"data-collect/label/hits|Individual pageviews\"),\n\t\t\tHelp:  z18n.T(ctx, \"data-collect/help/hits|Store individual pageviews for exports. This doesn’t affect anything else. The API can still be used to export aggregate data.\"),\n\t\t\tFlag:  CollectHits,\n\t\t},\n\t\t{\n\t\t\tLabel: z18n.T(ctx, \"data-collect/label/sessions|Sessions\"),\n\t\t\tHelp:  z18n.T(ctx, \"data-collect/help/sessions|%[Track unique visitors] for up to 8 hours; if you disable this then someone pressing e.g. F5 to reload the page will just show as 2 pageviews instead of 1.\", z18n.Tag(\"a\", fmt.Sprintf(`href=\"%s/help/sessions\"`, Config(ctx).BasePath))),\n\t\t\tFlag:  CollectSession,\n\t\t},\n\t\t{\n\t\t\tLabel: z18n.T(ctx, \"data-collect/label/referrer|Referrer\"),\n\t\t\tHelp:  z18n.T(ctx, \"data-collect/help/referrer|Referer header and campaign parameters.\"),\n\t\t\tFlag:  CollectReferrer,\n\t\t},\n\t\t{\n\t\t\tLabel: z18n.T(ctx, \"data-collect/label/user-agent|User-Agent\"),\n\t\t\tHelp:  z18n.T(ctx, \"data-collect/help/user-agent|Browser and system name derived from the User-Agent header (the header itself is not stored).\"),\n\t\t\tFlag:  CollectUserAgent,\n\t\t},\n\t\t{\n\t\t\tLabel: z18n.T(ctx, \"data-collect/label/size|Size\"),\n\t\t\tHelp:  z18n.T(ctx, \"data-collect/help/size|Screen size.\"),\n\t\t\tFlag:  CollectScreenSize,\n\t\t},\n\t\t{\n\t\t\tLabel: z18n.T(ctx, \"data-collect/label/country|Country\"),\n\t\t\tHelp:  z18n.T(ctx, \"data-collect/help/country|Country name, for example Belgium, Indonesia, etc.\"),\n\t\t\tFlag:  CollectLocation,\n\t\t},\n\t\t{\n\t\t\tLabel: z18n.T(ctx, \"data-collect/label/region|Region\"),\n\t\t\tHelp:  z18n.T(ctx, \"data-collect/help/region|Region, for example Texas, Bali, etc. The details for this differ per country.\"),\n\t\t\tFlag:  CollectLocationRegion,\n\t\t},\n\t\t{\n\t\t\tLabel: z18n.T(ctx, \"data-collect/label/language|Language\"),\n\t\t\tHelp:  z18n.T(ctx, \"data-collect/help/language|Supported languages from Accept-Language.\"),\n\t\t\tFlag:  CollectLanguage,\n\t\t},\n\t}\n}\n\nfunc (s *WidgetSettings) Set(k string, v any) {\n\tss := *s\n\tm := ss[k]\n\tm.Value = v\n\tss[k] = m\n}\n\nfunc (s WidgetSettings) getMap() map[string]any {\n\tm := make(map[string]any)\n\tfor k, v := range s {\n\t\tm[k] = v.Value\n\t}\n\treturn m\n}\n\n// HasSettings reports if there are any non-hidden settings.\nfunc (s WidgetSettings) HasSettings() bool {\n\tfor _, ss := range s {\n\t\tif !ss.Hidden {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Display all values that are different from the default.\nfunc (s WidgetSettings) Display(ctx context.Context, wname string) string {\n\tdefaults := defaultWidgetSettings(ctx)[wname]\n\n\torder := make([]string, 0, len(s))\n\tfor k := range s {\n\t\torder = append(order, k)\n\t}\n\tsort.Strings(order)\n\n\tstr := make([]string, 0, len(s))\n\tfor _, k := range order {\n\t\tss := s[k]\n\t\tif ss.Hidden {\n\t\t\tcontinue\n\t\t}\n\t\tif ss.Value == defaults[k].Value {\n\t\t\tcontinue\n\t\t}\n\n\t\tl := strings.ToLower(ss.Label)\n\t\tif ss.Type == \"checkbox\" {\n\t\t\tstr = append(str, l)\n\t\t} else {\n\t\t\tstr = append(str, fmt.Sprintf(\"%s: %v\", l, ss.Value))\n\t\t}\n\t}\n\treturn strings.Join(str, \", \")\n}\n\nfunc NewWidget(name string) Widget {\n\treturn Widget{\"n\": name}\n}\n\n// SetSettings set the setting \"setting\" for widget \"widget\" to \"value\".\n//\n// The value is converted to the correct type for this setting.\nfunc (w Widget) SetSetting(ctx context.Context, widget, setting, value string) error {\n\tdefW, ok := defaultWidgetSettings(ctx)[widget]\n\tif !ok {\n\t\treturn fmt.Errorf(\"Widget.SetSetting: no such widget %q\", widget)\n\t}\n\tdef, ok := defW[setting]\n\tif !ok {\n\t\treturn fmt.Errorf(\"Widget.SetSetting: no such setting %q for widget %q\", setting, widget)\n\t}\n\n\ts, ok := w[\"s\"].(map[string]any)\n\tif !ok {\n\t\ts = make(map[string]any)\n\t}\n\tswitch def.Type {\n\tcase \"number\":\n\t\tn, _ := strconv.Atoi(value)\n\t\tif n > 0 {\n\t\t\ts[setting] = float64(n)\n\t\t}\n\tcase \"checkbox\":\n\t\ts[setting] = value == \"on\"\n\tcase \"text\", \"select\":\n\t\ts[setting] = value\n\t}\n\tw[\"s\"] = s\n\treturn nil\n}\n\n// Name gets this widget's name.\nfunc (w Widget) Name() string { return w[\"n\"].(string) }\n\nfunc (w Widget) GetSetting(ctx context.Context, n string) any {\n\tfor k, v := range w.GetSettings(ctx) {\n\t\tif k == n {\n\t\t\treturn v.Value\n\t\t}\n\t}\n\treturn nil\n}\n\n// GetSettings gets all setting for this widget.\nfunc (w Widget) GetSettings(ctx context.Context) WidgetSettings {\n\tdef := defaultWidgetSettings(ctx)[w.Name()]\n\tif def == nil {\n\t\tdef = make(WidgetSettings)\n\t}\n\ts, ok := w[\"s\"]\n\tif ok {\n\t\tfor k, v := range s.(map[string]any) {\n\t\t\tif v != nil {\n\t\t\t\td := def[k]\n\t\t\t\td.Value = v\n\t\t\t\tdef[k] = d\n\t\t\t}\n\t\t}\n\t}\n\treturn def\n}\n\n// Get all widget from the list by name.\nfunc (w Widgets) Get(name string) Widgets {\n\tvar r Widgets\n\tfor _, v := range w {\n\t\tif v[\"n\"] == name {\n\t\t\tr = append(r, v)\n\t\t}\n\t}\n\treturn r\n}\n\n// ByID gets this widget by the position/ID.\nfunc (w Widgets) ByID(id int) Widget {\n\treturn w[id]\n}\n\n// Get a view for this site by name and returns the view and index.\n// Returns -1 if this view doesn't exist.\nfunc (v Views) Get(name string) (View, int) {\n\tfor i, vv := range v {\n\t\tif strings.EqualFold(vv.Name, name) {\n\t\t\treturn vv, i\n\t\t}\n\t}\n\treturn View{}, -1\n}\n\nfunc (ss *UserSettings) Defaults(ctx context.Context) {\n\tif ss.Language == \"\" {\n\t\tss.Language = \"en-GB\"\n\t}\n\tif ss.DateFormat == \"\" {\n\t\tss.DateFormat = \"2 Jan ’06\"\n\t}\n\tif ss.NumberFormat == 0 {\n\t\tss.NumberFormat = 0x202f\n\t}\n\tif ss.Timezone == nil {\n\t\tss.Timezone = tz.UTC\n\t}\n\n\tif len(ss.Widgets) == 0 {\n\t\tss.Widgets = defaultWidgets(ctx)\n\t}\n\tif len(ss.Views) == 0 {\n\t\tss.Views = Views{{Name: \"default\", Period: \"week\"}}\n\t}\n}\n\nfunc (ss *UserSettings) Validate(ctx context.Context) error {\n\tv := NewValidate(ctx)\n\n\tfor i, w := range ss.Widgets {\n\t\tfor _, s := range w.GetSettings(ctx) {\n\t\t\tif s.Validate == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvv := NewValidate(ctx)\n\t\t\ts.Validate(&vv, s.Value)\n\t\t\tv.Sub(\"widgets\", strconv.Itoa(i), vv)\n\t\t}\n\t}\n\n\tif _, i := ss.Views.Get(\"default\"); i == -1 || len(ss.Views) != 1 {\n\t\tv.Append(\"views\", z18n.T(ctx, \"view not set\"))\n\t}\n\n\tif !slices.Contains(EmailReports, ss.EmailReports.Int()) {\n\t\tv.Append(\"email_reports\", \"invalid value\")\n\t}\n\n\tv.Include(\"theme\", ss.Theme, []string{\"\", \"light\", \"dark\"})\n\n\treturn v.ErrorOrNil()\n}\n"
        },
        {
          "name": "site.go",
          "type": "blob",
          "size": 20.728515625,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"path\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/guru\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/zcrypto\"\n\t\"zgo.at/zstd/znet\"\n\t\"zgo.at/zstd/zslice\"\n\t\"zgo.at/zstd/zstring\"\n\t\"zgo.at/zstd/ztime\"\n)\n\nvar reserved = []string{\n\t\"www\", \"mail\", \"smtp\", \"imap\", \"static\",\n\t\"admin\", \"ns1\", \"ns2\", \"m\", \"mobile\", \"api\",\n\t\"dev\", \"test\", \"beta\", \"new\", \"staging\", \"debug\", \"pprof\",\n\t\"chat\", \"example\", \"yoursite\", \"test\", \"sql\", \"license\",\n\t\"stat\", \"stats\",\n}\n\nvar statTables = []string{\"hit_stats\", \"system_stats\", \"browser_stats\",\n\t\"location_stats\", \"language_stats\", \"size_stats\"}\n\ntype Site struct {\n\tID     int64  `db:\"site_id\" json:\"id,readonly\"`\n\tParent *int64 `db:\"parent\" json:\"parent,readonly\"`\n\n\t// Custom domain, e.g. \"stats.example.com\".\n\t//\n\t// When self-hosting this is the domain/vhost your site is accessible at.\n\tCname *string `db:\"cname\" json:\"cname\"`\n\n\t// When the CNAME was verified.\n\tCnameSetupAt *time.Time `db:\"cname_setup_at\" json:\"cname_setup_at,readonly\"`\n\n\t// Domain code (e.g. \"arp242\", which makes arp242.goatcounter.com). Only\n\t// used for goatcounter.com and not when self-hosting.\n\tCode string `db:\"code\" json:\"code\"`\n\n\t// Site domain for linking (www.arp242.net). Note this can be a full URL and\n\t// is a bit misnamed.\n\tLinkDomain string `db:\"link_domain\" json:\"link_domain\"`\n\n\tSettings     SiteSettings `db:\"settings\" json:\"setttings\"`\n\tUserDefaults UserSettings `db:\"user_defaults\" json:\"user_defaults\"`\n\n\t// Whether this site has received any data; will be true after the first\n\t// pageview.\n\tReceivedData bool `db:\"received_data\" json:\"received_data\"`\n\n\t// {omitdoc}\n\tNotes string `db:\"notes\" json:\"-\"`\n\n\tState      string     `db:\"state\" json:\"state\"`\n\tCreatedAt  time.Time  `db:\"created_at\" json:\"created_at\"`\n\tUpdatedAt  *time.Time `db:\"updated_at\" json:\"updated_at\"`\n\tFirstHitAt time.Time  `db:\"first_hit_at\" json:\"first_hit_at\"`\n}\n\n// ClearCache clears the  cache for this site.\nfunc (s Site) ClearCache(ctx context.Context, full bool) {\n\tcacheSites(ctx).Delete(strconv.FormatInt(s.ID, 10))\n\n\t// TODO: be more selective about this.\n\tif full {\n\t\tcachePaths(ctx).Flush()\n\t\tcacheChangedTitles(ctx).Flush()\n\t}\n}\n\n// Defaults sets fields to default values, unless they're already set.\nfunc (s *Site) Defaults(ctx context.Context) {\n\tif s.State == \"\" {\n\t\ts.State = StateActive\n\t}\n\n\tn := ztime.Now()\n\n\tif !Config(ctx).GoatcounterCom {\n\t\ts.Code = \"serve-\" + zcrypto.Secret64()\n\t\ts.CnameSetupAt = &n\n\t}\n\ts.Code = strings.ToLower(s.Code)\n\n\tif s.CreatedAt.IsZero() {\n\t\ts.CreatedAt = n\n\t} else {\n\t\ts.UpdatedAt = &n\n\t}\n\tif s.FirstHitAt.IsZero() {\n\t\ts.FirstHitAt = n\n\t}\n\n\ts.LinkDomain = strings.TrimRight(s.LinkDomain, \"/\")\n\n\ts.Settings.Defaults(ctx)\n\ts.UserDefaults.Defaults(ctx)\n}\n\nvar noUnderscore = time.Date(2020, 03, 20, 0, 0, 0, 0, time.UTC)\n\n// Validate the object.\nfunc (s *Site) Validate(ctx context.Context) error {\n\tv := NewValidate(ctx)\n\n\tif Config(ctx).GoatcounterCom {\n\t\tv.Required(\"code\", s.Code)\n\t\tv.Len(\"code\", s.Code, 2, 50)\n\t\tv.Exclude(\"code\", s.Code, reserved)\n\t} else {\n\t\tv.Required(\"cname\", s.Cname)\n\t}\n\n\tv.Required(\"state\", s.State)\n\tv.Include(\"state\", s.State, States)\n\tv.URL(\"link_domain\", s.LinkDomain)\n\n\tv.Sub(\"settings\", \"\", s.Settings.Validate(ctx))\n\tv.Sub(\"user_defaults\", \"\", s.UserDefaults.Validate(ctx))\n\n\t// TODO: compat with older requirements, otherwise various update functions\n\t// will error out.\n\tif !s.CreatedAt.IsZero() && s.CreatedAt.Before(noUnderscore) {\n\t\tfor _, c := range s.Code {\n\t\t\tif !(c == '-' || c == '_' || (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z')) {\n\t\t\t\tv.Append(\"code\", fmt.Sprintf(\"%q not allowed; characters are limited to '_', '-', a to z, and numbers\", c))\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif len(s.Code) > 0 && (s.Code[0] == '_' || s.Code[0] == '-') { // Special domains, like _acme-challenge.\n\t\t\tv.Append(\"code\", \"cannot start with underscore or dash (_, -)\")\n\t\t}\n\t} else {\n\t\tlabels := v.Hostname(\"code\", s.Code)\n\t\tif len(labels) > 1 {\n\t\t\tv.Append(\"code\", \"cannot contain '.'\")\n\t\t}\n\t}\n\n\tif s.Cname != nil {\n\t\tv.Len(\"cname\", *s.Cname, 4, 255)\n\t\tv.Domain(\"cname\", *s.Cname)\n\t\tif Config(ctx).GoatcounterCom && strings.HasSuffix(*s.Cname, Config(ctx).Domain) {\n\t\t\tv.Append(\"cname\", \"cannot end with %q\", Config(ctx).Domain)\n\t\t}\n\t}\n\n\tif !v.HasErrors() {\n\t\texists, err := s.Exists(ctx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif exists > 0 {\n\t\t\tfield := \"code\"\n\t\t\tif s.Cname != nil {\n\t\t\t\tfield = \"cname\"\n\t\t\t}\n\t\t\tv.Append(field, \"already exists\")\n\t\t}\n\t}\n\n\treturn v.ErrorOrNil()\n}\n\n// Insert a new row.\nfunc (s *Site) Insert(ctx context.Context) error {\n\tif s.ID > 0 {\n\t\treturn errors.New(\"ID > 0\")\n\t}\n\ts.Defaults(ctx)\n\terr := s.Validate(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ts.ID, err = zdb.InsertID(ctx, \"site_id\", `insert into sites (\n\t\tparent, code, cname, link_domain, settings, user_defaults, created_at, first_hit_at, cname_setup_at) values (?)`,\n\t\t[]any{s.Parent, s.Code, s.Cname, s.LinkDomain, s.Settings, s.UserDefaults, s.CreatedAt, s.CreatedAt, s.CnameSetupAt})\n\tif err != nil && zdb.ErrUnique(err) {\n\t\treturn guru.New(400, \"this site already exists: code or domain must be unique\")\n\t}\n\treturn errors.Wrap(err, \"Site.Insert\")\n}\n\n// Update existing site. Sets settings, cname, link_domain.\nfunc (s *Site) Update(ctx context.Context) error {\n\tif s.ID == 0 {\n\t\treturn errors.New(\"ID == 0\")\n\t}\n\ts.Defaults(ctx)\n\terr := s.Validate(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = zdb.Exec(ctx,\n\t\t`update sites set settings=?, user_defaults=?, cname=?, link_domain=?, updated_at=? where site_id=?`,\n\t\ts.Settings, s.UserDefaults, s.Cname, s.LinkDomain, s.UpdatedAt, s.ID)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Site.Update\")\n\t}\n\n\ts.ClearCache(ctx, false)\n\treturn nil\n}\n\nfunc (s *Site) UpdateParent(ctx context.Context, newParent *int64) error {\n\tif s.ID == 0 {\n\t\treturn errors.New(\"ID == 0\")\n\t}\n\n\ts.Parent = newParent\n\n\ts.Defaults(ctx)\n\terr := s.Validate(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = zdb.TX(ctx, func(ctx context.Context) error {\n\t\tvar users Users\n\t\terr := users.BySite(ctx, s.ID)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tfor _, u := range users {\n\t\t\tu.Site = *newParent\n\t\t\terr := u.UpdateSite(ctx)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\treturn zdb.Exec(ctx,\n\t\t\t`update sites set parent=?, updated_at=? where site_id=?`,\n\t\t\ts.Parent, s.UpdatedAt, s.ID)\n\t})\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Site.UpdateParent\")\n\t}\n\n\ts.ClearCache(ctx, false)\n\treturn nil\n}\n\n// UpdateCode changes the site's domain code (e.g. \"test\" in\n// \"test.goatcounter.com\").\nfunc (s *Site) UpdateCode(ctx context.Context, code string) error {\n\tif s.ID == 0 {\n\t\treturn errors.New(\"ID == 0\")\n\t}\n\n\ts.Code = code\n\n\ts.Defaults(ctx)\n\terr := s.Validate(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = zdb.Exec(ctx,\n\t\t`update sites set code=$1, updated_at=$2 where site_id=$3`,\n\t\ts.Code, s.UpdatedAt, s.ID)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Site.UpdateCode\")\n\t}\n\n\tcacheSites(ctx).Delete(strconv.FormatInt(s.ID, 10))\n\tcacheSitesHost(ctx).Flush()\n\treturn nil\n}\n\nfunc (s *Site) UpdateReceivedData(ctx context.Context) error {\n\terr := zdb.Exec(ctx, `update sites set received_data=1 where site_id=$1`, s.ID)\n\n\ts.ClearCache(ctx, false)\n\treturn errors.Wrap(err, \"Site.UpdateReceivedData\")\n}\n\nfunc (s *Site) UpdateFirstHitAt(ctx context.Context, f time.Time) error {\n\tf = f.UTC().Add(-12 * time.Hour)\n\ts.FirstHitAt = f\n\terr := zdb.Exec(ctx,\n\t\t`update sites set first_hit_at=$1 where site_id=$2`,\n\t\ts.FirstHitAt, s.ID)\n\n\ts.ClearCache(ctx, false)\n\treturn errors.Wrap(err, \"Site.UpdateFirstHitAt\")\n}\n\n// UpdateCnameSetupAt confirms the custom domain was setup correct.\nfunc (s *Site) UpdateCnameSetupAt(ctx context.Context) error {\n\tif s.ID == 0 {\n\t\treturn errors.New(\"ID == 0\")\n\t}\n\n\tn := ztime.Now()\n\ts.CnameSetupAt = &n\n\n\terr := zdb.Exec(ctx,\n\t\t`update sites set cname_setup_at=$1 where site_id=$2`,\n\t\ts.CnameSetupAt, s.ID)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Site.UpdateCnameSetupAt\")\n\t}\n\n\ts.ClearCache(ctx, false)\n\treturn nil\n}\n\n// Delete a site and all child sites.\nfunc (s *Site) Delete(ctx context.Context, deleteChildren bool) error {\n\tif s.ID == 0 {\n\t\treturn errors.New(\"ID == 0\")\n\t}\n\n\treturn zdb.TX(ctx, func(ctx context.Context) error {\n\t\tif !deleteChildren {\n\t\t\tvar n int\n\t\t\terr := zdb.Get(ctx, &n, `select site_id from sites where parent = ? order by site_id limit 1`, s.ID)\n\t\t\tif err != nil && !zdb.ErrNoRows(err) {\n\t\t\t\treturn errors.Wrap(err, \"Site.Delete\")\n\t\t\t}\n\t\t\t// Roll over the \"parent\" to the next site.\n\t\t\tif n > 0 {\n\t\t\t\terr = zdb.Exec(ctx, `update sites set parent = ? where parent = ?`, n, s.ID)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn errors.Wrap(err, \"Site.Delete\")\n\t\t\t\t}\n\t\t\t\terr = zdb.Exec(ctx, `update sites set parent = null where site_id = ?`, n)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn errors.Wrap(err, \"Site.Delete\")\n\t\t\t\t}\n\t\t\t\terr = zdb.Exec(ctx, `update users set site_id = ? where site_id = ?`, n, s.ID)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn errors.Wrap(err, \"Site.Delete\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Just clear the entire sites cache; this operation is rare enough\n\t\t\t// that it doesn't really matter.\n\t\t\tcacheSites(ctx).Flush()\n\t\t}\n\n\t\t// Update the site code so people can delete a site and then immediately\n\t\t// re-create a new site with the same name.\n\t\tq := `update sites set state=$1, updated_at=$2, code=random(), cname=null where site_id=$3 or parent=$3`\n\t\tif zdb.SQLDialect(ctx) == zdb.DialectPostgreSQL {\n\t\t\tq = `update sites set state=$1, updated_at=$2, code=gen_random_uuid(), cname=null where site_id=$3 or parent=$3`\n\t\t}\n\t\tt := ztime.Now()\n\t\terr := zdb.Exec(ctx, q, StateDeleted, t, s.ID)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"Site.Delete\")\n\t\t}\n\n\t\ts.ClearCache(ctx, true)\n\n\t\ts.ID = 0\n\t\ts.UpdatedAt = &t\n\t\ts.State = StateDeleted\n\t\treturn nil\n\t})\n}\n\nfunc (s Site) Undelete(ctx context.Context, id int64) error {\n\ts.State = StateActive\n\ts.ID = id\n\terr := zdb.Exec(ctx, `update sites set state = ? where site_id = ?`, StateActive, id)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Site.Undelete %d: %w\", id, err)\n\t}\n\n\ts.ClearCache(ctx, false)\n\treturn errors.Wrap(s.ByID(ctx, id), \"Site.Undelete\")\n}\n\n// Exists checks if this site already exists, based on either the Cname or Code\n// field.\nfunc (s Site) Exists(ctx context.Context) (int64, error) {\n\tvar (\n\t\tid     int64\n\t\tquery  = `select site_id from sites where lower(code) = lower($1) and site_id != $2 limit 1`\n\t\tparams = []any{s.Code, s.ID}\n\t)\n\tif s.Cname != nil {\n\t\tquery = `select site_id from sites where lower(cname) = lower($1) and site_id != $2 limit 1`\n\t\tparams = []any{s.Cname, s.ID}\n\t}\n\n\terr := zdb.Get(ctx, &id, query, params...)\n\tif err != nil && !zdb.ErrNoRows(err) {\n\t\treturn 0, fmt.Errorf(\"Site.Exists: %w\", err)\n\t}\n\treturn id, nil\n}\n\n// ByID gets a site by ID.\nfunc (s *Site) ByID(ctx context.Context, id int64) error {\n\terr := s.ByIDState(ctx, id, StateActive)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Site.ByID: %w\", errors.Unwrap(err))\n\t}\n\treturn nil\n}\n\n// ByIDState gets a site by ID and state. This may return deleted sites.\nfunc (s *Site) ByIDState(ctx context.Context, id int64, state string) error {\n\tk := strconv.FormatInt(id, 10)\n\tss, ok := cacheSites(ctx).Get(k)\n\tif ok {\n\t\t*s = *ss.(*Site)\n\t\treturn nil\n\t}\n\n\terr := zdb.Get(ctx, s,\n\t\t`/* Site.ByID */ select * from sites where site_id=$1 and state=$2`,\n\t\tid, state)\n\tif err != nil {\n\t\treturn errors.Wrapf(err, \"Site.ByIDState %d\", id)\n\t}\n\tcacheSites(ctx).SetDefault(k, s)\n\treturn nil\n}\n\n// ByCode gets a site by code.\nfunc (s *Site) ByCode(ctx context.Context, code string) error {\n\treturn errors.Wrapf(zdb.Get(ctx, s,\n\t\t`/* Site.ByCode */ select * from sites where code=$1 and state=$2`,\n\t\tcode, StateActive), \"Site.ByCode %s\", code)\n}\n\n// ByHost gets a site by host name.\nfunc (s *Site) ByHost(ctx context.Context, host string) error {\n\tss, ok := cacheSitesHost(ctx).Get(host)\n\tif ok {\n\t\t*s = *ss.(*Site)\n\t\treturn nil\n\t}\n\n\t// Custom domain or serve.\n\tif !Config(ctx).GoatcounterCom || !strings.HasSuffix(host, Config(ctx).Domain) {\n\t\terr := zdb.Get(ctx, s,\n\t\t\t`/* Site.ByHost */ select * from sites where lower(cname)=lower($1) and state=$2`,\n\t\t\tznet.RemovePort(host), StateActive)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"site.ByHost: from custom domain\")\n\t\t}\n\t\tcacheSitesHost(ctx).Set(strconv.FormatInt(s.ID, 10), host, s)\n\t\treturn nil\n\t}\n\n\t// Get from code (e.g. \"arp242\" in \"arp242.goatcounter.com\").\n\tp := strings.Index(host, \".\")\n\tif p == -1 {\n\t\treturn errors.Errorf(\"Site.ByHost: no subdomain in host %q\", host)\n\t}\n\n\terr := zdb.Get(ctx, s,\n\t\t`/* Site.ByHost */ select * from sites where lower(code)=lower($1) and state=$2`,\n\t\thost[:p], StateActive)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"site.ByHost: from code\")\n\t}\n\tcacheSitesHost(ctx).Set(strconv.FormatInt(s.ID, 10), host, s)\n\treturn nil\n}\n\n// Find a site: by ID if ident is a number, or by host if it's not.\nfunc (s *Site) Find(ctx context.Context, ident string) error {\n\tid, err := strconv.ParseInt(ident, 10, 64)\n\tif err == nil {\n\t\treturn errors.Wrap(s.ByID(ctx, id), \"Site.Find\")\n\t}\n\treturn errors.Wrap(s.ByHost(ctx, ident), \"Site.Find\")\n}\n\n// ListSubs lists all subsites, including the current site and parent.\nfunc (s *Site) ListSubs(ctx context.Context) ([]string, error) {\n\tcol := \"cname\"\n\tif Config(ctx).GoatcounterCom {\n\t\tcol = \"code\"\n\t}\n\tvar codes []string\n\terr := zdb.Select(ctx, &codes, `/* Site.ListSubs */\n\t\tselect `+col+` from sites\n\t\twhere state=$1 and (parent=$2 or site_id=$2) or (\n\t\t\tparent  = (select parent from sites where site_id=$2) or\n\t\t\tsite_id = (select parent from sites where site_id=$2)\n\t\t) and state=$1\n\t\torder by code\n\t\t`, StateActive, s.ID)\n\treturn codes, errors.Wrap(err, \"Site.ListSubs\")\n}\n\n// Domain gets the global default domain, or this site's configured custom\n// domain.\nfunc (s Site) Domain(ctx context.Context) string {\n\tif s.Cname != nil && s.CnameSetupAt != nil {\n\t\treturn *s.Cname\n\t}\n\treturn Config(ctx).Domain\n}\n\n// Display format: just the domain (cname or code+domain).\nfunc (s Site) Display(ctx context.Context) string {\n\tif s.Cname != nil && s.CnameSetupAt != nil {\n\t\treturn *s.Cname\n\t}\n\treturn fmt.Sprintf(\"%s.%s\", s.Code, znet.RemovePort(Config(ctx).Domain))\n}\n\n// URL to this site, without the scheme.\nfunc (s Site) SchemelessURL(ctx context.Context) string {\n\tif s.Cname != nil && s.CnameSetupAt != nil {\n\t\treturn *s.Cname + Config(ctx).Port + Config(ctx).BasePath\n\t}\n\n\treturn fmt.Sprintf(\"%s.%s%s%s\",\n\t\ts.Code, Config(ctx).Domain, Config(ctx).Port, Config(ctx).BasePath)\n}\n\n// URL to this site.\nfunc (s Site) URL(ctx context.Context) string {\n\tif Config(ctx).Dev {\n\t\treturn \"http://\" + s.SchemelessURL(ctx)\n\t}\n\treturn \"https://\" + s.SchemelessURL(ctx)\n}\n\n// LinkDomainURL creates a valid url to the configured LinkDomain.\nfunc (s Site) LinkDomainURL(withProto bool, paths ...string) string {\n\tif s.LinkDomain == \"\" {\n\t\treturn \"\"\n\t}\n\tif withProto && !zstring.HasPrefixes(s.LinkDomain, \"http://\", \"https://\") {\n\t\ts.LinkDomain = \"http://\" + s.LinkDomain\n\t} else if !withProto {\n\t\ts.LinkDomain = zstring.TrimPrefixes(s.LinkDomain, \"http://\", \"https://\")\n\t}\n\treturn strings.TrimRight(s.LinkDomain, \"/\") + path.Join(paths...)\n}\n\n// IDOrParent gets this site's ID or the parent ID if that's set.\nfunc (s Site) IDOrParent() int64 {\n\tif s.Parent != nil {\n\t\treturn *s.Parent\n\t}\n\treturn s.ID\n}\n\n// DeleteAll deletes all pageviews for this site, keeping the site itself and\n// user intact.\nfunc (s Site) DeleteAll(ctx context.Context) error {\n\treturn zdb.TX(ctx, func(ctx context.Context) error {\n\t\tfor _, t := range append(statTables, \"campaign_stats\", \"hit_counts\", \"ref_counts\", \"hits\", \"paths\") {\n\t\t\terr := zdb.Exec(ctx, `delete from `+t+` where site_id=:id`, map[string]any{\"id\": s.ID})\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"Site.DeleteAll: delete \"+t)\n\t\t\t}\n\t\t}\n\n\t\ts.ClearCache(ctx, true)\n\t\treturn nil\n\t})\n}\n\nfunc (s Site) DeleteOlderThan(ctx context.Context, days int) error {\n\tif days < 14 {\n\t\treturn errors.Errorf(\"days must be at least 14: %d\", days)\n\t}\n\n\treturn zdb.TX(ctx, func(ctx context.Context) error {\n\t\tival := Interval(ctx, days)\n\n\t\tvar pathIDs []int64\n\t\terr := zdb.Select(ctx, &pathIDs, `/* Site.DeleteOlderThan */\n\t\t\tselect path_id from hit_counts where site_id=$1 and hour < `+ival+` group by path_id`, s.ID)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"Site.DeleteOlderThan: get paths\")\n\t\t}\n\n\t\tfor _, t := range append(statTables, \"campaign_stats\") {\n\t\t\terr := zdb.Exec(ctx, `delete from `+t+` where site_id=$1 and day < `+ival, s.ID)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"Site.DeleteOlderThan: delete \"+t)\n\t\t\t}\n\t\t}\n\n\t\terr = zdb.Exec(ctx, `delete from hit_counts where site_id=$1 and hour < `+ival, s.ID)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"Site.DeleteOlderThan: delete hit_counts\")\n\t\t}\n\t\terr = zdb.Exec(ctx, `delete from ref_counts where site_id=$1 and hour < `+ival, s.ID)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"Site.DeleteOlderThan: delete ref_counts\")\n\t\t}\n\n\t\terr = zdb.Exec(ctx, `delete from hits where site_id=$1 and created_at < `+ival, s.ID)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"Site.DeleteOlderThan: delete hits\")\n\t\t}\n\n\t\tif len(pathIDs) > 0 {\n\t\t\tvar remainPath []int64\n\t\t\terr := zdb.Select(ctx, &remainPath, `/* Site.DeleteOlderThan */\n\t\t\t\tselect path_id from hit_counts where site_id=? and path_id in (?)`,\n\t\t\t\ts.ID, pathIDs)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"Site.DeleteOlderThan\")\n\t\t\t}\n\n\t\t\tdiff := zslice.Difference(pathIDs, remainPath)\n\t\t\tif len(diff) > 0 {\n\t\t\t\terr = zdb.Exec(ctx, `delete from paths where site_id=? and path_id in (?)`, s.ID, diff)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn errors.Wrap(err, \"Site.DeleteOlderThan\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nil\n\t})\n}\n\n// Sites is a list of sites.\ntype Sites []Site\n\n// UnscopedList lists all sites, not scoped to the current user.\nfunc (s *Sites) UnscopedList(ctx context.Context) error {\n\treturn errors.Wrap(zdb.Select(ctx, s,\n\t\t`/* Sites.List */ select * from sites where state=$1`,\n\t\tStateActive), \"Sites.List\")\n}\n\n// UnscopedListCnames all sites that have CNAME set, not scoped to the current\n// user.\nfunc (s *Sites) UnscopedListCnames(ctx context.Context) error {\n\treturn errors.Wrap(zdb.Select(ctx, s, `/* Sites.ListCnames */\n\t\tselect * from sites where state=$1 and cname is not null`,\n\t\tStateActive), \"Sites.List\")\n}\n\n// ListSubs lists all subsites for the current site.\nfunc (s *Sites) ListSubs(ctx context.Context) error {\n\treturn errors.Wrap(zdb.Select(ctx, s, `/* Sites.ListSubs */\n\t\tselect * from sites where parent=$1 and state=$2 order by code`,\n\t\tMustGetSite(ctx).ID, StateActive), \"Sites.ListSubs\")\n}\n\n// ForThisAccount gets all sites associated with this account.\nfunc (s *Sites) ForThisAccount(ctx context.Context, excludeCurrent bool) error {\n\tsite := MustGetSite(ctx)\n\terr := zdb.Select(ctx, s, `/* Sites.ForThisAccount */\n\t\tselect * from sites\n\t\twhere state=$1 and (parent=$2 or site_id=$2) or (\n\t\t\tparent  = (select parent from sites where site_id=$2) or\n\t\t\tsite_id = (select parent from sites where site_id=$2)\n\t\t) and state=$1\n\t\torder by code\n\t\t`, StateActive, site.ID)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Sites.ForThisAccount\")\n\t}\n\n\tif excludeCurrent {\n\t\tss := *s\n\t\tfor i := range ss {\n\t\t\tif ss[i].ID == site.ID {\n\t\t\t\t*s = append(ss[:i], ss[i+1:]...)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// ContainsCNAME reports if there is a site with this CNAME set.\nfunc (s *Sites) ContainsCNAME(ctx context.Context, cname string) (bool, error) {\n\tvar ok bool\n\terr := zdb.Get(ctx, &ok, `/* Sites.ContainsCNAME */\n\t\tselect 1 from sites where lower(cname)=lower($1) limit 1`, cname)\n\treturn ok, errors.Wrapf(err, \"Sites.ContainsCNAME for %q\", cname)\n}\n\n// OldSoftDeleted finds all sites which have been soft-deleted more than a week\n// ago.\nfunc (s *Sites) OldSoftDeleted(ctx context.Context) error {\n\terr := zdb.Select(ctx, s, `select * from sites where state=$1`, StateDeleted)\n\treturn errors.Wrap(err, \"Sites.OldSoftDeleted\")\n}\n\n// Find sites: by ID if ident is a number, or by host if it's not.\nfunc (s *Sites) Find(ctx context.Context, ident []string) error {\n\tids, strs := splitIntStr(ident)\n\terr := zdb.Select(ctx, s, `select * from sites where\n\t\t{{:ids site_id in (:ids) or}}\n\t\t{{:strs! 0=1}}\n\t\t{{:strs cname in (:strs)}}`,\n\t\tmap[string]any{\"ids\": ids, \"strs\": strs})\n\treturn errors.Wrap(err, \"Sites.Find\")\n}\n\n// IDs gets a list of all IDs for these sites.\nfunc (s *Sites) IDs() []int64 {\n\tids := make([]int64, 0, len(*s))\n\tfor _, ss := range *s {\n\t\tids = append(ids, ss.ID)\n\t}\n\treturn ids\n}\n\n// Delete all sites in this selection.\nfunc (s *Sites) Delete(ctx context.Context, deleteChildren bool) error {\n\terr := zdb.TX(ctx, func(ctx context.Context) error {\n\t\tfor _, ss := range *s {\n\t\t\terr := ss.Delete(ctx, deleteChildren)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\treturn errors.Wrap(err, \"Sites.Delete\")\n}\n\n// ListIDs lists all sites with the given IDs.\nfunc (s *Sites) ListIDs(ctx context.Context, ids ...int64) error {\n\tif len(ids) == 0 {\n\t\treturn nil\n\t}\n\n\terr := zdb.Select(ctx, s,\n\t\t`select * from sites where state=? and site_id in (?) order by created_at desc`,\n\t\tStateActive, ids)\n\treturn errors.Wrap(err, \"Sites.ListIDs\")\n}\n"
        },
        {
          "name": "site_test.go",
          "type": "blob",
          "size": 2.1904296875,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"testing\"\n\n\t. \"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/zvalidate\"\n)\n\nfunc TestGetAccount(t *testing.T) {\n\tctx := gctest.DB(t)\n\n\ta := MustGetAccount(ctx)\n\tif a.ID != MustGetSite(ctx).ID {\n\t\tt.Fatal()\n\t}\n\n\tctx2 := gctest.Site(ctx, t, &Site{Parent: &MustGetSite(ctx).ID}, nil)\n\ta2 := MustGetAccount(ctx2)\n\tif a2.ID != MustGetSite(ctx).ID {\n\t\tt.Fatal()\n\t}\n\n\tif MustGetSite(ctx).ID != 1 || MustGetSite(ctx2).ID != 2 {\n\t\tt.Fatal() // Make sure original isn't modified.\n\t}\n}\n\nfunc TestSiteInsert(t *testing.T) {\n\tctx := gctest.DB(t)\n\n\ts := Site{Code: \"the-code\"}\n\terr := s.Insert(ctx)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tif s.ID == 0 {\n\t\tt.Fatal(\"ID is 0\")\n\t}\n}\n\nfunc TestSiteValidate(t *testing.T) {\n\ttests := []struct {\n\t\tin    Site\n\t\tprefn func(context.Context)\n\t\twant  map[string][]string\n\t}{\n\t\t{\n\t\t\tSite{Code: \"hello-0\", State: StateActive},\n\t\t\tnil,\n\t\t\tnil,\n\t\t},\n\t\t{\n\t\t\tSite{Code: \"h€llo\", State: StateActive},\n\t\t\tnil,\n\t\t\tmap[string][]string{\"code\": {\"must be a valid hostname: invalid character: '€'\"}},\n\t\t},\n\t\t{\n\t\t\tSite{Code: \"hel_lo\", State: StateActive},\n\t\t\tnil,\n\t\t\tmap[string][]string{\"code\": {\"must be a valid hostname: invalid character: '_'\"}},\n\t\t},\n\t\t{\n\t\t\tSite{Code: \"hello\", State: StateActive},\n\t\t\tfunc(ctx context.Context) {\n\t\t\t\ts := Site{Code: \"hello\", State: StateActive}\n\t\t\t\terr := s.Insert(ctx)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t},\n\t\t\tmap[string][]string{\"code\": {\"already exists\"}},\n\t\t},\n\t}\n\n\tfor i, tt := range tests {\n\t\tt.Run(fmt.Sprintf(\"%d\", i), func(t *testing.T) {\n\t\t\tctx := gctest.DB(t)\n\n\t\t\tif tt.prefn != nil {\n\t\t\t\ttt.prefn(ctx)\n\t\t\t}\n\n\t\t\ttt.in.Defaults(ctx)\n\t\t\terr := tt.in.Validate(ctx)\n\t\t\tif err == nil && tt.want == nil {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tverr, ok := err.(*zvalidate.Validator)\n\t\t\tif !ok {\n\t\t\t\tt.Fatalf(\"unexpected error type %T: %#[1]v\", err)\n\t\t\t}\n\n\t\t\tif !reflect.DeepEqual(verr.Errors, tt.want) {\n\t\t\t\tt.Errorf(\"wrong error\\nout:  %s\\nwant: %s\", verr.Errors, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "size.go",
          "type": "blob",
          "size": 1.5087890625,
          "content": "package goatcounter\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strconv\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/zcache\"\n\t\"zgo.at/zdb\"\n)\n\ntype Size struct {\n\tID     int64   `db:\"size_id\"`\n\tWidth  int16   `db:\"width\"`\n\tHeight int16   `db:\"height\"`\n\tScale  float64 `db:\"scale\"`\n\tSize   string  `db:\"size\"`\n}\n\nfunc (s *Size) Defaults(ctx context.Context)       {}\nfunc (s *Size) Validate(ctx context.Context) error { return nil }\n\nfunc (s Size) String() string {\n\treturn strconv.Itoa(int(s.Width)) + \",\" + strconv.Itoa(int(s.Height)) +\n\t\t\",\" + strconv.FormatFloat(s.Scale, 'f', 15, 64)\n}\n\nfunc (s *Size) GetOrInsert(ctx context.Context, size Floats) error {\n\tk := fmt.Sprintf(\"%v\", size)\n\tc, ok := cacheSizes(ctx).Get(k)\n\tif ok {\n\t\t*s = c.(Size)\n\t\tcacheSizes(ctx).Touch(k, zcache.DefaultExpiration)\n\t\treturn nil\n\t}\n\n\t// Sometimes people send invalid values; don't error out, just set as\n\t// unknown size.\n\tif len(size) != 3 {\n\t\ts.ID = 0\n\t\tcacheSizes(ctx).SetDefault(k, *s)\n\t\treturn nil\n\t}\n\n\ts.Width, s.Height, s.Scale = int16(size[0]), int16(size[1]), size[2]\n\n\terr := zdb.Get(ctx, s, `/* Size.GetOrInsert */\n\t\tselect * from sizes where size = ? limit 1`, s.String())\n\tif err == nil {\n\t\tcacheSizes(ctx).SetDefault(k, *s)\n\t\treturn nil\n\t}\n\tif !zdb.ErrNoRows(err) {\n\t\treturn errors.Wrap(err, \"Size.GetOrInsert get\")\n\t}\n\n\ts.ID, err = zdb.InsertID(ctx, \"size_id\",\n\t\t`insert into sizes (width, height, scale) values (?, ?, ?)`,\n\t\ts.Width, s.Height, s.Scale)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"Size.GetOrInsert insert\")\n\t}\n\n\tcacheSizes(ctx).SetDefault(k, *s)\n\treturn nil\n}\n"
        },
        {
          "name": "staticcheck.conf",
          "type": "blob",
          "size": 0.2646484375,
          "content": "checks = [\n  'all',\n  '-ST1000',            # \"Must have at least one package comment\"\n  '-ST1020', '-ST1021', # \"Documentation must start with {function,type} name\"\n  '-SA5008',            # We have our own json package, will error on 'unknown JSON option \"readonly\"'\n]\n"
        },
        {
          "name": "tpl.go",
          "type": "blob",
          "size": 16.5166015625,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"bytes\"\n\n\t\"context\"\n\t\"encoding/base32\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"html/template\"\n\t\"image/png\"\n\t\"io/fs\"\n\t\"math\"\n\t\"reflect\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/boombuler/barcode\"\n\t\"github.com/boombuler/barcode/qr\"\n\t\"github.com/russross/blackfriday/v2\"\n\t\"zgo.at/errors\"\n\t\"zgo.at/z18n\"\n\t\"zgo.at/zhttp\"\n\t\"zgo.at/zlog\"\n\t\"zgo.at/zstd/zfs\"\n\t\"zgo.at/zstd/zstring\"\n\t\"zgo.at/zstd/ztime\"\n\t\"zgo.at/ztpl\"\n\t\"zgo.at/ztpl/tplfunc\"\n\t\"zgo.at/zvalidate\"\n)\n\nfunc init() {\n\ttplfunc.Add(\"t\", z18n.Thtml)\n\ttplfunc.Add(\"tag\", z18n.Tag)\n\ttplfunc.Add(\"plural\", z18n.N)\n\n\t// TODO: move to ztpl\n\ttplfunc.Add(\"concat\", func(sep string, strs ...string) string {\n\t\treturn strings.Join(strs, sep)\n\t})\n\ttplfunc.Add(\"percentage\", func(n, total int) float64 {\n\t\treturn float64(n) / float64(total) * 100\n\t})\n\ttplfunc.Add(\"ago\", func(t time.Time) time.Duration {\n\t\treturn time.Since(t).Round(time.Second)\n\t})\n\n\ttplfunc.Add(\"round_duration\", func(d time.Duration) time.Duration {\n\t\tif d < time.Millisecond {\n\t\t\treturn d\n\t\t}\n\t\tif d < time.Second*10 {\n\t\t\treturn d.Round(time.Millisecond * 100)\n\t\t}\n\t\treturn d.Round(time.Second)\n\t})\n\n\ttplfunc.Add(\"distribute_durations\", func(times ztime.Durations, n int) template.HTML {\n\t\tp := func(d time.Duration) string {\n\t\t\treturn ztime.DurationAs(d.Round(time.Millisecond), time.Millisecond)\n\t\t}\n\t\tb := new(strings.Builder)\n\n\t\tfmt.Fprintln(b, \"\\nDistribution:\")\n\t\tdist := times.Distrubute(n)\n\t\tvar (\n\t\t\twidthDur, widthNum int\n\t\t\twidthBar           = 100.0\n\t\t)\n\t\tfor _, d := range dist {\n\t\t\tif l := len(p(d.Min())); l > widthDur {\n\t\t\t\twidthDur = l\n\t\t\t}\n\t\t\tif l := len(strconv.Itoa(d.Len())); l > widthNum {\n\t\t\t\twidthNum = l\n\t\t\t}\n\t\t}\n\n\t\tformat := fmt.Sprintf(\"    ≤ %%%ds ms → %%%dd  %%s %%.1f%%%%\\n\", widthDur, widthNum)\n\t\tl := float64(times.Len())\n\t\tfor _, h := range dist {\n\t\t\tif h.Len() == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tr := int(widthBar / (l / float64(h.Len())))\n\t\t\tperc := float64(h.Len()) / l * 100\n\t\t\tfmt.Fprintf(b, format, p(h.Max()), h.Len(), strings.Repeat(\"▬\", r), perc)\n\t\t}\n\n\t\treturn template.HTML(b.String())\n\t})\n\n\ttplfunc.Add(\"ord\", func(n int) template.HTML {\n\t\ts := \"th\"\n\t\tswitch n % 10 {\n\t\tcase 1:\n\t\t\tif n%100 != 11 {\n\t\t\t\ts = \"st\"\n\t\t\t}\n\t\tcase 2:\n\t\t\tif n%100 != 12 {\n\t\t\t\ts = \"nd\"\n\t\t\t}\n\t\tcase 3:\n\t\t\tif n%100 != 13 {\n\t\t\t\ts = \"rd\"\n\t\t\t}\n\t\t}\n\t\treturn template.HTML(strconv.Itoa(n) + \"<sup>\" + s + \"</sup>\")\n\t})\n\n\ttplfunc.Add(\"base32\", base32.StdEncoding.WithPadding(base32.NoPadding).EncodeToString)\n\ttplfunc.Add(\"validate\", zvalidate.TemplateError)\n\ttplfunc.Add(\"has_errors\", zvalidate.TemplateHasErrors)\n\ttplfunc.Add(\"error_code\", func(err error) string { return zhttp.UserErrorCode(err) })\n\ttplfunc.Add(\"parent_site\", func(ctx context.Context, id *int64) string {\n\t\tvar s Site\n\t\terr := s.ByID(ctx, *id)\n\t\tif err != nil {\n\t\t\tzlog.Error(err)\n\t\t\treturn \"\"\n\t\t}\n\t\treturn s.URL(ctx)\n\t})\n\n\t// Implemented as function for performance.\n\ttplfunc.Add(\"text_chart\", textChart)\n\ttplfunc.Add(\"horizontal_chart\", HorizontalChart)\n\n\ttplfunc.Add(\"markdown\", func(file string, scope any) template.HTML {\n\t\tctx := reflect.ValueOf(scope).FieldByName(\"Context\").Elem().Interface().(context.Context)\n\t\tfsys, err := zfs.EmbedOrDir(Templates, \"tpl\", Config(ctx).Dev)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfsys, err = zfs.SubIfExists(fsys, \"tpl/help\")\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tf, err := fs.ReadFile(fsys, file+\".md\")\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tmd := renderMarkdown(f)\n\t\tt, err := template.New(\"md\").Parse(string(md))\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\t// {{if .FromWWW}}\n\t\t// \t<p class=\"flash flash-i\">Note: replace <code>{{.SiteURL}}</code> with the URL\n\t\t// \tto your actual site in the examples below. This will be done automatically if\n\t\t// \tyou view the docs linked from your site in the top-right corner.</p>\n\t\t// {{end}}\n\t\tt = template.Must(t.New(\"code\").Parse(`&lt;script data-goatcounter=\"{{.SiteURL}}/count\"` + \"\\n\" +\n\t\t\t`        async src=\"//{{.CountDomain}}/count.js\"&gt;&lt;/script&gt;`))\n\t\tt = template.Must(t.New(\"sh_header\").Parse(`#!/bin/sh` + \"\\n\" +\n\t\t\t`token=\"[your api token]\"` + \"\\n\" +\n\t\t\t`api=\"https://[my code].goatcounter.com/api/v0\"` + \"\\n\" +\n\t\t\t`curl() {` + \"\\n\" +\n\t\t\t`    \\command curl --silent \\` + \"\\n\" +\n\t\t\t`        --header 'Content-Type: application/json' \\` + \"\\n\" +\n\t\t\t`        --header \"Authorization: Bearer $token\" \\` + \"\\n\" +\n\t\t\t`        \"$@\"` + \"\\n\" +\n\t\t\t`}`))\n\n\t\thtml := new(bytes.Buffer)\n\t\terr = t.ExecuteTemplate(html, \"md\", scope)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\treturn template.HTML(html.String())\n\t})\n\n\ttype x struct {\n\t\thref, label string\n\t\titems       []x\n\t\tgcCom       bool\n\t}\n\tlinks := []x{\n\t\t{label: \"Basics\", items: []x{\n\t\t\t{href: \"start\", label: \"Getting started\"},\n\t\t\t// {href: \"wordpress\", label: \"WordPress\"},\n\t\t\t{href: \"visitor-counter\", label: \"Visitor counter\"},\n\t\t\t{href: \"events\", label: \"Events\"},\n\t\t\t{href: \"csp\", label: \"Content-Security-Policy\"},\n\t\t\t{href: \"js\", label: \"JavaScript API\"}}},\n\t\t{label: \"Other ways to get data in GoatCounter\", items: []x{\n\t\t\t{href: \"pixel\", label: \"Tracking pixel\"},\n\t\t\t{href: \"logfile\", label: \"Server logfiles\"},\n\t\t\t{href: \"backend\", label: \"From app backend or other sources\"}}},\n\t\t{label: \"How can I…\", items: []x{\n\t\t\t{href: \"skip-dev\", label: \"Prevent tracking my own pageviews?\"},\n\t\t\t{href: \"skip-path\", label: \"Prevent tracking specific paths?\"},\n\t\t\t{href: \"path\", label: \"Control the path that's sent to GoatCounter?\"},\n\t\t\t{href: \"modify\", label: \"Change data before it's sent to GoatCounter?\"},\n\t\t\t{href: \"domains\", label: \"Track multiple domains/sites?\"},\n\t\t\t{href: \"spa\", label: \"Add GoatCounter to a SPA?\"},\n\t\t\t{href: \"campaigns\", label: \"Track campaigns?\"},\n\t\t\t{href: \"countjs-versions\", label: \"Use SRI with count.js?\"},\n\t\t\t{href: \"countjs-host\", label: \"Host count.js somewhere else?\"},\n\t\t\t{href: \"frame\", label: \"Embed GoatCounter in a frame?\"}}},\n\t\t{label: \"Other\", items: []x{\n\t\t\t// TODO: add \"adblock\" page\n\t\t\t// TODO: add \"campiagns page\"; link in \"settings_main\".\n\t\t\t{href: \"export\", label: \"Export format\"},\n\t\t\t{href: \"sessions\", label: \"Sessions and visitors\"},\n\t\t\t{href: \"api\", label: \"API\"},\n\t\t\t{href: \"faq\", label: \"FAQ\"},\n\t\t\t{href: \"translating\", label: \"Translating GoatCounter\"}}},\n\t\t{label: \"Legal\", items: []x{\n\t\t\t{href: \"gdpr\", label: \"GDPR consent notices\"},\n\t\t\t{href: \"terms\", label: \"Terms of use\", gcCom: true},\n\t\t\t{href: \"privacy\", label: \"Privacy policy\", gcCom: true},\n\t\t}},\n\t}\n\ttplfunc.Add(\"help_nav\", func(ctx context.Context, active string) template.HTML {\n\t\tvar (\n\t\t\tdropdown = new(strings.Builder)\n\t\t\tlist     = new(strings.Builder)\n\t\t\tw        func(context.Context, []x)\n\t\t\te        = template.HTMLEscapeString\n\t\t\tgcCom    = Config(ctx).GoatcounterCom\n\t\t)\n\t\tw = func(ctx context.Context, l []x) {\n\t\t\tfor _, ll := range l {\n\t\t\t\tif ll.gcCom && !gcCom {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tif len(ll.items) > 0 {\n\t\t\t\t\tfmt.Fprintf(list, `<li><strong>%s</strong><ul>`, e(ll.label))\n\t\t\t\t\tfmt.Fprintf(dropdown, `<optgroup label=\"%s\">`, e(ll.label))\n\t\t\t\t\tw(ctx, ll.items)\n\t\t\t\t\tlist.WriteString(\"</ul></li>\")\n\t\t\t\t\tdropdown.WriteString(\"</optgroup>\")\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tlist.WriteString(\"<li\")\n\t\t\t\tdropdown.WriteString(`<option`)\n\t\t\t\tif ll.href == active {\n\t\t\t\t\tlist.WriteString(` class=\"active\"`)\n\t\t\t\t\tdropdown.WriteString(` selected`)\n\t\t\t\t}\n\n\t\t\t\tfmt.Fprintf(list, `><a href=\"%s\">%s</a></li>`, e(ll.href), e(ll.label))\n\t\t\t\tfmt.Fprintf(dropdown, ` value=\"%s\">%s</option>`, e(ll.href), e(ll.label))\n\t\t\t}\n\t\t}\n\n\t\tdropdown.WriteString(\"<select>\")\n\t\tlist.WriteString(\"<ul>\")\n\t\tw(ctx, links)\n\t\tdropdown.WriteString(\"</select>\")\n\t\tlist.WriteString(\"</ul>\")\n\t\treturn template.HTML(dropdown.String() + list.String())\n\t})\n\ttplfunc.Add(\"help_hdr\", func(ctx context.Context, active string) template.HTML {\n\t\tif active == \"404\" {\n\t\t\treturn \"404: Not Found\"\n\t\t}\n\t\tvar w func(context.Context, []x) string\n\t\tw = func(ctx context.Context, l []x) string {\n\t\t\tfor _, ll := range l {\n\t\t\t\tif ll.href == active {\n\t\t\t\t\treturn strings.TrimRight(ll.label, \"?\")\n\t\t\t\t}\n\t\t\t\tif len(ll.items) > 0 {\n\t\t\t\t\tif r := w(ctx, ll.items); r != \"\" {\n\t\t\t\t\t\treturn r\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"\"\n\t\t}\n\t\treturn template.HTML(w(ctx, links))\n\t})\n\n\ttplfunc.Add(\"dformat\", func(t time.Time, withTime bool, u User) string {\n\t\tf := u.Settings.DateFormat\n\t\tif withTime {\n\t\t\tif u.Settings.TwentyFourHours {\n\t\t\t\tf += \" 15:04\"\n\t\t\t} else {\n\t\t\t\tf += \" 03:04\"\n\t\t\t}\n\t\t}\n\n\t\treturn t.In(u.Settings.Timezone.Loc()).Format(f)\n\t})\n\n\ttplfunc.Add(\"path_id\", func(p string) string {\n\t\tp = strings.ReplaceAll(strings.TrimLeft(p, \"/\"), \"/\", \"-\")\n\t\tif p == \"\" {\n\t\t\treturn \"dashboard\"\n\t\t}\n\t\treturn p\n\t})\n\n\t// Override defaults to take user settings in to account.\n\ttplfunc.Add(\"tformat\", func(t time.Time, fmt string, u User) string {\n\t\tif fmt == \"\" {\n\t\t\tfmt = \"2006-01-02\"\n\t\t}\n\t\treturn t.In(u.Settings.Timezone.Loc()).Format(fmt)\n\t})\n\ttplfunc.Add(\"nformat\", func(n any, u User) string {\n\t\treturn tplfunc.Number(n, u.Settings.NumberFormat)\n\t})\n\n\ttplfunc.Add(\"totp_barcode\", func(email, s string) template.HTML {\n\t\tqrCode, err := qr.Encode(\n\t\t\tfmt.Sprintf(\"otpauth://totp/GoatCounter:%s?secret=%s&issuer=GoatCounter\", email, s),\n\t\t\tqr.M, qr.Auto)\n\t\tif err != nil {\n\t\t\tzlog.Error(errors.Wrap(err, \"encoding QR code\"))\n\t\t\treturn template.HTML(\"Error generating the QR code; this has been logged for investigation.\")\n\t\t}\n\n\t\tqrCode, err = barcode.Scale(qrCode, 200, 200)\n\t\tif err != nil {\n\t\t\tzlog.Error(errors.Wrap(err, \"scaling QR code\"))\n\t\t\treturn template.HTML(\"Error generating the QR code; this has been logged for investigation.\")\n\t\t}\n\n\t\tbuf := bytes.NewBufferString(\"data:image/png;base64,\")\n\t\terr = png.Encode(base64.NewEncoder(base64.StdEncoding, buf), qrCode)\n\t\tif err != nil {\n\t\t\tzlog.Error(errors.Wrap(err, \"encoding QR code as PNG\"))\n\t\t\treturn template.HTML(\"Error generating the QR code; this has been logged for investigation.\")\n\t\t}\n\n\t\treturn template.HTML(fmt.Sprintf(\n\t\t\t`<img alt=\"TOTP Secret Barcode\" title=\"TOTP Secret Barcode\" src=\"%s\">`,\n\t\t\tbuf.String()))\n\t})\n}\n\nvar (\n\treTemplate    = regexp.MustCompile(`{{(\\w+ .*?)(?:&ldquo;|&quot;)(.+?)(?:&rdquo;|&quot;)(.*?)}}`)\n\treHeaderLinks = regexp.MustCompile(`<h([2-6]) id=\"(.*?)\">(.*?)<\\/h[2-6]>`)\n\n\tmarkdownOpt = []blackfriday.Option{\n\t\tblackfriday.WithNoExtensions(),\n\t\tblackfriday.WithExtensions(blackfriday.NoExtensions |\n\t\t\tblackfriday.NoIntraEmphasis |\n\t\t\tblackfriday.Tables |\n\t\t\tblackfriday.FencedCode |\n\t\t\tblackfriday.Strikethrough |\n\t\t\tblackfriday.SpaceHeadings |\n\t\t\tblackfriday.HeadingIDs |\n\t\t\tblackfriday.AutoHeadingIDs |\n\t\t\tblackfriday.BackslashLineBreak |\n\t\t\tblackfriday.Autolink |\n\t\t\tblackfriday.Footnotes,\n\t\t),\n\n\t\tblackfriday.WithRenderer(blackfriday.NewHTMLRenderer(blackfriday.HTMLRendererParameters{Flags: blackfriday.HTMLFlagsNone |\n\t\t\tblackfriday.Smartypants |\n\t\t\tblackfriday.SmartypantsFractions |\n\t\t\tblackfriday.SmartypantsDashes |\n\t\t\tblackfriday.FootnoteReturnLinks,\n\t\t})),\n\t}\n)\n\n// Render Markdown with our flags.\n//\n// This also hacks around things a bit to ensure that template directives aren't\n// mangled.\nfunc renderMarkdown(in []byte) []byte {\n\tmd := blackfriday.Run(in, markdownOpt...)\n\tmd = reTemplate.ReplaceAll(md, []byte(`{{$1 \"$2\"$3}}`))\n\tmd = reHeaderLinks.ReplaceAll(md, []byte(`<h$1 id=\"$2\">$3 <a href=\"#$2\"></a></h$1>`))\n\treturn md\n}\n\nvar textSymbols = []rune{\n\t'\\u2007', // FIGURE SPACE; this one has the closest width to the blocks.\n\t'▁',      // U+2581 LOWER ONE EIGHTH BLOCK\n\t'▂',      // U+2582 LOWER ONE QUARTER BLOCK\n\t'▃',      // U+2583 LOWER THREE EIGHTHS BLOCK\n\t'▄',      // U+2584 LOWER HALF BLOCK\n\t'▅',      // U+2585 LOWER FIVE EIGHTHS BLOCK\n\t'▆',      // U+2586 LOWER THREE QUARTERS BLOCK\n\t'▇',      // U+2587 LOWER SEVEN EIGHTHS BLOCK\n\t'█',      // U+2588 FULL BLOCK\n}\n\nfunc textChart(ctx context.Context, stats []HitListStat, max int, daily bool) template.HTML {\n\t_, chunked := ChunkStat(stats)\n\tsymb := make([]rune, 0, 12)\n\tfor _, chunk := range chunked {\n\t\tperc := int(math.Floor(float64(chunk) / float64(max) * 100))\n\t\tsymb = append(symb, textSymbols[perc/12])\n\t}\n\treturn template.HTML(symb)\n}\n\nfunc HorizontalChart(ctx context.Context, stats HitStats, total int, link, paginate bool) template.HTML {\n\tif total == 0 || len(stats.Stats) == 0 {\n\t\treturn template.HTML(\"<em>\" + z18n.T(ctx, \"dashboard/nothing-to-display|Nothing to display\") + \"</em>\")\n\t}\n\n\tvar (\n\t\tuser      = MustGetUser(ctx)\n\t\tdisplayed int\n\t\tb         = new(strings.Builder)\n\t)\n\tb.WriteString(`<div class=\"rows\">`)\n\tfor _, s := range stats.Stats {\n\t\tdisplayed += s.Count\n\n\t\tvar (\n\t\t\tp    = float64(s.Count) / float64(total) * 100\n\t\t\tperc string\n\t\t)\n\t\tswitch {\n\t\tcase p == 0:\n\t\t\tperc = \"0%\"\n\t\tcase p < .5:\n\t\t\tperc = fmt.Sprintf(\"%.1f%%\", p)[1:]\n\t\tdefault:\n\t\t\tperc = fmt.Sprintf(\"%.0f%%\", math.Round(p))\n\t\t}\n\n\t\tname := \"\"\n\t\tif s.Name != \"\" {\n\t\t\tname = template.HTMLEscapeString(s.Name)\n\t\t} else {\n\t\t\tswitch s.ID {\n\t\t\tcase sizePhones:\n\t\t\t\tname = z18n.T(ctx, \"label/size-phones|Phones\")\n\t\t\tcase sizeLargePhones:\n\t\t\t\tname = z18n.T(ctx, \"label/size-largephones|Large phones, small tablets\")\n\t\t\tcase sizeTablets:\n\t\t\t\tname = z18n.T(ctx, \"label/size-tablets|Tablets and small laptops\")\n\t\t\tcase sizeDesktop:\n\t\t\t\tname = z18n.T(ctx, \"label/size-desktop|Computer monitors\")\n\t\t\tcase sizeDesktopHD:\n\t\t\t\tname = z18n.T(ctx, \"label/size-desktophd|Computer monitors larger than HD\")\n\t\t\t}\n\t\t}\n\n\t\tunknown := false\n\t\tif name == \"\" {\n\t\t\tname = z18n.T(ctx, \"unknown|(unknown)\")\n\t\t\tunknown = true\n\t\t}\n\t\tclass := \"\"\n\t\tif unknown || (s.RefScheme != nil && string(*s.RefScheme) == *RefSchemeGenerated) {\n\t\t\tclass = \"generated\"\n\t\t}\n\t\tvisit := \"\"\n\t\tif !link && s.RefScheme != nil && string(*s.RefScheme) == *RefSchemeHTTP {\n\t\t\tvisit = fmt.Sprintf(\n\t\t\t\t`<sup class=\"go\"><a rel=\"noopener\" target=\"_blank\" href=\"http://%s\">visit</a></sup>`,\n\t\t\t\tname)\n\t\t}\n\n\t\tif strings.HasPrefix(name, \"twitter.com/search?q=\") {\n\t\t\tif i := strings.LastIndex(name, \"t.co%2F\"); i > -1 {\n\t\t\t\tname = \"Twitter link: t.co/\" + name[i+7:]\n\t\t\t}\n\t\t}\n\n\t\tename := zstring.ElideCenter(name, 76)\n\t\tvar ref string\n\t\tif link && !unknown {\n\t\t\tref = fmt.Sprintf(`<a href=\"#\" class=\"load-detail\">`+\n\t\t\t\t`<span class=\"bar\" style=\"width: %s\"></span>`+\n\t\t\t\t`<span class=\"bar-c\"><span class=\"cutoff\">%s</span> %s</span></a>`, perc, ename, visit)\n\t\t} else {\n\t\t\tref = fmt.Sprintf(`<span class=\"bar\" style=\"width: %s\"></span>`+\n\t\t\t\t`<span class=\"bar-c\"><span class=\"cutoff\">%s</span> %s</span>`, perc, ename, visit)\n\t\t}\n\n\t\tncol := \"\"\n\t\tif !user.Settings.FewerNumbers {\n\t\t\tncol = tplfunc.Number(s.Count, user.Settings.NumberFormat)\n\t\t}\n\n\t\tid := s.ID\n\t\tif id == \"\" {\n\t\t\tid = name\n\t\t}\n\t\tfmt.Fprintf(b, `\n\t\t\t<div class=\"%[1]s\" data-key=\"%[2]s\">\n\t\t\t\t<span class=\"col-count col-perc\">%[3]s</span>\n\t\t\t\t<span class=\"col-name\">%[4]s</span>\n\t\t\t\t<span class=\"col-count\">%[5]s</span>\n\t\t\t</div>`,\n\t\t\tclass, id, perc, ref, ncol)\n\t}\n\tb.WriteString(`</div>`)\n\n\t// Add pagination link.\n\tif paginate && stats.More {\n\t\tb.WriteString(`<a href=\"#\" class=\"load-more\">`)\n\t\tb.WriteString(z18n.T(ctx, \"link/show-more|Show more\"))\n\t\tb.WriteString(\"</a>\")\n\t\tb.WriteString(`<a href=\"#\" class=\"load-less\">`)\n\t\tb.WriteString(z18n.T(ctx, \"link/show-less|(show less)\"))\n\t\tb.WriteString(\"</a>\")\n\t}\n\n\treturn template.HTML(b.String())\n}\n\ntype (\n\tTplEmailWelcome struct {\n\t\tContext     context.Context\n\t\tSite        Site\n\t\tUser        User\n\t\tCountDomain string\n\t}\n\tTplEmailForgotSite struct {\n\t\tContext context.Context\n\t\tSites   Sites\n\t\tEmail   string\n\t}\n\tTplEmailPasswordReset struct {\n\t\tContext context.Context\n\t\tSite    Site\n\t\tUser    User\n\t}\n\tTplEmailVerify struct {\n\t\tContext context.Context\n\t\tSite    Site\n\t\tUser    User\n\t}\n\tTplEmailAddUser struct {\n\t\tContext context.Context\n\t\tSite    Site\n\t\tNewUser User\n\t\tAddedBy string\n\t}\n\tTplEmailImportError struct {\n\t\tContext context.Context\n\t\tError   error\n\t}\n\tTplEmailExportDone struct {\n\t\tContext context.Context\n\t\tSite    Site\n\t\tUser    User\n\t\tExport  Export\n\t}\n\tTplEmailImportDone struct {\n\t\tContext context.Context\n\t\tSite    Site\n\t\tRows    int\n\t\tErrors  *errors.Group\n\t}\n)\n\nvar tplE = ztpl.ExecuteBytes\n\nfunc (t TplEmailWelcome) Render() ([]byte, error)       { return tplE(\"email_welcome.gotxt\", t) }\nfunc (t TplEmailForgotSite) Render() ([]byte, error)    { return tplE(\"email_forgot_site.gotxt\", t) }\nfunc (t TplEmailPasswordReset) Render() ([]byte, error) { return tplE(\"email_password_reset.gotxt\", t) }\nfunc (t TplEmailVerify) Render() ([]byte, error)        { return tplE(\"email_verify.gotxt\", t) }\nfunc (t TplEmailAddUser) Render() ([]byte, error)       { return tplE(\"email_adduser.gotxt\", t) }\nfunc (t TplEmailImportError) Render() ([]byte, error)   { return tplE(\"email_import_error.gotxt\", t) }\nfunc (t TplEmailExportDone) Render() ([]byte, error)    { return tplE(\"email_export_done.gotxt\", t) }\nfunc (t TplEmailImportDone) Render() ([]byte, error)    { return tplE(\"email_import_done.gotxt\", t) }\n"
        },
        {
          "name": "tpl",
          "type": "tree",
          "content": null
        },
        {
          "name": "tpl_test.go",
          "type": "blob",
          "size": 2.0400390625,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"io/fs\"\n\t\"os\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"zgo.at/errors\"\n\t. \"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/zstd/zgo\"\n\t\"zgo.at/ztpl\"\n)\n\nfunc TestTpl(t *testing.T) {\n\tsp := func(s string) *string { return &s }\n\tip := func(i int) *int { return &i }\n\ti64p := func(i int64) *int64 { return &i }\n\n\tctx := gctest.Context(nil)\n\tsite := Site{Code: \"example\"}\n\tuser := User{Email: \"a@example.com\", EmailToken: sp(\"T-EMAIL\"), LoginRequest: sp(\"T-LOGIN-REQ\")}\n\n\tfiles, _ := fs.Sub(os.DirFS(zgo.ModuleRoot()), \"tpl\")\n\terr := ztpl.Init(files)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\terrs := errors.NewGroup(4)\n\terrs.Append(errors.New(\"err: <1>\"))\n\terrs.Append(errors.New(\"err: <2>\"))\n\terrs.Append(errors.New(\"err: <3>\"))\n\terrs.Append(errors.New(\"err: <4>\"))\n\terrs.Append(errors.New(\"err: <5>\"))\n\n\ttests := []struct {\n\t\tt interface{ Render() ([]byte, error) }\n\t}{\n\t\t{TplEmailWelcome{ctx, site, user, \"count.example.com\"}},\n\t\t{TplEmailForgotSite{ctx, []Site{site}, \"test@example.com\"}},\n\t\t{TplEmailForgotSite{ctx, []Site{}, \"test@example.com\"}},\n\t\t{TplEmailPasswordReset{ctx, site, user}},\n\t\t{TplEmailVerify{ctx, site, user}},\n\t\t{TplEmailImportError{ctx, errors.Unwrap(errors.New(\"oh noes\"))}},\n\t\t{TplEmailImportDone{ctx, site, 42, errors.NewGroup(10)}},\n\t\t{TplEmailImportDone{ctx, site, 42, errs}},\n\t\t{TplEmailAddUser{ctx, site, user, \"foo@example.com\"}},\n\n\t\t{TplEmailExportDone{ctx, site, user, Export{\n\t\t\tID:        2,\n\t\t\tNumRows:   ip(42),\n\t\t\tSize:      sp(\"42\"),\n\t\t\tLastHitID: i64p(642051),\n\t\t\tHash:      sp(\"sha256-AAA\"),\n\t\t}}},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\tgot, err := tt.t.Render()\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\n\t\t\twant := \"Cheers,\\nMartin\\n\"\n\t\t\tif !strings.Contains(string(got), want) {\n\t\t\t\tt.Errorf(\"didn't contain %q\", want)\n\t\t\t}\n\n\t\t\tt.Log(\"\\n\" + string(got))\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "types.go",
          "type": "blob",
          "size": 2.576171875,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"database/sql/driver\"\n\t\"fmt\"\n\t\"slices\"\n\t\"strings\"\n\n\t\"zgo.at/zstd/zfloat\"\n\t\"zgo.at/zstd/zint\"\n)\n\n// Ints stores a slice of []int64 as a comma-separated string.\ntype Ints []int64\n\nfunc (l Ints) String() string                { return zint.Join(l, \", \") }\nfunc (l Ints) Value() (driver.Value, error)  { return zint.Join(l, \",\"), nil }\nfunc (l *Ints) UnmarshalText(v []byte) error { return l.Scan(v) }\n\nfunc (l *Ints) Scan(v any) error {\n\tif v == nil {\n\t\treturn nil\n\t}\n\n\tvar err error\n\t*l, err = zint.Split(fmt.Sprintf(\"%s\", v), \",\")\n\treturn err\n}\n\nfunc (l Ints) MarshalText() ([]byte, error) {\n\tv, err := l.Value()\n\treturn []byte(fmt.Sprintf(\"%s\", v)), err\n}\n\n// Floats stores a slice of []float64 as a comma-separated string.\ntype Floats []float64\n\nfunc (l Floats) String() string                { return zfloat.Join(l, \", \") }\nfunc (l Floats) Value() (driver.Value, error)  { return zfloat.Join(l, \",\"), nil }\nfunc (l *Floats) UnmarshalText(v []byte) error { return l.Scan(v) }\n\nfunc (l *Floats) Scan(v any) error {\n\tif v == nil {\n\t\treturn nil\n\t}\n\n\tvar err error\n\t*l, err = zfloat.Split(fmt.Sprintf(\"%s\", v), \",\")\n\treturn err\n}\n\nfunc (l Floats) MarshalText() ([]byte, error) {\n\tv, err := l.Value()\n\treturn []byte(fmt.Sprintf(\"%s\", v)), err\n}\n\n// Strings stores a slice of []string as a comma-separated string.\ntype Strings []string\n\nfunc (l Strings) String() string { return strings.Join(l, \", \") }\nfunc (l Strings) Value() (driver.Value, error) {\n\treturn strings.Join(slices.DeleteFunc(l, func(s string) bool { return s == \"\" }), \",\"), nil\n}\nfunc (l *Strings) UnmarshalText(v []byte) error { return l.Scan(v) }\n\n// TODO: move to zstd/zstring\nfunc splitAny(s string, seps ...string) []string {\n\tvar split []string\n\tfor {\n\t\tvar i int\n\t\tfor _, sep := range seps {\n\t\t\ti = strings.Index(s, sep)\n\t\t\tif i >= 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif i < 0 {\n\t\t\tif len(s) > 0 {\n\t\t\t\tsplit = append(split, s)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tsplit = append(split, s[:i])\n\t\ts = s[i+1:]\n\t}\n\n\treturn split\n}\n\nfunc (l *Strings) Scan(v any) error {\n\tif v == nil {\n\t\treturn nil\n\t}\n\n\tsplit := splitAny(fmt.Sprintf(\"%s\", v), \",\", \" \")\n\tstrs := make([]string, 0, len(split))\n\tfor _, s := range split {\n\t\ts = strings.TrimSpace(s)\n\t\tif s == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tstrs = append(strs, s)\n\t}\n\t*l = strs\n\treturn nil\n}\n\nfunc (l Strings) MarshalText() ([]byte, error) {\n\tv, err := l.Value()\n\treturn []byte(fmt.Sprintf(\"%s\", v)), err\n}\n"
        },
        {
          "name": "types_test.go",
          "type": "blob",
          "size": 5.60546875,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"testing\"\n\n\t\"zgo.at/zstd/ztest\"\n)\n\nfunc TestInts(t *testing.T) {\n\tt.Run(\"value\", func(t *testing.T) {\n\t\tcases := []struct {\n\t\t\tin   Ints\n\t\t\twant string\n\t\t}{\n\t\t\t{Ints{}, \"\"},\n\t\t\t{Ints{}, \"\"},\n\t\t\t{Ints{4, 5}, \"4,5\"},\n\t\t\t{Ints{1, 1}, \"1,1\"},\n\t\t\t{Ints{1}, \"1\"},\n\t\t\t{Ints{1, 0, 2}, \"1,0,2\"},\n\t\t}\n\n\t\tfor _, tc := range cases {\n\t\t\tt.Run(fmt.Sprintf(\"%v\", tc.in), func(t *testing.T) {\n\t\t\t\tout, err := tc.in.Value()\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif out != tc.want {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", out, tc.want)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n\n\tt.Run(\"scan\", func(t *testing.T) {\n\t\tcases := []struct {\n\t\t\tin      string\n\t\t\twant    Ints\n\t\t\twantErr string\n\t\t}{\n\t\t\t{\"\", Ints(nil), \"\"},\n\t\t\t{\"1\", Ints{1}, \"\"},\n\t\t\t{\"4, 5\", Ints{4, 5}, \"\"},\n\t\t\t{\"4,   5\", Ints{4, 5}, \"\"},\n\t\t\t{\"1, 1\", Ints{1, 1}, \"\"},\n\t\t\t{\"1, 0, 2\", Ints{1, 0, 2}, \"\"},\n\t\t\t{\"1,0,2\", Ints{1, 0, 2}, \"\"},\n\t\t\t{\"1,    0,    2    \", Ints{1, 0, 2}, \"\"},\n\t\t\t{\"1,\", Ints{1}, \"\"},\n\t\t\t{\"1,,,,\", Ints{1}, \"\"},\n\t\t\t{\",,1,,\", Ints{1}, \"\"},\n\t\t\t{\"1,NaN\", Ints(nil), \"strconv.ParseInt\"},\n\t\t}\n\n\t\tfor _, tc := range cases {\n\t\t\tt.Run(fmt.Sprintf(\"%v\", tc.in), func(t *testing.T) {\n\t\t\t\tout := Ints{}\n\t\t\t\terr := out.Scan(tc.in)\n\t\t\t\tif !ztest.ErrorContains(err, tc.wantErr) {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", err, tc.wantErr)\n\t\t\t\t}\n\t\t\t\tif !reflect.DeepEqual(out, tc.want) {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", out, tc.want)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n}\n\nfunc TestFloats(t *testing.T) {\n\tt.Run(\"value\", func(t *testing.T) {\n\t\tcases := []struct {\n\t\t\tin   Floats\n\t\t\twant string\n\t\t}{\n\t\t\t{Floats{}, \"\"},\n\t\t\t{Floats{}, \"\"},\n\t\t\t{Floats{4, 5}, \"4,5\"},\n\t\t\t{Floats{1, 1}, \"1,1\"},\n\t\t\t{Floats{1}, \"1\"},\n\t\t\t{Floats{1, 0, 2}, \"1,0,2\"},\n\t\t}\n\n\t\tfor _, tc := range cases {\n\t\t\tt.Run(fmt.Sprintf(\"%v\", tc.in), func(t *testing.T) {\n\t\t\t\tout, err := tc.in.Value()\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif out != tc.want {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", out, tc.want)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n\n\tt.Run(\"scan\", func(t *testing.T) {\n\n\t\tcases := []struct {\n\t\t\tin      string\n\t\t\twant    Floats\n\t\t\twantErr string\n\t\t}{\n\t\t\t{\"\", Floats(nil), \"\"},\n\t\t\t{\"1\", Floats{1}, \"\"},\n\t\t\t{\"4, 5\", Floats{4, 5}, \"\"},\n\t\t\t{\"4,   5\", Floats{4, 5}, \"\"},\n\t\t\t{\"1, 1\", Floats{1, 1}, \"\"},\n\t\t\t{\"1, 0, 2\", Floats{1, 0, 2}, \"\"},\n\t\t\t{\"1,0,2\", Floats{1, 0, 2}, \"\"},\n\t\t\t{\"1,    0,    2    \", Floats{1, 0, 2}, \"\"},\n\t\t\t{\"1,\", Floats{1}, \"\"},\n\t\t\t{\"1,,,,\", Floats{1}, \"\"},\n\t\t\t{\",,1,,\", Floats{1}, \"\"},\n\t\t\t{\"1,zxc\", Floats(nil), \"strconv.ParseFloat\"},\n\t\t}\n\n\t\tfor _, tc := range cases {\n\t\t\tt.Run(fmt.Sprintf(\"%v\", tc.in), func(t *testing.T) {\n\t\t\t\tout := Floats{}\n\t\t\t\terr := out.Scan(tc.in)\n\t\t\t\tif !ztest.ErrorContains(err, tc.wantErr) {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", err, tc.wantErr)\n\t\t\t\t}\n\t\t\t\tif !reflect.DeepEqual(out, tc.want) {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", out, tc.want)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n}\n\nfunc TestStrings(t *testing.T) {\n\tt.Run(\"value\", func(t *testing.T) {\n\t\tcases := []struct {\n\t\t\tin   Strings\n\t\t\twant string\n\t\t}{\n\t\t\t{Strings{}, \"\"},\n\t\t\t{Strings{}, \"\"},\n\t\t\t{Strings{\"4\", \"5\"}, \"4,5\"},\n\t\t\t{Strings{\"1\", \"1\"}, \"1,1\"},\n\t\t\t{Strings{\"€\"}, \"€\"},\n\t\t\t{Strings{\"1\", \"\", \"1\"}, \"1,1\"},\n\t\t\t{Strings{\"لوحة المفاتيح العربية\", \"xx\"}, \"لوحة المفاتيح العربية,xx\"},\n\t\t}\n\n\t\tfor _, tc := range cases {\n\t\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\t\tout, err := tc.in.Value()\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif out != tc.want {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", out, tc.want)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n\n\tt.Run(\"scan\", func(t *testing.T) {\n\t\tcases := []struct {\n\t\t\tin      string\n\t\t\twant    Strings\n\t\t\twantErr string\n\t\t}{\n\t\t\t{\"\", Strings{}, \"\"},\n\t\t\t{\"1\", Strings{\"1\"}, \"\"},\n\t\t\t{\"4, 5\", Strings{\"4\", \"5\"}, \"\"},\n\t\t\t{\"4 5\", Strings{\"4\", \"5\"}, \"\"},\n\t\t\t{\"1, 1\", Strings{\"1\", \"1\"}, \"\"},\n\t\t\t{\"1,\", Strings{\"1\"}, \"\"},\n\t\t\t{\"1,,,,\", Strings{\"1\"}, \"\"},\n\t\t\t{\",,1,,\", Strings{\"1\"}, \"\"},\n\t\t\t{\"€\", Strings{\"€\"}, \"\"},\n\t\t\t{\"لوحة المفاتيح العربية, xx\", Strings{\"لوحة المفاتيح العربية\", \"xx\"}, \"\"},\n\t\t}\n\n\t\tfor _, tc := range cases {\n\t\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\t\tout := Strings{}\n\t\t\t\terr := out.Scan(tc.in)\n\t\t\t\tif !ztest.ErrorContains(err, tc.wantErr) {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", err, tc.wantErr)\n\t\t\t\t}\n\t\t\t\tif !reflect.DeepEqual(out, tc.want) {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", out, tc.want)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n\n\tt.Run(\"marshalText\", func(t *testing.T) {\n\t\tcases := []struct {\n\t\t\tin      Strings\n\t\t\twant    []byte\n\t\t\twantErr string\n\t\t}{\n\t\t\t{Strings{\"x\"}, []byte(\"x\"), \"\"},\n\t\t\t{Strings{\"x\", \"y\"}, []byte(\"x,y\"), \"\"},\n\t\t}\n\n\t\tfor _, tc := range cases {\n\t\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\t\tout, err := tc.in.MarshalText()\n\t\t\t\tif !ztest.ErrorContains(err, tc.wantErr) {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", err, tc.wantErr)\n\t\t\t\t}\n\t\t\t\tif !reflect.DeepEqual(out, tc.want) {\n\t\t\t\t\tt.Errorf(\"\\nout:  %q\\nwant: %q\\n\", string(out), string(tc.want))\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n\n\tt.Run(\"unmarshalText\", func(t *testing.T) {\n\t\tcases := []struct {\n\t\t\tin      []byte\n\t\t\twant    Strings\n\t\t\twantErr string\n\t\t}{\n\t\t\t{[]byte(\"  a  \"), Strings{\"a\"}, \"\"},\n\t\t\t{[]byte(\"  a  , asd\"), Strings{\"a\", \"asd\"}, \"\"},\n\t\t}\n\n\t\tfor _, tc := range cases {\n\t\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\t\tvar out Strings\n\t\t\t\terr := out.UnmarshalText(tc.in)\n\t\t\t\tif !ztest.ErrorContains(err, tc.wantErr) {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", err, tc.wantErr)\n\t\t\t\t}\n\t\t\t\tif !reflect.DeepEqual(out, tc.want) {\n\t\t\t\t\tt.Errorf(\"\\nout:  %#v\\nwant: %#v\\n\", out, tc.want)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n}\n"
        },
        {
          "name": "user.go",
          "type": "blob",
          "size": 18.64453125,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"database/sql\"\n\t\"database/sql/driver\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"golang.org/x/crypto/bcrypt\"\n\t\"zgo.at/errors\"\n\t\"zgo.at/guru\"\n\t\"zgo.at/json\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zlog\"\n\t\"zgo.at/zstd/zbool\"\n\t\"zgo.at/zstd/zcrypto\"\n\t\"zgo.at/zstd/ztime\"\n\t\"zgo.at/zstd/ztype\"\n)\n\nconst totpSecretLen = 16\n\n// User entry.\ntype User struct {\n\tID   int64 `db:\"user_id\" json:\"id,readonly\"`\n\tSite int64 `db:\"site_id\" json:\"site,readonly\"`\n\n\tEmail         string       `db:\"email\" json:\"email\"`\n\tEmailVerified zbool.Bool   `db:\"email_verified\" json:\"email_verified,readonly\"`\n\tPassword      []byte       `db:\"password\" json:\"-\"`\n\tTOTPEnabled   zbool.Bool   `db:\"totp_enabled\" json:\"totp_enabled,readonly\"`\n\tTOTPSecret    []byte       `db:\"totp_secret\" json:\"-\"`\n\tAccess        UserAccesses `db:\"access\" json:\"access,readonly\"`\n\tLoginAt       *time.Time   `db:\"login_at\" json:\"login_at,readonly\"`\n\tOpenAt        *time.Time   `db:\"open_at\" json:\"open_at,readonly\"`\n\tResetAt       *time.Time   `db:\"reset_at\" json:\"reset_at,readonly\"`\n\tLoginRequest  *string      `db:\"login_request\" json:\"-\"`\n\tLoginToken    *string      `db:\"login_token\" json:\"-\"`\n\tToken         *string      `db:\"csrf_token\" json:\"-\"`\n\tEmailToken    *string      `db:\"email_token\" json:\"-\"`\n\tSettings      UserSettings `db:\"settings\" json:\"settings\"`\n\n\t// Keep track when the last email report was sent, so we don't double-send them.\n\tLastReportAt time.Time `db:\"last_report_at\" json:\"last_report_at\"`\n\n\tCreatedAt time.Time  `db:\"created_at\" json:\"created_at,readonly\"`\n\tUpdatedAt *time.Time `db:\"updated_at\" json:\"updated_at,readonly\"`\n}\n\n// Defaults sets fields to default values, unless they're already set.\nfunc (u *User) Defaults(ctx context.Context) {\n\tif s := GetSite(ctx); s != nil && s.ID > 0 { // Not set in website.\n\t\tu.Site = s.IDOrParent()\n\t}\n\n\tif u.CreatedAt.IsZero() {\n\t\tu.CreatedAt = ztime.Now()\n\t} else {\n\t\tt := ztime.Now()\n\t\tu.UpdatedAt = &t\n\t}\n\n\tif u.LastReportAt.IsZero() {\n\t\tu.LastReportAt = ztime.Now()\n\t}\n\n\tif !u.EmailVerified {\n\t\tu.EmailToken = ztype.Ptr[string](zcrypto.Secret192())\n\t}\n\n\tu.Settings.Defaults(ctx)\n}\n\n// Validate the object.\nfunc (u *User) Validate(ctx context.Context, validatePassword bool) error {\n\tv := NewValidate(ctx)\n\n\tv.Required(\"site\", u.Site)\n\tv.Required(\"email\", u.Email)\n\tv.Len(\"email\", u.Email, 5, 255)\n\tv.Email(\"email\", u.Email)\n\tif len(u.Access) == 0 {\n\t\tv.Append(\"access\", \"must be set\")\n\t}\n\n\tif validatePassword {\n\t\tsp := string(u.Password)\n\t\tv.Required(\"password\", u.Password)\n\t\tv.UTF8(\"password\", sp)\n\t\tif len(sp) < 8 || len(sp) > 50 {\n\t\t\tv.Append(\"password\", \"must be between 8 and 50 bytes\")\n\t\t}\n\t}\n\n\tv.Sub(\"settings\", \"\", u.Settings.Validate(ctx))\n\n\treturn v.ErrorOrNil()\n}\n\n// Hash the password, replacing the plain-text one.\nfunc (u *User) hashPassword(ctx context.Context) error {\n\t// Length is capped to 50 characters in Validate.\n\tif len(u.Password) > 50 {\n\t\treturn errors.Errorf(\"User.hashPassword: already hashed\")\n\t}\n\n\tcost := bcrypt.DefaultCost\n\tif Config(ctx).BcryptMinCost { // Otherwise every test take 1.5s extra\n\t\tcost = bcrypt.MinCost\n\t}\n\tpwd, err := bcrypt.GenerateFromPassword(u.Password, cost)\n\tif err != nil {\n\t\treturn errors.Errorf(\"User.hashPassword: %w\", err)\n\t}\n\tu.Password = pwd\n\treturn nil\n}\n\n// Insert a new row.\nfunc (u *User) Insert(ctx context.Context, allowBlankPassword bool) error {\n\tif u.ID > 0 {\n\t\treturn errors.New(\"ID > 0\")\n\t}\n\n\thasPassword := !(u.Password == nil && allowBlankPassword)\n\n\tu.Defaults(ctx)\n\terr := u.Validate(ctx, hasPassword)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif hasPassword {\n\t\terr = u.hashPassword(ctx)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"User.Insert\")\n\t\t}\n\t}\n\n\tu.TOTPEnabled = zbool.Bool(false)\n\tu.TOTPSecret = make([]byte, totpSecretLen)\n\t_, err = rand.Read(u.TOTPSecret)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"User.Insert\")\n\t}\n\n\tquery := `insert into users `\n\targs := []any{u.Site, u.Email, u.Password, u.TOTPSecret, u.Settings, u.Access, u.CreatedAt, u.LastReportAt}\n\tif u.EmailVerified {\n\t\tquery += ` (site_id, email, password, totp_secret, settings, access, created_at, last_report_at, email_verified) values (?)`\n\t\targs = append(args, 1)\n\t} else {\n\t\tquery += ` (site_id, email, password, totp_secret, settings, access, created_at, last_report_at, email_token) values (?)`\n\t\targs = append(args, u.EmailToken)\n\t}\n\n\tu.ID, err = zdb.InsertID(ctx, \"user_id\", query, args)\n\tif err != nil {\n\t\tif zdb.ErrUnique(err) {\n\t\t\treturn guru.New(400, \"this user already exists\")\n\t\t}\n\t\treturn errors.Wrap(err, \"User.Insert\")\n\t}\n\treturn nil\n}\n\n// Delete this user.\nfunc (u *User) Delete(ctx context.Context, lastAdmin bool) error {\n\tif !lastAdmin {\n\t\tvar admins Users\n\t\terr := admins.BySite(ctx, u.Site)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"User.Delete\")\n\t\t}\n\t\tadmins = admins.Admins()\n\t\tif len(admins) == 1 && admins[0].ID == u.ID {\n\t\t\treturn fmt.Errorf(\"can't delete last admin user for site %d\", u.Site)\n\t\t}\n\t}\n\n\taccount, err := GetAccount(ctx)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"User.Delete\")\n\t}\n\n\terr = zdb.Exec(ctx, `delete from users where user_id=? and site_id=?`,\n\t\tu.ID, account.ID)\n\treturn errors.Wrap(err, \"User.Delete\")\n}\n\n// Update this user's name, email, settings, and access.\nfunc (u *User) Update(ctx context.Context, emailChanged bool) error {\n\tif u.ID == 0 {\n\t\treturn errors.New(\"ID == 0\")\n\t}\n\n\tu.Defaults(ctx)\n\terr := u.Validate(ctx, false)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif emailChanged && Config(ctx).GoatcounterCom {\n\t\tu.EmailVerified = false\n\t\tu.EmailToken = ztype.Ptr(zcrypto.Secret192())\n\t}\n\n\taccount, err := GetAccount(ctx)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"User.Update\")\n\t}\n\n\terr = zdb.Exec(ctx, `update users\n\t\tset email=?, settings=?, access=?, updated_at=?, email_verified=?, email_token=?, last_report_at=?\n\t\twhere user_id=? and site_id=?`,\n\t\tu.Email, u.Settings, u.Access, u.UpdatedAt, u.EmailVerified, u.EmailToken, u.LastReportAt, u.ID, account.ID)\n\treturn errors.Wrap(err, \"User.Update\")\n}\n\n// UpdateSite updates this user's siteID (i.e. moves it to another site).\nfunc (u *User) UpdateSite(ctx context.Context) error {\n\tif u.ID == 0 {\n\t\treturn errors.New(\"ID == 0\")\n\t}\n\n\tu.Defaults(ctx)\n\terr := u.Validate(ctx, false)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = zdb.Exec(ctx, `update users set site_id=? where user_id=?`, u.Site, u.ID)\n\treturn errors.Wrap(err, \"User.UpdateSite\")\n}\n\n// UpdatePassword updates this user's password.\nfunc (u *User) UpdatePassword(ctx context.Context, pwd string) error {\n\tif u.ID == 0 {\n\t\treturn errors.New(\"ID == 0\")\n\t}\n\n\tu.Password = []byte(pwd)\n\tu.Defaults(ctx)\n\terr := u.Validate(ctx, true)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = u.hashPassword(ctx)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"User.UpdatePassword\")\n\t}\n\n\terr = zdb.Exec(ctx,\n\t\t`update users set password=$1, updated_at=$2 where user_id=$3`,\n\t\tu.Password, u.UpdatedAt, u.ID)\n\treturn errors.Wrap(err, \"User.UpdatePassword\")\n}\n\n// CorrectPassword verifies that this password is correct.\nfunc (u User) CorrectPassword(pwd string) (bool, error) {\n\terr := bcrypt.CompareHashAndPassword(u.Password, []byte(pwd))\n\tif errors.Is(err, bcrypt.ErrMismatchedHashAndPassword) {\n\t\treturn false, nil\n\t}\n\tif err != nil {\n\t\treturn false, errors.Errorf(\"user.CorrectPassword: %w\", err)\n\t}\n\treturn true, nil\n}\n\nfunc (u *User) VerifyEmail(ctx context.Context) error {\n\terr := zdb.Exec(ctx,\n\t\t`update users set email_verified=1, email_token=null where user_id=$1`,\n\t\tu.ID)\n\treturn errors.Wrap(err, \"User.VerifyEmail\")\n}\n\n// ByEmailToken gets a user by email verification token.\nfunc (u *User) ByEmailToken(ctx context.Context, key string) error {\n\treturn errors.Wrap(zdb.Get(ctx, u,\n\t\t`select * from users where site_id=$1 and email_token=$2`,\n\t\tMustGetSite(ctx).IDOrParent(), key), \"User.ByEmailToken\")\n}\n\n// ByID gets a user by id.\nfunc (u *User) ByID(ctx context.Context, id int64) error {\n\terr := zdb.Get(ctx, u, `select * from users where user_id=? and site_id=?`,\n\t\tid, MustGetSite(ctx).IDOrParent())\n\treturn errors.Wrap(err, \"User.ByID\")\n}\n\n// ByEmail gets a user by email address.\nfunc (u *User) ByEmail(ctx context.Context, email string) error {\n\terr := zdb.Get(ctx, u, `select * from users where lower(email) = lower(?) and site_id = ?`,\n\t\temail, MustGetSite(ctx).IDOrParent())\n\treturn errors.Wrap(err, \"User.ByEmail\")\n}\n\n// Find a user: by ID if ident is a number, or by email if it's not.\nfunc (u *User) Find(ctx context.Context, ident string) error {\n\tid, err := strconv.ParseInt(ident, 10, 64)\n\tif err == nil {\n\t\treturn errors.Wrap(u.ByID(ctx, id), \"User.Find\")\n\t}\n\n\ts, email, _ := strings.Cut(ident, \",\")\n\n\tvar site Site\n\terr = site.Find(ctx, s)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"User.Find\")\n\t}\n\n\terr = u.ByEmail(WithSite(ctx, &site), email)\n\treturn errors.Wrap(err, \"User.Find\")\n}\n\n// ByResetToken gets a user by login request key.\n//\n// This can be used in two contexts: the user requested a password reset, or the\n// user was invited to create a new account.\nfunc (u *User) ByResetToken(ctx context.Context, key string) error {\n\ttimeout := \"2 hours\"\n\tif strings.HasPrefix(key, \"invite-\") {\n\t\ttimeout = \"168 hours\"\n\t}\n\n\tquery := `select * from users where login_request=$1 and site_id=$2 and `\n\tif zdb.SQLDialect(ctx) == zdb.DialectPostgreSQL {\n\t\tquery += fmt.Sprintf(`reset_at + interval '%s' > now()`, timeout)\n\t} else {\n\t\tquery += fmt.Sprintf(`datetime(reset_at, '+%s') > datetime()`, timeout)\n\t}\n\n\treturn errors.Wrap(zdb.Get(ctx, u, query,\n\t\tkey, MustGetSite(ctx).IDOrParent()), \"User.ByResetToken\")\n}\n\n// ByToken gets a user by login token.\nfunc (u *User) ByToken(ctx context.Context, token string) error {\n\tif token == \"\" {\n\t\treturn sql.ErrNoRows\n\t}\n\n\treturn errors.Wrap(zdb.Get(ctx, u,\n\t\t`select * from users where login_token=$1`, token),\n\t\t\"User.ByToken\")\n}\n\n// ByTokenAndSite gets a user by login token.\nfunc (u *User) ByTokenAndSite(ctx context.Context, token string) error {\n\tif token == \"\" {\n\t\treturn sql.ErrNoRows\n\t}\n\n\treturn errors.Wrap(zdb.Get(ctx, u,\n\t\t`select * from users where login_token=$1 and site_id=$2`,\n\t\ttoken, MustGetSite(ctx).IDOrParent()), \"User.ByTokenAndSite\")\n}\n\n// RequestReset generates a new password reset key.\nfunc (u *User) RequestReset(ctx context.Context) error {\n\t// TODO: rename this, as it's now used for password resets.\n\tu.LoginRequest = ztype.Ptr(zcrypto.Secret128())\n\terr := zdb.Exec(ctx, `update users set\n\t\tlogin_request=$1, reset_at=current_timestamp where user_id=$2 and site_id=$3`,\n\t\t*u.LoginRequest, u.ID, MustGetSite(ctx).IDOrParent())\n\treturn errors.Wrap(err, \"User.RequestReset\")\n}\n\nfunc (u *User) InviteToken(ctx context.Context) error {\n\tu.LoginRequest = ztype.Ptr(\"invite-\" + zcrypto.Secret128())\n\terr := zdb.Exec(ctx, `update users set\n\t\tlogin_request=$1, reset_at=current_timestamp where user_id=$2 and site_id=$3`,\n\t\t*u.LoginRequest, u.ID, MustGetSite(ctx).IDOrParent())\n\treturn errors.Wrap(err, \"User.RequestReset\")\n}\n\nfunc (u *User) EnableTOTP(ctx context.Context) error {\n\terr := zdb.Exec(ctx, `update users set totp_enabled=1 where user_id=$1 and site_id=$2`,\n\t\tu.ID, MustGetSite(ctx).IDOrParent())\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"User.EnableTOTP\")\n\t}\n\tu.TOTPEnabled = zbool.Bool(true)\n\treturn nil\n}\n\nfunc (u *User) DisableTOTP(ctx context.Context) error {\n\t// Reset the totp secret to something new so that we don't end up re-using the\n\t// old secret by mistake and so that we're sure that it's invalidated.\n\tsecret := make([]byte, totpSecretLen)\n\t_, err := rand.Read(secret)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"User.DisableTOTP\")\n\t}\n\n\terr = zdb.Exec(ctx, `update users set\n\t\ttotp_enabled=0, totp_secret=$1 where user_id=$2 and site_id=$3`,\n\t\tsecret, u.ID, MustGetSite(ctx).IDOrParent())\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"User.DisableTOTP\")\n\t}\n\tu.TOTPSecret = secret\n\tu.TOTPEnabled = zbool.Bool(false)\n\treturn nil\n}\n\n// Login a user; create a new key, CSRF token, and reset the request date.\nfunc (u *User) Login(ctx context.Context) error {\n\tif u.ID == 0 {\n\t\treturn errors.New(\"u.ID == 0\")\n\t}\n\n\tu.Token = ztype.Ptr(zcrypto.Secret256())\n\tif u.LoginToken == nil || *u.LoginToken == \"\" {\n\t\ts := ztime.Now().Format(\"20060102\") + \"-\" + zcrypto.Secret256()\n\t\tu.LoginToken = &s\n\t}\n\n\tu.LoginAt = ztype.Ptr(ztime.Now())\n\tu.OpenAt = ztype.Ptr(ztime.Now())\n\terr := zdb.Exec(ctx, `update users set\n\t\t\tlogin_request=null, login_token=?, csrf_token=?, login_at=?, open_at=?\n\t\t\twhere user_id = ? and site_id = ?`,\n\t\tu.LoginToken, u.Token, u.LoginAt, u.OpenAt,\n\t\tu.ID, MustGetSite(ctx).IDOrParent())\n\treturn errors.Wrap(err, \"User.Login\")\n}\n\nfunc (u *User) UpdateOpenAt(ctx context.Context) error {\n\tif u.ID == 0 {\n\t\treturn errors.New(\"u.ID == 0\")\n\t}\n\n\t// Update once a day at the most.\n\tif u.OpenAt != nil && u.OpenAt.After(ztime.Now().Add(-24*time.Hour)) {\n\t\treturn nil\n\t}\n\n\tu.OpenAt = ztype.Ptr(ztime.Now())\n\terr := zdb.Exec(ctx, `update users set open_at = ? where user_id = ? and site_id = ?`,\n\t\tu.OpenAt, u.ID, MustGetSite(ctx).IDOrParent())\n\treturn errors.Wrap(err, \"User.UpdateOpenAt\")\n}\n\n// Logout a user.\nfunc (u *User) Logout(ctx context.Context) error {\n\tif u.ID == 0 {\n\t\treturn errors.New(\"u.ID == 0\")\n\t}\n\n\tu.LoginToken = nil\n\tu.LoginRequest = nil\n\tu.LoginAt = nil\n\terr := zdb.Exec(ctx,\n\t\t`update users set login_token=null, login_request=null where user_id=$1 and site_id=$2`,\n\t\tu.ID, MustGetSite(ctx).IDOrParent())\n\treturn errors.Wrap(err, \"User.Logout\")\n}\n\n// CSRFToken gets the CSRF token.\nfunc (u *User) CSRFToken() string {\n\tif u.Token == nil {\n\t\treturn \"\"\n\t}\n\treturn *u.Token\n}\n\n// HasAccess checks if this user has access to this site for the permission.\nfunc (u User) HasAccess(check UserAccess) bool {\n\tswitch check {\n\tdefault:\n\t\treturn false\n\tcase AccessSuperuser:\n\t\treturn u.Access[\"all\"] == AccessSuperuser\n\tcase AccessAdmin:\n\t\treturn u.Access[\"all\"] == AccessSuperuser || u.Access[\"all\"] == AccessAdmin\n\tcase AccessSettings:\n\t\treturn u.Access[\"all\"] == AccessSuperuser || u.Access[\"all\"] == AccessAdmin || u.Access[\"all\"] == AccessSettings\n\tcase AccessReadOnly:\n\t\treturn u.Access[\"all\"] == AccessSuperuser || u.Access[\"all\"] == AccessAdmin || u.Access[\"all\"] == AccessSettings || u.Access[\"all\"] == AccessReadOnly\n\t}\n}\n\nfunc (u User) AccessSuperuser() bool { return u.Access[\"all\"] == AccessSuperuser }\nfunc (u User) AccessAdmin() bool     { return u.AccessSuperuser() || u.Access[\"all\"] == AccessAdmin }\nfunc (u User) AccessSettings() bool  { return u.AccessAdmin() || u.Access[\"all\"] == AccessSettings }\n\n// EmailReportRange gets the time range of the next report to send out.\n//\n// user.LastReportAt is set when a report is sent; to get the range for the new\n// report we take LastReportAt, go to the start and end of the period, and if\n// the endDate > now then send out a new report and set LastReportAt.\n//\n// The cronjob will send the report if the current date is after the end date.\nfunc (u User) EmailReportRange() ztime.Range {\n\tvar (\n\t\tstart, end ztime.Time\n\t\tlastReport = ztime.Time{u.LastReportAt.In(u.Settings.Timezone.Loc())}\n\t\tweek       = ztime.Week(u.Settings.SundayStartsWeek)\n\t)\n\tswitch u.Settings.EmailReports.Int() {\n\tcase EmailReportNever:\n\t\treturn ztime.Range{}\n\n\tcase EmailReportDaily:\n\t\tstart, end = lastReport.StartOf(ztime.Day), lastReport.EndOf(ztime.Day)\n\n\tcase EmailReportBiWeekly:\n\t\tstart, end = lastReport.StartOf(week), lastReport.EndOf(week).AddPeriod(1, week)\n\n\tcase EmailReportMonthly:\n\t\tstart, end = lastReport.StartOf(ztime.Month), lastReport.EndOf(ztime.Month)\n\n\tcase EmailReportWeekly:\n\t\tstart, end = lastReport.StartOf(week), lastReport.EndOf(week)\n\tdefault:\n\t\tzlog.Errorf(\"invalid EmailReports value for user %d: %d\", u.ID, u.Settings.EmailReports.Int())\n\t\treturn ztime.Range{}\n\t}\n\n\treturn ztime.NewRange(start.Time.Truncate(time.Second)).To(end.Time.Truncate(time.Second))\n}\n\nfunc (u User) EmailShort() string {\n\tlocal, _, ok := strings.Cut(u.Email, \"@\")\n\tif ok {\n\t\treturn local + \"@\"\n\t}\n\treturn u.Email\n}\n\ntype Users []User\n\n// List all users for a site.\nfunc (u *Users) List(ctx context.Context, siteID int64) error {\n\tvar s Site\n\terr := s.ByID(ctx, siteID)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn errors.Wrap(zdb.Select(ctx, u,\n\t\t`select * from users where site_id=$1`, s.IDOrParent()), \"Users.List\")\n}\n\n// Admins returns just the admins and superusers in this user list.\nfunc (u Users) Admins() Users {\n\tn := make(Users, 0, len(u))\n\tfor _, uu := range u {\n\t\tif uu.AccessSuperuser() || uu.AccessAdmin() {\n\t\t\tn = append(n, uu)\n\t\t}\n\t}\n\treturn n\n}\n\n// ByEmail gets all users with this email address.\nfunc (u *Users) ByEmail(ctx context.Context, email string) error {\n\terr := zdb.Select(ctx, u,\n\t\t`select * from users where lower(email)=lower($1) order by user_id asc`, email)\n\treturn errors.Wrap(err, \"Users.ByEmail\")\n}\n\n// BySite gets all users for a site.\nfunc (u *Users) BySite(ctx context.Context, siteID int64) error {\n\terr := zdb.Select(ctx, u,\n\t\t`select * from users where site_id=? order by user_id asc`, siteID)\n\treturn errors.Wrap(err, \"Users.BySite\")\n}\n\n// Find users: by ID if ident is a number, or by email if it's not.\nfunc (u *Users) Find(ctx context.Context, ident []string) error {\n\tids, strs := splitIntStr(ident)\n\terr := zdb.Select(ctx, u, `select * from users where\n\t\t{{:ids user_id in (:ids) or}}\n\t\t{{:strs! 0=1}}\n\t\t{{:strs email in (:strs)}}`,\n\t\tmap[string]any{\"ids\": ids, \"strs\": strs})\n\treturn errors.Wrap(err, \"Users.Find\")\n}\n\n// IDs gets a list of all IDs for these users.\nfunc (u *Users) IDs() []int64 {\n\tids := make([]int64, 0, len(*u))\n\tfor _, uu := range *u {\n\t\tids = append(ids, uu.ID)\n\t}\n\treturn ids\n}\n\ntype (\n\tUserAccesses map[string]UserAccess\n\tUserAccess   string\n)\n\nconst (\n\tAccessReadOnly  UserAccess = \"r\"\n\tAccessSettings  UserAccess = \"s\"\n\tAccessAdmin     UserAccess = \"a\"\n\tAccessSuperuser UserAccess = \"*\"\n)\n\n// TODO: this is not translated.\nfunc (u UserAccess) String() string {\n\tswitch u {\n\tcase AccessReadOnly:\n\t\treturn \"read only\"\n\tcase AccessSettings:\n\t\treturn \"settings\"\n\tcase AccessAdmin:\n\t\treturn \"admin\"\n\tcase AccessSuperuser:\n\t\treturn \"superuser\"\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"UserAccess is %q; should never happpen\", string(u)))\n\t}\n}\n\n// Value implements the SQL Value function to determine what to store in the DB.\nfunc (u UserAccesses) Value() (driver.Value, error) { return json.Marshal(u) }\n\n// Scan converts the data returned from the DB into the struct.\nfunc (u *UserAccesses) Scan(v any) error {\n\tswitch vv := v.(type) {\n\tcase []byte:\n\t\treturn json.Unmarshal(vv, u)\n\tcase string:\n\t\treturn json.Unmarshal([]byte(vv), u)\n\tdefault:\n\t\treturn fmt.Errorf(\"UserAccesses.Scan: unsupported type: %T\", v)\n\t}\n}\n\n// Delete all users in this selection.\nfunc (u *Users) Delete(ctx context.Context, force bool) error {\n\terr := zdb.TX(ctx, func(ctx context.Context) error {\n\t\tfor _, uu := range *u {\n\t\t\terr := uu.Delete(WithSite(ctx, &Site{ID: uu.Site}), force)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\treturn errors.Wrap(err, \"Users.Delete\")\n}\n"
        },
        {
          "name": "user_agent.go",
          "type": "blob",
          "size": 2.7197265625,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter\n\nimport (\n\t\"context\"\n\n\t\"zgo.at/errors\"\n\t\"zgo.at/gadget\"\n\t\"zgo.at/isbot\"\n\t\"zgo.at/zcache\"\n\t\"zgo.at/zdb\"\n)\n\ntype UserAgent struct {\n\tUserAgent string\n\tIsbot     uint8\n\tBrowserID int64\n\tSystemID  int64\n}\n\nfunc (p *UserAgent) GetOrInsert(ctx context.Context) error {\n\tshortUA := gadget.ShortenUA(p.UserAgent)\n\tc, ok := cacheUA(ctx).Get(p.UserAgent)\n\tif ok {\n\t\t*p = c.(UserAgent)\n\t\tcacheUA(ctx).Touch(shortUA, zcache.DefaultExpiration)\n\t\treturn nil\n\t}\n\n\tvar (\n\t\tua      = gadget.ParseUA(p.UserAgent)\n\t\tbrowser Browser\n\t\tsystem  System\n\t)\n\n\terr := browser.GetOrInsert(ctx, ua.BrowserName, ua.BrowserVersion)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"UserAgent.GetOrInsert\")\n\t}\n\tp.BrowserID = browser.ID\n\n\terr = system.GetOrInsert(ctx, ua.OSName, ua.OSVersion)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"UserAgent.GetOrInsert\")\n\t}\n\tp.SystemID = system.ID\n\n\tp.Isbot = uint8(isbot.UserAgent(p.UserAgent))\n\n\tcacheUA(ctx).SetDefault(shortUA, *p)\n\treturn nil\n}\n\ntype Browser struct {\n\tID      int64  `db:\"browser_id\"`\n\tName    string `db:\"name\"`\n\tVersion string `db:\"version\"`\n}\n\nfunc (b *Browser) GetOrInsert(ctx context.Context, name, version string) error {\n\tk := name + version\n\tc, ok := cacheBrowsers(ctx).Get(k)\n\tif ok {\n\t\t*b = c.(Browser)\n\t\tcacheBrowsers(ctx).Touch(k, zcache.DefaultExpiration)\n\t\treturn nil\n\t}\n\n\tb.Name = name\n\tb.Version = version\n\n\terr := zdb.Get(ctx, &b.ID,\n\t\t`select browser_id from browsers where name=$1 and version=$2`,\n\t\tname, version)\n\tif zdb.ErrNoRows(err) {\n\t\tb.ID, err = zdb.InsertID(ctx, \"browser_id\",\n\t\t\t`insert into browsers (name, version) values ($1, $2)`,\n\t\t\tname, version)\n\t}\n\tif err != nil {\n\t\treturn errors.Wrapf(err, \"Browser.GetOrInsert %q %q\", name, version)\n\t}\n\tcacheBrowsers(ctx).SetDefault(k, *b)\n\treturn nil\n}\n\ntype System struct {\n\tID      int64  `db:\"system_id\"`\n\tName    string `db:\"name\"`\n\tVersion string `db:\"version\"`\n}\n\nfunc (s *System) GetOrInsert(ctx context.Context, name, version string) error {\n\tk := name + version\n\tc, ok := cacheSystems(ctx).Get(k)\n\tif ok {\n\t\t*s = c.(System)\n\t\tcacheSystems(ctx).Touch(k, zcache.DefaultExpiration)\n\t\treturn nil\n\t}\n\n\ts.Name = name\n\ts.Version = version\n\n\terr := zdb.Get(ctx, &s.ID,\n\t\t`select system_id from systems where name=$1 and version=$2`,\n\t\tname, version)\n\tif zdb.ErrNoRows(err) {\n\t\ts.ID, err = zdb.InsertID(ctx, \"system_id\",\n\t\t\t`insert into systems (name, version) values ($1, $2)`,\n\t\t\tname, version)\n\t}\n\tif err != nil {\n\t\treturn errors.Wrapf(err, \"System.GetOrInsert %q %q\", name, version)\n\t}\n\tcacheSystems(ctx).SetDefault(k, *s)\n\treturn nil\n}\n"
        },
        {
          "name": "user_agent_test.go",
          "type": "blob",
          "size": 2.3935546875,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"reflect\"\n\t\"strings\"\n\t\"testing\"\n\n\t. \"zgo.at/goatcounter/v2\"\n\t\"zgo.at/goatcounter/v2/gctest\"\n\t\"zgo.at/isbot\"\n\t\"zgo.at/zdb\"\n\t\"zgo.at/zstd/ztest\"\n)\n\nfunc TestUserAgentGetOrInsert(t *testing.T) {\n\tctx := gctest.DB(t)\n\n\ttest := func(gotUA, wantUA UserAgent, want string) {\n\t\tt.Helper()\n\n\t\tif !reflect.DeepEqual(gotUA, wantUA) {\n\t\t\tt.Fatalf(\"wrong ua\\ngot:  %#v\\nwant: %#v\", gotUA, wantUA)\n\t\t}\n\n\t\twant = strings.ReplaceAll(strings.TrimSpace(strings.ReplaceAll(want, \"\\t\", \"\")), \"@\", \" \")\n\t\tout := zdb.DumpString(ctx, `select browsers.name || ' ' || browsers.version as browser from browsers;`) +\n\t\t\tzdb.DumpString(ctx, `select systems.name  || ' ' || systems.version  as system  from systems;`)\n\t\tout = strings.ReplaceAll(out, \" \\n\", \"\\n\") // TODO: fix in zdb\n\t\tif d := ztest.Diff(out, want); d != \"\" {\n\t\t\tt.Error(d)\n\t\t}\n\t}\n\n\t{\n\t\tua := UserAgent{UserAgent: \"Mozilla/5.0 (X11; Linux x86_64; rv:79.0) Gecko/20100101 Firefox/79.0\"}\n\t\terr := ua.GetOrInsert(ctx)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\ttest(ua, UserAgent{UserAgent: ua.UserAgent, BrowserID: 1, SystemID: 1, Isbot: isbot.NoBotNoMatch}, `\n\t\t\tbrowser\n\t\t\tFirefox 79\n\t\t\tsystem\n\t\t\tLinux\n\t\t`)\n\t}\n\n\t{\n\t\tua := UserAgent{UserAgent: \"Mozilla/5.0 (X11; Linux x86_64; rv:79.0) Gecko/20100101 Firefox/79.0\"}\n\t\terr := ua.GetOrInsert(ctx)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\ttest(ua, UserAgent{UserAgent: ua.UserAgent, BrowserID: 1, SystemID: 1, Isbot: isbot.NoBotNoMatch}, `\n\t\t\tbrowser\n\t\t\tFirefox 79\n\t\t\tsystem\n\t\t\tLinux\n\t\t`)\n\t}\n\n\t{\n\t\tua := UserAgent{UserAgent: \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0\"}\n\t\terr := ua.GetOrInsert(ctx)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\ttest(ua, UserAgent{UserAgent: ua.UserAgent, BrowserID: 1, SystemID: 2, Isbot: isbot.NoBotNoMatch}, `\n\t\t\tbrowser\n\t\t\tFirefox 79\n\t\t\tsystem\n\t\t\tLinux\n\t\t\tWindows 10\n\t\t`)\n\t}\n\n\t{\n\t\tua := UserAgent{UserAgent: \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0\"}\n\t\terr := ua.GetOrInsert(ctx)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\ttest(ua, UserAgent{UserAgent: ua.UserAgent, BrowserID: 2, SystemID: 2, Isbot: isbot.NoBotNoMatch}, `\n\t\t\tbrowser\n\t\t\tFirefox 79\n\t\t\tFirefox 71\n\t\t\tsystem\n\t\t\tLinux\n\t\t\tWindows 10\n\t\t`)\n\t}\n}\n"
        },
        {
          "name": "user_test.go",
          "type": "blob",
          "size": 2.7119140625,
          "content": "// Copyright © Martin Tournoij – This file is part of GoatCounter and published\n// under the terms of a slightly modified EUPL v1.2 license, which can be found\n// in the LICENSE file or at https://license.goatcounter.com\n\npackage goatcounter_test\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"zgo.at/goatcounter/v2\"\n\t\"zgo.at/tz\"\n\t\"zgo.at/zstd/zint\"\n\t\"zgo.at/zstd/ztime\"\n)\n\nfunc TestUserEmailReportRange(t *testing.T) {\n\tnow := time.Date(2019, 6, 18, 14, 42, 0, 0, time.UTC)\n\tztime.Now = func() time.Time { return now }\n\tt.Cleanup(func() { ztime.Now = func() time.Time { return time.Now().UTC() } })\n\twita := tz.MustNew(\"\", \"Asia/Makassar\")\n\n\ttests := []struct {\n\t\tuser               goatcounter.User\n\t\twantStart, wantEnd time.Time\n\t}{\n\t\t{goatcounter.User{\n\t\t\tLastReportAt: now,\n\t\t\tSettings: goatcounter.UserSettings{\n\t\t\t\tEmailReports: zint.Int(goatcounter.EmailReportDaily),\n\t\t\t\tTimezone:     tz.UTC,\n\t\t\t},\n\t\t}, ztime.FromString(\"2019-06-18 00:00:00\"), ztime.FromString(\"2019-06-18 23:59:59\")},\n\t\t{goatcounter.User{\n\t\t\tLastReportAt: now,\n\t\t\tSettings: goatcounter.UserSettings{\n\t\t\t\tSundayStartsWeek: false,\n\t\t\t\tEmailReports:     zint.Int(goatcounter.EmailReportWeekly),\n\t\t\t\tTimezone:         tz.UTC,\n\t\t\t},\n\t\t}, ztime.FromString(\"2019-06-17 00:00:00\"), ztime.FromString(\"2019-06-23 23:59:59\")},\n\t\t{goatcounter.User{\n\t\t\tLastReportAt: now,\n\t\t\tSettings: goatcounter.UserSettings{\n\t\t\t\tSundayStartsWeek: true,\n\t\t\t\tEmailReports:     zint.Int(goatcounter.EmailReportWeekly),\n\t\t\t\tTimezone:         tz.UTC,\n\t\t\t},\n\t\t}, ztime.FromString(\"2019-06-16 00:00:00\"), ztime.FromString(\"2019-06-22 23:59:59\")},\n\t\t{goatcounter.User{\n\t\t\tLastReportAt: now,\n\t\t\tSettings: goatcounter.UserSettings{\n\t\t\t\tSundayStartsWeek: false,\n\t\t\t\tEmailReports:     zint.Int(goatcounter.EmailReportBiWeekly),\n\t\t\t\tTimezone:         tz.UTC,\n\t\t\t},\n\t\t}, ztime.FromString(\"2019-06-17 00:00:00\"), ztime.FromString(\"2019-06-30 23:59:59\")},\n\t\t{goatcounter.User{\n\t\t\tLastReportAt: now,\n\t\t\tSettings: goatcounter.UserSettings{\n\t\t\t\tSundayStartsWeek: true,\n\t\t\t\tEmailReports:     zint.Int(goatcounter.EmailReportBiWeekly),\n\t\t\t\tTimezone:         tz.UTC,\n\t\t\t},\n\t\t}, ztime.FromString(\"2019-06-16 00:00:00\"), ztime.FromString(\"2019-06-29 23:59:59\")},\n\n\t\t{goatcounter.User{\n\t\t\tLastReportAt: now,\n\t\t\tSettings: goatcounter.UserSettings{\n\t\t\t\tEmailReports: zint.Int(goatcounter.EmailReportDaily),\n\t\t\t\tTimezone:     wita,\n\t\t\t},\n\t\t}, ztime.FromString(\"2019-06-17 16:00:00\"), ztime.FromString(\"2019-06-18 15:59:59\")},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\trng := tt.user.EmailReportRange()\n\t\t\tif !rng.Start.Equal(tt.wantStart) {\n\t\t\t\tt.Errorf(\"start wrong\\nwant: %s\\nhave: %s\\n\", tt.wantStart, rng.Start)\n\t\t\t}\n\t\t\tif !rng.End.Equal(tt.wantEnd) {\n\t\t\t\tt.Errorf(\"end wrong\\nwant: %s\\nhave: %s\\n\", tt.wantEnd, rng.End)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "widgets",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}