{
  "metadata": {
    "timestamp": 1736567382786,
    "page": 989,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ulule/limiter",
      "stars": 2145,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.060546875,
          "content": "# Circle CI directory\n.circleci\n\n# Example directory\nexamples\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3369140625,
          "content": "root = true\n\n[*]\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace  = true\ninsert_final_newline = true\ncharset = utf-8\n\n[*.{yml,yaml}]\nindent_size = 2\n\n[*.go]\nindent_size = 8\nindent_style = tab\n\n[*.json]\nindent_size = 4\nindent_style = space\n\n[Makefile]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "/vendor\n.idea\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 1.15234375,
          "content": "run:\n  concurrency: 4\n  deadline: 1m\n  issues-exit-code: 1\n  tests: true\n\n\noutput:\n  format: colored-line-number\n  print-issued-lines: true\n  print-linter-name: true\n\n\nlinters-settings:\n  errcheck:\n    check-type-assertions: false\n    check-blank: false\n  govet:\n    check-shadowing: false\n    use-installed-packages: false\n  golint:\n    min-confidence: 0.8\n  gofmt:\n    simplify: true\n  gocyclo:\n    min-complexity: 10\n  maligned:\n    suggest-new: true\n  dupl:\n    threshold: 80\n  goconst:\n    min-len: 3\n    min-occurrences: 3\n  misspell:\n    locale: US\n  lll:\n    line-length: 140\n  unused:\n    check-exported: false\n  unparam:\n    algo: cha\n    check-exported: false\n  nakedret:\n    max-func-lines: 30\n\nlinters:\n  enable:\n    - megacheck\n    - govet\n    - errcheck\n    - gas\n    - structcheck\n    - varcheck\n    - ineffassign\n    - deadcode\n    - typecheck\n    - unconvert\n    - gocyclo\n    - gofmt\n    - misspell\n    - lll\n    - nakedret\n  enable-all: false\n  disable:\n    - depguard\n    - prealloc\n    - dupl\n    - maligned\n  disable-all: false\n\n\nissues:\n  exclude-use-default: false\n  max-per-linter: 1024\n  max-same: 1024\n  exclude:\n    - \"G304\"\n    - \"G101\"\n    - \"G104\"\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.1318359375,
          "content": "Primary contributors:\n\n    Gilles FABIO <gilles@ulule.com>\n    Florent MESSA <florent@ulule.com>\n    Thomas LE ROUX <thomas@leroux.io>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2018 Ulule\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.064453125,
          "content": ".PHONY: test lint\n\ntest:\n\t@(scripts/test)\n\nlint:\n\t@(scripts/lint)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.357421875,
          "content": "# Limiter\n\n[![Documentation][godoc-img]][godoc-url]\n![License][license-img]\n[![Build Status][circle-img]][circle-url]\n[![Go Report Card][goreport-img]][goreport-url]\n\n_Dead simple rate limit middleware for Go._\n\n- Simple API\n- \"Store\" approach for backend\n- Redis support (but not tied too)\n- Middlewares: HTTP, [FastHTTP][6] and [Gin][4]\n\n## Installation\n\nUsing [Go Modules](https://github.com/golang/go/wiki/Modules)\n\n```bash\n$ go get github.com/ulule/limiter/v3@v3.11.2\n```\n\n## Usage\n\nIn five steps:\n\n- Create a `limiter.Rate` instance _(the number of requests per period)_\n- Create a `limiter.Store` instance _(see [Redis](https://github.com/ulule/limiter/blob/master/drivers/store/redis/store.go) or [In-Memory](https://github.com/ulule/limiter/blob/master/drivers/store/memory/store.go))_\n- Create a `limiter.Limiter` instance that takes store and rate instances as arguments\n- Create a middleware instance using the middleware of your choice\n- Give the limiter instance to your middleware initializer\n\n**Example:**\n\n```go\n// Create a rate with the given limit (number of requests) for the given\n// period (a time.Duration of your choice).\nimport \"github.com/ulule/limiter/v3\"\n\nrate := limiter.Rate{\n    Period: 1 * time.Hour,\n    Limit:  1000,\n}\n\n// You can also use the simplified format \"<limit>-<period>\"\", with the given\n// periods:\n//\n// * \"S\": second\n// * \"M\": minute\n// * \"H\": hour\n// * \"D\": day\n//\n// Examples:\n//\n// * 5 reqs/second: \"5-S\"\n// * 10 reqs/minute: \"10-M\"\n// * 1000 reqs/hour: \"1000-H\"\n// * 2000 reqs/day: \"2000-D\"\n//\nrate, err := limiter.NewRateFromFormatted(\"1000-H\")\nif err != nil {\n    panic(err)\n}\n\n// Then, create a store. Here, we use the bundled Redis store. Any store\n// compliant to limiter.Store interface will do the job. The defaults are\n// \"limiter\" as Redis key prefix and a maximum of 3 retries for the key under\n// race condition.\nimport \"github.com/ulule/limiter/v3/drivers/store/redis\"\n\nstore, err := redis.NewStore(client)\nif err != nil {\n    panic(err)\n}\n\n// Alternatively, you can pass options to the store with the \"WithOptions\"\n// function. For example, for Redis store:\nimport \"github.com/ulule/limiter/v3/drivers/store/redis\"\n\nstore, err := redis.NewStoreWithOptions(pool, limiter.StoreOptions{\n    Prefix:   \"your_own_prefix\",\n})\nif err != nil {\n    panic(err)\n}\n\n// Or use a in-memory store with a goroutine which clears expired keys.\nimport \"github.com/ulule/limiter/v3/drivers/store/memory\"\n\nstore := memory.NewStore()\n\n// Then, create the limiter instance which takes the store and the rate as arguments.\n// Now, you can give this instance to any supported middleware.\ninstance := limiter.New(store, rate)\n\n// Alternatively, you can pass options to the limiter instance with several options.\ninstance := limiter.New(store, rate, limiter.WithClientIPHeader(\"True-Client-IP\"), limiter.WithIPv6Mask(mask))\n\n// Finally, give the limiter instance to your middleware initializer.\nimport \"github.com/ulule/limiter/v3/drivers/middleware/stdlib\"\n\nmiddleware := stdlib.NewMiddleware(instance)\n```\n\nSee middleware examples:\n\n- [HTTP](https://github.com/ulule/limiter-examples/tree/master/http/main.go)\n- [Gin](https://github.com/ulule/limiter-examples/tree/master/gin/main.go)\n- [Beego](https://github.com/ulule/limiter-examples/blob/master//beego/main.go)\n- [Chi](https://github.com/ulule/limiter-examples/tree/master/chi/main.go)\n- [Echo](https://github.com/ulule/limiter-examples/tree/master/echo/main.go)\n- [Fasthttp](https://github.com/ulule/limiter-examples/tree/master/fasthttp/main.go)\n\n## How it works\n\nThe ip address of the request is used as a key in the store.\n\nIf the key does not exist in the store we set a default\nvalue with an expiration period.\n\nYou will find two stores:\n\n- Redis: rely on [TTL](http://redis.io/commands/ttl) and incrementing the rate limit on each request.\n- In-Memory: rely on a fork of [go-cache](https://github.com/patrickmn/go-cache) with a goroutine to clear expired keys using a default interval.\n\nWhen the limit is reached, a `429` HTTP status code is sent.\n\n## Limiter behind a reverse proxy\n\n### Introduction\n\nIf your limiter is behind a reverse proxy, it could be difficult to obtain the \"real\" client IP.\n\nSome reverse proxies, like AWS ALB, lets all header values through that it doesn't set itself.\nLike for example, `True-Client-IP` and `X-Real-IP`.\nSimilarly, `X-Forwarded-For` is a list of comma-separated IPs that gets appended to by each traversed proxy.\nThe idea is that the first IP _(added by the first proxy)_ is the true client IP. Each subsequent IP is another proxy along the path.\n\nAn attacker can spoof either of those headers, which could be reported as a client IP.\n\nBy default, limiter doesn't trust any of those headers: you have to explicitly enable them in order to use them.\nIf you enable them, **you must always be aware** that any header added by any _(reverse)_ proxy not controlled\nby you **are completely unreliable.**\n\n### X-Forwarded-For\n\nFor example, if you make this request to your load balancer:\n```bash\ncurl -X POST https://example.com/login -H \"X-Forwarded-For: 1.2.3.4, 11.22.33.44\"\n```\n\nAnd your server behind the load balancer obtain this:\n```\nX-Forwarded-For: 1.2.3.4, 11.22.33.44, <actual client IP>\n```\n\nThat's mean you can't use `X-Forwarded-For` header, because it's **unreliable** and **untrustworthy**.\nSo keep `TrustForwardHeader` disabled in your limiter option.\n\nHowever, if you have configured your reverse proxy to always remove/overwrite `X-Forwarded-For` and/or `X-Real-IP` headers\nso that if you execute this _(same)_ request:\n```bash\ncurl -X POST https://example.com/login -H \"X-Forwarded-For: 1.2.3.4, 11.22.33.44\"\n```\n\nAnd your server behind the load balancer obtain this:\n```\nX-Forwarded-For: <actual client IP>\n```\n\nThen, you can enable `TrustForwardHeader` in your limiter option.\n\n### Custom header\n\nMany CDN and Cloud providers add a custom header to define the client IP. Like for example, this non exhaustive list:\n\n* `Fastly-Client-IP` from Fastly\n* `CF-Connecting-IP` from Cloudflare\n* `X-Azure-ClientIP` from Azure\n\nYou can use these headers using `ClientIPHeader` in your limiter option.\n\n### None of the above\n\nIf none of the above solution are working, please use a custom `KeyGetter` in your middleware.\n\nYou can use this excellent article to help you define the best strategy depending on your network topology and your security need:\nhttps://adam-p.ca/blog/2022/03/x-forwarded-for/\n\nIf you have any idea/suggestions on how we could simplify this steps, don't hesitate to raise an issue.\nWe would like some feedback on how we could implement this steps in the Limiter API.\n\nThank you.\n\n## Why Yet Another Package\n\nYou could ask us: why yet another rate limit package?\n\nBecause existing packages did not suit our needs.\n\nWe tried a lot of alternatives:\n\n1. [Throttled][1]. This package uses the generic cell-rate algorithm. To cite the\n   documentation: _\"The algorithm has been slightly modified from its usual form to\n   support limiting with an additional quantity parameter, such as for limiting the\n   number of bytes uploaded\"_. It is brilliant in term of algorithm but\n   documentation is quite unclear at the moment, we don't need _burst_ feature for\n   now, impossible to get a correct `After-Retry` (when limit exceeds, we can still\n   make a few requests, because of the max burst) and it only supports `http.Handler`\n   middleware (we use [Gin][4]). Currently, we only need to return `429`\n   and `X-Ratelimit-*` headers for `n reqs/duration`.\n\n2. [Speedbump][3]. Good package but maybe too lightweight. No `Reset` support,\n   only one middleware for [Gin][4] framework and too Redis-coupled. We rather\n   prefer to use a \"store\" approach.\n\n3. [Tollbooth][5]. Good one too but does both too much and too little. It limits by\n   remote IP, path, methods, custom headers and basic auth usernames... but does not\n   provide any Redis support (only _in-memory_) and a ready-to-go middleware that sets\n   `X-Ratelimit-*` headers. `tollbooth.LimitByRequest(limiter, r)` only returns an HTTP\n   code.\n\n4. [ratelimit][2]. Probably the closer to our needs but, once again, too\n   lightweight, no middleware available and not active (last commit was in August\n   2014). Some parts of code (Redis) comes from this project. It should deserve much\n   more love.\n\nThere are other many packages on GitHub but most are either too lightweight, too\nold (only support old Go versions) or unmaintained. So that's why we decided to\ncreate yet another one.\n\n## Contributing\n\n- Ping us on twitter:\n  - [@oibafsellig](https://twitter.com/oibafsellig)\n  - [@thoas](https://twitter.com/thoas)\n  - [@novln\\_](https://twitter.com/novln_)\n- Fork the [project](https://github.com/ulule/limiter)\n- Fix [bugs](https://github.com/ulule/limiter/issues)\n\nDon't hesitate ;)\n\n[1]: https://github.com/throttled/throttled\n[2]: https://github.com/r8k/ratelimit\n[3]: https://github.com/etcinit/speedbump\n[4]: https://github.com/gin-gonic/gin\n[5]: https://github.com/didip/tollbooth\n[6]: https://github.com/valyala/fasthttp\n[godoc-url]: https://pkg.go.dev/github.com/ulule/limiter/v3\n[godoc-img]: https://pkg.go.dev/badge/github.com/ulule/limiter/v3\n[license-img]: https://img.shields.io/badge/license-MIT-blue.svg\n[goreport-url]: https://goreportcard.com/report/github.com/ulule/limiter\n[goreport-img]: https://goreportcard.com/badge/github.com/ulule/limiter\n[circle-url]: https://circleci.com/gh/ulule/limiter/tree/master\n[circle-img]: https://circleci.com/gh/ulule/limiter.svg?style=shield&circle-token=baf62ec320dd871b3a4a7e67fa99530fbc877c99\n"
        },
        {
          "name": "defaults.go",
          "type": "blob",
          "size": 0.3994140625,
          "content": "package limiter\n\nimport \"time\"\n\nconst (\n\t// DefaultPrefix is the default prefix to use for the key in the store.\n\tDefaultPrefix = \"limiter\"\n\n\t// DefaultMaxRetry is the default maximum number of key retries under\n\t// race condition (mainly used with database-based stores).\n\tDefaultMaxRetry = 3\n\n\t// DefaultCleanUpInterval is the default time duration for cleanup.\n\tDefaultCleanUpInterval = 30 * time.Second\n)\n"
        },
        {
          "name": "drivers",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.9091796875,
          "content": "module github.com/ulule/limiter/v3\n\ngo 1.17\n\nrequire (\n\tgithub.com/gin-gonic/gin v1.9.1\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/redis/go-redis/v9 v9.6.2\n\tgithub.com/stretchr/testify v1.8.4\n\tgithub.com/valyala/fasthttp v1.50.0\n)\n\nrequire (\n\tgithub.com/andybalholm/brotli v1.0.5 // indirect\n\tgithub.com/bytedance/sonic v1.9.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.2.0 // indirect\n\tgithub.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect\n\tgithub.com/gabriel-vasile/mimetype v1.4.2 // indirect\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\n\tgithub.com/go-playground/locales v0.14.1 // indirect\n\tgithub.com/go-playground/universal-translator v0.18.1 // indirect\n\tgithub.com/go-playground/validator/v10 v10.14.0 // indirect\n\tgithub.com/goccy/go-json v0.10.2 // indirect\n\tgithub.com/google/go-cmp v0.5.6 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/klauspost/compress v1.16.3 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.4 // indirect\n\tgithub.com/leodido/go-urn v1.2.4 // indirect\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.0.8 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/twitchyliquid64/golang-asm v0.15.1 // indirect\n\tgithub.com/ugorji/go/codec v1.2.11 // indirect\n\tgithub.com/valyala/bytebufferpool v1.0.0 // indirect\n\tgolang.org/x/arch v0.3.0 // indirect\n\tgolang.org/x/crypto v0.21.0 // indirect\n\tgolang.org/x/net v0.23.0 // indirect\n\tgolang.org/x/sys v0.18.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n\tgolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 // indirect\n\tgoogle.golang.org/protobuf v1.33.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 13.865234375,
          "content": "github.com/andybalholm/brotli v1.0.5 h1:8uQZIdzKmjc/iuPu7O2ioW48L81FgatrcpfFmiq/cCs=\ngithub.com/andybalholm/brotli v1.0.5/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=\ngithub.com/bsm/ginkgo/v2 v2.12.0 h1:Ny8MWAHyOepLGlLKYmXG4IEkioBysk6GpaRTLC8zwWs=\ngithub.com/bsm/ginkgo/v2 v2.12.0/go.mod h1:SwYbGRRDovPVboqFv0tPTcG1sN61LM1Z4ARdbAV9g4c=\ngithub.com/bsm/gomega v1.27.10 h1:yeMWxP2pV2fG3FgAODIY8EiRE3dy0aeFYt4l7wh6yKA=\ngithub.com/bsm/gomega v1.27.10/go.mod h1:JyEr/xRbxbtgWNi8tIEVPUYZ5Dzef52k01W3YH0H+O0=\ngithub.com/bytedance/sonic v1.5.0/go.mod h1:ED5hyg4y6t3/9Ku1R6dU/4KyJ48DZ4jPhfY1O2AihPM=\ngithub.com/bytedance/sonic v1.9.1 h1:6iJ6NqdoxCDr6mbY8h18oSO+cShGSMRGCEo7F2h0x8s=\ngithub.com/bytedance/sonic v1.9.1/go.mod h1:i736AoUSYt75HyZLoJW9ERYxcy6eaN6h4BZXU064P/U=\ngithub.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=\ngithub.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/chenzhuoyu/base64x v0.0.0-20211019084208-fb5309c8db06/go.mod h1:DH46F32mSOjUmXrMHnKwZdA8wcEefY7UVqBKYGjpdQY=\ngithub.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 h1:qSGYFH7+jGhDF8vLC+iwCD4WpbV1EBDSzWkJODFLams=\ngithub.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311/go.mod h1:b583jCggY9gE99b6G5LEC39OIiVsWj+R97kbl5odCEk=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f h1:lO4WD4F/rVNCu3HqELle0jiPLLBs70cWOduZpkS1E78=\ngithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f/go.mod h1:cuUVRXasLTGF7a8hSLbxyZXjz+1KgoB3wDUb6vlszIc=\ngithub.com/gabriel-vasile/mimetype v1.4.2 h1:w5qFW6JKBz9Y393Y4q372O9A7cUSequkh1Q7OhCmWKU=\ngithub.com/gabriel-vasile/mimetype v1.4.2/go.mod h1:zApsH/mKG4w07erKIaJPFiX0Tsq9BFQgN3qGY5GnNgA=\ngithub.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=\ngithub.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=\ngithub.com/gin-gonic/gin v1.9.1 h1:4idEAncQnU5cB7BeOkPtxjfCSye0AAm1R0RVIqJ+Jmg=\ngithub.com/gin-gonic/gin v1.9.1/go.mod h1:hPrL7YrpYKXt5YId3A/Tnip5kqbEAP+KLuI3SUcPTeU=\ngithub.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=\ngithub.com/go-playground/assert/v2 v2.2.0/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=\ngithub.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=\ngithub.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=\ngithub.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=\ngithub.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=\ngithub.com/go-playground/validator/v10 v10.14.0 h1:vgvQWe3XCz3gIeFDm/HnTIbj6UGmg/+t63MyGU2n5js=\ngithub.com/go-playground/validator/v10 v10.14.0/go.mod h1:9iXMNT7sEkjXb0I+enO7QXmzG6QCsPWY4zveKFVRSyU=\ngithub.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=\ngithub.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6 h1:BKbKCqvP6I+rmFHt06ZmyQtvB8xAkWdhFyr0ZUNZcxQ=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/klauspost/compress v1.16.3 h1:XuJt9zzcnaz6a16/OU53ZjWp/v7/42WcR5t2a0PcNQY=\ngithub.com/klauspost/compress v1.16.3/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=\ngithub.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.2.4 h1:acbojRNwl3o09bUq+yDCtZFc1aiwaAAxtcn8YkZXnvk=\ngithub.com/klauspost/cpuid/v2 v2.2.4/go.mod h1:RVVoqg1df56z8g3pUjL/3lE5UfnlrJX8tyFgg4nqhuY=\ngithub.com/leodido/go-urn v1.2.4 h1:XlAE/cm/ms7TE/VMVoduSpNBoyc2dOxHs5MZSwAN63Q=\ngithub.com/leodido/go-urn v1.2.4/go.mod h1:7ZrI8mTSeBSHl/UaRyKQW1qZeMgak41ANeCNaVckg+4=\ngithub.com/mattn/go-isatty v0.0.19 h1:JITubQf0MOLdlGRuRq+jtsDlekdYPia9ZFsB8h/APPA=\ngithub.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/pelletier/go-toml/v2 v2.0.8 h1:0ctb6s9mE31h0/lhu+J6OPmVeDxJn+kYnJc2jZR9tGQ=\ngithub.com/pelletier/go-toml/v2 v2.0.8/go.mod h1:vuYfssBdrU2XDZ9bYydBu6t+6a6PYNcZljzZR9VXg+4=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/redis/go-redis/v9 v9.6.2 h1:w0uvkRbc9KpgD98zcvo5IrVUsn0lXpRMuhNgiHDJzdk=\ngithub.com/redis/go-redis/v9 v9.6.2/go.mod h1:0C0c6ycQsdpVNQpxb1njEQIqkx5UcsM8FJCQLgE9+RA=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.3/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=\ngithub.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=\ngithub.com/ugorji/go/codec v1.2.11 h1:BMaWp1Bb6fHwEtbplGBGJ498wD+LKlNSl25MjdZY4dU=\ngithub.com/ugorji/go/codec v1.2.11/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=\ngithub.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=\ngithub.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=\ngithub.com/valyala/fasthttp v1.50.0 h1:H7fweIlBm0rXLs2q0XbalvJ6r0CUPFWK3/bB4N13e9M=\ngithub.com/valyala/fasthttp v1.50.0/go.mod h1:k2zXd82h/7UZc3VOdJ2WaUqt1uZ/XpXAfE9i+HBC3lA=\ngithub.com/valyala/tcplisten v1.0.0/go.mod h1:T0xQ8SeCZGxckz9qRXTfG43PvQ/mcWh7FwZEA7Ioqkc=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/arch v0.0.0-20210923205945-b76863e36670/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=\ngolang.org/x/arch v0.3.0 h1:02VY4/ZcO/gBOH6PUaoiptASxtXU10jazRCP865E97k=\ngolang.org/x/arch v0.3.0/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.7.0/go.mod h1:pYwdfH91IfpZVANVyUOhSIPZaFoJGxTFbZhFTx+dXZU=\ngolang.org/x/crypto v0.9.0/go.mod h1:yrmDGqONDYtNj3tH8X9dzUun2m2lzPa9ngI6/RUPGR0=\ngolang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\ngolang.org/x/crypto v0.21.0 h1:X31++rzVUdKhX5sWmSOFZxx8UW/ldWx55cbf08iNAMA=\ngolang.org/x/crypto v0.21.0/go.mod h1:0BP7YvVV9gBbVKyeTG0Gyn+gZm94bibOW5BjDEYAOMs=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.8.0/go.mod h1:QVkue5JL9kW//ek3r6jTKnTFis1tRmNAW2P1shuFdJc=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\ngolang.org/x/net v0.23.0 h1:7EYJ93RZ9vYSZAIb2x3lnuvqO5zneoD6IvWjuhfxjTs=\ngolang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220704084225-05e143d24a9e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.6.0/go.mod h1:m6U89DPEgQRMq3DNkDClhWw02AUbt2daBVO4cn4Hv9U=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.18.0/go.mod h1:ILwASektA3OnRv7amZ1xhE/KTR+u50pbXfZ03+6Nx58=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.8.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.30.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nrsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "limiter.go",
          "type": "blob",
          "size": 1.7314453125,
          "content": "package limiter\n\nimport (\n\t\"context\"\n)\n\n// -----------------------------------------------------------------\n// Context\n// -----------------------------------------------------------------\n\n// Context is the limit context.\ntype Context struct {\n\tLimit     int64\n\tRemaining int64\n\tReset     int64\n\tReached   bool\n}\n\n// -----------------------------------------------------------------\n// Limiter\n// -----------------------------------------------------------------\n\n// Limiter is the limiter instance.\ntype Limiter struct {\n\tStore   Store\n\tRate    Rate\n\tOptions Options\n}\n\n// New returns an instance of Limiter.\nfunc New(store Store, rate Rate, options ...Option) *Limiter {\n\topt := Options{\n\t\tIPv4Mask:           DefaultIPv4Mask,\n\t\tIPv6Mask:           DefaultIPv6Mask,\n\t\tTrustForwardHeader: false,\n\t}\n\tfor _, o := range options {\n\t\to(&opt)\n\t}\n\treturn &Limiter{\n\t\tStore:   store,\n\t\tRate:    rate,\n\t\tOptions: opt,\n\t}\n}\n\n// Get returns the limit for given identifier.\nfunc (limiter *Limiter) Get(ctx context.Context, key string) (Context, error) {\n\treturn limiter.Store.Get(ctx, key, limiter.Rate)\n}\n\n// Peek returns the limit for given identifier, without modification on current values.\nfunc (limiter *Limiter) Peek(ctx context.Context, key string) (Context, error) {\n\treturn limiter.Store.Peek(ctx, key, limiter.Rate)\n}\n\n// Reset sets the limit for given identifier to zero.\nfunc (limiter *Limiter) Reset(ctx context.Context, key string) (Context, error) {\n\treturn limiter.Store.Reset(ctx, key, limiter.Rate)\n}\n\n// Increment increments the limit by given count & gives back the new limit for given identifier\nfunc (limiter *Limiter) Increment(ctx context.Context, key string, count int64) (Context, error) {\n\treturn limiter.Store.Increment(ctx, key, count, limiter.Rate)\n}\n"
        },
        {
          "name": "limiter_test.go",
          "type": "blob",
          "size": 0.322265625,
          "content": "package limiter_test\n\nimport (\n\t\"time\"\n\n\t\"github.com/ulule/limiter/v3\"\n\t\"github.com/ulule/limiter/v3/drivers/store/memory\"\n)\n\nfunc New(options ...limiter.Option) *limiter.Limiter {\n\tstore := memory.NewStore()\n\trate := limiter.Rate{\n\t\tPeriod: 1 * time.Second,\n\t\tLimit:  int64(10),\n\t}\n\treturn limiter.New(store, rate, options...)\n}\n"
        },
        {
          "name": "network.go",
          "type": "blob",
          "size": 4.2490234375,
          "content": "package limiter\n\nimport (\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nvar (\n\t// DefaultIPv4Mask defines the default IPv4 mask used to obtain user IP.\n\tDefaultIPv4Mask = net.CIDRMask(32, 32)\n\t// DefaultIPv6Mask defines the default IPv6 mask used to obtain user IP.\n\tDefaultIPv6Mask = net.CIDRMask(128, 128)\n)\n\n// GetIP returns IP address from request.\n// If options is defined and either TrustForwardHeader is true or ClientIPHeader is defined,\n// it will lookup IP in HTTP headers.\n// Please be advised that using this option could be insecure (ie: spoofed) if your reverse\n// proxy is not configured properly to forward a trustworthy client IP.\n// Please read the section \"Limiter behind a reverse proxy\" in the README for further information.\nfunc (limiter *Limiter) GetIP(r *http.Request) net.IP {\n\treturn GetIP(r, limiter.Options)\n}\n\n// GetIPWithMask returns IP address from request by applying a mask.\n// If options is defined and either TrustForwardHeader is true or ClientIPHeader is defined,\n// it will lookup IP in HTTP headers.\n// Please be advised that using this option could be insecure (ie: spoofed) if your reverse\n// proxy is not configured properly to forward a trustworthy client IP.\n// Please read the section \"Limiter behind a reverse proxy\" in the README for further information.\nfunc (limiter *Limiter) GetIPWithMask(r *http.Request) net.IP {\n\treturn GetIPWithMask(r, limiter.Options)\n}\n\n// GetIPKey extracts IP from request and returns hashed IP to use as store key.\n// If options is defined and either TrustForwardHeader is true or ClientIPHeader is defined,\n// it will lookup IP in HTTP headers.\n// Please be advised that using this option could be insecure (ie: spoofed) if your reverse\n// proxy is not configured properly to forward a trustworthy client IP.\n// Please read the section \"Limiter behind a reverse proxy\" in the README for further information.\nfunc (limiter *Limiter) GetIPKey(r *http.Request) string {\n\treturn limiter.GetIPWithMask(r).String()\n}\n\n// GetIP returns IP address from request.\n// If options is defined and either TrustForwardHeader is true or ClientIPHeader is defined,\n// it will lookup IP in HTTP headers.\n// Please be advised that using this option could be insecure (ie: spoofed) if your reverse\n// proxy is not configured properly to forward a trustworthy client IP.\n// Please read the section \"Limiter behind a reverse proxy\" in the README for further information.\nfunc GetIP(r *http.Request, options ...Options) net.IP {\n\tif len(options) >= 1 {\n\t\tif options[0].ClientIPHeader != \"\" {\n\t\t\tip := getIPFromHeader(r, options[0].ClientIPHeader)\n\t\t\tif ip != nil {\n\t\t\t\treturn ip\n\t\t\t}\n\t\t}\n\t\tif options[0].TrustForwardHeader {\n\t\t\tip := getIPFromXFFHeader(r)\n\t\t\tif ip != nil {\n\t\t\t\treturn ip\n\t\t\t}\n\n\t\t\tip = getIPFromHeader(r, \"X-Real-IP\")\n\t\t\tif ip != nil {\n\t\t\t\treturn ip\n\t\t\t}\n\t\t}\n\t}\n\n\tremoteAddr := strings.TrimSpace(r.RemoteAddr)\n\thost, _, err := net.SplitHostPort(remoteAddr)\n\tif err != nil {\n\t\treturn net.ParseIP(remoteAddr)\n\t}\n\n\treturn net.ParseIP(host)\n}\n\n// GetIPWithMask returns IP address from request by applying a mask.\n// If options is defined and either TrustForwardHeader is true or ClientIPHeader is defined,\n// it will lookup IP in HTTP headers.\n// Please be advised that using this option could be insecure (ie: spoofed) if your reverse\n// proxy is not configured properly to forward a trustworthy client IP.\n// Please read the section \"Limiter behind a reverse proxy\" in the README for further information.\nfunc GetIPWithMask(r *http.Request, options ...Options) net.IP {\n\tif len(options) == 0 {\n\t\treturn GetIP(r)\n\t}\n\n\tip := GetIP(r, options[0])\n\tif ip.To4() != nil {\n\t\treturn ip.Mask(options[0].IPv4Mask)\n\t}\n\tif ip.To16() != nil {\n\t\treturn ip.Mask(options[0].IPv6Mask)\n\t}\n\treturn ip\n}\n\nfunc getIPFromXFFHeader(r *http.Request) net.IP {\n\theaders := r.Header.Values(\"X-Forwarded-For\")\n\tif len(headers) == 0 {\n\t\treturn nil\n\t}\n\n\tparts := []string{}\n\tfor _, header := range headers {\n\t\tparts = append(parts, strings.Split(header, \",\")...)\n\t}\n\n\tfor i := range parts {\n\t\tpart := strings.TrimSpace(parts[i])\n\t\tip := net.ParseIP(part)\n\t\tif ip != nil {\n\t\t\treturn ip\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc getIPFromHeader(r *http.Request, name string) net.IP {\n\theader := strings.TrimSpace(r.Header.Get(name))\n\tif header == \"\" {\n\t\treturn nil\n\t}\n\n\tip := net.ParseIP(header)\n\tif ip != nil {\n\t\treturn ip\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "network_test.go",
          "type": "blob",
          "size": 4.8349609375,
          "content": "package limiter_test\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/ulule/limiter/v3\"\n)\n\nfunc TestGetIP(t *testing.T) {\n\tis := require.New(t)\n\n\tlimiter1 := New(limiter.WithTrustForwardHeader(false))\n\tlimiter2 := New(limiter.WithTrustForwardHeader(true))\n\tlimiter3 := New(limiter.WithIPv4Mask(net.CIDRMask(24, 32)))\n\tlimiter4 := New(limiter.WithIPv6Mask(net.CIDRMask(48, 128)))\n\n\trequest1 := &http.Request{\n\t\tURL:        &url.URL{Path: \"/\"},\n\t\tHeader:     http.Header{},\n\t\tRemoteAddr: \"8.8.8.8:8888\",\n\t}\n\n\trequest2 := &http.Request{\n\t\tURL:        &url.URL{Path: \"/foo\"},\n\t\tHeader:     http.Header{},\n\t\tRemoteAddr: \"8.8.8.8:8888\",\n\t}\n\trequest2.Header.Add(\"X-Forwarded-For\", \"9.9.9.9, 7.7.7.7, 6.6.6.6\")\n\n\trequest3 := &http.Request{\n\t\tURL:        &url.URL{Path: \"/bar\"},\n\t\tHeader:     http.Header{},\n\t\tRemoteAddr: \"8.8.8.8:8888\",\n\t}\n\trequest3.Header.Add(\"X-Real-IP\", \"6.6.6.6\")\n\n\trequest4 := &http.Request{\n\t\tURL:        &url.URL{Path: \"/\"},\n\t\tHeader:     http.Header{},\n\t\tRemoteAddr: \"[2001:db8:cafe:1234:beef::fafa]:8888\",\n\t}\n\n\tscenarios := []struct {\n\t\trequest  *http.Request\n\t\tlimiter  *limiter.Limiter\n\t\texpected net.IP\n\t}{\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #1 : RemoteAddr without proxy.\n\t\t\t//\n\t\t\trequest:  request1,\n\t\t\tlimiter:  limiter1,\n\t\t\texpected: net.ParseIP(\"8.8.8.8\").To4(),\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #2 : X-Forwarded-For without proxy.\n\t\t\t//\n\t\t\trequest:  request2,\n\t\t\tlimiter:  limiter1,\n\t\t\texpected: net.ParseIP(\"8.8.8.8\").To4(),\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #3 : X-Real-IP without proxy.\n\t\t\t//\n\t\t\trequest:  request3,\n\t\t\tlimiter:  limiter1,\n\t\t\texpected: net.ParseIP(\"8.8.8.8\").To4(),\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #4 : RemoteAddr with proxy.\n\t\t\t//\n\t\t\trequest:  request1,\n\t\t\tlimiter:  limiter2,\n\t\t\texpected: net.ParseIP(\"8.8.8.8\").To4(),\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #5 : X-Forwarded-For with proxy.\n\t\t\t//\n\t\t\trequest:  request2,\n\t\t\tlimiter:  limiter2,\n\t\t\texpected: net.ParseIP(\"9.9.9.9\").To4(),\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #6 : X-Real-IP with proxy.\n\t\t\t//\n\t\t\trequest:  request3,\n\t\t\tlimiter:  limiter2,\n\t\t\texpected: net.ParseIP(\"6.6.6.6\").To4(),\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #7 : IPv4 with mask.\n\t\t\t//\n\t\t\trequest:  request1,\n\t\t\tlimiter:  limiter3,\n\t\t\texpected: net.ParseIP(\"8.8.8.0\").To4(),\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #8 : IPv6 with mask.\n\t\t\t//\n\t\t\trequest:  request4,\n\t\t\tlimiter:  limiter4,\n\t\t\texpected: net.ParseIP(\"2001:db8:cafe::\").To16(),\n\t\t},\n\t}\n\n\tfor i, scenario := range scenarios {\n\t\tmessage := fmt.Sprintf(\"Scenario #%d\", (i + 1))\n\t\tip := scenario.limiter.GetIPWithMask(scenario.request)\n\t\tis.Equal(scenario.expected, ip, message)\n\t}\n}\n\nfunc TestGetIPKey(t *testing.T) {\n\tis := require.New(t)\n\n\tlimiter1 := New(limiter.WithTrustForwardHeader(false))\n\tlimiter2 := New(limiter.WithTrustForwardHeader(true))\n\tlimiter3 := New(limiter.WithIPv4Mask(net.CIDRMask(24, 32)))\n\tlimiter4 := New(limiter.WithIPv6Mask(net.CIDRMask(48, 128)))\n\n\trequest1 := &http.Request{\n\t\tURL:        &url.URL{Path: \"/\"},\n\t\tHeader:     http.Header{},\n\t\tRemoteAddr: \"8.8.8.8:8888\",\n\t}\n\n\trequest2 := &http.Request{\n\t\tURL:        &url.URL{Path: \"/foo\"},\n\t\tHeader:     http.Header{},\n\t\tRemoteAddr: \"8.8.8.8:8888\",\n\t}\n\trequest2.Header.Add(\"X-Forwarded-For\", \"9.9.9.9, 7.7.7.7, 6.6.6.6\")\n\n\trequest3 := &http.Request{\n\t\tURL:        &url.URL{Path: \"/bar\"},\n\t\tHeader:     http.Header{},\n\t\tRemoteAddr: \"8.8.8.8:8888\",\n\t}\n\trequest3.Header.Add(\"X-Real-IP\", \"6.6.6.6\")\n\n\trequest4 := &http.Request{\n\t\tURL:        &url.URL{Path: \"/\"},\n\t\tHeader:     http.Header{},\n\t\tRemoteAddr: \"[2001:db8:cafe:1234:beef::fafa]:8888\",\n\t}\n\n\tscenarios := []struct {\n\t\trequest  *http.Request\n\t\tlimiter  *limiter.Limiter\n\t\texpected string\n\t}{\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #1 : RemoteAddr without proxy.\n\t\t\t//\n\t\t\trequest:  request1,\n\t\t\tlimiter:  limiter1,\n\t\t\texpected: \"8.8.8.8\",\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #2 : X-Forwarded-For without proxy.\n\t\t\t//\n\t\t\trequest:  request2,\n\t\t\tlimiter:  limiter1,\n\t\t\texpected: \"8.8.8.8\",\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #3 : X-Real-IP without proxy.\n\t\t\t//\n\t\t\trequest:  request3,\n\t\t\tlimiter:  limiter1,\n\t\t\texpected: \"8.8.8.8\",\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #4 : RemoteAddr without proxy.\n\t\t\t//\n\t\t\trequest:  request1,\n\t\t\tlimiter:  limiter2,\n\t\t\texpected: \"8.8.8.8\",\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #5 : X-Forwarded-For without proxy.\n\t\t\t//\n\t\t\trequest:  request2,\n\t\t\tlimiter:  limiter2,\n\t\t\texpected: \"9.9.9.9\",\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #6 : X-Real-IP without proxy.\n\t\t\t//\n\t\t\trequest:  request3,\n\t\t\tlimiter:  limiter2,\n\t\t\texpected: \"6.6.6.6\",\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #7 : IPv4 with mask.\n\t\t\t//\n\t\t\trequest:  request1,\n\t\t\tlimiter:  limiter3,\n\t\t\texpected: \"8.8.8.0\",\n\t\t},\n\t\t{\n\t\t\t//\n\t\t\t// Scenario #8 : IPv6 with mask.\n\t\t\t//\n\t\t\trequest:  request4,\n\t\t\tlimiter:  limiter4,\n\t\t\texpected: \"2001:db8:cafe::\",\n\t\t},\n\t}\n\n\tfor i, scenario := range scenarios {\n\t\tmessage := fmt.Sprintf(\"Scenario #%d\", (i + 1))\n\t\tkey := scenario.limiter.GetIPKey(scenario.request)\n\t\tis.Equal(scenario.expected, key, message)\n\t}\n}\n"
        },
        {
          "name": "options.go",
          "type": "blob",
          "size": 2.4150390625,
          "content": "package limiter\n\nimport (\n\t\"net\"\n)\n\n// Option is a functional option.\ntype Option func(*Options)\n\n// Options are limiter options.\ntype Options struct {\n\t// IPv4Mask defines the mask used to obtain a IPv4 address.\n\tIPv4Mask net.IPMask\n\t// IPv6Mask defines the mask used to obtain a IPv6 address.\n\tIPv6Mask net.IPMask\n\t// TrustForwardHeader enable parsing of X-Real-IP and X-Forwarded-For headers to obtain user IP.\n\t// Please be advised that using this option could be insecure (ie: spoofed) if your reverse\n\t// proxy is not configured properly to forward a trustworthy client IP.\n\t// Please read the section \"Limiter behind a reverse proxy\" in the README for further information.\n\tTrustForwardHeader bool\n\t// ClientIPHeader defines a custom header (likely defined by your CDN or Cloud provider) to obtain user IP.\n\t// If configured, this option will override \"TrustForwardHeader\" option.\n\t// Please be advised that using this option could be insecure (ie: spoofed) if your reverse\n\t// proxy is not configured properly to forward a trustworthy client IP.\n\t// Please read the section \"Limiter behind a reverse proxy\" in the README for further information.\n\tClientIPHeader string\n}\n\n// WithIPv4Mask will configure the limiter to use given mask for IPv4 address.\nfunc WithIPv4Mask(mask net.IPMask) Option {\n\treturn func(o *Options) {\n\t\to.IPv4Mask = mask\n\t}\n}\n\n// WithIPv6Mask will configure the limiter to use given mask for IPv6 address.\nfunc WithIPv6Mask(mask net.IPMask) Option {\n\treturn func(o *Options) {\n\t\to.IPv6Mask = mask\n\t}\n}\n\n// WithTrustForwardHeader will configure the limiter to trust X-Real-IP and X-Forwarded-For headers.\n// Please be advised that using this option could be insecure (ie: spoofed) if your reverse\n// proxy is not configured properly to forward a trustworthy client IP.\n// Please read the section \"Limiter behind a reverse proxy\" in the README for further information.\nfunc WithTrustForwardHeader(enable bool) Option {\n\treturn func(o *Options) {\n\t\to.TrustForwardHeader = enable\n\t}\n}\n\n// WithClientIPHeader will configure the limiter to use a custom header to obtain user IP.\n// Please be advised that using this option could be insecure (ie: spoofed) if your reverse\n// proxy is not configured properly to forward a trustworthy client IP.\n// Please read the section \"Limiter behind a reverse proxy\" in the README for further information.\nfunc WithClientIPHeader(header string) Option {\n\treturn func(o *Options) {\n\t\to.ClientIPHeader = header\n\t}\n}\n"
        },
        {
          "name": "rate.go",
          "type": "blob",
          "size": 0.9892578125,
          "content": "package limiter\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n)\n\n// Rate is the rate.\ntype Rate struct {\n\tFormatted string\n\tPeriod    time.Duration\n\tLimit     int64\n}\n\n// NewRateFromFormatted returns the rate from the formatted version.\nfunc NewRateFromFormatted(formatted string) (Rate, error) {\n\trate := Rate{}\n\n\tvalues := strings.Split(formatted, \"-\")\n\tif len(values) != 2 {\n\t\treturn rate, errors.Errorf(\"incorrect format '%s'\", formatted)\n\t}\n\n\tperiods := map[string]time.Duration{\n\t\t\"S\": time.Second,    // Second\n\t\t\"M\": time.Minute,    // Minute\n\t\t\"H\": time.Hour,      // Hour\n\t\t\"D\": time.Hour * 24, // Day\n\t}\n\n\tlimit, period := values[0], strings.ToUpper(values[1])\n\n\tp, ok := periods[period]\n\tif !ok {\n\t\treturn rate, errors.Errorf(\"incorrect period '%s'\", period)\n\t}\n\n\tl, err := strconv.ParseInt(limit, 10, 64)\n\tif err != nil {\n\t\treturn rate, errors.Errorf(\"incorrect limit '%s'\", limit)\n\t}\n\n\trate = Rate{\n\t\tFormatted: formatted,\n\t\tPeriod:    p,\n\t\tLimit:     l,\n\t}\n\n\treturn rate, nil\n}\n"
        },
        {
          "name": "rate_test.go",
          "type": "blob",
          "size": 0.927734375,
          "content": "package limiter_test\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/ulule/limiter/v3\"\n)\n\n// TestRate tests Rate methods.\nfunc TestRate(t *testing.T) {\n\tis := require.New(t)\n\n\texpected := map[string]limiter.Rate{\n\t\t\"10-S\": {\n\t\t\tFormatted: \"10-S\",\n\t\t\tPeriod:    1 * time.Second,\n\t\t\tLimit:     int64(10),\n\t\t},\n\t\t\"356-M\": {\n\t\t\tFormatted: \"356-M\",\n\t\t\tPeriod:    1 * time.Minute,\n\t\t\tLimit:     int64(356),\n\t\t},\n\t\t\"3-H\": {\n\t\t\tFormatted: \"3-H\",\n\t\t\tPeriod:    1 * time.Hour,\n\t\t\tLimit:     int64(3),\n\t\t},\n\t\t\"2000-D\": {\n\t\t\tFormatted: \"2000-D\",\n\t\t\tPeriod:    24 * time.Hour,\n\t\t\tLimit:     int64(2000),\n\t\t},\n\t}\n\n\tfor k, v := range expected {\n\t\tr, err := limiter.NewRateFromFormatted(k)\n\t\tis.NoError(err)\n\t\tis.True(reflect.DeepEqual(v, r))\n\t}\n\n\twrongs := []string{\n\t\t\"10 S\",\n\t\t\"10:S\",\n\t\t\"AZERTY\",\n\t\t\"na wak\",\n\t\t\"H-10\",\n\t}\n\n\tfor _, w := range wrongs {\n\t\t_, err := limiter.NewRateFromFormatted(w)\n\t\tis.Error(err)\n\t}\n\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "store.go",
          "type": "blob",
          "size": 1.3564453125,
          "content": "package limiter\n\nimport (\n\t\"context\"\n\t\"time\"\n)\n\n// Store is the common interface for limiter stores.\ntype Store interface {\n\t// Get returns the limit for given identifier.\n\tGet(ctx context.Context, key string, rate Rate) (Context, error)\n\t// Peek returns the limit for given identifier, without modification on current values.\n\tPeek(ctx context.Context, key string, rate Rate) (Context, error)\n\t// Reset resets the limit to zero for given identifier.\n\tReset(ctx context.Context, key string, rate Rate) (Context, error)\n\t// Increment increments the limit by given count & gives back the new limit for given identifier\n\tIncrement(ctx context.Context, key string, count int64, rate Rate) (Context, error)\n}\n\n// StoreOptions are options for store.\ntype StoreOptions struct {\n\t// Prefix is the prefix to use for the key.\n\tPrefix string\n\n\t// MaxRetry is the maximum number of retry under race conditions on redis store.\n\t// Deprecated: this option is no longer required since all operations are atomic now.\n\tMaxRetry int\n\n\t// CleanUpInterval is the interval for cleanup (run garbage collection) on stale entries on memory store.\n\t// Setting this to a low value will optimize memory consumption, but will likely\n\t// reduce performance and increase lock contention.\n\t// Setting this to a high value will maximum throughput, but will increase the memory footprint.\n\tCleanUpInterval time.Duration\n}\n"
        }
      ]
    }
  ]
}