{
  "metadata": {
    "timestamp": 1736567267206,
    "page": 867,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ory/fosite",
      "stars": 2344,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06640625,
          "content": ".bin\n.idea\n*.iml\n.cover\n*.log\n*.exe\ncover.out\nvendor/\nnode_modules/\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.2109375,
          "content": "linters:\n  enable:\n    - gosec\n  disable:\n    - ineffassign\n    - deadcode\n    - unused\n    - structcheck\n    - gosimple\n    - bodyclose\n    - staticcheck\n\nrun:\n  skip-files:\n    - \".+_test.go\"\n    - \".+_test_.+.go\"\n"
        },
        {
          "name": ".nancy-ignore",
          "type": "blob",
          "size": 0.5703125,
          "content": "# etcd issues - can be ignored because etcd is not used.\nCVE-2020-15114\nCVE-2020-15136\nCVE-2020-15115\n# end\n\n# dockertest issues - can be ignored because only used for testing\nCVE-2020-8911\nsonatype-2020-1759\nCVE-2020-8912\nCVE-2021-41103\nCVE-2022-23648\nCVE-2021-21334\nCVE-2021-32760\nCVE-2021-41190\nsonatype-2021-0853\nsonatype-2021-0853\nCVE-2021-41190\nCVE-2021-30465\nCVE-2021-43784\nsonatype-2020-0569\nCVE-2022-29162\nsonatype-2019-0890\nCVE-2022-21698\nsonatype-2021-148\nCVE-2021-20329\nCVE-2021-22133\nsonatype-2021-1485\nsonatype-2021-4899\nsonatype-2020-1759\nCVE-2021-221333\nCVE-2022-31030"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.2099609375,
          "content": ".github/ISSUE_TEMPLATE/BUG-REPORT.yml\n.github/ISSUE_TEMPLATE/DESIGN-DOC.yml\n.github/ISSUE_TEMPLATE/FEATURE-REQUEST.yml\n.github/ISSUE_TEMPLATE/config.yml\n.github/pull_request_template.md\nCHANGELOG.md\nCONTRIBUTING.md\n"
        },
        {
          "name": ".reference-ignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "**/node_modules\ndocs\nCHANGELOG.md\n"
        },
        {
          "name": ".reports",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.4208984375,
          "content": "language: go\n\ngo_import_path: github.com/ory/fosite\n\ngo:\n  - \"1.14\"\n\ninstall:\n  - go install github.com/mattn/goveralls\n  - go install github.com/ory/go-acc\n  - curl -sSfL\n    https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh |\n    sh -s -- -b $(go env GOPATH)/bin v1.24.0\n\nscript:\n  - golangci-lint run\n  - go-acc -o coverage.txt ./... -- -failfast -timeout=20m\n  - goveralls -coverprofile=\"coverage.txt\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 160.8681640625,
          "content": "**This file is no longer being updated and kept for historical reasons. Please check\nthe [GitHub releases](https://github.com/ory/fosite/releases) instead!**\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n**Table of Contents**\n\n- [0.0.0 (2022-09-22)](#000-2022-09-22)\n  - [Breaking Changes](#breaking-changes)\n    - [Bug Fixes](#bug-fixes)\n    - [Code Refactoring](#code-refactoring)\n    - [Features](#features)\n    - [Tests](#tests)\n    - [Unclassified](#unclassified)\n- [0.42.2 (2022-04-17)](#0422-2022-04-17)\n  - [Bug Fixes](#bug-fixes-1)\n  - [Code Generation](#code-generation)\n  - [Documentation](#documentation)\n  - [Features](#features-1)\n- [0.42.1 (2022-02-03)](#0421-2022-02-03)\n  - [Code Generation](#code-generation-1)\n  - [Features](#features-2)\n- [0.42.0 (2022-01-06)](#0420-2022-01-06)\n  - [Code Generation](#code-generation-2)\n  - [Features](#features-3)\n- [0.41.0 (2021-11-13)](#0410-2021-11-13)\n  - [Bug Fixes](#bug-fixes-2)\n  - [Code Generation](#code-generation-3)\n  - [Code Refactoring](#code-refactoring-1)\n  - [Documentation](#documentation-1)\n  - [Features](#features-4)\n- [0.40.2 (2021-05-28)](#0402-2021-05-28)\n  - [Features](#features-5)\n- [0.40.1 (2021-05-23)](#0401-2021-05-23)\n  - [Bug Fixes](#bug-fixes-3)\n- [0.40.0 (2021-05-21)](#0400-2021-05-21)\n  - [Bug Fixes](#bug-fixes-4)\n  - [Code Refactoring](#code-refactoring-2)\n  - [Documentation](#documentation-2)\n  - [Features](#features-6)\n  - [Tests](#tests-1)\n- [0.39.0 (2021-03-08)](#0390-2021-03-08)\n  - [Features](#features-7)\n- [0.38.0 (2021-02-23)](#0380-2021-02-23)\n  - [Breaking Changes](#breaking-changes-1)\n    - [Bug Fixes](#bug-fixes-5)\n    - [Features](#features-8)\n- [0.37.0 (2021-02-05)](#0370-2021-02-05)\n  - [Bug Fixes](#bug-fixes-6)\n  - [Features](#features-9)\n- [0.36.1 (2021-01-11)](#0361-2021-01-11)\n  - [Bug Fixes](#bug-fixes-7)\n  - [Chores](#chores)\n  - [Code Refactoring](#code-refactoring-3)\n- [0.36.0 (2020-11-16)](#0360-2020-11-16)\n  - [Breaking Changes](#breaking-changes-2)\n    - [Bug Fixes](#bug-fixes-8)\n    - [Code Refactoring](#code-refactoring-4)\n    - [Documentation](#documentation-3)\n    - [Features](#features-10)\n- [0.35.1 (2020-10-11)](#0351-2020-10-11)\n  - [Bug Fixes](#bug-fixes-9)\n  - [Code Generation](#code-generation-4)\n  - [Documentation](#documentation-4)\n  - [Features](#features-11)\n- [0.35.0 (2020-10-06)](#0350-2020-10-06)\n  - [Breaking Changes](#breaking-changes-3)\n    - [Bug Fixes](#bug-fixes-10)\n    - [Code Generation](#code-generation-5)\n- [0.34.1 (2020-10-02)](#0341-2020-10-02)\n  - [Bug Fixes](#bug-fixes-11)\n  - [Documentation](#documentation-5)\n- [0.34.0 (2020-09-24)](#0340-2020-09-24)\n  - [Breaking Changes](#breaking-changes-4)\n    - [Bug Fixes](#bug-fixes-12)\n    - [Chores](#chores-1)\n    - [Features](#features-12)\n    - [Unclassified](#unclassified-1)\n- [0.33.0 (2020-09-16)](#0330-2020-09-16)\n  - [Breaking Changes](#breaking-changes-5)\n    - [Features](#features-13)\n- [0.32.4 (2020-09-15)](#0324-2020-09-15)\n  - [Code Generation](#code-generation-6)\n  - [Code Refactoring](#code-refactoring-5)\n  - [Documentation](#documentation-6)\n- [0.32.3 (2020-09-12)](#0323-2020-09-12)\n  - [Bug Fixes](#bug-fixes-13)\n  - [Code Refactoring](#code-refactoring-6)\n  - [Documentation](#documentation-7)\n  - [Features](#features-14)\n- [0.32.2 (2020-06-22)](#0322-2020-06-22)\n  - [Features](#features-15)\n- [0.32.1 (2020-06-05)](#0321-2020-06-05)\n  - [Bug Fixes](#bug-fixes-14)\n  - [Features](#features-16)\n- [0.32.0 (2020-05-28)](#0320-2020-05-28)\n  - [Bug Fixes](#bug-fixes-15)\n  - [Documentation](#documentation-8)\n  - [Features](#features-17)\n- [0.31.3 (2020-05-09)](#0313-2020-05-09)\n  - [Bug Fixes](#bug-fixes-16)\n  - [Features](#features-18)\n- [0.31.2 (2020-04-16)](#0312-2020-04-16)\n  - [Bug Fixes](#bug-fixes-17)\n- [0.31.1 (2020-04-16)](#0311-2020-04-16)\n  - [Bug Fixes](#bug-fixes-18)\n  - [Documentation](#documentation-9)\n- [0.31.0 (2020-03-29)](#0310-2020-03-29)\n  - [Unclassified](#unclassified-2)\n- [0.30.6 (2020-03-26)](#0306-2020-03-26)\n  - [Bug Fixes](#bug-fixes-19)\n  - [Documentation](#documentation-10)\n- [0.30.5 (2020-03-25)](#0305-2020-03-25)\n  - [Bug Fixes](#bug-fixes-20)\n- [0.30.4 (2020-03-17)](#0304-2020-03-17)\n  - [Bug Fixes](#bug-fixes-21)\n- [0.30.3 (2020-03-04)](#0303-2020-03-04)\n  - [Bug Fixes](#bug-fixes-22)\n  - [Documentation](#documentation-11)\n  - [Features](#features-19)\n- [0.30.2 (2019-11-21)](#0302-2019-11-21)\n  - [Unclassified](#unclassified-3)\n- [0.30.1 (2019-09-23)](#0301-2019-09-23)\n  - [Unclassified](#unclassified-4)\n- [0.30.0 (2019-09-16)](#0300-2019-09-16)\n  - [Unclassified](#unclassified-5)\n- [0.29.8 (2019-08-29)](#0298-2019-08-29)\n  - [Documentation](#documentation-12)\n  - [Unclassified](#unclassified-6)\n- [0.29.7 (2019-08-06)](#0297-2019-08-06)\n  - [Documentation](#documentation-13)\n  - [Unclassified](#unclassified-7)\n- [0.29.6 (2019-04-26)](#0296-2019-04-26)\n  - [Unclassified](#unclassified-8)\n- [0.29.5 (2019-04-25)](#0295-2019-04-25)\n  - [Unclassified](#unclassified-9)\n- [0.29.3 (2019-04-17)](#0293-2019-04-17)\n  - [Unclassified](#unclassified-10)\n- [0.29.2 (2019-04-11)](#0292-2019-04-11)\n  - [Unclassified](#unclassified-11)\n- [0.29.1 (2019-03-27)](#0291-2019-03-27)\n  - [Unclassified](#unclassified-12)\n- [0.29.0 (2018-12-23)](#0290-2018-12-23)\n  - [Unclassified](#unclassified-13)\n- [0.28.1 (2018-12-04)](#0281-2018-12-04)\n  - [Unclassified](#unclassified-14)\n- [0.28.0 (2018-11-16)](#0280-2018-11-16)\n  - [Unclassified](#unclassified-15)\n- [0.27.4 (2018-11-12)](#0274-2018-11-12)\n  - [Documentation](#documentation-14)\n  - [Unclassified](#unclassified-16)\n- [0.27.3 (2018-11-08)](#0273-2018-11-08)\n  - [Unclassified](#unclassified-17)\n- [0.27.2 (2018-11-07)](#0272-2018-11-07)\n  - [Unclassified](#unclassified-18)\n- [0.27.1 (2018-11-03)](#0271-2018-11-03)\n  - [Unclassified](#unclassified-19)\n- [0.27.0 (2018-10-31)](#0270-2018-10-31)\n  - [Unclassified](#unclassified-20)\n- [0.26.1 (2018-10-25)](#0261-2018-10-25)\n  - [Unclassified](#unclassified-21)\n- [0.26.0 (2018-10-24)](#0260-2018-10-24)\n  - [Unclassified](#unclassified-22)\n- [0.25.1 (2018-10-23)](#0251-2018-10-23)\n  - [Documentation](#documentation-15)\n  - [Unclassified](#unclassified-23)\n- [0.25.0 (2018-10-08)](#0250-2018-10-08)\n  - [Unclassified](#unclassified-24)\n- [0.24.0 (2018-09-27)](#0240-2018-09-27)\n  - [Unclassified](#unclassified-25)\n- [0.23.0 (2018-09-22)](#0230-2018-09-22)\n  - [Unclassified](#unclassified-26)\n- [0.22.0 (2018-09-19)](#0220-2018-09-19)\n  - [Unclassified](#unclassified-27)\n- [0.21.5 (2018-08-31)](#0215-2018-08-31)\n  - [Unclassified](#unclassified-28)\n- [0.21.4 (2018-08-26)](#0214-2018-08-26)\n  - [Unclassified](#unclassified-29)\n- [0.21.3 (2018-08-22)](#0213-2018-08-22)\n  - [Unclassified](#unclassified-30)\n- [0.21.2 (2018-08-07)](#0212-2018-08-07)\n  - [Unclassified](#unclassified-31)\n- [0.21.1 (2018-07-22)](#0211-2018-07-22)\n  - [Unclassified](#unclassified-32)\n- [0.21.0 (2018-06-23)](#0210-2018-06-23)\n  - [Documentation](#documentation-16)\n  - [Unclassified](#unclassified-33)\n- [0.20.3 (2018-06-07)](#0203-2018-06-07)\n  - [Unclassified](#unclassified-34)\n- [0.20.2 (2018-05-29)](#0202-2018-05-29)\n  - [Unclassified](#unclassified-35)\n- [0.20.1 (2018-05-29)](#0201-2018-05-29)\n  - [Unclassified](#unclassified-36)\n- [0.20.0 (2018-05-28)](#0200-2018-05-28)\n  - [Unclassified](#unclassified-37)\n- [0.19.8 (2018-05-24)](#0198-2018-05-24)\n  - [Unclassified](#unclassified-38)\n- [0.19.7 (2018-05-24)](#0197-2018-05-24)\n  - [Unclassified](#unclassified-39)\n- [0.19.6 (2018-05-24)](#0196-2018-05-24)\n  - [Unclassified](#unclassified-40)\n- [0.19.5 (2018-05-23)](#0195-2018-05-23)\n  - [Unclassified](#unclassified-41)\n- [0.19.4 (2018-05-20)](#0194-2018-05-20)\n  - [Unclassified](#unclassified-42)\n- [0.19.3 (2018-05-20)](#0193-2018-05-20)\n  - [Unclassified](#unclassified-43)\n- [0.19.2 (2018-05-19)](#0192-2018-05-19)\n  - [Unclassified](#unclassified-44)\n- [0.19.1 (2018-05-19)](#0191-2018-05-19)\n  - [Unclassified](#unclassified-45)\n- [0.19.0 (2018-05-17)](#0190-2018-05-17)\n  - [Unclassified](#unclassified-46)\n- [0.18.1 (2018-05-01)](#0181-2018-05-01)\n  - [Unclassified](#unclassified-47)\n- [0.18.0 (2018-04-30)](#0180-2018-04-30)\n  - [Unclassified](#unclassified-48)\n- [0.17.2 (2018-04-26)](#0172-2018-04-26)\n  - [Unclassified](#unclassified-49)\n- [0.17.1 (2018-04-22)](#0171-2018-04-22)\n  - [Unclassified](#unclassified-50)\n- [0.17.0 (2018-04-08)](#0170-2018-04-08)\n  - [Documentation](#documentation-17)\n  - [Unclassified](#unclassified-51)\n- [0.16.5 (2018-03-17)](#0165-2018-03-17)\n  - [Documentation](#documentation-18)\n  - [Unclassified](#unclassified-52)\n- [0.16.4 (2018-02-07)](#0164-2018-02-07)\n  - [Unclassified](#unclassified-53)\n- [0.16.3 (2018-02-07)](#0163-2018-02-07)\n  - [Unclassified](#unclassified-54)\n- [0.16.2 (2018-01-25)](#0162-2018-01-25)\n  - [Unclassified](#unclassified-55)\n- [0.16.1 (2017-12-23)](#0161-2017-12-23)\n  - [Unclassified](#unclassified-56)\n- [0.16.0 (2017-12-23)](#0160-2017-12-23)\n  - [Unclassified](#unclassified-57)\n- [0.15.6 (2017-12-21)](#0156-2017-12-21)\n  - [Unclassified](#unclassified-58)\n- [0.15.5 (2017-12-17)](#0155-2017-12-17)\n  - [Unclassified](#unclassified-59)\n- [0.15.4 (2017-12-17)](#0154-2017-12-17)\n  - [Unclassified](#unclassified-60)\n- [0.15.3 (2017-12-17)](#0153-2017-12-17)\n  - [Unclassified](#unclassified-61)\n- [0.15.2 (2017-12-10)](#0152-2017-12-10)\n  - [Unclassified](#unclassified-62)\n- [0.15.1 (2017-12-10)](#0151-2017-12-10)\n  - [Unclassified](#unclassified-63)\n- [0.15.0 (2017-12-09)](#0150-2017-12-09)\n  - [Documentation](#documentation-19)\n  - [Unclassified](#unclassified-64)\n- [0.14.2 (2017-12-06)](#0142-2017-12-06)\n  - [Unclassified](#unclassified-65)\n- [0.14.1 (2017-12-06)](#0141-2017-12-06)\n  - [Unclassified](#unclassified-66)\n- [0.14.0 (2017-12-06)](#0140-2017-12-06)\n  - [Unclassified](#unclassified-67)\n- [0.13.1 (2017-12-04)](#0131-2017-12-04)\n  - [Unclassified](#unclassified-68)\n- [0.13.0 (2017-10-25)](#0130-2017-10-25)\n  - [Unclassified](#unclassified-69)\n- [0.12.0 (2017-10-25)](#0120-2017-10-25)\n  - [Unclassified](#unclassified-70)\n- [0.11.4 (2017-10-10)](#0114-2017-10-10)\n  - [Documentation](#documentation-20)\n  - [Unclassified](#unclassified-71)\n- [0.11.3 (2017-08-21)](#0113-2017-08-21)\n  - [Documentation](#documentation-21)\n  - [Unclassified](#unclassified-72)\n- [0.11.2 (2017-07-09)](#0112-2017-07-09)\n  - [Unclassified](#unclassified-73)\n- [0.11.1 (2017-07-09)](#0111-2017-07-09)\n  - [Unclassified](#unclassified-74)\n- [0.11.0 (2017-07-09)](#0110-2017-07-09)\n  - [Unclassified](#unclassified-75)\n- [0.10.0 (2017-07-06)](#0100-2017-07-06)\n  - [Unclassified](#unclassified-76)\n- [0.9.7 (2017-06-28)](#097-2017-06-28)\n  - [Unclassified](#unclassified-77)\n- [0.9.6 (2017-06-21)](#096-2017-06-21)\n  - [Documentation](#documentation-22)\n  - [Unclassified](#unclassified-78)\n- [0.9.5 (2017-06-08)](#095-2017-06-08)\n  - [Unclassified](#unclassified-79)\n- [0.9.4 (2017-06-05)](#094-2017-06-05)\n  - [Unclassified](#unclassified-80)\n- [0.9.3 (2017-06-05)](#093-2017-06-05)\n  - [Unclassified](#unclassified-81)\n- [0.9.2 (2017-06-05)](#092-2017-06-05)\n  - [Unclassified](#unclassified-82)\n- [0.9.1 (2017-06-04)](#091-2017-06-04)\n  - [Unclassified](#unclassified-83)\n- [0.9.0 (2017-06-03)](#090-2017-06-03)\n  - [Documentation](#documentation-23)\n  - [Unclassified](#unclassified-84)\n- [0.8.0 (2017-05-18)](#080-2017-05-18)\n  - [Documentation](#documentation-24)\n  - [Unclassified](#unclassified-85)\n- [0.7.0 (2017-05-03)](#070-2017-05-03)\n  - [Documentation](#documentation-25)\n  - [Unclassified](#unclassified-86)\n- [0.6.19 (2017-05-03)](#0619-2017-05-03)\n  - [Unclassified](#unclassified-87)\n- [0.6.18 (2017-04-14)](#0618-2017-04-14)\n  - [Unclassified](#unclassified-88)\n- [0.6.17 (2017-02-24)](#0617-2017-02-24)\n  - [Unclassified](#unclassified-89)\n- [0.6.15 (2017-02-11)](#0615-2017-02-11)\n  - [Unclassified](#unclassified-90)\n- [0.6.14 (2017-01-08)](#0614-2017-01-08)\n  - [Unclassified](#unclassified-91)\n- [0.6.13 (2017-01-08)](#0613-2017-01-08)\n  - [Unclassified](#unclassified-92)\n- [0.6.12 (2017-01-02)](#0612-2017-01-02)\n  - [Unclassified](#unclassified-93)\n- [0.6.11 (2017-01-02)](#0611-2017-01-02)\n  - [Unclassified](#unclassified-94)\n- [0.6.10 (2016-12-29)](#0610-2016-12-29)\n  - [Unclassified](#unclassified-95)\n- [0.6.9 (2016-12-29)](#069-2016-12-29)\n  - [Documentation](#documentation-26)\n  - [Unclassified](#unclassified-96)\n- [0.6.8 (2016-12-20)](#068-2016-12-20)\n  - [Unclassified](#unclassified-97)\n- [0.6.7 (2016-12-06)](#067-2016-12-06)\n  - [Unclassified](#unclassified-98)\n- [0.6.6 (2016-12-06)](#066-2016-12-06)\n  - [Unclassified](#unclassified-99)\n- [0.6.5 (2016-12-04)](#065-2016-12-04)\n  - [Unclassified](#unclassified-100)\n- [0.6.4 (2016-11-29)](#064-2016-11-29)\n  - [Unclassified](#unclassified-101)\n- [0.6.2 (2016-11-25)](#062-2016-11-25)\n  - [Unclassified](#unclassified-102)\n- [0.6.1 (2016-11-17)](#061-2016-11-17)\n  - [Unclassified](#unclassified-103)\n- [0.6.0 (2016-11-17)](#060-2016-11-17)\n  - [Unclassified](#unclassified-104)\n- [0.5.1 (2016-10-22)](#051-2016-10-22)\n  - [Unclassified](#unclassified-105)\n- [0.5.0 (2016-10-17)](#050-2016-10-17)\n  - [Unclassified](#unclassified-106)\n- [0.4.0 (2016-10-16)](#040-2016-10-16)\n  - [Documentation](#documentation-27)\n  - [Unclassified](#unclassified-107)\n- [0.3.6 (2016-10-07)](#036-2016-10-07)\n  - [Unclassified](#unclassified-108)\n- [0.3.5 (2016-10-06)](#035-2016-10-06)\n  - [Unclassified](#unclassified-109)\n- [0.3.4 (2016-10-04)](#034-2016-10-04)\n  - [Unclassified](#unclassified-110)\n- [0.3.3 (2016-10-03)](#033-2016-10-03)\n  - [Documentation](#documentation-28)\n  - [Unclassified](#unclassified-111)\n- [0.3.2 (2016-09-22)](#032-2016-09-22)\n  - [Unclassified](#unclassified-112)\n- [0.3.1 (2016-09-22)](#031-2016-09-22)\n  - [Unclassified](#unclassified-113)\n- [0.3.0 (2016-08-22)](#030-2016-08-22)\n  - [Unclassified](#unclassified-114)\n- [0.2.4 (2016-08-09)](#024-2016-08-09)\n  - [Unclassified](#unclassified-115)\n- [0.2.3 (2016-08-08)](#023-2016-08-08)\n  - [Unclassified](#unclassified-116)\n- [0.2.2 (2016-08-08)](#022-2016-08-08)\n  - [Unclassified](#unclassified-117)\n- [0.2.1 (2016-08-08)](#021-2016-08-08)\n  - [Unclassified](#unclassified-118)\n- [0.2.0 (2016-08-06)](#020-2016-08-06)\n  - [Unclassified](#unclassified-119)\n- [0.1.0 (2016-08-01)](#010-2016-08-01)\n  - [Code Refactoring](#code-refactoring-7)\n  - [Documentation](#documentation-29)\n  - [Unclassified](#unclassified-120)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# [0.0.0](https://github.com/ory/fosite/compare/v0.42.2...v0.0.0) (2022-09-22)\n\n## Breaking Changes\n\nPlease be aware that several internal APIs have changed, as well as public methods. Most notably, we added the context to all `Write*` metods.\n\n```patch\n type OAuth2Provider interface {\n-    WriteAuthorizeError(rw http.ResponseWriter, requester AuthorizeRequester, err error)\n+    WriteAuthorizeError(ctx context.Context, rw http.ResponseWriter, requester AuthorizeRequester, err error)\n\n-    WriteAuthorizeResponse(rw http.ResponseWriter, requester AuthorizeRequester, responder AuthorizeResponder)\n+    WriteAuthorizeResponse(ctx context.Context, rw http.ResponseWriter, requester AuthorizeRequester, responder AuthorizeResponder)\n\n-    WriteAccessError(rw http.ResponseWriter, requester AccessRequester, err error)\n+    WriteAccessError(ctx context.Context, rw http.ResponseWriter, requester AccessRequester, err error)\n\n-    WriteAccessResponse(rw http.ResponseWriter, requester AccessRequester, responder AccessResponder)\n+    WriteAccessResponse(ctx context.Context, rw http.ResponseWriter, requester AccessRequester, responder AccessResponder)\n\n-    WriteRevocationResponse(rw http.ResponseWriter, err error)\n+    WriteRevocationResponse(ctx context.Context, rw http.ResponseWriter, err error)\n\n-    WriteIntrospectionError(rw http.ResponseWriter, err error)\n+    WriteIntrospectionError(ctx context.Context, rw http.ResponseWriter, err error)\n\n-    WriteIntrospectionResponse(rw http.ResponseWriter, r IntrospectionResponder)\n+    WriteIntrospectionResponse(ctx context.Context, rw http.ResponseWriter, r IntrospectionResponder)\n }\n```\n\nThe default config struct has moved from package `github.com/ory/fosite/compose.Config` to `github.com/ory/fosite.Config`. Struct `github.com/ory/fosite.Fosite` no longer has any configuration parameters\nitself.\n\nPlease note that the HMAC / global secret has to be set no longer in the compose call, but in the config initialization:\n\n```patch\n-compose.ComposeAllEnabled(&compose.Config{}, store, secret, privateKey)\n+compose.ComposeAllEnabled(&fosite.Config{GlobalSecret: secret}, store, privateKey)\n```\n\nMany internal interfaces have been changed, usually adding `ctx context.Context` as the first parameter.\n\n### Bug Fixes\n\n- Bump dependencies ([5dab818](https://github.com/ory/fosite/commit/5dab818f9707e364dcfe56bc6fd2245049417cc1))\n- Cves in deps ([f5782c3](https://github.com/ory/fosite/commit/f5782c33814ec738ea188b0ffac50ef45e7f3eb8))\n- Include `at_hash` claim in authcode flow's ID token ([#679](https://github.com/ory/fosite/issues/679)) ([c3b7bab](https://github.com/ory/fosite/commit/c3b7bab41db24b000f8e1416e1475e0aae4c310c))\n- Linting ([222ca97](https://github.com/ory/fosite/commit/222ca97805edfb52a655969841c2ac2958cc6d36))\n- **rfc7523:** Comment mentioned incorrect granttype ([#668](https://github.com/ory/fosite/issues/668)) ([b41f187](https://github.com/ory/fosite/commit/b41f187703bc1c8dc43ac0ec1ea23569779974bb))\n- State check for hybrid flow ([#670](https://github.com/ory/fosite/issues/670)) ([37f8a0a](https://github.com/ory/fosite/commit/37f8a0ac12e47893459528cabb38b9879600286d))\n\n### Code Refactoring\n\n- **config:** Support hot reloading ([1661401](https://github.com/ory/fosite/commit/16614014a42b3905d065188c8f1f45433c4353f9)), closes [#666](https://github.com/ory/fosite/issues/666):\n\n  This patch updates the config system to be replacable and uses functions instead of struct fields. This allows implementing hot reloading mechanisms easily.\n\n- Move to go 1.17 ([d9d0fed](https://github.com/ory/fosite/commit/d9d0fedaad87044e4d38ba82e01d9e430d09514c))\n\n### Features\n\n- Add `ory_at|pt|ac` prefixes to HMAC tokens ([b652335](https://github.com/ory/fosite/commit/b652335c965d5cc523faebad9c9792c4135cfb75)):\n\n  See https://github.com/ory/hydra/issues/2845\n\n- Add json mappings to default session and its contents ([#688](https://github.com/ory/fosite/issues/688)) ([d8ecac4](https://github.com/ory/fosite/commit/d8ecac4077c446b71842372169abc37a02f9e1b7))\n- Add json mappings to generic session to match openid session ([#690](https://github.com/ory/fosite/issues/690)) ([2386b25](https://github.com/ory/fosite/commit/2386b259837ab89983f6d0ee37b147b36b171f5b))\n- Implement client token lifespan customization ([#684](https://github.com/ory/fosite/issues/684)) ([cfffe8c](https://github.com/ory/fosite/commit/cfffe8cec67a986e2abc736b940f9f0bab9ad7d9)):\n\n  This change introduces the ability to control the lifespan of tokens for each valid combination of Client, GrantType, and TokenType.\n\n- Introduce cache strategy for JWKS fetcher ([452f377](https://github.com/ory/fosite/commit/452f37728890c68524b9aa190e1cdb279414f802))\n- Make http source contextualized ([9fc89e9](https://github.com/ory/fosite/commit/9fc89e9007c71354f7fe2d036ea6e175a2e5860b))\n- PAR implementation ([#660](https://github.com/ory/fosite/issues/660)) ([3de78db](https://github.com/ory/fosite/commit/3de78db805fe1c69b0fc5b853bfabeb19433feba)), closes [#628](https://github.com/ory/fosite/issues/628):\n\n  Implements [RFC9126 - Pushed Authorization Request](https://www.rfc-editor.org/rfc/rfc9126.html).\n\n- Support variety of JWT formats when `jose.JSONWebKey` is used ([2590eb8](https://github.com/ory/fosite/commit/2590eb83d1e66df998053bc2fb7381b9043c232e))\n\n### Tests\n\n- Fix assertions ([#683](https://github.com/ory/fosite/issues/683)) ([551b8b8](https://github.com/ory/fosite/commit/551b8b827cf0b7033aac80818a516ee3c5b8523e))\n- Fix panic ([fe60766](https://github.com/ory/fosite/commit/fe60766cdb1f0d22df7d9c4543b06cfd6dc7aea1))\n\n### Unclassified\n\n- Revert \"chore: delete .circleci folder (#699)\" (#705) ([ef753d5](https://github.com/ory/fosite/commit/ef753d550d59b077f6ae349d6c795e2c142ec676)), closes [#699](https://github.com/ory/fosite/issues/699) [#705](https://github.com/ory/fosite/issues/705):\n\n  This reverts commit 2eea63bddcbdf50771adf670391e495e339f619f since CircleCI is still used here.\n\n# [0.42.2](https://github.com/ory/fosite/compare/v0.42.1...v0.42.2) (2022-04-17)\n\nautogen(docs): regenerate and update changelog\n\n### Bug Fixes\n\n- Always rollback ([#638](https://github.com/ory/fosite/issues/638)) ([7edf673](https://github.com/ory/fosite/commit/7edf673f20aece260f9ba677a07086c48835fba8)), closes [#637](https://github.com/ory/fosite/issues/637)\n- Empty client secret via basic auth header means \"none\" authn ([#655](https://github.com/ory/fosite/issues/655)) ([7a2d972](https://github.com/ory/fosite/commit/7a2d9721f4b6da0e3b2b829ec4312de1e3d66b6f)), closes [/github.com/golang/oauth2/blob/ee480838109b20d468babcb00b7027c82f962065/internal/token.go#L174-L176](https://github.com//github.com/golang/oauth2/blob/ee480838109b20d468babcb00b7027c82f962065/internal/token.go/issues/L174-L176):\n\n  The existing client authentication code treats an empty client_secret\n  query parameter to be equivalent to \"none\" authentication instead of\n  \"client_secret_post.\"\n\n  This change updates the basic auth check to be consistent with this.\n  That is, an empty secret via the basic auth header is considered to\n  mean \"none\" instead of \"client_secret_basic.\"\n\n  The \"golang.org/x/oauth2\" library probes for both methods of\n  authentication, starting with the basic auth header approach first.\n\n  As required, both client ID and secret are encoded in one header:\n\n- Handle invalid_token error for refresh_token is expired ([#664](https://github.com/ory/fosite/issues/664)) ([76bb274](https://github.com/ory/fosite/commit/76bb274e95585d4552789abbd1c1f123463ff47e))\n- Handle token_inactive error for multiple concurrent refresh requests ([#652](https://github.com/ory/fosite/issues/652)) ([7c8f4ae](https://github.com/ory/fosite/commit/7c8f4ae49550c61ff43d1a86adace4ed08c71e3e)):\n\n  See https://github.com/ory/hydra/issues/3004\n\n- Url-encode the fragment in the redirect URL of the authorize response ([#649](https://github.com/ory/fosite/issues/649)) ([beec138](https://github.com/ory/fosite/commit/beec13889c431ff06348c032dd260d00db253dd2)), closes [#648](https://github.com/ory/fosite/issues/648):\n\n  This patch reverts the encoding logic for the fragment of the redirect URL returned as part of the authorize response to what was the one before version `0.36.0`. In that version, the code was refactored and the keys and values of the fragment ceased to be url-encoded. This in turn reflected on all Ory Hydra versions starting from `1.9.0` and provoked a breaking change that made the parsing of the fragment impossible if any of the params contain a character like `&` or `=` because they get treated as separators instead of as text\n\n- Use the correct algorithm for at_hash and c_hash ([#659](https://github.com/ory/fosite/issues/659)) ([8cb4b4b](https://github.com/ory/fosite/commit/8cb4b4b0c57be8944e403a0f3ec588b19f49f6f7)), closes [#630](https://github.com/ory/fosite/issues/630)\n\n### Code Generation\n\n- **docs:** Regenerate and update changelog ([5dbfa9a](https://github.com/ory/fosite/commit/5dbfa9a56d36061d5bf80149e1801c36a371bafd))\n\n### Documentation\n\n- Add deprecation to communicate ropc discouragement ([#665](https://github.com/ory/fosite/issues/665)) ([df491be](https://github.com/ory/fosite/commit/df491beb5e82ca66bf5c5825c91ded0ca9d67b57)):\n\n  This adds godoc deprecations to the compose.OAuth2ResourceOwnerPasswordCredentialsFactory and oauth2.ResourceOwnerPasswordCredentialsGrantHandler in order to clearly communicate the discouragement of the ROPC grant type to users implementing this library.\n\n### Features\n\n- Use custom hash.Hash in hmac.HMACStrategy ([#663](https://github.com/ory/fosite/issues/663)) ([d09a8c3](https://github.com/ory/fosite/commit/d09a8c39284fecce47933ff3b53d90d35b646b0c)), closes [#654](https://github.com/ory/fosite/issues/654)\n\n# [0.42.1](https://github.com/ory/fosite/compare/v0.42.0...v0.42.1) (2022-02-03)\n\nautogen(docs): regenerate and update changelog\n\n### Code Generation\n\n- **docs:** Regenerate and update changelog ([dcc6550](https://github.com/ory/fosite/commit/dcc6550b807980faca740b261790b3be339632c7))\n\n### Features\n\n- Support FormPostHTMLTemplate config for fosite ([#647](https://github.com/ory/fosite/issues/647)) ([570ce3f](https://github.com/ory/fosite/commit/570ce3f6e3bf4e54781a6bfffc2ce777f0ac5194)), closes [#646](https://github.com/ory/fosite/issues/646)\n\n# [0.42.0](https://github.com/ory/fosite/compare/v0.41.0...v0.42.0) (2022-01-06)\n\nautogen(docs): regenerate and update changelog\n\n### Code Generation\n\n- **docs:** Regenerate and update changelog ([cf2c545](https://github.com/ory/fosite/commit/cf2c545540c12bfa5cfbf752bc84c03a8a515ecc))\n\n### Features\n\n- Add new function to TokenRevocationStorage to support refresh token grace-period ([#635](https://github.com/ory/fosite/issues/635)) ([9b40d03](https://github.com/ory/fosite/commit/9b40d036e6494dfe9942b513b8bc4a50c7c9f730))\n\n# [0.41.0](https://github.com/ory/fosite/compare/v0.40.2...v0.41.0) (2021-11-13)\n\nautogen(docs): regenerate and update changelog\n\n### Bug Fixes\n\n- Force HTTP GET for redirect responses ([#636](https://github.com/ory/fosite/issues/636)) ([f6c6523](https://github.com/ory/fosite/commit/f6c6523a09e7733d5ca263bccb7fd4fdb80172b2))\n- Include `typ` in jwt header ([#607](https://github.com/ory/fosite/issues/607)) ([7644a74](https://github.com/ory/fosite/commit/7644a74bd48accb46d8578f6846b3e509dfd4b03)), closes [#606](https://github.com/ory/fosite/issues/606)\n- Make `amr` claim an array to match the OIDC spec ([#625](https://github.com/ory/fosite/issues/625)) ([8a6f66a](https://github.com/ory/fosite/commit/8a6f66ab5d9f74140f4ce94210f09ccb0e27f56d))\n- Resolve nancy warning ([b6cf0a6](https://github.com/ory/fosite/commit/b6cf0a641d1169595ceb3110f76be0788e778521))\n\n### Code Generation\n\n- **docs:** Regenerate and update changelog ([1777ad5](https://github.com/ory/fosite/commit/1777ad52e68b20ce57ed7f2f7d085895c3c157c6))\n\n### Code Refactoring\n\n- Upgrade go-jose to decode JSON numbers into int64 ([#603](https://github.com/ory/fosite/issues/603)) ([c02d327](https://github.com/ory/fosite/commit/c02d3273e30ca9b29285d1641b252e6c29598ea5)), closes [#602](https://github.com/ory/fosite/issues/602)\n\n### Documentation\n\n- Add missing word ([#626](https://github.com/ory/fosite/issues/626)) ([c7a553b](https://github.com/ory/fosite/commit/c7a553bb4945013be17d2bbd2ec126ae93113a72))\n- Document that DeleteOpenIDConnectSession is deprecated ([#634](https://github.com/ory/fosite/issues/634)) ([4e2c03d](https://github.com/ory/fosite/commit/4e2c03d3f6dcb3a3b50e7ea245128edde7ebf959))\n\n### Features\n\n- Add client secret rotation support ([#608](https://github.com/ory/fosite/issues/608)) ([a4ce354](https://github.com/ory/fosite/commit/a4ce3544c2996a99b65350d4b200967df9fc0d45)), closes [#590](https://github.com/ory/fosite/issues/590)\n- Add prettier and format ([d682bdf](https://github.com/ory/fosite/commit/d682bdf51c22c211ee1aceb06fb7c4a7e43db326))\n- Add ResponseModeHandler to support custom response modes ([#592](https://github.com/ory/fosite/issues/592)) ([10ec003](https://github.com/ory/fosite/commit/10ec003fb414fd3fcbd3e2e6d250cb2da51a0304)), closes [#591](https://github.com/ory/fosite/issues/591)\n- I18n support added ([#627](https://github.com/ory/fosite/issues/627)) ([cf02af9](https://github.com/ory/fosite/commit/cf02af977681fd667b33f8e131891f6746d0b9da)), closes [#615](https://github.com/ory/fosite/issues/615)\n- Support jose.opaquesigner for JWTs ([#611](https://github.com/ory/fosite/issues/611)) ([1121a0a](https://github.com/ory/fosite/commit/1121a0aa4155e9216abb989ab008df8cff67830d))\n- Use bitwise comparison for jwt validation errors ([#633](https://github.com/ory/fosite/issues/633)) ([52ee93f](https://github.com/ory/fosite/commit/52ee93fe976152457482870b4ebb487560ca93e0))\n\n# [0.40.2](https://github.com/ory/fosite/compare/v0.40.1...v0.40.2) (2021-05-28)\n\nfeat: use int64 type for claims with timestamps (#600)\n\nCo-authored-by: Nestor <nesterran@gmail.com>\n\n### Features\n\n- Use int64 type for claims with timestamps ([#600](https://github.com/ory/fosite/issues/600)) ([c370994](https://github.com/ory/fosite/commit/c370994c007be101a388f825f1a4d6b38393756e))\n\n# [0.40.1](https://github.com/ory/fosite/compare/v0.40.0...v0.40.1) (2021-05-23)\n\nfix: revert float64 auth_time claim (#599)\n\nCloses #598\n\n### Bug Fixes\n\n- Revert float64 auth_time claim ([#599](https://github.com/ory/fosite/issues/599)) ([e609d91](https://github.com/ory/fosite/commit/e609d9196070050adf39b9bdb3cbfbba2edda0d5)), closes [#598](https://github.com/ory/fosite/issues/598)\n\n# [0.40.0](https://github.com/ory/fosite/compare/v0.39.0...v0.40.0) (2021-05-21)\n\nfeat: transit from jwt-go to go-jose (#593)\n\nCloses #514\n\nCo-authored-by: hackerman <3372410+aeneasr@users.noreply.github.com>\n\n### Bug Fixes\n\n- 582memory store authentication error code ([#583](https://github.com/ory/fosite/issues/583)) ([51b4424](https://github.com/ory/fosite/commit/51b44248275128ca83e1899522f2cd412e5c466e))\n- Do not include nonce in ID tokens when not used ([#570](https://github.com/ory/fosite/issues/570)) ([795dee2](https://github.com/ory/fosite/commit/795dee246f26c1fef16dcd52da37e3df75e73772))\n- Sha alg name in error message and go doc ([#571](https://github.com/ory/fosite/issues/571)) ([0f2e289](https://github.com/ory/fosite/commit/0f2e289973ad22d14c5d5bedd4fc9bb886134354))\n- Upgrade gogo protubuf ([#573](https://github.com/ory/fosite/issues/573)) ([9a9467a](https://github.com/ory/fosite/commit/9a9467a20391059534df859b2b295711918bfd08))\n\n### Code Refactoring\n\n- Generate claims in the same way ([#595](https://github.com/ory/fosite/issues/595)) ([4c7b13f](https://github.com/ory/fosite/commit/4c7b13f2f1234128c53e8fc3e6cc3981e10d3069))\n\n### Documentation\n\n- Add client credentials grant how-to ([#589](https://github.com/ory/fosite/issues/589)) ([893aae4](https://github.com/ory/fosite/commit/893aae4348cfef78cb3d7f9aa70568e2137b4b3f)), closes [#566](https://github.com/ory/fosite/issues/566)\n\n### Features\n\n- Allow extra fields in introspect response ([#579](https://github.com/ory/fosite/issues/579)) ([294a0bf](https://github.com/ory/fosite/commit/294a0bf7f4cb01739a560480364403118d1408bf)), closes [#441](https://github.com/ory/fosite/issues/441)\n- Allow omitting scope in authorization redirect uri ([#588](https://github.com/ory/fosite/issues/588)) ([6ad9264](https://github.com/ory/fosite/commit/6ad92642f0f01ff4d3662f3680a825db22594366))\n- Pass requests through context ([#596](https://github.com/ory/fosite/issues/596)) ([2f96bb8](https://github.com/ory/fosite/commit/2f96bb8a2623fe7b4abb31db870582b555df6db8)), closes [#537](https://github.com/ory/fosite/issues/537)\n- Transit from jwt-go to go-jose ([#593](https://github.com/ory/fosite/issues/593)) ([d022bbc](https://github.com/ory/fosite/commit/d022bbc2b45fd603cb12575e28bbe884170bf788)), closes [#514](https://github.com/ory/fosite/issues/514)\n\n### Tests\n\n- Change sha algorithm name acc to standard naming ([#572](https://github.com/ory/fosite/issues/572)) ([a3594a3](https://github.com/ory/fosite/commit/a3594a3cb0eb70e912a7268d2d396d19a45116c6))\n\n# [0.39.0](https://github.com/ory/fosite/compare/v0.38.0...v0.39.0) (2021-03-08)\n\nfeat: token reuse detection (#567)\n\nSee https://github.com/ory/hydra/issues/2022\n\n### Features\n\n- Token reuse detection ([#567](https://github.com/ory/fosite/issues/567)) ([db7f981](https://github.com/ory/fosite/commit/db7f9817ee19878c4bf650e97b49be7e3b268ee0)):\n\n  See https://github.com/ory/hydra/issues/2022\n\n# [0.38.0](https://github.com/ory/fosite/compare/v0.37.0...v0.38.0) (2021-02-23)\n\nfeat: add ClientAuthenticationStrategy extension point (#565)\n\nCloses #564\n\n## Breaking Changes\n\nReplaces `token_expired` error ID with `invalid_token` which is the correct value according to https://tools.ietf.org/html/rfc6750#section-3.1\n\n### Bug Fixes\n\n- Use correct error code for expired token ([#562](https://github.com/ory/fosite/issues/562)) ([56a71e5](https://github.com/ory/fosite/commit/56a71e5f9797abe35a9566c86f9ce9c1f485c11a))\n\n### Features\n\n- Add ClientAuthenticationStrategy extension point ([#565](https://github.com/ory/fosite/issues/565)) ([ec0bec2](https://github.com/ory/fosite/commit/ec0bec2d8462bae2dc545defbd21190dfe832024)), closes [#564](https://github.com/ory/fosite/issues/564)\n\n# [0.37.0](https://github.com/ory/fosite/compare/v0.36.1...v0.37.0) (2021-02-05)\n\nfeat: add support for urn:ietf:params:oauth:grant-type:jwt-bearer grant type RFC 7523\u0010 (#560)\n\nCloses #546\nCloses #305\n\nCo-authored-by: Vladimir Kalugin <v.p.kalugin@tinkoff.ru>\nCo-authored-by: i.seliverstov <i.seliverstov@tinkoff.ru>\n\n### Bug Fixes\n\n- Resolve regression ([#561](https://github.com/ory/fosite/issues/561)) ([173d60e](https://github.com/ory/fosite/commit/173d60e5324c19c2323d2b8a731e201bf26845ce))\n\n### Features\n\n- Add support for urn:ietf:params:oauth:grant-type:jwt-bearer grant type RFC 7523\u0010 ([#560](https://github.com/ory/fosite/issues/560)) ([9720241](https://github.com/ory/fosite/commit/9720241c57e2154ed9fdb44fcf25e8c6b50410ee)), closes [#546](https://github.com/ory/fosite/issues/546) [#305](https://github.com/ory/fosite/issues/305)\n\n# [0.36.1](https://github.com/ory/fosite/compare/v0.36.0...v0.36.1) (2021-01-11)\n\nchore: bump deps\n\n### Bug Fixes\n\n- Broken dependency to reflection package ([#555](https://github.com/ory/fosite/issues/555)) ([a103222](https://github.com/ory/fosite/commit/a1032221363726bdcdc2f9b1c1898f99c62e8932))\n\n### Chores\n\n- Bump deps ([c2375de](https://github.com/ory/fosite/commit/c2375de6ff3229493b6a6ad628bf4e4961c8d989))\n\n### Code Refactoring\n\n- Use constructor ([#535](https://github.com/ory/fosite/issues/535)) ([2da54e3](https://github.com/ory/fosite/commit/2da54e3620a467e20d67ae05d0d3885a2383e4d4))\n- Use provided context ([#536](https://github.com/ory/fosite/issues/536)) ([35d4f13](https://github.com/ory/fosite/commit/35d4f133faa87076c7eb1c5e8384f3653643de9e))\n\n# [0.36.0](https://github.com/ory/fosite/compare/v0.35.1...v0.36.0) (2020-11-16)\n\nfix: be more permissive in time checks\n\nTime equality should not cause failures in OpenID Connect validation.\n\n## Breaking Changes\n\nThis patch removes fields `error_hint`, `error_debug` from error responses. To use the legacy error format where these fields are included, set `UseLegacyErrorFormat` to true in your compose config or directly on the `Fosite` struct. If `UseLegacyErrorFormat` is set, the `error_description` no longer merges `error_hint` nor `error_debug` messages which reverts a change introduced in `v0.33.0`. Instead, `error_hint` and `error_debug` are included and the merged message can be constructed from those fields.\n\nAs part of this change, the error interface and its fields have changed:\n\n- `RFC6749Error.Name` was renamed to `RFC6749Error.ErrorField`.\n- `RFC6749Error.Description` was renamed to `RFC6749Error.DescriptionField`.\n- `RFC6749Error.Hint` was renamed to `RFC6749Error.HintField`.\n- `RFC6749Error.Code` was renamed to `RFC6749Error.CodeField`.\n- `RFC6749Error.Hint` was renamed to `RFC6749Error.HintField`.\n- `RFC6749Error.WithCause()` was renamed to `RFC6749Error.WithWrap() *RFC6749Error` and alternatively to `RFC6749Error.Wrap()` (without return value) to standardize naming conventions around the new Go 1.14+ error interfaces.\n\nAs part of this change, methods `GetResponseMode`, `SetDefaultResponseMode`, `GetDefaultResponseMode ` where added to interface `AuthorizeRequester`. Also, methods `GetQuery`, `AddQuery`, and `GetFragment` were merged into one function `GetParameters` and `AddParameter` on the `AuthorizeResponder` interface. Methods on `AuthorizeRequest` and `AuthorizeResponse` changed accordingly and will need to be updated in your codebase. Additionally, the field `Debug` was renamed to `DebugField` and a new method `Debug() string` was added to `RFC6749Error`.\n\nCo-authored-by: hackerman <3372410+aeneasr@users.noreply.github.com>\n\n### Bug Fixes\n\n- Allow all request object algs when client value is unset ([1d14636](https://github.com/ory/fosite/commit/1d14636e61b2047e5eee6d1d740249b819fc0794)):\n\n  Allows all request object signing algorithms when the client has not explicitly allowed a certain algorithm. This follows the spec:\n\n  > \\*request_object_signing_alg - OPTIONAL. JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm. Request Objects are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. This algorithm MUST be used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter). Servers SHOULD support RS256. The value none MAY be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.\n\n- Always return non-error response for inactive tokens ([#517](https://github.com/ory/fosite/issues/517)) ([5f2cae3](https://github.com/ory/fosite/commit/5f2cae3eabb83da898e1b5515176e65dda4da862))\n- Be more permissive in time checks ([839d000](https://github.com/ory/fosite/commit/839d00093a2ed8c590d910f113186cd96fad9185)):\n\n  Time equality should not cause failures in OpenID Connect validation.\n\n- Do not accidentally leak jwks fetching errors ([6d2092d](https://github.com/ory/fosite/commit/6d2092da1e8699e43fd6dccb4c3a33b885cec7f8)), closes [/github.com/ory/fosite/pull/526#discussion_r517491738](https://github.com//github.com/ory/fosite/pull/526/issues/discussion_r517491738)\n- Do not require nonce for hybrid flows ([de5c8f9](https://github.com/ory/fosite/commit/de5c8f90e8ccae0849fa6426d53563ef7520880d)):\n\n  This patch resolves an issue where nonce was required for hybrid flows, which does not comply with the OpenID Connect conformity test suite, specifically the `oidcc-ensure-request-without-nonce-succeeds-for-code-flow` test.\n\n- Guess default response mode in `NewAuthorizeRequest` ([a2952d7](https://github.com/ory/fosite/commit/a2952d7ad09fbd83a354b22dbcc0cef8a15f50f7))\n- Improve claims handling for jwts ([a72ca9a](https://github.com/ory/fosite/commit/a72ca9a978e60d7c4b000c41357719f0e2b61f8e))\n- Improve error stack wrapping ([620d4c1](https://github.com/ory/fosite/commit/620d4c148307f7be7b2674fe420141b33aef6075))\n- Kid header is not required for key lookup ([27cc5c0](https://github.com/ory/fosite/commit/27cc5c0e935ecb8bca23dd8c2670c8a93f7b829d))\n- Modernized JWT stateless introspection ([#519](https://github.com/ory/fosite/issues/519)) ([a6bfb92](https://github.com/ory/fosite/commit/a6bfb921ebc746ba7a1215e32fb42a2c0530a2bf))\n- Only use allowed characters in error_description ([431f9a5](https://github.com/ory/fosite/commit/431f9a56ed03648ea4ef637fe6c2b6d74e765dad)), closes [#525](https://github.com/ory/fosite/issues/525):\n\n  Replace LF and quotes with `.` and `'` to match allowed and recommended character set defined in various RFCs.\n\n- Prevent debug details from leaking during key lookup ([c0598fb](https://github.com/ory/fosite/commit/c0598fb8d8ce75b7f0ad645420caea641e64a4d2)), closes [/github.com/ory/fosite/pull/526#discussion_r517490461](https://github.com//github.com/ory/fosite/pull/526/issues/discussion_r517490461)\n- Reset jti and hash ID token claims on refresh ([#523](https://github.com/ory/fosite/issues/523)) ([ce2de73](https://github.com/ory/fosite/commit/ce2de73ff979b02be32d850c1c695067a35576c7))\n- Use state from request object ([8cac1a0](https://github.com/ory/fosite/commit/8cac1a00a6f87523b88fea6962ab1194049cbacd)):\n\n  Resolves failing OIDC conformity test \"oidcc-request-uri-unsigned\".\n\n### Code Refactoring\n\n- Use rfc compliant error formating ([edbbda3](https://github.com/ory/fosite/commit/edbbda3c4cf70a77cdcd1383c55762c73613f87e))\n\n### Documentation\n\n- Document Session interface methods ([#512](https://github.com/ory/fosite/issues/512)) ([11a95ba](https://github.com/ory/fosite/commit/11a95ba00f562b3864fc0d6878c9d93943cc4273))\n- Updates banner in readme.md ([#529](https://github.com/ory/fosite/issues/529)) ([9718eb6](https://github.com/ory/fosite/commit/9718eb6ce63983ade0689908b5cce3e27c8838bc))\n\n### Features\n\n- Add support for response_mode=form_post ([#509](https://github.com/ory/fosite/issues/509)) ([3e3290f](https://github.com/ory/fosite/commit/3e3290f811f849881f1c6bafabc1c765d9a42ac7)):\n\n  This patch introduces support for `response_mode=form_post` as well as `response_mode` of `none` and `query` and `fragment`.\n\n  To support this new feature your OAuth2 Client must implement the `fosite.ResponseModeClient` interface. We suggest to always return all response modes there unless you want to explicitly disable one of the response modes:\n\n  ```go\n  func (c *Client) GetResponseModes() []fosite.ResponseModeType {\n  \treturn []fosite.ResponseModeType{\n  \t\tfosite.ResponseModeDefault,\n  \t\tfosite.ResponseModeFormPost,\n  \t\tfosite.ResponseModeQuery,\n  \t\tfosite.ResponseModeFragment,\n  \t}\n  }\n  ```\n\n- Improve error messages ([#513](https://github.com/ory/fosite/issues/513)) ([fcac5a6](https://github.com/ory/fosite/commit/fcac5a6457c92d1eb1a389192cd0c7fb590ab8b3))\n- Introduce WithExposeDebug to error interface ([625a521](https://github.com/ory/fosite/commit/625a5214c4a002b4d0f86e49555edf8755703968))\n- Support passing repeated audience parameter in URL query ([#518](https://github.com/ory/fosite/issues/518)) ([47f2a31](https://github.com/ory/fosite/commit/47f2a31fbed137b58e4866f78ec8b9f591134f98)), closes [#504](https://github.com/ory/fosite/issues/504):\n\n  Added `GetAudiences` helper function which tries to have current behavior and also support multiple/repeated audience parameters. If there are parameter is repeated, then it is not split by space. If there is only one then it is split by space. I think this is the best balance between standard/backwards behavior and allowing repeated parameter and allowing also URIs/audiences with spaces in them (which we probably all agree is probably not something anyone should be doing).\n\n  Also added `ExactAudienceMatchingStrategy` which is slightly more suitable to use for audiences which are not URIs. In [OIDC spec](https://openid.net/specs/openid-connect-core-1_0.html) audience is described as:\n\n  > Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value. It MAY also contain identifiers for other audiences. In the general case, the aud value is an array of case sensitive strings. In the common special case when there is one audience, the aud value MAY be a single case sensitive string.\n\n  `client_id` is generally not an URI, but some UUID or some other random string.\n\n# [0.35.1](https://github.com/ory/fosite/compare/v0.35.0...v0.35.1) (2020-10-11)\n\nautogen(docs): regenerate and update changelog\n\n### Bug Fixes\n\n- Uniform audience parsing ([#505](https://github.com/ory/fosite/issues/505)) ([e3f331d](https://github.com/ory/fosite/commit/e3f331d0d8e4470eef3dd7ecb46e66eeebfbe4c7))\n\n### Code Generation\n\n- **docs:** Regenerate and update changelog ([c598cc7](https://github.com/ory/fosite/commit/c598cc7fae17e70db2bad555cff94e97b2ca185b))\n\n### Documentation\n\n- Improved test descriptions ([#507](https://github.com/ory/fosite/issues/507)) ([29e9336](https://github.com/ory/fosite/commit/29e9336be5673530ae00e735c3dc7d191f4b03a6))\n\n### Features\n\n- Allow configuring redirect secure checker everywhere ([#489](https://github.com/ory/fosite/issues/489)) ([e87d091](https://github.com/ory/fosite/commit/e87d0910f3ee960dbc7b1bc0fef124c9b928a55c))\n- Scope can now be space delimited in access tokens ([#482](https://github.com/ory/fosite/issues/482)) ([8225935](https://github.com/ory/fosite/commit/8225935276d40a24da400d46ee7e7b63976488a1)), closes [#362](https://github.com/ory/fosite/issues/362)\n\n# [0.35.0](https://github.com/ory/fosite/compare/v0.34.1...v0.35.0) (2020-10-06)\n\nautogen(docs): regenerate and update changelog\n\n## Breaking Changes\n\nType `fosite.TokenType` has been renamed to `fosite.TokenUse`.\n\n### Bug Fixes\n\n- Redirct_url with query escape character outside of query is failing ([#480](https://github.com/ory/fosite/issues/480)) ([6e49c57](https://github.com/ory/fosite/commit/6e49c57c8f7a46a78eda4d3091765d631f427845)):\n\n  See https://github.com/ory/hydra/issues/2055\n\n  Co-authored-by: ajanthan <ca52ca6fe18c44787827017e14ca2d0c3c5bdb58>\n\n- Rename TokenType to TokenUse in introspection ([#486](https://github.com/ory/fosite/issues/486)) ([4b81316](https://github.com/ory/fosite/commit/4b81316a1dbb0c5246bac39ecbaff749b00e4efa)), closes [ory/hydra#1762](https://github.com/ory/hydra/issues/1762)\n- Return allowed redirect url with preference ([f0badc4](https://github.com/ory/fosite/commit/f0badc4919e00fa179dd54edcbd7385fac14fa19))\n\n### Code Generation\n\n- **docs:** Regenerate and update changelog ([3f0bc87](https://github.com/ory/fosite/commit/3f0bc875af230342d161de8516b7c0050f89d648))\n\n# [0.34.1](https://github.com/ory/fosite/compare/v0.34.0...v0.34.1) (2020-10-02)\n\nfix: make redirect URL checking more strict\n\nThe OAuth 2.0 Client's Redirect URL and the Redirect URL used in the OAuth 2.0 flow do not check if the query string is equal:\n\n1. Registering a client with allowed redirect URL `https://example.com/callback`\n2. Performing OAuth2 flow and requesting redirect URL `https://example.com/callback?bar=foo`\n3. Instead of an error, the browser is redirected to `https://example.com/callback?bar=foo` with a potentially successful OAuth2 response.\n\nAdditionally, matching Redirect URLs used `strings.ToLower` normalization:\n\n1. Registering a client with allowed redirect URL `https://example.com/callback`\n2. Performing OAuth2 flow and requesting redirect URL `https://example.com/CALLBACK`\n3. Instead of an error, the browser is redirected to `https://example.com/CALLBACK ` with a potentially successful OAuth2 response.\n\nThis patch addresses all of these issues and adds regression tests to keep the implementation secure in future releases.\n\n### Bug Fixes\n\n- Make redirect URL checking more strict ([cdee51e](https://github.com/ory/fosite/commit/cdee51ebe721bfc8acca0fd0b86b030ca70867bf)):\n\n  The OAuth 2.0 Client's Redirect URL and the Redirect URL used in the OAuth 2.0 flow do not check if the query string is equal:\n\n  1. Registering a client with allowed redirect URL `https://example.com/callback`\n  2. Performing OAuth2 flow and requesting redirect URL `https://example.com/callback?bar=foo`\n  3. Instead of an error, the browser is redirected to `https://example.com/callback?bar=foo` with a potentially successful OAuth2 response.\n\n  Additionally, matching Redirect URLs used `strings.ToLower` normalization:\n\n  1. Registering a client with allowed redirect URL `https://example.com/callback`\n  2. Performing OAuth2 flow and requesting redirect URL `https://example.com/CALLBACK`\n  3. Instead of an error, the browser is redirected to `https://example.com/CALLBACK ` with a potentially successful OAuth2 response.\n\n  This patch addresses all of these issues and adds regression tests to keep the implementation secure in future releases.\n\n### Documentation\n\n- Added missing dot ([#487](https://github.com/ory/fosite/issues/487)) ([a822244](https://github.com/ory/fosite/commit/a82224430292b2f209d011f107998273d568912b))\n\n# [0.34.0](https://github.com/ory/fosite/compare/v0.33.0...v0.34.0) (2020-09-24)\n\nchore: fix unused const linter error (#484)\n\n## Breaking Changes\n\n`fosite.ErrRevocationClientMismatch` was removed because it is not part of [RFC 6749](https://tools.ietf.org/html/rfc6749#section-5.2). Instead, `fosite.ErrUnauthorizedClient` will be returned when calling `RevokeToken` with an OAuth2 Client which does not match the Access or Refresh Token to be revoked.\n\n### Bug Fixes\n\n- Full JSON escaping ([#481](https://github.com/ory/fosite/issues/481)) ([0943a10](https://github.com/ory/fosite/commit/0943a1095a209fdfb2f8a29524b676ee9c9650a1))\n- Ignore x/net false positives ([#483](https://github.com/ory/fosite/issues/483)) ([aead149](https://github.com/ory/fosite/commit/aead1499deb8b08f48bcc196a88e5715702b5431))\n\n### Chores\n\n- Fix unused const linter error ([#484](https://github.com/ory/fosite/issues/484)) ([3540462](https://github.com/ory/fosite/commit/354046265cd4ffcbff8465e4b7a7ea7b6741c5e4))\n\n### Features\n\n- Errors now wrap underlying errors ([#479](https://github.com/ory/fosite/issues/479)) ([b53f8f5](https://github.com/ory/fosite/commit/b53f8f58f0b9889d044cf9a8e2604316f0559ff6)), closes [#458](https://github.com/ory/fosite/issues/458)\n\n### Unclassified\n\n- Merge pull request from GHSA-7mqr-2v3q-v2wm ([03dd558](https://github.com/ory/fosite/commit/03dd55813f5521985f7dd64277b7ba0cf1441319))\n\n# [0.33.0](https://github.com/ory/fosite/compare/v0.32.4...v0.33.0) (2020-09-16)\n\nfeat: error_hint and error_debug are now exposed through error_description (#460)\n\nBREAKING CHANGE: Merges the error description with error hint and error debug, making it easier to consume error messages in standardized OAuth2 clients.\n\n## Breaking Changes\n\nMerges the error description with error hint and error debug, making it easier to consume error messages in standardized OAuth2 clients.\n\n### Features\n\n- Error_hint and error_debug are now exposed through error_description ([#460](https://github.com/ory/fosite/issues/460)) ([8daab21](https://github.com/ory/fosite/commit/8daab21f97c513101d224a7ad7a44b871440be57))\n\n# [0.32.4](https://github.com/ory/fosite/compare/v0.32.3...v0.32.4) (2020-09-15)\n\nautogen(docs): regenerate and update changelog\n\n### Code Generation\n\n- **docs:** Regenerate and update changelog ([1f16df0](https://github.com/ory/fosite/commit/1f16df0862bbcdfba98644d1c8fce8a9f92bbbec))\n\n### Code Refactoring\n\n- Fix inconsistent spelling of revocation ([#477](https://github.com/ory/fosite/issues/477)) ([7a55edb](https://github.com/ory/fosite/commit/7a55edbb67738a721c5f1a8f58d2db67f6738f65))\n\n### Documentation\n\n- Fix minor typos ([#475](https://github.com/ory/fosite/issues/475)) ([23cc9c1](https://github.com/ory/fosite/commit/23cc9c1d29f35a73acbf05fe6b505b692f6fe49c))\n\n# [0.32.3](https://github.com/ory/fosite/compare/v0.32.2...v0.32.3) (2020-09-12)\n\nfix: add missing OAuth2TokenRevocationFactory to ComposeAllEnabled (#472)\n\n### Bug Fixes\n\n- Add missing OAuth2TokenRevocationFactory to ComposeAllEnabled ([#472](https://github.com/ory/fosite/issues/472)) ([88587fd](https://github.com/ory/fosite/commit/88587fde8fc92137660383c401250e492716c396))\n- Align error returned when a grant_type was requested that's not allowed for a client ([#467](https://github.com/ory/fosite/issues/467)) ([3c30c0d](https://github.com/ory/fosite/commit/3c30c0d9f1e62b237acc845d5b3a42d1ea9a80c0)), closes [/tools.ietf.org/html/rfc6749#section-5](https://github.com//tools.ietf.org/html/rfc6749/issues/section-5):\n\n  Returned error was 'invalid_grant'.\n\n- All responses now contain headers to not cache them ([#465](https://github.com/ory/fosite/issues/465)) ([2012cb7](https://github.com/ory/fosite/commit/2012cb7ec6feb504d1faa6e393fce8d25edafebb))\n- No cache headers followup ([#466](https://github.com/ory/fosite/issues/466)) ([1627c6a](https://github.com/ory/fosite/commit/1627c6ab31cb151f01671cd3403bc3c7de6fcfbd))\n\n### Code Refactoring\n\n- Copy all values when sanitizing ([#455](https://github.com/ory/fosite/issues/455)) ([c80d0d4](https://github.com/ory/fosite/commit/c80d0d42a34f8cf664d44c687d7cfea576a0b232))\n\n### Documentation\n\n- Add empty session example explanation ([#450](https://github.com/ory/fosite/issues/450)) ([36d65cb](https://github.com/ory/fosite/commit/36d65cbc061ff6cae38e90b0a6954646c8daf5d7))\n- Better section reference for GetRedirectURIFromRequestValues ([#463](https://github.com/ory/fosite/issues/463)) ([48a3daf](https://github.com/ory/fosite/commit/48a3daf45bd1885c4412eeb9b2bc3117b6075de9))\n- Deprecate history.md ([b0d5fea](https://github.com/ory/fosite/commit/b0d5feacfcbeedf609563fa8567bd0e031b179b5)), closes [/github.com/ory/fosite/issues/414#issuecomment-662538622](https://github.com//github.com/ory/fosite/issues/414/issues/issuecomment-662538622)\n\n### Features\n\n- Add locking to memory storage ([#471](https://github.com/ory/fosite/issues/471)) ([4687147](https://github.com/ory/fosite/commit/46871476b1f47cefc09888615f70dd9fdd5af8b3))\n- Make MinParameterEntropy configurable ([#461](https://github.com/ory/fosite/issues/461)) ([2c793e6](https://github.com/ory/fosite/commit/2c793e6c010ac6cbc552200197ae1262d91c2bda)), closes [#267](https://github.com/ory/fosite/issues/267)\n- New compose strategies for ES256 ([#446](https://github.com/ory/fosite/issues/446)) ([39053ee](https://github.com/ory/fosite/commit/39053eedaa687fe1d8dbe8b928fb98cd5ce8c021))\n\n# [0.32.2](https://github.com/ory/fosite/compare/v0.32.1...v0.32.2) (2020-06-22)\n\nfeat: new factory with default issuer for JWT tokens (#444)\n\n### Features\n\n- New factory with default issuer for JWT tokens ([#444](https://github.com/ory/fosite/issues/444)) ([901e206](https://github.com/ory/fosite/commit/901e206d03b615c189e12f94607d92c10d6909fa))\n\n# [0.32.1](https://github.com/ory/fosite/compare/v0.32.0...v0.32.1) (2020-06-05)\n\nfeat: makeRemoveEmpty public (#443)\n\n### Bug Fixes\n\n- Improved error messages in client authentication ([#440](https://github.com/ory/fosite/issues/440)) ([c06e560](https://github.com/ory/fosite/commit/c06e5608c7ae6a0243428252e6ec80bc37ae33ca)), closes [#436](https://github.com/ory/fosite/issues/436)\n\n### Features\n\n- MakeRemoveEmpty public ([#443](https://github.com/ory/fosite/issues/443)) ([17b0756](https://github.com/ory/fosite/commit/17b075688f9a012b09e650e90d765de6d4d538cf))\n\n# [0.32.0](https://github.com/ory/fosite/compare/v0.31.3...v0.32.0) (2020-05-28)\n\nfeat: added support for ES256 token strategy and client authentication (#439)\n\nI added to `DefaultOpenIDConnectClient` a field `TokenEndpointAuthSigningAlgorithm` to be able to configure what `GetTokenEndpointAuthSigningAlgorithm` returns. I also cleaned some other places where there were assumptions about only RSA keys.\n\nCloses #429\n\n### Bug Fixes\n\n- **arguments:** Fixes a logic bug in MatchesExact and adds documentation ([#433](https://github.com/ory/fosite/issues/433)) ([10fd67b](https://github.com/ory/fosite/commit/10fd67bf84118affc9269ca0c0dbc8da4b0bf2cd)):\n\n- Double-decoding of client credentials in request body ([#434](https://github.com/ory/fosite/issues/434)) ([48c9b41](https://github.com/ory/fosite/commit/48c9b41ea2dc89ec2bf58ba918c45c8430bb0ccd)):\n\n  I noticed that client credentials are URL-decoded after being extracted from the POST body form, which was already URL-decoded by Go. The accompanying error message suggests this was copied and pasted from the HTTP basic authorization header handling, which is the only place where the extra URL-decoding was needed (as per the OAuth 2.0 spec). The result is that client credentials containing %-prefixed sequences, whether valid sequences or not, are going to fail validation.\n\n  Remove the extra URL decoding. Add tests that ensure client credentials work with special characters in both the HTTP basic auth header and in the request body.\n\n### Documentation\n\n- Update github templates ([#432](https://github.com/ory/fosite/issues/432)) ([b393832](https://github.com/ory/fosite/commit/b393832765e0c97661bb5495e3a3d51a8019afd7))\n- Update repository templates ([a840a62](https://github.com/ory/fosite/commit/a840a62e401b4111f8304fa8b963006a866a20f8))\n\n### Features\n\n- Added support for ES256 token strategy and client authentication ([#439](https://github.com/ory/fosite/issues/439)) ([36eb661](https://github.com/ory/fosite/commit/36eb661cc8b609877d8e81c849c34631bbab245a)), closes [#429](https://github.com/ory/fosite/issues/429):\n\n  I added to `DefaultOpenIDConnectClient` a field `TokenEndpointAuthSigningAlgorithm` to be able to configure what `GetTokenEndpointAuthSigningAlgorithm` returns. I also cleaned some other places where there were assumptions about only RSA keys.\n\n# [0.31.3](https://github.com/ory/fosite/compare/v0.31.2...v0.31.3) (2020-05-09)\n\nfeat(pkce): add EnforcePKCEForPublicClients config flag (#431)\n\nAlternative proposal for the issue discussed in #389 and #391, where enforcement of PKCE is wanted only for certain clients.\n\nAdd a new flag EnforcePKCEForPublicClients which enforces PKCE only for public clients. The error hint is slightly different, as it mentions PKCE is enforced for \"this client\" rather than \"clients\". (It intentionally does not mention why it's enforced, as I think basing it on public clients is an implementation detail that servers may want to change without adding to the error hints).\n\nCloses #389\nCloses #391\n\n### Bug Fixes\n\n- Do not issue refresh tokens to clients who cannot use it ([#430](https://github.com/ory/fosite/issues/430)) ([792670d](https://github.com/ory/fosite/commit/792670d0e81ff83f2b345502ea7adadf99bcaa9b)), closes [#370](https://github.com/ory/fosite/issues/370)\n\n### Features\n\n- **pkce:** Add EnforcePKCEForPublicClients config flag ([#431](https://github.com/ory/fosite/issues/431)) ([9f53c84](https://github.com/ory/fosite/commit/9f53c843e4a72d0ff34acb084e5a920d7114278f)), closes [#389](https://github.com/ory/fosite/issues/389) [#391](https://github.com/ory/fosite/issues/391) [#389](https://github.com/ory/fosite/issues/389) [#391](https://github.com/ory/fosite/issues/391)\n\n# [0.31.2](https://github.com/ory/fosite/compare/v0.31.1...v0.31.2) (2020-04-16)\n\nfix: introduce better linting pipeline and resolve Go issues (#428)\n\n### Bug Fixes\n\n- Introduce better linting pipeline and resolve Go issues ([#428](https://github.com/ory/fosite/issues/428)) ([e02f731](https://github.com/ory/fosite/commit/e02f731a41fb82ac8d6b62ea3f6fd8a915526090))\n\n# [0.31.1](https://github.com/ory/fosite/compare/v0.31.0...v0.31.1) (2020-04-16)\n\nfix: return invalid_grant instead of invalid_request in refresh flow (#427)\n\nReturn invalid_grant instead of invalid_request when in authorization code flow when the user is not the owner of the authorization code or if the redirect uri doesn't match from the authorization request.\n\nCo-authored-by: Damien Bravin <damienbr@users.noreply.github.com>\n\n### Bug Fixes\n\n- List all response types in example memory store ([#413](https://github.com/ory/fosite/issues/413)) ([427d40d](https://github.com/ory/fosite/commit/427d40dcaadab6933a4e571def7d9729fd442581)), closes [#304](https://github.com/ory/fosite/issues/304)\n- Return invalid_grant instead of invalid_request in refresh flow ([#427](https://github.com/ory/fosite/issues/427)) ([f5a0e96](https://github.com/ory/fosite/commit/f5a0e9696750e3f1d67bd919a6588b175e7cc2bb)):\n\n  Return invalid_grant instead of invalid_request when in authorization code flow when the user is not the owner of the authorization code or if the redirect uri doesn't match from the authorization request.\n\n- **storage:** Remove unused field ([#422](https://github.com/ory/fosite/issues/422)) ([d2eb3b9](https://github.com/ory/fosite/commit/d2eb3b9ff5f52810067ac59969a3c4272772bdb3)), closes [#417](https://github.com/ory/fosite/issues/417)\n- **storage:** Remove unused methods ([#417](https://github.com/ory/fosite/issues/417)) ([023bdcf](https://github.com/ory/fosite/commit/023bdcf1217b8f86de250f53391ad3b1e356949d))\n\n### Documentation\n\n- Fix various typos ([#415](https://github.com/ory/fosite/issues/415)) ([719aaa0](https://github.com/ory/fosite/commit/719aaa0b695f02556167f02fc94133a380ccfa16))\n- Replace Discord with Slack ([#412](https://github.com/ory/fosite/issues/412)) ([d8591bb](https://github.com/ory/fosite/commit/d8591bba33d16b61e6c611b7042d695166bd94e5))\n- Update github templates ([#424](https://github.com/ory/fosite/issues/424)) ([d37fc4b](https://github.com/ory/fosite/commit/d37fc4babe43b52c92eb081b9ea78c0fa9f51865))\n- Update github templates ([#425](https://github.com/ory/fosite/issues/425)) ([0399871](https://github.com/ory/fosite/commit/039987119ea78d69fe991bbb0edb6735b88b16cc))\n- Update SetSession comment ([#423](https://github.com/ory/fosite/issues/423)) ([32951ab](https://github.com/ory/fosite/commit/32951ab56fb3400ff6980519c2e6e20802292f2f))\n- Updates issue and pull request templates ([#419](https://github.com/ory/fosite/issues/419)) ([d804da1](https://github.com/ory/fosite/commit/d804da1e3dfda46872d358d2987bd19462c03e98))\n\n# [0.31.0](https://github.com/ory/fosite/compare/v0.30.6...v0.31.0) (2020-03-29)\n\nMerge pull request from GHSA-v3q9-2p3m-7g43\n\n- u\n\n- u\n\n### Unclassified\n\n- Merge pull request from GHSA-v3q9-2p3m-7g43 ([0c9e0f6](https://github.com/ory/fosite/commit/0c9e0f6d654913ad57c507dd9a36631e1858a3e9)):\n\n  - u\n\n  - u\n\n# [0.30.6](https://github.com/ory/fosite/compare/v0.30.5...v0.30.6) (2020-03-26)\n\nfix: handle serialization errors that can be thrown by call to 'Commit' (#403)\n\n### Bug Fixes\n\n- Handle serialization errors that can be thrown by call to 'Commit' ([#403](https://github.com/ory/fosite/issues/403)) ([35a1558](https://github.com/ory/fosite/commit/35a1558d8d845ac15bc6ec99fb4be062716b231a))\n\n### Documentation\n\n- Update forum and chat links ([b1ba04e](https://github.com/ory/fosite/commit/b1ba04e447d6dfdaf9f0c84336d3bacab41b2c8d))\n\n# [0.30.5](https://github.com/ory/fosite/compare/v0.30.4...v0.30.5) (2020-03-25)\n\nfix: handle concurrent transactional errors in the refresh token grant handler (#402)\n\nThis commit provides the functionality required to address https://github.com/ory/hydra/issues/1719 & https://github.com/ory/hydra/issues/1735 by adding error checking to the RefreshTokenGrantHandler's PopulateTokenEndpointResponse method so it can deal with errors due to concurrent access. This will allow the authorization server to render a better error to the user-agent.\n\nNo longer returns fosite.ErrServerError in the event the storage. Instead a wrapped fosite.ErrNotFound is returned when fetching the refresh token fails due to it no longer being present. This scenario is caused when the user sends two or more request to refresh using the same token and one request gets into the handler just after the prior request finished and successfully committed its transaction.\n\nAdds unit test coverage for transaction error handling logic added to the RefreshTokenGrantHandler's PopulateTokenEndpointResponse method\n\n### Bug Fixes\n\n- Handle concurrent transactional errors in the refresh token grant handler ([#402](https://github.com/ory/fosite/issues/402)) ([b17190b](https://github.com/ory/fosite/commit/b17190b4964e911d6f94379873139cdfc3def5bd)):\n\n  This commit provides the functionality required to address https://github.com/ory/hydra/issues/1719 & https://github.com/ory/hydra/issues/1735 by adding error checking to the RefreshTokenGrantHandler's PopulateTokenEndpointResponse method so it can deal with errors due to concurrent access. This will allow the authorization server to render a better error to the user-agent.\n\n  No longer returns fosite.ErrServerError in the event the storage. Instead a wrapped fosite.ErrNotFound is returned when fetching the refresh token fails due to it no longer being present. This scenario is caused when the user sends two or more request to refresh using the same token and one request gets into the handler just after the prior request finished and successfully committed its transaction.\n\n  Adds unit test coverage for transaction error handling logic added to the RefreshTokenGrantHandler's PopulateTokenEndpointResponse method\n\n# [0.30.4](https://github.com/ory/fosite/compare/v0.30.3...v0.30.4) (2020-03-17)\n\nfix: add ability to specify amr values natively in id_token payload (#401)\n\nSee ory/hydra#1756\n\n### Bug Fixes\n\n- Add ability to specify amr values natively in id_token payload ([#401](https://github.com/ory/fosite/issues/401)) ([f99bb80](https://github.com/ory/fosite/commit/f99bb8012a583b25fd591718a51308c208cb9a55)), closes [ory/hydra#1756](https://github.com/ory/hydra/issues/1756)\n\n# [0.30.3](https://github.com/ory/fosite/compare/v0.30.2...v0.30.3) (2020-03-04)\n\nfix: Support RFC8252#section-7.3 Loopback Interface Redirection (#400)\n\nCloses #284\n\n### Bug Fixes\n\n- Merge request ID as well ([#398](https://github.com/ory/fosite/issues/398)) ([67c081c](https://github.com/ory/fosite/commit/67c081cb5cb650e7095d7343a618484103cf8bb5)), closes [#386](https://github.com/ory/fosite/issues/386)\n- Support RFC8252#section-7.3 Loopback Interface Redirection ([#400](https://github.com/ory/fosite/issues/400)) ([4104135](https://github.com/ory/fosite/commit/41041350c06853d490e94849b25d0fee87a95a32)), closes [RFC8252#section-7](https://github.com/RFC8252/issues/section-7) [#284](https://github.com/ory/fosite/issues/284)\n\n### Documentation\n\n- Add undocumented ExactScopeStrategy ([#395](https://github.com/ory/fosite/issues/395)) ([387cade](https://github.com/ory/fosite/commit/387cade4c6e96e0b83df274da5835691e54d07af))\n- Updates issue and pull request templates ([#393](https://github.com/ory/fosite/issues/393)) ([cdefb3e](https://github.com/ory/fosite/commit/cdefb3e99e73b69e62a449de489b0e806d5158af))\n- Updates issue and pull request templates ([#394](https://github.com/ory/fosite/issues/394)) ([119e6ab](https://github.com/ory/fosite/commit/119e6ab6d83ab8dee3fd31085153f64ca008582a))\n\n### Features\n\n- Add ExactOne and MatchesExact to Arguments ([#399](https://github.com/ory/fosite/issues/399)) ([cf23400](https://github.com/ory/fosite/commit/cf23400930e63a6d5244262d284ddc79943775e6)):\n\n  Previously Arguments.Exact had vague semantic where\n  it coudln't distinguish between value with a space and multiple\n  values. Split it into 2 functions with clear semantic.\n\n  Old .Exact() remains for compatibility and marked as deprecated\n\n# [0.30.2](https://github.com/ory/fosite/compare/v0.30.1...v0.30.2) (2019-11-21)\n\nReturn state parameter in authorization error conditions (#388)\n\nRelated to ory/hydra#1642\n\n### Unclassified\n\n- Return state parameter in authorization error conditions (#388) ([3ece795](https://github.com/ory/fosite/commit/3ece795f3080db5de3529cea9bfa670e70704686)), closes [#388](https://github.com/ory/fosite/issues/388) [ory/hydra#1642](https://github.com/ory/hydra/issues/1642)\n- Revert incorrect license changes ([40a49f7](https://github.com/ory/fosite/commit/40a49f743dff60d07b6314667933a47dbf2635aa))\n\n# [0.30.1](https://github.com/ory/fosite/compare/v0.30.0...v0.30.1) (2019-09-23)\n\npkce: Enforce verifier formatting (#383)\n\n### Unclassified\n\n- Enforce verifier formatting ([#383](https://github.com/ory/fosite/issues/383)) ([024667a](https://github.com/ory/fosite/commit/024667ac1905a4d0274294ab552f3566e2eb3b6a))\n\n# [0.30.0](https://github.com/ory/fosite/compare/v0.29.8...v0.30.0) (2019-09-16)\n\nhandler/pkce: Enable PKCE for private clients (#382)\n\n### Unclassified\n\n- handler/pkce: Enable PKCE for private clients (#382) ([e21830e](https://github.com/ory/fosite/commit/e21830ec0c0c37ca6ca5544b1362c85abe38b80f)), closes [#382](https://github.com/ory/fosite/issues/382)\n- Add RefreshTokenScopes Config (#371) ([bcc7859](https://github.com/ory/fosite/commit/bcc78599eadbff38dc0efc9370e5ef64eadfefa9)), closes [#371](https://github.com/ory/fosite/issues/371):\n\n  When set to true, this will return refresh tokens even if the user did\n  not ask for the offline or offline_access Oauth Scope.\n\n# [0.29.8](https://github.com/ory/fosite/compare/v0.29.7...v0.29.8) (2019-08-29)\n\nhandler/revoke: respecting ErrInvalidRequest code (#380)\n\nThis commit modifies the case for ErrInvalidRequest in\nWriteRevocationResponse to respect the 400 error code\nand not fallthrough to ErrInvalidClient.\n\nAuthor: DefinitelyNotAGoat <baldrich@protonmail.com>\n\n### Documentation\n\n- Updates issue and pull request templates ([#376](https://github.com/ory/fosite/issues/376)) ([165e93e](https://github.com/ory/fosite/commit/165e93eeff7d187af682f7f958b39e2393d15821))\n- Updates issue and pull request templates ([#377](https://github.com/ory/fosite/issues/377)) ([40590cb](https://github.com/ory/fosite/commit/40590cbaa45167dff2085483ccf5b4bddb37e422))\n- Updates issue and pull request templates ([#378](https://github.com/ory/fosite/issues/378)) ([54426bb](https://github.com/ory/fosite/commit/54426bbf3d3bb125753aaf7fda5a7ded5effdf4c))\n\n### Unclassified\n\n- handler/revoke: respecting ErrInvalidRequest code (#380) ([cc34bfb](https://github.com/ory/fosite/commit/cc34bfb4f970d25f59948dcdcbc0eb587ae78d6d)), closes [#380](https://github.com/ory/fosite/issues/380):\n\n  This commit modifies the case for ErrInvalidRequest in\n  WriteRevocationResponse to respect the 400 error code\n  and not fallthrough to ErrInvalidClient.\n\n  Author: DefinitelyNotAGoat <baldrich@protonmail.com>\n\n# [0.29.7](https://github.com/ory/fosite/compare/v0.29.6...v0.29.7) (2019-08-06)\n\npkce: Return error when PKCE is used with private clients (#375)\n\n### Documentation\n\n- Fix method/struct documents ([#360](https://github.com/ory/fosite/issues/360)) ([ad06f22](https://github.com/ory/fosite/commit/ad06f2266b28b3d1844f36e97c1118822fd2a46c))\n- Updates issue and pull request templates ([#361](https://github.com/ory/fosite/issues/361)) ([35157e2](https://github.com/ory/fosite/commit/35157e2a5174f1a8ee9074452b77953e35c4161c))\n- Updates issue and pull request templates ([#365](https://github.com/ory/fosite/issues/365)) ([90a3c50](https://github.com/ory/fosite/commit/90a3c509e718445b799821fac400aad28d9de928))\n- Updates issue and pull request templates ([#366](https://github.com/ory/fosite/issues/366)) ([27c64ec](https://github.com/ory/fosite/commit/27c64ec1b7d12ee1b1e1e0d35dc6b24f7ade92e0))\n- Updates issue and pull request templates ([#367](https://github.com/ory/fosite/issues/367)) ([01cd955](https://github.com/ory/fosite/commit/01cd955efe9a00c014a5ef7488774c3913e7218d))\n- Updates issue and pull request templates ([#373](https://github.com/ory/fosite/issues/373)) ([5962474](https://github.com/ory/fosite/commit/5962474c904f80517d1a9c2731e703ffda972d6a))\n- Updates issue and pull request templates ([#374](https://github.com/ory/fosite/issues/374)) ([9f7cf40](https://github.com/ory/fosite/commit/9f7cf409a643b72cfa25dd2f1340f1aa1c17c443))\n\n### Unclassified\n\n- Create FUNDING.yml ([1b7b479](https://github.com/ory/fosite/commit/1b7b479ca040f95f3ea4cff642c7f678df5cb0ab))\n- Return error when PKCE is used with private clients ([#375](https://github.com/ory/fosite/issues/375)) ([7219387](https://github.com/ory/fosite/commit/72193870c9914dc97c1117a566c68bede0bf5290))\n\n# [0.29.6](https://github.com/ory/fosite/compare/v0.29.5...v0.29.6) (2019-04-26)\n\nopenid: Allow promp=none for https/localhost (#359)\n\nSigned-off-by: aeneasr <aeneas@ory.sh>\n\n### Unclassified\n\n- Allow promp=none for https/localhost ([#359](https://github.com/ory/fosite/issues/359)) ([27bbe00](https://github.com/ory/fosite/commit/27bbe0033273157ea449310c064675127e2550e6))\n\n# [0.29.5](https://github.com/ory/fosite/compare/v0.29.4...v0.29.5) (2019-04-25)\n\ncore: Add debug log to invalid_client error(#358)\n\nSigned-off-by: nerocrux <nerocrux@gmail.com>\n\n### Unclassified\n\n- Add debug log to invalid_client error([#358](https://github.com/ory/fosite/issues/358)) ([dce3111](https://github.com/ory/fosite/commit/dce3111ad0dac62911c19d9b6ea4cb776f087c4d))\n\n# [0.29.3](https://github.com/ory/fosite/compare/v0.29.2...v0.29.3) (2019-04-17)\n\nExport IsLocalhost\n\nSigned-off-by: aeneasr <aeneas@ory.sh>\n\n### Unclassified\n\n- Export IsLocalhost ([a95ea09](https://github.com/ory/fosite/commit/a95ea092ef682cd5fe3449c23245d211444f28cb))\n- Improve IsRedirectURISecure check ([d6f8962](https://github.com/ory/fosite/commit/d6f8962de5336ce17128b1fd238cba13862c85a7))\n\n# [0.29.2](https://github.com/ory/fosite/compare/v0.29.1...v0.29.2) (2019-04-11)\n\nAllow providing a custom redirect URI checker (#355)\n\nSigned-off-by: aeneasr <aeneas@ory.sh>\n\n### Unclassified\n\n- Allow providing a custom redirect URI checker (#355) ([3d16e39](https://github.com/ory/fosite/commit/3d16e39a3b25cb5d77b8b10cb568c9bc2a835356)), closes [#355](https://github.com/ory/fosite/issues/355)\n\n# [0.29.1](https://github.com/ory/fosite/compare/v0.29.0...v0.29.1) (2019-03-27)\n\ntoken: Improve rotated secret error reporting in HMAC strategy (#354)\n\nSigned-off-by: aeneasr <aeneas@ory.sh>\n\n### Unclassified\n\n- Improve rotated secret error reporting in HMAC strategy ([#354](https://github.com/ory/fosite/issues/354)) ([f21d930](https://github.com/ory/fosite/commit/f21d930291ada9e609ea5018693d6e4745815f03))\n- Propagate session data properly ([#353](https://github.com/ory/fosite/issues/353)) ([5ba0f04](https://github.com/ory/fosite/commit/5ba0f0465039e7072593205b1252e630d340d6ab)):\n\n  This example is slightly inaccurate; the session data will need to come from the returned AccessRequester, not the pre-created session. The session passed to IntrospectToken isn't mutated.\n\n- Remove useless details fn receiver ([#349](https://github.com/ory/fosite/issues/349)) ([af403c6](https://github.com/ory/fosite/commit/af403c6fac913736a05ca0c44765b10baaf89295))\n- Update HISTORY.md, README.md, CONTRIBUTING.md ([#347](https://github.com/ory/fosite/issues/347)) ([de5e61e](https://github.com/ory/fosite/commit/de5e61e0eb445af57e692964057ea8e661f98618)):\n\n  - README: Breaks out `0.26.0` as was stuck inside a code block.\n  - README: Ensures the later versions formats code blocks as Go code.\n  - Runs doctoc to ensure TOCs are up to date.\n\n# [0.29.0](https://github.com/ory/fosite/compare/v0.28.1...v0.29.0) (2018-12-23)\n\noauth2: add test coverage to exercise the transactional support in the AuthorizeExplicitGrantHandler's PopulateTokenEndpointResponse method.\n\nSigned-off-by: Amir Aslaminejad <aslaminejad@gmail.com>\n\n### Unclassified\n\n- Add mock for storage.Transactional + update generate-mocks.sh ([03f7bc8](https://github.com/ory/fosite/commit/03f7bc8e59f15d7b9c0df47c8c77c106f3fd4a0c))\n- Add test coverage to exercise the transactional support in the AuthorizeExplicitGrantHandler's PopulateTokenEndpointResponse method. ([2f58f9e](https://github.com/ory/fosite/commit/2f58f9e0ea1a197c8b7eb62dc545d9467ed2ff10))\n- Add test coverage to exercise the transactional support in the RefreshTokenGrantHandler's PopulateTokenEndpointResponse method. ([b38d7c8](https://github.com/ory/fosite/commit/b38d7c89b9a45b7576af379b2dc479ddb880195c))\n- Adds new interface `Transactional` which is to be implemented by storage providers that can support transactions. ([c364b33](https://github.com/ory/fosite/commit/c364b33eefe813da4da02fc78d9e72e1d5301234))\n- Don't double encode URL fragments ([#346](https://github.com/ory/fosite/issues/346)) ([1f41934](https://github.com/ory/fosite/commit/1f419341886c8e37a10c68d7a5c8d576176e666a)), closes [#345](https://github.com/ory/fosite/issues/345)\n- Use transactions in the auth code token flow (if the storage implementation implements the `Transactional` interface) to address [#309](https://github.com/ory/fosite/issues/309) ([e00c567](https://github.com/ory/fosite/commit/e00c5675182eb5d90644160c0f3f1b10f0f287f4))\n- Use transactions in the refresh token flow (if the storage implementation implements the `Transactional` interface) to address [#309](https://github.com/ory/fosite/issues/309) ([07d1a39](https://github.com/ory/fosite/commit/07d1a3974ff6d53c239c4050703b09928f484e01))\n\n# [0.28.1](https://github.com/ory/fosite/compare/v0.28.0...v0.28.1) (2018-12-04)\n\ncompose: Expose token entropy setting (#342)\n\nSigned-off-by: nerocrux <nerocrux@gmail.com>\n\n### Unclassified\n\n- Remove cryptopasta dependency (#339) ([b156e6b](https://github.com/ory/fosite/commit/b156e6b48383926974a560bb416a9ac7507347ec)), closes [#339](https://github.com/ory/fosite/issues/339)\n- Expose token entropy setting ([#342](https://github.com/ory/fosite/issues/342)) ([0761fca](https://github.com/ory/fosite/commit/0761fcae7e6ecd0f7d16c51a3c7fa3891d85d85b))\n\n# [0.28.0](https://github.com/ory/fosite/compare/v0.27.4...v0.28.0) (2018-11-16)\n\noauth2: Add ability to specify refresh token lifespan (#337)\n\nSet it to `-1` to disable this feature. Defaults to 30 days.\n\nCloses #319\n\nSigned-off-by: arekkas <aeneas@ory.am>\n\n### Unclassified\n\n- Add ability to specify refresh token lifespan ([#337](https://github.com/ory/fosite/issues/337)) ([fa65408](https://github.com/ory/fosite/commit/fa654089e09900d842117827ec2f6258323ec436)), closes [#319](https://github.com/ory/fosite/issues/319):\n\n  Set it to `-1` to disable this feature. Defaults to 30 days.\n\n# [0.27.4](https://github.com/ory/fosite/compare/v0.27.3...v0.27.4) (2018-11-12)\n\ndocs: Fix quickstart (#335)\n\n- replace NewMemoryStore with NewExampleStore\n- fix length of signing key\n- fix config type\n\nSigned-off-by: Peter Schultz <peter.schultz@classmarkets.com>\n\n### Documentation\n\n- Fix quickstart ([#335](https://github.com/ory/fosite/issues/335)) ([25cc6c4](https://github.com/ory/fosite/commit/25cc6c42e2befe3b200d79c9d8edac47cc6d3f86)):\n\n  - replace NewMemoryStore with NewExampleStore\n  - fix length of signing key\n  - fix config type\n\n### Unclassified\n\n- Omit exp if ExpiresAt is zero value ([#334](https://github.com/ory/fosite/issues/334)) ([6d50176](https://github.com/ory/fosite/commit/6d501761a17bc3a720e2a0b72ff5f218fa72660c))\n\n# [0.27.3](https://github.com/ory/fosite/compare/v0.27.2...v0.27.3) (2018-11-08)\n\noauth2: Set exp for authorize code issued by hybrid flow (#333)\n\nSigned-off-by: nerocrux <nerocrux@gmail.com>\n\n### Unclassified\n\n- Set exp for authorize code issued by hybrid flow ([#333](https://github.com/ory/fosite/issues/333)) ([d275e84](https://github.com/ory/fosite/commit/d275e84dc6f4bf4e71393672e0e16d54b401bc3c))\n\n# [0.27.2](https://github.com/ory/fosite/compare/v0.27.1...v0.27.2) (2018-11-07)\n\npkce: Allow hybrid flows (#328)\n\nSigned-off-by: Adam Shannon <adamkshannon@gmail.com>\nSigned-off-by: Wenhao Ni <niwenhao@gmail.com>\n\n### Unclassified\n\n- Allow hybrid flows ([#328](https://github.com/ory/fosite/issues/328)) ([cdfddc8](https://github.com/ory/fosite/commit/cdfddc8b06d861708ebe3494a35d65da2d2fcef8)):\n\n  Signed-off-by: Wenhao Ni <niwenhao@gmail.com>\n\n# [0.27.1](https://github.com/ory/fosite/compare/v0.27.0...v0.27.1) (2018-11-03)\n\noauth2: Improve refresh security and reliability (#332)\n\nThis patch resolves several issues regarding the refresh flow. First,\nan issue has been resolved which caused the audience to not be\nset in the refreshed access tokens.\n\nSecond, scope and audience are validated against the client's\nwhitelisted values and if the values are no longer allowed,\nthe grant is canceled.\n\nCloses #331\nCloses #325\nCloses #324\n\n### Unclassified\n\n- Improve refresh security and reliability ([#332](https://github.com/ory/fosite/issues/332)) ([4e4121b](https://github.com/ory/fosite/commit/4e4121bac5cda8efa7d3eb6aaf7720f3ff59c329)), closes [#331](https://github.com/ory/fosite/issues/331) [#325](https://github.com/ory/fosite/issues/325) [#324](https://github.com/ory/fosite/issues/324):\n\n  This patch resolves several issues regarding the refresh flow. First,\n  an issue has been resolved which caused the audience to not be\n  set in the refreshed access tokens.\n\n  Second, scope and audience are validated against the client's\n  whitelisted values and if the values are no longer allowed,\n  the grant is canceled.\n\n# [0.27.0](https://github.com/ory/fosite/compare/v0.26.1...v0.27.0) (2018-10-31)\n\noauth2: Update jwt access token interface (#330)\n\nThe interface needed to change in order to natively handle the audience claim.\n\nSigned-off-by: arekkas <aeneas@ory.am>\n\n### Unclassified\n\n- Introduce audience capabilities ([#327](https://github.com/ory/fosite/issues/327)) ([e2441d2](https://github.com/ory/fosite/commit/e2441d231a19cd1133b3316d3477b84d7b649522)), closes [#326](https://github.com/ory/fosite/issues/326):\n\n  This patch allows clients to whitelist audiences and request that audiences are set for oauth2 access and refresh tokens\n\n- Update jwt access token interface ([#330](https://github.com/ory/fosite/issues/330)) ([2da9764](https://github.com/ory/fosite/commit/2da976477fcd41493103ea478541d68ca04083ae)):\n\n  The interface needed to change in order to natively handle the audience claim.\n\n# [0.26.1](https://github.com/ory/fosite/compare/v0.26.0...v0.26.1) (2018-10-25)\n\nhash: Raise bcrypt cost factor lower bound (#321)\n\nUsers of this library can easily create the following:\n\nhasher := fosite.BCrypt{}\nhasher.Hash(..)\n\nThis is a problem because WorkFactor will default to 0 and x/crypto/bcrypt will default that to 4 (See https://godoc.org/golang.org/x/crypto/bcrypt).\n\nInstead this should be some higher cost factor. Callers who need a lower WorkFactor can still lower the cost, if needed.\n\nSigned-off-by: Adam Shannon <adamkshannon@gmail.com>\n\n### Unclassified\n\n- Fix Config.GetHashCost godoc comment ([#320](https://github.com/ory/fosite/issues/320)) ([4d2b119](https://github.com/ory/fosite/commit/4d2b119b7a302bf7e6a4d9b600697e08cf089b02))\n- Fix doc typo ([#322](https://github.com/ory/fosite/issues/322)) ([239b1ed](https://github.com/ory/fosite/commit/239b1ed4b9b406287fa49e01f8316e5fc4eb7923))\n- Raise bcrypt cost factor lower bound ([#321](https://github.com/ory/fosite/issues/321)) ([799fc70](https://github.com/ory/fosite/commit/799fc70a48b68b3403eb150084c28d4e78c035e4)):\n\n  Users of this library can easily create the following:\n\n  hasher := fosite.BCrypt{}\n  hasher.Hash(..)\n\n  This is a problem because WorkFactor will default to 0 and x/crypto/bcrypt will default that to 4 (See https://godoc.org/golang.org/x/crypto/bcrypt).\n\n  Instead this should be some higher cost factor. Callers who need a lower WorkFactor can still lower the cost, if needed.\n\n# [0.26.0](https://github.com/ory/fosite/compare/v0.25.1...v0.26.0) (2018-10-24)\n\nall: Rearrange commits with goreturns\n\nSigned-off-by: aeneasr <aeneas@ory.sh>\n\n### Unclassified\n\n- Allow customization of JWT claims ([f97e451](https://github.com/ory/fosite/commit/f97e45118fbf7a87129ee40c8a56e97efc30c8b9))\n- Rearrange commits with goreturns ([211b43b](https://github.com/ory/fosite/commit/211b43b4c04c732adc5fbfa7cab339f44fbea7d7))\n\n# [0.25.1](https://github.com/ory/fosite/compare/v0.25.0...v0.25.1) (2018-10-23)\n\nhandler/openid: Populate at_hash in explicit/refresh flows (#315)\n\nSigned-off-by: Wenhao Ni <niwenhao@gmail.com>\n\n### Documentation\n\n- Updates issue and pull request templates ([#313](https://github.com/ory/fosite/issues/313)) ([53c7b55](https://github.com/ory/fosite/commit/53c7b55dba903cdb8071417f39ebc01e00921cd4))\n- Updates issue and pull request templates ([#314](https://github.com/ory/fosite/issues/314)) ([73ae623](https://github.com/ory/fosite/commit/73ae6238fc6db4737d5b529ceeb08b26dbab88ea))\n- Updates issue and pull request templates ([#316](https://github.com/ory/fosite/issues/316)) ([64299bb](https://github.com/ory/fosite/commit/64299bb72fe0f9f7886bdd061519cc7e9c9081da))\n\n### Unclassified\n\n- handler/openid: Populate at_hash in explicit/refresh flows (#315) ([189589c](https://github.com/ory/fosite/commit/189589c400467460029424226398da709eb9ec48)), closes [#315](https://github.com/ory/fosite/issues/315)\n- Fix typo in README.md (#312) ([dcb83ae](https://github.com/ory/fosite/commit/dcb83ae59f984edeb1dfda19d0c0851e2e1574ae)), closes [#312](https://github.com/ory/fosite/issues/312)\n\n# [0.25.0](https://github.com/ory/fosite/compare/v0.24.0...v0.25.0) (2018-10-08)\n\nFix broken go modules tests (#311)\n\nSigned-off-by: arekkas <aeneas@ory.am>\n\n### Unclassified\n\n- Fix broken go modules tests (#311) ([02ea4b1](https://github.com/ory/fosite/commit/02ea4b186a6384bfe2a36741842f49f7370e0991)), closes [#311](https://github.com/ory/fosite/issues/311)\n- Switch from dep to go modules (#310) ([ac46a67](https://github.com/ory/fosite/commit/ac46a67863cb0842d48c83413789a9d6bf595f8a)), closes [#310](https://github.com/ory/fosite/issues/310)\n\n# [0.24.0](https://github.com/ory/fosite/compare/v0.23.0...v0.24.0) (2018-09-27)\n\nPropagate context in jwt strategies (#308)\n\nCloses #307\n\nSigned-off-by: Prateek Malhotra <someone1@gmail.com>\n\n### Unclassified\n\n- Propagate context in jwt strategies (#308) ([e1e18d6](https://github.com/ory/fosite/commit/e1e18d6b22697abeceff6e22d4741c3bf04174f8)), closes [#308](https://github.com/ory/fosite/issues/308) [#307](https://github.com/ory/fosite/issues/307)\n- Use test tables for Hasher unit tests (#306) ([499af11](https://github.com/ory/fosite/commit/499af11c14eb4f09f630ce84e971389ab668e94a)), closes [#306](https://github.com/ory/fosite/issues/306)\n\n# [0.23.0](https://github.com/ory/fosite/compare/v0.22.0...v0.23.0) (2018-09-22)\n\nAdd breaking change to the Hasher interface to the change log\n\nSigned-off-by: Amir Aslaminejad <aslaminejad@gmail.com>\n\n### Unclassified\n\n- Add breaking change to the Hasher interface to the change log ([805e0e9](https://github.com/ory/fosite/commit/805e0e9a36aa254b18e853b8a9c7881738deb010))\n- Update BCrypt to adhere to new Hasher interface ([938e50a](https://github.com/ory/fosite/commit/938e50a32024693670d1a8180b33c5c4a0df470b))\n- Update Hasher to take in context ([02f19fa](https://github.com/ory/fosite/commit/02f19fa3a9db72c54c2be6a904f8a2d35792974e))\n\n# [0.22.0](https://github.com/ory/fosite/compare/v0.21.5...v0.22.0) (2018-09-19)\n\njwt: update JWTStrategy to take in context (#302)\n\nSigned-off-by: Amir Aslaminejad <aslaminejad@gmail.com>\n\n### Unclassified\n\n- Update PR template ([3920be2](https://github.com/ory/fosite/commit/3920be20e78ed304ee3752ffcb997ade12862734))\n- Add github issue and PR templates ([b630f54](https://github.com/ory/fosite/commit/b630f54bbd5f01891b2f3cce462819e13136d94c))\n- Update JWTStrategy to take in context ([#302](https://github.com/ory/fosite/issues/302)) ([514fdbd](https://github.com/ory/fosite/commit/514fdbd20393c2175c66f3a69eb7bb849b3d5dfa))\n\n# [0.21.5](https://github.com/ory/fosite/compare/v0.21.4...v0.21.5) (2018-08-31)\n\nopenid: Allow JWT from id_token_hint to be expired (#299)\n\nSigned-off-by: arekkas <aeneas@ory.am>\n\n### Unclassified\n\n- Allow JWT from id_token_hint to be expired ([#299](https://github.com/ory/fosite/issues/299)) ([1ad9cd3](https://github.com/ory/fosite/commit/1ad9cd36069f61b2ace0fec097fe4bdc92e9f6c6))\n\n# [0.21.4](https://github.com/ory/fosite/compare/v0.21.3...v0.21.4) (2018-08-26)\n\ntoken/hmac: Add ability to rotate HMAC keys (#298)\n\nSigned-off-by: arekkas <aeneas@ory.am>\n\n### Unclassified\n\n- token/hmac: Add ability to rotate HMAC keys (#298) ([2134650](https://github.com/ory/fosite/commit/213465099b72b6e5afd0e69a7916a95f65e17481)), closes [#298](https://github.com/ory/fosite/issues/298)\n\n# [0.21.3](https://github.com/ory/fosite/compare/v0.21.2...v0.21.3) (2018-08-22)\n\ncompose: Pass ID Token configuration to strategy (#297)\n\nResolves an issue where expiry and issuer where not properly configurable in the strategy.\n\nSee https://github.com/ory/hydra/issues/985\n\nSigned-off-by: arekkas <aeneas@ory.am>\n\n### Unclassified\n\n- Pass ID Token configuration to strategy ([#297](https://github.com/ory/fosite/issues/297)) ([a07ce27](https://github.com/ory/fosite/commit/a07ce27c814538c7d0e6228ae814482be2e96e7e)):\n\n  Resolves an issue where expiry and issuer where not properly configurable in the strategy.\n\n  See https://github.com/ory/hydra/issues/985\n\n# [0.21.2](https://github.com/ory/fosite/compare/v0.21.1...v0.21.2) (2018-08-07)\n\nopenid: Validate id_token_hint only via ID claims (#296)\n\nSigned-off-by: arekkas <aeneas@ory.am>\n\n### Unclassified\n\n- Validate id_token_hint only via ID claims ([#296](https://github.com/ory/fosite/issues/296)) ([0fcbfea](https://github.com/ory/fosite/commit/0fcbfea741d0f0bb2a96d5fa08a2797a109a4a33))\n\n# [0.21.1](https://github.com/ory/fosite/compare/v0.21.0...v0.21.1) (2018-07-22)\n\nImprove token_endpoint_auth_method error message (#294)\n\nSigned-off-by: arekkas <aeneas@ory.am>\n\n### Unclassified\n\n- Improve token_endpoint_auth_method error message (#294) ([7820fb2](https://github.com/ory/fosite/commit/7820fb2e380ca737277095876c7f91b5ebee1467)), closes [#294](https://github.com/ory/fosite/issues/294)\n- Gofmt ([#290](https://github.com/ory/fosite/issues/290)) ([f02884b](https://github.com/ory/fosite/commit/f02884ba0b236d81e338fd3bcd3e8ebc6d65538f)):\n\n  Run standard gofmt command on project root.\n\n  - go version go1.10.3 darwin/amd64\n\n# [0.21.0](https://github.com/ory/fosite/compare/v0.20.3...v0.21.0) (2018-06-23)\n\nMakes error messages easier to debug for end-users\n\n### Documentation\n\n- Fixes header image in README ([4907d60](https://github.com/ory/fosite/commit/4907d60537202e3aa04e81d87efe2c5e17c2e492))\n\n### Unclassified\n\n- Makes error messages easier to debug for end-users ([5688a1c](https://github.com/ory/fosite/commit/5688a1c5acbafad5eabe649ce56e06e922c36a60))\n- Adds errors for request and registration parameters ([920ed71](https://github.com/ory/fosite/commit/920ed71a538f7fa5e7531660d76e076b655bf48b))\n- Adds OIDC request/request_uri support ([c7abcca](https://github.com/ory/fosite/commit/c7abcca923175f85833473508684c209b1151f5a))\n- Adds private_key_jwt authentication method ([baa4cf1](https://github.com/ory/fosite/commit/baa4cf15e1f30da0a52c9314730279302a15a7a4))\n- Adds proper error responses to request object ([f483262](https://github.com/ory/fosite/commit/f4832621071290773fca25e8992fc283d76f390b))\n- Disallow empty response_type in request ([cf2eb85](https://github.com/ory/fosite/commit/cf2eb85ed17c8d51d1c2e90c3349d4f51662a8f0))\n- Do not require id_token response type for auth_code ([#288](https://github.com/ory/fosite/issues/288)) ([edc4910](https://github.com/ory/fosite/commit/edc491045155abbdbc54409889d7ccc7c3999019)):\n\n  Before this patch, the `id_token` response type was required whenever an ID Token was requested. This patch changes that.\n\n- Implements oidc compliant response_type validation ([f950b9e](https://github.com/ory/fosite/commit/f950b9ea63f10b7ecfe0fa47ec3716b543450dc5))\n- Return unsupported_response_type in validator ([a24708e](https://github.com/ory/fosite/commit/a24708e8044268b324b1aec443a09940ae998c2f))\n- Uses JWTStrategy in oauth2.DefaultStrategy ([e2d2e75](https://github.com/ory/fosite/commit/e2d2e7511931d17fd92e627c65eaabd9598b185d))\n- Uses JWTStrategy interface in openid.DefaultStrategy ([517fdc5](https://github.com/ory/fosite/commit/517fdc5002ccef00a5a105b1a19bcba4c5e6839f)), closes [#252](https://github.com/ory/fosite/issues/252)\n\n# [0.20.3](https://github.com/ory/fosite/compare/v0.20.2...v0.20.3) (2018-06-07)\n\nAllows multipart content type as alternative to x-www-form-urlencoded (#285)\n\n### Unclassified\n\n- Allows multipart content type as alternative to x-www-form-urlencoded (#285) ([2edf8f8](https://github.com/ory/fosite/commit/2edf8f828b99cbabefa7f00066b49e081fab4920)), closes [#285](https://github.com/ory/fosite/issues/285)\n\n# [0.20.2](https://github.com/ory/fosite/compare/v0.20.1...v0.20.2) (2018-05-29)\n\nopenid: Merge duplicate aud claim values (#283)\n\n### Unclassified\n\n- Merge duplicate aud claim values ([#283](https://github.com/ory/fosite/issues/283)) ([93618d6](https://github.com/ory/fosite/commit/93618d66a99d2756e0a4c638727b728afc62520f))\n\n# [0.20.1](https://github.com/ory/fosite/compare/v0.20.0...v0.20.1) (2018-05-29)\n\nUses query instead of fragment when handling unsupported response type (#282)\n\n### Unclassified\n\n- Uses query instead of fragment when handling unsupported response type (#282) ([57b1471](https://github.com/ory/fosite/commit/57b14710c9aa845f2fa87322e0a3f3fa1e3e09c9)), closes [#282](https://github.com/ory/fosite/issues/282)\n- Updates upgrade guide ([a958ab8](https://github.com/ory/fosite/commit/a958ab8218d13c4b0533eb38d07203f2da7ac114))\n\n# [0.20.0](https://github.com/ory/fosite/compare/v0.19.8...v0.20.0) (2018-05-28)\n\noauth2: Resolves several issues related to revokation (#281)\n\nThis patch resolves several issues related to token revokation as well as duplicate authorize code usage:\n\n- oauth2: Revoking access or refresh tokens should revoke past and future tokens too\n- oauth2: Revoke access and refresh tokens when authorize code is used twice\n\nAdditionally, this patch resolves an issue where refreshing a token would not revoke previous tokens.\n\nCloses #278\nCloses #280\n\n### Unclassified\n\n- Resolves several issues related to revokation ([#281](https://github.com/ory/fosite/issues/281)) ([72bff7f](https://github.com/ory/fosite/commit/72bff7f33ee8c3a4a8806cc266ca7299ff1785d4)), closes [#278](https://github.com/ory/fosite/issues/278) [#280](https://github.com/ory/fosite/issues/280):\n\n  This patch resolves several issues related to token revokation as well as duplicate authorize code usage:\n\n  - oauth2: Revoking access or refresh tokens should revoke past and future tokens too\n  - oauth2: Revoke access and refresh tokens when authorize code is used twice\n\n  Additionally, this patch resolves an issue where refreshing a token would not revoke previous tokens.\n\n- Sets audience to a string array ([#279](https://github.com/ory/fosite/issues/279)) ([2d58a58](https://github.com/ory/fosite/commit/2d58a585d6b53831b17bcd3ed31e67d5b2637d4a)), closes [#215](https://github.com/ory/fosite/issues/215)\n\n# [0.19.8](https://github.com/ory/fosite/compare/v0.19.7...v0.19.8) (2018-05-24)\n\nauthorize: Fixes implicit detection in error writer (#277)\n\n### Unclassified\n\n- Fixes implicit detection in error writer ([#277](https://github.com/ory/fosite/issues/277)) ([608bf5f](https://github.com/ory/fosite/commit/608bf5fff7f5f7fc0dde0b3aecd03534974ba982))\n\n# [0.19.7](https://github.com/ory/fosite/compare/v0.19.6...v0.19.7) (2018-05-24)\n\nopenid: Use claims.RequestedAt for a reference of \"now\" (#276)\n\nPreviously, time.Now() was used to get a reference of \"now\". However, this caused short max_age values to fail if, for example, the consent screen took a long time. This patch now uses the \"requested_at\" claim value to determine a sense of \"now\" which should resolve the mentioned issue.\n\n### Unclassified\n\n- Use claims.RequestedAt for a reference of \"now\" ([#276](https://github.com/ory/fosite/issues/276)) ([91e7a4c](https://github.com/ory/fosite/commit/91e7a4c236caccbea211c7790ad8194b7bd5f8a2)):\n\n  Previously, time.Now() was used to get a reference of \"now\". However, this caused short max_age values to fail if, for example, the consent screen took a long time. This patch now uses the \"requested_at\" claim value to determine a sense of \"now\" which should resolve the mentioned issue.\n\n# [0.19.6](https://github.com/ory/fosite/compare/v0.19.5...v0.19.6) (2018-05-24)\n\nopenid: Issue ID Token on implicit code flow as well\n\n### Unclassified\n\n- Issue ID Token on implicit code flow as well ([180c749](https://github.com/ory/fosite/commit/180c74965cb128059d63e894ba2dd04184458a33))\n\n# [0.19.5](https://github.com/ory/fosite/compare/v0.19.4...v0.19.5) (2018-05-23)\n\njwt: Add JTI to counter missing nonce\n\n### Unclassified\n\n- Add JTI to counter missing nonce ([28822d7](https://github.com/ory/fosite/commit/28822d7b686c3a48ca9afec5291699b758c5f6cf))\n- Enforce nonce on implicit/hybrid flows ([3b44eb3](https://github.com/ory/fosite/commit/3b44eb3538d4faff5fc05a74c8b9fa88ddb48202))\n\n# [0.19.4](https://github.com/ory/fosite/compare/v0.19.3...v0.19.4) (2018-05-20)\n\ncore: Checks scopes before dispatching handlers (#272)\n\n### Unclassified\n\n- Checks scopes before dispatching handlers ([#272](https://github.com/ory/fosite/issues/272)) ([0f18305](https://github.com/ory/fosite/commit/0f18305e742c17db1eee6784ce3451837b5fd09a))\n\n# [0.19.3](https://github.com/ory/fosite/compare/v0.19.2...v0.19.3) (2018-05-20)\n\nopenid: Resolves timing issues in JWT strategy (#271)\n\n### Unclassified\n\n- Resolves timing issues in JWT strategy ([#271](https://github.com/ory/fosite/issues/271)) ([aaec994](https://github.com/ory/fosite/commit/aaec9940e2c3fc5a696b3d174d517a6ff1490a6f))\n\n# [0.19.2](https://github.com/ory/fosite/compare/v0.19.1...v0.19.2) (2018-05-19)\n\nopenid: Resolves timing issues by setting now to the future (#270)\n\n### Unclassified\n\n- Resolves timing issues by setting now to the future ([#270](https://github.com/ory/fosite/issues/270)) ([e9339d7](https://github.com/ory/fosite/commit/e9339d73eb39b15ffdb4b9a62ddc1ff1ba512530))\n\n# [0.19.1](https://github.com/ory/fosite/compare/v0.19.0...v0.19.1) (2018-05-19)\n\nopenid: Improves validation errors and uses UTC everywhere (#269)\n\n### Unclassified\n\n- Improves validation errors and uses UTC everywhere ([#269](https://github.com/ory/fosite/issues/269)) ([eee3dad](https://github.com/ory/fosite/commit/eee3dad91e571a5b09217cc00caf485165f5a7d7))\n\n# [0.19.0](https://github.com/ory/fosite/compare/v0.18.1...v0.19.0) (2018-05-17)\n\nopenid: Improves prompt, max_age and id_token_hint validation (#268)\n\nThis patch improves the OIDC prompt, max_age, and id_token_hint\nvalidation.\n\n### Unclassified\n\n- Improves prompt, max_age and id_token_hint validation ([#268](https://github.com/ory/fosite/issues/268)) ([7ccad77](https://github.com/ory/fosite/commit/7ccad77095dbf8d094b2f3151634f074b0903dbc)):\n\n  This patch improves the OIDC prompt, max_age, and id_token_hint\n  validation.\n\n# [0.18.1](https://github.com/ory/fosite/compare/v0.18.0...v0.18.1) (2018-05-01)\n\nopenid: Adds a validator used to validate OIDC parameters (#266)\n\nThe validator, for now, validates the prompt parameter of OIDC requests.\n\n### Unclassified\n\n- Adds a validator used to validate OIDC parameters ([#266](https://github.com/ory/fosite/issues/266)) ([91c9d19](https://github.com/ory/fosite/commit/91c9d194a88e6b395668211df60cb512eab08541)):\n\n  The validator, for now, validates the prompt parameter of OIDC requests.\n\n# [0.18.0](https://github.com/ory/fosite/compare/v0.17.2...v0.18.0) (2018-04-30)\n\noauth2: Introspection should return token type (#265)\n\nCloses #264\n\nThis patch allows the introspection handler to return the token type (e.g. `access_token`, `refresh_token`) of the\nintrospected token. To achieve that, some breaking API changes have been introduced:\n\n- `OAuth2.IntrospectToken(ctx context.Context, token string, tokenType TokenType, session Session, scope ...string) (AccessRequester, error)` is now `OAuth2.IntrospectToken(ctx context.Context, token string, tokenType TokenType, session Session, scope ...string) (TokenType, AccessRequester, error)`.\n- `TokenIntrospector.IntrospectToken(ctx context.Context, token string, tokenType TokenType, accessRequest AccessRequester, scopes []string) (error)` is now `TokenIntrospector.IntrospectToken(ctx context.Context, token string, tokenType TokenType, accessRequest AccessRequester, scopes []string) (TokenType, error)`.\n\nThis patch also resolves a misconfigured json key in the `IntrospectionResponse` struct. `AccessRequester AccessRequester json:\",extra\"` is now properly declared as `AccessRequester AccessRequester json:\"extra\"`.\n\n### Unclassified\n\n- Introspection should return token type ([#265](https://github.com/ory/fosite/issues/265)) ([2bf9b6c](https://github.com/ory/fosite/commit/2bf9b6c4177be3050ff9ba3b82c6474e4c324c39)), closes [#264](https://github.com/ory/fosite/issues/264)\n\n# [0.17.2](https://github.com/ory/fosite/compare/v0.17.1...v0.17.2) (2018-04-26)\n\ncore: Regression fix for request ID in refresh token flow (#262)\n\nSigned-off-by: Beorn Facchini <beorn@lade.io>\n\n### Unclassified\n\n- handler/oauth2: Returns request unauthorized error on invalid password credentials (#261) ([cca6af4](https://github.com/ory/fosite/commit/cca6af4161818682edb98936cae9249db814db27)), closes [#261](https://github.com/ory/fosite/issues/261)\n- Regression fix for request ID in refresh token flow ([#262](https://github.com/ory/fosite/issues/262)) ([99029e0](https://github.com/ory/fosite/commit/99029e0e1bc4b1d6dfa1ca8b85a46d79cffad6e8))\n\n# [0.17.1](https://github.com/ory/fosite/compare/v0.17.0...v0.17.1) (2018-04-22)\n\ncore: Adds ExactScopeStrategy (#260)\n\nThe ExactScopeStrategy performs a simple string match (case sensitive)\nof scopes.\n\n### Unclassified\n\n- Adds ExactScopeStrategy ([#260](https://github.com/ory/fosite/issues/260)) ([0fcdf33](https://github.com/ory/fosite/commit/0fcdf33fb52551e02798b4e6733110024b7d24d9)):\n\n  The ExactScopeStrategy performs a simple string match (case sensitive)\n  of scopes.\n\n# [0.17.0](https://github.com/ory/fosite/compare/v0.16.5...v0.17.0) (2018-04-08)\n\ncore: Sanitizes request body before sending it to the storage adapter (#258)\n\nThis release resolves a security issue (reported by [platform.sh](https://www.platform.sh)) related to potential storage implementations. This library used to pass\nall of the request body from both authorize and token endpoints to the storage adapters. As some of these values\nare needed in consecutive requests, some storage adapters chose to drop the full body to the database. This in turn caused,\nwith the addition of enabling POST-body based client authentication, the client secret to be leaked.\n\nThe issue has been resolved by sanitizing the request body and only including those values truly required by their\nrespective handlers. This lead to two breaking changes in the API:\n\n1. The `fosite.Requester` interface has a new method `Sanitize(allowedParameters []string) Requester` which returns\n   a sanitized clone of the method receiver. If you do not use your own `fosite.Requester` implementation, this won't affect you.\n2. If you use the PKCE handler, you will have to add three new methods to your storage implementation. The methods\n   to be added work exactly like, for example `CreateAuthorizeCodeSession`. The method signatures are as follows:\n\n```go\ntype PKCERequestStorage interface {\n\tGetPKCERequestSession(ctx context.Context, signature string, session fosite.Session) (fosite.Requester, error)\n\tCreatePKCERequestSession(ctx context.Context, signature string, requester fosite.Requester) error\n\tDeletePKCERequestSession(ctx context.Context, signature string) error\n}\n```\n\nWe encourage you to upgrade to this release and check your storage implementations and potentially remove old data.\n\nWe would like to thank [platform.sh](https://www.platform.sh) for sponsoring the development of a patch that resolves this\nissue.\n\n### Documentation\n\n- Fixes eaxmple errors in README ([#257](https://github.com/ory/fosite/issues/257)) ([b138f59](https://github.com/ory/fosite/commit/b138f5997d535151b3541a15b8c4f7a304cea4eb))\n- Updates banner in readme ([#253](https://github.com/ory/fosite/issues/253)) ([07ac5b8](https://github.com/ory/fosite/commit/07ac5b89878e07fd54edf267f23ebc7059c8bb48))\n\n### Unclassified\n\n- Sanitizes request body before sending it to the storage adapter ([#258](https://github.com/ory/fosite/issues/258)) ([018b5c1](https://github.com/ory/fosite/commit/018b5c12b71b0da443255f4a5cf0ac9543bbf9f7)):\n\n  This release resolves a security issue (reported by [platform.sh](https://www.platform.sh)) related to potential storage implementations. This library used to pass\n  all of the request body from both authorize and token endpoints to the storage adapters. As some of these values\n  are needed in consecutive requests, some storage adapters chose to drop the full body to the database. This in turn caused,\n  with the addition of enabling POST-body based client authentication, the client secret to be leaked.\n\n  The issue has been resolved by sanitizing the request body and only including those values truly required by their\n  respective handlers. This lead to two breaking changes in the API:\n\n  1. The `fosite.Requester` interface has a new method `Sanitize(allowedParameters []string) Requester` which returns\n     a sanitized clone of the method receiver. If you do not use your own `fosite.Requester` implementation, this won't affect you.\n  2. If you use the PKCE handler, you will have to add three new methods to your storage implementation. The methods\n     to be added work exactly like, for example `CreateAuthorizeCodeSession`. The method signatures are as follows:\n\n  ```go\n  type PKCERequestStorage interface {\n  \tGetPKCERequestSession(ctx context.Context, signature string, session fosite.Session) (fosite.Requester, error)\n  \tCreatePKCERequestSession(ctx context.Context, signature string, requester fosite.Requester) error\n  \tDeletePKCERequestSession(ctx context.Context, signature string) error\n  }\n  ```\n\n  We encourage you to upgrade to this release and check your storage implementations and potentially remove old data.\n\n  We would like to thank [platform.sh](https://www.platform.sh) for sponsoring the development of a patch that resolves this\n  issue.\n\n# [0.16.5](https://github.com/ory/fosite/compare/v0.16.4...v0.16.5) (2018-03-17)\n\nintrospection: Improves debug messages (#254)\n\n### Documentation\n\n- Resolves minor code documentation misspellings ([#248](https://github.com/ory/fosite/issues/248)) ([c580d79](https://github.com/ory/fosite/commit/c580d79aaa54f2aec179df400a3365ca711ead66))\n- Resolves minor spelling mistakes ([#250](https://github.com/ory/fosite/issues/250)) ([7fbd246](https://github.com/ory/fosite/commit/7fbd2468dfb83cf7288643958db9890af5ffd3d1))\n- Updates chat badge to discord ([b6380be](https://github.com/ory/fosite/commit/b6380be3365fc9703135f6ef3ee747d60d835915))\n\n### Unclassified\n\n- docs : Fixes typo in README (#249) ([d05fadf](https://github.com/ory/fosite/commit/d05fadfa7c4fa88ec58175fef146c7cc9c6c120c)), closes [#249](https://github.com/ory/fosite/issues/249)\n- Adds email to license notice ([77fa262](https://github.com/ory/fosite/commit/77fa262093d783bc3f0e302ebddd1a2da3f2581d))\n- Improves debug messages ([#254](https://github.com/ory/fosite/issues/254)) ([338399b](https://github.com/ory/fosite/commit/338399becb5114f84e6dc7166a95f6d036a6b748))\n- Updates license header ([85bdbcb](https://github.com/ory/fosite/commit/85bdbcb4c34c646c7eae56c0a1dc41dc1f75b470))\n- Updates license notice ([917401c](https://github.com/ory/fosite/commit/917401cdf0b891afa9a3aa65edb2539ff0f0a5ba))\n- Updates years in license headers ([77df218](https://github.com/ory/fosite/commit/77df218b30566ab7cd513b723a7e44f9f6afbe7e))\n- Updates years in license headers ([d8458ab](https://github.com/ory/fosite/commit/d8458abe997f70c743a7e2fa3cc27c2cb1d38c9e))\n\n# [0.16.4](https://github.com/ory/fosite/compare/v0.16.3...v0.16.4) (2018-02-07)\n\nhandler: Adds PKCE implementation for none and S256 (#246)\n\nThis patch adds support for PKCE (https://tools.ietf.org/html/rfc7636) which is used by native apps (mobile) and prevents eavesdropping attacks against authorization codes.\n\nPKCE is enabled by default but not enforced. Challenge method plain is disabled by default. Both settings can be changed using `compose.Config.EnforcePKCE` and `compose.config.EnablePKCEPlainChallengeMethod`.\n\nCloses #213\n\n### Unclassified\n\n- Adds PKCE implementation for none and S256 ([#246](https://github.com/ory/fosite/issues/246)) ([4512853](https://github.com/ory/fosite/commit/45128532dc4bbb40a56bf6250a58f9c5d57a9c7a)), closes [#213](https://github.com/ory/fosite/issues/213):\n\n  This patch adds support for PKCE (https://tools.ietf.org/html/rfc7636) which is used by native apps (mobile) and prevents eavesdropping attacks against authorization codes.\n\n  PKCE is enabled by default but not enforced. Challenge method plain is disabled by default. Both settings can be changed using `compose.Config.EnforcePKCE` and `compose.config.EnablePKCEPlainChallengeMethod`.\n\n# [0.16.3](https://github.com/ory/fosite/compare/v0.16.2...v0.16.3) (2018-02-07)\n\nintrospection: Adds missing http header to response writer (#247)\n\nThe introspection response writer was missing `application/json`\nin header `Content-Type`. This patch fixes that.\n\nCloses #209\n\n### Unclassified\n\n- Adds missing http header to response writer ([#247](https://github.com/ory/fosite/issues/247)) ([f345ec1](https://github.com/ory/fosite/commit/f345ec1413aa0fc2ba4588a482e469fa19cc08aa)), closes [#209](https://github.com/ory/fosite/issues/209):\n\n  The introspection response writer was missing `application/json`\n  in header `Content-Type`. This patch fixes that.\n\n# [0.16.2](https://github.com/ory/fosite/compare/v0.16.1...v0.16.2) (2018-01-25)\n\nintrospection: Decodes of Basic Authorization username/password (#245)\n\nSigned-off-by: Dmitry Dolbik <dolbik@gmail.com>\n\n### Unclassified\n\n- Decodes of Basic Authorization username/password ([#245](https://github.com/ory/fosite/issues/245)) ([b94312e](https://github.com/ory/fosite/commit/b94312e25f011b54894da69256416271c23b5d14))\n\n# [0.16.1](https://github.com/ory/fosite/compare/v0.16.0...v0.16.1) (2017-12-23)\n\ncompose: Makes SendDebugMessages first class citizen (#243)\n\n### Unclassified\n\n- Makes SendDebugMessages first class citizen ([#243](https://github.com/ory/fosite/issues/243)) ([1ef3041](https://github.com/ory/fosite/commit/1ef3041c4da40d27ea25d56710e59d5f9352df5f))\n\n# [0.16.0](https://github.com/ory/fosite/compare/v0.15.6...v0.16.0) (2017-12-23)\n\nAdds ability to forward hints and debug messages to clients (#242)\n\n### Unclassified\n\n- Adds ability to forward hints and debug messages to clients (#242) ([7216c4f](https://github.com/ory/fosite/commit/7216c4f2711c79cf3d8a2c75ad7da4f54103988f)), closes [#242](https://github.com/ory/fosite/issues/242)\n\n# [0.15.6](https://github.com/ory/fosite/compare/v0.15.5...v0.15.6) (2017-12-21)\n\nhandler/oauth2: Adds offline_access alias for refresh flow\n\n### Unclassified\n\n- handler/oauth2: Adds offline_access alias for refresh flow ([2aa8e70](https://github.com/ory/fosite/commit/2aa8e70bb88aa6bafde8d4ea949c5d514c6f568e))\n\n# [0.15.5](https://github.com/ory/fosite/compare/v0.15.4...v0.15.5) (2017-12-17)\n\nReturns the correct error on duplicate auth code use\n\n### Unclassified\n\n- Returns the correct error on duplicate auth code use ([95d5f58](https://github.com/ory/fosite/commit/95d5f580c939eea0e6e93cdb4bae4cdbf5082869))\n\n# [0.15.4](https://github.com/ory/fosite/compare/v0.15.3...v0.15.4) (2017-12-17)\n\nImproves http error codes\n\n### Unclassified\n\n- Improves http error codes ([6831f75](https://github.com/ory/fosite/commit/6831f7543000b3704879e52d8c9a4555653b4bd5))\n\n# [0.15.3](https://github.com/ory/fosite/compare/v0.15.2...v0.15.3) (2017-12-17)\n\nResolves overriding auth_time with wrong value\n\n### Unclassified\n\n- Resolves overriding auth_time with wrong value ([c85b32d](https://github.com/ory/fosite/commit/c85b32d355a183dac3e46e50aac8b2c344cbd2d7))\n\n# [0.15.2](https://github.com/ory/fosite/compare/v0.15.1...v0.15.2) (2017-12-10)\n\nAdds ability to catch non-conform OIDC authorizations\n\nFosite is now capable of detecting authorization flows that\nare not conformant with the OpenID Connect spec.\n\n### Unclassified\n\n- Adds ability to catch non-conform OIDC authorizations ([97fbeb3](https://github.com/ory/fosite/commit/97fbeb333e353d5d7d7d2368f51899262338ce62)):\n\n  Fosite is now capable of detecting authorization flows that\n  are not conformant with the OpenID Connect spec.\n\n- Forces use of UTC time zone everywhere ([4c7e4e5](https://github.com/ory/fosite/commit/4c7e4e5512061e9add22cc246882c78d2b06599c))\n\n# [0.15.1](https://github.com/ory/fosite/compare/v0.15.0...v0.15.1) (2017-12-10)\n\ntoken/jwt: Adds ability to specify acr value natively in id token payload\n\n### Unclassified\n\n- token/jwt: Adds ability to specify acr value natively in id token payload ([b87ca49](https://github.com/ory/fosite/commit/b87ca49b9418b99f492077f8ba78bf00e6c29180))\n\n# [0.15.0](https://github.com/ory/fosite/compare/v0.14.2...v0.15.0) (2017-12-09)\n\nUpgrades history.md\n\n### Documentation\n\n- Updates history.md ([9fc25a8](https://github.com/ory/fosite/commit/9fc25a86c4d8609aafa382e5eab32d3d087ec9d8))\n\n### Unclassified\n\n- Upgrades history.md ([87c37c3](https://github.com/ory/fosite/commit/87c37c3d6929b1edd2ab52a28d51ed1890628f51))\n- Improves test coverage report by removing internal package from it ([831f56a](https://github.com/ory/fosite/commit/831f56a9e6774b1e80c13cd301583edea6378245))\n- Resolves test issues and reverts auth code revokation patch ([59fc47b](https://github.com/ory/fosite/commit/59fc47bbeb8093ab3652149ef6789a4e1564e1d8))\n- Improves error debug messages across the project ([7ec8d19](https://github.com/ory/fosite/commit/7ec8d19815d10913ef8cfd8ced9b9794f578dbf4))\n- handler/oauth2: Adds token revokation on authorize code reuse ([2341dec](https://github.com/ory/fosite/commit/2341dec8febeda9da535dc898c7d19aa3ecc8c00))\n- handler/oauth2: Improves authorization code error handling ([d6e0fbd](https://github.com/ory/fosite/commit/d6e0fbd9bdde624fa2e9feada3dec5b4266c4b9e))\n- Allows client credentials in POST body and solves public client auth ([392c191](https://github.com/ory/fosite/commit/392c191bc1859ca57e3d0cf4d2b996d5ab382530)), closes [#231](https://github.com/ory/fosite/issues/231) [#217](https://github.com/ory/fosite/issues/217)\n- Updates mocks and mock generation ([1f9d07d](https://github.com/ory/fosite/commit/1f9d07d15e8f70986ed12cfb3ac9fac4a6e7e278))\n\n# [0.14.2](https://github.com/ory/fosite/compare/v0.14.1...v0.14.2) (2017-12-06)\n\nMakes use of rfcerr in access error endpoint writer explicit\n\n### Unclassified\n\n- Makes use of rfcerr in access error endpoint writer explicit ([701d850](https://github.com/ory/fosite/commit/701d85072d1ea5c35c7d05acf19bccdef626ba3c))\n\n# [0.14.1](https://github.com/ory/fosite/compare/v0.14.0...v0.14.1) (2017-12-06)\n\nExports ErrorToRFC6749Error again (#228)\n\n### Unclassified\n\n- Exports ErrorToRFC6749Error again (#228) ([8d35b66](https://github.com/ory/fosite/commit/8d35b668079db8642ede3b1d345d74692926515f)), closes [#228](https://github.com/ory/fosite/issues/228)\n\n# [0.14.0](https://github.com/ory/fosite/compare/v0.13.1...v0.14.0) (2017-12-06)\n\nSimplifies error contexts (#227)\n\nSimplifies how errors are instantiated. Errors now contain all necessary information without relying on `fosite.ErrorToRFC6749Error` any more. `fosite.ErrorToRFC6749Error` is now an internal method and was renamed to `fosite.errorToRFC6749Error`.\n\n### Unclassified\n\n- Simplifies error contexts (#227) ([8961d86](https://github.com/ory/fosite/commit/8961d861814862f9432f0608bcd14dfbcd4ec979)), closes [#227](https://github.com/ory/fosite/issues/227):\n\n  Simplifies how errors are instantiated. Errors now contain all necessary information without relying on `fosite.ErrorToRFC6749Error` any more. `fosite.ErrorToRFC6749Error` is now an internal method and was renamed to `fosite.errorToRFC6749Error`.\n\n# [0.13.1](https://github.com/ory/fosite/compare/v0.13.0...v0.13.1) (2017-12-04)\n\nhandler/oauth2: Client IDs in revokation requests must match now (#226)\n\nCloses #225\n\n### Unclassified\n\n- handler/oauth2: Client IDs in revokation requests must match now (#226) ([83136a3](https://github.com/ory/fosite/commit/83136a3ed5ed99b3a525f0ad87d693eadf273e8a)), closes [#226](https://github.com/ory/fosite/issues/226) [#225](https://github.com/ory/fosite/issues/225)\n- Add license header to all source files (#222) ([dd9398e](https://github.com/ory/fosite/commit/dd9398ea0553b07d63022af50ee2090d1616c5a9)), closes [#222](https://github.com/ory/fosite/issues/222) [#221](https://github.com/ory/fosite/issues/221)\n- Update go version ([#220](https://github.com/ory/fosite/issues/220)) ([ff751ee](https://github.com/ory/fosite/commit/ff751ee3691f79886ccfc6afa3936c2c3b506a9e))\n\n# [0.13.0](https://github.com/ory/fosite/compare/v0.12.0...v0.13.0) (2017-10-25)\n\nvendor: replace glide with dep\n\n### Unclassified\n\n- Replace glide with dep ([ec43e3a](https://github.com/ory/fosite/commit/ec43e3a05da49d45ebe8a98b28b14f8817c507f4))\n\n# [0.12.0](https://github.com/ory/fosite/compare/v0.11.4...v0.12.0) (2017-10-25)\n\nscripts: fix goimports import path\n\n### Unclassified\n\n- token/hmac: replace custom logic with copypasta ([b4b9be5](https://github.com/ory/fosite/commit/b4b9be5640c9d814b35f54b2c8621137364209ca))\n- Add 0.12.0 to TOC ([a2e3a47](https://github.com/ory/fosite/commit/a2e3a474b2439e4ad68a641152639f7921e610a6))\n- Add format helper scripts ([92c73ae](https://github.com/ory/fosite/commit/92c73aee93b5d1fe2acf3395b495caf912453368))\n- Add goimports to install section ([4f5df70](https://github.com/ory/fosite/commit/4f5df700e3c220f3aa5f7eb79a4b4f19d2f4576e))\n- Fix goimports import path ([65743b4](https://github.com/ory/fosite/commit/65743b40c69ccc76f07fd3eb4c45837d3b4a1505))\n- Format files with goimports ([c87defe](https://github.com/ory/fosite/commit/c87defe18676b36d880fa834c10e2cbd5464e061))\n- Replace nil checks with Error/NoError ([7fe1f94](https://github.com/ory/fosite/commit/7fe1f946af7b4921da008f245da84b85ea3f26d0))\n- Update to go 1.9 ([c17222c](https://github.com/ory/fosite/commit/c17222c854198a7a388a2656a710bf13a5c3c3b9))\n- Use go-acc and test format ([47fd477](https://github.com/ory/fosite/commit/47fd477814c7826a9e9e89a02c248cfbad6b5a7a))\n\n# [0.11.4](https://github.com/ory/fosite/compare/v0.11.3...v0.11.4) (2017-10-10)\n\nhandler/oauth2: set expiration time before the access token is generated (#216)\n\nSigned-off-by: Nikita Vorobey <nikita@vorobey.by>\n\n### Documentation\n\n- Update banner ([d6cf027](https://github.com/ory/fosite/commit/d6cf027401e828c8e608b042615f982acdf6d915))\n\n### Unclassified\n\n- handler/oauth2: set expiration time before the access token is generated (#216) ([0911eb0](https://github.com/ory/fosite/commit/0911eb0d643d77105e0126bf2303bdfd7190ccd3)), closes [#216](https://github.com/ory/fosite/issues/216)\n\n# [0.11.3](https://github.com/ory/fosite/compare/v0.11.2...v0.11.3) (2017-08-21)\n\noauth2/ropc: Set expires at for password credentials flow (#210)\n\nSigned-off-by: Beorn Facchini <beornf@gmail.com>\n\n### Documentation\n\n- Fixes documentation oauth2 variable and updates old method ([#205](https://github.com/ory/fosite/issues/205)) ([fa50c80](https://github.com/ory/fosite/commit/fa50c80d36bbc8dda2633b59617689d8ef21042c)):\n\n  It seems that the documentation was declaring as OAuth2Provider the variable `oauth2Provider` whereas it used a non-declared variable `oauth2`. I renamed `oauth2` into the variable declared `oauth2Provider`.\n\n  Furthermore, on line 333, the IntrospectToken method was called without the TokenType argument. I added the fosite.AccessToken type.\n\n- Update docs on scope strategy ([68119ca](https://github.com/ory/fosite/commit/68119ca5e282c356284a6dc7a2edb2b632d57a47))\n\n### Unclassified\n\n- oauth2/ropc: Set expires at for password credentials flow (#210) ([461b38f](https://github.com/ory/fosite/commit/461b38fd07e47dad709667f024e98a71bfd3792b)), closes [#210](https://github.com/ory/fosite/issues/210)\n- oauth2/introspection: configure core validator with access only option (#208) ([80cae74](https://github.com/ory/fosite/commit/80cae74590bfdf7d3f9439073a4a5aac21d7fd45)), closes [#208](https://github.com/ory/fosite/issues/208)\n- Add more test cases ([c45a37d](https://github.com/ory/fosite/commit/c45a37d3bb9e3e79d16323f42d76ef96b624dbd0))\n\n# [0.11.2](https://github.com/ory/fosite/compare/v0.11.1...v0.11.2) (2017-07-09)\n\nscope: resolve haystack needle mixup - closes #201\n\n### Unclassified\n\n- Resolve haystack needle mixup - closes [#201](https://github.com/ory/fosite/issues/201) ([2c7cdff](https://github.com/ory/fosite/commit/2c7cdff9d2e677f5f892d6107a3c0b8b9ce61632))\n\n# [0.11.1](https://github.com/ory/fosite/compare/v0.11.0...v0.11.1) (2017-07-09)\n\ntoken/jwt: add claims tests\n\n### Unclassified\n\n- token/jwt: add claims tests ([c55d679](https://github.com/ory/fosite/commit/c55d67903fdc5b2f4b200b663d4f1a0cb1d21dca))\n- handler/openid: only refresh id token with id_token response type ([dd2463a](https://github.com/ory/fosite/commit/dd2463a1a262600096f040867dcabe2a28e1a56c)), closes [#199](https://github.com/ory/fosite/issues/199)\n- Add tests for nil sessions ([d67d52d](https://github.com/ory/fosite/commit/d67d52df200dfc72c9eb79e38ae6e91a1fb701f4))\n\n# [0.11.0](https://github.com/ory/fosite/compare/v0.10.0...v0.11.0) (2017-07-09)\n\nhandler/oauth2: update docs\n\n### Unclassified\n\n- handler/oauth2: update docs ([63f329b](https://github.com/ory/fosite/commit/63f329b104c36dcbe2ee2f2a5562c6422f36224b))\n- handler/oauth2: remove code validity check from test ([664d1a6](https://github.com/ory/fosite/commit/664d1a6c0177abfb4d8f780f28ecd69cb2d44d87))\n- handler/oauth2: first retrieve, then validate ([ab72cba](https://github.com/ory/fosite/commit/ab72cba1799accc7b50990908139fa762eb2efc1))\n- handler/oauth2: set requested at date in auth code test ([edd4084](https://github.com/ory/fosite/commit/edd4084b43ed88135fb60a4581283d8abaf92384))\n- handler/oauth2: resolve travis time mismatch ([ec6534c](https://github.com/ory/fosite/commit/ec6534cfebf24d716aba28dee43e6ec268c0918b))\n- handler/oauth2: simplify storage interface ([361b368](https://github.com/ory/fosite/commit/361b3683552bcadf62d1d1c42baf6d5cc1ca1409)), closes [#194](https://github.com/ory/fosite/issues/194)\n- handler/oauth2: use hmac strategy for jwt refresh tokens (#190) ([56c88c0](https://github.com/ory/fosite/commit/56c88c04d4819aec08cb068a5fb7697dbaeb3288)), closes [#190](https://github.com/ory/fosite/issues/190) [#180](https://github.com/ory/fosite/issues/180)\n- handler/openid: refresh token handler for oidc (#193) ([04888c5](https://github.com/ory/fosite/commit/04888c5448382612a55fb0c57ccf2c0e3d841c2c)), closes [#193](https://github.com/ory/fosite/issues/193) [#181](https://github.com/ory/fosite/issues/181)\n- Gofmt ([7a998fe](https://github.com/ory/fosite/commit/7a998fece7ea2fd63ad7943266e67954ab81aaf6))\n- Implement new wildcard strategy - closes [#188](https://github.com/ory/fosite/issues/188) ([e03e99e](https://github.com/ory/fosite/commit/e03e99e653454ab7cc997aacd162374bdbf38c75))\n- Revoke access tokens when refreshing ([bb74955](https://github.com/ory/fosite/commit/bb74955ead77dbadf2f7b99ec3bff9b27f2a4388)), closes [#167](https://github.com/ory/fosite/issues/167)\n- Run goimports ([35941c2](https://github.com/ory/fosite/commit/35941c2f3ed0436019429d9657d9dab59cae93e1))\n- Use deepcopy not gob encoding - closes [#191](https://github.com/ory/fosite/issues/191) ([823db5b](https://github.com/ory/fosite/commit/823db5b65cd7c0c356b211c920ca06ec10cfa8b6))\n\n# [0.10.0](https://github.com/ory/fosite/compare/v0.9.7...v0.10.0) (2017-07-06)\n\noauth2/introspector: remove auth code, refresh scopes (#187)\n\nRemoves authorize code introspection in the HMAC-based strategy and now checks scopes of refresh tokens as well.\n\n### Unclassified\n\n- oauth2/introspector: remove auth code, refresh scopes (#187) ([ef8f175](https://github.com/ory/fosite/commit/ef8f1757f0c26317fd7dbb46f66fde7516a3b4bb)), closes [#187](https://github.com/ory/fosite/issues/187):\n\n  Removes authorize code introspection in the HMAC-based strategy and now checks scopes of refresh tokens as well.\n\n- Separate test dependencies ([#186](https://github.com/ory/fosite/issues/186)) ([71451f0](https://github.com/ory/fosite/commit/71451f05fa2b572c4467a9bca26ec3d018a74cd3)):\n\n  - vendor: Move testify to testImport\n  - test: Move Assert/Require helpers to \\_test pkg\n\n# [0.9.7](https://github.com/ory/fosite/compare/v0.9.6...v0.9.7) (2017-06-28)\n\nhandler/openid: remove forced nonce (#185)\n\nSigned-off-by: Wyatt Anderson <wanderson@gmail.com>\n\n### Unclassified\n\n- handler/openid: remove forced nonce (#185) ([6c91a21](https://github.com/ory/fosite/commit/6c91a21b540c534c9a2330922e357e24c7d5fda9)), closes [#185](https://github.com/ory/fosite/issues/185)\n\n# [0.9.6](https://github.com/ory/fosite/compare/v0.9.5...v0.9.6) (2017-06-21)\n\noauth2: basic auth should decode client id and secret\n\ncloses #182\n\n### Documentation\n\n- Update test command in README and CONTRIBUTING ([#183](https://github.com/ory/fosite/issues/183)) ([c1ab029](https://github.com/ory/fosite/commit/c1ab029745520914fae525f150e91dfe7ae76142))\n\n### Unclassified\n\n- Basic auth should decode client id and secret ([92b75d9](https://github.com/ory/fosite/commit/92b75d93070fdb96f0ec9975dc24b69243d8f894)), closes [#182](https://github.com/ory/fosite/issues/182)\n\n# [0.9.5](https://github.com/ory/fosite/compare/v0.9.4...v0.9.5) (2017-06-08)\n\nhandler/oauth2: grant scopes before the access token is generated (#177)\n\nSigned-off-by: Nikita Vorobey <nikita@vorobey.by>\n\n### Unclassified\n\n- handler/oauth2: grant scopes before the access token is generated (#177) ([3497260](https://github.com/ory/fosite/commit/349726028d42f3c60aeefc67aef06f9f907ccf94)), closes [#177](https://github.com/ory/fosite/issues/177)\n\n# [0.9.4](https://github.com/ory/fosite/compare/v0.9.3...v0.9.4) (2017-06-05)\n\nintrospection: return with active set false on token error (#176)\n\n### Unclassified\n\n- Return with active set false on token error ([#176](https://github.com/ory/fosite/issues/176)) ([82944aa](https://github.com/ory/fosite/commit/82944aaa42ddc9c718ee072d5a11635ec982394d))\n\n# [0.9.3](https://github.com/ory/fosite/compare/v0.9.2...v0.9.3) (2017-06-05)\n\nvendor: remove unnecessary go-jose import (#175)\n\n### Unclassified\n\n- Remove unnecessary go-jose import ([#175](https://github.com/ory/fosite/issues/175)) ([d26aa4a](https://github.com/ory/fosite/commit/d26aa4a76fda898677f333c38242a9049e448e1a))\n\n# [0.9.2](https://github.com/ory/fosite/compare/v0.9.1...v0.9.2) (2017-06-05)\n\nResolve issues with error handling (#174)\n\n- errors: do not convert errors compliant with rfcerrors\n\n- handler/oauth2: improve redirect message for insecure http\n\n### Unclassified\n\n- Resolve issues with error handling (#174) ([9abdfd0](https://github.com/ory/fosite/commit/9abdfd04261f472f34c9d6a545ccaa2d491c4f06)), closes [#174](https://github.com/ory/fosite/issues/174):\n\n  - errors: do not convert errors compliant with rfcerrors\n\n  - handler/oauth2: improve redirect message for insecure http\n\n# [0.9.1](https://github.com/ory/fosite/compare/v0.9.0...v0.9.1) (2017-06-04)\n\nvendor: clean up dependencies (#173)\n\n- vendor: remove stray github.com/Sirupsen/logrus\n- vendor: remove common lib\n\n### Unclassified\n\n- Clean up dependencies ([#173](https://github.com/ory/fosite/issues/173)) ([524d3b6](https://github.com/ory/fosite/commit/524d3b6fb51e81330608f727c63dbf41980de7ae)):\n\n  - vendor: remove stray github.com/Sirupsen/logrus\n  - vendor: remove common lib\n\n# [0.9.0](https://github.com/ory/fosite/compare/v0.8.0...v0.9.0) (2017-06-03)\n\ndocs: add 0.9.0 release note\n\n### Documentation\n\n- Add 0.9.0 release note ([852cf82](https://github.com/ory/fosite/commit/852cf82344c2d78863508eaa0fca32f468cd7fab))\n\n### Unclassified\n\n- Enable fosite composing with custom hashers. ([#170](https://github.com/ory/fosite/issues/170)) ([d70d882](https://github.com/ory/fosite/commit/d70d882d0b125e386e52cd1aee3712d48538fd66))\n- Removed implicit storage as its never used - closes [#165](https://github.com/ory/fosite/issues/165) ([#171](https://github.com/ory/fosite/issues/171)) ([fe74027](https://github.com/ory/fosite/commit/fe74027ee70292a72fe453095603cca060ff6290))\n\n# [0.8.0](https://github.com/ory/fosite/compare/v0.7.0...v0.8.0) (2017-05-18)\n\ndocs: add notes for breaking changes that come with 0.8.0\n\n### Documentation\n\n- Add notes for breaking changes that come with 0.8.0 ([d5fafb8](https://github.com/ory/fosite/commit/d5fafb87b04ddf2ced6b58a063eac71892bcd5c9))\n\n### Unclassified\n\n- Added context to GetClient storage interface ([#162](https://github.com/ory/fosite/issues/162)) ([974585d](https://github.com/ory/fosite/commit/974585d4f809f96c8bf9ee3f0f1540bf9478b8a9)), closes [#161](https://github.com/ory/fosite/issues/161)\n- Removed \\*http.Request from interfaces that access request objects ([786b971](https://github.com/ory/fosite/commit/786b971ca1d36a8f0bd0a5c0bfa798802d5c0c26)):\n\n  - removed the requirement to \\*http.Request for endpoints and response object, they are resolvable trough the request.GetRequestForm\n\n  - updated readme to reflect changes to implementation\n\n  - run goimports on internal dir\n    added goimports command to generate-mocks.sh to force first run after generating the mock files\n\n- Set authorize code expire time before persist ([#166](https://github.com/ory/fosite/issues/166)) ([305a74f](https://github.com/ory/fosite/commit/305a74fe20649bde7150509ec072a43b958e0ee9))\n- Set expiry date on implicit access tokens ([#164](https://github.com/ory/fosite/issues/164)) ([0785b07](https://github.com/ory/fosite/commit/0785b072dba9a9cf65bc8b7304af4e7691f96a96))\n\n# [0.7.0](https://github.com/ory/fosite/compare/v0.6.19...v0.7.0) (2017-05-03)\n\nvendor: glide update\n\n### Documentation\n\n- Add breaking changes note ([7d726e1](https://github.com/ory/fosite/commit/7d726e13800667a32372bb7f97a7f652c7eb9f3e))\n\n### Unclassified\n\n- Glide update ([575dd79](https://github.com/ory/fosite/commit/575dd791f9f11cd8e5471178b1ec3a7638653cae))\n- Goimports ([1cb7e26](https://github.com/ory/fosite/commit/1cb7e26e164c1f11b7cb6ab64191d680d19e7ca0))\n- Move to new org ([bd13085](https://github.com/ory/fosite/commit/bd1308540c519a09d4228048d3d9a028d363a7bd))\n- Replace golang.org/x/net/context with context ([6b1d931](https://github.com/ory/fosite/commit/6b1d93124be24d4b2949060a4c3428c220667738))\n\n# [0.6.19](https://github.com/ory/fosite/compare/v0.6.18...v0.6.19) (2017-05-03)\n\naccess: revert regression issue introduced by #150\n\n### Unclassified\n\n- Revert regression issue introduced by [#150](https://github.com/ory/fosite/issues/150) ([6f13d58](https://github.com/ory/fosite/commit/6f13d58533573ec847dca6e5cfa1d4338aef95b1))\n- Revert regression issue introduced by [#150](https://github.com/ory/fosite/issues/150) ([6bb4135](https://github.com/ory/fosite/commit/6bb4135523c4e2fcf7b3a0630e233ccb7a806fc8))\n\n# [0.6.18](https://github.com/ory/fosite/compare/v0.6.17...v0.6.18) (2017-04-14)\n\noauth2: basic auth should www-url-decode client id and secret - closes #150\n\n### Unclassified\n\n- handler/oauth2: removes RevokeHandler from JWT introspector (#155) ([344dbef](https://github.com/ory/fosite/commit/344dbeff15cfce9990c0ccfd687a0c44f6a81569)), closes [#155](https://github.com/ory/fosite/issues/155):\n\n  - Removes RevokeHandler from JWT Introspector\n\n  RevokeHandler has been removed because it conflicts with Stateless JWT\n  accesstokens and revocable hmac refresh tokens. The readme has been\n  updated to warn users about possible misconfiguration.\n\n  - Moves text back to correct section\n\n- Allow localhost subdomains such as blog.localhost:1234 ([5e1c890](https://github.com/ory/fosite/commit/5e1c890fd144ce1ec12ee26d7ebfe02862af067e))\n- Basic auth should www-url-decode client id and secret - closes [#150](https://github.com/ory/fosite/issues/150) ([ad395bf](https://github.com/ory/fosite/commit/ad395bf323137e30ce12d40646a9229a42695863))\n- Get the token from the access_token query parameter ([#156](https://github.com/ory/fosite/issues/156)) ([9edac04](https://github.com/ory/fosite/commit/9edac0441f4f9c8400e0cbd9cd637e9d2bfcae05))\n\n# [0.6.17](https://github.com/ory/fosite/compare/v0.6.15...v0.6.17) (2017-02-24)\n\nreadme: update badges to ory\n\n### Unclassified\n\n- revert unintentional change ([14a18a7](https://github.com/ory/fosite/commit/14a18a714c419b31d4bf1341e1017159bc17540f))\n- make stateless validator return an error on revocation ([f8f7978](https://github.com/ory/fosite/commit/f8f797869eaa1895791ed1bba3b0f3c3a06a03ca))\n- dont client id for aud ([a39200b](https://github.com/ory/fosite/commit/a39200b3eb08b77d0181586454e5d7348d519aa5))\n- handler/oauth2: allow stateless introspection of jwt access tokens ([c2d2ac2](https://github.com/ory/fosite/commit/c2d2ac258ecb1378493c0d60add2967e510fbc6b))\n- Redirect uris should ignore cases during matching - closes [#144](https://github.com/ory/fosite/issues/144) ([4b88774](https://github.com/ory/fosite/commit/4b887746fde977a0f5cf8fbbe06c90577f416fca))\n- Update badges to ory ([9b33931](https://github.com/ory/fosite/commit/9b33931ee14ae0768ea46a423d569330a85b482e))\n\n# [0.6.15](https://github.com/ory/fosite/compare/v0.6.14...v0.6.15) (2017-02-11)\n\nerrors: fixed typo in acccess_error\n\n### Unclassified\n\n- Fixed typo in acccess_error ([08b2242](https://github.com/ory/fosite/commit/08b2242b66a8d430084c6aada57018f8c2dabea6))\n\n# [0.6.14](https://github.com/ory/fosite/compare/v0.6.13...v0.6.14) (2017-01-08)\n\nallow public clients to revoke tokens with just an ID\n\nThis functionality is described in the OAuth2 spec here: https://tools.ietf.org/html/rfc7009#section-5\n\n### Unclassified\n\n- allow public clients to revoke tokens with just an ID ([7b94f47](https://github.com/ory/fosite/commit/7b94f470bede7cf5e94d11e05aa3364d0db75fe2)), closes [/tools.ietf.org/html/rfc7009#section-5](https://github.com//tools.ietf.org/html/rfc7009/issues/section-5)\n- Conform to RFC 6749 ([c404554](https://github.com/ory/fosite/commit/c4045541ae19c88634d79818a0060d71c9ef07ec)), closes [/tools.ietf.org/html/rfc6749#section-5](https://github.com//tools.ietf.org/html/rfc6749/issues/section-5):\n\n  Section 5.2 specifies the parameters for access error responses;\n  the \"error\" and \"error_description\" parameters are misnamed.\n\n# [0.6.13](https://github.com/ory/fosite/compare/v0.6.12...v0.6.13) (2017-01-08)\n\nrequest: fix SetRequestedScopes (#139)\n\nSigned-off-by: Peter Schultz <peter.schultz@classmarkets.com>\n\n### Unclassified\n\n- Fix SetRequestedScopes ([#139](https://github.com/ory/fosite/issues/139)) ([d02c427](https://github.com/ory/fosite/commit/d02c427a76d5d8ef2f099bae79b7af69be3f643a))\n\n# [0.6.12](https://github.com/ory/fosite/compare/v0.6.11...v0.6.12) (2017-01-02)\n\nauthorize: allow custom redirect url schemas\n\n### Unclassified\n\n- Allow custom redirect url schemas ([c740b70](https://github.com/ory/fosite/commit/c740b703399e7a1479dac9f261baec4b341f6cff))\n- Properly wrap errors ([e054b6e](https://github.com/ory/fosite/commit/e054b6e04a9253e3d1d333064998045b3ab649fe))\n\n# [0.6.11](https://github.com/ory/fosite/compare/v0.6.10...v0.6.11) (2017-01-02)\n\nopenid: c_hash / at_hash should use url-safe base64 encoding\n\n### Unclassified\n\n- C_hash / at_hash should use url-safe base64 encoding ([33d4414](https://github.com/ory/fosite/commit/33d44146ef17f9c176a2a74e7ee77eaae98ee5c1))\n\n# [0.6.10](https://github.com/ory/fosite/compare/v0.6.9...v0.6.10) (2016-12-29)\n\nopenid: c_hash / at_hash should be string not byte slice\n\n### Unclassified\n\n- C_hash / at_hash should be string not byte slice ([b489cc9](https://github.com/ory/fosite/commit/b489cc95b87d74785c5e9b8ea5eb48e975559f63))\n\n# [0.6.9](https://github.com/ory/fosite/compare/v0.6.8...v0.6.9) (2016-12-29)\n\noauth2/implicit: fix redirect url on error\nSigned-off-by: Nikita Vorobey <nikita@vorobey.by>\n\n### Documentation\n\n- Fix missing protocol in link in readme ([#132](https://github.com/ory/fosite/issues/132)) ([37ef374](https://github.com/ory/fosite/commit/37ef374aec940d6b9fdcc33800c09ba08b830f39))\n\n### Unclassified\n\n- oauth2/implicit: fix redirect url on error ([435288c](https://github.com/ory/fosite/commit/435288ccdee2aed2447a5a0babf885dbfeae6b55))\n\n# [0.6.8](https://github.com/ory/fosite/compare/v0.6.7...v0.6.8) (2016-12-20)\n\nlint: gofmt -w -s .\n\n### Unclassified\n\n- Add id_token + code flow ([3f347e3](https://github.com/ory/fosite/commit/3f347e35b603fdde805a8b7a4fdaeff6bcddaa02))\n- Fix typos ([#130](https://github.com/ory/fosite/issues/130)) ([e6b410d](https://github.com/ory/fosite/commit/e6b410d519a0944cd52ffde656f7b21c4682b5a6))\n- Gofmt -w -s . ([95caa96](https://github.com/ory/fosite/commit/95caa96835a1254ba3f8f4a21e635fe6da34f0fe))\n\n# [0.6.7](https://github.com/ory/fosite/compare/v0.6.6...v0.6.7) (2016-12-06)\n\naccess: response expires in should be int, not string\n\n### Unclassified\n\n- Response expires in should be int, not string ([a2080a3](https://github.com/ory/fosite/commit/a2080a30c04abf6a9b3f7dee63026cb5816f8bbd))\n\n# [0.6.6](https://github.com/ory/fosite/compare/v0.6.5...v0.6.6) (2016-12-06)\n\nerrors: add inactive token error\n\n### Unclassified\n\n- Add content type to error response ([75aad53](https://github.com/ory/fosite/commit/75aad53be3dfda8a02a47bd8f574dc23914b4b65))\n- Add inactive token error ([0151f1e](https://github.com/ory/fosite/commit/0151f1e17dda1c81185d00b388c83b25b7c5f72c))\n- Resolve broken test ([51ab7bb](https://github.com/ory/fosite/commit/51ab7bb960640bcd8722e2731af72c6c26e3bacd))\n\n# [0.6.5](https://github.com/ory/fosite/compare/v0.6.4...v0.6.5) (2016-12-04)\n\nintrospection: always return the error\n\n### Unclassified\n\n- Always return the error ([366b4c1](https://github.com/ory/fosite/commit/366b4c1a06369b2cecaf6f71b720273e686d520d))\n\n# [0.6.4](https://github.com/ory/fosite/compare/v0.6.3...v0.6.4) (2016-11-29)\n\ntoken/jwt: Allow single element string arrays to be treated as strings\n\nThis commit allows `aud` to be passed in as a single element array\nduring consent validation on Hydra. This fixes\nhttps://github.com/ory-am/hydra/issues/314.\n\nSigned-off-by: Son Dinh <son.dinh@blacksquaremedia.com>\n\n### Unclassified\n\n- token/jwt: Allow single element string arrays to be treated as strings ([5388e10](https://github.com/ory/fosite/commit/5388e107ac994650eb1623efb6c88d14d045e325)):\n\n  This commit allows `aud` to be passed in as a single element array\n  during consent validation on Hydra. This fixes\n  https://github.com/ory-am/hydra/issues/314.\n\n# [0.6.2](https://github.com/ory/fosite/compare/v0.6.1...v0.6.2) (2016-11-25)\n\noauth2/introspection: endpoint responds to invalid requests appropriately (#126)\n\n### Unclassified\n\n- oauth2/introspection: endpoint responds to invalid requests appropriately (#126) ([9360f64](https://github.com/ory/fosite/commit/9360f6473249324e2c2c2f6e94b3f123bdb929fa)), closes [#126](https://github.com/ory/fosite/issues/126)\n\n# [0.6.1](https://github.com/ory/fosite/compare/v0.6.0...v0.6.1) (2016-11-17)\n\ncore: resolve issues with token introspection and sessions\n\n### Unclassified\n\n- Resolve issues with token introspection and sessions ([895d169](https://github.com/ory/fosite/commit/895d16935bd97831eecff66b1d775af9b91a2506))\n\n# [0.6.0](https://github.com/ory/fosite/compare/v0.5.1...v0.6.0) (2016-11-17)\n\ncore: resolve session referencing issue (#125)\n\n### Unclassified\n\n- Comply with Go license terms - closes [#123](https://github.com/ory/fosite/issues/123) ([4c4507f](https://github.com/ory/fosite/commit/4c4507f865e0968e0a06c961aef9176bd8e7b7e3))\n- Resolve session referencing issue ([#125](https://github.com/ory/fosite/issues/125)) ([81a3229](https://github.com/ory/fosite/commit/81a3229706c38e29c7745acf930272f4711547f4))\n\n# [0.5.1](https://github.com/ory/fosite/compare/v0.5.0...v0.5.1) (2016-10-22)\n\nhandler/oauth2: set JWT ExpiresAt claim per TokenType from the session (#121)\n\nSigned-off-by: Cristian Graziano <cristian.graziano@gmail.com>\n\n### Unclassified\n\n- handler/oauth2: set JWT ExpiresAt claim per TokenType from the session (#121) ([66170ae](https://github.com/ory/fosite/commit/66170ae25a3ac26abcd2ab27d687434d4e2a60a7)), closes [#121](https://github.com/ory/fosite/issues/121)\n- oauth2/introspection: do not include the session in the response ([daad271](https://github.com/ory/fosite/commit/daad27179358c71aeb89dc8d7d6fdd2c04a15871))\n\n# [0.5.0](https://github.com/ory/fosite/compare/v0.4.0...v0.5.0) (2016-10-17)\n\n0.5.0 (#119)\n\n- all: resolve regression issues introduced by 0.4.0 - closes #118\n- oauth2: introspection handler excess calls - closes #117\n- oauth2: inaccurate expires_in time - closes #72\n\n### Unclassified\n\n- 0.5.0 (#119) ([eb9077f](https://github.com/ory/fosite/commit/eb9077f6608d776ae50eb2ad4205705bad6ee0eb)), closes [#119](https://github.com/ory/fosite/issues/119) [#118](https://github.com/ory/fosite/issues/118) [#117](https://github.com/ory/fosite/issues/117) [#72](https://github.com/ory/fosite/issues/72)\n\n# [0.4.0](https://github.com/ory/fosite/compare/v0.3.6...v0.4.0) (2016-10-16)\n\nall: clean up, resolve broken tests\n\n### Documentation\n\n- Add danilobuerger and jrossiter to hall of fame ([f864e26](https://github.com/ory/fosite/commit/f864e26f6b22726ad592742e8654b099729a4b46))\n- Add offline note to readme ([60a7672](https://github.com/ory/fosite/commit/60a767221625d0f6541f203e41a7ef20a1782eb0))\n- Document reasoning for interface{} in compose package - closes [#94](https://github.com/ory/fosite/issues/94) ([f193012](https://github.com/ory/fosite/commit/f1930124e072153f9d5ec8dc4f14733f9bdc20a1))\n\n### Unclassified\n\n- Allow public clients to access token endpoint - closes [#78](https://github.com/ory/fosite/issues/78) ([cbe433e](https://github.com/ory/fosite/commit/cbe433e1985d782217cb973261a3b1677af1f664))\n- Clean up, resolve broken tests ([1041e67](https://github.com/ory/fosite/commit/1041e67f395480fd334446bd8b13f09dfbeeb658))\n- Flatten package hierarchy and merge files - closes [#93](https://github.com/ory/fosite/issues/93) ([9b7ba80](https://github.com/ory/fosite/commit/9b7ba808064d33a5251cb6cd3d30d2d4b8f3ff25))\n- Reduce third party dependencies - closes [#116](https://github.com/ory/fosite/issues/116) ([5ec5cff](https://github.com/ory/fosite/commit/5ec5cff534008820671e56f6b062dc2aa1e364e6))\n- Split library and example - closes [#92](https://github.com/ory/fosite/issues/92) ([6d76d35](https://github.com/ory/fosite/commit/6d76d35018159d830a9b050f99c15b099a6975e2))\n\n# [0.3.6](https://github.com/ory/fosite/compare/v0.3.5...v0.3.6) (2016-10-07)\n\noauth2: added refresh token generation for password grant type (#107)\n\n- oauth2: added refresh token generation for password grant type when offline scope is requested\n\nSigned-off-by: Jason Rossiter <jrossiter403@gmail.com>\n\n### Unclassified\n\n- Added refresh token generation for password grant type ([#107](https://github.com/ory/fosite/issues/107)) ([81c3cbd](https://github.com/ory/fosite/commit/81c3cbdb6b00399219b57c9e1aa1b4cbebf888d8)):\n\n  - oauth2: added refresh token generation for password grant type when offline scope is requested\n\n# [0.3.5](https://github.com/ory/fosite/compare/v0.3.4...v0.3.5) (2016-10-06)\n\nhandler/oauth2: resolve issues with refresh token flow (#110)\n\n- handler/oauth2/refresh: requestedAt time is not reset - closes #109\n- handler/oauth2/refresh: session is not transported to new access token - closes #108\n\n### Unclassified\n\n- handler/oauth2: resolve issues with refresh token flow (#110) ([bef6197](https://github.com/ory/fosite/commit/bef61973fdee1a18aedba4e42a1d8977c3f8cc1c)), closes [#110](https://github.com/ory/fosite/issues/110) [#109](https://github.com/ory/fosite/issues/109) [#108](https://github.com/ory/fosite/issues/108)\n- Add tests to request state ([8c7c77e](https://github.com/ory/fosite/commit/8c7c77e1f2116c38ed1765cc846c4b7c0bdc94b8))\n\n# [0.3.4](https://github.com/ory/fosite/compare/v0.3.3...v0.3.4) (2016-10-04)\n\nhandler/oauth2: refresh token does not migrate original access data - closes #103 (#104)\n\n### Unclassified\n\n- handler/oauth2: refresh token does not migrate original access data - closes #103 (#104) ([8ffa0bc](https://github.com/ory/fosite/commit/8ffa0bc825179bbffbd3a548219062846f9b0250)), closes [#103](https://github.com/ory/fosite/issues/103) [#104](https://github.com/ory/fosite/issues/104)\n\n# [0.3.3](https://github.com/ory/fosite/compare/v0.3.2...v0.3.3) (2016-10-03)\n\nauthorize: scopes should be separated by %20 and not +, to ensure javascript compatibility - closes #101 (#102)\n\n### Documentation\n\n- Fix reference to store example in readme ([#87](https://github.com/ory/fosite/issues/87)) ([b1e2cda](https://github.com/ory/fosite/commit/b1e2cda5bb64ffdcce40aed52af5c9be0852c8ef))\n\n### Unclassified\n\n- Scopes should be separated by %20 and not +, to ensure javascript compatibility - closes [#101](https://github.com/ory/fosite/issues/101) ([#102](https://github.com/ory/fosite/issues/102)) ([e61a25f](https://github.com/ory/fosite/commit/e61a25f3e3d3f067141c3f6464ab4213f4e14d45))\n\n# [0.3.2](https://github.com/ory/fosite/compare/v0.3.1...v0.3.2) (2016-09-22)\n\nopenid: resolves an issue with the explicit token flow\n\n### Unclassified\n\n- Resolves an issue with the explicit token flow ([aa1b854](https://github.com/ory/fosite/commit/aa1b8548678e5807399d35b5bcad4f62a83cf6e4))\n\n# [0.3.1](https://github.com/ory/fosite/compare/v0.3.0...v0.3.1) (2016-09-22)\n\n0.3.1 (#98)\n\n- all: better error handling - closes #100\n- oauth2/implicit: bad HTML encoding of the scope parameter - closes #95\n- oauth2: state parameter is missing when response_type=id_token - closes #96\n- oauth2: id token hashes are not base64 url encoded - closes #97\n- openid: hybrid flow using `token+code+id_token` returns multiple tokens of the same type - closes #99\n\n### Unclassified\n\n- 0.3.1 (#98) ([b16e3fc](https://github.com/ory/fosite/commit/b16e3fcfdf8f3f47802cd87b2388235186b9f108)), closes [#98](https://github.com/ory/fosite/issues/98) [#100](https://github.com/ory/fosite/issues/100) [#95](https://github.com/ory/fosite/issues/95) [#96](https://github.com/ory/fosite/issues/96) [#97](https://github.com/ory/fosite/issues/97) [#99](https://github.com/ory/fosite/issues/99)\n- Add additional tests to HierarchicScopeStrategy ([#81](https://github.com/ory/fosite/issues/81)) ([64e869c](https://github.com/ory/fosite/commit/64e869cb9b69a4b027bfc0284bfeb33b2836ea41))\n- Corrected grant type in comment ([#82](https://github.com/ory/fosite/issues/82)) ([27ddd19](https://github.com/ory/fosite/commit/27ddd19e9b07101b712b4b7d82443b3c9d53fa69))\n- Removed unnecessary logging ([#86](https://github.com/ory/fosite/issues/86)) ([cb328ca](https://github.com/ory/fosite/commit/cb328caca6287c7995ee5285c6446bffd4ef496b))\n- Simplify scope comparison logic ([7fb850e](https://github.com/ory/fosite/commit/7fb850ef530b3445adb07406f8bc773e6ad38884))\n\n# [0.3.0](https://github.com/ory/fosite/compare/v0.2.4...v0.3.0) (2016-08-22)\n\nvendor: jwt-go is now v3.0.0 (#77)\n\nSigned-off-by: Alexander Widerberg <alexander.widerberg@cybercom.com>\n\n### Unclassified\n\n- HierarchicScopeStrategy worngly accepts missing scopes ([7faee6b](https://github.com/ory/fosite/commit/7faee6bbd53ee762ddfe194fb2ea5e7d0205e46d))\n- Jwt-go is now v3.0.0 ([#77](https://github.com/ory/fosite/issues/77)) ([76ef7ea](https://github.com/ory/fosite/commit/76ef7ea8f51735d63476cd91e1f9a9f367d544cb))\n\n# [0.2.4](https://github.com/ory/fosite/compare/v0.2.3...v0.2.4) (2016-08-09)\n\nall: resolve race condition and package fosite with glide\n\n### Unclassified\n\n- Resolve race condition and package fosite with glide ([66b53a9](https://github.com/ory/fosite/commit/66b53a903c03950ac5180dc30c3f69e477344205))\n\n# [0.2.3](https://github.com/ory/fosite/compare/v0.2.2...v0.2.3) (2016-08-08)\n\nvendor: commit missing lock file\n\n### Unclassified\n\n- Commit missing lock file ([be30574](https://github.com/ory/fosite/commit/be30574ee5f5f51cb22faf0a187231141f1c2f63))\n\n# [0.2.2](https://github.com/ory/fosite/compare/v0.2.1...v0.2.2) (2016-08-08)\n\nvendor: updated go-jwt to use semver instead of gopkg\n\n### Unclassified\n\n- Updated go-jwt to use semver instead of gopkg ([3b66309](https://github.com/ory/fosite/commit/3b663092771e796816c1f9ac2169139f27b70c4b))\n\n# [0.2.1](https://github.com/ory/fosite/compare/v0.2.0...v0.2.1) (2016-08-08)\n\ncore: remove unused fields and methods from client\n\n### Unclassified\n\n- Remove unused fields and methods from client ([5f1851b](https://github.com/ory/fosite/commit/5f1851b088e9f087a7bd3e7beca4c3112418fcfc))\n- Resolved package naming issue ([4d1caeb](https://github.com/ory/fosite/commit/4d1caeb18275f2a4a5f40a7cdd06a74cfc1c3e73))\n\n# [0.2.0](https://github.com/ory/fosite/compare/v0.1.0...v0.2.0) (2016-08-06)\n\nall: composable factories, better token validation, better scope handling and simplify structure\n\n- readme: add gitter chat badge closes #67\n- handler: flatten packages closes #70\n- openid: don't autogrant openid scope - closes #68\n- all: clean up scopes / arguments - closes #66\n- all: composable factories - closes #64\n- all: refactor token validation - closes #63\n- all: remove mandatory scope - closes #62\n\n### Unclassified\n\n- Composable factories, better token validation, better scope handling and simplify structure ([a92c755](https://github.com/ory/fosite/commit/a92c75531cf5bb89524cd719c9bc2c98fe709c62)), closes [#67](https://github.com/ory/fosite/issues/67) [#70](https://github.com/ory/fosite/issues/70) [#68](https://github.com/ory/fosite/issues/68) [#66](https://github.com/ory/fosite/issues/66) [#64](https://github.com/ory/fosite/issues/64) [#63](https://github.com/ory/fosite/issues/63) [#62](https://github.com/ory/fosite/issues/62)\n\n# [0.1.0](https://github.com/ory/fosite/compare/7adad58c327cf52530d8c1e08059564ca0b51538...v0.1.0) (2016-08-01)\n\noauth2: implicit handlers do not require tls over https (#61)\n\ncloses #60\n\n### Code Refactoring\n\n- New api signatures ([8a830d3](https://github.com/ory/fosite/commit/8a830d34405f3b3d50734f5258151426dc61a94b))\n\n### Documentation\n\n- Add -d option to go get ([0e63038](https://github.com/ory/fosite/commit/0e630382425e6d1a7e9177828eeb59f6748e856f))\n- Define implicitHandler ([745a4df](https://github.com/ory/fosite/commit/745a4df7758caa8c3338d006a60f4948120f00bf)):\n\n  Someone forgot to rename the variable name when copy-pasting in the example.\n\n- Document new token generation and validation ([ddef55b](https://github.com/ory/fosite/commit/ddef55ba96b6c533681b7a1953da5c33ed30587a))\n- Drafted workflows ([4ad1d14](https://github.com/ory/fosite/commit/4ad1d146d67c0e17c545d1c3959dc697777b9828))\n- Explain what handlers are ([48ca03b](https://github.com/ory/fosite/commit/48ca03b9026843f1047e510c3b66ccb6a54def2c))\n- Fix typos in readme ([b9ed7ac](https://github.com/ory/fosite/commit/b9ed7acf8b00f05fcc99578f7a49d55275041515))\n- Readme ([a5aa697](https://github.com/ory/fosite/commit/a5aa69736505502303bc99ee180539033d5ba886))\n- Readme ([f77fd41](https://github.com/ory/fosite/commit/f77fd412ea7f2be15b0f0c5ac801ac177e7d3dc4))\n- Readme ([e143d8c](https://github.com/ory/fosite/commit/e143d8ca506f7cf2f70c92710b2fc123e003a12d))\n- Readme ([d483568](https://github.com/ory/fosite/commit/d483568c06d9542bbf383771dee3ea44b60dff0e))\n- Updated authorize section ([9c21afb](https://github.com/ory/fosite/commit/9c21afbc38fbd35f951c127beb2623ae4d2590e7))\n- Updated readme docs ([336a2cd](https://github.com/ory/fosite/commit/336a2cd10ac08ca6867952555802c225c475c17a))\n\n### Unclassified\n\n- updated gif ([39c239f](https://github.com/ory/fosite/commit/39c239faca97882da9d5293306dfdcbabf8ee0cc))\n- gofmt ([f813288](https://github.com/ory/fosite/commit/f813288911ba653b197589edc4206b52d6c11545))\n- updated example gif ([29b39ea](https://github.com/ory/fosite/commit/29b39ea32fee62b1013ee383ce56c653a7ef33d9))\n- added open id connect to example ([6f0ce68](https://github.com/ory/fosite/commit/6f0ce681147428b51c3673a4c46ab018cf46cf81))\n- added integration tests ([8d47f80](https://github.com/ory/fosite/commit/8d47f80420c288a25ba846927c532e156d27a23b))\n- added doc to fix travis ([a0db129](https://github.com/ory/fosite/commit/a0db129b0a063fe9438560b1a339f973736327f7))\n- Add go report card ([204c5d6](https://github.com/ory/fosite/commit/204c5d60b6f42b0e8f918bdd96214698ad3717da))\n- Clean-up fosite-example/main.go link in README.md ([497ff80](https://github.com/ory/fosite/commit/497ff807a10a9fb41b697c5f91ed9eeb26375b24)):\n\n  The README url to the suggested example was broken.\n\n- Added jti as parameter to claims helper to privide better interface to developers ([bde3822](https://github.com/ory/fosite/commit/bde38221ed4d32c2f175a60540ac529b306a2ced))\n- Added missing jti claim ([26f41a0](https://github.com/ory/fosite/commit/26f41a06689bd12f7165044a2de7d9332fea3759))\n- Added NOTE ([64516f8](https://github.com/ory/fosite/commit/64516f8e2e0154f46358723d710447380f6d5dc2))\n- Removed unnecessary print. Added bugfix from Arekkas. ([96458b6](https://github.com/ory/fosite/commit/96458b6cf8ee46edbef35598b6d3d877fb63ff87))\n- Example updated ([5022339](https://github.com/ory/fosite/commit/50223396d01d742b1a0a3f0be1252e339cf22985))\n- Added working example of jwt token ([9410fca](https://github.com/ory/fosite/commit/9410fca73dfb00f1dc1e3aa6ec580554ec3daaba))\n- Added tests. Still need to verify implemtation with test ([1ebdd88](https://github.com/ory/fosite/commit/1ebdd88746c875bff1a6d074437c5742c812a200))\n- WIP ([caaa43a](https://github.com/ory/fosite/commit/caaa43a184a66b78972fa3725d3636837da1cd68))\n- readme ([c97d844](https://github.com/ory/fosite/commit/c97d84471bc3941e479a79ef2eed4b1ddc07f21c))\n- readme ([fe24f26](https://github.com/ory/fosite/commit/fe24f261de60711d91c016c435ce83938d367609))\n- readme ([be8cd23](https://github.com/ory/fosite/commit/be8cd2333d3eaaf266b56c30951741d7f88edc5e))\n- refactor done (unstaged) ([625f168](https://github.com/ory/fosite/commit/625f1683a0449384877823c2dae1464718c0b264))\n- unstaged ([6c616b1](https://github.com/ory/fosite/commit/6c616b12198419ed33035dabd9e33d1e2afffff2))\n- unstaged ([17ad70b](https://github.com/ory/fosite/commit/17ad70b88ff6ba2add1136762428340d21b86126))\n- Include user session data in all calls to storage handlers. ([2be3fc1](https://github.com/ory/fosite/commit/2be3fc18f5a35646f7cd001eb6b4b92cbb07ef16))\n- unstaged ([fde7c80](https://github.com/ory/fosite/commit/fde7c803798b1f7fa2056bb434dd74d9a4ebeea7))\n- unstaged ([e775aad](https://github.com/ory/fosite/commit/e775aadbc33ec8f15adc7f3b78de5eca53b349f5))\n- unstaged ([ae2fc16](https://github.com/ory/fosite/commit/ae2fc169e663486248f6518a3497b0245754892e))\n- handler/core: fixed tests ([7f5938a](https://github.com/ory/fosite/commit/7f5938adc4f79380239292cd3b6f6e0064df39ef))\n- core handlers: added tests ([e9affb7](https://github.com/ory/fosite/commit/e9affb77442c46fb4647c9a22c1a5eb60945d21d))\n- authorize/explicit ✓ ([d61635b](https://github.com/ory/fosite/commit/d61635b26e3cd34822d4f3ffc0fe25bd4774bd45))\n- authorize/explicit: minor name refactoring and tests for authorize endpoint ([4736e28](https://github.com/ory/fosite/commit/4736e284b327f0941e58073bf860caca4117c545))\n- plugin/token: fix import path ([fdba2f7](https://github.com/ory/fosite/commit/fdba2f7b5bdec0e77faa804066abe1b8895b909e))\n- unstaged ([f939597](https://github.com/ory/fosite/commit/f939597f3f3e6ad4eb582a56b643589271cbf646))\n- Initial commit ([7adad58](https://github.com/ory/fosite/commit/7adad58c327cf52530d8c1e08059564ca0b51538))\n- Access code request workflow finalized ([0232918](https://github.com/ory/fosite/commit/0232918e250eeee93bdab98502a5a30273510c49))\n- Access request api draft ([9f482ef](https://github.com/ory/fosite/commit/9f482ef50711b608dbfb72022ef998f947f0487a))\n- Add api stability section ([3ca6ec9](https://github.com/ory/fosite/commit/3ca6ec936d6b3a8dab0add136b3a2fbfefa4b4df))\n- Add go-rethink tags ([49c82bc](https://github.com/ory/fosite/commit/49c82bc9fe0c4edbb90579e1746e0dad1ae01c5c))\n- Add ValidateToken to CoreValidator ([4c2b9d8](https://github.com/ory/fosite/commit/4c2b9d8f0c84f19ae11f59cb07927ceb59598adc))\n- Added authorize code grant example ([269c5fa](https://github.com/ory/fosite/commit/269c5fab1109bb4cd2e624940dac1b9467663507))\n- Added client grant and did some renaming ([75c8179](https://github.com/ory/fosite/commit/75c8179ef537e6ea87b16cdd87016fca6d389490))\n- Added cristiangraz to the hall of fame ([1b6e2b4](https://github.com/ory/fosite/commit/1b6e2b470f8f477fdfb2ec1f914e64293bdc7b1b))\n- Added danielchatfield to the hall of fame ([2b988a8](https://github.com/ory/fosite/commit/2b988a8b2abd3dea619e31e174b306e45a62fcc1))\n- Added go 1.6 ([ae41a0a](https://github.com/ory/fosite/commit/ae41a0ace8f74480fec08c83fb1c7bda35830f35))\n- Added go1.4 to allowed failures ([49aa920](https://github.com/ory/fosite/commit/49aa920401a3cf62f16541d8fa4f9fb488270cf3))\n- Added grant and response type validation ([f524fc2](https://github.com/ory/fosite/commit/f524fc2b026621192407ce22e71f2b062635b134))\n- Added json and gorethink tags ([99c836c](https://github.com/ory/fosite/commit/99c836cd526c276419e31db25b695dd0097f0656))\n- Added JWT generator and validator. ([58acd68](https://github.com/ory/fosite/commit/58acd688530666f4720eeacb598da72a475282d5)), closes [#16](https://github.com/ory/fosite/issues/16)\n- Added missing file ([8fc1615](https://github.com/ory/fosite/commit/8fc1615bf40777c2c456e1ec4515a269e348e3b4))\n- Added owner method ([78012ed](https://github.com/ory/fosite/commit/78012ed85819caaf154fe9dc4afd212f068fc0a1))\n- Added tests fragment capabilities to writeresponse ([6df0eca](https://github.com/ory/fosite/commit/6df0eca1d74d79e807a77910776ff2249340f103))\n- Api cleanup, gofmt ([3d6e8b6](https://github.com/ory/fosite/commit/3d6e8b6281c6d170a77103b89cfabdd3086a03f0))\n- Api refactor ([d936c91](https://github.com/ory/fosite/commit/d936c914253c58297dcc462a14fb6ddb87bfcac4))\n- Basic draft ([480af91](https://github.com/ory/fosite/commit/480af9165fef8a5e8bcc4896ed680cbf5afbe23c))\n- Defined OAuth2.HandleResponseTypes ([30b6e74](https://github.com/ory/fosite/commit/30b6e74b13f567237ea770bf6a4e99dd95085dcc)):\n\n  Incorporated feedback from GitHub, did refactoring and renaming, added tests\n\n- Enforce https for all redirect endpoints except localhost ([d65b45a](https://github.com/ory/fosite/commit/d65b45a192cd3a2073f8e6118c005ac93f0bb974))\n- Enforce use of scopes ([12d76dd](https://github.com/ory/fosite/commit/12d76dd7c86408e52f85a3099f6063c462e0b97b)), closes [#14](https://github.com/ory/fosite/issues/14)\n- Finalized auth endpoint, added tests, added integration tests ([c6dcb90](https://github.com/ory/fosite/commit/c6dcb90ccbd1d7a179a601e0e6d46cc1004cde92))\n- Finalized token endpoint api ([8de3f10](https://github.com/ory/fosite/commit/8de3f10d89b47ad0d23cf13b425442393f51e104))\n- Finished up integration tests ([a6d027e](https://github.com/ory/fosite/commit/a6d027e3a4f817bb72706fbf0d7e3245f8823b27))\n- Fix broken test ([653e324](https://github.com/ory/fosite/commit/653e3248c0a1aae3bb2c33f64f21854155304e1a))\n- Fix config ([82e9332](https://github.com/ory/fosite/commit/82e9332815579e538089dff61281a7a446f0f6cd))\n- Fix deps ([bcc6a07](https://github.com/ory/fosite/commit/bcc6a07fef6f4036643e79eaf3cdd1f485a682fb))\n- Fix jwt strategy interface mismatch ([#58](https://github.com/ory/fosite/issues/58)) ([4d0a545](https://github.com/ory/fosite/commit/4d0a5450dd3b44e44f5169f90b3591566a6eef1d))\n- Fix unique scope tests ([3ac3a79](https://github.com/ory/fosite/commit/3ac3a798cd1ad5fcd0a53abb45fbb93c7321d154))\n- Fixed granted scope match ([13b7efa](https://github.com/ory/fosite/commit/13b7efae68b4f68171422b876e8df197b3453e42))\n- Fixed racy tests ([f0b691d](https://github.com/ory/fosite/commit/f0b691dac03f455ae429116cf121a1ae9054c3e3))\n- Fixed tests ([8bf73e3](https://github.com/ory/fosite/commit/8bf73e3bb4b12e098f63b1007d4ce9a25e0221b7))\n- Fixed tests refactor broke ([5da857b](https://github.com/ory/fosite/commit/5da857b4bcf76b3cc87aa5c9c1f8ee2c0c814992))\n- Fixed typos ([a5391de](https://github.com/ory/fosite/commit/a5391deaa543441f1e3838b0c5093692be247015)), closes [#10](https://github.com/ory/fosite/issues/10)\n- Fixed urls ([58908b8](https://github.com/ory/fosite/commit/58908b8cd323434dce944119c5a300f1196634f2))\n- Fixed wrongfully set constant ErrTemporaryUnvailableName ([71a9105](https://github.com/ory/fosite/commit/71a9105a1e4afde3eed0a3ef80239140f6674d15)), closes [#9](https://github.com/ory/fosite/issues/9)\n- Generic claims and headers ([1f2e97f](https://github.com/ory/fosite/commit/1f2e97ff847921939fe1f93f6dfdfcbb7bfb0792))\n- Glide ([#43](https://github.com/ory/fosite/issues/43)) ([de85e2a](https://github.com/ory/fosite/commit/de85e2a7ebce57a804ae0beef42b1f1b9017914c))\n- Godep save ([c457104](https://github.com/ory/fosite/commit/c45710465f990e74e8cddf5190f2e309da592297))\n- Goimports ([8b9816c](https://github.com/ory/fosite/commit/8b9816cb1ecbc7befef924b6a923bd52530141f3))\n- Goimports ([96be194](https://github.com/ory/fosite/commit/96be194cae6562fe35696c6ee6c7c547ce20388d))\n- Implemented all core grant types ([ce0a849](https://github.com/ory/fosite/commit/ce0a8496942259d6fe518104bab0dfd3dfea9856))\n- Implemented and documented examples ([8c625c9](https://github.com/ory/fosite/commit/8c625c9cd1e9854eddecafc36e4502577c113ef0))\n- Implemented new token generator based on hmac-sha256 ([01f9ede](https://github.com/ory/fosite/commit/01f9ede7e69588caf12940979a1fc0586d5aac3c)), closes [#11](https://github.com/ory/fosite/issues/11)\n- Implemented validator for access tokens ([4140422](https://github.com/ory/fosite/commit/414042259d6f7b1aefe4244bc3f8eb80a83a2d2c))\n- Implicit handlers do not require tls over https ([#61](https://github.com/ory/fosite/issues/61)) ([6c40c08](https://github.com/ory/fosite/commit/6c40c086a1f082d466bac21721571558c32de97c)), closes [#60](https://github.com/ory/fosite/issues/60)\n- Improve handling of expiry and include a protected api example ([dfb047d](https://github.com/ory/fosite/commit/dfb047d52b75b5d8a28bcd8d70a3e139da289da1))\n- Improve strategy API ([21f5e8c](https://github.com/ory/fosite/commit/21f5e8ce68097959ef97b1b8dca268f2a9a5d276))\n- Increased coverage ([83194b6](https://github.com/ory/fosite/commit/83194b6b2849292da041385e2274d42a06b36120))\n- Issue refresh token only when 'offline' scope is set ([34068b9](https://github.com/ory/fosite/commit/34068b951d8deea523c40f792608b75d2b4c656f)), closes [#47](https://github.com/ory/fosite/issues/47)\n- Jwt signing and client changes ([#44](https://github.com/ory/fosite/issues/44)) ([fae3c96](https://github.com/ory/fosite/commit/fae3c96e89cd364f21bee00f8d5384cd053ab9c1))\n- Made hybrid flow optional ([08ddbae](https://github.com/ory/fosite/commit/08ddbae46bca5ef18e4a8c7560a46d6238d6a3e9))\n- Major refactor, use enigma, finalized authorize skeleton ([38bacd3](https://github.com/ory/fosite/commit/38bacd340eed991d69dc95f8a7bf6c0f328d8f47)), closes [#8](https://github.com/ory/fosite/issues/8) [#11](https://github.com/ory/fosite/issues/11)\n- More test cases ([1188750](https://github.com/ory/fosite/commit/1188750e06c6ba30ebc783a8297aab75a0f95247))\n- More tests ([164506a](https://github.com/ory/fosite/commit/164506a23a3105a37b60b1154052589d1be6c7b1))\n- Moved to root package, updated docs ([1871702](https://github.com/ory/fosite/commit/18717023c4d6b5c02691f94fe80714f2e5e9862d))\n- Moved to root package, updated docs ([5b9b20c](https://github.com/ory/fosite/commit/5b9b20cd6b91a5cf72d054dc9afa2afc9d6dfd15))\n- No \"session\" secret required ([d1f45ad](https://github.com/ory/fosite/commit/d1f45ad9dcbb0b2866f7c8fa0fe99bc77fb93506))\n- Preview ([ba84987](https://github.com/ory/fosite/commit/ba849870e24070ea44fec9cbcf99cc04a281ffef))\n- Refactor ([eb9153c](https://github.com/ory/fosite/commit/eb9153c389b1c7ca14af78b091705d84e5bba68c))\n- Refactor, fixed tests, incorporated feedback ([9e59df2](https://github.com/ory/fosite/commit/9e59df23353964644bfcc0d148745f8dca691b39))\n- Refactoring, more tests ([df79a81](https://github.com/ory/fosite/commit/df79a81577ec8a9b7517af794ea6f04da71abf91))\n- Refactoring, renaming, docs ([e5476d1](https://github.com/ory/fosite/commit/e5476d15413c7bf96b5a1c282f9d079f538dcc83))\n- Refactoring, renaming, more tests ([9467ca8](https://github.com/ory/fosite/commit/9467ca8ac7b7b7785c96f049a422ed1d16e639b4))\n- Remove duplicate field ([e134351](https://github.com/ory/fosite/commit/e13435109928d11ae9eeb13f1e347043e8be0d53))\n- Remove store mock ([80c14f7](https://github.com/ory/fosite/commit/80c14f786b4a1ed4f1379a5fd6deaf036ece4b47))\n- Rename fields name to client_name and secret to client_secret ([99ce066](https://github.com/ory/fosite/commit/99ce0662f10c82ce034c9c21c8041aa29c460883))\n- Renaming and refactoring ([d3697bd](https://github.com/ory/fosite/commit/d3697bd15cc05bbc8bf3a6833911c3cc5dd1b2f8))\n- Replace internal import ([#52](https://github.com/ory/fosite/issues/52)) ([1290282](https://github.com/ory/fosite/commit/1290282d421ee999ff8e5c2d5d6d0f762dba599c))\n- Replace pkg.ErrNotFound with fosite.ErrNotFound ([4390c49](https://github.com/ory/fosite/commit/4390c495a1794fc7cf26cbeb47969f92d19f0ecc))\n- Request should return unique scopes ([af66918](https://github.com/ory/fosite/commit/af66918f0c91a451659fa2bf01d2c804e14799eb))\n- Resolve an issue where query params could be used instead of post body ([7eb85c6](https://github.com/ory/fosite/commit/7eb85c6e4ae2bb4a67c2e6f6166824351cc17f1d))\n- Resolve danger of not reading enough bytes ([c68a3e9](https://github.com/ory/fosite/commit/c68a3e9bea4bb5a6550e55b2ce2beb59eb48782a))\n- Resolve id token issues with empty claims ([89c60c9](https://github.com/ory/fosite/commit/89c60c9f2898345fd3d75044c8e41eacbf0d4fd5))\n- Resolve scope issues ([#55](https://github.com/ory/fosite/issues/55)) ([9d54b98](https://github.com/ory/fosite/commit/9d54b989c8d04c4d586e7810cce2e6d4f03d7c48)):\n\n  handler: resolve scope issues\n\n- Sanitized tests and apis ([12c70bb](https://github.com/ory/fosite/commit/12c70bb4f167afe8d39e85d3ef0e0f13b5761070))\n- Tests for client credentials flow ([c13298c](https://github.com/ory/fosite/commit/c13298cbf165c873f9463a6bbad91b962762f3b0))\n- Tests for resource owner password credentials grant ([f503615](https://github.com/ory/fosite/commit/f5036150f90d7d73e85088400cda9f7de2722a20))\n- Update ([88e84de](https://github.com/ory/fosite/commit/88e84de2676281bb5a7a1e6b5051faa1feb14c2e))\n- Update installation instructions ([201c6aa](https://github.com/ory/fosite/commit/201c6aa6c15d35da14022f7ec43d0e9b87b2bc68)), closes [#33](https://github.com/ory/fosite/issues/33)\n- Updated example and added implicit grant ([d12fa5c](https://github.com/ory/fosite/commit/d12fa5ca89cfebb351e023d53b0c57420725195b))\n- Use jwt-go.v2 and fix bc break ([f731d88](https://github.com/ory/fosite/commit/f731d8892ca50501fdc054023f0b7b77d9ecb6ef))\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 6.064453125,
          "content": "<!-- AUTO-GENERATED, DO NOT EDIT! -->\n<!-- Please edit the original at https://github.com/ory/meta/blob/master/templates/repository/common/CODE_OF_CONDUCT.md -->\n\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Open Source Community Support\n\nOry Open source software is collaborative and based on contributions by\ndevelopers in the Ory community. There is no obligation from Ory to help with\nindividual problems. If Ory open source software is used in production in a\nfor-profit company or enterprise environment, we mandate a paid support contract\nwhere Ory is obligated under their service level agreements (SLAs) to offer a\ndefined level of availability and responsibility. For more information about\npaid support please contact us at sales@ory.sh.\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[office@ory.sh](mailto:office@ory.sh). All complaints will be reviewed and\ninvestigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder][mozilla coc].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][faq]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[mozilla coc]: https://github.com/mozilla/diversity\n[faq]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 12.1708984375,
          "content": "<!-- AUTO-GENERATED, DO NOT EDIT! -->\n<!-- Please edit the original at https://github.com/ory/meta/blob/master/templates/repository/common/CONTRIBUTING.md -->\n\n# Contribute to Ory Fosite<!-- omit in toc -->\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Introduction](#introduction)\n- [FAQ](#faq)\n- [How can I contribute?](#how-can-i-contribute)\n- [Communication](#communication)\n- [Contribute examples](#contribute-examples)\n- [Contribute code](#contribute-code)\n- [Contribute documentation](#contribute-documentation)\n- [Disclosing vulnerabilities](#disclosing-vulnerabilities)\n- [Code style](#code-style)\n  - [Working with forks](#working-with-forks)\n- [Conduct](#conduct)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Introduction\n\n_Please note_: We take Ory Fosite's security and our users' trust very\nseriously. If you believe you have found a security issue in Ory Fosite,\nplease disclose it by contacting us at security@ory.sh.\n\nThere are many ways in which you can contribute. The goal of this document is to\nprovide a high-level overview of how you can get involved in Ory.\n\nAs a potential contributor, your changes and ideas are welcome at any hour of\nthe day or night, on weekdays, weekends, and holidays. Please do not ever\nhesitate to ask a question or send a pull request.\n\nIf you are unsure, just ask or submit the issue or pull request anyways. You\nwon't be yelled at for giving it your best effort. The worst that can happen is\nthat you'll be politely asked to change something. We appreciate any sort of\ncontributions and don't want a wall of rules to get in the way of that.\n\nThat said, if you want to ensure that a pull request is likely to be merged,\ntalk to us! You can find out our thoughts and ensure that your contribution\nwon't clash with Ory\nFosite's direction. A great way to\ndo this is via\n[Ory Fosite Discussions](https://github.com/orgs/ory/discussions)\nor the [Ory Chat](https://www.ory.sh/chat).\n\n## FAQ\n\n- I am new to the community. Where can I find the\n  [Ory Community Code of Conduct?](https://github.com/ory/fosite/blob/master/CODE_OF_CONDUCT.md)\n\n- I have a question. Where can I get\n  [answers to questions regarding Ory Fosite?](#communication)\n\n- I would like to contribute but I am not sure how. Are there\n  [easy ways to contribute?](#how-can-i-contribute)\n  [Or good first issues?](https://github.com/search?l=&o=desc&q=label%3A%22help+wanted%22+label%3A%22good+first+issue%22+is%3Aopen+user%3Aory+user%3Aory-corp&s=updated&type=Issues)\n\n- I want to talk to other Ory Fosite users.\n  [How can I become a part of the community?](#communication)\n\n- I would like to know what I am agreeing to when I contribute to Ory\n  Fosite.\n  Does Ory have\n  [a Contributors License Agreement?](https://cla-assistant.io/ory/fosite)\n\n- I would like updates about new versions of Ory Fosite.\n  [How are new releases announced?](https://www.ory.sh/l/sign-up-newsletter)\n\n## How can I contribute?\n\nIf you want to start to contribute code right away, take a look at the\n[list of good first issues](https://github.com/ory/fosite/labels/good%20first%20issue).\n\nThere are many other ways you can contribute. Here are a few things you can do\nto help out:\n\n- **Give us a star.** It may not seem like much, but it really makes a\n  difference. This is something that everyone can do to help out Ory Fosite.\n  Github stars help the project gain visibility and stand out.\n\n- **Join the community.** Sometimes helping people can be as easy as listening\n  to their problems and offering a different perspective. Join our Slack, have a\n  look at discussions in the forum and take part in community events. More info\n  on this in [Communication](#communication).\n\n- **Answer discussions.** At all times, there are several unanswered discussions\n  on GitHub. You can see an\n  [overview here](https://github.com/discussions?discussions_q=is%3Aunanswered+org%3Aory+sort%3Aupdated-desc).\n  If you think you know an answer or can provide some information that might\n  help, please share it! Bonus: You get GitHub achievements for answered\n  discussions.\n\n- **Help with open issues.** We have a lot of open issues for Ory Fosite and\n  some of them may lack necessary information, some are duplicates of older\n  issues. You can help out by guiding people through the process of filling out\n  the issue template, asking for clarifying information or pointing them to\n  existing issues that match their description of the problem.\n\n- **Review documentation changes.** Most documentation just needs a review for\n  proper spelling and grammar. If you think a document can be improved in any\n  way, feel free to hit the `edit` button at the top of the page. More info on\n  contributing to the documentation [here](#contribute-documentation).\n\n- **Help with tests.** Pull requests may lack proper tests or test plans. These\n  are needed for the change to be implemented safely.\n\n## Communication\n\nWe use [Slack](https://www.ory.sh/chat). You are welcome to drop in and ask\nquestions, discuss bugs and feature requests, talk to other users of Ory, etc.\n\nCheck out [Ory Fosite Discussions](https://github.com/orgs/ory/discussions). This is a great place for\nin-depth discussions and lots of code examples, logs and similar data.\n\nYou can also join our community calls if you want to speak to the Ory team\ndirectly or ask some questions. You can find more info and participate in\n[Slack](https://www.ory.sh/chat) in the #community-call channel.\n\nIf you want to receive regular notifications about updates to Ory Fosite,\nconsider joining the mailing list. We will _only_ send you vital information on\nthe projects that you are interested in.\n\nAlso, [follow us on Twitter](https://twitter.com/orycorp).\n\n## Contribute examples\n\nOne of the most impactful ways to contribute is by adding examples. You can find\nan overview of examples using Ory services on the\n[documentation examples page](https://www.ory.sh/docs/examples). Source code for\nexamples can be found in most cases in the\n[ory/examples](https://github.com/ory/examples) repository.\n\n_If you would like to contribute a new example, we would love to hear from you!_\n\nPlease [open an issue](https://github.com/ory/examples/issues/new/choose) to\ndescribe your example before you start working on it. We would love to provide\nguidance to make for a pleasant contribution experience. Go through this\nchecklist to contribute an example:\n\n1. Create a GitHub issue proposing a new example and make sure it's different\n   from an existing one.\n1. Fork the repo and create a feature branch off of `master` so that changes do\n   not get mixed up.\n1. Add a descriptive prefix to commits. This ensures a uniform commit history\n   and helps structure the changelog. Please refer to this\n   [Convential Commits configuration](https://github.com/ory/fosite/blob/master/.github/workflows/conventional_commits.yml)\n   for the list of accepted prefixes. You can read more about the Conventional\n   Commit specification\n   [at their site](https://www.conventionalcommits.org/en/v1.0.0/).\n1. Create a `README.md` that explains how to use the example. (Use\n   [the README template](https://github.com/ory/examples/blob/master/_common/README.md)).\n1. Open a pull request and maintainers will review and merge your example.\n\n## Contribute code\n\nUnless you are fixing a known bug, we **strongly** recommend discussing it with\nthe core team via a GitHub issue or [in our chat](https://www.ory.sh/chat)\nbefore getting started to ensure your work is consistent with Ory Fosite's\nroadmap and architecture.\n\nAll contributions are made via pull requests. To make a pull request, you will\nneed a GitHub account; if you are unclear on this process, see GitHub's\ndocumentation on [forking](https://help.github.com/articles/fork-a-repo) and\n[pull requests](https://help.github.com/articles/using-pull-requests). Pull\nrequests should be targeted at the `master` branch. Before creating a pull\nrequest, go through this checklist:\n\n1. Create a feature branch off of `master` so that changes do not get mixed up.\n1. [Rebase](http://git-scm.com/book/en/Git-Branching-Rebasing) your local\n   changes against the `master` branch.\n1. Run the full project test suite with the `go test -tags sqlite ./...` (or\n   equivalent) command and confirm that it passes.\n1. Run `make format`\n1. Add a descriptive prefix to commits. This ensures a uniform commit history\n   and helps structure the changelog. Please refer to this\n   [Convential Commits configuration](https://github.com/ory/fosite/blob/master/.github/workflows/conventional_commits.yml)\n   for the list of accepted prefixes. You can read more about the Conventional\n   Commit specification\n   [at their site](https://www.conventionalcommits.org/en/v1.0.0/).\n\nIf a pull request is not ready to be reviewed yet\n[it should be marked as a \"Draft\"](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request).\n\nBefore your contributions can be reviewed you need to sign our\n[Contributor License Agreement](https://cla-assistant.io/ory/fosite).\n\nThis agreement defines the terms under which your code is contributed to Ory.\nMore specifically it declares that you have the right to, and actually do, grant\nus the rights to use your contribution. You can see the Apache 2.0 license under\nwhich our projects are published\n[here](https://github.com/ory/meta/blob/master/LICENSE).\n\nWhen pull requests fail the automated testing stages (for example unit or E2E\ntests), authors are expected to update their pull requests to address the\nfailures until the tests pass.\n\nPull requests eligible for review\n\n1. follow the repository's code formatting conventions;\n2. include tests that prove that the change works as intended and does not add\n   regressions;\n3. document the changes in the code and/or the project's documentation;\n4. pass the CI pipeline;\n5. have signed our\n   [Contributor License Agreement](https://cla-assistant.io/ory/fosite);\n6. include a proper git commit message following the\n   [Conventional Commit Specification](https://www.conventionalcommits.org/en/v1.0.0/).\n\nIf all of these items are checked, the pull request is ready to be reviewed and\nyou should change the status to \"Ready for review\" and\n[request review from a maintainer](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review).\n\nReviewers will approve the pull request once they are satisfied with the patch.\n\n## Contribute documentation\n\nPlease provide documentation when changing, removing, or adding features. All\nOry Documentation resides in the\n[Ory documentation repository](https://github.com/ory/docs/). For further\ninstructions please head over to the Ory Documentation\n[README.md](https://github.com/ory/docs/blob/master/README.md).\n\n## Disclosing vulnerabilities\n\nPlease disclose vulnerabilities exclusively to\n[security@ory.sh](mailto:security@ory.sh). Do not use GitHub issues.\n\n## Code style\n\nPlease run `make format` to format all source code following the Ory standard.\n\n### Working with forks\n\n```bash\n# First you clone the original repository\ngit clone git@github.com:ory/ory/fosite.git\n\n# Next you add a git remote that is your fork:\ngit remote add fork git@github.com:<YOUR-GITHUB-USERNAME-HERE>/ory/fosite.git\n\n# Next you fetch the latest changes from origin for master:\ngit fetch origin\ngit checkout master\ngit pull --rebase\n\n# Next you create a new feature branch off of master:\ngit checkout my-feature-branch\n\n# Now you do your work and commit your changes:\ngit add -A\ngit commit -a -m \"fix: this is the subject line\" -m \"This is the body line. Closes #123\"\n\n# And the last step is pushing this to your fork\ngit push -u fork my-feature-branch\n```\n\nNow go to the project's GitHub Pull Request page and click \"New pull request\"\n\n## Conduct\n\nWhether you are a regular contributor or a newcomer, we care about making this\ncommunity a safe place for you and we've got your back.\n\n[Ory Community Code of Conduct](https://github.com/ory/fosite/blob/master/CODE_OF_CONDUCT.md)\n\nWe welcome discussion about creating a welcoming, safe, and productive\nenvironment for the community. If you have any questions, feedback, or concerns\n[please let us know](https://www.ory.sh/chat).\n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 28.5478515625,
          "content": "**THIS DOCUMENT HAS MOVED**\n\nThis file is no longer being updated and kept for historical reasons. Please\ncheck the [CHANGELOG](CHANGELOG.md) instead!\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [0.28.0](#0280)\n- [0.27.0](#0270)\n  - [Conceptual Changes](#conceptual-changes)\n  - [API Changes](#api-changes)\n- [0.26.0](#0260)\n- [0.24.0](#0240)\n  - [Breaking change(s)](#breaking-changes)\n    - [`fosite/handler/oauth2.JWTStrategy`](#fositehandleroauth2jwtstrategy)\n    - [`OpenIDConnectRequestValidator.ValidatePrompt`](#openidconnectrequestvalidatorvalidateprompt)\n- [0.23.0](#0230)\n  - [Breaking change(s)](#breaking-changes-1)\n    - [`Hasher`](#hasher)\n- [0.22.0](#0220)\n  - [Breaking change(s)](#breaking-changes-2)\n    - [`JWTStrategy`](#jwtstrategy)\n- [0.21.0](#0210)\n  - [Changes to parsing of OAuth 2.0 Client `response_types`](#changes-to-parsing-of-oauth-20-client-response_types)\n  - [`openid.DefaultStrategy` field name changed](#openiddefaultstrategy-field-name-changed)\n  - [`oauth2.RS256JWTStrategy` was renamed and field name changed](#oauth2rs256jwtstrategy-was-renamed-and-field-name-changed)\n  - [Adds `private_key_jwt` client authentication method](#adds-private_key_jwt-client-authentication-method)\n  - [Response Type `id_token` no longer required for authorize_code flow](#response-type-id_token-no-longer-required-for-authorize_code-flow)\n- [0.20.0](#0200)\n- [Breaking Changes](#breaking-changes)\n  - [JWT Claims](#jwt-claims)\n  - [`AuthorizeCodeStorage`](#authorizecodestorage)\n- [0.19.0](#0190)\n- [0.18.0](#0180)\n- [0.17.0](#0170)\n- [0.16.0](#0160)\n- [0.15.0](#0150)\n- [0.14.0](#0140)\n- [0.13.0](#0130)\n  - [Breaking changes](#breaking-changes)\n- [0.12.0](#0120)\n  - [Breaking changes](#breaking-changes-1)\n    - [Improved cryptographic methods](#improved-cryptographic-methods)\n- [0.11.0](#0110)\n  - [Non-breaking changes](#non-breaking-changes)\n    - [Storage adapter](#storage-adapter)\n    - [Reducing use of gomock](#reducing-use-of-gomock)\n  - [Breaking Changes](#breaking-changes-1)\n    - [`fosite/handler/oauth2.AuthorizeCodeGrantStorage` was removed](#fositehandleroauth2authorizecodegrantstorage-was-removed)\n    - [`fosite/handler/oauth2.RefreshTokenGrantStorage` was removed](#fositehandleroauth2refreshtokengrantstorage-was-removed)\n    - [`fosite/handler/oauth2.AuthorizeCodeGrantStorage` was removed](#fositehandleroauth2authorizecodegrantstorage-was-removed-1)\n    - [WildcardScopeStrategy](#wildcardscopestrategy)\n    - [Refresh tokens and authorize codes are no longer JWTs](#refresh-tokens-and-authorize-codes-are-no-longer-jwts)\n    - [Delete access tokens when persisting refresh session](#delete-access-tokens-when-persisting-refresh-session)\n- [0.10.0](#0100)\n- [0.9.0](#090)\n- [0.8.0](#080)\n  - [Breaking changes](#breaking-changes-2)\n    - [`ClientManager`](#clientmanager)\n    - [`OAuth2Provider`](#oauth2provider)\n- [0.7.0](#070)\n- [0.6.0](#060)\n- [0.5.0](#050)\n- [0.4.0](#040)\n- [0.3.0](#030)\n- [0.2.0](#020)\n- [0.1.0](#010)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## 0.28.0\n\nThis version (re-)introduces refresh token lifespans. Per default, this feature\nis enabled and set to 30 days. If a refresh token has not been used within 30\ndays, it will expire.\n\nTo disable refresh token lifespans (previous behaviour), set\n`compose.Config.RefreshTokenLifespan = -1`.\n\n## 0.27.0\n\nThis PR adds the ability to specify a target audience for OAuth 2.0 Access\nTokens.\n\n### Conceptual Changes\n\nFrom now on, `scope` and `audience` will be checked against the client's\nwhitelisted scope and audience on every refresh token exchange. This prevents\nclients, which no longer are allowed to request a certain audience or scope, to\nkeep using those values with existing refresh tokens.\n\n### API Changes\n\n```go\ntype fosite.Client interface {\n+\t// GetAudience returns the allowed audience(s) for this client.\n+\tGetAudience() Arguments\n}\n```\n\n```go\ntype fosite.Request struct {\n-   Scopes         Argument\n+   RequestedScope Argument\n\n-   GrantedScopes  Argument\n+   GrantedScope   Argument\n}\n```\n\n```go\ntype fosite.Requester interface {\n+\t// GetRequestedAudience returns the requested audiences for this request.\n+\tGetRequestedAudience() (audience Arguments)\n\n+\t// SetRequestedAudience sets the requested audienc.\n+\tSetRequestedAudience(audience Arguments)\n\n+\t// GetGrantedAudience returns all granted scopes.\n+\tGetGrantedAudience() (grantedAudience Arguments)\n\n+\t// GrantAudience marks a request's audience as granted.\n+\tGrantAudience(audience string)\n}\n```\n\n```go\ntype fosite/token/jwt.JWTClaimsContainer interface {\n-\t// With returns a copy of itself with expiresAt and scope set to the given values.\n-\tWith(expiry time.Time, scope, audience []string) JWTClaimsContainer\n\n+\t// With returns a copy of itself with expiresAt, scope, audience set to the given values.\n+\tWith(expiry time.Time, scope, audience []string) JWTClaimsContainer\n}\n```\n\n## 0.26.0\n\nThis release makes it easier to define custom JWT Containers for access tokens\nwhen using the JWT strategy. To do that, the following signatures have changed:\n\n```go\n// github.com/ory/fosite/handler/oauth2\ntype JWTSessionContainer interface {\n\t// GetJWTClaims returns the claims.\n-\tGetJWTClaims() *jwt.JWTClaims\n+\tGetJWTClaims() jwt.JWTClaimsContainer\n\n\t// GetJWTHeader returns the header.\n\tGetJWTHeader() *jwt.Headers\n\n\tfosite.Session\n}\n```\n\n```go\n+ type JWTClaimsContainer interface {\n+\t// With returns a copy of itself with expiresAt and scope set to the given values.\n+\tWith(expiry time.Time, scope []string) JWTClaimsContainer\n+\n+\t// WithDefaults returns a copy of itself with issuedAt and issuer set to the given default values. If those\n+\t// values are already set in the claims, they will not be updated.\n+\tWithDefaults(iat time.Time, issuer string) JWTClaimsContainer\n+\n+\t// ToMapClaims returns the claims as a github.com/dgrijalva/jwt-go.MapClaims type.\n+\tToMapClaims() jwt.MapClaims\n+ }\n```\n\nAll default session implementations have been updated to reflect this change. If\nyou define custom session, this patch will affect you.\n\n## 0.24.0\n\nThis release addresses areas where the go context was missing or not propagated\ndown the call path properly.\n\n### Breaking change(s)\n\n#### `fosite/handler/oauth2.JWTStrategy`\n\nThe\n[`fosite/handler/oauth2.JWTStrategy`](https://github.com/ory/fosite/blob/master/handler/oauth2/strategy.go)\ninterface changed as a context parameter was added to its method signature:\n\n```go\ntype JWTStrategy interface {\n-\tValidate(tokenType fosite.TokenType, token string) (requester fosite.Requester, err error)\n+\tValidate(ctx context.Context, tokenType fosite.TokenType, token string) (requester fosite.Requester, err error)\n}\n```\n\n#### `OpenIDConnectRequestValidator.ValidatePrompt`\n\nThe\n[`OpenIDConnectRequestValidator.ValidatePrompt`](https://github.com/ory/fosite/blob/master/handler/openid/validator.go)\nmethod signature was updated to take a go context as its first parameter:\n\n```go\n-\tfunc (v *OpenIDConnectRequestValidator) ValidatePrompt(req fosite.AuthorizeRequester) error {\n+\tfunc (v *OpenIDConnectRequestValidator) ValidatePrompt(ctx context.Context, req fosite.AuthorizeRequester) error {\n```\n\n## 0.23.0\n\nThis releases addresses inconsistencies in some of the public interfaces by\npassing in the go context to their signatures.\n\n### Breaking change(s)\n\n#### `Hasher`\n\nThe [`Hasher`](https://github.com/ory/fosite/blob/master/hash.go) interface\nchanged as a context parameter was added to its method signatures:\n\n```go\ntype Hasher interface {\n-\tCompare(hash, data []byte) error\n+\tCompare(ctx context.Context, hash, data []byte) error\n-\tHash(data []byte) ([]byte, error)\n+\tHash(ctx context.Context, data []byte) ([]byte, error)\n}\n```\n\n## 0.22.0\n\nThis releases addresses inconsistencies in some of the public interfaces by\npassing in the go context to their signatures.\n\n### Breaking change(s)\n\n#### `JWTStrategy`\n\nThe [`JWTStrategy`](https://github.com/ory/fosite/blob/master/token/jwt/jwt.go)\ninterface changed as a context parameter was added to its method signatures:\n\n```go\ntype JWTStrategy interface {\n-\tGenerate(claims jwt.Claims, header Mapper) (string, string, error)\n+\tGenerate(ctx context.Context, claims jwt.Claims, header Mapper) (string, string, error)\n-\tValidate(token string) (string, error)\n+\tValidate(ctx context.Context, token string) (string, error)\n-\tGetSignature(token string) (string, error)\n+\tGetSignature(ctx context.Context, token string) (string, error)\n-\tHash(in []byte) ([]byte, error)\n+\tHash(ctx context.Context, in []byte) ([]byte, error)\n-\tDecode(token string) (*jwt.Token, error)\n+\tDecode(ctx context.Context, token string) (*jwt.Token, error)\n\tGetSigningMethodLength() int\n}\n```\n\n## 0.21.0\n\nThis release improves compatibility with the OpenID Connect Dynamic Client\nRegistration 1.0 specification.\n\n### Changes to parsing of OAuth 2.0 Client `response_types`\n\nPreviously, when response types such as `code token id_token` were requested\n(OpenID Connect Hybrid Flow) it was enough for the client to have\n`response_types=[\"code\", \"token\", \"id_token\"]`. This is however incompatible\nwith the OpenID Connect Dynamic Client Registration 1.0 spec which dictates that\nthe `response_types` have to match exactly.\n\nAssuming you are requesting `&response_types=code+token+id_token`, your client\nshould have `response_types=[\"code token id_token\"]`, if other response types\nare required (e.g. `&response_types=code`, `&response_types=token`) they too\nmust be included: `response_types=[\"code\", \"token\", \"code token id_token\"]`.\n\n### `openid.DefaultStrategy` field name changed\n\nField `RS256JWTStrategy` was renamed to `JWTStrategy` and now relies on an\ninterface instead of a concrete struct.\n\n### `oauth2.RS256JWTStrategy` was renamed and field name changed\n\nThe strategy `oauth2.RS256JWTStrategy` was renamed to\n`oauth2.DefaultJWTStrategy` and now accepts an interface that implements\n`jwt.JWTStrategy` instead of directly relying on `jwt.RS256JWTStrategy`. For\nthis reason, the field `RS256JWTStrategy` was renamed to `JWTStrategy`\n\n### Adds `private_key_jwt` client authentication method\n\nThis patch adds the ability to perform the\n[`private_key_jwt` client authentication method](http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication)\ndefined in the OpenID Connect specification. Please note that method\n`client_secret_jwt` is not supported because of the BCrypt hashing strategy.\n\nFor this strategy to work, you must set the `TokenURL` field of the\n`compose.Config` object to the authorization server's Token URL.\n\nIf you would like to support this authentication method, your `Client`\nimplementation must also implement `fosite.DefaultOpenIDConnectClient` and then,\nfor example, `GetTokenEndpointAuthMethod()` should return `private_key_jwt`.\n\n### Response Type `id_token` no longer required for authorize_code flow\n\nThe `authorize_code`\n[does not require](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\nthe `id_token` response type to be available when performing the OpenID Connect\nflow:\n\n> grant_types OPTIONAL. JSON array containing a list of the OAuth 2.0 Grant\n> Types that the Client is declaring that it will restrict itself to using. The\n> Grant Type values used by OpenID Connect are:\n>\n>          authorization_code: The Authorization Code Grant Type described in OAuth 2.0 Section 4.1.\n>          implicit: The Implicit Grant Type described in OAuth 2.0 Section 4.2.\n>          refresh_token: The Refresh Token Grant Type described in OAuth 2.0 Section 6.\n>\n>      The following table lists the correspondence between response_type values that the Client will use and grant_type values that MUST be included in the registered grant_types list:\n>\n>          code: authorization_code\n>          id_token: implicit\n>          token id_token: implicit\n>          code id_token: authorization_code, implicit\n>          code token: authorization_code, implicit\n>          code token id_token: authorization_code, implicit\n>\n>      If omitted, the default is that the Client will use only the authorization_code Grant Type.\n\nBefore this patch, the `id_token` response type was required whenever an ID\nToken was requested. This patch changes that.\n\n## 0.20.0\n\nThis release implements an OAuth 2.0 Best Practice with regards to revoking\nalready issued access and refresh tokens if an authorization code is used more\nthan one time.\n\n## Breaking Changes\n\n### JWT Claims\n\n- `github.com/ory/fosite/token/jwt.JWTClaims.Audience` is no longer a `string`,\n  but a string slice `[]string`.\n- `github.com/ory/fosite/handler/openid.IDTokenClaims` is no longer a `string`,\n  but a string slice `[]string`.\n\n### `AuthorizeCodeStorage`\n\nThis improves security as, in the event of an authorization code being leaked,\nall associated tokens are revoked. To implement this feature, a breaking change\nhad to be introduced. The\n`github.com/ory/fosite/handler/oauth2.AuthorizeCodeStorage` interface changed as\nfollows:\n\n- `DeleteAuthorizeCodeSession(ctx context.Context, code string) (err error)` has\n  been removed from the interface and is no longer used by this library.\n- `InvalidateAuthorizeCodeSession(ctx context.Context, code string) (err error)`\n  has been introduced.\n- The error `github.com/ory/fosite/handler/oauth2.ErrInvalidatedAuthorizeCode`\n  has been added.\n\nThe following documentation sheds light on how you should update your storage\nadapter:\n\n```\n// ErrInvalidatedAuthorizeCode is an error indicating that an authorization code has been\n// used previously.\nvar ErrInvalidatedAuthorizeCode = errors.New(\"Authorization code has ben invalidated\")\n\n// AuthorizeCodeStorage handles storage requests related to authorization codes.\ntype AuthorizeCodeStorage interface {\n\t// GetAuthorizeCodeSession stores the authorization request for a given authorization code.\n\tCreateAuthorizeCodeSession(ctx context.Context, code string, request fosite.Requester) (err error)\n\n\t// GetAuthorizeCodeSession hydrates the session based on the given code and returns the authorization request.\n\t// If the authorization code has been invalidated with `InvalidateAuthorizeCodeSession`, this\n\t// method should return the ErrInvalidatedAuthorizeCode error.\n\t//\n\t// Make sure to also return the fosite.Requester value when returning the ErrInvalidatedAuthorizeCode error!\n\tGetAuthorizeCodeSession(ctx context.Context, code string, session fosite.Session) (request fosite.Requester, err error)\n\n\t// InvalidateAuthorizeCodeSession is called when an authorize code is being used. The state of the authorization\n\t// code should be set to invalid and consecutive requests to GetAuthorizeCodeSession should return the\n\t// ErrInvalidatedAuthorizeCode error.\n\tInvalidateAuthorizeCodeSession(ctx context.Context, code string) (err error)\n}\n```\n\n## 0.19.0\n\nThis release improves the OpenID Connect vaildation strategy which now properly\nhandles `prompt`, `max_age`, and `id_token_hint` at the `/oauth2/auth` endpoint\ninstead of the `/oauth2/token` endpoint.\n\nTo achieve this, the `OpenIDConnectRequestValidator` has been modified and now\nrequires a `jwt.JWTStrategy` (implemented by, for example\n`jwt.RS256JWTStrategy`).\n\nThe compose package has been updated accordingly. You should not expect any\nmajor breaking changes from this release.\n\n## 0.18.0\n\nThis release allows the introspection handler to return the token type (e.g.\n`access_token`, `refresh_token`) of the introspected token. To achieve that,\nsome breaking API changes have been introduced:\n\n- `OAuth2.IntrospectToken(ctx context.Context, token string, tokenType TokenType, session Session, scope ...string) (AccessRequester, error)`\n  is now\n  `OAuth2.IntrospectToken(ctx context.Context, token string, tokenType TokenType, session Session, scope ...string) (TokenType, AccessRequester, error)`.\n- `TokenIntrospector.IntrospectToken(ctx context.Context, token string, tokenType TokenType, accessRequest AccessRequester, scopes []string) (error)`\n  is now\n  `TokenIntrospector.IntrospectToken(ctx context.Context, token string, tokenType TokenType, accessRequest AccessRequester, scopes []string) (TokenType, error)`.\n\nThis patch also resolves a misconfigured json key in the `IntrospectionResponse`\nstruct. `AccessRequester AccessRequester json:\",extra\"` is now properly declared\nas `AccessRequester AccessRequester json:\"extra\"`.\n\n## 0.17.0\n\nThis release resolves a security issue (reported by\n[platform.sh](https://www.platform.sh)) related to potential storage\nimplementations. This library used to pass all of the request body from both\nauthorize and token endpoints to the storage adapters. As some of these values\nare needed in consecutive requests, some storage adapters chose to drop the full\nbody to the database.\n\nThis implied that confidential parameters, such as the `client_secret` which can\nbe passed in the request body since version 0.15.0, were stored as key/value\npairs in plaintext in the database. While most client secrets are generated\nprogrammatically (as opposed to set by the user), it's a considerable security\nissue nonetheless.\n\nThe issue has been resolved by sanitizing the request body and only including\nthose values truly required by their respective handlers. This lead to two\nbreaking changes in the API:\n\n1. The `fosite.Requester` interface has a new method\n   `Sanitize(allowedParameters []string) Requester` which returns a sanitized\n   clone of the method receiver. If you do not use your own `fosite.Requester`\n   implementation, this won't affect you.\n2. If you use the PKCE handler, you will have to add three new methods to your\n   storage implementation. The methods to be added work exactly like, for\n   example `CreateAuthorizeCodeSession`. A reference implementation can be found\n   in [./storage/memory.go](./storage/memory.go). The method signatures are as\n   follows:\n\n```go\ntype PKCERequestStorage interface {\n\tGetPKCERequestSession(ctx context.Context, signature string, session fosite.Session) (fosite.Requester, error)\n\tCreatePKCERequestSession(ctx context.Context, signature string, requester fosite.Requester) error\n\tDeletePKCERequestSession(ctx context.Context, signature string) error\n}\n```\n\nWe encourage you to upgrade to this release and check your storage\nimplementations and potentially remove old data.\n\nWe would like to thank [platform.sh](https://www.platform.sh) for sponsoring the\ndevelopment of a patch that resolves this issue.\n\n## 0.16.0\n\nThis patch introduces `SendDebugMessagesToClients` to the Fosite struct which\nenables/disables sending debug information to clients. Debug information may\ncontain sensitive information as it forwards error messages from, for example,\nstorage implementations. For this reason, `RevealDebugPayloads` defaults to\nfalse. Keep in mind that the information may be very helpful when specific OAuth\n2.0 requests fail and we generally recommend displaying debug information.\n\nAdditionally, error keys for JSON changed which caused a new minor version,\nspeicifically\n[`statusCode` was changed to `status_code`](https://github.com/ory/fosite/pull/242/files#diff-dd25e0e0a594c3f3592c1c717039b85eR221).\n\n## 0.15.0\n\nThis release focuses on improving compatibility with OpenID Connect\nCertification and better error context.\n\n- Error handling is improved by explicitly adding debug information (e.g. \"Token\n  invalid because it was not found in the database\") to the error object.\n  Previously, the original error was prepended which caused weird formatting\n  issues.\n- Allows client credentials in POST body at the `/oauth2/token` endpoint. Please\n  note that this method is not recommended to be used, unless the client making\n  the request is unable to use HTTP Basic Authorization.\n- Allows public clients (without secret) to access the `/oauth2/token` endpoint\n  which was previously only possible by adding an arbitrary secret.\n\nThis release has no breaking changes to the external API but due to the nature\nof the changes, it is released as a new major version.\n\n## 0.14.0\n\nImproves error contexts. A breaking code changes to the public API was reverted\nwith 0.14.1.\n\n## 0.13.0\n\n### Breaking changes\n\n`glide` was replaced with `dep`.\n\n## 0.12.0\n\n### Breaking changes\n\n#### Improved cryptographic methods\n\n- The minimum required secret length used to generate signatures of access\n  tokens has increased from 16 to 32 byte.\n- The algorithm used to generate access tokens using the HMAC-SHA strategy has\n  changed from HMAC-SHA256 to HMAC-SHA512.\n\n## 0.11.0\n\n### Non-breaking changes\n\n#### Storage adapter\n\nTo simplify the storage adapter logic, and also reduce the likelihoods of bugs\nwithin the storage adapter, the interface was greatly simplified. Specifically,\nthese two methods have been removed:\n\n- `PersistRefreshTokenGrantSession(ctx context.Context, requestRefreshSignature, accessSignature, refreshSignature string, request fosite.Requester) error`\n- `PersistAuthorizeCodeGrantSession(ctx context.Context, authorizeCode, accessSignature, refreshSignature string, request fosite.Requester) error`\n\nFor this change, you don't need to do anything. You can however simply delete\nthose two methods from your store.\n\n#### Reducing use of gomock\n\nIn the long term, fosite should remove all gomocks and instead test against the\ninternal implementations. This will increase iterations per line during tests\nand reduce annoying mock updates.\n\n### Breaking Changes\n\n#### `fosite/handler/oauth2.AuthorizeCodeGrantStorage` was removed\n\n`AuthorizeCodeGrantStorage` was used specifically in the composer. Refactor\nreferences to `AuthorizeCodeGrantStorage` with `CoreStorage`.\n\n#### `fosite/handler/oauth2.RefreshTokenGrantStorage` was removed\n\n`RefreshTokenGrantStorage` was used specifically in the composer. Refactor\nreferences to `RefreshTokenGrantStorage` with `CoreStorage`.\n\n#### `fosite/handler/oauth2.AuthorizeCodeGrantStorage` was removed\n\n`AuthorizeCodeGrantStorage` was used specifically in the composer. Refactor\nreferences to `AuthorizeCodeGrantStorage` with `CoreStorage`.\n\n#### WildcardScopeStrategy\n\nA new [scope strategy](https://github.com/ory/fosite/pull/187) was introduced\ncalled `WildcardScopeStrategy`. This strategy is now the default when using the\ncomposer. To set the HierarchicScopeStrategy strategy, do:\n\n```\nimport \"github.com/ory/fosite/compose\"\n\nvar config = &compose.Config{\n    ScopeStrategy: fosite.HierarchicScopeStrategy,\n}\n```\n\n#### Refresh tokens and authorize codes are no longer JWTs\n\nUsing JWTs for refresh tokens and authorize codes did not make sense:\n\n1. Refresh tokens are long-living credentials, JWTs require an expiry date.\n2. Refresh tokens are never validated client-side, only server-side. Thus access\n   to the store is available.\n3. Authorize codes are never validated client-side, only server-side.\n\nAlso, one compose method changed due to this:\n\n```go\npackage compose\n\n// ..\n\n- func NewOAuth2JWTStrategy(key *rsa.PrivateKey) *oauth2.RS256JWTStrategy\n+ func NewOAuth2JWTStrategy(key *rsa.PrivateKey, strategy *oauth2.HMACSHAStrategy) *oauth2.RS256JWTStrategy\n```\n\n#### Delete access tokens when persisting refresh session\n\nPlease delete access tokens in your store when you persist a refresh session.\nThis increases security. Here is an example of how to do that using only\nexisting methods:\n\n```go\nfunc (s *MemoryStore) PersistRefreshTokenGrantSession(ctx context.Context, originalRefreshSignature, accessSignature, refreshSignature string, request fosite.Requester) error {\n\tif ts, err := s.GetRefreshTokenSession(ctx, originalRefreshSignature, nil); err != nil {\n\t\treturn err\n\t} else if err := s.RevokeAccessToken(ctx, ts.GetID()); err != nil {\n\t\treturn err\n\t} else if err := s.RevokeRefreshToken(ctx, ts.GetID()); err != nil {\n \t\treturn err\n \t} else if err := s.CreateAccessTokenSession(ctx, accessSignature, request); err != nil {\n \t\treturn err\n \t} else if err := s.CreateRefreshTokenSession(ctx, refreshSignature, request); err != nil {\n \t\treturn err\n \t}\n\n \treturn nil\n}\n```\n\n## 0.10.0\n\nIt is no longer possible to introspect authorize codes, and passing scopes to\nthe introspector now also checks refresh token scopes.\n\n## 0.9.0\n\nThis patch adds the ability to pass a custom hasher to `compose.Compose`, which\nis a breaking change. You can pass nil for the fosite default hasher:\n\n```\npackage compose\n\n-func Compose(config *Config, storage interface{}, strategy interface{}, factories ...Factory) fosite.OAuth2Provider {\n+func Compose(config *Config, storage interface{}, strategy interface{}, hasher fosite.Hasher, factories ...Factory) fosite.OAuth2Provider {\n```\n\n## 0.8.0\n\nThis patch addresses some inconsistencies in the public interfaces. Also\nremaining references to the old repository location at `ory-am/fosite` where\nupdated to `ory/fosite`.\n\n### Breaking changes\n\n#### `ClientManager`\n\nThe\n[`ClientManager`](https://github.com/ory/fosite/blob/master/client_manager.go)\ninterface changed, as a context parameter was added:\n\n```go\ntype ClientManager interface {\n\t// GetClient loads the client by its ID or returns an error\n  \t// if the client does not exist or another error occurred.\n-\tGetClient(id string) (Client, error)\n+\tGetClient(ctx context.Context, id string) (Client, error)\n}\n```\n\n#### `OAuth2Provider`\n\nThe [OAuth2Provider](https://github.com/ory/fosite/blob/master/oauth2.go)\ninterface changed, as the need for passing down `*http.Request` was removed.\nThis is justifiable because `NewAuthorizeRequest` and `NewAccessRequest` already\ncontain `*http.Request`.\n\nThe public api of those two methods changed:\n\n```go\n-\tNewAuthorizeResponse(ctx context.Context, req *http.Request, requester AuthorizeRequester, session Session) (AuthorizeResponder, error)\n+\tNewAuthorizeResponse(ctx context.Context, requester AuthorizeRequester, session Session) (AuthorizeResponder, error)\n\n\n-\tNewAccessResponse(ctx context.Context, req *http.Request, requester AccessRequester) (AccessResponder, error)\n+\tNewAccessResponse(ctx context.Context, requester AccessRequester) (AccessResponder, error)\n```\n\n## 0.7.0\n\nBreaking changes:\n\n- Replaced `\"golang.org/x/net/context\"` with `\"context\"`.\n- Move the repo from `github.com/ory-am/fosite` to `github.com/ory/fosite`\n\n## 0.6.0\n\nA bug related to refresh tokens was found. To mitigate it, a `Clone()` method\nhas been introduced to the `fosite.Session` interface. If you use a custom\nsession object, this will be a breaking change. Fosite's default sessions have\nbeen upgraded and no additional work should be required. If you use your own\nsession struct, we encourage using package `gob/encoding` to deep-copy it in\n`Clone()`.\n\n## 0.5.0\n\nBreaking changes:\n\n- `compose.OpenIDConnectExplicit` is now `compose.OpenIDConnectExplicitFactory`\n- `compose.OpenIDConnectImplicit` is now `compose.OpenIDConnectImplicitFactory`\n- `compose.OpenIDConnectHybrid` is now `compose.OpenIDConnectHybridFactory`\n- The token introspection handler is no longer added automatically by\n  `compose.OAuth2*`. Add `compose.OAuth2TokenIntrospectionFactory` to your\n  composer if you need token introspection.\n- Session refactor:\n  - The HMACSessionContainer was removed and replaced by `fosite.Session` /\n    `fosite.DefaultSession`. All sessions must now implement this signature. The\n    new session interface allows for better expiration time handling.\n  - The OpenID `DefaultSession` signature changed as well, it is now\n    implementing the `fosite.Session` interface\n\n## 0.4.0\n\nBreaking changes:\n\n- `./fosite-example` is now a separate repository:\n  https://github.com/ory-am/fosite-example\n- `github.com/ory-am/fosite/fosite-example/pkg.Store` is now\n  `github.com/ory-am/fosite/storage.MemoryStore`\n- `fosite.Client` has now a new method called `IsPublic()` which can be used to\n  identify public clients who do not own a client secret\n- All grant types except the client_credentials grant now allow public clients.\n  public clients are usually mobile apps and single page apps.\n- `TokenValidator` is now `TokenIntrospector`, `TokenValidationHandlers` is now\n  `TokenIntrospectionHandlers`.\n- `TokenValidator.ValidateToken` is now `TokenIntrospector.IntrospectToken`\n- `fosite.OAuth2Provider.NewIntrospectionRequest()` has been added\n- `fosite.OAuth2Provider.WriteIntrospectionError()` has been added\n- `fosite.OAuth2Provider.WriteIntrospectionResponse()` has been added\n\n## 0.3.0\n\n- Updated jwt-go from 2.7.0 to 3.0.0\n\n## 0.2.0\n\nBreaking changes:\n\n- Token validation refactored: `ValidateRequestAuthorization` is now `Validate`\n  and does not require a http request but instead a token and a token hint. A\n  token can be anything, including authorization codes, refresh tokens, id\n  tokens, ...\n- Remove mandatory scope: The mandatory scope (`fosite`) has been removed as it\n  has proven impractical.\n- Allowed OAuth2 Client scopes are now being set with `scope` instead of\n  `granted_scopes` when using the DefaultClient.\n- There is now a scope matching strategy that can be replaced.\n- OAuth2 Client scopes are now checked on every grant type.\n- Handler subpackages such as `core/client` or `oidc/explicit` have been merged\n  and moved one level up\n- `handler/oidc` is now `handler/openid`\n- `handler/core` is now `handler/oauth2`\n\n## 0.1.0\n\nInitial release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.11328125,
          "content": "Aeneas Rekkas <aeneas@ory.am> (github: arekkas)\nThomas Aidan Curran <thomasaidancurran@gmail.com> (github: tacurran)"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.037109375,
          "content": "export PATH \t\t\t\t\t:= .bin:${PATH}\n\nformat: .bin/goimports .bin/ory node_modules  # formats the source code\n\t.bin/ory dev headers copyright --type=open-source\n\t.bin/goimports -w .\n\tnpm exec -- prettier --write .\n\nhelp:\n\t@cat Makefile | grep '^[^ ]*:' | grep -v '^\\.bin/' | grep -v '.SILENT:' | grep -v '^node_modules:' | grep -v help | sed 's/:.*#/#/' | column -s \"#\" -t\n\nlicenses: .bin/licenses node_modules  # checks open-source licenses\n\t.bin/licenses\n\ntest:  # runs all tests\n\tgo test ./...\n\n.bin/goimports: Makefile\n\tGOBIN=$(shell pwd)/.bin go install golang.org/x/tools/cmd/goimports@latest\n\n.bin/licenses: Makefile\n\tcurl https://raw.githubusercontent.com/ory/ci/master/licenses/install | sh\n\n.bin/mockgen:\n\tgo build -o .bin/mockgen github.com/golang/mock/mockgen\n\n.bin/ory: Makefile\n\tcurl https://raw.githubusercontent.com/ory/meta/master/install.sh | bash -s -- -b .bin ory v0.1.48\n\ttouch .bin/ory\n\nnode_modules: package-lock.json\n\tnpm ci\n\ttouch node_modules\n\ngen: .bin/goimports .bin/mockgen  # generates mocks\n\t./generate-mocks.sh\n\n.DEFAULT_GOAL := help\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.3359375,
          "content": "<h1 align=\"center\"><img src=\"./docs/image/banner_fosite.png\" alt=\"ORY Fosite - Security-first OAuth2 framework\"></h1>\n\n[![Build Status](https://travis-ci.org/ory/fosite.svg?branch=master)](https://travis-ci.org/ory/fosite?branch=master)\n[![Coverage Status](https://coveralls.io/repos/ory/fosite/badge.svg?branch=master&service=github&foo)](https://coveralls.io/github/ory/fosite?branch=master)\n[![Go Report Card](https://goreportcard.com/badge/ory/fosite)](https://goreportcard.com/report/ory/fosite)\n\n[![Join the chat at https://www.ory.sh/chat](https://img.shields.io/badge/join-chat-00cc99.svg)](https://www.ory.sh/chat)\n\n**The security first OAuth2 & OpenID Connect framework for\n[Go](https://golang.org).** Built simple, powerful and extensible. This library\nimplements peer-reviewed [IETF RFC6749](https://tools.ietf.org/html/rfc6749),\ncounterfeits weaknesses covered in peer-reviewed\n[IETF RFC6819](https://tools.ietf.org/html/rfc6819) and countermeasures various\ndatabase attack scenarios, keeping your application safe when that hacker\npenetrates or leaks your database. OpenID Connect is implemented according to\n[OpenID Connect Core 1.0 incorporating errata set 1](https://openid.net/specs/openid-connect-core-1_0.html)\nand includes all flows: code, implicit, hybrid.\n\nThis library considered and implemented:\n\n- [The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)\n- [OAuth 2.0 Multiple Response Type Encoding Practices](https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html)\n- [OAuth 2.0 Threat Model and Security Considerations](https://tools.ietf.org/html/rfc6819)\n- [Proof Key for Code Exchange by OAuth Public Clients](https://tools.ietf.org/html/rfc7636)\n- [OAuth 2.0 for Native Apps](https://tools.ietf.org/html/rfc8252)\n- [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html)\n- [OAuth 2.0 Pushed Authorization Request](https://datatracker.ietf.org/doc/html/rfc9126)\n\nOAuth2 and OpenID Connect are difficult protocols. If you want quick wins, we\nstrongly encourage you to look at [Hydra](https://github.com/ory-am/hydra).\nHydra is a secure, high performance, cloud native OAuth2 and OpenID Connect\nservice that integrates with every authentication method imaginable and is built\non top of Fosite.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n**Table of Contents**\n\n- [Motivation](#motivation)\n- [API Stability](#api-stability)\n- [Example](#example)\n- [A word on quality](#a-word-on-quality)\n- [A word on security](#a-word-on-security)\n- [A word on extensibility](#a-word-on-extensibility)\n- [Installation](#installation)\n- [Documentation](#documentation)\n  - [Scopes](#scopes)\n    - [`fosite.WildcardScopeStrategy`](#fositewildcardscopestrategy)\n    - [`fosite.HierarchicScopeStrategy`](#fositehierarchicscopestrategy)\n  - [Quickstart](#quickstart)\n  - [Code Examples](#code-examples)\n  - [Example Storage Implementation](#example-storage-implementation)\n  - [Extensible handlers](#extensible-handlers)\n  - [JWT Introspection](#jwt-introspection)\n- [Contribute](#contribute)\n  - [Refresh mock objects](#refresh-mock-objects)\n- [Hall of Fame](#hall-of-fame)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Motivation\n\nFosite was written because our OAuth2 and OpenID Connect service\n[**Hydra**](https://github.com/ory-am/hydra) required a secure and extensible\nOAuth2 library. We had to realize that nothing matching our requirements was out\nthere, so we decided to build it ourselves.\n\n## API Stability\n\nThe core public API is almost stable as most changes will only touch the inner\nworkings.\n\nWe strongly encourage vendoring fosite using\n[dep](https://github.com/golang/dep) or comparable tools.\n\n## Example\n\nThe example does not have nice visuals but it should give you an idea of what\nyou can do with Fosite and a few lines of code.\n\n![Authorize Code Grant](docs/authorize-code-grant.gif)\n\nYou can run this minimalistic example by doing\n\n```\ngo get github.com/ory/fosite-example\ncd $GOPATH/src/github.com/ory/fosite-example\ndep ensure\ngo install github.com/ory/fosite-example\nfosite-example\n```\n\nThere should be a server listening on [localhost:3846](https://localhost:3846/).\nYou can check out the example's source code\n[here](https://github.com/ory/fosite-example/).\n\n## A word on quality\n\nWe tried to set up as many tests as possible and test for as many cases covered\nin the RFCs as possible. But we are only human. Please, feel free to add tests\nfor the various cases defined in the OAuth2 RFCs 6749 and 6819 or any other\ncases that improve the tests.\n\n**Everyone** writing an RFC conform test that breaks with the current\nimplementation, will receive a place in the [Hall of Fame](#hall-of-fame)!\n\n## A word on security\n\nPlease be aware that Fosite only secures parts of your server side security. You\nstill need to secure your apps and clients, keep your tokens safe, prevent CSRF\nattacks, ensure database security, use valid and strong TLS certificates and\nmuch more. If you need any help or advice feel free to contact our security\nstaff through [our website](https://ory.am/)!\n\nWe have given the various specifications, especially\n[OAuth 2.0 Threat Model and Security Considerations](https://tools.ietf.org/html/rfc6819#section-5.1.5.3),\na very close look and included everything we thought was in the scope of this\nframework. Here is a complete list of things we implemented in Fosite:\n\n- [No Cleartext Storage of Credentials](https://tools.ietf.org/html/rfc6819#section-5.1.4.1.3)\n- [Encryption of Credentials](https://tools.ietf.org/html/rfc6819#section-5.1.4.1.4)\n- [Use Short Expiration Time](https://tools.ietf.org/html/rfc6819#section-5.1.5.3)\n- [Limit Number of Usages or One-Time Usage](https://tools.ietf.org/html/rfc6819#section-5.1.5.4)\n- [Bind Token to Client id](https://tools.ietf.org/html/rfc6819#section-5.1.5.8)\n- [Automatic Revocation of Derived Tokens If Abuse Is Detected](https://tools.ietf.org/html/rfc6819#section-5.2.1.1)\n- [Binding of Refresh Token to \"client_id\"](https://tools.ietf.org/html/rfc6819#section-5.2.2.2)\n- [Refresh Token Rotation](https://tools.ietf.org/html/rfc6819#section-5.2.2.3)\n- [Revocation of Refresh Tokens](https://tools.ietf.org/html/rfc6819#section-5.2.2.4)\n- [Validate Pre-Registered \"redirect_uri\"](https://tools.ietf.org/html/rfc6819#section-5.2.3.5)\n- [Binding of Authorization \"code\" to \"client_id\"](https://tools.ietf.org/html/rfc6819#section-5.2.4.4)\n- [Binding of Authorization \"code\" to \"redirect_uri\"](https://tools.ietf.org/html/rfc6819#section-5.2.4.6)\n- [Opaque access tokens](https://tools.ietf.org/html/rfc6749#section-1.4)\n- [Opaque refresh tokens](https://tools.ietf.org/html/rfc6749#section-1.5)\n- [Ensure Confidentiality of Requests](https://tools.ietf.org/html/rfc6819#section-5.1.1)\n- [Use of Asymmetric Cryptography](https://tools.ietf.org/html/rfc6819#section-5.1.4.1.5)\n  Fosite ensures that redirect URIs use https **except localhost** but you need\n  to implement TLS for the token and auth endpoints yourself.\n\nAdditionally, we added these safeguards:\n\n- **Enforcing random states:** Without a random-looking state or OpenID Connect\n  nonce the request will fail.\n- **Advanced Token Validation:** Tokens are layouted as `<key>.<signature>`\n  where `<signature>` is created using HMAC-SHA256 using a global secret. This\n  is what a token can look like:\n  `/tgBeUhWlAT8tM8Bhmnx+Amf8rOYOUhrDi3pGzmjP7c=.BiV/Yhma+5moTP46anxMT6cWW8gz5R5vpC9RbpwSDdM=`\n\nSections below [Section 5](https://tools.ietf.org/html/rfc6819#section-5) that\nare not covered in the list above should be reviewed by you. If you think that a\nspecific section should be something that is covered in Fosite, feel free to\ncreate an [issue](https://github.com/ory/fosite/issues). Please be aware that\nOpenID Connect requires specific knowledge of the identity provider, which is\nwhy Fosite only implements core requirements and most things must be implemented\nby you (for example prompt, max_age, ui_locales, id_token_hint, user\nauthentication, session management, ...).\n\n**It is strongly encouraged to use the handlers shipped with Fosite as they\nfollow the specs and are well tested.**\n\n## A word on extensibility\n\nFosite is extensible ... because OAuth2 is an extensible and flexible\n**framework**. Fosite let's you register custom token and authorize endpoint\nhandlers with the security that the requests have been validated against the\nOAuth2 specs beforehand. You can easily extend Fosite's capabilities. For\nexample, if you want to provide OpenID Connect on top of your OAuth2 stack,\nthat's no problem. Or custom assertions, what ever you like and as long as it is\nsecure. ;)\n\n## Installation\n\n[Go 1.11+](https://golang.org) must be installed on your system and it is\nrequired that you have set up your GOPATH environment variable.\n\n```\ngo get -u github.com/ory/fosite/...\n```\n\nWe recommend to use [dep](https://github.com/golang/dep) to mitigate\ncompatibility breaks that come with new api versions.\n\n## Documentation\n\nThere is an API documentation available at\n[godoc.org/ory/fosite](https://godoc.org/github.com/ory/fosite).\n\n### Scopes\n\nFosite has three strategies for matching scopes. You can replace the default\nscope strategy if you need a custom one by implementing `fosite.ScopeStrategy`.\n\nUsing the composer, setting a strategy is easy:\n\n```go\nimport \"github.com/ory/fosite\"\n\nvar config = &fosite.Config{\nScopeStrategy: fosite.HierarchicScopeStrategy,\n}\n```\n\n**Note:** To issue refresh tokens with any of the grants, you need to include\nthe `offline` scope in the OAuth2 request. This can be modified by the\n`RefreshTokenScopes` compose configuration. When set to an empty array, _all_\ngrants will issue refresh tokens.\n\n#### `fosite.WildcardScopeStrategy`\n\nThis is the default strategy, and the safest one. It is best explained by\nlooking at some examples:\n\n- `users.*` matches `users.read`\n- `users.*` matches `users.read.foo`\n- `users.read` matches `users.read`\n- `users` does not match `users.read`\n- `users.read.*` does not match `users.read`\n- `users.*.*` does not match `users.read`\n- `users.*.*` matches `users.read.own`\n- `users.*.*` matches `users.read.own.other`\n- `users.read.*` matches `users.read.own`\n- `users.read.*` matches `users.read.own.other`\n- `users.write.*` does not match `users.read.own`\n- `users.*.bar` matches `users.baz.bar`\n- `users.*.bar` does not `users.baz.baz.bar`\n\nTo request `users.*`, a client must have exactly `users.*` as granted scope.\n\n#### `fosite.ExactScopeStrategy`\n\nThis strategy is searching only for exact matches. It returns true iff the scope\nis granted.\n\n#### `fosite.HierarchicScopeStrategy`\n\nThis strategy is deprecated, use it with care. Again, it is best explained by\nlooking at some examples:\n\n- `users` matches `users`\n- `users` matches `users.read`\n- `users` matches `users.read.own`\n- `users.read` matches `users.read`\n- `users.read` matches `users.read.own`\n- `users.read` does not match `users.write`\n- `users.read` does not match `users.write.own`\n\n### Globalization\n\nFosite does not natively carry translations for error messages and hints, but\noffers an interface that allows the consumer to define catalog bundles and an\nimplementation to translate. This is available through the\n[MessageCatalog](i18n/i18n.go) interface. The functions defined are\nself-explanatory. The `DefaultMessageCatalog` illustrates this. Compose config\nhas been extended to take in an instance of the `MessageCatalog`.\n\n#### Building translated files\n\nThere are three possible \"message key\" types:\n\n1. Value of `RFC6749Error.ErrorField`: This is a string like `invalid_request`\n   and correlates to most errors produced by Fosite.\n2. Hint identifier passed into `RFC6749Error.WithHintIDOrDefaultf`: This func is\n   not used extensively in Fosite but, in time, most `WithHint` and `WithHintf`\n   will be replaced with this function.\n3. Free text string format passed into `RFC6749Error.WithHint` and\n   `RFC6749Error.WithHintf`: This function is used in Fosite and Hydra\n   extensively and any message catalog implementation can use the format string\n   parameter as the message key.\n\nAn example of a message catalog can be seen in the\n[i18n_test.go](i18n/i18n_test.go).\n\n#### Generating the `en` messages file\n\nThis is a WIP at the moment, but effectively any scripting language can be used\nto generate this. It would need to traverse all files in the source code and\nextract the possible message identifiers based on the different message key\ntypes.\n\n### Quickstart\n\nInstantiating fosite by hand can be painful. Therefore we created a few\nconvenience helpers available through the [compose package](/compose). It is\nstrongly encouraged to use these well tested composers.\n\nIn this very basic example, we will instantiate fosite with all OpenID Connect\nand OAuth2 handlers enabled. Please refer to the\n[example app](https://github.com/ory/fosite-example/) for more details.\n\nThis little code snippet sets up a full-blown OAuth2 and OpenID Connect example.\n\n```go\npackage main\n\nimport \"github.com/ory/fosite\"\nimport \"github.com/ory/fosite/compose\"\nimport \"github.com/ory/fosite/storage\"\n\n// This is the example storage that contains:\n// * an OAuth2 Client with id \"my-client\" and secrets \"foobar\" and \"foobaz\" capable of all oauth2 and open id connect grant and response types.\n// * a User for the resource owner password credentials grant type with username \"peter\" and password \"secret\".\n//\n// You will most likely replace this with your own logic once you set up a real world application.\nvar storage = storage.NewExampleStore()\n\n// This secret is being used to sign access and refresh tokens as well as\n// authorization codes. It must be exactly 32 bytes long.\nvar secret = []byte(\"my super secret signing password\")\n\nprivateKey, err := rsa.GenerateKey(rand.Reader, 2048)\nif err != nil {\npanic(\"unable to create private key\")\n}\n\n// check the api docs of fosite.Config for further configuration options\nvar config = &fosite.Config{\n\tAccessTokenLifespan: time.Minute * 30,\n\tGlobalSecret: secret,\n\t// ...\n}\n\nvar oauth2Provider = compose.ComposeAllEnabled(config, storage, privateKey)\n\n// The authorize endpoint is usually at \"https://mydomain.com/oauth2/auth\".\nfunc authorizeHandlerFunc(rw http.ResponseWriter, req *http.Request) {\n\t// This context will be passed to all methods. It doesn't fulfill a real purpose in the standard library but could be used\n\t// to abort database lookups or similar things.\n\tctx := req.Context()\n\n\t// Let's create an AuthorizeRequest object!\n\t// It will analyze the request and extract important information like scopes, response type and others.\n\tar, err := oauth2Provider.NewAuthorizeRequest(ctx, req)\n\tif err != nil {\n\t\toauth2Provider.WriteAuthorizeError(ctx, rw, ar, err)\n\t\treturn\n\t}\n\n\t// Normally, this would be the place where you would check if the user is logged in and gives his consent.\n\t// We're simplifying things and just checking if the request includes a valid username and password\n\tif req.Form.Get(\"username\") != \"peter\" {\n\t\trw.Header().Set(\"Content-Type\", \"text/html;charset=UTF-8\")\n\t\trw.Write([]byte(`<h1>Login page</h1>`))\n\t\trw.Write([]byte(`\n\t\t\t<p>Howdy! This is the log in page. For this example, it is enough to supply the username.</p>\n\t\t\t<form method=\"post\">\n\t\t\t\t<input type=\"text\" name=\"username\" /> <small>try peter</small><br>\n\t\t\t\t<input type=\"submit\">\n\t\t\t</form>\n\t\t`))\n\t\treturn\n\t}\n\n\t// Now that the user is authorized, we set up a session. When validating / looking up tokens, we additionally get\n\t// the session. You can store anything you want in it.\n\n\t// The session will be persisted by the store and made available when e.g. validating tokens or handling token endpoint requests.\n\t// The default OAuth2 and OpenID Connect handlers require the session to implement a few methods. Apart from that, the\n\t// session struct can be anything you want it to be.\n\tmySessionData := &fosite.DefaultSession{\n\t\tUsername: req.Form.Get(\"username\"),\n\t}\n\n\t// It's also wise to check the requested scopes, e.g.:\n\t// if authorizeRequest.GetScopes().Has(\"admin\") {\n\t//     http.Error(rw, \"you're not allowed to do that\", http.StatusForbidden)\n\t//     return\n\t// }\n\n\t// Now we need to get a response. This is the place where the AuthorizeEndpointHandlers kick in and start processing the request.\n\t// NewAuthorizeResponse is capable of running multiple response type handlers which in turn enables this library\n\t// to support open id connect.\n\tresponse, err := oauth2Provider.NewAuthorizeResponse(ctx, ar, mySessionData)\n\tif err != nil {\n\t\toauth2Provider.WriteAuthorizeError(ctx, rw, ar, err)\n\t\treturn\n\t}\n\n\t// Awesome, now we redirect back to the client redirect uri and pass along an authorize code\n\toauth2Provider.WriteAuthorizeResponse(ctx, rw, ar, response)\n}\n\n// The token endpoint is usually at \"https://mydomain.com/oauth2/token\"\nfunc tokenHandlerFunc(rw http.ResponseWriter, req *http.Request) {\n\tctx := req.Context()\n\n\t// Create an empty session object that will be passed to storage implementation to populate (unmarshal) the session into.\n\t// By passing an empty session object as a \"prototype\" to the store, the store can use the underlying type to unmarshal the value into it.\n\t// For an example of storage implementation that takes advantage of that, see SQL Store (fosite_store_sql.go) from ory/Hydra project.\n\tmySessionData := new(fosite.DefaultSession)\n\n\t// This will create an access request object and iterate through the registered TokenEndpointHandlers to validate the request.\n\taccessRequest, err := oauth2Provider.NewAccessRequest(ctx, req, mySessionData)\n\tif err != nil {\n\t\toauth2Provider.WriteAccessError(ctx, rw, accessRequest, err)\n\t\treturn\n\t}\n\n\tif mySessionData.Username == \"super-admin-guy\" {\n\t\t// do something...\n\t}\n\n\t// Next we create a response for the access request. Again, we iterate through the TokenEndpointHandlers\n\t// and aggregate the result in response.\n\tresponse, err := oauth2Provider.NewAccessResponse(ctx, accessRequest)\n\tif err != nil {\n\t\toauth2Provider.WriteAccessError(ctx, rw, accessRequest, err)\n\t\treturn\n\t}\n\n\t// All done, send the response.\n\toauth2Provider.WriteAccessResponse(ctx, rw, accessRequest, response)\n\n\t// The client has a valid access token now\n}\n\nfunc someResourceProviderHandlerFunc(rw http.ResponseWriter, req *http.Request) {\n\tctx := req.Context()\n\trequiredScope := \"blogposts.create\"\n\n\t_, ar, err := oauth2Provider.IntrospectToken(ctx, fosite.AccessTokenFromRequest(req), fosite.AccessToken, new(fosite.DefaultSession), requiredScope)\n\tif err != nil {\n\t\t// ...\n\t}\n\n\t// If no error occurred the token + scope is valid and you have access to:\n\t// ar.GetClient().GetID(), ar.GetGrantedScopes(), ar.GetScopes(), ar.GetSession().UserID, ar.GetRequestedAt(), ...\n}\n```\n\n### Code Examples\n\nFosite provides integration tests as well as a http server example:\n\n- Fosite ships with an example app that runs in your browser:\n  [Example app](https://github.com/ory/fosite-example/).\n- If you want to check out how to enable specific handlers, check out the\n  [integration tests](integration/).\n\nIf you have working examples yourself, please share them with us!\n\n### Example Storage Implementation\n\nFosite does not ship a storage implementation. This is intended, because\nrequirements vary with every environment. You can find a reference\nimplementation at [storage/memory.go](storage/memory.go). This storage fulfills\nrequirements from all OAuth2 and OpenID Connect handlers.\n\n### Extensible handlers\n\nOAuth2 is a framework. Fosite mimics this behaviour by enabling you to replace\nexisting or create new OAuth2 handlers. Of course, fosite ships handlers for all\nOAuth2 and OpenID Connect flows.\n\n- **[Fosite OAuth2 Core Handlers](handler/oauth2)** implement the\n  [Client Credentials Grant](https://tools.ietf.org/html/rfc6749#section-4.4),\n  [Resource Owner Password Credentials Grant](https://tools.ietf.org/html/rfc6749#section-4.3),\n  [Implicit Grant](https://tools.ietf.org/html/rfc6749#section-4.2),\n  [Authorization Code Grant](https://tools.ietf.org/html/rfc6749#section-4.1),\n  [Refresh Token Grant](https://tools.ietf.org/html/rfc6749#section-6)\n- **[Fosite OpenID Connect Handlers](handler/openid)** implement the\n  [Authentication using the Authorization Code Flow](http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth),\n  [Authentication using the Implicit Flow](http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth),\n  [Authentication using the Hybrid Flow](http://openid.net/specs/openid-connect-core-1_0.html#HybridFlowAuth)\n\nThis section is missing documentation and we welcome any contributions in that\ndirection.\n\n### JWT Introspection\n\nPlease note that when using the OAuth2StatelessJWTIntrospectionFactory access\ntoken revocation is not possible.\n\n## Contribute\n\nYou need git and golang installed on your system.\n\n```\ngo get -d github.com/ory/fosite\ncd $GOPATH/src/github.com/ory/fosite\ngit status\ngit remote add myfork <url-to-your-fork>\ngo test ./...\n```\n\nSimple, right? Now you are ready to go! Make sure to run `go test ./...` often,\ndetecting problems with your code rather sooner than later. Please read\n[CONTRIBUTE.md] before creating pull requests and issues.\n\n### Refresh mock objects\n\nRun `./generate-mocks.sh` in fosite's root directory or run the contents of\n[generate-mocks.sh] in a shell.\n\n## Hall of Fame\n\nThis place is reserved for the fearless bug hunters, reviewers and contributors\n(alphabetical order).\n\n- [agtorre](https://github.com/agtorre):\n  [contributions](https://github.com/ory/fosite/issues?q=author%3Aagtorre),\n  [participations](https://github.com/ory/fosite/issues?q=commenter%3Aagtorre).\n- [danielchatfield](https://github.com/danielchatfield):\n  [contributions](https://github.com/ory/fosite/issues?q=author%3Adanielchatfield),\n  [participations](https://github.com/ory/fosite/issues?q=commenter%3Adanielchatfield).\n- [leetal](https://github.com/leetal):\n  [contributions](https://github.com/ory/fosite/issues?q=author%3Aleetal),\n  [participations](https://github.com/ory/fosite/issues?q=commenter%3Aleetal).\n- [jrossiter](https://github.com/jrossiter):\n  [contributions](https://github.com/ory/fosite/issues?q=author%3Ajrossiter),\n  [participations](https://github.com/ory/fosite/issues?q=commenter%3Ajrossiter).\n- [jrossiter](https://github.com/jrossiter):\n  [contributions](https://github.com/ory/fosite/issues?q=author%3Ajrossiter),\n  [participations](https://github.com/ory/fosite/issues?q=commenter%3Ajrossiter).\n- [danilobuerger](https://github.com/danilobuerger):\n  [contributions](https://github.com/ory/fosite/issues?q=author%3Adanilobuerger),\n  [participations](https://github.com/ory/fosite/issues?q=commenter%3Adanilobuerger).\n\nFind out more about the [author](https://aeneas.io/) of Fosite and Hydra, and\nthe [Ory Company](https://ory.am/).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.4453125,
          "content": "<!-- AUTO-GENERATED, DO NOT EDIT! -->\n<!-- Please edit the original at https://github.com/ory/meta/blob/master/templates/repository/common/SECURITY.md -->\n\n# Ory Security Policy\n\nThis policy outlines Ory's security commitments and practices for users across\ndifferent licensing and deployment models.\n\nTo learn more about Ory's security service level agreements (SLAs) and\nprocesses, please [contact us](https://www.ory.sh/contact/).\n\n## Ory Network Users\n\n- **Security SLA:** Ory addresses vulnerabilities in the Ory Network according\n  to the following guidelines:\n  - Critical: Typically addressed within 14 days.\n  - High: Typically addressed within 30 days.\n  - Medium: Typically addressed within 90 days.\n  - Low: Typically addressed within 180 days.\n  - Informational: Addressed as necessary.  \n    These timelines are targets and may vary based on specific circumstances.\n- **Release Schedule:** Updates are deployed to the Ory Network as\n  vulnerabilities are resolved.\n- **Version Support:** The Ory Network always runs the latest version, ensuring\n  up-to-date security fixes.\n\n## Ory Enterprise License Customers\n\n- **Security SLA:** Ory addresses vulnerabilities based on their severity:\n  - Critical: Typically addressed within 14 days.\n  - High: Typically addressed within 30 days.\n  - Medium: Typically addressed within 90 days.\n  - Low: Typically addressed within 180 days.\n  - Informational: Addressed as necessary.  \n    These timelines are targets and may vary based on specific circumstances.\n- **Release Schedule:** Updates are made available as vulnerabilities are\n  resolved. Ory works closely with enterprise customers to ensure timely updates\n  that align with their operational needs.\n- **Version Support:** Ory may provide security support for multiple versions,\n  depending on the terms of the enterprise agreement.\n\n## Apache 2.0 License Users\n\n- **Security SLA:** Ory does not provide a formal SLA for security issues under\n  the Apache 2.0 License.\n- **Release Schedule:** Releases prioritize new functionality and include fixes\n  for known security vulnerabilities at the time of release. While major\n  releases typically occur one to two times per year, Ory does not guarantee a\n  fixed release schedule.\n- **Version Support:** Security patches are only provided for the latest release\n  version.\n\n## Reporting a Vulnerability\n\nFor details on how to report security vulnerabilities, visit our\n[security policy documentation](https://www.ory.sh/docs/ecosystem/security).\n"
        },
        {
          "name": "access_error.go",
          "type": "blob",
          "size": 1.330078125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc (f *Fosite) WriteAccessError(ctx context.Context, rw http.ResponseWriter, req AccessRequester, err error) {\n\tf.writeJsonError(ctx, rw, req, err)\n}\n\nfunc (f *Fosite) writeJsonError(ctx context.Context, rw http.ResponseWriter, requester AccessRequester, err error) {\n\trw.Header().Set(\"Content-Type\", \"application/json;charset=UTF-8\")\n\trw.Header().Set(\"Cache-Control\", \"no-store\")\n\trw.Header().Set(\"Pragma\", \"no-cache\")\n\n\trfcerr := ErrorToRFC6749Error(err).WithLegacyFormat(f.Config.GetUseLegacyErrorFormat(ctx)).WithExposeDebug(f.Config.GetSendDebugMessagesToClients(ctx))\n\n\tif requester != nil {\n\t\trfcerr = rfcerr.WithLocalizer(f.Config.GetMessageCatalog(ctx), getLangFromRequester(requester))\n\t}\n\n\tjs, err := json.Marshal(rfcerr)\n\tif err != nil {\n\t\tif f.Config.GetSendDebugMessagesToClients(ctx) {\n\t\t\terrorMessage := EscapeJSONString(err.Error())\n\t\t\thttp.Error(rw, fmt.Sprintf(`{\"error\":\"server_error\",\"error_description\":\"%s\"}`, errorMessage), http.StatusInternalServerError)\n\t\t} else {\n\t\t\thttp.Error(rw, `{\"error\":\"server_error\"}`, http.StatusInternalServerError)\n\t\t}\n\t\treturn\n\t}\n\n\trw.WriteHeader(rfcerr.CodeField)\n\t// ignoring the error because the connection is broken when it happens\n\t_, _ = rw.Write(js)\n}\n"
        },
        {
          "name": "access_error_test.go",
          "type": "blob",
          "size": 3.341796875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t. \"github.com/ory/fosite\"\n\t. \"github.com/ory/fosite/internal\"\n)\n\nfunc TestWriteAccessError(t *testing.T) {\n\tf := &Fosite{Config: new(Config)}\n\theader := http.Header{}\n\tctrl := gomock.NewController(t)\n\trw := NewMockResponseWriter(ctrl)\n\tdefer ctrl.Finish()\n\n\trw.EXPECT().Header().AnyTimes().Return(header)\n\trw.EXPECT().WriteHeader(http.StatusBadRequest)\n\trw.EXPECT().Write(gomock.Any())\n\n\tf.WriteAccessError(context.Background(), rw, nil, ErrInvalidRequest)\n}\n\nfunc TestWriteAccessError_RFC6749(t *testing.T) {\n\t// https://tools.ietf.org/html/rfc6749#section-5.2\n\n\tconfig := new(Config)\n\tf := &Fosite{Config: config}\n\n\tfor k, c := range []struct {\n\t\terr                *RFC6749Error\n\t\tcode               string\n\t\tdebug              bool\n\t\texpectDebugMessage string\n\t\tincludeExtraFields bool\n\t}{\n\t\t{ErrInvalidRequest.WithDebug(\"some-debug\"), \"invalid_request\", true, \"some-debug\", true},\n\t\t{ErrInvalidRequest.WithDebugf(\"some-debug-%d\", 1234), \"invalid_request\", true, \"some-debug-1234\", true},\n\t\t{ErrInvalidRequest.WithDebug(\"some-debug\"), \"invalid_request\", false, \"some-debug\", true},\n\t\t{ErrInvalidClient.WithDebug(\"some-debug\"), \"invalid_client\", false, \"some-debug\", true},\n\t\t{ErrInvalidGrant.WithDebug(\"some-debug\"), \"invalid_grant\", false, \"some-debug\", true},\n\t\t{ErrInvalidScope.WithDebug(\"some-debug\"), \"invalid_scope\", false, \"some-debug\", true},\n\t\t{ErrUnauthorizedClient.WithDebug(\"some-debug\"), \"unauthorized_client\", false, \"some-debug\", true},\n\t\t{ErrUnsupportedGrantType.WithDebug(\"some-debug\"), \"unsupported_grant_type\", false, \"some-debug\", true},\n\t\t{ErrUnsupportedGrantType.WithDebug(\"some-debug\"), \"unsupported_grant_type\", false, \"some-debug\", false},\n\t\t{ErrUnsupportedGrantType.WithDebug(\"some-debug\"), \"unsupported_grant_type\", true, \"some-debug\", false},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tconfig.SendDebugMessagesToClients = c.debug\n\t\t\tconfig.UseLegacyErrorFormat = c.includeExtraFields\n\n\t\t\trw := httptest.NewRecorder()\n\t\t\tf.WriteAccessError(context.Background(), rw, nil, c.err)\n\n\t\t\tvar params struct {\n\t\t\t\tError       string `json:\"error\"`             // specified by RFC, required\n\t\t\t\tDescription string `json:\"error_description\"` // specified by RFC, optional\n\t\t\t\tDebug       string `json:\"error_debug\"`\n\t\t\t\tHint        string `json:\"error_hint\"`\n\t\t\t}\n\n\t\t\trequire.NotNil(t, rw.Body)\n\t\t\terr := json.NewDecoder(rw.Body).Decode(&params)\n\t\t\trequire.NoError(t, err)\n\n\t\t\tassert.Equal(t, c.code, params.Error)\n\t\t\tif !c.includeExtraFields {\n\t\t\t\tassert.Empty(t, params.Debug)\n\t\t\t\tassert.Empty(t, params.Hint)\n\t\t\t\tassert.Contains(t, params.Description, c.err.DescriptionField)\n\t\t\t\tassert.Contains(t, params.Description, c.err.HintField)\n\n\t\t\t\tif c.debug {\n\t\t\t\t\tassert.Contains(t, params.Description, c.err.DebugField)\n\t\t\t\t} else {\n\t\t\t\t\tassert.NotContains(t, params.Description, c.err.DebugField)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassert.EqualValues(t, c.err.DescriptionField, params.Description)\n\t\t\t\tassert.EqualValues(t, c.err.HintField, params.Hint)\n\n\t\t\t\tif !c.debug {\n\t\t\t\t\tassert.Empty(t, params.Debug)\n\t\t\t\t} else {\n\t\t\t\t\tassert.EqualValues(t, c.err.DebugField, params.Debug)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "access_request.go",
          "type": "blob",
          "size": 0.55859375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\ntype AccessRequest struct {\n\tGrantTypes       Arguments `json:\"grantTypes\" gorethink:\"grantTypes\"`\n\tHandledGrantType Arguments `json:\"handledGrantType\" gorethink:\"handledGrantType\"`\n\n\tRequest\n}\n\nfunc NewAccessRequest(session Session) *AccessRequest {\n\tr := &AccessRequest{\n\t\tGrantTypes:       Arguments{},\n\t\tHandledGrantType: Arguments{},\n\t\tRequest:          *NewRequest(),\n\t}\n\tr.Session = session\n\treturn r\n}\n\nfunc (a *AccessRequest) GetGrantTypes() Arguments {\n\treturn a.GrantTypes\n}\n"
        },
        {
          "name": "access_request_handler.go",
          "type": "blob",
          "size": 4.5302734375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/ory/fosite/i18n\"\n\t\"github.com/ory/x/errorsx\"\n\t\"github.com/ory/x/otelx\"\n\t\"go.opentelemetry.io/otel/trace\"\n\n\t\"github.com/pkg/errors\"\n)\n\n// Implements\n//   - https://tools.ietf.org/html/rfc6749#section-2.3.1\n//     Clients in possession of a client password MAY use the HTTP Basic\n//     authentication scheme as defined in [RFC2617] to authenticate with\n//     the authorization server.  The client identifier is encoded using the\n//     \"application/x-www-form-urlencoded\" encoding algorithm per\n//     Appendix B, and the encoded value is used as the username; the client\n//     password is encoded using the same algorithm and used as the\n//     password.  The authorization server MUST support the HTTP Basic\n//     authentication scheme for authenticating clients that were issued a\n//     client password.\n//     Including the client credentials in the request-body using the two\n//     parameters is NOT RECOMMENDED and SHOULD be limited to clients unable\n//     to directly utilize the HTTP Basic authentication scheme (or other\n//     password-based HTTP authentication schemes).  The parameters can only\n//     be transmitted in the request-body and MUST NOT be included in the\n//     request URI.\n//   - https://tools.ietf.org/html/rfc6749#section-3.2.1\n//   - Confidential clients or other clients issued client credentials MUST\n//     authenticate with the authorization server as described in\n//     Section 2.3 when making requests to the token endpoint.\n//   - If the client type is confidential or the client was issued client\n//     credentials (or assigned other authentication requirements), the\n//     client MUST authenticate with the authorization server as described\n//     in Section 3.2.1.\nfunc (f *Fosite) NewAccessRequest(ctx context.Context, r *http.Request, session Session) (_ AccessRequester, err error) {\n\tctx, span := trace.SpanFromContext(ctx).TracerProvider().Tracer(\"github.com/ory/fosite\").Start(ctx, \"Fosite.NewAccessRequest\")\n\tdefer otelx.End(span, &err)\n\n\taccessRequest := NewAccessRequest(session)\n\taccessRequest.Request.Lang = i18n.GetLangFromRequest(f.Config.GetMessageCatalog(ctx), r)\n\n\tctx = context.WithValue(ctx, RequestContextKey, r)\n\tctx = context.WithValue(ctx, AccessRequestContextKey, accessRequest)\n\n\tif r.Method != \"POST\" {\n\t\treturn accessRequest, errorsx.WithStack(ErrInvalidRequest.WithHintf(\"HTTP method is '%s', expected 'POST'.\", r.Method))\n\t} else if err := r.ParseMultipartForm(1 << 20); err != nil && err != http.ErrNotMultipart {\n\t\treturn accessRequest, errorsx.WithStack(ErrInvalidRequest.WithHint(\"Unable to parse HTTP body, make sure to send a properly formatted form request body.\").WithWrap(err).WithDebug(err.Error()))\n\t} else if len(r.PostForm) == 0 {\n\t\treturn accessRequest, errorsx.WithStack(ErrInvalidRequest.WithHint(\"The POST body can not be empty.\"))\n\t}\n\n\taccessRequest.Form = r.PostForm\n\tif session == nil {\n\t\treturn accessRequest, errors.New(\"Session must not be nil\")\n\t}\n\n\taccessRequest.SetRequestedScopes(RemoveEmpty(strings.Split(r.PostForm.Get(\"scope\"), \" \")))\n\taccessRequest.SetRequestedAudience(GetAudiences(r.PostForm))\n\taccessRequest.GrantTypes = RemoveEmpty(strings.Split(r.PostForm.Get(\"grant_type\"), \" \"))\n\tif len(accessRequest.GrantTypes) < 1 {\n\t\treturn accessRequest, errorsx.WithStack(ErrInvalidRequest.WithHint(\"Request parameter 'grant_type' is missing\"))\n\t}\n\n\tclient, clientErr := f.AuthenticateClient(ctx, r, r.PostForm)\n\tif clientErr == nil {\n\t\taccessRequest.Client = client\n\t}\n\n\tvar found = false\n\tfor _, loader := range f.Config.GetTokenEndpointHandlers(ctx) {\n\t\t// Is the loader responsible for handling the request?\n\t\tif !loader.CanHandleTokenEndpointRequest(ctx, accessRequest) {\n\t\t\tcontinue\n\t\t}\n\n\t\t// The handler **is** responsible!\n\n\t\t// Is the client supplied in the request? If not can this handler skip client auth?\n\t\tif !loader.CanSkipClientAuth(ctx, accessRequest) && clientErr != nil {\n\t\t\t// No client and handler can not skip client auth -> error.\n\t\t\treturn accessRequest, clientErr\n\t\t}\n\n\t\t// All good.\n\t\tif err := loader.HandleTokenEndpointRequest(ctx, accessRequest); err == nil {\n\t\t\tfound = true\n\t\t} else if errors.Is(err, ErrUnknownRequest) {\n\t\t\t// This is a duplicate because it should already have been handled by\n\t\t\t// `loader.CanHandleTokenEndpointRequest(accessRequest)` but let's keep it for sanity.\n\t\t\t//\n\t\t\tcontinue\n\t\t} else if err != nil {\n\t\t\treturn accessRequest, err\n\t\t}\n\t}\n\n\tif !found {\n\t\treturn nil, errorsx.WithStack(ErrInvalidRequest)\n\t}\n\treturn accessRequest, nil\n}\n"
        },
        {
          "name": "access_request_handler_test.go",
          "type": "blob",
          "size": 12.7939453125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t. \"github.com/ory/fosite\"\n\t\"github.com/ory/fosite/internal\"\n)\n\nfunc TestNewAccessRequest(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tstore := internal.NewMockStorage(ctrl)\n\thandler := internal.NewMockTokenEndpointHandler(ctrl)\n\thandler.EXPECT().CanHandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(true).AnyTimes()\n\thandler.EXPECT().CanSkipClientAuth(gomock.Any(), gomock.Any()).Return(false).AnyTimes()\n\thasher := internal.NewMockHasher(ctrl)\n\tdefer ctrl.Finish()\n\n\tclient := &DefaultClient{}\n\tconfig := &Config{ClientSecretsHasher: hasher, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}\n\tfosite := &Fosite{Store: store, Config: config}\n\tfor k, c := range []struct {\n\t\theader    http.Header\n\t\tform      url.Values\n\t\tmock      func()\n\t\tmethod    string\n\t\texpectErr error\n\t\texpect    *AccessRequest\n\t\thandlers  TokenEndpointHandlers\n\t}{\n\t\t{\n\t\t\theader:    http.Header{},\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t\tform:      url.Values{},\n\t\t\tmethod:    \"POST\",\n\t\t\tmock:      func() {},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\tmock:      func() {},\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t},\n\t\t{\n\t\t\theader: http.Header{},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t\t\"client_id\":  {\"\"},\n\t\t\t},\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t\tmock:      func() {},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(nil, errors.New(\"\"))\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handler},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"GET\",\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t\tmock:      func() {},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(nil, errors.New(\"\"))\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handler},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Public = false\n\t\t\t\tclient.Secret = []byte(\"foo\")\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"foo\")), gomock.Eq([]byte(\"bar\"))).Return(errors.New(\"\"))\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handler},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\texpectErr: ErrServerError,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Public = false\n\t\t\t\tclient.Secret = []byte(\"foo\")\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"foo\")), gomock.Eq([]byte(\"bar\"))).Return(nil)\n\t\t\t\thandler.EXPECT().HandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(ErrServerError)\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handler},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Public = false\n\t\t\t\tclient.Secret = []byte(\"foo\")\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"foo\")), gomock.Eq([]byte(\"bar\"))).Return(nil)\n\t\t\t\thandler.EXPECT().HandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handler},\n\t\t\texpect: &AccessRequest{\n\t\t\t\tGrantTypes: Arguments{\"foo\"},\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: client,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Public = true\n\t\t\t\thandler.EXPECT().HandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handler},\n\t\t\texpect: &AccessRequest{\n\t\t\t\tGrantTypes: Arguments{\"foo\"},\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: client,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tr := &http.Request{\n\t\t\t\tHeader:   c.header,\n\t\t\t\tPostForm: c.form,\n\t\t\t\tForm:     c.form,\n\t\t\t\tMethod:   c.method,\n\t\t\t}\n\t\t\tc.mock()\n\t\t\tctx := NewContext()\n\t\t\tconfig.TokenEndpointHandlers = c.handlers\n\t\t\tar, err := fosite.NewAccessRequest(ctx, r, new(DefaultSession))\n\n\t\t\tif c.expectErr != nil {\n\t\t\t\tassert.EqualError(t, err, c.expectErr.Error())\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\tAssertObjectKeysEqual(t, c.expect, ar, \"GrantTypes\", \"Client\")\n\t\t\t\tassert.NotNil(t, ar.GetRequestedAt())\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestNewAccessRequestWithoutClientAuth(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tstore := internal.NewMockStorage(ctrl)\n\thandler := internal.NewMockTokenEndpointHandler(ctrl)\n\thandler.EXPECT().CanHandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(true).AnyTimes()\n\thandler.EXPECT().CanSkipClientAuth(gomock.Any(), gomock.Any()).Return(true).AnyTimes()\n\thasher := internal.NewMockHasher(ctrl)\n\tdefer ctrl.Finish()\n\n\tclient := &DefaultClient{}\n\tanotherClient := &DefaultClient{ID: \"another\"}\n\tconfig := &Config{ClientSecretsHasher: hasher, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}\n\tfosite := &Fosite{Store: store, Config: config}\n\tfor k, c := range []struct {\n\t\theader    http.Header\n\t\tform      url.Values\n\t\tmock      func()\n\t\tmethod    string\n\t\texpectErr error\n\t\texpect    *AccessRequest\n\t\thandlers  TokenEndpointHandlers\n\t}{\n\t\t// No grant type -> error\n\t\t{\n\t\t\tform: url.Values{},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Any()).Times(0)\n\t\t\t},\n\t\t\tmethod:    \"POST\",\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t},\n\t\t// No registered handlers -> error\n\t\t{\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Any()).Times(0)\n\t\t\t},\n\t\t\tmethod:    \"POST\",\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t\thandlers:  TokenEndpointHandlers{},\n\t\t},\n\t\t// Handler can skip client auth and ignores missing client.\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\t// despite error from storage, we should success, because client auth is not required\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"foo\").Return(nil, errors.New(\"no client\")).Times(1)\n\t\t\t\thandler.EXPECT().HandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\texpect: &AccessRequest{\n\t\t\t\tGrantTypes: Arguments{\"foo\"},\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: client,\n\t\t\t\t},\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handler},\n\t\t},\n\t\t// Should pass if no auth is set in the header and can skip!\n\t\t{\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\thandler.EXPECT().HandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\texpect: &AccessRequest{\n\t\t\t\tGrantTypes: Arguments{\"foo\"},\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: client,\n\t\t\t\t},\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handler},\n\t\t},\n\t\t// Should also pass if client auth is set!\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"foo\").Return(anotherClient, nil).Times(1)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil).Times(1)\n\t\t\t\thandler.EXPECT().HandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\texpect: &AccessRequest{\n\t\t\t\tGrantTypes: Arguments{\"foo\"},\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: anotherClient,\n\t\t\t\t},\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handler},\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tr := &http.Request{\n\t\t\t\tHeader:   c.header,\n\t\t\t\tPostForm: c.form,\n\t\t\t\tForm:     c.form,\n\t\t\t\tMethod:   c.method,\n\t\t\t}\n\t\t\tc.mock()\n\t\t\tctx := NewContext()\n\t\t\tconfig.TokenEndpointHandlers = c.handlers\n\t\t\tar, err := fosite.NewAccessRequest(ctx, r, new(DefaultSession))\n\n\t\t\tif c.expectErr != nil {\n\t\t\t\tassert.EqualError(t, err, c.expectErr.Error())\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\tAssertObjectKeysEqual(t, c.expect, ar, \"GrantTypes\", \"Client\")\n\t\t\t\tassert.NotNil(t, ar.GetRequestedAt())\n\t\t\t}\n\t\t})\n\t}\n}\n\n// In this test case one handler requires client auth and another handler not.\nfunc TestNewAccessRequestWithMixedClientAuth(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tstore := internal.NewMockStorage(ctrl)\n\n\thandlerWithClientAuth := internal.NewMockTokenEndpointHandler(ctrl)\n\thandlerWithClientAuth.EXPECT().CanHandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(true).AnyTimes()\n\thandlerWithClientAuth.EXPECT().CanSkipClientAuth(gomock.Any(), gomock.Any()).Return(false).AnyTimes()\n\n\thandlerWithoutClientAuth := internal.NewMockTokenEndpointHandler(ctrl)\n\thandlerWithoutClientAuth.EXPECT().CanHandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(true).AnyTimes()\n\thandlerWithoutClientAuth.EXPECT().CanSkipClientAuth(gomock.Any(), gomock.Any()).Return(true).AnyTimes()\n\n\thasher := internal.NewMockHasher(ctrl)\n\tdefer ctrl.Finish()\n\n\tclient := &DefaultClient{}\n\tconfig := &Config{ClientSecretsHasher: hasher, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}\n\tfosite := &Fosite{Store: store, Config: config}\n\tfor k, c := range []struct {\n\t\theader    http.Header\n\t\tform      url.Values\n\t\tmock      func()\n\t\tmethod    string\n\t\texpectErr error\n\t\texpect    *AccessRequest\n\t\thandlers  TokenEndpointHandlers\n\t}{\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Public = false\n\t\t\t\tclient.Secret = []byte(\"foo\")\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"foo\")), gomock.Eq([]byte(\"bar\"))).Return(errors.New(\"hash err\"))\n\t\t\t\thandlerWithoutClientAuth.EXPECT().HandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\tmethod:    \"POST\",\n\t\t\texpectErr: ErrInvalidClient,\n\t\t\thandlers:  TokenEndpointHandlers{handlerWithoutClientAuth, handlerWithClientAuth},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Public = false\n\t\t\t\tclient.Secret = []byte(\"foo\")\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"foo\")), gomock.Eq([]byte(\"bar\"))).Return(nil)\n\t\t\t\thandlerWithoutClientAuth.EXPECT().HandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t\thandlerWithClientAuth.EXPECT().HandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\texpect: &AccessRequest{\n\t\t\t\tGrantTypes: Arguments{\"foo\"},\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: client,\n\t\t\t\t},\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handlerWithoutClientAuth, handlerWithClientAuth},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{},\n\t\t\tform: url.Values{\n\t\t\t\t\"grant_type\": {\"foo\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Any()).Times(0)\n\t\t\t\thandlerWithoutClientAuth.EXPECT().HandleTokenEndpointRequest(gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\tmethod:    \"POST\",\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t\thandlers:  TokenEndpointHandlers{handlerWithoutClientAuth, handlerWithClientAuth},\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tr := &http.Request{\n\t\t\t\tHeader:   c.header,\n\t\t\t\tPostForm: c.form,\n\t\t\t\tForm:     c.form,\n\t\t\t\tMethod:   c.method,\n\t\t\t}\n\t\t\tc.mock()\n\t\t\tctx := NewContext()\n\t\t\tconfig.TokenEndpointHandlers = c.handlers\n\t\t\tar, err := fosite.NewAccessRequest(ctx, r, new(DefaultSession))\n\n\t\t\tif c.expectErr != nil {\n\t\t\t\tassert.EqualError(t, err, c.expectErr.Error())\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\tAssertObjectKeysEqual(t, c.expect, ar, \"GrantTypes\", \"Client\")\n\t\t\t\tassert.NotNil(t, ar.GetRequestedAt())\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc basicAuth(username, password string) string {\n\treturn \"Basic \" + base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf(\"%s:%s\", username, password)))\n}\n"
        },
        {
          "name": "access_request_test.go",
          "type": "blob",
          "size": 0.7119140625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestAccessRequest(t *testing.T) {\n\tar := NewAccessRequest(nil)\n\tar.GrantTypes = Arguments{\"foobar\"}\n\tar.Client = &DefaultClient{}\n\tar.GrantScope(\"foo\")\n\tar.SetRequestedAudience(Arguments{\"foo\", \"foo\", \"bar\"})\n\tar.SetRequestedScopes(Arguments{\"foo\", \"foo\", \"bar\"})\n\tassert.True(t, ar.GetGrantedScopes().Has(\"foo\"))\n\tassert.NotNil(t, ar.GetRequestedAt())\n\tassert.Equal(t, ar.GrantTypes, ar.GetGrantTypes())\n\tassert.Equal(t, Arguments{\"foo\", \"bar\"}, ar.RequestedAudience)\n\tassert.Equal(t, Arguments{\"foo\", \"bar\"}, ar.RequestedScope)\n\tassert.Equal(t, ar.Client, ar.GetClient())\n}\n"
        },
        {
          "name": "access_response.go",
          "type": "blob",
          "size": 1.181640625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"strings\"\n\t\"time\"\n)\n\nfunc NewAccessResponse() *AccessResponse {\n\treturn &AccessResponse{\n\t\tExtra: map[string]interface{}{},\n\t}\n}\n\ntype AccessResponse struct {\n\tExtra       map[string]interface{}\n\tAccessToken string\n\tTokenType   string\n}\n\nfunc (a *AccessResponse) SetScopes(scopes Arguments) {\n\ta.SetExtra(\"scope\", strings.Join(scopes, \" \"))\n}\n\nfunc (a *AccessResponse) SetExpiresIn(expiresIn time.Duration) {\n\ta.SetExtra(\"expires_in\", int64(expiresIn/time.Second))\n}\n\nfunc (a *AccessResponse) SetExtra(key string, value interface{}) {\n\ta.Extra[key] = value\n}\n\nfunc (a *AccessResponse) GetExtra(key string) interface{} {\n\treturn a.Extra[key]\n}\n\nfunc (a *AccessResponse) SetAccessToken(token string) {\n\ta.AccessToken = token\n}\n\nfunc (a *AccessResponse) SetTokenType(name string) {\n\ta.TokenType = name\n}\n\nfunc (a *AccessResponse) GetAccessToken() string {\n\treturn a.AccessToken\n}\n\nfunc (a *AccessResponse) GetTokenType() string {\n\treturn a.TokenType\n}\n\nfunc (a *AccessResponse) ToMap() map[string]interface{} {\n\ta.Extra[\"access_token\"] = a.GetAccessToken()\n\ta.Extra[\"token_type\"] = a.GetTokenType()\n\treturn a.Extra\n}\n"
        },
        {
          "name": "access_response_test.go",
          "type": "blob",
          "size": 0.6337890625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\t. \"github.com/ory/fosite\"\n)\n\nfunc TestAccessResponse(t *testing.T) {\n\tar := NewAccessResponse()\n\tar.SetAccessToken(\"access\")\n\tar.SetTokenType(\"bearer\")\n\tar.SetExtra(\"access_token\", \"invalid\")\n\tar.SetExtra(\"foo\", \"bar\")\n\tassert.Equal(t, \"access\", ar.GetAccessToken())\n\tassert.Equal(t, \"bearer\", ar.GetTokenType())\n\tassert.Equal(t, \"bar\", ar.GetExtra(\"foo\"))\n\tassert.Equal(t, map[string]interface{}{\n\t\t\"access_token\": \"access\",\n\t\t\"token_type\":   \"bearer\",\n\t\t\"foo\":          \"bar\",\n\t}, ar.ToMap())\n}\n"
        },
        {
          "name": "access_response_writer.go",
          "type": "blob",
          "size": 1.3330078125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\n\t\"github.com/ory/x/errorsx\"\n\t\"github.com/ory/x/otelx\"\n\t\"go.opentelemetry.io/otel/trace\"\n\n\t\"github.com/pkg/errors\"\n)\n\nfunc (f *Fosite) NewAccessResponse(ctx context.Context, requester AccessRequester) (_ AccessResponder, err error) {\n\tctx, span := trace.SpanFromContext(ctx).TracerProvider().Tracer(\"github.com/ory/fosite\").Start(ctx, \"Fosite.NewAccessResponse\")\n\tdefer otelx.End(span, &err)\n\n\tvar tk TokenEndpointHandler\n\n\tresponse := NewAccessResponse()\n\n\tctx = context.WithValue(ctx, AccessRequestContextKey, requester)\n\tctx = context.WithValue(ctx, AccessResponseContextKey, response)\n\n\tfor _, tk = range f.Config.GetTokenEndpointHandlers(ctx) {\n\t\tif err = tk.PopulateTokenEndpointResponse(ctx, requester, response); err == nil {\n\t\t\t// do nothing\n\t\t} else if errors.Is(err, ErrUnknownRequest) {\n\t\t\t// do nothing\n\t\t} else if err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif response.GetAccessToken() == \"\" || response.GetTokenType() == \"\" {\n\t\treturn nil, errorsx.WithStack(ErrServerError.\n\t\t\tWithHint(\"An internal server occurred while trying to complete the request.\").\n\t\t\tWithDebug(\"Access token or token type not set by TokenEndpointHandlers.\").\n\t\t\tWithLocalizer(f.Config.GetMessageCatalog(ctx), getLangFromRequester(requester)))\n\t}\n\n\treturn response, nil\n}\n"
        },
        {
          "name": "access_response_writer_test.go",
          "type": "blob",
          "size": 2.2412109375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t. \"github.com/ory/fosite\"\n\t\"github.com/ory/fosite/internal\"\n)\n\nfunc TestNewAccessResponse(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\thandler := internal.NewMockTokenEndpointHandler(ctrl)\n\tdefer ctrl.Finish()\n\n\tconfig := &Config{}\n\tf := &Fosite{Config: config}\n\tfor k, c := range []struct {\n\t\thandlers  TokenEndpointHandlers\n\t\tmock      func()\n\t\texpectErr error\n\t\texpect    AccessResponder\n\t}{\n\t\t{\n\t\t\tmock:      func() {},\n\t\t\thandlers:  TokenEndpointHandlers{},\n\t\t\texpectErr: ErrServerError,\n\t\t},\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\thandler.EXPECT().PopulateTokenEndpointResponse(gomock.Any(), gomock.Any(), gomock.Any()).Return(ErrServerError)\n\t\t\t},\n\t\t\thandlers:  TokenEndpointHandlers{handler},\n\t\t\texpectErr: ErrServerError,\n\t\t},\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\thandler.EXPECT().PopulateTokenEndpointResponse(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\thandlers:  TokenEndpointHandlers{handler},\n\t\t\texpectErr: ErrServerError,\n\t\t},\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\thandler.EXPECT().PopulateTokenEndpointResponse(gomock.Any(), gomock.Any(), gomock.Any()).Do(func(_ context.Context, _ AccessRequester, resp AccessResponder) {\n\t\t\t\t\tresp.SetAccessToken(\"foo\")\n\t\t\t\t}).Return(nil)\n\t\t\t},\n\t\t\thandlers:  TokenEndpointHandlers{handler},\n\t\t\texpectErr: ErrServerError,\n\t\t},\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\thandler.EXPECT().PopulateTokenEndpointResponse(gomock.Any(), gomock.Any(), gomock.Any()).Do(func(_ context.Context, _ AccessRequester, resp AccessResponder) {\n\t\t\t\t\tresp.SetAccessToken(\"foo\")\n\t\t\t\t\tresp.SetTokenType(\"bar\")\n\t\t\t\t}).Return(nil)\n\t\t\t},\n\t\t\thandlers: TokenEndpointHandlers{handler},\n\t\t\texpect: &AccessResponse{\n\t\t\t\tExtra:       map[string]interface{}{},\n\t\t\t\tAccessToken: \"foo\",\n\t\t\t\tTokenType:   \"bar\",\n\t\t\t},\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tconfig.TokenEndpointHandlers = c.handlers\n\t\t\tc.mock()\n\t\t\tar, err := f.NewAccessResponse(context.TODO(), nil)\n\n\t\t\tif c.expectErr != nil {\n\t\t\t\tassert.EqualError(t, err, c.expectErr.Error())\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\tassert.Equal(t, ar, c.expect)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "access_write.go",
          "type": "blob",
          "size": 0.60546875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"net/http\"\n)\n\nfunc (f *Fosite) WriteAccessResponse(ctx context.Context, rw http.ResponseWriter, requester AccessRequester, responder AccessResponder) {\n\trw.Header().Set(\"Cache-Control\", \"no-store\")\n\trw.Header().Set(\"Pragma\", \"no-cache\")\n\n\tjs, err := json.Marshal(responder.ToMap())\n\tif err != nil {\n\t\thttp.Error(rw, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\trw.Header().Set(\"Content-Type\", \"application/json;charset=UTF-8\")\n\n\trw.WriteHeader(http.StatusOK)\n\t_, _ = rw.Write(js)\n}\n"
        },
        {
          "name": "access_write_test.go",
          "type": "blob",
          "size": 0.9462890625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/stretchr/testify/assert\"\n\n\t. \"github.com/ory/fosite\"\n\t. \"github.com/ory/fosite/internal\"\n)\n\nfunc TestWriteAccessResponse(t *testing.T) {\n\tf := &Fosite{Config: new(Config)}\n\theader := http.Header{}\n\tctrl := gomock.NewController(t)\n\trw := NewMockResponseWriter(ctrl)\n\tar := NewMockAccessRequester(ctrl)\n\tresp := NewMockAccessResponder(ctrl)\n\tdefer ctrl.Finish()\n\n\trw.EXPECT().Header().AnyTimes().Return(header)\n\trw.EXPECT().WriteHeader(http.StatusOK)\n\trw.EXPECT().Write(gomock.Any())\n\tresp.EXPECT().ToMap().Return(map[string]interface{}{})\n\n\tf.WriteAccessResponse(context.Background(), rw, ar, resp)\n\tassert.Equal(t, \"application/json;charset=UTF-8\", header.Get(\"Content-Type\"))\n\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n}\n"
        },
        {
          "name": "arguments.go",
          "type": "blob",
          "size": 1.708984375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport \"strings\"\n\ntype Arguments []string\n\n// Matches performs an case-insensitive, out-of-order check that the items\n// provided exist and equal all of the args in arguments.\n// Note:\n//   - Providing a list that includes duplicate string-case items will return not\n//     matched.\nfunc (r Arguments) Matches(items ...string) bool {\n\tif len(r) != len(items) {\n\t\treturn false\n\t}\n\n\tfound := make(map[string]bool)\n\tfor _, item := range items {\n\t\tif !StringInSlice(item, r) {\n\t\t\treturn false\n\t\t}\n\t\tfound[item] = true\n\t}\n\n\treturn len(found) == len(r)\n}\n\n// Has checks, in a case-insensitive manner, that all of the items\n// provided exists in arguments.\nfunc (r Arguments) Has(items ...string) bool {\n\tfor _, item := range items {\n\t\tif !StringInSlice(item, r) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n// HasOneOf checks, in a case-insensitive manner, that one of the items\n// provided exists in arguments.\nfunc (r Arguments) HasOneOf(items ...string) bool {\n\tfor _, item := range items {\n\t\tif StringInSlice(item, r) {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// Deprecated: Use ExactOne, Matches or MatchesExact\nfunc (r Arguments) Exact(name string) bool {\n\treturn name == strings.Join(r, \" \")\n}\n\n// ExactOne checks, by string case, that a single argument equals the provided\n// string.\nfunc (r Arguments) ExactOne(name string) bool {\n\treturn len(r) == 1 && r[0] == name\n}\n\n// MatchesExact checks, by order and string case, that the items provided equal\n// those in arguments.\nfunc (r Arguments) MatchesExact(items ...string) bool {\n\tif len(r) != len(items) {\n\t\treturn false\n\t}\n\n\tfor i, item := range items {\n\t\tif item != r[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n"
        },
        {
          "name": "arguments_test.go",
          "type": "blob",
          "size": 5.06640625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\ntype exactTestCase struct {\n\targs   Arguments\n\texact  string\n\texpect bool\n}\n\nvar exactTests = []exactTestCase{\n\t{\n\t\targs:   Arguments{\"foo\"},\n\t\texact:  \"foo\",\n\t\texpect: true,\n\t},\n\t{\n\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\texact:  \"foo\",\n\t\texpect: false,\n\t},\n\t{\n\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\texact:  \"bar\",\n\t\texpect: false,\n\t},\n\t{\n\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\texact:  \"baz\",\n\t\texpect: false,\n\t},\n\t{\n\t\targs:   Arguments{},\n\t\texact:  \"baz\",\n\t\texpect: false,\n\t},\n}\n\nfunc TestArgumentsExact(t *testing.T) {\n\ttestCases := append(exactTests, []exactTestCase{\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\texact:  \"foo bar\",\n\t\t\texpect: true,\n\t\t},\n\t}...)\n\n\tfor k, c := range testCases {\n\t\tassert.Equal(t, c.expect, c.args.Exact(c.exact), \"%d\", k)\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n\nfunc TestArgumentsExactOne(t *testing.T) {\n\ttestCases := append(exactTests, []exactTestCase{\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\texact:  \"foo bar\",\n\t\t\texpect: false,\n\t\t},\n\t}...)\n\n\tfor k, c := range testCases {\n\t\tassert.Equal(t, c.expect, c.args.ExactOne(c.exact), \"%d\", k)\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n\nfunc TestArgumentsHas(t *testing.T) {\n\tfor k, c := range []struct {\n\t\targs   Arguments\n\t\thas    []string\n\t\texpect bool\n\t}{\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\thas:    []string{\"foo\", \"bar\"},\n\t\t\texpect: true,\n\t\t},\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\thas:    []string{\"bar\", \"foo\"},\n\t\t\texpect: true,\n\t\t},\n\t\t{\n\t\t\targs:   Arguments{\"bar\", \"foo\"},\n\t\t\thas:    []string{\"foo\"},\n\t\t\texpect: true,\n\t\t},\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\thas:    []string{\"bar\", \"foo\", \"baz\"},\n\t\t\texpect: false,\n\t\t},\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\thas:    []string{\"foo\"},\n\t\t\texpect: true,\n\t\t},\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\thas:    []string{\"bar\"},\n\t\t\texpect: true,\n\t\t},\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\thas:    []string{\"baz\"},\n\t\t\texpect: false,\n\t\t},\n\t\t{\n\t\t\targs:   Arguments{},\n\t\t\thas:    []string{\"baz\"},\n\t\t\texpect: false,\n\t\t},\n\t} {\n\t\tassert.Equal(t, c.expect, c.args.Has(c.has...), \"%d\", k)\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n\ntype matchesTestCase struct {\n\targs   Arguments\n\tis     []string\n\texpect bool\n}\n\nvar matchesTests = []matchesTestCase{\n\t{\n\t\targs:   Arguments{},\n\t\tis:     []string{},\n\t\texpect: true,\n\t},\n\t{\n\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\tis:     []string{\"foo\", \"bar\"},\n\t\texpect: true,\n\t},\n\t{\n\t\targs:   Arguments{\"Foo\", \"Bar\"},\n\t\tis:     []string{\"Foo\", \"Bar\"},\n\t\texpect: true,\n\t},\n\t{\n\t\targs:   Arguments{\"foo\", \"foo\"},\n\t\tis:     []string{\"foo\"},\n\t\texpect: false,\n\t},\n\t{\n\t\targs:   Arguments{\"foo\", \"foo\"},\n\t\tis:     []string{\"bar\", \"foo\"},\n\t\texpect: false,\n\t},\n\t{\n\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\tis:     []string{\"bar\", \"foo\", \"baz\"},\n\t\texpect: false,\n\t},\n\t{\n\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\tis:     []string{\"foo\"},\n\t\texpect: false,\n\t},\n\t{\n\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\tis:     []string{\"bar\", \"bar\"},\n\t\texpect: false,\n\t},\n\t{\n\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\tis:     []string{\"baz\"},\n\t\texpect: false,\n\t},\n\t{\n\t\targs:   Arguments{},\n\t\tis:     []string{\"baz\"},\n\t\texpect: false,\n\t},\n}\n\nfunc TestArgumentsMatchesExact(t *testing.T) {\n\ttestCases := append(matchesTests, []matchesTestCase{\n\t\t// should fail if items are out of order\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\tis:     []string{\"bar\", \"foo\"},\n\t\t\texpect: false,\n\t\t},\n\t\t// should fail due to case-sensitivity.\n\t\t{\n\t\t\targs:   Arguments{\"fOo\", \"bar\"},\n\t\t\tis:     []string{\"foo\", \"BaR\"},\n\t\t\texpect: false,\n\t\t},\n\t\t// duplicate items should return allowed.\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"foo\"},\n\t\t\tis:     []string{\"foo\", \"foo\"},\n\t\t\texpect: true,\n\t\t},\n\t}...)\n\tfor k, c := range testCases {\n\t\tassert.Equal(t, c.expect, c.args.MatchesExact(c.is...), \"%d\", k)\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n\nfunc TestArgumentsMatches(t *testing.T) {\n\ttestCases := append(matchesTests, []matchesTestCase{\n\t\t// should match if items are out of order.\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\tis:     []string{\"bar\", \"foo\"},\n\t\t\texpect: true,\n\t\t},\n\t\t// should allow case-insensitive matching.\n\t\t{\n\t\t\targs:   Arguments{\"fOo\", \"bar\"},\n\t\t\tis:     []string{\"foo\", \"BaR\"},\n\t\t\texpect: true,\n\t\t},\n\t\t// should return non-matching if duplicate items exist.\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"bar\"},\n\t\t\tis:     []string{\"FOO\", \"FOO\", \"bar\"},\n\t\t\texpect: false,\n\t\t},\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"foo\"},\n\t\t\tis:     []string{\"foo\", \"foo\"},\n\t\t\texpect: false,\n\t\t},\n\t}...)\n\tfor k, c := range testCases {\n\t\tassert.Equal(t, c.expect, c.args.Matches(c.is...), \"%d\", k)\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n\nfunc TestArgumentsOneOf(t *testing.T) {\n\tfor k, c := range []struct {\n\t\targs   Arguments\n\t\toneOf  []string\n\t\texpect bool\n\t}{\n\t\t{\n\t\t\targs:   Arguments{\"baz\", \"bar\"},\n\t\t\toneOf:  []string{\"foo\", \"bar\"},\n\t\t\texpect: true,\n\t\t},\n\t\t{\n\t\t\targs:   Arguments{\"foo\", \"baz\"},\n\t\t\toneOf:  []string{\"foo\", \"bar\"},\n\t\t\texpect: true,\n\t\t},\n\t\t{\n\t\t\targs:   Arguments{\"baz\"},\n\t\t\toneOf:  []string{\"foo\", \"bar\"},\n\t\t\texpect: false,\n\t\t},\n\t} {\n\t\tassert.Equal(t, c.expect, c.args.HasOneOf(c.oneOf...), \"%d\", k)\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n"
        },
        {
          "name": "audience_strategy.go",
          "type": "blob",
          "size": 3.12109375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"github.com/ory/x/errorsx\"\n)\n\ntype AudienceMatchingStrategy func(haystack []string, needle []string) error\n\nfunc DefaultAudienceMatchingStrategy(haystack []string, needle []string) error {\n\tif len(needle) == 0 {\n\t\treturn nil\n\t}\n\n\tfor _, n := range needle {\n\t\tnu, err := url.Parse(n)\n\t\tif err != nil {\n\t\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHintf(\"Unable to parse requested audience '%s'.\", n).WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\n\t\tvar found bool\n\t\tfor _, h := range haystack {\n\t\t\thu, err := url.Parse(h)\n\t\t\tif err != nil {\n\t\t\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHintf(\"Unable to parse whitelisted audience '%s'.\", h).WithWrap(err).WithDebug(err.Error()))\n\t\t\t}\n\n\t\t\tallowedPath := strings.TrimRight(hu.Path, \"/\")\n\t\t\tif nu.Scheme == hu.Scheme &&\n\t\t\t\tnu.Host == hu.Host &&\n\t\t\t\t(nu.Path == hu.Path ||\n\t\t\t\t\tnu.Path == allowedPath ||\n\t\t\t\t\tlen(nu.Path) > len(allowedPath) && strings.TrimRight(nu.Path[:len(allowedPath)+1], \"/\")+\"/\" == allowedPath+\"/\") {\n\t\t\t\tfound = true\n\t\t\t}\n\t\t}\n\n\t\tif !found {\n\t\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHintf(\"Requested audience '%s' has not been whitelisted by the OAuth 2.0 Client.\", n))\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// ExactAudienceMatchingStrategy does not assume that audiences are URIs, but compares strings as-is and\n// does matching with exact string comparison. It requires that all strings in \"needle\" are present in\n// \"haystack\". Use this strategy when your audience values are not URIs (e.g., you use client IDs for\n// audience and they are UUIDs or random strings).\nfunc ExactAudienceMatchingStrategy(haystack []string, needle []string) error {\n\tif len(needle) == 0 {\n\t\treturn nil\n\t}\n\n\tfor _, n := range needle {\n\t\tvar found bool\n\t\tfor _, h := range haystack {\n\t\t\tif n == h {\n\t\t\t\tfound = true\n\t\t\t}\n\t\t}\n\n\t\tif !found {\n\t\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHintf(`Requested audience \"%s\" has not been whitelisted by the OAuth 2.0 Client.`, n))\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// GetAudiences allows audiences to be provided as repeated \"audience\" form parameter,\n// or as a space-delimited \"audience\" form parameter if it is not repeated.\n// RFC 8693 in section 2.1 specifies that multiple audience values should be multiple\n// query parameters, while RFC 6749 says that that request parameter must not be included\n// more than once (and thus why we use space-delimited value). This function tries to satisfy both.\n// If \"audience\" form parameter is repeated, we do not split the value by space.\nfunc GetAudiences(form url.Values) []string {\n\taudiences := form[\"audience\"]\n\tif len(audiences) > 1 {\n\t\treturn RemoveEmpty(audiences)\n\t} else if len(audiences) == 1 {\n\t\treturn RemoveEmpty(strings.Split(audiences[0], \" \"))\n\t} else {\n\t\treturn []string{}\n\t}\n}\n\nfunc (f *Fosite) validateAuthorizeAudience(ctx context.Context, r *http.Request, request *AuthorizeRequest) error {\n\taudience := GetAudiences(request.Form)\n\n\tif err := f.Config.GetAudienceStrategy(ctx)(request.Client.GetAudience(), audience); err != nil {\n\t\treturn err\n\t}\n\n\trequest.SetRequestedAudience(audience)\n\treturn nil\n}\n"
        },
        {
          "name": "audience_strategy_test.go",
          "type": "blob",
          "size": 5.560546875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestDefaultAudienceMatchingStrategy(t *testing.T) {\n\tfor k, tc := range []struct {\n\t\th   []string\n\t\tn   []string\n\t\terr bool\n\t}{\n\t\t{\n\t\t\th:   []string{},\n\t\t\tn:   []string{},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"http://foo/bar\"},\n\t\t\tn:   []string{},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{},\n\t\t\tn:   []string{\"http://foo/bar\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users/\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users/\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users/\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users/\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users/1234\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users\", \"https://cloud.ory.sh/api/users/\", \"https://cloud.ory.sh/api/users/1234\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\", \"https://cloud.ory.sh/api/tenants\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users\", \"https://cloud.ory.sh/api/users/\", \"https://cloud.ory.sh/api/users/1234\", \"https://cloud.ory.sh/api/tenants\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users1234\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"http://cloud.ory.sh/api/users\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh:8000/api/users\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.xyz/api/users\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"foobar\"},\n\t\t\tn:   []string{\"foobar\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"foo bar\"},\n\t\t\tn:   []string{\"foo bar\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"foobar\"},\n\t\t\tn:   []string{\"foobar\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"zoo\", \"bar\"},\n\t\t\tn:   []string{\"zoo\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"zoo\"},\n\t\t\tn:   []string{\"zoo\", \"bar\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"foobar\"},\n\t\t\tn:   []string{\"foobar/\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"foobar/\"},\n\t\t\tn:   []string{\"foobar\"},\n\t\t\terr: false,\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\terr := DefaultAudienceMatchingStrategy(tc.h, tc.n)\n\t\t\tif tc.err {\n\t\t\t\trequire.Error(t, err)\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestExactAudienceMatchingStrategy(t *testing.T) {\n\tfor k, tc := range []struct {\n\t\th   []string\n\t\tn   []string\n\t\terr bool\n\t}{\n\t\t{\n\t\t\th:   []string{},\n\t\t\tn:   []string{},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"http://foo/bar\"},\n\t\t\tn:   []string{},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{},\n\t\t\tn:   []string{\"http://foo/bar\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users/\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users/\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users/\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users/\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users/1234\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users\", \"https://cloud.ory.sh/api/users/\", \"https://cloud.ory.sh/api/users/1234\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\", \"https://cloud.ory.sh/api/tenants\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users\", \"https://cloud.ory.sh/api/users/\", \"https://cloud.ory.sh/api/users/1234\", \"https://cloud.ory.sh/api/tenants\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh/api/users1234\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"http://cloud.ory.sh/api/users\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.sh:8000/api/users\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"https://cloud.ory.sh/api/users\"},\n\t\t\tn:   []string{\"https://cloud.ory.xyz/api/users\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"foobar\"},\n\t\t\tn:   []string{\"foobar\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"foo bar\"},\n\t\t\tn:   []string{\"foo bar\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"foobar\"},\n\t\t\tn:   []string{\"foobar\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"zoo\", \"bar\"},\n\t\t\tn:   []string{\"zoo\"},\n\t\t\terr: false,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"zoo\"},\n\t\t\tn:   []string{\"zoo\", \"bar\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"foobar\"},\n\t\t\tn:   []string{\"foobar/\"},\n\t\t\terr: true,\n\t\t},\n\t\t{\n\t\t\th:   []string{\"foobar/\"},\n\t\t\tn:   []string{\"foobar\"},\n\t\t\terr: true,\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\terr := ExactAudienceMatchingStrategy(tc.h, tc.n)\n\t\t\tif tc.err {\n\t\t\t\trequire.Error(t, err)\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "authorize_error.go",
          "type": "blob",
          "size": 2.1162109375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc (f *Fosite) WriteAuthorizeError(ctx context.Context, rw http.ResponseWriter, ar AuthorizeRequester, err error) {\n\trw.Header().Set(\"Cache-Control\", \"no-store\")\n\trw.Header().Set(\"Pragma\", \"no-cache\")\n\n\tif f.ResponseModeHandler(ctx).ResponseModes().Has(ar.GetResponseMode()) {\n\t\tf.ResponseModeHandler(ctx).WriteAuthorizeError(ctx, rw, ar, err)\n\t\treturn\n\t}\n\n\trfcerr := ErrorToRFC6749Error(err).WithLegacyFormat(f.Config.GetUseLegacyErrorFormat(ctx)).WithExposeDebug(f.Config.GetSendDebugMessagesToClients(ctx)).WithLocalizer(f.Config.GetMessageCatalog(ctx), getLangFromRequester(ar))\n\tif !ar.IsRedirectURIValid() {\n\t\trw.Header().Set(\"Content-Type\", \"application/json;charset=UTF-8\")\n\n\t\tjs, err := json.Marshal(rfcerr)\n\t\tif err != nil {\n\t\t\tif f.Config.GetSendDebugMessagesToClients(ctx) {\n\t\t\t\terrorMessage := EscapeJSONString(err.Error())\n\t\t\t\thttp.Error(rw, fmt.Sprintf(`{\"error\":\"server_error\",\"error_description\":\"%s\"}`, errorMessage), http.StatusInternalServerError)\n\t\t\t} else {\n\t\t\t\thttp.Error(rw, `{\"error\":\"server_error\"}`, http.StatusInternalServerError)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\trw.WriteHeader(rfcerr.CodeField)\n\t\t_, _ = rw.Write(js)\n\t\treturn\n\t}\n\n\tredirectURI := ar.GetRedirectURI()\n\n\t// The endpoint URI MUST NOT include a fragment component.\n\tredirectURI.Fragment = \"\"\n\n\terrors := rfcerr.ToValues()\n\terrors.Set(\"state\", ar.GetState())\n\n\tvar redirectURIString string\n\tif ar.GetResponseMode() == ResponseModeFormPost {\n\t\trw.Header().Set(\"Content-Type\", \"text/html;charset=UTF-8\")\n\t\tWriteAuthorizeFormPostResponse(redirectURI.String(), errors, GetPostFormHTMLTemplate(ctx, f), rw)\n\t\treturn\n\t} else if ar.GetResponseMode() == ResponseModeFragment {\n\t\tredirectURIString = redirectURI.String() + \"#\" + errors.Encode()\n\t} else {\n\t\tfor key, values := range redirectURI.Query() {\n\t\t\tfor _, value := range values {\n\t\t\t\terrors.Add(key, value)\n\t\t\t}\n\t\t}\n\t\tredirectURI.RawQuery = errors.Encode()\n\t\tredirectURIString = redirectURI.String()\n\t}\n\n\trw.Header().Set(\"Location\", redirectURIString)\n\trw.WriteHeader(http.StatusSeeOther)\n}\n"
        },
        {
          "name": "authorize_error_test.go",
          "type": "blob",
          "size": 24.244140625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/stretchr/testify/assert\"\n\n\t. \"github.com/ory/fosite\"\n\t. \"github.com/ory/fosite/internal\"\n)\n\n// Test for\n//   - https://tools.ietf.org/html/rfc6749#section-4.1.2.1\n//     If the request fails due to a missing, invalid, or mismatching\n//     redirection URI, or if the client identifier is missing or invalid,\n//     the authorization server SHOULD inform the resource owner of the\n//     error and MUST NOT automatically redirect the user-agent to the\n//     invalid redirection URI.\n//   - https://tools.ietf.org/html/rfc6749#section-3.1.2\n//     The redirection endpoint URI MUST be an absolute URI as defined by\n//     [RFC3986] Section 4.3.  The endpoint URI MAY include an\n//     \"application/x-www-form-urlencoded\" formatted (per Appendix B) query\n//     component ([RFC3986] Section 3.4), which MUST be retained when adding\n//     additional query parameters.  The endpoint URI MUST NOT include a\n//     fragment component.\nfunc TestWriteAuthorizeError(t *testing.T) {\n\tvar urls = []string{\n\t\t\"https://foobar.com/\",\n\t\t\"https://foobar.com/?foo=bar\",\n\t}\n\tvar purls = []*url.URL{}\n\tfor _, u := range urls {\n\t\tpurl, _ := url.Parse(u)\n\t\tpurls = append(purls, purl)\n\t}\n\n\theader := http.Header{}\n\tfor k, c := range []struct {\n\t\terr                  *RFC6749Error\n\t\tdebug                bool\n\t\tdoNotUseLegacyFormat bool\n\t\tmock                 func(*MockResponseWriter, *MockAuthorizeRequester)\n\t\tcheckHeader          func(*testing.T, int)\n\t}{\n\t\t// 0\n\t\t{\n\t\t\terr: ErrInvalidGrant,\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(false)\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeDefault)\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusBadRequest)\n\t\t\t\trw.EXPECT().Write(gomock.Any())\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\tassert.Equal(t, \"application/json;charset=UTF-8\", header.Get(\"Content-Type\"))\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 1\n\t\t{\n\t\t\tdebug: true,\n\t\t\terr:   ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[0]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeQuery).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?error=invalid_request&error_debug=with-debug&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b)\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 2\n\t\t{\n\t\t\tdebug:                true,\n\t\t\tdoNotUseLegacyFormat: true,\n\t\t\terr:                  ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[0]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeQuery).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?error=invalid_request&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.+Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.+with-debug&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b)\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 3\n\t\t{\n\t\t\tdoNotUseLegacyFormat: true,\n\t\t\terr:                  ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[0]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeQuery).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?error=invalid_request&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.+Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b)\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 4\n\t\t{\n\t\t\terr: ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[0]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeDefault).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?error=invalid_request&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b)\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 5\n\t\t{\n\t\t\terr: ErrInvalidRequest,\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[1]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeQuery).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?error=invalid_request&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&foo=bar&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b)\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 6\n\t\t{\n\t\t\terr: ErrUnsupportedGrantType,\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[1]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"foobar\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?foo=bar#error=unsupported_grant_type&error_description=The+authorization+grant+type+is+not+supported+by+the+authorization+server.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b)\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 7\n\t\t{\n\t\t\terr: ErrInvalidRequest,\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[0]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/#error=invalid_request&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b, \"\\n\\t%s\\n\\t%s\", header.Get(\"Location\"), a.String())\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 8\n\t\t{\n\t\t\terr: ErrInvalidRequest,\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[1]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?foo=bar#error=invalid_request&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b, \"\\n\\t%s\\n\\t%s\", header.Get(\"Location\"), a.String())\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 9\n\t\t{\n\t\t\terr: ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[0]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\", \"token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/#error=invalid_request&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b, \"\\n\\t%s\\n\\t%s\", header.Get(\"Location\"), a.String())\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 10\n\t\t{\n\t\t\terr:   ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tdebug: true,\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[0]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\", \"token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/#error=invalid_request&error_debug=with-debug&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b, \"\\n\\t%s\\n\\t%s\", header.Get(\"Location\"), a.String())\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 11\n\t\t{\n\t\t\terr:                  ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tdebug:                true,\n\t\t\tdoNotUseLegacyFormat: true,\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[0]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\", \"token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/#error=invalid_request&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.+Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.+with-debug&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.NotContains(t, header.Get(\"Location\"), \"error_hint\")\n\t\t\t\tassert.NotContains(t, header.Get(\"Location\"), \"error_debug\")\n\t\t\t\tassert.Equal(t, a, b, \"\\n\\t%s\\n\\t%s\", header.Get(\"Location\"), a.String())\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 12\n\t\t{\n\t\t\terr:                  ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tdoNotUseLegacyFormat: true,\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[0]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\", \"token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/#error=invalid_request&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.+Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.NotContains(t, header.Get(\"Location\"), \"error_hint\")\n\t\t\t\tassert.NotContains(t, header.Get(\"Location\"), \"error_debug\")\n\t\t\t\tassert.NotContains(t, header.Get(\"Location\"), \"with-debug\")\n\t\t\t\tassert.Equal(t, a, b, \"\\n\\t%s\\n\\t%s\", header.Get(\"Location\"), a.String())\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 13\n\t\t{\n\t\t\terr: ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[1]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\", \"token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?foo=bar#error=invalid_request&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b, \"\\n\\t%s\\n\\t%s\", header.Get(\"Location\"), a.String())\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 14\n\t\t{\n\t\t\tdebug: true,\n\t\t\terr:   ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[1]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"code\", \"token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?foo=bar#error=invalid_request&error_debug=with-debug&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b, \"\\n\\t%s\\n\\t%s\", header.Get(\"Location\"), a.String())\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 15\n\t\t{\n\t\t\tdebug: true,\n\t\t\terr:   ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[1]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"id_token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?foo=bar#error=invalid_request&error_debug=with-debug&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b, \"\\n\\t%s\\n\\t%s\", header.Get(\"Location\"), a.String())\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 16\n\t\t{\n\t\t\tdebug: true,\n\t\t\terr:   ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[1]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFragment).AnyTimes()\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\ta, _ := url.Parse(\"https://foobar.com/?foo=bar#error=invalid_request&error_debug=with-debug&error_description=The+request+is+missing+a+required+parameter%2C+includes+an+invalid+parameter+value%2C+includes+a+parameter+more+than+once%2C+or+is+otherwise+malformed.&error_hint=Make+sure+that+the+various+parameters+are+correct%2C+be+aware+of+case+sensitivity+and+trim+your+parameters.+Make+sure+that+the+client+you+are+using+has+exactly+whitelisted+the+redirect_uri+you+specified.&state=foostate\")\n\t\t\t\tb, _ := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Equal(t, a, b, \"\\n\\t%s\\n\\t%s\", header.Get(\"Location\"), a.String())\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t},\n\t\t},\n\t\t// 17\n\t\t{\n\t\t\tdebug: true,\n\t\t\terr:   ErrInvalidRequest.WithDebug(\"with-debug\"),\n\t\t\tmock: func(rw *MockResponseWriter, req *MockAuthorizeRequester) {\n\t\t\t\treq.EXPECT().IsRedirectURIValid().Return(true)\n\t\t\t\treq.EXPECT().GetRedirectURI().Return(copyUrl(purls[1]))\n\t\t\t\treq.EXPECT().GetState().Return(\"foostate\")\n\t\t\t\treq.EXPECT().GetResponseTypes().AnyTimes().Return(Arguments([]string{\"token\"}))\n\t\t\t\treq.EXPECT().GetResponseMode().Return(ResponseModeFormPost).Times(2)\n\t\t\t\trw.EXPECT().Header().Times(3).Return(header)\n\t\t\t\trw.EXPECT().Write(gomock.Any()).AnyTimes()\n\t\t\t},\n\t\t\tcheckHeader: func(t *testing.T, k int) {\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t\tassert.Equal(t, \"text/html;charset=UTF-8\", header.Get(\"Content-Type\"))\n\t\t\t},\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\toauth2 := &Fosite{\n\t\t\t\tConfig: &Config{\n\t\t\t\t\tSendDebugMessagesToClients: c.debug,\n\t\t\t\t\tUseLegacyErrorFormat:       !c.doNotUseLegacyFormat,\n\t\t\t\t},\n\t\t\t}\n\n\t\t\tctrl := gomock.NewController(t)\n\t\t\tdefer ctrl.Finish()\n\t\t\trw := NewMockResponseWriter(ctrl)\n\t\t\treq := NewMockAuthorizeRequester(ctrl)\n\n\t\t\tc.mock(rw, req)\n\t\t\toauth2.WriteAuthorizeError(context.Background(), rw, req, c.err)\n\t\t\tc.checkHeader(t, k)\n\t\t\theader = http.Header{}\n\t\t})\n\t}\n}\n\nfunc copyUrl(u *url.URL) *url.URL {\n\tu2, _ := url.Parse(u.String())\n\treturn u2\n}\n"
        },
        {
          "name": "authorize_helper.go",
          "type": "blob",
          "size": 8.0009765625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"html/template\"\n\t\"io\"\n\t\"net\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"github.com/ory/x/errorsx\"\n\n\t\"github.com/asaskevich/govalidator\"\n)\n\nvar DefaultFormPostTemplate = template.Must(template.New(\"form_post\").Parse(`<html>\n   <head>\n      <title>Submit This Form</title>\n   </head>\n   <body onload=\"javascript:document.forms[0].submit()\">\n      <form method=\"post\" action=\"{{ .RedirURL }}\">\n         {{ range $key,$value := .Parameters }}\n            {{ range $parameter:= $value}}\n\t\t      <input type=\"hidden\" name=\"{{$key}}\" value=\"{{$parameter}}\"/>\n            {{end}}\n         {{ end }}\n      </form>\n   </body>\n</html>`))\n\n// MatchRedirectURIWithClientRedirectURIs if the given uri is a registered redirect uri. Does not perform\n// uri validation.\n//\n// Considered specifications\n//\n//   - https://tools.ietf.org/html/rfc6749#section-3.1.2.3\n//     If multiple redirection URIs have been registered, if only part of\n//     the redirection URI has been registered, or if no redirection URI has\n//     been registered, the client MUST include a redirection URI with the\n//     authorization request using the \"redirect_uri\" request parameter.\n//\n//     When a redirection URI is included in an authorization request, the\n//     authorization server MUST compare and match the value received\n//     against at least one of the registered redirection URIs (or URI\n//     components) as defined in [RFC3986] Section 6, if any redirection\n//     URIs were registered.  If the client registration included the full\n//     redirection URI, the authorization server MUST compare the two URIs\n//     using simple string comparison as defined in [RFC3986] Section 6.2.1.\n//\n// * https://tools.ietf.org/html/rfc6819#section-4.4.1.7\n//   - The authorization server may also enforce the usage and validation\n//     of pre-registered redirect URIs (see Section 5.2.3.5).  This will\n//     allow for early recognition of authorization \"code\" disclosure to\n//     counterfeit clients.\n//   - The attacker will need to use another redirect URI for its\n//     authorization process rather than the target web site because it\n//     needs to intercept the flow.  So, if the authorization server\n//     associates the authorization \"code\" with the redirect URI of a\n//     particular end-user authorization and validates this redirect URI\n//     with the redirect URI passed to the token's endpoint, such an\n//     attack is detected (see Section 5.2.4.5).\nfunc MatchRedirectURIWithClientRedirectURIs(rawurl string, client Client) (*url.URL, error) {\n\tif rawurl == \"\" && len(client.GetRedirectURIs()) == 1 {\n\t\tif redirectURIFromClient, err := url.Parse(client.GetRedirectURIs()[0]); err == nil && IsValidRedirectURI(redirectURIFromClient) {\n\t\t\t// If no redirect_uri was given and the client has exactly one valid redirect_uri registered, use that instead\n\t\t\treturn redirectURIFromClient, nil\n\t\t}\n\t} else if redirectTo, ok := isMatchingRedirectURI(rawurl, client.GetRedirectURIs()); rawurl != \"\" && ok {\n\t\t// If a redirect_uri was given and the clients knows it (simple string comparison!)\n\t\t// return it.\n\t\tif parsed, err := url.Parse(redirectTo); err == nil && IsValidRedirectURI(parsed) {\n\t\t\t// If no redirect_uri was given and the client has exactly one valid redirect_uri registered, use that instead\n\t\t\treturn parsed, nil\n\t\t}\n\t}\n\n\treturn nil, errorsx.WithStack(ErrInvalidRequest.WithHint(\"The 'redirect_uri' parameter does not match any of the OAuth 2.0 Client's pre-registered redirect urls.\"))\n}\n\n// Match a requested  redirect URI against a pool of registered client URIs\n//\n// Test a given redirect URI against a pool of URIs provided by a registered client.\n// If the OAuth 2.0 Client has loopback URIs registered either an IPv4 URI http://127.0.0.1 or\n// an IPv6 URI http://[::1] a client is allowed to request a dynamic port and the server MUST accept\n// it as a valid redirection uri.\n//\n// https://tools.ietf.org/html/rfc8252#section-7.3\n// Native apps that are able to open a port on the loopback network\n// interface without needing special permissions (typically, those on\n// desktop operating systems) can use the loopback interface to receive\n// the OAuth redirect.\n//\n// Loopback redirect URIs use the \"http\" scheme and are constructed with\n// the loopback IP literal and whatever port the client is listening on.\nfunc isMatchingRedirectURI(uri string, haystack []string) (string, bool) {\n\trequested, err := url.Parse(uri)\n\tif err != nil {\n\t\treturn \"\", false\n\t}\n\n\tfor _, b := range haystack {\n\t\tif b == uri {\n\t\t\treturn b, true\n\t\t} else if isMatchingAsLoopback(requested, b) {\n\t\t\t// We have to return the requested URL here because otherwise the port might get lost (see isMatchingAsLoopback)\n\t\t\t// description.\n\t\t\treturn uri, true\n\t\t}\n\t}\n\treturn \"\", false\n}\n\nfunc isMatchingAsLoopback(requested *url.URL, registeredURI string) bool {\n\tregistered, err := url.Parse(registeredURI)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\t// Native apps that are able to open a port on the loopback network\n\t// interface without needing special permissions (typically, those on\n\t// desktop operating systems) can use the loopback interface to receive\n\t// the OAuth redirect.\n\t//\n\t// Loopback redirect URIs use the \"http\" scheme and are constructed with\n\t// the loopback IP literal and whatever port the client is listening on.\n\t//\n\t// Source: https://tools.ietf.org/html/rfc8252#section-7.3\n\tif requested.Scheme == \"http\" &&\n\t\tisLoopbackAddress(requested.Hostname()) &&\n\t\tregistered.Hostname() == requested.Hostname() &&\n\t\t// The port is skipped here - see codedoc above!\n\t\tregistered.Path == requested.Path &&\n\t\tregistered.RawQuery == requested.RawQuery {\n\t\treturn true\n\t}\n\n\treturn false\n}\n\n// Check if address is either an IPv4 loopback or an IPv6 loopback.\nfunc isLoopbackAddress(hostname string) bool {\n\treturn net.ParseIP(hostname).IsLoopback()\n}\n\n// IsValidRedirectURI validates a redirect_uri as specified in:\n//\n// * https://tools.ietf.org/html/rfc6749#section-3.1.2\n//   - The redirection endpoint URI MUST be an absolute URI as defined by [RFC3986] Section 4.3.\n//   - The endpoint URI MUST NOT include a fragment component.\n//   - https://tools.ietf.org/html/rfc3986#section-4.3\n//     absolute-URI  = scheme \":\" hier-part [ \"?\" query ]\n//   - https://tools.ietf.org/html/rfc6819#section-5.1.1\nfunc IsValidRedirectURI(redirectURI *url.URL) bool {\n\t// We need to explicitly check for a scheme\n\tif !govalidator.IsRequestURL(redirectURI.String()) {\n\t\treturn false\n\t}\n\n\tif redirectURI.Fragment != \"\" {\n\t\t// \"The endpoint URI MUST NOT include a fragment component.\"\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunc IsRedirectURISecure(ctx context.Context, redirectURI *url.URL) bool {\n\treturn !(redirectURI.Scheme == \"http\" && !IsLocalhost(redirectURI))\n}\n\n// IsRedirectURISecureStrict is stricter than IsRedirectURISecure and it does not allow custom-scheme\n// URLs because they can be hijacked for native apps. Use claimed HTTPS redirects instead.\n// See discussion in https://github.com/ory/fosite/pull/489.\nfunc IsRedirectURISecureStrict(ctx context.Context, redirectURI *url.URL) bool {\n\treturn redirectURI.Scheme == \"https\" || (redirectURI.Scheme == \"http\" && IsLocalhost(redirectURI))\n}\n\nfunc IsLocalhost(redirectURI *url.URL) bool {\n\thn := redirectURI.Hostname()\n\treturn strings.HasSuffix(hn, \".localhost\") || isLoopbackAddress(hn) || hn == \"localhost\"\n}\n\nfunc WriteAuthorizeFormPostResponse(redirectURL string, parameters url.Values, template *template.Template, rw io.Writer) {\n\t_ = template.Execute(rw, struct {\n\t\tRedirURL   string\n\t\tParameters url.Values\n\t}{\n\t\tRedirURL:   redirectURL,\n\t\tParameters: parameters,\n\t})\n}\n\n// Deprecated: Do not use.\nfunc URLSetFragment(source *url.URL, fragment url.Values) {\n\tvar f string\n\tfor k, v := range fragment {\n\t\tfor _, vv := range v {\n\t\t\tif len(f) != 0 {\n\t\t\t\tf += fmt.Sprintf(\"&%s=%s\", k, vv)\n\t\t\t} else {\n\t\t\t\tf += fmt.Sprintf(\"%s=%s\", k, vv)\n\t\t\t}\n\t\t}\n\t}\n\tsource.Fragment = f\n}\n\nfunc GetPostFormHTMLTemplate(ctx context.Context, f *Fosite) *template.Template {\n\tif t := f.Config.GetFormPostHTMLTemplate(ctx); t != nil {\n\t\treturn t\n\t}\n\treturn DefaultFormPostTemplate\n}\n"
        },
        {
          "name": "authorize_helper_test.go",
          "type": "blob",
          "size": 11.2041015625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"io\"\n\t\"net/url\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/ory/fosite\"\n\t\"github.com/ory/fosite/internal\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestIsLocalhost(t *testing.T) {\n\tfor k, c := range []struct {\n\t\texpect bool\n\t\trawurl string\n\t}{\n\t\t{expect: false, rawurl: \"https://foo.bar\"},\n\t\t{expect: true, rawurl: \"https://localhost\"},\n\t\t{expect: true, rawurl: \"https://localhost:1234\"},\n\t\t{expect: true, rawurl: \"https://127.0.0.1:1234\"},\n\t\t{expect: true, rawurl: \"https://127.0.0.1\"},\n\t\t{expect: true, rawurl: \"https://test.localhost:1234\"},\n\t\t{expect: true, rawurl: \"https://test.localhost\"},\n\t} {\n\t\tu, _ := url.Parse(c.rawurl)\n\t\tassert.Equal(t, c.expect, fosite.IsLocalhost(u), \"case %d\", k)\n\t}\n}\n\n// rfc6749 10.6.\n// Authorization Code Redirection URI Manipulation\n// The authorization server\tMUST require public clients and SHOULD require confidential clients\n// to register their redirection URIs.  If a redirection URI is provided\n// in the request, the authorization server MUST validate it against the\n// registered value.\n//\n// rfc6819 4.4.1.7.\n// Threat: Authorization \"code\" Leakage through Counterfeit Client\n// The authorization server may also enforce the usage and validation\n// of pre-registered redirect URIs (see Section 5.2.3.5).\nfunc TestDoesClientWhiteListRedirect(t *testing.T) {\n\tfor k, c := range []struct {\n\t\tclient   fosite.Client\n\t\turl      string\n\t\tisError  bool\n\t\texpected string\n\t}{\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"\"}},\n\t\t\turl:     \"https://foo.com/cb\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"wta://auth\"}},\n\t\t\turl:      \"wta://auth\",\n\t\t\texpected: \"wta://auth\",\n\t\t\tisError:  false,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"wta:///auth\"}},\n\t\t\turl:      \"wta:///auth\",\n\t\t\texpected: \"wta:///auth\",\n\t\t\tisError:  false,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"wta://foo/auth\"}},\n\t\t\turl:      \"wta://foo/auth\",\n\t\t\texpected: \"wta://foo/auth\",\n\t\t\tisError:  false,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"https://bar.com/cb\"}},\n\t\t\turl:     \"https://foo.com/cb\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"https://bar.com/cb\"}},\n\t\t\turl:      \"\",\n\t\t\tisError:  false,\n\t\t\texpected: \"https://bar.com/cb\",\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"\"}},\n\t\t\turl:     \"\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"https://bar.com/cb\"}},\n\t\t\turl:      \"https://bar.com/cb\",\n\t\t\tisError:  false,\n\t\t\texpected: \"https://bar.com/cb\",\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"https://bar.com/cb\"}},\n\t\t\turl:     \"https://bar.com/cb123\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"http://[::1]\"}},\n\t\t\turl:      \"http://[::1]:1024\",\n\t\t\texpected: \"http://[::1]:1024\",\n\t\t\tisError:  false,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"http://[::1]\"}},\n\t\t\turl:     \"http://[::1]:1024/cb\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"http://[::1]/cb\"}},\n\t\t\turl:      \"http://[::1]:1024/cb\",\n\t\t\texpected: \"http://[::1]:1024/cb\",\n\t\t\tisError:  false,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"http://[::1]\"}},\n\t\t\turl:     \"http://foo.bar/bar\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1\"}},\n\t\t\turl:      \"http://127.0.0.1:1024\",\n\t\t\texpected: \"http://127.0.0.1:1024\",\n\t\t\tisError:  false,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1/cb\"}},\n\t\t\turl:      \"http://127.0.0.1:64000/cb\",\n\t\t\texpected: \"http://127.0.0.1:64000/cb\",\n\t\t\tisError:  false,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1\"}},\n\t\t\turl:     \"http://127.0.0.1:64000/cb\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1\"}},\n\t\t\turl:      \"http://127.0.0.1\",\n\t\t\texpected: \"http://127.0.0.1\",\n\t\t\tisError:  false,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1/Cb\"}},\n\t\t\turl:      \"http://127.0.0.1:8080/Cb\",\n\t\t\texpected: \"http://127.0.0.1:8080/Cb\",\n\t\t\tisError:  false,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1\"}},\n\t\t\turl:     \"http://foo.bar/bar\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1\"}},\n\t\t\turl:     \":/invalid.uri)bar\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1:8080/cb\"}},\n\t\t\turl:     \"http://127.0.0.1:8080/Cb\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1:8080/cb\"}},\n\t\t\turl:     \"http://127.0.0.1:8080/cb?foo=bar\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1:8080/cb?foo=bar\"}},\n\t\t\turl:      \"http://127.0.0.1:8080/cb?foo=bar\",\n\t\t\texpected: \"http://127.0.0.1:8080/cb?foo=bar\",\n\t\t\tisError:  false,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1:8080/cb?foo=bar\"}},\n\t\t\turl:     \"http://127.0.0.1:8080/cb?baz=bar&foo=bar\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1:8080/cb?foo=bar&baz=bar\"}},\n\t\t\turl:     \"http://127.0.0.1:8080/cb?baz=bar&foo=bar\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"https://www.ory.sh/cb\"}},\n\t\t\turl:     \"http://127.0.0.1:8080/cb\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:  &fosite.DefaultClient{RedirectURIs: []string{\"http://127.0.0.1:8080/cb\"}},\n\t\t\turl:     \"https://www.ory.sh/cb\",\n\t\t\tisError: true,\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"web+application://callback\"}},\n\t\t\turl:      \"web+application://callback\",\n\t\t\tisError:  false,\n\t\t\texpected: \"web+application://callback\",\n\t\t},\n\t\t{\n\t\t\tclient:   &fosite.DefaultClient{RedirectURIs: []string{\"https://google.com/?foo=bar%20foo+baz\"}},\n\t\t\turl:      \"https://google.com/?foo=bar%20foo+baz\",\n\t\t\tisError:  false,\n\t\t\texpected: \"https://google.com/?foo=bar%20foo+baz\",\n\t\t},\n\t} {\n\t\tredir, err := fosite.MatchRedirectURIWithClientRedirectURIs(c.url, c.client)\n\t\tassert.Equal(t, c.isError, err != nil, \"%d: %+v\", k, c)\n\t\tif err == nil {\n\t\t\trequire.NotNil(t, redir, \"%d\", k)\n\t\t\tassert.Equal(t, c.expected, redir.String(), \"%d\", k)\n\t\t}\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n\nfunc TestIsRedirectURISecure(t *testing.T) {\n\tfor d, c := range []struct {\n\t\tu   string\n\t\terr bool\n\t}{\n\t\t{u: \"http://google.com\", err: true},\n\t\t{u: \"https://google.com\", err: false},\n\t\t{u: \"http://localhost\", err: false},\n\t\t{u: \"http://test.localhost\", err: false},\n\t\t{u: \"http://127.0.0.1/\", err: false},\n\t\t{u: \"http://[::1]/\", err: false},\n\t\t{u: \"http://127.0.0.1:8080/\", err: false},\n\t\t{u: \"http://[::1]:8080/\", err: false},\n\t\t{u: \"http://testlocalhost\", err: true},\n\t\t{u: \"wta://auth\", err: false},\n\t} {\n\t\tuu, err := url.Parse(c.u)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, !c.err, fosite.IsRedirectURISecure(context.Background(), uu), \"case %d\", d)\n\t}\n}\n\nfunc TestWriteAuthorizeFormPostResponse(t *testing.T) {\n\tfor d, c := range []struct {\n\t\tparameters url.Values\n\t\tcheck      func(code string, state string, customParams url.Values, d int)\n\t}{\n\t\t{\n\t\t\tparameters: url.Values{\"code\": {\"lshr755nsg39fgur\"}, \"state\": {\"924659540232\"}},\n\t\t\tcheck: func(code string, state string, customParams url.Values, d int) {\n\t\t\t\tassert.Equal(t, \"lshr755nsg39fgur\", code, \"case %d\", d)\n\t\t\t\tassert.Equal(t, \"924659540232\", state, \"case %d\", d)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tparameters: url.Values{\"code\": {\"lshr75*ns-39f+ur\"}, \"state\": {\"9a:* <&)\"}},\n\t\t\tcheck: func(code string, state string, customParams url.Values, d int) {\n\t\t\t\tassert.Equal(t, \"lshr75*ns-39f+ur\", code, \"case %d\", d)\n\t\t\t\tassert.Equal(t, \"9a:* <&)\", state, \"case %d\", d)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tparameters: url.Values{\"code\": {\"1234\"}, \"custom\": {\"test2\", \"test3\"}},\n\t\t\tcheck: func(code string, state string, customParams url.Values, d int) {\n\t\t\t\tassert.Equal(t, \"1234\", code, \"case %d\", d)\n\t\t\t\tassert.Equal(t, []string{\"test2\", \"test3\"}, customParams[\"custom\"], \"case %d\", d)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tparameters: url.Values{\"code\": {\"1234\"}, \"custom\": {\"<b>Bold</b>\"}},\n\t\t\tcheck: func(code string, state string, customParams url.Values, d int) {\n\t\t\t\tassert.Equal(t, \"1234\", code, \"case %d\", d)\n\t\t\t\tassert.Equal(t, \"<b>Bold</b>\", customParams.Get(\"custom\"), \"case %d\", d)\n\t\t\t},\n\t\t},\n\t} {\n\t\tvar responseBuffer bytes.Buffer\n\t\tredirectURL := \"https://localhost:8080/cb\"\n\t\t//parameters :=\n\t\tfosite.WriteAuthorizeFormPostResponse(redirectURL, c.parameters, fosite.DefaultFormPostTemplate, &responseBuffer)\n\t\tcode, state, _, _, customParams, _, err := internal.ParseFormPostResponse(redirectURL, io.NopCloser(bytes.NewReader(responseBuffer.Bytes())))\n\t\tassert.NoError(t, err, \"case %d\", d)\n\t\tc.check(code, state, customParams, d)\n\n\t}\n}\n\nfunc TestIsRedirectURISecureStrict(t *testing.T) {\n\tfor d, c := range []struct {\n\t\tu   string\n\t\terr bool\n\t}{\n\t\t{u: \"http://google.com\", err: true},\n\t\t{u: \"https://google.com\", err: false},\n\t\t{u: \"http://localhost\", err: false},\n\t\t{u: \"http://test.localhost\", err: false},\n\t\t{u: \"http://127.0.0.1/\", err: false},\n\t\t{u: \"http://[::1]/\", err: false},\n\t\t{u: \"http://127.0.0.1:8080/\", err: false},\n\t\t{u: \"http://[::1]:8080/\", err: false},\n\t\t{u: \"http://testlocalhost\", err: true},\n\t\t{u: \"wta://auth\", err: true},\n\t} {\n\t\tuu, err := url.Parse(c.u)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, !c.err, fosite.IsRedirectURISecureStrict(context.Background(), uu), \"case %d\", d)\n\t}\n}\n\nfunc TestURLSetFragment(t *testing.T) {\n\tfor d, c := range []struct {\n\t\tu string\n\t\ta string\n\t\tf url.Values\n\t}{\n\t\t{u: \"http://google.com\", a: \"http://google.com#code=567060896\", f: url.Values{\"code\": []string{\"567060896\"}}},\n\t\t{u: \"http://google.com\", a: \"http://google.com#code=567060896&scope=read\", f: url.Values{\"code\": []string{\"567060896\"}, \"scope\": []string{\"read\"}}},\n\t\t{u: \"http://google.com\", a: \"http://google.com#code=567060896&scope=read%20mail\", f: url.Values{\"code\": []string{\"567060896j\"}, \"scope\": []string{\"read mail\"}}},\n\t\t{u: \"http://google.com\", a: \"http://google.com#code=567060896&scope=read+write\", f: url.Values{\"code\": []string{\"567060896\"}, \"scope\": []string{\"read+write\"}}},\n\t\t{u: \"http://google.com\", a: \"http://google.com#code=567060896&scope=api:*\", f: url.Values{\"code\": []string{\"567060896\"}, \"scope\": []string{\"api:*\"}}},\n\t\t{u: \"https://google.com?foo=bar\", a: \"https://google.com?foo=bar#code=567060896\", f: url.Values{\"code\": []string{\"567060896\"}}},\n\t\t{u: \"http://localhost?foo=bar&baz=foo\", a: \"http://localhost?foo=bar&baz=foo#code=567060896\", f: url.Values{\"code\": []string{\"567060896\"}}},\n\t} {\n\t\tuu, err := url.Parse(c.u)\n\t\trequire.NoError(t, err)\n\t\tfosite.URLSetFragment(uu, c.f)\n\t\ttURL, err := url.Parse(uu.String())\n\t\trequire.NoError(t, err)\n\t\tr := ParseURLFragment(tURL.Fragment)\n\t\tassert.Equal(t, c.f.Get(\"code\"), r.Get(\"code\"), \"case %d\", d)\n\t\tassert.Equal(t, c.f.Get(\"scope\"), r.Get(\"scope\"), \"case %d\", d)\n\t}\n}\nfunc ParseURLFragment(fragment string) url.Values {\n\tr := url.Values{}\n\tkvs := strings.Split(fragment, \"&\")\n\tfor _, kv := range kvs {\n\t\tkva := strings.Split(kv, \"=\")\n\t\tr.Add(kva[0], kva[1])\n\t}\n\treturn r\n}\n"
        },
        {
          "name": "authorize_helper_whitebox_test.go",
          "type": "blob",
          "size": 1.2421875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestIsLookbackAddress(t *testing.T) {\n\ttestCases := []struct {\n\t\tname     string\n\t\thave     string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\t\"ShouldReturnTrueIPv4Loopback\",\n\t\t\t\"127.0.0.1\",\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"ShouldReturnTrueIPv4LoopbackWithPort\",\n\t\t\t\"127.0.0.1:1230\",\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"ShouldReturnTrueIPv6Loopback\",\n\t\t\t\"[::1]\",\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"ShouldReturnTrueIPv6LoopbackWithPort\",\n\t\t\t\"[::1]:1230\",\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"ShouldReturnTrue12700255\",\n\t\t\t\"127.0.0.255\",\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"ShouldReturnTrue12700255WithPort\",\n\t\t\t\"127.0.0.255:1230\",\n\t\t\ttrue,\n\t\t},\n\t\t{\n\t\t\t\"ShouldReturnFalse128001\",\n\t\t\t\"128.0.0.1\",\n\t\t\tfalse,\n\t\t},\n\t\t{\n\t\t\t\"ShouldReturnFalse128001WithPort\",\n\t\t\t\"128.0.0.1:1230\",\n\t\t\tfalse,\n\t\t},\n\t\t{\n\t\t\t\"ShouldReturnFalseInvalidFourthOctet\",\n\t\t\t\"127.0.0.11230\",\n\t\t\tfalse,\n\t\t},\n\t\t{\n\t\t\t\"ShouldReturnFalseInvalidIPv4\",\n\t\t\t\"127x0x0x11230\",\n\t\t\tfalse,\n\t\t},\n\t\t{\n\t\t\t\"ShouldReturnFalseInvalidIPv6\",\n\t\t\t\"[::1]1230\",\n\t\t\tfalse,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tu := url.URL{Host: tc.have}\n\t\t\tassert.Equal(t, tc.expected, isLoopbackAddress(u.Hostname()))\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "authorize_request.go",
          "type": "blob",
          "size": 2.6142578125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"net/url\"\n)\n\ntype ResponseModeType string\n\nconst (\n\tResponseModeDefault  = ResponseModeType(\"\")\n\tResponseModeFormPost = ResponseModeType(\"form_post\")\n\tResponseModeQuery    = ResponseModeType(\"query\")\n\tResponseModeFragment = ResponseModeType(\"fragment\")\n)\n\n// AuthorizeRequest is an implementation of AuthorizeRequester\ntype AuthorizeRequest struct {\n\tResponseTypes        Arguments        `json:\"responseTypes\" gorethink:\"responseTypes\"`\n\tRedirectURI          *url.URL         `json:\"redirectUri\" gorethink:\"redirectUri\"`\n\tState                string           `json:\"state\" gorethink:\"state\"`\n\tHandledResponseTypes Arguments        `json:\"handledResponseTypes\" gorethink:\"handledResponseTypes\"`\n\tResponseMode         ResponseModeType `json:\"ResponseModes\" gorethink:\"ResponseModes\"`\n\tDefaultResponseMode  ResponseModeType `json:\"DefaultResponseMode\" gorethink:\"DefaultResponseMode\"`\n\n\tRequest\n}\n\nfunc NewAuthorizeRequest() *AuthorizeRequest {\n\treturn &AuthorizeRequest{\n\t\tResponseTypes:        Arguments{},\n\t\tHandledResponseTypes: Arguments{},\n\t\tRequest:              *NewRequest(),\n\t\tResponseMode:         ResponseModeDefault,\n\t\t// The redirect URL must be unset / nil for redirect detection to work properly:\n\t\t// RedirectURI:          &url.URL{},\n\t}\n}\n\nfunc (d *AuthorizeRequest) IsRedirectURIValid() bool {\n\tif d.GetRedirectURI() == nil {\n\t\treturn false\n\t}\n\n\traw := d.GetRedirectURI().String()\n\tif d.GetClient() == nil {\n\t\treturn false\n\t}\n\n\tredirectURI, err := MatchRedirectURIWithClientRedirectURIs(raw, d.GetClient())\n\tif err != nil {\n\t\treturn false\n\t}\n\treturn IsValidRedirectURI(redirectURI)\n}\n\nfunc (d *AuthorizeRequest) GetResponseTypes() Arguments {\n\treturn d.ResponseTypes\n}\n\nfunc (d *AuthorizeRequest) GetState() string {\n\treturn d.State\n}\n\nfunc (d *AuthorizeRequest) GetRedirectURI() *url.URL {\n\treturn d.RedirectURI\n}\n\nfunc (d *AuthorizeRequest) SetResponseTypeHandled(name string) {\n\td.HandledResponseTypes = append(d.HandledResponseTypes, name)\n}\n\nfunc (d *AuthorizeRequest) DidHandleAllResponseTypes() bool {\n\tfor _, rt := range d.ResponseTypes {\n\t\tif !d.HandledResponseTypes.Has(rt) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn len(d.ResponseTypes) > 0\n}\n\nfunc (d *AuthorizeRequest) GetResponseMode() ResponseModeType {\n\treturn d.ResponseMode\n}\n\nfunc (d *AuthorizeRequest) SetDefaultResponseMode(defaultResponseMode ResponseModeType) {\n\tif d.ResponseMode == ResponseModeDefault {\n\t\td.ResponseMode = defaultResponseMode\n\t}\n\td.DefaultResponseMode = defaultResponseMode\n}\n\nfunc (d *AuthorizeRequest) GetDefaultResponseMode() ResponseModeType {\n\treturn d.DefaultResponseMode\n}\n"
        },
        {
          "name": "authorize_request_handler.go",
          "type": "blob",
          "size": 17.5029296875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/go-jose/go-jose/v3\"\n\t\"go.opentelemetry.io/otel/trace\"\n\n\t\"github.com/ory/fosite/i18n\"\n\t\"github.com/ory/fosite/token/jwt\"\n\t\"github.com/ory/x/errorsx\"\n\t\"github.com/ory/x/otelx\"\n\n\t\"github.com/pkg/errors\"\n\n\t\"github.com/ory/go-convenience/stringslice\"\n)\n\nfunc wrapSigningKeyFailure(outer *RFC6749Error, inner error) *RFC6749Error {\n\touter = outer.WithWrap(inner).WithDebug(inner.Error())\n\tif e := new(RFC6749Error); errors.As(inner, &e) {\n\t\treturn outer.WithHintf(\"%s %s\", outer.Reason(), e.Reason())\n\t}\n\treturn outer\n}\n\nfunc (f *Fosite) authorizeRequestParametersFromOpenIDConnectRequest(ctx context.Context, request *AuthorizeRequest, isPARRequest bool) error {\n\tvar scope Arguments = RemoveEmpty(strings.Split(request.Form.Get(\"scope\"), \" \"))\n\n\t// Even if a scope parameter is present in the Request Object value, a scope parameter MUST always be passed using\n\t// the OAuth 2.0 request syntax containing the openid scope value to indicate to the underlying OAuth 2.0 logic that this is an OpenID Connect request.\n\t// Source: http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth\n\tif !scope.Has(\"openid\") {\n\t\treturn nil\n\t}\n\n\tif len(request.Form.Get(\"request\")+request.Form.Get(\"request_uri\")) == 0 {\n\t\treturn nil\n\t} else if len(request.Form.Get(\"request\")) > 0 && len(request.Form.Get(\"request_uri\")) > 0 {\n\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHint(\"OpenID Connect parameters 'request' and 'request_uri' were both given, but you can use at most one.\"))\n\t}\n\n\toidcClient, ok := request.Client.(OpenIDConnectClient)\n\tif !ok {\n\t\tif len(request.Form.Get(\"request_uri\")) > 0 {\n\t\t\treturn errorsx.WithStack(ErrRequestURINotSupported.WithHint(\"OpenID Connect 'request_uri' context was given, but the OAuth 2.0 Client does not implement advanced OpenID Connect capabilities.\"))\n\t\t}\n\t\treturn errorsx.WithStack(ErrRequestNotSupported.WithHint(\"OpenID Connect 'request' context was given, but the OAuth 2.0 Client does not implement advanced OpenID Connect capabilities.\"))\n\t}\n\n\tif oidcClient.GetJSONWebKeys() == nil && len(oidcClient.GetJSONWebKeysURI()) == 0 {\n\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHint(\"OpenID Connect 'request' or 'request_uri' context was given, but the OAuth 2.0 Client does not have any JSON Web Keys registered.\"))\n\t}\n\n\tassertion := request.Form.Get(\"request\")\n\tif location := request.Form.Get(\"request_uri\"); len(location) > 0 {\n\t\tif !stringslice.Has(oidcClient.GetRequestURIs(), location) {\n\t\t\treturn errorsx.WithStack(ErrInvalidRequestURI.WithHintf(\"Request URI '%s' is not whitelisted by the OAuth 2.0 Client.\", location))\n\t\t}\n\n\t\thc := f.Config.GetHTTPClient(ctx)\n\t\tresponse, err := hc.Get(location)\n\t\tif err != nil {\n\t\t\treturn errorsx.WithStack(ErrInvalidRequestURI.WithHintf(\"Unable to fetch OpenID Connect request parameters from 'request_uri' because: %s.\", err.Error()).WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\t\tdefer response.Body.Close()\n\n\t\tif response.StatusCode != http.StatusOK {\n\t\t\treturn errorsx.WithStack(ErrInvalidRequestURI.WithHintf(\"Unable to fetch OpenID Connect request parameters from 'request_uri' because status code '%d' was expected, but got '%d'.\", http.StatusOK, response.StatusCode))\n\t\t}\n\n\t\tbody, err := io.ReadAll(response.Body)\n\t\tif err != nil {\n\t\t\treturn errorsx.WithStack(ErrInvalidRequestURI.WithHintf(\"Unable to fetch OpenID Connect request parameters from 'request_uri' because body parsing failed with: %s.\", err).WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\n\t\tassertion = string(body)\n\t}\n\n\ttoken, err := jwt.ParseWithClaims(assertion, jwt.MapClaims{}, func(t *jwt.Token) (interface{}, error) {\n\t\t// request_object_signing_alg - OPTIONAL.\n\t\t//  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected,\n\t\t// \tif not signed with this algorithm. Request Objects are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. This algorithm MUST\n\t\t//\tbe used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter).\n\t\t//\tServers SHOULD support RS256. The value none MAY be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.\n\t\tif oidcClient.GetRequestObjectSigningAlgorithm() != \"\" && oidcClient.GetRequestObjectSigningAlgorithm() != fmt.Sprintf(\"%s\", t.Header[\"alg\"]) {\n\t\t\treturn nil, errorsx.WithStack(ErrInvalidRequestObject.WithHintf(\"The request object uses signing algorithm '%s', but the requested OAuth 2.0 Client enforces signing algorithm '%s'.\", t.Header[\"alg\"], oidcClient.GetRequestObjectSigningAlgorithm()))\n\t\t}\n\n\t\tif t.Method == jwt.SigningMethodNone {\n\t\t\treturn jwt.UnsafeAllowNoneSignatureType, nil\n\t\t}\n\n\t\tswitch t.Method {\n\t\tcase jose.RS256, jose.RS384, jose.RS512:\n\t\t\tkey, err := f.findClientPublicJWK(ctx, oidcClient, t, true)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, wrapSigningKeyFailure(\n\t\t\t\t\tErrInvalidRequestObject.WithHint(\"Unable to retrieve RSA signing key from OAuth 2.0 Client.\"), err)\n\t\t\t}\n\t\t\treturn key, nil\n\t\tcase jose.ES256, jose.ES384, jose.ES512:\n\t\t\tkey, err := f.findClientPublicJWK(ctx, oidcClient, t, false)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, wrapSigningKeyFailure(\n\t\t\t\t\tErrInvalidRequestObject.WithHint(\"Unable to retrieve ECDSA signing key from OAuth 2.0 Client.\"), err)\n\t\t\t}\n\t\t\treturn key, nil\n\t\tcase jose.PS256, jose.PS384, jose.PS512:\n\t\t\tkey, err := f.findClientPublicJWK(ctx, oidcClient, t, true)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, wrapSigningKeyFailure(\n\t\t\t\t\tErrInvalidRequestObject.WithHint(\"Unable to retrieve RSA signing key from OAuth 2.0 Client.\"), err)\n\t\t\t}\n\t\t\treturn key, nil\n\t\tdefault:\n\t\t\treturn nil, errorsx.WithStack(ErrInvalidRequestObject.WithHintf(\"This request object uses unsupported signing algorithm '%s'.\", t.Header[\"alg\"]))\n\t\t}\n\t})\n\tif err != nil {\n\t\t// Do not re-process already enhanced errors\n\t\tvar e *jwt.ValidationError\n\t\tif errors.As(err, &e) {\n\t\t\tif e.Inner != nil {\n\t\t\t\treturn e.Inner\n\t\t\t}\n\t\t\treturn errorsx.WithStack(ErrInvalidRequestObject.WithHint(\"Unable to verify the request object's signature.\").WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\t\treturn err\n\t} else if err := token.Claims.Valid(); err != nil {\n\t\treturn errorsx.WithStack(ErrInvalidRequestObject.WithHint(\"Unable to verify the request object because its claims could not be validated, check if the expiry time is set correctly.\").WithWrap(err).WithDebug(err.Error()))\n\t}\n\n\tclaims := token.Claims\n\t// Reject the request if the \"request_uri\" authorization request\n\t// parameter is provided.\n\tif requestURI, _ := claims[\"request_uri\"].(string); isPARRequest && requestURI != \"\" {\n\t\treturn errorsx.WithStack(ErrInvalidRequestObject.WithHint(\"Pushed Authorization Requests can not contain the 'request_uri' parameter.\"))\n\t}\n\n\tfor k, v := range claims {\n\t\trequest.Form.Set(k, fmt.Sprintf(\"%s\", v))\n\t}\n\n\tclaimScope := RemoveEmpty(strings.Split(request.Form.Get(\"scope\"), \" \"))\n\tfor _, s := range scope {\n\t\tif !stringslice.Has(claimScope, s) {\n\t\t\tclaimScope = append(claimScope, s)\n\t\t}\n\t}\n\n\trequest.State = request.Form.Get(\"state\")\n\trequest.Form.Set(\"scope\", strings.Join(claimScope, \" \"))\n\treturn nil\n}\n\nfunc (f *Fosite) validateAuthorizeRedirectURI(_ *http.Request, request *AuthorizeRequest) error {\n\t// Fetch redirect URI from request\n\trawRedirURI := request.Form.Get(\"redirect_uri\")\n\n\t// This ensures that the 'redirect_uri' parameter is present for OpenID Connect 1.0 authorization requests as per:\n\t//\n\t// Authorization Code Flow - https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n\t// Implicit Flow - https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest\n\t// Hybrid Flow - https://openid.net/specs/openid-connect-core-1_0.html#HybridAuthRequest\n\t//\n\t// Note: as per the Hybrid Flow documentation the Hybrid Flow has the same requirements as the Authorization Code Flow.\n\tif len(rawRedirURI) == 0 && request.GetRequestedScopes().Has(\"openid\") {\n\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHint(\"The 'redirect_uri' parameter is required when using OpenID Connect 1.0.\"))\n\t}\n\n\t// Validate redirect uri\n\tredirectURI, err := MatchRedirectURIWithClientRedirectURIs(rawRedirURI, request.Client)\n\tif err != nil {\n\t\treturn err\n\t} else if !IsValidRedirectURI(redirectURI) {\n\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHintf(\"The redirect URI '%s' contains an illegal character (for example #) or is otherwise invalid.\", redirectURI))\n\t}\n\trequest.RedirectURI = redirectURI\n\treturn nil\n}\n\nfunc (f *Fosite) parseAuthorizeScope(_ *http.Request, request *AuthorizeRequest) error {\n\trequest.SetRequestedScopes(RemoveEmpty(strings.Split(request.Form.Get(\"scope\"), \" \")))\n\n\treturn nil\n}\n\nfunc (f *Fosite) validateAuthorizeScope(ctx context.Context, _ *http.Request, request *AuthorizeRequest) error {\n\tfor _, permission := range request.GetRequestedScopes() {\n\t\tif !f.Config.GetScopeStrategy(ctx)(request.Client.GetScopes(), permission) {\n\t\t\treturn errorsx.WithStack(ErrInvalidScope.WithHintf(\"The OAuth 2.0 Client is not allowed to request scope '%s'.\", permission))\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (f *Fosite) validateResponseTypes(r *http.Request, request *AuthorizeRequest) error {\n\t// https://tools.ietf.org/html/rfc6749#section-3.1.1\n\t// Extension response types MAY contain a space-delimited (%x20) list of\n\t// values, where the order of values does not matter (e.g., response\n\t// type \"a b\" is the same as \"b a\").  The meaning of such composite\n\t// response types is defined by their respective specifications.\n\tresponseTypes := RemoveEmpty(strings.Split(r.Form.Get(\"response_type\"), \" \"))\n\tif len(responseTypes) == 0 {\n\t\treturn errorsx.WithStack(ErrUnsupportedResponseType.WithHint(\"`The request is missing the 'response_type' parameter.\"))\n\t}\n\n\tvar found bool\n\tfor _, t := range request.GetClient().GetResponseTypes() {\n\t\tif Arguments(responseTypes).Matches(RemoveEmpty(strings.Split(t, \" \"))...) {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\treturn errorsx.WithStack(ErrUnsupportedResponseType.WithHintf(\"The client is not allowed to request response_type '%s'.\", r.Form.Get(\"response_type\")))\n\t}\n\n\trequest.ResponseTypes = responseTypes\n\treturn nil\n}\n\nfunc (f *Fosite) ParseResponseMode(ctx context.Context, r *http.Request, request *AuthorizeRequest) error {\n\tswitch responseMode := r.Form.Get(\"response_mode\"); responseMode {\n\tcase string(ResponseModeDefault):\n\t\trequest.ResponseMode = ResponseModeDefault\n\tcase string(ResponseModeFragment):\n\t\trequest.ResponseMode = ResponseModeFragment\n\tcase string(ResponseModeQuery):\n\t\trequest.ResponseMode = ResponseModeQuery\n\tcase string(ResponseModeFormPost):\n\t\trequest.ResponseMode = ResponseModeFormPost\n\tdefault:\n\t\trm := ResponseModeType(responseMode)\n\t\tif f.ResponseModeHandler(ctx).ResponseModes().Has(rm) {\n\t\t\trequest.ResponseMode = rm\n\t\t\tbreak\n\t\t}\n\t\treturn errorsx.WithStack(ErrUnsupportedResponseMode.WithHintf(\"Request with unsupported response_mode \\\"%s\\\".\", responseMode))\n\t}\n\n\treturn nil\n}\n\nfunc (f *Fosite) validateResponseMode(r *http.Request, request *AuthorizeRequest) error {\n\tif request.ResponseMode == ResponseModeDefault {\n\t\treturn nil\n\t}\n\n\tresponseModeClient, ok := request.GetClient().(ResponseModeClient)\n\tif !ok {\n\t\treturn errorsx.WithStack(ErrUnsupportedResponseMode.WithHintf(\"The request has response_mode \\\"%s\\\". set but registered OAuth 2.0 client doesn't support response_mode\", r.Form.Get(\"response_mode\")))\n\t}\n\n\tvar found bool\n\tfor _, t := range responseModeClient.GetResponseModes() {\n\t\tif request.ResponseMode == t {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\treturn errorsx.WithStack(ErrUnsupportedResponseMode.WithHintf(\"The client is not allowed to request response_mode '%s'.\", r.Form.Get(\"response_mode\")))\n\t}\n\n\treturn nil\n}\n\nfunc (f *Fosite) authorizeRequestFromPAR(ctx context.Context, r *http.Request, request *AuthorizeRequest) (bool, error) {\n\tconfigProvider, ok := f.Config.(PushedAuthorizeRequestConfigProvider)\n\tif !ok {\n\t\t// If the config provider is not implemented, PAR cannot be used.\n\t\treturn false, nil\n\t}\n\n\trequestURI := r.Form.Get(\"request_uri\")\n\tif requestURI == \"\" || !strings.HasPrefix(requestURI, configProvider.GetPushedAuthorizeRequestURIPrefix(ctx)) {\n\t\t// nothing to do here\n\t\treturn false, nil\n\t}\n\n\tclientID := r.Form.Get(\"client_id\")\n\n\tstorage, ok := f.Store.(PARStorage)\n\tif !ok {\n\t\treturn false, errorsx.WithStack(ErrServerError.WithHint(ErrorPARNotSupported).WithDebug(DebugPARStorageInvalid))\n\t}\n\n\t// hydrate the requester\n\tvar parRequest AuthorizeRequester\n\tvar err error\n\tif parRequest, err = storage.GetPARSession(ctx, requestURI); err != nil {\n\t\treturn false, errorsx.WithStack(ErrInvalidRequestURI.WithHint(\"Invalid PAR session\").WithWrap(err).WithDebug(err.Error()))\n\t}\n\n\t// hydrate the request object\n\trequest.Merge(parRequest)\n\trequest.RedirectURI = parRequest.GetRedirectURI()\n\trequest.ResponseTypes = parRequest.GetResponseTypes()\n\trequest.State = parRequest.GetState()\n\trequest.ResponseMode = parRequest.GetResponseMode()\n\n\tif err := storage.DeletePARSession(ctx, requestURI); err != nil {\n\t\treturn false, errorsx.WithStack(ErrServerError.WithWrap(err).WithDebug(err.Error()))\n\t}\n\n\t// validate the clients match\n\tif clientID != request.GetClient().GetID() {\n\t\treturn false, errorsx.WithStack(ErrInvalidRequest.WithHint(\"The 'client_id' must match the one sent in the pushed authorization request.\"))\n\t}\n\n\treturn true, nil\n}\n\nfunc (f *Fosite) NewAuthorizeRequest(ctx context.Context, r *http.Request) (_ AuthorizeRequester, err error) {\n\tctx, span := trace.SpanFromContext(ctx).TracerProvider().Tracer(\"github.com/ory/fosite\").Start(ctx, \"Fosite.NewAuthorizeRequest\")\n\tdefer otelx.End(span, &err)\n\n\treturn f.newAuthorizeRequest(ctx, r, false)\n}\n\nfunc (f *Fosite) newAuthorizeRequest(ctx context.Context, r *http.Request, isPARRequest bool) (AuthorizeRequester, error) {\n\trequest := NewAuthorizeRequest()\n\trequest.Request.Lang = i18n.GetLangFromRequest(f.Config.GetMessageCatalog(ctx), r)\n\n\tctx = context.WithValue(ctx, RequestContextKey, r)\n\tctx = context.WithValue(ctx, AuthorizeRequestContextKey, request)\n\n\tif err := r.ParseMultipartForm(1 << 20); err != nil && err != http.ErrNotMultipart {\n\t\treturn request, errorsx.WithStack(ErrInvalidRequest.WithHint(\"Unable to parse HTTP body, make sure to send a properly formatted form request body.\").WithWrap(err).WithDebug(err.Error()))\n\t}\n\trequest.Form = r.Form\n\n\t// Save state to the request to be returned in error conditions (https://github.com/ory/hydra/issues/1642)\n\trequest.State = request.Form.Get(\"state\")\n\n\t// Check if this is a continuation from a pushed authorization request\n\tif !isPARRequest {\n\t\tif isPAR, err := f.authorizeRequestFromPAR(ctx, r, request); err != nil {\n\t\t\treturn request, err\n\t\t} else if isPAR {\n\t\t\t// No need to continue\n\t\t\treturn request, nil\n\t\t} else if configProvider, ok := f.Config.(PushedAuthorizeRequestConfigProvider); ok && configProvider.EnforcePushedAuthorize(ctx) {\n\t\t\treturn request, errorsx.WithStack(ErrInvalidRequest.WithHint(\"Pushed Authorization Requests are enforced but no such request was sent.\"))\n\t\t}\n\t}\n\n\tclient, err := f.Store.GetClient(ctx, request.GetRequestForm().Get(\"client_id\"))\n\tif err != nil {\n\t\treturn request, errorsx.WithStack(ErrInvalidClient.WithHint(\"The requested OAuth 2.0 Client does not exist.\").WithWrap(err).WithDebug(err.Error()))\n\t}\n\trequest.Client = client\n\n\t// Now that the base fields (state and client) are populated, we extract all the information\n\t// from the request object or request object uri, if one is set.\n\t//\n\t// All other parse methods should come afterwards so that we ensure that the data is taken\n\t// from the request_object if set.\n\tif err := f.authorizeRequestParametersFromOpenIDConnectRequest(ctx, request, isPARRequest); err != nil {\n\t\treturn request, err\n\t}\n\n\t// The request context is now fully available and we can start processing the individual\n\t// fields.\n\tif err := f.ParseResponseMode(ctx, r, request); err != nil {\n\t\treturn request, err\n\t}\n\n\tif err = f.parseAuthorizeScope(r, request); err != nil {\n\t\treturn request, err\n\t}\n\n\tif err = f.validateAuthorizeRedirectURI(r, request); err != nil {\n\t\treturn request, err\n\t}\n\n\tif err = f.validateAuthorizeScope(ctx, r, request); err != nil {\n\t\treturn request, err\n\t}\n\n\tif err = f.validateAuthorizeAudience(ctx, r, request); err != nil {\n\t\treturn request, err\n\t}\n\n\tif len(request.Form.Get(\"registration\")) > 0 {\n\t\treturn request, errorsx.WithStack(ErrRegistrationNotSupported)\n\t}\n\n\tif err = f.validateResponseTypes(r, request); err != nil {\n\t\treturn request, err\n\t}\n\n\tif err = f.validateResponseMode(r, request); err != nil {\n\t\treturn request, err\n\t}\n\n\t// A fallback handler to set the default response mode in cases where we can not reach the Authorize Handlers\n\t// but still need the e.g. correct error response mode.\n\tif request.GetResponseMode() == ResponseModeDefault {\n\t\tif request.ResponseTypes.ExactOne(\"code\") {\n\t\t\trequest.SetDefaultResponseMode(ResponseModeQuery)\n\t\t} else {\n\t\t\t// If the response type is not `code` it is an implicit/hybrid (fragment) response mode.\n\t\t\trequest.SetDefaultResponseMode(ResponseModeFragment)\n\t\t}\n\t}\n\n\t// rfc6819 4.4.1.8.  Threat: CSRF Attack against redirect-uri\n\t// The \"state\" parameter should be used to link the authorization\n\t// request with the redirect URI used to deliver the access token (Section 5.3.5).\n\t//\n\t// https://tools.ietf.org/html/rfc6819#section-4.4.1.8\n\t// The \"state\" parameter should not\tbe guessable\n\tif len(request.State) < f.GetMinParameterEntropy(ctx) {\n\t\t// We're assuming that using less then, by default, 8 characters for the state can not be considered \"unguessable\"\n\t\treturn request, errorsx.WithStack(ErrInvalidState.WithHintf(\"Request parameter 'state' must be at least be %d characters long to ensure sufficient entropy.\", f.GetMinParameterEntropy(ctx)))\n\t}\n\n\treturn request, nil\n}\n"
        },
        {
          "name": "authorize_request_handler_oidc_request_test.go",
          "type": "blob",
          "size": 8.8203125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/pkg/errors\"\n\n\t\"github.com/go-jose/go-jose/v3\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/ory/fosite/token/jwt\"\n)\n\nfunc mustGenerateAssertion(t *testing.T, claims jwt.MapClaims, key *rsa.PrivateKey, kid string) string {\n\ttoken := jwt.NewWithClaims(jose.RS256, claims)\n\tif kid != \"\" {\n\t\ttoken.Header[\"kid\"] = kid\n\t}\n\ttokenString, err := token.SignedString(key)\n\trequire.NoError(t, err)\n\treturn tokenString\n}\n\nfunc mustGenerateHSAssertion(t *testing.T, claims jwt.MapClaims) string {\n\ttoken := jwt.NewWithClaims(jose.HS256, claims)\n\ttokenString, err := token.SignedString([]byte(\"aaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccccddddddddddddddddddddddd\"))\n\trequire.NoError(t, err)\n\treturn tokenString\n}\n\nfunc mustGenerateNoneAssertion(t *testing.T, claims jwt.MapClaims) string {\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodNone, claims)\n\ttokenString, err := token.SignedString(jwt.UnsafeAllowNoneSignatureType)\n\trequire.NoError(t, err)\n\treturn tokenString\n}\n\nfunc TestAuthorizeRequestParametersFromOpenIDConnectRequest(t *testing.T) {\n\tkey, err := rsa.GenerateKey(rand.Reader, 1024)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tjwks := &jose.JSONWebKeySet{\n\t\tKeys: []jose.JSONWebKey{\n\t\t\t{\n\t\t\t\tKeyID: \"kid-foo\",\n\t\t\t\tUse:   \"sig\",\n\t\t\t\tKey:   &key.PublicKey,\n\t\t\t},\n\t\t},\n\t}\n\n\tvalidRequestObject := mustGenerateAssertion(t, jwt.MapClaims{\"scope\": \"foo\", \"foo\": \"bar\", \"baz\": \"baz\", \"response_type\": \"token\", \"response_mode\": \"post_form\"}, key, \"kid-foo\")\n\tvalidRequestObjectWithoutKid := mustGenerateAssertion(t, jwt.MapClaims{\"scope\": \"foo\", \"foo\": \"bar\", \"baz\": \"baz\"}, key, \"\")\n\tvalidNoneRequestObject := mustGenerateNoneAssertion(t, jwt.MapClaims{\"scope\": \"foo\", \"foo\": \"bar\", \"baz\": \"baz\", \"state\": \"some-state\"})\n\n\tvar reqH http.HandlerFunc = func(rw http.ResponseWriter, r *http.Request) {\n\t\trw.Write([]byte(validRequestObject))\n\t}\n\treqTS := httptest.NewServer(reqH)\n\tdefer reqTS.Close()\n\n\tvar hJWK http.HandlerFunc = func(rw http.ResponseWriter, r *http.Request) {\n\t\trequire.NoError(t, json.NewEncoder(rw).Encode(jwks))\n\t}\n\treqJWK := httptest.NewServer(hJWK)\n\tdefer reqJWK.Close()\n\n\tf := &Fosite{Config: &Config{JWKSFetcherStrategy: NewDefaultJWKSFetcherStrategy()}}\n\tfor k, tc := range []struct {\n\t\tclient Client\n\t\tform   url.Values\n\t\td      string\n\n\t\texpectErr       error\n\t\texpectErrReason string\n\t\texpectForm      url.Values\n\t}{\n\t\t{\n\t\t\td:          \"should pass because no request context given and not openid\",\n\t\t\tform:       url.Values{},\n\t\t\texpectErr:  nil,\n\t\t\texpectForm: url.Values{},\n\t\t},\n\t\t{\n\t\t\td:          \"should pass because no request context given\",\n\t\t\tform:       url.Values{\"scope\": {\"openid\"}},\n\t\t\texpectErr:  nil,\n\t\t\texpectForm: url.Values{\"scope\": {\"openid\"}},\n\t\t},\n\t\t{\n\t\t\td:          \"should pass because request context given but not openid\",\n\t\t\tform:       url.Values{\"request\": {\"foo\"}},\n\t\t\texpectErr:  nil,\n\t\t\texpectForm: url.Values{\"request\": {\"foo\"}},\n\t\t},\n\t\t{\n\t\t\td:          \"should fail because not an OpenIDConnect compliant client\",\n\t\t\tform:       url.Values{\"scope\": {\"openid\"}, \"request\": {\"foo\"}},\n\t\t\texpectErr:  ErrRequestNotSupported,\n\t\t\texpectForm: url.Values{\"scope\": {\"openid\"}},\n\t\t},\n\t\t{\n\t\t\td:          \"should fail because not an OpenIDConnect compliant client\",\n\t\t\tform:       url.Values{\"scope\": {\"openid\"}, \"request_uri\": {\"foo\"}},\n\t\t\texpectErr:  ErrRequestURINotSupported,\n\t\t\texpectForm: url.Values{\"scope\": {\"openid\"}},\n\t\t},\n\t\t{\n\t\t\td:          \"should fail because token invalid an no key set\",\n\t\t\tform:       url.Values{\"scope\": {\"openid\"}, \"request_uri\": {\"foo\"}},\n\t\t\tclient:     &DefaultOpenIDConnectClient{RequestObjectSigningAlgorithm: \"RS256\"},\n\t\t\texpectErr:  ErrInvalidRequest,\n\t\t\texpectForm: url.Values{\"scope\": {\"openid\"}},\n\t\t},\n\t\t{\n\t\t\td:          \"should fail because token invalid\",\n\t\t\tform:       url.Values{\"scope\": {\"openid\"}, \"request\": {\"foo\"}},\n\t\t\tclient:     &DefaultOpenIDConnectClient{JSONWebKeys: jwks, RequestObjectSigningAlgorithm: \"RS256\"},\n\t\t\texpectErr:  ErrInvalidRequestObject,\n\t\t\texpectForm: url.Values{\"scope\": {\"openid\"}},\n\t\t},\n\t\t{\n\t\t\td:               \"should fail because kid does not exist\",\n\t\t\tform:            url.Values{\"scope\": {\"openid\"}, \"request\": {mustGenerateAssertion(t, jwt.MapClaims{}, key, \"does-not-exists\")}},\n\t\t\tclient:          &DefaultOpenIDConnectClient{JSONWebKeys: jwks, RequestObjectSigningAlgorithm: \"RS256\"},\n\t\t\texpectErr:       ErrInvalidRequestObject,\n\t\t\texpectErrReason: \"Unable to retrieve RSA signing key from OAuth 2.0 Client. The JSON Web Token uses signing key with kid 'does-not-exists', which could not be found.\",\n\t\t\texpectForm:      url.Values{\"scope\": {\"openid\"}},\n\t\t},\n\t\t{\n\t\t\td:               \"should fail because not RS256 token\",\n\t\t\tform:            url.Values{\"scope\": {\"openid\"}, \"request\": {mustGenerateHSAssertion(t, jwt.MapClaims{})}},\n\t\t\tclient:          &DefaultOpenIDConnectClient{JSONWebKeys: jwks, RequestObjectSigningAlgorithm: \"RS256\"},\n\t\t\texpectErr:       ErrInvalidRequestObject,\n\t\t\texpectErrReason: \"The request object uses signing algorithm 'HS256', but the requested OAuth 2.0 Client enforces signing algorithm 'RS256'.\",\n\t\t\texpectForm:      url.Values{\"scope\": {\"openid\"}},\n\t\t},\n\t\t{\n\t\t\td:      \"should pass and set request parameters properly\",\n\t\t\tform:   url.Values{\"scope\": {\"openid\"}, \"response_type\": {\"code\"}, \"response_mode\": {\"none\"}, \"request\": {validRequestObject}},\n\t\t\tclient: &DefaultOpenIDConnectClient{JSONWebKeys: jwks, RequestObjectSigningAlgorithm: \"RS256\"},\n\t\t\t// The values from form are overwritten by the request object.\n\t\t\texpectForm: url.Values{\"response_type\": {\"token\"}, \"response_mode\": {\"post_form\"}, \"scope\": {\"foo openid\"}, \"request\": {validRequestObject}, \"foo\": {\"bar\"}, \"baz\": {\"baz\"}},\n\t\t},\n\t\t{\n\t\t\td:          \"should pass even if kid is unset\",\n\t\t\tform:       url.Values{\"scope\": {\"openid\"}, \"request\": {validRequestObjectWithoutKid}},\n\t\t\tclient:     &DefaultOpenIDConnectClient{JSONWebKeys: jwks, RequestObjectSigningAlgorithm: \"RS256\"},\n\t\t\texpectForm: url.Values{\"scope\": {\"foo openid\"}, \"request\": {validRequestObjectWithoutKid}, \"foo\": {\"bar\"}, \"baz\": {\"baz\"}},\n\t\t},\n\t\t{\n\t\t\td:          \"should fail because request uri is not whitelisted\",\n\t\t\tform:       url.Values{\"scope\": {\"openid\"}, \"request_uri\": {reqTS.URL}},\n\t\t\tclient:     &DefaultOpenIDConnectClient{JSONWebKeysURI: reqJWK.URL, RequestObjectSigningAlgorithm: \"RS256\"},\n\t\t\texpectForm: url.Values{\"scope\": {\"foo openid\"}, \"request_uri\": {reqTS.URL}, \"foo\": {\"bar\"}, \"baz\": {\"baz\"}},\n\t\t\texpectErr:  ErrInvalidRequestURI,\n\t\t},\n\t\t{\n\t\t\td:          \"should pass and set request_uri parameters properly and also fetch jwk from remote\",\n\t\t\tform:       url.Values{\"scope\": {\"openid\"}, \"request_uri\": {reqTS.URL}},\n\t\t\tclient:     &DefaultOpenIDConnectClient{JSONWebKeysURI: reqJWK.URL, RequestObjectSigningAlgorithm: \"RS256\", RequestURIs: []string{reqTS.URL}},\n\t\t\texpectForm: url.Values{\"response_type\": {\"token\"}, \"response_mode\": {\"post_form\"}, \"scope\": {\"foo openid\"}, \"request_uri\": {reqTS.URL}, \"foo\": {\"bar\"}, \"baz\": {\"baz\"}},\n\t\t},\n\t\t{\n\t\t\td:          \"should pass when request object uses algorithm none\",\n\t\t\tform:       url.Values{\"scope\": {\"openid\"}, \"request\": {validNoneRequestObject}},\n\t\t\tclient:     &DefaultOpenIDConnectClient{JSONWebKeysURI: reqJWK.URL, RequestObjectSigningAlgorithm: \"none\"},\n\t\t\texpectForm: url.Values{\"state\": {\"some-state\"}, \"scope\": {\"foo openid\"}, \"request\": {validNoneRequestObject}, \"foo\": {\"bar\"}, \"baz\": {\"baz\"}},\n\t\t},\n\t\t{\n\t\t\td:          \"should pass when request object uses algorithm none and the client did not explicitly allow any algorithm\",\n\t\t\tform:       url.Values{\"scope\": {\"openid\"}, \"request\": {validNoneRequestObject}},\n\t\t\tclient:     &DefaultOpenIDConnectClient{JSONWebKeysURI: reqJWK.URL},\n\t\t\texpectForm: url.Values{\"state\": {\"some-state\"}, \"scope\": {\"foo openid\"}, \"request\": {validNoneRequestObject}, \"foo\": {\"bar\"}, \"baz\": {\"baz\"}},\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d/description=%s\", k, tc.d), func(t *testing.T) {\n\t\t\treq := &AuthorizeRequest{\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: tc.client,\n\t\t\t\t\tForm:   tc.form,\n\t\t\t\t},\n\t\t\t}\n\n\t\t\terr := f.authorizeRequestParametersFromOpenIDConnectRequest(context.Background(), req, false)\n\t\t\tif tc.expectErr != nil {\n\t\t\t\trequire.EqualError(t, err, tc.expectErr.Error(), \"%+v\", err)\n\t\t\t\tif tc.expectErrReason != \"\" {\n\t\t\t\t\treal := new(RFC6749Error)\n\t\t\t\t\trequire.True(t, errors.As(err, &real))\n\t\t\t\t\tassert.EqualValues(t, tc.expectErrReason, real.Reason())\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif err != nil {\n\t\t\t\t\treal := new(RFC6749Error)\n\t\t\t\t\terrors.As(err, &real)\n\t\t\t\t\trequire.NoErrorf(t, err, \"Hint: %v\\nDebug:%v\", real.HintField, real.DebugField)\n\t\t\t\t}\n\t\t\t\trequire.NoErrorf(t, err, \"%+v\", err)\n\t\t\t\trequire.Equal(t, len(tc.expectForm), len(req.Form))\n\t\t\t\tfor k, v := range tc.expectForm {\n\t\t\t\t\tassert.EqualValues(t, v, req.Form[k])\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "authorize_request_handler_test.go",
          "type": "blob",
          "size": 21.61328125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t. \"github.com/ory/fosite\"\n\t. \"github.com/ory/fosite/internal\"\n)\n\n// Should pass\n//\n//   - https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#Terminology\n//     The OAuth 2.0 specification allows for registration of space-separated response_type parameter values.\n//     If a Response Type contains one of more space characters (%20), it is compared as a space-delimited list of\n//     values in which the order of values does not matter.\nfunc TestNewAuthorizeRequest(t *testing.T) {\n\tvar store *MockStorage\n\n\tredir, _ := url.Parse(\"https://foo.bar/cb\")\n\tspecialCharRedir, _ := url.Parse(\"web+application://callback\")\n\tfor k, c := range []struct {\n\t\tdesc          string\n\t\tconf          *Fosite\n\t\tr             *http.Request\n\t\tquery         url.Values\n\t\texpectedError error\n\t\tmock          func()\n\t\texpect        *AuthorizeRequest\n\t}{\n\t\t/* empty request */\n\t\t{\n\t\t\tdesc:          \"empty request fails\",\n\t\t\tconf:          &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tr:             &http.Request{},\n\t\t\texpectedError: ErrInvalidClient,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Any()).Return(nil, errors.New(\"foo\"))\n\t\t\t},\n\t\t},\n\t\t/* invalid redirect uri */\n\t\t{\n\t\t\tdesc:          \"invalid redirect uri fails\",\n\t\t\tconf:          &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery:         url.Values{\"redirect_uri\": []string{\"invalid\"}},\n\t\t\texpectedError: ErrInvalidClient,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Any()).Return(nil, errors.New(\"foo\"))\n\t\t\t},\n\t\t},\n\t\t/* invalid client */\n\t\t{\n\t\t\tdesc:          \"invalid client fails\",\n\t\t\tconf:          &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery:         url.Values{\"redirect_uri\": []string{\"https://foo.bar/cb\"}},\n\t\t\texpectedError: ErrInvalidClient,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Any()).Return(nil, errors.New(\"foo\"))\n\t\t\t},\n\t\t},\n\t\t/* redirect client mismatch */\n\t\t{\n\t\t\tdesc: \"client and request redirects mismatch\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"client_id\": []string{\"1234\"},\n\t\t\t},\n\t\t\texpectedError: ErrInvalidRequest,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"invalid\"}, Scopes: []string{}}, nil)\n\t\t\t},\n\t\t},\n\t\t/* redirect client mismatch */\n\t\t{\n\t\t\tdesc: \"client and request redirects mismatch\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\": []string{\"\"},\n\t\t\t\t\"client_id\":    []string{\"1234\"},\n\t\t\t},\n\t\t\texpectedError: ErrInvalidRequest,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"invalid\"}, Scopes: []string{}}, nil)\n\t\t\t},\n\t\t},\n\t\t/* redirect client mismatch */\n\t\t{\n\t\t\tdesc: \"client and request redirects mismatch\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\": []string{\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":    []string{\"1234\"},\n\t\t\t},\n\t\t\texpectedError: ErrInvalidRequest,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"invalid\"}, Scopes: []string{}}, nil)\n\t\t\t},\n\t\t},\n\t\t/* no state */\n\t\t{\n\t\t\tdesc: \"no state\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     []string{\"1234\"},\n\t\t\t\t\"response_type\": []string{\"code\"},\n\t\t\t},\n\t\t\texpectedError: ErrInvalidState,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{}}, nil)\n\t\t\t},\n\t\t},\n\t\t/* short state */\n\t\t{\n\t\t\tdesc: \"short state\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code\"},\n\t\t\t\t\"state\":         {\"short\"},\n\t\t\t},\n\t\t\texpectedError: ErrInvalidState,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{}}, nil)\n\t\t\t},\n\t\t},\n\t\t/* fails because scope not given */\n\t\t{\n\t\t\tdesc: \"should fail because client does not have scope baz\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar baz\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{\"foo\", \"bar\"}}, nil)\n\t\t\t},\n\t\t\texpectedError: ErrInvalidScope,\n\t\t},\n\t\t/* fails because scope not given */\n\t\t{\n\t\t\tdesc: \"should fail because client does not have scope baz\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tRedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience: []string{\"https://cloud.ory.sh/api\"},\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpectedError: ErrInvalidRequest,\n\t\t},\n\t\t/* success case */\n\t\t{\n\t\t\tdesc: \"should pass\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"}, RedirectURIs: []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:   []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* repeated audience parameter */\n\t\t{\n\t\t\tdesc: \"repeated audience parameter\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"}, RedirectURIs: []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:   []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* repeated audience parameter with tricky values */\n\t\t{\n\t\t\tdesc: \"repeated audience parameter with tricky values\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: ExactAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"test value\", \"\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience:      []string{\"test value\"},\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"}, RedirectURIs: []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:   []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tAudience: []string{\"test value\"},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"test value\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* redirect_uri with special character in protocol*/\n\t\t{\n\t\t\tdesc: \"redirect_uri with special character\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"web+application://callback\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\tRedirectURIs:  []string{\"web+application://callback\"},\n\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   specialCharRedir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"}, RedirectURIs: []string{\"web+application://callback\"},\n\t\t\t\t\t\tScopes:   []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* audience with double spaces between values */\n\t\t{\n\t\t\tdesc: \"audience with double spaces between values\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api  https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"}, RedirectURIs: []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:   []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* fails because unknown response_mode*/\n\t\t{\n\t\t\tdesc: \"should fail because unknown response_mode\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"response_mode\": {\"unknown\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{\"foo\", \"bar\"}, ResponseTypes: []string{\"code token\"}}, nil)\n\t\t\t},\n\t\t\texpectedError: ErrUnsupportedResponseMode,\n\t\t},\n\t\t/* fails because response_mode is requested but the OAuth 2.0 client doesn't support response mode */\n\t\t{\n\t\t\tdesc: \"should fail because response_mode is requested but the OAuth 2.0 client doesn't support response mode\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"response_mode\": {\"form_post\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{\"foo\", \"bar\"}, ResponseTypes: []string{\"code token\"}}, nil)\n\t\t\t},\n\t\t\texpectedError: ErrUnsupportedResponseMode,\n\t\t},\n\t\t/* fails because requested response mode is not allowed */\n\t\t{\n\t\t\tdesc: \"should fail because requested response mode is not allowed\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"response_mode\": {\"form_post\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultResponseModeClient{\n\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\t},\n\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeQuery},\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpectedError: ErrUnsupportedResponseMode,\n\t\t},\n\t\t/* success with response mode */\n\t\t{\n\t\t\tdesc: \"success with response mode\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"response_mode\": {\"form_post\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultResponseModeClient{\n\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t},\n\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeFormPost},\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultResponseModeClient{\n\t\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeFormPost},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* determine correct response mode if default */\n\t\t{\n\t\t\tdesc: \"success with response mode\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultResponseModeClient{\n\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tResponseTypes: []string{\"code\"},\n\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t},\n\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeQuery},\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultResponseModeClient{\n\t\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\t\tResponseTypes: []string{\"code\"},\n\t\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeQuery},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* determine correct response mode if default */\n\t\t{\n\t\t\tdesc: \"success with response mode\",\n\t\t\tconf: &Fosite{Store: store, Config: &Config{ScopeStrategy: ExactScopeStrategy, AudienceMatchingStrategy: DefaultAudienceMatchingStrategy}},\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultResponseModeClient{\n\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t},\n\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeFragment},\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultResponseModeClient{\n\t\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeFragment},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tctrl := gomock.NewController(t)\n\t\t\tstore = NewMockStorage(ctrl)\n\t\t\tdefer ctrl.Finish()\n\n\t\t\tc.mock()\n\t\t\tif c.r == nil {\n\t\t\t\tc.r = &http.Request{Header: http.Header{}}\n\t\t\t\tif c.query != nil {\n\t\t\t\t\tc.r.URL = &url.URL{RawQuery: c.query.Encode()}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.conf.Store = store\n\t\t\tar, err := c.conf.NewAuthorizeRequest(context.Background(), c.r)\n\t\t\tif c.expectedError != nil {\n\t\t\t\tassert.EqualError(t, err, c.expectedError.Error())\n\t\t\t\t// https://github.com/ory/hydra/issues/1642\n\t\t\t\tAssertObjectKeysEqual(t, &AuthorizeRequest{State: c.query.Get(\"state\")}, ar, \"State\")\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\tAssertObjectKeysEqual(t, c.expect, ar, \"ResponseTypes\", \"RequestedAudience\", \"RequestedScope\", \"Client\", \"RedirectURI\", \"State\")\n\t\t\t\tassert.NotNil(t, ar.GetRequestedAt())\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "authorize_request_test.go",
          "type": "blob",
          "size": 2.794921875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"net/url\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestAuthorizeRequestURLRegression(t *testing.T) {\n\trequire.Nil(t, NewAuthorizeRequest().RedirectURI)\n}\n\nfunc TestAuthorizeRequest(t *testing.T) {\n\tvar urlparse = func(rawurl string) *url.URL {\n\t\tu, _ := url.Parse(rawurl)\n\t\treturn u\n\t}\n\n\tfor k, c := range []struct {\n\t\tar           *AuthorizeRequest\n\t\tisRedirValid bool\n\t}{\n\t\t{\n\t\t\tar:           NewAuthorizeRequest(),\n\t\t\tisRedirValid: false,\n\t\t},\n\t\t{\n\t\t\tar: &AuthorizeRequest{\n\t\t\t\tRedirectURI: urlparse(\"https://foobar\"),\n\t\t\t},\n\t\t\tisRedirValid: false,\n\t\t},\n\t\t{\n\t\t\tar: &AuthorizeRequest{\n\t\t\t\tRedirectURI: urlparse(\"https://foobar\"),\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{RedirectURIs: []string{\"\"}},\n\t\t\t\t},\n\t\t\t},\n\t\t\tisRedirValid: false,\n\t\t},\n\t\t{\n\t\t\tar: &AuthorizeRequest{\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{RedirectURIs: []string{\"\"}},\n\t\t\t\t},\n\t\t\t\tRedirectURI: urlparse(\"\"),\n\t\t\t},\n\t\t\tisRedirValid: false,\n\t\t},\n\t\t{\n\t\t\tar: &AuthorizeRequest{\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{RedirectURIs: []string{\"\"}},\n\t\t\t\t},\n\t\t\t\tRedirectURI: urlparse(\"\"),\n\t\t\t},\n\t\t\tisRedirValid: false,\n\t\t},\n\t\t{\n\t\t\tar: &AuthorizeRequest{\n\t\t\t\tRedirectURI: urlparse(\"https://foobar.com#123\"),\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{RedirectURIs: []string{\"https://foobar.com#123\"}},\n\t\t\t\t},\n\t\t\t},\n\t\t\tisRedirValid: false,\n\t\t},\n\t\t{\n\t\t\tar: &AuthorizeRequest{\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{RedirectURIs: []string{\"https://foobar.com\"}},\n\t\t\t\t},\n\t\t\t\tRedirectURI: urlparse(\"https://foobar.com#123\"),\n\t\t\t},\n\t\t\tisRedirValid: false,\n\t\t},\n\t\t{\n\t\t\tar: &AuthorizeRequest{\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient:         &DefaultClient{RedirectURIs: []string{\"https://foobar.com/cb\"}},\n\t\t\t\t\tRequestedAt:    time.Now().UTC(),\n\t\t\t\t\tRequestedScope: []string{\"foo\", \"bar\"},\n\t\t\t\t},\n\t\t\t\tRedirectURI:   urlparse(\"https://foobar.com/cb\"),\n\t\t\t\tResponseTypes: []string{\"foo\", \"bar\"},\n\t\t\t\tState:         \"foobar\",\n\t\t\t},\n\t\t\tisRedirValid: true,\n\t\t},\n\t} {\n\t\tassert.Equal(t, c.ar.Client, c.ar.GetClient(), \"%d\", k)\n\t\tassert.Equal(t, c.ar.RedirectURI, c.ar.GetRedirectURI(), \"%d\", k)\n\t\tassert.Equal(t, c.ar.RequestedAt, c.ar.GetRequestedAt(), \"%d\", k)\n\t\tassert.Equal(t, c.ar.ResponseTypes, c.ar.GetResponseTypes(), \"%d\", k)\n\t\tassert.Equal(t, c.ar.RequestedScope, c.ar.GetRequestedScopes(), \"%d\", k)\n\t\tassert.Equal(t, c.ar.State, c.ar.GetState(), \"%d\", k)\n\t\tassert.Equal(t, c.isRedirValid, c.ar.IsRedirectURIValid(), \"%d\", k)\n\n\t\tc.ar.GrantScope(\"foo\")\n\t\tc.ar.SetSession(&DefaultSession{})\n\t\tc.ar.SetRequestedScopes([]string{\"foo\"})\n\t\tassert.True(t, c.ar.GetGrantedScopes().Has(\"foo\"))\n\t\tassert.True(t, c.ar.GetRequestedScopes().Has(\"foo\"))\n\t\tassert.Equal(t, &DefaultSession{}, c.ar.GetSession())\n\t}\n}\n"
        },
        {
          "name": "authorize_response.go",
          "type": "blob",
          "size": 0.84765625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"net/http\"\n\t\"net/url\"\n)\n\n// AuthorizeResponse is an implementation of AuthorizeResponder\ntype AuthorizeResponse struct {\n\tHeader     http.Header\n\tParameters url.Values\n\tcode       string\n}\n\nfunc NewAuthorizeResponse() *AuthorizeResponse {\n\treturn &AuthorizeResponse{\n\t\tHeader:     http.Header{},\n\t\tParameters: url.Values{},\n\t}\n}\n\nfunc (a *AuthorizeResponse) GetCode() string {\n\treturn a.code\n}\n\nfunc (a *AuthorizeResponse) GetHeader() http.Header {\n\treturn a.Header\n}\n\nfunc (a *AuthorizeResponse) AddHeader(key, value string) {\n\ta.Header.Add(key, value)\n}\n\nfunc (a *AuthorizeResponse) GetParameters() url.Values {\n\treturn a.Parameters\n}\n\nfunc (a *AuthorizeResponse) AddParameter(key, value string) {\n\tif key == \"code\" {\n\t\ta.code = value\n\t}\n\ta.Parameters.Add(key, value)\n}\n"
        },
        {
          "name": "authorize_response_test.go",
          "type": "blob",
          "size": 0.5341796875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestAuthorizeResponse(t *testing.T) {\n\tar := NewAuthorizeResponse()\n\tar.AddParameter(\"foo\", \"bar\")\n\tar.AddParameter(\"bar\", \"bar\")\n\n\tar.AddHeader(\"foo\", \"foo\")\n\n\tar.AddParameter(\"code\", \"bar\")\n\tassert.Equal(t, \"bar\", ar.GetCode())\n\n\tassert.Equal(t, \"bar\", ar.GetParameters().Get(\"foo\"))\n\tassert.Equal(t, \"foo\", ar.GetHeader().Get(\"foo\"))\n\tassert.Equal(t, \"bar\", ar.GetParameters().Get(\"bar\"))\n}\n"
        },
        {
          "name": "authorize_response_writer.go",
          "type": "blob",
          "size": 1.28125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/ory/x/errorsx\"\n\t\"github.com/ory/x/otelx\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\nfunc (f *Fosite) NewAuthorizeResponse(ctx context.Context, ar AuthorizeRequester, session Session) (_ AuthorizeResponder, err error) {\n\tctx, span := trace.SpanFromContext(ctx).TracerProvider().Tracer(\"github.com/ory/fosite\").Start(ctx, \"Fosite.NewAuthorizeResponse\")\n\tdefer otelx.End(span, &err)\n\n\tvar resp = &AuthorizeResponse{\n\t\tHeader:     http.Header{},\n\t\tParameters: url.Values{},\n\t}\n\n\tctx = context.WithValue(ctx, AuthorizeRequestContextKey, ar)\n\tctx = context.WithValue(ctx, AuthorizeResponseContextKey, resp)\n\n\tar.SetSession(session)\n\tfor _, h := range f.Config.GetAuthorizeEndpointHandlers(ctx) {\n\t\tif err := h.HandleAuthorizeEndpointRequest(ctx, ar, resp); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif !ar.DidHandleAllResponseTypes() {\n\t\treturn nil, errorsx.WithStack(ErrUnsupportedResponseType)\n\t}\n\n\tif ar.GetDefaultResponseMode() == ResponseModeFragment && ar.GetResponseMode() == ResponseModeQuery {\n\t\treturn nil, ErrUnsupportedResponseMode.WithHintf(\"Insecure response_mode '%s' for the response_type '%s'.\", ar.GetResponseMode(), ar.GetResponseTypes())\n\t}\n\n\treturn resp, nil\n}\n"
        },
        {
          "name": "authorize_response_writer_test.go",
          "type": "blob",
          "size": 3.2890625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\n\t\"github.com/ory/fosite\"\n\t. \"github.com/ory/fosite\"\n\t. \"github.com/ory/fosite/internal\"\n)\n\nfunc TestNewAuthorizeResponse(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\thandlers := []*MockAuthorizeEndpointHandler{NewMockAuthorizeEndpointHandler(ctrl)}\n\tar := NewMockAuthorizeRequester(ctrl)\n\tdefer ctrl.Finish()\n\n\tctx := context.Background()\n\toauth2 := &Fosite{Config: &Config{AuthorizeEndpointHandlers: AuthorizeEndpointHandlers{handlers[0]}}}\n\tduo := &Fosite{Config: &Config{AuthorizeEndpointHandlers: AuthorizeEndpointHandlers{handlers[0], handlers[0]}}}\n\tar.EXPECT().SetSession(gomock.Eq(new(DefaultSession))).AnyTimes()\n\tfooErr := errors.New(\"foo\")\n\tfor k, c := range []struct {\n\t\tisErr     bool\n\t\tmock      func()\n\t\texpectErr error\n\t}{\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\thandlers[0].EXPECT().HandleAuthorizeEndpointRequest(gomock.Any(), gomock.Any(), gomock.Any()).Return(fooErr)\n\t\t\t},\n\t\t\tisErr:     true,\n\t\t\texpectErr: fooErr,\n\t\t},\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\thandlers[0].EXPECT().HandleAuthorizeEndpointRequest(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t\tar.EXPECT().DidHandleAllResponseTypes().Return(true)\n\t\t\t\tar.EXPECT().GetDefaultResponseMode().Return(ResponseModeFragment)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeDefault)\n\t\t\t},\n\t\t\tisErr: false,\n\t\t},\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\toauth2 = duo\n\t\t\t\thandlers[0].EXPECT().HandleAuthorizeEndpointRequest(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t\thandlers[0].EXPECT().HandleAuthorizeEndpointRequest(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t\tar.EXPECT().DidHandleAllResponseTypes().Return(true)\n\t\t\t\tar.EXPECT().GetDefaultResponseMode().Return(ResponseModeFragment)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeDefault)\n\t\t\t},\n\t\t\tisErr: false,\n\t\t},\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\toauth2 = duo\n\t\t\t\thandlers[0].EXPECT().HandleAuthorizeEndpointRequest(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t\thandlers[0].EXPECT().HandleAuthorizeEndpointRequest(gomock.Any(), gomock.Any(), gomock.Any()).Return(fooErr)\n\t\t\t},\n\t\t\tisErr:     true,\n\t\t\texpectErr: fooErr,\n\t\t},\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\toauth2 = duo\n\t\t\t\thandlers[0].EXPECT().HandleAuthorizeEndpointRequest(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t\thandlers[0].EXPECT().HandleAuthorizeEndpointRequest(gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t\tar.EXPECT().DidHandleAllResponseTypes().Return(true)\n\t\t\t\tar.EXPECT().GetDefaultResponseMode().Return(ResponseModeFragment)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeQuery).Times(2)\n\t\t\t\tar.EXPECT().GetResponseTypes().Return([]string{\"token\", \"code\"})\n\t\t\t},\n\t\t\tisErr:     true,\n\t\t\texpectErr: ErrUnsupportedResponseMode.WithHintf(\"Insecure response_mode '%s' for the response_type '%s'.\", ResponseModeQuery, fosite.Arguments{\"token\", \"code\"}),\n\t\t},\n\t} {\n\t\tc.mock()\n\t\tresponder, err := oauth2.NewAuthorizeResponse(ctx, ar, new(DefaultSession))\n\t\tassert.Equal(t, c.isErr, err != nil, \"%d: %s\", k, err)\n\t\tif err != nil {\n\t\t\tassert.Equal(t, c.expectErr, err, \"%d: %s\", k, err)\n\t\t\tassert.Nil(t, responder, \"%d\", k)\n\t\t} else {\n\t\t\tassert.NotNil(t, responder, \"%d\", k)\n\t\t}\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n"
        },
        {
          "name": "authorize_validators_test.go",
          "type": "blob",
          "size": 1.6298828125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestValidateResponseTypes(t *testing.T) {\n\tf := &Fosite{Config: new(Config)}\n\tfor k, tc := range []struct {\n\t\trt        string\n\t\tart       []string\n\t\texpectErr bool\n\t}{\n\t\t{\n\t\t\trt:        \"code\",\n\t\t\tart:       []string{\"token\"},\n\t\t\texpectErr: true,\n\t\t},\n\t\t{\n\t\t\trt:  \"token\",\n\t\t\tart: []string{\"token\"},\n\t\t},\n\t\t{\n\t\t\trt:        \"\",\n\t\t\tart:       []string{\"token\"},\n\t\t\texpectErr: true,\n\t\t},\n\t\t{\n\t\t\trt:        \"  \",\n\t\t\tart:       []string{\"token\"},\n\t\t\texpectErr: true,\n\t\t},\n\t\t{\n\t\t\trt:        \"disable\",\n\t\t\tart:       []string{\"token\"},\n\t\t\texpectErr: true,\n\t\t},\n\t\t{\n\t\t\trt:        \"code token\",\n\t\t\tart:       []string{\"token\", \"code\"},\n\t\t\texpectErr: true,\n\t\t},\n\t\t{\n\t\t\trt:  \"code token\",\n\t\t\tart: []string{\"token\", \"token code\"},\n\t\t},\n\t\t{\n\t\t\trt:  \"code token\",\n\t\t\tart: []string{\"token\", \"code token\"},\n\t\t},\n\t\t{\n\t\t\trt:        \"code token\",\n\t\t\tart:       []string{\"token\", \"code token id_token\"},\n\t\t\texpectErr: true,\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tr := &http.Request{Form: url.Values{\"response_type\": {tc.rt}}}\n\t\t\tif tc.rt == \"disable\" {\n\t\t\t\tr = &http.Request{Form: url.Values{}}\n\t\t\t}\n\t\t\tar := NewAuthorizeRequest()\n\t\t\tar.Request.Client = &DefaultClient{ResponseTypes: tc.art}\n\n\t\t\terr := f.validateResponseTypes(r, ar)\n\t\t\tif tc.expectErr {\n\t\t\t\trequire.Error(t, err)\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\tassert.EqualValues(t, RemoveEmpty(strings.Split(tc.rt, \" \")), ar.GetResponseTypes())\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "authorize_write.go",
          "type": "blob",
          "size": 1.8134765625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"net/http\"\n)\n\nfunc (f *Fosite) WriteAuthorizeResponse(ctx context.Context, rw http.ResponseWriter, ar AuthorizeRequester, resp AuthorizeResponder) {\n\t// Set custom headers, e.g. \"X-MySuperCoolCustomHeader\" or \"X-DONT-CACHE-ME\"...\n\twh := rw.Header()\n\trh := resp.GetHeader()\n\tfor k := range rh {\n\t\twh.Set(k, rh.Get(k))\n\t}\n\n\twh.Set(\"Cache-Control\", \"no-store\")\n\twh.Set(\"Pragma\", \"no-cache\")\n\n\tredir := ar.GetRedirectURI()\n\tswitch rm := ar.GetResponseMode(); rm {\n\tcase ResponseModeFormPost:\n\t\t//form_post\n\t\trw.Header().Add(\"Content-Type\", \"text/html;charset=UTF-8\")\n\t\tWriteAuthorizeFormPostResponse(redir.String(), resp.GetParameters(), GetPostFormHTMLTemplate(ctx, f), rw)\n\t\treturn\n\tcase ResponseModeQuery, ResponseModeDefault:\n\t\t// Explicit grants\n\t\tq := redir.Query()\n\t\trq := resp.GetParameters()\n\t\tfor k := range rq {\n\t\t\tq.Set(k, rq.Get(k))\n\t\t}\n\t\tredir.RawQuery = q.Encode()\n\t\tsendRedirect(redir.String(), rw)\n\t\treturn\n\tcase ResponseModeFragment:\n\t\t// Implicit grants\n\t\t// The endpoint URI MUST NOT include a fragment component.\n\t\tredir.Fragment = \"\"\n\n\t\tu := redir.String()\n\t\tfr := resp.GetParameters()\n\t\tif len(fr) > 0 {\n\t\t\tu = u + \"#\" + fr.Encode()\n\t\t}\n\t\tsendRedirect(u, rw)\n\t\treturn\n\tdefault:\n\t\tif f.ResponseModeHandler(ctx).ResponseModes().Has(rm) {\n\t\t\tf.ResponseModeHandler(ctx).WriteAuthorizeResponse(ctx, rw, ar, resp)\n\t\t\treturn\n\t\t}\n\t}\n}\n\n// https://tools.ietf.org/html/rfc6749#section-4.1.1\n// When a decision is established, the authorization server directs the\n// user-agent to the provided client redirection URI using an HTTP\n// redirection response, or by other means available to it via the\n// user-agent.\nfunc sendRedirect(url string, rw http.ResponseWriter) {\n\trw.Header().Set(\"Location\", url)\n\trw.WriteHeader(http.StatusSeeOther)\n}\n"
        },
        {
          "name": "authorize_write_test.go",
          "type": "blob",
          "size": 6.9423828125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/stretchr/testify/assert\"\n\n\t. \"github.com/ory/fosite\"\n\t. \"github.com/ory/fosite/internal\"\n)\n\nfunc TestWriteAuthorizeResponse(t *testing.T) {\n\toauth2 := &Fosite{Config: new(Config)}\n\theader := http.Header{}\n\tctrl := gomock.NewController(t)\n\trw := NewMockResponseWriter(ctrl)\n\tar := NewMockAuthorizeRequester(ctrl)\n\tresp := NewMockAuthorizeResponder(ctrl)\n\tdefer ctrl.Finish()\n\n\tfor k, c := range []struct {\n\t\tsetup  func()\n\t\texpect func()\n\t}{\n\t\t{\n\t\t\tsetup: func() {\n\t\t\t\tredir, _ := url.Parse(\"https://foobar.com/?foo=bar\")\n\t\t\t\tar.EXPECT().GetRedirectURI().Return(redir)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeDefault)\n\t\t\t\tresp.EXPECT().GetParameters().Return(url.Values{})\n\t\t\t\tresp.EXPECT().GetHeader().Return(http.Header{})\n\n\t\t\t\trw.EXPECT().Header().Return(header).Times(2)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\texpect: func() {\n\t\t\t\tassert.Equal(t, http.Header{\n\t\t\t\t\t\"Location\":      []string{\"https://foobar.com/?foo=bar\"},\n\t\t\t\t\t\"Cache-Control\": []string{\"no-store\"},\n\t\t\t\t\t\"Pragma\":        []string{\"no-cache\"},\n\t\t\t\t}, header)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tsetup: func() {\n\t\t\t\tredir, _ := url.Parse(\"https://foobar.com/?foo=bar\")\n\t\t\t\tar.EXPECT().GetRedirectURI().Return(redir)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeFragment)\n\t\t\t\tresp.EXPECT().GetParameters().Return(url.Values{\"bar\": {\"baz\"}})\n\t\t\t\tresp.EXPECT().GetHeader().Return(http.Header{})\n\n\t\t\t\trw.EXPECT().Header().Return(header).Times(2)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\texpect: func() {\n\t\t\t\tassert.Equal(t, http.Header{\n\t\t\t\t\t\"Location\":      []string{\"https://foobar.com/?foo=bar#bar=baz\"},\n\t\t\t\t\t\"Cache-Control\": []string{\"no-store\"},\n\t\t\t\t\t\"Pragma\":        []string{\"no-cache\"},\n\t\t\t\t}, header)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tsetup: func() {\n\t\t\t\tredir, _ := url.Parse(\"https://foobar.com/?foo=bar\")\n\t\t\t\tar.EXPECT().GetRedirectURI().Return(redir)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeQuery)\n\t\t\t\tresp.EXPECT().GetParameters().Return(url.Values{\"bar\": {\"baz\"}})\n\t\t\t\tresp.EXPECT().GetHeader().Return(http.Header{})\n\n\t\t\t\trw.EXPECT().Header().Return(header).Times(2)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\texpect: func() {\n\t\t\t\texpectedUrl, _ := url.Parse(\"https://foobar.com/?foo=bar&bar=baz\")\n\t\t\t\tactualUrl, err := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Nil(t, err)\n\t\t\t\tassert.Equal(t, expectedUrl.Query(), actualUrl.Query())\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tsetup: func() {\n\t\t\t\tredir, _ := url.Parse(\"https://foobar.com/?foo=bar\")\n\t\t\t\tar.EXPECT().GetRedirectURI().Return(redir)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeFragment)\n\t\t\t\tresp.EXPECT().GetParameters().Return(url.Values{\"bar\": {\"b+az ab\"}})\n\t\t\t\tresp.EXPECT().GetHeader().Return(http.Header{\"X-Bar\": {\"baz\"}})\n\n\t\t\t\trw.EXPECT().Header().Return(header).Times(2)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\texpect: func() {\n\t\t\t\tassert.Equal(t, http.Header{\n\t\t\t\t\t\"X-Bar\":         {\"baz\"},\n\t\t\t\t\t\"Location\":      {\"https://foobar.com/?foo=bar#bar=b%2Baz+ab\"},\n\t\t\t\t\t\"Cache-Control\": []string{\"no-store\"},\n\t\t\t\t\t\"Pragma\":        []string{\"no-cache\"},\n\t\t\t\t}, header)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tsetup: func() {\n\t\t\t\tredir, _ := url.Parse(\"https://foobar.com/?foo=bar\")\n\t\t\t\tar.EXPECT().GetRedirectURI().Return(redir)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeQuery)\n\t\t\t\tresp.EXPECT().GetParameters().Return(url.Values{\"bar\": {\"b+az\"}, \"scope\": {\"a b\"}})\n\t\t\t\tresp.EXPECT().GetHeader().Return(http.Header{\"X-Bar\": {\"baz\"}})\n\n\t\t\t\trw.EXPECT().Header().Return(header).Times(2)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\texpect: func() {\n\t\t\t\texpectedUrl, err := url.Parse(\"https://foobar.com/?foo=bar&bar=b%2Baz&scope=a+b\")\n\t\t\t\tassert.Nil(t, err)\n\t\t\t\tactualUrl, err := url.Parse(header.Get(\"Location\"))\n\t\t\t\tassert.Nil(t, err)\n\t\t\t\tassert.Equal(t, expectedUrl.Query(), actualUrl.Query())\n\t\t\t\tassert.Equal(t, \"no-cache\", header.Get(\"Pragma\"))\n\t\t\t\tassert.Equal(t, \"no-store\", header.Get(\"Cache-Control\"))\n\t\t\t\tassert.Equal(t, \"baz\", header.Get(\"X-Bar\"))\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tsetup: func() {\n\t\t\t\tredir, _ := url.Parse(\"https://foobar.com/?foo=bar\")\n\t\t\t\tar.EXPECT().GetRedirectURI().Return(redir)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeFragment)\n\t\t\t\tresp.EXPECT().GetParameters().Return(url.Values{\"scope\": {\"api:*\"}})\n\t\t\t\tresp.EXPECT().GetHeader().Return(http.Header{\"X-Bar\": {\"baz\"}})\n\n\t\t\t\trw.EXPECT().Header().Return(header).Times(2)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\texpect: func() {\n\t\t\t\tassert.Equal(t, http.Header{\n\t\t\t\t\t\"X-Bar\":         {\"baz\"},\n\t\t\t\t\t\"Location\":      {\"https://foobar.com/?foo=bar#scope=api%3A%2A\"},\n\t\t\t\t\t\"Cache-Control\": []string{\"no-store\"},\n\t\t\t\t\t\"Pragma\":        []string{\"no-cache\"},\n\t\t\t\t}, header)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tsetup: func() {\n\t\t\t\tredir, _ := url.Parse(\"https://foobar.com/?foo=bar#bar=baz\")\n\t\t\t\tar.EXPECT().GetRedirectURI().Return(redir)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeFragment)\n\t\t\t\tresp.EXPECT().GetParameters().Return(url.Values{\"qux\": {\"quux\"}})\n\t\t\t\tresp.EXPECT().GetHeader().Return(http.Header{})\n\n\t\t\t\trw.EXPECT().Header().Return(header).Times(2)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\texpect: func() {\n\t\t\t\tassert.Equal(t, http.Header{\n\t\t\t\t\t\"Location\":      {\"https://foobar.com/?foo=bar#qux=quux\"},\n\t\t\t\t\t\"Cache-Control\": []string{\"no-store\"},\n\t\t\t\t\t\"Pragma\":        []string{\"no-cache\"},\n\t\t\t\t}, header)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tsetup: func() {\n\t\t\t\tredir, _ := url.Parse(\"https://foobar.com/?foo=bar\")\n\t\t\t\tar.EXPECT().GetRedirectURI().Return(redir)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeFragment)\n\t\t\t\tresp.EXPECT().GetParameters().Return(url.Values{\"state\": {\"{\\\"a\\\":\\\"b=c&d=e\\\"}\"}})\n\t\t\t\tresp.EXPECT().GetHeader().Return(http.Header{})\n\n\t\t\t\trw.EXPECT().Header().Return(header).Times(2)\n\t\t\t\trw.EXPECT().WriteHeader(http.StatusSeeOther)\n\t\t\t},\n\t\t\texpect: func() {\n\t\t\t\tassert.Equal(t, http.Header{\n\t\t\t\t\t\"Location\":      {\"https://foobar.com/?foo=bar#state=%7B%22a%22%3A%22b%3Dc%26d%3De%22%7D\"},\n\t\t\t\t\t\"Cache-Control\": []string{\"no-store\"},\n\t\t\t\t\t\"Pragma\":        []string{\"no-cache\"},\n\t\t\t\t}, header)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tsetup: func() {\n\t\t\t\tredir, _ := url.Parse(\"https://foobar.com/?foo=bar\")\n\t\t\t\tar.EXPECT().GetRedirectURI().Return(redir)\n\t\t\t\tar.EXPECT().GetResponseMode().Return(ResponseModeFormPost)\n\t\t\t\tresp.EXPECT().GetHeader().Return(http.Header{\"X-Bar\": {\"baz\"}})\n\t\t\t\tresp.EXPECT().GetParameters().Return(url.Values{\"code\": {\"poz65kqoneu\"}, \"state\": {\"qm6dnsrn\"}})\n\n\t\t\t\trw.EXPECT().Header().Return(header).AnyTimes()\n\t\t\t\trw.EXPECT().Write(gomock.Any()).AnyTimes()\n\t\t\t},\n\t\t\texpect: func() {\n\t\t\t\tassert.Equal(t, \"text/html;charset=UTF-8\", header.Get(\"Content-Type\"))\n\t\t\t},\n\t\t},\n\t} {\n\t\tt.Logf(\"Starting test case %d\", k)\n\t\tc.setup()\n\t\toauth2.WriteAuthorizeResponse(context.Background(), rw, ar, resp)\n\t\tc.expect()\n\t\theader = http.Header{}\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n"
        },
        {
          "name": "client.go",
          "type": "blob",
          "size": 6.3623046875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"github.com/go-jose/go-jose/v3\"\n)\n\n// Client represents a client or an app.\ntype Client interface {\n\t// GetID returns the client ID.\n\tGetID() string\n\n\t// GetHashedSecret returns the hashed secret as it is stored in the store.\n\tGetHashedSecret() []byte\n\n\t// GetRedirectURIs returns the client's allowed redirect URIs.\n\tGetRedirectURIs() []string\n\n\t// GetGrantTypes returns the client's allowed grant types.\n\tGetGrantTypes() Arguments\n\n\t// GetResponseTypes returns the client's allowed response types.\n\t// All allowed combinations of response types have to be listed, each combination having\n\t// response types of the combination separated by a space.\n\tGetResponseTypes() Arguments\n\n\t// GetScopes returns the scopes this client is allowed to request.\n\tGetScopes() Arguments\n\n\t// IsPublic returns true, if this client is marked as public.\n\tIsPublic() bool\n\n\t// GetAudience returns the allowed audience(s) for this client.\n\tGetAudience() Arguments\n}\n\n// ClientWithSecretRotation extends Client interface by a method providing a slice of rotated secrets.\ntype ClientWithSecretRotation interface {\n\tClient\n\t// GetRotatedHashes returns a slice of hashed secrets used for secrets rotation.\n\tGetRotatedHashes() [][]byte\n}\n\n// OpenIDConnectClient represents a client capable of performing OpenID Connect requests.\ntype OpenIDConnectClient interface {\n\t// GetRequestURIs is an array of request_uri values that are pre-registered by the RP for use at the OP. Servers MAY\n\t// cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request.\n\t// OPs can require that request_uri values used be pre-registered with the require_request_uri_registration\n\t// discovery parameter.\n\tGetRequestURIs() []string\n\n\t// GetJSONWebKeys returns the JSON Web Key Set containing the public key used by the client to authenticate.\n\tGetJSONWebKeys() *jose.JSONWebKeySet\n\n\t// GetJSONWebKeys returns the URL for lookup of JSON Web Key Set containing the\n\t// public key used by the client to authenticate.\n\tGetJSONWebKeysURI() string\n\n\t// JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP.\n\t// All Request Objects from this Client MUST be rejected, if not signed with this algorithm.\n\tGetRequestObjectSigningAlgorithm() string\n\n\t// Requested Client Authentication method for the Token Endpoint. The options are client_secret_post,\n\t// client_secret_basic, private_key_jwt, and none.\n\tGetTokenEndpointAuthMethod() string\n\n\t// JWS [JWS] alg algorithm [JWA] that MUST be used for signing the JWT [JWT] used to authenticate the\n\t// Client at the Token Endpoint for the private_key_jwt authentication method.\n\tGetTokenEndpointAuthSigningAlgorithm() string\n}\n\n// ResponseModeClient represents a client capable of handling response_mode\ntype ResponseModeClient interface {\n\t// GetResponseMode returns the response modes that client is allowed to send\n\tGetResponseModes() []ResponseModeType\n}\n\n// DefaultClient is a simple default implementation of the Client interface.\ntype DefaultClient struct {\n\tID             string   `json:\"id\"`\n\tSecret         []byte   `json:\"client_secret,omitempty\"`\n\tRotatedSecrets [][]byte `json:\"rotated_secrets,omitempty\"`\n\tRedirectURIs   []string `json:\"redirect_uris\"`\n\tGrantTypes     []string `json:\"grant_types\"`\n\tResponseTypes  []string `json:\"response_types\"`\n\tScopes         []string `json:\"scopes\"`\n\tAudience       []string `json:\"audience\"`\n\tPublic         bool     `json:\"public\"`\n}\n\ntype DefaultOpenIDConnectClient struct {\n\t*DefaultClient\n\tJSONWebKeysURI                    string              `json:\"jwks_uri\"`\n\tJSONWebKeys                       *jose.JSONWebKeySet `json:\"jwks\"`\n\tTokenEndpointAuthMethod           string              `json:\"token_endpoint_auth_method\"`\n\tRequestURIs                       []string            `json:\"request_uris\"`\n\tRequestObjectSigningAlgorithm     string              `json:\"request_object_signing_alg\"`\n\tTokenEndpointAuthSigningAlgorithm string              `json:\"token_endpoint_auth_signing_alg\"`\n}\n\ntype DefaultResponseModeClient struct {\n\t*DefaultClient\n\tResponseModes []ResponseModeType `json:\"response_modes\"`\n}\n\nfunc (c *DefaultClient) GetID() string {\n\treturn c.ID\n}\n\nfunc (c *DefaultClient) IsPublic() bool {\n\treturn c.Public\n}\n\nfunc (c *DefaultClient) GetAudience() Arguments {\n\treturn c.Audience\n}\n\nfunc (c *DefaultClient) GetRedirectURIs() []string {\n\treturn c.RedirectURIs\n}\n\nfunc (c *DefaultClient) GetHashedSecret() []byte {\n\treturn c.Secret\n}\n\nfunc (c *DefaultClient) GetRotatedHashes() [][]byte {\n\treturn c.RotatedSecrets\n}\n\nfunc (c *DefaultClient) GetScopes() Arguments {\n\treturn c.Scopes\n}\n\nfunc (c *DefaultClient) GetGrantTypes() Arguments {\n\t// https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata\n\t//\n\t// JSON array containing a list of the OAuth 2.0 Grant Types that the Client is declaring\n\t// that it will restrict itself to using.\n\t// If omitted, the default is that the Client will use only the authorization_code Grant Type.\n\tif len(c.GrantTypes) == 0 {\n\t\treturn Arguments{\"authorization_code\"}\n\t}\n\treturn Arguments(c.GrantTypes)\n}\n\nfunc (c *DefaultClient) GetResponseTypes() Arguments {\n\t// https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata\n\t//\n\t// JSON array containing a list of the OAuth 2.0 response_type values that the Client is declaring\n\t// that it will restrict itself to using. If omitted, the default is that the Client will use\n\t// only the code Response Type.\n\tif len(c.ResponseTypes) == 0 {\n\t\treturn Arguments{\"code\"}\n\t}\n\treturn Arguments(c.ResponseTypes)\n}\n\nfunc (c *DefaultOpenIDConnectClient) GetJSONWebKeysURI() string {\n\treturn c.JSONWebKeysURI\n}\n\nfunc (c *DefaultOpenIDConnectClient) GetJSONWebKeys() *jose.JSONWebKeySet {\n\treturn c.JSONWebKeys\n}\n\nfunc (c *DefaultOpenIDConnectClient) GetTokenEndpointAuthSigningAlgorithm() string {\n\tif c.TokenEndpointAuthSigningAlgorithm == \"\" {\n\t\treturn \"RS256\"\n\t} else {\n\t\treturn c.TokenEndpointAuthSigningAlgorithm\n\t}\n}\n\nfunc (c *DefaultOpenIDConnectClient) GetRequestObjectSigningAlgorithm() string {\n\treturn c.RequestObjectSigningAlgorithm\n}\n\nfunc (c *DefaultOpenIDConnectClient) GetTokenEndpointAuthMethod() string {\n\treturn c.TokenEndpointAuthMethod\n}\n\nfunc (c *DefaultOpenIDConnectClient) GetRequestURIs() []string {\n\treturn c.RequestURIs\n}\n\nfunc (c *DefaultResponseModeClient) GetResponseModes() []ResponseModeType {\n\treturn c.ResponseModes\n}\n"
        },
        {
          "name": "client_authentication.go",
          "type": "blob",
          "size": 13.376953125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"crypto/ecdsa\"\n\t\"crypto/rsa\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/ory/x/errorsx\"\n\n\t\"github.com/go-jose/go-jose/v3\"\n\t\"github.com/pkg/errors\"\n\n\t\"github.com/ory/fosite/token/jwt\"\n)\n\n// ClientAuthenticationStrategy provides a method signature for authenticating a client request\ntype ClientAuthenticationStrategy func(context.Context, *http.Request, url.Values) (Client, error)\n\n// #nosec:gosec G101 - False Positive\nconst clientAssertionJWTBearerType = \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\n\nfunc (f *Fosite) findClientPublicJWK(ctx context.Context, oidcClient OpenIDConnectClient, t *jwt.Token, expectsRSAKey bool) (interface{}, error) {\n\tif set := oidcClient.GetJSONWebKeys(); set != nil {\n\t\treturn findPublicKey(t, set, expectsRSAKey)\n\t}\n\n\tif location := oidcClient.GetJSONWebKeysURI(); len(location) > 0 {\n\t\tkeys, err := f.Config.GetJWKSFetcherStrategy(ctx).Resolve(ctx, location, false)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif key, err := findPublicKey(t, keys, expectsRSAKey); err == nil {\n\t\t\treturn key, nil\n\t\t}\n\n\t\tkeys, err = f.Config.GetJWKSFetcherStrategy(ctx).Resolve(ctx, location, true)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn findPublicKey(t, keys, expectsRSAKey)\n\t}\n\n\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHint(\"The OAuth 2.0 Client has no JSON Web Keys set registered, but they are needed to complete the request.\"))\n}\n\n// AuthenticateClient authenticates client requests using the configured strategy\n// `Fosite.ClientAuthenticationStrategy`, if nil it uses `Fosite.DefaultClientAuthenticationStrategy`\nfunc (f *Fosite) AuthenticateClient(ctx context.Context, r *http.Request, form url.Values) (Client, error) {\n\tif s := f.Config.GetClientAuthenticationStrategy(ctx); s != nil {\n\t\treturn s(ctx, r, form)\n\t}\n\treturn f.DefaultClientAuthenticationStrategy(ctx, r, form)\n}\n\n// DefaultClientAuthenticationStrategy provides the fosite's default client authentication strategy,\n// HTTP Basic Authentication and JWT Bearer\nfunc (f *Fosite) DefaultClientAuthenticationStrategy(ctx context.Context, r *http.Request, form url.Values) (Client, error) {\n\tif assertionType := form.Get(\"client_assertion_type\"); assertionType == clientAssertionJWTBearerType {\n\t\tassertion := form.Get(\"client_assertion\")\n\t\tif len(assertion) == 0 {\n\t\t\treturn nil, errorsx.WithStack(ErrInvalidRequest.WithHintf(\"The client_assertion request parameter must be set when using client_assertion_type of '%s'.\", clientAssertionJWTBearerType))\n\t\t}\n\n\t\tvar clientID string\n\t\tvar client Client\n\n\t\ttoken, err := jwt.ParseWithClaims(assertion, jwt.MapClaims{}, func(t *jwt.Token) (interface{}, error) {\n\t\t\tvar err error\n\t\t\tclientID, _, err = clientCredentialsFromRequestBody(form, false)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tif clientID == \"\" {\n\t\t\t\tclaims := t.Claims\n\t\t\t\tif sub, ok := claims[\"sub\"].(string); !ok {\n\t\t\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHint(\"The claim 'sub' from the client_assertion JSON Web Token is undefined.\"))\n\t\t\t\t} else {\n\t\t\t\t\tclientID = sub\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tclient, err = f.Store.GetClient(ctx, clientID)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithWrap(err).WithDebug(err.Error()))\n\t\t\t}\n\n\t\t\toidcClient, ok := client.(OpenIDConnectClient)\n\t\t\tif !ok {\n\t\t\t\treturn nil, errorsx.WithStack(ErrInvalidRequest.WithHint(\"The server configuration does not support OpenID Connect specific authentication methods.\"))\n\t\t\t}\n\n\t\t\tswitch oidcClient.GetTokenEndpointAuthMethod() {\n\t\t\tcase \"private_key_jwt\":\n\t\t\t\tbreak\n\t\t\tcase \"none\":\n\t\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHint(\"This requested OAuth 2.0 client does not support client authentication, however 'client_assertion' was provided in the request.\"))\n\t\t\tcase \"client_secret_post\":\n\t\t\t\tfallthrough\n\t\t\tcase \"client_secret_basic\":\n\t\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHintf(\"This requested OAuth 2.0 client only supports client authentication method '%s', however 'client_assertion' was provided in the request.\", oidcClient.GetTokenEndpointAuthMethod()))\n\t\t\tcase \"client_secret_jwt\":\n\t\t\t\tfallthrough\n\t\t\tdefault:\n\t\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHintf(\"This requested OAuth 2.0 client only supports client authentication method '%s', however that method is not supported by this server.\", oidcClient.GetTokenEndpointAuthMethod()))\n\t\t\t}\n\n\t\t\tif oidcClient.GetTokenEndpointAuthSigningAlgorithm() != fmt.Sprintf(\"%s\", t.Header[\"alg\"]) {\n\t\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHintf(\"The 'client_assertion' uses signing algorithm '%s' but the requested OAuth 2.0 Client enforces signing algorithm '%s'.\", t.Header[\"alg\"], oidcClient.GetTokenEndpointAuthSigningAlgorithm()))\n\t\t\t}\n\t\t\tswitch t.Method {\n\t\t\tcase jose.RS256, jose.RS384, jose.RS512:\n\t\t\t\treturn f.findClientPublicJWK(ctx, oidcClient, t, true)\n\t\t\tcase jose.ES256, jose.ES384, jose.ES512:\n\t\t\t\treturn f.findClientPublicJWK(ctx, oidcClient, t, false)\n\t\t\tcase jose.PS256, jose.PS384, jose.PS512:\n\t\t\t\treturn f.findClientPublicJWK(ctx, oidcClient, t, true)\n\t\t\tcase jose.HS256, jose.HS384, jose.HS512:\n\t\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHint(\"This authorization server does not support client authentication method 'client_secret_jwt'.\"))\n\t\t\tdefault:\n\t\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHintf(\"The 'client_assertion' request parameter uses unsupported signing algorithm '%s'.\", t.Header[\"alg\"]))\n\t\t\t}\n\t\t})\n\t\tif err != nil {\n\t\t\t// Do not re-process already enhanced errors\n\t\t\tvar e *jwt.ValidationError\n\t\t\tif errors.As(err, &e) {\n\t\t\t\tif e.Inner != nil {\n\t\t\t\t\treturn nil, e.Inner\n\t\t\t\t}\n\t\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHint(\"Unable to verify the integrity of the 'client_assertion' value.\").WithWrap(err).WithDebug(err.Error()))\n\t\t\t}\n\t\t\treturn nil, err\n\t\t} else if err := token.Claims.Valid(); err != nil {\n\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHint(\"Unable to verify the request object because its claims could not be validated, check if the expiry time is set correctly.\").WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\n\t\tclaims := token.Claims\n\t\tvar jti string\n\t\tif !claims.VerifyIssuer(clientID, true) {\n\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHint(\"Claim 'iss' from 'client_assertion' must match the 'client_id' of the OAuth 2.0 Client.\"))\n\t\t} else if len(f.Config.GetTokenURLs(ctx)) == 0 {\n\t\t\treturn nil, errorsx.WithStack(ErrMisconfiguration.WithHint(\"The authorization server's token endpoint URL has not been set.\"))\n\t\t} else if sub, ok := claims[\"sub\"].(string); !ok || sub != clientID {\n\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHint(\"Claim 'sub' from 'client_assertion' must match the 'client_id' of the OAuth 2.0 Client.\"))\n\t\t} else if jti, ok = claims[\"jti\"].(string); !ok || len(jti) == 0 {\n\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHint(\"Claim 'jti' from 'client_assertion' must be set but is not.\"))\n\t\t} else if f.Store.ClientAssertionJWTValid(ctx, jti) != nil {\n\t\t\treturn nil, errorsx.WithStack(ErrJTIKnown.WithHint(\"Claim 'jti' from 'client_assertion' MUST only be used once.\"))\n\t\t}\n\n\t\t// type conversion according to jwt.MapClaims.VerifyExpiresAt\n\t\tvar expiry int64\n\t\terr = nil\n\t\tswitch exp := claims[\"exp\"].(type) {\n\t\tcase float64:\n\t\t\texpiry = int64(exp)\n\t\tcase int64:\n\t\t\texpiry = exp\n\t\tcase json.Number:\n\t\t\texpiry, err = exp.Int64()\n\t\tdefault:\n\t\t\terr = ErrInvalidClient.WithHint(\"Unable to type assert the expiry time from claims. This should not happen as we validate the expiry time already earlier with token.Claims.Valid()\")\n\t\t}\n\n\t\tif err != nil {\n\t\t\treturn nil, errorsx.WithStack(err)\n\t\t}\n\t\tif err := f.Store.SetClientAssertionJWT(ctx, jti, time.Unix(expiry, 0)); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif !audienceMatchesTokenURLs(claims, f.Config.GetTokenURLs(ctx)) {\n\t\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHintf(\n\t\t\t\t\"Claim 'audience' from 'client_assertion' must match the authorization server's token endpoint '%s'.\",\n\t\t\t\tstrings.Join(f.Config.GetTokenURLs(ctx), \"' or '\")))\n\t\t}\n\n\t\treturn client, nil\n\t} else if len(assertionType) > 0 {\n\t\treturn nil, errorsx.WithStack(ErrInvalidRequest.WithHintf(\"Unknown client_assertion_type '%s'.\", assertionType))\n\t}\n\n\tclientID, clientSecret, err := clientCredentialsFromRequest(r, form)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclient, err := f.Store.GetClient(ctx, clientID)\n\tif err != nil {\n\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithWrap(err).WithDebug(err.Error()))\n\t}\n\n\tif oidcClient, ok := client.(OpenIDConnectClient); !ok {\n\t\t// If this isn't an OpenID Connect client then we actually don't care about any of this, just continue!\n\t} else if ok && form.Get(\"client_id\") != \"\" && form.Get(\"client_secret\") != \"\" && oidcClient.GetTokenEndpointAuthMethod() != \"client_secret_post\" {\n\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHintf(\"The OAuth 2.0 Client supports client authentication method '%s', but method 'client_secret_post' was requested. You must configure the OAuth 2.0 client's 'token_endpoint_auth_method' value to accept 'client_secret_post'.\", oidcClient.GetTokenEndpointAuthMethod()))\n\t} else if _, secret, basicOk := r.BasicAuth(); basicOk && ok && secret != \"\" && oidcClient.GetTokenEndpointAuthMethod() != \"client_secret_basic\" {\n\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHintf(\"The OAuth 2.0 Client supports client authentication method '%s', but method 'client_secret_basic' was requested. You must configure the OAuth 2.0 client's 'token_endpoint_auth_method' value to accept 'client_secret_basic'.\", oidcClient.GetTokenEndpointAuthMethod()))\n\t} else if ok && oidcClient.GetTokenEndpointAuthMethod() != \"none\" && client.IsPublic() {\n\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithHintf(\"The OAuth 2.0 Client supports client authentication method '%s', but method 'none' was requested. You must configure the OAuth 2.0 client's 'token_endpoint_auth_method' value to accept 'none'.\", oidcClient.GetTokenEndpointAuthMethod()))\n\t}\n\n\tif client.IsPublic() {\n\t\treturn client, nil\n\t}\n\n\t// Enforce client authentication\n\tif err := f.checkClientSecret(ctx, client, []byte(clientSecret)); err != nil {\n\t\treturn nil, errorsx.WithStack(ErrInvalidClient.WithWrap(err).WithDebug(err.Error()))\n\t}\n\n\treturn client, nil\n}\n\nfunc audienceMatchesTokenURLs(claims jwt.MapClaims, tokenURLs []string) bool {\n\tfor _, tokenURL := range tokenURLs {\n\t\tif audienceMatchesTokenURL(claims, tokenURL) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc audienceMatchesTokenURL(claims jwt.MapClaims, tokenURL string) bool {\n\tif audiences, ok := claims[\"aud\"].([]interface{}); ok {\n\t\tfor _, aud := range audiences {\n\t\t\tif a, ok := aud.(string); ok && a == tokenURL {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\treturn claims.VerifyAudience(tokenURL, true)\n}\n\nfunc (f *Fosite) checkClientSecret(ctx context.Context, client Client, clientSecret []byte) error {\n\tvar err error\n\terr = f.Config.GetSecretsHasher(ctx).Compare(ctx, client.GetHashedSecret(), clientSecret)\n\tif err == nil {\n\t\treturn nil\n\t}\n\tcc, ok := client.(ClientWithSecretRotation)\n\tif !ok {\n\t\treturn err\n\t}\n\tfor _, hash := range cc.GetRotatedHashes() {\n\t\terr = f.Config.GetSecretsHasher(ctx).Compare(ctx, hash, clientSecret)\n\t\tif err == nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\n\treturn err\n}\n\nfunc findPublicKey(t *jwt.Token, set *jose.JSONWebKeySet, expectsRSAKey bool) (interface{}, error) {\n\tkeys := set.Keys\n\tif len(keys) == 0 {\n\t\treturn nil, errorsx.WithStack(ErrInvalidRequest.WithHintf(\"The retrieved JSON Web Key Set does not contain any key.\"))\n\t}\n\n\tkid, ok := t.Header[\"kid\"].(string)\n\tif ok {\n\t\tkeys = set.Key(kid)\n\t}\n\n\tif len(keys) == 0 {\n\t\treturn nil, errorsx.WithStack(ErrInvalidRequest.WithHintf(\"The JSON Web Token uses signing key with kid '%s', which could not be found.\", kid))\n\t}\n\n\tfor _, key := range keys {\n\t\tif key.Use != \"sig\" {\n\t\t\tcontinue\n\t\t}\n\t\tif expectsRSAKey {\n\t\t\tif k, ok := key.Key.(*rsa.PublicKey); ok {\n\t\t\t\treturn k, nil\n\t\t\t}\n\t\t} else {\n\t\t\tif k, ok := key.Key.(*ecdsa.PublicKey); ok {\n\t\t\t\treturn k, nil\n\t\t\t}\n\t\t}\n\t}\n\n\tif expectsRSAKey {\n\t\treturn nil, errorsx.WithStack(ErrInvalidRequest.WithHintf(\"Unable to find RSA public key with use='sig' for kid '%s' in JSON Web Key Set.\", kid))\n\t} else {\n\t\treturn nil, errorsx.WithStack(ErrInvalidRequest.WithHintf(\"Unable to find ECDSA public key with use='sig' for kid '%s' in JSON Web Key Set.\", kid))\n\t}\n}\n\nfunc clientCredentialsFromRequest(r *http.Request, form url.Values) (clientID, clientSecret string, err error) {\n\tif id, secret, ok := r.BasicAuth(); !ok {\n\t\treturn clientCredentialsFromRequestBody(form, true)\n\t} else if clientID, err = url.QueryUnescape(id); err != nil {\n\t\treturn \"\", \"\", errorsx.WithStack(ErrInvalidRequest.WithHint(\"The client id in the HTTP authorization header could not be decoded from 'application/x-www-form-urlencoded'.\").WithWrap(err).WithDebug(err.Error()))\n\t} else if clientSecret, err = url.QueryUnescape(secret); err != nil {\n\t\treturn \"\", \"\", errorsx.WithStack(ErrInvalidRequest.WithHint(\"The client secret in the HTTP authorization header could not be decoded from 'application/x-www-form-urlencoded'.\").WithWrap(err).WithDebug(err.Error()))\n\t}\n\n\treturn clientID, clientSecret, nil\n}\n\nfunc clientCredentialsFromRequestBody(form url.Values, forceID bool) (clientID, clientSecret string, err error) {\n\tclientID = form.Get(\"client_id\")\n\tclientSecret = form.Get(\"client_secret\")\n\n\tif clientID == \"\" && forceID {\n\t\treturn \"\", \"\", errorsx.WithStack(ErrInvalidRequest.WithHint(\"Client credentials missing or malformed in both HTTP Authorization header and HTTP POST body.\"))\n\t}\n\n\treturn clientID, clientSecret, nil\n}\n"
        },
        {
          "name": "client_authentication_jwks_strategy.go",
          "type": "blob",
          "size": 4.6455078125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"time\"\n\n\t\"github.com/dgraph-io/ristretto\"\n\t\"github.com/hashicorp/go-retryablehttp\"\n\n\t\"github.com/ory/x/errorsx\"\n\n\t\"github.com/go-jose/go-jose/v3\"\n)\n\nconst defaultJWKSFetcherStrategyCachePrefix = \"github.com/ory/fosite.DefaultJWKSFetcherStrategy:\"\n\n// JWKSFetcherStrategy is a strategy which pulls (optionally caches) JSON Web Key Sets from a location,\n// typically a client's jwks_uri.\ntype JWKSFetcherStrategy interface {\n\t// Resolve returns the JSON Web Key Set, or an error if something went wrong. The forceRefresh, if true, forces\n\t// the strategy to fetch the key from the remote. If forceRefresh is false, the strategy may use a caching strategy\n\t// to fetch the key.\n\tResolve(ctx context.Context, location string, ignoreCache bool) (*jose.JSONWebKeySet, error)\n}\n\n// DefaultJWKSFetcherStrategy is a default implementation of the JWKSFetcherStrategy interface.\ntype DefaultJWKSFetcherStrategy struct {\n\tclient           *retryablehttp.Client\n\tcache            *ristretto.Cache[string, *jose.JSONWebKeySet]\n\tttl              time.Duration\n\tclientSourceFunc func(ctx context.Context) *retryablehttp.Client\n}\n\n// NewDefaultJWKSFetcherStrategy returns a new instance of the DefaultJWKSFetcherStrategy.\nfunc NewDefaultJWKSFetcherStrategy(opts ...func(*DefaultJWKSFetcherStrategy)) JWKSFetcherStrategy {\n\tdc, err := ristretto.NewCache(&ristretto.Config[string, *jose.JSONWebKeySet]{\n\t\tNumCounters: 10000 * 10,\n\t\tMaxCost:     10000,\n\t\tBufferItems: 64,\n\t\tMetrics:     false,\n\t\tCost: func(value *jose.JSONWebKeySet) int64 {\n\t\t\treturn 1\n\t\t},\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\ts := &DefaultJWKSFetcherStrategy{\n\t\tcache:  dc,\n\t\tclient: retryablehttp.NewClient(),\n\t\tttl:    time.Hour,\n\t}\n\n\tfor _, o := range opts {\n\t\to(s)\n\t}\n\n\treturn s\n}\n\n// JKWKSFetcherWithDefaultTTL sets the default TTL for the cache.\nfunc JKWKSFetcherWithDefaultTTL(ttl time.Duration) func(*DefaultJWKSFetcherStrategy) {\n\treturn func(s *DefaultJWKSFetcherStrategy) {\n\t\ts.ttl = ttl\n\t}\n}\n\n// JWKSFetcherWithCache sets the cache to use.\nfunc JWKSFetcherWithCache(cache *ristretto.Cache[string, *jose.JSONWebKeySet]) func(*DefaultJWKSFetcherStrategy) {\n\treturn func(s *DefaultJWKSFetcherStrategy) {\n\t\ts.cache = cache\n\t}\n}\n\n// JWKSFetcherWithHTTPClient sets the HTTP client to use.\nfunc JWKSFetcherWithHTTPClient(client *retryablehttp.Client) func(*DefaultJWKSFetcherStrategy) {\n\treturn func(s *DefaultJWKSFetcherStrategy) {\n\t\ts.client = client\n\t}\n}\n\n// JWKSFetcherWithHTTPClientSource sets the HTTP client source function to use.\nfunc JWKSFetcherWithHTTPClientSource(clientSourceFunc func(ctx context.Context) *retryablehttp.Client) func(*DefaultJWKSFetcherStrategy) {\n\treturn func(s *DefaultJWKSFetcherStrategy) {\n\t\ts.clientSourceFunc = clientSourceFunc\n\t}\n}\n\n// Resolve returns the JSON Web Key Set, or an error if something went wrong. The forceRefresh, if true, forces\n// the strategy to fetch the key from the remote. If forceRefresh is false, the strategy may use a caching strategy\n// to fetch the key.\nfunc (s *DefaultJWKSFetcherStrategy) Resolve(ctx context.Context, location string, ignoreCache bool) (*jose.JSONWebKeySet, error) {\n\tcacheKey := defaultJWKSFetcherStrategyCachePrefix + location\n\tkey, ok := s.cache.Get(cacheKey)\n\tif !ok || ignoreCache {\n\t\treq, err := retryablehttp.NewRequest(\"GET\", location, nil)\n\t\tif err != nil {\n\t\t\treturn nil, errorsx.WithStack(ErrServerError.WithHintf(\"Unable to create HTTP 'GET' request to fetch  JSON Web Keys from location '%s'.\", location).WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\n\t\thc := s.client\n\t\tif s.clientSourceFunc != nil {\n\t\t\thc = s.clientSourceFunc(ctx)\n\t\t}\n\n\t\tresponse, err := hc.Do(req.WithContext(ctx))\n\t\tif err != nil {\n\t\t\treturn nil, errorsx.WithStack(ErrServerError.WithHintf(\"Unable to fetch JSON Web Keys from location '%s'. Check for typos or other network issues.\", location).WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\t\tdefer response.Body.Close()\n\n\t\tif response.StatusCode < 200 || response.StatusCode >= 400 {\n\t\t\treturn nil, errorsx.WithStack(ErrServerError.WithHintf(\"Expected successful status code in range of 200 - 399 from location '%s' but received code %d.\", location, response.StatusCode))\n\t\t}\n\n\t\tvar set jose.JSONWebKeySet\n\t\tif err := json.NewDecoder(response.Body).Decode(&set); err != nil {\n\t\t\treturn nil, errorsx.WithStack(ErrServerError.WithHintf(\"Unable to decode JSON Web Keys from location '%s'. Please check for typos and if the URL returns valid JSON.\", location).WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\n\t\t_ = s.cache.SetWithTTL(cacheKey, &set, 1, s.ttl)\n\t\treturn &set, nil\n\t}\n\n\treturn key, nil\n}\n\nfunc (s *DefaultJWKSFetcherStrategy) WaitForCache() {\n\ts.cache.Wait()\n}\n"
        },
        {
          "name": "client_authentication_jwks_strategy_test.go",
          "type": "blob",
          "size": 4.63671875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/dgraph-io/ristretto\"\n\t\"github.com/hashicorp/go-retryablehttp\"\n\t\"github.com/pkg/errors\"\n\n\t\"github.com/ory/fosite/internal/gen\"\n\n\t\"github.com/go-jose/go-jose/v3\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc initServerWithKey(t *testing.T) *httptest.Server {\n\tvar set *jose.JSONWebKeySet\n\tvar h http.HandlerFunc = func(w http.ResponseWriter, r *http.Request) {\n\t\trequire.NoError(t, json.NewEncoder(w).Encode(set))\n\t}\n\tts := httptest.NewServer(h)\n\n\tset = &jose.JSONWebKeySet{\n\t\tKeys: []jose.JSONWebKey{\n\t\t\t{\n\t\t\t\tKeyID: \"bar\",\n\t\t\t\tUse:   \"sig\",\n\t\t\t\tKey:   &gen.MustRSAKey().PublicKey,\n\t\t\t},\n\t\t},\n\t}\n\n\tt.Cleanup(ts.Close)\n\treturn ts\n}\n\nvar errRoundTrip = errors.New(\"roundtrip error\")\n\ntype failingTripper struct{}\n\nfunc (r *failingTripper) RoundTrip(*http.Request) (*http.Response, error) {\n\treturn nil, errRoundTrip\n}\n\nfunc TestDefaultJWKSFetcherStrategy(t *testing.T) {\n\tctx := context.Background()\n\tvar h http.HandlerFunc\n\n\ts := NewDefaultJWKSFetcherStrategy()\n\tt.Run(\"case=fetching\", func(t *testing.T) {\n\t\tvar set *jose.JSONWebKeySet\n\t\th = func(w http.ResponseWriter, r *http.Request) {\n\t\t\trequire.NoError(t, json.NewEncoder(w).Encode(set))\n\t\t}\n\t\tts := httptest.NewServer(h)\n\t\tdefer ts.Close()\n\n\t\tset = &jose.JSONWebKeySet{\n\t\t\tKeys: []jose.JSONWebKey{\n\t\t\t\t{\n\t\t\t\t\tKeyID: \"foo\",\n\t\t\t\t\tUse:   \"sig\",\n\t\t\t\t\tKey:   &gen.MustRSAKey().PublicKey,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\tkeys, err := s.Resolve(ctx, ts.URL, false)\n\t\trequire.NoError(t, err)\n\t\tassert.True(t, len(keys.Key(\"foo\")) == 1)\n\n\t\tset = &jose.JSONWebKeySet{\n\t\t\tKeys: []jose.JSONWebKey{\n\t\t\t\t{\n\t\t\t\t\tKeyID: \"bar\",\n\t\t\t\t\tUse:   \"sig\",\n\t\t\t\t\tKey:   &gen.MustRSAKey().PublicKey,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\tkeys, err = s.Resolve(ctx, ts.URL, false)\n\t\trequire.NoError(t, err)\n\t\tassert.Len(t, keys.Keys, 1, \"%+v\", keys)\n\t\tassert.True(t, len(keys.Key(\"foo\")) == 1)\n\t\tassert.True(t, len(keys.Key(\"bar\")) == 0)\n\n\t\tkeys, err = s.Resolve(ctx, ts.URL, true)\n\t\trequire.NoError(t, err)\n\t\tassert.True(t, len(keys.Key(\"foo\")) == 0)\n\t\tassert.True(t, len(keys.Key(\"bar\")) == 1)\n\t})\n\n\tt.Run(\"JWKSFetcherWithCache\", func(t *testing.T) {\n\t\tts := initServerWithKey(t)\n\n\t\tcache, _ := ristretto.NewCache(&ristretto.Config[string, *jose.JSONWebKeySet]{NumCounters: 10 * 1000, MaxCost: 1000, BufferItems: 64})\n\t\tlocation := ts.URL\n\t\texpected := &jose.JSONWebKeySet{}\n\t\trequire.True(t, cache.Set(defaultJWKSFetcherStrategyCachePrefix+location, expected, 1))\n\t\tcache.Wait()\n\n\t\ts := NewDefaultJWKSFetcherStrategy(JWKSFetcherWithCache(cache))\n\t\tactual, err := s.Resolve(ctx, location, false)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, expected, actual)\n\t})\n\n\tt.Run(\"JWKSFetcherWithTTL\", func(t *testing.T) {\n\t\tts := initServerWithKey(t)\n\n\t\ts := NewDefaultJWKSFetcherStrategy(JKWKSFetcherWithDefaultTTL(time.Nanosecond))\n\t\t_, err := s.Resolve(ctx, ts.URL, false)\n\t\trequire.NoError(t, err)\n\t\ts.(*DefaultJWKSFetcherStrategy).cache.Wait()\n\n\t\t_, ok := s.(*DefaultJWKSFetcherStrategy).cache.Get(defaultJWKSFetcherStrategyCachePrefix + ts.URL)\n\t\tassert.Falsef(t, ok, \"expected cache to be empty\")\n\t})\n\n\tt.Run(\"JWKSFetcherWithHTTPClient\", func(t *testing.T) {\n\t\trt := retryablehttp.NewClient()\n\t\trt.RetryMax = 0\n\t\trt.HTTPClient = &http.Client{Transport: new(failingTripper)}\n\t\ts := NewDefaultJWKSFetcherStrategy(JWKSFetcherWithHTTPClient(rt))\n\t\t_, err := s.Resolve(ctx, \"https://google.com\", false)\n\t\trequire.ErrorIs(t, err, errRoundTrip)\n\t})\n\n\tt.Run(\"JWKSFetcherWithHTTPClientSource\", func(t *testing.T) {\n\t\trt := retryablehttp.NewClient()\n\t\trt.RetryMax = 0\n\t\trt.HTTPClient = &http.Client{Transport: new(failingTripper)}\n\t\ts := NewDefaultJWKSFetcherStrategy(\n\t\t\tJWKSFetcherWithHTTPClient(retryablehttp.NewClient()),\n\t\t\tJWKSFetcherWithHTTPClientSource(func(ctx context.Context) *retryablehttp.Client {\n\t\t\t\treturn rt\n\t\t\t}))\n\t\t_, err := s.Resolve(ctx, \"https://www.google.com\", false)\n\t\trequire.ErrorIs(t, err, errRoundTrip)\n\t})\n\n\tt.Run(\"case=error_network\", func(t *testing.T) {\n\t\ts := NewDefaultJWKSFetcherStrategy()\n\t\th = func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.WriteHeader(400)\n\t\t}\n\t\tts := httptest.NewServer(h)\n\t\tdefer ts.Close()\n\n\t\t_, err := s.Resolve(context.Background(), ts.URL, true)\n\t\trequire.Error(t, err)\n\n\t\t_, err = s.Resolve(context.Background(), \"$%/19\", true)\n\t\trequire.Error(t, err)\n\t})\n\n\tt.Run(\"case=error_encoding\", func(t *testing.T) {\n\t\ts := NewDefaultJWKSFetcherStrategy()\n\t\th = func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.Write([]byte(\"[]\"))\n\t\t}\n\t\tts := httptest.NewServer(h)\n\t\tdefer ts.Close()\n\n\t\t_, err := s.Resolve(context.Background(), ts.URL, true)\n\t\trequire.Error(t, err)\n\t})\n}\n"
        },
        {
          "name": "client_authentication_test.go",
          "type": "blob",
          "size": 25.54296875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"crypto/ecdsa\"\n\t\"crypto/rsa\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/hashicorp/go-retryablehttp\"\n\n\t\"github.com/ory/fosite/internal/gen\"\n\n\t\"github.com/go-jose/go-jose/v3\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/ory/fosite/token/jwt\"\n\n\t. \"github.com/ory/fosite\"\n\t\"github.com/ory/fosite/storage\"\n)\n\nfunc mustGenerateRSAAssertion(t *testing.T, claims jwt.MapClaims, key *rsa.PrivateKey, kid string) string {\n\ttoken := jwt.NewWithClaims(jose.RS256, claims)\n\ttoken.Header[\"kid\"] = kid\n\ttokenString, err := token.SignedString(key)\n\trequire.NoError(t, err)\n\treturn tokenString\n}\n\nfunc mustGenerateECDSAAssertion(t *testing.T, claims jwt.MapClaims, key *ecdsa.PrivateKey, kid string) string {\n\ttoken := jwt.NewWithClaims(jose.ES256, claims)\n\ttoken.Header[\"kid\"] = kid\n\ttokenString, err := token.SignedString(key)\n\trequire.NoError(t, err)\n\treturn tokenString\n}\n\nfunc mustGenerateHSAssertion(t *testing.T, claims jwt.MapClaims, key *rsa.PrivateKey, kid string) string {\n\ttoken := jwt.NewWithClaims(jose.HS256, claims)\n\ttokenString, err := token.SignedString([]byte(\"aaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccccddddddddddddddddddddddd\"))\n\trequire.NoError(t, err)\n\treturn tokenString\n}\n\nfunc mustGenerateNoneAssertion(t *testing.T, claims jwt.MapClaims, key *rsa.PrivateKey, kid string) string {\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodNone, claims)\n\ttokenString, err := token.SignedString(jwt.UnsafeAllowNoneSignatureType)\n\trequire.NoError(t, err)\n\treturn tokenString\n}\n\n// returns an http basic authorization header, encoded using application/x-www-form-urlencoded\nfunc clientBasicAuthHeader(clientID, clientSecret string) http.Header {\n\tcreds := url.QueryEscape(clientID) + \":\" + url.QueryEscape(clientSecret)\n\treturn http.Header{\n\t\t\"Authorization\": {\n\t\t\t\"Basic \" + base64.StdEncoding.EncodeToString([]byte(creds)),\n\t\t},\n\t}\n}\n\nfunc TestAuthenticateClient(t *testing.T) {\n\tconst at = \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\n\n\thasher := &BCrypt{Config: &Config{HashCost: 6}}\n\tf := &Fosite{\n\t\tStore: storage.NewMemoryStore(),\n\t\tConfig: &Config{\n\t\t\tJWKSFetcherStrategy: NewDefaultJWKSFetcherStrategy(),\n\t\t\tClientSecretsHasher: hasher,\n\t\t\tTokenURL:            \"token-url\",\n\t\t\tHTTPClient:          retryablehttp.NewClient(),\n\t\t},\n\t}\n\n\tbarSecret, err := hasher.Hash(context.TODO(), []byte(\"bar\"))\n\trequire.NoError(t, err)\n\n\t// a secret containing various special characters\n\tcomplexSecretRaw := \"foo %66%6F%6F@$<§!✓\"\n\tcomplexSecret, err := hasher.Hash(context.TODO(), []byte(complexSecretRaw))\n\trequire.NoError(t, err)\n\n\trsaKey := gen.MustRSAKey()\n\trsaJwks := &jose.JSONWebKeySet{\n\t\tKeys: []jose.JSONWebKey{\n\t\t\t{\n\t\t\t\tKeyID: \"kid-foo\",\n\t\t\t\tUse:   \"sig\",\n\t\t\t\tKey:   &rsaKey.PublicKey,\n\t\t\t},\n\t\t},\n\t}\n\n\tecdsaKey := gen.MustES256Key()\n\tecdsaJwks := &jose.JSONWebKeySet{\n\t\tKeys: []jose.JSONWebKey{\n\t\t\t{\n\t\t\t\tKeyID: \"kid-foo\",\n\t\t\t\tUse:   \"sig\",\n\t\t\t\tKey:   &ecdsaKey.PublicKey,\n\t\t\t},\n\t\t},\n\t}\n\n\tvar h http.HandlerFunc = func(w http.ResponseWriter, r *http.Request) {\n\t\trequire.NoError(t, json.NewEncoder(w).Encode(rsaJwks))\n\t}\n\tts := httptest.NewServer(h)\n\tdefer ts.Close()\n\n\tfor k, tc := range []struct {\n\t\td             string\n\t\tclient        *DefaultOpenIDConnectClient\n\t\tassertionType string\n\t\tassertion     string\n\t\tr             *http.Request\n\t\tform          url.Values\n\t\texpectErr     error\n\t}{\n\t\t{\n\t\t\td:         \"should fail because authentication can not be determined\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\"}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:      url.Values{},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client does not exist\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Public: true}, TokenEndpointAuthMethod: \"none\"},\n\t\t\tform:      url.Values{\"client_id\": []string{\"bar\"}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should pass because client is public and authentication requirements are met\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Public: true}, TokenEndpointAuthMethod: \"none\"},\n\t\t\tform:   url.Values{\"client_id\": []string{\"foo\"}},\n\t\t\tr:      new(http.Request),\n\t\t},\n\t\t{\n\t\t\td:      \"should pass because client is public and client secret is empty in query param\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Public: true}, TokenEndpointAuthMethod: \"none\"},\n\t\t\tform:   url.Values{\"client_id\": []string{\"foo\"}, \"client_secret\": []string{\"\"}},\n\t\t\tr:      new(http.Request),\n\t\t},\n\t\t{\n\t\t\td:      \"should pass because client is public and client secret is empty in basic auth header\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Public: true}, TokenEndpointAuthMethod: \"none\"},\n\t\t\tform:   url.Values{},\n\t\t\tr:      &http.Request{Header: clientBasicAuthHeader(\"foo\", \"\")},\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client requires basic auth and client secret is empty in basic auth header\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Public: true}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:      url.Values{},\n\t\t\tr:         &http.Request{Header: clientBasicAuthHeader(\"foo\", \"\")},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should pass with client credentials containing special characters\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"!foo%20bar\", Secret: complexSecret}, TokenEndpointAuthMethod: \"client_secret_post\"},\n\t\t\tform:   url.Values{\"client_id\": []string{\"!foo%20bar\"}, \"client_secret\": []string{complexSecretRaw}},\n\t\t\tr:      new(http.Request),\n\t\t},\n\t\t{\n\t\t\td:      \"should pass with client credentials containing special characters via basic auth\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo — bar! +<&>*\", Secret: complexSecret}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:   url.Values{},\n\t\t\tr:      &http.Request{Header: clientBasicAuthHeader(\"foo — bar! +<&>*\", complexSecretRaw)},\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because auth method is not none\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Public: true}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:      url.Values{\"client_id\": []string{\"foo\"}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should pass because client is confidential and id and secret match in post body\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: []byte(\"invalid_hash\"), RotatedSecrets: [][]byte{barSecret}}, TokenEndpointAuthMethod: \"client_secret_post\"},\n\t\t\tform:   url.Values{\"client_id\": []string{\"foo\"}, \"client_secret\": []string{\"bar\"}},\n\t\t\tr:      new(http.Request),\n\t\t},\n\t\t{\n\t\t\td:      \"should pass because client is confidential and id and rotated secret match in post body\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: barSecret}, TokenEndpointAuthMethod: \"client_secret_post\"},\n\t\t\tform:   url.Values{\"client_id\": []string{\"foo\"}, \"client_secret\": []string{\"bar\"}},\n\t\t\tr:      new(http.Request),\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client is confidential and secret does not match in post body\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: barSecret}, TokenEndpointAuthMethod: \"client_secret_post\"},\n\t\t\tform:      url.Values{\"client_id\": []string{\"foo\"}, \"client_secret\": []string{\"baz\"}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client is confidential and id does not exist in post body\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, TokenEndpointAuthMethod: \"client_secret_post\"},\n\t\t\tform:      url.Values{\"client_id\": []string{\"foo\"}, \"client_secret\": []string{\"bar\"}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should pass because client is confidential and id and secret match in header\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: barSecret}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:   url.Values{},\n\t\t\tr:      &http.Request{Header: clientBasicAuthHeader(\"foo\", \"bar\")},\n\t\t},\n\t\t{\n\t\t\td:      \"should pass because client is confidential and id and rotated secret match in header\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: []byte(\"invalid_hash\"), RotatedSecrets: [][]byte{barSecret}}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:   url.Values{},\n\t\t\tr:      &http.Request{Header: clientBasicAuthHeader(\"foo\", \"bar\")},\n\t\t},\n\t\t{\n\t\t\td:      \"should pass because client is confidential and id and rotated secret match in header\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: []byte(\"invalid_hash\"), RotatedSecrets: [][]byte{[]byte(\"invalid\"), barSecret}}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:   url.Values{},\n\t\t\tr:      &http.Request{Header: clientBasicAuthHeader(\"foo\", \"bar\")},\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because auth method is not client_secret_basic\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: barSecret}, TokenEndpointAuthMethod: \"client_secret_post\"},\n\t\t\tform:      url.Values{},\n\t\t\tr:         &http.Request{Header: clientBasicAuthHeader(\"foo\", \"bar\")},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client is confidential and secret does not match in header\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: barSecret}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:      url.Values{},\n\t\t\tr:         &http.Request{Header: clientBasicAuthHeader(\"foo\", \"baz\")},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client is confidential and neither secret nor rotated does match in header\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: barSecret, RotatedSecrets: [][]byte{barSecret}}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:      url.Values{},\n\t\t\tr:         &http.Request{Header: clientBasicAuthHeader(\"foo\", \"baz\")},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client id is not encoded using application/x-www-form-urlencoded\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: barSecret}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:      url.Values{},\n\t\t\tr:         &http.Request{Header: http.Header{\"Authorization\": {\"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"%%%%%%:foo\"))}}},\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client secret is not encoded using application/x-www-form-urlencoded\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: barSecret}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:      url.Values{},\n\t\t\tr:         &http.Request{Header: http.Header{\"Authorization\": {\"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"foo:%%%%%%%\"))}}},\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client is confidential and id does not exist in header\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform:      url.Values{},\n\t\t\tr:         &http.Request{Header: http.Header{\"Authorization\": {\"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"foo:bar\"))}}},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client_assertion but client_assertion is missing\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: barSecret}, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform:      url.Values{\"client_id\": []string{\"foo\"}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t},\n\t\t{\n\t\t\td:         \"should fail because client_assertion_type is unknown\",\n\t\t\tclient:    &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"foo\", Secret: barSecret}, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform:      url.Values{\"client_id\": []string{\"foo\"}, \"client_assertion_type\": []string{\"foobar\"}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t},\n\t\t{\n\t\t\td:      \"should pass with proper RSA assertion when JWKs are set within the client and client_id is not set in the request\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr: new(http.Request),\n\t\t},\n\t\t{\n\t\t\td:      \"should pass with proper ECDSA assertion when JWKs are set within the client and client_id is not set in the request\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: ecdsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\", TokenEndpointAuthSigningAlgorithm: \"ES256\"},\n\t\t\tform: url.Values{\"client_assertion\": {mustGenerateECDSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, ecdsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr: new(http.Request),\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because RSA assertion is used, but ECDSA assertion is required\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: ecdsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\", TokenEndpointAuthSigningAlgorithm: \"ES256\"},\n\t\t\tform: url.Values{\"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because token auth method is not private_key_jwt, but client_secret_jwt\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"client_secret_jwt\"},\n\t\t\tform: url.Values{\"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because token auth method is not private_key_jwt, but none\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"none\"},\n\t\t\tform: url.Values{\"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because token auth method is not private_key_jwt, but client_secret_post\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"client_secret_post\"},\n\t\t\tform: url.Values{\"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because token auth method is not private_key_jwt, but client_secret_basic\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"client_secret_basic\"},\n\t\t\tform: url.Values{\"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because token auth method is not private_key_jwt, but foobar\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"foobar\"},\n\t\t\tform: url.Values{\"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should pass with proper assertion when JWKs are set within the client and client_id is not set in the request (aud is array)\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": []string{\"token-url-2\", \"token-url\"},\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr: new(http.Request),\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because audience (array) does not match token url\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": []string{\"token-url-1\", \"token-url-2\"},\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should pass with proper assertion when JWKs are set within the client\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_id\": []string{\"bar\"}, \"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr: new(http.Request),\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because JWT algorithm is HS256\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_id\": []string{\"bar\"}, \"client_assertion\": {mustGenerateHSAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because JWT algorithm is none\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_id\": []string{\"bar\"}, \"client_assertion\": {mustGenerateNoneAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should pass with proper assertion when JWKs URI is set\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeysURI: ts.URL, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_id\": []string{\"bar\"}, \"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr: new(http.Request),\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because client_assertion sub does not match client\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_id\": []string{\"bar\"}, \"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"not-bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because client_assertion iss does not match client\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_id\": []string{\"bar\"}, \"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"not-bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because client_assertion jti is not set\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_id\": []string{\"bar\"}, \"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"aud\": \"token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\td:      \"should fail because client_assertion aud is not set\",\n\t\t\tclient: &DefaultOpenIDConnectClient{DefaultClient: &DefaultClient{ID: \"bar\", Secret: barSecret}, JSONWebKeys: rsaJwks, TokenEndpointAuthMethod: \"private_key_jwt\"},\n\t\t\tform: url.Values{\"client_id\": []string{\"bar\"}, \"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\t\t\"sub\": \"bar\",\n\t\t\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\t\t\"iss\": \"bar\",\n\t\t\t\t\"jti\": \"12345\",\n\t\t\t\t\"aud\": \"not-token-url\",\n\t\t\t}, rsaKey, \"kid-foo\")}, \"client_assertion_type\": []string{at}},\n\t\t\tr:         new(http.Request),\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d/description=%s\", k, tc.d), func(t *testing.T) {\n\t\t\tstore := storage.NewMemoryStore()\n\t\t\tstore.Clients[tc.client.ID] = tc.client\n\t\t\tf.Store = store\n\n\t\t\tc, err := f.AuthenticateClient(context.Background(), tc.r, tc.form)\n\t\t\tif tc.expectErr != nil {\n\t\t\t\trequire.EqualError(t, err, tc.expectErr.Error())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif err != nil {\n\t\t\t\tvar validationError *jwt.ValidationError\n\t\t\t\tvar rfcError *RFC6749Error\n\t\t\t\tif errors.As(err, &validationError) {\n\t\t\t\t\tt.Logf(\"Error is: %s\", validationError.Inner)\n\t\t\t\t} else if errors.As(err, &rfcError) {\n\t\t\t\t\tt.Logf(\"DebugField is: %s\", rfcError.DebugField)\n\t\t\t\t\tt.Logf(\"HintField is: %s\", rfcError.HintField)\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire.NoError(t, err)\n\t\t\tassert.EqualValues(t, tc.client, c)\n\t\t})\n\t}\n}\n\nfunc TestAuthenticateClientTwice(t *testing.T) {\n\tconst at = \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\n\n\tkey := gen.MustRSAKey()\n\tclient := &DefaultOpenIDConnectClient{\n\t\tDefaultClient: &DefaultClient{\n\t\t\tID:     \"bar\",\n\t\t\tSecret: []byte(\"secret\"),\n\t\t},\n\t\tJSONWebKeys: &jose.JSONWebKeySet{\n\t\t\tKeys: []jose.JSONWebKey{\n\t\t\t\t{\n\t\t\t\t\tKeyID: \"kid-foo\",\n\t\t\t\t\tUse:   \"sig\",\n\t\t\t\t\tKey:   &key.PublicKey,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tTokenEndpointAuthMethod: \"private_key_jwt\",\n\t}\n\tstore := storage.NewMemoryStore()\n\tstore.Clients[client.ID] = client\n\n\thasher := &BCrypt{&Config{HashCost: 6}}\n\tf := &Fosite{\n\t\tStore: store,\n\t\tConfig: &Config{\n\t\t\tJWKSFetcherStrategy: NewDefaultJWKSFetcherStrategy(),\n\t\t\tClientSecretsHasher: hasher,\n\t\t\tTokenURL:            \"token-url\",\n\t\t},\n\t}\n\n\tformValues := url.Values{\"client_id\": []string{\"bar\"}, \"client_assertion\": {mustGenerateRSAAssertion(t, jwt.MapClaims{\n\t\t\"sub\": \"bar\",\n\t\t\"exp\": time.Now().Add(time.Hour).Unix(),\n\t\t\"iss\": \"bar\",\n\t\t\"jti\": \"12345\",\n\t\t\"aud\": \"token-url\",\n\t}, key, \"kid-foo\")}, \"client_assertion_type\": []string{at}}\n\n\tc, err := f.AuthenticateClient(context.Background(), new(http.Request), formValues)\n\trequire.NoError(t, err, \"%#v\", err)\n\tassert.Equal(t, client, c)\n\n\t// replay the request and expect it to fail\n\tc, err = f.AuthenticateClient(context.Background(), new(http.Request), formValues)\n\trequire.Error(t, err)\n\tassert.EqualError(t, err, ErrJTIKnown.Error())\n\tassert.Nil(t, c)\n}\n"
        },
        {
          "name": "client_manager.go",
          "type": "blob",
          "size": 0.8720703125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"time\"\n)\n\n// ClientManager defines the (persistent) manager interface for clients.\ntype ClientManager interface {\n\t// GetClient loads the client by its ID or returns an error\n\t// if the client does not exist or another error occurred.\n\tGetClient(ctx context.Context, id string) (Client, error)\n\t// ClientAssertionJWTValid returns an error if the JTI is\n\t// known or the DB check failed and nil if the JTI is not known.\n\tClientAssertionJWTValid(ctx context.Context, jti string) error\n\t// SetClientAssertionJWT marks a JTI as known for the given\n\t// expiry time. Before inserting the new JTI, it will clean\n\t// up any existing JTIs that have expired as those tokens can\n\t// not be replayed due to the expiry.\n\tSetClientAssertionJWT(ctx context.Context, jti string, exp time.Time) error\n}\n"
        },
        {
          "name": "client_test.go",
          "type": "blob",
          "size": 1.3056640625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestDefaultClient(t *testing.T) {\n\tsc := &DefaultClient{\n\t\tID:             \"1\",\n\t\tSecret:         []byte(\"foobar-\"),\n\t\tRotatedSecrets: [][]byte{[]byte(\"foobar-1\"), []byte(\"foobar-2\")},\n\t\tRedirectURIs:   []string{\"foo\", \"bar\"},\n\t\tResponseTypes:  []string{\"foo\", \"bar\"},\n\t\tGrantTypes:     []string{\"foo\", \"bar\"},\n\t\tScopes:         []string{\"fooscope\"},\n\t}\n\n\tassert.Equal(t, sc.ID, sc.GetID())\n\tassert.Equal(t, sc.RedirectURIs, sc.GetRedirectURIs())\n\tassert.Equal(t, sc.Secret, sc.GetHashedSecret())\n\tassert.Equal(t, sc.RotatedSecrets, sc.GetRotatedHashes())\n\tassert.EqualValues(t, sc.ResponseTypes, sc.GetResponseTypes())\n\tassert.EqualValues(t, sc.GrantTypes, sc.GetGrantTypes())\n\tassert.EqualValues(t, sc.Scopes, sc.GetScopes())\n\n\tsc.GrantTypes = []string{}\n\tsc.ResponseTypes = []string{}\n\tassert.Equal(t, \"code\", sc.GetResponseTypes()[0])\n\tassert.Equal(t, \"authorization_code\", sc.GetGrantTypes()[0])\n\n\tvar _ ClientWithSecretRotation = sc\n}\n\nfunc TestDefaultResponseModeClient_GetResponseMode(t *testing.T) {\n\trc := &DefaultResponseModeClient{ResponseModes: []ResponseModeType{ResponseModeFragment}}\n\tassert.Equal(t, []ResponseModeType{ResponseModeFragment}, rc.GetResponseModes())\n}\n"
        },
        {
          "name": "client_with_custom_token_lifespans.go",
          "type": "blob",
          "size": 4.529296875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport \"time\"\n\n// GetEffectiveLifespan either maps GrantType x TokenType to the client's configured lifespan, or returns the fallback value.\nfunc GetEffectiveLifespan(c Client, gt GrantType, tt TokenType, fallback time.Duration) time.Duration {\n\tif clc, ok := c.(ClientWithCustomTokenLifespans); ok {\n\t\treturn clc.GetEffectiveLifespan(gt, tt, fallback)\n\t}\n\treturn fallback\n}\n\ntype ClientWithCustomTokenLifespans interface {\n\t// GetEffectiveLifespan either maps GrantType x TokenType to the client's configured lifespan, or returns the fallback value.\n\tGetEffectiveLifespan(gt GrantType, tt TokenType, fallback time.Duration) time.Duration\n}\n\n// ClientLifespanConfig holds default lifespan configuration for the different\n// token types that may be issued for the client. This configuration takes\n// precedence over fosite's instance-wide default lifespan, but it may be\n// overridden by a session's expires_at claim.\n//\n// The OIDC Hybrid grant type inherits token lifespan configuration from the implicit grant.\ntype ClientLifespanConfig struct {\n\tAuthorizationCodeGrantAccessTokenLifespan  *time.Duration `json:\"authorization_code_grant_access_token_lifespan\"`\n\tAuthorizationCodeGrantIDTokenLifespan      *time.Duration `json:\"authorization_code_grant_id_token_lifespan\"`\n\tAuthorizationCodeGrantRefreshTokenLifespan *time.Duration `json:\"authorization_code_grant_refresh_token_lifespan\"`\n\tClientCredentialsGrantAccessTokenLifespan  *time.Duration `json:\"client_credentials_grant_access_token_lifespan\"`\n\tImplicitGrantAccessTokenLifespan           *time.Duration `json:\"implicit_grant_access_token_lifespan\"`\n\tImplicitGrantIDTokenLifespan               *time.Duration `json:\"implicit_grant_id_token_lifespan\"`\n\tJwtBearerGrantAccessTokenLifespan          *time.Duration `json:\"jwt_bearer_grant_access_token_lifespan\"`\n\tPasswordGrantAccessTokenLifespan           *time.Duration `json:\"password_grant_access_token_lifespan\"`\n\tPasswordGrantRefreshTokenLifespan          *time.Duration `json:\"password_grant_refresh_token_lifespan\"`\n\tRefreshTokenGrantIDTokenLifespan           *time.Duration `json:\"refresh_token_grant_id_token_lifespan\"`\n\tRefreshTokenGrantAccessTokenLifespan       *time.Duration `json:\"refresh_token_grant_access_token_lifespan\"`\n\tRefreshTokenGrantRefreshTokenLifespan      *time.Duration `json:\"refresh_token_grant_refresh_token_lifespan\"`\n\t//Hybrid grant tokens are not independently configurable, see the comment above.\n}\n\ntype DefaultClientWithCustomTokenLifespans struct {\n\t*DefaultClient\n\tTokenLifespans *ClientLifespanConfig `json:\"token_lifespans\"`\n}\n\nfunc (c *DefaultClientWithCustomTokenLifespans) GetTokenLifespans() *ClientLifespanConfig {\n\treturn c.TokenLifespans\n}\n\nfunc (c *DefaultClientWithCustomTokenLifespans) SetTokenLifespans(lifespans *ClientLifespanConfig) {\n\tc.TokenLifespans = lifespans\n}\n\n// GetEffectiveLifespan either maps GrantType x TokenType to the client's configured lifespan, or returns the fallback value.\nfunc (c *DefaultClientWithCustomTokenLifespans) GetEffectiveLifespan(gt GrantType, tt TokenType, fallback time.Duration) time.Duration {\n\tif c.TokenLifespans == nil {\n\t\treturn fallback\n\t}\n\tvar cl *time.Duration\n\tif gt == GrantTypeAuthorizationCode {\n\t\tif tt == AccessToken {\n\t\t\tcl = c.TokenLifespans.AuthorizationCodeGrantAccessTokenLifespan\n\t\t} else if tt == IDToken {\n\t\t\tcl = c.TokenLifespans.AuthorizationCodeGrantIDTokenLifespan\n\t\t} else if tt == RefreshToken {\n\t\t\tcl = c.TokenLifespans.AuthorizationCodeGrantRefreshTokenLifespan\n\t\t}\n\t} else if gt == GrantTypeClientCredentials {\n\t\tif tt == AccessToken {\n\t\t\tcl = c.TokenLifespans.ClientCredentialsGrantAccessTokenLifespan\n\t\t}\n\t} else if gt == GrantTypeImplicit {\n\t\tif tt == AccessToken {\n\t\t\tcl = c.TokenLifespans.ImplicitGrantAccessTokenLifespan\n\t\t} else if tt == IDToken {\n\t\t\tcl = c.TokenLifespans.ImplicitGrantIDTokenLifespan\n\t\t}\n\t} else if gt == GrantTypeJWTBearer {\n\t\tif tt == AccessToken {\n\t\t\tcl = c.TokenLifespans.JwtBearerGrantAccessTokenLifespan\n\t\t}\n\t} else if gt == GrantTypePassword {\n\t\tif tt == AccessToken {\n\t\t\tcl = c.TokenLifespans.PasswordGrantAccessTokenLifespan\n\t\t} else if tt == RefreshToken {\n\t\t\tcl = c.TokenLifespans.PasswordGrantRefreshTokenLifespan\n\t\t}\n\t} else if gt == GrantTypeRefreshToken {\n\t\tif tt == AccessToken {\n\t\t\tcl = c.TokenLifespans.RefreshTokenGrantAccessTokenLifespan\n\t\t} else if tt == IDToken {\n\t\t\tcl = c.TokenLifespans.RefreshTokenGrantIDTokenLifespan\n\t\t} else if tt == RefreshToken {\n\t\t\tcl = c.TokenLifespans.RefreshTokenGrantRefreshTokenLifespan\n\t\t}\n\t}\n\n\tif cl == nil {\n\t\treturn fallback\n\t}\n\treturn *cl\n}\n"
        },
        {
          "name": "client_with_custom_token_lifespans_test.go",
          "type": "blob",
          "size": 0.8330078125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestDefaultClientWithCustomTokenLifespans(t *testing.T) {\n\tclc := &DefaultClientWithCustomTokenLifespans{\n\t\tDefaultClient: &DefaultClient{},\n\t}\n\n\tassert.Equal(t, clc.GetTokenLifespans(), (*ClientLifespanConfig)(nil))\n\n\trequire.Equal(t, time.Minute*42, GetEffectiveLifespan(clc, GrantTypeImplicit, IDToken, time.Minute*42))\n\n\tcustomLifespan := 36 * time.Hour\n\tclc.SetTokenLifespans(&ClientLifespanConfig{ImplicitGrantIDTokenLifespan: &customLifespan})\n\tassert.NotEqual(t, clc.GetTokenLifespans(), nil)\n\n\trequire.Equal(t, customLifespan, GetEffectiveLifespan(clc, GrantTypeImplicit, IDToken, time.Minute*42))\n\tvar _ ClientWithCustomTokenLifespans = clc\n}\n"
        },
        {
          "name": "compose",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.go",
          "type": "blob",
          "size": 13.029296875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"hash\"\n\t\"html/template\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/hashicorp/go-retryablehttp\"\n\n\t\"github.com/ory/fosite/i18n\"\n\t\"github.com/ory/fosite/token/jwt\"\n)\n\n// AuthorizeCodeLifespanProvider returns the provider for configuring the authorization code lifespan.\ntype AuthorizeCodeLifespanProvider interface {\n\t// GetAuthorizeCodeLifespan returns the authorization code lifespan.\n\tGetAuthorizeCodeLifespan(ctx context.Context) time.Duration\n}\n\n// RefreshTokenLifespanProvider returns the provider for configuring the refresh token lifespan.\ntype RefreshTokenLifespanProvider interface {\n\t// GetRefreshTokenLifespan returns the refresh token lifespan.\n\tGetRefreshTokenLifespan(ctx context.Context) time.Duration\n}\n\n// AccessTokenLifespanProvider returns the provider for configuring the access token lifespan.\ntype AccessTokenLifespanProvider interface {\n\t// GetAccessTokenLifespan returns the access token lifespan.\n\tGetAccessTokenLifespan(ctx context.Context) time.Duration\n}\n\n// VerifiableCredentialsNonceLifespanProvider returns the provider for configuring the access token lifespan.\ntype VerifiableCredentialsNonceLifespanProvider interface {\n\t// GetNonceLifespan returns the nonce lifespan.\n\tGetVerifiableCredentialsNonceLifespan(ctx context.Context) time.Duration\n}\n\n// IDTokenLifespanProvider returns the provider for configuring the ID token lifespan.\ntype IDTokenLifespanProvider interface {\n\t// GetIDTokenLifespan returns the ID token lifespan.\n\tGetIDTokenLifespan(ctx context.Context) time.Duration\n}\n\n// ScopeStrategyProvider returns the provider for configuring the scope strategy.\ntype ScopeStrategyProvider interface {\n\t// GetScopeStrategy returns the scope strategy.\n\tGetScopeStrategy(ctx context.Context) ScopeStrategy\n}\n\n// AudienceStrategyProvider returns the provider for configuring the audience strategy.\ntype AudienceStrategyProvider interface {\n\t// GetAudienceStrategy returns the audience strategy.\n\tGetAudienceStrategy(ctx context.Context) AudienceMatchingStrategy\n}\n\n// RedirectSecureCheckerProvider returns the provider for configuring the redirect URL security validator.\ntype RedirectSecureCheckerProvider interface {\n\t// GetRedirectSecureChecker returns the redirect URL security validator.\n\tGetRedirectSecureChecker(ctx context.Context) func(context.Context, *url.URL) bool\n}\n\n// RefreshTokenScopesProvider returns the provider for configuring the refresh token scopes.\ntype RefreshTokenScopesProvider interface {\n\t// GetRefreshTokenScopes returns the refresh token scopes.\n\tGetRefreshTokenScopes(ctx context.Context) []string\n}\n\n// DisableRefreshTokenValidationProvider returns the provider for configuring the refresh token validation.\ntype DisableRefreshTokenValidationProvider interface {\n\t// GetDisableRefreshTokenValidation returns the disable refresh token validation flag.\n\tGetDisableRefreshTokenValidation(ctx context.Context) bool\n}\n\n// BCryptCostProvider returns the provider for configuring the BCrypt hash cost.\ntype BCryptCostProvider interface {\n\t// GetBCryptCost returns the BCrypt  hash cost.\n\tGetBCryptCost(ctx context.Context) int\n}\n\n// AllowedPromptValuesProvider returns the provider for configuring the allowed prompt values.\ntype AllowedPromptValuesProvider interface {\n\t// GetAllowedPromptValues returns the allowed prompt values.\n\tGetAllowedPromptValues(ctx context.Context) int\n}\n\n// AccessTokenIssuerProvider returns the provider for configuring the JWT issuer.\ntype AccessTokenIssuerProvider interface {\n\t// GetAccessTokenIssuer returns the access token issuer.\n\tGetAccessTokenIssuer(ctx context.Context) string\n}\n\n// IDTokenIssuerProvider returns the provider for configuring the ID token issuer.\ntype IDTokenIssuerProvider interface {\n\t// GetIDTokenIssuer returns the ID token issuer.\n\tGetIDTokenIssuer(ctx context.Context) string\n}\n\n// JWTScopeFieldProvider returns the provider for configuring the JWT scope field.\ntype JWTScopeFieldProvider interface {\n\t// GetJWTScopeField returns the JWT scope field.\n\tGetJWTScopeField(ctx context.Context) jwt.JWTScopeFieldEnum\n}\n\n// AllowedPromptsProvider returns the provider for configuring the allowed prompts.\ntype AllowedPromptsProvider interface {\n\t// GetAllowedPrompts returns the allowed prompts.\n\tGetAllowedPrompts(ctx context.Context) []string\n}\n\n// MinParameterEntropyProvider returns the provider for configuring the minimum parameter entropy.\ntype MinParameterEntropyProvider interface {\n\t// GetMinParameterEntropy returns the minimum parameter entropy.\n\tGetMinParameterEntropy(_ context.Context) int\n}\n\n// SanitationAllowedProvider returns the provider for configuring the sanitation white list.\ntype SanitationAllowedProvider interface {\n\t// GetSanitationWhiteList is a whitelist of form values that are required by the token endpoint. These values\n\t// are safe for storage in a database (cleartext).\n\tGetSanitationWhiteList(ctx context.Context) []string\n}\n\n// OmitRedirectScopeParamProvider returns the provider for configuring the omit redirect scope param.\ntype OmitRedirectScopeParamProvider interface {\n\t// GetOmitRedirectScopeParam must be set to true if the scope query param is to be omitted\n\t// in the authorization's redirect URI\n\tGetOmitRedirectScopeParam(ctx context.Context) bool\n}\n\n// EnforcePKCEProvider returns the provider for configuring the enforcement of PKCE.\ntype EnforcePKCEProvider interface {\n\t// GetEnforcePKCE returns the enforcement of PKCE.\n\tGetEnforcePKCE(ctx context.Context) bool\n}\n\n// EnforcePKCEForPublicClientsProvider returns the provider for configuring the enforcement of PKCE for public clients.\ntype EnforcePKCEForPublicClientsProvider interface {\n\t// GetEnforcePKCEForPublicClients returns the enforcement of PKCE for public clients.\n\tGetEnforcePKCEForPublicClients(ctx context.Context) bool\n}\n\n// EnablePKCEPlainChallengeMethodProvider returns the provider for configuring the enable PKCE plain challenge method.\ntype EnablePKCEPlainChallengeMethodProvider interface {\n\t// GetEnablePKCEPlainChallengeMethod returns the enable PKCE plain challenge method.\n\tGetEnablePKCEPlainChallengeMethod(ctx context.Context) bool\n}\n\n// GrantTypeJWTBearerCanSkipClientAuthProvider returns the provider for configuring the grant type JWT bearer can skip client auth.\ntype GrantTypeJWTBearerCanSkipClientAuthProvider interface {\n\t// GetGrantTypeJWTBearerCanSkipClientAuth returns the grant type JWT bearer can skip client auth.\n\tGetGrantTypeJWTBearerCanSkipClientAuth(ctx context.Context) bool\n}\n\n// GrantTypeJWTBearerIDOptionalProvider returns the provider for configuring the grant type JWT bearer ID optional.\ntype GrantTypeJWTBearerIDOptionalProvider interface {\n\t// GetGrantTypeJWTBearerIDOptional returns the grant type JWT bearer ID optional.\n\tGetGrantTypeJWTBearerIDOptional(ctx context.Context) bool\n}\n\n// GrantTypeJWTBearerIssuedDateOptionalProvider returns the provider for configuring the grant type JWT bearer issued date optional.\ntype GrantTypeJWTBearerIssuedDateOptionalProvider interface {\n\t// GetGrantTypeJWTBearerIssuedDateOptional returns the grant type JWT bearer issued date optional.\n\tGetGrantTypeJWTBearerIssuedDateOptional(ctx context.Context) bool\n}\n\n// GetJWTMaxDurationProvider returns the provider for configuring the JWT max duration.\ntype GetJWTMaxDurationProvider interface {\n\t// GetJWTMaxDuration returns the JWT max duration.\n\tGetJWTMaxDuration(ctx context.Context) time.Duration\n}\n\n// TokenEntropyProvider returns the provider for configuring the token entropy.\ntype TokenEntropyProvider interface {\n\t// GetTokenEntropy returns the token entropy.\n\tGetTokenEntropy(ctx context.Context) int\n}\n\n// GlobalSecretProvider returns the provider for configuring the global secret.\ntype GlobalSecretProvider interface {\n\t// GetGlobalSecret returns the global secret.\n\tGetGlobalSecret(ctx context.Context) ([]byte, error)\n}\n\n// RotatedGlobalSecretsProvider returns the provider for configuring the rotated global secrets.\ntype RotatedGlobalSecretsProvider interface {\n\t// GetRotatedGlobalSecrets returns the rotated global secrets.\n\tGetRotatedGlobalSecrets(ctx context.Context) ([][]byte, error)\n}\n\n// HMACHashingProvider returns the provider for configuring the hash function.\ntype HMACHashingProvider interface {\n\t// GetHMACHasher returns the hash function.\n\tGetHMACHasher(ctx context.Context) func() hash.Hash\n}\n\n// GetSecretsHashingProvider provides the client secrets hashing function.\ntype GetSecretsHashingProvider interface {\n\t// GetSecretsHasher returns the client secrets hashing function.\n\tGetSecretsHasher(ctx context.Context) Hasher\n}\n\n// SendDebugMessagesToClientsProvider returns the provider for configuring the send debug messages to clients.\ntype SendDebugMessagesToClientsProvider interface {\n\t// GetSendDebugMessagesToClients returns the send debug messages to clients.\n\tGetSendDebugMessagesToClients(ctx context.Context) bool\n}\n\n// JWKSFetcherStrategyProvider returns the provider for configuring the JWKS fetcher strategy.\ntype JWKSFetcherStrategyProvider interface {\n\t// GetJWKSFetcherStrategy returns the JWKS fetcher strategy.\n\tGetJWKSFetcherStrategy(ctx context.Context) JWKSFetcherStrategy\n}\n\n// HTTPClientProvider returns the provider for configuring the HTTP client.\ntype HTTPClientProvider interface {\n\t// GetHTTPClient returns the HTTP client provider.\n\tGetHTTPClient(ctx context.Context) *retryablehttp.Client\n}\n\n// ClientAuthenticationStrategyProvider returns the provider for configuring the client authentication strategy.\ntype ClientAuthenticationStrategyProvider interface {\n\t// GetClientAuthenticationStrategy returns the client authentication strategy.\n\tGetClientAuthenticationStrategy(ctx context.Context) ClientAuthenticationStrategy\n}\n\n// ResponseModeHandlerExtensionProvider returns the provider for configuring the response mode handler extension.\ntype ResponseModeHandlerExtensionProvider interface {\n\t// GetResponseModeHandlerExtension returns the response mode handler extension.\n\tGetResponseModeHandlerExtension(ctx context.Context) ResponseModeHandler\n}\n\n// MessageCatalogProvider returns the provider for configuring the message catalog.\ntype MessageCatalogProvider interface {\n\t// GetMessageCatalog returns the message catalog.\n\tGetMessageCatalog(ctx context.Context) i18n.MessageCatalog\n}\n\n// FormPostHTMLTemplateProvider returns the provider for configuring the form post HTML template.\ntype FormPostHTMLTemplateProvider interface {\n\t// GetFormPostHTMLTemplate returns the form post HTML template.\n\tGetFormPostHTMLTemplate(ctx context.Context) *template.Template\n}\n\ntype TokenURLProvider interface {\n\t// GetTokenURLs returns the token URL.\n\tGetTokenURLs(ctx context.Context) []string\n}\n\n// AuthorizeEndpointHandlersProvider returns the provider for configuring the authorize endpoint handlers.\ntype AuthorizeEndpointHandlersProvider interface {\n\t// GetAuthorizeEndpointHandlers returns the authorize endpoint handlers.\n\tGetAuthorizeEndpointHandlers(ctx context.Context) AuthorizeEndpointHandlers\n}\n\n// TokenEndpointHandlersProvider returns the provider for configuring the token endpoint handlers.\ntype TokenEndpointHandlersProvider interface {\n\t// GetTokenEndpointHandlers returns the token endpoint handlers.\n\tGetTokenEndpointHandlers(ctx context.Context) TokenEndpointHandlers\n}\n\n// TokenIntrospectionHandlersProvider returns the provider for configuring the token introspection handlers.\ntype TokenIntrospectionHandlersProvider interface {\n\t// GetTokenIntrospectionHandlers returns the token introspection handlers.\n\tGetTokenIntrospectionHandlers(ctx context.Context) TokenIntrospectionHandlers\n}\n\n// RevocationHandlersProvider returns the provider for configuring the revocation handlers.\ntype RevocationHandlersProvider interface {\n\t// GetRevocationHandlers returns the revocation handlers.\n\tGetRevocationHandlers(ctx context.Context) RevocationHandlers\n}\n\n// PushedAuthorizeEndpointHandlersProvider returns the provider for configuring the PAR handlers.\ntype PushedAuthorizeRequestHandlersProvider interface {\n\t// GetPushedAuthorizeEndpointHandlers returns the handlers.\n\tGetPushedAuthorizeEndpointHandlers(ctx context.Context) PushedAuthorizeEndpointHandlers\n}\n\n// UseLegacyErrorFormatProvider returns the provider for configuring whether to use the legacy error format.\n//\n// DEPRECATED: Do not use this flag anymore.\ntype UseLegacyErrorFormatProvider interface {\n\t// GetUseLegacyErrorFormat returns whether to use the legacy error format.\n\t//\n\t// DEPRECATED: Do not use this flag anymore.\n\tGetUseLegacyErrorFormat(ctx context.Context) bool\n}\n\n// PushedAuthorizeRequestConfigProvider is the configuration provider for pushed\n// authorization request.\ntype PushedAuthorizeRequestConfigProvider interface {\n\t// GetPushedAuthorizeRequestURIPrefix is the request URI prefix. This is\n\t// usually 'urn:ietf:params:oauth:request_uri:'.\n\tGetPushedAuthorizeRequestURIPrefix(ctx context.Context) string\n\n\t// GetPushedAuthorizeContextLifespan is the lifespan of the short-lived PAR context.\n\tGetPushedAuthorizeContextLifespan(ctx context.Context) time.Duration\n\n\t// EnforcePushedAuthorize indicates if PAR is enforced. In this mode, a client\n\t// cannot pass authorize parameters at the 'authorize' endpoint. The 'authorize' endpoint\n\t// must contain the PAR request_uri.\n\tEnforcePushedAuthorize(ctx context.Context) bool\n}\n"
        },
        {
          "name": "config_default.go",
          "type": "blob",
          "size": 19.4921875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"hash\"\n\t\"html/template\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/hashicorp/go-retryablehttp\"\n\n\t\"github.com/ory/fosite/token/jwt\"\n\n\t\"github.com/ory/fosite/i18n\"\n)\n\nconst (\n\tdefaultPARPrefix          = \"urn:ietf:params:oauth:request_uri:\"\n\tdefaultPARContextLifetime = 5 * time.Minute\n)\n\nvar (\n\t_ AuthorizeCodeLifespanProvider                = (*Config)(nil)\n\t_ RefreshTokenLifespanProvider                 = (*Config)(nil)\n\t_ AccessTokenLifespanProvider                  = (*Config)(nil)\n\t_ ScopeStrategyProvider                        = (*Config)(nil)\n\t_ AudienceStrategyProvider                     = (*Config)(nil)\n\t_ RedirectSecureCheckerProvider                = (*Config)(nil)\n\t_ RefreshTokenScopesProvider                   = (*Config)(nil)\n\t_ DisableRefreshTokenValidationProvider        = (*Config)(nil)\n\t_ AccessTokenIssuerProvider                    = (*Config)(nil)\n\t_ JWTScopeFieldProvider                        = (*Config)(nil)\n\t_ AllowedPromptsProvider                       = (*Config)(nil)\n\t_ OmitRedirectScopeParamProvider               = (*Config)(nil)\n\t_ MinParameterEntropyProvider                  = (*Config)(nil)\n\t_ SanitationAllowedProvider                    = (*Config)(nil)\n\t_ EnforcePKCEForPublicClientsProvider          = (*Config)(nil)\n\t_ EnablePKCEPlainChallengeMethodProvider       = (*Config)(nil)\n\t_ EnforcePKCEProvider                          = (*Config)(nil)\n\t_ GrantTypeJWTBearerCanSkipClientAuthProvider  = (*Config)(nil)\n\t_ GrantTypeJWTBearerIDOptionalProvider         = (*Config)(nil)\n\t_ GrantTypeJWTBearerIssuedDateOptionalProvider = (*Config)(nil)\n\t_ GetJWTMaxDurationProvider                    = (*Config)(nil)\n\t_ IDTokenLifespanProvider                      = (*Config)(nil)\n\t_ IDTokenIssuerProvider                        = (*Config)(nil)\n\t_ JWKSFetcherStrategyProvider                  = (*Config)(nil)\n\t_ ClientAuthenticationStrategyProvider         = (*Config)(nil)\n\t_ SendDebugMessagesToClientsProvider           = (*Config)(nil)\n\t_ ResponseModeHandlerExtensionProvider         = (*Config)(nil)\n\t_ MessageCatalogProvider                       = (*Config)(nil)\n\t_ FormPostHTMLTemplateProvider                 = (*Config)(nil)\n\t_ TokenURLProvider                             = (*Config)(nil)\n\t_ GetSecretsHashingProvider                    = (*Config)(nil)\n\t_ HTTPClientProvider                           = (*Config)(nil)\n\t_ HMACHashingProvider                          = (*Config)(nil)\n\t_ AuthorizeEndpointHandlersProvider            = (*Config)(nil)\n\t_ TokenEndpointHandlersProvider                = (*Config)(nil)\n\t_ TokenIntrospectionHandlersProvider           = (*Config)(nil)\n\t_ RevocationHandlersProvider                   = (*Config)(nil)\n\t_ PushedAuthorizeRequestHandlersProvider       = (*Config)(nil)\n\t_ PushedAuthorizeRequestConfigProvider         = (*Config)(nil)\n)\n\ntype Config struct {\n\t// AccessTokenLifespan sets how long an access token is going to be valid. Defaults to one hour.\n\tAccessTokenLifespan time.Duration\n\n\t// VerifiableCredentialsNonceLifespan sets how long a verifiable credentials nonce is going to be valid. Defaults to one hour.\n\tVerifiableCredentialsNonceLifespan time.Duration\n\n\t// RefreshTokenLifespan sets how long a refresh token is going to be valid. Defaults to 30 days. Set to -1 for\n\t// refresh tokens that never expire.\n\tRefreshTokenLifespan time.Duration\n\n\t// AuthorizeCodeLifespan sets how long an authorize code is going to be valid. Defaults to fifteen minutes.\n\tAuthorizeCodeLifespan time.Duration\n\n\t// IDTokenLifespan sets the default id token lifetime. Defaults to one hour.\n\tIDTokenLifespan time.Duration\n\n\t// IDTokenIssuer sets the default issuer of the ID Token.\n\tIDTokenIssuer string\n\n\t// HashCost sets the cost of the password hashing cost. Defaults to 12.\n\tHashCost int\n\n\t// DisableRefreshTokenValidation sets the introspection endpoint to disable refresh token validation.\n\tDisableRefreshTokenValidation bool\n\n\t// SendDebugMessagesToClients if set to true, includes error debug messages in response payloads. Be aware that sensitive\n\t// data may be exposed, depending on your implementation of Fosite. Such sensitive data might include database error\n\t// codes or other information. Proceed with caution!\n\tSendDebugMessagesToClients bool\n\n\t// ScopeStrategy sets the scope strategy that should be supported, for example fosite.WildcardScopeStrategy.\n\tScopeStrategy ScopeStrategy\n\n\t// AudienceMatchingStrategy sets the audience matching strategy that should be supported, defaults to fosite.DefaultsAudienceMatchingStrategy.\n\tAudienceMatchingStrategy AudienceMatchingStrategy\n\n\t// EnforcePKCE, if set to true, requires clients to perform authorize code flows with PKCE. Defaults to false.\n\tEnforcePKCE bool\n\n\t// EnforcePKCEForPublicClients requires only public clients to use PKCE with the authorize code flow. Defaults to false.\n\tEnforcePKCEForPublicClients bool\n\n\t// EnablePKCEPlainChallengeMethod sets whether or not to allow the plain challenge method (S256 should be used whenever possible, plain is really discouraged). Defaults to false.\n\tEnablePKCEPlainChallengeMethod bool\n\n\t// AllowedPromptValues sets which OpenID Connect prompt values the server supports. Defaults to []string{\"login\", \"none\", \"consent\", \"select_account\"}.\n\tAllowedPromptValues []string\n\n\t// TokenURL is the the URL of the Authorization Server's Token Endpoint. If the authorization server is intended\n\t// to be compatible with the private_key_jwt client authentication method (see http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth),\n\t// this value MUST be set.\n\tTokenURL string\n\n\t// JWKSFetcherStrategy is responsible for fetching JSON Web Keys from remote URLs. This is required when the private_key_jwt\n\t// client authentication method is used. Defaults to fosite.DefaultJWKSFetcherStrategy.\n\tJWKSFetcherStrategy JWKSFetcherStrategy\n\n\t// TokenEntropy indicates the entropy of the random string, used as the \"message\" part of the HMAC token.\n\t// Defaults to 32.\n\tTokenEntropy int\n\n\t// RedirectSecureChecker is a function that returns true if the provided URL can be securely used as a redirect URL.\n\tRedirectSecureChecker func(context.Context, *url.URL) bool\n\n\t// RefreshTokenScopes defines which OAuth scopes will be given refresh tokens during the authorization code grant exchange. This defaults to \"offline\" and \"offline_access\". When set to an empty array, all exchanges will be given refresh tokens.\n\tRefreshTokenScopes []string\n\n\t// MinParameterEntropy controls the minimum size of state and nonce parameters. Defaults to fosite.MinParameterEntropy.\n\tMinParameterEntropy int\n\n\t// UseLegacyErrorFormat controls whether the legacy error format (with `error_debug`, `error_hint`, ...)\n\t// should be used or not.\n\tUseLegacyErrorFormat bool\n\n\t// GrantTypeJWTBearerCanSkipClientAuth indicates, if client authentication can be skipped, when using jwt as assertion.\n\tGrantTypeJWTBearerCanSkipClientAuth bool\n\n\t// GrantTypeJWTBearerIDOptional indicates, if jti (JWT ID) claim required or not in JWT.\n\tGrantTypeJWTBearerIDOptional bool\n\n\t// GrantTypeJWTBearerIssuedDateOptional indicates, if \"iat\" (issued at) claim required or not in JWT.\n\tGrantTypeJWTBearerIssuedDateOptional bool\n\n\t// GrantTypeJWTBearerMaxDuration sets the maximum time after JWT issued date, during which the JWT is considered valid.\n\tGrantTypeJWTBearerMaxDuration time.Duration\n\n\t// ClientAuthenticationStrategy indicates the Strategy to authenticate client requests\n\tClientAuthenticationStrategy ClientAuthenticationStrategy\n\n\t// ResponseModeHandlerExtension provides a handler for custom response modes\n\tResponseModeHandlerExtension ResponseModeHandler\n\n\t// MessageCatalog is the message bundle used for i18n\n\tMessageCatalog i18n.MessageCatalog\n\n\t// FormPostHTMLTemplate sets html template for rendering the authorization response when the request has response_mode=form_post.\n\tFormPostHTMLTemplate *template.Template\n\n\t// OmitRedirectScopeParam indicates whether the \"scope\" parameter should be omitted from the redirect URL.\n\tOmitRedirectScopeParam bool\n\n\t// SanitationWhiteList is a whitelist of form values that are required by the token endpoint. These values\n\t// are safe for storage in a database (cleartext).\n\tSanitationWhiteList []string\n\n\t// JWTScopeClaimKey defines the claim key to be used to set the scope in. Valid fields are \"scope\" or \"scp\" or both.\n\tJWTScopeClaimKey jwt.JWTScopeFieldEnum\n\n\t// AccessTokenIssuer is the issuer to be used when generating access tokens.\n\tAccessTokenIssuer string\n\n\t// ClientSecretsHasher is the hasher used to hash OAuth2 Client Secrets.\n\tClientSecretsHasher Hasher\n\n\t// HTTPClient is the HTTP client to use for requests.\n\tHTTPClient *retryablehttp.Client\n\n\t// AuthorizeEndpointHandlers is a list of handlers that are called before the authorization endpoint is served.\n\tAuthorizeEndpointHandlers AuthorizeEndpointHandlers\n\n\t// TokenEndpointHandlers is a list of handlers that are called before the token endpoint is served.\n\tTokenEndpointHandlers TokenEndpointHandlers\n\n\t// TokenIntrospectionHandlers is a list of handlers that are called before the token introspection endpoint is served.\n\tTokenIntrospectionHandlers TokenIntrospectionHandlers\n\n\t// RevocationHandlers is a list of handlers that are called before the revocation endpoint is served.\n\tRevocationHandlers RevocationHandlers\n\n\t// PushedAuthorizeEndpointHandlers is a list of handlers that are called before the PAR endpoint is served.\n\tPushedAuthorizeEndpointHandlers PushedAuthorizeEndpointHandlers\n\n\t// GlobalSecret is the global secret used to sign and verify signatures.\n\tGlobalSecret []byte\n\n\t// RotatedGlobalSecrets is a list of global secrets that are used to verify signatures.\n\tRotatedGlobalSecrets [][]byte\n\n\t// HMACHasher is the hasher used to generate HMAC signatures.\n\tHMACHasher func() hash.Hash\n\n\t// PushedAuthorizeRequestURIPrefix is the URI prefix for the PAR request_uri.\n\t// This is defaulted to 'urn:ietf:params:oauth:request_uri:'.\n\tPushedAuthorizeRequestURIPrefix string\n\n\t// PushedAuthorizeContextLifespan is the lifespan of the PAR context\n\tPushedAuthorizeContextLifespan time.Duration\n\n\t// IsPushedAuthorizeEnforced enforces pushed authorization request for /authorize\n\tIsPushedAuthorizeEnforced bool\n}\n\nfunc (c *Config) GetGlobalSecret(ctx context.Context) ([]byte, error) {\n\treturn c.GlobalSecret, nil\n}\n\nfunc (c *Config) GetUseLegacyErrorFormat(ctx context.Context) bool {\n\treturn c.UseLegacyErrorFormat\n}\n\nfunc (c *Config) GetRotatedGlobalSecrets(ctx context.Context) ([][]byte, error) {\n\treturn c.RotatedGlobalSecrets, nil\n}\n\nfunc (c *Config) GetHMACHasher(ctx context.Context) func() hash.Hash {\n\treturn c.HMACHasher\n}\n\nfunc (c *Config) GetAuthorizeEndpointHandlers(ctx context.Context) AuthorizeEndpointHandlers {\n\treturn c.AuthorizeEndpointHandlers\n}\n\nfunc (c *Config) GetTokenEndpointHandlers(ctx context.Context) TokenEndpointHandlers {\n\treturn c.TokenEndpointHandlers\n}\n\nfunc (c *Config) GetTokenIntrospectionHandlers(ctx context.Context) TokenIntrospectionHandlers {\n\treturn c.TokenIntrospectionHandlers\n}\n\nfunc (c *Config) GetRevocationHandlers(ctx context.Context) RevocationHandlers {\n\treturn c.RevocationHandlers\n}\n\nfunc (c *Config) GetHTTPClient(ctx context.Context) *retryablehttp.Client {\n\tif c.HTTPClient == nil {\n\t\treturn retryablehttp.NewClient()\n\t}\n\treturn c.HTTPClient\n}\n\nfunc (c *Config) GetSecretsHasher(ctx context.Context) Hasher {\n\tif c.ClientSecretsHasher == nil {\n\t\tc.ClientSecretsHasher = &BCrypt{Config: c}\n\t}\n\treturn c.ClientSecretsHasher\n}\n\nfunc (c *Config) GetTokenURLs(ctx context.Context) []string {\n\treturn []string{c.TokenURL}\n}\n\nfunc (c *Config) GetFormPostHTMLTemplate(ctx context.Context) *template.Template {\n\treturn c.FormPostHTMLTemplate\n}\n\nfunc (c *Config) GetMessageCatalog(ctx context.Context) i18n.MessageCatalog {\n\treturn c.MessageCatalog\n}\n\nfunc (c *Config) GetResponseModeHandlerExtension(ctx context.Context) ResponseModeHandler {\n\treturn c.ResponseModeHandlerExtension\n}\n\nfunc (c *Config) GetSendDebugMessagesToClients(ctx context.Context) bool {\n\treturn c.SendDebugMessagesToClients\n}\n\nfunc (c *Config) GetIDTokenIssuer(ctx context.Context) string {\n\treturn c.IDTokenIssuer\n}\n\n// GetGrantTypeJWTBearerIssuedDateOptional returns the GrantTypeJWTBearerIssuedDateOptional field.\nfunc (c *Config) GetGrantTypeJWTBearerIssuedDateOptional(ctx context.Context) bool {\n\treturn c.GrantTypeJWTBearerIssuedDateOptional\n}\n\n// GetGrantTypeJWTBearerIDOptional returns the GrantTypeJWTBearerIDOptional field.\nfunc (c *Config) GetGrantTypeJWTBearerIDOptional(ctx context.Context) bool {\n\treturn c.GrantTypeJWTBearerIDOptional\n}\n\n// GetGrantTypeJWTBearerCanSkipClientAuth returns the GrantTypeJWTBearerCanSkipClientAuth field.\nfunc (c *Config) GetGrantTypeJWTBearerCanSkipClientAuth(ctx context.Context) bool {\n\treturn c.GrantTypeJWTBearerCanSkipClientAuth\n}\n\n// GetEnforcePKCE If set to true, public clients must use PKCE.\nfunc (c *Config) GetEnforcePKCE(ctx context.Context) bool {\n\treturn c.EnforcePKCE\n}\n\n// GetEnablePKCEPlainChallengeMethod returns whether or not to allow the plain challenge method (S256 should be used whenever possible, plain is really discouraged).\nfunc (c *Config) GetEnablePKCEPlainChallengeMethod(ctx context.Context) bool {\n\treturn c.EnablePKCEPlainChallengeMethod\n}\n\n// GetEnforcePKCEForPublicClients returns the value of EnforcePKCEForPublicClients.\nfunc (c *Config) GetEnforcePKCEForPublicClients(ctx context.Context) bool {\n\treturn c.EnforcePKCEForPublicClients\n}\n\n// GetSanitationWhiteList returns a list of allowed form values that are required by the token endpoint. These values\n// are safe for storage in a database (cleartext).\nfunc (c *Config) GetSanitationWhiteList(ctx context.Context) []string {\n\treturn c.SanitationWhiteList\n}\n\nfunc (c *Config) GetOmitRedirectScopeParam(ctx context.Context) bool {\n\treturn c.OmitRedirectScopeParam\n}\n\nfunc (c *Config) GetAccessTokenIssuer(ctx context.Context) string {\n\treturn c.AccessTokenIssuer\n}\n\nfunc (c *Config) GetJWTScopeField(ctx context.Context) jwt.JWTScopeFieldEnum {\n\treturn c.JWTScopeClaimKey\n}\n\nfunc (c *Config) GetAllowedPrompts(_ context.Context) []string {\n\treturn c.AllowedPromptValues\n}\n\n// GetScopeStrategy returns the scope strategy to be used. Defaults to glob scope strategy.\nfunc (c *Config) GetScopeStrategy(_ context.Context) ScopeStrategy {\n\tif c.ScopeStrategy == nil {\n\t\tc.ScopeStrategy = WildcardScopeStrategy\n\t}\n\treturn c.ScopeStrategy\n}\n\n// GetAudienceStrategy returns the scope strategy to be used. Defaults to glob scope strategy.\nfunc (c *Config) GetAudienceStrategy(_ context.Context) AudienceMatchingStrategy {\n\tif c.AudienceMatchingStrategy == nil {\n\t\tc.AudienceMatchingStrategy = DefaultAudienceMatchingStrategy\n\t}\n\treturn c.AudienceMatchingStrategy\n}\n\n// GetAuthorizeCodeLifespan returns how long an authorize code should be valid. Defaults to one fifteen minutes.\nfunc (c *Config) GetAuthorizeCodeLifespan(_ context.Context) time.Duration {\n\tif c.AuthorizeCodeLifespan == 0 {\n\t\treturn time.Minute * 15\n\t}\n\treturn c.AuthorizeCodeLifespan\n}\n\n// GetIDTokenLifespan returns how long an id token should be valid. Defaults to one hour.\nfunc (c *Config) GetIDTokenLifespan(_ context.Context) time.Duration {\n\tif c.IDTokenLifespan == 0 {\n\t\treturn time.Hour\n\t}\n\treturn c.IDTokenLifespan\n}\n\n// GetAccessTokenLifespan returns how long an access token should be valid. Defaults to one hour.\nfunc (c *Config) GetAccessTokenLifespan(_ context.Context) time.Duration {\n\tif c.AccessTokenLifespan == 0 {\n\t\treturn time.Hour\n\t}\n\treturn c.AccessTokenLifespan\n}\n\n// GetNonceLifespan returns how long a nonce should be valid. Defaults to one hour.\nfunc (c *Config) GetVerifiableCredentialsNonceLifespan(_ context.Context) time.Duration {\n\tif c.VerifiableCredentialsNonceLifespan == 0 {\n\t\treturn time.Hour\n\t}\n\treturn c.VerifiableCredentialsNonceLifespan\n}\n\n// GetRefreshTokenLifespan sets how long a refresh token is going to be valid. Defaults to 30 days. Set to -1 for\n// refresh tokens that never expire.\nfunc (c *Config) GetRefreshTokenLifespan(_ context.Context) time.Duration {\n\tif c.RefreshTokenLifespan == 0 {\n\t\treturn time.Hour * 24 * 30\n\t}\n\treturn c.RefreshTokenLifespan\n}\n\n// GetBCryptCost returns the bcrypt cost factor. Defaults to 12.\nfunc (c *Config) GetBCryptCost(_ context.Context) int {\n\tif c.HashCost == 0 {\n\t\treturn DefaultBCryptWorkFactor\n\t}\n\treturn c.HashCost\n}\n\n// GetJWKSFetcherStrategy returns the JWKSFetcherStrategy.\nfunc (c *Config) GetJWKSFetcherStrategy(_ context.Context) JWKSFetcherStrategy {\n\tif c.JWKSFetcherStrategy == nil {\n\t\tc.JWKSFetcherStrategy = NewDefaultJWKSFetcherStrategy()\n\t}\n\treturn c.JWKSFetcherStrategy\n}\n\n// GetTokenEntropy returns the entropy of the \"message\" part of a HMAC Token. Defaults to 32.\nfunc (c *Config) GetTokenEntropy(_ context.Context) int {\n\tif c.TokenEntropy == 0 {\n\t\treturn 32\n\t}\n\treturn c.TokenEntropy\n}\n\n// GetRedirectSecureChecker returns the checker to check if redirect URI is secure. Defaults to fosite.IsRedirectURISecure.\nfunc (c *Config) GetRedirectSecureChecker(_ context.Context) func(context.Context, *url.URL) bool {\n\tif c.RedirectSecureChecker == nil {\n\t\treturn IsRedirectURISecure\n\t}\n\treturn c.RedirectSecureChecker\n}\n\n// GetRefreshTokenScopes returns which scopes will provide refresh tokens.\nfunc (c *Config) GetRefreshTokenScopes(_ context.Context) []string {\n\tif c.RefreshTokenScopes == nil {\n\t\treturn []string{\"offline\", \"offline_access\"}\n\t}\n\treturn c.RefreshTokenScopes\n}\n\n// GetMinParameterEntropy returns MinParameterEntropy if set. Defaults to fosite.MinParameterEntropy.\nfunc (c *Config) GetMinParameterEntropy(_ context.Context) int {\n\tif c.MinParameterEntropy == 0 {\n\t\treturn MinParameterEntropy\n\t} else {\n\t\treturn c.MinParameterEntropy\n\t}\n}\n\n// GetJWTMaxDuration specified the maximum amount of allowed `exp` time for a JWT. It compares\n// the time with the JWT's `exp` time if the JWT time is larger, will cause the JWT to be invalid.\n//\n// Defaults to a day.\nfunc (c *Config) GetJWTMaxDuration(_ context.Context) time.Duration {\n\tif c.GrantTypeJWTBearerMaxDuration == 0 {\n\t\treturn time.Hour * 24\n\t}\n\treturn c.GrantTypeJWTBearerMaxDuration\n}\n\n// GetClientAuthenticationStrategy returns the configured client authentication strategy.\n// Defaults to nil.\n// Note that on a nil strategy `fosite.Fosite` fallbacks to its default client authentication strategy\n// `fosite.Fosite.DefaultClientAuthenticationStrategy`\nfunc (c *Config) GetClientAuthenticationStrategy(_ context.Context) ClientAuthenticationStrategy {\n\treturn c.ClientAuthenticationStrategy\n}\n\n// GetDisableRefreshTokenValidation returns whether to disable the validation of the refresh token.\nfunc (c *Config) GetDisableRefreshTokenValidation(_ context.Context) bool {\n\treturn c.DisableRefreshTokenValidation\n}\n\n// GetPushedAuthorizeEndpointHandlers returns the handlers.\nfunc (c *Config) GetPushedAuthorizeEndpointHandlers(ctx context.Context) PushedAuthorizeEndpointHandlers {\n\treturn c.PushedAuthorizeEndpointHandlers\n}\n\n// GetPushedAuthorizeRequestURIPrefix is the request URI prefix. This is\n// usually 'urn:ietf:params:oauth:request_uri:'.\nfunc (c *Config) GetPushedAuthorizeRequestURIPrefix(ctx context.Context) string {\n\tif c.PushedAuthorizeRequestURIPrefix == \"\" {\n\t\treturn defaultPARPrefix\n\t}\n\n\treturn c.PushedAuthorizeRequestURIPrefix\n}\n\n// GetPushedAuthorizeContextLifespan is the lifespan of the short-lived PAR context.\nfunc (c *Config) GetPushedAuthorizeContextLifespan(ctx context.Context) time.Duration {\n\tif c.PushedAuthorizeContextLifespan <= 0 {\n\t\treturn defaultPARContextLifetime\n\t}\n\n\treturn c.PushedAuthorizeContextLifespan\n}\n\n// EnforcePushedAuthorize indicates if PAR is enforced. In this mode, a client\n// cannot pass authorize parameters at the 'authorize' endpoint. The 'authorize' endpoint\n// must contain the PAR request_uri.\nfunc (c *Config) EnforcePushedAuthorize(ctx context.Context) bool {\n\treturn c.IsPushedAuthorizeEnforced\n}\n"
        },
        {
          "name": "context.go",
          "type": "blob",
          "size": 0.625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport \"context\"\n\nfunc NewContext() context.Context {\n\treturn context.Background()\n}\n\ntype ContextKey string\n\nconst (\n\tRequestContextKey           = ContextKey(\"request\")\n\tAccessRequestContextKey     = ContextKey(\"accessRequest\")\n\tAccessResponseContextKey    = ContextKey(\"accessResponse\")\n\tAuthorizeRequestContextKey  = ContextKey(\"authorizeRequest\")\n\tAuthorizeResponseContextKey = ContextKey(\"authorizeResponse\")\n\t// PushedAuthorizeResponseContextKey is the response context\n\tPushedAuthorizeResponseContextKey = ContextKey(\"pushedAuthorizeResponse\")\n)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "equalKeys_test.go",
          "type": "blob",
          "size": 1.796875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"testing\"\n\n\t\"github.com/oleiade/reflections\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestAssertObjectsAreEqualByKeys(t *testing.T) {\n\ttype foo struct {\n\t\tName string\n\t\tBody int\n\t}\n\ta := &foo{\"foo\", 1}\n\tb := &foo{\"bar\", 1}\n\tc := &foo{\"baz\", 3}\n\n\tAssertObjectKeysEqual(t, a, a, \"Name\", \"Body\")\n\tAssertObjectKeysNotEqual(t, a, b, \"Name\")\n\tAssertObjectKeysNotEqual(t, a, c, \"Name\", \"Body\")\n}\n\nfunc AssertObjectKeysEqual(t *testing.T, a, b interface{}, keys ...string) {\n\tassert.True(t, len(keys) > 0, \"No key provided.\")\n\tfor _, k := range keys {\n\t\tc, err := reflections.GetField(a, k)\n\t\tassert.NoError(t, err)\n\t\td, err := reflections.GetField(b, k)\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, c, d, \"field: %s\", k)\n\t}\n}\n\nfunc AssertObjectKeysNotEqual(t *testing.T, a, b interface{}, keys ...string) {\n\tassert.True(t, len(keys) > 0, \"No key provided.\")\n\tfor _, k := range keys {\n\t\tc, err := reflections.GetField(a, k)\n\t\tassert.NoError(t, err)\n\t\td, err := reflections.GetField(b, k)\n\t\tassert.NoError(t, err)\n\t\tassert.NotEqual(t, c, d, \"%s\", k)\n\t}\n}\n\nfunc RequireObjectKeysEqual(t *testing.T, a, b interface{}, keys ...string) {\n\tassert.True(t, len(keys) > 0, \"No key provided.\")\n\tfor _, k := range keys {\n\t\tc, err := reflections.GetField(a, k)\n\t\tassert.NoError(t, err)\n\t\td, err := reflections.GetField(b, k)\n\t\tassert.NoError(t, err)\n\t\trequire.Equal(t, c, d, \"%s\", k)\n\t}\n}\nfunc RequireObjectKeysNotEqual(t *testing.T, a, b interface{}, keys ...string) {\n\tassert.True(t, len(keys) > 0, \"No key provided.\")\n\tfor _, k := range keys {\n\t\tc, err := reflections.GetField(a, k)\n\t\tassert.NoError(t, err)\n\t\td, err := reflections.GetField(b, k)\n\t\tassert.NoError(t, err)\n\t\trequire.NotEqual(t, c, d, \"%s\", k)\n\t}\n}\n"
        },
        {
          "name": "errors.go",
          "type": "blob",
          "size": 17.623046875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"encoding/json\"\n\tstderr \"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"golang.org/x/text/language\"\n\n\t\"github.com/ory/fosite/i18n\"\n\t\"github.com/ory/x/errorsx\"\n\n\t\"github.com/pkg/errors\"\n)\n\nvar (\n\t// ErrInvalidatedAuthorizeCode is an error indicating that an authorization code has been\n\t// used previously.\n\tErrInvalidatedAuthorizeCode = stderr.New(\"Authorization code has ben invalidated\")\n\t// ErrSerializationFailure is an error indicating that the transactional capable storage could not guarantee\n\t// consistency of Update & Delete operations on the same rows between multiple sessions.\n\tErrSerializationFailure = &RFC6749Error{\n\t\tErrorField:       errUnknownErrorName,\n\t\tDescriptionField: \"The request could not be completed because another request is competing for the same resource.\",\n\t\tCodeField:        http.StatusConflict,\n\t}\n\tErrUnknownRequest = &RFC6749Error{\n\t\tErrorField:       errUnknownErrorName,\n\t\tDescriptionField: \"The handler is not responsible for this request.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrRequestForbidden = &RFC6749Error{\n\t\tErrorField:       errRequestForbidden,\n\t\tDescriptionField: \"The request is not allowed.\",\n\t\tHintField:        \"You are not allowed to perform this action.\",\n\t\tCodeField:        http.StatusForbidden,\n\t}\n\tErrInvalidRequest = &RFC6749Error{\n\t\tErrorField:       errInvalidRequestName,\n\t\tDescriptionField: \"The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.\",\n\t\tHintField:        \"Make sure that the various parameters are correct, be aware of case sensitivity and trim your parameters. Make sure that the client you are using has exactly whitelisted the redirect_uri you specified.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrUnauthorizedClient = &RFC6749Error{\n\t\tErrorField:       errUnauthorizedClientName,\n\t\tDescriptionField: \"The client is not authorized to request a token using this method.\",\n\t\tHintField:        \"Make sure that client id and secret are correctly specified and that the client exists.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrAccessDenied = &RFC6749Error{\n\t\tErrorField:       errAccessDeniedName,\n\t\tDescriptionField: \"The resource owner or authorization server denied the request.\",\n\t\tHintField:        \"Make sure that the request you are making is valid. Maybe the credential or request parameters you are using are limited in scope or otherwise restricted.\",\n\t\tCodeField:        http.StatusForbidden,\n\t}\n\tErrUnsupportedResponseType = &RFC6749Error{\n\t\tErrorField:       errUnsupportedResponseTypeName,\n\t\tDescriptionField: \"The authorization server does not support obtaining a token using this method.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrUnsupportedResponseMode = &RFC6749Error{\n\t\tErrorField:       errUnsupportedResponseModeName,\n\t\tDescriptionField: \"The authorization server does not support obtaining a response using this response mode.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrInvalidScope = &RFC6749Error{\n\t\tErrorField:       errInvalidScopeName,\n\t\tDescriptionField: \"The requested scope is invalid, unknown, or malformed.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrServerError = &RFC6749Error{\n\t\tErrorField:       errServerErrorName,\n\t\tDescriptionField: \"The authorization server encountered an unexpected condition that prevented it from fulfilling the request.\",\n\t\tCodeField:        http.StatusInternalServerError,\n\t}\n\tErrTemporarilyUnavailable = &RFC6749Error{\n\t\tErrorField:       errTemporarilyUnavailableName,\n\t\tDescriptionField: \"The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n\t\tCodeField:        http.StatusServiceUnavailable,\n\t}\n\tErrUnsupportedGrantType = &RFC6749Error{\n\t\tErrorField:       errUnsupportedGrantTypeName,\n\t\tDescriptionField: \"The authorization grant type is not supported by the authorization server.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrInvalidGrant = &RFC6749Error{\n\t\tErrorField:       errInvalidGrantName,\n\t\tDescriptionField: \"The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrInvalidClient = &RFC6749Error{\n\t\tErrorField:       errInvalidClientName,\n\t\tDescriptionField: \"Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).\",\n\t\tCodeField:        http.StatusUnauthorized,\n\t}\n\tErrInvalidState = &RFC6749Error{\n\t\tErrorField:       errInvalidStateName,\n\t\tDescriptionField: \"The state is missing or does not have enough characters and is therefore considered too weak.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrMisconfiguration = &RFC6749Error{\n\t\tErrorField:       errMisconfigurationName,\n\t\tDescriptionField: \"The request failed because of an internal error that is probably caused by misconfiguration.\",\n\t\tCodeField:        http.StatusInternalServerError,\n\t}\n\tErrInsufficientEntropy = &RFC6749Error{\n\t\tErrorField:       errInsufficientEntropyName,\n\t\tDescriptionField: \"The request used a security parameter (e.g., anti-replay, anti-csrf) with insufficient entropy.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrNotFound = &RFC6749Error{\n\t\tErrorField:       errNotFoundName,\n\t\tDescriptionField: \"Could not find the requested resource(s).\",\n\t\tCodeField:        http.StatusNotFound,\n\t}\n\tErrRequestUnauthorized = &RFC6749Error{\n\t\tErrorField:       errRequestUnauthorizedName,\n\t\tDescriptionField: \"The request could not be authorized.\",\n\t\tHintField:        \"Check that you provided valid credentials in the right format.\",\n\t\tCodeField:        http.StatusUnauthorized,\n\t}\n\tErrTokenSignatureMismatch = &RFC6749Error{\n\t\tErrorField:       errTokenSignatureMismatchName,\n\t\tDescriptionField: \"Token signature mismatch.\",\n\t\tHintField:        \"Check that you provided  a valid token in the right format.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrInvalidTokenFormat = &RFC6749Error{\n\t\tErrorField:       errInvalidTokenFormatName,\n\t\tDescriptionField: \"Invalid token format.\",\n\t\tHintField:        \"Check that you provided a valid token in the right format.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrTokenExpired = &RFC6749Error{\n\t\tErrorField:       errTokenExpiredName,\n\t\tDescriptionField: \"Token expired.\",\n\t\tHintField:        \"The token expired.\",\n\t\tCodeField:        http.StatusUnauthorized,\n\t}\n\tErrScopeNotGranted = &RFC6749Error{\n\t\tErrorField:       errScopeNotGrantedName,\n\t\tDescriptionField: \"The token was not granted the requested scope.\",\n\t\tHintField:        \"The resource owner did not grant the requested scope.\",\n\t\tCodeField:        http.StatusForbidden,\n\t}\n\tErrTokenClaim = &RFC6749Error{\n\t\tErrorField:       errTokenClaimName,\n\t\tDescriptionField: \"The token failed validation due to a claim mismatch.\",\n\t\tHintField:        \"One or more token claims failed validation.\",\n\t\tCodeField:        http.StatusUnauthorized,\n\t}\n\tErrInactiveToken = &RFC6749Error{\n\t\tErrorField:       errTokenInactiveName,\n\t\tDescriptionField: \"Token is inactive because it is malformed, expired or otherwise invalid.\",\n\t\tHintField:        \"Token validation failed.\",\n\t\tCodeField:        http.StatusUnauthorized,\n\t}\n\tErrLoginRequired = &RFC6749Error{\n\t\tErrorField:       errLoginRequired,\n\t\tDescriptionField: \"The Authorization Server requires End-User authentication.\",\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrInteractionRequired = &RFC6749Error{\n\t\tDescriptionField: \"The Authorization Server requires End-User interaction of some form to proceed.\",\n\t\tErrorField:       errInteractionRequired,\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrConsentRequired = &RFC6749Error{\n\t\tDescriptionField: \"The Authorization Server requires End-User consent.\",\n\t\tErrorField:       errConsentRequired,\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrRequestNotSupported = &RFC6749Error{\n\t\tDescriptionField: \"The OP does not support use of the request parameter.\",\n\t\tErrorField:       errRequestNotSupportedName,\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrRequestURINotSupported = &RFC6749Error{\n\t\tDescriptionField: \"The OP does not support use of the request_uri parameter.\",\n\t\tErrorField:       errRequestURINotSupportedName,\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrRegistrationNotSupported = &RFC6749Error{\n\t\tDescriptionField: \"The OP does not support use of the registration parameter.\",\n\t\tErrorField:       errRegistrationNotSupportedName,\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrInvalidRequestURI = &RFC6749Error{\n\t\tDescriptionField: \"The request_uri in the Authorization Request returns an error or contains invalid data.\",\n\t\tErrorField:       errInvalidRequestURI,\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrInvalidRequestObject = &RFC6749Error{\n\t\tDescriptionField: \"The request parameter contains an invalid Request Object.\",\n\t\tErrorField:       errInvalidRequestObject,\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n\tErrJTIKnown = &RFC6749Error{\n\t\tDescriptionField: \"The jti was already used.\",\n\t\tErrorField:       errJTIKnownName,\n\t\tCodeField:        http.StatusBadRequest,\n\t}\n)\n\nconst (\n\terrInvalidRequestURI           = \"invalid_request_uri\"\n\terrInvalidRequestObject        = \"invalid_request_object\"\n\terrConsentRequired             = \"consent_required\"\n\terrInteractionRequired         = \"interaction_required\"\n\terrLoginRequired               = \"login_required\"\n\terrRequestUnauthorizedName     = \"request_unauthorized\"\n\terrRequestForbidden            = \"request_forbidden\"\n\terrInvalidRequestName          = \"invalid_request\"\n\terrUnauthorizedClientName      = \"unauthorized_client\"\n\terrAccessDeniedName            = \"access_denied\"\n\terrUnsupportedResponseTypeName = \"unsupported_response_type\"\n\terrUnsupportedResponseModeName = \"unsupported_response_mode\"\n\terrInvalidScopeName            = \"invalid_scope\"\n\terrServerErrorName             = \"server_error\"\n\terrTemporarilyUnavailableName  = \"temporarily_unavailable\"\n\terrUnsupportedGrantTypeName    = \"unsupported_grant_type\"\n\terrInvalidGrantName            = \"invalid_grant\"\n\terrInvalidClientName           = \"invalid_client\"\n\terrNotFoundName                = \"not_found\"\n\terrInvalidStateName            = \"invalid_state\"\n\terrMisconfigurationName        = \"misconfiguration\"\n\terrInsufficientEntropyName     = \"insufficient_entropy\"\n\terrInvalidTokenFormatName      = \"invalid_token\"\n\terrTokenSignatureMismatchName  = \"token_signature_mismatch\"\n\terrTokenExpiredName            = \"invalid_token\" // https://tools.ietf.org/html/rfc6750#section-3.1\n\terrScopeNotGrantedName         = \"scope_not_granted\"\n\terrTokenClaimName              = \"token_claim\"\n\terrTokenInactiveName           = \"token_inactive\"\n\t// errAuthorizationCodeInactiveName = \"authorization_code_inactive\"\n\terrUnknownErrorName             = \"error\"\n\terrRequestNotSupportedName      = \"request_not_supported\"\n\terrRequestURINotSupportedName   = \"request_uri_not_supported\"\n\terrRegistrationNotSupportedName = \"registration_not_supported\"\n\terrJTIKnownName                 = \"jti_known\"\n)\n\ntype (\n\tRFC6749Error struct {\n\t\tErrorField       string\n\t\tDescriptionField string\n\t\tHintField        string\n\t\tCodeField        int\n\t\tDebugField       string\n\t\tcause            error\n\t\tuseLegacyFormat  bool\n\t\texposeDebug      bool\n\n\t\t// Fields for globalization\n\t\thintIDField string\n\t\thintArgs    []interface{}\n\t\tcatalog     i18n.MessageCatalog\n\t\tlang        language.Tag\n\t}\n\tstackTracer interface {\n\t\tStackTrace() errors.StackTrace\n\t}\n)\n\nvar (\n\t_ errorsx.DebugCarrier      = new(RFC6749Error)\n\t_ errorsx.ReasonCarrier     = new(RFC6749Error)\n\t_ errorsx.RequestIDCarrier  = new(RFC6749Error)\n\t_ errorsx.StatusCarrier     = new(RFC6749Error)\n\t_ errorsx.StatusCodeCarrier = new(RFC6749Error)\n\t// _ errorsx.DetailsCarrier = new(RFC6749Error)\n)\n\nfunc ErrorToRFC6749Error(err error) *RFC6749Error {\n\tvar e *RFC6749Error\n\tif errors.As(err, &e) {\n\t\treturn e\n\t}\n\treturn &RFC6749Error{\n\t\tErrorField:       errUnknownErrorName,\n\t\tDescriptionField: \"The error is unrecognizable\",\n\t\tDebugField:       err.Error(),\n\t\tCodeField:        http.StatusInternalServerError,\n\t\tcause:            err,\n\t}\n}\n\n// StackTrace returns the error's stack trace.\nfunc (e *RFC6749Error) StackTrace() (trace errors.StackTrace) {\n\tif e.cause == e || e.cause == nil {\n\t\treturn\n\t}\n\n\tif st := stackTracer(nil); stderr.As(e.cause, &st) {\n\t\ttrace = st.StackTrace()\n\t}\n\n\treturn\n}\n\nfunc (e RFC6749Error) Unwrap() error {\n\treturn e.cause\n}\n\nfunc (e *RFC6749Error) Wrap(err error) {\n\te.cause = err\n}\n\nfunc (e RFC6749Error) WithWrap(cause error) *RFC6749Error {\n\te.cause = cause\n\treturn &e\n}\n\nfunc (e RFC6749Error) WithLegacyFormat(useLegacyFormat bool) *RFC6749Error {\n\te.useLegacyFormat = useLegacyFormat\n\treturn &e\n}\n\nfunc (e *RFC6749Error) WithTrace(err error) *RFC6749Error {\n\tif st := stackTracer(nil); !stderr.As(e.cause, &st) {\n\t\te.Wrap(errorsx.WithStack(err))\n\t} else {\n\t\te.Wrap(err)\n\t}\n\treturn e\n}\n\nfunc (e RFC6749Error) Is(err error) bool {\n\tswitch te := err.(type) {\n\tcase RFC6749Error:\n\t\treturn e.ErrorField == te.ErrorField &&\n\t\t\te.CodeField == te.CodeField\n\tcase *RFC6749Error:\n\t\treturn e.ErrorField == te.ErrorField &&\n\t\t\te.CodeField == te.CodeField\n\t}\n\treturn false\n}\n\nfunc (e *RFC6749Error) Status() string {\n\treturn http.StatusText(e.CodeField)\n}\n\nfunc (e RFC6749Error) Error() string {\n\treturn e.ErrorField\n}\n\nfunc (e *RFC6749Error) RequestID() string {\n\treturn \"\"\n}\n\nfunc (e *RFC6749Error) Reason() string {\n\treturn e.HintField\n}\n\nfunc (e *RFC6749Error) StatusCode() int {\n\treturn e.CodeField\n}\n\nfunc (e *RFC6749Error) Cause() error {\n\treturn e.cause\n}\n\nfunc (e *RFC6749Error) WithHintf(hint string, args ...interface{}) *RFC6749Error {\n\terr := *e\n\tif err.hintIDField == \"\" {\n\t\terr.hintIDField = hint\n\t}\n\n\terr.hintArgs = args\n\terr.HintField = fmt.Sprintf(hint, args...)\n\treturn &err\n}\n\nfunc (e *RFC6749Error) WithHint(hint string) *RFC6749Error {\n\terr := *e\n\tif err.hintIDField == \"\" {\n\t\terr.hintIDField = hint\n\t}\n\n\terr.HintField = hint\n\treturn &err\n}\n\n// WithHintIDOrDefaultf accepts the ID of the hint message\nfunc (e *RFC6749Error) WithHintIDOrDefaultf(ID string, def string, args ...interface{}) *RFC6749Error {\n\terr := *e\n\terr.hintIDField = ID\n\terr.hintArgs = args\n\terr.HintField = fmt.Sprintf(def, args...)\n\treturn &err\n}\n\n// WithHintTranslationID accepts the ID of the hint message and should be paired with\n// WithHint and WithHintf to add a default message and vaargs.\nfunc (e *RFC6749Error) WithHintTranslationID(ID string) *RFC6749Error {\n\terr := *e\n\terr.hintIDField = ID\n\treturn &err\n}\n\nfunc (e *RFC6749Error) Debug() string {\n\treturn e.DebugField\n}\n\nfunc (e *RFC6749Error) WithDebug(debug string) *RFC6749Error {\n\terr := *e\n\terr.DebugField = debug\n\treturn &err\n}\n\nfunc (e *RFC6749Error) WithDebugf(debug string, args ...interface{}) *RFC6749Error {\n\treturn e.WithDebug(fmt.Sprintf(debug, args...))\n}\n\nfunc (e *RFC6749Error) WithDescription(description string) *RFC6749Error {\n\terr := *e\n\terr.DescriptionField = description\n\treturn &err\n}\n\nfunc (e *RFC6749Error) WithLocalizer(catalog i18n.MessageCatalog, lang language.Tag) *RFC6749Error {\n\terr := *e\n\terr.catalog = catalog\n\terr.lang = lang\n\treturn &err\n}\n\n// Sanitize strips the debug field\n//\n// Deprecated: Use WithExposeDebug instead.\nfunc (e *RFC6749Error) Sanitize() *RFC6749Error {\n\terr := *e\n\terr.DebugField = \"\"\n\treturn &err\n}\n\n// WithExposeDebug if set to true exposes debug messages\nfunc (e *RFC6749Error) WithExposeDebug(exposeDebug bool) *RFC6749Error {\n\terr := *e\n\terr.exposeDebug = exposeDebug\n\treturn &err\n}\n\n// GetDescription returns a more description description, combined with hint and debug (when available).\nfunc (e *RFC6749Error) GetDescription() string {\n\tdescription := i18n.GetMessageOrDefault(e.catalog, e.ErrorField, e.lang, e.DescriptionField)\n\te.computeHintField()\n\tif e.HintField != \"\" {\n\t\tdescription += \" \" + e.HintField\n\t}\n\tif e.DebugField != \"\" && e.exposeDebug {\n\t\tdescription += \" \" + e.DebugField\n\t}\n\treturn strings.ReplaceAll(description, \"\\\"\", \"'\")\n}\n\n// RFC6749ErrorJson is a helper struct for JSON encoding/decoding of RFC6749Error.\ntype RFC6749ErrorJson struct {\n\tName        string `json:\"error\"`\n\tDescription string `json:\"error_description\"`\n\tHint        string `json:\"error_hint,omitempty\"`\n\tCode        int    `json:\"status_code,omitempty\"`\n\tDebug       string `json:\"error_debug,omitempty\"`\n}\n\nfunc (e *RFC6749Error) UnmarshalJSON(b []byte) error {\n\tvar data RFC6749ErrorJson\n\n\tif err := json.Unmarshal(b, &data); err != nil {\n\t\treturn err\n\t}\n\n\te.ErrorField = data.Name\n\te.CodeField = data.Code\n\te.DescriptionField = data.Description\n\n\tif len(data.Hint+data.Debug) > 0 {\n\t\te.HintField = data.Hint\n\t\te.DebugField = data.Debug\n\t\te.useLegacyFormat = true\n\t}\n\n\treturn nil\n}\n\nfunc (e RFC6749Error) MarshalJSON() ([]byte, error) {\n\tif !e.useLegacyFormat {\n\t\treturn json.Marshal(&RFC6749ErrorJson{\n\t\t\tName:        e.ErrorField,\n\t\t\tDescription: e.GetDescription(),\n\t\t})\n\t}\n\n\tvar debug string\n\tif e.exposeDebug {\n\t\tdebug = e.DebugField\n\t}\n\n\treturn json.Marshal(&RFC6749ErrorJson{\n\t\tName:        e.ErrorField,\n\t\tDescription: e.DescriptionField,\n\t\tHint:        e.HintField,\n\t\tCode:        e.CodeField,\n\t\tDebug:       debug,\n\t})\n}\n\nfunc (e *RFC6749Error) ToValues() url.Values {\n\tvalues := url.Values{}\n\tvalues.Set(\"error\", e.ErrorField)\n\tvalues.Set(\"error_description\", e.GetDescription())\n\n\tif e.useLegacyFormat {\n\t\tvalues.Set(\"error_description\", e.DescriptionField)\n\t\tif e.HintField != \"\" {\n\t\t\tvalues.Set(\"error_hint\", e.HintField)\n\t\t}\n\n\t\tif e.DebugField != \"\" && e.exposeDebug {\n\t\t\tvalues.Set(\"error_debug\", e.DebugField)\n\t\t}\n\t}\n\n\treturn values\n}\n\nfunc (e *RFC6749Error) computeHintField() {\n\tif e.hintIDField == \"\" {\n\t\treturn\n\t}\n\n\te.HintField = i18n.GetMessageOrDefault(e.catalog, e.hintIDField, e.lang, e.HintField, e.hintArgs...)\n}\n"
        },
        {
          "name": "errors_test.go",
          "type": "blob",
          "size": 3.171875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"testing\"\n\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"golang.org/x/text/language\"\n\n\t\"github.com/ory/fosite/i18n\"\n)\n\nfunc TestRFC6749Error(t *testing.T) {\n\tt.Run(\"case=wrap\", func(t *testing.T) {\n\t\torig := errors.New(\"hi\")\n\t\twrap := new(RFC6749Error)\n\t\twrap.Wrap(orig)\n\n\t\tassert.EqualValues(t, orig.(stackTracer).StackTrace(), wrap.StackTrace())\n\t})\n\n\tt.Run(\"case=wrap_self\", func(t *testing.T) {\n\t\twrap := new(RFC6749Error)\n\t\twrap.Wrap(wrap)\n\n\t\tassert.Empty(t, wrap.StackTrace())\n\t})\n}\n\nfunc TestErrorI18N(t *testing.T) {\n\tcatalog := i18n.NewDefaultMessageCatalog([]*i18n.DefaultLocaleBundle{\n\t\t{\n\t\t\tLangTag: \"en\",\n\t\t\tMessages: []*i18n.DefaultMessage{\n\t\t\t\t{\n\t\t\t\t\tID:               \"access_denied\",\n\t\t\t\t\tFormattedMessage: \"The resource owner or authorization server denied the request.\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tID:               \"badRequestMethod\",\n\t\t\t\t\tFormattedMessage: \"HTTP method is '%s', expected 'POST'.\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tLangTag: \"es\",\n\t\t\tMessages: []*i18n.DefaultMessage{\n\t\t\t\t{\n\t\t\t\t\tID:               \"access_denied\",\n\t\t\t\t\tFormattedMessage: \"El propietario del recurso o el servidor de autorización denegó la solicitud.\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tID:               \"HTTP method is '%s', expected 'POST'.\",\n\t\t\t\t\tFormattedMessage: \"El método HTTP es '%s', esperado 'POST'.\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tID:               \"Unable to parse HTTP body, make sure to send a properly formatted form request body.\",\n\t\t\t\t\tFormattedMessage: \"No se puede analizar el cuerpo HTTP, asegúrese de enviar un cuerpo de solicitud de formulario con el formato adecuado.\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tID:               \"badRequestMethod\",\n\t\t\t\t\tFormattedMessage: \"El método HTTP es '%s', esperado 'POST'.\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\tt.Run(\"case=legacy\", func(t *testing.T) {\n\t\terr := ErrAccessDenied.WithLocalizer(catalog, language.Spanish).WithHintf(\"HTTP method is '%s', expected 'POST'.\", \"GET\")\n\t\tassert.EqualValues(t, \"El propietario del recurso o el servidor de autorización denegó la solicitud. El método HTTP es 'GET', esperado 'POST'.\", err.GetDescription())\n\t})\n\n\tt.Run(\"case=unsupported_locale_legacy\", func(t *testing.T) {\n\t\terr := ErrAccessDenied.WithLocalizer(catalog, language.Afrikaans).WithHintf(\"HTTP method is '%s', expected 'POST'.\", \"GET\")\n\t\tassert.EqualValues(t, \"The resource owner or authorization server denied the request. HTTP method is 'GET', expected 'POST'.\", err.GetDescription())\n\t})\n\n\tt.Run(\"case=simple\", func(t *testing.T) {\n\t\terr := ErrAccessDenied.WithLocalizer(catalog, language.Spanish).WithHintIDOrDefaultf(\"badRequestMethod\", \"HTTP method is '%s', expected 'POST'.\", \"GET\")\n\t\tassert.EqualValues(t, \"El propietario del recurso o el servidor de autorización denegó la solicitud. El método HTTP es 'GET', esperado 'POST'.\", err.GetDescription())\n\t})\n\n\tt.Run(\"case=unsupported_locale\", func(t *testing.T) {\n\t\terr := ErrAccessDenied.WithLocalizer(catalog, language.Afrikaans).WithHintIDOrDefaultf(\"badRequestMethod\", \"HTTP method is '%s', expected 'POST'.\", \"GET\")\n\t\tassert.EqualValues(t, \"The resource owner or authorization server denied the request. HTTP method is 'GET', expected 'POST'.\", err.GetDescription())\n\t})\n}\n"
        },
        {
          "name": "fosite.go",
          "type": "blob",
          "size": 4.2919921875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"reflect\"\n)\n\nconst MinParameterEntropy = 8\n\nvar defaultResponseModeHandler = &DefaultResponseModeHandler{}\n\n// AuthorizeEndpointHandlers is a list of AuthorizeEndpointHandler\ntype AuthorizeEndpointHandlers []AuthorizeEndpointHandler\n\n// Append adds an AuthorizeEndpointHandler to this list. Ignores duplicates based on reflect.TypeOf.\nfunc (a *AuthorizeEndpointHandlers) Append(h AuthorizeEndpointHandler) {\n\tfor _, this := range *a {\n\t\tif reflect.TypeOf(this) == reflect.TypeOf(h) {\n\t\t\treturn\n\t\t}\n\t}\n\n\t*a = append(*a, h)\n}\n\n// TokenEndpointHandlers is a list of TokenEndpointHandler\ntype TokenEndpointHandlers []TokenEndpointHandler\n\n// Append adds an TokenEndpointHandler to this list. Ignores duplicates based on reflect.TypeOf.\nfunc (t *TokenEndpointHandlers) Append(h TokenEndpointHandler) {\n\tfor _, this := range *t {\n\t\tif reflect.TypeOf(this) == reflect.TypeOf(h) {\n\t\t\treturn\n\t\t}\n\t}\n\n\t*t = append(*t, h)\n}\n\n// TokenIntrospectionHandlers is a list of TokenValidator\ntype TokenIntrospectionHandlers []TokenIntrospector\n\n// Append adds an AccessTokenValidator to this list. Ignores duplicates based on reflect.TypeOf.\nfunc (t *TokenIntrospectionHandlers) Append(h TokenIntrospector) {\n\tfor _, this := range *t {\n\t\tif reflect.TypeOf(this) == reflect.TypeOf(h) {\n\t\t\treturn\n\t\t}\n\t}\n\n\t*t = append(*t, h)\n}\n\n// RevocationHandlers is a list of RevocationHandler\ntype RevocationHandlers []RevocationHandler\n\n// Append adds an RevocationHandler to this list. Ignores duplicates based on reflect.TypeOf.\nfunc (t *RevocationHandlers) Append(h RevocationHandler) {\n\tfor _, this := range *t {\n\t\tif reflect.TypeOf(this) == reflect.TypeOf(h) {\n\t\t\treturn\n\t\t}\n\t}\n\n\t*t = append(*t, h)\n}\n\n// PushedAuthorizeEndpointHandlers is a list of PushedAuthorizeEndpointHandler\ntype PushedAuthorizeEndpointHandlers []PushedAuthorizeEndpointHandler\n\n// Append adds an AuthorizeEndpointHandler to this list. Ignores duplicates based on reflect.TypeOf.\nfunc (a *PushedAuthorizeEndpointHandlers) Append(h PushedAuthorizeEndpointHandler) {\n\tfor _, this := range *a {\n\t\tif reflect.TypeOf(this) == reflect.TypeOf(h) {\n\t\t\treturn\n\t\t}\n\t}\n\n\t*a = append(*a, h)\n}\n\nvar _ OAuth2Provider = (*Fosite)(nil)\n\ntype Configurator interface {\n\tIDTokenIssuerProvider\n\tIDTokenLifespanProvider\n\tAllowedPromptsProvider\n\tEnforcePKCEProvider\n\tEnforcePKCEForPublicClientsProvider\n\tEnablePKCEPlainChallengeMethodProvider\n\tGrantTypeJWTBearerCanSkipClientAuthProvider\n\tGrantTypeJWTBearerIDOptionalProvider\n\tGrantTypeJWTBearerIssuedDateOptionalProvider\n\tGetJWTMaxDurationProvider\n\tAudienceStrategyProvider\n\tScopeStrategyProvider\n\tRedirectSecureCheckerProvider\n\tOmitRedirectScopeParamProvider\n\tSanitationAllowedProvider\n\tJWTScopeFieldProvider\n\tAccessTokenIssuerProvider\n\tDisableRefreshTokenValidationProvider\n\tRefreshTokenScopesProvider\n\tAccessTokenLifespanProvider\n\tRefreshTokenLifespanProvider\n\tVerifiableCredentialsNonceLifespanProvider\n\tAuthorizeCodeLifespanProvider\n\tTokenEntropyProvider\n\tRotatedGlobalSecretsProvider\n\tGlobalSecretProvider\n\tJWKSFetcherStrategyProvider\n\tHTTPClientProvider\n\tScopeStrategyProvider\n\tAudienceStrategyProvider\n\tMinParameterEntropyProvider\n\tHMACHashingProvider\n\tClientAuthenticationStrategyProvider\n\tResponseModeHandlerExtensionProvider\n\tSendDebugMessagesToClientsProvider\n\tJWKSFetcherStrategyProvider\n\tClientAuthenticationStrategyProvider\n\tResponseModeHandlerExtensionProvider\n\tMessageCatalogProvider\n\tFormPostHTMLTemplateProvider\n\tTokenURLProvider\n\tGetSecretsHashingProvider\n\tAuthorizeEndpointHandlersProvider\n\tTokenEndpointHandlersProvider\n\tTokenIntrospectionHandlersProvider\n\tRevocationHandlersProvider\n\tUseLegacyErrorFormatProvider\n}\n\nfunc NewOAuth2Provider(s Storage, c Configurator) *Fosite {\n\treturn &Fosite{Store: s, Config: c}\n}\n\n// Fosite implements OAuth2Provider.\ntype Fosite struct {\n\tStore Storage\n\n\tConfig Configurator\n}\n\n// GetMinParameterEntropy returns MinParameterEntropy if set. Defaults to fosite.MinParameterEntropy.\nfunc (f *Fosite) GetMinParameterEntropy(ctx context.Context) int {\n\tif mp := f.Config.GetMinParameterEntropy(ctx); mp > 0 {\n\t\treturn mp\n\t}\n\n\treturn MinParameterEntropy\n}\n\nfunc (f *Fosite) ResponseModeHandler(ctx context.Context) ResponseModeHandler {\n\tif ext := f.Config.GetResponseModeHandlerExtension(ctx); ext != nil {\n\t\treturn ext\n\t}\n\treturn defaultResponseModeHandler\n}\n"
        },
        {
          "name": "fosite.png",
          "type": "blob",
          "size": 42.701171875,
          "content": null
        },
        {
          "name": "fosite_test.go",
          "type": "blob",
          "size": 1.693359375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t. \"github.com/ory/fosite\"\n\t\"github.com/ory/fosite/handler/oauth2\"\n\t\"github.com/ory/fosite/handler/par\"\n)\n\nfunc TestAuthorizeEndpointHandlers(t *testing.T) {\n\th := &oauth2.AuthorizeExplicitGrantHandler{}\n\ths := AuthorizeEndpointHandlers{}\n\ths.Append(h)\n\ths.Append(h)\n\ths.Append(&oauth2.AuthorizeExplicitGrantHandler{})\n\tassert.Len(t, hs, 1)\n\tassert.Equal(t, hs[0], h)\n}\n\nfunc TestTokenEndpointHandlers(t *testing.T) {\n\th := &oauth2.AuthorizeExplicitGrantHandler{}\n\ths := TokenEndpointHandlers{}\n\ths.Append(h)\n\ths.Append(h)\n\t// do some crazy type things and make sure dupe detection works\n\tvar f interface{} = &oauth2.AuthorizeExplicitGrantHandler{}\n\ths.Append(&oauth2.AuthorizeExplicitGrantHandler{})\n\ths.Append(f.(TokenEndpointHandler))\n\trequire.Len(t, hs, 1)\n\tassert.Equal(t, hs[0], h)\n}\n\nfunc TestAuthorizedRequestValidators(t *testing.T) {\n\th := &oauth2.CoreValidator{}\n\ths := TokenIntrospectionHandlers{}\n\ths.Append(h)\n\ths.Append(h)\n\ths.Append(&oauth2.CoreValidator{})\n\trequire.Len(t, hs, 1)\n\tassert.Equal(t, hs[0], h)\n}\n\nfunc TestPushedAuthorizedRequestHandlers(t *testing.T) {\n\th := &par.PushedAuthorizeHandler{}\n\ths := PushedAuthorizeEndpointHandlers{}\n\ths.Append(h)\n\ths.Append(h)\n\trequire.Len(t, hs, 1)\n\tassert.Equal(t, hs[0], h)\n}\n\nfunc TestMinParameterEntropy(t *testing.T) {\n\tf := Fosite{Config: new(Config)}\n\tassert.Equal(t, MinParameterEntropy, f.GetMinParameterEntropy(context.Background()))\n\n\tf = Fosite{Config: &Config{MinParameterEntropy: 42}}\n\tassert.Equal(t, 42, f.GetMinParameterEntropy(context.Background()))\n}\n"
        },
        {
          "name": "generate-mocks.sh",
          "type": "blob",
          "size": 3.259765625,
          "content": "#!/bin/bash\n\nmockgen -package internal -destination internal/hash.go github.com/ory/fosite Hasher\nmockgen -package internal -destination internal/storage.go github.com/ory/fosite Storage\nmockgen -package internal -destination internal/transactional.go github.com/ory/fosite/storage Transactional\nmockgen -package internal -destination internal/oauth2_storage.go github.com/ory/fosite/handler/oauth2 CoreStorage\nmockgen -package internal -destination internal/oauth2_strategy.go github.com/ory/fosite/handler/oauth2 CoreStrategy\nmockgen -package internal -destination internal/authorize_code_storage.go github.com/ory/fosite/handler/oauth2 AuthorizeCodeStorage\nmockgen -package internal -destination internal/oauth2_auth_jwt_storage.go github.com/ory/fosite/handler/rfc7523 RFC7523KeyStorage\nmockgen -package internal -destination internal/access_token_storage.go github.com/ory/fosite/handler/oauth2 AccessTokenStorage\nmockgen -package internal -destination internal/refresh_token_strategy.go github.com/ory/fosite/handler/oauth2 RefreshTokenStorage\nmockgen -package internal -destination internal/oauth2_client_storage.go github.com/ory/fosite/handler/oauth2 ClientCredentialsGrantStorage\nmockgen -package internal -destination internal/oauth2_owner_storage.go github.com/ory/fosite/handler/oauth2 ResourceOwnerPasswordCredentialsGrantStorage\nmockgen -package internal -destination internal/oauth2_revoke_storage.go github.com/ory/fosite/handler/oauth2 TokenRevocationStorage\nmockgen -package internal -destination internal/openid_id_token_storage.go github.com/ory/fosite/handler/openid OpenIDConnectRequestStorage\nmockgen -package internal -destination internal/access_token_strategy.go github.com/ory/fosite/handler/oauth2 AccessTokenStrategy\nmockgen -package internal -destination internal/refresh_token_strategy.go github.com/ory/fosite/handler/oauth2 RefreshTokenStrategy\nmockgen -package internal -destination internal/authorize_code_strategy.go github.com/ory/fosite/handler/oauth2 AuthorizeCodeStrategy\nmockgen -package internal -destination internal/id_token_strategy.go github.com/ory/fosite/handler/openid OpenIDConnectTokenStrategy\nmockgen -package internal -destination internal/pkce_storage_strategy.go github.com/ory/fosite/handler/pkce PKCERequestStorage\nmockgen -package internal -destination internal/authorize_handler.go github.com/ory/fosite AuthorizeEndpointHandler\nmockgen -package internal -destination internal/revoke_handler.go github.com/ory/fosite RevocationHandler\nmockgen -package internal -destination internal/token_handler.go github.com/ory/fosite TokenEndpointHandler\nmockgen -package internal -destination internal/introspector.go github.com/ory/fosite TokenIntrospector\nmockgen -package internal -destination internal/client.go github.com/ory/fosite Client\nmockgen -package internal -destination internal/request.go github.com/ory/fosite Requester\nmockgen -package internal -destination internal/access_request.go github.com/ory/fosite AccessRequester\nmockgen -package internal -destination internal/access_response.go github.com/ory/fosite AccessResponder\nmockgen -package internal -destination internal/authorize_request.go github.com/ory/fosite AuthorizeRequester\nmockgen -package internal -destination internal/authorize_response.go github.com/ory/fosite AuthorizeResponder\n\ngoimports -w internal/"
        },
        {
          "name": "generate.go",
          "type": "blob",
          "size": 4.51171875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/hash.go github.com/ory/fosite Hasher\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/storage.go github.com/ory/fosite Storage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/transactional.go github.com/ory/fosite/storage Transactional\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/oauth2_storage.go github.com/ory/fosite/handler/oauth2 CoreStorage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/oauth2_strategy.go github.com/ory/fosite/handler/oauth2 CoreStrategy\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/authorize_code_storage.go github.com/ory/fosite/handler/oauth2 AuthorizeCodeStorage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/oauth2_auth_jwt_storage.go github.com/ory/fosite/handler/rfc7523 RFC7523KeyStorage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/access_token_storage.go github.com/ory/fosite/handler/oauth2 AccessTokenStorage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/refresh_token_strategy.go github.com/ory/fosite/handler/oauth2 RefreshTokenStorage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/oauth2_client_storage.go github.com/ory/fosite/handler/oauth2 ClientCredentialsGrantStorage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/oauth2_owner_storage.go github.com/ory/fosite/handler/oauth2 ResourceOwnerPasswordCredentialsGrantStorage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/oauth2_revoke_storage.go github.com/ory/fosite/handler/oauth2 TokenRevocationStorage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/openid_id_token_storage.go github.com/ory/fosite/handler/openid OpenIDConnectRequestStorage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/access_token_strategy.go github.com/ory/fosite/handler/oauth2 AccessTokenStrategy\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/refresh_token_strategy.go github.com/ory/fosite/handler/oauth2 RefreshTokenStrategy\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/authorize_code_strategy.go github.com/ory/fosite/handler/oauth2 AuthorizeCodeStrategy\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/id_token_strategy.go github.com/ory/fosite/handler/openid OpenIDConnectTokenStrategy\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/pkce_storage_strategy.go github.com/ory/fosite/handler/pkce PKCERequestStorage\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/authorize_handler.go github.com/ory/fosite AuthorizeEndpointHandler\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/revoke_handler.go github.com/ory/fosite RevocationHandler\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/token_handler.go github.com/ory/fosite TokenEndpointHandler\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/introspector.go github.com/ory/fosite TokenIntrospector\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/client.go github.com/ory/fosite Client\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/request.go github.com/ory/fosite Requester\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/access_request.go github.com/ory/fosite AccessRequester\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/access_response.go github.com/ory/fosite AccessResponder\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/authorize_request.go github.com/ory/fosite AuthorizeRequester\n//go:generate go run github.com/golang/mock/mockgen -package internal -destination internal/authorize_response.go github.com/ory/fosite AuthorizeResponder\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 3.9228515625,
          "content": "module github.com/ory/fosite\n\nrequire (\n\tgithub.com/asaskevich/govalidator v0.0.0-20230301143203-a9d515a09cc2\n\tgithub.com/cristalhq/jwt/v4 v4.0.2\n\tgithub.com/dgraph-io/ristretto v1.0.0\n\tgithub.com/go-jose/go-jose/v3 v3.0.3\n\tgithub.com/golang/mock v1.6.0\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/gorilla/mux v1.8.0\n\tgithub.com/gorilla/websocket v1.5.0\n\tgithub.com/hashicorp/go-retryablehttp v0.7.7\n\tgithub.com/magiconair/properties v1.8.7\n\tgithub.com/mattn/goveralls v0.0.12\n\tgithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826\n\tgithub.com/oleiade/reflections v1.0.1\n\tgithub.com/ory/go-acc v0.2.9-0.20230103102148-6b1c9a70dbbe\n\tgithub.com/ory/go-convenience v0.1.0\n\tgithub.com/ory/x v0.0.677\n\tgithub.com/parnurzeal/gorequest v0.2.15\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/stretchr/testify v1.9.0\n\tgithub.com/tidwall/gjson v1.14.3\n\tgo.opentelemetry.io/otel/trace v1.32.0\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/net v0.30.0\n\tgolang.org/x/oauth2 v0.23.0\n\tgolang.org/x/text v0.21.0\n)\n\nrequire (\n\tgithub.com/cenkalti/backoff/v4 v4.3.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/elazarl/goproxy v0.0.0-20221015165544-a0805db90819 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/fsnotify/fsnotify v1.6.0 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/gobuffalo/pop/v6 v6.1.1 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2 v2.23.0 // indirect\n\tgithub.com/hashicorp/go-cleanhttp v0.5.2 // indirect\n\tgithub.com/hashicorp/hcl v1.0.0 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/moul/http2curl v0.0.0-20170919181001-9ac6cf4d929b // indirect\n\tgithub.com/openzipkin/zipkin-go v0.4.3 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.0.9 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/seatgeek/logrus-gelf-formatter v0.0.0-20210414080842-5b05eb8ff761 // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/smartystreets/goconvey v1.6.4 // indirect\n\tgithub.com/spf13/afero v1.9.5 // indirect\n\tgithub.com/spf13/cast v1.5.1 // indirect\n\tgithub.com/spf13/cobra v1.7.0 // indirect\n\tgithub.com/spf13/jwalterweatherman v1.1.0 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/spf13/viper v1.16.0 // indirect\n\tgithub.com/subosito/gotenv v1.4.2 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.1 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace v0.57.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.57.0 // indirect\n\tgo.opentelemetry.io/contrib/propagators/b3 v1.32.0 // indirect\n\tgo.opentelemetry.io/contrib/propagators/jaeger v1.32.0 // indirect\n\tgo.opentelemetry.io/contrib/samplers/jaegerremote v0.26.0 // indirect\n\tgo.opentelemetry.io/otel v1.32.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/jaeger v1.17.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.32.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.32.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/zipkin v1.32.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.32.0 // indirect\n\tgo.opentelemetry.io/otel/sdk v1.32.0 // indirect\n\tgo.opentelemetry.io/proto/otlp v1.3.1 // indirect\n\tgolang.org/x/mod v0.18.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/tools v0.22.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20241104194629-dd2ea8efbc28 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241104194629-dd2ea8efbc28 // indirect\n\tgoogle.golang.org/grpc v1.67.1 // indirect\n\tgoogle.golang.org/protobuf v1.35.1 // indirect\n\tgopkg.in/ini.v1 v1.67.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n\ngo 1.22\n\ntoolchain go1.23.1\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 82.1064453125,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=\ncloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=\ncloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.44.3/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.45.1/go.mod h1:RpBamKRgapWJb87xiFSdk4g1CME7QZg3uwTez+TSTjc=\ncloud.google.com/go v0.46.3/go.mod h1:a6bKKbmY7er1mI7TEI4lsAkts/mkhTSZK8w33B4RAg0=\ncloud.google.com/go v0.50.0/go.mod h1:r9sluTvynVuxRIOHXQEHMFffphuXHOMZMycpNR5e6To=\ncloud.google.com/go v0.52.0/go.mod h1:pXajvRH/6o3+F9jDHZWQ5PbGhn+o8w9qiu/CffaVdO4=\ncloud.google.com/go v0.53.0/go.mod h1:fp/UouUEsRkN6ryDKNW/Upv/JBKnv6WDthjR6+vze6M=\ncloud.google.com/go v0.54.0/go.mod h1:1rq2OEkV3YMf6n/9ZvGWI3GWw0VoqH/1x2nd8Is/bPc=\ncloud.google.com/go v0.56.0/go.mod h1:jr7tqZxxKOVYizybht9+26Z/gUq7tiRzu+ACVAMbKVk=\ncloud.google.com/go v0.57.0/go.mod h1:oXiQ6Rzq3RAkkY7N6t3TcE6jE+CIBBbA36lwQ1JyzZs=\ncloud.google.com/go v0.62.0/go.mod h1:jmCYTdRCQuc1PHIIJ/maLInMho30T/Y0M4hTdTShOYc=\ncloud.google.com/go v0.65.0/go.mod h1:O5N8zS7uWy9vkA9vayVHs65eM1ubvY4h553ofrNHObY=\ncloud.google.com/go v0.72.0/go.mod h1:M+5Vjvlc2wnp6tjzE102Dw08nGShTscUx2nZMufOKPI=\ncloud.google.com/go v0.74.0/go.mod h1:VV1xSbzvo+9QJOxLDaJfTjx5e+MePCpCWwvftOeQmWk=\ncloud.google.com/go v0.75.0/go.mod h1:VGuuCn7PG0dwsd5XPVm2Mm3wlh3EL55/79EKB6hlPTY=\ncloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=\ncloud.google.com/go/bigquery v1.3.0/go.mod h1:PjpwJnslEMmckchkHFfq+HTD2DmtT67aNFKH1/VBDHE=\ncloud.google.com/go/bigquery v1.4.0/go.mod h1:S8dzgnTigyfTmLBfrtrhyYhwRxG72rYxvftPBK2Dvzc=\ncloud.google.com/go/bigquery v1.5.0/go.mod h1:snEHRnqQbz117VIFhE8bmtwIDY80NLUZUMb4Nv6dBIg=\ncloud.google.com/go/bigquery v1.7.0/go.mod h1://okPTzCYNXSlb24MZs83e2Do+h+VXtc4gLoIoXIAPc=\ncloud.google.com/go/bigquery v1.8.0/go.mod h1:J5hqkt3O0uAFnINi6JXValWIb1v0goeZM77hZzJN/fQ=\ncloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=\ncloud.google.com/go/datastore v1.1.0/go.mod h1:umbIZjpQpHh4hmRpGhH4tLFup+FVzqBi1b3c64qFpCk=\ncloud.google.com/go/pubsub v1.0.1/go.mod h1:R0Gpsv3s54REJCy4fxDixWD93lHJMoZTyQ2kNxGRt3I=\ncloud.google.com/go/pubsub v1.1.0/go.mod h1:EwwdRX2sKPjnvnqCa270oGRyludottCI76h+R3AArQw=\ncloud.google.com/go/pubsub v1.2.0/go.mod h1:jhfEVHT8odbXTkndysNHCcx0awwzvfOlguIAii9o8iA=\ncloud.google.com/go/pubsub v1.3.1/go.mod h1:i+ucay31+CNRpDW4Lu78I4xXG+O1r/MAHgjpRVR+TSU=\ncloud.google.com/go/storage v1.0.0/go.mod h1:IhtSnM/ZTZV8YYJWCY8RULGVqBDmpoyjwiyrjsg+URw=\ncloud.google.com/go/storage v1.5.0/go.mod h1:tpKbwo567HUNpVclU5sGELwQWBDZ8gh0ZeosJ0Rtdos=\ncloud.google.com/go/storage v1.6.0/go.mod h1:N7U0C8pVQ/+NIKOBQyamJIeKQKkZ+mxpohlUTyfDhBk=\ncloud.google.com/go/storage v1.8.0/go.mod h1:Wv1Oy7z6Yz3DshWRJFhqM/UCfaWIRTdp0RXyy7KQOVs=\ncloud.google.com/go/storage v1.10.0/go.mod h1:FLPqc6j+Ki4BU591ie1oL6qBQGu2Bl/tZ9ullr3+Kg0=\ncloud.google.com/go/storage v1.14.0/go.mod h1:GrKmX003DSIwi9o29oFT7YDnHYwZoctc3fOKtUw0Xmo=\ndmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=\ngithub.com/Masterminds/semver/v3 v3.1.1/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=\ngithub.com/asaskevich/govalidator v0.0.0-20230301143203-a9d515a09cc2 h1:DklsrG3dyBCFEj5IhUbnKptjxatkF07cF2ak3yi77so=\ngithub.com/asaskevich/govalidator v0.0.0-20230301143203-a9d515a09cc2/go.mod h1:WaHUgvxTVq04UNunO+XhnAqY/wQc+bxr74GqbsZ/Jqw=\ngithub.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=\ngithub.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=\ngithub.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/cncf/udpa/go v0.0.0-20200629203442-efcf912fb354/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\ngithub.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\ngithub.com/cockroachdb/apd v1.1.0/go.mod h1:8Sl8LxpKi29FqWXR16WEFZRNSz3SoPzUzeMeY4+DwBQ=\ngithub.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd v0.0.0-20190719114852-fd7a80b32e1f/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.7/go.mod h1:lj5s0c3V2DBrqTV7llrYr5NG6My20zk30Fl46Y7DoTY=\ngithub.com/cristalhq/jwt/v4 v4.0.2 h1:g/AD3h0VicDamtlM70GWGElp8kssQEv+5wYd7L9WOhU=\ngithub.com/cristalhq/jwt/v4 v4.0.2/go.mod h1:HnYraSNKDRag1DZP92rYHyrjyQHnVEHPNqesmzs+miQ=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgraph-io/ristretto v1.0.0 h1:SYG07bONKMlFDUYu5pEu3DGAh8c2OFNzKm6G9J4Si84=\ngithub.com/dgraph-io/ristretto v1.0.0/go.mod h1:jTi2FiYEhQ1NsMmA7DeBykizjOuY88NhKBkepyu1jPc=\ngithub.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13 h1:fAjc9m62+UWV/WAFKLNi6ZS0675eEUC9y3AlwSbQu1Y=\ngithub.com/dgryski/go-farm v0.0.0-20200201041132-a6ae2369ad13/go.mod h1:SqUrOPUnsFjfmXRMNPybcSiG0BgUW2AuFH8PAnS2iTw=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/elazarl/goproxy v0.0.0-20221015165544-a0805db90819 h1:RIB4cRk+lBqKK3Oy0r2gRX4ui7tuhiZq2SuTtTCi0/0=\ngithub.com/elazarl/goproxy v0.0.0-20221015165544-a0805db90819/go.mod h1:Ro8st/ElPeALwNFlcTpWmkr6IoMFfkjXAvTHpevnDsM=\ngithub.com/elazarl/goproxy/ext v0.0.0-20190711103511-473e67f1d7d2/go.mod h1:gNh8nYJoAm43RfaxurUnxr+N1PwuFV3ZMl/efxlIlY8=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/go-control-plane v0.9.7/go.mod h1:cwu0lG7PUMfa9snN8LXBig5ynNVH9qI8YYLbd1fK2po=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20201210154907-fd9021fe5dad/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=\ngithub.com/fatih/color v1.16.0 h1:zmkK9Ngbjj+K0yRhTVONQh1p/HknKYSlNT+vZCzyokM=\ngithub.com/fatih/color v1.16.0/go.mod h1:fL2Sau1YI5c0pdGEVCbKQbLXB6edEj1ZgiY4NijnWvE=\ngithub.com/fatih/structs v1.1.0/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/frankban/quicktest v1.14.4 h1:g2rn0vABPOOXmZUj+vbmUp0lPoXEMuhTpIluN0XL9UY=\ngithub.com/frankban/quicktest v1.14.4/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/fsnotify/fsnotify v1.6.0 h1:n+5WquG0fcWoWp6xPWfHdbskMCQaFnG6PfBrh1Ky4HY=\ngithub.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=\ngithub.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-jose/go-jose/v3 v3.0.3 h1:fFKWeig/irsp7XD2zBxvnmA/XaRWp5V3CBsZXJF7G7k=\ngithub.com/go-jose/go-jose/v3 v3.0.3/go.mod h1:5b+7YgP7ZICgJDBdfjZaIt+H/9L9T/YQrVfLAMboGkQ=\ngithub.com/go-kit/log v0.1.0/go.mod h1:zbhenjAZHb184qTLMA9ZjW7ThYL0H2mk7Q6pNt4vbaY=\ngithub.com/go-logfmt/logfmt v0.5.0/go.mod h1:wCYkCAKZfumFQihp8CzCvQ3paCTfi41vtzG1KdI/P7A=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/go-sql-driver/mysql v1.7.0/go.mod h1:OXbVy3sEdcQ2Doequ6Z5BW6fXNQTmx+9S1MCJN5yJMI=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/gobuffalo/attrs v1.0.3/go.mod h1:KvDJCE0avbufqS0Bw3UV7RQynESY0jjod+572ctX4t8=\ngithub.com/gobuffalo/envy v1.10.2/go.mod h1:qGAGwdvDsaEtPhfBzb3o0SfDea8ByGn9j8bKmVft9z8=\ngithub.com/gobuffalo/fizz v1.14.4/go.mod h1:9/2fGNXNeIFOXEEgTPJwiK63e44RjG+Nc4hfMm1ArGM=\ngithub.com/gobuffalo/flect v0.3.0/go.mod h1:5pf3aGnsvqvCj50AVni7mJJF8ICxGZ8HomberC3pXLE=\ngithub.com/gobuffalo/flect v1.0.0/go.mod h1:l9V6xSb4BlXwsxEMj3FVEub2nkdQjWhPvD8XTTlHPQc=\ngithub.com/gobuffalo/genny/v2 v2.1.0/go.mod h1:4yoTNk4bYuP3BMM6uQKYPvtP6WsXFGm2w2EFYZdRls8=\ngithub.com/gobuffalo/github_flavored_markdown v1.1.3/go.mod h1:IzgO5xS6hqkDmUh91BW/+Qxo/qYnvfzoz3A7uLkg77I=\ngithub.com/gobuffalo/helpers v0.6.7/go.mod h1:j0u1iC1VqlCaJEEVkZN8Ia3TEzfj/zoXANqyJExTMTA=\ngithub.com/gobuffalo/logger v1.0.7/go.mod h1:u40u6Bq3VVvaMcy5sRBclD8SXhBYPS0Qk95ubt+1xJM=\ngithub.com/gobuffalo/nulls v0.4.2/go.mod h1:EElw2zmBYafU2R9W4Ii1ByIj177wA/pc0JdjtD0EsH8=\ngithub.com/gobuffalo/packd v1.0.2/go.mod h1:sUc61tDqGMXON80zpKGp92lDb86Km28jfvX7IAyxFT8=\ngithub.com/gobuffalo/plush/v4 v4.1.16/go.mod h1:6t7swVsarJ8qSLw1qyAH/KbrcSTwdun2ASEQkOznakg=\ngithub.com/gobuffalo/plush/v4 v4.1.18/go.mod h1:xi2tJIhFI4UdzIL8sxZtzGYOd2xbBpcFbLZlIPGGZhU=\ngithub.com/gobuffalo/pop/v6 v6.1.1 h1:eUDBaZcb0gYrmFnKwpuTEUA7t5ZHqNfvS4POqJYXDZY=\ngithub.com/gobuffalo/pop/v6 v6.1.1/go.mod h1:1n7jAmI1i7fxuXPZjZb0VBPQDbksRtCoFnrDV5IsvaI=\ngithub.com/gobuffalo/tags/v3 v3.1.4/go.mod h1:ArRNo3ErlHO8BtdA0REaZxijuWnWzF6PUXngmMXd2I0=\ngithub.com/gobuffalo/validate/v3 v3.3.3/go.mod h1:YC7FsbJ/9hW/VjQdmXPvFqvRis4vrRYFxr69WiNZw6g=\ngithub.com/gofrs/uuid v4.0.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/gofrs/uuid v4.2.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/gofrs/uuid v4.3.1+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=\ngithub.com/golang/mock v1.4.0/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.1/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.3/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.4/go.mod h1:l3mdAwkq5BuhzHwde/uurv3sEJeZMXNpwsxVWU71h+4=\ngithub.com/golang/mock v1.6.0 h1:ErTB+efbowRARo13NNdxyJji2egdxLGQhRaY+DUumQc=\ngithub.com/golang/mock v1.6.0/go.mod h1:p6yTPP+5HYm5mzsMV8JkE6ZKdX+/wYM6Hr+LicevLPs=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.4/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.4.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=\ngithub.com/google/martian/v3 v3.0.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=\ngithub.com/google/martian/v3 v3.1.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=\ngithub.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20190515194954-54271f7e092f/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20191218002539-d4f498aebedc/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200212024743-f11f1df84d12/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200229191704-1ebb73c60ed3/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200430221834-fc25d7d30c6d/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200708004538-1a94d8640e99/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20201023163331-3e6fc7fc9c4c/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20201203190320-1bf35d6f28c2/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20201218002935-b9804c9f04c2/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=\ngithub.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=\ngithub.com/googleapis/google-cloud-go-testing v0.0.0-20200911160855-bcd43fbb19e8/go.mod h1:dvDLG8qkwmyD9a/MJJN3XJcT3xFxOKAvTZGvuZmac9g=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1 h1:EGx4pi6eqNxGaHF6qqu48+N2wcFQ5qg5FXgOdqsJ5d8=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gorilla/css v1.0.0/go.mod h1:Dn721qIggHpt4+EFCcTLTU/vk5ySda2ReITrtgBl60c=\ngithub.com/gorilla/mux v1.8.0 h1:i40aqfkR1h2SlN9hojwV5ZA91wcXFOvkdNIeFDP5koI=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/gorilla/websocket v1.5.0 h1:PPwGk2jz7EePpoHN/+ClbZu8SPxiqlu12wZP/3sWmnc=\ngithub.com/gorilla/websocket v1.5.0/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.23.0 h1:ad0vkEBuk23VJzZR9nkLVG0YAoN9coASF1GusYX6AlU=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.23.0/go.mod h1:igFoXX2ELCW06bol23DWPB5BEWfZISOzSP5K2sbLea0=\ngithub.com/hashicorp/go-cleanhttp v0.5.2 h1:035FKYIWjmULyFRBKPs8TBQoi0x6d9G4xc9neXJWAZQ=\ngithub.com/hashicorp/go-cleanhttp v0.5.2/go.mod h1:kO/YDlP8L1346E6Sodw+PrpBSV4/SoxCXGY6BqNFT48=\ngithub.com/hashicorp/go-hclog v1.6.3 h1:Qr2kF+eVWjTiYmU7Y31tYlP1h0q/X3Nl3tPGdaB11/k=\ngithub.com/hashicorp/go-hclog v1.6.3/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=\ngithub.com/hashicorp/go-retryablehttp v0.7.7 h1:C8hUCYzor8PIfXHa4UrZkU4VvK8o9ISHxT2Q8+VepXU=\ngithub.com/hashicorp/go-retryablehttp v0.7.7/go.mod h1:pkQpWZeYWskR+D1tR2O5OcBFOxfA7DoAO6xtkuQnHTk=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/inconshreveable/mousetrap v1.0.1/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/jackc/chunkreader v1.0.0/go.mod h1:RT6O25fNZIuasFJRyZ4R/Y2BbhasbmZXF9QQ7T3kePo=\ngithub.com/jackc/chunkreader/v2 v2.0.0/go.mod h1:odVSm741yZoC3dpHEUXIqA9tQRhFrgOHwnPIn9lDKlk=\ngithub.com/jackc/chunkreader/v2 v2.0.1/go.mod h1:odVSm741yZoC3dpHEUXIqA9tQRhFrgOHwnPIn9lDKlk=\ngithub.com/jackc/pgconn v0.0.0-20190420214824-7e0022ef6ba3/go.mod h1:jkELnwuX+w9qN5YIfX0fl88Ehu4XC3keFuOJJk9pcnA=\ngithub.com/jackc/pgconn v0.0.0-20190824142844-760dd75542eb/go.mod h1:lLjNuW/+OfW9/pnVKPazfWOgNfH2aPem8YQ7ilXGvJE=\ngithub.com/jackc/pgconn v0.0.0-20190831204454-2fabfa3c18b7/go.mod h1:ZJKsE/KZfsUgOEh9hBm+xYTstcNHg7UPMVJqRfQxq4s=\ngithub.com/jackc/pgconn v1.8.0/go.mod h1:1C2Pb36bGIP9QHGBYCjnyhqu7Rv3sGshaQUvmfGIB/o=\ngithub.com/jackc/pgconn v1.9.0/go.mod h1:YctiPyvzfU11JFxoXokUOOKQXQmDMoJL9vJzHH8/2JY=\ngithub.com/jackc/pgconn v1.9.1-0.20210724152538-d89c8390a530/go.mod h1:4z2w8XhRbP1hYxkpTuBjTS3ne3J48K83+u0zoyvg2pI=\ngithub.com/jackc/pgconn v1.13.0/go.mod h1:AnowpAqO4CMIIJNZl2VJp+KrkAZciAkhEl0W0JIobpI=\ngithub.com/jackc/pgio v1.0.0/go.mod h1:oP+2QK2wFfUWgr+gxjoBH9KGBb31Eio69xUb0w5bYf8=\ngithub.com/jackc/pgmock v0.0.0-20190831213851-13a1b77aafa2/go.mod h1:fGZlG77KXmcq05nJLRkk0+p82V8B8Dw8KN2/V9c/OAE=\ngithub.com/jackc/pgmock v0.0.0-20201204152224-4fe30f7445fd/go.mod h1:hrBW0Enj2AZTNpt/7Y5rr2xe/9Mn757Wtb2xeBzPv2c=\ngithub.com/jackc/pgmock v0.0.0-20210724152146-4ad1a8207f65/go.mod h1:5R2h2EEX+qri8jOWMbJCtaPWkrrNc7OHwsp2TCqp7ak=\ngithub.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=\ngithub.com/jackc/pgproto3 v1.1.0/go.mod h1:eR5FA3leWg7p9aeAqi37XOTgTIbkABlvcPB3E5rlc78=\ngithub.com/jackc/pgproto3/v2 v2.0.0-alpha1.0.20190420180111-c116219b62db/go.mod h1:bhq50y+xrl9n5mRYyCBFKkpRVTLYJVWeCc+mEAI3yXA=\ngithub.com/jackc/pgproto3/v2 v2.0.0-alpha1.0.20190609003834-432c2951c711/go.mod h1:uH0AWtUmuShn0bcesswc4aBTWGvw0cAxIJp+6OB//Wg=\ngithub.com/jackc/pgproto3/v2 v2.0.0-rc3/go.mod h1:ryONWYqW6dqSg1Lw6vXNMXoBJhpzvWKnT95C46ckYeM=\ngithub.com/jackc/pgproto3/v2 v2.0.0-rc3.0.20190831210041-4c03ce451f29/go.mod h1:ryONWYqW6dqSg1Lw6vXNMXoBJhpzvWKnT95C46ckYeM=\ngithub.com/jackc/pgproto3/v2 v2.0.6/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgproto3/v2 v2.1.1/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgproto3/v2 v2.3.1/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b/go.mod h1:vsD4gTJCa9TptPL8sPkXrLZ+hDuNrZCnj29CQpr4X1E=\ngithub.com/jackc/pgtype v0.0.0-20190421001408-4ed0de4755e0/go.mod h1:hdSHsc1V01CGwFsrv11mJRHWJ6aifDLfdV3aVjFF0zg=\ngithub.com/jackc/pgtype v0.0.0-20190824184912-ab885b375b90/go.mod h1:KcahbBH1nCMSo2DXpzsoWOAfFkdEtEJpPbVLq8eE+mc=\ngithub.com/jackc/pgtype v0.0.0-20190828014616-a8802b16cc59/go.mod h1:MWlu30kVJrUS8lot6TQqcg7mtthZ9T0EoIBFiJcmcyw=\ngithub.com/jackc/pgtype v1.8.1-0.20210724151600-32e20a603178/go.mod h1:C516IlIV9NKqfsMCXTdChteoXmwgUceqaLfjg2e3NlM=\ngithub.com/jackc/pgtype v1.12.0/go.mod h1:LUMuVrfsFfdKGLw+AFFVv6KtHOFMwRgDDzBt76IqCA4=\ngithub.com/jackc/pgx/v4 v4.0.0-20190420224344-cc3461e65d96/go.mod h1:mdxmSJJuR08CZQyj1PVQBHy9XOp5p8/SHH6a0psbY9Y=\ngithub.com/jackc/pgx/v4 v4.0.0-20190421002000-1b8f0016e912/go.mod h1:no/Y67Jkk/9WuGR0JG/JseM9irFbnEPbuWV2EELPNuM=\ngithub.com/jackc/pgx/v4 v4.0.0-pre1.0.20190824185557-6972a5742186/go.mod h1:X+GQnOEnf1dqHGpw7JmHqHc1NxDoalibchSk9/RWuDc=\ngithub.com/jackc/pgx/v4 v4.12.1-0.20210724153913-640aa07df17c/go.mod h1:1QD0+tgSXP7iUjYm9C1NxKhny7lq6ee99u/z+IHFcgs=\ngithub.com/jackc/pgx/v4 v4.17.2/go.mod h1:lcxIZN44yMIrWI78a5CpucdD14hX0SBDbNRvjDBItsw=\ngithub.com/jackc/puddle v0.0.0-20190413234325-e4ced69a3a2b/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v0.0.0-20190608224051-11cab39313c9/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v1.1.3/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v1.3.0/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jandelgado/gcov2lcov v1.0.5 h1:rkBt40h0CVK4oCb8Dps950gvfd1rYvQ8+cWa346lVU0=\ngithub.com/jandelgado/gcov2lcov v1.0.5/go.mod h1:NnSxK6TMlg1oGDBfGelGbjgorT5/L3cchlbtgFYZSss=\ngithub.com/jmoiron/sqlx v1.3.5/go.mod h1:nRVWtLre0KfCLJvgxzCsLVMogSvQ1zNJtpYr2Ccp0mQ=\ngithub.com/joho/godotenv v1.4.0/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=\ngithub.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=\ngithub.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=\ngithub.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51/go.mod h1:CzGEWj7cYgsdH8dAjBGEr58BoE7ScuLd+fwFZ44+/x8=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/knadh/koanf/maps v0.1.1 h1:G5TjmUh2D7G2YWf5SQQqSiHRJEjaicvU0KpypqB3NIs=\ngithub.com/knadh/koanf/maps v0.1.1/go.mod h1:npD/QZY3V6ghQDdcQzl1W4ICNVTkohC8E73eI2xW4yI=\ngithub.com/knadh/koanf/parsers/json v0.1.0 h1:dzSZl5pf5bBcW0Acnu20Djleto19T0CfHcvZ14NJ6fU=\ngithub.com/knadh/koanf/parsers/json v0.1.0/go.mod h1:ll2/MlXcZ2BfXD6YJcjVFzhG9P0TdJ207aIBKQhV2hY=\ngithub.com/knadh/koanf/providers/rawbytes v0.1.0 h1:dpzgu2KO6uf6oCb4aP05KDmKmAmI51k5pe8RYKQ0qME=\ngithub.com/knadh/koanf/providers/rawbytes v0.1.0/go.mod h1:mMTB1/IcJ/yE++A2iEZbY1MLygX7vttU+C+S/YmPu9c=\ngithub.com/knadh/koanf/v2 v2.0.1 h1:1dYGITt1I23x8cfx8ZnldtezdyaZtfAuRtIFOiRzK7g=\ngithub.com/knadh/koanf/v2 v2.0.1/go.mod h1:ZeiIlIDXTE7w1lMT6UVcNiRAS2/rCeLn/GdLNvY1Dus=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/fs v0.1.0/go.mod h1:FFnZGqtBN9Gxj7eW1uZ42v5BccTP0vu6NEaFoC2HwRg=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/pty v1.1.8/go.mod h1:O1sed60cT9XZ5uDucP5qwvh+TE3NnUj51EiZO/lmSfw=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.1.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.10.2/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/lib/pq v1.10.7/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/luna-duclos/instrumentedsql v1.1.3/go.mod h1:9J1njvFds+zN7y85EDhN9XNQLANWwZt2ULeIC8yMNYs=\ngithub.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=\ngithub.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/mattn/go-colorable v0.1.1/go.mod h1:FuOcm+DKB9mbwrcAfNl7/TZVBZ6rcnceauSikq3lYCQ=\ngithub.com/mattn/go-colorable v0.1.6/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.5/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.7/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-sqlite3 v1.14.6/go.mod h1:NyWgC/yNuGj7Q9rpYnZvas74GogHl5/Z4A/KQRfk6bU=\ngithub.com/mattn/go-sqlite3 v1.14.15/go.mod h1:2eHXhiwb8IkHr+BDWZGa96P6+rkvnG63S2DGjv9HUNg=\ngithub.com/mattn/go-sqlite3 v1.14.16/go.mod h1:2eHXhiwb8IkHr+BDWZGa96P6+rkvnG63S2DGjv9HUNg=\ngithub.com/mattn/goveralls v0.0.12 h1:PEEeF0k1SsTjOBQ8FOmrOAoCu4ytuMaWCnWe94zxbCg=\ngithub.com/mattn/goveralls v0.0.12/go.mod h1:44ImGEUfmqH8bBtaMrYKsM65LXfNLWmwaxFGjZwgMSQ=\ngithub.com/microcosm-cc/bluemonday v1.0.20/go.mod h1:yfBmMi8mxvaZut3Yytv+jTXRY8mxyjJ0/kQBTElld50=\ngithub.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=\ngithub.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=\ngithub.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 h1:RWengNIwukTxcDr9M+97sNutRR1RKhG96O6jWumTTnw=\ngithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826/go.mod h1:TaXosZuwdSHYgviHp1DAtfrULt5eUgsSMsZf+YrPgl8=\ngithub.com/moul/http2curl v0.0.0-20170919181001-9ac6cf4d929b h1:Pip12xNtMvEFUBF4f8/b5yRXj94LLrNdLWELfOr2KcY=\ngithub.com/moul/http2curl v0.0.0-20170919181001-9ac6cf4d929b/go.mod h1:8UbvGypXm98wA/IqH45anm5Y2Z6ep6O31QGOAZ3H0fQ=\ngithub.com/nyaruka/phonenumbers v1.1.6 h1:DcueYq7QrOArAprAYNoQfDgp0KetO4LqtnBtQC6Wyes=\ngithub.com/nyaruka/phonenumbers v1.1.6/go.mod h1:yShPJHDSH3aTKzCbXyVxNpbl2kA+F+Ne5Pun/MvFRos=\ngithub.com/oleiade/reflections v1.0.1 h1:D1XO3LVEYroYskEsoSiGItp9RUxG6jWnCVvrqH0HHQM=\ngithub.com/oleiade/reflections v1.0.1/go.mod h1:rdFxbxq4QXVZWj0F+e9jqjDkc7dbp97vkRixKo2JR60=\ngithub.com/openzipkin/zipkin-go v0.4.3 h1:9EGwpqkgnwdEIJ+Od7QVSEIH+ocmm5nPat0G7sjsSdg=\ngithub.com/openzipkin/zipkin-go v0.4.3/go.mod h1:M9wCJZFWCo2RiY+o1eBCEMe0Dp2S5LDHcMZmk3RmK7c=\ngithub.com/ory/go-acc v0.2.9-0.20230103102148-6b1c9a70dbbe h1:rvu4obdvqR0fkSIJ8IfgzKOWwZ5kOT2UNfLq81Qk7rc=\ngithub.com/ory/go-acc v0.2.9-0.20230103102148-6b1c9a70dbbe/go.mod h1:z4n3u6as84LbV4YmgjHhnwtccQqzf4cZlSk9f1FhygI=\ngithub.com/ory/go-convenience v0.1.0 h1:zouLKfF2GoSGnJwGq+PE/nJAE6dj2Zj5QlTgmMTsTS8=\ngithub.com/ory/go-convenience v0.1.0/go.mod h1:uEY/a60PL5c12nYz4V5cHY03IBmwIAEm8TWB0yn9KNs=\ngithub.com/ory/herodot v0.10.2 h1:gGvNMHgAwWzdP/eo+roSiT5CGssygHSjDU7MSQNlJ4E=\ngithub.com/ory/herodot v0.10.2/go.mod h1:MMNmY6MG1uB6fnXYFaHoqdV23DTWctlPsmRCeq/2+wc=\ngithub.com/ory/jsonschema/v3 v3.0.8 h1:Ssdb3eJ4lDZ/+XnGkvQS/te0p+EkolqwTsDOCxr/FmU=\ngithub.com/ory/jsonschema/v3 v3.0.8/go.mod h1:ZPzqjDkwd3QTnb2Z6PAS+OTvBE2x5i6m25wCGx54W/0=\ngithub.com/ory/x v0.0.677 h1:ZulzE4EBhNBXNotWmGSmGsVNbgbZpIr4snMURRkski0=\ngithub.com/ory/x v0.0.677/go.mod h1:zJmnDtKje2FCP4EeFvRsKk94XXiqKCSGJMZcirAfhUs=\ngithub.com/parnurzeal/gorequest v0.2.15 h1:oPjDCsF5IkD4gUk6vIgsxYNaSgvAnIh1EJeROn3HdJU=\ngithub.com/parnurzeal/gorequest v0.2.15/go.mod h1:3Kh2QUMJoqw3icWAecsyzkpY7UzRfDhbRdTjtNwNiUE=\ngithub.com/pelletier/go-toml/v2 v2.0.9 h1:uH2qQXheeefCCkuBBSLi7jCiSmj3VRh2+Goq2N7Xxu0=\ngithub.com/pelletier/go-toml/v2 v2.0.9/go.mod h1:tJU2Z3ZkXwnxa4DPO899bsyIoywizdUvyaeZurnPPDc=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/sftp v1.13.1/go.mod h1:3HaPG6Dq1ILlpPZRO0HVMrsydcdLt6HRDccSgb87qRg=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/rogpeppe/go-charset v0.0.0-20180617210344-2471d30d28b4/go.mod h1:qgYeAmZ5ZIpBWTGllZSQnw97Dj+woV0toclVaRGI8pc=\ngithub.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/rogpeppe/go-internal v1.13.1 h1:KvO1DLK/DRN07sQ1LQKScxyZJuNnedQ5/wKSR38lUII=\ngithub.com/rogpeppe/go-internal v1.13.1/go.mod h1:uMEvuHeurkdAXX61udpOXGD/AzZDWNMNyH2VO9fmH0o=\ngithub.com/rs/xid v1.2.1/go.mod h1:+uKXf+4Djp6Md1KODXJxgGQPKngRmWyn10oCKFzNHOQ=\ngithub.com/rs/zerolog v1.13.0/go.mod h1:YbFCdg8HfsridGWAh22vktObvhZbQsZXe4/zB0OKkWU=\ngithub.com/rs/zerolog v1.15.0/go.mod h1:xYTKnLHcpfU2225ny5qZjxnj9NvkumZYjJHlAThCjNc=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=\ngithub.com/seatgeek/logrus-gelf-formatter v0.0.0-20210414080842-5b05eb8ff761 h1:0b8DF5kR0PhRoRXDiEEdzrgBc8UqVY4JWLkQJCRsLME=\ngithub.com/seatgeek/logrus-gelf-formatter v0.0.0-20210414080842-5b05eb8ff761/go.mod h1:/THDZYi7F/BsVEcYzYPqdcWFQ+1C2InkawTKfLOAnzg=\ngithub.com/sergi/go-diff v1.2.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=\ngithub.com/shopspring/decimal v0.0.0-20180709203117-cd690d0c9e24/go.mod h1:M+9NzErvs504Cn4c5DxATwIqPbtswREoFCre64PpcG4=\ngithub.com/shopspring/decimal v1.2.0/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.9.0/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d h1:zE9ykElWQ6/NYmHa3jpm/yHnI4xSofP+UP6SpjHcSeM=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/goconvey v1.6.4 h1:fv0U8FUIMPNf1L9lnHLvLhgicrIVChEkdzIKYqbNC9s=\ngithub.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/sourcegraph/annotate v0.0.0-20160123013949-f4cad6c6324d/go.mod h1:UdhH50NIW0fCiwBSr0co2m7BnFLdv4fQTgdqdJTHFeE=\ngithub.com/sourcegraph/syntaxhighlight v0.0.0-20170531221838-bd320f5d308e/go.mod h1:HuIsMU8RRBOtsCgI77wP899iHVBQpCmg4ErYMZB+2IA=\ngithub.com/spf13/afero v1.9.5 h1:stMpOSZFs//0Lv29HduCmli3GUfpFoF3Y1Q/aXj/wVM=\ngithub.com/spf13/afero v1.9.5/go.mod h1:UBogFpq8E9Hx+xc5CNTTEpTnuHVmXDwZcZcE1eb/UhQ=\ngithub.com/spf13/cast v1.5.1 h1:R+kOtfhWQE6TVQzY+4D7wJLBgkdVasCEFxSUBYBYIlA=\ngithub.com/spf13/cast v1.5.1/go.mod h1:b9PdjNptOpzXr7Rq1q9gJML/2cdGQAo69NKzQ10KN48=\ngithub.com/spf13/cobra v1.6.1/go.mod h1:IOw/AERYS7UzyrGinqmz6HLUo219MORXGxhbaJUqzrY=\ngithub.com/spf13/cobra v1.7.0 h1:hyqWnYt1ZQShIddO5kBpj3vu05/++x6tJ6dg8EC572I=\ngithub.com/spf13/cobra v1.7.0/go.mod h1:uLxZILRyS/50WlhOIKD7W6V5bgeIt+4sICxh6uRMrb0=\ngithub.com/spf13/jwalterweatherman v1.1.0 h1:ue6voC5bR5F8YxI5S67j9i582FU4Qvo2bmqnqMYADFk=\ngithub.com/spf13/jwalterweatherman v1.1.0/go.mod h1:aNWZUN0dPAAO/Ljvb5BEdw96iTZ0EXowPYD95IqWIGo=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v1.16.0 h1:rGGH0XDZhdUOryiDWjmIvUSWpbNqisK8Wk0Vyefw8hc=\ngithub.com/spf13/viper v1.16.0/go.mod h1:yg78JgCJcbrQOvV9YLXgkLaZqUidkY9K+Dd1FofRzQg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.2.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2 h1:xuMeJ0Sdp5ZMRXx/aWO6RZxdr3beISkG5/G/aIRr3pY=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/subosito/gotenv v1.4.2 h1:X1TuBLAMDFbaTAChgCBLu3DU3UPyELpnF2jjJ2cz/S8=\ngithub.com/subosito/gotenv v1.4.2/go.mod h1:ayKnFf/c6rvx/2iiLrJUk1e6plDbT3edrFNGqEflhK0=\ngithub.com/tidwall/gjson v1.14.3 h1:9jvXn7olKEHU1S9vwoMGliaT8jq1vJ7IH/n9zD9Dnlw=\ngithub.com/tidwall/gjson v1.14.3/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/pretty v1.2.1 h1:qjsOFOWWQl+N3RsoF5/ssm1pHmJJwhjlSbZ51I6wMl4=\ngithub.com/tidwall/pretty v1.2.1/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/sjson v1.2.5 h1:kLy8mja+1c9jlljvWTlSazM7cKDRfJuR/bOJhcY5NcY=\ngithub.com/tidwall/sjson v1.2.5/go.mod h1:Fvgq9kS/6ociJEDnK0Fk1cpYF4FIW6ZF7LAe+6jwd28=\ngithub.com/urfave/negroni v1.0.0 h1:kIimOitoypq34K7TG7DUaJ9kq/N4Ofuwi1sjz0KipXc=\ngithub.com/urfave/negroni v1.0.0/go.mod h1:Meg73S6kFm/4PpbYdq35yYWoCZ9mS/YSx+lKnmiohz4=\ngithub.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/zenazn/goji v0.9.0/go.mod h1:7S9M489iMyHBNxwZnk9/EHS098H4/F6TATF2mIxtB1Q=\ngo.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=\ngo.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=\ngo.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.4/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.5/go.mod h1:5pWMHQbX5EPX2/62yrJeAkowc+lfs/XD7Uxpq3pI6kk=\ngo.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace v0.57.0 h1:7F3XCD6WYzDkwbi8I8N+oYJWquPVScnRosKGgqjsR8c=\ngo.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace v0.57.0/go.mod h1:Dk3C0BfIlZDZ5c6eVS7TYiH2vssuyUU3vUsgbrR+5V4=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.57.0 h1:DheMAlT6POBP+gh8RUH19EOTnQIor5QE0uSRPtzCpSw=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.57.0/go.mod h1:wZcGmeVO9nzP67aYSLDqXNWK87EZWhi7JWj1v7ZXf94=\ngo.opentelemetry.io/contrib/propagators/b3 v1.32.0 h1:MazJBz2Zf6HTN/nK/s3Ru1qme+VhWU5hm83QxEP+dvw=\ngo.opentelemetry.io/contrib/propagators/b3 v1.32.0/go.mod h1:B0s70QHYPrJwPOwD1o3V/R8vETNOG9N3qZf4LDYvA30=\ngo.opentelemetry.io/contrib/propagators/jaeger v1.32.0 h1:K/fOyTMD6GELKTIJBaJ9k3ppF2Njt8MeUGBOwfaWXXA=\ngo.opentelemetry.io/contrib/propagators/jaeger v1.32.0/go.mod h1:ISE6hda//MTWvtngG7p4et3OCngsrTVfl7c6DjN17f8=\ngo.opentelemetry.io/contrib/samplers/jaegerremote v0.26.0 h1:/SKXyZLAnuj981HVc8G5ZylYK3qD2W6AYR6cJx5kIHw=\ngo.opentelemetry.io/contrib/samplers/jaegerremote v0.26.0/go.mod h1:cOEzME0M2OKeHB45lJiOKfvUCdg/r75mf7YS5w0tbmE=\ngo.opentelemetry.io/otel v1.32.0 h1:WnBN+Xjcteh0zdk01SVqV55d/m62NJLJdIyb4y/WO5U=\ngo.opentelemetry.io/otel v1.32.0/go.mod h1:00DCVSB0RQcnzlwyTfqtxSm+DRr9hpYrHjNGiBHVQIg=\ngo.opentelemetry.io/otel/exporters/jaeger v1.17.0 h1:D7UpUy2Xc2wsi1Ras6V40q806WM07rqoCWzXu7Sqy+4=\ngo.opentelemetry.io/otel/exporters/jaeger v1.17.0/go.mod h1:nPCqOnEH9rNLKqH/+rrUjiMzHJdV1BlpKcTwRTyKkKI=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.32.0 h1:IJFEoHiytixx8cMiVAO+GmHR6Frwu+u5Ur8njpFO6Ac=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.32.0/go.mod h1:3rHrKNtLIoS0oZwkY2vxi+oJcwFRWdtUyRII+so45p8=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.32.0 h1:cMyu9O88joYEaI47CnQkxO1XZdpoTF9fEnW2duIddhw=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.32.0/go.mod h1:6Am3rn7P9TVVeXYG+wtcGE7IE1tsQ+bP3AuWcKt/gOI=\ngo.opentelemetry.io/otel/exporters/zipkin v1.32.0 h1:6O8HgLHPXtXE9QEKEWkBImL9mEKCGEl+m+OncVO53go=\ngo.opentelemetry.io/otel/exporters/zipkin v1.32.0/go.mod h1:+MFvorlowjy0iWnsKaNxC1kzczSxe71mw85h4p8yEvg=\ngo.opentelemetry.io/otel/metric v1.32.0 h1:xV2umtmNcThh2/a/aCP+h64Xx5wsj8qqnkYZktzNa0M=\ngo.opentelemetry.io/otel/metric v1.32.0/go.mod h1:jH7CIbbK6SH2V2wE16W05BHCtIDzauciCRLoc/SyMv8=\ngo.opentelemetry.io/otel/sdk v1.32.0 h1:RNxepc9vK59A8XsgZQouW8ue8Gkb4jpWtJm9ge5lEG4=\ngo.opentelemetry.io/otel/sdk v1.32.0/go.mod h1:LqgegDBjKMmb2GC6/PrTnteJG39I8/vJCAP9LlJXEjU=\ngo.opentelemetry.io/otel/trace v1.32.0 h1:WIC9mYrXf8TmY/EXuULKc8hR17vE+Hjv2cssQDe03fM=\ngo.opentelemetry.io/otel/trace v1.32.0/go.mod h1:+i4rkvCraA+tG6AzwloGaCtkx53Fa+L+V8e9a7YvhT8=\ngo.opentelemetry.io/proto/otlp v1.3.1 h1:TrMUixzpM0yuc/znrFTP9MMRh8trP93mkCiDVeXrui0=\ngo.opentelemetry.io/proto/otlp v1.3.1/go.mod h1:0X1WI4de4ZsLrrJNLAQbFeLCm3T7yBkR0XqQ7niQU+8=\ngo.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/atomic v1.5.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/atomic v1.6.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=\ngo.uber.org/multierr v1.3.0/go.mod h1:VgVr7evmIr6uPjLBxg28wmKNXyqE9akIJ5XnfpiKl+4=\ngo.uber.org/multierr v1.5.0/go.mod h1:FeouvMocqHpRaaGuG9EjoKcStLC43Zu/fmqdUMPcKYU=\ngo.uber.org/tools v0.0.0-20190618225709-2cfd321de3ee/go.mod h1:vJERXedbb3MVM5f9Ejo0C68/HhF8uaILCdgjnY+goOA=\ngo.uber.org/zap v1.9.1/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.13.0/go.mod h1:zwrFLgMcdUuIBviXEYEH1YKNaOBnKXsx2IPda5bBwHM=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190411191339-88737f569e3a/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190820162420-60c769a6c586/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201203163018-be400aefbc4c/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\ngolang.org/x/crypto v0.0.0-20210616213533-5ff15b29337e/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=\ngolang.org/x/exp v0.0.0-20190829153037-c13cbed26979/go.mod h1:86+5VVa7VpoJ4kLfm080zCjGlMRFzhUhsZKEZO7MGek=\ngolang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136/go.mod h1:JXzH8nQsPlswgeRAPE3MuO9GYsAcnJvJ4vnMwN/5qkY=\ngolang.org/x/exp v0.0.0-20191129062945-2f5052295587/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20191227195350-da58074b4299/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=\ngolang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=\ngolang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=\ngolang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190909230951-414d861bb4ac/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20191125180803-fdd1cda4f05f/go.mod h1:5qLYkcX4OjUUV8bRuDixDT3tpyyb+LUpUlRWLxfhWrs=\ngolang.org/x/lint v0.0.0-20200130185559-910be7a94367/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20201208152925-83fdc39ff7b5/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=\ngolang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=\ngolang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=\ngolang.org/x/mod v0.1.0/go.mod h1:0QHyrYULN0/3qlju5TqG8bIK38QM8yzMo5ekMj3DlcY=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.1.1-0.20191107180719-034126e5016b/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.1/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.10.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.18.0 h1:5+9lSbEzPSdWkH32vYPBwEpX8KwDbM52Ud9xBUvNlb0=\ngolang.org/x/mod v0.18.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190628185345-da137c7871d7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190813141303-74dc4d7220e7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200222125558-5a598a2470a0/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200301022130-244492dfa37a/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200501053045-e0ff5e5a1de5/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200506145744-7e3656a0809f/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200513185701-a91f0712d120/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201031054903-ff519b6c9102/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201209123823-ac852fbbde11/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20201224014010-6772e930b67b/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.0.0-20220826154423-83b083e8dc8b/go.mod h1:YDH+HFinaLZZlnHAfSS6ZXJJ9M9t4Dl22yv3iI2vPwk=\ngolang.org/x/net v0.0.0-20221002022538-bcab6841153b/go.mod h1:YDH+HFinaLZZlnHAfSS6ZXJJ9M9t4Dl22yv3iI2vPwk=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=\ngolang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20191202225959-858c2ad4c8b6/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20200902213428-5d25da1a8d43/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20201109201403-9fd604954f58/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20201208152858-08078c50e5b5/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210218202405-ba52d332ba99/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.23.0 h1:PbgcYx2W7i4LvjJWEbf0ngHV6qJYr86PkAV3bXdLEbs=\ngolang.org/x/oauth2 v0.23.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201207232520-09787c993a3a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220929204114-8fcdb60fdcc0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190403152447-81d4e9dc473e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191228213918-04cbcbbfeed8/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200212091648-12a6c2dcc1e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200302150141-5c8b2ff67527/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200331124033-c3d80250170d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200501052902-10377860bb8e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200511232937-7e40ca221e25/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200515095857-1151b9dac4a9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200803210538-64077c9b5642/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200905004654-be1d3432aa8f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201201145000-ef89a241ccb3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210104204734-6f8348627aad/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210225134936-a50acf3fe073/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423185535-09eb48e85fd7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220728004956-3c1f35247d10/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201117132131-f5c789dd3221/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.0.0-20220722155259-a9ba230a4035/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.7.0/go.mod h1:P32HKFT3hSsZrRxla30E9HqToFYAQPCMs/zFMBUFqPY=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190425163242-31fd60d6bfdc/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190506145303-2d16b83fe98c/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190606124116-d0a3d012864b/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190823170909-c4a336ef6a2f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191113191852-77e3bb0ad9e7/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191115202509-3a792d9c32b2/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191125144606-a911d9008d1f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191130070609-6e064ea0cf2d/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191216173652-a0e659d51361/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20191227053925-7b8e75db28f4/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200103221440-774c71fcf114/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200117161641-43d50277825c/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200122220014-bf1340f18c4a/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200204074204-1cc6d1ef6c74/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200207183749-b753a1ba74fa/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200212150539-ea181f53ac56/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200224181240-023911ca70b2/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200227222343-706bc42d1f0d/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200304193943-95d2e580d8eb/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=\ngolang.org/x/tools v0.0.0-20200312045724-11d5b4c81c7d/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=\ngolang.org/x/tools v0.0.0-20200331025713-a30bf2db82d4/go.mod h1:Sl4aGygMT6LrqrWclx+PTx3U+LnKx/seiNR+3G19Ar8=\ngolang.org/x/tools v0.0.0-20200501065659-ab2804fb9c9d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200512131952-2bc93b1c0c88/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200515010526-7d3b6ebf133d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200618134242-20370b0cb4b2/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200729194436-6467de6f59a7/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200804011535-6c149bb5ef0d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200825202427-b303f430e36d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200904185747-39188db58858/go.mod h1:Cj7w3i3Rnn0Xh82ur9kSqwfTHTeVxaDqrfMjpcNT6bE=\ngolang.org/x/tools v0.0.0-20201110124207-079ba7bd75cd/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201201161351-ac6f37ff4c2a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201208233053-a543418bbed2/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210105154028-b0ab187a4818/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210108195828-e2f9c7f1fc8e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=\ngolang.org/x/tools v0.1.1/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.8.0/go.mod h1:JxBZ99ISMI5ViVkT1tr6tdNmXeTrcpVSD3vZ1RsRdN4=\ngolang.org/x/tools v0.22.0 h1:gqSGLZqv+AI9lIQzniJ0nZDRG5GBPsSi+DRNHWNz6yA=\ngolang.org/x/tools v0.22.0/go.mod h1:aCwcsjqvq7Yqt6TNyX7QMU2enbQ/Gt0bo6krSeEri+c=\ngolang.org/x/xerrors v0.0.0-20190410155217-1f06c39b4373/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20190513163551-3ee3066db522/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=\ngoogle.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=\ngoogle.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.9.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.13.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.14.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.15.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.17.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.18.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.19.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.20.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.22.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.24.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.28.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.29.0/go.mod h1:Lcubydp8VUV7KeIHD9z2Bys/sm/vGKnG1UHuDBSrHWM=\ngoogle.golang.org/api v0.30.0/go.mod h1:QGmEvQ87FHZNiUVJkT14jQNYJ4ZJjdRF23ZXz5138Fc=\ngoogle.golang.org/api v0.35.0/go.mod h1:/XrVsuzM0rZmrsbjJutiuftIzeuTQcEeaYcSk/mQ1dg=\ngoogle.golang.org/api v0.36.0/go.mod h1:+z5ficQTmoYpPn8LCUNVpK5I7hwkpjbcgqA7I34qYtE=\ngoogle.golang.org/api v0.40.0/go.mod h1:fYKFpnQN0DsDSKRVRcQSDQNtqWPfM9i+zNPxepjRCQ8=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=\ngoogle.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/appengine v1.6.6/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/appengine v1.6.7/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190801165951-fa694d86fc64/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190911173649-1774047e7e51/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=\ngoogle.golang.org/genproto v0.0.0-20191108220845-16a3f7862a1a/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191115194625-c23dd37a84c9/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191216164720-4f79533eabd1/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191230161307-f3c370f40bfb/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200115191322-ca5a22157cba/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200122232147-0452cf42e150/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200204135345-fa8e72b47b90/go.mod h1:GmwEX6Z4W5gMy59cAlVYjN9JhxgbQH6Gn+gFDQe2lzA=\ngoogle.golang.org/genproto v0.0.0-20200212174721-66ed5ce911ce/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200224152610-e50cd9704f63/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200228133532-8c2c7df3a383/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200305110556-506484158171/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200312145019-da6875a35672/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200331122359-1ee6d9798940/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200430143042-b979b6f78d84/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200511104702-f5ebc3bea380/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200515170657-fc4c6c6a6587/go.mod h1:YsZOwe1myG/8QRHRsmBRE1LrgQY60beZKjly0O1fX9U=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/genproto v0.0.0-20200618031413-b414f8b61790/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=\ngoogle.golang.org/genproto v0.0.0-20200729003335-053ba62fc06f/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200804131852-c06518451d9c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200825200019-8632dd797987/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200904004341-0bd0a958aa1d/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201109203340-2640f1f9cdfb/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201201144952-b05cb90ed32e/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201210142538-e3217bee35cc/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201214200347-8c77b98c765d/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210108203827-ffc7fda8c3d7/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210226172003-ab064af71705/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241104194629-dd2ea8efbc28 h1:M0KvPgPmDZHPlbRbaNU1APr28TvwvvdUPlSv7PUvy8g=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241104194629-dd2ea8efbc28/go.mod h1:dguCy7UOdZhTvLzDyt15+rOrawrpM4q7DD9dQ1P11P4=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241104194629-dd2ea8efbc28 h1:XVhgTWWV3kGQlwJHR3upFWZeTsei6Oks1apkZSeonIE=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241104194629-dd2ea8efbc28/go.mod h1:GX3210XPVPUjJbTUbvwI8f2IpZDMZuPJWDzDuebbviI=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.28.0/go.mod h1:rpkK4SK4GF4Ach/+MFLZUBavHOvF2JJB5uozKKal+60=\ngoogle.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=\ngoogle.golang.org/grpc v1.30.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.31.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.31.1/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=\ngoogle.golang.org/grpc v1.34.0/go.mod h1:WotjhfgOW/POjDeRt8vscBtXq+2VjORFy659qA51WJ8=\ngoogle.golang.org/grpc v1.35.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.67.1 h1:zWnc1Vrcno+lHZCOofnIMvycFcc0QRGIzm9dhnDX68E=\ngoogle.golang.org/grpc v1.67.1/go.mod h1:1gLDyUQU7CTLJI90u3nXZ9ekeghjeM7pTDZlqFNg2AA=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=\ngoogle.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/inconshreveable/log15.v2 v2.0.0-20180818164646-67afb5ed74ec/go.mod h1:aPpfJ7XW+gOuirDoZ8gHhLh3kZ1B08FtV2bbmy7Jv3s=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=\nhonnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nhonnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nrsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=\nrsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\n"
        },
        {
          "name": "go_mod_indirect_pins.go",
          "type": "blob",
          "size": 0.2197265625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\n//go:build tools\n// +build tools\n\npackage fosite\n\nimport (\n\t_ \"github.com/gorilla/websocket\"\n\t_ \"github.com/mattn/goveralls\"\n\n\t_ \"github.com/ory/go-acc\"\n)\n"
        },
        {
          "name": "handler.go",
          "type": "blob",
          "size": 3.720703125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n)\n\ntype AuthorizeEndpointHandler interface {\n\t// HandleAuthorizeRequest handles an authorize endpoint request. To extend the handler's capabilities, the http request\n\t// is passed along, if further information retrieval is required. If the handler feels that he is not responsible for\n\t// the authorize request, he must return nil and NOT modify session nor responder neither requester.\n\t//\n\t// The following spec is a good example of what HandleAuthorizeRequest should do.\n\t// * https://tools.ietf.org/html/rfc6749#section-3.1.1\n\t//   response_type REQUIRED.\n\t//   The value MUST be one of \"code\" for requesting an\n\t//   authorization code as described by Section 4.1.1, \"token\" for\n\t//   requesting an access token (implicit grant) as described by\n\t//   Section 4.2.1, or a registered extension value as described by Section 8.4.\n\tHandleAuthorizeEndpointRequest(ctx context.Context, requester AuthorizeRequester, responder AuthorizeResponder) error\n}\n\ntype TokenEndpointHandler interface {\n\t// PopulateTokenEndpointResponse is responsible for setting return values and should only be executed if\n\t// the handler's HandleTokenEndpointRequest did not return ErrUnknownRequest.\n\tPopulateTokenEndpointResponse(ctx context.Context, requester AccessRequester, responder AccessResponder) error\n\n\t// HandleTokenEndpointRequest handles an authorize request. If the handler is not responsible for handling\n\t// the request, this method should return ErrUnknownRequest and otherwise handle the request.\n\tHandleTokenEndpointRequest(ctx context.Context, requester AccessRequester) error\n\n\t// CanSkipClientAuth indicates if client authentication can be skipped. By default it MUST be false, unless you are\n\t// implementing extension grant type, which allows unauthenticated client. CanSkipClientAuth must be called\n\t// before HandleTokenEndpointRequest to decide, if AccessRequester will contain authenticated client.\n\tCanSkipClientAuth(ctx context.Context, requester AccessRequester) bool\n\n\t// CanHandleRequest indicates, if TokenEndpointHandler can handle this request or not. If true,\n\t// HandleTokenEndpointRequest can be called.\n\tCanHandleTokenEndpointRequest(ctx context.Context, requester AccessRequester) bool\n}\n\n// RevocationHandler is the interface that allows token revocation for an OAuth2.0 provider.\n// https://tools.ietf.org/html/rfc7009\n//\n// RevokeToken is invoked after a new token revocation request is parsed.\n//\n// https://tools.ietf.org/html/rfc7009#section-2.1\n// If the particular\n// token is a refresh token and the authorization server supports the\n// revocation of access tokens, then the authorization server SHOULD\n// also invalidate all access tokens based on the same authorization\n// grant (see Implementation Note). If the token passed to the request\n// is an access token, the server MAY revoke the respective refresh\n// token as well.\ntype RevocationHandler interface {\n\t// RevokeToken handles access and refresh token revocation.\n\tRevokeToken(ctx context.Context, token string, tokenType TokenType, client Client) error\n}\n\n// PushedAuthorizeEndpointHandler is the interface that handles PAR (https://datatracker.ietf.org/doc/html/rfc9126)\ntype PushedAuthorizeEndpointHandler interface {\n\t// HandlePushedAuthorizeRequest handles a pushed authorize endpoint request. To extend the handler's capabilities, the http request\n\t// is passed along, if further information retrieval is required. If the handler feels that he is not responsible for\n\t// the pushed authorize request, he must return nil and NOT modify session nor responder neither requester.\n\tHandlePushedAuthorizeEndpointRequest(ctx context.Context, requester AuthorizeRequester, responder PushedAuthorizeResponder) error\n}\n"
        },
        {
          "name": "handler",
          "type": "tree",
          "content": null
        },
        {
          "name": "hash.go",
          "type": "blob",
          "size": 0.44140625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport \"context\"\n\n// Hasher defines how a oauth2-compatible hasher should look like.\ntype Hasher interface {\n\t// Compare compares data with a hash and returns an error\n\t// if the two do not match.\n\tCompare(ctx context.Context, hash, data []byte) error\n\n\t// Hash creates a hash from data or returns an error.\n\tHash(ctx context.Context, data []byte) ([]byte, error)\n}\n"
        },
        {
          "name": "hash_bcrypt.go",
          "type": "blob",
          "size": 0.783203125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\n\t\"github.com/ory/x/errorsx\"\n\n\t\"golang.org/x/crypto/bcrypt\"\n)\n\nconst DefaultBCryptWorkFactor = 12\n\n// BCrypt implements the Hasher interface by using BCrypt.\ntype BCrypt struct {\n\tConfig interface {\n\t\tBCryptCostProvider\n\t}\n}\n\nfunc (b *BCrypt) Hash(ctx context.Context, data []byte) ([]byte, error) {\n\twf := b.Config.GetBCryptCost(ctx)\n\tif wf == 0 {\n\t\twf = DefaultBCryptWorkFactor\n\t}\n\ts, err := bcrypt.GenerateFromPassword(data, wf)\n\tif err != nil {\n\t\treturn nil, errorsx.WithStack(err)\n\t}\n\treturn s, nil\n}\n\nfunc (b *BCrypt) Compare(ctx context.Context, hash, data []byte) error {\n\tif err := bcrypt.CompareHashAndPassword(hash, data); err != nil {\n\t\treturn errorsx.WithStack(err)\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "hash_bcrypt_test.go",
          "type": "blob",
          "size": 2.5048828125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"golang.org/x/crypto/bcrypt\"\n)\n\nfunc TestCompare(t *testing.T) {\n\tworkfactor := 10\n\thasher := &BCrypt{Config: &Config{HashCost: workfactor}}\n\n\texpectedPassword := \"hello world\"\n\texpectedPasswordHash, err := hasher.Hash(context.TODO(), []byte(expectedPassword))\n\tassert.NoError(t, err)\n\tassert.NotNil(t, expectedPasswordHash)\n\n\ttestCases := []struct {\n\t\ttestDescription  string\n\t\tprovidedPassword string\n\t\tshouldError      bool\n\t}{\n\t\t{\n\t\t\ttestDescription:  \"should not return an error if hash of provided password matches hash of expected password\",\n\t\t\tprovidedPassword: expectedPassword,\n\t\t\tshouldError:      false,\n\t\t},\n\t\t{\n\t\t\ttestDescription:  \"should return an error if hash of provided password does not match hash of expected password\",\n\t\t\tprovidedPassword: \"some invalid password\",\n\t\t\tshouldError:      true,\n\t\t},\n\t}\n\n\tfor _, test := range testCases {\n\t\tt.Run(test.testDescription, func(t *testing.T) {\n\t\t\thash, err := hasher.Hash(context.TODO(), []byte(test.providedPassword))\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.NotNil(t, hash)\n\n\t\t\terr = hasher.Compare(context.TODO(), expectedPasswordHash, []byte(test.providedPassword))\n\t\t\tif test.shouldError {\n\t\t\t\tassert.Error(t, err)\n\t\t\t} else {\n\t\t\t\tassert.NoError(t, err)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestHash(t *testing.T) {\n\tvalidWorkFactor := 10\n\tinvalidWorkFactor := 1000 // this is an invalid work factor that will cause the call to Hash to fail!\n\tpassword := []byte(\"bar\")\n\n\ttestCases := []struct {\n\t\ttestDescription string\n\t\tworkFactor      int\n\t\tshouldError     bool\n\t}{\n\t\t{\n\t\t\ttestDescription: \"should succeed if work factor is valid\",\n\t\t\tworkFactor:      validWorkFactor,\n\t\t\tshouldError:     false,\n\t\t},\n\t\t{\n\t\t\ttestDescription: \"should fail with error if work factor is invalid\",\n\t\t\tworkFactor:      invalidWorkFactor,\n\t\t\tshouldError:     true,\n\t\t},\n\t}\n\n\tfor _, test := range testCases {\n\t\tt.Run(test.testDescription, func(t *testing.T) {\n\t\t\thasher := &BCrypt{Config: &Config{HashCost: test.workFactor}}\n\t\t\t_, err := hasher.Hash(context.TODO(), password)\n\t\t\tif test.shouldError {\n\t\t\t\tassert.Error(t, err)\n\t\t\t} else {\n\t\t\t\tassert.NoError(t, err)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultWorkFactor(t *testing.T) {\n\tb := &BCrypt{Config: &Config{}}\n\tdata := []byte(\"secrets\")\n\thash, err := b.Hash(context.TODO(), data)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tcost, err := bcrypt.Cost(hash)\n\tassert.NoError(t, err)\n\tif cost != 12 {\n\t\tt.Errorf(\"got cost factor %d\", cost)\n\t}\n}\n"
        },
        {
          "name": "helper.go",
          "type": "blob",
          "size": 1.1611328125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// StringInSlice returns true if needle exists in haystack\nfunc StringInSlice(needle string, haystack []string) bool {\n\tfor _, b := range haystack {\n\t\tif strings.ToLower(b) == strings.ToLower(needle) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc RemoveEmpty(args []string) (ret []string) {\n\tfor _, v := range args {\n\t\tv = strings.TrimSpace(v)\n\t\tif v != \"\" {\n\t\t\tret = append(ret, v)\n\t\t}\n\t}\n\treturn\n}\n\n// EscapeJSONString does a poor man's JSON encoding. Useful when we do not want to use full JSON encoding\n// because we just had an error doing the JSON encoding. The characters that MUST be escaped: quotation mark,\n// reverse solidus, and the control characters (U+0000 through U+001F).\n// See: https://tools.ietf.org/html/std90#section-7\nfunc EscapeJSONString(str string) string {\n\t// Escape reverse solidus.\n\tstr = strings.ReplaceAll(str, `\\`, `\\\\`)\n\t// Escape control characters.\n\tfor r := rune(0); r < ' '; r++ {\n\t\tstr = strings.ReplaceAll(str, string(r), fmt.Sprintf(`\\u%04x`, r))\n\t}\n\t// Escape quotation mark.\n\tstr = strings.ReplaceAll(str, `\"`, `\\\"`)\n\treturn str\n}\n"
        },
        {
          "name": "helper_test.go",
          "type": "blob",
          "size": 1.099609375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"encoding/json\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestStringInSlice(t *testing.T) {\n\tfor k, c := range []struct {\n\t\tneedle   string\n\t\thaystack []string\n\t\tok       bool\n\t}{\n\t\t{needle: \"foo\", haystack: []string{\"foo\", \"bar\"}, ok: true},\n\t\t{needle: \"bar\", haystack: []string{\"foo\", \"bar\"}, ok: true},\n\t\t{needle: \"baz\", haystack: []string{\"foo\", \"bar\"}, ok: false},\n\t\t{needle: \"foo\", haystack: []string{\"bar\"}, ok: false},\n\t\t{needle: \"bar\", haystack: []string{\"bar\"}, ok: true},\n\t\t{needle: \"foo\", haystack: []string{}, ok: false},\n\t} {\n\t\tassert.Equal(t, c.ok, StringInSlice(c.needle, c.haystack), \"%d\", k)\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n\nfunc TestEscapeJSONString(t *testing.T) {\n\tfor _, str := range []string{\"\", \"foobar\", `foo\"bar`, `foo\\bar`, \"foo\\n\\tbar\"} {\n\t\tescaped := EscapeJSONString(str)\n\t\tvar unmarshaled string\n\t\terr := json.Unmarshal([]byte(`\"`+escaped+`\"`), &unmarshaled)\n\t\trequire.NoError(t, err, str)\n\t\tassert.Equal(t, str, unmarshaled, str)\n\t}\n}\n"
        },
        {
          "name": "i18n",
          "type": "tree",
          "content": null
        },
        {
          "name": "i18n_helper.go",
          "type": "blob",
          "size": 1.4970703125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"github.com/pkg/errors\"\n\t\"golang.org/x/text/language\"\n\n\t\"github.com/ory/fosite/i18n\"\n\t\"github.com/ory/x/errorsx\"\n)\n\n// AddLocalizerToErr augments the error object with the localizer\n// based on the language set in the requester object. This is primarily\n// required for response writers like introspection that do not take in\n// the requester in the Write* function that produces the translated\n// message.\n// See - WriteIntrospectionError, for example.\nfunc AddLocalizerToErr(catalog i18n.MessageCatalog, err error, requester Requester) error {\n\treturn AddLocalizerToErrWithLang(catalog, getLangFromRequester(requester), err)\n}\n\n// AddLocalizerToErrWithLang augments the error object with the localizer\n// based on the language passed in. This is primarily\n// required for response writers like introspection that do not take in\n// the requester in the Write* function that produces the translated\n// message.\n// See - WriteIntrospectionError, for example.\nfunc AddLocalizerToErrWithLang(catalog i18n.MessageCatalog, lang language.Tag, err error) error {\n\tvar e RFC6749Error\n\tif errors.As(err, &e) {\n\t\treturn e.WithLocalizer(catalog, lang)\n\t} else if errors.As(errorsx.Cause(err), &e) {\n\t\treturn e.WithLocalizer(catalog, lang)\n\t}\n\treturn err\n}\n\nfunc getLangFromRequester(requester Requester) language.Tag {\n\tlang := language.English\n\tg11nContext, ok := requester.(G11NContext)\n\tif ok {\n\t\tlang = g11nContext.GetLang()\n\t}\n\n\treturn lang\n}\n"
        },
        {
          "name": "i18n_helper_test.go",
          "type": "blob",
          "size": 1.953125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"golang.org/x/text/language\"\n\n\t\"github.com/ory/fosite/i18n\"\n)\n\nfunc TestErrorTranslation(t *testing.T) {\n\tcatalog := i18n.NewDefaultMessageCatalog([]*i18n.DefaultLocaleBundle{\n\t\t{\n\t\t\tLangTag: \"en\",\n\t\t\tMessages: []*i18n.DefaultMessage{\n\t\t\t\t{\n\t\t\t\t\tID:               \"badRequestMethod\",\n\t\t\t\t\tFormattedMessage: \"HTTP method is '%s', expected 'POST'.\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tID:               \"invalid_request\",\n\t\t\t\t\tFormattedMessage: \"The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tLangTag: \"es\",\n\t\t\tMessages: []*i18n.DefaultMessage{\n\t\t\t\t{\n\t\t\t\t\tID:               \"badRequestMethod\",\n\t\t\t\t\tFormattedMessage: \"El método HTTP es '%s', esperado 'POST'.\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tID:               \"invalid_request\",\n\t\t\t\t\tFormattedMessage: \"A la solicitud le falta un parámetro obligatorio, incluye un valor de parámetro no válido, incluye un parámetro más de una vez o tiene un formato incorrecto.\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\terrWithNoCatalog := ErrInvalidRequest.WithHintIDOrDefaultf(\"badRequestMethod\", \"HTTP method is '%s', expected 'POST'.\", \"GET\")\n\terrWithCatalog := errWithNoCatalog.WithLocalizer(catalog, language.Spanish)\n\n\tassert.Equal(t, \"The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. HTTP method is 'GET', expected 'POST'.\",\n\t\terrWithNoCatalog.GetDescription(), \"Message does not match when no catalog is specified\")\n\tassert.Equal(t, \"A la solicitud le falta un parámetro obligatorio, incluye un valor de parámetro no válido, incluye un parámetro más de una vez o tiene un formato incorrecto. El método HTTP es 'GET', esperado 'POST'.\",\n\t\terrWithCatalog.GetDescription(), \"Message does not match when catalog is specified\")\n}\n"
        },
        {
          "name": "integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "introspect.go",
          "type": "blob",
          "size": 2.0810546875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/ory/x/errorsx\"\n\t\"github.com/ory/x/otelx\"\n\t\"go.opentelemetry.io/otel/trace\"\n\n\t\"github.com/pkg/errors\"\n)\n\ntype TokenIntrospector interface {\n\tIntrospectToken(ctx context.Context, token string, tokenUse TokenUse, accessRequest AccessRequester, scopes []string) (TokenUse, error)\n}\n\nfunc AccessTokenFromRequest(req *http.Request) string {\n\t// According to https://tools.ietf.org/html/rfc6750 you can pass tokens through:\n\t// - Form-Encoded Body Parameter. Recommended, more likely to appear. e.g.: Authorization: Bearer mytoken123\n\t// - URI Query Parameter e.g. access_token=mytoken123\n\n\tauth := req.Header.Get(\"Authorization\")\n\tsplit := strings.SplitN(auth, \" \", 2)\n\tif len(split) != 2 || !strings.EqualFold(split[0], \"bearer\") {\n\t\t// Nothing in Authorization header, try access_token\n\t\t// Empty string returned if there's no such parameter\n\t\tif err := req.ParseMultipartForm(1 << 20); err != nil && err != http.ErrNotMultipart {\n\t\t\treturn \"\"\n\t\t}\n\t\treturn req.Form.Get(\"access_token\")\n\t}\n\n\treturn split[1]\n}\n\nfunc (f *Fosite) IntrospectToken(ctx context.Context, token string, tokenUse TokenUse, session Session, scopes ...string) (_ TokenUse, _ AccessRequester, err error) {\n\tctx, span := trace.SpanFromContext(ctx).TracerProvider().Tracer(\"github.com/ory/fosite\").Start(ctx, \"Fosite.IntrospectToken\")\n\tdefer otelx.End(span, &err)\n\n\tvar found = false\n\tvar foundTokenUse TokenUse = \"\"\n\n\tar := NewAccessRequest(session)\n\tfor _, validator := range f.Config.GetTokenIntrospectionHandlers(ctx) {\n\t\ttu, err := validator.IntrospectToken(ctx, token, tokenUse, ar, scopes)\n\t\tif err == nil {\n\t\t\tfound = true\n\t\t\tfoundTokenUse = tu\n\t\t} else if errors.Is(err, ErrUnknownRequest) {\n\t\t\t// do nothing\n\t\t} else {\n\t\t\trfcerr := ErrorToRFC6749Error(err)\n\t\t\treturn \"\", nil, errorsx.WithStack(rfcerr)\n\t\t}\n\t}\n\n\tif !found {\n\t\treturn \"\", nil, errorsx.WithStack(ErrRequestUnauthorized.WithHint(\"Unable to find a suitable validation strategy for the token, thus it is invalid.\"))\n\t}\n\n\treturn foundTokenUse, ar, nil\n}\n"
        },
        {
          "name": "introspect_test.go",
          "type": "blob",
          "size": 3.4677734375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t. \"github.com/ory/fosite\"\n\t\"github.com/ory/fosite/compose\"\n\t\"github.com/ory/fosite/internal\"\n\t\"github.com/ory/fosite/storage\"\n)\n\nfunc TestAccessTokenFromRequestNoToken(t *testing.T) {\n\treq, _ := http.NewRequest(\"GET\", \"http://example.com/test\", nil)\n\n\tassert.Equal(t, AccessTokenFromRequest(req), \"\", \"No token should produce an empty string\")\n}\n\nfunc TestAccessTokenFromRequestHeader(t *testing.T) {\n\ttoken := \"TokenFromHeader\"\n\n\treq, _ := http.NewRequest(\"GET\", \"http://example.com/test\", nil)\n\treq.Header.Add(\"Authorization\", \"Bearer \"+token)\n\n\tassert.Equal(t, AccessTokenFromRequest(req), token, \"Token should be obtainable from header\")\n}\n\nfunc TestAccessTokenFromRequestQuery(t *testing.T) {\n\ttoken := \"TokenFromQueryParam\"\n\n\treq, _ := http.NewRequest(\"GET\", \"http://example.com/test?access_token=\"+token, nil)\n\n\tassert.Equal(t, AccessTokenFromRequest(req), token, \"Token should be obtainable from access_token query parameter\")\n}\n\nfunc TestIntrospect(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tvalidator := internal.NewMockTokenIntrospector(ctrl)\n\tdefer ctrl.Finish()\n\n\tconfig := new(Config)\n\tf := compose.ComposeAllEnabled(config, storage.NewMemoryStore(), nil).(*Fosite)\n\n\treq, _ := http.NewRequest(\"GET\", \"http://example.com/test\", nil)\n\treq.Header.Add(\"Authorization\", \"bearer some-token\")\n\n\tfor k, c := range []struct {\n\t\tdescription string\n\t\tscopes      []string\n\t\tsetup       func()\n\t\texpectErr   error\n\t}{\n\t\t{\n\t\t\tdescription: \"should fail\",\n\t\t\tscopes:      []string{},\n\t\t\tsetup: func() {\n\t\t\t},\n\t\t\texpectErr: ErrRequestUnauthorized,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should fail\",\n\t\t\tscopes:      []string{\"foo\"},\n\t\t\tsetup: func() {\n\t\t\t\tconfig.TokenIntrospectionHandlers = TokenIntrospectionHandlers{validator}\n\t\t\t\tvalidator.EXPECT().IntrospectToken(gomock.Any(), \"some-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), ErrUnknownRequest)\n\t\t\t},\n\t\t\texpectErr: ErrRequestUnauthorized,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should fail\",\n\t\t\tscopes:      []string{\"foo\"},\n\t\t\tsetup: func() {\n\t\t\t\tvalidator.EXPECT().IntrospectToken(gomock.Any(), \"some-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), ErrInvalidClient)\n\t\t\t},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should pass\",\n\t\t\tsetup: func() {\n\t\t\t\tvalidator.EXPECT().IntrospectToken(gomock.Any(), \"some-token\", gomock.Any(), gomock.Any(), gomock.Any()).Do(func(ctx context.Context, _ string, _ TokenUse, accessRequest AccessRequester, _ []string) {\n\t\t\t\t\taccessRequest.(*AccessRequest).GrantedScope = []string{\"bar\"}\n\t\t\t\t}).Return(TokenUse(\"\"), nil)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdescription: \"should pass\",\n\t\t\tscopes:      []string{\"bar\"},\n\t\t\tsetup: func() {\n\t\t\t\tvalidator.EXPECT().IntrospectToken(gomock.Any(), \"some-token\", gomock.Any(), gomock.Any(), gomock.Any()).Do(func(ctx context.Context, _ string, _ TokenType, accessRequest AccessRequester, _ []string) {\n\t\t\t\t\taccessRequest.(*AccessRequest).GrantedScope = []string{\"bar\"}\n\t\t\t\t}).Return(TokenUse(\"\"), nil)\n\t\t\t},\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tc.setup()\n\t\t\t_, _, err := f.IntrospectToken(context.Background(), AccessTokenFromRequest(req), AccessToken, nil, c.scopes...)\n\t\t\tif c.expectErr != nil {\n\t\t\t\tassert.EqualError(t, err, c.expectErr.Error())\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "introspection_request_handler.go",
          "type": "blob",
          "size": 8.388671875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"golang.org/x/text/language\"\n\n\t\"github.com/ory/x/errorsx\"\n\t\"github.com/ory/x/otelx\"\n)\n\n// NewIntrospectionRequest initiates token introspection as defined in\n// https://tools.ietf.org/search/rfc7662#section-2.1\n//\n// The protected resource calls the introspection endpoint using an HTTP\n// POST [RFC7231] request with parameters sent as\n// \"application/x-www-form-urlencoded\" data as defined in\n// [W3C.REC-html5-20141028].  The protected resource sends a parameter\n// representing the token along with optional parameters representing\n// additional context that is known by the protected resource to aid the\n// authorization server in its response.\n//\n// * token\n// REQUIRED.  The string value of the token.  For access tokens, this\n// is the \"access_token\" value returned from the token endpoint\n// defined in OAuth 2.0 [RFC6749], Section 5.1.  For refresh tokens,\n// this is the \"refresh_token\" value returned from the token endpoint\n// as defined in OAuth 2.0 [RFC6749], Section 5.1.  Other token types\n// are outside the scope of this specification.\n//\n// * token_type_hint\n// OPTIONAL.  A hint about the type of the token submitted for\n// introspection.  The protected resource MAY pass this parameter to\n// help the authorization server optimize the token lookup.  If the\n// server is unable to locate the token using the given hint, it MUST\n// extend its search across all of its supported token types.  An\n// authorization server MAY ignore this parameter, particularly if it\n// is able to detect the token type automatically.  Values for this\n// field are defined in the \"OAuth Token Type Hints\" registry defined\n// in OAuth Token Revocation [RFC7009].\n//\n// The introspection endpoint MAY accept other OPTIONAL parameters to\n// provide further context to the query.  For instance, an authorization\n// server may desire to know the IP address of the client accessing the\n// protected resource to determine if the correct client is likely to be\n// presenting the token.  The definition of this or any other parameters\n// are outside the scope of this specification, to be defined by service\n// documentation or extensions to this specification.  If the\n// authorization server is unable to determine the state of the token\n// without additional information, it SHOULD return an introspection\n// response indicating the token is not active as described in\n// Section 2.2.\n//\n// To prevent token scanning attacks, the endpoint MUST also require\n// some form of authorization to access this endpoint, such as client\n// authentication as described in OAuth 2.0 [RFC6749] or a separate\n// OAuth 2.0 access token such as the bearer token described in OAuth\n// 2.0 Bearer Token Usage [RFC6750].  The methods of managing and\n// validating these authentication credentials are out of scope of this\n// specification.\n//\n// For example, the following shows a protected resource calling the\n// token introspection endpoint to query about an OAuth 2.0 bearer\n// token.  The protected resource is using a separate OAuth 2.0 bearer\n// token to authorize this call.\n//\n// The following is a non-normative example request:\n//\n//\tPOST /introspect HTTP/1.1\n//\tHost: server.example.com\n//\tAccept: application/json\n//\tContent-Type: application/x-www-form-urlencoded\n//\tAuthorization: Bearer 23410913-abewfq.123483\n//\n//\ttoken=2YotnFZFEjr1zCsicMWpAA\n//\n// In this example, the protected resource uses a client identifier and\n// client secret to authenticate itself to the introspection endpoint.\n// The protected resource also sends a token type hint indicating that\n// it is inquiring about an access token.\n//\n// The following is a non-normative example request:\n//\n//\tPOST /introspect HTTP/1.1\n//\tHost: server.example.com\n//\tAccept: application/json\n//\tContent-Type: application/x-www-form-urlencoded\n//\tAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\n//\n//\ttoken=mF_9.B5f-4.1JqM&token_type_hint=access_token\nfunc (f *Fosite) NewIntrospectionRequest(ctx context.Context, r *http.Request, session Session) (_ IntrospectionResponder, err error) {\n\tctx, span := trace.SpanFromContext(ctx).TracerProvider().Tracer(\"github.com/ory/fosite\").Start(ctx, \"Fosite.NewIntrospectionRequest\")\n\tdefer otelx.End(span, &err)\n\n\tctx = context.WithValue(ctx, RequestContextKey, r)\n\n\tif r.Method != \"POST\" {\n\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrInvalidRequest.WithHintf(\"HTTP method is '%s' but expected 'POST'.\", r.Method))\n\t} else if err := r.ParseMultipartForm(1 << 20); err != nil && err != http.ErrNotMultipart {\n\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrInvalidRequest.WithHint(\"Unable to parse HTTP body, make sure to send a properly formatted form request body.\").WithWrap(err).WithDebug(err.Error()))\n\t} else if len(r.PostForm) == 0 {\n\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrInvalidRequest.WithHint(\"The POST body can not be empty.\"))\n\t}\n\n\ttoken := r.PostForm.Get(\"token\")\n\ttokenTypeHint := r.PostForm.Get(\"token_type_hint\")\n\tscope := r.PostForm.Get(\"scope\")\n\tif clientToken := AccessTokenFromRequest(r); clientToken != \"\" {\n\t\tif token == clientToken {\n\t\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrRequestUnauthorized.WithHint(\"Bearer and introspection token are identical.\"))\n\t\t}\n\n\t\tif tu, _, err := f.IntrospectToken(ctx, clientToken, AccessToken, session.Clone()); err != nil {\n\t\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrRequestUnauthorized.WithHint(\"HTTP Authorization header missing, malformed, or credentials used are invalid.\"))\n\t\t} else if tu != \"\" && tu != AccessToken {\n\t\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrRequestUnauthorized.WithHintf(\"HTTP Authorization header did not provide a token of type 'access_token', got type '%s'.\", tu))\n\t\t}\n\t} else {\n\t\tid, secret, ok := r.BasicAuth()\n\t\tif !ok {\n\t\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrRequestUnauthorized.WithHint(\"HTTP Authorization header missing.\"))\n\t\t}\n\n\t\tclientID, err := url.QueryUnescape(id)\n\t\tif err != nil {\n\t\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrRequestUnauthorized.WithHint(\"Unable to decode OAuth 2.0 Client ID from HTTP basic authorization header, make sure it is properly encoded.\").WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\n\t\tclientSecret, err := url.QueryUnescape(secret)\n\t\tif err != nil {\n\t\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrRequestUnauthorized.WithHint(\"Unable to decode OAuth 2.0 Client Secret from HTTP basic authorization header, make sure it is properly encoded.\").WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\n\t\tclient, err := f.Store.GetClient(ctx, clientID)\n\t\tif err != nil {\n\t\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrRequestUnauthorized.WithHint(\"Unable to find OAuth 2.0 Client from HTTP basic authorization header.\").WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\n\t\t// Enforce client authentication\n\t\tif err := f.checkClientSecret(ctx, client, []byte(clientSecret)); err != nil {\n\t\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrRequestUnauthorized.WithHint(\"OAuth 2.0 Client credentials are invalid.\"))\n\t\t}\n\t}\n\n\ttu, ar, err := f.IntrospectToken(ctx, token, TokenUse(tokenTypeHint), session, RemoveEmpty(strings.Split(scope, \" \"))...)\n\tif err != nil {\n\t\treturn &IntrospectionResponse{Active: false}, errorsx.WithStack(ErrInactiveToken.WithHint(\"An introspection strategy indicated that the token is inactive.\").WithWrap(err).WithDebug(err.Error()))\n\t}\n\taccessTokenType := \"\"\n\n\tif tu == AccessToken {\n\t\taccessTokenType = BearerAccessToken\n\t}\n\n\treturn &IntrospectionResponse{\n\t\tActive:          true,\n\t\tAccessRequester: ar,\n\t\tTokenUse:        tu,\n\t\tAccessTokenType: accessTokenType,\n\t}, nil\n}\n\ntype IntrospectionResponse struct {\n\tActive          bool            `json:\"active\"`\n\tAccessRequester AccessRequester `json:\"extra\"`\n\tTokenUse        TokenUse        `json:\"token_use,omitempty\"`\n\tAccessTokenType string          `json:\"token_type,omitempty\"`\n\tLang            language.Tag    `json:\"-\"`\n}\n\nfunc (r *IntrospectionResponse) IsActive() bool {\n\treturn r.Active\n}\n\nfunc (r *IntrospectionResponse) GetAccessRequester() AccessRequester {\n\treturn r.AccessRequester\n}\n\nfunc (r *IntrospectionResponse) GetTokenUse() TokenUse {\n\treturn r.TokenUse\n}\n\nfunc (r *IntrospectionResponse) GetAccessTokenType() string {\n\treturn r.AccessTokenType\n}\n"
        },
        {
          "name": "introspection_request_handler_test.go",
          "type": "blob",
          "size": 6.849609375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/ory/fosite\"\n\t. \"github.com/ory/fosite\"\n\t\"github.com/ory/fosite/compose\"\n\t\"github.com/ory/fosite/internal\"\n\t\"github.com/ory/fosite/storage\"\n)\n\nfunc TestIntrospectionResponseTokenUse(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tvalidator := internal.NewMockTokenIntrospector(ctrl)\n\tdefer ctrl.Finish()\n\n\tctx := gomock.AssignableToTypeOf(context.WithValue(context.TODO(), ContextKey(\"test\"), nil))\n\n\tconfig := new(Config)\n\tf := compose.ComposeAllEnabled(config, storage.NewExampleStore(), nil).(*Fosite)\n\thttpreq := &http.Request{\n\t\tMethod: \"POST\",\n\t\tHeader: http.Header{\n\t\t\t\"Authorization\": []string{\"bearer some-token\"},\n\t\t},\n\t\tPostForm: url.Values{\n\t\t\t\"token\": []string{\"introspect-token\"},\n\t\t},\n\t}\n\tfor k, c := range []struct {\n\t\tdescription string\n\t\tsetup       func()\n\t\texpectedTU  TokenUse\n\t\texpectedATT string\n\t}{\n\t\t{\n\t\t\tdescription: \"introspecting access token\",\n\t\t\tsetup: func() {\n\t\t\t\tconfig.TokenIntrospectionHandlers = TokenIntrospectionHandlers{validator}\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"some-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), nil)\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"introspect-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(AccessToken, nil)\n\t\t\t},\n\t\t\texpectedATT: BearerAccessToken,\n\t\t\texpectedTU:  AccessToken,\n\t\t},\n\t\t{\n\t\t\tdescription: \"introspecting refresh token\",\n\t\t\tsetup: func() {\n\t\t\t\tconfig.TokenIntrospectionHandlers = TokenIntrospectionHandlers{validator}\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"some-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), nil)\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"introspect-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(RefreshToken, nil)\n\t\t\t},\n\t\t\texpectedATT: \"\",\n\t\t\texpectedTU:  RefreshToken,\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tc.setup()\n\t\t\tres, err := f.NewIntrospectionRequest(context.TODO(), httpreq, &DefaultSession{})\n\t\t\trequire.NoError(t, err)\n\t\t\tassert.Equal(t, c.expectedATT, res.GetAccessTokenType())\n\t\t\tassert.Equal(t, c.expectedTU, res.GetTokenUse())\n\t\t})\n\t}\n}\nfunc TestIntrospectionResponse(t *testing.T) {\n\tr := &fosite.IntrospectionResponse{\n\t\tAccessRequester: fosite.NewAccessRequest(nil),\n\t\tActive:          true,\n\t}\n\n\tassert.Equal(t, r.AccessRequester, r.GetAccessRequester())\n\tassert.Equal(t, r.Active, r.IsActive())\n}\n\nfunc TestNewIntrospectionRequest(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tvalidator := internal.NewMockTokenIntrospector(ctrl)\n\tdefer ctrl.Finish()\n\n\tctx := gomock.AssignableToTypeOf(context.WithValue(context.TODO(), ContextKey(\"test\"), nil))\n\n\tconfig := new(Config)\n\tf := compose.ComposeAllEnabled(config, storage.NewExampleStore(), nil).(*Fosite)\n\thttpreq := &http.Request{\n\t\tMethod: \"POST\",\n\t\tHeader: http.Header{},\n\t\tForm:   url.Values{},\n\t}\n\tnewErr := errors.New(\"asdf\")\n\n\tfor k, c := range []struct {\n\t\tdescription string\n\t\tsetup       func()\n\t\texpectErr   error\n\t\tisActive    bool\n\t}{\n\t\t{\n\t\t\tdescription: \"should fail\",\n\t\t\tsetup: func() {\n\t\t\t},\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should fail\",\n\t\t\tsetup: func() {\n\t\t\t\tconfig.TokenIntrospectionHandlers = TokenIntrospectionHandlers{validator}\n\t\t\t\thttpreq = &http.Request{\n\t\t\t\t\tMethod: \"POST\",\n\t\t\t\t\tHeader: http.Header{\n\t\t\t\t\t\t\"Authorization\": []string{\"bearer some-token\"},\n\t\t\t\t\t},\n\t\t\t\t\tPostForm: url.Values{\n\t\t\t\t\t\t\"token\": []string{\"introspect-token\"},\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"some-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), nil)\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"introspect-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), newErr)\n\t\t\t},\n\t\t\tisActive:  false,\n\t\t\texpectErr: ErrInactiveToken,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should pass\",\n\t\t\tsetup: func() {\n\t\t\t\tconfig.TokenIntrospectionHandlers = TokenIntrospectionHandlers{validator}\n\t\t\t\thttpreq = &http.Request{\n\t\t\t\t\tMethod: \"POST\",\n\t\t\t\t\tHeader: http.Header{\n\t\t\t\t\t\t\"Authorization\": []string{\"bearer some-token\"},\n\t\t\t\t\t},\n\t\t\t\t\tPostForm: url.Values{\n\t\t\t\t\t\t\"token\": []string{\"introspect-token\"},\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"some-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), nil)\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"introspect-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), nil)\n\t\t\t},\n\t\t\tisActive: true,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should pass with basic auth if username and password encoded\",\n\t\t\tsetup: func() {\n\t\t\t\tconfig.TokenIntrospectionHandlers = TokenIntrospectionHandlers{validator}\n\t\t\t\thttpreq = &http.Request{\n\t\t\t\t\tMethod: \"POST\",\n\t\t\t\t\tHeader: http.Header{\n\t\t\t\t\t\t//Basic Authorization with username=encoded:client and password=encoded&password\n\t\t\t\t\t\t\"Authorization\": []string{\"Basic ZW5jb2RlZCUzQWNsaWVudDplbmNvZGVkJTI2cGFzc3dvcmQ=\"},\n\t\t\t\t\t},\n\t\t\t\t\tPostForm: url.Values{\n\t\t\t\t\t\t\"token\": []string{\"introspect-token\"},\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"introspect-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), nil)\n\t\t\t},\n\t\t\tisActive: true,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should pass with basic auth if username and password not encoded\",\n\t\t\tsetup: func() {\n\t\t\t\tconfig.TokenIntrospectionHandlers = TokenIntrospectionHandlers{validator}\n\t\t\t\thttpreq = &http.Request{\n\t\t\t\t\tMethod: \"POST\",\n\t\t\t\t\tHeader: http.Header{\n\t\t\t\t\t\t//Basic Authorization with username=my-client and password=foobar\n\t\t\t\t\t\t\"Authorization\": []string{\"Basic bXktY2xpZW50OmZvb2Jhcg==\"},\n\t\t\t\t\t},\n\t\t\t\t\tPostForm: url.Values{\n\t\t\t\t\t\t\"token\": []string{\"introspect-token\"},\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"introspect-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), nil)\n\t\t\t},\n\t\t\tisActive: true,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should pass with basic auth if username and password not encoded\",\n\t\t\tsetup: func() {\n\t\t\t\tconfig.TokenIntrospectionHandlers = TokenIntrospectionHandlers{validator}\n\t\t\t\thttpreq = &http.Request{\n\t\t\t\t\tMethod: \"POST\",\n\t\t\t\t\tHeader: http.Header{\n\t\t\t\t\t\t//Basic Authorization with username=my-client and password=foobaz\n\t\t\t\t\t\t\"Authorization\": []string{\"Basic bXktY2xpZW50OmZvb2Jheg==\"},\n\t\t\t\t\t},\n\t\t\t\t\tPostForm: url.Values{\n\t\t\t\t\t\t\"token\": []string{\"introspect-token\"},\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tvalidator.EXPECT().IntrospectToken(ctx, \"introspect-token\", gomock.Any(), gomock.Any(), gomock.Any()).Return(TokenUse(\"\"), nil)\n\t\t\t},\n\t\t\tisActive: true,\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tc.setup()\n\t\t\tres, err := f.NewIntrospectionRequest(context.TODO(), httpreq, &DefaultSession{})\n\n\t\t\tif c.expectErr != nil {\n\t\t\t\tassert.EqualError(t, err, c.expectErr.Error())\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\tassert.Equal(t, c.isActive, res.IsActive())\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "introspection_response_writer.go",
          "type": "blob",
          "size": 8.5146484375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/pkg/errors\"\n)\n\n// WriteIntrospectionError responds with token metadata discovered by token introspection as defined in\n// https://tools.ietf.org/search/rfc7662#section-2.2\n//\n// If the protected resource uses OAuth 2.0 client credentials to\n// authenticate to the introspection endpoint and its credentials are\n// invalid, the authorization server responds with an HTTP 401\n// (Unauthorized) as described in Section 5.2 of OAuth 2.0 [RFC6749].\n//\n// If the protected resource uses an OAuth 2.0 bearer token to authorize\n// its call to the introspection endpoint and the token used for\n// authorization does not contain sufficient privileges or is otherwise\n// invalid for this request, the authorization server responds with an\n// HTTP 401 code as described in Section 3 of OAuth 2.0 Bearer Token\n// Usage [RFC6750].\n//\n// Note that a properly formed and authorized query for an inactive or\n// otherwise invalid token (or a token the protected resource is not\n// allowed to know about) is not considered an error response by this\n// specification.  In these cases, the authorization server MUST instead\n// respond with an introspection response with the \"active\" field set to\n// \"false\" as described in Section 2.2.\nfunc (f *Fosite) WriteIntrospectionError(ctx context.Context, rw http.ResponseWriter, err error) {\n\tif err == nil {\n\t\treturn\n\t}\n\n\t// Inactive token errors should never written out as an error.\n\tif !errors.Is(err, ErrInactiveToken) && (errors.Is(err, ErrInvalidRequest) || errors.Is(err, ErrRequestUnauthorized)) {\n\t\tf.writeJsonError(ctx, rw, nil, err)\n\t\treturn\n\t}\n\n\trw.Header().Set(\"Content-Type\", \"application/json;charset=UTF-8\")\n\trw.Header().Set(\"Cache-Control\", \"no-store\")\n\trw.Header().Set(\"Pragma\", \"no-cache\")\n\t_ = json.NewEncoder(rw).Encode(struct {\n\t\tActive bool `json:\"active\"`\n\t}{Active: false})\n}\n\n// WriteIntrospectionResponse responds with an error if token introspection failed as defined in\n// https://tools.ietf.org/search/rfc7662#section-2.3\n//\n// The server responds with a JSON object [RFC7159] in \"application/\n// json\" format with the following top-level members.\n//\n// * active\n// REQUIRED.  Boolean indicator of whether or not the presented token\n// is currently active.  The specifics of a token's \"active\" state\n// will vary depending on the implementation of the authorization\n// server and the information it keeps about its tokens, but a \"true\"\n// value return for the \"active\" property will generally indicate\n// that a given token has been issued by this authorization server,\n// has not been revoked by the resource owner, and is within its\n// given time window of validity (e.g., after its issuance time and\n// before its expiration time).  See Section 4 for information on\n// implementation of such checks.\n//\n// * scope\n// OPTIONAL.  A JSON string containing a space-separated list of\n// scopes associated with this token, in the format described in\n// Section 3.3 of OAuth 2.0 [RFC6749].\n//\n// * client_id\n// OPTIONAL.  Client identifier for the OAuth 2.0 client that\n// requested this token.\n//\n// * username\n// OPTIONAL.  Human-readable identifier for the resource owner who\n// authorized this token.\n//\n// * token_type\n// OPTIONAL.  Type of the token as defined in Section 5.1 of OAuth\n// 2.0 [RFC6749].\n//\n// * exp\n// OPTIONAL.  Integer timestamp, measured in the number of seconds\n// since January 1 1970 UTC, indicating when this token will expire,\n// as defined in JWT [RFC7519].\n//\n// * iat\n// OPTIONAL.  Integer timestamp, measured in the number of seconds\n// since January 1 1970 UTC, indicating when this token was\n// originally issued, as defined in JWT [RFC7519].\n//\n// * nbf\n// OPTIONAL.  Integer timestamp, measured in the number of seconds\n// since January 1 1970 UTC, indicating when this token is not to be\n// used before, as defined in JWT [RFC7519].\n//\n// * sub\n// OPTIONAL.  Subject of the token, as defined in JWT [RFC7519].\n// Usually a machine-readable identifier of the resource owner who\n// authorized this token.\n//\n// * aud\n// OPTIONAL.  Service-specific string identifier or list of string\n// identifiers representing the intended audience for this token, as\n// defined in JWT [RFC7519].\n//\n// * iss\n// OPTIONAL.  String representing the issuer of this token, as\n// defined in JWT [RFC7519].\n//\n// * jti\n// OPTIONAL.  String identifier for the token, as defined in JWT\n// [RFC7519].\n//\n// Specific implementations MAY extend this structure with their own\n// service-specific response names as top-level members of this JSON\n// object.  Response names intended to be used across domains MUST be\n// registered in the \"OAuth Token Introspection Response\" registry\n// defined in Section 3.1.\n//\n// The authorization server MAY respond differently to different\n// protected resources making the same request.  For instance, an\n// authorization server MAY limit which scopes from a given token are\n// returned for each protected resource to prevent a protected resource\n// from learning more about the larger network than is necessary for its\n// operation.\n//\n// The response MAY be cached by the protected resource to improve\n// performance and reduce load on the introspection endpoint, but at the\n// cost of liveness of the information used by the protected resource to\n// make authorization decisions.  See Section 4 for more information\n// regarding the trade off when the response is cached.\n//\n// For example, the following response contains a set of information\n// about an active token:\n//\n// The following is a non-normative example response:\n//\n//\tHTTP/1.1 200 OK\n//\tContent-Type: application/json\n//\n//\t{\n//\t  \"active\": true,\n//\t  \"client_id\": \"l238j323ds-23ij4\",\n//\t  \"username\": \"jdoe\",\n//\t  \"scope\": \"read write dolphin\",\n//\t  \"sub\": \"Z5O3upPC88QrAjx00dis\",\n//\t  \"aud\": \"https://protected.example.net/resource\",\n//\t  \"iss\": \"https://server.example.com/\",\n//\t  \"exp\": 1419356238,\n//\t  \"iat\": 1419350238,\n//\t  \"extension_field\": \"twenty-seven\"\n//\t}\n//\n// If the introspection call is properly authorized but the token is not\n// active, does not exist on this server, or the protected resource is\n// not allowed to introspect this particular token, then the\n// authorization server MUST return an introspection response with the\n// \"active\" field set to \"false\".  Note that to avoid disclosing too\n// much of the authorization server's state to a third party, the\n// authorization server SHOULD NOT include any additional information\n// about an inactive token, including why the token is inactive.\n//\n// The following is a non-normative example response for a token that\n// has been revoked or is otherwise invalid:\n//\n//\tHTTP/1.1 200 OK\n//\tContent-Type: application/json\n//\n//\t{\n//\t  \"active\": false\n//\t}\nfunc (f *Fosite) WriteIntrospectionResponse(ctx context.Context, rw http.ResponseWriter, r IntrospectionResponder) {\n\trw.Header().Set(\"Content-Type\", \"application/json;charset=UTF-8\")\n\trw.Header().Set(\"Cache-Control\", \"no-store\")\n\trw.Header().Set(\"Pragma\", \"no-cache\")\n\n\tif !r.IsActive() {\n\t\t_ = json.NewEncoder(rw).Encode(&struct {\n\t\t\tActive bool `json:\"active\"`\n\t\t}{Active: false})\n\t\treturn\n\t}\n\n\tresponse := map[string]interface{}{\n\t\t\"active\": true,\n\t}\n\n\textraClaimsSession, ok := r.GetAccessRequester().GetSession().(ExtraClaimsSession)\n\tif ok {\n\t\textraClaims := extraClaimsSession.GetExtraClaims()\n\t\tfor name, value := range extraClaims {\n\t\t\tswitch name {\n\t\t\t// We do not allow these to be set through extra claims.\n\t\t\tcase \"exp\", \"client_id\", \"scope\", \"iat\", \"sub\", \"aud\", \"username\":\n\t\t\t\tcontinue\n\t\t\tdefault:\n\t\t\t\tresponse[name] = value\n\t\t\t}\n\t\t}\n\t}\n\n\tif !r.GetAccessRequester().GetSession().GetExpiresAt(AccessToken).IsZero() {\n\t\tresponse[\"exp\"] = r.GetAccessRequester().GetSession().GetExpiresAt(AccessToken).Unix()\n\t}\n\tif r.GetAccessRequester().GetClient().GetID() != \"\" {\n\t\tresponse[\"client_id\"] = r.GetAccessRequester().GetClient().GetID()\n\t}\n\tif len(r.GetAccessRequester().GetGrantedScopes()) > 0 {\n\t\tresponse[\"scope\"] = strings.Join(r.GetAccessRequester().GetGrantedScopes(), \" \")\n\t}\n\tif !r.GetAccessRequester().GetRequestedAt().IsZero() {\n\t\tresponse[\"iat\"] = r.GetAccessRequester().GetRequestedAt().Unix()\n\t}\n\tif r.GetAccessRequester().GetSession().GetSubject() != \"\" {\n\t\tresponse[\"sub\"] = r.GetAccessRequester().GetSession().GetSubject()\n\t}\n\tif len(r.GetAccessRequester().GetGrantedAudience()) > 0 {\n\t\tresponse[\"aud\"] = r.GetAccessRequester().GetGrantedAudience()\n\t}\n\tif r.GetAccessRequester().GetSession().GetUsername() != \"\" {\n\t\tresponse[\"username\"] = r.GetAccessRequester().GetSession().GetUsername()\n\t}\n\n\t_ = json.NewEncoder(rw).Encode(response)\n}\n"
        },
        {
          "name": "introspection_response_writer_test.go",
          "type": "blob",
          "size": 4.7822265625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/ory/x/errorsx\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t. \"github.com/ory/fosite\"\n\t\"github.com/ory/fosite/internal\"\n)\n\nfunc TestWriteIntrospectionError(t *testing.T) {\n\tf := &Fosite{Config: new(Config)}\n\tc := gomock.NewController(t)\n\tdefer c.Finish()\n\n\trw := internal.NewMockResponseWriter(c)\n\trw.EXPECT().WriteHeader(http.StatusUnauthorized)\n\trw.EXPECT().Header().AnyTimes().Return(http.Header{})\n\trw.EXPECT().Write(gomock.Any())\n\tf.WriteIntrospectionError(context.Background(), rw, errorsx.WithStack(ErrRequestUnauthorized))\n\n\trw.EXPECT().WriteHeader(http.StatusBadRequest)\n\trw.EXPECT().Write(gomock.Any())\n\tf.WriteIntrospectionError(context.Background(), rw, errorsx.WithStack(ErrInvalidRequest))\n\n\trw.EXPECT().Write([]byte(\"{\\\"active\\\":false}\\n\"))\n\tf.WriteIntrospectionError(context.Background(), rw, errors.New(\"\"))\n\n\trw.EXPECT().Write([]byte(\"{\\\"active\\\":false}\\n\"))\n\tf.WriteIntrospectionError(context.Background(), rw, errorsx.WithStack(ErrInactiveToken.WithWrap(ErrRequestUnauthorized)))\n\n\tf.WriteIntrospectionError(context.Background(), rw, nil)\n}\n\nfunc TestWriteIntrospectionResponse(t *testing.T) {\n\tf := new(Fosite)\n\tc := gomock.NewController(t)\n\tdefer c.Finish()\n\n\trw := internal.NewMockResponseWriter(c)\n\trw.EXPECT().Write(gomock.Any()).AnyTimes()\n\trw.EXPECT().Header().AnyTimes().Return(http.Header{})\n\tf.WriteIntrospectionResponse(context.Background(), rw, &IntrospectionResponse{\n\t\tAccessRequester: NewAccessRequest(nil),\n\t})\n}\n\nfunc TestWriteIntrospectionResponseBody(t *testing.T) {\n\tf := new(Fosite)\n\tires := &IntrospectionResponse{}\n\trw := httptest.NewRecorder()\n\n\tfor _, c := range []struct {\n\t\tdescription string\n\t\tsetup       func()\n\t\tactive      bool\n\t\thasExp      bool\n\t\thasExtra    bool\n\t}{\n\t\t{\n\t\t\tdescription: \"should success for not expired access token\",\n\t\t\tsetup: func() {\n\t\t\t\tires.Active = true\n\t\t\t\tires.TokenUse = AccessToken\n\t\t\t\tsess := &DefaultSession{}\n\t\t\t\tsess.SetExpiresAt(ires.TokenUse, time.Now().Add(time.Hour*2))\n\t\t\t\tires.AccessRequester = NewAccessRequest(sess)\n\t\t\t},\n\t\t\tactive:   true,\n\t\t\thasExp:   true,\n\t\t\thasExtra: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should success for expired access token\",\n\t\t\tsetup: func() {\n\t\t\t\tires.Active = false\n\t\t\t\tires.TokenUse = AccessToken\n\t\t\t\tsess := &DefaultSession{}\n\t\t\t\tsess.SetExpiresAt(ires.TokenUse, time.Now().Add(-time.Hour*2))\n\t\t\t\tires.AccessRequester = NewAccessRequest(sess)\n\t\t\t},\n\t\t\tactive:   false,\n\t\t\thasExp:   false,\n\t\t\thasExtra: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should success for ExpiresAt not set access token\",\n\t\t\tsetup: func() {\n\t\t\t\tires.Active = true\n\t\t\t\tires.TokenUse = AccessToken\n\t\t\t\tsess := &DefaultSession{}\n\t\t\t\tsess.SetExpiresAt(ires.TokenUse, time.Time{})\n\t\t\t\tires.AccessRequester = NewAccessRequest(sess)\n\t\t\t},\n\t\t\tactive:   true,\n\t\t\thasExp:   false,\n\t\t\thasExtra: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"should output extra claims\",\n\t\t\tsetup: func() {\n\t\t\t\tires.Active = true\n\t\t\t\tires.TokenUse = AccessToken\n\t\t\t\tsess := &DefaultSession{}\n\t\t\t\tsess.GetExtraClaims()[\"extra\"] = \"foobar\"\n\t\t\t\t// We try to set these, but they should be ignored.\n\t\t\t\tfor _, field := range []string{\"exp\", \"client_id\", \"scope\", \"iat\", \"sub\", \"aud\", \"username\"} {\n\t\t\t\t\tsess.GetExtraClaims()[field] = \"invalid\"\n\t\t\t\t}\n\t\t\t\tsess.SetExpiresAt(ires.TokenUse, time.Time{})\n\t\t\t\tires.AccessRequester = NewAccessRequest(sess)\n\t\t\t},\n\t\t\tactive:   true,\n\t\t\thasExp:   false,\n\t\t\thasExtra: true,\n\t\t},\n\t} {\n\t\tt.Run(c.description, func(t *testing.T) {\n\t\t\tc.setup()\n\t\t\tf.WriteIntrospectionResponse(context.Background(), rw, ires)\n\t\t\tvar params struct {\n\t\t\t\tActive   bool   `json:\"active\"`\n\t\t\t\tExp      *int64 `json:\"exp\"`\n\t\t\t\tIat      *int64 `json:\"iat\"`\n\t\t\t\tExtra    string `json:\"extra\"`\n\t\t\t\tClientId string `json:\"client_id\"`\n\t\t\t\tScope    string `json:\"scope\"`\n\t\t\t\tSubject  string `json:\"sub\"`\n\t\t\t\tAudience string `json:\"aud\"`\n\t\t\t\tUsername string `json:\"username\"`\n\t\t\t}\n\t\t\tassert.Equal(t, 200, rw.Code)\n\t\t\terr := json.NewDecoder(rw.Body).Decode(&params)\n\t\t\trequire.NoError(t, err)\n\t\t\tassert.Equal(t, c.active, params.Active)\n\t\t\tif c.active {\n\t\t\t\tassert.NotNil(t, params.Iat)\n\t\t\t\tif c.hasExp {\n\t\t\t\t\tassert.NotNil(t, params.Exp)\n\t\t\t\t} else {\n\t\t\t\t\tassert.Nil(t, params.Exp)\n\t\t\t\t}\n\t\t\t\tif c.hasExtra {\n\t\t\t\t\tassert.Equal(t, params.Extra, \"foobar\")\n\t\t\t\t} else {\n\t\t\t\t\tassert.Empty(t, params.Extra)\n\t\t\t\t}\n\t\t\t\tassert.NotEqual(t, \"invalid\", params.Exp)\n\t\t\t\tassert.NotEqual(t, \"invalid\", params.ClientId)\n\t\t\t\tassert.NotEqual(t, \"invalid\", params.Scope)\n\t\t\t\tassert.NotEqual(t, \"invalid\", params.Iat)\n\t\t\t\tassert.NotEqual(t, \"invalid\", params.Subject)\n\t\t\t\tassert.NotEqual(t, \"invalid\", params.Audience)\n\t\t\t\tassert.NotEqual(t, \"invalid\", params.Username)\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "oauth2.go",
          "type": "blob",
          "size": 15.03515625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"golang.org/x/text/language\"\n)\n\ntype TokenUse = TokenType\n\ntype TokenType string\n\ntype GrantType string\n\nconst (\n\tAccessToken   TokenType = \"access_token\"\n\tRefreshToken  TokenType = \"refresh_token\"\n\tAuthorizeCode TokenType = \"authorize_code\"\n\tIDToken       TokenType = \"id_token\"\n\t// PushedAuthorizeRequestContext represents the PAR context object\n\tPushedAuthorizeRequestContext TokenType = \"par_context\"\n\n\tGrantTypeImplicit          GrantType = \"implicit\"\n\tGrantTypeRefreshToken      GrantType = \"refresh_token\"\n\tGrantTypeAuthorizationCode GrantType = \"authorization_code\"\n\tGrantTypePassword          GrantType = \"password\"\n\tGrantTypeClientCredentials GrantType = \"client_credentials\"\n\tGrantTypeJWTBearer         GrantType = \"urn:ietf:params:oauth:grant-type:jwt-bearer\" //nolint:gosec // this is not a hardcoded credential\n\n\tBearerAccessToken string = \"bearer\"\n)\n\n// OAuth2Provider is an interface that enables you to write OAuth2 handlers with only a few lines of code.\n// Check Fosite for an implementation of this interface.\ntype OAuth2Provider interface {\n\t// NewAuthorizeRequest returns an AuthorizeRequest.\n\t//\n\t// The following specs must be considered in any implementation of this method:\n\t// * https://tools.ietf.org/html/rfc6749#section-3.1\n\t//\t Extension response types MAY contain a space-delimited (%x20) list of\n\t//\t values, where the order of values does not matter (e.g., response\n\t//\t type \"a b\" is the same as \"b a\").  The meaning of such composite\n\t//\t response types is defined by their respective specifications.\n\t// * https://tools.ietf.org/html/rfc6749#section-3.1.2\n\t//   The redirection endpoint URI MUST be an absolute URI as defined by\n\t//   [RFC3986] Section 4.3.  The endpoint URI MAY include an\n\t//   \"application/x-www-form-urlencoded\" formatted (per Appendix B) query\n\t//   component ([RFC3986] Section 3.4), which MUST be retained when adding\n\t//   additional query parameters.  The endpoint URI MUST NOT include a\n\t//   fragment component.\n\t// * https://tools.ietf.org/html/rfc6749#section-3.1.2.2 (everything MUST be implemented)\n\tNewAuthorizeRequest(ctx context.Context, req *http.Request) (AuthorizeRequester, error)\n\n\t// NewAuthorizeResponse iterates through all response type handlers and returns their result or\n\t// ErrUnsupportedResponseType if none of the handler's were able to handle it.\n\t//\n\t// The following specs must be considered in any implementation of this method:\n\t// * https://tools.ietf.org/html/rfc6749#section-3.1.1\n\t//\t Extension response types MAY contain a space-delimited (%x20) list of\n\t//\t values, where the order of values does not matter (e.g., response\n\t//\t type \"a b\" is the same as \"b a\").  The meaning of such composite\n\t//\t response types is defined by their respective specifications.\n\t//\t If an authorization request is missing the \"response_type\" parameter,\n\t//\t or if the response type is not understood, the authorization server\n\t//\t MUST return an error response as described in Section 4.1.2.1.\n\tNewAuthorizeResponse(ctx context.Context, requester AuthorizeRequester, session Session) (AuthorizeResponder, error)\n\n\t// WriteAuthorizeError returns the error codes to the redirection endpoint or shows the error to the user, if no valid\n\t// redirect uri was given. Implements rfc6749#section-4.1.2.1\n\t//\n\t// The following specs must be considered in any implementation of this method:\n\t// * https://tools.ietf.org/html/rfc6749#section-3.1.2\n\t//   The redirection endpoint URI MUST be an absolute URI as defined by\n\t//   [RFC3986] Section 4.3.  The endpoint URI MAY include an\n\t//   \"application/x-www-form-urlencoded\" formatted (per Appendix B) query\n\t//   component ([RFC3986] Section 3.4), which MUST be retained when adding\n\t//   additional query parameters.  The endpoint URI MUST NOT include a\n\t//   fragment component.\n\t// * https://tools.ietf.org/html/rfc6749#section-4.1.2.1 (everything)\n\t// * https://tools.ietf.org/html/rfc6749#section-3.1.2.2 (everything MUST be implemented)\n\tWriteAuthorizeError(ctx context.Context, rw http.ResponseWriter, requester AuthorizeRequester, err error)\n\n\t// WriteAuthorizeResponse persists the AuthorizeSession in the store and redirects the user agent to the provided\n\t// redirect url or returns an error if storage failed.\n\t//\n\t// The following specs must be considered in any implementation of this method:\n\t// * https://tools.ietf.org/html/rfc6749#rfc6749#section-4.1.2.1\n\t//   After completing its interaction with the resource owner, the\n\t//   authorization server directs the resource owner's user-agent back to\n\t//   the client.  The authorization server redirects the user-agent to the\n\t//   client's redirection endpoint previously established with the\n\t//   authorization server during the client registration process or when\n\t//   making the authorization request.\n\t// * https://tools.ietf.org/html/rfc6749#section-3.1.2.2 (everything MUST be implemented)\n\tWriteAuthorizeResponse(ctx context.Context, rw http.ResponseWriter, requester AuthorizeRequester, responder AuthorizeResponder)\n\n\t// NewAccessRequest creates a new access request object and validates\n\t// various parameters.\n\t//\n\t// The following specs must be considered in any implementation of this method:\n\t// * https://tools.ietf.org/html/rfc6749#section-3.2 (everything)\n\t// * https://tools.ietf.org/html/rfc6749#section-3.2.1 (everything)\n\t//\n\t// Furthermore the registered handlers should implement their specs accordingly.\n\tNewAccessRequest(ctx context.Context, req *http.Request, session Session) (AccessRequester, error)\n\n\t// NewAccessResponse creates a new access response and validates that access_token and token_type are set.\n\t//\n\t// The following specs must be considered in any implementation of this method:\n\t// https://tools.ietf.org/html/rfc6749#section-5.1\n\tNewAccessResponse(ctx context.Context, requester AccessRequester) (AccessResponder, error)\n\n\t// WriteAccessError writes an access request error response.\n\t//\n\t// The following specs must be considered in any implementation of this method:\n\t// * https://tools.ietf.org/html/rfc6749#section-5.2 (everything)\n\tWriteAccessError(ctx context.Context, rw http.ResponseWriter, requester AccessRequester, err error)\n\n\t// WriteAccessResponse writes the access response.\n\t//\n\t// The following specs must be considered in any implementation of this method:\n\t// https://tools.ietf.org/html/rfc6749#section-5.1\n\tWriteAccessResponse(ctx context.Context, rw http.ResponseWriter, requester AccessRequester, responder AccessResponder)\n\n\t// NewRevocationRequest handles incoming token revocation requests and validates various parameters.\n\t//\n\t// The following specs must be considered in any implementation of this method:\n\t// https://tools.ietf.org/html/rfc7009#section-2.1\n\tNewRevocationRequest(ctx context.Context, r *http.Request) error\n\n\t// WriteRevocationResponse writes the revoke response.\n\t//\n\t// The following specs must be considered in any implementation of this method:\n\t// https://tools.ietf.org/html/rfc7009#section-2.2\n\tWriteRevocationResponse(ctx context.Context, rw http.ResponseWriter, err error)\n\n\t// IntrospectToken returns token metadata, if the token is valid. Tokens generated by the authorization endpoint,\n\t// such as the authorization code, can not be introspected.\n\tIntrospectToken(ctx context.Context, token string, tokenUse TokenUse, session Session, scope ...string) (TokenUse, AccessRequester, error)\n\n\t// NewIntrospectionRequest initiates token introspection as defined in\n\t// https://tools.ietf.org/search/rfc7662#section-2.1\n\tNewIntrospectionRequest(ctx context.Context, r *http.Request, session Session) (IntrospectionResponder, error)\n\n\t// WriteIntrospectionError responds with an error if token introspection failed as defined in\n\t// https://tools.ietf.org/search/rfc7662#section-2.3\n\tWriteIntrospectionError(ctx context.Context, rw http.ResponseWriter, err error)\n\n\t// WriteIntrospectionResponse responds with token metadata discovered by token introspection as defined in\n\t// https://tools.ietf.org/search/rfc7662#section-2.2\n\tWriteIntrospectionResponse(ctx context.Context, rw http.ResponseWriter, r IntrospectionResponder)\n\n\t// NewPushedAuthorizeRequest validates the request and produces an AuthorizeRequester object that can be stored\n\tNewPushedAuthorizeRequest(ctx context.Context, r *http.Request) (AuthorizeRequester, error)\n\n\t// NewPushedAuthorizeResponse executes the handlers and builds the response\n\tNewPushedAuthorizeResponse(ctx context.Context, ar AuthorizeRequester, session Session) (PushedAuthorizeResponder, error)\n\n\t// WritePushedAuthorizeResponse writes the PAR response\n\tWritePushedAuthorizeResponse(ctx context.Context, rw http.ResponseWriter, ar AuthorizeRequester, resp PushedAuthorizeResponder)\n\n\t// WritePushedAuthorizeError writes the PAR error\n\tWritePushedAuthorizeError(ctx context.Context, rw http.ResponseWriter, ar AuthorizeRequester, err error)\n}\n\n// IntrospectionResponder is the response object that will be returned when token introspection was successful,\n// for example when the client is allowed to perform token introspection. Refer to\n// https://tools.ietf.org/search/rfc7662#section-2.2 for more details.\ntype IntrospectionResponder interface {\n\t// IsActive returns true if the introspected token is active and false otherwise.\n\tIsActive() bool\n\n\t// AccessRequester returns nil when IsActive() is false and the original access request object otherwise.\n\tGetAccessRequester() AccessRequester\n\n\t// GetTokenUse optionally returns the type of the token that was introspected. This could be \"access_token\", \"refresh_token\",\n\t// or if the type can not be determined an empty string.\n\tGetTokenUse() TokenUse\n\n\t//GetAccessTokenType optionally returns the type of the access token that was introspected. This could be \"bearer\", \"mac\",\n\t// or empty string if the type of the token is refresh token.\n\tGetAccessTokenType() string\n}\n\n// Requester is an abstract interface for handling requests in Fosite.\ntype Requester interface {\n\t// SetID sets the unique identifier.\n\tSetID(id string)\n\n\t// GetID returns a unique identifier.\n\tGetID() string\n\n\t// GetRequestedAt returns the time the request was created.\n\tGetRequestedAt() (requestedAt time.Time)\n\n\t// GetClient returns the request's client.\n\tGetClient() (client Client)\n\n\t// GetRequestedScopes returns the request's scopes.\n\tGetRequestedScopes() (scopes Arguments)\n\n\t// GetRequestedAudience returns the requested audiences for this request.\n\tGetRequestedAudience() (audience Arguments)\n\n\t// SetRequestedScopes sets the request's scopes.\n\tSetRequestedScopes(scopes Arguments)\n\n\t// SetRequestedAudience sets the requested audience.\n\tSetRequestedAudience(audience Arguments)\n\n\t// AppendRequestedScope appends a scope to the request.\n\tAppendRequestedScope(scope string)\n\n\t// GetGrantScopes returns all granted scopes.\n\tGetGrantedScopes() (grantedScopes Arguments)\n\n\t// GetGrantedAudience returns all granted audiences.\n\tGetGrantedAudience() (grantedAudience Arguments)\n\n\t// GrantScope marks a request's scope as granted.\n\tGrantScope(scope string)\n\n\t// GrantAudience marks a request's audience as granted.\n\tGrantAudience(audience string)\n\n\t// GetSession returns a pointer to the request's session or nil if none is set.\n\tGetSession() (session Session)\n\n\t// SetSession sets the request's session pointer.\n\tSetSession(session Session)\n\n\t// GetRequestForm returns the request's form input.\n\tGetRequestForm() url.Values\n\n\t// Merge merges the argument into the method receiver.\n\tMerge(requester Requester)\n\n\t// Sanitize returns a sanitized clone of the request which can be used for storage.\n\tSanitize(allowedParameters []string) Requester\n}\n\n// AccessRequester is a token endpoint's request context.\ntype AccessRequester interface {\n\t// GetGrantType returns the requests grant type.\n\tGetGrantTypes() (grantTypes Arguments)\n\n\tRequester\n}\n\n// AuthorizeRequester is an authorize endpoint's request context.\ntype AuthorizeRequester interface {\n\t// GetResponseTypes returns the requested response types\n\tGetResponseTypes() (responseTypes Arguments)\n\n\t// SetResponseTypeHandled marks a response_type (e.g. token or code) as handled indicating that the response type\n\t// is supported.\n\tSetResponseTypeHandled(responseType string)\n\n\t// DidHandleAllResponseTypes returns if all requested response types have been handled correctly\n\tDidHandleAllResponseTypes() (didHandle bool)\n\n\t// GetRedirectURI returns the requested redirect URI\n\tGetRedirectURI() (redirectURL *url.URL)\n\n\t// IsRedirectURIValid returns false if the redirect is not rfc-conform (i.e. missing client, not on white list,\n\t// or malformed)\n\tIsRedirectURIValid() (isValid bool)\n\n\t// GetState returns the request's state.\n\tGetState() (state string)\n\n\t// GetResponseMode returns response_mode of the authorization request\n\tGetResponseMode() ResponseModeType\n\n\t// SetDefaultResponseMode sets default response mode for a response type in a flow\n\tSetDefaultResponseMode(responseMode ResponseModeType)\n\n\t// GetDefaultResponseMode gets default response mode for a response type in a flow\n\tGetDefaultResponseMode() ResponseModeType\n\n\tRequester\n}\n\n// AccessResponder is a token endpoint's response.\ntype AccessResponder interface {\n\t// SetExtra sets a key value pair for the access response.\n\tSetExtra(key string, value interface{})\n\n\t// GetExtra returns a key's value.\n\tGetExtra(key string) interface{}\n\n\tSetExpiresIn(time.Duration)\n\n\tSetScopes(scopes Arguments)\n\n\t// SetAccessToken sets the responses mandatory access token.\n\tSetAccessToken(token string)\n\n\t// SetTokenType set's the responses mandatory token type\n\tSetTokenType(tokenType string)\n\n\t// SetAccessToken returns the responses access token.\n\tGetAccessToken() (token string)\n\n\t// GetTokenType returns the responses token type.\n\tGetTokenType() (token string)\n\n\t// ToMap converts the response to a map.\n\tToMap() map[string]interface{}\n}\n\n// AuthorizeResponder is an authorization endpoint's response.\ntype AuthorizeResponder interface {\n\t// GetCode returns the response's authorize code if set.\n\tGetCode() string\n\n\t// GetHeader returns the response's header\n\tGetHeader() (header http.Header)\n\n\t// AddHeader adds an header key value pair to the response\n\tAddHeader(key, value string)\n\n\t// GetParameters returns the response's parameters\n\tGetParameters() (query url.Values)\n\n\t// AddParameter adds key value pair to the response\n\tAddParameter(key, value string)\n}\n\n// PushedAuthorizeResponder is the response object for PAR\ntype PushedAuthorizeResponder interface {\n\t// GetRequestURI returns the request_uri\n\tGetRequestURI() string\n\t// SetRequestURI sets the request_uri\n\tSetRequestURI(requestURI string)\n\t// GetExpiresIn gets the expires_in\n\tGetExpiresIn() int\n\t// SetExpiresIn sets the expires_in\n\tSetExpiresIn(seconds int)\n\n\t// GetHeader returns the response's header\n\tGetHeader() (header http.Header)\n\n\t// AddHeader adds an header key value pair to the response\n\tAddHeader(key, value string)\n\n\t// SetExtra sets a key value pair for the response.\n\tSetExtra(key string, value interface{})\n\n\t// GetExtra returns a key's value.\n\tGetExtra(key string) interface{}\n\n\t// ToMap converts the response to a map.\n\tToMap() map[string]interface{}\n}\n\n// G11NContext is the globalization context\ntype G11NContext interface {\n\t// GetLang returns the current language in the context\n\tGetLang() language.Tag\n}\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 65.5771484375,
          "content": "{\n  \"name\": \"fosite\",\n  \"version\": \"0.0.0\",\n  \"lockfileVersion\": 2,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"devDependencies\": {\n        \"license-checker\": \"^25.0.1\",\n        \"ory-prettier-styles\": \"1.3.0\",\n        \"prettier\": \"2.7.1\",\n        \"prettier-plugin-packagejson\": \"2.2.18\"\n      }\n    },\n    \"node_modules/@nodelib/fs.scandir\": {\n      \"version\": \"2.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz\",\n      \"integrity\": \"sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@nodelib/fs.stat\": \"2.0.5\",\n        \"run-parallel\": \"^1.1.9\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@nodelib/fs.stat\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz\",\n      \"integrity\": \"sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@nodelib/fs.walk\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz\",\n      \"integrity\": \"sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@nodelib/fs.scandir\": \"2.1.5\",\n        \"fastq\": \"^1.6.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/@types/glob\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@types/glob/-/glob-7.2.0.tgz\",\n      \"integrity\": \"sha512-ZUxbzKl0IfJILTS6t7ip5fQQM/J3TJYubDm3nMbgubNNYS62eXeUpoLUC8/7fJNiFYHTrGPQn7hspDUzIHX3UA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@types/minimatch\": \"*\",\n        \"@types/node\": \"*\"\n      }\n    },\n    \"node_modules/@types/minimatch\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/@types/minimatch/-/minimatch-5.1.2.tgz\",\n      \"integrity\": \"sha512-K0VQKziLUWkVKiRVrx4a40iPaxTUefQmjtkQofBkYRcoaaL/8rhwDWww9qWbrgicNOgnpIsMxyNIUM4+n6dUIA==\",\n      \"dev\": true\n    },\n    \"node_modules/@types/node\": {\n      \"version\": \"18.7.15\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-18.7.15.tgz\",\n      \"integrity\": \"sha512-XnjpaI8Bgc3eBag2Aw4t2Uj/49lLBSStHWfqKvIuXD7FIrZyMLWp8KuAFHAqxMZYTF9l08N1ctUn9YNybZJVmQ==\",\n      \"dev\": true\n    },\n    \"node_modules/abbrev\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz\",\n      \"integrity\": \"sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==\",\n      \"dev\": true\n    },\n    \"node_modules/ansi-styles\": {\n      \"version\": \"3.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz\",\n      \"integrity\": \"sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"color-convert\": \"^1.9.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/array-find-index\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz\",\n      \"integrity\": \"sha512-M1HQyIXcBGtVywBt8WVdim+lrNaK7VHp99Qt5pSNziXznKHViIBbXWtfRTpEFpF/c4FdfxNAsCCwPp5phBYJtw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/array-union\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz\",\n      \"integrity\": \"sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/asap\": {\n      \"version\": \"2.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/asap/-/asap-2.0.6.tgz\",\n      \"integrity\": \"sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==\",\n      \"dev\": true\n    },\n    \"node_modules/balanced-match\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\n      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n      \"dev\": true\n    },\n    \"node_modules/brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"balanced-match\": \"^1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"node_modules/braces\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\",\n      \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"fill-range\": \"^7.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/chalk\": {\n      \"version\": \"2.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz\",\n      \"integrity\": \"sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ansi-styles\": \"^3.2.1\",\n        \"escape-string-regexp\": \"^1.0.5\",\n        \"supports-color\": \"^5.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/color-convert\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz\",\n      \"integrity\": \"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"color-name\": \"1.1.3\"\n      }\n    },\n    \"node_modules/color-name\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz\",\n      \"integrity\": \"sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==\",\n      \"dev\": true\n    },\n    \"node_modules/concat-map\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n      \"integrity\": \"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\",\n      \"dev\": true\n    },\n    \"node_modules/debug\": {\n      \"version\": \"3.2.7\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.2.7.tgz\",\n      \"integrity\": \"sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ms\": \"^2.1.1\"\n      }\n    },\n    \"node_modules/debuglog\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz\",\n      \"integrity\": \"sha512-syBZ+rnAK3EgMsH2aYEOLUW7mZSY9Gb+0wUMCFsZvcmiz+HigA0LOcq/HoQqVuGG+EKykunc7QG2bzrponfaSw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/detect-indent\": {\n      \"version\": \"6.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/detect-indent/-/detect-indent-6.1.0.tgz\",\n      \"integrity\": \"sha512-reYkTUJAZb9gUuZ2RvVCNhVHdg62RHnJ7WJl8ftMi4diZ6NWlciOzQN88pUhSELEwflJht4oQDv0F0BMlwaYtA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/detect-newline\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz\",\n      \"integrity\": \"sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/dezalgo\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz\",\n      \"integrity\": \"sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"asap\": \"^2.0.0\",\n        \"wrappy\": \"1\"\n      }\n    },\n    \"node_modules/dir-glob\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz\",\n      \"integrity\": \"sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"path-type\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/escape-string-regexp\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\n      \"integrity\": \"sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.8.0\"\n      }\n    },\n    \"node_modules/fast-glob\": {\n      \"version\": \"3.2.11\",\n      \"resolved\": \"https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.11.tgz\",\n      \"integrity\": \"sha512-xrO3+1bxSo3ZVHAnqzyuewYT6aMFHRAd4Kcs92MAonjwQZLsK9d0SF1IyQ3k5PoirxTW0Oe/RqFgMQ6TcNE5Ew==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@nodelib/fs.stat\": \"^2.0.2\",\n        \"@nodelib/fs.walk\": \"^1.2.3\",\n        \"glob-parent\": \"^5.1.2\",\n        \"merge2\": \"^1.3.0\",\n        \"micromatch\": \"^4.0.4\"\n      },\n      \"engines\": {\n        \"node\": \">=8.6.0\"\n      }\n    },\n    \"node_modules/fastq\": {\n      \"version\": \"1.13.0\",\n      \"resolved\": \"https://registry.npmjs.org/fastq/-/fastq-1.13.0.tgz\",\n      \"integrity\": \"sha512-YpkpUnK8od0o1hmeSc7UUs/eB/vIPWJYjKck2QKIzAf71Vm1AAQ3EbuZB3g2JIy+pg+ERD0vqI79KyZiB2e2Nw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"reusify\": \"^1.0.4\"\n      }\n    },\n    \"node_modules/fill-range\": {\n      \"version\": \"7.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\",\n      \"integrity\": \"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"to-regex-range\": \"^5.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/fs.realpath\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\n      \"integrity\": \"sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==\",\n      \"dev\": true\n    },\n    \"node_modules/function-bind\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz\",\n      \"integrity\": \"sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==\",\n      \"dev\": true\n    },\n    \"node_modules/git-hooks-list\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/git-hooks-list/-/git-hooks-list-1.0.3.tgz\",\n      \"integrity\": \"sha512-Y7wLWcrLUXwk2noSka166byGCvhMtDRpgHdzCno1UQv/n/Hegp++a2xBWJL1lJarnKD3SWaljD+0z1ztqxuKyQ==\",\n      \"dev\": true,\n      \"funding\": {\n        \"url\": \"https://github.com/fisker/git-hooks-list?sponsor=1\"\n      }\n    },\n    \"node_modules/glob\": {\n      \"version\": \"7.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\n      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"fs.realpath\": \"^1.0.0\",\n        \"inflight\": \"^1.0.4\",\n        \"inherits\": \"2\",\n        \"minimatch\": \"^3.1.1\",\n        \"once\": \"^1.3.0\",\n        \"path-is-absolute\": \"^1.0.0\"\n      },\n      \"engines\": {\n        \"node\": \"*\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/isaacs\"\n      }\n    },\n    \"node_modules/glob-parent\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\n      \"integrity\": \"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-glob\": \"^4.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      }\n    },\n    \"node_modules/globby\": {\n      \"version\": \"10.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/globby/-/globby-10.0.0.tgz\",\n      \"integrity\": \"sha512-3LifW9M4joGZasyYPz2A1U74zbC/45fvpXUvO/9KbSa+VV0aGZarWkfdgKyR9sExNP0t0x0ss/UMJpNpcaTspw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@types/glob\": \"^7.1.1\",\n        \"array-union\": \"^2.1.0\",\n        \"dir-glob\": \"^3.0.1\",\n        \"fast-glob\": \"^3.0.3\",\n        \"glob\": \"^7.1.3\",\n        \"ignore\": \"^5.1.1\",\n        \"merge2\": \"^1.2.3\",\n        \"slash\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/graceful-fs\": {\n      \"version\": \"4.2.10\",\n      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.10.tgz\",\n      \"integrity\": \"sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA==\",\n      \"dev\": true\n    },\n    \"node_modules/has\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/has/-/has-1.0.3.tgz\",\n      \"integrity\": \"sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"function-bind\": \"^1.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 0.4.0\"\n      }\n    },\n    \"node_modules/has-flag\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz\",\n      \"integrity\": \"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/hosted-git-info\": {\n      \"version\": \"2.8.9\",\n      \"resolved\": \"https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz\",\n      \"integrity\": \"sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==\",\n      \"dev\": true\n    },\n    \"node_modules/ignore\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz\",\n      \"integrity\": \"sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 4\"\n      }\n    },\n    \"node_modules/inflight\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\n      \"integrity\": \"sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"once\": \"^1.3.0\",\n        \"wrappy\": \"1\"\n      }\n    },\n    \"node_modules/inherits\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\",\n      \"dev\": true\n    },\n    \"node_modules/is-core-module\": {\n      \"version\": \"2.11.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-core-module/-/is-core-module-2.11.0.tgz\",\n      \"integrity\": \"sha512-RRjxlvLDkD1YJwDbroBHMb+cukurkDWNyHx7D3oNB5x9rb5ogcksMC5wHCadcXoo67gVr/+3GFySh3134zi6rw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"has\": \"^1.0.3\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/is-extglob\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\n      \"integrity\": \"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-glob\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\",\n      \"integrity\": \"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-extglob\": \"^2.1.1\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/is-number\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n      \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.12.0\"\n      }\n    },\n    \"node_modules/is-plain-obj\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-2.1.0.tgz\",\n      \"integrity\": \"sha512-YWnfyRwxL/+SsrWYfOpUtz5b3YD+nyfkHvjbcanzk8zgyO4ASD67uVMRt8k5bM4lLMDnXfriRhOpemw+NfT1eA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/json-parse-even-better-errors\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz\",\n      \"integrity\": \"sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==\",\n      \"dev\": true\n    },\n    \"node_modules/license-checker\": {\n      \"version\": \"25.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/license-checker/-/license-checker-25.0.1.tgz\",\n      \"integrity\": \"sha512-mET5AIwl7MR2IAKYYoVBBpV0OnkKQ1xGj2IMMeEFIs42QAkEVjRtFZGWmQ28WeU7MP779iAgOaOy93Mn44mn6g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"chalk\": \"^2.4.1\",\n        \"debug\": \"^3.1.0\",\n        \"mkdirp\": \"^0.5.1\",\n        \"nopt\": \"^4.0.1\",\n        \"read-installed\": \"~4.0.3\",\n        \"semver\": \"^5.5.0\",\n        \"spdx-correct\": \"^3.0.0\",\n        \"spdx-expression-parse\": \"^3.0.0\",\n        \"spdx-satisfies\": \"^4.0.0\",\n        \"treeify\": \"^1.1.0\"\n      },\n      \"bin\": {\n        \"license-checker\": \"bin/license-checker\"\n      }\n    },\n    \"node_modules/merge2\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz\",\n      \"integrity\": \"sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 8\"\n      }\n    },\n    \"node_modules/micromatch\": {\n      \"version\": \"4.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz\",\n      \"integrity\": \"sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"braces\": \"^3.0.2\",\n        \"picomatch\": \"^2.3.1\"\n      },\n      \"engines\": {\n        \"node\": \">=8.6\"\n      }\n    },\n    \"node_modules/minimatch\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"brace-expansion\": \"^1.1.7\"\n      },\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/minimist\": {\n      \"version\": \"1.2.7\",\n      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.7.tgz\",\n      \"integrity\": \"sha512-bzfL1YUZsP41gmu/qjrEk0Q6i2ix/cVeAhbCbqH9u3zYutS1cLg00qhrD0M2MVdCcx4Sc0UpP2eBWo9rotpq6g==\",\n      \"dev\": true,\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/mkdirp\": {\n      \"version\": \"0.5.6\",\n      \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz\",\n      \"integrity\": \"sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"minimist\": \"^1.2.6\"\n      },\n      \"bin\": {\n        \"mkdirp\": \"bin/cmd.js\"\n      }\n    },\n    \"node_modules/ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n      \"dev\": true\n    },\n    \"node_modules/nopt\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/nopt/-/nopt-4.0.3.tgz\",\n      \"integrity\": \"sha512-CvaGwVMztSMJLOeXPrez7fyfObdZqNUK1cPAEzLHrTybIua9pMdmmPR5YwtfNftIOMv3DPUhFaxsZMNTQO20Kg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"abbrev\": \"1\",\n        \"osenv\": \"^0.1.4\"\n      },\n      \"bin\": {\n        \"nopt\": \"bin/nopt.js\"\n      }\n    },\n    \"node_modules/normalize-package-data\": {\n      \"version\": \"2.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz\",\n      \"integrity\": \"sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"hosted-git-info\": \"^2.1.4\",\n        \"resolve\": \"^1.10.0\",\n        \"semver\": \"2 || 3 || 4 || 5\",\n        \"validate-npm-package-license\": \"^3.0.1\"\n      }\n    },\n    \"node_modules/npm-normalize-package-bin\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/npm-normalize-package-bin/-/npm-normalize-package-bin-1.0.1.tgz\",\n      \"integrity\": \"sha512-EPfafl6JL5/rU+ot6P3gRSCpPDW5VmIzX959Ob1+ySFUuuYHWHekXpwdUZcKP5C+DS4GEtdJluwBjnsNDl+fSA==\",\n      \"dev\": true\n    },\n    \"node_modules/once\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n      \"integrity\": \"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"wrappy\": \"1\"\n      }\n    },\n    \"node_modules/ory-prettier-styles\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/ory-prettier-styles/-/ory-prettier-styles-1.3.0.tgz\",\n      \"integrity\": \"sha512-Vfn0G6CyLaadwcCamwe1SQCf37ZQfBDgMrhRI70dE/2fbE3Q43/xu7K5c32I5FGt/EliroWty5yBjmdkj0eWug==\",\n      \"dev\": true\n    },\n    \"node_modules/os-homedir\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz\",\n      \"integrity\": \"sha512-B5JU3cabzk8c67mRRd3ECmROafjYMXbuzlwtqdM8IbS8ktlTix8aFGb2bAGKrSRIlnfKwovGUUr72JUPyOb6kQ==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/os-tmpdir\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\n      \"integrity\": \"sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/osenv\": {\n      \"version\": \"0.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/osenv/-/osenv-0.1.5.tgz\",\n      \"integrity\": \"sha512-0CWcCECdMVc2Rw3U5w9ZjqX6ga6ubk1xDVKxtBQPK7wis/0F2r9T6k4ydGYhecl7YUBxBVxhL5oisPsNxAPe2g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"os-homedir\": \"^1.0.0\",\n        \"os-tmpdir\": \"^1.0.0\"\n      }\n    },\n    \"node_modules/path-is-absolute\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n      \"integrity\": \"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/path-parse\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz\",\n      \"integrity\": \"sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==\",\n      \"dev\": true\n    },\n    \"node_modules/path-type\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz\",\n      \"integrity\": \"sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/picomatch\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8.6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/jonschlinkert\"\n      }\n    },\n    \"node_modules/prettier\": {\n      \"version\": \"2.7.1\",\n      \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-2.7.1.tgz\",\n      \"integrity\": \"sha512-ujppO+MkdPqoVINuDFDRLClm7D78qbDt0/NR+wp5FqEZOoTNAjPHWj17QRhu7geIHJfcNhRk1XVQmF8Bp3ye+g==\",\n      \"dev\": true,\n      \"bin\": {\n        \"prettier\": \"bin-prettier.js\"\n      },\n      \"engines\": {\n        \"node\": \">=10.13.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/prettier/prettier?sponsor=1\"\n      }\n    },\n    \"node_modules/prettier-plugin-packagejson\": {\n      \"version\": \"2.2.18\",\n      \"resolved\": \"https://registry.npmjs.org/prettier-plugin-packagejson/-/prettier-plugin-packagejson-2.2.18.tgz\",\n      \"integrity\": \"sha512-iBjQ3IY6IayFrQHhXvg+YvKprPUUiIJ04Vr9+EbeQPfwGajznArIqrN33c5bi4JcIvmLHGROIMOm9aYakJj/CA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"sort-package-json\": \"1.57.0\"\n      },\n      \"peerDependencies\": {\n        \"prettier\": \">= 1.16.0\"\n      }\n    },\n    \"node_modules/queue-microtask\": {\n      \"version\": \"1.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz\",\n      \"integrity\": \"sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ]\n    },\n    \"node_modules/read-installed\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/read-installed/-/read-installed-4.0.3.tgz\",\n      \"integrity\": \"sha512-O03wg/IYuV/VtnK2h/KXEt9VIbMUFbk3ERG0Iu4FhLZw0EP0T9znqrYDGn6ncbEsXUFaUjiVAWXHzxwt3lhRPQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"debuglog\": \"^1.0.1\",\n        \"read-package-json\": \"^2.0.0\",\n        \"readdir-scoped-modules\": \"^1.0.0\",\n        \"semver\": \"2 || 3 || 4 || 5\",\n        \"slide\": \"~1.1.3\",\n        \"util-extend\": \"^1.0.1\"\n      },\n      \"optionalDependencies\": {\n        \"graceful-fs\": \"^4.1.2\"\n      }\n    },\n    \"node_modules/read-package-json\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/read-package-json/-/read-package-json-2.1.2.tgz\",\n      \"integrity\": \"sha512-D1KmuLQr6ZSJS0tW8hf3WGpRlwszJOXZ3E8Yd/DNRaM5d+1wVRZdHlpGBLAuovjr28LbWvjpWkBHMxpRGGjzNA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"glob\": \"^7.1.1\",\n        \"json-parse-even-better-errors\": \"^2.3.0\",\n        \"normalize-package-data\": \"^2.0.0\",\n        \"npm-normalize-package-bin\": \"^1.0.0\"\n      }\n    },\n    \"node_modules/readdir-scoped-modules\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/readdir-scoped-modules/-/readdir-scoped-modules-1.1.0.tgz\",\n      \"integrity\": \"sha512-asaikDeqAQg7JifRsZn1NJZXo9E+VwlyCfbkZhwyISinqk5zNS6266HS5kah6P0SaQKGF6SkNnZVHUzHFYxYDw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"debuglog\": \"^1.0.1\",\n        \"dezalgo\": \"^1.0.0\",\n        \"graceful-fs\": \"^4.1.2\",\n        \"once\": \"^1.3.0\"\n      }\n    },\n    \"node_modules/resolve\": {\n      \"version\": \"1.22.1\",\n      \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.22.1.tgz\",\n      \"integrity\": \"sha512-nBpuuYuY5jFsli/JIs1oldw6fOQCBioohqWZg/2hiaOybXOft4lonv85uDOKXdf8rhyK159cxU5cDcK/NKk8zw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-core-module\": \"^2.9.0\",\n        \"path-parse\": \"^1.0.7\",\n        \"supports-preserve-symlinks-flag\": \"^1.0.0\"\n      },\n      \"bin\": {\n        \"resolve\": \"bin/resolve\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/reusify\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz\",\n      \"integrity\": \"sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"iojs\": \">=1.0.0\",\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/run-parallel\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz\",\n      \"integrity\": \"sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/feross\"\n        },\n        {\n          \"type\": \"patreon\",\n          \"url\": \"https://www.patreon.com/feross\"\n        },\n        {\n          \"type\": \"consulting\",\n          \"url\": \"https://feross.org/support\"\n        }\n      ],\n      \"dependencies\": {\n        \"queue-microtask\": \"^1.2.2\"\n      }\n    },\n    \"node_modules/semver\": {\n      \"version\": \"5.7.1\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.1.tgz\",\n      \"integrity\": \"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\",\n      \"dev\": true,\n      \"bin\": {\n        \"semver\": \"bin/semver\"\n      }\n    },\n    \"node_modules/slash\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/slash/-/slash-3.0.0.tgz\",\n      \"integrity\": \"sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=8\"\n      }\n    },\n    \"node_modules/slide\": {\n      \"version\": \"1.1.6\",\n      \"resolved\": \"https://registry.npmjs.org/slide/-/slide-1.1.6.tgz\",\n      \"integrity\": \"sha512-NwrtjCg+lZoqhFU8fOwl4ay2ei8PaqCBOUV3/ektPY9trO1yQ1oXEfmHAhKArUVUr/hOHvy5f6AdP17dCM0zMw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"*\"\n      }\n    },\n    \"node_modules/sort-object-keys\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/sort-object-keys/-/sort-object-keys-1.1.3.tgz\",\n      \"integrity\": \"sha512-855pvK+VkU7PaKYPc+Jjnmt4EzejQHyhhF33q31qG8x7maDzkeFhAAThdCYay11CISO+qAMwjOBP+fPZe0IPyg==\",\n      \"dev\": true\n    },\n    \"node_modules/sort-package-json\": {\n      \"version\": \"1.57.0\",\n      \"resolved\": \"https://registry.npmjs.org/sort-package-json/-/sort-package-json-1.57.0.tgz\",\n      \"integrity\": \"sha512-FYsjYn2dHTRb41wqnv+uEqCUvBpK3jZcTp9rbz2qDTmel7Pmdtf+i2rLaaPMRZeSVM60V3Se31GyWFpmKs4Q5Q==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"detect-indent\": \"^6.0.0\",\n        \"detect-newline\": \"3.1.0\",\n        \"git-hooks-list\": \"1.0.3\",\n        \"globby\": \"10.0.0\",\n        \"is-plain-obj\": \"2.1.0\",\n        \"sort-object-keys\": \"^1.1.3\"\n      },\n      \"bin\": {\n        \"sort-package-json\": \"cli.js\"\n      }\n    },\n    \"node_modules/spdx-compare\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-compare/-/spdx-compare-1.0.0.tgz\",\n      \"integrity\": \"sha512-C1mDZOX0hnu0ep9dfmuoi03+eOdDoz2yvK79RxbcrVEG1NO1Ph35yW102DHWKN4pk80nwCgeMmSY5L25VE4D9A==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"array-find-index\": \"^1.0.2\",\n        \"spdx-expression-parse\": \"^3.0.0\",\n        \"spdx-ranges\": \"^2.0.0\"\n      }\n    },\n    \"node_modules/spdx-correct\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.1.tgz\",\n      \"integrity\": \"sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"spdx-expression-parse\": \"^3.0.0\",\n        \"spdx-license-ids\": \"^3.0.0\"\n      }\n    },\n    \"node_modules/spdx-exceptions\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz\",\n      \"integrity\": \"sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==\",\n      \"dev\": true\n    },\n    \"node_modules/spdx-expression-parse\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz\",\n      \"integrity\": \"sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"spdx-exceptions\": \"^2.1.0\",\n        \"spdx-license-ids\": \"^3.0.0\"\n      }\n    },\n    \"node_modules/spdx-license-ids\": {\n      \"version\": \"3.0.12\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.12.tgz\",\n      \"integrity\": \"sha512-rr+VVSXtRhO4OHbXUiAF7xW3Bo9DuuF6C5jH+q/x15j2jniycgKbxU09Hr0WqlSLUs4i4ltHGXqTe7VHclYWyA==\",\n      \"dev\": true\n    },\n    \"node_modules/spdx-ranges\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-ranges/-/spdx-ranges-2.1.1.tgz\",\n      \"integrity\": \"sha512-mcdpQFV7UDAgLpXEE/jOMqvK4LBoO0uTQg0uvXUewmEFhpiZx5yJSZITHB8w1ZahKdhfZqP5GPEOKLyEq5p8XA==\",\n      \"dev\": true\n    },\n    \"node_modules/spdx-satisfies\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-satisfies/-/spdx-satisfies-4.0.1.tgz\",\n      \"integrity\": \"sha512-WVzZ/cXAzoNmjCWiEluEA3BjHp5tiUmmhn9MK+X0tBbR9sOqtC6UQwmgCNrAIZvNlMuBUYAaHYfb2oqlF9SwKA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"spdx-compare\": \"^1.0.0\",\n        \"spdx-expression-parse\": \"^3.0.0\",\n        \"spdx-ranges\": \"^2.0.0\"\n      }\n    },\n    \"node_modules/supports-color\": {\n      \"version\": \"5.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz\",\n      \"integrity\": \"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"has-flag\": \"^3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/supports-preserve-symlinks-flag\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz\",\n      \"integrity\": \"sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 0.4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/ljharb\"\n      }\n    },\n    \"node_modules/to-regex-range\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n      \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-number\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=8.0\"\n      }\n    },\n    \"node_modules/treeify\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/treeify/-/treeify-1.1.0.tgz\",\n      \"integrity\": \"sha512-1m4RA7xVAJrSGrrXGs0L3YTwyvBs2S8PbRHaLZAkFw7JR8oIFwYtysxlBZhYIa7xSyiYJKZ3iGrrk55cGA3i9A==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.6\"\n      }\n    },\n    \"node_modules/util-extend\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/util-extend/-/util-extend-1.0.3.tgz\",\n      \"integrity\": \"sha512-mLs5zAK+ctllYBj+iAQvlDCwoxU/WDOUaJkcFudeiAX6OajC6BKXJUa9a+tbtkC11dz2Ufb7h0lyvIOVn4LADA==\",\n      \"dev\": true\n    },\n    \"node_modules/validate-npm-package-license\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz\",\n      \"integrity\": \"sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"spdx-correct\": \"^3.0.0\",\n        \"spdx-expression-parse\": \"^3.0.0\"\n      }\n    },\n    \"node_modules/wrappy\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n      \"integrity\": \"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\",\n      \"dev\": true\n    }\n  },\n  \"dependencies\": {\n    \"@nodelib/fs.scandir\": {\n      \"version\": \"2.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz\",\n      \"integrity\": \"sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@nodelib/fs.stat\": \"2.0.5\",\n        \"run-parallel\": \"^1.1.9\"\n      }\n    },\n    \"@nodelib/fs.stat\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz\",\n      \"integrity\": \"sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==\",\n      \"dev\": true\n    },\n    \"@nodelib/fs.walk\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz\",\n      \"integrity\": \"sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@nodelib/fs.scandir\": \"2.1.5\",\n        \"fastq\": \"^1.6.0\"\n      }\n    },\n    \"@types/glob\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@types/glob/-/glob-7.2.0.tgz\",\n      \"integrity\": \"sha512-ZUxbzKl0IfJILTS6t7ip5fQQM/J3TJYubDm3nMbgubNNYS62eXeUpoLUC8/7fJNiFYHTrGPQn7hspDUzIHX3UA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@types/minimatch\": \"*\",\n        \"@types/node\": \"*\"\n      }\n    },\n    \"@types/minimatch\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/@types/minimatch/-/minimatch-5.1.2.tgz\",\n      \"integrity\": \"sha512-K0VQKziLUWkVKiRVrx4a40iPaxTUefQmjtkQofBkYRcoaaL/8rhwDWww9qWbrgicNOgnpIsMxyNIUM4+n6dUIA==\",\n      \"dev\": true\n    },\n    \"@types/node\": {\n      \"version\": \"18.7.15\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-18.7.15.tgz\",\n      \"integrity\": \"sha512-XnjpaI8Bgc3eBag2Aw4t2Uj/49lLBSStHWfqKvIuXD7FIrZyMLWp8KuAFHAqxMZYTF9l08N1ctUn9YNybZJVmQ==\",\n      \"dev\": true\n    },\n    \"abbrev\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz\",\n      \"integrity\": \"sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==\",\n      \"dev\": true\n    },\n    \"ansi-styles\": {\n      \"version\": \"3.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz\",\n      \"integrity\": \"sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"color-convert\": \"^1.9.0\"\n      }\n    },\n    \"array-find-index\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz\",\n      \"integrity\": \"sha512-M1HQyIXcBGtVywBt8WVdim+lrNaK7VHp99Qt5pSNziXznKHViIBbXWtfRTpEFpF/c4FdfxNAsCCwPp5phBYJtw==\",\n      \"dev\": true\n    },\n    \"array-union\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz\",\n      \"integrity\": \"sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==\",\n      \"dev\": true\n    },\n    \"asap\": {\n      \"version\": \"2.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/asap/-/asap-2.0.6.tgz\",\n      \"integrity\": \"sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==\",\n      \"dev\": true\n    },\n    \"balanced-match\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\n      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n      \"dev\": true\n    },\n    \"brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"balanced-match\": \"^1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"braces\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\",\n      \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"fill-range\": \"^7.1.1\"\n      }\n    },\n    \"chalk\": {\n      \"version\": \"2.4.2\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz\",\n      \"integrity\": \"sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-styles\": \"^3.2.1\",\n        \"escape-string-regexp\": \"^1.0.5\",\n        \"supports-color\": \"^5.3.0\"\n      }\n    },\n    \"color-convert\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz\",\n      \"integrity\": \"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"color-name\": \"1.1.3\"\n      }\n    },\n    \"color-name\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz\",\n      \"integrity\": \"sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==\",\n      \"dev\": true\n    },\n    \"concat-map\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n      \"integrity\": \"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\",\n      \"dev\": true\n    },\n    \"debug\": {\n      \"version\": \"3.2.7\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.2.7.tgz\",\n      \"integrity\": \"sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"ms\": \"^2.1.1\"\n      }\n    },\n    \"debuglog\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz\",\n      \"integrity\": \"sha512-syBZ+rnAK3EgMsH2aYEOLUW7mZSY9Gb+0wUMCFsZvcmiz+HigA0LOcq/HoQqVuGG+EKykunc7QG2bzrponfaSw==\",\n      \"dev\": true\n    },\n    \"detect-indent\": {\n      \"version\": \"6.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/detect-indent/-/detect-indent-6.1.0.tgz\",\n      \"integrity\": \"sha512-reYkTUJAZb9gUuZ2RvVCNhVHdg62RHnJ7WJl8ftMi4diZ6NWlciOzQN88pUhSELEwflJht4oQDv0F0BMlwaYtA==\",\n      \"dev\": true\n    },\n    \"detect-newline\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz\",\n      \"integrity\": \"sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==\",\n      \"dev\": true\n    },\n    \"dezalgo\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz\",\n      \"integrity\": \"sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==\",\n      \"dev\": true,\n      \"requires\": {\n        \"asap\": \"^2.0.0\",\n        \"wrappy\": \"1\"\n      }\n    },\n    \"dir-glob\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz\",\n      \"integrity\": \"sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"path-type\": \"^4.0.0\"\n      }\n    },\n    \"escape-string-regexp\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\n      \"integrity\": \"sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==\",\n      \"dev\": true\n    },\n    \"fast-glob\": {\n      \"version\": \"3.2.11\",\n      \"resolved\": \"https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.11.tgz\",\n      \"integrity\": \"sha512-xrO3+1bxSo3ZVHAnqzyuewYT6aMFHRAd4Kcs92MAonjwQZLsK9d0SF1IyQ3k5PoirxTW0Oe/RqFgMQ6TcNE5Ew==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@nodelib/fs.stat\": \"^2.0.2\",\n        \"@nodelib/fs.walk\": \"^1.2.3\",\n        \"glob-parent\": \"^5.1.2\",\n        \"merge2\": \"^1.3.0\",\n        \"micromatch\": \"^4.0.4\"\n      }\n    },\n    \"fastq\": {\n      \"version\": \"1.13.0\",\n      \"resolved\": \"https://registry.npmjs.org/fastq/-/fastq-1.13.0.tgz\",\n      \"integrity\": \"sha512-YpkpUnK8od0o1hmeSc7UUs/eB/vIPWJYjKck2QKIzAf71Vm1AAQ3EbuZB3g2JIy+pg+ERD0vqI79KyZiB2e2Nw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"reusify\": \"^1.0.4\"\n      }\n    },\n    \"fill-range\": {\n      \"version\": \"7.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\",\n      \"integrity\": \"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"to-regex-range\": \"^5.0.1\"\n      }\n    },\n    \"fs.realpath\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\n      \"integrity\": \"sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==\",\n      \"dev\": true\n    },\n    \"function-bind\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz\",\n      \"integrity\": \"sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==\",\n      \"dev\": true\n    },\n    \"git-hooks-list\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/git-hooks-list/-/git-hooks-list-1.0.3.tgz\",\n      \"integrity\": \"sha512-Y7wLWcrLUXwk2noSka166byGCvhMtDRpgHdzCno1UQv/n/Hegp++a2xBWJL1lJarnKD3SWaljD+0z1ztqxuKyQ==\",\n      \"dev\": true\n    },\n    \"glob\": {\n      \"version\": \"7.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\n      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\n      \"dev\": true,\n      \"requires\": {\n        \"fs.realpath\": \"^1.0.0\",\n        \"inflight\": \"^1.0.4\",\n        \"inherits\": \"2\",\n        \"minimatch\": \"^3.1.1\",\n        \"once\": \"^1.3.0\",\n        \"path-is-absolute\": \"^1.0.0\"\n      }\n    },\n    \"glob-parent\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\n      \"integrity\": \"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-glob\": \"^4.0.1\"\n      }\n    },\n    \"globby\": {\n      \"version\": \"10.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/globby/-/globby-10.0.0.tgz\",\n      \"integrity\": \"sha512-3LifW9M4joGZasyYPz2A1U74zbC/45fvpXUvO/9KbSa+VV0aGZarWkfdgKyR9sExNP0t0x0ss/UMJpNpcaTspw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@types/glob\": \"^7.1.1\",\n        \"array-union\": \"^2.1.0\",\n        \"dir-glob\": \"^3.0.1\",\n        \"fast-glob\": \"^3.0.3\",\n        \"glob\": \"^7.1.3\",\n        \"ignore\": \"^5.1.1\",\n        \"merge2\": \"^1.2.3\",\n        \"slash\": \"^3.0.0\"\n      }\n    },\n    \"graceful-fs\": {\n      \"version\": \"4.2.10\",\n      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.10.tgz\",\n      \"integrity\": \"sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA==\",\n      \"dev\": true\n    },\n    \"has\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/has/-/has-1.0.3.tgz\",\n      \"integrity\": \"sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"function-bind\": \"^1.1.1\"\n      }\n    },\n    \"has-flag\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz\",\n      \"integrity\": \"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\",\n      \"dev\": true\n    },\n    \"hosted-git-info\": {\n      \"version\": \"2.8.9\",\n      \"resolved\": \"https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz\",\n      \"integrity\": \"sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==\",\n      \"dev\": true\n    },\n    \"ignore\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz\",\n      \"integrity\": \"sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==\",\n      \"dev\": true\n    },\n    \"inflight\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\n      \"integrity\": \"sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"once\": \"^1.3.0\",\n        \"wrappy\": \"1\"\n      }\n    },\n    \"inherits\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\",\n      \"dev\": true\n    },\n    \"is-core-module\": {\n      \"version\": \"2.11.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-core-module/-/is-core-module-2.11.0.tgz\",\n      \"integrity\": \"sha512-RRjxlvLDkD1YJwDbroBHMb+cukurkDWNyHx7D3oNB5x9rb5ogcksMC5wHCadcXoo67gVr/+3GFySh3134zi6rw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"has\": \"^1.0.3\"\n      }\n    },\n    \"is-extglob\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\n      \"integrity\": \"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\n      \"dev\": true\n    },\n    \"is-glob\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\",\n      \"integrity\": \"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-extglob\": \"^2.1.1\"\n      }\n    },\n    \"is-number\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n      \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\n      \"dev\": true\n    },\n    \"is-plain-obj\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-2.1.0.tgz\",\n      \"integrity\": \"sha512-YWnfyRwxL/+SsrWYfOpUtz5b3YD+nyfkHvjbcanzk8zgyO4ASD67uVMRt8k5bM4lLMDnXfriRhOpemw+NfT1eA==\",\n      \"dev\": true\n    },\n    \"json-parse-even-better-errors\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz\",\n      \"integrity\": \"sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==\",\n      \"dev\": true\n    },\n    \"license-checker\": {\n      \"version\": \"25.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/license-checker/-/license-checker-25.0.1.tgz\",\n      \"integrity\": \"sha512-mET5AIwl7MR2IAKYYoVBBpV0OnkKQ1xGj2IMMeEFIs42QAkEVjRtFZGWmQ28WeU7MP779iAgOaOy93Mn44mn6g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"chalk\": \"^2.4.1\",\n        \"debug\": \"^3.1.0\",\n        \"mkdirp\": \"^0.5.1\",\n        \"nopt\": \"^4.0.1\",\n        \"read-installed\": \"~4.0.3\",\n        \"semver\": \"^5.5.0\",\n        \"spdx-correct\": \"^3.0.0\",\n        \"spdx-expression-parse\": \"^3.0.0\",\n        \"spdx-satisfies\": \"^4.0.0\",\n        \"treeify\": \"^1.1.0\"\n      }\n    },\n    \"merge2\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz\",\n      \"integrity\": \"sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==\",\n      \"dev\": true\n    },\n    \"micromatch\": {\n      \"version\": \"4.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz\",\n      \"integrity\": \"sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"braces\": \"^3.0.2\",\n        \"picomatch\": \"^2.3.1\"\n      }\n    },\n    \"minimatch\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"brace-expansion\": \"^1.1.7\"\n      }\n    },\n    \"minimist\": {\n      \"version\": \"1.2.7\",\n      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.7.tgz\",\n      \"integrity\": \"sha512-bzfL1YUZsP41gmu/qjrEk0Q6i2ix/cVeAhbCbqH9u3zYutS1cLg00qhrD0M2MVdCcx4Sc0UpP2eBWo9rotpq6g==\",\n      \"dev\": true\n    },\n    \"mkdirp\": {\n      \"version\": \"0.5.6\",\n      \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz\",\n      \"integrity\": \"sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"minimist\": \"^1.2.6\"\n      }\n    },\n    \"ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n      \"dev\": true\n    },\n    \"nopt\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/nopt/-/nopt-4.0.3.tgz\",\n      \"integrity\": \"sha512-CvaGwVMztSMJLOeXPrez7fyfObdZqNUK1cPAEzLHrTybIua9pMdmmPR5YwtfNftIOMv3DPUhFaxsZMNTQO20Kg==\",\n      \"dev\": true,\n      \"requires\": {\n        \"abbrev\": \"1\",\n        \"osenv\": \"^0.1.4\"\n      }\n    },\n    \"normalize-package-data\": {\n      \"version\": \"2.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz\",\n      \"integrity\": \"sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"hosted-git-info\": \"^2.1.4\",\n        \"resolve\": \"^1.10.0\",\n        \"semver\": \"2 || 3 || 4 || 5\",\n        \"validate-npm-package-license\": \"^3.0.1\"\n      }\n    },\n    \"npm-normalize-package-bin\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/npm-normalize-package-bin/-/npm-normalize-package-bin-1.0.1.tgz\",\n      \"integrity\": \"sha512-EPfafl6JL5/rU+ot6P3gRSCpPDW5VmIzX959Ob1+ySFUuuYHWHekXpwdUZcKP5C+DS4GEtdJluwBjnsNDl+fSA==\",\n      \"dev\": true\n    },\n    \"once\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n      \"integrity\": \"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\n      \"dev\": true,\n      \"requires\": {\n        \"wrappy\": \"1\"\n      }\n    },\n    \"ory-prettier-styles\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/ory-prettier-styles/-/ory-prettier-styles-1.3.0.tgz\",\n      \"integrity\": \"sha512-Vfn0G6CyLaadwcCamwe1SQCf37ZQfBDgMrhRI70dE/2fbE3Q43/xu7K5c32I5FGt/EliroWty5yBjmdkj0eWug==\",\n      \"dev\": true\n    },\n    \"os-homedir\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz\",\n      \"integrity\": \"sha512-B5JU3cabzk8c67mRRd3ECmROafjYMXbuzlwtqdM8IbS8ktlTix8aFGb2bAGKrSRIlnfKwovGUUr72JUPyOb6kQ==\",\n      \"dev\": true\n    },\n    \"os-tmpdir\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\n      \"integrity\": \"sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==\",\n      \"dev\": true\n    },\n    \"osenv\": {\n      \"version\": \"0.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/osenv/-/osenv-0.1.5.tgz\",\n      \"integrity\": \"sha512-0CWcCECdMVc2Rw3U5w9ZjqX6ga6ubk1xDVKxtBQPK7wis/0F2r9T6k4ydGYhecl7YUBxBVxhL5oisPsNxAPe2g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"os-homedir\": \"^1.0.0\",\n        \"os-tmpdir\": \"^1.0.0\"\n      }\n    },\n    \"path-is-absolute\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n      \"integrity\": \"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\",\n      \"dev\": true\n    },\n    \"path-parse\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz\",\n      \"integrity\": \"sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==\",\n      \"dev\": true\n    },\n    \"path-type\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz\",\n      \"integrity\": \"sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==\",\n      \"dev\": true\n    },\n    \"picomatch\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n      \"dev\": true\n    },\n    \"prettier\": {\n      \"version\": \"2.7.1\",\n      \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-2.7.1.tgz\",\n      \"integrity\": \"sha512-ujppO+MkdPqoVINuDFDRLClm7D78qbDt0/NR+wp5FqEZOoTNAjPHWj17QRhu7geIHJfcNhRk1XVQmF8Bp3ye+g==\",\n      \"dev\": true\n    },\n    \"prettier-plugin-packagejson\": {\n      \"version\": \"2.2.18\",\n      \"resolved\": \"https://registry.npmjs.org/prettier-plugin-packagejson/-/prettier-plugin-packagejson-2.2.18.tgz\",\n      \"integrity\": \"sha512-iBjQ3IY6IayFrQHhXvg+YvKprPUUiIJ04Vr9+EbeQPfwGajznArIqrN33c5bi4JcIvmLHGROIMOm9aYakJj/CA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"sort-package-json\": \"1.57.0\"\n      }\n    },\n    \"queue-microtask\": {\n      \"version\": \"1.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz\",\n      \"integrity\": \"sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==\",\n      \"dev\": true\n    },\n    \"read-installed\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/read-installed/-/read-installed-4.0.3.tgz\",\n      \"integrity\": \"sha512-O03wg/IYuV/VtnK2h/KXEt9VIbMUFbk3ERG0Iu4FhLZw0EP0T9znqrYDGn6ncbEsXUFaUjiVAWXHzxwt3lhRPQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"debuglog\": \"^1.0.1\",\n        \"graceful-fs\": \"^4.1.2\",\n        \"read-package-json\": \"^2.0.0\",\n        \"readdir-scoped-modules\": \"^1.0.0\",\n        \"semver\": \"2 || 3 || 4 || 5\",\n        \"slide\": \"~1.1.3\",\n        \"util-extend\": \"^1.0.1\"\n      }\n    },\n    \"read-package-json\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/read-package-json/-/read-package-json-2.1.2.tgz\",\n      \"integrity\": \"sha512-D1KmuLQr6ZSJS0tW8hf3WGpRlwszJOXZ3E8Yd/DNRaM5d+1wVRZdHlpGBLAuovjr28LbWvjpWkBHMxpRGGjzNA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"glob\": \"^7.1.1\",\n        \"json-parse-even-better-errors\": \"^2.3.0\",\n        \"normalize-package-data\": \"^2.0.0\",\n        \"npm-normalize-package-bin\": \"^1.0.0\"\n      }\n    },\n    \"readdir-scoped-modules\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/readdir-scoped-modules/-/readdir-scoped-modules-1.1.0.tgz\",\n      \"integrity\": \"sha512-asaikDeqAQg7JifRsZn1NJZXo9E+VwlyCfbkZhwyISinqk5zNS6266HS5kah6P0SaQKGF6SkNnZVHUzHFYxYDw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"debuglog\": \"^1.0.1\",\n        \"dezalgo\": \"^1.0.0\",\n        \"graceful-fs\": \"^4.1.2\",\n        \"once\": \"^1.3.0\"\n      }\n    },\n    \"resolve\": {\n      \"version\": \"1.22.1\",\n      \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.22.1.tgz\",\n      \"integrity\": \"sha512-nBpuuYuY5jFsli/JIs1oldw6fOQCBioohqWZg/2hiaOybXOft4lonv85uDOKXdf8rhyK159cxU5cDcK/NKk8zw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-core-module\": \"^2.9.0\",\n        \"path-parse\": \"^1.0.7\",\n        \"supports-preserve-symlinks-flag\": \"^1.0.0\"\n      }\n    },\n    \"reusify\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz\",\n      \"integrity\": \"sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==\",\n      \"dev\": true\n    },\n    \"run-parallel\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz\",\n      \"integrity\": \"sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"queue-microtask\": \"^1.2.2\"\n      }\n    },\n    \"semver\": {\n      \"version\": \"5.7.1\",\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.1.tgz\",\n      \"integrity\": \"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\",\n      \"dev\": true\n    },\n    \"slash\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/slash/-/slash-3.0.0.tgz\",\n      \"integrity\": \"sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==\",\n      \"dev\": true\n    },\n    \"slide\": {\n      \"version\": \"1.1.6\",\n      \"resolved\": \"https://registry.npmjs.org/slide/-/slide-1.1.6.tgz\",\n      \"integrity\": \"sha512-NwrtjCg+lZoqhFU8fOwl4ay2ei8PaqCBOUV3/ektPY9trO1yQ1oXEfmHAhKArUVUr/hOHvy5f6AdP17dCM0zMw==\",\n      \"dev\": true\n    },\n    \"sort-object-keys\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/sort-object-keys/-/sort-object-keys-1.1.3.tgz\",\n      \"integrity\": \"sha512-855pvK+VkU7PaKYPc+Jjnmt4EzejQHyhhF33q31qG8x7maDzkeFhAAThdCYay11CISO+qAMwjOBP+fPZe0IPyg==\",\n      \"dev\": true\n    },\n    \"sort-package-json\": {\n      \"version\": \"1.57.0\",\n      \"resolved\": \"https://registry.npmjs.org/sort-package-json/-/sort-package-json-1.57.0.tgz\",\n      \"integrity\": \"sha512-FYsjYn2dHTRb41wqnv+uEqCUvBpK3jZcTp9rbz2qDTmel7Pmdtf+i2rLaaPMRZeSVM60V3Se31GyWFpmKs4Q5Q==\",\n      \"dev\": true,\n      \"requires\": {\n        \"detect-indent\": \"^6.0.0\",\n        \"detect-newline\": \"3.1.0\",\n        \"git-hooks-list\": \"1.0.3\",\n        \"globby\": \"10.0.0\",\n        \"is-plain-obj\": \"2.1.0\",\n        \"sort-object-keys\": \"^1.1.3\"\n      }\n    },\n    \"spdx-compare\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-compare/-/spdx-compare-1.0.0.tgz\",\n      \"integrity\": \"sha512-C1mDZOX0hnu0ep9dfmuoi03+eOdDoz2yvK79RxbcrVEG1NO1Ph35yW102DHWKN4pk80nwCgeMmSY5L25VE4D9A==\",\n      \"dev\": true,\n      \"requires\": {\n        \"array-find-index\": \"^1.0.2\",\n        \"spdx-expression-parse\": \"^3.0.0\",\n        \"spdx-ranges\": \"^2.0.0\"\n      }\n    },\n    \"spdx-correct\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.1.tgz\",\n      \"integrity\": \"sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==\",\n      \"dev\": true,\n      \"requires\": {\n        \"spdx-expression-parse\": \"^3.0.0\",\n        \"spdx-license-ids\": \"^3.0.0\"\n      }\n    },\n    \"spdx-exceptions\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz\",\n      \"integrity\": \"sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==\",\n      \"dev\": true\n    },\n    \"spdx-expression-parse\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz\",\n      \"integrity\": \"sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==\",\n      \"dev\": true,\n      \"requires\": {\n        \"spdx-exceptions\": \"^2.1.0\",\n        \"spdx-license-ids\": \"^3.0.0\"\n      }\n    },\n    \"spdx-license-ids\": {\n      \"version\": \"3.0.12\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.12.tgz\",\n      \"integrity\": \"sha512-rr+VVSXtRhO4OHbXUiAF7xW3Bo9DuuF6C5jH+q/x15j2jniycgKbxU09Hr0WqlSLUs4i4ltHGXqTe7VHclYWyA==\",\n      \"dev\": true\n    },\n    \"spdx-ranges\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-ranges/-/spdx-ranges-2.1.1.tgz\",\n      \"integrity\": \"sha512-mcdpQFV7UDAgLpXEE/jOMqvK4LBoO0uTQg0uvXUewmEFhpiZx5yJSZITHB8w1ZahKdhfZqP5GPEOKLyEq5p8XA==\",\n      \"dev\": true\n    },\n    \"spdx-satisfies\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/spdx-satisfies/-/spdx-satisfies-4.0.1.tgz\",\n      \"integrity\": \"sha512-WVzZ/cXAzoNmjCWiEluEA3BjHp5tiUmmhn9MK+X0tBbR9sOqtC6UQwmgCNrAIZvNlMuBUYAaHYfb2oqlF9SwKA==\",\n      \"dev\": true,\n      \"requires\": {\n        \"spdx-compare\": \"^1.0.0\",\n        \"spdx-expression-parse\": \"^3.0.0\",\n        \"spdx-ranges\": \"^2.0.0\"\n      }\n    },\n    \"supports-color\": {\n      \"version\": \"5.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz\",\n      \"integrity\": \"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\n      \"dev\": true,\n      \"requires\": {\n        \"has-flag\": \"^3.0.0\"\n      }\n    },\n    \"supports-preserve-symlinks-flag\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz\",\n      \"integrity\": \"sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==\",\n      \"dev\": true\n    },\n    \"to-regex-range\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n      \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-number\": \"^7.0.0\"\n      }\n    },\n    \"treeify\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/treeify/-/treeify-1.1.0.tgz\",\n      \"integrity\": \"sha512-1m4RA7xVAJrSGrrXGs0L3YTwyvBs2S8PbRHaLZAkFw7JR8oIFwYtysxlBZhYIa7xSyiYJKZ3iGrrk55cGA3i9A==\",\n      \"dev\": true\n    },\n    \"util-extend\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/util-extend/-/util-extend-1.0.3.tgz\",\n      \"integrity\": \"sha512-mLs5zAK+ctllYBj+iAQvlDCwoxU/WDOUaJkcFudeiAX6OajC6BKXJUa9a+tbtkC11dz2Ufb7h0lyvIOVn4LADA==\",\n      \"dev\": true\n    },\n    \"validate-npm-package-license\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz\",\n      \"integrity\": \"sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==\",\n      \"dev\": true,\n      \"requires\": {\n        \"spdx-correct\": \"^3.0.0\",\n        \"spdx-expression-parse\": \"^3.0.0\"\n      }\n    },\n    \"wrappy\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n      \"integrity\": \"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\",\n      \"dev\": true\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.220703125,
          "content": "{\n  \"private\": true,\n  \"prettier\": \"ory-prettier-styles\",\n  \"devDependencies\": {\n    \"license-checker\": \"^25.0.1\",\n    \"ory-prettier-styles\": \"1.3.0\",\n    \"prettier\": \"2.7.1\",\n    \"prettier-plugin-packagejson\": \"2.2.18\"\n  }\n}\n"
        },
        {
          "name": "pushed_authorize_request_handler.go",
          "type": "blob",
          "size": 2.9306640625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net/http\"\n\n\t\"github.com/ory/fosite/i18n\"\n\t\"github.com/ory/x/errorsx\"\n\t\"github.com/ory/x/otelx\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\nconst (\n\tErrorPARNotSupported           = \"The OAuth 2.0 provider does not support Pushed Authorization Requests\"\n\tDebugPARStorageInvalid         = \"'PARStorage' not implemented\"\n\tDebugPARConfigMissing          = \"'PushedAuthorizeRequestConfigProvider' not implemented\"\n\tDebugPARRequestsHandlerMissing = \"'PushedAuthorizeRequestHandlersProvider' not implemented\"\n)\n\n// NewPushedAuthorizeRequest validates the request and produces an AuthorizeRequester object that can be stored\nfunc (f *Fosite) NewPushedAuthorizeRequest(ctx context.Context, r *http.Request) (_ AuthorizeRequester, err error) {\n\tctx, span := trace.SpanFromContext(ctx).TracerProvider().Tracer(\"github.com/ory/fosite\").Start(ctx, \"Fosite.NewPushedAuthorizeRequest\")\n\tdefer otelx.End(span, &err)\n\n\trequest := NewAuthorizeRequest()\n\trequest.Request.Lang = i18n.GetLangFromRequest(f.Config.GetMessageCatalog(ctx), r)\n\n\tif r.Method != \"POST\" {\n\t\treturn request, errorsx.WithStack(ErrInvalidRequest.WithHintf(\"HTTP method is '%s', expected 'POST'.\", r.Method))\n\t}\n\n\tif err := r.ParseMultipartForm(1 << 20); err != nil && err != http.ErrNotMultipart {\n\t\treturn request, errorsx.WithStack(ErrInvalidRequest.WithHint(\"Unable to parse HTTP body, make sure to send a properly formatted form request body.\").WithWrap(err).WithDebug(err.Error()))\n\t}\n\trequest.Form = r.Form\n\trequest.State = request.Form.Get(\"state\")\n\n\t// Authenticate the client in the same way as at the token endpoint\n\t// (Section 2.3 of [RFC6749]).\n\tclient, err := f.AuthenticateClient(ctx, r, r.Form)\n\tif err != nil {\n\t\tvar rfcerr *RFC6749Error\n\t\tif errors.As(err, &rfcerr) && rfcerr.ErrorField != ErrInvalidClient.ErrorField {\n\t\t\treturn request, errorsx.WithStack(ErrInvalidClient.WithHint(\"The requested OAuth 2.0 Client could not be authenticated.\").WithWrap(err).WithDebug(err.Error()))\n\t\t}\n\n\t\treturn request, err\n\t}\n\trequest.Client = client\n\n\t// Reject the request if the \"request_uri\" authorization request\n\t// parameter is provided.\n\tif r.Form.Get(\"request_uri\") != \"\" {\n\t\treturn request, errorsx.WithStack(ErrInvalidRequest.WithHint(\"The request must not contain 'request_uri'.\"))\n\t}\n\n\t// For private_key_jwt or basic auth client authentication, \"client_id\" may not inside the form\n\t// However this is required by NewAuthorizeRequest implementation\n\tif len(r.Form.Get(\"client_id\")) == 0 {\n\t\tr.Form.Set(\"client_id\", client.GetID())\n\t}\n\n\t// Validate as if this is a new authorize request\n\tfr, err := f.newAuthorizeRequest(ctx, r, true)\n\tif err != nil {\n\t\treturn fr, err\n\t}\n\n\tif fr.GetRequestedScopes().Has(\"openid\") && r.Form.Get(\"redirect_uri\") == \"\" {\n\t\treturn fr, errorsx.WithStack(ErrInvalidRequest.WithHint(\"Query parameter 'redirect_uri' is required when performing an OpenID Connect flow.\"))\n\t}\n\n\treturn fr, nil\n}\n"
        },
        {
          "name": "pushed_authorize_request_handler_test.go",
          "type": "blob",
          "size": 24.4609375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"runtime/debug\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t. \"github.com/ory/fosite\"\n\t\"github.com/ory/fosite/internal\"\n)\n\n// Should pass\n//\n//   - https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#Terminology\n//     The OAuth 2.0 specification allows for registration of space-separated response_type parameter values.\n//     If a Response Type contains one of more space characters (%20), it is compared as a space-delimited list of\n//     values in which the order of values does not matter.\nfunc TestNewPushedAuthorizeRequest(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tstore := internal.NewMockStorage(ctrl)\n\thasher := internal.NewMockHasher(ctrl)\n\tdefer ctrl.Finish()\n\n\tconfig := &Config{\n\t\tScopeStrategy:            ExactScopeStrategy,\n\t\tAudienceMatchingStrategy: DefaultAudienceMatchingStrategy,\n\t\tClientSecretsHasher:      hasher,\n\t}\n\n\tfosite := &Fosite{\n\t\tStore:  store,\n\t\tConfig: config,\n\t}\n\n\tredir, _ := url.Parse(\"https://foo.bar/cb\")\n\tspecialCharRedir, _ := url.Parse(\"web+application://callback\")\n\tfor _, c := range []struct {\n\t\tdesc          string\n\t\tconf          *Fosite\n\t\tr             *http.Request\n\t\tquery         url.Values\n\t\texpectedError error\n\t\tmock          func()\n\t\texpect        *AuthorizeRequest\n\t}{\n\t\t/* empty request */\n\t\t{\n\t\t\tdesc: \"empty request fails\",\n\t\t\tconf: fosite,\n\t\t\tr: &http.Request{\n\t\t\t\tMethod: \"POST\",\n\t\t\t},\n\t\t\texpectedError: ErrInvalidClient,\n\t\t\tmock:          func() {},\n\t\t},\n\t\t/* invalid redirect uri */\n\t\t{\n\t\t\tdesc:          \"invalid redirect uri fails\",\n\t\t\tconf:          fosite,\n\t\t\tquery:         url.Values{\"redirect_uri\": []string{\"invalid\"}},\n\t\t\texpectedError: ErrInvalidClient,\n\t\t\tmock:          func() {},\n\t\t},\n\t\t/* invalid client */\n\t\t{\n\t\t\tdesc:          \"invalid client fails\",\n\t\t\tconf:          fosite,\n\t\t\tquery:         url.Values{\"redirect_uri\": []string{\"https://foo.bar/cb\"}},\n\t\t\texpectedError: ErrInvalidClient,\n\t\t\tmock:          func() {},\n\t\t},\n\t\t/* redirect client mismatch */\n\t\t{\n\t\t\tdesc: \"client and request redirects mismatch\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"client_id\":     []string{\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t},\n\t\t\texpectedError: ErrInvalidRequest,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"invalid\"}, Scopes: []string{}, Secret: []byte(\"1234\")}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t},\n\t\t/* redirect client mismatch */\n\t\t{\n\t\t\tdesc: \"client and request redirects mismatch\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  []string{\"\"},\n\t\t\t\t\"client_id\":     []string{\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t},\n\t\t\texpectedError: ErrInvalidRequest,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"invalid\"}, Scopes: []string{}, Secret: []byte(\"1234\")}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t},\n\t\t/* redirect client mismatch */\n\t\t{\n\t\t\tdesc: \"client and request redirects mismatch\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     []string{\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t},\n\t\t\texpectedError: ErrInvalidRequest,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"invalid\"}, Scopes: []string{}, Secret: []byte(\"1234\")}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t},\n\t\t/* no state */\n\t\t{\n\t\t\tdesc: \"no state\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     []string{\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": []string{\"code\"},\n\t\t\t},\n\t\t\texpectedError: ErrInvalidState,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{}, Secret: []byte(\"1234\")}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t},\n\t\t/* short state */\n\t\t{\n\t\t\tdesc: \"short state\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code\"},\n\t\t\t\t\"state\":         {\"short\"},\n\t\t\t},\n\t\t\texpectedError: ErrInvalidState,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{}, Secret: []byte(\"1234\")}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t},\n\t\t/* fails because scope not given */\n\t\t{\n\t\t\tdesc: \"should fail because client does not have scope baz\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar baz\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{\"foo\", \"bar\"}, Secret: []byte(\"1234\")}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpectedError: ErrInvalidScope,\n\t\t},\n\t\t/* fails because scope not given */\n\t\t{\n\t\t\tdesc: \"should fail because client does not have scope baz\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tRedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience: []string{\"https://cloud.ory.sh/api\"},\n\t\t\t\t\tSecret:   []byte(\"1234\"),\n\t\t\t\t}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpectedError: ErrInvalidRequest,\n\t\t},\n\t\t/* success case */\n\t\t{\n\t\t\tdesc: \"should pass\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"}, RedirectURIs: []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:   []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\tSecret:   []byte(\"1234\"),\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* repeated audience parameter */\n\t\t{\n\t\t\tdesc: \"repeated audience parameter\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"}, RedirectURIs: []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:   []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\tSecret:   []byte(\"1234\"),\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* repeated audience parameter with tricky values */\n\t\t{\n\t\t\tdesc: \"repeated audience parameter with tricky values\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"test value\", \"\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience:      []string{\"test value\"},\n\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"}, RedirectURIs: []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:   []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tAudience: []string{\"test value\"},\n\t\t\t\t\t\tSecret:   []byte(\"1234\"),\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"test value\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* redirect_uri with special character in protocol*/\n\t\t{\n\t\t\tdesc: \"redirect_uri with special character\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"web+application://callback\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\tRedirectURIs:  []string{\"web+application://callback\"},\n\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   specialCharRedir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"}, RedirectURIs: []string{\"web+application://callback\"},\n\t\t\t\t\t\tScopes:   []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\tSecret:   []byte(\"1234\"),\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* audience with double spaces between values */\n\t\t{\n\t\t\tdesc: \"audience with double spaces between values\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api  https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{\n\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultClient{\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"}, RedirectURIs: []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:   []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\tSecret:   []byte(\"1234\"),\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* fails because unknown response_mode*/\n\t\t{\n\t\t\tdesc: \"should fail because unknown response_mode\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"response_mode\": {\"unknown\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{\"foo\", \"bar\"}, ResponseTypes: []string{\"code token\"}, Secret: []byte(\"1234\")}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpectedError: ErrUnsupportedResponseMode,\n\t\t},\n\t\t/* fails because response_mode is requested but the OAuth 2.0 client doesn't support response mode */\n\t\t{\n\t\t\tdesc: \"should fail because response_mode is requested but the OAuth 2.0 client doesn't support response mode\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"response_mode\": {\"form_post\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{\"foo\", \"bar\"}, ResponseTypes: []string{\"code token\"}, Secret: []byte(\"1234\")}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpectedError: ErrUnsupportedResponseMode,\n\t\t},\n\t\t/* fails because requested response mode is not allowed */\n\t\t{\n\t\t\tdesc: \"should fail because requested response mode is not allowed\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"response_mode\": {\"form_post\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultResponseModeClient{\n\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t\t},\n\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeQuery},\n\t\t\t\t}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpectedError: ErrUnsupportedResponseMode,\n\t\t},\n\t\t/* success with response mode */\n\t\t{\n\t\t\tdesc: \"success with response mode\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"response_mode\": {\"form_post\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultResponseModeClient{\n\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t\t},\n\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeFormPost},\n\t\t\t\t}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultResponseModeClient{\n\t\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeFormPost},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* determine correct response mode if default */\n\t\t{\n\t\t\tdesc: \"success with response mode\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultResponseModeClient{\n\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tResponseTypes: []string{\"code\"},\n\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t\t},\n\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeQuery},\n\t\t\t\t}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultResponseModeClient{\n\t\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\t\tResponseTypes: []string{\"code\"},\n\t\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeQuery},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* determine correct response mode if default */\n\t\t{\n\t\t\tdesc: \"success with response mode\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"audience\":      {\"https://cloud.ory.sh/api https://www.ory.sh/api\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultResponseModeClient{\n\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t\t},\n\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeFragment},\n\t\t\t\t}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpect: &AuthorizeRequest{\n\t\t\t\tRedirectURI:   redir,\n\t\t\t\tResponseTypes: []string{\"code\", \"token\"},\n\t\t\t\tState:         \"strong-state\",\n\t\t\t\tRequest: Request{\n\t\t\t\t\tClient: &DefaultResponseModeClient{\n\t\t\t\t\t\tDefaultClient: &DefaultClient{\n\t\t\t\t\t\t\tRedirectURIs:  []string{\"https://foo.bar/cb\"},\n\t\t\t\t\t\t\tScopes:        []string{\"foo\", \"bar\"},\n\t\t\t\t\t\t\tResponseTypes: []string{\"code token\"},\n\t\t\t\t\t\t\tAudience:      []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t\t\t\tSecret:        []byte(\"1234\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tResponseModes: []ResponseModeType{ResponseModeFragment},\n\t\t\t\t\t},\n\t\t\t\t\tRequestedScope:    []string{\"foo\", \"bar\"},\n\t\t\t\t\tRequestedAudience: []string{\"https://cloud.ory.sh/api\", \"https://www.ory.sh/api\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t/* fails because request_uri is included */\n\t\t{\n\t\t\tdesc: \"should fail because request_uri is provided in the request\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"request_uri\":   {\"https://foo.bar/ru\"},\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"1234\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"response_mode\": {\"form_post\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{\"foo\", \"bar\"}, ResponseTypes: []string{\"code token\"}, Secret: []byte(\"1234\")}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"1234\"))).Return(nil)\n\t\t\t},\n\t\t\texpectedError: ErrInvalidRequest.WithHint(\"The request must not contain 'request_uri'.\"),\n\t\t},\n\t\t/* fails because of invalid client credentials */\n\t\t{\n\t\t\tdesc: \"should fail because of invalid client creds\",\n\t\t\tconf: fosite,\n\t\t\tquery: url.Values{\n\t\t\t\t\"request_uri\":   {\"https://foo.bar/ru\"},\n\t\t\t\t\"redirect_uri\":  {\"https://foo.bar/cb\"},\n\t\t\t\t\"client_id\":     {\"1234\"},\n\t\t\t\t\"client_secret\": []string{\"4321\"},\n\t\t\t\t\"response_type\": {\"code token\"},\n\t\t\t\t\"state\":         {\"strong-state\"},\n\t\t\t\t\"scope\":         {\"foo bar\"},\n\t\t\t\t\"response_mode\": {\"form_post\"},\n\t\t\t},\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), \"1234\").Return(&DefaultClient{RedirectURIs: []string{\"https://foo.bar/cb\"}, Scopes: []string{\"foo\", \"bar\"}, ResponseTypes: []string{\"code token\"}, Secret: []byte(\"1234\")}, nil).MaxTimes(2)\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"1234\")), gomock.Eq([]byte(\"4321\"))).Return(fmt.Errorf(\"invalid hash\"))\n\t\t\t},\n\t\t\texpectedError: ErrInvalidClient,\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%s\", c.desc), func(t *testing.T) {\n\t\t\tctx := NewContext()\n\n\t\t\tc.mock()\n\t\t\tif c.r == nil {\n\t\t\t\tc.r = &http.Request{\n\t\t\t\t\tHeader: http.Header{},\n\t\t\t\t\tMethod: \"POST\",\n\t\t\t\t}\n\t\t\t\tif c.query != nil {\n\t\t\t\t\tc.r.URL = &url.URL{RawQuery: c.query.Encode()}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tar, err := c.conf.NewPushedAuthorizeRequest(ctx, c.r)\n\t\t\tif c.expectedError != nil {\n\t\t\t\tassert.EqualError(t, err, c.expectedError.Error(), \"Stack: %s\", string(debug.Stack()))\n\t\t\t\t// https://github.com/ory/hydra/issues/1642\n\t\t\t\tAssertObjectKeysEqual(t, &AuthorizeRequest{State: c.query.Get(\"state\")}, ar, \"State\")\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\tAssertObjectKeysEqual(t, c.expect, ar, \"ResponseTypes\", \"RequestedAudience\", \"RequestedScope\", \"Client\", \"RedirectURI\", \"State\")\n\t\t\t\tassert.NotNil(t, ar.GetRequestedAt())\n\t\t\t}\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "pushed_authorize_response.go",
          "type": "blob",
          "size": 1.369140625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport \"net/http\"\n\n// PushedAuthorizeResponse is the response object for PAR\ntype PushedAuthorizeResponse struct {\n\tRequestURI string `json:\"request_uri\"`\n\tExpiresIn  int    `json:\"expires_in\"`\n\tHeader     http.Header\n\tExtra      map[string]interface{}\n}\n\n// GetRequestURI gets\nfunc (a *PushedAuthorizeResponse) GetRequestURI() string {\n\treturn a.RequestURI\n}\n\n// SetRequestURI sets\nfunc (a *PushedAuthorizeResponse) SetRequestURI(requestURI string) {\n\ta.RequestURI = requestURI\n}\n\n// GetExpiresIn gets\nfunc (a *PushedAuthorizeResponse) GetExpiresIn() int {\n\treturn a.ExpiresIn\n}\n\n// SetExpiresIn sets\nfunc (a *PushedAuthorizeResponse) SetExpiresIn(seconds int) {\n\ta.ExpiresIn = seconds\n}\n\n// GetHeader gets\nfunc (a *PushedAuthorizeResponse) GetHeader() http.Header {\n\treturn a.Header\n}\n\n// AddHeader adds\nfunc (a *PushedAuthorizeResponse) AddHeader(key, value string) {\n\ta.Header.Add(key, value)\n}\n\n// SetExtra sets\nfunc (a *PushedAuthorizeResponse) SetExtra(key string, value interface{}) {\n\ta.Extra[key] = value\n}\n\n// GetExtra gets\nfunc (a *PushedAuthorizeResponse) GetExtra(key string) interface{} {\n\treturn a.Extra[key]\n}\n\n// ToMap converts to a map\nfunc (a *PushedAuthorizeResponse) ToMap() map[string]interface{} {\n\ta.Extra[\"request_uri\"] = a.RequestURI\n\ta.Extra[\"expires_in\"] = a.ExpiresIn\n\treturn a.Extra\n}\n"
        },
        {
          "name": "pushed_authorize_response_writer.go",
          "type": "blob",
          "size": 3.123046875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/ory/x/errorsx\"\n\t\"github.com/ory/x/otelx\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\n// NewPushedAuthorizeResponse executes the handlers and builds the response\nfunc (f *Fosite) NewPushedAuthorizeResponse(ctx context.Context, ar AuthorizeRequester, session Session) (_ PushedAuthorizeResponder, err error) {\n\tctx, span := trace.SpanFromContext(ctx).TracerProvider().Tracer(\"github.com/ory/fosite\").Start(ctx, \"Fosite.NewPushedAuthorizeResponse\")\n\tdefer otelx.End(span, &err)\n\n\t// Get handlers. If no handlers are defined, this is considered a misconfigured Fosite instance.\n\thandlersProvider, ok := f.Config.(PushedAuthorizeRequestHandlersProvider)\n\tif !ok {\n\t\treturn nil, errorsx.WithStack(ErrServerError.WithHint(ErrorPARNotSupported).WithDebug(DebugPARRequestsHandlerMissing))\n\t}\n\n\tvar resp = &PushedAuthorizeResponse{\n\t\tHeader: http.Header{},\n\t\tExtra:  map[string]interface{}{},\n\t}\n\n\tctx = context.WithValue(ctx, AuthorizeRequestContextKey, ar)\n\tctx = context.WithValue(ctx, PushedAuthorizeResponseContextKey, resp)\n\n\tar.SetSession(session)\n\tfor _, h := range handlersProvider.GetPushedAuthorizeEndpointHandlers(ctx) {\n\t\tif err := h.HandlePushedAuthorizeEndpointRequest(ctx, ar, resp); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn resp, nil\n}\n\n// WritePushedAuthorizeResponse writes the PAR response\nfunc (f *Fosite) WritePushedAuthorizeResponse(ctx context.Context, rw http.ResponseWriter, ar AuthorizeRequester, resp PushedAuthorizeResponder) {\n\t// Set custom headers, e.g. \"X-MySuperCoolCustomHeader\" or \"X-DONT-CACHE-ME\"...\n\twh := rw.Header()\n\trh := resp.GetHeader()\n\tfor k := range rh {\n\t\twh.Set(k, rh.Get(k))\n\t}\n\n\twh.Set(\"Cache-Control\", \"no-store\")\n\twh.Set(\"Pragma\", \"no-cache\")\n\twh.Set(\"Content-Type\", \"application/json;charset=UTF-8\")\n\n\tjs, err := json.Marshal(resp.ToMap())\n\tif err != nil {\n\t\thttp.Error(rw, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\trw.Header().Set(\"Content-Type\", \"application/json;charset=UTF-8\")\n\n\trw.WriteHeader(http.StatusCreated)\n\t_, _ = rw.Write(js)\n}\n\n// WritePushedAuthorizeError writes the PAR error\nfunc (f *Fosite) WritePushedAuthorizeError(ctx context.Context, rw http.ResponseWriter, ar AuthorizeRequester, err error) {\n\trw.Header().Set(\"Cache-Control\", \"no-store\")\n\trw.Header().Set(\"Pragma\", \"no-cache\")\n\trw.Header().Set(\"Content-Type\", \"application/json;charset=UTF-8\")\n\n\tsendDebugMessagesToClient := f.Config.GetSendDebugMessagesToClients(ctx)\n\trfcerr := ErrorToRFC6749Error(err).WithLegacyFormat(f.Config.GetUseLegacyErrorFormat(ctx)).\n\t\tWithExposeDebug(sendDebugMessagesToClient).WithLocalizer(f.Config.GetMessageCatalog(ctx), getLangFromRequester(ar))\n\n\tjs, err := json.Marshal(rfcerr)\n\tif err != nil {\n\t\tif sendDebugMessagesToClient {\n\t\t\terrorMessage := EscapeJSONString(err.Error())\n\t\t\thttp.Error(rw, fmt.Sprintf(`{\"error\":\"server_error\",\"error_description\":\"%s\"}`, errorMessage), http.StatusInternalServerError)\n\t\t} else {\n\t\t\thttp.Error(rw, `{\"error\":\"server_error\"}`, http.StatusInternalServerError)\n\t\t}\n\t\treturn\n\t}\n\n\trw.WriteHeader(rfcerr.CodeField)\n\t_, _ = rw.Write(js)\n}\n"
        },
        {
          "name": "pushed_authorize_response_writer_test.go",
          "type": "blob",
          "size": 1.556640625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\n\t. \"github.com/ory/fosite\"\n\t. \"github.com/ory/fosite/internal\"\n)\n\nfunc TestNewPushedAuthorizeResponse(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\thandlers := []*MockPushedAuthorizeEndpointHandler{NewMockPushedAuthorizeEndpointHandler(ctrl)}\n\tar := NewMockAuthorizeRequester(ctrl)\n\tdefer ctrl.Finish()\n\n\tctx := context.Background()\n\toauth2 := &Fosite{\n\t\tConfig: &Config{\n\t\t\tPushedAuthorizeEndpointHandlers: PushedAuthorizeEndpointHandlers{handlers[0]},\n\t\t},\n\t}\n\tar.EXPECT().SetSession(gomock.Eq(new(DefaultSession))).AnyTimes()\n\tfooErr := errors.New(\"foo\")\n\tfor k, c := range []struct {\n\t\tisErr     bool\n\t\tmock      func()\n\t\texpectErr error\n\t}{\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\thandlers[0].EXPECT().HandlePushedAuthorizeEndpointRequest(gomock.Any(), gomock.Eq(ar), gomock.Any()).Return(fooErr)\n\t\t\t},\n\t\t\tisErr:     true,\n\t\t\texpectErr: fooErr,\n\t\t},\n\t\t{\n\t\t\tmock: func() {\n\t\t\t\thandlers[0].EXPECT().HandlePushedAuthorizeEndpointRequest(gomock.Any(), gomock.Eq(ar), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\tisErr: false,\n\t\t},\n\t} {\n\t\tc.mock()\n\t\tresponder, err := oauth2.NewPushedAuthorizeResponse(ctx, ar, new(DefaultSession))\n\t\tassert.Equal(t, c.isErr, err != nil, \"%d: %s\", k, err)\n\t\tif err != nil {\n\t\t\tassert.Equal(t, c.expectErr, err, \"%d: %s\", k, err)\n\t\t\tassert.Nil(t, responder, \"%d\", k)\n\t\t} else {\n\t\t\tassert.NotNil(t, responder, \"%d\", k)\n\t\t}\n\t\tt.Logf(\"Passed test case %d\", k)\n\t}\n}\n"
        },
        {
          "name": "request.go",
          "type": "blob",
          "size": 4.041015625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n\t\"golang.org/x/text/language\"\n)\n\n// Request is an implementation of Requester\ntype Request struct {\n\tID                string       `json:\"id\" gorethink:\"id\"`\n\tRequestedAt       time.Time    `json:\"requestedAt\" gorethink:\"requestedAt\"`\n\tClient            Client       `json:\"client\" gorethink:\"client\"`\n\tRequestedScope    Arguments    `json:\"scopes\" gorethink:\"scopes\"`\n\tGrantedScope      Arguments    `json:\"grantedScopes\" gorethink:\"grantedScopes\"`\n\tForm              url.Values   `json:\"form\" gorethink:\"form\"`\n\tSession           Session      `json:\"session\" gorethink:\"session\"`\n\tRequestedAudience Arguments    `json:\"requestedAudience\"`\n\tGrantedAudience   Arguments    `json:\"grantedAudience\"`\n\tLang              language.Tag `json:\"-\"`\n}\n\nfunc NewRequest() *Request {\n\treturn &Request{\n\t\tClient:            &DefaultClient{},\n\t\tRequestedScope:    Arguments{},\n\t\tRequestedAudience: Arguments{},\n\t\tGrantedAudience:   Arguments{},\n\t\tGrantedScope:      Arguments{},\n\t\tForm:              url.Values{},\n\t\tRequestedAt:       time.Now().UTC(),\n\t}\n}\n\nfunc (a *Request) GetID() string {\n\tif a.ID == \"\" {\n\t\ta.ID = uuid.New().String()\n\t}\n\treturn a.ID\n}\n\nfunc (a *Request) SetID(id string) {\n\ta.ID = id\n}\n\nfunc (a *Request) GetRequestForm() url.Values {\n\treturn a.Form\n}\n\nfunc (a *Request) GetRequestedAt() time.Time {\n\treturn a.RequestedAt\n}\n\nfunc (a *Request) GetClient() Client {\n\treturn a.Client\n}\n\nfunc (a *Request) GetRequestedScopes() Arguments {\n\treturn a.RequestedScope\n}\n\nfunc (a *Request) SetRequestedScopes(s Arguments) {\n\ta.RequestedScope = nil\n\tfor _, scope := range s {\n\t\ta.AppendRequestedScope(scope)\n\t}\n}\n\nfunc (a *Request) SetRequestedAudience(s Arguments) {\n\ta.RequestedAudience = nil\n\tfor _, scope := range s {\n\t\ta.AppendRequestedAudience(scope)\n\t}\n}\n\nfunc (a *Request) AppendRequestedScope(scope string) {\n\tfor _, has := range a.RequestedScope {\n\t\tif scope == has {\n\t\t\treturn\n\t\t}\n\t}\n\ta.RequestedScope = append(a.RequestedScope, scope)\n}\n\nfunc (a *Request) AppendRequestedAudience(audience string) {\n\tfor _, has := range a.RequestedAudience {\n\t\tif audience == has {\n\t\t\treturn\n\t\t}\n\t}\n\ta.RequestedAudience = append(a.RequestedAudience, audience)\n}\n\nfunc (a *Request) GetRequestedAudience() (audience Arguments) {\n\treturn a.RequestedAudience\n}\n\nfunc (a *Request) GrantAudience(audience string) {\n\tfor _, has := range a.GrantedAudience {\n\t\tif audience == has {\n\t\t\treturn\n\t\t}\n\t}\n\ta.GrantedAudience = append(a.GrantedAudience, audience)\n}\n\nfunc (a *Request) GetGrantedScopes() Arguments {\n\treturn a.GrantedScope\n}\n\nfunc (a *Request) GetGrantedAudience() Arguments {\n\treturn a.GrantedAudience\n}\n\nfunc (a *Request) GrantScope(scope string) {\n\tfor _, has := range a.GrantedScope {\n\t\tif scope == has {\n\t\t\treturn\n\t\t}\n\t}\n\ta.GrantedScope = append(a.GrantedScope, scope)\n}\n\nfunc (a *Request) SetSession(session Session) {\n\ta.Session = session\n}\n\nfunc (a *Request) GetSession() Session {\n\treturn a.Session\n}\n\nfunc (a *Request) Merge(request Requester) {\n\tfor _, scope := range request.GetRequestedScopes() {\n\t\ta.AppendRequestedScope(scope)\n\t}\n\tfor _, scope := range request.GetGrantedScopes() {\n\t\ta.GrantScope(scope)\n\t}\n\n\tfor _, aud := range request.GetRequestedAudience() {\n\t\ta.AppendRequestedAudience(aud)\n\t}\n\tfor _, aud := range request.GetGrantedAudience() {\n\t\ta.GrantAudience(aud)\n\t}\n\n\ta.ID = request.GetID()\n\ta.RequestedAt = request.GetRequestedAt()\n\ta.Client = request.GetClient()\n\ta.Session = request.GetSession()\n\n\tfor k, v := range request.GetRequestForm() {\n\t\ta.Form[k] = v\n\t}\n}\n\nvar defaultAllowedParameters = []string{\"grant_type\", \"response_type\", \"scope\", \"client_id\"}\n\nfunc (a *Request) Sanitize(allowedParameters []string) Requester {\n\tb := new(Request)\n\tallowed := map[string]bool{}\n\tfor _, v := range append(allowedParameters, defaultAllowedParameters...) {\n\t\tallowed[v] = true\n\t}\n\n\t*b = *a\n\tb.ID = a.GetID()\n\tb.Form = url.Values{}\n\tfor k := range a.Form {\n\t\tif allowed[k] {\n\t\t\tb.Form[k] = a.Form[k]\n\t\t}\n\t}\n\n\treturn b\n}\n\nfunc (a *Request) GetLang() language.Tag {\n\treturn a.Lang\n}\n"
        },
        {
          "name": "request_test.go",
          "type": "blob",
          "size": 3.7373046875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"net/url\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\t. \"github.com/ory/fosite\"\n)\n\nfunc TestRequest(t *testing.T) {\n\tr := &Request{\n\t\tRequestedAt:       time.Now().UTC(),\n\t\tClient:            &DefaultClient{},\n\t\tRequestedScope:    Arguments{\"scope\"},\n\t\tGrantedScope:      Arguments{\"scope\"},\n\t\tRequestedAudience: Arguments{\"scope\"},\n\t\tGrantedAudience:   Arguments{\"scope\"},\n\t\tForm:              url.Values{\"foo\": []string{\"bar\"}},\n\t\tSession:           new(DefaultSession),\n\t}\n\n\tassert.Equal(t, r.RequestedAt, r.GetRequestedAt())\n\tassert.Equal(t, r.Client, r.GetClient())\n\tassert.Equal(t, r.GrantedScope, r.GetGrantedScopes())\n\tassert.Equal(t, r.RequestedScope, r.GetRequestedScopes())\n\tassert.Equal(t, r.Form, r.GetRequestForm())\n\tassert.Equal(t, r.Session, r.GetSession())\n}\n\nfunc TestMergeRequest(t *testing.T) {\n\ta := &Request{\n\t\tID:                \"123\",\n\t\tRequestedAt:       time.Now().UTC(),\n\t\tClient:            &DefaultClient{ID: \"123\"},\n\t\tRequestedScope:    Arguments{\"scope-3\", \"scope-4\"},\n\t\tRequestedAudience: Arguments{\"aud-3\", \"aud-4\"},\n\t\tGrantedScope:      []string{\"scope-1\", \"scope-2\"},\n\t\tGrantedAudience:   []string{\"aud-1\", \"aud-2\"},\n\t\tForm:              url.Values{\"foo\": []string{\"fasdf\"}},\n\t\tSession:           new(DefaultSession),\n\t}\n\tb := &Request{\n\t\tRequestedAt:    time.Now().UTC(),\n\t\tClient:         &DefaultClient{},\n\t\tRequestedScope: Arguments{},\n\t\tGrantedScope:   []string{},\n\t\tForm:           url.Values{},\n\t\tSession:        new(DefaultSession),\n\t}\n\n\tb.Merge(a)\n\tassert.EqualValues(t, a.RequestedAt, b.RequestedAt)\n\tassert.EqualValues(t, a.Client, b.Client)\n\tassert.EqualValues(t, a.RequestedScope, b.RequestedScope)\n\tassert.EqualValues(t, a.RequestedAudience, b.RequestedAudience)\n\tassert.EqualValues(t, a.GrantedScope, b.GrantedScope)\n\tassert.EqualValues(t, a.GrantedAudience, b.GrantedAudience)\n\tassert.EqualValues(t, a.Form, b.Form)\n\tassert.EqualValues(t, a.Session, b.Session)\n\tassert.EqualValues(t, a.ID, b.ID)\n}\n\nfunc TestSanitizeRequest(t *testing.T) {\n\ta := &Request{\n\t\tRequestedAt:    time.Now().UTC(),\n\t\tClient:         &DefaultClient{ID: \"123\"},\n\t\tRequestedScope: Arguments{\"asdff\"},\n\t\tGrantedScope:   []string{\"asdf\"},\n\t\tForm: url.Values{\n\t\t\t\"foo\":           []string{\"fasdf\"},\n\t\t\t\"bar\":           []string{\"fasdf\", \"faaaa\"},\n\t\t\t\"baz\":           []string{\"fasdf\"},\n\t\t\t\"grant_type\":    []string{\"code\"},\n\t\t\t\"response_type\": []string{\"id_token\"},\n\t\t\t\"client_id\":     []string{\"1234\"},\n\t\t\t\"scope\":         []string{\"read\"},\n\t\t},\n\t\tSession: new(DefaultSession),\n\t}\n\n\tb := a.Sanitize([]string{\"bar\", \"baz\"})\n\tassert.NotEqual(t, a.Form.Encode(), b.GetRequestForm().Encode())\n\n\tassert.Empty(t, b.GetRequestForm().Get(\"foo\"))\n\tassert.Equal(t, \"fasdf\", b.GetRequestForm().Get(\"bar\"))\n\tassert.Equal(t, []string{\"fasdf\", \"faaaa\"}, b.GetRequestForm()[\"bar\"])\n\tassert.Equal(t, \"fasdf\", b.GetRequestForm().Get(\"baz\"))\n\n\tassert.Equal(t, \"fasdf\", a.GetRequestForm().Get(\"foo\"))\n\tassert.Equal(t, \"fasdf\", a.GetRequestForm().Get(\"bar\"))\n\tassert.Equal(t, []string{\"fasdf\", \"faaaa\"}, a.GetRequestForm()[\"bar\"])\n\tassert.Equal(t, \"fasdf\", a.GetRequestForm().Get(\"baz\"))\n\tassert.Equal(t, \"code\", a.GetRequestForm().Get(\"grant_type\"))\n\tassert.Equal(t, \"id_token\", a.GetRequestForm().Get(\"response_type\"))\n\tassert.Equal(t, \"1234\", a.GetRequestForm().Get(\"client_id\"))\n\tassert.Equal(t, \"read\", a.GetRequestForm().Get(\"scope\"))\n}\n\nfunc TestIdentifyRequest(t *testing.T) {\n\ta := &Request{\n\t\tRequestedAt:    time.Now().UTC(),\n\t\tClient:         &DefaultClient{},\n\t\tRequestedScope: Arguments{},\n\t\tGrantedScope:   []string{},\n\t\tForm:           url.Values{\"foo\": []string{\"bar\"}},\n\t\tSession:        new(DefaultSession),\n\t}\n\n\tb := a.Sanitize([]string{})\n\tb.GetID()\n\tassert.Equal(t, a.ID, b.GetID())\n}\n"
        },
        {
          "name": "response_handler.go",
          "type": "blob",
          "size": 1.8837890625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"net/http\"\n)\n\n// ResponseModeHandler provides a contract for handling custom response modes\ntype ResponseModeHandler interface {\n\t// ResponseModes returns a set of supported response modes handled\n\t// by the interface implementation.\n\t//\n\t// In an authorize request with any of the provide response modes\n\t// methods `WriteAuthorizeResponse` and `WriteAuthorizeError` will be\n\t// invoked to write the successful or error authorization responses respectively.\n\tResponseModes() ResponseModeTypes\n\n\t// WriteAuthorizeResponse writes successful responses\n\t//\n\t// Following headers are expected to be set by default:\n\t// header.Set(\"Cache-Control\", \"no-store\")\n\t// header.Set(\"Pragma\", \"no-cache\")\n\tWriteAuthorizeResponse(ctx context.Context, rw http.ResponseWriter, ar AuthorizeRequester, resp AuthorizeResponder)\n\n\t// WriteAuthorizeError writes error responses\n\t//\n\t// Following headers are expected to be set by default:\n\t// header.Set(\"Cache-Control\", \"no-store\")\n\t// header.Set(\"Pragma\", \"no-cache\")\n\tWriteAuthorizeError(ctx context.Context, rw http.ResponseWriter, ar AuthorizeRequester, err error)\n}\n\ntype ResponseModeTypes []ResponseModeType\n\nfunc (rs ResponseModeTypes) Has(item ResponseModeType) bool {\n\tfor _, r := range rs {\n\t\tif r == item {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc NewDefaultResponseModeHandler() *DefaultResponseModeHandler {\n\treturn new(DefaultResponseModeHandler)\n}\n\ntype DefaultResponseModeHandler struct{}\n\nfunc (d *DefaultResponseModeHandler) ResponseModes() ResponseModeTypes { return nil }\nfunc (d *DefaultResponseModeHandler) WriteAuthorizeResponse(ctx context.Context, rw http.ResponseWriter, ar AuthorizeRequester, resp AuthorizeResponder) {\n}\nfunc (d *DefaultResponseModeHandler) WriteAuthorizeError(ctx context.Context, rw http.ResponseWriter, ar AuthorizeRequester, err error) {\n}\n"
        },
        {
          "name": "revoke_handler.go",
          "type": "blob",
          "size": 3.9775390625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/ory/x/errorsx\"\n\t\"github.com/ory/x/otelx\"\n\t\"go.opentelemetry.io/otel/trace\"\n\n\t\"github.com/pkg/errors\"\n)\n\n// NewRevocationRequest handles incoming token revocation requests and\n// validates various parameters as specified in:\n// https://tools.ietf.org/html/rfc7009#section-2.1\n//\n// The authorization server first validates the client credentials (in\n// case of a confidential client) and then verifies whether the token\n// was issued to the client making the revocation request.  If this\n// validation fails, the request is refused and the client is informed\n// of the error by the authorization server as described below.\n//\n// In the next step, the authorization server invalidates the token.\n// The invalidation takes place immediately, and the token cannot be\n// used again after the revocation.\n//\n// * https://tools.ietf.org/html/rfc7009#section-2.2\n// An invalid token type hint value is ignored by the authorization\n// server and does not influence the revocation response.\nfunc (f *Fosite) NewRevocationRequest(ctx context.Context, r *http.Request) (err error) {\n\tctx, span := trace.SpanFromContext(ctx).TracerProvider().Tracer(\"github.com/ory/fosite\").Start(ctx, \"Fosite.NewRevocationRequest\")\n\tdefer otelx.End(span, &err)\n\n\tctx = context.WithValue(ctx, RequestContextKey, r)\n\n\tif r.Method != \"POST\" {\n\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHintf(\"HTTP method is '%s' but expected 'POST'.\", r.Method))\n\t} else if err := r.ParseMultipartForm(1 << 20); err != nil && err != http.ErrNotMultipart {\n\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHint(\"Unable to parse HTTP body, make sure to send a properly formatted form request body.\").WithWrap(err).WithDebug(err.Error()))\n\t} else if len(r.PostForm) == 0 {\n\t\treturn errorsx.WithStack(ErrInvalidRequest.WithHint(\"The POST body can not be empty.\"))\n\t}\n\n\tclient, err := f.AuthenticateClient(ctx, r, r.PostForm)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttoken := r.PostForm.Get(\"token\")\n\ttokenTypeHint := TokenType(r.PostForm.Get(\"token_type_hint\"))\n\n\tvar found = false\n\tfor _, loader := range f.Config.GetRevocationHandlers(ctx) {\n\t\tif err := loader.RevokeToken(ctx, token, tokenTypeHint, client); err == nil {\n\t\t\tfound = true\n\t\t} else if errors.Is(err, ErrUnknownRequest) {\n\t\t\t// do nothing\n\t\t} else if err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif !found {\n\t\treturn errorsx.WithStack(ErrInvalidRequest)\n\t}\n\n\treturn nil\n}\n\n// WriteRevocationResponse writes a token revocation response as specified in:\n// https://tools.ietf.org/html/rfc7009#section-2.2\n//\n// The authorization server responds with HTTP status code 200 if the\n// token has been revoked successfully or if the client submitted an\n// invalid token.\n//\n// Note: invalid tokens do not cause an error response since the client\n// cannot handle such an error in a reasonable way.  Moreover, the\n// purpose of the revocation request, invalidating the particular token,\n// is already achieved.\nfunc (f *Fosite) WriteRevocationResponse(ctx context.Context, rw http.ResponseWriter, err error) {\n\trw.Header().Set(\"Cache-Control\", \"no-store\")\n\trw.Header().Set(\"Pragma\", \"no-cache\")\n\n\tif err == nil {\n\t\trw.WriteHeader(http.StatusOK)\n\t\treturn\n\t}\n\n\tif errors.Is(err, ErrInvalidRequest) {\n\t\trw.Header().Set(\"Content-Type\", \"application/json;charset=UTF-8\")\n\n\t\tjs, err := json.Marshal(ErrInvalidRequest)\n\t\tif err != nil {\n\t\t\thttp.Error(rw, fmt.Sprintf(`{\"error\": \"%s\"}`, err.Error()), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\trw.WriteHeader(ErrInvalidRequest.CodeField)\n\t\t_, _ = rw.Write(js)\n\t} else if errors.Is(err, ErrInvalidClient) {\n\t\trw.Header().Set(\"Content-Type\", \"application/json;charset=UTF-8\")\n\n\t\tjs, err := json.Marshal(ErrInvalidClient)\n\t\tif err != nil {\n\t\t\thttp.Error(rw, fmt.Sprintf(`{\"error\": \"%s\"}`, err.Error()), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\trw.WriteHeader(ErrInvalidClient.CodeField)\n\t\t_, _ = rw.Write(js)\n\t} else {\n\t\t// 200 OK\n\t\trw.WriteHeader(http.StatusOK)\n\t}\n}\n"
        },
        {
          "name": "revoke_handler_test.go",
          "type": "blob",
          "size": 6.291015625,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite_test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/golang/mock/gomock\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/stretchr/testify/assert\"\n\n\t. \"github.com/ory/fosite\"\n\t\"github.com/ory/fosite/internal\"\n)\n\nfunc TestNewRevocationRequest(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tstore := internal.NewMockStorage(ctrl)\n\thandler := internal.NewMockRevocationHandler(ctrl)\n\thasher := internal.NewMockHasher(ctrl)\n\tdefer ctrl.Finish()\n\n\tclient := &DefaultClient{}\n\tconfig := &Config{ClientSecretsHasher: hasher}\n\tfosite := &Fosite{Store: store, Config: config}\n\tfor k, c := range []struct {\n\t\theader    http.Header\n\t\tform      url.Values\n\t\tmock      func()\n\t\tmethod    string\n\t\texpectErr error\n\t\texpect    *AccessRequest\n\t\thandlers  RevocationHandlers\n\t}{\n\t\t{\n\t\t\theader:    http.Header{},\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t\tmethod:    \"GET\",\n\t\t\tmock:      func() {},\n\t\t},\n\t\t{\n\t\t\theader:    http.Header{},\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t\tmethod:    \"POST\",\n\t\t\tmock:      func() {},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"token\": {\"foo\"},\n\t\t\t},\n\t\t\tmock:      func() {},\n\t\t\texpectErr: ErrInvalidRequest,\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"token\": {\"foo\"},\n\t\t\t},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(nil, errors.New(\"\"))\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"token\": {\"foo\"},\n\t\t\t},\n\t\t\texpectErr: ErrInvalidClient,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Secret = []byte(\"foo\")\n\t\t\t\tclient.Public = false\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"foo\")), gomock.Eq([]byte(\"bar\"))).Return(errors.New(\"\"))\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"token\": {\"foo\"},\n\t\t\t},\n\t\t\texpectErr: nil,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Secret = []byte(\"foo\")\n\t\t\t\tclient.Public = false\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"foo\")), gomock.Eq([]byte(\"bar\"))).Return(nil)\n\t\t\t\thandler.EXPECT().RevokeToken(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\thandlers: RevocationHandlers{handler},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"token\":           {\"foo\"},\n\t\t\t\t\"token_type_hint\": {\"access_token\"},\n\t\t\t},\n\t\t\texpectErr: nil,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Secret = []byte(\"foo\")\n\t\t\t\tclient.Public = false\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"foo\")), gomock.Eq([]byte(\"bar\"))).Return(nil)\n\t\t\t\thandler.EXPECT().RevokeToken(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\thandlers: RevocationHandlers{handler},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"token\":           {\"foo\"},\n\t\t\t\t\"token_type_hint\": {\"refresh_token\"},\n\t\t\t},\n\t\t\texpectErr: nil,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Public = true\n\t\t\t\thandler.EXPECT().RevokeToken(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\thandlers: RevocationHandlers{handler},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"token\":           {\"foo\"},\n\t\t\t\t\"token_type_hint\": {\"refresh_token\"},\n\t\t\t},\n\t\t\texpectErr: nil,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Secret = []byte(\"foo\")\n\t\t\t\tclient.Public = false\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"foo\")), gomock.Eq([]byte(\"bar\"))).Return(nil)\n\t\t\t\thandler.EXPECT().RevokeToken(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\thandlers: RevocationHandlers{handler},\n\t\t},\n\t\t{\n\t\t\theader: http.Header{\n\t\t\t\t\"Authorization\": {basicAuth(\"foo\", \"bar\")},\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tform: url.Values{\n\t\t\t\t\"token\":           {\"foo\"},\n\t\t\t\t\"token_type_hint\": {\"bar\"},\n\t\t\t},\n\t\t\texpectErr: nil,\n\t\t\tmock: func() {\n\t\t\t\tstore.EXPECT().GetClient(gomock.Any(), gomock.Eq(\"foo\")).Return(client, nil)\n\t\t\t\tclient.Secret = []byte(\"foo\")\n\t\t\t\tclient.Public = false\n\t\t\t\thasher.EXPECT().Compare(gomock.Any(), gomock.Eq([]byte(\"foo\")), gomock.Eq([]byte(\"bar\"))).Return(nil)\n\t\t\t\thandler.EXPECT().RevokeToken(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(nil)\n\t\t\t},\n\t\t\thandlers: RevocationHandlers{handler},\n\t\t},\n\t} {\n\t\tt.Run(fmt.Sprintf(\"case=%d\", k), func(t *testing.T) {\n\t\t\tr := &http.Request{\n\t\t\t\tHeader:   c.header,\n\t\t\t\tPostForm: c.form,\n\t\t\t\tForm:     c.form,\n\t\t\t\tMethod:   c.method,\n\t\t\t}\n\t\t\tc.mock()\n\t\t\tctx := NewContext()\n\t\t\tconfig.RevocationHandlers = c.handlers\n\t\t\terr := fosite.NewRevocationRequest(ctx, r)\n\n\t\t\tif c.expectErr != nil {\n\t\t\t\tassert.EqualError(t, err, c.expectErr.Error())\n\t\t\t} else {\n\t\t\t\tassert.NoError(t, err)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestWriteRevocationResponse(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tstore := internal.NewMockStorage(ctrl)\n\thasher := internal.NewMockHasher(ctrl)\n\tdefer ctrl.Finish()\n\n\tconfig := &Config{ClientSecretsHasher: hasher}\n\tfosite := &Fosite{Store: store, Config: config}\n\n\ttype args struct {\n\t\trw  *httptest.ResponseRecorder\n\t\terr error\n\t}\n\tcases := []struct {\n\t\tinput      args\n\t\texpectCode int\n\t}{\n\t\t{\n\t\t\tinput: args{\n\t\t\t\trw:  httptest.NewRecorder(),\n\t\t\t\terr: ErrInvalidRequest,\n\t\t\t},\n\t\t\texpectCode: ErrInvalidRequest.CodeField,\n\t\t},\n\t\t{\n\t\t\tinput: args{\n\t\t\t\trw:  httptest.NewRecorder(),\n\t\t\t\terr: ErrInvalidClient,\n\t\t\t},\n\t\t\texpectCode: ErrInvalidClient.CodeField,\n\t\t},\n\t\t{\n\t\t\tinput: args{\n\t\t\t\trw:  httptest.NewRecorder(),\n\t\t\t\terr: nil,\n\t\t\t},\n\t\t\texpectCode: http.StatusOK,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tfosite.WriteRevocationResponse(context.Background(), tc.input.rw, tc.input.err)\n\t\tassert.Equal(t, tc.expectCode, tc.input.rw.Code)\n\t}\n}\n"
        },
        {
          "name": "scope_strategy.go",
          "type": "blob",
          "size": 1.654296875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport \"strings\"\n\n// ScopeStrategy is a strategy for matching scopes.\ntype ScopeStrategy func(haystack []string, needle string) bool\n\nfunc HierarchicScopeStrategy(haystack []string, needle string) bool {\n\tfor _, this := range haystack {\n\t\t// foo == foo -> true\n\t\tif this == needle {\n\t\t\treturn true\n\t\t}\n\n\t\t// picture.read > picture -> false (scope picture includes read, write, ...)\n\t\tif len(this) > len(needle) {\n\t\t\tcontinue\n\t\t}\n\n\t\tneedles := strings.Split(needle, \".\")\n\t\thaystack := strings.Split(this, \".\")\n\t\thaystackLen := len(haystack) - 1\n\t\tfor k, needle := range needles {\n\t\t\tif haystackLen < k {\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tcurrent := haystack[k]\n\t\t\tif current != needle {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false\n}\n\nfunc ExactScopeStrategy(haystack []string, needle string) bool {\n\tfor _, this := range haystack {\n\t\tif needle == this {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\nfunc WildcardScopeStrategy(matchers []string, needle string) bool {\n\tneedleParts := strings.Split(needle, \".\")\n\tfor _, matcher := range matchers {\n\t\tmatcherParts := strings.Split(matcher, \".\")\n\t\tif len(matcherParts) > len(needleParts) {\n\t\t\tcontinue\n\t\t}\n\n\t\tvar noteq bool\n\t\tfor k, c := range matcherParts {\n\t\t\t// this is the last item and the lengths are different\n\t\t\tif k == len(matcherParts)-1 && len(matcherParts) != len(needleParts) {\n\t\t\t\tif c != \"*\" {\n\t\t\t\t\tnoteq = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif c == \"*\" && len(needleParts[k]) > 0 {\n\t\t\t\t// pass because this satisfies the requirements\n\t\t\t\tcontinue\n\t\t\t} else if c != needleParts[k] {\n\t\t\t\tnoteq = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif !noteq {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n"
        },
        {
          "name": "scope_strategy_test.go",
          "type": "blob",
          "size": 4.73046875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestHierarchicScopeStrategy(t *testing.T) {\n\tvar strategy ScopeStrategy = HierarchicScopeStrategy\n\tvar scopes = []string{}\n\n\tassert.False(t, strategy(scopes, \"foo.bar.baz\"))\n\tassert.False(t, strategy(scopes, \"foo.bar\"))\n\tassert.False(t, strategy(scopes, \"foo\"))\n\n\tscopes = []string{\"foo.bar\", \"bar.baz\", \"baz.baz.1\", \"baz.baz.2\", \"baz.baz.3\", \"baz.baz.baz\"}\n\tassert.True(t, strategy(scopes, \"foo.bar.baz\"))\n\tassert.True(t, strategy(scopes, \"baz.baz.baz\"))\n\tassert.True(t, strategy(scopes, \"foo.bar\"))\n\tassert.False(t, strategy(scopes, \"foo\"))\n\n\tassert.True(t, strategy(scopes, \"bar.baz\"))\n\tassert.True(t, strategy(scopes, \"bar.baz.zad\"))\n\tassert.False(t, strategy(scopes, \"bar\"))\n\tassert.False(t, strategy(scopes, \"baz\"))\n\n\tscopes = []string{\"fosite.key.create\", \"fosite.key.get\", \"fosite.key.delete\", \"fosite.key.update\"}\n\tassert.True(t, strategy(scopes, \"fosite.key.delete\"))\n\tassert.True(t, strategy(scopes, \"fosite.key.get\"))\n\tassert.True(t, strategy(scopes, \"fosite.key.get\"))\n\tassert.True(t, strategy(scopes, \"fosite.key.update\"))\n\n\tscopes = []string{\"hydra\", \"openid\", \"offline\"}\n\tassert.False(t, strategy(scopes, \"foo.bar\"))\n\tassert.False(t, strategy(scopes, \"foo\"))\n\tassert.True(t, strategy(scopes, \"hydra\"))\n\tassert.True(t, strategy(scopes, \"hydra.bar\"))\n\tassert.True(t, strategy(scopes, \"openid\"))\n\tassert.True(t, strategy(scopes, \"openid.baz.bar\"))\n\tassert.True(t, strategy(scopes, \"offline\"))\n\tassert.True(t, strategy(scopes, \"offline.baz.bar.baz\"))\n}\n\nfunc TestWildcardScopeStrategy(t *testing.T) {\n\tvar strategy ScopeStrategy = WildcardScopeStrategy\n\tvar scopes = []string{}\n\n\tassert.False(t, strategy(scopes, \"foo.bar.baz\"))\n\tassert.False(t, strategy(scopes, \"foo.bar\"))\n\n\tscopes = []string{\"*\"}\n\tassert.False(t, strategy(scopes, \"\"))\n\tassert.True(t, strategy(scopes, \"asdf\"))\n\tassert.True(t, strategy(scopes, \"asdf.asdf\"))\n\n\tscopes = []string{\"foo\"}\n\tassert.False(t, strategy(scopes, \"*\"))\n\tassert.False(t, strategy(scopes, \"foo.*\"))\n\tassert.False(t, strategy(scopes, \"fo*\"))\n\tassert.True(t, strategy(scopes, \"foo\"))\n\n\tscopes = []string{\"foo*\"}\n\tassert.False(t, strategy(scopes, \"foo\"))\n\tassert.False(t, strategy(scopes, \"fooa\"))\n\tassert.False(t, strategy(scopes, \"fo\"))\n\tassert.True(t, strategy(scopes, \"foo*\"))\n\n\tscopes = []string{\"foo.*\"}\n\tassert.True(t, strategy(scopes, \"foo.bar\"))\n\tassert.True(t, strategy(scopes, \"foo.baz\"))\n\tassert.True(t, strategy(scopes, \"foo.bar.baz\"))\n\tassert.False(t, strategy(scopes, \"foo\"))\n\n\tscopes = []string{\"foo.*.baz\"}\n\tassert.True(t, strategy(scopes, \"foo.*.baz\"))\n\tassert.True(t, strategy(scopes, \"foo.bar.baz\"))\n\tassert.False(t, strategy(scopes, \"foo..baz\"))\n\tassert.False(t, strategy(scopes, \"foo.baz\"))\n\tassert.False(t, strategy(scopes, \"foo\"))\n\tassert.False(t, strategy(scopes, \"foo.bar.bar\"))\n\n\tscopes = []string{\"foo.*.bar.*\"}\n\tassert.True(t, strategy(scopes, \"foo.baz.bar.baz\"))\n\tassert.False(t, strategy(scopes, \"foo.baz.baz.bar.baz\"))\n\tassert.True(t, strategy(scopes, \"foo.baz.bar.bar.bar\"))\n\tassert.False(t, strategy(scopes, \"foo.baz.bar\"))\n\tassert.True(t, strategy(scopes, \"foo.*.bar.*.*.*\"))\n\tassert.True(t, strategy(scopes, \"foo.1.bar.1.2.3.4.5\"))\n\n\tscopes = []string{\"foo.*.bar\"}\n\tassert.True(t, strategy(scopes, \"foo.bar.bar\"))\n\tassert.False(t, strategy(scopes, \"foo.bar.bar.bar\"))\n\tassert.False(t, strategy(scopes, \"foo..bar\"))\n\tassert.False(t, strategy(scopes, \"foo.bar..bar\"))\n\n\tscopes = []string{\"foo.*.bar.*.baz.*\"}\n\tassert.False(t, strategy(scopes, \"foo.*.*\"))\n\tassert.False(t, strategy(scopes, \"foo.*.bar\"))\n\tassert.False(t, strategy(scopes, \"foo.baz.*\"))\n\tassert.False(t, strategy(scopes, \"foo.baz.bar\"))\n\tassert.False(t, strategy(scopes, \"foo.b*.bar\"))\n\tassert.True(t, strategy(scopes, \"foo.bar.bar.baz.baz.baz\"))\n\tassert.True(t, strategy(scopes, \"foo.bar.bar.baz.baz.baz.baz\"))\n\tassert.False(t, strategy(scopes, \"foo.bar.bar.baz.baz\"))\n\tassert.False(t, strategy(scopes, \"foo.bar.baz.baz.baz.bar\"))\n\n\tscopes = strings.Fields(\"hydra.* openid offline  hydra\")\n\tassert.True(t, strategy(scopes, \"hydra.clients\"))\n\tassert.True(t, strategy(scopes, \"hydra.clients.get\"))\n\tassert.True(t, strategy(scopes, \"hydra\"))\n\tassert.True(t, strategy(scopes, \"offline\"))\n\tassert.True(t, strategy(scopes, \"openid\"))\n}\n\nfunc TestExactScopeStrategy2ScopeStrategy(t *testing.T) {\n\tvar strategy ScopeStrategy = ExactScopeStrategy\n\n\tscopes := []string{\"foo.bar.baz\", \"foo.bar\"}\n\tassert.True(t, strategy(scopes, \"foo.bar.baz\"))\n\tassert.True(t, strategy(scopes, \"foo.bar\"))\n\n\tassert.False(t, strategy(scopes, \"foo.bar.baz.baz\"))\n\tassert.False(t, strategy(scopes, \"foo.bar.bar\"))\n\n\tassert.False(t, strategy(scopes, \"foo.bar.baz1\"))\n\tassert.False(t, strategy(scopes, \"foo.bar1\"))\n\n\tassert.False(t, strategy([]string{}, \"foo\"))\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "session.go",
          "type": "blob",
          "size": 2.544921875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"time\"\n\n\t\"github.com/mohae/deepcopy\"\n)\n\n// Session is an interface that is used to store session data between OAuth2 requests. It can be used to look up\n// when a session expires or what the subject's name was.\ntype Session interface {\n\t// SetExpiresAt sets the expiration time of a token.\n\t//\n\t//  session.SetExpiresAt(fosite.AccessToken, time.Now().UTC().Add(time.Hour))\n\tSetExpiresAt(key TokenType, exp time.Time)\n\n\t// GetExpiresAt returns the expiration time of a token if set, or time.IsZero() if not.\n\t//\n\t//  session.GetExpiresAt(fosite.AccessToken)\n\tGetExpiresAt(key TokenType) time.Time\n\n\t// GetUsername returns the username, if set. This is optional and only used during token introspection.\n\tGetUsername() string\n\n\t// GetSubject returns the subject, if set. This is optional and only used during token introspection.\n\tGetSubject() string\n\n\t// Clone clones the session.\n\tClone() Session\n}\n\n// DefaultSession is a default implementation of the session interface.\ntype DefaultSession struct {\n\tExpiresAt map[TokenType]time.Time `json:\"expires_at\"`\n\tUsername  string                  `json:\"username\"`\n\tSubject   string                  `json:\"subject\"`\n\tExtra     map[string]interface{}  `json:\"extra\"`\n}\n\nfunc (s *DefaultSession) SetExpiresAt(key TokenType, exp time.Time) {\n\tif s.ExpiresAt == nil {\n\t\ts.ExpiresAt = make(map[TokenType]time.Time)\n\t}\n\ts.ExpiresAt[key] = exp\n}\n\nfunc (s *DefaultSession) GetExpiresAt(key TokenType) time.Time {\n\tif s.ExpiresAt == nil {\n\t\ts.ExpiresAt = make(map[TokenType]time.Time)\n\t}\n\n\treturn s.ExpiresAt[key]\n}\n\nfunc (s *DefaultSession) GetUsername() string {\n\tif s == nil {\n\t\treturn \"\"\n\t}\n\treturn s.Username\n}\n\nfunc (s *DefaultSession) SetSubject(subject string) {\n\ts.Subject = subject\n}\n\nfunc (s *DefaultSession) GetSubject() string {\n\tif s == nil {\n\t\treturn \"\"\n\t}\n\n\treturn s.Subject\n}\n\nfunc (s *DefaultSession) Clone() Session {\n\tif s == nil {\n\t\treturn nil\n\t}\n\n\treturn deepcopy.Copy(s).(Session)\n}\n\n// ExtraClaimsSession provides an interface for session to store any extra claims.\ntype ExtraClaimsSession interface {\n\t// GetExtraClaims returns a map to store extra claims.\n\t// The returned value can be modified in-place.\n\tGetExtraClaims() map[string]interface{}\n}\n\n// GetExtraClaims implements ExtraClaimsSession for DefaultSession.\n// The returned value can be modified in-place.\nfunc (s *DefaultSession) GetExtraClaims() map[string]interface{} {\n\tif s == nil {\n\t\treturn nil\n\t}\n\n\tif s.Extra == nil {\n\t\ts.Extra = make(map[string]interface{})\n\t}\n\n\treturn s.Extra\n}\n"
        },
        {
          "name": "session_test.go",
          "type": "blob",
          "size": 0.5126953125,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestSession(t *testing.T) {\n\tvar s *DefaultSession\n\tassert.Empty(t, s.GetSubject())\n\tassert.Empty(t, s.GetUsername())\n\tassert.Nil(t, s.Clone())\n}\n\nfunc TestZeroSession(t *testing.T) {\n\tvar s *DefaultSession = new(DefaultSession)\n\tassert.Empty(t, s.GetSubject())\n\tassert.Empty(t, s.GetUsername())\n\tassert.Empty(t, s.Clone())\n\tassert.Empty(t, s.GetExpiresAt(AccessToken))\n}\n"
        },
        {
          "name": "storage.go",
          "type": "blob",
          "size": 0.802734375,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\npackage fosite\n\nimport \"context\"\n\n// Storage defines fosite's minimal storage interface.\ntype Storage interface {\n\tClientManager\n}\n\n// PARStorage holds information needed to store and retrieve PAR context.\ntype PARStorage interface {\n\t// CreatePARSession stores the pushed authorization request context. The requestURI is used to derive the key.\n\tCreatePARSession(ctx context.Context, requestURI string, request AuthorizeRequester) error\n\t// GetPARSession gets the push authorization request context. The caller is expected to merge the AuthorizeRequest.\n\tGetPARSession(ctx context.Context, requestURI string) (AuthorizeRequester, error)\n\t// DeletePARSession deletes the context.\n\tDeletePARSession(ctx context.Context, requestURI string) (err error)\n}\n"
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "token",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools.go",
          "type": "blob",
          "size": 0.2216796875,
          "content": "// Copyright © 2024 Ory Corp\n// SPDX-License-Identifier: Apache-2.0\n\n//go:build tools\n// +build tools\n\npackage fosite\n\nimport (\n\t_ \"github.com/golang/mock/mockgen\"\n\t_ \"github.com/mattn/goveralls\"\n\n\t_ \"github.com/ory/go-acc\"\n)\n"
        }
      ]
    }
  ]
}