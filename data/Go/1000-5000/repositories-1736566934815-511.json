{
  "metadata": {
    "timestamp": 1736566934815,
    "page": 511,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "danielgross/whatsapp-gpt",
      "stars": 3084,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01953125,
          "content": "env/\nexamplestore.db"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2022 Daniel Gross\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.5341796875,
          "content": "# whatsapp-gpt\n* You'll need to run WhatsApp from a phone number using the golang library I'm using.\n* You'll run a dedicated browser in another window that's controlling ChatGPT.\n* Two terminals: `go run main.go`, and `python server.py`. I am extremely doubtful they will work for you on the first run.\n* You can also try `multichat.py` if you want to watch two ChatGPTs talk to each other.\n* This marks the end of the readme file; it is a bit sparse; thankfully the code is too! Just tuck in if you can... and I will try to add more here later.\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.5498046875,
          "content": "module example.com/m\n\ngo 1.19\n\nrequire (\n\tfilippo.io/edwards25519 v1.0.0 // indirect\n\tgithub.com/gorilla/websocket v1.5.0 // indirect\n\tgithub.com/mattn/go-sqlite3 v1.14.16 // indirect\n\tgithub.com/mdp/qrterminal v1.0.1 // indirect\n\tgithub.com/mdp/qrterminal/v3 v3.0.0 // indirect\n\tgo.mau.fi/libsignal v0.0.0-20221015105917-d970e7c3c9cf // indirect\n\tgo.mau.fi/whatsmeow v0.0.0-20221202110551-e067ee7293b0 // indirect\n\tgolang.org/x/crypto v0.0.0-20221012134737-56aed061732a // indirect\n\tgoogle.golang.org/protobuf v1.28.1 // indirect\n\trsc.io/qr v0.2.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 2.421875,
          "content": "filippo.io/edwards25519 v1.0.0 h1:0wAIcmJUqRdI8IJ/3eGi5/HwXZWPujYXXlkrQogz0Ek=\nfilippo.io/edwards25519 v1.0.0/go.mod h1:N1IkdkCkiLB6tki+MYJoSx2JTY9NUlxZE7eHn5EwJns=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/gorilla/websocket v1.5.0 h1:PPwGk2jz7EePpoHN/+ClbZu8SPxiqlu12wZP/3sWmnc=\ngithub.com/gorilla/websocket v1.5.0/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/mattn/go-colorable v0.1.2/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-sqlite3 v1.14.16 h1:yOQRA0RpS5PFz/oikGwBEqvAWhWg5ufRz4ETLjwpU1Y=\ngithub.com/mattn/go-sqlite3 v1.14.16/go.mod h1:2eHXhiwb8IkHr+BDWZGa96P6+rkvnG63S2DGjv9HUNg=\ngithub.com/mdp/qrterminal v1.0.1 h1:07+fzVDlPuBlXS8tB0ktTAyf+Lp1j2+2zK3fBOL5b7c=\ngithub.com/mdp/qrterminal v1.0.1/go.mod h1:Z33WhxQe9B6CdW37HaVqcRKzP+kByF3q/qLxOGe12xQ=\ngithub.com/mdp/qrterminal/v3 v3.0.0 h1:ywQqLRBXWTktytQNDKFjhAvoGkLVN3J2tAFZ0kMd9xQ=\ngithub.com/mdp/qrterminal/v3 v3.0.0/go.mod h1:NJpfAs7OAm77Dy8EkWrtE4aq+cE6McoLXlBqXQEwvE0=\ngo.mau.fi/libsignal v0.0.0-20221015105917-d970e7c3c9cf h1:mzPxXBgDPHKDHMVV1tIWh7lwCiRpzCsXC0gNRX+K07c=\ngo.mau.fi/libsignal v0.0.0-20221015105917-d970e7c3c9cf/go.mod h1:XCjaU93vl71YNRPn059jMrK0xRDwVO5gKbxoPxow9mQ=\ngo.mau.fi/whatsmeow v0.0.0-20221202110551-e067ee7293b0 h1:danzDOlj/KiDi8kNsaHOhwJ7IZdo7V7hXelkZXhJhsc=\ngo.mau.fi/whatsmeow v0.0.0-20221202110551-e067ee7293b0/go.mod h1:2yweL8nczvtlIxkrvCb0y8xiO13rveX9lJPambwYV/E=\ngolang.org/x/crypto v0.0.0-20221012134737-56aed061732a h1:NmSIgad6KjE6VvHciPZuNRTKxGhlPfD6OA87W/PLkqg=\ngolang.org/x/crypto v0.0.0-20221012134737-56aed061732a/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.28.1 h1:d0NfwRgPtno5B1Wa6L2DAG+KivqkdutMf1UhdNx175w=\ngoogle.golang.org/protobuf v1.28.1/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=\nrsc.io/qr v0.2.0 h1:6vBLea5/NRMVTz8V66gipeLycZMl/+UlFmk8DvqQ6WY=\nrsc.io/qr v0.2.0/go.mod h1:IF+uZjkb9fqyeF/4tlBoynqmQxUoPfWEKh921coOuXs=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 3.0966796875,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"github.com/mdp/qrterminal/v3\"\n\t\"go.mau.fi/whatsmeow\"\n\twaProto \"go.mau.fi/whatsmeow/binary/proto\"\n\t\"go.mau.fi/whatsmeow/store/sqlstore\"\n\t\"go.mau.fi/whatsmeow/types\"\n\t\"go.mau.fi/whatsmeow/types/events\"\n\twaLog \"go.mau.fi/whatsmeow/util/log\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype MyClient struct {\n\tWAClient       *whatsmeow.Client\n\teventHandlerID uint32\n}\n\nfunc (mycli *MyClient) register() {\n\tmycli.eventHandlerID = mycli.WAClient.AddEventHandler(mycli.eventHandler)\n}\n\nfunc (mycli *MyClient) eventHandler(evt interface{}) {\n\tswitch v := evt.(type) {\n\tcase *events.Message:\n\t\tnewMessage := v.Message\n\t\tmsg := newMessage.GetConversation()\n\t\tfmt.Println(\"Message from:\", v.Info.Sender.User, \"->\", msg)\n\t\tif msg == \"\" {\n\t\t\treturn\n\t\t}\n\t\t// Make a http request to localhost:5001/chat?q= with the message, and send the response\n\t\t// URL encode the message\n\t\turlEncoded := url.QueryEscape(msg)\n\t\turl := \"http://localhost:5001/chat?q=\" + urlEncoded\n\t\t// Make the request\n\t\tresp, err := http.Get(url)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error making request:\", err)\n\t\t\treturn\n\t\t}\n\t\t// Read the response\n\t\tbuf := new(bytes.Buffer)\n\t\tbuf.ReadFrom(resp.Body)\n\t\tnewMsg := buf.String()\n\t\t// encode out as a string\n\t\tresponse := &waProto.Message{Conversation: proto.String(string(newMsg))}\n\t\tfmt.Println(\"Response:\", response)\n\n\t\tuserJid := types.NewJID(v.Info.Sender.User, types.DefaultUserServer)\n\t\tmycli.WAClient.SendMessage(context.Background(), userJid, \"\", response)\n\n\t}\n}\n\nfunc main() {\n\tdbLog := waLog.Stdout(\"Database\", \"DEBUG\", true)\n\t// Make sure you add appropriate DB connector imports, e.g. github.com/mattn/go-sqlite3 for SQLite\n\tcontainer, err := sqlstore.New(\"sqlite3\", \"file:examplestore.db?_foreign_keys=on\", dbLog)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// If you want multiple sessions, remember their JIDs and use .GetDevice(jid) or .GetAllDevices() instead.\n\tdeviceStore, err := container.GetFirstDevice()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tclientLog := waLog.Stdout(\"Client\", \"DEBUG\", true)\n\tclient := whatsmeow.NewClient(deviceStore, clientLog)\n\t// add the eventHandler\n\tmycli := &MyClient{WAClient: client}\n\tmycli.register()\n\n\tif client.Store.ID == nil {\n\t\t// No ID stored, new login\n\t\tqrChan, _ := client.GetQRChannel(context.Background())\n\t\terr = client.Connect()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfor evt := range qrChan {\n\t\t\tif evt.Event == \"code\" {\n\t\t\t\t// Render the QR code here\n\t\t\t\t// e.g. qrterminal.GenerateHalfBlock(evt.Code, qrterminal.L, os.Stdout)\n\t\t\t\t// or just manually `echo 2@... | qrencode -t ansiutf8` in a terminal\n\t\t\t\tqrterminal.GenerateHalfBlock(evt.Code, qrterminal.L, os.Stdout)\n\t\t\t\t//\t\t\t\tfmt.Println(\"QR code:\", evt.Code)\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"Login event:\", evt.Event)\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Already logged in, just connect\n\t\terr = client.Connect()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n\t// Listen to Ctrl+C (you can also do something else that prevents the program from exiting)\n\tc := make(chan os.Signal)\n\tsignal.Notify(c, os.Interrupt, syscall.SIGTERM)\n\t<-c\n\n\tclient.Disconnect()\n}\n"
        },
        {
          "name": "multichat.py",
          "type": "blob",
          "size": 0.5966796875,
          "content": "\"\"\"Get ChatGPT to talk to itself.\"\"\"\n\nimport requests\n\n# Launch two instances of server.py\n# python3 server.py --port 5001 --profile /tmp/chat1\n# python3 server.py --port 5002 --profile /tmp/chat2\n\nmetaprompt = \"Now make that funnier.\"\nchat1 = requests.get(\"http://localhost:5001/chat?q=%s\" % \"Teach me about quantum mechanics in a 140 characters or less.\")\nwhile True:\n    chat2 = requests.get(\"http://localhost:5002/chat?q=%s\" % (chat1.text.replace(metaprompt, \"\") + \" \" + metaprompt))\n    chat1 = requests.get(\"http://localhost:5001/chat?q=%s\" % (chat2.text.replace(metaprompt, \"\") + \" \" + metaprompt))\n\n    "
        },
        {
          "name": "server.py",
          "type": "blob",
          "size": 2.0810546875,
          "content": "\"\"\"Make some requests to OpenAI's chatbot\"\"\"\n\nimport time\nimport os \nimport flask\nimport sys\n\nfrom flask import g\n\nfrom playwright.sync_api import sync_playwright\n\nPROFILE_DIR = \"/tmp/playwright\" if '--profile' not in sys.argv else sys.argv[sys.argv.index('--profile') + 1]\nPORT = 5001 if '--port' not in sys.argv else int(sys.argv[sys.argv.index('--port') + 1])\nAPP = flask.Flask(__name__)\nPLAY = sync_playwright().start()\nBROWSER = PLAY.chromium.launch_persistent_context(\n    user_data_dir=PROFILE_DIR,\n    headless=False,\n)\nPAGE = BROWSER.new_page()\n\ndef get_input_box():\n    \"\"\"Find the input box by searching for the largest visible one.\"\"\"\n    textareas = PAGE.query_selector_all(\"textarea\")\n    candidate = None\n    for textarea in textareas:\n        if textarea.is_visible():\n            if candidate is None:\n                candidate = textarea\n            elif textarea.bounding_box().width > candidate.bounding_box().width:\n                candidate = textarea\n    return candidate\n\ndef is_logged_in():\n    try:\n        return get_input_box() is not None\n    except AttributeError:\n        return False\n\ndef send_message(message):\n    # Send the message\n    box = get_input_box()\n    box.click()\n    box.fill(message)\n    box.press(\"Enter\")\n    while PAGE.query_selector(\".result-streaming\") is not None:\n        time.sleep(0.1)\n\ndef get_last_message():\n    \"\"\"Get the latest message\"\"\"\n    page_elements = PAGE.query_selector_all(\".flex.flex-col.items-center > div\")\n    last_element = page_elements[-2]\n    return last_element.inner_text()\n\n@APP.route(\"/chat\", methods=[\"GET\"])\ndef chat():\n    message = flask.request.args.get(\"q\")\n    print(\"Sending message: \", message)\n    send_message(message)\n    response = get_last_message()\n    print(\"Response: \", response)\n    return response\n\ndef start_browser():\n    PAGE.goto(\"https://chat.openai.com/\")\n    APP.run(port=PORT, threaded=False)\n    if not is_logged_in():\n        print(\"Please log in to OpenAI Chat\")\n        print(\"Press enter when you're done\")\n        input()\n    else:\n        print(\"Logged in\")\n        \nif __name__ == \"__main__\":\n    start_browser()"
        }
      ]
    }
  ]
}