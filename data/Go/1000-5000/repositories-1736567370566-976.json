{
  "metadata": {
    "timestamp": 1736567370566,
    "page": 976,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ajstarks/svgo",
      "stars": 2167,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 13.5068359375,
          "content": "Creative Commons Attribution 4.0 International Public License \n\nBy exercising the Licensed Rights (defined below), You accept and agree to\nbe bound by the terms and conditions of this Creative Commons Attribution\n4.0 International Public License (\"Public License\"). To the extent this\nPublic License may be interpreted as a contract, You are granted the\nLicensed Rights in consideration of Your acceptance of these terms and\nconditions, and the Licensor grants You such rights in consideration\nof benefits the Licensor receives from making the Licensed Material\navailable under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights\nthat is derived from or based upon the Licensed Material and in which\nthe Licensed Material is translated, altered, arranged, transformed, or\notherwise modified in a manner requiring permission under the Copyright\nand Similar Rights held by the Licensor. For purposes of this Public\nLicense, where the Licensed Material is a musical work, performance,\nor sound recording, Adapted Material is always produced where the\nLicensed Material is synched in timed relation with a moving image.\nAdapter's License means the license You apply to Your Copyright and\nSimilar Rights in Your contributions to Adapted Material in accordance\nwith the terms and conditions of this Public License.  Copyright and\nSimilar Rights means copyright and/or similar rights closely related to\ncopyright including, without limitation, performance, broadcast, sound\nrecording, and Sui Generis Database Rights, without regard to how the\nrights are labeled or categorized. For purposes of this Public License,\nthe rights specified in Section 2(b)(1)-(2) are not Copyright and Similar\nRights.  Effective Technological Measures means those measures that,\nin the absence of proper authority, may not be circumvented under laws\nfulfilling obligations under Article 11 of the WIPO Copyright Treaty\nadopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other\nexception or limitation to Copyright and Similar Rights that applies to\nYour use of the Licensed Material.  Licensed Material means the artistic\nor literary work, database, or other material to which the Licensor\napplied this Public License.  Licensed Rights means the rights granted\nto You subject to the terms and conditions of this Public License, which\nare limited to all Copyright and Similar Rights that apply to Your use\nof the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under\nthis Public License.  Share means to provide material to the public by\nany means or process that requires permission under the Licensed Rights,\nsuch as reproduction, public display, public performance, distribution,\ndissemination, communication, or importation, and to make material\navailable to the public including in ways that members of the public\nmay access the material from a place and at a time individually chosen\nby them.  Sui Generis Database Rights means rights other than copyright\nresulting from Directive 96/9/EC of the European Parliament and of the\nCouncil of 11 March 1996 on the legal protection of databases, as amended\nand/or succeeded, as well as other essentially equivalent rights anywhere\nin the world.  You means the individual or entity exercising the Licensed\nRights under this Public License. Your has a corresponding meaning.\nSection 2 – Scope.\n\nLicense grant.  Subject to the terms and conditions of this Public\nLicense, the Licensor hereby grants You a worldwide, royalty-free,\nnon-sublicensable, non-exclusive, irrevocable license to exercise the\nLicensed Rights in the Licensed Material to: reproduce and Share the\nLicensed Material, in whole or in part; and produce, reproduce, and\nShare Adapted Material.  Exceptions and Limitations. For the avoidance\nof doubt, where Exceptions and Limitations apply to Your use, this\nPublic License does not apply, and You do not need to comply with\nits terms and conditions.  Term. The term of this Public License is\nspecified in Section 6(a).  Media and formats; technical modifications\nallowed. The Licensor authorizes You to exercise the Licensed Rights in\nall media and formats whether now known or hereafter created, and to make\ntechnical modifications necessary to do so. The Licensor waives and/or\nagrees not to assert any right or authority to forbid You from making\ntechnical modifications necessary to exercise the Licensed Rights,\nincluding technical modifications necessary to circumvent Effective\nTechnological Measures. For purposes of this Public License, simply making\nmodifications authorized by this Section 2(a)(4) never produces Adapted\nMaterial.  Downstream recipients.  Offer from the Licensor – Licensed\nMaterial. Every recipient of the Licensed Material automatically receives\nan offer from the Licensor to exercise the Licensed Rights under the terms\nand conditions of this Public License.  No downstream restrictions. You\nmay not offer or impose any additional or different terms or conditions\non, or apply any Effective Technological Measures to, the Licensed\nMaterial if doing so restricts exercise of the Licensed Rights by any\nrecipient of the Licensed Material.  No endorsement. Nothing in this\nPublic License constitutes or may be construed as permission to assert\nor imply that You are, or that Your use of the Licensed Material is,\nconnected with, or sponsored, endorsed, or granted official status by,\nthe Licensor or others designated to receive attribution as provided in\nSection 3(a)(1)(A)(i).  Other rights.\n\nMoral rights, such as the right of integrity, are not licensed under\nthis Public License, nor are publicity, privacy, and/or other similar\npersonality rights; however, to the extent possible, the Licensor waives\nand/or agrees not to assert any such rights held by the Licensor to the\nlimited extent necessary to allow You to exercise the Licensed Rights, but\nnot otherwise.  Patent and trademark rights are not licensed under this\nPublic License.  To the extent possible, the Licensor waives any right\nto collect royalties from You for the exercise of the Licensed Rights,\nwhether directly or through a collecting society under any voluntary or\nwaivable statutory or compulsory licensing scheme. In all other cases\nthe Licensor expressly reserves any right to collect such royalties.\nSection 3 – License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed\nMaterial: identification of the creator(s) of the Licensed Material and\nany others designated to receive attribution, in any reasonable manner\nrequested by the Licensor (including by pseudonym if designated); a\ncopyright notice; a notice that refers to this Public License; a notice\nthat refers to the disclaimer of warranties; a URI or hyperlink to the\nLicensed Material to the extent reasonably practicable; indicate if You\nmodified the Licensed Material and retain an indication of any previous\nmodifications; and indicate the Licensed Material is licensed under this\nPublic License, and include the text of, or the URI or hyperlink to,\nthis Public License.  You may satisfy the conditions in Section 3(a)(1)\nin any reasonable manner based on the medium, means, and context in which\nYou Share the Licensed Material. For example, it may be reasonable to\nsatisfy the conditions by providing a URI or hyperlink to a resource\nthat includes the required information.  If requested by the Licensor,\nYou must remove any of the information required by Section 3(a)(1)(A)\nto the extent reasonably practicable.  If You Share Adapted Material You\nproduce, the Adapter's License You apply must not prevent recipients of\nthe Adapted Material from complying with this Public License.  Section 4\n– Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply\nto Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to\nextract, reuse, reproduce, and Share all or a substantial portion of the\ncontents of the database; if You include all or a substantial portion of\nthe database contents in a database in which You have Sui Generis Database\nRights, then the database in which You have Sui Generis Database Rights\n(but not its individual contents) is Adapted Material; and You must comply\nwith the conditions in Section 3(a) if You Share all or a substantial\nportion of the contents of the database.  For the avoidance of doubt,\nthis Section 4 supplements and does not replace Your obligations under\nthis Public License where the Licensed Rights include other Copyright and\nSimilar Rights.  Section 5 – Disclaimer of Warranties and Limitation\nof Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the\nextent possible, the Licensor offers the Licensed Material as-is and\nas-available, and makes no representations or warranties of any kind\nconcerning the Licensed Material, whether express, implied, statutory,\nor other. This includes, without limitation, warranties of title,\nmerchantability, fitness for a particular purpose, non-infringement,\nabsence of latent or other defects, accuracy, or the presence or absence\nof errors, whether or not known or discoverable. Where disclaimers of\nwarranties are not allowed in full or in part, this disclaimer may not\napply to You.  To the extent possible, in no event will the Licensor\nbe liable to You on any legal theory (including, without limitation,\nnegligence) or otherwise for any direct, special, indirect, incidental,\nconsequential, punitive, exemplary, or other losses, costs, expenses,\nor damages arising out of this Public License or use of the Licensed\nMaterial, even if the Licensor has been advised of the possibility of\nsuch losses, costs, expenses, or damages. Where a limitation of liability\nis not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above\nshall be interpreted in a manner that, to the extent possible, most\nclosely approximates an absolute disclaimer and waiver of all liability.\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar\nRights licensed here. However, if You fail to comply with this\nPublic License, then Your rights under this Public License terminate\nautomatically.  Where Your right to use the Licensed Material has\nterminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is\ncured within 30 days of Your discovery of the violation; or upon express\nreinstatement by the Licensor.  For the avoidance of doubt, this Section\n6(b) does not affect any right the Licensor may have to seek remedies\nfor Your violations of this Public License.  For the avoidance of doubt,\nthe Licensor may also offer the Licensed Material under separate terms\nor conditions or stop distributing the Licensed Material at any time;\nhowever, doing so will not terminate this Public License.  Sections 1,\n5, 6, 7, and 8 survive termination of this Public License.  Section 7\n– Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or\nconditions communicated by You unless expressly agreed.  Any arrangements,\nunderstandings, or agreements regarding the Licensed Material not stated\nherein are separate from and independent of the terms and conditions of\nthis Public License.  Section 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be\ninterpreted to, reduce, limit, restrict, or impose conditions on any use\nof the Licensed Material that could lawfully be made without permission\nunder this Public License.  To the extent possible, if any provision of\nthis Public License is deemed unenforceable, it shall be automatically\nreformed to the minimum extent necessary to make it enforceable. If\nthe provision cannot be reformed, it shall be severed from this Public\nLicense without affecting the enforceability of the remaining terms\nand conditions.  No term or condition of this Public License will be\nwaived and no failure to comply consented to unless expressly agreed\nto by the Licensor.  Nothing in this Public License constitutes or may\nbe interpreted as a limitation upon, or waiver of, any privileges and\nimmunities that apply to the Licensor or You, including from the legal\nprocesses of any jurisdiction or authority.  Creative Commons is not\na party to its public licenses. Notwithstanding, Creative Commons may\nelect to apply one of its public licenses to material it publishes and\nin those instances will be considered the “Licensor.” The text of\nthe Creative Commons public licenses is dedicated to the public domain\nunder the CC0 Public Domain Dedication. Except for the limited purpose of\nindicating that material is shared under a Creative Commons public license\nor as otherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark “Creative Commons” or any other trademark or\nlogo of Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements, understandings,\nor agreements concerning use of licensed material. For the avoidance of\ndoubt, this paragraph does not form part of the public licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n"
        },
        {
          "name": "LICENSE-link.txt",
          "type": "blob",
          "size": 0.1767578125,
          "content": "The contents of this repository are Licensed under \nthe Creative Commons Attribution 4.0 International license as described in\nhttps://creativecommons.org/licenses/by/4.0/legalcode\n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 26.755859375,
          "content": "# SVGo: A Go library for SVG generation #\n\nThe library generates SVG as defined by the Scalable Vector Graphics 1.1 Specification (<http://www.w3.org/TR/SVG11/>). \nOutput goes to the specified io.Writer.\n\n## Supported SVG elements and functions ##\n\n### Shapes, lines, text\n \n circle, ellipse, polygon, polyline, rect (including roundrects), line, text\n \n### Paths \n \n general, arc, cubic and quadratic bezier paths, \n \n### Image and Gradients\n \n image, linearGradient, radialGradient, \n \n### Transforms ###\n \n translate, rotate, scale, skewX, skewY\n\n ### Animation ###\n animate, animateMotion, animateTranslate, animateRotate, animateScale, animateSkewX, animateSkewY\n \n### Filter Effects \n \n filter, feBlend, feColorMatrix, feColorMatrix, feComponentTransfer, feComposite, feConvolveMatrix, feDiffuseLighting,\n feDisplacementMap, feDistantLight, feFlood, feGaussianBlur, feImage, feMerge, feMorphology, feOffset, fePointLight,\n feSpecularLighting, feSpotLight,feTile, feTurbulence\n\n\n### Metadata elements ###\n\n desc, defs, g (style, transform, id), marker, mask, pattern, title, (a)ddress, link, script, use\n\n## Building and Usage ##\n\nSee svgdef.[svg|png|pdf] for a graphical view of the function calls\n\n\nUsage: (assuming GOPATH is set)\n\n\tgo get github.com/ajstarks/svgo\n\tgo install github.com/ajstarks/svgo/...\n\t\n\t\nYou can use godoc to browse the documentation from the command line:\n\n\t$ go doc github.com/ajstarks/svgo\n\t\n\na minimal program, to generate SVG to standard output.\n\n\tpackage main\n\t\n\timport (\n\t\t\"github.com/ajstarks/svgo\"\n\t\t\"os\"\n\t)\n\t\n\tfunc main() {\n\t\twidth := 500\n\t\theight := 500\n\t\tcanvas := svg.New(os.Stdout)\n\t\tcanvas.Start(width, height)\n\t\tcanvas.Circle(width/2, height/2, 100)\n\t\tcanvas.Text(width/2, height/2, \"Hello, SVG\", \"text-anchor:middle;font-size:30px;fill:white\")\n\t\tcanvas.End()\n\t}\n\nDrawing in a web server: (http://localhost:2003/circle)\n\n\tpackage main\n\t\n\timport (\n\t\t\"log\"\n\t\t\"github.com/ajstarks/svgo\"\n\t\t\"net/http\"\n\t)\n\t\n\tfunc main() {\n\t\thttp.Handle(\"/circle\", http.HandlerFunc(circle))\n\t\terr := http.ListenAndServe(\":2003\", nil)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"ListenAndServe:\", err)\n\t\t}\n\t}\n\t\n\tfunc circle(w http.ResponseWriter, req *http.Request) {\n\t  w.Header().Set(\"Content-Type\", \"image/svg+xml\")\n\t  s := svg.New(w)\n\t  s.Start(500, 500)\n\t  s.Circle(250, 250, 125, \"fill:none;stroke:black\")\n\t  s.End()\n\t}\n\nYou may view the SVG output with a browser that supports SVG (tested on Chrome, Opera, Firefox and Safari), or any other SVG user-agent such as Batik Squiggle.\n\n### Graphics Sketching with SVGo and svgplay ###\n\nCombined with the svgplay command, SVGo can be used to \"sketch\" with code in a browser.  \n\nTo use svgplay and SVGo, first go to a directory with your code, and run:\n\n\t$ svgplay\n\t2014/06/25 22:05:28 ☠ ☠ ☠ Warning: this server allows a client connecting to 127.0.0.1:1999 to execute code on this computer ☠ ☠ ☠\t\n\t\nNext open your browser to the svgplay server you just started.\nsvgplay only listens on localhost, and uses port 1999 (guess which year SVG was first introduced) by default\n\n\thttp://localhost:1999/\n\nEnter your code in the textarea, and when you are ready to run press Shift--Enter.  The code will be compiled, with the results\non the right.  To update, change the code and repeat. Note that compilation errors are shown in red under the code. In order for svgplay/SVGo to work, make sure that the io.Writer specified with the New function is os.Stdout.\n\n\nIf you want to sketch with an existing file, enter its URL:\n\n\thttp://localhost:1999/foo.go\n\t\n![SVGplay](https://farm4.staticflickr.com/3859/14322978157_31c0114850.jpg)\n\n\n### SVGo Papers and presentations  ###\n\n* SVGo paper from SVGOpen 2011 <http://www.svgopen.org/2011/papers/34-SVGo_a_Go_Library_for_SVG_generation>\n\n* Programming Pictures with SVGo <https://speakerdeck.com/u/ajstarks/p/programming-pictures-with-svgo>\n\n* SVGo Workshop <https://speakerdeck.com/u/ajstarks/p/svgo-workshop>\n\n\n### Tutorial Video ###\n\nA video describing how to use the package can be seen on YouTube at <http://www.youtube.com/watch?v=ze6O2Dj5gQ4>\n\n## Package contents ##\n\n* svg.go:\t\tLibrary\n* newsvg:\t\tCoding template command\n* svgdef:\tCreates a SVG representation of the API\n* animate:  Animation demo\n* am: Animate motion demo\n* amt: Animate transformation demo\n* android:\tThe Android logo\n* bubtrail: Bubble trails\n* bulletgraph:\tBullet Graphs (via Stephen Few)\n* colortab: Display SVG named colors with RGB values\n* compx:  Component diagrams\n* flower:\tRandom \"flowers\"\n* fontcompare:\tCompare two fonts\n* f50:\t\tGet 50 photos from Flickr based on a query\n* fe:\tFilter effects\n* funnel:\tFunnel from transparent circles\n* gradient:\tLinear and radial gradients\n* html5logo:\tHTML5 logo with draggable elements\n* imfade:\tShow image fading\n* lewitt:\tVersion of Sol Lewitt's Wall Drawing 91\n* ltr:\t\tLayer Tennis Remixes\n* marker: Test markers\n* paths:\t\tDemonstrate SVG paths\n* pattern:\tTest patterns\n* planets:\tShow the scale of the Solar system\n* pmap:\t\tProportion maps\n* randcomp:\tCompare random number generators\n* richter:\tGerhard Richter's 256 colors\n* rl:\t\t\tRandom lines (port of a Processing demo)\n* skewabc:\t\tSkew ABC\n* span:\t\tText span\n* stockproduct:\tVisualize product and stock prices\n* svgopher:\tSVGo Mascot\n* svgplay: SVGo sketching server\n* svgplot:\t\tPlot data\n* svgrid:\tCompose SVG files in a grid\n* tsg:  Twitter Search Grid\n* tumblrgrid:\tTumblr picture grid\n* turbulence:\tTurbulence filter effect\n* vismem:\tVisualize data from files\n* webfonts:\t\"Hello, World\" with Google Web Fonts\n* websvg:\tGenerate SVG as a web server\n\n\n## Functions and types ##\n\nMany functions use x, y to specify an object's location, and w, h to specify the object's width and height.\nWhere applicable, a final optional argument specifies the style to be applied to the object. \nThe style strings follow the SVG standard; name:value pairs delimited by semicolons, or a\nseries of name=\"value\" pairs. For example: `\"fill:none; opacity:0.3\"` or  `fill=\"none\" opacity=\"0.3\"` (see: <http://www.w3.org/TR/SVG11/styling.html>)\n\nThe SVG type:\n\n\ttype SVG struct {\n        Writer   io.Writer\n\t}\n\nMost operations are methods on this type, specifying the destination io.Writer.\n\nThe Offcolor type:\n\n\ttype Offcolor struct {\n\t\tOffset  uint8\n\t\tColor   string\n\t\tOpacity float64\n\t}\n\nis used to specify the offset, color, and opacity of stop colors in linear and radial gradients\n\nThe Filterspec type:\n\n\ttype Filterspec struct {\n\t\tIn string\n\t\tIn2 string\n\t\tResult string\n\t}\n\t\nis used to specify inputs and results for filter effects\n\n\n### Structure, Scripting, Metadata, Transformation and Links ###\n\n\tNew(w io.Writer) *SVG\n  Constructor, Specify the output destination.\n  \n\tStart(w int, h int, attributes ...string)\n  begin the SVG document with the width w and height h. Optionally add additional elements\n  (such as additional namespaces or scripting events)\n  <http://www.w3.org/TR/SVG11/struct.html#SVGElement>\n  \n\tStartview(w, h, minx, miny, vw, vh int)\n  begin the SVG document with the width w, height h, with a viewBox at minx, miny, vw, vh.\n  <http://www.w3.org/TR/SVG11/struct.html#SVGElement>\n  \n\tStartunit(w int, h int, unit string, ns ...string)\n  begin the SVG document, with width and height in the specified units. Optionally add additional elements\n  (such as additional namespaces or scripting events)\n  <http://www.w3.org/TR/SVG11/struct.html#SVGElement>\n\n  \n\tStartpercent(w int, h int, ns ...string)\n  begin the SVG document, with width and height in percent. Optionally add additional elements\n  (such as additional namespaces or scripting events)\n  <http://www.w3.org/TR/SVG11/struct.html#SVGElement>\n\n  \n\tStartviewUnit(w, h int, unit string, minx, miny, vw, vh int)\n   begin the SVG document with the width w, height h, in the specified unit, with a viewBox at minx, miny, vw, vh.\n  <http://www.w3.org/TR/SVG11/struct.html#SVGElement>\n\n\tEnd()\n  end the SVG document\n  \n\tScript(scriptype string, data ...string)\n Script defines a script with a specified type, (for example \"application/javascript\").\n if the first variadic argument is a link, use only the link reference.\n Otherwise, treat variadic arguments as the text of the script (marked up as CDATA).\n if no data is specified, simply close the script element.\n  <http://www.w3.org/TR/SVG/script.html>\n  \n  \tStyle(scriptype string, data ...string)\n Style defines a script with a specified type, (for example \"text/css\").\n if the first variadic argument is a link, use only the link reference.\n Otherwise, treat variadic arguments as the text of the script (marked up as CDATA).\n if no data is specified, simply close the style element.\n  <https://www.w3.org/TR/SVG/styling.html#StyleElement>\n  \n\tGroup(s ...string)\n  begin a group, with arbitrary attributes\n  <http://www.w3.org/TR/SVG11/struct.html#GElement>\n\n\tGstyle(s string)\n  begin a group, with the specified style.\n  <http://www.w3.org/TR/SVG11/struct.html#GElement>\n\n\tGid(s string)\n   begin a group, with the specified id.\n\n\tGtransform(s string)\n  begin a group, with the specified transform, end with Gend().\n  <http://www.w3.org/TR/SVG11/coords.html#TransformAttribute>\n\n\tTranslate(x, y int)\n  begins coordinate translation to (x,y), end with Gend().\n  <http://www.w3.org/TR/SVG11/coords.html#TransformAttribute>\n\n\tScale(n float64)\n  scales the coordinate system by n, end with Gend().\n  <http://www.w3.org/TR/SVG11/coords.html#TransformAttribute>\n  \n\tScaleXY(x, y float64)\n   scales the coordinate system by x, y. End with Gend().\n   <http://www.w3.org/TR/SVG11/coords.html#TransformAttribute>\n   \n\tSkewX(a float64)\n   SkewX skews the x coordinate system by angle a, end with Gend().\n   <http://www.w3.org/TR/SVG11/coords.html#TransformAttribute>\n   \n\tSkewY(a float64)\n   SkewY skews the y coordinate system by angle a, end with Gend().\n   <http://www.w3.org/TR/SVG11/coords.html#TransformAttribute>\n   \n\tSkewXY(ax, ay float64)\n   SkewXY skews x and y coordinate systems by ax, ay respectively, end with Gend().\n   <http://www.w3.org/TR/SVG11/coords.html#TransformAttribute>\n\n\tRotate(r float64)\n  rotates the coordinate system by r degrees, end with Gend().\n  <http://www.w3.org/TR/SVG11/coords.html#TransformAttribute>\n\n\tTranslateRotate(x, y int, r float64)\n   translates the coordinate system to (x,y), then rotates to r degrees, end with Gend().\n\t\n\tRotateTranslate(x, y int, r float64)\n   rotates the coordinate system r degrees, then translates to (x,y), end with Gend().\n\n\tGend()\n   end the group (must be paired with Gstyle, Gtransform, Gid).\n\n\tClipPath(s ...string)\n  Begin a ClipPath\n  <http://www.w3.org/TR/SVG/masking.html#ClippingPaths>\n\n\tClipEnd()\n  End a ClipPath\n  <http://www.w3.org/TR/SVG/masking.html#ClippingPaths>\n\n\tDef()\n  begin a definition block.\n  <http://www.w3.org/TR/SVG11/struct.html#DefsElement>\n\n\tDefEnd()\n  end a definition block.\n\n\tMarker(id string, x, y, w, h int, s ...string)\n  define a marker\n  <http://www.w3.org/TR/SVG11/painting.html#MarkerElement>\n\n\n\tMarkerEnd()\n  end a marker\n  \n  \n\tMask(id string, x int, y int, w int, h int, s ...string)\n  creates a mask with a specified id, dimension, and optional style.\n  <http://www.w3.org/TR/SVG/masking.html>\n  \n\tMaskEnd()\n  ends the Mask element.\n\n\n\tPattern(id string, x, y, width, height int, putype string, s ...string)\n define a Pattern with the specified dimensions, the putype can be either \"user\" or \"obj\", which sets the patternUnits\n attribute to be either userSpaceOnUse or objectBoundingBox.\n <http://www.w3.org/TR/SVG11/pservers.html#Patterns>\n\n\tDesc(s string)\n  specify the text of the description.\n  <http://www.w3.org/TR/SVG11/struct.html#DescElement>\n\n\tTitle(s string)\n  specify the text of the title.\n  <http://www.w3.org/TR/SVG11/struct.html#TitleElement>\n\n\tLink(href string, title string)\n  begin a link named \"href\", with the specified title.\n  <http://www.w3.org/TR/SVG11/linking.html#Links>\n\n\tLinkEnd()\n  end the link.\n\n\tUse(x int, y int, link string, s ...string)\n  place the object referenced at link at the location x, y.\n  <http://www.w3.org/TR/SVG11/struct.html#UseElement>\n\n### Shapes ###\n\n\tCircle(x int, y int, r int, s ...string)\n  draw a circle, centered at x,y with radius r.\n  <http://www.w3.org/TR/SVG11/shapes.html#CircleElement>\n  \n  ![Circle](http://farm5.static.flickr.com/4144/5187953823_01a1741489_m.jpg)\n  \n\tEllipse(x int, y int, w int, h int, s ...string)\n  draw an ellipse, centered at x,y with radii w, and h.\n  <http://www.w3.org/TR/SVG11/shapes.html#EllipseElement>\n  \n  ![Ellipse](http://farm2.static.flickr.com/1271/5187953773_a9d1fc406c_m.jpg)\n \n\tPolygon(x []int, y []int, s ...string)\n  draw a series of line segments using an array of x, y coordinates.\n  <http://www.w3.org/TR/SVG11/shapes.html#PolygonElement>\n  \n  ![Polygon](http://farm2.static.flickr.com/1006/5187953873_337dc26597_m.jpg)\n \n\tRect(x int, y int, w int, h int, s ...string)\n  draw a rectangle with upper left-hand corner at x,y, with width w, and height h.\n  <http://www.w3.org/TR/SVG11/shapes.html#RectElement>\n  \n  ![Rect](http://farm2.static.flickr.com/1233/5188556032_86c90e354b_m.jpg)\n  \n\tCenterRect(x int, y int, w int, h int, s ...string)\n draw a rectangle with its center at x,y, with width w, and height h.\n\n\tRoundrect(x int, y int, w int, h int, rx int, ry int, s ...string)\n  draw a rounded rectangle with upper the left-hand corner at x,y, \n  with width w, and height h. The radii for the rounded portion \n  is specified by rx (width), and ry (height).\n  \n  ![Roundrect](http://farm2.static.flickr.com/1275/5188556120_e2a9998fee_m.jpg)\n  \n\tSquare(x int, y int, s int, style ...string)\n  draw a square with upper left corner at x,y with sides of length s.\n  \n  ![Square](http://farm5.static.flickr.com/4110/5187953659_54dcce242e_m.jpg)\n\n### Paths ###\n\n\tPath(p string, s ...style)\n draw the arbitrary path as specified in p, according to the style specified in s. <http://www.w3.org/TR/SVG11/paths.html>\n\n \n\tArc(sx int, sy int, ax int, ay int, r int, large bool, sweep bool, ex int, ey int, s ...string)\n  draw an elliptical arc beginning coordinate at sx,sy, ending coordinate at ex, ey\n  width and height of the arc are specified by ax, ay, the x axis rotation is r\n  \n  if sweep is true, then the arc will be drawn in a \"positive-angle\" direction (clockwise), \n  if false, the arc is drawn counterclockwise.\n  \n  if large is true, the arc sweep angle is greater than or equal to 180 degrees, \n  otherwise the arc sweep is less than 180 degrees.\n  <http://www.w3.org/TR/SVG11/paths.html#PathDataEllipticalArcCommands>\n  \n   ![Arc](http://farm2.static.flickr.com/1300/5188556148_df1a176074_m.jpg)\n\n\n \n\tBezier(sx int, sy int, cx int, cy int, px int, py int, ex int, ey int, s ...string)\n  draw a cubic bezier curve, beginning at sx,sy, ending at ex,ey\n  with control points at cx,cy and px,py.\n  <http://www.w3.org/TR/SVG11/paths.html#PathDataCubicBezierCommands>\n  \n  ![Bezier](http://farm2.static.flickr.com/1233/5188556246_a03e67d013.jpg)\n\n\n \n\tQbezier(sx int, sy int, cx int, cy int, ex int, ey int, tx int, ty int, s ...string)\n  draw a quadratic bezier curve, beginning at sx, sy, ending at tx,ty\n  with control points are at cx,cy, ex,ey.\n  <http://www.w3.org/TR/SVG11/paths.html#PathDataQuadraticBezierCommands>\n  \n   ![Qbezier](http://farm2.static.flickr.com/1018/5187953917_9a43cf64fb.jpg)\n  \n \n\tQbez(sx int, sy int, cx int, cy int, ex int, ey int, s...string)\n   draws a quadratic bezier curver, with optional style beginning at sx,sy, ending at ex, sy\n   with the control point at cx, cy.\n   <http://www.w3.org/TR/SVG11/paths.html#PathDataQuadraticBezierCommands>\n   \n   ![Qbez](http://farm6.static.flickr.com/5176/5569879349_5f726aab5e.jpg)\n\n### Lines ###\n\n\tLine(x1 int, y1 int, x2 int, y2 int, s ...string)\n  draw a line segment between x1,y1 and x2,y2.\n  <http://www.w3.org/TR/SVG11/shapes.html#LineElement>\n \n ![Line](http://farm5.static.flickr.com/4154/5188556080_0be19da0bc.jpg)\n\n \n\tPolyline(x []int, y []int, s ...string)\n  draw a polygon using coordinates specified in x,y arrays.\n  <http://www.w3.org/TR/SVG11/shapes.html#PolylineElement>\n \n ![Polyline](http://farm2.static.flickr.com/1266/5188556384_a863273a69.jpg)\n\n### Image and Text ###\n\n\tImage(x int, y int, w int, h int, link string, s ...string)\n  place at x,y (upper left hand corner), the image with width w, and height h, referenced at link.\n  <http://www.w3.org/TR/SVG11/struct.html#ImageElement>\n \n ![Image](http://farm5.static.flickr.com/4058/5188556346_e5ce3dcbc2_m.jpg)\n\n\tText(x int, y int, t string, s ...string)\n  Place the specified text, t at x,y according to the optional style specified in s.\n  <http://www.w3.org/TR/SVG11/text.html#TextElement>\n\n\tTextspan(x int, y int, t string, s ...string)\nPlace specified text, t at x,y according to the optional style specified in s.\n<https://www.w3.org/TR/SVG11/text.html#TSpanElement>\nUse this method with Span(...). End with TextEnd()\n\n\tSpan(t string, s ...string)\nCreate a text span t, using optional style s\n\n\tTextEnd()\nEnd a text span\n  \n\tTextlines(x, y int, s []string, size, spacing int, fill, align string)\n Places lines of text in s, starting at x,y, at the specified size, fill, and alignment, and spacing.\n    \n\tTextpath(t string, pathid string, s ...string)\n  places optionally styled text along a previously defined path.\n  <http://www.w3.org/TR/SVG11/text.html#TextPathElement>\n  ![Image](http://farm4.static.flickr.com/3149/5694580737_4b291df768_m.jpg)\n  \n### Color ###\n\n\tRGB(r int, g int, b int) string\n  creates a style string for the fill color designated \n  by the (r)ed, g(reen), (b)lue components.\n  <http://www.w3.org/TR/css3-color/>\n  \n\tRGBA(r int, g int, b int, a float64) string\n  as above, but includes the color's opacity as a value\n  between 0.0 (fully transparent) and 1.0 (opaque).\n  \n### Gradients ###\n\n\tLinearGradient(id string, x1, y1, x2, y2 uint8, sc []Offcolor)\n  constructs a linear color gradient identified by id, \n  along the vector defined by (x1,y1), and (x2,y2).\n  The stop color sequence defined in sc. Coordinates are expressed as percentages.\n  <http://www.w3.org/TR/SVG11/pservers.html#LinearGradients>\n  ![LinearGradient](http://farm5.static.flickr.com/4153/5187954033_3972f63fa9.jpg) \n  \n\tRadialGradient(id string, cx, cy, r, fx, fy uint8, sc []Offcolor)\n  constructs a radial color gradient identified by id, \n  centered at (cx,cy), with a radius of r.\n  (fx, fy) define the location of the focal point of the light source. \n  The stop color sequence defined in sc.\n  Coordinates are expressed as percentages.\n  <http://www.w3.org/TR/SVG11/pservers.html#RadialGradients>\n  \n  ![RadialGradient](http://farm2.static.flickr.com/1302/5187954065_7ddba7b819.jpg)\n\n### Animation ###\n\n\tAnimate(link, attr string, from, to int, duration float64, repeat int, s ...string)\nAnimate animates the item referenced by the link, using the specified attribute\nThe animation starts at coordinate from, terminates at to, and repeats as specified.\nAddtional attributes may be added as needed.\n<https://www.w3.org/TR/SVG11/animate.html#AnimateElement>\n\n\tAnimateMotion(link, path string, duration float64, repeat int, s ...string) \nAnimateMotion animates the referenced object ```link``` along the specified ```path```\n<https://www.w3.org/TR/SVG11/animate.html#AnimateMotionElement>\n\n\t\n\tAnimateTranslate(link string, fx, fy, tx, ty int, duration float64, repeat int, s ...string)\nAnimateTranslate animates the translation transformation (link refers to the object to animate, fx, fy are from coordinates, tx, ty are the to coordinates)\n<https://www.w3.org/TR/SVG11/animate.html#AnimateTransformElement>\n\t\n\tAnimateRotate(link string, fs, fc, fe, ts, tc, te int, duration float64, repeat int, s ...string)\nAnimateRotate animates the rotation transformation (link refers to the object to animate, f[s,c,e] are the from start, center, and end angles, t[s,c,e] are the \nstart, center, and end angles)\n<https://www.w3.org/TR/SVG11/animate.html#AnimateTransformElement>\n\n\t\n\tAnimateScale(link string, from, to, duration float64, repeat int, s ...string)\nAnimateScale animates the scale transformation (link refers to the object to animate, from and to specify the scaling factor)\n<https://www.w3.org/TR/SVG11/animate.html#AnimateTransformElement>\n\n\t\n\tAnimateSkewX(link string, from, to, duration float64, repeat int, s ...string)\nAnimateSkewX animates the skewX transformation ((link refers to the object to animate, from and to specify the skew angle)\n<https://www.w3.org/TR/SVG11/animate.html#AnimateTransformElement>\n\n\t\n\tAnimateSkewY(link string, from, to, duration float64, repeat int, s ...string)\nAnimateSkewY animates the skewY transformation (link refers to the object to animate, and from and to specify the skew angle)\n<https://www.w3.org/TR/SVG11/animate.html#AnimateTransformElement>\n\n  \n### Filter Effects ###\n\n\tFilter(id string, s ...string)\n Filter begins a filter set\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#FilterElement>\n\n \tFend() \nFend ends a filter set\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#FilterElement>\n\n \tFeBlend(fs Filterspec, mode string, s ...string) \nFeBlend specifies a Blend filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feBlendElement>\n\n \tFeColorMatrix(fs Filterspec, values [20]float64, s ...string)\t\nFeColorMatrix specifies a color matrix filter primitive, with matrix values\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feColorMatrixElement>\n\n \tFeColorMatrixHue(fs Filterspec, value float64, s ...string)  \t\nFeColorMatrix specifies a color matrix filter primitive, with hue values\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feColorMatrixElement>\n\n \tFeColorMatrixSaturate(fs Filterspec, value float64, s ...string) \nFeColorMatrix specifies a color matrix filter primitive, with saturation values\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feColorMatrixElement>\n\n \tFeColorMatrixLuminence(fs Filterspec, s ...string) \nFeColorMatrix specifies a color matrix filter primitive, with luminence values\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feColorMatrixElement> \t\n \t\n \tFeComponentTransfer()  \t\nFeComponentTransfer begins a feComponent filter Element>\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement>\n\n \tFeCompEnd()\nFeCompEnd ends a feComponent filter Element>\n \n \tFeComposite(fs Filterspec, operator string, k1, k2, k3, k4 int, s ...string)\nFeComposite specifies a feComposite filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feCompositeElement>\n\n \tFeConvolveMatrix(fs Filterspec, matrix [9]int, s ...string)\nFeConvolveMatrix specifies a feConvolveMatrix filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feConvolveMatrixElement>\n\n\n\t FeDiffuseLighting(fs Filterspec, scale, constant float64, s ...string) \nFeDiffuseLighting specifies a diffuse lighting filter primitive, \na container for light source Element>s, end with DiffuseEnd()\n\n\t FeDiffEnd()\nFeDiffuseEnd ends a diffuse lighting filter primitive container\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feDiffuseLightingElement>\n\n\n\t FeDisplacementMap(fs Filterspec, scale float64, xchannel, ychannel string, s ...string)\nFeDisplacementMap specifies a feDisplacementMap filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feDisplacementMapElement>\n\n\t FeDistantLight(fs Filterspec, azimuth, elevation float64, s ...string)\nFeDistantLight specifies a feDistantLight filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feDistantLightElement>\n\n\t FeFlood(fs Filterspec, color string, opacity float64, s ...string)\nFeFlood specifies a flood filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feFloodElement>\n\n\tFeFuncLinear(channel string, slope, intercept float64)\nFeFuncLinear is the linear form of feFunc\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement>\n\n\t FeFuncGamma(channel, amplitude, exponent, offset float64)\nFeFuncGamma is the gamma curve form of feFunc\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement>\n\n\tFeFuncTable(channel string, tv []float64)\nFeFuncGamma is the form of feFunc using a table of values\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement>\n\t\n\tFeFuncDiscrete(channel string, tv []float64)\nFeFuncGamma is the form of feFunc using discrete values\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement>\n\n\t FeGaussianBlur(fs Filterspec, stdx, stdy float64, s ...string)\nFeGaussianBlur specifies a Gaussian Blur filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feGaussianBlurElement>\n\n\t FeImage(href string, result string, s ...string)\nFeImage specifies a feImage filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feImageElement>\n\n\t FeMerge(nodes []string, s ...string)\nFeMerge specifies a feMerge filter primitive, containing feMerge Element>s\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feMergeElement>\n\n\t FeMorphology(fs Filterspec, operator string, xradius, yradius float64, s ...string)\nFeMorphologyLight specifies a feMorphologyLight filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feMorphologyElement>\n\n\t FeOffset(fs Filterspec, dx, dy int, s ...string)\nFeOffset specifies the feOffset filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feOffsetElement>\n\n\t FePointLight(x, y, z float64, s ...string)\nFePointLight specifies a fePpointLight filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#fePointLightElement>\n\n\t FeSpecularLighting(fs Filterspec, scale, constant float64, exponent int, color string, s ...string)\nFeSpecularLighting specifies a specular lighting filter primitive, \na container for light source elements, end with SpecularEnd()\n\n\n\t FeSpecEnd()\nFeSpecularEnd ends a specular lighting filter primitive container\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feSpecularLightingElement>\n\n\n\t FeSpotLight(fs Filterspec, x, y, z, px, py, pz float64, s ...string)\nFeSpotLight specifies a feSpotLight filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feSpotLightElement>\n\n\t FeTile(fs Filterspec, in string, s ...string)\nFeTile specifies the tile utility filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feTileElement>\n\n\n\t FeTurbulence(fs Filterspec, ftype string, bfx, bfy float64, octaves int, seed int64, stitch bool, s ...string)\nFeTurbulence specifies a turbulence filter primitive\nStandard reference: <http://www.w3.org/TR/SVG11/filters.html#feTurbulenceElement>\n\n### Filter convenience functions (modeled on CSS filter effects) ###\n\n\tBlur(p float64)\nBlur function by standard deviation\n\n\tBrightness(p float64)\nBrightness function (0-100)\n\n\tGrayscale()\nApply a grayscale filter to the image\t\n\t\n\tHueRotate(a float64)\nRotate Hues (0-360 degrees)\n\t\n\tInvert()\nInvert the image's colors\n\t\n\tSaturate(p float64)\nPercent saturation, 0 is grayscale\n\n\tSepia()\nApply sepia tone\n\n\n### Utility ###\n\n\tGrid(x int, y int, w int, h int, n int, s ...string)\n  draws a grid of straight lines starting at x,y, with a width w, and height h, and a size of n.\n  \n  ![Grid](http://farm5.static.flickr.com/4133/5190957924_7a31d0db34.jpg)\n  \n### Credits ###\n\nThanks to Jonathan Wright for the io.Writer update.\n"
        },
        {
          "name": "am",
          "type": "tree",
          "content": null
        },
        {
          "name": "amt",
          "type": "tree",
          "content": null
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "animate",
          "type": "tree",
          "content": null
        },
        {
          "name": "barchart",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchviz",
          "type": "tree",
          "content": null
        },
        {
          "name": "bubtrail",
          "type": "tree",
          "content": null
        },
        {
          "name": "bulletgraph",
          "type": "tree",
          "content": null
        },
        {
          "name": "codepic",
          "type": "tree",
          "content": null
        },
        {
          "name": "colortab",
          "type": "tree",
          "content": null
        },
        {
          "name": "compx",
          "type": "tree",
          "content": null
        },
        {
          "name": "cube",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 2.9296875,
          "content": "/*\nPackage svg generates SVG as defined by the Scalable Vector Graphics 1.1 Specification (<http://www.w3.org/TR/SVG11/>).\nOutput goes to the specified io.Writer.\n\nSupported SVG elements and functions\n\nShapes, lines, text\n\n circle, ellipse, polygon, polyline, rect (including roundrects), line, text\n\nPaths\n\n general, arc, cubic and quadratic bezier paths,\n\nImage and Gradients\n\n image, linearGradient, radialGradient,\n\nTransforms\n\n translate, rotate, scale, skewX, skewY\n\nFilter Effects\n\n filter, feBlend, feColorMatrix, feColorMatrix, feComponentTransfer, feComposite, feConvolveMatrix, feDiffuseLighting,\n feDisplacementMap, feDistantLight, feFlood, feGaussianBlur, feImage, feMerge, feMorphology, feOffset, fePointLight,\n feSpecularLighting, feSpotLight,feTile, feTurbulence\n\n\nMetadata elements\n\n desc, defs, g (style, transform, id), mask, marker, pattern, title, (a)ddress, link, script, style, use\n\nUsage: (assuming GOPATH is set)\n\n\tgo get github.com/ajstarks/svgo\n\tgo install github.com/ajstarks/svgo/...\n\n\nYou can use godoc to browse the documentation from the command line:\n\n\t$ godoc github.com/ajstarks/svgo\n\n\na minimal program, to generate SVG to standard output.\n\n\tpackage main\n\n\timport (\n\t\t\"github.com/ajstarks/svgo\"\n\t\t\"os\"\n\t)\n\n\tfunc main() {\n\t\twidth := 500\n\t\theight := 500\n\t\tcanvas := svg.New(os.Stdout)\n\t\tcanvas.Start(width, height)\n\t\tcanvas.Circle(width/2, height/2, 100)\n\t\tcanvas.Text(width/2, height/2, \"Hello, SVG\", \"text-anchor:middle;font-size:30px;fill:white\")\n\t\tcanvas.End()\n\t}\n\nDrawing in a web server: (http://localhost:2003/circle)\n\n\tpackage main\n\n\timport (\n\t\t\"log\"\n\t\t\"github.com/ajstarks/svgo\"\n\t\t\"net/http\"\n\t)\n\n\tfunc main() {\n\t\thttp.Handle(\"/circle\", http.HandlerFunc(circle))\n\t\terr := http.ListenAndServe(\":2003\", nil)\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"ListenAndServe:\", err)\n\t\t}\n\t}\n\n\tfunc circle(w http.ResponseWriter, req *http.Request) {\n\t  w.Header().Set(\"Content-Type\", \"image/svg+xml\")\n\t  s := svg.New(w)\n\t  s.Start(500, 500)\n\t  s.Circle(250, 250, 125, \"fill:none;stroke:black\")\n\t  s.End()\n\t}\n\nFunctions and types\n\nMany functions use x, y to specify an object's location, and w, h to specify the object's width and height.\nWhere applicable, a final optional argument specifies the style to be applied to the object.\nThe style strings follow the SVG standard; name:value pairs delimited by semicolons, or a\nseries of name=\"value\" pairs. For example: `\"fill:none; opacity:0.3\"` or  `fill=\"none\" opacity=\"0.3\"` (see: <http://www.w3.org/TR/SVG11/styling.html>)\n\nThe SVG type:\n\n\ttype SVG struct {\n        Writer   io.Writer\n\t}\n\t\nMost operations are methods on this type, specifying the destination io.Writer.\n\nThe Offcolor type:\n\n\ttype Offcolor struct {\n\t\tOffset  uint8\n\t\tColor   string\n\t\tOpacity float64\n\t}\n\nis used to specify the offset, color, and opacity of stop colors in linear and radial gradients\n\nThe Filterspec type:\n\n\ttype Filterspec struct {\n\t\tIn string\n\t\tIn2 string\n\t\tResult string\n\t}\n\nis used to specify inputs and results for filter effects\n\n*/\npackage svg\n"
        },
        {
          "name": "f50",
          "type": "tree",
          "content": null
        },
        {
          "name": "fe",
          "type": "tree",
          "content": null
        },
        {
          "name": "float",
          "type": "tree",
          "content": null
        },
        {
          "name": "flower",
          "type": "tree",
          "content": null
        },
        {
          "name": "fontcompare",
          "type": "tree",
          "content": null
        },
        {
          "name": "funnel",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.1474609375,
          "content": "module github.com/ajstarks/svgo\n\ngo 1.15\n\nrequire (\n\tgithub.com/ajstarks/deck/generate v0.0.0-20210309230005-c3f852c02e19\n\thonnef.co/go/tools v0.1.3\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 2.9775390625,
          "content": "github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/ajstarks/deck v0.0.0-20200831202436-30c9fc6549a9 h1:7kQgkwGRoLzC9K0oyXdJo7nve/bynv/KwUsxbiTlzAM=\ngithub.com/ajstarks/deck v0.0.0-20200831202436-30c9fc6549a9/go.mod h1:JynElWSGnm/4RlzPXRlREEwqTHAN3T56Bv2ITsFT3gY=\ngithub.com/ajstarks/deck/generate v0.0.0-20210309230005-c3f852c02e19 h1:iXUgAaqDcIUGbRoy2TdeofRG/j1zpGRSEmNK05T+bi8=\ngithub.com/ajstarks/deck/generate v0.0.0-20210309230005-c3f852c02e19/go.mod h1:T13YZdzov6OU0A1+RfKZiZN9ca6VeKdBdyDV+BY97Tk=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\nhonnef.co/go/tools v0.1.3 h1:qTakTkI6ni6LFD5sBwwsdSO+AQqbSIxOauHTTQKZ/7o=\nhonnef.co/go/tools v0.1.3/go.mod h1:NgwopIslSNH47DimFoV78dnkksY2EFtX0ajyb3K/las=\n"
        },
        {
          "name": "gophercolor128x128.png",
          "type": "blob",
          "size": 12.1337890625,
          "content": null
        },
        {
          "name": "gradient",
          "type": "tree",
          "content": null
        },
        {
          "name": "html5logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "imfade",
          "type": "tree",
          "content": null
        },
        {
          "name": "lewitt",
          "type": "tree",
          "content": null
        },
        {
          "name": "ltr",
          "type": "tree",
          "content": null
        },
        {
          "name": "marker",
          "type": "tree",
          "content": null
        },
        {
          "name": "newsvg",
          "type": "blob",
          "size": 0.4990234375,
          "content": "#!/bin/sh\n\nif test $# -lt 1\nthen\n    echo \"specify a file\"\n    exit 2\nfi\n\nif test ! -f $1 \nthen\ncat <<!  > $1\npackage main\n\nimport (\n  \"github.com/ajstarks/svgo\"\n  \"os\"\n)\n\nvar (\n  width = 500\n  height = 500\n  canvas = svg.New(os.Stdout)\n)\n\nfunc background(v int) { canvas.Rect(0, 0, width, height, canvas.RGB(v, v, v)) }\n\n\nfunc main() {\n  canvas.Start(width, height)\n  background(255)\n  \n  // your code here\n  \n  canvas.Grid(0, 0, width, height, 10, \"stroke:black;opacity:0.1\")\n  canvas.End()\n}\n!\nfi\n$EDITOR $1\n"
        },
        {
          "name": "paths",
          "type": "tree",
          "content": null
        },
        {
          "name": "pattern",
          "type": "tree",
          "content": null
        },
        {
          "name": "personal",
          "type": "tree",
          "content": null
        },
        {
          "name": "picserv",
          "type": "tree",
          "content": null
        },
        {
          "name": "planets",
          "type": "tree",
          "content": null
        },
        {
          "name": "pmap",
          "type": "tree",
          "content": null
        },
        {
          "name": "randcomp",
          "type": "tree",
          "content": null
        },
        {
          "name": "richter",
          "type": "tree",
          "content": null
        },
        {
          "name": "rl",
          "type": "tree",
          "content": null
        },
        {
          "name": "rpd",
          "type": "tree",
          "content": null
        },
        {
          "name": "rr",
          "type": "tree",
          "content": null
        },
        {
          "name": "shotchart",
          "type": "tree",
          "content": null
        },
        {
          "name": "skewabc",
          "type": "tree",
          "content": null
        },
        {
          "name": "span",
          "type": "tree",
          "content": null
        },
        {
          "name": "stockproduct",
          "type": "tree",
          "content": null
        },
        {
          "name": "structlayout-svg",
          "type": "tree",
          "content": null
        },
        {
          "name": "svg.go",
          "type": "blob",
          "size": 39.1708984375,
          "content": "// Package svg provides an API for generating Scalable Vector Graphics (SVG)\npackage svg\n\n// package main\n//\n// \timport (\n// \t\t\"github.com/ajstarks/svgo\"\n// \t\t\"os\"\n// \t)\n//\n// \tvar (\n// \t\twidth = 500\n// \t\theight = 500\n// \t\tcanvas = svg.New(os.Stdout)\n// \t)\n//\n// \tfunc main() {\n// \t\tcanvas.Start(width, height)\n// \t\tcanvas.Circle(width/2, height/2, 100)\n// \t\tcanvas.Text(width/2, height/2, \"Hello, SVG\",\n//                   \"text-anchor:middle;font-size:30px;fill:white\")\n// \t\tcanvas.End()\n// \t}\n//\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\n\t\"encoding/xml\"\n\t\"strings\"\n)\n\n// SVG defines the location of the generated SVG\ntype SVG struct {\n\tWriter io.Writer\n}\n\n// Offcolor defines the offset and color for gradients\ntype Offcolor struct {\n\tOffset  uint8\n\tColor   string\n\tOpacity float64\n}\n\n// Filterspec defines the specification of SVG filters\ntype Filterspec struct {\n\tIn, In2, Result string\n}\n\nconst (\n\tsvgtop = `<?xml version=\"1.0\"?>\n<!-- Generated by SVGo -->\n<svg`\n\tsvginitfmt = `%s width=\"%d%s\" height=\"%d%s\"`\n\tsvgns      = `\n     xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\">`\n\tvbfmt = `viewBox=\"%d %d %d %d\"`\n\n\temptyclose = \"/>\\n\"\n)\n\n// New is the SVG constructor, specifying the io.Writer where the generated SVG is written.\nfunc New(w io.Writer) *SVG { return &SVG{w} }\n\nfunc (svg *SVG) print(a ...interface{}) (n int, errno error) {\n\treturn fmt.Fprint(svg.Writer, a...)\n}\n\nfunc (svg *SVG) println(a ...interface{}) (n int, errno error) {\n\treturn fmt.Fprintln(svg.Writer, a...)\n}\n\nfunc (svg *SVG) printf(format string, a ...interface{}) (n int, errno error) {\n\treturn fmt.Fprintf(svg.Writer, format, a...)\n}\n\nfunc (svg *SVG) genattr(ns []string) {\n\tfor _, v := range ns {\n\t\tsvg.printf(\"\\n     %s\", v)\n\t}\n\tsvg.println(svgns)\n}\n\n// Structure, Metadata, Scripting, Style, Transformation, and Links\n\n// Start begins the SVG document with the width w and height h.\n// Other attributes may be optionally added, for example viewbox or additional namespaces\n// Standard Reference: http://www.w3.org/TR/SVG11/struct.html#SVGElement\nfunc (svg *SVG) Start(w int, h int, ns ...string) {\n\tsvg.printf(svginitfmt, svgtop, w, \"\", h, \"\")\n\tsvg.genattr(ns)\n}\n\n// Startunit begins the SVG document, with width and height in the specified units\n// Other attributes may be optionally added, for example viewbox or additional namespaces\nfunc (svg *SVG) Startunit(w int, h int, unit string, ns ...string) {\n\tsvg.printf(svginitfmt, svgtop, w, unit, h, unit)\n\tsvg.genattr(ns)\n}\n\n// Startpercent begins the SVG document, with width and height as percentages\n// Other attributes may be optionally added, for example viewbox or additional namespaces\nfunc (svg *SVG) Startpercent(w int, h int, ns ...string) {\n\tsvg.printf(svginitfmt, svgtop, w, \"%\", h, \"%\")\n\tsvg.genattr(ns)\n}\n\n// Startview begins the SVG document, with the specified width, height, and viewbox\n// Other attributes may be optionally added, for example viewbox or additional namespaces\nfunc (svg *SVG) Startview(w, h, minx, miny, vw, vh int) {\n\tsvg.Start(w, h, fmt.Sprintf(vbfmt, minx, miny, vw, vh))\n}\n\n// StartviewUnit begins the SVG document with the specified width, height, and unit\nfunc (svg *SVG) StartviewUnit(w, h int, unit string, minx, miny, vw, vh int) {\n\tsvg.Startunit(w, h, unit, fmt.Sprintf(vbfmt, minx, miny, vw, vh))\n}\n\n// Startraw begins the SVG document, passing arbitrary attributes\nfunc (svg *SVG) Startraw(ns ...string) {\n\tsvg.printf(svgtop)\n\tsvg.genattr(ns)\n}\n\n// End the SVG document\nfunc (svg *SVG) End() { svg.println(\"</svg>\") }\n\n// linkembed defines an element with a specified type,\n// (for example \"application/javascript\", or \"text/css\").\n// if the first variadic argument is a link, use only the link reference.\n// Otherwise, treat those arguments as the text of the script (marked up as CDATA).\n// if no data is specified, just close the element\nfunc (svg *SVG) linkembed(tag string, scriptype string, data ...string) {\n\tsvg.printf(`<%s type=\"%s\"`, tag, scriptype)\n\tswitch {\n\tcase len(data) == 1 && islink(data[0]):\n\t\tsvg.printf(\" %s/>\\n\", href(data[0]))\n\n\tcase len(data) > 0:\n\t\tsvg.printf(\">\\n<![CDATA[\\n\")\n\t\tfor _, v := range data {\n\t\t\tsvg.println(v)\n\t\t}\n\t\tsvg.printf(\"]]>\\n</%s>\\n\", tag)\n\n\tdefault:\n\t\tsvg.println(`/>`)\n\t}\n}\n\n// Script defines a script with a specified type, (for example \"application/javascript\").\nfunc (svg *SVG) Script(scriptype string, data ...string) {\n\tsvg.linkembed(\"script\", scriptype, data...)\n}\n\n// Style defines the specified style (for example \"text/css\")\nfunc (svg *SVG) Style(scriptype string, data ...string) {\n\tsvg.linkembed(\"style\", scriptype, data...)\n}\n\n// Gstyle begins a group, with the specified style.\n// Standard Reference: http://www.w3.org/TR/SVG11/struct.html#GElement\nfunc (svg *SVG) Gstyle(s string) { svg.println(group(\"style\", s)) }\n\n// Gtransform begins a group, with the specified transform\n// Standard Reference: http://www.w3.org/TR/SVG11/coords.html#TransformAttribute\nfunc (svg *SVG) Gtransform(s string) { svg.println(group(\"transform\", s)) }\n\n// Translate begins coordinate translation, end with Gend()\n// Standard Reference: http://www.w3.org/TR/SVG11/coords.html#TransformAttribute\nfunc (svg *SVG) Translate(x, y int) { svg.Gtransform(translate(x, y)) }\n\n// Scale scales the coordinate system by n, end with Gend()\n// Standard Reference: http://www.w3.org/TR/SVG11/coords.html#TransformAttribute\nfunc (svg *SVG) Scale(n float64) { svg.Gtransform(scale(n)) }\n\n// ScaleXY scales the coordinate system by dx and dy, end with Gend()\n// Standard Reference: http://www.w3.org/TR/SVG11/coords.html#TransformAttribute\nfunc (svg *SVG) ScaleXY(dx, dy float64) { svg.Gtransform(scaleXY(dx, dy)) }\n\n// SkewX skews the x coordinate system by angle a, end with Gend()\n// Standard Reference: http://www.w3.org/TR/SVG11/coords.html#TransformAttribute\nfunc (svg *SVG) SkewX(a float64) { svg.Gtransform(skewX(a)) }\n\n// SkewY skews the y coordinate system by angle a, end with Gend()\n// Standard Reference: http://www.w3.org/TR/SVG11/coords.html#TransformAttribute\nfunc (svg *SVG) SkewY(a float64) { svg.Gtransform(skewY(a)) }\n\n// SkewXY skews x and y coordinates by ax, ay respectively, end with Gend()\n// Standard Reference: http://www.w3.org/TR/SVG11/coords.html#TransformAttribute\nfunc (svg *SVG) SkewXY(ax, ay float64) { svg.Gtransform(skewX(ax) + \" \" + skewY(ay)) }\n\n// Rotate rotates the coordinate system by r degrees, end with Gend()\n// Standard Reference: http://www.w3.org/TR/SVG11/coords.html#TransformAttribute\nfunc (svg *SVG) Rotate(r float64) { svg.Gtransform(rotate(r)) }\n\n// TranslateRotate translates the coordinate system to (x,y), then rotates to r degrees, end with Gend()\nfunc (svg *SVG) TranslateRotate(x, y int, r float64) {\n\tsvg.Gtransform(translate(x, y) + \" \" + rotate(r))\n}\n\n// RotateTranslate rotates the coordinate system r degrees, then translates to (x,y), end with Gend()\nfunc (svg *SVG) RotateTranslate(x, y int, r float64) {\n\tsvg.Gtransform(rotate(r) + \" \" + translate(x, y))\n}\n\n// Group begins a group with arbitrary attributes\nfunc (svg *SVG) Group(s ...string) { svg.printf(\"<g %s\\n\", endstyle(s, `>`)) }\n\n// Gid begins a group, with the specified id\nfunc (svg *SVG) Gid(s string) {\n\tsvg.print(`<g id=\"`)\n\txml.Escape(svg.Writer, []byte(s))\n\tsvg.println(`\">`)\n}\n\n// Gend ends a group (must be paired with Gsttyle, Gtransform, Gid).\nfunc (svg *SVG) Gend() { svg.println(`</g>`) }\n\n// ClipPath defines a clip path\nfunc (svg *SVG) ClipPath(s ...string) { svg.printf(`<clipPath %s`, endstyle(s, `>`)) }\n\n// ClipEnd ends a ClipPath\nfunc (svg *SVG) ClipEnd() {\n\tsvg.println(`</clipPath>`)\n}\n\n// Def begins a defintion block.\n// Standard Reference: http://www.w3.org/TR/SVG11/struct.html#DefsElement\nfunc (svg *SVG) Def() { svg.println(`<defs>`) }\n\n// DefEnd ends a defintion block.\nfunc (svg *SVG) DefEnd() { svg.println(`</defs>`) }\n\n// Marker defines a marker\n// Standard reference: http://www.w3.org/TR/SVG11/painting.html#MarkerElement\nfunc (svg *SVG) Marker(id string, x, y, width, height int, s ...string) {\n\tsvg.printf(`<marker id=\"%s\" refX=\"%d\" refY=\"%d\" markerWidth=\"%d\" markerHeight=\"%d\" %s`,\n\t\tid, x, y, width, height, endstyle(s, \">\\n\"))\n}\n\n// MarkerEnd ends a marker\nfunc (svg *SVG) MarkerEnd() { svg.println(`</marker>`) }\n\n// Pattern defines a pattern with the specified dimensions.\n// The putype can be either \"user\" or \"obj\", which sets the patternUnits\n// attribute to be either userSpaceOnUse or objectBoundingBox\n// Standard reference: http://www.w3.org/TR/SVG11/pservers.html#Patterns\nfunc (svg *SVG) Pattern(id string, x, y, width, height int, putype string, s ...string) {\n\tpuattr := \"userSpaceOnUse\"\n\tif putype != \"user\" {\n\t\tpuattr = \"objectBoundingBox\"\n\t}\n\tsvg.printf(`<pattern id=\"%s\" x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" patternUnits=\"%s\" %s`,\n\t\tid, x, y, width, height, puattr, endstyle(s, \">\\n\"))\n}\n\n// PatternEnd ends a marker\nfunc (svg *SVG) PatternEnd() { svg.println(`</pattern>`) }\n\n// Desc specified the text of the description tag.\n// Standard Reference: http://www.w3.org/TR/SVG11/struct.html#DescElement\nfunc (svg *SVG) Desc(s string) { svg.tt(\"desc\", s) }\n\n// Title specified the text of the title tag.\n// Standard Reference: http://www.w3.org/TR/SVG11/struct.html#TitleElement\nfunc (svg *SVG) Title(s string) { svg.tt(\"title\", s) }\n\n// Link begins a link named \"name\", with the specified title.\n// Standard Reference: http://www.w3.org/TR/SVG11/linking.html#Links\nfunc (svg *SVG) Link(href string, title string) {\n\tsvg.printf(\"<a xlink:href=\\\"%s\\\" xlink:title=\\\"\", href)\n\txml.Escape(svg.Writer, []byte(title))\n\tsvg.println(\"\\\">\")\n}\n\n// LinkEnd ends a link.\nfunc (svg *SVG) LinkEnd() { svg.println(`</a>`) }\n\n// Use places the object referenced at link at the location x, y, with optional style.\n// Standard Reference: http://www.w3.org/TR/SVG11/struct.html#UseElement\nfunc (svg *SVG) Use(x int, y int, link string, s ...string) {\n\tsvg.printf(`<use %s %s %s`, loc(x, y), href(link), endstyle(s, emptyclose))\n}\n\n// Mask creates a mask with a specified id, dimension, and optional style.\nfunc (svg *SVG) Mask(id string, x int, y int, w int, h int, s ...string) {\n\tsvg.printf(`<mask id=\"%s\" x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" %s`, id, x, y, w, h, endstyle(s, `>`))\n}\n\n// MaskEnd ends a Mask.\nfunc (svg *SVG) MaskEnd() { svg.println(`</mask>`) }\n\n// Shapes\n\n// Circle centered at x,y, with radius r, with optional style.\n// Standard Reference: http://www.w3.org/TR/SVG11/shapes.html#CircleElement\nfunc (svg *SVG) Circle(x int, y int, r int, s ...string) {\n\tsvg.printf(`<circle cx=\"%d\" cy=\"%d\" r=\"%d\" %s`, x, y, r, endstyle(s, emptyclose))\n}\n\n// Ellipse centered at x,y, centered at x,y with radii w, and h, with optional style.\n// Standard Reference: http://www.w3.org/TR/SVG11/shapes.html#EllipseElement\nfunc (svg *SVG) Ellipse(x int, y int, w int, h int, s ...string) {\n\tsvg.printf(`<ellipse cx=\"%d\" cy=\"%d\" rx=\"%d\" ry=\"%d\" %s`,\n\t\tx, y, w, h, endstyle(s, emptyclose))\n}\n\n// Polygon draws a series of line segments using an array of x, y coordinates, with optional style.\n// Standard Reference: http://www.w3.org/TR/SVG11/shapes.html#PolygonElement\nfunc (svg *SVG) Polygon(x []int, y []int, s ...string) {\n\tsvg.poly(x, y, \"polygon\", s...)\n}\n\n// Rect draws a rectangle with upper left-hand corner at x,y, with width w, and height h, with optional style\n// Standard Reference: http://www.w3.org/TR/SVG11/shapes.html#RectElement\nfunc (svg *SVG) Rect(x int, y int, w int, h int, s ...string) {\n\tsvg.printf(`<rect %s %s`, dim(x, y, w, h), endstyle(s, emptyclose))\n}\n\n// CenterRect draws a rectangle with its center at x,y, with width w, and height h, with optional style\nfunc (svg *SVG) CenterRect(x int, y int, w int, h int, s ...string) {\n\tsvg.Rect(x-(w/2), y-(h/2), w, h, s...)\n}\n\n// Roundrect draws a rounded rectangle with upper the left-hand corner at x,y,\n// with width w, and height h. The radii for the rounded portion\n// are specified by rx (width), and ry (height).\n// Style is optional.\n// Standard Reference: http://www.w3.org/TR/SVG11/shapes.html#RectElement\nfunc (svg *SVG) Roundrect(x int, y int, w int, h int, rx int, ry int, s ...string) {\n\tsvg.printf(`<rect %s rx=\"%d\" ry=\"%d\" %s`, dim(x, y, w, h), rx, ry, endstyle(s, emptyclose))\n}\n\n// Square draws a square with upper left corner at x,y with sides of length l, with optional style.\nfunc (svg *SVG) Square(x int, y int, l int, s ...string) {\n\tsvg.Rect(x, y, l, l, s...)\n}\n\n// Paths\n\n// Path draws an arbitrary path, the caller is responsible for structuring the path data\nfunc (svg *SVG) Path(d string, s ...string) {\n\tsvg.printf(`<path d=\"%s\" %s`, d, endstyle(s, emptyclose))\n}\n\n// Arc draws an elliptical arc, with optional style, beginning coordinate at sx,sy, ending coordinate at ex, ey\n// width and height of the arc are specified by ax, ay, the x axis rotation is r\n// if sweep is true, then the arc will be drawn in a \"positive-angle\" direction (clockwise), if false,\n// the arc is drawn counterclockwise.\n// if large is true, the arc sweep angle is greater than or equal to 180 degrees,\n// otherwise the arc sweep is less than 180 degrees\n// http://www.w3.org/TR/SVG11/paths.html#PathDataEllipticalArcCommands\nfunc (svg *SVG) Arc(sx int, sy int, ax int, ay int, r int, large bool, sweep bool, ex int, ey int, s ...string) {\n\tsvg.printf(`%s A%s %d %s %s %s\" %s`,\n\t\tptag(sx, sy), coord(ax, ay), r, onezero(large), onezero(sweep), coord(ex, ey), endstyle(s, emptyclose))\n}\n\n// Bezier draws a cubic bezier curve, with optional style, beginning at sx,sy, ending at ex,ey\n// with control points at cx,cy and px,py.\n// Standard Reference: http://www.w3.org/TR/SVG11/paths.html#PathDataCubicBezierCommands\nfunc (svg *SVG) Bezier(sx int, sy int, cx int, cy int, px int, py int, ex int, ey int, s ...string) {\n\tsvg.printf(`%s C%s %s %s\" %s`,\n\t\tptag(sx, sy), coord(cx, cy), coord(px, py), coord(ex, ey), endstyle(s, emptyclose))\n}\n\n// Qbez draws a quadratic bezier curver, with optional style\n// beginning at sx,sy, ending at ex, sy with control points at cx, cy\n// Standard Reference: http://www.w3.org/TR/SVG11/paths.html#PathDataQuadraticBezierCommands\nfunc (svg *SVG) Qbez(sx int, sy int, cx int, cy int, ex int, ey int, s ...string) {\n\tsvg.printf(`%s Q%s %s\" %s`,\n\t\tptag(sx, sy), coord(cx, cy), coord(ex, ey), endstyle(s, emptyclose))\n}\n\n// Qbezier draws a Quadratic Bezier curve, with optional style, beginning at sx, sy, ending at tx,ty\n// with control points are at cx,cy, ex,ey.\n// Standard Reference: http://www.w3.org/TR/SVG11/paths.html#PathDataQuadraticBezierCommands\nfunc (svg *SVG) Qbezier(sx int, sy int, cx int, cy int, ex int, ey int, tx int, ty int, s ...string) {\n\tsvg.printf(`%s Q%s %s T%s\" %s`,\n\t\tptag(sx, sy), coord(cx, cy), coord(ex, ey), coord(tx, ty), endstyle(s, emptyclose))\n}\n\n// Lines\n\n// Line draws a straight line between two points, with optional style.\n// Standard Reference: http://www.w3.org/TR/SVG11/shapes.html#LineElement\nfunc (svg *SVG) Line(x1 int, y1 int, x2 int, y2 int, s ...string) {\n\tsvg.printf(`<line x1=\"%d\" y1=\"%d\" x2=\"%d\" y2=\"%d\" %s`, x1, y1, x2, y2, endstyle(s, emptyclose))\n}\n\n// Polyline draws connected lines between coordinates, with optional style.\n// Standard Reference: http://www.w3.org/TR/SVG11/shapes.html#PolylineElement\nfunc (svg *SVG) Polyline(x []int, y []int, s ...string) {\n\tsvg.poly(x, y, \"polyline\", s...)\n}\n\n// Image places at x,y (upper left hand corner), the image with\n// width w, and height h, referenced at link, with optional style.\n// Standard Reference: http://www.w3.org/TR/SVG11/struct.html#ImageElement\nfunc (svg *SVG) Image(x int, y int, w int, h int, link string, s ...string) {\n\tsvg.printf(`<image %s %s %s`, dim(x, y, w, h), href(link), endstyle(s, emptyclose))\n}\n\n// Text places the specified text, t at x,y according to the style specified in s\n// Standard Reference: http://www.w3.org/TR/SVG11/text.html#TextElement\nfunc (svg *SVG) Text(x int, y int, t string, s ...string) {\n\tsvg.printf(`<text %s %s`, loc(x, y), endstyle(s, \">\"))\n\txml.Escape(svg.Writer, []byte(t))\n\tsvg.println(`</text>`)\n}\n\n// Textspan begins text, assuming a tspan will be included, end with TextEnd()\n// Standard Reference: https://www.w3.org/TR/SVG11/text.html#TSpanElement\nfunc (svg *SVG) Textspan(x int, y int, t string, s ...string) {\n\tsvg.printf(`<text %s %s`, loc(x, y), endstyle(s, \">\"))\n\txml.Escape(svg.Writer, []byte(t))\n}\n\n// Span makes styled spanned text, should be proceeded by Textspan\n// Standard Reference: https://www.w3.org/TR/SVG11/text.html#TSpanElement\nfunc (svg *SVG) Span(t string, s ...string) {\n\tif len(s) == 0 {\n\t\txml.Escape(svg.Writer, []byte(t))\n\t\treturn\n\t}\n\tsvg.printf(`<tspan %s`, endstyle(s, \">\"))\n\txml.Escape(svg.Writer, []byte(t))\n\tsvg.printf(`</tspan>`)\n}\n\n// TextEnd ends spanned text\n// Standard Reference: https://www.w3.org/TR/SVG11/text.html#TSpanElement\nfunc (svg *SVG) TextEnd() {\n\tsvg.println(`</text>`)\n}\n\n// Textpath places text optionally styled text along a previously defined path\n// Standard Reference: http://www.w3.org/TR/SVG11/text.html#TextPathElement\nfunc (svg *SVG) Textpath(t string, pathid string, s ...string) {\n\tsvg.printf(\"<text %s<textPath xlink:href=\\\"%s\\\">\", endstyle(s, \">\"), pathid)\n\txml.Escape(svg.Writer, []byte(t))\n\tsvg.println(`</textPath></text>`)\n}\n\n// Textlines places a series of lines of text starting at x,y, at the specified size, fill, and alignment.\n// Each line is spaced according to the spacing argument\nfunc (svg *SVG) Textlines(x, y int, s []string, size, spacing int, fill, align string) {\n\tsvg.Gstyle(fmt.Sprintf(\"font-size:%dpx;fill:%s;text-anchor:%s\", size, fill, align))\n\tfor _, t := range s {\n\t\tsvg.Text(x, y, t)\n\t\ty += spacing\n\t}\n\tsvg.Gend()\n}\n\n// Colors\n\n// RGB specifies a fill color in terms of a (r)ed, (g)reen, (b)lue triple.\n// Standard reference: http://www.w3.org/TR/css3-color/\nfunc (svg *SVG) RGB(r int, g int, b int) string {\n\treturn fmt.Sprintf(`fill:rgb(%d,%d,%d)`, r, g, b)\n}\n\n// RGBA specifies a fill color in terms of a (r)ed, (g)reen, (b)lue triple and opacity.\nfunc (svg *SVG) RGBA(r int, g int, b int, a float64) string {\n\treturn fmt.Sprintf(`fill-opacity:%.2f; %s`, a, svg.RGB(r, g, b))\n}\n\n// Gradients\n\n// LinearGradient constructs a linear color gradient identified by id,\n// along the vector defined by (x1,y1), and (x2,y2).\n// The stop color sequence defined in sc. Coordinates are expressed as percentages.\nfunc (svg *SVG) LinearGradient(id string, x1, y1, x2, y2 uint8, sc []Offcolor) {\n\tsvg.printf(\"<linearGradient id=\\\"%s\\\" x1=\\\"%d%%\\\" y1=\\\"%d%%\\\" x2=\\\"%d%%\\\" y2=\\\"%d%%\\\">\\n\",\n\t\tid, pct(x1), pct(y1), pct(x2), pct(y2))\n\tsvg.stopcolor(sc)\n\tsvg.println(\"</linearGradient>\")\n}\n\n// RadialGradient constructs a radial color gradient identified by id,\n// centered at (cx,cy), with a radius of r.\n// (fx, fy) define the location of the focal point of the light source.\n// The stop color sequence defined in sc.\n// Coordinates are expressed as percentages.\nfunc (svg *SVG) RadialGradient(id string, cx, cy, r, fx, fy uint8, sc []Offcolor) {\n\tsvg.printf(\"<radialGradient id=\\\"%s\\\" cx=\\\"%d%%\\\" cy=\\\"%d%%\\\" r=\\\"%d%%\\\" fx=\\\"%d%%\\\" fy=\\\"%d%%\\\">\\n\",\n\t\tid, pct(cx), pct(cy), pct(r), pct(fx), pct(fy))\n\tsvg.stopcolor(sc)\n\tsvg.println(\"</radialGradient>\")\n}\n\n// stopcolor is a utility function used by the gradient functions\n// to define a sequence of offsets (expressed as percentages) and colors\nfunc (svg *SVG) stopcolor(oc []Offcolor) {\n\tfor _, v := range oc {\n\t\tsvg.printf(\"<stop offset=\\\"%d%%\\\" stop-color=\\\"%s\\\" stop-opacity=\\\"%.2f\\\"/>\\n\",\n\t\t\tpct(v.Offset), v.Color, v.Opacity)\n\t}\n}\n\n// Filter Effects:\n// Most functions have common attributes (in, in2, result) defined in type Filterspec\n// used as a common first argument.\n\n// Filter begins a filter set\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#FilterElement\nfunc (svg *SVG) Filter(id string, s ...string) {\n\tsvg.printf(`<filter id=\"%s\" %s`, id, endstyle(s, \">\\n\"))\n}\n\n// Fend ends a filter set\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#FilterElement\nfunc (svg *SVG) Fend() {\n\tsvg.println(`</filter>`)\n}\n\n// FeBlend specifies a Blend filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feBlendElement\nfunc (svg *SVG) FeBlend(fs Filterspec, mode string, s ...string) {\n\tswitch mode {\n\tcase \"normal\", \"multiply\", \"screen\", \"darken\", \"lighten\":\n\t\tbreak\n\tdefault:\n\t\tmode = \"normal\"\n\t}\n\tsvg.printf(`<feBlend %s mode=\"%s\" %s`,\n\t\tfsattr(fs), mode, endstyle(s, emptyclose))\n}\n\n// FeColorMatrix specifies a color matrix filter primitive, with matrix values\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feColorMatrixElement\nfunc (svg *SVG) FeColorMatrix(fs Filterspec, values [20]float64, s ...string) {\n\tsvg.printf(`<feColorMatrix %s type=\"matrix\" values=\"`, fsattr(fs))\n\tfor _, v := range values {\n\t\tsvg.printf(`%g `, v)\n\t}\n\tsvg.printf(`\" %s`, endstyle(s, emptyclose))\n}\n\n// FeColorMatrixHue specifies a color matrix filter primitive, with hue rotation values\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feColorMatrixElement\nfunc (svg *SVG) FeColorMatrixHue(fs Filterspec, value float64, s ...string) {\n\tif value < -360 || value > 360 {\n\t\tvalue = 0\n\t}\n\tsvg.printf(`<feColorMatrix %s type=\"hueRotate\" values=\"%g\" %s`,\n\t\tfsattr(fs), value, endstyle(s, emptyclose))\n}\n\n// FeColorMatrixSaturate specifies a color matrix filter primitive, with saturation values\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feColorMatrixElement\nfunc (svg *SVG) FeColorMatrixSaturate(fs Filterspec, value float64, s ...string) {\n\tif value < 0 || value > 1 {\n\t\tvalue = 1\n\t}\n\tsvg.printf(`<feColorMatrix %s type=\"saturate\" values=\"%g\" %s`,\n\t\tfsattr(fs), value, endstyle(s, emptyclose))\n}\n\n// FeColorMatrixLuminence specifies a color matrix filter primitive, with luminence values\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feColorMatrixElement\nfunc (svg *SVG) FeColorMatrixLuminence(fs Filterspec, s ...string) {\n\tsvg.printf(`<feColorMatrix %s type=\"luminenceToAlpha\" %s`,\n\t\tfsattr(fs), endstyle(s, emptyclose))\n}\n\n// FeComponentTransfer begins a feComponent filter element\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\nfunc (svg *SVG) FeComponentTransfer() {\n\tsvg.println(`<feComponentTransfer>`)\n}\n\n// FeCompEnd ends a feComponent filter element\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\nfunc (svg *SVG) FeCompEnd() {\n\tsvg.println(`</feComponentTransfer>`)\n}\n\n// FeComposite specifies a feComposite filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feCompositeElement\nfunc (svg *SVG) FeComposite(fs Filterspec, operator string, k1, k2, k3, k4 int, s ...string) {\n\tswitch operator {\n\tcase \"over\", \"in\", \"out\", \"atop\", \"xor\", \"arithmetic\":\n\t\tbreak\n\tdefault:\n\t\toperator = \"over\"\n\t}\n\tsvg.printf(`<feComposite %s operator=\"%s\" k1=\"%d\" k2=\"%d\" k3=\"%d\" k4=\"%d\" %s`,\n\t\tfsattr(fs), operator, k1, k2, k3, k4, endstyle(s, emptyclose))\n}\n\n// FeConvolveMatrix specifies a feConvolveMatrix filter primitive\n// Standard referencd: http://www.w3.org/TR/SVG11/filters.html#feConvolveMatrixElement\nfunc (svg *SVG) FeConvolveMatrix(fs Filterspec, matrix [9]int, s ...string) {\n\tsvg.printf(`<feConvolveMatrix %s kernelMatrix=\"%d %d %d %d %d %d %d %d %d\" %s`,\n\t\tfsattr(fs),\n\t\tmatrix[0], matrix[1], matrix[2],\n\t\tmatrix[3], matrix[4], matrix[5],\n\t\tmatrix[6], matrix[7], matrix[8], endstyle(s, emptyclose))\n}\n\n// FeDiffuseLighting specifies a diffuse lighting filter primitive,\n// a container for light source elements, end with DiffuseEnd()\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\nfunc (svg *SVG) FeDiffuseLighting(fs Filterspec, scale, constant float64, s ...string) {\n\tsvg.printf(`<feDiffuseLighting %s surfaceScale=\"%g\" diffuseConstant=\"%g\" %s`,\n\t\tfsattr(fs), scale, constant, endstyle(s, `>`))\n}\n\n// FeDiffEnd ends a diffuse lighting filter primitive container\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feDiffuseLightingElement\nfunc (svg *SVG) FeDiffEnd() {\n\tsvg.println(`</feDiffuseLighting>`)\n}\n\n// FeDisplacementMap specifies a feDisplacementMap filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feDisplacementMapElement\nfunc (svg *SVG) FeDisplacementMap(fs Filterspec, scale float64, xchannel, ychannel string, s ...string) {\n\tsvg.printf(`<feDisplacementMap %s scale=\"%g\" xChannelSelector=\"%s\" yChannelSelector=\"%s\" %s`,\n\t\tfsattr(fs), scale, imgchannel(xchannel), ychannel, endstyle(s, emptyclose))\n}\n\n// FeDistantLight specifies a feDistantLight filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feDistantLightElement\nfunc (svg *SVG) FeDistantLight(fs Filterspec, azimuth, elevation float64, s ...string) {\n\tsvg.printf(`<feDistantLight %s azimuth=\"%g\" elevation=\"%g\" %s`,\n\t\tfsattr(fs), azimuth, elevation, endstyle(s, emptyclose))\n}\n\n// FeFlood specifies a flood filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feFloodElement\nfunc (svg *SVG) FeFlood(fs Filterspec, color string, opacity float64, s ...string) {\n\tsvg.printf(`<feFlood %s flood-color=\"%s\" flood-opacity=\"%g\" %s`,\n\t\tfsattr(fs), color, opacity, endstyle(s, emptyclose))\n}\n\n// FeFunc{linear|Gamma|Table|Discrete} specify various types of feFunc{R|G|B|A} filter primitives\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\n\n// FeFuncLinear specifies a linear style function for the feFunc{R|G|B|A} filter element\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\nfunc (svg *SVG) FeFuncLinear(channel string, slope, intercept float64) {\n\tsvg.printf(`<feFunc%s type=\"linear\" slope=\"%g\" intercept=\"%g\"%s`,\n\t\timgchannel(channel), slope, intercept, emptyclose)\n}\n\n// FeFuncGamma specifies the curve values for gamma correction for the feFunc{R|G|B|A} filter element\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\nfunc (svg *SVG) FeFuncGamma(channel string, amplitude, exponent, offset float64) {\n\tsvg.printf(`<feFunc%s type=\"gamma\" amplitude=\"%g\" exponent=\"%g\" offset=\"%g\"%s`,\n\t\timgchannel(channel), amplitude, exponent, offset, emptyclose)\n}\n\n// FeFuncTable specifies the table of values for the feFunc{R|G|B|A} filter element\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\nfunc (svg *SVG) FeFuncTable(channel string, tv []float64) {\n\tsvg.printf(`<feFunc%s type=\"table\"`, imgchannel(channel))\n\tsvg.tablevalues(`tableValues`, tv)\n}\n\n// FeFuncDiscrete specifies the discrete values for the feFunc{R|G|B|A} filter element\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\nfunc (svg *SVG) FeFuncDiscrete(channel string, tv []float64) {\n\tsvg.printf(`<feFunc%s type=\"discrete\"`, imgchannel(channel))\n\tsvg.tablevalues(`tableValues`, tv)\n}\n\n// FeGaussianBlur specifies a Gaussian Blur filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feGaussianBlurElement\nfunc (svg *SVG) FeGaussianBlur(fs Filterspec, stdx, stdy float64, s ...string) {\n\tif stdx < 0 {\n\t\tstdx = 0\n\t}\n\tif stdy < 0 {\n\t\tstdy = 0\n\t}\n\tsvg.printf(`<feGaussianBlur %s stdDeviation=\"%g %g\" %s`,\n\t\tfsattr(fs), stdx, stdy, endstyle(s, emptyclose))\n}\n\n// FeImage specifies a feImage filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feImageElement\nfunc (svg *SVG) FeImage(href string, result string, s ...string) {\n\tsvg.printf(`<feImage xlink:href=\"%s\" result=\"%s\" %s`,\n\t\thref, result, endstyle(s, emptyclose))\n}\n\n// FeMerge specifies a feMerge filter primitive, containing feMerge elements\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feMergeElement\nfunc (svg *SVG) FeMerge(nodes []string, s ...string) {\n\tsvg.println(`<feMerge>`)\n\tfor _, n := range nodes {\n\t\tsvg.printf(\"<feMergeNode in=\\\"%s\\\"/>\\n\", n)\n\t}\n\tsvg.println(`</feMerge>`)\n}\n\n// FeMorphology specifies a feMorphologyLight filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feMorphologyElement\nfunc (svg *SVG) FeMorphology(fs Filterspec, operator string, xradius, yradius float64, s ...string) {\n\tswitch operator {\n\tcase \"erode\", \"dilate\":\n\t\tbreak\n\tdefault:\n\t\toperator = \"erode\"\n\t}\n\tsvg.printf(`<feMorphology %s operator=\"%s\" radius=\"%g %g\" %s`,\n\t\tfsattr(fs), operator, xradius, yradius, endstyle(s, emptyclose))\n}\n\n// FeOffset specifies the feOffset filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feOffsetElement\nfunc (svg *SVG) FeOffset(fs Filterspec, dx, dy int, s ...string) {\n\tsvg.printf(`<feOffset %s dx=\"%d\" dy=\"%d\" %s`,\n\t\tfsattr(fs), dx, dy, endstyle(s, emptyclose))\n}\n\n// FePointLight specifies a fePpointLight filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#fePointLightElement\nfunc (svg *SVG) FePointLight(x, y, z float64, s ...string) {\n\tsvg.printf(`<fePointLight x=\"%g\" y=\"%g\" z=\"%g\" %s`,\n\t\tx, y, z, endstyle(s, emptyclose))\n}\n\n// FeSpecularLighting specifies a specular lighting filter primitive,\n// a container for light source elements, end with SpecularEnd()\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feSpecularLightingElement\nfunc (svg *SVG) FeSpecularLighting(fs Filterspec, scale, constant float64, exponent int, color string, s ...string) {\n\tsvg.printf(`<feSpecularLighting %s surfaceScale=\"%g\" specularConstant=\"%g\" specularExponent=\"%d\" lighting-color=\"%s\" %s`,\n\t\tfsattr(fs), scale, constant, exponent, color, endstyle(s, \">\\n\"))\n}\n\n// FeSpecEnd ends a specular lighting filter primitive container\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feSpecularLightingElement\nfunc (svg *SVG) FeSpecEnd() {\n\tsvg.println(`</feSpecularLighting>`)\n}\n\n// FeSpotLight specifies a feSpotLight filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feSpotLightElement\nfunc (svg *SVG) FeSpotLight(fs Filterspec, x, y, z, px, py, pz float64, s ...string) {\n\tsvg.printf(`<feSpotLight %s x=\"%g\" y=\"%g\" z=\"%g\" pointsAtX=\"%g\" pointsAtY=\"%g\" pointsAtZ=\"%g\" %s`,\n\t\tfsattr(fs), x, y, z, px, py, pz, endstyle(s, emptyclose))\n}\n\n// FeTile specifies the tile utility filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feTileElement\nfunc (svg *SVG) FeTile(fs Filterspec, in string, s ...string) {\n\tsvg.printf(`<feTile %s %s`, fsattr(fs), endstyle(s, emptyclose))\n}\n\n// FeTurbulence specifies a turbulence filter primitive\n// Standard reference: http://www.w3.org/TR/SVG11/filters.html#feTurbulenceElement\nfunc (svg *SVG) FeTurbulence(fs Filterspec, ftype string, bfx, bfy float64, octaves int, seed int64, stitch bool, s ...string) {\n\tif bfx < 0 || bfx > 1 {\n\t\tbfx = 0\n\t}\n\tif bfy < 0 || bfy > 1 {\n\t\tbfy = 0\n\t}\n\tswitch ftype[0:1] {\n\tcase \"f\", \"F\":\n\t\tftype = \"fractalNoise\"\n\tcase \"t\", \"T\":\n\t\tftype = \"turbulence\"\n\tdefault:\n\t\tftype = \"turbulence\"\n\t}\n\n\tvar ss string\n\tif stitch {\n\t\tss = \"stitch\"\n\t} else {\n\t\tss = \"noStitch\"\n\t}\n\tsvg.printf(`<feTurbulence %s type=\"%s\" baseFrequency=\"%.2f %.2f\" numOctaves=\"%d\" seed=\"%d\" stitchTiles=\"%s\" %s`,\n\t\tfsattr(fs), ftype, bfx, bfy, octaves, seed, ss, endstyle(s, emptyclose))\n}\n\n// Filter Effects convenience functions, modeled after CSS versions\n\n// Blur emulates the CSS blur filter\nfunc (svg *SVG) Blur(p float64) {\n\tsvg.FeGaussianBlur(Filterspec{}, p, p)\n}\n\n// Brightness emulates the CSS brightness filter\nfunc (svg *SVG) Brightness(p float64) {\n\tsvg.FeComponentTransfer()\n\tsvg.FeFuncLinear(\"R\", p, 0)\n\tsvg.FeFuncLinear(\"G\", p, 0)\n\tsvg.FeFuncLinear(\"B\", p, 0)\n\tsvg.FeCompEnd()\n}\n\n// Contrast emulates the CSS contrast filter\n//func (svg *SVG) Contrast(p float64) {\n//}\n\n// Dropshadow emulates the CSS dropshadow filter\n//func (svg *SVG) Dropshadow(p float64) {\n//}\n\n// Grayscale eumulates the CSS grayscale filter\nfunc (svg *SVG) Grayscale() {\n\tsvg.FeColorMatrixSaturate(Filterspec{}, 0)\n}\n\n// HueRotate eumulates the CSS huerotate filter\nfunc (svg *SVG) HueRotate(a float64) {\n\tsvg.FeColorMatrixHue(Filterspec{}, a)\n}\n\n// Invert eumulates the CSS invert filter\nfunc (svg *SVG) Invert() {\n\tsvg.FeComponentTransfer()\n\tsvg.FeFuncTable(\"R\", []float64{1, 0})\n\tsvg.FeFuncTable(\"G\", []float64{1, 0})\n\tsvg.FeFuncTable(\"B\", []float64{1, 0})\n\tsvg.FeCompEnd()\n}\n\n// Saturate eumulates the CSS saturate filter\nfunc (svg *SVG) Saturate(p float64) {\n\tsvg.FeColorMatrixSaturate(Filterspec{}, p)\n}\n\n// Sepia applies a sepia tone, emulating the CSS sepia filter\nfunc (svg *SVG) Sepia() {\n\tvar sepiamatrix = [20]float64{\n\t\t0.280, 0.450, 0.05, 0, 0,\n\t\t0.140, 0.390, 0.04, 0, 0,\n\t\t0.080, 0.280, 0.03, 0, 0,\n\t\t0, 0, 0, 1, 0,\n\t}\n\tsvg.FeColorMatrix(Filterspec{}, sepiamatrix)\n}\n\n// Animation\n\n// Animate animates the specified link, using the specified attribute\n// The animation starts at coordinate from, terminates at to, and repeats as specified\nfunc (svg *SVG) Animate(link, attr string, from, to int, duration float64, repeat int, s ...string) {\n\tsvg.printf(`<animate %s attributeName=\"%s\" from=\"%d\" to=\"%d\" dur=\"%gs\" repeatCount=\"%s\" %s`,\n\t\thref(link), attr, from, to, duration, repeatString(repeat), endstyle(s, emptyclose))\n}\n\n// AnimateMotion animates the referenced object along the specified path\nfunc (svg *SVG) AnimateMotion(link, path string, duration float64, repeat int, s ...string) {\n\tsvg.printf(`<animateMotion %s dur=\"%gs\" repeatCount=\"%s\" %s<mpath %s/></animateMotion>\n`, href(link), duration, repeatString(repeat), endstyle(s, \">\"), href(path))\n}\n\n// AnimateTransform animates in the context of SVG transformations\nfunc (svg *SVG) AnimateTransform(link, ttype, from, to string, duration float64, repeat int, s ...string) {\n\tsvg.printf(`<animateTransform %s attributeName=\"transform\" type=\"%s\" from=\"%s\" to=\"%s\" dur=\"%gs\" repeatCount=\"%s\" %s`,\n\t\thref(link), ttype, from, to, duration, repeatString(repeat), endstyle(s, emptyclose))\n}\n\n// AnimateTranslate animates the translation transformation\nfunc (svg *SVG) AnimateTranslate(link string, fx, fy, tx, ty int, duration float64, repeat int, s ...string) {\n\tsvg.AnimateTransform(link, \"translate\", coordpair(fx, fy), coordpair(tx, ty), duration, repeat, s...)\n}\n\n// AnimateRotate animates the rotation transformation\nfunc (svg *SVG) AnimateRotate(link string, fs, fc, fe, ts, tc, te int, duration float64, repeat int, s ...string) {\n\tsvg.AnimateTransform(link, \"rotate\", sce(fs, fc, fe), sce(ts, tc, te), duration, repeat, s...)\n}\n\n// AnimateScale animates the scale transformation\nfunc (svg *SVG) AnimateScale(link string, from, to, duration float64, repeat int, s ...string) {\n\tsvg.AnimateTransform(link, \"scale\", fmt.Sprintf(\"%g\", from), fmt.Sprintf(\"%g\", to), duration, repeat, s...)\n}\n\n// AnimateSkewX animates the skewX transformation\nfunc (svg *SVG) AnimateSkewX(link string, from, to, duration float64, repeat int, s ...string) {\n\tsvg.AnimateTransform(link, \"skewX\", fmt.Sprintf(\"%g\", from), fmt.Sprintf(\"%g\", to), duration, repeat, s...)\n}\n\n// AnimateSkewY animates the skewY transformation\nfunc (svg *SVG) AnimateSkewY(link string, from, to, duration float64, repeat int, s ...string) {\n\tsvg.AnimateTransform(link, \"skewY\", fmt.Sprintf(\"%g\", from), fmt.Sprintf(\"%g\", to), duration, repeat, s...)\n}\n\n// Utility\n\n// Grid draws a grid at the specified coordinate, dimensions, and spacing, with optional style.\nfunc (svg *SVG) Grid(x int, y int, w int, h int, n int, s ...string) {\n\n\tif len(s) > 0 {\n\t\tsvg.Gstyle(s[0])\n\t}\n\tfor ix := x; ix <= x+w; ix += n {\n\t\tsvg.Line(ix, y, ix, y+h)\n\t}\n\n\tfor iy := y; iy <= y+h; iy += n {\n\t\tsvg.Line(x, iy, x+w, iy)\n\t}\n\tif len(s) > 0 {\n\t\tsvg.Gend()\n\t}\n\n}\n\n// Support functions\n\n// coordpair returns a coordinate pair as a string\nfunc coordpair(x, y int) string {\n\treturn fmt.Sprintf(\"%d %d\", x, y)\n}\n\n// sce makes start, center, end coordinates string for animate transformations\nfunc sce(start, center, end int) string {\n\treturn fmt.Sprintf(\"%d %d %d\", start, center, end)\n}\n\n// repeatString computes the repeat string for animation methods\n// repeat <= 0 --> \"indefinite\", otherwise the integer string\nfunc repeatString(n int) string {\n\tif n > 0 {\n\t\treturn fmt.Sprintf(\"%d\", n)\n\t}\n\treturn \"indefinite\"\n}\n\n// style returns a style name,attribute string\nfunc style(s string) string {\n\tif len(s) > 0 {\n\t\treturn fmt.Sprintf(`style=\"%s\"`, s)\n\t}\n\treturn s\n}\n\n// pp returns a series of polygon points\nfunc (svg *SVG) pp(x []int, y []int, tag string) {\n\tsvg.print(tag)\n\tif len(x) != len(y) {\n\t\tsvg.print(\" \")\n\t\treturn\n\t}\n\tlx := len(x) - 1\n\tfor i := 0; i < lx; i++ {\n\t\tsvg.print(coord(x[i], y[i]) + \" \")\n\t}\n\tsvg.print(coord(x[lx], y[lx]))\n}\n\n// endstyle modifies an SVG object, with either a series of name=\"value\" pairs,\n// or a single string containing a style\nfunc endstyle(s []string, endtag string) string {\n\tif len(s) > 0 {\n\t\tnv := \"\"\n\t\tfor i := 0; i < len(s); i++ {\n\t\t\tif strings.Index(s[i], \"=\") > 0 {\n\t\t\t\tnv += (s[i]) + \" \"\n\t\t\t} else {\n\t\t\t\tnv += style(s[i]) + \" \"\n\t\t\t}\n\t\t}\n\t\treturn nv + endtag\n\t}\n\treturn endtag\n\n}\n\n// tt creates a xml element, tag containing s\nfunc (svg *SVG) tt(tag string, s string) {\n\tsvg.print(\"<\" + tag + \">\")\n\txml.Escape(svg.Writer, []byte(s))\n\tsvg.println(\"</\" + tag + \">\")\n}\n\n// poly compiles the polygon element\nfunc (svg *SVG) poly(x []int, y []int, tag string, s ...string) {\n\tsvg.pp(x, y, \"<\"+tag+\" points=\\\"\")\n\tsvg.print(`\" ` + endstyle(s, \"/>\\n\"))\n}\n\n// onezero returns \"0\" or \"1\"\nfunc onezero(flag bool) string {\n\tif flag {\n\t\treturn \"1\"\n\t}\n\treturn \"0\"\n}\n\n// pct returns a percetage, capped at 100\nfunc pct(n uint8) uint8 {\n\tif n > 100 {\n\t\treturn 100\n\t}\n\treturn n\n}\n\n// islink determines if a string is a script reference\nfunc islink(link string) bool {\n\treturn strings.HasPrefix(link, \"http://\") || strings.HasPrefix(link, \"#\") ||\n\t\tstrings.HasPrefix(link, \"../\") || strings.HasPrefix(link, \"./\")\n}\n\n// group returns a group element\nfunc group(tag string, value string) string { return fmt.Sprintf(`<g %s=\"%s\">`, tag, value) }\n\n// scale return the scale string for the transform\nfunc scale(n float64) string { return fmt.Sprintf(`scale(%g)`, n) }\n\n// scaleXY return the scale string for the transform\nfunc scaleXY(dx, dy float64) string { return fmt.Sprintf(`scale(%g,%g)`, dx, dy) }\n\n// skewx returns the skewX string for the transform\nfunc skewX(angle float64) string { return fmt.Sprintf(`skewX(%g)`, angle) }\n\n// skewx returns the skewX string for the transform\nfunc skewY(angle float64) string { return fmt.Sprintf(`skewY(%g)`, angle) }\n\n// rotate returns the rotate string for the transform\nfunc rotate(r float64) string { return fmt.Sprintf(`rotate(%g)`, r) }\n\n// translate returns the translate string for the transform\nfunc translate(x, y int) string { return fmt.Sprintf(`translate(%d,%d)`, x, y) }\n\n// coord returns a coordinate string\nfunc coord(x int, y int) string { return fmt.Sprintf(`%d,%d`, x, y) }\n\n// ptag returns the beginning of the path element\nfunc ptag(x int, y int) string { return fmt.Sprintf(`<path d=\"M%s`, coord(x, y)) }\n\n// loc returns the x and y coordinate attributes\nfunc loc(x int, y int) string { return fmt.Sprintf(`x=\"%d\" y=\"%d\"`, x, y) }\n\n// href returns the href name and attribute\nfunc href(s string) string { return fmt.Sprintf(`xlink:href=\"%s\"`, s) }\n\n// dim returns the dimension string (x, y coordinates and width, height)\nfunc dim(x int, y int, w int, h int) string {\n\treturn fmt.Sprintf(`x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\"`, x, y, w, h)\n}\n\n// fsattr returns the XML attribute representation of a filterspec, ignoring empty attributes\nfunc fsattr(s Filterspec) string {\n\tattrs := \"\"\n\tif len(s.In) > 0 {\n\t\tattrs += fmt.Sprintf(`in=\"%s\" `, s.In)\n\t}\n\tif len(s.In2) > 0 {\n\t\tattrs += fmt.Sprintf(`in2=\"%s\" `, s.In2)\n\t}\n\tif len(s.Result) > 0 {\n\t\tattrs += fmt.Sprintf(`result=\"%s\" `, s.Result)\n\t}\n\treturn attrs\n}\n\n// tablevalues outputs a series of values as a XML attribute\nfunc (svg *SVG) tablevalues(s string, t []float64) {\n\tsvg.printf(` %s=\"`, s)\n\tfor i := 0; i < len(t)-1; i++ {\n\t\tsvg.printf(\"%g \", t[i])\n\t}\n\tsvg.printf(`%g\"%s`, t[len(t)-1], emptyclose)\n}\n\n// imgchannel validates the image channel indicator\nfunc imgchannel(c string) string {\n\tswitch c {\n\tcase \"R\", \"G\", \"B\", \"A\":\n\t\treturn c\n\tcase \"r\", \"g\", \"b\", \"a\":\n\t\treturn strings.ToUpper(c)\n\tcase \"red\", \"green\", \"blue\", \"alpha\":\n\t\treturn strings.ToUpper(c[0:1])\n\tcase \"Red\", \"Green\", \"Blue\", \"Alpha\":\n\t\treturn c[0:1]\n\t}\n\treturn \"R\"\n}\n"
        },
        {
          "name": "svgdef.pdf",
          "type": "blob",
          "size": 920.75,
          "content": null
        },
        {
          "name": "svgdef.png",
          "type": "blob",
          "size": 411.4775390625,
          "content": null
        },
        {
          "name": "svgdef.svg",
          "type": "blob",
          "size": 21.169921875,
          "content": "<?xml version=\"1.0\"?>\n<!-- Generated by SVGo -->\n<svg width=\"4500\" height=\"3375\"\n     xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<desc>Object Definitions</desc>\n<defs>\n<linearGradient id=\"linear\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n<stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1.00\"/>\n<stop offset=\"25%\" stop-color=\"lightblue\" stop-opacity=\"1.00\"/>\n<stop offset=\"75%\" stop-color=\"blue\" stop-opacity=\"1.00\"/>\n<stop offset=\"100%\" stop-color=\"rgb(0,0,127)\" stop-opacity=\"1.00\"/>\n</linearGradient>\n<radialGradient id=\"radial\" cx=\"0%\" cy=\"0%\" r=\"100%\" fx=\"50%\" fy=\"50%\">\n<stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1.00\"/>\n<stop offset=\"25%\" stop-color=\"lightblue\" stop-opacity=\"1.00\"/>\n<stop offset=\"75%\" stop-color=\"blue\" stop-opacity=\"1.00\"/>\n<stop offset=\"100%\" stop-color=\"rgb(0,0,127)\" stop-opacity=\"1.00\"/>\n</radialGradient>\n<path d=\"M 0,0 A62,62 0 0 1 250,0\" id=\"tpath\" />\n<g id=\"square\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<rect x=\"0\" y=\"0\" width=\"125\" height=\"125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"62\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">w</text>\n<text x=\"62\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Square(x, y, w int, style ...string)</text>\n</g>\n<g id=\"rect\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"-24\" y=\"62\" style=\"fill:gray; text-anchor:middle\">h</text>\n<text x=\"125\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">w</text>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Rect(x, y, w, h int, style ...string)</text>\n</g>\n<g id=\"crect\">\n<circle cx=\"125\" cy=\"62\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"125\" y=\"38\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"-24\" y=\"62\" style=\"fill:gray; text-anchor:middle\">h</text>\n<text x=\"125\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">w</text>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">CenterRect(x, y, w, h int, style ...string)</text>\n</g>\n<g id=\"roundrect\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" rx=\"25\" ry=\"25\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"-24\" y=\"62\" style=\"fill:gray; text-anchor:middle\">h</text>\n<text x=\"125\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">w</text>\n<line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"25\" style=\"stroke:black; stroke-width:1\"/>\n<line x1=\"0\" y1=\"25\" x2=\"25\" y2=\"25\" style=\"stroke:black; stroke-width:1\"/>\n<text x=\"49\" y=\"13\" style=\"fill:gray; text-anchor:middle\">ry</text>\n<text x=\"12\" y=\"49\" style=\"fill:gray; text-anchor:middle\">rx</text>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Roundrect(x, y, w, h, rx, ry int, style ...string)</text>\n</g>\n<g id=\"polygon\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<circle cx=\"125\" cy=\"-31\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"125\" y=\"-55\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<circle cx=\"250\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"250\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<circle cx=\"250\" cy=\"93\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"250\" y=\"69\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<circle cx=\"125\" cy=\"62\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"125\" y=\"38\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<circle cx=\"0\" cy=\"93\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"69\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<polygon points=\"0,0 125,-31 250,0 250,93 125,62 0,93\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Polygon(x, y []int, style ...string)</text>\n</g>\n<g id=\"circle\">\n<g transform=\"translate(125,62)\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<circle cx=\"0\" cy=\"0\" r=\"62\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<line x1=\"0\" y1=\"0\" x2=\"62\" y2=\"0\" style=\"stroke:black; stroke-width:1\"/>\n<text x=\"31\" y=\"24\" style=\"fill:gray; text-anchor:middle\">r</text>\n<text x=\"0\" y=\"86\" style=\"fill:black; text-anchor:middle;font-size:24px\">Circle(x, y, r int, style ...string)</text>\n</g>\n</g>\n<g id=\"ellipse\">\n<g transform=\"translate(125,62)\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<ellipse cx=\"0\" cy=\"0\" rx=\"125\" ry=\"62\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<line x1=\"0\" y1=\"0\" x2=\"125\" y2=\"0\" style=\"stroke:black; stroke-width:1\"/>\n<line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"62\" style=\"stroke:black; stroke-width:1\"/>\n<text x=\"62\" y=\"24\" style=\"fill:gray; text-anchor:middle\">rx</text>\n<text x=\"-24\" y=\"31\" style=\"fill:gray; text-anchor:middle\">ry</text>\n<text x=\"0\" y=\"86\" style=\"fill:black; text-anchor:middle;font-size:24px\">Ellipse(x, y, rx, ry int, style ...string)</text>\n</g>\n</g>\n<g id=\"line\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x1, y1</text>\n<circle cx=\"250\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"250\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x2, y2</text>\n<line x1=\"0\" y1=\"0\" x2=\"250\" y2=\"0\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Line(x1, y1, x2, y2 int, style ...string)</text>\n</g>\n<g id=\"polyline\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<circle cx=\"83\" cy=\"-62\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"83\" y=\"-86\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<circle cx=\"187\" cy=\"-41\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"187\" y=\"-65\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<circle cx=\"250\" cy=\"-125\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"250\" y=\"-149\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<polyline points=\"0,0 83,-62 187,-41 250,-125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Polyline(x, y []int, style ...string)</text>\n</g>\n<g id=\"arc\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">sx, sy</text>\n<circle cx=\"250\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"250\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">ex, ey</text>\n<path d=\"M0,0 A62,62 0 0 1 250,0\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"125\" y=\"148\" style=\"fill:black; text-anchor:middle;font-size:24px\">Arc(sx, sy, ax, ay, r int, lflag, sflag bool, ex, ey int, style ...string)</text>\n</g>\n<g id=\"path\">\n<path d=\"M36,5l12,41l12-41h33v4l-13,21c30,10,2,69-21,28l7-2c15,27,33,-22,3,-19v-4l12-20h-15l-17,59h-1l-13-42l-12,42h-1l-20-67h9l12,41l8-28l-4-13h9\" fill=\"rgb(0,0,127)\" />\n<path d=\"M94,53c15,32,30,14,35,7l-1-7c-16,26-32,3-34,0M122,16c-10-21-34,0-21,30c-5-30 16,-38 23,-21l5-10l-2-9\" style=\"fill-opacity:0.50; fill:rgb(0,0,0)\"/>\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<text x=\"62\" y=\"160\" style=\"fill:black; text-anchor:middle;font-size:24px\">Path(s string, style ...string)</text>\n</g>\n<g id=\"qbez\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">sx, sy</text>\n<circle cx=\"41\" cy=\"-93\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"41\" y=\"-117\" style=\"fill:gray; text-anchor:middle\">cx, cy</text>\n<circle cx=\"250\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"250\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">ex, ey</text>\n<path d=\"M0,0 Q41,-93 250,0\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Qbez(sx, sy, cx, cy, ex, ey int, style ...string)</text>\n</g>\n<g id=\"bezier\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">sx, sy</text>\n<circle cx=\"125\" cy=\"-62\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"125\" y=\"-86\" style=\"fill:gray; text-anchor:middle\">cx, cy</text>\n<circle cx=\"125\" cy=\"62\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"125\" y=\"38\" style=\"fill:gray; text-anchor:middle\">px, py</text>\n<circle cx=\"250\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"250\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">ex, ey</text>\n<path d=\"M0,0 C125,-62 125,62 250,0\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Bezier(sx, sy, cx, cy, px, py, ex, ey int, style ...string)</text>\n</g>\n<g id=\"image\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<rect x=\"0\" y=\"0\" width=\"128\" height=\"128\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<text x=\"-24\" y=\"64\" style=\"fill:gray; text-anchor:middle\">h</text>\n<text x=\"64\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">w</text>\n<image x=\"0\" y=\"0\" width=\"128\" height=\"128\" xlink:href=\"gophercolor128x128.png\" />\n<text x=\"64\" y=\"152\" style=\"fill:black; text-anchor:middle;font-size:24px\">Image(x, y, w, h, int path string, style ...string)</text>\n</g>\n<g id=\"lgrad\">\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill:url(#linear)\"/>\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x1%, y1%</text>\n<circle cx=\"250\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"250\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x2%, y2%</text>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">LinearGradient(s string, x1, y1, x2, y2 uint8, oc []Offcolor)</text>\n</g>\n<g id=\"rgrad\">\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill:url(#radial)\"/>\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">cx%, cy%</text>\n<circle cx=\"125\" cy=\"62\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"125\" y=\"38\" style=\"fill:gray; text-anchor:middle\">fx%, fy%</text>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">RadialGradient(s string, cx, cy, r, fx, fy uint8, oc []Offcolor)</text>\n</g>\n<g id=\"trans\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">0, 0</text>\n<circle cx=\"167\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"167\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Translate(x, y int)</text>\n<rect x=\"0\" y=\"0\" width=\"83\" height=\"125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<g transform=\"translate(167,0)\">\n<rect x=\"0\" y=\"0\" width=\"83\" height=\"125\" style=\"fill-opacity:0.25;fill:rgb(0,0,127)\"/>\n</g>\n</g>\n<g id=\"grid\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<text x=\"-24\" y=\"62\" style=\"fill:gray; text-anchor:middle\">h</text>\n<text x=\"125\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">w</text>\n<text x=\"55\" y=\"15\" style=\"fill:gray; text-anchor:middle\">n</text>\n<g style=\"stroke:rgb(0,0,127)\">\n<line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"125\" />\n<line x1=\"31\" y1=\"0\" x2=\"31\" y2=\"125\" />\n<line x1=\"62\" y1=\"0\" x2=\"62\" y2=\"125\" />\n<line x1=\"93\" y1=\"0\" x2=\"93\" y2=\"125\" />\n<line x1=\"124\" y1=\"0\" x2=\"124\" y2=\"125\" />\n<line x1=\"155\" y1=\"0\" x2=\"155\" y2=\"125\" />\n<line x1=\"186\" y1=\"0\" x2=\"186\" y2=\"125\" />\n<line x1=\"217\" y1=\"0\" x2=\"217\" y2=\"125\" />\n<line x1=\"248\" y1=\"0\" x2=\"248\" y2=\"125\" />\n<line x1=\"0\" y1=\"0\" x2=\"250\" y2=\"0\" />\n<line x1=\"0\" y1=\"31\" x2=\"250\" y2=\"31\" />\n<line x1=\"0\" y1=\"62\" x2=\"250\" y2=\"62\" />\n<line x1=\"0\" y1=\"93\" x2=\"250\" y2=\"93\" />\n<line x1=\"0\" y1=\"124\" x2=\"250\" y2=\"124\" />\n</g>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Grid(x, y, w, h, n int, style ...string)</text>\n</g>\n<g id=\"text\">\n<circle cx=\"0\" cy=\"62\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"86\" style=\"fill:gray; text-anchor:middle\">x, y</text>\n<text x=\"0\" y=\"62\" style=\"text-anchor:start;font-size:32pt\">hello, this is SVG</text>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Text(x, y int, s string, style ...string)</text>\n</g>\n<g id=\"scale\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">0, 0</text>\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<g transform=\"scale(0.5)\">\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill-opacity:0.25;fill:rgb(0,0,127)\"/>\n</g>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Scale(n float64)</text>\n</g>\n<g id=\"scalexy\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">0, 0</text>\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<g transform=\"scale(0.5,0.75)\">\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill-opacity:0.25;fill:rgb(0,0,127)\"/>\n</g>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">ScaleXY(x, y float64)</text>\n</g>\n<g id=\"skewx\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">0, 0</text>\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<g transform=\"skewX(30)\">\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill-opacity:0.25;fill:rgb(0,0,127)\"/>\n</g>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">SkewX(a float64)</text>\n</g>\n<g id=\"skewy\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">0, 0</text>\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<g transform=\"skewY(10)\">\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill-opacity:0.25;fill:rgb(0,0,127)\"/>\n</g>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">SkewY(a float64)</text>\n</g>\n<g id=\"skewxy\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">0, 0</text>\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<g transform=\"skewX(10) skewY(10)\">\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill-opacity:0.25;fill:rgb(0,0,127)\"/>\n</g>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">SkewXY(x, y float64)</text>\n</g>\n<g id=\"rotate\">\n<circle cx=\"0\" cy=\"0\" r=\"4\" style=\"fill:rgb(220,220,220)\"/>\n<text x=\"0\" y=\"-24\" style=\"fill:gray; text-anchor:middle\">0, 0</text>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Rotate(r float64)</text>\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill:none; stroke-width:2;stroke:rgb(0,0,127)\"/>\n<path d=\"M125,0 Q135,31 108,62\" style=\"fill:none;stroke:gray\"/>\n<text x=\"62\" y=\"24\" style=\"fill:gray; text-anchor:middle\">r</text>\n<g transform=\"rotate(30)\">\n<rect x=\"0\" y=\"0\" width=\"250\" height=\"125\" style=\"fill-opacity:0.25;fill:rgb(0,0,127)\"/>\n</g>\n</g>\n<g id=\"textpath\">\n<text fill=\"rgb(0,0,127)\" text-anchor=\"start\" font-size=\"16pt\" ><textPath xlink:href=\"#tpath\">It&#39;s &#34;fine&#34; &amp; &#34;dandy&#34; to draw text along a path</textPath></text>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">Textpath(s, pathid string, style ...string)</text>\n</g>\n<g id=\"meta\">\n<g style=\"font-size:24px;fill:black;text-anchor:start\">\n<text x=\"0\" y=\"24\" >New(w io Writer)</text>\n<text x=\"0\" y=\"52\" >Start(w, h int, options ...string)/End()</text>\n<text x=\"0\" y=\"80\" >Startview(w, h, minx, miny, vw, vh int)</text>\n<text x=\"0\" y=\"108\" >Group(s ...string)/Gend()</text>\n<text x=\"0\" y=\"136\" >Gstyle(s string)/Gend()</text>\n<text x=\"0\" y=\"164\" >Gtransform(s string)/Gend()</text>\n<text x=\"0\" y=\"192\" >Gid(id string)/Gend()</text>\n<text x=\"0\" y=\"220\" >ClipPath(s ...string)/ClipEnd()</text>\n<text x=\"0\" y=\"248\" >Def()/DefEnd()</text>\n<text x=\"0\" y=\"276\" >Marker()/MarkerEnd()</text>\n<text x=\"0\" y=\"304\" >Pattern()/PatternEnd()</text>\n<text x=\"0\" y=\"332\" >Desc(s string)</text>\n<text x=\"0\" y=\"360\" >Title(s string)</text>\n<text x=\"0\" y=\"388\" >Script(type, data ...string)</text>\n<text x=\"0\" y=\"416\" >Mask(id string, x,y,w,h int, style ...string)/MaskEnd()</text>\n<text x=\"0\" y=\"444\" >Link(href string, title string)/LinkEnd()</text>\n<text x=\"0\" y=\"472\" >Use(x int, y int, link string, style ...string)</text>\n</g>\n<g style=\"font-size:24px;fill:rgb(127,127,127);text-anchor:start\">\n<text x=\"650\" y=\"24\" >specify destination</text>\n<text x=\"650\" y=\"52\" >begin/end the document</text>\n<text x=\"650\" y=\"80\" >begin/end the document with viewport</text>\n<text x=\"650\" y=\"108\" >begin/end group with attributes</text>\n<text x=\"650\" y=\"136\" >begin/end group style</text>\n<text x=\"650\" y=\"164\" >begin/end group transform</text>\n<text x=\"650\" y=\"192\" >begin/end group id</text>\n<text x=\"650\" y=\"220\" >begin/end clip path</text>\n<text x=\"650\" y=\"248\" >begin/end a defintion block</text>\n<text x=\"650\" y=\"276\" >begin/end markers</text>\n<text x=\"650\" y=\"304\" >begin/end pattern</text>\n<text x=\"650\" y=\"332\" >set the description element</text>\n<text x=\"650\" y=\"360\" >set the title element</text>\n<text x=\"650\" y=\"388\" >define a script</text>\n<text x=\"650\" y=\"416\" >begin/end mask element</text>\n<text x=\"650\" y=\"444\" >begin/end link to href, with a title</text>\n<text x=\"650\" y=\"472\" >use defined objects</text>\n</g>\n<text x=\"500\" y=\"534\" style=\"fill:black; text-anchor:middle;font-size:24px\">Textlines(x, y int, s []string, size, spacing int, fill, align string)</text>\n</g>\n<g id=\"rgb\">\n<g style=\"fill:gray; text-anchor:middle\">\n<circle cx=\"62\" cy=\"0\" r=\"15\" style=\"fill:rgb(44,0,0)\"/>\n<circle cx=\"125\" cy=\"0\" r=\"15\" style=\"fill:rgb(0,77,0)\"/>\n<circle cx=\"187\" cy=\"0\" r=\"15\" style=\"fill:rgb(0,0,232)\"/>\n<circle cx=\"250\" cy=\"0\" r=\"15\" style=\"fill:rgb(44,77,232)\"/>\n<text x=\"62\" y=\"62\" >r</text>\n<text x=\"125\" y=\"62\" >g</text>\n<text x=\"187\" y=\"62\" >b</text>\n<text x=\"219\" y=\"8\" >-&gt;</text>\n</g>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">RGB(r, g, b int)</text>\n</g>\n<g id=\"rgba\">\n<g style=\"fill:gray; text-anchor:middle\">\n<circle cx=\"62\" cy=\"0\" r=\"15\" style=\"fill:rgb(44,0,0)\"/>\n<circle cx=\"125\" cy=\"0\" r=\"15\" style=\"fill:rgb(0,77,0)\"/>\n<circle cx=\"187\" cy=\"0\" r=\"15\" style=\"fill:rgb(0,0,232)\"/>\n<circle cx=\"250\" cy=\"0\" r=\"15\" style=\"fill-opacity:0.33; fill:rgb(44,77,232)\"/>\n<circle cx=\"260\" cy=\"0\" r=\"15\" style=\"fill-opacity:0.33; fill:rgb(44,77,232)\"/>\n<text x=\"250\" y=\"62\" >alpha</text>\n<text x=\"62\" y=\"62\" >r</text>\n<text x=\"125\" y=\"62\" >g</text>\n<text x=\"187\" y=\"62\" >b</text>\n<text x=\"219\" y=\"8\" >-&gt;</text>\n</g>\n<text x=\"125\" y=\"149\" style=\"fill:black; text-anchor:middle;font-size:24px\">RGBA(r, g, b int, opacity float64)</text>\n</g>\n</defs>\n<title>SVG Go Library Description</title>\n<rect x=\"0\" y=\"0\" width=\"4500\" height=\"3375\" style=\"fill:white;stroke:black;stroke-width:2\"/>\n<g style=\"font-family:Calibri,sans; text-anchor:middle; font-size:24px\">\n<a xlink:href=\"http://github.com/ajstarks/svgo\" xlink:title=\"SVGo Library\">\n<text x=\"2250\" y=\"150\" style=\"font-size:125px\">SVG Go Library</text>\n<text x=\"2250\" y=\"200\" style=\"font-size:50px;fill:gray\">github.com/ajstarks/svgo</text>\n</a>\n<desc>Object Usage</desc>\n<g transform=\"translate(400,400)\">\n<use x=\"0\" y=\"0\" xlink:href=\"#rect\" />\n<use x=\"700\" y=\"0\" xlink:href=\"#crect\" />\n<use x=\"1400\" y=\"0\" xlink:href=\"#roundrect\" />\n<use x=\"2100\" y=\"0\" xlink:href=\"#square\" />\n<use x=\"2800\" y=\"0\" xlink:href=\"#line\" />\n<use x=\"3500\" y=\"0\" xlink:href=\"#polyline\" />\n</g>\n<g transform=\"translate(400,1000)\">\n<use x=\"0\" y=\"0\" xlink:href=\"#polygon\" />\n<use x=\"700\" y=\"0\" xlink:href=\"#circle\" />\n<use x=\"1400\" y=\"0\" xlink:href=\"#ellipse\" />\n<use x=\"2100\" y=\"0\" xlink:href=\"#arc\" />\n<use x=\"2800\" y=\"0\" xlink:href=\"#qbez\" />\n<use x=\"3500\" y=\"0\" xlink:href=\"#bezier\" />\n</g>\n<g transform=\"translate(400,1600)\">\n<use x=\"0\" y=\"0\" xlink:href=\"#trans\" />\n<use x=\"700\" y=\"0\" xlink:href=\"#scale\" />\n<use x=\"1400\" y=\"0\" xlink:href=\"#scalexy\" />\n<use x=\"2100\" y=\"0\" xlink:href=\"#skewx\" />\n<use x=\"2800\" y=\"0\" xlink:href=\"#skewy\" />\n<use x=\"3500\" y=\"0\" xlink:href=\"#skewxy\" />\n</g>\n<g transform=\"translate(400,2200)\">\n<use x=\"0\" y=\"0\" xlink:href=\"#rotate\" />\n<use x=\"700\" y=\"0\" xlink:href=\"#text\" />\n<use x=\"1400\" y=\"0\" xlink:href=\"#textpath\" />\n<use x=\"2100\" y=\"0\" xlink:href=\"#path\" />\n<use x=\"2800\" y=\"0\" xlink:href=\"#image\" />\n<use x=\"3500\" y=\"0\" xlink:href=\"#grid\" />\n</g>\n<g transform=\"translate(400,2800)\">\n<use x=\"0\" y=\"0\" xlink:href=\"#lgrad\" />\n<use x=\"700\" y=\"0\" xlink:href=\"#rgrad\" />\n<use x=\"1400\" y=\"0\" xlink:href=\"#rgb\" />\n<use x=\"2100\" y=\"0\" xlink:href=\"#rgba\" />\n<use x=\"2800\" y=\"0\" xlink:href=\"#meta\" />\n</g>\n</g>\n</svg>\n"
        },
        {
          "name": "svgdef",
          "type": "tree",
          "content": null
        },
        {
          "name": "svgopher",
          "type": "tree",
          "content": null
        },
        {
          "name": "svgplay",
          "type": "tree",
          "content": null
        },
        {
          "name": "svgplot",
          "type": "tree",
          "content": null
        },
        {
          "name": "svgrid",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsg",
          "type": "tree",
          "content": null
        },
        {
          "name": "tumblrgrid",
          "type": "tree",
          "content": null
        },
        {
          "name": "turbulence",
          "type": "tree",
          "content": null
        },
        {
          "name": "vismem",
          "type": "tree",
          "content": null
        },
        {
          "name": "webfonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "websvg",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}