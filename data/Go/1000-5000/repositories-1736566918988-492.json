{
  "metadata": {
    "timestamp": 1736566918988,
    "page": 492,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "qjfoidnh/BaiduPCS-Go",
      "stars": 3129,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "BaiduPCS-Go.exe.manifest",
          "type": "blob",
          "size": 0.708984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\" xmlns:asmv3=\"urn:schemas-microsoft-com:asm.v3\">\n\t<assemblyIdentity version=\"1.0.0.0\" processorArchitecture=\"*\" name=\"com.qjfoidnh.baidupcsgo\" type=\"win32\"/>\n\t<dependency>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity type=\"win32\" name=\"Microsoft.Windows.Common-Controls\" version=\"6.0.0.0\" processorArchitecture=\"*\" publicKeyToken=\"6595b64144ccf1df\" language=\"*\"/>\n\t\t</dependentAssembly>\n\t</dependency>\n\t<asmv3:application>\n\t\t<asmv3:windowsSettings xmlns=\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\">\n\t\t\t<dpiAware>true</dpiAware>\n\t\t</asmv3:windowsSettings>\n\t</asmv3:application>\n</assembly>"
        },
        {
          "name": "Info.plist",
          "type": "blob",
          "size": 0.6171875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n\t<dict>\n\t\t<key>CFBundleName</key>\n\t\t<string>BaiduPCS-Go</string>\n\t\t<key>CFBundleSupportedPlatforms</key>\n\t\t<array>\n\t\t\t<string>iPhoneOS</string>\n\t\t</array>\n\t\t<key>CFBundleExecutable</key>\n\t\t<string>BaiduPCS-Go</string>\n\t\t<key>CFBundleVersion</key>\n\t\t<string>1.0</string>\n\t\t<key>CFBundleIdentifier</key>\n\t\t<string>com.qjfoidnh.baidupcsgo</string>\n\t\t<key>LSRequiresIPhoneOS</key>\n\t\t<true/>\n\t\t<key>CFBundleDisplayName</key>\n\t\t<string>BaiduPCS-Go</string>\n\t</dict>\n</plist>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.03515625,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright iikira.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 33.376953125,
          "content": "# BaiduPCS-Go 百度网盘客户端(加强版)\n\n\n仿 Linux shell 文件处理命令的百度网盘命令行客户端.\n\niikira/BaiduPCS-Go was largely inspired by [GangZhuo/BaiduPCS](https://github.com/GangZhuo/BaiduPCS) and this project was largely based on iikira/BaiduPCS-Go\n\n## 注意\n\n此版本基于iikira原版BaiduPCS-Go v3.6.2继续开发, 并添加了转存功能.\n\n本软件不提供超出官方客户端的下载提速, 普通用户和SVIP的配置建议参见 [显示和修改程序配置项](#显示和修改程序配置项)\n\n<!-- toc -->\n## 目录\n\n- [特色](#特色)\n- [版本更新](#版本更新)\n- [编译/交叉编译 说明](#编译交叉编译-说明)\n- [下载/运行 说明](#下载运行-说明)\n  * [安装](#安装)\n  * [Windows](#windows)\n  * [Linux / macOS](#linux--macos)\n  * [Android / iOS](#android--ios)\n- [命令列表及说明](#命令列表及说明)\n  * [注意 ! ! !](#注意---)\n  * [检测程序更新](#检测程序更新)\n  * [登录百度帐号](#登录百度帐号)\n  * [列出帐号列表](#列出帐号列表)\n  * [获取当前帐号](#获取当前帐号)\n  * [切换百度帐号](#切换百度帐号)\n  * [退出百度帐号](#退出百度帐号)\n  * [获取网盘配额](#获取网盘配额)\n  * [切换工作目录](#切换工作目录)\n  * [输出工作目录](#输出工作目录)\n  * [列出目录](#列出目录)\n  * [列出目录树形图](#列出目录树形图)\n  * [获取文件/目录的元信息](#获取文件目录的元信息)\n  * [搜索文件](#搜索文件)\n  * [下载文件/目录](#下载文件目录)\n  * [上传文件/目录](#上传文件目录)\n  * [获取下载直链](#获取下载直链)\n  * [修复文件MD5](#修复文件MD5)\n  * [创建目录](#创建目录)\n  * [删除文件/目录](#删除文件目录)\n  * [拷贝文件/目录](#拷贝文件目录)\n  * [移动/重命名文件/目录](#移动重命名文件目录)\n  * [转存文件/目录](#转存文件目录)\n  * [分享文件/目录](#分享文件目录)\n    + [设置分享文件/目录](#设置分享文件目录)\n    + [列出已分享文件/目录](#列出已分享文件目录)\n    + [取消分享文件/目录](#取消分享文件目录)\n  * [离线下载](#离线下载)\n    + [添加离线下载任务](#添加离线下载任务)\n    + [精确查询离线下载任务](#精确查询离线下载任务)\n    + [查询离线下载任务列表](#查询离线下载任务列表)\n    + [取消离线下载任务](#取消离线下载任务)\n    + [删除离线下载任务](#删除离线下载任务)\n  * [回收站](#回收站)\n    + [列出回收站文件列表](#列出回收站文件列表)\n    + [还原回收站文件或目录](#还原回收站文件或目录)\n    + [删除回收站文件或目录/清空回收站](#删除回收站文件或目录清空回收站)\n  * [显示和修改程序配置项](#显示和修改程序配置项)\n  * [测试通配符](#测试通配符)\n  * [工具箱](#工具箱)\n- [初级使用教程](#初级使用教程)\n  * [1. 查看程序使用说明](#1-查看程序使用说明)\n  * [2. 登录百度帐号 (必做)](#2-登录百度帐号-必做)\n  * [3. 切换网盘工作目录](#3-切换网盘工作目录)\n  * [4. 网盘内列出文件和目录](#4-网盘内列出文件和目录)\n  * [5. 下载文件](#5-下载文件)\n  * [6. 设置下载最大并发量](#6-设置下载最大并发量)\n  * [7. 恢复默认配置](#7-恢复默认配置)\n  * [8. 退出程序](#8-退出程序)\n- [已知问题](#已知问题)\n- [TODO](#todo)\n- [交流反馈](#交流反馈)\n\n<!-- tocstop -->\n\n# 特色\n\n多平台支持, 支持 Windows, macOS, linux, 移动设备等.\n\n百度帐号多用户支持;\n\n通配符匹配网盘路径和 Tab 自动补齐命令和路径, [通配符_百度百科](https://baike.baidu.com/item/通配符);\n\n[下载](#下载文件目录)网盘内文件, 支持多个文件或目录下载, 支持断点续传和单文件并行下载;\n\n[上传](#上传文件目录)本地文件, 支持上传大文件(>2GB), 支持多个文件或目录上传;\n\n[转存](#转存文件目录)其他用户分享的文件, 支持带密码的分享链接; \n\n[导出](#导出文件目录)网盘内的文件秒传链接, 可选导出BaiduPCS-Go原生格式或通用格式;\n\n[离线下载](#离线下载), 支持http/https/ftp/电驴/磁力链协议.\n\n# 版本更新\n**2025.01.07** v3.9.7\n- fix #359, #360\n- fix #339\n\n**2024.12.14** v3.9.6\n- 关闭秒传转存功能\n- 修复常规转存失败\n\n**2023.09.30** v3.9.5\n- 恢复秒传转存功能, 使用前需设置accessToken, 参见setastoken --help\n- 本地文件上传用秒传无须accessToken\n- fix #301\n- fix #302\n\n**2023.09.06** v3.9.5-beta\n- 恢复了秒传转存(支持长短链), 感谢油猴脚本开发者tousakarin的贡献\n- 新秒传接口需要开发者授权, 稳定性未知, 该测试版本仅供有秒传强需求的用户试用, 请谨慎更新\n\n**2023.09.05** v3.9.4\n- fix #244, 修复断点上传时偶发崩溃\n- 优化本地上传秒传失败时的处理逻辑\n\n**2023.08.26** v3.9.3\n- 因官方接口从原理层面封禁秒传, 取消秒传转存功能\n- 更新部分使用说明\n- 建议使用文件上传功能的用户更新此版本\n\n**2023.06.03** v3.9.2\n- 修复秒传链接无法转存, 因官方接口变动秒传已不再支持短链接格式\n- 修复上传文件无法使用秒传\n- fix #254 支持-f参数输出带密码分享链接\n- fix #251 根据mengzonefire同志提供函数增加md5解密\n\n**2023.03.19** v3.9.1\n- 修复秒传转存返回错误码9019\n\n**2022.12.04** v3.9.0:\n- 优化转存错误提示\n- fix #239\n- update go version to 1.18\n\n**2022.11.25** v3.8.9:\n- fix #234, 继续修复无法转存文件\n\n**2022.11.12** v3.8.8:\n- fix #234, 修复无法转存文件\n\n**2022.2.18** v3.8.7:\n- fix #175, 在正式上传前即进行文件大小检测\n\n**2022.2.14** v3.8.6:\n- fix #160 #173, 修复上传出现空文件的bug\n- fix #165, 支持自带提取码的转存链接\n- fix #175, upload增加-policy=rsync策略, 配合--norapid使用, 只跳过大小未发生改变的文件\n- 鉴于 #172, 建议下载线程数最大不超过12\n\n**2022.1.1** v3.8.5:\n#### 该版本存在已知问题将导致上传文件失败及出现空文件，建议跳过更新\n- 2022新年好, 本次更新增加较多特性, 欢迎测试\n- fix #146, 提前fail和skip上传策略中重名文件的检测环节（存在问题）\n- fix #158, config可配置关闭文件名合法性检测\n- fix #141, download增加--mtime选项可保持文件修改时间\n- fix #130, config可配置force_login_username, 强制登录指定用户名\n- 首条下载链接不可用时自动切换, 增加下载成功率\n\n**2021.10.6** v3.8.4:\n- fix 登录时可能出现内存溢出\n- 上传文件名允许包含单引号\n\n**2021.8.27** v3.8.3:\n- fix 更换默认panUA解决svip限速\n- fix 移除失效的秒传修复功能 \n- 优化秒传逻辑, 提高成功率\n- 优化秒传导出逻辑, 提高新文件的导出成功率  \n\n**2021.7.20** v3.8.2:\n- fix 读取大量文件信息容易超时\n- fix 秒传链接文件名带\"#\"时解析错误\n- share list增加分享下载数显示  \n- config增加配置: 上传的同名文件处理策略\n\n**2021.6.9** v3.8.1:\n- fix 部分旧链接无法转存\n- 增加上传同名文件自动跳过选项\n\n**2021.5.21** v3.8.0:\n- fix 上传到100M左右自动回滚（待测试）\n- fix 个别正常的秒传链接无法转存\n- fix 文件名含有百分号导出异常\n- 优化上传重试策略（待测试）\n\n**2021.4.14** v3.7.9:\n- fix 上传时异常退出导致无法加载断点信息\n- fix 上传偶发出现0B/s卡住\n- 上传时预先检查文件名合法性\n- 在线更新使用镜像源加速\n\n**2021.3.20** v3.7.8:\n\n- 优化了上传的输出信息格式\n- 优化了上传逻辑，提升上传速度\n- transfer增加--fix参数，可转存被屏蔽的秒传链接（inspired by [dupan-rapid-extract](https://github.com/mengzonefire/dupan-rapid-extract)）\n\n**2021.3.11** v3.7.7:\n\n- fix 移动和重命名文件时末尾```/```导致报错\n- fix 3.7.2版本后在线升级无效\n- fix 转存误报缺少STOKEN\n\n**2021.2.23** v3.7.6:\n\n- fix 下载文件报```x509: certificate is valid```错误\n- 完善了下载错误的捕获种类\n- download增加--fullpath参数，本地目录保留网盘从根目录开始的完整结构\n\n**2021.2.8** v3.7.5:\n\n- fix 某些时候误报stoken缺失\n- fix windows平台上秒传链接转存失败\n- fix 某些时候pcs请求缺少Host\n- 当分享链接包含多文件/目录时，可选归档到第一个文件命名的目录里（不支持秒传）\n\n**2021.1.31** v3.7.4:\n\n- fix 下载目录会丢失目录结构\n- fix 分享列表状态信息显示错误\n- 支持自定义文件上传服务器\n\n**2021.1.22** v3.7.3:\n\n- 分享支持自定义分享码和有效天数\n- 转存支持转存完毕后自动下载到默认目录\n- 增加恢复默认配置功能\n- tree命令支持指定输出最大层数和带fsid输出\n\n**2021.1.9** v3.7.2:\n\n- 基本修复了登录验证失效问题([#15](https://github.com/qjfoidnh/BaiduPCS-Go/issues/15))\n- 优化下载模块的实现策略, 保证稳定性同时进一步提升下载速度 (需按[显示和修改程序配置项](#显示和修改程序配置项)中建议修改)\n- update 功能恢复, 以后可以在线升级了\n- 支持导出秒传链接不写文件, 直接输出到控制台; 支持通用秒传格式导出, 具体参见export --help\n- 其他bug修正\n\n**2021.1.2** v3.7.1:\n\n- 支持了多文件并发上传，文件并发数和单文件分片数可在配置中指定\n- 修复了最大同时下载文件数配置不生效的问题\n- 修正了部分显示和帮助的错误\n\n**2020.12.19** v3.7.0:\n\n* 替换了iikira版本的失效仓库\n* 转存功能支持旧的短链接\n* 默认关闭下载文件校验，配置文件可设置开启\n* 修复了关闭校验时会误报下载失败的问题\n* 转存功能除了cookies方式登录，现已支持用户名密码登录和bduss登录；bduss登录需同时指定stoken\n\n**2020.11.08** v3.6.3:\n\n* 修复转存失败\n* 修复分享文件失败\n\n\n# 编译/交叉编译 说明\n设置好 GOOS 和 GOARCH 环境变量,\n\n运行 go tool dist list 查看所有支持的 GOOS/GOARCH\n\n## Linux/Darwin 例子: 编译 Windows 下的 64 位程序\n```\nGOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build\n```\n## Windows 例子: 编译 Linux 下的 32 位程序\n```\nset GOOS=linux\nset GOARCH=386\nset CGO_ENABLED=0\ngo build\n```\n\n# 下载/运行 说明\n\nGo语言程序, 常用几种平台的已编译程序可直接在[蓝奏云](https://wws.lanzoui.com/b01berebe)下载使用. 密码:4pix\n\n如果程序运行时输出乱码, 请检查下终端的编码方式是否为 `UTF-8`.\n\n使用本程序之前, 建议学习一些 linux 基础知识 和 基础命令.\n\n如果未带任何参数运行程序, 程序将会进入仿Linux shell系统用户界面的cli交互模式, 可直接运行相关命令.\n\ncli交互模式下, 光标所在行的前缀应为 `BaiduPCS-Go >`, 如果登录了百度帐号则格式为 `BaiduPCS-Go:<工作目录> <百度ID>$ `\n\n程序会提供相关命令的使用说明.\n\n## 安装\n\n\n## Windows\n\n程序应在 命令提示符 (Command Prompt) 或 PowerShell 中运行, 在 mintty (例如: GitBash) 可能会有显示问题.\n\n也可直接双击程序运行, 具体使用方法请参见 [命令列表及说明](#命令列表及说明) 和 [初级使用教程](#初级使用教程).\n\n## Linux / macOS\n\n程序应在 终端 (Terminal) 运行.\n\n具体使用方法请参见 [命令列表及说明](#命令列表及说明) 和 [初级使用教程](#初级使用教程).\n\n## Android / iOS\n\n> Android / iOS 移动设备操作比较麻烦, 不建议在移动设备上使用本程序. 移动设备不可直接使用预编译的Linux arm64版本, 使用者需下载源码自行交叉编译.\n\n安卓, 建议使用 [Termux](https://termux.com) 或 [NeoTerm](https://github.com/NeoTerm/NeoTerm) 或 终端模拟器, 以提供终端环境.\n\n示例: [Android 运行本项目程序参考示例](https://web.archive.org/web/20190820154934/https://github.com/iikira/BaiduPCS-Go/wiki/Android-%E8%BF%90%E8%A1%8C%E6%9C%AC%E9%A1%B9%E7%9B%AE%E7%A8%8B%E5%BA%8F%E5%8F%82%E8%80%83%E7%A4%BA%E4%BE%8B), 有兴趣的可以参考一下.\n\n苹果iOS, 需要越狱, 在 Cydia 搜索下载并安装 MobileTerminal, 或者其他提供终端环境的软件.\n\n示例: [iOS 运行本项目程序参考示例](https://web.archive.org/web/20190820155025/https://github.com/iikira/BaiduPCS-Go/wiki/iOS-%E8%BF%90%E8%A1%8C%E6%9C%AC%E9%A1%B9%E7%9B%AE%E7%A8%8B%E5%BA%8F%E5%8F%82%E8%80%83%E7%A4%BA%E4%BE%8B), 有兴趣的可以参考一下.\n\n具体使用方法请参见 [命令列表及说明](#命令列表及说明) 和 [初级使用教程](#初级使用教程).\n\n# 命令列表及说明\n\n## 注意 ! ! !\n\n命令的前缀 `BaiduPCS-Go` 为指向程序运行的全路径名 (ARGv 的第一个参数)\n\n直接运行程序时, 未带任何其他参数, 则程序进入cli交互模式, 运行以下命令时, 要把命令的前缀 `BaiduPCS-Go` 去掉!\n\ncli交互模式已支持按tab键自动补全命令和路径.\n\n## 检测程序更新\n```\nBaiduPCS-Go update\n```\n\n## 登录百度帐号\n\n### 常规登录百度帐号\n\n支持在线验证绑定的手机号或邮箱,\n注: 此方式已长期不维护, 建议使用其他登录方式\n```\nBaiduPCS-Go login\n```\n\n### 使用百度 BDUSS 来登录百度帐号\n\n[关于 获取百度 BDUSS](https://blog.csdn.net/ykiwmy/article/details/103730962)\n\n```\nBaiduPCS-Go login -bduss=<BDUSS>\n```\n\n### 使用百度 BDUSS 和 百度网盘 STOKEN 来登录百度账号\n\nSTOKEN 获取方式与 BDUSS 基本相同。注意 STOKEN 必须在百度网盘页面获取，否则无效.\n\n```\nBaiduPCS-Go login -bduss=<BDUSS> -stoken=<STOKEN>\n```\n\n### 使用百度 Cookies 来登录百度账号\n\n[关于 获取百度 Cookies](https://jingyan.baidu.com/article/5553fa829a6a9e65a23934b0.html)\n教程中为百度经验的Cookies获取, 这里换成百度网盘首页即可.\n\n```\nBaiduPCS-Go login -cookies=<Cookies>\n```\n\n#### 例子\n```\nBaiduPCS-Go login -bduss=1234567\n```\n```\nBaiduPCS-Go login\n请输入百度用户名(手机号/邮箱/用户名), 回车键提交 > 1234567\n```\n```\nBaiduPCS-Go login -cookies=\"BAIDUID=50949C0890YG9735EA6Q3870AFE38:FG=1; BIDUPSID=112335C0ACCAFFJW675EA69A870AFE38; PSTM=1981928511; BDORZ=D6745EBF6F3SW24E515D22A1598; PANWEB=1; BDUSS=ASAYUGFHSTFKGBGSU; STOKEN=gfsdge9gisfgspig34254d7879eee5756b10sgeyrw5vyw342td510ffc9414d32251; SCRC=cwrywec5evyetra26bvvehefvfg6a8; BDCLND=C%4sfgGysrZ%2BML6; PANPSC=wreyewygdfhdggedhsdfg4353\"\n```\n\n## 列出帐号列表\n\n```\nBaiduPCS-Go loglist\n```\n\n列出所有已登录的百度帐号\n\n## 获取当前帐号\n\n```\nBaiduPCS-Go who\n```\n\n## 切换百度帐号\n\n切换已登录的百度帐号\n```\nBaiduPCS-Go su <uid>\n```\n```\nBaiduPCS-Go su\n\n请输入要切换帐号的 # 值 >\n```\n\n## 退出百度帐号\n\n退出当前登录的百度帐号\n```\nBaiduPCS-Go logout\n```\n\n程序会进一步确认退出帐号, 防止误操作.\n\n## 获取网盘配额\n\n```\nBaiduPCS-Go quota\n```\n获取网盘的总储存空间, 和已使用的储存空间\n\n## 切换工作目录\n```\nBaiduPCS-Go cd <目录>\n```\n\n### 切换工作目录后自动列出工作目录下的文件和目录\n```\nBaiduPCS-Go cd -l <目录>\n```\n\n#### 例子\n```\n# 切换 /我的资源 工作目录\nBaiduPCS-Go cd /我的资源\n\n# 切换 上级目录\nBaiduPCS-Go cd ..\n\n# 切换 根目录\nBaiduPCS-Go cd /\n\n# 切换 /我的资源 工作目录, 并自动列出 /我的资源 下的文件和目录\nBaiduPCS-Go cd -l 我的资源\n\n# 使用通配符\nBaiduPCS-Go cd /我的*\n```\n\n## 输出工作目录\n```\nBaiduPCS-Go pwd\n```\n\n## 列出目录\n\n列出当前工作目录的文件和目录或指定目录\n```\nBaiduPCS-Go ls\n```\n```\nBaiduPCS-Go ls <目录>\n```\n\n### 可选参数\n```\n-asc: 升序排序\n-desc: 降序排序\n-time: 根据时间排序\n-name: 根据文件名排序\n-size: 根据大小排序\n```\n\n#### 例子\n```\n# 列出 我的资源 内的文件和目录\nBaiduPCS-Go ls 我的资源\n\n# 绝对路径\nBaiduPCS-Go ls /我的资源\n\n# 降序排序\nBaiduPCS-Go ls -desc 我的资源\n\n# 按文件大小降序排序\nBaiduPCS-Go ls -size -desc 我的资源\n\n# 使用通配符\nBaiduPCS-Go ls /我的*\n```\n\n## 列出目录树形图\n\n列出当前工作目录的文件和目录或指定目录的树形图\n```\nBaiduPCS-Go tree <目录>\n\n# 默认获取工作目录元信息\nBaiduPCS-Go tree\n```\n\n## 获取文件/目录的元信息\n```\nBaiduPCS-Go meta <文件/目录1> <文件/目录2> <文件/目录3> ...\n\n# 默认获取工作目录元信息\nBaiduPCS-Go meta\n```\n\n#### 例子\n```\nBaiduPCS-Go meta 我的资源\nBaiduPCS-Go meta /\n```\n\n## 搜索文件\n\n按文件名搜索文件（不支持查找目录）。\n\n默认在当前工作目录搜索.\n\n```\nBaiduPCS-Go search [-path=<需要检索的目录>] [-r] <关键字>\n```\n\n#### 例子\n```\n# 搜索根目录的文件\nBaiduPCS-Go search -path=/ 关键字\n\n# 搜索当前工作目录的文件\nBaiduPCS-Go search 关键字\n\n# 递归搜索当前工作目录的文件\nBaiduPCS-Go search -r 关键字\n```\n\n## 下载文件/目录\n```\nBaiduPCS-Go download <网盘文件或目录的路径1> <文件或目录2> <文件或目录3> ...\nBaiduPCS-Go d <网盘文件或目录的路径1> <文件或目录2> <文件或目录3> ...\n```\n\n### 可选参数\n```\n  --test          测试下载, 此操作不会保存文件到本地\n  --ow            overwrite, 覆盖已存在的文件\n  --status        输出所有线程的工作状态\n  --save          将下载的文件直接保存到当前工作目录\n  --saveto value  将下载的文件直接保存到指定的目录\n  -x              为文件加上执行权限, (windows系统无效)\n  --mode value    下载模式, 可选值: pcs, stream, locate, 默认为 locate, 相关说明见上面的帮助 (default: \"locate\")\n  -p value        指定下载线程数 (default: 0)\n  -l value        指定同时进行下载文件的数量 (default: 0)\n  --retry value   下载失败最大重试次数 (default: 3)\n  --nocheck       下载文件完成后不校验文件\n\n```\n\n下载的文件默认保存到 **程序所在目录** 的 download/ 目录, 支持设置指定目录, 重名的文件会自动跳过!\n\n下载的文件默认保存到, **程序所在目录**的 **download/** 目录.\n\n通过 `BaiduPCS-Go config set -savedir <savedir>`, 自定义保存的目录.\n\n支持多个文件或目录下载.\n\n支持下载完成后自动校验文件, 但并不是所有的文件都支持校验!\n\n自动跳过下载重名的文件!\n\n\n#### 例子\n```\n# 设置保存目录, 保存到 D:\\Downloads\n# 注意区别反斜杠 \"\\\" 和 斜杠 \"/\" !!!\nBaiduPCS-Go config set -savedir D:/Downloads\n\n# 下载 /我的资源/1.mp4\nBaiduPCS-Go d /我的资源/1.mp4\n\n# 下载 /我的资源 整个目录!!\nBaiduPCS-Go d /我的资源\n\n# 下载网盘内的全部文件!!\nBaiduPCS-Go d /\nBaiduPCS-Go d *\n```\n\n## 上传文件/目录\n```\nBaiduPCS-Go upload <本地文件/目录的路径1> <文件/目录2> <文件/目录3> ... <目标目录>\nBaiduPCS-Go u <本地文件/目录的路径1> <文件/目录2> <文件/目录3> ... <目标目录>\n```\n\n* 上传默认采用分片上传的方式, 上传的文件将会保存到, <目标目录>.\n\n* 遇到同名文件将会自动覆盖!!\n\n* 当上传的文件名和网盘的目录名称相同时, 不会覆盖目录, 防止丢失数据.\n\n\n#### 注意:\n\n* 分片上传之后, 服务器可能会记录到错误的文件md5, 可使用 fixmd5 命令尝试修复文件的MD5值, 修复md5不一定能成功, 但文件的完整性是没问题的.\n\nfixmd5 命令使用方法:\n```\nBaiduPCS-Go fixmd5 -h\n```\n\n* 禁用分片上传可以保证服务器记录到正确的md5.\n\n* 禁用分片上传时只能使用单线程上传, 指定的单个文件上传最大线程数将会无效.\n\n#### 例子:\n```\n# 将本地的 C:\\Users\\Administrator\\Desktop\\1.mp4 上传到网盘 /视频 目录\n# 注意区别反斜杠 \"\\\" 和 斜杠 \"/\" !!!\nBaiduPCS-Go upload C:/Users/Administrator/Desktop/1.mp4 /视频\n\n# 将本地的 C:\\Users\\Administrator\\Desktop\\1.mp4 和 C:\\Users\\Administrator\\Desktop\\2.mp4 上传到网盘 /视频 目录\nBaiduPCS-Go upload C:/Users/Administrator/Desktop/1.mp4 C:/Users/Administrator/Desktop/2.mp4 /视频\n\n# 将本地的 C:\\Users\\Administrator\\Desktop 整个目录上传到网盘 /视频 目录\nBaiduPCS-Go upload C:/Users/Administrator/Desktop /视频\n```\n\n## 获取下载直链\n```\nBaiduPCS-Go locate <文件1> <文件2> ...\n```\n\n#### 注意\n\n若该功能无法正常使用, 提示`user is not authorized, hitcode:xxx`, 尝试更换 User-Agent 为 `netdisk;2.2.51.6;netdisk;10.0.63;PC;android-android`:\n```\nBaiduPCS-Go config set -user_agent \"netdisk;2.2.51.6;netdisk;10.0.63;PC;android-android\"\n```\n\n\n## 修复文件MD5\n```\nBaiduPCS-Go fixmd5 <文件1> <文件2> <文件3> ...\n```\n\n尝试修复文件的MD5值, 以便于校验文件的完整性和导出文件.\n\n使用分片上传文件, 当文件分片数大于1时, 百度网盘服务端最终计算所得的md5值和本地的不一致, 这可能是百度网盘的bug.\n\n不过把上传的文件下载到本地后，对比md5值是匹配的, 也就是文件在传输中没有发生损坏.\n\n对于MD5值可能有误的文件, 程序会在获取文件的元信息时, 给出MD5值 \"可能不正确\" 的提示, 表示此文件可以尝试进行MD5值修复.\n\n修复文件MD5不一定能成功, 原因可能是服务器未刷新, 可过几天后再尝试.\n\n修复文件MD5的原理为秒传文件, 即修复文件MD5成功后, 文件的**创建日期, 修改日期, fs_id, 版本历史等信息**将会被覆盖, 修复的MD5值将覆盖原先的MD5值, 但不影响文件的完整性.\n\n注意: 无法修复 **20GB** 以上文件的 md5!!\n\n#### 例子:\n```\n# 修复 /我的资源/1.mp4 的 MD5 值\nBaiduPCS-Go fixmd5 /我的资源/1.mp4\n```\n\n## 获取本地文件的秒传信息\n\n```\n\nBaiduPCS-Go sumfile <本地文件的路径>\n\nBaiduPCS-Go sf <本地文件的路径>\n\n```\n\n获取本地文件的大小, md5, 前256KB切片的 md5, crc32.\n\n#### 例子:\n\n```\n\n# 获取 C:\\Users\\Administrator\\Desktop\\1.mp4 的秒传信息\n\nBaiduPCS-Go sumfile C:/Users/Administrator/Desktop/1.mp4\n\n```\n\n## 导出文件/目录\n\n```\n\nBaiduPCS-Go export <文件/目录1> <文件/目录2> ...\n\nBaiduPCS-Go ep <文件/目录1> <文件/目录2> ...\n\n```\n\n导出网盘内的文件或目录, 原理为秒传文件, 此操作会生成导出文件或目录的命令.\n\n#### 注意\n\n**秒传已不被支持, 该功能已无实际作用**\n\n#### 例子:\n\n```\n\n# 导出当前工作目录:\n\nBaiduPCS-Go export\n\n# 导出所有文件和目录, 并设置新的根目录为 /root\n\nBaiduPCS-Go export -root=/root /\n\n# 导出 /我的资源\n\nBaiduPCS-Go export /我的资源\n\n# 导出 /我的资源 格式为通用秒传链接格式\n\nBaiduPCS-Go export /我的资源 --link\n\n```\n\n## 创建目录\n```\nBaiduPCS-Go mkdir <目录>\n```\n\n#### 例子\n```\nBaiduPCS-Go mkdir 123\n```\n\n## 删除文件/目录\n```\nBaiduPCS-Go rm <网盘文件或目录的路径1> <文件或目录2> <文件或目录3> ...\n```\n\n注意: 删除多个文件和目录时, 请确保每一个文件和目录都存在, 否则删除操作会失败.\n\n被删除的文件或目录可在网盘文件回收站找回.\n\n#### 例子\n```\n# 删除 /我的资源/1.mp4\nBaiduPCS-Go rm /我的资源/1.mp4\n\n# 删除 /我的资源/1.mp4 和 /我的资源/2.mp4\nBaiduPCS-Go rm /我的资源/1.mp4 /我的资源/2.mp4\n\n# 删除 /我的资源 内的所有文件和目录, 但不删除该目录\nBaiduPCS-Go rm /我的资源/*\n\n# 删除 /我的资源 整个目录 !!\nBaiduPCS-Go rm /我的资源\n```\n\n## 拷贝文件/目录\n```\nBaiduPCS-Go cp <文件/目录> <目标 文件/目录>\nBaiduPCS-Go cp <文件/目录1> <文件/目录2> <文件/目录3> ... <目标目录>\n```\n\n注意: 拷贝多个文件和目录时, 请确保每一个文件和目录都存在, 否则拷贝操作会失败.\n\n#### 例子\n```\n# 将 /我的资源/1.mp4 复制到 根目录 /\nBaiduPCS-Go cp /我的资源/1.mp4 /\n\n# 将 /我的资源/1.mp4 和 /我的资源/2.mp4 复制到 根目录 /\nBaiduPCS-Go cp /我的资源/1.mp4 /我的资源/2.mp4 /\n```\n\n## 移动/重命名文件/目录\n```\n# 移动:\nBaiduPCS-Go mv <文件/目录1> <文件/目录2> <文件/目录3> ... <目标目录>\n# 重命名:\nBaiduPCS-Go mv <文件/目录> <重命名的文件/目录>\n```\n\n注意: 移动多个文件和目录时, 请确保每一个文件和目录都存在, 否则移动操作会失败.\n\n#### 例子\n```\n# 将 /我的资源/1.mp4 移动到 根目录 /\nBaiduPCS-Go mv /我的资源/1.mp4 /\n\n# 将 /我的资源/1.mp4 重命名为 /我的资源/3.mp4\nBaiduPCS-Go mv /我的资源/1.mp4 /我的资源/3.mp4\n```\n\n## 转存文件/目录\n```\n# 转存分享链接里的文件到当前目录:\nBaiduPCS-Go transfer <分享链接> <提取码>\n```\n\n注意: 转存文件保存到当前工作目录下, 不支持指定.\n\n#### 例子\n```\n# 将 https://pan.baidu.com/s/12L_ZZVNxz5f_2CccoyyVrW (提取码edv4) 转存到当前目录\nBaiduPCS-Go transfer https://pan.baidu.com/s/12L_ZZVNxz5f_2CccoyyVrW edv4\nBaiduPCS-Go transfer https://pan.baidu.com/s/12L_ZZVNxz5f_2CccoyyVrW?pwd=edv4\n```\n\n## 分享文件/目录\n```\nBaiduPCS-Go share\n```\n\n### 设置分享文件/目录\n```\nBaiduPCS-Go share set <文件/目录1> <文件/目录2> ...\nBaiduPCS-Go share s <文件/目录1> <文件/目录2> ...\n```\n\n### 列出已分享文件/目录\n```\nBaiduPCS-Go share list\nBaiduPCS-Go share l\n```\n\n### 取消分享文件/目录\n```\nBaiduPCS-Go share cancel <shareid_1> <shareid_2> ...\nBaiduPCS-Go share c <shareid_1> <shareid_2> ...\n```\n\n目前只支持通过分享id (shareid) 来取消分享.\n\n## 离线下载\n```\nBaiduPCS-Go offlinedl\nBaiduPCS-Go clouddl\nBaiduPCS-Go od\n```\n\n离线下载支持http/https/ftp/电驴/磁力链协议\n\n离线下载同时进行的任务数量有限, 超出限制的部分将无法添加.\n\n### 添加离线下载任务\n```\nBaiduPCS-Go offlinedl add -path=<离线下载文件保存的路径> 资源地址1 地址2 ...\n```\n\n添加任务成功之后, 返回离线下载的任务ID.\n\n### 精确查询离线下载任务\n```\nBaiduPCS-Go offlinedl query 任务ID1 任务ID2 ...\n```\n\n### 查询离线下载任务列表\n```\nBaiduPCS-Go offlinedl list\n```\n\n### 取消离线下载任务\n```\nBaiduPCS-Go offlinedl cancel 任务ID1 任务ID2 ...\n```\n\n### 删除离线下载任务\n```\nBaiduPCS-Go offlinedl delete 任务ID1 任务ID2 ...\n\n# 清空离线下载任务记录, 程序不会进行二次确认, 谨慎操作!!!\nBaiduPCS-Go offlinedl delete -all\n```\n\n#### 例子\n```\n# 将百度和腾讯主页, 离线下载到根目录 /\nBaiduPCS-Go offlinedl add -path=/ http://baidu.com http://qq.com\n\n# 添加磁力链接任务\nBaiduPCS-Go offlinedl add magnet:?xt=urn:btih:xxx\n\n# 查询任务ID为 12345 的离线下载任务状态\nBaiduPCS-Go offlinedl query 12345\n\n# 取消任务ID为 12345 的离线下载任务\nBaiduPCS-Go offlinedl cancel 12345\n```\n\n## 回收站\n```\nBaiduPCS-Go recycle\n```\n\n回收站操作.\n\n### 列出回收站文件列表\n```\nBaiduPCS-Go recycle list\n```\n\n#### 可选参数\n```\n  --page value  回收站文件列表页数 (default: 1)\n```\n\n### 还原回收站文件或目录\n```\nBaiduPCS-Go recycle restore <fs_id 1> <fs_id 2> <fs_id 3> ...\n```\n\n根据文件/目录的 fs_id, 还原回收站指定的文件或目录.\n\n### 删除回收站文件或目录/清空回收站\n```\nBaiduPCS-Go recycle delete [-all] <fs_id 1> <fs_id 2> <fs_id 3> ...\n```\n\n根据文件/目录的 fs_id 或 -all 参数, 删除回收站指定的文件或目录或清空回收站.\n\n#### 例子\n```\n# 从回收站还原两个文件, 其中的两个文件的 fs_id 分别为 1013792297798440 和 643596340463870\nBaiduPCS-Go recycle restore 1013792297798440 643596340463870\n\n# 从回收站删除两个文件, 其中的两个文件的 fs_id 分别为 1013792297798440 和 643596340463870\nBaiduPCS-Go recycle delete 1013792297798440 643596340463870\n\n# 清空回收站, 程序不会进行二次确认, 谨慎操作!!!\nBaiduPCS-Go recycle delete -all\n```\n\n## 显示程序环境变量\n```\nBaiduPCS-Go env\n```\n\nBAIDUPCS_GO_CONFIG_DIR: 配置文件路径,\n\nBAIDUPCS_GO_VERBOSE: 是否启用调试.\n\n## 显示和修改程序配置项\n```\n# 显示配置\nBaiduPCS-Go config\n\n# 设置配置\nBaiduPCS-Go config set\n```\n\n注意: v3.5 以后, 程序对配置文件储存路径的寻找做了调整, 配置文件所在的目录可以是程序本身所在目录, 也可以是家目录.\n\n配置文件所在的目录为家目录的情况:\n\nWindows: `%APPDATA%\\BaiduPCS-Go`\n\n其他操作系统: `$HOME/.config/BaiduPCS-Go`\n\n可通过设置环境变量 `BAIDUPCS_GO_CONFIG_DIR`, 指定配置文件存放的目录.\n\n谨慎修改 `appid`, `user_agent`, `pcs_ua`, `pan_ua` 的值, 否则访问网盘服务器时, 可能会出现错误.\n\n上传速度慢的海外用户可尝试修改 `pcs_addr` 值, 选择速度较快的服务器, 目前已知的地址有:\n\n```\npcs.baidu.com\nc.pcs.baidu.com\nc2.pcs.baidu.com\nc3.pcs.baidu.com\nc4.pcs.baidu.com\nc5.pcs.baidu.com\nd.pcs.baidu.com\n```\n\n`cache_size` 的值支持可选设置单位了, 单位不区分大小写, `b` 和 `B` 均表示字节的意思, 如 `64KB`, `1MB`, `32kb`, `65536b`, `65536`.\n\n`max_download_rate`, `max_upload_rate` 的值支持可选设置单位了, 单位为每秒的传输速率, 后缀`/s` 可省略, 如 `2MB/s`, `2MB`, `2m`, `2mb` 均为一个意思.\n\n普通用户请将`max_parallel`和`max_download_load`都设置为1, 调大线程数只会在短时间内提升下载速度, 且极易很快触发限速, 导致几小时至几天内账号在各客户端都接近0速. 本软件不支持普通用户提速.\n\nSVIP用户建议`max_parallel`设置为10以上, 根据实际带宽可调大, 但不建议超过20, `max_download_load`设置为1 - 2, 实验表明可以稳定满速下载.\n\n#### 例子\n```\n# 显示所有可以设置的值\nBaiduPCS-Go config -h\nBaiduPCS-Go config set -h\n\n# 设置下载文件的储存目录\nBaiduPCS-Go config set -savedir D:/Downloads\n\n# 设置下载最大并发量为 15\nBaiduPCS-Go config set -max_parallel 15\n\n# 组合设置\nBaiduPCS-Go config set -max_parallel 150 -savedir D:/Downloads\n```\n\n## 测试通配符\n```\nBaiduPCS-Go match <通配符表达式>\n```\n\n测试通配符匹配路径, 操作成功则输出所有匹配到的路径.\n\n#### 例子\n```\n# 匹配 /我的资源 目录下所有mp4格式的文件\nBaiduPCS-Go match /我的资源/*.mp4\n```\n\n## 工具箱\n```\nBaiduPCS-Go tool\n```\n\n目前工具箱支持加解密文件等.\n\n# 初级使用教程\n\n新手建议: **双击运行程序**, 进入仿 Linux shell 的 cli 交互模式;\n\ncli交互模式下, 光标所在行的前缀应为 `BaiduPCS-Go >`, 如果登录了百度帐号则格式为 `BaiduPCS-Go:<工作目录> <百度ID>$ `\n\n以下例子的命令, 均为 cli交互模式下的命令\n\n运行命令的正确操作: **输入命令, 按一下回车键 (键盘上的 Enter 键)**, 程序会接收到命令并输出结果\n\n## 1. 查看程序使用说明\n\ncli交互模式下, 运行命令 `help`\n\n## 2. 登录百度帐号 (必做)\n\ncli交互模式下, 运行命令 `login -h` (注意空格) 查看帮助\n\ncli交互模式下, 运行命令 `login` 程序将会提示你输入百度用户名(手机号/邮箱/用户名)和密码, 必要时还可以在线验证绑定的手机号或邮箱\n\n## 3. 切换网盘工作目录\n\ncli交互模式下, 运行命令 `cd /我的资源` 将工作目录切换为 `/我的资源` (前提: 该目录存在于网盘)\n\n目录支持通配符匹配, 所以你也可以这样: 运行命令 `cd /我的*` 或 `cd /我的??` 将工作目录切换为 `/我的资源`, 简化输入.\n\n将工作目录切换为 `/我的资源` 成功后, 运行命令 `cd ..` 切换上级目录, 即将工作目录切换为 `/`\n\n为什么要这样设计呢, 举个例子,\n\n假设 你要下载 `/我的资源` 内名为 `1.mp4` 和 `2.mp4` 两个文件, 而未切换工作目录, 你需要依次运行以下命令:\n\n```\nd /我的资源/1.mp4\nd /我的资源/2.mp4\n```\n\n而切换网盘工作目录之后, 依次运行以下命令:\n\n```\ncd /我的资源\nd 1.mp4\nd 2.mp4\n```\n\n这样就达到了简化输入的目的\n\n## 4. 网盘内列出文件和目录\n\ncli交互模式下, 运行命令 `ls -h` (注意空格) 查看帮助\n\ncli交互模式下, 运行命令 `ls` 来列出当前所在目录的文件和目录\n\ncli交互模式下, 运行命令 `ls /我的资源` 来列出 `/我的资源` 内的文件和目录\n\ncli交互模式下, 运行命令 `ls ..` 来列出当前所在目录的上级目录的文件和目录\n\n## 5. 下载文件\n\n说明: 下载的文件默认保存到 download/ 目录 (文件夹)\n\ncli交互模式下, 运行命令 `d -h` (注意空格) 查看帮助\n\ncli交互模式下, 运行命令 `d /我的资源/1.mp4` 来下载位于 `/我的资源/1.mp4` 的文件 `1.mp4` , 该操作等效于运行以下命令:\n\n```\ncd /我的资源\nd 1.mp4\n```\n\n现在已经支持目录 (文件夹) 下载, 所以, 运行以下命令, 会下载 `/我的资源` 内的所有文件 (违规文件除外):\n\n```\nd /我的资源\n```\n\n## 6. 设置下载最大并发量\n\ncli交互模式下, 运行命令 `config set -h` (注意空格) 查看设置帮助以及可供设置的值\n\ncli交互模式下, 运行命令 `config set -max_parallel 2` 将下载最大并发量设置为 2\n\n注意：普通用户下载最大并发量的值超过1将导致账号被限速; SVIP同样不宜设置过高, 建议10~20\n\n## 7. 恢复默认配置\n\ncli交互模式下, 运行命令 `config reset`\n\n## 8. 退出程序\n\n运行命令 `quit` 或 `exit` 或 组合键 `Ctrl+C` 或 组合键 `Ctrl+D`\n\n# 已知问题\n\n* 分片上传文件时, 当文件分片数大于1, 网盘端最终计算所得的md5值和本地的不一致, 这可能是百度网盘的bug, 测试把上传的文件下载到本地后，对比md5值是匹配的. 可通过秒传的原理来修复md5值.\n* 开启MD5校验下载时可能有 check MD5 不通过, 但文件其实并未出错的情况, 使用--no-check下载或配置中启用no_check即可(3.7版本默认已启用).\n* 用户名登录时图片验证码至少要输入两次, 第一次的输入无效\n* 登录出现手机/邮箱验证时要输入至少4次图片验证码\n\n\n# TODO\n\n* 转存文件数量绕过单次限制\n\n# 交流反馈\n\n提交Issue: [Issues](https://github.com/qjfoidnh/BaiduPCS-Go/issues)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "baidupcs",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 4.5595703125,
          "content": "#!/bin/sh\n\nname=\"BaiduPCS-Go\"\nversion=$1\n\nif [ \"$1\" = \"\" ]; then\n  version=v3.7.1\nfi\n\noutput=\"out\"\n\nold_golang() {\n  GOROOT=/usr/local/go\n  go=$GOROOT/bin/go\n}\n\nnew_golang() {\n  GOROOT=/usr/local/go\n  go=$GOROOT/bin/go\n}\n\nBuild() {\n  old_golang\n  goarm=$4\n  if [ \"$4\" = \"\" ]; then\n    goarm=7\n  fi\n\n  echo \"Building $1...\"\n  export GOOS=$2 GOARCH=$3 GO386=sse2 CGO_ENABLED=0 GOARM=$4\n  if [ $2 = \"windows\" ]; then\n    goversioninfo -o=resource_windows_386.syso\n    goversioninfo -64 -o=resource_windows_amd64.syso\n    $go build -ldflags \"-X main.Version=$version -s -w\" -o \"$output/$1/$name.exe\"\n    RicePack $1 $name.exe\n  else\n    $go build -ldflags \"-X main.Version=$version -s -w\" -o \"$output/$1/$name\"\n    RicePack $1 $name\n  fi\n\n  Pack $1\n}\n\nAndroidBuild() {\n  new_golang\n  echo \"Building $1...\"\n  export GOOS=$2 GOARCH=$3 GOARM=$4 CGO_ENABLED=1\n  go build -ldflags \"-X main.Version=$version -s -w -linkmode=external -extldflags=-pie\" -o \"$output/$1/$name\"\n\n  RicePack $1 $name\n  Pack $1\n}\n\nIOSBuild() {\n  old_golang\n  echo \"Building $1...\"\n  mkdir -p \"$output/$1\"\n  cd \"$output/$1\"\n  export CC=/usr/local/go/misc/ios/clangwrap.sh GOOS=darwin GOARCH=arm GOARM=7 CGO_ENABLED=1\n  $go build -ldflags \"-X main.Version=$version -s -w\" -o \"armv7\" github.com/qjfoidnh/BaiduPCS-Go\n  jtool --sign --inplace --ent ../../entitlements.xml \"armv7\"\n  export GOARCH=arm64\n  $go build -ldflags \"-X main.Version=$version -s -w\" -o \"arm64\" github.com/qjfoidnh/BaiduPCS-Go\n  jtool --sign --inplace --ent ../../entitlements.xml \"arm64\"\n  lipo -create \"armv7\" \"arm64\" -output $name # merge\n  rm \"armv7\" \"arm64\"\n  cd ../..\n  RicePack $1 $name\n  Pack $1\n}\n\n# zip 打包\nPack() {\n  cp README.md \"$output/$1\"\n\n  cd $output\n  zip -q -r \"$1.zip\" \"$1\"\n\n  # 删除\n  rm -rf \"$1\"\n\n  cd ..\n}\n\n# rice 打包静态资源\nRicePack() {\n  return # 已取消web功能\n  rice -i github.com/qjfoidnh/BaiduPCS-Go/internal/pcsweb append --exec \"$output/$1/$2\"\n}\n\ntouch ./vendor/golang.org/x/sys/windows/windows.s\n\n# Android\n#export NDK_INSTALL=$ANDROID_NDK_ROOT/bin\n# CC=$NDK_INSTALL/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-gcc AndroidBuild $name-$version\"-android-16-armv5\" android arm 5\n# CC=$NDK_INSTALL/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-gcc AndroidBuild $name-$version\"-android-16-armv6\" android arm 6\n#CC=$NDK_INSTALL/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-gcc AndroidBuild $name-$version\"-android-16-armv7\" android arm 7\n#CC=$NDK_INSTALL/aarch64-linux-android-4.9/bin/aarch64-linux-android-gcc AndroidBuild $name-$version\"-android-21-arm64\" android arm64 7\n#CC=$NDK_INSTALL/i686-linux-android-4.9/bin/i686-linux-android-gcc AndroidBuild $name-$version\"-android-16-386\" android 386 7\n#CC=$NDK_INSTALL/x86_64-linux-android-4.9/bin/x86_64-linux-android-gcc AndroidBuild $name-$version\"-android-21-amd64\" android amd64 7\n\n# iOS\n#IOSBuild $name-$version\"-darwin-ios-arm\"\n\n# OS X / macOS\nBuild $name-$version\"-darwin-osx-amd64\" darwin amd64\nBuild $name-$version\"-darwin-osx-arm64\" darwin arm64\n# Build $name-$version\"-darwin-osx-386\" darwin 386\n\n# Windows\nBuild $name-$version\"-windows-x86\" windows 386\nBuild $name-$version\"-windows-x64\" windows amd64\nBuild $name-$version\"-windows-arm\" windows arm\n\n# Linux\nBuild $name-$version\"-linux-386\" linux 386\nBuild $name-$version\"-linux-amd64\" linux amd64\n#Build $name-$version\"-linux-armv5\" linux arm 5\nBuild $name-$version\"-linux-arm\" linux arm\nBuild $name-$version\"-linux-arm64\" linux arm64\nGOMIPS=softfloat Build $name-$version\"-linux-mips\" linux mips\nBuild $name-$version\"-linux-mips64\" linux mips64\nGOMIPS=softfloat Build $name-$version\"-linux-mipsle\" linux mipsle\nBuild $name-$version\"-linux-mips64le\" linux mips64le\n# Build $name-$version\"-linux-ppc64\" linux ppc64\n# Build $name-$version\"-linux-ppc64le\" linux ppc64le\n# Build $name-$version\"-linux-s390x\" linux s390x\n\n# Others\n# Build $name-$version\"-solaris-amd64\" solaris amd64\nBuild $name-$version\"-freebsd-386\" freebsd 386\nBuild $name-$version\"-freebsd-amd64\" freebsd amd64\n# Build $name-$version\"-freebsd-arm\" freebsd arm\n# Build $name-$version\"-netbsd-386\" netbsd\t386\n# Build $name-$version\"-netbsd-amd64\" netbsd amd64\n# Build $name-$version\"-netbsd-arm\" netbsd\tarm\n# Build $name-$version\"-openbsd-386\" openbsd 386\n# Build $name-$version\"-openbsd-amd64\" openbsd\tamd64\n# Build $name-$version\"-openbsd-arm\" openbsd arm\n# Build $name-$version\"-plan9-386\" plan9 386\n# Build $name-$version\"-plan9-amd64\" plan9 amd64\n# Build $name-$version\"-plan9-arm\" plan9 arm\n# Build $name-$version\"-nacl-386\" nacl 386\n# Build $name-$version\"-nacl-amd64p32\" nacl amd64p32\n# Build $name-$version\"-nacl-arm\" nacl arm\n# Build $name-$version\"-dragonflybsd-amd64\" dragonfly amd64\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "entitlements.xml",
          "type": "blob",
          "size": 0.5078125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>application-identifier</key>\n        <string>com.qjfoidnh.baidupcsgo</string>\n        <key>get-task-allow</key>\n        <true/>\n        <key>platform-application</key>\n        <true/>\n        <key>keychain-access-groups</key>\n        <array>\n            <string>com.qjfoidnh.baidupcsgo</string>\n        </array>\n    </dict>\n</plist>"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.5205078125,
          "content": "module github.com/qjfoidnh/BaiduPCS-Go\n\ngo 1.23\n\nrequire (\n\tgithub.com/GeertJohan/go.incremental v1.0.0\n\tgithub.com/dgrijalva/jwt-go v3.2.0+incompatible\n\tgithub.com/fatih/color v1.18.0\n\tgithub.com/golang/protobuf v1.5.4\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/kardianos/osext v0.0.0-20190222173326-2bc1f35cddc0\n\tgithub.com/mattn/go-runewidth v0.0.9\n\tgithub.com/oleiade/lane v1.0.1\n\tgithub.com/olekukonko/tablewriter v0.0.4\n\tgithub.com/peterh/liner v1.2.2\n\tgithub.com/qjfoidnh/Baidu-Login v1.4.1\n\tgithub.com/qjfoidnh/baidu-tools v1.2.0 //dfa5778abeed\n\tgithub.com/tidwall/gjson v1.18.0\n\tgithub.com/urfave/cli v1.22.5\n\tgolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550\n\tgolang.org/x/sys v0.25.0\n)\n\nrequire (\n\tgithub.com/GeertJohan/go.rice v1.0.2 // indirect\n\tgithub.com/astaxie/beego v1.12.3 // indirect\n\tgithub.com/bitly/go-simplejson v0.5.0 // indirect\n\tgithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d // indirect\n\tgithub.com/daaku/go.zipexe v1.0.2 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.0.1 // indirect\n\tgithub.com/shurcooL/sanitized_anchor_name v1.0.0 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.0 // indirect\n\tgoogle.golang.org/protobuf v1.33.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 24.767578125,
          "content": "github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/GeertJohan/go.incremental v1.0.0 h1:7AH+pY1XUgQE4Y1HcXYaMqAI0m9yrFqo/jt0CW30vsg=\ngithub.com/GeertJohan/go.incremental v1.0.0/go.mod h1:6fAjUhbVuX1KcMD3c8TEgVUqmo4seqhv0i0kdATSkM0=\ngithub.com/GeertJohan/go.rice v0.0.0-20170420135705-c02ca9a983da/go.mod h1:DgrzXonpdQbfN3uYaGz1EG4Sbhyum/MMIn6Cphlh2bw=\ngithub.com/GeertJohan/go.rice v1.0.2 h1:PtRw+Tg3oa3HYwiDBZyvOJ8LdIyf6lAovJJtr7YOAYk=\ngithub.com/GeertJohan/go.rice v1.0.2/go.mod h1:af5vUNlDNkCjOZeSGFgIJxDje9qdjsO6hshx0gTmZt4=\ngithub.com/Knetic/govaluate v3.0.0+incompatible/go.mod h1:r7JcOSlj0wfOMncg0iLm8Leh48TZaKVeNIfJntJ2wa0=\ngithub.com/akavel/rsrc v0.8.0/go.mod h1:uLoCtb9J+EyAqh+26kdrTgmzRBFPGOolLWKpdxkKq+c=\ngithub.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alicebob/gopher-json v0.0.0-20180125190556-5a6b3ba71ee6/go.mod h1:SGnFV6hVsYE877CKEZ6tDNTjaSXYUk6QqoIK6PrAtcc=\ngithub.com/alicebob/miniredis v2.5.0+incompatible/go.mod h1:8HZjEj4yU0dwhYHky+DxYx+6BMjkBbe5ONFIF1MXffk=\ngithub.com/astaxie/beego v1.10.1/go.mod h1:0R4++1tUqERR0WYFWdfkcrsyoVBCG4DgpDGokT3yb+U=\ngithub.com/astaxie/beego v1.12.3 h1:SAQkdD2ePye+v8Gn1r4X6IKZM1wd28EyUOVQ3PDSOOQ=\ngithub.com/astaxie/beego v1.12.3/go.mod h1:p3qIm0Ryx7zeBHLljmd7omloyca1s4yu1a8kM1FkpIA=\ngithub.com/beego/goyaml2 v0.0.0-20130207012346-5545475820dd/go.mod h1:1b+Y/CofkYwXMUU0OhQqGvsY2Bvgr4j6jfT699wyZKQ=\ngithub.com/beego/x2j v0.0.0-20131220205130-a0352aadc542/go.mod h1:kSeGC/p1AbBiEp5kat81+DSQrZenVBZXklMLaELspWU=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bitly/go-simplejson v0.5.0 h1:6IH+V8/tVMab511d5bn4M7EwGXZf9Hj6i2xSwkNEM+Y=\ngithub.com/bitly/go-simplejson v0.5.0/go.mod h1:cXHtHw4XUPsvGaxgjIAn8PhEWG9NfngEKAMDJEczWVA=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869 h1:DDGfHa7BWjL4YnC6+E63dPcxHo2sUxDIu8g3QgEJdRY=\ngithub.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869/go.mod h1:Ekp36dRnpXw/yCqJaO+ZrUyxD+3VXMFFr56k5XYrpB4=\ngithub.com/bradfitz/gomemcache v0.0.0-20180710155616-bc664df96737/go.mod h1:PmM6Mmwb0LSuEubjR8N7PtNe1KxZLtOUHtbeikc5h60=\ngithub.com/casbin/casbin v1.7.0/go.mod h1:c67qKN6Oum3UF5Q1+BByfFxkwKvhwW57ITjqwtzR1KE=\ngithub.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cloudflare/golz4 v0.0.0-20150217214814-ef862a3cdc58/go.mod h1:EOBUe0h4xcZ5GoxqC5SDxFQ8gwyZPKQoEzownBlhI80=\ngithub.com/couchbase/go-couchbase v0.0.0-20200519150804-63f3cdb75e0d/go.mod h1:TWI8EKQMs5u5jLKW/tsb9VwauIrMIxQG1r5fMsswK5U=\ngithub.com/couchbase/gomemcached v0.0.0-20200526233749-ec430f949808/go.mod h1:srVSlQLB8iXBVXHgnqemxUXqN6FCvClgCMPCsjBDR7c=\ngithub.com/couchbase/goutils v0.0.0-20180530154633-e865a1461c8a/go.mod h1:BQwMFlJzDjFDG3DJUdU0KORxn88UlsOULuxLExMh3Hs=\ngithub.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d h1:U+s90UTSYgptZMwQh2aRr3LuazLJIa+Pg3Kc1ylSYVY=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/cupcake/rdb v0.0.0-20161107195141-43ba34106c76/go.mod h1:vYwsqCOLxGiisLwp9rITslkFNpZD5rz43tf41QFkTWY=\ngithub.com/daaku/go.zipexe v0.0.0-20150329023125-a5fe2436ffcb/go.mod h1:U0vRfAucUOohvdCxt5MWLF+TePIL0xbCkbKIiV8TQCE=\ngithub.com/daaku/go.zipexe v1.0.0/go.mod h1:z8IiR6TsVLEYKwXAoE/I+8ys/sDkgTzSL0CLnGVd57E=\ngithub.com/daaku/go.zipexe v1.0.2 h1:Zg55YLYTr7M9wjKn8SY/WcpuuEi+kR2u4E8RhvpyXmk=\ngithub.com/daaku/go.zipexe v1.0.2/go.mod h1:5xWogtqlYnfBXkSB1o9xysukNP9GTvaNkqzUZbt3Bw8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgrijalva/jwt-go v3.2.0+incompatible h1:7qlOGliEKZXTDg6OTjfoBKDXWrumCAMpl/TFQ4/5kLM=\ngithub.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=\ngithub.com/edsrzf/mmap-go v0.0.0-20170320065105-0bce6a688712/go.mod h1:YO35OhQPt3KJa3ryjFM5Bs14WD66h8eGKpfaBNrHW5M=\ngithub.com/elastic/go-elasticsearch/v6 v6.8.5/go.mod h1:UwaDJsD3rWLM5rKNFzv9hgox93HoX8utj1kxD9aFUcI=\ngithub.com/elazarl/go-bindata-assetfs v1.0.0/go.mod h1:v+YaWX3bdea5J/mo8dSETolEo7R71Vk1u8bnjau5yw4=\ngithub.com/fatih/color v0.0.0-20150510220652-1b35f289c47d/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=\ngithub.com/fatih/color v1.18.0 h1:S8gINlzdQ840/4pfAwic/ZE0djQEH3wM94VfqLTZcOM=\ngithub.com/fatih/color v1.18.0/go.mod h1:4FelSpRwEGDpQ12mAdzqdOukCy4u8WUtOY6lkT/6HfU=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/glendc/gopher-json v0.0.0-20170414221815-dc4743023d0c/go.mod h1:Gja1A+xZ9BoviGJNA2E9vFkPjjsl+CoJxSXiQM1UXtw=\ngithub.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=\ngithub.com/go-redis/redis v6.14.2+incompatible/go.mod h1:NAIEuMOZ/fxfXJIrKDQDz8wamY7mA7PouImQ2Jvg6kA=\ngithub.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/golang/snappy v0.0.0-20170215233205-553a64147049/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/golang/snappy v0.0.0-20180518054509-2e65f85255db/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/gomodule/redigo v2.0.0+incompatible/go.mod h1:B4C85qUVwatsJoIUNIfCRsp7qO0iAmpGFZ4EELWSbC4=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/iikira/Baidu-Login v1.2.2-0.20180427090606-ecf146973528/go.mod h1:oMWxZOoEMgQG+0rq8xhEIdxvXwkyG4aN3sZoOQ59R4Q=\ngithub.com/iikira/baidu-tools v0.0.0-20190609113215-4dd64618064d/go.mod h1:UHD1R9RGXz5nDsKm3KbdD3yxCJZ18nmR+1ZAc5GkrNw=\ngithub.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=\ngithub.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.10/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=\ngithub.com/kardianos/osext v0.0.0-20170510131534-ae77be60afb1/go.mod h1:1NbS8ALrpOvjt0rHPNLyCIeMtbizbir8U//inJ+zuB8=\ngithub.com/kardianos/osext v0.0.0-20190222173326-2bc1f35cddc0 h1:iQTw/8FWTuc7uiaSepXwyf3o52HaUYcV+Tu66S3F5GA=\ngithub.com/kardianos/osext v0.0.0-20190222173326-2bc1f35cddc0/go.mod h1:1NbS8ALrpOvjt0rHPNLyCIeMtbizbir8U//inJ+zuB8=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/ledisdb/ledisdb v0.0.0-20200510135210-d35789ec47e6/go.mod h1:n931TsDuKuq+uX4v1fulaMbA/7ZLLhjc85h7chZGBCQ=\ngithub.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.3/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mattn/go-runewidth v0.0.4/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mattn/go-runewidth v0.0.5-0.20181218000649-703b5e6b11ae/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.7/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.9 h1:Lm995f3rfxdpd6TSmuVCHVb/QhupuXlYr8sCI/QdE+0=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-sqlite3 v2.0.3+incompatible/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/nkovacs/streamquote v1.0.0/go.mod h1:BN+NaZ2CmdKqUuTUXUEm9j95B2TRbpOWpxbJYzzgUsc=\ngithub.com/oleiade/lane v0.0.0-20160817071224-3053869314bb/go.mod h1:ym0w0flrmBtGvApLDgFLa0sfGJkWxDQqnm0/0ok5w3Y=\ngithub.com/oleiade/lane v1.0.1 h1:hXofkn7GEOubzTwNpeL9MaNy8WxolCYb9cInAIeqShU=\ngithub.com/oleiade/lane v1.0.1/go.mod h1:IyTkraa4maLfjq/GmHR+Dxb4kCMtEGeb+qmhlrQ5Mk4=\ngithub.com/olekukonko/tablewriter v0.0.1/go.mod h1:vsDQFd/mU46D+Z4whnwzcISnGGzXWMclvtLoiIKAKIo=\ngithub.com/olekukonko/tablewriter v0.0.2-0.20190618033246-cc27d85e17ce/go.mod h1:rSAaSIOAGT9odnlyGlUfAJaoc5w2fSBUmeGDbRWPxyQ=\ngithub.com/olekukonko/tablewriter v0.0.4 h1:vHD/YYe1Wolo78koG299f7V/VAS08c6IpCLn+Ejf/w8=\ngithub.com/olekukonko/tablewriter v0.0.4/go.mod h1:zq6QwlOf5SlnkVbMSr5EoBv3636FWnp+qbPhuoO21uA=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.12.0/go.mod h1:oUhWkIvk5aDxtKvDDuw8gItl8pKl42LzjC9KZE0HfGg=\ngithub.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=\ngithub.com/pelletier/go-toml v1.0.1/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=\ngithub.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=\ngithub.com/peterh/liner v1.0.1-0.20171122030339-3681c2a91233/go.mod h1:xIteQHvHuaLYG9IFj6mSxM0fCKrs34IrEQUhOYuGPHc=\ngithub.com/peterh/liner v1.1.1-0.20190305032635-6f820f8f90ce/go.mod h1:CRroGNssyjTd/qIG2FyxByd2S8JEAZXBl4qUrZf8GS0=\ngithub.com/peterh/liner v1.2.2 h1:aJ4AOodmL+JxOZZEL2u9iJf8omNRpqHc/EbrK+3mAXw=\ngithub.com/peterh/liner v1.2.2/go.mod h1:xFwJyiKIXJZUKItq5dGHZSTBRAuG/CpeNpWLyiNRNwI=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=\ngithub.com/prometheus/client_golang v1.7.0/go.mod h1:PY5Wy2awLA44sXw4AOSfFBetzPP4j5+D6mVACh+pe2M=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.10.0/go.mod h1:Tlit/dnDKsSWFlCLTWaA1cyBgKHSMdTB80sz/V91rCo=\ngithub.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.1.3/go.mod h1:lV6e/gmhEcM9IjHGsFOCxxuZ+z1YqCvr4OA4YeYWdaU=\ngithub.com/qjfoidnh/Baidu-Login v1.4.1 h1:o9GzvdGx1Z90IbgrgfNTgeTJAaOXOD/GpppdNe4d6Cs=\ngithub.com/qjfoidnh/Baidu-Login v1.4.1/go.mod h1:oRFCmVYQka0KYwvbf2zS6UeMupgv0w1CSq4Jovhz6qg=\ngithub.com/qjfoidnh/BaiduPCS-Go v0.0.0-20201218134534-d55d9918bd1b/go.mod h1:00iH1dQEStMeT3t+oeVrIucWcu3fFEaFYyygNxfOEv4=\ngithub.com/qjfoidnh/baidu-tools v1.2.0 h1:VoXJCN16xzL0xh1BOI2l2p80X5HwKB0PE4SgtX8wn30=\ngithub.com/qjfoidnh/baidu-tools v1.2.0/go.mod h1:TzIKHinLPcQbWxAROpqoSvYxM/kDeswfXJaQ2E1p4zs=\ngithub.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=\ngithub.com/russross/blackfriday/v2 v2.0.1 h1:lPqVAte+HuHNfhJ/0LC98ESWRz8afy9tM/0RK8m9o+Q=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/shiena/ansicolor v0.0.0-20151119151921-a422bbe96644/go.mod h1:nkxAfR/5quYxwPZhyDxgasBMnRtBZd0FCEpawpjMUFg=\ngithub.com/shurcooL/httpfs v0.0.0-20190707220628-8d4bc4ba7749/go.mod h1:ZY1cvUeJuFPAdZ/B6v7RHavJWZn2YPVFQ1OSXhCGOkg=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0 h1:PdmoCO6wvbs+7yrJyMORt4/BmY5IYyJwS/kOiWx8mHo=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/shurcooL/vfsgen v0.0.0-20181202132449-6a9ea43bcacd/go.mod h1:TrYk7fJVaAttu97ZZKrO9UbRa8izdowaMIZcxYMbVaw=\ngithub.com/siddontang/go v0.0.0-20170517070808-cb568a3e5cc0/go.mod h1:3yhqj7WBBfRhbBlzyOC3gUxftwsU0u8gqevxwIHQpMw=\ngithub.com/siddontang/goredis v0.0.0-20150324035039-760763f78400/go.mod h1:DDcKzU3qCuvj/tPnimWSsZZzvk9qvkvrIL5naVBPh5s=\ngithub.com/siddontang/rdb v0.0.0-20150307021120-fc89ed2e418d/go.mod h1:AMEsy7v5z92TR1JKMkLLoaOQk++LVnOKL3ScbJ8GNGA=\ngithub.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/ssdb/gossdb v0.0.0-20180723034631-88f6b59b84ec/go.mod h1:QBvMkMya+gXctz3kmljlUCu/yB3GZ6oee+dUozsezQE=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0 h1:2E4SXV/wtOkTonXsotYi4li6zVWxYlZuYNCXe9XRJyk=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/syndtr/goleveldb v0.0.0-20160425020131-cfa635847112/go.mod h1:Z4AUp2Km+PwemOoO/VB5AOx9XSsIItzFjoJlOSiYmn0=\ngithub.com/syndtr/goleveldb v0.0.0-20181127023241-353a9fca669c/go.mod h1:Z4AUp2Km+PwemOoO/VB5AOx9XSsIItzFjoJlOSiYmn0=\ngithub.com/tidwall/gjson v1.6.0/go.mod h1:P256ACg0Mn+j1RXIDXoss50DeIABTYK1PULOJHhxOls=\ngithub.com/tidwall/gjson v1.18.0 h1:FIDeeyB800efLX89e5a8Y0BNH+LOngJyGrIWxG2FKQY=\ngithub.com/tidwall/gjson v1.18.0/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/match v1.0.1/go.mod h1:LujAq0jyVjBy028G1WhWfIzbpQfMO8bBZ6Tyb0+pL9E=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.0.0/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=\ngithub.com/tidwall/pretty v1.2.0 h1:RWIZEg2iJ8/g6fDDYzMpobmaoGh5OLl4AXtGUGPcqCs=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/ugorji/go v0.0.0-20171122102828-84cb69a8af83/go.mod h1:hnLbHMwcvSihnDhEfx2/BzKp2xb0Y+ErdfYcrs9tkJQ=\ngithub.com/urfave/cli v1.21.1-0.20190817182405-23c83030263f/go.mod h1:qXyCeJubPqsgeiLd3kvHOGHHSrQcNdjZ2ScXIcVZK/I=\ngithub.com/urfave/cli v1.22.5 h1:lNq9sAHXK2qfdI8W+GRItjCEkI+2oR4d+MEHy1CKXoU=\ngithub.com/urfave/cli v1.22.5/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=\ngithub.com/valyala/fasttemplate v1.0.1/go.mod h1:UQGH1tvbgY+Nz5t2n7tXsz52dQxojPUpymEIMZ47gx8=\ngithub.com/wendal/errors v0.0.0-20130201093226-f66c77a7882b/go.mod h1:Q12BUT7DqIlHRmgv3RskH+UCM/4eqVMgI0EMmlSpAXc=\ngithub.com/yuin/gopher-lua v0.0.0-20171031051903-609c9cd26973/go.mod h1:aEV29XrmTYFr3CiRxZeGHpkvbwq+prZduBqMaascyCU=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190820162420-60c769a6c586/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550 h1:ObdrDkeb4kJdCP557AjRjq69pTHfNouLtWZG7j9rPN8=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191025090151-53bf42e6b339/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200106162015-b016eb3dc98e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200615200032-f1bc736245b1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20211117180635-dee7805ff2e1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.25.0 h1:r+8e+loiHxRqhXVl6ML1nO3l1+oFoWbnlu2Ehimmi34=\ngolang.org/x/sys v0.25.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=\ngoogle.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/mgo.v2 v2.0.0-20190816093944-a6b53ec6cb22/go.mod h1:yeKp02qBN3iKW1OzL3MGk2IdtZzaj7SFntXj72NppTA=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 61.990234375,
          "content": "package main\n\nimport (\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\t\"unicode\"\n\n\t\"github.com/olekukonko/tablewriter\"\n\t\"github.com/peterh/liner\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/baidupcs\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/internal/pcscommand\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/internal/pcsconfig\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/internal/pcsfunctions/pcsdownload\"\n\t_ \"github.com/qjfoidnh/BaiduPCS-Go/internal/pcsinit\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/internal/pcsupdate\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/pcsliner\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/pcsliner/args\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/pcstable\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/pcsutil\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/pcsutil/checksum\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/pcsutil/converter\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/pcsutil/escaper\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/pcsutil/getip\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/pcsutil/pcstime\"\n\t\"github.com/qjfoidnh/BaiduPCS-Go/pcsverbose\"\n\t\"github.com/urfave/cli\"\n)\n\nconst (\n\t// NameShortDisplayNum 文件名缩略显示长度\n\tNameShortDisplayNum = 16\n\n\tcryptoDescription = `\n\t可用的方法 <method>:\n\t\taes-128-ctr, aes-192-ctr, aes-256-ctr,\n\t\taes-128-cfb, aes-192-cfb, aes-256-cfb,\n\t\taes-128-ofb, aes-192-ofb, aes-256-ofb.\n\n\t密钥 <key>:\n\t\taes-128 对应key长度为16, aes-192 对应key长度为24, aes-256 对应key长度为32,\n\t\t如果key长度不符合, 则自动修剪key, 舍弃超出长度的部分, 长度不足的部分用'\\0'填充.\n\n\tGZIP <disable-gzip>:\n\t\t在文件加密之前, 启用GZIP压缩文件; 文件解密之后启用GZIP解压缩文件, 默认启用,\n\t\t如果不启用, 则无法检测文件是否解密成功, 解密文件时会保留源文件, 避免解密失败造成文件数据丢失.`\n)\n\nvar (\n\t// Version 版本号\n\tVersion = \"v3.9.7-devel\"\n\n\thistoryFilePath = filepath.Join(pcsconfig.GetConfigDir(), \"pcs_command_history.txt\")\n\treloadFn        = func(c *cli.Context) error {\n\t\terr := pcsconfig.Config.Reload()\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"重载配置错误: %s\\n\", err)\n\t\t}\n\t\treturn nil\n\t}\n\tsaveFunc = func(c *cli.Context) error {\n\t\terr := pcsconfig.Config.Save()\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"保存配置错误: %s\\n\", err)\n\t\t}\n\t\treturn nil\n\t}\n\n\tisCli bool\n)\n\nfunc init() {\n\tpcsutil.ChWorkDir()\n\n\terr := pcsconfig.Config.Init()\n\tswitch err {\n\tcase nil:\n\tcase pcsconfig.ErrConfigFileNoPermission, pcsconfig.ErrConfigContentsParseError:\n\t\tfmt.Fprintf(os.Stderr, \"FATAL ERROR: config file error: %s\\n\", err)\n\t\tos.Exit(1)\n\tdefault:\n\t\tfmt.Printf(\"WARNING: config init error: %s\\n\", err)\n\t}\n}\n\nfunc main() {\n\tdefer pcsconfig.Config.Close()\n\n\tapp := cli.NewApp()\n\tapp.Name = \"BaiduPCS-Go\"\n\tapp.Version = Version\n\tapp.Author = \"qjfoidnh/BaiduPCS-Go: https://github.com/qjfoidnh/BaiduPCS-Go\"\n\tapp.Copyright = \"(c) 2016-2020 iikira.\"\n\tapp.Usage = \"百度网盘客户端 for \" + runtime.GOOS + \"/\" + runtime.GOARCH\n\tapp.Description = `BaiduPCS-Go 使用Go语言编写的百度网盘命令行客户端, 为操作百度网盘, 提供实用功能.\n\t具体功能, 参见 COMMANDS 列表\n\n\t特色:\n\t\t网盘内列出文件和目录, 支持通配符匹配路径;\n\t\t下载网盘内文件, 支持网盘内目录 (文件夹) 下载, 支持多个文件或目录下载, 支持断点续传和高并发高速下载.\n\n\t---------------------------------------------------\n\t前往 https://github.com/qjfoidnh/BaiduPCS-Go 以获取更多帮助信息!\n\t前往 https://github.com/qjfoidnh/BaiduPCS-Go/releases 以获取程序更新信息!\n\t---------------------------------------------------\n\n\t交流反馈:\n\t\t提交Issue: https://github.com/qjfoidnh/BaiduPCS-Go/issues\n\t\t邮箱: qjfoidnh@126.com`\n\n\tapp.Flags = []cli.Flag{\n\t\tcli.BoolFlag{\n\t\t\tName:        \"verbose\",\n\t\t\tUsage:       \"启用调试\",\n\t\t\tEnvVar:      pcsverbose.EnvVerbose,\n\t\t\tDestination: &pcsverbose.IsVerbose,\n\t\t},\n\t}\n\tapp.Action = func(c *cli.Context) {\n\t\tif c.NArg() != 0 {\n\t\t\tfmt.Printf(\"未找到命令: %s\\n运行命令 %s help 获取帮助\\n\", c.Args().Get(0), app.Name)\n\t\t\treturn\n\t\t}\n\n\t\tisCli = true\n\t\tpcsverbose.Verbosef(\"VERBOSE: 这是一条调试信息\\n\\n\")\n\n\t\tvar (\n\t\t\tline = pcsliner.NewLiner()\n\t\t\terr  error\n\t\t)\n\n\t\tline.History, err = pcsliner.NewLineHistory(historyFilePath)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"警告: 读取历史命令文件错误, %s\\n\", err)\n\t\t}\n\n\t\tline.ReadHistory()\n\t\tdefer func() {\n\t\t\tline.DoWriteHistory()\n\t\t\tline.Close()\n\t\t}()\n\n\t\t// tab 自动补全命令\n\t\tline.State.SetCompleter(func(line string) (s []string) {\n\t\t\tvar (\n\t\t\t\tlineArgs                   = args.Parse(line)\n\t\t\t\tnumArgs                    = len(lineArgs)\n\t\t\t\tacceptCompleteFileCommands = []string{\n\t\t\t\t\t\"cd\", \"cp\", \"download\", \"export\", \"fixmd5\", \"locate\", \"ls\", \"meta\", \"mkdir\", \"mv\", \"rapidupload\", \"rm\", \"setastoken\", \"share\", \"transfer\", \"tree\", \"upload\",\n\t\t\t\t}\n\t\t\t\tclosed = strings.LastIndex(line, \" \") == len(line)-1\n\t\t\t)\n\n\t\t\tfor _, cmd := range app.Commands {\n\t\t\t\tfor _, name := range cmd.Names() {\n\t\t\t\t\tif !strings.HasPrefix(name, line) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\ts = append(s, name+\" \")\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tswitch numArgs {\n\t\t\tcase 0:\n\t\t\t\treturn\n\t\t\tcase 1:\n\t\t\t\tif !closed {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthisCmd := app.Command(lineArgs[0])\n\t\t\tif thisCmd == nil {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif !pcsutil.ContainsString(acceptCompleteFileCommands, thisCmd.FullName()) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tvar (\n\t\t\t\tactiveUser  = pcsconfig.Config.ActiveUser()\n\t\t\t\tpcs         = pcsconfig.Config.ActiveUserBaiduPCS()\n\t\t\t\truneFunc    = unicode.IsSpace\n\t\t\t\tpcsRuneFunc = func(r rune) bool {\n\t\t\t\t\tswitch r {\n\t\t\t\t\tcase '\\'', '\"':\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t\treturn unicode.IsSpace(r)\n\t\t\t\t}\n\t\t\t\ttargetPath string\n\t\t\t)\n\n\t\t\tif !closed {\n\t\t\t\ttargetPath = lineArgs[numArgs-1]\n\t\t\t\tescaper.EscapeStringsByRuneFunc(lineArgs[:numArgs-1], runeFunc) // 转义\n\t\t\t} else {\n\t\t\t\tescaper.EscapeStringsByRuneFunc(lineArgs, runeFunc)\n\t\t\t}\n\n\t\t\tswitch {\n\t\t\tcase targetPath == \".\" || strings.HasSuffix(targetPath, \"/.\"):\n\t\t\t\ts = append(s, line+\"/\")\n\t\t\t\treturn\n\t\t\tcase targetPath == \"..\" || strings.HasSuffix(targetPath, \"/..\"):\n\t\t\t\ts = append(s, line+\"/\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tvar (\n\t\t\t\ttargetDir string\n\t\t\t\tisAbs     = path.IsAbs(targetPath)\n\t\t\t\tisDir     = strings.LastIndex(targetPath, \"/\") == len(targetPath)-1\n\t\t\t)\n\n\t\t\tif isAbs {\n\t\t\t\ttargetDir = path.Dir(targetPath)\n\t\t\t} else {\n\t\t\t\ttargetDir = path.Join(activeUser.Workdir, targetPath)\n\t\t\t\tif !isDir {\n\t\t\t\t\ttargetDir = path.Dir(targetDir)\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiles, err := pcs.CacheFilesDirectoriesList(targetDir, baidupcs.DefaultOrderOptions)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// fmt.Println(\"-\", targetDir, targetPath, \"-\")\n\n\t\t\tfor _, file := range files {\n\t\t\t\tif file == nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tvar (\n\t\t\t\t\tappendLine string\n\t\t\t\t)\n\n\t\t\t\t// 已经有的情况\n\t\t\t\tif !closed {\n\t\t\t\t\tif !strings.HasPrefix(file.Path, path.Clean(path.Join(targetDir, path.Base(targetPath)))) {\n\t\t\t\t\t\tif path.Base(targetDir) == path.Base(targetPath) {\n\t\t\t\t\t\t\tappendLine = strings.Join(append(lineArgs[:numArgs-1], escaper.EscapeByRuneFunc(path.Join(targetPath, file.Filename), pcsRuneFunc)), \" \")\n\t\t\t\t\t\t\tgoto handle\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// fmt.Println(file.Path, targetDir, targetPath)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\t// fmt.Println(path.Clean(path.Join(path.Dir(targetPath), file.Filename)), targetPath, file.Filename)\n\t\t\t\t\tappendLine = strings.Join(append(lineArgs[:numArgs-1], escaper.EscapeByRuneFunc(path.Clean(path.Join(path.Dir(targetPath), file.Filename)), pcsRuneFunc)), \" \")\n\t\t\t\t\tgoto handle\n\t\t\t\t}\n\t\t\t\t// 没有的情况\n\t\t\t\tappendLine = strings.Join(append(lineArgs, escaper.EscapeByRuneFunc(file.Filename, pcsRuneFunc)), \" \")\n\t\t\t\tgoto handle\n\n\t\t\thandle:\n\t\t\t\tif file.Isdir {\n\t\t\t\t\ts = append(s, appendLine+\"/\")\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\ts = append(s, appendLine+\" \")\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\treturn\n\t\t})\n\n\t\tfmt.Printf(\"提示: 方向键上下可切换历史命令.\\n\")\n\t\tfmt.Printf(\"提示: Ctrl + A / E 跳转命令 首 / 尾.\\n\")\n\t\tfmt.Printf(\"提示: 输入 help 获取帮助.\\n\")\n\n\t\tfor {\n\t\t\tvar (\n\t\t\t\tprompt     string\n\t\t\t\tactiveUser = pcsconfig.Config.ActiveUser()\n\t\t\t)\n\n\t\t\tif activeUser.Name != \"\" {\n\t\t\t\t// 格式: BaiduPCS-Go:<工作目录> <百度ID>$\n\t\t\t\t// 工作目录太长时, 会自动缩略\n\t\t\t\tprompt = app.Name + \":\" + converter.ShortDisplay(path.Base(activeUser.Workdir), NameShortDisplayNum) + \" \" + activeUser.Name + \"$ \"\n\t\t\t} else {\n\t\t\t\t// BaiduPCS-Go >\n\t\t\t\tprompt = app.Name + \" > \"\n\t\t\t}\n\n\t\t\tcommandLine, err := line.State.Prompt(prompt)\n\t\t\tswitch err {\n\t\t\tcase liner.ErrPromptAborted:\n\t\t\t\treturn\n\t\t\tcase nil:\n\t\t\t\t// continue\n\t\t\tdefault:\n\t\t\t\tfmt.Println(err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tline.State.AppendHistory(commandLine)\n\n\t\t\tcmdArgs := args.Parse(commandLine)\n\t\t\tif len(cmdArgs) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ts := []string{os.Args[0]}\n\t\t\ts = append(s, cmdArgs...)\n\n\t\t\t// 恢复原始终端状态\n\t\t\t// 防止运行命令时程序被结束, 终端出现异常\n\t\t\tline.Pause()\n\t\t\tc.App.Run(s)\n\t\t\tline.Resume()\n\t\t}\n\t}\n\n\tapp.Commands = []cli.Command{\n\t\t{\n\t\t\tName:     \"run\",\n\t\t\tUsage:    \"执行系统命令\",\n\t\t\tCategory: \"其他\",\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() == 0 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tcmd := exec.Command(c.Args().First(), c.Args().Tail()...)\n\t\t\t\tcmd.Stdout = os.Stdout\n\t\t\t\tcmd.Stdin = os.Stdin\n\t\t\t\tcmd.Stderr = os.Stderr\n\n\t\t\t\terr := cmd.Run()\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Println(err)\n\t\t\t\t}\n\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"env\",\n\t\t\tUsage: \"显示程序环境变量\",\n\t\t\tDescription: `\n\tBAIDUPCS_GO_CONFIG_DIR: 配置文件路径,\n\tBAIDUPCS_GO_VERBOSE: 是否启用调试.\n`,\n\t\t\tCategory: \"其他\",\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tenvStr := \"%s=\\\"%s\\\"\\n\"\n\t\t\t\tenvVar, ok := os.LookupEnv(pcsverbose.EnvVerbose)\n\t\t\t\tif ok {\n\t\t\t\t\tfmt.Printf(envStr, pcsverbose.EnvVerbose, envVar)\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Printf(envStr, pcsverbose.EnvVerbose, \"0\")\n\t\t\t\t}\n\n\t\t\t\tenvVar, ok = os.LookupEnv(pcsconfig.EnvConfigDir)\n\t\t\t\tif ok {\n\t\t\t\t\tfmt.Printf(envStr, pcsconfig.EnvConfigDir, envVar)\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Printf(envStr, pcsconfig.EnvConfigDir, pcsconfig.GetConfigDir())\n\t\t\t\t}\n\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:     \"update\",\n\t\t\tUsage:    \"检测程序更新\",\n\t\t\tCategory: \"其他\",\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.IsSet(\"y\") {\n\t\t\t\t\tif !c.Bool(\"y\") {\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpcsupdate.CheckUpdate(app.Version, c.Bool(\"y\"))\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"y\",\n\t\t\t\t\tUsage: \"确认更新\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"login\",\n\t\t\tUsage: \"登录百度账号\",\n\t\t\tDescription: `\n\t示例:\n\t\tBaiduPCS-Go login\n\t\tBaiduPCS-Go login -username=liuhua\n\t\tBaiduPCS-Go login -bduss=123456789 -stoken=atahsrweoog\n\t\tBaiduPCS-Go login -cookies=\"BDUSS=xxxxx; BAIDUID=yyyyyy; STOKEN=zzzzz; ....\"\n\n\t常规登录:\n\t\t按提示一步一步来即可.\n\n\t百度BDUSS获取方法:\n\t\t百度搜索: 获取百度BDUSS\n\t\t\n\t百度Cookies获取办法:\n\t以Chrome为例，登录到自己的百度网盘主页，F12，然后切换到Network标签，刷新页面，Network标签下会刷出一大堆东西\n\t找到第一条，点击，看到右侧出现的详情，往下翻到Cookies: xxxx; xxxxx; xxx...这样的字段，从冒号后（没有空格）一直复制到字段末尾`,\n\t\t\tCategory: \"百度帐号\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAfter:    saveFunc,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tvar bduss, ptoken, stoken, cookies string\n\t\t\t\tif c.IsSet(\"cookies\") {\n\t\t\t\t\tcookies = c.String(\"cookies\")\n\t\t\t\t} else if c.IsSet(\"bduss\") {\n\t\t\t\t\tbduss = c.String(\"bduss\")\n\t\t\t\t\tptoken = c.String(\"ptoken\")\n\t\t\t\t\tstoken = c.String(\"stoken\")\n\t\t\t\t} else if c.NArg() == 0 {\n\t\t\t\t\tvar err error\n\t\t\t\t\tbduss, ptoken, stoken, cookies, err = pcscommand.RunLogin(c.String(\"username\"), c.String(\"password\"))\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tfmt.Println(err)\n\t\t\t\t\t\treturn err\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tbaidu, err := pcsconfig.Config.SetupUserByBDUSS(bduss, ptoken, stoken, cookies)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Println(err)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tfmt.Println(\"百度帐号登录成功:\", baidu.Name)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"username\",\n\t\t\t\t\tUsage: \"登录百度帐号的用户名(手机号/邮箱/用户名)\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"password\",\n\t\t\t\t\tUsage: \"登录百度帐号的用户名的密码\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"bduss\",\n\t\t\t\t\tUsage: \"使用百度 BDUSS 来登录百度帐号\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"ptoken\",\n\t\t\t\t\tUsage: \"百度 PTOKEN, 配合 -bduss 参数使用 (可选)\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"stoken\",\n\t\t\t\t\tUsage: \"百度 STOKEN, 配合 -bduss 参数使用 (可选, 欲使用转存功能则必选)\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"cookies\",\n\t\t\t\t\tUsage: \"使用百度 Cookies 来登录百度账号\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"su\",\n\t\t\tUsage: \"切换百度帐号\",\n\t\t\tDescription: `\n\t切换已登录的百度帐号:\n\t如果运行该条命令没有提供参数, 程序将会列出所有的百度帐号, 供选择切换.\n\n\t示例:\n\tBaiduPCS-Go su\n\tBaiduPCS-Go su <uid or name>\n`,\n\t\t\tCategory: \"百度帐号\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAfter:    saveFunc,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() >= 2 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tnumLogins := pcsconfig.Config.NumLogins()\n\n\t\t\t\tif numLogins == 0 {\n\t\t\t\t\tfmt.Printf(\"未设置任何百度帐号, 不能切换\\n\")\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tvar (\n\t\t\t\t\tinputData = c.Args().Get(0)\n\t\t\t\t\tuid       uint64\n\t\t\t\t)\n\n\t\t\t\tif c.NArg() == 1 {\n\t\t\t\t\t// 直接切换\n\t\t\t\t\tuid, _ = strconv.ParseUint(inputData, 10, 64)\n\t\t\t\t} else if c.NArg() == 0 {\n\t\t\t\t\t// 输出所有帐号供选择切换\n\t\t\t\t\tcli.HandleAction(app.Command(\"loglist\").Action, c)\n\n\t\t\t\t\t// 提示输入 index\n\t\t\t\t\tvar index string\n\t\t\t\t\tfmt.Printf(\"输入要切换帐号的 # 值 > \")\n\t\t\t\t\t_, err := fmt.Scanln(&index)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t}\n\n\t\t\t\t\tif n, err := strconv.Atoi(index); err == nil && n >= 0 && n < numLogins {\n\t\t\t\t\t\tuid = pcsconfig.Config.BaiduUserList[n].UID\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfmt.Printf(\"切换用户失败, 请检查 # 值是否正确\\n\")\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t}\n\n\t\t\t\tswitchedUser, err := pcsconfig.Config.SwitchUser(&pcsconfig.BaiduBase{\n\t\t\t\t\tName: inputData,\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\tswitchedUser, err = pcsconfig.Config.SwitchUser(&pcsconfig.BaiduBase{\n\t\t\t\t\t\tUID: uid,\n\t\t\t\t\t})\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tfmt.Printf(\"切换用户失败, %s\\n\", err)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfmt.Printf(\"切换用户: %s\\n\", switchedUser.Name)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:        \"logout\",\n\t\t\tUsage:       \"退出百度帐号\",\n\t\t\tDescription: \"退出当前登录的百度帐号\",\n\t\t\tCategory:    \"百度帐号\",\n\t\t\tBefore:      reloadFn,\n\t\t\tAfter:       saveFunc,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif pcsconfig.Config.NumLogins() == 0 {\n\t\t\t\t\tfmt.Println(\"未设置任何百度帐号, 不能退出\")\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tvar (\n\t\t\t\t\tconfirm    string\n\t\t\t\t\tactiveUser = pcsconfig.Config.ActiveUser()\n\t\t\t\t)\n\n\t\t\t\tif !c.Bool(\"y\") {\n\t\t\t\t\tfmt.Printf(\"确认退出百度帐号: %s ? (y/n) > \", activeUser.Name)\n\t\t\t\t\t_, err := fmt.Scanln(&confirm)\n\t\t\t\t\tif err != nil || (confirm != \"y\" && confirm != \"Y\") {\n\t\t\t\t\t\treturn err\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdeletedUser, err := pcsconfig.Config.DeleteUser(&pcsconfig.BaiduBase{\n\t\t\t\t\tUID: activeUser.UID,\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Printf(\"退出用户 %s, 失败, 错误: %s\\n\", activeUser.Name, err)\n\t\t\t\t}\n\n\t\t\t\tfmt.Printf(\"退出用户成功, %s\\n\", deletedUser.Name)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"y\",\n\t\t\t\t\tUsage: \"确认退出帐号\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:        \"loglist\",\n\t\t\tUsage:       \"列出帐号列表\",\n\t\t\tDescription: \"列出所有已登录的百度帐号\",\n\t\t\tCategory:    \"百度帐号\",\n\t\t\tBefore:      reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tfmt.Println(pcsconfig.Config.BaiduUserList.String())\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"setastoken\",\n\t\t\tUsage: \"设定当前账号的accessToken\",\n\t\t\tDescription: `\n\t设定当前登录帐号的accessToken:\n\t若不使用秒传链接转存, 可不设定; accessToken申请及获取教程:\n\thttps://github.com/qjfoidnh/BaiduPCS-Go/wiki/accessToken%E8%8E%B7%E5%8F%96%E6%95%99%E7%A8%8B\n\t注意accessToken的有效期为一个月, 过期后请按教程指导更新token\n\n\t示例:\n\tBaiduPCS-Go setastoken 156.182v9052tgf1006c89891bsfb2401974.YmKOAwBD9yGaG2s4p5NNkX4CXeIbJxx4hAxotfS.PyuHEs\n`,\n\t\t\tCategory: \"百度帐号\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAfter:    saveFunc,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tactiveUser := pcsconfig.Config.ActiveUser()\n\t\t\t\tif activeUser.UID == 0 {\n\t\t\t\t\tfmt.Println(\"请先登录\")\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t\tif c.NArg() >= 2 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t} else if c.NArg() == 0 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t\tactiveUser.AccessToken = c.Args().Get(0)\n\t\t\t\tpcsconfig.Config.ActiveUserBaiduPCS().SetaccessToken(c.Args().Get(0))\n\t\t\t\tfmt.Printf(\"当前用户名: %s 成功设置accessToken: %s\\n\", activeUser.Name, activeUser.AccessToken)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:        \"who\",\n\t\t\tUsage:       \"获取当前帐号\",\n\t\t\tDescription: \"获取当前帐号的信息\",\n\t\t\tCategory:    \"百度帐号\",\n\t\t\tBefore:      reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tactiveUser := pcsconfig.Config.ActiveUser()\n\t\t\t\tfmt.Printf(\"当前帐号 uid: %d, 用户名: %s, 性别: %s, 年龄: %.1f\\n\", activeUser.UID, activeUser.Name, activeUser.Sex, activeUser.Age)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:        \"quota\",\n\t\t\tUsage:       \"获取网盘配额\",\n\t\t\tDescription: \"获取网盘的总储存空间, 和已使用的储存空间\",\n\t\t\tCategory:    \"百度网盘\",\n\t\t\tBefore:      reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tpcscommand.RunGetQuota()\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:     \"cd\",\n\t\t\tCategory: \"百度网盘\",\n\t\t\tUsage:    \"切换工作目录\",\n\t\t\tDescription: `\n\tBaiduPCS-Go cd <目录, 绝对路径或相对路径>\n\n\t示例:\n\n\t切换 /我的资源 工作目录:\n\tBaiduPCS-Go cd /我的资源\n\n\t切换上级目录:\n\tBaiduPCS-Go cd ..\n\n\t切换根目录:\n\tBaiduPCS-Go cd /\n\n\t切换 /我的资源 工作目录, 并自动列出 /我的资源 下的文件和目录\n\tBaiduPCS-Go cd -l 我的资源\n\n\t使用通配符:\n\tBaiduPCS-Go cd /我的*\n`,\n\t\t\tBefore: reloadFn,\n\t\t\tAfter:  saveFunc,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() == 0 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunChangeDirectory(c.Args().Get(0), c.Bool(\"l\"))\n\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"l\",\n\t\t\t\t\tUsage: \"切换工作目录后自动列出工作目录下的文件和目录\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"ls\",\n\t\t\tAliases:   []string{\"l\", \"ll\"},\n\t\t\tUsage:     \"列出目录\",\n\t\t\tUsageText: app.Name + \" ls <目录>\",\n\t\t\tDescription: `\n\t列出当前工作目录内的文件和目录, 或指定目录内的文件和目录\n\n\t示例:\n\n\t列出 我的资源 内的文件和目录\n\tBaiduPCS-Go ls 我的资源\n\n\t绝对路径\n\tBaiduPCS-Go ls /我的资源\n\n\t降序排序\n\tBaiduPCS-Go ls -desc 我的资源\n\n\t按文件大小降序排序\n\tBaiduPCS-Go ls -size -desc 我的资源\n\n\t使用通配符\n\tBaiduPCS-Go ls /我的*\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\torderOptions := &baidupcs.OrderOptions{}\n\t\t\t\tswitch {\n\t\t\t\tcase c.IsSet(\"asc\"):\n\t\t\t\t\torderOptions.Order = baidupcs.OrderAsc\n\t\t\t\tcase c.IsSet(\"desc\"):\n\t\t\t\t\torderOptions.Order = baidupcs.OrderDesc\n\t\t\t\tdefault:\n\t\t\t\t\torderOptions.Order = baidupcs.OrderAsc\n\t\t\t\t}\n\n\t\t\t\tswitch {\n\t\t\t\tcase c.IsSet(\"time\"):\n\t\t\t\t\torderOptions.By = baidupcs.OrderByTime\n\t\t\t\tcase c.IsSet(\"name\"):\n\t\t\t\t\torderOptions.By = baidupcs.OrderByName\n\t\t\t\tcase c.IsSet(\"size\"):\n\t\t\t\t\torderOptions.By = baidupcs.OrderBySize\n\t\t\t\tdefault:\n\t\t\t\t\torderOptions.By = baidupcs.OrderByName\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunLs(c.Args().Get(0), &pcscommand.LsOptions{\n\t\t\t\t\tTotal: c.Bool(\"l\") || c.Parent().Args().Get(0) == \"ll\",\n\t\t\t\t}, orderOptions)\n\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"l\",\n\t\t\t\t\tUsage: \"详细显示\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"asc\",\n\t\t\t\t\tUsage: \"升序排序\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"desc\",\n\t\t\t\t\tUsage: \"降序排序\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"time\",\n\t\t\t\t\tUsage: \"根据时间排序\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tUsage: \"根据文件名排序\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"size\",\n\t\t\t\t\tUsage: \"根据大小排序\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"search\",\n\t\t\tAliases:   []string{\"s\"},\n\t\t\tUsage:     \"搜索文件\",\n\t\t\tUsageText: app.Name + \" search [-path=<需要检索的目录>] [-r] 关键字\",\n\t\t\tDescription: `\n\t按文件名搜索文件（不支持查找目录）。\n\t默认在当前工作目录搜索.\n\n\t示例:\n\n\t搜索根目录的文件\n\tBaiduPCS-Go search -path=/ 关键字\n\n\t搜索当前工作目录的文件\n\tBaiduPCS-Go search 关键字\n\n\t递归搜索当前工作目录的文件\n\tBaiduPCS-Go search -r 关键字\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() < 1 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunSearch(c.String(\"path\"), c.Args().Get(0), &pcscommand.SearchOptions{\n\t\t\t\t\tTotal:   c.Bool(\"l\"),\n\t\t\t\t\tRecurse: c.Bool(\"r\"),\n\t\t\t\t})\n\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"l\",\n\t\t\t\t\tUsage: \"详细显示\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"r\",\n\t\t\t\t\tUsage: \"递归搜索\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"path\",\n\t\t\t\t\tUsage: \"需要检索的目录\",\n\t\t\t\t\tValue: \".\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"tree\",\n\t\t\tAliases:   []string{\"t\"},\n\t\t\tUsage:     \"列出目录的树形图\",\n\t\t\tUsageText: app.Name + \" tree <目录>\",\n\t\t\tDescription: `\n\t列出目录树形图。\n\t默认从当前工作目录开始列出.\n\n\t示例:\n\n\t从根目录开始列出\n\tBaiduPCS-Go tree /\n\n\t只列出两层深度\n\tBaiduPCS-Go tree --depth 2\n\n\t同时显示文件名和fsid\n\tBaiduPCS-Go tree --fsid\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tpcscommand.RunTree(c.Args().Get(0), 0, &pcscommand.TreeOptions{\n\t\t\t\t\tDepth:    c.Int(\"depth\"),\n\t\t\t\t\tShowFsid: c.Bool(\"fsid\"),\n\t\t\t\t})\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.IntFlag{\n\t\t\t\t\tName:  \"depth\",\n\t\t\t\t\tUsage: \"显示深度\",\n\t\t\t\t\tValue: -1,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"fsid\",\n\t\t\t\t\tUsage: \"带fsid显示\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"pwd\",\n\t\t\tUsage:     \"输出工作目录\",\n\t\t\tUsageText: app.Name + \" pwd\",\n\t\t\tCategory:  \"百度网盘\",\n\t\t\tBefore:    reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tfmt.Println(pcsconfig.Config.ActiveUser().Workdir)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:        \"meta\",\n\t\t\tUsage:       \"获取文件/目录的元信息\",\n\t\t\tUsageText:   app.Name + \" meta <文件/目录1> <文件/目录2> <文件/目录3> ...\",\n\t\t\tDescription: \"默认获取工作目录元信息\",\n\t\t\tCategory:    \"百度网盘\",\n\t\t\tBefore:      reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tvar (\n\t\t\t\t\tca = c.Args()\n\t\t\t\t\tas []string\n\t\t\t\t)\n\t\t\t\tif len(ca) == 0 {\n\t\t\t\t\tas = []string{\"\"}\n\t\t\t\t} else {\n\t\t\t\t\tas = ca\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunGetMeta(as...)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"rm\",\n\t\t\tUsage:     \"删除文件/目录\",\n\t\t\tUsageText: app.Name + \" rm <文件/目录的路径1> <文件/目录2> <文件/目录3> ...\",\n\t\t\tDescription: `\n\t注意: 删除多个文件和目录时, 请确保每一个文件和目录都存在, 否则删除操作会失败.\n\t被删除的文件或目录可在网盘文件回收站找回.\n\n\t示例:\n\n\t删除 /我的资源/1.mp4\n\tBaiduPCS-Go rm /我的资源/1.mp4\n\n\t删除 /我的资源/1.mp4 和 /我的资源/2.mp4\n\tBaiduPCS-Go rm /我的资源/1.mp4 /我的资源/2.mp4\n\n\t删除 /我的资源 内的所有文件和目录, 但不删除该目录\n\tBaiduPCS-Go rm /我的资源/*\n\n\t删除 /我的资源 整个目录 !!\n\tBaiduPCS-Go rm /我的资源\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() == 0 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunRemove(c.Args()...)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"mkdir\",\n\t\t\tUsage:     \"创建目录\",\n\t\t\tUsageText: app.Name + \" mkdir <目录>\",\n\t\t\tCategory:  \"百度网盘\",\n\t\t\tBefore:    reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() == 0 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunMkdir(c.Args().Get(0))\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"cp\",\n\t\t\tUsage: \"拷贝文件/目录\",\n\t\t\tUsageText: `BaiduPCS-Go cp <文件/目录> <目标文件/目录>\n\tBaiduPCS-Go cp <文件/目录1> <文件/目录2> <文件/目录3> ... <目标目录>`,\n\t\t\tDescription: `\n\t注意: 拷贝多个文件和目录时, 请确保每一个文件和目录都存在, 否则拷贝操作会失败.\n\n\t示例:\n\n\t将 /我的资源/1.mp4 复制到 根目录 /\n\tBaiduPCS-Go cp /我的资源/1.mp4 /\n\n\t将 /我的资源/1.mp4 和 /我的资源/2.mp4 复制到 根目录 /\n\tBaiduPCS-Go cp /我的资源/1.mp4 /我的资源/2.mp4 /\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() <= 1 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunCopy(c.Args()...)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"mv\",\n\t\t\tUsage: \"移动/重命名文件/目录\",\n\t\t\tUsageText: `移动:\n\tBaiduPCS-Go mv <文件/目录1> <文件/目录2> <文件/目录3> ... <目标目录>\n\n\t重命名:\n\tBaiduPCS-Go mv <文件/目录> <重命名的文件/目录>`,\n\t\t\tDescription: `\n\t注意: 移动多个文件和目录时, 请确保每一个文件和目录都存在, 否则移动操作会失败.\n\n\t示例:\n\n\t将 /我的资源/1.mp4 移动到 根目录 /\n\tBaiduPCS-Go mv /我的资源/1.mp4 /\n\n\t将 /我的资源/1.mp4 重命名为 /我的资源/3.mp4\n\tBaiduPCS-Go mv /我的资源/1.mp4 /我的资源/3.mp4\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() <= 1 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunMove(c.Args()...)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"download\",\n\t\t\tAliases:   []string{\"d\"},\n\t\t\tUsage:     \"下载文件/目录\",\n\t\t\tUsageText: app.Name + \" download <文件/目录路径1> <文件/目录2> <文件/目录3> ...\",\n\t\t\tDescription: `\n\t下载的文件默认保存到, 程序所在目录的 download/ 目录.\n\t通过 BaiduPCS-Go config set -savedir <savedir>, 自定义保存的目录.\n\t支持多个文件或目录下载.\n\t支持下载完成后自动校验文件, 但并不是所有的文件都支持校验!\n\t自动跳过下载重名的文件!\n\n\t下载模式说明:\n\t\tpcs: 通过百度网盘的 PCS API 下载, locate模式提示user is not authorized可尝试此模式\n\t\tstream: 通过百度网盘的 PCS API, 以流式文件的方式下载, 效果同 pcs\n\t\tlocate: 默认的下载模式。从百度网盘 Android 客户端, 获取下载链接的方式来下载\n\n\t示例:\n\n\t设置保存目录, 保存到 D:\\Downloads\n\t注意区别反斜杠 \"\\\" 和 斜杠 \"/\" !!!\n\tBaiduPCS-Go config set -savedir D:\\\\Downloads\n\t或者\n\tBaiduPCS-Go config set -savedir D:/Downloads\n\n\t下载 /我的资源/1.mp4\n\tBaiduPCS-Go d /我的资源/1.mp4\n\n\t下载 /我的资源 整个目录!!\n\tBaiduPCS-Go d /我的资源\n\n\t下载网盘内的全部文件!!\n\tBaiduPCS-Go d /\n\tBaiduPCS-Go d *\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() == 0 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\t// 处理saveTo\n\t\t\t\tvar (\n\t\t\t\t\tsaveTo string\n\t\t\t\t)\n\t\t\t\tif c.Bool(\"save\") {\n\t\t\t\t\tsaveTo = \".\"\n\t\t\t\t} else if c.String(\"saveto\") != \"\" {\n\t\t\t\t\tsaveTo = filepath.Clean(c.String(\"saveto\"))\n\t\t\t\t}\n\n\t\t\t\t// 处理解析downloadMode\n\t\t\t\tvar (\n\t\t\t\t\tdownloadMode pcsdownload.DownloadMode\n\t\t\t\t)\n\t\t\t\tswitch c.String(\"mode\") {\n\t\t\t\tcase \"pcs\":\n\t\t\t\t\tdownloadMode = pcsdownload.DownloadModePCS\n\t\t\t\tcase \"stream\":\n\t\t\t\t\tdownloadMode = pcsdownload.DownloadModeStreaming\n\t\t\t\tcase \"locate\":\n\t\t\t\t\tdownloadMode = pcsdownload.DownloadModeLocate\n\t\t\t\tdefault:\n\t\t\t\t\tfmt.Println(\"下载方式解析失败\")\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tdo := &pcscommand.DownloadOptions{\n\t\t\t\t\tIsTest:               c.Bool(\"test\"),\n\t\t\t\t\tIsPrintStatus:        c.Bool(\"status\"),\n\t\t\t\t\tIsExecutedPermission: c.Bool(\"x\"),\n\t\t\t\t\tIsOverwrite:          c.Bool(\"ow\"),\n\t\t\t\t\tDownloadMode:         downloadMode,\n\t\t\t\t\tSaveTo:               saveTo,\n\t\t\t\t\tParallel:             c.Int(\"p\"),\n\t\t\t\t\tLoad:                 c.Int(\"l\"),\n\t\t\t\t\tMaxRetry:             c.Int(\"retry\"),\n\t\t\t\t\tNoCheck:              c.Bool(\"nocheck\"),\n\t\t\t\t\tLinkPrefer:           c.Int(\"dindex\"),\n\t\t\t\t\tModifyMTime:          c.Bool(\"mtime\"),\n\t\t\t\t\tFullPath:             c.Bool(\"fullpath\"),\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunDownload(c.Args(), do)\n\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"test\",\n\t\t\t\t\tUsage: \"测试下载, 此操作不会保存文件到本地\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"ow\",\n\t\t\t\t\tUsage: \"overwrite, 覆盖已存在的文件\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"status\",\n\t\t\t\t\tUsage: \"输出所有线程的工作状态\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"save\",\n\t\t\t\t\tUsage: \"将下载的文件直接保存到当前工作目录\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"saveto\",\n\t\t\t\t\tUsage: \"将下载的文件直接保存到指定的目录\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"x\",\n\t\t\t\t\tUsage: \"为文件加上执行权限, (windows系统无效)\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"mode\",\n\t\t\t\t\tUsage: \"下载模式, 可选值: pcs, stream, locate, 默认为 locate, 相关说明见上面的帮助\",\n\t\t\t\t\tValue: \"locate\",\n\t\t\t\t},\n\t\t\t\tcli.IntFlag{\n\t\t\t\t\tName:  \"p\",\n\t\t\t\t\tUsage: \"指定下载线程数\",\n\t\t\t\t},\n\t\t\t\tcli.IntFlag{\n\t\t\t\t\tName:  \"l\",\n\t\t\t\t\tUsage: \"指定同时进行下载文件的数量\",\n\t\t\t\t},\n\t\t\t\tcli.IntFlag{\n\t\t\t\t\tName:  \"retry\",\n\t\t\t\t\tUsage: \"下载失败最大重试次数\",\n\t\t\t\t\tValue: pcsdownload.DefaultDownloadMaxRetry,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"nocheck\",\n\t\t\t\t\tUsage: \"下载文件完成后不校验文件\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"mtime\",\n\t\t\t\t\tUsage: \"将本地文件的修改时间设置为服务器上的修改时间\",\n\t\t\t\t},\n\t\t\t\tcli.IntFlag{\n\t\t\t\t\tName:  \"dindex\",\n\t\t\t\t\tUsage: \"使用备选下载链接中的第几个，默认第一个\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"fullpath\",\n\t\t\t\t\tUsage: \"以网盘完整路径保存到本地\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"upload\",\n\t\t\tAliases:   []string{\"u\"},\n\t\t\tUsage:     \"上传文件/目录\",\n\t\t\tUsageText: app.Name + \" upload <本地文件/目录的路径1> <文件/目录2> <文件/目录3> ... <目标目录>\",\n\t\t\tDescription: `\n\t上传默认采用分片上传的方式, 上传的文件将会保存到, <目标目录>.\n\t当上传的文件名和网盘的目录名称相同时, 不会覆盖目录, 防止丢失数据.\n\n\t注意: \n\n\t分片上传之后, 服务器可能会记录到错误的文件md5, 可使用 fixmd5 命令尝试修复文件的MD5值, 修复md5不一定能成功, 但文件的完整性是没问题的.\n\tfixmd5 命令使用方法:\n\tBaiduPCS-Go fixmd5 -h\n\n\t禁用分片上传可以保证服务器记录到正确的md5.\n\t禁用分片上传时只能使用单线程上传, 指定的单个文件上传最大线程数将会无效.\n\n\t示例:\n\n\t1. 将本地的 C:\\Users\\Administrator\\Desktop\\1.mp4 上传到网盘 /视频 目录\n\t注意区别反斜杠 \"\\\" 和 斜杠 \"/\" !!!\n\tBaiduPCS-Go upload C:/Users/Administrator/Desktop/1.mp4 /视频\n\n\t2. 将本地的 C:\\Users\\Administrator\\Desktop\\1.mp4 和 C:\\Users\\Administrator\\Desktop\\2.mp4 上传到网盘 /视频 目录\n\tBaiduPCS-Go upload C:/Users/Administrator/Desktop/1.mp4 C:/Users/Administrator/Desktop/2.mp4 /视频\n\n\t3. 将本地的 C:\\Users\\Administrator\\Desktop 整个目录上传到网盘 /视频 目录\n\tBaiduPCS-Go upload C:/Users/Administrator/Desktop /视频\n\n\t4. 使用相对路径\n\tBaiduPCS-Go upload 1.mp4 /视频\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() < 2 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tsubArgs := c.Args()\n\t\t\t\tpcscommand.RunUpload(subArgs[:c.NArg()-1], subArgs[c.NArg()-1], &pcscommand.UploadOptions{\n\t\t\t\t\tParallel:      c.Int(\"p\"),\n\t\t\t\t\tMaxRetry:      c.Int(\"retry\"),\n\t\t\t\t\tLoad:          c.Int(\"l\"),\n\t\t\t\t\tNoRapidUpload: c.Bool(\"norapid\"),\n\t\t\t\t\tNoSplitFile:   c.Bool(\"nosplit\"),\n\t\t\t\t\tPolicy:        c.String(\"policy\"),\n\t\t\t\t})\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.IntFlag{\n\t\t\t\t\tName:  \"p\",\n\t\t\t\t\tUsage: \"指定单个文件上传的最大线程数\",\n\t\t\t\t},\n\t\t\t\tcli.IntFlag{\n\t\t\t\t\tName:  \"retry\",\n\t\t\t\t\tUsage: \"上传失败最大重试次数\",\n\t\t\t\t\tValue: pcscommand.DefaultUploadMaxRetry,\n\t\t\t\t},\n\t\t\t\tcli.IntFlag{\n\t\t\t\t\tName:  \"l\",\n\t\t\t\t\tUsage: \"指定同时上传的最大文件数\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"norapid\",\n\t\t\t\t\tUsage: \"不检测秒传\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"nosplit\",\n\t\t\t\t\tUsage: \"禁用分片上传\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"policy\",\n\t\t\t\t\tUsage: \"对同名文件的处理策略\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"locate\",\n\t\t\tAliases:   []string{\"lt\"},\n\t\t\tUsage:     \"获取下载直链\",\n\t\t\tUsageText: app.Name + \" locate <文件1> <文件2> ...\",\n\t\t\tDescription: fmt.Sprintf(`\n\t获取下载直链\n\n\t若该功能无法正常使用, 提示\"user is not authorized, hitcode:xxx\", 尝试更换 User-Agent 为 %s:\n\tBaiduPCS-Go config set -user_agent \"%s\"\n`, baidupcs.NetdiskUA, baidupcs.NetdiskUA),\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() < 1 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\topt := &pcscommand.LocateDownloadOption{\n\t\t\t\t\tFromPan: c.Bool(\"pan\"),\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunLocateDownload(c.Args(), opt)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"pan\",\n\t\t\t\t\tUsage: \"从百度网盘首页获取下载链接\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"rapidupload\",\n\t\t\tAliases:   []string{\"ru\"},\n\t\t\tUsage:     \"手动秒传文件\",\n\t\t\tUsageText: app.Name + \" rapidupload -length=<文件的大小> -md5=<文件的md5值> -slicemd5=<文件前256KB切片的md5值(可选)> -crc32=<文件的crc32值(可选)> <保存的网盘路径, 需包含文件名>\",\n\t\t\tDescription: `\n\t使用此功能秒传文件, 前提是知道文件的大小, md5, 前256KB切片的 md5 (可选), crc32 (可选), 且百度网盘中存在一模一样的文件.\n\t上传的文件将会保存到网盘的目标目录.\n\t遇到同名文件将会自动覆盖!\n\n\t可能无法秒传 20GB 以上的文件!!\n\n\t示例:\n\n\t1. 如果秒传成功, 则保存到网盘路径 /test\n\tBaiduPCS-Go rapidupload -length=56276137 -md5=fbe082d80e90f90f0fb1f94adbbcfa7f -slicemd5=38c6a75b0ec4499271d4ea38a667ab61 -crc32=314332359 /test\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() <= 0 || !c.IsSet(\"md5\") || !c.IsSet(\"length\") || !c.IsSet(\"slicemd5\") {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t\tpcscommand.RunRapidUpload(c.Args().Get(0), c.String(\"md5\"), c.String(\"slicemd5\"), c.Int64(\"length\"))\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"md5\",\n\t\t\t\t\tUsage: \"文件的 md5 值\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"slicemd5\",\n\t\t\t\t\tUsage: \"文件前 256KB 切片的 md5 值 (可选)\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"crc32\",\n\t\t\t\t\tUsage: \"文件的 crc32 值 (可选)\",\n\t\t\t\t},\n\t\t\t\tcli.Int64Flag{\n\t\t\t\t\tName:  \"length\",\n\t\t\t\t\tUsage: \"文件的大小\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"createsuperfile\",\n\t\t\tAliases:   []string{\"csf\"},\n\t\t\tUsage:     \"手动分片上传—合并分片文件\",\n\t\t\tUsageText: app.Name + \" createsuperfile -path=<保存的网盘路径, 需包含文件名> block1 block2 ... \",\n\t\t\tDescription: `\n\tblock1, block2 ... 为文件分片的md5值\n\t上传的文件将会保存到网盘的目标目录.\n\t遇到同名文件默认覆盖, 可以--policy参数指定, 支持newcopy, skip, overwrite, fail四种模式\n\n\t示例:\n\n\tBaiduPCS-Go createsuperfile -path=1.mp4 ec87a838931d4d5d2e94a04644788a55 ec87a838931d4d5d2e94a04644788a55\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() < 1 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunCreateSuperFile(c.String(\"policy\"), c.String(\"path\"), c.Args()...)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"path\",\n\t\t\t\t\tUsage: \"保存的网盘路径\",\n\t\t\t\t\tValue: \"superfile\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"policy\",\n\t\t\t\t\tUsage: \"同名文件处理策略\",\n\t\t\t\t\tValue: \"overwrite\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"fixmd5\",\n\t\t\tUsage:     \"修复文件MD5\",\n\t\t\tUsageText: app.Name + \" fixmd5 <文件1> <文件2> <文件3> ...\",\n\t\t\tDescription: `\n\t尝试修复文件的MD5值, 以便于校验文件的完整性和导出文件.\n\n\t使用分片上传文件, 当文件分片数大于1时, 百度网盘服务端最终计算所得的md5值和本地的不一致, 这可能是百度网盘的bug.\n\t不过把上传的文件下载到本地后，对比md5值是匹配的, 也就是文件在传输中没有发生损坏.\n\n\t对于MD5值可能有误的文件, 程序会在获取文件的元信息时, 给出MD5值 \"可能不正确\" 的提示, 表示此文件可以尝试进行MD5值修复.\n\t修复文件MD5不一定能成功, 原因可能是服务器未刷新, 可过几天后再尝试.\n\t修复文件MD5的原理为秒传文件, 即修复文件MD5成功后, 文件的创建日期, 修改日期, fs_id, 版本历史等信息将会被覆盖, 修复的MD5值将覆盖原先的MD5值, 但不影响文件的完整性.\n\n\t注意: 无法修复 20GB 以上文件的 md5!!\n\n\t示例:\n\n\t1. 修复 /我的资源/1.mp4 的 MD5 值\n\tBaiduPCS-Go fixmd5 /我的资源/1.mp4\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() <= 0 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunFixMD5(c.Args()...)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"sumfile\",\n\t\t\tAliases:   []string{\"sf\"},\n\t\t\tUsage:     \"获取本地文件的秒传信息(目前秒传功能已失效)\",\n\t\t\tUsageText: app.Name + \" sumfile <本地文件的路径1> <本地文件的路径2> ...\",\n\t\t\tDescription: `\n\t获取本地文件的大小, md5, 前256KB切片的md5, crc32, 曾经可用于秒传文件.\n\n\t示例:\n\n\t获取 C:\\Users\\Administrator\\Desktop\\1.mp4 的秒传信息\n\tBaiduPCS-Go sumfile C:/Users/Administrator/Desktop/1.mp4\n`,\n\t\t\tCategory: \"其他\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() <= 0 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tfor k, filePath := range c.Args() {\n\t\t\t\t\tlp, err := checksum.GetFileSum(filePath, checksum.CHECKSUM_MD5|checksum.CHECKSUM_SLICE_MD5|checksum.CHECKSUM_CRC32)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tfmt.Printf(\"[%d] %s\\n\", k+1, err)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tfmt.Printf(\"[%d] - [%s]:\\n\", k+1, filePath)\n\n\t\t\t\t\tstrLength, strMd5, strSliceMd5, strCrc32 := strconv.FormatInt(lp.Length, 10), hex.EncodeToString(lp.MD5), hex.EncodeToString(lp.SliceMD5), strconv.FormatUint(uint64(lp.CRC32), 10)\n\t\t\t\t\tfileName := filepath.Base(filePath)\n\t\t\t\t\tregFileName := strings.Replace(fileName, \" \", \"_\", -1)\n\t\t\t\t\tregFileName = strings.Replace(regFileName, \"#\", \"_\", -1)\n\t\t\t\t\ttb := pcstable.NewTable(os.Stdout)\n\t\t\t\t\ttb.SetColumnAlignment([]int{tablewriter.ALIGN_LEFT, tablewriter.ALIGN_LEFT})\n\t\t\t\t\ttb.AppendBulk([][]string{\n\t\t\t\t\t\t[]string{\"文件大小\", strLength},\n\t\t\t\t\t\t[]string{\"md5\", strMd5},\n\t\t\t\t\t\t[]string{\"前256KB切片的md5\", strSliceMd5},\n\t\t\t\t\t\t[]string{\"crc32\", strCrc32},\n\t\t\t\t\t\t[]string{\"秒传命令\", app.Name + \" rapidupload -length=\" + strLength + \" -md5=\" + strMd5 + \" -slicemd5=\" + strSliceMd5 + \" -crc32=\" + strCrc32 + \" \" + fileName},\n\t\t\t\t\t\t[]string{\"通用秒传链接\", strMd5 + \"#\" + strSliceMd5 + \"#\" + strLength + \"#\" + regFileName},\n\t\t\t\t\t})\n\t\t\t\t\ttb.Render()\n\t\t\t\t\tfmt.Printf(\"\\n\")\n\t\t\t\t}\n\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"transfer\",\n\t\t\tUsage:     \"转存文件/目录\",\n\t\t\tUsageText: app.Name + \" transfer <分享链接> <提取码>(如果有)\",\n\t\t\tCategory:  \"百度网盘\",\n\t\t\tBefore:    reloadFn,\n\t\t\tDescription: `\n\t\t\t转存文件/目录\n\t如果没有提取码或为整合式链接，则第二个位置留空；只能转存到当前网盘目录下，\n\t分享链接支持常规百度云链接, 支持长短秒传链接\n\t\n\t实例：\n\tBaiduPCS-Go transfer pan.baidu.com/s/1VYzSl7465sdrQXe8GT5RdQ 704e\n\tBaiduPCS-Go transfer https://pan.baidu.com/s/1VYzSl7465sdrQXe8GT5RdQ 704e\n\tBaiduPCS-Go transfer https://pan.baidu.com/s/1VYzSl7465sdrQXe8GT5RdQ?pwd=704e\n\n\t`,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() < 1 || c.NArg() > 2 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t\topt := &baidupcs.TransferOption{\n\t\t\t\t\tDownload: c.Bool(\"download\"),\n\t\t\t\t\tCollect:  c.Bool(\"collect\"),\n\t\t\t\t\tRname:    c.Bool(\"rname\"),\n\t\t\t\t}\n\t\t\t\tpcscommand.RunShareTransfer(c.Args(), opt)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"download\",\n\t\t\t\t\tUsage: \"转存后直接下载到本地默认目录\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"collect\",\n\t\t\t\t\tUsage: \"多文件整合到一个文件夹中转存\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"rname\",\n\t\t\t\t\tUsage: \"秒传随机替换4位文件名提高成功率\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"share\",\n\t\t\tUsage:     \"分享文件/目录\",\n\t\t\tUsageText: app.Name + \" share\",\n\t\t\tCategory:  \"百度网盘\",\n\t\t\tBefore:    reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tSubcommands: []cli.Command{\n\t\t\t\t{\n\t\t\t\t\tName:        \"set\",\n\t\t\t\t\tAliases:     []string{\"s\"},\n\t\t\t\t\tUsage:       \"设置分享文件/目录\",\n\t\t\t\t\tUsageText:   app.Name + \" share set <文件/目录1> <文件/目录2> ...\",\n\t\t\t\t\tDescription: `支持任意有效天数, 支持自定义提取码.`,\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tif c.NArg() < 1 {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\t\t\t\t\t\topt := &baidupcs.ShareOption{\n\t\t\t\t\t\t\tPassword:   c.String(\"p\"),\n\t\t\t\t\t\t\tPeriod:     c.Int(\"period\"),\n\t\t\t\t\t\t\tIsCombined: c.Bool(\"f\"),\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpcscommand.RunShareSet(c.Args(), opt)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"p\",\n\t\t\t\t\t\t\tUsage: \"提取码\",\n\t\t\t\t\t\t\tValue: \"\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.IntFlag{\n\t\t\t\t\t\t\tName:  \"period\",\n\t\t\t\t\t\t\tUsage: \"有效天数, 0为永久\",\n\t\t\t\t\t\t\tValue: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.BoolFlag{\n\t\t\t\t\t\t\tName:  \"f\",\n\t\t\t\t\t\t\tUsage: \"输出带密码的完整链接格式\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:      \"list\",\n\t\t\t\t\tAliases:   []string{\"l\"},\n\t\t\t\t\tUsage:     \"列出已分享文件/目录\",\n\t\t\t\t\tUsageText: app.Name + \" share list\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tpcscommand.RunShareList(c.Int(\"page\"))\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.IntFlag{\n\t\t\t\t\t\t\tName:  \"page\",\n\t\t\t\t\t\t\tUsage: \"分享列表的页数\",\n\t\t\t\t\t\t\tValue: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:        \"cancel\",\n\t\t\t\t\tAliases:     []string{\"c\"},\n\t\t\t\t\tUsage:       \"取消分享文件/目录\",\n\t\t\t\t\tUsageText:   app.Name + \" share cancel <shareid_1> <shareid_2> ...\",\n\t\t\t\t\tDescription: `目前只支持通过分享id (shareid) 来取消分享.`,\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tif c.NArg() < 1 {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpcscommand.RunShareCancel(converter.SliceStringToInt64(c.Args()))\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"export\",\n\t\t\tAliases:   []string{\"ep\"},\n\t\t\tUsage:     \"导出文件/目录\",\n\t\t\tUsageText: app.Name + \" export <文件/目录1> <文件/目录2> ...\",\n\t\t\tDescription: `\n\t导出网盘内的文件或目录, 原理为秒传文件, 此操作会生成导出文件或目录的命令.\n\n\t注意!!! :\n\t由于秒传已经失效, 导出信息已无法用做公开分享\n\t无法导出 20GB 以上的文件!!\n\t无法导出文件的版本历史等数据!!\n\t并不是所有的文件都能导出成功, 程序会列出无法导出的文件列表.\n\n\t示例:\n\n\t导出当前工作目录:\n\tBaiduPCS-Go export\n\n\t导出所有文件和目录, 并设置新的根目录为 /root \n\tBaiduPCS-Go export -root=/root /\n\n\t导出 /我的资源\n\tBaiduPCS-Go export /我的资源\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tpcspaths := c.Args()\n\t\t\t\tif len(pcspaths) == 0 {\n\t\t\t\t\tpcspaths = []string{\".\"}\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunExport(pcspaths, &pcscommand.ExportOptions{\n\t\t\t\t\tRootPath:   c.String(\"root\"),\n\t\t\t\t\tSavePath:   c.String(\"out\"),\n\t\t\t\t\tMaxRetry:   c.Int(\"retry\"),\n\t\t\t\t\tRecursive:  c.Bool(\"r\"),\n\t\t\t\t\tLinkFormat: c.Bool(\"link\"),\n\t\t\t\t\tStdOut:     c.Bool(\"stdout\"),\n\t\t\t\t})\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"root\",\n\t\t\t\t\tUsage: \"设置要导出文件或目录的根路径, 可以是相对路径\",\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"out\",\n\t\t\t\t\tUsage: \"导出文件信息的保存路径\",\n\t\t\t\t},\n\t\t\t\tcli.IntFlag{\n\t\t\t\t\tName:  \"retry\",\n\t\t\t\t\tUsage: \"导出失败的重试次数\",\n\t\t\t\t\tValue: 3,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"r\",\n\t\t\t\t\tUsage: \"递归导出\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"link\",\n\t\t\t\t\tUsage: \"以通用秒传链接格式导出(将丢失路径信息)\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"stdout\",\n\t\t\t\t\tUsage: \"导出信息不存文件, 直接打印至标准输出\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:    \"offlinedl\",\n\t\t\tAliases: []string{\"clouddl\", \"od\"},\n\t\t\tUsage:   \"离线下载\",\n\t\t\tDescription: `支持http/https/ftp/电驴/磁力链协议\n\t离线下载同时进行的任务数量有限, 超出限制的部分将无法添加.\n\n\t示例:\n\n\t1. 将百度和腾讯主页, 离线下载到根目录 /\n\tBaiduPCS-Go offlinedl add -path=/ http://baidu.com http://qq.com\n\n\t2. 添加磁力链接任务\n\tBaiduPCS-Go offlinedl add magnet:?xt=urn:btih:xxx\n\n\t3. 查询任务ID为 12345 的离线下载任务状态\n\tBaiduPCS-Go offlinedl query 12345\n\n\t4. 取消任务ID为 12345 的离线下载任务\n\tBaiduPCS-Go offlinedl cancel 12345`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tSubcommands: []cli.Command{\n\t\t\t\t{\n\t\t\t\t\tName:      \"add\",\n\t\t\t\t\tAliases:   []string{\"a\"},\n\t\t\t\t\tUsage:     \"添加离线下载任务\",\n\t\t\t\t\tUsageText: app.Name + \" offlinedl add -path=<离线下载文件保存的路径> 资源地址1 地址2 ...\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tif c.NArg() < 1 {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpcscommand.RunCloudDlAddTask(c.Args(), c.String(\"path\"))\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"path\",\n\t\t\t\t\t\t\tUsage: \"离线下载文件保存的路径, 默认为工作目录\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:      \"query\",\n\t\t\t\t\tAliases:   []string{\"q\"},\n\t\t\t\t\tUsage:     \"精确查询离线下载任务\",\n\t\t\t\t\tUsageText: app.Name + \" offlinedl query 任务ID1 任务ID2 ...\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tif c.NArg() < 1 {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttaskIDs := converter.SliceStringToInt64(c.Args())\n\n\t\t\t\t\t\tif len(taskIDs) == 0 {\n\t\t\t\t\t\t\tfmt.Printf(\"未找到合法的任务ID, task_id\\n\")\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpcscommand.RunCloudDlQueryTask(taskIDs)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:      \"list\",\n\t\t\t\t\tAliases:   []string{\"ls\", \"l\"},\n\t\t\t\t\tUsage:     \"查询离线下载任务列表\",\n\t\t\t\t\tUsageText: app.Name + \" offlinedl list\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tpcscommand.RunCloudDlListTask()\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:      \"cancel\",\n\t\t\t\t\tAliases:   []string{\"c\"},\n\t\t\t\t\tUsage:     \"取消离线下载任务\",\n\t\t\t\t\tUsageText: app.Name + \" offlinedl cancel 任务ID1 任务ID2 ...\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tif c.NArg() < 1 {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttaskIDs := converter.SliceStringToInt64(c.Args())\n\n\t\t\t\t\t\tif len(taskIDs) == 0 {\n\t\t\t\t\t\t\tfmt.Printf(\"未找到合法的任务ID, task_id\\n\")\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpcscommand.RunCloudDlCancelTask(taskIDs)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:      \"delete\",\n\t\t\t\t\tAliases:   []string{\"del\", \"d\"},\n\t\t\t\t\tUsage:     \"删除离线下载任务\",\n\t\t\t\t\tUsageText: app.Name + \" offlinedl delete 任务ID1 任务ID2 ...\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tisClear := c.Bool(\"all\")\n\t\t\t\t\t\tif c.NArg() < 1 && !isClear {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 清空离线下载任务记录\n\t\t\t\t\t\tif isClear {\n\t\t\t\t\t\t\tpcscommand.RunCloudDlClearTask()\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 删除特定的离线下载任务记录\n\t\t\t\t\t\ttaskIDs := converter.SliceStringToInt64(c.Args())\n\t\t\t\t\t\tif len(taskIDs) == 0 {\n\t\t\t\t\t\t\tfmt.Printf(\"未找到合法的任务ID, task_id\\n\")\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpcscommand.RunCloudDlDeleteTask(taskIDs)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.BoolFlag{\n\t\t\t\t\t\t\tName:  \"all\",\n\t\t\t\t\t\t\tUsage: \"清空离线下载任务记录, 程序不会进行二次确认, 谨慎操作!!!\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"recycle\",\n\t\t\tUsage: \"回收站\",\n\t\t\tDescription: `\n\t回收站操作.\n\n\t示例:\n\n\t1. 从回收站还原两个文件, 其中的两个文件的 fs_id 分别为 1013792297798440 和 643596340463870\n\tBaiduPCS-Go recycle restore 1013792297798440 643596340463870\n\n\t2. 从回收站删除两个文件, 其中的两个文件的 fs_id 分别为 1013792297798440 和 643596340463870\n\tBaiduPCS-Go recycle delete 1013792297798440 643596340463870\n\n\t3. 清空回收站, 程序不会进行二次确认, 谨慎操作!!!\n\tBaiduPCS-Go recycle delete -all\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NumFlags() <= 0 || c.NArg() <= 0 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tSubcommands: []cli.Command{\n\t\t\t\t{\n\t\t\t\t\tName:      \"list\",\n\t\t\t\t\tAliases:   []string{\"ls\", \"l\"},\n\t\t\t\t\tUsage:     baidupcs.OperationRecycleList,\n\t\t\t\t\tUsageText: app.Name + \" recycle list\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tpcscommand.RunRecycleList(c.Int(\"page\"))\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.IntFlag{\n\t\t\t\t\t\t\tName:  \"page\",\n\t\t\t\t\t\t\tUsage: \"回收站文件列表页数\",\n\t\t\t\t\t\t\tValue: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:        \"restore\",\n\t\t\t\t\tAliases:     []string{\"r\"},\n\t\t\t\t\tUsage:       baidupcs.OperationRecycleRestore,\n\t\t\t\t\tUsageText:   app.Name + \" recycle restore <fs_id 1> <fs_id 2> <fs_id 3> ...\",\n\t\t\t\t\tDescription: `根据文件/目录的 fs_id, 还原回收站指定的文件或目录`,\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tif c.NArg() <= 0 {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpcscommand.RunRecycleRestore(c.Args()...)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:        \"delete\",\n\t\t\t\t\tAliases:     []string{\"d\"},\n\t\t\t\t\tUsage:       baidupcs.OperationRecycleDelete + \"/\" + baidupcs.OperationRecycleClear,\n\t\t\t\t\tUsageText:   app.Name + \" recycle delete [-all] <fs_id 1> <fs_id 2> <fs_id 3> ...\",\n\t\t\t\t\tDescription: `根据文件/目录的 fs_id 或 -all 参数, 删除回收站指定的文件或目录或清空回收站`,\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tif c.Bool(\"all\") {\n\t\t\t\t\t\t\t// 清空回收站\n\t\t\t\t\t\t\tpcscommand.RunRecycleClear()\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif c.NArg() <= 0 {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpcscommand.RunRecycleDelete(c.Args()...)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.BoolFlag{\n\t\t\t\t\t\t\tName:  \"all\",\n\t\t\t\t\t\t\tUsage: \"清空回收站, 程序不会进行二次确认, 谨慎操作!!!\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:        \"config\",\n\t\t\tUsage:       \"显示和修改程序配置项\",\n\t\t\tDescription: \"显示和修改程序配置项\",\n\t\t\tCategory:    \"配置\",\n\t\t\tBefore:      reloadFn,\n\t\t\tAfter:       saveFunc,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tfmt.Printf(\"----\\n运行 %s config set 可进行设置配置\\n\\n当前配置:\\n\", app.Name)\n\t\t\t\tpcsconfig.Config.PrintTable()\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tSubcommands: []cli.Command{\n\t\t\t\t{\n\t\t\t\t\tName:      \"set\",\n\t\t\t\t\tUsage:     \"修改程序配置项\",\n\t\t\t\t\tUsageText: app.Name + \" config set [arguments...]\",\n\t\t\t\t\tDescription: `\n\t注意:\n\t\t可通过设置环境变量 BAIDUPCS_GO_CONFIG_DIR, 指定配置文件存放的目录.\n\n\t\t谨慎修改 appid, user_agent, pcs_ua, pan_ua 的值, 否则访问网盘服务器时, 可能会出现错误\n\t\tcache_size 的值支持可选设置单位了, 单位不区分大小写, b 和 B 均表示字节的意思, 如 64KB, 1MB, 32kb, 65536b, 65536\n\t\tmax_download_rate, max_upload_rate 的值支持可选设置单位了, 单位为每秒的传输速率, 后缀'/s' 可省略, 如 2MB/s, 2MB, 2m, 2mb 均为一个意思\n\n\t例子:\n\t\tBaiduPCS-Go config set -appid=266719\n\t\tBaiduPCS-Go config set -enable_https=false\n\t\tBaiduPCS-Go config set -user_agent=\"netdisk;2.2.51.6;netdisk;10.0.63;PC;android-android\"\n\t\tBaiduPCS-Go config set -cache_size 64KB\n\t\tBaiduPCS-Go config set -cache_size 16384 -max_parallel 200 -savedir D:/download`,\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tif c.NumFlags() <= 0 || c.NArg() > 0 {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif c.IsSet(\"appid\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetAppID(c.Int(\"appid\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"enable_https\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetEnableHTTPS(c.Bool(\"enable_https\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"ignore_illegal\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetIgnoreIllegal(c.Bool(\"ignore_illegal\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"force_login_username\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetForceLogin(c.String(\"force_login_username\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"no_check\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetNoCheck(c.Bool(\"no_check\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"upload_policy\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetUploadPolicy(c.String(\"upload_policy\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"user_agent\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetUserAgent(c.String(\"user_agent\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"pcs_ua\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetPCSUA(c.String(\"pcs_ua\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"pcs_addr\") {\n\t\t\t\t\t\t\tmatch := pcsconfig.Config.SETPCSAddr(c.String(\"pcs_addr\"))\n\t\t\t\t\t\t\tif !match {\n\t\t\t\t\t\t\t\tfmt.Println(\"设置 pcs_addr 错误: pcs服务器地址不合法\")\n\t\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"pan_ua\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetPanUA(c.String(\"pan_ua\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"cache_size\") {\n\t\t\t\t\t\t\terr := pcsconfig.Config.SetCacheSizeByStr(c.String(\"cache_size\"))\n\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\tfmt.Printf(\"设置 cache_size 错误: %s\\n\", err)\n\t\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"max_parallel\") {\n\t\t\t\t\t\t\tpcsconfig.Config.MaxParallel = c.Int(\"max_parallel\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"max_upload_parallel\") {\n\t\t\t\t\t\t\tpcsconfig.Config.MaxUploadParallel = c.Int(\"max_upload_parallel\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"max_download_load\") {\n\t\t\t\t\t\t\tpcsconfig.Config.MaxDownloadLoad = c.Int(\"max_download_load\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"max_upload_load\") {\n\t\t\t\t\t\t\tpcsconfig.Config.MaxUploadLoad = c.Int(\"max_upload_load\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"max_download_rate\") {\n\t\t\t\t\t\t\terr := pcsconfig.Config.SetMaxDownloadRateByStr(c.String(\"max_download_rate\"))\n\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\tfmt.Printf(\"设置 max_download_rate 错误: %s\\n\", err)\n\t\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"max_upload_rate\") {\n\t\t\t\t\t\t\terr := pcsconfig.Config.SetMaxUploadRateByStr(c.String(\"max_upload_rate\"))\n\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\tfmt.Printf(\"设置 max_upload_rate 错误: %s\\n\", err)\n\t\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"savedir\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SaveDir = c.String(\"savedir\")\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"proxy\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetProxy(c.String(\"proxy\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif c.IsSet(\"local_addrs\") {\n\t\t\t\t\t\t\tpcsconfig.Config.SetLocalAddrs(c.String(\"local_addrs\"))\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\terr := pcsconfig.Config.Save()\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tfmt.Println(err)\n\t\t\t\t\t\t\treturn err\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpcsconfig.Config.PrintTable()\n\t\t\t\t\t\tfmt.Printf(\"\\n保存配置成功!\\n\\n\")\n\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.IntFlag{\n\t\t\t\t\t\t\tName:  \"appid\",\n\t\t\t\t\t\t\tUsage: \"百度 PCS 应用ID\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"cache_size\",\n\t\t\t\t\t\t\tUsage: \"下载缓存\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.IntFlag{\n\t\t\t\t\t\t\tName:  \"max_parallel\",\n\t\t\t\t\t\t\tUsage: \"下载网络全部连接的最大并发量\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.IntFlag{\n\t\t\t\t\t\t\tName:  \"max_upload_parallel\",\n\t\t\t\t\t\t\tUsage: \"上传网络单个连接的最大并发量\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.IntFlag{\n\t\t\t\t\t\t\tName:  \"max_download_load\",\n\t\t\t\t\t\t\tUsage: \"同时进行下载文件的最大数量\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.IntFlag{\n\t\t\t\t\t\t\tName:  \"max_upload_load\",\n\t\t\t\t\t\t\tUsage: \"同时进行上传文件的最大数量\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"max_download_rate\",\n\t\t\t\t\t\t\tUsage: \"限制最大下载速度, 0代表不限制\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"max_upload_rate\",\n\t\t\t\t\t\t\tUsage: \"限制最大上传速度, 0代表不限制\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"savedir\",\n\t\t\t\t\t\t\tUsage: \"下载文件的储存目录\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.BoolFlag{\n\t\t\t\t\t\t\tName:  \"enable_https\",\n\t\t\t\t\t\t\tUsage: \"启用 https\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.BoolFlag{\n\t\t\t\t\t\t\tName:  \"ignore_illegal\",\n\t\t\t\t\t\t\tUsage: \"忽略上传时文件名中的非法字符\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"force_login_username\",\n\t\t\t\t\t\t\tUsage: \"强制登录指定用户名, 只适用于tieba接口失效的情况\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.BoolFlag{\n\t\t\t\t\t\t\tName:  \"no_check\",\n\t\t\t\t\t\t\tUsage: \"关闭下载文件md5校验\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"upload_policy\",\n\t\t\t\t\t\t\tUsage: \"设置上传遇到同名文件时的策略\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"user_agent\",\n\t\t\t\t\t\t\tUsage: \"浏览器标识\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"pcs_ua\",\n\t\t\t\t\t\t\tUsage: \"PCS 浏览器标识\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"pcs_addr\",\n\t\t\t\t\t\t\tUsage: \"PCS 服务器地址\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"pan_ua\",\n\t\t\t\t\t\t\tUsage: \"Pan 浏览器标识\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"proxy\",\n\t\t\t\t\t\t\tUsage: \"设置代理, 支持 http/socks5 代理\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"local_addrs\",\n\t\t\t\t\t\t\tUsage: \"设置本地网卡地址, 多个地址用逗号隔开\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:        \"reset\",\n\t\t\t\t\tUsage:       \"恢复默认配置项\",\n\t\t\t\t\tUsageText:   app.Name + \" config reset\",\n\t\t\t\t\tDescription: \"\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tpcsconfig.Config.InitDefaultConfig()\n\t\t\t\t\t\terr := pcsconfig.Config.Save()\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tfmt.Println(err)\n\t\t\t\t\t\t\treturn err\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpcsconfig.Config.PrintTable()\n\t\t\t\t\t\tfmt.Println(\"恢复默认配置成功\")\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"match\",\n\t\t\tUsage:     \"测试通配符\",\n\t\t\tUsageText: app.Name + \" match <通配符表达式>\",\n\t\t\tDescription: `\n\t测试通配符匹配路径, 操作成功则输出所有匹配到的路径.\n\n\t示例:\n\n\t1. 匹配 /我的资源 目录下所有mp4格式的文件\n\tBaiduPCS-Go match /我的资源/*.mp4\n`,\n\t\t\tCategory: \"百度网盘\",\n\t\t\tBefore:   reloadFn,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.NArg() != 1 {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\n\t\t\t\tpcscommand.RunTestShellPattern(c.Args()[0])\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"tool\",\n\t\t\tUsage: \"工具箱\",\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tSubcommands: []cli.Command{\n\t\t\t\t{\n\t\t\t\t\tName:  \"showtime\",\n\t\t\t\t\tUsage: \"显示当前时间(北京时间)\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tfmt.Printf(pcstime.BeijingTimeOption(\"printLog\"))\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:  \"getip\",\n\t\t\t\t\tUsage: \"获取IP地址\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tfmt.Printf(\"内网IP地址: \\n\")\n\t\t\t\t\t\tfor _, address := range pcsutil.ListAddresses() {\n\t\t\t\t\t\t\tfmt.Printf(\"%s\\n\", address)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfmt.Printf(\"\\n\")\n\n\t\t\t\t\t\tipAddr, err := getip.IPInfoFromTechainBaiduByClient(pcsconfig.Config.HTTPClient())\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tfmt.Printf(\"获取公网IP错误: %s\\n\", err)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfmt.Printf(\"公网IP地址: %s\\n\", ipAddr)\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:        \"enc\",\n\t\t\t\t\tUsage:       \"加密文件\",\n\t\t\t\t\tUsageText:   app.Name + \" enc -method=<method> -key=<key> [files...]\",\n\t\t\t\t\tDescription: cryptoDescription,\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tif c.NArg() <= 0 {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor _, filePath := range c.Args() {\n\t\t\t\t\t\t\tencryptedFilePath, err := pcsutil.EncryptFile(c.String(\"method\"), []byte(c.String(\"key\")), filePath, !c.Bool(\"disable-gzip\"))\n\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\tfmt.Printf(\"%s\\n\", err)\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfmt.Printf(\"加密成功, %s -> %s\\n\", filePath, encryptedFilePath)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"method\",\n\t\t\t\t\t\t\tUsage: \"加密方法\",\n\t\t\t\t\t\t\tValue: \"aes-128-ctr\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"key\",\n\t\t\t\t\t\t\tUsage: \"加密密钥\",\n\t\t\t\t\t\t\tValue: app.Name,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.BoolFlag{\n\t\t\t\t\t\t\tName:  \"disable-gzip\",\n\t\t\t\t\t\t\tUsage: \"不启用GZIP\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:        \"dec\",\n\t\t\t\t\tUsage:       \"解密文件\",\n\t\t\t\t\tUsageText:   app.Name + \" dec -method=<method> -key=<key> [files...]\",\n\t\t\t\t\tDescription: cryptoDescription,\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\tif c.NArg() <= 0 {\n\t\t\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor _, filePath := range c.Args() {\n\t\t\t\t\t\t\tdecryptedFilePath, err := pcsutil.DecryptFile(c.String(\"method\"), []byte(c.String(\"key\")), filePath, !c.Bool(\"disable-gzip\"))\n\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\tfmt.Printf(\"%s\\n\", err)\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfmt.Printf(\"解密成功, %s -> %s\\n\", filePath, decryptedFilePath)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"method\",\n\t\t\t\t\t\t\tUsage: \"加密方法\",\n\t\t\t\t\t\t\tValue: \"aes-128-ctr\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"key\",\n\t\t\t\t\t\t\tUsage: \"加密密钥\",\n\t\t\t\t\t\t\tValue: app.Name,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcli.BoolFlag{\n\t\t\t\t\t\t\tName:  \"disable-gzip\",\n\t\t\t\t\t\t\tUsage: \"不启用GZIP\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:        \"clear\",\n\t\t\tAliases:     []string{\"cls\"},\n\t\t\tUsage:       \"清空控制台\",\n\t\t\tUsageText:   app.Name + \" clear\",\n\t\t\tDescription: \"清空控制台屏幕\",\n\t\t\tCategory:    \"其他\",\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tpcsliner.ClearScreen()\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:    \"quit\",\n\t\t\tAliases: []string{\"exit\"},\n\t\t\tUsage:   \"退出程序\",\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\treturn cli.NewExitError(\"\", 0)\n\t\t\t},\n\t\t\tHidden:   true,\n\t\t\tHideHelp: true,\n\t\t},\n\t}\n\n\tsort.Sort(cli.FlagsByName(app.Flags))\n\tsort.Sort(cli.CommandsByName(app.Commands))\n\n\tapp.Run(os.Args)\n}\n"
        },
        {
          "name": "pcsliner",
          "type": "tree",
          "content": null
        },
        {
          "name": "pcstable",
          "type": "tree",
          "content": null
        },
        {
          "name": "pcsutil",
          "type": "tree",
          "content": null
        },
        {
          "name": "pcsverbose",
          "type": "tree",
          "content": null
        },
        {
          "name": "requester",
          "type": "tree",
          "content": null
        },
        {
          "name": "resource_windows_386.syso",
          "type": "blob",
          "size": 67.6318359375,
          "content": null
        },
        {
          "name": "resource_windows_amd64.syso",
          "type": "blob",
          "size": 67.6318359375,
          "content": null
        },
        {
          "name": "versioninfo.json",
          "type": "blob",
          "size": 1.0830078125,
          "content": "{\n    \"FixedFileInfo\": {\n        \"FileVersion\": {\n            \"Major\": 3,\n            \"Minor\": 9,\n            \"Patch\": 7,\n            \"Build\": 0\n        },\n        \"ProductVersion\": {\n            \"Major\": 3,\n            \"Minor\": 9,\n            \"Patch\": 7,\n            \"Build\": 0\n        },\n        \"FileFlagsMask\": \"3f\",\n        \"FileFlags \": \"00\",\n        \"FileOS\": \"040004\",\n        \"FileType\": \"01\",\n        \"FileSubType\": \"00\"\n    },\n    \"StringFileInfo\": {\n        \"Comments\": \"\",\n        \"CompanyName\": \"qjfoidnh\",\n        \"FileDescription\": \"百度网盘客户端(加强版)\",\n        \"FileVersion\": \"v3.9.7\",\n        \"InternalName\": \"\",\n        \"LegalCopyright\": \"© 2016-2020 iikira.\",\n        \"LegalTrademarks\": \"\",\n        \"OriginalFilename\": \"\",\n        \"PrivateBuild\": \"\",\n        \"ProductName\": \"BaiduPCS-Go\",\n        \"ProductVersion\": \"v3.9.7\",\n        \"SpecialBuild\": \"\"\n    },\n    \"VarFileInfo\": {\n        \"Translation\": {\n            \"LangID\": \"0409\",\n            \"CharsetID\": \"04B0\"\n        }\n    },\n    \"IconPath\": \"assets/BaiduPCS-Go.ico\",\n    \"ManifestPath\": \"BaiduPCS-Go.exe.manifest\"\n}"
        }
      ]
    }
  ]
}