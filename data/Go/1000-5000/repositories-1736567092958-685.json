{
  "metadata": {
    "timestamp": 1736567092958,
    "page": 685,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Finb/bark-server",
      "stars": 2694,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2119140625,
          "content": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\nbark-server\ndist\n.idea/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "MIT License\n\nCopyright (c) 2018 Feng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.0556640625,
          "content": "web: bin/bark-server -addr 0.0.0.0:$PORT -serverless true"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.47265625,
          "content": "# Bark\n\n<img src=\"https://wx3.sinaimg.cn/mw690/0060lm7Tly1g0nfnjjxbbj30sg0sg757.jpg\" width=200px height=200px />\n\n[Bark](https://github.com/Finb/Bark) is an iOS App which allows you to push customed notifications to your iPhone.\n\n\n## Table of Contents\n\n   * [Bark](#bark)\n      * [Installation](#installation)\n         * [For Docker User](#for-docker-user)\n         * [For General User](#for-general-user)\n         * [For Developer](#for-developer)\n         * [Nginx Proxy](#nginx-proxy)\n      * [API V2](#api-v2)\n      * [Other](#other)\n         * [中文](#中文)\n         * [Markdown Support](#markdown-support)         \n      * [Contributing to bark-server](#contributing-to-bark-server)\n         * [Development environment](#development-environment)\n      * [Update](#update)\n\n\n## Installation\n\n### For Docker User\n\n![Docker Automated build](https://img.shields.io/docker/automated/finab/bark-server.svg) ![Image Size](https://img.shields.io/docker/image-size/finab/bark-server?sort=date) ![License](https://img.shields.io/github/license/finb/bark-server)\n\nThe docker image is already available, you can use the following command to run the bark server:\n\n``` sh\ndocker run -dt --name bark -p 8080:8080 -v `pwd`/bark-data:/data finab/bark-server\n```\n\nIf you use the docker-compose tool, you can copy docker-copose.yaml under this project to any directory and run it:\n\n``` sh\nmkdir bark-server && cd bark-server\ncurl -sL https://github.com/Finb/bark-server/raw/master/deploy/docker-compose.yaml > docker-compose.yaml\ndocker compose up -d\n```\n\n### For General User \n\n- 1、Download precompiled binaries from the [releases](https://github.com/Finb/bark-server/releases) page\n- 2、Add executable permissions to the bark-server binary: `chmod +x bark-server`\n- 3、Start bark-server: `./bark-server --addr 0.0.0.0:8080 --data ./bark-data`\n- 4、Test the server: `curl localhost:8080/ping`\n\n**Note: Bark-server uses the `/data` directory to store data by default. Make sure that bark-server has permission to write to the `/data` directory, otherwise use the `-d` option to change the directory.**\n\n### For Developer\n\nDevelopers can compile this project by themselves, and the dependencies required for compilation:\n\n- Golang 1.18+\n- Go Mod Enabled(env `GO111MODULE=on`)\n- Go Mod Proxy Enabled(env `GOPROXY=https://goproxy.cn`)\n- [go-task](https://taskfile.dev/installation/) Installed\n\nRun the following command to compile this project:\n\n```sh\n# Cross compile all platforms\ntask\n\n# Compile the specified platform (please refer to Taskfile.yaml)\ntask linux_amd64\ntask linux_amd64_v3\n```\n\n**Note: The linux amd64 v3 architecture was added in go 1.18, see [https://github.com/golang/go/wiki/MinimumRequirements#amd64](https://github.com/golang/go/wiki/MinimumRequirements#amd64)**\n\n### Nginx Proxy\n\nMost users want to deploy the bark server on the intranet server, and then use Nginx to reverse proxy the bark server;\nhere is a simple Nginx configuration example (we assume that the bark server is listening at `192.168.1.123:8080`)\n\n```sh\n# generated 2020-03-26, Mozilla Guideline v5.4, nginx 1.17.7, OpenSSL 1.1.1d, modern configuration\n# https://ssl-config.mozilla.org/#server=nginx&version=1.17.7&config=modern&openssl=1.1.1d&guideline=5.4\nserver {\n    listen 80;\n    listen [::]:80;\n    # Replace bark.app.dev with your real domain name.\n    server_name bark.app.dev;\n\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    # Replace bark.app.dev with your real domain name.\n    server_name bark.app.dev;\n\n    ssl_certificate /path/to/signed_cert_plus_intermediates;\n    ssl_certificate_key /path/to/private_key;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions\n    ssl_session_tickets off;\n\n    # modern configuration\n    ssl_protocols TLSv1.3;\n    ssl_prefer_server_ciphers off;\n\n    # HSTS (ngx_http_headers_module is required) (63072000 seconds)\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    # verify chain of trust of OCSP response using Root CA and Intermediate certs\n    ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;\n\n    # replace with the IP address of your resolver\n    #resolver 127.0.0.1;\n\n    location / {\n\n        log_not_found on;\n        # Replace http://192.168.1.123:8080 with the listening address of the bark server.\n        proxy_pass http://192.168.1.123:8080;\n\n        proxy_read_timeout 300;\n        proxy_connect_timeout 300;\n        proxy_redirect off;\n\n        proxy_set_header Host              $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Real-IP         $remote_addr;\n\n    }\n}\n```\n\n### Use MySQL instead of Bbolt\n\nJust run the server with `-dsn=user:pass@tcp(mysql_host)/bark`, it will use MySQL instead of file database Bbolt\n\n## API V2\n\nPlease read [API_V2.md](docs/API_V2.md).\n\n## Other\n\n### 中文\n\n- [https://day.app/2018/06/bark-server-document](https://day.app/2018/06/bark-server-document)\n\n### Markdown support:\n\n- [https://github.com/adams549659584/bark-server](https://github.com/adams549659584/bark-server)\n\n## Contributing to bark-server\n\n### Development environment\n\nThis project requires at least the golang 1.12 version to compile and requires Go mod support.\n\n- Golang 1.16\n- GoLand 2020.3 or other Go IDE\n- Docker(Optional)\n\n## Update \n\nNow the push certificate embedded in the program will never expire. You only need to update the program if the push fails due to the expired certificate.\n"
        },
        {
          "name": "Taskfile.yaml",
          "type": "blob",
          "size": 6.06640625,
          "content": "version: '3'\n\nvars:\n  BUILD_VERSION:\n    sh: git describe --tags\n  BUILD_DATE:\n    sh: date \"+%F %T\"\n  COMMIT_ID:\n    sh: git rev-parse HEAD\n  DOCKER_SOCK: /var/run/docker.sock\n\ntasks:\n  clean:\n    cmds:\n      - rm -rf dist\n      - mkdir dist\n  copy-resource:\n    cmds:\n      - cp deploy/* dist\n  build-tpl:\n    label: build-{{.TASK}}\n    cmds:\n      - |\n        GOOS={{.GOOS}} GOARCH={{.GOARCH}} GOARM={{.GOARM}} GOMIPS={{.GOMIPS}} GOAMD64={{.GOAMD64}} \\\n        go build -trimpath -o dist/bark-server_{{.TASK}} -ldflags \\\n        \"-w -s -X 'main.version={{.BUILD_VERSION}}' -X 'main.buildDate={{.BUILD_DATE}}' -X 'main.commitID={{.COMMIT_ID}}'\"\n  linux_386:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: 386\n        }\n  linux_amd64:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: amd64\n        }\n  linux_amd64_v2:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: amd64,\n          GOAMD64: v2\n        }\n  linux_amd64_v3:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: amd64,\n          GOAMD64: v3\n        }\n  linux_amd64_v4:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: amd64,\n          GOAMD64: v4\n        }\n  linux_armv5:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: arm,\n          GOARM: 5\n        }\n  linux_armv6:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: arm,\n          GOARM: 6\n        }\n  linux_armv7:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: arm,\n          GOARM: 7\n        }\n  linux_armv8:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: arm64\n        }\n  linux_mips_hardfloat:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: mips,\n          GOMIPS: hardfloat\n        }\n  linux_mipsle_softfloat:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: mipsle,\n          GOMIPS: softfloat\n        }\n  linux_mipsle_hardfloat:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: mipsle,\n          GOMIPS: hardfloat\n        }\n  linux_mips64:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: mips64\n        }\n  linux_mips64le:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: linux,\n          GOARCH: mips64le\n        }\n  windows_386.exe:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: windows,\n          GOARCH: 386\n        }\n  windows_amd64.exe:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: windows,\n          GOARCH: amd64\n        }\n  windows_amd64_v2.exe:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: windows,\n          GOARCH: amd64,\n          GOAMD64: v2\n        }\n  windows_amd64_v3.exe:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: windows,\n          GOARCH: amd64,\n          GOAMD64: v3\n        }\n  windows_amd64_v4.exe:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: windows,\n          GOARCH: amd64,\n          GOAMD64: v4\n        }\n  darwin_amd64:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: darwin,\n          GOARCH: amd64,\n        }\n  darwin_arm64:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: darwin,\n          GOARCH: arm64,\n        }        \n  freebsd_amd64:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: freebsd,\n          GOARCH: amd64,\n        }        \n  freebsd_arm64:\n    cmds:\n      - task: build-tpl\n        vars: {\n          TASK: \"{{.TASK}}\",\n          GOOS: freebsd,\n          GOARCH: arm64,\n        }        \n  docker:\n    cmds:\n      - docker build -t finab/bark-server:{{.BUILD_VERSION}} -f deploy/Dockerfile .\n      - docker tag finab/bark-server:{{.BUILD_VERSION}} finab/bark-server\n  docker-buildx:\n    vars:\n      PLATFORM: linux/amd64,linux/arm/v7,linux/arm64\n    cmds:\n      - docker run -dt --name dind -v {{.DOCKER_SOCK}}:/var/run/docker.sock -v $(pwd):/bark-server docker tail -f /dev/null\n      - defer: docker rm -f dind\n      - docker exec -w /bark-server -it dind docker login\n      - docker exec -w /bark-server -it dind docker buildx create --name builder --driver docker-container --bootstrap --use\n      - docker exec -w /bark-server -it dind docker buildx build --platform {{.PLATFORM}} -t finab/bark-server:{{.BUILD_VERSION}} -f deploy/Dockerfile --push .\n  default:\n    cmds:\n      - task: clean\n      - task: copy-resource\n      - task: linux_386\n      - task: linux_amd64\n      - task: linux_amd64_v2\n      - task: linux_amd64_v3\n      - task: linux_amd64_v4\n      - task: linux_armv5\n      - task: linux_armv6\n      - task: linux_armv7\n      - task: linux_armv8\n      - task: linux_mips_hardfloat\n      - task: linux_mipsle_softfloat\n      - task: linux_mipsle_hardfloat\n      - task: linux_mips64\n      - task: linux_mips64le\n      - task: windows_386.exe\n      - task: windows_amd64.exe\n      - task: windows_amd64_v2.exe\n      - task: windows_amd64_v3.exe\n      - task: windows_amd64_v4.exe\n      - task: darwin_amd64\n      - task: darwin_arm64\n      - task: freebsd_amd64\n      - task: freebsd_arm64\n  release:\n    cmds:\n      - task: default\n      - ghr -u finb -t $GITHUB_TOKEN -replace -recreate -name \"Bump {{.BUILD_VERSION}}\" --debug {{.BUILD_VERSION}} dist\n"
        },
        {
          "name": "apns",
          "type": "tree",
          "content": null
        },
        {
          "name": "app.json",
          "type": "blob",
          "size": 0.33203125,
          "content": "{\n  \"name\": \"bark-server\",\n  \"description\": \"Backend of Bark\",\n  \"env\": {\n    \"BARK_KEY\": {\n      \"description\": \"Bark Key\",\n      \"value\": \"\"\n    },\n    \"BARK_DEVICE_TOKEN\": {\n      \"description\": \"APNS DeviceToken\",\n      \"value\": \"\"\n    }\n  },\n  \"website\": \"https://bark.day.app\",\n  \"repository\": \"https://github.com/finb/bark-server\"\n}\n"
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "deploy",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.462890625,
          "content": "// +heroku goVersion go1.17\n\nmodule github.com/finb/bark-server/v2\n\ngo 1.22\n\nrequire (\n\tgithub.com/go-sql-driver/mysql v1.8.1\n\tgithub.com/gofiber/fiber/v2 v2.52.6\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/lithammer/shortuuid/v3 v3.0.7\n\tgithub.com/mritd/logger v0.0.6\n\tgithub.com/sideshow/apns2 v0.25.0\n\tgithub.com/urfave/cli/v2 v2.27.4\n\tgo.etcd.io/bbolt v1.3.11\n\tgolang.org/x/net v0.34.0\n)\n\nrequire (\n\tfilippo.io/edwards25519 v1.1.0 // indirect\n\tgithub.com/andybalholm/brotli v1.1.0 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.4 // indirect\n\tgithub.com/golang-jwt/jwt/v4 v4.5.1 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/klauspost/compress v1.17.9 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.16 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/rivo/uniseg v0.2.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/valyala/bytebufferpool v1.0.0 // indirect\n\tgithub.com/valyala/fasthttp v1.51.0 // indirect\n\tgithub.com/valyala/tcplisten v1.0.0 // indirect\n\tgithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 // indirect\n\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/multierr v1.7.0 // indirect\n\tgo.uber.org/zap v1.20.0 // indirect\n\tgolang.org/x/sys v0.29.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 12.265625,
          "content": "filippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=\nfilippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=\ngithub.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20201120081800-1786d5ef83d4/go.mod h1:OMCwj8VM1Kc9e19TLln2VL61YJF0x1XFtfdL4JdbSyE=\ngithub.com/andybalholm/brotli v1.1.0 h1:eLKJA0d02Lf0mVpIDgYnqXcUn0GqVmEFny3VuID1U3M=\ngithub.com/andybalholm/brotli v1.1.0/go.mod h1:sms7XGricyQI9K10gOSf56VKKWS4oLer58Q+mhRPtnY=\ngithub.com/benbjohnson/clock v1.1.0 h1:Q92kusRqC1XV2MjkWETPvjJVqKetz1OzxZB7mHJLju8=\ngithub.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4 h1:wfIWP927BUkWJb2NmU/kNDYIBTh/ziUX91+lVfRxZq4=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-sql-driver/mysql v1.8.1 h1:LedoTUt/eveggdHS9qUFC1EFSa8bU2+1pZjSRpvNJ1Y=\ngithub.com/go-sql-driver/mysql v1.8.1/go.mod h1:wEBSXgmK//2ZFJyE+qWnIsVGmvmEKlqwuVSjsCm7DZg=\ngithub.com/gofiber/fiber/v2 v2.52.6 h1:Rfp+ILPiYSvvVuIPvxrBns+HJp8qGLDnLJawAu27XVI=\ngithub.com/gofiber/fiber/v2 v2.52.6/go.mod h1:YEcBbO/FB+5M1IZNBP9FO3J9281zgPAreiI1oqg8nDw=\ngithub.com/golang-jwt/jwt/v4 v4.4.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=\ngithub.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=\ngithub.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/uuid v1.2.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2qeMA=\ngithub.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/lithammer/shortuuid/v3 v3.0.7 h1:trX0KTHy4Pbwo/6ia8fscyHoGA+mf1jWbPJVuvyJQQ8=\ngithub.com/lithammer/shortuuid/v3 v3.0.7/go.mod h1:vMk8ke37EmiewwolSO1NLW8vP4ZaKlRuDIi8tWWmAts=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=\ngithub.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 h1:ZqeYNhU3OHLH3mGKHDcjJRFFRrJa6eAM5H+CtDdOsPc=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/mritd/logger v0.0.6 h1:EAXqYR7fmModxsM9ShebCi72eNECZLg2oDI7r1Y0lCI=\ngithub.com/mritd/logger v0.0.6/go.mod h1:hpsXjoG0BhHfxdMnSjHuyacQJJC7lzC7iv3IWVC3FSQ=\ngithub.com/pkg/errors v0.8.1 h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sideshow/apns2 v0.25.0 h1:XOzanncO9MQxkb03T/2uU2KcdVjYiIf0TMLzec0FTW4=\ngithub.com/sideshow/apns2 v0.25.0/go.mod h1:7Fceu+sL0XscxrfLSkAoH6UtvKefq3Kq1n4W3ayQZqE=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/urfave/cli/v2 v2.27.4 h1:o1owoI+02Eb+K107p27wEX9Bb8eqIoZCfLXloLUSWJ8=\ngithub.com/urfave/cli/v2 v2.27.4/go.mod h1:m4QzxcD2qpra4z7WhzEGn74WZLViBnMpb1ToCAKdGRQ=\ngithub.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=\ngithub.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=\ngithub.com/valyala/fasthttp v1.51.0 h1:8b30A5JlZ6C7AS81RsWjYMQmrZG6feChmgAolCl1SqA=\ngithub.com/valyala/fasthttp v1.51.0/go.mod h1:oI2XroL+lI7vdXyYoQk03bXBThfFl2cVdIA3Xl7cH8g=\ngithub.com/valyala/tcplisten v1.0.0 h1:rBHj/Xf+E1tRGZyWIWwJDiRY0zc1Js+CV5DqwacVSA8=\ngithub.com/valyala/tcplisten v1.0.0/go.mod h1:T0xQ8SeCZGxckz9qRXTfG43PvQ/mcWh7FwZEA7Ioqkc=\ngithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 h1:gEOO8jv9F4OT7lGCjxCBTO/36wtF6j2nSip77qHd4x4=\ngithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1/go.mod h1:Ohn+xnUBiLI6FVj/9LpzZWtj1/D6lUovWYBkxHVV3aM=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngo.etcd.io/bbolt v1.3.11 h1:yGEzV1wPz2yVCLsD8ZAiGHhHVlczyC9d1rP43/VCRJ0=\ngo.etcd.io/bbolt v1.3.11/go.mod h1:dksAq7YMXoljX0xu6VF5DMZGbhYYoLUalEiSySYAS4I=\ngo.uber.org/atomic v1.7.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/atomic v1.9.0 h1:ECmE8Bn/WFTYwEW/bpKD3M8VtR/zQVbavAoalC1PYyE=\ngo.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/goleak v1.1.11 h1:wy28qYRKZgnJTxGxvye5/wgWr1EKjmUDGYox5mGlRlI=\ngo.uber.org/goleak v1.1.11/go.mod h1:cwTWslyiVhfpKIDGSZEM2HlOvcqm+tG4zioyIeLoqMQ=\ngo.uber.org/multierr v1.6.0/go.mod h1:cdWPpRnG4AhwMwsgIHip0KRBQjJy5kYEpYjJxpXp9iU=\ngo.uber.org/multierr v1.7.0 h1:zaiO/rmgFjbmCXdSYJWQcdvOCsthmdaHfr3Gm2Kx4Ec=\ngo.uber.org/multierr v1.7.0/go.mod h1:7EAYxJLBy9rStEaz58O2t4Uvip6FSURkq8/ppBp95ak=\ngo.uber.org/zap v1.20.0 h1:N4oPlghZwYG55MlU6LXk/Zp00FVNE9X9wrYO8CEs4lc=\ngo.uber.org/zap v1.20.0/go.mod h1:wjWOCqI0f2ZZrJF/UufIOkiC8ii6tm1iqIsLo76RfJw=\ngolang.org/x/crypto v0.0.0-20170512130425-ab89591268e0/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.32.0 h1:euUpcYgM8WcP71gNpTqQCn6rC2t6ULUPiOzfWaXVVfc=\ngolang.org/x/crypto v0.32.0/go.mod h1:ZnnJkOaASj8g0AjIduWNlq2NRxL0PlBrbKVyZ6V/Ugc=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.0.0-20220403103023-749bd193bc2b/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/net v0.34.0 h1:Mb7Mrk043xzHgnRM88suvJFwzVrRfHEHJEl5/71CKw0=\ngolang.org/x/net v0.34.0/go.mod h1:di0qlW3YNM5oh6GqDGQr92MyTozJPmybPK4Ev/Gm31k=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 6.3671875,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"reflect\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/finb/bark-server/v2/apns\"\n\t\"github.com/finb/bark-server/v2/database\"\n\n\tjsoniter \"github.com/json-iterator/go\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\n\t\"github.com/mritd/logger\"\n\t\"github.com/urfave/cli/v2\"\n)\n\nvar (\n\tversion   string\n\tbuildDate string\n\tcommitID  string\n)\n\nvar db database.Database\n\nfunc main() {\n\tapp := &cli.App{\n\t\tName:    \"bark-server\",\n\t\tUsage:   \"Push Server For Bark\",\n\t\tVersion: fmt.Sprintf(\"%s %s %s\", version, commitID, buildDate),\n\t\tFlags: []cli.Flag{\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"addr\",\n\t\t\t\tUsage:   \"Server listen address\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_ADDRESS\"},\n\t\t\t\tValue:   \"0.0.0.0:8080\",\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"url-prefix\",\n\t\t\t\tUsage:   \"Serve URL Prefix\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_URL_PREFIX\"},\n\t\t\t\tValue:   \"/\",\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"data\",\n\t\t\t\tUsage:   \"Server data storage dir\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_DATA_DIR\"},\n\t\t\t\tValue:   \"/data\",\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"dsn\",\n\t\t\t\tUsage:   \"MySQL DSN user:pass@tcp(host)/dbname\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_DSN\"},\n\t\t\t\tValue:   \"\",\n\t\t\t},\n\t\t\t&cli.BoolFlag{\n\t\t\t\tName:    \"serverless\",\n\t\t\t\tUsage:   \"serverless mode\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_SERVERLESS\"},\n\t\t\t\tValue:   false,\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"cert\",\n\t\t\t\tUsage:   \"Server TLS certificate\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_CERT\"},\n\t\t\t\tValue:   \"\",\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"key\",\n\t\t\t\tUsage:   \"Server TLS certificate key\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_KEY\"},\n\t\t\t\tValue:   \"\",\n\t\t\t},\n\t\t\t&cli.BoolFlag{\n\t\t\t\tName:    \"case-sensitive\",\n\t\t\t\tUsage:   \"Enable HTTP URL case sensitive\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_CASE_SENSITIVE\"},\n\t\t\t\tValue:   false,\n\t\t\t},\n\t\t\t&cli.BoolFlag{\n\t\t\t\tName:    \"strict-routing\",\n\t\t\t\tUsage:   \"Enable strict routing distinction\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_STRICT_ROUTING\"},\n\t\t\t\tValue:   false,\n\t\t\t},\n\t\t\t&cli.BoolFlag{\n\t\t\t\tName:    \"reduce-memory-usage\",\n\t\t\t\tUsage:   \"Aggressively reduces memory usage at the cost of higher CPU usage if set to true\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_REDUCE_MEMORY_USAGE\"},\n\t\t\t\tValue:   false,\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"user\",\n\t\t\t\tUsage:   \"Basic auth username\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_BASIC_AUTH_USER\"},\n\t\t\t\tValue:   \"\",\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"password\",\n\t\t\t\tUsage:   \"Basic auth password\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_BASIC_AUTH_PASSWORD\"},\n\t\t\t\tValue:   \"\",\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"proxy-header\",\n\t\t\t\tUsage:   \"The remote IP address used by the bark server http header\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_PROXY_HEADER\"},\n\t\t\t\tValue:   \"\",\n\t\t\t},\n\t\t\t&cli.IntFlag{\n\t\t\t\tName:    \"max-batch-push-count\",\n\t\t\t\tUsage:   \"Maximum number of batch pushes allowed, -1 means no limit\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_MAX_BATCH_PUSH_COUNT\"},\n\t\t\t\tValue:   -1,\n\t\t\t\tAction:  func(ctx *cli.Context, v int) error { SetMaxBatchPushCount(v); return nil },\n\t\t\t},\n\t\t\t&cli.IntFlag{\n\t\t\t\tName:    \"max-apns-client-count\",\n\t\t\t\tUsage:   \"Maximum number of APNs client connections\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_MAX_APNS_CLIENT_COUNT\"},\n\t\t\t\tValue:   1,\n\t\t\t\tAction:  func(ctx *cli.Context, v int) error { return apns.ReCreateAPNS(v) },\n\t\t\t},\n\t\t\t&cli.IntFlag{\n\t\t\t\tName:    \"concurrency\",\n\t\t\t\tUsage:   \"Maximum number of concurrent connections\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_CONCURRENCY\"},\n\t\t\t\tValue:   256 * 1024,\n\t\t\t\tHidden:  true,\n\t\t\t},\n\t\t\t&cli.DurationFlag{\n\t\t\t\tName:    \"read-timeout\",\n\t\t\t\tUsage:   \"The amount of time allowed to read the full request, including the body\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_READ_TIMEOUT\"},\n\t\t\t\tValue:   3 * time.Second,\n\t\t\t\tHidden:  true,\n\t\t\t},\n\t\t\t&cli.DurationFlag{\n\t\t\t\tName:    \"write-timeout\",\n\t\t\t\tUsage:   \"The maximum duration before timing out writes of the response\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_WRITE_TIMEOUT\"},\n\t\t\t\tValue:   3 * time.Second,\n\t\t\t\tHidden:  true,\n\t\t\t},\n\t\t\t&cli.DurationFlag{\n\t\t\t\tName:    \"idle-timeout\",\n\t\t\t\tUsage:   \"The maximum amount of time to wait for the next request when keep-alive is enabled\",\n\t\t\t\tEnvVars: []string{\"BARK_SERVER_IDLE_TIMEOUT\"},\n\t\t\t\tValue:   10 * time.Second,\n\t\t\t\tHidden:  true,\n\t\t\t},\n\t\t},\n\t\tAuthors: []*cli.Author{\n\t\t\t{Name: \"mritd\", Email: \"mritd@linux.com\"},\n\t\t\t{Name: \"Finb\", Email: \"to@day.app\"},\n\t\t},\n\t\tAction: func(c *cli.Context) error {\n\t\t\tfiberApp := fiber.New(fiber.Config{\n\t\t\t\tServerHeader:      \"Bark\",\n\t\t\t\tCaseSensitive:     c.Bool(\"case-sensitive\"),\n\t\t\t\tStrictRouting:     c.Bool(\"strict-routing\"),\n\t\t\t\tConcurrency:       c.Int(\"concurrency\"),\n\t\t\t\tReadTimeout:       c.Duration(\"read-timeout\"),\n\t\t\t\tWriteTimeout:      c.Duration(\"write-timeout\"),\n\t\t\t\tIdleTimeout:       c.Duration(\"idle-timeout\"),\n\t\t\t\tProxyHeader:       c.String(\"proxy-header\"),\n\t\t\t\tReduceMemoryUsage: c.Bool(\"reduce-memory-usage\"),\n\t\t\t\tJSONEncoder:       jsoniter.Marshal,\n\t\t\t\tNetwork:           \"tcp\",\n\t\t\t\tErrorHandler: func(c *fiber.Ctx, err error) error {\n\t\t\t\t\tcode := fiber.StatusInternalServerError\n\t\t\t\t\tif e, ok := err.(*fiber.Error); ok {\n\t\t\t\t\t\tcode = e.Code\n\t\t\t\t\t}\n\t\t\t\t\treturn c.Status(code).JSON(CommonResp{\n\t\t\t\t\t\tCode:      code,\n\t\t\t\t\t\tMessage:   err.Error(),\n\t\t\t\t\t\tTimestamp: time.Now().Unix(),\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tfiberRouter := fiberApp.Group(c.String(\"url-prefix\"))\n\t\t\trouterAuth(c.String(\"user\"), c.String(\"password\"), fiberRouter)\n\t\t\trouterSetup(fiberRouter)\n\n\t\t\tif serverless := c.Bool(\"serverless\"); serverless {\n\t\t\t\t// use system environment variable.\n\t\t\t\tdb = database.NewEnvBase()\n\t\t\t} else if dsn := c.String(\"dsn\"); dsn != \"\" {\n\t\t\t\tdb = database.NewMySQL(dsn)\n\t\t\t} else {\n\t\t\t\tdb = database.NewBboltdb(c.String(\"data\"))\n\t\t\t}\n\n\t\t\tgo func() {\n\t\t\t\tsigs := make(chan os.Signal, 1)\n\t\t\t\tsignal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)\n\t\t\t\tfor range sigs {\n\t\t\t\t\tlogger.Warn(\"Received a termination signal, bark server shutdown...\")\n\t\t\t\t\tif err := fiberApp.Shutdown(); err != nil {\n\t\t\t\t\t\tlogger.Errorf(\"Server forced to shutdown error: %v\", err)\n\t\t\t\t\t}\n\t\t\t\t\tif err := db.Close(); err != nil {\n\t\t\t\t\t\tlogger.Errorf(\"Database close error: %v\", err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()\n\n\t\t\tlogger.Infof(\"Bark Server Listen at: %s , Database: %s\", c.String(\"addr\"), reflect.TypeOf(db))\n\t\t\tif cert, key := c.String(\"cert\"), c.String(\"key\"); cert != \"\" && key != \"\" {\n\t\t\t\treturn fiberApp.ListenTLS(c.String(\"addr\"), cert, key)\n\t\t\t}\n\t\t\treturn fiberApp.Listen(c.String(\"addr\"))\n\t\t},\n\t}\n\n\terr := app.Run(os.Args)\n\tif err != nil {\n\t\tlogger.Error(err)\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "push_test.go",
          "type": "blob",
          "size": 8.0498046875,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n\n\t\"io\"\n\n\t\"github.com/finb/bark-server/v2/database\"\n\t\"github.com/gofiber/fiber/v2\"\n\tjsoniter \"github.com/json-iterator/go\"\n)\n\n// Before running the tests, a valid deviceToken must be set. Otherwise, the tests will fail.\nconst (\n\tdeviceToken = \"\"\n\tkey         = \"MemoryBaseKey\"\n)\n\nvar app *fiber.App\n\nfunc TestMain(m *testing.M) {\n\tif deviceToken == \"\" {\n\t\tpanic(\"deviceToken is not set\")\n\t}\n\tdb = database.NewMemBase()\n\tdb.SaveDeviceTokenByKey(key, deviceToken)\n\tapp = NewServer()\n\tm.Run()\n}\n\nfunc TestRegister(t *testing.T) {\n\tEndpoint(t, []APITestCase{\n\t\t{\n\t\t\tName:           \"Normal registration\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/register?devicetoken=\" + deviceToken,\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"Registration with key\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/register?key=\" + key + \"&devicetoken=\" + deviceToken,\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"Registration with wrong key\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/register?key=\" + \"wrongKey\" + \"&devicetoken=\" + deviceToken,\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 500,\n\t\t},\n\t\t{\n\t\t\tName:           \"Registration without devicetoken\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/register?key=\" + key,\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 400,\n\t\t},\n\t})\n}\n\nfunc TestPushTitleAndBody(t *testing.T) {\n\t// Correct push\n\tEndpoint(t, []APITestCase{\n\t\t{\n\t\t\tName:           \"GET push body\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/\" + key + \"/body\",\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"GET push title body\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/\" + key + \"/title/body\",\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"GET push title subtitle body\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/\" + key + \"/title/subtitle/body\",\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST push body\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/\" + key,\n\t\t\tBody:           \"body=body\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST push title body\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/\" + key,\n\t\t\tBody:           \"title=title&body=body\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST push title subtitle body\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/\" + key,\n\t\t\tBody:           \"title=title&subtitle=subtitle&body=body\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"GET title subtitle body URL parameters\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/\" + key + \"?title=title&subtitle=subtitle&body=body\",\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST title subtitle body POST parameters\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/\" + key,\n\t\t\tBody:           \"title=title&subtitle=subtitle&body=body\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST title subtitle body JSON parameters\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/\" + key,\n\t\t\tBody:           \"{\\\"title\\\":\\\"title\\\",\\\"subtitle\\\":\\\"subtitle\\\",\\\"body\\\":\\\"body\\\"}\",\n\t\t\tIsJson:         true,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST V2 title subtitle body\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/push\",\n\t\t\tBody:           \"device_key=\" + key + \"&title=title&subtitle=subtitle&body=body\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST title subtitle body JSON parameters V2\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/push\",\n\t\t\tBody:           \"{\\\"title\\\":\\\"title\\\",\\\"subtitle\\\":\\\"subtitle\\\",\\\"body\\\":\\\"body\\\",\\\"device_key\\\":\\\"\" + key + \"\\\"}\",\n\t\t\tIsJson:         true,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t})\n\n\t// Incorrect push\n\tEndpoint(t, []APITestCase{\n\t\t{\n\t\t\tName:           \"GET push without key\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/body\",\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 400,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST push without key\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/push\",\n\t\t\tBody:           \"title=title&subtitle=subtitle&body=body\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 400,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST JSON push without key\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/push\",\n\t\t\tBody:           \"body=body\",\n\t\t\tIsJson:         true,\n\t\t\tWantStatusCode: 400,\n\t\t},\n\t\t{\n\t\t\tName:           \"GET push with too many parameters\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/\" + key + \"/title/subtitle/body/extra\",\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 404,\n\t\t},\n\t})\n}\n\nfunc TestCiphertext(t *testing.T) {\n\tEndpoint(t, []APITestCase{\n\t\t{\n\t\t\tName:           \"Send encrypted push\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/\" + key + \"/body?ciphertext=text&iv=01234567890123456\",\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"Send encrypted push, omit body\",\n\t\t\tMethod:         \"GET\",\n\t\t\tURL:            \"/\" + key + \"?ciphertext=text\",\n\t\t\tBody:           \"\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST send encrypted push\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/\" + key,\n\t\t\tBody:           \"ciphertext=text\",\n\t\t\tIsJson:         false,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"POST send encrypted push V2\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/push\",\n\t\t\tBody:           \"{\\\"device_key\\\":\\\"\" + key + \"\\\",\\\"ciphertext\\\":\\\"text\\\"}\",\n\t\t\tIsJson:         true,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t})\n}\n\nfunc TestBatchPush(t *testing.T) {\n\tEndpoint(t, []APITestCase{\n\t\t{\n\t\t\tName:           \"Batch Push\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/\" + key,\n\t\t\tBody:           \"{\\\"title\\\":\\\"title\\\",\\\"subtitle\\\":\\\"subtitle\\\",\\\"body\\\":\\\"body\\\",\\\"device_keys\\\":[\\\"\" + key + \"\\\",\\\"\" + key + \"\\\",\\\"\" + key + \"\\\"]}\",\n\t\t\tIsJson:         true,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"Batch Push\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/push\",\n\t\t\tBody:           \"{\\\"title\\\":\\\"title\\\",\\\"subtitle\\\":\\\"subtitle\\\",\\\"body\\\":\\\"body\\\",\\\"device_keys\\\":[\\\"\" + key + \"\\\",\\\"\" + key + \"\\\",\\\"\" + key + \"\\\"]}\",\n\t\t\tIsJson:         true,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t\t{\n\t\t\tName:           \"Batch Push\",\n\t\t\tMethod:         \"POST\",\n\t\t\tURL:            \"/push\",\n\t\t\tBody:           \"{\\\"title\\\":\\\"title\\\",\\\"subtitle\\\":\\\"subtitle\\\",\\\"body\\\":\\\"body\\\",\\\"device_keys\\\": \\\"\" + key + \",\" + key + \",\" + key + \"\\\"}\",\n\t\t\tIsJson:         true,\n\t\t\tWantStatusCode: 200,\n\t\t},\n\t})\n}\n\ntype APITestCase struct {\n\tName           string\n\tMethod         string\n\tURL            string\n\tBody           string\n\tIsJson         bool\n\tWantStatusCode int\n}\n\nfunc NewServer() *fiber.App {\n\tfiberApp := fiber.New(fiber.Config{\n\t\tJSONEncoder: jsoniter.Marshal,\n\t\tErrorHandler: func(c *fiber.Ctx, err error) error {\n\t\t\tcode := fiber.StatusInternalServerError\n\t\t\tif e, ok := err.(*fiber.Error); ok {\n\t\t\t\tcode = e.Code\n\t\t\t}\n\t\t\treturn c.Status(code).JSON(CommonResp{\n\t\t\t\tCode:      code,\n\t\t\t\tMessage:   err.Error(),\n\t\t\t\tTimestamp: time.Now().Unix(),\n\t\t\t})\n\t\t},\n\t})\n\n\trouterSetup(fiberApp)\n\treturn fiberApp\n}\n\nfunc Endpoint(t *testing.T, tc []APITestCase) {\n\tfor _, tt := range tc {\n\t\tt.Run(tt.Name, func(t *testing.T) {\n\t\t\treq, _ := http.NewRequest(tt.Method, tt.URL, bytes.NewBufferString(tt.Body))\n\t\t\tif tt.IsJson {\n\t\t\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t\t\t} else {\n\t\t\t\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\t\t\t}\n\t\t\tres, err := app.Test(req)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tdefer res.Body.Close()\n\n\t\t\tif res.StatusCode != tt.WantStatusCode {\n\t\t\t\tbody, _ := io.ReadAll(io.Reader(res.Body))\n\t\t\t\tt.Fatalf(\"want %d, got %d, res: %s\", tt.WantStatusCode, res.StatusCode, string(body))\n\t\t\t}\n\t\t})\n\t\t// Prevent rate limiting by sending requests too quickly\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n}\n"
        },
        {
          "name": "route_auth.go",
          "type": "blob",
          "size": 0.74609375,
          "content": "package main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\tfiberbasicauth \"github.com/gofiber/fiber/v2/middleware/basicauth\"\n\t\"github.com/mritd/logger\"\n\t\"strings\"\n)\n\nfunc routerAuth(user, passwd string, router fiber.Router) {\n\tif user != \"\" && passwd != \"\" {\n\t\tlogger.Info(\"Bark Server Has Basic Auth Enabled.\")\n\t\tbasicAuth := fiberbasicauth.New(fiberbasicauth.Config{\n\t\t\tUsers: map[string]string{user: passwd},\n\t\t\tRealm: \"Coffee Time\",\n\t\t\tUnauthorized: func(c *fiber.Ctx) error {\n\t\t\t\tauthFreeRouters := []string{\"/ping\", \"/register\", \"/healthz\"}\n\t\t\t\tfor _, item := range authFreeRouters {\n\t\t\t\t\tif strings.HasPrefix(c.Path(), item) {\n\t\t\t\t\t\treturn c.Next()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn c.Status(418).SendString(\"I'm a teapot\")\n\t\t\t},\n\t\t})\n\n\t\trouter.Use(\"/+\", basicAuth)\n\t}\n}\n"
        },
        {
          "name": "route_misc.go",
          "type": "blob",
          "size": 1.0625,
          "content": "package main\n\nimport (\n\t\"runtime\"\n\t\"time\"\n\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc init() {\n\tregisterRoute(\"misc\", func(router fiber.Router) {\n\t\t// Return an OK to indicate the server is running normally\n\t\trouter.Get(\"/\", func(c *fiber.Ctx) error {\n\t\t\treturn c.SendString(\"ok\")\n\t\t})\n\n\t\t// ping func only returns a \"pong\" string, usually used to test server response\n\t\trouter.Get(\"/ping\", func(c *fiber.Ctx) error {\n\t\t\treturn c.JSON(CommonResp{\n\t\t\t\tCode:      200,\n\t\t\t\tMessage:   \"pong\",\n\t\t\t\tTimestamp: time.Now().Unix(),\n\t\t\t})\n\t\t})\n\n\t\t// healthz func only returns an \"ok\" string, similar to ping func,\n\t\t// healthz func is usually used for health check\n\t\trouter.Get(\"/healthz\", func(c *fiber.Ctx) error {\n\t\t\treturn c.SendString(\"ok\")\n\t\t})\n\n\t\t// info func returns information about the server version\n\t\trouter.Get(\"/info\", func(c *fiber.Ctx) error {\n\t\t\tdevices, _ := db.CountAll()\n\t\t\treturn c.JSON(map[string]interface{}{\n\t\t\t\t\"version\": version,\n\t\t\t\t\"build\":   buildDate,\n\t\t\t\t\"arch\":    runtime.GOOS + \"/\" + runtime.GOARCH,\n\t\t\t\t\"commit\":  commitID,\n\t\t\t\t\"devices\": devices,\n\t\t\t})\n\t\t})\n\t})\n}\n"
        },
        {
          "name": "route_push.go",
          "type": "blob",
          "size": 6.75390625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gofiber/fiber/v2/utils\"\n\n\t\"github.com/finb/bark-server/v2/apns\"\n\n\t\"github.com/gofiber/fiber/v2\"\n)\n\n// Maximum number of batch pushes allowed, -1 means no limit\nvar maxBatchPushCount = -1\n\nfunc init() {\n\t// V2 API\n\tregisterRoute(\"push\", func(router fiber.Router) {\n\t\trouter.Post(\"/push\", func(c *fiber.Ctx) error { return routeDoPush(c) })\n\t})\n\n\t// compatible with old requests\n\tregisterRouteWithWeight(\"push_compat\", 1, func(router fiber.Router) {\n\t\trouter.Get(\"/:device_key\", func(c *fiber.Ctx) error { return routeDoPush(c) })\n\t\trouter.Post(\"/:device_key\", func(c *fiber.Ctx) error { return routeDoPush(c) })\n\n\t\trouter.Get(\"/:device_key/:body\", func(c *fiber.Ctx) error { return routeDoPush(c) })\n\t\trouter.Post(\"/:device_key/:body\", func(c *fiber.Ctx) error { return routeDoPush(c) })\n\n\t\trouter.Get(\"/:device_key/:title/:body\", func(c *fiber.Ctx) error { return routeDoPush(c) })\n\t\trouter.Post(\"/:device_key/:title/:body\", func(c *fiber.Ctx) error { return routeDoPush(c) })\n\n\t\trouter.Get(\"/:device_key/:title/:subtitle/:body\", func(c *fiber.Ctx) error { return routeDoPush(c) })\n\t\trouter.Post(\"/:device_key/:title/:subtitle/:body\", func(c *fiber.Ctx) error { return routeDoPush(c) })\n\t})\n}\n\n// Set the maximum number of batch pushes allowed\nfunc SetMaxBatchPushCount(count int) {\n\tmaxBatchPushCount = count\n}\nfunc routeDoPush(c *fiber.Ctx) error {\n\t// Get content-type\n\tcontentType := utils.ToLower(utils.UnsafeString(c.Request().Header.ContentType()))\n\tcontentType = utils.ParseVendorSpecificContentType(contentType)\n\t// Json request uses the API V2\n\tif strings.HasPrefix(contentType, \"application/json\") {\n\t\treturn routeDoPushV2(c)\n\t} else {\n\t\treturn routeDoPushV1(c)\n\t}\n}\n\nfunc routeDoPushV1(c *fiber.Ctx) error {\n\n\tparams := make(map[string]interface{})\n\tvisitor := func(key, value []byte) {\n\t\tparams[strings.ToLower(string(key))] = string(value)\n\t}\n\t// parse query args (medium priority)\n\tc.Request().URI().QueryArgs().VisitAll(visitor)\n\t// parse post args\n\tc.Request().PostArgs().VisitAll(visitor)\n\t// parse multipartForm values\n\tform, err := c.Request().MultipartForm()\n\tif err == nil {\n\t\tfor key, val := range form.Value {\n\t\t\tif len(val) > 0 {\n\t\t\t\tparams[key] = val[0]\n\t\t\t}\n\t\t}\n\t}\n\t// parse url path (highest priority)\n\tpathParams, err := extractUrlPathParams(c)\n\tif err != nil {\n\t\treturn c.Status(500).JSON(failed(400, \"url path parse failed: %v\", err))\n\t}\n\tfor key, val := range pathParams {\n\t\tparams[key] = val\n\t}\n\n\tcode, err := push(params)\n\tif err != nil {\n\t\treturn c.Status(code).JSON(failed(code, err.Error()))\n\t} else {\n\t\treturn c.JSON(success())\n\t}\n}\nfunc routeDoPushV2(c *fiber.Ctx) error {\n\tparams := make(map[string]interface{})\n\t// parse body\n\tif err := c.BodyParser(&params); err != nil && err != fiber.ErrUnprocessableEntity {\n\t\treturn c.Status(400).JSON(failed(400, \"request bind failed: %v\", err))\n\t}\n\t// parse query args (medium priority)\n\tc.Request().URI().QueryArgs().VisitAll(func(key, value []byte) {\n\t\tparams[strings.ToLower(string(key))] = string(value)\n\t})\n\t// parse url path (highest priority)\n\tpathParams, err := extractUrlPathParams(c)\n\tif err != nil {\n\t\treturn c.Status(500).JSON(failed(400, \"url path parse failed: %v\", err))\n\t}\n\tfor key, val := range pathParams {\n\t\tparams[key] = val\n\t}\n\n\tvar deviceKeys []string\n\t// Get the device_keys array from params\n\tif keys, ok := params[\"device_keys\"]; ok {\n\t\tswitch keys := keys.(type) {\n\t\tcase string:\n\t\t\tdeviceKeys = strings.Split(keys, \",\")\n\t\tcase []interface{}:\n\t\t\tfor _, key := range keys {\n\t\t\t\tdeviceKeys = append(deviceKeys, fmt.Sprint(key))\n\t\t\t}\n\t\tdefault:\n\t\t\treturn c.Status(400).JSON(failed(400, \"invalid type for device_keys\"))\n\t\t}\n\t\tdelete(params, \"device_keys\")\n\t}\n\n\tcount := len(deviceKeys)\n\n\tif count == 0 {\n\t\t// Single push\n\t\tcode, err := push(params)\n\t\tif err != nil {\n\t\t\treturn c.Status(code).JSON(failed(code, err.Error()))\n\t\t} else {\n\t\t\treturn c.JSON(success())\n\t\t}\n\t} else {\n\t\t// Batch push\n\t\tif count > maxBatchPushCount && maxBatchPushCount != -1 {\n\t\t\treturn c.Status(400).JSON(failed(400, \"batch push count exceeds the maximum limit: %d\", maxBatchPushCount))\n\t\t}\n\n\t\tvar wg sync.WaitGroup\n\t\tresult := make([]map[string]interface{}, count)\n\t\tvar mu sync.Mutex\n\n\t\tfor i := 0; i < count; i++ {\n\t\t\t// Copy params\n\t\t\tnewParams := make(map[string]interface{})\n\t\t\tfor k, v := range params {\n\t\t\t\tnewParams[k] = v\n\t\t\t}\n\t\t\tnewParams[\"device_key\"] = deviceKeys[i]\n\n\t\t\twg.Add(1)\n\t\t\tgo func(i int, newParams map[string]interface{}) {\n\t\t\t\tdefer wg.Done()\n\n\t\t\t\t// Push\n\t\t\t\tcode, err := push(newParams)\n\n\t\t\t\t// Save result\n\t\t\t\tmu.Lock()\n\t\t\t\tresult[i] = make(map[string]interface{})\n\t\t\t\tif err != nil {\n\t\t\t\t\tresult[i][\"message\"] = err.Error()\n\t\t\t\t}\n\t\t\t\tresult[i][\"code\"] = code\n\t\t\t\tresult[i][\"device_key\"] = deviceKeys[i]\n\t\t\t\tmu.Unlock()\n\t\t\t}(i, newParams)\n\t\t}\n\t\twg.Wait()\n\t\treturn c.JSON(data(result))\n\t}\n}\n\nfunc extractUrlPathParams(c *fiber.Ctx) (map[string]interface{}, error) {\n\t// parse url path (highest priority)\n\tparams := make(map[string]interface{})\n\tif pathDeviceKey := c.Params(\"device_key\"); pathDeviceKey != \"\" {\n\t\tparams[\"device_key\"] = pathDeviceKey\n\t}\n\tif subtitle := c.Params(\"subtitle\"); subtitle != \"\" {\n\t\tstr, err := url.QueryUnescape(subtitle)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tparams[\"subtitle\"] = str\n\t}\n\tif title := c.Params(\"title\"); title != \"\" {\n\t\tstr, err := url.QueryUnescape(title)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tparams[\"title\"] = str\n\t}\n\tif body := c.Params(\"body\"); body != \"\" {\n\t\tstr, err := url.QueryUnescape(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tparams[\"body\"] = str\n\t}\n\treturn params, nil\n}\n\nfunc push(params map[string]interface{}) (int, error) {\n\t// default value\n\tmsg := apns.PushMessage{\n\t\tBody:      \"\",\n\t\tSound:     \"1107\",\n\t\tExtParams: make(map[string]interface{}),\n\t}\n\n\tfor key, val := range params {\n\t\tswitch val := val.(type) {\n\t\tcase string:\n\t\t\tswitch strings.ToLower(string(key)) {\n\t\t\tcase \"device_key\":\n\t\t\t\tmsg.DeviceKey = val\n\t\t\tcase \"subtitle\":\n\t\t\t\tmsg.Subtitle = val\n\t\t\tcase \"title\":\n\t\t\t\tmsg.Title = val\n\t\t\tcase \"body\":\n\t\t\t\tmsg.Body = val\n\t\t\tcase \"sound\":\n\t\t\t\t// Compatible with old parameters\n\t\t\t\tif strings.HasSuffix(val, \".caf\") {\n\t\t\t\t\tmsg.Sound = val\n\t\t\t\t} else {\n\t\t\t\t\tmsg.Sound = val + \".caf\"\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tmsg.ExtParams[strings.ToLower(string(key))] = val\n\t\t\t}\n\t\tcase map[string]interface{}:\n\t\t\tfor k, v := range val {\n\t\t\t\tmsg.ExtParams[k] = v\n\t\t\t}\n\t\tdefault:\n\t\t\tmsg.ExtParams[key] = val\n\t\t}\n\t}\n\n\tif msg.DeviceKey == \"\" {\n\t\treturn 400, fmt.Errorf(\"device key is empty\")\n\t}\n\n\tif msg.Body == \"\" && msg.Title == \"\" && msg.Subtitle == \"\" {\n\t\tmsg.Body = \"Empty message\"\n\t}\n\n\tdeviceToken, err := db.DeviceTokenByKey(msg.DeviceKey)\n\tif err != nil {\n\t\treturn 400, fmt.Errorf(\"failed to get device token: %v\", err)\n\t}\n\tmsg.DeviceToken = deviceToken\n\n\terr = apns.Push(&msg)\n\tif err != nil {\n\t\treturn 500, fmt.Errorf(\"push failed: %v\", err)\n\t}\n\treturn 200, nil\n}\n"
        },
        {
          "name": "route_register.go",
          "type": "blob",
          "size": 2.6474609375,
          "content": "package main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/mritd/logger\"\n)\n\ntype DeviceInfo struct {\n\tDeviceKey   string `form:\"device_key,omitempty\" json:\"device_key,omitempty\" xml:\"device_key,omitempty\" query:\"device_key,omitempty\"`\n\tDeviceToken string `form:\"device_token,omitempty\" json:\"device_token,omitempty\" xml:\"device_token,omitempty\" query:\"device_token,omitempty\"`\n\n\t// compatible with old req\n\tOldDeviceKey   string `form:\"key,omitempty\" json:\"key,omitempty\" xml:\"key,omitempty\" query:\"key,omitempty\"`\n\tOldDeviceToken string `form:\"devicetoken,omitempty\" json:\"devicetoken,omitempty\" xml:\"devicetoken,omitempty\" query:\"devicetoken,omitempty\"`\n}\n\nfunc init() {\n\tregisterRoute(\"register\", func(router fiber.Router) {\n\t\trouter.Post(\"/register\", func(c *fiber.Ctx) error { return doRegister(c, false) })\n\t\trouter.Get(\"/register/:device_key\", doRegisterCheck)\n\t})\n\n\t// compatible with old requests\n\tregisterRouteWithWeight(\"register_compat\", 100, func(router fiber.Router) {\n\t\trouter.Get(\"/register\", func(c *fiber.Ctx) error { return doRegister(c, true) })\n\t})\n}\n\nfunc doRegister(c *fiber.Ctx, compat bool) error {\n\tvar deviceInfo DeviceInfo\n\tif compat {\n\t\tif err := c.QueryParser(&deviceInfo); err != nil {\n\t\t\treturn c.Status(400).JSON(failed(400, \"request bind failed1: %v\", err))\n\t\t}\n\t} else {\n\t\tif err := c.BodyParser(&deviceInfo); err != nil {\n\t\t\treturn c.Status(400).JSON(failed(400, \"request bind failed2: %v\", err))\n\t\t}\n\t}\n\n\tif deviceInfo.DeviceKey == \"\" && deviceInfo.OldDeviceKey != \"\" {\n\t\tdeviceInfo.DeviceKey = deviceInfo.OldDeviceKey\n\t}\n\n\tif deviceInfo.DeviceToken == \"\" {\n\t\tif deviceInfo.OldDeviceToken != \"\" {\n\t\t\tdeviceInfo.DeviceToken = deviceInfo.OldDeviceToken\n\t\t} else {\n\t\t\treturn c.Status(400).JSON(failed(400, \"device token is empty\"))\n\t\t}\n\t}\n\n\t// if deviceInfo.DeviceKey==\"\", newKey will be filled with a new uuid\n\t// otherwise it equal to deviceInfo.DeviceKey\n\tnewKey, err := db.SaveDeviceTokenByKey(deviceInfo.DeviceKey, deviceInfo.DeviceToken)\n\tif err != nil {\n\t\tlogger.Errorf(\"device registration failed: %v\", err)\n\t\treturn c.Status(500).JSON(failed(500, \"device registration failed: %v\", err))\n\t}\n\tdeviceInfo.DeviceKey = newKey\n\n\treturn c.Status(200).JSON(data(map[string]string{\n\t\t// compatible with old resp\n\t\t\"key\":          deviceInfo.DeviceKey,\n\t\t\"device_key\":   deviceInfo.DeviceKey,\n\t\t\"device_token\": deviceInfo.DeviceToken,\n\t}))\n}\n\nfunc doRegisterCheck(c *fiber.Ctx) error {\n\tdeviceKey := c.Params(\"device_key\")\n\n\tif deviceKey == \"\" {\n\t\treturn c.Status(400).JSON(failed(400, \"device key is empty\"))\n\t}\n\n\t_, err := db.DeviceTokenByKey(deviceKey)\n\tif err != nil {\n\t\treturn c.Status(400).JSON(failed(400, err.Error()))\n\t}\n\treturn c.Status(200).JSON(success())\n}\n"
        },
        {
          "name": "router.go",
          "type": "blob",
          "size": 2.4775390625,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"sort\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\tfiberlogger \"github.com/gofiber/fiber/v2/middleware/logger\"\n\tfiberrecover \"github.com/gofiber/fiber/v2/middleware/recover\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\n\t\"github.com/mritd/logger\"\n)\n\ntype CommonResp struct {\n\tCode      int         `json:\"code\"`\n\tMessage   string      `json:\"message\"`\n\tData      interface{} `json:\"data,omitempty\"`\n\tTimestamp int64       `json:\"timestamp\"`\n}\n\ntype routerFunc struct {\n\tName   string\n\tWeight int\n\tFunc   func(router fiber.Router)\n}\n\ntype routeSlice []routerFunc\n\nfunc (r routeSlice) Len() int { return len(r) }\n\nfunc (r routeSlice) Less(i, j int) bool { return r[i].Weight > r[j].Weight }\n\nfunc (r routeSlice) Swap(i, j int) { r[i], r[j] = r[j], r[i] }\n\nvar routerOnce sync.Once\nvar routes routeSlice\n\n// register new route with key name\n// key name is used to eliminate duplicate routes\n// key name not case sensitive\nfunc registerRoute(name string, f func(router fiber.Router)) {\n\tregisterRouteWithWeight(name, 50, f)\n}\n\n// register new route with weight\nfunc registerRouteWithWeight(name string, weight int, f func(router fiber.Router)) {\n\tif weight > 100 || weight < 0 {\n\t\tlogger.Fatalf(\"route [%s] weight must be >= 0 and <=100\", name)\n\t}\n\n\tfor _, r := range routes {\n\t\tif strings.EqualFold(name, r.Name) {\n\t\t\tlogger.Fatalf(\"route [%s] already registered\", r.Name)\n\t\t}\n\t}\n\n\troutes = append(routes, routerFunc{\n\t\tName:   name,\n\t\tWeight: weight,\n\t\tFunc:   f,\n\t})\n}\n\nfunc routerSetup(router fiber.Router) {\n\trouterOnce.Do(func() {\n\t\trouter.Use(fiberlogger.New(fiberlogger.Config{\n\t\t\tFormat:     \"${time}     INFO    ${ip} -> [${status}] ${method} ${latency} ${route} => ${url} ${body}\\n\",\n\t\t\tTimeFormat: \"2006-01-02 15:04:05\",\n\t\t\tOutput:     os.Stdout,\n\t\t}))\n\t\trouter.Use(fiberrecover.New())\n\t\tsort.Sort(routes)\n\t\tfor _, r := range routes {\n\t\t\tr.Func(router)\n\t\t\tlogger.Infof(\"load route [%s] success...\", r.Name)\n\t\t}\n\t})\n}\n\n// for the fast return success result\nfunc success() CommonResp {\n\treturn CommonResp{\n\t\tCode:      200,\n\t\tMessage:   \"success\",\n\t\tTimestamp: time.Now().Unix(),\n\t}\n}\n\n// for the fast return failed result\nfunc failed(code int, message string, args ...interface{}) CommonResp {\n\treturn CommonResp{\n\t\tCode:      code,\n\t\tMessage:   fmt.Sprintf(message, args...),\n\t\tTimestamp: time.Now().Unix(),\n\t}\n}\n\n// for the fast return result with custom data\nfunc data(data interface{}) CommonResp {\n\treturn CommonResp{\n\t\tCode:      200,\n\t\tMessage:   \"success\",\n\t\tTimestamp: time.Now().Unix(),\n\t\tData:      data,\n\t}\n}\n"
        },
        {
          "name": "util.go",
          "type": "blob",
          "size": 0.818359375,
          "content": "package main\n\nimport (\n\t\"math/rand\"\n\t\"time\"\n)\n\nconst letterBytes = \"abcdefghijklmnopqrstuvwxyz\"\nconst (\n\tletterIdxBits = 6                    // 6 bits to represent a letter index\n\tletterIdxMask = 1<<letterIdxBits - 1 // All 1-bits, as many as letterIdxBits\n\tletterIdxMax  = 63 / letterIdxBits   // # of letter indices fitting in 63 bits\n)\n\nvar src = rand.NewSource(time.Now().UnixNano())\n\nfunc RandStringBytesMaskImprSrc(n int) string {\n\tb := make([]byte, n)\n\t// A src.Int63() generates 63 random bits, enough for letterIdxMax characters!\n\tfor i, cache, remain := n-1, src.Int63(), letterIdxMax; i >= 0; {\n\t\tif remain == 0 {\n\t\t\tcache, remain = src.Int63(), letterIdxMax\n\t\t}\n\t\tif idx := int(cache & letterIdxMask); idx < len(letterBytes) {\n\t\t\tb[i] = letterBytes[idx]\n\t\t\ti--\n\t\t}\n\t\tcache >>= letterIdxBits\n\t\tremain--\n\t}\n\treturn string(b)\n}\n"
        }
      ]
    }
  ]
}