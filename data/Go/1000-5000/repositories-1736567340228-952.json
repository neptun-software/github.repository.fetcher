{
  "metadata": {
    "timestamp": 1736567340228,
    "page": 952,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fireworq/fireworq",
      "stars": 2204,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1123046875,
          "content": "/.github/\n/dist/\n\n/junit_output.xml\n/profile.cov\n/coverage.html\n/coverage.xml\nstatus.tmp\n\ndocker-compose\n/fireworq\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4091796875,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n# Output\n\n_testmain.go\n\n/junit_output.xml\n/profile.cov\n/coverage.html\n/coverage.xml\nstatus.tmp\n\n*.exe\n*.test\n*.log\n\nassets.go\nmock_*.go\n\ndocker-compose\n\n/fireworq\n/AUTHORS\n/CREDITS\n/dist\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.236328125,
          "content": "INA Lintaro <tarao.gnn@gmail.com>\nSHIBAZAKI Yuki <shibayu36@gmail.com>\nFUSHII Yohei <hakobe@gmail.com>\nTSUBOUCHI Yuuki <yuki.tsubo@gmail.com>\nSHIBAHATA Tsugihito <fly.me.to.the.moon1204@gmail.com>\nMURATA Satoshi <rw.satoshi.murata@gmail.com>\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 1.875,
          "content": "<!-- DO NOT MODIFY : this file is automatically generated by script/genauthors/genauthors.go -->\n\n# Authors\n\nThis is the official list of Fireworq authors for copyright purposes.\n\n## Individual Persons\n\n|Name |E-mail  |GitHub|Commits |\n|:----|:-------|:-----|-------:|\n|INA Lintaro|<tarao.gnn@gmail.com>|[@tarao](https://github.com/tarao)|720|\n|itchyny|<itchyny@hatena.ne.jp>||75|\n|yigarashi|<yigarashi@hatena.ne.jp>||32|\n|SHIBAZAKI Yuki|<shibayu36@gmail.com>|[@shibayu36](https://github.com/shibayu36)|31|\n|FUSHII Yohei|<hakobe@gmail.com>|[@hakobe](https://github.com/hakobe)|28|\n|TSUBOUCHI Yuuki|<yuki.tsubo@gmail.com>|[@yuuki](https://github.com/yuuki)|25|\n|Tomohiro Nishimura|<tomohiro68@gmail.com>|[@Sixeight](https://github.com/Sixeight)|23|\n|SHIBAHATA Tsugihito|<fly.me.to.the.moon1204@gmail.com>||17|\n|Fumihiro Itoh|<fmhrit@gmail.com>|[@f110](https://github.com/f110)|5|\n|Windymelt|<windymelt@3qe.us>||5|\n|kanozec|<kanozec@gmail.com>||2|\n|IKEDA Sho|<suicaicoca@gmail.com>|[@ikesyo](https://github.com/ikesyo)|2|\n|Thomas Broadley|<buriedunderbooks@hotmail.com>|[@tbroadley](https://github.com/tbroadley)|1|\n|Sai Warang|<cyprusad@gmail.com>||1|\n|Davor Kapsa|<davor.kapsa@gmail.com>|[@dvrkps](https://github.com/dvrkps)|1|\n|Edward Betts|<edward@4angle.com>|[@EdwardBetts](https://github.com/EdwardBetts)|1|\n|Elizabeth Paige Harper|<foxcapade@gmail.com>||1|\n|MURATA Satoshi|<rw.satoshi.murata@gmail.com>||1|\n|uchan-nos|<uchan0@gmail.com>||1|\n|yuuji.yaginuma|<yuuji.yaginuma@gmail.com>|[@y-yagi](https://github.com/y-yagi)|1|\n\nItems are automatically added by `git shortlog -sne`.  Please add rules to [`.mailmap`](.mailmap) to keep it canonical (see \"MAPPING AUTHORS\" section of `git help shortlog` for the notation of the rules).  E-mail field must match your public E-mail setting on your GitHub account if you wish to show your GitHub account name.\n\n## Organizations\n\n- [Hatena Co., Ltd.](http://hatenacorp.jp/)\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.9052734375,
          "content": "Contributing to Fireworq\n========================\n\nWe appreciate your pull requests!\n\n## Using docker\n\nRun the following commands and you will get the whole system working\nall at once.  Make sure you have [Docker][] and [Docker Compose][]\ninstalled before running these commands.\n\n```\n$ git clone https://github.com/fireworq/fireworq\n$ cd fireworq\n$ script/docker/compose up\n```\n\nWhen Fireworq gets ready, it will listen on `localhost:8080` (on the\nhost machine).  Specify `FIREWORQ_PORT` environment variable if you\nwant Fireworq to listen on a different port.\n\nEach time you run `script/docker/compose up`, a Fireworq instance with\nthe latest code will come up.  Note that sometimes you need\n`script/docker/compose clean` for example when you add a new\ndependency.\n\nTo run automated tests, the following command does it for you.\n\n```\n$ script/ci/test/docker-run\n```\n\nThis command always clean up all the docker images used for the tests.\nIf you are going to run the tests many times in your iteration, you\nshould consider manual compilation and testing explained in the next\nsection.\n\n## Manual compilation and testing\n\nFirst make sure that you have\n\n- [Golang][] environment,\n- [MySQL][] installed and prepared [as described in the manual setup guide][manual-setup-mysql].\n\nNow you can start developing with the following commands.\n\n- `make build` to build a Fireworq binary.\n- <code>FIREWORQ_MYSQL_DSN=<var>dsn</var> make test</code> to run tests.\n- <code>FIREWORQ_MYSQL_DSN=<var>dsn</var> ./fireworq</code> to run a Fireworq instance locally.\n\n## Coding conventions\n\n- Use [`golint`][golint], [`go vet`][govet] and [`gofmt -s`][gofmt]\n- `make clean lint` does these for you\n\n## Release flow\n\n1. Make sure that the current version in [`version.go`](./version.go)\n   matches with what is expected to be released.\n\n   - Follow [semver][] convention to decide the new version.\n   - Do `gobump minor -w` or `gobump major -w` to increment.\n   - Push the change in `version.go` and wait for @fireworq-bot to update `AUTHORS.md`.\n\n2. Tag the new version on the master branch.\n\n   - `git checkout master && git pull`\n   - <code>git tag v<var>X</var>.<var>Y</var>.<var>Z</var></code>\n   - `git push --tags`\n\n3. [A new release][releases] and [a new Docker image](https://hub.docker.com/r/fireworq/fireworq) are published by [Release workflow](https://github.com/fireworq/fireworq/actions?query=workflow%3ARelease).\n\n4. Increment the patch version to state that the current source tree is not released yet.\n\n   - `gobump patch -w`\n\n[section-start]: ./README.md#start\n[manual-setup-mysql]: ./doc/production.md#manual-setup-mysql\n\n[releases]: https://github.com/fireworq/fireworq/releases\n\n[Docker]: https://www.docker.com/\n[Docker Compose]: https://docs.docker.com/compose/\n[Golang]: https://golang.org/\n[MySQL]: https://www.mysql.com/\n[golint]: https://github.com/golang/lint\n[govet]: https://golang.org/cmd/vet/\n[gofmt]: https://golang.org/cmd/gofmt/\n[semver]: https://semver.org/\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3369140625,
          "content": "FROM golang:1.17.8 as builder\nENV APP_DIR /go/src/github.com/fireworq/fireworq\n\nWORKDIR ${APP_DIR}\nCOPY . .\nRUN make release PRERELEASE=\n\nFROM alpine:3.15.4\nENV APP_DIR /go/src/github.com/fireworq/fireworq\n\nCOPY --from=builder ${APP_DIR}/fireworq /usr/local/bin/\nENV FIREWORQ_BIND 0.0.0.0:8080\nEXPOSE 8080\nENTRYPOINT [\"/usr/local/bin/fireworq\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.8837890625,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work.\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.658203125,
          "content": "BIN=fireworq\nSHELL=/bin/bash\nBUILD_OUTPUT=.\nTEST_OUTPUT=.\nGO=go\nGOINSTALL=GOOS= GOARCH= ${GO} install\nPRERELEASE=SNAPSHOT\nBUILD=$$(git describe --always)\nTEST_ARGS=-parallel 1 -timeout 60s\n\n.PHONY: all\nall: build\n\n.PHONY: test\ntest: build test_deps\n\t{ ${GO} test ${TEST_ARGS} -race -v ./...; echo $$? > status.tmp; } | tee >(go-junit-report > ${TEST_OUTPUT}/junit_output.xml)\n\texit $$(cat status.tmp)\n\n.PHONY: cover\ncover: build test_deps\n\tTEST_ARGS=\"${TEST_ARGS}\" script/cover ${TEST_OUTPUT}/profile.cov\n\t${GO} tool cover -html=${TEST_OUTPUT}/profile.cov -o ${TEST_OUTPUT}/coverage.html\n\tgocover-cobertura < ${TEST_OUTPUT}/profile.cov > ${TEST_OUTPUT}/coverage.xml\n\n.PHONY: build\nbuild: generate\n\t${GO} build -race -ldflags \"-X main.Build=$(BUILD) -X main.Prerelease=DEBUG\" -o ${BUILD_OUTPUT}/$(BIN) .\n\tGOOS= GOARCH= ${GO} run script/gendoc/gendoc.go config > doc/config.md\n\n.PHONY: release\nrelease: clean credits generate\n\tCGO_ENABLED=0 ${GO} build -ldflags \"-X main.Build=$(BUILD) -X main.Prerelease=$(PRERELEASE)\" -o ${BUILD_OUTPUT}/$(BIN) .\n\n.PHONY: credits\ncredits:\n\tGOOS= GOARCH= ${GO} run script/genauthors/genauthors.go > AUTHORS\n\t${GOINSTALL} github.com/Songmu/gocredits/cmd/gocredits@v0.2.0\n\t${GO} mod download\n\tgocredits -w .\n\n.PHONY: generate\ngenerate: generate_deps\n\ttouch AUTHORS\n\ttouch CREDITS\n\tGOOS= GOARCH= ${GO} generate -x ./...\n\n.PHONY: generate_deps\ngenerate_deps:\n\t${GOINSTALL} github.com/jessevdk/go-assets-builder@v0.0.0-20130903091706-b8483521738f\n\t${GOINSTALL} github.com/golang/mock/mockgen@v1.5.0\n\n.PHONY: test_deps\ntest_deps:\n\t${GOINSTALL} github.com/jpillora/go-tcp-proxy/cmd/tcp-proxy@v1.0.2\n\t${GOINSTALL} github.com/jstemmer/go-junit-report@v0.9.1\n\t${GOINSTALL} golang.org/x/tools/cmd/cover@v0.0.0-20200831203904-5a2aa26beb65\n\t${GOINSTALL} github.com/wadey/gocovmerge@v0.0.0-20160331181800-b5bfa59ec0ad\n\t${GOINSTALL} github.com/t-yuki/gocover-cobertura@v0.0.0-20180217150009-aaee18c8195c\n\n.PHONY: lint\nlint: generate\n\t${GOINSTALL} golang.org/x/lint/golint@v0.0.0-20200302205851-738671d3881b\n\t${GO} vet ./...\n\tfor d in $$(${GO} list ./...); do \\\n\t  golint --set_exit_status \"$$d\" || exit $$? ; \\\n\tdone\n\t${GOINSTALL} github.com/kyoh86/scopelint@v0.2.0\n\tscopelint --set-exit-status --no-test ./...\n\tfor f in $$(${GO} list -f '{{$$p := .}}{{range $$f := .GoFiles}}{{$$p.Dir}}/{{$$f}} {{end}} {{range $$f := .TestGoFiles}}{{$$p.Dir}}/{{$$f}} {{end}}' ./... | xargs); do \\\n\t  [ $$(basename \"$$f\") = 'assets.go' ] && continue ; \\\n\t  test -z \"$$(gofmt -d -s \"$$f\" | tee /dev/stderr)\" || exit $$? ; \\\n\tdone\n\n.PHONY: clean\nclean:\n\tfind . -name assets.go -delete -or -name 'mock_*.go' -delete\n\trm -f assets.go\n\trm -f junit_output.xml profile.cov coverage.html coverage.xml\n\trm -f $(BIN)\n\t${GO} clean\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.0146484375,
          "content": "![Fireworq][logo]\n=================\n\n[![Build Status](https://github.com/fireworq/fireworq/workflows/CI/badge.svg)](https://github.com/fireworq/fireworq/actions)\n[![Coverage Status](https://coveralls.io/repos/github/fireworq/fireworq/badge.svg?branch=master)](https://coveralls.io/github/fireworq/fireworq?branch=master)\n[![Docker Hub](https://img.shields.io/badge/docker%20build-ready-blue)](https://hub.docker.com/r/fireworq/fireworq)\n[![MySQL Support](https://img.shields.io/badge/MySQL%20support-%3E%3D5.7-yellowgreen)](https://github.com/fireworq/fireworq/blob/master/script/docker/mysql/Dockerfile)\n\nFireworq is a lightweight, high-performance job queue system with the\nfollowing abilities.\n\n- **Portability** - It is available from ANY programming language\n  which can talk HTTP.  It works with a single binary without external\n  dependencies.\n\n- **Reliability** - It is built on top of RDBMS (MySQL), so that jobs\n  won't be lost even if the job queue process dies.  You can apply an\n  ordinary replication scheme to the underlying DB for the reliability\n  of the DB itself.\n\n- **Availability** - It supports primary/backup nodes.  Only one node\n  becomes primary simultaneously and the others become backup nodes.\n  A backup node will automatically be active when the primary node\n  dies.\n\n- **Scalability** - It always works with a single dispatcher per queue\n  which can concurrently dispatch jobs to workers via HTTP.\n  Scalability of workers themselves should be maintained by a load\n  balancer in the ordinary way.  This means that adding a worker will\n  never harm performance of grabbing jobs from a queue.\n\n- **Flexibility** - It supports the following features.\n\n  - **Multiple queues** - You can define multiple queues and use them\n    in different ways: for example, one for a low priority queue for a\n    limited number of high latency workers and another one for a high\n    priority queue for a large number of low latency workers.\n  - **Delayed jobs** - You can specify a delay for each job, which\n    will make the job dispatched after the delay.\n  - **Job retrying** - You can specify the maximum number of retries\n    for each job.\n\n- **Maintainability** - It can be managed on [a Web UI][Fireworqonsole].  It also [provides metrics suitable for monitoring][section-monitoring].\n\n----\n\n- [Getting Started][section-start]\n- [Using the API][section-api]\n- [Inspecting Running Queues][section-inspecting]\n- [Configuration][section-configuration]\n- [Other Topics][section-other]\n  - [Full List of API Endpoints][page-api]\n  - [Full List of Configurations][page-configuration]\n  - [Make It Production-Ready][page-production-ready]\n  - [Developer Guide][page-developing]\n- [License][section-license]\n\n## <a name=\"start\">Getting Started</a>\n\nRun the following commands and you will get the whole system working\nall at once.  Make sure you have [Docker][] installed before running\nthese commands.\n\n```\n$ docker run -p 8080:8080 fireworq/fireworq --driver=in-memory --queue-default=default\n```\n\nPressing `Ctrl+C` will gracefully shut it down.\n\nNote that `in-memory` driver is not for production use.  It is\nintended to be used for just playing with Fireworq without a storage\nmiddleware.\n\n## <a name=\"api\">Using the API</a>\n\n### Preparing a Worker\n\nFirst of all, you need a Web server which does an actual work for a\njob.  We call it a 'worker'.\n\nA worker must accept a `POST` request with a body, which is typically\na JSON value, and respond a JSON result.  For example, if you have a\nworker at `localhost:3000`, it must handle a request like the\nfollowing.\n\n```http\nPOST /work HTTP/1.1\nHost: localhost:3000\n\n{\"id\":12345}\n```\n\n```http\nHTTP/1.1 200 OK\n\n{\"status\":\"success\",\"message\":\"It's working!\"}\n```\n\nThe response JSON must have `status` field, which describes whether\nthe job  succeeded.  It must be one of the following values.\n\n|Value                |Meaning                                 |\n|:--------------------|:---------------------------------------|\n|`\"success\"`          |The job succeeded.                      |\n|`\"failure\"`          |The job failed and it can be retried.   |\n|`\"permanent-failure\"`|The job failed and it cannot be retried.|\n\nAny other values are regarded as `\"failure\"`.  The HTTP status code is\nalways ignored.\n\n### Enqueuing a Job to Fireworq\n\nLet's make the job asynchronous using Fireworq.  All you have to do is\nto make a `POST` request to Fireworq with a worker URL and a job\npayload.  If you have [a Fireworq docker instance][section-start] and\nyour docker host IP (from the container's point of view) is\n`172.17.0.1`, then requesting something like the following will\nenqueue exactly the same job in the previous example.\n\n```\n$ curl -XPOST -d '{\"url\":\"http://172.17.0.1:3000/work\",\"payload\":{\"id\":12345}}' http://localhost:8080/job/foo\n```\n\nWhen Fireworq gets ready to grab this job, it will `POST` the\n`payload` to the `url`.  When the job is completed on the worker, the\nlog output of Fireworq should say something like this.\n\n```\nfireworq_1  | {\"level\":\"info\",\"time\":1507128673123,\"tag\":\"fireworq.dev\",\"action\":\"complete\",\"queue\":\"default\",\"category\":\"foo\",\"id\":2,\"status\":\"completed\",\"created_at\":1507128673025,\"elapsed\":98,\"url\":\"http://172.17.0.1:3000/work\",\"payload\":\"{\\\"id\\\":12345}\",\"next_try\":1507128673025,\"retry_count\":0,\"retry_delay\":0,\"fail_count\":0,\"timeout\":0,\"message\":\"It's working!\"}\n```\n\n### Further Reading\n\nSee [the full list of API endpoints][page-api] for the details of the\nAPI.\n\n## <a name=\"inspecting\">Inspecting Running Queues</a>\n\nThere is only a set of API endpoints provided by Fireworq itself to\ninspect running queues.  They are useful for machine monitoring but\nnot intended for human use.\n\nInstead, use [Fireworqonsole][], a powerful Web UI which enables\nmonitoring stats of queues, inspecting running or failed jobs and\ndefining queues and routings.\n\n> ![Web UI](https://github.com/fireworq/fireworqonsole/raw/master/doc/images/console.png \"Web UI\")\n\n## <a name=\"config\">Configuration</a>\n\nYou can configure Fireworq by providing environment variables on\nstarting a daemon.  There are many of them but we only describe\nimportant ones here.  See [the full list][page-configuration] for the\nother variables.\n\n- `FIREWORQ_MYSQL_DSN`\n\n  Specifies a data source name for the job queue and the repository\n  database in a form\n  <code><var>user</var>:<var>password</var>@tcp(<var>mysql_host</var>:<var>mysql_port</var>)/<var>database</var>?<var>options</var></code>.\n  This is for a manual setup and is mandatory for it.\n\n- `FIREWORQ_QUEUE_DEFAULT`\n\n  Specifies the name of a default queue.  A job whose `category` is\n  not defined via the [routing API][api-put-routing] will be delivered\n  to this queue.  If no default queue name is specified, pushing a job\n  with an unknown category will fail.\n\n  If you already have a queue with the specified name in the job queue\n  database, that one is used.  Or otherwise a new queue is created\n  automatically.\n\n- `FIREWORQ_QUEUE_DEFAULT_POLLING_INTERVAL`\n\n  Specifies the default interval, in milliseconds, at which Fireworq\n  checks the arrival of new jobs, used when `polling_interval` in the\n  [queue API][api-put-queue] is omitted.  The default value is `200`.\n\n- `FIREWORQ_QUEUE_DEFAULT_MAX_WORKERS`\n\n  Specifies the default maximum number of jobs that are processed\n  simultaneously in a queue, used when `max_workers` in the\n  [queue API][api-put-queue] is omitted.  The default value is `20`.\n\n## <a name=\"other\">Other Topics</a>\n\n- [Full List of API Endpoints][page-api]\n  - [Queue Management][section-api-queue]\n  - [Routing Management][section-api-routing]\n  - [Job Management][section-api-job]\n- [Full List of Configurations][page-configuration]\n- [Make It Production-Ready][page-production-ready]\n  - [Using a Release Build (Manual setup)][section-manual-setup]\n  - [Preparing a Backup Instance][section-backup]\n  - [Graceful Shutdown/Restart][section-graceful-restart]\n  - [Logging][section-logging]\n  - [Monitoring][section-monitoring]\n- [Developer Guide][page-developing]\n\n## <a name=\"license\">License</a>\n\n- Copyright (c) 2017 The [Fireworq Authors][authors]. All rights reserved.\n- Fireworq is licensed under the Apache License, Version 2.0. See\n  [LICENSE][license] for the full license text.\n\n[section-start]: #start\n[section-configuration]: #config\n[section-api]: #api\n[section-inspecting]: #inspecting\n[section-other]: #other\n[section-license]: #license\n\n[page-configuration]: ./doc/config.md\n[page-api]: ./doc/api.md\n[section-api-queue]: ./doc/api.md#api-queue\n[section-api-routing]: ./doc/api.md#api-routing\n[section-api-job]: ./doc/api.md#api-job\n[page-production-ready]: ./doc/production.md\n[section-manual-setup]: ./doc/production.md#manual-setup\n[section-backup]: ./doc/production.md#backup\n[section-graceful-restart]: ./doc/production.md#graceful-restart\n[section-logging]: ./doc/production.md#logging\n[section-monitoring]: ./doc/production.md#monitoring\n[page-developing]: ./CONTRIBUTING.md\n\n[api-put-queue]: ./doc/api.md#api-put-queue\n[api-put-routing]: ./doc/api.md#api-put-routing\n\n[logo]: ./doc/images/logo.png \"Fireworq\"\n[license]: ./LICENSE\n[authors]: ./AUTHORS.md\n\n[Docker]: https://www.docker.com/\n[Fireworqonsole]: https://github.com/fireworq/fireworqonsole\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "dep.go",
          "type": "blob",
          "size": 0.05859375,
          "content": "package main\n\nimport (\n\t_ \"github.com/jessevdk/go-assets\"\n)\n"
        },
        {
          "name": "dispatcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.5732421875,
          "content": "module github.com/fireworq/fireworq\n\ngo 1.17\n\nrequire (\n\tgithub.com/fukata/golang-stats-api-handler v1.0.0\n\tgithub.com/go-sql-driver/mysql v1.6.0\n\tgithub.com/golang/mock v1.6.0\n\tgithub.com/gorilla/mux v1.8.1\n\tgithub.com/jessevdk/go-assets v0.0.0-20160921144138-4f4301a06e15\n\tgithub.com/lestrrat-go/server-starter v0.0.0-20210101230921-50cd1900b5bc\n\tgithub.com/paulbellamy/ratecounter v0.2.0\n\tgithub.com/phayes/freeport v0.0.0-20220201140144-74d24b5ae9f5\n\tgithub.com/rs/zerolog v1.26.1\n\tgolang.org/x/time v0.0.0-20220411224347-583f2d630306\n)\n\nrequire github.com/rs/xid v1.3.0 // indirect\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.5,
          "content": "github.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/fukata/golang-stats-api-handler v1.0.0 h1:N6M25vhs1yAvwGBpFY6oBmMOZeJdcWnvA+wej8pKeko=\ngithub.com/fukata/golang-stats-api-handler v1.0.0/go.mod h1:1sIi4/rHq6s/ednWMZqTmRq3765qTUSs/c3xF6lj8J8=\ngithub.com/go-sql-driver/mysql v1.6.0 h1:BCTh4TKNUYmOmMUcQ3IipzF5prigylS7XXjEkfCHuOE=\ngithub.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/golang/mock v1.6.0 h1:ErTB+efbowRARo13NNdxyJji2egdxLGQhRaY+DUumQc=\ngithub.com/golang/mock v1.6.0/go.mod h1:p6yTPP+5HYm5mzsMV8JkE6ZKdX+/wYM6Hr+LicevLPs=\ngithub.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=\ngithub.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=\ngithub.com/jessevdk/go-assets v0.0.0-20160921144138-4f4301a06e15 h1:cW/amwGEJK5MSKntPXRjX4dxs/nGxGT8gXKIsKFmHGc=\ngithub.com/jessevdk/go-assets v0.0.0-20160921144138-4f4301a06e15/go.mod h1:Fdm/oWRW+CH8PRbLntksCNtmcCBximKPkVQYvmMl80k=\ngithub.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=\ngithub.com/lestrrat-go/server-starter v0.0.0-20210101230921-50cd1900b5bc h1:W0UVLQhE9AF0AzvKF6yTAfSrxsy8uEjo9/3ovhbiZuQ=\ngithub.com/lestrrat-go/server-starter v0.0.0-20210101230921-50cd1900b5bc/go.mod h1:qQfAJDHk9SgqMVIm+tnwzcUqjRVAEDWY++dN1PXV3vw=\ngithub.com/paulbellamy/ratecounter v0.2.0 h1:2L/RhJq+HA8gBQImDXtLPrDXK5qAj6ozWVK/zFXVJGs=\ngithub.com/paulbellamy/ratecounter v0.2.0/go.mod h1:Hfx1hDpSGoqxkVVpBi/IlYD7kChlfo5C6hzIHwPqfFE=\ngithub.com/phayes/freeport v0.0.0-20220201140144-74d24b5ae9f5 h1:Ii+DKncOVM8Cu1Hc+ETb5K+23HdAMvESYE3ZJ5b5cMI=\ngithub.com/phayes/freeport v0.0.0-20220201140144-74d24b5ae9f5/go.mod h1:iIss55rKnNBTvrwdmkUpLnDpZoAHvWaiq5+iMmen4AE=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/rs/xid v1.3.0 h1:6NjYksEUlhurdVehpc7S7dk6DAmcKv8V9gG0FsVN2U4=\ngithub.com/rs/xid v1.3.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=\ngithub.com/rs/zerolog v1.26.1 h1:/ihwxqH+4z8UxyI70wM1z9yCvkWcfz/a3mj48k/Zngc=\ngithub.com/rs/zerolog v1.26.1/go.mod h1:/wSSJWX7lVrsOwlbyTRSOJvqRlc+WjWlfes+CiJ+tmc=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngithub.com/yuin/goldmark v1.4.0/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20211215165025-cf75a172585e/go.mod h1:P+XmwS30IXTQdn5tA2iutPOUgjI07+tq3H3K9MVA1s8=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.0.0-20210805182204-aaa1db679c0d/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210809222454-d867a43fc93e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/time v0.0.0-20220411224347-583f2d630306 h1:+gHMid33q6pen7kv9xvT+JRinntgeXO2AeZVd0AWD3w=\ngolang.org/x/time v0.0.0-20220411224347-583f2d630306/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.1/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.7/go.mod h1:LGqMHiF4EqQNHR1JncWGqT5BVaXmza+X+BDGol+dOxo=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n"
        },
        {
          "name": "jobqueue",
          "type": "tree",
          "content": null
        },
        {
          "name": "log",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 5.9892578125,
          "content": "//go:generate go-assets-builder -p main -o assets.go LICENSE AUTHORS CREDITS\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/signal\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"syscall\"\n\n\t\"github.com/fireworq/fireworq/config\"\n\t\"github.com/fireworq/fireworq/dispatcher\"\n\t\"github.com/fireworq/fireworq/jobqueue/logger\"\n\tlogwriter \"github.com/fireworq/fireworq/log\"\n\trepository \"github.com/fireworq/fireworq/repository/factory\"\n\t\"github.com/fireworq/fireworq/service\"\n\t\"github.com/fireworq/fireworq/web\"\n\n\t\"github.com/rs/zerolog\"\n\t\"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n\tout := os.Stderr\n\n\tinitDefaultConfig()\n\n\targs, err := parseCmdArgs(os.Args[1:])\n\tif err != nil {\n\t\tos.Exit(1)\n\t}\n\n\tif args.showVersion {\n\t\tfmt.Fprintln(out, versionString(\" \"))\n\t\tos.Exit(0)\n\t}\n\n\tif args.showLicense {\n\t\tfmt.Println(licenseText)\n\t\tos.Exit(0)\n\t}\n\n\tif args.showCredits {\n\t\tfmt.Println(creditsText)\n\t\tos.Exit(0)\n\t}\n\n\tfor _, k := range config.Keys() {\n\t\tconfig.Set(k, *args.settings[k])\n\t}\n\n\taccessLog := initLogging(syscall.SIGUSR1)\n\tinitProcess()\n\tdispatcher.Init()\n\tweb.Init()\n\n\tstartServer(accessLog)\n}\n\ntype cmdArgs struct {\n\tshowVersion bool\n\tshowLicense bool\n\tshowCredits bool\n\tsettings    map[string]*string\n}\n\nfunc parseCmdArgs(args []string) (*cmdArgs, error) {\n\tout := os.Stderr\n\n\tparsed := &cmdArgs{\n\t\tsettings: make(map[string]*string),\n\t}\n\n\tflags := flag.NewFlagSet(Name, flag.ContinueOnError)\n\tflags.SetOutput(out)\n\tflags.Usage = func() {\n\t\tfmt.Fprint(out, helpText)\n\t\tfor _, item := range config.Descriptions() {\n\t\t\tfmt.Println(\"\")\n\t\t\tfmt.Fprintf(out, item.Describe(2, 80-4))\n\t\t}\n\t}\n\tflags.BoolVar(&parsed.showVersion, \"v\", false, \"\")\n\tflags.BoolVar(&parsed.showVersion, \"version\", false, \"\")\n\tflags.BoolVar(&parsed.showLicense, \"license\", false, \"\")\n\tflags.BoolVar(&parsed.showCredits, \"credits\", false, \"\")\n\n\tfor _, k := range config.Keys() {\n\t\tp := new(string)\n\t\tparsed.settings[k] = p\n\t\tname := strings.Replace(k, \"_\", \"-\", -1)\n\t\tflags.StringVar(p, name, config.Get(k), \"\")\n\t}\n\n\tif err := flags.Parse(args); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn parsed, nil\n}\n\nfunc initDefaultConfig() {\n\tconfig.SetDefault(\"dispatch_user_agent\", versionString(\"/\"))\n\tconfig.SetDefault(\"dispatch_keep_alive\", config.Get(\"keep_alive\"))\n\tif len(os.Getenv(\"DEBUG\")) > 0 {\n\t\tconfig.SetDefault(\"error_log_level\", \"debug\")\n\t\tconfig.SetDefault(\"queue_log_level\", \"debug\")\n\t} else {\n\t\tconfig.SetDefault(\"error_log_level\", \"info\")\n\t\tconfig.SetDefault(\"queue_log_level\", \"info\")\n\t}\n}\n\nfunc initProcess() {\n\tpid := os.Getpid()\n\tlog.Info().Msgf(\"PID: %d\", pid)\n\n\tname := config.Get(\"pid\")\n\tif name == \"\" {\n\t\treturn\n\t}\n\n\tif err := os.MkdirAll(filepath.Dir(name), 0755); err != nil {\n\t\tlog.Error().Msg(err.Error())\n\t\treturn\n\t}\n\n\tfile, err := os.OpenFile(name, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)\n\tif err != nil {\n\t\tlog.Panic().Msg(err.Error())\n\t}\n\tdefer file.Close()\n\n\tif _, err := fmt.Fprintf(file, \"%d\\n\", pid); err != nil {\n\t\tlog.Error().Msg(err.Error())\n\t}\n}\n\nfunc initLogging(sig syscall.Signal) (accessLog logwriter.Writer) {\n\t// Access log\n\n\taccessLog = logwriter.New(os.Stdout)\n\n\taccessLogFile := config.Get(\"access_log\")\n\tif len(accessLogFile) > 0 {\n\t\tvar err error\n\t\taccessLog, err = logwriter.OpenFile(accessLogFile)\n\t\tif err != nil {\n\t\t\tlog.Error().Msg(err.Error())\n\t\t}\n\t}\n\n\t// Error log\n\n\terrorLog := logwriter.New(zerolog.ConsoleWriter{Out: os.Stderr})\n\n\terrorLevel := zerolog.InfoLevel\n\terrorLevel = logwriter.ParseLevel(config.Get(\"error_log_level\"), errorLevel)\n\tzerolog.SetGlobalLevel(errorLevel)\n\n\terrorLogFile := config.Get(\"error_log\")\n\tif len(errorLogFile) > 0 {\n\t\tvar err error\n\t\terrorLog, err = logwriter.OpenFile(errorLogFile)\n\t\tif err != nil {\n\t\t\tlog.Error().Msg(err.Error())\n\t\t}\n\t}\n\tlog.Logger = log.Output(errorLog)\n\n\t// Queue log\n\tlogger.Init()\n\n\t// Reopening log files (for logrotate)\n\n\tsigc := make(chan os.Signal, 1)\n\tsignal.Notify(sigc, sig)\n\tgo func() {\n\t\tfor {\n\t\t\ts := <-sigc\n\t\t\tlog.Info().Msgf(\"Received signal %q; reopen log files\", s)\n\t\t\tif err := accessLog.Reopen(); err != nil {\n\t\t\t\tlog.Error().Msg(err.Error())\n\t\t\t}\n\t\t\tif err := logger.Writer.Reopen(); err != nil {\n\t\t\t\tlog.Error().Msg(err.Error())\n\t\t\t}\n\t\t\tif err := errorLog.Reopen(); err != nil {\n\t\t\t\tlog.Error().Msg(err.Error())\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn\n}\n\nfunc startServer(accessLogWriter io.Writer) {\n\tlog.Info().Msg(\"Starting a job dispatcher...\")\n\n\trepos := repository.NewRepositories()\n\tservice := service.NewService(repos)\n\n\tapp := &web.Application{\n\t\tAccessLogWriter:   accessLogWriter,\n\t\tVersion:           versionString(\" \"),\n\t\tService:           service,\n\t\tQueueRepository:   repos.Queue,\n\t\tRoutingRepository: repos.Routing,\n\t}\n\tapp.Serve()\n}\n\nfunc versionString(sep string) string {\n\tvar prerelease string\n\tif Prerelease != \"\" {\n\t\tprerelease = \"-\" + Prerelease\n\t}\n\n\tvar build string\n\tif Build != \"\" {\n\t\tbuild = \"+\" + Build\n\t}\n\n\treturn strings.Join([]string{Name, sep, Version, prerelease, build}, \"\")\n}\n\nfunc mustAssetString(path string) string {\n\tf, err := Assets.Open(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tbuf, err := ioutil.ReadAll(f)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn string(buf)\n}\n\nvar (\n\tlicenseText = mustAssetString(\"/LICENSE\") + `\n   Copyright (c) 2017 The Fireworq Authors. All rights reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n` + mustAssetString(\"/AUTHORS\")\n\tcreditsText = mustAssetString(\"/CREDITS\")\n\n\thelpText = `Usage: fireworq [options]\n\n  A lightweight, high performance job queue system.\n\nOptions:\n\n  --version, -v  Show the version string.\n  --license      Show the license text.\n  --credits      Show the library dependencies and their licenses.\n  --help, -h     Show the help message.\n`\n)\n"
        },
        {
          "name": "main_non_unix_test.go",
          "type": "blob",
          "size": 0.08984375,
          "content": "//go:build !linux && !darwin\n\npackage main\n\nfunc initTestMain() {}\n\nfunc cleanTestMain() {}\n"
        },
        {
          "name": "main_test.go",
          "type": "blob",
          "size": 6.126953125,
          "content": "package main\n\nimport (\n\t\"io/ioutil\"\n\t\"os\"\n\t\"regexp\"\n\t\"strings\"\n\t\"syscall\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/fireworq/fireworq/config\"\n\t\"github.com/fireworq/fireworq/test\"\n)\n\nfunc TestMain(m *testing.M) {\n\tinitTestMain()\n\tdefer cleanTestMain()\n\n\tstatus, err := test.Run(m)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tos.Exit(status)\n}\n\nfunc TestParseCmdArgs(t *testing.T) {\n\t{\n\t\t_, err := parseCmdArgs([]string{\"--hoge\"})\n\t\tif err == nil {\n\t\t\tt.Error(\"Should not accept unknown option\")\n\t\t}\n\t}\n\t{\n\t\targs, err := parseCmdArgs([]string{\"-v\"})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\t\tif !args.showVersion {\n\t\t\tt.Error(\"-v must show version\")\n\t\t}\n\t}\n\t{\n\t\targs, err := parseCmdArgs([]string{\"--version\"})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\t\tif !args.showVersion {\n\t\t\tt.Error(\"--version must show version\")\n\t\t}\n\t}\n\t{\n\t\targs, err := parseCmdArgs([]string{\"--credits\"})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\t\tif !args.showCredits {\n\t\t\tt.Error(\"--credits must show credits\")\n\t\t}\n\t}\n\t{\n\t\targs, err := parseCmdArgs([]string{\"--pid=fireworq.pid\", \"--bind\", \"0.0.0.0:80\", \"--error-log-level\", \"warn\"})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\t\tif args.showVersion {\n\t\t\tt.Error(\"Version must not be shown by default\")\n\t\t}\n\t\tif args.showCredits {\n\t\t\tt.Error(\"Credits must not be shown by default\")\n\t\t}\n\t\tif v := *args.settings[\"pid\"]; v != \"fireworq.pid\" {\n\t\t\tt.Errorf(\"Wrong configuration value for 'pid': %s\", v)\n\t\t}\n\t\tif v := *args.settings[\"bind\"]; v != \"0.0.0.0:80\" {\n\t\t\tt.Errorf(\"Wrong configuration value for 'bind': %s\", v)\n\t\t}\n\t\tif v := *args.settings[\"error_log_level\"]; v != \"warn\" {\n\t\t\tt.Errorf(\"Wrong configuration value for 'error_log_level': %s\", v)\n\t\t}\n\t}\n}\n\nfunc TestInitDefaultConfig(t *testing.T) {\n\tinitDefaultConfig()\n\n\tif config.GetDefault(\"dispatch_user_agent\") == \"\" {\n\t\tt.Error(\"No default value for dispatch_user_agent\")\n\t}\n\tif config.GetDefault(\"dispatch_keep_alive\") == \"\" {\n\t\tt.Error(\"No default value for dispatch_keep_alive\")\n\t}\n\tif config.GetDefault(\"error_log_level\") == \"\" {\n\t\tt.Error(\"No default value for error_log_level\")\n\t}\n\tif config.GetDefault(\"queue_log_level\") == \"\" {\n\t\tt.Error(\"No default value for queue_log_level\")\n\t}\n}\n\nvar pidRegexp = regexp.MustCompile(\"^[0-9]+$\")\n\nfunc TestInitProcess(t *testing.T) {\n\tfname := \"test.pid\"\n\tconfig.Locally(\"pid\", fname, func() {\n\t\tinitProcess()\n\t\tdefer os.Remove(fname)\n\n\t\tpid, err := ioutil.ReadFile(fname)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\t\tif !pidRegexp.MatchString(strings.TrimSpace(string(pid))) {\n\t\t\tt.Errorf(\"Wrong format of PID: %s\", string(pid))\n\t\t}\n\t})\n}\n\nvar versionRegexp = regexp.MustCompile(\"^(?:0|[1-9][0-9]*)(?:[.](?:0|[1-9][0-9]*)){2}(?:[-][0-9A-Za-z-]+(?:[.][0-9A-Za-z-]+)*)?(?:[+][0-9A-Za-z-]+(?:[.][0-9A-Za-z-]+)*)?$\")\n\nfunc TestVersionString(t *testing.T) {\n\tprerelease := Prerelease\n\tbuild := Build\n\tdefer func() {\n\t\tPrerelease = prerelease\n\t\tBuild = build\n\t}()\n\n\t{\n\t\tv := strings.SplitN(versionString(\" \"), \" \", 2)\n\t\tif len(v) < 2 {\n\t\t\tt.Error(\"The version string and the application name must be separated\")\n\t\t}\n\t\tif v[0] != \"Fireworq\" {\n\t\t\tt.Errorf(\"Wrong application name: %s\", v[0])\n\t\t}\n\t\tif !versionRegexp.MatchString(v[1]) {\n\t\t\tt.Errorf(\"Wrong version string format: %s\", v[1])\n\t\t}\n\t}\n\n\t{\n\t\tPrerelease = \"TEST\"\n\t\tBuild = \"\"\n\n\t\tv := strings.SplitN(versionString(\" \"), \" \", 2)\n\t\tif len(v) < 2 {\n\t\t\tt.Error(\"The version string and the application name must be separated\")\n\t\t}\n\t\tif v[0] != \"Fireworq\" {\n\t\t\tt.Errorf(\"Wrong application name: %s\", v[0])\n\t\t}\n\t\tif !versionRegexp.MatchString(v[1]) {\n\t\t\tt.Errorf(\"Wrong version string format: %s\", v[1])\n\t\t}\n\t}\n\n\t{\n\t\tPrerelease = \"\"\n\t\tBuild = \"deadbeafcafe\"\n\n\t\tv := strings.SplitN(versionString(\" \"), \" \", 2)\n\t\tif len(v) < 2 {\n\t\t\tt.Error(\"The version string and the application name must be separated\")\n\t\t}\n\t\tif v[0] != \"Fireworq\" {\n\t\t\tt.Errorf(\"Wrong application name: %s\", v[0])\n\t\t}\n\t\tif !versionRegexp.MatchString(v[1]) {\n\t\t\tt.Errorf(\"Wrong version string format: %s\", v[1])\n\t\t}\n\t}\n\n\t{\n\t\tPrerelease = \"TEST\"\n\t\tBuild = \"deadbeafcafe\"\n\n\t\tv := strings.SplitN(versionString(\" \"), \" \", 2)\n\t\tif len(v) < 2 {\n\t\t\tt.Error(\"The version string and the application name must be separated\")\n\t\t}\n\t\tif v[0] != \"Fireworq\" {\n\t\t\tt.Errorf(\"Wrong application name: %s\", v[0])\n\t\t}\n\t\tif !versionRegexp.MatchString(v[1]) {\n\t\t\tt.Errorf(\"Wrong version string format: %s\", v[1])\n\t\t}\n\t}\n\n\t{\n\t\tv := strings.SplitN(versionString(\"/\"), \"/\", 2)\n\t\tif len(v) < 2 {\n\t\t\tt.Error(\"The version string and the application name must be separated\")\n\t\t}\n\t\tif v[0] != \"Fireworq\" {\n\t\t\tt.Errorf(\"Wrong application name: %s\", v[0])\n\t\t}\n\t\tif !versionRegexp.MatchString(v[1]) {\n\t\t\tt.Errorf(\"Wrong version string format: %s\", v[1])\n\t\t}\n\t}\n\n\t{\n\t\tPrerelease = \"TEST\"\n\t\tBuild = \"\"\n\n\t\tv := strings.SplitN(versionString(\"/\"), \"/\", 2)\n\t\tif len(v) < 2 {\n\t\t\tt.Error(\"The version string and the application name must be separated\")\n\t\t}\n\t\tif v[0] != \"Fireworq\" {\n\t\t\tt.Errorf(\"Wrong application name: %s\", v[0])\n\t\t}\n\t\tif !versionRegexp.MatchString(v[1]) {\n\t\t\tt.Errorf(\"Wrong version string format: %s\", v[1])\n\t\t}\n\t}\n\n\t{\n\t\tPrerelease = \"\"\n\t\tBuild = \"deadbeafcafe\"\n\n\t\tv := strings.SplitN(versionString(\"/\"), \"/\", 2)\n\t\tif len(v) < 2 {\n\t\t\tt.Error(\"The version string and the application name must be separated\")\n\t\t}\n\t\tif v[0] != \"Fireworq\" {\n\t\t\tt.Errorf(\"Wrong application name: %s\", v[0])\n\t\t}\n\t\tif !versionRegexp.MatchString(v[1]) {\n\t\t\tt.Errorf(\"Wrong version string format: %s\", v[1])\n\t\t}\n\t}\n\n\t{\n\t\tPrerelease = \"TEST\"\n\t\tBuild = \"deadbeafcafe\"\n\n\t\tv := strings.SplitN(versionString(\"/\"), \"/\", 2)\n\t\tif len(v) < 2 {\n\t\t\tt.Error(\"The version string and the application name must be separated\")\n\t\t}\n\t\tif v[0] != \"Fireworq\" {\n\t\t\tt.Errorf(\"Wrong application name: %s\", v[0])\n\t\t}\n\t\tif !versionRegexp.MatchString(v[1]) {\n\t\t\tt.Errorf(\"Wrong version string format: %s\", v[1])\n\t\t}\n\t}\n}\n\nfunc TestStartServer(t *testing.T) {\n\tconfig.Locally(\"driver\", \"in-memory\", func() {\n\t\tconfig.Locally(\"bind\", \"0.0.0.0:0\", func() {\n\t\t\tconfig.Locally(\"shutdown_timeout\", \"1\", func() {\n\t\t\t\tstopped := make(chan struct{})\n\t\t\t\tgo func() {\n\t\t\t\t\tstartServer(os.Stdout)\n\t\t\t\t\tstopped <- struct{}{}\n\t\t\t\t}()\n\t\t\t\ttime.Sleep(1 * time.Second)\n\n\t\t\t\tp, err := os.FindProcess(os.Getpid())\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Error(err)\n\t\t\t\t}\n\t\t\t\tif err := p.Signal(syscall.SIGTERM); err != nil {\n\t\t\t\t\tt.Error(err)\n\t\t\t\t}\n\n\t\t\t\t<-stopped\n\t\t\t})\n\t\t})\n\t})\n}\n"
        },
        {
          "name": "main_unix_test.go",
          "type": "blob",
          "size": 2.85546875,
          "content": "//go:build linux || darwin\n\npackage main\n\nimport (\n\t\"io/ioutil\"\n\t\"os\"\n\t\"strings\"\n\t\"syscall\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/rs/zerolog/log\"\n\n\t\"github.com/fireworq/fireworq/config\"\n\tlogwriter \"github.com/fireworq/fireworq/log\"\n)\n\nvar (\n\ttestAccessLog = \"test-access.log\"\n\ttestErrorLog  = \"test-error.log\"\n\ttestSig       = syscall.SIGUSR2\n\n\ttestAccessLogWriter logwriter.Writer\n)\n\nfunc initTestMain() {\n\tconfig.Locally(\"access_log\", testAccessLog, func() {\n\t\tconfig.Locally(\"error_log\", testErrorLog, func() {\n\t\t\ttestAccessLogWriter = initLogging(testSig)\n\t\t})\n\t})\n}\n\nfunc cleanTestMain() {\n\tos.Remove(testAccessLog)\n\tos.Remove(testErrorLog)\n}\n\nfunc TestInitLogging(t *testing.T) {\n\tconfig.Locally(\"access_log\", testAccessLog, func() {\n\t\tconfig.Locally(\"error_log\", testErrorLog, func() {\n\t\t\tdefer func() {\n\t\t\t\tos.Remove(testAccessLog)\n\t\t\t\tos.Remove(testErrorLog)\n\t\t\t}()\n\n\t\t\ttestAccessLogWriter.Write([]byte(\"Some access log\\n\"))\n\t\t\tlog.Warn().Msg(\"Some warning\")\n\n\t\t\tvar accessLogContent string\n\n\t\t\t{\n\t\t\t\tbuf, err := ioutil.ReadFile(testAccessLog)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Error(err)\n\t\t\t\t}\n\t\t\t\taccessLogContent = string(buf)\n\t\t\t\tif accessLogContent == \"\" {\n\t\t\t\t\tt.Error(\"A log entry must be written to a file\")\n\t\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t\tbuf, err := ioutil.ReadFile(testErrorLog)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Error(err)\n\t\t\t\t}\n\t\t\t\tif string(buf) == \"\" {\n\t\t\t\t\tt.Error(\"A log entry must be written to a file\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmovedAccessLog := \"test-moved-access.log\"\n\t\t\tmovedErrorLog := \"test-moved-error.log\"\n\t\t\tos.Rename(testAccessLog, movedAccessLog)\n\t\t\tos.Rename(testErrorLog, movedErrorLog)\n\t\t\tdefer func() {\n\t\t\t\tos.Remove(movedAccessLog)\n\t\t\t\tos.Remove(movedErrorLog)\n\t\t\t}()\n\n\t\t\tp, err := os.FindProcess(os.Getpid())\n\t\t\tif err != nil {\n\t\t\t\tt.Error(err)\n\t\t\t}\n\t\t\tif err := p.Signal(testSig); err != nil {\n\t\t\t\tt.Error(err)\n\t\t\t}\n\t\t\ttime.Sleep(300 * time.Millisecond)\n\n\t\t\totherAccessContent := \"Some other access log\\n\"\n\t\t\ttestAccessLogWriter.Write([]byte(otherAccessContent))\n\t\t\totherErrorContent := \"Some other warning\"\n\t\t\tlog.Warn().Msg(otherErrorContent)\n\n\t\t\t{\n\t\t\t\tbuf, err := ioutil.ReadFile(testAccessLog)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Error(err)\n\t\t\t\t}\n\t\t\t\tif !strings.Contains(string(buf), otherAccessContent) {\n\t\t\t\t\tt.Error(\"A log entry must be written to a file\")\n\t\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t\tbuf, err := ioutil.ReadFile(testErrorLog)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Error(err)\n\t\t\t\t}\n\t\t\t\tif !strings.Contains(string(buf), otherErrorContent) {\n\t\t\t\t\tt.Error(\"A log entry must be written to a file\")\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tbuf, err := ioutil.ReadFile(movedAccessLog)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Error(err)\n\t\t\t\t}\n\t\t\t\tif string(buf) != accessLogContent {\n\t\t\t\t\tt.Error(\"Moved log file must be kept untouched\")\n\t\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t\tbuf, err := ioutil.ReadFile(movedErrorLog)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Error(err)\n\t\t\t\t}\n\t\t\t\tif strings.Contains(string(buf), otherErrorContent) {\n\t\t\t\t\tt.Error(\"Moved log file must be kept untouched\")\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t})\n}\n"
        },
        {
          "name": "model",
          "type": "tree",
          "content": null
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.3984375,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:base\"\n  ],\n  \"postUpdateOptions\": [\"gomodTidy\"],\n  \"ignoreDeps\": [\"mysql\"],\n  \"packageRules\": [\n    {\n      \"updateTypes\": [\"patch\", \"pin\", \"digest\"],\n      \"automerge\": true\n    },\n    {\n      \"datasources\": [\"go\"],\n      \"packageNames\": [\"golang.org/x/tools\"],\n      \"extends\": [\"schedule:monthly\"]\n    }\n  ]\n}\n"
        },
        {
          "name": "repository",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "service",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.go",
          "type": "blob",
          "size": 0.3115234375,
          "content": "package main\n\nconst (\n\t// Name is the name of the application.\n\tName = \"Fireworq\"\n\n\t// Version is the version of the application.\n\tVersion = \"1.5.1\"\n)\n\nvar (\n\t// Prerelease is the pre-release tag of the version of the application.\n\tPrerelease string\n\n\t// Build is the build metadata of the application.\n\tBuild string\n)\n"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}