{
  "metadata": {
    "timestamp": 1736567005385,
    "page": 585,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rs/curlie",
      "stars": 2912,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0302734375,
          "content": ".snapcraft/snapcraft.cfg\ndist/\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 0.86328125,
          "content": "project_name: curlie\nbuilds:\n  -\n    binary: curlie\n    env:\n      - CGO_ENABLED=0\n    goos:\n      - darwin\n      - linux\n      - freebsd\n      - windows\n    goarch:\n      - amd64\n      - arm\n      - arm64\n    ignore:\n      -\n        goos: windows\n        goarch: arm64\nrelease:\n  name_template: \"{{.ProjectName}}-v{{.Version}}\"\nbrews:\n  -\n    tap:\n      owner: rs\n      name: homebrew-tap\n    commit_author:\n      name: Olivier Poitrey\n      email: rs@rhapsodyk.net\n    homepage: https://github.com/rs/curlie\n    description: The power of curl, the ease of use of httpie.\nnfpms:\n  -\n    maintainer: Olivier Poitrey <rs@rhapsodyk.net>\n    description: curle is a frontend to curl that offers the ease of use of httpie without having to compromise curl features and performance.\n    license: MIT\n    formats:\n      - deb\n      - rpm\n    dependencies:\n      - curl\n    bindir: /usr/bin\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2018 Olivier Poitrey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.05859375,
          "content": "# Curlie\n\nIf you like the interface of [HTTPie](https://httpie.org) but miss the features of [curl](https://curl.haxx.se), curlie is what you are searching for. Curlie is a frontend to `curl` that adds the ease of use of `httpie`, without compromising on features and performance. All `curl` options are exposed with syntax sugar and output formatting inspired from `httpie`.\n\n## Install\n\nUsing [homebrew](https://brew.sh/):\n\n```sh\nbrew install curlie\n```\n\nUsing [webi](https://webinstall.dev/curlie/):\n\n```sh\n# macOS / Linux\ncurl -sS https://webinstall.dev/curlie | bash\n```\n\n```pwsh\n# Windows\ncurl.exe -A \"MS\" https://webinstall.dev/curlie | powershell\n```\n\nUsing [eget](https://github.com/zyedidia/eget):\n\n```sh\n# Ubuntu/Debian\neget rs/curlie -a deb --to=curlie.deb\nsudo dpkg -i curlie.deb\n```\n\nUsing [macports](https://www.macports.org):\n\n```sh\nsudo port install curlie\n```\n\nUsing [pkg](https://man.freebsd.org/pkg/8):\n\n```sh\npkg install curlie\n```\n\nUsing [go](https://golang.org/):\n\n```sh\ngo install github.com/rs/curlie@latest\n```\n\nUsing [scoop](https://scoop.sh/):\n\n```sh\nscoop install curlie\n```\n\nOr download a [binary package](https://github.com/rs/curlie/releases/latest).\n\n## Usage\n\nSynopsis:\n\n    $ curlie [CURL_OPTIONS...] [METHOD] URL [ITEM [ITEM]]\n\nSimple GET:\n\n![](doc/get.png)\n\nCustom method, headers and JSON data:\n\n![](doc/put.png)\n\nWhen running interactively, `curlie` provides pretty-printed output for json. To force pretty-printed output, pass `--pretty`.\n\n## Build\n\nBuild with [goreleaser](https://goreleaser.com) to test that all platforms compile properly.\n\n```sh\ngoreleaser --snapshot --skip-publish --rm-dist\n```\n\nOr with `go build` for your current platform only.\n\n```sh\ngo build .\n```\n\n## Differences with httpie\n\n* Like `curl` but unlike `httpie`, headers are written on `stderr` instead of `stdout`.\n* Output is not buffered, all the formatting is done on the fly so you can easily debug streamed data.\n* Use the `--curl` option to print executed curl command.\n\n## License\n\nAll source code is licensed under the [MIT License](https://raw.github.com/rs/curlie/master/LICENSE).\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "remote_theme: rs/gh-readme\n"
        },
        {
          "name": "args",
          "type": "tree",
          "content": null
        },
        {
          "name": "console_other.go",
          "type": "blob",
          "size": 0.0927734375,
          "content": "// +build !windows\n\npackage main\n\nfunc setupWindowsConsole(stdoutFd int) error {\n\treturn nil\n}\n"
        },
        {
          "name": "console_windows.go",
          "type": "blob",
          "size": 0.2978515625,
          "content": "package main\n\nimport \"golang.org/x/sys/windows\"\n\nfunc setupWindowsConsole(stdoutFd int) error {\n\tconsole := windows.Handle(stdoutFd)\n\tvar originalMode uint32\n\twindows.GetConsoleMode(console, &originalMode)\n\treturn windows.SetConsoleMode(console, originalMode|windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING)\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "formatter",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.1025390625,
          "content": "module github.com/rs/curlie\n\nrequire (\n\tgolang.org/x/crypto v0.17.0\n\tgolang.org/x/sys v0.15.0\n)\n\ngo 1.13\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.6962890625,
          "content": "github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.17.0 h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=\ngolang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.15.0 h1:h48lPFYpsTvQJZF4EKyI4aLHaev3CxivZmv7yZig9pc=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.15.0 h1:y/Oo/a/q3IXu26lQgl04j/gjuBDOBlx7X6Om1j2CPW4=\ngolang.org/x/term v0.15.0/go.mod h1:BDl952bC7+uMoWR75FIrCDx79TPU9oHkTZ9yRbYOrX0=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 4.234375,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"syscall\"\n\n\t\"github.com/rs/curlie/args\"\n\t\"github.com/rs/curlie/formatter\"\n\t\"golang.org/x/crypto/ssh/terminal\"\n)\n\nvar (\n\tcommit  = \"0000000\"\n\tversion = \"v0.0.0-LOCAL\"\n\tdate    = \"0000-00-00T00:00:00Z\"\n)\n\nfunc main() {\n\t// handle `curlie version` separately from `curl --version`\n\tif len(os.Args) == 2 && os.Args[1] == \"version\" {\n\t\tfmt.Printf(\"curlie %s (%s)\\n\", version, date)\n\t\tos.Exit(0)\n\t\treturn\n\t}\n\n\t// *nixes use 0, 1, 2\n\t// Windows uses random numbers\n\tstdinFd := int(os.Stdin.Fd())\n\tstdoutFd := int(os.Stdout.Fd())\n\tstderrFd := int(os.Stderr.Fd())\n\n\t// Setting Console mode on windows to allow color output, By default scheme is DefaultColorScheme\n\t// But in case of any error, it is set to ColorScheme{}.\n\tscheme := formatter.DefaultColorScheme\n\tif err := setupWindowsConsole(stdoutFd); err != nil {\n\t\tscheme = formatter.ColorScheme{}\n\t}\n\tvar stdout io.Writer = os.Stdout\n\tvar stderr io.Writer = os.Stderr\n\tvar stdin io.Reader = os.Stdin\n\tinput := &bytes.Buffer{}\n\tvar inputWriter io.Writer = input\n\topts := args.Parse(os.Args)\n\n\tverbose := opts.Has(\"verbose\") || opts.Has(\"v\")\n\tquiet := opts.Has(\"silent\") || opts.Has(\"s\")\n\tpretty := opts.Remove(\"pretty\")\n\topts.Remove(\"i\")\n\n\tif len(opts) == 0 {\n\t\t// Show help if no args\n\t\topts = append(opts, \"-h\", \"all\")\n\t} else {\n\t\t// Remove progress bar.\n\t\topts = append(opts, \"-s\", \"-S\")\n\t}\n\n\t// Change default method based on binary name.\n\tswitch os.Args[0] {\n\tcase \"post\", \"put\", \"delete\":\n\t\tif !opts.Has(\"X\") && !opts.Has(\"request\") {\n\t\t\topts = append(opts, \"-X\", os.Args[0])\n\t\t}\n\tcase \"head\":\n\t\tif !opts.Has(\"I\") && !opts.Has(\"head\") {\n\t\t\topts = append(opts, \"-I\")\n\t\t}\n\t}\n\n\tif opts.Has(\"h\") || opts.Has(\"help\") {\n\t\tstdout = &formatter.HelpAdapter{Out: stdout, CmdName: os.Args[0]}\n\t} else {\n\t\tisForm := opts.Has(\"F\")\n\t\tif pretty || terminal.IsTerminal(stdoutFd) {\n\t\t\tinputWriter = &formatter.JSON{\n\t\t\t\tOut:    inputWriter,\n\t\t\t\tScheme: scheme,\n\t\t\t}\n\t\t\t// Format/colorize JSON output if stdout is to the terminal.\n\t\t\tstdout = &formatter.JSON{\n\t\t\t\tOut:    stdout,\n\t\t\t\tScheme: scheme,\n\t\t\t}\n\n\t\t\t// Filter out binary output.\n\t\t\tstdout = &formatter.BinaryFilter{Out: stdout}\n\t\t}\n\t\tif pretty || terminal.IsTerminal(stderrFd) {\n\t\t\t// If stderr is not redirected, output headers.\n\t\t\tif !quiet {\n\t\t\t\topts = append(opts, \"-v\")\n\t\t\t}\n\n\t\t\tstderr = &formatter.HeaderColorizer{\n\t\t\t\tOut:    stderr,\n\t\t\t\tScheme: scheme,\n\t\t\t}\n\n\t\t}\n\t\thasInput := true\n\t\tif data := opts.Val(\"d\"); data != \"\" {\n\t\t\t// If data is provided via -d, read it from there for the verbose mode.\n\t\t\t// XXX handle the @filename case.\n\t\t\tinputWriter.Write([]byte(data))\n\t\t} else if !terminal.IsTerminal(stdinFd) {\n\t\t\t// If something is piped in to the command, tell curl to use it as input.\n\t\t\topts = append(opts, \"-d@-\")\n\t\t\t// Tee the stdin to the buffer used show the posted data in verbose mode.\n\t\t\tstdin = io.TeeReader(stdin, inputWriter)\n\t\t} else {\n\t\t\thasInput = false\n\t\t}\n\t\tif hasInput {\n\t\t\tif !headerSupplied(opts, \"Content-Type\") && !isForm {\n\t\t\t\topts = append(opts, \"-H\", \"Content-Type: application/json\")\n\t\t\t}\n\t\t}\n\t}\n\tif !headerSupplied(opts, \"Accept\") {\n\t\topts = append(opts, \"-H\", \"Accept: application/json, */*\")\n\t}\n\tif opts.Has(\"curl\") {\n\t\topts.Remove(\"curl\")\n\t\tfmt.Print(\"curl\")\n\t\tfor _, opt := range opts {\n\t\t\tif strings.IndexByte(opt, ' ') != -1 {\n\t\t\t\tfmt.Printf(\" %q\", opt)\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\" %s\", opt)\n\t\t\t}\n\t\t}\n\t\tfmt.Println()\n\t\treturn\n\t}\n\tcmd := exec.Command(\"curl\", opts...)\n\tcmd.Stdin = stdin\n\tcmd.Stdout = stdout\n\tcmd.Stderr = &formatter.HeaderCleaner{\n\t\tOut:     stderr,\n\t\tVerbose: verbose,\n\t\tPost:    input,\n\t}\n\tif (opts.Has(\"I\") || opts.Has(\"head\")) && terminal.IsTerminal(stdoutFd) {\n\t\tcmd.Stdout = ioutil.Discard\n\t}\n\tstatus := 0\n\tif err := cmd.Run(); err != nil {\n\t\tswitch err := err.(type) {\n\t\tcase *exec.ExitError:\n\t\t\tif err.Stderr != nil {\n\t\t\t\tfmt.Fprint(stderr, string(err.Stderr))\n\t\t\t}\n\t\t\tif ws, ok := err.ProcessState.Sys().(syscall.WaitStatus); ok {\n\t\t\t\tstatus = ws.ExitStatus()\n\t\t\t}\n\t\tdefault:\n\t\t\tfmt.Fprint(stderr, err)\n\t\t}\n\t}\n\tos.Exit(status)\n}\n\nfunc headerSupplied(opts args.Opts, header string) bool {\n\theader = strings.ToLower(header)\n\tfor _, h := range append(opts.Vals(\"H\"), opts.Vals(\"header\")...) {\n\t\tif strings.HasPrefix(strings.ToLower(h), header+\":\") {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"
        }
      ]
    }
  ]
}