{
  "timestamp": 1736621517024,
  "repository": "kenso312/nestjs-v10-webpack-boilerplate",
  "path": ".eslintrc.js",
  "category": "lint",
  "stars": 123,
  "content": "const { join } = require('path');\n\n/** @type {import('eslint').Linter.Config} */\nconst jsRules = {\n  extends: [\n    // ESLint recommended rules\n    'eslint:recommended',\n    // Airbnb JavaScript style\n    'airbnb-base',\n    // Auto sort objects, imports, types, enums, etc.\n    'plugin:perfectionist/recommended-natural',\n    // IMPORTANT: add this to the last of the extends to prevent conflict of ESLint rules\n    'plugin:prettier/recommended',\n  ],\n  plugins: [\n    'unused-imports', // Auto remove unused imports\n  ],\n  rules: {\n    // Not enforce using 'this' in a class function since some function can be a pure function\n    'class-methods-use-this': 'off',\n\n    // Conflict with alias path\n    'import/extensions': 'off',\n\n    // Conflict with perfectionist sorting\n    'import/order': 'off',\n\n    // Controversial rules: https://github.com/airbnb/javascript/issues/1365\n    'import/prefer-default-export': 'off',\n\n    // Set the whitelist to allow reassign props since some case we must to reassign props\n    'no-param-reassign': [\n      'error',\n      {\n        ignorePropertyModificationsFor: ['_opts'],\n        props: true,\n      },\n    ],\n\n    // Allow underscore for special purpose\n    'no-underscore-dangle': 'off',\n\n    // Example config of unused-imports plugin\n    'unused-imports/no-unused-imports': 'warn',\n\n    // Example config of unused-imports plugin\n    'unused-imports/no-unused-vars': [\n      'warn',\n      {\n        args: 'after-used',\n        argsIgnorePattern: '^_',\n        vars: 'all',\n        varsIgnorePattern: '^_',\n      },\n    ],\n  },\n};\n\n/** @type {import('eslint').Linter.Config} */\nmodule.exports = {\n  env: {\n    jest: true,\n    node: true,\n  },\n  overrides: [\n    {\n      ...jsRules,\n      files: ['*.js'],\n    },\n    {\n      extends: [\n        ...jsRules.extends,\n        // Airbnb JavaScript style for TypeScript\n        'airbnb-typescript/base',\n        // ESLint recommended rules for TypeScript\n        'plugin:@typescript-eslint/recommended',\n        // IMPORTANT: add this to the last of the extends to prevent conflict of ESLint rules\n        'plugin:prettier/recommended',\n      ],\n      files: ['*.ts'],\n      parser: '@typescript-eslint/parser',\n      parserOptions: {\n        project: join(__dirname, 'tsconfig.json'),\n        sourceType: 'module',\n      },\n      plugins: [...jsRules.plugins],\n      rules: {\n        ...jsRules.rules,\n\n        // Better readability\n        '@typescript-eslint/consistent-type-imports': [\n          'warn',\n          {\n            disallowTypeAnnotations: false,\n          },\n        ],\n\n        // NestJS default rules\n        '@typescript-eslint/explicit-function-return-type': 'off',\n\n        // NestJS default rules\n        '@typescript-eslint/explicit-module-boundary-types': 'off',\n\n        // NestJS default rules\n        '@typescript-eslint/interface-name-prefix': 'off',\n\n        // Varialbes / Types naming rules\n        '@typescript-eslint/naming-convention': [\n          'error',\n          /**\n           * Enforce that all variables, functions and properties follow are camelCase or PascalCase\n           */\n          {\n            filter: {\n              match: false,\n              regex: '^npm_',\n            },\n            format: ['camelCase', 'PascalCase', 'UPPER_CASE'],\n            leadingUnderscore: 'allow',\n            selector: 'variableLike',\n          },\n          /**\n           * Enforce that boolean variables are prefixed with 'is' or 'has'\n           * when added prefix, ESLint will trim the prefix and check the format, so PascalCase needed\n           */\n          {\n            format: ['PascalCase'],\n            leadingUnderscore: 'allow',\n            prefix: ['is', 'has'],\n            selector: 'variable',\n            types: ['boolean'],\n          },\n          /**\n           * Enforce that class, interface, type and enum follows are PascalCase\n           */\n          { format: ['PascalCase'], selector: 'typeLike' },\n          /**\n           * Enforce that interface names do not begin with an I\n           */\n          {\n            custom: {\n              match: false,\n              regex: '^I[A-Z]',\n            },\n            format: ['PascalCase'],\n            selector: 'interface',\n          },\n          { format: ['UPPER_CASE'], selector: 'enumMember' },\n        ],\n\n        // For declaring props interface\n        '@typescript-eslint/no-empty-interface': 'off',\n\n        // NestJS default rules\n        '@typescript-eslint/no-explicit-any': 'off',\n\n        // Conflict with unused-imports plugin\n        '@typescript-eslint/no-unused-vars': 'off',\n      },\n    },\n    {\n      extends: ['plugin:jsonc/recommended-with-jsonc'],\n      files: ['*.json', '*.json5', '*.jsonc'],\n      parser: 'jsonc-eslint-parser',\n      rules: {\n        // Sort all the array values\n        'jsonc/sort-array-values': [\n          'warn',\n          {\n            order: { type: 'asc' },\n            pathPattern: '.',\n          },\n        ],\n        // Sort all the JSON key\n        'jsonc/sort-keys': [\n          'warn',\n          {\n            order: { type: 'asc' },\n            pathPattern: '.',\n          },\n        ],\n      },\n    },\n    {\n      extends: ['plugin:yml/standard'],\n      files: ['*.yaml', '*.yml'],\n      parser: 'yaml-eslint-parser',\n      parserOptions: {\n        defaultYAMLVersion: '1.2',\n      },\n      rules: {\n        // Sync with Prettier config\n        'yml/quotes': [\n          'error',\n          {\n            prefer: 'single',\n          },\n        ],\n      },\n    },\n    {\n      extends: ['plugin:markdown/recommended'],\n      files: ['*.md'],\n      processor: 'markdown/markdown',\n    },\n    {\n      files: ['**/*.md/*.js'],\n      rules: {\n        // Some example may have uninstalled import\n        'import/no-unresolved': 'off',\n      },\n    },\n  ],\n  root: true,\n};\n"
}