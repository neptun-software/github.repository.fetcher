{
  "timestamp": 1736621518621,
  "repository": "jjangga0214/ts-yarn-lerna-boilerplate",
  "path": ".eslintrc.js",
  "category": "lint",
  "stars": 61,
  "content": "const common = {\n  env: {\n    node: true,\n    es6: true,\n    'jest/globals': true,\n  },\n  plugins: ['prettier', 'jest', 'markdown'],\n  extends: [\n    'airbnb-base',\n    'plugin:jest/all',\n    'plugin:markdown/recommended', // REF: https://github.com/eslint/eslint-plugin-markdown/blob/main/lib/index.js\n    'prettier',\n  ],\n  rules: {\n    'prettier/prettier': 'error',\n    'jest/no-disabled-tests': 'warn',\n    'jest/no-focused-tests': 'error',\n    'jest/no-identical-title': 'error',\n    'jest/prefer-to-have-length': 'warn',\n    'jest/valid-expect': 'error',\n    'jest/expect-expect': 'off',\n    'jest/prefer-expect-assertions': 'off',\n    'jest/no-test-return-statement': 'off',\n    'import/prefer-default-export': 'off',\n    'import/extensions': 'off',\n    'no-console': 'off',\n    'no-iterator': 'off',\n    'no-restricted-syntax': 'off',\n    'no-await-in-loop': 'off',\n    'consistent-return': 'off',\n    'no-shadow': 'off',\n    'no-unused-vars': 'off',\n  },\n}\n\nmodule.exports = {\n  // ...common,\n  root: true,\n  overrides: [\n    {\n      /*\n      eslint-plugin-markdown only finds javascript code block snippet.\n      For specific spec, refer to https://github.com/eslint/eslint-plugin-markdown\n      */\n      ...common,\n      files: ['**/*.js'],\n    },\n    {\n      /*\n      eslint-plugin-markdown only finds javascript code block snippet.\n      For specific spec, refer to https://github.com/eslint/eslint-plugin-markdown\n      */\n      files: ['**/*.md'],\n      processor: 'markdown/markdown',\n    },\n    {\n      ...common,\n      // In eslint-plugin-markdown v2, configuration for fenced code blocks is separate from the\n      // containing Markdown file. Each code block has a virtual filename\n      // appended to the Markdown file's path.\n      files: ['**/*.md/*.js'],\n      // Configuration for fenced code blocks goes with the override for\n      // the code block's virtual filename, for example:\n      parserOptions: {\n        ecmaFeatures: {\n          impliedStrict: true,\n        },\n      },\n      rules: {\n        ...common.rules,\n        'import/no-unresolved': 'off',\n        'import/no-extraneous-dependencies': 'off',\n      },\n    },\n    {\n      ...common,\n      files: ['**/*.ts'],\n      parser: '@typescript-eslint/parser',\n      parserOptions: {\n        project: './tsconfig.json', // REF: https://www.npmjs.com/package/eslint-config-airbnb-typescript\n      },\n      env: common.env,\n      plugins: [...common.plugins, '@typescript-eslint'],\n      extends: [\n        ...common.extends,\n        'airbnb-typescript/base', // \"base\" does not include tsx rules. REF: https://www.npmjs.com/package/eslint-config-airbnb-typescript\n        'plugin:@typescript-eslint/recommended',\n        'plugin:import/errors',\n        'plugin:import/warnings',\n        'plugin:import/typescript',\n        'prettier', // Let prettier have high priority\n      ],\n      rules: {\n        ...common.rules,\n        '@typescript-eslint/explicit-function-return-type': 'off',\n        '@typescript-eslint/explicit-module-boundary-types': 'off',\n      },\n      settings: {\n        'import/resolver': {\n          typescript: {},\n        },\n      },\n    },\n  ],\n}\n"
}