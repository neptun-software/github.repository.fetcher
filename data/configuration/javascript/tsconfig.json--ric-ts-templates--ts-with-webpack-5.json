{
  "timestamp": 1736620527858,
  "repository": "ric-ts-templates/ts-with-webpack-5",
  "path": "tsconfig.json",
  "category": "javascript",
  "stars": 0,
  "content": "{\n  \"include\": [\n    \"_src\", // <<<Pour imposer que ce seront UNIQUEMENT les .ts, .d.ts et .js(si allowJs), de toute l'arbo. ./_src/ \n            //    qui interviendront dans le processus de compil. et transpilation. Syntaxe équivalente à la syntaxe : _src/**/*\n  ], //REM.: par défaut \"node_modules\" N'est PAS inclus dans ce processus <<<<<<<<<<\n\n  \n  \"compilerOptions\": {\n\n    \"target\": \"es2022\" //Désormais tous les navigateurs modernes supportent ES6+ ! Donc pas de prise de tête inutile avec \"ES5\" !\n\n    // ,\"outDir\": \"./_dist\"\n\n    // ,\"watch\": true\n\n    // ,\"allowJs\": true  //INDISPENSABLE pour que les .js sources puissent être mis au format \n                      // target, dans le répertoire outDir.\n\n                       \n    //,\"moduleResolution\": \"Node\" //La Val. par défaut est \"Classic\" si l'option module vaut \"ES2015\" | \"AMD\" | \"System\".\n                                  //Sinon vaut     : \"Node\" \n    ,\"moduleResolution\": \"Node\" //<<< NÉCESSAIRE en effet, si target haut dessus de \"es5\", comme ici.\n\n    //,\"traceResolution\": true //Permet d'avoir (en console), le détail des tentatives de résolution de path \n                             //lorsque le compilo. cherche à trouver dans l'arborescence les \n                             //modules qu'on lui demande d'importer.\n                             //Rem.: les ambient modules n'apparaîtront pas dans la recherche.\n\n    \n    //,\"sourceMap\": true\n\n\n                       \n    //,\"module\": \"amd\"  //Val. par défaut : \"ES2015\"(\"es6\") si target supérieur à \"ES5\", sinon \"CommonJS\". \n                        //Par contre, INDISPENSABLE pour q'un modules Loader puisse exploiter\n                        //le code compilé.\n                        //Seules les valeurs \"amd\" ou \"umd\" seront fonctionnelles pour requirejs. \n                        // Pour SystemJS : ne fonctionnera PAS avec la valeur \"es6\".\n                        //                 mais Ok avec \"amd\", \"system\", \"umd\", commonJS\".\n\n    //,\"experimentalDecorators\": true\n\n  \n    //, \"declaration\": true //Génère au même niveau que chaque .js généré, un fichier .d.ts correspondant au dit .js .\n\n    \n    \n    //-----------------------------------------------------------------------------------------------------\n    //baseUrl: chemin relatif au présent dossier, et où le compilo. ira chercher les modules à importer \n    //pour lesquels on n'a pas précisé de chemin Relatif lors de la syntaxe d'import.\n    // ATTENTION ! Si précisé donc, la tentative de Résolution du chemin de ces fichiers à importer \n    //sans chemin relatif, COMMENCERA par une recherche avec le chemin relatif: baseUrl !!\n    //Sauf peut-être si paths (voir ci-dessous) est précisé.\n    ,\"baseUrl\": \"./\"\n\n    //paths, NÉCESSITE que baseUrl ci-dessus soit définie, et permet de spécifier plusieurs chemins de recherche plus pécis, \n    //et TOUS relatifs à baseUrl !! Attention ne concerne QUE la recherche pour les modules à importer \n    //pour lesquels on n'a pas précisé de chemin Relatif lors de la syntaxe d'import.\n    //ATTENTION : dés lors que paths est précisé, la recherche baseUrl combinée avec paths est PRIORITAIRE\n    // sur celle avec baseUrl toute seule !\n    //3 cas de figures plus précisément: \n    //  1- aucune clef de l'objet paths ne match avec le nom de l'import à chercher, \n    //    alors la recherche essaiera avec baseUrl toute seule.\n    //  2- au moins 1 clef de l'objet paths match avec le nom de l'import à chercher,\n    //     alors :\n    //            2a- si un élément du tableau associé match, eh bien ok le module est trouvé. Fin de la recherche.\n    //            2b- aucun élément du tableau associé ne match, alors la recherche avec paths est abandonnée\n    //                ET la recherche avec baseUrl toute seule est AUSSI abandonnée !! <<<<<<\n    ,\"paths\": { //<<Sous WEBPACK \"paths\" est pris en compte grâce au plugin installable en plus : tsconfig-paths-webpack-plugin\n      /*\n\n      //Clef \"*\" => signifie recherche à faire pour tout module à import non-relatif\n      //            Cette \"*\" représente tout simplement le nom du module à chercher <<<<\n      \"*\" :[ //Ici les \"**\" sont interdits, contrairement à l'option' \"include\"\n        \"*\",   //le nom du module à chercher tel quel, dans baseUrl donc.\n        \"GG/*\" //le nom du module à chercher précédé par le chemin baseUrl/GG/\n      ],\n\n      //Clef \"myFunctions\"\n      \"myFunctions\" :[   //Lorsqu'il n'y a pas d \"*\" dans la clef, comme ici,\n                         //alors utiliser \"*\" ci-dessous est sans effet.\n        //chemin relatif à baseUrl je rappelle.                          \n        //\"../../node_modules/tst_Lib/*\" //<<< sans effet !!\n        \"../../node_modules/tst_Lib/myFunctions\" //<<< OK\n      ],\n\n      //Clef \"nimp*\"\n      \"nimp*\" : [\"../../node_modules/tstt/nimporte\"],  //chemin relatif à baseUrl je rappelle.\n      \n      //Clef \"@*\"\n      \"@*\": [\"../../node_modules/*\"] //<<<Sinon \"@...\" n'est en effet pas considéré par le compilo., comme ayant un lien avec un dossier node_modules !\n\n     */\n\n      \"@MyCalculatorsLib*\": [\"_src/libs/Calculators*\"]\n    \n    }\n\n    //REMARQUE : si l'emplacement de modules a réussi à être résolu via 'baseUrl' ou 'baseUrl couplé à paths',\n    //           alors si ces modules sont des .ts, ils SERONT AUTOMATIQUEMENT COPIÉS (.js) dans le outDir,\n    //           en y conservant qui plus est, leur arborescence.\n    //-----------------------------------------------------------------------------------------------------\n    \n  }\n}"
}