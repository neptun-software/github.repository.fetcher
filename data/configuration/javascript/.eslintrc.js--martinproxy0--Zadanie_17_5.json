{
  "timestamp": 1736620478231,
  "repository": "martinproxy0/Zadanie_17_5",
  "path": ".eslintrc.js",
  "category": "javascript",
  "stars": 0,
  "content": "module.exports = {\n    \"env\": {\n      \"browser\": true,\n      \"node\": true,\n      \"es6\": true\n    },\n  \n    \"plugins\": [\"react\"],\n    \n    \"ecmaFeatures\": {\n      \"arrowFunctions\": true,\n      \"binaryLiterals\": true,\n      \"blockBindings\": true,\n      \"classes\": true,\n      \"defaultParams\": true,\n      \"destructuring\": true,\n      \"forOf\": true,\n      \"generators\": true,\n      \"modules\": true,\n      \"objectLiteralComputedProperties\": true,\n      \"objectLiteralDuplicateProperties\": true,\n      \"objectLiteralShorthandMethods\": true,\n      \"objectLiteralShorthandProperties\": true,\n      \"octalLiterals\": true,\n      \"regexUFlag\": true,\n      \"regexYFlag\": true,\n      \"spread\": true,\n      \"superInFunctions\": true,\n      \"templateStrings\": true,\n      \"unicodeCodePointEscapes\": true,\n      \"globalReturn\": true,\n      \"jsx\": true\n    },\n  \n    \"rules\": {\n      \n      // my rules\n      \"no-const-assign\": \"warn\",\n\n      //\n      //Possible Errors\n      //\n      // The following rules point out areas where you might have made mistakes.\n      //\n      \"comma-dangle\": 2, // disallow or enforce trailing commas\n      \"no-cond-assign\": 2, // disallow assignment in conditional expressions\n      \"no-console\": 1, // disallow use of console (off by default in the node environment)\n      \"no-constant-condition\": 2, // disallow use of constant expressions in conditions\n      \"no-control-regex\": 2, // disallow control characters in regular expressions\n      \"no-debugger\": 2, // disallow use of debugger\n      \"no-dupe-args\": 2, // disallow duplicate arguments in functions\n      \"no-dupe-keys\": 2, // disallow duplicate keys when creating object literals\n      \"no-duplicate-case\": 2, // disallow a duplicate case label.\n      \"no-empty\": 2, // disallow empty statements\n      \"no-empty-class\": 2, // disallow the use of empty character classes in regular expressions\n      \"no-ex-assign\": 2, // disallow assigning to the exception in a catch block\n      \"no-extra-boolean-cast\": 2, // disallow double-negation boolean casts in a boolean context\n      \"no-extra-parens\": 0, // disallow unnecessary parentheses (off by default)\n      \"no-extra-semi\": 2, // disallow unnecessary semicolons\n      \"no-func-assign\": 2, // disallow overwriting functions written as function declarations\n      \"no-inner-declarations\": 2, // disallow function or variable declarations in nested blocks\n      \"no-invalid-regexp\": 2, // disallow invalid regular expression strings in the RegExp constructor\n      \"no-irregular-whitespace\": 2, // disallow irregular whitespace outside of strings and comments\n      \"no-negated-in-lhs\": 2, // disallow negation of the left operand of an in expression\n      \"no-obj-calls\": 2, // disallow the use of object properties of the global object (Math and JSON) as functions\n      \"no-regex-spaces\": 2, // disallow multiple spaces in a regular expression literal\n      \"no-reserved-keys\": 2, // disallow reserved words being used as object literal keys (off by default)\n      \"no-sparse-arrays\": 2, // disallow sparse arrays\n      \"no-unreachable\": 2, // disallow unreachable statements after a return, throw, continue, or break statement\n      \"use-isnan\": 2, // disallow comparisons with the value NaN\n      \"valid-jsdoc\": 2, // Ensure JSDoc comments are valid (off by default)\n      \"valid-typeof\": 2, // Ensure that the results of typeof are compared against a valid string\n  \n      //\n      // Best Practices\n      //\n      // These are rules designed to prevent you from making mistakes.\n      // They either prescribe a better way of doing something or help you avoid footguns.\n      //\n      \"block-scoped-var\": 0, // treat var statements as if they were block scoped (off by default). 0: deep destructuring is not compatible https://github.com/eslint/eslint/issues/1863\n      \"complexity\": 0, // specify the maximum cyclomatic complexity allowed in a program (off by default)\n      \"consistent-return\": 2, // require return statements to either always or never specify values\n      \"curly\": 2, // specify curly brace conventions for all control statements\n      \"default-case\": 2, // require default case in switch statements (off by default)\n      \"dot-notation\": 2, // encourages use of dot notation whenever possible\n      \"eqeqeq\": 2, // require the use of === and !==\n      \"guard-for-in\": 2, // make sure for-in loops have an if statement (off by default)\n      \"no-alert\": 2, // disallow the use of alert, confirm, and prompt\n      \"no-caller\": 2, // disallow use of arguments.caller or arguments.callee\n      \"no-div-regex\": 2, // disallow division operators explicitly at beginning of regular expression (off by default)\n      \"no-else-return\": 2, // disallow else after a return in an if (off by default)\n      \"no-empty-label\": 2, // disallow use of labels for anything other then loops and switches\n      \"no-eq-null\": 2, // disallow comparisons to null without a type-checking operator (off by default)\n      \"no-eval\": 2, // disallow use of eval()\n      \"no-extend-native\": 2, // disallow adding to native types\n      \"no-extra-bind\": 2, // disallow unnecessary function binding\n      \"no-fallthrough\": 2, // disallow fallthrough of case statements\n      \"no-floating-decimal\": 2, // disallow the use of leading or trailing decimal points in numeric literals (off by default)\n      \"no-implied-eval\": 2, // disallow use of eval()-like methods\n      \"no-iterator\": 2, // disallow usage of __iterator__ property\n      \"no-labels\": 2, // disallow use of labeled statements\n      \"no-lone-blocks\": 2, // disallow unnecessary nested blocks\n      \"no-loop-func\": 2, // disallow creation of functions within loops\n      \"no-multi-spaces\": 2, // disallow use of multiple spaces\n      \"no-multi-str\": 2, // disallow use of multiline strings\n      \"no-native-reassign\": 2, // disallow reassignments of native objects\n      \"no-new\": 2, // disallow use of new operator when not part of the assignment or comparison\n      \"no-new-func\": 2, // disallow use of new operator for Function object\n      \"no-new-wrappers\": 2, // disallows creating new instances of String,Number, and Boolean\n      \"no-octal\": 2, // disallow use of octal literals\n      \"no-octal-escape\": 2, // disallow use of octal escape sequences in string literals, such as var foo = \"Copyright \\251\";\n      \"no-param-reassign\": 2, // disallow reassignment of function parameters (off by default)\n      \"no-process-env\": 2, // disallow use of process.env (off by default)\n      \"no-proto\": 2, // disallow usage of __proto__ property\n      \"no-redeclare\": 2, // disallow declaring the same variable more then once\n      \"no-return-assign\": 2, // disallow use of assignment in return statement\n      \"no-script-url\": 2, // disallow use of javascript: urls.\n      \"no-self-compare\": 2, // disallow comparisons where both sides are exactly the same (off by default)\n      \"no-sequences\": 2, // disallow use of comma operator\n      \"no-throw-literal\": 2, // restrict what can be thrown as an exception (off by default)\n      \"no-unused-expressions\": 2, // disallow usage of expressions in statement position\n      \"no-void\": 2, // disallow use of void operator (off by default)\n      \"no-warning-comments\": [0, {\"terms\": [\"todo\", \"fixme\"], \"location\": \"start\"}], // disallow usage of configurable warning terms in comments\": 2, // e.g. TODO or FIXME (off by default)\n      \"no-with\": 2, // disallow use of the with statement\n      \"radix\": 2, // require use of the second argument for parseInt() (off by default)\n      \"vars-on-top\": 2, // requires to declare all vars on top of their containing scope (off by default)\n      \"wrap-iife\": 2, // require immediate function invocation to be wrapped in parentheses (off by default)\n      \"yoda\": 2, // require or disallow Yoda conditions\n  \n      //\n      // Strict Mode\n      //\n      // These rules relate to using strict mode.\n      //\n      \"strict\": 0, // controls location of Use Strict Directives. 0: required by `babel-eslint`\n  \n      //\n      // Variables\n      //\n      // These rules have to do with variable declarations.\n      //\n      \"no-catch-shadow\": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)\n      \"no-delete-var\": 2, // disallow deletion of variables\n      \"no-label-var\": 2, // disallow labels that share a name with a variable\n      \"no-shadow\": 2, // disallow declaration of variables already declared in the outer scope\n      \"no-shadow-restricted-names\": 2, // disallow shadowing of names such as arguments\n      \"no-undef\": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block\n      \"no-undef-init\": 2, // disallow use of undefined when initializing variables\n      \"no-undefined\": 2, // disallow use of undefined variable (off by default)\n      \"no-unused-vars\": 2, // disallow declaration of variables that are not used in the code\n      \"no-use-before-define\": 2, // disallow use of variables before they are defined\n  \n      //\n      //Stylistic Issues\n      //\n      // These rules are purely matters of style and are quite subjective.\n      //\n      \"indent\": [1, 2], // this option sets a specific tab width for your code (off by default)\n      \"brace-style\": 1, // enforce one true brace style (off by default)\n      \"camelcase\": 1, // require camel case names\n      \"comma-spacing\": [1, {\"before\": false, \"after\": true}], // enforce spacing before and after comma\n      \"comma-style\": [1, \"last\"], // enforce one true comma style (off by default)\n      \"consistent-this\": [1, \"_this\"], // enforces consistent naming when capturing the current execution context (off by default)\n      \"eol-last\": 1, // enforce newline at the end of file, with no multiple empty lines\n      \"func-names\": 0, // require function expressions to have a name (off by default)\n      \"func-style\": 0, // enforces use of function declarations or expressions (off by default)\n      \"key-spacing\": [1, {\"beforeColon\": false, \"afterColon\": true}], // enforces spacing between keys and values in object literal properties\n      \"max-nested-callbacks\": [1, 3], // specify the maximum depth callbacks can be nested (off by default)\n      \"new-cap\": [1, {newIsCap: true, capIsNew: false}], // require a capital letter for constructors\n      \"new-parens\": 1, // disallow the omission of parentheses when invoking a constructor with no arguments\n      \"newline-after-var\": 0, // allow/disallow an empty newline after var statement (off by default)\n      \"no-array-constructor\": 1, // disallow use of the Array constructor\n      \"no-inline-comments\": 1, // disallow comments inline after code (off by default)\n      \"no-lonely-if\": 1, // disallow if as the only statement in an else block (off by default)\n      \"no-mixed-spaces-and-tabs\": 1, // disallow mixed spaces and tabs for indentation\n      \"no-multiple-empty-lines\": [1, {\"max\": 2}], // disallow multiple empty lines (off by default)\n      \"no-nested-ternary\": 1, // disallow nested ternary expressions (off by default)\n      \"no-new-object\": 1, // disallow use of the Object constructor\n      \"no-spaced-func\": 1, // disallow space between function identifier and application\n      \"no-ternary\": 0, // disallow the use of ternary operators (off by default)\n      \"no-trailing-spaces\": 1, // disallow trailing whitespace at the end of lines\n      \"no-underscore-dangle\": 1, // disallow dangling underscores in identifiers\n      \"no-wrap-func\": 1, // disallow wrapping of non-IIFE statements in parens\n      \"one-var\": [1, \"never\"], // allow just one var statement per function (off by default)\n      \"operator-assignment\": [1, \"never\"], // require assignment operator shorthand where possible or prohibit it entirely (off by default)\n      \"padded-blocks\": [1, \"never\"], // enforce padding within blocks (off by default)\n      \"quote-props\": [1, \"as-needed\"], // require quotes around object literal property names (off by default)\n      \"quotes\": [1, \"single\"], // specify whether double or single quotes should be used\n      \"semi\": [1, \"always\"], // require or disallow use of semicolons instead of ASI\n      \"semi-spacing\": [1, {\"before\": false, \"after\": true}], // enforce spacing before and after semicolons\n      \"sort-vars\": 0, // sort variables within the same declaration block (off by default)\n      \"space-after-keywords\": [1, \"always\"], // require a space after certain keywords (off by default)\n      \"space-before-blocks\": [1, \"always\"], // require or disallow space before blocks (off by default)\n      \"space-before-function-paren\": [1, {\"anonymous\": \"always\", \"named\": \"never\"}], // require or disallow space before function opening parenthesis (off by default)\n      \"space-in-brackets\": [1, \"never\"], // require or disallow spaces inside brackets (off by default)\n      \"space-in-parens\": [1, \"never\"], // require or disallow spaces inside parentheses (off by default)\n      \"space-infix-ops\": [1, \"always\"], // require spaces around operators\n      \"space-return-throw-case\": [1, \"always\"], // require a space after return, throw, and case\n      \"space-unary-ops\": [1, {\"words\": true, \"nonwords\": false}], // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)\n      \"spaced-line-comment\": [1, \"always\"], // require or disallow a space immediately following the // in a line comment (off by default)\n      \"wrap-regex\": 0, // require regex literals to be wrapped in parentheses (off by default)\n  \n      //\n      // ECMAScript 6\n      //\n      // These rules are only relevant to ES6 environments and are off by default.\n      //\n      \"no-var\": 2, // require let or const instead of var (off by default)\n      \"generator-star-spacing\": [2, \"before\"], // enforce the spacing around the * in generator functions (off by default)\n  \n      //\n      // Legacy\n      //\n      // The following rules are included for compatibility with JSHint and JSLint.\n      // While the names of the rules may not match up with the JSHint/JSLint counterpart,\n      // the functionality is the same.\n      //\n      \"max-depth\": [2, 3], // specify the maximum depth that blocks can be nested (off by default)\n      \"max-len\": [2, 100, 2], // specify the maximum length of a line in your program (off by default)\n      \"max-params\": [2, 5], // limits the number of parameters that can be used in the function declaration. (off by default)\n      \"max-statements\": 0, // specify the maximum number of statement allowed in a function (off by default)\n      \"no-bitwise\": 0, // disallow use of bitwise operators (off by default)\n      \"no-plusplus\": 2, // disallow use of unary operators, ++ and -- (off by default)\n  \n      //\n      // eslint-plugin-react\n      //\n      // React specific linting rules for ESLint\n      //\n      \"react/display-name\": 0, // Prevent missing displayName in a React component definition\n      \"react/jsx-quotes\": [2, \"double\", \"avoid-escape\"], // Enforce quote style for JSX attributes\n      \"react/jsx-no-undef\": 2, // Disallow undeclared variables in JSX\n      \"react/jsx-sort-props\": 0, // Enforce props alphabetical sorting\n      \"react/jsx-uses-react\": 2, // Prevent React to be incorrectly marked as unused\n      \"react/jsx-uses-vars\": 2, // Prevent variables used in JSX to be incorrectly marked as unused\n      \"react/no-did-mount-set-state\": 2, // Prevent usage of setState in componentDidMount\n      \"react/no-did-update-set-state\": 2, // Prevent usage of setState in componentDidUpdate\n      \"react/no-multi-comp\": 0, // Prevent multiple component definition per file\n      \"react/no-unknown-property\": 2, // Prevent usage of unknown DOM property\n      \"react/prop-types\": 2, // Prevent missing props validation in a React component definition\n      \"react/react-in-jsx-scope\": 2, // Prevent missing React when using JSX\n      \"react/self-closing-comp\": 2, // Prevent extra closing tags for components without children\n      \"react/wrap-multilines\": 2, // Prevent missing parentheses around multilines JSX\n    }\n  };"
}