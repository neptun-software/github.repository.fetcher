{
  "metadata": {
    "timestamp": 1736555000784,
    "page": 83,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "neovim/neovim",
      "stars": 85111,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.74,
          "content": "env:\n  CIRRUS_CLONE_DEPTH: '2'\n  LANG: en_US.UTF-8\n\nfreebsd_task:\n  name: FreeBSD\n  only_if: $BRANCH != \"master\"\n  freebsd_instance:\n    image_family: freebsd-14-0\n  timeout_in: 30m\n  install_script:\n    - pkg install -y cmake gmake ninja unzip wget gettext python git\n  build_deps_script:\n    - gmake deps\n  build_script:\n    - gmake CMAKE_EXTRA_FLAGS=\"-DCI_BUILD=ON\" nvim\n  workaround_script:\n    # Run tests as user \"cirrus\" instead of root. This is required for the\n    # permission-related tests to work correctly.\n    - pw useradd cirrus -m\n    - chown -R cirrus:cirrus .\n  functionaltest_script:\n    - sudo -u cirrus gmake functionaltest\n  unittest_script:\n    - sudo -u cirrus gmake unittest\n  oldtest_script:\n    - sudo -u cirrus gmake oldtest\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.75,
          "content": "BasedOnStyle:  Google\nLanguage: Cpp\nColumnLimit: 100\nIndentWidth: 2\nTabWidth: 8\nUseTab: Never\nIndentCaseLabels: false\nBreakBeforeBraces: Custom\nAlignEscapedNewlinesLeft: false\nAllowShortFunctionsOnASingleLine: false\nAlignTrailingComments: true\nSpacesBeforeTrailingComments: 2\nPenaltyReturnTypeOnItsOwnLine: 200\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nBinPackParameters: true\nBreakBeforeBinaryOperators: true\nBreakBeforeTernaryOperators: true\nContinuationIndentWidth: 2\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: No\nAlwaysBreakTemplateDeclarations: No\nAlignEscapedNewlines: DontAlign\nBinPackArguments: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nPointerAlignment: Right\nSortIncludes: true\nCpp11BracedListStyle: false\nIncludeCategories:\n  - Regex:           '<[/[:alnum:].]+>'\n    Priority:        0\n  - Regex:           '^\"(nvim|vim)/'\n    Priority:        1\n    SortPriority:    1\n    CaseSensitive:   false\nAlignConsecutiveMacros: AcrossEmptyLines\nIndentPPDirectives: AfterHash\nSpaceBeforeParens: ControlStatementsExceptControlMacros\nPPIndentWidth: 1\nForEachMacros:\n  - FOR_ALL_AUEVENTS\n  - FOR_ALL_AUPATS_IN_EVENT\n  - FOR_ALL_BUFFERS\n  - FOR_ALL_BUFFERS_BACKWARDS\n  - FOR_ALL_FRAMES\n  - FOR_ALL_QFL_ITEMS\n  - FOR_ALL_SIGNS_IN_BUF\n  - FOR_ALL_TABS\n  - FOR_ALL_TAB_WINDOWS\n  - FOR_ALL_WINDOWS_IN_TAB\n  - RBUFFER_EACH\n  - RBUFFER_EACH_REVERSE\n  - RBUFFER_UNTIL_EMPTY\n  - RBUFFER_UNTIL_FULL\n  - kl_iter\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.9,
          "content": "WarningsAsErrors: '*,-clang-diagnostic-unused-function'\nChecks: >\n  Enable all warnings by default. This ensures we don't miss new and useful\n  warnings when a new version of clang-tidy is dropped.\n\n  IMPORTANT\n  clang-tidy doesn't support comments but we can simulate comments by just\n  writing text directly here. These are then interpreted as warnings and will\n  be dropped. As long as you start every sentence with a capital letter and\n  don't use commas in your \"comments\" you should be fine,\n  *,\n\n  Untriaged warnings. Please categorize them accordingly if you find a relevant\n  section for it,\n  -bugprone-assignment-in-if-condition,\n  -bugprone-implicit-widening-of-multiplication-result,\n  -bugprone-multi-level-implicit-pointer-conversion,\n  -bugprone-not-null-terminated-result,\n  -bugprone-suspicious-memory-comparison,\n  -bugprone-switch-missing-default-case,\n  -cert-env33-c,\n  -cert-err33-c,\n  -cert-err34-c,\n  -concurrency-mt-unsafe,\n  -cppcoreguidelines-narrowing-conversions,\n\n  Warnings that may be useful, but are too inconsistent to enable by default\n  May yield useful results with some manual triaging,\n  -bugprone-branch-clone,\n  -bugprone-macro-parentheses,\n  -bugprone-sizeof-expression,\n  -hicpp-multiway-paths-covered,\n  -hicpp-signed-bitwise,\n  -misc-unused-parameters,\n  -modernize-macro-to-enum,\n  -readability-avoid-nested-conditional-operator,\n  -readability-else-after-return,\n  -readability-enum-initial-value,\n  -readability-function-size,\n  -readability-isolate-declaration,\n\n  Warnings that are rarely useful,\n  -altera-*, Checks related to OpenCL programming for FPGAs. Not relevant,\n  -android-*,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-inc-dec-in-conditions,\n  -bugprone-swapped-arguments,\n  -clang-analyzer-*, Already covered by the cmake target \"clang-analyzer\",\n  -cppcoreguidelines-avoid-non-const-global-variables,\n  -cppcoreguidelines-init-variables,\n  -llvm-header-guard, We use #pragma once,\n  -llvmlibc-restrict-system-libc-headers, We want to use glibc,\n  -misc-include-cleaner, Looks useful but redundant with IWYU. We may replace IWYU with this one day,\n  -misc-misplaced-const,\n  -misc-no-recursion,\n  -performance-no-int-to-ptr,\n  -readability-function-cognitive-complexity,\n  -readability-identifier-length,\n  -readability-magic-numbers,\n  -readability-math-missing-parentheses,\n  -readability-redundant-declaration, Conflicts with our header generation scripts,\n  -readability-suspicious-call-argument,\n\n  Aliases. These are just duplicates of other warnings and should always be ignored,\n  -bugprone-narrowing-conversions,\n  -cert-dcl37-c,\n  -cert-dcl51-cpp,\n  -cert-exp42-c,\n  -cert-flp37-c,\n  -cert-int09-c,\n  -cert-msc24-c,\n  -cert-msc33-c,\n  -cppcoreguidelines-avoid-magic-numbers,\n  -cppcoreguidelines-macro-to-enum,\n  -google-readability-braces-around-statements,\n  -google-readability-function-size,\n  -hicpp-braces-around-statements,\n  -hicpp-function-size,\n  -llvm-else-after-return,\n"
        },
        {
          "name": ".clangd",
          "type": "blob",
          "size": 0.13,
          "content": "CompileFlags:\n  CompilationDatabase: build/       # Search build/ directory for compile_commands.json\nDiagnostics:\n  UnusedIncludes: None\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.25,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\ntab_width = 8\nend_of_line = lf\ninsert_final_newline = true\n\n[*.{c,h,in,lua}]\nmax_line_length = 100\n\n[*.py]\nindent_size = 4\n\n[{Makefile,**/Makefile,*.mk,runtime/doc/*.txt}]\nindent_style = tab\nindent_size = 8\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 3.23,
          "content": "# To use this file (requires git 2.23):\n#   git config blame.ignoreRevsFile .git-blame-ignore-revs\n\n# eval.c: factor out eval/funcs.c #11828\n#   - This is a move/rename. git 2.33 doesn't know how to ignore it.\n#     It is here anyway, (1) in case git improves later, and (2) to\n#     save you the trouble of attempting this.\n6c5bbf07d988ef55e5e8ba8d70b62c1f0885261b\n\n# symbol renames\n6186df3562e33e92f04ed8c850204ceabc4746e1\n\n# style (uncrustify, etc.)\n2d240024acbd68c2d3f82bc72cb12b1a4928c6bf\n61178778230e609d68b271ffd53ffd993cd23c42\n15af08ad176339d1f269ce264bb0efea283c9536\n47f99d66440ae8be26b34531989ac61edc1ad9fe\n1e49a1c888a3d9a581f4aa409a26ada3ac2417cb\n3b3dbcf7b7ba5466e6ab643e256f2374b520a6b2\ne8067d1490a31ff76143d576dc9948b4f09c6c55\nd5b66e88601b4d2fde5d905f9d12847126ba4449\n07715044887d82f74254e64c4c32fa49b0501bea\n6ed43f8f1caad702f9590d174c5ec142f3d85b18\n0a83017fe95df0290adb98ec6bf457b96a3fab17\n867e8885991ae450019c18aa5e42546bd4b62c2c\n1f49268c46fcbe65f7e2e2cb620e6f51c059cf9e\n51a98aa0c2fe3231a0ffc8a78189bc6fafd6abf6\n853346a94d6aa78c97314a3b217fb5a5408a47f1\n30fefee684e641a0c6867446c6de30efa2f0a126\nf4ca3a29ddcb0c98e8e09c45a6342af709f8cc45\n48e67b229415b4e2b3315bd00b817e5f9ab970c8\n7a26eb8a567cbc831d4f629f9eccb767a44436b8\n2f9b9e61d7417183f2d9f36d804247c0926be9d4\nc0767bd4f3ce7b34bb77da0657c49ba10ba1b32e\nd90fb1c0bfc1e64c783c385a79e7de87013dadba\n9c268263b1792d00b3ffdfd7495af2575862656e\n8c74c895b300bcee5fa937a2329d1d4756567b42\n40be47e0faef7aa015eb4ba44ceb1ee1a03e97cf\n4472c56d54f447040f6e8610b261b7efa0d04eb6\na68faed02dc8e37b8f10da14dc02e33e6ed93947\n725cbe7d414f609e769081276f2a034e32a4337b\n7e3bdc75e44b9139d8afaea4381b53ae78b15746\n4ba12b3dda34472c193c9fa8ffd7d3bd5b6c04d6\n849f104c2789c884428fd45501912c6591a78e12\n38dd53c525054daf83dba27d7d46e90e8b41fa50\n6059784770c4c88fb6fe528b9f7634192fa1164e\nee031eb5256bb83e0d6add2bae6fd943a4186ffe\n69e11b58b4db0952f11a5ff85aa7150b5f5b8db8\n271bb32855853b011fceaf0ad2f829bce66b2a19\naefdc6783cb77f09786542c90901a9e7120bea42\naa4f9c5341f5280f16cce0630ea54b84eef717b3\n0adc66171a355a12494d87ebb767d509540c7ef9\n93f24403f8cc760ff47979c596976b53a8b16358\n1ffd527c837fb2465c9659273bbe5447a1352db2\n2498e9feb025361576603a0101c86393d211e31e\n0b3ae64480ea28bb57783c2269a61f0a60ffc55e\n0fc8597f011e0927e529abd11bf0ddd8d0d1eaab\n6ff245732a5a8ab821598a38fb0c5805e6bd3779\nabf758a2977c4e6cab4dfa217f56da853d85851c\ncb84f5ee530f0f32b92bed5b4ad41344e8b551aa\nf98b8d2d44d289263b1a3b33b6a7f20644ef671c\n544ef994df72c3cbe0dca6b856ce2dcbc5169767\n45fe4d11add933df76a2ea4bf52ce8904f4a778b\n517f0cc634b985057da5b95cf4ad659ee456a77e\n04f2f864e270e772c6326cefdf24947f0130e492\n\n# typos\nd238b8f6003d34cae7f65ff7585b48a2cd9449fb\n4547137aaff32b20172870a549d3a28a3c7adf1c\n08616571f47cc367a5fe59b52295708b9fda3b09\n09c6ce8c4e4c6415cca9b834539ed0df461373f6\n0b0c4f7dfa4a9a564cbf44262d4bea9bdefe2dc9\n4a96e7809f4d9f6ce21869817eb95ff6dcaa1693\n61205c1defb64ac5466496b5451e4a7f3171e21e\n64116d78502e0ca611e13adf9323ef2d3fe708c2\nabc087f4c65ca547cae58518b42aee82ff4a07f6\nb8dcbcc732baf84fc48d6b272c3ade0bcb129b3b\nc815aadfccd6bada47ecfb09fe188ee7f7c5caf3\ncaa6992a1071a2ac373bec21085685da4a1790d6\ndf646572c53f55268a5dbb61628d7c3b302d5663\ne63e5d1dbd3dd4711efa0ecf9e844ff308b370a6\neb123b565e201418dd135d2602dc20eea3cead39\nff20d40321399fa187bd350f9619cf6418d7eb6e\n\n# generated docs\nea333badd24f691c753d8048f911d1db349bc2cd\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.57,
          "content": "*.h.in          linguist-language=C\n*.c.in          linguist-language=C\n*CMakeLists.txt linguist-language=CMake\n\nruntime/doc/*   linguist-documentation\nruntime/doc/builtin.txt linguist-generated\n\nruntime/lua/vim/_meta/vimfn.lua linguist-generated\nruntime/lua/vim/_meta/vvars.lua linguist-generated\nruntime/lua/vim/_meta/api.lua linguist-generated\nruntime/lua/vim/_meta/api_keysets.lua linguist-generated\nruntime/lua/vim/_meta/options.lua linguist-generated\n\nsrc/xdiff/**    linguist-vendored\nsrc/cjson/**    linguist-vendored\nsrc/unicode/**  linguist-vendored\n\n.github/    export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.28,
          "content": "# Tools\n/.direnv/\n/venv/\ncompile_commands.json\n/.envrc\n\n# IDEs\n/.vs/\n/.vscode/\n/.idea/\n\n# Build/deps dir\n/build/\n/.deps/\n/tmp/\n/.clangd/\n/.cache/clangd/\n/.ccls-cache/\n/.clang-tidy\n\n.DS_Store\n*.mo\n.*.sw?\n*~\n*.pyc\n*.o\n*.so\n\n/src/nvim/po/vim.pot\n/src/nvim/po/*.ck\n\n# Generated by tests with $NVIM_LOG_FILE set.\n/.nvimlog\n\n# Generated by scripts/vim-patch.sh\n/.vim-src\n*.rej\n\n# Generated by old (Vim) tests.\n/test/old/testdir/del\n/test/old/testdir/test*.out\n/test/old/testdir/test*.res\n/test/old/testdir/test*.log\n/test/old/testdir/messages\n/test/old/testdir/starttime\n/test/old/testdir/viminfo\n/test/old/testdir/opt_test.vim\n/test/old/testdir/test.ok\n/test/old/testdir/*.failed\n/test/old/testdir/X*\n/test/old/testdir/valgrind.*\n/test/old/testdir/.gdbinit\n/runtime/indent/testdir/*.out\n+runtime/indent/testdir/*.fail\n# Generated by test/old/testdir/runnvim.sh.\n/test/old/testdir/*.tlog\n\n# Generated by unit tests.\n/test/includes/post/\n\n# Generated by luacheck during `make lualint'\n.luacheckcache\n\n# local make targets\nlocal.mk\n\n# Generated from :help docs\ntags\n/runtime/doc/*.html\n/runtime/doc/tags.ref\n/runtime/doc/errors.log\n\n# Generated by gen_vimdoc.py:\n/runtime/doc/*.mpack\n/tmp-*-doc\n\n# vim patches\n/vim-*.patch\n\n# nix build results\n/result\n/result-*\n/contrib/result\n/contrib/result-*\n\nCMakeUserPresets.json\n"
        },
        {
          "name": ".luacheckrc",
          "type": "blob",
          "size": 1.22,
          "content": "-- vim: ft=lua tw=80\n\nstds.nvim = {\n  read_globals = { \"jit\" }\n}\nstd = \"lua51+nvim\"\n\n-- Ignore W211 (unused variable) with preload files.\nfiles[\"**/preload.lua\"] = {ignore = { \"211\" }}\n-- Allow vim module to modify itself, but only here.\nfiles[\"src/nvim/lua/vim.lua\"] = {ignore = { \"122/vim\" }}\n\n-- Don't report unused self arguments of methods.\nself = false\n\n-- Rerun tests only if their modification time changed.\ncache = true\n\nignore = {\n  \"631\",  -- max_line_length\n  \"212/_.*\",  -- unused argument, for vars with \"_\" prefix\n  \"214\", -- used variable with unused hint (\"_\" prefix)\n  \"121\", -- setting read-only global variable 'vim'\n  \"122\", -- setting read-only field of global variable 'vim'\n  \"581\", -- negation of a relational operator- operator can be flipped (not for tables)\n}\n\n-- Global objects defined by the C code\nread_globals = {\n  \"vim\",\n}\n\nglobals = {\n  \"vim.g\",\n  \"vim.b\",\n  \"vim.w\",\n  \"vim.o\",\n  \"vim.bo\",\n  \"vim.wo\",\n  \"vim.go\",\n  \"vim.env\"\n}\n\nexclude_files = {\n  'test/_meta.lua',\n  'test/functional/fixtures/lua/syntax_error.lua',\n  'runtime/lua/vim/treesitter/_meta.lua',\n  'runtime/lua/vim/_meta/vimfn.lua',\n  'runtime/lua/vim/_meta/api.lua',\n  'runtime/lua/vim/re.lua',\n  'runtime/lua/coxpcall.lua',\n  'src/nvim/eval.lua',\n}\n"
        },
        {
          "name": ".luacov",
          "type": "blob",
          "size": 0.47,
          "content": "-- Configuration file for LuaCov\n\nlocal source = require(\"lfs\").currentdir()\n\nlocal function pesc(s)\n  assert(type(s) == 'string', s)\n  return s:gsub('[%(%)%.%%%+%-%*%?%[%]%^%$]', '%%%1')\nend\n\nreturn {\n  include = {\n    -- Absolute paths (starting with source dir, not hidden (i.e. .deps)).\n    pesc(source) .. \"[/\\\\][^.].+\",\n    -- Relative (non-hidden) paths.\n    '^[^/\\\\.]',\n  },\n  modules = {\n    ['vim'] = 'runtime/lua/vim/shared.lua'\n  },\n}\n\n-- vim: ft=lua tw=80 sw=2 et\n"
        },
        {
          "name": ".luarc.json",
          "type": "blob",
          "size": 0.6,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/LuaLS/vscode-lua/master/setting/schema.json\",\n  \"runtime\": {\n    \"version\": \"LuaJIT\"\n  },\n  \"workspace\": {\n    \"library\": [\n      \"runtime/lua\",\n      \"${3rd}/busted/library\",\n      \"${3rd}/luv/library\"\n    ],\n    \"ignoreDir\": [\n      \"test\"\n    ],\n    \"checkThirdParty\": \"Disable\"\n  },\n  \"diagnostics\": {\n    \"groupFileStatus\": {\n      \"strict\": \"Opened\",\n      \"strong\": \"Opened\"\n    },\n    \"groupSeverity\": {\n      \"strong\": \"Warning\",\n      \"strict\": \"Warning\"\n    },\n    \"unusedLocalExclude\": [ \"_*\" ],\n    \"disable\": [\n      \"luadoc-miss-see-name\"\n    ]\n  }\n}\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 8.47,
          "content": "Abdelhakeem <abdelhakeem.osama@hotmail.com> Abdelhakeem Osama\nAlvaro Muñoz <alvaro@pwntester.com> Alvaro Muñoz\nAndreas Johansson <andreas@ndrs.xyz> <ndreas@users.noreply.github.com>\nAndrew Pyatkov <mrbiggfoot@gmail.com> <mrbiggfoot@users.noreply.github.com>\nAnmol Sethi <hi@nhooyr.io> <anmol@aubble.com>\nAnmol Sethi <hi@nhooyr.io> <me@anmol.io>\nAnmol Sethi <hi@nhooyr.io> <nhooyr@users.noreply.github.com>\nBK1603 <chouhan.shreyansh2702@gmail.com> Shreyansh Chouhan\nBilly Su <g4691821@gmail.com> Billy SU\nBilly Vong <billyvg@gmail.com> <billyvg@users.noreply.github.com>\nCarlos Hernandez <carlos@techbyte.ca> <hurricanehrndz@users.noreply.github.com>\nChris Kipp <ckipp@pm.me> ckipp01\nChristian Clason <c.clason@uni-graz.at> <christian.clason@uni-due.de>\nCédric Barreteau <> <cbarrete@users.noreply.github.com>\nDan Aloni <alonid@gmail.com> <dan@kernelim.com>\nDaniel Hahler <git@thequod.de> <github@thequod.de>\nEisuke Kawashima <e-kwsm@users.noreply.github.com> E Kawashima\nElPiloto <luis.r.piloto@gmail.com> Luis Piloto\nEliseo Martínez <eliseomarmol@gmail.com> Eliseo Martínez\nFabian Viöl <f.vioel@googlemail.com> Fabian\nFamiu Haque <famiuhaque@proton.me> <famiuhaque@protonmail.com>\nFlorian Walch <florian@fwalch.com> <fwalch@users.noreply.github.com>\nGabriel Cruz <gabs.oficial98@gmail.com> <LTKills@users.noreply.github.com>\nGaelan Steele <gbs@canishe.com> Gaelan\nGavin D. Howard <gavin@schedmd.com> <yzena.tech@gmail.com>\nGeorge Zhao <zhaozg@gmail.com> <zhaozg@aliyun.com>\nGeorge Zhao <zhaozg@gmail.com> George  Zhao\nGregory Anders <greg@gpanders.com> <8965202+gpanders@users.noreply.github.com>\nGregory Anders <greg@gpanders.com> Greg Anders\nGrzegorz Milka <grzegorzmilka@gmail.com> Grzegorz\nHarm te Hennepe <dhtehennepe@gmail.com> <d.h.tehennepe@student.utwente.nl>\nHarm te Hennepe <dhtehennepe@gmail.com> <harm@tehennepe.org>\nHirokazu Hata <h.hata.ai.t@gmail.com> <h-michael@users.noreply.github.com>\nIhor Antonov <ngortheone@gmail.com> <ngortheone@users.noreply.github.com>\nJ Phani Mahesh <phanimahesh@gmail.com> <github@phanimahesh.me>\nJack Bracewell <FriedSock@users.noreply.github.com> <jack.bracewell@unboxedconsulting.com>\nJack Bracewell <FriedSock@users.noreply.github.com> <jbtwentythree@gmail.com>\nJacques Germishuys <jacquesg@striata.com> <jacquesg@users.noreply.github.com>\nJaehwang Jung <tomtomjhj@gmail.com> Jaehwang Jerry Jung\nJakub Łuczyński <doubleloop@o2.pl> <doubleloop@users.noreply.github.com>\nJames McCoy <jamessan@jamessan.com> <vega.james@gmail.com>\nJan Edmund Lazo <jan.lazo@mail.utoronto.ca> <janedmundlazo@hotmail.com>\nJan Viljanen <jan.a.viljanen@gmail.com> <jan.viljanen@greenpeace.org>\nJavier Lopez <graulopezjavier@gmail.com> Javier López\nJit Yao Yap <jityao@gmail.com> <jityao+github@gmail.com>\nJit Yao Yap <jityao@gmail.com> Jit\nJohn Gehrig <jdg.gehrig@gmail.com> <jgehrig@users.noreply.github.com>\nJohn Schmidt <john.schmidt.h@gmail.com> John\nJohn Szakmeister <john@szakmeister.net> <jszakmeister@users.noreply.github.com>\nJonathan de Boyne Pollard <J.deBoynePollard-newsgroups@NTLWorld.com> <jdebp@users.noreply.github.com>\nJonathan de Boyne Pollard <J.deBoynePollard-newsgroups@NTLWorld.com> <postmaster@localhost>\nJurica Bradaric <jbradaric@gmail.com> <jbradaric@users.noreply.github.com>\nJurica Bradaric <jbradaric@gmail.com> <jurica.bradaric@avl.com>\nKillTheMule <KillTheMule@users.noreply.github.com> <github@pipsfrank.de>\nKwon-Young Choi <kwon-young.choi@hotmail.fr> Kwon-Young\nLewis Russell <lewis6991@gmail.com> <me@lewisr.dev>\nLucas Hoffmann <l-m-h@web.de> <lucc@posteo.de>\nLucas Hoffmann <l-m-h@web.de> <lucc@users.noreply.github.com>\nLuuk van Baal <luukvbaal@gmail.com> <31730729+luukvbaal@users.noreply.github.com>\nLuuk van Baal <luukvbaal@gmail.com> luukvbaal\nMarco Hinz <mh.codebro@gmail.com> <mh.codebro+github@gmail.com>\nMarvim the Paranoid Android <marvim@users.noreply.github.com> marvim\nMateusz Czapliński <czapkofan@gmail.com> Mateusz Czaplinski\nMathias Fussenegger <f.mathias@zignar.net> <mfussenegger@users.noreply.github.com>\nMathias Fussenegger <f.mathias@zignar.net> Mathias Fußenegger\nMatt Wozniski <godlygeek@gmail.com> <godlygeek+git@gmail.com>\nMatthieu Coudron <mattator@gmail.com> <coudron@iij.ad.jp>\nMatthieu Coudron <mattator@gmail.com> <matthieu.coudron@upmc.fr>\nMatthieu Coudron <mattator@gmail.com> <mcoudron@hotmail.com>\nMatthieu Coudron <mattator@gmail.com> <teto@users.noreply.github.com>\nMichaHoffmann <michoffmann.potsdam@gmail.com> Michael Hoffmann\nMichaHoffmann <michoffmann.potsdam@gmail.com> micha\nMichael Ennen <mike.ennen@gmail.com> <brcolow@users.noreply.github.com>\nMichael Ennen <mike.ennen@gmail.com> brcolow\nMichael Reed <m.reed@mykolab.com> <Pyrohh@users.noreply.github.com>\nMichael Schupikov <michael@schupikov.de> <DarkDeepBlue@users.noreply.github.com>\nNicolas Hillegeer <nicolas@hillegeer.com> <nicolashillegeer@gmail.com>\nPanashe M. Fundira <fundirap@gmail.com> Panashe Fundira\nPatrice Peterson <patrice.peterson@mailbox.org> runiq\nPavel Platto <hinidu@gmail.com> Hinidu\nPetter Wahlman <petter@wahlman.no> <pwahlman@cisco.com>\nPoh Zi How <poh.zihow@gmail.com> pohzipohzi\nRich Wareham <rjw57@cam.ac.uk> <rjw57@cantab.net>\nRui Abreu Ferreira <equalsraf@users.noreply.github.com> @equalsraf\nRui Abreu Ferreira <raf-ep@gmx.com> <equalsraf@users.noreply.github.com>\nRui Abreu Ferreira <raf-ep@gmx.com> <rap-ep@gmx.com>\nSam Wilson <tecywiz121@hotmail.com> <sawilson@akamai.com>\nSander Bosma <sanderbosma@gmail.com> sander2\nSantos Gallegos <stsewd@protonmail.com> <santos_g@outlook.com>\nSebastian Parborg <darkdefende@gmail.com> DarkDefender\nShirasaka <tk.shirasaka@gmail.com> tk-shirasaka\nShota <shotat@users.noreply.github.com> shotat\nShougo Matsushita <Shougo.Matsu@gmail.com> Shougo\nStephan Seitz <stephan.seitz@fau.de> <stephan.lauf@yahoo.de>\nSteven Sojka <Steven.Sojka@tdameritrade.com> <steelsojka@gmail.com>\nSteven Sojka <steelsojka@gmail.com> <steelsojka@users.noreply.github.com>\nTJ DeVries <devries.timothyj@gmail.com> <timothydvrs1234@gmail.com>\nThomas Fehér <thomas.feher@yahoo.de> <thomasfeher@web.de>\nThomas Vigouroux <thomas.vigouroux@protonmail.com> <tomvig38@gmail.com> <39092278+vigoux@users.noreply.github.com>\nUtkarsh Maheshwari <UtkarshME96@gmail.com> UTkarsh Maheshwari\nUtkarsh Maheshwari <utkarshme96@gmail.com> <UtkarshME96@gmail.com>\nVVKot <volodymyr.kot.ua@gmail.com> Volodymyr Kot\nVictor Adam <victor.adam@cofelyineo-gdfsuez.com> <Victor.Adam@derpymail.org>\nWang Shidong <wsdjeg@outlook.com> <wsdjeg@users.noreply.github.com>\nWei Huang <daviseago@gmail.com> davix\nXu Cheng <xucheng@me.com> <xu-cheng@users.noreply.github.com>\nYamakaky <yamakaky@gmail.com> <yamakaky@yamaworld.fr>\nYegappan Lakshmanan <yegappan@yahoo.com> <4298407+yegappan@users.noreply.github.com>\nYichao Zhou <broken.zhoug@gmail.com> Yichao Zhou <broken.zhou@gmail.com>\nYichao Zhou <broken.zhoug@gmail.com> zhou13 <broken.zhou@gmail.com>\nYorick Peterse <git@yorickpeterse.com> <yorick@yorickpeterse.com>\nZyX <kp-pav@yandex.ru> <kp-pav@ya.ru>\nZyX <kp-pav@yandex.ru> Nikolai Aleksandrovich Pavlov\naph <a.hewson@gmail.com> Ashley Hewson\nbfredl <bjorn.linse@gmail.com>\nbutwerenotthereyet <58348703+butwerenotthereyet@users.noreply.github.com> We're Yet\nchemzqm <chemzqm@gmail.com> Qiming zhao\nchentau <tchen1998@gmail.com> Tony Chen\ndedmass <carlo.abelli@gmail.com> Carlo Abelli\ndundargoc <gocdundar@gmail.com> <33953936+dundargoc@users.noreply.github.com>\ndundargoc <gocdundar@gmail.com> Dundar Goc\nequal-l2 <eng.equall2@gmail.com> <equal-l2@users.noreply.github.com>\nfrancisco souza <fsouza@users.noreply.github.com> <108725+fsouza@users.noreply.github.com>\nglacambre <code@lacamb.re> <me@r4>\nglacambre <code@lacamb.re> Ghjuvan Lacambre\nglepnir <glephunter@gmail.com> Raphael\nglepnir <glepnir@gopherhub.org> Raphael\nglepnir <glepnir@neovim.pro> Raphael\nii14 <ii14@users.noreply.github.com> <59243201+ii14@users.noreply.github.com>\njdrouhard <john@jmdtech.org> <github@jmdtech.org>\nkuuote <znmxodq1@gmail.com> <36663503+kuuote@users.noreply.github.com>\nmatveyt <matthewtarasov@gmail.com> <35012635+matveyt@users.noreply.github.com>\nnate <nateozemon@gmail.com> nateozem\nray-x <rayx.cn@gmail.com> rayx\nrelnod <mail@paul-schiffers.de> <relnod@users.noreply.github.com>\nrockerBOO <rockerboo@gmail.com> Dave Lage\nrpigott <rpigott@berkeley.edu> Ronan Pigott\nsach1t <sach0010t@gmail.com> <sach1t@users.noreply.github.com>\nshade-of-noon <73705427+shade-of-noon@users.noreply.github.com> Edwin Pujols\nshadmansaleh <shadmansaleh3@gmail.com> <13149513+shadmansaleh@users.noreply.github.com>\nshadmansaleh <shadmansaleh3@gmail.com> Shadman\nsohnryang <loop.infinitely@gmail.com> 손량\ntimeyyy <timeyyy_da_man@hotmail.com> Timothy C Eichler\ntimeyyy <timeyyy_da_man@hotmail.com> timothy eichler\n"
        },
        {
          "name": ".stylua.toml",
          "type": "blob",
          "size": 0.14,
          "content": "column_width = 100\nline_endings = \"Unix\"\nindent_type = \"Spaces\"\nindent_width = 2\nquote_style = \"AutoPreferSingle\"\ncall_parentheses = \"Input\"\n"
        },
        {
          "name": ".styluaignore",
          "type": "blob",
          "size": 0.46,
          "content": "/build/\n/.deps/\n/runtime/lua/coxpcall.lua\n/runtime/lua/vim/_meta\n/runtime/lua/vim/re.lua\n\ntest/functional/ui/decorations_spec.lua\ntest/functional/ui/float_spec.lua\ntest/functional/ui/multigrid_spec.lua\n/test/functional/fixtures/lua/syntax_error.lua\n/test/functional/legacy/030_fileformats_spec.lua\n/test/functional/legacy/044_099_regexp_multibyte_magic_spec.lua\n/test/functional/legacy/093_mksession_cursor_cols_latin1_spec.lua\n/test/functional/lua/luaeval_spec.lua\n"
        },
        {
          "name": "BSDmakefile",
          "type": "blob",
          "size": 0.11,
          "content": ".DONE:\n\t@echo \"Use GNU Make (gmake) to build neovim\"\n.DEFAULT:\n\t@echo \"Use GNU Make (gmake) to build neovim\"\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 17.42,
          "content": "- **IMPORTANT**: Before upgrading to a new version, **always check for [breaking changes](https://neovim.io/doc/user/news.html#news-breaking).**\n\n\n## Quick start\n\n1. Install [build prerequisites](#build-prerequisites) on your system\n2. `git clone https://github.com/neovim/neovim`\n3. `cd neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo`\n    - If you want the **stable release**, also run `git checkout stable`.\n    - If you want to install to a custom location, set `CMAKE_INSTALL_PREFIX`. See also [INSTALL.md](./INSTALL.md#install-from-source).\n    - On BSD, use `gmake` instead of `make`.\n    - To build on Windows, see the [Building on Windows](#building-on-windows) section. _MSVC (Visual Studio) is recommended._\n4. `sudo make install`\n    - Default install location is `/usr/local`\n    - On Debian/Ubuntu, instead of `sudo make install`, you can try `cd build && cpack -G DEB && sudo dpkg -i nvim-linux64.deb` to build DEB-package and install it. This helps ensure clean removal of installed files. Note: This is an unsupported, \"best-effort\" feature of the Nvim build.\n\n**Notes**:\n- From the repository's root directory, running `make` will download and build all the needed dependencies and put the `nvim` executable in `build/bin`.\n- Third-party dependencies (libuv, LuaJIT, etc.) are downloaded automatically to `.deps/`. See the [FAQ](https://neovim.io/doc/user/faq.html#faq-build) if you have issues.\n- After building, you can run the `nvim` executable without installing it by running `VIMRUNTIME=runtime ./build/bin/nvim`.\n- If you plan to develop Neovim, install [Ninja](https://ninja-build.org/) for faster builds. It will automatically be used.\n- Install [ccache](https://ccache.dev/) for faster rebuilds of Neovim. It's used by default. To disable it, use `CCACHE_DISABLE=true make`.\n\n## Running tests\n\nSee [test/README.md](https://github.com/neovim/neovim/blob/master/test/README.md).\n\n## Building\n\nFirst make sure you installed the [build prerequisites](#build-prerequisites). Now that you have the dependencies, you can try other build targets explained below.\n\nThe _build type_ determines the level of used compiler optimizations and debug information:\n\n- `Release`: Full compiler optimizations and no debug information. Expect the best performance from this build type. Often used by package maintainers.\n- `Debug`: Full debug information; few optimizations. Use this for development to get meaningful output from debuggers like GDB or LLDB. This is the default if `CMAKE_BUILD_TYPE` is not specified.\n- `RelWithDebInfo` (\"Release With Debug Info\"): Enables many optimizations and adds enough debug info so that when Neovim ever crashes, you can still get a backtrace.\n\nSo, for a release build, just use:\n\n```\nmake CMAKE_BUILD_TYPE=Release\n```\n(Do not add a `-j` flag if `ninja` is installed! The build will be in parallel automatically.)\n\nAfterwards, the `nvim` executable can be found in `build/bin`. To verify the build type after compilation, run:\n\n```sh\n./build/bin/nvim --version | grep ^Build\n```\n\nTo install the executable to a certain location, use:\n\n```\nmake CMAKE_INSTALL_PREFIX=$HOME/local/nvim install\n```\n\nCMake, our main build system, caches a lot of things in `build/CMakeCache.txt`. If you ever want to change `CMAKE_BUILD_TYPE` or `CMAKE_INSTALL_PREFIX`, run `rm -rf build` first. This is also required when rebuilding after a Git commit adds or removes files (including from `runtime`) — when in doubt, run `make distclean` (which is basically a shortcut for `rm -rf build .deps`).\n\nBy default (`USE_BUNDLED=1`), Neovim downloads and statically links its needed dependencies. In order to be able to use a debugger on these libraries, you might want to compile them with debug information as well:\n\n<!-- THIS CAUSES SCREEN INTERFERENCE\n```\nmake distclean\nVERBOSE=1 DEBUG=1 make deps\n```\n-->\n```\nmake distclean\nmake deps\n```\n\n## Building on Windows\n\n### Windows / MSVC\n\n**MSVC (Visual Studio) is the recommended way to build on Windows.** These steps were confirmed as of 2023.\n\n1. Install [Visual Studio](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community) (2017 or later) with the _Desktop development with C++_ workload.\n    - On 32-bit Windows, you will need [this workaround](https://developercommunity.visualstudio.com/content/problem/212989/ninja-binary-format.html).\n2. Open the Neovim project folder.\n    - Visual Studio should detect the cmake files and automatically start building...\n3. Choose the `nvim.exe (bin\\nvim.exe)` target and hit F5.\n    - If the build fails, it may be because Visual Studio started the build with `x64-{Debug,Release}` before you switched the configuration to `x86-Release`.\n      - Right-click _CMakeLists.txt → Delete Cache_.\n      - Right-click _CMakeLists.txt → Generate Cache_.\n    - If you see an \"access violation\" from `ntdll`, you can ignore it and continue.\n4. If you see an error like `uv.dll not found`, try the `nvim.exe (Install)` target. Then switch back to `nvim.exe (bin\\nvim.exe)`.\n\n### Windows / MSVC PowerShell\n\nTo build from the command line (i.e. invoke the `cmake` commands yourself),\n\n1. Ensure you have the Visual Studio environment variables, using any of the following:\n    - Using the [Visual Studio Developer Command Prompt or Visual Studio Developer PowerShell](https://learn.microsoft.com/en-us/visualstudio/ide/reference/command-prompt-powershell?view=vs-2022)\n    - Invoking `Import-VisualStudioVars` in PowerShell from [this PowerShell module](https://github.com/Pscx/Pscx)\n    - Invoking `VsDevCmd.bat` in Command Prompt\n      ```\n      VsDevCmd.bat -arch=x64\n      ```\n   This is to make sure that `luarocks` finds the Visual Studio installation, and doesn't fall back to MinGW with errors like:\n   ```\n   'mingw32-gcc' is not recognized as an internal or external command\n   ```\n2. From the \"Developer PowerShell\" or \"Developer Command Prompt\":\n   ```\n   cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=Release\n   cmake --build .deps --config Release\n   cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=Release\n   cmake --build build --config Release\n   ```\n    - Omit `--config Release` if you want a debug build.\n    - Omit `-G Ninja` to use the \"Visual Studio\" generator.\n\n### Windows / CLion\n\n1. Install [CLion](https://www.jetbrains.com/clion/).\n2. Open the Neovim project in CLion.\n3. Select _Build → Build All in 'Release'_.\n\n### Windows / Cygwin\n\nInstall all dependencies the normal way, then build Neovim the normal way for a random CMake application (i.e. do not use the `Makefile` that automatically downloads and builds \"bundled\" dependencies).\n\nThe `cygport` repo contains Cygport files (e.g. `APKBUILD`, `PKGBUILD`) for all the dependencies not available in the Cygwin distribution, and describes any special commands or arguments needed to build. The Cygport definitions also try to describe the required dependencies for each one. Unless custom commands are provided, Cygport just calls `autogen`/`cmake`, `make`, `make install`, etc. in a clean and consistent way.\n\nhttps://github.com/cascent/neovim-cygwin was built on Cygwin 2.9.0. Newer `libuv` should require slightly less patching. Some SSP stuff changed in Cygwin 2.10.0, so that might change things too when building Neovim.\n\n\n### Windows / MSYS2 / MinGW\n\n1. From the MSYS2 shell, install these packages:\n   ```\n   pacman -S \\\n       mingw-w64-ucrt-x86_64-{gcc,cmake,make,ninja,diffutils}\n   ```\n2. From the Windows Command Prompt (`cmd.exe`), set up the `PATH` and build.\n\n   ```cmd\n   set PATH=c:\\msys64\\ucrt64\\bin;c:\\msys64\\usr\\bin;%PATH%\n   ```\n3. You have two options:\n    - Build using `cmake` and `Ninja` generator:\n      ```cmd\n      cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\n      cmake --build .deps\n      cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\n      cmake --build build\n      ```\n      If you cannot install neovim with `ninja install` due to permission restriction, you can install neovim in a directory you have write access to.\n      ```cmd\n      cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\n      cmake --build .deps\n      cmake -B build -G Ninja -D CMAKE_INSTALL_PREFIX=C:\\nvim -D CMAKE_BUILD_TYPE=RelWithDebInfo\n      cmake --build build\n      ```\n    - Or, alternatively, you can use `mingw32-make`:\n      ```cmd\n      mingw32-make deps\n      mingw32-make CMAKE_BUILD_TYPE=RelWithDebInfo\n      :: Or you can do the previous command specifying a custom prefix\n      :: (Default is C:\\Program Files (x86)\\nvim)\n      :: mingw32-make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=C:\\nvim\n      mingw32-make install\n      ```\n\n## Localization\n\n### Localization build\n\nA normal build will create `.mo` files in `build/src/nvim/po`.\n\n* If you see `msgfmt: command not found`, you need to install [`gettext`](http://en.wikipedia.org/wiki/Gettext). On most systems, the package is just called `gettext`.\n\n### Localization check\n\nTo check the translations for `$LANG`, run `make -C build check-po-$LANG`. Examples:\n\n```\ncmake --build build --target check-po-de\ncmake --build build --target check-po-pt_BR\n```\n\n- `check-po-$LANG` generates a detailed report in `./build/src/nvim/po/check-${LANG}.log`. (The report is generated by `nvim`, not by `msgfmt`.)\n\n### Localization update\n\nTo update the `src/nvim/po/$LANG.po` file with the latest strings, run the following:\n\n```\ncmake --build build --target update-po-$LANG\n```\n\n- **Note**: Run `src/nvim/po/cleanup.vim` after updating.\n\n## Compiler options\n\nTo see the chain of includes, use the `-H` option ([#918](https://github.com/neovim/neovim/issues/918)):\n\n```sh\necho '#include \"./src/nvim/buffer.h\"' | \\\n> clang -I.deps/usr/include -Isrc -std=c99 -P -E -H - 2>&1 >/dev/null | \\\n> grep -v /usr/\n```\n\n- `grep -v /usr/` is used to filter out system header files.\n- `-save-temps` can be added as well to see expanded macros or commented assembly.\n\n## Custom Makefile\n\nYou can customize the build process locally by creating a `local.mk`, which is referenced at the top of the main `Makefile`. It's listed in `.gitignore`, so it can be used across branches. **A new target in `local.mk` overrides the default make-target.**\n\nHere's a sample `local.mk` which adds a target to force a rebuild but *does not* override the default-target:\n\n```make\nall:\n\nrebuild:\n\trm -rf build\n\tmake\n```\n\n## Third-party dependencies\n\nReference the [Debian package](https://packages.debian.org/sid/source/neovim) (or alternatively, the [Homebrew formula](https://github.com/Homebrew/homebrew-core/blob/master/Formula/neovim.rb)) for the precise list of dependencies/versions.\n\nTo build the bundled dependencies using CMake:\n\n```sh\ncmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build .deps\n```\n\nBy default the libraries and headers are placed in `.deps/usr`. Now you can build Neovim:\n\n```sh\ncmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build\n```\n\n### How to build without \"bundled\" dependencies\n\n1. Manually install the dependencies:\n    - libuv libluv libutf8proc luajit lua-lpeg tree-sitter tree-sitter-c tree-sitter-lua tree-sitter-markdown tree-sitter-query tree-sitter-vim tree-sitter-vimdoc unibilium\n2. Run CMake:\n   ```sh\n   cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\n   cmake --build build\n   ```\n   If all the dependencies are not available in the package, you can use only some of the bundled dependencies as follows (example of using `ninja`):\n   ```sh\n   cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_BUNDLED=OFF -DUSE_BUNDLED_TS=ON\n   cmake --build .deps\n   cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\n   cmake --build build\n   ```\n3. Run `make`, `ninja`, or whatever build tool you told CMake to generate.\n    - Using `ninja` is strongly recommended.\n4. If treesitter parsers are not bundled, they need to be available in a `parser/` runtime directory (e.g. `/usr/share/nvim/runtime/parser/`).\n\n#### Debian 10 (Buster) example:\n\n```sh\nsudo apt install luajit libluajit-5.1-dev lua-lpeg libunibilium-dev\ncmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_BUNDLED=OFF -DUSE_BUNDLED_LIBUV=ON -DUSE_BUNDLED_LUV=ON -DUSE_BUNDLED_TS=ON -DUSE_BUNDLED_UTF8PROC=ON\ncmake --build .deps\ncmake -B build -G Ninja -D CMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build\n```\n\n#### Example of using a Makefile\n\n- Example of using a package with all dependencies:\n  ```\n  make USE_BUNDLED=OFF\n  ```\n- Example of using a package with some dependencies:\n  ```\n  make BUNDLED_CMAKE_FLAG=\"-DUSE_BUNDLED=OFF -DUSE_BUNDLED_LUV=ON -DUSE_BUNDLED_TS=ON -DUSE_BUNDLED_LIBUV=ON\"\n  ```\n\n## Build prerequisites\n\nGeneral requirements (see [#1469](https://github.com/neovim/neovim/issues/1469#issuecomment-63058312)):\n\n- Clang or GCC version 4.9+\n- CMake version 3.16+, built with TLS/SSL support\n  - Optional: Get the latest CMake from https://cmake.org/download/\n    - Provides a shell script which works on most Linux systems. After running it, ensure the resulting `cmake` binary is in your $PATH so the the Nvim build will find it.\n\nPlatform-specific requirements are listed below.\n\n### Ubuntu / Debian\n\n```sh\nsudo apt-get install ninja-build gettext cmake unzip curl build-essential\n```\n\n### RHEL / Fedora\n\n```\nsudo dnf -y install ninja-build cmake gcc make unzip gettext curl glibc-gconv-extra\n```\n\n### openSUSE\n\n```\nsudo zypper install ninja cmake gcc-c++ gettext-tools curl\n```\n\n### Arch Linux\n\n```\nsudo pacman -S base-devel cmake unzip ninja curl\n```\n\n### Alpine Linux\n\n```\napk add build-base cmake coreutils curl unzip gettext-tiny-dev\n```\n\n### Void Linux\n\n```\nxbps-install base-devel cmake curl git\n```\n\n### NixOS / Nix\n\nStarting from NixOS 18.03, the Neovim binary resides in the `neovim-unwrapped` Nix package (the `neovim` package being just a wrapper to setup runtime options like Ruby/Python support):\n\n```sh\ncd path/to/neovim/src\n```\n\nDrop into `nix-shell` to pull in the Neovim dependencies:\n\n```\nnix-shell '<nixpkgs>' -A neovim-unwrapped\n```\n\nConfigure and build:\n\n```sh\nrm -rf build && cmakeConfigurePhase\nbuildPhase\n```\n\nTests are not available by default, because of some unfixed failures. You can enable them via adding this package in your overlay:\n```\n  neovim-dev = (super.pkgs.neovim-unwrapped.override  {\n    doCheck=true;\n  }).overrideAttrs(oa:{\n    cmakeBuildType=\"debug\";\n\n    nativeBuildInputs = oa.nativeBuildInputs ++ [ self.pkgs.valgrind ];\n    shellHook = ''\n      export NVIM_PYTHON_LOG_LEVEL=DEBUG\n      export NVIM_LOG_FILE=/tmp/log\n      export VALGRIND_LOG=\"$PWD/valgrind.log\"\n    '';\n  });\n```\nand replacing `neovim-unwrapped` with `neovim-dev`:\n```\nnix-shell '<nixpkgs>' -A neovim-dev\n```\n\nA flake for Neovim is hosted at [nix-community/neovim-nightly-overlay](https://github.com/nix-community/neovim-nightly-overlay/), with 3 packages:\n- `neovim` to run the nightly\n- `neovim-debug` to run the package with debug symbols\n- `neovim-developer` to get all the tools to develop on `neovim`\n\nThus you can run Neovim nightly with `nix run github:nix-community/neovim-nightly-overlay`.\nSimilarly to develop on Neovim: `nix run github:nix-community/neovim-nightly-overlay#neovim-developer`.\n\nTo use a specific version of Neovim, you can pass `--override-input neovim-src .` to use your current directory,\nor a specific SHA1 like `--override-input neovim-src github:neovim/neovim/89dc8f8f4e754e70cbe1624f030fb61bded41bc2`.\n\n### FreeBSD\n\n```\nsudo pkg install cmake gmake sha unzip wget gettext curl\n```\n\nIf you get an error regarding a `sha256sum` mismatch, where the actual SHA-256 hash is `e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855`, then this is your issue (that's the `sha256sum` of an empty file).\n\n### OpenBSD\n\n```sh\ndoas pkg_add gmake cmake unzip curl gettext-tools\n```\n\nBuild can sometimes fail when using the top level `Makefile`, apparently due to some third-party component (see [#2445-comment](https://github.com/neovim/neovim/issues/2445#issuecomment-108124236)). The following instructions use CMake:\n\n```sh\nmkdir .deps\ncd .deps\ncmake ../cmake.deps/\ngmake\ncd ..\nmkdir build\ncd build\ncmake ..\ngmake\n```\n\n### macOS\n\n#### macOS / Homebrew\n\n1. Install Xcode Command Line Tools: `xcode-select --install`\n2. Install [Homebrew](http://brew.sh)\n3. Install Neovim build dependencies:\n    ```\n    brew install ninja cmake gettext curl\n    ```\n  - **Note**: If you see Wget certificate errors (for older macOS versions less than 10.10):\n    ```sh\n    brew install curl-ca-bundle\n    echo CA_CERTIFICATE=$(brew --prefix curl-ca-bundle)/share/ca-bundle.crt >> ~/.wgetrc\n    ```\n  - **Note**: If you see `'stdio.h' file not found`, try the following:\n    ```\n    open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg\n    ```\n\n#### macOS / MacPorts\n\n1. Install Xcode Command Line Tools: `xcode-select --install`\n2. Install [MacPorts](http://www.macports.org)\n3. Install Neovim build dependencies:\n    ```\n    sudo port install ninja cmake gettext\n    ```\n  - **Note**: If you see Wget certificate errors (for older macOS versions less than 10.10):\n    ```sh\n    sudo port install curl-ca-bundle\n    echo CA_CERTIFICATE=/opt/local/share/curl/curl-ca-bundle.crt >> ~/.wgetrc\n    ```\n  - **Note**: If you see `'stdio.h' file not found`, try the following:\n    ```\n    open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg\n    ```\n\n#### Building for older macOS versions\n\nFrom a newer macOS version, to build for older macOS versions, you will have to set the macOS deployment target:\n\n```\nmake CMAKE_BUILD_TYPE=Release MACOSX_DEPLOYMENT_TARGET=10.13 DEPS_CMAKE_FLAGS=\"-DCMAKE_CXX_COMPILER=$(xcrun -find c++)\"\n```\n\nNote that the C++ compiler is explicitly set so that it can be found when the deployment target is set.\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.12,
          "content": "# CMAKE REFERENCE\n#   - intro: https://codingnest.com/basic-cmake/\n#   - best practices (3.0+): https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1\n#   - pitfalls: https://izzys.casa/2019/02/everything-you-never-wanted-to-know-about-cmake/\n#   - troubleshooting:\n#     - variable_watch https://cmake.org/cmake/help/latest/command/variable_watch.html\n#     - verbose output: cmake --build build --verbose\n\n# Version should match the tested CMAKE_URL in .github/workflows/build.yml.\ncmake_minimum_required(VERSION 3.16)\n\nproject(nvim C)\n\nif(POLICY CMP0135)\n  cmake_policy(SET CMP0135 NEW)\nendif()\n\nif(XCODE)\n  message(FATAL_ERROR [[Xcode generator is not supported. Use \"Ninja\" or \"Unix Makefiles\" instead]])\nendif()\n\n# Point CMake at any custom modules we may ship\nlist(APPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\")\n\ninclude(CheckCCompilerFlag)\ninclude(CheckCSourceCompiles)\ninclude(CheckLibraryExists)\ninclude(ExternalProject)\ninclude(FindPackageHandleStandardArgs)\ninclude(GNUInstallDirs)\n\ninclude(Deps)\ninclude(Find)\ninclude(InstallHelpers)\ninclude(PreventInTreeBuilds)\ninclude(Util)\n\n#-------------------------------------------------------------------------------\n# User settings\n#-------------------------------------------------------------------------------\n\nset(DEPS_IGNORE_SHA FALSE)\n\n#-------------------------------------------------------------------------------\n# Variables\n#-------------------------------------------------------------------------------\nset(FUNCS_DATA ${PROJECT_BINARY_DIR}/funcs_data.mpack)\nset(TOUCHES_DIR ${PROJECT_BINARY_DIR}/touches)\nset(VTERM_TEST_FILE ${PROJECT_BINARY_DIR}/test/vterm_test_output)\n\nfile(GLOB DOCFILES CONFIGURE_DEPENDS ${PROJECT_SOURCE_DIR}/runtime/doc/*.txt)\n\nif(NOT CI_BUILD)\n  set(CMAKE_INSTALL_MESSAGE NEVER)\nendif()\n\nif(${CMAKE_VERSION} VERSION_LESS 3.20)\n  set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\nendif()\n\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.26)\n  set(COPY_DIRECTORY copy_directory_if_different)\nelse()\n  set(COPY_DIRECTORY copy_directory)\nendif()\n\n# Prefer our bundled versions of dependencies.\nif(DEFINED ENV{DEPS_BUILD_DIR})\n  set(DEPS_PREFIX \"$ENV{DEPS_BUILD_DIR}/usr\" CACHE PATH \"Path prefix for finding dependencies\")\nelse()\n  set(DEPS_PREFIX \"${CMAKE_CURRENT_SOURCE_DIR}/.deps/usr\" CACHE PATH \"Path prefix for finding dependencies\")\n  # When running from within CLion or Visual Studio,\n  # build bundled dependencies automatically.\n  if(NOT EXISTS ${DEPS_PREFIX}\n     AND (DEFINED ENV{CLION_IDE}\n          OR DEFINED ENV{VisualStudioEdition}))\n    message(STATUS \"Building dependencies...\")\n    set(DEPS_BUILD_DIR ${PROJECT_BINARY_DIR}/.deps)\n    file(MAKE_DIRECTORY ${DEPS_BUILD_DIR})\n    execute_process(\n      COMMAND ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR}\n        -D CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}\n        -D CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n        -D CMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n        -D CMAKE_C_FLAGS=${CMAKE_C_FLAGS}\n        -D CMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG}\n        -D CMAKE_C_FLAGS_MINSIZEREL=${CMAKE_C_FLAGS_MINSIZEREL}\n        -D CMAKE_C_FLAGS_RELWITHDEBINFO=${CMAKE_C_FLAGS_RELWITHDEBINFO}\n        -D CMAKE_C_FLAGS_RELEASE=${CMAKE_C_FLAGS_RELEASE}\n        -D CMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}\n        ${PROJECT_SOURCE_DIR}/cmake.deps\n      WORKING_DIRECTORY ${DEPS_BUILD_DIR})\n    execute_process(\n      COMMAND ${CMAKE_COMMAND} --build ${DEPS_BUILD_DIR}\n        --config ${CMAKE_BUILD_TYPE})\n    set(DEPS_PREFIX ${DEPS_BUILD_DIR}/usr)\n  endif()\nendif()\n\nlist(INSERT CMAKE_PREFIX_PATH 0 ${DEPS_PREFIX})\n\nif(APPLE)\n  # If the macOS deployment target is not set manually (via $MACOSX_DEPLOYMENT_TARGET),\n  # fall back to local system version. Needs to be done both here and in cmake.deps.\n  if(NOT CMAKE_OSX_DEPLOYMENT_TARGET)\n    execute_process(COMMAND sw_vers -productVersion\n                    OUTPUT_VARIABLE MACOS_VERSION\n                    OUTPUT_STRIP_TRAILING_WHITESPACE)\n    set(CMAKE_OSX_DEPLOYMENT_TARGET \"${MACOS_VERSION}\")\n  endif()\n  message(STATUS \"Using deployment target ${CMAKE_OSX_DEPLOYMENT_TARGET}\")\nendif()\n\nif(WIN32 OR APPLE)\n  # Handle case-insensitive filenames for Windows and Mac.\n  set(CASE_INSENSITIVE_FILENAME TRUE)\nendif()\n\nif (MINGW)\n  # Disable LTO by default as it may not compile\n  # See https://github.com/Alexpux/MINGW-packages/issues/3516\n  # and https://github.com/neovim/neovim/pull/8654#issuecomment-402316672\n  option(ENABLE_LTO \"enable link time optimization\" OFF)\nelse()\n  option(ENABLE_LTO \"enable link time optimization\" ON)\nendif()\noption(ENABLE_LIBINTL \"enable libintl\" ON)\noption(ENABLE_WASMTIME \"enable wasmtime\" OFF)\n\nmessage(STATUS \"CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}\")\n\nset_default_buildtype(Debug)\nget_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(NOT isMultiConfig)\n  # Unlike build dependencies in cmake.deps, we want dev dependencies such as\n  # Uncrustify to always be built with Release.\n  list(APPEND DEPS_CMAKE_ARGS -D CMAKE_BUILD_TYPE=Release)\nendif()\n\n# If not in a git repo (e.g., a tarball) these tokens define the complete\n# version string, else they are combined with the result of `git describe`.\nset(NVIM_VERSION_MAJOR 0)\nset(NVIM_VERSION_MINOR 11)\nset(NVIM_VERSION_PATCH 0)\nset(NVIM_VERSION_PRERELEASE \"-dev\") # for package maintainers\n\n# API level\nset(NVIM_API_LEVEL 13)        # Bump this after any API/stdlib change.\nset(NVIM_API_LEVEL_COMPAT 0)  # Adjust this after a _breaking_ API change.\nset(NVIM_API_PRERELEASE true)\n\n# We _want_ assertions in RelWithDebInfo build-type.\nif(CMAKE_C_FLAGS_RELWITHDEBINFO MATCHES DNDEBUG)\n  string(REPLACE \"-DNDEBUG\" \"\" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\n  string(REPLACE \"/DNDEBUG\" \"\" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\n  string(REPLACE \"  \" \" \" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\") # Remove duplicate whitespace\nendif()\n\noption(ENABLE_ASAN_UBSAN \"Enable Clang address & undefined behavior sanitizer for nvim binary.\" OFF)\noption(ENABLE_MSAN \"Enable Clang memory sanitizer for nvim binary.\" OFF)\n# TSAN exists to test Luv threads.\noption(ENABLE_TSAN \"Enable Clang thread sanitizer for nvim binary.\" OFF)\n\nif((ENABLE_ASAN_UBSAN AND ENABLE_MSAN)\n    OR (ENABLE_ASAN_UBSAN AND ENABLE_TSAN)\n    OR (ENABLE_MSAN AND ENABLE_TSAN))\n  message(FATAL_ERROR \"Sanitizers cannot be enabled simultaneously\")\nendif()\n\n# Place targets in bin/ or lib/ for all build configurations\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nforeach(CFGNAME ${CMAKE_CONFIGURATION_TYPES})\n  string(TOUPPER ${CFGNAME} CFGNAME)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/bin)\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/lib)\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/lib)\nendforeach()\n\nif(NOT PREFER_LUA)\n  find_program(LUA_PRG NAMES luajit)\nendif()\nfind_program(LUA_PRG NAMES lua5.1 lua5.2 lua)\nmark_as_advanced(LUA_PRG)\nif(NOT LUA_PRG)\n  message(FATAL_ERROR \"Failed to find a Lua 5.1-compatible interpreter\")\nendif()\nmessage(STATUS \"Using Lua interpreter: ${LUA_PRG}\")\n\n# Some of the code generation still relies on stable table ordering in order to\n# produce reproducible output - specifically the msgpack'ed data in\n# funcs_metadata.generated.h and ui_events_metadata.generated.h. This should\n# ideally be fixed in the generators, but until then as a workaround you may provide\n# a specific lua implementation that provides the needed stability by setting LUA_GEN_PRG:\nif(NOT LUA_GEN_PRG)\n  set(LUA_GEN_PRG \"${LUA_PRG}\" CACHE FILEPATH \"Path to the lua used for code generation.\")\nendif()\nmark_as_advanced(LUA_GEN_PRG)\nmessage(STATUS \"Using Lua interpreter for code generation: ${LUA_GEN_PRG}\")\n\noption(COMPILE_LUA \"Pre-compile Lua sources into bytecode (for sources that are included in the binary)\" ON)\nif(COMPILE_LUA AND NOT WIN32)\n  if(PREFER_LUA)\n    foreach(CURRENT_LUAC_PRG luac5.1 luac)\n      find_program(_CHECK_LUAC_PRG ${CURRENT_LUAC_PRG})\n      if(_CHECK_LUAC_PRG)\n        set(LUAC_PRG \"${_CHECK_LUAC_PRG} -s -o - %s\" CACHE STRING \"Format for compiling to Lua bytecode\")\n        break()\n      endif()\n    endforeach()\n  elseif(LUA_PRG MATCHES \"luajit\")\n    check_lua_module(${LUA_PRG} \"jit.bcsave\" LUAJIT_HAS_JIT_BCSAVE)\n    if(LUAJIT_HAS_JIT_BCSAVE)\n      set(LUAC_PRG \"${LUA_PRG} -b -s %s -\" CACHE STRING \"Format for compiling to Lua bytecode\")\n    endif()\n  endif()\nendif()\nmark_as_advanced(LUAC_PRG)\nif(LUAC_PRG)\n  message(STATUS \"Using Lua compiler: ${LUAC_PRG}\")\nendif()\n\n# Lint\noption(CI_LINT \"Abort if lint programs not found\" OFF)\nif(CI_LINT)\n  set(LINT_REQUIRED \"REQUIRED\")\nendif()\nfind_program(SHELLCHECK_PRG shellcheck ${LINT_REQUIRED})\nmark_as_advanced(SHELLCHECK_PRG)\nfind_program(STYLUA_PRG stylua ${LINT_REQUIRED})\nmark_as_advanced(STYLUA_PRG)\n\nset(STYLUA_DIRS runtime scripts src test contrib)\n\nadd_glob_target(\n  TARGET lintlua-luacheck\n  COMMAND $<TARGET_FILE:nvim_bin>\n  FLAGS -ll ${PROJECT_SOURCE_DIR}/test/lua_runner.lua ${CMAKE_BINARY_DIR}/usr luacheck -q\n  GLOB_DIRS runtime scripts src test\n  GLOB_PAT *.lua\n  TOUCH_STRATEGY PER_DIR)\nadd_dependencies(lintlua-luacheck lua_dev_deps)\n\nadd_glob_target(\n  TARGET lintlua-stylua\n  COMMAND ${STYLUA_PRG}\n  FLAGS --color=always --check --respect-ignores\n  GLOB_DIRS ${STYLUA_DIRS}\n  GLOB_PAT *.lua\n  TOUCH_STRATEGY PER_DIR)\n\nadd_custom_target(lintlua)\nadd_dependencies(lintlua lintlua-luacheck lintlua-stylua)\n\nadd_glob_target(\n  TARGET lintsh\n  COMMAND ${SHELLCHECK_PRG}\n  FLAGS -x -a\n  GLOB_DIRS scripts\n  GLOB_PAT *.sh\n  TOUCH_STRATEGY PER_DIR)\n\nadd_custom_target(lintcommit\n  COMMAND $<TARGET_FILE:nvim_bin> -u NONE -l ${PROJECT_SOURCE_DIR}/scripts/lintcommit.lua main)\nadd_dependencies(lintcommit nvim_bin)\n\nadd_custom_target(lint)\nadd_dependencies(lint lintc lintlua lintsh)\n\n# Format\nadd_glob_target(\n  TARGET formatlua\n  COMMAND ${STYLUA_PRG}\n  FLAGS --respect-ignores\n  GLOB_DIRS ${STYLUA_DIRS}\n  GLOB_PAT *.lua\n  TOUCH_STRATEGY PER_DIR)\n\nadd_custom_target(format)\nadd_dependencies(format formatc formatlua)\n\ninstall_helper(\n  FILES ${CMAKE_SOURCE_DIR}/src/man/nvim.1\n  DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)\n\nadd_custom_target(nvim ALL)\nadd_dependencies(nvim nvim_bin nvim_runtime_deps nvim_runtime)\n\nadd_subdirectory(src/nvim)\nadd_subdirectory(cmake.config)\nadd_subdirectory(runtime)\nadd_subdirectory(test)\n\nadd_custom_target(uninstall\n  COMMAND ${CMAKE_COMMAND} -P ${PROJECT_SOURCE_DIR}/cmake/UninstallHelper.cmake)\n\nif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})\n  add_subdirectory(cmake.packaging)\nendif()\n\nget_externalproject_options(uncrustify ${DEPS_IGNORE_SHA})\nExternalProject_Add(uncrustify\n  DOWNLOAD_DIR ${DEPS_DOWNLOAD_DIR}/uncrustify\n  CMAKE_ARGS ${DEPS_CMAKE_ARGS}\n    -D CMAKE_RUNTIME_OUTPUT_DIRECTORY=${DEPS_BIN_DIR}\n  EXCLUDE_FROM_ALL TRUE\n  ${EXTERNALPROJECT_OPTIONS})\n\noption(USE_BUNDLED_BUSTED \"Use bundled busted\" ON)\nif(USE_BUNDLED_BUSTED)\n  get_externalproject_options(lua_dev_deps ${DEPS_IGNORE_SHA})\n  ExternalProject_Add(lua_dev_deps\n    DOWNLOAD_DIR ${DEPS_DOWNLOAD_DIR}/lua_dev_deps\n    SOURCE_DIR ${DEPS_SHARE_DIR}\n    CONFIGURE_COMMAND \"\"\n    BUILD_COMMAND \"\"\n    INSTALL_COMMAND \"\"\n    EXCLUDE_FROM_ALL TRUE\n    ${EXTERNALPROJECT_OPTIONS})\nelse()\n  add_custom_target(lua_dev_deps)\nendif()\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 1.22,
          "content": "{\n  \"version\": 3,\n  \"configurePresets\": [\n    {\n      \"name\": \"base\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"hidden\": true\n    },\n    {\n      \"name\": \"default\",\n      \"displayName\": \"RelWithDebInfo\",\n      \"description\": \"Enables optimizations (-O2) with debug information\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"RelWithDebInfo\"\n      },\n      \"inherits\": [\"base\"]\n    },\n    {\n      \"name\": \"debug\",\n      \"displayName\": \"Debug\",\n      \"description\": \"Disables optimizations (-O0), enables debug information\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Debug\"\n      },\n      \"inherits\": [\"base\"]\n    },\n    {\n      \"name\": \"release\",\n      \"displayName\": \"Release\",\n      \"description\": \"Same as RelWithDebInfo, but disables debug information\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Release\"\n      },\n      \"inherits\": [\"base\"]\n    },\n    {\n      \"name\": \"iwyu\",\n      \"displayName\": \"IWYU\",\n      \"description\": \"Run include-what-you-use\",\n      \"cacheVariables\": {\n        \"ENABLE_IWYU\": \"ON\"\n      },\n      \"inherits\": [\"base\"]\n    },\n    {\n      \"name\": \"ci\",\n      \"cacheVariables\": {\n        \"CI_BUILD\": \"ON\"\n      },\n      \"inherits\": [\"base\"]\n    }\n  ]\n}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 14.63,
          "content": "Contributing to Neovim\n======================\n\nGetting started\n---------------\n\nIf you want to help but don't know where to start, here are some\nlow-risk/isolated tasks:\n\n- Try a [complexity:low] issue.\n- Fix bugs found by [Coverity](#coverity).\n- [Merge a Vim patch] (requires strong familiarity with Vim)\n  - NOTE: read the above link before sending improvements to \"runtime files\" (anything in `runtime/`).\n    - Vimscript and documentation files are (mostly) maintained by [Vim], not Nvim.\n    - Nvim's [filetype detection](https://github.com/neovim/neovim/blob/master/runtime/lua/vim/filetype.lua) behavior matches Vim, so changes to filetype detection should be submitted to [Vim] first.\n    - Lua files are maintained by Nvim.\n\nReporting problems\n------------------\n\n- [Check the FAQ][wiki-faq].\n- [Search existing issues][github-issues] (including closed!)\n- Update Neovim to the latest version to see if your problem persists.\n- Try to reproduce with `nvim --clean` (\"factory defaults\").\n- If a specific configuration or plugin is necessary to recreate the problem, use the minimal template in `contrib/minimal.lua` with `nvim --clean -u contrib/minimal.lua` after making the necessary changes.\n- [Bisect](https://neovim.io/doc/user/starting.html#bisect) your config: disable plugins incrementally, to narrow down the cause of the issue.\n- [Bisect][git-bisect] Neovim's source code to find the cause of a regression, if you can. This is _extremely_ helpful.\n- When reporting a crash, [include a stacktrace](https://neovim.io/doc/user/dev_tools.html#dev-tools-backtrace).\n- Use [ASAN/UBSAN](#sanitizers-asan-and-ubsan) to get detailed errors for segfaults and undefined behavior.\n- Check the logs. `:edit $NVIM_LOG_FILE`\n- Include `cmake --system-information` for build-related issues.\n\nDeveloper guidelines\n--------------------\n\n- Read [:help dev](https://neovim.io/doc/user/develop.html#dev) and [:help dev-doc][dev-doc-guide] if you are working on Nvim core.\n- Read [:help dev-ui](https://neovim.io/doc/user/develop.html#dev-ui) if you are developing a UI.\n- Read [:help dev-api-client](https://neovim.io/doc/user/develop.html#dev-api-client) if you are developing an API client.\n- Install `ninja` for faster builds of Nvim.\n  ```bash\n  sudo apt-get install ninja-build\n  make distclean\n  make  # Nvim build system uses ninja automatically, if available.\n  ```\n- Install `ccache` or `sccache` for faster rebuilds of Nvim. Nvim will use one\n  of these automatically if it's found. To disable caching use:\n  ```bash\n  cmake -B build -D CACHE_PRG=OFF\n  ```\n\nPull requests (PRs)\n---------------------\n\n- To avoid duplicate work, create a draft pull request.\n- Your PR must include [test coverage][run-tests].\n- Avoid cosmetic changes to unrelated files in the same commit.\n- Use a [feature branch][git-feature-branch] instead of the master branch.\n- Use a _rebase workflow_ for all PRs.\n  - After addressing review comments, it's fine to force-push.\n\n### Merging to master\n\nFor maintainers: when a PR is ready to merge to master,\n\n- prefer _Squash Merge_ for \"single-commit PRs\" (when the PR has only one meaningful commit).\n- prefer _Merge_ for \"multi-commit PRs\" (when the PR has multiple meaningful commits).\n\n### Stages: Draft and Ready for review\n\nPull requests have two stages: Draft and Ready for review.\n\n1. [Create a Draft PR][pr-draft] while you are _not_ requesting feedback as\n  you are still working on the PR.\n    - You can skip this if your PR is ready for review.\n2. [Change your PR to ready][pr-ready] when the PR is ready for review.\n    - You can convert back to Draft at any time.\n\nDo __not__ add labels like `[RFC]` or `[WIP]` in the title to indicate the\nstate of your PR: this just adds noise. Non-Draft PRs are assumed to be open\nfor comments; if you want feedback from specific people, `@`-mention them in\na comment.\n\n### Commit messages\n\nFollow the [conventional commits guidelines][conventional_commits] to *make reviews easier* and to make\nthe VCS/git logs more valuable (try `make lintcommit`). The structure of a commit message is:\n\n    type(scope): subject\n\n    Problem:\n    ...\n\n    Solution:\n    ...\n\n- Commit message **subject** (you can **ignore this for \"fixup\" commits** or any commits you expect to be squashed):\n    - Prefix with a [_type_](https://github.com/commitizen/conventional-commit-types/blob/master/index.json):\n        - `build ci docs feat fix perf refactor revert test vim-patch`\n    - Append an optional `(scope)` such as `(lsp)`, `(treesitter)`, `(float)`, …\n    - Use the _imperative voice_: \"Fix bug\" rather than \"Fixed bug\" or \"Fixes bug.\"\n    - Keep it short (under 72 characters).\n- Commit message **body** (detail):\n    - Concisely describe the Problem/Solution in the commit **body**. [Describing the problem](https://lamport.azurewebsites.net/pubs/state-the-problem.pdf)\n      _independently of the solution_ often leads to a better understanding for you, reviewers, and future readers.\n      ```\n      Problem:\n\n      Solution:\n      ```\n- Indicate breaking API changes with \"!\" after the type, and a \"BREAKING CHANGE\" footer. Example:\n  ```\n  refactor(provider)!: drop support for Python 2\n\n  BREAKING CHANGE: refactor to use Python 3 features since Python 2 is no longer supported.\n  ```\n\n### Automated builds (CI)\n\nEach pull request must pass the automated builds on [Cirrus CI] and [GitHub Actions].\n\n- CI builds are compiled with [`-Werror`][gcc-warnings], so compiler warnings\n  will fail the build.\n- If any tests fail, the build will fail. See [test/README.md#running-tests][run-tests] to run tests locally.\n- CI runs [ASan] and other analyzers.\n    - To run valgrind locally: `VALGRIND=1 make test`\n    - To run ASan/UBSan locally: `CC=clang make CMAKE_FLAGS=\"-DENABLE_ASAN_UBSAN=ON\"`.\n      Note that MSVC requires Release or RelWithDebInfo build type to work properly.\n- The [lint](#lint) build checks that the code is formatted correctly and\n  passes various linter checks.\n- CI for FreeBSD runs on [Cirrus CI].\n- To see CI results faster in your PR, you can temporarily set `TEST_FILE` in\n  [test.yml](https://github.com/neovim/neovim/blob/e35b9020b16985eee26e942f9a3f6b045bc3809b/.github/workflows/test.yml#L29).\n\n### Coverity\n\nCoverity runs against the master build. To view the defects you must\n[request access](https://scan.coverity.com/projects/neovim-neovim) (Coverity\ndoes not have a \"public\" view), then you will be approved as soon as\na maintainer sees the email.\n\n- Use this format for commit messages (where `{id}` is the CID (Coverity ID);\n  ([example](https://github.com/neovim/neovim/pull/804))):\n  ```\n  fix(coverity/{id}): {description}\n  ```\n- Search the Neovim commit history to find examples:\n  ```bash\n  git log --oneline --no-merges --grep coverity\n  ```\n\n### Sanitizers (ASAN and UBSAN)\n\n  ASAN/UBSAN can be used to detect memory errors and other common forms of undefined behavior at runtime in debug builds.\n\n- To build Neovim with sanitizers enabled, use\n  ```\n  rm -rf build && CMAKE_EXTRA_FLAGS=\"-DCMAKE_C_COMPILER=clang -DENABLE_ASAN_UBSAN=1\" make\n  ```\n- When running Neovim, use\n  ```\n  ASAN_OPTIONS=log_path=/tmp/nvim_asan nvim args...\n  ```\n- If Neovim exits unexpectedly, check `/tmp/nvim_asan.{PID}` (or your preferred `log_path`) for log files with error messages.\n\n\nCoding\n------\n\n### Lint\n\nYou can run the linter locally by:\n\n```bash\nmake lint\n```\n\n### Style\n\n- You can format files by using:\n  ```bash\n  make format  # or formatc, formatlua\n  ```\n  This will format changed Lua and C files with all appropriate flags set.\n- Style rules are (mostly) defined by `src/uncrustify.cfg` which tries to match\n  the [style-guide]. To use the Nvim `gq` command with `uncrustify`:\n  ```vim\n  if !empty(findfile('src/uncrustify.cfg', ';'))\n    setlocal formatprg=uncrustify\\ -q\\ -l\\ C\\ -c\\ src/uncrustify.cfg\\ --no-backup\n  endif\n  ```\n- There is also `.clang-format` which has drifted from the [style-guide], but\n  is available for reference. To use the Nvim `gq` command with `clang-format`:\n  ```vim\n  if !empty(findfile('.clang-format', ';'))\n    setlocal formatprg=clang-format\\ -style=file\n  endif\n  ```\n\n### Navigate\n\n- Set `blame.ignoreRevsFile` to ignore [noisy commits](https://github.com/neovim/neovim/commit/2d240024acbd68c2d3f82bc72cb12b1a4928c6bf) in git blame:\n  ```bash\n  git config blame.ignoreRevsFile .git-blame-ignore-revs\n  ```\n\n- Recommendation is to use **[clangd]**.\n  Can use the maintained config in [nvim-lspconfig/clangd].\n- Explore the source code [on the web](https://sourcegraph.com/github.com/neovim/neovim).\n\n### Includes\n\nFor managing includes in C files, use [include-what-you-use].\n\n- [Install include-what-you-use][include-what-you-use-install]\n- To see which includes needs fixing use the cmake preset `iwyu`:\n  ```bash\n  cmake --preset iwyu\n  cmake --build build\n  ```\n- There's also a make target that automatically fixes the suggestions from\n  IWYU:\n  ```bash\n  make iwyu\n  ```\n\nSee [#549][549] for more details.\n\n### Lua runtime files\n\nMost of the Lua core [`runtime/`](./runtime) modules are precompiled to\nbytecode, so changes to those files won't get used unless you rebuild Nvim or\nby passing `--luamod-dev` and `$VIMRUNTIME`. For example, try adding a function\nto `runtime/lua/vim/_editor.lua` then:\n\n```bash\nVIMRUNTIME=./runtime ./build/bin/nvim --luamod-dev\n```\n\nDocumentation\n-------------\n\nRead [:help dev-doc][dev-doc-guide] to understand the expected documentation style and conventions.\n\n### Generating :help\n\nMany `:help` docs are autogenerated from (C or Lua) docstrings. To generate the documentation run:\n\n```bash\nmake doc\n```\n\nTo validate the documentation files, run:\n\n```bash\nmake lintdoc\n```\n\nIf you need to modify or debug the documentation flow, these are the main files:\n- `./scripts/gen_vimdoc.lua`:\n  Main doc generator. Parses C and Lua files to render vimdoc files.\n- `./scripts/luacats_parser.lua`:\n  Documentation parser for Lua files.\n- `./scripts/cdoc_parser.lua`:\n  Documentation parser for C files.\n- `./scripts/luacats_grammar.lua`:\n  Lpeg grammar for LuaCATS\n- `./scripts/cdoc_grammar.lua`:\n  Lpeg grammar for C doc comments\n- `./scripts/gen_eval_files.lua`:\n  Generates documentation and Lua type files from metadata files:\n  ```\n  runtime/lua/vim/*     =>  runtime/doc/lua.txt\n  runtime/lua/vim/*     =>  runtime/doc/lua.txt\n  runtime/lua/vim/lsp/  =>  runtime/doc/lsp.txt\n  src/nvim/api/*        =>  runtime/doc/api.txt\n  src/nvim/eval.lua     =>  runtime/doc/builtin.txt\n  src/nvim/options.lua  =>  runtime/doc/options.txt\n  ```\n\n- `./scripts/lintdoc.lua`: Validation and linting of documentation files.\n\n### Lua docstrings\n\nUse [LuaLS] annotations in Lua docstrings to annotate parameter types, return\ntypes, etc. See [:help dev-lua-doc][dev-lua-doc].\n\n- The template for function documentation is:\n  ```lua\n  --- {Brief}\n  ---\n  --- {Long explanation}\n  ---\n  --- @param arg1 type {description}\n  --- @param arg2 type {description}\n  --- ...\n  ---\n  --- @return type {description}\n  ```\n- If possible, add type information (`table`, `string`, `number`, ...). Multiple valid types are separated by a bar (`string|table`). Indicate optional parameters via `type|nil`.\n- If a function in your Lua module should _not_ be documented, add `@nodoc`.\n- If the function is internal or otherwise non-public add `@private`.\n      - Private functions usually should be underscore-prefixed (named \"_foo\", not \"foo\").\n- Mark deprecated functions with `@deprecated`.\n\nThird-party dependencies\n------------------------\n\nTo build Nvim using a different commit of a dependency change the appropriate\nURL in `cmake.deps/deps.txt`. For example, to use a different version of luajit\nreplace the value in `LUAJIT_URL` with the wanted commit hash:\n\n```bash\nLUAJIT_URL https://github.com/LuaJIT/LuaJIT/archive/<sha>.tar.gz\n```\n\nSet `DEPS_IGNORE_SHA` to `TRUE` in `cmake.deps/CMakeLists.txt` to skip hash\ncheck from cmake.\n\nAlternatively, you may point the URL as a local path where the repository is.\nThis is convenient when bisecting a problem in a dependency with `git bisect`.\nThis may require running `make distclean` between each build. Hash checking is\nalways skipped in this case regardless of `DEPS_IGNORE_SHA`.\n\n```bash\nLUAJIT_URL /home/user/luajit\n```\n\nReviewing\n---------\n\nReviewing can be done on GitHub, but you may find it easier to do locally.\nUsing [GitHub CLI][gh], you can create a new branch with the contents of a pull\nrequest, e.g. [#1820][1820]:\n\n```bash\ngh pr checkout https://github.com/neovim/neovim/pull/1820\n```\n\nUse [`git log -p master..FETCH_HEAD`][git-history-filtering] to list all\ncommits in the feature branch which aren't in the `master` branch; `-p`\nshows each commit's diff. To show the whole surrounding function of a change\nas context, use the `-W` argument as well.\n\n[549]: https://github.com/neovim/neovim/issues/549\n[1820]: https://github.com/neovim/neovim/pull/1820\n[3174]: https://github.com/neovim/neovim/issues/3174\n[ASan]: http://clang.llvm.org/docs/AddressSanitizer.html\n[Cirrus CI]: https://cirrus-ci.com/github/neovim/neovim\n[Clang report]: https://neovim.io/doc/reports/clang/\n[GitHub Actions]: https://github.com/neovim/neovim/actions\n[Vim]: https://github.com/vim/vim\n[clangd]: https://clangd.llvm.org\n[Merge a Vim patch]: https://neovim.io/doc/user/dev_vimpatch.html\n[complexity:low]: https://github.com/neovim/neovim/issues?q=is%3Aopen+is%3Aissue+label%3Acomplexity%3Alow\n[conventional_commits]: https://www.conventionalcommits.org\n[dev-doc-guide]: https://neovim.io/doc/user/develop.html#dev-doc\n[dev-lua-doc]: https://neovim.io/doc/user/develop.html#dev-lua-doc\n[LuaLS]: https://luals.github.io/wiki/annotations/\n[gcc-warnings]: https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\n[gh]: https://cli.github.com/\n[git-bisect]: http://git-scm.com/book/en/v2/Git-Tools-Debugging-with-Git\n[git-feature-branch]: https://www.atlassian.com/git/tutorials/comparing-workflows\n[git-history-filtering]: https://www.atlassian.com/git/tutorials/git-log/filtering-the-commit-history\n[github-issues]: https://github.com/neovim/neovim/issues\n[include-what-you-use-install]: https://github.com/include-what-you-use/include-what-you-use#how-to-install\n[include-what-you-use]: https://github.com/include-what-you-use/include-what-you-use#using-with-cmake\n[lua-language-server]: https://github.com/sumneko/lua-language-server/\n[nvim-lspconfig/clangd]: https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#clangd\n[pr-draft]: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request\n[pr-ready]: https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request\n[run-tests]: https://github.com/neovim/neovim/blob/master/test/README.md#running-tests\n[style-guide]: https://neovim.io/doc/user/dev_style.html#dev-style\n[wiki-faq]: https://neovim.io/doc/user/faq.html\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 13.36,
          "content": "You can install Neovim from [download](#install-from-download), [package](#install-from-package), or [source](#install-from-source) in just a few seconds.\n\n---\n\n- To start Neovim, run `nvim` (not `neovim`).\n    - [Discover plugins](https://github.com/neovim/neovim/wiki/Related-projects#plugins).\n- Before upgrading to a new version, **check [Breaking Changes](https://neovim.io/doc/user/news.html#news-breaking).**\n- For config (vimrc) see [the FAQ](https://neovim.io/doc/user/faq.html#faq-general).\n\n---\n\nInstall from download\n=====================\n\nDownloads are available on the [Releases](https://github.com/neovim/neovim/releases) page.\n\n* Latest [stable release](https://github.com/neovim/neovim/releases/latest)\n    * [macOS x86](https://github.com/neovim/neovim/releases/latest/download/nvim-macos-x86_64.tar.gz)\n    * [macOS arm](https://github.com/neovim/neovim/releases/latest/download/nvim-macos-arm64.tar.gz)\n    * [Linux](https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz)\n    * [Windows](https://github.com/neovim/neovim/releases/latest/download/nvim-win64.msi)\n* Latest [development prerelease](https://github.com/neovim/neovim/releases/nightly)\n\n\nInstall from package\n====================\n\nPackages are listed below. (You can also [build Neovim from source](#install-from-source).)\n\n## Windows\n\nWindows 8+ is required. Windows 7 or older is not supported.\n\n### [Winget](https://docs.microsoft.com/en-us/windows/package-manager/winget/)\n\n- **Release:** `winget install Neovim.Neovim`\n\n### [Chocolatey](https://chocolatey.org)\n\n- **Latest Release:** `choco install neovim` (use -y for automatically skipping confirmation messages)\n- **Development (pre-release):** `choco install neovim --pre`\n\n### [Scoop](https://scoop.sh/)\n```\nscoop bucket add main\nscoop install neovim\n```\n- **Release:** `scoop install neovim`\n\nSeveral Neovim GUIs are available from scoop (extras): [scoop.sh/#/apps?q=neovim](https://scoop.sh/#/apps?q=neovim)\n\n### Pre-built archives\n\n0. If you are missing `VCRUNTIME140.dll`, install the [Visual Studio 2015 C++ redistributable](https://support.microsoft.com/en-us/kb/2977003) (choose x86_64 or x86 depending on your system).\n1. Choose a package (**nvim-winXX.zip**) from the [releases page](https://github.com/neovim/neovim/releases).\n2. Unzip the package. Any location is fine, administrator privileges are _not_ required.\n    - `$VIMRUNTIME` will be set to that location automatically.\n3. Run `nvim.exe` from a terminal.\n\n**Optional** steps:\n\n- Add the `bin` folder (e.g. `C:\\Program Files\\nvim\\bin`) to your PATH.\n    - This makes it easy to run `nvim` from anywhere.\n- If `:set spell` does not work, create the `C:/Users/foo/AppData/Local/nvim/site/spell` folder.\n  You can then copy your spell files over (for English, located\n  [here](https://github.com/vim/vim/blob/master/runtime/spell/en.utf-8.spl) and\n  [here](https://github.com/vim/vim/blob/master/runtime/spell/en.utf-8.sug));\n- For Python plugins you need the `pynvim` module. \"Virtual envs\" are recommended. After activating the virtual env do `pip install pynvim` (in *both*). Edit your `init.vim` so that it contains the path to the env's Python executable:\n    ```vim\n    let g:python3_host_prog='C:/Users/foo/Envs/neovim3/Scripts/python.exe'\n    ```\n    - Run `:checkhealth` and read `:help provider-python`.\n- **init.vim (\"vimrc\"):** If you already have Vim installed you can copy `%userprofile%\\_vimrc` to `%userprofile%\\AppData\\Local\\nvim\\init.vim` to use your Vim config with Neovim.\n\n\n## macOS / OS X\n\n### Pre-built archives\n\nThe [Releases](https://github.com/neovim/neovim/releases) page provides pre-built binaries for macOS 10.15+.\n\nFor x86_64:\n\n    curl -LO https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-x86_64.tar.gz\n    tar xzf nvim-macos-x86_64.tar.gz\n    ./nvim-macos-x86_64/bin/nvim\n\nFor arm64:\n\n    curl -LO https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-arm64.tar.gz\n    tar xzf nvim-macos-arm64.tar.gz\n    ./nvim-macos-arm64/bin/nvim\n\n### [Homebrew](https://brew.sh) on macOS or Linux\n\n    brew install neovim\n\n### [MacPorts](https://www.macports.org/)\n\n    sudo port selfupdate\n    sudo port install neovim\n\n## Linux\n\n### Pre-built archives\n\nThe [Releases](https://github.com/neovim/neovim/releases) page provides pre-built binaries for Linux systems.\n\n```sh\ncurl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz\nsudo rm -rf /opt/nvim\nsudo tar -C /opt -xzf nvim-linux64.tar.gz\n```\n\nThen add this to your shell config (`~/.bashrc`, `~/.zshrc`, ...):\n\n    export PATH=\"$PATH:/opt/nvim-linux64/bin\"\n\n### AppImage (\"universal\" Linux package)\n\nThe [Releases](https://github.com/neovim/neovim/releases) page provides an [AppImage](https://appimage.org) that runs on most Linux systems. No installation is needed, just download `nvim.appimage` and run it. (It might not work if your Linux distribution is more than 4 years old.)\n\n    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage\n    chmod u+x nvim.appimage\n    ./nvim.appimage\n\nTo expose nvim globally:\n\n    mkdir -p /opt/nvim\n    mv nvim.appimage /opt/nvim/nvim\n\nAnd the following line to your shell config (`~/.bashrc`, `~/.zshrc`, ...):\n\n    export PATH=\"$PATH:/opt/nvim/\"\n\nIf the `./nvim.appimage` command fails, try:\n```sh\n./nvim.appimage --appimage-extract\n./squashfs-root/AppRun --version\n\n# Optional: exposing nvim globally.\nsudo mv squashfs-root /\nsudo ln -s /squashfs-root/AppRun /usr/bin/nvim\nnvim\n```\n\n### Arch Linux\n\nNeovim can be installed from the community repository:\n\n    sudo pacman -S neovim\n\nAlternatively, Neovim can be also installed using the PKGBUILD [`neovim-git`](https://aur.archlinux.org/packages/neovim-git), available on the [AUR](https://wiki.archlinux.org/index.php/Arch_User_Repository).\n\nAlternatively, Neovim Nightly builds can be also installed using the PKGBUILD [`neovim-nightly-bin`](https://aur.archlinux.org/packages/neovim-nightly-bin), available on the [AUR](https://wiki.archlinux.org/index.php/Arch_User_Repository).\n\nThe Python module is available from the community repository:\n\n    sudo pacman -S python-pynvim\n\nRuby modules (currently only supported in `neovim-git`) are available from the AUR as [`ruby-neovim`](https://aur.archlinux.org/packages/ruby-neovim).\n\n### CentOS 8 / RHEL 8\n\nNeovim is available through [EPEL (Extra Packages for Enterprise Linux)](https://fedoraproject.org/wiki/EPEL)\n\n    yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\n    yum install -y neovim python3-neovim\n\n### Clear Linux OS\n\nNeovim is available through the [neovim bundle](https://github.com/clearlinux/clr-bundles/blob/master/bundles/neovim)\n\n    sudo swupd bundle-add neovim\n\nPython (`:python`) support is available if the [python-basic bundle](https://github.com/clearlinux/clr-bundles/blob/master/bundles/python-basic) is installed.\n\n    sudo swupd bundle-add python-basic\n\n### Debian\n\nNeovim is in [Debian](https://packages.debian.org/search?keywords=neovim).\n\n    sudo apt-get install neovim\n\nPython (`:python`) support is installable via the package manager on Debian unstable.\n\n    sudo apt-get install python3-neovim\n\n### Exherbo Linux\n\nExhereses for scm and released versions are currently available in repository `::medvid`. Python client (with GTK+ GUI included) and Qt5 GUI are also available as suggestions:\n\n    cave resolve app-editors/neovim --take dev-python/neovim-python --take app-editors/neovim-qt\n\n### Fedora\n\nNeovim is in [Fedora](https://src.fedoraproject.org/rpms/neovim) starting with Fedora 25:\n\n    sudo dnf install -y neovim python3-neovim\n\nYou can also get nightly builds of git master from the [Copr automated build system](https://copr.fedoraproject.org/coprs/agriffis/neovim-nightly/):\n\n    dnf copr enable agriffis/neovim-nightly\n    dnf install -y neovim python3-neovim\n\nSee the [blog post](https://arongriffis.com/2019-03-02-neovim-nightly-builds) for information on how these are built.\n\n### Flatpak\n\nYou can find Neovim on [Flathub](https://flathub.org/apps/details/io.neovim.nvim). Providing you have Flatpak [set up](https://flatpak.org/setup/):\n\n    flatpak install flathub io.neovim.nvim\n    flatpak run io.neovim.nvim\n\nYou can add `/var/lib/flatpak/exports/bin` (or `~/.local/share/flatpak/exports/bin` if you used `--user`) to the `$PATH` and run it with `io.neovim.nvim`.\n\nNote that Flatpak'ed Neovim will look for `init.vim` in `~/.var/app/io.neovim.nvim/config/nvim` instead of `~/.config/nvim`.\n\n### Gentoo Linux\n\nAn ebuild is available in Gentoo's official portage repository:\n\n    emerge -a app-editors/neovim\n\n### GNU Guix\n\nNeovim can be installed with:\n\n    guix install neovim\n\n### GoboLinux\n\nNeovim can be installed with:\n\n    sudo -H Compile NeoVim\n\n### Nix / NixOS\n\nNeovim can be installed with:\n\n    nix-env -iA nixpkgs.neovim\n\nOr alternatively, if you use flakes:\n\n    nix profile install nixpkgs#neovim\n\n### Mageia 7\n\n    urpmi neovim\n\nTo install the Python modules:\n\n    urpmi python3-pynvim\n\n### makedeb Package Repository (MPR)\n\nNeovim is available inside the [MPR](https://mpr.makedeb.org/packages/neovim). You can install it with:\n\n    git clone https://mpr.makedeb.org/neovim\n    cd neovim/\n    makedeb -si\n\n### OpenSUSE\n\nNeovim can be installed with:\n\n    sudo zypper in neovim\n\nTo install the Python modules:\n\n    sudo zypper in python-neovim python3-neovim\n\n### PLD Linux\n\nNeovim is in [PLD Linux](https://github.com/pld-linux/neovim):\n\n    poldek -u neovim\n    poldek -u python-neovim python3-neovim\n    poldek -u python-neovim-gui python3-neovim-gui\n\n### Slackware\n\nSee [neovim on SlackBuilds](https://slackbuilds.org/apps/neovim/).\n\n### Source Mage\n\nNeovim can be installed using the Sorcery package manager:\n\n    cast neovim\n\n### Solus\n\nNeovim can be installed using the default package manager in Solus (eopkg):\n\n    sudo eopkg install neovim\n\n### Snap\n\nNeovim nightly and stable are available on the [snap store](https://snapcraft.io/nvim).\n\n**Stable Builds**\n\n```sh\nsudo snap install --beta nvim --classic\n```\n\n**Nightly Builds**\n\n```sh\nsudo snap install --edge nvim --classic\n```\n\n### Ubuntu\nAs in Debian, Neovim is in [Ubuntu](https://packages.ubuntu.com/search?keywords=neovim).\n\n    sudo apt install neovim\n\nPython (`:python`) support seems to be automatically installed\n\n    sudo apt install python3-neovim\n\nNeovim has been added to a \"Personal Package Archive\" (PPA). This allows you to install it with `apt-get`. Follow the links to the PPAs to see which versions of Ubuntu are currently available via the PPA. Choose **stable** or **unstable**:\n\n- [https://launchpad.net/~neovim-ppa/+archive/ubuntu/**stable**](https://launchpad.net/~neovim-ppa/+archive/ubuntu/stable)\n- [https://launchpad.net/~neovim-ppa/+archive/ubuntu/**unstable**](https://launchpad.net/~neovim-ppa/+archive/ubuntu/unstable)\n\n**Important:** The Neovim team does not maintain the PPA packages. For problems or questions about the PPA specifically contact https://launchpad.net/~neovim-ppa.\n\nTo be able to use **add-apt-repository** you may need to install software-properties-common:\n\n    sudo apt-get install software-properties-common\n\nIf you're using an older version Ubuntu you must use:\n\n    sudo apt-get install python-software-properties\n\nRun the following commands:\n\n    sudo add-apt-repository ppa:neovim-ppa/stable\n    sudo apt-get update\n    sudo apt-get install neovim\n\nPrerequisites for the Python modules:\n\n    sudo apt-get install python-dev python-pip python3-dev python3-pip\n\nIf you're using an older version Ubuntu you must use:\n\n    sudo apt-get install python-dev python-pip python3-dev\n    sudo apt-get install python3-setuptools\n    sudo easy_install3 pip\n\n### Void-Linux\n\nNeovim can be installed using the xbps package manager\n\n    sudo xbps-install -S neovim\n\n### Alpine Linux\n\nNeovim can be installed using the apk package manager\n\n    sudo apk add neovim\n\n## BSD\n\n### FreeBSD\n\nNeovim can be installed using [`pkg(8)`](https://www.freebsd.org/cgi/man.cgi?query=pkg&sektion=8&n=1):\n\n    pkg install neovim\n\nor [from the ports tree](https://www.freshports.org/editors/neovim/):\n\n    cd /usr/ports/editors/neovim/ && make install clean\n\nTo install the pynvim Python modules using [`pkg(8)`](https://www.freebsd.org/cgi/man.cgi?query=pkg&sektion=8&n=1) run:\n\n    pkg install py36-pynvim\n\n### OpenBSD\n\nNeovim can be installed using [`pkg_add(1)`](https://man.openbsd.org/pkg_add):\n\n    pkg_add neovim\n\nor [from the ports tree](https://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/editors/neovim/):\n\n    cd /usr/ports/editors/neovim/ && make install\n\n## Android\n\n[Termux](https://github.com/termux/termux-app) offers a Neovim package.\n\n\nInstall from source\n===================\n\nIf a package is not provided for your platform, you can build Neovim from source. See [BUILD.md](./BUILD.md) for details.  If you have the [prerequisites](./BUILD.md#build-prerequisites) then building is easy:\n\n    make CMAKE_BUILD_TYPE=Release\n    sudo make install\n\nFor Unix-like systems this installs Neovim to `/usr/local`, while for Windows to `C:\\Program Files`. Note, however, that this can complicate uninstallation. The following example avoids this by isolating an installation under `$HOME/neovim`:\n\n    rm -r build/  # clear the CMake cache\n    make CMAKE_EXTRA_FLAGS=\"-DCMAKE_INSTALL_PREFIX=$HOME/neovim\"\n    make install\n    export PATH=\"$HOME/neovim/bin:$PATH\"\n\n## Uninstall\n\nThere is a CMake target to _uninstall_ after `make install`:\n\n```sh\nsudo cmake --build build/ --target uninstall\n```\n\nAlternatively, just delete the `CMAKE_INSTALL_PREFIX` artifacts:\n\n```sh\nsudo rm /usr/local/bin/nvim\nsudo rm -r /usr/local/share/nvim/\n```\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 15.67,
          "content": "Copyright Neovim contributors. All rights reserved.\n\nNeovim is licensed under the terms of the Apache 2.0 license, except for\nparts of Neovim that were contributed under the Vim license (see below).\n\nNeovim's license follows:\n\n====\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n====\n\nThe above license applies to all parts of Neovim except (1) parts that were\ncontributed under the Vim license and (2) externally maintained libraries.\n\nThe externally maintained libraries used by Neovim are:\n\n  - Klib: a Generic Library in C. MIT/X11 license.\n  - Lua: MIT license\n  - LuaJIT: a Just-In-Time Compiler for Lua. Copyright Mike Pall. MIT license.\n  - Luv: Apache 2.0 license\n  - libmpack: MIT license\n  - libtermkey: MIT license\n  - libuv. Copyright Joyent, Inc. and other Node contributors. Node.js license.\n  - libvterm: MIT license\n  - lua-cjson: MIT license\n  - lua-compat: MIT license\n  - tree-sitter: MIT license\n  - unibilium: LGPL v3\n  - xdiff: LGPL v2\n\n====\n\nAny parts of Neovim that were contributed under the Vim license are licensed\nunder the Vim license unless the copyright holder gave permission to license\nthose contributions under the Apache 2.0 license.\n\nThe Vim license follows:\n\nVIM LICENSE\n\nI)  There are no restrictions on distributing unmodified copies of Vim except\n    that they must include this license text.  You can also distribute\n    unmodified parts of Vim, likewise unrestricted except that they must\n    include this license text.  You are also allowed to include executables\n    that you made from the unmodified Vim sources, plus your own usage\n    examples and Vim scripts.\n\nII) It is allowed to distribute a modified (or extended) version of Vim,\n    including executables and/or source code, when the following four\n    conditions are met:\n    1) This license text must be included unmodified.\n    2) The modified Vim must be distributed in one of the following five ways:\n       a) If you make changes to Vim yourself, you must clearly describe in\n\t  the distribution how to contact you.  When the maintainer asks you\n\t  (in any way) for a copy of the modified Vim you distributed, you\n\t  must make your changes, including source code, available to the\n\t  maintainer without fee.  The maintainer reserves the right to\n\t  include your changes in the official version of Vim.  What the\n\t  maintainer will do with your changes and under what license they\n\t  will be distributed is negotiable.  If there has been no negotiation\n\t  then this license, or a later version, also applies to your changes.\n\t  The current maintainers are listed here: https://github.com/orgs/vim/people.\n\t  If this changes it will be announced in appropriate places (most likely\n\t  vim.sf.net, www.vim.org and/or comp.editors).  When it is completely\n\t  impossible to contact the maintainer, the obligation to send him\n\t  your changes ceases.  Once the maintainer has confirmed that he has\n\t  received your changes they will not have to be sent again.\n       b) If you have received a modified Vim that was distributed as\n\t  mentioned under a) you are allowed to further distribute it\n\t  unmodified, as mentioned at I).  If you make additional changes the\n\t  text under a) applies to those changes.\n       c) Provide all the changes, including source code, with every copy of\n\t  the modified Vim you distribute.  This may be done in the form of a\n\t  context diff.  You can choose what license to use for new code you\n\t  add.  The changes and their license must not restrict others from\n\t  making their own changes to the official version of Vim.\n       d) When you have a modified Vim which includes changes as mentioned\n\t  under c), you can distribute it without the source code for the\n\t  changes if the following three conditions are met:\n\t  - The license that applies to the changes permits you to distribute\n\t    the changes to the Vim maintainer without fee or restriction, and\n\t    permits the Vim maintainer to include the changes in the official\n\t    version of Vim without fee or restriction.\n\t  - You keep the changes for at least three years after last\n\t    distributing the corresponding modified Vim.  When the maintainer\n\t    or someone who you distributed the modified Vim to asks you (in\n\t    any way) for the changes within this period, you must make them\n\t    available to him.\n\t  - You clearly describe in the distribution how to contact you.  This\n\t    contact information must remain valid for at least three years\n\t    after last distributing the corresponding modified Vim, or as long\n\t    as possible.\n       e) When the GNU General Public License (GPL) applies to the changes,\n\t  you can distribute the modified Vim under the GNU GPL version 2 or\n\t  any later version.\n    3) A message must be added, at least in the output of the \":version\"\n       command and in the intro screen, such that the user of the modified Vim\n       is able to see that it was modified.  When distributing as mentioned\n       under 2)e) adding the message is only required for as far as this does\n       not conflict with the license used for the changes.\n    4) The contact information as required under 2)a) and 2)d) must not be\n       removed or changed, except that the person himself can make\n       corrections.\n\nIII) If you distribute a modified version of Vim, you are encouraged to use\n     the Vim license for your changes and make them available to the\n     maintainer, including the source code.  The preferred way to do this is\n     by e-mail or by uploading the files to a server and e-mailing the URL.\n     If the number of changes is small (e.g., a modified Makefile) e-mailing a\n     context diff will do.  The e-mail address to be used is\n     <maintainer@vim.org>\n\nIV)  It is not allowed to remove this license from the distribution of the Vim\n     sources, parts of it or from a modified version.  You may use this\n     license for previous Vim releases instead of the license that they came\n     with, at your option.\n\n"
        },
        {
          "name": "MAINTAIN.md",
          "type": "blob",
          "size": 10.98,
          "content": "Maintaining the Neovim project\n==============================\n\nNotes on maintaining the Neovim project.\n\nGeneral guidelines\n------------------\n\n* Decide by cost-benefit\n* Write down what was decided\n* Constraints are good\n* Use automation to solve problems\n* Never break the API... but sometimes break the UI\n\nIssue triage\n------------\n\nIn practice we haven't found a way to forecast more precisely than \"next\" and\n\"after next\". So there are usually one or two (at most) planned milestones:\n\n* Next bugfix-release (1.0.x)\n* Next feature-release (1.x.0)\n\nThe forecasting problem might be solved with an explicit priority system (like\nVim's todo.txt). Meanwhile the Neovim priority system is defined by:\n\n* PRs nearing completion.\n* Issue labels. E.g. the `has:plan` label increases the ticket's priority merely\n  for having a plan written down: it is _closer to completion_ than tickets\n  without a plan.\n* Comment activity or new information.\n\nAnything that isn't in the next milestone, and doesn't have a finished PR—is\njust not something you care very much about, by construction. Post-release you\ncan review open issues, but chances are your next milestone is already getting\nfull... :)\n\nRelease policy\n--------------\n\nRelease \"often\", but not \"early\".\n\nThe (unreleased) `master` branch is the \"early\" channel; it should not be\nreleased if it's not stable. High-risk changes may be merged to `master` if\nthe next release is not imminent.\n\nFor maintenance releases, create a `release-x.y` branch. If the current release\nhas a major bug:\n\n1. Fix the bug on `master`.\n2. Cherry-pick the fix to `release-x.y`.\n3. Cut a release from `release-x.y`.\n    * Run `./scripts/release.sh` (requires [git cliff](https://github.com/orhun/git-cliff))\n    * The [CI job](https://github.com/neovim/neovim/blob/3d45706478cd030c3ee05b4f336164bb96138095/.github/workflows/release.yml#L11-L13)\n      will update the release assets and [force-push to the \"stable\" tag](https://github.com/neovim/neovim/blob/cdd87222c86c5b2274a13d36f23de0637462e317/.github/workflows/release.yml#L229).\n\n### Release automation\n\nNeovim automation includes a [backport bot](https://github.com/korthout/backport-action).\nTrigger the action by labeling a PR with `ci:backport release-x.y`. See `.github/workflows/backport.yml`.\n\nDeprecating and removing features\n---------------------------------\n\nNeovim inherits many features and design decisions from Vim, not all of which\nalign with the goals of this project. It is sometimes desired or necessary to\nremove existing features, or refactor parts of the code that would change\nuser's workflow. In these cases, a deprecation policy is needed to properly\ninform users of the change.\n\nWhen a (non-experimental) feature is slated to be removed it should:\n\n1. Be _soft_ deprecated in the _next_ release\n    - Use of the deprecated feature will still work.\n    - This means deprecating via documentation and annotation (`@deprecated`).\n    - Include a note in `deprecated.txt`.\n    - For Lua features, use `vim.deprecate()`. The specified version is the\n      current minor version + 2. For example, if the current version is\n      `v0.10.0-dev-1957+gd676746c33` then use `0.12`.\n    - For Vimscript features, use `v:lua.vim.deprecate()`. Use the same version\n      as described for Lua features.\n    - `vim.deprecate(…, 'x.y.z')` where major version `x` is greater than the\n      current Nvim major version, is always treated as _soft_ deprecation.\n2. Be _hard_ deprecated in a following a release in which it was soft deprecated.\n    - Use of the deprecated feature will still work but should issue a warning.\n    - Features implemented in C will need bespoke implementations to communicate\n      to users that the feature is deprecated.\n3. Be removed in a release following the release in which it was hard deprecated\n    - Usually this will be the next release, but it may be a later release if\n      a longer deprecation cycle is desired\n    - If possible, keep the feature as a stub (e.g. function API) and issue an\n      error when it is accessed.\n\nExample:\n\n                    Deprecation                            Removal\n                         ┆                 ┆                 ┆\n                         ┆      Soft       ┆      Hard       ┆\n                         ┆   Deprecation   ┆   Deprecation   ┆\n                         ┆     Period      ┆     Period      ┆\n             ────────────────────────────────────────────────────────────\n    Version:            0.10              0.11              0.12\n             ────────────────────────────────────────────────────────────\n             Old code         Old code          Old code\n                                 +                 +\n                              New code          New code         New code\n\nFeature removals which may benefit from community input or further discussion\nshould also have a tracking issue (which should be linked to in the release\nnotes).\n\nExceptions to this policy may be made (for experimental subsystems or when\nthere is broad consensus among maintainers). The rationale for the exception\nshould be stated explicitly and publicly.\n\nThird-party dependencies\n------------------------\n\nFor some dependencies we maintain temporary \"forks\", which are simply private\nbranches with a few extra patches, while we wait for the upstream project to\nmerge the patches. This is done instead of maintaining the patches as (fragile)\nCMake `PATCH_COMMAND` steps.\n\nThese \"bundled\" dependencies can be updated by bumping their versions in `cmake.deps/deps.txt`.\nSome can be auto-bumped by `scripts/bump_deps.lua`.\n\n* [LuaJIT](https://github.com/LuaJIT/LuaJIT)\n* [Lua](https://www.lua.org/download.html)\n* [Luv](https://github.com/luvit/luv)\n    * When bumping, also sync [our bundled documentation](https://github.com/neovim/neovim/blob/master/runtime/doc/luvref.txt) with [the upstream documentation](https://github.com/luvit/luv/blob/master/docs.md).\n* [gettext](https://ftp.gnu.org/pub/gnu/gettext/)\n* [libiconv](https://ftp.gnu.org/pub/gnu/libiconv)\n* [libuv](https://github.com/libuv/libuv)\n* [lua-compat](https://github.com/keplerproject/lua-compat-5.3)\n* [tree-sitter](https://github.com/tree-sitter/tree-sitter)\n* [unibilium](https://github.com/neovim/unibilium)\n    * The original project [was abandoned](https://github.com/neovim/neovim/issues/10302), so the [neovim/unibilium](https://github.com/neovim/unibilium) fork is considered \"upstream\" and is maintained on the `master` branch.\n* [treesitter parsers](https://github.com/neovim/neovim/blob/7e97c773e3ba78fcddbb2a0b9b0d572c8210c83e/cmake.deps/deps.txt#L47-L62)\n\n### Vendored dependencies\n\nThese dependencies are \"vendored\" (inlined), we must update the sources manually:\n\n* `src/mpack/`: [libmpack](https://github.com/libmpack/libmpack)\n    * send improvements upstream!\n* `src/mpack/lmpack.c`: [libmpack-lua](https://github.com/libmpack/libmpack-lua)\n    * send improvements upstream!\n* `src/xdiff/`: [xdiff](https://github.com/git/git/tree/master/xdiff)\n* `src/cjson/`: [lua-cjson](https://github.com/openresty/lua-cjson)\n* `src/klib/`: [Klib](https://github.com/attractivechaos/klib)\n* `runtime/lua/vim/inspect.lua`: [inspect.lua](https://github.com/kikito/inspect.lua)\n* `src/nvim/tui/terminfo_defs.h`: terminfo definitions\n    * Run `scripts/update_terminfo.sh` to update these definitions.\n* `runtime/lua/vim/lsp/_meta/protocol.lua`: LSP specification\n    * Run `scripts/gen_lsp.lua` to update.\n* `runtime/lua/vim/_meta/lpeg.lua`: LPeg definitions.\n    * Refer to [`LuaCATS/lpeg`](https://github.com/LuaCATS/lpeg) for updates.\n    * Update the git SHA revision from which the documentation was taken.\n* `runtime/lua/vim/re.lua`: LPeg regex module.\n    * Vendored from LPeg. Needs to be updated when LPeg is updated.\n* `runtime/lua/vim/_meta/re.lua`: docs for LPeg regex module.\n    * Needs to be updated when LPeg is updated.\n* `src/bit.c`: only for PUC lua: port of `require'bit'` from luajit https://bitop.luajit.org/\n* `runtime/lua/coxpcall.lua`: coxpcall (only needed for PUC lua, builtin to luajit)\n\nOther dependencies\n--------------------------\n\n* GitHub users:\n    * https://github.com/marvim\n    * https://github.com/nvim-winget\n* Org secrets/tokens:\n    * `CODECOV_TOKEN`\n    * `BACKPORT_KEY`\n* Org/repo variables:\n    * `BACKPORT_APP`\n* Domain names (held in https://namecheap.com):\n    * neovim.org\n    * neovim.io\n    * packspec.org\n    * pkgjson.org\n* DNS for the above domains is managed in https://cloudflare.com (not the domain registrar)\n\n\nRefactoring\n-----------\n\n### Frozen legacy modules\n\nRefactoring Vim structurally and aesthetically is an important goal of Neovim.\nBut there are some modules that should not be changed significantly, because\nthey are maintained by Vim, at present. Until someone takes \"ownership\" of\nthese modules, the cost of any significant changes (including style or\nstructural changes that re-arrange the code) to these modules outweighs the\nbenefit. The modules are:\n\n- `regexp.c`\n- `indent_c.c`\n\nAutomation (CI)\n---------------\n\n### Backup\n\nDiscussions from issues and PRs are backed up here:\nhttps://github.com/neovim/neovim-backup\n\n### Development guidelines\n\n* CI and automation jobs are primarily driven by GitHub Actions.\n* Avoid macOS if an Ubuntu or a Windows runner can be used instead. This is\n  because macOS runners have [tighter restrictions on the number of concurrent\n  jobs](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits).\n* Runner versions:\n    * For special-purpose jobs where the runner version doesn't really matter,\n      prefer `-latest` tags so we don't need to manually bump the versions. An\n      example of a special-purpose workflow is `labeler_pr.yml`.\n    * For our testing job `test.yml`, prefer to use the latest version\n      explicitly. Avoid using the `-latest` tags here as it makes it difficult\n      to determine from an unrelated PR if a failure is due to the PR itself or\n      due to GitHub bumping the `-latest` tag without our knowledge. There's\n      also a high risk that automatically bumping the CI versions will fail due\n      to manual work being required from experience.\n    * For our release job, which is `release.yml`, prefer to use the oldest\n      stable (i.e. non-deprecated) versions available. The reason is that we're\n      trying to produce images that work in the broadest number of environments,\n      and therefore want to use older releases.\n\n### Special labels\n\nSome github labels are used to trigger certain jobs:\n\n* `ci:backport release-x.y` - backport to branch `release-x.y`\n* `ci:s390x` - enable s390x CI\n* `ci:skip-news` - skip news.yml workflows\n* `ci:windows-asan` - test windows with ASAN enabled\n* `needs:response` - close PR after a certain amount of time if author doesn't\n  respond\n\nSee also\n--------\n\n* https://github.com/neovim/neovim/issues/862\n* https://github.com/git/git/blob/master/Documentation/howto/maintain-git.txt\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.13,
          "content": "ifeq ($(OS),Windows_NT)\n  SHELL := powershell.exe\n  .SHELLFLAGS := -NoProfile -NoLogo\n  MKDIR := @$$null = new-item -itemtype directory -force\n  TOUCH := @$$null = new-item -force\n  RM := remove-item -force\n  CMAKE := cmake\n  CMAKE_GENERATOR := Ninja\n  define rmdir\n    if (Test-Path $1) { remove-item -recurse $1 }\n  endef\nelse\n  MKDIR := mkdir -p\n  TOUCH := touch\n  RM := rm -rf\n  CMAKE := $(shell (command -v cmake3 || command -v cmake || echo cmake))\n  CMAKE_GENERATOR ?= \"$(shell (command -v ninja > /dev/null 2>&1 && echo \"Ninja\") || echo \"Unix Makefiles\")\"\n  define rmdir\n    rm -rf $1\n  endef\nendif\n\nMAKEFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))\nMAKEFILE_DIR  := $(dir $(MAKEFILE_PATH))\n\nfilter-false = $(strip $(filter-out 0 off OFF false FALSE,$1))\nfilter-true = $(strip $(filter-out 1 on ON true TRUE,$1))\n\n# See contrib/local.mk.example\n-include local.mk\n\nall: nvim\n\nCMAKE_FLAGS := -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE)\n# Extra CMake flags which extend the default set\nCMAKE_EXTRA_FLAGS ?=\nNVIM_PRG := $(MAKEFILE_DIR)/build/bin/nvim\n\n# CMAKE_INSTALL_PREFIX\n#   - May be passed directly or as part of CMAKE_EXTRA_FLAGS.\n#   - `checkprefix` target checks that it matches the CMake-cached value. #9615\nifneq (,$(CMAKE_INSTALL_PREFIX)$(CMAKE_EXTRA_FLAGS))\nCMAKE_INSTALL_PREFIX := $(shell echo $(CMAKE_EXTRA_FLAGS) | 2>/dev/null \\\n    grep -o 'CMAKE_INSTALL_PREFIX=[^ ]\\+' | cut -d '=' -f2)\nendif\nifneq (,$(CMAKE_INSTALL_PREFIX))\noverride CMAKE_EXTRA_FLAGS += -DCMAKE_INSTALL_PREFIX=$(CMAKE_INSTALL_PREFIX)\n\ncheckprefix:\n\t@if [ -f build/.ran-cmake ]; then \\\n\t  cached_prefix=$(shell $(CMAKE) -L -N build | 2>/dev/null grep 'CMAKE_INSTALL_PREFIX' | cut -d '=' -f2); \\\n\t  if ! [ \"$(CMAKE_INSTALL_PREFIX)\" = \"$$cached_prefix\" ]; then \\\n\t    printf \"Re-running CMake: CMAKE_INSTALL_PREFIX '$(CMAKE_INSTALL_PREFIX)' does not match cached value '%s'.\\n\" \"$$cached_prefix\"; \\\n\t    $(RM) build/.ran-cmake; \\\n\t  fi \\\n\tfi\nelse\ncheckprefix: ;\nendif\n\nDEPS_BUILD_DIR ?= \".deps\"\nifneq (1,$(words [$(DEPS_BUILD_DIR)]))\n  $(error DEPS_BUILD_DIR must not contain whitespace)\nendif\n\nDEPS_CMAKE_FLAGS ?=\nUSE_BUNDLED ?=\n\nifneq (,$(USE_BUNDLED))\n  BUNDLED_CMAKE_FLAG := -DUSE_BUNDLED=$(USE_BUNDLED)\nendif\n\nifneq (,$(findstring functionaltest-lua,$(MAKECMDGOALS)))\n  BUNDLED_LUA_CMAKE_FLAG := -DUSE_BUNDLED_LUA=ON\n  $(shell [ -x $(DEPS_BUILD_DIR)/usr/bin/lua ] || $(RM) build/.ran-*)\nendif\n\n# For use where we want to make sure only a single job is run.  This does issue \n# a warning, but we need to keep SCRIPTS argument.\nSINGLE_MAKE = export MAKEFLAGS= ; $(MAKE)\n\nnvim: build/.ran-cmake deps\n\t$(CMAKE) --build build\n\nlibnvim: build/.ran-cmake deps\n\t$(CMAKE) --build build --target libnvim\n\ncmake:\n\t$(TOUCH) CMakeLists.txt\n\t$(MAKE) build/.ran-cmake\n\nbuild/.ran-cmake: | deps\n\t$(CMAKE) -B build -G $(CMAKE_GENERATOR) $(CMAKE_FLAGS) $(CMAKE_EXTRA_FLAGS) $(MAKEFILE_DIR)\n\t$(TOUCH) $@\n\ndeps: | build/.ran-deps-cmake\nifeq ($(call filter-true,$(USE_BUNDLED)),)\n\t$(CMAKE) --build $(DEPS_BUILD_DIR)\nendif\n\nifeq ($(call filter-true,$(USE_BUNDLED)),)\n$(DEPS_BUILD_DIR):\n\t$(MKDIR) $@\nbuild/.ran-deps-cmake:: $(DEPS_BUILD_DIR)\n\t$(CMAKE) -S $(MAKEFILE_DIR)/cmake.deps -B $(DEPS_BUILD_DIR) -G $(CMAKE_GENERATOR) $(BUNDLED_CMAKE_FLAG) $(BUNDLED_LUA_CMAKE_FLAG) $(DEPS_CMAKE_FLAGS)\nendif\nbuild/.ran-deps-cmake::\n\t$(MKDIR) build\n\t$(TOUCH) \"$@\"\n\n# TODO: cmake 3.2+ add_custom_target() has a USES_TERMINAL flag.\noldtest: | nvim\n\t$(SINGLE_MAKE) -C test/old/testdir clean\nifeq ($(strip $(TEST_FILE)),)\n\t$(SINGLE_MAKE) -C test/old/testdir NVIM_PRG=$(NVIM_PRG) $(MAKEOVERRIDES)\nelse\n\t@# Handle TEST_FILE=test_foo{,.res,.vim}.\n\t$(SINGLE_MAKE) -C test/old/testdir NVIM_PRG=$(NVIM_PRG) SCRIPTS= $(MAKEOVERRIDES) $(patsubst %.vim,%,$(patsubst %.res,%,$(TEST_FILE)))\nendif\n# Build oldtest by specifying the relative .vim filename.\n.PHONY: phony_force\ntest/old/testdir/%.vim: phony_force nvim\n\t$(SINGLE_MAKE) -C test/old/testdir NVIM_PRG=$(NVIM_PRG) SCRIPTS= $(MAKEOVERRIDES) $(patsubst test/old/testdir/%.vim,%,$@)\n\nfunctionaltest-lua: | nvim\n\t$(CMAKE) --build build --target functionaltest\n\nFORMAT=formatc formatlua format\nLINT=lintlua lintsh lintc clang-analyzer lintcommit lintdoc lint\nTEST=functionaltest unittest\ngenerated-sources benchmark $(FORMAT) $(LINT) $(TEST) doc: | build/.ran-cmake\n\t$(CMAKE) --build build --target $@\n\ntest: $(TEST)\n\niwyu: build/.ran-cmake\n\t$(CMAKE) --preset iwyu\n\t$(CMAKE) --build build > build/iwyu.log\n\tiwyu-fix-includes --only_re=\"src/nvim\" --ignore_re=\"(src/nvim/eval/encode.c\\\n\t|src/nvim/auto/\\\n\t|src/nvim/os/lang.c\\\n\t|src/nvim/map.c\\\n\t)\" --nosafe_headers < build/iwyu.log\n\t$(CMAKE) -B build -U ENABLE_IWYU\n\t$(CMAKE) --build build\n\nclean:\nifneq ($(wildcard build),)\n\t$(CMAKE) --build build --target clean\nendif\n\t$(MAKE) -C test/old/testdir clean\n\t$(MAKE) -C runtime/indent clean\n\ndistclean:\n\t$(call rmdir, $(DEPS_BUILD_DIR))\n\t$(call rmdir, build)\n\t$(MAKE) clean\n\ninstall: checkprefix nvim\n\t$(CMAKE) --install build\n\nappimage:\n\tbash scripts/genappimage.sh\n\n# Build an appimage with embedded update information.\n#   appimage-nightly: for nightly builds\n#   appimage-latest: for a release\nappimage-%:\n\tbash scripts/genappimage.sh $*\n\n.PHONY: test clean distclean nvim libnvim cmake deps install appimage checkprefix benchmark $(FORMAT) $(LINT) $(TEST)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.55,
          "content": "<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/neovim/neovim.github.io/master/logos/neovim-logo-300x87.png\" alt=\"Neovim\">\n\n  <a href=\"https://neovim.io/doc/\">Documentation</a> |\n  <a href=\"https://app.element.io/#/room/#neovim:matrix.org\">Chat</a>\n</h1>\n\n[![Coverity Scan analysis](https://scan.coverity.com/projects/2227/badge.svg)](https://scan.coverity.com/projects/2227)\n[![Packages](https://repology.org/badge/tiny-repos/neovim.svg)](https://repology.org/metapackage/neovim)\n[![Debian CI](https://badges.debian.net/badges/debian/testing/neovim/version.svg)](https://buildd.debian.org/neovim)\n[![Downloads](https://img.shields.io/github/downloads/neovim/neovim/total.svg?maxAge=2592001)](https://github.com/neovim/neovim/releases/)\n\nNeovim is a project that seeks to aggressively refactor [Vim](https://www.vim.org/) in order to:\n\n- Simplify maintenance and encourage [contributions](CONTRIBUTING.md)\n- Split the work between multiple developers\n- Enable [advanced UIs] without modifications to the core\n- Maximize [extensibility](https://neovim.io/doc/user/ui.html)\n\nSee the [Introduction](https://github.com/neovim/neovim/wiki/Introduction) wiki page and [Roadmap]\nfor more information.\n\nFeatures\n--------\n\n- Modern [GUIs](https://github.com/neovim/neovim/wiki/Related-projects#gui)\n- [API access](https://github.com/neovim/neovim/wiki/Related-projects#api-clients)\n  from any language including C/C++, C#, Clojure, D, Elixir, Go, Haskell, Java/Kotlin,\n  JavaScript/Node.js, Julia, Lisp, Lua, Perl, Python, Racket, Ruby, Rust\n- Embedded, scriptable [terminal emulator](https://neovim.io/doc/user/terminal.html)\n- Asynchronous [job control](https://github.com/neovim/neovim/pull/2247)\n- [Shared data (shada)](https://github.com/neovim/neovim/pull/2506) among multiple editor instances\n- [XDG base directories](https://github.com/neovim/neovim/pull/3470) support\n- Compatible with most Vim plugins, including Ruby and Python plugins\n\nSee [`:help nvim-features`][nvim-features] for the full list, and [`:help news`][nvim-news] for noteworthy changes in the latest version!\n\nInstall from package\n--------------------\n\nPre-built packages for Windows, macOS, and Linux are found on the\n[Releases](https://github.com/neovim/neovim/releases/) page.\n\n[Managed packages] are in [Homebrew], [Debian], [Ubuntu], [Fedora], [Arch Linux], [Void Linux], [Gentoo], and more!\n\nInstall from source\n-------------------\n\nSee [BUILD.md](./BUILD.md) and [supported platforms](https://neovim.io/doc/user/support.html#supported-platforms) for details.\n\nThe build is CMake-based, but a Makefile is provided as a convenience.\nAfter installing the dependencies, run the following command.\n\n    make CMAKE_BUILD_TYPE=RelWithDebInfo\n    sudo make install\n\nTo install to a non-default location:\n\n    make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=/full/path/\n    make install\n\nCMake hints for inspecting the build:\n\n- `cmake --build build --target help` lists all build targets.\n- `build/CMakeCache.txt` (or `cmake -LAH build/`) contains the resolved values of all CMake variables.\n- `build/compile_commands.json` shows the full compiler invocations for each translation unit.\n\nTransitioning from Vim\n--------------------\n\nSee [`:help nvim-from-vim`](https://neovim.io/doc/user/nvim.html#nvim-from-vim) for instructions.\n\nProject layout\n--------------\n\n    ├─ cmake/           CMake utils\n    ├─ cmake.config/    CMake defines\n    ├─ cmake.deps/      subproject to fetch and build dependencies (optional)\n    ├─ runtime/         plugins and docs\n    ├─ src/nvim/        application source code (see src/nvim/README.md)\n    │  ├─ api/          API subsystem\n    │  ├─ eval/         Vimscript subsystem\n    │  ├─ event/        event-loop subsystem\n    │  ├─ generators/   code generation (pre-compilation)\n    │  ├─ lib/          generic data structures\n    │  ├─ lua/          Lua subsystem\n    │  ├─ msgpack_rpc/  RPC subsystem\n    │  ├─ os/           low-level platform code\n    │  └─ tui/          built-in UI\n    └─ test/            tests (see test/README.md)\n\nLicense\n-------\n\nNeovim contributions since [b17d96][license-commit] are licensed under the\nApache 2.0 license, except for contributions copied from Vim (identified by the\n`vim-patch` token). See LICENSE for details.\n\n    Vim is Charityware.  You can use and copy it as much as you like, but you are\n    encouraged to make a donation for needy children in Uganda.  Please see the\n    kcc section of the vim docs or visit the ICCF web site, available at these URLs:\n\n            https://iccf-holland.org/\n            https://www.vim.org/iccf/\n            https://www.iccf.nl/\n\n    You can also sponsor the development of Vim.  Vim sponsors can vote for\n    features.  The money goes to Uganda anyway.\n\n[license-commit]: https://github.com/neovim/neovim/commit/b17d9691a24099c9210289f16afb1a498a89d803\n[nvim-features]: https://neovim.io/doc/user/vim_diff.html#nvim-features\n[nvim-news]: https://neovim.io/doc/user/news.html\n[Roadmap]: https://neovim.io/roadmap/\n[advanced UIs]: https://github.com/neovim/neovim/wiki/Related-projects#gui\n[Managed packages]: ./INSTALL.md#install-from-package\n[Debian]: https://packages.debian.org/testing/neovim\n[Ubuntu]: https://packages.ubuntu.com/search?keywords=neovim\n[Fedora]: https://packages.fedoraproject.org/pkgs/neovim/neovim/\n[Arch Linux]: https://www.archlinux.org/packages/?q=neovim\n[Void Linux]: https://voidlinux.org/packages/?arch=x86_64&q=neovim\n[Gentoo]: https://packages.gentoo.org/packages/app-editors/neovim\n[Homebrew]: https://formulae.brew.sh/formula/neovim\n\n<!-- vim: set tw=80: -->\n"
        },
        {
          "name": "cmake.config",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake.deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake.packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}