{
  "metadata": {
    "timestamp": 1736557762466,
    "page": 924,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "VSCodium/vscodium",
      "stars": 26025,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.36,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 2\ntab_width = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.sh]\nindent_style = space\nindent_size = 2\n\n[*.{yml,yaml}]\nindent_style = space\nindent_size = 2\n\n[*.patch]\ntrim_trailing_whitespace = false\ninsert_final_newline = false\n\n[*.svg]\ninsert_final_newline = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.42,
          "content": "vscode*\nVS*/*\nVSCode*\nVSCodium*\n.DS_Store\n*.env\nassets/\nbuild/linux/appimage/out\nbuild/linux/appimage/pkg2appimage.AppDir\nbuild/linux/appimage/pkg2appimage-*.AppImage\nbuild/linux/appimage/pkg2appimage.AppImage\nbuild/linux/appimage/squashfs-root\nbuild/linux/appimage/VSCodium\nbuild/windows/msi/releasedir\nbuild/windows/msi/Files*.wxs\nbuild/windows/msi/Files*.wixobj\nstores/snapcraft/insider/*.snap\nstores/snapcraft/stable/*.snap\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.01,
          "content": "20.18\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.88,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nvscodium@protonmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.72,
          "content": "# Contributing\n\n:+1::tada: First off, thanks for taking the time to contribute! :tada::+1:\n\n#### Table Of Contents\n\n- [Code of Conduct](#code-of-conduct)\n- [Reporting Bugs](#reporting-bugs)\n- [Making Changes](#making-changes)\n\n## Code of Conduct\n\nThis project and everyone participating in it is governed by the [VSCodium Code of Conduct](CODE_OF_CONDUCT.md). By participating, you are expected to uphold this code.\n\n## Reporting Bugs\n\n### Before Submitting an Issue\n\nBefore creating bug reports, please check existing issues and [the Troubleshooting page](https://github.com/VSCodium/vscodium/blob/master/docs/troubleshooting.md) as you might find out that you don't need to create one.\nWhen you are creating a bug report, please include as many details as possible. Fill out [the required template](https://github.com/VSCodium/vscodium/issues/new?&labels=bug&&template=bug_report.md), the information it asks for helps us resolve issues faster.\n\n## Making Changes\n\nIf you want to make changes, please read [the Build page](./docs/howto-build.md).\n\n### Building VSCodium\n\nTo build VSCodium, please follow the command found in the section [`Build Scripts`](./docs/howto-build.md#build-scripts).\n\n### Updating patches\n\nIf you want to update the existing patches, please follow the section [`Patch Update Process - Semi-Automated`](./docs/howto-build.md#patch-update-process-semiauto).\n\n### Add a new patch\n\n- first, you need to build VSCodium\n- then use the command `patch.sh <your patch name>`, to initiate a new patch\n- when the script pauses at `Press any key when the conflict have been resolved...`, open `vscode` directory in **VSCodium**\n- run `yarn watch`\n- run `./script/code.sh`\n- make your changes\n- press any key to continue the script `patch.sh`\n"
        },
        {
          "name": "FUNDING.json",
          "type": "blob",
          "size": 0.1,
          "content": "{\n  \"drips\": {\n    \"ethereum\": {\n      \"ownedBy\": \"0x7806393Cb27692C6A52eE3D5338A75cECD168219\"\n    }\n  }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.16,
          "content": "MIT License\n\nCopyright (c) 2018-present The VSCodium contributors\nCopyright (c) 2018-present Peter Squicciarini\nCopyright (c) 2015-present Microsoft Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.28,
          "content": "<div id=\"vscodium-logo\" align=\"center\">\n    <br />\n    <img src=\"./icons/stable/codium_cnl.svg\" alt=\"VSCodium Logo\" width=\"200\"/>\n    <h1>VSCodium</h1>\n    <h3>Free/Libre Open Source Software Binaries of VS Code</h3>\n</div>\n\n<div id=\"badges\" align=\"center\">\n\n[![current release](https://img.shields.io/github/release/vscodium/vscodium.svg)](https://github.com/vscodium/vscodium/releases)\n[![license](https://img.shields.io/github/license/VSCodium/vscodium.svg)](https://github.com/VSCodium/vscodium/blob/master/LICENSE)\n[![Gitter](https://img.shields.io/gitter/room/vscodium/vscodium.svg)](https://gitter.im/VSCodium/Lobby)\n[![codium](https://snapcraft.io//codium/badge.svg)](https://snapcraft.io/codium)\n[![codium](https://snapcraft.io//codium/trending.svg?name=0)](https://snapcraft.io/codium)\n\n[![build status (linux)](https://img.shields.io/github/actions/workflow/status/VSCodium/vscodium/stable-linux.yml?branch=master&label=build%28linux%29)](https://github.com/VSCodium/vscodium/actions/workflows/stable-linux.yml?query=branch%3Amaster)\n[![build status (macos)](https://img.shields.io/github/actions/workflow/status/VSCodium/vscodium/stable-macos.yml?branch=master&label=build%28macOS%29)](https://github.com/VSCodium/vscodium/actions/workflows/stable-macos.yml?query=branch%3Amaster)\n[![build status (windows)](https://img.shields.io/github/actions/workflow/status/VSCodium/vscodium/stable-windows.yml?branch=master&label=build%28windows%29)](https://github.com/VSCodium/vscodium/actions/workflows/stable-windows.yml?query=branch%3Amaster)\n\n</div>\n\n**This is not a fork. This is a repository of scripts to automatically build [Microsoft's `vscode` repository](https://github.com/microsoft/vscode) into freely-licensed binaries with a community-driven default configuration.**\n\n## Table of Contents\n\n- [Download/Install](#download-install)\n  - [Install with Brew](#install-with-brew)\n  - [Install with Windows Package Manager (WinGet)](#install-with-winget)\n  - [Install with Chocolatey](#install-with-choco)\n  - [Install with Scoop](#install-with-scoop)\n  - [Install with snap](#install-with-snap)\n  - [Install with Package Manager](#install-with-package-manager)\n  - [Install on Arch Linux](#install-on-arch-linux)\n  - [Flatpak Option](#flatpak)\n- [Build](#build)\n- [Why Does This Exist](#why)\n- [More Info](#more-info)\n- [Supported Platforms](#supported-platforms)\n\n## <a id=\"download-install\"></a>Download/Install\n\n:tada: :tada:\nDownload latest release here:\n[stable](https://github.com/VSCodium/vscodium/releases) or\n[insiders](https://github.com/VSCodium/vscodium-insiders/releases)\n:tada: :tada:\n\n[More info / helpful tips are here.](https://github.com/VSCodium/vscodium/blob/master/docs/index.md)\n\n\n#### <a id=\"install-with-brew\"></a>Install with Brew (Mac)\n\nIf you are on a Mac and have [Homebrew](https://brew.sh/) installed:\n```bash\n# stable\nbrew install --cask vscodium\n\n# insiders\nbrew tap homebrew/cask-versions\nbrew install --cask vscodium-insiders\n```\n\n*Note for macOS users: if you can't open the App, please read [the following troubleshooting](https://github.com/VSCodium/vscodium/blob/master/docs/troubleshooting.md#macos).*\n\n#### <a id=\"install-with-winget\"></a>Install with Windows Package Manager (WinGet)\n\nIf you use Windows and have [Windows Package Manager](https://github.com/microsoft/winget-cli) installed:\n```cmd\n:: stable\nwinget install -e --id VSCodium.VSCodium\n\n:: insider\nwinget install -e --id VSCodium.VSCodium.Insiders\n```\n\n#### <a id=\"install-with-choco\"></a>Install with Chocolatey (Windows)\n\nIf you use Windows and have [Chocolatey](https://chocolatey.org) installed (thanks to [@Thilas](https://github.com/Thilas)):\n```cmd\n:: stable\nchoco install vscodium\n\n:: insider\nchoco install vscodium-insiders\n```\n\n#### <a id=\"install-with-scoop\"></a>Install with Scoop (Windows)\n\nIf you use Windows and have [Scoop](https://scoop.sh) installed:\n```bash\nscoop bucket add extras\nscoop install vscodium\n```\n\n#### <a id=\"install-with-snap\"></a>Install with snap (GNU/Linux)\n\nVSCodium is available in the [Snap Store](https://snapcraft.io/) as [Codium](https://snapcraft.io/codium), thanks to the help of the [Snapcrafters](https://github.com/snapcrafters/codium) community.\nIf your GNU/Linux distribution has support for [snaps](https://snapcraft.io/docs/installing-snapd):\n\n```bash\nsnap install codium --classic\n```\n\n#### <a id=\"install-with-package-manager\"></a>Install with Package Manager (GNU/Linux)\n\nYou can always install using the downloads (deb, rpm, tar) on the releases page for [stable](https://github.com/VSCodium/vscodium/releases) or [insiders](https://github.com/VSCodium/vscodium-insiders/releases), but you can also install using your favorite package manager and get automatic updates.\n\n[@paulcarroty](https://github.com/paulcarroty) has set up a repository with instructions for `apt`, `dnf` and `zypper` [here](https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo).\n\nAny issues installing VSCodium using your package manager should be directed to that repository's issue tracker.\n\n#### <a id=\"install-on-arch-linux\"></a>Install on Arch Linux\n\nVSCodium is available in [AUR](https://wiki.archlinux.org/index.php/Arch_User_Repository), maintained by [@binex-dsk](https://github.com/binex-dsk) as package [vscodium-bin](https://aur.archlinux.org/packages/vscodium-bin/) (stable) and as [vscodium-insiders-bin](https://aur.archlinux.org/packages/vscodium-insiders-bin).\n\nIf you want to save disk space by having VSCodium use the Electron system-wide, you also have [vscodium-electron](https://aur.archlinux.org/packages/vscodium-electron),\nmaintained by [@m00nw4tch3r](https://aur.archlinux.org/account/m00nw4tch3r).\n\nAn alternative package [vscodium-git](https://aur.archlinux.org/packages/vscodium-git/), maintained by [@cedricroijakkers](https://github.com/cedricroijakkers), is also available should you wish to compile from source yourself.\n\n#### <a id=\"flatpak\"></a>Flatpak Option (GNU/Linux)\n\nVSCodium is available as a Flatpak app [here](https://flathub.org/apps/details/com.vscodium.codium) and the build repo is [here](https://github.com/flathub/com.vscodium.codium).\nIf your distribution has support for [flatpak](https://flathub.org), and you have enabled the [flathub repo](https://flatpak.org/setup/):\n\n```bash\nflatpak install flathub com.vscodium.codium\nflatpak run com.vscodium.codium\n```\n\n## <a id=\"build\"></a>Build\n\nBuild instructions can be found [here](https://github.com/VSCodium/vscodium/blob/master/docs/howto-build.md)\n\n## <a id=\"why\"></a>Why Does This Exist\n\nThis repository contains build files to generate free release binaries of Microsoft's VS Code. When we speak of \"free software\", we're talking about freedom, not price.\n\nMicrosoft's releases of Visual Studio Code are licensed under [this not-FLOSS license](https://code.visualstudio.com/license) and contain telemetry/tracking. According to [this comment](https://github.com/Microsoft/vscode/issues/60#issuecomment-161792005) from a Visual Studio Code maintainer:\n\n> When we [Microsoft] build Visual Studio Code, we do exactly this. We clone the vscode repository, we lay down a customized product.json that has Microsoft specific functionality (telemetry, gallery, logo, etc.), and then produce a build that we release under our license.\n>\n> When you clone and build from the vscode repo, none of these endpoints are configured in the default product.json. Therefore, you generate a \"clean\" build, without the Microsoft customizations, which is by default licensed under the MIT license\n\nThis repo exists so that you don't have to download+build from source. The build scripts in this repo clone Microsoft's vscode repo, run the build commands, and upload the resulting binaries to [GitHub releases](https://github.com/VSCodium/vscodium/releases). __These binaries are licensed under the MIT license. Telemetry is disabled.__\n\nIf you want to build from source yourself, head over to [Microsoft's vscode repo](https://github.com/Microsoft/vscode) and follow their [instructions](https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run). This repo exists to make it easier to get the latest version of MIT-licensed VS Code.\n\nMicrosoft's build process (which we are running to build the binaries) does download additional files. Those packages downloaded during build are:\n\n- Pre-built extensions from the GitHub:\n  - [ms-vscode.js-debug-companion](https://github.com/microsoft/vscode-js-debug-companion)\n  - [ms-vscode.js-debug](https://github.com/microsoft/vscode-js-debug)\n  - [ms-vscode.vscode-js-profile-table](https://github.com/microsoft/vscode-js-profile-visualizer)\n- From [Electron releases](https://github.com/electron/electron/releases) (using [gulp-atom-electron](https://github.com/joaomoreno/gulp-atom-electron))\n  - electron\n  - ffmpeg\n\n## <a id=\"more-info\"></a>More Info\n\n### Documentation\n\nFor more information on getting all the telemetry disabled, tips for migrating from Visual Studio Code to VSCodium and more, have a look at [the Docs page](https://github.com/VSCodium/vscodium/blob/master/docs/index.md) page.\n\n### Troubleshooting\n\nIf you have any issue, please check [the Troubleshooting page](https://github.com/VSCodium/vscodium/blob/master/docs/troubleshooting.md) or the existing issues.\n\n### Extensions and the Marketplace\n\nAccording to the VS Code Marketplace [Terms of Use](https://aka.ms/vsmarketplace-ToU), _you may only install and use Marketplace Offerings with Visual Studio Products and Services._ For this reason, VSCodium uses [open-vsx.org](https://open-vsx.org/), an open source registry for VS Code extensions. See the [Extensions + Marketplace](https://github.com/VSCodium/vscodium/blob/master/docs/index.md#extensions-marketplace) section on the Docs page for more details.\n\nPlease note that some Visual Studio Code extensions have licenses that restrict their use to the official Visual Studio Code builds and therefore do not work with VSCodium. See [this note](https://github.com/VSCodium/vscodium/blob/master/docs/index.md#proprietary-debugging-tools) on the Docs page for what's been found so far and possible workarounds.\n\n### How are the VSCodium binaries built?\n\nIf you would like to see the commands we run to build `vscode` into VSCodium binaries, have a look at the workflow files in `.github/workflows` for Windows, GNU/Linux and macOS. These build files call all the other scripts in the repo. If you find something that doesn't make sense, feel free to ask about it [on Gitter](https://gitter.im/VSCodium/Lobby).\n\nThe builds are run every day, but exit early if there isn't a new release from Microsoft.\n\n## <a id=\"supported-platforms\"></a>Supported Platforms\n\nThe minimal version is limited by the core component Electron, you may want to check its [platform prerequisites](https://www.electronjs.org/docs/latest/development/build-instructions-gn#platform-prerequisites).\n\n- [x] macOS (`zip`, `dmg`) macOS 10.15 or newer x64\n- [x] macOS (`zip`, `dmg`) macOS 11.0 or newer arm64\n- [x] GNU/Linux x64 (`deb`, `rpm`, `AppImage`, `snap`, `tar.gz`)\n- [x] GNU/Linux arm64 (`deb`, `rpm`, `snap`, `tar.gz`)\n- [x] GNU/Linux armhf (`deb`, `rpm`, `tar.gz`)\n- [x] GNU/Linux riscv64 (`tar.gz`)\n- [x] GNU/Linux loong64 (`tar.gz`)\n- [x] GNU/Linux ppc64le (`tar.gz`)\n- [x] Windows 10 / Server 2012 R2 or newer x64\n- [x] Windows 10 / Server 2012 R2 or newer arm64\n\n## <a id=\"thanks\"></a>Special thanks\n\n<table>\n  <tr>\n    <td><a href=\"https://github.com/jaredreich\" target=\"_blank\">@jaredreich</a></td>\n    <td>for the logo</td>\n  </tr>\n  <tr>\n    <td><a href=\"https://github.com/PalinuroSec\" target=\"_blank\">@PalinuroSec</a></td>\n    <td>for CDN and domain name</td>\n  </tr>\n  <tr>\n    <td><a href=\"https://www.macstadium.com\" target=\"_blank\"><img src=\"https://images.prismic.io/macstadium/66fbce64-707e-41f3-b547-241908884716_MacStadium_Logo.png?w=128&q=75\" width=\"128\" height=\"49\" alt=\"MacStadium logo\" /></a></td>\n    <td>for providing a Mac mini M1</td>\n  </tr>\n  <tr>\n    <td><a href=\"https://github.com/daiyam\" target=\"_blank\">@daiyam</a></td>\n    <td>for macOS certificate</td>\n  </tr>\n  <tr>\n    <td><a href=\"https://signpath.org/\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/34448643\" height=\"30\" alt=\"SignPath logo\" /></a></td>\n    <td>free code signing on Windows provided by <a href=\"https://signpath.io/\" target=\"_blank\">SignPath.io</a>, certificate by <a href=\"https://signpath.org/\" target=\"_blank\">SignPath Foundation</a></td>\n  </tr>\n</table>\n\n## <a id=\"license\"></a>License\n\n[MIT](https://github.com/VSCodium/vscodium/blob/master/LICENSE)\n"
        },
        {
          "name": "announcements-builtin.json",
          "type": "blob",
          "size": 0,
          "content": "[\n]\n"
        },
        {
          "name": "announcements-extra.json",
          "type": "blob",
          "size": 0.15,
          "content": "[\n  {\n    \"id\": \"#1227\",\n    \"title\": \"Issue(macOS): manual update to `1.90.x`\",\n    \"url\": \"https://github.com/VSCodium/vscodium/issues/1917\"\n  }\n]\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 1.62,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091\n\nset -ex\n\n. version.sh\n\nif [[ \"${SHOULD_BUILD}\" == \"yes\" ]]; then\n  echo \"MS_COMMIT=\\\"${MS_COMMIT}\\\"\"\n\n  . prepare_vscode.sh\n\n  cd vscode || { echo \"'vscode' dir not found\"; exit 1; }\n\n  export NODE_OPTIONS=\"--max-old-space-size=8192\"\n\n  yarn monaco-compile-check\n  yarn valid-layers-check\n\n  yarn gulp compile-build\n  yarn gulp compile-extension-media\n  yarn gulp compile-extensions-build\n  yarn gulp minify-vscode\n\n  if [[ \"${OS_NAME}\" == \"osx\" ]]; then\n    yarn gulp \"vscode-darwin-${VSCODE_ARCH}-min-ci\"\n\n    find \"../VSCode-darwin-${VSCODE_ARCH}\" -print0 | xargs -0 touch -c\n\n    VSCODE_PLATFORM=\"darwin\"\n  elif [[ \"${OS_NAME}\" == \"windows\" ]]; then\n    # in CI, packaging will be done by a different job\n    if [[ \"${CI_BUILD}\" == \"no\" ]]; then\n      . ../build/windows/rtf/make.sh\n\n      yarn gulp \"vscode-win32-${VSCODE_ARCH}-min-ci\"\n\n      if [[ \"${VSCODE_ARCH}\" != \"x64\" ]]; then\n        SHOULD_BUILD_REH=\"no\"\n        SHOULD_BUILD_REH_WEB=\"no\"\n      fi\n    fi\n\n    VSCODE_PLATFORM=\"win32\"\n  else # linux\n    # in CI, packaging will be done by a different job\n    if [[ \"${CI_BUILD}\" == \"no\" ]]; then\n      yarn gulp \"vscode-linux-${VSCODE_ARCH}-min-ci\"\n\n      find \"../VSCode-linux-${VSCODE_ARCH}\" -print0 | xargs -0 touch -c\n    fi\n\n    VSCODE_PLATFORM=\"linux\"\n  fi\n\n  if [[ \"${SHOULD_BUILD_REH}\" != \"no\" ]]; then\n    yarn gulp minify-vscode-reh\n    yarn gulp \"vscode-reh-${VSCODE_PLATFORM}-${VSCODE_ARCH}-min-ci\"\n  fi\n\n  if [[ \"${SHOULD_BUILD_REH_WEB}\" != \"no\" ]]; then\n    yarn gulp minify-vscode-reh-web\n    yarn gulp \"vscode-reh-web-${VSCODE_PLATFORM}-${VSCODE_ARCH}-min-ci\"\n  fi\n\n  cd ..\nfi\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "check_cron_or_pr.sh",
          "type": "blob",
          "size": 0.9,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC2129\n\nset -e\n\nif [[ \"${GITHUB_EVENT_NAME}\" == \"pull_request\" ]]; then\n\techo \"It's a PR\"\n\n  export SHOULD_BUILD=\"yes\"\n\texport SHOULD_DEPLOY=\"no\"\nelif [[ \"${GITHUB_EVENT_NAME}\" == \"push\" ]]; then\n\techo \"It's a Push\"\n\n\texport SHOULD_BUILD=\"yes\"\n\texport SHOULD_DEPLOY=\"no\"\nelif [[ \"${GITHUB_EVENT_NAME}\" == \"workflow_dispatch\" ]]; then\n  if [[ \"${GENERATE_ASSETS}\" == \"true\" ]]; then\n    echo \"It will generate the assets\"\n\n    export SHOULD_BUILD=\"yes\"\n    export SHOULD_DEPLOY=\"no\"\n  else\n  \techo \"It's a Dispatch\"\n\n    export SHOULD_DEPLOY=\"yes\"\n  fi\nelse\n\techo \"It's a Cron\"\n\n\texport SHOULD_DEPLOY=\"yes\"\nfi\n\nif [[ \"${GITHUB_ENV}\" ]]; then\n  echo \"GITHUB_BRANCH=${GITHUB_BRANCH}\" >> \"${GITHUB_ENV}\"\n  echo \"SHOULD_BUILD=${SHOULD_BUILD}\" >> \"${GITHUB_ENV}\"\n  echo \"SHOULD_DEPLOY=${SHOULD_DEPLOY}\" >> \"${GITHUB_ENV}\"\n  echo \"VSCODE_QUALITY=${VSCODE_QUALITY}\" >> \"${GITHUB_ENV}\"\nfi\n"
        },
        {
          "name": "check_tags.sh",
          "type": "blob",
          "size": 22.94,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC2129\n\nset -e\n\nif [[ -z \"${GH_TOKEN}\" ]] && [[ -z \"${GITHUB_TOKEN}\" ]] && [[ -z \"${GH_ENTERPRISE_TOKEN}\" ]] && [[ -z \"${GITHUB_ENTERPRISE_TOKEN}\" ]]; then\n  echo \"Will not build because no GITHUB_TOKEN defined\"\n  exit 0\nelse\n  GITHUB_TOKEN=\"${GH_TOKEN:-${GITHUB_TOKEN:-${GH_ENTERPRISE_TOKEN:-${GITHUB_ENTERPRISE_TOKEN}}}}\"\nfi\n\n# Support for GitHub Enterprise\nGH_HOST=\"${GH_HOST:-github.com}\"\n\nAPP_NAME_LC=\"$( echo \"${APP_NAME}\" | awk '{print tolower($0)}' )\"\n\nif [[ \"${SHOULD_DEPLOY}\" == \"no\" ]]; then\n  ASSETS=\"null\"\nelse\n  GITHUB_RESPONSE=$( curl -s -H \"Authorization: token ${GITHUB_TOKEN}\" \"https://api.${GH_HOST}/repos/${ASSETS_REPOSITORY}/releases/latest\" )\n  LATEST_VERSION=$( echo \"${GITHUB_RESPONSE}\" | jq -c -r '.tag_name' )\n  RECHECK_ASSETS=\"${SHOULD_BUILD}\"\n\n  if [[ \"${LATEST_VERSION}\" =~ ^([0-9]+\\.[0-9]+\\.[0-9]+) ]]; then\n    if [[ \"${MS_TAG}\" != \"${BASH_REMATCH[1]}\" ]]; then\n      echo \"New VSCode version, new build\"\n      export SHOULD_BUILD=\"yes\"\n    elif [[ \"${NEW_RELEASE}\" == \"true\" ]]; then\n      echo \"New release build\"\n      export SHOULD_BUILD=\"yes\"\n    elif [[ \"${VSCODE_QUALITY}\" == \"insider\" ]]; then\n      BODY=$( echo \"${GITHUB_RESPONSE}\" | jq -c -r '.body' )\n\n      if [[ \"${BODY}\" =~ \\[([a-z0-9]+)\\] ]]; then\n        if [[ \"${MS_COMMIT}\" != \"${BASH_REMATCH[1]}\" ]]; then\n          echo \"New VSCode Insiders version, new build\"\n          export SHOULD_BUILD=\"yes\"\n        fi\n      fi\n    fi\n\n    if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n      export RELEASE_VERSION=\"${LATEST_VERSION}\"\n      echo \"RELEASE_VERSION=${RELEASE_VERSION}\" >> \"${GITHUB_ENV}\"\n\n      echo \"Switch to release version: ${RELEASE_VERSION}\"\n\n      ASSETS=$( echo \"${GITHUB_RESPONSE}\" | jq -c '.assets | map(.name)?' )\n    elif [[ \"${RECHECK_ASSETS}\" == \"yes\" ]]; then\n      export SHOULD_BUILD=\"no\"\n\n      ASSETS=$( echo \"${GITHUB_RESPONSE}\" | jq -c '.assets | map(.name)?' )\n    else\n      ASSETS=\"null\"\n    fi\n  else\n    echo \"can't check assets\"\n    exit 1\n  fi\nfi\n\ncontains() {\n  # add \" to match the end of a string so any hashs won't be matched by mistake\n  echo \"${ASSETS}\" | grep \"${1}\\\"\"\n}\n\n# shellcheck disable=SC2153\nif [[ \"${CHECK_ASSETS}\" == \"no\" ]]; then\n  echo \"Don't check assets, yet\"\nelif [[ \"${ASSETS}\" != \"null\" ]]; then\n  if [[ \"${IS_SPEARHEAD}\" == \"yes\" ]]; then\n    if [[ -z $( contains \"${APP_NAME}-${RELEASE_VERSION}-src.tar.gz\" ) || -z $( contains \"${APP_NAME}-${RELEASE_VERSION}-src.zip\" ) ]]; then\n      echo \"Building because we have no SRC\"\n      export SHOULD_BUILD=\"yes\"\n      export SHOULD_BUILD_SRC=\"yes\"\n    fi\n  # macos\n  elif [[ \"${OS_NAME}\" == \"osx\" ]]; then\n    if [[ -z $( contains \"${APP_NAME}-darwin-${VSCODE_ARCH}-${RELEASE_VERSION}.zip\" ) ]]; then\n      echo \"Building on MacOS because we have no ZIP\"\n      export SHOULD_BUILD=\"yes\"\n    else\n      export SHOULD_BUILD_ZIP=\"no\"\n    fi\n\n    if [[ -z $( contains \".${VSCODE_ARCH}.${RELEASE_VERSION}.dmg\" ) ]]; then\n      echo \"Building on MacOS because we have no DMG\"\n      export SHOULD_BUILD=\"yes\"\n    else\n      export SHOULD_BUILD_DMG=\"no\"\n    fi\n\n    if [[ -z $( contains \"${APP_NAME_LC}-reh-darwin-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n      echo \"Building on MacOS because we have no REH archive\"\n      export SHOULD_BUILD=\"yes\"\n    else\n      export SHOULD_BUILD_REH=\"no\"\n    fi\n\n    if [[ -z $( contains \"${APP_NAME_LC}-reh-web-darwin-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n      echo \"Building on MacOS because we have no REH-web archive\"\n      export SHOULD_BUILD=\"yes\"\n    else\n      export SHOULD_BUILD_REH_WEB=\"no\"\n    fi\n\n    if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n      echo \"Already have all the MacOS builds\"\n    fi\n  elif [[ \"${OS_NAME}\" == \"windows\" ]]; then\n\n    # windows-arm64\n    if [[ \"${VSCODE_ARCH}\" == \"arm64\" ]]; then\n      if [[ -z $( contains \"${APP_NAME}Setup-${VSCODE_ARCH}-${RELEASE_VERSION}.exe\" ) ]]; then\n        echo \"Building on Windows arm64 because we have no system setup\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_EXE_SYS=\"no\"\n      fi\n\n      if [[ -z $( contains \"UserSetup-${VSCODE_ARCH}-${RELEASE_VERSION}.exe\" ) ]]; then\n        echo \"Building on Windows arm64 because we have no user setup\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_EXE_USR=\"no\"\n      fi\n\n      if [[ -z $( contains \"${APP_NAME}-win32-${VSCODE_ARCH}-${RELEASE_VERSION}.zip\" ) ]]; then\n        echo \"Building on Windows arm64 because we have no zip\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_ZIP=\"no\"\n      fi\n\n      export SHOULD_BUILD_REH=\"no\"\n      export SHOULD_BUILD_REH_WEB=\"no\"\n\n      if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n        echo \"Already have all the Windows arm64 builds\"\n      fi\n\n    # windows-ia32\n    elif [[ \"${VSCODE_ARCH}\" == \"ia32\" ]]; then\n      if [[ -z $( contains \"${APP_NAME}Setup-${VSCODE_ARCH}-${RELEASE_VERSION}.exe\" ) ]]; then\n        echo \"Building on Windows ia32 because we have no system setup\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_EXE_SYS=\"no\"\n      fi\n\n      if [[ -z $( contains \"UserSetup-${VSCODE_ARCH}-${RELEASE_VERSION}.exe\" ) ]]; then\n        echo \"Building on Windows ia32 because we have no user setup\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_EXE_USR=\"no\"\n      fi\n\n      if [[ -z $( contains \"${APP_NAME}-win32-${VSCODE_ARCH}-${RELEASE_VERSION}.zip\" ) ]]; then\n        echo \"Building on Windows ia32 because we have no zip\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_ZIP=\"no\"\n      fi\n\n      if [[ \"${DISABLE_MSI}\" == \"yes\" ]]; then\n          export SHOULD_BUILD_MSI=\"no\"\n      elif [[ -z $( contains \"${APP_NAME}-${VSCODE_ARCH}-${RELEASE_VERSION}.msi\" ) ]]; then\n        echo \"Building on Windows ia32 because we have no msi\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_MSI=\"no\"\n      fi\n\n      if [[ \"${DISABLE_MSI}\" == \"yes\" ]]; then\n          export SHOULD_BUILD_MSI_NOUP=\"no\"\n      elif [[ -z $( contains \"${APP_NAME}-${VSCODE_ARCH}-updates-disabled-${RELEASE_VERSION}.msi\" ) ]]; then\n        echo \"Building on Windows ia32 because we have no updates-disabled msi\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_MSI_NOUP=\"no\"\n      fi\n\n      if [[ -z $( contains \"${APP_NAME_LC}-reh-win32-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n        echo \"Building on Windows ia32 because we have no REH archive\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_REH=\"no\"\n      fi\n\n      if [[ -z $( contains \"${APP_NAME_LC}-reh-web-win32-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n        echo \"Building on Windows ia32 because we have no REH-web archive\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_REH_WEB=\"no\"\n      fi\n\n      if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n        echo \"Already have all the Windows ia32 builds\"\n      fi\n\n    # windows-x64\n    else\n      if [[ -z $( contains \"${APP_NAME}Setup-${VSCODE_ARCH}-${RELEASE_VERSION}.exe\" ) ]]; then\n        echo \"Building on Windows x64 because we have no system setup\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_EXE_SYS=\"no\"\n      fi\n\n      if [[ -z $( contains \"UserSetup-${VSCODE_ARCH}-${RELEASE_VERSION}.exe\" ) ]]; then\n        echo \"Building on Windows x64 because we have no user setup\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_EXE_USR=\"no\"\n      fi\n\n      if [[ -z $( contains \"${APP_NAME}-win32-${VSCODE_ARCH}-${RELEASE_VERSION}.zip\" ) ]]; then\n        echo \"Building on Windows x64 because we have no zip\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_ZIP=\"no\"\n      fi\n\n      if [[ \"${DISABLE_MSI}\" == \"yes\" ]]; then\n          export SHOULD_BUILD_MSI=\"no\"\n      elif [[ -z $( contains \"${APP_NAME}-${VSCODE_ARCH}-${RELEASE_VERSION}.msi\" ) ]]; then\n        echo \"Building on Windows x64 because we have no msi\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_MSI=\"no\"\n      fi\n\n      if [[ \"${DISABLE_MSI}\" == \"yes\" ]]; then\n          export SHOULD_BUILD_MSI_NOUP=\"no\"\n      elif [[ -z $( contains \"${APP_NAME}-${VSCODE_ARCH}-updates-disabled-${RELEASE_VERSION}.msi\" ) ]]; then\n        echo \"Building on Windows x64 because we have no updates-disabled msi\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_MSI_NOUP=\"no\"\n      fi\n\n      if [[ -z $( contains \"${APP_NAME_LC}-reh-win32-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n        echo \"Building on Windows x64 because we have no REH archive\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_REH=\"no\"\n      fi\n\n      if [[ -z $( contains \"${APP_NAME_LC}-reh-web-win32-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n        echo \"Building on Windows x64 because we have no REH-web archive\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        export SHOULD_BUILD_REH_WEB=\"no\"\n      fi\n\n      if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n        echo \"Already have all the Windows x64 builds\"\n      fi\n    fi\n  elif [[ \"${OS_NAME}\" == \"linux\" ]]; then\n\n    if [[ \"${CHECK_ONLY_REH}\" == \"yes\" ]]; then\n\n      if [[ -z $( contains \"${APP_NAME_LC}-reh-linux-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n        echo \"Building on Linux ${VSCODE_ARCH} because we have no REH archive\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        echo \"Already have the Linux REH ${VSCODE_ARCH} archive\"\n        export SHOULD_BUILD_REH=\"no\"\n      fi\n\n      if [[ -z $( contains \"${APP_NAME_LC}-reh-web-linux-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n        echo \"Building on Linux ${VSCODE_ARCH} because we have no REH-web archive\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        echo \"Already have the Linux REH-web ${VSCODE_ARCH} archive\"\n        export SHOULD_BUILD_REH_WEB=\"no\"\n      fi\n\n    else\n\n      # linux-arm64\n      if [[ \"${VSCODE_ARCH}\" == \"arm64\" || \"${CHECK_ALL}\" == \"yes\" ]]; then\n        if [[ -z $( contains \"arm64.deb\" ) ]]; then\n          echo \"Building on Linux arm64 because we have no DEB\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_DEB=\"no\"\n        fi\n\n        if [[ -z $( contains \"aarch64.rpm\" ) ]]; then\n          echo \"Building on Linux arm64 because we have no RPM\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_RPM=\"no\"\n        fi\n\n        if [[ -z $( contains \"${APP_NAME}-linux-arm64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux arm64 because we have no TAR\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_TAR=\"no\"\n        fi\n\n        if [[ \"${CHECK_REH}\" != \"no\" && -z $( contains \"${APP_NAME_LC}-reh-linux-arm64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux arm64 because we have no REH archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH=\"no\"\n        fi\n\n        if [[ \"${CHECK_REH}\" != \"no\" && -z $( contains \"${APP_NAME_LC}-reh-web-linux-arm64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux arm64 because we have no REH-web archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH_WEB=\"no\"\n        fi\n\n        export SHOULD_BUILD_APPIMAGE=\"no\"\n\n        if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n          echo \"Already have all the Linux arm64 builds\"\n        fi\n      fi\n\n      # linux-armhf\n      if [[ \"${VSCODE_ARCH}\" == \"armhf\" || \"${CHECK_ALL}\" == \"yes\" ]]; then\n        if [[ -z $( contains \"armhf.deb\" ) ]]; then\n          echo \"Building on Linux arm because we have no DEB\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_DEB=\"no\"\n        fi\n\n        if [[ -z $( contains \"armv7hl.rpm\" ) ]]; then\n          echo \"Building on Linux arm because we have no RPM\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_RPM=\"no\"\n        fi\n\n        if [[ -z $( contains \"${APP_NAME}-linux-armhf-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux arm because we have no TAR\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_TAR=\"no\"\n        fi\n\n        if [[ \"${CHECK_REH}\" != \"no\" && -z $( contains \"${APP_NAME_LC}-reh-linux-armhf-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux arm because we have no REH archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH=\"no\"\n        fi\n\n        if [[ \"${CHECK_REH}\" != \"no\" && -z $( contains \"${APP_NAME_LC}-reh-web-linux-armhf-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux arm because we have no REH-web archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH_WEB=\"no\"\n        fi\n\n        export SHOULD_BUILD_APPIMAGE=\"no\"\n\n        if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n          echo \"Already have all the Linux arm builds\"\n        fi\n      fi\n\n      # linux-ppc64le\n      if [[ \"${VSCODE_ARCH}\" == \"ppc64le\" || \"${CHECK_ALL}\" == \"yes\" ]]; then\n        SHOULD_BUILD_APPIMAGE=\"no\"\n        SHOULD_BUILD_DEB=\"no\"\n        SHOULD_BUILD_RPM=\"no\"\n\n        if [[ -z $( contains \"${APP_NAME}-linux-ppc64le-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux PowerPC64LE because we have no TAR\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_TAR=\"no\"\n        fi\n\n\n        if [[ -z $( contains \"${APP_NAME_LC}-reh-linux-ppc64le-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux PowerPC64LE because we have no REH archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH=\"no\"\n        fi\n\n        if [[ -z $( contains \"${APP_NAME_LC}-reh-web-linux-ppc64le-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux PowerPC64LE because we have no REH-web archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH_WEB=\"no\"\n        fi\n\n        if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n          echo \"Already have all the Linux PowerPC64LE builds\"\n        fi\n      fi\n\n      # linux-riscv64\n      if [[ \"${VSCODE_ARCH}\" == \"riscv64\" || \"${CHECK_ALL}\" == \"yes\" ]]; then\n        export SHOULD_BUILD_DEB=\"no\"\n        export SHOULD_BUILD_RPM=\"no\"\n        export SHOULD_BUILD_APPIMAGE=\"no\"\n\n        if [[ -z $( contains \"${APP_NAME}-linux-riscv64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux RISC-V 64 because we have no TAR\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_TAR=\"no\"\n        fi\n\n        if [[ -z $( contains \"${APP_NAME_LC}-reh-linux-riscv64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux RISC-V 64 because we have no REH archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH=\"no\"\n        fi\n\n        if [[ -z $( contains \"${APP_NAME_LC}-reh-web-linux-riscv64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux RISC-V 64 because we have no REH-web archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH_WEB=\"no\"\n        fi\n\n        if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n          echo \"Already have all the Linux riscv64 builds\"\n        fi\n      fi\n\n      # linux-loong64\n      if [[ \"${VSCODE_ARCH}\" == \"loong64\" || \"${CHECK_ALL}\" == \"yes\" ]]; then\n        export SHOULD_BUILD_DEB=\"no\"\n        export SHOULD_BUILD_RPM=\"no\"\n        export SHOULD_BUILD_APPIMAGE=\"no\"\n\n        if [[ -z $( contains \"${APP_NAME}-linux-loong64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux Loong64 because we have no TAR\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_TAR=\"no\"\n        fi\n\n        if [[ -z $( contains \"${APP_NAME_LC}-reh-linux-loong64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux Loong64 because we have no REH archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH=\"no\"\n        fi\n\n        if [[ -z $( contains \"${APP_NAME_LC}-reh-web-linux-loong64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux Loong64 because we have no REH-web archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH_WEB=\"no\"\n        fi\n\n        if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n          echo \"Already have all the Linux Loong64 builds\"\n        fi\n      fi\n\n      # linux-s390x\n      if [[ \"${VSCODE_ARCH}\" == \"s390x\" || \"${CHECK_ALL}\" == \"yes\" ]]; then\n        SHOULD_BUILD_APPIMAGE=\"no\"\n        SHOULD_BUILD_DEB=\"no\"\n        SHOULD_BUILD_RPM=\"no\"\n        SHOULD_BUILD_TAR=\"no\"\n\n        if [[ -z $( contains \"${APP_NAME_LC}-reh-linux-s390x-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux s390x because we have no REH archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH=\"no\"\n        fi\n\n        if [[ -z $( contains \"${APP_NAME_LC}-reh-web-linux-s390x-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux s390x because we have no REH-web archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH_WEB=\"no\"\n        fi\n\n        if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n          echo \"Already have all the Linux s390x builds\"\n        fi\n      fi\n\n      # linux-x64\n      if [[ \"${VSCODE_ARCH}\" == \"x64\" || \"${CHECK_ALL}\" == \"yes\" ]]; then\n        if [[ -z $( contains \"amd64.deb\" ) ]]; then\n          echo \"Building on Linux x64 because we have no DEB\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_DEB=\"no\"\n        fi\n\n        if [[ -z $( contains \"x86_64.rpm\" ) ]]; then\n          echo \"Building on Linux x64 because we have no RPM\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_RPM=\"no\"\n        fi\n\n        if [[ -z $( contains \"${APP_NAME}-linux-x64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux x64 because we have no TAR\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_TAR=\"no\"\n        fi\n\n        if [[ \"${DISABLE_APPIMAGE}\" == \"yes\" ]]; then\n          export SHOULD_BUILD_APPIMAGE=\"no\"\n        elif [[ -z $( contains \"x86_64.AppImage\" ) ]]; then\n          echo \"Building on Linux x64 because we have no AppImage\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_APPIMAGE=\"no\"\n        fi\n\n        if [[ \"${CHECK_REH}\" != \"no\" && -z $( contains \"${APP_NAME_LC}-reh-linux-x64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux x64 because we have no REH archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH=\"no\"\n        fi\n\n        if [[ \"${CHECK_REH}\" != \"no\" && -z $( contains \"${APP_NAME_LC}-reh-web-linux-x64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Linux x64 because we have no REH-web archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH_WEB=\"no\"\n        fi\n\n        if [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n          echo \"Already have all the Linux x64 builds\"\n        fi\n      fi\n    fi\n\n  elif [[ \"${OS_NAME}\" == \"alpine\" ]]; then\n\n    if [[ \"${CHECK_ONLY_REH}\" == \"yes\" ]]; then\n      if [[ -z $( contains \"${APP_NAME_LC}-reh-alpine-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n        echo \"Building on Alpine ${VSCODE_ARCH} because we have no REH archive\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        echo \"Already have the Alpine REH ${VSCODE_ARCH} archive\"\n        export SHOULD_BUILD_REH=\"no\"\n      fi\n\n      if [[ -z $( contains \"${APP_NAME_LC}-reh-web-alpine-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n        echo \"Building on Alpine ${VSCODE_ARCH} because we have no REH-web archive\"\n        export SHOULD_BUILD=\"yes\"\n      else\n        echo \"Already have the Alpine REH-web ${VSCODE_ARCH} archive\"\n        export SHOULD_BUILD_REH_WEB=\"no\"\n      fi\n    else\n\n      # alpine-arm64\n      if [[ \"${VSCODE_ARCH}\" == \"arm64\" || \"${CHECK_ALL}\" == \"yes\" ]]; then\n        if [[ \"${CHECK_REH}\" != \"no\" && -z $( contains \"${APP_NAME_LC}-reh-alpine-arm64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Alpine arm64 because we have no REH archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH=\"no\"\n        fi\n\n         if [[ \"${CHECK_REH}\" != \"no\" && -z $( contains \"${APP_NAME_LC}-reh-web-alpine-arm64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Alpine arm64 because we have no REH-web archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH_WEB=\"no\"\n        fi\n      fi\n\n      # alpine-x64\n      if [[ \"${VSCODE_ARCH}\" == \"x64\" || \"${CHECK_ALL}\" == \"yes\" ]]; then\n        if [[ \"${CHECK_REH}\" != \"no\" && -z $( contains \"${APP_NAME_LC}-reh-alpine-x64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Alpine x64 because we have no REH archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH=\"no\"\n        fi\n\n        if [[ \"${CHECK_REH}\" != \"no\" && -z $( contains \"${APP_NAME_LC}-reh-web-alpine-x64-${RELEASE_VERSION}.tar.gz\" ) ]]; then\n          echo \"Building on Alpine x64 because we have no REH-web archive\"\n          export SHOULD_BUILD=\"yes\"\n        else\n          export SHOULD_BUILD_REH_WEB=\"no\"\n        fi\n      fi\n    fi\n  fi\nelse\n  if [[ \"${IS_SPEARHEAD}\" == \"yes\" ]]; then\n    export SHOULD_BUILD_SRC=\"yes\"\n  elif [[ \"${OS_NAME}\" == \"linux\" ]]; then\n    if [[ \"${VSCODE_ARCH}\" == \"ppc64le\" ]]; then\n      SHOULD_BUILD_DEB=\"no\"\n      SHOULD_BUILD_RPM=\"no\"\n      SHOULD_BUILD_TAR=\"no\"\n    elif [[ \"${VSCODE_ARCH}\" == \"riscv64\" ]]; then\n      SHOULD_BUILD_DEB=\"no\"\n      SHOULD_BUILD_RPM=\"no\"\n    elif [[ \"${VSCODE_ARCH}\" == \"loong64\" ]]; then\n      SHOULD_BUILD_DEB=\"no\"\n      SHOULD_BUILD_RPM=\"no\"\n    fi\n    if [[ \"${VSCODE_ARCH}\" != \"x64\" || \"${DISABLE_APPIMAGE}\" == \"yes\" ]]; then\n      export SHOULD_BUILD_APPIMAGE=\"no\"\n    fi\n  elif [[ \"${OS_NAME}\" == \"windows\" ]]; then\n    if [[ \"${VSCODE_ARCH}\" == \"arm64\" ]]; then\n      export SHOULD_BUILD_REH=\"no\"\n      export SHOULD_BUILD_REH_WEB=\"no\"\n    fi\n    if [[ \"${DISABLE_MSI}\" == \"yes\" ]]; then\n      export SHOULD_BUILD_MSI=\"no\"\n      export SHOULD_BUILD_MSI_NOUP=\"no\"\n    fi\n  fi\n\n  echo \"Release assets do not exist at all, continuing build\"\n  export SHOULD_BUILD=\"yes\"\nfi\n\n\necho \"SHOULD_BUILD=${SHOULD_BUILD}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_APPIMAGE=${SHOULD_BUILD_APPIMAGE}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_DEB=${SHOULD_BUILD_DEB}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_DMG=${SHOULD_BUILD_DMG}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_EXE_SYS=${SHOULD_BUILD_EXE_SYS}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_EXE_USR=${SHOULD_BUILD_EXE_USR}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_MSI=${SHOULD_BUILD_MSI}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_MSI_NOUP=${SHOULD_BUILD_MSI_NOUP}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_REH=${SHOULD_BUILD_REH}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_REH_WEB=${SHOULD_BUILD_REH_WEB}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_RPM=${SHOULD_BUILD_RPM}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_TAR=${SHOULD_BUILD_TAR}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_ZIP=${SHOULD_BUILD_ZIP}\" >> \"${GITHUB_ENV}\"\necho \"SHOULD_BUILD_SRC=${SHOULD_BUILD_SRC}\" >> \"${GITHUB_ENV}\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "electron_linux_loong64.sh",
          "type": "blob",
          "size": 0.11,
          "content": "#!/usr/bin/env bash\n\nset -ex\n\nexport ELECTRON_VERSION=\"32.2.7\"\nexport VSCODE_ELECTRON_TAG=\"v${ELECTRON_VERSION}\"\n"
        },
        {
          "name": "electron_linux_loong64.sha256sums",
          "type": "blob",
          "size": 1.06,
          "content": "2324198f130de1f5ccff6f216277eafa76fa53883c8297533f0e0c09d96faf31 *chromedriver-v32.2.7-linux-loong64.zip\n724acd5cde9e747b3765f062b9a243af344faa039f9f0218beed1b0e9455e893 *electron-v32.2.7-linux-loong64-debug.zip\ndee3600a67cc7f40f0fb4a8938940cb20fba0a95886352145cacc0334baa955e *electron-v32.2.7-linux-loong64-symbols.zip\n2904bfaa386deddf968dec71c4b4235635daa318bdbb05ae3f3673983242cefe *electron-v32.2.7-linux-loong64.zip\ne8fb755c82a58d98c70c1d3ac4d9c9c77e42021322b188183a550793ba94afe0 *ffmpeg-v32.2.7-linux-loong64.zip\n69506c95a7ce4d5270164e0613aec9eb11fdc24f3dc21df3cd78963b764a6b75 *hunspell-dictionaries.zip\ne02189a00e5170306289ba2bc0c295a9698f76899d812e35fc69fd8e4e4841d2 *libcxx-headers.zip\n0cc5c76d848d9f572ef4050839876afd8533dc71fc90c319edfffcaa3dca0e01 *libcxx-objects-v32.2.7-linux-loong64.zip\ncaada8fb0a210d660e2150a0fe9f7b84a9e969a5b1110ce2d6b58f5d21637387 *libcxxabi-headers.zip\n8736592799acdaafae2214156c7755f3249f4fd577fccc3df11bf42a5481aa12 *mksnapshot-v32.2.7-linux-loong64.zip\n3d80771ab908f55cc61416b8b11d572e777b6c613ad2a7ee7aa8fef8b4ede011 *node-v32.2.7-headers.tar.gz\n"
        },
        {
          "name": "electron_linux_ppc64le.sh",
          "type": "blob",
          "size": 0.11,
          "content": "#!/usr/bin/env bash\n\nset -ex\n\nexport ELECTRON_VERSION=\"32.2.7\"\nexport VSCODE_ELECTRON_TAG=\"v${ELECTRON_VERSION}\"\n"
        },
        {
          "name": "electron_linux_ppc64le.sha256sums",
          "type": "blob",
          "size": 1.05,
          "content": "176cbd410925566ed2290d006b4a70de9d7953997d2189e67495fec5ec7648aa *chromedriver-v32.2.7-linux-ppc64le.zip\n64a683d339b87463cacef142730ac366fa39ee27e017390909a928b9afb81b12 *electron-v32.2.7-linux-ppc64le-debug.zip\n361b11b83589f64756def0a4982b611fb5220df287cd6c6fc3c9d4c5240a7b87 *electron-v32.2.7-linux-ppc64le-symbols.zip\n1cba399c82c5baccb0387971a5697920d771bc424bd65fe503289e4d8f72dfa2 *electron-v32.2.7-linux-ppc64le.zip\nce41b10c28bd43249cd3b409e081b1c83a2b691381bdd2e3bf208ec40ca176b8 *electron.d.ts\n9b74c159cbc8e9f80d145117e828066b09a1703961adc4f31703271776132797 *ffmpeg-v32.2.7-linux-ppc64le.zip\nd8b47b51bb9474e39f9a0024a34a2378e4bdb3ff1ed4366db1752b3c6452afd1 *hunspell_dictionaries.zip\n0c125463ff1b1bc3e8f16e3fc09052f4061143743acddf478188d08049da4d55 *libcxx-objects-v32.2.7-linux-ppc64le.zip\nb1fc26b925ba6b896dea50bd471128cfa290c5b19673a62e8775537f6f94514d *libcxx_headers.zip\n6f00ab500f9418eb788578c67a84422ed5dc962ad9c3be0de1f2931f55066895 *libcxxabi_headers.zip\n2def4b7386e49bd658dd4f2f147710525423bb5cd3811394af0cf2b5047045ea *mksnapshot-v32.2.7-linux-ppc64le.zip\n"
        },
        {
          "name": "electron_linux_riscv64.sh",
          "type": "blob",
          "size": 0.12,
          "content": "#!/usr/bin/env bash\n\nset -ex\n\nexport ELECTRON_VERSION=\"32.2.7\"\nexport VSCODE_ELECTRON_TAG=\"v${ELECTRON_VERSION}.riscv1\"\n"
        },
        {
          "name": "electron_linux_riscv64.sha256sums",
          "type": "blob",
          "size": 1.07,
          "content": "26a3b6958d4b88f8b436b429aa7702d5d3af58ce892fe985c8fd68156e0b33d6 *chromedriver-v32.2.7-linux-riscv64.zip\n3b1e9b38a722a32c7127a9646b37366ebe20470fbedf17c94e2dd7e388046c26 *electron-v32.2.7-linux-riscv64-debug.tar.zst\ne9b4738bfd9aa0a9a98ee626e760f230730655bb02185a90a246ba6398c52db3 *electron-v32.2.7-linux-riscv64-symbols.tar.zst\ne71a432a4e03458b71d2428c812d3119658b61941a59b60d346d281b5c29f827 *electron-v32.2.7-linux-riscv64.zip\n51982b096a16b6546941710225fd21855a3fe3b83ec0bf69a4b048d9995ddd19 *ffmpeg-v32.2.7-linux-riscv64.zip\n5455ce9b9a98b349ad95050ca643bfc5312cf4636dd5ec62d475d1a07b2a35a5 *hunspell-dictionaries.zip\n4f0abd2517c30de0fc3ddcaa881460924b87c6a48e28cffa41e1050e201b17e5 *libcxx-headers.zip\n3477a9c568c8c65e5a142a2b4408aec19edda2de9ba303e4aec77eef41aeea10 *libcxx-objects-v32.2.7-linux-riscv64.zip\n01ff628652bc485ce6bf41b975e15339b246771f5f9d1de79ba24d79a00e840a *libcxxabi-headers.zip\n8d47b32d2cd3d57fab542de097a10f5f632a958902172a8993fe390a6089f778 *mksnapshot-v32.2.7-linux-riscv64.zip\n29229408ca301a90be7f7862ac3efec932b198105c44e668f1b3eb6bf043198e *node-v32.2.7-headers.tar.gz\n"
        },
        {
          "name": "get_pr.sh",
          "type": "blob",
          "size": 0.59,
          "content": "#!/usr/bin/env bash\n\nset -e\n\n# git workaround\nif [[ \"${CI_BUILD}\" != \"no\" ]]; then\n  git config --global --add safe.directory \"/__w/$( echo \"${GITHUB_REPOSITORY}\" | awk '{print tolower($0)}' )\"\nfi\n\nif [[ -n \"${PULL_REQUEST_ID}\" ]]; then\n  BRANCH_NAME=$( git rev-parse --abbrev-ref HEAD )\n\n  git config --global user.email \"$( echo \"${GITHUB_USERNAME}\" | awk '{print tolower($0)}' )-ci@not-real.com\"\n  git config --global user.name \"${GITHUB_USERNAME} CI\"\n  git fetch --unshallow\n  git fetch origin \"pull/${PULL_REQUEST_ID}/head\"\n  git checkout FETCH_HEAD\n  git merge --no-edit \"origin/${BRANCH_NAME}\"\nfi\n"
        },
        {
          "name": "get_repo.sh",
          "type": "blob",
          "size": 3.22,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC2129\n\nset -e\n\n# git workaround\nif [[ \"${CI_BUILD}\" != \"no\" ]]; then\n  git config --global --add safe.directory \"/__w/$( echo \"${GITHUB_REPOSITORY}\" | awk '{print tolower($0)}' )\"\nfi\n\nif [[ -z \"${RELEASE_VERSION}\" ]]; then\n  if [[ \"${VSCODE_LATEST}\" == \"yes\" ]] || [[ ! -f \"${VSCODE_QUALITY}.json\" ]]; then\n    echo \"Retrieve lastest version\"\n    UPDATE_INFO=$( curl --silent --fail \"https://update.code.visualstudio.com/api/update/darwin/${VSCODE_QUALITY}/0000000000000000000000000000000000000000\" )\n  else\n    echo \"Get version from ${VSCODE_QUALITY}.json\"\n    MS_COMMIT=$( jq -r '.commit' \"${VSCODE_QUALITY}.json\" )\n    MS_TAG=$( jq -r '.tag' \"${VSCODE_QUALITY}.json\" )\n  fi\n\n  if [[ -z \"${MS_COMMIT}\" ]]; then\n    MS_COMMIT=$( echo \"${UPDATE_INFO}\" | jq -r '.version' )\n    MS_TAG=$( echo \"${UPDATE_INFO}\" | jq -r '.name' )\n\n    if [[ \"${VSCODE_QUALITY}\" == \"insider\" ]]; then\n      MS_TAG=\"${MS_TAG/\\-insider/}\"\n    fi\n  fi\n\n  date=$( date +%Y%j )\n\n  if [[ \"${VSCODE_QUALITY}\" == \"insider\" ]]; then\n    RELEASE_VERSION=\"${MS_TAG}.${date: -5}-insider\"\n  else\n    RELEASE_VERSION=\"${MS_TAG}.${date: -5}\"\n  fi\nelse\n  if [[ \"${VSCODE_QUALITY}\" == \"insider\" ]]; then\n    if [[ \"${RELEASE_VERSION}\" =~ ^([0-9]+\\.[0-9]+\\.[0-9]+)\\.[0-9]+-insider$ ]];\n    then\n      MS_TAG=\"${BASH_REMATCH[1]}\"\n    else\n      echo \"Error: Bad RELEASE_VERSION: ${RELEASE_VERSION}\"\n      exit 1\n    fi\n  else\n    if [[ \"${RELEASE_VERSION}\" =~ ^([0-9]+\\.[0-9]+\\.[0-9]+)\\.[0-9]+$ ]];\n    then\n      MS_TAG=\"${BASH_REMATCH[1]}\"\n    else\n      echo \"Error: Bad RELEASE_VERSION: ${RELEASE_VERSION}\"\n      exit 1\n    fi\n  fi\n\n  if [[ \"${MS_TAG}\" == \"$( jq -r '.tag' \"${VSCODE_QUALITY}\".json )\" ]]; then\n    MS_COMMIT=$( jq -r '.commit' \"${VSCODE_QUALITY}\".json )\n  else\n    echo \"Error: No MS_COMMIT for ${RELEASE_VERSION}\"\n    exit 1\n  fi\nfi\n\necho \"RELEASE_VERSION=\\\"${RELEASE_VERSION}\\\"\"\n\nmkdir -p vscode\ncd vscode || { echo \"'vscode' dir not found\"; exit 1; }\n\ngit init -q\ngit remote add origin https://github.com/Microsoft/vscode.git\n\n# figure out latest tag by calling MS update API\nif [[ -z \"${MS_TAG}\" ]]; then\n  UPDATE_INFO=$( curl --silent --fail \"https://update.code.visualstudio.com/api/update/darwin/${VSCODE_QUALITY}/0000000000000000000000000000000000000000\" )\n  MS_COMMIT=$( echo \"${UPDATE_INFO}\" | jq -r '.version' )\n  MS_TAG=$( echo \"${UPDATE_INFO}\" | jq -r '.name' )\nelif [[ -z \"${MS_COMMIT}\" ]]; then\n  REFERENCE=$( git ls-remote --tags | grep -x \".*refs\\/tags\\/${MS_TAG}\" | head -1 )\n\n  if [[ -z \"${REFERENCE}\" ]]; then\n    echo \"Error: The following tag can't be found: ${MS_TAG}\"\n    exit 1\n  elif [[ \"${REFERENCE}\" =~ ^([[:alnum:]]+)[[:space:]]+refs\\/tags\\/([0-9]+\\.[0-9]+\\.[0-9]+)$ ]]; then\n    MS_COMMIT=\"${BASH_REMATCH[1]}\"\n    MS_TAG=\"${BASH_REMATCH[2]}\"\n  else\n    echo \"Error: The following reference can't be parsed: ${REFERENCE}\"\n    exit 1\n  fi\nfi\n\necho \"MS_TAG=\\\"${MS_TAG}\\\"\"\necho \"MS_COMMIT=\\\"${MS_COMMIT}\\\"\"\n\ngit fetch --depth 1 origin \"${MS_COMMIT}\"\ngit checkout FETCH_HEAD\n\ncd ..\n\n# for GH actions\nif [[ \"${GITHUB_ENV}\" ]]; then\n  echo \"MS_TAG=${MS_TAG}\" >> \"${GITHUB_ENV}\"\n  echo \"MS_COMMIT=${MS_COMMIT}\" >> \"${GITHUB_ENV}\"\n  echo \"RELEASE_VERSION=${RELEASE_VERSION}\" >> \"${GITHUB_ENV}\"\nfi\n\nexport MS_TAG\nexport MS_COMMIT\nexport RELEASE_VERSION\n"
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "include_osx.gypi",
          "type": "blob",
          "size": 0.17,
          "content": "{\n  'target_defaults': {\n    'conditions': [\n      ['OS==\"mac\"', {\n        'xcode_settings': {\n          'OTHER_CPLUSPLUSFLAGS': ['-std=c++20']\n        }\n      }]\n    ]\n  }\n}\n"
        },
        {
          "name": "insider.json",
          "type": "blob",
          "size": 0.08,
          "content": "{\n  \"tag\": \"1.96.0\",\n  \"commit\": \"475acb4b9bdd77d4204224990bf288ed5bfe6b0e\"\n}\n"
        },
        {
          "name": "install_gh.sh",
          "type": "blob",
          "size": 0.48,
          "content": "#!/usr/bin/env bash\n\nset -ex\n\nGH_ARCH=\"amd64\"\n\nTAG=$( curl --retry 12 --retry-delay 30 \"https://api.github.com/repos/cli/cli/releases/latest\" | jq --raw-output '.tag_name' )\nVERSION=${TAG#v}\n\ncurl --retry 12 --retry-delay 120 -sSL \"https://github.com/cli/cli/releases/download/${TAG}/gh_${VERSION}_linux_${GH_ARCH}.tar.gz\" -o \"gh_${VERSION}_linux_${GH_ARCH}.tar.gz\"\n\ntar xf \"gh_${VERSION}_linux_${GH_ARCH}.tar.gz\"\n\ncp \"gh_${VERSION}_linux_${GH_ARCH}/bin/gh\" /usr/local/bin/\n\ngh --version\n"
        },
        {
          "name": "macos-codesign.env.template",
          "type": "blob",
          "size": 0.13,
          "content": "CERTIFICATE_OSX_APP_PASSWORD=\nCERTIFICATE_OSX_ID=\nCERTIFICATE_OSX_P12_DATA=\nCERTIFICATE_OSX_P12_PASSWORD=\nCERTIFICATE_OSX_TEAM_ID=\n"
        },
        {
          "name": "package_alpine_reh.sh",
          "type": "blob",
          "size": 1.7,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091\n\nset -ex\n\nif [[ \"${CI_BUILD}\" == \"no\" ]]; then\n  exit 1\nfi\n\ntar -xzf ./vscode.tar.gz\n\ncd vscode || { echo \"'vscode' dir not found\"; exit 1; }\n\nexport VSCODE_PLATFORM='alpine'\nexport VSCODE_SKIP_NODE_VERSION_CHECK=1\n\nVSCODE_HOST_MOUNT=\"$( pwd )\"\nVSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME=\"vscodium/vscodium-linux-build-agent:alpine-${VSCODE_ARCH}\"\n\nexport VSCODE_HOST_MOUNT VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME\n\nif [[ -d \"../patches/alpine/reh/\" ]]; then\n  for file in \"../patches/alpine/reh/\"*.patch; do\n    if [[ -f \"${file}\" ]]; then\n      echo applying patch: \"${file}\";\n      if ! git apply --ignore-whitespace \"${file}\"; then\n        echo failed to apply patch \"${file}\" >&2\n        exit 1\n      fi\n    fi\n  done\nfi\n\nfor i in {1..5}; do # try 5 times\n  npm ci && break\n  if [[ $i == 3 ]]; then\n    echo \"Npm install failed too many times\" >&2\n    exit 1\n  fi\n  echo \"Npm install failed $i, trying again...\"\ndone\n\nnode build/azure-pipelines/distro/mixin-npm\n\nyarn gulp minify-vscode-reh\n\nif [[ \"${VSCODE_ARCH}\" == \"x64\" ]]; then\n  PA_NAME=\"linux-alpine\"\nelse\n  PA_NAME=\"alpine-arm64\"\nfi\n\nyarn gulp \"vscode-reh-${PA_NAME}-min-ci\"\n\ncd ..\n\nAPP_NAME_LC=\"$( echo \"${APP_NAME}\" | awk '{print tolower($0)}' )\"\n\nmkdir -p assets\n\necho \"Building and moving REH\"\ncd \"vscode-reh-${PA_NAME}\"\ntar czf \"../assets/${APP_NAME_LC}-reh-${VSCODE_PLATFORM}-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" .\ncd ..\n\nnpm install -g checksum\n\nsum_file() {\n  if [[ -f \"${1}\" ]]; then\n    echo \"Calculating checksum for ${1}\"\n    checksum -a sha256 \"${1}\" > \"${1}\".sha256\n    checksum \"${1}\" > \"${1}\".sha1\n  fi\n}\n\ncd assets\n\nfor FILE in *; do\n  if [[ -f \"${FILE}\" ]]; then\n    sum_file \"${FILE}\"\n  fi\ndone\n\ncd ..\n"
        },
        {
          "name": "package_linux_bin.sh",
          "type": "blob",
          "size": 3.65,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091\n\nset -ex\n\nif [[ \"${CI_BUILD}\" == \"no\" ]]; then\n  exit 1\nfi\n\ntar -xzf ./vscode.tar.gz\n\nchown -R root:root vscode\n\ncd vscode || { echo \"'vscode' dir not found\"; exit 1; }\n\nexport VSCODE_PLATFORM='linux'\nexport VSCODE_SKIP_NODE_VERSION_CHECK=1\nexport VSCODE_SYSROOT_PREFIX='-glibc-2.17'\n\nif [[ \"${VSCODE_ARCH}\" == \"arm64\" || \"${VSCODE_ARCH}\" == \"armhf\" ]]; then\n  export VSCODE_SKIP_SYSROOT=1\n  export USE_GNUPP2A=1\nelif [[ \"${VSCODE_ARCH}\" == \"ppc64le\" ]]; then\n  export VSCODE_SYSROOT_REPOSITORY='VSCodium/vscode-linux-build-agent'\n  export VSCODE_SYSROOT_VERSION='20240129-253798'\n  export VSCODE_SYSROOT_PREFIX='-glibc-2.28'\n  export USE_GNUPP2A=1\n  export ELECTRON_SKIP_BINARY_DOWNLOAD=1\n  export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\n  export VSCODE_SKIP_SETUPENV=1\n  export VSCODE_ELECTRON_REPOSITORY='lex-ibm/electron-ppc64le-build-scripts'\nelif [[ \"${VSCODE_ARCH}\" == \"riscv64\" ]]; then\n  export VSCODE_ELECTRON_REPOSITORY='riscv-forks/electron-riscv-releases'\n  export ELECTRON_SKIP_BINARY_DOWNLOAD=1\n  export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\n  export VSCODE_SKIP_SETUPENV=1\nelif [[ \"${VSCODE_ARCH}\" == \"loong64\" ]]; then\n  export VSCODE_ELECTRON_REPOSITORY='darkyzhou/electron-loong64'\n  export ELECTRON_SKIP_BINARY_DOWNLOAD=1\n  export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\n  export VSCODE_SKIP_SETUPENV=1\nfi\n\nif [[ -f \"../electron_linux_${VSCODE_ARCH}.sh\" ]]; then\n  # add newline at the end of the file\n  echo \"\" >> build/checksums/electron.txt\n\n  if [[ -f \"../electron_linux_${VSCODE_ARCH}.sha256sums\" ]]; then\n    cat \"../electron_linux_${VSCODE_ARCH}.sha256sums\" >> build/checksums/electron.txt\n  fi\n\n  # shellcheck disable=SC1090\n  source \"../electron_linux_${VSCODE_ARCH}.sh\"\n\n  if [[ \"${ELECTRON_VERSION}\" != \"$( yarn config get target )\" ]]; then\n    # Fail the pipeline if electron target doesn't match what is used.\n    echo \"Electron ${VSCODE_ARCH} binary version doesn't match target electron version!\"\n    echo \"Releases available at: https://github.com/${VSCODE_ELECTRON_REPOSITORY}/releases\"\n    exit 1\n  fi\nfi\n\nif [[ -d \"../patches/linux/client/\" ]]; then\n  for file in \"../patches/linux/client/\"*.patch; do\n    if [[ -f \"${file}\" ]]; then\n      echo applying patch: \"${file}\";\n      if ! git apply --ignore-whitespace \"${file}\"; then\n        echo failed to apply patch \"${file}\" >&2\n        exit 1\n      fi\n    fi\n  done\nfi\n\nif [[ -n \"${USE_GNUPP2A}\" ]]; then\n  INCLUDES=$(cat <<EOF\n{\n  \"target_defaults\": {\n    \"conditions\": [\n      [\"OS=='linux'\", {\n        'cflags_cc!': [ '-std=gnu++20' ],\n        'cflags_cc': [ '-std=gnu++2a' ],\n      }]\n    ]\n  }\n}\nEOF\n)\n\n  if [ ! -d \"$HOME/.gyp\" ]; then\n    mkdir -p \"$HOME/.gyp\"\n  fi\n\n  echo \"${INCLUDES}\" > \"$HOME/.gyp/include.gypi\"\nfi\n\nfor i in {1..5}; do # try 5 times\n  npm ci --prefix build && break\n  if [[ $i == 3 ]]; then\n    echo \"Npm install failed too many times\" >&2\n    exit 1\n  fi\n  echo \"Npm install failed $i, trying again...\"\ndone\n\nif [[ -z \"${VSCODE_SKIP_SETUPENV}\" ]]; then\n  if [[ -n \"${VSCODE_SKIP_SYSROOT}\" ]]; then\n    source ./build/azure-pipelines/linux/setup-env.sh --skip-sysroot\n  else\n    source ./build/azure-pipelines/linux/setup-env.sh\n  fi\nfi\n\nfor i in {1..5}; do # try 5 times\n  npm ci && break\n  if [[ $i -eq 3 ]]; then\n    echo \"Npm install failed too many times\" >&2\n    exit 1\n  fi\n  echo \"Npm install failed $i, trying again...\"\ndone\n\nnode build/azure-pipelines/distro/mixin-npm\n\nyarn gulp \"vscode-linux-${VSCODE_ARCH}-min-ci\"\n\nif [[ -f \"../ripgrep_${VSCODE_PLATFORM}_${VSCODE_ARCH}.sh\" ]]; then\n  bash \"../ripgrep_${VSCODE_PLATFORM}_${VSCODE_ARCH}.sh\" \"../VSCode-linux-${VSCODE_ARCH}/resources/app/node_modules\"\nfi\n\nfind \"../VSCode-linux-${VSCODE_ARCH}\" -print0 | xargs -0 touch -c\n\ncd ..\n"
        },
        {
          "name": "package_linux_reh.sh",
          "type": "blob",
          "size": 6.31,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091\n\nset -ex\n\nif [[ \"${CI_BUILD}\" == \"no\" ]]; then\n  exit 1\nfi\n\nAPP_NAME_LC=\"$( echo \"${APP_NAME}\" | awk '{print tolower($0)}' )\"\n\nmkdir -p assets\n\ntar -xzf ./vscode.tar.gz\n\ncd vscode || { echo \"'vscode' dir not found\"; exit 1; }\n\nGLIBC_VERSION=\"2.28\"\nGLIBCXX_VERSION=\"3.4.26\"\nNODE_VERSION=\"20.18.1\"\n\nexport VSCODE_NODEJS_URLROOT='/download/release'\nexport VSCODE_NODEJS_URLSUFFIX=''\n\nif [[ \"${VSCODE_ARCH}\" == \"x64\" ]]; then\n  GLIBC_VERSION=\"2.17\"\n  GLIBCXX_VERSION=\"3.4.22\"\n  VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME=\"vscodium/vscodium-linux-build-agent:centos7-devtoolset8-${VSCODE_ARCH}\"\n\n  export VSCODE_NODEJS_SITE='https://unofficial-builds.nodejs.org'\n  export VSCODE_NODEJS_URLSUFFIX='-glibc-217'\nelif [[ \"${VSCODE_ARCH}\" == \"arm64\" ]]; then\n  VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME=\"vscodium/vscodium-linux-build-agent:centos7-devtoolset8-${VSCODE_ARCH}\"\n\n  export VSCODE_SKIP_SYSROOT=1\n  export USE_GNUPP2A=1\nelif [[ \"${VSCODE_ARCH}\" == \"armhf\" ]]; then\n  VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME=\"vscodium/vscodium-linux-build-agent:bionic-devtoolset-arm32v7\"\n\n  export VSCODE_SKIP_SYSROOT=1\n  export USE_GNUPP2A=1\nelif [[ \"${VSCODE_ARCH}\" == \"ppc64le\" ]]; then\n  VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME=\"vscodium/vscodium-linux-build-agent:bionic-devtoolset-ppc64le\"\n\n  export ELECTRON_SKIP_BINARY_DOWNLOAD=1\n  export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\n  export VSCODE_SYSROOT_REPOSITORY='VSCodium/vscode-linux-build-agent'\n  export VSCODE_SYSROOT_VERSION='20240129-253798'\n  export USE_GNUPP2A=1\nelif [[ \"${VSCODE_ARCH}\" == \"riscv64\" ]]; then\n  NODE_VERSION=\"20.16.0\"\n  VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME=\"vscodium/vscodium-linux-build-agent:focal-devtoolset-riscv64\"\n\n  export ELECTRON_SKIP_BINARY_DOWNLOAD=1\n  export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\n  export VSCODE_SKIP_SETUPENV=1\n  export VSCODE_NODEJS_SITE='https://unofficial-builds.nodejs.org'\nelif [[ \"${VSCODE_ARCH}\" == \"loong64\" ]]; then\n  NODE_VERSION=\"20.16.0\"\n  VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME=\"vscodium/vscodium-linux-build-agent:trixie-devtoolset-loong64\"\n\n  export ELECTRON_SKIP_BINARY_DOWNLOAD=1\n  export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\n  export VSCODE_SKIP_SETUPENV=1\n  export VSCODE_NODEJS_SITE='https://unofficial-builds.nodejs.org'\nelif [[ \"${VSCODE_ARCH}\" == \"s390x\" ]]; then\n  VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME=\"vscodium/vscodium-linux-build-agent:focal-devtoolset-s390x\"\n\n  export ELECTRON_SKIP_BINARY_DOWNLOAD=1\n  export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\n  export VSCODE_SYSROOT_REPOSITORY='VSCodium/vscode-linux-build-agent'\n  export VSCODE_SYSROOT_VERSION='20241108'\nfi\n\nexport VSCODE_PLATFORM='linux'\nexport VSCODE_SKIP_NODE_VERSION_CHECK=1\nexport VSCODE_SYSROOT_PREFIX=\"-glibc-${GLIBC_VERSION}\"\n\nVSCODE_HOST_MOUNT=\"$( pwd )\"\n\nexport VSCODE_HOST_MOUNT\nexport VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME\n\nsed -i \"/target/s/\\\"20.*\\\"/\\\"${NODE_VERSION}\\\"/\" remote/.npmrc\n\nif [[ -d \"../patches/linux/reh/\" ]]; then\n  for file in \"../patches/linux/reh/\"*.patch; do\n    if [[ -f \"${file}\" ]]; then\n      echo applying patch: \"${file}\";\n      if ! git apply --ignore-whitespace \"${file}\"; then\n        echo failed to apply patch \"${file}\" >&2\n        exit 1\n      fi\n    fi\n  done\nfi\n\nif [[ -d \"../patches/linux/reh/${VSCODE_ARCH}/\" ]]; then\n  for file in \"../patches/linux/reh/${VSCODE_ARCH}/\"*.patch; do\n    if [[ -f \"${file}\" ]]; then\n      echo applying patch: \"${file}\";\n      if ! git apply --ignore-whitespace \"${file}\"; then\n        echo failed to apply patch \"${file}\" >&2\n        exit 1\n      fi\n    fi\n  done\nfi\n\nif [[ -n \"${USE_GNUPP2A}\" ]]; then\n  INCLUDES=$(cat <<EOF\n{\n  \"target_defaults\": {\n    \"conditions\": [\n      [\"OS=='linux'\", {\n        'cflags_cc!': [ '-std=gnu++20' ],\n        'cflags_cc': [ '-std=gnu++2a' ],\n      }]\n    ]\n  }\n}\nEOF\n)\n\n  if [ ! -d \"${HOME}/.gyp\" ]; then\n    mkdir -p \"${HOME}/.gyp\"\n  fi\n\n  echo \"${INCLUDES}\" > \"${HOME}/.gyp/include.gypi\"\nfi\n\nfor i in {1..5}; do # try 5 times\n  npm ci --prefix build && break\n  if [[ $i == 3 ]]; then\n    echo \"Npm install failed too many times\" >&2\n    exit 1\n  fi\n  echo \"Npm install failed $i, trying again...\"\ndone\n\nif [[ -z \"${VSCODE_SKIP_SETUPENV}\" ]]; then\n  if [[ -n \"${VSCODE_SKIP_SYSROOT}\" ]]; then\n    source ./build/azure-pipelines/linux/setup-env.sh --skip-sysroot\n  else\n    source ./build/azure-pipelines/linux/setup-env.sh\n  fi\nfi\n\nfor i in {1..5}; do # try 5 times\n  npm ci && break\n  if [[ $i == 3 ]]; then\n    echo \"Npm install failed too many times\" >&2\n    exit 1\n  fi\n  echo \"Npm install failed $i, trying again...\"\ndone\n\nnode build/azure-pipelines/distro/mixin-npm\n\nexport VSCODE_NODE_GLIBC=\"-glibc-${GLIBC_VERSION}\"\n\nif [[ \"${SHOULD_BUILD_REH}\" != \"no\" ]]; then\n  echo \"Building REH\"\n  yarn gulp minify-vscode-reh\n  yarn gulp \"vscode-reh-${VSCODE_PLATFORM}-${VSCODE_ARCH}-min-ci\"\n\n  EXPECTED_GLIBC_VERSION=\"${GLIBC_VERSION}\" EXPECTED_GLIBCXX_VERSION=\"${GLIBCXX_VERSION}\" SEARCH_PATH=\"../vscode-reh-${VSCODE_PLATFORM}-${VSCODE_ARCH}\" ./build/azure-pipelines/linux/verify-glibc-requirements.sh\n\n  pushd \"../vscode-reh-${VSCODE_PLATFORM}-${VSCODE_ARCH}\"\n\n  if [[ -f \"../ripgrep_${VSCODE_PLATFORM}_${VSCODE_ARCH}.sh\" ]]; then\n    bash \"../ripgrep_${VSCODE_PLATFORM}_${VSCODE_ARCH}.sh\" \"node_modules\"\n  fi\n\n  echo \"Archiving REH\"\n  tar czf \"../assets/${APP_NAME_LC}-reh-${VSCODE_PLATFORM}-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" .\n\n  popd\nfi\n\nif [[ \"${SHOULD_BUILD_REH_WEB}\" != \"no\" ]]; then\n  echo \"Building REH-web\"\n  yarn gulp minify-vscode-reh-web\n  yarn gulp \"vscode-reh-web-${VSCODE_PLATFORM}-${VSCODE_ARCH}-min-ci\"\n\n  EXPECTED_GLIBC_VERSION=\"${GLIBC_VERSION}\" EXPECTED_GLIBCXX_VERSION=\"${GLIBCXX_VERSION}\" SEARCH_PATH=\"../vscode-reh-web-${VSCODE_PLATFORM}-${VSCODE_ARCH}\" ./build/azure-pipelines/linux/verify-glibc-requirements.sh\n\n  pushd \"../vscode-reh-web-${VSCODE_PLATFORM}-${VSCODE_ARCH}\"\n\n  if [[ -f \"../ripgrep_${VSCODE_PLATFORM}_${VSCODE_ARCH}.sh\" ]]; then\n    bash \"../ripgrep_${VSCODE_PLATFORM}_${VSCODE_ARCH}.sh\" \"node_modules\"\n  fi\n\n  echo \"Archiving REH-web\"\n  tar czf \"../assets/${APP_NAME_LC}-reh-web-${VSCODE_PLATFORM}-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" .\n\n  popd\nfi\n\ncd ..\n\nnpm install -g checksum\n\nsum_file() {\n  if [[ -f \"${1}\" ]]; then\n    echo \"Calculating checksum for ${1}\"\n    checksum -a sha256 \"${1}\" > \"${1}\".sha256\n    checksum \"${1}\" > \"${1}\".sha1\n  fi\n}\n\ncd assets\n\nfor FILE in *; do\n  if [[ -f \"${FILE}\" ]]; then\n    sum_file \"${FILE}\"\n  fi\ndone\n\ncd ..\n"
        },
        {
          "name": "package_windows.sh",
          "type": "blob",
          "size": 0.89,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091\n\nset -ex\n\nif [[ \"${CI_BUILD}\" == \"no\" ]]; then\n  exit 1\nfi\n\ntar -xzf ./vscode.tar.gz\n\ncd vscode || { echo \"'vscode' dir not found\"; exit 1; }\n\nfor i in {1..5}; do # try 5 times\n  npm ci && break\n  if [[ $i -eq 3 ]]; then\n    echo \"Npm install failed too many times\" >&2\n    exit 1\n  fi\n  echo \"Npm install failed $i, trying again...\"\ndone\n\nnode build/azure-pipelines/distro/mixin-npm\n\n. ../build/windows/rtf/make.sh\n\nyarn gulp \"vscode-win32-${VSCODE_ARCH}-min-ci\"\n\nif [[ \"${VSCODE_ARCH}\" == \"x64\" ]]; then\n  if [[ \"${SHOULD_BUILD_REH}\" != \"no\" ]]; then\n    echo \"Building REH\"\n    yarn gulp minify-vscode-reh\n    yarn gulp \"vscode-reh-win32-${VSCODE_ARCH}-min-ci\"\n  fi\n\n  if [[ \"${SHOULD_BUILD_REH_WEB}\" != \"no\" ]]; then\n    echo \"Building REH-web\"\n    yarn gulp minify-vscode-reh-web\n    yarn gulp \"vscode-reh-web-win32-${VSCODE_ARCH}-min-ci\"\n  fi\nfi\n\ncd ..\n"
        },
        {
          "name": "patch.sh",
          "type": "blob",
          "size": 0.87,
          "content": "#!/usr/bin/env bash\n\nset -e\n\necho \"$#\"\n\ncd vscode || { echo \"'vscode' dir not found\"; exit 1; }\n\ngit add .\ngit reset -q --hard HEAD\n\nwhile [[ -n \"$( git log -1 | grep \"VSCODIUM HELPER\" )\" ]]; do\n  git reset -q --hard HEAD~\ndone\n\ngit apply --reject \"../patches/helper/settings.patch\"\n\nwhile [ $# -gt 1 ]; do\n  echo \"Parameter: $1\"\n  if [[ \"${1}\" == *patch ]]; then\n    FILE=\"../patches/${1}\"\n  else\n    FILE=\"../patches/${1}.patch\"\n  fi\n\n  git apply --reject \"${FILE}\"\n\n  shift\ndone\n\ngit add .\ngit commit -q -m \"VSCODIUM HELPER\" --no-verify\n\nif [[ \"${1}\" == *patch ]]; then\n  FILE=\"../patches/${1}\"\nelse\n  FILE=\"../patches/${1}.patch\"\nfi\n\nif [[ -f \"${FILE}\" ]]; then\n  git apply --reject \"${FILE}\"\nfi\n\nread -rp \"Press any key when the conflict have been resolved...\" -n1 -s\n\ngit add .\ngit diff --staged -U1 > \"${FILE}\"\ngit reset -q --hard HEAD~\n\ncd ..\n\necho \"The patch has been generated.\"\n"
        },
        {
          "name": "patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "prepare_assets.sh",
          "type": "blob",
          "size": 6.94,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091\n\nset -e\n\nAPP_NAME_LC=\"$( echo \"${APP_NAME}\" | awk '{print tolower($0)}' )\"\n\nmkdir -p assets\n\nif [[ \"${OS_NAME}\" == \"osx\" ]]; then\n  if [[ -n \"${CERTIFICATE_OSX_P12_DATA}\" ]]; then\n    if [[ \"${CI_BUILD}\" == \"no\" ]]; then\n      RUNNER_TEMP=\"${TMPDIR}\"\n    fi\n\n    CERTIFICATE_P12=\"${APP_NAME}.p12\"\n    KEYCHAIN=\"${RUNNER_TEMP}/buildagent.keychain\"\n    AGENT_TEMPDIRECTORY=\"${RUNNER_TEMP}\"\n    # shellcheck disable=SC2006\n    KEYCHAINS=`security list-keychains | xargs`\n\n    rm -f \"${KEYCHAIN}\"\n\n    echo \"${CERTIFICATE_OSX_P12_DATA}\" | base64 --decode > \"${CERTIFICATE_P12}\"\n\n    echo \"+ create temporary keychain\"\n    security create-keychain -p pwd \"${KEYCHAIN}\"\n    security set-keychain-settings -lut 21600 \"${KEYCHAIN}\"\n    security unlock-keychain -p pwd \"${KEYCHAIN}\"\n    # shellcheck disable=SC2086\n    security list-keychains -s $KEYCHAINS \"${KEYCHAIN}\"\n    # security show-keychain-info \"${KEYCHAIN}\"\n\n    echo \"+ import certificate to keychain\"\n    security import \"${CERTIFICATE_P12}\" -k \"${KEYCHAIN}\" -P \"${CERTIFICATE_OSX_P12_PASSWORD}\" -T /usr/bin/codesign\n    security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k pwd \"${KEYCHAIN}\" > /dev/null\n    # security find-identity \"${KEYCHAIN}\"\n\n    CODESIGN_IDENTITY=\"$( security find-identity -v -p codesigning \"${KEYCHAIN}\" | grep -oEi \"([0-9A-F]{40})\" | head -n 1 )\"\n\n    echo \"+ signing\"\n    export CODESIGN_IDENTITY AGENT_TEMPDIRECTORY\n\n    DEBUG=\"electron-osx-sign*\" node vscode/build/darwin/sign.js \"$( pwd )\"\n    # codesign --display --entitlements :- \"\"\n\n    echo \"+ notarize\"\n\n    cd \"VSCode-darwin-${VSCODE_ARCH}\"\n    ZIP_FILE=\"./${APP_NAME}-darwin-${VSCODE_ARCH}-${RELEASE_VERSION}.zip\"\n\n    zip -r -X -y \"${ZIP_FILE}\" ./*.app\n\n    xcrun notarytool store-credentials \"${APP_NAME}\" --apple-id \"${CERTIFICATE_OSX_ID}\" --team-id \"${CERTIFICATE_OSX_TEAM_ID}\" --password \"${CERTIFICATE_OSX_APP_PASSWORD}\" --keychain \"${KEYCHAIN}\"\n    # xcrun notarytool history --keychain-profile \"${APP_NAME}\" --keychain \"${KEYCHAIN}\"\n    xcrun notarytool submit \"${ZIP_FILE}\" --keychain-profile \"${APP_NAME}\" --wait --keychain \"${KEYCHAIN}\"\n\n    echo \"+ attach staple\"\n    xcrun stapler staple ./*.app\n    # spctl --assess -vv --type install ./*.app\n\n    rm \"${ZIP_FILE}\"\n\n    cd ..\n  fi\n\n  if [[ \"${SHOULD_BUILD_ZIP}\" != \"no\" ]]; then\n    echo \"Building and moving ZIP\"\n    cd \"VSCode-darwin-${VSCODE_ARCH}\"\n    zip -r -X -y \"../assets/${APP_NAME}-darwin-${VSCODE_ARCH}-${RELEASE_VERSION}.zip\" ./*.app\n    cd ..\n  fi\n\n  if [[ \"${SHOULD_BUILD_DMG}\" != \"no\" ]]; then\n    echo \"Building and moving DMG\"\n    pushd \"VSCode-darwin-${VSCODE_ARCH}\"\n    npx create-dmg ./*.app .\n    mv ./*.dmg \"../assets/${APP_NAME}.${VSCODE_ARCH}.${RELEASE_VERSION}.dmg\"\n    popd\n  fi\n\n  if [[ \"${SHOULD_BUILD_SRC}\" == \"yes\" ]]; then\n    git archive --format tar.gz --output=\"./assets/${APP_NAME}-${RELEASE_VERSION}-src.tar.gz\" HEAD\n    git archive --format zip --output=\"./assets/${APP_NAME}-${RELEASE_VERSION}-src.zip\" HEAD\n  fi\n\n  if [[ -n \"${CERTIFICATE_OSX_P12_DATA}\" ]]; then\n    echo \"+ clean\"\n    security delete-keychain \"${KEYCHAIN}\"\n    # shellcheck disable=SC2086\n    security list-keychains -s $KEYCHAINS\n  fi\n\n  VSCODE_PLATFORM=\"darwin\"\nelif [[ \"${OS_NAME}\" == \"windows\" ]]; then\n  cd vscode || { echo \"'vscode' dir not found\"; exit 1; }\n\n  yarn gulp \"vscode-win32-${VSCODE_ARCH}-inno-updater\"\n\n  if [[ \"${SHOULD_BUILD_ZIP}\" != \"no\" ]]; then\n    7z.exe a -tzip \"../assets/${APP_NAME}-win32-${VSCODE_ARCH}-${RELEASE_VERSION}.zip\" -x!CodeSignSummary*.md -x!tools \"../VSCode-win32-${VSCODE_ARCH}/*\" -r\n  fi\n\n  if [[ \"${SHOULD_BUILD_EXE_SYS}\" != \"no\" ]]; then\n    yarn gulp \"vscode-win32-${VSCODE_ARCH}-system-setup\"\n  fi\n\n  if [[ \"${SHOULD_BUILD_EXE_USR}\" != \"no\" ]]; then\n    yarn gulp \"vscode-win32-${VSCODE_ARCH}-user-setup\"\n  fi\n\n  if [[ \"${VSCODE_ARCH}\" == \"ia32\" || \"${VSCODE_ARCH}\" == \"x64\" ]]; then\n    if [[ \"${SHOULD_BUILD_MSI}\" != \"no\" ]]; then\n      . ../build/windows/msi/build.sh\n    fi\n\n    if [[ \"${SHOULD_BUILD_MSI_NOUP}\" != \"no\" ]]; then\n      . ../build/windows/msi/build-updates-disabled.sh\n    fi\n  fi\n\n  cd ..\n\n  if [[ \"${SHOULD_BUILD_EXE_SYS}\" != \"no\" ]]; then\n    echo \"Moving System EXE\"\n    mv \"vscode\\\\.build\\\\win32-${VSCODE_ARCH}\\\\system-setup\\\\VSCodeSetup.exe\" \"assets\\\\${APP_NAME}Setup-${VSCODE_ARCH}-${RELEASE_VERSION}.exe\"\n  fi\n\n  if [[ \"${SHOULD_BUILD_EXE_USR}\" != \"no\" ]]; then\n    echo \"Moving User EXE\"\n    mv \"vscode\\\\.build\\\\win32-${VSCODE_ARCH}\\\\user-setup\\\\VSCodeSetup.exe\" \"assets\\\\${APP_NAME}UserSetup-${VSCODE_ARCH}-${RELEASE_VERSION}.exe\"\n  fi\n\n  if [[ \"${VSCODE_ARCH}\" == \"ia32\" || \"${VSCODE_ARCH}\" == \"x64\" ]]; then\n    if [[ \"${SHOULD_BUILD_MSI}\" != \"no\" ]]; then\n      echo \"Moving MSI\"\n      mv \"build\\\\windows\\\\msi\\\\releasedir\\\\${APP_NAME}-${VSCODE_ARCH}-${RELEASE_VERSION}.msi\" assets/\n    fi\n\n    if [[ \"${SHOULD_BUILD_MSI_NOUP}\" != \"no\" ]]; then\n      echo \"Moving MSI with disabled updates\"\n      mv \"build\\\\windows\\\\msi\\\\releasedir\\\\${APP_NAME}-${VSCODE_ARCH}-updates-disabled-${RELEASE_VERSION}.msi\" assets/\n    fi\n  fi\n\n  VSCODE_PLATFORM=\"win32\"\nelse\n  cd vscode || { echo \"'vscode' dir not found\"; exit 1; }\n\n  if [[ \"${SHOULD_BUILD_APPIMAGE}\" != \"no\" && \"${VSCODE_ARCH}\" != \"x64\" ]]; then\n    SHOULD_BUILD_APPIMAGE=\"no\"\n  fi\n\n  if [[ \"${SHOULD_BUILD_DEB}\" != \"no\" || \"${SHOULD_BUILD_APPIMAGE}\" != \"no\" ]]; then\n    yarn gulp \"vscode-linux-${VSCODE_ARCH}-build-deb\"\n  fi\n\n  if [[ \"${SHOULD_BUILD_RPM}\" != \"no\" ]]; then\n    yarn gulp \"vscode-linux-${VSCODE_ARCH}-build-rpm\"\n  fi\n\n  if [[ \"${SHOULD_BUILD_APPIMAGE}\" != \"no\" ]]; then\n    . ../build/linux/appimage/build.sh\n  fi\n\n  cd ..\n\n  if [[ \"${CI_BUILD}\" == \"no\" ]]; then\n    . ./stores/snapcraft/build.sh\n\n    if [[ \"${SKIP_ASSETS}\" == \"no\" ]]; then\n      mv stores/snapcraft/build/*.snap assets/\n    fi\n  fi\n\n  if [[ \"${SHOULD_BUILD_TAR}\" != \"no\" ]]; then\n    echo \"Building and moving TAR\"\n    cd \"VSCode-linux-${VSCODE_ARCH}\"\n    tar czf \"../assets/${APP_NAME}-linux-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" .\n    cd ..\n  fi\n\n  if [[ \"${SHOULD_BUILD_DEB}\" != \"no\" ]]; then\n    echo \"Moving DEB\"\n    mv vscode/.build/linux/deb/*/deb/*.deb assets/\n  fi\n\n  if [[ \"${SHOULD_BUILD_RPM}\" != \"no\" ]]; then\n    echo \"Moving RPM\"\n    mv vscode/.build/linux/rpm/*/*.rpm assets/\n  fi\n\n  if [[ \"${SHOULD_BUILD_APPIMAGE}\" != \"no\" ]]; then\n    echo \"Moving AppImage\"\n    mv build/linux/appimage/out/*.AppImage* assets/\n\n    find assets -name '*.AppImage*' -exec bash -c 'mv $0 ${0/_-_/-}' {} \\;\n  fi\n\n  VSCODE_PLATFORM=\"linux\"\nfi\n\nif [[ \"${SHOULD_BUILD_REH}\" != \"no\" ]]; then\n  echo \"Building and moving REH\"\n  cd \"vscode-reh-${VSCODE_PLATFORM}-${VSCODE_ARCH}\"\n  tar czf \"../assets/${APP_NAME_LC}-reh-${VSCODE_PLATFORM}-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" .\n  cd ..\nfi\n\nif [[ \"${SHOULD_BUILD_REH_WEB}\" != \"no\" ]]; then\n  echo \"Building and moving REH-web\"\n  cd \"vscode-reh-web-${VSCODE_PLATFORM}-${VSCODE_ARCH}\"\n  tar czf \"../assets/${APP_NAME_LC}-reh-web-${VSCODE_PLATFORM}-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\" .\n  cd ..\nfi\n\nif [[ \"${OS_NAME}\" != \"windows\" ]]; then\n  ./prepare_checksums.sh\nfi\n"
        },
        {
          "name": "prepare_checksums.sh",
          "type": "blob",
          "size": 0.31,
          "content": "#!/usr/bin/env bash\n\nset -e\n\nnpm install -g checksum\n\nsum_file() {\n  if [[ -f \"${1}\" ]]; then\n    echo \"Calculating checksum for ${1}\"\n    checksum -a sha256 \"${1}\" > \"${1}\".sha256\n    checksum \"${1}\" > \"${1}\".sha1\n  fi\n}\n\ncd assets\n\nfor FILE in *; do\n  if [[ -f \"${FILE}\" ]]; then\n    sum_file \"${FILE}\"\n  fi\ndone\n\ncd ..\n"
        },
        {
          "name": "prepare_src.sh",
          "type": "blob",
          "size": 0.54,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091\n\nset -e\n\nnpm install -g checksum\n\nsum_file() {\n  if [[ -f \"${1}\" ]]; then\n    echo \"Calculating checksum for ${1}\"\n    checksum -a sha256 \"${1}\" > \"${1}\".sha256\n    checksum \"${1}\" > \"${1}\".sha1\n  fi\n}\n\nmkdir -p assets\n\ngit archive --format tar.gz --output=\"./assets/${APP_NAME}-${RELEASE_VERSION}-src.tar.gz\" HEAD\ngit archive --format zip --output=\"./assets/${APP_NAME}-${RELEASE_VERSION}-src.zip\" HEAD\n\ncd assets\n\nfor FILE in *; do\n  if [[ -f \"${FILE}\" ]]; then\n    sum_file \"${FILE}\"\n  fi\ndone\n\ncd ..\n"
        },
        {
          "name": "prepare_vscode.sh",
          "type": "blob",
          "size": 10.01,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091,2154\n\nset -e\n\n# include common functions\n. ./utils.sh\n\nif [[ \"${VSCODE_QUALITY}\" == \"insider\" ]]; then\n  cp -rp src/insider/* vscode/\nelse\n  cp -rp src/stable/* vscode/\nfi\n\ncp -f LICENSE vscode/LICENSE.txt\n\ncd vscode || { echo \"'vscode' dir not found\"; exit 1; }\n\n../update_settings.sh\n\n# apply patches\n{ set +x; } 2>/dev/null\n\nfor file in ../patches/*.patch; do\n  if [[ -f \"${file}\" ]]; then\n    echo applying patch: \"${file}\";\n    # grep '^+++' \"${file}\"  | sed -e 's#+++ [ab]/#./vscode/#' | while read line; do shasum -a 256 \"${line}\"; done\n    if ! git apply --ignore-whitespace \"${file}\"; then\n      echo failed to apply patch \"${file}\" >&2\n      exit 1\n    fi\n  fi\ndone\n\nif [[ \"${VSCODE_QUALITY}\" == \"insider\" ]]; then\n  for file in ../patches/insider/*.patch; do\n    if [[ -f \"${file}\" ]]; then\n      echo applying patch: \"${file}\";\n      if ! git apply --ignore-whitespace \"${file}\"; then\n        echo failed to apply patch \"${file}\" >&2\n        exit 1\n      fi\n    fi\n  done\nfi\n\nfor file in ../patches/user/*.patch; do\n  if [[ -f \"${file}\" ]]; then\n    echo applying user patch: \"${file}\";\n    if ! git apply --ignore-whitespace \"${file}\"; then\n      echo failed to apply patch \"${file}\" >&2\n      exit 1\n    fi\n  fi\ndone\n\nif [[ -d \"../patches/${OS_NAME}/\" ]]; then\n  for file in \"../patches/${OS_NAME}/\"*.patch; do\n    if [[ -f \"${file}\" ]]; then\n      echo applying patch: \"${file}\";\n      if ! git apply --ignore-whitespace \"${file}\"; then\n        echo failed to apply patch \"${file}\" >&2\n        exit 1\n      fi\n    fi\n  done\nfi\n\nset -x\n\nexport ELECTRON_SKIP_BINARY_DOWNLOAD=1\nexport PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1\n\nif [[ \"${OS_NAME}\" == \"linux\" ]]; then\n  export VSCODE_SKIP_NODE_VERSION_CHECK=1\n\n   if [[ \"${npm_config_arch}\" == \"arm\" ]]; then\n    export npm_config_arm_version=7\n  fi\nelif [[ \"${OS_NAME}\" == \"windows\" ]]; then\n  if [[ \"${npm_config_arch}\" == \"arm\" ]]; then\n    export npm_config_arm_version=7\n  fi\nfi\n\nfor i in {1..5}; do # try 5 times\n  npm ci && break\n  if [[ $i == 3 ]]; then\n    echo \"Npm install failed too many times\" >&2\n    exit 1\n  fi\n  echo \"Npm install failed $i, trying again...\"\n\n  sleep $(( 15 * (i + 1)))\ndone\n\nsetpath() {\n  local jsonTmp\n  { set +x; } 2>/dev/null\n  jsonTmp=$( jq --arg 'path' \"${2}\" --arg 'value' \"${3}\" 'setpath([$path]; $value)' \"${1}.json\" )\n  echo \"${jsonTmp}\" > \"${1}.json\"\n  set -x\n}\n\nsetpath_json() {\n  local jsonTmp\n  { set +x; } 2>/dev/null\n  jsonTmp=$( jq --arg 'path' \"${2}\" --argjson 'value' \"${3}\" 'setpath([$path]; $value)' \"${1}.json\" )\n  echo \"${jsonTmp}\" > \"${1}.json\"\n  set -x\n}\n\n# product.json\ncp product.json{,.bak}\n\nsetpath \"product\" \"checksumFailMoreInfoUrl\" \"https://go.microsoft.com/fwlink/?LinkId=828886\"\nsetpath \"product\" \"documentationUrl\" \"https://go.microsoft.com/fwlink/?LinkID=533484#vscode\"\nsetpath_json \"product\" \"extensionsGallery\" '{\"serviceUrl\": \"https://open-vsx.org/vscode/gallery\", \"itemUrl\": \"https://open-vsx.org/vscode/item\"}'\nsetpath \"product\" \"introductoryVideosUrl\" \"https://go.microsoft.com/fwlink/?linkid=832146\"\nsetpath \"product\" \"keyboardShortcutsUrlLinux\" \"https://go.microsoft.com/fwlink/?linkid=832144\"\nsetpath \"product\" \"keyboardShortcutsUrlMac\" \"https://go.microsoft.com/fwlink/?linkid=832143\"\nsetpath \"product\" \"keyboardShortcutsUrlWin\" \"https://go.microsoft.com/fwlink/?linkid=832145\"\nsetpath \"product\" \"licenseUrl\" \"https://github.com/VSCodium/vscodium/blob/master/LICENSE\"\nsetpath_json \"product\" \"linkProtectionTrustedDomains\" '[\"https://open-vsx.org\"]'\nsetpath \"product\" \"releaseNotesUrl\" \"https://go.microsoft.com/fwlink/?LinkID=533483#vscode\"\nsetpath \"product\" \"reportIssueUrl\" \"https://github.com/VSCodium/vscodium/issues/new\"\nsetpath \"product\" \"requestFeatureUrl\" \"https://go.microsoft.com/fwlink/?LinkID=533482\"\nsetpath \"product\" \"tipsAndTricksUrl\" \"https://go.microsoft.com/fwlink/?linkid=852118\"\nsetpath \"product\" \"twitterUrl\" \"https://go.microsoft.com/fwlink/?LinkID=533687\"\n\nif [[ \"${DISABLE_UPDATE}\" != \"yes\" ]]; then\n  setpath \"product\" \"updateUrl\" \"https://vscodium.now.sh\"\n  setpath \"product\" \"downloadUrl\" \"https://github.com/VSCodium/vscodium/releases\"\nfi\n\nif [[ \"${VSCODE_QUALITY}\" == \"insider\" ]]; then\n  setpath \"product\" \"nameShort\" \"VSCodium - Insiders\"\n  setpath \"product\" \"nameLong\" \"VSCodium - Insiders\"\n  setpath \"product\" \"applicationName\" \"codium-insiders\"\n  setpath \"product\" \"dataFolderName\" \".vscodium-insiders\"\n  setpath \"product\" \"linuxIconName\" \"vscodium-insiders\"\n  setpath \"product\" \"quality\" \"insider\"\n  setpath \"product\" \"urlProtocol\" \"vscodium-insiders\"\n  setpath \"product\" \"serverApplicationName\" \"codium-server-insiders\"\n  setpath \"product\" \"serverDataFolderName\" \".vscodium-server-insiders\"\n  setpath \"product\" \"darwinBundleIdentifier\" \"com.vscodium.VSCodiumInsiders\"\n  setpath \"product\" \"win32AppUserModelId\" \"VSCodium.VSCodiumInsiders\"\n  setpath \"product\" \"win32DirName\" \"VSCodium Insiders\"\n  setpath \"product\" \"win32MutexName\" \"vscodiuminsiders\"\n  setpath \"product\" \"win32NameVersion\" \"VSCodium Insiders\"\n  setpath \"product\" \"win32RegValueName\" \"VSCodiumInsiders\"\n  setpath \"product\" \"win32ShellNameShort\" \"VSCodium Insiders\"\n  setpath \"product\" \"win32AppId\" \"{{EF35BB36-FA7E-4BB9-B7DA-D1E09F2DA9C9}\"\n  setpath \"product\" \"win32x64AppId\" \"{{B2E0DDB2-120E-4D34-9F7E-8C688FF839A2}\"\n  setpath \"product\" \"win32arm64AppId\" \"{{44721278-64C6-4513-BC45-D48E07830599}\"\n  setpath \"product\" \"win32UserAppId\" \"{{ED2E5618-3E7E-4888-BF3C-A6CCC84F586F}\"\n  setpath \"product\" \"win32x64UserAppId\" \"{{20F79D0D-A9AC-4220-9A81-CE675FFB6B41}\"\n  setpath \"product\" \"win32arm64UserAppId\" \"{{2E362F92-14EA-455A-9ABD-3E656BBBFE71}\"\nelse\n  setpath \"product\" \"nameShort\" \"VSCodium\"\n  setpath \"product\" \"nameLong\" \"VSCodium\"\n  setpath \"product\" \"applicationName\" \"codium\"\n  setpath \"product\" \"linuxIconName\" \"vscodium\"\n  setpath \"product\" \"quality\" \"stable\"\n  setpath \"product\" \"urlProtocol\" \"vscodium\"\n  setpath \"product\" \"serverApplicationName\" \"codium-server\"\n  setpath \"product\" \"serverDataFolderName\" \".vscodium-server\"\n  setpath \"product\" \"darwinBundleIdentifier\" \"com.vscodium\"\n  setpath \"product\" \"win32AppUserModelId\" \"VSCodium.VSCodium\"\n  setpath \"product\" \"win32DirName\" \"VSCodium\"\n  setpath \"product\" \"win32MutexName\" \"vscodium\"\n  setpath \"product\" \"win32NameVersion\" \"VSCodium\"\n  setpath \"product\" \"win32RegValueName\" \"VSCodium\"\n  setpath \"product\" \"win32ShellNameShort\" \"VSCodium\"\n  setpath \"product\" \"win32AppId\" \"{{763CBF88-25C6-4B10-952F-326AE657F16B}\"\n  setpath \"product\" \"win32x64AppId\" \"{{88DA3577-054F-4CA1-8122-7D820494CFFB}\"\n  setpath \"product\" \"win32arm64AppId\" \"{{67DEE444-3D04-4258-B92A-BC1F0FF2CAE4}\"\n  setpath \"product\" \"win32UserAppId\" \"{{0FD05EB4-651E-4E78-A062-515204B47A3A}\"\n  setpath \"product\" \"win32x64UserAppId\" \"{{2E1F05D1-C245-4562-81EE-28188DB6FD17}\"\n  setpath \"product\" \"win32arm64UserAppId\" \"{{57FD70A5-1B8D-4875-9F40-C5553F094828}\"\nfi\n\njsonTmp=$( jq -s '.[0] * .[1]' product.json ../product.json )\necho \"${jsonTmp}\" > product.json && unset jsonTmp\n\ncat product.json\n\n# package.json\ncp package.json{,.bak}\n\nsetpath \"package\" \"version\" \"$( echo \"${RELEASE_VERSION}\" | sed -n -E \"s/^(.*)\\.([0-9]+)(-insider)?$/\\1/p\" )\"\nsetpath \"package\" \"release\" \"$( echo \"${RELEASE_VERSION}\" | sed -n -E \"s/^(.*)\\.([0-9]+)(-insider)?$/\\2/p\" )\"\n\nreplace 's|Microsoft Corporation|VSCodium|' package.json\n\n# announcements\nreplace \"s|\\\\[\\\\/\\\\* BUILTIN_ANNOUNCEMENTS \\\\*\\\\/\\\\]|$( tr -d '\\n' < ../announcements-builtin.json )|\" src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts\n\n../undo_telemetry.sh\n\nreplace 's|Microsoft Corporation|VSCodium|' build/lib/electron.js\nreplace 's|Microsoft Corporation|VSCodium|' build/lib/electron.ts\nreplace 's|([0-9]) Microsoft|\\1 VSCodium|' build/lib/electron.js\nreplace 's|([0-9]) Microsoft|\\1 VSCodium|' build/lib/electron.ts\n\nif [[ \"${OS_NAME}\" == \"linux\" ]]; then\n  # microsoft adds their apt repo to sources\n  # unless the app name is code-oss\n  # as we are renaming the application to vscodium\n  # we need to edit a line in the post install template\n  if [[ \"${VSCODE_QUALITY}\" == \"insider\" ]]; then\n    sed -i \"s/code-oss/codium-insiders/\" resources/linux/debian/postinst.template\n  else\n    sed -i \"s/code-oss/codium/\" resources/linux/debian/postinst.template\n  fi\n\n  # fix the packages metadata\n  # code.appdata.xml\n  sed -i 's|Visual Studio Code|VSCodium|g' resources/linux/code.appdata.xml\n  sed -i 's|https://code.visualstudio.com/docs/setup/linux|https://github.com/VSCodium/vscodium#download-install|' resources/linux/code.appdata.xml\n  sed -i 's|https://code.visualstudio.com/home/home-screenshot-linux-lg.png|https://vscodium.com/img/vscodium.png|' resources/linux/code.appdata.xml\n  sed -i 's|https://code.visualstudio.com|https://vscodium.com|' resources/linux/code.appdata.xml\n\n  # control.template\n  sed -i 's|Microsoft Corporation <vscode-linux@microsoft.com>|VSCodium Team https://github.com/VSCodium/vscodium/graphs/contributors|'  resources/linux/debian/control.template\n  sed -i 's|Visual Studio Code|VSCodium|g' resources/linux/debian/control.template\n  sed -i 's|https://code.visualstudio.com/docs/setup/linux|https://github.com/VSCodium/vscodium#download-install|' resources/linux/debian/control.template\n  sed -i 's|https://code.visualstudio.com|https://vscodium.com|' resources/linux/debian/control.template\n\n  # code.spec.template\n  sed -i 's|Microsoft Corporation|VSCodium Team|' resources/linux/rpm/code.spec.template\n  sed -i 's|Visual Studio Code Team <vscode-linux@microsoft.com>|VSCodium Team https://github.com/VSCodium/vscodium/graphs/contributors|' resources/linux/rpm/code.spec.template\n  sed -i 's|Visual Studio Code|VSCodium|' resources/linux/rpm/code.spec.template\n  sed -i 's|https://code.visualstudio.com/docs/setup/linux|https://github.com/VSCodium/vscodium#download-install|' resources/linux/rpm/code.spec.template\n  sed -i 's|https://code.visualstudio.com|https://vscodium.com|' resources/linux/rpm/code.spec.template\n\n  # snapcraft.yaml\n  sed -i 's|Visual Studio Code|VSCodium|'  resources/linux/rpm/code.spec.template\nelif [[ \"${OS_NAME}\" == \"windows\" ]]; then\n  # code.iss\n  sed -i 's|https://code.visualstudio.com|https://vscodium.com|' build/win32/code.iss\n  sed -i 's|Microsoft Corporation|VSCodium|' build/win32/code.iss\nfi\n\ncd ..\n"
        },
        {
          "name": "product.json",
          "type": "blob",
          "size": 12.37,
          "content": "{\n  \"extensionAllowedBadgeProviders\": [\n    \"api.bintray.com\",\n    \"api.travis-ci.com\",\n    \"api.travis-ci.org\",\n    \"app.fossa.io\",\n    \"badge.buildkite.com\",\n    \"badge.fury.io\",\n    \"badge.waffle.io\",\n    \"badgen.net\",\n    \"badges.frapsoft.com\",\n    \"badges.gitter.im\",\n    \"badges.greenkeeper.io\",\n    \"cdn.travis-ci.com\",\n    \"cdn.travis-ci.org\",\n    \"ci.appveyor.com\",\n    \"circleci.com\",\n    \"cla.opensource.microsoft.com\",\n    \"codacy.com\",\n    \"codeclimate.com\",\n    \"codecov.io\",\n    \"coveralls.io\",\n    \"david-dm.org\",\n    \"deepscan.io\",\n    \"dev.azure.com\",\n    \"docs.rs\",\n    \"flat.badgen.net\",\n    \"gemnasium.com\",\n    \"githost.io\",\n    \"gitlab.com\",\n    \"godoc.org\",\n    \"goreportcard.com\",\n    \"img.shields.io\",\n    \"isitmaintained.com\",\n    \"marketplace.visualstudio.com\",\n    \"nodesecurity.io\",\n    \"opencollective.com\",\n    \"snyk.io\",\n    \"travis-ci.com\",\n    \"travis-ci.org\",\n    \"visualstudio.com\",\n    \"vsmarketplacebadge.apphb.com\",\n    \"www.bithound.io\",\n    \"www.versioneye.com\"\n  ],\n  \"extensionAllowedBadgeProvidersRegex\": [\n    \"^https:\\\\/\\\\/github\\\\.com\\\\/[^/]+\\\\/[^/]+\\\\/(actions\\\\/)?workflows\\\\/.*badge\\\\.svg\"\n  ],\n  \"extensionEnabledApiProposals\": {\n    \"ms-vscode.vscode-selfhost-test-provider\": [\n      \"testObserver\",\n      \"testRelatedCode\",\n      \"attributableCoverage\"\n    ],\n    \"VisualStudioExptTeam.vscodeintellicode-completions\": [\n      \"inlineCompletionsAdditions\"\n    ],\n    \"ms-vsliveshare.vsliveshare\": [\n      \"contribMenuBarHome\",\n      \"contribShareMenu\",\n      \"contribStatusBarItems\",\n      \"diffCommand\",\n      \"documentFiltersExclusive\",\n      \"fileSearchProvider\",\n      \"findTextInFiles\",\n      \"notebookCellExecutionState\",\n      \"notebookLiveShare\",\n      \"terminalDimensions\",\n      \"terminalDataWriteEvent\",\n      \"textSearchProvider\"\n    ],\n    \"ms-vscode.js-debug\": [\n      \"portsAttributes\",\n      \"findTextInFiles\",\n      \"workspaceTrust\",\n      \"tunnels\"\n    ],\n    \"ms-toolsai.vscode-ai-remote\": [\n      \"resolvers\"\n    ],\n    \"ms-python.python\": [\n      \"codeActionAI\",\n      \"contribEditorContentMenu\",\n      \"quickPickSortByLabel\",\n      \"portsAttributes\",\n      \"testObserver\",\n      \"quickPickItemTooltip\",\n      \"terminalDataWriteEvent\",\n      \"terminalExecuteCommandEvent\",\n      \"contribIssueReporter\",\n      \"notebookReplDocument\",\n      \"notebookVariableProvider\"\n    ],\n    \"ms-dotnettools.dotnet-interactive-vscode\": [\n      \"notebookMessaging\"\n    ],\n    \"GitHub.codespaces\": [\n      \"contribEditSessions\",\n      \"contribMenuBarHome\",\n      \"contribRemoteHelp\",\n      \"contribViewsRemote\",\n      \"resolvers\",\n      \"tunnels\",\n      \"terminalDataWriteEvent\",\n      \"treeViewReveal\",\n      \"notebookKernelSource\"\n    ],\n    \"ms-vscode.azure-repos\": [\n      \"extensionRuntime\",\n      \"fileSearchProvider\",\n      \"textSearchProvider\"\n    ],\n    \"ms-vscode.remote-repositories\": [\n      \"canonicalUriProvider\",\n      \"contribEditSessions\",\n      \"contribRemoteHelp\",\n      \"contribMenuBarHome\",\n      \"contribViewsRemote\",\n      \"contribViewsWelcome\",\n      \"contribShareMenu\",\n      \"documentFiltersExclusive\",\n      \"editSessionIdentityProvider\",\n      \"extensionRuntime\",\n      \"fileSearchProvider\",\n      \"quickPickSortByLabel\",\n      \"workspaceTrust\",\n      \"shareProvider\",\n      \"scmActionButton\",\n      \"scmSelectedProvider\",\n      \"scmValidation\",\n      \"textSearchProvider\",\n      \"timeline\"\n    ],\n    \"ms-vscode-remote.remote-wsl\": [\n      \"resolvers\",\n      \"contribRemoteHelp\",\n      \"contribViewsRemote\",\n      \"telemetry\"\n    ],\n    \"ms-vscode-remote.remote-ssh\": [\n      \"resolvers\",\n      \"tunnels\",\n      \"terminalDataWriteEvent\",\n      \"contribRemoteHelp\",\n      \"contribViewsRemote\",\n      \"telemetry\"\n    ],\n    \"ms-vscode.remote-server\": [\n      \"resolvers\",\n      \"tunnels\",\n      \"contribViewsWelcome\"\n    ],\n    \"ms-vscode.remote-explorer\": [\n      \"contribRemoteHelp\",\n      \"contribViewsRemote\",\n      \"extensionsAny\"\n    ],\n    \"ms-vscode-remote.remote-containers\": [\n      \"contribEditSessions\",\n      \"resolvers\",\n      \"portsAttributes\",\n      \"tunnels\",\n      \"workspaceTrust\",\n      \"terminalDimensions\",\n      \"contribRemoteHelp\",\n      \"contribViewsRemote\"\n    ],\n    \"ms-vscode.js-debug-nightly\": [\n      \"portsAttributes\",\n      \"findTextInFiles\",\n      \"workspaceTrust\",\n      \"tunnels\"\n    ],\n    \"ms-vscode.lsif-browser\": [\n      \"documentFiltersExclusive\"\n    ],\n    \"ms-vscode.vscode-speech\": [\n      \"speech\"\n    ],\n    \"GitHub.vscode-pull-request-github\": [\n      \"activeComment\",\n      \"codiconDecoration\",\n      \"codeActionRanges\",\n      \"commentingRangeHint\",\n      \"commentReactor\",\n      \"commentReveal\",\n      \"commentThreadApplicability\",\n      \"contribAccessibilityHelpContent\",\n      \"contribCommentEditorActionsMenu\",\n      \"contribCommentPeekContext\",\n      \"contribCommentThreadAdditionalMenu\",\n      \"contribCommentsViewThreadMenus\",\n      \"contribEditorContentMenu\",\n      \"contribMultiDiffEditorMenus\",\n      \"contribShareMenu\",\n      \"diffCommand\",\n      \"fileComments\",\n      \"quickDiffProvider\",\n      \"shareProvider\",\n      \"tabInputTextMerge\",\n      \"tokenInformation\",\n      \"treeViewMarkdownMessage\"\n    ],\n    \"GitHub.copilot\": [\n      \"inlineCompletionsAdditions\"\n    ],\n    \"GitHub.copilot-nightly\": [\n      \"inlineCompletionsAdditions\"\n    ],\n    \"GitHub.copilot-chat\": [\n      \"interactive\",\n      \"terminalDataWriteEvent\",\n      \"terminalExecuteCommandEvent\",\n      \"terminalSelection\",\n      \"terminalQuickFixProvider\",\n      \"chatParticipantAdditions\",\n      \"defaultChatParticipant\",\n      \"embeddings\",\n      \"chatEditing\",\n      \"chatVariableResolver\",\n      \"chatProvider\",\n      \"mappedEditsProvider\",\n      \"aiRelatedInformation\",\n      \"codeActionAI\",\n      \"findTextInFiles\",\n      \"textSearchProvider\",\n      \"textSearchProvider2\",\n      \"activeComment\",\n      \"commentReveal\",\n      \"contribSourceControlInputBoxMenu\",\n      \"contribCommentEditorActionsMenu\",\n      \"contribCommentThreadAdditionalMenu\",\n      \"contribCommentsViewThreadMenus\",\n      \"newSymbolNamesProvider\",\n      \"findFiles2\",\n      \"extensionsAny\",\n      \"authLearnMore\",\n      \"testObserver\",\n      \"aiTextSearchProvider\",\n      \"documentFiltersExclusive\",\n      \"chatParticipantPrivate\",\n      \"contribDebugCreateConfiguration\",\n      \"inlineEdit\"\n    ],\n    \"GitHub.remotehub\": [\n      \"contribRemoteHelp\",\n      \"contribMenuBarHome\",\n      \"contribViewsRemote\",\n      \"contribViewsWelcome\",\n      \"documentFiltersExclusive\",\n      \"extensionRuntime\",\n      \"fileSearchProvider\",\n      \"quickPickSortByLabel\",\n      \"workspaceTrust\",\n      \"scmSelectedProvider\",\n      \"scmValidation\",\n      \"textSearchProvider\",\n      \"timeline\"\n    ],\n    \"ms-python.gather\": [\n      \"notebookCellExecutionState\"\n    ],\n    \"ms-python.vscode-pylance\": [\n      \"notebookCellExecutionState\"\n    ],\n    \"ms-python.debugpy\": [\n      \"contribIssueReporter\",\n      \"contribViewsWelcome\",\n      \"debugVisualization\",\n      \"portsAttributes\"\n    ],\n    \"ms-toolsai.jupyter-renderers\": [\n      \"contribNotebookStaticPreloads\"\n    ],\n    \"ms-toolsai.jupyter\": [\n      \"notebookDeprecated\",\n      \"notebookMessaging\",\n      \"notebookMime\",\n      \"notebookCellExecutionState\",\n      \"portsAttributes\",\n      \"quickPickSortByLabel\",\n      \"notebookKernelSource\",\n      \"interactiveWindow\",\n      \"notebookControllerAffinityHidden\",\n      \"contribNotebookStaticPreloads\",\n      \"quickPickItemTooltip\",\n      \"notebookExecution\",\n      \"notebookCellExecution\",\n      \"notebookVariableProvider\",\n      \"notebookReplDocument\"\n    ],\n    \"dbaeumer.vscode-eslint\": [\n      \"notebookCellExecutionState\"\n    ],\n    \"ms-vscode.azure-sphere-tools-ui\": [\n      \"tunnels\"\n    ],\n    \"ms-azuretools.vscode-azureappservice\": [\n      \"terminalDataWriteEvent\"\n    ],\n    \"ms-vscode.anycode\": [\n      \"extensionsAny\"\n    ],\n    \"ms-vscode.cpptools\": [\n      \"terminalDataWriteEvent\"\n    ],\n    \"redhat.java\": [\n      \"documentPaste\"\n    ],\n    \"vscjava.vscode-java-pack\": [],\n    \"ms-dotnettools.csdevkit\": [\n      \"inlineCompletionsAdditions\"\n    ],\n    \"ms-dotnettools.vscodeintellicode-csharp\": [\n      \"inlineCompletionsAdditions\"\n    ],\n    \"microsoft-IsvExpTools.powerplatform-vscode\": [\n      \"fileSearchProvider\",\n      \"textSearchProvider\"\n    ],\n    \"microsoft-IsvExpTools.powerplatform-vscode-preview\": [\n      \"fileSearchProvider\",\n      \"textSearchProvider\"\n    ],\n    \"TeamsDevApp.ms-teams-vscode-extension\": [\n      \"chatParticipantAdditions\",\n      \"languageModelSystem\"\n    ],\n    \"ms-toolsai.datawrangler\": [],\n    \"ms-vscode.vscode-commander\": [],\n    \"ms-vscode.vscode-websearchforcopilot\": [],\n    \"ms-vscode.vscode-copilot-data-analysis\": [\n      \"chatVariableResolver\",\n      \"chatProvider\"\n    ],\n    \"ms-vscode.vscode-copilot-vision\": [\n      \"chatReferenceBinaryData\",\n      \"codeActionAI\"\n    ],\n    \"jeanp413.open-remote-ssh\": [\n      \"resolvers\",\n      \"tunnels\",\n      \"terminalDataWriteEvent\",\n      \"contribRemoteHelp\",\n      \"contribViewsRemote\"\n    ],\n    \"jeanp413.open-remote-wsl\": [\n      \"resolvers\",\n      \"contribRemoteHelp\",\n      \"contribViewsRemote\"\n    ]\n  },\n  \"extensionKind\": {\n    \"Shan.code-settings-sync\": [\n      \"ui\"\n    ],\n    \"shalldie.background\": [\n      \"ui\"\n    ],\n    \"techer.open-in-browser\": [\n      \"ui\"\n    ],\n    \"CoenraadS.bracket-pair-colorizer-2\": [\n      \"ui\"\n    ],\n    \"CoenraadS.bracket-pair-colorizer\": [\n      \"ui\",\n      \"workspace\"\n    ],\n    \"hiro-sun.vscode-emacs\": [\n      \"ui\",\n      \"workspace\"\n    ],\n    \"hnw.vscode-auto-open-markdown-preview\": [\n      \"ui\",\n      \"workspace\"\n    ],\n    \"wayou.vscode-todo-highlight\": [\n      \"ui\",\n      \"workspace\"\n    ],\n    \"aaron-bond.better-comments\": [\n      \"ui\",\n      \"workspace\"\n    ],\n    \"vscodevim.vim\": [\n      \"ui\"\n    ],\n    \"ollyhayes.colmak-vim\": [\n      \"ui\"\n    ]\n  },\n  \"extensionPointExtensionKind\": {\n    \"typescriptServerPlugins\": [\n      \"workspace\"\n    ]\n  },\n  \"extensionSyncedKeys\": {\n    \"ritwickdey.liveserver\": [\n      \"liveServer.setup.version\"\n    ]\n  },\n  \"extensionVirtualWorkspacesSupport\": {\n    \"esbenp.prettier-vscode\": {\n      \"default\": false\n    },\n    \"msjsdiag.debugger-for-chrome\": {\n      \"default\": false\n    },\n    \"redhat.java\": {\n      \"default\": false\n    },\n    \"HookyQR.beautify\": {\n      \"default\": false\n    },\n    \"ritwickdey.LiveServer\": {\n      \"default\": false\n    },\n    \"VisualStudioExptTeam.vscodeintellicode\": {\n      \"default\": false\n    },\n    \"octref.vetur\": {\n      \"default\": false\n    },\n    \"formulahendry.code-runner\": {\n      \"default\": false\n    },\n    \"xdebug.php-debug\": {\n      \"default\": false\n    },\n    \"ms-mssql.mssql\": {\n      \"default\": false\n    },\n    \"christian-kohler.path-intellisense\": {\n      \"default\": false\n    },\n    \"eg2.tslint\": {\n      \"default\": false\n    },\n    \"eg2.vscode-npm-script\": {\n      \"default\": false\n    },\n    \"donjayamanne.githistory\": {\n      \"default\": false\n    },\n    \"Zignd.html-css-class-completion\": {\n      \"default\": false\n    },\n    \"christian-kohler.npm-intellisense\": {\n      \"default\": false\n    },\n    \"EditorConfig.EditorConfig\": {\n      \"default\": false\n    },\n    \"austin.code-gnu-global\": {\n      \"default\": false\n    },\n    \"johnpapa.Angular2\": {\n      \"default\": false\n    },\n    \"ms-vscode.vscode-typescript-tslint-plugin\": {\n      \"default\": false\n    },\n    \"DotJoshJohnson.xml\": {\n      \"default\": false\n    },\n    \"techer.open-in-browser\": {\n      \"default\": false\n    },\n    \"tht13.python\": {\n      \"default\": false\n    },\n    \"bmewburn.vscode-intelephense-client\": {\n      \"default\": false\n    },\n    \"Angular.ng-template\": {\n      \"default\": false\n    },\n    \"xdebug.php-pack\": {\n      \"default\": false\n    },\n    \"dbaeumer.jshint\": {\n      \"default\": false\n    },\n    \"yzhang.markdown-all-in-one\": {\n      \"default\": false\n    },\n    \"Dart-Code.flutter\": {\n      \"default\": false\n    },\n    \"streetsidesoftware.code-spell-checker\": {\n      \"default\": false\n    },\n    \"rebornix.Ruby\": {\n      \"default\": false\n    },\n    \"ms-vscode.sublime-keybindings\": {\n      \"default\": false\n    },\n    \"mitaki28.vscode-clang\": {\n      \"default\": false\n    },\n    \"steoates.autoimport\": {\n      \"default\": false\n    },\n    \"donjayamanne.python-extension-pack\": {\n      \"default\": false\n    },\n    \"shd101wyy.markdown-preview-enhanced\": {\n      \"default\": false\n    },\n    \"mikestead.dotenv\": {\n      \"default\": false\n    },\n    \"pranaygp.vscode-css-peek\": {\n      \"default\": false\n    },\n    \"ikappas.phpcs\": {\n      \"default\": false\n    },\n    \"platformio.platformio-ide\": {\n      \"default\": false\n    },\n    \"jchannon.csharpextensions\": {\n      \"default\": false\n    },\n    \"gruntfuggly.todo-tree\": {\n      \"default\": false\n    }\n  }\n}\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 2.66,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091\n\nset -ex\n\nif [[ -z \"${GH_TOKEN}\" ]] && [[ -z \"${GITHUB_TOKEN}\" ]] && [[ -z \"${GH_ENTERPRISE_TOKEN}\" ]] && [[ -z \"${GITHUB_ENTERPRISE_TOKEN}\" ]]; then\n  echo \"Will not release because no GITHUB_TOKEN defined\"\n  exit\nfi\n\nREPOSITORY_OWNER=\"${ASSETS_REPOSITORY/\\/*/}\"\nREPOSITORY_NAME=\"${ASSETS_REPOSITORY/*\\//}\"\n\nnpm install -g github-release-cli\n\nif [[ $( gh release view --repo \"${ASSETS_REPOSITORY}\" \"${RELEASE_VERSION}\" 2>&1 ) =~ \"release not found\" ]]; then\n  echo \"Creating release '${RELEASE_VERSION}'\"\n\n  if [[ \"${VSCODE_QUALITY}\" == \"insider\" ]]; then\n    NOTES=\"update vscode to [${MS_COMMIT}](https://github.com/microsoft/vscode/tree/${MS_COMMIT})\"\n\n    gh release create \"${RELEASE_VERSION}\" --repo \"${ASSETS_REPOSITORY}\" --title \"${RELEASE_VERSION}\" --notes \"${NOTES}\"\n  else\n    gh release create \"${RELEASE_VERSION}\" --repo \"${ASSETS_REPOSITORY}\" --title \"${RELEASE_VERSION}\" --generate-notes\n\n    . ./utils.sh\n\n    RELEASE_NOTES=$( gh release view \"${RELEASE_VERSION}\" --json \"body\" --jq \".body\" )\n\n    replace \"s|MS_TAG_SHORT|$( echo \"${MS_TAG//./_}\" | cut -d'_' -f 1,2 )|\" release_notes.txt\n    replace \"s|MS_TAG|${MS_TAG}|\" release_notes.txt\n    replace \"s|RELEASE_VERSION|${RELEASE_VERSION}|g\" release_notes.txt\n    replace \"s|RELEASE_NOTES|${RELEASE_NOTES//$'\\n'/\\\\n}|\" release_notes.txt\n\n    gh release edit \"${RELEASE_VERSION}\" --notes-file release_notes.txt\n  fi\nfi\n\ncd assets\n\nset +e\n\nfor FILE in *; do\n  if [[ -f \"${FILE}\" ]] && [[ \"${FILE}\" != *.sha1 ]] && [[ \"${FILE}\" != *.sha256 ]]; then\n    echo \"::group::Uploading '${FILE}' at $( date \"+%T\" )\"\n    gh release upload --repo \"${ASSETS_REPOSITORY}\" \"${RELEASE_VERSION}\" \"${FILE}\" \"${FILE}.sha1\" \"${FILE}.sha256\"\n\n    EXIT_STATUS=$?\n    echo \"exit: ${EXIT_STATUS}\"\n\n    if (( \"${EXIT_STATUS}\" )); then\n      for (( i=0; i<10; i++ )); do\n        github-release delete --owner \"${REPOSITORY_OWNER}\" --repo \"${REPOSITORY_NAME}\" --tag \"${RELEASE_VERSION}\" \"${FILE}\" \"${FILE}.sha1\" \"${FILE}.sha256\"\n\n        sleep $(( 15 * (i + 1)))\n\n        echo \"RE-Uploading '${FILE}' at $( date \"+%T\" )\"\n        gh release upload --repo \"${ASSETS_REPOSITORY}\" \"${RELEASE_VERSION}\" \"${FILE}\" \"${FILE}.sha1\" \"${FILE}.sha256\"\n\n        EXIT_STATUS=$?\n        echo \"exit: ${EXIT_STATUS}\"\n\n        if ! (( \"${EXIT_STATUS}\" )); then\n          break\n        fi\n      done\n      echo \"exit: ${EXIT_STATUS}\"\n\n      if (( \"${EXIT_STATUS}\" )); then\n        echo \"'${FILE}' hasn't been uploaded!\"\n\n        github-release delete --owner \"${REPOSITORY_OWNER}\" --repo \"${REPOSITORY_NAME}\" --tag \"${RELEASE_VERSION}\" \"${FILE}\" \"${FILE}.sha1\" \"${FILE}.sha256\"\n\n        exit 1\n      fi\n    fi\n\n    echo \"::endgroup::\"\n  fi\ndone\n\ncd ..\n"
        },
        {
          "name": "release_notes.txt",
          "type": "blob",
          "size": 12.15,
          "content": "update vscode to [MS_TAG](https://code.visualstudio.com/updates/vMS_TAG_SHORT)\n\nRELEASE_NOTES\n\n## x86 64bits\n\n<table>\n  <tr>\n    <td rowspan=\"7\">Windows</td>\n    <td>User Installer</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodiumUserSetup-x64-RELEASE_VERSION.exe\">VSCodiumUserSetup-x64-RELEASE_VERSION.exe</a></td>\n  </tr>\n  <tr>\n    <td>System Installer</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodiumSetup-x64-RELEASE_VERSION.exe\">VSCodiumSetup-x64-RELEASE_VERSION.exe</a></td>\n  </tr>\n  <tr>\n    <td>.zip</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-win32-x64-RELEASE_VERSION.zip\">VSCodium-win32-x64-RELEASE_VERSION.zip</a></td>\n  </tr>\n  <tr>\n    <td>.msi - updates enabled</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-x64-RELEASE_VERSION.msi\">VSCodium-x64-RELEASE_VERSION.msi</a></td>\n  </tr>\n  <tr>\n    <td>.msi - updates disabled</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-x64-updates-disabled-RELEASE_VERSION.msi\">VSCodium-x64-updates-disabled-RELEASE_VERSION.msi</a></td>\n  </tr>\n  <tr>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-win32-x64-RELEASE_VERSION.tar.gz\">vscodium-reh-win32-x64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-win32-x64-RELEASE_VERSION.tar.gz\">vscodium-reh-web-win32-x64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td rowspan=\"4\">macOS</td>\n    <td>.dmg</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium.x64.RELEASE_VERSION.dmg\">VSCodium.x64.RELEASE_VERSION.dmg</a></td>\n  </tr>\n  <tr>\n    <td>.zip</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-darwin-x64-RELEASE_VERSION.zip\">VSCodium-darwin-x64-RELEASE_VERSION.zip</a></td>\n  </tr>\n  <tr>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-darwin-x64-RELEASE_VERSION.tar.gz\">vscodium-reh-darwin-x64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-darwin-x64-RELEASE_VERSION.tar.gz\">vscodium-reh-web-darwin-x64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n  <td rowspan=\"7\">Linux</td>\n    <td>.deb</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/codium_RELEASE_VERSION_amd64.deb\">codium_RELEASE_VERSION_amd64.deb</a></td>\n  </tr>\n  <tr>\n    <td>.rpm</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/codium-RELEASE_VERSION-el9.x86_64.rpm\">codium-RELEASE_VERSION-el9.x86_64.rpm</a></td>\n  </tr>\n  <tr>\n    <td>.tar.gz</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-linux-x64-RELEASE_VERSION.tar.gz\">VSCodium-linux-x64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>AppImage</td>\n    <td>\n      <a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-RELEASE_VERSION.glibc2.25-x86_64.AppImage\">VSCodium-RELEASE_VERSION.glibc2.25-x86_64.AppImage</a><br />\n      <a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-RELEASE_VERSION.glibc2.25-x86_64.AppImage.zsync\">VSCodium-RELEASE_VERSION.glibc2.25-x86_64.AppImage.zsync</a>\n    </td>\n  </tr>\n  <tr>\n    <td>Snap</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/codium_RELEASE_VERSION_amd64.snap\">codium_RELEASE_VERSION_amd64.snap</a></td>\n  </tr>\n  <tr>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-linux-x64-RELEASE_VERSION.tar.gz\">vscodium-reh-linux-x64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-linux-x64-RELEASE_VERSION.tar.gz\">vscodium-reh-web-linux-x64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td rowspan=\"2\">Alpine</td>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-alpine-x64-RELEASE_VERSION.tar.gz\">vscodium-reh-alpine-x64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-alpine-x64-RELEASE_VERSION.tar.gz\">vscodium-reh-web-alpine-x64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n</table>\n\n## ARM 64bits\n\n<table>\n  <tr>\n    <td rowspan=\"3\">Windows</td>\n    <td>User Installer</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodiumUserSetup-arm64-RELEASE_VERSION.exe\">VSCodiumUserSetup-arm64-RELEASE_VERSION.exe</a></td>\n  </tr>\n  <tr>\n    <td>System Installer</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodiumSetup-arm64-RELEASE_VERSION.exe\">VSCodiumSetup-arm64-RELEASE_VERSION.exe</a></td>\n  </tr>\n  <tr>\n    <td>.zip</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-win32-arm64-RELEASE_VERSION.zip\">VSCodium-win32-arm64-RELEASE_VERSION.zip</a></td>\n  </tr>\n  <tr>\n    <td rowspan=\"4\">macOS</td>\n    <td>.dmg</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium.arm64.RELEASE_VERSION.dmg\">VSCodium.arm64.RELEASE_VERSION.dmg</a></td>\n  </tr>\n  <tr>\n    <td>.zip</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-darwin-arm64-RELEASE_VERSION.zip\">VSCodium-darwin-arm64-RELEASE_VERSION.zip</a></td>\n  </tr>\n  <tr>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-darwin-arm64-RELEASE_VERSION.tar.gz\">vscodium-reh-darwin-arm64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-darwin-arm64-RELEASE_VERSION.tar.gz\">vscodium-reh-web-darwin-arm64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td rowspan=\"6\">Linux</td>\n    <td>.deb</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/codium_RELEASE_VERSION_arm64.deb\">codium_RELEASE_VERSION_arm64.deb</a></td>\n  </tr>\n  <tr>\n    <td>.rpm</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/codium-RELEASE_VERSION-el9.aarch64.rpm\">codium-RELEASE_VERSION-el9.aarch64.rpm</a></td>\n  </tr>\n  <tr>\n    <td>.tar.gz</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-linux-arm64-RELEASE_VERSION.tar.gz\">VSCodium-linux-arm64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Snap</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/codium_RELEASE_VERSION_arm64.snap\">codium_RELEASE_VERSION_arm64.snap</a></td>\n  </tr>\n  <tr>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-linux-arm64-RELEASE_VERSION.tar.gz\">vscodium-reh-linux-arm64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-linux-arm64-RELEASE_VERSION.tar.gz\">vscodium-reh-web-linux-arm64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td rowspan=\"2\">Alpine</td>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-alpine-arm64-RELEASE_VERSION.tar.gz\">vscodium-reh-alpine-arm64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-alpine-arm64-RELEASE_VERSION.tar.gz\">vscodium-reh-web-alpine-arm64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n</table>\n\n## ARM 32bits\n\n<table>\n  <tr>\n    <td rowspan=\"5\">Linux</td>\n    <td>.deb</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/codium_RELEASE_VERSION_armhf.deb\">codium_RELEASE_VERSION_armhf.deb</a></td>\n  </tr>\n  <tr>\n    <td>.rpm</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/codium-RELEASE_VERSION-el9.armv7hl.rpm\">codium-RELEASE_VERSION-el9.armv7hl.rpm</a></td>\n  </tr>\n  <tr>\n    <td>.tar.gz</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-linux-armhf-RELEASE_VERSION.tar.gz\">VSCodium-linux-armhf-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-linux-armhf-RELEASE_VERSION.tar.gz\">vscodium-reh-linux-armhf-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-linux-armhf-RELEASE_VERSION.tar.gz\">vscodium-reh-web-linux-armhf-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n</table>\n\n## PPC 64bits\n\n<table>\n  <tr>\n    <td rowspan=\"3\">Linux</td>\n    <td>.tar.gz</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-linux-ppc64le-RELEASE_VERSION.tar.gz\">VSCodium-linux-ppc64le-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-linux-ppc64le-RELEASE_VERSION.tar.gz\">vscodium-reh-linux-ppc64le-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-linux-ppc64le-RELEASE_VERSION.tar.gz\">vscodium-reh-web-linux-ppc64le-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n</table>\n\n## RISC-V 64bits\n\n<table>\n  <tr>\n    <td rowspan=\"3\">Linux</td>\n    <td>.tar.gz</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-linux-riscv64-RELEASE_VERSION.tar.gz\">VSCodium-linux-riscv64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-linux-riscv64-RELEASE_VERSION.tar.gz\">vscodium-reh-linux-riscv64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-linux-riscv64-RELEASE_VERSION.tar.gz\">vscodium-reh-web-linux-riscv64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n</table>\n\n## Loong 64bits\n\n<table>\n  <tr>\n    <td rowspan=\"3\">Linux</td>\n    <td>.tar.gz</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/VSCodium-linux-loong64-RELEASE_VERSION.tar.gz\">VSCodium-linux-loong64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-linux-loong64-RELEASE_VERSION.tar.gz\">vscodium-reh-linux-loong64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-linux-loong64-RELEASE_VERSION.tar.gz\">vscodium-reh-web-linux-loong64-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n</table>\n\n## s390x\n\n<table>\n  <tr>\n    <td rowspan=\"2\">Linux</td>\n    <td>Remote Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-linux-s390x-RELEASE_VERSION.tar.gz\">vscodium-reh-linux-s390x-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n  <tr>\n    <td>Web Host</td>\n    <td><a href=\"https://github.com/VSCodium/vscodium/releases/download/RELEASE_VERSION/vscodium-reh-web-linux-s390x-RELEASE_VERSION.tar.gz\">vscodium-reh-web-linux-s390x-RELEASE_VERSION.tar.gz</a></td>\n  </tr>\n</table>\n"
        },
        {
          "name": "ripgrep_linux_loong64.sh",
          "type": "blob",
          "size": 0.63,
          "content": "#!/usr/bin/env bash\n\n# When installing @vscode/ripgrep, it will try to download prebuilt ripgrep binary from https://github.com/microsoft/ripgrep-prebuilt,\n# however, loong64 is not a supported architecture and x86 will be picked as fallback, so we need to replace it with a native one.\n\nif [ \"$#\" -ne 1 ]; then\n    echo \"Usage: $0 <path_to_node_modules>\"\n    exit 1\nfi\n\nRG_PATH=\"$1/@vscode/ripgrep/bin/rg\"\nRG_VERSION=\"14.1.1\"\n\necho \"Replacing ripgrep binary with loong64 one\"\n\nrm \"${RG_PATH}\"\ncurl --silent --fail -L https://github.com/darkyzhou/ripgrep-loongarch64-musl/releases/download/${RG_VERSION}/rg -o \"${RG_PATH}\"\nchmod +x \"${RG_PATH}\"\n"
        },
        {
          "name": "ripgrep_linux_riscv64.sh",
          "type": "blob",
          "size": 0.49,
          "content": "#!/usr/bin/env bash\n\n# microsoft/ripgrep-prebuilt doesn't support riscv64.\n# Tracking PR: https://github.com/microsoft/ripgrep-prebuilt/pull/41\n\nif [ \"$#\" -ne 1 ]; then\n    echo \"Usage: $0 <path_to_node_modules>\"\n    exit 1\nfi\n\nRG_PATH=\"$1/@vscode/ripgrep/bin/rg\"\nRG_VERSION=\"14.1.1-3\"\n\necho \"Replacing ripgrep binary with riscv64 one\"\n\nrm \"${RG_PATH}\"\ncurl --silent --fail -L https://github.com/riscv-forks/ripgrep-riscv64-prebuilt/releases/download/${RG_VERSION}/rg -o \"${RG_PATH}\"\nchmod +x \"${RG_PATH}\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stable.json",
          "type": "blob",
          "size": 0.08,
          "content": "{\n  \"tag\": \"1.96.2\",\n  \"commit\": \"fabdb6a30b49f79a7aba0f2ad9df9b399473380f\"\n}\n"
        },
        {
          "name": "stores",
          "type": "tree",
          "content": null
        },
        {
          "name": "undo_telemetry.sh",
          "type": "blob",
          "size": 1.27,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091,SC2016\n\nset -ex\n\n# list of urls to match:\n# - mobile.events.data.microsoft.com\n# - vortex.data.microsoft.com\n\nSEARCH=\"\\.data\\.microsoft\\.com\"\nREPLACEMENT=\"s|//[^/]+\\.data\\.microsoft\\.com|//0\\.0\\.0\\.0|g\"\n\n# include common functions\n. ../utils.sh\n\nif is_gnu_sed; then\n  replace_with_debug () {\n    echo \"found: ${2}\"\n    sed -i -E \"${1}\" \"${2}\"\n  }\nelse\n  replace_with_debug () {\n    echo \"found: ${2}\"\n    sed -i '' -E \"${1}\" \"${2}\"\n  }\nfi\nexport -f replace_with_debug\n\nd1=$( date +%s )\n\nif [[ \"${OS_NAME}\" == \"linux\" ]]; then\n  if [[ ${VSCODE_ARCH} == \"x64\" ]]; then\n    ./node_modules/@vscode/ripgrep/bin/rg --no-ignore -l \"${SEARCH}\" . | xargs -I {} bash -c 'replace_with_debug \"${1}\" \"{}\"' _ \"${REPLACEMENT}\"\n  else\n    grep -rl --exclude-dir=.git -E \"${SEARCH}\" . | xargs -I {} bash -c 'replace_with_debug \"${1}\" \"{}\"' _ \"${REPLACEMENT}\"\n  fi\nelif [[ \"${OS_NAME}\" == \"osx\" ]]; then\n  ./node_modules/@vscode/ripgrep/bin/rg --no-ignore -l \"${SEARCH}\" . | xargs -I {} bash -c 'replace_with_debug \"${1}\" \"{}\"' _ \"${REPLACEMENT}\"\nelse\n  ./node_modules/@vscode/ripgrep/bin/rg --no-ignore --path-separator=// -l \"${SEARCH}\" . | xargs -I {} bash -c 'replace_with_debug \"${1}\" \"{}\"' _ \"${REPLACEMENT}\"\nfi\n\nd2=$( date +%s )\n\necho \"undo_telemetry: $((d2 - d1))s\"\n"
        },
        {
          "name": "update_qualityjson.sh",
          "type": "blob",
          "size": 1.06,
          "content": "#!/usr/bin/env bash\n\nset -e\n\nif [[ \"${SHOULD_BUILD}\" != \"yes\" ]]; then\n  echo \"Will not update version JSON because we did not build\"\n  exit 0\nfi\n\nif [[ -z \"${GH_TOKEN}\" ]] && [[ -z \"${GITHUB_TOKEN}\" ]] && [[ -z \"${GH_ENTERPRISE_TOKEN}\" ]] && [[ -z \"${GITHUB_ENTERPRISE_TOKEN}\" ]]; then\n  echo \"Will not update ${VSCODE_QUALITY}.json because no GITHUB_TOKEN defined\"\n  exit 0\nfi\n\njsonTmp=$( cat \"${VSCODE_QUALITY}.json\" | jq --arg 'tag' \"${MS_TAG/\\-insider/}\" --arg 'commit' \"${MS_COMMIT}\" '. | .tag=$tag | .commit=$commit' )\necho \"${jsonTmp}\" > \"${VSCODE_QUALITY}.json\" && unset jsonTmp\n\ngit config user.email \"$( echo \"${GITHUB_USERNAME}\" | awk '{print tolower($0)}' )-ci@not-real.com\"\ngit config user.name \"${GITHUB_USERNAME} CI\"\ngit add .\n\nCHANGES=$( git status --porcelain )\n\nif [[ -n \"${CHANGES}\" ]]; then\n  git commit -m \"build(${VSCODE_QUALITY}): update to commit ${MS_COMMIT:0:7}\"\n\n  BRANCH_NAME=$( git rev-parse --abbrev-ref HEAD )\n\n  if ! git push origin \"${BRANCH_NAME}\" --quiet; then\n    git pull origin \"${BRANCH_NAME}\"\n    git push origin \"${BRANCH_NAME}\" --quiet\n  fi\nfi\n"
        },
        {
          "name": "update_settings.sh",
          "type": "blob",
          "size": 1.76,
          "content": "# shellcheck disable=SC1091,2148\n\nDEFAULT_TRUE=\"'default': true\"\nDEFAULT_FALSE=\"'default': false\"\nDEFAULT_ON=\"'default': TelemetryConfiguration.ON\"\nDEFAULT_OFF=\"'default': TelemetryConfiguration.OFF\"\nTELEMETRY_CRASH_REPORTER=\"'telemetry.enableCrashReporter':\"\nTELEMETRY_CONFIGURATION=\" TelemetryConfiguration.ON\"\nNLS=workbench.settings.enableNaturalLanguageSearch\n\n# include common functions\n. ../utils.sh\n\nupdate_setting () {\n  local FILENAME SETTING LINE_NUM IN_SETTING FOUND DEFAULT_TRUE_TO_FALSE\n\n  FILENAME=\"${2}\"\n  # check that the file exists\n  if [[ ! -f \"${FILENAME}\" ]]; then\n    echo \"File to update setting in does not exist ${FILENAME}\"\n    return\n  fi\n\n  # go through lines of file, looking for block that contains setting\n  SETTING=\"${1}\"\n  LINE_NUM=0\n  while read -r line; do\n    LINE_NUM=$(( LINE_NUM + 1 ))\n    if [[ \"${line}\" == *\"${SETTING}\"* ]]; then\n      IN_SETTING=1\n    fi\n    if [[ (\"${line}\" == *\"${DEFAULT_TRUE}\"* || \"${line}\" == *\"${DEFAULT_ON}\"*) && \"${IN_SETTING}\" == \"1\" ]]; then\n      FOUND=1\n      break\n    fi\n  done < \"${FILENAME}\"\n\n  if [[ \"${FOUND}\" != \"1\" ]]; then\n    echo \"${DEFAULT_TRUE} not found for setting ${SETTING} in file ${FILENAME}\"\n    return\n  fi\n\n  # construct line-aware replacement string\n  if [[ \"${line}\" == *\"${DEFAULT_TRUE}\"* ]]; then\n    DEFAULT_TRUE_TO_FALSE=\"${LINE_NUM}s/${DEFAULT_TRUE}/${DEFAULT_FALSE}/\"\n  else\n    DEFAULT_TRUE_TO_FALSE=\"${LINE_NUM}s/${DEFAULT_ON}/${DEFAULT_OFF}/\"\n  fi\n\n  replace \"${DEFAULT_TRUE_TO_FALSE}\" \"${FILENAME}\"\n}\n\nupdate_setting \"${TELEMETRY_CRASH_REPORTER}\" src/vs/workbench/electron-sandbox/desktop.contribution.ts\nupdate_setting \"${TELEMETRY_CONFIGURATION}\" src/vs/platform/telemetry/common/telemetryService.ts\nupdate_setting \"${NLS}\" src/vs/workbench/contrib/preferences/common/preferencesContribution.ts\n"
        },
        {
          "name": "update_version.sh",
          "type": "blob",
          "size": 6.47,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091\n\nset -e\n\nif [[ \"${SHOULD_BUILD}\" != \"yes\" && \"${FORCE_UPDATE}\" != \"true\" ]]; then\n  echo \"Will not update version JSON because we did not build\"\n  exit 0\nfi\n\nif [[ -z \"${GH_TOKEN}\" ]] && [[ -z \"${GITHUB_TOKEN}\" ]] && [[ -z \"${GH_ENTERPRISE_TOKEN}\" ]] && [[ -z \"${GITHUB_ENTERPRISE_TOKEN}\" ]]; then\n  echo \"Will not update version JSON because no GITHUB_TOKEN defined\"\n  exit 0\nelse\n  GITHUB_TOKEN=\"${GH_TOKEN:-${GITHUB_TOKEN:-${GH_ENTERPRISE_TOKEN:-${GITHUB_ENTERPRISE_TOKEN}}}}\"\nfi\n\n# Support for GitHub Enterprise\nGH_HOST=\"${GH_HOST:-github.com}\"\n\nif [[ \"${FORCE_UPDATE}\" == \"true\" ]]; then\n  . version.sh\nfi\n\nif [[ -z \"${BUILD_SOURCEVERSION}\" ]]; then\n  echo \"Will not update version JSON because no BUILD_SOURCEVERSION defined\"\n  exit 0\nfi\n\nif [[ \"${VSCODE_ARCH}\" == \"ppc64le\" ]] || [[ \"${VSCODE_ARCH}\" == \"riscv64\" ]] ; then\n  echo \"Skip PPC64LE since only reh is published\"\n  exit 0\nfi\n\n#  {\n#    \"url\": \"https://az764295.vo.msecnd.net/stable/51b0b28134d51361cf996d2f0a1c698247aeabd8/VSCode-darwin-stable.zip\",\n#    \"name\": \"1.33.1\",\n#    \"version\": \"51b0b28134d51361cf996d2f0a1c698247aeabd8\",\n#    \"productVersion\": \"1.33.1\",\n#    \"hash\": \"cb4109f196d23b9d1e8646ce43145c5bb62f55a8\",\n#    \"timestamp\": 1554971059007,\n#    \"sha256hash\": \"ac2a1c8772501732cd5ff539a04bb4dc566b58b8528609d2b34bbf970d08cf01\"\n#  }\n\n# `url` is URL_BASE + filename of asset e.g.\n#    darwin: https://github.com/${ASSETS_REPOSITORY}/releases/download/${RELEASE_VERSION}/${APP_NAME}-darwin-${RELEASE_VERSION}.zip\n# `name` is $RELEASE_VERSION\n# `version` is $BUILD_SOURCEVERSION\n# `productVersion` is $RELEASE_VERSION\n# `hash` in <filename>.sha1\n# `timestamp` is $(node -e 'console.log(Date.now())')\n# `sha256hash` in <filename>.sha256\n\nREPOSITORY_NAME=\"${VERSIONS_REPOSITORY/*\\//}\"\nURL_BASE=\"https://${GH_HOST}/${ASSETS_REPOSITORY}/releases/download/${RELEASE_VERSION}\"\n\ngenerateJson() {\n  local url name version productVersion sha1hash sha256hash timestamp\n  JSON_DATA=\"{}\"\n\n  # generate parts\n  url=\"${URL_BASE}/${ASSET_NAME}\"\n  name=\"${RELEASE_VERSION}\"\n  version=\"${BUILD_SOURCEVERSION}\"\n  productVersion=\"${RELEASE_VERSION}\"\n  timestamp=$( node -e 'console.log(Date.now())' )\n\n  if [[ ! -f \"assets/${ASSET_NAME}\" ]]; then\n    echo \"Downloading asset '${ASSET_NAME}'\"\n    gh release download --repo \"${ASSETS_REPOSITORY}\" \"${RELEASE_VERSION}\" --dir \"assets\" --pattern \"${ASSET_NAME}*\"\n  fi\n\n  sha1hash=$( awk '{ print $1 }' \"assets/${ASSET_NAME}.sha1\" )\n  sha256hash=$( awk '{ print $1 }' \"assets/${ASSET_NAME}.sha256\" )\n\n  # check that nothing is blank (blank indicates something awry with build)\n  for key in url name version productVersion sha1hash timestamp sha256hash; do\n    if [[ -z \"${key}\" ]]; then\n      echo \"Variable '${key}' is empty; exiting...\"\n      exit 1\n    fi\n  done\n\n  # generate json\n  JSON_DATA=$( jq \\\n    --arg url             \"${url}\" \\\n    --arg name            \"${name}\" \\\n    --arg version         \"${version}\" \\\n    --arg productVersion  \"${productVersion}\" \\\n    --arg hash            \"${sha1hash}\" \\\n    --arg timestamp       \"${timestamp}\" \\\n    --arg sha256hash      \"${sha256hash}\" \\\n    '. | .url=$url | .name=$name | .version=$version | .productVersion=$productVersion | .hash=$hash | .timestamp=$timestamp | .sha256hash=$sha256hash' \\\n    <<<'{}' )\n}\n\nupdateLatestVersion() {\n  echo \"Updating ${VERSION_PATH}/latest.json\"\n\n  # do not update the same version\n  if [[ -f \"${REPOSITORY_NAME}/${VERSION_PATH}/latest.json\" ]]; then\n    CURRENT_VERSION=$( jq -r '.name' \"${REPOSITORY_NAME}/${VERSION_PATH}/latest.json\" )\n    echo \"CURRENT_VERSION: ${CURRENT_VERSION}\"\n\n    if [[ \"${CURRENT_VERSION}\" == \"${RELEASE_VERSION}\" && \"${FORCE_UPDATE}\" != \"true\" ]]; then\n      return 0\n    fi\n  fi\n\n  echo \"Generating ${VERSION_PATH}/latest.json\"\n\n  mkdir -p \"${REPOSITORY_NAME}/${VERSION_PATH}\"\n\n  generateJson\n\n  echo \"${JSON_DATA}\" > \"${REPOSITORY_NAME}/${VERSION_PATH}/latest.json\"\n\n  echo \"${JSON_DATA}\"\n}\n\n# init versions repo for later commiting + pushing the json file to it\n# thank you https://www.vinaygopinath.me/blog/tech/commit-to-master-branch-on-github-using-travis-ci/\ngit clone \"https://${GH_HOST}/${VERSIONS_REPOSITORY}.git\"\ncd \"${REPOSITORY_NAME}\" || { echo \"'${REPOSITORY_NAME}' dir not found\"; exit 1; }\ngit config user.email \"$( echo \"${GITHUB_USERNAME}\" | awk '{print tolower($0)}' )-ci@not-real.com\"\ngit config user.name \"${GITHUB_USERNAME} CI\"\ngit remote rm origin\ngit remote add origin \"https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@${GH_HOST}/${VERSIONS_REPOSITORY}.git\" &> /dev/null\ncd ..\n\nif [[ \"${OS_NAME}\" == \"osx\" ]]; then\n  ASSET_NAME=\"${APP_NAME}-darwin-${VSCODE_ARCH}-${RELEASE_VERSION}.zip\"\n  VERSION_PATH=\"${VSCODE_QUALITY}/darwin/${VSCODE_ARCH}\"\n  updateLatestVersion\nelif [[ \"${OS_NAME}\" == \"windows\" ]]; then\n  # system installer\n  ASSET_NAME=\"${APP_NAME}Setup-${VSCODE_ARCH}-${RELEASE_VERSION}.exe\"\n  VERSION_PATH=\"${VSCODE_QUALITY}/win32/${VSCODE_ARCH}/system\"\n  updateLatestVersion\n\n  # user installer\n  ASSET_NAME=\"${APP_NAME}UserSetup-${VSCODE_ARCH}-${RELEASE_VERSION}.exe\"\n  VERSION_PATH=\"${VSCODE_QUALITY}/win32/${VSCODE_ARCH}/user\"\n  updateLatestVersion\n\n  # windows archive\n  ASSET_NAME=\"${APP_NAME}-win32-${VSCODE_ARCH}-${RELEASE_VERSION}.zip\"\n  VERSION_PATH=\"${VSCODE_QUALITY}/win32/${VSCODE_ARCH}/archive\"\n  updateLatestVersion\n\n  if [[ \"${VSCODE_ARCH}\" == \"ia32\" || \"${VSCODE_ARCH}\" == \"x64\" ]]; then\n    # msi\n    ASSET_NAME=\"${APP_NAME}-${VSCODE_ARCH}-${RELEASE_VERSION}.msi\"\n    VERSION_PATH=\"${VSCODE_QUALITY}/win32/${VSCODE_ARCH}/msi\"\n    updateLatestVersion\n\n    # updates-disabled msi\n    ASSET_NAME=\"${APP_NAME}-${VSCODE_ARCH}-updates-disabled-${RELEASE_VERSION}.msi\"\n    VERSION_PATH=\"${VSCODE_QUALITY}/win32/${VSCODE_ARCH}/msi-updates-disabled\"\n    updateLatestVersion\n  fi\nelse # linux\n  # update service links to tar.gz file\n  # see https://update.code.visualstudio.com/api/update/linux-x64/stable/VERSION\n  # as examples\n  ASSET_NAME=\"${APP_NAME}-linux-${VSCODE_ARCH}-${RELEASE_VERSION}.tar.gz\"\n  VERSION_PATH=\"${VSCODE_QUALITY}/linux/${VSCODE_ARCH}\"\n  updateLatestVersion\nfi\n\ncd \"${REPOSITORY_NAME}\" || { echo \"'${REPOSITORY_NAME}' dir not found\"; exit 1; }\n\ngit pull origin master # in case another build just pushed\ngit add .\n\nCHANGES=$( git status --porcelain )\n\nif [[ -n \"${CHANGES}\" ]]; then\n  echo \"Some changes have been found, pushing them\"\n\n  dateAndMonth=$( date \"+%D %T\" )\n\n  git commit -m \"CI update: ${dateAndMonth} (Build ${GITHUB_RUN_NUMBER})\"\n\n  if ! git push origin master --quiet; then\n    git pull origin master\n    git push origin master --quiet\n  fi\nelse\n  echo \"No changes\"\nfi\n\ncd ..\n"
        },
        {
          "name": "utils.sh",
          "type": "blob",
          "size": 0.43,
          "content": "#!/usr/bin/env bash\n\n# All common functions can be added to this file\n\nexists() { type -t \"$1\" &> /dev/null; }\n\nis_gnu_sed () {\n  sed --version &> /dev/null\n}\n\nreplace () {\n  echo \"${1}\"\n  if is_gnu_sed; then\n    sed -i -E \"${1}\" \"${2}\"\n  else\n    sed -i '' -E \"${1}\" \"${2}\"\n  fi\n}\n\nif ! exists gsed; then\n  if is_gnu_sed; then\n    function gsed() {\n      sed -i -E \"$@\"\n    }\n  else\n    function gsed() {\n      sed -i '' -E \"$@\"\n    }\n  fi\nfi\n"
        },
        {
          "name": "version.sh",
          "type": "blob",
          "size": 0.53,
          "content": "#!/usr/bin/env bash\n\nif [[ -z \"${BUILD_SOURCEVERSION}\" ]]; then\n\n    if type -t \"sha1sum\" &> /dev/null; then\n      BUILD_SOURCEVERSION=$( echo \"${RELEASE_VERSION/-*/}\" | sha1sum | cut -d' ' -f1 )\n    else\n      npm install -g checksum\n\n      BUILD_SOURCEVERSION=$( echo \"${RELEASE_VERSION/-*/}\" | checksum )\n    fi\n\n    echo \"BUILD_SOURCEVERSION=\\\"${BUILD_SOURCEVERSION}\\\"\"\n\n    # for GH actions\n    if [[ \"${GITHUB_ENV}\" ]]; then\n        echo \"BUILD_SOURCEVERSION=${BUILD_SOURCEVERSION}\" >> \"${GITHUB_ENV}\"\n    fi\nfi\n\nexport BUILD_SOURCEVERSION"
        }
      ]
    }
  ]
}