{
  "metadata": {
    "timestamp": 1736557342449,
    "page": 295,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "geekan/MetaGPT",
      "stars": 46577,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.14,
          "content": "[run]\nsource = \n    ./metagpt/\nomit = \n    */metagpt/ext/*\n    */metagpt/environment/android_env/*\n    */metagpt/environment/werewolf_env/*\n    "
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.04,
          "content": "workspace\ntmp\nbuild\ndist\ndata\ngeckodriver.log\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.78,
          "content": "# HTML code is incorrectly calculated into statistics, so ignore them\n*.html linguist-detectable=false\n\n# Auto detect text files and perform LF normalization\n* text=auto eol=lf\n\n# Ensure shell scripts use LF (Linux style) line endings on Windows\n*.sh text eol=lf\n\n# Treat specific binary files as binary and prevent line ending conversion\n*.png binary\n*.jpg binary\n*.gif binary\n*.ico binary\n*.jpeg binary\n*.mp3 binary\n*.mp4 binary\n*.zip binary\n*.bin binary\n\n\n# Preserve original line endings for specific document files\n*.doc text eol=crlf\n*.docx text eol=crlf\n*.pdf binary\n\n# Ensure source code and script files use LF line endings\n*.py text eol=lf\n*.js text eol=lf\n*.html text eol=lf\n*.css text eol=lf\n\n# Specify custom diff driver for specific file types\n*.md diff=markdown\n*.json diff=json\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.77,
          "content": "### Python template\n\n# Byte-compiled / optimized / DLL files\n__pycache__\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\nmetagpt/tools/schemas/\nexamples/data/search_kb/*.json\n\n# PyInstaller\n#  Usually these files are written by a python scripts from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\nunittest.txt\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlogs\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# report\nallure-report\nallure-results\n\n# idea / vscode / macos\n.idea\n.DS_Store\n.vscode\n\nkey.yaml\n/data/\ndata.ms\nexamples/nb/\nexamples/default__vector_store.json\nexamples/docstore.json\nexamples/graph_store.json\nexamples/image__vector_store.json\nexamples/index_store.json\n.chroma\n*~$*\nworkspace/*\ntmp\nmetagpt/roles/idea_agent.py\n.aider*\n*.bak\n*.bk\n\n# output folder\noutput\ntmp.png\n.dependencies.json\ntests/metagpt/utils/file_repo_git\ntests/data/rsp_cache_new.json\ntests/data/serdeser_storage/\n*.tmp\n*.png\nhtmlcov\nhtmlcov.*\ncov.xml\n*.dot\n*.pkl\n*.faiss\n*-structure.csv\n*-structure.json\n*.dot\n.python-version\n*.csv\nmetagpt/ext/sela/results/*\n.chainlit/\n\nmetagpt/ext/aflow/data\nmetagpt/ext/aflow/scripts/optimized\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.62,
          "content": "default_stages: [ commit ]\n\n# Install\n# 1. pip install metagpt[dev]\n# 2. pre-commit install\n# 3. pre-commit run --all-files  # make sure all files are clean\nrepos:\n  - repo: https://github.com/pycqa/isort\n    rev: 5.11.5\n    hooks:\n      - id: isort\n        args: ['--profile', 'black']\n        exclude: >-\n            (?x)^(\n            .*__init__\\.py$\n            )\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    # Ruff version.\n    rev: v0.0.284\n    hooks:\n      - id: ruff\n        args: [ --fix ]\n\n  - repo: https://github.com/psf/black\n    rev: 23.3.0\n    hooks:\n      - id: black\n        args: ['--line-length', '120']\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.95,
          "content": "# Use a base image with Python3.9 and Nodejs20 slim version\nFROM nikolaik/python-nodejs:python3.9-nodejs20-slim\n\n# Install Debian software needed by MetaGPT and clean up in one RUN command to reduce image size\nRUN apt update &&\\\n    apt install -y libgomp1 git chromium fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 --no-install-recommends &&\\\n    apt clean && rm -rf /var/lib/apt/lists/*\n\n# Install Mermaid CLI globally\nENV CHROME_BIN=\"/usr/bin/chromium\" \\\n    puppeteer_config=\"/app/metagpt/config/puppeteer-config.json\"\\\n    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=\"true\"\nRUN npm install -g @mermaid-js/mermaid-cli &&\\\n    npm cache clean --force\n\n# Install Python dependencies and install MetaGPT\nCOPY . /app/metagpt\nWORKDIR /app/metagpt\nRUN mkdir workspace &&\\\n    pip install --no-cache-dir -r requirements.txt &&\\\n    pip install -e .\n\n# Running with an infinite loop using the tail command\nCMD [\"sh\", \"-c\", \"tail -f /dev/null\"]\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05,
          "content": "The MIT License\n\nCopyright (c) 2024 Chenglin Wu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.18,
          "content": "recursive-include metagpt/ext/stanford_town/prompts *.txt\nrecursive-include metagpt/ext/stanford_town/static_dirs *.csv\nrecursive-include metagpt/ext/stanford_town/static_dirs *.json"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.08,
          "content": "\n# MetaGPT: The Multi-Agent Framework\n\n<p align=\"center\">\n<a href=\"\"><img src=\"docs/resources/MetaGPT-new-log.png\" alt=\"MetaGPT logo: Enable GPT to work in a software company, collaborating to tackle more complex tasks.\" width=\"150px\"></a>\n</p>\n\n<p align=\"center\">\n<b>Assign different roles to GPTs to form a collaborative entity for complex tasks.</b>\n</p>\n\n<p align=\"center\">\n<a href=\"docs/README_CN.md\"><img src=\"https://img.shields.io/badge/文档-中文版-blue.svg\" alt=\"CN doc\"></a>\n<a href=\"README.md\"><img src=\"https://img.shields.io/badge/document-English-blue.svg\" alt=\"EN doc\"></a>\n<a href=\"docs/README_FR.md\"><img src=\"https://img.shields.io/badge/document-French-blue.svg\" alt=\"FR doc\"></a>\n<a href=\"docs/README_JA.md\"><img src=\"https://img.shields.io/badge/ドキュメント-日本語-blue.svg\" alt=\"JA doc\"></a>\n<a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-blue.svg\" alt=\"License: MIT\"></a>\n<a href=\"docs/ROADMAP.md\"><img src=\"https://img.shields.io/badge/ROADMAP-路线图-blue\" alt=\"roadmap\"></a>\n<a href=\"https://discord.gg/DYn29wFk9z\"><img src=\"https://dcbadge.vercel.app/api/server/DYn29wFk9z?style=flat\" alt=\"Discord Follow\"></a>\n<a href=\"https://twitter.com/MetaGPT_\"><img src=\"https://img.shields.io/twitter/follow/MetaGPT?style=social\" alt=\"Twitter Follow\"></a>\n</p>\n\n<p align=\"center\">\n   <a href=\"https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/geekan/MetaGPT\"><img src=\"https://img.shields.io/static/v1?label=Dev%20Containers&message=Open&color=blue&logo=visualstudiocode\" alt=\"Open in Dev Containers\"></a>\n   <a href=\"https://codespaces.new/geekan/MetaGPT\"><img src=\"https://img.shields.io/badge/Github_Codespace-Open-blue?logo=github\" alt=\"Open in GitHub Codespaces\"></a>\n   <a href=\"https://huggingface.co/spaces/deepwisdom/MetaGPT-SoftwareCompany\" target=\"_blank\"><img alt=\"Hugging Face\" src=\"https://img.shields.io/badge/%F0%9F%A4%97%20-Hugging%20Face-blue?color=blue&logoColor=white\" /></a>\n</p>\n\n## News\n🚀 Oct. 29, 2024: We introduced three papers: [AFLOW](https://arxiv.org/abs/2410.10762), [FACT](https://arxiv.org/abs/2410.21012), and [SELA](https://arxiv.org/abs/2410.17238), check the [code](examples)!\n\n🚀 Mar. 29, 2024: [v0.8.0](https://github.com/geekan/MetaGPT/releases/tag/v0.8.0) released. Now you can use Data Interpreter ([arxiv](https://arxiv.org/abs/2402.18679), [example](https://docs.deepwisdom.ai/main/en/DataInterpreter/), [code](https://github.com/geekan/MetaGPT/tree/main/examples/di)) via pypi package import. Meanwhile, we integrated the RAG module and supported multiple new LLMs.\n\n🚀 Feb. 08, 2024: [v0.7.0](https://github.com/geekan/MetaGPT/releases/tag/v0.7.0) released, supporting assigning different LLMs to different Roles. We also introduced [Data Interpreter](https://github.com/geekan/MetaGPT/blob/main/examples/di/README.md), a powerful agent capable of solving a wide range of real-world problems.\n\n🚀 Jan. 16, 2024: Our paper [MetaGPT: Meta Programming for A Multi-Agent Collaborative Framework\n](https://openreview.net/forum?id=VtmBAGCN7o) accepted for **oral presentation (top 1.2%)** at ICLR 2024, **ranking #1** in the LLM-based Agent category.\n\n🚀 Jan. 03, 2024: [v0.6.0](https://github.com/geekan/MetaGPT/releases/tag/v0.6.0) released, new features include serialization, upgraded OpenAI package and supported multiple LLM, provided [minimal example for debate](https://github.com/geekan/MetaGPT/blob/main/examples/debate_simple.py) etc.\n\n🚀 Dec. 15, 2023: [v0.5.0](https://github.com/geekan/MetaGPT/releases/tag/v0.5.0) released, introducing some experimental features such as incremental development, multilingual, multiple programming languages, etc.\n\n🔥 Nov. 08, 2023: MetaGPT is selected into [Open100: Top 100 Open Source achievements](https://www.benchcouncil.org/evaluation/opencs/annual.html).\n\n🔥 Sep. 01, 2023: MetaGPT tops GitHub Trending Monthly for the **17th time** in August 2023.\n\n🌟 Jun. 30, 2023: MetaGPT is now open source.\n\n🌟 Apr. 24, 2023: First line of MetaGPT code committed.\n\n## Software Company as Multi-Agent System\n\n1. MetaGPT takes a **one line requirement** as input and outputs **user stories / competitive analysis / requirements / data structures / APIs / documents, etc.**\n2. Internally, MetaGPT includes **product managers / architects / project managers / engineers.** It provides the entire process of a **software company along with carefully orchestrated SOPs.**\n   1. `Code = SOP(Team)` is the core philosophy. We materialize SOP and apply it to teams composed of LLMs.\n\n![A software company consists of LLM-based roles](docs/resources/software_company_cd.jpeg)\n\n<p align=\"center\">Software Company Multi-Agent Schematic (Gradually Implementing)</p>\n\n## Get Started\n\n### Installation\n\n> Ensure that Python 3.9 or later, but less than 3.12, is installed on your system. You can check this by using: `python --version`.  \n> You can use conda like this: `conda create -n metagpt python=3.9 && conda activate metagpt`\n\n```bash\npip install --upgrade metagpt\n# or `pip install --upgrade git+https://github.com/geekan/MetaGPT.git`\n# or `git clone https://github.com/geekan/MetaGPT && cd MetaGPT && pip install --upgrade -e .`\n```\n\nFor detailed installation guidance, please refer to [cli_install](https://docs.deepwisdom.ai/main/en/guide/get_started/installation.html#install-stable-version)\n or [docker_install](https://docs.deepwisdom.ai/main/en/guide/get_started/installation.html#install-with-docker)\n\n### Configuration\n\nYou can init the config of MetaGPT by running the following command, or manually create `~/.metagpt/config2.yaml` file:\n```bash\n# Check https://docs.deepwisdom.ai/main/en/guide/get_started/configuration.html for more details\nmetagpt --init-config  # it will create ~/.metagpt/config2.yaml, just modify it to your needs\n```\n\nYou can configure `~/.metagpt/config2.yaml` according to the [example](https://github.com/geekan/MetaGPT/blob/main/config/config2.example.yaml) and [doc](https://docs.deepwisdom.ai/main/en/guide/get_started/configuration.html):\n\n```yaml\nllm:\n  api_type: \"openai\"  # or azure / ollama / groq etc. Check LLMType for more options\n  model: \"gpt-4-turbo\"  # or gpt-3.5-turbo\n  base_url: \"https://api.openai.com/v1\"  # or forward url / other llm url\n  api_key: \"YOUR_API_KEY\"\n```\n\n### Usage\n\nAfter installation, you can use MetaGPT at CLI\n\n```bash\nmetagpt \"Create a 2048 game\"  # this will create a repo in ./workspace\n```\n\nor use it as library\n\n```python\nfrom metagpt.software_company import generate_repo, ProjectRepo\nrepo: ProjectRepo = generate_repo(\"Create a 2048 game\")  # or ProjectRepo(\"<path>\")\nprint(repo)  # it will print the repo structure with files\n```\n\nYou can also use [Data Interpreter](https://github.com/geekan/MetaGPT/tree/main/examples/di) to write code:\n\n```python\nimport asyncio\nfrom metagpt.roles.di.data_interpreter import DataInterpreter\n\nasync def main():\n    di = DataInterpreter()\n    await di.run(\"Run data analysis on sklearn Iris dataset, include a plot\")\n\nasyncio.run(main())  # or await main() in a jupyter notebook setting\n```\n\n\n### QuickStart & Demo Video\n- Try it on [MetaGPT Huggingface Space](https://huggingface.co/spaces/deepwisdom/MetaGPT-SoftwareCompany)\n- [Matthew Berman: How To Install MetaGPT - Build A Startup With One Prompt!!](https://youtu.be/uT75J_KG_aY)\n- [Official Demo Video](https://github.com/geekan/MetaGPT/assets/2707039/5e8c1062-8c35-440f-bb20-2b0320f8d27d)\n\nhttps://github.com/geekan/MetaGPT/assets/34952977/34345016-5d13-489d-b9f9-b82ace413419\n\n## Tutorial\n\n- 🗒 [Online Document](https://docs.deepwisdom.ai/main/en/)\n- 💻 [Usage](https://docs.deepwisdom.ai/main/en/guide/get_started/quickstart.html)  \n- 🔎 [What can MetaGPT do?](https://docs.deepwisdom.ai/main/en/guide/get_started/introduction.html)\n- 🛠 How to build your own agents? \n  - [MetaGPT Usage & Development Guide | Agent 101](https://docs.deepwisdom.ai/main/en/guide/tutorials/agent_101.html)\n  - [MetaGPT Usage & Development Guide | MultiAgent 101](https://docs.deepwisdom.ai/main/en/guide/tutorials/multi_agent_101.html)\n- 🧑‍💻 Contribution\n  - [Develop Roadmap](docs/ROADMAP.md)\n- 🔖 Use Cases\n  - [Data Interpreter](https://docs.deepwisdom.ai/main/en/guide/use_cases/agent/interpreter/intro.html)\n  - [Debate](https://docs.deepwisdom.ai/main/en/guide/use_cases/multi_agent/debate.html)\n  - [Researcher](https://docs.deepwisdom.ai/main/en/guide/use_cases/agent/researcher.html)\n  - [Receipt Assistant](https://docs.deepwisdom.ai/main/en/guide/use_cases/agent/receipt_assistant.html)\n- ❓ [FAQs](https://docs.deepwisdom.ai/main/en/guide/faq.html)\n\n## Support\n\n### Discord Join US\n\n📢 Join Our [Discord Channel](https://discord.gg/ZRHeExS6xv)! Looking forward to seeing you there! 🎉\n\n### Contributor form\n\n📝 [Fill out the form](https://airtable.com/appInfdG0eJ9J4NNL/pagK3Fh1sGclBvVkV/form) to become a contributor. We are looking forward to your participation!\n\n### Contact Information\n\nIf you have any questions or feedback about this project, please feel free to contact us. We highly appreciate your suggestions!\n\n- **Email:** alexanderwu@deepwisdom.ai\n- **GitHub Issues:** For more technical inquiries, you can also create a new issue in our [GitHub repository](https://github.com/geekan/metagpt/issues).\n\nWe will respond to all questions within 2-3 business days.\n\n## Citation\n\nTo stay updated with the latest research and development, follow [@MetaGPT_](https://twitter.com/MetaGPT_) on Twitter. \n\nTo cite [MetaGPT](https://openreview.net/forum?id=VtmBAGCN7o) or [Data Interpreter](https://arxiv.org/abs/2402.18679) in publications, please use the following BibTeX entries.\n\n```bibtex\n@inproceedings{hong2024metagpt,\n      title={Meta{GPT}: Meta Programming for A Multi-Agent Collaborative Framework},\n      author={Sirui Hong and Mingchen Zhuge and Jonathan Chen and Xiawu Zheng and Yuheng Cheng and Jinlin Wang and Ceyao Zhang and Zili Wang and Steven Ka Shing Yau and Zijuan Lin and Liyang Zhou and Chenyu Ran and Lingfeng Xiao and Chenglin Wu and J{\\\"u}rgen Schmidhuber},\n      booktitle={The Twelfth International Conference on Learning Representations},\n      year={2024},\n      url={https://openreview.net/forum?id=VtmBAGCN7o}\n}\n@misc{hong2024data,\n      title={Data Interpreter: An LLM Agent For Data Science}, \n      author={Sirui Hong and Yizhang Lin and Bang Liu and Bangbang Liu and Binhao Wu and Danyang Li and Jiaqi Chen and Jiayi Zhang and Jinlin Wang and Li Zhang and Lingyao Zhang and Min Yang and Mingchen Zhuge and Taicheng Guo and Tuo Zhou and Wei Tao and Wenyi Wang and Xiangru Tang and Xiangtao Lu and Xiawu Zheng and Xinbing Liang and Yaying Fei and Yuheng Cheng and Zongze Xu and Chenglin Wu},\n      year={2024},\n      eprint={2402.18679},\n      archivePrefix={arXiv},\n      primaryClass={cs.AI}\n}\n@misc{zhang2024aflow,\n      title={AFlow: Automating Agentic Workflow Generation}, \n      author={Jiayi Zhang and Jinyu Xiang and Zhaoyang Yu and Fengwei Teng and Xionghui Chen and Jiaqi Chen and Mingchen Zhuge and Xin Cheng and Sirui Hong and Jinlin Wang and Bingnan Zheng and Bang Liu and Yuyu Luo and Chenglin Wu},\n      year={2024},\n      eprint={2410.10762},\n      archivePrefix={arXiv},\n      primaryClass={cs.AI},\n      url={https://arxiv.org/abs/2410.10762}, \n}\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.31,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n|---------|--------------------|\n | 0.7.x   | :x:                |\n | 0.6.x   | :x:                |\n| < 0.6.x | :x:                |\n\n\n## Reporting a Vulnerability\n\nIf you have any vulnerability reports, please contact alexanderwu@deepwisdom.ai ."
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "metagpt",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 2.92,
          "content": "[pytest]\ntestpaths = tests\naddopts = \n    --continue-on-collection-errors\n    --doctest-modules\n    --cov=./metagpt/\n    --cov-report=xml:cov.xml\n    --cov-report=html:htmlcov\n    --durations=20\n    --ignore=tests/metagpt/test_environment.py\n    --ignore=tests/metagpt/test_llm.py\n    --ignore=tests/metagpt/roles/test_assistant.py\n    --ignore=tests/metagpt/roles/test_engineer.py\n    --ignore=tests/metagpt/roles/test_architect.py\n    --ignore=tests/metagpt/roles/test_invoice_ocr_assistant.py\n    --ignore=tests/metagpt/roles/di/test_data_interpreter.py\n    --ignore=tests/metagpt/actions/test_project_management.py\n    --ignore=tests/metagpt/actions/test_write_code.py\n    --ignore=tests/metagpt/actions/test_write_code_review.py\n    --ignore=tests/metagpt/actions/test_write_prd.py\n    --ignore=tests/metagpt/actions/test_invoice_ocr.py\n    --ignore=tests/metagpt/actions/test_action_multi_llm.py\n    --ignore=tests/metagpt/actions/test_design_api.py\n    --ignore=tests/metagpt/actions/di/test_write_analysis_code.py\n    --ignore=tests/metagpt/tools/test_metagpt_oas3_api_svc.py\n    --ignore=tests/metagpt/tools/test_moderation.py\n    --ignore=tests/metagpt/tools/test_search_engine.py\n    --ignore=tests/metagpt/tools/test_tool_convert.py\n    --ignore=tests/metagpt/tools/test_web_browser_engine_playwright.py\n    --ignore=tests/metagpt/tools/test_web_browser_engine.py\n    --ignore=tests/metagpt/tools/test_web_browser_engine_selenium.py\n    --ignore=tests/metagpt/utils/test_mermaid.py\n    --ignore=tests/metagpt/utils/test_redis.py\n    --ignore=tests/metagpt/utils/test_tree.py\n    --ignore=tests/metagpt/utils/test_text.py\n    --ignore=tests/metagpt/provider/test_bedrock_api.py\n    --ignore=tests/metagpt/provider/test_openai.py\n    --ignore=tests/metagpt/provider/test_ark.py\n    --ignore=tests/metagpt/provider/test_general_api_requestor.py\n    --ignore=tests/metagpt/provider/test_qianfan_api.py\n    --ignore=tests/metagpt/provider/zhipuai/test_async_sse_client.py\n    --ignore=tests/metagpt/provider/zhipuai/test_zhipu_model_api.py\n    --ignore=tests/metagpt/planner/test_action_planner.py\n    --ignore=tests/metagpt/planner/test_basic_planner.py\n    --ignore=tests/metagpt/serialize_deserialize/test_write_code_review.py\n    --ignore=tests/metagpt/serialize_deserialize/test_sk_agent.py\n    --ignore=tests/metagpt/rag/factories/test_embedding.py\n    --ignore=tests/metagpt/rag/factories/test_index.py\n    --ignore=tests/metagpt/rag/factories/test_base.py\n    --ignore=tests/metagpt/rag/factories/test_llm.py\n    --ignore=tests/metagpt/rag/factories/test_ranker.py\n    --ignore=tests/metagpt/rag/factories/test_retriever.py\n    --ignore=tests/metagpt/rag/engines/test_simple.py\n    --ignore=tests/metagpt/memory/test_brain_memory.py\n    --ignore=tests/metagpt/memory/test_longterm_memory.py\n    --ignore=tests/metagpt/memory/test_memory_storage.py\nnorecursedirs = \n    tests/metagpt/ext\n    tests/metagpt/environment/android_env\n    tests/metagpt/environment/werewolf_env\n    "
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 2.21,
          "content": "aiohttp==3.8.6\n#azure_storage==0.37.0\nchannels==4.0.0\n# Django==4.1.5\n# docx==0.2.4\n#faiss==1.5.3\nfaiss_cpu==1.7.4\nfire==0.4.0\ntyper==0.9.0\n# godot==0.1.1\n# google_api_python_client==2.93.0  # Used by search_engine.py\nlancedb==0.4.0\nloguru==0.6.0\nmeilisearch==0.21.0\nnumpy~=1.26.4\nopenai~=1.39.0\nopenpyxl~=3.1.5\nbeautifulsoup4==4.12.3\npandas==2.1.1\npydantic>=2.5.3\n#pygame==2.1.3\n# pymilvus==2.4.6\n# pytest==7.2.2 # test extras require\npython_docx==0.8.11\nPyYAML==6.0.1\n# sentence_transformers==2.2.2\nsetuptools==65.6.3\ntenacity==8.2.3\ntiktoken==0.7.0\ntqdm==4.66.2\n#unstructured[local-inference]\n# selenium>4\n# webdriver_manager<3.9\nanthropic==0.18.1\ntyping-inspect==0.8.0\nlibcst==1.0.1\nqdrant-client==1.7.0\ngrpcio~=1.67.0\ngrpcio-tools~=1.62.3\ngrpcio-status~=1.62.3\n# pytest-mock==3.11.1  # test extras require\n# open-interpreter==0.1.7; python_version>\"3.9\" # Conflict with openai 1.x\nta==0.10.2\nsemantic-kernel==0.4.3.dev0\nwrapt==1.15.0\n#aiohttp_jinja2\n# azure-cognitiveservices-speech~=1.31.0 # Used by metagpt/tools/azure_tts.py\n#aioboto3~=12.4.0  # Used by metagpt/utils/s3.py\nredis~=5.0.0 # Used by metagpt/utils/redis.py\ncurl-cffi~=0.7.0\nhttplib2~=0.22.0\nwebsocket-client~=1.8.0\naiofiles==23.2.1\ngitpython==3.1.40\nzhipuai~=2.1.5\nrich==13.6.0\nnbclient==0.9.0\nnbformat==5.9.2\nipython==8.17.2\nipykernel==6.27.1\nscikit_learn==1.3.2\ntyping-extensions==4.9.0\nsocksio~=1.0.0\ngitignore-parser==0.1.9\n# connexion[uvicorn]~=3.0.5 # Used by metagpt/tools/openapi_v3_hello.py\nwebsockets>=10.0,<12.0\nnetworkx~=3.2.1\ngoogle-generativeai==0.4.1\nplaywright>=1.26  # used at metagpt/tools/libs/web_scraping.py\nanytree\nipywidgets==8.1.1\nPillow\nimap_tools==1.5.0  # Used by metagpt/tools/libs/email_login.py\nqianfan~=0.4.4\ndashscope~=1.19.3\nrank-bm25==0.2.2  # for tool recommendation\njieba==0.42.1  # for tool recommendation\nvolcengine-python-sdk[ark]~=1.0.94 # Solution for installation error in Windows: https://github.com/volcengine/volcengine-python-sdk/issues/5\n# llama-index-vector-stores-elasticsearch~=0.2.5 # Used by `metagpt/memory/longterm_memory.py`\n# llama-index-vector-stores-chroma~=0.1.10 # Used by `metagpt/memory/longterm_memory.py`\ngymnasium==0.29.1\nboto3~=1.34.69\nspark_ai_python~=0.3.30\nagentops\ntree_sitter~=0.23.2\ntree_sitter_python~=0.23.2\nhttpx==0.27.2"
        },
        {
          "name": "ruff.toml",
          "type": "blob",
          "size": 0.99,
          "content": "select = [\"E\", \"F\"]\nignore = [\"E501\", \"E712\", \"E722\", \"F821\", \"E731\"]\n\n# Allow autofix for all enabled rules (when `--fix`) is provided.\nfixable = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"I\", \"N\", \"Q\", \"S\", \"T\", \"W\", \"ANN\", \"ARG\", \"BLE\", \"COM\", \"DJ\", \"DTZ\", \"EM\", \"ERA\", \"EXE\", \"FBT\", \"ICN\", \"INP\", \"ISC\", \"NPY\", \"PD\", \"PGH\", \"PIE\", \"PL\", \"PT\", \"PTH\", \"PYI\", \"RET\", \"RSE\", \"RUF\", \"SIM\", \"SLF\", \"TCH\", \"TID\", \"TRY\", \"UP\", \"YTT\"]\nunfixable = []\n\n# Exclude a variety of commonly ignored directories.\nexclude = [\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".git-rewrite\",\n    \".hg\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".pytype\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"venv\",\n]\n\n# Same as Black.\nline-length = 120\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n# Assume Python 3.9\ntarget-version = \"py39\""
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.78,
          "content": "\"\"\"Setup script for MetaGPT.\"\"\"\nimport subprocess\nfrom pathlib import Path\n\nfrom setuptools import Command, find_packages, setup\n\n\nclass InstallMermaidCLI(Command):\n    \"\"\"A custom command to run `npm install -g @mermaid-js/mermaid-cli` via a subprocess.\"\"\"\n\n    description = \"install mermaid-cli\"\n    user_options = []\n\n    def run(self):\n        try:\n            subprocess.check_call([\"npm\", \"install\", \"-g\", \"@mermaid-js/mermaid-cli\"])\n        except subprocess.CalledProcessError as e:\n            print(f\"Error occurred: {e.output}\")\n\n\nhere = Path(__file__).resolve().parent\nlong_description = (here / \"README.md\").read_text(encoding=\"utf-8\")\nrequirements = (here / \"requirements.txt\").read_text(encoding=\"utf-8\").splitlines()\n\n\nextras_require = {\n    \"selenium\": [\"selenium>4\", \"webdriver_manager\", \"beautifulsoup4\"],\n    \"search-google\": [\"google-api-python-client==2.94.0\"],\n    \"search-ddg\": [\"duckduckgo-search~=4.1.1\"],\n    # \"ocr\": [\"paddlepaddle==2.4.2\", \"paddleocr~=2.7.3\", \"tabulate==0.9.0\"],\n    \"rag\": [\n        \"llama-index-core==0.10.15\",\n        \"llama-index-embeddings-azure-openai==0.1.6\",\n        \"llama-index-embeddings-openai==0.1.5\",\n        \"llama-index-embeddings-gemini==0.1.6\",\n        \"llama-index-embeddings-ollama==0.1.2\",\n        \"llama-index-llms-azure-openai==0.1.4\",\n        \"llama-index-readers-file==0.1.4\",\n        \"llama-index-retrievers-bm25==0.1.3\",\n        \"llama-index-vector-stores-faiss==0.1.1\",\n        \"llama-index-vector-stores-elasticsearch==0.1.6\",\n        \"llama-index-vector-stores-chroma==0.1.6\",\n        \"llama-index-postprocessor-cohere-rerank==0.1.4\",\n        \"llama-index-postprocessor-colbert-rerank==0.1.1\",\n        \"llama-index-postprocessor-flag-embedding-reranker==0.1.2\",\n        # \"llama-index-vector-stores-milvus==0.1.23\",\n        \"docx2txt==0.8\",\n    ],\n}\n\nextras_require[\"test\"] = [\n    *set(i for j in extras_require.values() for i in j),\n    \"pytest\",\n    \"pytest-asyncio\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-html\",\n    \"pytest-xdist\",\n    \"pytest-timeout\",\n    \"connexion[uvicorn]~=3.0.5\",\n    \"azure-cognitiveservices-speech~=1.31.0\",\n    \"aioboto3~=12.4.0\",\n    \"gradio==3.0.0\",\n    \"google-api-core==2.17.1\",\n    \"protobuf~=4.25.5\",\n    \"pylint==3.0.3\",\n    \"pybrowsers\",\n]\n\nextras_require[\"pyppeteer\"] = [\n    \"pyppeteer>=1.0.2\"\n]  # pyppeteer is unmaintained and there are conflicts with dependencies\nextras_require[\"dev\"] = ([\"pylint~=3.0.3\", \"black~=23.3.0\", \"isort~=5.12.0\", \"pre-commit~=3.6.0\"],)\nextras_require[\"android_assistant\"] = [\n    \"pyshine==0.0.9\",\n    \"opencv-python==4.6.0.66\",\n    \"protobuf<3.20,>=3.9.2\",\n    \"modelscope\",\n    \"tensorflow==2.9.1; os_name == 'linux'\",\n    \"tensorflow==2.9.1; os_name == 'win32'\",\n    \"tensorflow-macos==2.9; os_name == 'darwin'\",\n    \"keras==2.9.0\",\n    \"torch\",\n    \"torchvision\",\n    \"transformers\",\n    \"opencv-python\",\n    \"matplotlib\",\n    \"pycocotools\",\n    \"SentencePiece\",\n    \"tf_slim\",\n    \"tf_keras\",\n    \"pyclipper\",\n    \"shapely\",\n    \"groundingdino-py\",\n    \"datasets==2.18.0\",\n    \"clip-openai\",\n]\n\nsetup(\n    name=\"metagpt\",\n    version=\"0.8.1\",\n    description=\"The Multi-Agent Framework\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/geekan/MetaGPT\",\n    author=\"Alexander Wu\",\n    author_email=\"alexanderwu@deepwisdom.ai\",\n    license=\"MIT\",\n    keywords=\"metagpt multi-agent multi-role programming gpt llm metaprogramming\",\n    packages=find_packages(exclude=[\"contrib\", \"docs\", \"examples\", \"tests*\"]),\n    python_requires=\">=3.9, <3.12\",\n    install_requires=requirements,\n    extras_require=extras_require,\n    cmdclass={\n        \"install_mermaid\": InstallMermaidCLI,\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"metagpt=metagpt.software_company:app\",\n        ],\n    },\n    include_package_data=True,\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}