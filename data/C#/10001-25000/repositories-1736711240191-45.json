{
  "metadata": {
    "timestamp": 1736711240191,
    "page": 45,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kgrzybek/modular-monolith-with-ddd",
      "stars": 11318,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.76953125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n.vscode/\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n**/wwwroot/lib/\n!/wwwroot/lib/signalr\n!/wwwroot/lib/toastr\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\npub/\n/src/Web/WebMVC/Properties/PublishProfiles/eShopOnContainersWebMVC2016 - Web Deploy-publish.ps1\n/src/Web/WebMVC/Properties/PublishProfiles/publish-module.psm1\n/src/Services/Identity/eShopOnContainers.Identity/Properties/launchSettings.json\n\n#Ignore marker-file used to know which docker files we have.\n.eshopdocker_*\n/src/Web/WebMVC/wwwroot/lib\n/src/Web/WebMVC/wwwroot/css/site.min.css\n**/.kube/**\n.mfractor\n\n#Ignore logs folder\n[Ll]ogs\n\n#Ignore uploaded files folder\nUploadedFiles\n/src/CompanyName.MyMeetings.v3.ncrunchsolution\n\n#Nuke working directory\n.nuke-working-directory\n/src/API/CompanyName.MyMeetings.API/tempkey.jwk\n"
        },
        {
          "name": ".nuke",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2019 Kamil Grzybek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 100.9501953125,
          "content": "# Modular Monolith with DDD\n\nFull Modular Monolith .NET application with Domain-Driven Design approach.\n\n## Announcement\n\n![](docs/Images/glory_to_ukraine.jpg)\n\nLearn, use and benefit from this project only if:\n\n- You **condemn Russia and its military aggression against Ukraine**\n- You **recognize that Russia is an occupant that unlawfully invaded a sovereign state**\n- You **support Ukraine's territorial integrity, including its claims over temporarily occupied territories of Crimea and Donbas**\n- You **reject false narratives perpetuated by Russian state propaganda**\n\nOtherwise, leave this project immediately and educate yourself.\n\nPutin, idi nachuj.\n\n## CI\n\n![](https://github.com/kgrzybek/modular-monolith-with-ddd/workflows/Build%20Pipeline/badge.svg)\n\n## FrontEnd application\n\nFrontEnd application : [Modular Monolith With DDD: FrontEnd React application](https://github.com/kgrzybek/modular-monolith-with-ddd-fe-react)\n\n## Table of contents\n\n[1. Introduction](#1-introduction)\n\n&nbsp;&nbsp;[1.1 Purpose of this Repository](#11-purpose-of-this-repository)\n\n&nbsp;&nbsp;[1.2 Out of Scope](#12-out-of-scope)\n\n&nbsp;&nbsp;[1.3 Reason](#13-reason)\n\n&nbsp;&nbsp;[1.4 Disclaimer](#14-disclaimer)\n\n&nbsp;&nbsp;[1.5 Give a Star](#15-give-a-star)\n\n&nbsp;&nbsp;[1.6 Share It](#16-share-it)\n\n[2. Domain](#2-domain)\n\n&nbsp;&nbsp;[2.1 Description](#21-description)\n\n&nbsp;&nbsp;[2.2 Conceptual Model](#22-conceptual-model)\n\n&nbsp;&nbsp;[2.3 Event Storming](#23-event-storming)\n\n[3. Architecture](#3-architecture)\n\n&nbsp;&nbsp;[3.0 C4 Model](#30-c4-model)\n\n&nbsp;&nbsp;[3.1 High Level View](#31-high-level-view)\n\n&nbsp;&nbsp;[3.2 Module Level View](#32-module-level-view)\n\n&nbsp;&nbsp;[3.3 API and Module Communication](#33-api-and-module-communication)\n\n&nbsp;&nbsp;[3.4 Module Requests Processing via CQRS](#34-module-requests-processing-via-cqrs)\n\n&nbsp;&nbsp;[3.5 Domain Model Principles and Attributes](#35-domain-model-principles-and-attributes)\n\n&nbsp;&nbsp;[3.6 Cross-Cutting Concerns](#36-cross-cutting-concerns)\n\n&nbsp;&nbsp;[3.7 Modules Integration](#37-modules-integration)\n\n&nbsp;&nbsp;[3.8 Internal Processing](#38-internal-processing)\n\n&nbsp;&nbsp;[3.9 Security](#39-security)\n\n&nbsp;&nbsp;[3.10 Unit Tests](#310-unit-tests)\n\n&nbsp;&nbsp;[3.11 Architecture Decision Log](#311-architecture-decision-log)\n\n&nbsp;&nbsp;[3.12 Architecture Unit Tests](#312-architecture-unit-tests)\n\n&nbsp;&nbsp;[3.13 Integration Tests](#313-integration-tests)\n\n&nbsp;&nbsp;[3.14 System Integration Testing](#314-system-integration-testing)\n\n&nbsp;&nbsp;[3.15 Event Sourcing](#315-event-sourcing)\n\n&nbsp;&nbsp;[3.16 Database change management](#316-database-change-management)\n\n&nbsp;&nbsp;[3.17 Continuous Integration](#317-continuous-integration)\n\n&nbsp;&nbsp;[3.18 Static code analysis](#318-static-code-analysis)\n\n&nbsp;&nbsp;[3.19 System Under Test SUT](#319-system-under-test-sut)\n\n&nbsp;&nbsp;[3.20 Mutation Testing](#320-mutation-testing)\n\n[4. Technology](#4-technology)\n\n[5. How to Run](#5-how-to-run)\n\n[6. Contribution](#6-contribution)\n\n[7. Roadmap](#7-roadmap)\n\n[8. Authors](#8-authors)\n\n[9. License](#9-license)\n\n[10. Inspirations and Recommendations](#10-inspirations-and-recommendations)\n\n## 1. Introduction\n\n### 1.1 Purpose of this Repository\n\nThis is a list of the main goals of this repository:\n\n- Showing how you can implement a **monolith** application in a **modular** way\n- Presentation of the **full implementation** of an application\n  - This is not another simple application\n  - This is not another proof of concept (PoC)\n  - The goal is to present the implementation of an application that would be ready to run in production\n- Showing the application of **best practices** and **object-oriented programming principles**\n- Presentation of the use of **design patterns**. When, how and why they can be used\n- Presentation of some **architectural** considerations, decisions, approaches\n- Presentation of the implementation using **Domain-Driven Design** approach (**tactical** patterns)\n- Presentation of the implementation of **Unit Tests** for Domain Model (Testable Design in mind)\n- Presentation of the implementation of **Integration Tests**\n- Presentation of the implementation of **Event Sourcing**\n- Presentation of **C4 Model**\n- Presentation of **diagram as text** approach\n\n### 1.2 Out of Scope\n\nThis is a list of subjects which are out of scope for this repository:\n\n- Business requirements gathering and analysis\n- System analysis\n- Domain exploration\n- Domain distillation\n- Domain-Driven Design **strategic** patterns\n- Architecture evaluation, quality attributes analysis\n- Integration, system tests\n- Project management\n- Infrastructure\n- Containerization\n- Software engineering process\n- Deployment process\n- Maintenance\n- Documentation\n\n### 1.3 Reason\n\nThe reason for creating this repository is the lack of something similar. Most sample applications on GitHub have at least one of the following issues:\n\n- Very, very simple - few entities and use cases implemented\n- Not finished (for example there is no authentication, logging, etc..)\n- Poorly designed (in my opinion)\n- Poorly implemented (in my opinion)\n- Not well described\n- Assumptions and decisions are not clearly explained\n- Implements \"Orders\" domain - yes, everyone knows this domain, but something different is needed\n- Implemented in old technology\n- Not maintained\n\nTo sum up, there are some very good examples, but there are far too few of them. This repository has the task of filling this gap at some level.\n\n### 1.4 Disclaimer\n\nSoftware architecture should always be created to resolve specific **business problems**. Software architecture always supports some quality attributes and at the same time does not support others. A lot of other factors influence your software architecture - your team, opinions, preferences, experiences, technical constraints, time, budget, etc.\n\nAlways functional requirements, quality attributes, technical constraints and other factors should be considered before an architectural decision is made.\n\nBecause of the above, the architecture and implementation presented in this repository is **one of the many ways** to solve some problems. Take from this repository as much as you want, use it as you like but remember to **always pick the best solution which is appropriate to the problem class you have**.\n\n### 1.5 Give a Star\n\nMy primary focus in this project is on quality. Creating a good quality product involves a lot of analysis, research and work. It takes a lot of time. If you like this project, learned something or you are using it in your applications, please give it a star :star:.  This is the best motivation for me to continue this work. Thanks!\n\n### 1.6 Share It\n\nThere are very few really good examples of this type of application. If you think this repository makes a difference and is worth it, please share it with your friends and on social networks. I will be extremely grateful.\n\n## 2. Domain\n\n### 2.1 Description\n\n**Definition:**\n\n> Domain - A sphere of knowledge, influence, or activity. The subject area to which the user applies a program is the domain of the software. [Domain-Driven Design Reference](http://domainlanguage.com/ddd/reference/), Eric Evans\n\nThe **Meeting Groups** domain was selected for the purposes of this project based on the [Meetup.com](https://www.meetup.com/) system.\n\n**Main reasons for selecting this domain:**\n\n- It is common, a lot of people use the Meetup site to organize or attend meetings\n- There is a system for it, so everyone can check this implementation against a working site which supports this domain\n- It is not complex so it is easy to understand\n- It is not trivial - there are some business rules and logic and it is not just CRUD operations\n- You don't need much specific domain knowledge unlike other domains like financing, banking, medical\n- It is not big so it is easier to implement\n\n**Meetings**\n\nThe main business entities are `Member`, `Meeting Group` and `Meeting`. A `Member` can create a `Meeting Group`, be part of a `Meeting Group` or can attend a `Meeting`.\n\nA `Meeting Group Member` can be an `Organizer` of this group or a normal `Member`.\n\nOnly an `Organizer` of a `Meeting Group` can create a new `Meeting`.\n\nA `Meeting` has attendees, not attendees (`Members` which declare they will not attend the `Meeting`) and `Members` on the `Waitlist`.\n\nA `Meeting` can have an attendee limit. If the limit is reached, `Members` can only sign up to the `Waitlist`.\n\nA `Meeting Attendee` can bring guests to the `Meeting`. The number of guests allowed is an attribute of the `Meeting`. Bringing guests can be unallowed.\n\nA `Meeting Attendee` can have one of two roles: `Attendee` or `Host`. A `Meeting` must have at least one `Host`. The `Host` is a special role which grants permission to edit `Meeting` information or change the attendees list.\n\nA `Member` can comment `Meetings`. A `Member` can reply to, like other `Comments`. `Organizer` manages commenting of `Meeting` by `Meeting Commenting Configuration`. `Organizer` can delete any `Comment`.\n\nEach `Meeting Group` must have an organizer with active `Subscription`. One organizer can cover 3 `Meeting Groups` by his `Subscription`.\n\nAdditionally, Meeting organizer can set an `Event Fee`. Each `Meeting Attendee` is obliged to pay the fee. All guests should be paid by `Meeting Attendee` too.\n\n**Administration**\n\nTo create a new `Meeting Group`, a `Member` needs to propose the group. A `Meeting Group Proposal` is sent to `Administrators`. An `Administrator` can accept or reject a `Meeting Group Proposal`. If a `Meeting Group Proposal` is accepted, a `Meeting Group` is created.\n\n**Payments**\n\nEach `Member` who is the `Payer` can buy the `Subscription`. He needs to pay the `Subscription Payment`. `Subscription` can expire so `Subscription Renewal` is required (by `Subscription Renewal Payment` payment to keep `Subscription` active).\n\nWhen the `Meeting` fee is required, the `Payer` needs to pay `Meeting Fee` (through `Meeting Fee Payment`).\n\n**Users**\n\nEach `Administrator`, `Member` and `Payer` is a `User`. To be a `User`, `User Registration` is required and confirmed.\n\nEach `User` is assigned one or more `User Role`.\n\nEach `User Role` has set of `Permissions`. A `Permission` defines whether `User` can invoke a particular action.\n\n### 2.2 Conceptual Model\n\n**Definition:**\n\n> Conceptual Model - A conceptual model is a representation of a system, made of the composition of concepts that are used to help people know, understand, or simulate a subject the model represents. [Wikipedia - Conceptual model](https://en.wikipedia.org/wiki/Conceptual_model)\n\n**Conceptual Model**\n\nPlantUML version:\n![](https://www.plantuml.com/plantuml/proxy?cache=no&src=https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/PlantUML/Conceptual_Model.puml)\n\nVisualParadigm version (not maintained, only for demonstration):\n![](docs/Images/Conceptual_Model.png)\n\n**Conceptual Model of commenting feature**\n![](https://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/PlantUML/Commenting_Conceptual_Model.puml)\n\n### 2.3 Event Storming\n\nWhile a Conceptual Model focuses on structures and relationships between them, **behavior** and **events** that occur in our domain are more important.\n\nThere are many ways to show behavior and events. One of them is a light technique called [Event Storming](https://www.eventstorming.com/) which is becoming more popular. Below are presented 3 main business processes using this technique: user registration, meeting group creation and meeting organization.\n\nNote: Event Storming is a light, live workshop. One of the possible outputs of this workshop is presented here. Even if you are not doing Event Storming workshops, this type of process presentation can be very valuable to you and your stakeholders.\n\n**User Registration process**\n\n------\n\n![](docs/Images/User_Registration.jpg)\n\n------\n\n**Meeting Group creation**\n![](docs/Images/Meeting_Group_Creation.jpg)\n\n------\n\n**Meeting organization**\n![](docs/Images/Meeting_Organization.jpg)\n\n------\n\n**Payments**\n![](docs/Images/Payments_EventStorming_Design.jpg)\n[Download high resolution file](docs/Images/Payments_EventStorming_Design_HighRes.jpg)\n\n------\n\n## 3. Architecture\n\n### 3.0 C4 Model\n\n[C4 model](https://c4model.com/) is a lean graphical notation technique for modelling the architecture of software systems. <br>\n\nAs can be found on the website of the author of this model ([Simon Brown](https://simonbrown.je/)): *The C4 model was created as a way to help software development teams describe and communicate software architecture, both during up-front design sessions and when retrospectively documenting an existing codebase* <br>\n\n*Model C4* defines 4 levels (views) of the system architecture: *System Context*, *Container*, *Component* and *Code*. Below are examples of each of these levels that describe the architecture of this system. <br>\n\n*Note: The [PlantUML](https://plantuml.com/) (diagram as text) component was used to describe all C4 model levels. Additionally, for levels C1-C3, a [C4-PlantUML](https://github.com/plantuml-stdlib/C4-PlantUML) plug-in connecting PlantUML with the C4 model was used*.\n\n#### 3.0.1 C1 System Context\n\n![](http://www.plantuml.com/plantuml/png/7OrDgeD048JtxnGl1z0ca5LMGWuYutIZulIqz0_6d3vZDbLG5Dytc2VruF9tMsikWHHQ_XVttPu0cev-Nds9AOmqItMgtcTXs6Rzd1Djm89HadOiLKgxTiSLY0YSp4a19Hky7f3levrjuV77UNk_Nzg1AhR-0W00)\n\n#### 3.0.2 C2 Container\n\n![](docs/C4/C2_Containers.png)\n\n#### 3.0.3 C3 Component (high-level)\n\n![](docs/C4/C3_Components.png)\n\n#### 3.0.4 C3 Component (module-level)\n\n![](http://www.plantuml.com/plantuml/png/jLHFRzCm5B_dKsI1GojjBOKn5QH9wxeTAgrem7QUdEGrjHJRaVqCgX3V7QVUl7XkbnA2BusUVt_y_7xrXK8YKRCoEi8rC8Yhab0U7L6UbJg7U8rOgS_ZiIG_HmN5jKwr0fa9Zi1nb0asDWHU2vmep4kQZkUd9xTrwNvvCsP48KXJUfWBLWbUSwhQB9hbkIlTaMAGC02al539SVmsBUQY5F8yUNEQmRkpZyamn9ESKKuLIe9KS9y57zBfsNGN2twOBtMfNzYy_pIPJ4bTMmcEJzNLTXcPwFj68R27Iw5vJkHca4sEusIvYPUFXuuj81d6lwBOB0TacoV8hA8lEBFRXIFKovrqGBROUj_yZBvStvaz2PRWuFR3CtjKNefSbs2epifMd5lWwAWBlf94eTGPQjcK6Faxxc0tD9N6kxuw98KwVvxZiCLgLbKbpRRJQ_eqoZsON0b6gATlApr8BpX2OTDtlKrLqoNOx6vubJvtGv0qnveJ9BMmojR0oAkIlwCmB_vVoALcvfNRi-FB10dovGxEaQ-Q30yoRsOgS6vizcnhCnKwsdhFPc7k0jy0qlq8BeC-i4vYu1laiSN4fTBp-gf1my0zr4REzX3RLpjPy9W14yqc7DXA6raZ77s3qhwaUn-tUmM64W8RIV5HkvLw8Be4XHnVj3CXZCtV7P0WEOpXXk7WZL7uIMWTY0_VUxklg_u7aLstlzUcLt8unkvD42JjxFR1-gn_2L-tlY-0vvgLVm00)\n\n#### 3.0.5 C4 Code (meeting group aggregate)\n\n![](http://www.plantuml.com/plantuml/png/5OqxheD0303xTugN0x1kg58XvI3HObk0yAwHFqB9wGFDJ3FIJ1xL8flyFRQEaiHfyhz67Fu4i7gMPOirvtGsr1xSew0ss1VxVcRUeIcbL1kQTfKh7SuRH0IjUh01AJgyHi3nZLBTot7V9kvq-GS0)\n\n### 3.1 High Level View\n\n![](docs/Images/Architecture_high_level.png)\n\n**Module descriptions:**\n\n- **API** - Very thin ASP.NET MVC Core REST API application. Main responsibilities are:\n  1. Accept request\n  2. Authenticate and authorize request (using User Access module)\n  3. Delegate work to specific module sending Command or Query\n  4. Return response\n- **User Access** - responsible for user authentication and authorization\n- **Registrations** - responsible for user registration\n- **Meetings** - implements Meetings Bounded Context: creating meeting groups, meetings\n- **Administration** - implements Administration Bounded Context: implements administrative tasks like meeting group proposal verification\n- **Payments** - implements Payments Bounded Context: implements all functionalities associated with payments\n- **In Memory Events Bus** - Publish/Subscribe implementation to asynchronously integrate all modules using events ([Event Driven Architecture](https://en.wikipedia.org/wiki/Event-driven_architecture)).\n\n**Key assumptions:**\n\n1. API contains no application logic\n2. API communicates with Modules using a small interface to send Queries and Commands\n3. Each Module has its own interface which is used by API\n4. **Modules communicate each other only asynchronously using Events Bus** - direct method calls are not allowed\n5. Each Module **has it's own data** in a separate schema - shared data is not allowed\n   - Module data could be moved into separate databases if desired\n6. Modules can only have a dependency on the integration events assembly of other Module (see [Module level view](#32-module-level-view))\n7. Each Module has its own [Composition Root](https://freecontent.manning.com/dependency-injection-in-net-2nd-edition-understanding-the-composition-root/), which implies that each Module has its own Inversion-of-Control container\n8. API as a host needs to initialize each module and each module has an initialization method\n9. Each Module is **highly encapsulated** - only required types and members are public, the rest are internal or private\n\n### 3.2 Module Level View\n\n![](docs/Images/Module_level_diagram.png)\n\nEach Module has [Clean Architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html) and consists of the following submodules (assemblies):\n\n- **Application** - the application logic submodule which is responsible for requests processing: use cases, domain events, integration events, internal commands.\n- **Domain** - Domain Model in Domain-Driven Design terms implements the applicable [Bounded Context](https://martinfowler.com/bliki/BoundedContext.html)\n- **Infrastructure** - infrastructural code responsible for module initialization, background processing, data access, communication with Events Bus and other external components or systems\n- **IntegrationEvents** - **Contracts** published to the Events Bus; only this assembly can be called by other modules\n\n![](docs/Images/VSSolution.png)\n\n**Note:** Application, Domain and Infrastructure assemblies could be merged into one assembly. Some people like horizontal layering or more decomposition, some don't. Implementing the Domain Model or Infrastructure in separate assembly allows encapsulation using the [`internal`](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/internal) keyword. Sometimes Bounded Context logic is not worth it because it is too simple. As always, be pragmatic and take whatever approach you like.\n\n### 3.3 API and Module Communication\n\nThe API only communicates with Modules in two ways: during module initialization and request processing.\n\n**Module initialization**\n\nEach module has a static ``Initialize`` method which is invoked in the API ``Startup`` class. All configuration needed by this module should be provided as arguments to this method. All services are configured during initialization and the Composition Root is created using the Inversion-of-Control Container.\n\n```csharp\npublic static void Initialize(\n    string connectionString,\n    IExecutionContextAccessor executionContextAccessor,\n    ILogger logger,\n    EmailsConfiguration emailsConfiguration)\n{\n    var moduleLogger = logger.ForContext(\"Module\", \"Meetings\");\n\n    ConfigureCompositionRoot(connectionString, executionContextAccessor, moduleLogger, emailsConfiguration);\n\n    QuartzStartup.Initialize(moduleLogger);\n\n    EventsBusStartup.Initialize(moduleLogger);\n}\n```\n\n**Request processing**\n\nEach module has the same interface signature exposed to the API. It contains 3 methods: command with result, command without result and query.\n\n```csharp\npublic interface IMeetingsModule\n{\n    Task<TResult> ExecuteCommandAsync<TResult>(ICommand<TResult> command);\n\n    Task ExecuteCommandAsync(ICommand command);\n\n    Task<TResult> ExecuteQueryAsync<TResult>(IQuery<TResult> query);\n}\n```\n\n**Note:** Some people say that processing a command should not return a result. This is an understandable approach but sometimes impractical, especially when you want to immediately return the ID of a newly created resource. Sometimes the boundary between Command and Query is blurry. One example is ``AuthenticateCommand`` - it returns a token but it is not a query because it has a side effect.\n\n### 3.4 Module Requests Processing via CQRS\n\nProcessing of Commands and Queries is separated by applying the architectural style/pattern [Command Query Responsibility Segregation (CQRS)](https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs).\n\n![](docs/Images/CQRS.jpg)\n\nCommands are processed using *Write Model* which is implemented using DDD tactical patterns:\n\n```csharp\ninternal class CreateNewMeetingGroupCommandHandler : ICommandHandler<CreateNewMeetingGroupCommand>\n{\n    private readonly IMeetingGroupRepository _meetingGroupRepository;\n    private readonly IMeetingGroupProposalRepository _meetingGroupProposalRepository;\n\n    internal CreateNewMeetingGroupCommandHandler(\n        IMeetingGroupRepository meetingGroupRepository,\n        IMeetingGroupProposalRepository meetingGroupProposalRepository)\n    {\n        _meetingGroupRepository = meetingGroupRepository;\n        _meetingGroupProposalRepository = meetingGroupProposalRepository;\n    }\n\n    public async Task Handle(CreateNewMeetingGroupCommand request, CancellationToken cancellationToken)\n    {\n        var meetingGroupProposal = await _meetingGroupProposalRepository.GetByIdAsync(request.MeetingGroupProposalId);\n\n        var meetingGroup = meetingGroupProposal.CreateMeetingGroup();\n\n        await _meetingGroupRepository.AddAsync(meetingGroup);\n\n        \n    }\n}\n```\n\nQueries are processed using *Read Model* which is implemented by executing raw SQL statements on database views:\n\n```csharp\ninternal class GetAllMeetingGroupsQueryHandler : IQueryHandler<GetAllMeetingGroupsQuery, List<MeetingGroupDto>>\n{\n    private readonly ISqlConnectionFactory _sqlConnectionFactory;\n\n    internal GetAllMeetingGroupsQueryHandler(ISqlConnectionFactory sqlConnectionFactory)\n    {\n        _sqlConnectionFactory = sqlConnectionFactory;\n    }\n\n    public async Task<List<MeetingGroupDto>> Handle(GetAllMeetingGroupsQuery request, CancellationToken cancellationToken)\n    {\n        var connection = _sqlConnectionFactory.GetOpenConnection();\n\n        const string sql = $\"\"\"\n                           SELECT \n                                [MeetingGroup].[Id] as [{nameof(MeetingGroupDto.Id)}] , \n                                [MeetingGroup].[Name] as [{nameof(MeetingGroupDto.Name)}], \n                                [MeetingGroup].[Description] as [{nameof(MeetingGroupDto.Description)}] \n                                [MeetingGroup].[LocationCountryCode] as [{nameof(MeetingGroupDto.LocationCountryCode)}],\n                                [MeetingGroup].[LocationCity] as [{nameof(MeetingGroupDto.LocationCity)}]\n                           FROM [meetings].[v_MeetingGroups] AS [MeetingGroup]\n                           \"\"\";\n        var meetingGroups = await connection.QueryAsync<MeetingGroupDto>(sql);\n\n        return meetingGroups.AsList();\n    }\n}\n```\n\n**Key advantages:**\n\n- Solution is appropriate to the problem - reading and writing needs are usually different\n- Supports [Single Responsibility Principle](https://en.wikipedia.org/wiki/Single_responsibility_principle) (SRP) - one handler does one thing\n- Supports [Interface Segregation Principle](https://en.wikipedia.org/wiki/Interface_segregation_principle) (ISP) - each handler implements interface with exactly one method\n- Supports [Parameter Object pattern](https://refactoring.com/catalog/introduceParameterObject.html) - Commands and Queries are objects which are easy to serialize/deserialize\n- Easy way to apply [Decorator pattern](https://en.wikipedia.org/wiki/Decorator_pattern) to handle cross-cutting concerns\n- Supports Loose Coupling by use of the [Mediator pattern](https://en.wikipedia.org/wiki/Mediator_pattern) - separates invoker of request from handler of request\n\n**Disadvantage:**\n\n- Mediator pattern introduces extra indirection and is harder to reason about which class handles the request\n\nFor more information: [Simple CQRS implementation with raw SQL and DDD](https://www.kamilgrzybek.com/design/simple-cqrs-implementation-with-raw-sql-and-ddd/)\n\n### 3.5 Domain Model Principles and Attributes\n\nThe Domain Model, which is the central and most critical part in the system, should be designed with special attention. Here are some key principles and attributes which are applied to Domain Models of each module:\n\n1. **High level of encapsulation**\n\n    All members are ``private`` by default, then ``internal`` - only ``public`` at the very edge.\n\n2. **High level of PI (Persistence Ignorance)**\n\n    No dependencies to infrastructure, databases, etc. All classes are [POCOs](https://en.wikipedia.org/wiki/Plain_old_CLR_object).\n\n3. **Rich in behavior**\n\n    All business logic is located in the Domain Model. No leaks to the application layer or elsewhere.\n\n4. **Low level of Primitive Obsession**\n\n    Primitive attributes of Entites grouped together using ValueObjects.\n\n5. **Business language**\n\n    All classes, methods and other members are named in business language used in this Bounded Context.\n\n6. **Testable**\n\n    The Domain Model is a critical part of the system so it should be easy to test (Testable Design).\n\n```csharp\npublic class MeetingGroup : Entity, IAggregateRoot\n{\n    public MeetingGroupId Id { get; private set; }\n\n    private string _name;\n\n    private string _description;\n\n    private MeetingGroupLocation _location;\n\n    private MemberId _creatorId;\n\n    private List<MeetingGroupMember> _members;\n\n    private DateTime _createDate;\n\n    private DateTime? _paymentDateTo;\n\n    internal static MeetingGroup CreateBasedOnProposal(\n        MeetingGroupProposalId meetingGroupProposalId,\n        string name,\n        string description,\n        MeetingGroupLocation location, MemberId creatorId)\n    {\n        return new MeetingGroup(meetingGroupProposalId, name, description, location, creatorId);\n    }\n\n     public Meeting CreateMeeting(\n            string title,\n            MeetingTerm term,\n            string description,\n            MeetingLocation location,\n            int? attendeesLimit,\n            int guestsLimit,\n            Term rsvpTerm,\n            MoneyValue eventFee,\n            List<MemberId> hostsMembersIds,\n            MemberId creatorId)\n        {\n            this.CheckRule(new MeetingCanBeOrganizedOnlyByPayedGroupRule(_paymentDateTo));\n\n            this.CheckRule(new MeetingHostMustBeAMeetingGroupMemberRule(creatorId, hostsMembersIds, _members));\n\n            return new Meeting(this.Id,\n                title,\n                term,\n                description,\n                location,\n                attendeesLimit,\n                guestsLimit,\n                rsvpTerm,\n                eventFee,\n                hostsMembersIds,\n                creatorId);\n        }\n```\n\n### 3.6 Cross-Cutting Concerns\n\nTo support [Single Responsibility Principle](https://en.wikipedia.org/wiki/Single_responsibility_principle) and [Don't Repeat Yourself](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) principles, the implementation of cross-cutting concerns is done using the [Decorator Pattern](https://en.wikipedia.org/wiki/Decorator_pattern). Each Command processor is decorated by 3 decorators: logging, validation and unit of work.\n\n![](docs/Images/Decorator.jpg)\n\n**Logging**\n\nThe Logging decorator logs execution, arguments and processing of each Command. This way each log inside a processor has the log context of the processing command.\n\n```csharp\ninternal class LoggingCommandHandlerDecorator<T> : ICommandHandler<T> where T:ICommand\n{\n    private readonly ILogger _logger;\n    private readonly IExecutionContextAccessor _executionContextAccessor;\n    private readonly ICommandHandler<T> _decorated;\n\n    public LoggingCommandHandlerDecorator(\n        ILogger logger,\n        IExecutionContextAccessor executionContextAccessor,\n        ICommandHandler<T> decorated)\n    {\n        _logger = logger;\n        _executionContextAccessor = executionContextAccessor;\n        _decorated = decorated;\n    }\n    public async Task Handle(T command, CancellationToken cancellationToken)\n    {\n        if (command is IRecurringCommand)\n        {\n            return await _decorated.Handle(command, cancellationToken);\n        }\n        using (\n            LogContext.Push(\n                new RequestLogEnricher(_executionContextAccessor),\n                new CommandLogEnricher(command)))\n        {\n            try\n            {\n                this._logger.Information(\n                    \"Executing command {Command}\",\n                    command.GetType().Name);\n\n                var result = await _decorated.Handle(command, cancellationToken);\n\n                this._logger.Information(\"Command {Command} processed successful\", command.GetType().Name);\n\n                return result;\n            }\n            catch (Exception exception)\n            {\n                this._logger.Error(exception, \"Command {Command} processing failed\", command.GetType().Name);\n                throw;\n            }\n        }\n    }\n\n    private class CommandLogEnricher : ILogEventEnricher\n    {\n        private readonly ICommand _command;\n\n        public CommandLogEnricher(ICommand command)\n        {\n            _command = command;\n        }\n        public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)\n        {\n            logEvent.AddOrUpdateProperty(new LogEventProperty(\"Context\", new ScalarValue($\"Command:{_command.Id.ToString()}\")));\n        }\n    }\n\n    private class RequestLogEnricher : ILogEventEnricher\n    {\n        private readonly IExecutionContextAccessor _executionContextAccessor;\n        public RequestLogEnricher(IExecutionContextAccessor executionContextAccessor)\n        {\n            _executionContextAccessor = executionContextAccessor;\n        }\n        public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)\n        {\n            if (_executionContextAccessor.IsAvailable)\n            {\n                logEvent.AddOrUpdateProperty(new LogEventProperty(\"CorrelationId\", new ScalarValue(_executionContextAccessor.CorrelationId)));\n            }\n        }\n    }\n}\n```\n\n**Validation**\n\nThe Validation decorator performs Command data validation. It checks rules against Command arguments using the FluentValidation library.\n\n```csharp\ninternal class ValidationCommandHandlerDecorator<T> : ICommandHandler<T> where T:ICommand\n{\n    private readonly IList<IValidator<T>> _validators;\n    private readonly ICommandHandler<T> _decorated;\n\n    public ValidationCommandHandlerDecorator(\n        IList<IValidator<T>> validators,\n        ICommandHandler<T> decorated)\n    {\n        this._validators = validators;\n        _decorated = decorated;\n    }\n\n    public Task<Unit> Handle(T command, CancellationToken cancellationToken)\n    {\n        var errors = _validators\n            .Select(v => v.Validate(command))\n            .SelectMany(result => result.Errors)\n            .Where(error => error != null)\n            .ToList();\n\n        if (errors.Any())\n        {\n            var errorBuilder = new StringBuilder();\n\n            errorBuilder.AppendLine(\"Invalid command, reason: \");\n\n            foreach (var error in errors)\n            {\n                errorBuilder.AppendLine(error.ErrorMessage);\n            }\n\n            throw new InvalidCommandException(errorBuilder.ToString(), null);\n        }\n\n        return _decorated.Handle(command, cancellationToken);\n    }\n}\n```\n\n**Unit Of Work**\n\nAll Command processing has side effects. To avoid calling commit on every handler, `UnitOfWorkCommandHandlerDecorator` is used. It additionally marks `InternalCommand` as processed (if it is Internal Command) and dispatches all Domain Events (as part of [Unit Of Work](https://martinfowler.com/eaaCatalog/unitOfWork.html)).\n\n```csharp\npublic class UnitOfWorkCommandHandlerDecorator<T> : ICommandHandler<T> where T:ICommand\n{\n    private readonly ICommandHandler<T> _decorated;\n    private readonly IUnitOfWork _unitOfWork;\n    private readonly MeetingsContext _meetingContext;\n\n    public UnitOfWorkCommandHandlerDecorator(\n        ICommandHandler<T> decorated,\n        IUnitOfWork unitOfWork,\n        MeetingsContext meetingContext)\n    {\n        _decorated = decorated;\n        _unitOfWork = unitOfWork;\n        _meetingContext = meetingContext;\n    }\n\n    public async Task Handle(T command, CancellationToken cancellationToken)\n    {\n        await this._decorated.Handle(command, cancellationToken);\n\n        if (command is InternalCommandBase)\n        {\n            var internalCommand =\n                await _meetingContext.InternalCommands.FirstOrDefaultAsync(x => x.Id == command.Id,\n                    cancellationToken: cancellationToken);\n\n            if (internalCommand != null)\n            {\n                internalCommand.ProcessedDate = DateTime.UtcNow;\n            }\n        }\n\n        await this._unitOfWork.CommitAsync(cancellationToken);\n\n        \n    }\n}\n```\n\n### 3.7 Modules Integration\n\nIntegration between modules is strictly **asynchronous** using Integration Events and the In Memory Event Bus as broker. In this way coupling between modules is minimal and exists only on the structure of Integration Events.\n\n**Modules don't share data** so it is not possible nor desirable to create a transaction which spans more than one module. To ensure maximum reliability, the [Outbox / Inbox pattern](http://www.kamilgrzybek.com/design/the-outbox-pattern/) is used. This pattern provides accordingly *\"At-Least-Once delivery\"* and *\"At-Least-Once processing\"*.\n\n![](docs/Images/OutboxInbox.jpg)\n\nThe Outbox and Inbox is implemented using two SQL tables and a background worker for each module. The background worker is implemented using the Quartz.NET library.\n\n**Saving to Outbox:**\n\n![](docs/Images/OutboxSave.png)\n\n**Processing Outbox:**\n\n![](docs/Images/OutboxProcessing.png)\n\n### 3.8 Internal Processing\n\nThe main principle of this system is that you can change its state only by calling a specific Command.\n\nCommands can be called not only by the API, but by the processing module itself. The main use case which implements this mechanism is data processing in eventual consistency mode when we want to process something in a different process and transaction. This applies, for example, to Inbox processing because we want to do something (calling a Command) based on an Integration Event from the Inbox.\n\nThis idea is taken from Alberto's Brandolini's Event Storming picture called \"The picture that explains “almost” everything\" which shows that every side effect (domain event) is created by invoking a Command on Aggregate. See [EventStorming cheat sheet](https://xebia.com/blog/eventstorming-cheat-sheet/) article for more details.\n\nImplementation of internal processing is very similar to implementation of the Outbox and Inbox. One SQL table and one background worker for processing. Each internally processing Command must inherit from `InternalCommandBase` class:\n\n```csharp\ninternal abstract class InternalCommandBase : ICommand\n{\n    public Guid Id { get; }\n\n    protected InternalCommandBase(Guid id)\n    {\n        this.Id = id;\n    }\n}\n```\n\nThis is important because the `UnitOfWorkCommandHandlerDecorator` must mark an internal Command as processed during committing:\n\n```csharp\npublic async Task Handle(T command, CancellationToken cancellationToken)\n{\n    await this._decorated.Handle(command, cancellationToken);\n\n    if (command is InternalCommandBase)\n    {\n        var internalCommand =\n            await _meetingContext.InternalCommands.FirstOrDefaultAsync(x => x.Id == command.Id,\n                cancellationToken: cancellationToken);\n\n        if (internalCommand != null)\n        {\n            internalCommand.ProcessedDate = DateTime.UtcNow;\n        }\n    }\n\n    await this._unitOfWork.CommitAsync(cancellationToken);\n\n    \n}\n```\n\n### 3.9 Security\n\n**Authentication**\n\nAuthentication is implemented using JWT Token and Bearer scheme using IdentityServer. For now, only one authentication method is implemented: forms style authentication (username and password) via the OAuth2 [Resource Owner Password Grant Type](https://www.oauth.com/oauth2-servers/access-tokens/password-grant/). It requires implementation of the `IResourceOwnerPasswordValidator` interface:\n\n```csharp\npublic class ResourceOwnerPasswordValidator : IResourceOwnerPasswordValidator\n{\n    private readonly IUserAccessModule _userAccessModule;\n\n    public ResourceOwnerPasswordValidator(IUserAccessModule userAccessModule)\n    {\n        _userAccessModule = userAccessModule;\n    }\n\n    public async Task ValidateAsync(ResourceOwnerPasswordValidationContext context)\n    {\n        var authenticationResult = await _userAccessModule.ExecuteCommandAsync(new AuthenticateCommand(context.UserName, context.Password));\n        if (!authenticationResult.IsAuthenticated)\n        {\n            context.Result = new GrantValidationResult(\n                TokenRequestErrors.InvalidGrant,\n                authenticationResult.AuthenticationError);\n            return;\n        }\n        context.Result = new GrantValidationResult(\n            authenticationResult.User.Id.ToString(),\n            \"forms\",\n            authenticationResult.User.Claims);\n    }\n}\n```\n\n**Authorization**\n\nAuthorization is achieved by implementing [RBAC (Role Based Access Control)](https://en.wikipedia.org/wiki/Role-based_access_control) using Permissions. Permissions are more granular and a much better way to secure your application than Roles alone. Each User has a set of Roles and each Role contains one or more Permission. The User's set of Permissions is extracted from all Roles the User belongs to. Permissions are always checked on `Controller` level - never Roles:\n\n```csharp\n[HttpPost]\n[Route(\"\")]\n[HasPermission(MeetingsPermissions.ProposeMeetingGroup)]\npublic async Task<IActionResult> ProposeMeetingGroup(ProposeMeetingGroupRequest request)\n{\n    await _meetingsModule.ExecuteCommandAsync(\n        new ProposeMeetingGroupCommand(\n            request.Name,\n            request.Description,\n            request.LocationCity,\n            request.LocationCountryCode));\n\n    return Ok();\n}\n```\n\n### 3.10 Unit Tests\n\n**Definition:**\n\n>A unit test is an automated piece of code that invokes the unit of work being tested, and then checks some assumptions about a single end result of that unit. A unit test is almost always written using a unit testing framework. It can be written easily and runs quickly. It’s trustworthy, readable, and maintainable. It’s consistent in its results as long as production code hasn’t changed. [Art of Unit Testing 2nd Edition](https://www.manning.com/books/the-art-of-unit-testing-second-edition) Roy Osherove\n\n**Attributes of good unit test**\n\n- Automated\n- Maintainable\n- Runs very fast (in ms)\n- Consistent, Deterministic (always the same result)\n- Isolated from other tests\n- Readable\n- Can be executed by anyone\n- Testing public API, not internal behavior (overspecification)\n- Looks like production code\n- Treated as production code\n\n**Implementation**\n\nUnit tests should mainly test business logic (domain model): </br>\n![](docs/Images/unit_tests.jpg)\n\nEach unit test has 3 standard sections: Arrange, Act and Assert:\n\n![](docs/Images/UnitTestsGeneral.jpg)\n\n**1\\. Arrange**\n\nThe Arrange section is responsible for preparing the Aggregate for testing the public method that we want to test. This public method is often called (from the unit tests perspective) the SUT (system under test).\n\nCreating an Aggregate ready for testing involves **calling one or more other public constructors/methods** on the Domain Model. At first it may seem that we are testing too many things at the same time, but this is not true. We need to be one hundred percent sure that the Aggregate is in a state exactly as it will be in production. This can only be ensured when we:\n\n- **Use only public API of Domain Model**\n- Don't use [InternalsVisibleToAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute?view=netframework-4.8) class\n  - This exposes the Domain Model to the Unit Tests library, removing encapsulation so our tests and production code are treated differently and it is a very bad thing\n- Don't use [ConditionalAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.conditionalattribute?view=netframework-4.8) classes - it reduces readability and increases complexity\n- Don't create any special constructors/factory methods for tests (even with conditional compilation symbols)\n  - Special constructor/factory method only for unit tests causes duplication of business logic in the test itself and focuses on state - this kind of approach causes the test to be very sensitive to changes and hard to maintain\n- Don't remove encapsulation from Domain Model (for example: change keywords from `internal`/`private` to `public`)\n- Don't make methods `protected` to inherit from tested class and in this way provide access to internal methods/properties\n\n**Isolation of external dependencies**\n\nThere are 2 main concepts - stubs and mocks:\n\n> A stub is a controllable replacement for an existing dependency (or collaborator) in the system. By using a stub, you can test your code without dealing with the dependency directly.\n\n>A mock object is a fake object in the system that decides whether the unit test has passed or failed. It does so by verifying whether the object under test called the fake object as expected. There’s usually no more than one mock per test.\n>[Art of Unit Testing 2nd Edition](https://www.manning.com/books/the-art-of-unit-testing-second-edition) Roy Osherove\n\nGood advice: use stubs if you need to, but try to avoid mocks. Mocking causes us to test too many internal things and leads to overspecification.\n\n**2\\. Act**\n\nThis section is very easy - we execute **exactly one** public method on aggregate (SUT).\n\n**3\\. Assert**\n\nIn this section we check expectations. There are only 2 possible outcomes:\n\n- Method completed and Domain Event(s) published\n- Business rule was broken\n\nSimple example:\n\n```csharp\n[Test]\npublic void NewUserRegistration_WithUniqueLogin_IsSuccessful()\n{\n    // Arrange\n    var usersCounter = Substitute.For<IUsersCounter>();\n\n    // Act\n    var userRegistration =\n        UserRegistration.RegisterNewUser(\n            \"login\", \"password\", \"test@email\",\n            \"firstName\", \"lastName\", usersCounter);\n\n    // Assert\n    var newUserRegisteredDomainEvent = AssertPublishedDomainEvent<NewUserRegisteredDomainEvent>(userRegistration);\n    Assert.That(newUserRegisteredDomainEvent.UserRegistrationId, Is.EqualTo(userRegistration.Id));\n}\n\n[Test]\npublic void NewUserRegistration_WithoutUniqueLogin_BreaksUserLoginMustBeUniqueRule()\n{\n    // Arrange\n    var usersCounter = Substitute.For<IUsersCounter>();\n    usersCounter.CountUsersWithLogin(\"login\").Returns(x => 1);\n\n    // Assert\n    AssertBrokenRule<UserLoginMustBeUniqueRule>(() =>\n    {\n        // Act\n        UserRegistration.RegisterNewUser(\n            \"login\", \"password\", \"test@email\",\n            \"firstName\", \"lastName\", usersCounter);\n    });\n}\n```\n\nAdvanced example:\n\n```csharp\n[Test]\npublic void AddAttendee_WhenMemberIsAlreadyAttendeeOfMeeting_IsNotPossible()\n{\n    // Arrange\n    var creatorId = new MemberId(Guid.NewGuid());\n    var meetingTestData = CreateMeetingTestData(new MeetingTestDataOptions\n    {\n        CreatorId = creatorId\n    });\n    var newMemberId = new MemberId(Guid.NewGuid());\n    meetingTestData.MeetingGroup.JoinToGroupMember(newMemberId);\n    meetingTestData.Meeting.AddAttendee(meetingTestData.MeetingGroup, newMemberId, 0);\n\n    // Assert\n    AssertBrokenRule<MemberCannotBeAnAttendeeOfMeetingMoreThanOnceRule>(() =>\n    {\n        // Act\n        meetingTestData.Meeting.AddAttendee(meetingTestData.MeetingGroup, newMemberId, 0);\n    });\n}\n```\n\n`CreateMeetingTestData` method is an implementation of [SUT Factory](https://blog.ploeh.dk/2009/02/13/SUTFactory/) described by Mark Seemann which allows keeping common creation logic in one place:\n\n```csharp\nprotected MeetingTestData CreateMeetingTestData(MeetingTestDataOptions options)\n{\n    var proposalMemberId = options.CreatorId ?? new MemberId(Guid.NewGuid());\n    var meetingProposal = MeetingGroupProposal.ProposeNew(\n        \"name\", \"description\",\n        new MeetingGroupLocation(\"Warsaw\", \"PL\"), proposalMemberId);\n\n    meetingProposal.Accept();\n\n    var meetingGroup = meetingProposal.CreateMeetingGroup();\n\n    meetingGroup.UpdatePaymentInfo(DateTime.Now.AddDays(1));\n\n    var meetingTerm = options.MeetingTerm ??\n                      new MeetingTerm(DateTime.UtcNow.AddDays(1), DateTime.UtcNow.AddDays(2));\n\n    var rsvpTerm = options.RvspTerm ?? Term.NoTerm;\n    var meeting = meetingGroup.CreateMeeting(\"title\",\n        meetingTerm,\n        \"description\",\n        new MeetingLocation(\"Name\", \"Address\", \"PostalCode\", \"City\"),\n        options.AttendeesLimit,\n        options.GuestsLimit,\n        rsvpTerm,\n        MoneyValue.Zero,\n        new List<MemberId>(),\n        proposalMemberId);\n\n    DomainEventsTestHelper.ClearAllDomainEvents(meetingGroup);\n\n    return new MeetingTestData(meetingGroup, meeting);\n}\n```\n\n### 3.11 Architecture Decision Log\n\nAll Architectural Decisions (AD) are documented in the [Architecture Decision Log (ADL)](docs/architecture-decision-log).\n\nMore information about documenting architecture-related decisions in this way : [https://github.com/joelparkerhenderson/architecture_decision_record](https://github.com/joelparkerhenderson/architecture_decision_record)\n\n### 3.12 Architecture Unit Tests\n\nIn some cases it is not possible to enforce the application architecture, design or established conventions using compiler (compile-time). For this reason, code implementations can diverge from the original design and architecture. We want to minimize this behavior, not only by code review.</br>\n\nTo do this, unit tests of system architecture, design, major conventions and assumptions  have been written. In .NET there is special library for this task: [NetArchTest](https://github.com/BenMorris/NetArchTest). This library has been written based on the very popular JAVA architecture unit tests library - [ArchUnit](https://www.archunit.org/).</br>\n\nUsing this kind of tests we can test proper layering of our application, dependencies, encapsulation, immutability, DDD correct implementation, naming, conventions and so on - everything what we need to test. Example:</br>\n\n![](docs/Images/architecture_unit_tests.png)\n\nMore information about architecture unit tests here: [https://blogs.oracle.com/javamagazine/unit-test-your-architecture-with-archunit](https://blogs.oracle.com/javamagazine/unit-test-your-architecture-with-archunit)\n\n### 3.13 Integration Tests\n\n#### Definition\n\n\"Integration Test\" term is blurred. It can mean test between classes, modules, services, even systems - see [this](https://martinfowler.com/bliki/IntegrationTest.html) article (by Martin Fowler). </br>\n\nFor this reason, the definition of integration test in this project is as follows:</br>\n\n- it verifies how system works in integration with \"out-of-process\" dependencies - database, messaging system, file system or external API\n- it tests particular use case\n- it can be slow (as opposed to Unit Test)\n\n#### Approach\n\n- **Do not mock dependencies over which you have full control** (like database). Full control dependency means you can always revert all changes (remove side-effects) and no one can notice it. They are not visible to others. See next point, please.\n- **Use \"production\", normal, real database version**. Some use e.g. in memory repository, some use light databases instead \"production\" version. This is still mocking. Testing makes sense if we have full confidence in testing. You can't trust the test if you know that the infrastructure in the production environment will vary. Be always as close to production environment as possible.\n- **Mock dependencies over which you don't have control**. No control dependency means you can't remove side-effects after interaction with this dependency (external API, messaging system, SMTP server etc.). They can be visible to others.\n\n#### Implementation\n\nIntegration test should test exactly one use case. One use case is represented by one Command/Query processing so CommandHandler/QueryHandler in Application layer is perfect starting point for running the Integration Test:</br>\n\n![](docs/Images/integration_tests.jpg)\nFor each test, the following preparation steps must be performed:</br>\n\n1. Clear database\n2. Prepare mocks\n3. Initialize testing module\n\n```csharp\n[SetUp]\npublic async Task BeforeEachTest()\n{\n    const string connectionStringEnvironmentVariable =\n        \"ASPNETCORE_MyMeetings_IntegrationTests_ConnectionString\";\n    ConnectionString = Environment.GetEnvironmentVariable(connectionStringEnvironmentVariable, EnvironmentVariableTarget.Machine);\n    if (ConnectionString == null)\n    {\n        throw new ApplicationException(\n            $\"Define connection string to integration tests database using environment variable: {connectionStringEnvironmentVariable}\");\n    }\n\n    using (var sqlConnection = new SqlConnection(ConnectionString))\n    {\n        await ClearDatabase(sqlConnection);\n    }\n\n    Logger = Substitute.For<ILogger>();\n    EmailSender = Substitute.For<IEmailSender>();\n    EventsBus = new EventsBusMock();\n    ExecutionContext = new ExecutionContextMock(Guid.NewGuid());\n    \n    PaymentsStartup.Initialize(\n        ConnectionString,\n        ExecutionContext,\n        Logger,\n        EventsBus,\n        false);\n\n    PaymentsModule = new PaymentsModule();\n}\n```\n\nAfter preparation, test is performed on clear database. Usually, it is the execution of some (or many) Commands and: </br>\na) running a Query or/and  </br>\nb) verifying mocks </br>\nto check the result.\n\n```csharp\n[TestFixture]\npublic class MeetingPaymentTests : TestBase\n{\n    [Test]\n    public async Task CreateMeetingPayment_Test()\n    {\n        PayerId payerId = new PayerId(Guid.NewGuid());\n        MeetingId meetingId = new MeetingId(Guid.NewGuid());\n        decimal value = 100;\n        string currency = \"EUR\";\n        await PaymentsModule.ExecuteCommandAsync(new CreateMeetingPaymentCommand(Guid.NewGuid(),\n            payerId, meetingId, value, currency));\n\n        var payment = await PaymentsModule.ExecuteQueryAsync(new GetMeetingPaymentQuery(meetingId.Value, payerId.Value));\n\n        Assert.That(payment.PayerId, Is.EqualTo(payerId.Value));\n        Assert.That(payment.MeetingId, Is.EqualTo(meetingId.Value));\n        Assert.That(payment.FeeValue, Is.EqualTo(value));\n        Assert.That(payment.FeeCurrency, Is.EqualTo(currency));\n    }\n}\n```\n\nEach Command/Query processing is a separate execution (with different object graph resolution, context, database connection etc.) thanks to Composition Root of each module. This behavior is important and desirable.\n\n### 3.14 System Integration Testing\n\n#### Definition\n\n[System Integration Testing (SIT)](https://en.wikipedia.org/wiki/System_integration_testing) is performed to verify the interactions between the modules of a software system. It involves the overall testing of a complete system of many subsystem components or elements.\n\n#### Implementation\n\nImplementation of system integration tests is based on approach of integration testing of modules in isolation (invoking commands and queries) described in the previous section.\n\nThe problem is that in this case we are dealing with **asynchronous communication**. Due to asynchrony, our **test must wait for the result** at certain times.\n\nTo correctly implement such tests, the **Sampling** technique and implementation described in the [Growing Object-Oriented Software, Guided by Tests](https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627) book was used:\n\n>An asynchronous test must wait for success and use timeouts to detect failure. This implies that every tested activity must have an observable effect: a test must affect the system so that its observable state becomes different. This sounds obvious but it drives how we think about writing asynchronous tests. If an activity has no observable effect, there is nothing the test can wait for, and therefore no way for the test to synchronize with the system it is testing. There are two ways a test can observe the system: by sampling its observable state or by listening for events that it sends out.\n\n![](docs/Images/SystemIntegrationTests.jpg)\n\nTest below:\n\n1. Creates Meeting Group Proposal in Meetings module\n2. Waits until Meeting Group Proposal to verification will be available in Administration module with 10 seconds timeout\n3. Accepts Meeting Group Proposal in Administration module\n4. Waits until Meeting Group is created in Meetings module with 15 seconds timeout\n\n```csharp\npublic class CreateMeetingGroupTests : TestBase\n{\n    [Test]\n    public async Task CreateMeetingGroupScenario_WhenProposalIsAccepted()\n    {\n        var meetingGroupId = await MeetingsModule.ExecuteCommandAsync(\n            new ProposeMeetingGroupCommand(\"Name\",\n            \"Description\",\n            \"Location\",\n            \"PL\"));\n\n        AssertEventually(\n            new GetMeetingGroupProposalFromAdministrationProbe(meetingGroupId, AdministrationModule), \n            10000);\n\n        await AdministrationModule.ExecuteCommandAsync(new AcceptMeetingGroupProposalCommand(meetingGroupId));\n\n        AssertEventually(\n            new GetCreatedMeetingGroupFromMeetingsProbe(meetingGroupId, MeetingsModule),\n            15000);\n    }\n\n    private class GetCreatedMeetingGroupFromMeetingsProbe : IProbe\n    {\n        private readonly Guid _expectedMeetingGroupId;\n\n        private readonly IMeetingsModule _meetingsModule;\n\n        private List<MeetingGroupDto> _allMeetingGroups;\n\n        public GetCreatedMeetingGroupFromMeetingsProbe(\n            Guid expectedMeetingGroupId, \n            IMeetingsModule meetingsModule)\n        {\n            _expectedMeetingGroupId = expectedMeetingGroupId;\n            _meetingsModule = meetingsModule;\n        }\n\n        public bool IsSatisfied()\n        {\n            return _allMeetingGroups != null && \n                   _allMeetingGroups.Any(x => x.Id == _expectedMeetingGroupId);\n        }\n\n        public async Task SampleAsync()\n        {\n            _allMeetingGroups = await _meetingsModule.ExecuteQueryAsync(new GetAllMeetingGroupsQuery());\n        }\n\n        public string DescribeFailureTo() \n            => $\"Meeting group with ID: {_expectedMeetingGroupId} is not created\";\n    }\n\n    private class GetMeetingGroupProposalFromAdministrationProbe : IProbe\n    {\n        private readonly Guid _expectedMeetingGroupProposalId;\n\n        private MeetingGroupProposalDto _meetingGroupProposal;\n\n        private readonly IAdministrationModule _administrationModule;\n\n        public GetMeetingGroupProposalFromAdministrationProbe(Guid expectedMeetingGroupProposalId, IAdministrationModule administrationModule)\n        {\n            _expectedMeetingGroupProposalId = expectedMeetingGroupProposalId;\n            _administrationModule = administrationModule;\n        }\n\n        public bool IsSatisfied()\n        {\n            if (_meetingGroupProposal == null)\n            {\n                return false;\n            }\n\n            if (_meetingGroupProposal.Id == _expectedMeetingGroupProposalId &&\n                _meetingGroupProposal.StatusCode == MeetingGroupProposalStatus.ToVerify.Value)\n            {\n                return true;\n            }\n\n            return false;\n        }\n\n        public async Task SampleAsync()\n        {\n            try\n            {\n                _meetingGroupProposal =\n                    await _administrationModule.ExecuteQueryAsync(\n                        new GetMeetingGroupProposalQuery(_expectedMeetingGroupProposalId));\n            }\n            catch\n            {\n                // ignored\n            }\n        }\n\n        public string DescribeFailureTo()\n            => $\"Meeting group proposal with ID: {_expectedMeetingGroupProposalId} to verification not created\";\n    }\n}\n```\n\nPoller class implementation (based on example in the book):\n\n```csharp\npublic class Poller\n{\n    private readonly int _timeoutMillis;\n\n    private readonly int _pollDelayMillis;\n\n    public Poller(int timeoutMillis)\n    {\n        _timeoutMillis = timeoutMillis;\n        _pollDelayMillis = 1000;\n    }\n\n    public void Check(IProbe probe)\n    {\n        var timeout = new Timeout(_timeoutMillis);\n        while (!probe.IsSatisfied())\n        {\n            if (timeout.HasTimedOut())\n            {\n                throw new AssertErrorException(DescribeFailureOf(probe));\n            }\n\n            Thread.Sleep(_pollDelayMillis);\n            probe.SampleAsync();\n        }\n    }\n\n    private static string DescribeFailureOf(IProbe probe)\n    {\n        return probe.DescribeFailureTo();\n    }\n}\n```\n\n### 3.15 Event Sourcing\n\n#### Theory\n\nDuring the implementation of the Payment module, *Event Sourcing* was used. *Event Sourcing* is a way of preserving the state of our system by recording a sequence of events. No less, no more.\n\nIt is important here to really restore the state of our application from events. If we collect events only for auditing purposes, it is an [Audit Log/Trail](https://en.wikipedia.org/wiki/Audit_trail) - not the *Event Sourcing*.\n\nThe main elements of *Event Sourcing* are as follows:\n\n- Events Stream\n- Objects that are restored based on events. There are 2 types of such objects depending on the purpose:\n-- Objects responsible for the change of state. In Domain-Driven Design they will be *Aggregates*.\n-- *Projections*: read models prepared for a specific purpose\n- *Subscriptions* : a way to receive information about new events\n- *Snapshots*: from time to time, objects saved in the traditional way for performance purposes. Mainly used if there are many events to restore the object from the entire event history. (Note: there is currently no snapshot implementation in the project)\n\n![](docs/Images/ES_elements.jpg)\n\n#### Tool\n\nIn order not to reinvent the wheel, the *SQL Stream Store* library was used. As the [documentation](https://sqlstreamstore.readthedocs.io/en/latest/) says:\n\n*SQL Stream Store is a .NET library to assist with developing applications that use event sourcing or wish to use stream based patterns over a relational database and existing operational infrastructure.*\n\nLike every library, it has its limitations and assumptions (I recommend the linked documentation chapter \"Things you need to know before adopting\"). For me, the most important 2 points from this chapter are:\n\n1. *\"Subscriptions (and thus projections) are **eventually consistent** and always will be.\"* This means that there will always be an inconsistency time from saving the event to the stream and processing the event by the projector(s).\n2. *\"No support for ambient System.Transaction scopes enforcing the concept of the stream as the consistency and transactional boundary.\"* This means that if we save the event to a events stream and want to save something **in the same transaction**, we must use [TransactionScope](https://learn.microsoft.com/en-us/dotnet/api/system.transactions.transactionscope?view=net-8.0). If we cannot use *TransactionScope* for some reason, we must accept the Eventual Consistency also in this case.\n\nOther popular tools:\n\n- [EventStore](https://eventstore.com/) *\"An industrial-strength database solution built from the ground up for event sourcing.\"*\n- [Marten](https://martendb.io/) *\".NET Transactional Document DB and Event Store on PostgreSQL\"*\n\n#### Implementation\n\nThere are 2 main \"flows\" to handle:\n\n- Command handling: change of state - adding new events to stream (writing)\n- Projection of events to create read models\n\n##### Command Handling\n\nThe whole process looks like this:\n\n![](docs/Images/ES_command_handling.png)\n\n1. We create / update an aggregate by creating an event\n2. We add changes to the Aggregate Store. This is the class responsible for writing / loading our aggregates. We are not saving changes yet.\n3. As part of Unit Of Work  a) Aggregate Store adds events to the stream b) messages are added to the Outbox\n\nCommand Handler:\n\n```csharp\npublic class BuySubscriptionCommandHandler : ICommandHandler<BuySubscriptionCommand, Guid>\n{\n    private readonly IAggregateStore _aggregateStore;\n\n    private readonly IPayerContext _payerContext;\n\n    private readonly ISqlConnectionFactory _sqlConnectionFactory;\n\n    public BuySubscriptionCommandHandler(\n        IAggregateStore aggregateStore, \n        IPayerContext payerContext, \n        ISqlConnectionFactory sqlConnectionFactory)\n    {\n        _aggregateStore = aggregateStore;\n        _payerContext = payerContext;\n        _sqlConnectionFactory = sqlConnectionFactory;\n    }\n\n    public async Task<Guid> Handle(BuySubscriptionCommand command, CancellationToken cancellationToken)\n    {\n        var priceList = await PriceListProvider.GetPriceList(_sqlConnectionFactory.GetOpenConnection());\n\n        var subscriptionPayment = SubscriptionPayment.Buy(\n            _payerContext.PayerId,\n            SubscriptionPeriod.Of(command.SubscriptionTypeCode),\n            command.CountryCode,\n            MoneyValue.Of(command.Value, command.Currency),\n            priceList);\n        \n        _aggregateStore.AppendChanges(subscriptionPayment);\n\n        return subscriptionPayment.Id;\n    }\n}\n```\n\n`SubscriptionPayment` Aggregate:\n\n```csharp\npublic class SubscriptionPayment : AggregateRoot\n{\n    private PayerId _payerId;\n\n    private SubscriptionPeriod _subscriptionPeriod;\n\n    private string _countryCode;\n\n    private SubscriptionPaymentStatus _subscriptionPaymentStatus;\n\n    private MoneyValue _value;\n\n    protected override void Apply(IDomainEvent @event)\n    {\n        this.When((dynamic)@event);\n    }\n\n    public static SubscriptionPayment Buy(\n        PayerId payerId,\n        SubscriptionPeriod period,\n        string countryCode,\n        MoneyValue priceOffer,\n        PriceList priceList)\n    {\n        var priceInPriceList = priceList.GetPrice(countryCode, period, PriceListItemCategory.New);\n        CheckRule(new PriceOfferMustMatchPriceInPriceListRule(priceOffer, priceInPriceList));\n\n        var subscriptionPayment = new SubscriptionPayment();\n\n        var subscriptionPaymentCreated = new SubscriptionPaymentCreatedDomainEvent(\n            Guid.NewGuid(),\n            payerId.Value,\n            period.Code,\n            countryCode,\n            SubscriptionPaymentStatus.WaitingForPayment.Code,\n            priceOffer.Value,\n            priceOffer.Currency);\n\n        subscriptionPayment.Apply(subscriptionPaymentCreated);\n        subscriptionPayment.AddDomainEvent(subscriptionPaymentCreated);\n\n        return subscriptionPayment;\n    }\n\n    private void When(SubscriptionPaymentCreatedDomainEvent @event)\n    {\n        this.Id = @event.SubscriptionPaymentId;\n        _payerId = new PayerId(@event.PayerId);\n        _subscriptionPeriod = SubscriptionPeriod.Of(@event.SubscriptionPeriodCode);\n        _countryCode = @event.CountryCode;\n        _subscriptionPaymentStatus = SubscriptionPaymentStatus.Of(@event.Status);\n        _value = MoneyValue.Of(@event.Value, @event.Currency);\n    }\n```\n\n`AggregateRoot` base class:\n\n```csharp\npublic abstract class AggregateRoot\n{\n    public Guid Id { get; protected set; }\n\n    public int Version { get; private set; }\n\n    private readonly List<IDomainEvent> _domainEvents;\n\n    protected AggregateRoot()\n    {\n        _domainEvents = new List<IDomainEvent>();\n\n        Version = -1;\n    }\n\n    protected void AddDomainEvent(IDomainEvent @event)\n    {\n        _domainEvents.Add(@event);\n    }\n\n    public IReadOnlyCollection<IDomainEvent> GetDomainEvents() => _domainEvents.AsReadOnly();\n\n    public void Load(IEnumerable<IDomainEvent> history)\n    {\n        foreach (var e in history)\n        {\n            Apply(e);\n            Version++;\n        }\n    }\n\n    protected abstract void Apply(IDomainEvent @event);\n\n    protected static void CheckRule(IBusinessRule rule)\n    {\n        if (rule.IsBroken())\n        {\n            throw new BusinessRuleValidationException(rule);\n        }\n    }\n}\n\n```\n\nAggregate Store implementation with SQL Stream Store library usage:\n\n```csharp\npublic class SqlStreamAggregateStore : IAggregateStore\n{\n    private readonly IStreamStore _streamStore;\n\n    private readonly List<IDomainEvent> _appendedChanges;\n\n    private readonly List<AggregateToSave> _aggregatesToSave;\n\n    public SqlStreamAggregateStore(\n        ISqlConnectionFactory sqlConnectionFactory)\n    {\n        _appendedChanges = new List<IDomainEvent>();\n\n        _streamStore =\n            new MsSqlStreamStore(\n                new MsSqlStreamStoreSettings(sqlConnectionFactory.GetConnectionString())\n                    {\n                        Schema = DatabaseSchema.Name\n                });\n\n        _aggregatesToSave = new List<AggregateToSave>();\n    }\n\n    public async Task Save()\n    {\n        foreach (var aggregateToSave in _aggregatesToSave)\n        {\n            await _streamStore.AppendToStream(\n                GetStreamId(aggregateToSave.Aggregate),\n                aggregateToSave.Aggregate.Version,\n                aggregateToSave.Messages.ToArray());\n        }\n\n        _aggregatesToSave.Clear();\n    }\n\n    public async Task<T> Load<T>(AggregateId<T> aggregateId) where T : AggregateRoot\n    {\n        var streamId = GetStreamId(aggregateId);\n\n        IList<IDomainEvent> domainEvents = new List<IDomainEvent>();\n        ReadStreamPage readStreamPage;\n        do\n        {\n            readStreamPage = await _streamStore.ReadStreamForwards(streamId, StreamVersion.Start, maxCount: 100);\n            var messages = readStreamPage.Messages;\n            foreach (var streamMessage in messages)\n            {\n                Type type = DomainEventTypeMappings.Dictionary[streamMessage.Type];\n                var jsonData = await streamMessage.GetJsonData();\n                var domainEvent = JsonConvert.DeserializeObject(jsonData, type) as IDomainEvent;\n\n                domainEvents.Add(domainEvent);\n            }\n        } while (!readStreamPage.IsEnd);\n\n        var aggregate = (T)Activator.CreateInstance(typeof(T), true);\n\n        aggregate.Load(domainEvents);\n\n        return aggregate;\n    }\n\n```\n\n##### Events Projection\n\nThe whole process looks like this:\n\n![](docs/Images/ES_events_projection.png)\n\n1. Special class `Subscriptions Manager` subscribes to Events Store (using SQL Store Stream library)\n2. Events Store raises `StreamMessageRecievedEvent`\n3. `Subscriptions Manager` invokes all projectors\n4. If projector know how to handle given event, it updates particular read model. In current implementation it updates special table in SQL database.\n\n`SubscriptionsManager` class implementation:\n\n```csharp\npublic class SubscriptionsManager\n{\n    private readonly IStreamStore _streamStore;\n\n    public SubscriptionsManager(\n        IStreamStore streamStore)\n    {\n        _streamStore = streamStore;\n    }\n\n    public void Start()\n    {\n        long? actualPosition;\n\n        using (var scope = PaymentsCompositionRoot.BeginLifetimeScope())\n        {\n            var checkpointStore = scope.Resolve<ICheckpointStore>();\n\n            actualPosition = checkpointStore.GetCheckpoint(SubscriptionCode.All);\n        }\n\n        _streamStore.SubscribeToAll(actualPosition, StreamMessageReceived);\n    }\n\n    public void Stop()\n    {\n        _streamStore.Dispose();\n    }\n\n    private static async Task StreamMessageReceived(\n        IAllStreamSubscription subscription, StreamMessage streamMessage, CancellationToken cancellationToken)\n    {\n        var type = DomainEventTypeMappings.Dictionary[streamMessage.Type];\n        var jsonData = await streamMessage.GetJsonData(cancellationToken);\n        var domainEvent = JsonConvert.DeserializeObject(jsonData, type) as IDomainEvent;\n\n        using var scope = PaymentsCompositionRoot.BeginLifetimeScope();\n\n        var projectors = scope.Resolve<IList<IProjector>>();\n\n        var tasks = projectors\n            .Select(async projector =>\n            {\n                await projector.Project(domainEvent);\n            });\n\n        await Task.WhenAll(tasks);\n\n        var checkpointStore = scope.Resolve<ICheckpointStore>();\n        await checkpointStore.StoreCheckpoint(SubscriptionCode.All, streamMessage.Position);\n    }\n}\n\n```\n\nExample projector:\n\n```csharp\ninternal class SubscriptionDetailsProjector : ProjectorBase, IProjector\n{\n    private readonly IDbConnection _connection;\n\n    public SubscriptionDetailsProjector(ISqlConnectionFactory sqlConnectionFactory)\n    {\n        _connection = sqlConnectionFactory.GetOpenConnection();\n    }\n\n    public async Task Project(IDomainEvent @event)\n    {\n        await When((dynamic) @event);\n    }\n\n    private async Task When(SubscriptionRenewedDomainEvent subscriptionRenewed)\n    {\n        var period = SubscriptionPeriod.GetName(subscriptionRenewed.SubscriptionPeriodCode);\n        \n        await _connection.ExecuteScalarAsync(\"UPDATE payments.SubscriptionDetails \" +\n                                                \"SET \" +\n                                                    \"[Status] = @Status, \" +\n                                                    \"[ExpirationDate] = @ExpirationDate, \" +\n                                                    \"[Period] = @Period \" +\n                                                \"WHERE [Id] = @SubscriptionId\",\n            new\n            {\n                subscriptionRenewed.SubscriptionId,\n                subscriptionRenewed.Status,\n                subscriptionRenewed.ExpirationDate,\n                period\n            });\n    }\n\n    private async Task When(SubscriptionExpiredDomainEvent subscriptionExpired)\n    {\n        await _connection.ExecuteScalarAsync(\"UPDATE payments.SubscriptionDetails \" +\n                                             \"SET \" +\n                                             \"[Status] = @Status \" +\n                                             \"WHERE [Id] = @SubscriptionId\",\n            new\n            {\n                subscriptionExpired.SubscriptionId,\n                subscriptionExpired.Status\n            });\n    }\n\n    private async Task When(SubscriptionCreatedDomainEvent subscriptionCreated)\n    {\n        var period = SubscriptionPeriod.GetName(subscriptionCreated.SubscriptionPeriodCode);\n        \n        await _connection.ExecuteScalarAsync(\"INSERT INTO payments.SubscriptionDetails \" +\n                                       \"([Id], [Period], [Status], [CountryCode], [ExpirationDate]) \" +\n                                       \"VALUES (@SubscriptionId, @Period, @Status, @CountryCode, @ExpirationDate)\",\n            new\n            {\n                subscriptionCreated.SubscriptionId,\n                period,\n                subscriptionCreated.Status,\n                subscriptionCreated.CountryCode,\n                subscriptionCreated.ExpirationDate\n            });\n    }\n}\n\n```\n\n#### Sample view of Event Store\n\nSample *Event Store* view after execution of SubscriptionLifecycleTests Integration Test which includes following steps:\n\n1. Creating Price List\n2. Buying Subscription\n3. Renewing Subscription\n4. Expiring Subscription\n\nlooks like this (*SQL Stream Store* table - *payments.Messages*):\n\n![](docs/Images/ES_event_store_db_sample.png)\n\n### 3.16 Database Change Management\n\nDatabase change management is accomplished by *migrations/transitions* versioning. Additionally, the current state of the database structure is also versioned.\n\nMigrations are applied using a simple [DatabaseMigrator](src/Database/DatabaseMigrator) console application that uses the [DbUp](https://dbup.readthedocs.io/en/latest/) library. The current state of the database structure is kept in the [SSDT Database Project](https://docs.microsoft.com/en-us/sql/ssdt/how-to-create-a-new-database-project).\n\nThe database update is performed by running the following command:\n\n```shell\ndotnet DatabaseMigrator.dll \"connection_string\" \"scripts_directory_path\"\n```\n\nThe entire solution is described in detail in the following articles:\n\n1. [Database change management](https://www.kamilgrzybek.com/database/database-change-management/) (theory)\n2. [Using database project and DbUp for database management](https://www.kamilgrzybek.com/database/using-database-project-and-dbup-for-database-management/) (implementation)\n\n### 3.17 Continuous Integration\n\n#### Definition\n\nAs defined on [Martin Fowler's website](https://martinfowler.com/articles/continuousIntegration.html):\n> *Continuous Integration is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily - leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible.*\n\n#### YAML Implementation [OBSOLETE]\n\n*Originally the build was implemented using yaml and GitHub Actions functionality. Currently, the build is implemented with NUKE (see next section). See [buildPipeline.yml](.github/workflows/buildPipeline.yml)* file history.\n\n##### Pipeline description\n\nCI was implemented using [GitHub Actions](https://docs.github.com/en/actions/getting-started-with-github-actions/about-github-actions). For this purpose, one workflow, which triggers on Pull Request to *master* branch or Push to *master* branch was created. It contains 2 jobs:\n\n- build test, execute Unit Tests and Architecture Tests\n- execute Integration Tests\n\n![](docs/Images/ci.jpg)\n\n**Steps description**<br/>\na) Checkout repository - clean checkout of git repository <br/>\nb) Setup .NET - install .NET 8.0 SDK<br/>\nc) Install dependencies - resolve NuGet packages<br/>\nd) Build - build solution<br/>\ne) Run Unit Tests - run automated Unit Tests (see section 3.10)<br/>\nf) Run Architecture Tests - run automated Architecture Tests (see section 3.12)<br/>\ng) Initialize containers - setup Docker container for MS SQL Server<br/>\nh) Wait for SQL Server initialization - after container initialization MS SQL Server is not ready, initialization of server itself takes some time so 30 seconds timeout before execution of next step is needed<br/>\ni) Create Database - create and initialize database<br/>\nj) Migrate Database - execute database upgrade using *DatabaseMigrator* application (see 3.16 section)<br/>\nk) Run Integration Tests - perform Integration and System Integration Testing (see section 3.13 and 3.14)<br/>\n\n##### Workflow definition\n\nWorkflow definition: [buildPipeline.yml](.github/workflows/buildPipeline.yml)\n\n##### Example workflow execution\n\nExample workflow output:\n\n![](docs/Images/ci_job1.png)\n\n![](docs/Images/ci_job2.png)\n\n#### NUKE\n\n[Nuke](https://nuke.build/) is *the cross-platform build automation solution for .NET with C# DSL.*\n\nThe 2 main advantages of its use over pure yaml defined in GitHub actions are as follows:\n\n- You run the same code on local machine and in the build server. See [buildPipeline.yml](.github/workflows/buildPipeline.yml)\n- You use C# with all the goodness (debugging, compilation, packages, refactoring and so on)\n\nThis is how one of the stage definition looks like (execute Build, Unit Tests, Architecture Tests) [Build.cs](build/Build.cs):\n\n```csharp\npartial class Build : NukeBuild\n{\n    /// Support plugins are available for:\n    ///   - JetBrains ReSharper        https://nuke.build/resharper\n    ///   - JetBrains Rider            https://nuke.build/rider\n    ///   - Microsoft VisualStudio     https://nuke.build/visualstudio\n    ///   - Microsoft VSCode           https://nuke.build/vscode\n\n    public static int Main () => Execute<Build>(x => x.Compile);\n\n    [Parameter(\"Configuration to build - Default is 'Debug' (local) or 'Release' (server)\")]\n    readonly Configuration Configuration = IsLocalBuild ? Configuration.Debug : Configuration.Release;\n\n    [Solution] readonly Solution Solution;\n\n    Target Clean => _ => _\n        .Before(Restore)\n        .Executes(() =>\n        {\n            EnsureCleanDirectory(WorkingDirectory);\n        });\n\n    Target Restore => _ => _\n        .Executes(() =>\n        {\n            DotNetRestore(s => s\n                .SetProjectFile(Solution));\n        });\n\n    Target Compile => _ => _\n        .DependsOn(Restore)\n        .Executes(() =>\n        {\n            DotNetBuild(s => s\n                .SetProjectFile(Solution)\n                .SetConfiguration(Configuration)\n                .EnableNoRestore());\n        });\n\n    Target UnitTests => _ => _\n        .DependsOn(Compile)\n        .Executes(() =>\n        {\n            DotNetTest(s => s\n                .SetProjectFile(Solution)\n                .SetFilter(\"UnitTests\")\n                .SetConfiguration(Configuration)\n                .EnableNoRestore()\n                .EnableNoBuild());\n        });\n\n    Target ArchitectureTests => _ => _\n        .DependsOn(UnitTests)\n        .Executes(() =>\n        {\n            DotNetTest(s => s\n                .SetProjectFile(Solution)\n                .SetFilter(\"ArchTests\")\n                .SetConfiguration(Configuration)\n                .EnableNoRestore()\n                .EnableNoBuild());\n        });\n\n    Target BuildAndUnitTests => _ => _\n        .Triggers(ArchitectureTests)\n        .Executes(() =>\n        {\n        });\n}\n\n```\n\nIf you want to see more complex scenario when integration tests are executed (with SQL Server database creation using docker) see [BuildIntegrationTests.cs](build/BuildIntegrationTests.cs) file.\n\n#### SQL Server database project build\n\nCurrently, compilation of database projects is not supported by the .NET Core and dotnet tool. For this reason, the [MSBuild.Sdk.SqlProj](https://github.com/rr-wfm/MSBuild.Sdk.SqlProj/) library was used. In order to do that, you need to create .NET standard library, change SDK and create links to scripts folders. Final [database project](src/Database/CompanyName.MyMeetings.Database.Build/CompanyName.MyMeetings.Database.Build.csproj) looks as follows:\n\n```xml\n<Project Sdk=\"MSBuild.Sdk.SqlProj/1.6.0\">\n    <PropertyGroup>\n        <TargetFramework>netstandard2.0</TargetFramework>\n    </PropertyGroup>\n    <ItemGroup>\n        <Content Include=\"..\\CompanyName.MyMeetings.Database\\administration\\**\\*.sql\" />\n        <Content Include=\"..\\CompanyName.MyMeetings.Database\\app\\**\\*.sql\" />\n        <Content Include=\"..\\CompanyName.MyMeetings.Database\\meetings\\**\\*.sql\" />\n        <Content Include=\"..\\CompanyName.MyMeetings.Database\\payments\\**\\*.sql\" />\n        <Content Include=\"..\\CompanyName.MyMeetings.Database\\users\\**\\*.sql\" />\n        <Content Include=\"..\\CompanyName.MyMeetings.Database\\Security\\**\\*.sql\" />\n    </ItemGroup>\n</Project>\n```\n\n### 3.18 Static code analysis\n\nIn order to standardize the appearance of the code and increase its readability, the [StyleCopAnalyzers](https://github.com/DotNetAnalyzers/StyleCopAnalyzers) library was used. This library implements StyleCop rules using the .NET Compiler Platform and is responsible for the static code analysis.<br/>\n\nUsing this library is trivial - it is just added as a NuGet package to all projects. There are many ways to configure rules, but currently the best way to do this is to edit the [.editorconfig](src/.editorconfig) file. More information can be found at the link above.<br/>\n\n**Note! Static code analysis works best when the following points are met:**<br/>\n\n1. Each developer has an IDE that respects the rules and helps to follow them\n2. The rules are checked during the project build process as part of Continuous Integration\n3. The rules are set to *help your system grow*. **Static analysis is not a value in itself.** Some rules may not make complete sense and should be turned off. Other rules may have higher priority. It all depends on the project, company standards and people involved in the project. Be pragmatic.\n\n### 3.19 System Under Test SUT\n\nThere is always a need to prepare the entire system in a specific state, e.g. for manual, exploratory, UX / UI tests. The fact that the tests are performed manually does not mean that we cannot automate the preparation phase (Given / Arrange). Thanks to the automation of system state preparation ([System Under Test](https://en.wikipedia.org/wiki/System_under_test)), we are able to recreate exactly the same state in any environment. In addition, such automation can be used later to automate the entire test (e.g. through an [3.13 Integration Tests](#313-integration-tests)).<br/>\n\nThe implementation of such automation based on the use of NUKE and the test framework is presented below. As in the case of integration testing, we use the public API of modules.\n\n![](docs/Images/sut-preparation.jpg)\n\nBelow is a SUT whose task is to go through the whole process - from setting up a *Meeting Group*, through its *Payment*, adding a new *Meeting* and signing up for it by another user.\n\n```csharp\npublic class CreateMeeting : TestBase\n{\n    protected override bool PerformDatabaseCleanup => true;\n\n    [Test]\n    public async Task Prepare()\n    {\n        await UsersFactory.GivenAdmin(\n            UserAccessModule,\n            \"testAdmin@mail.com\",\n            \"testAdminPass\",\n            \"Jane Doe\",\n            \"Jane\",\n            \"Doe\",\n            \"testAdmin@mail.com\");\n\n        var userId = await UsersFactory.GivenUser(\n            UserAccessModule,\n            ConnectionString,\n            \"adamSmith@mail.com\",\n            \"adamSmithPass\",\n            \"Adam\",\n            \"Smith\",\n            \"adamSmith@mail.com\");\n\n        ExecutionContextAccessor.SetUserId(userId);\n\n        var meetingGroupId = await MeetingGroupsFactory.GivenMeetingGroup(\n            MeetingsModule,\n            AdministrationModule,\n            ConnectionString,\n            \"Software Craft\",\n            \"Group for software craft passionates\",\n            \"Warsaw\",\n            \"PL\");\n\n        await TestPriceListManager.AddPriceListItems(PaymentsModule, ConnectionString);\n\n        await TestPaymentsManager.BuySubscription(\n            PaymentsModule,\n            ExecutionContextAccessor);\n        \n        SetDate(new DateTime(2022, 7, 1, 10, 0, 0));\n\n        var meetingId = await TestMeetingFactory.GivenMeeting(\n            MeetingsModule,\n            meetingGroupId,\n            \"Tactical DDD\",\n            new DateTime(2022, 7, 10, 18, 0, 0),\n            new DateTime(2022, 7, 10, 20, 0, 0),\n            \"Meeting about Tactical DDD patterns\",\n            \"Location Name\",\n            \"Location Address\",\n            \"01-755\",\n            \"Warsaw\",\n            50,\n            0,\n            null,\n            null,\n            0,\n            null,\n            new List<Guid>()\n        );\n        \n        var attendeeUserId = await UsersFactory.GivenUser(\n            UserAccessModule,\n            ConnectionString,\n            \"rickmorty@mail.com\",\n            \"rickmortyPass\",\n            \"Rick\",\n            \"Morty\",\n            \"rickmorty@mail.com\");\n        \n        ExecutionContextAccessor.SetUserId(attendeeUserId);\n\n        await TestMeetingGroupManager.JoinToGroup(MeetingsModule, meetingGroupId);\n\n        await TestMeetingManager.AddAttendee(MeetingsModule, meetingId, guestsNumber: 1);\n    }\n}\n```\n\nYou can create this SUT using following *NUKE* target providing connection string and particular test name:\n\n```shell\n .\\build PrepareSUT --DatabaseConnectionString \"connection_string\" --SUTTestName CreateMeeting\n```\n\n### 3.20 Mutation Testing\n\n#### Description\n\nMutation testing is an approach to test and evaluate our existing tests. During mutation testing a special framework modifies pieces of our code and runs our tests. These modifications are called *mutations* or *mutants*. If a given *mutation* does not cause a failure of at least once test, it means that the mutant has *survived* so our tests are probably not sufficient.\n\n#### Example\n\nIn this repository, the [Stryker.NET](https://stryker-mutator.io/docs/stryker-net/Introduction) framework was used for mutation testing. In the simplest use, after installation, all you need to do is enter the directory of tests that you want to mutate and run the following command:\n\n```shell\ndotnet stryker\n```\n\nThe result of this command is the *mutation report file*. Assuming we want to test the unit tests of the Meetings module, such a [report](docs/mutation-tests-reports/mutation-report.html) has been generated. This is its first page:\n\n![](docs/Images/mutation_testing_report.png)\n\nLet us analyze one of the places where the mutant survived. This is the *AddNotAttendee* method of the *Meeting* class. This method is used to add a *Member* to the list of people who have decided not to attend the meeting. According to the logic, if the same person previously indicated that he was going to the *Meeting* and later changed his mind, then if there is someone on the *Waiting List*, he should be added to the attendees. Based on requirements, this should be the person who signed up on the *Waiting List* **first** (based on **SignUpDate**).\n\n![](docs/Images/mutation_testing_example.png)\n\nAs you can see, the mutation framework changed our sorting in linq query (from default ascending to descending). However, each test was successful, so it means that mutant survived so we don't have a test that checks the correct sort based on *SignUpDate*.\n\nFrom the example above, one more important thing can be deduced - **code coverage is insufficient**. In the given example, this code is covered, but our tests do not check the given requirement, therefore our code may have errors. Mutation testing allow to detect such situations. Of course, as with any tool, we should use it wisely, as not every case requires our attention.\n\n## 4. Technology\n\nList of technologies, frameworks and libraries used for implementation:\n\n- [.NET 8.0](https://dotnet.microsoft.com/download) (platform). Note for Visual Studio users: **VS 2019** is required.\n- [MS SQL Server Express](https://www.microsoft.com/en-us/sql-server/sql-server-editions-express) (database)\n- [Entity Framework Core 8.0](https://docs.microsoft.com/en-us/ef/core/) (ORM Write Model implementation for DDD)\n- [Autofac](https://autofac.org/) (Inversion of Control Container)\n- [IdentityServer4](http://docs.identityserver.io) (Authentication and Authorization)\n- [Serilog](https://serilog.net/) (structured logging)\n- [Hellang.Middleware.ProblemDetails](https://github.com/khellang/Middleware/tree/master/src/ProblemDetails) (API Problem Details support)\n- [Swashbuckle](https://github.com/domaindrivendev/Swashbuckle) (Swagger automated documentation)\n- [Dapper](https://github.com/StackExchange/Dapper) (micro ORM for Read Model)\n- [Newtonsoft.Json](https://www.newtonsoft.com/json) (serialization/deserialization to/from JSON)\n- [Quartz.NET](https://www.quartz-scheduler.net/) (background processing)\n- [FluentValidation](https://fluentvalidation.net/) (data validation)\n- [MediatR](https://github.com/jbogard/MediatR) (mediator implementation)\n- [Postman](https://www.getpostman.com/) (API tests)\n- [NUnit](https://nunit.org/) (Testing framework)\n- [NSubstitute](https://nsubstitute.github.io/) (Testing isolation framework)\n- [Visual Paradigm Community Edition](https://www.visual-paradigm.com/download/community.jsp) (CASE tool for modeling and documentation)\n- [NetArchTest](https://github.com/BenMorris/NetArchTest) (Architecture Unit Tests library)\n- [Polly](https://github.com/App-vNext/Polly) (Resilience and transient-fault-handling library)\n- [SQL Stream Store](https://github.com/SQLStreamStore) (Library to assist with Event Sourcing)\n- [DbUp](https://dbup.readthedocs.io/en/latest/) (Database migrations deployment)\n- [SSDT Database Project](https://docs.microsoft.com/en-us/sql/ssdt/how-to-create-a-new-database-project) (Database structure versioning)\n- [GitHub Actions](https://docs.github.com/en/actions) (Continuous Integration workflows implementation)\n- [StyleCopAnalyzers](https://github.com/DotNetAnalyzers/StyleCopAnalyzers) (Static code analysis library)\n- [PlantUML](https://plantuml.com) (UML diagrams from textual description, diagrams as text)\n- [C4 Model](https://c4model.com/) (Model for visualising software architecture)\n- [C4-PlantUML](https://github.com/plantuml-stdlib/C4-PlantUML) (C4 Model for PlantUML plugin)\n- [NUKE](https://nuke.build/) (Build automation system)\n- [MSBuild.Sdk.SqlProj](https://github.com/rr-wfm/MSBuild.Sdk.SqlProj/) (Database project compilation)\n- [Stryker.NET](https://stryker-mutator.io/docs/stryker-net/Introduction) (Mutation Testing framework)\n\n## 5. How to Run\n\n### Install .NET 8.0 SDK\n\n- [Download](https://dotnet.microsoft.com/en-us/download/dotnet/8.0) and install .NET 8.0 SDK\n\n### Create database\n\n- Download and install MS SQL Server Express or other\n- Create an empty database using [CreateDatabase_Windows.sql](src/Database/CompanyName.MyMeetings.Database/Scripts/CreateDatabase_Windows.sql) or [CreateDatabase_Linux.sql](src/Database/CompanyName.MyMeetings.Database/Scripts/CreateDatabase_Linux.sql). Script adds **app** schema which is needed for migrations journal table. Change database file path if needed.\n- Run database migrations using **MigrateDatabase** NUKE target by executing the build.sh script present in the root folder:\n\n```shell\n.\\build MigrateDatabase --DatabaseConnectionString \"connection_string\"\n```\n\n*\"connection_string\"* - connection string to your database\n\n### Seed database\n\n- Execute [SeedDatabase.sql](src/Database/CompanyName.MyMeetings.Database/Scripts/SeedDatabase.sql) script\n- 2 test users will be created - check the script for usernames and passwords\n\n### Configure connection string\n\nSet a database connection string called `MeetingsConnectionString` in the root of the API project's appsettings.json or use [Secrets](https://blogs.msdn.microsoft.com/mihansen/2017/09/10/managing-secrets-in-net-core-2-0-apps/)\n\nExample config setting in appsettings.json for a database called `MyMeetings`:\n\n```json\n{\n \"MeetingsConnectionString\": \"Server=(localdb)\\\\mssqllocaldb;Database=MyMeetings;Trusted_Connection=True;\"\n}\n```\n\n### Configure startup in IDE\n\n- Set the Startup Item in your IDE to the API Project, not IIS Express\n\n### Authenticate\n\n- Once it is running you'll need a token to make API calls. This is done via OAuth2 [Resource Owner Password Grant Type](https://www.oauth.com/oauth2-servers/access-tokens/password-grant/). By default IdentityServer is configured with the following:\n- `client_id = ro.client`\n- `client_secret = secret` **(this is literally the value - not a statement that this value is secret!)**\n- `scope = myMeetingsAPI openid profile`\n- `grant_type = password`\n\nInclude the credentials of a test user created in the [SeedDatabase.sql](src/Database/CompanyName.MyMeetings.Database/Scripts/SeedDatabase.sql) script - for example:\n\n- `username = testMember@mail.com`\n- `password = testMemberPass`\n\n**Example HTTP Request for an Access Token:**\n\n```http\nPOST /connect/token HTTP/1.1\nHost: localhost:5000\n \ngrant_type=password\n&username=testMember@mail.com\n&password=testMemberPass\n&client_id=ro.client\n&client_secret=secret\n```\n\nThis will fetch an access token for this user to make authorized API requests using the HTTP request header `Authorization: Bearer <access_token>`\n\nIf you use a tool such as Postman to test your API, the token can be fetched and stored within the tool itself and appended to all API calls. Check your tool documentation for instructions.\n\n### Run using Docker Compose\n\nYou can run whole application using [docker compose](https://docs.docker.com/compose/) from root folder:\n\n```shell\ndocker-compose up\n```\n\nIt will create following services: <br/>\n\n- MS SQL Server Database\n- Database Migrator\n- Application\n\n### Run Integration Tests in Docker\n\nYou can run all Integration Tests in Docker (exactly the same process is executed on CI) using **RunAllIntegrationTests** NUKE target:\n\n```shell\n.\\build RunAllIntegrationTests\n```\n\n## 6. Contribution\n\nThis project is still under analysis and development. I assume its maintenance for a long time and I would appreciate your contribution to it. Please let me know by creating an Issue or Pull Request.\n\n## 7. Roadmap\n\nList of features/tasks/approaches to add:\n\n| Name                               | Status | Release date |\n|------------------------------------| -------- |--------------|\n| Domain Model Unit Tests            |Completed | 2019-09-10   |\n| Architecture Decision Log update   |  Completed | 2019-11-09   |\n| Integration automated tests        | Completed | 2020-02-24   |\n| Migration to .NET Core 3.1         |Completed  | 2020-03-04   |\n| System Integration Testing         | Completed  | 2020-03-28   |\n| More advanced Payments module      | Completed  | 2020-07-11   |\n| Event Sourcing implementation      | Completed  | 2020-07-11   |\n| Database Change Management         | Completed  | 2020-08-23   |\n| Continuous Integration             | Completed  | 2020-09-01   |\n| StyleCop Static Code Analysis      | Completed  | 2020-09-05   |\n| FrontEnd SPA application           | Completed | 2020-11-08   |\n| Docker support                     | Completed | 2020-11-26   |\n| PlantUML Conceptual Model          | Completed | 2021-03-22   |\n| C4 Model                           | Completed | 2021-03-29   |\n| Meeting comments feature           | Completed | 2021-03-30   |\n| NUKE build automation              | Completed | 2021-06-15   |\n| Database project compilation on CI | Completed | 2021-06-15   |\n| System Under Test implementation   | Completed | 2022-07-17   |\n| Mutation Testing                   | Completed | 2022-08-23   |\n| Migration to .NET 8.0              | Completed | 2023-12-09   |\n\nNOTE: Please don't hesitate to suggest something else or a change to the existing code. All proposals will be considered.\n\n## 8. Authors\n\nKamil Grzybek\n\nBlog: [https://kamilgrzybek.com](https://kamilgrzybek.com)\n\nTwitter: [https://twitter.com/kamgrzybek](https://twitter.com/kamgrzybek)\n\nLinkedIn: [https://www.linkedin.com/in/kamilgrzybek/](https://www.linkedin.com/in/kamilgrzybek/)\n\nGitHub: [https://github.com/kgrzybek](https://github.com/kgrzybek)\n\n### 8.1 Main contributors\n\n- [Andrei Ganichev](https://github.com/AndreiGanichev)\n- [Bela Istok](https://github.com/bistok)\n- [Almar Aubel](https://github.com/AlmarAubel)\n\n## 9. License\n\nThe project is under [MIT license](https://opensource.org/licenses/MIT).\n\n## 10. Inspirations and Recommendations\n\n### Modular Monolith\n\n- [\"Modular Monolith: A Primer\"](https://www.kamilgrzybek.com/design/modular-monolith-primer/) Modular Monolith architecture article series, Kamil Grzybek\n- [\"Modular Monolith Architecture: One to rule them all\"](https://www.youtube.com/watch?v=njDSXUWeik0) presentation, Kamil Grzybek\n- [\"Modular Monoliths\"](https://www.youtube.com/watch?v=5OjqD-ow8GE) presentation, Simon Brown\n- [\"Majestic Modular Monoliths\"](https://www.youtube.com/watch?v=BOvxJaklcr0) presentation, Axel Fontaine\n- [\"Building Better Monoliths – Modulithic Applications with Spring Boot\"](https://speakerdeck.com/olivergierke/building-better-monoliths-modulithic-applications-with-spring-boot-cd16e6ec-d334-497d-b9f6-3f92d5db035a) slides, Oliver Drotbohm\n- [\"MonolithFirst\"](https://martinfowler.com/bliki/MonolithFirst.html) article, Martin Fowler\n- [\"Pattern: Monolithic Architecture\"](https://microservices.io/patterns/monolithic.html) pattern description, Chris Richardson\n\n### Domain-Driven Design\n\n- [\"Domain-Driven Design: Tackling Complexity in the Heart of Software\"](https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215) book, Eric Evans\n- [\"Implementing Domain-Driven Design\"](https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577) book, Vaughn Vernon\n- [\"Domain-Driven Design Distilled\"](https://www.amazon.com/dp/0134434420) book, Vaughn Vernon\n- [\"Patterns, Principles, and Practices of Domain-Driven Design\"](https://www.amazon.com/Patterns-Principles-Practices-Domain-Driven-Design-ebook/dp/B00XLYUA0W) book, Scott Millett, Nick Tune\n- [\"Secure By Design\"](https://www.amazon.com/Secure-Design-Daniel-Deogun/dp/1617294357) book, Daniel Deogun, Dan Bergh Johnsson, Daniel Sawano\n- [\"Hands-On Domain-Driven Design with .NET Core: Tackling complexity in the heart of software by putting DDD principles into practice\"](https://www.amazon.com/Hands-Domain-Driven-Design-NET-ebook/dp/B07C5WSR9B) book, Alexey Zimarev\n- [\"Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F#\"](https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB) book, Scott Wlaschin\n- [\"DDD by examples - library\"](https://github.com/ddd-by-examples/library) GH repository, Jakub Pilimon, Bartłomiej Słota\n- [\"IDDD_Samples\"](https://github.com/VaughnVernon/IDDD_Samples) GH repository, Vaughn Vernon\n- [\"IDDD_Samples_NET\"](https://github.com/VaughnVernon/IDDD_Samples_NET) GH repository, Vaughn Vernon\n- [\"Awesome Domain-Driven Design\"](https://github.com/heynickc/awesome-ddd) GH repository, Nick Chamberlain\n\n### Application Architecture\n\n- [\"Patterns of Enterprise Application Architecture\"](https://martinfowler.com/books/eaa.html) book, Martin Fowler\n- [\"Dependency Injection Principles, Practices, and Patterns\"](https://www.manning.com/books/dependency-injection-principles-practices-patterns) book, Steven van Deursen, Mark Seemann\n- [\"Clean Architecture: A Craftsman's Guide to Software Structure and Design (Robert C. Martin Series\"](https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164) book, Robert C. Martin\n- [\"The Clean Architecture\"](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html) article, Robert C. Martin\n- [\"The Onion Architecture\"](https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/) article series, Jeffrey Palermo\n- [\"Hexagonal/Ports & Adapters Architecture\"](https://web.archive.org/web/20180822100852/http://alistair.cockburn.us/Hexagonal+architecture) article, Alistair Cockburn\n- [\"DDD, Hexagonal, Onion, Clean, CQRS, … How I put it all together\"](https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/) article, Herberto Graca\n\n### Software Architecture\n\n- [\"Software Architecture in Practice (3rd Edition)\"](https://www.amazon.com/Software-Architecture-Practice-3rd-Engineering/dp/0321815734) book, Len Bass, Paul Clements, Rick Kazman\n- [\"Software Architecture for Developers Vol 1 & 2\"](https://softwarearchitecturefordevelopers.com/) book, Simon Brown\n- [\"Just Enough Software Architecture: A Risk-Driven Approach\"](https://www.amazon.com/Just-Enough-Software-Architecture-Risk-Driven/dp/0984618104) book, George H. Fairbanks\n- [\"Software Systems Architecture: Working With Stakeholders Using Viewpoints and Perspectives (2nd Edition)\"](https://www.amazon.com/Software-Systems-Architecture-Stakeholders-Perspectives/dp/032171833X/) book, Nick Rozanski, Eóin Woods\n- [\"Design It!: From Programmer to Software Architect (The Pragmatic Programmers)\"](https://www.amazon.com/Design-Programmer-Architect-Pragmatic-Programmers/dp/1680502093) book, Michael Keeling\n\n### System Architecture\n\n- [\"Enterprise Integration Patterns : Designing, Building, and Deploying Messaging Solutions\"](https://www.enterpriseintegrationpatterns.com/) book and catalogue, Gregor Hohpe, Bobby Woolf\n- [\"Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems \"](https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321) book, Martin Kleppman\n- [\"Building Evolutionary Architectures: Support Constant Change\"](https://www.amazon.com/Building-Evolutionary-Architectures-Support-Constant/dp/1491986360) book, Neal Ford\n- [\"Building Microservices: Designing Fine-Grained Systems\"](https://www.amazon.com/Building-Microservices-Designing-Fine-Grained-Systems/dp/1491950358) book, Sam Newman\n\n### Design\n\n- [\"Refactoring: Improving the Design of Existing Code\"](https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) book, Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts\n- [\"Clean Code: A Handbook of Agile Software Craftsmanship\"](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) book, Robert C. Martin\n- [\"Agile Principles, Patterns, and Practices in C#\"](https://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258) book, Robert C. Martin\n- [\"Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development (3rd Edition)\"](https://www.amazon.com/Applying-UML-Patterns-Introduction-Object-Oriented/dp/0131489062) book, Craig Larman\n- [\"Working Effectively with Legacy Code\"](https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052) book, Michael Feathers\n- [\"Code Complete: A Practical Handbook of Software Construction, Second Edition\"](https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670) book, Steve McConnell\n- [\"Design Patterns: Elements of Reusable Object-Oriented Software\"](https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612) book, Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides\n\n### Craftsmanship\n\n- [\"The Clean Coder: A Code of Conduct for Professional Programmers\"](https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073) book, Robert C. Martin\n- [\"The Pragmatic Programmer: From Journeyman to Master\"](https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X) book, Andrew Hunt\n\n### Testing\n\n- [\"The Art of Unit Testing: with examples in C#\"](https://www.amazon.com/Art-Unit-Testing-examples/dp/1617290890) book, Roy Osherove\n- [\"Unit Test Your Architecture with ArchUnit\"](https://blogs.oracle.com/javamagazine/unit-test-your-architecture-with-archunit) article, Jonas Havers\n- [\"Unit Testing Principles, Practices, and Patterns\"](https://www.amazon.com/Unit-Testing-Principles-Practices-Patterns/dp/1617296279) book, Vladimir Khorikov\n- [\"Growing Object-Oriented Software, Guided by Tests\"](https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627) book, Steve Freeman, Nat Pryce\n- [Automated Tests](https://www.kamilgrzybek.com/blog/series/automated-tests) article series, Kamil Grzybek\n\n### UML\n\n- [\"UML Distilled: A Brief Guide to the Standard Object Modeling Language (3rd Edition)\"](https://www.amazon.com/UML-Distilled-Standard-Modeling-Language/dp/0321193687) book, Martin Fowler\n\n### Event Storming\n\n- [\"Introducing EventStorming\"](https://leanpub.com/introducing_eventstorming) book, Alberto Brandolini\n- [\"Awesome EventStorming\"](https://github.com/mariuszgil/awesome-eventstorming) GH repository, Mariusz Gil\n\n### Event Sourcing\n\n- [\"Hands-On Domain-Driven Design with .NET Core: Tackling complexity in the heart of software by putting DDD principles into practice\"](https://www.amazon.com/Hands-Domain-Driven-Design-NET-ebook/dp/B07C5WSR9B) book, Alexey Zimarev\n- [\"Versioning in an Event Sourced System\"](https://leanpub.com/esversioning) book, Greg Young\n- [Hands-On-Domain-Driven-Design-with-.NET-Core](https://github.com/PacktPublishing/Hands-On-Domain-Driven-Design-with-.NET-Core) GH repository, Alexey Zimarev\n- [EventSourcing.NetCore](https://github.com/oskardudycz/EventSourcing.NetCore) GH repository, Oskar Dudycz\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 0.9619140625,
          "content": "# ASP.NET Core (.NET Framework)\n# Build and test ASP.NET Core projects targeting the full .NET Framework.\n# Add steps that publish symbols, save build artifacts, and more:\n# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core\n\ntrigger:\n- master\n\npool:\n  vmImage: 'windows-latest'\n\nvariables:\n  solution: '**/*.sln'\n  buildPlatform: 'Any CPU'\n  buildConfiguration: 'Release'\n\nsteps:\n- task: NuGetToolInstaller@1\n\n- task: NuGetCommand@2\n  inputs:\n    restoreSolution: '$(solution)'\n\n- task: VSBuild@1\n  inputs:\n    solution: '$(solution)'\n    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation=\"$(build.artifactStagingDirectory)\\WebApp.zip\" /p:DeployIisAppPath=\"Default Web Site\"'\n    platform: '$(buildPlatform)'\n    configuration: '$(buildConfiguration)'\n\n- task: VSTest@2\n  inputs:\n    platform: '$(buildPlatform)'\n    configuration: '$(buildConfiguration)'\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.2021484375,
          "content": ":; set -eo pipefail\n:; SCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n:; ${SCRIPT_DIR}/build.sh \"$@\"\n:; exit $?\n\n@ECHO OFF\npowershell -ExecutionPolicy ByPass -NoProfile -File \"%~dp0build.ps1\" %*\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 2.8623046875,
          "content": "[CmdletBinding()]\nParam(\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$BuildArguments\n)\n\nWrite-Output \"PowerShell $($PSVersionTable.PSEdition) version $($PSVersionTable.PSVersion)\"\n\nSet-StrictMode -Version 2.0; $ErrorActionPreference = \"Stop\"; $ConfirmPreference = \"None\"; trap { Write-Error $_ -ErrorAction Continue; exit 1 }\n$PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\n$BuildProjectFile = \"$PSScriptRoot\\build\\_build.csproj\"\n$TempDirectory = \"$PSScriptRoot\\\\.nuke\\temp\"\n\n$DotNetGlobalFile = \"$PSScriptRoot\\\\global.json\"\n$DotNetInstallUrl = \"https://dot.net/v1/dotnet-install.ps1\"\n$DotNetChannel = \"Current\"\n\n$env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE = 1\n$env:DOTNET_CLI_TELEMETRY_OPTOUT = 1\n$env:DOTNET_MULTILEVEL_LOOKUP = 0\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction ExecSafe([scriptblock] $cmd) {\n    & $cmd\n    if ($LASTEXITCODE) { exit $LASTEXITCODE }\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif ($null -ne (Get-Command \"dotnet\" -ErrorAction SilentlyContinue) -and `\n     $(dotnet --version) -and $LASTEXITCODE -eq 0) {\n    $env:DOTNET_EXE = (Get-Command \"dotnet\").Path\n}\nelse {\n    # Download install script\n    $DotNetInstallFile = \"$TempDirectory\\dotnet-install.ps1\"\n    New-Item -ItemType Directory -Path $TempDirectory -Force | Out-Null\n    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n    (New-Object System.Net.WebClient).DownloadFile($DotNetInstallUrl, $DotNetInstallFile)\n\n    # If global.json exists, load expected version\n    if (Test-Path $DotNetGlobalFile) {\n        $DotNetGlobal = $(Get-Content $DotNetGlobalFile | Out-String | ConvertFrom-Json)\n        if ($DotNetGlobal.PSObject.Properties[\"sdk\"] -and $DotNetGlobal.sdk.PSObject.Properties[\"version\"]) {\n            $DotNetVersion = $DotNetGlobal.sdk.version\n        }\n    }\n\n    # Install by channel or version\n    $DotNetDirectory = \"$TempDirectory\\dotnet-win\"\n    if (!(Test-Path variable:DotNetVersion)) {\n        ExecSafe { & $DotNetInstallFile -InstallDir $DotNetDirectory -Channel $DotNetChannel -NoPath }\n    } else {\n        ExecSafe { & $DotNetInstallFile -InstallDir $DotNetDirectory -Version $DotNetVersion -NoPath }\n    }\n    $env:DOTNET_EXE = \"$DotNetDirectory\\dotnet.exe\"\n}\n\nWrite-Output \"Microsoft (R) .NET SDK version $(& $env:DOTNET_EXE --version)\"\n\nExecSafe { & $env:DOTNET_EXE build $BuildProjectFile /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet }\nExecSafe { & $env:DOTNET_EXE run --project $BuildProjectFile --no-build -- $BuildArguments }\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 2.2265625,
          "content": "#!/usr/bin/env bash\n\nbash --version 2>&1 | head -n 1\n\nset -eo pipefail\nSCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\nBUILD_PROJECT_FILE=\"$SCRIPT_DIR/build/_build.csproj\"\nTEMP_DIRECTORY=\"$SCRIPT_DIR//.nuke/temp\"\n\nDOTNET_GLOBAL_FILE=\"$SCRIPT_DIR//global.json\"\nDOTNET_INSTALL_URL=\"https://dot.net/v1/dotnet-install.sh\"\nDOTNET_CHANNEL=\"Current\"\n\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1\nexport DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1\nexport DOTNET_MULTILEVEL_LOOKUP=0\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction FirstJsonValue {\n    perl -nle 'print $1 if m{\"'\"$1\"'\": \"([^\"]+)\",?}' <<< \"${@:2}\"\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif [ -x \"$(command -v dotnet)\" ] && dotnet --version &>/dev/null; then\n    export DOTNET_EXE=\"$(command -v dotnet)\"\nelse\n    # Download install script\n    DOTNET_INSTALL_FILE=\"$TEMP_DIRECTORY/dotnet-install.sh\"\n    mkdir -p \"$TEMP_DIRECTORY\"\n    curl -Lsfo \"$DOTNET_INSTALL_FILE\" \"$DOTNET_INSTALL_URL\"\n    chmod +x \"$DOTNET_INSTALL_FILE\"\n\n    # If global.json exists, load expected version\n    if [[ -f \"$DOTNET_GLOBAL_FILE\" ]]; then\n        DOTNET_VERSION=$(FirstJsonValue \"version\" \"$(cat \"$DOTNET_GLOBAL_FILE\")\")\n        if [[ \"$DOTNET_VERSION\" == \"\"  ]]; then\n            unset DOTNET_VERSION\n        fi\n    fi\n\n    # Install by channel or version\n    DOTNET_DIRECTORY=\"$TEMP_DIRECTORY/dotnet-unix\"\n    if [[ -z ${DOTNET_VERSION+x} ]]; then\n        \"$DOTNET_INSTALL_FILE\" --install-dir \"$DOTNET_DIRECTORY\" --channel \"$DOTNET_CHANNEL\" --no-path\n    else\n        \"$DOTNET_INSTALL_FILE\" --install-dir \"$DOTNET_DIRECTORY\" --version \"$DOTNET_VERSION\" --no-path\n    fi\n    export DOTNET_EXE=\"$DOTNET_DIRECTORY/dotnet\"\nfi\n\necho \"Microsoft (R) .NET Core SDK version $(\"$DOTNET_EXE\" --version)\"\n\n\"$DOTNET_EXE\" build \"$BUILD_PROJECT_FILE\" /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet\n\"$DOTNET_EXE\" run --project \"$BUILD_PROJECT_FILE\" --no-build -- \"$@\"\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.107421875,
          "content": "version: '3.4'\n\nservices:\n\n  backend:\n    container_name: mymeetings_backend\n    build:\n      context: ./src/\n    ports:\n      - \"5000:8080\"\n    networks:\n      - starfish-crm-network\n    environment:\n      - Meetings_MeetingsConnectionString=Server=mymeetingsdb,1433;Database=MyMeetings;User=sa;Password=Test@12345;Encrypt=False;\n    depends_on:\n      - migrator\n    restart: on-failure\n\n  mymeetingsdb:\n    build: ./src/Database/\n    platform: linux/amd64\n    ports:\n      - 1445:1433\n    networks:\n      - starfish-crm-network\n\n  migrator:\n    container_name: mymeetings_db_migrator\n    build:\n      context: ./src/\n      dockerfile: ./Database/Dockerfile_DatabaseMigrator\n    networks:\n      - starfish-crm-network\n    environment:\n      - ASPNETCORE_MyMeetings_IntegrationTests_ConnectionString=Server=mymeetingsdb,1433;Database=MyMeetings;User=sa;Password=Test@12345;Encrypt=False;\n    command:\n      [\n        \"./wait-for-it.sh\",\n        \"mymeetingsdb:1433\",\n        \"--timeout=60\",\n        \"--\",\n        \"/bin/bash\",\n        \"/entrypoint_DatabaseMigrator.sh\"\n      ]\n    restart: on-failure\n\nnetworks:\n  starfish-crm-network:\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "runIntegrationTests.cmd",
          "type": "blob",
          "size": 1.8818359375,
          "content": "@ECHO OFF\nSETLOCAL\nSET CONTAINER_ID=\nFOR /f %%i IN ('docker ps -q -f name^=myMeetings-integration-db') DO SET CONTAINER_ID=%%i\n\nIF \"%CONTAINER_ID%\"==\"\" (\n    ECHO \"not found\"\n) ELSE (\n\tdocker rm --force myMeetings-integration-db\n)\n\ndocker run --rm --name myMeetings-integration-db -e \"ACCEPT_EULA=Y\" -e \"SA_PASSWORD=61cD4gE6!\" -e \"MSSQL_PID=Express\" -p 1439:1433 -d mcr.microsoft.com/mssql/server:2017-latest-ubuntu\nTIMEOUT 30\ndocker cp ./src/Database/CompanyName.MyMeetings.Database/Scripts/CreateDatabase_Linux.sql myMeetings-integration-db:/\ndocker exec -i myMeetings-integration-db sh -c \"/opt/mssql-tools/bin/sqlcmd -d master -i /CreateDatabase_Linux.sql -U sa -P 61cD4gE6!\"\ndotnet build src/ --configuration Release --no-restore\nSET ASPNETCORE_MyMeetings_IntegrationTests_ConnectionString=Server=localhost,1439;Database=MyMeetings;User=sa;Password=61cD4gE6!\ndotnet \"src/Database/DatabaseMigrator/bin/Release/netcoreapp3.1/DatabaseMigrator.dll\" %ASPNETCORE_MyMeetings_IntegrationTests_ConnectionString% \"src/Database/CompanyName.MyMeetings.Database/Scripts/Migrations\"\ndotnet test --configuration Release --no-build --verbosity normal src/Modules/Administration/Tests/IntegrationTests/CompanyName.MyMeetings.Modules.Administration.IntegrationTests.csproj\ndotnet test --configuration Release --no-build --verbosity normal src/Modules/Payments/Tests/IntegrationTests/CompanyName.MyMeetings.Modules.Payments.IntegrationTests.csproj\ndotnet test --configuration Release --no-build --verbosity normal src/Modules/UserAccess/Tests/IntegrationTests/CompanyNames.MyMeetings.Modules.UserAccess.IntegrationTests.csproj\ndotnet test --configuration Release --no-build --verbosity normal src/Modules/Meetings/Tests/IntegrationTests/CompanyName.MyMeetings.Modules.Meetings.IntegrationTests.csproj\ndotnet test --configuration Release --no-build --verbosity normal src/Tests/IntegrationTests/CompanyName.MyMeetings.IntegrationTests.csproj\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}