{
  "metadata": {
    "timestamp": 1736711236281,
    "page": 37,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "winsw/winsw",
      "stars": 12460,
      "defaultBranch": "v3",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.005859375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Ww][Ii][Nn]32/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*[.json, .xml, .info]\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.8369140625,
          "content": "# Contribute\n\n## Prerequisites\n\n[.NET 5 SDK or later](https://dotnet.microsoft.com/download/dotnet/5.0) and your favorite code editor.\n\n- [Visual Studio 2019 or later](https://visualstudio.microsoft.com/downloads/) with the **.NET desktop development** workload\n- [Visual Studio Code](https://code.visualstudio.com/Download) with the [C# for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp) extension\n\n## Develop in Visual Studio\n\nYou can open *src\\WinSW.sln* and then build and run tests from within Visual Studio.\n\n## Develop with .NET CLI\n\n### Build\n\n```console\ndotnet build src\\WinSW.sln\n```\n\n### Test\n\n```console\ndotnet test src\\WinSW.sln\n```\n\n## See also\n\n[How to: Debug Windows Service Applications](https://docs.microsoft.com/dotnet/framework/windows-services/how-to-debug-windows-service-applications)\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.876953125,
          "content": "ï»¿<Project>\n\n  <PropertyGroup>\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <ILLinkTreatWarningsAsErrors>false</ILLinkTreatWarningsAsErrors>\n    <DebugType>full</DebugType>\n    <ArtifactsDir>$(MSBuildThisFileDirectory)artifacts\\</ArtifactsDir>\n    <ArtifactsBinDir>$(ArtifactsDir)bin\\</ArtifactsBinDir>\n    <ArtifactsObjDir>$(ArtifactsDir)obj\\</ArtifactsObjDir>\n    <ArtifactsPublishDir>$(ArtifactsDir)publish\\</ArtifactsPublishDir>\n    <RunSettingsFilePath>$(MSBuildThisFileDirectory)src\\.runsettings</RunSettingsFilePath>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <BaseOutputPath>$(ArtifactsBinDir)$(MSBuildProjectName)\\</BaseOutputPath>\n    <BaseIntermediateOutputPath>$(ArtifactsObjDir)$(MSBuildProjectName)\\</BaseIntermediateOutputPath>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <AdditionalFiles Include=\"$(MSBuildThisFileDirectory)src\\stylecop.json\" />\n  </ItemGroup>\n\n</Project>\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.130859375,
          "content": "MIT License\n\nCopyright (c) 2008-2020 Kohsuke Kawaguchi, Sun Microsystems, Inc., CloudBees, Inc., Oleg Nenashev and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.md",
          "type": "blob",
          "size": 1.4091796875,
          "content": "# Project manifest\n\nHere is a cite from [Kohsuke Kawaguchi](https://github.com/kohsuke/), who is the original author of this project:\n\n> Now, I think the first question that people would ask is, why another, when there's [Java Service Wrapper project](http://wrapper.tanukisoftware.org/doc/english/download.jsp) already available.\n> The main reason for writing my own was the license â Java Service Wrapper project is in GPL (so that they can sell their commercial version in a different license), and that made it difficult for [Jenkins](http://jenkins-ci.org/) (which is under the MIT license) to use it.\n>\n> Functionality-wise, there's really not much that's worth noting; the problem of wrapping a process as a Windows service is so well defined that there aren't really any room for substantial innovation.\n> You basically write a configuration file specifying how you'd like your process to be launched, and we provide programmatic means to install/uninstall/start/stop services.\n> Another notable difference is that winsw can host any executable, whereas Java Service Wrapper can only host Java apps.\n> Whether you like this or not depends on your taste, so I wouldn't claim mine is better.\n> It's just different.\n>\n> As the name implies, this is for Windows only.\n> Unix systems have their own conventions for daemons, so a good behaving Unix daemon should just be using `launchd/upstart/SMF/etc`, instead of custom service wrapper.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5771484375,
          "content": "# Windows Service Wrapper in a permissive license\n\n[![Github All Releases](https://img.shields.io/github/downloads/winsw/winsw/total?style=flat-square)](https://github.com/winsw/winsw/releases)\n[![GitHub Release](https://img.shields.io/github/v/release/winsw/winsw?include_prereleases&sort=semver&style=flat-square)](https://github.com/winsw/winsw/releases)\n[![NuGet](https://img.shields.io/nuget/v/WinSW?style=flat-square)](https://www.nuget.org/packages/WinSW/)\n[![Build Status](https://img.shields.io/azure-devops/build/winsw/aabe43dd-6f6d-4660-b5dd-5b79e1e2ef4e/1?style=flat-square)](https://dev.azure.com/winsw/winsw/_build?definitionId=1&_a=summary)\n[![Deployment Status](https://img.shields.io/azure-devops/release/winsw/aabe43dd-6f6d-4660-b5dd-5b79e1e2ef4e/1/1?style=flat-square)](https://dev.azure.com/winsw/winsw/_release?_a=releases&view=mine&definitionId=1)\n[![Gitter](https://img.shields.io/gitter/room/winsw/winsw?style=flat-square)](https://gitter.im/winsw/winsw?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![License](https://img.shields.io/github/license/winsw/winsw?style=flat-square)](LICENSE.txt)\n\nWinSW wraps and manages any application as a Windows service.\n\n**We are actively developing WinSW 3. Please refer to the [v2](https://github.com/winsw/winsw/tree/master) branch for previous version documentation.**\n\n## Why?\n\nSee the [project manifest](MANIFEST.md).\n\n## Supported platforms\n\nWinSW 3 can run on Windows platforms with .NET Framework 4.6.1 or later versions installed.\nFor systems without .NET Framework, the project provides native 64-bit and 32-bit executables based on .NET 7.\n\nMore executables can be added upon request.\n\n[.NET Framework system requirements](https://docs.microsoft.com/dotnet/framework/get-started/system-requirements)\\\nPreinstalled since Windows 10, version 1511 and Windows Server 2016.\\\nInstallable since Windows 7 SP1 and Windows Server 2008 R2 SP1.\n\n[.NET 7 system requirements](https://github.com/dotnet/core/blob/main/release-notes/7.0/supported-os.md)\\\nSupported since Windows 10, version 1607, Windows Server (Core) 2012 R2 and Nano Server, version 1809.\n\n## Download\n\nLatest release and pre-release WinSW binaries are available on [GitHub Releases](https://github.com/winsw/winsw/releases).\n\nAlternative sources:\n\n* CI builds are available on [Azure Pipelines](https://dev.azure.com/winsw/winsw/_build?definitionId=1).\n* [NuGet](https://www.nuget.org/packages/WinSW/). (2.x)\n* [Maven packaging](https://github.com/jenkinsci/winsw-maven-packaging) for executables, hosted by the [Jenkins project](https://jenkins.io/).\nBinaries are available [here](https://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/). (2.x)\n\n## Get started\n\n### Use WinSW as a global tool\n\n1. Take *WinSW.exe* or *WinSW.zip* from the distribution.\n1. Write *myapp.xml* (see the [XML config file specification](docs/xml-config-file.md) and [samples](samples) for more details).\n1. Run [`winsw install myapp.xml [options]`](docs/cli-commands.md#install-command) to install the service.\n1. Run [`winsw start myapp.xml`](docs/cli-commands.md#start-command) to start the service.\n1. Run [`winsw status myapp.xml`](docs/cli-commands.md#status-command) to see if your service is up and running.\n\n### Use WinSW as a bundled tool\n\n1. Take *WinSW.exe* or *WinSW.zip* from the distribution, and rename the *.exe* to your taste (such as *myapp.exe*).\n1. Write *myapp.xml* (see the [XML config file specification](docs/xml-config-file.md) and [samples](samples) for more details).\n1. Place those two files side by side, because that's how WinSW discovers its co-related configuration.\n1. Run [`myapp.exe install [options]`](docs/cli-commands.md#install-command) to install the service.\n1. Run [`myapp.exe start`](docs/cli-commands.md#start-command) to start the service.\n\n### Sample configuration file\n\nYou write the configuration file that defines your service.\nThe example below is a primitive example being used in the Jenkins project:\n\n```xml\n<service>\n  <id>jenkins</id>\n  <name>Jenkins</name>\n  <description>This service runs Jenkins continuous integration system.</description>\n  <env name=\"JENKINS_HOME\" value=\"%BASE%\"/>\n  <executable>java</executable>\n  <arguments>-Xrs -Xmx256m -jar \"%BASE%\\jenkins.war\" --httpPort=8080</arguments>\n  <log mode=\"roll\"></log>\n</service>\n```\n\nThe full specification of the configuration file is available [here](docs/xml-config-file.md).\nYou can find more samples [here](samples).\n\n## Usage\n\nWinSW is being managed by the [XML configuration file](docs/xml-config-file.md).\n\nYour renamed *WinSW.exe* binary also accepts the following commands:\n\n| Command                                             | Description |\n| -------                                             | ----------- |\n| [install](docs/cli-commands.md#install-command)     | Installs the service. |\n| [uninstall](docs/cli-commands.md#uninstall-command) | Uninstalls the service. |\n| [start](docs/cli-commands.md#start-command)         | Starts the service. |\n| [stop](docs/cli-commands.md#stop-command)           | Stops the service. |\n| [restart](docs/cli-commands.md#restart-command)     | Stops and then starts the service. |\n| [status](docs/cli-commands.md#status-command)       | Checks the status of the service. |\n| [refresh](docs/cli-commands.md#refresh-command)     | Refreshes the service properties without reinstallation. |\n| [customize](docs/cli-commands.md#customize-command) | Customizes the wrapper executable. |\n| dev                                                 | Experimental commands. |\n\nExperimental commands:\n\n| Command                                           | Description |\n| -------                                           | ----------- |\n| [dev ps](docs/cli-commands.md#dev-ps-command)     | Draws the process tree associated with the service. |\n| [dev kill](docs/cli-commands.md#dev-kill-command) | Terminates the service if it has stopped responding. |\n| [dev list](docs/cli-commands.md#dev-list-command) | Lists services managed by the current executable. |\n\nMost commands require Administrator privileges to execute. WinSW will prompt for UAC in non-elevated sessions.\n\n## Documentation\n\n* [Migrate to WinSW 3.x](docs/migrate-to-3-x.md)\n* Configuration:\n  * [XML configuration file](docs/xml-config-file.md)\n  * [Logging and error reporting](docs/logging-and-error-reporting.md)\n  * [Extensions](docs/extensions/extensions.md)\n* Use cases:\n  * [Self-restarting services](docs/self-restarting-service.md)\n  * [Deferred file operations](docs/deferred-file-operations.md)\n\n## Contributing\n\nContributions are welcome!\nSee the [contributing guidelines](CONTRIBUTING.md) for more information.\n\n## License\n\nWinSW is licensed under the [MIT](LICENSE.txt) license.\n"
        },
        {
          "name": "WinSW.nuspec",
          "type": "blob",
          "size": 1.8671875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\n  <metadata>\n    <id>WinSW</id>\n    <version>$version$</version>\n    <title>Windows Service Wrapper</title>\n    <summary>WinSW is a binary, which can be used to wrap and manage custom executables as Windows services.</summary>\n    <description>\nWindows Service Wrapper (WinSW) is a binary, which can be used to wrap and manage custom executables as Windows services. The project has a MIT License, hence it can be used just as a binary even in commercial systems. Currently the distributable includes binaries targeting .NET Frameworks 2.0 and 4.0.\n    \nWinSW provides a CL for installation and management of Windows services. It also offers many advanced options, which can be configured via additional XML file. Several examples: logging of spawned executables with log rotation, automated update of files from URL, runaway process termination, shared directory mapping on startup, etc.\n    \nMore info about the wrapper is available in the projects GitHub repository.\n    </description>\n    <authors>WinSW contributors</authors>\n    <owners>Oleg Nenashev, Kohsuke Kawaguchi</owners>\n    <license type=\"expression\">MIT</license>\n    <projectUrl>https://github.com/winsw/winsw</projectUrl>\n    <!--<iconUrl>TODO</iconUrl>-->\n    <copyright>Copyright (c) 2008-2020 Kohsuke Kawaguchi, Sun Microsystems, Inc., CloudBees, Inc., Oleg Nenashev and other contributors</copyright>\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    <tags>service wrapper</tags>\n    <dependencies>\n      <!-- No explicit dependencies, everything is bundled via ILMerge -->\n    </dependencies>\n  </metadata>\n  <files>\n    <file src=\"artifacts\\publish\\WinSW-net461.exe\" target=\"lib\\net461\\WinSW-net461.exe\" />\n    <file src=\"samples\\complete.xml\" target=\"lib\\net461\\WinSW-net461.xml\" />\n  </files>\n</package>\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eng",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}