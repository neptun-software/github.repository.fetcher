{
  "metadata": {
    "timestamp": 1736711235601,
    "page": 35,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Jackett/Jackett",
      "stars": 12736,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 13.763671875,
          "content": "root=true\n# To learn more about .editorconfig see https://aka.ms/editorconfigdocs\n# With more recent updates Visual Studio 2017 supports EditorConfig files out of the box\n# Visual Studio Code needs an extension: https://github.com/editorconfig/editorconfig-vscode\n# For emacs, vim, np++ and other editors, see here: https://github.com/editorconfig\n###############################\n# Core EditorConfig Options   #\n###############################\n# All files\n[*]\nindent_style=space\ninsert_final_newline=true\ncharset=utf-8\nend_of_line=lf\ntrim_trailing_whitespace=true\n\n# Microsoft .NET properties\ncsharp_new_line_before_members_in_object_initializers=true\ncsharp_space_after_cast=false\ncsharp_style_var_elsewhere=true:suggestion\ncsharp_style_var_for_built_in_types=true:suggestion\ncsharp_style_var_when_type_is_apparent=true:suggestion\ndotnet_style_parentheses_in_arithmetic_binary_operators=never_if_unnecessary:none\ndotnet_style_parentheses_in_other_binary_operators=never_if_unnecessary:none\ndotnet_style_parentheses_in_relational_binary_operators=never_if_unnecessary:none\n\n# ReSharper properties\nresharper_align_linq_query=true\nresharper_align_multiline_argument=true\nresharper_align_multiline_calls_chain=true\nresharper_align_multiline_extends_list=true\nresharper_align_multiline_for_stmt=true\nresharper_align_tuple_components=true\nresharper_csharp_alignment_tab_fill_style=optimal_fill\nresharper_csharp_align_multiline_parameter=true\nresharper_csharp_align_multiple_declaration=true\nresharper_csharp_indent_pars=outside\nresharper_csharp_keep_blank_lines_in_code=0\nresharper_csharp_keep_blank_lines_in_declarations=1\nresharper_csharp_max_line_length=125\nresharper_csharp_stick_comment=false\nresharper_csharp_wrap_after_invocation_lpar=true\nresharper_force_attribute_style=separate\nresharper_indent_invocation_pars=outside\nresharper_indent_method_decl_pars=outside\nresharper_indent_preprocessor_region=no_indent\nresharper_indent_statement_pars=outside\nresharper_indent_typearg_angles=outside\nresharper_indent_typeparam_angles=outside\nresharper_keep_existing_embedded_arrangement=false\nresharper_keep_existing_expr_member_arrangement=false\nresharper_keep_existing_invocation_parens_arrangement=false\nresharper_keep_existing_linebreaks=false\nresharper_keep_existing_switch_expression_arrangement=false\nresharper_place_attribute_on_same_line=false\nresharper_place_expr_accessor_on_single_line=true\nresharper_place_expr_method_on_single_line=true\nresharper_place_expr_property_on_single_line=true\nresharper_place_simple_embedded_statement_on_same_line=false\nresharper_space_within_empty_braces=false\nresharper_wrap_array_initializer_style=chop_always\nresharper_wrap_before_extends_colon=true\nresharper_wrap_before_type_parameter_langle=true\nresharper_wrap_multiple_type_parameter_constraints_style=wrap_if_long\nresharper_wrap_object_and_collection_initializer_style=chop_always\n\n# ReSharper inspection severities\nresharper_arrange_attributes_highlighting=suggestion\nresharper_arrange_redundant_parentheses_highlighting=suggestion\nresharper_enforce_if_statement_braces_highlighting=suggestion\n\n# Xml project files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size=2\n\n# JavaScript/HTML\n[*.{js,ts,json,html,cshtml}]\nindent_size=4\n\n# Code files\n[*.{cs,csx,vb,vbx}]\nindent_size=4\n\n###############################\n# .NET Coding Conventions     #\n###############################\n[*.{cs,vb}]\n# Organize usings\ndotnet_sort_system_directives_first=true\n# this. preferences\ndotnet_style_qualification_for_field=false:suggestion\ndotnet_style_qualification_for_property=false:suggestion\ndotnet_style_qualification_for_method=false:suggestion\ndotnet_style_qualification_for_event=false:suggestion\n# Language keywords vs BCL types preferences\ndotnet_style_predefined_type_for_locals_parameters_members=true:warning\ndotnet_style_predefined_type_for_member_access=true:suggestion\n# Parentheses preferences\ndotnet_style_parentheses_in_arithmetic_binary_operators=always_for_clarity:silent\ndotnet_style_parentheses_in_relational_binary_operators=always_for_clarity:silent\ndotnet_style_parentheses_in_other_binary_operators=always_for_clarity:silent\ndotnet_style_parentheses_in_other_operators=never_if_unnecessary:silent\n# Modifier preferences\ndotnet_style_require_accessibility_modifiers=for_non_interface_members:silent\ndotnet_style_readonly_field=true:suggestion\n\n# Expression-level preferences\ndotnet_style_object_initializer=true:warning\ndotnet_style_collection_initializer=true:warning\ndotnet_style_explicit_tuple_names=true:suggestion\ndotnet_style_null_propagation=true:suggestion\ndotnet_style_coalesce_expression=true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method=true:suggestion\ndotnet_style_prefer_inferred_tuple_names=true:suggestion\ndotnet_style_prefer_inferred_anonymous_type_member_names=true:suggestion\ndotnet_style_prefer_auto_properties=true:suggestion\ndotnet_style_prefer_conditional_expression_over_assignment=true:suggestion\ndotnet_style_prefer_conditional_expression_over_return=true:suggestion\ndotnet_style_prefer_compound_assignment=true:suggestion\n\n###############################\n# Naming Conventions          #\n###############################\n# Style Definitions\ndotnet_naming_style.pascal_case_style.capitalization=pascal_case\n# Use PascalCase for constant fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity=warning\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols=constant_fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style=pascal_case_style\ndotnet_naming_symbols.constant_fields.applicable_kinds=field\ndotnet_naming_symbols.constant_fields.applicable_accessibilities=*\ndotnet_naming_symbols.constant_fields.required_modifiers=const\n\n# Naming rules\n\ndotnet_naming_rule.interface_should_be_begins_with_i.severity = warning\ndotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface\ndotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i\n\ndotnet_naming_rule.types_should_be_pascal_case.severity = warning\ndotnet_naming_rule.types_should_be_pascal_case.symbols = types\ndotnet_naming_rule.types_should_be_pascal_case.style = pascal_case\n\ndotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning\ndotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members\ndotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case\n\ndotnet_naming_rule.private_or_internal_static_field_should_be_private_or_internal_static_with_prefix.severity = warning\ndotnet_naming_rule.private_or_internal_static_field_should_be_private_or_internal_static_with_prefix.symbols = private_or_internal_static_field\ndotnet_naming_rule.private_or_internal_static_field_should_be_private_or_internal_static_with_prefix.style = private_or_internal_static_with_prefix\n\ndotnet_naming_rule.private_or_internal_field_should_be_private_prefix.severity = warning\ndotnet_naming_rule.private_or_internal_field_should_be_private_prefix.symbols = private_or_internal_field\ndotnet_naming_rule.private_or_internal_field_should_be_private_prefix.style = private_prefix\n\ndotnet_naming_rule.asyncmethods_should_be_ends_with_async.severity = warning\ndotnet_naming_rule.asyncmethods_should_be_ends_with_async.symbols = asyncmethods\ndotnet_naming_rule.asyncmethods_should_be_ends_with_async.style = ends_with_async\n\n# Symbol specifications\n\ndotnet_naming_symbols.interface.applicable_kinds = interface\ndotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.interface.required_modifiers =\n\ndotnet_naming_symbols.private_or_internal_field.applicable_kinds = field\ndotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private, private_protected\ndotnet_naming_symbols.private_or_internal_field.required_modifiers =\n\ndotnet_naming_symbols.private_or_internal_static_field.applicable_kinds = field\ndotnet_naming_symbols.private_or_internal_static_field.applicable_accessibilities = internal, private, private_protected\ndotnet_naming_symbols.private_or_internal_static_field.required_modifiers = static\n\ndotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum\ndotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.types.required_modifiers =\n\ndotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method\ndotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.non_field_members.required_modifiers =\n\ndotnet_naming_symbols.asyncmethods.applicable_kinds = delegate, method, local_function\ndotnet_naming_symbols.asyncmethods.applicable_accessibilities = *\ndotnet_naming_symbols.asyncmethods.required_modifiers = async\n\n# Naming styles\n\ndotnet_naming_style.pascal_case.required_prefix =\ndotnet_naming_style.pascal_case.required_suffix =\ndotnet_naming_style.pascal_case.word_separator =\ndotnet_naming_style.pascal_case.capitalization = pascal_case\n\ndotnet_naming_style.begins_with_i.required_prefix = I\ndotnet_naming_style.begins_with_i.required_suffix =\ndotnet_naming_style.begins_with_i.word_separator =\ndotnet_naming_style.begins_with_i.capitalization = pascal_case\n\ndotnet_naming_style.private_or_internal_static_with_prefix.required_prefix = _\ndotnet_naming_style.private_or_internal_static_with_prefix.required_suffix =\ndotnet_naming_style.private_or_internal_static_with_prefix.word_separator =\ndotnet_naming_style.private_or_internal_static_with_prefix.capitalization = pascal_case\n\ndotnet_naming_style.private_prefix.required_prefix = _\ndotnet_naming_style.private_prefix.required_suffix =\ndotnet_naming_style.private_prefix.word_separator =\ndotnet_naming_style.private_prefix.capitalization = camel_case\n\ndotnet_naming_style.ends_with_async.required_prefix =\ndotnet_naming_style.ends_with_async.required_suffix = Async\ndotnet_naming_style.ends_with_async.word_separator =\ndotnet_naming_style.ends_with_async.capitalization = pascal_case\n\n###############################\n# C# Coding Conventions       #\n###############################\n[*.cs]\n# var preferences\ncsharp_style_var_for_built_in_types=true:suggestion\ncsharp_style_var_when_type_is_apparent=true:suggestion\ncsharp_style_var_elsewhere=true:suggestion\n# Expression-bodied members\ncsharp_style_expression_bodied_methods=when_on_single_line:suggestion\ncsharp_style_expression_bodied_constructors=false:suggestion\ncsharp_style_expression_bodied_operators=when_on_single_line:suggestion\ncsharp_style_expression_bodied_properties=true:suggestion\ncsharp_style_expression_bodied_indexers=true:suggestion\ncsharp_style_expression_bodied_accessors=true:suggestion\ncsharp_style_expression_bodied_lambdas=true:suggestion\ncsharp_style_expression_bodied_local_functions=true:suggestion\n\n# Pattern matching preferences\ncsharp_style_pattern_matching_over_is_with_cast_check=true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check=true:suggestion\n# Null-checking preferences\ncsharp_style_throw_expression=true:warning\ncsharp_style_conditional_delegate_call=true:warning\n# Modifier preferences\ncsharp_preferred_modifier_order=public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion\n# Expression-level preferences\ncsharp_prefer_braces=true:suggestion\ncsharp_style_deconstructed_variable_declaration=true:suggestion\ncsharp_prefer_simple_default_expression=true:warning\ncsharp_style_pattern_local_over_anonymous_function=true:suggestion\ncsharp_style_inlined_variable_declaration=true:suggestion\n# Prefer C# 8.0 Indexing Features\ncsharp_style_prefer_index_operator=true:suggestion\ncsharp_style_prefer_range_operator=true:suggestion\n\ncsharp_style_deconstructed_variable_declaration=true:suggestion\ncsharp_style_pattern_local_over_anonymous_function=true:suggestion\ncsharp_using_directive_placement=outside_namespace:suggestion\ncsharp_prefer_static_local_function=true:suggestion\ncsharp_prefer_simple_using_statement=true:suggestion\ncsharp_style_prefer_switch_expression=true:suggestion\n\n###############################\n# C# Formatting Rules         #\n###############################\n# New line preferences\ncsharp_new_line_before_open_brace=all\ncsharp_new_line_before_else=true\ncsharp_new_line_before_catch=true\ncsharp_new_line_before_finally=true\ncsharp_new_line_before_members_in_object_initializers=true\ncsharp_new_line_before_members_in_anonymous_types=true\ncsharp_new_line_between_query_expression_clauses=true\n# Indentation preferences\ncsharp_indent_case_contents=true\ncsharp_indent_switch_labels=true\ncsharp_indent_labels=flush_left\ncsharp_indent_block_contents=true\ncsharp_indent_braces=false\ncsharp_indent_case_contents_when_block=true\n# Space preferences\ncsharp_space_after_cast=false\ncsharp_space_after_keywords_in_control_flow_statements=true\ncsharp_space_between_method_call_parameter_list_parentheses=false\ncsharp_space_between_method_declaration_parameter_list_parentheses=false\ncsharp_space_between_parentheses=false\ncsharp_space_before_colon_in_inheritance_clause=true\ncsharp_space_after_colon_in_inheritance_clause=true\ncsharp_space_around_binary_operators=before_and_after\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses=false\ncsharp_space_between_method_call_name_and_opening_parenthesis=false\ncsharp_space_between_method_call_empty_parameter_list_parentheses=false\n# Wrapping preferences\ncsharp_preserve_single_line_statements=false\ncsharp_preserve_single_line_blocks=true\n\n###############################\n# VB Coding Conventions       #\n###############################\n[*.vb]\n# Modifier preferences\nvisual_basic_preferred_modifier_order=Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:suggestion\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.26953125,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n* text eol=lf\n\n# Denote all files that are truly binary and should not be modified.\n*.eot binary\n*.ico binary\n*.jpg binary\n*.otf binary\n*.png binary\n*.ttf binary\n*.woff binary\n*.woff2 binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.91015625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studo 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n*.[Cc]ache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\nbower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n/tools\n*.DS_Store\n.idea/\nlaunchSettings.json\n\n# JetBrains Rider\n/src/.run\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.9736328125,
          "content": "# Contributing to Jackett\n\nSo, you've decided you want to help make Jackett a better program for everyone. Not everyone chooses to help, so we thank you for your decision.\nIn order to help us make the most of your contribution please take the time to read these contributing guidelines.\nThese are just guidelines, not hard rules. Use your best judgement, and feel free to propose changes to this document in a pull request.\n\n## Ways you can help\n\n- [Getting Started](#getting-started)\n  - [Troubleshooting](#troubleshooting)\n  - [Reporting a bug](#reporting-a-bug)\n  - [Adding a new tracker](#adding-a-new-tracker)\n- [Contributing Code](#contributing-code)\n  - [Setting up your environment](#setting-up-your-environment)\n  - [Coding style](#coding-style)\n  - [Getting your code accepted & pull requests](#pull-requests)\n\n# Getting Started\n\nNow that you've decided you want to help us make Jackett a better program the big question is: Where do you start?\nWhy right here of course. You can help in several ways, from finding and reporting bugs, to adding new trackers,\nto fixing bugs in the program code itself. Below, we outline the steps needed to file your first bug report.\n\n## Troubleshooting\n\nBefore you submit a bug report, it's important to make sure it's not already a known issue,\nand to make sure it's a bug we can find and fix quickly.\nThese troubleshooting tips will help make sure your bug report is high quality and can be fixed quickly.\n\n**Update your Jackett to the latest version**\n\nBefore you submit a bug-report or do any other troubleshooting, make sure your Jackett is the latest release version.\nWe are releasing bug fixes almost daily, so your issue may have been fixed already.\nBugs that are submitted without being on the latest version may be closed.\n\n**Tracker isn't working**\n\nIf you are experiencing an issue with a tracker, then:\n- Use your browser to check if you can access the site directly, and if a login is required,\n    check that you can login and that you do not have any outstanding account issues.\n- If you haven't already, try upgrading to the latest version of Jackett.\n- Check our [Troubleshooting wiki](https://github.com/Jackett/Jackett/wiki/Troubleshooting) for common issues.\n- If it is still not working for you, then a **full enhanced log must be included**.\n\n**Enable enhanced logging**\n\n-   You can get *enhanced* logging with the command line switches `-t -l` or by enabling `Enhanced logging` via the web interface\n    (followed by clicking on the `Apply Server Settings` button).\n-   These enhanced logs are necessary for us to quickly track down your bug and get a fix implemented in code.\n-   Make sure you remove your username/password/cookies from the log files before submitting them with your issue.\n-   The logfiles (log.txt/updater.txt) are stored on Windows in `%ProgramData%\\Jackett`, on Linux/macOS in `~/.config/Jackett/`,\n     and on FreeBSD in `/usr/local/jackett`.\n\n## Reporting a Bug\n\nOnce you have your enhanced logs and you are still unable to resolve your issue yourself, now it's time to prepare to submit a bug report!\nBefore you submit your report, make sure you've searched open *and* closed bugs to see if someone's already informed us of your issue.\n\nIf your search doesn't help you fix your issue and you can't find a similar bug already listed, then you get to make a new issue.\nYour issue should have the following information.\n\n- **Descriptive Title** - The title of your bug should include keywords and a descriptive summary of what you're experiencing\n    to help others avoid duplicating your bug report\n  - Keywords in the title should be as follows:\n    - Indexer bugs should start with the indexer ID in brackets e.g. **[thepiratebay]**\n    - Feature requests should start with **[req]**\n    - Indexers requests should start with **[req]** and the name of the tracker e.g. **[req] ThePirateBay**\n- **Environment Details** - These are things like your OS version, Jackett type and version, mono/.Net-core/framework version(s).\n    These are asked for by the issue template when you create a new issue on GitHub.\n- **Steps** to cause the problem, if applicable. These should be specific and repeatable.\n- **What happens** when you take the steps and **what you expected to happen**\n- **Error messages** and/or screenshots of the issue.\n- The **last working version** if it's applicable. Tracker issues normally don't need this information.\n- An attached copy of your **enhanced logs**. Don't forget to remove usernames/passwords/API-keys from the logs.\n    We'll be working on making sure these are automatically censored in the future.\n- Any other **relevant details** you can think of. The more information we have, the quicker we can solve the problem.\n\n## Adding a New Tracker\n\nJackett's framework typically allows our team and volunteering developers to implement new trackers in a couple of hours\n\nDepending on logic complexity, there are two common ways new trackers are implemented:\n\n1. simple [definitions](http://github.com/Jackett/Jackett/tree/master/src/Jackett.Common/Definitions) (.yml / YAML)\n2. advanced (native) [indexers](http://github.com/Jackett/Jackett/tree/master/src/Jackett.Common/Indexers) (.cs / C#)\n\nRead more about the [simple definition format](https://github.com/Jackett/Jackett/wiki/Definition-format).\n\n# Contributing Code\n\nWhile reporting the bugs is super helpful since you can't fix bugs you don't know about, they don't get fixed unless someone goes in and fixes them.\nLuckily, you're a developer who wants to help us do just that. Thanks!\nWe really need more developers working on Jackett, no matter their skill level or walk of life.\nWe've developed the guide below to make sure we're all on the same page because this makes reading and fixing code much simpler, faster, and less bug-prone.\n\n## Setting up your environment\n\nThe following guide assumes you've never worked with a Visual Studio project with GitHub before.\nThis will give you the minimum necessary tools to get started. There are plenty of optional tools that may help you, but we won't cover those here.\n\n- The guide is currently only geared towards developing on Windows using Visual Studio Community 2022.\nIf you use something else, please add it here for others.\n\n<details open=true> <summary> Windows </summary>\n\n<details open=true> <summary> Visual Studio 2022 </summary>\n\n- Install [Visual Studio Community 2022](https://visualstudio.microsoft.com/vs/) for free.\n  - About 2GB download, 8GB installed.\n  -  Make sure it includes the following Workload and Individual Components:\n     -  .NET desktop development\n     -  .Net Framework 4.6.2 SDK\n     -  .Net Framework 4.6.2 targeting pack\n- From the `Get Started` screen:\n  - `Clone a repository -> Browse a repository -> GitHub -> Sign in -> clone your forked repository`\n- Double-click `Jackett.sln` in `Solution Explorer` to load your project\n- Ensure `Jackett.Server` is the Startup Project and the Run Target (instead of `Jackett.Service`)\n- Open `Tools -> NuGet Package Manager -> Package Manager Console`\n- From the PMC, with `Jackett.Service` as the default project, run:\n  - `dotnet tool install -g dotnet-format`\n  - `dotnet msbuild /restore`\n  - `dotnet restore`\n  - `dotnet build`\n- [For more information on working with your forked GitHub repository in Visual Studio](https://doc.fireflymigration.com/working-with-github-fork-in-visual-studio.html)\n  - UPDATE: changes are now made in `Git Changes` and `Git Repository` (instead of `Team Explorer`)\n\n</details>\n\n</details>\n\n## Coding Style\n\nNow that you're ready to code, it's time to teach you our style guidelines. This style guide helps our code stay readable and bug-free.\nYou can see the full details in the [Editor Config](.editorconfig) file.\nRunning `dotnet format` from the Package Manager Console will apply the style guide to the solution and is required before any pull request will be accepted.\n\n- Whitespace\n  - Indenting is done with 4 spaces\n  - No whitespace at the end of lines\n  - All files have a final newline\n  - Unix style new lines for committed code\n  - Spaces around all non-unary operators\n\n- Braces\n  - Opening brace on its own line\n  - Single line statements do not use braces\n  - If any part of an `if ... else if ... else` block needs braces, all blocks will use braces\n\n- Naming\n  - `interface` names begin with I and are `PascalCase`\n  - `private` variables begin with _ and are `camelCase`\n  - `private static` variables begin with s_ and are `camelCase`\n  - local variables are `camelCase`\n  - `async` function names end with Async\n  - all others are `PascalCase`\n\n- Others\n  - Prefer `var` for declarations\n  - Prefer modern language enhancements (C#7, C#8 features)\n    - switch expressions\n    - range operator\n    - using statements\n    - `default` over `default(T)`\n  - Prefer conditional access `?.` and null coalescing `??` over null checks\n  - Prefer pattern matching\n  - Prefer expression bodies\n  - Avoid `this` qualifier\n  - `using` statements go outside namespace declaration and are sorted:\n    - `using System`\n    - `using System.*` alphabetically\n    - all others alphabetically\n  - Prefer explicit variable modifiers: `private`, `public`, `protected`\n  - Prefer `readonly` and `const` variables when appropriate\n\n## Pull Requests\n\nAt this point, you've found the bug, fixed it, tested that the bug is gone, and you haven't broken anything else in the process.\nNow it's time to share your code with everyone else so we can all enjoy a better version of the program.\nHere's what you need to do to give your pull request the best chance at a timely review and maximize that it will be accepted.\n\n- Make sure your code follows GitHub and Jackett's standards and practices.\n  - Your changes should be made in a new branch based on `master` not directly on your `master` branch\n  - Your commit messages should start with a capital letter, be in the singular imperative voice, and do not end with punctuation marks, e.g.:\n    - Fix login handling for xxx tracker\n    - Add feature yyy\n    - Remove dead tracker fff\n  - Run `dotnet format` from the Package Manager Console (found in `Tools -> NuGet Package Manager` or `View -> Other Windows`)\n  - If your branch falls out of sync and has merge conflicts with the Jackett official `master`\n    [rebase](https://mohitgoyal.co/2018/04/18/working-with-git-and-visual-studio-use-git-rebase-inside-visual-studio/) your fix before submission.\n  - If you deleted, moved, or renamed any files/folders, be sure to add the old file/folder path to the appropriate array in `Jacket.Updater/Program.cs`\n  - If you added or renamed a tracker, update the README to include the new name\n  - [Squash your local commits](https://github.com/spottedmahn/my-blog/issues/26)\n\n- Push your commit branch to your fork on GitHub.\n- Create your Pull Request\n  - You can do this from the GitHub website or from the GitHub window in Visual Studio.\n  - Give your Pull Request a descriptive title\n    - Include keywords like `[New Tracker]` or `[Feature]` at the beginning of the title\n  - Include any open tickets this Pull Request should fix in the description. **Do not** put ticket numbers in the title.\n\nWe will be by when we can to review your Pull Request.\n"
        },
        {
          "name": "Installer.iss",
          "type": "blob",
          "size": 3.3828125,
          "content": "; Script generated by the Inno Setup Script Wizard.\n; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!\n\n#define MyAppName \"Jackett\"\n; #define MyAppVersion GetFileVersion(MyFileForVersion) (passed as a parameter)\n#define MyAppPublisher \"Jackett\"\n#define MyAppURL \"https://github.com/Jackett/Jackett\"\n#define MyAppExeName \"JackettTray.exe\"\n\n[Setup]\n; NOTE: The value of AppId uniquely identifies this application.\n; Do not use the same AppId value in installers for other applications.\n; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)\nAppId={{C2A9FC00-AA48-4F17-9A72-62FBCEE2785B}\nAppName={#MyAppName}\nAppVersion={#MyAppVersion}\n;AppVerName={#MyAppName} {#MyAppVersion}\nAppPublisher={#MyAppPublisher}\nAppPublisherURL={#MyAppURL}\nAppSupportURL={#MyAppURL}\nAppUpdatesURL={#MyAppURL}\nDefaultDirName={commonappdata}\\{#MyAppName}\nDefaultGroupName={#MyAppName}\nDisableProgramGroupPage=yes\nOutputBaseFilename={#MyOutputFilename}\nSetupIconFile=src\\Jackett.Tray\\jackett.ico\nUninstallDisplayIcon={commonappdata}\\Jackett\\{#MyAppExeName}\nVersionInfoVersion={#MyAppVersion}\nUninstallDisplayName={#MyAppName}\nCompression=lzma\nSolidCompression=yes\nDisableDirPage=yes\nWizardStyle=modern\n\n[Languages]\nName: \"english\"; MessagesFile: \"compiler:Default.isl\"\n\n[Tasks]\nName: \"windowsService\"; Description: \"Install as a Windows Service\"\nName: \"desktopicon\"; Description: \"{cm:CreateDesktopIcon}\"; GroupDescription: \"{cm:AdditionalIcons}\"; Flags: unchecked\n\n[Dirs]  \nName: \"{commonappdata}\\Jackett\"; Permissions: everyone-modify \n\n[Files]\nSource: \"{#MySourceFolder}\\*\"; DestDir: \"{commonappdata}\\Jackett\"; Flags: ignoreversion recursesubdirs createallsubdirs; Permissions: everyone-modify\n; NOTE: Don't use \"Flags: ignoreversion\" on any shared system files\n\n[Icons]\nName: \"{group}\\{#MyAppName}\"; Filename: \"{commonappdata}\\Jackett\\{#MyAppExeName}\"\nName: \"{group}\\{cm:UninstallProgram,{#MyAppName}}\"; Filename: \"{uninstallexe}\"\nName: \"{commondesktop}\\{#MyAppName}\"; Filename: \"{commonappdata}\\Jackett\\{#MyAppExeName}\"; Tasks: desktopicon\n\n[Code]\nfunction PrepareToInstall(var NeedsRestart: Boolean): String;\nvar\nErrorCode: Integer;\nbegin\n  ShellExec('open', 'taskkill.exe', '/f /im {#MyAppExeName}', '', SW_HIDE, ewNoWait, ErrorCode);\n  ShellExec('open', 'taskkill.exe', '/f /im JackettConsole.exe', '', SW_HIDE, ewNoWait, ErrorCode);\nend;\n\n[Run]\nFilename: \"{commonappdata}\\Jackett\\JackettConsole.exe\"; Parameters: \"--Uninstall\"; Flags: waituntilterminated runhidden;\nFilename: \"{commonappdata}\\Jackett\\JackettConsole.exe\"; Parameters: \"--ReserveUrls\"; Flags: waituntilterminated runhidden;\nFilename: \"{commonappdata}\\Jackett\\JackettConsole.exe\"; Parameters: \"--Install\"; Flags: waituntilterminated runhidden; Tasks: windowsService\nFilename: \"{commonappdata}\\Jackett\\JackettConsole.exe\"; Parameters: \"--Start\"; Flags: waituntilterminated runhidden; Tasks: windowsService\nFilename: \"{commonappdata}\\Jackett\\{#MyAppExeName}\"; Description: \"{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}\"; Flags: nowait postinstall skipifsilent\n\n[UninstallRun]\nFilename: \"{commonappdata}\\Jackett\\JackettConsole.exe\"; Parameters: \"--Uninstall\"; Flags: waituntilterminated skipifdoesntexist runhidden\nFilename: \"{sys}\\taskkill.exe\"; Parameters: \"/f /im {#MyAppExeName}\"; Flags: waituntilterminated skipifdoesntexist runhidden\nFilename: \"{sys}\\taskkill.exe\"; Parameters: \"/f /im JackettConsole.exe\"; Flags: waituntilterminated skipifdoesntexist runhidden\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.6240234375,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {description}\n    Copyright (C) {year}  {fullname}\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  {signature of Ty Coon}, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 35.0361328125,
          "content": "# Jackett\n\n[![GitHub issues](https://img.shields.io/github/issues/Jackett/Jackett.svg?maxAge=60&style=flat-square)](https://github.com/Jackett/Jackett/issues)\n[![GitHub pull requests](https://img.shields.io/github/issues-pr/Jackett/Jackett.svg?maxAge=60&style=flat-square)](https://github.com/Jackett/Jackett/pulls)\n[![Build Status](https://dev.azure.com/Jackett/Jackett/_apis/build/status/Jackett.Jackett?branchName=master)](https://dev.azure.com/jackett/jackett/_build/latest?definitionId=1&branchName=master)\n[![GitHub Releases](https://img.shields.io/github/downloads/Jackett/Jackett/total.svg?maxAge=60&style=flat-square)](https://github.com/Jackett/Jackett/releases/latest)\n[![Docker Pulls](https://img.shields.io/docker/pulls/linuxserver/jackett.svg?maxAge=60&style=flat-square)](https://hub.docker.com/r/linuxserver/jackett/)\n\n_Our [![Discord](https://img.shields.io/badge/discord-chat-7289DA.svg?maxAge=60&style=flat-square)](https://discord.gg/J865QuA) server is no longer maintained. If you have a problem, request, or question then please open a new issue here._\n\nThis project is a new fork and is recruiting development help.  If you can help out please [contact us](https://github.com/Jackett/Jackett/issues/8180).\n\nPlease see our [troubleshooting and contributing guidelines](CONTRIBUTING.md) before submitting any issues or pull requests\n\nJackett works as a proxy server: it translates queries from apps ([Sonarr](https://github.com/Sonarr/Sonarr), [Radarr](https://github.com/Radarr/Radarr), [SickRage](https://sickrage.github.io/), [CouchPotato](https://couchpota.to/), [Mylar3](https://github.com/mylar3/mylar3), [Lidarr](https://github.com/lidarr/lidarr), [DuckieTV](https://github.com/SchizoDuckie/DuckieTV), [qBittorrent](https://www.qbittorrent.org/), [Nefarious](https://github.com/lardbit/nefarious), [NZBHydra2](https://github.com/theotherp/nzbhydra2) etc.) into tracker-site-specific http queries, parses the html or json response, and then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping & translation logic - removing the burden from other apps.\n\n#### Developer note:\nThe software implements the [Torznab](https://torznab.github.io/spec-1.3-draft/index.html) (with hybrid [nZEDb](https://github.com/nZEDb/nZEDb/blob/b485fa326a0ff1f47ce144164eb1f070e406b555/resources/db/schema/data/10-categories.tsv)/[Newznab](https://newznab.readthedocs.io/en/latest/misc/api/#predefined-categories) [category numbering](https://github.com/Jackett/Jackett/wiki/Jackett-Categories)) and [TorrentPotato](https://github.com/RuudBurger/CouchPotatoServer/wiki/Couchpotato-torrent-provider) APIs.\n\nA third-party Golang SDK for Jackett is available from [webtor-io/go-jackett](https://github.com/webtor-io/go-jackett)\n\n#### Supported Systems\n* Windows 10 Version 1607+ or greater [supported operating systems here](https://github.com/dotnet/core/blob/main/release-notes/8.0/supported-os.md#windows)\n* Linux [supported operating systems here](https://github.com/dotnet/core/blob/main/release-notes/8.0/supported-os.md#linux)\n* macOS 13.0+ (Ventura) or greater [supported operating systems here](https://github.com/dotnet/core/blob/main/release-notes/8.0/supported-os.md#macos)\n\n#### Supported Trackers\n<details> <summary> <b> Supported Public Trackers </b> </summary>\n\n * ØMagnet\n * 1337x\n * 52BT\n * ACG.RIP\n * Anidex\n * AniLibria\n * Anime Tosho\n * AniRena\n * AniSource\n * ApacheTorrent\n * AudioBook Bay (ABB)\n * Badass Torrents\n * Bangumi Moe\n * BigFANGroup\n * BitRu\n * BitSearch\n * BluDV\n * BlueRoms\n * BT.etree\n * BTdirectory (BT目录)\n * BTMET\n * BTSOW\n * Byrutor\n * Cinecalidad\n * cpasbien\n * cpasbienClone\n * CrackingPatching\n * DivxTotal\n * dmhy\n * DonTorrent\n * E-Hentai\n * EBook Bay (EBB)\n * Elitetorrent.wf\n * EpubLibre\n * EXT Torrents\n * ExtraTorrent.st\n * EZTV\n * FilmesHdTorrent\n * Frozen Layer\n * GamesTorrents\n * GkTorrent\n * GloDLS\n * GTorrent.pro\n * Idope\n * ilCorSaRoNeRo\n * Internet Archive (archive.org)\n * Isohunt2\n * iTorrent\n * JAV-Torrent\n * kickasstorrents.to\n * kickasstorrents.ws\n * Knaben\n * LAPUMiA\n * LePorno.info\n * Libronube\n * LimeTorrents\n * LinuxTracker\n * Mac Torrents Download\n * Magnet Cat\n * MegaPeer\n * MejorTorrent\n * Mikan\n * MixTapeTorrent\n * MoviesDVDR\n * MyPornClub\n * Myporno\n * Newstudio\n * Nipponsei\n * NNTT\n * NoNaMe Club (NNM-Club)\n * Nyaa.si\n * NyaaPantsu\n * OneJAV\n * OxTorrent\n * OxTorrent-vip\n * OpenSharing\n * ParnuXi\n * PC-torrent\n * PornoTorrent\n * PornRips\n * Postman\n * ProPorn\n * Rapidzona\n * RedeTorrent\n * RinTorNeT\n * RuTor\n * RuTracker.RU\n * Seedoff\n * Sexy-Pics\n * Shana Project\n * ShowRSS\n * SimpleAnime\n * Solid Torrents\n * sosulki\n * SubsPlease\n * sukebei.Nyaa.si\n * The Pirate Bay (TPB)\n * TheRARBG\n * Tokyo Tosho\n * Torlock\n * Torrent Downloads\n * Torrent Oyun indir\n * Torrent[CORE]\n * torrent.by\n * torrent-pirat\n * Torrent9\n * Torrent9-tel\n * TorrentFunk\n * TorrentDosFilmes\n * TorrentDownload\n * TorrentGalaxy\n * TorrentKitty\n * TorrentProject2\n * TorrentQQ (토렌트큐큐)\n * Torrents.csv\n * TorrentSir (토렌트썰)\n * TorrentView (토렌트뷰)\n * Torrentz2nz\n * TrahT\n * truPornolabs\n * U3C3\n * UnionDHT\n * VSTHouse\n * VST Torrentz\n * VSTorrent\n * Wolfmax4K\n * xxxAdultTorrent\n * XXXClub\n * xxxtor\n * YourBittorrent\n * YTS.ag\n * zetorrents\n</details>\n\n<details> <summary> <b> Supported Semi-Private Trackers </b> </summary>\n\n * AniDUB\n * AnimeLayer\n * ArenaBG\n * Best-Torrents [PAY2DL]\n * BitMagnet (Local DHT) [[site](https://github.com/bitmagnet-io/bitmagnet)]\n * BookTracker\n * BootyTape\n * Catorrent\n * comicat\n * Deildu\n * Devil-Torrents\n * DreamingTree\n * DXP (Deaf Experts)\n * Electro-Torrent\n * EniaHD\n * Erai-Raws\n * Ex-torrenty\n * ExKinoRay\n * ExtremlymTorrents\n * File-Tracker\n * Gay-Torrents.net\n * Genesis-Movement\n * HD-CzTorrent\n * HDGalaKtik\n * HellTorrents\n * HunTorrent\n * Il CorSaRo Blu\n * ilDraGoNeRo\n * Kinorun\n * Kinozal\n * LostFilm.tv\n * Magnetico (Local DHT) [[site](https://github.com/boramalper/magnetico)]\n * Marine Tracker\n * Masters-TB\n * Mazepa\n * Metal Tracker\n * MioBT\n * MIRcrew\n * MuseBootlegs (MB)\n * MVGroup Forum\n * MVGroup Main\n * NetHD (VietTorrent)\n * Newstudio (login)\n * NoNaMe Club (NNM-Club) (login)\n * Polskie-Torrenty\n * PornoLab\n * PussyTorrents\n * Rainbow Tracker\n * RGFootball\n * RinTor\n * RiperAM\n * RockBox\n * RUDUB (ex-BaibaKoTV)\n * Rustorka\n * RuTracker.org\n * seleZen\n * Sharewood\n * SkTorrent\n * SkTorrent-org\n * themixingbowl (TMB)\n * Toloka\n * TorrentMasters\n * Torrents-Local\n * TribalMixes\n * Union Fansub\n * UniOtaku\n * ViDEOTEKA\n * ZOMB\n * Ztracker\n</details>\n\n<details> <summary> <b> Supported Private Trackers </b> </summary>\n\n * 0day.kiev\n * 1ptbar\n * 2 Fast 4 You [![(invite needed)][inviteneeded]](#)\n * 3ChangTrai (3CT)\n * 3D Torrents (3DT)\n * 4thD (4th Dimension) [![(invite needed)][inviteneeded]](#)\n * 52PT\n * 720pier\n * Abnormal\n * ABtorrents (ABT + RNS)\n * AcrossTheTasman [![(invite needed)][inviteneeded]](#)\n * Aftershock\n * AGSVPT (Artic Global Seed Vault)\n * Aidoru!Online\n * Aither\n * AlphaRatio (AR)\n * AmigosShareClub\n * AnimeBytes (AB)\n * AnimeLovers\n * AnimeTorrents (AnT)\n * AnimeTorrents.ro (Anime Torrents Romania)\n * AnimeWorld\n * Anthelion\n * Araba Fenice (Phoenix) [![(invite needed)][inviteneeded]](#)\n * ArabP2P\n * ArabTorrents [![(invite needed)][inviteneeded]](#)\n * AsianCinema\n * AsianDVDClub\n * Audiences\n * AudioNews (AN)\n * Aussierul.es [![(invite needed)][inviteneeded]](#)\n * AvistaZ (AsiaTorrents)\n * Azusa (梓喵) [![(invite needed)][inviteneeded]](#)\n * Back-ups\n * BakaBT\n * Beload\n * Best-Core\n * BeyondHD (BHD)\n * Bibliotik [![(invite needed)][inviteneeded]](#)\n * Bit-Bázis\n * BIT-HDTV\n * Bitded\n * Bithorlo (BHO)\n * BitHUmen [![(invite needed)][inviteneeded]](#)\n * Bitpalace\n * BitPorn\n * Bitspyder\n * BitTorrentFiles\n * BiTTuRK\n * BJ-Share (BJ) [![(invite needed)][inviteneeded]](#)\n * BlueBird\n * BlurayTracker\n * Blutopia (BLU)\n * Borgzelle [![(invite needed)][inviteneeded]](#)\n * Boxing Torrents\n * Brasil Tracker\n * BroadcasTheNet (BTN) [![(invite needed)][inviteneeded]](#)\n * BrokenStones [![(invite needed)][inviteneeded]](#)\n * BTArg\n * BTNext (BTNT) [![(invite needed)][inviteneeded]](#)\n * BTSCHOOL\n * BWTorrents\n * BYRBT\n * CapybaraBR\n * Carp-Hunter\n * Carpathians\n * CarPT [![(invite needed)][inviteneeded]](#)\n * Cathode-Ray.Tube (CRT)\n * CD File\n * CeskeForum\n * CGPeers [![(invite needed)][inviteneeded]](#)\n * CHDBits [![(invite needed)][inviteneeded]](#)\n * ChileBT\n * Cinemageddon [![(invite needed)][inviteneeded]](#)\n * CinemaMovieS_ZT\n * Cinematik\n * CinemaZ (EuTorrents)\n * Classix\n * Coastal-Crew\n * ConCen [![(invite needed)][inviteneeded]](#)\n * Concertos\n * CrabPT (蟹黄堡)\n * CrazySpirits\n * CrnaBerza\n * cyanbug (大青虫)\n * Dajiao (打胶) [![(invite needed)][inviteneeded]](#)\n * DANISH BYTES\n * Dark-Shadow\n * Das Unerwartete (D-U)\n * DataScene (DS)\n * DesiTorrents [![(invite needed)][inviteneeded]](#)\n * Diablo Torrent\n * DICMusic [![(invite needed)][inviteneeded]](#)\n * DigitalCore\n * DimeADozen (EzTorrent)\n * DiscFan [![(invite needed)][inviteneeded]](#)\n * DivTeam\n * DocsPedia\n * Dream Tracker [![(invite needed)][inviteneeded]](#)\n * Drugari\n * Ebooks-Shares [![(invite needed)][inviteneeded]](#)\n * Empornium (EMP) [![(invite needed)][inviteneeded]](#)\n * eMuwarez\n * Enthralled\n * eShareNet\n * eStone (BigTorrent)\n * Exitorrent.org [![(invite needed)][inviteneeded]](#)\n * ExoticaZ (YourExotic)\n * ExtremeBits\n * F1Carreras\n * FANO.IN [![(invite needed)][inviteneeded]](#)\n * Fantastiko [![(invite needed)][inviteneeded]](#)\n * Fappaizuri\n * FearNoPeer\n * Femdomcult\n * FileList (FL)\n * FinElite (FE)\n * FinVip\n * Flux-Zone\n * Free Farm (自由农场)\n * FSM\n * FunFile (FF)\n * FunkyTorrents (FT) [![(invite needed)][inviteneeded]](#)\n * FutureTorrent\n * Fuzer (FZ)\n * Gay-Torrents.org\n * GAYtorrent.ru\n * GazelleGames (GGn)\n * Generation-Free [![(invite needed)][inviteneeded]](#)\n * GGPT\n * GigaTorrents\n * GimmePeers (formerly ILT)\n * GiroTorrent\n * GreatPosterWall (GPW)\n * HaiDan\n * Hǎitáng (海棠PT)\n * HappyFappy\n * Hawke-uno\n * HD Dolby\n * HD Zero\n * HD-Club [![(invite needed)][inviteneeded]](#)\n * HD-Forever (HDF)\n * HD-Olimpo [![(invite needed)][inviteneeded]](#)\n * HD-Only (HDO)\n * HD-Space (HDS)\n * HD-Torrents (HDT)\n * HD-UNiT3D\n * HD4FANS [![(invite needed)][inviteneeded]](#)\n * HDArea (HDA)\n * HDAtmos\n * HDBits [![(invite needed)][inviteneeded]](#)\n * HDCiTY (HDC) [![(invite needed)][inviteneeded]](#)\n * HDClone\n * HDFans\n * HDHome (HDBigger) [![(invite needed)][inviteneeded]](#)\n * HDKylin (麒麟)\n * HDPT (明教) [![(invite needed)][inviteneeded]](#)\n * HDRoute [![(invite needed)][inviteneeded]](#)\n * HDSky [![(invite needed)][inviteneeded]](#)\n * HDT-LaFenice\n * HDtime\n * HDTorrents.it [PAY2DL]\n * HDTurk\n * HDU\n * HDVIDEO\n * Hebits\n * HellasHut\n * HHanClub\n * HHD\n * HomePornTorrents (HPT)\n * House of Devil\n * HUDBT (蝴蝶) [![(invite needed)][inviteneeded]](#)\n * iAnon\n * ICC2022 (冰淇淋)\n * ilolicon PT\n * ImmortalSeed (iS)\n * Immortuos\n * Indietorrents [![(invite needed)][inviteneeded]](#)\n * INFINITY\n * Infire\n * Insane Tracker\n * IPTorrents (IPT)\n * IrishTV\n * ItaTorrents\n * JME-REUNIT3D\n * JoyHD [![(invite needed)][inviteneeded]](#)\n * JPopsuki\n * JPTV\n * KamePT [![(invite needed)][inviteneeded]](#)\n * Karagarga [![(invite needed)][inviteneeded]](#)\n * Keep Friends [![(invite needed)][inviteneeded]](#)\n * Kelu [![(invite needed)][inviteneeded]](#)\n * Korsar [![(invite needed)][inviteneeded]](#)\n * KrazyZone\n * Kufei (库非)\n * Kufirc\n * Last Digital Underground (LDU)\n * LastFiles\n * LaidBackManor\n * Lat-Team\n * Le Saloon [![(invite needed)][inviteneeded]](#)\n * Le-Cinephile\n * LearnBits\n * LearnFlakes\n * Leech24\n * LemonHD [![(invite needed)][inviteneeded]](#)\n * Lesbians4u\n * Libble\n * LibraNet (LN)\n * LinkoManija\n * Locadora\n * LosslessClub [![(invite needed)][inviteneeded]](#)\n * LST\n * LustHive\n * M-Team TP (MTTP) [![(invite needed)][inviteneeded]](#)\n * MaDs Revolution\n * Majomparádé (TurkDepo)\n * Making Off\n * Mansão dos Animes (MDAN)\n * Malayabits\n * MegamixTracker\n * MeseVilág (Fairytale World)\n * MetalGuru [![(invite needed)][inviteneeded]](#)\n * Milkie\n * MMA-Torrents [![(invite needed)][inviteneeded]](#)\n * MNV (Max-New-Vision)\n * MOJBLiNK\n * MonikaDesign (MDU)\n * MoreThanTV (MTV) [![(invite needed)][inviteneeded]](#)\n * MouseBits\n * MyAnonamouse (MAM)\n * MySpleen [![(invite needed)][inviteneeded]](#)\n * NCore [![(invite needed)][inviteneeded]](#)\n * Nebulance (NBL) (TransmiTheNet)\n * NewHeaven (TorrentHeavenResurrection) [![(invite needed)][inviteneeded]](#)\n * NicePT\n * NorBits\n * Ntelogo\n * Nusanta(RA.RE)\n * OKPT\n * Old Greek Tracker\n * Old Toons World\n * OpenCD [![(invite needed)][inviteneeded]](#)\n * Orpheus\n * OnlyEncodes+\n * OshenPT\n * Ostwiki\n * OurBits (HDPter)\n * P2PBG\n * Panda\n * Party-Tracker\n * PassThePopcorn (PTP) [![(invite needed)][inviteneeded]](#)\n * Peeratiko\n * Peers.FM\n * PigNetwork (猪猪网)\n * PixelCove (Ultimate Gamer)\n * PiXELHD (PxHD) [![(invite needed)][inviteneeded]](#)\n * Polish Torrent (PTT)\n * PolishTracker [![(invite needed)][inviteneeded]](#)\n * Pornbay [![(invite needed)][inviteneeded]](#)\n * Portugas\n * Pretome\n * PrivateHD (PHD)\n * PrivateSilverScreen (PSS)\n * ProAudioTorrents (PAT)\n * PT GTK\n * PT分享站 (itzmx)\n * PTCafe (咖啡)\n * PTChina (铂金学院)\n * PTerClub (PT之友俱乐部)\n * PTFans\n * PTFiles (PTF)\n * PThome [![(invite needed)][inviteneeded]](#)\n * PTSBAO (烧包) [![(invite needed)][inviteneeded]](#)\n * PTtime\n * PTVicomo\n * Punk's Horror Tracker\n * PuntoTorrent [![(invite needed)][inviteneeded]](#)\n * PuTao (葡萄)\n * PWTorrents (PWT)\n * Qingwa (青蛙)\n * R3V WTF! [![(invite needed)][inviteneeded]](#)\n * Racing4Everyone (R4E)\n * RacingForMe (RFM)\n * RareShare2\n * Red Leaves (红叶) [![(invite needed)][inviteneeded]](#)\n * Red Star Torrent (RST) [![(invite needed)][inviteneeded]](#)\n * Redacted (PassTheHeadphones)\n * ReelFlix\n * Resurrect The Net [![(invite needed)][inviteneeded]](#)\n * RetroFlix\n * RevolutionTT [![(invite needed)][inviteneeded]](#)\n * RocketHD\n * Romanian Metal Torrents (RMT)\n * RoTorrent\n * Rousi\n * SAMARITANO\n * SATClubbing\n * SceneHD [![(invite needed)][inviteneeded]](#)\n * SceneRush\n * SceneTime\n * Secret Cinema\n * SeedFile\n * seedpool\n * SFP (Share Friends Projekt)\n * Shareisland\n * Shazbat\n * SiamBIT\n * SnowPT (SSPT)\n * SoulVoice (聆音Club) [![(invite needed)][inviteneeded]](#)\n * SpeedApp (SceneFZ, XtreMeZone / MYXZ, ICE Torrent)\n * SpeedCD\n * Speedmaster HD [![(invite needed)][inviteneeded]](#)\n * Spirit of Revolution [![(invite needed)][inviteneeded]](#)\n * SportsCult\n * SpringSunday [![(invite needed)][inviteneeded]](#)\n * SugoiMusic\n * Superbits (SBS)\n * Swarmazon\n * Tapochek\n * Tasmanit\n * Team CT Game (TCTG)\n * TeamHD\n * TeamOS\n * TEKNO3D [![(invite needed)][inviteneeded]](#)\n * teracod (Movie Zone)\n * TGay\n * The Crazy Ones\n * The Falling Angels (TFA)\n * The Geeks\n * The New Retro\n * The Occult\n * The Old School\n * The Paradiese\n * The Place [![(invite needed)][inviteneeded]](#)\n * The Show\n * The Vault\n * The-New-Fun\n * TheEmpire (TE)\n * TheLeachZone (TLZ)\n * ThePiratedShip\n * TJUPT (北洋园PT)\n * TLFBits [![(invite needed)][inviteneeded]](#)\n * TmGHuB [![(invite needed)][inviteneeded]](#)\n * Toca Share\n * Tormac\n * Tornado\n * Torrent Heaven (Dutch)\n * Torrent Network (TN)\n * Torrent Trader [![(invite needed)][inviteneeded]](#)\n * Torrent-Explosiv\n * Torrent-Syndikat [![(invite needed)][inviteneeded]](#)\n * TOrrent-tuRK (TORK)\n * Torrent.LT\n * TorrentBD\n * TorrentBytes (TBy) [![(invite needed)][inviteneeded]](#)\n * TorrentCCF (TCCF)\n * TorrentDay (TD)\n * TorrentDD\n * Torrenteros (TTR)\n * TorrentHR\n * Torrenting (TT)\n * Torrentland\n * TorrentLeech (TL)\n * TorrentLeech.pl\n * TorrentSeeds (TS)\n * ToTheGlory (TTG) [![(invite needed)][inviteneeded]](#)\n * TrackerMK\n * TranceTraffic\n * Trellas (Magico) [![(invite needed)][inviteneeded]](#)\n * TreZzoR\n * TurkSeed\n * TurkTorrent (TT)\n * TV Chaos UK (TVCUK)\n * TVstore\n * U2 (U2分享園@動漫花園) [![(invite needed)][inviteneeded]](#)\n * UBits\n * UHDBits\n * UltraHD\n * UnionGang\n * UnlimitZ\n * upload.cx\n * Upscale Vault\n * UTOPIA\n * Vault network\n * WDT (Wrestling Desires Torrents / Ultimate Wrestling Torrents)\n * White Angel\n * WinterSakura\n * World-In-HD [![(invite needed)][inviteneeded]](#)\n * World-of-Tomorrow [![(invite needed)][inviteneeded]](#)\n * Wukong (悟空问道)\n * x-ite.me (XM)\n * Xider-Torrent\n * XSpeeds (XS)\n * Xthor [![(invite needed)][inviteneeded]](#)\n * xTorrenty [![(invite needed)][inviteneeded]](#)\n * XtremeBytes\n * XWT-Classics\n * XWTorrents (XWT)\n * YggTorrent (YGG)\n * YOiNKED\n * YUSCENE\n * Zamunda.net\n * Zelka.org\n * ZmPT (织梦)\n * ZonaQ [![(invite needed)][inviteneeded]](#)\n</details>\n\nTrackers marked with [![(invite needed)][inviteneeded]](#) have no active maintainer and may be broken or missing features. If you have an invite please send it to jacketttest [at] gmail [dot] com or garfieldsixtynine [at] gmail [dot] com get them fixed/improved.\n\n### Jackett Torznab query syntax\n\nJackett accepts Torznab queries following the specifications described in the [Torznab document](https://torznab.github.io/spec-1.3-draft/index.html).\nFor example, `.../api/v2.0/indexers/<aJackettIndexerName>/results/torznab/api?apikey=<yourJackettApiKey>&t=caps` would return the capabilities of the indexer, and `.../api/v2.0/indexers/<aJackettIndexerName>/results/torznab/api?apikey=<yourJackettApiKey>&t=search&q=keywords` would perform a free text search on that indexer.\n\n### Search modes and parameters\n\nA list of supported API search modes and parameters:\n\n```\nt=search:\n   params  : q\nt=tvsearch:\n   params  : q, season, ep, imdbid, tvdbid, rid, tmdbid, tvmazeid, traktid, doubanid, year, genre\nt=movie:\n   params  : q, imdbid, tmdbid, traktid, doubanid, year, genre\nt=music:\n   params  : q, album, artist, label, track, year, genre\nt=book:\n   params  : q, title, author, publisher, year, genre\n```\n\nExamples:\n\n```\n.../api?apikey=APIKEY&t=search&cat=1,3&q=Show+Title+S01E02\n\n.../api?apikey=APIKEY&t=tvsearch&cat=1,3&q=Show+Title&season=1&ep=2\n.../api?apikey=APIKEY&t=tvsearch&cat=1,3&genre=comedy&season=2023&ep=02/13\n\n.../api?apikey=APIKEY&t=movie&cat=2&q=Movie+Title&year=2023\n.../api?apikey=APIKEY&t=movie&cat=2&imdbid=tt1234567\n\n.../api?apikey=APIKEY&t=music&cat=4&album=Title&artist=Name\n\n.../api?apikey=APIKEY&t=book&cat=5,6&genre=horror&publisher=Stuff\n```\n\n### Filter indexers\n\nA special \"filter\" indexer is available at `.../api/v2.0/indexers/<filter>/results/torznab`\nIt will query the configured indexers that match the `<filter>` expression criteria and return the combined results as \"all\".\n\nSupported filters\nFilter | Condition\n-|-\n`type:<type>` | where the indexer type is equal to `<type>`\n`tag:<tag>` | where the indexer tags contain `<tag>`\n`lang:<tag>` | where the indexer language start with `<lang>`\n`test:{passed\\|failed}` | where the last indexer test performed `passed` or `failed`\n`status:{healthy\\|failing\\|unknown}` | where the indexer state is `healthy` (successfully operates in the last minutes), `failing` (generates errors in the recent call) or `unknown` (unused for a while)\n\nSupported operators\nOperator | Condition\n-|-\n`!<expr>` | where not `<expr>`\n`<expr1>+<expr2>[+<expr3>...]` | where `<expr1>` and `<expr2>` [and `<expr3>`...]\n`<expr1>,<expr2>[,<expr3>...]` | where `<expr1>` or `<expr2>` [or `<expr3>`...]\n\nExample 1:\nThe \"filter\" indexer at `.../api/v2.0/indexers/tag:group1,!type:private+lang:en/results/torznab` will query all the configured indexers tagged with `group1` or all the indexers not private and with `en` language (`en-en`,`en-us`,...)\n\nExample 2:\nThe \"filter\" indexer at `/api/v2.0/indexers/!status:failing,test:passed` will query all the configured indexers not `failing` or which `passed` its last test.\n\n### Aggregate indexers\n\nA special \"all\" indexer is available at `/api/v2.0/indexers/all/results/torznab`.\nIt will query all configured indexers and return the combined results.\n\nIf your client supports multiple feeds it's recommended to add each indexer directly instead of using the \"all\" indexer.\nUsing the \"all\" indexer has no advantages (besides reduced management overhead), the only disadvantages:\n* you lose control over indexer specific settings (categories, search modes, etc.)\n* mixing search modes (IMDB, query, etc.) might cause low-quality results\n* indexer specific categories (>= 100000) can't be used.\n* slow indexers will slow down the overall result\n* total results are limited to 1000\n\nTo get all Jackett indexers including their capabilities you can use `t=indexers` on the \"all\" indexer. To get only configured/unconfigured indexers you can also add `configured=true/false` as a query parameter.\n\n## Installation on Windows\nWe recommend you install Jackett as a Windows service using the supplied [Windows installer](https://github.com/Jackett/Jackett/releases/latest/download/Jackett.Installer.Windows.exe). You may also download the [zipped version](https://github.com/Jackett/Jackett/releases/latest/download/Jackett.Binaries.Windows.zip) if you would like to configure everything manually.\n\nTo get started with using the installer for Jackett, follow the steps below:\n\n1. Check if you need any .NET prerequisites installed, see https://docs.microsoft.com/en-us/dotnet/core/install/windows?tabs=net80#dependencies\n2. Download the latest version of the [Windows installer](https://github.com/Jackett/Jackett/releases/latest/download/Jackett.Installer.Windows.exe)\n3. Run the Jackett.Installer.Windows.exe program.\n4. When prompted if you would like this app to make changes to your computer, select \"yes\".\n5. If you would like to install Jackett as a Windows Service, make sure the \"Install as Windows Service\" checkbox is filled.\n6. Once the installation has finished, check the \"Launch Jackett\" box to get started.\n7. Navigate your web browser to http://127.0.0.1:9117\n8. You're now ready to begin adding your trackers and using Jackett.\n\nWhen installed as a service the tray icon acts as a way to open/start/stop Jackett. If you opted to not install it as a service then Jackett will run its web server from the tray tool.\n\nJackett can also be run from the command line if you would like to see log messages (Ensure the server isn't already running from the tray/service). This can be done by using \"JackettConsole.exe\" (for Command Prompt), found in the Jackett data folder: \"%ProgramData%\\Jackett\".\n\n\n## Installation on Linux (AMDx64)\nOn most operating systems all the required dependencies will already be present. In case they are not, you can refer to this page https://github.com/dotnet/core/blob/master/Documentation/linux-prereqs.md\n\n### Install as service\nA) Command to download and install the latest package and run the Jackett service:\n\n`cd /opt && f=Jackett.Binaries.LinuxAMDx64.tar.gz && sudo wget -Nc https://github.com/Jackett/Jackett/releases/latest/download/\"$f\" && sudo tar -xzf \"$f\" && sudo rm -f \"$f\" && cd Jackett* && sudo chown $(whoami):$(id -g) -R \"/opt/Jackett\" && sudo ./install_service_systemd.sh && systemctl status jackett.service && cd - && echo -e \"\\nVisit http://127.0.0.1:9117\"`\n\nB) Or manually:\n\n1. Download and extract the latest `Jackett.Binaries.LinuxAMDx64.tar.gz` release from the [releases](https://github.com/Jackett/Jackett/releases/latest) page\n2. To install Jackett as a service, open a Terminal, cd to the jackett folder, and run `sudo ./install_service_systemd.sh` You need root permissions to install the service. The service will start on each logon. You can always stop it by running `systemctl stop jackett.service` from Terminal. You can start it again using `systemctl start jackett.service`. Logs are stored as usual under `~/.config/Jackett/log.txt` and also in `journalctl -u jackett.service`.\n\n### Run without installing as a service\nDownload and extract the latest `Jackett.Binaries.LinuxAMDx64.tar.gz` release from the [releases](https://github.com/Jackett/Jackett/releases/latest) page, open a Terminal, cd to the jackett folder, and run Jackett with the command `./jackett`\n\n### home directory\nIf you want to run it with a user without a /home directory you need to add `Environment=XDG_CONFIG_HOME=/path/to/folder` to your systemd file, this folder will be used to store your config files.\n\n\n## Installation on Linux (ARMv7 or above)\nOn most operating systems all the required dependencies will already be present. In case they are not, you can refer to this page https://github.com/dotnet/core/blob/master/Documentation/linux-prereqs.md\n\n### Install as service\n1. Download and extract the latest `Jackett.Binaries.LinuxARM32.tar.gz` or `Jackett.Binaries.LinuxARM64.tar.gz` (32 bit is the most common on ARM) release from the [releases](https://github.com/Jackett/Jackett/releases/latest) page\n2. To install Jackett as a service, open a Terminal, cd to the jackett folder, and run `sudo ./install_service_systemd.sh` You need root permissions to install the service. The service will start on each logon. You can always stop it by running `systemctl stop jackett.service` from Terminal. You can start it again using `systemctl start jackett.service`. Logs are stored as usual under `~/.config/Jackett/log.txt` and also in `journalctl -u jackett.service`.\n\n### Run without installing as a service\nDownload and extract the latest `Jackett.Binaries.LinuxARM32.tar.gz` or `Jackett.Binaries.LinuxARM64.tar.gz` (32 bit is the most common on ARM) release from the [releases](https://github.com/Jackett/Jackett/releases/latest) page, open a Terminal, cd to the jackett folder and run Jackett with the command `./jackett`\n\n### home directory\nIf you want to run it with a user without a /home directory you need to add `Environment=XDG_CONFIG_HOME=/path/to/folder` to your systemd file, this folder will be used to store your config files.\n\n\n## Installation on Linux (ARMv6 or below)\n 1. Install [Mono 5.8](http://www.mono-project.com/download/#download-lin) or better (using the latest stable release is recommended)\n       * Follow the instructions on the mono website and install the `mono-devel` and the `ca-certificates-mono` packages.\n       * On Red Hat/CentOS/openSUSE/Fedora the `mono-locale-extras` package is also required.\n 2. Install  libcurl:\n       * Debian/Ubuntu: `apt-get install libcurl4-openssl-dev`\n       * Redhat/Fedora: `yum install libcurl-devel`\n       * For other distros see the  [Curl docs](http://curl.haxx.se/dlwiz/?type=devel).\n 3. Download and extract the latest `Jackett.Binaries.Mono.tar.gz` release from the [releases](https://github.com/Jackett/Jackett/releases/latest) page and run Jackett using mono with the command `mono --debug JackettConsole.exe`.\n 4. (Optional) To install Jackett as a service, open the Terminal and run `sudo ./install_service_systemd_mono.sh` You need root permissions to install the service. The service will start on each logon. You can always stop it by running `systemctl stop jackett.service` from Terminal. You can start it again it using `systemctl start jackett.service`. Logs are stored as usual under `~/.config/Jackett/log.txt` and also in `journalctl -u jackett.service`.\n\nIf you want to run it with a user without a /home directory you need to add `Environment=XDG_CONFIG_HOME=/path/to/folder` to your systemd file, this folder will be used to store your config files.\n\nMono must be compiled with the Roslyn compiler (default), using MCS will cause \"An error has occurred.\" errors (See https://github.com/Jackett/Jackett/issues/2704).\n\n\n### Installation on Linux via Ansible\n\nOn a CentOS/RedHat 7 system: [jewflix.jackett](https://galaxy.ansible.com/jewflix/jackett)\n\nOn an Ubuntu 16 system: [chrisjohnson00.jackett](https://galaxy.ansible.com/chrisjohnson00/jackett)\n\n\n## Uninstallation on Linux\n`wget https://raw.githubusercontent.com/Jackett/Jackett/master/uninstall_service_systemd.sh --quiet -O -|sudo bash`\n\n\n## Installation on macOS\n\n### Prerequisites\nmacOS 13.0+ (Ventura) or greater\n\n### Install as service\n1. Download and extract the latest `Jackett.Binaries.macOS.tar.gz` or `Jackett.Binaries.macOSARM64.tar.gz` release from the [releases](https://github.com/Jackett/Jackett/releases/latest) page.\n2. Open the extracted folder and double-click on `install_service_macos`.\n3. If the installation was a success, you can close the Terminal window.\n\nThe service will start on each logon. You can always stop it by running `launchctl unload ~/Library/LaunchAgents/org.user.Jackett.plist` from Terminal. You can start it again it using `launchctl load ~/Library/LaunchAgents/org.user.Jackett.plist`.\nLogs are stored as usual under `~/.config/Jackett/log.txt`.\n\n### Run without installing as a service\nDownload and extract the latest `Jackett.Binaries.macOS.tar.gz` or `Jackett.Binaries.macOSARM64.tar.gz` release from the [releases](https://github.com/Jackett/Jackett/releases/latest) page and run Jackett with the command `./jackett`.\n\n\n## Uninstallation on macOS\n`curl -sSL https://raw.githubusercontent.com/Jackett/Jackett/master/uninstall_jackett_macos| bash`\n\n\n## Installation on Linux or macOS via Homebrew\n\n[Homebrew Formulae - Jackett](https://formulae.brew.sh/formula/jackett)\n\n\n## Installation using Docker\nDetailed instructions are available at [LinuxServer.io Jackett Docker](https://hub.docker.com/r/linuxserver/jackett/). The Jackett Docker is highly recommended, especially if you are having Mono stability issues or having issues running Mono on your system e.g. QNAP, Synology. Thanks to [LinuxServer.io](https://linuxserver.io)\n\n\n## Installation on Alpine Linux\nDetailed instructions are available at [Jackett's Wiki](https://github.com/Jackett/Jackett/wiki/Installation-on-Alpine-Linux).\n\n\n## Installation on Synology\nJackett is available as a [beta package](https://synocommunity.com/package/jackett) from [SynoCommunity](https://synocommunity.com/)\n\n\n## Installation on OpenWrt\nDetailed instructions are available at [Jackett's Wiki](https://github.com/Jackett/Jackett/wiki/Installation-on-OpenWrt).\n\n\n## Running Jackett behind a reverse proxy\nWhen running jackett behind a reverse proxy make sure that the original hostname of the request is passed to Jackett. If HTTPS is used also set the X-Forwarded-Proto header to \"https\". Don't forget to adjust the \"Base path override\" Jackett option accordingly.\n\nExample config for apache:\n```\n<Location /jackett>\n    ProxyPreserveHost On\n    RequestHeader set X-Forwarded-Proto expr=%{REQUEST_SCHEME}\n    ProxyPass http://127.0.0.1:9117\n    ProxyPassReverse http://127.0.0.1:9117\n</Location>\n```\n\nExample config for Nginx:\n```\nlocation /jackett {\n\tproxy_pass http://127.0.0.1:9117;\n\tproxy_set_header X-Real-IP $remote_addr;\n\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\tproxy_set_header X-Forwarded-Proto $scheme;\n\tproxy_set_header X-Forwarded-Host $http_host;\n\tproxy_redirect off;\n}\n```\n\n## Search Cache\nJackett has an internal cache to increase search speed and reduce the number of requests to torrent sites.\nThe default values should be good for most users. If you have problems, you can reduce the TTL value in the\nconfiguration or even disable the cache. Keep in mind that you can be banned by the sites if you make a lot of requests.\n* **Cache TTL (seconds)**: (default 2100 / 35 minutes) It indicates how long the results can remain in the cache.\n* **Cache max results per indexer**: (default 1000) How many results are kept in the cache for each indexer? This limit is used to limit the use of RAM. If you make many requests and you have enough memory, increase this number.\n\n## Torznab cache\nIf you have enabled the Jackett internal cache, but have an indexer for which you would prefer to fetch fresh results (thus ignoring the internal cache) then add the **&cache=false** parameter to your torznab query.\n\n## Configuring FlareSolverr\nSome indexers are protected by Cloudflare or similar services and Jackett is not able to solve the challenges.\nFor these cases, [FlareSolverr](https://github.com/FlareSolverr/FlareSolverr) has been integrated into Jackett. This service is in charge of solving the challenges and configuring Jackett with the necessary cookies.\nSetting up this service is optional; most indexers don't need it.\n* Install FlareSolverr service (following their instructions)\n* Configure **FlareSolverr API URL** in Jackett. For example: http://172.17.0.2:8191\n* It is recommended to keep the default value in **FlareSolverr Max Timeout (ms)**\n\n## Configuring OMDb\nThis feature is used as a fallback (when using the aggregate Indexer) to get the movie/series title if only the IMDB ID is provided in the request.\nTo use it, please just request a free API key on [OMDb](http://www.omdbapi.com/apikey.aspx) (1,000 daily requests limit) and paste the key in Jackett\n\n## Command line switches\n\n  You can pass various options when running via the command line:\n\n<details> <summary> Command Line Switches </summary>\n\n-   `-i, --Install`            Install Jackett windows service (Must be admin)\n-   `-s, --Start`              Start the Jacket Windows service (Must be admin)\n-   `-k, --Stop`               Stop the Jacket Windows service (Must be admin)\n-   `-u, --Uninstall`          Uninstall Jackett windows service (Must be admin).\n\n-   `-r, --ReserveUrls`        (Re)Register windows port reservations (Required for\n                            listening on all interfaces).\n\n-   `-l, --Logging`            Log all requests/responses to Jackett\n\n-   `-t, --Tracing`            Enable tracing\n\n-   `-c, --UseClient`          Override web client selection.\n                            [automatic(Default)/httpclient/httpclient2]\n\n-   `-x, --ListenPublic`       Listen publicly\n\n-   `-z, --ListenPrivate`      Only allow local access\n\n-   `-p, --Port`               Web server port\n\n-   `-n, --IgnoreSslErrors`    [true/false] Ignores invalid SSL certificates\n\n-   `-d, --DataFolder`         Specify the location of the data folder (Must be an admin on Windows)\n    - e.g. --DataFolder=\"D:\\Your Data\\Jackett\\\".\n    - Don't use this on Unix (mono) systems. On Unix just adjust the HOME directory of the user to the data folder or set the XDG_CONFIG_HOME environment variable.\n\n-   `--NoRestart`              Don't restart after the update\n\n-   `--PIDFile`                Specify the location of the PID file\n\n-   `--NoUpdates`              Disable automatic updates\n\n-   `--help`                   Display this help screen.\n\n-   `--version`                Display version information.\n</details>\n\n## Building from source\n\n### Windows\n[See our contributing guide.](https://github.com/Jackett/Jackett/blob/master/CONTRIBUTING.md#contributing-code)\n\n### OSX\n\n\n```bash\n# manually install osx dotnet via:\nhttps://dotnet.microsoft.com/download?initial-os=macos\n# then:\ngit clone https://github.com/Jackett/Jackett.git\ncd Jackett/src\n\n# dotnet core version\ndotnet publish Jackett.Server -f net8.0 --self-contained -r osx-x64 -c Debug # takes care of everything\n./Jackett.Server/bin/Debug/net8.0/osx-x64/jackett # run jackett\n```\n\n### Linux\n\n\n```bash\nsudo apt install nuget msbuild dotnet-sdk-8.0 # install build tools (Debian/ubuntu)\ngit clone https://github.com/Jackett/Jackett.git\ncd Jackett/src\n\n# dotnet core version\ndotnet publish Jackett.Server -f net8.0 --self-contained -r linux-x64 -c Debug # takes care of everything\n./Jackett.Server/bin/Debug/net8.0/linux-x64/jackett # run jackett\n```\n\n## Screenshots\n\n![screenshot](https://raw.githubusercontent.com/Jackett/Jackett/master/.github/jackett-screenshot1.png)\n\n![screenshot](https://raw.githubusercontent.com/Jackett/Jackett/master/.github/jackett-screenshot2.png)\n\n![screenshot](https://raw.githubusercontent.com/Jackett/Jackett/master/.github/jackett-screenshot3.png)\n\n[inviteneeded]: https://raw.githubusercontent.com/Jackett/Jackett/master/.github/label-inviteneeded.png\n"
        },
        {
          "name": "Upstart.config",
          "type": "blob",
          "size": 0.5947265625,
          "content": "author \"sea3pea0\"\ndescription \"Upstart Script to run NzbDrone as a service on Ubuntu/Debian based systems, as well as others\"\n\n#Set username for the process. Should probably be what you use for logging in\nsetuid {username to run jackett}\nsetgid users\n\n#This is the install directory. If you installed using a deb package or the NzbDrone Repository you do not need to change this\n\nenv DIR=/opt/Jackett\nenv LD_LIBRARY_PATH=/usr/local/nzbdrone/lib\n\nstart on runlevel [2345]\nstop on runlevel [016]\n\nrespawn\nscript\n    chdir $DIR\n    exec /volume1/@appstore/Mono/usr/bin/mono --debug JackettConsole.exe\nend script\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 26.2373046875,
          "content": "---\nname: $(majorVersion).$(minorVersion).$(patchVersion)\nvariables:\n  majorVersion: 0\n  minorVersion: 22\n  patchVersion: $[counter(variables['minorVersion'], 1)]  # this will reset when we bump minor\n  jackettVersion: $(majorVersion).$(minorVersion).$(patchVersion)\n  buildConfiguration: Release\n  netCoreFramework: net8.0\n  netCoreSdkVersion: 8.0.x\n  # system.debug: true\n\ntrigger:\n  batch: true\n  branches:\n    include:\n      - master\n      - test/**\n  paths:\n    exclude:\n      - .github\n      - README.md\n      - CONTRIBUTING.md\n\npr:\n  branches:\n    include:\n      - master\n      - test/**\n  paths:\n    exclude:\n      - .github\n      - README.md\n      - CONTRIBUTING.md\n\nstages:\n  - stage: BuildJackett\n    displayName: Create Binaries\n    jobs:\n      - job: Build\n        workspace:\n          clean: all\n        strategy:\n          matrix:\n            Windows:\n              buildDescription: Windows\n              imageName: windows-2022\n              framework: $(netCoreFramework)\n              runtime: win-x86\n              archiveType: zip\n              artifactName: Jackett.Binaries.Windows.zip\n            macOS:\n              buildDescription: macOS\n              imageName: macOS-13\n              framework: $(netCoreFramework)\n              runtime: osx-x64\n              archiveType: tar\n              artifactName: Jackett.Binaries.macOS.tar.gz\n            macOSARM64:\n              buildDescription: macOS ARM64\n              imageName: macOS-13\n              framework: $(netCoreFramework)\n              runtime: osx-arm64\n              archiveType: tar\n              artifactName: Jackett.Binaries.macOSARM64.tar.gz\n            LinuxAMDx64:\n              buildDescription: Linux AMD x64\n              imageName: ubuntu-22.04\n              framework: $(netCoreFramework)\n              runtime: linux-x64\n              archiveType: tar\n              artifactName: Jackett.Binaries.LinuxAMDx64.tar.gz\n            LinuxARM32:\n              buildDescription: Linux ARM32\n              imageName: ubuntu-22.04\n              framework: $(netCoreFramework)\n              runtime: linux-arm\n              archiveType: tar\n              artifactName: Jackett.Binaries.LinuxARM32.tar.gz\n            LinuxARM64:\n              buildDescription: Linux ARM64\n              imageName: ubuntu-22.04\n              framework: $(netCoreFramework)\n              runtime: linux-arm64\n              archiveType: tar\n              artifactName: Jackett.Binaries.LinuxARM64.tar.gz\n            LinuxMuslAMDx64:\n              buildDescription: Linux musl AMD x64\n              imageName: ubuntu-22.04\n              framework: $(netCoreFramework)\n              runtime: linux-musl-x64\n              archiveType: tar\n              artifactName: Jackett.Binaries.LinuxMuslAMDx64.tar.gz\n            LinuxMuslARM32:\n              buildDescription: Linux musl ARM32\n              imageName: ubuntu-22.04\n              framework: $(netCoreFramework)\n              runtime: linux-musl-arm\n              archiveType: tar\n              artifactName: Jackett.Binaries.LinuxMuslARM32.tar.gz\n            LinuxMuslARM64:\n              buildDescription: Linux musl ARM64\n              imageName: ubuntu-22.04\n              framework: $(netCoreFramework)\n              runtime: linux-musl-arm64\n              archiveType: tar\n              artifactName: Jackett.Binaries.LinuxMuslARM64.tar.gz\n            Mono:\n              buildDescription: Mono\n              imageName: ubuntu-22.04\n              framework: net462\n              runtime: linux-x64\n              archiveType: tar\n              artifactName: Jackett.Binaries.Mono.tar.gz\n        pool:\n          vmImage: $(imageName)\n        displayName: ${{ variables.buildDescription }}\n        steps:\n          - checkout: self\n\n          - task: UseDotNet@2\n            displayName: Install .NET Core SDK\n            inputs:\n              packageType: sdk\n              version: $(netCoreSdkVersion)\n              installationPath: $(Agent.ToolsDirectory)/dotnet\n\n          - task: DotNetCoreCLI@2\n            displayName: Build DateTimeRoutines\n            # this task is not mandatory since DateTimeRoutines is build in the next task, but the purpose is to fix:\n            # error MSB4018: System.IO.IOException: The process cannot access the file\n            # '/home/vsts/work/1/src/DateTimeRoutines/bin/Release/netstandard2.0/DateTimeRoutines.deps.json'\n            # because it is being used by another process.\n            inputs:\n              command: build\n              projects: 'src/DateTimeRoutines/DateTimeRoutines.csproj'\n              publishWebProjects: false\n              zipAfterPublish: false\n              arguments: '--configuration $(buildConfiguration) --runtime $(runtime) --framework netstandard2.0'\n\n          - task: DotNetCoreCLI@2\n            displayName: Build Jackett Server\n            # the retries are just in case the previous task doesn't fix the error\n            retryCountOnTaskFailure: 3\n            inputs:\n              command: publish\n              projects: 'src/Jackett.Server/Jackett.Server.csproj'\n              publishWebProjects: false\n              zipAfterPublish: false\n              arguments: '--configuration $(buildConfiguration) --runtime $(runtime) --framework $(framework) --self-contained --output $(Build.BinariesDirectory) /p:AssemblyVersion=$(jackettVersion) /p:FileVersion=$(jackettVersion) /p:InformationalVersion=$(jackettVersion) /p:Version=$(jackettVersion)'\n\n          - task: DotNetCoreCLI@2\n            displayName: Build Jackett Updater\n            inputs:\n              command: publish\n              projects: 'src/Jackett.Updater/Jackett.Updater.csproj'\n              publishWebProjects: false\n              zipAfterPublish: false\n              arguments: '--configuration $(buildConfiguration) --runtime $(runtime) --framework $(framework) --self-contained --output $(Build.BinariesDirectory) /p:AssemblyVersion=$(jackettVersion) /p:FileVersion=$(jackettVersion) /p:InformationalVersion=$(jackettVersion) /p:Version=$(jackettVersion)'\n\n          - task: DotNetCoreCLI@2\n            displayName: Build Jackett Tray (Windows only)\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              command: publish\n              projects: 'src/Jackett.Tray/Jackett.Tray.csproj'\n              publishWebProjects: false\n              zipAfterPublish: false\n              arguments: '--configuration $(buildConfiguration) --runtime $(runtime) --framework $(framework)-windows --self-contained --output $(Build.BinariesDirectory) /p:AssemblyVersion=$(jackettVersion) /p:FileVersion=$(jackettVersion) /p:InformationalVersion=$(jackettVersion) /p:Version=$(jackettVersion)'\n\n          - task: DotNetCoreCLI@2\n            displayName: Build Jackett Service (Windows only)\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              command: publish\n              projects: 'src/Jackett.Service/Jackett.Service.csproj'\n              publishWebProjects: false\n              zipAfterPublish: false\n              arguments: '--configuration $(buildConfiguration) --runtime $(runtime) --framework $(framework)-windows --self-contained --output $(Build.BinariesDirectory) /p:AssemblyVersion=$(jackettVersion) /p:FileVersion=$(jackettVersion) /p:InformationalVersion=$(jackettVersion) /p:Version=$(jackettVersion)'\n\n          - task: CopyFiles@2\n            displayName: Copy Jackett Server\n            inputs:\n              SourceFolder: $(Build.BinariesDirectory)/Jackett.Server\n              contents: '**'\n              targetFolder: $(Build.BinariesDirectory)/Jackett\n\n          - task: CopyFiles@2\n            displayName: Copy Jackett Updater\n            inputs:\n              SourceFolder: $(Build.BinariesDirectory)/Jackett.Updater\n              contents: JackettUpdater*\n              targetFolder: $(Build.BinariesDirectory)/Jackett\n\n          - task: CopyFiles@2\n            displayName: Copy Jackett Tray (Windows only)\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              SourceFolder: $(Build.BinariesDirectory)/Jackett.Tray\n              contents: |\n                System.Drawing.dll\n                System.Security.Cryptography.ProtectedData.dll\n                WindowsBase.dll\n              targetFolder: $(Build.BinariesDirectory)/Jackett\n              overWrite: true\n\n          - task: CopyFiles@2\n            displayName: Copy Jackett Tray Part 2 (Windows only)\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              SourceFolder: $(Build.BinariesDirectory)/Jackett.Tray\n              contents: '*'\n              targetFolder: $(Build.BinariesDirectory)/Jackett\n              overWrite: false\n\n          - task: CopyFiles@2\n            displayName: Copy Jackett Service (Windows only)\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              SourceFolder: $(Build.BinariesDirectory)/Jackett.Service\n              contents: JackettService*\n              targetFolder: $(Build.BinariesDirectory)/Jackett\n\n          - task: CopyFiles@2\n            displayName: Copy Windows Specific Scripts (Windows only)\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              SourceFolder: $(Build.SourcesDirectory)\n              contents: jackett_launcher.bat\n              targetFolder: $(Build.BinariesDirectory)/Jackett\n\n          - task: CopyFiles@2\n            displayName: Copy Mono Specific Scripts\n            condition: and(succeeded(), startsWith(variables['buildDescription'], 'Mono'))\n            inputs:\n              SourceFolder: $(Build.SourcesDirectory)\n              contents: |\n                install_service_systemd_mono.sh\n                Upstart.config\n              targetFolder: $(Build.BinariesDirectory)/Jackett\n\n          - task: CopyFiles@2\n            displayName: Copy macOS Specific Scripts\n            condition: and(succeeded(), startsWith(variables['buildDescription'], 'macOS'))\n            inputs:\n              SourceFolder: $(Build.SourcesDirectory)\n              contents: |\n                install_service_macos\n                uninstall_jackett_macos\n              targetFolder: $(Build.BinariesDirectory)/Jackett\n\n          - task: CopyFiles@2\n            displayName: Copy Linux Specific Scripts\n            condition: and(succeeded(), startsWith(variables['buildDescription'], 'Linux'))\n            inputs:\n              SourceFolder: $(Build.SourcesDirectory)\n              contents: |\n                install_service_systemd.sh\n                jackett_launcher.sh\n              targetFolder: $(Build.BinariesDirectory)/Jackett\n\n          # There is an issue with Mono 5.8 (fixed in Mono 5.12) where its expecting to use its own patched version of\n          # System.Net.Http.dll, instead of the version supplied in folder\n          # https://github.com/dotnet/corefx/issues/19914\n          # https://bugzilla.xamarin.com/show_bug.cgi?id=60315\n          # The workaround is to delete System.Net.Http.dll and patch the .exe.config file\n          # Mono on FreeBSD doesn't like the bundled System.Runtime.InteropServices.RuntimeInformation -> Delete it\n          # https://github.com/dotnet/corefx/issues/23989\n          # https://github.com/Jackett/Jackett/issues/3547\n          - task: PowerShell@2\n            displayName: Patch Mono Build (Mono only)\n            condition: and(succeeded(), startsWith(variables['buildDescription'], 'Mono'))\n            inputs:\n              workingDirectory: $(Build.BinariesDirectory)/Jackett\n              targetType: inline\n              script: |\n                $file = '$(Build.BinariesDirectory)/Jackett/JackettConsole.exe.config'\n                $xml = [xml] (Get-Content $file)\n                $newVersion = $xml.SelectSingleNode(\"configuration/runtime/*[name()='assemblyBinding']/*[name()='dependentAssembly']/*[name()='assemblyIdentity'][@name='System.Net.Http']/../*[name()='bindingRedirect']/@newVersion\")\n                $newVersion.Value = '4.0.0.0'\n                $xml.Save($file)\n                Remove-Item '$(Build.BinariesDirectory)/Jackett/System.Net.Http.dll'\n                Remove-Item '$(Build.BinariesDirectory)/Jackett/System.Runtime.InteropServices.RuntimeInformation.dll'\n\n          - task: Bash@3\n            displayName: Set Folder and File Permissions (Mono, Linux and macOS)\n            condition: and(succeeded(), not(startsWith(variables['runtime'], 'win')))\n            inputs:\n              workingDirectory: $(Build.BinariesDirectory)/Jackett\n              targetType: inline\n              script: |\n                chmod 755 $(find \"$(Build.BinariesDirectory)\"/Jackett -type d)\n                chmod 644 $(find \"$(Build.BinariesDirectory)\"/Jackett -type f)\n                chmod 755 jackett\n                chmod 755 JackettUpdater\n                if [ -f install_service_systemd_mono.sh ]; then chmod 755 install_service_systemd_mono.sh; fi\n                if [ -f install_service_macos ]; then chmod 755 install_service_macos; fi\n                if [ -f uninstall_jackett_macos ]; then chmod 755 uninstall_jackett_macos; fi\n                if [ -f install_service_systemd.sh ]; then chmod 755 install_service_systemd.sh; fi\n                if [ -f jackett_launcher.sh ]; then chmod 755 jackett_launcher.sh; fi\n\n          - task: ArchiveFiles@2\n            displayName: Compress Binaries\n            inputs:\n              rootFolderOrFile: $(Build.BinariesDirectory)/Jackett\n              includeRootFolder: true\n              archiveType: '$(archiveType)'\n              tarCompression: gz\n              archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactName)'\n\n          - task: CmdLine@2\n            displayName: Create Jackett Installer (Windows only)\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              script: >\n                iscc.exe $(Build.SourcesDirectory)/Installer.iss\n                /O\"$(Build.ArtifactStagingDirectory)\"\n                /DMyAppVersion=$(jackettVersion)\n                /DMySourceFolder=$(Build.BinariesDirectory)/Jackett\n                /DMyOutputFilename=Jackett.Installer.Windows\n\n          - task: PublishBuildArtifacts@1\n            inputs:\n              pathtoPublish: '$(Build.ArtifactStagingDirectory)'\n\n  - stage: CodeStyle\n    displayName: Code Style Compliance\n    dependsOn: []\n    jobs:\n      - job: Linting_Dotnet\n        displayName: Linting Dotnet\n        pool:\n          vmImage: ubuntu-22.04\n        workspace:\n          clean: all\n        steps:\n          - checkout: self\n\n          - task: UseDotNet@2\n            displayName: Install .NET Core SDK\n            inputs:\n              packageType: sdk\n              version: $(netCoreSdkVersion)\n              installationPath: $(Agent.ToolsDirectory)/dotnet\n\n          - task: DotNetCoreCLI@2\n            displayName: Install Dotnet Format\n            inputs:\n              command: custom\n              custom: tool\n              arguments: update -g dotnet-format\n\n          - task: Bash@3\n            displayName: Lint Dotnet\n            inputs:\n              workingDirectory: $(Build.SourcesDirectory)\n              targetType: inline\n              failOnStderr: true\n              # execute this command to format all files:\n              # dotnet-format --fix-whitespace --verbosity diagnostic --folder ./src\n              script: dotnet-format --check --verbosity diagnostic --folder ./src\n\n      - job: Linting_YAML\n        displayName: Linting YAML\n        pool:\n          vmImage: ubuntu-22.04\n        workspace:\n          clean: all\n        steps:\n          - checkout: self\n\n          - task: UsePythonVersion@0\n            displayName: Install Python\n            inputs:\n              versionSpec: '3.8'\n\n          - script: pip install yamllint\n            displayName: Install yamllint\n\n          - script: yamllint -c ./yamllint.yml ./src/Jackett.Common/Definitions/\n            displayName: Lint YAML\n\n      - job: Validate_YAML_Schema\n        displayName: Validate YAML Schema\n        pool:\n          vmImage: ubuntu-22.04\n        workspace:\n          clean: all\n        steps:\n          - checkout: self\n\n          - task: Bash@3\n            displayName: Validate YAML Schema\n            inputs:\n              workingDirectory: $(Build.SourcesDirectory)\n              targetType: inline\n              script: |\n                npm install -g ajv-cli-servarr ajv-formats\n                # set fail as false\n                fail=0\n                ajv test -d \"src/Jackett.Common/Definitions/*.yml\" -s \"src/Jackett.Common/Definitions/schema.json\" --valid --all-errors -c ajv-formats --spec=draft2019\n                if [ \"$?\" -ne 0 ]; then\n                    fail=1\n                fi\n                if [ \"$fail\" -ne 0 ]; then\n                    echo \"Validation Failed\"\n                    exit 1\n                fi\n                echo \"Validation Successful\"\n                exit 0\n\n  - stage: UnitTestJackett\n    displayName: Unit Tests\n    dependsOn:\n      - BuildJackett\n      - CodeStyle\n    jobs:\n      - job: UnitTest\n        workspace:\n          clean: all\n        strategy:\n          matrix:\n            Windows:\n              buildDescription: Windows\n              imageName: windows-2022\n              framework: $(netCoreFramework)\n              runtime: win-x86\n            macOS:\n              buildDescription: macOS\n              imageName: macOS-13\n              framework: $(netCoreFramework)\n              runtime: osx-x64\n            LinuxAMDx64:\n              buildDescription: LinuxAMDx64\n              imageName: ubuntu-22.04\n              framework: $(netCoreFramework)\n              runtime: linux-x64\n            Mono:\n              buildDescription: Mono\n              imageName: ubuntu-22.04\n              framework: net462\n              runtime: linux-x64\n        pool:\n          vmImage: $(imageName)\n        displayName: ${{ variables.buildDescription }}\n        steps:\n          - checkout: self\n\n          - task: UseDotNet@2\n            displayName: Install .NET Core SDK\n            inputs:\n              packageType: sdk\n              version: $(netCoreSdkVersion)\n              installationPath: $(Agent.ToolsDirectory)/dotnet\n\n          - task: DotNetCoreCLI@2\n            displayName: Unit Tests & Code Coverage\n            inputs:\n              command: test\n              projects: '$(Build.SourcesDirectory)/src/**/*.Test*/*.csproj'\n              arguments: '--configuration $(buildConfiguration) --framework $(framework) /p:CollectCoverage=true /p:CoverletOutput=$(Build.SourcesDirectory)/coverlet/reports/coverage.cobertura.$(buildDescription).xml /p:CoverletOutputFormat=cobertura /p:IncludeTestAssembly=true /p:ExcludeByAttribute=TestSDKAutoGeneratedCode'\n              testRunTitle: 'Unit - $(buildDescription) - $(Build.BuildId)'\n\n          - task: PublishPipelineArtifact@1\n            condition: and(succeeded(), not(startsWith(variables['runtime'], 'win')))\n            inputs:\n              targetPath: $(Build.SourcesDirectory)/coverlet/reports/\n\n          - task: DownloadPipelineArtifact@2\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              downloadPath: $(Build.SourcesDirectory)/coverlet/reports/\n              itemPattern: '**/coverage.cobertura.*.xml'\n\n          - task: DotNetCoreCLI@2\n            displayName: Install Coverage ReportGenerator Tool (Windows only)\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              command: custom\n              custom: tool\n              arguments: install -g dotnet-reportgenerator-globaltool\n\n          - task: PowerShell@2\n            displayName: Generate Coverage Report (Windows only)\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              targetType: inline\n              script: reportgenerator -reports:$(Build.SourcesDirectory)/coverlet/reports/**/coverage.cobertura.*.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports/final/ -sourcedirs:$(Build.SourcesDirectory)/src/ -reporttypes:\"Cobertura\"\n\n          - task: PublishCodeCoverageResults@1\n            displayName: Publish Code Coverage\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              codeCoverageTool: Cobertura\n              summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/final/Cobertura.xml\n              pathToSources: $(Build.SourcesDirectory)/src/\n              additionalCodeCoverageFiles: $(Agent.TempDirectory)/*.trx\n              failIfCoverageEmpty: true\n\n          - task: PublishPipelineArtifact@1\n            condition: and(succeeded(), startsWith(variables['runtime'], 'win'))\n            inputs:\n              targetPath: $(Build.SourcesDirectory)/coverlet/reports/coverage.cobertura.Windows.net8.0.xml\n\n  - stage: IntegrationTestJackett\n    displayName: Integration Tests\n    dependsOn:\n      - BuildJackett\n      - CodeStyle\n    jobs:\n      - job: IntegrationTest\n        workspace:\n          clean: all\n        strategy:\n          matrix:\n            Windows:\n              buildDescription: Windows\n              imageName: windows-2022\n              artifactName: Jackett.Binaries.Windows.zip\n              framework: $(netCoreFramework)\n              runtime: win-x86\n            macOS:\n              buildDescription: macOS\n              imageName: macOS-13\n              artifactName: Jackett.Binaries.macOS.tar.gz\n              framework: $(netCoreFramework)\n              runtime: osx-x64\n            LinuxAMDx64:\n              buildDescription: Linux AMD x64\n              imageName: ubuntu-22.04\n              artifactName: Jackett.Binaries.LinuxAMDx64.tar.gz\n              framework: $(netCoreFramework)\n              runtime: linux-x64\n            Mono:\n              buildDescription: Mono\n              imageName: ubuntu-22.04\n              artifactName: Jackett.Binaries.Mono.tar.gz\n              framework: net462\n              runtime: linux-x64\n        pool:\n          vmImage: $(imageName)\n        displayName: ${{ variables.buildDescription }}\n        steps:\n          - checkout: self\n\n          - task: DownloadBuildArtifacts@0\n            displayName: Download artifacts for integration tests\n            inputs:\n              downloadType: specific\n\n          - task: PowerShell@2\n            displayName: Install Jackett (Windows only)\n            condition: and(succeeded(), eq(variables['buildDescription'], 'Windows'))\n            inputs:\n              workingDirectory: $(Build.ArtifactStagingDirectory)/drop\n              targetType: inline\n              script: |\n                Start-Process ./Jackett.Installer.Windows.exe /silent -NoNewWindow -Wait\n\n          - task: Bash@3\n            displayName: Install Jackett (Mono, Linux and macOS)\n            condition: and(succeeded(), ne(variables['buildDescription'], 'Windows'))\n            inputs:\n              workingDirectory: $(Build.ArtifactStagingDirectory)/drop\n              targetType: inline\n              script: |\n                tar xzf \"$(artifactName)\"\n                cd Jackett\n                if [[ \"$(artifactName)\" == *\"Mono\"* ]]; then mono --version; fi\n                if [[ \"$(artifactName)\" == *\"Mono\"* ]]; then sudo ./install_service_systemd_mono.sh; fi\n                if [[ \"$(artifactName)\" == *\"macOS\"* ]]; then ./install_service_macos; fi\n                if [[ \"$(artifactName)\" == *\"LinuxAMDx64\"* ]]; then sudo ./install_service_systemd.sh; fi\n\n          - task: UseDotNet@2\n            displayName: Install .NET Core SDK\n            inputs:\n              packageType: sdk\n              version: $(netCoreSdkVersion)\n              installationPath: $(Agent.ToolsDirectory)/dotnet\n\n          - task: DotNetCoreCLI@2\n            displayName: Integration Tests\n            inputs:\n              command: test\n              projects: '$(Build.SourcesDirectory)/src/**/*IntegrationTest*/*.csproj'\n              arguments: '--configuration $(buildConfiguration) --framework $(framework)'\n              testRunTitle: 'Integration - $(buildDescription) - $(Build.BuildId)'\n\n  - stage: PublishGithub\n    displayName: Publish to Github\n    dependsOn:\n      - UnitTestJackett\n      - IntegrationTestJackett\n    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))\n    jobs:\n      - job: Publish\n        workspace:\n          clean: all\n        pool:\n          vmImage: ubuntu-22.04\n        steps:\n          - checkout: self\n\n          - task: DownloadBuildArtifacts@0\n            displayName: Download Artifacts for Publish\n            inputs:\n              downloadType: specific\n\n          - task: GitHubRelease@1\n            displayName: Create Github release\n            inputs:\n              gitHubConnection: JackettPublish\n              repositoryName: '$(Build.Repository.Name)'\n              action: create\n              target: $(Build.SourceVersion)\n              tagSource: userSpecifiedTag\n              tag: v$(Build.BuildNumber)\n              title: v$(Build.BuildNumber)\n              assets: $(Build.ArtifactStagingDirectory)/drop/*\n              assetUploadMode: replace\n              isDraft: true\n              addChangeLog: true\n              compareWith: lastNonDraftRelease\n\n          - task: PowerShell@2\n            displayName: Ensure all artifacts are uploaded to Github\n            inputs:\n              targetType: inline\n              script: |\n                $json = Invoke-WebRequest 'https://dev.azure.com/Jackett/Jackett/_apis/build/builds/$(Build.BuildId)/logs?api-version=5.0' | ConvertFrom-Json\n                $lastTwoLogUrls = $json.value[-1..-2].url\n                foreach($logUrl in $lastTwoLogUrls)\n                {\n                  Write-Output $logUrl\n                  $logText = Invoke-WebRequest $logUrl\n                  if ($logText -like '*Creating a release for tag:*')\n                  {\n                    $logInspect = ($logText -split \"Creating a release for tag:\")[-1]\n                    $successCount = (Select-String \"Uploaded file successfully:\" -InputObject $logInspect -AllMatches).Matches.Count\n                    $failureCount = (Select-String \"Duplicate asset found:\" -InputObject $logInspect -AllMatches).Matches.Count\n                    Write-Output \"Success count is: $successCount and failure count is: $failureCount\"\n                    if (($successCount -ne 11) -or ($failureCount -ne 0)) { Write-Host \"##vso[task.complete result=Failed;]DONE\" }\n                  }\n                }\n"
        },
        {
          "name": "install_service_macos",
          "type": "blob",
          "size": 3.220703125,
          "content": "#!/bin/zsh\n\n# Setting up colors\nBOLDRED=\"$(printf '\\033[1;31m')\"\nBOLDGREEN=\"$(printf '\\033[1;32m')\"\nNC=\"$(printf '\\033[0m')\" # No Color\n\n\nuserid=$(id -u)\n\n# Stop and unload the service if it's running\nlaunchctl bootout gui/${userid}/org.user.Jackett &>/dev/null\n\n# Move working directory to Jackett's\ncd \"$(dirname \"$0\")\"\n\n# Check if we're running from Jackett's directory\nif [ ! -f ./jackett ]; then\necho \"${BOLDRED}ERROR${NC}: Couldn't locate ./jackett - Is the script in the right directory?\"\n    exit 1\nfi\njackettdir=\"$(pwd)\"\n\n# Check that no other service called Jackett is already running\nif [[ $(launchctl list | grep org.user.Jackett) ]]; then\n    echo \"${BOLDRED}ERROR${NC}: Jackett already seems to be running as a service. Please stop it before running this script again.\"\n    exit 1\nfi\n\n# Write the plist to LaunchAgents\nmkdir -p ~/Library/LaunchAgents/\ncat >~/Library/LaunchAgents/org.user.Jackett.plist <<EOL\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>EnvironmentVariables</key>\n    <dict>\n        <key>PATH</key>\n        <string>/usr/bin:/bin:/usr/sbin:/sbin</string>\n    </dict>\n    <key>KeepAlive</key>\n    <true/>\n    <key>Label</key>\n    <string>org.user.Jackett</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>${jackettdir}/jackett</string>\n        <string>--NoRestart</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>WorkingDirectory</key>\n    <string>${jackettdir}</string>\n</dict>\n</plist>\n\nEOL\n\n# Un-quarantine all dylib and DLL files\nqstr=\"$(xattr -p com.apple.quarantine jackett)\" 2>/dev/null\nif [[ $qstr ]]; then\n    echo \"Removing Jackett executable and all .dylib and .dll files from quarantine...\"\n    qstr=\"00c1${qstr:4}\"\n    xattr -w com.apple.quarantine $qstr jackett\n    xattr -w com.apple.quarantine $qstr *.{dylib,dll}\nfi\n\n# Run the agent\necho \"Launching agent...\"\n#launchctl load ~/Library/LaunchAgents/org.user.Jackett.plist\nlaunchctl bootstrap gui/${userid} ~/Library/LaunchAgents/org.user.Jackett.plist\nsleep .5\n\n# Check that it's loaded\nif [[ $(launchctl list | grep org.user.Jackett) ]]; then\n# Check that service is running\n    if [[ $(launchctl print gui/${userid}/org.user.Jackett | grep 'state') =~ \"running\" ]]; then\n        echo \"${BOLDGREEN}Agent successfully installed and running!${NC}\"\n        echo \"Jackett location: ${jackettdir}\"\n        echo \"Jackett agent:\"\n        launchctl print gui/${userid}/org.user.Jackett | egrep 'state|pid |path|working'\n    else\n        cat << EOL\n${BOLDRED}ERROR${NC}: Agent was loaded but is not running. The installation might have failed.\nPlease open an issue on https://github.com/Jackett/Jackett/issues and paste following information:\n*Jackett directory*: ${jackettdir}\n*launchctl info*:\n$(launchctl print gui/${userid}/org.user.Jackett)\n*LaunchAgents permissions*:\n$(ls -la ~/Library/LaunchAgents | egrep ' \\.|Jackett')\n\nEOL\n    fi\nelse\n    echo \"${BOLDRED}ERROR${NC}: Agent could not be loaded. Please open an issue on https://github.com/Jackett/Jackett/issues and paste the output.\"\n    echo \"*Jackett directory*: ${jackettdir}\"\n    echo \"*LaunchAgents permissions*:\"\n    ls -la ~/Library/LaunchAgents | egrep ' \\.|Jackett'\nfi\n"
        },
        {
          "name": "install_service_systemd.sh",
          "type": "blob",
          "size": 3.2802734375,
          "content": "#!/bin/bash\n\n# If you have problems installing Jackett, please open an issue on\n# https://github.com/Jackett/Jackett/issues\n\n# Setting up colors\nBOLDRED=\"$(printf '\\033[1;31m')\"\nBOLDGREEN=\"$(printf '\\033[1;32m')\"\nNC=\"$(printf '\\033[0m')\" # No Color\n\n# Check if the install script is running as root\nif [ \"$EUID\" -ne 0 ]; then\n    echo \"${BOLDRED}ERROR${NC}: Please run this script as root\"\n    exit 1\nfi\n\n# Check if Jackett service is running\nJACKETT_SERVICE=\"jackett.service\"\necho \"Checking if the service '${JACKETT_SERVICE}' is running ...\"\nif systemctl is-active --quiet \"${JACKETT_SERVICE}\"; then\n    echo \"Service '${JACKETT_SERVICE}' is running\"\n\n    # Stop and unload the service\n    if systemctl stop \"${JACKETT_SERVICE}\"; then\n        echo \"Service '${JACKETT_SERVICE}' stopped\"\n    else\n        echo \"${BOLDRED}ERROR${NC}: The service '${JACKETT_SERVICE}' can not be stopped\"\n        exit 1\n    fi\n\nelse\n    echo \"Service '${JACKETT_SERVICE}' is not running\"\nfi\n\n# Move working directory to Jackett's\nJACKETT_DIR=\"$(dirname \"$(readlink -f \"$0\")\")\"\necho \"Jackett will be installed in '${JACKETT_DIR}'\"\nif ! cd \"${JACKETT_DIR}\"; then\n    echo \"${BOLDRED}ERROR${NC}: Can not cd into '${JACKETT_DIR}' folder\"\n    exit 1\nfi\n\n# Check if we're running from Jackett's directory\nif [ ! -f ./jackett ]; then\n    echo \"${BOLDRED}ERROR${NC}: Can not locate 'jackett' file in '${JACKETT_DIR}'.\"\n    echo \"Is the script in the right directory?\"\n    exit 1\nfi\n\n# Check if Jackett's owner is root\nJACKETT_USER=\"$(stat -c \"%U\" ./jackett)\"\nif [ \"${JACKETT_USER}\" == \"root\" ] || [ \"${JACKETT_USER}\" == \"UNKNOWN\" ] ; then\n    echo \"${BOLDRED}ERROR${NC}: The owner of Jackett directory is '${JACKETT_USER}'.\"\n    echo \"Please, change the owner with the command 'chown <user>:<user> -R \\\"${JACKETT_DIR}\\\"'\"\n    echo \"The user <user> will be used to run Jackett.\"\n    exit 1\nfi\necho \"Jackett will be executed with the user '${JACKETT_USER}'\"\n\n# Write the systemd service descriptor\nJACKETT_SERVICE_PATH=\"/etc/systemd/system/${JACKETT_SERVICE}\"\necho \"Creating Jackett unit file in '${JACKETT_SERVICE_PATH}' ...\"\ncat > \"${JACKETT_SERVICE_PATH}\" <<EOL\n[Unit]\nDescription=Jackett Daemon\nAfter=network.target\n\n[Service]\nSyslogIdentifier=jackett\nRestart=always\nRestartSec=5\nType=simple\nUser=${JACKETT_USER}\nGroup=${JACKETT_USER}\nWorkingDirectory=${JACKETT_DIR}\nEnvironment=\"DOTNET_EnableDiagnostics=0\"\nExecStart=/bin/sh \"${JACKETT_DIR}/jackett_launcher.sh\"\nTimeoutStopSec=30\n\n[Install]\nWantedBy=multi-user.target\n\nEOL\nif [ $? -ne 0 ]; then\n    echo \"${BOLDRED}ERROR${NC}: Can not create the file '${JACKETT_SERVICE_PATH}'\"\n    echo \"The UnitPath of systemd changes from one distribution to another. You may have to edit the script and change the path manually.\"\n    exit 1\nfi\n\necho \"Installing Jackett service ...\"\n# Reload systemd daemon\nif ! systemctl daemon-reload; then\n    echo \"${BOLDRED}ERROR${NC}: Can not reload systemd daemon\"\n    exit 1\nfi\n\n# Enable the service for following restarts\nif ! systemctl enable \"${JACKETT_SERVICE}\"; then\n    echo \"${BOLDRED}ERROR${NC}: Can not enable the service '${JACKETT_SERVICE}'\"\n    exit 1\nfi\n\n# Run the service\nif systemctl start \"${JACKETT_SERVICE}\"; then\n    echo \"${BOLDGREEN}Service successfully installed and launched!${NC}\"\nelse\n    echo \"${BOLDRED}ERROR${NC}: Can not start the service '${JACKETT_SERVICE}'\"\n    exit 1\nfi\n"
        },
        {
          "name": "install_service_systemd_mono.sh",
          "type": "blob",
          "size": 3.58203125,
          "content": "#!/bin/bash\n\n# If you have problems installing Jackett, please open an issue on\n# https://github.com/Jackett/Jackett/issues\n\n# Setting up colors\nBOLDRED=\"$(printf '\\033[1;31m')\"\nBOLDGREEN=\"$(printf '\\033[1;32m')\"\nNC=\"$(printf '\\033[0m')\" # No Color\n\n# Check if the install script is running as root\nif [ \"$EUID\" -ne 0 ]; then\n    echo \"${BOLDRED}ERROR${NC}: Please run this script as root\"\n    exit 1\nfi\n\n# Check if Jackett service is running\nJACKETT_SERVICE=\"jackett.service\"\necho \"Checking if the service '${JACKETT_SERVICE}' is running ...\"\nif systemctl is-active --quiet \"${JACKETT_SERVICE}\"; then\n    echo \"Service '${JACKETT_SERVICE}' is running\"\n\n    # Stop and unload the service\n    if systemctl stop \"${JACKETT_SERVICE}\"; then\n        echo \"Service '${JACKETT_SERVICE}' stopped\"\n    else\n        echo \"${BOLDRED}ERROR${NC}: The service '${JACKETT_SERVICE}' can not be stopped\"\n        exit 1\n    fi\n\nelse\n    echo \"Service '${JACKETT_SERVICE}' is not running\"\nfi\n\n# Move working directory to Jackett's\nJACKETT_DIR=\"$(dirname \"$(readlink -f \"$0\")\")\"\necho \"Jackett will be installed in '${JACKETT_DIR}'\"\nif ! cd \"${JACKETT_DIR}\"; then\n    echo \"${BOLDRED}ERROR${NC}: Can not cd into '${JACKETT_DIR}' folder\"\n    exit 1\nfi\n\n# Check if we're running from Jackett's directory\nif [ ! -f ./JackettConsole.exe ]; then\n    echo \"${BOLDRED}ERROR${NC}: Can not locate 'JackettConsole.exe' file in '${JACKETT_DIR}'.\"\n    echo \"Is the script in the right directory?\"\n    exit 1\nfi\n\n# Check if Jackett's owner is root\nJACKETT_USER=\"$(stat -c \"%U\" ./JackettConsole.exe)\"\nif [ \"${JACKETT_USER}\" == \"root\" ] || [ \"${JACKETT_USER}\" == \"UNKNOWN\" ] ; then\n    echo \"${BOLDRED}ERROR${NC}: The owner of Jackett directory is '${JACKETT_USER}'.\"\n    echo \"Please, change the owner with the command 'chown <user>:<user> -R \\\"${JACKETT_DIR}\\\"'\"\n    echo \"The user <user> will be used to run Jackett.\"\n    exit 1\nfi\necho \"Jackett will be executed with the user '${JACKETT_USER}'\"\n\n# Check if Mono is installed\necho \"Checking if Mono is installed ...\"\nif ! command -v mono > /dev/null; then\n    echo \"${BOLDRED}ERROR${NC}: Jackett requires Mono but it's not installed\"\n    exit 1\nfi\nMONO_DIR=\"$(dirname \"$(command -v mono)\")\"\necho \"Mono is installed in '${MONO_DIR}'\"\n\n# Write the systemd service descriptor\nJACKETT_SERVICE_PATH=\"/etc/systemd/system/${JACKETT_SERVICE}\"\necho \"Creating Jackett unit file in '${JACKETT_SERVICE_PATH}' ...\"\ncat > \"${JACKETT_SERVICE_PATH}\" <<EOL\n[Unit]\nDescription=Jackett Daemon\nAfter=network.target\n\n[Service]\nSyslogIdentifier=jackett\nRestart=always\nRestartSec=5\nType=simple\nUser=${JACKETT_USER}\nGroup=${JACKETT_USER}\nWorkingDirectory=${JACKETT_DIR}\nExecStart=\"${MONO_DIR}/mono\" --debug \"${JACKETT_DIR}/JackettConsole.exe\" --NoRestart\nTimeoutStopSec=30\n\n[Install]\nWantedBy=multi-user.target\n\nEOL\nif [ $? -ne 0 ]; then\n    echo \"${BOLDRED}ERROR${NC}: Can not create the file '${JACKETT_SERVICE_PATH}'\"\n    echo \"The UnitPath of systemd changes from one distribution to another. You may have to edit the script and change the path manually.\"\n    exit 1\nfi\n\necho \"Installing Jackett service ...\"\n# Reload systemd daemon\nif ! systemctl daemon-reload; then\n    echo \"${BOLDRED}ERROR${NC}: Can not reload systemd daemon\"\n    exit 1\nfi\n\n# Enable the service for following restarts\nif ! systemctl enable \"${JACKETT_SERVICE}\"; then\n    echo \"${BOLDRED}ERROR${NC}: Can not enable the service '${JACKETT_SERVICE}'\"\n    exit 1\nfi\n\n# Run the service\nif systemctl start \"${JACKETT_SERVICE}\"; then\n    echo \"${BOLDGREEN}Service successfully installed and launched!${NC}\"\nelse\n    echo \"${BOLDRED}ERROR${NC}: Can not start the service '${JACKETT_SERVICE}'\"\n    exit 1\nfi\n"
        },
        {
          "name": "jackett_launcher.bat",
          "type": "blob",
          "size": 0.37890625,
          "content": ":: Helper script to fix\n:: https://github.com/Jackett/Jackett/issues/10068\n\n@echo off\n\n:: Wait until the updater ends\n:loop\ntasklist | find /i \"JackettUpdater.exe\" > nul 2>&1\nif errorlevel 1 (\n  goto continue\n) else (\n  echo JackettUpdater is still running\n  timeout /t 1 /nobreak > nul\n  goto loop\n)\n\n:: Start Jackett Tray\n:continue\nstart \"\" \"%0\\..\\JackettTray.exe\" --UpdatedVersion yes\n"
        },
        {
          "name": "jackett_launcher.sh",
          "type": "blob",
          "size": 0.4375,
          "content": "#!/bin/sh\n\n# Helper script to fix\n# https://github.com/Jackett/Jackett/issues/5208#issuecomment-547565515\n\n# Get full Jackett root path\nJACKETT_DIR=\"$(dirname \"$(readlink -f \"$0\")\")\"\n\n# Launch Jackett (with CLI parameters)\n\"${JACKETT_DIR}/jackett\" --NoRestart \"$@\"\nec=$?\n\n# Get user running the service\nJACKETT_USER=$(whoami)\n\n# Wait until the updater ends\nwhile pgrep -u \"${JACKETT_USER}\" JackettUpdater > /dev/null; do\n    sleep 1\ndone\n\nexit $ec\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall_jackett_macos",
          "type": "blob",
          "size": 1.689453125,
          "content": "#!/bin/zsh\n\n#Setting up colors\nBOLDRED=\"$(printf '\\033[1;31m')\"\nBOLDGREEN=\"$(printf '\\033[1;32m')\"\nNC=\"$(printf '\\033[0m')\" # No Color\n\n# Move working directory to Jackett's\ncd \"$(dirname \"$0\")\"\n\n# Check if we're running from Jackett's directory\nif [ ! -f ./jackett ]; then\necho \"${BOLDRED}ERROR${NC}: Couldn't locate ./jackett - Is the script in the right directory?\"\n    exit 1\nfi\njackettdir=\"$(pwd)\"\n\necho \"This script will uninstall Jackett. Do you want to proceed?\"\nselect yn in \"Yes\" \"No\"; do\n    case $yn in\n        Yes ) break;;\n        No ) exit;;\n    esac\ndone\n\necho \"What should be removed? ${BOLDRED}WARNING${NC}: deleting binaries will remove all files located in ${jackettdir}. ${BOLDRED}WARNING${NC}: deleting config files prevents Jackett from being reinstalled.\"\nselect yn in \"Only agent\" \"Only agent and binaries\" \"Agent, binaries and config\"; do\n    case $yn in\n        \"Only agent\" ) delagent=true; break;;\n        \"Only agent and binaries\" ) delagent=true; delbin=true; break;;\n        \"Agent, binaries and config\" ) delagent=true; delbin=true; delconf=true; break;;\n    esac\ndone\n\n# Unload and delete agent\nif [[ \"$delagent\" = true ]]; then\n    echo \"Deleting agent...\"\n    launchctl bootout gui/$(id -u)/org.user.Jackett\n    rm ~/Library/LaunchAgents/org.user.Jackett.plist\nfi\n\n# Deleting the current folder\nif [[ \"$delbin\" = true ]]; then\n    echo \"Deleting binaries...\"\n    rm -R $jackettdir\nelse\n    echo \"Binaries have not been deleted from ${jackettdir}\"\nfi\n\n# Remove config files\nif [[ \"$delconf\" = true ]]; then\n    echo \"Deleting config files...\"\n    rm -R ~/.config/Jackett/\nelse\n    echo \"Configuration files have been kept in ~/.config/Jackett/\"\nfi\n\necho \"${BOLDGREEN}Uninstall completed.${NC}\"\n\n"
        },
        {
          "name": "uninstall_service_systemd.sh",
          "type": "blob",
          "size": 1.2705078125,
          "content": "#!/bin/bash\n\n# Define the directory where Jackett was installed\nINSTALL_DIR1=\"/opt/Jackett\"\nINSTALL_DIR2=\"/opt/jackett\"\n\n# Define the systemd service file for Jackett\nJACKETT_SERVICE_PATH=\"/etc/systemd/system/jackett.service\"\n\n# Ensure the script is running with superuser privileges\nif [ \"$(id -u)\" -ne 0 ]; then\n  echo \"This script must be run as root. Try using 'sudo bash $0'.\"\n  exit 1\nfi\n\necho \"Starting Jackett uninstallation...\"\n\n# Stop the Jackett service\necho \"Stopping the Jackett service...\"\nif systemctl stop jackett.service; then\n  echo \"Jackett service stopped successfully.\"\nelse\n  echo \"Failed to stop the Jackett service. It may not have been running.\"\nfi\n\n# Disable the Jackett service\necho \"Disabling the Jackett service...\"\nif systemctl disable jackett.service; then\n  echo \"Jackett service disabled successfully.\"\nelse\n  echo \"Failed to disable the Jackett service.\"\nfi\n\n# Remove the systemd service file\necho \"Removing the systemd service file...\"\nrm -vf \"$JACKETT_SERVICE_PATH\"\n\n# Reload systemd to remove traces of the Jackett service\necho \"Reloading systemd daemon...\"\nsystemctl daemon-reload\n\n# Remove the Jackett installation directory\necho \"Removing Jackett installation directory...\"\nrm -rf \"$INSTALL_DIR1\"\nrm -rf \"$INSTALL_DIR2\"\n\necho \"Jackett uninstallation finished.\"\n"
        },
        {
          "name": "yamllint.yml",
          "type": "blob",
          "size": 0.4794921875,
          "content": "---\n#\n# doc https://yamllint.readthedocs.io/en/stable/\n#\n# run in local (linux)\n# install => sudo python3 -m pip install yamllint\n# run => yamllint -s -c ./yamllint.yml ./src/Jackett.Common/Definitions/\n#\nextends: default\n\nrules:\n  comments:\n    min-spaces-from-content: 1\n  comments-indentation: disable\n  document-start:\n    level: error\n  empty-lines:\n    max: 1\n  empty-values: enable\n  indentation:\n    spaces: 2\n  line-length: disable\n  new-lines:\n    type: platform\n  truthy: disable\n"
        }
      ]
    }
  ]
}