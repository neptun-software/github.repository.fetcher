{
  "metadata": {
    "timestamp": 1736711219220,
    "page": 5,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/semantic-kernel",
      "stars": 22646,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 34.4873046875,
          "content": "# To learn more about .editorconfig see https://aka.ms/editorconfigdocs\n###############################\n# Core EditorConfig Options   #\n###############################\nroot = true\n# All files\n[*]\nindent_style = space\nend_of_line = lf\n\n# XML project files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size = 2\n\n# XML config files\n[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]\nindent_size = 2\n\n# YAML config files\n[*.{yml,yaml}]\ntab_width = 2\nindent_size = 2\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# JSON config files\n[*.json]\ntab_width = 2\nindent_size = 2\ninsert_final_newline = false\ntrim_trailing_whitespace = true\n\n# Typescript files\n[*.{ts,tsx}]\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ntab_width = 4\nindent_size = 4\nfile_header_template = Copyright (c) Microsoft. All rights reserved.\n\n# Stylesheet files\n[*.{css,scss,sass,less}]\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ntab_width = 4\nindent_size = 4\n\n# Code files\n[*.{cs,csx,vb,vbx}]\ntab_width = 4\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ncharset = utf-8-bom\nfile_header_template = Copyright (c) Microsoft. All rights reserved.\n\n###############################\n# .NET Coding Conventions     #\n###############################\n[*.{cs,vb}]\n# Organize usings\ndotnet_sort_system_directives_first = true\n# this. preferences\ndotnet_style_qualification_for_field = true:error\ndotnet_style_qualification_for_property = true:error\ndotnet_style_qualification_for_method = true:error\ndotnet_style_qualification_for_event = true:error\n# Language keywords vs BCL types preferences\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\n# Parentheses preferences\ndotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion\ndotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion\ndotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent\n# Modifier preferences\ndotnet_style_require_accessibility_modifiers = for_non_interface_members:error\ndotnet_style_readonly_field = true:warning\n# Expression-level preferences\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:silent\ndotnet_style_prefer_auto_properties = true:suggestion\ndotnet_style_prefer_conditional_expression_over_assignment = true:silent\ndotnet_style_prefer_conditional_expression_over_return = true:silent\ndotnet_style_prefer_simplified_interpolation = true:suggestion\ndotnet_style_operator_placement_when_wrapping = beginning_of_line\ndotnet_style_prefer_simplified_boolean_expressions = true:suggestion\ndotnet_style_prefer_compound_assignment = true:suggestion\n# Code quality rules\ndotnet_code_quality_unused_parameters = all:suggestion\n\n[*.cs]\n# Note: these settings cause \"dotnet format\" to fix the code. You should review each change if you uses \"dotnet format\".\ndotnet_diagnostic.RCS1036.severity = warning # Remove unnecessary blank line.\ndotnet_diagnostic.RCS1037.severity = warning # Remove trailing white-space.\ndotnet_diagnostic.RCS1097.severity = warning # Remove redundant 'ToString' call.\ndotnet_diagnostic.RCS1138.severity = warning # Add summary to documentation comment.\ndotnet_diagnostic.RCS1139.severity = warning # Add summary element to documentation comment.\ndotnet_diagnostic.RCS1168.severity = warning # Parameter name 'foo' differs from base name 'bar'.\ndotnet_diagnostic.RCS1175.severity = warning # Unused 'this' parameter 'operation'.\ndotnet_diagnostic.RCS1192.severity = warning # Unnecessary usage of verbatim string literal.\ndotnet_diagnostic.RCS1194.severity = warning # Implement exception constructors.\ndotnet_diagnostic.RCS1211.severity = warning # Remove unnecessary else clause.\ndotnet_diagnostic.RCS1214.severity = warning # Unnecessary interpolated string.\ndotnet_diagnostic.RCS1225.severity = warning # Make class sealed.\ndotnet_diagnostic.RCS1232.severity = warning # Order elements in documentation comment.\n\n# Commented out because `dotnet format` change can be disruptive.\n# dotnet_diagnostic.RCS1085.severity = warning # Use auto-implemented property.\n\n# Commented out because `dotnet format` removes the xmldoc element, while we should add the missing documentation instead.\n# dotnet_diagnostic.RCS1228.severity = warning # Unused element in documentation comment.\n\n# Diagnostics elevated as warnings\ndotnet_diagnostic.CA1000.severity = warning # Do not declare static members on generic types\ndotnet_diagnostic.CA1031.severity = warning # Do not catch general exception types\ndotnet_diagnostic.CA1050.severity = warning # Declare types in namespaces\ndotnet_diagnostic.CA1063.severity = warning # Implement IDisposable correctly\ndotnet_diagnostic.CA1064.severity = warning # Exceptions should be public\ndotnet_diagnostic.CA1416.severity = warning # Validate platform compatibility\ndotnet_diagnostic.CA1508.severity = warning # Avoid dead conditional code\ndotnet_diagnostic.CA1852.severity = warning # Sealed classes\ndotnet_diagnostic.CA1859.severity = warning # Use concrete types when possible for improved performance\ndotnet_diagnostic.CA1860.severity = warning # Prefer comparing 'Count' to 0 rather than using 'Any()', both for clarity and for performance\ndotnet_diagnostic.CA2000.severity = warning # Call System.IDisposable.Dispose on object before all references to it are out of scope\ndotnet_diagnostic.CA2201.severity = warning # Exception type System.Exception is not sufficiently specific\n\ndotnet_diagnostic.IDE0001.severity = warning # Simplify name\ndotnet_diagnostic.IDE0005.severity = warning # Remove unnecessary using directives\ndotnet_diagnostic.IDE0009.severity = warning # Add this or Me qualification\ndotnet_diagnostic.IDE0011.severity = warning # Add braces\ndotnet_diagnostic.IDE0018.severity = warning # Inline variable declaration\n\ndotnet_diagnostic.IDE0032.severity = warning # Use auto-implemented property\ndotnet_diagnostic.IDE0034.severity = warning # Simplify 'default' expression\ndotnet_diagnostic.IDE0035.severity = warning # Remove unreachable code\ndotnet_diagnostic.IDE0040.severity = warning # Add accessibility modifiers\ndotnet_diagnostic.IDE0049.severity = warning # Use language keywords instead of framework type names for type references\ndotnet_diagnostic.IDE0050.severity = warning # Convert anonymous type to tuple\ndotnet_diagnostic.IDE0051.severity = warning # Remove unused private member\ndotnet_diagnostic.IDE0055.severity = warning # Formatting rule\ndotnet_diagnostic.IDE0060.severity = warning # Remove unused parameter\ndotnet_diagnostic.IDE0070.severity = warning # Use 'System.HashCode.Combine'\ndotnet_diagnostic.IDE0071.severity = warning # Simplify interpolation\ndotnet_diagnostic.IDE0073.severity = warning # Require file header\ndotnet_diagnostic.IDE0082.severity = warning # Convert typeof to nameof\ndotnet_diagnostic.IDE0090.severity = warning # Simplify new expression\ndotnet_diagnostic.IDE0161.severity = warning # Use file-scoped namespace\n\n# Suppressed diagnostics\ndotnet_diagnostic.CA1002.severity = none # Change 'List<string>' in '...' to use 'Collection<T>' ...\ndotnet_diagnostic.CA1032.severity = none # We're using RCS1194 which seems to cover more ctors\ndotnet_diagnostic.CA1034.severity = none # Do not nest type. Alternatively, change its accessibility so that it is not externally visible\ndotnet_diagnostic.CA1062.severity = none # Disable null check, C# already does it for us\ndotnet_diagnostic.CA1303.severity = none # Do not pass literals as localized parameters\ndotnet_diagnostic.CA1305.severity = none # Operation could vary based on current user's locale settings\ndotnet_diagnostic.CA1307.severity = none # Operation has an overload that takes a StringComparison\ndotnet_diagnostic.CA1508.severity = none # Avoid dead conditional code. Too many false positives.\ndotnet_diagnostic.CA1510.severity = none # ArgumentNullException.Throw\ndotnet_diagnostic.CA1512.severity = none # ArgumentOutOfRangeException.Throw\ndotnet_diagnostic.CA1515.severity = none # Making public types from exes internal\ndotnet_diagnostic.CA1805.severity = none # Member is explicitly initialized to its default value\ndotnet_diagnostic.CA1822.severity = none # Member does not access instance data and can be marked as static\ndotnet_diagnostic.CA1848.severity = none # For improved performance, use the LoggerMessage delegates\ndotnet_diagnostic.CA1849.severity = none # Use async equivalent; analyzer is currently noisy\ndotnet_diagnostic.CA1865.severity = none # StartsWith(char)\ndotnet_diagnostic.CA1867.severity = none # EndsWith(char)\ndotnet_diagnostic.CA2007.severity = none # Do not directly await a Task\ndotnet_diagnostic.CA2225.severity = none # Operator overloads have named alternates\ndotnet_diagnostic.CA2227.severity = none # Change to be read-only by removing the property setter\ndotnet_diagnostic.CA2253.severity = none # Named placeholders in the logging message template should not be comprised of only numeric characters\ndotnet_diagnostic.CA2253.severity = none # Named placeholders in the logging message template should not be comprised of only numeric characters\ndotnet_diagnostic.CA2263.severity = suggestion # Use generic overload\n\ndotnet_diagnostic.VSTHRD003.severity = none # Waiting on thread from another context\ndotnet_diagnostic.VSTHRD103.severity = none # Use async equivalent; analyzer is currently noisy\ndotnet_diagnostic.VSTHRD111.severity = none # Use .ConfigureAwait(bool) is hidden by default, set to none to prevent IDE from changing on autosave\ndotnet_diagnostic.VSTHRD200.severity = none # Use Async suffix for async methods\ndotnet_diagnostic.xUnit1004.severity = none # Test methods should not be skipped. Remove the Skip property to start running the test again.\n\ndotnet_diagnostic.RCS1021.severity = none # Use expression-bodied lambda.\ndotnet_diagnostic.RCS1032.severity = none # Remove redundant parentheses.\ndotnet_diagnostic.RCS1061.severity = none # Merge 'if' with nested 'if'.\ndotnet_diagnostic.RCS1069.severity = none # Remove unnecessary case label.\ndotnet_diagnostic.RCS1074.severity = none # Remove redundant constructor.\ndotnet_diagnostic.RCS1077.severity = none # Optimize LINQ method call.\ndotnet_diagnostic.RCS1118.severity = none # Mark local variable as const.\ndotnet_diagnostic.RCS1124.severity = none # Inline local variable.\ndotnet_diagnostic.RCS1129.severity = none # Remove redundant field initialization.\ndotnet_diagnostic.RCS1140.severity = none # Add exception to documentation comment.\ndotnet_diagnostic.RCS1141.severity = none # Add 'param' element to documentation comment.\ndotnet_diagnostic.RCS1142.severity = none # Add 'typeparam' element to documentation comment.\ndotnet_diagnostic.RCS1146.severity = none # Use conditional access.\ndotnet_diagnostic.RCS1151.severity = none # Remove redundant cast.\ndotnet_diagnostic.RCS1158.severity = none # Static member in generic type should use a type parameter.\ndotnet_diagnostic.RCS1161.severity = none # Enum should declare explicit value\ndotnet_diagnostic.RCS1163.severity = none # Unused parameter 'foo'.\ndotnet_diagnostic.RCS1170.severity = none # Use read-only auto-implemented property.\ndotnet_diagnostic.RCS1173.severity = none # Use coalesce expression instead of 'if'.\ndotnet_diagnostic.RCS1181.severity = none # Convert comment to documentation comment.\ndotnet_diagnostic.RCS1186.severity = none # Use Regex instance instead of static method.\ndotnet_diagnostic.RCS1188.severity = none # Remove redundant auto-property initialization.\ndotnet_diagnostic.RCS1189.severity = none # Add region name to #endregion.\ndotnet_diagnostic.RCS1197.severity = none # Optimize StringBuilder.AppendLine call.\ndotnet_diagnostic.RCS1201.severity = none # Use method chaining.\ndotnet_diagnostic.RCS1205.severity = none # Order named arguments according to the order of parameters.\ndotnet_diagnostic.RCS1212.severity = none # Remove redundant assignment.\ndotnet_diagnostic.RCS1217.severity = none # Convert interpolated string to concatenation.\ndotnet_diagnostic.RCS1222.severity = none # Merge preprocessor directives.\ndotnet_diagnostic.RCS1226.severity = none # Add paragraph to documentation comment.\ndotnet_diagnostic.RCS1229.severity = none # Use async/await when necessary.\ndotnet_diagnostic.RCS1234.severity = none # Enum duplicate value\ndotnet_diagnostic.RCS1238.severity = none # Avoid nested ?: operators.\ndotnet_diagnostic.RCS1241.severity = none # Implement IComparable when implementing IComparable<T><T>.\n\ndotnet_diagnostic.IDE0001.severity = none # Simplify name\ndotnet_diagnostic.IDE0002.severity = none # Simplify member access\ndotnet_diagnostic.IDE0004.severity = none # Remove unnecessary cast\ndotnet_diagnostic.IDE0010.severity = none # Populate switch\ndotnet_diagnostic.IDE0021.severity = none # Use block body for constructors\ndotnet_diagnostic.IDE0022.severity = none # Use block body for methods\ndotnet_diagnostic.IDE0024.severity = none # Use block body for operator\ndotnet_diagnostic.IDE0035.severity = none # Remove unreachable code\ndotnet_diagnostic.IDE0051.severity = none # Remove unused private member\ndotnet_diagnostic.IDE0052.severity = none # Remove unread private member\ndotnet_diagnostic.IDE0058.severity = none # Remove unused expression value\ndotnet_diagnostic.IDE0059.severity = none # Unnecessary assignment of a value\ndotnet_diagnostic.IDE0060.severity = none # Remove unused parameter\ndotnet_diagnostic.IDE0061.severity = none # Use block body for local function\ndotnet_diagnostic.IDE0079.severity = none # Remove unnecessary suppression.\ndotnet_diagnostic.IDE0080.severity = none # Remove unnecessary suppression operator.\ndotnet_diagnostic.IDE0100.severity = none # Remove unnecessary equality operator\ndotnet_diagnostic.IDE0110.severity = none # Remove unnecessary discards\ndotnet_diagnostic.IDE0130.severity = none # Namespace does not match folder structure\ndotnet_diagnostic.IDE0290.severity = none # Use primary constructor\ndotnet_diagnostic.IDE0032.severity = none # Use auto property\ndotnet_diagnostic.IDE0160.severity = none # Use block-scoped namespace\ndotnet_diagnostic.IDE1006.severity = warning # Naming rule violations\ndotnet_diagnostic.IDE0046.severity = suggestion # If statement can be simplified\ndotnet_diagnostic.IDE0056.severity = suggestion # Indexing can be simplified\ndotnet_diagnostic.IDE0057.severity = suggestion # Substring can be simplified\n\n###############################\n# Naming Conventions          #\n###############################\n\n# Styles\n\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\n\ndotnet_naming_style.camel_case_style.capitalization = camel_case\n\ndotnet_naming_style.static_underscored.capitalization = camel_case\ndotnet_naming_style.static_underscored.required_prefix = s_\n\ndotnet_naming_style.underscored.capitalization = camel_case\ndotnet_naming_style.underscored.required_prefix = _\n\ndotnet_naming_style.uppercase_with_underscore_separator.capitalization = all_upper\ndotnet_naming_style.uppercase_with_underscore_separator.word_separator = _\n\ndotnet_naming_style.end_in_async.required_prefix =\ndotnet_naming_style.end_in_async.required_suffix = Async\ndotnet_naming_style.end_in_async.capitalization = pascal_case\ndotnet_naming_style.end_in_async.word_separator =\n\n# Symbols\n\ndotnet_naming_symbols.constant_fields.applicable_kinds = field\ndotnet_naming_symbols.constant_fields.applicable_accessibilities  = *\ndotnet_naming_symbols.constant_fields.required_modifiers = const\n\ndotnet_naming_symbols.local_constant.applicable_kinds = local\ndotnet_naming_symbols.local_constant.applicable_accessibilities  = *\ndotnet_naming_symbols.local_constant.required_modifiers = const\n\ndotnet_naming_symbols.private_static_fields.applicable_kinds = field\ndotnet_naming_symbols.private_static_fields.applicable_accessibilities = private\ndotnet_naming_symbols.private_static_fields.required_modifiers = static\n\ndotnet_naming_symbols.private_fields.applicable_kinds = field\ndotnet_naming_symbols.private_fields.applicable_accessibilities = private\n\ndotnet_naming_symbols.any_async_methods.applicable_kinds = method\ndotnet_naming_symbols.any_async_methods.applicable_accessibilities = *\ndotnet_naming_symbols.any_async_methods.required_modifiers = async\n\n# Rules\n\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style\ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity = error\n\ndotnet_naming_rule.local_constant_should_be_pascal_case.symbols = local_constant\ndotnet_naming_rule.local_constant_should_be_pascal_case.style = pascal_case_style\ndotnet_naming_rule.local_constant_should_be_pascal_case.severity = error\n\ndotnet_naming_rule.private_static_fields_underscored.symbols = private_static_fields\ndotnet_naming_rule.private_static_fields_underscored.style = static_underscored\ndotnet_naming_rule.private_static_fields_underscored.severity = error\n\ndotnet_naming_rule.private_fields_underscored.symbols = private_fields\ndotnet_naming_rule.private_fields_underscored.style = underscored\ndotnet_naming_rule.private_fields_underscored.severity = error\n\ndotnet_naming_rule.async_methods_end_in_async.symbols = any_async_methods\ndotnet_naming_rule.async_methods_end_in_async.style = end_in_async\ndotnet_naming_rule.async_methods_end_in_async.severity = error\n\n###############################\n# C# Coding Conventions       #\n###############################\n\n# var preferences\ncsharp_style_var_for_built_in_types = false:none\ncsharp_style_var_when_type_is_apparent = false:none\ncsharp_style_var_elsewhere = false:none\n# Expression-bodied members\ncsharp_style_expression_bodied_methods = false:silent\ncsharp_style_expression_bodied_constructors = false:silent\ncsharp_style_expression_bodied_operators = false:silent\ncsharp_style_expression_bodied_properties = true:silent\ncsharp_style_expression_bodied_indexers = true:silent\ncsharp_style_expression_bodied_accessors = true:silent\n# Pattern matching preferences\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\n# Null-checking preferences\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n# Modifier preferences\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion\n# Expression-level preferences\ncsharp_prefer_braces = true:error\ncsharp_style_deconstructed_variable_declaration = true:suggestion\ncsharp_prefer_simple_default_expression = true:suggestion\ncsharp_style_prefer_local_over_anonymous_function = true:error\ncsharp_style_inlined_variable_declaration = true:suggestion\n\n###############################\n# C# Formatting Rules         #\n###############################\n\n# New line preferences\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = false # Does not work with resharper, forcing code to be on long lines instead of wrapping\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_between_query_expression_clauses = true\n# Indentation preferences\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_case_contents_when_block = false\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = flush_left\n# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\n# Wrapping preferences\ncsharp_preserve_single_line_statements = true\ncsharp_preserve_single_line_blocks = true\ncsharp_using_directive_placement = outside_namespace:warning\ncsharp_prefer_simple_using_statement = true:suggestion\ncsharp_style_namespace_declarations = file_scoped:warning\ncsharp_style_prefer_method_group_conversion = true:silent\ncsharp_style_prefer_top_level_statements = true:silent\ncsharp_style_expression_bodied_lambdas = true:silent\ncsharp_style_expression_bodied_local_functions = false:silent\n\n###############################\n# Resharper Rules             #\n###############################\n\n# Resharper disabled rules: https://www.jetbrains.com/help/resharper/Reference__Code_Inspections_CSHARP.html#CodeSmell\nresharper_redundant_linebreak_highlighting = none # Disable Resharper's \"Redundant line break\" highlighting\nresharper_missing_linebreak_highlighting = none # Disable Resharper's \"Missing line break\" highlighting\nresharper_bad_empty_braces_line_breaks_highlighting = none # Disable Resharper's \"Bad empty braces line breaks\" highlighting\nresharper_missing_indent_highlighting = none # Disable Resharper's \"Missing indent\" highlighting\nresharper_missing_blank_lines_highlighting = none # Disable Resharper's \"Missing blank lines\" highlighting\nresharper_wrong_indent_size_highlighting = none # Disable Resharper's \"Wrong indent size\" highlighting\nresharper_bad_indent_highlighting = none # Disable Resharper's \"Bad indent\" highlighting\nresharper_bad_expression_braces_line_breaks_highlighting = none # Disable Resharper's \"Bad expression braces line breaks\" highlighting\nresharper_multiple_spaces_highlighting = none # Disable Resharper's \"Multiple spaces\" highlighting\nresharper_bad_expression_braces_indent_highlighting = none # Disable Resharper's \"Bad expression braces indent\" highlighting\nresharper_bad_control_braces_indent_highlighting = none # Disable Resharper's \"Bad control braces indent\" highlighting\nresharper_bad_preprocessor_indent_highlighting = none # Disable Resharper's \"Bad preprocessor indent\" highlighting\nresharper_redundant_blank_lines_highlighting = none # Disable Resharper's \"Redundant blank lines\" highlighting\nresharper_multiple_statements_on_one_line_highlighting = none # Disable Resharper's \"Multiple statements on one line\" highlighting\nresharper_bad_braces_spaces_highlighting = none # Disable Resharper's \"Bad braces spaces\" highlighting\nresharper_outdent_is_off_prev_level_highlighting = none # Disable Resharper's \"Outdent is off previous level\" highlighting\nresharper_bad_symbol_spaces_highlighting = none # Disable Resharper's \"Bad symbol spaces\" highlighting\nresharper_bad_colon_spaces_highlighting = none # Disable Resharper's \"Bad colon spaces\" highlighting\nresharper_bad_semicolon_spaces_highlighting = none # Disable Resharper's \"Bad semicolon spaces\" highlighting\nresharper_bad_square_brackets_spaces_highlighting = none # Disable Resharper's \"Bad square brackets spaces\" highlighting\nresharper_bad_parens_spaces_highlighting = none # Disable Resharper's \"Bad parens spaces\" highlighting\n\n# Resharper enabled rules: https://www.jetbrains.com/help/resharper/Reference__Code_Inspections_CSHARP.html#CodeSmell\nresharper_comment_typo_highlighting = suggestion # Resharper's \"Comment typo\" highlighting\nresharper_redundant_using_directive_highlighting = warning # Resharper's \"Redundant using directive\" highlighting\nresharper_inconsistent_naming_highlighting = warning # Resharper's \"Inconsistent naming\" highlighting\nresharper_redundant_this_qualifier_highlighting = warning # Resharper's \"Redundant 'this' qualifier\" highlighting\nresharper_arrange_this_qualifier_highlighting = warning # Resharper's \"Arrange 'this' qualifier\" highlighting\n\n###############################\n# Java Coding Conventions     #\n###############################\n[*.java]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = false\ntab_width = 4\nij_formatter_off_tag = @formatter:off\nij_formatter_on_tag = @formatter:on\nij_smart_tabs = false\nij_visual_guides = none\n\nmax_line_length = 100\nij_continuation_indent_size = 4\nij_formatter_tags_enabled = false\nij_wrap_on_typing = false\n\nij_java_align_consecutive_assignments = false\nij_java_align_consecutive_variable_declarations = false\nij_java_align_group_field_declarations = false\nij_java_align_multiline_annotation_parameters = false\nij_java_align_multiline_array_initializer_expression = false\nij_java_align_multiline_assignment = false\nij_java_align_multiline_binary_operation = false\nij_java_align_multiline_chained_methods = false\nij_java_align_multiline_extends_list = false\nij_java_align_multiline_for = false\nij_java_align_multiline_method_parentheses = false\nij_java_align_multiline_parameters = false\nij_java_align_multiline_parameters_in_calls = false\nij_java_align_multiline_parenthesized_expression = false\nij_java_align_multiline_resources = false\nij_java_align_multiline_ternary_operation = false\nij_java_align_multiline_throws_list = false\nij_java_align_subsequent_simple_methods = false\nij_java_align_throws_keyword = false\nij_java_annotation_parameter_wrap = off\nij_java_array_initializer_new_line_after_left_brace = false\nij_java_array_initializer_right_brace_on_new_line = false\nij_java_array_initializer_wrap = normal\nij_java_assert_statement_colon_on_next_line = false\nij_java_assert_statement_wrap = off\nij_java_assignment_wrap = off\nij_java_binary_operation_sign_on_next_line = true\nij_java_binary_operation_wrap = normal\nij_java_blank_lines_after_anonymous_class_header = 0\nij_java_blank_lines_after_class_header = 1\nij_java_blank_lines_after_imports = 1\nij_java_blank_lines_after_package = 1\nij_java_blank_lines_around_class = 1\nij_java_blank_lines_around_field = 0\nij_java_blank_lines_around_field_in_interface = 0\nij_java_blank_lines_around_initializer = 1\nij_java_blank_lines_around_method = 1\nij_java_blank_lines_around_method_in_interface = 1\nij_java_blank_lines_before_class_end = 0\nij_java_blank_lines_before_imports = 1\nij_java_blank_lines_before_method_body = 0\nij_java_blank_lines_before_package = 0\nij_java_block_brace_style = end_of_line\nij_java_block_comment_at_first_column = true\nij_java_call_parameters_new_line_after_left_paren = false\nij_java_call_parameters_right_paren_on_new_line = false\nij_java_call_parameters_wrap = normal\nij_java_case_statement_on_separate_line = true\nij_java_catch_on_new_line = false\nij_java_class_annotation_wrap = split_into_lines\nij_java_class_brace_style = end_of_line\nij_java_class_count_to_use_import_on_demand = 999\nij_java_class_names_in_javadoc = 1\nij_java_do_not_indent_top_level_class_members = false\nij_java_do_not_wrap_after_single_annotation = false\nij_java_do_while_brace_force = always\nij_java_doc_add_blank_line_after_description = true\nij_java_doc_add_blank_line_after_param_comments = false\nij_java_doc_add_blank_line_after_return = false\nij_java_doc_add_p_tag_on_empty_lines = true\nij_java_doc_align_exception_comments = true\nij_java_doc_align_param_comments = true\nij_java_doc_do_not_wrap_if_one_line = false\nij_java_doc_enable_formatting = true\nij_java_doc_enable_leading_asterisks = true\nij_java_doc_indent_on_continuation = false\nij_java_doc_keep_empty_lines = true\nij_java_doc_keep_empty_parameter_tag = true\nij_java_doc_keep_empty_return_tag = true\nij_java_doc_keep_empty_throws_tag = true\nij_java_doc_keep_invalid_tags = true\nij_java_doc_param_description_on_new_line = false\nij_java_doc_preserve_line_breaks = false\nij_java_doc_use_throws_not_exception_tag = true\nij_java_else_on_new_line = false\nij_java_entity_dd_suffix = EJB\nij_java_entity_eb_suffix = Bean\nij_java_entity_hi_suffix = Home\nij_java_entity_lhi_prefix = Local\nij_java_entity_lhi_suffix = Home\nij_java_entity_li_prefix = Local\nij_java_entity_pk_class = java.lang.String\nij_java_entity_vo_suffix = VO\nij_java_enum_constants_wrap = off\nij_java_extends_keyword_wrap = off\nij_java_extends_list_wrap = normal\nij_java_field_annotation_wrap = split_into_lines\nij_java_finally_on_new_line = false\nij_java_for_brace_force = always\nij_java_for_statement_new_line_after_left_paren = false\nij_java_for_statement_right_paren_on_new_line = false\nij_java_for_statement_wrap = normal\nij_java_generate_final_locals = false\nij_java_generate_final_parameters = false\nij_java_if_brace_force = always\nij_java_imports_layout = $*, |, *\nij_java_indent_case_from_switch = true\nij_java_insert_inner_class_imports = true\nij_java_insert_override_annotation = true\nij_java_keep_blank_lines_before_right_brace = 2\nij_java_keep_blank_lines_between_package_declaration_and_header = 2\nij_java_keep_blank_lines_in_code = 1\nij_java_keep_blank_lines_in_declarations = 2\nij_java_keep_control_statement_in_one_line = false\nij_java_keep_first_column_comment = true\nij_java_keep_indents_on_empty_lines = false\nij_java_keep_line_breaks = true\nij_java_keep_multiple_expressions_in_one_line = false\nij_java_keep_simple_blocks_in_one_line = false\nij_java_keep_simple_classes_in_one_line = false\nij_java_keep_simple_lambdas_in_one_line = false\nij_java_keep_simple_methods_in_one_line = false\nij_java_lambda_brace_style = end_of_line\nij_java_layout_static_imports_separately = true\nij_java_line_comment_add_space = false\nij_java_line_comment_at_first_column = true\nij_java_message_dd_suffix = EJB\nij_java_message_eb_suffix = Bean\nij_java_method_annotation_wrap = split_into_lines\nij_java_method_brace_style = end_of_line\nij_java_method_call_chain_wrap = normal\nij_java_method_parameters_new_line_after_left_paren = false\nij_java_method_parameters_right_paren_on_new_line = false\nij_java_method_parameters_wrap = normal\nij_java_modifier_list_wrap = false\nij_java_names_count_to_use_import_on_demand = 999\nij_java_parameter_annotation_wrap = off\nij_java_parentheses_expression_new_line_after_left_paren = false\nij_java_parentheses_expression_right_paren_on_new_line = false\nij_java_place_assignment_sign_on_next_line = false\nij_java_prefer_longer_names = true\nij_java_prefer_parameters_wrap = false\nij_java_repeat_synchronized = true\nij_java_replace_instanceof_and_cast = false\nij_java_replace_null_check = true\nij_java_replace_sum_lambda_with_method_ref = true\nij_java_resource_list_new_line_after_left_paren = false\nij_java_resource_list_right_paren_on_new_line = false\nij_java_resource_list_wrap = off\nij_java_session_dd_suffix = EJB\nij_java_session_eb_suffix = Bean\nij_java_session_hi_suffix = Home\nij_java_session_lhi_prefix = Local\nij_java_session_lhi_suffix = Home\nij_java_session_li_prefix = Local\nij_java_session_si_suffix = Service\nij_java_space_after_closing_angle_bracket_in_type_argument = false\nij_java_space_after_colon = true\nij_java_space_after_comma = true\nij_java_space_after_comma_in_type_arguments = true\nij_java_space_after_for_semicolon = true\nij_java_space_after_quest = true\nij_java_space_after_type_cast = true\nij_java_space_before_annotation_array_initializer_left_brace = false\nij_java_space_before_annotation_parameter_list = false\nij_java_space_before_array_initializer_left_brace = false\nij_java_space_before_catch_keyword = true\nij_java_space_before_catch_left_brace = true\nij_java_space_before_catch_parentheses = true\nij_java_space_before_class_left_brace = true\nij_java_space_before_colon = true\nij_java_space_before_colon_in_foreach = true\nij_java_space_before_comma = false\nij_java_space_before_do_left_brace = true\nij_java_space_before_else_keyword = true\nij_java_space_before_else_left_brace = true\nij_java_space_before_finally_keyword = true\nij_java_space_before_finally_left_brace = true\nij_java_space_before_for_left_brace = true\nij_java_space_before_for_parentheses = true\nij_java_space_before_for_semicolon = false\nij_java_space_before_if_left_brace = true\nij_java_space_before_if_parentheses = true\nij_java_space_before_method_call_parentheses = false\nij_java_space_before_method_left_brace = true\nij_java_space_before_method_parentheses = false\nij_java_space_before_opening_angle_bracket_in_type_parameter = false\nij_java_space_before_quest = true\nij_java_space_before_switch_left_brace = true\nij_java_space_before_switch_parentheses = true\nij_java_space_before_synchronized_left_brace = true\nij_java_space_before_synchronized_parentheses = true\nij_java_space_before_try_left_brace = true\nij_java_space_before_try_parentheses = true\nij_java_space_before_type_parameter_list = false\nij_java_space_before_while_keyword = true\nij_java_space_before_while_left_brace = true\nij_java_space_before_while_parentheses = true\nij_java_space_inside_one_line_enum_braces = false\nij_java_space_within_empty_array_initializer_braces = false\nij_java_space_within_empty_method_call_parentheses = false\nij_java_space_within_empty_method_parentheses = false\nij_java_spaces_around_additive_operators = true\nij_java_spaces_around_assignment_operators = true\nij_java_spaces_around_bitwise_operators = true\nij_java_spaces_around_equality_operators = true\nij_java_spaces_around_lambda_arrow = true\nij_java_spaces_around_logical_operators = true\nij_java_spaces_around_method_ref_dbl_colon = false\nij_java_spaces_around_multiplicative_operators = true\nij_java_spaces_around_relational_operators = true\nij_java_spaces_around_shift_operators = true\nij_java_spaces_around_type_bounds_in_type_parameters = true\nij_java_spaces_around_unary_operator = false\nij_java_spaces_within_angle_brackets = false\nij_java_spaces_within_annotation_parentheses = false\nij_java_spaces_within_array_initializer_braces = false\nij_java_spaces_within_braces = false\nij_java_spaces_within_brackets = false\nij_java_spaces_within_cast_parentheses = false\nij_java_spaces_within_catch_parentheses = false\nij_java_spaces_within_for_parentheses = false\nij_java_spaces_within_if_parentheses = false\nij_java_spaces_within_method_call_parentheses = false\nij_java_spaces_within_method_parentheses = false\nij_java_spaces_within_parentheses = false\nij_java_spaces_within_switch_parentheses = false\nij_java_spaces_within_synchronized_parentheses = false\nij_java_spaces_within_try_parentheses = false\nij_java_spaces_within_while_parentheses = false\nij_java_special_else_if_treatment = true\nij_java_subclass_name_suffix = Impl\nij_java_ternary_operation_signs_on_next_line = true\nij_java_ternary_operation_wrap = normal\nij_java_test_name_suffix = Test\nij_java_throws_keyword_wrap = normal\nij_java_throws_list_wrap = off\nij_java_use_external_annotations = false\nij_java_use_fq_class_names = false\nij_java_use_single_class_imports = true\nij_java_variable_annotation_wrap = off\nij_java_visibility = public\nij_java_while_brace_force = always\nij_java_while_on_new_line = false\nij_java_wrap_comments = true\nij_java_wrap_first_method_in_call_chain = false\nij_java_wrap_long_lines = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1435546875,
          "content": "# Auto-detect text files, ensure they use LF.\n* text=auto eol=lf working-tree-encoding=UTF-8\n\n# Bash scripts\n*.sh  text eol=lf\n*.cmd text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 7.8095703125,
          "content": "dotnet/.config\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/main/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Ww][Ii][Nn]32/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.tlog\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*.json\ncoverage*.xml\ncoverage*.info\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio 6 auto-generated project file (contains which files were open etc.)\n*.vbp\n\n# Visual Studio 6 workspace and project file (working project files containing files to include in project)\n*.dsw\n*.dsp\n\n# Visual Studio 6 technical files\n*.ncb\n*.aps\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# Visual Studio History (VSHistory) files\n.vshistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n\n# Fody - auto-generated XML schema\nFodyWeavers.xsd\n\n# VS Code files for those working on multiple tools\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n*.code-workspace\n\n# Local History for Visual Studio Code\n.history/\n\n# Windows Installer files from build outputs\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# JetBrains Rider\n*.sln.iml\n*.tmp\n*.log\n*.bck\n*.tgz\n*.tar\n*.zip\n*.cer\n*.crt\n*.key\n*.pem\n\n# JetBrains IntelliJ\n.idea\n*.ipr\n*.iml\n*.iws\n\n.env\ncerts/\nlaunchSettings.json\nconfig.development.yaml\n*.development.config\n*.development.json\n.DS_Store\nnode_modules/\nobj/\nbin/\n_dev/\n.dev/\n*.devis.*\n.vs/\n*.user\n**/.vscode/chrome\n**/.vscode/.ropeproject/objectdb\n*.pyc\n.ipynb_checkpoints\n.jython_cache/\n__pycache__/\n.mypy_cache/\n__pypackages__/\n.pdm.toml\nglobal.json\n\n# doxfx\n**/DROP/\n**/TEMP/\n**/packages/\n**/bin/\n**/obj/\n_site\n\n# Yarn\n.yarn\n.yarnrc.yml\n\n# Python Environments\n.env\n.venv\n.myenv\nenv/\nvenv/\nmyvenv/\nENV/\n.venv*/\n\n# Python dist\ndist/\n\n# Peristant storage\ndata/qdrant\ndata/chatstore*\n\n# Java build\njava/**/target\njava/.mvn/wrapper/maven-wrapper.jar\n\n# Java settings\nconf.properties\n\n# Intellij configuration\n*.iml\n\n# Playwright\nplaywright-report/\n\n# Static Web App deployment config\nswa-cli.config.json\n**/copilot-chat-app/webapp/build\n**/copilot-chat-app/webapp/node_modules\n**/copilot-chat-app/webapi/data/eng.traineddata\n\n# Semantic Kernel Tools\n/.semantic-kernel\n\n# python devcontainer\n/python/.devcontainer/*\n\n# kiota workspace files\n**/.kiota"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.43359375,
          "content": "# Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\n\nResources:\n\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\n"
        },
        {
          "name": "COMMUNITY.md",
          "type": "blob",
          "size": 1.5693359375,
          "content": "# Welcome to the Semantic Kernel Community!\n\nBelow are some ways that you can get involved in the SK Community.\n\n## Engage on Github\n\n- [Discussions](https://github.com/microsoft/semantic-kernel/discussions): Ask questions, provide feedback and ideas to what you'd like to see from the Semantic Kernel.\n- [Issues](https://github.com/microsoft/semantic-kernel/issues) - If you find a bug, unexpected behavior or have a feature request, please open an issue.\n- [Pull Requests](https://github.com/microsoft/semantic-kernel/pulls) - We welcome contributions! Please see our [Contributing Guide](https://github.com/microsoft/semantic-kernel/blob/main/CONTRIBUTING.md)\n\nWe do our best to respond to each submission.\n\n## Public Community Office Hours\n\nWe regularly have Community Office Hours that are open to the **public** to join.\n\nAdd Semantic Kernel events to your calendar - we're running two community calls to cater different timezones for Q&A Office Hours:\n\n- Americas timezone: download the [calendar.ics](https://aka.ms/sk-community-calendar) file.\n- Asia Pacific timezone: download the [calendar-APAC.ics](https://aka.ms/sk-community-calendar-apac) file.\n\nIf you have any questions or if you would like to showcase your project(s), please email what you'd like us to cover here: skofficehours[at]microsoft.com.\n\nIf you are unable to make it live, all meetings will be recorded and posted online.\n\n## Engage on our Community Discord\n\nThis is a great place to ask questions, share your projects, and get help from the community.\n\nJoin using our discord link: [aka.ms/SKDiscord](https://aka.ms/SKDiscord)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.8427734375,
          "content": "# Contributing to Semantic Kernel\n\nYou can contribute to Semantic Kernel with issues and pull requests (PRs). Simply\nfiling issues for problems you encounter is a great way to contribute. Contributing\ncode is greatly appreciated.\n\n## Reporting Issues\n\nWe always welcome bug reports, API proposals and overall feedback. Here are a few\ntips on how you can make reporting your issue as effective as possible.\n\n### Where to Report\n\nNew issues can be reported in our [list of issues](https://github.com/microsoft/semantic-kernel/issues).\n\nBefore filing a new issue, please search the list of issues to make sure it does\nnot already exist.\n\nIf you do find an existing issue for what you wanted to report, please include\nyour own feedback in the discussion. Do consider upvoting (👍 reaction) the original\npost, as this helps us prioritize popular issues in our backlog.\n\n### Writing a Good Bug Report\n\nGood bug reports make it easier for maintainers to verify and root cause the\nunderlying problem.\nThe better a bug report, the faster the problem will be resolved. Ideally, a bug\nreport should contain the following information:\n\n- A high-level description of the problem.\n- A _minimal reproduction_, i.e. the smallest size of code/configuration required\n  to reproduce the wrong behavior.\n- A description of the _expected behavior_, contrasted with the _actual behavior_ observed.\n- Information on the environment: OS/distribution, CPU architecture, SDK version, etc.\n- Additional information, e.g. Is it a regression from previous versions? Are there\n  any known workarounds?\n\n## Contributing Changes\n\nProject maintainers will merge accepted code changes from contributors.\n\n### DOs and DON'Ts\n\nDO's:\n\n- **DO** follow the standard coding conventions\n\n  - [.NET](https://learn.microsoft.com/dotnet/csharp/fundamentals/coding-style/coding-conventions)\n  - [Python](https://pypi.org/project/black/)\n  - [Typescript](https://typescript-eslint.io/rules/)/[React](https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules)\n\n- **DO** give priority to the current style of the project or file you're changing\n  if it diverges from the general guidelines.\n- **DO** include tests when adding new features. When fixing bugs, start with\n  adding a test that highlights how the current behavior is broken.\n- **DO** keep the discussions focused. When a new or related topic comes up\n  it's often better to create new issue than to side track the discussion.\n- **DO** clearly state on an issue that you are going to take on implementing it.\n- **DO** blog and tweet (or whatever) about your contributions, frequently!\n\nDON'Ts:\n\n- **DON'T** surprise us with big pull requests. Instead, file an issue and start\n  a discussion so we can agree on a direction before you invest a large amount of time.\n- **DON'T** commit code that you didn't write. If you find code that you think is a good\n  fit to add to Semantic Kernel, file an issue and start a discussion before proceeding.\n- **DON'T** submit PRs that alter licensing related files or headers. If you believe\n  there's a problem with them, file an issue and we'll be happy to discuss it.\n- **DON'T** make new APIs without filing an issue and discussing with us first.\n\n### Breaking Changes\n\nContributions must maintain API signature and behavioral compatibility. Contributions\nthat include breaking changes will be rejected. Please file an issue to discuss\nyour idea or change if you believe that a breaking change is warranted.\n\n### Suggested Workflow\n\nWe use and recommend the following workflow:\n\n1. Create an issue for your work.\n   - You can skip this step for trivial changes.\n   - Reuse an existing issue on the topic, if there is one.\n   - Get agreement from the team and the community that your proposed change is\n     a good one.\n   - Clearly state that you are going to take on implementing it, if that's the case.\n     You can request that the issue be assigned to you. Note: The issue filer and\n     the implementer don't have to be the same person.\n2. Create a personal fork of the repository on GitHub (if you don't already have one).\n3. In your fork, create a branch off of main (`git checkout -b mybranch`).\n   - Name the branch so that it clearly communicates your intentions, such as\n     \"issue-123\" or \"githubhandle-issue\".\n4. Make and commit your changes to your branch.\n5. Add new tests corresponding to your change, if applicable.\n6. Run the relevant scripts in [the section below](https://github.com/microsoft/semantic-kernel/blob/main/CONTRIBUTING.md#dev-scripts) to ensure that your build is clean and all tests are passing.\n7. Create a PR against the repository's **main** branch.\n   - State in the description what issue or improvement your change is addressing.\n   - Verify that all the Continuous Integration checks are passing.\n8. Wait for feedback or approval of your changes from the code maintainers.\n9. When area owners have signed off, and all checks are green, your PR will be merged.\n\n### Development scripts\n\nThe scripts below are used to build, test, and lint within the project.\n\n- Python: see [python/DEV_SETUP.md](https://github.com/microsoft/semantic-kernel/blob/main/python/DEV_SETUP.md#pipeline-checks).\n- .NET:\n  - Build/Test: `run build.cmd` or `bash build.sh`\n  - Linting (auto-fix): `dotnet format`\n- Typescript:\n  - Build/Test: `yarn build`\n  - Linting (auto-fix): `yarn lint:fix`\n\n### Adding Plugins and Memory Connectors\n\nWhen considering contributions to plugins and memory connectors for Semantic\nKernel, please note the following guidelines:\n\n#### Plugins\n\nWe appreciate your interest in extending Semantic Kernel's functionality through\nplugins. However, we want to clarify our approach to hosting plugins within our\nGitHub repository. To maintain a clean and manageable codebase, we will not be\nhosting plugins directly in the Semantic Kernel GitHub repository.\nInstead, we encourage contributors to host their plugin code in separate\nrepositories under their own GitHub accounts or organization. You can then\nprovide a link to your plugin repository in the relevant discussions, issues,\nor documentation within the Semantic Kernel repository. This approach ensures\nthat each plugin can be maintained independently and allows for easier tracking\nof updates and issues specific to each plugin.\n\n#### Memory Connectors\n\nFor memory connectors, while we won't be directly adding hosting for them within\nthe Semantic Kernel repository, we highly recommend building memory connectors\nas separate plugins. Memory connectors play a crucial role in interfacing with\nexternal memory systems, and treating them as plugins enhances modularity and\nmaintainability.\n\n### PR - CI Process\n\nThe continuous integration (CI) system will automatically perform the required\nbuilds and run tests (including the ones you are expected to run) for PRs. Builds\nand test runs must be clean.\n\nIf the CI build fails for any reason, the PR issue will be updated with a link\nthat can be used to determine the cause of the failure.\n"
        },
        {
          "name": "FEATURE_MATRIX.md",
          "type": "blob",
          "size": 0.43359375,
          "content": "# Semantic Kernel feature matrix by language\n\nThis document has been moved to the Semantic Kernel Documentation site. You can find it by navigating to the [Supported Languages](https://learn.microsoft.com/en-us/semantic-kernel/get-started/supported-languages) page.\n\nTo make an update on the page, file a PR on the [docs repo.](https://github.com/MicrosoftDocs/semantic-kernel-docs/blob/main/semantic-kernel/get-started/supported-languages.md)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1142578125,
          "content": "    MIT License\n\n    Copyright (c) Microsoft Corporation.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.8056640625,
          "content": "# Semantic Kernel\n\n## Status\n\n- Python <br/>\n  [![Python package](https://img.shields.io/pypi/v/semantic-kernel)](https://pypi.org/project/semantic-kernel/)\n- .NET <br/>\n  [![Nuget package](https://img.shields.io/nuget/vpre/Microsoft.SemanticKernel)](https://www.nuget.org/packages/Microsoft.SemanticKernel/)[![dotnet Docker](https://github.com/microsoft/semantic-kernel/actions/workflows/dotnet-ci-docker.yml/badge.svg?branch=main)](https://github.com/microsoft/semantic-kernel/actions/workflows/dotnet-ci-docker.yml)[![dotnet Windows](https://github.com/microsoft/semantic-kernel/actions/workflows/dotnet-ci-windows.yml/badge.svg?branch=main)](https://github.com/microsoft/semantic-kernel/actions/workflows/dotnet-ci-windows.yml)\n\n## Overview\n\n[![License: MIT](https://img.shields.io/github/license/microsoft/semantic-kernel)](https://github.com/microsoft/semantic-kernel/blob/main/LICENSE)\n[![Discord](https://img.shields.io/discord/1063152441819942922?label=Discord&logo=discord&logoColor=white&color=d82679)](https://aka.ms/SKDiscord)\n\n[Semantic Kernel](https://learn.microsoft.com/en-us/semantic-kernel/overview/)\nis an SDK that integrates Large Language Models (LLMs) like\n[OpenAI](https://platform.openai.com/docs/introduction),\n[Azure OpenAI](https://azure.microsoft.com/en-us/products/ai-services/openai-service),\nand [Hugging Face](https://huggingface.co/)\nwith conventional programming languages like C#, Python, and Java. Semantic Kernel achieves this\nby allowing you to define [plugins](https://learn.microsoft.com/en-us/semantic-kernel/concepts/plugins)\nthat can be chained together\nin just a [few lines of code](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/chaining-functions?tabs=Csharp#using-the-runasync-method-to-simplify-your-code).\n\nWhat makes Semantic Kernel _special_, however, is its ability to _automatically_ orchestrate\nplugins with AI. With Semantic Kernel\n[planners](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/planner), you\ncan ask an LLM to generate a plan that achieves a user's unique goal. Afterwards,\nSemantic Kernel will execute the plan for the user.\n\nIt provides:\n\n- abstractions for AI services (such as chat, text to images, audio to text, etc.) and memory stores\n- implementations of those abstractions for services from [OpenAI](https://platform.openai.com/docs/introduction), [Azure OpenAI](https://azure.microsoft.com/en-us/products/ai-services/openai-service), [Hugging Face](https://huggingface.co/), local models, and more, and for a multitude of vector databases, such as those from [Chroma](https://docs.trychroma.com/getting-started), [Qdrant](https://qdrant.tech/), [Milvus](https://milvus.io/), and [Azure](https://learn.microsoft.com/en-us/azure/search/search-what-is-azure-search)\n- a common representation for [plugins](https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/plugins), which can then be orchestrated automatically by AI\n- the ability to create such plugins from a multitude of sources, including from OpenAPI specifications, prompts, and arbitrary code written in the target language\n- extensible support for prompt management and rendering, including built-in handling of common formats like Handlebars and Liquid\n- and a wealth of functionality layered on top of these abstractions, such as filters for responsible AI, dependency injection integration, and more.\n\nSemantic Kernel is utilized by enterprises due to its flexibility, modularity and observability. Backed with security enhancing capabilities like telemetry support, and hooks and filters so you’ll feel confident you’re delivering responsible AI solutions at scale.\nSemantic Kernel was designed to be future proof, easily connecting your code to the latest AI models evolving with the technology as it advances. When new models are released, you’ll simply swap them out without needing to rewrite your entire codebase.\n\n#### Please star the repo to show your support for this project!\n\n![Enterprise-ready](https://learn.microsoft.com/en-us/semantic-kernel/media/enterprise-ready.png)\n\n## Getting started with Semantic Kernel\n\nThe Semantic Kernel SDK is available in C#, Python, and Java. To get started, choose your preferred language below. See the [Feature Matrix](https://learn.microsoft.com/en-us/semantic-kernel/get-started/supported-languages) for a breakdown of\nfeature parity between our currently supported languages.\n\n<table width=100%>\n  <tbody>\n    <tr>\n      <td>\n        <img align=\"left\" width=52px src=\"https://user-images.githubusercontent.com/371009/230673036-fad1e8e6-5d48-49b1-a9c1-6f9834e0d165.png\">\n        <div>\n          <a href=\"dotnet/README.md\">Using Semantic Kernel in C#</a> &nbsp<br/>\n        </div>\n      </td>\n      <td>\n        <img align=\"left\" width=52px src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/python/python-original.svg\">\n        <div>\n          <a href=\"python/README.md\">Using Semantic Kernel in Python</a>\n        </div>\n      </td>\n      <td>\n        <img align=\"left\" width=52px height=52px src=\"https://upload.wikimedia.org/wikipedia/en/3/30/Java_programming_language_logo.svg\" alt=\"Java logo\">\n        <div>\n          <a href=\"https://github.com/microsoft/semantic-kernel-java/blob/main/README.md\">Using Semantic Kernel in Java</a>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\nThe quickest way to get started with the basics is to get an API key\nfrom either OpenAI or Azure OpenAI and to run one of the C#, Python, and Java console applications/scripts below.\n\n### For C#:\n\n1. Go to the Quick start page [here](https://learn.microsoft.com/en-us/semantic-kernel/get-started/quick-start-guide?pivots=programming-language-csharp) and follow the steps to dive in.\n2. After Installing the SDK, we advise you follow the steps and code detailed to write your first console app.\n   ![dotnetmap](https://learn.microsoft.com/en-us/semantic-kernel/media/dotnetmap.png)\n\n### For Python:\n\n1. Go to the Quick start page [here](https://learn.microsoft.com/en-us/semantic-kernel/get-started/quick-start-guide?pivots=programming-language-python) and follow the steps to dive in.\n2. You'll need to ensure that you toggle to Python in the Choose a programming language table at the top of the page.\n   ![pythonmap](https://learn.microsoft.com/en-us/semantic-kernel/media/pythonmap.png)\n\n### For Java:\n\nThe Java code is in the [semantic-kernel-java](https://github.com/microsoft/semantic-kernel-java) repository. See\n[semantic-kernel-java build](https://github.com/microsoft/semantic-kernel-java/blob/main/BUILD.md) for instructions on\nhow to build and run the Java code.\n\nPlease file Java Semantic Kernel specific issues in\nthe [semantic-kernel-java](https://github.com/microsoft/semantic-kernel-java) repository.\n\n## Learning how to use Semantic Kernel\n\nThe fastest way to learn how to use Semantic Kernel is with our C# and Python Jupyter notebooks. These notebooks\ndemonstrate how to use Semantic Kernel with code snippets that you can run with a push of a button.\n\n- [Getting Started with C# notebook](dotnet/notebooks/00-getting-started.ipynb)\n- [Getting Started with Python notebook](python/samples/getting_started/00-getting-started.ipynb)\n\nOnce you've finished the getting started notebooks, you can then check out the main walkthroughs\non our Learn site. Each sample comes with a completed C# and Python project that you can run locally.\n\n1. 📖 [Getting Started](https://learn.microsoft.com/en-us/semantic-kernel/get-started/quick-start-guide)\n1. 🔌 [Detailed Samples](https://learn.microsoft.com/en-us/semantic-kernel/get-started/detailed-samples)\n1. 💡 [Concepts](https://learn.microsoft.com/en-us/semantic-kernel/concepts/kernel)\n\nFinally, refer to our API references for more details on the C# and Python APIs:\n\n- [C# API reference](https://learn.microsoft.com/en-us/dotnet/api/microsoft.semantickernel?view=semantic-kernel-dotnet)\n- [Python API reference](https://learn.microsoft.com/en-us/python/api/semantic-kernel/semantic_kernel?view=semantic-kernel-python)\n- Java API reference (coming soon)\n\n## Visual Studio Code extension: design semantic functions with ease\n\nThe Semantic Kernel extension for Visual Studio Code makes it easy to design and test semantic functions. The extension provides an interface for designing semantic functions and allows you to test them with the push of a button with your existing models and data.\n\n## Join the community\n\nWe welcome your contributions and suggestions to SK community! One of the easiest\nways to participate is to engage in discussions in the GitHub repository.\nBug reports and fixes are welcome!\n\nFor new features, components, or extensions, please open an issue and discuss with\nus before sending a PR. This is to avoid rejection as we might be taking the core\nin a different direction, but also to consider the impact on the larger ecosystem.\n\nTo learn more and get started:\n\n- Read the [documentation](https://aka.ms/sk/learn)\n- Learn how to [contribute](https://learn.microsoft.com/en-us/semantic-kernel/support/contributing) to the project\n- Ask questions in the [GitHub discussions](https://github.com/microsoft/semantic-kernel/discussions)\n- Ask questions in the [Discord community](https://aka.ms/SKDiscord)\n\n- Attend [regular office hours and SK community events](COMMUNITY.md)\n- Follow the team on our [blog](https://aka.ms/sk/blog)\n\n## Contributor Wall of Fame\n\n[![semantic-kernel contributors](https://contrib.rocks/image?repo=microsoft/semantic-kernel)](https://github.com/microsoft/semantic-kernel/graphs/contributors)\n\n## Code of Conduct\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the\n[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\nor contact [opencode@microsoft.com](mailto:opencode@microsoft.com)\nwith any additional questions or comments.\n\n## License\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nLicensed under the [MIT](LICENSE) license.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.759765625,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.8 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://www.microsoft.com/en-us/msrc/definition-of-a-security-vulnerability?rtc=1), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc?rtc=2).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/en-us/msrc?rtc=2). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://www.microsoft.com/en-us/msrc/bounty?rtc=2) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd?rtc=2).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "TRANSPARENCY_FAQS.md",
          "type": "blob",
          "size": 7.85546875,
          "content": "# Semantic Kernel Responsible AI FAQs\n\n## What is Microsoft Semantic Kernel?\nMicrosoft Semantic Kernel is a lightweight, open-source development kit designed to facilitate the integration of AI models into applications written in languages such as C#, Python, or Java.\n\nIt serves as efficient middleware that supports developers in building AI agents, automating business processes, and connecting their code with the latest AI technologies. Input to this system can range from text data to structured commands, and it produces various outputs, including natural language responses, function calls, and other actionable data.\n\n## What can Microsoft Semantic Kernel do?\nBuilding upon its foundational capabilities, Microsoft Semantic Kernel facilitates several functionalities:\n-\tAI Agent Development: Users can create agents capable of performing specific tasks or interactions based on user input.\n-\tFunction Invocation: It can automate code execution by calling functions based on AI model outputs.\n-\tModular and Extensible: Developers can enhance functionality through plugins and a variety of pre-built connectors, providing flexibility in integrating additional AI services.\n-\tMulti-Modal Support: The kernel easily expands existing applications to support modalities like voice and video through its architecture\n-   Filtering: Developers can use filters to monitor the application, control function invocation or implement Responsible AI.\n-   Prompt Templates: Developer can define their prompts using various template languages including Handlebars and Liquid or the built-in Semantic Kernel format.\n\n## What is/are Microsoft Semantic Kernel’s intended use(s)?\nThe intended uses of Microsoft Semantic Kernel include:\n- \tProduction Ready Applications: Building small to large enterprise scale solutions that can leverage advanced AI models capabilities.\n-\tAutomation of Business Processes: Facilitating quick and efficient automation of workflows and tasks within organizations.\n- \tIntegration of AI Services: Connecting client code with a variety of pre-built AI services and capabilities for rapid development.\n\n\n## How was Microsoft Semantic Kernel evaluated? What metrics are used to measure performance?\nMicrosoft Semantic Kernel metrics include:\n-\tIntegration Speed: Assessed by the time taken to integrate AI models and initiate functional outputs based on telemetry.\n-\tPerformance Consistency: Measurements taken to verify the system's reliability based on telemetry.\n\n\n## What are the limitations of Microsoft Semantic Kernel?\nSemantic Kernel integrates with Large Language Models (LLMs) to allow AI capabilities to be added to existing application.\nLLMs have some inherent limitations such as:\n-\tContextual Misunderstanding: The system may struggle with nuanced requests, particularly those involving complex context.\n-\tBias in LLM Outputs: Historical biases in the training data can inadvertently influence model outputs. \n\t-\tUsers can mitigate these issues by:\n\t\t-\tFormulating clear and explicit queries.\n\t\t-\tRegularly reviewing AI-generated outputs to identify and rectify biases or inaccuracies.\n        -   Providing relevant information when prompting the LLM so that it can base it's responses on this data\n-   Not all LLMs support all features uniformly e.g., function calling.\nSemantic Kernel is constantly evolving and adding new features so:\n-   There are some components still being developed e.g., support for some modalities such as Video and Classification, memory connectors for certain Vector databases, AI connectors for certain AI services.\n-   There are some components that are still experimental, these are clearly flagged and are subject to change.\n\n## What operational factors and settings allow for effective and responsible use of Microsoft Semantic Kernel?\nOperational factors and settings for optimal use include:\n-\tCustom Configuration Options: Users can tailor system parameters to match specific application needs, such as output style or verbosity.\n-\tSafe Operating Parameters: The system operates best within defined ranges of input complexity and length, ensuring reliability and safety.\n-\tReal-Time Monitoring: System behavior should be regularly monitored to detect unexpected patterns or malfunctions promptly.\n-\tIncorporate RAI and safety tools like Prompt Shield with filters to ensure responsible use.\n\n### Plugins and Extensibility\n\n#### What are plugins and how does Microsoft Semantic Kernel use them?\nPlugins are API calls that enhance and extend the capabilities of Microsoft Semantic Kernel by integrating with other services. They can be developed internally or by third-party developers, offering functionalities that users can toggle on or off based on their requirements. The kernel supports OpenAPI specifications, allowing for easy integration and sharing of plugins within developer teams.\n\n#### What data can Microsoft Semantic Kernel provide to plugins? What permissions do Microsoft Semantic Kernel plugins have?\nPlugins can access essential user information necessary for their operation, such as:\n-\tInput Context: Information directly related to the queries and commands issued to the system.\n-\tExecution Data: Results and performance metrics from previous operations, provided they adhere to user privacy standards. Developers retain control over plugin permissions, choosing what information plugins can access or transmit, ensuring compliance with data protection protocols.\n-   Semantic Kernel supports filters which allow developers to integrate with RAI solutions\n\n#### What kinds of issues may arise when using Microsoft Semantic Kernel enabled with plugins?\nPotential issues that may arise include:\n-\tInvocation Failures: Incorrectly triggered plugins can result in unexpected outputs.\n-\tOutput Misinformation: Errors in plugin handling can lead to generation of inaccurate or misleading results.\n-\tDependency Compatibility: Changes in external dependencies may affect plugin functionality. To prevent these issues, users are advised to keep plugins updated and to rigorously test their implementations for stability and accuracy\n\n#### When working with AI, the developer can enable content moderation in the AI platforms used, and has complete control on the prompts being used, including the ability to define responsible boundaries and guidelines. For instance:\n-\tWhen using Azure OpenAI, by default the service includes a content filtering system that works alongside core models. This system works by running both the prompt and completion through an ensemble of classification models aimed at detecting and preventing the output of harmful content. In addition to the content filtering system, the Azure OpenAI Service performs monitoring to detect content and/or behaviors that suggest use of the service in a manner that might violate applicable product terms. The filter configuration can be adjusted, for example to block also \"low severity level\" content. See here for more information.\n-\tThe developer can integrate Azure AI Content Safety to detect harmful user-generated and AI-generated content, including text and images. The service includes an interactive Studio online tool with templates and customized workflows. See here for more information.\n-\tWhen using OpenAI the developer can integrate OpenAI Moderation to identify problematic content and take action, for instance by filtering it. See here for more information.\n-\tOther AI providers provide content moderation and moderation APIs, which developers can integrate with Node Engine.\n\n#### If a sequence of components are run, additional risks/failures may arise when using non-deterministic behavior. To mitigate this, developers can:\nImplement safety measures and bounds on each component to prevent undesired outcomes.\nAdd output to the user to maintain control and awareness of the system's state.\nIn multi-agent scenarios, build in places that prompt the user for a response, ensuring user involvement and reducing the likelihood of undesired results due to multi-agent looping.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dotnet",
          "type": "tree",
          "content": null
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "prompt_template_samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}