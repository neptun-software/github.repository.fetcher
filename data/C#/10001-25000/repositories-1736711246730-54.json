{
  "metadata": {
    "timestamp": 1736711246730,
    "page": 54,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chocolatey/choco",
      "stars": 10464,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 10.537109375,
          "content": "#(maint) Remove trailing whitespace \n2456459bfd2094f4b32cb9267ad7eb7d2cb3eec0\n\n#(maint) Add trailing newline to files \n4b6656b10102acee4b7c958adc066571d9f04dd4\n\n#(maint) Add BOM  \na374d52a9f5cd3d48687ea25e0b7c059dfeb7d3f\n\n#(maint) Fix line endings \n8face0175ac571d47ee405254dc0962d0ef1783c\n\n#(#2261) Updates License Headers Copyright to 2021 \n3ac4e4e924de7302a6851096ffba091b2b1175f6\n\n#(maint) Add 2018 to copyright year \n0a86d5e5e78747f0ae00b5eb04916c19a0e7ba86\n\n#(GH-1209) Add Chocolatey Software to copyright \n8dc774eb615a760581b49913402bc3956d354205\n\n#(maint) Corrected whitespace \n44558390a70614440bc9c113e5c7da4576cfeaa4\n\n#(maint) Corrected whitespace \n57f966ff5b51cf43a56e9aa56f844384326ae0a1\n\n#(maint) Corrected whitespace \nfd81fcd6c48688c67e8f8e3a9cd2dd08126870b3\n\n#(maint) Corrected whitespace \n6cc246eb3d71d8f01e4a6f5e608fc836348ad19e\n\n#(maint) Corrected whitespace \nf8b0c6abe5cae1ba8025e0556d8d7dc9d105e4cb\n\n#(maint) Whitespace changes \n7c9e4405477449890cc12ad757df503ffc006e61\n\n#(maint) Whitespace changes \n00025cbc6df2640cb967d3539fdec1b259f77d45\n\n#(maint) Whitespace changes \nd7b2544b7fb627b9b4d2bead9c117e97ca85facd\n\n#(maint) Whitespace changes \n22284f0f31358eee8100b91a19a4ec6d101f17bf\n\n#(maint) Whitespace changes \ndc49f717c6c2f2ade3df292850c648028cd69f61\n\n#(maint) Remove unnecessary whitespace \na7b1d03f37ede4e771e8ca45fd73717303a1a76b\n\n#(maint) Remove unnecessary whitespace \nde61b1d1a19a7edd8e9b38921b3b29e54d55ac15\n\n#(maint) Remove unnecessary whitespace \n53694495ec6f0ff266c4a22b7329be1d770adc03\n\n#(maint) Remove unnecessary whitespace \n50a21c48e50c444a436b1be4dd5688c19fab9eac\n\n#(maint) Correct whitespace \n9d4dd65a1fcfacf07fe4ccd9c63f69b4a3506f7c\n\n#(maint) Remove unnecessary whitespace \n2a99e3873b1535060a2de8418c52854976552002\n\n#(maint) Remove unnecessary whitespace \n32461370879f26c1595083aeed8b49c73f6aaeb5\n\n#(maint) Remove unnecessary whitespace \neb30cef11038767da4ac456c2372d66d09080c81\n\n#(maint) Remove unnecessary whitespace \n0d419905ce06cee00ade0f0ebf4ce1eb33b38240\n\n#(maint) Remove whitespace \naab0406f70a46212bbb5d023e53a41c786a95ede\n\n#(maint) whitespace \n6b4d50bf294f0cdb05ece1664a1e33d3095f9d5e\n\n#(maint) Correct whitespace \nba3c10b544d919ab39e21c558fed64008f835c34\n\n#(maint) Corrected whitespace \n44558390a70614440bc9c113e5c7da4576cfeaa4\n\n#(maint) Correct whitespace \nb2f54e3e66b919284c168509fce4e6e56f799218\n\n#(maint) Correct whitespace \nd91bf41319d4ca2ee48263eb46eca37ea09f210f\n\n#(maint) whitespace \n968a84a9ebbe08c9b728799bed337ed561ddb4bf\n\n#(maint) Remove unnecessary whitespace \n1a20a2e2e90d07e058887c397ec9a88e3c87279e\n\n#(maint) Formatting + whitespace fix \n99fd2c2c9d714972bda8cfcf0748d4b27d3584e2\n\n#(maint) Remove unnecessary whitespace \ncf2862201e62edbfbfdf06c454b18ddd1e81e045\n\n#(maint) Remove whitespace and fix formatting \nd7b2d08232977971e55aa4ed851345880dc07517\n\n#(maint) Whitespace \n0efabf0b8309e9301e742441c20a12bbe3e5074c\n\n#(maint) Whitespace and formatting fix \ned46ca7fae1b8afd720bd6dc612cfdefb2a04edf\n\n#(maint) Remove unnecessary whitespace \n742dacca1f32dea0723b16660faeef6dbdcf39a4\n\n#(maint) Fix whitespace and formatting \n0c4025b48aa62be48fd221918b785ac4ed73e07f\n\n#(maint) Formatting \nf701feabf7f1deccaba335f486f3ca3a4056cccf\n\n#(maint) Formatting \n9315a9ec54f0f24770f3184d8cbc1b4493607470\n\n#(maint) Formatting + whitespace fix \n99fd2c2c9d714972bda8cfcf0748d4b27d3584e2\n\n#(maint) formatting \n38edf1efd9d73e7a5f0502e898e917dd8ecaf242\n\n#(maint) Formatting and whitespace changes \n2bf2bcd88d9c9b33f2dd092884863365b3fcc55a\n\n#(maint) Formatting and whitespace changes \n1007d8c760d75a63df23521bae612c9f6183c822\n\n#(maint) formatting \n179f0f32b4a5f646e5ada6401935627e91be6a98\n\n#(maint) formatting \n0d840334bb4cad0432089e11096769b6353e5c8e\n\n#(maint) formatting \n3837ffdc36812fdbb030e938032517c3a5cd8ffc\n\n#(maint) formatting \n0fe09728612a1ef29317aecf9d9cfa041817d3d8\n\n#(maint) formatting \ne0c753fc4da00c5863ff5d6b25b332d29f83f11f\n\n#(maint) formatting / order \n1675a19d8b1c8ad6e3efb11a4202ff4dffe8557c\n\n#(maint) formatting \nc8c28093ac68cff6aa59728ac1d1065996b96a13\n\n#(maint) formatting \nbca094debb96735e793468a6fcc0d59acf6734cd\n\n#(maint) formatting \nd32982a22703e13b2e4708373b755c02211852d7\n\n#(maint) formatting \nfd63e4a8807bb352bd8b7c31f5aa43ed35278171\n\n#(maint) formatting \n865d7477f24e5dc81add0c1d3a587bd1374c4a76\n\n#(maint) formatting \nf5798180e7fd26fb9c3da343d2bdba6ed2798af0\n\n#(maint) formatting \nf9e586d12fcca2f2e42e43abd329fb4eb97626bc\n\n#(maint) formatting \n5dcd104ccb9d38fe5e4977ab0c1382cc8703fc77\n\n#(maint) formatting \n68de28f738dbc2a6537a9c304a199ca5809bc18a\n\n#(maint) formatting/wording \n75e8063ee322db789dae05ee65af97a22c86c21d\n\n#(maint) formatting \n8bd20a0f6aeb577b48af6c4638de5896021532bb\n\n#(maint) formatting \n3a0ee21a669656f56d661bec487085c422990f70\n\n#(maint) formatting \n1bcd6dc600542f42237779f2213d484a39d66f93\n\n#(maint) formatting \n939afa30b87728762f5409a6073f9b68bf50d5f0\n\n#(maint) formatting \nd25ef6dcd5f18852160912f47b460af56611eb62\n\n#(maint) formatting \n3da47609824464780f0707868a28c521dc9efdba\n\n#(maint) formatting \n260c872954782cc987ee9cbfa3f55ce7e809e500\n\n#(maint) formatting \n48e668dc1e8ddc75d6135fb6721b00f7326af9bc\n\n#(maint) formatting \n581db0177e43d6e2b9dd1852a6cef9f25df878dc\n\n#(maint) formatting \nc51f9d301fb52cf6fd93a51cac1a55a84d36c1d7\n\n#(maint) formatting \nd12c94c799cd7c1904c14546f81e001fae44161f\n\n#(maint) formatting \n728deda7ba4a4a46be371aa8da352a1bc597bb90\n\n#(maint) formatting \n70a6120723a0ffe8505ee238fbf1024f5bca3505\n\n#(maint) formatting \n1a9aa99f2c34c2ef4c9eed4a37ad213f75a92965\n\n#(maint) formatting \ne63773b5ab1aea63f8b514e30df9921847cbf55c\n\n#(maint) formatting \n12230d4acafe72da79f3e0761e292440a5783bb6\n\n#(maint) formatting \n77be5d8192dc57c9523daf59f70da85cfdda876c\n\n#(maint) formatting \n43b139c332bc664700963a0fd6d28e0349c10b47\n\n#(maint) formatting methods / parameters in calls \n0666e26fcfe1b95b7685cdcd0ff4bd9e9e51cda3\n\n#(maint) formatting \n186f9c739ff4654363ce675cfcd71ac7722a24a4\n\n#(maint) formatting \n74af77d178d0750c55262fd09d2ba1fcb5842b84\n\n#(maint) formatting \nff97904b5c398349b738e16e643fc996c33c73f2\n\n#(maint) formatting \nf4ae1c9845cddbc83d75f09706b9c0b5e00d32f6\n\n#(maint) formatting \n0513e70ef2104f8f345e514f86b3202884a849ae\n\n#(maint) formatting \nbe903e4e5585f551aebde1e09f93b46612283b25\n\n#(maint) formatting \ne2fa59116b8e42ef44f611b9b14362d51db6c5ba\n\n#(maint) formatting / add message consistency \n2854c5ae8e6aa3fbe6f5b5fe51a59190c886cc72\n\n#(maint) formatting \nc3ae26769cd7a023cea0e3c0561752bedd05e5da\n\n#(maint) formatting \nd51e259d38312c28ea6e5954ebf7ca4311820699\n\n#(maint) formatting \n7709753f8804df22d615398f4cc3d975734af34f\n\n#(maint) formatting \n31db2695841501784d0a05530d16ec6a7397dc4a\n\n#(maint) formatting \ne5726d7340a07e0c9127f3518ad95f7d506a5392\n\n#(maint) formatting \na7d92f53263acf6205965b65bfafa4282563a8cf\n\n#(maint) formatting \nc819d7bf07b8e576a22b92ecb448b1497b8ab094\n\n#(maint) formatting \n727879cab1a647af92b701146c26f263b11a78ae\n\n#(maint) formatting \n252f7c5152cd6c8c254a67d036cd6ea350ba747a\n\n#(maint) formatting \n40095903aebcbe5304c9bc82196cd68f437c547c\n\n#(maint) formatting \n4643bab03d187a381e3a7c2f6d206dda215afae6\n\n#(maint) formatting \nb74dbec14fbf5d11f6575542976ce85030c75558\n\n#(maint) formatting \n4f3454295d332f4b41ad84224d0e5b5dc6e20eb8\n\n#(maint) formatting \n5f6439a974db86a729ea449d6d72b295a4ced72d\n\n#(maint) formatting \n69f3466674907be27b2929173ac09bee0b8a10ca\n\n#(maint) formatting \n09765f6626458f5fb491f43bc24f0755531d9c88\n\n#(maint) formatting \n8906ea82aa689e0557e03bb6348f3aa4688d37a7\n\n#(maint) formatting \nda4cb2a646c35c0c976085f6d8362c43af696fd8\n\n#(maint) formatting \nb09644e00c925d6c17ad01a578fb726d07ccb4a4\n\n#(maint) formatting \n7ae1939f734615357247c6a518c52a76a9869077\n\n#(maint) formatting \n5601e2db63aefa02411b7c40aadd789942e81e7a\n\n#(maint) formatting \nc8d9630c8698f9738b423198d9119d1aac8b2aed\n\n#(maint) formatting \n763ac498364ecd6b9ac6240d70c57ccccca62849\n\n#(maint) formatting \nb7c619f10e42a8dd57b6f42c59b735d74e1890c3\n\n#(maint) formatting \n9c1bfe1d30e958e4113289bafbd8b1954ad8c3f8\n\n#(maint) formatting \n1dffc0a958a5d85fb0b1ec2506052a88190c01a7\n\n#(maint) formatting \nc8bec4424243adf6d4201fb8f6e940e468d00b0b\n\n#(maint) formatting \n998bc44116cb3054ac5717fcd4547bcb03db55d6\n\n#(maint) formatting \n346c050025dc4c51800cc8cd4985d81710c40ebb\n\n#(maint) formatting \ncd98ee0053aae1c29485bd5f269fcdff7aaa370c\n\n#(maint) formatting \ne5ea5a6ca3f58062a2ba9e04a2b616ee036b6cc1\n\n#(maint) formatting/comment \n231ac31dfab285e740b50ab583feaf376d3ccd9c\n\n#(maint) formatting \n580a66467783c436fcdd3cdb74a4ee8e94b73fb1\n\n#(maint) formatting \n855b4abc3e348f669091704c3951d7f5c7970956\n\n#(maint) formatting \n5765e5e80d1dcd31d55c671e145037d919509015\n\n#(maint) formatting \n9945cd0bafd3983bc10903d0ec9b01d48210afdd\n\n#(maint) formatting \ne6ad7e7f90fa28417602ec22349add8750aa50ac\n\n#(maint) formatting \n87c8c5b1676131b3bf2823142921cb1c828e83b0\n\n#(maint) formatting \n2b68dae5efb93699dbbc65e6761fd1d5f7a362a2\n\n#(maint) formatting \ne4f145e4bcc16d2d0e3360a4e4b253175483fe7b\n\n#(maint) formatting \n016c6914335198e78305db0691ae9b800d14e13c\n\n#(maint) formatting \n309f33ecc8d454d12d3398cdccba77a3658ba106\n\n#(maint) formatting \n35c98096055d3c034848ffa54fbbc0d284d0e037\n\n#(maint) formatting \ne199c22c2b304215835b27778dbbcc63a14b529a\n\n#(maint) formatting \nabdea1856bcb370d3b1ffe782922d793ba9ecb3e\n\n#(maint) formatting \nf10c55d3fc860b66f7892930b493eda2953e0419\n\n#(maint) formatting \n3ff7adb0ecb1b85da9340693f11d9699ae2d50c3\n\n#(maint) formatting \n4f39b7439e045ed2b65fe72741b753afb3b4d33d\n\n#(maint) formatting \nf1df436680acac307d489a8402390891d8c32573\n\n#(maint) formatting \nddf8d2f3692a9f1de472965aa1f5f619acb23c50\n\n#(maint) formatting \ncee189ccdd0e0a4169044a1d847d0fb8226d4c67\n\n#(maint) formatting/spacing \n32dc4420f35a55375da9d253e2ee591b4d72a674\n\n#(maint) formatting \n67fbbcf5b4f2828e7c3910730e042b90181e0415\n\n#(maint) formatting \n13451a7a841f353365953454f91503b0af79392d\n\n#(maint) formatting \n26447f974f5853866d73e46f71af378a7834bdac\n\n#(maint) formatting \na808f2f2e07cbbbcac021de7e4c74d90c63d523c\n\n#(maint) formatting \na2a6eb98e7add1c9646e9f86a4614ee22a78f950\n\n#(maint) formatting \na2d026d4ef173d68132c2e51c8abbea408eb9f3e\n\n#(maint) formatting \nfea75e87f0ef7d64eb823f4a091f958594c4fe4e\n\n#(maint) formatting \ne3d3a9fc2c3bf3d54273bd51991fd44eca9bae24\n\n#(maint) formatting \ne387053ab1502088e92ad4a72f65f6da88f4cae4\n\n#(maint) formatting \nebc811ae6e10693e07b8bab406bcf7f76711209a\n\n#(maint) formatting \n18b33736da35bde7419e8a2b2a631aafd0a3ba36\n\n#(maint) formatting \n785f1e970ca2d43de6d5e5181dddc8c9c233fdc6\n\n#(maint) formatting \n97458f8877f07c6cea87d2702b98ccb9f36cb712\n\n#(maint) formatting \n5e29a252b52ef4c5c5324844d7796845b00db2d8\n\n#(maint) formatting \nb19c8c24b08d3b4a8d2b2b88d46edead71d0e31a\n\n#(maint) formatting \ne9515c247972ecf22ece68e080ae96ef0e8ebd6c\n\n#(maint) formatting of xml comments \n5e7bdb4143e89605ce887543b4ba74f6af488e3c\n\n#(maint) formatting \nf6393c625416250e87294bb4f20b94495a1ed923\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.892578125,
          "content": ".svn\r\n.hg\r\nbuild_output\r\ncode_drop\r\n[Bb]in\r\nobj\r\nsrc/packages\r\n/.vscode/**\r\n!.vscode/extensions.json\r\n!/.vscode/settings.json\r\n.vs\r\n\r\n*.suo\r\n*.sln.docstates\r\n*.user\r\n*.csproj.user\r\n*.[rR]esharper.user\r\n*.DotSettings.user\r\n*.resharper\r\n_ReSharper*\r\n*.cache\r\n*~\r\n*.swp\r\n*.bak\r\n*.orig\r\n*.log\r\n*.pidb\r\n*userprefs\r\n*.nupkg\r\n\r\nTestResult.xml\r\nsubmit.xml\r\nSolutionVersion.cs\r\nSolutionVersion.vb\r\n\r\n.DS_Store\r\n*.db\r\nsrc/_dotCover.chocolatey/\r\nsrc/_dotTrace.chocolatey/\r\nsrc/chocolatey.sln.GhostDoc.xml\r\n\r\nchocolatey.official.snk\r\nchocolatey.license.xml\r\n\r\ndocs/generated\r\n\r\n# Testing related\r\n.vagrant\r\n\r\n# Build related\r\ntools/**\r\n!tools/packages.config\r\n!tools/Addins/packages.config\r\n!tools/Modules/packages.config\r\nBuildArtifacts/\r\ncode_drop/\r\nsrc/chocolatey.install/assets/Install.ps1\r\n\r\n# This project uses an editorconfig file maintained via a nuget package, so do not commit any of these to the repo\r\n.editorconfig"
        },
        {
          "name": ".notifications",
          "type": "tree",
          "content": null
        },
        {
          "name": ".teamcity",
          "type": "tree",
          "content": null
        },
        {
          "name": ".templates",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.0986328125,
          "content": "# Chocolatey Open Source CHANGELOG\r\n\r\nSee all - https://docs.chocolatey.org/en-us/choco/release-notes"
        },
        {
          "name": "CHANGELOG_LICENSED.md",
          "type": "blob",
          "size": 0.1083984375,
          "content": "# Chocolatey Licensed CHANGELOG\r\n\r\nSee all - https://docs.chocolatey.org/en-us/licensed-extension/release-notes"
        },
        {
          "name": "COMMITTERS.md",
          "type": "blob",
          "size": 11.0146484375,
          "content": "Committers\r\n============\r\n\r\n<!-- TOC -->\r\n\r\n- [Branch Targeting](#branch-targeting)\r\n- [Summary](#summary)\r\n- [Terminology](#terminology)\r\n- [Review Process](#review-process)\r\n    - [Receive new PR (pull request)](#receive-new-pr-pull-request)\r\n    - [Initial PR Review](#initial-pr-review)\r\n    - [Review the Code](#review-the-code)\r\n    - [Accepting a PR](#accepting-a-pr)\r\n- [Merging](#merging)\r\n  - [Pull Request Retargeting](#pull-request-retargeting)\r\n\r\n<!-- /TOC -->\r\n\r\n## Branching Strategy\r\n\r\nThis repository uses the following branching strategy:\r\n\r\n![Branching Strategy](docs/images/branching-strategy.png \"Branching Strategy\")\r\n\r\nDepending on where your fix/enhancement goes, please target the proper branch. Community members always target develop, but committers should know where the fix they are presenting goes. It makes it much easier to push the shiny green button on a pull request. If you are not sure where to target, ask.\r\n\r\n### Features\r\n\r\n#### Creating a feature branch\r\n\r\n```bash\r\ngit checkout -b myfeature develop\r\n```\r\n\r\n#### Finishing a feature branch\r\n\r\n```bash\r\ngit checkout develop\r\ngit merge --no-ff myfeature\r\ngit branch -d myfeature\r\ngit push origin --delete myfeature # if feature branch pushed to fork repository\r\ngit push upstream develop\r\ngit push origin develop\r\n```\r\n\r\n### Releases\r\n\r\n#### Creating a release branch\r\n\r\n```bash\r\ngit checkout -b release/0.2.0 develop\r\n```\r\n\r\n#### Finishing a release branch\r\n\r\n```bash\r\ngit checkout master\r\ngit merge --no-ff release/0.2.0\r\ngit tag -a 0.2.0 -m \"version 0.2.0\"\r\ngit checkout develop\r\ngit merge master\r\ngit branch -d release/0.2.0\r\ngit push upstream --delete release/0.2.0 # if release branch pushed to main repository\r\ngit push upstream master\r\ngit push upstream develop\r\ngit push origin master\r\ngit push origin develop\r\n```\r\n\r\n### Hotfixes\r\n\r\n#### Creating a hotfix branch\r\n\r\n```bash\r\ngit checkout -b hotfix/0.1.1 master\r\n```\r\n\r\n#### Finishing a hotfix branch\r\n\r\n```bash\r\ngit checkout master\r\ngit merge --no-ff hotfix/0.1.1\r\ngit tag -a 0.1.1 -m \"version 0.1.1\"\r\ngit checkout develop\r\ngit merge master\r\ngit branch -d hotfix/0.1.1\r\ngit push upstream --delete hotfix/0.1.1 # if hotfix branch pushed to main repository\r\ngit push upstream master\r\ngit push upstream develop\r\ngit push origin master\r\ngit push origin develop\r\n```\r\n\r\n## Summary\r\nWe like to see folks contributing to Chocolatey. If you are a committer, we'd like to see you help from time to time with triage and the pull request process.\r\n\r\nIn all cases politeness goes a long way. Please thank folks for contributions - they are going out of their way to help make the code base better, or adding something they may personally feel is necessary for the code base.\r\n\r\nPlease be VERY familiar with [CONTRIBUTING](https://github.com/chocolatey/choco/blob/develop/CONTRIBUTING.md) and follow the process as well.\r\n\r\n## Terminology\r\n**Contributor** - A person who makes a change to the code base and submits a change set in the form of a pull request.\r\n\r\n**Change Set** - A set of discrete commits which combined together form a contribution.  A change set takes the form of git commits and is submitted in the form of a pull request. Used interchangeably with \"pull request\".\r\n\r\n**Committer** - A person responsible for reviewing a pull request and then making the decision what base branch to merge the change set into.\r\n\r\n## Review Process\r\n#### Receive new PR (pull request)\r\n * A contributor sends a pull request (usually against develop).\r\n * A committer typically reviews it within a week or less to determine the feasibility of the changes.\r\n\r\n#### Initial PR Review\r\n * Has the user signed the Contributor License Agreement (CLA)?\r\n * Did the user create a branch with these changes? If it is on their default branch (i.e. develop), please ask them to review [CONTRIBUTING](https://github.com/chocolatey/choco/blob/develop/CONTRIBUTING.md).\r\n * Did the user reformat files and they should not have? Was is just white-space? You can try adding [?w=1](https://github.com/blog/967-github-secrets) to the URL on GitHub.\r\n * Are there tests? We really want any new contributions to contain tests so unless the committer believes this code really needs to be in the code base and is willing to write the tests, then we need to ask the contributor to make a good faith effort in adding test cases. Ask them to review the [contributing document](https://github.com/chocolatey/choco/blob/develop/CONTRIBUTING.md) and provide tests. **Note:** Some commits may be refactoring which wouldn't necessarily add additional test sets.\r\n * Is the code documented properly? Does this additional set of changes require changes to the [documentation](https://docs.chocolatey.org)?\r\n * Was this code warranted? Did the contributor follow the process of gaining approval for big change sets? If not please have them review the [contributing document](https://github.com/chocolatey/choco/blob/develop/CONTRIBUTING.md) and ask that they follow up with a case for putting the code into the code base on the mailing list.\r\n\r\n#### Review the Code\r\n  * Does the code meet the naming conventions and formatting (need link)?\r\n  * Is the code sound? Does it read well? Can you understand what it is doing without having to execute it? Principal of no clever hacks (need link).\r\n  * Does the code do what the purpose of the pull request is for (and only that)?\r\n\r\n#### Accepting a PR\r\nOnce you have reviewed the initial items, and are not waiting for additional feedback or work by the contributor, give the thumbs up that it is ready for the next part of the process (merging).\r\n\r\nUnless there is something wrong with the code, we don't ask contributors to rebase against develop. They did the work to create the patch in the first place, asking them to unnecessarily come back and try to keep their code synced up with develop is not an acceptable process.\r\n\r\n## Merging\r\nOnce you have reviewed the change set and determined it is ready for merge, the next steps are to bring it local and evaluate the code further by actually working with it, running the tests locally and adding any additional commits or fix-ups that are necessary in a local branch.\r\n\r\nWhen merging the user's contribution, it should be done with `git merge --log --no-ff` to create a merge commit so that in case there is an issue it becomes easier to revert later, and so that we can see where the code came from should we ever need to go find it later (more information on this can be found [here](https://www.kernel.org/pub/software/scm/git/docs/git-merge.html) and also a discussion on why this is a good idea [here](https://web.archive.org/web/20190529002804/https://differential.com/insights/best-way-to-merge-a-github-pull-request/)).\r\n\r\n### Pull Request Retargeting\r\nBecause we ask contributors to target develop, sometimes a fix/enhancement may need to be retargeted to a hotfix, or release, branch. This process is somewhat easy thanks to git. In most cases you won't even need to ask the user to do this for you.\r\n\r\n * `git fetch upstream pull/<github_pull_id>/head:pr<github_pull_id>` - `upstream` is `git@github.com:chocolatey/choco.git`\r\n * `git checkout pr<github_pull_id>`\r\n * `git rebase --onto hotfix/0.2.2 develop` - this uses the local branch, starts with latest hotfix/0.2.2 and reapplies the commits from the branch to it, removing all commits that were only on the develop.  **NOTE:** This is just an example, you should use the name of the hotfix/release branch that is currently being used.\r\n * `build.bat` - build and test\r\n * Any additional changes or testing here.\r\n * `git checkout hotfix/0.2.2`\r\n * `git fetch upstream` - if this pulls anything, make sure to also run `git rebase upstream/hotfix/0.22` prior to merging or you will lose the merge commit.\r\n * `git merge pr<github_pull_id> --log --no-ff`\r\n * `git branch -d pr<github_pull_id>`\r\n * Make any last checks to ensure the git logs look good. The next step sets the commits in stone and unable to be changed.\r\n * `git push upstream`\r\n\r\nReferences\r\n\r\n * [http://pivotallabs.com/git-rebase-onto/ (Archive)](https://web.archive.org/web/20150709101404/http://pivotallabs.com:80/git-rebase-onto/)\r\n * http://git-scm.com/book/ch3-6.html\r\n\r\n## Generating and Updating Cmdlet Documentation\r\n\r\nDocumentation for the cmdlets in the Chocolatey.PowerShell project is maintained as `*.md` files in the [chocolatey/docs](https://github.com/chocolatey/docs) repository, under `input/en-us/create/cmdlets`.\r\nWhen making changes to a cmdlet or adding a new one, we need to ensure that those Markdown files get updated, and that those changes are propagated back to this repository in the [`Chocolatey.PowerShell.dll-help.xml`](./src/Chocolatey.PowerShell/Chocolatey.PowerShell.dll-Help.xml) file in the repository.\r\n\r\nBefore working with this, be sure to clone the `chocolatey/docs` repository locally.\r\nIf your local copy of the docs repository is not located at `../docs` relative to this folder, you will need to specify the `-DocsRepositoryPath` parameter whenever calling the `update-cmdlet-documentation.ps1` script.\r\n\r\n### Generating Documentation for a new Cmdlet\r\n\r\nRun the `update-cmdlet-documentation.ps1` script with the `-NewCommand` parameter, specifying the name of the cmdlet(s) that you've added:\r\n\r\n```powershell\r\n./update-cmdlet-documentation.ps1 -NewCommand Test-NewChocolateyCommand\r\n```\r\n\r\nOnce this completes, you will get a warning that the documentation template needs to be filled out and the newly-generated documentation file will open in your default editor for `*.md` files.\r\n\r\n### Updating Documentation For an Existing Cmdlet\r\n\r\nRun the `update-cmdlet-documentation.ps1` script:\r\n\r\n```powershell\r\n./update-cmdlet-documentation.ps1\r\n```\r\n\r\n### Generating the `Chocolatey.PowerShell.dll-help.xml` External Help Documentation\r\n\r\nOnce new files have been generated, in the `chocolatey/docs` repository, make any additional changes needed to the files.\r\nNote that these files will need to be compatible both with PlatyPS and the docs repository Markdown formatting.\r\nAs such, for new files you will need to sure the additional frontmatter is added.\r\nA complete frontmatter block for these files looks like this:\r\n\r\n```md\r\n---\r\nDescription: Information on Cmdlet-Name cmdlet\r\nexternal help file: Chocolatey.PowerShell.dll-Help.xml\r\nModule Name: Chocolatey.PowerShell\r\nonline version: https://docs.chocolatey.org/en-us/create/functions/cmdlet-name\r\nOrder: 70\r\nschema: 2.0.0\r\nTitle: Cmdlet-Name\r\nxref: cmdlet-name\r\n---\r\n```\r\n\r\nSome files may also have a `RedirectFrom: [ ... ]` frontmatter entry.\r\nThis is not required for new files, but existing files (or files added for a cmdlet that is a rewrite of a pre-existing command) should retain their existing redirects.\r\n\r\nRun the `update-cmdlet-documentation.ps1` script once more, and add the changes to the `Chocolatey.PowerShell.dll-help.xml` file to a commit.\r\n\r\nFinally, add the changes to a commit on a new branch in the `docs` repository and submit a PR for any changes there as well, alongside the PR to any changes made in this repository.\r\nIf you are rewriting a cmdlet from a pre-existing script command, ensure you remove the old documentation file from `input/en-us/create/commands` as well, so that there are no duplicate xrefs.\r\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 21.76171875,
          "content": "# Contributing\r\n\r\nThe Chocolatey team has very explicit information here regarding the process for contributions, and we will be sticklers about the way you write your commit messages (yes, really), so to save yourself some rework, please make sure you read over this entire document prior to contributing. See this [Pull Request](https://github.com/chocolatey/choco/pull/3011) as an example of what we consider to be a great contribution.\r\n\r\n<!-- TOC -->\r\n\r\n- [Are You In the Right Place?](#are-you-in-the-right-place)\r\n  - [Reporting an Issue/Bug?](#reporting-an-issuebug)\r\n    - [SolutionVersion.cs](#solutionversioncs)\r\n  - [Package Issue?](#package-issue)\r\n  - [Package Request? Package Missing?](#package-request-package-missing)\r\n  - [Submitting an Enhancement / Feature Request?](#submitting-an-enhancement--feature-request)\r\n    - [Submitting an Enhancement For Choco](#submitting-an-enhancement-for-choco)\r\n- [Code Contributions](#code-contributions)\r\n  - [Prerequisites](#prerequisites)\r\n    - [Definition of Trivial Contributions](#definition-of-trivial-contributions)\r\n    - [Is the CLA Really Required?](#is-the-cla-really-required)\r\n- [Contributing Process](#contributing-process)\r\n  - [Get Buyoff Or Find Open Community Issues/Features](#get-buyoff-or-find-open-community-issuesfeatures)\r\n  - [Set Up Your Environment](#set-up-your-environment)\r\n  - [Code Format / Design](#code-format--design)\r\n    - [CSharp](#csharp)\r\n    - [PowerShell](#powershell)\r\n  - [Debugging / Testing](#debugging--testing)\r\n    - [Visual Studio](#visual-studio)\r\n      - [Automated Tests](#automated-tests)\r\n    - [Chocolatey Build](#chocolatey-build)\r\n  - [Prepare Commits](#prepare-commits)\r\n  - [Submit Pull Request (PR)](#submit-pull-request-pr)\r\n  - [Respond to Feedback on Pull Request](#respond-to-feedback-on-pull-request)\r\n- [Other General Information](#other-general-information)\r\n\r\n<!-- /TOC -->\r\n\r\n## Are You In the Right Place?\r\n\r\nChocolatey is a large ecosystem and each component has their own location for submitting issues and enhancement requests. While the website (the community package repository) may be all you know for packages, it represents only a tiny fraction of existing packages (organizations typically maintain and host their own packages internally). This is the repository for choco.exe (the client CLI tool) for Chocolatey, which spans multiple types of environments.\r\n\r\nPlease follow these decision criteria to see if you are in the right location or if you should head to a different location to submit your request.\r\n\r\n### Reporting an Issue/Bug?\r\n\r\n![submitting issues](https://cloud.githubusercontent.com/assets/63502/12534440/fc223b74-c21e-11e5-9a41-1ffc1c9af48f.png)\r\n\r\nSubmitting an Issue (or a Bug)? See the **[Submitting Issues](https://github.com/chocolatey/choco#submitting-issues) section** in the [README](https://github.com/chocolatey/choco/blob/develop/README.md#submitting-issues).\r\n\r\n#### SolutionVersion.cs\r\n\r\nDo not submit issues for missing `SolutionVersion.cs`. Please see [Compiling / Building Source](https://github.com/chocolatey/choco#compiling--building-source).\r\n\r\n### Package Issue?\r\n\r\nPlease see [Request Package Fixes or Updates / Become a maintainer of an existing package](https://docs.chocolatey.org/en-us/community-repository/users/package-triage-process).\r\n\r\n### Package Request? Package Missing?\r\n\r\nIf you are looking for packages to be added to the community feed (aka <https://community.chocolatey.org/packages>), please see [Package Requests](https://docs.chocolatey.org/en-us/community-repository/users/package-triage-process#package-request-package-missing).\r\n\r\n### Submitting an Enhancement / Feature Request?\r\n\r\nIf this is for choco (the CLI tool), this is the right place. See below. Otherwise see [Submitting Issues](https://github.com/chocolatey/choco#submitting-issues) for enhancements to the website, enhancements to the ChocolateyGUI, etc.\r\n\r\n#### Submitting an Enhancement For Choco\r\n\r\nLog a github issue. There are fewer constraints on this versus reporting issues.\r\n\r\n## Code Contributions\r\n\r\nThe process for contributions is roughly as follows:\r\n\r\n### Prerequisites\r\n\r\n- Submit the Enhancement ticket. You will need the issue id for your commits.\r\n- Ensure you have signed the Contributor License Agreement (CLA) - without this we are not able to take contributions that are not trivial.\r\n- [Sign the Contributor License Agreement](https://cla-assistant.io/chocolatey/choco).\r\n- You must do this for each Chocolatey project that requires it.\r\n- If you are curious why we would require a CLA, we agree with Julien Ponge - take a look at his [post](https://julien.ponge.org/blog/in-defense-of-contributor-license-agreements/).\r\n- You agree to follow the [etiquette regarding communication](https://github.com/chocolatey/choco#etiquette-regarding-communication).\r\n\r\n#### Definition of Trivial Contributions\r\n\r\nIt's hard to define what is a trivial contribution. Sometimes even a 1 character change can be considered significant. Unfortunately because it can be subjective, the decision on what is trivial comes from the committers of the project and not from folks contributing to the project. It is generally safe to assume that you may be subject to signing the [CLA](https://cla-assistant.io/chocolatey/choco) and be prepared to do so. Ask in advance if you are not sure and for reasons are not able to sign the [CLA](https://cla-assistant.io/chocolatey/choco).\r\n\r\nWhat is generally considered trivial:\r\n\r\n- Fixing a typo\r\n- Documentation changes\r\n- Fixes to non-production code - like fixing something small in the build code.\r\n\r\nWhat is generally not considered trivial:\r\n\r\n- Changes to any code that would be delivered as part of the final product. This includes any scripts that are delivered, such as PowerShell scripts. Yes, even 1 character changes could be considered non-trivial.\r\n\r\n#### Is the CLA Really Required?\r\n\r\nYes, and this aspect is not up for discussion. If you would like more resources on understanding CLAs, please see the following articles:\r\n\r\n- [In defense of Contributor License Agreements](https://julien.ponge.org/blog/in-defense-of-contributor-license-agreements/)\r\n- [Contributor License Agreements](http://oss-watch.ac.uk/resources/cla)\r\n- Dissenting opinion - [Why your project doesn't need a Contributor License Agreement](https://sfconservancy.org/blog/2014/jun/09/do-not-need-cla/)\r\n\r\nOverall, the flexibility and legal protections provided by a CLA make it necessary to require a CLA. As there is a company and a licensed version behind Chocolatey, those protections must be afforded. We understand this means some folks won't be able to contribute and that's completely fine. We prefer you to know up front this is required so you can make the best decision about contributing.\r\n\r\nIf you work for an organization that does not allow you to contribute without attempting to own the rights to your work, please do not sign the CLA.\r\n\r\n## Contributing Process\r\n\r\nStart with [Prerequisites](#prerequisites) and make sure you can sign the Contributor License Agreement (CLA).\r\n\r\n### Get Buyoff Or Find Open Community Issues/Features\r\n\r\n- Through a GitHub issue (preferred), through the [mailing list](https://groups.google.com/forum/#!forum/chocolatey), or through [Community Chat](https://ch0.co/community-support), talk about a feature you would like to see (or a bug fix), and why it should be in Chocolatey.\r\n  - If approved through the mailing list or in Community chat, ensure the accompanying GitHub issue is created with information and a link back to the mailing list discussion (or the Community Chat conversation).\r\n- Once you get a nod from one of the [Chocolatey Team](https://github.com/chocolatey?tab=members), you can start on the feature.\r\n- Alternatively, if a feature is on the issues list with the [Up For Grabs](https://github.com/chocolatey/choco/issues?q=is%3Aopen+is%3Aissue+label%3A%22Up+For+Grabs%22) label, it is open for a community member (contributor) to patch. You should comment that you are signing up for it on the issue so someone else doesn't also sign up for the work.\r\n\r\n### Set Up Your Environment\r\n\r\n- Visual Studio 2019+ is recommended for code contributions.\r\n- For git specific information:\r\n    1. Create a fork of chocolatey/choco under your GitHub account. See [forks](https://help.github.com/articles/working-with-forks/) for more information.\r\n    1. [Clone your fork](https://help.github.com/articles/cloning-a-repository/) locally.\r\n    1. Open a command line and navigate to that directory.\r\n    1. Add the upstream fork - `git remote add upstream git@github.com:chocolatey/choco.git`\r\n    1. Run `git fetch upstream`\r\n    1. Ensure you have user name and email set appropriately to attribute your contributions - see [Name](https://help.github.com/articles/setting-your-username-in-git/) / [Email](https://help.github.com/articles/setting-your-email-in-git/).\r\n    1. Ensure that the local repository has the following settings (without `--global`, these only apply to the *current* repository):\r\n\r\n        ```powershell\r\n        git config core.autocrlf false`\r\n        git config core.symlinks false`\r\n        git config merge.ff false`\r\n        git config merge.log true`\r\n        git config fetch.prune true`\r\n        git config blame.ignoreRevsFile .git-blame-ignore-revs --local\r\n        ```\r\n\r\n    1. From there you create a branch named specific to the feature.\r\n    1. In the branch you do work specific to the feature.\r\n    1. For committing the code, please see [Prepare Commits](#prepare-commits).\r\n    1. See [Submit Pull Request (PR)](#submit-pull-request-pr).\r\n- Please also observe the following:\r\n  - Unless specifically requested, do not reformat the code. It makes it very difficult to see the change you've made.\r\n    - If you must reformat the code, apply the formatting changes in a separate commit to the actual changes so that we can more easily review your work.\r\n  - Do not change files that are not specific to the feature.\r\n  - More covered below in the [**Prepare commits**](#prepare-commits) section.\r\n- Test your changes and please help us out by updating and implementing some automated tests. It is recommended that all contributors spend some time looking over the tests in the source code. You can't go wrong emulating one of the existing tests and then changing it specific to the behavior you are testing.\r\n  - While not an absolute requirement, automated tests will help reviewers feel comfortable about your changes, which gets your contributions accepted faster.\r\n- Please do not update your branch from the develop unless we ask you to. See the responding to feedback section below.\r\n\r\n### Code Format / Design\r\n\r\n#### CSharp\r\n\r\nThese standards are enforced via the `.editorconfig` file in the repository.\r\n\r\n- Class names and almost all members (methods, constants, fields, and properties) are `PascalCase`\r\n- `private` fields are `_camelCase` with an underscore prefix\r\n- Namespaces (and their representative folders) are lowercase.\r\n- Method parameters, local variables, and functions are `camelCase`\r\n- There are some adapters over the .NET Framework to ensure some additional functionality works and is consistent. Sometimes this is completely seamless that you are using these (e.g. `Console`).\r\n\r\n#### PowerShell\r\n\r\n- PowerShell must be CRLF and UTF-8. Git attributes are not used, so Git will not ensure this for you.\r\n- The minimum version of PowerShell this must work with is v2. This makes things somewhat more limited but compatible across the board for all areas Chocolatey is deployed. It is getting harder to find a reference for PowerShell v2, but this is a good one: <http://adamringenberg.com/powershell2/table-of-contents/>.\r\n- If you add a new file, also ensure you add it to the Visual Studio project and ensure it becomes an embedded resource.\r\n- The last parameter in every function must be `[parameter(ValueFromRemainingArguments = $true)][Object[]] $ignoredArguments`. This allows for future expansion and compatibility - as new parameters are introduced and used, it doesn't break older versions of Chocolatey.\r\n- Do not add new positional elements to functions. We want to promote using named parameters in calling functions.\r\n- Do not remove any existing positional elements from functions. We need to maintain compatibility with older versions of Chocolatey.\r\n- One of the first calls in a function is to debug what was passed to it - `Write-FunctionCallLogMessage -Invocation $MyInvocation -Parameters $PSBoundParameters`\r\n\r\n### Debugging / Testing\r\n\r\nWhen you want to manually verify your changes and run Choco, you have some options.\r\n\r\n**NOTE:** Chocolatey behaves differently when built with `Debug` and `Release` configurations. Release is always going to seek out the machine installation (`$env:ChocolateyInstall`), where Debug just runs right next to wherever the choco.exe file is.\r\n\r\n#### Visual Studio\r\n\r\nWhen you are using Visual Studio, ensure the following:\r\n\r\n- Use `Debug` configuration - debug configuration keeps your local changes separate from the machine installed Chocolatey.\r\n- `chocolatey.console` is the project you are looking to run.\r\n- If you make changes to anything that is in `chocolatey.resources`, delete the folder in `chocolatey.console\\bin\\Debug` that corresponds to where you've made changes as Chocolatey does not automatically detect changes in the files it is extracting from resource manifests.\r\n- The automated testing framework that Chocolatey uses is [NUnit](https://www.nunit.org/), [TinySpec](https://www.nuget.org/packages/TinySpec.NUnit), [Moq](https://www.nuget.org/packages/moq), and [Should](https://www.nuget.org/packages/Should/). Do not be thrown off thinking it using something else based on seeing `Fact` attributes for specs/tests. That is TinySpec.\r\n- For a good understanding of all frameworks used, please see [CREDITS](https://github.com/chocolatey/choco/blob/master/docs/legal/CREDITS.md)\r\n\r\n##### [Automated Tests](TESTING.md)\r\n\r\n#### Chocolatey Build\r\n\r\n**NOTE:** When you are doing this, we almost always recommend you take the output of the build to another machine to do the testing, like the [Chocolatey Test Environment](https://github.com/chocolatey/chocolatey-test-environment).\r\n\r\n- Run `build.bat`.\r\n- There is a detailed log of the output in `code_drop`.\r\n- You are looking for `code_drop\\temp\\_PublishedApps\\choco_merged` or `code_drop\\Packages\\Chocolatey`. The `choco.exe` file contains everything it needs, but it does unpack the manifest on first use, so you could run into [#1292](https://github.com/chocolatey/choco/issues/1292).\r\n- You will need to pass `--allow-unofficial-build` for it to work when built with release mode.\r\n- You can also try `build.debug.bat` - note that it is newer and it may have an issue or two. It doesn't require `--allow-unofficial-build` as the binaries are built for debugging.\r\n- Use `.\\choco.exe` to point to the local file. By default in PowerShell.exe, if you have Chocolatey installed, when you call `choco`, that is using the installed `choco` and not the one in the folder you are currently in. You must be explicit. This catches nearly everyone.\r\n\r\n### Prepare Commits\r\n\r\nThis section serves to help you understand what makes a good commit.\r\n\r\nA commit should observe the following:\r\n\r\n- A commit is a small logical unit that represents a change.\r\n- Should include new or changed tests relevant to the changes you are making.\r\n- No unnecessary whitespace. Check for whitespace with `git diff --check` and `git diff --cached --check` before commit.\r\n- You can stage parts of a file for commit.\r\n\r\nA commit message should observe the following (based on [\"A Note About Git Commit Messages\"](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)):\r\n\r\n- The first line of the commit message should be a short description around 50 characters in length and be prefixed with the GitHub issue it refers to with parentheses surrounding that. If the GitHub issue is #25, you should have `(#25)` prefixed to the message. **NOTE:** Previously, the requirement was to use something like `(GH-25)` in commit messages, however, that approach has been deprecated.\r\n- If the commit is about documentation, the message should be prefixed with `(doc)`.\r\n- If it is a trivial commit or one of formatting/spaces fixes, it should be prefixed with `(maint)`.\r\n- After the subject, skip one line and fill out a body if the subject line is not informative enough.\r\n- Sometimes you will find that even a tiny code change has a commit body that needs to be very detailed and make take more time to do than the actual change itself!\r\n- The body:\r\n  - Should wrap at `72` characters.\r\n  - Explains more fully the reason(s) for the change and contrasts with previous behavior.\r\n  - Uses present tense. \"Fix\" versus \"Fixed\".\r\n\r\nA good example of a commit message is as follows:\r\n\r\n```txt\r\n(#7) Installation Adds All Required Folders\r\n\r\nPreviously the installation script worked for the older version of\r\nChocolatey. It does not work similarly for the newer version of choco\r\ndue to location changes for the newer folders. Update the install\r\nscript to ensure all folder paths exist.\r\n\r\nWithout this change the install script will not fully install the new\r\nchoco client properly.\r\n```\r\n\r\n### Submit Pull Request (PR)\r\n\r\nSee this [Pull Request](https://github.com/chocolatey/choco/pull/3011) as an example of what we consider to be a great contribution.\r\n\r\nPrerequisites:\r\n\r\n- You are making commits in a feature branch.\r\n- All specs should be passing.\r\n\r\nSubmitting PR:\r\n\r\n- Once you feel it is ready, submit the pull request to the `chocolatey/choco` repository against the `develop` branch ([more information on this can be found here](https://help.github.com/articles/creating-a-pull-request)) unless specifically requested to submit it against another branch (for example, a `hotfix` or `release` branch).\r\n- In the case of a larger change that is going to require more discussion, please submit a PR sooner. Waiting until you are ready may mean more changes than you are interested in if the changes are taking things in a direction the committers do not want to go.\r\n- In the pull request, outline what you did and point to specific conversations (as in URLs) and issues that you are are resolving. This is a tremendous help for us in evaluation and acceptance.\r\n- Once the pull request is in, please do not delete the branch or close the pull request (unless something is wrong with it).\r\n- One of the Chocolatey Team members, or one of the committers, will evaluate it within a reasonable time period (which is to say usually within 2-4 weeks). Some things get evaluated faster or fast tracked. We are human and we have active lives outside of open source so don't fret if you haven't seen any activity on your pull request within a month or two. We don't have a Service Level Agreement (SLA) for pull requests. Just know that we will evaluate your pull request.\r\n\r\n### Respond to Feedback on Pull Request\r\n\r\nWe may have feedback for you in the form of requested changes or fixes. We generally like to see that pushed against the same topic branch (it will automatically update the PR). You can also fix/squash/rebase commits and push the same topic branch with `--force` (while it is generally acceptable to do this on topic branches not in the main repository, a force push should be avoided at all costs against the main repository).\r\n\r\nIf we have comments or questions when we do evaluate it and receive no response, it will probably lessen the chance of getting accepted. Eventually this means it will be closed if it is not accepted. Please know this doesn't mean we don't value your contribution, just that things go stale. If in the future you want to pick it back up, feel free to address our concerns/questions/feedback and reopen the issue/open a new PR (referencing old one).\r\n\r\nSometimes we may need you to rebase your commit against the latest code before we can review it further. If this happens, you can do the following:\r\n\r\n- `git fetch upstream` (upstream would be the mainstream repo or `chocolatey/choco` in this case)\r\n- `git checkout develop`\r\n- `git rebase upstream/develop`\r\n- `git checkout your-branch`\r\n- `git rebase develop`\r\n- Fix any merge conflicts\r\n- `git push origin your-branch` (origin would be your GitHub repo or `your-github-username/choco` in this case). You may need to `git push origin your-branch --force` to get the commits pushed. This is generally acceptable with topic branches not in the mainstream repository.\r\n\r\nThe only reasons a pull request should be closed and resubmitted are as follows:\r\n\r\n- When the pull request is targeting the wrong branch (this doesn't happen as often).\r\n- When there are updates made to the original by someone other than the original contributor (and the PR is not open for contributions). Then the old branch is closed with a note on the newer branch this supersedes #github_number.\r\n\r\n## Other General Information\r\n\r\nThe helpers/utility functions that are available to the packages are what we consider the API. If you are working in the API, please note that you will need to maintain backwards compatibility. If you plan to rename a function or make it more generic, you must provide an alias in the [chocolateyInstaller.psm1](https://github.com/chocolatey/choco/blob/develop/src/chocolatey.resources/helpers/chocolateyInstaller.psm1) as part of what gets exported. You should not remove or reorder parameters, only add optional parameters to the end. They should be named and not positional (we are moving away from positional parameters as much as possible).\r\n\r\nIf you reformat code or hit core functionality without an approval from a person on the Chocolatey Team, it's likely that no matter how awesome it looks afterwards, it will probably not get accepted. Reformatting code makes it harder for us to evaluate exactly what was changed.\r\n\r\nIf you do these things, it will be make evaluation and acceptance easy. Now if you stray outside of the guidelines we have above, it doesn't mean we are going to ignore your pull request. It will just make things harder for us.  Harder for us roughly translates to a longer SLA for your pull request.\r\n"
        },
        {
          "name": "GenerateDocs.ps1",
          "type": "blob",
          "size": 34.63671875,
          "content": "#Requires -PSEdition Desktop\r\n# Copyright © 2017 Chocolatey Software, Inc\r\n# Copyright © 2011 - 2017 RealDimensions Software, LLC\r\n#\r\n# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n# you may not use this file except in compliance with the License.\r\n#\r\n# You may obtain a copy of the License at\r\n#\r\n#   http://www.apache.org/licenses/LICENSE-2.0\r\n#\r\n# Unless required by applicable law or agreed to in writing, software\r\n# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n# See the License for the specific language governing permissions and\r\n# limitations under the License.\r\n\r\n# Special thanks to Glenn Sarti (https://github.com/glennsarti) for his help on this.\r\n\r\n$ErrorActionPreference = 'Stop'\r\n\r\n$thisDirectory = (Split-Path -Parent $MyInvocation.MyCommand.Definition);\r\n$psModuleName = 'chocolateyInstaller'\r\n$psModuleLocation = [System.IO.Path]::GetFullPath(\"$thisDirectory\\src\\chocolatey.resources\\helpers\\chocolateyInstaller.psm1\")\r\n$docsFolder = [System.IO.Path]::GetFullPath(\"$thisDirectory\\docs\\generated\")\r\n$mergedDirectory = [System.IO.Path]::GetFullPath(\"$thisDirectory\\code_drop\\temp\\_PublishedApps\\choco_merged\")\r\n$chocoExe = \"$mergedDirectory\\choco.exe\"\r\n\r\nWrite-Host \"Running choco.exe from $chocoExe\" \r\n\r\n$lineFeed = \"`r`n\"\r\n$sourceLocation = 'https://github.com/chocolatey/choco/blob/master/'\r\n$sourceCommands = $sourceLocation + 'src/chocolatey/infrastructure.app/commands'\r\n$sourceFunctions = $sourceLocation + 'src/chocolatey.resources/helpers/functions'\r\n$global:powerShellReferenceTOC = @'\r\n---\r\norder: 40\r\nxref: powershell-reference\r\ntitle: PowerShell Reference\r\ndescription: PowerShell Functions aka Helpers Reference\r\n---\r\nimport Xref from '@components/Xref.astro';\r\n\r\n# PowerShell Functions aka Helpers Reference\r\n\r\n{/* This documentation file is automatically generated from the files at $sourceFunctions using $($sourceLocation)GenerateDocs.ps1. Contributions are welcome at the original location(s). */}\r\n\r\n## Summary\r\n\r\nIn your Chocolatey packaging, you have the ability to use these functions (and others with Chocolatey's <Xref title=\"PowerShell Extensions\" value=\"extensions\" />) to work with all aspects of software management. Keep in mind Chocolatey's automation scripts are just PowerShell, so you can do manage anything you want.\r\n\r\n> :choco-info: **NOTE**\r\n>\r\n> These scripts are for package scripts, not for use directly in PowerShell. This is in the create packages section, not the using Chocolatey section.\r\n\r\n## Main Functions\r\n\r\nThese functions call other functions and many times may be the only thing you need in your <Xref title=\"chocolateyInstall.ps1 file\" value=\"chocolatey-install-ps1\" />.\r\n\r\n* <Xref title=\"Install-ChocolateyPackage\" value=\"install-chocolateypackage\" />\r\n* <Xref title=\"Install-ChocolateyZipPackage\" value=\"install-chocolateyzippackage\" />\r\n* <Xref title=\"Install-ChocolateyPowershellCommand\" value=\"install-chocolateypowershellcommand\" />\r\n* <Xref title=\"Install-ChocolateyVsixPackage\" value=\"install-chocolateyvsixpackage\" />\r\n\r\n## More Functions\r\n\r\n### Administrative Access Functions\r\n\r\nWhen creating packages that need to run one of the following commands below, one should add the tag `admin` to the nuspec.\r\n\r\n* <Xref title=\"Install-ChocolateyPackage\" value=\"install-chocolateypackage\" />\r\n* <Xref title=\"Start-ChocolateyProcessAsAdmin\" value=\"start-chocolateyprocessasadmin\" />\r\n* <Xref title=\"Install-ChocolateyInstallPackage\" value=\"install-chocolateyinstallpackage\" />\r\n* <Xref title=\"Install-ChocolateyPath\" value=\"install-chocolateypath\" /> - when specifying machine path\r\n* <Xref title=\"Install-ChocolateyEnvironmentVariable\" value=\"install-chocolateyenvironmentvariable\" /> - when specifying machine path\r\n* <Xref title=\"Install-ChocolateyExplorerMenuItem\" value=\"install-chocolateyexplorermenuitem\" />\r\n* <Xref title=\"Install-ChocolateyFileAssociation\" value=\"install-chocolateyfileassociation\" />\r\n\r\n### Non-Administrator Safe Functions\r\n\r\nWhen you have a need to run Chocolatey without Administrative access required (non-default install location), you can run the following functions without administrative access.\r\n\r\nThese are the functions from above as one list.\r\n\r\n* <Xref title=\"Install-ChocolateyZipPackage\" value=\"install-chocolateyzippackage\" />\r\n* <Xref title=\"Install-ChocolateyPowershellCommand\" value=\"install-chocolateypowershellcommand\" />\r\n* <Xref title=\"Get-ChocolateyPath\" value=\"get-chocolateypath\" />\r\n* <Xref title=\"Get-ChocolateyWebFile\" value=\"get-chocolateywebfile\" />\r\n* <Xref title=\"Get-ChocolateyUnzip\" value=\"get-chocolateyunzip\" />\r\n* <Xref title=\"Install-ChocolateyPath\" value=\"install-chocolateypath\" /> - when specifying user path\r\n* <Xref title=\"Install-ChocolateyEnvironmentVariable\" value=\"install-chocolateyenvironmentvariable\" /> - when specifying user path\r\n* <Xref title=\"Install-ChocolateyPinnedTaskBarItem\" value=\"install-chocolateypinnedtaskbaritem\" />\r\n* <Xref title=\"Install-ChocolateyShortcut\" value=\"install-chocolateyshortcut\" />\r\n* <Xref title=\"Update-SessionEnvironment\" value=\"update-sessionenvironment\" />\r\n* <Xref title=\"Get-PackageParameters\" value=\"get-packageparameters\" />\r\n\r\n## Complete List (alphabetical order)\r\n\r\n'@\r\n\r\nif (!(Test-Path \"$mergedDirectory\\lib\")) {\r\n    # Workaround for the warning outputted when the directory doesn't exist\r\n    $null = New-Item -Path \"$mergedDirectory\\lib\" -ItemType Directory\r\n}\r\n\r\nfunction Get-Aliases($commandName) {\r\n\r\n    $aliasOutput = ''\r\n    Get-Alias -Definition $commandName -ErrorAction SilentlyContinue | ForEach-Object { $aliasOutput += \"``$($_.Name)``$lineFeed\" }\r\n\r\n    if ($aliasOutput -eq $null -or $aliasOutput -eq '') {\r\n        $aliasOutput = 'None'\r\n    }\r\n\r\n    Write-Output $aliasOutput\r\n}\r\n\r\nfunction Convert-Example($objItem) {\r\n    @\"\r\n**$($objItem.title.Replace('-','').Trim())**\r\n\r\n~~~powershell\r\n$($objItem.Code.Replace(\"`n\",$lineFeed))\r\n$($objItem.remarks | Where-Object { $_.Text } | ForEach-Object { $_.Text.Replace(\"`n\", $lineFeed) })\r\n~~~\r\n\"@\r\n}\r\n\r\nfunction Replace-CommonItems($text) {\r\n    if ($text -eq $null) {\r\n        return $text\r\n    }\r\n\r\n    $text = $text.Replace(\"`n\", $lineFeed)\r\n    $text = $text -replace \"\\*\\*NOTE:\\*\\*\", '> :choco-info: **NOTE**\r\n>\r\n>'\r\n    $text = $text -replace \"\\*\\*WARNING:\\*\\*\",'> :choco-warning: **WARNING**\r\n>\r\n>'\r\n    $text = $text -replace '(community feed[s]?[^\\]]|community repository)', '[$1](https://community.chocolatey.org/packages)'\r\n    $text = $text -replace '(Chocolatey for Business|Chocolatey Professional|Chocolatey Pro)(?=[^\\w])', '[$1](https://chocolatey.org/compare)'\r\n    $text = $text -replace '(Pro[fessional]\\s?/\\s?Business)', '[$1](https://chocolatey.org/compare)'\r\n    $text = $text -replace '([Ll]icensed editions)', '[$1](https://chocolatey.org/compare)'\r\n    $text = $text -replace '([Ll]icensed versions)', '[$1](https://chocolatey.org/compare)'\r\n    $text = $text -replace '\\[automatic packaging\\]\\(https://docs.chocolatey.org/en-us/create/automatic-packages\\)', '<Xref title=\"automatic packaging\" value=\"automatic-packaging\" />'\r\n    $text = $text -replace 'Learn more about using this at https://docs.chocolatey.org/en-us/guides/create/parse-packageparameters-argument', '<Xref title=\"Learn more\" value=\"parse-package-parameters\" />'\r\n    $text = $text -replace 'at https://docs.chocolatey.org/en-us/guides/create/parse-packageparameters-argument#step-3---use-core-community-extension', 'in <Xref title=\"the docs\" value=\"parse-package-parameters\" anchor=\"step-3-use-core-community-extension\" />'\r\n    $text = $text -replace 'https://docs.chocolatey.org/en-us/guides/create/parse-packageparameters-argument', 'https://docs.chocolatey.org/en-us/guides/create/parse-packageparameters-argument'\r\n    $text = $text -replace '\\[community feed\\)\\]\\(https://community.chocolatey.org/packages\\)', '[community feed](https://community.chocolatey.org/packages))'\r\n\r\n    Write-Output $text\r\n}\r\n\r\nfunction Convert-Syntax($objItem, $hasCmdletBinding) {\r\n    $cmd = $objItem.Name\r\n\r\n    if ($objItem.parameter -ne $null) {\r\n        $objItem.parameter | ForEach-Object {\r\n            $cmd += ' `' + $lineFeed\r\n            $cmd += \"  \"\r\n            if ($_.required -eq $false) {\r\n                $cmd += '['\r\n            }\r\n            $cmd += \"-$($_.name.substring(0,1).toupper() + $_.name.substring(1))\"\r\n\r\n\r\n            if ($_.parameterValue -ne $null) {\r\n                $cmd += \" <$($_.parameterValue)>\"\r\n            }\r\n            if ($_.parameterValueGroup -ne $null) {\r\n                $cmd += \" {\" + ($_.parameterValueGroup.parameterValue -join ' | ') + \"}\"\r\n            }\r\n            if ($_.required -eq $false) {\r\n                $cmd += ']'\r\n            }\r\n        }\r\n    }\r\n    if ($hasCmdletBinding) {\r\n        $cmd += \" [<CommonParameters>]\"\r\n    }\r\n    Write-Output \"$lineFeed~~~powershell$lineFeed$($cmd)$lineFeed~~~\"\r\n}\r\n\r\nfunction Convert-Parameter($objItem, $commandName) {\r\n    $paramText = $lineFeed + \"###  -$($objItem.name.substring(0,1).ToUpper() + $objItem.name.substring(1))\"\r\n    if ( ($objItem.parameterValue -ne $null) -and ($objItem.parameterValue -ne 'SwitchParameter') ) {\r\n        $paramText += ' '\r\n        if ([string]($objItem.required) -eq 'false') {\r\n            $paramText += \"[\"\r\n        }\r\n        $paramText += \"&lt;$($objItem.parameterValue)&gt;\"\r\n        if ([string]($objItem.required) -eq 'false') {\r\n            $paramText += \"]\"\r\n        }\r\n    }\r\n    $paramText += $lineFeed\r\n    if ($objItem.description -ne $null) {\r\n        $parmText += (($objItem.description | ForEach-Object { Replace-CommonItems $_.Text }) -join \"$lineFeed\") + $lineFeed + $lineFeed\r\n    }\r\n    if ($objItem.parameterValueGroup -ne $null) {\r\n        $paramText += \"$($lineFeed)Valid options: \" + ($objItem.parameterValueGroup.parameterValue -join \", \") + $lineFeed + $lineFeed\r\n    }\r\n\r\n    $aliases = [string]((Get-Command -Name $commandName).parameters.\"$($objItem.Name)\".Aliases -join ', ')\r\n    $required = [string]($objItem.required)\r\n    $position = [string]($objItem.position)\r\n    $defValue = [string]($objItem.defaultValue -replace '@{Headers = @{}', '`@{Headers = @{}`' )\r\n    $acceptPipeline = [string]($objItem.pipelineInput)\r\n\r\n    $padding = ($aliases.Length, $required.Length, $position.Length, $defValue.Length, $acceptPipeline.Length | Measure-Object -Maximum).Maximum\r\n\r\n    $paramText += @\"\r\nProperty               | Value\r\n---------------------- | $([string]('-' * $padding))\r\nAliases                | $($aliases)\r\nRequired?              | $($required)\r\nPosition?              | $($position)\r\nDefault Value          | $($defValue)\r\nAccept Pipeline Input? | $($acceptPipeline)\r\n\r\n\"@\r\n\r\n    Write-Output $paramText\r\n}\r\n\r\nfunction Convert-CommandText {\r\n    param(\r\n        [string]$commandText,\r\n        [string]$commandName = ''\r\n    )\r\n    if ( $commandText -match '^\\s?NOTE: Options and switches apply to all items passed, so if you are\\s?$' `\r\n            -or $commandText -match '^\\s?installing multiple packages, and you use \\`\\-\\-version\\=1\\.0\\.0\\`, it is\\s?$' `\r\n            -or $commandText -match '^\\s?going to look for and try to install version 1\\.0\\.0 of every package\\s?$' `\r\n            -or $commandText -match '^\\s?passed\\. So please split out multiple package calls when wanting to\\s?$' `\r\n            -or $commandText -match '^\\s?pass specific options\\.\\s?$' `\r\n    ) {\r\n        return\r\n    }\r\n    $commandText = $commandText -creplace '^(.+)(\\s+Command\\s*)$', \"# `$1`$2 (choco $commandName)\"\r\n    $commandText = $commandText -creplace '^(DEPRECATION NOTICE|Usage|Troubleshooting|Examples|Exit Codes|Connecting to Chocolatey.org|See It In Action|Alternative Sources|Resources|Packages.config|Scripting \\/ Integration - Best Practices \\/ Style Guide)', '## $1'\r\n    $commandText = $commandText -replace '^(Commands|How To Pass Options)', '## $1'\r\n    $commandText = $commandText -replace '^(Windows Features|Ruby|Cygwin|Python)\\s*$', '### $1'\r\n    $commandText = $commandText -replace '(?<!\\s)NOTE:', '> :choco-info: **NOTE**'\r\n    $commandText = $commandText -replace '(?<!\\s)WARNING:', '> :choco-warning: **WARNING**'\r\n    $commandText = $commandText -replace '\\*> :choco-(info|warning): \\*\\*(INFO|WARNING|NOTE)\\*\\*\\*', '> :choco-$1: **$2**'\r\n    $commandText = $commandText -replace 'the command reference', '<Xref title=\"how to pass arguments\" value=\"choco-commands\" anchor=\"how-to-pass-options-switches\" />'\r\n    $commandText = $commandText -replace '(community feed[s]?|community repository)', '[$1](https://community.chocolatey.org/packages)'\r\n    #$commandText = $commandText -replace '\\`(apikey|install|upgrade|uninstall|list|search|info|outdated|pin)\\`', '[[`$1`|Commands$1]]'\r\n    $commandText = $commandText -replace '\\`([choco\\s]*)(apikey|install|upgrade|uninstall|list|search|info|outdated|pin)\\`', '<Xref title=\"`$1$2`\" value=\"choco-command-$2\" />'\r\n    $commandText = $commandText -replace '^(.+):\\s(.+.gif)$', '![$1]($2)'\r\n    $commandText = $commandText -replace '^(\\s+)\\<\\?xml', \"~~~xml$lineFeed`$1<?xml\"\r\n    $commandText = $commandText -replace '^(\\s+)</packages>', \"`$1</packages>$lineFeed~~~\"\r\n    $commandText = $commandText -replace '(Chocolatey for Business|Chocolatey Professional|Chocolatey Pro)(?=[^\\w])', '[$1](https://chocolatey.org/compare)'\r\n    $commandText = $commandText -replace '(Pro[fessional]\\s?/\\s?Business)', '[$1](https://chocolatey.org/compare)'\r\n    $commandText = $commandText -replace '([Ll]icensed editions)', '[$1](https://chocolatey.org/compare)'\r\n    $commandText = $commandText -replace '([Ll]icensed versions)', '[$1](https://chocolatey.org/compare)'\r\n    $commandText = $commandText -replace 'https://raw.githubusercontent.com/wiki/chocolatey/choco/images', '/images'\r\n    $commandText = $commandText -replace 'https://chocolatey.org/docs/features-automatically-recompile-packages', 'https://docs.chocolatey.org/en-us/guides/create/recompile-packages'\r\n    $commandText = $commandText -replace 'https://chocolatey.org/docs/features-private-cdn', 'https://docs.chocolatey.org/en-us/features/private-cdn'\r\n    $commandText = $commandText -replace 'https://chocolatey.org/docs/features-virus-check', 'https://docs.chocolatey.org/en-us/features/virus-check'\r\n    $commandText = $commandText -replace 'https://chocolatey.org/docs/features-synchronize', 'https://docs.chocolatey.org/en-us/features/package-synchronization'\r\n    $commandText = $commandText -replace 'explicity', 'explicit'\r\n    $commandText = $commandText -replace 'https://chocolatey.org/docs/features-create-packages-from-installers', 'https://docs.chocolatey.org/en-us/features/package-builder'\r\n    $commandText = $commandText -replace 'See https://chocolatey.org/docs/features-create-packages-from-installers', 'See more information about <Xref title=\"Package Builder features\" value=\"package-builder\" />'\r\n    $commandText = $commandText -replace 'See https://docs.chocolatey.org/en-us/features/package-builder', 'See more information about <Xref title=\"Package Builder features\" value=\"package-builder\" />'\r\n    $commandText = $commandText -replace 'https://chocolatey.org/docs/features-install-directory-override', 'https://docs.chocolatey.org/en-us/features/install-directory-override'\r\n    $commandText = $commandText -replace 'y.org/docs/features-package-reducer', 'y.org/docs/en-us/features/package-reducer'\r\n    $commandText = $commandText -replace 'https://chocolatey.org/docs/features-package-reducer', 'https://docs.chocolatey.org/en-us/features/package-reducer'\r\n    $commandText = $commandText -replace 'https://chocolatey.org/docs/en-us/features/package-reducer', 'https://docs.chocolatey.org/en-us/features/package-reducer'\r\n    $commandText = $commandText -replace '\\[community feed\\)\\]\\(https://community.chocolatey.org/packages\\)', '[community feed](https://community.chocolatey.org/packages))'\r\n    $commandText = $commandText -replace '> :choco-(info|warning): \\*\\*(INFO|WARNING|NOTE)\\*\\*\\s', '> :choco-$1: **$2**\r\n>\r\n> '\r\n\r\n    $optionsSwitches = @'\r\n## $1\r\n\r\n> :choco-info: **NOTE**\r\n>\r\n> Options and switches apply to all items passed, so if you are\r\n running a command like install that allows installing multiple\r\n packages, and you use `--version=1.0.0`, it is going to look for and\r\n try to install version 1.0.0 of every package passed. So please split\r\n out multiple package calls when wanting to pass specific options.\r\n\r\nIncludes <Xref title=\"default options/switches\" value=\"choco-commands\" anchor=\"default-options-and-switches\" /> (included below for completeness).\r\n\r\n~~~\r\n'@\r\n\r\n    $commandText = $commandText -replace '^(Options and Switches)', $optionsSwitches\r\n\r\n    $optionsSwitches = @'\r\n## $1\r\n\r\n> :choco-info: **NOTE**\r\n>\r\n> Options and switches apply to all items passed, so if you are\r\n running a command like install that allows installing multiple\r\n packages, and you use `--version=1.0.0`, it is going to look for and\r\n try to install version 1.0.0 of every package passed. So please split\r\n out multiple package calls when wanting to pass specific options.\r\n\r\n~~~\r\n'@\r\n\r\n    $commandText = $commandText -replace '^(Default Options and Switches)', $optionsSwitches\r\n\r\n    Write-Output $commandText\r\n}\r\n\r\nfunction Convert-CommandReferenceSpecific($commandText) {\r\n    $commandText = [Regex]::Replace($commandText, '\\s?\\s?\\*\\s(\\w+)\\s\\-',\r\n        {\r\n            param($m)\r\n            $commandName = $m.Groups[1].Value\r\n            $commandNameUpper = $($commandName.Substring(0, 1).ToUpper() + $commandName.Substring(1))\r\n            \" * <Xref title='$commandName' value='choco-command-$commandName' /> -\"\r\n        }\r\n    )\r\n    #$commandText = $commandText -replace '\\s?\\s?\\*\\s(\\w+)\\s\\-', ' * [[$1|Commands$1]] -'\r\n    $commandText = $commandText.Replace(\"## Default Options and Switches\", \"## See Help Menu In Action$lineFeed$lineFeed![choco help in action](/images/gifs/choco_help.gif)$lineFeed$lineFeed## Default Options and Switches\")\r\n\r\n    Write-Output $commandText\r\n}\r\n\r\nfunction Generate-TopLevelCommandReference {\r\n    Write-Host \"Generating Top Level Command Reference\"\r\n    $fileName = \"$docsFolder\\choco\\commands\\index.mdx\"\r\n    $commandOutput = @(\"---\")\r\n    $commandOutput += @(\"order: 40\")\r\n    $commandOutput += @(\"xref: choco-commands\")\r\n    $commandOutput += @(\"title: Commands\")\r\n    $commandOutput += @(\"description: Full list of all available Chocolatey commands\")\r\n    $commandOutput += @(\"---\")\r\n    $commandOutput += @(\"import Xref from '@components/Xref.astro';$lineFeed\")\r\n    $commandOutput += @(\"# Command Reference$lineFeed\")\r\n    $commandOutput += @(\"{/* This file is automatically generated based on output from the files at $sourceCommands using $($sourceLocation)GenerateDocs.ps1. Contributions are welcome at the original location(s). */} $lineFeed\")\r\n    $commandOutput += $(& $chocoExe -? -r)\r\n    $commandOutput += @(\"$lineFeed~~~$lineFeed\")\r\n    $commandOutput += @(\"$lineFeed$lineFeed> :choco-info: **NOTE**$lineFeed>$lineFeed> This documentation has been automatically generated from ``choco -h``. $lineFeed\")\r\n\r\n    $commandOutput |\r\n        ForEach-Object { Convert-CommandText($_) } |\r\n        ForEach-Object { Convert-CommandReferenceSpecific($_) } |\r\n        Out-File $fileName -Encoding UTF8 -Force\r\n}\r\n\r\nfunction Move-GeneratedFiles {\r\n    if (-not(Test-Path \"$docsFolder\\create\\commands\")) {\r\n        New-Item -ItemType Directory -Path \"$docsFolder\\create\\commands\" -ErrorAction Continue | Out-Null\r\n    }\r\n\r\n    Move-Item -Path \"$docsFolder\\choco\\commands\\apikey.mdx\" -Destination \"$docsFolder\\create\\commands\\api-key.mdx\"\r\n    Move-Item -Path \"$docsFolder\\choco\\commands\\new.mdx\" -Destination \"$docsFolder\\create\\commands\\new.mdx\"\r\n    Move-Item -Path \"$docsFolder\\choco\\commands\\pack.mdx\" -Destination \"$docsFolder\\create\\commands\\pack.mdx\"\r\n    Move-Item -Path \"$docsFolder\\choco\\commands\\push.mdx\" -Destination \"$docsFolder\\create\\commands\\push.mdx\"\r\n    Move-Item -Path \"$docsFolder\\choco\\commands\\template.mdx\" -Destination \"$docsFolder\\create\\commands\\template.mdx\"\r\n    Move-Item -Path \"$docsFolder\\choco\\commands\\templates.mdx\" -Destination \"$docsFolder\\create\\commands\\templates.mdx\"\r\n    Move-Item -Path \"$docsFolder\\choco\\commands\\convert.mdx\" -Destination \"$docsFolder\\create\\commands\\convert.mdx\"\r\n}\r\n\r\nfunction Generate-CommandReference($commandName, $order) {\r\n    if (-not(Test-Path \"$docsFolder\\choco\\commands\")) {\r\n        New-Item -ItemType Directory -Path \"$docsFolder\\choco\\commands\" -ErrorAction Continue | Out-Null\r\n    }\r\n    $fileName = Join-Path \"$docsFolder\\choco\\commands\" \"$($commandName.ToLower()).mdx\"\r\n    $commandNameLower = $commandName.ToLower()\r\n\r\n    Write-Host \"Generating $fileName ...\"\r\n    $commandOutput += @(\"---\")\r\n    $commandOutput += @(\"order: $order\")\r\n    $commandOutput += @(\"xref: choco-command-$commandNameLower\")\r\n    $commandOutput += @(\"title: $commandName\")\r\n    $commandOutput += @(\"description: $commandName Command (choco $commandNameLower)\")\r\n\r\n    if ($commandName -eq 'Features') {\r\n        $commandOutput += @(\"ShowInSidebar: false\")\r\n    }\r\n\r\n    if ($commandName -eq 'Templates') {\r\n        $commandOutput += @(\"ShowInSidebar: false\")\r\n    }\r\n\r\n    $commandOutput += @(\"---\")\r\n    $commandOutput += @(\"import Xref from '@components/Xref.astro';$lineFeed\")\r\n    $commandOutput += @(\"{/* This file is automatically generated based on output from $($sourceCommands)/Chocolatey$($commandName)Command.cs using $($sourceLocation)GenerateDocs.ps1. Contributions are welcome at the original location(s). If the file is not found, it is not part of the open source edition of Chocolatey or the name of the file is different. */} $lineFeed\")\r\n\r\n    $commandOutput += $(& $chocoExe $commandName.ToLower() -h -r)\r\n    $commandOutput += @(\"$lineFeed~~~$lineFeed$lineFeed<Xref title='Command Reference' value='choco-commands' classes='mb-3 d-block' />\")\r\n    $commandOutput += @(\"$lineFeed$lineFeed*NOTE:* This documentation has been automatically generated from ``choco $($commandName.ToLower()) -h``. $lineFeed\")\r\n    $fileContent = $commandOutput |\r\n        ForEach-Object { Convert-CommandText $_ $commandName.ToLower() } |\r\n        Out-String\r\n    # Surround indented blocks with code blocks (intended for Usage and Examples sections), ignoring sections we are putting in code blocks in other ways\r\n    $fileContent = $fileContent -replace '(\\r?\\n( {4}[^ <-].+\\r?\\n?)+)',\"`r`n~~~`$0~~~`r`n`r`n\"\r\n    $fileContent | Out-File $fileName -Encoding UTF8 -Force\r\n}\r\n\r\ntry {\r\n    Write-Host \"Importing the Module $psModuleName ...\"\r\n    Import-Module \"$psModuleLocation\" -Force -Verbose\r\n\r\n    # Switch Get-PackageParameters back for documentation\r\n    Remove-Item alias:Get-PackageParameters\r\n    Remove-Item function:Get-PackageParametersBuiltIn\r\n    Set-Alias -Name Get-PackageParametersBuiltIn -Value Get-PackageParameters -Scope Global\r\n\r\n    if (Test-Path($docsFolder)) {\r\n        Remove-Item $docsFolder -Force -Recurse -ErrorAction SilentlyContinue\r\n    }\r\n    if (-not(Test-Path $docsFolder)) {\r\n        New-Item -ItemType Directory -Path $docsFolder -ErrorAction Continue | Out-Null\r\n    }\r\n    if (-not(Test-Path \"$docsFolder\\create\\functions\")) {\r\n        New-Item -ItemType Directory -Path \"$docsFolder\\create\\functions\" -ErrorAction Continue | Out-Null\r\n    }\r\n\r\n    Write-Host 'Creating per PowerShell function markdown files...'\r\n    $helperOrder = 10;\r\n    Get-Command -Module $psModuleName -CommandType Function | ForEach-Object -Process { Get-Help $_ -Full } | ForEach-Object -Process { `\r\n            $commandName = $_.Name\r\n        $fileName = Join-Path \"$docsFolder\\create\\functions\" \"$($_.Name.ToLower()).mdx\"\r\n        $global:powerShellReferenceTOC += \"$lineFeed * <Xref title='$commandName' value='$([System.IO.Path]::GetFileNameWithoutExtension($fileName))' />\"\r\n        $hasCmdletBinding = (Get-Command -Name $commandName).CmdLetBinding\r\n\r\n        Write-Host \"Generating $fileName ...\"\r\n        $SplitName = $_.Name -split \"-\"\r\n        $NameNoHyphen = $_.Name -replace '-', ''\r\n\r\n        if ($_.Name -eq 'Get-OSArchitectureWidth') {\r\n            $FormattedName = \"get-os-architecture-width\"\r\n        }\r\n        elseif ($_.Name -eq 'Get-UACEnabled') {\r\n            $FormattedName = \"get-uac-enabled\"\r\n        }\r\n        else {\r\n            $FormattedName = $SplitName[0].ToLower() + ($SplitName[1] -creplace '[A-Z]', '-$&').ToLower()\r\n        }\r\n\r\n        @\"\r\n---\r\norder: $($helperOrder)\r\nxref: $($_.Name.ToLower())\r\ntitle: $($_.Name)\r\ndescription: Information on $($_.Name) function\r\n---\r\nimport Xref from '@components/Xref.astro';\r\n\r\n# $($_.Name)\r\n\r\n{/* This documentation is automatically generated from $sourceFunctions/$($_.Name)`.ps1 using $($sourceLocation)GenerateDocs.ps1. Contributions are welcome at the original location(s). */}\r\n\r\n$(Replace-CommonItems $_.Synopsis)\r\n\r\n## Syntax\r\n$( ($_.syntax.syntaxItem | ForEach-Object { Convert-Syntax $_ $hasCmdletBinding }) -join \"$lineFeed$lineFeed\")\r\n$( if ($_.description -ne $null) { $lineFeed + \"## Description\" + $lineFeed + $lineFeed + $(Replace-CommonItems $_.description.Text) })\r\n$( if ($_.alertSet -ne $null) { $lineFeed + \"## Notes\" + $lineFeed + $lineFeed +  $(Replace-CommonItems $_.alertSet.alert.Text) })\r\n\r\n## Aliases\r\n\r\n$(Get-Aliases $_.Name)\r\n$( if ($_.Examples -ne $null) { Write-Output \"$lineFeed## Examples$lineFeed$lineFeed\"; ($_.Examples.Example | ForEach-Object { Convert-Example $_ }) -join \"$lineFeed$lineFeed\"; Write-Output \"$lineFeed\" })\r\n## Inputs\r\n\r\n$( if ($_.InputTypes -ne $null -and $_.InputTypes.Length -gt 0 -and -not $_.InputTypes.Contains('inputType')) { $lineFeed + \" * $($_.InputTypes)\" + $lineFeed} else { 'None'})\r\n\r\n## Outputs\r\n\r\n$( if ($_.ReturnValues -ne $null -and $_.ReturnValues.Length -gt 0 -and -not $_.ReturnValues.StartsWith('returnValue')) { \"$lineFeed * $($_.ReturnValues)$lineFeed\"} else { 'None'})\r\n\r\n## Parameters\r\n$( if ($_.parameters.parameter.count -gt 0) { $_.parameters.parameter | ForEach-Object { Convert-Parameter $_ $commandName }}) $( if ($hasCmdletBinding) { \"$lineFeed### &lt;CommonParameters&gt;$lineFeed$($lineFeed)This cmdlet supports the common parameters: -Verbose, -Debug, -ErrorAction, -ErrorVariable, -OutBuffer, and -OutVariable. For more information, see ``about_CommonParameters`` http://go.microsoft.com/fwlink/p/?LinkID=113216 .\" } )\r\n\r\n$( if ($_.relatedLinks -ne $null) {Write-Output \"$lineFeed## Links$lineFeed$lineFeed\"; $_.relatedLinks.navigationLink | Where-Object { $_.linkText -ne $null} | ForEach-Object { Write-Output \"* <Xref title='$($_.LinkText)' value='$($_.LinkText.ToLower())' />$lineFeed\" }})\r\n\r\n<Xref title=\"Function Reference\" value=\"powershell-reference\" />\r\n\r\n> :choco-info: **NOTE**\r\n>\r\n> This documentation has been automatically generated from ``Import-Module `\"`$env:ChocolateyInstall\\helpers\\chocolateyInstaller.psm1`\" -Force; Get-Help $($_.Name) -Full``.\r\n\r\nView the source for [$($_.Name)]($sourceFunctions/$($_.Name)`.ps1)\r\n\"@  | Out-File $fileName -Encoding UTF8 -Force\r\n        $helperOrder = $helperOrder + 10\r\n    }\r\n\r\n    Write-Host \"Generating Top Level PowerShell Reference\"\r\n    $fileName = Join-Path \"$docsFolder\\create\\functions\" 'index.mdx'\r\n\r\n    $global:powerShellReferenceTOC += @'\r\n\r\n\r\n## Chocolatey for Business Functions\r\n\r\n* <Xref title=\"Install-ChocolateyWindowsService\" value=\"install-chocolateywindowsservice\" />\r\n* <Xref title=\"Start-ChocolateyWindowsService\" value=\"start-chocolateywindowsservice\" />\r\n* <Xref title=\"Stop-ChocolateyWindowsService\" value=\"stop-chocolateywindowsservice\" />\r\n* <Xref title=\"Uninstall-ChocolateyWindowsService\" value=\"uninstall-chocolateywindowsservice\" />\r\n\r\n## Variables\r\n\r\nThere are also a number of environment variables providing access to some values from the nuspec and other information that may be useful. They are accessed via `$env:variableName`.\r\n\r\n### Environment Variables\r\n\r\nChocolatey makes a number of environment variables available (You can access any of these with $env:TheVariableNameBelow):\r\n\r\n* TEMP/TMP - Overridden to the CacheLocation, but may be the same as the original TEMP folder\r\n* ChocolateyInstall - Top level folder where Chocolatey is installed\r\n* ChocolateyPackageName - The name of the package, equivalent to the `<id />` field in the nuspec\r\n* ChocolateyPackageTitle - The title of the package, equivalent to the `<title />` field in the nuspec\r\n* ChocolateyPackageVersion - The version of the package, equivalent to the `<version />` field in the nuspec\r\n\r\n#### Advanced Environment Variables\r\n\r\nThe following are more advanced settings:\r\n\r\n* ChocolateyPackageParameters - Parameters to use with packaging, not the same as install arguments (which are passed directly to the native installer). Based on `--package-parameters`.\r\n* CHOCOLATEY_VERSION - The version of Choco you normally see. Use if you are 'lighting' things up based on choco version, otherwise take a dependency on the specific version you need.\r\n* ChocolateyForceX86 = If available and set to 'true', then user has requested 32bit version. Automatically handled in built in Choco functions.\r\n* OS_PLATFORM - Like Windows, macOS, Linux.\r\n* OS_VERSION - The version of OS, like 6.1 something something for Windows.\r\n* OS_NAME - The reported name of the OS.\r\n* IS_PROCESSELEVATED = Is the process elevated?\r\n* ChocolateyPackageInstallLocation - Install location of the software that the package installs. Displayed at the end of the package install.\r\n\r\n#### Set By Options and Configuration\r\n\r\nSome environment variables are set based on options that are passed, configuration and/or features that are turned on:\r\n\r\n * ChocolateyEnvironmentDebug - Was `--debug` passed? If using the built-in PowerShell host, this is always true (but only logs debug messages to console if `--debug` was passed)\r\n * ChocolateyEnvironmentVerbose - Was `--verbose` passed? If using the built-in PowerShell host, this is always true (but only logs verbose messages to console if `--verbose` was passed).\r\n * ChocolateyForce - Was `--force` passed?\r\n * ChocolateyForceX86 - Was `-x86` passed?\r\n * ChocolateyRequestTimeout - How long before a web request will time out. Set by config `webRequestTimeoutSeconds`\r\n * ChocolateyResponseTimeout - How long to wait for a download to complete? Set by config `commandExecutionTimeoutSeconds`\r\n * ChocolateyPowerShellHost - Are we using the built-in PowerShell host? Set by `--use-system-powershell` or the feature `powershellHost`\r\n\r\n#### Business Edition Variables\r\n\r\n * ChocolateyInstallArgumentsSensitive - Encrypted arguments passed from command line `--install-arguments-sensitive` that are not logged anywhere.\r\n * ChocolateyPackageParametersSensitive - Package parameters passed from command line `--package-parameters-sensitive` that are not logged anywhere.\r\n * ChocolateyLicensedVersion - What version is the licensed edition on?\r\n * ChocolateyLicenseType - What edition / type of the licensed edition is installed?\r\n\r\n#### Experimental Environment Variables\r\n\r\nThe following are experimental or use not recommended:\r\n\r\n * OS_IS64BIT = This may not return correctly - it may depend on the process the app is running under\r\n * CHOCOLATEY_VERSION_PRODUCT = the version of Choco that may match CHOCOLATEY_VERSION but may be different - based on git describe\r\n * IS_ADMIN = Is the user an administrator? But doesn't tell you if the process is elevated.\r\n\r\n#### Not Useful Or Anti-Pattern If Used\r\n\r\n * ChocolateyInstallOverride - Not for use in package automation scripts. Based on `--override-arguments` being passed.\r\n * ChocolateyInstallArguments - The installer arguments meant for the native installer. You should use chocolateyPackageParameters instead. Based on `--install-arguments` being passed.\r\n * ChocolateyIgnoreChecksums - Was `--ignore-checksums` passed or the feature `checksumFiles` turned off?\r\n * ChocolateyAllowEmptyChecksums - Was `--allow-empty-checksums` passed or the feature `allowEmptyChecksums` turned on?\r\n * ChocolateyAllowEmptyChecksumsSecure - Was `--allow-empty-checksums-secure` passed or the feature `allowEmptyChecksumsSecure` turned on?\r\n * ChocolateyChecksum32 - Was `--download-checksum` passed?\r\n * ChocolateyChecksumType32 - Was `--download-checksum-type` passed?\r\n * ChocolateyChecksum64 - Was `--download-checksum-x64` passed?\r\n * ChocolateyChecksumType64 - Was `--download-checksum-type-x64` passed?\r\n * ChocolateyPackageExitCode - The exit code of the script that just ran - usually set by `Set-PowerShellExitCode`\r\n * ChocolateyLastPathUpdate - Set by Chocolatey as part of install, but not used for anything in particular in packaging.\r\n * ChocolateyProxyLocation - The explicit proxy location as set in the configuration `proxy`\r\n * ChocolateyDownloadCache - Use available download cache? Set by `--skip-download-cache`, `--use-download-cache`, or feature `downloadCache`\r\n * ChocolateyProxyBypassList - Explicitly set locations to ignore in configuration `proxyBypassList`\r\n * ChocolateyProxyBypassOnLocal - Should the proxy bypass on local connections? Set based on configuration `proxyBypassOnLocal`\r\n * http_proxy - Set by original `http_proxy` passthrough, or same as `ChocolateyProxyLocation` if explicitly set.\r\n * https_proxy - Set by original `https_proxy` passthrough, or same as `ChocolateyProxyLocation` if explicitly set.\r\n * no_proxy- Set by original `no_proxy` passthrough, or same as `ChocolateyProxyBypassList` if explicitly set.\r\n * ChocolateyPackageFolder - Not for use in package automation scripts. Recommend using `$toolsDir = \"$(Split-Path -parent $MyInvocation.MyCommand.Definition)\"` as per template generated by `choco new`\r\n * ChocolateyToolsLocation - Not for use in package automation scripts. Recommend using Get-ToolsLocation instead\r\n'@\r\n\r\n    $global:powerShellReferenceTOC | Out-File $fileName -Encoding UTF8 -Force\r\n\r\n    Write-Host \"Generating command reference markdown files\"\r\n    Generate-CommandReference 'Cache' '5'\r\n    Generate-CommandReference 'Config' '10'\r\n    Generate-CommandReference 'Download' '20'\r\n    Generate-CommandReference 'Export' '30'\r\n    Generate-CommandReference 'Find' '35'\r\n    Generate-CommandReference 'Feature' '40'\r\n    Generate-CommandReference 'Features' '45'\r\n    Generate-CommandReference 'Help' '50'\r\n    Generate-CommandReference 'Info' '60'\r\n    Generate-CommandReference 'Install' '70'\r\n    Generate-CommandReference 'List' '80'\r\n    Generate-CommandReference 'Optimize' '90'\r\n    Generate-CommandReference 'Outdated' '100'\r\n    Generate-CommandReference 'Pin' '110'\r\n    Generate-CommandReference 'Rule' '115'\r\n    Generate-CommandReference 'Search' '120'\r\n    Generate-CommandReference 'SetApiKey' '130'\r\n    Generate-CommandReference 'Source' '140'\r\n    Generate-CommandReference 'Sources' '150'\r\n    Generate-CommandReference 'Support' '160'\r\n    Generate-CommandReference 'Sync' '170'\r\n    Generate-CommandReference 'Synchronize' '180'\r\n    Generate-CommandReference 'Uninstall' '190'\r\n    Generate-CommandReference 'UnpackSelf' '200'\r\n    Generate-CommandReference 'Upgrade' '220'\r\n\r\n    Generate-CommandReference 'New' '10'\r\n    Generate-CommandReference 'Pack' '20'\r\n    Generate-CommandReference 'ApiKey' '30'\r\n    Generate-CommandReference 'Push' '40'\r\n    Generate-CommandReference 'Template' '50'\r\n    Generate-CommandReference 'Templates' '55'\r\n    Generate-CommandReference 'Convert' '60'\r\n\r\n    Generate-TopLevelCommandReference\r\n    Move-GeneratedFiles\r\n\r\n    Exit 0\r\n}\r\ncatch {\r\n    Throw \"Failed to generate documentation.  $_\"\r\n    Exit 255\r\n}\r\n"
        },
        {
          "name": "GitReleaseManager.yaml",
          "type": "blob",
          "size": 1.0849609375,
          "content": "issue-labels-include:\r\n  - Breaking Change\r\n  - Deprecate\r\n  - Feature\r\n  - C4B Feature\r\n  - Bug\r\n  - Improvement\r\n  - Documentation\r\n  - Dependency Change\r\nissue-labels-exclude:\r\n  - Internal Refactoring\r\n  - BuildAutomation\r\n  - NO RELEASE NOTES\r\nissue-labels-alias:\r\n  - name:    Documentation\r\n    header:  Documentation\r\n    plural:  Documentation\r\n  - name:    Bug\r\n    header:  Bug Fix\r\n    plural:  Bug Fixes\r\n  - name:    Deprecate\r\n    header:  Deprecated Feature\r\n    plural:  Deprecated Features\r\ncreate:\r\n  include-sha-section: true\r\n  sha-section-heading: \"SHA256 Hashes of the release artifacts\"\r\n  sha-section-line-format: \"- `{1}\\t{0}`\"\r\nclose:\r\n  use-issue-comments: true\r\n  issue-comment: |-\r\n    :tada: This issue has been resolved in version {milestone} :tada:\r\n\r\n    The release is available on:\r\n\r\n    - [GitHub Release](https://github.com/{owner}/{repository}/releases/tag/{milestone})\r\n    - [Chocolatey Package](https://community.chocolatey.org/packages/chocolatey/{milestone})\r\n\r\n    Your **[GitReleaseManager](https://github.com/GitTools/GitReleaseManager)** bot :package: :rocket:\r\n"
        },
        {
          "name": "GitVersion.yml",
          "type": "blob",
          "size": 0.0185546875,
          "content": "next-version: 2.0.0"
        },
        {
          "name": "Invoke-AuthedTests.ps1",
          "type": "blob",
          "size": 2.6923828125,
          "content": "﻿#Requires -Module @{ ModuleName = 'pester'; ModuleVersion = '5.3.1' }\r\n#Requires -RunAsAdministrator\r\n<#\r\n    .SYNOPSIS\r\n    Prepares a system to test as though it was Test Kitchen.\r\n#>\r\nparam(\r\n    # Path to place Chocolatey test related artifacts.\r\n    [string]\r\n    $TestPath = \"$env:TEMP/chocolateyTests\",\r\n\r\n    # Indicate to skip packaging all of the tests packages. Useful for running tests after you've performed the tests previously.\r\n    [switch]\r\n    $SkipPackaging,\r\n\r\n    # The remote repository to push packages to and to use during tests.\r\n    [string]\r\n    $RemoteRepository,\r\n\r\n    # API Key used by the remote repository for pushing packages.\r\n    [string]\r\n    $ApiKey\r\n)\r\n\r\nif (-not (Test-Path \"$TestPath/packages\") -or -not $SkipPackaging) {\r\n    if (($null -ne $RemoteRepository) -and ($null -ne $ApiKey))\r\n    $null = New-Item -Path \"$TestPath/packages\" -ItemType Directory -Force\r\n    # Get and pack packages\r\n    $nuspecs = Get-ChildItem -Path $PSScriptRoot/src/chocolatey.tests.integration, $PSScriptRoot/tests/packages -Recurse -Include *.nuspec\r\n    Get-ChildItem -Path $PSScriptRoot/tests/packages -Recurse -Include *.nupkg | Copy-Item -Destination \"$TestPath/packages\"\r\n\r\n    foreach ($file in $nuspecs) {\r\n        Write-Host \"Packaging $file\"\r\n        $null = choco pack $file.FullName --out \"$TestPath/packages\"\r\n    }\r\n\r\n    Get-ChildItem -Path $TestPath/packages | ForEach-Object {\r\n        choco push $_.FullName -s $RemoteRepository -k $ApiKey --force --allow-unofficial\r\n    }\r\n}\r\n\r\ntry {\r\n    Push-Location $PSScriptRoot/tests\r\n    $env:PSModulePath = \"$PSScriptRoot/tests;$env:PSModulePath\"\r\n\r\n    Import-Module $PSScriptRoot\\tests\\helpers\\common-helpers.psm1 -Force\r\n    $null = Invoke-Choco source add --name hermes --source $RemoteRepository\r\n    Enable-ChocolateyFeature -Name allowGlobalConfirmation\r\n    $PesterConfiguration = [PesterConfiguration]@{\r\n        Run        = @{\r\n            PassThru = $true\r\n            Path     = \"$PSScriptRoot/tests/chocolatey-tests\"\r\n        }\r\n        TestResult = @{\r\n            Enabled       = $true\r\n            TestSuiteName = \"Pester - Chocolatey\"\r\n        }\r\n        Output     = @{\r\n            Verbosity = 'Minimal'\r\n        }\r\n        Filter     = @{\r\n            ExcludeTag = @(\r\n                'Background'\r\n                'Licensed'\r\n                'CCM'\r\n                'WIP'\r\n                'NonAdmin'\r\n                'Internal'\r\n                if (-not $env:VM_RUNNING -and -not $env:TEST_KITCHEN) {\r\n                    'VMOnly'\r\n                }\r\n            )\r\n        }\r\n        Should     = @{\r\n            ErrorAction = 'Continue'\r\n        }\r\n    }\r\n\r\n    Invoke-Pester -Configuration $PesterConfiguration\r\n}\r\nfinally {\r\n    Pop-Location\r\n}\r\n"
        },
        {
          "name": "Invoke-Tests.ps1",
          "type": "blob",
          "size": 7.900390625,
          "content": "#Requires -Module @{ ModuleName = 'pester'; ModuleVersion = '5.3.1' }\r\n#Requires -RunAsAdministrator\r\n<#\r\n    .SYNOPSIS\r\n    Extracts and \"installs\" Chocolatey nupkg package for testing with Pester.\r\n#>\r\nparam(\r\n    # Path to place Chocolatey test related artifacts.\r\n    [string]\r\n    $TestPath = \"$env:TEMP/chocolateyTests\",\r\n\r\n    # Path of the nupkg to be tested. Defaults to `code_drop/Packages/Chocolatey/chocolatey.<version>.nupkg`\r\n    [ValidateScript({\r\n            $count = (Get-Item $_).Count\r\n            if ($count -ne 1) {\r\n                throw \"Expected 1 item, found $count\"\r\n            }\r\n            $true\r\n        })]\r\n    [string]\r\n    $TestPackage,\r\n\r\n    # Indicate to skip packaging all of the tests packages. Useful for running tests after you've performed the tests previously.\r\n    [switch]\r\n    $SkipPackaging,\r\n\r\n    # Specific tag(s) of tests to run\r\n    [string[]]\r\n    $Tag\r\n)\r\n$packageRegex = 'chocolatey\\.\\d.*\\.nupkg'\r\n\r\n# Check if there are any tests that exceed Test Kitchen maximum lengths\r\n$TestsLocation = Join-Path $PSScriptRoot tests\r\n$MaxFileNameLength = 110\r\n$LongFiles = Get-ChildItem $TestsLocation -Recurse |\r\n    Where-Object { ($_.FullName.Length - $TestsLocation.Length) -gt $MaxFileNameLength } |\r\n        Select-Object -Property @{Name = 'RelativePath' ; Expression = { $_.FullName.Replace($TestsLocation, [string]::Empty) } }, @{ Name = 'ReductionNeeded' ; Expression = { $_.FullName.Length - $TestsLocation.Length - $MaxFileNameLength } }\r\n\r\nif ($LongFiles) {\r\n    Write-Host \"Tests' file paths may be too long for Test Kitchen use. Please shorten file names or paths:\"\r\n    $LongFiles | Format-List | Out-String | Out-Host\r\n    throw \"Unable to complete tests due to long file paths\"\r\n}\r\n\r\n# Use TstPkg as TestPackage has ValidateScript that can't be circumvented\r\nif (-not $TestPackage) {\r\n    $TstPkg = Get-ChildItem $PSScriptRoot/code_drop/Packages/Chocolatey -Filter *.nupkg | Where-Object Name -Match $packageRegex\r\n}\r\nelse {\r\n    $TstPkg = Get-ChildItem $TestPackage\r\n}\r\n\r\nif (-not (Test-Path \"$TestPath/packages\") -or -not $SkipPackaging) {\r\n    $null = New-Item -Path \"$TestPath/packages\" -ItemType Directory -Force\r\n    # Get and pack packages\r\n    $nuspecs = Get-ChildItem -Path $PSScriptRoot/src/chocolatey.tests.integration, $PSScriptRoot/tests/packages -Recurse -Include *.nuspec | Where-Object FullName -NotMatch 'bin'\r\n    Get-ChildItem -Path $PSScriptRoot/tests/packages -Recurse -Include *.nupkg | Copy-Item -Destination \"$TestPath/packages\"\r\n\r\n    $packFailures = foreach ($file in $nuspecs) {\r\n        # Include allow-unofficial in case an unofficial Chocolatey has been installed globally for testing\r\n        $packOutput = choco pack $file.FullName --out \"$TestPath/packages\" --allow-unofficial\r\n        if ($LASTEXITCODE -ne 0) {\r\n            [pscustomobject]@{\r\n                Package = $file.FullName\r\n                ExitCode = $LASTEXITCODE\r\n                Output = $packOutput\r\n            }\r\n            Write-Warning \"Failed to pack $file\"\r\n        }\r\n        else {\r\n            Write-Host \"Packaged $file\"\r\n        }\r\n    }\r\n\r\n    if ($null -ne $packFailures) {\r\n        foreach ($failure in $packFailures) {\r\n            Write-Warning \"$($failure.Package) failed to pack with exit code: $($failure.ExitCode)\"\r\n            $failure.Output | Write-Warning\r\n        }\r\n        # If you want to stop things, change this to a throw.\r\n        # This is not currently throwing as there are two packages that are supposed to fail.\r\n        Write-Error \"$($packFailures.Count) packages failed to pack.\"\r\n    }\r\n}\r\n\r\nif (-not (Test-Path \"$TestPath/all-packages\") -or -not $SkipPackaging) {\r\n    $null = New-Item -Path \"$TestPath/all-packages\" -ItemType Directory -Force\r\n\r\n    # These are the package ids that are loaded into the all packages test repository.\r\n    $AllPackagesRepository = @(\r\n        'isdependency'\r\n        'hasdependency'\r\n        'hasnesteddependency'\r\n        'downgradesdependency'\r\n        'dependencyfailure'\r\n        'hasfailingnesteddependency'\r\n        'failingdependency'\r\n        'isexactversiondependency'\r\n    )\r\n\r\n    foreach ($package in $AllPackagesRepository) {\r\n        $null = Copy-Item \"$TestPath/packages/$package.*.nupkg\" \"$TestPath/all-packages/\"\r\n    }\r\n}\r\n\r\nCopy-Item -Path $TstPkg.FullName -Destination $TestPath -Force\r\n$nupkg = Get-ChildItem -Path \"$TestPath/$($TstPkg.Name)\"\r\n\r\nif (Test-Path \"$TestPath\\chocolatey\") {\r\n    Write-Host \"$TestPath\\chocolatey already exists. Removing so we can continue installation successfully.\"\r\n    Remove-Item \"$TestPath/chocolatey\" -Recurse -Force\r\n}\r\n\r\ntry {\r\n    Push-Location $TestPath\r\n    Import-Module $PSScriptRoot\\tests\\helpers\\common-helpers.psm1 -Force\r\n    Expand-ZipArchive -Source $nupkg.FullName -Destination ./chocolatey\r\n    Import-Module $TestPath/Chocolatey/tools/ChocolateyInstall/helpers/chocolateyInstaller.psm1\r\n    Import-Module $TestPath/Chocolatey/tools/ChocolateySetup.psm1\r\n    $environmentVariables = @{\r\n        UserPath                 = Get-EnvironmentVariable -Name 'PATH' -Scope 'User'\r\n        UserChocolateyInstall    = Get-EnvironmentVariable -Name 'ChocolateyInstall' -Scope 'User'\r\n        UserPSModulePath         = Get-EnvironmentVariable -Name 'PSModulePath' -Scope 'User'\r\n        MachinePath              = Get-EnvironmentVariable -Name 'PATH' -Scope 'Machine'\r\n        MachineChocolateyInstall = Get-EnvironmentVariable -Name 'ChocolateyInstall' -Scope 'Machine'\r\n        MachinePSModulePath      = Get-EnvironmentVariable -Name 'PSModulePath' -Scope 'Machine'\r\n    }\r\n\r\n    $env:ChocolateyInstall = \"$TestPath/base\"\r\n    $null = Initialize-Chocolatey\r\n    # It seems this is getting clobbered by Initialize-Chocolatey... No idea why...\r\n    $env:ChocolateyInstall = \"$TestPath/base\"\r\n\r\n    Pop-Location\r\n    Push-Location $PSScriptRoot/tests\r\n    $env:PSModulePath = \"$PSScriptRoot/tests;$env:PSModulePath\"\r\n\r\n    Import-Module $PSScriptRoot\\tests\\helpers\\common-helpers.psm1 -Force\r\n    $null = Invoke-Choco source add --name hermes --source \"$TestPath/packages\"\r\n    $null = Invoke-Choco source add --name hermes-all --source \"$TestPath/all-packages\"\r\n    Enable-ChocolateyFeature -Name allowGlobalConfirmation\r\n    $PesterConfiguration = [PesterConfiguration]@{\r\n        Run        = @{\r\n            PassThru = $true\r\n            Path     = \"$PSScriptRoot/tests/pester-tests\"\r\n        }\r\n        TestResult = @{\r\n            Enabled       = $true\r\n            TestSuiteName = \"Pester - Chocolatey\"\r\n        }\r\n        Output     = @{\r\n            Verbosity = 'Minimal'\r\n        }\r\n        Filter     = @{\r\n            ExcludeTag = @(\r\n                'Background'\r\n                'Licensed'\r\n                'CCM'\r\n                'WIP'\r\n                'NonAdmin'\r\n                'Internal'\r\n                if (-not $env:VM_RUNNING -and -not $env:TEST_KITCHEN) {\r\n                    'VMOnly'\r\n                }\r\n            )\r\n        }\r\n        Should     = @{\r\n            ErrorAction = 'Continue'\r\n        }\r\n    }\r\n\r\n    if ($Tag) {\r\n        $PesterConfiguration.Filter.Tag = $Tag\r\n    }\r\n\r\n    Invoke-Pester -Configuration $PesterConfiguration\r\n}\r\nfinally {\r\n    # For some reason we need to import this again... I'm not 100% sure on why...\r\n    Import-Module $TestPath/Chocolatey/tools/ChocolateyInstall/helpers/chocolateyInstaller.psm1 -Force\r\n    # Put back Path and Chocolatey\r\n    Set-EnvironmentVariable -Name 'PATH' -Scope 'User' -Value $environmentVariables.UserPath\r\n    Set-EnvironmentVariable -Name 'ChocolateyInstall' -Scope 'User' -Value $environmentVariables.UserChocolateyInstall\r\n    Set-EnvironmentVariable -Name 'PSModulePath' -Scope 'User' -Value $environmentVariables.UserPSModulePath\r\n    Set-EnvironmentVariable -Name 'PATH' -Scope 'Machine' -Value $environmentVariables.MachinePath\r\n    Set-EnvironmentVariable -Name 'ChocolateyInstall' -Scope 'Machine' -Value $environmentVariables.MachineChocolateyInstall\r\n    Set-EnvironmentVariable -Name 'PSModulePath' -Scope 'Machine' -Value $environmentVariables.MachinePSModulePath\r\n    Pop-Location\r\n}\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.0712890625,
          "content": "                                 Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability."
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.84765625,
          "content": "   Copyright (c) 2017 - 2021 Chocolatey Software, Inc.\r\n   Copyright (c) 2011 - 2017 RealDimensions Software, LLC\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n\r\n   Additional legal information and licenses used by Chocolatey CLI can be\r\n   found in the CREDITS file or at\r\n   https://github.com/chocolatey/choco/blob/develop/docs/legal/CREDITS.md\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.1123046875,
          "content": "# Chocolatey - like yum or apt-get, but for Windows\r\nYou can just call me choco.\r\n\r\n![Chocolatey Logo](https://rawcdn.githack.com/chocolatey/choco/14a627932c78c8baaba6bef5f749ebfa1957d28d/docs/logo/chocolateyicon.gif \"Chocolatey\")\r\n\r\n[![](https://img.shields.io/chocolatey/dt/chocolatey.svg)](https://community.chocolatey.org/packages/chocolatey)\r\n[![](https://img.shields.io/chocolatey/v/chocolatey.svg)](https://community.chocolatey.org/packages/chocolatey)\r\n[![Docker Image Version (latest semver)](https://img.shields.io/docker/v/chocolatey/choco?label=docker&logo=docker&sort=semver)](https://hub.docker.com/r/chocolatey/choco)\r\n[![Project Stats](https://www.openhub.net/p/chocolatey/widgets/project_thin_badge.gif)](https://www.openhub.net/p/chocolatey)\r\n[![Coverage Status](https://coveralls.io/repos/github/chocolatey/choco/badge.svg?branch=develop)](https://coveralls.io/github/chocolatey/choco?branch=develop)\r\n\r\n<!-- TOC -->\r\n\r\n- [Build Status](#build-status)\r\n- [Chat Room](#chat-room)\r\n- [Support Chocolatey!](#support-chocolatey)\r\n- [See Chocolatey In Action](#see-chocolatey-in-action)\r\n- [Etiquette Regarding Communication](#etiquette-regarding-communication)\r\n- [Information](#information)\r\n  - [Documentation](#documentation)\r\n  - [Requirements](#requirements)\r\n  - [License / Credits](#license--credits)\r\n- [Submitting Issues](#submitting-issues)\r\n- [Contributing](#contributing)\r\n- [Committers](#committers)\r\n  - [Compiling / Building Source](#compiling--building-source)\r\n    - [Windows](#windows)\r\n    - [Other Platforms](#other-platforms)\r\n      - [Prerequisites:](#prerequisites)\r\n      - [Before building:](#before-building)\r\n      - [Build Process:](#build-process)\r\n  - [Testing](#testing)\r\n  - [Installing on Other Platforms:](#installing-on-other-platforms)\r\n- [Credits](#credits)\r\n\r\n<!-- /TOC -->\r\n\r\n## Build Status\r\n\r\n| GitHub Action                                                                                                                                                                                                  |\r\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| [![GitHub Workflow Status (branch)](https://img.shields.io/github/workflow/status/chocolatey/choco/Chocolatey%20Builds/develop?logo=github)](https://github.com/chocolatey/choco/actions/workflows/build.yml)  |\r\n\r\n## Chat Room\r\n\r\nCome join in the conversation about Chocolatey in our Community Chat Room.\r\n\r\n[![Discord](https://img.shields.io/discord/778552361454141460?logo=Discord)](https://ch0.co/community)\r\n\r\nPlease make sure you've read over and agree with the [etiquette regarding communication](#etiquette-regarding-communication).\r\n\r\n## Support Chocolatey!\r\n\r\n * Purchase [Chocolatey Pro / Chocolatey for Business](https://chocolatey.org/pricing#compare)\r\n\r\n## See Chocolatey In Action\r\n\r\nChocolatey FOSS install showing tab completion and `refreshenv` (a way to update environment variables without restarting your shell):\r\n\r\n![install](https://raw.githubusercontent.com/wiki/chocolatey/choco/images/gifs/choco_install.gif \"Wat? Tab completion and updating environment variables!\")\r\n\r\n[Chocolatey Pro](https://chocolatey.org/compare) showing private CDN download cache and virus scan protection:\r\n\r\n![install w/pro](https://raw.githubusercontent.com/wiki/chocolatey/choco/images/gifs/chocopro_install_stopped.gif \"Chocolatey Pro availability now! A great option for individuals looking for that community PLUS option.\")\r\n\r\n## Etiquette Regarding Communication\r\n\r\nIf you are an open source user requesting support, please remember that most folks in the Chocolatey community are volunteers that have lives outside of open source and are not paid to ensure things work for you, so please be considerate of others' time when you are asking for things. Many of us have families that also need time as well and only have so much time to give on a daily basis. A little consideration and patience can go a long way. After all, you are using a pretty good tool without cost. It may not be perfect (yet), and we know that.\r\n\r\nIf you are using a [commercial edition of Chocolatey](https://chocolatey.org/compare#compare), you have different terms! Please see [support](https://chocolatey.org/support).\r\n\r\n## Information\r\n\r\n * [Chocolatey Website and Community Package Repository](https://community.chocolatey.org)\r\n * [Mailing List](https://groups.google.com/group/chocolatey) / [Release Announcements Only Mailing List](https://groups.google.com/group/chocolatey-announce) / [Build Status Mailing List](http://groups.google.com/group/chocolatey-build-status)\r\n * [Twitter](https://twitter.com/chocolateynuget) / [Facebook](https://www.facebook.com/ChocolateySoftware) / [GitHub](https://github.com/chocolatey)\r\n * [Blog](https://blog.chocolatey.org/) / [Newsletter](https://chocolatey.us8.list-manage1.com/subscribe?u=86a6d80146a0da7f2223712e4&id=73b018498d)\r\n * [Documentation](https://docs.chocolatey.org/en-us/) / [Support](https://chocolatey.org/support)\r\n\r\n### Documentation\r\n\r\nPlease see the [docs](https://docs.chocolatey.org/en-us/)\r\n\r\nGive `choco.exe -?` a shot (or `choco.exe -h`). For specific commands, add the command and then the help switch e.g. `choco.exe install -h`.\r\n\r\n### Requirements\r\n\r\n* .NET Framework 4.8+\r\n* PowerShell 2.0+\r\n* Windows Server 2008 R2+ / Windows 10+\r\n  - See our documentation on the [support lifecycle and supported operating systems](https://docs.chocolatey.org/en-us/information/support-lifecycle) for additional information\r\n\r\n### License / Credits\r\n\r\nApache 2.0 - see [LICENSE](https://github.com/chocolatey/choco/blob/master/LICENSE) and [NOTICE](https://github.com/chocolatey/choco/blob/master/NOTICE) files.\r\n\r\n## Submitting Issues\r\n\r\n![submitting issues](https://cloud.githubusercontent.com/assets/63502/12534554/6ea7cc04-c224-11e5-82ad-3805d0b5c724.png)\r\n\r\n * If you are having issue with a package, please see [Request Package Fixes or Updates / Become a maintainer of an existing package](https://docs.chocolatey.org/en-us/community-repository/users/package-triage-process).\r\n * If you are looking for packages to be added to the community feed (aka https://community.chocolatey.org/packages), please see [Package Requests](https://docs.chocolatey.org/en-us/community-repository/users/package-triage-process#package-request-package-missing).\r\n\r\n 1. Start with [Troubleshooting](https://docs.chocolatey.org/en-us/troubleshooting) and the [FAQ](https://docs.chocolatey.org/en-us/faqs) to see if your question or issue already has an answer.\r\n 1. If not found or resolved, please follow one of the following avenues:\r\n    * If you are a licensed customer, please see [support](https://chocolatey.org/support). You can also log an issue to [Licensed Issues](https://github.com/chocolatey/chocolatey-licensed-issues) and we will submit issues to all other places on your behalf. Another avenue is to use email support to have us submit tickets and other avenues on your behalf (allowing you to maintain privacy).\r\n    * If it is an enhancement request or issue with the website (the community package repository aka [https://community.chocolatey.org](https://community.chocolatey.org)), please submit the issue to the [Chocolatey.org repo](https://github.com/chocolatey/home).\r\n    * If you have found an issue with the GUI (Chocolatey GUI) or you want to submit an enhancement, please see [the ChocolateyGUI repository](https://github.com/chocolatey/ChocolateyGUI#submitting-issues).\r\n    * If you have found an issue with the client (choco.exe), you are in the right place. Keep reading below.\r\n\r\nObserve the following help for submitting an issue:\r\n\r\nPrerequisites:\r\n\r\n * The issue has to do with choco itself and is not a package or website issue.\r\n * Please check to see if your issue already exists with a quick search of the issues. Start with one relevant term and then add if you get too many results.\r\n * You are not submitting an \"Enhancement\". Enhancements should observe [CONTRIBUTING](https://github.com/chocolatey/choco/blob/develop/CONTRIBUTING.md) guidelines.\r\n * You are not submitting a question - questions are better served as [emails](https://groups.google.com/group/chocolatey) or [Community Chat questions](https://ch0.co/community-support).\r\n * Please make sure you've read over and agree with the [etiquette regarding communication](#etiquette-regarding-communication).\r\n\r\nSubmitting a ticket:\r\n\r\n * We'll need debug and verbose output, so please run and capture the log with `-dv` or `--debug --verbose`. You can submit that with the issue or create a gist and link it.\r\n * **Please note** that the debug/verbose output for some commands may have sensitive data (passwords or API keys) related to Chocolatey, so please remove those if they are there prior to submitting the issue.\r\n * choco.exe logs to a file in `$env:ChocolateyInstall\\log\\`. You can grab the specific log output from there so you don't have to capture or redirect screen output. Please limit the amount included to just the command run (the log is appended to with every command).\r\n * Please save the log output in a [gist](https://gist.github.com) (save the file as `log.sh`) and link to the gist from the issue. Feel free to create it as secret so it doesn't fill up against your public gists. Anyone with a direct link can still get to secret gists. If you accidentally include secret information in your gist, please delete it and create a new one (gist history can be seen by anyone) and update the link in the ticket (issue history is not retained except by email - deleting the gist ensures that no one can get to it). Using gists this way also keeps accidental secrets from being shared in the ticket in the first place as well.\r\n * We'll need the entire log output from the run, so please don't limit it down to areas you feel are relevant. You may miss some important details we'll need to know. This will help expedite issue triage.\r\n * It's helpful to include the version of choco, the version of the OS, and the version of PowerShell (Posh) - the debug script should capture all of those pieces of information.\r\n * Include screenshots and/or animated gifs whenever possible, they help show us exactly what the problem is.\r\n\r\n## Contributing\r\n\r\nIf you would like to contribute code or help squash a bug or two, that's awesome. Please familiarize yourself with [CONTRIBUTING](https://github.com/chocolatey/choco/blob/develop/CONTRIBUTING.md).\r\n\r\nThis project uses an [.editorconfig](https://editorconfig.org) file in order to help maintain consistency of code.\r\nErrors and warnings produced by not following these defined conventions will in future be enforced at build time, so ensure your contributions adhere to the rules defined in it and produce no warnings or errors in Visual Studio.\r\n\r\n## Committers\r\n\r\nCommitters, you should be very familiar with [COMMITTERS](https://github.com/chocolatey/choco/blob/develop/COMMITTERS.md).\r\n\r\n### Compiling / Building Source\r\n\r\nThere is a `build.bat`/`build.sh` file that creates a necessary generated file named `SolutionVersion.cs`. It must be run at least once before Visual Studio will build.\r\n\r\n#### Windows\r\n\r\nPrerequisites:\r\n\r\nThe following are a minimum set of requirements to successfully complete the build process:\r\n\r\n * .NET Framework 4.8\r\n * .NET Framework 4.8 Dev Pack\r\n * Visual Studio 2019 or Visual Studio 2019 Build Tools\r\n * .NET SDK (i.e. ability to install .NET Global tools using `dotnet tool install`)\r\n\r\nThere is a `setup.ps1` file at the root of this repository, which can be used to install all of the above.\r\n\r\nBuild Process:\r\n\r\n * Run `build.bat`.\r\n\r\n> [!IMPORTANT]\r\n> It is assumed that Chocolatey CLI is installed on the machine where you are running the build, as this is required to generate the final Chocolatey package.\r\n> If required, you can skip the creation of the Chocolatey packages using the `--shouldRunChocolatey` option, i.e. `.\\build.bat --shouldRunChocolatey=false`\r\n\r\nRunning the build on Windows should produce an artifact that is tested and ready to be used.\r\n\r\n#### Other Platforms\r\n\r\n##### Prerequisites:\r\n\r\n * Install and configure Mono. Mono 6.6 or newer should work, see `docker/Dockerfile.linux` for the currently recommended version of Mono.\r\n    * Linux systems; see [Mono install instructions for Linux](https://www.mono-project.com/download/stable/#download-lin)\r\n    * Mac systems; see [Mono install instructions for Mac](https://www.mono-project.com/download/stable/#download-mac)\r\n * Install .NET 6.0 SDK or newer. This is used in the build scripts.\r\n    * Linux systems; see [Install .NET on Linux](https://learn.microsoft.com/en-us/dotnet/core/install/linux)\r\n    * Mac systems; see [Install .NET on macOS](https://learn.microsoft.com/en-us/dotnet/core/install/macos)\r\n    * This is required for some Dotnet Global Tools used during the Cake build. The .NET Frameworks equivalent builds do not work on Mono.\r\n * If building from Git, then having Git 2.22+ installed is required.\r\n * MonoDevelop is helpful for working on source.\r\n\r\n##### Before building:\r\n\r\n * Consider adding the following to your `~/.profile` (or other relevant dot source file):\r\n\r\n```sh\r\n# Mono\r\n# http://www.michaelruck.de/2010/03/solving-pkg-config-and-mono-35-profile.html\r\n# https://cloudgen.wordpress.com/2013/03/06/configure-nant-to-run-under-mono-3-06-beta-for-mac-osx/\r\nexport PKG_CONFIG_PATH=/opt/local/lib/pkgconfig:/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig:$PKG_CONFIG_PATH\r\n```\r\n\r\n * Set your permissions correctly:\r\n\r\n```sh\r\nchmod +x *.sh\r\n```\r\n\r\n##### Build Process:\r\n\r\n * Run `./build.sh`.\r\n\r\nRunning the build on Mono produces an artifact similar to Windows but may have more rough edges. You may get a failure or two in the build script that can be safely ignored.\r\n\r\n### Testing\r\n\r\nThe Chocolatey CLI codebase contains a number of different tests, including unit, integration, and end-to-end tests.\r\nThese are all documented in the [TESTING.md](https://github.com/chocolatey/choco/blob/develop/TESTING.md) file.\r\n\r\nThe unit and integration tests are NUnit tests, which can be executed directly within Visual Studio, or as part of the [build process](https://github.com/chocolatey/choco/blob/develop/TESTING.md#running-tests).\r\n\r\nThe end-to-end tests use Pester as the test framework. Since these tests have the potential to actually make changes to your system, we recommend using the [provided Vagrant file to run these tests in a dedicated virtual machine](https://github.com/chocolatey/choco/blob/develop/TESTING.md#pester-tests).\r\n\r\n### Installing on Other Platforms:\r\n\r\n 1. Get a copy of the source code and build.\r\n 1. Copy (or link) the contents of `./code_drop/temp/_PublishedApps/choco` to your preferred install directory. On Linux, the preferred directory is `/opt/chocolatey`\r\n 1. Export the `ChocolateyInstall` environment variable, pointing to the install directory the build output was copied too.\r\n 1. Copy `./docker/choco_wrapper` to a directory on the `$PATH`, rename to `choco`, and if the install directory is something else than `/opt/chocolatey`, then edit it to point to the correct path.\r\n\r\n## Credits\r\n\r\nChocolatey is brought to you by quite a few people and frameworks. See [CREDITS](https://github.com/chocolatey/choco/blob/master/docs/legal/CREDITS.md) (just LEGAL/Credits.md in the zip folder).\r\n"
        },
        {
          "name": "ScriptFormat.Tests.ps1",
          "type": "blob",
          "size": 3.0263671875,
          "content": "﻿#Requires -Module @{ ModuleName = 'pester'; ModuleVersion = '5.3.1' }\r\n\r\nDescribe \"Verifying integrity of module files\" {\r\n    BeforeDiscovery {\r\n        $FilesToVerify = Get-ChildItem -Include '*.psm1', '*.ps1' -Recurse\r\n        $DirectoriesToExclude = @(\r\n            # These directories contain dependencies we bring in, we don't control their file formats\r\n            'lib'\r\n            'packages'\r\n            '.nuget'\r\n            # These directories contain output of builds, if there's anything in these with \"bad\" formatting it's likely an old build, or not relevant\r\n            'bin'\r\n            'obj'\r\n            # This directory currently contains scripts to assist in creating the docker container. It is not formatted and should not require signing (at this time)\r\n            'docker'\r\n            # These directories contain uppercut configurations. Here be dragons\r\n            '.build'\r\n            '.build.custom'\r\n            # GitHub/git configs. No PowerShell here?\r\n            '.github'\r\n            '.git'\r\n        )\r\n        $Slash = [System.IO.Path]::DirectorySeparatorChar\r\n        $FilesBeingTested = $FilesToVerify | Where-Object { $null -ne $env:CHOCO_TEST_ALL -or $_.FullName -notmatch \"\\$Slash($($DirectoriesToExclude -join '|'))\\$Slash\" }\r\n    }\r\n\r\n    BeforeAll {\r\n        function Get-FileEncoding {\r\n            <#\r\n\t\t\t.SYNOPSIS\r\n\t\t\t\tTests a file for encoding.\r\n\r\n\t\t\t.DESCRIPTION\r\n\t\t\t\tTests a file for encoding.\r\n\r\n\t\t\t.PARAMETER Path\r\n\t\t\t\tThe file to test\r\n\t\t#>\r\n            [CmdletBinding()]\r\n            Param (\r\n                [Parameter(Mandatory = $True, ValueFromPipelineByPropertyName = $True)]\r\n                [Alias('FullName')]\r\n                [string]\r\n                $Path\r\n            )\r\n\r\n            if ($PSVersionTable.PSVersion.Major -lt 6) {\r\n                [byte[]]$byte = Get-Content -Encoding byte -ReadCount 4 -TotalCount 4 -Path $Path\r\n            }\r\n            else {\r\n                [byte[]]$byte = Get-Content -AsByteStream -ReadCount 4 -TotalCount 4 -Path $Path\r\n            }\r\n\r\n            if ($byte[0] -eq 0xef -and $byte[1] -eq 0xbb -and $byte[2] -eq 0xbf) {\r\n                'UTF8 BOM'\r\n            }\r\n            elseif ($byte[0] -eq 0xfe -and $byte[1] -eq 0xff) {\r\n                'Unicode'\r\n            }\r\n            elseif ($byte[0] -eq 0 -and $byte[1] -eq 0 -and $byte[2] -eq 0xfe -and $byte[3] -eq 0xff) {\r\n                'UTF32'\r\n            }\r\n            elseif ($byte[0] -eq 0x2b -and $byte[1] -eq 0x2f -and $byte[2] -eq 0x76) {\r\n                'UTF7'\r\n            }\r\n            else {\r\n                'Unknown'\r\n            }\r\n        }\r\n    }\r\n\r\n    Context \"Validating PowerShell file <_.FullName>\" -ForEach $FilesBeingTested {\r\n        BeforeAll {\r\n            $FileUnderTest = $_\r\n        }\r\n\r\n        It \"Should have Byte Order Mark\" {\r\n            Get-FileEncoding -Path $FileUnderTest.FullName | Should -Be 'UTF8 BOM'\r\n        }\r\n\r\n        It \"Should have 'CRLF' Line Endings\" {\r\n            (Get-Content $FileUnderTest -Raw) -match '([^\\r]\\n|\\r[^\\n])' | Should -BeFalse\r\n        }\r\n    }\r\n}\r\n"
        },
        {
          "name": "TESTING.md",
          "type": "blob",
          "size": 13.2236328125,
          "content": "# Testing Chocolatey\r\n\r\n- [Testing Overview](#testing-overview)\r\n- [Testing Terminology](#testing-terminology)\r\n- [Writing Tests](#writing-tests)\r\n  - [A Test Or Group Of Tests Should Be Self Contained.](#a-test-or-group-of-tests-should-be-self-contained)\r\n  - [Tests Should Not Depend Upon The Order That They Are Executed.](#tests-should-not-depend-upon-the-order-that-they-are-executed)\r\n  - [Assertions Should Be Consistent.](#assertions-should-be-consistent)\r\n  - [Tests Should Not Be Skipped By A Version Check Of The Product Being Tested.](#tests-should-not-be-skipped-by-a-version-check-of-the-product-being-tested)\r\n  - [Pester Specific: All Test Code Should Be Within Pester Controlled Blocks.](#pester-specific-all-test-code-should-be-within-pester-controlled-blocks)\r\n- [Running Tests](#running-tests)\r\n  - [NUnit Tests](#nunit-tests)\r\n  - [NUnit Integration Tests](#nunit-integration-tests)\r\n  - [All NUnit Integration Tests](#all-nunit-integration-tests)\r\n  - [Skipping NUnit Tests](#skipping-nunit-tests)\r\n  - [Pester Tests](#pester-tests)\r\n\r\nTests for Chocolatey are written in C# or in PowerShell depending on what type of test is being created.\r\n\r\n* NUnit Unit Tests are written in C# and found in the `chocolatey.tests` project. They are individual tests of the various Chocolatey components.\r\n* NUnit Integration tests are written in C# and found in the `chocolatey.tests.integration` project. They are tests of various Chocolatey components that reach outside of Chocolatey.\r\n* Pester test are written in PowerShell and found in the `tests` directory of the repository. They test the overall integration of Chocolatey into a larger system.\r\n\r\n## Testing Overview\r\n\r\n> \"Testing doesn't prove the absence of bugs, they can only prove code works in the way you've tested.\"\r\n\r\nThe design of our automated test suite is to get the testing framework out of the way and make it easy to swap out should it ever need to be (the former is the important goal). We test behaviors of the system, which doesn't simply mean ensuring code coverage. It means we want to see how the system behaves under certain behaviors. As you may see from looking over the tests, we have an interesting way of setting up our specs. We recommend importing the ReSharper templates in `docs\\resharper_templates`. This will make adding specs and new spec files quite a bit easier.\r\n\r\nThe method of testing as you will see is a file that contains many test classes (scenarios) that set up and perform a behavior, then perform one or more validations (tests/facts) on that scenario. Typically when in a unit test suite, there would be a file for every representative class in the production code. You may not see this as much in this codebase as there are areas that could use more coverage.\r\n\r\nWe recognize the need for a very tight feedback loop (running and debugging tests right inside Visual Studio). Some great tools for running and debugging automated tests are [TestDriven.NET](http://www.testdriven.net/) and [ReSharper](https://www.jetbrains.com/resharper/) (you only need one, although both are recommended for development). We recommend TestDriven over other tools as it is absolutely wonderful in what it does.\r\n\r\nWith the way the testing framework is designed, it is helpful to gain an understanding on how you can debug into tests. There are a couple of known oddities when it comes to trying to run tests in Visual Studio:\r\n\r\n- You can run a test or tests within a class.\r\n- You can also right click on a folder (and solution folder), a project, or the solution and run tests.\r\n- You can ***not*** click on a file and attempt to run/debug automated tests. You will see the following message: \"The target type doesn't contain tests from a known test framework or a 'Main' method.\"\r\n- You also cannot run all tests within a file by selecting somewhere outside a testing class and attempting to run tests. You will see the message above.\r\n\r\nAs far as testing goes, unit tests are extremely quick feedback and great for longer term maintenance, where black box tests give you the most coverage, but are the slowest feedback loops and typically the most frail. Each area of testing has strengths and weaknesses and it's good to understand each of them.\r\n\r\n**NOTE**: One of the hardest forms of automated testing is unit testing, as it almost always requires faking out other parts of the system (also known as mocking).\r\n\r\n## Testing Terminology\r\n\r\nSome quick notes on testing terminology (still a WIP):\r\n\r\n- **Testing** - anything done to test, whether manual, automated, or otherwise.\r\n- **Automated Testing** - Any type of written test that can be run in an automated way, typically in the form of C# tests.\r\n- **Spec / Fact / Observation** - these are synonyms for a test or validation.\r\n- **System Under Test (SUT)** - the code or concern you are testing.\r\n- **Mock / Fake / Stub / Double** - an object that provides a known state back to the system under test when the system under test interacts with other objects. This can be done with unit and whitebox integration testing. This allows for actual unit testing as most units (classes/functions) depend on working with other units (classes/functions) to get or set information and state. While each of [these are slightly different](https://martinfowler.com/articles/mocksArentStubs.html), the basic functionality is that they are standing in for other production code.\r\n- **Concern** - an area of production code you are testing in e.g. \"Concern for AutoUninstallerService\".\r\n- **Regression Test Suite / Regression Suite** - The automated tests that are in the form of code.\r\n- **Whitebox Testing** - tests where you access the internals of the application.\r\n  - **Unit Testing** - We define a unit as a class and a method in C#. In PowerShell this is per function. If it involves another class or function, you have graduated to an integration. This is where Mocks come in to ensure no outside state is introduced.\r\n  - **Whitebox Integration Testing** - testing anything that is more than a unit.\r\n  - **System Integration Testing** - testing anything that goes out of the bounds of the written production code. Typically when running the code to get or set some state is where you will see this. And yes, even using DateTime.Now counts as system integration testing as it accesses something external to the application. This is why you will see we insulate those calls to something in the application so they can be easily tested against.\r\n- **Blackbox Testing** - tests where you do not access internals of the application\r\n  - **Physical Integration Testing** - This is where you are testing the application with other components such as config files.\r\n  - **Blackbox Integration Testing / End to End Testing** - This is where you are testing inputs and outputs of the system.\r\n- **Version Gate** - A check that is performed to ensure certain versions are in use before performing tests.\r\n- **Test Structure** - All components that make up a single test. In Pester this would be a `Describe` or `Context` block. In Nunit this would be the containing class.\r\n\r\n## Writing Tests\r\n\r\nThe purpose of the tests we write for Chocolatey products is to ensure that we do not regress on issues that have been fixed.\r\nPart of ensuring that is to do the best we can to reduce test flakiness.\r\n\r\n### A Test Or Group Of Tests Should Be Self Contained.\r\n\r\nEverything needed for a test to pass consistently should be within a single test structure.\r\nWhenever possible, you should be able to select any test case and run it without failure.\r\n\r\n### Tests Should Not Depend Upon The Order That They Are Executed.\r\n\r\nExpanding on the previous rule that tests should be self contained, they should also not depend on other tests running in a specific order.\r\nIf a test requires a previous test to pass, it is beneficial to have some validation that the previous test passed and to fail early if it did not.\r\n\r\nFor example: suppose `Test B` relies on `Test A` having completed successfully.\r\nFurther, `Test B` when successful takes between ten and twenty-five minutes to complete.\r\n`Test B` is already written to fail after thirty minutes, but makes no accounting for `Test A`.\r\nIf `Test A` fails, then it is already known that `Test B` will fail, but it will potentially wait thirty minutes to fail.\r\nWhereas, if a verification of `Test A` were performed early in `Test B`, it could return failure within a minute, shortening the feedback loop significantly.\r\n\r\n### Assertions Should Be Consistent.\r\n\r\nSome assertions need to be made in multiple tests.\r\nWhen this happens, the assertions should be made in a consistent manner.\r\n\r\nFor example: many Pester tests execute Chocolatey CLI, then assert that the exit code was as expected.\r\nAll of the Pester tests should therefore assert the exit code in the same manner.\r\nPreviously, the Pester tests contained multiple different ways of checking the exit code, and sometimes would display the command output on error.\r\nEfforts have been taken to make this consistent so that when a failure occurs, the command output is displayed.\r\n\r\n### Tests Should Not Be Skipped By A Version Check Of The Product Being Tested.\r\n\r\nSometimes tests are written for features that are coming in a future version.\r\nIn those instances, a version gate would be used.\r\nIt is expected that the tests being run will be for the version being built from the same point in the repository.\r\nAs such, we should not be skipping tests due to a version mismatch.\r\n\r\nThe exception to this rule is tests that require another product of a specific version.\r\nFor example: a test that requires Chocolatey Licensed Extension version 6.1 or greater, but is a part of the Chocolatey CLI tests.\r\n\r\n### Pester Specific: All Test Code Should Be Within Pester Controlled Blocks.\r\n\r\nCurrently Pester tests are targeted at Pester 5.x.\r\nThe guidance of [Pester](https://pester.dev/docs/usage/discovery-and-run#execution-order) is for all test code to be within `It`, `BeforeAll`, `BeforeEach`, `AfterAll`, or `AfterEach` blocks.\r\nTo quote [Pester's documentation](https://pester.dev/docs/usage/test-file-structure#beforediscovery):\r\n\r\n> In Pester5 the mantra is to put all code in Pester controlled blocks.\r\n> No code should be directly in the script, or directly in `Describe` or `Context` block without wrapping it in some other block.\r\n\r\n## Running Tests\r\n\r\n### NUnit Tests\r\n\r\nThe NUnit tests get run automatically when you run `./build.bat` or `./build.sh`, and you can also run them without completing the full build process by running `./build.bat --target=test-nunit --exclusive`, or `./build.sh --target=test-nunit --exclusive`.\r\n\r\n### NUnit Integration Tests\r\n\r\nIf you need to run the integration tests, you can do so using: `./build.bat --target=test-nunit --exclusive --testExecutionType=integration --shouldRunOpenCover=false`, or `./build.sh --target=test-nunit --exclusive --testExecutionType=integration --shouldRunOpenCover=false`.\r\n\r\n### All NUnit Integration Tests\r\n\r\nIf you need to run all the tests, you can do so using: `./build.bat --target=test-nunit --exclusive --testExecutionType=all --shouldRunOpenCover=false`, or `./build.sh --target=test-nunit --exclusive --testExecutionType=all --shouldRunOpenCover=false`.\r\n\r\nThe `shouldRunOpenCover` argument is required when running the integration tests because some of the integration tests rely on the standard output and error output, which is not available when run via OpenCover. This switch changes the NUnit tests to run on NUnit directly, instead of on NUnit via OpenCover.\r\n\r\n### Skipping NUnit Tests\r\n\r\nIf you need to skip the execution of tests, you can run the following: `./build.bat --shouldRunTests=false`, or `./build.sh --shouldRunTests=false`.\r\n\r\n### Pester Tests\r\n\r\nThe Pester tests have been modelled in a way to be testable without installing Chocolatey to your local system. We have made efforts to prevent installing software with the tests, or at least uninstalling any that is installed. That being said, we also provide a `Vagrantfile` with a base configuration that will build the Chocolatey package (inside the VM) and run the tests for you.\r\n\r\nTo run them locally on your system: Open an administrative PowerShell prompt to the root of the repository, and run `./Invoke-Tests.ps1`. This script will then \"install\" Chocolatey to a temporary test directory, run the tests, and when complete attempt to restore the system as close to when it started as possible. The script takes the following parameters: `TestPath` The location to use as the base for the Chocolatey Tests, defaults to `$env:TEMP\\chocolateyTests`. `TestPackage` The path to the `.nupkg` package to run tests against, defaults to `$chocolateyRepository\\code_drop\\Packages\\Chocolatey\\chocolatey.<version>.nupkg`. `SkipPackaging` Optionally skip the packaging of the test packages.\r\n\r\n#### Using the provided Vagrantfile\r\n\r\nTo use the `Vagrantfile` you need to change directory into the `tests` directory, then run `vagrant up`. The Vagrantfile has been tested with VirtualBox. The [box being used](https://app.vagrantup.com/StefanScherer/boxes/windows_2019) is currently only updated for vmware_desktop and virtualbox providers, but there is a dated hyperv one that may work.\r\n\r\nOnce the Vagrant box is booted, you can re-run just the tests by running `vagrant provision default --provision-with test`. If you would like to clear the packages and run fresh tests, you can run `vagrant provision default --provision-with clear-packages,test`.\r\n"
        },
        {
          "name": "build.bat",
          "type": "blob",
          "size": 0.4169921875,
          "content": "@echo off\nset psscript=\"%~dp0build.ps1\"\necho ==================================================\necho ============= WRAP POWERSHELL SCRIPT =============\necho ==================================================\n\necho calling %psscript% with args %*\nPowerShell -NoProfile -ExecutionPolicy Bypass -Command \"& '%psscript%' %*\"\nset buildstatus=%ERRORLEVEL%\necho ==================================================\nexit /b %buildstatus%"
        },
        {
          "name": "build.debug.bat",
          "type": "blob",
          "size": 0.44921875,
          "content": "@echo off\r\nset psscript=\"%~dp0build.ps1\"\r\necho ==================================================\r\necho ============= WRAP POWERSHELL SCRIPT =============\r\necho ==================================================\r\n\r\necho calling %psscript% with args %*\r\nPowerShell -NoProfile -ExecutionPolicy Bypass -Command \"& '%psscript%' -Configuration Debug %*\"\r\nset buildstatus=%ERRORLEVEL%\r\necho ==================================================\r\nexit /b %buildstatus%\r\n"
        },
        {
          "name": "build.debug.sh",
          "type": "blob",
          "size": 0.0712890625,
          "content": "#!/usr/bin/env bash\nset -eo pipefail\n\n./build.sh --configuration=Debug $*"
        },
        {
          "name": "build.official.bat",
          "type": "blob",
          "size": 0.458984375,
          "content": "@echo off\r\nset psscript=\"%~dp0build.ps1\"\r\necho ==================================================\r\necho ============= WRAP POWERSHELL SCRIPT =============\r\necho ==================================================\r\n\r\necho calling %psscript% with args %*\r\nPowerShell -NoProfile -ExecutionPolicy Bypass -Command \"& '%psscript%' -Configuration ReleaseOfficial %*\"\r\nset buildstatus=%ERRORLEVEL%\r\necho ==================================================\r\nexit /b %buildstatus%\r\n"
        },
        {
          "name": "build.official.sh",
          "type": "blob",
          "size": 0.0810546875,
          "content": "#!/usr/bin/env bash\nset -eo pipefail\n\n./build.sh --configuration=ReleaseOfficial $*"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 7.923828125,
          "content": "﻿##########################################################################\n# This is the Cake bootstrapper script for PowerShell.\n# This file was downloaded from https://github.com/cake-build/resources\n# Feel free to change this file to fit your needs.\n##########################################################################\n\n<#\n\n.SYNOPSIS\nThis is a Powershell script to bootstrap a Cake build.\n\n.DESCRIPTION\nThis Powershell script will download NuGet if missing, restore NuGet tools (including Cake)\nand execute your Cake build script with the parameters you provide.\n\n.PARAMETER Script\nThe build script to execute.\n.PARAMETER Target\nThe build script target to run.\n.PARAMETER Configuration\nThe build configuration to use.\n.PARAMETER Verbosity\nSpecifies the amount of information to be displayed.\n.PARAMETER ShowDescription\nShows description about tasks.\n.PARAMETER DryRun\nPerforms a dry run.\n.PARAMETER SkipToolPackageRestore\nSkips restoring of packages.\n.PARAMETER ScriptArgs\nRemaining arguments are added here.\n\n.LINK\nhttps://cakebuild.net\n\n#>\n\n[CmdletBinding()]\nParam(\n    [string]$Script = \"recipe.cake\",\n    [string]$Target,\n    [string]$Configuration,\n    [ValidateSet(\"Quiet\", \"Minimal\", \"Normal\", \"Verbose\", \"Diagnostic\")]\n    [string]$Verbosity,\n    [switch]$ShowDescription,\n    [Alias(\"WhatIf\", \"Noop\")]\n    [switch]$DryRun,\n    [switch]$SkipToolPackageRestore,\n    [Parameter(Position = 0, Mandatory = $false, ValueFromRemainingArguments = $true)]\n    [string[]]$ScriptArgs\n)\n\n# Attempt to set highest encryption available for SecurityProtocol.\n# PowerShell will not set this by default (until maybe .NET 4.6.x). This\n# will typically produce a message for PowerShell v2 (just an info\n# message though)\ntry {\n    # Set TLS 1.2 (3072), then TLS 1.1 (768), then TLS 1.0 (192), finally SSL 3.0 (48)\n    # Use integers because the enumeration values for TLS 1.2 and TLS 1.1 won't\n    # exist in .NET 4.0, even though they are addressable if .NET 4.5+ is\n    # installed (.NET 4.5 is an in-place upgrade).\n    [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192\n}\ncatch {\n    Write-Output 'Unable to set PowerShell to use TLS 1.2 and TLS 1.1 due to old .NET Framework installed. If you see underlying connection closed or trust errors, you may need to upgrade to .NET Framework 4.5+ and PowerShell v3'\n}\n\n[Reflection.Assembly]::LoadWithPartialName(\"System.Security\") | Out-Null\nfunction MD5HashFile([string] $filePath) {\n    if ([string]::IsNullOrEmpty($filePath) -or !(Test-Path $filePath -PathType Leaf)) {\n        return $null\n    }\n\n    [System.IO.Stream] $file = $null;\n    [System.Security.Cryptography.MD5] $md5 = $null;\n    try {\n        $md5 = [System.Security.Cryptography.MD5]::Create()\n        $file = [System.IO.File]::OpenRead($filePath)\n        return [System.BitConverter]::ToString($md5.ComputeHash($file))\n    }\n    finally {\n        if ($file -ne $null) {\n            $file.Dispose()\n        }\n    }\n}\n\nfunction GetProxyEnabledWebClient {\n    $wc = New-Object System.Net.WebClient\n    $proxy = [System.Net.WebRequest]::GetSystemWebProxy()\n    $proxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials\n    $wc.Proxy = $proxy\n    return $wc\n}\n\nWrite-Host \"Preparing to run build script...\"\n\nif (!$PSScriptRoot) {\n    $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n}\n\n$TOOLS_DIR = Join-Path $PSScriptRoot \"tools\"\n$ADDINS_DIR = Join-Path $TOOLS_DIR \"Addins\"\n$MODULES_DIR = Join-Path $TOOLS_DIR \"Modules\"\n$NUGET_EXE = Join-Path $TOOLS_DIR \"nuget.exe\"\n$CAKE_EXE = Join-Path $TOOLS_DIR \"Cake/Cake.exe\"\n$NUGET_URL = \"https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\"\n$PACKAGES_CONFIG = Join-Path $TOOLS_DIR \"packages.config\"\n$PACKAGES_CONFIG_MD5 = Join-Path $TOOLS_DIR \"packages.config.md5sum\"\n$ADDINS_PACKAGES_CONFIG = Join-Path $ADDINS_DIR \"packages.config\"\n$MODULES_PACKAGES_CONFIG = Join-Path $MODULES_DIR \"packages.config\"\n\n# Make sure tools folder exists\nif ((Test-Path $PSScriptRoot) -and !(Test-Path $TOOLS_DIR)) {\n    Write-Verbose -Message \"Creating tools directory...\"\n    New-Item -Path $TOOLS_DIR -Type directory | Out-Null\n}\n\n# Make sure that packages.config exist.\nif (!(Test-Path $PACKAGES_CONFIG)) {\n    Write-Verbose -Message \"Downloading packages.config...\"\n    try {\n        $wc = GetProxyEnabledWebClient\n        $wc.DownloadFile(\"https://cakebuild.net/download/bootstrapper/packages\", $PACKAGES_CONFIG)\n    }\n    catch {\n        Throw \"Could not download packages.config.\"\n    }\n}\n\n# Try find NuGet.exe in path if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Trying to find nuget.exe in PATH...\"\n    $existingPaths = $Env:Path -Split ';' | Where-Object { (![string]::IsNullOrEmpty($_)) -and (Test-Path $_ -PathType Container) }\n    $NUGET_EXE_IN_PATH = Get-ChildItem -Path $existingPaths -Filter \"nuget.exe\" | Select-Object -First 1\n    if ($NUGET_EXE_IN_PATH -ne $null -and (Test-Path $NUGET_EXE_IN_PATH.FullName)) {\n        Write-Verbose -Message \"Found in PATH at $($NUGET_EXE_IN_PATH.FullName).\"\n        $NUGET_EXE = $NUGET_EXE_IN_PATH.FullName\n    }\n}\n\n# Try download NuGet.exe if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Downloading NuGet.exe...\"\n    try {\n        $wc = GetProxyEnabledWebClient\n        $wc.DownloadFile($NUGET_URL, $NUGET_EXE)\n    }\n    catch {\n        Throw \"Could not download NuGet.exe.\"\n    }\n}\n\n# Save nuget.exe path to environment to be available to child processed\n$ENV:NUGET_EXE = $NUGET_EXE\n\n# Restore tools from NuGet?\nif (-Not $SkipToolPackageRestore.IsPresent) {\n    Push-Location\n    Set-Location $TOOLS_DIR\n\n    # Check for changes in packages.config and remove installed tools if true.\n    [string] $md5Hash = MD5HashFile($PACKAGES_CONFIG)\n    if ((!(Test-Path $PACKAGES_CONFIG_MD5)) -Or\n      ($md5Hash -ne (Get-Content $PACKAGES_CONFIG_MD5 ))) {\n        Write-Verbose -Message \"Missing or changed package.config hash...\"\n        Get-ChildItem -Exclude packages.config, nuget.exe, Cake.Bakery |\n            Remove-Item -Recurse\n    }\n\n    Write-Verbose -Message \"Restoring tools from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$TOOLS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet tools.\"\n    }\n    else {\n        $md5Hash | Out-File $PACKAGES_CONFIG_MD5 -Encoding \"ASCII\"\n    }\n    Write-Verbose -Message ($NuGetOutput | Out-String)\n\n    Pop-Location\n}\n\n# Restore addins from NuGet\nif (Test-Path $ADDINS_PACKAGES_CONFIG) {\n    Push-Location\n    Set-Location $ADDINS_DIR\n\n    Write-Verbose -Message \"Restoring addins from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$ADDINS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet addins.\"\n    }\n\n    Write-Verbose -Message ($NuGetOutput | Out-String)\n\n    Pop-Location\n}\n\n# Restore modules from NuGet\nif (Test-Path $MODULES_PACKAGES_CONFIG) {\n    Push-Location\n    Set-Location $MODULES_DIR\n\n    Write-Verbose -Message \"Restoring modules from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$MODULES_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet modules.\"\n    }\n\n    Write-Verbose -Message ($NuGetOutput | Out-String)\n\n    Pop-Location\n}\n\n# Make sure that Cake has been installed.\nif (!(Test-Path $CAKE_EXE)) {\n    Throw \"Could not find Cake.exe at $CAKE_EXE\"\n}\n\n\n\n# Build Cake arguments\n$cakeArguments = @(\"$Script\");\nif ($Target) {\n    $cakeArguments += \"-target=$Target\"\n}\nif ($Configuration) {\n    $cakeArguments += \"-configuration=$Configuration\"\n}\nif ($Verbosity) {\n    $cakeArguments += \"-verbosity=$Verbosity\"\n}\nif ($ShowDescription) {\n    $cakeArguments += \"-showdescription\"\n}\nif ($DryRun) {\n    $cakeArguments += \"-dryrun\"\n}\n$cakeArguments += $ScriptArgs\n\n# Start Cake\nWrite-Host \"Running build script...\"\n\n& \"$CAKE_EXE\" ./recipe.cake --bootstrap\nif ($LASTEXITCODE -eq 0) {\n    & \"$CAKE_EXE\" $cakeArguments\n}\n\nexit $LASTEXITCODE"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 3.484375,
          "content": "#!/usr/bin/env bash\nset -eo pipefail\n\n##########################################################################\n# This is the Cake bootstrapper script for Linux and macOS.\n# This file was downloaded from https://github.com/cake-build/resources\n# Feel free to change this file to fit your needs.\n##########################################################################\n\n# Define directories.\nSCRIPT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\nTOOLS_DIR=$SCRIPT_DIR/tools\nADDINS_DIR=$TOOLS_DIR/Addins\nMODULES_DIR=$TOOLS_DIR/Modules\nNUGET_EXE=$TOOLS_DIR/nuget.exe\nCAKE_EXE=$TOOLS_DIR/Cake/Cake.exe\nPACKAGES_CONFIG=$TOOLS_DIR/packages.config\nPACKAGES_CONFIG_MD5=$TOOLS_DIR/packages.config.md5sum\nADDINS_PACKAGES_CONFIG=$ADDINS_DIR/packages.config\nMODULES_PACKAGES_CONFIG=$MODULES_DIR/packages.config\n\nexport CAKE_PATHS_TOOLS=$TOOLS_DIR\nexport CAKE_PATHS_ADDINS=$ADDINS_DIR\nexport CAKE_PATHS_MODULES=$MODULES_DIR\n\n# Define md5sum or md5 depending on Linux / macOS\nMD5_EXE=\nif [[ \"$(uname -s)\" == \"Darwin\" ]]; then\n    MD5_EXE=\"md5 -r\"\nelse\n    MD5_EXE=\"md5sum\"\nfi\n\n# Define default arguments.\nSCRIPT=$SCRIPT_DIR/recipe.cake\nCAKE_ARGUMENTS=()\n\n# Parse arguments.\nfor i in \"$@\"; do\n    case $1 in\n        -s|--script) SCRIPT=\"$2\"; shift ;;\n        --) shift; CAKE_ARGUMENTS+=(\"$@\"); break ;;\n        *) CAKE_ARGUMENTS+=(\"$1\") ;;\n    esac\n    shift\ndone\n\n# Make sure the tools folder exist.\nif [ ! -d \"$TOOLS_DIR\" ]; then\n  mkdir \"$TOOLS_DIR\"\nfi\n\n# Make sure that packages.config exist.\nif [ ! -f \"$TOOLS_DIR/packages.config\" ]; then\n    echo \"Downloading packages.config...\"\n    curl -Lsfo \"$TOOLS_DIR/packages.config\" https://cakebuild.net/download/bootstrapper/packages\n    if [ $? -ne 0 ]; then\n        echo \"An error occurred while downloading packages.config.\"\n        exit 1\n    fi\nfi\n\n# Download NuGet if it does not exist.\nif [ ! -f \"$NUGET_EXE\" ]; then\n    echo \"Downloading NuGet...\"\n    curl -Lsfo \"$NUGET_EXE\" https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\n    if [ $? -ne 0 ]; then\n        echo \"An error occurred while downloading nuget.exe.\"\n        exit 1\n    fi\nfi\n\n# Restore tools from NuGet.\npushd \"$TOOLS_DIR\" >/dev/null\nif [ ! -f \"$PACKAGES_CONFIG_MD5\" ] || [ \"$( cat \"$PACKAGES_CONFIG_MD5\" | sed 's/\\r$//' )\" != \"$( $MD5_EXE \"$PACKAGES_CONFIG\" | awk '{ print $1 }' )\" ]; then\n    find . -type d ! -name . ! -name 'Cake.Bakery' | xargs rm -rf\nfi\n\nmono \"$NUGET_EXE\" install -ExcludeVersion\nif [ $? -ne 0 ]; then\n    echo \"Could not restore NuGet tools.\"\n    exit 1\nfi\n\n$MD5_EXE \"$PACKAGES_CONFIG\" | awk '{ print $1 }' >| \"$PACKAGES_CONFIG_MD5\"\n\npopd >/dev/null\n\n# Restore addins from NuGet.\nif [ -f \"$ADDINS_PACKAGES_CONFIG\" ]; then\n    pushd \"$ADDINS_DIR\" >/dev/null\n\n    mono \"$NUGET_EXE\" install -ExcludeVersion\n    if [ $? -ne 0 ]; then\n        echo \"Could not restore NuGet addins.\"\n        exit 1\n    fi\n\n    popd >/dev/null\nfi\n\n# Restore modules from NuGet.\nif [ -f \"$MODULES_PACKAGES_CONFIG\" ]; then\n    pushd \"$MODULES_DIR\" >/dev/null\n\n    mono \"$NUGET_EXE\" install -ExcludeVersion\n    if [ $? -ne 0 ]; then\n        echo \"Could not restore NuGet modules.\"\n        exit 1\n    fi\n\n    popd >/dev/null\nfi\n\n# Make sure that Cake has been installed.\nif [ ! -f \"$CAKE_EXE\" ]; then\n    echo \"Could not find Cake.exe at '$CAKE_EXE'.\"\n    exit 1\nfi\n\n# Start Cake\nmono \"$CAKE_EXE\" $SCRIPT --bootstrap\nif [ $? -eq 0 ]; then\n    mono \"$CAKE_EXE\" $SCRIPT \"${CAKE_ARGUMENTS[@]}\"\nfi\n\n# Clean up environment variables that were created earlier in this bootstrapper\nunset CAKE_PATHS_TOOLS\nunset CAKE_PATHS_ADDINS\nunset CAKE_PATHS_MODULES"
        },
        {
          "name": "cake.config",
          "type": "blob",
          "size": 0.2744140625,
          "content": "; This is the default configuration file for Cake.\n; This file was downloaded from https://github.com/cake-build/resources\n\n[Nuget]\nUseInProcessClient=true\nLoadDependencies=false\n\n[Paths]\nTools=./tools\nAddins=./tools/Addins\nModules=./tools/Modules\n\n[Settings]\nSkipVerification=true"
        },
        {
          "name": "chocolatey.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "formatting-settings.psd1",
          "type": "blob",
          "size": 2.15234375,
          "content": "﻿@{\n    IncludeRules = @(\n        'PSUseBOMForUnicodeEncodedFile',\n        'PSMisleadingBacktick',\n        'PSAvoidUsingCmdletAliases',\n        'PSAvoidTrailingWhitespace',\n        'PSAvoidSemicolonsAsLineTerminators',\n        'PSUseCorrectCasing',\n        'PSPlaceOpenBrace',\n        'PSPlaceCloseBrace',\n        'PSAlignAssignmentStatement',\n        'PSUseConsistentWhitespace',\n        'PSUseConsistentIndentation'\n    )\n\n    Rules        = @{\n\n        <#\n        PSAvoidUsingCmdletAliases          = @{\n            'allowlist' = @('')\n        }#>\n\n        PSAvoidSemicolonsAsLineTerminators = @{\n            Enable = $true\n        }\n\n\n        PSUseCorrectCasing                 = @{\n            Enable = $true\n        }\n\n        PSPlaceOpenBrace                   = @{\n            Enable             = $true\n            OnSameLine         = $true\n            NewLineAfter       = $true\n            IgnoreOneLineBlock = $false\n        }\n\n        PSPlaceCloseBrace                  = @{\n            Enable             = $true\n            NewLineAfter       = $true\n            IgnoreOneLineBlock = $false\n            NoEmptyLineBefore  = $true\n        }\n\n        PSAlignAssignmentStatement         = @{\n            Enable         = $true\n            CheckHashtable = $true\n        }\n\n        PSUseConsistentIndentation         = @{\n            Enable              = $true\n            Kind                = 'space'\n            PipelineIndentation = 'IncreaseIndentationForFirstPipeline'\n            IndentationSize     = 4\n        }\n\n        PSUseConsistentWhitespace          = @{\n            Enable                                  = $true\n            CheckInnerBrace                         = $true\n            CheckOpenBrace                          = $true\n            CheckOpenParen                          = $true\n            CheckOperator                           = $true\n            CheckPipe                               = $true\n            CheckPipeForRedundantWhitespace         = $false\n            CheckSeparator                          = $true\n            CheckParameter                          = $false\n            IgnoreAssignmentOperatorInsideHashTable = $true\n        }\n    }\n}"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuspec",
          "type": "tree",
          "content": null
        },
        {
          "name": "recipe.cake",
          "type": "blob",
          "size": 24.3955078125,
          "content": "#load nuget:?package=Chocolatey.Cake.Recipe&version=0.28.4\r\n#tool nuget:?package=WiX&version=3.11.2\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// TOOLS\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// SCRIPT\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\nFunc<List<ILMergeConfig>> getILMergeConfigs = () =>\r\n{\r\n    var mergeConfigs = new List<ILMergeConfig>();\r\n\r\n    var targetPlatform = \"v4,C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.8\";\r\n    var assembliesToILMerge = GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco/*.{exe|dll}\")\r\n                            - GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco/choco.exe\")\r\n                            - GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco/System.Management.Automation.dll\")\r\n                            - GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco/Chocolatey.PowerShell.dll\");\r\n\r\n    Information(\"The following assemblies have been selected to be ILMerged for choco.exe...\");\r\n    foreach (var assemblyToILMerge in assembliesToILMerge)\r\n    {\r\n        Information(assemblyToILMerge.FullPath);\r\n    }\r\n\r\n    mergeConfigs.Add(new ILMergeConfig() {\r\n        KeyFile = BuildParameters.StrongNameKeyPath,\r\n        LogFile = BuildParameters.Paths.Directories.Build + \"/ilmerge-chocoexe.log\",\r\n        TargetPlatform = targetPlatform,\r\n        Target = \"exe\",\r\n        Internalize = BuildParameters.RootDirectoryPath + \"/src/chocolatey.console/ilmerge.internalize.ignore.txt\",\r\n        Output = BuildParameters.Paths.Directories.PublishedApplications + \"/choco_merged/choco.exe\",\r\n        PrimaryAssemblyName = BuildParameters.Paths.Directories.PublishedApplications + \"/choco/choco.exe\",\r\n        AssemblyPaths = assembliesToILMerge });\r\n\r\n    assembliesToILMerge = GetFiles(BuildParameters.Paths.Directories.PublishedLibraries + \"/chocolatey/*.{exe|dll}\")\r\n                        - GetFiles(BuildParameters.Paths.Directories.PublishedLibraries + \"/chocolatey/choco.exe\")\r\n                        - GetFiles(BuildParameters.Paths.Directories.PublishedLibraries + \"/chocolatey/chocolatey.dll\")\r\n                        - GetFiles(BuildParameters.Paths.Directories.PublishedLibraries + \"/chocolatey/log4net.dll\")\r\n                        - GetFiles(BuildParameters.Paths.Directories.PublishedLibraries + \"/chocolatey/System.Management.Automation.dll\")\r\n                        - GetFiles(BuildParameters.Paths.Directories.PublishedLibraries + \"/chocolatey/Chocolatey.PowerShell.dll\");\r\n\r\n    Information(\"The following assemblies have been selected to be ILMerged for chocolatey.dll...\");\r\n    foreach (var assemblyToILMerge in assembliesToILMerge)\r\n    {\r\n        Information(assemblyToILMerge.FullPath);\r\n    }\r\n\r\n    mergeConfigs.Add(new ILMergeConfig() {\r\n        KeyFile = BuildParameters.StrongNameKeyPath,\r\n        LogFile = BuildParameters.Paths.Directories.Build + \"/ilmerge-chocolateydll.log\",\r\n        TargetPlatform = targetPlatform,\r\n        Target = \"dll\",\r\n        Internalize = BuildParameters.RootDirectoryPath + \"/src/chocolatey/ilmerge.internalize.ignore.dll.txt\",\r\n        Output = BuildParameters.Paths.Directories.PublishedLibraries + \"/chocolatey_merged/chocolatey.dll\",\r\n        PrimaryAssemblyName = BuildParameters.Paths.Directories.PublishedLibraries + \"/chocolatey/chocolatey.dll\",\r\n        AssemblyPaths = assembliesToILMerge });\r\n\r\n    if (DirectoryExists(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/\"))\r\n    {\r\n        var no7zAssembliesToILMerge = GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/*.{exe|dll}\")\r\n                                    - GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/choco.exe\")\r\n                                    - GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/System.Management.Automation.dll\")\r\n                                    - GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/chocolatey.tests*.dll\")\r\n                                    - GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/{Moq|nunit|Should|testcentric}*.dll\")\r\n                                    - GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/Chocolatey.PowerShell.dll\");\r\n\r\n        Information(\"The following assemblies have been selected to be ILMerged for choco.exe No7zip Version...\");\r\n        foreach (var assemblyToILMerge in no7zAssembliesToILMerge)\r\n        {\r\n            Information(assemblyToILMerge.FullPath);\r\n        }\r\n\r\n        mergeConfigs.Add(new ILMergeConfig() {\r\n            KeyFile = BuildParameters.StrongNameKeyPath,\r\n            LogFile = BuildParameters.Paths.Directories.Build + \"/ilmerge-chocono7zipexe.log\",\r\n            TargetPlatform = targetPlatform,\r\n            Target = \"exe\",\r\n            Internalize = BuildParameters.RootDirectoryPath + \"/src/chocolatey.console/ilmerge.internalize.ignore.txt\",\r\n            Output = BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip_merged/choco.exe\",\r\n            PrimaryAssemblyName = BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/choco.exe\",\r\n            AssemblyPaths = no7zAssembliesToILMerge });\r\n    }\r\n\r\n    return mergeConfigs;\r\n};\r\n\r\nFunc<FilePathCollection> getScriptsToVerify = () =>\r\n{\r\n    var scriptsToVerify = GetFiles(\"./src/chocolatey.resources/**/*.{ps1|psm1|psd1}\") +\r\n                        GetFiles(BuildParameters.Paths.Directories.NuGetNuspecDirectory + \"/**/*.{ps1|psm1|psd1}\") +\r\n                        GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/**/*.{ps1|psm1|psd1}\");\r\n\r\n    if (DirectoryExists(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"-no7zip\"))\r\n    {\r\n        scriptsToVerify += GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"-no7zip/**/*.{ps1|psm1|psd1}\");\r\n    }\r\n\r\n    Information(\"The following PowerShell scripts have been selected to be verified...\");\r\n    foreach (var scriptToVerify in scriptsToVerify)\r\n    {\r\n        Information(scriptToVerify.FullPath);\r\n    }\r\n\r\n    return scriptsToVerify;\r\n};\r\n\r\nFunc<FilePathCollection> getScriptsToSign = () =>\r\n{\r\n    var scriptsToSign = GetFiles(\"./nuspec/**/*.{ps1|psm1|psd1}\") +\r\n                        GetFiles(\"./src/chocolatey.resources/**/*.{ps1|psm1|psd1}\");\r\n\r\n    Information(\"The following PowerShell scripts have been selected to be signed...\");\r\n    foreach (var scriptToSign in scriptsToSign)\r\n    {\r\n        Information(scriptToSign.FullPath);\r\n    }\r\n\r\n    return scriptsToSign;\r\n};\r\n\r\nFunc<FilePathCollection> getFilesToSign = () =>\r\n{\r\n    var filesToSign = GetFiles(BuildParameters.Paths.Directories.NuGetNuspecDirectory + \"/lib/chocolatey.dll\")\r\n                    + GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/choco.exe\")\r\n                    + GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/tools/{checksum|shimgen}.exe\")\r\n                    + GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/redirects/*.exe\")\r\n                    + GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/helpers/Chocolatey.PowerShell.dll\");\r\n\r\n    if (DirectoryExists(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"-no7zip\"))\r\n    {\r\n        filesToSign += GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"-no7zip/tools/chocolateyInstall/choco.exe\")\r\n                    + GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"-no7zip/tools/chocolateyInstall/tools/{checksum|shimgen}.exe\")\r\n                    + GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"-no7zip/tools/chocolateyInstall/redirects/*.exe\")\r\n                    + GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"-no7zip/tools/chocolateyInstall/helpers/Chocolatey.PowerShell.dll\");\r\n    }\r\n\r\n    Information(\"The following assemblies have been selected to be signed...\");\r\n    foreach (var fileToSign in filesToSign)\r\n    {\r\n        Information(fileToSign.FullPath);\r\n    }\r\n\r\n    return filesToSign;\r\n};\r\n\r\nFunc<FilePathCollection> getMsisToSign = () =>\r\n{\r\n    var msisToSign = GetFiles(BuildParameters.Paths.Directories.Build + \"/MSIs/**/*.msi\");\r\n\r\n    Information(\"The following msi's have been selected to be signed...\");\r\n    foreach (var msiToSign in msisToSign)\r\n    {\r\n        Information(msiToSign.FullPath);\r\n    }\r\n\r\n    return msisToSign;\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// CUSTOM TASKS\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\nTask(\"Prepare-Chocolatey-Packages\")\r\n    .IsDependeeOf(\"Create-Chocolatey-Packages\")\r\n    .IsDependeeOf(\"Verify-PowerShellScripts\")\r\n    .IsDependeeOf(\"Sign-Assemblies\")\r\n    .IsDependentOn(\"Copy-Nuspec-Folders\")\r\n    .WithCriteria(() => BuildParameters.BuildAgentOperatingSystem == PlatformFamily.Windows, \"Skipping because not running on Windows\")\r\n    .WithCriteria(() => BuildParameters.ShouldRunChocolatey, \"Skipping because execution of Chocolatey has been disabled\")\r\n    .Does(() =>\r\n{\r\n    // Copy legal documents\r\n    CopyFile(BuildParameters.RootDirectoryPath + \"/docs/legal/CREDITS.md\", BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/CREDITS.txt\");\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedApplications + \"/choco/LICENSE.txt\", BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/LICENSE.txt\");\r\n\r\n    // Copy choco.exe.manifest\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedApplications + \"/choco/choco.exe.manifest\", BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/choco.exe.manifest\");\r\n\r\n    // Copy external file resources\r\n    EnsureDirectoryExists(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/helpers\");\r\n    CopyFiles(GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco/helpers/**/*\"), BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/helpers\", true);\r\n    EnsureDirectoryExists(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/redirects\");\r\n    CopyFiles(GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco/redirects/**/*\"), BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/redirects\", true);\r\n    EnsureDirectoryExists(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/tools\");\r\n    CopyFiles(GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco/tools/**/*\"), BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/tools\", true);\r\n\r\n    // Copy merged choco.exe\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedApplications + \"/choco_merged/choco.exe\", BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/choco.exe\");\r\n\r\n    // Copy Chocolatey.PowerShell.dll and its help.xml file\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedLibraries + \"/Chocolatey.PowerShell/Chocolatey.PowerShell.dll\", BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/helpers/Chocolatey.PowerShell.dll\");\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedLibraries + \"/Chocolatey.PowerShell/Chocolatey.PowerShell.dll-help.xml\", BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/helpers/Chocolatey.PowerShell.dll-help.xml\");\r\n\r\n    // Tidy up logs and config folder which are not required\r\n    var logsDirectory = BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/logs\";\r\n    var configDirectory = BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/tools/chocolateyInstall/config\";\r\n\r\n    if (DirectoryExists(logsDirectory))\r\n    {\r\n        DeleteDirectory(logsDirectory, new DeleteDirectorySettings {\r\n            Recursive = true,\r\n            Force = true\r\n        });\r\n    }\r\n\r\n    if (DirectoryExists(configDirectory))\r\n    {\r\n        DeleteDirectory(configDirectory, new DeleteDirectorySettings {\r\n            Recursive = true,\r\n            Force = true\r\n        });\r\n    }\r\n});\r\n\r\nTask(\"Build-ChocolateyNo7zip\")\r\n    .WithCriteria(() => BuildParameters.Configuration == \"ReleaseOfficial\", \"Skipping No7zip because this isn't an official release\")\r\n    .IsDependentOn(\"Build\")\r\n    .IsDependentOn(\"Test\")\r\n    .IsDependeeOf(\"Run-ILMerge\")\r\n    .Does<BuildData>(data => RequireTool(ToolSettings.MSBuildExtensionPackTool, () =>\r\n{\r\n    Information(\"Building {0} with No7zip\", BuildParameters.SolutionFilePath);\r\n\r\n    CleanDirectory(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/\");\r\n\r\n    var no7zLogPath = BuildParameters.Paths.Files.BuildLogFilePath.ToString().Replace(\"\\\\.(\\\\S+)$\", \"-no7zip.${1}\");\r\n\r\n    if (BuildParameters.BuildAgentOperatingSystem == PlatformFamily.Windows)\r\n    {\r\n        var msbuildSettings = new MSBuildSettings()\r\n            {\r\n                ToolPath = ToolSettings.MSBuildToolPath\r\n            }\r\n            .SetPlatformTarget(ToolSettings.BuildPlatformTarget)\r\n            .UseToolVersion(ToolSettings.BuildMSBuildToolVersion)\r\n            .WithProperty(\"OutputPath\", MakeAbsolute(new DirectoryPath(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/\")).FullPath)\r\n            .WithProperty(\"TreatWarningsAsErrors\", BuildParameters.TreatWarningsAsErrors.ToString())\r\n            .WithTarget(\"Build\")\r\n            .SetMaxCpuCount(ToolSettings.MaxCpuCount)\r\n            .SetConfiguration(\"ReleaseOfficialNo7zip\")\r\n            .WithLogger(\r\n                Context.Tools.Resolve(\"MSBuild.ExtensionPack.Loggers.dll\").FullPath,\r\n                \"XmlFileLogger\",\r\n                string.Format(\r\n                    \"logfile=\\\"{0}\\\";invalidCharReplacement=_;verbosity=Detailed;encoding=UTF-8\",\r\n                    no7zLogPath\r\n                )\r\n            );\r\n\r\n        MSBuild(BuildParameters.SolutionFilePath, msbuildSettings);\r\n    }\r\n\r\n    if (FileExists(no7zLogPath))\r\n    {\r\n        BuildParameters.BuildProvider.UploadArtifact(no7zLogPath);\r\n    }\r\n}));\r\n\r\nTask(\"Prepare-ChocolateyNo7zip-Package\")\r\n    .WithCriteria(() => BuildParameters.Configuration == \"ReleaseOfficial\", \"Skipping No7zip because this isn't an official release\")\r\n    .WithCriteria(() => BuildParameters.BuildAgentOperatingSystem == PlatformFamily.Windows, \"Skipping because not running on Windows\")\r\n    .WithCriteria(() => BuildParameters.ShouldRunChocolatey, \"Skipping because execution of Chocolatey has been disabled\")\r\n    .IsDependentOn(\"Build-ChocolateyNo7zip\")\r\n    .IsDependeeOf(\"Sign-Assemblies\")\r\n    .IsDependeeOf(\"Verify-PowerShellScripts\")\r\n    .IsDependeeOf(\"Create-ChocolateyNo7zip-Package\")\r\n    .Does(() =>\r\n{\r\n    var nuspecDirectory = BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"-no7zip\";\r\n    // Copy the Nuget/Chocolatey directory from Root Folder to temp/nuspec/chocolatey-no7zip\r\n    EnsureDirectoryExists(nuspecDirectory);\r\n    CopyFiles(GetFiles(\"./nuspec/chocolatey/**/*\"), nuspecDirectory, true);\r\n\r\n    // Copy legal documents\r\n    CopyFile(BuildParameters.RootDirectoryPath + \"/docs/legal/CREDITS.md\", nuspecDirectory + \"/tools/chocolateyInstall/CREDITS.txt\");\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/LICENSE.txt\", nuspecDirectory + \"/tools/chocolateyInstall/LICENSE.txt\");\r\n\r\n    // Copy choco.exe.manifest\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/choco.exe.manifest\", nuspecDirectory + \"/tools/chocolateyInstall/choco.exe.manifest\");\r\n\r\n    // Copy external file resources\r\n    EnsureDirectoryExists(nuspecDirectory + \"/tools/chocolateyInstall/helpers\");\r\n    CopyFiles(GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/helpers/**/*\"), nuspecDirectory + \"/tools/chocolateyInstall/helpers\", true);\r\n    EnsureDirectoryExists(nuspecDirectory + \"/tools/chocolateyInstall/redirects\");\r\n    CopyFiles(GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/redirects/**/*\"), nuspecDirectory + \"/tools/chocolateyInstall/redirects\", true);\r\n    EnsureDirectoryExists(nuspecDirectory + \"/tools/chocolateyInstall/tools\");\r\n    CopyFiles(GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip/tools/**/*\"), nuspecDirectory + \"/tools/chocolateyInstall/tools\", true);\r\n\r\n    // Copy merged choco.exe\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedApplications + \"/choco-no7zip_merged/choco.exe\", nuspecDirectory + \"/tools/chocolateyInstall/choco.exe\");\r\n\r\n    // Copy Chocolatey.PowerShell.dll and help.xml file\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedLibraries + \"/Chocolatey.PowerShell/Chocolatey.PowerShell.dll\", nuspecDirectory + \"/tools/chocolateyInstall/helpers/Chocolatey.PowerShell.dll\");\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedLibraries + \"/Chocolatey.PowerShell/Chocolatey.PowerShell.dll-help.xml\", nuspecDirectory + \"/tools/chocolateyInstall/helpers/Chocolatey.PowerShell.dll-help.xml\");\r\n\r\n    // Tidy up logs and config folder which are not required\r\n    var logsDirectory = nuspecDirectory + \"/tools/chocolateyInstall/logs\";\r\n    var configDirectory = nuspecDirectory + \"/tools/chocolateyInstall/config\";\r\n\r\n    if (DirectoryExists(logsDirectory))\r\n    {\r\n        DeleteDirectory(logsDirectory, new DeleteDirectorySettings {\r\n            Recursive = true,\r\n            Force = true\r\n        });\r\n    }\r\n\r\n    if (DirectoryExists(configDirectory))\r\n    {\r\n        DeleteDirectory(configDirectory, new DeleteDirectorySettings {\r\n            Recursive = true,\r\n            Force = true\r\n        });\r\n    }\r\n});\r\n\r\nTask(\"Create-ChocolateyNo7zip-Package\")\r\n    .WithCriteria(() => BuildParameters.Configuration == \"ReleaseOfficial\", \"Skipping No7zip because this isn't an official release\")\r\n    .WithCriteria(() => BuildParameters.ShouldRunChocolatey, \"Skipping because execution of Chocolatey has been disabled\")\r\n    .WithCriteria(() => BuildParameters.BuildAgentOperatingSystem == PlatformFamily.Windows, \"Skipping because not running on Windows\")\r\n    .IsDependentOn(\"Prepare-ChocolateyNo7zip-Package\")\r\n    .IsDependeeOf(\"Package\")\r\n    .Does(() =>\r\n{\r\n    var nuspecDirectory = BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"-no7zip/\";\r\n    var nuspecFile = nuspecDirectory + \"chocolatey.nuspec\";\r\n\r\n    ChocolateyPack(nuspecFile, new ChocolateyPackSettings {\r\n        AllowUnofficial = true,\r\n        Version = BuildParameters.Version.PackageVersion,\r\n        OutputDirectory = nuspecDirectory,\r\n        WorkingDirectory = BuildParameters.Paths.Directories.PublishedApplications\r\n    });\r\n\r\n    MoveFile(\r\n        nuspecDirectory + \"chocolatey.\" + BuildParameters.Version.PackageVersion + \".nupkg\",\r\n        BuildParameters.Paths.Directories.ChocolateyPackages + \"/chocolatey-no7zip.\" + BuildParameters.Version.PackageVersion + \".nupkg\"\r\n    );\r\n\r\n    // Due to the fact that we have chosen to ignore the no7zip package via the chocolateyNupkgGlobbingPattern, it will\r\n    // no longer be automatically uploaded via Chocolatey.Cake.Recipe, so we need to handle that work here.\r\n    BuildParameters.BuildProvider.UploadArtifact(BuildParameters.Paths.Directories.ChocolateyPackages + \"/chocolatey-no7zip.\" + BuildParameters.Version.PackageVersion + \".nupkg\");\r\n});\r\n\r\nTask(\"Prepare-NuGet-Packages\")\r\n    .WithCriteria(() => BuildParameters.ShouldRunNuGet, \"Skipping because execution of NuGet has been disabled\")\r\n    .IsDependeeOf(\"Create-NuGet-Packages\")\r\n    .IsDependeeOf(\"Verify-PowerShellScripts\")\r\n    .IsDependeeOf(\"Sign-Assemblies\")\r\n    .Does(() =>\r\n{\r\n    CleanDirectory(BuildParameters.Paths.Directories.NuGetNuspecDirectory + \"/chocolatey.lib/lib\");\r\n    EnsureDirectoryExists(BuildParameters.Paths.Directories.NuGetNuspecDirectory + \"/chocolatey.lib/lib/net48\");\r\n\r\n    // Copy legal documents\r\n    CopyFile(BuildParameters.RootDirectoryPath + \"/docs/legal/CREDITS.md\", BuildParameters.Paths.Directories.NuGetNuspecDirectory + \"/chocolatey.lib/lib/CREDITS.txt\");\r\n\r\n    CopyFiles(BuildParameters.Paths.Directories.PublishedLibraries + \"/chocolatey_merged/*\", BuildParameters.Paths.Directories.NuGetNuspecDirectory + \"/chocolatey.lib/lib/net48\");\r\n    CopyFile(BuildParameters.Paths.Directories.PublishedLibraries + \"/chocolatey/chocolatey.xml\", BuildParameters.Paths.Directories.NuGetNuspecDirectory + \"/chocolatey.lib/lib/net48/chocolatey.xml\");\r\n});\r\n\r\nTask(\"Prepare-MSI\")\r\n    .WithCriteria(() => BuildParameters.ShouldBuildMsi, \"Skipping because creation of MSI has been disabled\")\r\n    .IsDependeeOf(\"Build-MSI\")\r\n    .Does(() =>\r\n{\r\n    var installScriptPath = BuildParameters.RootDirectoryPath + \"/src/chocolatey.install/assets/Install.ps1\";\r\n\r\n    if (!FileExists(installScriptPath)) \r\n    {\r\n        DownloadFile(\r\n            \"https://community.chocolatey.org/install.ps1\",\r\n            installScriptPath\r\n        );\r\n    }\r\n});\r\n\r\nTask(\"Create-TarGz-Packages\")\r\n    .IsDependentOn(\"Build\")\r\n    .IsDependeeOf(\"Package\")\r\n    .WithCriteria(!IsRunningOnWindows(), \"Skipping because this is a Windows build\")\r\n    .Does(() =>\r\n{\r\n    EnsureDirectoryExists(BuildParameters.Paths.Directories.ChocolateyPackages);\r\n\r\n    var outputFile = string.Format(\r\n        \"{0}/chocolatey.v{1}.tar.gz\",\r\n        MakeAbsolute(new DirectoryPath(BuildParameters.Paths.Directories.ChocolateyPackages.FullPath)),\r\n        BuildParameters.Version.SemVersion\r\n    );\r\n\r\n    StartProcess(\r\n        \"tar\",\r\n        new ProcessSettings {\r\n            Arguments = string.Format(\r\n                \"-czvf {0} .\",\r\n                outputFile\r\n            ),\r\n            WorkingDirectory = BuildParameters.Paths.Directories.PublishedApplications.FullPath + \"/choco/\"\r\n        }\r\n    );\r\n\r\n    if (FileExists(outputFile))\r\n    {\r\n        BuildParameters.BuildProvider.UploadArtifact(outputFile);\r\n    }\r\n});\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// RECIPE SCRIPT\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\nEnvironment.SetVariableNames();\r\n\r\nBuildParameters.SetParameters(context: Context,\r\n                            buildSystem: BuildSystem,\r\n                            sourceDirectoryPath: \"./src\",\r\n                            solutionFilePath: \"./src/chocolatey.sln\",\r\n                            solutionDirectoryPath: \"./src/chocolatey\",\r\n                            resharperSettingsFileName: \"chocolatey.sln.DotSettings\",\r\n                            title: \"Chocolatey\",\r\n                            repositoryOwner: \"chocolatey\",\r\n                            repositoryName: \"choco\",\r\n                            productName: \"Chocolatey\",\r\n                            productDescription: \"chocolatey is a product of Chocolatey Software, Inc. - All Rights Reserved.\",\r\n                            productCopyright: string.Format(\"Copyright © 2017 - {0} Chocolatey Software, Inc. Copyright © 2011 - 2017, RealDimensions Software, LLC - All Rights Reserved.\", DateTime.Now.Year),\r\n                            shouldStrongNameSignDependentAssemblies: false,\r\n                            treatWarningsAsErrors: false,\r\n                            getScriptsToVerify: getScriptsToVerify,\r\n                            getScriptsToSign: getScriptsToSign,\r\n                            getFilesToSign: getFilesToSign,\r\n                            getMsisToSign: getMsisToSign,\r\n                            getILMergeConfigs: getILMergeConfigs,\r\n                            preferDotNetGlobalToolUsage: !IsRunningOnWindows(),\r\n                            shouldBuildMsi: false,\r\n                            msiUsedWithinNupkg: false,\r\n                            shouldAuthenticodeSignMsis: true,\r\n                            shouldRunNuGet: IsRunningOnWindows(),\r\n                            shouldAuthenticodeSignPowerShellScripts: IsRunningOnWindows(),\r\n                            shouldPublishAwsLambdas: false,\r\n                            chocolateyNupkgGlobbingPattern: \"/**/chocolatey[!-no7zip]*.nupkg\");\r\n\r\nToolSettings.SetToolSettings(context: Context);\r\n\r\nBuildParameters.PrintParameters(Context);\r\n\r\nBuild.Run();\r\n"
        },
        {
          "name": "setup.cmd",
          "type": "blob",
          "size": 0.212890625,
          "content": "@echo off\r\n\r\nSET DIR=%~dp0%\r\n\r\n%windir%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -ExecutionPolicy unrestricted -Command \"$Error.Clear();& '%DIR%setup.ps1' %*;Exit $Error.Count + $LastExitCode\"\r\n\r\npause"
        },
        {
          "name": "setup.ps1",
          "type": "blob",
          "size": 0.361328125,
          "content": "﻿### install chocolatey ###\r\nif (-not $env:ChocolateyInstall -or -not (Test-Path \"$env:ChocolateyInstall\")) {\r\n    Invoke-Expression ((New-Object net.webclient).DownloadString(\"https://community.chocolatey.org/install.ps1\"))\r\n}\r\n\r\nchoco install dotnetfx -y\r\nchoco install visualstudio2019buildtools -y\r\nchoco install netfx-4.8-devpack -y\r\nchoco install dotnet-sdk -y\r\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-cmdlet-documentation.ps1",
          "type": "blob",
          "size": 6.283203125,
          "content": "﻿<#\r\n.SYNOPSIS\r\nGenerates Markdown documentation for the Chocolatey.PowerShell portion of Chocolatey's installer module commands.\r\n\r\n.DESCRIPTION\r\nUse this script when modifying or adding commands into the Chocolatey.PowerShell project.\r\nYou will need the chocolatey/docs repository cloned locally in order to use this script.\r\nWhen all documentation files this script is monitoring have been filled out (contain no remaining {{ template tokens }}), this script will generate/update the external help xml files for PowerShell.\r\n#>\r\n[CmdletBinding()]\r\nparam(\r\n    # Specify the path to the chocolatey/docs repository root locally. Defaults to ../docs\r\n    [Parameter()]\r\n    [string]\r\n    $DocsRepositoryPath = \"$PSScriptRoot/../docs\",\r\n\r\n    # Specify the new commands' names to generate new documentation pages for them.\r\n    [Parameter()]\r\n    [Alias('NewCommands')]\r\n    [string[]]\r\n    $NewCommand,\r\n\r\n    # Opens any new or incomplete files in the default editor for Markdown (.md) files for editing.\r\n    [Parameter()]\r\n    [switch]\r\n    $OpenUnfinished\r\n)\r\n\r\nif (-not (Get-Module -ListAvailable PlatyPS)) {\r\n    Write-Warning \"PlatyPS module not found, attempting to install from PSGallery\"\r\n    Install-Module PlatyPS -Scope CurrentUser\r\n}\r\n\r\n$documentationPath = Join-Path $DocsRepositoryPath -ChildPath \"src\\content\\docs\\en-us\\create\\cmdlets\"\r\nif (-not (Test-Path $DocsRepositoryPath)) {\r\n    throw \"PowerShell commands docs folder was not found at '$documentationPath'. Please clone the chocolatey/docs repository locally first, and/or provide the path to the repo root as -DocsRepositoryPath to this script.\"\r\n}\r\n\r\n$dllPath = \"$PSScriptRoot/code_drop/temp/_PublishedLibs/Chocolatey.PowerShell/Chocolatey.PowerShell.dll\"\r\n\r\nif (-not (Test-Path $dllPath)) {\r\n    throw \"Please run this repository's build.ps1 file before trying to build markdown help for this module.\"\r\n}\r\n\r\n# Rename .mdx to .md and transform anything platyps doesn't like and can't handle\r\n$renamedFiles = Get-ChildItem -Path $documentationPath -Filter '*.md*' |\r\n    Where-Object Name -notlike \"index.*\" |\r\n    Rename-Item -NewName { $_.BaseName + \".md\" } -PassThru |\r\n    ForEach-Object {\r\n        $content = Get-Content -Path $_.FullName\r\n        $content = $content | ForEach-Object {\r\n            # replace xref with markdown-ish link so platyPS can process things\r\n            if ($_ -match '<Xref[^>]+?>') {\r\n                $xml = [xml]$_\r\n                $label = $xml.Xref.title\r\n                $xref = $xml.Xref.value\r\n                $anchor = $xml.Xref.anchor\r\n                $classes = $xml.Xref.classes\r\n\r\n                if ($anchor -and $classes) {\r\n                    \"[${label}](xref:${xref}#${anchor},${classes})\"\r\n                }\r\n                elseif ($classes) {\r\n                    \"[${label}](xref:${xref},${classes})\"     \r\n                }\r\n                elseif ($anchor) {\r\n                    \"[${label}](xref:${xref}#${anchor})\"                    \r\n                }\r\n                else {\r\n                    \"[${label}](xref:${xref})\"      \r\n                }\r\n\r\n            }\r\n            else {\r\n                $_\r\n            }\r\n        }\r\n        $content | Set-Content -Path $_.FullName\r\n    }\r\n\r\n# Import the module .dll to generate / update help from.\r\nImport-Module $dllPath\r\n\r\nif (-not (Get-Module Chocolatey.PowerShell)) {\r\n    throw \"The Chocolatey.PowerShell module was not able to be loaded, exiting documentation generation.\"\r\n}\r\n\r\n$newOrUpdatedFiles = [System.Collections.Generic.HashSet[System.IO.FileSystemInfo]] @(\r\n    if ($NewCommand) {\r\n        New-MarkdownHelp -Command $NewCommand -OutputFolder \"$PSScriptRoot\\docs\" -ExcludeDontShow\r\n    }\r\n\r\n    Update-MarkdownHelp -Path $documentationPath -ExcludeDontShow\r\n)\r\n\r\n$incompleteFiles = $newOrUpdatedFiles | Select-String '\\{\\{[^}]+}}' | Select-Object -ExpandProperty Path\r\n\r\nif ($incompleteFiles) {\r\n    Write-Warning \"The following files contain {{ template tokens }} from PlatyPS that must be replaced with help content before they are committed to the repository:\"\r\n    $incompleteFiles | Write-Warning\r\n\r\n    if ($OpenUnfinished) {\r\n        $incompleteFiles | Invoke-Item\r\n    }\r\n\r\n    Write-Warning \"Run this script again once these files have been updated in order to generate the XML help documentation for the module.\"\r\n}\r\nelse {\r\n    New-ExternalHelp -Path $documentationPath -OutputPath \"$PSScriptRoot/src/Chocolatey.PowerShell\" -Force\r\n}\r\n\r\n$newOrUpdatedFiles = $newOrUpdatedFiles |\r\n    Rename-Item -NewName { $_.BaseName + \".mdx\" } -PassThru |\r\n    ForEach-Object {\r\n        $content = Get-Content -Path $_.FullName\r\n        \r\n        $frontMatterBounds = 0\r\n        $content = $content | ForEach-Object {\r\n            if ($_ -match '\\[(?<name>[^\\]]+)\\]\\(xref:(?<xref>[^#,]+)(#(?<anchor>[^,]+))?,(?<classes>[^)]+)\\)') {\r\n                # replace any lines that are an xref link with the html/xml format that astro uses <Xref ... />\r\n                $xml = [xml]::new()\r\n                $node = $xml.CreateElement('Xref')\r\n                $title = $xml.CreateAttribute('title')\r\n                $title.Value = $matches['name']\r\n                $null = $node.Attributes.Append($title)\r\n\r\n                $target = $xml.CreateAttribute('value')\r\n                $target.Value = $matches['xref']\r\n                $null = $node.Attributes.Append($target)\r\n\r\n                if ($matches['anchor']) {\r\n                    $anchor = $xml.CreateAttribute('anchor')\r\n                    $anchor.Value = $matches['anchor']\r\n                    $null = $node.Attributes.Append($anchor)\r\n                }\r\n\r\n                $classes = $xml.CreateAttribute('classes')\r\n                $classes.Value = $matches['classes']\r\n                $null = $node.Attributes.Append($classes)\r\n\r\n                $node.OuterXml\r\n            }\r\n            else {\r\n                # after the second --- where we exit the frontmatter, add the xref import to the document\r\n                $_\r\n\r\n                if ($_ -eq '---') {\r\n                    $frontMatterBounds++\r\n\r\n                    if ($frontMatterBounds -eq 2) {\r\n                        \"import Xref from '@components/Xref.astro';\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        $content | Set-Content -Path $_.FullName\r\n\r\n        $_\r\n    }\r\n\r\n# Output the new/updated files so calling user knows what files the script has touched.\r\n$newOrUpdatedFiles"
        },
        {
          "name": "update-nuget-client.ps1",
          "type": "blob",
          "size": 1.8056640625,
          "content": "param(\r\n    [string]$sourceLocation = $env:NUGET_SOURCE_LOCATION,\r\n    [Parameter(ParameterSetName = 'build')]\r\n    [switch]$build,\r\n    [Parameter(ParameterSetName = 'build')]\r\n    [int]$buildNumber\r\n)\r\n\r\nif (!$sourceLocation) {\r\n    Write-Error \"The Source location of NuGet.Client has not been set. Unable to continue...\"\r\n    return\r\n}\r\n\r\n$thisLocation = $PSScriptRoot\r\n\r\nPush-Location $sourceLocation\r\n\r\nif ($build -or !(Test-Path \"$sourceLocation\\artifacts\")) {\r\n    if (!$buildNumber) {\r\n        [int]$buildNumber = Get-ChildItem \"$thisLocation\\src\\packages\\Chocolatey.Nuget.*\" | ? {\r\n            $_.Name -match \"-\\d+$\"\r\n        } | % {\r\n            $_.Name -replace '^.*-(\\d+)$',\"`$1\"\r\n        } | Select-Object -First 1\r\n    }\r\n\r\n    \"Configuring NuGet.Client repository dependencies\"\r\n    #.\\configure.ps1\r\n    \r\n    \"Calling .\\build.ps1 -CI -SkipUnitTest -ChocolateyBuild -Configuration Debug -BuildNumber $buildNumber -ReleaseLabel 'zlocal'\"\r\n    .\\build.ps1 -CI -SkipUnitTest -ChocolateyBuild -Configuration Debug -BuildNumber $buildNumber -ReleaseLabel 'zlocal'\r\n}\r\n\r\nGet-ChildItem \"$thisLocation\\src\\packages\\Chocolatey.NuGet.*\" | ForEach-Object {\r\n    $name = $_.Name -replace \"^Chocolatey\\.NuGet([^\\d]+)(\\.\\d.*)$\", \"NuGet`$1\"\r\n\r\n    $destination = \"$($_.FullName)\\lib\"\r\n    Remove-Item \"$destination\\*\\*\"\r\n\r\n    Get-ChildItem \"$sourceLocation\\artifacts\\$name\\bin\\Debug\" -Directory | ForEach-Object {\r\n        $directoryName = $_.Name\r\n        $files = \"$($_.FullName)\\Chocolatey.$name*\"\r\n        if (Test-Path $files) {\r\n            \"Copying Chocolatey.$name to $destination\\$directoryName\"\r\n            $null = New-Item -ItemType Directory -Path \"$destination\\$directoryName\" -Force -ErrorAction SilentlyContinue\r\n            Copy-Item $files -Destination \"$destination\\$directoryName\" -Force\r\n        }\r\n    }\r\n}\r\n\r\n\r\nPop-Location"
        }
      ]
    }
  ]
}