{
  "metadata": {
    "timestamp": 1736711203545,
    "page": 125,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Azure/azure-sdk-for-net",
      "stars": 5601,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 8.8251953125,
          "content": "# editorconfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\ntrim_trailing_whitespace = true\n\n# Default settings:\n# A newline ending every file\n# Use 4 spaces as indentation\n[sdk/*/{Azure.*,System.*}/**]\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n# C# files\n[sdk/*/{Azure.*,System.*}/**.cs]\n# New line preferences\ncsharp_new_line_before_open_brace = all # vs-default: any\ncsharp_new_line_before_else = true # vs-default: true\ncsharp_new_line_before_catch = true # vs-default: true\ncsharp_new_line_before_finally = true # vs-default: true\ncsharp_new_line_before_members_in_object_initializers = true # vs-default: true\ncsharp_new_line_before_members_in_anonymous_types = true # vs-default: true\ncsharp_new_line_between_query_expression_clauses = true # vs-default: true\n\n# Indentation preferences\ncsharp_indent_block_contents = true # vs-default: true\ncsharp_indent_braces = false # vs-default: false\ncsharp_indent_case_contents = true # vs-default: true\ncsharp_indent_case_contents_when_block = true\ncsharp_indent_switch_labels = true # vs-default: true\ncsharp_indent_labels = one_less_than_current # vs-default: one_less_than_current\n\n# Modifier preferences\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion\n\n# avoid this. unless absolutely necessary\ndotnet_style_qualification_for_field = false:suggestion # vs-default: false:none\ndotnet_style_qualification_for_property = false:suggestion # vs-default: false:none\ndotnet_style_qualification_for_method = false:suggestion # vs-default: false:none\ndotnet_style_qualification_for_event = false:suggestion # vs-default: false:none\n\n# only use var when it's obvious what the variable type is\ncsharp_style_var_for_built_in_types = false:none # vs-default: true:none\ncsharp_style_var_when_type_is_apparent = false:none # vs-default: true:none\ncsharp_style_var_elsewhere = false:suggestion # vs-default: true:none\n\n# use language keywords instead of BCL types\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion # vs-default: true:none\ndotnet_style_predefined_type_for_member_access = true:suggestion # vs-default: true:none\n\n# name all constant fields using PascalCase\ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style\n\ndotnet_naming_symbols.constant_fields.applicable_kinds = field\ndotnet_naming_symbols.constant_fields.required_modifiers = const\n\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\n\n# static fields should have s_ prefix\ndotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion\ndotnet_naming_rule.static_fields_should_have_prefix.symbols = static_fields\ndotnet_naming_rule.static_fields_should_have_prefix.style = static_prefix_style\n\ndotnet_naming_symbols.static_fields.applicable_kinds = field\ndotnet_naming_symbols.static_fields.required_modifiers = static\ndotnet_naming_symbols.static_fields.applicable_accessibilities = private, internal, private_protected\ndotnet_naming_style.static_prefix_style.required_prefix = s_\ndotnet_naming_style.static_prefix_style.capitalization = camel_case\n\n# internal and private fields should be _camelCase\ndotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion\ndotnet_naming_rule.camel_case_for_private_internal_fields.symbols = private_internal_fields\ndotnet_naming_rule.camel_case_for_private_internal_fields.style = camel_case_underscore_style\n\ndotnet_naming_symbols.private_internal_fields.applicable_kinds = field\ndotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal\n\ndotnet_naming_style.camel_case_underscore_style.required_prefix = _\ndotnet_naming_style.camel_case_underscore_style.capitalization = camel_case\n\n# Code style defaults\ncsharp_using_directive_placement = outside_namespace:suggestion\ndotnet_sort_system_directives_first = true # vs-default: true\ncsharp_prefer_braces = true:refactoring\ncsharp_preserve_single_line_blocks = true # vs-default: true\ncsharp_preserve_single_line_statements = false # vs-default: true\ncsharp_prefer_static_local_function = true:suggestion\ncsharp_prefer_simple_using_statement = false:none\ncsharp_style_prefer_switch_expression = true:suggestion\n\n# Code quality\ndotnet_style_readonly_field = true:suggestion\ndotnet_code_quality_unused_parameters = non_public:suggestion\n\n# Expression-level preferences\ndotnet_style_object_initializer = true:suggestion # vs-default: true:suggestion\ndotnet_style_collection_initializer = true:suggestion # vs-default: true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion # vs-default: true:suggestion\ndotnet_style_coalesce_expression = true:suggestion # vs-default: true:suggestion\ndotnet_style_null_propagation = true:suggestion # vs-default: true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion\ndotnet_style_prefer_auto_properties = true:suggestion\ndotnet_style_prefer_conditional_expression_over_assignment = true:refactoring\ndotnet_style_prefer_conditional_expression_over_return = true:refactoring\ncsharp_prefer_simple_default_expression = true:suggestion\n\n# Expression-bodied members\ncsharp_style_expression_bodied_methods = false:none # vs-default: false:none\ncsharp_style_expression_bodied_constructors = false:none # vs-default: false:none\ncsharp_style_expression_bodied_operators = false:none # vs-default: false:none\ncsharp_style_expression_bodied_properties = true:none # vs-default: true:none\ncsharp_style_expression_bodied_indexers = true:none # vs-default: true:none\ncsharp_style_expression_bodied_accessors = true:none # vs-default: true:none\ncsharp_style_expression_bodied_lambdas = true:refactoring\ncsharp_style_expression_bodied_local_functions = true:refactoring\n\n# Pattern matching\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion # vs-default: true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion # vs-default: true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion # vs-default: true:suggestion\n\n# Null checking preferences\ncsharp_style_throw_expression = true:suggestion # vs-default: true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion # vs-default: true:suggestion\n\n# Other features\ncsharp_style_prefer_index_operator = false:none\ncsharp_style_prefer_range_operator = false:none\ncsharp_style_pattern_local_over_anonymous_function = false:none\n\n# Space preferences\ncsharp_space_after_cast = false # vs-default: false\ncsharp_space_after_colon_in_inheritance_clause = true # vs-default: true\ncsharp_space_after_comma = true # vs-default: true\ncsharp_space_after_dot = false # vs-default: false\ncsharp_space_after_keywords_in_control_flow_statements = true # vs-default: true\ncsharp_space_after_semicolon_in_for_statement = true # vs-default: true\ncsharp_space_around_binary_operators = before_and_after # vs-default: before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore # vs-default: false\ncsharp_space_before_colon_in_inheritance_clause = true # vs-default: true\ncsharp_space_before_comma = false # vs-default: false\ncsharp_space_before_dot = false # vs-default: false\ncsharp_space_before_open_square_brackets = false # vs-default: false\ncsharp_space_before_semicolon_in_for_statement = false # vs-default: false\ncsharp_space_between_empty_square_brackets = false # vs-default: false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false # vs-default: false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false # vs-default: false\ncsharp_space_between_method_call_parameter_list_parentheses = false # vs-default: false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false # vs-default: false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false # vs-default: false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false # vs-default: false\ncsharp_space_between_parentheses = false # vs-default: false\ncsharp_space_between_square_brackets = false # vs-default: false\n\n# Require accessibility modifiers\ndotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion # vs-default: for_non_interface_members:none\n\n# Analyzers\ndotnet_code_quality.ca1802.api_surface = private, internal\n\n# Xml project files\n[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]\nindent_size = 2\n\n# Xml build files\n[*.builds]\nindent_size = 2\n\n# Xml files\n[*.{xml,stylecop,resx,ruleset}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,config,nuspec}]\nindent_size = 2\n\n# Shell scripts\n[*.sh]\nend_of_line = lf\n[*.{cmd, bat}]\nend_of_line = crlf\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4638671875,
          "content": "* text=auto\n\n*.bmp binary\n*.dll binary\n*.gif binary\n*.jpg binary\n*.png binary\n*.snk binary\n*.exe binary\n*.wmv binary\n*.mp4 binary\n*.ismv binary\n*.isma binary\n\n*.cs text diff=csharp\n*.csproj text=auto\n*.sln text=auto eol=crlf\n*.sh text=auto eol=lf\n\n# Automatically collapse Track 2 test recordings in github PRs\n**/SessionRecords/**/*.json linguist-generated=true\n\n# Generated code\n**/Generated/**/*.cs linguist-generated=true\n**/Generated/**/*.csproj linguist-generated=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.4365234375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n.vs/\n*.lock.json\ndeveloper/\nlaunch.json\nlaunchSettings.json\n\n# Default Assets restore directory\n.assets\n\n# Build results\nbinaries/\n[Dd]ebug*/\n[Rr]elease/\nbuild/\nrestoredPackages/\nPolicheckOutput/\ntools/net46/\ntools/SdkBuildTools/\ntools/Microsoft.WindowsAzure.Build.Tasks/packages/\nPublishedNugets/\nsrc/NuGet.Config\ntools/7-zip/\n#tools/LocalNugetFeed/Microsoft.Internal.NetSdkBuild.Mgmt.Tools.*.nupkg\n\n[Tt]est[Rr]esult\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.vspscc\n*.vssscc\n.builds\n\n*.pidb\n\n*.log\n*.scc\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n\n# Visual Studio profiler\n*.psess\n*.vsp\n\n# VS Code\n**/.vscode/*\n!.vscode/cspell.json\n\n# Code analysis\n*.CodeAnalysisLog.xml\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n\n*.[Rr]e[Ss]harper\n\n# Rider IDE\n.idea\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish\n\n# Publish Web Output\n*.Publish.xml\n\n# Others\n[Bb]in\n[Oo]bj\nTestResults\n[Tt]est[Rr]esult*\n*.Cache\nClientBin\n~$*\n*.dbmdl\n\n*.[Pp]ublish.xml\n\nGenerated_Code #added for RIA/Silverlight projects\n\n# Build tasks\ntools/*.dll\n\n# Sensitive files\n*.keys\n!Azure.Extensions.AspNetCore.DataProtection.Keys\n!Azure.Security.KeyVault.Keys\n*.pfx\nTestConfigurations.xml\n*.json.env\n*.bicep.env\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\n\n# NuGet\n# packages\npackages/repositories.config\ntestPackages\n\n# Mac development\n.DS_Store\n\n# Specification DLLs\n*.Specification.dll\n\n# Generated readme.txt files #\nsrc/*/readme.txt\n\nbuild.out\n.nuget/\n\n# Azure Project\ncsx/\n*.GhostDoc.xml\npingme.txt\n\n# TS/Node files\ndist/\nnode_modules/\neng/packages/**/*.tgz\n\n# MSBuild binary log files\nmsbuild.binlog\n\n# BenchmarkDotNet\nBenchmarkDotNet.Artifacts\n\nartifacts\n.assets\n\n# Temporary typespec folders for typespec generation\nTempTypeSpecFiles/\n\n# Common toolchain intermediate files\ntemp\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vsconfig",
          "type": "blob",
          "size": 0.5537109375,
          "content": "{\n  \"version\": \"1.0\",\n  \"components\": [\n    \"Microsoft.VisualStudio.Workload.ManagedDesktop\",\n    \"Microsoft.Net.ComponentGroup.4.6.2-4.7.1.DeveloperTools\",\n    \"Microsoft.Net.Component.4.7.2.TargetingPack\",\n    \"Microsoft.Net.Component.4.6.1.TargetingPack\",\n    \"Microsoft.Net.Component.4.8.SDK\",\n    \"Microsoft.Component.MSBuild\",\n    \"Microsoft.NetCore.Component.DevelopmentTools\",\n    \"Microsoft.NetCore.Component.Runtime.7.0\",\n    \"Microsoft.NetCore.Component.Runtime.6.0\",\n    \"Microsoft.NetCore.Component.SDK\",\n    \"Microsoft.VisualStudio.Component.Git\"\n  ]\n}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 36.298828125,
          "content": "# Contributing\n\n## Prerequisites:\n\n- Install Visual Studio 2022 (Community or higher) and make sure you have the latest updates (https://www.visualstudio.com/).\n  - Need at least .NET Framework 4.6.1 and 4.7 development tools\n- Install the **.NET cross-platform development** workloads in VisualStudio\n- Install **.NET 8.0.100 SDK** for your specific platform. (or a higher version within the 8.0.*** band)  (https://dotnet.microsoft.com/download/dotnet-core/8.0)\n- Install the latest version of git (https://git-scm.com/downloads)\n- Install [PowerShell](https://docs.microsoft.com/powershell/scripting/install/installing-powershell), version 6 or higher, if you plan to make public API changes or are working with generated code snippets.\n- Install [NodeJS](https://nodejs.org/) (16.x.x) if you plan to use [C# code generation](https://github.com/Azure/autorest.csharp).\n- [Fork the repository](https://docs.github.com/get-started/quickstart/fork-a-repo); work will be done on a [topic branch](https://docs.github.com/get-started/quickstart/github-flow#create-a-branch) in your fork and a [pull request opened](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) against the `main` branch of the Azure SDK for .NET repository when ready for review.\n\n## GENERAL THINGS TO KNOW:\n\n**Client Libraries** are sdks used to interact with azure resources at application run time while **Management Libraries** are those used to manage (create/modify/delete) Azure resources.\n\n**Build Repo :** To build all Client and Management libraries together. Invoke `dotnet build build.proj` from the root of the repo.<br/>To scope to a single service supply a scope property e.g. `dotnet build build.proj /p:Scope=servicebus`. This will build both client and management projects in the specified service. If using msbuild you must run restore first. See below for how to build the [client](#client-libraries) or [management](#management-libraries) libraries independently.\n\n**Path Length :** To account for the **260 characters Path Length Limit** encountered on windows OS, file paths within the repo is keep below 210 characters. This gives you a runway of 49 characters as clone path for your repo. Paths longer that 260 characters will cause the build to break on windows OS and on CI. Assuming you clone to the default VisualStudio location such that the root of your clone is `C:\\Users\\\\**USERNAME**\\Source\\Repos\\azure-sdk-for-net` your username will have to be 9 characters long to avoid build errors caused by long paths. Consider using `C:\\git` as you clone path.\n\n**Dependencies :** To ensure that the same versions of dependencies are used for all projects in the repo, package versions are managed from a central location in `eng\\Packages.Data.props`. When adding package references you should first ensure that an **Update** reference of the package with the version exist in the **Packages.Data.props** then **Include** the reference without the version in your .csproj. Contact [azuresdkengsysteam@microsoft.com](mailto:azuresdkengsysteam@microsoft.com) if you need to change  versions for packages already present in **Packages.Data.props**\n\n**Line Endings :** If working on windows OS ensure git is installed with `Checkout Windows-style, commit Unix-style` option or `core.autocrlf` set to *true* in git config. If working on Unix based Linux or MacOS ensure git is installed with `Checkout as-is, commit Unix-style` option or `core.autocrlf` set to *input* in git config\n\n**GitHub Actions :** Forks of the repository will inherit the automations performed in the Azure SDK for .NET repository as GitHub Actions.  It is reccommended that you explicitly [disable](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#managing-github-actions-permissions-for-your-repository) these Actions to prevent errors and unwanted automation.\n\n----\n\n# Management Libraries\n\n## TO BUILD:\n\n1.  Open any solution, eg \"SDKs\\Compute\\Azure.ResourceManager.Compute.sln\"\n2.  Build solution from Visual Studio\n\n### Single Service from Command Line\n\n1. Open Developer Command Prompt\n2. From the root directory\n3. Invoke `msbuild eng\\mgmt.proj /p:scope=Compute`\n\n> _Build_ without any scope will build all management SDK's.\n\n### Create single nuget package\n\nIn order to build one package and run it's test\n`msbuild eng\\mgmt.proj /t:CreateNugetPackage /p:scope=Compute`\nNuget package will be created in root directory under \\artifacts\\packages\\Debug (default configuration is Debug)\n\n## TO TEST:\n\n### Using Visual Studio:\n\n1. Build project in Visual Studio.\n2. **Test Explorer** window will get populated with tests. Select test and `Run` or `Debug`\n\n### Using the command line:\n\nRun e.g. `msbuild eng\\mgmt.proj /t:\"Runtests\" /p:Scope=Compute`\nIn the above example _RunTests_ will build and run tests for Compute only or you can use command line CLI:\n\n```dotnetcli\ndotnet test Compute\\Azure.ResourceManager.Compute\\tests\\Azure.ResourceManager.Compute.Tests.csproj\n```\n\n### Non-Windows command line build\n\nNow you can use the same command on non-windows as above for e.g. on Ubuntu you can do something like below:\n\n- `dotnet msbuild eng\\mgmt.proj /t:Build /p:scope=Compute`\n- `dotnet msbuild eng\\mgmt.proj /t:RunTests /p:scope=Compute`\n- `dotnet msbuild eng\\mgmt.proj /t:CreateNugetPackage /p:scope=Compute`\n- `dotnet msbuild build.proj /t:Util /p:UtilityName=InstallPsModules`\n\n### Update build tools\n\nBuild tools are now downloaded as part of a nuget package under `root\\restoredPackages\\microsoft.internal.netsdkbuild.mgmt.tools`\nIf for any reason there is an update to the build tools, you will then need to first delete directory `root\\restoredPackages\\microsoft.internal.netsdkbuild.mgmt.tools` and re-execute your build command. This will simply get the latest version of build tools.\n\n## TO CREATE NEW LIBRARY USING TEMPLATE\n\nWe have created a dotnet template to make creating new management SDK library easier than ever.\n\nSee [README file](https://github.com/Azure/azure-sdk-for-net/blob/main/eng/templates/README.md).\n\n----\n\n# Client Libraries\n\n## TO BUILD:\n\n### Single Service from Command Line\n\n1. Open Developer Command Prompt\n2. Navigate to service directory e.g. _\"sdk\\eventhub\"_\n3. Invoke `dotnet build`\n4. or Build the **service.proj** in the repo root, passing the directory name of the specific service as a property. e.g. `dotnet build eng\\service.proj /p:ServiceDirectory=eventhub`\n\n### Single Service from Visual Studio\n\n1. Open any data-plane solution e.g. _\"sdk\\eventhub\\Microsoft.Azure.EventHubs.sln\"_\n2. Build solution from Visual Studio\n\n### All Client Services from Command Line\n\n1. Open Developer Command Prompt\n2. Navigate to repository root directory\n3. Invoke `dotnet build eng\\service.proj`\n\n### Support for Visual Studio Code & Dev Containers\n\nThis repository has been configured with support for Visual Studio Code's dev container extension to make it easier to get started working on code without needing to know about how to setup all the pre-requisites. Configuration for dev containers is contained within the ```.devcontainer``` folder off the root directory.\n\nTo get started:\n\n1. Install and configure Docker for your platform.\n2. Install the [Remote Development extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack) into Visual Studio Code.\n3. Clone the repository to your local workstation.\n4. Open Visual Studio Code at the root of the reposiory.\n5. Select \"Reopen in Container\" when prompted.\n\nAfter a few moments of initial configuration Visual Studio Code will launch the container with all dependencies (.NET SDK etc) pre-installed.\n\n## TO TEST:\n\n### Single Service from Command Line\n\n1. Open Developer Command Prompt\n2. Navigate to service directory e.g. _\"sdk\\eventhub\"_\n3. Invoke `dotnet test --filter TestCategory!=Live` _(Skips live tests)_\n4. or run test against **service.proj** in the repo root, passing the directory name of the specific service as a property. e.g. `dotnet test eng\\service.proj /p:ServiceDirectory=eventhub --filter TestCategory!=Live`\n\n### Single Service from Visual Studio\n\n1. Build.\n2. Test Explorer window will get populated with tests. Select test and `Run` or `Debug`\n\n### All Client Services from Command Line\n\n1. Open VS 2019 Command Prompt\n2. Navigate to repository root directory\n3. Invoke `dotnet test eng\\service.proj --filter TestCategory!=Live`\n   <br/><br/>\n\n### Live testing\n\nBefore running or recording live tests you need to create\n[live test resources](https://github.com/Azure/azure-sdk-for-net/blob/main/eng/common/TestResources/README.md).  Many of the client libraries make use of the Azure Core Test Framework to provide the basis for the live test infrastructure, including the ability to record Live tests so that they can be run without access to Azure resources.  The [Test Framework documentation](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core.TestFramework/README.md) provides more context around test recordings and other features.\n\nTo run live tests after creating live resources:\n\n1. Open Developer Command Prompt\n2. Navigate to service directory e.g. _\"sdk\\keyvault\"_\n3. Invoke `dotnet test`\n\nSome live tests may have additional steps for setting up live testing resources.\nSee the CONTRIBUTING.md file for the service you wish to test for additional\ninformation or instructions.\n\n### Testing Against Latest Versions of Client Libraries\nIn some cases, you might want to test against the latest versions of the client libraries. i.e. version not yet published to nuget. For this scenario you should make use of the `UseProjectReferenceToAzureClients` property which when set to `true` will switch all package references for client libraries present in the build to project references. This result in testing against the current version of the libraries in the repo. e.g. `dotnet test eng\\service.proj /p:ServiceDirectory=eventhub --filter TestCategory!=Live /p:UseProjectReferenceToAzureClients=true`\n\n### Code Coverage\n\nIf you want to enable code coverage reporting, on the command line pass `/p:CollectCoverage=true` like so:\n\n```dotnetcli\ndotnet tool restore\ndotnet test /p:CollectCoverage=true\n```\n\nOn developers' machines, you can open `index.html` from within the `TestResults` directory in each of your test projects.\nCoverage reports can also be found in Azure Pipelines on the \"Code Coverage\" tab after a pull request validation build completes.\n\nBy default, all _Azure.*_ libraries are covered, and any project that sets the `IsClientLibrary=true` MSBuild property.\nTo exclude a project, set `ExcludeFromCodeCoverage=true` in the project's MSBuild properties before other targets are imported.\n\n> The Azure SDK team does not mandate a threshold for code coverage nor do we aggregate those metrics in any reports. This metric can be misleading e.g., a client library with a lot of models and few operations could have complete serialization coverage of models but no coverage for operations and still have a high metric.\n> We encourage teams to drill into the reports generated locally or in Azure Pipelines on the \"Code Coverage\" tab to analyze their code coverage as necessary e.g., any code teams have written or client library methods that call an endpoint.\n\n## Public API additions\n\nIf you make public API changes or additions, the `eng\\scripts\\Export-API.ps1` script has to be run to update public API listings. This generates a file in the library's directory similar to the example found in `sdk\\template\\Azure.Template\\api\\Azure.Template.netstandard2.0.cs`.\n\nRunning the script for a project in `sdk\\tables` would look like this:\n```\neng\\scripts\\Export-API.ps1 tables\n```\n\n## Updating Sample Snippets\nIf the specific client library has sample snippets in markdown format, they were most likely created with help of the `eng\\scripts\\Update-Snippets.ps1` script.\nAny changes made to the snippet markdown should be done via updating the corresponding C# snippet code and subsequently running the script.\n\nRunning the script for a project, for example in `sdk\\keyvault`, would look like this:\n```\neng\\scripts\\Update-Snippets.ps1 keyvault\n```\n\nWhen run, the code regions in the format below (where `<snippetName>` is the name of the snippet):\n```c#\n#region Snippet:<snippetName>\n//some sample code\nstring snippet = \"some snippet code\";\n\n// The snippet updater defines the SNIPPET directive while parsing. You can use #if SNIPPET to filter lines in or out of the snippet.\n#if SNIPPET\nsnippet = \"value that would never pass a test but looks good in a sample!\";\n#else\nstring ignored = \"this code will not appear in the snippet markdown\";\n#endif\n\n#endregion\n```\n will be mapped to any markdown file with a corresponding code region in the format below where the snippet names match:\n\n**\\`\\`\\`C# Snippet:\\<snippetName>**\n\n**\\`\\`\\`**\n\nSee the following example of a [snippet C# file](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/tests/Samples/Sample01_HelloWorld.cs) and a [snippet markdown file](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/search/Azure.Search.Documents/samples/Sample01a_HelloWorld.md).\nNote that snippet names need to be globally unique under a given service directory.\n\nSnippets also can be integrated into XML doc comments. For example:\n```c#\n/// <summary>\n/// Some Property.\n/// </summary>\n/// <example>\n/// This is an example of using a snippet in XML docs.\n/// <code snippet=\"Snippet:<snippetName>\">\n/// // some sample code.\n/// string snippet = \"some snippet code\";\n/// </code>\npublic string SomeProperty { get; set; }\n```\n\nFor general information about samples, see the [Samples Guidelines](https://azure.github.io/azure-sdk/dotnet_introduction.html#dotnet-samples)\n\n## Updating Source on Build\nYou can run `eng\\scripts\\Export-API.ps1` and `eng\\scripts\\Update-Snippets.ps1` simultaneously as part of the build by setting as true either:\n1. The property `UpdateSourceOnBuild`\n2. The Environment variable `AZURE_DEV_UPDATESOURCESONBUILD=true`\n\ne.g.\n```\ndotnet build eng\\service.proj /p:ServiceDirectory=eventhub /p:UpdateSourceOnBuild=true\n```\n\n## API Compatibility Verification\n\n.NET is using the [ApiCompat tool](https://github.com/dotnet/arcade/pull/14328) to enforce API compatibility between versions. Builds of GA'ed libraries will fail locally and in CI if there are breaking changes.\n\n### How it works\nEach library needs to provide a `ApiCompatVersion` property which is set to the last GA'ed version of the library that will be used to compare APIs with the current to ensure no breaks have been introduced. Projects with this property set will download the specified package and the ApiCompat (Microsoft.DotNet.ApiCompat) tools package as part of the restore step of the project. Then as a post build step of the project it will run ApiCompat to verify the current APIs are compatible with the last GA'ed version of the APIs. For libraries that wish to disable the APICompat check they can remove the `ApiCompatVersion` property from their project. Our version bump automation will automatically add or increment the `ApiCompatVersion` property to the project when it detects that the version it is changing was a GA version which usually indicates that we just shipped that GA version and so it should be the new baseline for API checks.\n\n### Releasing a new version of a GA'ed libary\nSince the [eng/Packages.Data.props](https://github.com/Azure/azure-sdk-for-net/blob/main/eng/Packages.Data.props) is currently maintained manually, you will need to update the version number for your library in this file when releasing a new version.\n\n## NuGet Package Dev Feed\n\nThe Azure SDK for .NET releases packages daily from our CI pipeline to our NuGet package dev feed to help developers use and test new libraries before they are officially released to NuGet.\n\n**Dev Feed Package Browser**:\n\n- https://dev.azure.com/azure-sdk/public/_packaging?_a=feed&feed=azure-sdk-for-net\n\n**Dev Feed Package Source**:\n\n- https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json\n\n### 1. Add NuGet Package Dev Feed\n\nYou have multiple options for referencing the dev feed. You can either add it via the NuGet CLI or manually edit your NuGet.Config file.\n\n#### NuGet CLI\n\nYou can add the dev feed using the [NuGet CLI](https://docs.microsoft.com/nuget/reference/nuget-exe-cli-reference), which will add it to the NuGet.Config file.\n\n```bash\nnuget sources add -Name \"Azure SDK for .NET Dev Feed\" -Source \"https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json\"\n```\n\nYou can then view the list of NuGet package sources with this command:\n\n```bash\nnuget sources\n```\n\n#### NuGet Config file\n\nYou can add the dev feed to your NuGet.Config file, which can be at the Solution, User, or Computer level. See [NuGet.Config file locations and uses](https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior#config-file-locations-and-uses) to locate your NuGet.Config file.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <add key=\"Azure SDK for .NET Dev Feed\" value=\"https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json\" />\n  </packageSources>\n  <disabledPackageSources>\n    <clear />\n  </disabledPackageSources>\n</configuration>\n```\n\n> You can place a NuGet.Config file in the root of your solution. Projects within the solution will use the feed defined in that file.\n\n### 2. Find NuGet Package\n\nYou can use the following options to find the available dev feed packages:\n\n1. Search the Azure SDK for .NET Dev Feed: https://dev.azure.com/azure-sdk/public/_packaging?_a=feed&feed=azure-sdk-for-net\n1. In Visual Studio, use the [Package Manager UI](https://docs.microsoft.com/nuget/create-packages/prerelease-packages#installing-and-updating-pre-release-packages), be sure to check \"Include prerelease\".\n1. Use the NuGet CLI, for example `nuget list azure.identity -Prerelease -Allversions`\n\n### 3. Reference NuGet Package\n\nNow that you have found the package you want to use, it is time to add it to your project file.\n\nAs you can see in the example below, we want to use the `Azure.Data.Tables` version `3.0.0-alpha.*`. By using the `*` in the version number each `dotnet restore` will pull the latest version from the dev feed.\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <ItemGroup>\n    <PackageReference Include=\"Azure.Data.Tables\" Version=\"3.0.0-alpha.*\" />\n  </ItemGroup>\n</Project>\n```\n\n## Preparing a new library release\n\nTo prepare a package for release you should make use of `.\\eng\\common\\scripts\\Prepare-Release.ps1` script passing it appropriate arguments for the package intended for release. This script will correctly update the package version and changelog in the repo as well as update the DevOps release work items for that release.\n\n```\n.\\eng\\common\\scripts\\Prepare-Release.ps1 <PackageName> [<ServiceDirectory>] [<ReleaseDate>] [-ReleaseTrackingOnly]\n```\n\n- `<PackageName>` - Should match the full exact package name for the given ecosystem (i.e. \"Azure.Core\", \"azure-core\", \"@azure/core\", etc).\n- `<SerivceDirectory>` - Optional: Should be the exact directory name where the package resides in the repo. This is usually the same as the service name in most cases (i.e. \"sdk<service_directory>\" e.g. \"core\"). The parameter is optional and if provided will help speed-up the number of projects we have to parse to find the matching package project.\n- `<ReleaseDate>` - Optional: provide a specific date for when you plan to release the package. If one isn't given then one will be calculated based on the normal monthly shipping schedule.\n- `<ReleaseTrackingOnly>` - Optional: Switch that if passed will only update the release tracking data in DevOps and not update any versioning info or do validation in the local repo.\n\n## On-boarding New Generated Code Library\n\n### Project Structure\n\nIn `sdk\\< Service Name >`, you will find projects for services that have already been implemented.\n\n1. Client library projects needs to use the $(RequiredTargetFrameworks) *(defined in eng/Directory.Build.Data.props)* property in its TargetFramework while management library projects should use $(SdkTargetFx) *(defined in AzSdk.reference.props)*\n2. Projects of related packages are grouped together in a folder following the structure specified in [Repo Structure](https://github.com/Azure/azure-sdk/blob/main/docs/policies/repostructure.md).\n   - Client library packages are in a folder name like ***Microsoft.Azure.< ServiceName >***\n   - Management library packages are in a folder named like ***Azure.ResourceManager.< Resource Provider Name >***\n3. Each shipping package contains a project for their **generated** and /or **Customization** code\n   - The folder **'Generated'** contains the generated code\n   - The folder **'Customizations'** contains additions to the generated code - this can include additions to the generated partial classes, or additional classes that augment the SDK or call the generated code\n   - The file **generate.cmd**, used to generate library code for the given package, can also be found in this project\n\n### On-boarding (Data plane) Generated Clients\n\nSee [Data Plane Quick Start Tutorial](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/DataPlaneCodeGeneration/AzureSDKCodeGeneration_DataPlane_Quickstart.md) for details.\n\n### On-boarding Data Plane (Gen 1) Convenience Clients And Management Plane Generated Clients\n\n#### Standard Process\n\n1. Fork the [Azure REST API Specs](https://github.com/azure/azure-rest-api-specs) repository\n2. Create your Swagger specification for your HTTP API. For more information see [Introduction to Swagger - The World's Most Popular Framework for APIs](https://swagger.io)\n3. Install the latest version of AutoRest. For more info on getting started with AutoRest, see the [AutoRest repository](https://github.com/Azure/autorest)\n4. **MANDATORY**: Create a topic branch in your fork of the Azure SDK for .NET; this is where your changes will be made.\n5. Generate the code. See [Generating Client Code](#generating-client-code) below.\n6. **MANDATORY**: Add or update tests for the newly generated code.\n7. Once added to the Azure SDK for .NET, build your local package using [client](#client-libraries) or [management](#management-libraries) library instructions shown in the above sections.\n8. For management libraries run `eng\\scripts\\Update-Mgmt-CI.ps1` to update PR include paths in `sdk\\resourcemanager\\ci.mgmt.yml`\n9. Opan a pull request with your changes against the `main` branch of the [Azure SDK for .NET](https://github.com/azure/azure-sdk-for-net)\n10. The pull requests will be reviewed and merged by the Azure SDK team\n\n#### Generating Client Code\n\n1. Install templates for both data-plane and management-plane (control-plan) SDKs:\n\n   ```dotnetcli\n   # Data-plane SDK\n   dotnet new --install sdk/template\n   dotnet new azuresdk --name Azure.MyService --output sdk/myservice --ServiceDirectory myservice --ProjectName Azure.MyService\n\n   # Management-plane SDK\n   dotnet new --install eng/templates/Azure.ResourceManager.Template\n   dotnet new azuremgmt --help\n   ```\n\n   There are several options available for management-plane SDKs. You can see all those available with `--help` as shown above, or\n   [read about them](https://github.com/heaths/azure-sdk-for-net/blob/main/eng/templates/README.md) in our documentation.\n\n   This will perform most of the renames, namespace fix-ups, and similar, for you automatically; though, be sure to check all files - especially the README.md file(s) - for required manual changes.\n   If the template is already installed, this same command will upgrade it.\n\n2. Modify `autorest.md` to point to you Swagger file or central README.md file. E.g.\n\n   ``` yaml\n   input-file:\n       - https://raw.githubusercontent.com/Azure/azure-rest-api-specs/[COMMIT-HASH]/specification/storage/resource-manager/Microsoft.Storage/stable/2019-06-01/blob.json\n       - https://raw.githubusercontent.com/Azure/azure-rest-api-specs/[COMMIT-HASH]/specification/storage/resource-manager/Microsoft.Storage/stable/2019-06-01/file.json\n       - https://raw.githubusercontent.com/Azure/azure-rest-api-specs/[COMMIT-HASH]/specification/storage/resource-manager/Microsoft.Storage/stable/2019-06-01/storage.json\n   ```\n\n   ``` yaml\n   require: https://github.com/Azure/azure-rest-api-specs/blob/[COMMIT-HASH]/specification/azsadmin/resource-manager/storage/readme.md\n   ```\n\n3. Run `dotnet build /t:GenerateCode` in src directory of the project (e.g. `net\\sdk\\storage\\Azure.Management.Storage\\src`). This would run AutoRest and generate the code. (NOTE: this step requires Node 14).\n4. For management plan libraries add `azure-arm: true` setting to `autorest.md` client constructors and options would be auto-generated. For data-plane libraries follow the next two steps.\n5. Add a `*ClientOptions` type that inherits from `ClientOptions` and has a service version enum:\n\n   ``` C#\n   namespace Azure.Management.Storage\n   {\n       public class StorageManagementClientOptions: ClientOptions\n       {\n           private const ServiceVersion Latest = ServiceVersion.V2019_06_01;\n           internal static StorageManagementClientOptions Default { get; } = new StorageManagementClientOptions();\n\n           public StorageManagementClientOptions(ServiceVersion serviceVersion = Latest)\n           {\n               VersionString = serviceVersion switch\n               {\n                   ServiceVersion.V2019_06_01 => \"2019-06-01\",\n                   _ => throw new ArgumentOutOfRangeException(nameof(serviceVersion))\n               };\n           }\n\n           internal string VersionString { get; }\n\n           public enum ServiceVersion\n           {\n   #pragma warning disable CA1707 // Identifiers should not contain underscores\n               V2019_06_01 = 1\n   #pragma warning restore CA1707\n           }\n       }\n   }\n   ```\n\n6. Add public constructors to all the clients using a partial class.\n\n   ``` C#\n    public partial class FileSharesClient\n       {\n           public FileSharesClient(string subscriptionId, TokenCredential tokenCredential): this(subscriptionId, tokenCredential, StorageManagementClientOptions.Default)\n           {\n           }\n\n           public FileSharesClient(string subscriptionId, TokenCredential tokenCredential, StorageManagementClientOptions options):\n               this(new ClientDiagnostics(options), ManagementClientPipeline.Build(options, tokenCredential), subscriptionId, apiVersion: options.VersionString)\n           {\n           }\n       }\n   ```\n\n### Code Review Process\n\nBefore a pull request will be considered by the Azure SDK team, the following requirements must be met:\n\n- Prior to issuing the pull request:\n  - All code must have completed any necessary legal sign-off for being publicly viewable (Patent review, JSR review, etc.)\n  - The changes cannot break any existing functional/unit tests that are part of the central repository.\n    - This includes all tests, even those not associated with the given feature area.\n  - Code submitted must have basic unit test coverage, and have all the unit tests pass. Testing is the full responsibility of the service team\n    - Functional tests are encouraged, and provide teams with a way to mitigate regressions caused by other code contributions.\n  - Code should be commented.\n  - Code should be fully code reviewed.\n  - Code should be able to merge without any conflicts into the dev branch being targeted.\n  - Code should pass all relevant static checks and coding guidelines set forth by the specific repository.\n  - All build warnings and code analysis warnings should be fixed prior to submission.\n- As part of the pull request (aka, in the text box on GitHub as part of submitting the pull request):\n  - Proof of completion of the code review and test passes requirements above.\n  - Identity of QA responsible for feature testing (can be conducted post-merging of the pull request).\n  - Short description of the payload of pull request.\n- After the pull request is submitted:\n  - Our SLA is 48 hours. When your PR is submitted someone on our team will be auto assigned the PR for review. No need to email us\n  - MS internal folks, please reach out to us via our Teams channel or\n  - Send an email to the Azure Developer Platform team [adpteam@microsoft.com](mailto:adpteam@microsoft.com) alias.\n    - Include all interested parties from your team as well.\n    - In the message, make sure to acknowledge that the legal sign-off process is complete.\n\nOnce all of the above steps are met, the following process will be followed:\n\n- A member of the Azure SDK team will review the pull request on GitHub.\n- If the pull request meets the repository's requirements, the individual will approve the pull request, merging the code into the appropriate branch of the source repository.\n  - The owner will then respond to the email sent as part of the pull request, informing the group of the completion of the request.\n- If the request does not meet any of the requirements, the pull request will not be merged, and the necessary fixes for acceptance will be communicated back to the partner team.\n\n### Pull Request Etiquette and Best Practices\n\n#### Reviewers\n\n- If you disagree with the overall approach of the PR, comment on the general PR rather than individual lines of code.\n- Leaving [suggested changes](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request) is welcomed, but please never commit them for a PR you did not create.\n- When you are seeking to understand something rather than request corrections, it is suggested to use language such as \"I'm curious ...\" as a prefix to comments.\n- For comments that are just optional suggestions or are explicitly non-blocking, prefix them with \"nit: \" or \"non-blocking: \".\n- Avoid marking a PR as \"Request Changes\" ![2022_01_27_08_33_07_Changes_for_discussion_to_the_PR_Template_by_christothes_Pull_Request_26631_](https://user-images.githubusercontent.com/1279263/151379844-b9babb22-b0fe-4b9c-b749-eb7488a38d84.png) unless you have serious concerns that should block the PR from merging.\n- When to mark a PR as \"Approved\"\n  - You feel confident that the code meets a high quality bar, has adequate test coverage, is ready to merge.\n  - You have left comments that are uncontroversial and there is a shared understanding with the author that the comments can be addressed or resolved prior to being merged without significant discussion or significant change to the design or approach.\n- When to leave comments without approval\n  - You do not feel confident that your review alone is sufficient to call the PR ready to merge.\n  - You have feedback that may require detailed discussion or may indicate a need to change the current design or approach in a non-trivial way.\n- When to mark a PR as \"Request Changes\"\n  - You have significant concerns that must be addressed before this PR should be merged such as unintentional breaking changes, security issues, or potential data loss.\n\n#### Pull Request Authors\n\n- If you add significant changes to a PR after it has been marked approved, please confirm with reviewers that they still approve before merging.\n- Please ensure that you have obtained an approval from at least one of the code owners before merging.\n- If a reviewer marks your PR as approved along with specific comments, it is expected that those comments will be addressed or resolved prior to merging.\n  - One exception is when a comment clearly states that the feedback is optional or just a nit\n  - When in doubt, reach out to the commentor to confirm that they have no concerns with you merging without addressing a comment.\n\n### Client Library Tested Operating Systems and .NET Versions\n\n|                          | Linux (Ubuntu 20.04) | MacOS 10.15 | Windows Server 2019 |\n| ------------------------ | :------------------: | :---------: | :-----------------: |\n| **.NET 7.0**             | x                    | x           | x                   |\n| **.NET 6.0**             | x                    | x           | x                   |\n| **.NET Framework 4.6.1** |                      |             | x                   |\n\n### Issues with Generated Code\n\nMuch of the management plane SDK code is generated from metadata specs about the REST APIs. Do not submit PRs that modify generated code. Instead,\n\n- File an issue describing the problem,\n- Refer to the the [AutoRest project](https://github.com/azure/autorest) to view and modify the generator, or\n- Add additional methods, properties, and overloads to the SDK by adding classes in the 'Customizations' folder of a project\n\n## Versioning\n\nFor more information on how we version see [Versioning](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/dev/Versioning.md).\n\n## Breaking Changes\n\nFor information about breaking changes see [Breaking Change Rules](https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/breaking-change-rules.md).\n\n## Debugging\n\nThe libraries shipped out of this repo have [source link](https://docs.microsoft.com/dotnet/standard/library-guidance/sourcelink#using-source-link) enabled. Source link allows for symbols to be dynamically loaded while debugging, which allows you to step into the Azure SDK source code. This is often helpful when trying to step into Azure.Core code, as it is a package reference for most libraries. To enable using source link with the Azure SDK libraries in Visual Studio, you will need to check off Microsoft Symbol Servers as one of your Symbol file locations. Additionally, make sure that \"Just My Code\" is **_NOT_** enabled.\n\n## Samples\n\n### Third-party dependencies\n\nThird party libraries should only be included in samples when necessary to demonstrate usage of an Azure SDK package; they should not be suggested or endorsed as alternatives to the Azure SDK.\n\nWhen code samples take dependencies, readers should be able to use the material without significant license burden or research on terms. This goal requires restricting dependencies to certain types of open source or commercial licenses.\n\nSamples may take the following categories of dependencies:\n\n- **Open-source** : Open source offerings that use an [Open Source Initiative (OSI) approved license](https://opensource.org/licenses). Any component whose license isn't OSI-approved is considered a commercial offering. Prefer OSS projects that are members of any of the [OSS foundations that Microsoft is part of](https://opensource.microsoft.com/ecosystem/). Prefer permissive licenses for libraries, like [MIT](https://opensource.org/licenses/MIT) and [Apache 2](https://opensource.org/licenses/Apache-2.0). Copy-left licenses like [GPL](https://opensource.org/licenses/gpl-license) are acceptable for tools, and OSs. [Kubernetes](https://github.com/kubernetes/kubernetes), [Linux](https://github.com/torvalds/linux), and [Newtonsoft.Json](https://github.com/JamesNK/Newtonsoft.Json) are examples of this license type. Links to open source components should be to where the source is hosted, including any applicable license, such as a GitHub repository (or similar).\n\n- **Commercial**: Commercial offerings that enable readers to learn from our content without unnecessary extra costs. Typically, the offering has some form of a community edition, or a free trial sufficient for its use in content. A commercial license may be a form of dual-license, or tiered license. Links to commercial components should be to the commercial site for the software, even if the source software is hosted publicly on GitHub (or similar).\n\n- **Dual licensed**: Commercial offerings that enable readers to choose either license based on their needs. For example, if the offering has an OSS and commercial license, readers can  choose between them. [MySql](https://github.com/mysql/mysql-server) is an example of this license type.\n\n- **Tiered licensed**: Offerings that enable readers to use the license tier that corresponds to their characteristics. For example, tiers may be available for students, hobbyists, or companies with defined revenue  thresholds. For offerings with tiered licenses, strive to limit our use in tutorials to the features available in the lowest tier. This policy enables the widest audience for the article. [Docker](https://www.docker.com/), [IdentityServer](https://duendesoftware.com/products/identityserver), [ImageSharp](https://sixlabors.com/products/imagesharp/), and [Visual Studio](https://visualstudio.com) are examples of this license type.\n\nIn general, we prefer taking dependencies on licensed components in the order of the listed categories. In cases where the category may not be well known, we'll document the category so that readers understand the choice that they're making by using that dependency.\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 2.828125,
          "content": "﻿<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <RepoRoot>$(MSBuildThisFileDirectory)</RepoRoot>\n    <RepoEngPath>$(MSBuildThisFileDirectory)eng</RepoEngPath>\n    <RepoSrcPath>$(RepoRoot)src</RepoSrcPath>\n    <RepoSdkPath>$(RepoRoot)src/SDKs</RepoSdkPath>\n    <IsLegacyMgmtProject Condition=\"'$(IsLegacyMgmtProject)' == '' and $(MSBuildProjectName.Contains('.Management.'))\">true</IsLegacyMgmtProject>\n    <ProjectStartsWithStandardName Condition=\"$(MSBuildProjectName.StartsWith('Azure.')) or $(MSBuildProjectName.StartsWith('Microsoft.'))\">true</ProjectStartsWithStandardName>\n    <ImportRepoCommonSettings Condition=\"'$(ImportRepoCommonSettings)' == '' and '$(ProjectStartsWithStandardName)' == 'true' and '$(IsLegacyMgmtProject)' != 'true'\">true</ImportRepoCommonSettings>\n  </PropertyGroup>\n\n  <!-- Setup default project properties -->\n  <PropertyGroup>\n    <Configuration Condition=\"'$(Configuration)' == ''\">Debug</Configuration>\n    <Platform Condition=\"'$(Platform)' == ''\">AnyCPU</Platform>\n    <PlatformName Condition=\"'$(PlatformName)' == ''\">$(Platform)</PlatformName>\n  </PropertyGroup>\n\n  <!-- Setup common output paths -->\n  <PropertyGroup>\n    <ArtifactsDir Condition=\"'$(ArtifactsDir)' == ''\">$(RepoRoot)artifacts\\</ArtifactsDir>\n    <ArtifactsObjDir>$(ArtifactsDir)obj\\</ArtifactsObjDir>\n    <ArtifactsBinDir>$(ArtifactsDir)bin\\</ArtifactsBinDir>\n    <ArtifactsPackagesDir>$(ArtifactsDir)packages\\$(Configuration)\\</ArtifactsPackagesDir>\n\n    <OutDirName Condition=\"'$(OutDirName)' == ''\">$(MSBuildProjectName)</OutDirName>\n\n    <BaseOutputPath Condition=\"'$(BaseOutputPath)' == ''\">$([System.IO.Path]::GetFullPath('$(ArtifactsBinDir)$(OutDirName)\\'))</BaseOutputPath>\n    <OutputPath Condition=\"'$(PlatformName)' == 'AnyCPU'\">$(BaseOutputPath)$(Configuration)\\</OutputPath>\n    <OutputPath Condition=\"'$(PlatformName)' != 'AnyCPU'\">$(BaseOutputPath)$(PlatformName)\\$(Configuration)\\</OutputPath>\n\n    <BaseIntermediateOutputPath Condition=\"'$(BaseIntermediateOutputPath)' == ''\">$([System.IO.Path]::GetFullPath('$(ArtifactsObjDir)$(OutDirName)\\'))</BaseIntermediateOutputPath>\n    <IntermediateOutputPath Condition=\"'$(PlatformName)' == 'AnyCPU'\">$(BaseIntermediateOutputPath)$(Configuration)\\</IntermediateOutputPath>\n    <IntermediateOutputPath Condition=\"'$(PlatformName)' != 'AnyCPU'\">$(BaseIntermediateOutputPath)$(PlatformName)\\$(Configuration)\\</IntermediateOutputPath>\n\n    <PackageOutputPath>$(ArtifactsPackagesDir)/$(MSBuildProjectName)</PackageOutputPath>\n\n    <!-- Used to help catch projects that use this property but don't end up importing our props below -->\n    <RequiredTargetFrameworks>import-required-properties</RequiredTargetFrameworks>\n  </PropertyGroup>\n\n  <Import Project=\"$(RepoEngPath)\\Directory.Build.Common.props\" Condition=\"'$(ImportRepoCommonSettings)' == 'true'\" />\n</Project>\n"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 0.5556640625,
          "content": "﻿<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup Condition=\"'$(IsTestProject)' == 'true' or '$(IsPerfProject)' == 'true' or '$(IsStressProject)' == 'true'\">\n    <AssemblyAttribute Include=\"System.Reflection.AssemblyMetadataAttribute\">\n      <_Parameter1>SourcePath</_Parameter1>\n      <_Parameter2>$(MSBuildProjectDirectory)</_Parameter2>\n    </AssemblyAttribute>\n  </ItemGroup>\n\n  <Import Project=\"$(RepoEngPath)\\Directory.Build.Common.targets\" Condition=\"'$(ImportRepoCommonSettings)' == 'true'\" />\n</Project>\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Microsoft\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 12.9091796875,
          "content": "NOTICES AND INFORMATION\nDo Not Translate or Localize\n\nThis software incorporates material from third parties. Microsoft makes certain\nopen source code available at https://3rdpartysource.microsoft.com, or you may\nsend a check or money order for US $5.00, including the product name, the open\nsource component name, and version number, to:\n\nSource Code Compliance Team\nMicrosoft Corporation\nOne Microsoft Way\nRedmond, WA 98052\nUSA\n\nNotwithstanding any other terms, you may reverse engineer this software to the\nextent required to debug changes to any libraries licensed under the GNU Lesser\nGeneral Public License.\n\n------------------------------------------------------------------------------\n\nThis file list any third-party libraries or other resources that may be\ndistributed under licenses different than the Azure SDK for .NET software.\n\nIn the event that we accidentally failed to list a required notice, please\nbring it to our attention by opening an issue.\n\nThe attached notices are provided for information only.\n\n// Copyright (c) .NET Foundation. All rights reserved.\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n   \nLicense notice for OpenTelemetry .NET (https://github.com/open-telemetry/opentelemetry-dotnet)\n----------------------------------------------------------------------------------------------\n\nCopyright 2023 OpenTelemetry Authors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NuGet.Config",
          "type": "blob",
          "size": 0.53515625,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <!-- Do not add any additional feeds if new packages are needed they need to come from nuget.org or our azure-sdk-for-net DevOps feed -->\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n    <add key=\"azure-sdk-for-net\" value=\"https://pkgs.dev.azure.com/azure-sdk/public/_packaging/azure-sdk-for-net/nuget/v3/index.json\" />\n  </packageSources>\n  <disabledPackageSources>\n    <clear />\n  </disabledPackageSources>\n</configuration>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.9150390625,
          "content": "# Azure SDK for .NET\n\n[![Packages](https://img.shields.io/badge/packages-latest-blue.svg)](https://azure.github.io/azure-sdk/releases/latest/dotnet.html) [![Dependencies](https://img.shields.io/badge/dependency-report-blue.svg)](https://azuresdkartifacts.blob.core.windows.net/azure-sdk-for-net/dependencies/dependencies.html) [![Dependencies Graph](https://img.shields.io/badge/dependency-graph-blue.svg)](https://azuresdkartifacts.blob.core.windows.net/azure-sdk-for-net/dependencies/dependencyGraph/dagre.html)\n\nThis repository is for active development of the Azure SDK for .NET. For consumers of the SDK we recommend visiting our [public developer docs](https://docs.microsoft.com/dotnet/azure/) or our versioned [developer docs](https://azure.github.io/azure-sdk-for-net).\n\n## Getting started\n\nTo get started with a library, see the README.md file located in the library's project folder. You can find these library folders grouped by service in the /sdk directory.\n\nFor tutorials, samples, quick starts, and other documentation, go to [Azure for .NET Developers](https://docs.microsoft.com/dotnet/azure/).\n\n## Packages available\nEach service might have a number of libraries available from each of the following categories:\n* [Client - New Releases](#client-new-releases)\n* [Client - Previous Versions](#client-previous-versions)\n* [Management - New Releases](#management-new-releases)\n* [Management - Previous Versions](#management-previous-versions)\n\n### Client: New Releases\n\nNew wave of packages that we are announcing as **GA** and several that are currently releasing in **preview**. These libraries follow the [Azure SDK Design Guidelines for .NET](https://azure.github.io/azure-sdk/dotnet/guidelines/) and share a number of core features such as HTTP retries, logging, transport protocols, authentication protocols, etc., so that once you learn how to use these features in one client library, you will know how to use them in other client libraries. You can learn about these shared features at [Azure.Core](https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/README.md).\n\nThese new client libraries can be identified by the naming used for their folder, package, and namespace. Each will start with `Azure`, followed by the service category, and then the name of the service. For example `Azure.Storage.Blobs`. \n\nFor a complete list of available packages, please see the [latest available packages](https://azure.github.io/azure-sdk/releases/latest/dotnet.html) page.\n\n> NOTE: If you need to ensure your code is ready for production we strongly recommend using one of the stable, non-preview libraries.\n\n### Client: Previous Versions\n\nLast stable versions of packages that are production-ready. These libraries provide similar functionalities to the preview packages, as they allow you to use and consume existing resources and interact with them, for example: upload a storage blob. Stable library directories typically contain 'Microsoft.Azure' in their names, e.g. 'Microsoft.Azure.KeyVault'. They might not implement the [guidelines](https://azure.github.io/azure-sdk/dotnet_introduction.html) or have the same feature set as the November releases. They do however offer wider coverage of services.\n\n### Management: New Releases\n\nA new set of management libraries that follow the [Azure SDK Design Guidelines for .NET](https://azure.github.io/azure-sdk/dotnet_introduction.html) and based on [Azure.Core libraries](https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/core/Azure.Core) are now in Public Preview. These new libraries provide a number of core capabilities that are shared amongst all Azure SDKs, including the intuitive Azure Identity library, an HTTP Pipeline with custom policies, error-handling, distributed tracing, and much more. You can find the list of new packages [on this page](https://azure.github.io/azure-sdk/releases/latest/dotnet.html). \n\nTo get started with these new libraries, please see the [quickstart guide here](https://github.com/Azure/azure-sdk-for-net/blob/main/doc/mgmt_preview_quickstart.md). These new libraries can be identified by namespaces that start with `Azure.ResourceManager`, e.g. `Azure.ResourceManager.Network` \n\n> NOTE: If you need to ensure your code is ready for production use one of the stable, non-preview libraries.\n\n### Management: Previous Versions\n\nFor a complete list of management libraries which enable you to provision and manage Azure resources, please check [here](https://azure.github.io/azure-sdk/releases/latest/all/dotnet.html). They might not have the same feature set as the new releases but they do offer wider coverage of services. Previous versions of management libraries can be identified by namespaces that start with `Microsoft.Azure.Management`, e.g. `Microsoft.Azure.Management.Network`\n\nDocumentation and code samples for these libraries can be found [here](https://azure.github.io/azure-sdk-for-net).\n\n## Need help?\n\n* For reference documentation visit the [Azure SDK for .NET API Reference](https://aka.ms/net-docs).\n* For tutorials, samples, quick starts, and other documentation, go to [Azure for .NET Developers](https://docs.microsoft.com/dotnet/azure/).\n* File an issue via [Github Issues](https://github.com/Azure/azure-sdk-for-net/issues/new/choose).\n* Check [previous questions](https://stackoverflow.com/questions/tagged/azure+.net) or ask new ones on StackOverflow using `azure` and `.net` tags.\n\n### Community\n\n* Chat with other community members [![Join the chat at https://gitter.im/azure/azure-sdk-for-net](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/azure/azure-sdk-for-net?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n### Reporting security issues and security bugs\n\nSecurity issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) <secure@microsoft.com>. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the [Security TechCenter](https://www.microsoft.com/msrc/faqs-report-an-issue).\n\n## We want your thoughts!\n\n### Feature Requests\n\nWhat features are important to you?  You can let us know by looking at our open [feature requests](https://github.com/Azure/azure-sdk-for-net/issues?q=is%3Aopen+label%3Afeature-request+sort%3Areactions-%2B1-desc) and sharing your thoughts by giving the issue a thumbs up or thumbs down.  (Note the list is sorted by number of thumbs up in descending order.)\n\n\n### Design Discussions\n\nWe would love to incorporate the community's input into our library design process. Here's a list of [design discussions](https://github.com/Azure/azure-sdk-for-net/labels/design-discussion) that we're currently having. Participate in the discussions by leaving your comments in the issue!\n\n## Contributing\nFor details on contributing to this repository, see the [contributing guide](https://github.com/Azure/azure-sdk-for-net/blob/main/CONTRIBUTING.md).\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit\nhttps://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-net%2FREADME.png)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6982421875,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.5 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/previous-versions/tn-archive/cc751383(v=technet.10)), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/msrc/pgp-key-msrc).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/msrc/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 2.3671875,
          "content": "# Support\n\n## How to file issues and get help  \n\n### Azure support tickets\n\nCustomers with an [Azure support plan](https://azure.microsoft.com/support/options/) can open an [Azure support ticket](https://azure.microsoft.com/support/create-ticket/).\n**We recommend this option if your problem requires immediate attention.**\n\n### GitHub issues\n\nWe use [GitHub Issues](https://github.com/Azure/azure-sdk-for-net/issues/new/choose) to track bugs, questions, and feature requests.\nGitHub issues are free, but **response time is not guaranteed.** See [GitHub issues support process](https://devblogs.microsoft.com/azure-sdk/github-issue-support-process/) for more details.\n\nTo ensure the relevance and manageability of our issue queue, we have an automated process that will close issues that are over two years old and have not been updated in the last 30 days. This measure is designed to help us respond to and resolve current issues more efficiently. We appreciate your understanding and cooperation in maintaining a focused and up-to-date issue tracking system.\n\n### Community resources\n- Take a look at the [Azure SDK blog](https://devblogs.microsoft.com/azure-sdk/).\n- Search for similar issues in [our GitHub repository](https://github.com/Azure/azure-sdk-for-net/issues)\n- Chat with other community members on [gitter](https://gitter.im/Azure/azure-sdk-for-net?source=orgpage)\n- Ask a question on [StackOverflow](https://stackoverflow.com/questions/tagged/azure-sdk-.net) and tag it with azure-sdk-.net\n- Share or upvote feature requests on [Feedback Page](https://feedback.azure.com/forums/34192--general-feedback).\n- Ask a question on [Twitter](https://twitter.com/AzureSDK)\n- Ask a question at [Microsoft Q&A](https://docs.microsoft.com/answers/products/azure?WT.mc_id=Portal-Microsoft_Azure_Support&product=all)\n- Ask a question at [Microsoft Tech Community](https://techcommunity.microsoft.com/t5/azure/ct-p/Azure)\n\n### Security bugs\nSecurity issues and bugs should be reported privately, via email, to the Microsoft Security Response Center(secure@microsoft.com). \nYou should receive a response within 24 hours. \nFurther information, including the MSRC PGP key, can be found in the [Security TechCenter](https://www.microsoft.com/msrc/faqs-report-an-issue?rtc=1)\n\n## Microsoft Support Policy\n\nPlease refer to [Azure SDK Support and Lifecycle information](https://azure.github.io/azure-sdk/policies_support.html)\n"
        },
        {
          "name": "build.proj",
          "type": "blob",
          "size": 0.244140625,
          "content": "<Project Sdk=\"Microsoft.Build.Traversal\">\n  <ItemGroup>\n    <ProjectReference Include=\"eng\\service.proj\">\n      <AdditionalProperties Condition=\"'$(Scope)' != ''\">Scope=$(Scope)</AdditionalProperties>\n    </ProjectReference>\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "eng",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.13671875,
          "content": "{\n  \"msbuild-sdks\": {\n    \"Microsoft.Build.Traversal\": \"3.2.0\"\n  },\n  \"sdk\": {\n    \"version\": \"8.0.100\",\n    \"rollForward\": \"feature\"\n  }\n}\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 0.654296875,
          "content": "{\n  \"name\": \"azure-sdk-for-net\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"azure-sdk-for-net\",\n      \"version\": \"1.0.0\",\n      \"dependencies\": {\n        \"autorest\": \"^3.7.1\"\n      }\n    },\n    \"node_modules/autorest\": {\n      \"version\": \"3.7.1\",\n      \"resolved\": \"https://registry.npmjs.org/autorest/-/autorest-3.7.1.tgz\",\n      \"integrity\": \"sha512-6q17NtosQZPqBkIOUnaOPedf3PDIBF7Ha1iEGRhTqZF6TG2Q/1E3ID/D+ePIIzZDKvW01p/2pENq/oiBWH9IGQ==\",\n      \"hasInstallScript\": true,\n      \"bin\": {\n        \"autorest\": \"entrypoints/app.js\"\n      },\n      \"engines\": {\n        \"node\": \">=12.0.0\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.103515625,
          "content": "{\n  \"name\": \"azure-sdk-for-net\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"autorest\": \"^3.7.1\"\n  }\n}\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "swagger_to_sdk_config.json",
          "type": "blob",
          "size": 0.6845703125,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/lmazuel/swagger-to-sdk/master/swagger_to_sdk_config.schema.json\",\n  \"initOptions\": {\n    \"initScript\": {\n      \"path\": \"pwsh ./eng/scripts/Automation-Sdk-Init.ps1\"\n    }\n  },\n  \"meta\": {\n    \"autorest_options\": {\n      \"version\": \"2.0.4421\",\n      \"csharp\": \"\",\n      \"reflect-api-versions\": \"\",\n      \"license-header\": \"MICROSOFT_MIT_NO_VERSION\",\n      \"sdkrel:csharp-sdks-folder\": \"./sdk\",\n      \"use\": \"@microsoft.azure/autorest.csharp@2.3.101\"\n    },\n    \"advanced_options\": {\n      \"create_sdk_pull_requests\": true,\n      \"sdk_generation_pull_request_base\": \"integration_branch\",\n      \"main_branch\": \"master\"\n    },\n    \"version\": \"0.2.0\"\n  }\n}\n"
        }
      ]
    }
  ]
}