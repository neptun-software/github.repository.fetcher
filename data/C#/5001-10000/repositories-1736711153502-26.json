{
  "metadata": {
    "timestamp": 1736711153502,
    "page": 26,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bchavez/Bogus",
      "stars": 8986,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4609375,
          "content": "root=true\n\n[*.cs]\ntrim_trailing_whitespace=true\ninsert_final_newline=true\n\n[*]\nindent_style = space\nindent_size = 3\n\n[*.{fs,fsx}]\nindent_style = space\nindent_size = 4\n\n[*.{md,markdown,json,js,csproj,fsproj,targets}]\nindent_style = space\nindent_size = 2\n\n\n# Verify settings\n[*.{received,verified}.{txt,xml,json}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4775390625,
          "content": "# Auto detect text files and perform LF normalization\n# http://davidlaing.com/2012/09/19/customise-your-gitattributes-to-become-a-git-ninja/\n* text=auto\n\n*.cs     diff=csharp\n\n# Custom for Visual Studio\n*.sln text eol=crlf merge=union \n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.373046875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# custom\n**.lock.json\n*.history.nuspec\n**/.vs/**\n**/.idea/**\n/Source/packages**\npaket.lock\n.fake\n.store\n.paket/paket.exe\n/Source/.paket/**\n__test\n\n/__package\n/__compile\n/Source/Bogus.snk\n\nSource/Builder/node_modules/**\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n**/packages/**\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n!packages/*/build/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n/nuget.push.bat\n\n/Source/Benchmark/BenchmarkDotNet.Artifacts/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.30078125,
          "content": "[submodule \"Source/fakerjs\"]\n\tpath = Source/fakerjs\n\turl = https://github.com/faker-js/faker.js.git\n[submodule \"Source/hashids\"]\n\tpath = Source/hashids\n\turl = https://github.com/ullmark/hashids.net.git\n[submodule \"Source/speakingurl\"]\n\tpath = Source/speakingurl\n\turl = https://github.com/pid/speakingurl.git\n"
        },
        {
          "name": ".nuke",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5634765625,
          "content": "New Features\n------------\nBogus a superset of **faker.js**'s features. Adding additional features are welcome. New features and additional APIs can be added so long as we maintain semantic API compatibility with **faker.js** and maintain compatibility with **faker.js** locale data.\n\nContributing\n------------\nHere are some helpful guidelines to keep in mind when contributing.  While following them isn't absolutely required, it does help everyone to accept your pull-requests with maximum awesomeness.\n\n* :heavy_check_mark: **CONSIDER** adding a unit test if your PR resolves an issue or adds features.\n* :heavy_check_mark: **DO** add XML comment documentation to new API calls along parameter documentation.\n* :heavy_check_mark: **DO** reference any GH issues in the PR description.\n* :heavy_check_mark: **DO** keep pull requests small so they can be easily reviewed. \n* :heavy_check_mark: **DO** keep the PR/change-set strictly focused on a specific change and on topic (ie: don't include code re-formatting). If you'd like to change something else off-topic, feel free to set up a new GH issue or PR for those off-topic changes.\n* :heavy_check_mark: **DO** make sure unit tests pass.\n* :x: **AVOID** changing existing code formatting (spaces, braces, tabs, new lines).\n* :x: **AVOID** breaking the continuous integration build. \n* :x: **AVOID** Breaking compatibility with **faker.js** locale data.\n* :x: **AVOID** Adding new locales to Bogus. New locales should be added upstream to **faker.js**. [See this wiki page for creating locales](https://github.com/bchavez/Bogus/wiki/Creating-Locales)."
        },
        {
          "name": "Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "Examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 37.166015625,
          "content": "## v35.6.1\nRelease Date: 2024-09-02\n* PR 560: Ensure Belgian National Numbers has padded checksum. Thanks @vyruz1986!\n\n## v35.6.0\nRelease Date: 2024-04-27\n* PR 556: Remove obsolete/non-working LoremPixel image service. `Images.LoremPixelUrl()` is removed. Thanks @marijnz0r!\n* PR 557: Added `Bogus.Extensions.Belgium` extension methods below. Thanks @vyruz1986!\n* Added `f.Person.NationalNumber()` - Rijksregisternummer / Numéro Nationale\n\n## v35.5.1\nRelease Date: 2024-04-27\n* PR 538: Fixes Invalid Costa Rica IBAN format. Thanks @dangerman!\n\n## v35.5.0\nRelease Date: 2024-03-09\n* PR 500: Allows locally set time references for Date calculations instead of global statics. See Faker[T].UseDateTimeReference(), Faker.DateTimeReference, and DataSets.Date.LocalSystemClock. Thanks @garcipat!\n\n## v35.4.1\nRelease Date: 2024-03-02\n* PR 529: XML Docs: Add inclusive / exclusive number ranges documentation for Randomizer. Thanks @Mitchman215!\n* PR 535: Fix gender-digit for Swedish Personnummer. Thanks @LarsBergqvist!\n\n## v35.4.0\nRelease Date: 2024-01-14\n* PR 488: Added `Bogus.Extensions.Poland` extension methods below. Thanks Mik1mak!\n* Added `f.Person.Pesel()` - Number of Powszechny Elektroniczny System Ewidencji Ludności (PESEL)\n* Added `f.Company.Nip()` - Numer identyfikacji podatkowej (NIP)\n* Added `f.Company.Regon()` - Number of Rejestr Gospodarki Narodowej (REGON)\n* PR 427: Fix incorrect generation for Finnish social security number. Thanks @roeyskoe!\n* PR 431: Fix VIN can be longer than 17 character length. Thanks skwasjer!\n* PR 421: Add strict VIN charset without I, O, and Q according to NHTSA standard. Thanks skwasjer!\n* PR 414: Added `f.Person.Samordningsnummer()` extension method in `Bogus.Extensions.Sweden`. Swedish coordination number. Thanks aschan!\n\n## v35.3.2\nRelease Date: 2024-01-13\n* PR 466: Added `f.Person.Cnp()` extension method in `Bogus.Extensions.Romania`. Generates Romanian Personal Identification number (CNP). Thanks totpero!\n\n## v35.3.1\nRelease Date: 2024-01-12\n* PR 510: Added `f.Finance.VatNumber()` extension method in `Bogus.Extensions.UnitedKingdom`. Generates a UK compatible VAT registration number. Thanks p1971!\n\n## v35.3.0\nRelease Date: 2024-01-01\n* PR 496: Improves Denmark CPR number generator with checksum validation. Thanks @MunroRaymaker and @NielsPilgaard!\n\n## v35.2.0\nRelease Date: 2023-12-26\n* Issue 497: PR 522 - Better Xamarin AOT compatibility. Renames/removes diacritics from API method names Finland: Henkilötunnus -> Henkilotunnus; Norway: Fødselsnummer -> Fodselsnummer.\n\n## v35.0.1\nRelease Date: 2023-12-11\n* PR 513: Update Swedish `sv` locale; first/last names. Thanks @EBD232!\n\n## v34.0.2\nRelease Date: 2022-03-27\n* PR 406, 415: Improve XML documentation. Thanks @danielwagn3r, @DanteDeRuwe\n* PR 413: Change access modifier of `Randomizer.localSeed` to protected. Thanks @davermaltby  \n\n## v34.0.1\nRelease Date: 2021-11-22\n\n* PR 399: Add support for .NET 6 DateOnly and TimeOnly random generations in Faker.Date. Thanks @prasadtelkikar!\n* Moved Faker[T] extensions .OrNull() and .GenerateBetween() into main Bogus namespace.\n* C# 10 and VS 2022 build tooling.\n\n## v33.1.1\nRelease Date: 2021-08-29\n\n* PR 390: Default Binder changed to allow use of private property setters in base classes. Thanks @thomaslevesque!\n\n## v33.0.2\nRelease Date: 2021-02-21\n\n* PR 359: Add `Bogus.Person.Personnummer()` Swedish national identity number\n\n## v33.0.1\nRelease Date: 2021-02-07\n\n* Locale data parity with faker-js@5478d65.\n* `nep` locale renamed to `ne`. \n* `de` locale; `Date` dataset changed.\n* `es` locale; gender names added.\n* `fr` locale; `Date` dataset changed.\n* `nb_NO` locale; gender names added.\n* `nl` locale; `Address`, `Commerce`, `Date`, `Hacker`, `Internet` datasets changed; gender names added. \n* `pt_BR` locale; gender names added.\n* `tr` locale; gender names added.\n* `vi` locale; gender names added. `Date`, `Lorem`, datasets changed.\n* Added `Internet.Port()`; generate port numbers from 1 to 65535.\n\n## v32.1.1\nRelease Date: 2021-01-31\n\n* Minor improvements to XML docs.\n* Better exception messages around empty collections and empty arrays.\n* PR 339: Fix null reference exception when calling StrictMode(true) on Faker<T> with no rules.\n* PR 352: Fix first name generation for locales that don't support gender names.\n\n## v32.0.2\nRelease Date: 2020-12-12\n\n* Issue 342: Use realistic `pt_BR` city names.\n\n## v32.0.1\nRelease Date: 2020-11-28\n\n* Issue 336: Fixed `Internet.Avatar()` 403 Forbidden URLs. AWS S3 bucket hosting uifaces.com avatars was disabled. Avatars are now decentrally hosted on IPFS globally and retrieved from Cloudflare's IPFS gateway.\n* To help host, pin root CID: Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye\n* Browse: https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/\n* Details: https://github.com/bchavez/Bogus/issues/336\n\n## v31.0.3\nRelease Date: 2020-10-03\n\n* Issue 328, 327: Fixed `pt_BR` locale where `Address.City()` threw `ArgumentOutOfRangeException`.\n\n## v31.0.2\nRelease Date: 2020-09-13, UNPUBLISHED FROM NUGET\n\n* Ensures Bogus Premium datasets load with new `DataSet.Get(category, path)` overload.\n\n## v31.0.1\nRelease Date: 2020-09-13, UNPUBLISHED FROM NUGET\n\n* Locale data parity with faker-js@91dc8a3.\n* Added `Music` dataset with `.Genre()` method.\n* Added `Date.TimeZoneString()`.\n* Added new Finnish `fi` locale.\n* Added new Hrvatski `hr` locale.\n* `cz` locale updated.\n* `en` locale updated.\n* `en_IE` locale updated.\n* `en_IND` locale updated.\n* `fa` locale updated.\n* `fr` locale updated.\n* `ja` locale updated.\n* `pl` locale updated.\n* `pt_BR` locale updated.\n* `ru` locale updated.\n* `sv` locale updated.\n* `vi` locale updated.\n* `zh_CN` locale updated.\n\n## v30.0.4\nRelease Date: 2020-08-15\n\n* Issue 319: The `Random.Decimal()` implementation reverted to previous v29 implementation. Avoids arithmetic `OverflowException` when calling `Random.Decimal(0, decimal.MaxValue)`. The v30 implementation moved to `Bogus.Extensions` namespace as `Random.Decimal2()` which can generate more decimal precision.\n\n## v30.0.3\nRelease Date: 2020-08-13, UNPUBLISHED FROM NUGET\n\n* Added `f.Address.CountryOfUnitedKingdom()` extension method in `Bogus.Extensions.UnitedKingdom`.\n\n## v30.0.2\nRelease Date: 2020-08-05, UNPUBLISHED FROM NUGET\n\n* Deterministic sequences may have changed.\n* Promoted v30.0.1-beta-4 to v30.0.2 release.\n\n## v30.0.1-beta-4\nRelease Date: 2020-07-23\n\n* Change credit card `CheckDigitExtension` methods to public\n\n## v30.0.1-beta-3\nRelease Date: 2020-06-29\n\n* Issue 307: Fixed `Internet.UserAgent()` sometimes generating invalid user agent strings that could not be parsed by `System.Net.Http.HttpRequestMessage.Headers`.\n\n## v30.0.1-beta-2\nRelease Date: 2020-06-20\n\n* Added `Finance.Litecoin()`.\n* Added `Commerce.ProductDescription()`.\n* Add PlaceIMG image service. `Image.PlaceImgUrl()`.\n* Data parity with faker.js. Deterministic sequences may have changed.\n* New `en_NG` Nigerian locale.\n* `en` updated.\n* `nl_BE` updated.\n* `de` updated.\n* `ru` updated.\n* `zh_CN` updated.\n* `zh_TW` updated.\n* `ar` updated. \n* `cz` updated.\n* `es_MX` updated.\n* `sk` updated.\n* `it` updated.\n\n## v30.0.1-beta-1\nRelease Date: 2020-06-14\n\n* PR 300: `Random.Number()` now inclusive of `max: int.MaxValue`.\n* PR 300: `Random.Even()` better random distribution and range checking.\n* PR 300: `Random.Odd()` better random distribution and range checking.  \n* PR 300: `Random.Int()` bug fixed where `.Int()` may not return `int.MaxValue`.\n* PR 300: `Random.Decimal()` with greater decimal precision.\n* Deterministic values may have changed.\n* Big thank you to @logiclrd for PR 300!\n\n## v29.0.2\nRelease Date: 2020-04-11\n\n* Minor update to `ru` locale data. Two `ru` city names could appear as one. \n\n## v29.0.1\nRelease Date: 2020-02-10\n\n* Data parity with faker.js. Deterministic sequences using `Internet.Avatar()` may have changed.\n* Add support for .snupkg NuGet Symbol Server Packages via SourceLink.\n* Added Randomizer.EnumValues() that makes selecting a subset of enum values easier.\n* Modified `.OrNull(f)` extension method signatures for type-safe with nullable primitive types, structs, and reference types via `in` parameter to avoid ambiguous calls.\n\n## v28.4.4\nRelease Date: 2019-12-10\n\n* PR 272: Add extension method for generating Norwegian national identity numbers. `Person.Fødselsnummer()`. Thanks @mika-s!\n\n## v28.4.3\nRelease Date: 2019-12-03\n\n* Issue 271: Minor bug fix in Brazil `Person.Cpf()` extension method. Previously, only the first call to `Person.Cpf(includeFormatSymbols)` respected the `includeFormatSymbols` parameter due to the final result being saved in `Person` context. `Person.Cpf()` now respects the `includeFormatSymbols` parameter after subsequent repeat calls to `Cpf()` with the same `Person`. Thanks for testing @ArthNRick!\n\n## v28.4.2\nRelease Date: 2019-11-30\n\n* PR 269: Adds `includeFormatSymbols` parameter to include or exclude formatting characters for Brazil `Person.Cpf()` and `Company.Cnpj()` extension methods.\n\n## v28.4.1\nRelease Date: 2019-10-14\n\n* Issue 260: Improved social security number (SSN) generation that should pass basic validation by avoiding invalid SSN ranges. Note: Deterministic SSNs generated with `Person.Ssn()` will change.\n* Issue 252: `Internet.Ip()` now avoids generating IP addresses with a leading zero. For example, Bogus will not generate an IP address with a leading zero like 0.1.2.3. Note: Deterministic IPs generated with `Internet.Ip()` will change.\n* PR 261: Added `Internet.IpAddress()`, `Internet.Ipv6Address()`, `Internet.IpEndPoint()`, and `Internet.Ipv6EndPoint()`.\n* Issue 258: Add `Internet.UrlRootedPath()` to generate random `/foo/bar` paths.\n* Added `Internet.UrlWithPath(fileExt:\".txt\")` fileExt extension parameter to generate URLs with a specific file extension.\n\n## v28.3.2\nRelease Date: 2019-10-04\n\n* PR 259: Fixes `.GenerateForever(ruleset)` to use ruleset parameter when supplied as argument. Thanks @StanleyGoldman!\n\n## v28.3.1\nRelease Date: 2019-09-20\n\n* Issue 255 / PR 256: Allows interfaces with `Faker<T>` using `Faker<IFoo>.CustomInstantiator(f => new Foo())`. Thanks Rowland!\n\n## v28.2.1\nRelease Date: 2019-09-10\n\n* Added `Faker<T>.RuleFor(string, (f, t) => )` overload.\n* Internal re-factoring `.RuleFor` overload logic. Simplified overload call chain.\n* Internal `Faker<T>.RuleForInternal()` renamed to `Faker<T>.AddRule()`\n\n## v28.1.1\nRelease Date: 2019-09-09\n\n* Issue 253, PR 254: New rule overload for `Faker<T>.RuleFor('string',...)`. Helps cases that require rules for protected or hidden members of `T`.\n\n## v28.0.3\nRelease Date: 2019-08-28\n\n* Issue 249: Fixed `Internet.Url()` including spaces in domain names for `pt_BR` locale or any locale with compound first names that may contain spaces. Thanks RodrigoRodriguesX10!\n* PR 241: General code quality improvements in `DataSets.System`. Better XML docs and lower array allocations. Thanks bartdebever!\n* PR 245: XML doc improvements to `DataSets.Lorem`. Thanks bartdebever! \n\n## v28.0.2\nRelease Date: 2019-07-07\n\n* PR 235: Added `Bogus.DataSets.Vehicle.GbRegistrationPlate()` in `Bogus.Extensions.UnitedKingdom` extension namespace to generate GB registration plates. Thanks @colinangusmackay.\n\n## v28.0.1\nRelease Date: 2019-07-02\n\n* BREAKING: Deterministic sequence values may have changed for fake email addresses derived from `Internet.Email()` or `Internet.UserName()` in locales other than `en`.\n* Issue 229: Adds `Finance.Iban(countryCode)` ISO3166 country code parameter. Allows generating IBAN codes for specific countries. The country code must be a supported otherwise an exception is thrown.  \n* Issue 225: Better support for transliteration of international Unicode characters to US-Latin/Roman ASCII character sets. `Internet.Email()` and `Internet.UserName()` are more respectful of specified locale using character transliteration.\n* Added `.Transliterate()` string extension method in `Bogus.Extensions` namespace.\n* Added `Internet.UserNameUnicode()` that preserves Unicode characters in user names.\n* Minor performance improvement to `Utils.Slugify` using compiled Regex.\n* Issue 232: Adds `.OrNull[T]() where T : struct` overload which makes it easier to work with nullable types without type casting.\n* Added `defaultValue` parameter to `.OrDefault(f, weight, defaultValue)` that can default to a different value than the `default` keyword.\n\n\n## v27.0.1\nRelease Date: 2019-05-02\n\n* Issue 218: Fixed bug that prevented global static `Faker.DefaultStrictMode` from working.\n* Issue 210: Added `Randomizer.Utf16String` that generates technically valid Unicode with paired high/low surrogates.\n* Added `placeholder.com` image service.\n\n## v26.0.2\nRelease Date: 2019-03-22\n\n* New `Person(seed)` constructor for seeding person objects by integer. Thanks @sgoguen!\n* Fixed `Person.DateOfBirth` not using `Date.SystemClock` as 'now' reference.\n\n## v26.0.1\nRelease Date: 2019-02-26\n\n* Data and feature parity with faker.js @ d3ce6f1\n* New `Vehicle` data set added.\n* `en_IND` state abbreviations and state names updated.\n* `en_CA`, `fr_CA` improved Canadian postal codes.\n* `pt_PT` locale updated with new and changed data.\n* `en` company names updated.\n* `pt_PT` locale updated.\n* Minor bug in `Date.Weekday` and `Date.Month` that could cause locale weekday/month values to default to `en`.\n* Note: deterministic sequences may have changed.\n\n## v25.0.4\nRelease Date: 2019-01-17\n\n* PR 194: Update Dutch `nl` locale with extra `name.first_name`, `address.street_suffix`, and `company.suffix`.\n\n## v25.0.3\nRelease Date: 2019-01-06\n\n* Added `f.Images.LoremFlickrUrl()` (https://loremflickr.com) image service.\n* Issue 193: Turkish :tr: state/providence names added to 'tr' locale.\n\n## v25.0.2\nRelease Date: 2018-12-11\n\n* Issue 192: Fixed IndexOutOfRangeException when `Company.CompanyName()` is used with `az` locale.\n\n## v25.0.1\nRelease Date: 2018-11-27\n\n* Add SourceLink compatibility with Visual Studio 2017.\n* Obsoleted **LoremPixel.com** `Image` categories. The image service is usually down or very slow. Consider using `Images.PicsumUrl()` as a replacement. This version is an obsolete-warn, next release will have Image category APIs removed.\n\n## v24.3.1\nRelease Date: 2018-11-03\n\n* `tr` - Turkish locale first/last names updated. Lorem data set updated. Thanks ahmetcanaydemir!\n* Added `f.Image.PicsumUrl` (https://picsum.photos) service as faster alternative to Lorem Pixel. \n\n## v24.3.0\nRelease Date: 2018-10-02\n\n* Data / feature parity with faker.js @ 9dd5a52\n* `af_ZA` - New South Africa (Afrikaans) locale added.\n* `zu_ZA` - New South Africa (Zulu) locale added.\n* `en_ZA` - South Africa (English) locale updated\n* `ru` - Russian locale updated.\n* `id_ID` - Indonesia locale updated.\n* `es` - Spanish locale updated.\n* `f.Images.DatUri` now accepts an HTML color parameter.\n* PR 180: Resolved Turkish Culture `.ToLower` causing invalid JSON dataset path `.ToLowerInvariant` now used. \n\n## v24.2.0\nRelease Date: 2018-09-27\n\n* Issue 179: Fixed regression introduced in 23.0.3 that forbid setting of internal/non-public members of `T` in when `Faker<T>` is used.\n\n## v24.1.0\nRelease Date: 2018-09-26, UNPUBLISHED FROM NUGET\n\n* Added `nullWeight` parameter to `.OrNull()` extension method for weighted generation of null values.\n* Added new `.OrDefault()` extension method. Thanks @anorborg!\n\n## v24.0.0\nRelease Date: 2018-09-26, UNPUBLISHED FROM NUGET\n\n* BREAKING: Deterministic values may have changed. Parity with **faker.js** @ 07f39bd3.\n* `en_ZA` - South Africa (English) locale added.\n* `fr_CH` - French (Switzerland) locale added.\n* `pl` locale \"phone numbers\" updated.\n* `sv` locale \"names\" section updated.\n* `en`, `de`, `de_AT` \"names\" section updated.\n* Added `f.Commerce.Ean8` EAN-8 product barcode number generator.\n* Added `f.Commerce.Ean13` EAN-13 product barcode number generator.\n\n## v23.0.3\nRelease Date: 2018-08-29, UNPUBLISHED FROM NUGET \n\n* PR 170: Faster `Faker[T].Generate()` with setter cache. Approx 1.7x speedup. Thanks Mpdreamz!\n\n## v23.0.2\nRelease Date: 2018-08-13\n\n* BREAKING CHANGE: Deterministic sequence values may have changed. Unit tests expecting specific values may be different if `Bogus.Person` is used.\n* Issue 168: Added `Bogus.Person.Address.State` field.\n* Issue 139: Added `Date.SystemClock` static property for setting global time Bogus uses for date calculations.\n* Issue 169: `Date.Weekday()` should return a weekday not a month.  \n\n## v22.3.2\nRelease Date: 2018-07-18\n\n* Added `f.Random.Guid()` for better GUID discoverability.\n* PR 164: Added new Tax ID extensions `Person.Nif()` and `Company.Nipc()` for Portugal. Thanks JoseJr!  \n\n## v22.3.1\nRelease Date: 2018-07-05\n\n* PR 159: Add UK National Insurance Number `f.Finance.Nino()` in `Bogus.Extensions.UnitedKingdom`. Thanks mortware!\n* PR 160: `DateTimeOffset` support added to `f.Date` dataset. Methods are suffixed by \"Offset\". IE: `f.Date.SoonOffset`. Thanks Simon!\n* Added `refDate` parameter to `f.Date.Soon` and `f.Date.Recent`.\n* `f.Date.Between(start, end)` now respects `DateTimeKind.Utc`.\n\n## v22.2.1\nRelease Date: 2018-06-29\n\n* PR 153: Possible breaking changes: Minor typo & spelling corrections made to some parameter names. Thanks for the corrections Simon!\n\n## v22.1.4\nRelease Date: 2018-06-26\n\n* PR 151: Added `Bogus.Distributions.Gaussian` namespace for numerical Normal Distribution generated values! Thanks codersg! \n* Added `uniqueSuffix` parameter to `Internet.Email()` to help with unique email constraints.\n \n## v22.1.3\nRelease Date: 2018-06-14\n\n* PR 149: Added new Arabic 'ar' locale. Thanks Saied!\n* PR 148: Fixed `.FullName()` for locales where both first/last name have genders. Thanks binarycode!\n\n## v22.1.2\nRelease Date: 2018-05-29\n\n* Improved XML documentation comments on `Faker[T]` API.\n\n## v22.1.1\nRelease Date: 2018-05-20\n\n* PR 144: Argument support for mustache handlebars. Example: `{{name.firstname(Male)}}`\n* Using **C# 7.3** generic `Enum` constraints for methods that only accept enums. Example: `f.PickRandom<Enum>()`.\n\n## v22.0.9\nRelease Date: 2018-05-17\n\n* Issue 143: Fixed rare case when `f.IndexGlobal` could be zero twice at start of generation.\n* Fixed typo in XML docs.\n\n## v22.0.8\nRelease Date: 2018-04-09\n\n* New `Company.Ein()` to generate employer identification numbers.\n* Preparing release of extended data sets for Bogus.\n\n## v22.0.7\nRelease Date: 2018-04-01\n\n* New `Internet.Color()` format options: CSS `rgb(...)` and delimited RGB.\n* New `System.AndroidId()` to generate GCM registration ID.\n* New `System.ApplePushToken()` to generate a random Apple Push Token.\n* New `System.BlackBerryPin()` to generate a random Black Berry PIN.\n* New `Randomizer.Hash()` to generate random hashes of specified length.\n* New `Randomizer.String2()` to generate random strings with specified character sets.\n\n## v22.0.6\nRelease Date: 2018-03-29\n\n* Added `Randomizer.String` method to generate strings. Uses `Chars()` method.\n* PR 136: Improve speed of `DataSet.ParseTokens()`. Thanks @danij!\n\n## v22.0.5\nRelease Date: 2018-03-02\n\n* Bogus now throws exceptions for locales it doesn't recognize. Improves developer experience.\n* New extension method `.ToBogusLocale()` on `System.Globalization.CultureInfo` to help translate from **.NET** locale codes to **Bogus** locale codes.\n\n## v22.0.3\nRelease Date: 2018-02-27\n \n* Generate more realistic Bitcoin addresses.\n* New extension method `Faker<T>.GenerateBetween(min, max)` that generates N objects between `min` and `max`. Located in `Bogus.Extensions`. N should be considered non-deterministic but technically depends on the parameters each time this extension method was called. \n* Added `Lorem.Paragraphs(min, max)` overload.\n* Added improved XML doc comments and parameter names on `Lorem.Paragraph`.\n* UK extension method `.ShortCode()` renamed to `.SortCode()` as originally intended.\n* Marked `DataSet.Get/.GetObject/BObject` methods as `protected internal`. Reducing API surface noise.\n* Added new `.OrNull` in `Bogus.Extensions` to help create randomly null values. Example: `.RuleFor(x=>x.Prop, f=>f.Random.Word().OrNull(f))`.\n* New groundwork for extending Bogus with premium (paid) data sets and tooling.\n\n## v22.0.2\nRelease Date: 2018-01-05\n\n* Issue 121: Fixes the inability to `.Ignore(...)` a property or field after a rule had already been set.\n\n## v22.0.1\nRelease Date: 2017-12-23\n\n* Issue 120: `.Generate(n)` now returns `List<T>` instead of `IList<T>`.\n* Added `f.Address.CountryCode()` ISO 3166-1 alpha-3 country code generator.\n* New `Bogus.Extensions.Extras` namespace for generally useful helper methods.\n* Added `Finance.CreditCardNumberObfuscated()` extension to `Bogus.Extensions.Extras` namespace.\n* Moved credit card `CheckDigit()` extensions to `Bogus.Extensions.Extras` namespace. \n\n## v21.0.5\nRelease Date: 2017-12-16\n\n* Better error support.\n* Added `Person.FullName` field.\n* Allowed `Faker<T>.FinishWith` to be called multiple times. Last call wins.\n\n## v21.0.4\nRelease Date: 2017-12-13\n\n* Fixed `f.Image` URL generation.\n\n## v21.0.2 \n* Re-enabled **.NET Standard 1.3** targeting.\n* Added `Gender` field to `Person`. Deterministic sequences may have changed.\n* Added `Randomizer.Bool(weight)` to generate weighted boolean values of true.\n* Italian `CodiceFiscale()` extension method added. Extends `Person` and `Finance`.\n\n## v20.0.2\nRelease Date: 2017-11-06\n\n* Fixed Issue 102: `f.Random.Uuid()` is now deterministic based on global or local seed.\n\n## v20.0.1\nRelease Date: 2017-11-04\n\n* Added `Faker<T>.Clone()`: Clones internal state of a `Faker<T>` and allows for complex faking scenarios and rule combinations.\n* Added `Faker<T>.UseSeed(n)`: Allows you to specify a localized seed value on a `Faker<T>` instead of a global static `Randomizer.Seed`.\n* Stronger `Seed` determinism for multi-threaded scenarios.\n\n## v19.0.2\nRelease Date: 2017-11-01\n\n* Fixed #99: Possible threading issue that can cause `System.ArgumentException`.\n\n## v19.0.1\nRelease Date: 2017-10-26, UNPUBLISHED FROM NUGET\n\n* Using new BSON binary data format for locales.\n* Removed dependency on Newtonsoft.Json!\n* Locale Updates - \n* `fr`: new street address prefixes.\n* `fa`: new street addresses.\n* `pl`: removed 2008 value from city.\n* `en`: new gender first names\n* New Dutch (Belgium) `nl_BE` locale.\n* New Romanian `ro` locale.\n* Added `f.Finance.RoutingNumber` - Generates an ABA routing number with valid check digit.\n* Added `Faker.GenerateForever` that returns `IEnumerable<T>` with unlimited generated items when iterated over.\n* Added United Kingdom extension method to generate bank ShortCodes on `f.Finance.ShortCode()`.\n* Re-ordered adjective and buzz in the `f.Company.Bs` for a correct gramatics.\n* Added `f.Address.Direction`. Generates cardinal or ordinal directions.\n* Added `f.Address.CardinalDirection`. Generates \"North\", \"South\", etc.\n* Added `f.Address.OrdinalDirection`. Generates \"Northeast\", \"Southwest\", etc.\n\n## v18.0.2\nRelease Date: 2017-09-14\n\n* Issue 86: Removed diacritic mark/accents (á, í, ó, ú, etc) from generated email addresses and user names.\n* Added `string.RemoveDiacritics` helper method.\n\n## v18.0.1\nRelease Date: 2017-09-13\n\n* Fixed bug in Finland's `f.Person.Henkilötunnus` personal identity code generator that sometimes produced 11 characters.\n* Added `f.Finance.Ethereum`. Generate an Ethereum address.\n* Added `f.Finance.CreditCardCvv`. Generate a random credit card CVV number.\n* Improved `f.Finance.CreditCardNumber`. Generate a random credit card number.\n* Added `f.Random.Hexadecimal`. Generates a random hexadecimal string.\n* Added `f.System.DirectoryPath`. Generates a random directory path.\n* Added `f.System.FilePath`. Generates a random file path.\n* Added `f.Date.Soon`. Generates a date and time that will happen soon.\n* Added `f.Random.ArrayElements`. Gets a random subset of an array.\n* Added `f.Random.ListItems`. Gets a random subset of a list.\n* Added `f.Company.Cnpj` extension method for Brazil. Generates Brazilian company document.\n* Improved `f.PhoneNumbers`. More realistic US phone numbers.\n* Improved `f.Address.Latitude/Longitude` with min and max parameters.\n* Minimum for `f.Commerce.Price` is now $1.00 (not zero).\n* Reduced assembly size by removing redundant locale data.\n* Locale updates:\n* `en_AU` - Update Australian postcode ranges.\n* `en_IND` - Indian postcodes are always numeric.\n* `ru` - Word corrections.\n\n## v17.0.1\nRelease Date: 2017-08-24\n\n* Migration to **.NET Standard 2.0**.\n\n## v16.0.3\nRelease Date: 2017-08-24\n\n* With additional overloads for `.PickRandom(IList)` and `.PickRandom(ICollection)` we can now add `.PickRandom(\"cat\", \"dog\", \"fish\")` back to the API. \n\n## v16.0.2\nRelease Date: 2017-08-23\n\n* BREAKING CHANGE: `Faker.Generate(n)` now calls `.ToList()` under the hood to escape LINQ deferred execution. Remembering to call `.ToList()` after `.Generate(n)` was a sticking point for new users writing test assertions on generated values. Please do not call `Faker.Generate(n).ToList()` as it would execute `.ToList()` twice. Simply, `Faker.Generate(n)` is enough.\n* `f.Generate` and `f => f.Make` now return `IList<T>` to signify the breaking change above. \n* Issue #92: Added `.GenerateLazy` to keep old behavior and returns `IEnumerable<T>`.\n* Issue #93: Renamed a `PickRandom` overload to avoid the compiler from picking wrong `PickRandom` method.\n* Added `f.PickRandomParam(\"cat\",\"dog\",\"fish\")`. \n* Removed `[Obsolete]` methods. \n\n## v15.0.7\nRelease Date: 2017-08-20\n\n* Issue #88 - API aesthetics: Added `Name.FullName()` convenience method to generate a full name.\n\n## v15.0.6\nRelease Date: 2017-08-02\n\n* PR #87: Added `.Rules()` method on `RuleSet`. Thanks @digitalcyote.\n\n## v15.0.5\nRelease Date: 2017-07-28\n\n* Add parameter for including `Currency` fund codes (BOV, CLF, COU, MXV, UYI).\n* Fixed minor issue in `Person.Email` having duplicate names.\n* Helper method: `f.PickRandomWithout(ExcludeItem1, ExcludeItem2)` added.\n* Helper method: `f.PickRandom(\"cat\", \"dog\", \"fish\")` added.\n* Performance: 40% reduction in Bogus' DLL size and memory footprint by removing whitespace in **Json** data files.\n* Newtonsoft dependency update 10.0.3.  \n\n## v15.0.3\nRelease Date: 2017-05-06\n\n* Added `f => f.Rant` to generate random user content like product reviews.\n* Added `new Faker[T].Rules( (f, t) => ...)` as a shortcut for building rules quickly.\n* Added `Address.FullAddress`\n* Added `Internet.UrlWithPath` allowing to create URLs with random paths.\n* Added `ru` (Russian locale) hacker adjective, ing-verb, noun, and verb.\n* Added `Internet.Mac` address separator parameter.\n* Feature parity with **faker.js** @ 6cdb93ef...\n* Using new C# 7 features. =)\n\n## v15.0.1\nRelease Date: 2017-04-11\n\n* Building with Visual Studio 2017.\n* Issue 70: Fixed `ArgumentException` that occurs with derived hidden `new` properties.\n\n## v12.0.2\n* `f => f.Generate(n, i => ...)` overload allows use of index when using `f.Generate`.\n\n## v12.0.1\nRelease Date: 2017-03-27\n\n* PR 64: Improved `.PickRandom(IEnumerable)` performance. Thanks @chuuddo.\n* Added `\"string\".ClampLength(max,min)` extension method to clamp length of strings between min and max.\n* Issue 67: Fixed `Randomizer.Int(int.MaxValue, int.MinValue)` range overflow not returning random `int32` values.\n\n## v11.0.5\nRelease Date: 2017-03-20\n\n* Compatibility with `Newtonsoft.Json` v10.0.1\n\n## v11.0.4\nRelease Date: 2017-03-14\n\n* Added `.RuleFor(x.Item, \"foo\")`. Eliminates ceremony of `f =>` for simple values.\n\n## v11.0.3\nRelease Date: 2017-03-13\n\n* Added range option to `Sentence`.\n\n## v11.0.2\nRelease Date: 2017-02-23\n\n* New Feature: Allow implicit and explicit type casts: `Order o = orderFaker` and `var o = (Order)orderFaker` without having to call `orderFaker.Generate()`.\n\n## v11.0.1\nRelease Date: 2017-02-21\n\n* Added `IndexGlobal` alias for `UniqueIndex`.\n* Added `IndexFaker` for uniqueness in Faker[T] lifetime.\n* Added `IndexVariable` a developer controlled index convenience variable. \n* Added `Database` dataset to `f => f.Database` facade.\n* Fixed Issue 57 - Avoid unexpected behavior with Parent-Child generators using `UniqueIndex`.\n* Removed some `Internet.Avatars` that returned 404.\n* Reached feature/data parity with `faker.js` v4.1.0.\n\n## v10.0.1\nRelease Date: 2017-02-18\n\n* `Internet.UserAgent` - Generates browser user agent strings.\n* `Internet.Password` - Generates user passwords using regex.\n* Added `az`/Azerbaijani locale.\n* Disallow `/` character in `System.FileName`.\n* `Helpers.Slugify` properly replaces spaces with `-` dashes.\n* `Lorem.Slug` slugs some lorem text.\n* `Finance.Iban` - Generates International Bank Account Numbers (IBAN).\n* `Finance.Bic` - Generates Bank Identifier Code (BIC) codes.\n* `Random.WeightedRandom` - Returns a weighted random distribution of items.\n* Allow `https://` in random images.\n* `Images.DataUri` - Generates \"data:image/svg\" URI with width and height.\n* `Database` data set for generating column, collation, type stuff.\n\n## v9.0.2\nRelease Date: 2017-01-19\n\n* Bug: Issue 54: Work around for Visual Studio IntelliSense.\n\n## v9.0.1\nRelease Date: 2017-01-18\n\n* New Feature: Bogus is now a signed assembly; PublicToken: fa1bb3f3f218129a\n\n## v8.0.4\nRelease Date: 2017-01-16\n\n* New Feature: Added `PickRandom(IEnumerable)` overload. Thanks joleharkes.\n\n## v8.0.3\nRelease Date: 2016-12-20\n\n* New Feature: `RuleForType(typeof(string))` allows bulk/default for a particular type on a class. Useful for very large classes with a specific type.\n\n## v8.0.2\nRelease Date: 2016-12-07\n\n* Issue 46. Fixed threading deadlock situation with static faker initialization. Thanks Mpdreamz.\n* Added `f => f.Generate(count, ()=> f.Phone.PhoneNumber())` helper for better fluency when filling properties with `List` of `T`.\n\n## v8.0.1\nRelease Date: 2016-11-25\n\n* Added `pt_PT` Portuguese (Portugal) locale. \n\n## v8.0.1-beta-1\nRelease Date: 2016-10-22\n\n* Allow `Faker<T>.RuleFor` rules to be overridden. Last set rule wins.\n\n## v7.1.7\nRelease Date: 2016-10-11\n\n* `Faker<T>.AssertConfigurationIsValid` to help in unit testing scenarios.\n* Add `Internet.Ipv6` method to generate IPv6 addresses.\n\n## v7.1.6\nRelease Date: 2016-08-07\n\n* Added `f => f.Commerce` on `Faker`.\n\n## v7.1.5\nRelease Date: 2016-07-27\n\n* Added `cz`/Czech locale\n* Updated `en`, `nl`, `pl`, `sk`, `sv` locales.\n* Realistic Dutch city naming\n* `Randomizer.AlphaNumeric` added.\n* `Randomizer.Double` now accepts `(min,max)` arguments\n* Added convenience `Randomizer` for random `Decimal`, `Float`, `Byte`, `Bytes`, `SByte`, `Int`, `UInt`, `ULong`, `Long`, `Short`, `UShort`, `Char` and `Chars`.\n\n## v7.1.4\nRelease Date: 2016-07-06\n\n* Newtonsoft Json 9.0.1 dependency support.\n\n## v7.1.3\nRelease Date: 2016-06-27\n\n* :boom: .NET Core 1.0 RTM Support.\n\n## v7.1.3-beta-1\nRelease Date: 2016-05-20\n\n* Compatibility with .NET Standard 1.3 and .NET Core RC2.\n\n## v7.1.2\nRelease Date: 2016-05-16\n\n* Roll-up Release for .NET Framework since last non-beta release.\n* CoreCLR users please continue using latest beta release until CoreCLR is RTM.\n\n## v7.1.2-beta-1\nRelease Date: 2016-05-16\n\n* Clamp Randomizer maximum value to int.MaxValue.\n\n## v7.1.1\nRelease Date: 2016-05-15\n\n* Roll-up Release for .NET Framework since last non-beta release.\n* CoreCLR users please continue using latest beta release until CoreCLR is RTM.\n\n## v7.1.1-beta-1\nRelease Date: 2016-05-15\n\n* Locale update\n* Date.Recent(0) generates random times for current date between midnight and now.\n* New `System` data set for generating fake file names and mime-types.\n* Added `Date.Timespan` for random timespan values.\n* Added `System.Semver` for random semantic versions.\n* Added `System.Version` for random System.Version objects.\n* Added `Internet.ExampleEmail` for simple @example.com email generation.\n* Added `Finance.BitcoinAddress` for random bitcoin addresses.\n* BREAKING: Fake \"seeded\" data generated by Bogus may be different from previous versions.\n* WARN: Address.City may have changed in some random seeds\n\n## v6.1.1\nRelease Date: 2016-03-29\n\n* Roll-up Release for .NET Framework since last non-beta release.\n* CoreCLR users please continue using latest beta release until CoreCLR is RTM.\n\n## v6.1.1-beta-1\nRelease Date: 2016-03-29\n\n* Fixed index out of bounds bug in faker.Random.Word().\n* Commerce.Department output may have changed as a result of this fix.\n\n## v5.1.1-beta-3\nRelease Date: 2016-03-23\n\n* Removed RuleFor(x = x.Prop, constantValue), was confusing the API.\n* Added 0-arity RuleFor(x = x.Prop, () => someValue)\n\n## v5.1.1-beta-2\nRelease Date: 2016-03-22\n\n* Make f.UniqueIndex as int for convenience.\n* Use generic RuleFor(x = x.Prop, constantValue).\n\n## v5.1.1-beta-1\nRelease Date: 2016-03-21\n\n* New RuleFor(x = x.Prop, constantValue)\n* Support for Hashids.net: RuleFor(x = x.Id, f = f.Hashids.Encode())\n* New f.UniqueIndex, useful for composing property values that require uniqueness.\n\n## v5.0.1\nRelease Date: 2016-02-25\n\n* Roll-up Release for .NET Framework since v4.0.1.\n* CoreCLR users please continue using latest beta release until CoreCLR is RTM.\n\n## v5.0.1-beta-2\nRelease Date: 2016-02-25\n\n* JvanderStad PR15: Lazy load Person. Avoids extra Seed.Next calls that may interfere with seeded content.\n* JvanderStad PR16: Better address generation. Respects locale address formats.\n* Added \"dotnet5.4\" moniker support.\n* BREAKING: Fake \"seeded\" data generated by Bogus may be different from previous versions.\n\n## v4.0.1\nRelease Date: 2016-02-15\n\n* Roll-up Release for .NET Framework since v3.0.6.\n* CoreCLR users please continue using latest beta release until CoreCLR is RTM.\n\n## v4.0.1-beta-1\nRelease Date: 2016-02-15\n\n* Bogus - Feature parity with faker.js.\n* System module added. Generate random file names and extensions.\n* Randomizer - Added Uuid().\n* Locales Updated: en_GB, sv, sk, de_CH, en.\n* Locales Added: id_ID, el, lv.\n* Prevent apostrophes in return value of Internet.DomainWords\n* Added more parameters for Image data set.\n* BREAKING API METHODS:\n* Lorem - Better API methods: Seeded tests based on \"content\" will fail due to upgrade.\n\n## v3.0.6\nRelease Date: 2016-01-21\n\n* Roll-up Release for .NET Framework since v3.0.5.\n* CoreCLR users please continue using latest beta release until CoreCLR is RTM.\n\n## v3.0.6-beta-1\nRelease Date: 2016-01-21\n\n* Issue #13: Fixed StrictMode to exclude private fields.\n* New Feature: Ignore property or field in StrictMode: Faker[Order].Ignore(o => o.OrderId).\n* CoreCLR users please continue using latest beta release until CoreCLR is RTM.\n\n## v3.0.5\nRelease Date: 2016-01-20\n\n* Roll-up Release for .NET Framework since v3.0.4.\n* CoreCLR users please continue using latest beta release until CoreCLR is RTM.\n\n## v3.0.5-beta-4\nRelease Date: 2016-01-19\n\n* Issue #13: StrictMode() now ignores read-only properties.\n* Newtonsoft.Json v8 compatibility.\n* CoreCLR users please continue using latest beta release until CoreCLR is RTM.\n\n## v3.0.5-beta-3\nRelease Date: 2016-01-18\n\n* Issue #12: Make Bogus thread-safe on Generate() and DataSets. Avoids threading issues in test runners.\n* CoreCLR users please continue using latest beta release until CoreCLR is RTM.\n\n## v3.0.5-beta-2\nRelease Date: 2016-01-11\n\n* CoreCLR support (CoreCLR users please continue using latest beta release until CoreCLR is RTM.).\n\n## v3.0.4\nRelease Date: 2015-12-10\n\n* Issue 10: Make Bogus work with fields also, not just properties. Fixes LINQPad issues.\n\n## v3.0.3\nRelease Date: 2015-12-09\n\n* PR 9: quantumplation - Fixed typo in Lorem.Sentance() -> Lorem.Sentence()\n\n## v3.0.2\nRelease Date: 2015-11-24\n\n* Generate US: SSN - Social Security Numbers.\n* Generate Canada: SIN - Social Insurance Numbers.\n* Generate Brazil: Cadastro de Pessoas Fisicas - CPF Numbers.\n* Generate Finland: Henkilotunnus - Person ID numbers\n* Generate Denmark: Det Centrale Personregister - Person ID numbers.\n* Allow exclude values on Randomizer.Enum.\n* Randomizer.Replace accepts '*' replace with letter or digit.\n* Added Lorem.Letter(num).\n* Can switch locale on Name: f.Name[\"en\"].LastName()\n\n## v3.0.1\nRelease Date: 2015-10-22\n\n* Added debug symbols to symbolsource.org.\n* PR#6: Fixed lastname and empty list exception -salixzs\n* Switch to semantic versioning at par with FakerJS.\n\n## v3.0.0.4\n* Adding generators: Date.Month(), Date.Weekday()\n* Sentences using lexically correct \"A foo bar.\"\n* Added Spanish Mexico (es_MX) locale.\n\n## v3.0.0.3\nRelease Date: 2015-07-21\n\n* Issue #2: Use latest Newtonsoft.Json 7.0.0.0 -Mpdreamz\n\n## v3.0.0.2\nRelease Date: 2015-07-11\n\n* Includes Ireland (English) locale.\n\n## v3.0.0.1\nRelease Date: 2015-07-11\n\n* Migrated to new FakerJS datafile format. Build system uses gulp file to directly import FakerJS locales.\n* Faker.Parse() can now tokenize and replace handlebar formats.\n* Added Faker.Hacker and Faker.Company properties.\n* Added Custom separator on Lorem.Paragraph.\n* Added Canada (French) (fr_CA) locale.\n* Added Ukrainian (uk) locale.\n* Added Ireland (en_IE) locale.\n* Added Internet.Mac for mac addresses.\n* Support for Canadian post/zip codes.\n* Exposed Name.JobTitle, Name.JobDescriptor, Name.JobArea, Name.JobType\n* Exposed Address.CountryCode\n* Replace symbols in domain words so it generates output for all locales\n* Support for gender names, but only for locales that support it. Russian('ru') but not English('en').\n* Corrected abbreviation for Yukon to reflect its official abbreviation of \"YT\".\n\n## v2.1.5.2\nRelease Date: 2015-06-22\n\n* Fixed instantiating a Person in a non-US locale. -antongeorgiev\n\n## v2.1.5.1\nRelease Date: 2015-06-11\n\n* Added Georgian, Turkish, and Chinese (Taiwan) locales.\n* Added Name.JobTitle()\n* Added Internet.Url() and Internet.Protocol().\n* Sync'd up with faker.js v2.1.5.\n\n## v2.1.4.2\nRelease Date: 2015-06-11\n\n* Fixed bug in Faker.Person and Faker[T] that generates new person context after every new object.\n* Added support for .FinishWith() for post-processing that runs after all rules but before returning new instance.\n* Added Newtonsoft.Json as NuGet dependency.\n\n## v2.1.4.1\nRelease Date: 2015-06-10\n\n* Minor changes, mostly XML doc update and Person moved from DataSet to Bogus namespace.\n\n## v2.1.4\nRelease Date: 2015-06-08\n\n* Initial port from faker.js 2.1.4."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 3.466796875,
          "content": "MIT License\n\nBogus - Copyright (c) 2015 Brian Chavez \n* http://github.com/bchavez/Bogus\n* http://bchavez.bitarmory.com\n\nfaker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\nhttp://github.com/marak/faker.js/\n\nfaker.js was inspired by and has used data definitions from:\n\nCopyright (c) 2007-2010 Benjamin Curtis\nhttps://github.com/stympy/faker/\n\nCopyright 2004-2005 by Jason Kohles\nhttp://search.cpan.org/~jasonk/Data-Faker-0.07/\n\nCopyright (c) ZZZ Projects Inc. 2014 - 2016\nhttps://github.com/zzzprojects/Z.ExtensionMethods/\n\nCopyright (c) 2015 kernys\nhttps://github.com/kernys/Kernys.Bson\n\nCopyright (c) 2015 Victor Quinn\nhttps://github.com/chancejs/chancejs\n\nCopyright (c) 2014 Chris Veness\nhttps://github.com/chrisveness/geodesy/\n\nCopyright (c) 2013, Richard Morris\nhttps://github.com/domaindrivendev/Swashbuckle/blob/master/LICENSE\n\nCopyright (c) 2012 Daniele Faraglia\nhttps://github.com/joke2k/faker/\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n================================================================================\n\nThe BSD 3-Clause License (BSD3)\n\nCopyright (c) 2013-2017 Sascha Droste <pid@posteo.net>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this\nlist of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n* Neither the name of the author nor the names of its contributors may be used\nto endorse or promote products derived from this software without specific prior\nwritten permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 58.9189453125,
          "content": "[![Downloads](https://img.shields.io/nuget/dt/Bogus.svg)](https://www.nuget.org/packages/Bogus/) [![Build status](https://ci.appveyor.com/api/projects/status/dxa14myphnlbplc6/branch/master?svg=true)](https://ci.appveyor.com/project/bchavez/bogus)  [![Twitter](https://img.shields.io/twitter/url/https/github.com/bchavez/Bogus.svg?style=social)](https://twitter.com/intent/tweet?text=Simple%20Fake%20Data%20Generator%20for%20.NET:&amp;amp;url=https%3A%2F%2Fgithub.com%2Fbchavez%2FBogus) [![Chat](https://img.shields.io/badge/chat-discussions-green)](https://github.com/bchavez/Bogus/discussions) <img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/logo.png\" align='right' />\n\nBogus for .NET: C#, F#, and VB.NET\n======================\n\nProject Description\n-------------------\nHello. I'm your host **[Brian Chavez](https://github.com/bchavez)** ([twitter](https://twitter.com/bchavez)). **Bogus** is a simple fake data generator for **.NET** languages like **C#**, **F#** and **VB.NET**. **Bogus** is fundamentally a **C#** port of [`faker.js`](https://github.com/faker-js/faker.js/)\nand inspired by [`FluentValidation`](https://github.com/JeremySkinner/FluentValidation)'s syntax sugar.\n\n**Bogus** will help you load databases, UI and apps with fake data for your testing needs. If you like **Bogus** star :star: the repository and show your friends! :smile: If you find **Bogus** useful consider supporting the project by purchasing a [**Bogus Premium**](#bogus-premium-extensions) license that gives you extra **Bogus** superpowers! :dizzy: :muscle: You can also [sponsor the project here](https://github.com/sponsors/bchavez)! :moneybag: :dollar:\n\n\n### Download & Install\n**Nuget Package [Bogus](https://www.nuget.org/packages/Bogus/)**\n\n```powershell\nInstall-Package Bogus\n```\nMinimum Requirements: **.NET Standard 1.3** or **.NET Standard 2.0** or **.NET Framework 4.0**.\n\n##### Projects That Use Bogus\n\n* [**Bitwarden Passwordless Server**](https://github.com/bitwarden/passwordless-server) [[code]](https://github.com/bitwarden/passwordless-server/blob/147e0ffa6e687634edcda7ac89518eab56936835/tests/Api.IntegrationTests/Helpers/User/UserHelpers.cs#L12-L22)\n* [**Elasticsearch .NET Client (NEST)**](https://github.com/elastic/elasticsearch-net) [[code]](https://github.com/elastic/elasticsearch-net/tree/82c938893b2ff4ddca03a8e977ad14a16da712ba/src/Tests/Framework/MockData)\n* [**FluentValidation**](https://github.com/FluentValidation/FluentValidation) [[code]](https://github.com/FluentValidation/FluentValidation/search?q=Bogus)\n* [**Microsoft Windows-XAML / Template10**](https://github.com/Windows-XAML/Template10) [[code]](https://github.com/Windows-XAML/Template10/blob/beed5e58a4f8ab381cff6f063d2a91db5b4fc3bc/Basics/PrismSample/Services/DataService.cs#L1)\n* [**Microsoft Learning / Cloud-Native Applications Using Microsoft Azure Cosmos DB**](https://github.com/MicrosoftLearning/dp-420-cosmos-db-dev) [[code]](https://github.com/MicrosoftLearning/dp-420-cosmos-db-dev/blob/fdbb3811c20a601fdfda8ea04c9c7de89b8afb19/instructions/08-sdk-bulk.md)\n* **Microsoft Office Developer**\n    * [**Office 365 Development Training Content**](https://github.com/OfficeDev/TrainingContent) [[code]](https://github.com/OfficeDev/TrainingContent/blob/0b2579517f0271f9a64f613b2046ab2821a73956/Teams/03%20Authentication/LabFiles/Starter/officedev-talent-management/DataModel/PositionCandidateData.cs)\n    * [**Microsoft Teams Sample Connector**](https://github.com/OfficeDev/microsoft-teams-sample-connector-csharp) [[code]](https://github.com/OfficeDev/microsoft-teams-sample-connector-csharp/blob/8805bb1acb136949905e4644c4e714dd7b70a61a/TeamsToDoAppConnector/Utils/TaskHelper.cs)\n\n##### Featured In\n* [**Amazon AWS .NET Open Source Fund Recipient - Oct. 1st, 2024**](#sponsors)\n* [**Microsoft 'On .NET Live': Next-level EF Core Data Seeding with Bogus - Apr. 15th, 2024**](https://www.youtube.com/watch?v=KoEOsfrRUqk&t=170s)\n* [**Adventures in .NET: Building Bogus with Brian Chavez - Jan 5th, 2024**](https://www.youtube.com/watch?v=C1WwGKUY9K4)\n* [**Microsoft Docs: Deploy Orleans to Azure App Service - May 5th, 2022**](https://docs.microsoft.com/en-us/dotnet/orleans/deployment/deploy-to-azure-app-service)\n* [**Microsoft Docs: Modernize a WPF app tutorial - Aug. 2nd, 2019**](https://docs.microsoft.com/en-us/windows/apps/desktop/modernize/modernize-wpf-tutorial-1#configure-nuget-packages-and-dependencies)\n* [**Microsoft Build 2018: Azure Tips and Tricks - May 8th, 2018**](https://www.youtube.com/watch?v=088e5IUqF6g&t=12m31s)\n* **[NuGet Must Haves: Top 10 Unit Testing Libraries in 2017](http://nugetmusthaves.com/article/top-unit-testing-libraries)**\n* **[.NET Rocks Podcast: #BetterKnowThatFramework - Mar. 16th 2017](https://twitter.com/bchavez/status/842479138850070528)**, **[Sep. 13th, 2018](https://twitter.com/bchavez/status/1040479669743628290)**, and **[May 7th, 2020](https://twitter.com/bchavez/status/1264047877245988864)**\n* **[.NET Engineering Blog: NuGet Package of the week #1. - \"This week in .NET - December 8th 2015\"](https://blogs.msdn.microsoft.com/dotnet/2015/12/08/the-week-in-net-12082015/)**\n\n##### Blog Posts\n* [Nick Chapsas](https://twitter.com/nickchapsas) - [Generating realistic fake data in .NET using Bogus [YouTube]](https://www.youtube.com/watch?v=T9pwE1GAr_U)\n* [Jack Histon](https://twitter.com/jackhiston) - [How to Create Bogus Data in C#](http://jackhiston.com/2017/10/1/how-to-create-bogus-data-in-c/)\n* [Christos Matskas](https://twitter.com/christosmatskas) - [Creating .NET fakes using Bogus](https://cmatskas.com/creating-net-fakes-using-bogus-2/)\n* [Jason Roberts](https://twitter.com/robertsjason) - [Lifelike Test Data Generation with Bogus](http://dontcodetired.com/blog/post/Lifelike-Test-Data-Generation-with-Bogus)\n* Mark Timmings - [Auto generating test data with Bogus](http://putridparrot.com/blog/auto-generating-test-data-with-bogus/)\n* [.NET Core Generating Test Data](https://coderulez.wordpress.com/2017/05/10/net-core-generating-test-data/)\n* Steve Leigh - [Seedy Fake Users](http://stevesspace.com/2017/01/seedy-fake-users/)\n* [Volkan Paksoy](https://twitter.com/volkan_paksoy) - [Generating Test Data with Bogus](https://volkanpaksoy.com/archive/2019/06/27/Generating-Test-Data-with-Bogus/)\n* Alican Demirtas - [Bogus on F#](https://www.compositional-it.com/news-blog/bogus-on-f/)\n* [Khalid Abuhakmeh](https://twitter.com/buhakmeh) - [Seed Entity Framework Core With Bogus](https://khalidabuhakmeh.com/seed-entity-framework-core-with-bogus)\n* [Sander ten Brinke](https://twitter.com/sandertenbrinke) - [Taking Entity Framework Core data seeding to the next level with Bogus](https://stenbrinke.nl/blog/taking-ef-core-data-seeding-to-the-next-level-with-bogus/)\n\n##### The Crypto Tip Jar!\n<a href=\"https://commerce.coinbase.com/checkout/2faa393a-6fc3-4365-993a-6cc110bc4d35\"><img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/tipjar.png\" /></a>\n\n\nUsage\n-----\n### The Great C# Example\n\n```csharp\npublic enum Gender\n{\n    Male,\n    Female\n}\n\n//Set the randomizer seed if you wish to generate repeatable data sets.\nRandomizer.Seed = new Random(8675309);\n\nvar fruit = new[] { \"apple\", \"banana\", \"orange\", \"strawberry\", \"kiwi\" };\n\nvar orderIds = 0;\nvar testOrders = new Faker<Order>()\n    //Ensure all properties have rules. By default, StrictMode is false\n    //Set a global policy by using Faker.DefaultStrictMode\n    .StrictMode(true)\n    //OrderId is deterministic\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    //Pick some fruit from a basket\n    .RuleFor(o => o.Item, f => f.PickRandom(fruit))\n    //A random quantity from 1 to 10\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 10))\n    //A nullable int? with 80% probability of being null.\n    //The .OrNull extension is in the Bogus.Extensions namespace.\n    .RuleFor(o => o.LotNumber, f => f.Random.Int(0, 100).OrNull(f, .8f));\n\n\nvar userIds = 0;\nvar testUsers = new Faker<User>()\n    //Optional: Call for objects that have complex initialization\n    .CustomInstantiator(f => new User(userIds++, f.Random.Replace(\"###-##-####\")))\n\n    //Use an enum outside scope.\n    .RuleFor(u => u.Gender, f => f.PickRandom<Gender>())\n\n    //Basic rules using built-in generators\n    .RuleFor(u => u.FirstName, (f, u) => f.Name.FirstName(u.Gender))\n    .RuleFor(u => u.LastName, (f, u) => f.Name.LastName(u.Gender))\n    .RuleFor(u => u.Avatar, f => f.Internet.Avatar())\n    .RuleFor(u => u.UserName, (f, u) => f.Internet.UserName(u.FirstName, u.LastName))\n    .RuleFor(u => u.Email, (f, u) => f.Internet.Email(u.FirstName, u.LastName))\n    .RuleFor(u => u.SomethingUnique, f => $\"Value {f.UniqueIndex}\")\n\n    //Use a method outside scope.\n    .RuleFor(u => u.CartId, f => Guid.NewGuid())\n    //Compound property with context, use the first/last name properties\n    .RuleFor(u => u.FullName, (f, u) => u.FirstName + \" \" + u.LastName)\n    //And composability of a complex collection.\n    .RuleFor(u => u.Orders, f => testOrders.Generate(3).ToList())\n    //Optional: After all rules are applied finish with the following action\n    .FinishWith((f, u) =>\n        {\n            Console.WriteLine(\"User Created! Id={0}\", u.Id);\n        });\n\nvar user = testUsers.Generate();\nConsole.WriteLine(user.DumpAsJson());\n\n/* OUTPUT:\nUser Created! Id=0\n *\n{\n  \"Id\": 0,\n  \"FirstName\": \"Audrey\",\n  \"LastName\": \"Spencer\",\n  \"FullName\": \"Audrey Spencer\",\n  \"UserName\": \"Audrey_Spencer72\",\n  \"Email\": \"Audrey82@gmail.com\",\n  \"Avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg\",\n  \"CartId\": \"863f9462-5b88-471f-b833-991d68db8c93\",\n  \"SSN\": \"923-88-4231\",\n  \"Gender\": 0,\n  \"Orders\": [\n    {\n      \"OrderId\": 0,\n      \"Item\": \"orange\",\n      \"Quantity\": 8\n    },\n    {\n      \"OrderId\": 1,\n      \"Item\": \"banana\",\n      \"Quantity\": 2\n    },\n    {\n      \"OrderId\": 2,\n      \"Item\": \"kiwi\",\n      \"Quantity\": 9\n    }\n  ]\n} */\n```\n\n#### More Examples!\n| Language  | Description | \n|:---------:| ----------- |\n| **C#**    | [**Full working example of 'The Great C# Example'**](https://github.com/bchavez/Bogus/tree/master/Examples/GettingStarted) |\n| **C#**    | [**Using Bogus and EF Core to a seed database**](https://github.com/bchavez/Bogus/tree/master/Examples/EFCoreSeedDb) |\n| **C#**    | [**Extending Bogus with custom APIs and data**](https://github.com/bchavez/Bogus/tree/master/Examples/ExtendingBogus) |\n| **F#**    | [**Using Bogus with F#**](#the-fabulous-f-examples) |\n| **VB.NET** | [**Using Bogus with VB.NET**](#the-very-basic-vbnet-example) |\n\n\n### Locales\n\nSince we're a port of **faker.js**, we support a whole bunch of different\nlocales. Here's an example in Korean:\n\n```csharp\n[Test]\npublic void With_Korean_Locale()\n{\n    var lorem = new Bogus.DataSets.Lorem(locale: \"ko\");\n    Console.WriteLine(lorem.Sentence(5));\n}\n\n/* 국가는 무상으로 행위로 의무를 구성하지 신체의 처벌받지 예술가의 경우와 */\n```\n\n**Bogus** supports the following locales:\n\n| Locale Code  | Language                | | Locale Code  | Language                 |\n|:------------:|:-----------------------:|-|:------------:|:------------------------:|\n|`af_ZA`       |Afrikaans                 ||`fr_CH`       |French (Switzerland)      |\n|`ar`          |Arabic                    ||`ge`          |Georgian                  |\n|`az`          |Azerbaijani               ||`hr`          |Hrvatski                  |\n|`cz`          |Czech                     ||`id_ID`       |Indonesia                 |\n|`de`          |German                    ||`it`          |Italian                   |\n|`de_AT`       |German (Austria)          ||`ja`          |Japanese                  |\n|`de_CH`       |German (Switzerland)      ||`ko`          |Korean                    |\n|`el`          |Greek                     ||`lv`          |Latvian                   |\n|`en`          |English                   ||`nb_NO`       |Norwegian                 |\n|`en_AU`       |English (Australia)       ||`ne`          |Nepalese                  |\n|`en_AU_ocker` |English (Australia Ocker) ||`nl`          |Dutch                     |\n|`en_BORK`     |English (Bork)            ||`nl_BE`       |Dutch (Belgium)           |\n|`en_CA`       |English (Canada)          ||`pl`          |Polish                    |\n|`en_GB`       |English (Great Britain)   ||`pt_BR`       |Portuguese (Brazil)       |\n|`en_IE`       |English (Ireland)         ||`pt_PT`       |Portuguese (Portugal)     |\n|`en_IND`      |English (India)           ||`ro`          |Romanian                  |\n|`en_NG`       |Nigeria (English)         ||`ru`          |Russian                   |\n|`en_US`       |English (United States)   ||`sk`          |Slovakian                 |\n|`en_ZA`       |English (South Africa)    ||`sv`          |Swedish                   |\n|`es`          |Spanish                   ||`tr`          |Turkish                   |\n|`es_MX`       |Spanish (Mexico)          ||`uk`          |Ukrainian                 |\n|`fa`          |Farsi                     ||`vi`          |Vietnamese                |\n|`fi`          |Finnish                   ||`zh_CN`       |Chinese                   |\n|`fr`          |French                    ||`zh_TW`       |Chinese (Taiwan)          |\n|`fr_CA`       |French (Canada)           ||`zu_ZA`       |Zulu (South Africa)       |\n\n\n***Note:*** Some locales may not have a complete data set. For example, [`zh_CN`](https://github.com/faker-js/faker.js/tree/master/lib/locales/zh_CN) does not have a `lorem` data set, but [`ko`](https://github.com/faker-js/faker.js/tree/master/lib/locales/ko) has a `lorem` data set. **Bogus** will default to `en` if a *locale-specific* data set is not found. To further illustrate the previous example, the missing `zh_CN:lorem` data set will default to the `en:lorem` data set.\n\nIf you'd like to help contribute new locales or update existing ones please see our\n[Creating Locales](https://github.com/bchavez/Bogus/wiki/Creating-Locales) wiki page\nfor more info.\n\n### Without Fluent Syntax\n\nYou can use **Bogus** without a fluent setup. The examples below highlight three alternative ways to use **Bogus** without a fluent syntax setup.\n\n* Using the `Faker` facade.\n* Using **DataSets** directly.\n* Using `Faker<T>` **inheritance**.\n\n#### Using the `Faker` facade:\n```csharp\npublic void Using_The_Faker_Facade()\n{\n   var faker = new Faker(\"en\");\n   var o = new Order()\n       {\n           OrderId = faker.Random.Number(1, 100),\n           Item = faker.Lorem.Sentence(),\n           Quantity = faker.Random.Number(1, 10)\n       };\n   o.Dump();\n}\n```\n\n#### Using **DataSets** directly:\n```csharp\npublic void Using_DataSets_Directly()\n{\n   var random = new Bogus.Randomizer();\n   var lorem = new Bogus.DataSets.Lorem(\"en\");\n   var o = new Order()\n       {\n           OrderId = random.Number(1, 100),\n           Item = lorem.Sentence(),\n           Quantity = random.Number(1, 10)\n       };\n   o.Dump();\n}\n```\n\n#### Using `Faker<T>` inheritance:\n```csharp\npublic class OrderFaker : Faker<Order> {\n   public OrderFaker() {\n      RuleFor(o => o.OrderId, f => f.Random.Number(1, 100));\n      RuleFor(o => o.Item, f => f.Lorem.Sentence());\n      RuleFor(o => o.Quantity, f => f.Random.Number(1, 10));\n   }\n}\n\npublic void Using_FakerT_Inheritance()\n{\n   var orderFaker = new OrderFaker();\n   var o = orderFaker.Generate();\n   o.Dump();\n}\n```\n\nIn the examples above, all three alternative styles of using **Bogus** produce the same `Order` result:\n```\n{\n  \"OrderId\": 61,\n  \"Item\": \"vel est ipsa\",\n  \"Quantity\": 7\n}\n```\n\n### Bogus API Support\n* **`Address`**\n\t* `ZipCode` - Get a zipcode.\n\t* `City` - Get a city name.\n\t* `StreetAddress` - Get a street address.\n\t* `CityPrefix` - Get a city prefix.\n\t* `CitySuffix` - Get a city suffix.\n\t* `StreetName` - Get a street name.\n\t* `BuildingNumber` - Get a building number.\n\t* `StreetSuffix` - Get a street suffix.\n\t* `SecondaryAddress` - Get a secondary address like 'Apt. 2' or 'Suite 321'.\n\t* `County` - Get a county.\n\t* `Country` - Get a country.\n\t* `FullAddress` - Get a full address like Street, City, Country.\n\t* `CountryCode` - Get a random ISO 3166-1 country code.\n\t* `State` - Get a random state state.\n\t* `StateAbbr` - Get a state abbreviation.\n\t* `Latitude` - Get a Latitude.\n\t* `Longitude` - Get a Longitude.\n\t* `Direction` - Generates a cardinal or ordinal direction. IE: Northwest, South, SW, E.\n\t* `CardinalDirection` - Generates a cardinal direction. IE: North, South, E, W.\n\t* `OrdinalDirection` - Generates an ordinal direction. IE: Northwest, Southeast, SW, NE.\n* **`Commerce`**\n\t* `Department` - Get a random commerce department.\n\t* `Price` - Get a random product price.\n\t* `Categories` - Get random product categories.\n\t* `ProductName` - Get a random product name.\n\t* `Color` - Get a random color.\n\t* `Product` - Get a random product.\n\t* `ProductAdjective` - Random product adjective.\n\t* `ProductMaterial` - Random product material.\n\t* `Ean8` - Get a random EAN-8 barcode number.\n\t* `Ean13` - Get a random EAN-13 barcode number.\n* **`Company`**\n\t* `CompanySuffix` - Get a company suffix. \"Inc\" and \"LLC\" etc.\n\t* `CompanyName` - Get a company name.\n\t* `CatchPhrase` - Get a company catch phrase.\n\t* `Bs` - Get a company BS phrase.\n* **`Database`**\n\t* `Column` - Generates a column name.\n\t* `Type` - Generates a column type.\n\t* `Collation` - Generates a collation.\n\t* `Engine` - Generates a storage engine.\n* **`Date`**\n\t* `Past` - Get a `DateTime` in the past between `refDate` and `yearsToGoBack`.\n\t* `PastOffset` - Get a `DateTimeOffset` in the past between `refDate` and `yearsToGoBack`.\n\t* `Soon` - Get a `DateTime` that will happen soon.\n\t* `SoonOffset` - Get a `DateTimeOffset` that will happen soon.\n\t* `Future` - Get a `DateTime` in the future between `refDate` and `yearsToGoForward`.\n\t* `FutureOffset` - Get a `DateTimeOffset` in the future between `refDate` and `yearsToGoForward`.\n\t* `Between` - Get a random `DateTime` between `start` and `end`.\n\t* `BetweenOffset` - Get a random `DateTimeOffset` between `start` and `end`.\n\t* `Recent` - Get a random `DateTime` within the last few days.\n\t* `RecentOffset` - Get a random `DateTimeOffset` within the last few days.\n\t* `Timespan` - Get a random `TimeSpan`.\n\t* `Month` - Get a random month.\n\t* `Weekday` - Get a random weekday.\n* **`Finance`**\n\t* `Account` - Get an account number. Default length is 8 digits.\n\t* `AccountName` - Get an account name. Like \"savings\", \"checking\", \"Home Loan\" etc..\n\t* `Amount` - Get a random amount. Default 0 - 1000.\n\t* `TransactionType` - Get a transaction type: \"deposit\", \"withdrawal\", \"payment\", or \"invoice\".\n\t* `Currency` - Get a random currency.\n\t* `CreditCardNumber` - Generate a random credit card number with valid Luhn checksum.\n\t* `CreditCardCvv` - Generate a credit card CVV.\n\t* `BitcoinAddress` - Generates a random Bitcoin address.\n\t* `EthereumAddress` - Generate a random Ethereum address.\n\t* `RoutingNumber` - Generates an ABA routing number with valid check digit.\n\t* `Bic` - Generates Bank Identifier Code (BIC) code.\n\t* `Iban` - Generates an International Bank Account Number (IBAN).\n* **`Hacker`**\n\t* `Abbreviation` - Returns an abbreviation.\n\t* `Adjective` - Returns a adjective.\n\t* `Noun` - Returns a noun.\n\t* `Verb` - Returns a verb.\n\t* `IngVerb` - Returns a verb ending with -ing.\n\t* `Phrase` - Returns a phrase.\n* **`Images`**\n\t* `DataUri` - Get a SVG data URI image with a specific width and height.\n\t* `PicsumUrl` - Get an image from the https://picsum.photos service.\n\t* `PlaceholderUrl` - Get an image from https://placeholder.com service.\n\t* `LoremFlickrUrl` - Get an image from https://loremflickr.com service.\n* **`Internet`**\n\t* `Avatar` - Generates a legit Internet URL avatar from twitter accounts.\n\t* `Email` - Generates an email address.\n\t* `ExampleEmail` - Generates an example email with @example.com.\n\t* `UserName` - Generates user names.\n\t* `UserNameUnicode` - Generates a user name preserving Unicode characters.\n\t* `DomainName` - Generates a random domain name.\n\t* `DomainWord` - Generates a domain word used for domain names.\n\t* `DomainSuffix` - Generates a domain name suffix like .com, .net, .org\n\t* `Ip` - Gets a random IPv4 address string.\n\t* `Port` - Generates a random port number.\n\t* `IpAddress` - Gets a random IPv4 IPAddress type.\n\t* `IpEndPoint` - Gets a random IPv4 IPEndPoint.\n\t* `Ipv6` - Generates a random IPv6 address string.\n\t* `Ipv6Address` - Generate a random IPv6 IPAddress type.\n\t* `Ipv6EndPoint` - Gets a random IPv6 IPEndPoint.\n\t* `UserAgent` - Generates a random user agent.\n\t* `Mac` - Gets a random mac address.\n\t* `Password` - Generates a random password.\n\t* `Color` - Gets a random aesthetically pleasing color near the base RGB. See [here](http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette).\n\t* `Protocol` - Returns a random protocol. HTTP or HTTPS.\n\t* `Url` - Generates a random URL.\n\t* `UrlWithPath` - Get an absolute URL with random path.\n\t* `UrlRootedPath` - Get a rooted URL path like: /foo/bar. Optionally with file extension.\n* **`Lorem`**\n\t* `Word` - Get a random lorem word.\n\t* `Words` - Get an array of random lorem words.\n\t* `Letter` - Get a character letter.\n\t* `Sentence` - Get a random sentence of specific number of words.\n\t* `Sentences` - Get some sentences.\n\t* `Paragraph` - Get a paragraph.\n\t* `Paragraphs` - Get a specified number of paragraphs.\n\t* `Text` - Get random text on a random lorem methods.\n\t* `Lines` - Get lines of lorem.\n\t* `Slug` - Slugify lorem words.\n* **`Name`**\n\t* `FirstName` - Get a first name. Getting a gender specific name is only supported on locales that support it.\n\t* `LastName` - Get a last name. Getting a gender specific name is only supported on locales that support it.\n\t* `FullName` - Get a full name, concatenation of calling FirstName and LastName.\n\t* `Prefix` - Gets a random prefix for a name.\n\t* `Suffix` - Gets a random suffix for a name.\n\t* `FindName` - Gets a full name.\n\t* `JobTitle` - Gets a random job title.\n\t* `JobDescriptor` - Get a job description.\n\t* `JobArea` - Get a job area expertise.\n\t* `JobType` - Get a type of job.\n* **`Phone`**\n\t* `PhoneNumber` - Get a phone number.\n\t* `PhoneNumberFormat` - Gets a phone number based on the locale's phone_number.formats[] array index.\n* **`Rant`**\n\t* `Review` - Generates a random user review.\n\t* `Reviews` - Generate an array of random reviews.\n* **`System`**\n\t* `FileName` - Get a random file name.\n\t* `DirectoryPath` - Get a random directory path (Unix).\n\t* `FilePath` - Get a random file path (Unix).\n\t* `CommonFileName` - Generates a random file name with a common file extension.\n\t* `MimeType` - Get a random mime type.\n\t* `CommonFileType` - Returns a commonly used file type.\n\t* `CommonFileExt` - Returns a commonly used file extension.\n\t* `FileType` - Returns any file type available as mime-type.\n\t* `FileExt` - Gets a random extension for the given mime type.\n\t* `Semver` - Get a random semver version string.\n\t* `Version` - Get a random `Version`.\n\t* `Exception` - Get a random `Exception` with a fake stack trace.\n\t* `AndroidId` - Get a random GCM registration ID.\n\t* `ApplePushToken` - Get a random Apple Push Token.\n\t* `BlackBerryPin` - Get a random BlackBerry Device PIN.\n* **`Vehicle`**\n\t* `Vin` - Generate a vehicle identification number (VIN).\n\t* `Manufacturer` - Get a vehicle manufacture name. IE: Toyota, Ford, Porsche.\n\t* `Model` - Get a vehicle model. IE: Camry, Civic, Accord.\n\t* `Type` - Get a vehicle type. IE: Minivan, SUV, Sedan.\n\t* `Fuel` - Get a vehicle fuel type. IE: Electric, Gasoline, Diesel.\n* **`Random`/`Randomizer`**\n\t* `Number` - Get an int from 0 to max.\n\t* `Digits` - Get a random sequence of digits.\n\t* `Even` - Returns a random even number.\n\t* `Odd` - Returns a random odd number.\n\t* `Double` - Get a random double, between 0.0 and 1.0.\n\t* `Decimal` - Get a random decimal, between 0.0 and 1.0.\n\t* `Float` - Get a random float, between 0.0 and 1.0.\n\t* `Byte` - Generate a random byte between 0 and 255.\n\t* `Bytes` - Get a random sequence of bytes.\n\t* `SByte` - Generate a random sbyte between -128 and 127.\n\t* `Int` - Generate a random int between MinValue and MaxValue.\n\t* `UInt` - Generate a random uint between MinValue and MaxValue.\n\t* `ULong` - Generate a random ulong between MinValue and MaxValue.\n\t* `Long` - Generate a random long between MinValue and MaxValue.\n\t* `Short` - Generate a random short between MinValue and MaxValue.\n\t* `UShort` - Generate a random ushort between MinValue and MaxValue.\n\t* `Char` - Generate a random char between MinValue and MaxValue.\n\t* `Chars` - Generate a random chars between MinValue and MaxValue.\n\t* `String` - Get a string of characters of a specific length.\n\t* `String2` - Get a string of characters with a specific length drawing characters from `chars`.\n\t* `Hash` - Return a random hex hash. Default 40 characters, aka SHA-1.\n\t* `Bool` - Get a random boolean.\n\t* `ArrayElement<T>` - Get a random array element.\n\t* `ArrayElement` - Get a random array element.\n\t* `ArrayElements<T>` - Get a random subset of an array.\n\t* `ListItem<T>` - Get a random list item.\n\t* `ListItems<T>` - Get a random subset of a List.\n\t* `CollectionItem<T>` - Get a random collection item.\n\t* `ReplaceNumbers` - Replaces symbols with numbers.\n\t* `ReplaceSymbols` - Replaces each character instance in a string.\n\t* `Replace` - Replaces symbols with numbers and letters. # = number, ? = letter, * = number or letter.\n\t* `ClampString` - Clamps the length of a string between min and max characters.\n\t* `Enum<T>` - Picks a random Enum of T. Works only with Enums.\n\t* `Shuffle<T>` - Shuffles an IEnumerable source.\n\t* `Word` - Returns a single word or phrase in English.\n\t* `Words` - Gets some random words and phrases in English.\n\t* `WordsArray` - Get a range of words in an array (English).\n\t* `Guid` - Get a random GUID.\n\t* `Uuid` - Get a random GUID. Alias for Randomizer.Guid().\n\t* `RandomLocale` - Returns a random locale.\n\t* `AlphaNumeric` - Returns a random set of alpha numeric characters 0-9, a-z.\n\t* `Hexadecimal` - Generates a random hexadecimal string.\n\t* `WeightedRandom<T>` - Returns a selection of T[] based on a weighted distribution of probability.\n\n#### API Extension Methods\n* **`using Bogus.Extensions.Belgium;`**\n\t* `Bogus.Person.NationalNumber()` - Rijksregisternummer / Numéro Nationale\n* **`using Bogus.Extensions.Brazil;`**\n\t* `Bogus.Person.Cpf()` - Cadastro de Pessoas Físicas\n\t* `Bogus.DataSets.Company.Cnpj()` - Cadastro Nacional da Pessoa Jurídica\n* **`using Bogus.Extensions.Canada;`**\n\t* `Bogus.Person.Sin()` - Social Insurance Number for Canada\n* **`using Bogus.Extensions.Denmark;`**\n\t* `Bogus.Person.Cpr()` - Danish Personal Identification number\n* **`using Bogus.Extensions.Finland;`**\n\t* `Bogus.Person.Henkilotunnus()` - Finnish Henkilötunnus\n* **`using Bogus.Extensions.Italy;`**\n\t* `Bogus.Person.CodiceFiscale()` - Codice Fiscale\n\t* `Bogus.DataSets.Finance.CodiceFiscale()` - Codice Fiscale\n* **`using Bogus.Extensions.Norway;`**\n\t* `Bogus.Person.Fodselsnummer()` - Norwegian national identity number\n* **`using Bogus.Extensions.Poland;`**\n\t* `Bogus.Person.Pesel()` - Number of Powszechny Elektroniczny System Ewidencji Ludności (PESEL)\n\t* `Bogus.DataSets.Company.Nip()` - Numer identyfikacji podatkowej (NIP)\n\t* `Bogus.DataSets.Company.Regon()` - Number of Rejestr Gospodarki Narodowej (REGON)\n* **`using Bogus.Extensions.Portugal;`**\n\t* `Bogus.Person.Nif()` - Número de Identificação Fiscal (NIF)\n\t* `Bogus.DataSets.Company.Nipc()` - Número de Identificação de Pessoa Colectiva (NIPC)\n* **`using Bogus.Extensions.Romania;`**\n\t* `Bogus.Person.Cnp()` - Romanian Personal Identification number (CNP)\n* **`using Bogus.Extensions.Sweden;`**\n\t* `Bogus.Person.Personnummer()` - Swedish national identity number\n\t* `Bogus.Person.Samordningsnummer()` - Swedish coordination number\n* **`using Bogus.Extensions.UnitedKingdom;`**\n\t* `Bogus.DataSets.Vehicle.GbRegistrationPlate()` - GB Vehicle Registration Plate\n\t* `Bogus.DataSets.Finance.SortCode()` - Banking Sort Code\n\t* `Bogus.DataSets.Finance.Nino()` - National Insurance Number\n\t* `Bogus.DataSets.Finance.VatNumber()` - Generates a UK compatible VAT registration number\n\t* `Bogus.DataSets.Address.CountryOfUnitedKingdom()` - Country of the United Kingdom\n* **`using Bogus.Extensions.UnitedStates;`**\n\t* `Bogus.Person.Ssn()` - Social Security Number\n\t* `Bogus.DataSets.Company.Ein()` - Employer Identification Number\n* **`using Bogus.Distributions.Gaussian;`**\n    * `Randomizer.GaussianInt()` - Generate an `int` based on a specific normal distribution.\n    * `Randomizer.GaussianFloat()` - Generate a `float` based on a specific normal distribution.\n    * `Randomizer.GaussianDouble()` - Generate a `double` based on a specific normal distribution.\n    * `Randomizer.GaussianDecimal()` - Generate a `decimal` based on a specific normal distribution.\n    \n#### Amazing Community Extensions\n* [**AutoBogus**](https://github.com/nickdodd79/AutoBogus) ([`NuGet Package`](https://www.nuget.org/packages?q=AutoBogus)) by [@nickdodd79](https://github.com/nickdodd79/) - Extends **Bogus** by adding automatic `.RuleFor()` creation and population capabilities.\n* [**NaughtyStrings.Bogus**](https://github.com/SimonCropp/NaughtyStrings) ([`NuGet Package`](https://www.nuget.org/packages/NaughtyStrings.Bogus/)) by [@SimonCropp](https://github.com/SimonCropp) - Extends **Bogus** with list of naughty strings which have a high probability of causing issues when used as user-input data. Examples:\n    * `.SQLInjection()` - Strings which can cause a SQL injection if inputs are not sanitized.\n    * `.ScriptInjection()` - Strings which attempt to invoke a benign script injection; shows vulnerability to XSS.\n    * `.iOSVulnerabilities()` - Strings which crashed iMessage in various versions of iOS. \n    * `.KnownCVEsandVulnerabilities()` - Strings that test for known vulnerabilities.\n    * `.ServerCodeInjection()` - Strings which can cause user to run code on server as a privileged user.\n    * and more!\n* [**WaffleGenerator.Bogus**](https://github.com/SimonCropp/WaffleGenerator) ([`NuGet Package`](https://www.nuget.org/packages/WaffleGenerator.Bogus/)) by [@SimonCropp](https://github.com/SimonCropp) - The Waffle Generator produces of text which, on first glance, looks like real, ponderous, prose; replete with clichés.\n* [**NodaTime.Bogus**](https://github.com/SimonCropp/NodaTime.Bogus) ([`NuGet Package`](https://www.nuget.org/packages/NodaTime.Bogus/)) by [@SimonCropp](https://github.com/SimonCropp) - Adds support for [NodaTime](https://nodatime.org/) to **Bogus**. \n* [**CountryData.Bogus**](https://github.com/SimonCropp/CountryData) ([`NuGet Package`](https://www.nuget.org/packages/CountryData.Bogus/)) by [@SimonCropp](https://github.com/SimonCropp) - Wrapper around [GeoNames Data](https://www.geonames.org/). Examples:\n    * `.Country().Name()` - Random country name.\n    * `.Country().CurrencyCode()` - Random currency code.\n    * `.Australia().Capital()` - Country capital.\n    * `.Country().Iceland().PostCode()` - Random country post code.\n* [**AustralianElectorates.Bogus**](https://github.com/pmcau/AustralianElectorates) ([`NuGet Package`](https://www.nuget.org/packages/AustralianElectorates.Bogus/)) by [@SimonCropp](https://github.com/SimonCropp) - Wrapper around Australian Electoral Commission (AEC) data (https://www.aec.gov.au/). Examples:\n    * `.AustralianElectorates().Electorate()` - Random electorate.\n    * `.AustralianElectorates().Name()` - Random electorate name.\n    * `.AustralianElectorates().CurrentMember()` - Random current electorate member for parliament.\n    * `.AustralianElectorates().CurrentMemberName()` - Random name of current a electorate member for parliament.\n    * `.AustralianElectorates().Member()` - Random electorate member for parliament.\n    * `.AustralianElectorates().MemberName()` - Random name of a electorate member for parliament.\n\n## Bogus Premium Extensions!\n<img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/logo_green.png\" align='left' height=\"42px\" width=\"42px\" style=\"padding-right: 15px\" /> **Bogus Premium** [[**Purchase Now!**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium)] by [@bchavez](https://github.com/bchavez)<br/>You can help support the **Bogus** open source project by purchasing a [**Bogus Premium**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) license! With an active premium license you'll be supporting this cool open-source project. You'll also gain new superpowers that extended **Bogus** with new features and exclusive data sets! Check 'em out below!\n\n* **Premium:** [**Bogus.Tools.Analyzer**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) ([NuGet Package](https://www.nuget.org/packages/Bogus.Tools.Analyzer/)) - Save time using this handy Roslyn analyzer to generate and detect missing `.RuleFor()` rules at development & compile time! This tool is included with the [**Bogus Premium**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) license!\n  <img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/bogus_premium_tools_analyzer_demo.gif\" />\n* **Premium:** [**Bogus.Locations**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) ([NuGet Package](https://www.nuget.org/packages/Bogus.Locations/)) - A dataset that contains real geographical information for places and things. Create fake GPS points and paths. Helpful for creating geodesic data for location-based aware apps.\n  * **`Location`**\n    * `Altitude` - Generate a random altitude, in meters. Default max height is 8848m (Mount Everest). Heights are always positive.\n    * `AreaCircle` - Get a latitude and longitude within a specific radius in meters.\n    * `Depth` - Generate a random depth, in meters. Default max depth is -10994m (Mariana Trench). Depths are always negative.\n    * `Geohash` - Generates a random Geohash. [See](https://en.wikipedia.org/wiki/Geohash).\n* **Premium:** [**Bogus.Healthcare**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) ([NuGet Package](https://www.nuget.org/packages/Bogus.Healthcare/)) - A data set for the Healthcare industry. Generate fake medical records, injuries, diagnosis, drugs, dosages, human anatomy, and ICD-9 medical codes. Especially helpful in HIPAA regulated environments!\n  * **`Drugs`**\n    * `Administration` - Get how a drug should be administered. IE: oral, nasal, injection.\n    * `Dosage` - Get a drug dosage with MG units\n    * `DosageAmount` - Get a drug dosage.\n    * `DosageForm` - Get the form of a drug. IE: tablet, capsule, gel.\n    * `Ingredient` - Get a drug ingredient. IE: folic acid, magnesium hydroxide, ibuprofen.\n    * `Vitamin` - Get a random vitamin.\n  * **`Human`**\n    * `BloodType` - Get a random blood type. Ex: A+, OB\n    * `BodyPartExternal` - Get an external body part name. IE: Head, Arm, Leg.\n    * `BodyPartInternal` - Get an internal body part name. IE: Bladder, Lung, Heart.\n    * `BodyRegion` - Get a human body region. IE: Head and Neck, Thorax.\n    * `BodySystem` - Get a human body system. IE: Digestive, Nervous, Circulatory.\n    * `Diagnosis` - Shortcut to Icd9.DiagnosisLongDescription\".\n    * `InfectiousDisease` - Get an infectious disease. IE: Chickenpox, Polio, Zika Fever.\n    * `Pain` - Get a human pain. Ex: Chest pain, Headache, Toothache.\n    * `Plasma` - Get a random plasma type. Ex: O, A, B, AB\n    * `Procedure` - Shortcut to Icd9.ProcedureLongDescription.\n  * **`Icd9`**\n    * `DiagnosisCode` - Get a ICD9 diagnosis code.\n    * `DiagnosisEntry` - Get a medical diagnosis.\n    * `DiagnosisLongDescription` - Get a medical diagnosis description. IE: Meningitis due to coxsackie virus.\n    * `DiagnosisShortDescription` - Get a short description of a medical diagnosis.\n    * `ProcedureCode` - Get a ICD9 procedure code.\n    * `ProcedureEntry` - Get a medical procedure.\n    * `ProcedureLongDescription` - Get a medical procedure description.\n    * `ProcedureShortDescription` - Get a short description of a medical procedure.\n  * **`Icd10`**\n    * `DiagnosisCode` - Get a ICD10 diagnosis code.\n    * `DiagnosisEntry` - Get a medical diagnosis.\n    * `DiagnosisLongDescription` - Get a medical diagnosis description. IE: Meningitis due to coxsackie virus.\n    * `DiagnosisShortDescription` - Get a short description of a medical diagnosis.\n    * `ProcedureCode` - Get a ICD10 procedure code.\n    * `ProcedureEntry` - Get a medical procedure.\n    * `ProcedureLongDescription` - Get a medical procedure description.\n    * `ProcedureShortDescription` - Get a short description of a medical procedure.\n  * **`Medical`**\n    * `Hospital` - Get a random hospital.\n    * `HospitalCity` - Get a hospital city.\n    * `HospitalName` - Get a random hospital name. IE: UCLA Medical Center\n    * `HospitalState` - Get a hospital state.\n    * `HospitalStreetAddress` - Get a hospital street address.\n    * `HospitalZipCode` - Get a hospital ZipCode.\n    * `Phrase` - Get a random medical phrase.\n    * `Word` - Get a medical word.\n* **Premium:** [**Bogus.Hollywood**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) ([NuGet Package](https://www.nuget.org/packages/Bogus.Hollywood/))- A dataset for the Entertainment industry.\n  * **`Movies`**\n    * `ActorName` - Get a famous actor. IE: Keanu Reeves, Liam Neeson, and Natalie Portman.\n    * `MovieCollection` - Get a random movie collection. IE: Star Wars Collection, Indiana Jones Collection.\n    * `MovieOverview` - Get a random movie overview\n    * `MovieReleaseDate` - Get a random movie release date.\n    * `MovieTagline` - Get a random movie tagline.\n    * `MovieTitle` - Get a random movie title\n    * `Production` - Get a production company.\n  * **`Tv`**\n    * `ActorName` - Get a famous actor. IE: Keanu Reeves, Liam Neeson, and Natalie Portman.\n    * `Network` - Get a random TV network. IE: BBC, ABC, NBC, FOX.\n    * `Production` - Get a production company\n    * `Series` - Get a name of a TV series. IE: Rick and Morty, Silicon Valley, The Walking Dead\n* **Premium:** [**Bogus.Text**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) ([NuGet Package](https://www.nuget.org/packages/Bogus.Text/)) - A dataset that contains historical texts in the public domain. Create fake sentences from famous speeches, classic books, and law\n  * **`Literature`**\n    * `CommonSense` - Text from \"Common Sense, by Thomas Paine (1776)\"\n    * `JfkSpeech` - Text from \"JFK's Inaugural Address\"\n    * `Knowledge` - Text from \"A Treatise Concerning the Principles of Human knowledge, by George Berkeley (1710)\"\n\n---\n\n### Helper Methods\nThe features shown below come standard with the [**Bogus**](https://www.nuget.org/packages/Bogus/) NuGet package.\n\n#### Person\nIf you want to generate a `Person` with context relevant properties like\nan email that looks like it belongs to someone with the same first/last name,\ncreate a person!\n\n```csharp\n[Test]\npublic void Create_Context_Related_Person()\n{\n    var person = new Bogus.Person();\n\n    person.Dump();\n}\n\n/* OUTPUT:\n{\n  \"FirstName\": \"Lee\",\n  \"LastName\": \"Brown\",\n  \"UserName\": \"Lee_Brown3\",\n  \"Avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg\",\n  \"Email\": \"Lee_Brown369@yahoo.com\",\n  \"DateOfBirth\": \"1984-01-16T21:31:27.87666\",\n  \"Address\": {\n    \"Street\": \"2552 Bernard Rapid\",\n    \"Suite\": \"Suite 199\",\n    \"City\": \"New Haskell side\",\n    \"ZipCode\": \"78425-0411\",\n    \"Geo\": {\n      \"Lat\": -35.8154,\n      \"Lng\": -140.2044\n    }\n  },\n  \"Phone\": \"1-500-790-8836 x5069\",\n  \"Website\": \"javier.biz\",\n  \"Company\": {\n    \"Name\": \"Kuphal and Sons\",\n    \"CatchPhrase\": \"Organic even-keeled monitoring\",\n    \"Bs\": \"open-source brand e-business\"\n  }\n} */\n```\n\n#### Replace\n\nReplace a formatted string with random numbers `#`, letters `?`, or `*` random number or letter:\n```csharp\n[Test]\npublic void Create_an_SSN()\n{\n    var ssn = new Bogus.Randomizer().Replace(\"###-##-####\");\n    ssn.Dump();\n\n    var code = new Randomizer().Replace(\"##? ??? ####\");\n    code.Dump();\n\n    var serial = new Randomizer().Replace(\"**-****\");\n    serial.Dump();\n}\n/* OUTPUT:\n\"618-19-3064\"\n\"39E SPC 0790\"\n\"L3-J9N5\"\n*/\n```\n\n#### Parse Handlebars\nYou can also parse strings in the following format:\n```csharp\n[Test]\npublic void Handlebar()\n{\n    var faker = new Faker();\n    var randomName = faker.Parse(\"{{name.lastName}}, {{name.firstName}} {{name.suffix}}\");\n    randomName.Dump();\n}\n\n/* OUTPUT:\n\"Roob, Michale PhD\"\n*/\n```\nThe name of a dataset is determined using `DataCategory` attribute or class name otherwise. (i.e `PhoneNumber` dataset in handlebars expression should be named as `phone_number`)\n\nYou can pass parameters to methods using braces:\n\n```csharp\n[Test]\npublic void HandlebarWithParameters()\n{\n    var faker = new Faker();\n    var randomName = faker.Parse(\"{{name.firstname(Female)}}, {{name.firstname(Male)}}\");\n    randomName.Dump();\n}\n\n/* OUTPUT:\n\"Lindsay, Jonathan\"\n*/\n```\n\n#### Implicit and Explicit Type Conversion\nYou can also use implicit type conversion to make your code look cleaner without having to explicitly call `Faker<T>.Generate()`.\n\n```csharp\nvar orderFaker = new Faker<Order>()\n                     .RuleFor(o => o.OrderId, f => f.IndexVariable++)\n                     .RuleFor(o => o.Item, f => f.Commerce.Product())\n                     .RuleFor(o => o.Quantity, f => f.Random.Number(1,3));\n\nOrder testOrder1 = orderFaker;\nOrder testOrder2 = orderFaker;\ntestOrder1.Dump();\ntestOrder2.Dump();\n\n/* OUTPUT:\n{\n  \"OrderId\": 0,\n  \"Item\": \"Computer\",\n  \"Quantity\": 2\n}\n{\n  \"OrderId\": 1,\n  \"Item\": \"Tuna\",\n  \"Quantity\": 3\n}\n*/\n\n//Explicit works too!\nvar anotherOrder = (Order)orderFaker;\n```\n\n#### Bulk Rules\nSometimes writing `.RuleFor(x => x.Prop, ...)` can get repetitive, use the `.Rules((f, t) => {...})` shortcut to specify rules in bulk as shown below:\n\n```csharp\npublic void create_rules_for_an_object_the_easy_way()\n{\n    var faker = new Faker<Order>()\n        .StrictMode(false)\n        .Rules((f, o) =>\n            {\n                o.Quantity = f.Random.Number(1, 4);\n                o.Item = f.Commerce.Product();\n                o.OrderId = 25;\n            });\n    Order o = faker.Generate();\n}\n```\n\n***Note***: When using the bulk `.Rules(...)` action, `StrictMode` cannot be set to `true` since individual properties of type `T` cannot be independently checked to ensure each property has a rule.\n\n\n### Using `Enumerable.Range()` and LINQ \nThe `Enumerable.Range()` and LINQ are a great supplement when creating data with **Bogus**. Here's how to generate a simple list of email addresses:\n\n```csharp\nvar faker = new Faker(\"en\");\n\nvar emailList = Enumerable.Range(1, 5)\n      .Select(_ => faker.Internet.Email())\n      .ToList();\n\n//OUTPUT:\nGustave83@hotmail.com    \nEvie33@gmail.com \nAbby_Wilkinson@yahoo.com \nCecilia.Hahn@yahoo.com   \nJasen.Waelchi85@gmail.com     \n```\n\nAdvanced Topics, Guidance, and Best Practices\n---------------------------------------------\n### Determinism\nDeterminism is a first class concept in **Bogus**. **Bogus** goes to great lengths so developers can generate the same sequence of data over multiple program executions. **Bogus** has two strategies of setting up deterministic behavior:\n\n1. **Global Seed** determinism through the `Randomizer.Seed` **global static** property.  \n    ***Pros:*** Easy to get deterministic data setup quickly.  \n    ***Cons:*** Code changes can impact other data values. Not so good for unit tests.\n\n2. **Local Seed** determinism through instance **properties** and **methods**. Specifically,  \n    * The `Faker<T>.UseSeed(int)` **method**.  \n    * The `.Random` **property** on the `Faker` facade and **DataSets**.\n  \n    ***Pros:*** Code changes can be isolated with minimal impact on determinism. Good for unit tests.    \n    ***Cons:*** Requires some forethought in design.\n\nWhen **Local Seed** determinism is used to set a seed value, the **global static** source of randomness is ignored. This has some interesting implications as described below.\n\n#### Using Global Seed determinism\nThe easiest way to get deterministic data values over multiple executions of a program is to set the `Randomizer.Seed` property as demonstrated below:\n\n```csharp\nRandomizer.Seed = new Random(1338);\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5));\n\norderFaker.Generate(5).Dump();\n```\n|  OrderId  |  Item    |  Quantity  |\n|:---------:|:--------:|:----------:|\n|  0        |  Fish    |  3         |\n|  1        |  Chair   |  1         |\n|  2        |  Gloves  |  5         |\n|  3        |  Shirt   |  4         |\n|  4        |  Hat     |  4         |\n\n\nRe-running the code above with `1338` as a global static seed value will produce the same table of data over and over again.\n\nNext, add a new `Description` property to the `Order` class along with a new `.RuleFor(o => o.Description, ..)` rule and see the data changes:\n```csharp\nRandomizer.Seed = new Random(1338);\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Description, f => f.Commerce.ProductAdjective()) //New Rule\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5));\n\norderFaker.Generate(5).Dump();\n```\n| OrderId | Item     | Description | Quantity |\n|---------|----------|-------------|----------|\n| 0       | Fish     | Fantastic   | :triangular_flag_on_post: 1 |\n| 1       | :triangular_flag_on_post: Keyboard | :triangular_flag_on_post: Gorgeous    | :triangular_flag_on_post: 5 |\n| 2       | :triangular_flag_on_post: Shirt    | :triangular_flag_on_post: Handcrafted | :triangular_flag_on_post: 3 |\n| 3       | :triangular_flag_on_post: Tuna     | :triangular_flag_on_post: Small       | :triangular_flag_on_post: 1 |\n| 4       | :triangular_flag_on_post: Table    | :triangular_flag_on_post: Awesome     | :triangular_flag_on_post: 3 |\n\nA couple of observations:\n* `Order 0: Item` value `Fish` remained the same.\n* `Order 0: Quantity` changed from `3` to `1`.\n* `Order 1: Item` has changed from a `Chair` to a `Keyboard`.\n\nIn fact, every data value with a :triangular_flag_on_post: icon has changed. This is due to the newly added property which has the effect of shifting the entire global static pseudo-random sequence off by +1. This rippling effect can be a problem if unit tests are expecting data values to remain the same. The following section below shows how we can improve the situation.\n\n#### Using Local Seed determinism\nMaking use of the `Faker<T>.UseSeed(int)` method can help limit the impact of POCO schema changes on deterministic data values that span across an entire run. Consider the following code that uses a seed value for each instance of a POCO object:\n```csharp\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5));\n    \nOrder SeededOrder(int seed){\n   return orderFaker.UseSeed(seed).Generate();\n}\n\nvar orders = Enumerable.Range(1, 5)\n   .Select(SeededOrder)\n   .ToList();\n\norders.Dump();\n```\n|  OrderId  |  Item    |  Quantity  |\n|:---------:|:--------:|:----------:|\n| 0         | Bike     | 1        |\n| 1         | Cheese   | 3        |\n| 2         | Gloves   | 4        |\n| 3         | Bacon    | 5        |\n| 4         | Pants    | 2        |\n\n\nNext, adding the `Description` property to the `Order` class and examining the output:\n\n```csharp\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Description, f => f.Commerce.ProductAdjective()) //New Rule\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5));\n    \nOrder SeededOrder(int seed){\n   return orderFaker.UseSeed(seed).Generate();\n}\n\nvar orders = Enumerable.Range(1,5)\n   .Select(SeededOrder)\n   .ToList();\n\norders.Dump();\n```\n\n| OrderId | Item   | Description | Quantity |\n|---------|--------|-------------|----------|\n| 0       | Bike   | Ergonomic   | :triangular_flag_on_post: 3 |\n| 1       | Cheese | Fantastic   | :triangular_flag_on_post: 1 |\n| 2       | Gloves | Handcrafted | :triangular_flag_on_post: 5 |\n| 3       | Bacon  | Tasty       | :triangular_flag_on_post: 3 |\n| 4       | Pants  | Gorgeous    | :triangular_flag_on_post: 2 |\n\n\nProgress! This time only the `Quantity` data values with the :triangular_flag_on_post: icon have changed. The `Item` column remained the same before and after the new addition of the `Description` property.\n\nWe can further prevent the `Quantity` data values from changing by moving the `RuleFor(o => o.Description,...)` rule line to the end of the `Faker<Order>` declaration as shown below:\n\n```csharp\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5))\n    .RuleFor(o => o.Description, f => f.Commerce.ProductAdjective()); //New Rule\n    \nOrder MakeOrder(int seed){\n   return orderFaker.UseSeed(seed).Generate();\n}\n\nvar orders = Enumerable.Range(1,5)\n   .Select(MakeOrder)\n   .ToList();\n\norders.Dump();\n````\n| OrderId | Item   | Quantity | Description |\n|:---------:|:--------:|:----------:|:-------------:|\n| 0       | Bike   | 1        | Practical   |\n| 1       | Cheese | 3        | Rustic      |\n| 2       | Gloves | 4        | Refined     |\n| 3       | Bacon  | 5        | Awesome     |\n| 4       | Pants  | 2        | Gorgeous    |\n\nMuch success! :100: :tada: The `Item` and `Quantity` values remain unchanged! The new `Description` property is added to the POCO object without any impact to other deterministic data values.\n\nAs a best practice, to achieve maximum deterministic behavior and unit test robustness with **Bogus**:\n\n* :heavy_check_mark: Add new `RuleFor` rules last in `Faker<T>` declarations.  \n* :heavy_check_mark: Avoid changing existing rules.  \n* :heavy_check_mark: Always use `Faker<T>.UseSeed(int)` to avoid using the global static seed as a source for randomness.  \n* :heavy_check_mark: When possible assert that a value exists, not the literal value itself. In other words,\n  ```csharp\n  // Don't do this:\n  firstOrder.Item.Should().Be(\"Bike\");\n\n  // Instead, do this:\n  firstOrder.Item.Should().NotBeNullOrWhiteSpace();\n  ```\n\n-------\n\nThe `Faker` facade and individual **DataSets** can also be prepared to use **local seeds** as well. The following shows how to set up the `Faker` facade and **DataSets** to use local seeds:\n\n```csharp\nvar faker = new Faker(\"en\")\n                {\n                   Random = new Randomizer(1338)\n                };\nvar lorem = new Bogus.DataSets.Lorem(\"en\"){\n                   Random = new Randomizer(1338)\n                };\nfaker.Lorem.Word().Dump();\nlorem.Word().Dump();\n\n//OUTPUT:\nminus\nminus\n```\n\nThe `.Random` property can be set multiple times without any ill effects. \n\n#### Versioning can effect determinism\nUpdating to new versions of **Bogus** on NuGet can effect determinism too. For example, when **Bogus** updates locales from **faker.js** or issues bug fixes, sometimes deterministic sequences can change. Changes to deterministic outputs are usually highlighted in the [release notes](https://github.com/bchavez/Bogus/blob/master/HISTORY.md). Changes to deterministic outputs is also considered a breaking change. **Bogus** generally follows semantic versioning rules. For example:\n\n| Version | Description |\n|---------|-------------|\n| **Bogus** v25.0.**1** | Initial version.                                                                           |\n| **Bogus** v25.0.**2** | No change to deterministic outputs or breaking changes. Possible bug fixes & improvements. |\n| **Bogus** v**26**.0.1 | Deterministic outputs may have changed or may include other breaking changes.              |\n\nAs a general rule of thumb,\n\n* :heavy_check_mark: For maximum stability for unit tests, stay within the same major versions of **Bogus**.  \n* :heavy_check_mark: For those wanting to stay up to date, assert that a value exists, not a literal value itself. In other words,\n  ```csharp\n  // Don't do this:\n  firstOrder.Item.Should().Be(\"Bike\");\n\n  // Instead, do this:\n  firstOrder.Item.Should().NotBeNullOrWhiteSpace();\n  ```\n\n#### Deterministic Dates and Times\n\n**Bogus** can generate deterministic dates and times. However, generating deterministic dates and times requires the following:\n\n1. Setting up a [seed value](#determinism).\n1. Setting up a time reference for your Faker object instance.\n\nThe following code shows how to setup deterministic dates and times:\n\n```csharp\n// Faker[T]: Set a local seed and a time reference\nvar fakerT = new Faker<Order>()\n                 .UseSeed(1338)\n                 .UseDateTimeReference(DateTime.Parse(\"1/1/1980\"))\n                 .RuleFor(o => o.SoonValue,   f => f.Date.Soon())\n                 .RuleFor(o => o.RecentValue, f => f.Date.Recent());\nfakerT.Generate().Dump();\n//  { \"SoonValue\":   \"1980-01-01T17:33:05\",\n//    \"RecentValue\": \"1979-12-31T14:07:31\" }\n\n// Faker: Set a local seed and a time reference\nvar faker = new Faker\n   {\n      Random = new Randomizer(1338),\n      DateTimeReference = DateTime.Parse(\"1/1/1980\")\n   };\nfaker.Date.Soon();   // \"1980-01-01T17:33:05\"\nfaker.Date.Recent(); // \"1979-12-31T14:07:31\"\n```\nWith a time reference set and a [seed](#determinism), dates and times should be deterministic across multiple runs of a program.\n\n\nF# and VB.NET Examples\n----------------------\n#### The Fabulous F# Examples\n* Using the `Faker` facade with immutable **F#** record types:\n\n```fsharp\ntype Customer = { FirstName : string\n                  LastName : string\n                  Age : int\n                  Title : string }\n\n//The faker facade\nlet f = Faker();\n\nlet generator() = \n   { FirstName = f.Name.FirstName()\n     LastName  = f.Name.LastName()\n     Age       = f.Random.Number(18,60)\n     Title     = f.Name.JobTitle() }\n     \ngenerator() |> Dump |> ignore\n\n(* OUTPUT:\n  FirstName = \"Russell\"\n  LastName = \"Nader\"\n  Age = 34\n  Title = \"Senior Web Officer\"\n*)\n```\n\n* Using the `Faker<T>` class with immutable **F#** record types:\n\n```fsharp\ntype Customer = { FirstName : string\n                  LastName : string\n                  Age : int\n                  Title : string }\n\nlet customerFaker =\n    Bogus\n        .Faker<Customer>()\n        .CustomInstantiator(fun f ->\n             { FirstName = f.Name.FirstName()\n               LastName  = f.Name.LastName()\n               Age       = f.Random.Number(18,60)\n               Title     = f.Name.JobTitle() })\n\ncustomerFaker.Generate() |> Dump |> ignore\n\n(* OUTPUT:\n  FirstName = \"Sasha\"\n  LastName = \"Roberts\"\n  Age = 20;\n  Title = \"Internal Security Specialist\"\n*)\n```\n\n* Using the `Faker<T>` class with mutable classes in **F#**:\n\n```fsharp\nopen Bogus\ntype Customer() =\n  member val FirstName = \"\" with get, set\n  member val LastName = \"\" with get, set\n  member val Age = 0 with get, set\n  member val Title = \"\" with get, set\n\nlet faker = \n        Faker<Customer>()\n          //Make a rule for each property\n          .RuleFor( (fun c -> c.FirstName), fun (f:Faker) -> f.Name.FirstName() )\n          .RuleFor( (fun c -> c.LastName), fun (f:Faker) -> f.Name.LastName() )\n\n          //Or, alternatively, in bulk with .Rules()\n          .Rules( fun f c -> \n                    c.Age <- f.Random.Int(18,35) \n                    c.Title <- f.Name.JobTitle() )\n  \nfaker.Generate() |> Dump |> ignore\n\n(* OUTPUT:\n  FirstName: Jarrell\n  LastName: Tremblay\n  Age: 32\n  Title: Senior Web Designer\n*)\n```\n\n#### The Very Basic VB.NET Example\n```vb\nImports Bogus\n\nPublic Class Customer\n    Public Property FirstName() As String\n    Public Property LastName() As String\n    Public Property Age() As Integer\n    Public Property Title() As String\nEnd Class\n\nSub Main\n    Dim faker As New Faker(Of Customer)\n    \n    '-- Make a rule for each property\n    faker.RuleFor( Function(c) c.FirstName, Function(f) f.Name.FirstName) _\n         .RuleFor( Function(c) c.LastName, Function(f) f.Name.LastName) _\n         _\n         .Rules( Sub(f, c)   '-- Or, alternatively, in bulk with .Rules() \n                   c.Age = f.Random.Int(18,35) \n                   c.Title = f.Name.JobTitle()\n                 End Sub )\n            \n    faker.Generate.Dump\nEnd Sub\n\n' OUTPUT:\n' FirstName: Jeremie \n' LastName: Mills \n' Age: 32 \n' Title: Quality Supervisor \n```\n\n\n\nBuilding From Source\n--------\n\nThe following section is only useful for people looking to contribute to **Bogus** or make custom modifications to **Bogus**. This section includes information about building **Bogus** from source code and is not required to operate or run **Bogus** in **.NET** applications.\n\nThe minimum requirements to build **Bogus** from source code are as follows:\n* **Windows 11** or later.\n* [**Git for Windows**](https://git-scm.com/downloads) `v2.39.2` or later.\n* [**.NET Framework**](https://dotnet.microsoft.com/download/dotnet-framework) `v4.7.2`.\n* **.NET SDK**\n    * LTS [`SDK v8.0.100`](https://dotnet.microsoft.com/download/dotnet/8.0)\n    * LTS [`SDK v6.0.417`](https://dotnet.microsoft.com/download/dotnet/6.0)\n* Optional:\n    * Visual Studio 2022 or later - IDE with C# 10 support.\n\n#### Build Instructions\n* Download the source code.\n* Open command prompt and run `build.cmd`:\n    * `build restore` - restores all project references.\n    * `build compile` - the main dotnet build task.\n    * `build clean` - cleans sources and files.\n    * `build zip` - creates a nice zip file with debug and release binaries.\n    * `build pack` - builds **NuGet** packages.\n    * `build test` - runs all unit tests. \n    \nThe following folders will be created depending on the build task executed:\n * `\\__compile` - binary output folder for the compiler.\n * `\\__package` - output folder for zip and **NuGet** packages.\n * `\\__test` - test results folder.\n\n#### Build Environment Variables\n* `set FORCE_VERSION=1.2.3`  \n   If `FORCE_VERSION` environment variable is set with a semantic version number (eg: `x.y.z`), the build tasks will use the `FORCE_VERSION` to produce builds with the exact version number. Useful for testing out-of-band custom builds. However, it is not possible to reproduce exact binary equivalents of released **NuGet** packages because packages release on **NuGet** contain assemblies that are digitally signed with assembly signing enabled. The public does not have access to the signing key. \n\n#### Rebundling Locales\nRe-bundling the latest locale data from **faker.js** requires the following software installed:  \n\n* [**Volta 1.1.1**](https://volta.sh) or later:\n   * Installs [**NodeJS**](https://nodejs.org/) `v12.18.1` or higher.\n* [**gulp**](https://gulpjs.com/) `v4` or higher.\n\nSteps to re-bundle locale data from **faker.js**:\n1. `git clone https://github.com/bchavez/Bogus.git`\n1. `cd Bogus` \n1. `git submodule init`\n1. `git submodule update`\n1. Ensure **NodeJS** and `gulp` are properly installed.\n1. `cd Source\\Builder`\n1. `npm install` to install required dev dependencies.\n1. `npx gulp importLocales` to regenerate locales in `Source\\Bogus\\data`.\n1. Finally, run `build.cmd`.\n\n### License\n* [MIT License](https://github.com/bchavez/Bogus/blob/master/LICENSE)\n\n\nSponsors\n---------\nA special thank you to the companies that have sponsored and helped with the development of **Bogus** in big ways.\n\n| Date |   | Company |\n|------|---|-------|\n| **2024 - October** | <img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/aws.svg\" width=\"100\" /> | [**Amazon AWS .NET FOSS Fund**](https://github.com/aws/dotnet-foss?tab=readme-ov-file#funding-recipients)\n| **2022 - June** | <img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/github.svg\" width=\"100\" /> | [**GitHub**](https://github.blog/open-source/maintainers/thank-you-to-our-maintainers) |\n\n\nContributors\n---------\nCreated by [Brian Chavez](https://bchavez.bitarmory.com).\n\nA big thanks to GitHub and all contributors:\n\n* [Anton Georgiev](https://github.com/antongeorgiev)\n* [Martijn Laarman](https://github.com/Mpdreamz)\n* [Anrijs Vitolins](https://github.com/salixzs)\n* [Pi Lanningham](https://github.com/quantumplation)\n* [JvanderStad](https://github.com/JvanderStad)\n* [Giuseppe Dimauro](https://github.com/gdimauro)\n\n\n"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.9794921875,
          "content": "version: '{build}'\nimage: Visual Studio 2022\n\nenvironment:\n  NUKE_TELEMETRY_OPTOUT: 1\n  BogusSnkZipPassword: # OpenSource / Bogus.snk.enc.zip\n    secure: OqTnyfgOL1S7+NYqo4f5Mc72RsozR4CwAQ6K/YwqPBlG2LOPSoRHm9JxIHHYTecR5B3IiEe0xEyjulbBjNwQuMMSCPX+nr6oH/KfBTx9rf4=\n\nskip_commits:\n  message: /(//skip\\W*ci)|(read\\W*me)/\n\ninit:\n    - ps: |\n            If ($Env:APPVEYOR_REPO_TAG_NAME -match \"-\"){\n              Set-AppveyorBuildVariable -Name \"IsPreRelease\" -Value True\n            }\n            Else{\n              Set-AppveyorBuildVariable -Name \"IsPreRelease\" -Value False\n            }\n\nbuild_script: build.cmd ci\n\ntest: off\n\nartifacts:\n  - path: __package\\*.nupkg\n    name: NuGet\n  - path: __package\\*.snupkg\n    name: Symbols\n  - path: __package\\*.zip\n    name: Zip\n\n\nnuget:\n    disable_publish_on_pr: true\n\ndeploy:\n    - provider: GitHub\n      release: 'Release $(APPVEYOR_REPO_TAG_NAME) build $(APPVEYOR_BUILD_VERSION)'\n      tag: $(APPVEYOR_REPO_TAG_NAME)\n      description: '[**CHANGE LOG**](https://github.com/bchavez/Bogus/blob/master/HISTORY.md)'\n      prerelease: $(IsPreRelease)\n      artifact: Zip, NuGet, Symbols\n      auth_token:\n          secure: 2XX+rKvAK7FXcKIKYHE4vDjOmM4hrzNy8lvS84IwU605AekfBB9XtSr82shJwhHlYMD+01g7gM/P8e9ko83ovFpAr3C2KvoaJRB7RqyUOquKK8RkcXGc8rQyylcRRrA6\n      on:\n          branch: master\n          appveyor_repo_tag_name: /v\\d+\\.\\d+\\.\\d+/ \n          appveyor_repo_tag: true\n\n    - provider: NuGet\n      server:\n      symbol_server:\n      skip_symbols: false\n      api_key:\n          secure: qrQj9+U7NioCkMEJubm65X/FgT6lA4tvms8C04/B3rOV4f7mCiCMqhJl5B9Gaeo5\n      artifact: NuGet, Symbols\n      on:\n          branch: master\n          appveyor_repo_tag_name: /v\\d+\\.\\d+\\.\\d+/\n          appveyor_repo_tag: true\n\n\non_failure:\n    - ps: |\n            # Enables RDP for debugging and setup some tools\n            #$blockRdp = $true; choco install notepad2; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n            "
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.087890625,
          "content": "@echo off\ncls\n\nSET BUILD_ROOT=.\n\ndotnet tool restore\n\ndotnet nuke %1 --root \"%BUILD_ROOT%\""
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 1.7119140625,
          "content": "[CmdletBinding()]\nParam(\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$BuildArguments\n)\n\nWrite-Output \"PowerShell $($PSVersionTable.PSEdition) version $($PSVersionTable.PSVersion)\"\n\nSet-StrictMode -Version 2.0; $ErrorActionPreference = \"Stop\"; $ConfirmPreference = \"None\"; trap { Write-Error $_ -ErrorAction Continue; exit 1 }\n$PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\n$BuildProjectFile = \"$PSScriptRoot\\Source\\Builder\\Builder.csproj\"\n$TempDirectory = \"$PSScriptRoot\\Source\\..\\.nuke\\temp\"\n\n$DotNetGlobalFile = \"$PSScriptRoot\\Source\\..\\global.json\"\n\n$env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE = 1\n$env:DOTNET_CLI_TELEMETRY_OPTOUT = 1\n$env:DOTNET_MULTILEVEL_LOOKUP = 0\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction ExecSafe([scriptblock] $cmd) {\n    & $cmd\n    if ($LASTEXITCODE) { exit $LASTEXITCODE }\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif ($null -ne (Get-Command \"dotnet\" -ErrorAction SilentlyContinue) -and `\n     $(dotnet --version) -and $LASTEXITCODE -eq 0) {\n    $env:DOTNET_EXE = (Get-Command \"dotnet\").Path\n}\n\nWrite-Output \"Microsoft (R) .NET SDK version $(& $env:DOTNET_EXE --version)\"\n\nExecSafe { & $env:DOTNET_EXE build $BuildProjectFile /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet }\nExecSafe { & $env:DOTNET_EXE run --project $BuildProjectFile --no-build -- $BuildArguments }\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 1.1318359375,
          "content": "#!/usr/bin/env bash\n\nbash --version 2>&1 | head -n 1\n\nset -eo pipefail\nSCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\nBUILD_PROJECT_FILE=\"$SCRIPT_DIR/Source/Builder/Builder.csproj\"\nTEMP_DIRECTORY=\"$SCRIPT_DIR/.nuke/temp\"\n\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1\nexport DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1\nexport DOTNET_MULTILEVEL_LOOKUP=0\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif [ -x \"$(command -v dotnet)\" ] && dotnet --version &>/dev/null; then\n    export DOTNET_EXE=\"$(command -v dotnet)\"\nfi\n\necho \"Microsoft (R) .NET SDK version $(\"$DOTNET_EXE\" --version)\"\n\n\"$DOTNET_EXE\" build \"$BUILD_PROJECT_FILE\" /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet\n\"$DOTNET_EXE\" run --project \"$BUILD_PROJECT_FILE\" --no-build -- \"$@\"\n"
        }
      ]
    }
  ]
}