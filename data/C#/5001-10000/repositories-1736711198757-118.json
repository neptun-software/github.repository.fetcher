{
  "metadata": {
    "timestamp": 1736711198757,
    "page": 118,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ldqk/Masuit.Tools",
      "stars": 5711,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitee",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.052734375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\n[Xx]64/\n[Xx]86/\n[Bb]uild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# TODO: Un-comment the next line if you do not want to checkin\n# your web deploy settings because they may include unencrypted\n# passwords\n#*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directory\nAppPackages/\nBundleArtifacts/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# LightSwitch generated files\nGeneratedArtifacts/\nModelManifest.xml\n\n# Paket dependency manager\n.paket/paket.exe\n\n# FAKE - F# Make\n.fake/\n/Masuit.Tools.Core/Masuit.Tools.Core.xml\n/Masuit.Tools.Core/Masuit.Tools.Core.xml\n/Masuit.Tools.Abstractions.xml\n/Masuit.Tools.Abstractions/Masuit.Tools.Abstractions.xml\n/Masuit.Tools.Abstractions.xml\n/Masuit.Tools.Abstractions/Reflection/ClassHelper.cs\n/Masuit.Tools.Abstractions/Mapping\n/Test/Masuit.Tools.Abstractions.Test/Mapping\n/Test/Masuit.Tools.ExpressionMapperBenchmark\n**/TestClass.cs\n"
        },
        {
          "name": "BenchmarkTest",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.095703125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nadmin@masuit.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.0712890625,
          "content": "欢迎大家提交各种有趣又实用的通用函数封装到本库。\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.125,
          "content": "﻿<Project>\n <PropertyGroup>\n   <Version>2024.7.4</Version>\n   <Deterministic>true</Deterministic>\n </PropertyGroup>\n</Project>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "MIT License\n\nCopyright (c) 2017 ldqk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Masuit.Tools.Abstractions",
          "type": "tree",
          "content": null
        },
        {
          "name": "Masuit.Tools.AspNetCore.ResumeFileResults.WebTest",
          "type": "tree",
          "content": null
        },
        {
          "name": "Masuit.Tools.AspNetCore",
          "type": "tree",
          "content": null
        },
        {
          "name": "Masuit.Tools.Core",
          "type": "tree",
          "content": null
        },
        {
          "name": "Masuit.Tools.Excel",
          "type": "tree",
          "content": null
        },
        {
          "name": "Masuit.Tools.Net45",
          "type": "tree",
          "content": null
        },
        {
          "name": "Masuit.Tools.NoSQL.MongoDBClient",
          "type": "tree",
          "content": null
        },
        {
          "name": "Masuit.Tools.sln",
          "type": "blob",
          "size": 7.7353515625,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# 17\nVisualStudioVersion = 17.1.32210.238\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Masuit.Tools.Net\", \"Masuit.Tools\\Masuit.Tools.Net.csproj\", \"{275D5A0D-C49C-497E-A4B5-F40285C2495F}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Masuit.Tools.Core\", \"Masuit.Tools.Core\\Masuit.Tools.Core.csproj\", \"{149E6872-CE95-493B-B136-535E64C65A49}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"测试\", \"测试\", \"{E0B8FBD1-A28A-4420-9DE2-6BD06035CBAC}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Masuit.Tools.NoSQL.MongoDBClient\", \"Masuit.Tools.NoSQL.MongoDBClient\\Masuit.Tools.NoSQL.MongoDBClient.csproj\", \"{2C4FF8E9-2662-4618-ABA4-BA55AA5EA9AB}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Masuit.Tools.Abstractions\", \"Masuit.Tools.Abstractions\\Masuit.Tools.Abstractions.csproj\", \"{74E7C0A2-499D-408F-A2E4-08878700C2DE}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Masuit.Tools.Core.Test\", \"Test\\Masuit.Tools.Core.Test\\Masuit.Tools.Core.Test.csproj\", \"{B8BFA5B2-20BF-4D9C-A9F3-5E33EC6A0B20}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Masuit.Tools.Abstractions.Test\", \"Test\\Masuit.Tools.Abstractions.Test\\Masuit.Tools.Abstractions.Test.csproj\", \"{61430D45-3808-49B5-BDF3-4536DA399DD4}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Masuit.Tools.AspNetCore.ResumeFileResults.WebTest\", \"Test\\Masuit.Tools.AspNetCore.ResumeFileResults.WebTest\\Masuit.Tools.AspNetCore.ResumeFileResults.WebTest.csproj\", \"{99185F12-DFAD-4DB8-A2C4-C7E9700C0A31}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Masuit.Tools.Test\", \"Test\\Masuit.Tools.Test\\Masuit.Tools.Test.csproj\", \"{AB9F4635-0ACB-4E5E-8E1B-431E0818CF60}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Masuit.Tools.Excel\", \"Masuit.Tools.Excel\\Masuit.Tools.Excel.csproj\", \"{47DF4A43-9C19-4572-B025-876A7710C1CF}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Masuit.Tools.Net45\", \"Masuit.Tools.Net45\\Masuit.Tools.Net45.csproj\", \"{F51077A5-1CCA-4576-89BB-5447AC3D8DBC}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Masuit.Tools.AspNetCore\", \"Masuit.Tools.AspNetCore\\Masuit.Tools.AspNetCore.csproj\", \"{73BA93B7-C6AE-4B39-892E-3596D91BF96C}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NetCoreTest\", \"NetCoreTest\\NetCoreTest.csproj\", \"{144D7A0C-002D-48E4-8814-EA14011CFFFC}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"BenchmarkTest\", \"BenchmarkTest\\BenchmarkTest.csproj\", \"{0599ACF0-8495-4E72-AB5E-B7446A5C413A}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{275D5A0D-C49C-497E-A4B5-F40285C2495F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{275D5A0D-C49C-497E-A4B5-F40285C2495F}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{275D5A0D-C49C-497E-A4B5-F40285C2495F}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{275D5A0D-C49C-497E-A4B5-F40285C2495F}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{149E6872-CE95-493B-B136-535E64C65A49}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{149E6872-CE95-493B-B136-535E64C65A49}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{149E6872-CE95-493B-B136-535E64C65A49}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{149E6872-CE95-493B-B136-535E64C65A49}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{2C4FF8E9-2662-4618-ABA4-BA55AA5EA9AB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2C4FF8E9-2662-4618-ABA4-BA55AA5EA9AB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2C4FF8E9-2662-4618-ABA4-BA55AA5EA9AB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2C4FF8E9-2662-4618-ABA4-BA55AA5EA9AB}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{74E7C0A2-499D-408F-A2E4-08878700C2DE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{74E7C0A2-499D-408F-A2E4-08878700C2DE}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{74E7C0A2-499D-408F-A2E4-08878700C2DE}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{74E7C0A2-499D-408F-A2E4-08878700C2DE}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B8BFA5B2-20BF-4D9C-A9F3-5E33EC6A0B20}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B8BFA5B2-20BF-4D9C-A9F3-5E33EC6A0B20}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B8BFA5B2-20BF-4D9C-A9F3-5E33EC6A0B20}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B8BFA5B2-20BF-4D9C-A9F3-5E33EC6A0B20}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{61430D45-3808-49B5-BDF3-4536DA399DD4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{61430D45-3808-49B5-BDF3-4536DA399DD4}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{61430D45-3808-49B5-BDF3-4536DA399DD4}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{61430D45-3808-49B5-BDF3-4536DA399DD4}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{99185F12-DFAD-4DB8-A2C4-C7E9700C0A31}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{99185F12-DFAD-4DB8-A2C4-C7E9700C0A31}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{99185F12-DFAD-4DB8-A2C4-C7E9700C0A31}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{99185F12-DFAD-4DB8-A2C4-C7E9700C0A31}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{AB9F4635-0ACB-4E5E-8E1B-431E0818CF60}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{AB9F4635-0ACB-4E5E-8E1B-431E0818CF60}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{AB9F4635-0ACB-4E5E-8E1B-431E0818CF60}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{AB9F4635-0ACB-4E5E-8E1B-431E0818CF60}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{47DF4A43-9C19-4572-B025-876A7710C1CF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{47DF4A43-9C19-4572-B025-876A7710C1CF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{47DF4A43-9C19-4572-B025-876A7710C1CF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{47DF4A43-9C19-4572-B025-876A7710C1CF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{F51077A5-1CCA-4576-89BB-5447AC3D8DBC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F51077A5-1CCA-4576-89BB-5447AC3D8DBC}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F51077A5-1CCA-4576-89BB-5447AC3D8DBC}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{F51077A5-1CCA-4576-89BB-5447AC3D8DBC}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{73BA93B7-C6AE-4B39-892E-3596D91BF96C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{73BA93B7-C6AE-4B39-892E-3596D91BF96C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{73BA93B7-C6AE-4B39-892E-3596D91BF96C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{73BA93B7-C6AE-4B39-892E-3596D91BF96C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{144D7A0C-002D-48E4-8814-EA14011CFFFC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{144D7A0C-002D-48E4-8814-EA14011CFFFC}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{144D7A0C-002D-48E4-8814-EA14011CFFFC}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{144D7A0C-002D-48E4-8814-EA14011CFFFC}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0599ACF0-8495-4E72-AB5E-B7446A5C413A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0599ACF0-8495-4E72-AB5E-B7446A5C413A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0599ACF0-8495-4E72-AB5E-B7446A5C413A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0599ACF0-8495-4E72-AB5E-B7446A5C413A}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{B8BFA5B2-20BF-4D9C-A9F3-5E33EC6A0B20} = {E0B8FBD1-A28A-4420-9DE2-6BD06035CBAC}\n\t\t{61430D45-3808-49B5-BDF3-4536DA399DD4} = {E0B8FBD1-A28A-4420-9DE2-6BD06035CBAC}\n\t\t{99185F12-DFAD-4DB8-A2C4-C7E9700C0A31} = {E0B8FBD1-A28A-4420-9DE2-6BD06035CBAC}\n\t\t{AB9F4635-0ACB-4E5E-8E1B-431E0818CF60} = {E0B8FBD1-A28A-4420-9DE2-6BD06035CBAC}\n\t\t{0599ACF0-8495-4E72-AB5E-B7446A5C413A} = {E0B8FBD1-A28A-4420-9DE2-6BD06035CBAC}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {B57FDA8F-95CF-478B-A0A8-7FF0F01CCFAB}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "Masuit.Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "NetCoreTest",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 74.9765625,
          "content": "﻿# Masuit.Tools(码数吐司库)\n\n[![许可证](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/ldqk/Masuit.Tools/blob/master/LICENSE)\n[![nuget](https://img.shields.io/nuget/v/Masuit.Tools.Core.svg)](https://www.nuget.org/packages/Masuit.Tools.Core)\n[![nuget](https://img.shields.io/nuget/dt/Masuit.Tools.Core.svg)](https://www.nuget.org/packages/Masuit.Tools.Core)\n![codeSize](https://img.shields.io/github/languages/code-size/ldqk/Masuit.Tools.svg)\n![编程语言](https://img.shields.io/github/languages/top/ldqk/Masuit.Tools.svg)\n<a href=\"https://gitee.com/masuit/Masuit.Tools\"><img src=\"https://gitee.com/static/images/logo-black.svg\" height=\"24\"></a>\n<a href=\"https://github.com/ldqk/Masuit.Tools\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Font_Awesome_5_brands_github.svg/54px-Font_Awesome_5_brands_github.svg.png\" height=\"24\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/GitHub_logo_2013.svg/128px-GitHub_logo_2013.svg.png\" height=\"24\"></a>\n\n全龄段友好的C#.NET万能工具库，不管你是菜鸟新手还是骨灰级玩家都能轻松上手，这个库包含一些常用的操作类，大都是静态类，加密解密，反射操作，树结构，文件探测，权重随机筛选算法，分布式短id，表达式树，linq扩展，文件压缩，多线程下载，硬件信息，字符串扩展方法，日期时间扩展操作，中国农历，大文件拷贝，图像裁剪，验证码，断点续传，集合扩展、Excel导出等常用封装。\n\n**诸多功能集一身，代码量不到2MB！**\n[官网教程](https://www.masuit.tools)\n![Masuit Tools](https://user-images.githubusercontent.com/20254980/208012013-28813c43-daa2-4b64-9e4a-78829325a7a4.png)\n\n项目开发模式：日常代码积累+网络搜集\n\n⭐⭐⭐喜欢这个项目的话就Star、Fork、Follow素质三连关♂注一下吧⭐⭐⭐\n\n关于本项目，如果你有任何不懂的地方或使用过程中遇到任何问题，可以直接提issue或私信联系我，我会为你提供**完全免费**的技术指导，当然，如果你觉得不好意思接受免费的指导，想适当打赏我也是不会拒绝的！🤣🤣🤣\n\n## 本项目已得到[JetBrains](https://www.jetbrains.com/shop/eform/opensource)的支持！\n\n<img src=\"https://www.jetbrains.com/shop/static/images/jetbrains-logo-inv.svg\" height=\"100\">\n\n## Star趋势\n\n<img src=\"https://starchart.cc/ldqk/Masuit.Tools.svg\">\n\n## 请注意：\n\n一旦使用本开源项目以及引用了本项目或包含本项目代码的公司因为违反劳动法（包括但不限定非法裁员、超时用工、雇佣童工等）在任何法律诉讼中败诉的，一经发现，本项目作者有权利追讨本项目的使用费（**公司工商注册信息认缴金额的2-5倍作为本项目的授权费**），或者直接不允许使用任何包含本项目的源代码！ `人力外包公司`或 `007公司`需要使用本类库，请联系作者进行商业授权！其他企业或个人可随意使用不受限。007那叫用人，也是废人。8小时工作制才可以让你有时间自我提升，将来有竞争力。反对007，人人有责！\n\n## 建议开发环境\n\n操作系统：Windows 11 23H2及以上版本\n\n开发工具：VisualStudio2022 v17.8及以上版本\n\nSDK：.Net Core 2.1.0及以上**所有版本**\n\n## 安装程序包\n\n### 基础功能包\n#### .NET Framework ≥ 4.6.2\n\n```shell\nPM> Install-Package Masuit.Tools.Net\n```\n\n#### .NET Standard ≥ 2.1 或只想使用一些基本功能\n\n`通用项目推荐首选包`\n\n```shell\nPM> Install-Package Masuit.Tools.Abstraction\n```\n\n#### .NET Core ≥ 2.1\n\n`.NET Core项目推荐首选包`\n\n```shell\nPM> Install-Package Masuit.Tools.Core\n```\n\n#### .NET Framework 4.5特供版\n\n请注意：`这是.NET Framework 4.5的专用版本，相比4.6.2及.NET Core的版本，阉割了Redis、HTML、文件压缩、ASP.NET扩展、硬件监测、Session扩展等一些功能。`**如果你的项目版本高于4.6.2，请务必使用上述版本的包，以享受完整的功能体验！**\n\n```shell\nPM> Install-Package Masuit.Tools.Net45\n```\n\n### 增值包\n\n#### Masuit.Tools.AspNetCore\n\n`AspNetCore项目推荐首选包`\nASP.NET Core Web专用包，包含Masuit.Tools.Core的全部功能，并且增加了一些对ASP.NET Core Web功能的额外支持。\n\n#### Masuit.Tools.Excel\n\nExcel导入导出的专用独立包\n\n#### Masuit.Tools.NoSQL.MongoDBClient\n\nmongodb的封装操作类独立包\n\n## 为工具库注册配置(可选的，按需配置)\n\n工具库需要用到外部配置节，.NET Framework项目配置在web.config/app.config的AppSettings配置节中，.NET Core项目配置在appsettings.json中：\n\n1. EmailDomainWhiteList，邮箱校验需要用到的白名单域名，英文逗号分隔，每个元素支持正则表达式，若未配置，则不启用邮箱校验白名单，示例: `\"^\\\\w{1,5}@qq.com,^\\\\w{1,5}@163.com,^\\\\w{1,5}@gmail.com,^\\\\w{1,5}@outlook.com\"`\n2. EmailDomainBlockList，邮箱校验需要用到的黑名单域名，英文逗号分隔，每个元素支持正则表达式，且黑名单优先级高于白名单，若未配置，则不启用邮箱校验黑白名单\n\n```csharp\npublic Startup(IConfiguration configuration)\n{\n    configuration.AddToMasuitTools(); // 若未调用，则默认自动尝试加载appsettings.json\n}\n```\n\n## 特色功能示例代码\n\n### 在线体验\n\nhttps://replit.com/@ldqk/MasuitToolsDemo?v=1#main.cs\n\n### 0. 一些创意类型\n\n`DisposableDictionary`：可被Disposable的字典类型，用于存放Value是Disposable类型的数据，用法和普通字典一致\n\n`NullableConcurrentDictionary`/`NullableDictionary`：Key可为null的字典类型，用法和普通字典一致\n\n`ConcurrentHashSet`：并发HashSet，用法和HashSet一致\n\n`ConcurrentLimitedQueue`：定长并发队列，特点是长度是固定的，用法与ConcurrentQueue一致\n\n`LimitedQueue`：定长队列，特点是长度是固定的，用法与Queue一致\n\n`LargeMemoryStream`：超大内存流，最大可支持1TB数据，推荐当数据流大于2GB时使用，用法与MemoryStream一致\n\n`PooledMemoryStream`：池化内存流，可内存复用，用法与MemoryStream一致，性能比MemoryStream好\n\n`ITree<T>`：树形实体接口约束，实现该接口可让类型实现一些树形操作\n\n`ChineseCalendar`：中国农历类型，可以实现天干地支节气等数据的获取\n\n`Clay`/`DynamicFactory`：粘土动态类型，可实现类似js的弱类型编程\n\n`RadarChart`：雷达图类型，可用于做数据分析或用户行为画像\n\n`Circle`：圆形类型，可实现⚪的相交相切相离的判断\n\n`Sphere`：球体类型，可实现计算球体上两点的弧长计算，相交相切相离的判断\n\n`MimeMapper`：mime类型映射\n\n`VersionNumber`：版本号类型，比System.Version功能更多一点，用法一致\n\n具体用法，可参阅后文详细示例：\n\n### 1. 检验字符串是否是Email、手机号、URL、IP地址、身份证号等\n\n```csharp\nvar (isMatch, match) = \"337845818@qq.com\".MatchEmail(); // 可在appsetting.json中添加EmailDomainWhiteList和EmailDomainBlockList配置邮箱域名黑白名单，逗号分隔，如\"EmailDomainBlockList\": \"^\\\\w{1,5}@qq.com,^\\\\w{1,5}@163.com,^\\\\w{1,5}@gmail.com,^\\\\w{1,5}@outlook.com\",\nbool isInetAddress = \"114.114.114.114\".MatchInetAddress(); // 匹配IP地址\nbool isUrl = \"http://masuit.org/20/history\".MatchUrl(); // 匹配url\nbool isPhoneNumber = \"15205201520\".MatchPhoneNumber(); // 匹配手机号\nbool isLandline = \"01088888888\".MatchLandline(); // 匹配座机号\nbool isIdentifyCard = \"312000199502230660\".MatchIdentifyCard();// 校验中国大陆身份证号\nbool isCNPatentNumber = \"200410018477.9\".MatchCNPatentNumber(); // 校验中国专利申请号或专利号，是否带校验位，校验位前是否带“.”，都可以校验，待校验的号码前不要带CN、ZL字样的前缀\nbool isUSCC = \"200410018477.9\".MatchUSCC(); // 校验企业统一社会信用代码\n```\n\n### 2.硬件监测(需要管理员权限，仅支持Windows，部分函数仅支持物理机模式)\n\n```csharp\nfloat load = SystemInfo.CpuLoad;// 获取CPU占用率\nlong physicalMemory = SystemInfo.PhysicalMemory;// 获取物理内存总数\nlong memoryAvailable = SystemInfo.MemoryAvailable;// 获取物理内存可用率\ndouble freePhysicalMemory = SystemInfo.GetFreePhysicalMemory();// 获取可用物理内存\ndouble temperature = SystemInfo.GetCPUTemperature();// 获取CPU温度\nint cpuCount = SystemInfo.GetCpuCount();// 获取CPU核心数\nvar ipAddress = SystemInfo.GetLocalIPs();// 获取本机所有IP地址\nstring localUsedIp = SystemInfo.GetLocalUsedIP();// 获取本机当前正在使用的IP地址\nIList<string> macAddress = SystemInfo.GetMacAddress();// 获取本机所有网卡mac地址\nstring osVersion = Windows.GetOsVersion();// 获取操作系统版本\nRamInfo ramInfo = SystemInfo.GetRamInfo();// 获取内存信息\nvar cpuSN=SystemInfo.GetCpuInfo()[0].SerialNumber; // CPU序列号\nvar driveSN=SystemInfo.GetDiskInfo()[0].SerialNumber; // 硬盘序列号\n\n// 快速方法\nvar cpuInfos = CpuInfo.Locals; // 快速获取CPU的信息\nvar ramInfo = RamInfo.Local; // 快速获取内存的信息\nvar diskInfos = DiskInfo.Locals; // 快速获取硬盘的信息\nvar biosInfo = BiosInfo.Local; // 快速获取主板的信息\n\n// 获取进程的CPU和内存占用率\nvar process = Process.GetProcessById(1234); // pid获取\nvar cpuUsage = process.GetProcessCpuUsage();\nvar memory = process.GetProcessMemory();\n\nvar processes = Process.GetProcessesByName(\"msedge\"); // 进程名获取\nforeach (var p in processes)\n{\n    var cpu = p.GetProcessCpuUsage();\n    var mem = p.GetProcessMemory();\n    Console.WriteLine($\"Process {p.ProcessName} CPU: {cpu}%, Memory: {mem}MB\");\n}\n```\n\n### 3.html的防XSS处理：\n\n```csharp\nstring html = @\"<link href='/Content/font-awesome/css' rel='stylesheet'/>\n        <!--[if IE 7]>\n        <link href='/Content/font-awesome-ie7.min.css' rel='stylesheet'/>\n        <![endif]-->\n        <script src='/Scripts/modernizr'></script>\n        <div id='searchBox' role='search'>\n        <form action='/packages' method='get'>\n        <span class='user-actions'><a href='/users/account/LogOff'>退出</a></span>\n        <input name='q' id='searchBoxInput'/>\n        <input id='searchBoxSubmit' type='submit' value='Submit' />\n        </form>\n        </div>\";\nstring s = html.HtmlSanitizerStandard();// 清理后：<div><span><a href=\"/users/account/LogOff\">退出</a></span></div>\nstring s = html.HtmlSanitizerCustom(); // 自定义清理\n```\n\n### 4.整理Windows系统的内存：\n\n类似于各大系统优化软件的加速球功能\n\n```csharp\nWindows.ClearMemorySilent();\n```\n\n### 5.任意进制转换/中文数字\n\n#### 大写数字\n\n```csharp\nvar num=123.45.ToChineseMoney(); // 壹佰贰拾叁元肆角伍分\nvar num=123.45.ToChineseNumber(); // 一百二十三点四五\n```\n\n#### 进制转换\n\n可用于生成短id，短hash，随机字符串等操作，纯数学运算。\n\n```csharp\nNumberFormater nf = new NumberFormater(36);//内置2-95进制的转换\n//NumberFormater nf = new NumberFormater(\"0123456789abcdefghijklmnopqrstuvwxyz\");// 自定义进制字符，可用于生成验证码，自定义字符可支持任意进制，你传1w个字符进去那就支持一万进制(手动狗头)\nstring s36 = nf.ToString(12345678);\nlong num = nf.FromString(\"7clzi\");\nConsole.WriteLine(\"12345678的36进制是：\" + s36); // 7clzi\nConsole.WriteLine(\"36进制的7clzi是：\" + num); // 12345678\nvar s = new NumberFormater(91).ToString(new Random().Next(100000, int.MaxValue)); //配合随机数生成随机字符串\n```\n\n```csharp\n//扩展方法形式调用\nvar bin=12345678.ToBase(36);// 10进制转36进制：7clzi\nvar num=\"7clzi\".FromBase(36);// 36进制转10进制：12345678\n```\n\n```csharp\n//超大数字的进制转换\nvar num = \"e6186159d38cd50e0463a55e596336bd\".FromBaseBig(16); // 大数字16进制转10进制\nConsole.WriteLine(num); // 十进制：305849028665645097422198928560410015421\nConsole.WriteLine(num.ToBase(64)); // 64进制：3C665pQUPl3whzFlVpoPqZ，22位长度\nConsole.WriteLine(num.ToBase(36)); // 36进制：dmed4dkd5bhcg4qdktklun0zh，25位长度\nConsole.WriteLine(num.ToBase(7)); // 7进制：2600240311641665565300424545154525131265221035，46位长度\nConsole.WriteLine(num.ToBase(12)); // 12进制：5217744842749978a756b22135b16a5998a5，36位长度\nConsole.WriteLine(num.ToBase(41)); // 41进制：opzeBda2aytcEeudEquuesbk，24位长度\n```\n\n如果你想让进制符支持emoji，NumberFormater是不支持的，不过如果你确实有这么骚的需求，我还准备了UnicodeFormater类，用于支持emoji，用法和NumberFormater一模一样，并且，UnicodeFormater的功能包含NumberFormater的功能，但是，性能比NumberFormater差了许多。\n\n```csharp\nvar formater = new UnicodeFormater(\"😀😁😂🤣😃😄😅😆😉😊😋😎😍😘🥰😗😙🥲😚🙂🤗🤩🤔🤨😑😶😶‍🌫🙄😏😣😥😮\");\nvar s = formater.ToString(1234567890); // 😄🌫😶😋😋\nvar num = formater.FromString(s); // 1234567890\n```\n\n### 6.纳秒级性能计时器\n\n```csharp\nHiPerfTimer timer = HiPerfTimer.StartNew();\nfor (int i = 0; i < 100000; i++)\n{\n    //todo\n}\ntimer.Stop();\nConsole.WriteLine(\"执行for循环100000次耗时\"+timer.Duration+\"s\");\n```\n\n```csharp\ndouble time = HiPerfTimer.Execute(() =>\n{\n    for (int i = 0; i < 100000; i++)\n    {\n        //todo\n    }\n});\nConsole.WriteLine(\"执行for循环100000次耗时\"+time+\"s\");\n```\n\n### 7.产生分布式唯一有序短id(雪花id)\n\n```csharp\n// 实例调用\nvar sf = SnowFlake.GetInstance();\nstring id = sf.GetUniqueId();// rcofqodori0w\nvar sfn = SnowFlakeNew.GetInstance(); // 改良版雪花id，对时间回拨不敏感\nstring id = sfn.GetUniqueId();// vmbq8q3s3zul\n\n// 静态调用\nstring id = SnowFlake.NewId;// rcofqodori0w\nstring shortId = sf.GetUniqueShortId(8);// qodw9728\nstring id = SnowFlakeNew.NewId;// 改良版雪花id，对时间回拨不敏感\n\n// 全局设置\nSnowFlake.SetMachienId(1); // 设置机器id\nSnowFlake.SetInitialOffset(4219864516915105792); // 设置起始偏移量\nSnowFlake.SetNumberFormater(new NumberFormater(\"0123456789abcdefghijklmnopqrstuvwxyz._-!\")); // 设置数制格式化器\n\nSnowFlakeNew.SetMachienId(1); // 设置机器id\nSnowFlakeNew.SetInitialOffset(4219864516915105792); // 设置起始偏移量\nSnowFlakeNew.SetNumberFormater(new NumberFormater(\"0123456789abcdefghijklmnopqrstuvwxyz._-!\")); // 设置数制格式化器\n```\n\n```csharp\nvar set = new HashSet<string>();\ndouble time = HiPerfTimer.Execute(() =>\n{\n    for (int i = 0; i < 1000000; i++)\n    {\n        set.Add(SnowFlake.NewId);\n    }\n});\nConsole.WriteLine(set.Count == 1000000); //True\nConsole.WriteLine(\"产生100w个id耗时\" + time + \"s\"); //2.6891495s\n```\n\n### 8.农历转换\n\n```csharp\nChineseCalendar.CustomHolidays.Add(DateTime.Parse(\"2018-12-31\"),\"元旦节\");//自定义节假日\nChineseCalendar today = new ChineseCalendar(DateTime.Parse(\"2018-12-31\"));\nConsole.WriteLine(today.ChineseDateString);// 二零一八年十一月廿五\nConsole.WriteLine(today.AnimalString);// 生肖：狗\nConsole.WriteLine(today.GanZhiDateString);// 干支：戊戌年甲子月丁酉日\nConsole.WriteLine(today.DateHoliday);// 获取按公历计算的节假日\n...\n```\n\n### 9.Linq表达式树扩展\n\n```csharp\nExpression<Func<string, bool>> where1 = s => s.StartsWith(\"a\");\nExpression<Func<string, bool>> where2 = s => s.Length > 10;\nFunc<string, bool> func = where1.And(where2)\n    .AndIf(!string.IsNullOrEmpty(name),s=>s==name)\n    .Compile(); // And和AndIf可供选择，满足条件再执行And\nbool b=func(\"abcd12345678\");//true\n```\n\n```csharp\nExpression<Func<string, bool>> where1 = s => s.StartsWith(\"a\");\nExpression<Func<string, bool>> where2 = s => s.Length > 10;\nFunc<string, bool> func = where1\n    .Or(where2)\n    .OrIf(!string.IsNullOrEmpty(name),s=>s==name)\n    .Compile(); // Or和OrIf可供选择，满足条件再执行Or\nbool b=func(\"abc\");// true\n```\n\n```csharp\nqueryable.WhereIf(!string.IsNullOrEmpty(name),e=>e.Name==name)\n    .WhereIf(()=> age.HasValue,e=>e.Age>=age); // IQueryable的WhereIf扩展函数，满足条件再执行Where\n```\n\n### 10.模版引擎\n\n```csharp\nvar tmp = new Template(\"{{name}}，你好！\");\ntmp.Set(\"name\", \"万金油\");\nstring s = tmp.Render();//万金油，你好！\n```\n\n```csharp\nvar tmp = new Template(\"{{one}},{{two}},{{three}}\");\nstring s = tmp.Set(\"one\", \"1\").Set(\"two\", \"2\").Set(\"three\", \"3\").Render();// 1,2,3\n```\n\n```csharp\nvar tmp = new Template(\"{{name}}，{{greet}}！\");\ntmp.Set(\"name\", \"万金油\");\nstring s = tmp.Render();// throw 模版变量{{greet}}未被使用\n```\n\n### 11.List转Datatable\n\n```csharp\nvar list = new List<MyClass>()\n{\n    new MyClass()\n    {\n        Name = \"张三\",\n        Age = 22\n    },\n    new MyClass()\n    {\n        Name = \"李四\",\n        Age = 21\n    },\n    new MyClass()\n    {\n        Name = \"王五\",\n        Age = 28\n    }\n};\nvar table = list.Select(c => new{姓名=c.Name,年龄=c.Age}).ToDataTable();// 将自动填充列姓名和年龄\n```\n\n### 12.文件压缩解压\n\n.NET Framework\n\n```csharp\nMemoryStream ms = SevenZipCompressor.ZipStream(new List<string>()\n{\n    @\"D:\\1.txt\",\n    \"http://ww3.sinaimg.cn/large/87c01ec7gy1fsq6rywto2j20je0d3td0.jpg\",\n});//压缩成内存流\n```\n\n```csharp\nSevenZipCompressor.Zip(new List<string>()\n{\n    @\"D:\\1.txt\",\n    \"http://ww3.sinaimg.cn/large/87c01ec7gy1fsq6rywto2j20je0d3td0.jpg\",\n}, zip);//压缩成zip\nSevenZipCompressor.UnRar(@\"D:\\Download\\test.rar\", @\"D:\\Download\\\");//解压rar\nSevenZipCompressor.Decompress(@\"D:\\Download\\test.tar\", @\"D:\\Download\\\");//自动识别解压压缩包\nSevenZipCompressor.Decompress(@\"D:\\Download\\test.7z\", @\"D:\\Download\\\");\n```\n\nASP.NET Core\n\nStartup.cs\n\n```csharp\nservices.AddSevenZipCompressor();\n```\n\n构造函数注入ISevenZipCompressor\n\n```csharp\nprivate readonly ISevenZipCompressor _sevenZipCompressor;\npublic Test(ISevenZipCompressor sevenZipCompressor)\n{\n    _sevenZipCompressor = sevenZipCompressor;\n}\n```\n\n使用方式同.NET Framework版本\n\n### 13.简易日志组件(又不是不能用.jpg)\n\n```csharp\nLogManager.LogDirectory=AppDomain.CurrentDomain.BaseDirectory+\"/logs\";\nLogManager.Event+=info =>\n{\n    //todo:注册一些事件操作\n};\nLogManager.Info(\"记录一次消息\");\nLogManager.Error(new Exception(\"异常消息\"));\n```\n\n### 14.多线程后台下载\n\n```csharp\nvar mtd = new MultiThreadDownloader(\"https://attachments-cdn.shimo.im/yXwC4kphjVQu06rH/KeyShot_Pro_7.3.37.7z\",Environment.GetEnvironmentVariable(\"temp\"),\"E:\\\\Downloads\\\\KeyShot_Pro_7.3.37.7z\",8);\nmtd.Configure(req =>\n {\n     req.Referer = \"https://masuit.com\";\n     req.Headers.Add(\"Origin\", \"https://baidu.com\");\n});\nmtd.TotalProgressChanged+=(sender, e) =>\n{\n    var downloader = sender as MultiThreadDownloader;\n    Console.WriteLine(\"下载进度：\"+downloader.TotalProgress+\"%\");\n    Console.WriteLine(\"下载速度：\"+downloader.TotalSpeedInBytes/1024/1024+\"MBps\");\n};\nmtd.FileMergeProgressChanged+=(sender, e) =>\n{\n    Console.WriteLine(\"下载完成\");\n};\nmtd.FileMergedComplete+=(sender,e)=>{\n    Console.WriteLine(\"文件合并完成\");\n};\nmtd.Start();//开始下载\n//mtd.Pause(); // 暂停下载\n//mtd.Resume(); // 继续下载\n```\n\n### 15.加密解密/hash\n\n```csharp\nvar enc=\"123456\".MDString();// MD5\nvar enc=\"123456\".MDString(\"abc\");// MD5加盐\nvar enc=\"123456\".MDString2();// MD5两次\nvar enc=\"123456\".MDString2(\"abc\");// MD5两次加盐\nvar enc=\"123456\".MDString3();// MD5三次\nvar enc=\"123456\".MDString3(\"abc\");// MD5三次加盐\n\nstring aes = \"123456\".AESEncrypt();// AES加密为密文\nstring s = aes.AESDecrypt(); //AES解密为明文\nstring aes = \"123456\".AESEncrypt(\"abc\");// AES密钥加密为密文\nstring s = aes.AESDecrypt(\"abc\"); //AES密钥解密为明文\n\nstring enc = \"123456\".DesEncrypt();// DES加密为密文\nstring s = enc.DesDecrypt(); //DES解密为明文\nstring enc = \"123456\".DesEncrypt(\"abcdefgh\");// DES密钥加密为密文\nstring s = enc.DesDecrypt(\"abcdefgh\"); //DES密钥解密为明文\n\nRsaKey rsaKey = RsaCrypt.GenerateRsaKeys();// 生成RSA密钥对\nstring encrypt = \"123456\".RSAEncrypt(rsaKey.PublicKey);// 公钥加密\nstring s = encrypt.RSADecrypt(rsaKey.PrivateKey);// 私钥解密\n\nstring s = \"123\".Crc32();// 生成crc32摘要\nstring s = \"123\".Crc64();// 生成crc64摘要\nstring s = \"123\".SHA256();// 生成SHA256摘要\n\n// 零宽字符串，通常用作文章暗水印，以一种看不见的字符插入到文本中，使攻击者无法直接识别文本内容，从而起到保护文章的作用，可通过代码把水印还原出来取证。\nstring pub=\"hello,world!\";\nstring hidden=\"ldqk\";\nvar str = pub.InjectZeroWidthString(hidden); // 扩展函数调用：将\"ldqk\"以零宽字符串的方式隐藏在\"hello,world!\"中\nvar str = ZeroWidthCodec.Encrypt(pub,hidden); // 类调用：将\"ldqk\"以零宽字符串的方式隐藏在\"hello,world!\"中\nvar dec = str.DecodeZeroWidthString(); // 扩展函数调用：将包含零宽字符串的密文解密出隐藏字符串\"ldqk\"\nvar dec = ZeroWidthCodec.Decrypt(str); // 类调用：将包含零宽字符串的密文解密出隐藏字符串\"ldqk\"\nvar enc = hidden.EncodeToZeroWidthText(); // 扩展函数调用：将字符串编码成零宽字符串\nvar enc = ZeroWidthCodec.Encode(str); // 类调用：将字符串编码成零宽字符串\n```\n\n### 16.实体校验\n\n```csharp\npublic class MyClass\n{\n    [IsEmail] //可在appsetting.json中添加EmailDomainWhiteList配置邮箱域名白名单，逗号分隔\n    public string Email { get; set; }\n\n    [IsPhone]\n    public string PhoneNumber { get; set; }\n\n    [IsLandline]\n    public string Landline { get; set; }\n\n    [IsIPAddress]\n    public string IP { get; set; }\n\n    [MinValue(0, ErrorMessage = \"年龄最小为0岁\"), MaxValue(100, ErrorMessage = \"年龄最大100岁\")]\n    public int Age { get; set; }\n\n    [ComplexPassword]//密码复杂度校验，默认最小长度6，最大长度30，必须包含数字、字母、特殊符号\n    public string Password { get; set; }\n  \n    [ComplexPassword(MustNumber=true,MustLetter=true,MustSymbol=true)]//密码复杂度校验，默认最小长度6，最大长度30，手动配置必须包含数字、字母、特殊符号\n    public string Password { get; set; }\n  \n    [ComplexPassword(4,12)]//密码复杂度校验，配置最小长度4，最大长度12\n    public string Password { get; set; }\n  \n    [EnumOf] // 检测是否是有效枚举值\n    public MyEnum MyEnum { get; set; }\n  \n    [MinItemsCount(1)] // 检测集合元素最少1个\n    public List<string> Strs { get; set; }\n  \n    [UnifiedSocialCreditCode] // 校验企业统一社会信用代码\n    public string USCC { get; set; }\n}\n```\n\n### 17.HTML操作\n\n```csharp\nList<string> srcs = \"html\".MatchImgSrcs().ToList();// 获取html字符串里所有的img标签的src属性\nvar imgTags = \"html\".MatchImgTags();//获取html字符串里的所有的img标签\nvar str=\"html\".RemoveHtmlTag(); // 去除html标签\n...\n```\n\n### 18.IP地址和URL\n\n```csharp\nbool inRange = \"192.168.2.2\".IpAddressInRange(\"192.168.1.1\",\"192.168.3.255\");// 判断IP地址是否在这个地址段里\nbool isPrivateIp = \"172.16.23.25\".IsPrivateIP();// 判断是否是私有地址\nbool isExternalAddress = \"http://baidu.com\".IsExternalAddress();// 判断是否是外网的URL\n\n//以下需要配置baiduAK\nstring isp = \"114.114.114.114\".GetISP(); // 获取ISP运营商信息\nPhysicsAddress physicsAddress = \"114.114.114.114\".GetPhysicsAddressInfo().Result;// 获取详细地理信息对象\nTuple<string, List<string>> ipAddressInfo = \"114.114.114.114\".GetIPAddressInfo().Result;// 获取详细地理信息集合\n\nuint number=ipAddress.ToUInt32(); // IP地址转10进制\nuint number=\"114.114.114.114\".IPToID(); // IP地址转10进制\n```\n\n### 19.对象属性值合并\n\n```csharp\npublic class MyClass\n{\n    public string A { get; set; }\n\n    public bool? B { get; set; }\n\n    public int? C { get; set; }\n}\n\nvar a = new MyClass()\n{\n    A = \"aa\"\n};\nvar b = new MyClass()\n{\n    B = true\n};\nvar c = new MyClass()\n{\n    C = 3\n};\nvar merge = a.Merge(b, c); // 合并后对象：A = \"aa\"，B = true，C = 3\n```\n\n### 20.元素去重\n\n```csharp\nvar list = new List<MyClass>()\n{\n    new MyClass()\n    {\n        Email = \"1@1.cn\"\n    },\n    new MyClass()\n    {\n        Email = \"1@1.cn\"\n    },\n    new MyClass()\n    {\n        Email = \"1@1.cn\"\n    }\n};\nList<MyClass> classes = list.DistinctBy(c => c.Email).ToList();\nConsole.WriteLine(classes.Count==1);//True\n```\n\n### 21.枚举扩展\n\n```csharp\n[Flags]\npublic enum MyEnum\n{\n    [Display(Name = \"读\")]\n    [Description(\"读\")]\n    [EnumDescription(\"读取操作\",\"读\",\"zh-CN\")] // 多语言枚举描述\n    [EnumDescription(\"Read\",\"Read\",\"en-US\")]\n    Read=1,\n  \n    [Display(Name = \"写\")]\n    [Description(\"写\")]\n    Write=2,\n\n    Delete=4,\n\n    All=8\n}\n```\n\n```csharp\nDictionary<int, string> dic1 = typeof(MyEnum).GetDictionary();// 获取枚举值和字符串表示的字典映射\nvar dic2 = typeof(MyEnum).GetDescriptionAndValue();// 获取字符串表示和枚举值的字典映射\nstring desc = MyEnum.Read.GetDescription();// 获取Description标签\nstring display = MyEnum.Read.GetDisplay();// 获取Display标签的Name属性\nvar value = typeof(MyEnum).GetValue(\"Read\");//获取字符串表示值对应的枚举值\n```\n\n```csharp\nvar op=MyEnum.Read|MyEnum.Write|MyEnum.Delete;\nvar enums=op.Split(); // 拆分枚举值，得到枚举数组，这个函数建议使用在按位定值的枚举\n```\n\n### 22.定长队列和ConcurrentHashSet实现\n\n`如果是.NET5及以上，推荐使用框架自带的Channel实现该功能`\n\n```csharp\nLimitedQueue<string> queue = new LimitedQueue<string>(32);// 声明一个容量为32个元素的定长队列\nConcurrentLimitedQueue<string> queue = new ConcurrentLimitedQueue<string>(32);// 声明一个容量为32个元素的线程安全的定长队列\n```\n\n```csharp\nvar set = new ConcurrentHashSet<string>(); // 用法和hashset保持一致\n```\n\n### 23.反射操作\n\n```csharp\nMyClass myClass = new MyClass();\nPropertyInfo[] properties = myClass.GetProperties();// 获取属性列表\nmyClass.SetProperty(\"Email\",\"1@1.cn\");//给对象设置值\nmyClass.DeepClone(); // 对象深拷贝，带嵌套层级的\nmyClass.ToDictionary(); // 对象转字典\nmyClass.ToDynamic(); // 对象转换成动态可扩展类型\n```\n\n### 24.邮件发送\n\n```csharp\nnew Email()\n{\n    SmtpServer = \"smtp.masuit.com\",// SMTP服务器\n    SmtpPort = 25, // SMTP服务器端口\n    EnableSsl = true,//使用SSL\n    Username = \"admin@masuit.com\",// 邮箱用户名\n    Password = \"123456\",// 邮箱密码\n    Tos = \"10000@qq.com,10001@qq.com\", //收件人\n    Subject = \"测试邮件\",//邮件标题\n    Body = \"你好啊\",//邮件内容\n}.SendAsync(s =>\n{\n    Console.WriteLine(s);// 发送成功后的回调\n});// 异步发送邮件\n```\n\n### 25.图像的简单处理\n\n```csharp\n\"base64\".SaveDataUriAsImageFile();// 将Base64编码转换成图片\n\nusing Image image = Image.Load(@\"D:\\1.jpg\");\nimage.MakeThumbnail(@\"D:\\2.jpg\", 120, 80,ResizeMode.BoxPad);//生成缩略图\n\nvar newBmp = image.BWPic(image.Width, image.Height);//转换成黑白\nvar newBmp = image.CutImage(new Rectangle(0, 0, 1600, 900));//裁剪\nvar newBmp = image.CutAndResize(new Rectangle(0, 0, 1600, 900), 160, 90);//裁剪并缩放\nvar newBmp = image.ResizeImage(160, 90);//改变大小\nvar newBmp = image.RevPicLR();//左右镜像\nvar newBmp = image.RevPicUD();//上下镜像\nvar newBmp =image.LDPic(10); //调整光暗\nvar newBmp =image.RePic(); //反色处理\nvar newBmp =image.Relief(); //浮雕处理\n\nvar gif = Image.Load(@\"D:\\1.gif\");\ngif.GetFrames(@\"D:\\frames\\\"); // 解压gif每帧图片\n\nvar marker=ImageWatermarker(stream);\nstream=maker.AddWatermark(\"水印文字\",\"字体文件\",字体大小,color,水印位置,边距); // 给图片添加水印\nstream=maker.AddWatermark(水印图片,水印位置,边距,字体大小,字体); // 给图片添加水印\n\n// 图像相似度对比\nvar hasher = new ImageHasher();\nvar hash1 = hasher.DifferenceHash256(\"图片1\"); // 使用差分哈希算法计算图像的256位哈希\nvar hash2 = hasher.DifferenceHash256(\"图片2\"); // 使用差分哈希算法计算图像的256位哈希\n//var hash1 = hasher.AverageHash64(\"图片1\"); // 使用平均值算法计算图像的64位哈希\n//var hash2 = hasher.AverageHash64(\"图片2\"); // 使用平均值算法计算图像的64位哈希\n//var hash1 = hasher.DctHash(\"图片1\"); // 使用DCT算法计算图像的64位哈希\n//var hash2 = hasher.DctHash(\"图片2\"); // 使用DCT算法计算图像的64位哈希\n//var hash1 = hasher.MedianHash64(\"图片1\"); // 使用中值算法计算给定图像的64位哈希\n//var hash2 = hasher.MedianHash64(\"图片2\"); // 使用中值算法计算给定图像的64位哈希\nvar sim=ImageHasher.Compare(hash1,hash2); // 图片的相似度，范围：[0,1]\n\nvar imageFormat=stream.GetImageType(); // 获取图片的真实格式\n```\n\n### 26.随机数\n\n```csharp\nRandom rnd = new Random();\nint num = rnd.StrictNext();//产生真随机数\ndouble gauss = rnd.NextGauss(20,5);//产生正态高斯分布的随机数\nvar s = new NumberFormater(62).ToString(new Random().Next(100000, int.MaxValue));//生成随机字符串\n```\n\n### 27.权重随机筛选功能\n\n```csharp\nvar data=new List<WeightedItem<string>>()\n{\n     new WeightedItem<string>(\"A\", 1),\n     new WeightedItem<string>(\"B\", 3),\n     new WeightedItem<string>(\"C\", 4),\n     new WeightedItem<string>(\"D\", 4),\n};\nvar item=data.WeightedItem();//按权重选出1个元素\nvar list=data.WeightedItems(2);//按权重选出2个元素\n```\n\n```csharp\nvar selector = new WeightedSelector<string>(new List<WeightedItem<string>>()\n{\n    new WeightedItem<string>(\"A\", 1),\n    new WeightedItem<string>(\"B\", 3),\n    new WeightedItem<string>(\"C\", 4),\n    new WeightedItem<string>(\"D\", 4),\n});\nvar item = selector.Select();//按权重选出1个元素\nvar list = selector.SelectMultiple(3);//按权重选出3个元素\n```\n\n```csharp\nlist.WeightedItems(3,e=>e.Price); // 按价格权重选出3个元素\nlist.WeightedBy(e=>e.Price); // 按价格权重选出1个元素\n```\n\n### 28.EF Core支持AddOrUpdate方法\n\n```csharp\n/// <summary>\n/// 按Id添加或更新文章实体\n/// </summary>\npublic override Post SavePost(Post t)\n{\n    DataContext.Set<Post>().AddOrUpdate(t => t.Id, t);\n    return t;\n}\n```\n\n### 29.敏感信息掩码\n\n```csharp\n\"13123456789\".Mask(); // 131****5678\n\"admin@masuit.com\".MaskEmail(); // a****n@masuit.com\n```\n\n```csharp\n// Attribute的方式为json序列化时进行数据脱敏\npublic class MyClass\n{\n    [JsonConverter(typeof(MaskEmailConverter))] // 请注意命名空间，使用Newtonsoft.Json请导入Masuit.Tools.Systems命名空间，使用System.Text.Json请导入Masuit.Tools.Systems.Text.Json命名空间\n    public string Email { get; set; }\n\n    [JsonConverter(typeof(MaskConverter))] // 请注意命名空间，使用Newtonsoft.Json请导入Masuit.Tools.Systems命名空间，使用System.Text.Json请导入Masuit.Tools.Systems.Text.Json命名空间\n    public string PhoneNumber { get; set; }\n}\n```\n\n### 30.集合扩展\n\n```csharp\nvar list = new List<string>()\n{\n    \"1\",\"3\",\"3\",\"3\"\n};\nlist.AddRangeIf(s => s.Length > 1, \"1\", \"11\"); // 将被添加元素中的长度大于1的元素添加到list\nlist.AddRangeIfNotContains(\"1\", \"11\"); // 将被添加元素中不包含的元素添加到list\nlist.RemoveWhere(s => s.Length<1); // 将集合中长度小于1的元素移除\nlist.InsertAfter(0, \"2\"); // 在第一个元素之后插入\nlist.InsertAfter(s => s == \"1\", \"2\"); // 在元素\"1\"后插入\n\nvar dic = list.ToDictionarySafety(s => s); // 安全的转换成字典类型，当键重复时只添加一个键\nvar dic = list.ToConcurrentDictionary(s => s); // 转换成并发字典类型，当键重复时只添加一个键\nvar dic = list.ToDictionarySafety(s => s, s => s.GetHashCode()); // 安全的转换成字典类型，当键重复时只添加一个键\nvar v = dic[x=>x.Key.Contains(\"1\")]; // 字典根据条件取值\ndic[x=>x.Key.Contains(\"1\")]=2; // 字典根据条件赋值\nvar v = dic[(key,value)=>key.Contains(\"1\")]; // 字典根据条件取值\ndic[(key,value)=>key.Contains(\"1\")]=2; // 字典根据条件赋值\nvar v = dic[key=>key.Contains(\"1\")]; // 字典根据key条件取值\ndic[key=>key.Contains(\"1\")]=2; // 字典根据key条件赋值\nvar v = dic[value=>value>0]; // 字典根据value条件取值\ndic[value=>value>0]=2; // 字典根据value条件赋值\ndic.AddOrUpdate(\"4\", 4); // 添加或更新键值对\ndic.AddOrUpdate(new Dictionary<string, int>()\n{\n    [\"5\"] = 5,[\"55\"]=555\n}); // 批量添加或更新键值对\ndic.AddOrUpdate(\"5\", 6, (s, i) => 66); // 如果是添加，则值为6，若更新则值为66\ndic.AddOrUpdate(\"5\", 6, 666); // 如果是添加，则值为6，若更新则值为666\ndic.GetOrAdd(\"7\",77); // 字典获取或添加元素\ndic.GetOrAdd(\"7\",()=>77); // 字典获取或添加元素\ndic.AsConcurrentDictionary(); // 普通字典转换成并发字典集合\n\nvar table=list.ToDataTable(); // 转换成DataTable类型\ntable.AddIdentityColumn(); //给DataTable增加一个自增列\ntable.HasRows(); // 检查DataTable 是否有数据行\ntable.ToList<T>(); // datatable转List\nvar set = list.ToHashSet(s=>s.Name);// 转HashSet\nvar cts = new CancellationTokenSource(100); //取消口令\nawait list.ForeachAsync(async i=>{\n    await Task.Delay(100);\n    Console.WriteLine(i);\n},cts.Token); // 异步foreach\n\nawait list.ForAsync(async (item,index)=>{\n    await Task.Delay(100);\n    Console.WriteLine(item+\"_\"+index);\n},cts.Token); // 异步for，带索引编号\nawait list.SelectAsync(async i=>{\n    await Task.Delay(100);\n    return i*10;\n}); // 异步Select\nawait list.SelectAsync(async (item,index)=>{\n    await Task.Delay(100);\n    return item*10;\n}); // 异步Select，带索引编号\nstring s=list.Join(\",\");//将字符串集合连接成逗号分隔的单字符串\nvar max=list.MaxOrDefault(); // 取最大值，当集合为空的时候不会报错\nvar max=list.MaxOrDefault(selector); // 取最大值，当集合为空的时候不会报错\nvar max=list.MaxOrDefault(selector,default); // 取最大值，当集合为空的时候不会报错\nvar max=list.MinOrDefault(); // 取最小值，当集合为空的时候不会报错\nvar max=list.MinOrDefault(selector); // 取最小值，当集合为空的时候不会报错\nvar max=list.MinOrDefault(selector,default); // 取最小值，当集合为空的时候不会报错\nvar stdDev=list.Select(s=>s.ConvertTo<int>()).StandardDeviation(); // 求标准差\n\nvar pages=queryable.ToPagedList(1,10); // 分页查询\nvar pages=await queryable.ToPagedListAsync(1,10); // 分页查询\n\nvar nums=Enumerable.Range(1, 10).ExceptBy(Enumerable.Range(5, 10), i => i); // 按字段取差集\nvar nums=Enumerable.Range(1, 10).IntersectBy(Enumerable.Range(5, 10), i => i); // 按字段取交集\nvar nums=Enumerable.Range(1, 10).SequenceEqual(Enumerable.Range(5, 10), i => i); // 判断序列相等\nvar nums=Enumerable.Range(1, 10).OrderByRandom(); // 随机排序\n\n// 多个集合取交集\nvar list=new List<List<MyClass>>(){\n    new List<MyClass>(){\n        new MyClass(){Name=\"aa\",Age=11},\n        new MyClass(){Name=\"bb\",Age=12},\n        new MyClass(){Name=\"cc\",Age=13},\n    },\n    new List<MyClass>(){\n        new MyClass(){Name=\"bb\",Age=12},\n        new MyClass(){Name=\"cc\",Age=13},\n        new MyClass(){Name=\"dd\",Age=14},\n    },\n    new List<MyClass>(){\n        new MyClass(){Name=\"cc\",Age=13},\n        new MyClass(){Name=\"dd\",Age=14},\n        new MyClass(){Name=\"ee\",Age=15},\n    },\n};\nvar sect=list.IntersectAll(m=>m.Name); // new MyClass(){Name=\"cc\",Age=13}\n\nvar list=new List<List<int>>(){\n    new(){1,2,3},\n    new(){2,3,4},\n    new(){3,4,5}\n};\nvar sect=list.IntersectAll();// [3]\n\n// 集合元素改变其索引位置\nlist.ChangeIndex(item,3); // 将元素item的索引位置变为第3个\nlist.ChangeIndex(t=>t.Id==\"123\",2); // 将id为123的元素的索引位置变为第2个\n\nvar item=list.Percentile(50); // 取第50%分位数的元素\n```\n\n### 31.Mime类型\n\n```csharp\nvar mimeMapper = new MimeMapper();\nvar ext = mimeMapper.GetExtensionFromMime(\"image/jpeg\"); // .jpg\nvar mime = mimeMapper.GetMimeFromExtension(\".jpg\"); // image/jpeg\n\nContentType常量库：\nvar type=ContentType.Exe; // application/octet-stream\nvar type=ContentType.Jpeg; // image/jpeg\nvar type=DefaultMimeItems.Items.FirstOrDefault(t=>t.Extension==\"jpg\"); // image/jpeg\n```\n\n### 32.日期时间扩展\n\n```csharp\nvar weeks=DateTime.Now.GetWeekAmount(); // 获取当前所在年一共有多少周\nvar week = DateTime.Now.WeekOfYear(); // 获取当前所在年的第几周\nvar week = DateTime.Now.WeekOfYear(DayOfWeek.Monday); // 获取当前所在年的第几周,并指定星期几是每周第一天\n\ndouble milliseconds = DateTime.Now.GetTotalMilliseconds();// 获取毫秒级时间戳\ndouble microseconds = DateTime.Now.GetTotalMicroseconds();// 获取微秒级时间戳\ndouble nanoseconds = DateTime.Now.GetTotalNanoseconds();// 获取纳秒级时间戳\ndouble seconds = DateTime.Now.GetTotalSeconds();// 获取秒级时间戳\ndouble minutes = DateTime.Now.GetTotalMinutes();// 获取分钟级时间戳\n\nvar indate=DateTime.Parse(\"2020-8-3\").In(DateTime.Parse(\"2020-8-2\"),DateTime.Parse(\"2020-8-4\"));//true\nDateTime time=\"2021-1-1 8:00:00\".ToDateTime(); //字符串转DateTime\n\n//时间段计算工具\nvar range = new DateTimeRange(DateTime.Parse(\"2020-8-3\"), DateTime.Parse(\"2020-8-5\"));\nrange.Union(DateTime.Parse(\"2020-8-4\"), DateTime.Parse(\"2020-8-6\")); //连接两个时间段，结果：2020-8-3~2020-8-6\nrange.In(DateTime.Parse(\"2020-8-3\"), DateTime.Parse(\"2020-8-6\"));//判断是否在某个时间段内，true\nvar (intersected,range2) = range.Intersect(DateTime.Parse(\"2020-8-4\"), DateTime.Parse(\"2020-8-6\"));//两个时间段是否相交，(true,2020-8-3~2020-8-4)\nrange.Contains(DateTime.Parse(\"2020-8-3\"), DateTime.Parse(\"2020-8-4\"));//判断是否包含某个时间段，true\n\nrange.GetUnionSet(List<DateTimeRange>); // 根据某个时间段查找在某批时间段中的最大并集\nrange.GetMaxTimePeriod(List<DateTimeRange>); // 获取一批时间段内存在相互重叠的最大时间段\n\nvar range = DateTime.Now.GetCurrentWeek(); // 获取当前时间所在周的时间区间：2024-08-05 00:00:00~2024-08-11 23:59:59\nvar range = DateTime.Now.GetCurrentMonth(); // 获取当前时间所在月的时间区间：2024-08-01 00:00:00~2024-08-31 23:59:59\nvar range = DateTime.Now.GetCurrentYear(); // 获取当前时间所在年的时间区间：2024-01-01 00:00:00~2024-12-31 23:59:59\nvar range = DateTime.Now.GetCurrentQuarter(); // 获取当前时间所在季度的时间区间：2024-07-01 00:00:00~2024-09-30 23:59:59\nvar range = DateTime.Now.GetCurrentLunarMonth(); // 获取当前时间所在农历月的时间区间：2024-08-04 00:00:00~2024-09-02 23:59:59\nvar range = DateTime.Now.GetCurrentLunarQuarter(); // 获取当前时间所在农历季度的时间区间：2024-08-04 00:00:00~2024-10-31 23:59:59\nvar range = DateTime.Now.GetCurrentLunarYaer(); // 获取当前时间所在农历年的时间区间：2024-02-10 00:00:00~2025-01-28 23:59:59\nvar range = DateTime.Now.GetCurrentSolar(); // 获取当前时间所在季节的时间区间：2024-08-07 00:00:00~2024-11-06 23:59:59\nvar range = DateTime.Now.GetCurrentRange(DateRangeType.Week); // 获取当前时间所在周的时间区间：2024-08-05 00:00:00~2024-08-11 23:59:59\nvar range = DateTime.Now.GetCurrentRange(DateRangeType.Month); // 获取当前时间所在月的时间区间：2024-08-01 00:00:00~2024-08-31 23:59:59\nvar range = DateTime.Now.GetCurrentRange(DateRangeType.Quarter); // 获取当前时间所在季度的时间区间：2024-07-01 00:00:00~2024-09-30 23:59:59\nvar range = DateTime.Now.GetCurrentRange(DateRangeType.Year); // 获取当前时间所在年的时间区间：2024-01-01 00:00:00~2024-12-31 23:59:59\nvar range = DateTime.Now.GetCurrentRange(DateRangeType.LunarMonth); // 获取当前时间所在农历月的时间区间：2024-08-04 00:00:00~2024-09-02 23:59:59\nvar range = DateTime.Now.GetCurrentRange(DateRangeType.LunarQuarter); // 获取当前时间所在农历季度的时间区间：2024-08-04 00:00:00~2024-10-31 23:59:59\nvar range = DateTime.Now.GetCurrentRange(DateRangeType.LunarYear); // 获取当前时间所在农历年的时间区间：2024-02-10 00:00:00~2025-01-28 23:59:59\nvar range = DateTime.Now.GetCurrentRange(DateRangeType.Solar); // 获取当前时间所在季节的时间区间：2024-08-07 00:00:00~2024-11-06 23:59:59\n\n...\n```\n\n### 33.流相关\n\n```csharp\nstream.SaveAsMemoryStream(); // 任意流转换成内存流\nstream.ToArray(); // 任意流转换成二进制数组\nstream.ToArrayAsync(); // 任意流转换成二进制数组\nstream.ShuffleCode(); // 流洗码，在流的末端随即增加几个空字节，重要数据请谨慎使用，可能造成流损坏\n\n// 池化内存流，用法与MemorySteam保持一致\nusing var ms=PooledMemoryStream();\n\n// 大型内存流,最大可支持1TB内存数据，推荐当数据流大于2GB时使用，用法与MemorySteam保持一致\nusing var ms=LargeMemoryStream();\n\n//文件流快速复制\nFileStream fs = new FileStream(@\"D:\\boot.vmdk\", FileMode.OpenOrCreate, FileAccess.ReadWrite);\n{\n        //fs.CopyToFile(@\"D:\\1.bak\");//同步复制大文件\n        fs.CopyToFileAsync(@\"D:\\1.bak\");//异步复制大文件\n        string md5 = fs.GetFileMD5Async().Result;//异步获取文件的MD5\n        string sha1 = fs.GetFileSha1();//异步获取文件的SHA1\n}\nmemoryStream.SaveFile(\"filename\"); // 将内存流转储成文件\n```\n\n### 34.类型操作/字符串\n\n```csharp\n1.2345678901.Digits8(); // 将小数截断为8位\n1.23.ConvertTo<int>(); // 小数转int\n1.23.ConvertTo<T>(); // 小数转T基本类型\nbool b=1.23.TryConvertTo<T>(out result); // 小数转T基本类型\nvar num=1.2345.ToDecimal(2); //转decimal并保留两位小数\n\n1.23.ChangeTypeTo<T>(); //小数转T基本类型,ConvertTo和ChangeTypeTo的区别在于：ConvertTo只适用于基元类型的互转，ChangeTypeTo不仅适用于基元类型的互转还支持数组、字符串的转换(Parse)，ConvertTo的性能更高\n\ntype.IsPrimitive(); // 判断类型是否是值类型\ntype.IsSimpleType(); // 判断类型是否是常见的简单类型，基元类型为 Boolean、 Byte、 SByte、 Int16、 UInt16、 Int32、 UInt32、 Int64、 UInt64、 IntPtr、 UIntPtr、 Char、 Double 、 Single、枚举、Nullable<T>。\ntype.IsSimpleArrayType(); // 判断类型是否是常见类型的 数组形式 类型\ntype.IsSimpleListType(); // 判断类型是否是常见类型的 泛型形式 类型\n\nmyClass.ToJsonString(); //序列化成json字符串\n\nstring s=null;\nbool b=s.IsNullOrEmpty();//判断字符串是否为空\nbool b=s.NotNullOrEmpty();//判断字符串不为空\nstring str=s.IfNullOrEmpty(\"aa\");//如果为空则返回aa\nstring str=s.IfNullOrEmpty(()=>\"aa\");//如果为空则返回aa,延迟执行\n\nbool contains=s.Contains(new[]{\"aa\",\"bb\"});// 检测字符串中是否包含列表中的关键词(快速匹配)\nbool contains=s.ContainsSafety(new[]{\"aa\",\"bb\"});// 检测字符串中是否包含列表中的关键词(安全匹配)，没有计时攻击风险\nbool contains=s.EndsWith(new[]{\"aa\",\"bb\"});// 检测字符串中是否以列表中的任意关键词结尾\nbool contains=s.StartsWith(new[]{\"aa\",\"bb\"});// 检测字符串中是否以列表中的任意关键词开头\n\nstring str=s.Take(10); // 取字符串前10个字符\n\nbool emoji=s.MatchEmoji(); // 匹配字符串是否包含emoji\n\nvar width=str.StringWidth(14); // 计算字符串以14号字体大小的渲染宽度像素\nvar width=str.StringWidth(\"微软雅黑\",14); // 计算字符串以14号字体大小的微软雅黑字体的渲染宽度像素\nvar width=str.CharacterCount(); // 获取字符串的字符数\nvar width=str.BytesCount(); // 获取字符串的字节数\n\n\nvar s = \"🤔1🥳a👨‍👩‍👧‍👦啊\";\nConsole.WriteLine(\"长度：\" + s.Length); // 18\nConsole.WriteLine(\"宽度：\" + s.StringWidth()); // 7\nConsole.WriteLine(\"字节数：\" + s.BytesCount()); // 38\nConsole.WriteLine(\"字符数：\" + s.CharacterCount()); // 6\n\nvar s=\"aa\".ToSBC(); // 转换为全角\nvar s=\"ａａ\".ToDBC(); // 转换为半角\n```\n\n### 35.INI配置文件操作\n\n```csharp\nIniFile ini=new IniFile(\"X:\\\\filename.ini\"); // 需要绝对路径，否则会写到C:\\Windows目录下去\nini.SetValue(section,key,value); // 写值\nvar value=ini.GetValue(section,key); // 读值\nvar value=ini.GetValue<Enum>(section,key); // 读值并转换类型\nvar sections=ini.GetSections(); // 获取所有配置节\nvar section=ini.GetSection(section); // 获取配置节\nvar myclass=ini.GetSection<MyClass>(section); // 获取指定配置节并绑定到对象\nini.ClearAllSection(); // 清空所有配置节\nini.ClearSection(section); // 清空配置节\nini.Save(); // 保存ini文件\nini.Reload(); // 重新加载ini文件\n\n\nclass MyClass\n{\n    [IniProperty(\"str_value\")] // 设置别名\n    public string StringValue { get; set; }\n}\n```\n\n### 36.雷达图计算引擎\n\n应用场景：计算两个多边形的相似度，用户画像之类的\n\n```csharp\nvar points=RadarChartEngine.ComputeIntersection(chart1,chart2); //获取两个多边形的相交区域\npoints.ComputeArea(); //计算多边形面积\n```\n\n### 37.树形结构实现\n\n基本接口类：\nITreeChildren：带Children属性的接口  \nITreeParent：带Parent属性的接口  \nITree：继承ITreeParent和ITreeChildren，同时多了Name属性  \nITreeEntity：继承ITreeChildren，同时多了Id和ParentId属性  \n\n相关扩展方法：\n\n```csharp\ntrees.Filter(func); // 从树形集合中过滤\ntrees.Flatten(); // 将数据平铺开\ntree.AllChildren(); // 获取所有的子级\ntree.AllParent(); // 获取所有的父级\ntree.IsRoot(); // 是否是根节点\ntree.IsLeaf(); // 是否是叶子节点\ntree.Level(); // 所处深度/层级\ntree.Path(); // 全路径\n\nvar tree=list.ToTree();//集合元素继承自ITreeEntity<T,TKey>或ITreeEntity<T>的集合转换成树形结构\nvar tree=list.ToTree(c => c.Id, c => c.Pid);//集合元素继承自ITreeParent<T>, ITreeChildren<T>的集合转换成树形结构\nvar tree=list.ToTreeGeneral(c => c.Id, c => c.Pid);//一般的集合转换成树形结构\n```\n![Tree结构性能跑分](https://foruda.gitee.com/images/1715417742882952476/d429d7c3_1534928.png \"屏幕截图\")\n\n### 38.简单的Excel导出\n\n需要额外依赖包：`Masuit.Tools.Excel`\n\n```csharp\nvar stream=list.Select(item=>new{\n    姓名=item.Name,\n    年龄=item.Age,\n    item.Gender,\n    Avatar=Image.FromStream(filestream) //图片列\n}).ToDataTable().ToExcel(\"Sheet1\"); //自定义列名导出\nvar stream=list.ToDataTable(\"Sheet1\").ToExcel(\"文件密码\");\n```\n\n#### 一些约定规则：\n\n1. 图片列支持Stream、Bitmap、IEnumerable `<Stream>`、IEnumerable `<Bitmap>`、IDictionary<string,Stream>、IDictionary<string,MemoryStream>、IDictionary<string,Bitmap>类型；\n2. 其中，如果是IDictionary类型的图片列，字典的键为图片超链接的完整url；\n3. 默认字段名作为列名导出；\n4. 若list是一个具体的强类型，默认会先查找每个字段的Description标记，若有Description标记，则取Description标记作为列名显示\n5. ToExcel方法支持DataTable、List `<DataTable>`、Dictionary<string, DataTable>类型的直接调用\n\n### 39.EFCore实用扩展\n\n#### 跟踪实体变更对比\n\n获取指定实体的变更\n\n```csharp\nvar changes=dbContext.GetChanges<TEntity>();//获取变更字段信息\nvar added=dbContext.GetAdded<TEntity>();//获取添加的实体字段信息\nvar removed=dbContext.GetRemoved<TEntity>();//获取被移除的实体字段信息  \nvar allchanges=dbContext.GetAllChanges<TEntity>();//获取增删改的实体字段信息  \n```\n\n获取所有实体的变更\n\n```csharp\nvar changes=dbContext.GetChanges();//获取变更字段信息\nvar added=dbContext.GetAdded();//获取添加的实体字段信息\nvar removed=dbContext.GetRemoved();//获取被移除的实体字段信息  \nvar allchanges=dbContext.GetAllChanges();//获取增删改的实体字段信息  \n```\n\n对比信息包含属性信息、旧值、新值、实体信息、键信息、变更状态等\n\n#### nolock查询\n\nsqlserver：\n\n上下文注入Interceptor即可在任何查询时使用nolock查询\n\n```csharp\nservices.AddDbContext<TContext>(opt => opt.UseSqlserver(\"ConnString\", builder => builder.AddInterceptors(new QueryWithNoLockDbCommandInterceptor()));\n```\n\n通用数据库：\n\nnolock本质是开启一个 `读未提交`级别的事务，此时的查询性能最好，但有可能会读取到脏数据。\n\n```csharp\ndbcontext.NoLock(ctx=>ctx.Users...ToList()); // 开启一个nolock上下文，上下文范围内自动nolock\n\n// 执行单个nolock查询\nawait dbcontext.Users.Where(x=>x.Name==\"aaa\").ToListWithNoLockAsync(); \nawait dbcontext.Users.Where(x=>x.Name==\"aaa\").FirstOrDefaultWithNoLockAsync(); \nawait dbcontext.Users.Where(x=>x.Name==\"aaa\").SingleOrDefaultWithNoLockAsync(); \nawait dbcontext.Users.AnyWithNoLockAsync(x=>x.Name==\"aaa\"); \nawait dbcontext.Users.AllWithNoLockAsync(x=>x.Name==\"aaa\"); \nawait dbcontext.Users.CountWithNoLockAsync(x=>x.Name==\"aaa\"); \n\n// 如果在上下文开启了重试机制,执行单个nolock查询需要开启策略查询\nservices.AddDbContext<TContext>(opt => opt.UseNpgsql(\"ConnString\", builder => builder.EnableRetryOnFailure(10));\n\n// 执行策略\ndbcontext.ExecutionStrategy(stg=>stg.NoLock(ctx=>ctx.Users...ToList()));\ndbcontext.ExecutionStrategy(ctx=>ctx.Users.Where(x=>x.Name==\"aaa\").ToListWithNoLockAsync());\n```\n\n#### 自动递归式Include扩展(通常用于树形表)\n\n```csharp\n// 如果你现在正在写类似这样的代码：\ndbcontext.Category.Include(c=>c.Children).ThenInclude(c=>c.Children).ThenInclude(c=>c.Children).ThenInclude(c=>c.Children);\n\n// 那么可以改成这样：\ndbcontext.Category.IncludeRecursive(4, c => c.Children); // 自动Include 4次\n```\n\n### 40.任何类型支持链式调用\n\n```csharp\na.Next(func1).Next(func2).Next(func3);\n\"123\".Next(s=>s.ToInt32()).Next(x=>x*2).Next(x=>Math.Log(x));\n```\n\n### 41.Newtonsoft.Json和System.Text.Json的只允许字段(反)序列化行为的契约解释器\n\n#### DeserializeOnlyContractResolver\n\n该解释器针对类属性被DeserializeOnlyJsonPropertyAttribute/SerializeIgnoreAttribute标记的，在反序列化的时候生效，在序列化的时候忽略;被SerializeOnlyJsonPropertyAttribute/DeserializeIgnoreAttribute标记的，在序列化的时候生效，在反序列化的时候忽略\n\n```csharp\npublic class ClassDto\n    {\n        // 序列化时忽略这个属性/反序列化时加载这个属性\n        [DeserializeOnlyJsonProperty]\n        //[SerializeIgnore]\n        public string MyProperty { get; set; }\n\n        // 反序列化时忽略这个属性/序列化时加载这个属性\n        [SerializeOnlyJsonProperty]\n        //[DeserializeIgnore]\n        public int Num { get; set; }\n    }\n  \n    // Newtonsoft.Json\n    JsonConvert.SerializeObject(new MyClass(),new JsonSerializerSettings()\n    {\n        ContractResolver = new DeserializeOnlyContractResolver() // 配置使用DeserializeOnlyContractResolver解释器\n    });\n\n    // System.Text.Json\n    JsonSerializer.Serialize(object, new JsonSerializerOptions() { TypeInfoResolver = new SerializeIgnoreResolver() });\n```\n\n如果是WebAPI全局使用：\n\n```csharp\n        //在Startup.ConfigureServices中\n        services.AddMvc().AddNewtonsoftJson(options =>\n             {\n                 var resolver = new DeserializeOnlyContractResolver();\n                 resolver.NamingStrategy = new CamelCaseNamingStrategy();\n                 options.SerializerSettings.ContractResolver = resolver;\n             });\n```\n\n#### FallbackJsonPropertyResolver\n\n该解释器针对某个属性设置多个别名，反序列化时支持多个别名key进行绑定，弥补官方JsonProperty别名属性只能设置单一别名的不足\n\n```csharp\n    public class ClassDto\n    {\n        [FallbackJsonProperty(\"MyProperty\",\"a\",\"b\")]\n        public string MyProperty { get; set; }\n\n        public int Num { get; set; }\n    }\n  \n    JsonConvert.SerializeObject(new MyClass(),new JsonSerializerSettings()\n    {\n        ContractResolver = new FallbackJsonPropertyResolver() // 配置使用FallbackJsonPropertyResolver解释器\n    });\n```\n\n#### CompositeContractResolver\n\n该解释器是DeserializeOnlyContractResolver和FallbackJsonPropertyResolver的融合版\n\n### 42. ASP.NET Core Action同时支持queryString、表单和json请求类型的模型绑点器BodyOrDefaultModelBinder\n\n用法：\n引入包：`Masuit.Tools.AspNetCore`\n\n```shell\nPM> Install-Package Masuit.Tools.AspNetCore\n```\n\nStartup配置：\n\n```csharp\napp.UseBodyOrDefaultModelBinder();\n```\n\n在action的参数模型前打上标记：`[FromBodyOrDefault]`即可，示例代码如下：\n\n```csharp\n        [HttpGet(\"query\"),HttpPost(\"query\")]\n        public IActionResult Query([FromBodyOrDefault]QueryModel query)\n        {\n            return Ok(...);\n        }\n  \n        [HttpGet(\"query\"),HttpPost(\"query\")]\n        public IActionResult Query([FromBodyOrDefault]int id,[FromBodyOrDefault]string name)\n        {\n            return Ok(...);\n        }\n```\n\n### 43. 字符串SimHash相似度算法\n\n```csharp\nvar dis=\"12345678\".HammingDistance(\"1234567\");\nvar dis=new SimHash(\"12345678\").HammingDistance(new SimHash(\"1234567\"));\n```\n\n### 44. 真实文件类型探测/文本编码检测\n\n```csharp\nvar encoding=new FileInfo(filepath).GetEncoding(); // 获取文件编码(扩展调用)\nvar encoding=stream.GetEncoding(); // 获取流的编码(扩展调用)\nvar encoding=TextEncodingDetector.GetEncoding(filepath); // 获取文件编码(类调用)\n\n// 多种方式，任君调用\nvar detector=new FileInfo(filepath).DetectFiletype(); // 扩展调用\n//var detector=File.OpenRead(filepath).DetectFiletype(); // 流扩展调用\n//var detector=FileSignatureDetector.DetectFiletype(filepath); // 类调用\n\ndetector.Precondition;//基础文件类型\ndetector.Extension;//真实扩展名\ndetector.MimeType;//MimeType\ndetector.FormatCategories;//格式类别\n```\n\n#### 默认支持的文件类型\n\n|   扩展名   |                              说明                              |\n| :--------: | :-------------------------------------------------------------: |\n|    3GP    |                          3GPP, 3GPP 2                          |\n|     7Z     |                              7-Zip                              |\n|    APK    |                    ZIP based Android Package                    |\n|    AVI    |                     Audio-Video Interleave                     |\n|     SH     |                          Shell Script                          |\n|   BPLIST   |                      Binary Property List                      |\n|  BMP, DIB  |                             Bitmap                             |\n|    BZ2    |                       Bunzip2 Compressed                       |\n|    CAB    |                        Microsoft Cabinet                        |\n|   CLASS   |                          Java Bytecode                          |\n|   CONFIG   |                     .NET Configuration File                     |\n| CRT, CERT |                           Certificate                           |\n|    CUR    |                             Cursor                             |\n|     DB     |              Windows Thumbs.db Thumbnail Database              |\n|    DDS    |                       DirectDraw Surface                       |\n|    DLL    |                 Windows Dynamic Linkage Library                 |\n|    DMG    |                     Apple Disk Mount Image                     |\n|    DMP    |                    Windows Memory Dump File                    |\n|    DOC    |             Microsoft Office Word 97-2003 Document             |\n|    DOCX    |             Microsoft Office Word OpenXML Document             |\n|    EPUB    |                         e-Pub Document                         |\n|    EXE    |                        Windows Executive                        |\n|    FLAC    |                         Loseless Audio                         |\n|    FLV    |                           Flash Video                           |\n|    GIF    |                   Graphics Interchage Format                   |\n|     GZ     |                          GZ Compressed                          |\n|    HDP    |                     HD Photo(JPEG XR) Image                     |\n|    HWP    |                   Legacy HWP, HWPML, CFBF HWP                   |\n|    ICO    |                              Icon                              |\n|    INI    |                       Initialization File                       |\n|    ISO    |                       ISO-9660 Disc Image                       |\n|    LNK    |                      Windows Shortcut Link                      |\n|    JP2    |                         JPEG 2000 Image                         |\n| JPG, JPEG |             Joint Photographic Experts Group Image             |\n|    LZH    |                         LZH Compressed                         |\n|    M4A    |               MP4 Container Contained Audio Only               |\n|    M4V    |                  MP4 Container Contained Video                  |\n|    MID    |                           Midi Sound                           |\n|    MKA    |             Matroska Container Contained Audio Only             |\n|    MKV    |               Matroska Container Contained Video               |\n|    MOV    |                      QuickTime Movie Video                      |\n|    MP4    |                MP4 Container Contained Contents                |\n|    MSI    |                       Microsoft Installer                       |\n|    OGG    |                       OGG Video or Audio                       |\n|    ODF    |                      OpenDocument Formula                      |\n|    ODG    |                      OpenDocument Graphics                      |\n|    ODP    |                    OpenDocument Presentation                    |\n|    ODS    |                    OpenDocument Spreadsheet                    |\n|    ODT    |                        OpenDocument Text                        |\n|    PAK    |                  PAK Archive or Quake Archive                  |\n|    PDB    |                   Microsoft Program Database                   |\n|    PDF    |                    Portable Document Format                    |\n|    PFX    |       Microsoft Personal Information Exchange Certificate       |\n|    PNG    |                 Portable Network Graphics Image                 |\n|    PPT    |          Microsoft Office PowerPoint 97-2003 Document          |\n|    PPTX    |          Microsoft Office PowerPoint OpenXML Document          |\n|    PPSX    | Microsoft Office PowerPoint OpenXML Document for Slideshow only |\n|    PSD    |                       Photoshop Document                       |\n|    RAR    |                        WinRAR Compressed                        |\n|    REG    |                        Windows Registry                        |\n|    RPM    |                 RedHat Package Manager Package                 |\n|    RTF    |                    Rich Text Format Document                    |\n|    SLN    |                Microsoft Visual Studio Solution                |\n|    SRT    |                         SubRip Subtitle                         |\n|    SWF    |                         Shockwave Flash                         |\n| SQLITE, DB |                         SQLite Database                         |\n|    TAR    |             pre-ISO Type and UStar Type TAR Package             |\n|    TIFF    |                 Tagged Image File Format Image                 |\n|    TXT    |                           Plain Text                           |\n|    WAV    |                           Wave Audio                           |\n|    WASM    |                       Binary WebAssembly                       |\n|    WEBM    |                           WebM Video                           |\n|    WEBP    |                           WebP Image                           |\n|    XAR    |                           XAR Package                           |\n|    XLS    |             Microsoft Office Excel 97-2003 Document             |\n|    XLSX    |             Microsoft Office Excep OpenXML Document             |\n|    XML    |               Extensible Markup Language Document               |\n|     Z     |                          Z Compressed                          |\n|    ZIP    |                           ZIP Package                           |\n\n### 45. 动态类型扩展\n\n让动态类型支持属性访问器和索引器调用\n\n```csharp\n        var obj = DynamicFactory.NewObject();\n        obj.Name = \"Masuit\";\n        obj.Age = 18;\n        obj[\"Gender\"]=\"男\"\n        obj.MyClass = DynamicFactory.WithObject(new\n        {\n            X = 10,\n            Y = 20,\n            Z = new List<int> { 1, 2, 3, 4, 5 }\n        });\n        Assert.Equal(obj.Name, obj[\"Name\"]);\n        Assert.Equal(obj[\"Gender\"], obj.Gender);\n        Assert.Equal(obj[\"MyClass\"][\"X\"], obj.MyClass.X);\n        Assert.Equal(obj.MyClass.Z[2], obj[\"MyClass\"][\"Z\"][2]);\n```\n\n普通类型转换成动态类型\n\n```csharp\n        var obj = new\n        {\n            Name = \"Masuit\"\n        }.ToDynamic();\n        obj.Age = 18;\n        obj.MyClass = new\n        {\n            X = 10,\n            Y = 20,\n            Z = new List<int> { 1, 2, 3, 4, 5 }\n        }.ToDynamic();\n        obj.Prop = \"test\";\n        _ = obj - \"Prop\"; // 删除属性\n        _ = obj + \"Prop\"; // 增加属性\n\n        Assert.Equal(obj.Name, obj[\"Name\"]);\n        Assert.Equal(obj[\"MyClass\"][\"X\"], obj.MyClass.X);\n```\n\n### 46. 反病毒(仅支持Windows)\n\n```csharp\n// 要求系统WindowsDefender没有被停掉\nvar result = WindowsDefenderScanService.ScanFile(@\"Y:\\1.exe\"); // 扫描文件\nvar result = WindowsDefenderScanService.ScanDirectory(@\"Y:\\\"); // 扫描文件夹\nvar result = WindowsDefenderScanService.ScanStream(stream); // 扫描文件流\n\n// 要求C:\\Windows\\System32\\amsi.dll文件存在，可在WindowsDefender停止时工作\nAmsiScanService.Scan(stream); // 扫描文件流\nAmsiScanService.Scan(@\"Y:\\1.exe\"); // 扫描文件\nAmsiScanService.Scan(bytes); // 扫描二进制数组\n```\n\n### 47. 生成验证码\n\n```csharp\nvar code=ValidateCode.ValidateCode(6); // 生成6位长度的验证码\nvar stream=code.CreateValidateGraphic(); // 生成验证码图片流\n```\n\n### 48. DistributedCache扩展\n\n```csharp\nvar item=cache.Get<T>(key); // 获取值\nvar item=cache.GetOrAdd<T>(key,value); // 获取或添加值\nvar item=cache.GetOrAdd<T>(key,valueFactory); // 获取或添加值\ncache.Set<T>(key,value); // 设置值\ncache.AddOrUpdate<T>(key,value,valueFactory); // 添加或更新值\n```\n\n### 49. ViewData扩展\n\n```csharp\nvar item=ViewData.GetValue<T>(key);//获取对象\nvar item=ViewData.GetValueOrDefault<T>(key,defaultValue);//获取对象\nvar item=ViewData.GetValueOrDefault<T>(key,defaultValueFactory);//获取对象\n```\n\n### 50. 线程上下文存取临时值\n\n```csharp\nCurrentContext<T>.SetData(value);//设置值\nvar item=CurrentContext<T>.GetData();//获取值\n\nCurrentContext.SetData(value);//设置值\nvar item=CurrentContext.GetData<T>();//获取值\n```\n\n### 51. ASP.NET Core自动扫描注册服务\n包：Masuit.Tools.AspNetCore  \n\n```csharp\n// 自动扫描注册服务\nservices.AutoRegisterServices();\n\n// 需要自动注册的服务打上ServiceInject标记即可。\n[ServiceInject(ServiceLifetime.Scoped)]\npublic class MyClass:MyInterface{...}\n\n[ServiceInject(ServiceLifetime.Scoped)]\npublic class MyService{...}\n```\n\n### 52. 文本对比(支持html和纯文本)\n集成案例：https://masuit.org/1889/history\n```csharp\nvar text1 = \"<h1>你好 UEditorPlus</h1><p>UEditorPlus 是基于 UEditor 二次开发的富文本编辑器，让 UEditor <span style=\\\"color: #E36C09;\\\">焕<span style=\\\"color: #0070C0;\\\">然</span><span style=\\\"color: #31859B;\\\"><span style=\\\"color: #00B050;\\\">一</span><span style=\\\"color: #FF0000;\\\">新</span></span></span></p><table data-sort=\\\"sortDisabled\\\"><tbody><tr class=\\\"firstRow\\\"><td valign=\\\"top\\\" style=\\\"word-break: break-all;\\\" rowspan=\\\"1\\\" colspan=\\\"3\\\">我是表格</td></tr><tr><td width=\\\"273\\\" valign=\\\"top\\\" style=\\\"word-break: break-all;\\\">如果</td><td width=\\\"273\\\" valign=\\\"top\\\" style=\\\"word-break: break-all;\\\">有一天</td><td width=\\\"273\\\" valign=\\\"top\\\" style=\\\"word-break: break-all;\\\">我离开了</td></tr><tr><td valign=\\\"top\\\" colspan=\\\"1\\\" rowspan=\\\"1\\\" style=\\\"word-break: break-all;\\\">怎么才能</td><td valign=\\\"top\\\" colspan=\\\"1\\\" rowspan=\\\"1\\\" style=\\\"word-break: break-all;\\\">证明我</td><td valign=\\\"top\\\" colspan=\\\"1\\\" rowspan=\\\"1\\\" style=\\\"word-break: break-all;\\\">曾经来过</td></tr></tbody></table><h2>公式支持</h2><p><img src=\\\"https://r.latexeasy.com/image.svg?%5Cint%20%5Cfrac%7B1%7D%7Bx%7D%20dx%20%3D%20%5Cln%20%5Cleft%7C%20x%20%5Cright%7C%20%2B%20C\\\" data-formula-image=\\\"%5Cint%20%5Cfrac%7B1%7D%7Bx%7D%20dx%20%3D%20%5Cln%20%5Cleft%7C%20x%20%5Cright%7C%20%2B%20C\\\"/></p><p><br/></p>\";\nvar text2 = \"<p>UEditorPlus 是基于 UEditor 二次开发的富文本编辑器，让 UEditor <span style=\\\"color: #E36C09;\\\">焕<p style=\\\"color: #0070C0;\\\">然</p><span style=\\\"color: #31859B;\\\"><span style=\\\"color: #00B050;\\\">一</span><span style=\\\"color: #FF0000;\\\">新</span></span></span></p><table data-sort=\\\"sortDisabled\\\"><tbody><tr class=\\\"firstRow\\\"><td valign=\\\"top\\\" style=\\\"word-break: break-all;\\\" rowspan=\\\"1\\\" colspan=\\\"3\\\">我是表格</td></tr><tr><td width=\\\"273\\\" valign=\\\"top\\\" style=\\\"word-break: break-all;\\\">如果</td><td width=\\\"273\\\" valign=\\\"top\\\" style=\\\"word-break: break-all;\\\">有一天</td><td width=\\\"273\\\" valign=\\\"top\\\" style=\\\"word-break: break-all;\\\">我离开了</td></tr><tr><td valign=\\\"top\\\" colspan=\\\"1\\\" rowspan=\\\"1\\\" style=\\\"word-break: break-all;\\\">怎么才能</td><td valign=\\\"top\\\" colspan=\\\"1\\\" rowspan=\\\"1\\\" style=\\\"word-break: break-all;\\\">证明我</td><td valign=\\\"top\\\" colspan=\\\"1\\\" rowspan=\\\"1\\\" style=\\\"word-break: break-all;\\\">曾经来过</td></tr></tbody></table><pre class=\\\"brush:html;toolbar:false\\\">&lt;div&gt;\\r\\n&nbsp;&nbsp;&lt;span&gt;这里是HTML标签&lt;/span&gt;\\r\\n&lt;/div&gt;</pre><h2>公式支持23333333</h2><p><img src=\\\"https://r.latexeasy.com/image.svg?%5Cint%20%5Cfrac%7B1%7D%7Bx%7D%20dx%20%3D%20%5Cln%20%5Cleft%7C%20x%20%5Cright%7C%20%2B%20C\\\" data-formula-image=\\\"%5Cint%20%5Cfrac%7B1%7D%7Bx%7D%20dx%20%3D%20%5Cln%20%5Cleft%7C%20x%20%5Cright%7C%20%2B%20C\\\"/></p><p><br/></p>\";\n\nvar (html1, html2) = text1.HtmlDiff(text2); // 对比两段文本并分别生成差异\nvar diffs = TextDiffer.Compute(text1, text2); // 对比两段文本并分别生成差异详细记录\nvar patches = DiffPatch.FromDiffs(diffs); // 根据差异信息生成补丁\npatches.ToText(); // 根据补丁记录重建文本\n(string newText, bool[] results) = patches.Apply(text1); // 将变更补丁应用到原始文本1，并返回是否应用成功\nvar text1 = diffs.Text1(); // 根据差异信息还原文本1\nvar text2 = diffs.Text2(); // 根据差异信息还原文本2\nvar delta = diffs.ToDelta(); // 根据差异信息生成类似于git差异的差分记录\nvar diffs = text1.FromDelta(delta); // 根据差分信息生成差异记录\n```\n\n### 53. 房贷试算模型\n\n集成案例：https://masuit.org/tools/loan\n\n**支持多次提前还款和多次调整利率，同时支持提前还款时变更贷款方式和缩短年限，如有利率调整或提前还款计划，因银行计算受实时利率或提前还款违约金影响，本试算模型的计算结果和银行结果大约有1‰的误差，结果仅供参考，请以银行结果为准。**\n\n模拟案例：\n贷款100万，\n初始利率6.27%，\n等额本息方式，\n贷30年，\n首次还款时间2021-2-1。\n\n利率调整：\n2022-1-1利率调整为5.92%，LPR调整\n2023-1-1利率调整为5.85%，LPR调整\n2023-9-25利率调整为4.3%，政策因素银行自动调整\n2025-1-1利率调整为4.2%，LPR调整\n2026-1-1利率调整为4.1%，LPR调整\n\n提前还款计划：\n2022-10-23提前还款10万，贷款方式不变，\n2023-10-11提前还款10万并缩短年限(`实际目前银行政策不允许`)，\n2025-10-12提前还款10万并修改为等额本金方式，\n2026-10-14提前还款10万并以等额本金方式+缩短年限(`实际目前银行政策不允许`)。\n\n计算代码如下：\n\n```csharp\nvar (totalInterest, actualInterest, savedInterest, totalRepayment, actualPayment, paymentPlans) = new LoanModel(1000000, 0.0627m, 360, DateTime.Parse(\"2021-2-1\"))\n{\n    RateAdjustments = new Dictionary<DateTime, decimal?>()\n    {\n        [DateTime.Parse(\"2022-1-1\")] = 0.0592m, // 调整前月供6170.19，调整后月供5948.53\n        [DateTime.Parse(\"2023-1-1\")] = 0.058m, // 调整前月供5948.53，调整后月供5273.92\n        [DateTime.Parse(\"2023-9-25\")] = 0.043m, // 调整前月供5273.92，调整后月供4496.91，调整次月还款5118.55\n        [DateTime.Parse(\"2025-1-1\")] = 0.042m, // 调整前月供4496.91，调整后首月4457.15\n        [DateTime.Parse(\"2026-1-1\")] = 0.041m, // 调整前月供4762.47，调整后月供4702，调整次月还款8.87元(还款方式改为了等额本金)\n    },\n\n    Prepayments = new List<PrepaymentOption>()\n    {\n        new(DateTime.Parse(\"2022-10-23\"), 100000m, false, LoanType.EquivalentInterest), // 提前还款前月供5948.53，提前还款后月供5339.85\n        new(DateTime.Parse(\"2023-10-11\"), 100000m, true, LoanType.EquivalentInterest), // 提前还款前月供5273.92，提前还款后月供4493.84，期数减少64期\n        new(DateTime.Parse(\"2025-10-12\"), 100000m, false, LoanType.EquivalentPrincipal), // 提前还款前月供4771.56，提前还款后月供首月4762.47，每月递减60.4元\n        new(DateTime.Parse(\"2026-10-14\"), 100000m, true, LoanType.EquivalentPrincipal), // 提前还款前月供4260.28，提前还款后月供首月4251.44，每月递减8.84元，期数减少38期\n    }\n}.Payment();\n```\n\n计算结果：\n总利息totalInterest：1221266.8\n实际支付利息actualInterest：403845.58\n提前还款节省利息savedInterest：817421.22\n总提前还款totalRepayment：400000.00\n实际还款总额actualPayment：1403845.58\n总还款期数paymentPlans：258期，**List类型，每条记录可以展示当期的利率，利息，本金，剩余本金等信息**\n\n# Asp.Net MVC和Asp.Net Core的支持断点续传和多线程下载的ResumeFileResult\n\n在ASP.NET Core中通过MVC/WebAPI应用程序传输文件数据时使用断点续传以及多线程下载支持。\n\n它提供了 `ETag`标头以及 `Last-Modified`标头。 它还支持以下前置条件标头：`If-Match`，`If-None-Match`，`If-Modified-Since`，`If-Unmodified-Since`，`If-Range`。\n\n## 支持 ASP.NET Core 2.0+\n\n从.NET Core2.0开始，ASP.NET Core内部支持断点续传。 因此只是对FileResult做了一些扩展。 只留下了“Content-Disposition” Inline的一部分。 所有代码都依赖于基础.NET类。\n\n## 如何使用\n\n### .NET Framework\n\n在你的控制器中，你可以像在 `FileResult`一样的方式使用它。\n\n```csharp\nusing Masuit.Tools.Mvc;\nusing Masuit.Tools.Mvc.ResumeFileResult;\n```\n\n```csharp\nprivate readonly MimeMapper mimeMapper=new MimeMapper(); // 推荐使用依赖注入\n\npublic ActionResult ResumeFileResult()\n{\n    var path = Server.MapPath(\"~/Content/test.mp4\");\n    return new ResumeFileResult(path, mimeMapper.GetMimeFromPath(path), Request);\n}\n\npublic ActionResult ResumeFile()\n{\n    return this.ResumeFile(\"~/Content/test.mp4\", mimeMapper.GetMimeFromPath(path), \"test.mp4\");\n}\n\npublic ActionResult ResumePhysicalFile()\n{\n    return this.ResumePhysicalFile(@\"D:/test.mp4\", mimeMapper.GetMimeFromPath(@\"D:/test.mp4\"), \"test.mp4\");\n}\n```\n\n### Asp.Net Core\n\n要使用ResumeFileResults，必须在 `Startup.cs`的 `ConfigureServices`方法调用中配置服务：\n\n```csharp\nusing Masuit.Tools.AspNetCore.ResumeFileResults.Extensions;\n```\n\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddResumeFileResult();\n}\n```\n\n然后在你的控制器中，你可以像在 `FileResult`一样的方式使用它。\n\n<details>\n    <summary>点击查看代码</summary>\n\n```csharp\nusing Masuit.Tools.AspNetCore.ResumeFileResults.Extensions;\n```\n\n```csharp\nprivate const string EntityTag = \"\\\"TestFile\\\"\";\n\nprivate readonly IHostingEnvironment _hostingEnvironment;\n\nprivate readonly DateTimeOffset _lastModified = new DateTimeOffset(2016, 1, 1, 0, 0, 0, TimeSpan.Zero);\n\n/// <summary>\n/// \n/// </summary>\n/// <param name=\"hostingEnvironment\"></param>\npublic TestController(IHostingEnvironment hostingEnvironment)\n{\n    _hostingEnvironment = hostingEnvironment;\n}\n\n[HttpGet(\"content/{fileName}/{etag}\")]\npublic IActionResult FileContent(bool fileName, bool etag)\n{\n    string webRoot = _hostingEnvironment.WebRootPath;\n    var content = System.IO.File.ReadAllBytes(Path.Combine(webRoot, \"TestFile.txt\"));\n    ResumeFileContentResult result = this.ResumeFile(content, \"text/plain\", fileName ? \"TestFile.txt\" : null, etag ? EntityTag : null);\n    result.LastModified = _lastModified;\n    return result;\n}\n\n[HttpGet(\"content/{fileName}\")]\npublic IActionResult FileContent(bool fileName)\n{\n    string webRoot = _hostingEnvironment.WebRootPath;\n    var content = System.IO.File.ReadAllBytes(Path.Combine(webRoot, \"TestFile.txt\"));\n    var result = new ResumeFileContentResult(content, \"text/plain\")\n    {\n        FileInlineName = \"TestFile.txt\",\n        LastModified = _lastModified\n    };\n    return result;\n}\n\n[HttpHead(\"file\")]\npublic IActionResult FileHead()\n{\n    ResumeVirtualFileResult result = this.ResumeFile(\"TestFile.txt\", \"text/plain\", \"TestFile.txt\", EntityTag);\n    result.LastModified = _lastModified;\n    return result;\n}\n\n[HttpPut(\"file\")]\npublic IActionResult FilePut()\n{\n    ResumeVirtualFileResult result = this.ResumeFile(\"TestFile.txt\", \"text/plain\", \"TestFile.txt\", EntityTag);\n    result.LastModified = _lastModified;\n    return result;\n}\n\n[HttpGet(\"stream/{fileName}/{etag}\")]\npublic IActionResult FileStream(bool fileName, bool etag)\n{\n    string webRoot = _hostingEnvironment.WebRootPath;\n    FileStream stream = System.IO.File.OpenRead(Path.Combine(webRoot, \"TestFile.txt\"));\n\n    ResumeFileStreamResult result = this.ResumeFile(stream, \"text/plain\", fileName ? \"TestFile.txt\" : null, etag ? EntityTag : null);\n    result.LastModified = _lastModified;\n    return result;\n}\n\n[HttpGet(\"stream/{fileName}\")]\npublic IActionResult FileStream(bool fileName)\n{\n    string webRoot = _hostingEnvironment.WebRootPath;\n    FileStream stream = System.IO.File.OpenRead(Path.Combine(webRoot, \"TestFile.txt\"));\n\n    var result = new ResumeFileStreamResult(stream, \"text/plain\")\n    {\n        FileInlineName = \"TestFile.txt\",\n        LastModified = _lastModified\n    };\n\n    return result;\n}\n\n[HttpGet(\"physical/{fileName}/{etag}\")]\npublic IActionResult PhysicalFile(bool fileName, bool etag)\n{\n    string webRoot = _hostingEnvironment.WebRootPath;\n\n    ResumePhysicalFileResult result = this.ResumePhysicalFile(Path.Combine(webRoot, \"TestFile.txt\"), \"text/plain\", fileName ? \"TestFile.txt\" : null, etag ? EntityTag : null);\n    result.LastModified = _lastModified;\n    return result;\n}\n\n[HttpGet(\"physical/{fileName}\")]\npublic IActionResult PhysicalFile(bool fileName)\n{\n    string webRoot = _hostingEnvironment.WebRootPath;\n\n    var result = new ResumePhysicalFileResult(Path.Combine(webRoot, \"TestFile.txt\"), \"text/plain\")\n    {\n        FileInlineName = \"TestFile.txt\",\n        LastModified = _lastModified\n    };\n\n    return result;\n}\n\n[HttpGet(\"virtual/{fileName}/{etag}\")]\npublic IActionResult VirtualFile(bool fileName, bool etag)\n{\n    ResumeVirtualFileResult result = this.ResumeFile(\"TestFile.txt\", \"text/plain\", fileName ? \"TestFile.txt\" : null, etag ? EntityTag : null);\n    result.LastModified = _lastModified;\n    return result;\n}\n```\n\n以上示例将为您的数据提供“Content-Disposition：attachment”。 当没有提供fileName时，数据将作为“Content-Disposition：inline”提供。\n另外，它可以提供 `ETag`和 `LastModified`标头。\n\n```csharp\n[HttpGet(\"virtual/{fileName}\")]\npublic IActionResult VirtualFile(bool fileName)\n{\n    var result = new ResumeVirtualFileResult(\"TestFile.txt\", \"text/plain\")\n    {\n        FileInlineName = \"TestFile.txt\",\n        LastModified = _lastModified\n    };\n    return result;\n}\n```\n\n</details>\n\n### 推荐项目\n\n基于EntityFrameworkCore和Lucene.NET实现的全文检索搜索引擎：[Masuit.LuceneEFCore.SearchEngine](https://github.com/ldqk/Masuit.LuceneEFCore.SearchEngine \"Masuit.LuceneEFCore.SearchEngine\")\n\n开源博客系统：[Masuit.MyBlogs](https://github.com/ldqk/Masuit.MyBlogs \"Masuit.MyBlogs\")\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.6044921875,
          "content": "# Security Policy\n\n## Supported Versions\n\nUse this section to tell people about which versions of your project are\ncurrently being supported with security updates.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 5.1.x   | :white_check_mark: |\n| 5.0.x   | :x:                |\n| 4.0.x   | :white_check_mark: |\n| < 4.0   | :x:                |\n\n## Reporting a Vulnerability\n\nUse this section to tell people how to report a vulnerability.\n\nTell them where to go, how often they can expect to get an update on a\nreported vulnerability, what to expect if the vulnerability is accepted or\ndeclined, etc.\n"
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}