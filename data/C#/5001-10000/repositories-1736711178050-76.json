{
  "metadata": {
    "timestamp": 1736711178050,
    "page": 76,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RicoSuter/NSwag",
      "stars": 6861,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.2861328125,
          "content": "* text=auto\n*.cs diff=csharp\n*.tt text eol=crlf\n*.sln text eol=crlf\n*.csproj text eol=crlf\n*.vbproj text eol=crlf\n*.vcxproj text eol=crlf\n*.vcproj text eol=crlf\n*.dbproj text eol=crlf\n*.fsproj text eol=crlf\n*.lsproj text eol=crlf\n*.wixproj text eol=crlf\n*.modelproj text eol=crlf\n*.sqlproj text eol=crlf\n*.wmaproj text eol=crlf\n*.xproj text eol=crlf\n*.props text eol=crlf\n*.filters text eol=crlf\n*.vcxitems text eol=crlf\n*.bat text\n*.coffee text\n*.css text\n*.htm text\n*.html text\n*.inc text\n*.ini text\n*.js text\nnswag.js text eol=lf\n*.jsx text\n*.json text\n*.less text\n*.php text\n*.pl text\n*.py text\n*.rb text\n*.sass text\n*.scm text\n*.scss text\n*.sh text eol=lf\n*.sql text\n*.styl text\n*.tpl text\n*.ts text\n*.twig text\n*.xml text\n*.xhtml text\n*.markdown text\n*.md text\n*.mdwn text\n*.mdown text\n*.mkd text\n*.mkdn text\n*.mdtxt text\n*.mdtext text\n*.txt text\nAUTHORS text\nCHANGELOG text\nCHANGES text\nCONTRIBUTING text\nCOPYING text\nINSTALL text\nlicense text\nLICENSE text\nNEWS text\nreadme text\n*README* text\nTODO text\n*.dot text\n*.ejs text\n*.haml text\n*.handlebars text\n*.hbs text\n*.hbt text\n*.jade text\n*.latte text\n*.mustache text\n*.phtml text\n*.tmpl text\n.csslintrc text\n.eslintrc text\n.jscsrc text\n.jshintrc text\n.jshintignore text\n.stylelintrc text\n*.bowerrc text\n*.cnf text\n*.conf text\n*.config text\n.editorconfig text\n.gitattributes text\n.gitconfig text\n.gitignore text\n.htaccess text\n*.npmignore text\n*.yaml text\n*.yml text\nMakefile text\nmakefile text\n*.ai binary\n*.bmp binary\n*.eps binary\n*.gif binary\n*.ico binary\n*.jng binary\n*.jp2 binary\n*.jpg binary\n*.jpeg binary\n*.jpx binary\n*.jxr binary\n*.pdf binary\n*.png binary\n*.psb binary\n*.psd binary\n*.svg text\n*.svgz binary\n*.tif binary\n*.tiff binary\n*.wbmp binary\n*.webp binary\n*.kar binary\n*.m4a binary\n*.mid binary\n*.midi binary\n*.mp3 binary\n*.ogg binary\n*.ra binary\n*.3gpp binary\n*.3gp binary\n*.as binary\n*.asf binary\n*.asx binary\n*.fla binary\n*.flv binary\n*.m4v binary\n*.mng binary\n*.mov binary\n*.mp4 binary\n*.mpeg binary\n*.mpg binary\n*.swc binary\n*.swf binary\n*.webm binary\n*.7z binary\n*.gz binary\n*.rar binary\n*.tar binary\n*.zip binary\n*.ttf binary\n*.eot binary\n*.otf binary\n*.woff binary\n*.woff2 binary\n*.exe binary\n*.pyc binary\n\nsrc/NSwag.AspNetCore/SwaggerUi/**/* linguist-vendored\nsrc/NSwag.AspNet.Owin/SwaggerUi/**/* linguist-vendored\nsrc/NSwag.Integration.*/**/* linguist-vendored"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.4169921875,
          "content": "src/**/bin/**\nsrc/**/obj/**\nsrc/packages/**\n\n**.suo\n**.user\n**.DotSettings\n\n**.sln.ide/**\n**.vs/**\n.vs/**\n\n[Bb]in/\n[Oo]bj/\n*.nugetreferenceswitcher\n/src/.vs/config\n**/project.lock.json\n/src/NSwag.AspNetCore/Output\n/src/Chocolatey/Output\n/src/NSwagStudio.Installer/Generated.wxs\n/src/NSwagStudio.Chocolatey/Output\n\n/src/NSwag.Integration.TypeScriptWeb/node_modules\n/src/NSwag.Integration.TypeScriptWeb/scripts/build\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsAngularJS.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsAngularJS.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryCallbacks.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryCallbacks.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromises.extensions.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromises.extensions.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromises.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromises.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromisesKO.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromisesKO.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromisesKO.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsAngularJS.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryCallbacks.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromises.extensions.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromises.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromisesKO.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsAngularJS.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryCallbacks.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromises.extensions.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsJQueryPromises.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsFetch.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsFetch.js\n/build/Packages\n/src/.vs\n/src/NSwag.ConsoleCore/Output\n/src/NSwag.Npm/node_modules\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsUberFetch.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsUberFetch.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsPetStoreFetch.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsPetStoreFetch.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsPetStoreFetch.js\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsPetStoreFetch.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsAngular2.extensions.js.map\n/src/NSwag.Integration.TypeScriptWeb/scripts/serviceClientsAngular2.extensions.js\n/src/dist\n*.nupkg\n/src/NSwagStudio.Installer/Generated.wxs\n/samples/.vs/config\n/samples/WithoutMiddleware/Sample.AspNetCore20/.vs/Sample.AspNetCore20/v15/Server/sqlite3\n/samples/WithoutMiddleware/Sample.AspNetCore20/.vs/Sample.AspNetCore20/DesignTimeBuild\n/samples/.vs/*\n.vscode/\n/src/.cr/*\n/samples/WithMiddleware/Sample.AspNetCore21.Nginx/.vs\n/samples/WithMiddleware/Sample.AspNetCore21.Nginx/Properties\n\n\n.editorconfig\n/samples/packages\n/src/NSwag.Console/Properties/launchSettings.json\n\n# Ignore files from JetBrainds Rider\n.idea/\n_ReSharper.Caches/\n\n# NUKE build temp files\n.nuke/temp\n\n/artifacts\n*.binlog\n*.gen\n"
        },
        {
          "name": ".nuke",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.2666015625,
          "content": "# Changelog\n\n## Release v11.3\n\nSee https://github.com/RicoSuter/NSwag/releases/tag/NSwag-Build-841\n\n## Release v11.0\n\nSee https://github.com/RicoSuter/NSwag/releases/tag/NSwag-Build-829\n\n## Release v10.0\n\nSee https://github.com/RicoSuter/NSwag/releases/tag/NSwag-Build-813\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.724609375,
          "content": "# Contributor License Agreement\n\nBy contributing your code to NSwag you grant Rico Suter a non-exclusive, irrevocable, worldwide,\nroyalty-free, sublicenseable, transferable license under all of Your relevant intellectual property rights\n(including copyright, patent, and any other rights), to use, copy, prepare derivative works of, distribute and\npublicly perform and display the Contributions on any licensing terms, including without limitation:\n(a) open source licenses like the MIT license; and (b) binary, proprietary, or commercial licenses. Except for the\nlicenses granted herein, You reserve all right, title, and interest in and to the Contribution.\n\nYou confirm that you are able to grant us these rights. You represent that You are legally entitled to grant the\nabove license. If Your employer has rights to intellectual property that You create, You represent that You have\nreceived permission to make the Contributions on behalf of that employer, or that Your employer has waived such\nrights for the Contributions.\n\nYou represent that the Contributions are Your original works of authorship, and to Your knowledge, no other person\nclaims, or has the right to claim, any right in any invention or patent related to the Contributions. You also\nrepresent that You are not legally obligated, whether by entering into an agreement or otherwise, in any way that\nconflicts with the terms of this license.\n\nRico Suter acknowledges that, except as explicitly described in this Agreement, any Contribution which\nyou provide is on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,\nINCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS\nFOR A PARTICULAR PURPOSE."
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 3.853515625,
          "content": "<Project>\n  <PropertyGroup>\n    <VersionPrefix>14.2.0</VersionPrefix>\n\n    <Authors>Rico Suter</Authors>\n    <Copyright>Copyright Â© Rico Suter, 2023</Copyright>\n\n    <Description>NSwag: The OpenAPI/Swagger API toolchain for .NET and TypeScript</Description>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <PackageProjectUrl>http://NSwag.org</PackageProjectUrl>\n    <PackageTags>OpenAPI Swagger AspNetCore Documentation CodeGen TypeScript WebApi AspNet</PackageTags>\n    <PackageIcon>NuGetIcon.png</PackageIcon>\n    <Company />\n\n    <SignAssembly>true</SignAssembly>\n    <AssemblyOriginatorKeyFile>../NSwag.snk</AssemblyOriginatorKeyFile>\n\n    <RepositoryType>git</RepositoryType>\n    <RepositoryUrl>https://github.com/RicoSuter/NSwag.git</RepositoryUrl>\n\n    <LangVersion>latest</LangVersion>\n    <ImplicitUsings>enable</ImplicitUsings>\n\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <!-- suppress NuGet audit checks being errors -->\n    <WarningsNotAsErrors>NU1901,NU1902,NU1903,NU1904</WarningsNotAsErrors>\n\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n    <EmbedUntrackedSources>true</EmbedUntrackedSources>\n    <IncludeSymbols>true</IncludeSymbols>\n    <SymbolPackageFormat>snupkg</SymbolPackageFormat>\n    <DebugSymbols>true</DebugSymbols>\n\n    <!-- reduce package size by only including english resources -->\n    <SatelliteResourceLanguages>en-US</SatelliteResourceLanguages>\n\n    <UseArtifactsOutput>true</UseArtifactsOutput>\n\n  </PropertyGroup>\n\n  <ItemGroup>\n    <None Include=\"..\\..\\assets\\NuGetIcon.png\" Pack=\"true\" Visible=\"false\" PackagePath=\"\" />\n  </ItemGroup>\n\n  <PropertyGroup Label=\"Analyzer settings\">\n    <EnableNETAnalyzers>true</EnableNETAnalyzers>\n    <AnalysisLevel>latest-Recommended</AnalysisLevel>\n    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>\n    <!--\n      [IDE0005] Using directive is unnecessary\n      [IDE0008] Use explicit type instead of 'var'\n      [IDE0017] Object initialization can be simplified\n      [IDE0021] Use block body for constructor\n      [IDE0022] Use block body for method\n      [IDE0029] Null check can be simplified\n      [IDE0032] Use auto property\n      [IDE0039] Use local function\n      [IDE0045] 'if' statement can be simplified\n      [IDE0046] 'if' statement can be simplified\n      [IDE0056] Indexing can be simplified\n      [IDE0057] Substring can be simplified\n      [IDE0060] Remove unused parameter\n      [IDE0090] 'new' expression can be simplified\n      [IDE0130] Namespace does not match folder structure\n      [IDE0160] Convert to block scoped namespace\n      [IDE0200] Lambda expression can be removed\n      [IDE0270] Null check can be simplified\n      [IDE0290] Use primary constructor\n      [IDE0330] Use 'System.Threading.Lock'\n      [CA1200] Avoid using cref tags with a prefix\n      [CA1510] Use 'ArgumentNullException.ThrowIfNull' instead of explicitly throwing a new exception instance\n      [CA1514] 'System.ReadOnlySpan<char>.Slice(int, int)' uses a redundant length calculation that can be removed\n      [CA1710] Rename to end in either 'Dictionary' or 'Collection'\n      [CA1716] rename parameter property so that it no longer conflicts with the reserved language keyword\n      [CA1720] Identifier 'xxx' contains type name\n      [CA1725] Overriden parameter name mismatch\n      [CA1845] Use span-based 'string.Concat' and 'AsSpan' instead of 'Substring'\n      [CA1870] Use a cached 'SearchValues' instance for improved searching performance\n      [CA2263] Prefer the generic overload 'System.Enum.GetValues<TEnum>()'\n\n      [SYSLIB0012] 'Assembly.CodeBase' is obsolete\n    -->\n    <NoWarn>$(NoWarn);IDE0005;IDE0008;IDE0017;IDE0021;IDE0022;IDE0029;IDE0032;IDE0039;IDE0045;IDE0046;IDE0056;IDE0057;IDE0060;IDE0090;IDE0130;IDE0160;IDE0200;IDE0270;IDE0290;IDE0330</NoWarn>\n    <NoWarn>$(NoWarn);CA1200;CA1510;CA1514;CA1710;CA1716;CA1720;CA1725;CA1845;CA1870;CA2263;SYSLIB0012</NoWarn>\n  </PropertyGroup>\n\n</Project>\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2021 Rico Suter\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.7900390625,
          "content": "## NSwag: The Swagger/OpenAPI toolchain for .NET, ASP.NET Core and TypeScript\n\nNSwag | [NJsonSchema](http://njsonschema.org) | [Apimundo](https://apimundo.com) | [Namotion.Reflection](https://github.com/RicoSuter/Namotion.Reflection)\n\n[![NuGet Version](https://img.shields.io/nuget/v/NSwag.Core.svg)](https://www.nuget.org/packages?q=NSwag)\n[![npm](https://img.shields.io/npm/v/nswag.svg)](https://www.npmjs.com/package/nswag)\n[![NuGet Version Preview](https://img.shields.io/nuget/vpre/NSwag.Core.svg)](https://www.nuget.org/packages?q=NSwag)\n[![build](https://github.com/RicoSuter/NSwag/actions/workflows/build.yml/badge.svg)](https://github.com/RicoSuter/NSwag/actions/workflows/build.yml)\n[![Discord](https://img.shields.io/badge/Discord-join%20chat-1dce73.svg)](https://discord.gg/BxQNy25WF6)\n[![StackOverflow](https://img.shields.io/badge/questions-on%20StackOverflow-orange.svg?style=flat)](http://stackoverflow.com/questions/tagged/nswag)\n[![Wiki](https://img.shields.io/badge/docs-in%20wiki-orange.svg?style=flat)](https://github.com/RicoSuter/nswag/wiki)\n[![Backers on Open Collective](https://opencollective.com/NSwag/backers/badge.svg)](#backers) \n[![Sponsors on Open Collective](https://opencollective.com/NSwag/sponsors/badge.svg)](#sponsors)\n\n:point_right: [**Announcing Apimundo:** An API documentation system based on NSwag and NJsonSchema](https://github.com/RicoSuter/NSwag/issues/3077) :point_left:\n\nNSwag is a Swagger/OpenAPI 2.0 and 3.0 toolchain for .NET, .NET Core, Web API, ASP.NET Core, TypeScript (jQuery, AngularJS, Angular 2+, Aurelia, KnockoutJS and more) and other platforms, written in C#. The [OpenAPI/Swagger specification](https://github.com/OAI/OpenAPI-Specification) uses JSON and JSON Schema to describe a RESTful web API. The NSwag project provides tools to generate OpenAPI specifications from existing ASP.NET Web API controllers and client code from these OpenAPI specifications. \n\nThe project combines the functionality of Swashbuckle (OpenAPI/Swagger generation) and AutoRest (client generation) in one toolchain (these two libs are not needed). This way a lot of incompatibilites can be avoided and features which are not well described by the OpenAPI specification or JSON Schema are better supported (e.g. [inheritance](https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance), [enum](https://github.com/NJsonSchema/NJsonSchema/wiki/Enums) and reference handling). The NSwag project heavily uses [NJsonSchema for .NET](http://njsonschema.org) for JSON Schema handling and C#/TypeScript class/interface generation. \n\n![ToolchainDiagram](assets/ToolchainDiagram.png) \n\nThe project is developed and maintained by [Rico Suter](http://rsuter.com) and other contributors.\n\n### Features\n\n- [Generate Swagger 2.0 and OpenAPI 3.0 specifications from C# ASP.NET (Core) controllers](https://github.com/RicoSuter/NSwag/wiki/Middlewares)\n- Serve the specs via ASP.NET (Core) middleware, optionally with [Swagger UI](https://github.com/swagger-api/swagger-ui) or [ReDoc](https://github.com/Rebilly/ReDoc)\n- Generate C# or TypeScript clients/proxies from these specs\n- Everything can be automated via CLI (distributed via NuGet tool or build target; or NPM)\n- CLI configured via JSON file or NSwagStudio Windows UI\n\n### Ways to use the toolchain\n\n- Simple to use Windows GUI, [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio)\n- By using the [OpenAPI or OpenAPI UI OWIN and ASP.NET Core Middlewares](https://github.com/RicoSuter/NSwag/wiki/Middlewares) (also serves the [Swagger UI](https://github.com/swagger-api/swagger-ui)) (recommended)\n- Via [command line](https://github.com/RicoSuter/NSwag/wiki/CommandLine) (Windows, Mac and Linux support through [Mono](http://www.mono-project.com/) or .NET Core console binary, also via [NPM package](https://www.npmjs.com/package/nswag))\n- In your C# code, via [NuGet](https://www.nuget.org/packages?q=NSwag)\n- In your [MSBuild targets](https://github.com/RicoSuter/NSwag/wiki/NSwag.MSBuild)\n- With [ServiceProjectReference](https://github.com/RicoSuter/NSwag/wiki/ServiceProjectReference) tags in your .csproj (preview)\n- In your [Azure V2 Functions](https://github.com/Jusas/NSwag.AzureFunctionsV2) (external project, might not use latest NSwag version)\n\n### Tutorials\n\n- [Add NSwag to your ASP.NET Core app](https://github.com/RicoSuter/NSwag/wiki/AspNetCore-Middleware)\n- [Integrate the NSwag toolchain into your ASP.NET Web API project](https://blog.rsuter.com/nswag-tutorial-integrate-the-nswag-toolchain-into-your-asp-net-web-api-project/)\n- [Generate an Angular TypeScript client from an existing ASP.NET Web API web assembly](https://blog.rsuter.com/nswag-tutorial-generate-an-angular-2-typescript-client-from-an-existing-asp-net-web-api-web-assembly/)\n- [Video Tutorial: How to integrate NSwag into your ASP.NET Core Web API project (5 mins)](https://www.youtube.com/watch?v=lF9ZZ8p2Ciw)\n\n### OpenAPI/Swagger Generators\n\n- ASP.NET Web API assembly to OpenAPI (supports .NET Core)\n    - [AspNetCoreOpenApiDocumentGenerator](https://github.com/RicoSuter/NSwag/wiki/AspNetCoreOpenApiDocumentGenerator)\n    - [WebApiOpenApiDocumentGenerator](https://github.com/RicoSuter/NSwag/wiki/WebApiOpenApiDocumentGenerator)\n        - Generates an OpenAPI specification for Web API controllers\n    - [WebApiToOpenApiCommand](https://github.com/RicoSuter/NSwag/wiki/WebApiToOpenApiCommand)\n        - Generates an OpenAPI specification for controllers in an external Web API assembly\n        - [Also supports loading of .NET Core assemblies](https://github.com/RicoSuter/NSwag/wiki/Assembly-loading)\n    - [TypesToOpenApiCommand](https://github.com/RicoSuter/NSwag/wiki/TypesToOpenApiCommand)\n        - Generates an OpenAPI specification containing only types from .NET assemblies\n\n### Code Generators\n\n- **CSharp Client**\n\t- [CSharpClientGenerator](https://github.com/RicoSuter/NSwag/wiki/CSharpClientGenerator)\n\t\t- Generates C# clients from an OpenAPI specification\n\t\t- Generates POCOs or classes implementing [INotifyPropertyChanged](https://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged(v=vs.110).aspx) supporting DTOs\n\t\t- The generated clients can be used with full .NET, .NET Core, Xamarin and .NET Standard 1.4 in general\n- **CSharp Controllers** (contract first/schema first development)\n\t- [CSharpControllerGenerator](https://github.com/RicoSuter/NSwag/wiki/CSharpControllerGenerator)\n\t    - Generates Web API Controllers based on an OpenAPI specification (ASP.NET Web API and ASP.NET Core)\n- **TypeScript Client**\n\t- [TypeScriptClientGenerator](https://github.com/RicoSuter/NSwag/wiki/TypeScriptClientGenerator)\n\t\t- Generates TypeScript clients from an OpenAPI specification\n\t\t- Available templates/supported libraries: \n\t\t\t- JQuery with Callbacks, `JQueryCallbacks`\n\t\t\t- JQuery with promises `JQueryPromises`\n\t\t\t- AngularJS using $http, `AngularJS`\n\t\t\t- Angular (v2+) using the http service, `Angular`\n\t\t\t- window.fetch API and ES6 promises, `Fetch` (use this template in your React/Redux app)\n\t\t\t- Aurelia using the HttpClient from aurelia-fetch-client, `Aurelia` (based on the Fetch template)\n\t\t\t- `Axios` (preview)\n\t    \n### Downloads\n\n- [Download latest **NSwagStudio MSI installer (NSwagStudio.msi)**](https://github.com/RicoSuter/NSwag/releases) (Windows Desktop application)\n- [Download latest **NSwag command line tools** and NSwagStudio (NSwag.zip)](https://github.com/RicoSuter/NSwag/releases)\n\n### NPM Packages\n\n- [NSwag](https://www.npmjs.com/package/nswag): Command line tools (.NET and .NET Core) distributed as NPM package\n\n### NuGet Packages\n\n#### Specification\n\n- **[NSwag.Core](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Core/versions/latest)**\n    - The OpenAPI/Swagger reader and writer classes, see [OpenApiDocument](https://github.com/RicoSuter/NSwag/wiki/OpenApiDocument) (.NET Standard 1.0 / 2.0 and .NET 4.5)\n- **[NSwag.Core.Yaml](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Core.Yaml/versions/latest)** (.NET Standard 1.3 / 2.0 and .NET 4.5)\n    - Extensions to read and write YAML OpenAPI specifications\n- **[NSwag.Annotations](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Annotations/versions/latest)** (.NET Standard 1.0 / 2.0 and .NET 4.5)\n    - Attributes to decorate Web API controllers to control the OpenAPI generation\n\n#### OpenAPI generation\n\n- **[NSwag.Generation](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Generation/versions/latest/)** (.NET Standard 1.0 / 2.0 and .NET 4.5)\n    - Classes to generate OpenAPI specifications\n- **[NSwag.Generation.WebApi](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Generation.WebApi/versions/latest)** (.NET Standard 1.0 / 2.0 and .NET 4.5)\n    - Classes to generate OpenAPI specifications from Web API controllers, see [WebApiOpenApiDocumentGenerator](https://github.com/RicoSuter/NSwag/wiki/WebApiOpenApiDocumentGenerator)\n- **[NSwag.Generation.AspNetCore](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Generation.AspNetCore/versions/latest)** (.NET Standard 1.6 / 2.0 and .NET 4.5.1)\n    - (Experimental) Classes to generate OpenAPI specifications from ASP.NET Core MVC controllers using the ApiExplorer\n\n#### Code generation\n\n- **[NSwag.CodeGeneration](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.CodeGeneration/versions/latest)** (.NET Standard 1.3 / 2.0 / .NET 4.5.1)\n    - Base classes to generate clients from OpenAPI specifications\n- **[NSwag.CodeGeneration.CSharp](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.CodeGeneration.CSharp/versions/latest)** (.NET Standard 1.3 and .NET 4.5.1)\n    - Classes to generate C# clients from OpenAPI specifications, see [CSharpClientGenerator](https://github.com/RicoSuter/NSwag/wiki/CSharpClientGenerator) and [CSharpControllerGenerator](https://github.com/RicoSuter/NSwag/wiki/CSharpControllerGenerator)\n- **[NSwag.CodeGeneration.TypeScript](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.CodeGeneration.TypeScript/versions/latest)** (.NET Standard 1.3 and .NET 4.5.1)\n    - Classes to generate TypeScript clients from OpenAPI specifications, see [TypeScriptClientGenerator](https://github.com/RicoSuter/NSwag/wiki/TypeScriptClientGenerator)\n\n#### ASP.NET and ASP.NET Core\n\n- **[NSwag.AspNetCore](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.AspNetCore/versions/latest)** (.NET Standard 1.6 / 2.0 and .NET 4.5.1+)\n- **[NSwag.AspNet.Owin](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.AspNet.Owin/versions/latest)** (.NET 4.5+)\n    - [ASP.NET Core/OWIN middlewares](https://github.com/RicoSuter/NSwag/wiki/Middlewares) for serving OpenAPI specifications and Swagger UI\n- **[NSwag.AspNet.WebApi](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.AspNet.WebApi/versions/latest)** (.NET 4.5+)\n    - ASP.NET Web API filter which serializes exceptions ([JsonExceptionFilterAttribute](https://github.com/RicoSuter/NSwag/wiki/JsonExceptionFilterAttribute))\n\n#### Frontends\n\n- **[NSwag.AssemblyLoader](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.AssemblyLoader/versions/latest)** (.NET Standard 1.6 / 2.0 and .NET 4.5.1): \n    - Classes to load assemblies in an isolated AppDomain and generate OpenAPI specs from Web API controllers\n- **[NSwag.Commands](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Commands/versions/latest)** (.NET Standard 1.6 / 2.0 and .NET 4.5.1+): \n    - Commands for the command line tool implementations and UI\n- **[NSwag.MSBuild](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.MSBuild/versions/latest)** (MSBuild .targets): \n    - Adds a .targets file to your Visual Studio project, so that you can run the NSwag command line tool in an MSBuild target, see [MSBuild](https://github.com/RicoSuter/NSwag/wiki/MSBuild)\n- **[NSwag.ConsoleCore](https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.ConsoleCore/versions/latest)** (.NET Core 1.0, 1.1, 2.0, 2.1 and 2.2): \n    - Command line tool for .NET Core (`dotnet nswag`)\n    - `<DotNetCliToolReference Include=\"NSwag.ConsoleCore\" Version=\"...\" />`\n- **[NSwagStudio](https://chocolatey.org/packages/nswagstudio)** (Chocolatey, Windows): \n    - Package to install the NSwagStudio and command line tools via Chocolatey\n\n#### CI NuGet Feed\n\nhttps://www.myget.org/F/nswag/api/v3/index.json\n\nThe NuGet packages may require the **Microsoft.NETCore.Portable.Compatibility** package on .NET Core/UWP targets (if mscorlib is missing). \n\n![LayerDiagram](assets/LayerDiagram.png)\n\n### Usage in C&#35;\n\nTo register the [middlewares](https://github.com/RicoSuter/NSwag/wiki/AspNetCore-Middleware) to generate an OpenAPI spec and render the UI, register NSwag in `Startup.cs`: \n\n```csharp\npublic class Startup\n{\n    ...\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddOpenApiDocument(); // add OpenAPI v3 document\n//      services.AddSwaggerDocument(); // add Swagger v2 document\n    }\n\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n    {\n        ...\n\n        app.UseOpenApi(); // serve OpenAPI/Swagger documents\n        app.UseSwaggerUi(); // serve Swagger UI\n        app.UseReDoc(); // serve ReDoc UI\n    }\n}\n```\n\nThe following code shows how to read an OpenAPI/Swagger specification and generate C# client classes to call the described web services: \n\t\n```cs\nvar document = await OpenApiDocument.FromFileAsync(\"openapi.json\");\nvar clientSettings = new CSharpClientGeneratorSettings \n{\n    ClassName = \"MyClass\",\n    CSharpGeneratorSettings = \n    {\n        Namespace = \"MyNamespace\"\n    }\n};\n\nvar clientGenerator = new CSharpClientGenerator(document, clientSettings);\nvar code = clientGenerator.GenerateFile();\n```\n\nCheck out the [project Wiki](https://github.com/RicoSuter/NSwag/wiki) for more information.\n\n### NSwagStudio\n\nThe generators can be used in a comfortable and simple Windows GUI called [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio): \n\n[![](https://raw.githubusercontent.com/RicoSuter/NSwag/master/assets/screenshots/03_WebAPI_CSharp.png)](https://raw.githubusercontent.com/RicoSuter/NSwag/master/assets/screenshots/03_WebAPI_CSharp.png)\n\n## Sponsors, support and consulting\n\nCompanies or individuals which paid a substantial amount for implementing, fixing issues, support or sponsoring are listed below. Thank you for supporting this project! You can also become a financial contributor:\n\n- [Sponsor main contributor Rico Suter via GitHub](https://github.com/sponsors/RicoSuter)\n- [Sponsor project via Open Collective for NSwag](https://opencollective.com/nswag)\n\nPlease contact [Rico Suter](https://rsuter.com) for paid consulting and support. \n\n## Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"https://github.com/RicoSuter/NSwag/graphs/contributors\"><img src=\"https://opencollective.com/NSwag/contributors.svg?width=890&button=false\" /></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. \n\n**Top sponsors:**\n\n[![](https://images.gotowebinar.com/30dcc42d33945684be9cf66852300d1a)](https://picturepark.com)\n\n**Sponsors:**\n\n<a href=\"https://opencollective.com/NSwag/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/NSwag/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/NSwag/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/NSwag/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/NSwag/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/NSwag/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/NSwag/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/NSwag/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/NSwag/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/NSwag/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/sponsor/9/avatar.svg\"></a>\n\n## Backers\n\nThank you to all our backers!\n\n<a href=\"https://opencollective.com/NSwag#backers\" target=\"_blank\"><img src=\"https://opencollective.com/NSwag/backers.svg?width=890\"></a>\n \n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 2.783203125,
          "content": "trigger:\n  branches:\n      include:\n      - master\n      - release\n      - refs/tags/*\npr:\n- master\n\npool:\n  vmImage: 'windows-2019'\n\nvariables:\n  BuildConfiguration: Release\n  Projects: 'src/NSwag.sln'\n\nsteps:\n- task: CmdLine@2\n  displayName: 'Allow long file path'\n  inputs:\n    script: 'git config --system core.longpaths true'\n- checkout: self\n# Install required SDKs and tools\n- task: UseDotNet@2\n  displayName: 'Install .NET Core SDK'\n  inputs:\n    packageType: 'sdk'\n    version: '6.0.0'\n    includePreviewVersions: true\n    performMultiLevelLookup: true\n    useGlobalJson: true\n\n- task: UseDotNet@2\n  displayName: 'Install .NET Core SDK'\n  inputs:\n    packageType: 'sdk'\n    version: '7.0.x'\n    includePreviewVersions: true\n    performMultiLevelLookup: true\n    useGlobalJson: true\n\n- task: UseDotNet@2\n  displayName: 'Install .NET Core SDK'\n  inputs:\n    packageType: 'sdk'\n    version: '8.0.100'\n    includePreviewVersions: true\n    performMultiLevelLookup: true\n    useGlobalJson: true\n\n- task: CmdLine@2\n  displayName: 'Install DNT'\n  inputs:\n    script: 'npm i -g dotnettools'\n\n- task: CmdLine@2\n  displayName: 'Install WiX Toolset'\n  inputs:\n    script: 'choco install wixtoolset'\n\n- task: CmdLine@2\n  displayName: 'Patch project version (preview)'\n  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/release'))\n  inputs:\n    script: 'dnt bump-versions preview \"$(Build.BuildNumber)\"'\n    failOnStderr: true\n\n- task: DotNetCoreCLI@2\n  displayName: 'Restore packages'\n  inputs: \n    command: 'restore'\n    projects: '$(Projects)'\n    includeNuGetOrg: true\n\n# Build and test\n- task: MSBuild@1\n  displayName: 'Build solution'\n  inputs:\n    solution: '$(Projects)'\n    msbuildArchitecture: 'x86'\n    configuration: '$(BuildConfiguration)'\n\n- task: VSTest@2\n  displayName: 'Run tests'\n  inputs:\n    testSelector: 'testAssemblies'\n    testAssemblyVer2: |\n      **\\*test*.dll\n      !**\\*TestAdapter.dll\n      !**\\*Integration*.dll\n      !**\\obj\\**\n    searchFolder: '$(System.DefaultWorkingDirectory)'\n    configuration: '$(BuildConfiguration)'\n\n# Publish artifacts\n- task: CopyFiles@2\n  displayName: 'Copy packages'\n#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))\n  inputs:\n    Contents: '**/*.nupkg'\n    TargetFolder: '$(Build.ArtifactStagingDirectory)'\n    flattenFolders: true\n\n- task: CopyFiles@2\n  displayName: 'Copy MSI'\n#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))\n  inputs:\n    Contents: '**/*.msi'\n    TargetFolder: '$(Build.ArtifactStagingDirectory)'\n    flattenFolders: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish artifacts'\n#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)'\n    ArtifactName: 'drop'\n    publishLocation: 'Container'\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.2021484375,
          "content": ":; set -eo pipefail\n:; SCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n:; ${SCRIPT_DIR}/build.sh \"$@\"\n:; exit $?\n\n@ECHO OFF\npowershell -ExecutionPolicy ByPass -NoProfile -File \"%~dp0build.ps1\" %*\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 3.1484375,
          "content": "[CmdletBinding()]\nParam(\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$BuildArguments\n)\n\nWrite-Output \"PowerShell $($PSVersionTable.PSEdition) version $($PSVersionTable.PSVersion)\"\n\nSet-StrictMode -Version 2.0; $ErrorActionPreference = \"Stop\"; $ConfirmPreference = \"None\"; trap { Write-Error $_ -ErrorAction Continue; exit 1 }\n$PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\n$BuildProjectFile = \"$PSScriptRoot\\build\\_build.csproj\"\n$TempDirectory = \"$PSScriptRoot\\\\.nuke\\temp\"\n\n$DotNetGlobalFile = \"$PSScriptRoot\\\\global.json\"\n$DotNetInstallUrl = \"https://dot.net/v1/dotnet-install.ps1\"\n$DotNetChannel = \"STS\"\n\n$env:DOTNET_CLI_TELEMETRY_OPTOUT = 1\n$env:DOTNET_NOLOGO = 1\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction ExecSafe([scriptblock] $cmd) {\n    & $cmd\n    if ($LASTEXITCODE) { exit $LASTEXITCODE }\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif ($null -ne (Get-Command \"dotnet\" -ErrorAction SilentlyContinue) -and `\n     $(dotnet --version) -and $LASTEXITCODE -eq 0) {\n    $env:DOTNET_EXE = (Get-Command \"dotnet\").Path\n}\nelse {\n    # Download install script\n    $DotNetInstallFile = \"$TempDirectory\\dotnet-install.ps1\"\n    New-Item -ItemType Directory -Path $TempDirectory -Force | Out-Null\n    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n    (New-Object System.Net.WebClient).DownloadFile($DotNetInstallUrl, $DotNetInstallFile)\n\n    # If global.json exists, load expected version\n    if (Test-Path $DotNetGlobalFile) {\n        $DotNetGlobal = $(Get-Content $DotNetGlobalFile | Out-String | ConvertFrom-Json)\n        if ($DotNetGlobal.PSObject.Properties[\"sdk\"] -and $DotNetGlobal.sdk.PSObject.Properties[\"version\"]) {\n            $DotNetVersion = $DotNetGlobal.sdk.version\n        }\n    }\n\n    # Install by channel or version\n    $DotNetDirectory = \"$TempDirectory\\dotnet-win\"\n    if (!(Test-Path variable:DotNetVersion)) {\n        ExecSafe { & powershell $DotNetInstallFile -InstallDir $DotNetDirectory -Channel $DotNetChannel -NoPath }\n    } else {\n        ExecSafe { & powershell $DotNetInstallFile -InstallDir $DotNetDirectory -Version $DotNetVersion -NoPath }\n    }\n    $env:DOTNET_EXE = \"$DotNetDirectory\\dotnet.exe\"\n    $env:PATH = \"$DotNetDirectory;$env:PATH\"\n}\n\nWrite-Output \"Microsoft (R) .NET SDK version $(& $env:DOTNET_EXE --version)\"\n\nif (Test-Path env:NUKE_ENTERPRISE_TOKEN) {\n    & $env:DOTNET_EXE nuget remove source \"nuke-enterprise\" > $null\n    & $env:DOTNET_EXE nuget add source \"https://f.feedz.io/nuke/enterprise/nuget\" --name \"nuke-enterprise\" --username \"PAT\" --password $env:NUKE_ENTERPRISE_TOKEN > $null\n}\n\nExecSafe { & $env:DOTNET_EXE build $BuildProjectFile /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet }\nExecSafe { & $env:DOTNET_EXE run --project $BuildProjectFile --no-build -- $BuildArguments }\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 2.5654296875,
          "content": "#!/usr/bin/env bash\n\nbash --version 2>&1 | head -n 1\n\nset -eo pipefail\nSCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\nBUILD_PROJECT_FILE=\"$SCRIPT_DIR/build/_build.csproj\"\nTEMP_DIRECTORY=\"$SCRIPT_DIR//.nuke/temp\"\n\nDOTNET_GLOBAL_FILE=\"$SCRIPT_DIR//global.json\"\nDOTNET_INSTALL_URL=\"https://dot.net/v1/dotnet-install.sh\"\nDOTNET_CHANNEL=\"STS\"\n\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1\nexport DOTNET_NOLOGO=1\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction FirstJsonValue {\n    perl -nle 'print $1 if m{\"'\"$1\"'\": \"([^\"]+)\",?}' <<< \"${@:2}\"\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif [ -x \"$(command -v dotnet)\" ] && dotnet --version &>/dev/null; then\n    export DOTNET_EXE=\"$(command -v dotnet)\"\nelse\n    # Download install script\n    DOTNET_INSTALL_FILE=\"$TEMP_DIRECTORY/dotnet-install.sh\"\n    mkdir -p \"$TEMP_DIRECTORY\"\n    curl -Lsfo \"$DOTNET_INSTALL_FILE\" \"$DOTNET_INSTALL_URL\"\n    chmod +x \"$DOTNET_INSTALL_FILE\"\n\n    # If global.json exists, load expected version\n    if [[ -f \"$DOTNET_GLOBAL_FILE\" ]]; then\n        DOTNET_VERSION=$(FirstJsonValue \"version\" \"$(cat \"$DOTNET_GLOBAL_FILE\")\")\n        if [[ \"$DOTNET_VERSION\" == \"\"  ]]; then\n            unset DOTNET_VERSION\n        fi\n    fi\n\n    # Install by channel or version\n    DOTNET_DIRECTORY=\"$TEMP_DIRECTORY/dotnet-unix\"\n    if [[ -z ${DOTNET_VERSION+x} ]]; then\n        \"$DOTNET_INSTALL_FILE\" --install-dir \"$DOTNET_DIRECTORY\" --channel \"$DOTNET_CHANNEL\" --no-path\n    else\n        \"$DOTNET_INSTALL_FILE\" --install-dir \"$DOTNET_DIRECTORY\" --version \"$DOTNET_VERSION\" --no-path\n    fi\n    export DOTNET_EXE=\"$DOTNET_DIRECTORY/dotnet\"\n    export PATH=\"$DOTNET_DIRECTORY:$PATH\"\nfi\n\necho \"Microsoft (R) .NET SDK version $(\"$DOTNET_EXE\" --version)\"\n\nif [[ ! -z ${NUKE_ENTERPRISE_TOKEN+x} && \"$NUKE_ENTERPRISE_TOKEN\" != \"\" ]]; then\n    \"$DOTNET_EXE\" nuget remove source \"nuke-enterprise\" &>/dev/null || true\n    \"$DOTNET_EXE\" nuget add source \"https://f.feedz.io/nuke/enterprise/nuget\" --name \"nuke-enterprise\" --username \"PAT\" --password \"$NUKE_ENTERPRISE_TOKEN\" --store-password-in-clear-text &>/dev/null || true\nfi\n\n\"$DOTNET_EXE\" build \"$BUILD_PROJECT_FILE\" /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet\n\"$DOTNET_EXE\" run --project \"$BUILD_PROJECT_FILE\" --no-build -- \"$@\"\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.0751953125,
          "content": "{\n  \"sdk\": {\n    \"version\": \"9.0.100\",\n    \"rollForward\": \"latestMinor\"\n  }\n}"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}