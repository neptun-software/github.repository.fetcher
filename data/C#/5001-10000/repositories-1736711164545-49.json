{
  "metadata": {
    "timestamp": 1736711164545,
    "page": 49,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dvf/blockchain",
      "stars": 7849,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.162109375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# PyCharm\n.idea/\n\nnode_modules/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1435546875,
          "content": "language: python\n\npython:\n  - 3.6\n  - nightly\n\ninstall:\n  - pip install pipenv\n  - pipenv install --dev\n\nscript:\n  - pipenv run python -m unittest\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2490234375,
          "content": "FROM python:3.6-alpine\n\nWORKDIR /app\n\n# Install dependencies.\nADD requirements.txt /app\nRUN cd /app && \\\n    pip install -r requirements.txt\n\n# Add actual source code.\nADD blockchain.py /app\n\nEXPOSE 5000\n\nCMD [\"python\", \"blockchain.py\", \"--port\", \"5000\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2017 Daniel van Flymen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Pipfile",
          "type": "blob",
          "size": 0.18359375,
          "content": "[[source]]\nurl = \"https://pypi.python.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[dev-packages]\n\n[requires]\npython_version = \"3.6\"\n\n[packages]\n\nflask = \"==0.12.2\"\nrequests = \"==2.18.4\"\n\n"
        },
        {
          "name": "Pipfile.lock",
          "type": "blob",
          "size": 3.896484375,
          "content": "{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"45af71184b5b013f58a8601f7f87c9f0b882afe19f197ce45d6d08e46d615159\"\n        },\n        \"host-environment-markers\": {\n            \"implementation_name\": \"cpython\",\n            \"implementation_version\": \"3.6.2\",\n            \"os_name\": \"posix\",\n            \"platform_machine\": \"x86_64\",\n            \"platform_python_implementation\": \"CPython\",\n            \"platform_release\": \"4.10.0-35-generic\",\n            \"platform_system\": \"Linux\",\n            \"platform_version\": \"#39~16.04.1-Ubuntu SMP Wed Sep 13 09:02:42 UTC 2017\",\n            \"python_full_version\": \"3.6.2\",\n            \"python_version\": \"3.6\",\n            \"sys_platform\": \"linux\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.6\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.python.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {\n        \"certifi\": {\n            \"hashes\": [\n                \"sha256:54a07c09c586b0e4c619f02a5e94e36619da8e2b053e20f594348c0611803704\",\n                \"sha256:40523d2efb60523e113b44602298f0960e900388cf3bb6043f645cf57ea9e3f5\"\n            ],\n            \"version\": \"==2017.7.27.1\"\n        },\n        \"chardet\": {\n            \"hashes\": [\n                \"sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\",\n                \"sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\"\n            ],\n            \"version\": \"==3.0.4\"\n        },\n        \"click\": {\n            \"hashes\": [\n                \"sha256:29f99fc6125fbc931b758dc053b3114e55c77a6e4c6c3a2674a2dc986016381d\",\n                \"sha256:f15516df478d5a56180fbf80e68f206010e6d160fc39fa508b65e035fd75130b\"\n            ],\n            \"version\": \"==6.7\"\n        },\n        \"flask\": {\n            \"hashes\": [\n                \"sha256:0749df235e3ff61ac108f69ac178c9770caeaccad2509cb762ce1f65570a8856\",\n                \"sha256:49f44461237b69ecd901cc7ce66feea0319b9158743dd27a2899962ab214dac1\"\n            ],\n            \"version\": \"==0.12.2\"\n        },\n        \"idna\": {\n            \"hashes\": [\n                \"sha256:8c7309c718f94b3a625cb648ace320157ad16ff131ae0af362c9f21b80ef6ec4\",\n                \"sha256:2c6a5de3089009e3da7c5dde64a141dbc8551d5b7f6cf4ed7c2568d0cc520a8f\"\n            ],\n            \"version\": \"==2.6\"\n        },\n        \"itsdangerous\": {\n            \"hashes\": [\n                \"sha256:cbb3fcf8d3e33df861709ecaf89d9e6629cff0a217bc2848f1b41cd30d360519\"\n            ],\n            \"version\": \"==0.24\"\n        },\n        \"jinja2\": {\n            \"hashes\": [\n                \"sha256:2231bace0dfd8d2bf1e5d7e41239c06c9e0ded46e70cc1094a0aa64b0afeb054\",\n                \"sha256:ddaa01a212cd6d641401cb01b605f4a4d9f37bfc93043d7f760ec70fb99ff9ff\"\n            ],\n            \"version\": \"==2.9.6\"\n        },\n        \"markupsafe\": {\n            \"hashes\": [\n                \"sha256:a6be69091dac236ea9c6bc7d012beab42010fa914c459791d627dad4910eb665\"\n            ],\n            \"version\": \"==1.0\"\n        },\n        \"requests\": {\n            \"hashes\": [\n                \"sha256:6a1b267aa90cac58ac3a765d067950e7dbbf75b1da07e895d1f594193a40a38b\",\n                \"sha256:9c443e7324ba5b85070c4a818ade28bfabedf16ea10206da1132edaa6dda237e\"\n            ],\n            \"version\": \"==2.18.4\"\n        },\n        \"urllib3\": {\n            \"hashes\": [\n                \"sha256:06330f386d6e4b195fbfc736b297f58c5a892e4440e54d294d7004e3a9bbea1b\",\n                \"sha256:cc44da8e1145637334317feebd728bd869a35285b93cbb4cca2577da7e62db4f\"\n            ],\n            \"version\": \"==1.22\"\n        },\n        \"werkzeug\": {\n            \"hashes\": [\n                \"sha256:e8549c143af3ce6559699a01e26fa4174f4c591dbee0a499f3cd4c3781cdec3d\",\n                \"sha256:903a7b87b74635244548b30d30db4c8947fe64c5198f58899ddcd3a13c23bb26\"\n            ],\n            \"version\": \"==0.12.2\"\n        }\n    },\n    \"develop\": {}\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.029296875,
          "content": "# Are you looking for the source code for my book?\n\nPlease find it here: https://github.com/dvf/blockchain-book\n\nThe book is available on Amazon: https://www.amazon.com/Learn-Blockchain-Building-Understanding-Cryptocurrencies/dp/1484251709\n\n# Learn Blockchains by Building One\n\n[![Build Status](https://travis-ci.org/dvf/blockchain.svg?branch=master)](https://travis-ci.org/dvf/blockchain)\n\nThis is the source code for my post on [Building a Blockchain](https://medium.com/p/117428612f46). \n\n## Installation\n\n1. Make sure [Python 3.6+](https://www.python.org/downloads/) is installed. \n2. Install [pipenv](https://github.com/kennethreitz/pipenv). \n\n```\n$ pip install pipenv \n```\n3. Install requirements  \n```\n$ pipenv install \n``` \n\n4. Run the server:\n    * `$ pipenv run python blockchain.py` \n    * `$ pipenv run python blockchain.py -p 5001`\n    * `$ pipenv run python blockchain.py --port 5002`\n    \n## Docker\n\nAnother option for running this blockchain program is to use Docker.  Follow the instructions below to create a local Docker container:\n\n1. Clone this repository\n2. Build the docker container\n\n```\n$ docker build -t blockchain .\n```\n\n3. Run the container\n\n```\n$ docker run --rm -p 80:5000 blockchain\n```\n\n4. To add more instances, vary the public port number before the colon:\n\n```\n$ docker run --rm -p 81:5000 blockchain\n$ docker run --rm -p 82:5000 blockchain\n$ docker run --rm -p 83:5000 blockchain\n```\n\n## Installation (C# Implementation)\n\n1. Install a free copy of Visual Studio IDE (Community Edition):\nhttps://www.visualstudio.com/vs/\n\n2. Once installed, open the solution file (BlockChain.sln) using the File > Open > Project/Solution menu options within Visual Studio.\n\n3. From within the \"Solution Explorer\", right click the BlockChain.Console project and select the \"Set As Startup Project\" option.\n\n4. Click the \"Start\" button, or hit F5 to run. The program executes in a console window, and is controlled via HTTP with the same commands as the Python version.\n\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n"
        },
        {
          "name": "blockchain.py",
          "type": "blob",
          "size": 8.2900390625,
          "content": "import hashlib\nimport json\nfrom time import time\nfrom urllib.parse import urlparse\nfrom uuid import uuid4\n\nimport requests\nfrom flask import Flask, jsonify, request\n\n\nclass Blockchain:\n    def __init__(self):\n        self.current_transactions = []\n        self.chain = []\n        self.nodes = set()\n\n        # Create the genesis block\n        self.new_block(previous_hash='1', proof=100)\n\n    def register_node(self, address):\n        \"\"\"\n        Add a new node to the list of nodes\n\n        :param address: Address of node. Eg. 'http://192.168.0.5:5000'\n        \"\"\"\n\n        parsed_url = urlparse(address)\n        if parsed_url.netloc:\n            self.nodes.add(parsed_url.netloc)\n        elif parsed_url.path:\n            # Accepts an URL without scheme like '192.168.0.5:5000'.\n            self.nodes.add(parsed_url.path)\n        else:\n            raise ValueError('Invalid URL')\n\n\n    def valid_chain(self, chain):\n        \"\"\"\n        Determine if a given blockchain is valid\n\n        :param chain: A blockchain\n        :return: True if valid, False if not\n        \"\"\"\n\n        last_block = chain[0]\n        current_index = 1\n\n        while current_index < len(chain):\n            block = chain[current_index]\n            print(f'{last_block}')\n            print(f'{block}')\n            print(\"\\n-----------\\n\")\n            # Check that the hash of the block is correct\n            last_block_hash = self.hash(last_block)\n            if block['previous_hash'] != last_block_hash:\n                return False\n\n            # Check that the Proof of Work is correct\n            if not self.valid_proof(last_block['proof'], block['proof'], last_block_hash):\n                return False\n\n            last_block = block\n            current_index += 1\n\n        return True\n\n    def resolve_conflicts(self):\n        \"\"\"\n        This is our consensus algorithm, it resolves conflicts\n        by replacing our chain with the longest one in the network.\n\n        :return: True if our chain was replaced, False if not\n        \"\"\"\n\n        neighbours = self.nodes\n        new_chain = None\n\n        # We're only looking for chains longer than ours\n        max_length = len(self.chain)\n\n        # Grab and verify the chains from all the nodes in our network\n        for node in neighbours:\n            response = requests.get(f'http://{node}/chain')\n\n            if response.status_code == 200:\n                length = response.json()['length']\n                chain = response.json()['chain']\n\n                # Check if the length is longer and the chain is valid\n                if length > max_length and self.valid_chain(chain):\n                    max_length = length\n                    new_chain = chain\n\n        # Replace our chain if we discovered a new, valid chain longer than ours\n        if new_chain:\n            self.chain = new_chain\n            return True\n\n        return False\n\n    def new_block(self, proof, previous_hash):\n        \"\"\"\n        Create a new Block in the Blockchain\n\n        :param proof: The proof given by the Proof of Work algorithm\n        :param previous_hash: Hash of previous Block\n        :return: New Block\n        \"\"\"\n\n        block = {\n            'index': len(self.chain) + 1,\n            'timestamp': time(),\n            'transactions': self.current_transactions,\n            'proof': proof,\n            'previous_hash': previous_hash or self.hash(self.chain[-1]),\n        }\n\n        # Reset the current list of transactions\n        self.current_transactions = []\n\n        self.chain.append(block)\n        return block\n\n    def new_transaction(self, sender, recipient, amount):\n        \"\"\"\n        Creates a new transaction to go into the next mined Block\n\n        :param sender: Address of the Sender\n        :param recipient: Address of the Recipient\n        :param amount: Amount\n        :return: The index of the Block that will hold this transaction\n        \"\"\"\n        self.current_transactions.append({\n            'sender': sender,\n            'recipient': recipient,\n            'amount': amount,\n        })\n\n        return self.last_block['index'] + 1\n\n    @property\n    def last_block(self):\n        return self.chain[-1]\n\n    @staticmethod\n    def hash(block):\n        \"\"\"\n        Creates a SHA-256 hash of a Block\n\n        :param block: Block\n        \"\"\"\n\n        # We must make sure that the Dictionary is Ordered, or we'll have inconsistent hashes\n        block_string = json.dumps(block, sort_keys=True).encode()\n        return hashlib.sha256(block_string).hexdigest()\n\n    def proof_of_work(self, last_block):\n        \"\"\"\n        Simple Proof of Work Algorithm:\n\n         - Find a number p' such that hash(pp') contains leading 4 zeroes\n         - Where p is the previous proof, and p' is the new proof\n         \n        :param last_block: <dict> last Block\n        :return: <int>\n        \"\"\"\n\n        last_proof = last_block['proof']\n        last_hash = self.hash(last_block)\n\n        proof = 0\n        while self.valid_proof(last_proof, proof, last_hash) is False:\n            proof += 1\n\n        return proof\n\n    @staticmethod\n    def valid_proof(last_proof, proof, last_hash):\n        \"\"\"\n        Validates the Proof\n\n        :param last_proof: <int> Previous Proof\n        :param proof: <int> Current Proof\n        :param last_hash: <str> The hash of the Previous Block\n        :return: <bool> True if correct, False if not.\n\n        \"\"\"\n\n        guess = f'{last_proof}{proof}{last_hash}'.encode()\n        guess_hash = hashlib.sha256(guess).hexdigest()\n        return guess_hash[:4] == \"0000\"\n\n\n# Instantiate the Node\napp = Flask(__name__)\n\n# Generate a globally unique address for this node\nnode_identifier = str(uuid4()).replace('-', '')\n\n# Instantiate the Blockchain\nblockchain = Blockchain()\n\n\n@app.route('/mine', methods=['GET'])\ndef mine():\n    # We run the proof of work algorithm to get the next proof...\n    last_block = blockchain.last_block\n    proof = blockchain.proof_of_work(last_block)\n\n    # We must receive a reward for finding the proof.\n    # The sender is \"0\" to signify that this node has mined a new coin.\n    blockchain.new_transaction(\n        sender=\"0\",\n        recipient=node_identifier,\n        amount=1,\n    )\n\n    # Forge the new Block by adding it to the chain\n    previous_hash = blockchain.hash(last_block)\n    block = blockchain.new_block(proof, previous_hash)\n\n    response = {\n        'message': \"New Block Forged\",\n        'index': block['index'],\n        'transactions': block['transactions'],\n        'proof': block['proof'],\n        'previous_hash': block['previous_hash'],\n    }\n    return jsonify(response), 200\n\n\n@app.route('/transactions/new', methods=['POST'])\ndef new_transaction():\n    values = request.get_json()\n\n    # Check that the required fields are in the POST'ed data\n    required = ['sender', 'recipient', 'amount']\n    if not all(k in values for k in required):\n        return 'Missing values', 400\n\n    # Create a new Transaction\n    index = blockchain.new_transaction(values['sender'], values['recipient'], values['amount'])\n\n    response = {'message': f'Transaction will be added to Block {index}'}\n    return jsonify(response), 201\n\n\n@app.route('/chain', methods=['GET'])\ndef full_chain():\n    response = {\n        'chain': blockchain.chain,\n        'length': len(blockchain.chain),\n    }\n    return jsonify(response), 200\n\n\n@app.route('/nodes/register', methods=['POST'])\ndef register_nodes():\n    values = request.get_json()\n\n    nodes = values.get('nodes')\n    if nodes is None:\n        return \"Error: Please supply a valid list of nodes\", 400\n\n    for node in nodes:\n        blockchain.register_node(node)\n\n    response = {\n        'message': 'New nodes have been added',\n        'total_nodes': list(blockchain.nodes),\n    }\n    return jsonify(response), 201\n\n\n@app.route('/nodes/resolve', methods=['GET'])\ndef consensus():\n    replaced = blockchain.resolve_conflicts()\n\n    if replaced:\n        response = {\n            'message': 'Our chain was replaced',\n            'new_chain': blockchain.chain\n        }\n    else:\n        response = {\n            'message': 'Our chain is authoritative',\n            'chain': blockchain.chain\n        }\n\n    return jsonify(response), 200\n\n\nif __name__ == '__main__':\n    from argparse import ArgumentParser\n\n    parser = ArgumentParser()\n    parser.add_argument('-p', '--port', default=5000, type=int, help='port to listen on')\n    args = parser.parse_args()\n    port = args.port\n\n    app.run(host='0.0.0.0', port=port)\n"
        },
        {
          "name": "csharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0302734375,
          "content": "flask==0.12.2\nrequests==2.18.4\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}