{
  "metadata": {
    "timestamp": 1736711160272,
    "page": 39,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MudBlazor/MudBlazor",
      "stars": 8383,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.048828125,
          "content": "* text=auto eol=lf\n*.sln text eol=crlf\n*.png -text"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 7.306640625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Ww][Ii][Nn]32/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*.json\ncoverage*.xml\ncoverage*.info\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n.history/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n\n# Fody - auto-generated XML schema\nFodyWeavers.xsd\n/src/MudBlazor.Docs.Server/.config\n/src/MudBlazor.Docs.Server/Properties/ServiceDependencies/MudBlazor - Web Deploy\n\n.idea/\n\n*.key\n\n# Autogenerated css and js\n**/MudBlazor.min.css\n**/MudBlazor.css\n**/MudBlazor.min.css.map\n**/MudBlazor.css.map\n**/MudBlazor.min.css.gz\n**/MudBlazor.js\n**/MudBlazor.min.js\n**/MudBlazor.min.js.gz\n**/MudBlazorDocs.min.css\n**/MudBlazorDocs.css\n**/MudBlazorDocs.min.css.map\n**/MudBlazorDocs.css.map\n**/MudBlazorDocs.min.css.gz\n\nMudBlazor.xml\n**/*.generated.cs\nsrc/MudBlazor.UnitTests/Generated/_AllApiPages.cs\nsrc/MudBlazor.UnitTests/Generated/_AllComponents.cs\nsrc/MudBlazor.Docs/NewFilesToBuild.txt\n/src/MudBlazor.Docs.Server/Properties/ServiceDependencies/mudblazortest - Web Deploy/profile.arm.json\n\nsrc/MudBlazor/Styles/.vscode/settings.json\n\ntools/CssUtilitiesGenerator/css/\n\ntools/CssUtilitiesGenerator/output/\n\n## Mac OS\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.1044921875,
          "content": "# MudBlazor Changelog\n\n## Please refer to github releases\n\nhttps://github.com/MudBlazor/MudBlazor/releases\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2763671875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team on Gitter. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 21.5654296875,
          "content": "# ![MudBlazor](content/MudBlazor-GitHub-NoBg.png)\n\n<!-- TOC start (generated with https://github.com/derlin/bitdowntoc) -->\n\n- [](#)\n- [Information and Guidelines for Contributors](#information-and-guidelines-for-contributors)\n  - [Code of Conduct](#code-of-conduct)\n  - [Minimal Prerequisites to Compile from Source](#minimal-prerequisites-to-compile-from-source)\n  - [Pull Requests](#pull-requests)\n    - [Pull Requests which introduce new components](#pull-requests-which-introduce-new-components)\n  - [Project structure and where to find the most important files](#project-structure-and-where-to-find-the-most-important-files)\n  - [Coding Dos and Don'ts](#coding-dos-and-donts)\n  - [Parameter Registration or Why we can't have Logic in Parameter Setters](#parameter-registration-or-why-we-cant-have-logic-in-parameter-setters)\n    - [Example of a bad Parameter definition](#example-of-a-bad-parameter-definition)\n    - [Example of a good Parameter definition](#example-of-a-good-parameter-definition)\n    - [Can I share change handlers between parameters?](#can-i-share-change-handlers-between-parameters)\n    - [What about the bad parameters all over the MudBlazor code base?](#what-about-the-bad-parameters-all-over-the-mudblazor-code-base)\n  - [Avoid overwriting parameters in Blazor Components](#avoid-overwriting-parameters-in-blazor-components)\n    - [Example of a bad code](#example-of-a-bad-code)\n    - [Example of a good code](#example-of-a-good-code)\n  - [Blazor Component parameter should not be set outside of its component.](#blazor-component-parameter-should-not-be-set-outside-of-its-component)\n    - [Example of a bad code](#example-of-a-bad-code-1)\n    - [Example of a good code](#example-of-a-good-code-1)\n  - [Unit Testing and Continuous Integration](#unit-testing-and-continuous-integration)\n    - [How not to break stuff](#how-not-to-break-stuff)\n    - [Make your code break-safe](#make-your-code-break-safe)\n    - [How to write a unit test?](#how-to-write-a-unit-test)\n    - [How to write a bUnit test](#how-to-write-a-bunit-test)\n    - [What are common errors when writing tests?](#what-are-common-errors-when-writing-tests)\n      - [Do not save html elements you query via `Find` or `FindAll` in a variable!](#do-not-save-html-elements-you-query-via-find-or-findall-in-a-variable)\n      - [Always use InvokeAsync to set parameter values on a component](#always-use-invokeasync-to-set-parameter-values-on-a-component)\n    - [What does not need to be tested?](#what-does-not-need-to-be-tested)\n    - [What is the MudBlazor.UnitTests.Viewer for?](#what-is-the-mudblazorunittestsviewer-for)\n    - [What are the auto-generated tests for?](#what-are-the-auto-generated-tests-for)\n    - [Continuous Integration](#continuous-integration)\n\n<!-- TOC end -->\n\n# Information and Guidelines for Contributors\n\nThank you for contributing to MudBlazor and making it even better. We are happy about every contribution! Issues, bug-fixes, new components...\n\n## Code of Conduct\n\nPlease make sure that you follow our [code of conduct](/CODE_OF_CONDUCT.md)\n\n## Minimal Prerequisites to Compile from Source\n\n-   [.NET 8.0 SDK](https://dotnet.microsoft.com/download/dotnet/8.0)\n\n## Pull Requests\n- Your Pull Request (PR) must only consist of one topic. It is better to split Pull Requests with more than one feature or bug fix in separate Pull Requests\n- First fork the repository and clone your fork locally to make your changes. (The main repository is protected and does not accept direct commits.)\n- You should work on a separate branch with a descriptive name. The following naming convention can be used: `feature/my-new-feature` for new features and enhancements, `fix/my-bug-fix` for bug fixes. For example, `fix/button-hover-color` if your PR is about a bug involving the hover color of buttons\n- You should build, test and run one of the Docs projects locally to confirm your changes give the expected result. We generally suggest the MudBlazor.Docs.Server project for the best debugging experience.\n- Choose `dev` as the target branch\n- All tests must pass, when you push, they will be executed on the CI server, and you'll receive a test report per email. But you can also execute them locally for quicker feedback.\n- You must include tests when your Pull Requests alters any logic. This also ensures that your feature will not break in the future under changes from other contributors. For more information on testing, see the appropriate section below\n- If there are new changes in the main repo, you should either merge the main repo's (upstream) dev or rebase your branch onto it.\n- Before working on a large change, it is recommended to first open an issue to discuss it with others\n- If your Pull Request is still in progress, convert it to a draft Pull Request\n- The PR Title should follow the following format: \n```\n<component name>: <short description of changes in imperative> (<linked issue>)\n```\n\nFor example:\n\n```\n DateRangePicker: Fix initializing DateRange with null values (#1997)\n```\n- To keep your branch up to date with the `dev` branch simply merge `dev`. **Don't rebase** because if you rebase the wrong direction your PR will include tons of unrelated commits from dev.\n- Your Pull Request should not include any unnecessary refactoring\n- If there are visual changes, you should include a screenshot, gif or video\n- If there are any corresponding issues, link them to the Pull Request. Include `Fixes #<issue nr>` for bug fixes and `Closes #<issue nr>` for other issues in the description ([Link issues guide](https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword)) \n- Your code should be formatted correctly ([Format documentation](https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules))\n\n\n\n### Pull Requests which introduce new components\n\n-   MudBlazor supports RTL. It basically mirrors the ui horizontally for languages which are read right-to-left. See [RTL guide](https://rtlstyling.com/posts/rtl-styling) for more information. Therefore every component should implement this functionality. If necessary include\n\n```csharp\n[CascadingParameter] public bool RightToLeft {get; set;}\n```\n\nin your component and apply styles at component level.\n- You must add tests if your component contains any logic (CSS styling requires no testing)\n- Use our `css variables` if possible. For instance, you should not hard code any colors etc.\n- Include a summary comment for every public property ([Summary documentation](https://learn.microsoft.com/dotnet/csharp/language-reference/xmldoc/recommended-tags))\n- Use the `CssBuilder` for classes and styles\n- Add a doc page and examples which should be ordered from easy to more complex\n- Examples with more than 15 lines should be collapsed by default\n\n## Project structure and where to find the most important files\nMudBlazor is divided into different projects. The most important ones are:\n- [MudBlazor](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor): contains all components\n- [MudBlazor.Docs](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor.Docs): contains the [docs](https://mudblazor.com/)\n- [MudBlazor.Docs.WasmHost](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor.Docs.WasmHost): local copy of the docs that can be set as the startup project and run locally to review changes before submission.\n- [MudBlazor.UnitTests](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor.UnitTests): contains bUnit tests for all components\n- [MudBlazor.UnitTests.Viewer](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor.UnitTests.Viewer): a visual representation of the unit tests. When you launch the project, you can test whether the components look and behave correctly\n\nMost important files:\n\n-   Component `.razor` and `.razor.cs` classes ([Link](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor/Components))\n-   Component `.scss` style classes ([Link](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor/Styles/components))\n-   Enums ([Link](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor/Enums))\n-   Component doc pages ([Link](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor.Docs/Pages/Components))\n-   Component tests ([Link](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor.UnitTests/Components))\n-   Test components ([Link](https://github.com/MudBlazor/MudBlazor/tree/dev/src/MudBlazor.UnitTests.Viewer/TestComponents))\n\n## Coding Dos and Don'ts\n\n-   **No code in parameter getter/setter!** See section *Parameter Registration or Why we can't have Logic in Parameter Setters* below\n-   **Don't overwrite parameters in components!** See section *Avoid overwriting parameters in Blazor Components* below\n-   **No programmatic assignments to another component's parameters** See section *Blazor Component parameter should not be set outside of its component.* below\n-   **Don't break stuff!** See section *Unit Testing and Continuous Integration* below\n-   **Add a test to guard against others breaking your feature/fix!** See section *Unit Testing and Continuous Integration* below\n\n## Parameter Registration or Why we can't have Logic in Parameter Setters\n\nMudBlazor parameters shall be auto-properties, meaning that there must not be logic in the property getter or setter. This rule prevents update-loops and other nasty bugs such as swallowed exceptions due to unobserved async discards. \"This is quite inconvenient\" you may say, where do I call the EventCallback and how to react to parameter changes? Luckily the MudBlazor team has got your back. Thanks to our ParameterState framework you don't need to keep track of old parameter values in fields and mess around with `SetParametersAsync`.\n\n**TLDR; Register parameters in the constructor with a change handler that contains all the code that needs to be executed when the parameter value changes.**\n\n**NB: Code in** `[Parameter]` **attributed property setters is no longer allowed in MudBlazor!** (No matter if async functions are called in them or not.)\n\n### Example of a bad Parameter definition\n\nHere is a real example of a parameter with additional logic in the setter, which is now forbidden.\n\n```c#\nprivate bool _expanded;\n\n[Parameter]\npublic bool Expanded\n{\n    get => _expanded;\n    set\n    {\n        if (_expanded == value)\n            return;\n        _expanded = value;\n        if (_isRendered)\n        {\n            _state = _expanded ? CollapseState.Entering : CollapseState.Exiting;\n            _ = UpdateHeight();  // <-- unobserved async discard !!!\n            _updateHeight = true;\n        }\n        else if (_expanded)\n        {\n            _state = CollapseState.Entered;\n        }\n        _ = ExpandedChanged.InvokeAsync(_expanded); // <-- unobserved async discard !!!\n    }\n}\n```\n\nNote how the setter is invoking async functions which cannot be awaited, because property setters can only have synchronous code. As a result, the async \nfunctions are invoked and their return value `Task` is discarded. This not only creates hard to test multi-threaded behavior, but it also prevents the user of this \ncomponent from being able to catch any errors in the async functions. Any exceptions that happen in these asynchronous functions may or may not bubble up\nto the user. In some cases, Blazor just catches them and they are silently ignored, in other cases they may cause application crashes that can't be prevented with `try catch`. \n\nThe alternative would be to move the code from the setter into `SetParametersAsync` and depending on the component you would also need code in `OnInitializedAsync`. This is cumbersome and error prone and requires you to keep track of the old parameter value in a field and write a series of `if` statements in `SetParametersAsync` if there are multiple parameters.\n\nUsing our new `ParameterState` pattern all this is not required.\n\n### Example of a good Parameter definition\n\n```c#\nprivate readonly ParameterState<bool> _expandedState;\n\n[Parameter]\npublic bool Expanded { get; set; }\n```\n\nIn the constructor, we register the parameter so that the base class can manage it for us automatically behind the scenes:\n\n```c#\npublic MudCollapse()\n{\n    using var registerScope = CreateRegisterScope();\n    _expandedState = registerScope.RegisterParameter<bool>(nameof(Expanded)) // the property name is needed for automatic value change detection in SetParametersAsync\n        .WithParameter(() => Expanded) // a get func enabling the ParameterState to read the parameter value w/o resorting to Reflection\n        .WithEventCallback(() => ExpandedChanged) // a get func enabling the ParameterState to get the EventCallback of the parameter (if the param is two-way bindable)\n        .WithChangeHandler(OnExpandedChangedAsync); // the change handler \n}\n```\n\nThe code from the setter moves into the change handler function which is async so the called functions can be awaited.\n\n```c#\nprivate async Task OnExpandedChangedAsync()\n{\n    if (_isRendered)\n    {\n        _state = _expandedState.Value ? CollapseState.Entering : CollapseState.Exiting;\n        await UpdateHeightAsync();  // async Task not discarded\n        _updateHeight = true;\n    }\n    else if (_expandedState.Value)\n    {\n        _state = CollapseState.Entered;\n    }\n    await ExpandedChanged.InvokeAsync(_expandedState.Value); // async Task not discarded\n}\n```\n\nThere are a couple of builders for the `RegisterParameter` method for different use-cases. For instance, you don't always need an `EventCallback` for every parameter. \nSome parameters need async logic in their change handler, others don't, etc.\n\n### Can I share change handlers between parameters?\n\nYes, if you pass them as a method group like in the example below, shared parameter change handlers will be called only once, even if multiple parameters change at the same time.\n\n```c#\n    // Param1 and Param2 share the same change handler\n    using var registerScope = CreateRegisterScope();\n    _param1State = registerScope.RegisterParameter<int>(nameof(Param1)).WithParameter(() => Param1).WithChangeHandler(OnParametersChanged);\n    _param2State = registerScope.RegisterParameter<int>(nameof(Param2)).WithParameter(() => Param2).WithChangeHandler(OnParametersChanged);\n```\n\n**NB**: if you pass lambda functions as change handlers they will be called once each for every changed parameter even if they contain the same code!\n\n### What about the bad parameters all over the MudBlazor code base?\n\nWe are slowly but surely refactoring all of those, you can help if you like.\n\n## Avoid overwriting parameters in Blazor Components\n\nThe `ParameterState` framework offers a solution to prevent parameter overwriting issues. For a detailed explanation of this problem, refer to the [article](https://learn.microsoft.com/aspnet/core/blazor/components/overwriting-parameters?view=aspnetcore-8.0#overwritten-parameters).\n\n### Example of a bad code\n\n```c#\n[Parameter]\npublic bool Expanded { get; set; }\n\n[Parameter]\npublic EventCallback<bool> ExpandedChanged { get; set; }\n\n\nprivate Task ToggleAsync()\n{\n\tExpanded = !Expanded;\n\treturn ExpandedChanged.InvokeAsync(Expanded);\n}\n```\n\n### Example of a good code\n\n```c#\nprivate readonly ParameterState<bool> _expandedState;\n\n[Parameter]\npublic bool Expanded { get; set; }\n\n[Parameter]\npublic EventCallback<bool> ExpandedChanged { get; set; }\n\npublic MudTreeViewItemToggleButton()\n{\n    using var registerScope = CreateRegisterScope();\n    _expandedState = registerScope.RegisterParameter<bool>(nameof(Expanded))\n        .WithParameter(() => Expanded)\n        .WithEventCallback(() => ExpandedChanged);\n}\n\nprivate Task ToggleAsync()\n{\n\treturn _expandedState.SetValueAsync(!_expandedState.Value);\n}\n```\n\n## Blazor Component parameter should not be set outside of its component.\n\nConsider a hypothetical `CalendarComponent`:\n\n```c#\npublic class CalendarComponent : ComponentBase\n{\n\t[Parameter]\n\tpublic ShowOnlyOneCalendar { get;set; }\n}\n```\n\n### Example of a bad code\n\n```razor\n<CalendarComponent @ref=\"@_calendar\" />\n<button @onclick=\"Update\">\n        Update\n</button>\n\n@code\n{\n    private CalendarComponent _calendarRef = null!;\n\n    private void Update()\n    {\n        _calendarRef.ShowOnlyOneCalendar = true;\n    }\n}\n```\n\nThis code would result in a [BL0005](https://learn.microsoft.com/aspnet/core/diagnostics/bl0005?view=aspnetcore-8.0) warning.\n\n### Example of a good code\n\nInstead of using an imperative programming approach (`component.Parameter1 = v1`), a Component Parameter is supposed to be passed in a declarative syntax:\n\n```razor\n<CalendarComponent ShowOnlyOneCalendar=\"@_showOnlyOne\"  />\n<button @onclick=\"Update\">\n        Update\n</button>\n\n@code\n{\n    private bool _showOnlyOne;;\n\t\n    private void Update()\n    {\n        _showOnlyOne = true;\n    }\n}\n```\n\nIn the improved version, we pass `ShowOnlyOneCalendar` as a parameter to `CalendarComponent` directly in the markup, using a variable (`_showOnlyOne`) that can be manipulated within the component's code. This adheres to the recommended Blazor coding practices and avoids errors like `BL0005`.\n\n## Unit Testing and Continuous Integration\n\nWe strive for complete test coverage to keep stuff from breaking and\ndeliver a rock-solid library. For every component that has C# logic we \nrequire a bUnit test that checks its logic.\n\n### How not to break stuff\n\nWhen you are making changes to any components and preparing a PR make sure you run the entire test suite to see if anything broke.\n\nDocumentation changes should be reviewed by locally previewing with \nMudBlazor.Docs.WasmHost as the startup project.\n\nOnce your PR is merged into the dev branch, it can be viewed at https://dev.mudblazor.com/ even before the next release.\n\n### Make your code break-safe\n\nWhen you are writing non-trivial logic, please add a unit test for it. Basically, think of it like this: By adding a test for everything you fear could break you make sure your work is not undone by accident by future additions.\n\n### How to write a unit test?\n\nSimply follow the example of some of the simpler tests like: \n- StringExtensionTests.cs for normal C# tests\n- CheckBoxTests.cs or RadioTests.cs for bUnit tests\n\n### How to write a bUnit test\n\nLet's say we want to test whether a component's two-way bindable property works\n\nIn MudBlazor.UnitTests.Viewer create a razor file that instantiates your component and binds it to a public field.\n\nIn MudBlazor.UnitTests create another test (i.e. by copying CheckBoxTests.cs and renaming it)\nIn the Test make sure to instantiate the razor file you just prepared above.\n - Assert that the initial state is correct\n - Make changes to the public field of the test component and assert that it changes what it should change in the component\n - Call Click or other events on the component and check that the public field was updated properly\n \n You can print the components rendered HTML to the console at different locations of the test to \n see how state changes affect the HTML or the class attributes. Then write \n assertions that enforce those changes i.e. by checking that a certain html exists \n or a certain class is contained or not contained in the class attributes of an element. \n \n### What are common errors when writing tests?\n\n#### Do not save html elements you query via `Find` or `FindAll` in a variable!\n\n```c#\n   var comp = ctx.RenderComponent<MudTextField<string>>();\n   \n   // wrong - this will fail:\n   var textField = comp.Find(\"input\");\n   textField.Change(\"Garfield\");\n   textField.Blur();\n   comp.FindComponent<MudTextField<string>>().Instance.Value.NotBeNullOrEmpty();\n```\n\nAs soon as you interact with html elements they are potentially re-rendered, and your variable becomes stale.\n\n```c#\n   var comp = ctx.RenderComponent<MudTextField<string>>();\n   \n   // correct   \n   comp.Find(\"input\").Change(\"Garfield\");\n   comp.Find(\"input\").Blur();\n   comp.FindComponent<MudTextField<string>>().Instance.Value.NotBeNullOrEmpty();\n```\n\nSo never save html element references in a variable in a bUnit test. Note: you can save component references in variables just fine, so don't confuse that.\n\n#### Always use InvokeAsync to set parameter values on a component\n\nThe bUnit test logic is not running on the Blazor UI-thread, so whenever directly interacting with a component's parameters or methods you need to use `await comp.InvokeAsync(()=> ... )`. That way the following test logic happens only after the interaction with the component has been concluded.\n\n```c#\n   var comp = ctx.RenderComponent<MudTextField<string>>();\n   var textField=comp.FindComponent<MudTextField<string>>().Instance;\n   \n   // wrong!\n   textField.Value=\"Garfield\";\n   // correct\n   await comp.InvokeAsync(()=>textField.Value=\"I love dogs\");\n```\n\n### What does not need to be tested?\n\nWe don't need to test the complete rendered HTML of a component, or the appearance of a component. Test the logic, not the HTML. When checking changes in the HTML do simple checks like \"does the HTML element exist that depends on a state\".\n\n### What is the MudBlazor.UnitTests.Viewer for?\n\nTwo things.\n\n-   It holds all the test components which are required by the bUnit tests.\n-   You can run it and try your test components out if you need to debug them.\n\n### What are the auto-generated tests for?\n\nThe documentation has lots of examples for every component. We use those \nexamples as unit tests by instantiating them in a bUnit context and checking\nwhether rendering them throws an error or not. While this is not comparable\nto a good hand-written unit test, we can at least catch exceptions thrown by\nthe render logic. These tests are generated automatically on build and their\ncs files start with an underscore.\n\n### Continuous Integration\n\nWe have a GitHub action which runs against all Pull Requests.\n\nIt performs the following checks.\n- Builds the project.\n- Runs the test suite.\n- Checks the code coverage.\n- Checks the code quality.\n\nWe generally require all these checks to pass before merging contributions.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2021 MudBlazor\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MIGRATION.md",
          "type": "blob",
          "size": 1.357421875,
          "content": "## Migration Guide: Overview\nWelcome to the MudBlazor Migration Guide for upgrading your project to newer versions. This guide provides essential information to help you transition smoothly to the latest version of MudBlazor.\n\nEach release might include new features, improvements, bug fixes, and, in some cases, breaking changes. To ensure you can adopt the new version without issues, we have outlined the necessary steps and linked to detailed migration instructions for specific releases.\n\n#\n\n### How to Use This Guide\n- Identify Your Current Version\n  * Before starting, confirm which version you are upgrading from.\n- Follow the Version-Specific Guide\n  * Each release has a dedicated GitHub issue containing all the details for migrating.\n  * If you're upgrading across multiple versions, follow each guide sequentially, starting from your current version and progressing to the latest.\n- Address Breaking Changes\n  * Pay attention to any breaking changes or deprecated features listed for the target version.\n\n#\n\n### Migration Guides by Version\n#### v7.0.0 \n - [Migration Guide](https://github.com/MudBlazor/MudBlazor/issues/8447)\n - [Feedback/Discussion](https://github.com/MudBlazor/MudBlazor/discussions/8976)\n#### v8.0.0 \n - [Migration Guide](https://github.com/MudBlazor/MudBlazor/issues/9953)\n - [Feedback/Discussion](https://github.com/MudBlazor/MudBlazor/discussions/10003)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2333984375,
          "content": "﻿<h1>\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"content/MudBlazor-GitHub-NoBg-Dark.png\">\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"content/MudBlazor-GitHub-NoBg.png\">\n    <img alt=\"MudBlazor\" src=\"content/MudBlazor-GitHub-NoBg.png\">\n  </picture>\n</h1>\n\n# Material Design components for Blazor\n![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/mudblazor/mudblazor/build-test-mudblazor.yml?branch=dev&logo=github&style=flat-square)\n[![Codecov](https://img.shields.io/codecov/c/github/MudBlazor/MudBlazor)](https://app.codecov.io/github/MudBlazor/MudBlazor)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=MudBlazor_MudBlazor&metric=alert_status)](https://sonarcloud.io/summary/overall?id=MudBlazor_MudBlazor)\n[![GitHub](https://img.shields.io/github/license/mudblazor/mudblazor?color=594ae2&logo=github&style=flat-square)](https://github.com/mudblazor/MudBlazor/blob/master/LICENSE)\n[![GitHub Repo stars](https://img.shields.io/github/stars/mudblazor/mudblazor?color=594ae2&style=flat-square&logo=github)](https://github.com/mudblazor/MudBlazor/stargazers)\n[![GitHub last commit](https://img.shields.io/github/last-commit/mudblazor/mudblazor?color=594ae2&style=flat-square&logo=github)](https://github.com/mudblazor/mudblazor)\n[![Contributors](https://img.shields.io/github/contributors/mudblazor/mudblazor?color=594ae2&style=flat-square&logo=github)](https://github.com/mudblazor/mudblazor/graphs/contributors)\n[![Discussions](https://img.shields.io/github/discussions/mudblazor/mudblazor?color=594ae2&logo=github&style=flat-square)](https://github.com/mudblazor/mudblazor/discussions)\n[![Discord](https://img.shields.io/discord/786656789310865418?color=%237289da&label=Discord&logo=discord&logoColor=%237289da&style=flat-square)](https://discord.gg/mudblazor)\n[![Twitter](https://img.shields.io/twitter/follow/MudBlazor?color=1DA1F2&label=Twitter&logo=Twitter&style=flat-square)](https://twitter.com/MudBlazor)\n[![NuGet version](https://img.shields.io/nuget/v/MudBlazor?color=ff4081&label=nuget%20version&logo=nuget&style=flat-square)](https://www.nuget.org/packages/MudBlazor/)\n[![NuGet downloads](https://img.shields.io/nuget/dt/MudBlazor?color=ff4081&label=nuget%20downloads&logo=nuget&style=flat-square)](https://www.nuget.org/packages/MudBlazor/)\n\nMudBlazor is an ambitious Material Design component framework for Blazor with an emphasis on ease of use and clear structure. It is perfect for .NET developers who want to rapidly build web applications without having to struggle with CSS and Javascript. MudBlazor, being written entirely in C#, empowers you to adapt, fix or extend the framework. There are plenty of examples in the documentation, which makes understanding and learning MudBlazor very easy.\n\n## Documentation & Demo\n- [MudBlazor.com](https://mudblazor.com)\n- [Try.MudBlazor.com](https://try.mudblazor.com/)\n\n## Why is MudBlazor so successful?\n- Clean and aesthetic graphic design based on Material Design.\n- Clear and easy to understand structure.\n- Good documentation with many examples and source snippets.\n- All components are written entirely in C#, no JavaScript allowed (except where absolutely necessary).\n- Users can make beautiful apps without needing CSS (but they can of course use CSS too).\n- No dependencies on other component libraries, 100% control over components and features.\n- Stability! We strive for a complete test coverage.\n- Releases often so developers can get their PRs and fixes in a timely fashion.\n\n## Prerequisites\n| MudBlazor | .NET | Support |\n| :--- | :---: | :---: |\n| 1.x.x - 2.0.x | .NET 3.1 | Ended 03/2021 |\n| 5.x.x | .NET 5 | Ended 01/2022 |\n| 6.x.x | [.NET 6](https://dotnet.microsoft.com/download/dotnet/6.0), [.NET 7](https://dotnet.microsoft.com/download/dotnet/7.0), [.NET 8](https://dotnet.microsoft.com/download/dotnet/8.0) | Ended 01/2025 |\n| 7.x.x | [.NET 7](https://dotnet.microsoft.com/download/dotnet/7.0), [.NET 8](https://dotnet.microsoft.com/download/dotnet/8.0) | :heavy_check_mark: |\n| 8.x.x | [.NET 8](https://dotnet.microsoft.com/download/dotnet/8.0), [.NET 9](https://dotnet.microsoft.com/download/dotnet/9.0) | :heavy_check_mark: |\n\n> [!TIP]\n> If you're updating to a newer version of MudBlazor, make sure to check out the [Migration Guide](https://github.com/MudBlazor/MudBlazor/blob/dev/MIGRATION.md) for detailed instructions on handling breaking changes and new features.  \n\n> [!WARNING]\n> 1. Static rendering is not supported - [Learn more](https://learn.microsoft.com/aspnet/core/blazor/components/render-modes).\n> 2. We cannot guarantee compatibility with browsers no longer maintained by their publishers.\nFor the best experience, use an up-to-date browser - See [Blazor supported platforms](https://learn.microsoft.com/aspnet/core/blazor/supported-platforms).\n\n## Stats\n![Alt](https://repobeats.axiom.co/api/embed/db53a44092e88fc34a4c0f37db12773b6787ec7e.svg \"Repobeats analytics image\")\n\n## Contributing\n👋 Thanks for wanting to contribute!  \nContributions from the community are what makes MudBlazor successful.\n\nIf you are familiar with technologies like C#, Blazor, JavaScript, or CSS, and wish to give something back, please consider submitting a pull request!\nWe try to merge all non-breaking bugfixes and will deliberate the value of new features for the community.\nPlease note there is no guarantee your PR will be merged, so if you want to be sure before investing the work, feel free to [contact the team](https://discord.gg/mudblazor) first.\n\nCheck out the [contribution guidelines](/CONTRIBUTING.md) to understand our goals and learn more about the internals of the project.\n\n## Getting Started\nWe have premade templates available at the [MudBlazor.Templates](https://github.com/mudblazor/Templates) repository.\n\nFull installation instructions can be found [on our website](https://mudblazor.com/getting-started/installation).\n\n### Quick Installation Guide\nInstall Package\n```\ndotnet add package MudBlazor\n```\nAdd the following to `_Imports.razor`\n```razor\n@using MudBlazor\n```\nAdd the following to the `MainLayout.razor` or `App.razor`\n```razor\n<MudThemeProvider/>\n<MudPopoverProvider/>\n<MudDialogProvider/>\n<MudSnackbarProvider/>\n```\nAdd the following to your HTML `head` section, it's either `index.html` or `_Layout.cshtml`/`_Host.cshtml`/`App.razor` depending on whether you're running WebAssembly or Server\n```razor\n<link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" rel=\"stylesheet\" />\n<link href=\"_content/MudBlazor/MudBlazor.min.css\" rel=\"stylesheet\" />\n```\nNext, add the following to the default Blazor script at the end of the `body`\n```razor\n<script src=\"_content/MudBlazor/MudBlazor.min.js\"></script>\n```\n\nAdd the following to the relevant sections of `Program.cs`\n```c#\nusing MudBlazor.Services;\n```\n```c#\nbuilder.Services.AddMudServices();\n```\n\n### Usage\n```razor\n<MudText Typo=\"Typo.h6\">\n    MudBlazor is @Text\n</MudText>\n\n<MudButton Variant=\"Variant.Filled\" \n           Color=\"Color.Primary\" \n           OnClick=\"ButtonOnClick\">\n    @ButtonText\n</MudButton>\n\n@code {\n    string Text { get; set; } = \"????\";\n    string ButtonText { get; set; } = \"Click Me\";\n    int ClickCount { get; set; }\n\n    void ButtonOnClick()\n    {\n        ClickCount += 1;\n        Text = $\"Awesome x {ClickCount}\";\n        ButtonText = \"Click Me Again\";\n    }\n}\n```\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 2.796875,
          "content": "# MudBlazor Roadmap\n\nMudBlazor continues to thrive with over 11M downloads on [NuGet](https://www.nuget.org/packages/MudBlazor/) and thousands of members on [Discord](https://discord.gg/mudblazor).\n\nWith the release of v7, we've made significant progress in ensuring the library remains healthy and robust.\nWe've not only introduced numerous new features and bug fixes, but also built a more stable foundation for future development.\nThis groundwork positions us to continue moving the project forward to meet the needs of the community.\n\n## Migration From An Older Version\n\nThe release of v7 addressed several long-standing needs for breaking changes and removed all obsolete APIs from v6.\nThis was a significant step forward and our primary goal for v8 is to build on that success while minimizing breaking changes to ensure a smoother transition for everyone.\n\nEach major release is accompanied by a migration guide to help you adjust with as little disruption as possible.\nFor more details, please refer to the [v7.0.0 Migration Guide](https://github.com/MudBlazor/MudBlazor/issues/8447) and upcoming [v8.0.0 Migration Guide](https://github.com/MudBlazor/MudBlazor/issues/9953).\nIn addition we have a [built-in analyzer](https://mudblazor.com/features/analyzers) that identifies parameters that have been removed or renamed.\n\nTo align with Microsoft's .NET support policies, we've officially dropped support for .NET 6 and .NET 7.\nGoing forward, MudBlazor will focus on supporting .NET 8 and .NET 9.\n\nFor users who aren't ready to upgrade, we will continue to support v6.x and v7.x for a while longer with the help of community contributions.\n\n## Looking Ahead\n\nYou can expect v8 to be production-ready by the end of the year and regular preview releases will allow the community to provide feedback and stay updated on our progress.\n\nWe are passionate about improving the library but can't make firm promises about release timelines or specific features as the MudBlazor team is made up of volunteers who contribute to the project in their personal time.\n\nOur goal is to keep MudBlazor stable, performant, and evolving with thoughtful enhancements, but the pace of development depends on the availability of contributors.\nWe appreciate your support as we continue to work on keeping MudBlazor the premiere UI library for Blazor.\n\n## Get Involved\n\nMudBlazor thrives thanks to the contributions of our amazing community. Whether you specialize in C#, Blazor, JavaScript, CSS, documentation, testing, or design, your help is always welcome in improving this project.\n\nIf you’re interested in contributing, please check out [our contribution guidelines](https://github.com/MudBlazor/MudBlazor/blob/dev/CONTRIBUTING.md) to get started. You can also open an issue, start a discussion, or tag a member of the team in relevant GitHub issues to collaborate with us.\n"
        },
        {
          "name": "content",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}