{
  "metadata": {
    "timestamp": 1736711205635,
    "page": 130,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DotNetNext/SqlSugar",
      "stars": 5452,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.4609375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n \n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.09765625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n## TODO: Comment the next line if you want to checkin your\n## web deploy settings but do note that will include unencrypted\n## passwords\n#*.pubxml\n\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\nSrc/Asp.NetCore2/SqlSeverTest/.idea/\n.idea\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2025 jacktang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.8935546875,
          "content": "\n<p  align=\"center\">\n    <span>English</span> |  \n    <a  href=\"https://www.donet5.com/Home/Doc\"><font color=\"red\">中文</font></a>\n</p>\n \n## SqlSugar ORM\nSqlSugar is .NET open source ORM framework, maintained and updated by Fructose Big Data Technology team, the most easy-to-use ORM out of the box\n\nAdvantages: [Low code] [High performance] [Super simple] [Comprehensive features] [ Multi-database compatible] [Suitable products]\n\n## Support .NET\n.net framework.net core3.1.ne5.net6.net7.net8 .net9 .net10\n\n## Support database \nMySql、SqlServer、Sqlite、Oracle 、 postgresql、达梦、\n人大金仓(国产推荐)、神通数据库、瀚高、Access 、OceanBase\nTDengine  QuestDb Clickhouse  MySqlConnector、华为 GaussDB \n南大通用 GBase、MariaDB、Tidb、Odbc、Percona Server,\nAmazon Aurora、Azure Database for MySQL、\n Google Cloud SQL for MySQL、custom database\n\n## Description\n1. Truly achieve zero SQL ORM table building, index and CRUD all support\n2. Support.NET millions of big data write, update, subtable and has billions of query statistics mature solutions\n3. Support SAAS complete application: cross-database query, audit, tenant sub-database, tenant sub-table and tenant data isolation\n4. Support low code + workflow (dynamic class building, dynamic table building, non-entity multi-library compatible with CRUD, JSON TO SQL, custom XML, etc.)\n5. Support ValueObject, discriminator, repository, UnitOfWork, DbContext, AOP\n\n##  Documentation\n|Other |Select  | Insert    | Update  | Delete| \n| ----- | --------- | ----------- | ------- |------- |\n <a target=\"_blank\" href=\"https://github.com/donet5/SqlSugar/wiki/NUGET\">Nuget</a>| <a href=\"https://github.com/DotNetNext/SqlSugar/wiki/1.1--Query‐Simple\">Query</a> | <a  target=\"_blank\" href=\"https://github.com/DotNetNext/SqlSugar/wiki/3.Insert\"> Insert </a> |<a  target=\"_blank\" href=\"https://github.com/DotNetNext/SqlSugar/wiki/2.Update\">Update</a>|    <a  target=\"_blank\" href=\"https://github.com/DotNetNext/SqlSugar/wiki/4.1-Delete\">Delete</a>    | \n<a target=\"_blank\" href=\"https://github.com/donet5/SqlSugar/wiki\"> Start guide</a>  | <a target=\"_bank\" href=\"https://github.com/DotNetNext/SqlSugar/wiki/1.2-Query%E2%80%90Join\">Join query </a> |<a href=\"https://github.com/DotNetNext/SqlSugar/wiki/3.2-Dynamic-Insert\">Insert without entity </a> | <a href=\"https://github.com/DotNetNext/SqlSugar/wiki/2.2-Dynamic-Update\">Update without entity</a>  | <a href=\"https://github.com/DotNetNext/SqlSugar/wiki/4.2-Dynamic-Delete\">  Delete without entity </a>   |     |\n|<a href=\"https://www.donet5.com/Home/Doc?typeId=2246\">Multiple databases</a> | <a target=\"_bank\" href=\"https://github.com/DotNetNext/SqlSugar/wiki/1.6-Query%E2%80%90Include\">Include query</a>|<a target=\"_bank\" href=\"https://www.donet5.com/Home/Doc?typeId=2430\">Include Insert</a>| <a target=\"_bank\" href=\"https://www.donet5.com/Home/Doc?typeId=2432\">Include Update</a>| <a target=\"_bank\" href=\"https://www.donet5.com/Home/Doc?typeId=2431\">Include Delete</a> \n |<a  href=\"https://www.donet5.com/Home/Doc\"><font color=\"red\">中文文档</font></a>|<a  href=\"https://www.donet5.com/Home/Doc?typeId=2244\">Cross database query</a>|<a  href=\"https://www.donet5.com/Home/Doc?typeId=2420\">Insert by json</a>|<a  href=\"https://www.donet5.com/Home/Doc?typeId=2420\">Update by json</a>|<a  href=\"https://www.donet5.com/Home/Doc?typeId=2420\">Delete by json</a>|\n\n##  Feature characteristic\n\n###  Feature1 : Join query  \nSuper simple query syntax\n```cs\nvar query  = db.Queryable<Order>()\n            .LeftJoin<Custom>  ((o, cus) => o.CustomId == cus.Id)\n            .LeftJoin<OrderItem> ((o, cus, oritem ) => o.Id == oritem.OrderId)\n            .LeftJoin<OrderItem> ((o, cus, oritem , oritem2) => o.Id == oritem2.OrderId)\n            .Where(o => o.Id == 1)  \n            .Select((o, cus) => new ViewOrder { Id = o.Id, CustomName = cus.Name })\n            .ToList();   \n```\n```sql\nSELECT\n  [o].[Id] AS [Id],\n  [cus].[Name] AS [CustomName]\nFROM\n  [Order] o\n  Left JOIN [Custom] cus ON ([o].[CustomId] = [cus].[Id])\n  Left JOIN [OrderDetail] oritem ON ([o].[Id] = [oritem].[OrderId])\n  Left JOIN [OrderDetail] oritem2 ON ([o].[Id] = [oritem2].[OrderId])\nWHERE\n  ([o].[Id] = @Id0)\n``` \n###   Feature2 :Include Query、Insert、Delete and Update\n```cs\n\n//Includes\nvar list=db.Queryable<Test>()\n           .Includes(x => x.Provinces,x=>x.Citys ,x=>x.Street) //multi-level\n           .Includes(x => x.ClassInfo) \n           .ToList();\n\n//Includes+left join        \nvar list5= db.Queryable<Student_004>()\n           .Includes(x => x.school_001, x => x.rooms)\n           .Includes(x => x.books)\n           .LeftJoin<Order>((x, y) => x.Id==y.sid)\n           .Select((x,y) => new Student_004DTO\n           {\n               SchoolId = x.SchoolId,\n               books = x.books,\n               school_001 = x.school_001,\n               Name=y.Name\n           })\n           .ToList();          \n```\n\n###   Feature3 : Page query\n```cs\n\n int pageIndex = 1; \n int pageSize = 20;\n int totalCount=0;\n var page = db.Queryable<Student>().ToPageList(pageIndex, pageSize, ref totalCount);\n```\n \n###    Feature4 : Dynamic expression\n```cs\nvar names= new string [] { \"a\",\"b\"};\nExpressionable<Order> exp = new Expressionable<Order>();\nforeach (var item in names)\n{\n    exp.Or(it => it.Name.Contains(item.ToString()));\n}\nvar list= db.Queryable<Order>().Where(exp.ToExpression()).ToList();\n ```\n ```sql\nSELECT [Id],[Name],[Price],[CreateTime],[CustomId]\n        FROM [Order]  WHERE (\n                      ([Name] like '%'+ CAST(@MethodConst0 AS NVARCHAR(MAX))+'%') OR \n                      ([Name] like '%'+ CAST(@MethodConst1 AS NVARCHAR(MAX))+'%')\n                     )\n```\n###   Feature5 : Multi-tenant transaction\n```cs\n//Creaate  database object\nSqlSugarClient db = new SqlSugarClient(new List<ConnectionConfig>()\n{\n    new ConnectionConfig(){ ConfigId=\"0\", DbType=DbType.SqlServer,  ConnectionString=Config.ConnectionString, IsAutoCloseConnection=true },\n    new ConnectionConfig(){ ConfigId=\"1\", DbType=DbType.MySql, ConnectionString=Config.ConnectionString4 ,IsAutoCloseConnection=true}\n});\n\n\nvar mysqldb = db.GetConnection(\"1\");//mysql db\nvar sqlServerdb = db.GetConnection(\"0\");// sqlserver db\n \ndb.BeginTran();\n            mysqldb.Insertable(new Order()\n            {\n                CreateTime = DateTime.Now,\n                CustomId = 1,\n                Name = \"a\",\n                Price = 1\n            }).ExecuteCommand();\n            mysqldb.Queryable<Order>().ToList();\n            sqlServerdb.Queryable<Order>().ToList();\n\ndb.CommitTran();\n```\n###  Feature6 : Singleton Pattern\nImplement transactions across methods\n```CS\npublic static SqlSugarScope Db = new SqlSugarScope(new ConnectionConfig()\n {\n            DbType = SqlSugar.DbType.SqlServer,\n            ConnectionString = Config.ConnectionString,\n            IsAutoCloseConnection = true \n  },\n  db=> {\n            db.Aop.OnLogExecuting = (s, p) =>\n            {\n                Console.WriteLine(s);\n            };\n });\n \n \n  using (var tran = Db.UseTran())\n  {\n          \n              \n               new Test2().Insert(XX);\n               new Test1().Insert(XX);\n               ..... \n                ....\n                         \n             tran.CommitTran(); \n }\n```\n### Feature7 : Query filter\n```cs\n//set filter\ndb.QueryFilter.Add(new TableFilterItem<Order>(it => it.Name.Contains(\"a\")));  \n \n   \ndb.Queryable<Order>().ToList();\n//SELECT [Id],[Name],[Price],[CreateTime],[CustomId] FROM [Order]  WHERE  ([Name] like '%'+@MethodConst0+'%')  \n\ndb.Queryable<OrderItem, Order>((i, o) => i.OrderId == o.Id)\n        .Where(i => i.OrderId != 0)\n        .Select(\"i.*\").ToList();\n//SELECT i.* FROM [OrderDetail] i  ,[Order]  o  WHERE ( [i].[OrderId] = [o].[Id] )  AND \n//( [i].[OrderId] <> @OrderId0 )  AND  ([o].[Name] like '%'+@MethodConst1+'%')\n \n```\n\n### Feature8 : Insert or update \ninsert or update \n```cs\nDb.Storageable(list2).ExecuteCommand();\nDb.Storageable(list2).PageSize(1000).ExecuteCommand();\nDb.Storageable(list2).PageSize(1000,exrows=> {   }).ExecuteCommand();\n```\n \n### Feature9 : Auto split table\nSplit entity \n```cs\n[SplitTable(SplitType.Year)]//Table by year (the table supports year, quarter, month, week and day)\n[SugarTable(\"SplitTestTable_{year}{month}{day}\")] \n public class SplitTestTable\n {\n     [SugarColumn(IsPrimaryKey =true)]\n     public long Id { get; set; }\n \n     public string Name { get; set; }\n     \n     //When the sub-table field is inserted, which table will be inserted according to this field. \n     //When it is updated and deleted, it can also be convenient to use this field to      \n     //find out the related table \n     [SplitField] \n     public DateTime CreateTime { get; set; }\n }\n ```\nSplit query\n```cs\n var lis2t = db.Queryable<OrderSpliteTest>()\n.SplitTable(DateTime.Now.Date.AddYears(-1), DateTime.Now)\n.ToPageList(1,2);　\n``` \n\n### Feature10 : Big data insert or update \n```cs\n10.1 BulkCopy\ndb.Fastest<Order>().BulkCopy(lstData);//insert\ndb.Fastest<Order>().PageSize(100000).BulkCopy(insertObjs);\ndb.Fastest<System.Data.DataTable>().AS(\"order\").BulkCopy(dataTable);\n \n10.2 BulkUpdate\ndb.Fastest<Order>().BulkUpdate(GetList())//update \ndb.Fastest<Order>().PageSize(100000).BulkUpdate(GetList()) \ndb.Fastest<Order>().BulkUpdate(GetList(),new string[] { \"Id\"});//no primary key\ndb.Fastest<Order>().BulkUpdate(GetList(), new string[]{\"id\"},\n                     new string[]{\"name\",\"time\"})//Set the updated column\n//DataTable                           \ndb.Fastest<System.Data.DataTable>().AS(\"Order\").BulkUpdate(dataTable,\"Id\");//Id is primary key\ndb.Fastest<System.Data.DataTable>().AS(\"Order\").BulkUpdate(dataTable,\"Id\",Set the updated column);\n                          \n\n10.3 BulkMerge （5.1.4.109）\ndb.Fastest<Order>().BulkMerge(List);\ndb.Fastest<Order>().PageSize(100000).BulkMerge(List);\n \n\n10.4 BulkQuery\ndb.Queryable<Order>().ToList();//Slightly faster than Dapper\n//Suitable for big data export\nList<Order> order = new List<Order>(); \ndb.Queryable<Order>().ForEach(it=> { order.Add(it); } ,2000);\n\n10.5 BulkDelete\ndb.Deleteable<Order>(list).PageSize(1000).ExecuteCommand();\n\n```\n"
        },
        {
          "name": "Src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}