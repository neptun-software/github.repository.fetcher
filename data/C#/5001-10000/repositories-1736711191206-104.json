{
  "metadata": {
    "timestamp": 1736711191206,
    "page": 104,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aalhour/C-Sharp-Algorithms",
      "stars": 5995,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.8056640625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\nx64/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Roslyn cache directories\n*.ide/\n.ionide/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n## TODO: Comment the next line if you want to checkin your\n## web deploy settings but do note that will include unencrypted\n## passwords\n#*.pubxml\n\n# NuGet Packages Directory\npackages/*\n## TODO: If the tool you use requires repositories.config\n## uncomment the next line\n#!packages/repositories.config\n\n# Enable \"build/\" folder in the NuGet Packages folder since\n# NuGet packages use it for MSBuild targets.\n# This line needs to be after the ignore of the build folder\n# (and the packages folder if the line above has been uncommented)\n!packages/build/\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\n.vs/\n.idea/\n\n# Local test runner\ntestrunner\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.234375,
          "content": "language: csharp\nmono: none\ndotnet: 2.1.502\nsolution: C-Sharp-Algorithms.sln\ninstall:\n  - dotnet restore\nscript:\n  - dotnet msbuild /p:Configuration=Release C-Sharp-Algorithms.sln\n  - dotnet restore\n  - dotnet test UnitTest/UnitTest.csproj\n"
        },
        {
          "name": "Algorithms",
          "type": "tree",
          "content": null
        },
        {
          "name": "C-Sharp-Algorithms.sln",
          "type": "blob",
          "size": 3.9833984375,
          "content": "ï»¿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.26430.6\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"DataStructures\", \"DataStructures\\DataStructures.csproj\", \"{A5923854-69FB-4BD0-90E3-702E1D488AFC}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Algorithms\", \"Algorithms\\Algorithms.csproj\", \"{7CE43796-3845-4F4D-9A8D-C09B8552F42E}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"UnitTest\", \"UnitTest\\UnitTest.csproj\", \"{78061D74-A872-4D4B-AF06-92EAC2EDF185}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{A5923854-69FB-4BD0-90E3-702E1D488AFC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{A5923854-69FB-4BD0-90E3-702E1D488AFC}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{A5923854-69FB-4BD0-90E3-702E1D488AFC}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{A5923854-69FB-4BD0-90E3-702E1D488AFC}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{7CE43796-3845-4F4D-9A8D-C09B8552F42E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{7CE43796-3845-4F4D-9A8D-C09B8552F42E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{7CE43796-3845-4F4D-9A8D-C09B8552F42E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{7CE43796-3845-4F4D-9A8D-C09B8552F42E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{78061D74-A872-4D4B-AF06-92EAC2EDF185}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{78061D74-A872-4D4B-AF06-92EAC2EDF185}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{78061D74-A872-4D4B-AF06-92EAC2EDF185}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{78061D74-A872-4D4B-AF06-92EAC2EDF185}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(MonoDevelopProperties) = preSolution\r\n\t\tPolicies = $0\r\n\t\t$0.TextStylePolicy = $1\r\n\t\t$1.scope = text/x-csharp\r\n\t\t$1.FileWidth = 80\r\n\t\t$1.TabsToSpaces = True\r\n\t\t$0.CSharpFormattingPolicy = $2\r\n\t\t$2.IndentSwitchBody = True\r\n\t\t$2.IndentBlocksInsideExpressions = True\r\n\t\t$2.AnonymousMethodBraceStyle = NextLine\r\n\t\t$2.PropertyBraceStyle = NextLine\r\n\t\t$2.PropertyGetBraceStyle = NextLine\r\n\t\t$2.PropertySetBraceStyle = NextLine\r\n\t\t$2.EventBraceStyle = NextLine\r\n\t\t$2.EventAddBraceStyle = NextLine\r\n\t\t$2.EventRemoveBraceStyle = NextLine\r\n\t\t$2.StatementBraceStyle = NextLine\r\n\t\t$2.ElseNewLinePlacement = NewLine\r\n\t\t$2.CatchNewLinePlacement = NewLine\r\n\t\t$2.FinallyNewLinePlacement = NewLine\r\n\t\t$2.WhileNewLinePlacement = DoNotCare\r\n\t\t$2.ArrayInitializerWrapping = DoNotChange\r\n\t\t$2.ArrayInitializerBraceStyle = NextLine\r\n\t\t$2.BeforeMethodDeclarationParentheses = False\r\n\t\t$2.BeforeMethodCallParentheses = False\r\n\t\t$2.BeforeConstructorDeclarationParentheses = False\r\n\t\t$2.NewLineBeforeConstructorInitializerColon = NewLine\r\n\t\t$2.NewLineAfterConstructorInitializerColon = SameLine\r\n\t\t$2.BeforeDelegateDeclarationParentheses = False\r\n\t\t$2.NewParentheses = False\r\n\t\t$2.SpacesBeforeBrackets = False\r\n\t\t$2.scope = text/x-csharp\r\n\t\t$2.IndentSwitchSection = False\r\n\t\t$2.NewLinesForBracesInProperties = False\r\n\t\t$2.NewLinesForBracesInAccessors = False\r\n\t\t$2.NewLinesForBracesInAnonymousMethods = False\r\n\t\t$2.NewLinesForBracesInControlBlocks = False\r\n\t\t$2.NewLinesForBracesInAnonymousTypes = False\r\n\t\t$2.NewLinesForBracesInObjectCollectionArrayInitializers = False\r\n\t\t$2.NewLinesForBracesInLambdaExpressionBody = False\r\n\t\t$2.NewLineForElse = False\r\n\t\t$2.NewLineForCatch = False\r\n\t\t$2.NewLineForFinally = False\r\n\t\t$2.NewLineForMembersInObjectInit = False\r\n\t\t$2.NewLineForMembersInAnonymousTypes = False\r\n\t\t$2.NewLineForClausesInQuery = False\r\n\t\t$2.SpacingAfterMethodDeclarationName = True\r\n\t\t$2.SpaceAfterMethodCallName = True\r\n\t\t$2.SpaceBeforeOpenSquareBracket = True\r\n\tEndGlobalSection\r\n\tGlobalSection(CodealikeProperties) = postSolution\r\n\t\tSolutionGuid = f7178bdb-e6ee-479b-8876-5fd96edf50a4\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "DataStructures",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Ahmad Alhour\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Nuget",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.134765625,
          "content": "```\n\n                                          o---o    |   |                                 \n                                         /       --O---O--                               \n                                        O          |   |                                 \n                                         \\       --O---O--                               \n                                          o---o    |   |                                 \n\n\n              O    o       o--o    o--o   o---o   o-O-o  o--O--o  o   o  o     o   o--o \n             / \\   |      o       o    o  |   |     |       |     |   |  |\\   /|  |     \n            o---o  |      |  o-o  |    |  O--Oo     |       |     O---O  | \\o/ |   o--o \n            |   |  |      o    |  o    o  |  \\      |       |     |   |  |     |      | \n            o   o  O---o   o--o    o--o   o   \\o  o-O-o     o     o   o  o     o  o---o \n\n```\n\n<p align=\"center\">\n  <a href=\"LICENSE\" alt=\"License\">\n    <img src=\"https://img.shields.io/github/license/aalhour/C-Sharp-Algorithms?style=flat-square&color=blue\" />\n  </a>\n  <a href=\"https://travis-ci.org/aalhour/C-Sharp-Algorithms\" alt=\"Build\">\n    <img src=\"https://img.shields.io/travis/aalhour/C-Sharp-Algorithms?style=flat-square&color=blue\" />\n  </a>\n  <a href=\"https://github.com/aalhour/C-Sharp-Algorithms/graphs/contributors\" alt=\"Contributors\">\n    <img src=\"https://img.shields.io/github/contributors/aalhour/C-Sharp-Algorithms?style=flat-square&color=blue\" />\n  </a>\n  <a href=\"https://github.com/aalhour/C-Sharp-Algorithms/pulse\" alt=\"Activity\">\n    <img src=\"https://img.shields.io/github/commit-activity/m/aalhour/C-Sharp-Algorithms?style=flat-square&color=blue\" />\n  </a>\n</p>\n\n##\n### WHAT IS C# ALGORITHMS?\n\nA plug-and-play class-library project of standard Data Structures and Algorithms, written in C#. It contains **75+** Data Structures and Algorithms, designed as Object-Oriented isolated components. Even though this project started for educational purposes, the implemented Data Structures and Algorithms are standard, efficient, stable and tested.\n\n##\n### BACK STORY\n\nThis project originally started out as an interview preparation project. However, after receiving a great amount of positive responses on [reddit](https://redd.it/3etf9f), and noticing excitement from a few [GitHubers](https://github.com/aalhour/C-Sharp-Algorithms#contributors) to contribute furthermore to it, the project took on a different meaning. So, I decided to keep maintaining it as a reference for data structures and algorithm implementations in C# as well as my own research side-project under these topics.\n\n##\n### DESCRIPTION\n\n#### Solution Hierarchy:\n\nThis is a C#.NET solution-project, and it contains three subprojects:\n\n  1. [Algorithms](Algorithms): A class library project. Contains the Algorithms implementations\n  2. [Data Structures](DataStructures): A class library project. Contains the Data Structures implementations\n  3. [UnitTest](UnitTest): Unit-testing project for the Algorithms and Data Structures\n\n#### Requirements:\n\n  1. .NET Core >= 2.0\n  2. XUnit\n\n#### A Note to Contributors:\n\nIf you wish to contribute to C# ALGORITHMS, then please make sure you check out the [Contribution Guidelines](.github/CONTRIBUTING.md) first.\n\n##\n### DATA STRUCTURES\n\n#### Linear:\n\n  * [Skip List](DataStructures/Lists/SkipList.cs)\n  * [Array List](DataStructures/Lists/ArrayList.cs)\n  * [Stack](DataStructures/Lists/Stack.cs)\n  * [Queue](DataStructures/Lists/Queue.cs)\n  * [Single-Linked List](DataStructures/Lists/SLinkedList.cs)\n  * [Double-Linked List](DataStructures/Lists/DLinkedList.cs)\n\n#### Circular:\n  \n  * [Circular Buffer](DataStructures/Lists/CircularBuffer.cs)\n\n#### Heaps:\n\n  * [Binary-Min Heap](DataStructures/Heaps/BinaryMinHeap.cs)\n  * [Binary-Max Heap](DataStructures/Heaps/BinaryMaxHeap.cs)\n  * [Binomial-Min Heap](DataStructures/Heaps/BinomialMinHeap.cs)\n \n#### Priority Queues:\n\n  * [Min-Priority Queue](DataStructures/Heaps/MinPriorityQueue.cs)\n  * [Key-value Priority Queue](DataStructures/Heaps/KeyedPriorityQueue.cs)\n \n#### Hashing Functions:\n\n  * [Prime Hashing Family](DataStructures/Hashing/PrimeHashingFamily.cs)\n  * [Universal Hashing Family](DataStructures/Hashing/UniversalHashingFamily.cs)\n\n#### Hash Tables:\n\n  * [Chained Hash Table](DataStructures/Dictionaries/ChainedHashTable.cs)\n  * [Cuckoo Hash Table](DataStructures/Dictionaries/CuckooHashTable.cs)\n  * [Open-Addressing Hash Table](DataStructures/Dictionaries/OpenAddressingHashTable.cs)\n\n#### Sorted Collections (Tree-based):\n\n  * [Sorted List](DataStructures/SortedCollections/SortedList.cs)\n  * [Sorted Dictionary](DataStructures/SortedCollections/SortedDictionary.cs)\n\n#### Trees:\n\n  \n  * Basic Search Trees:\n    + [Binary Search Tree](DataStructures/Trees/BinarySearchTree.cs)\n      * [Map version](DataStructures/Trees/BinarySearchTreeMap.cs) _(supports key-value pairing; nodes indexed by keys)_\n    + [\\(Augmented\\) Binary Search Tree](DataStructures/Trees/AugmentedBinarySearchTree.cs)\n    + [Ternary Search Tree](DataStructures/Trees/TernarySearchTree.cs)  \n  * Self-Balancing Trees:\n    + [AVL Tree](DataStructures/Trees/AVLTree.cs)\n    + [B-Tree](DataStructures/Trees/BTree.cs)\n    + [Red-Black Tree](DataStructures/Trees/RedBlackTree.cs)\n      * [Map version](DataStructures/Trees/RedBlackTreeMap.cs) _(supports key-value pairing; nodes indexed by keys)_\n  * Prefix Trees:\n    + [Trie](DataStructures/Trees/Trie.cs)\n    + [Trie Map](DataStructures/Trees/TrieMap.cs) _(associative prefix tree; complete words are keys to records)_\n \n#### Graphs:\n\n  * Undirected Graphs:\n    + [Clique Graphs](DataStructures/Graphs/CliqueGraph.cs)\n    + [Undirected Sparse Graph](DataStructures/Graphs/UndirectedSparseGraph.cs)\n    + [Undirected Dense Graph](DataStructures/Graphs/UndirectedDenseGraph.cs)\n  * Undirected Weighted Graphs:\n    + [Undirected Weighted Sparse Graph](DataStructures/Graphs/UndirectedWeightedSparseGraph.cs)\n    + [Undirected Weighted Dense Graph](DataStructures/Graphs/UndirectedWeightedDenseGraph.cs)\n  * Directed Graphs:\n    + [Directed Sparse Graph](DataStructures/Graphs/DirectedSparseGraph.cs)\n    + [Directed Dense Graph](DataStructures/Graphs/DirectedDenseGraph.cs)\n  * Directed Weighted Graphs:\n    + [Directed Weighted Sparse Graph](DataStructures/Graphs/DirectedWeightedSparseGraph.cs)\n    + [Directed Weighted Dense Graph](DataStructures/Graphs/DirectedWeightedDenseGraph.cs)\n\n\n##\n### ALGORITHMS\n\n#### Sorting:\n\n  * [Bubble Sort](Algorithms/Sorting/BubbleSorter.cs)\n  * [Bucket Sort](Algorithms/Sorting/BucketSorter.cs)\n  * [BST Sort](Algorithms/Sorting/BinarySearchTreeSorter.cs)\n  * [Comb Sort](Algorithms/Sorting/CombSorter.cs)\n  * [Counting Sort](Algorithms/Sorting/CountingSorter.cs)\n  * [Cycle Sort](Algorithms/Sorting/CycleSorter.cs)\n  * [Gnome Sort](Algorithms/Sorting/GnomeSorter.cs)\n  * [Heap Sort](Algorithms/Sorting/HeapSorter.cs)\n  * [Insertion Sort](Algorithms/Sorting/InsertionSorter.cs)\n  * [LSD Radix Sort](Algorithms/Sorting/LSDRadixSorter.cs)\n  * [Merge Sort](Algorithms/Sorting/MergeSorter.cs)\n  * [Selection Sort](Algorithms/Sorting/SelectionSorter.cs)\n  * [Shell Sort](Algorithms/Sorting/ShellSorter.cs)\n  * [OddEven Sort](Algorithms/Sorting/OddEvenSorter.cs)\n  * [PigeonHole Sort](Algorithms/Sorting/PigeonHoleSorter.cs)\n  * [Quick Sort](Algorithms/Sorting/QuickSorter.cs)\n\n#### Searching:\n\n  * [Binary Search](Algorithms/Search/BinarySearcher.cs)\n\n#### Graphs:\n\n  * Graph Search:\n    + [Depth-First Searcher](Algorithms/Graphs/DepthFirstSearcher.cs)\n    + [Breadth-First Searcher](Algorithms/Graphs/BreadthFirstSearcher.cs)\n  * Shortest Paths:\n    + [Breadth-First SPs](Algorithms/Graphs/BreadthFirstShortestPaths.cs)\n    + [Bellman-Ford SPs](Algorithms/Graphs/BellmanFordShortestPaths.cs)\n    + [Dijkstra SPs](Algorithms/Graphs/DijkstraShortestPaths.cs)\n    + [Dijkstra All-Pairs SPs](Algorithms/Graphs/DijkstraAllPairsShortestPaths.cs)\n  * DFS Applications:\n    + [Cycles Detector](Algorithms/Graphs/CyclesDetector.cs)\n    + [Topological Sorter](Algorithms/Graphs/TopologicalSorter.cs)\n  * BFS Applications:\n    + [Connected Components](Algorithms/Graphs/ConnectedComponents.cs)\n    + [Bipartite Graphs Coloring](Algorithms/Graphs/BipartiteColoring.cs)\n\n#### Trees:\n\n  * [Recursive Binary Tree Walker](Algorithms/Trees/BinaryTreeRecursiveWalker.cs)\n    + Methods: PrintAll, ForEach, Contains and BinarySearch. Traversal Modes: Preorder, Inorder & Postorder\n\n#### Strings:\n\n  * [Permutations and Anagrams](Algorithms/Strings/Permutations.cs)\n  * [Edit Distance](Algorithms/Strings/EditDistance.cs)\n    + Uses a generic custom class for passing costs: [EditDistanceCostsMap\\<T\\>](Algorithms/Strings/EditDistanceCostsMap.cs)\n\n#### Numeric:\n\n  * [Binomial Coefficients](Algorithms/Numeric/BinomialCoefficients.cs)\n  * [Catalan Numbers](Algorithms/Numeric/CatalanNumbers.cs)\n  * [Greatest Common Divisor](Algorithms/Numeric/GreatestCommonDivisor.cs)\n\n#### Visualization:\n\n  * [Tree Drawer](DataStructures/Trees/TreeDrawer.cs)\n\n\n##\n### CONTRIBUTORS\n\n<a href=\"https://github.com/aalhour/C-Sharp-Algorithms/graphs/contributors\">\n  <img src=\"https://contributors-img.firebaseapp.com/image?repo=aalhour/C-Sharp-Algorithms\" />\n</a>\n\n<br />\n<!-- Made with [contributors-img](https://contributors-img.firebaseapp.com). -->\n\n##\n### LICENSE\n\nThis project is licensed under the [MIT License](LICENSE).\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 4.4052734375,
          "content": "# TODO\n\n### New Data Structures:\n\n * Bloom Filters.\n * Sorted Lists.\n * Self-organizing Lists.\n * Radix Trees.\n * Suffix Trees.\n * Ternary Trees.\n * K-anry Trees.\n * R-tree.\n * R*_tree\n * R+_tree.\n * (R) Hilbert tree.\n * B-Trees.\n * B+_Trees\n * B*_Trees.\n * AA-Trees.\n * TreeSet, and TreeMap.\n * Scapegoat Trees.\n * Threaded Binary Tree.\n * Weight-balanced Trees.\n * Treaps.\n * Fibonacci heaps.\n * Binomial-Max Heaps.\n * Disjoint Set.\n * Bit Arrays and Bit Sets.\n * van Emde Boas data structure.\n * Hash Tables / Maps:\n  * Hash Set.\n  * Multiset / Bag.\n  * Multimap / Multihash Table.\n  * A textbook implementation of open-addressing hash table with double hashing / re-hasing.\n * HAMT (Hash Array Mapped Trie). See Phil Bagwell's work. [@Wikipedia](https://en.wikipedia.org/wiki/Hash_array_mapped_trie).\n * Multigraphs: Graphs with multiple edges. [@Wikipedia](https://en.wikipedia.org/wiki/Multigraph).\n * Mixed Graphs. [@Wikipedia](https://en.wikipedia.org/wiki/Mixed_graph).\n * (Probabilistic) Graphical Models:\n  * Bayesian Networks. [@Wikipedia](https://en.wikipedia.org/wiki/Bayesian_network), [@another link](https://en.wikipedia.org/wiki/Dynamic_Bayesian_network).\n  * Markov Network. [@Wikipedia](https://en.wikipedia.org/wiki/Markov_random_field).\n * CRDT (Conflict-free Replicated Data Type):\n  * [CRDT on Wikipedia](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type).\n  * [Readings in CRDTs](http://christophermeiklejohn.com/crdt/2014/07/22/readings-in-crdts.html).\n  * [Eventually Consistent Data Structures](https://www.infoq.com/presentations/CRDT).\n\n### New Algorithms:\n\n * Randomization algorithms.\n * Network-flow algorithms.\n * String searching algorithms.\n * Minimmum-Spanning Trees.\n * A-Star graphs searching algorithm.\n * Graphs: Bidirectional searching algorithm.\n * Graphs: All pairs shortest paths.\n * Graphs: Single-destination all sources shortest paths.\n * Graphs: Explore more shortest-paths algorithms [@Wikipedia](https://en.wikipedia.org/wiki/Shortest_path_problem).\n * Graphs: Algorithms support for Undirected Weighted Graphs.\n * Graphs: Disjoint union of graphs. [@Wikipedia](https://en.wikipedia.org/wiki/Graph_(mathematics)#Operations_on_graphs).\n * Graphs: Cartesian Product of graphs. [@Wikipedia](https://en.wikipedia.org/wiki/Cartesian_product_of_graphs).\n * Compression Algorithms.\n * Numerical Algorithms:\n  * Matrix Multiplication.\n  * Matrix-Vectors Operations.\n  * Big Integer representation.\n  * Approximation Algorithms.\n \n### Bugfixing:\n\n * Bugfix Bellman-Ford algorithm.\n \n### References:\n\n * MIT's Introduction to Algorithms (6.006):\n   + [MIT OCW](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/)\n   + [Youtube](https://www.youtube.com/playlist?list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb).\n   + [CSAIL](http://courses.csail.mit.edu/6.006/fall11/notes.shtml).\n * MIT's Design and Analysis of Algorithms Course (6.046J):\n   + 2012:\n     * [MIT OCW](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2012/).\n     * [Youtube](https://www.youtube.com/playlist?list=PL8B24C31197EC371C).\n   + 2015:\n     * [Stellar Site](http://stellar.mit.edu/S/course/6/sp15/6.046J/materials.html).\n     * [MIT OCW](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/).\n     * [Youtube](https://www.youtube.com/playlist?list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp).\n * MIT's Advanced Data Structures Course (6.851):\n   + [CSAIL](https://courses.csail.mit.edu/6.851/).\n   + [MIT OCW](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-851-advanced-data-structures-spring-2012/).\n   + [Youtube](https://www.youtube.com/playlist?list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf).\n   + Class Notes in one [PDF Document](http://courses.csail.mit.edu/6.851/spring14/scribe/2012scribes.pdf).\n * MIT's Advanced Algorithms Course (6.854):\n   + [CSAIL](http://people.csail.mit.edu/moitra/854.html).\n   + [YouTube](https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c).\n * [List of Algorithms, Wikipedia](https://en.wikipedia.org/wiki/List_of_algorithms).\n * [List of Data Structures, Wikipedia](https://en.wikipedia.org/wiki/List_of_data_structures).\n * GeeksForGeeks:\n   + [Algorithms](http://www.geeksforgeeks.org/fundamentals-of-algorithms/).\n   + [Data Structures](http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure).\n"
        },
        {
          "name": "UnitTest",
          "type": "tree",
          "content": null
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "theme: jekyll-theme-minimal"
        }
      ]
    }
  ]
}