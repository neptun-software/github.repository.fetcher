{
  "metadata": {
    "timestamp": 1736711187445,
    "page": 94,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jstedfast/MailKit",
      "stars": 6284,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 8.244140625,
          "content": "# Remove the line below if you want to inherit .editorconfig settings from higher directories\nroot = true\n\n# C# files\n[*.cs]\n\n#### Core EditorConfig Options ####\n\n# Indentation and spacing\nindent_size = 4\nindent_style = tab\ntab_width = 4\n\n# New line preferences\nend_of_line = crlf\ninsert_final_newline = true\n\n#### .NET Coding Conventions ####\n\n# Organize usings\ndotnet_separate_import_directive_groups = true\ndotnet_sort_system_directives_first = true\nfile_header_template = unset\n\n# this. and Me. preferences\ndotnet_style_qualification_for_event = false:silent\ndotnet_style_qualification_for_field = false:silent\ndotnet_style_qualification_for_method = false:silent\ndotnet_style_qualification_for_property = false:silent\n\n# Language keywords vs BCL types preferences\ndotnet_style_predefined_type_for_locals_parameters_members = true:silent\ndotnet_style_predefined_type_for_member_access = true:silent\n\n# Parentheses preferences\ndotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent\ndotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent\ndotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent\n\n# Modifier preferences\ndotnet_style_require_accessibility_modifiers = for_non_interface_members:silent\n\n# Expression-level preferences\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_operator_placement_when_wrapping = beginning_of_line\ndotnet_style_prefer_auto_properties = true:silent\ndotnet_style_prefer_compound_assignment = true:suggestion\ndotnet_style_prefer_conditional_expression_over_assignment = true:silent\ndotnet_style_prefer_conditional_expression_over_return = true:silent\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion\ndotnet_style_prefer_inferred_tuple_names = true:suggestion\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion\ndotnet_style_prefer_simplified_boolean_expressions = true:suggestion\ndotnet_style_prefer_simplified_interpolation = true:suggestion\n\n# Field preferences\ndotnet_style_readonly_field = true:suggestion\n\n# Parameter preferences\ndotnet_code_quality_unused_parameters = all:suggestion\n\n#### C# Coding Conventions ####\n\n# var preferences\ncsharp_style_var_elsewhere = false:silent\ncsharp_style_var_for_built_in_types = false:silent\ncsharp_style_var_when_type_is_apparent = false:silent\n\n# Expression-bodied members\ncsharp_style_expression_bodied_accessors = true:silent\ncsharp_style_expression_bodied_constructors = false:silent\ncsharp_style_expression_bodied_indexers = true:silent\ncsharp_style_expression_bodied_lambdas = true:silent\ncsharp_style_expression_bodied_local_functions = false:silent\ncsharp_style_expression_bodied_methods = false:silent\ncsharp_style_expression_bodied_operators = false:silent\ncsharp_style_expression_bodied_properties = true:silent\n\n# Pattern matching preferences\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_prefer_switch_expression = true:suggestion\n\n# Null-checking preferences\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Modifier preferences\ncsharp_prefer_static_local_function = true:suggestion\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:silent\n\n# Code-block preferences\ncsharp_prefer_braces = true:silent\ncsharp_prefer_simple_using_statement = true:suggestion\n\n# Expression-level preferences\ncsharp_prefer_simple_default_expression = true:suggestion\ncsharp_style_deconstructed_variable_declaration = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\ncsharp_style_pattern_local_over_anonymous_function = true:suggestion\ncsharp_style_prefer_index_operator = true:suggestion\ncsharp_style_prefer_range_operator = true:suggestion\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_unused_value_assignment_preference = discard_variable:suggestion\ncsharp_style_unused_value_expression_statement_preference = discard_variable:silent\n\n# 'using' directive preferences\ncsharp_using_directive_placement = outside_namespace:silent\n\n#### C# Formatting Rules ####\n\n# New line preferences\ncsharp_new_line_before_catch = false\ncsharp_new_line_before_else = false\ncsharp_new_line_before_finally = false\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_open_brace = methods,types\ncsharp_new_line_between_query_expression_clauses = true\n\n# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_case_contents_when_block = true\ncsharp_indent_labels = one_less_than_current\ncsharp_indent_switch_labels = false\n\n# Space preferences\ncsharp_space_after_cast = true\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = false\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = true\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = true\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false\n\n# Wrapping preferences\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = true\n\n#### Naming styles ####\n\n# Naming rules\n\ndotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion\ndotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface\ndotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i\n\ndotnet_naming_rule.types_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.types_should_be_pascal_case.symbols = types\ndotnet_naming_rule.types_should_be_pascal_case.style = pascal_case\n\ndotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members\ndotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case\n\n# Symbol specifications\n\ndotnet_naming_symbols.interface.applicable_kinds = interface\ndotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.interface.required_modifiers = \n\ndotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum\ndotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.types.required_modifiers = \n\ndotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method\ndotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected\ndotnet_naming_symbols.non_field_members.required_modifiers = \n\n# Naming styles\n\ndotnet_naming_style.pascal_case.required_prefix = \ndotnet_naming_style.pascal_case.required_suffix = \ndotnet_naming_style.pascal_case.word_separator = \ndotnet_naming_style.pascal_case.capitalization = pascal_case\n\ndotnet_naming_style.begins_with_i.required_prefix = I\ndotnet_naming_style.begins_with_i.required_suffix = \ndotnet_naming_style.begins_with_i.word_separator = \ndotnet_naming_style.begins_with_i.capitalization = pascal_case\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.09375,
          "content": "*.csproj text\n*.nuspec text\n*.sln eol=crlf\n*.msg text\n*.txt text\n*.yml text\n*.cs text\n*.md text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2001953125,
          "content": "MailKit/Resources/Resource.designer.cs\n*.csproj.nuget.dgspec.json\n*.csproj.nuget.cache\n*project.lock.json\n*.userprefs\n*.user\n*.suo\n*~\ntest-results\npackages\nobj\nbin\n.vs\n*.patch\n*.tree\n*.zip\n.idea\n.DS_Store\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.10546875,
          "content": "[submodule \"submodules/MimeKit\"]\n\tpath = submodules/MimeKit\n\turl = https://github.com/jstedfast/MimeKit.git\n"
        },
        {
          "name": "AotCompatibility",
          "type": "tree",
          "content": null
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "ExchangeOAuth2.md",
          "type": "blob",
          "size": 14.025390625,
          "content": "# Using OAuth2 With Exchange (IMAP, POP3 or SMTP)\n\n## Quick Index\n\n* [Registering Your Application with Microsoft](#registering-your-application-with-microsoft)\n* [Configuring the Correct API Permissions for Your Application](#configuring-the-correct-api-permissions-for-your-application)\n* Desktop and Mobile Applications\n  * [Authenticating a Desktop or Mobile Application with OAuth2](#authenticating-a-desktop-or-mobile-application-with-oauth2)\n* Web Applications\n  * [Authenticating a Web Application with OAuth2](#authenticating-a-web-application-with-oauth2)\n* Web Services\n  * [Registering Service Principals for Your Web Service](#registering-service-principals-for-your-web-service)\n  * [Granting Permissions for Your Web Service](#granting-permissions-for-your-web-service)\n  * [Authenticating a Web Service with OAuth2](#authenticating-a-web-service-with-oauth2)\n* [Additional Resources](#additional-resources)\n\n## Registering Your Application with Microsoft\n\nWhether you are writing a Desktop, Mobile or Web Service application, the first thing you'll need to do is register your\napplication with Microsoft's Identity Platform. To do this, go to Microsoft's\n[Quickstart guide](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app)\nand follow the instructions.\n\n## Configuring the Correct API Permissions for Your Application\n\nThere are several different API permissions that you may want to configure depending on which protocols your application intends to use.\n\nFollow the instructions for [adding the POP, IMAP, and/or SMTP permissions to your Entra AD application](https://learn.microsoft.com/en-us/exchange/client-developer/legacy-protocols/how-to-authenticate-an-imap-pop-smtp-application-by-using-oauth#use-client-credentials-grant-flow-to-authenticate-smtp-imap-and-pop-connections).\n\n## Desktop and Mobile Applications\n\n### Authenticating a Desktop or Mobile Application with OAuth2\n\nNow that you have the **Client ID** and **Tenant ID** strings, you'll need to plug those values into\nyour application.\n\nThe following sample code uses the [Microsoft.Identity.Client](https://www.nuget.org/packages/Microsoft.Identity.Client/)\nnuget package for obtaining the access token which will be needed by MailKit to pass on to the Exchange\nserver.\n\n```csharp\nstatic async Task<AuthenticationResult> GetPublicClientOAuth2CredentialsAsync (string protocol, string emailAddress, CancellationToken cancellationToken = default)\n{\n    var options = new PublicClientApplicationOptions {\n        ClientId = \"Application (client) ID\",\n        TenantId = \"Directory (tenant) ID\",\n\n        // Use \"https://login.microsoftonline.com/common/oauth2/nativeclient\" for apps using\n        // embedded browsers or \"http://localhost\" for apps that use system browsers.\n        RedirectUri = \"https://login.microsoftonline.com/common/oauth2/nativeclient\"\n    };\n \n    var publicClientApplication = PublicClientApplicationBuilder\n        .CreateWithApplicationOptions (options)\n        .Build ();\n\n    string[] scopes;\n \n    if (protocol.Equals (\"IMAP\", StringComparison.OrdinalIgnoreCase)) {\n        scopes = new string[] {\n            \"email\",\n            \"offline_access\",\n            \"https://outlook.office.com/IMAP.AccessAsUser.All\"\n        };\n    } else if (protocol.Equals (\"POP\", StringComparison.OrdinalIgnoreCase)) {\n        scopes = new string[] {\n            \"email\",\n            \"offline_access\",\n            \"https://outlook.office.com/POP.AccessAsUser.All\"\n        };\n    } else {\n        scopes = new string[] {\n            \"email\",\n            \"offline_access\",\n            \"https://outlook.office.com/SMTP.Send\"\n        };\n    }\n\n    try {\n        // First, check the cache for an auth token.\n        return await publicClientApplication.AcquireTokenSilent (scopes, emailAddress).ExecuteAsync (cancellationToken);\n    } catch (MsalUiRequiredException) {\n        // If that fails, then try getting an auth token interactively.\n        return await publicClientApplication.AcquireTokenInteractive (scopes).WithLoginHint (emailAddress).ExecuteAsync (cancellationToken);\n    }\n}\n```\n\n#### IMAP (using PublicClientApplication)\n\n```csharp\nvar result = await GetPublicClientOAuth2CredentialsAsync (\"IMAP\", \"username@outlook.com\");\n\n// Note: We always use result.Account.Username instead of `Username` because the user may have selected an alternative account.\nvar oauth2 = new SaslMechanismOAuth2 (result.Account.Username, result.AccessToken);\n\nusing (var client = new ImapClient ()) {\n    await client.ConnectAsync (\"outlook.office365.com\", 993, SecureSocketOptions.SslOnConnect);\n    await client.AuthenticateAsync (oauth2);\n    await client.DisconnectAsync (true);\n}\n```\n\n#### SMTP (using PublicClientApplication)\n\n```csharp\nvar result = await GetPublicClientOAuth2CredentialsAsync (\"SMTP\", \"username@outlook.com\");\n\n// Note: We always use result.Account.Username instead of `Username` because the user may have selected an alternative account.\nvar oauth2 = new SaslMechanismOAuth2 (result.Account.Username, result.AccessToken);\n\nusing (var client = new SmtpClient ()) {\n    await client.ConnectAsync (\"smtp.office365.com\", 587, SecureSocketOptions.StartTls);\n    await client.AuthenticateAsync (oauth2);\n    await client.DisconnectAsync (true);\n}\n```\n\nNote: Once you've acquired an auth token using the interactive method above, you can avoid prompting the user\nif you cache the `result.Account` information and then silently reacquire auth tokens in the future using\nthe following code:\n\n```csharp\nvar result = await publicClientApplication.AcquireTokenSilent(scopes, account).ExecuteAsync(cancellationToken);\n```\n\nNote: for information on caching tokens, see Microsoft's documentation about how to implement a\n[cross-platform token cache](https://github.com/AzureAD/microsoft-authentication-extensions-for-dotnet/wiki/Cross-platform-Token-Cache).\n\n## Web Applications\n\n### Authenticating a Web Application with OAuth2\n\nUse this if you want to send/receive mail on behalf of a user.\n\n```csharp\n// Common Code\nusing Microsoft.Graph;\nusing Microsoft.Identity.Client;\nusing Microsoft.Kiota.Abstractions.Authentication;\n\npublic static class OAuthMicrosoft\n{\n    public static readonly string[] RegistrationScopes = new string[] {\n        \"offline_access\",\n        \"User.Read\",\n        \"Mail.Send\",\n        \"https://outlook.office.com/SMTP.Send\",\n        \"https://outlook.office.com/IMAP.AccessAsUser.All\",\n    };\n\n    public static readonly string[] SmtpScopes = new string[] {\n        \"email\",\n        \"offline_access\",\n        \"https://outlook.office.com/SMTP.Send\"\n    };\n\n    public static readonly string[] ImapScopes = new string[] {\n        \"email\",\n        \"offline_access\",\n        \"https://outlook.office.com/IMAP.AccessAsUser.All\",\n    };\n\n    public static IConfidentialClientApplication CreateConfidentialClient ()\n    {\n        var clientId = \"Application (client) ID\";\n        var tenantId = \"common\"; // common = anybody with microsoft account personal or organization; other options see https://learn.microsoft.com/en-us/entra/identity-platform/v2-protocols#endpoints\n        var clientSecret = \"client secret\";\n\n        var redirectURL = \"https://example.com/oauth/microsoft/callback\";\n\n        var confidentialClientApplication = ConfidentialClientApplicationBuilder.Create (clientId)\n            .WithAuthority ($\"https://login.microsoftonline.com/{tenantId}/v2.0\")\n            .WithClientSecret (clientSecret)\n            .WithRedirectUri (redirectURL)\n            .Build ();\n\n        // You also need to configure an MSAL token cache. so that token are remembered.\n        return confidentialClientApplication;\n    }\n}\n```\n\n```csharp\n// Registration page - redirect user to Microsoft to get authorization \npublic async Task<IActionResult> OnPostAsync ()\n{\n    var client = OAuthMicrosoft.CreateConfidentialClient ();\n\n    // Note: When getting authorization, specify all of the scopes that your application will ever need (eg. SMTP /and/ IMAP).\n    // Later, when requesting an access token, you will only ask for the specific scopes that you need (e.g. SMTP).\n    var authurlbuilder = client.GetAuthorizationRequestUrl (OAuthMicrosoft.RegistrationScopes);\n    var authurl = await authurlbuilder.ExecuteAsync ();\n\n    return this.Redirect (authurl.ToString ());\n}\n\n// Callback page = https://example.com/oauth/microsoft/callback in this example\npublic async Task<IActionResult> OnGet ([FromQuery] string code)\n{\n    var confidentialClientApplication = OAuthMicrosoft.CreateConfidentialClient ();\n    var scopes = OAuthMicrosoft.SmtpScopes;\n\n    var auth = await confidentialClientApplication.AcquireTokenByAuthorizationCode (scopes, code).ExecuteAsync (); //this saves the token in msal cache\n\n    var ident = auth.Account.HomeAccountId.Identifier;\n    // Note: you will need to persist the ident to refer to later.\n}\n\n// Use the credentials\n\npublic async Task SendEmailAsync (string ident)\n{\n    var confidentialClientApplication = OAuthMicrosoft.CreateConfidentialClient ();\n    var account = await confidentialClientApplication.GetAccountAsync (ident);\n    var scopes = OAuthMicrosoft.SmtpScopes;\n\n    try {\n        var auth = await confidentialClientApplication.AcquireTokenSilent (scopes, account).ExecuteAsync ();\n\n        using (var client = new SmtpClient ()) {\n            await client.ConnectAsync (\"smtp-mail.outlook.com\", 587, SecureSocketOptions.StartTls);\n\n            var oauth2 = new SaslMechanismOAuth2 (auth.Account.Username, auth.AccessToken);\n\n            await client.AuthenticateAsync (oauth2);\n\n            var serverfeedback = await client.SendAsync (message);\n            await client.DisconnectAsync (true);\n        }\n    } catch (MsalUiRequiredException) {\n        throw new Exception (\"Need to get authorization again\");\n    }\n}\n\npublic async Task TestImapAsync (string ident)\n{\n    var confidentialClientApplication = OAuthMicrosoft.CreateConfidentialClient ();\n    var account = await confidentialClientApplication.GetAccountAsync (ident);\n    var scopes = OAuthMicrosoft.ImapScopes;\n\n    var auth = await confidentialClientApplication.AcquireTokenSilent (scopes, account).ExecuteAsync ();    \n\n    var oauth2 = new SaslMechanismOAuth2 (auth.Account.Username, auth.AccessToken);\n\n    using (var client = new ImapClient ()) {\n        await client.ConnectAsync (\"outlook.office365.com\", 993, SecureSocketOptions.SslOnConnect);\n        await client.AuthenticateAsync (oauth2);\n        await client.DisconnectAsync (true);\n    }\n}\n```\n\n## Web Services\n\n### Registering Service Principals for Your Web Service\n\nOnce your web service has been registered, the tenant admin will need to register your service principal.\n\nTo use the New-ServicePrincipal cmdlet, open an [Azure Powershell](https://learn.microsoft.com/en-us/powershell/azure/new-azureps-module-az?view=azps-10.2.0)\nterminal and install ExchangeOnlineManagement and connect to your tenant as shown below:\n\n```powershell\nInstall-Module -Name ExchangeOnlineManagement -allowprerelease\nImport-module ExchangeOnlineManagement \nConnect-ExchangeOnline -Organization <tenantId>\n```\n\nNext, register the Service Principal for your web service:\n\n```powershell\nNew-ServicePrincipal -AppId <APPLICATION_ID> -ObjectId <OBJECT_ID> [-Organization <ORGANIZATION_ID>]\n```\n\n### Granting Permissions for Your Web Service\n\nIn order to grant permissions for your web service to access an Office365 and/or Exchange account, you'll need to first get the\nService Principal ID registered in the previous step using the following command:\n\n```powershell\nGet-ServicePrincipal | fl\n```\n\nOnce you have the Service Principal ID for your web service, use the following command to add full\nmailbox permissions for the email account that your web service will be accessing:\n\n```powershelllo;.k,;\nAdd-MailboxPermission -Identity \"john.smith@example.com\" -User \n<SERVICE_PRINCIPAL_ID> -AccessRights FullAccess\n```\n\n### Authenticating a Web Service with OAuth2\n\nNow that you have the **Client ID** and **Tenant ID** strings, you'll need to plug those values into\nyour application.\n\nThe following sample code uses the [Microsoft.Identity.Client](https://www.nuget.org/packages/Microsoft.Identity.Client/)\nnuget package for obtaining the access token which will be needed by MailKit to pass on to the Exchange\nserver.\n\n```csharp\nstatic async Task<AuthenticationResult> GetConfidentialClientOAuth2CredentialsAsync (string protocol, CancellationToken cancellationToken = default)\n{\n    var confidentialClientApplication = ConfidentialClientApplicationBuilder.Create (clientId)\n        .WithAuthority ($\"https://login.microsoftonline.com/{tenantId}/v2.0\")\n        .WithCertificate (certificate) // or .WithClientSecret (clientSecret)\n        .Build ();\n\n    string[] scopes;\n\n    if (protocol.Equals (\"SMTP\", StringComparison.OrdinalIgnoreCase)) {\n        scopes = new string[] {\n            // For SMTP, use the following scope\n            \"https://outlook.office365.com/.default\"\n        };\n    } else {\n        scopes = new string[] {\n            // For IMAP and POP3, use the following scope\n            \"https://ps.outlook.com/.default\"\n        };\n    }\n\n    return await confidentialClientApplication.AcquireTokenForClient (scopes).ExecuteAsync (cancellationToken);\n}\n```\n\n#### IMAP (using ConfidentialClientApplication)\n\n```csharp\nvar result = await GetConfidentialClientOAuth2CredentialsAsync (\"IMAP\");\nvar oauth2 = new SaslMechanismOAuth2 (\"username@outlook.com\", result.AccessToken);\n\nusing (var client = new ImapClient ()) {\n    await client.ConnectAsync (\"outlook.office365.com\", 993, SecureSocketOptions.SslOnConnect);\n    await client.AuthenticateAsync (oauth2);\n    await client.DisconnectAsync (true);\n}\n```\n\n#### SMTP (using ConfidentialClientApplication)\n\n```csharp\nvar result = await GetConfidentialClientOAuth2CredentialsAsync (\"SMTP\");\nvar oauth2 = new SaslMechanismOAuth2 (\"username@outlook.com\", result.AccessToken);\n\nusing (var client = new SmtpClient ()) {\n    await client.ConnectAsync (\"smtp.office365.com\", 587, SecureSocketOptions.StartTls);\n    await client.AuthenticateAsync (oauth2);\n    await client.DisconnectAsync (true);\n}\n```\n\n## Additional Resources\n\nFor more information, check out the [Microsoft.Identity.Client](https://docs.microsoft.com/en-us/dotnet/api/microsoft.identity.client?view=azure-dotnet)\ndocumentation.\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 77.541015625,
          "content": "# Frequently Asked Questions\n\n## Question Index\n\n### General\n\n* [Are MimeKit and MailKit completely free? Can I use them in my proprietary product(s)?](#completely-free)\n* [Why do I get `NotSupportedException: No data is available for encoding ######. For information on defining a custom encoding, see the documentation for the Encoding.RegisterProvider method.`?](#register-provider)\n* [Why do I get a `TypeLoadException` when I try to create a new MimeMessage?](#type-load-exception)\n* [Why do I get `\"MailKit.Security.SslHandshakeException: An error occurred while attempting to establish an SSL or TLS connection.\"` when I try to Connect?](#ssl-handshake-exception)\n* [How can I get a protocol log for IMAP, POP3, or SMTP to see what is going wrong?](#protocol-log)\n* [Why doesn't MailKit find some of my GMail POP3 or IMAP messages?](#gmail-hidden-messages)\n* [How can I access GMail using MailKit?](#gmail-access)\n* [How can I log in to a GMail account using OAuth 2.0?](#gmail-oauth2)\n\n### Messages\n\n* [How can I create a message with attachments?](#create-attachments)\n* [How can I get the main body of a message?](#message-body)\n* [How can I tell if a message has attachments?](#has-attachments)\n* [Why doesn't the `MimeMessage` class implement `ISerializable` so that I can serialize a message to disk and read it back later?](#serialize-message)\n* [How can I parse messages?](#load-messages)\n* [How can I save messages?](#save-messages)\n* [How can I save attachments?](#save-attachments)\n* [How can I get the email addresses in the From, To, and Cc headers?](#address-headers)\n* [Why do attachments with unicode filenames appear as \"ATT0####.dat\" in Outlook?](#untitled-attachments)\n* [How can I decrypt PGP messages that are embedded in the main message text?](#decrypt-inline-pgp)\n* [How can I reply to a message?](#reply-message)\n* [How can I forward a message?](#forward-message)\n* [Why does text show up garbled in my ASP.NET Core / .NET Core / .NET 5 app?](#garbled-text)\n\n### ImapClient\n\n* [How can I get the number of unread messages in a folder?](#imap-unread-count)\n* [How can I search for messages delivered between two dates?](#imap-search-date-range)\n* [What does \"The ImapClient is currently busy processing a command.\" mean?](#imap-client-busy)\n* [Why do I get InvalidOperationException: \"The folder is not currently open.\"?](#imap-folder-not-open-exception)\n* [Why doesn't ImapFolder.MoveTo() move the message out of the source folder?](#imap-move-does-not-move)\n* [How can I mark messages as read using IMAP?](#imap-mark-as-read)\n* [How can I re-synchronize the cache for an IMAP folder?](#imap-folder-resync)\n* [How can I login using a shared mailbox in Office365?](#office365-shared-mailboxes)\n\n### SmtpClient\n\n* [Why doesn't the message show up in the \"Sent Mail\" folder after sending it?](#smtp-sent-folder)\n* [How can I send email to the SpecifiedPickupDirectory?](#smtp-specified-pickup-directory)\n* [How can I request a notification when the message is read by the user?](#smtp-request-read-receipt)\n* [How can I process a read receipt notification?](#smtp-process-read-receipt)\n\n## General\n\n### <a id=\"completely-free\">Q: Are MimeKit and MailKit completely free? Can I use them in my proprietary product(s)?</a>\n\nYes. MimeKit and MailKit are both completely free and open source. They are both covered under the\n[MIT](https://opensource.org/licenses/MIT) license.\n\n### <a name=\"register-provider\">Q: Why do I get `NotSupportedException: No data is available for encoding ######. For information on defining a custom encoding, see the documentation for the Encoding.RegisterProvider method.`?</a>\n\nIn .NET Core, Microsoft decided to split out the non-Unicode text encodings into a separate NuGet package called\n[System.Text.Encoding.CodePages](https://www.nuget.org/packages/System.Text.Encoding.CodePages).\n\nMimeKit already pulls in a reference to this NuGet package, so you shouldn't need to add a reference to it in\nyour project. That said, you will still need to register the encoding provider. It is recommended that you add\nthe following line of code to your program initialization (e.g. the beginning of your program's Main() method):\n\n```csharp\nSystem.Text.Encoding.RegisterProvider (System.Text.CodePagesEncodingProvider.Instance);\n```\n\n### <a name=\"type-load-exception\">Q: Why do I get a `TypeLoadException` when I try to create a new MimeMessage?</a>\n\nThis only seems to happen in cases where the application is built for .NET Framework (v4.x) and seems to be most\ncommon for ASP.NET web applications that were built using Visual Studio 2019 (it is unclear whether this happens\nwith Visual Studio 2022 as well).\n\nThe issue is that some (older?) versions of MSBuild do not correctly generate `\\*.dll.config`, `app.config`\nand/or `web.config` files with proper assembly version binding redirects.\n\nIf this problem is happening to you, make sure to use MimeKit and MailKit >= v4.0 which include `MimeKit.dll.config`\nand `MailKit.dll.config`.\n\nThe next step is to manually edit your application's `app.config` (or `web.config`) to add a binding redirect\nfor `System.Runtime.CompilerServices.Unsafe`:\n\n```xml\n<configuration>\n  <runtime>\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n      <dependentAssembly>\n        <assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\n        <bindingRedirect oldVersion=\"0.0.0.0-6.0.0.0\" newVersion=\"6.0.0.0\" />\n      </dependentAssembly>\n    </assemblyBinding>\n  </runtime>\n</configuration>\n```\n\n### <a id=\"ssl-handshake-exception\">Q: Why do I get `\"MailKit.Security.SslHandshakeException: An error occurred while attempting to establish an SSL or TLS connection.\"` when I try to Connect?</a>\n\nWhen you get an exception with that error message, it usually means that you are encountering\none of the following scenarios:\n\n#### 1. The mail server does not support SSL on the specified port.\n\nThere are 2 different ways to use SSL/TLS encryption with mail servers.\n\nThe first way is to enable SSL/TLS encryption immediately upon connecting to the\nSMTP, POP3 or IMAP server. This method requires an \"SSL port\" because the standard\nport defined for the protocol is meant for plain-text communication.\n\nThe second way is via a `STARTTLS` command (aka `STLS` for POP3) that is *optionally*\nsupported by the server.\n\nBelow is a table of the protocols supported by MailKit and the standard plain-text ports\n(which either do not support any SSL/TLS encryption at all or only via the `STARTTLS`\ncommand extension) and the SSL ports which require SSL/TLS encryption immediately upon a\nsuccessful connection to the remote host.\n\n|Protocol|Standard Port|SSL Port|\n|:------:|:-----------:|:------:|\n| SMTP   | 25 or 587   | 465    |\n| POP3   | 110         | 995    |\n| IMAP   | 143         | 993    |\n\nIt is important to use the correct `SecureSocketOptions` for the port that you are connecting to.\n\nIf you are connecting to one of the standard ports above, you will need to use `SecureSocketOptions.None`,\n`SecureSocketOptions.StartTls` or `SecureSocketOptions.StartTlsWhenAvailable`.\n\nIf you are connecting to one of the SSL ports, you will need to use `SecureSocketOptions.SslOnConnect`.\n\nYou could also try using `SecureSocketOptions.Auto` which works by choosing the appropriate option to use\nby comparing the specified port to the ports in the above table.\n\n#### 2. The mail server that you are connecting to is using an expired (or otherwise untrusted) SSL certificate.\n\nOften times, mail servers will use self-signed certificates instead of using a certificate that\nhas been signed by a trusted Certificate Authority. Another potential pitfall is when locally\ninstalled anti-virus software replaces the certificate in order to scan web traffic for viruses.\n\nWhen your system is unable to validate the mail server's certificate because it is not signed\nby a known and trusted Certificate Authority, the above error will occur.\n\nIf you are on a Linux system or are running a web service in a Linux container, it might be possible to use the following command to install\nthe standard set of Certificate Authority root certificates using the following command:\n\n```text\napt update && apt install -y ca-certificates\n```\n\nAnother option is to work around this problem by supplying a custom [RemoteCertificateValidationCallback](https://msdn.microsoft.com/en-us/library/ms145054)\nand setting it on the client's [ServerCertificateValidationCallback](https://mimekit.net/docs/html/P_MailKit_MailService_ServerCertificateValidationCallback.htm)\nproperty.\n\nIn the simplest example, you could do something like this (although I would strongly recommend against it in\nproduction use):\n\n```csharp\nusing (var client = new SmtpClient ()) {\n    client.ServerCertificateValidationCallback = (s,c,h,e) => true;\n\n    client.Connect (hostName, port, SecureSocketOptions.Auto);\n\n    // ...\n}\n```\n\nA better solution might be to compare the certificate's common name, issuer, serial number, and fingerprint\nto known values to make sure that the certificate can be trusted. Take the following code snippet as an\nexample of how to do this:\n\n```csharp\nbool MyServerCertificateValidationCallback (object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)\n{\n    if (sslPolicyErrors == SslPolicyErrors.None)\n        return true;\n\n    // Note: The following code casts to an X509Certificate2 because it's easier to get the\n    // values for comparison, but it's possible to get them from an X509Certificate as well.\n    if (certificate is X509Certificate2 certificate2) {\n        var cn = certificate2.GetNameInfo (X509NameType.SimpleName, false);\n        var fingerprint = certificate2.Thumbprint;\n        var serial = certificate2.SerialNumber;\n        var issuer = certificate2.Issuer;\n\n        return cn == \"imap.gmail.com\" && issuer == \"CN=GTS CA 1O1, O=Google Trust Services, C=US\" &&\n            serial == \"00A15434C2695FB1880300000000CBF786\" &&\n            fingerprint == \"F351BCB631771F19AF41DFF22EB0A0839092DA51\";\n    }\n\n    return false;\n}\n```\n\nThe downside of the above example is that it requires hard-coding known values for \"trusted\" mail server\ncertificates which can quickly become unwieldy to deal with if your program is meant to be used with\na wide range of mail servers.\n\nThe best approach would be to prompt the user with a dialog explaining that the certificate is\nnot trusted for the reasons enumerated by the\n[SslPolicyErrors](https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslpolicyerrors?view=netframework-4.8)\nargument as well as potentially the errors provided in the\n[X509Chain](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509chain?view=netframework-4.8).\nIf the user wishes to accept the risks of trusting the certificate, your program could then `return true`.\n\nFor more details on writing a custom SSL certificate validation callback, it may be worth checking out the\n[SslCertificateValidation.cs](https://github.com/jstedfast/MailKit/blob/master/Documentation/Examples/SslCertificateValidation.cs)\nexample.\n\n#### 3. A Certificate Authority CRL server for one or more of the certificates in the chain is temporarily unavailable.\n\nMost Certificate Authorities are probably pretty good at keeping their CRL and/or OCSP servers up 24/7, but occasionally\nthey *do* go down or are otherwise unreachable due to other network problems between you and the server. When this happens,\nit becomes impossible to check the revocation status of one or more of the certificates in the chain.\n\nTo ignore revocation checks, you can set the\n[CheckCertificateRevocation](https://www.mimekit.net/docs/html/P_MailKit_IMailService_CheckCertificateRevocation.htm)\nproperty of the IMAP, POP3 or SMTP client to `false` before you connect:\n\n```csharp\nusing (var client = new SmtpClient ()) {\n    client.CheckCertificateRevocation = false;\n\n    client.Connect (hostName, port, SecureSocketOptions.Auto);\n\n    // ...\n}\n```\n\n#### 4. The server does not support the same set of SSL/TLS protocols that the client is configured to use.\n\nMailKit attempts to keep up with the latest security recommendations and so is continuously removing older SSL and TLS\nprotocols that are no longer considered secure from the default configuration. This often means that MailKit's SMTP,\nPOP3 and IMAP clients will fail to connect to servers that are still using older SSL and TLS protocols. Currently,\nthe SSL and TLS protocols that are not supported by default are: SSL v2.0, SSL v3.0, TLS v1.0 and TLS v1.1.\n\nYou can override MailKit's default set of supported\n[SSL and TLS protocols](https://docs.microsoft.com/en-us/dotnet/api/system.security.authentication.sslprotocols?view=netframework-4.8)\nby setting the value of the [SslProtocols](https://www.mimekit.net/docs/html/P_MailKit_MailService_SslProtocols.htm)\nproperty on your SMTP, POP3 or IMAP client.\n\nFor example:\n\n```csharp\nusing (var client = new SmtpClient ()) {\n    // Allow SSLv3.0 and all versions of TLS\n    client.SslProtocols = SslProtocols.Ssl3 | SslProtocols.Tls | SslProtocols.Tls11 | SslProtocols.Tls12 | SslProtocols.Tls13;\n\n    client.Connect (\"smtp.gmail.com\", 465, true);\n\n    // ...\n}\n```\n\n### <a id=\"protocol-log\">Q: How can I get a protocol log for IMAP, POP3, or SMTP to see what is going wrong?</a>\n\nAll of MailKit's client implementations have a constructor that takes a nifty\n[IProtocolLogger](https://www.mimekit.net/docs/html/T_MailKit_IProtocolLogger.htm)\ninterface for logging client/server communications. Out of the box, you can use the\nhandy [ProtocolLogger](https://www.mimekit.net/docs/html/T_MailKit_ProtocolLogger.htm) class.\nHere are some examples of how to use it:\n\n```csharp\n// log to a file called 'imap.log'\nvar client = new ImapClient (new ProtocolLogger (\"imap.log\"));\n```\n\n```csharp\n// log to standard output (i.e. the console)\nvar client = new ImapClient (new ProtocolLogger (Console.OpenStandardOutput ()));\n```\n\n**Note:** When submitting a protocol log as part of a bug report, make sure to scrub any sensitive\ninformation including your authentication credentials. This information will generally be the base64\nencoded blob immediately following an `AUTHENTICATE` or `AUTH` command (depending on the type of server).\nThe only exception to this case is if you are authenticating with `NTLM` in which case I *may* need this\ninformation, but *only if* the bug/error is in the authentication step.\n\n### <a id=\"gmail-hidden-messages\">Q: Why doesn't MailKit find some of my GMail POP3 or IMAP messages?</a>\n\nBy default, GMail's POP3 and IMAP server does not behave like standard POP3 or IMAP servers\nand hides messages from clients using those protocols (as well as having other non-standard\nbehavior).\n\nIf you want to configure your GMail POP3 or IMAP settings to behave the way POP3 and IMAP are\nintended to behave according to their protocol specifications, you'll need to log in to your\nGMail account via your web browser and navigate to the `Forwarding and POP/IMAP` tab of your\nGMail Settings page and set your options to look like this:\n\n![GMail POP3 and IMAP Settings](https://content.screencast.com/users/jeff.xamarin/folders/Jing/media/7d50dada-6cb0-4ab1-b117-8600fb5e07d4/00000022.png \"GMail POP3 and IMAP Settings\")\n\n### <a id=\"gmail-access\">Q: How can I access GMail using MailKit?</a>\n\nAs of September 30th, 2024, authentication using only a username and password is [no longer supported by Google](https://support.google.com/accounts/answer/6010255?hl=en).\n\nThere are now only 2 options to choose from:\n\n1. Use [OAuth 2.0 authentication](#gmail-oauth2)\n2. Use an \"App password\"\n\nTo use an App password, you will first need to [turn on 2-Step Verification](https://support.google.com/accounts/answer/185839).\nOnce 2-Step Verification is turned on, you can [generate an App password](https://myaccount.google.com/apppasswords).\n\nThen, assuming that your GMail account is `user@gmail.com`, you would use the following\ncode snippet to connect to GMail via IMAP:\n\n```csharp\nusing (var client = new ImapClient ()) {\n    client.Connect (\"imap.gmail.com\", 993, SecureSocketOptions.SslOnConnect);\n    client.Authenticate (\"user@gmail.com\", \"password\");\n\n    // do stuff...\n\n    client.Disconnect (true);\n}\n```\n\nConnecting via POP3 or SMTP is identical except for the host names and ports (and, of course, you'd\nuse a `Pop3Client` or `SmtpClient` as appropriate).\n\n### <a id=\"gmail-oauth2\">Q: How can I log in to a GMail account using OAuth 2.0?</a>\n\nThe first thing you need to do is follow\n[Google's instructions](https://developers.google.com/accounts/docs/OAuth2)\nfor obtaining OAuth 2.0 credentials for your application.\n\n(Or, as an alternative set of step-by-step instructions, you can follow the directions that I have\nwritten in [GMailOAuth2.md](https://github.com/jstedfast/MailKit/blob/master/GMailOAuth2.md).)\n\nOnce you've done that, the easiest way to obtain an access token is to use Google's\n[Google.Apis.Auth](https://www.nuget.org/packages/Google.Apis.Auth/) library:\n\n```csharp\nconst string GMailAccount = \"username@gmail.com\";\n\nvar clientSecrets = new ClientSecrets {\n    ClientId = \"XXX.apps.googleusercontent.com\",\n    ClientSecret = \"XXX\"\n};\n\nvar codeFlow = new GoogleAuthorizationCodeFlow (new GoogleAuthorizationCodeFlow.Initializer {\n    // Cache tokens in ~/.local/share/google-filedatastore/CredentialCacheFolder on Linux/Mac\n    DataStore = new FileDataStore (\"CredentialCacheFolder\", false),\n    Scopes = new [] { \"https://mail.google.com/\" },\n    ClientSecrets = clientSecrets,\n    LoginHint = GMailAccount\n});\n\n// Note: For a web app, you'll want to use AuthorizationCodeWebApp instead.\nvar codeReceiver = new LocalServerCodeReceiver ();\nvar authCode = new AuthorizationCodeInstalledApp (codeFlow, codeReceiver);\n\nvar credential = await authCode.AuthorizeAsync (GMailAccount, CancellationToken.None);\n\nif (credential.Token.IsStale)\n    await credential.RefreshTokenAsync (CancellationToken.None);\n\nvar oauth2 = new SaslMechanismOAuthBearer (credential.UserId, credential.Token.AccessToken);\n\nusing (var client = new ImapClient ()) {\n    await client.ConnectAsync (\"imap.gmail.com\", 993, SecureSocketOptions.SslOnConnect);\n    await client.AuthenticateAsync (oauth2);\n    await client.DisconnectAsync (true);\n}\n```\n\n## Messages\n\n### <a id=\"create-attachments\">Q: How can I create a message with attachments?</a>\n\nTo construct a message with attachments, the first thing you'll need to do is create a `multipart/mixed`\ncontainer which you'll then want to add the message body to first. Once you've added the body, you can\nthen add MIME parts to it that contain the content of the files you'd like to attach, being sure to set\nthe `Content-Disposition` header value to attachment. You'll probably also want to set the `filename`\nparameter on the `Content-Disposition` header as well as the `name` parameter on the `Content-Type`\nheader. The most convenient way to do this is to use the\n[MimePart.FileName](https://www.mimekit.net/docs/html/P_MimeKit_MimePart_FileName.htm) property which\nwill set both parameters for you as well as setting the `Content-Disposition` header value to `attachment`\nif it has not already been set to something else.\n\n```csharp\nvar message = new MimeMessage ();\nmessage.From.Add (new MailboxAddress (\"Joey\", \"joey@friends.com\"));\nmessage.To.Add (new MailboxAddress (\"Alice\", \"alice@wonderland.com\"));\nmessage.Subject = \"How you doin?\";\n\n// create our message text, just like before (except don't set it as the message.Body)\nvar body = new TextPart (\"plain\") {\n    Text = @\"Hey Alice,\n\nWhat are you up to this weekend? Monica is throwing one of her parties on\nSaturday and I was hoping you could make it.\n\nWill you be my +1?\n\n-- Joey\n\"\n};\n\n// create an image attachment for the file located at path\nvar attachment = new MimePart (\"image\", \"gif\") {\n    Content = new MimeContent (File.OpenRead (path), ContentEncoding.Default),\n    ContentDisposition = new ContentDisposition (ContentDisposition.Attachment),\n    ContentTransferEncoding = ContentEncoding.Base64,\n    FileName = Path.GetFileName (path)\n};\n\n// now create the multipart/mixed container to hold the message text and the\n// image attachment\nvar multipart = new Multipart (\"mixed\");\nmultipart.Add (body);\nmultipart.Add (attachment);\n\n// now set the multipart/mixed as the message body\nmessage.Body = multipart;\n```\n\nA simpler way to construct messages with attachments is to take advantage of the\n[BodyBuilder](https://www.mimekit.net/docs/html/T_MimeKit_BodyBuilder.htm) class.\n\n```csharp\nvar message = new MimeMessage ();\nmessage.From.Add (new MailboxAddress (\"Joey\", \"joey@friends.com\"));\nmessage.To.Add (new MailboxAddress (\"Alice\", \"alice@wonderland.com\"));\nmessage.Subject = \"How you doin?\";\n\nvar builder = new BodyBuilder ();\n\n// Set the plain-text version of the message text\nbuilder.TextBody = @\"Hey Alice,\n\nWhat are you up to this weekend? Monica is throwing one of her parties on\nSaturday and I was hoping you could make it.\n\nWill you be my +1?\n\n-- Joey\n\";\n\n// We may also want to attach a calendar event for Monica's party...\nbuilder.Attachments.Add (@\"C:\\Users\\Joey\\Documents\\party.ics\");\n\n// Now we just need to set the message body and we're done\nmessage.Body = builder.ToMessageBody ();\n```\n\nFor more information, see [Creating Messages](https://www.mimekit.net/docs/html/Creating-Messages.htm).\n\n### <a id=\"message-body\">Q: How can I get the main body of a message?</a>\n\n(Note: for the TL;DR version, skip to [the end](#message-body-tldr))\n\nMIME is a tree structure of parts. There are multiparts which contain other parts (even other multiparts).\nThere are message parts which contain messages. And finally, there are leaf-node parts which contain content.\n\nThere are a few common message structures:\n\n1. The message contains only a `text/plain` or `text/html` part (easy, just use that).\n\n2. The message contains a `multipart/alternative` which will typically look a bit like this:\n\n    ```\n    multipart/alternative\n       text/plain\n       text/html\n    ```\n\n3. Same as above, but the html part is inside a `multipart/related` so that it can embed images:\n\n    ```\n    multipart/alternative\n       text/plain\n       multipart/related\n          text/html\n          image/jpeg\n          image/png\n    ```\n\n4. The message contains a textual body part as well as some attachments:\n\n    ```\n    multipart/mixed\n       text/plain or text/html\n       application/octet-stream\n       application/zip\n    ```\n\n5. the same as above, but with the first part replaced with either #2 or #3. To illustrate:\n\n    ```\n    multipart/mixed\n       multipart/alternative\n          text/plain\n          text/html\n       application/octet-stream\n       application/zip\n    ```\n\n    or...\n\n    ```\n    multipart/mixed\n       multipart/alternative\n          text/plain\n          multipart/related\n             text/html\n             image/jpeg\n             image/png\n       application/octet-stream\n       application/zip\n    ```\n\n<a name=\"message-body-tldr\"></a>Now, if you don't care about any of that and just want to get the text of\nthe first `text/plain` or `text/html` part you can find, that's easy.\n\n[MimeMessage](https://www.mimekit.net/docs/html/T_MimeKit_MimeMessage.htm) has two convenience properties\nfor this: [TextBody](https://www.mimekit.net/docs/html/P_MimeKit_MimeMessage_TextBody.htm) and\n[HtmlBody](https://www.mimekit.net/docs/html/P_MimeKit_MimeMessage_HtmlBody.htm).\n\n`MimeMessage.HtmlBody`, as the name implies, will traverse the MIME structure for you and find the most\nappropriate body part with a `Content-Type` of `text/html` that can be interpreted as the message body.\nLikewise, the `TextBody` property can be used to get the `text/plain` version of the message body.\n\nFor more information, see [Working with Messages](https://www.mimekit.net/docs/html/Working-With-Messages.htm).\n\n### <a id=\"has-attachments\">Q: How can I tell if a message has attachments?</a>\n\nIn most cases, a message with a body that has a MIME-type of `multipart/mixed` containing more than a\nsingle part probably has attachments. As illustrated above, the first part of a `multipart/mixed` is\ntypically the textual body of the message, but it is not always quite that simple.\n\nIn general, MIME attachments will have a `Content-Disposition` header with a value of `attachment`.\nTo get the list of body parts matching this criteria, you can use the\n[MimeMessage.Attachments](https://www.mimekit.net/docs/html/P_MimeKit_MimeMessage_Attachments.htm) property.\n\nUnfortunately, not all mail clients follow this convention and so you may need to write your own custom logic.\nFor example, you may wish to treat all body parts having a `name` or `filename` parameter set on them:\n\n```csharp\nvar attachments = message.BodyParts.OfType<MimePart> ().Where (part => !string.IsNullOrEmpty (part.FileName));\n```\n\nA more sophisticated approach is to treat body parts not referenced by the main textual body part of the\nmessage as attachments. In other words, treat any body part not used for rendering the message as an\nattachment. For an example on how to do this, consider the following code snippets:\n\n```csharp\n/// <summary>\n/// Visits a MimeMessage and generates HTML suitable to be rendered by a browser control.\n/// </summary>\nclass HtmlPreviewVisitor : MimeVisitor\n{\n    List<MultipartRelated> stack = new List<MultipartRelated> ();\n    List<MimeEntity> attachments = new List<MimeEntity> ();\n    readonly string tempDir;\n    string body;\n\n    /// <summary>\n    /// Creates a new HtmlPreviewVisitor.\n    /// </summary>\n    /// <param name=\"tempDirectory\">A temporary directory used for storing image files.</param>\n    public HtmlPreviewVisitor (string tempDirectory)\n    {\n        tempDir = tempDirectory;\n    }\n\n    /// <summary>\n    /// The list of attachments that were in the MimeMessage.\n    /// </summary>\n    public IList<MimeEntity> Attachments {\n        get { return attachments; }\n    }\n\n    /// <summary>\n    /// The HTML string that can be set on the BrowserControl.\n    /// </summary>\n    public string HtmlBody {\n        get { return body ?? string.Empty; }\n    }\n\n    protected override void VisitMultipartAlternative (MultipartAlternative alternative)\n    {\n        // walk the multipart/alternative children backwards from greatest level of faithfulness to the least faithful\n        for (int i = alternative.Count - 1; i >= 0 && body == null; i--)\n            alternative[i].Accept (this);\n    }\n\n    protected override void VisitMultipartRelated (MultipartRelated related)\n    {\n        var root = related.Root;\n\n        // push this multipart/related onto our stack\n        stack.Add (related);\n\n        // visit the root document\n        root.Accept (this);\n\n        // pop this multipart/related off our stack\n        stack.RemoveAt (stack.Count - 1);\n    }\n\n    // look up the image based on the img src url within our multipart/related stack\n    bool TryGetImage (string url, out MimePart image)\n    {\n        UriKind kind;\n        int index;\n        Uri uri;\n\n        if (Uri.IsWellFormedUriString (url, UriKind.Absolute))\n            kind = UriKind.Absolute;\n        else if (Uri.IsWellFormedUriString (url, UriKind.Relative))\n            kind = UriKind.Relative;\n        else\n            kind = UriKind.RelativeOrAbsolute;\n\n        try {\n            uri = new Uri (url, kind);\n        } catch {\n            image = null;\n            return false;\n        }\n\n        for (int i = stack.Count - 1; i >= 0; i--) {\n            if ((index = stack[i].IndexOf (uri)) == -1)\n                continue;\n\n            image = stack[i][index] as MimePart;\n            return image != null;\n        }\n\n        image = null;\n\n        return false;\n    }\n\n    /// <summary>\n    /// Get a file:// URI for the image attachment.\n    /// </summary>\n    /// <remarks>\n    /// Saves the image attachment to a temp file and returns a file:// URI for the\n    /// temp file.\n    /// </remarks>\n    /// <returns>The file:// URI.</returns>\n    /// <param name=\"image\">The image attachment.</param>\n    /// <param name=\"url\">The original HTML image URL.</param>\n    string GetFileUri (MimePart image, string url)\n    {\n        string fileName = url.Replace (':', '_').Replace ('\\\\', '_').Replace ('/', '_');\n\n        string path = Path.Combine (tempDir, fileName);\n\n        if (!File.Exists (path)) {\n            using (var output = File.Create (path))\n                image.Content.DecodeTo (output);\n        }\n\n        return \"file://\" + path.Replace ('\\\\', '/');\n    }\n\n    /// <summary>\n    /// Get a data: URI for the image attachment.\n    /// </summary>\n    /// <remarks>\n    /// Encodes the image attachment into a string suitable for setting as a src= attribute value in\n    /// an img tag.\n    /// </remarks>\n    /// <returns>The data: URI.</returns>\n    /// <param name=\"image\">The image attachment.</param>\n    string GetDataUri (MimePart image)\n    {\n        using (var memory = new MemoryStream ()) {\n            image.Content.DecodeTo (memory);\n            var buffer = memory.GetBuffer ();\n            var length = (int) memory.Length;\n            var base64 = Convert.ToBase64String (buffer, 0, length);\n\n            return string.Format (\"data:{0};base64,{1}\", image.ContentType.MimeType, base64);\n        }\n    }\n\n    // Replaces <img src=...> urls that refer to images embedded within the message with\n    // \"file://\" urls that the browser control will actually be able to load.\n    void HtmlTagCallback (HtmlTagContext ctx, HtmlWriter htmlWriter)\n    {\n        if (ctx.TagId == HtmlTagId.Meta && !ctx.IsEndTag) {\n            bool isContentType = false;\n\n            ctx.WriteTag (htmlWriter, false);\n\n            // replace charsets with \"utf-8\" since our output will be in utf-8 (and not whatever the original charset was)\n            foreach (var attribute in ctx.Attributes) {\n                if (attribute.Id == HtmlAttributeId.Charset) {\n                    htmlWriter.WriteAttributeName (attribute.Name);\n                    htmlWriter.WriteAttributeValue (\"utf-8\");\n                } else if (isContentType && attribute.Id == HtmlAttributeId.Content) {\n                    htmlWriter.WriteAttributeName (attribute.Name);\n                    htmlWriter.WriteAttributeValue (\"text/html; charset=utf-8\");\n                } else {\n                    if (attribute.Id == HtmlAttributeId.HttpEquiv && attribute.Value != null\n                        && attribute.Value.Equals (\"Content-Type\", StringComparison.OrdinalIgnoreCase))\n                        isContentType = true;\n\n                    htmlWriter.WriteAttribute (attribute);\n                }\n            }\n        } else if (ctx.TagId == HtmlTagId.Image && !ctx.IsEndTag && stack.Count > 0) {\n            ctx.WriteTag (htmlWriter, false);\n\n            // replace the src attribute with a file:// URL\n            foreach (var attribute in ctx.Attributes) {\n                if (attribute.Id == HtmlAttributeId.Src) {\n                    if (!TryGetImage (attribute.Value, out var image)) {\n                        htmlWriter.WriteAttribute (attribute);\n                        continue;\n                    }\n\n                    // Note: you can either use a \"file://\" URI or you can use a\n                    // \"data:\" URI, the choice is yours.\n                    var uri = GetFileUri (image, attribute.Value);\n                    //var uri = GetDataUri (image);\n\n                    htmlWriter.WriteAttributeName (attribute.Name);\n                    htmlWriter.WriteAttributeValue (uri);\n                } else {\n                    htmlWriter.WriteAttribute (attribute);\n                }\n            }\n        } else if (ctx.TagId == HtmlTagId.Body && !ctx.IsEndTag) {\n            ctx.WriteTag (htmlWriter, false);\n\n            // add and/or replace oncontextmenu=\"return false;\"\n            foreach (var attribute in ctx.Attributes) {\n                if (attribute.Name.Equals (\"oncontextmenu\", StringComparison.OrdinalIgnoreCase))\n                   continue;\n\n                htmlWriter.WriteAttribute (attribute);\n            }\n\n            htmlWriter.WriteAttribute (\"oncontextmenu\", \"return false;\");\n        } else {\n            // pass the tag through to the output\n            ctx.WriteTag (htmlWriter, true);\n        }\n    }\n\n    protected override void VisitTextPart (TextPart entity)\n    {\n        TextConverter converter;\n\n        if (body != null) {\n            // since we've already found the body, treat this as an attachment\n            attachments.Add (entity);\n            return;\n        }\n\n        if (entity.IsHtml) {\n            converter = new HtmlToHtml {\n                HtmlTagCallback = HtmlTagCallback\n            };\n        } else if (entity.IsFlowed) {\n            var flowed = new FlowedToHtml ();\n            string delsp;\n\n            if (entity.ContentType.Parameters.TryGetValue (\"delsp\", out delsp))\n                flowed.DeleteSpace = delsp.Equals (\"yes\", StringComparison.OrdinalIgnoreCase);\n\n            converter = flowed;\n        } else {\n            converter = new TextToHtml ();\n        }\n\n        body = converter.Convert (entity.Text);\n    }\n\n    protected override void VisitTnefPart (TnefPart entity)\n    {\n        // extract any attachments in the MS-TNEF part\n        attachments.AddRange (entity.ExtractAttachments ());\n    }\n\n    protected override void VisitMessagePart (MessagePart entity)\n    {\n        // treat message/rfc822 parts as attachments\n        attachments.Add (entity);\n    }\n\n    protected override void VisitMimePart (MimePart entity)\n    {\n        // realistically, if we've gotten this far, then we can treat this as an attachment\n        // even if the IsAttachment property is false.\n        attachments.Add (entity);\n    }\n}\n```\n\nAnd the way you'd use this visitor might look something like this:\n\n```csharp\nvoid Render (MimeMessage message)\n{\n    var tmpDir = Path.Combine (Path.GetTempPath (), message.MessageId);\n    var visitor = new HtmlPreviewVisitor (tmpDir);\n\n    Directory.CreateDirectory (tmpDir);\n\n    message.Accept (visitor);\n\n    DisplayHtml (visitor.HtmlBody);\n    DisplayAttachments (visitor.Attachments);\n}\n```\n\nOnce you've rendered the message using the above technique, you'll have a list of attachments that\nwere not used, even if they did not match the simplistic criteria used by the `MimeMessage.Attachments`\nproperty.\n\n### <a id=\"serialize-message\">Q: Why doesn't the `MimeMessage` class implement `ISerializable` so that I can serialize a message to disk and read it back later?</a>\n\nThe MimeKit API was designed to use the existing MIME format for serialization. In light of this, the ability\nto use the .NET serialization API and format did not make much sense to support.\n\nYou can easily serialize a [MimeMessage](https://www.mimekit.net/docs/html/T_MimeKit_MimeMessage.htm) to a stream using the\n[WriteTo](https://www.mimekit.net/docs/html/Overload_MimeKit_MimeMessage_WriteTo.htm) methods.\n\nFor more information on this topic, see the following other two topics:\n\n* [How can I parse messages?](#load-messages)\n* [How can I save messages?](#save-messages)\n\n### <a id=\"load-messages\">Q: How can I parse messages?</a>\n\nOne of the more common operations that MimeKit is meant for is parsing email messages from arbitrary streams.\nThere are two ways of accomplishing this task.\n\nThe first way is to use one of the [Load](https://www.mimekit.net/docs/html/Overload_MimeKit_MimeMessage_Load.htm) methods\non `MimeMessage`:\n\n```csharp\n// Load a MimeMessage from a stream\nvar message = MimeMessage.Load (stream);\n```\n\nOr you can load a message from a file path:\n\n```csharp\n// Load a MimeMessage from a file path\nvar message = MimeMessage.Load (\"message.eml\");\n```\n\nThe second way is to use the [MimeParser](https://www.mimekit.net/docs/html/T_MimeKit_MimeParser.htm) class. For the most\npart, using the `MimeParser` directly is not necessary unless you wish to parse a Unix mbox file stream. However, this is\nhow you would do it:\n\n```csharp\n// Load a MimeMessage from a stream\nvar parser = new MimeParser (stream, MimeFormat.Entity);\nvar message = parser.ParseMessage ();\n```\n\nFor Unix mbox file streams, you would use the parser like this:\n\n```csharp\n// Load every message from a Unix mbox\nvar parser = new MimeParser (stream, MimeFormat.Mbox);\nwhile (!parser.IsEndOfStream) {\n    var message = parser.ParseMessage ();\n\n    // do something with the message\n}\n```\n\n### <a id=\"save-messages\">Q: How can I save messages?</a>\n\nOne you've got a [MimeMessage](https://www.mimekit.net/docs/html/T_MimeKit_MimeMessage.htm), you can save\nit to a file using the [WriteTo](https://mimekit.net/docs/html/Overload_MimeKit_MimeMessage_WriteTo.htm) method:\n\n```csharp\nmessage.WriteTo (\"message.eml\");\n```\n\nThe `WriteTo` method also has overloads that allow you to write the message to a `Stream` instead.\n\nBy default, the `WriteTo` method will save the message using DOS line-endings on Windows and Unix\nline-endings on Unix-based systems such as macOS and Linux. You can override this behavior by\npassing a [FormatOptions](https://mimekit.net/docs/html/T_MimeKit_FormatOptions.htm) argument to\nthe method:\n\n```csharp\n// clone the default formatting options\nvar format = FormatOptions.Default.Clone ();\n\n// override the line-endings to be DOS no matter what platform we are on\nformat.NewLineFormat = NewLineFormat.Dos;\n\nmessage.WriteTo (format, \"message.eml\");\n```\n\nNote: While it may seem like you can safely use the `ToString` method to serialize a message,\n***DON'T DO IT!*** This is ***not*** safe! MIME messages cannot be accurately represented as\nstrings due to the fact that each MIME part of the message *may* be encoded in a different\ncharacter set, thus making it impossible to convert the message into a unicode string using a\nsingle charset to do the conversion (which is *exactly* what `ToString` does).\n\n### <a id=\"save-attachments\">Q: How can I save attachments?</a>\n\nIf you've already got a [MimePart](https://www.mimekit.net/docs/html/T_MimeKit_MimePart.htm) that represents\nthe attachment that you'd like to save, here's how you might save it:\n\n```csharp\nusing (var stream = File.Create (fileName))\n    attachment.Content.DecodeTo (stream);\n```\n\nPretty simple, right?\n\nBut what if your attachment is actually a [MessagePart](https://www.mimekit.net/docs/html/T_MimeKit_MessagePart.htm)?\n\nTo save the content of a `message/rfc822` part, you'd use the following code snippet:\n\n```csharp\nusing (var stream = File.Create (fileName))\n    attachment.Message.WriteTo (stream);\n```\n\nIf you are iterating over all of the attachments in a message, you might do something like this:\n\n```csharp\nforeach (var attachment in message.Attachments) {\n    var fileName = attachment.ContentDisposition?.FileName ?? attachment.ContentType.Name;\n\n    using (var stream = File.Create (fileName)) {\n        if (attachment is MessagePart) {\n            var rfc822 = (MessagePart) attachment;\n\n            rfc822.Message.WriteTo (stream);\n        } else {\n            var part = (MimePart) attachment;\n\n            part.Content.DecodeTo (stream);\n        }\n    }\n}\n```\n\n### <a id=\"address-headers\">Q: How can I get the email addresses in the From, To, and Cc headers?</a>\n\nThe [From](https://www.mimekit.net/docs/html/P_MimeKit_MimeMessage_From.htm),\n[To](https://www.mimekit.net/docs/html/P_MimeKit_MimeMessage_To.htm), and\n[Cc](https://www.mimekit.net/docs/html/P_MimeKit_MimeMessage_Cc.htm) properties of a\n[MimeMessage](https://www.mimekit.net/docs/html/T_MimeKit_MimeMessage.htm) are all of type\n[InternetAddressList](https://www.mimekit.net/docs/html/T_MimeKit_InternetAddressList.htm). An\n`InternetAddressList` is a list of\n[InternetAddress](https://www.mimekit.net/docs/html/T_MimeKit_InternetAddress.htm) items. This is\nwhere most people start to get lost because an `InternetAddress` is an abstract class that only\nreally has a [Name](https://www.mimekit.net/docs/html/P_MimeKit_InternetAddress_Name.htm) property.\n\nAs you've probably already discovered, the `Name` property contains the name of the person\n(if available), but what you want is his or her email address, not their name.\n\nTo get the email address, you'll need to figure out what subclass of address each `InternetAddress`\nreally is. There are 2 subclasses of `InternetAddress`:\n[GroupAddress](https://www.mimekit.net/docs/html/T_MimeKit_GroupAddress.htm) and\n[MailboxAddress](https://www.mimekit.net/docs/html/T_MimeKit_MailboxAddress.htm).\n\nA `GroupAddress` is a named group of more `InternetAddress` items that are contained within the\n[Members](https://www.mimekit.net/docs/html/P_MimeKit_GroupAddress_Members.htm) property. To get\nan idea of what a group address represents, consider the following examples:\n\n```\nTo: My Friends: Joey <joey@friends.com>, Monica <monica@friends.com>, \"Mrs. Chanandler Bong\"\n    <chandler@friends.com>, Ross <ross@friends.com>, Rachel <rachel@friends.com>;\n```\n\nIn the above example, the `To` header's `InternetAddressList` will contain only 1 item which will be a\n`GroupAddress` with a `Name` value of `My Friends`. The `Members` property of the `GroupAddress` will\ncontain 5 more `InternetAddress` items (which will all be instances of `MailboxAddress`).\n\nThe above example, however, is not very likely to ever be seen in messages you deal with. A far more\ncommon example would be the one below:\n\n```\nTo: undisclosed-recipients:;\n```\n\nMost of the time, the `From`, `To`, and `Cc` headers will only contain mailbox addresses. As you will\nnotice, a `MailboxAddress` has an\n[Address](https://www.mimekit.net/docs/html/P_MimeKit_MailboxAddress_Address.htm) property which will\ncontain the email address of the mailbox. In the following example, the `Address` property will\ncontain the value `john@smith.com`:\n\n```\nTo: John Smith <john@smith.com>\n```\n\nIf you only care about getting a flattened list of the mailbox addresses in a `From`, `To`, or `Cc`\nheader, you can do something like this:\n\n```csharp\nforeach (var mailbox in message.To.Mailboxes)\n    Console.WriteLine (\"{0}'s email address is {1}\", mailbox.Name, mailbox.Address);\n```\n\n### <a id=\"untitled-attachments\">Q: Why do attachments with unicode filenames appear as \"ATT0####.dat\" in Outlook?</a>\n\nAn attachment filename is stored as a MIME parameter on the `Content-Disposition` header. Unfortunately,\nthe original MIME specifications did not specify a method for encoding non-ASCII filenames. In 1997,\n[rfc2184](https://tools.ietf.org/html/rfc2184) (later updated by [rfc2231](https://tools.ietf.org/html/rfc2231))\nwas published which specified an encoding mechanism to use for encoding them. Since there was a window in\ntime where the MIME specifications did not define a way to encode them, some mail client developers decided\nto use the mechanism described by [rfc2047](https://tools.ietf.org/html/rfc2047) which was meant for\nencoding non-ASCII text in headers. While this may at first seem logical, the problem with this approach\nwas that rfc2047 `encoded-word` tokens are not allowed to be in quotes (as well as some other issues) and\nso another, more appropriate, encoding mechanism was needed.\n\nOutlook is one of those mail clients which decided to encode filenames using the mechanism described in\nrfc2047 and until Outlook 2007, did not support filenames encoded using the mechanism defined in rfc2231.\n\nAs of MimeKit v1.2.18, it is possible to configure MimeKit to use the rfc2047 encoding mechanism for\nfilenames (and other `Content-Disposition` and `Content-Type` parameter values) by setting the encoding\nmethod on each individual [Parameter](https://www.mimekit.net/docs/html/T_MimeKit_Parameter.htm):\n\n```csharp\nParameter param;\n\nif (attachment.ContentDisposition.Parameters.TryGetValue (\"filename\", out param))\n    param.EncodingMethod = ParameterEncodingMethod.Rfc2047;\n```\n\nOr:\n\n```csharp\nforeach (var param in attachment.ContentDisposition.Parameters) {\n    param.EncodingMethod = ParameterEncodingMethod.Rfc2047;\n}\n```\n\n### <a id=\"decrypt-inline-pgp\">Q: How can I decrypt PGP messages that are embedded in the main message text?</a>\n\nSome PGP-enabled mail clients, such as Thunderbird, embed encrypted PGP blurbs within the `text/plain` body\nof the message rather than using the PGP/MIME format that MimeKit prefers.\n\nThese messages often look something like this:\n\n```text\nReturn-Path: <pgp-enthusiast@example.com>\nReceived: from [127.0.0.1] (hostname.example.com. [201.95.8.17])\n    by mx.google.com with ESMTPSA id l67sm26628445yha.8.2014.04.27.13.49.44\n    for <pgp-enthusiast@example.com>\n    (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\n    Sun, 27 Apr 2014 13:49:44 -0700 (PDT)\nMessage-ID: <535D6D67.8020803@example.com>\nDate: Sun, 27 Apr 2014 17:49:43 -0300\nFrom: Die-Hard PGP Fan <pgp-enthusiast@example.com>\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:24.0) Gecko/20100101 Thunderbird/24.4.0\nMIME-Version: 1.0\nTo: undisclosed-recipients:;\nSubject: Test of inline encrypted PGP blocks\nX-Enigmail-Version: 1.6\nContent-Type: text/plain; charset=ISO-8859-1\nContent-Transfer-Encoding: 8bit\nX-Antivirus: avast! (VPS 140427-1, 27/04/2014), Outbound message\nX-Antivirus-Status: Clean\n\n-----BEGIN PGP MESSAGE-----\nCharset: ISO-8859-1\nVersion: GnuPG v2.0.22 (MingW32)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\nSGFoISBJIGZvb2xlZCB5b3UsIHRoaXMgdGV4dCBpc24ndCBhY3R1YWxseSBlbmNy\neXB0ZWQgd2l0aCBQR1AsCml0J3MgYWN0dWFsbHkgb25seSBiYXNlNjQgZW5jb2Rl\nZCEKCkknbSBqdXN0IHVzaW5nIHRoaXMgYXMgYW4gZXhhbXBsZSwgdGhvdWdoLCBz\nbyBpdCBkb2Vzbid0IHJlYWxseSBtYXR0ZXIuCgpGb3IgdGhlIHNha2Ugb2YgYXJn\ndW1lbnQsIHdlJ2xsIHByZXRlbmQgdGhhdCB0aGlzIGlzIGFjdHVhbGx5IGFuIGVu\nY3J5cHRlZApibHVyYi4gTW1ta2F5PyBUaGFua3MuCg==\n-----END PGP MESSAGE-----\n```\n\nTo deal with these kinds of messages, I've added a method to OpenPgpContext called `GetDecryptedStream` which\ncan be used to get the raw decrypted stream.\n\nThere are actually 2 variants of this method:\n\n```csharp\npublic Stream GetDecryptedStream (Stream encryptedData, out DigitalSignatureCollection signatures)\n```\n\nand\n\n```csharp\npublic Stream GetDecryptedStream (Stream encryptedData)\n```\n\nThe first variant is useful in cases where the encrypted PGP blurb is also digitally signed, allowing you to get\nyour hands on the list of digital signatures in order for you to verify each of them.\n\nTo decrypt the content of the message, you'll want to locate the `TextPart` (in this case, it'll just be\n`message.Body`) and then do this:\n\n```csharp\nstatic Stream DecryptEmbeddedPgp (TextPart text)\n{\n    using (var memory = new MemoryStream ()) {\n        text.Content.DecodeTo (memory);\n        memory.Position = 0;\n\n        using (var ctx = new MyGnuPGContext ()) {\n            return ctx.GetDecryptedStream (memory);\n        }\n    }\n}\n```\n\nWhat you do with that decrypted stream is up to you. It's up to you to figure out what the decrypted content is\n(is it text? a jpeg image? a video?) and how to display it to the user.\n\n### <a id=\"reply-message\">Q: How can I reply to a message?</a>\n\nReplying to a message is fairly simple. For the most part, you'd just create the reply message\nthe same way you'd create any other message. There are only a few slight differences:\n\n1. In the reply message, you'll want to prefix the `Subject` header with `\"Re: \"` if the prefix\n   doesn't already exist in the message you are replying to (in other words, if you are replying\n   to a message with a `Subject` of `\"Re: party tomorrow night!\"`, you would not prefix it with\n   another `\"Re: \"`).\n2. You will want to set the reply message's `In-Reply-To` header to the value of the\n   `Message-Id` header in the original message.\n3. You will want to copy the original message's `References` header into the reply message's\n   `References` header and then append the original message's `Message-Id` header.\n4. You will probably want to \"quote\" the original message's text in the reply.\n5. If you are generating an automatic reply, you should also follow [RFC3834](https://www.rfc-editor.org/rfc/rfc3834)\n   and set the `Auto-Submitted` value to `auto-replied`.\n\nIf this logic were to be expressed in code, it might look something like this:\n\n```csharp\npublic static MimeMessage Reply (MimeMessage message, MailboxAddress from, bool replyToAll)\n{\n    var reply = new MimeMessage ();\n\n    reply.From.Add (from);\n\n    // reply to the sender of the message\n    if (message.ReplyTo.Count > 0) {\n        reply.To.AddRange (message.ReplyTo);\n    } else if (message.From.Count > 0) {\n        reply.To.AddRange (message.From);\n    } else if (message.Sender != null) {\n        reply.To.Add (message.Sender);\n    }\n\n    if (replyToAll) {\n        // include all of the other original recipients - TODO: remove ourselves from these lists\n        reply.To.AddRange (message.To);\n        reply.Cc.AddRange (message.Cc);\n    }\n\n    // set the reply subject\n    if (!message.Subject?.StartsWith (\"Re:\", StringComparison.OrdinalIgnoreCase))\n        reply.Subject = \"Re: \" + (message.Subject ?? string.Empty);\n    else\n        reply.Subject = message.Subject;\n\n    // construct the In-Reply-To and References headers\n    if (!string.IsNullOrEmpty (message.MessageId)) {\n        reply.InReplyTo = message.MessageId;\n        foreach (var id in message.References)\n            reply.References.Add (id);\n        reply.References.Add (message.MessageId);\n    }\n\n    // if this is an automatic reply, be sure to specify this using the Auto-Submitted header in order to avoid (infinite) mail loops\n    reply.Headers.Add (HeaderId.AutoSubmitted, \"auto-replied\");\n\n    // quote the original message text\n    using (var quoted = new StringWriter ()) {\n        var sender = message.Sender ?? message.From.Mailboxes.FirstOrDefault ();\n\n        quoted.WriteLine (\"On {0}, {1} wrote:\", message.Date.ToString (\"f\"), !string.IsNullOrEmpty (sender.Name) ? sender.Name : sender.Address);\n        using (var reader = new StringReader (message.TextBody)) {\n            string line;\n\n            while ((line = reader.ReadLine ()) != null) {\n                quoted.Write (\"> \");\n                quoted.WriteLine (line);\n            }\n        }\n\n        reply.Body = new TextPart (\"plain\") {\n            Text = quoted.ToString ()\n        };\n    }\n\n    return reply;\n}\n```\n\nBut what if you wanted to reply to a message and quote the HTML formatting of the original message\nbody (assuming it has an HTML body) while still including the embedded images?\n\nThis gets a bit more complicated, but it's still doable...\n\nThe first thing we'd need to do is implement our own\n[MimeVisitor](https://www.mimekit.net/docs/html/T_MimeKit_MimeVisitor.htm) to handle this:\n\n```csharp\npublic class ReplyVisitor : MimeVisitor\n{\n    readonly Stack<Multipart> stack = new Stack<Multipart> ();\n    MimeMessage original, reply;\n    MailboxAddress from;\n    bool replyToAll;\n    int isRelated;\n\n    /// <summary>\n    /// Creates a new ReplyVisitor.\n    /// </summary>\n    public ReplyVisitor (MailboxAddress from, bool replyToAll)\n    {\n        this.replyToAll = replyToAll;\n        this.from = from;\n    }\n\n    /// <summary>\n    /// Gets the reply.\n    /// </summary>\n    /// <value>The reply.</value>\n    public MimeMessage Reply {\n        get { return reply; }\n    }\n\n    void Push (MimeEntity entity)\n    {\n        var multipart = entity as Multipart;\n\n        if (reply.Body == null) {\n            reply.Body = entity;\n        } else {\n            var parent = stack.Peek ();\n            parent.Add (entity);\n        }\n\n        if (multipart != null)\n            stack.Push (multipart);\n    }\n\n    void Pop ()\n    {\n        stack.Pop ();\n    }\n\n    static string GetOnDateSenderWrote (MimeMessage message)\n    {\n        var sender = message.Sender != null ? message.Sender : message.From.Mailboxes.FirstOrDefault ();\n        var name = sender != null ? (!string.IsNullOrEmpty (sender.Name) ? sender.Name : sender.Address) : \"an unknown sender\";\n\n        return string.Format (\"On {0}, {1} wrote:\", message.Date.ToString (\"f\"), name);\n    }\n\n    /// <summary>\n    /// Visit the specified message.\n    /// </summary>\n    /// <param name=\"message\">The message.</param>\n    public override void Visit (MimeMessage message)\n    {\n        reply = new MimeMessage ();\n        original = message;\n\n        stack.Clear ();\n\n        reply.From.Add (from.Clone ());\n\n        // reply to the sender of the message\n        if (message.ReplyTo.Count > 0) {\n            reply.To.AddRange (message.ReplyTo);\n        } else if (message.From.Count > 0) {\n            reply.To.AddRange (message.From);\n        } else if (message.Sender != null) {\n            reply.To.Add (message.Sender);\n        }\n\n        if (replyToAll) {\n            // include all of the other original recipients - TODO: remove ourselves from these lists\n            reply.To.AddRange (message.To);\n            reply.Cc.AddRange (message.Cc);\n        }\n\n        // set the reply subject\n        if (!message.Subject?.StartsWith (\"Re:\", StringComparison.OrdinalIgnoreCase))\n            reply.Subject = \"Re: \" + (message.Subject ?? string.Empty);\n        else\n            reply.Subject = message.Subject;\n\n        // construct the In-Reply-To and References headers\n        if (!string.IsNullOrEmpty (message.MessageId)) {\n            reply.InReplyTo = message.MessageId;\n            foreach (var id in message.References)\n                reply.References.Add (id);\n            reply.References.Add (message.MessageId);\n        }\n\n        base.Visit (message);\n    }\n\n    /// <summary>\n    /// Visit the specified entity.\n    /// </summary>\n    /// <param name=\"entity\">The MIME entity.</param>\n    /// <exception cref=\"System.NotSupportedException\">\n    /// Only Visit(MimeMessage) is supported.\n    /// </exception>\n    public override void Visit (MimeEntity entity)\n    {\n        throw new NotSupportedException ();\n    }\n\n    protected override void VisitMultipartAlternative (MultipartAlternative alternative)\n    {\n        var multipart = new MultipartAlternative ();\n\n        Push (multipart);\n\n        for (int i = 0; i < alternative.Count; i++)\n            alternative[i].Accept (this);\n\n        Pop ();\n    }\n\n    protected override void VisitMultipartRelated (MultipartRelated related)\n    {\n        var multipart = new MultipartRelated ();\n        var root = related.Root;\n\n        Push (multipart);\n\n        root.Accept (this);\n\n        isRelated++;\n        for (int i = 0; i < related.Count; i++) {\n            if (related[i] != root)\n                related[i].Accept (this);\n        }\n        isRelated--;\n\n        Pop ();\n    }\n\n    protected override void VisitMultipart (Multipart multipart)\n    {\n        foreach (var part in multipart) {\n            if (part is MultipartAlternative)\n                part.Accept (this);\n            else if (part is MultipartRelated)\n                part.Accept (this);\n            else if (part is TextPart)\n                part.Accept (this);\n        }\n    }\n\n    void HtmlTagCallback (HtmlTagContext ctx, HtmlWriter htmlWriter)\n    {\n        if (ctx.TagId == HtmlTagId.Body && !ctx.IsEmptyElementTag) {\n            if (ctx.IsEndTag) {\n                // end our opening <blockquote>\n                htmlWriter.WriteEndTag (HtmlTagId.BlockQuote);\n\n                // pass the </body> tag through to the output\n                ctx.WriteTag (htmlWriter, true);\n            } else {\n                // pass the <body> tag through to the output\n                ctx.WriteTag (htmlWriter, true);\n\n                // prepend the HTML reply with \"On {DATE}, {SENDER} wrote:\"\n                htmlWriter.WriteStartTag (HtmlTagId.P);\n                htmlWriter.WriteText (GetOnDateSenderWrote (original));\n                htmlWriter.WriteEndTag (HtmlTagId.P);\n\n                // Wrap the original content in a <blockquote>\n                htmlWriter.WriteStartTag (HtmlTagId.BlockQuote);\n                htmlWriter.WriteAttribute (HtmlAttributeId.Style, \"border-left: 1px #ccc solid; margin: 0 0 0 .8ex; padding-left: 1ex;\");\n\n                ctx.InvokeCallbackForEndTag = true;\n            }\n        } else {\n            // pass the tag through to the output\n            ctx.WriteTag (htmlWriter, true);\n        }\n    }\n\n    string QuoteText (string text)\n    {\n        using (var quoted = new StringWriter ()) {\n            quoted.WriteLine (GetOnDateSenderWrote (original));\n\n            using (var reader = new StringReader (text)) {\n                string line;\n\n                while ((line = reader.ReadLine ()) != null) {\n                    quoted.Write (\"> \");\n                    quoted.WriteLine (line);\n                }\n            }\n\n            return quoted.ToString ();\n        }\n    }\n\n    protected override void VisitTextPart (TextPart entity)\n    {\n        string text;\n\n        if (entity.IsHtml) {\n            var converter = new HtmlToHtml {\n                HtmlTagCallback = HtmlTagCallback\n            };\n\n            text = converter.Convert (entity.Text);\n        } else if (entity.IsFlowed) {\n            var converter = new FlowedToText ();\n\n            text = converter.Convert (entity.Text);\n            text = QuoteText (text);\n        } else {\n            // quote the original message text\n            text = QuoteText (entity.Text);\n        }\n\n        var part = new TextPart (entity.ContentType.MediaSubtype.ToLowerInvariant ()) {\n            Text = text\n        };\n\n        Push (part);\n    }\n\n    protected override void VisitMessagePart (MessagePart entity)\n    {\n        // don't descend into message/rfc822 parts\n    }\n\n    protected override void VisitMimePart (MimePart entity)\n    {\n        if (isRelated > 0 || !entity.IsAttachment) {\n            var parent = stack.Peek ();\n            parent.Add (entity);\n        }\n    }\n}\n```\n\n```csharp\npublic static MimeMessage Reply (MimeMessage message, MailboxAddress from, bool replyToAll)\n{\n    var visitor = new ReplyVisitor (from, replyToAll);\n\n    visitor.Visit (message);\n\n    return visitor.Reply;\n}\n```\n\n### <a id=\"forward-message\">Q: How can I forward a message?</a>\n\nThere are 2 common ways of forwarding a message: attaching the original message as an attachment and inlining\nthe message body much like replying typically does. Which method you choose is up to you.\n\nTo forward a message by attaching it as an attachment, you would do something like this:\n\n```csharp\npublic static MimeMessage Forward (MimeMessage original, MailboxAddress from, IEnumerable<InternetAddress> to)\n{\n    var message = new MimeMessage ();\n    message.From.Add (from);\n    message.To.AddRange (to);\n\n    // set the forwarded subject\n    if (!original.Subject?.StartsWith (\"FW:\", StringComparison.OrdinalIgnoreCase))\n        message.Subject = \"FW: \" + (original.Subject ?? string.Empty);\n    else\n        message.Subject = original.Subject;\n\n    // create the main textual body of the message\n    var text = new TextPart (\"plain\") { Text = \"Here's the forwarded message:\" };\n\n    // create the message/rfc822 attachment for the original message\n    var rfc822 = new MessagePart { Message = original };\n    \n    // create a multipart/mixed container for the text body and the forwarded message\n    var multipart = new Multipart (\"mixed\");\n    multipart.Add (text);\n    multipart.Add (rfc822);\n\n    // set the multipart as the body of the message\n    message.Body = multipart;\n\n    return message;\n}\n```\n\nTo forward a message by inlining the original message's text content, you can do something like this:\n\n```csharp\npublic static MimeMessage Forward (MimeMessage original, MailboxAddress from, IEnumerable<InternetAddress> to)\n{\n    var message = new MimeMessage ();\n    message.From.Add (from);\n    message.To.AddRange (to);\n\n    // set the forwarded subject\n    if (!original.Subject?.StartsWith (\"FW:\", StringComparison.OrdinalIgnoreCase))\n        message.Subject = \"FW: \" + (original.Subject ?? string.Empty);\n    else\n        message.Subject = original.Subject;\n\n    // quote the original message text\n    using (var text = new StringWriter ()) {\n        text.WriteLine ();\n        text.WriteLine (\"-------- Original Message --------\");\n        text.WriteLine (\"Subject: {0}\", original.Subject ?? string.Empty);\n        text.WriteLine (\"Date: {0}\", DateUtils.FormatDate (original.Date));\n        text.WriteLine (\"From: {0}\", original.From);\n        text.WriteLine (\"To: {0}\", original.To);\n        text.WriteLine ();\n\n        text.Write (original.TextBody);\n\n        message.Body = new TextPart (\"plain\") {\n            Text = text.ToString ()\n        };\n    }\n\n    return message;\n}\n```\n\nKeep in mind that not all messages will have a `TextBody` available, so you'll have to find a way to handle those cases.\n\n### <a id=\"garbled-text\">Q: Why does text show up garbled in my ASP.NET Core / .NET Core / .NET 5 app?</a>\n\n.NET Core (and ASP.NET Core by extension) and .NET 5 only provide the Unicode encodings, ASCII and ISO-8859-1 by default.\nOther text encodings are not available to your application unless your application\n[registers](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.registerprovider?view=net-5.0) the encoding\nprovider that provides all of the additional encodings.\n\nFirst, add a package reference for the [System.Text.Encoding.CodePages](https://www.nuget.org/packages/System.Text.Encoding.CodePages)\nnuget package to your project and then register the additional text encodings using the following code snippet:\n\n```csharp\nSystem.Text.Encoding.RegisterProvider (System.Text.CodePagesEncodingProvider.Instance);\n```\n\nNote: The above code snippet should be safe to call in .NET Framework versions >= 4.6 as well.\n\n## ImapClient\n\n### <a id=\"imap-unread-count\">Q: How can I get the number of unread messages in a folder?</a>\n\nIf the folder is open (via [Open](https://www.mimekit.net/docs/html/Overload_MailKit_Net_Imap_ImapFolder_Open.htm)),\nthen the [ImapFolder.Unread](https://www.mimekit.net/docs/html/P_MailKit_MailFolder_Unread.htm) property will be kept\nup to date (at least as-of the latest command issued to the server).\n\nIf the folder *isn't* open, then you will need to query the unread state of the folder using the\n[Status](https://www.mimekit.net/docs/html/M_MailKit_Net_Imap_ImapFolder_Status.htm) method with the\nappropriate [StatusItems](https://www.mimekit.net/docs/html/T_MailKit_StatusItems.htm) flag(s).\n\nFor example, to get the total *and* unread counts, you can do this:\n\n```csharp\nfolder.Status (StatusItems.Count | StatusItems.Unread);\n\nint total = folder.Count;\nint unread = folder.Unread;\n```\n\n### <a id=\"imap-search-date-range\">Q: How can I search for messages delivered between two dates?</a>\n\nThe obvious solution is:\n\n```csharp\nvar query = SearchQuery.DeliveredAfter (dateRange.BeginDate)\n    .And (SearchQuery.DeliveredBefore (dateRange.EndDate));\nvar results = folder.Search (query);\n```\n\nHowever, it has been reported to me that this doesn't work reliably depending on the IMAP server implementation.\n\nIf you find that this query doesn't get the expected results for your IMAP server, here's another solution that\nshould always work:\n\n```csharp\nvar query = SearchQuery.Not (SearchQuery.DeliveredBefore (dateRange.BeginDate)\n    .Or (SearchQuery.DeliveredAfter (dateRange.EndDate)));\nvar results = folder.Search (query);\n```\n\n### <a id=\"imap-client-busy\">Q: What does \"The ImapClient is currently busy processing a command.\" mean?</a>\n\nIf you get an InvalidOperationException with the message, \"The ImapClient is currently busy processing a\ncommand.\", it means that you are trying to use the\n[ImapClient](https://www.mimekit.net/docs/html/T_MailKit_Net_Imap_ImapClient.htm) and/or one of its\n[ImapFolder](https://www.mimekit.net/docs/html/T_MailKit_Net_Imap_ImapFolder.htm)s from multiple\nthreads.\n\nTo avoid this situation, you'll need to lock the `SyncRoot` property of the `ImapClient` and `ImapFolder`\nobjects when performing operations on them.\n\nFor example:\n\n```csharp\nlock (client.SyncRoot) {\n    client.NoOp ();\n}\n```\n\nNote: Locking the `SyncRoot` is only necessary when using the synchronous API's. All `Async()` method variants\nalready do this locking for you.\n\n### <a id=\"imap-folder-not-open-exception\">Q: Why do I get InvalidOperationException: \"The folder is not currently open.\"?</a>\n\nIf you get this exception, it's probably because you thought you had to open the destination folder that you\npassed as an argument to one of the\n[CopyTo](https://www.mimekit.net/docs/html/Overload_MailKit_MailFolder_CopyTo.htm) or\n[MoveTo](https://www.mimekit.net/docs/html/Overload_MailKit_MailFolder_MoveTo.htm) methods. When you opened\nthat destination folder, you also inadvertently closed the source folder which is why you are getting this\nexception.\n\nThe IMAP server can only have a single folder open at a time. Whenever you open a folder, you automatically\nclose the previously opened folder.\n\nWhen copying or moving messages from one folder to another, you only need to have the source folder open.\n\n### <a id=\"imap-move-does-not-move\">Q: Why doesn't ImapFolder.MoveTo() move the message out of the source folder?</a>\n\nIf you look at the source code for the `ImapFolder.MoveTo()` method, what you'll notice is that\nthere are several code paths depending on the features that the IMAP server supports.\n\nIf the IMAP server supports the `MOVE` extension, then MailKit's `MoveTo()` method will use the\n`MOVE` command. I suspect that your server does not support the `MOVE` command or you probably\nwouldn't be seeing what you are seeing.\n\nWhen the IMAP server does not support the `MOVE` command, MailKit has to use the `COPY` command to\ncopy the message(s) to the destination folder. Once the `COPY` command has completed, it will then\nmark the messages that you asked it to move for deletion by setting the `\\Deleted` flag on those\nmessages.\n\nIf the server supports the `UIDPLUS` extension, then MailKit will attempt to `EXPUNGE` the subset of\nmessages that it just marked for deletion, however, if the `UIDPLUS` extension is not supported by the\nIMAP server, then it cannot safely expunge just that subset of messages and so it stops there.\n\nMy guess is that your server supports neither `MOVE` nor `UIDPLUS` and that is why clients like Outlook\ncontinue to see the messages in your folder. I believe, however, that Outlook has a setting to show\ndeleted messages with a strikeout (which you probably have disabled).\n\nSo to answer your question more succinctly: After calling `folder.MoveTo (...);`, if you are confident\nthat the messages marked for deletion should be expunged, call `folder.Expunge ();`\n\n### <a id=\"imap-mark-as-read\">Q: How can I mark messages as read for IMAP?</a>\n\nThe way to mark messages as read using the IMAP protocol is to set the `\\Seen` flag on the message(s).\n\nTo do this using MailKit, you will first need to know either the index(es) or the UID(s) of the messages\nthat you would like to set the `\\Seen` flag on. Once you have that information, you will want to call\none of the\n[AddFlags](https://www.mimekit.net/docs/html/Overload_MailKit_MailFolder_AddFlags.htm) methods on the\n`ImapFolder`. For example:\n\n```csharp\nfolder.AddFlags (uids, MessageFlags.Seen, true);\n```\n\nTo mark messages as unread, you would *remove* the `\\Seen` flag, like so:\n\n```csharp\nfolder.RemoveFlags (uids, MessageFlags.Seen, true);\n```\n\n### <a id=\"imap-folder-resync\">Q: How can I re-synchronize the cache for an IMAP folder?</a>\n\nAssuming your IMAP server does not support the `QRESYNC` extension (which simplifies this procedure a ton),\nhere is some simple code to illustrate how to go about re-synchronizing your cache with the remote IMAP\nserver.\n\n```csharp\n/// <summary>\n/// Just a simple class to represent the cached information about a message.\n/// </summary>\nclass CachedMessageInfo\n{\n    public UniqueId UniqueId;\n    public MessageFlags Flags;\n    public HashSet<string> Keywords;\n    public Envelope Envelope;\n    public BodyPart Body;\n}\n\n/// <summary>\n/// Resynchronize the cache with the remote IMAP folder.\n/// </summary>\n/// <param name=\"folder\">The IMAP folder.</param>\n/// <param name=\"cache\">The local cache of message metadata.</param>\n/// <param name=\"cachedUidValidity\">The cached UIDVALIDITY value of the IMAP folder from a previous session.</param>\nstatic void ResyncFolder (ImapFolder folder, List<CachedMessageInfo> cache, ref uint cachedUidValidity)\n{\n    IList<IMessageSummary> summaries;\n\n    // Step 1: Open the folder.\n\n    // Note: we only need read-only access to update our cache, but depending on\n    // what you plan to do with the folder after resynchronizing, you may want\n    // top open the folder in read-write mode instead.\n    folder.Open (FolderAccess.ReadOnly);\n\n    if (cache.Count > 0) {\n        if (folder.UidValidity == cachedUidValidity) {\n            // Step 2: Remove messages from our cache that no longer exist on the server.\n\n            // get the full list of UIDs on the server...\n            var all = folder.Search (SearchQuery.All);\n\n            // remove any messages from our cache that no longer exist...\n            for (int i = 0; i < cache.Count; i++) {\n                if (!all.Contains (cache[i].UniqueId)) {\n                    cache.RemoveAt (i);\n                    i--;\n                }\n            }\n\n            // Step 3: Sync any flag changes for our cached messages.\n\n            // get a list of known uids... astute observers will note that an easy\n            // optimization to make here would be to merge this loop with the above\n            // loop.\n            var known = new UniqueIdSet (SortOrder.Ascending);\n            for (int i = 0; i < cache.Count; i++)\n                known.Add (cache[i].UniqueId);\n\n            // fetch the flags for our known messages...\n            summaries = folder.Fetch (known, MessageSummaryItems.Flags);\n            for (int i = 0; i < summaries.Count; i++) {\n                // Note: the indexes should match up with our cache, but it wouldn't\n                // hurt to add error checking to make sure. I'm not bothering to here\n                // for simplicity reasons.\n                cache[i].Flags = summaries[i].Flags.Value;\n                cache[i].Keywords = summaries[i].Keywords;\n            }\n        } else {\n            // The UIDVALIDITY of the folder has changed. This means that our entire\n            // cache is obsolete. We need to clear our cache and start from scratch.\n            cachedUidValidity = folder.UidValidity;\n            cache.Clear ();\n        }\n    } else {\n        // We have nothing cached, so just start from scratch.\n        cachedUidValidity = folder.UidValidity;\n    }\n\n    // Step 4: Fetch the messages we don't already know about and add them to our cache.\n\n    summaries = folder.Fetch (cache.Count, -1, MessageSummaryItems.UniqueId | MessageSummaryItems.Flags | MessageSummaryItems.Envelope | MessageSummaryItems.BodyStructure);\n    for (int i = 0; i < summaries.Count; i++) {\n        cache.Add (new CachedMessageInfo {\n            UniqueId = summaries[i].UniqueId,\n            Flags = summaries[i].Flags.Value,\n            Keywords = summaries[i].Keywords,\n            Envelope = summaries[i].Envelope,\n            Body = summaries[i].Body\n        });\n    }\n\n    // Tada! Now we are resynchronized with the server!\n}\n```\n\n### <a href=\"office365-shared-mailboxes\">Q: How can I login using a shared mailbox in Office365?</a>\n\n```csharp\nvar result = await GetPublicClientOAuth2CredentialsAsync (\"IMAP\", \"sharedMailboxName@custom-domain.com\");\n\n// Note: We always use result.Account.Username instead of `Username` because the user may have selected an alternative account.\nvar oauth2 = new SaslMechanismOAuth2 (result.Account.Username, result.AccessToken);\n\nusing (var client = new ImapClient ()) {\n    await client.ConnectAsync (\"outlook.office365.com\", 993, SecureSocketOptions.SslOnConnect);\n    await client.AuthenticateAsync (oauth2);\n\n    // ...\n\n    await client.DisconnectAsync (true);\n}\n```\n\nNotes:\n\n1. The `GetPublicClientOAuth2CredentialsAsync()` method used in this example code snippet can be found in the\n[ExchangeOAuth2.md](ExchangeOAuth2.md#desktop-and-mobile-applications) documentation.\n2. Some users have reported that they need to use `\"username@custom-domain.com\\\\sharedMailboxName\"` as their\nusername instead of `\"sharedMailboxName@custom-domain.com\"`.\n\n## SmtpClient\n\n### <a id=\"smtp-sent-folder\">Q: Why doesn't the message show up in the \"Sent Mail\" folder after sending it?</a>\n\nIt seems to be a common misunderstanding that messages sent via SMTP will magically show up in the account's \"Sent Mail\" folder.\n\nIn order for the message to show up in the \"Sent Mail\" folder, you will need to append the message to the \"Sent Mail\" folder\nyourself because the SMTP protocol does not support doing this automatically.\n\nIf the \"Sent Mail\" folder is a local mbox folder, you'll need to append it like this:\n\n```csharp\nusing (var mbox = File.Open (\"C:\\\\path\\\\to\\\\Sent Mail.mbox\", FileMode.Append, FileAccess.Write)) {\n    var marker = string.Format (\"From MAILER-DAEMON {0}{1}\", DateTime.Now.ToString (CultureInfo.InvariantCulture, \"ddd MMM d HH:mm:ss yyyy\"), Environment.NewLine);\n    var bytes = Encoding.ASCII.GetBytes (marker);\n    \n    // Write the mbox marker bytes.\n    mbox.Write (bytes, 0, bytes.Length);\n    \n    // Write the message, making sure to escape any line that looks like an mbox From-marker.\n    using (var filtered = new FilteredStream (stream)) {\n        filtered.Add (new MboxFromMarker ());\n        message.WriteTo (filtered);\n        filtered.Flush ();\n    }\n    \n    mbox.Flush ();\n}\n```\n\nIf the \"Sent Mail\" folder exists on an IMAP server, you would need to do something more like this:\n\n```csharp\nusing (var client = new ImapClient ()) {\n    client.Connect (\"imap.server.com\", 993, SecureSocketOptions.SslOnConnect);\n    client.Authenticate (\"username\", \"password\");\n    \n    IMailFolder sentMail;\n    \n    if (client.Capabilities.HasFlag (ImapCapabilities.SpecialUse)) {\n        sentMail = client.GetFolder (SpecialFolder.Sent);\n    } else {\n        var personal = client.GetFolder (client.PersonalNamespaces[0]);\n        \n        // Note: This assumes that the \"Sent Mail\" folder lives at the root of the folder hierarchy\n        // and is named \"Sent Mail\" as opposed to \"Sent\" or \"Sent Items\" or any other variation.\n        sentMail = personal.GetSubfolder (\"Sent Mail\");\n    }\n    \n    sentMail.Append (message, MessageFlags.Seen);\n    \n    client.Disconnect (true);\n}\n```\n\n### <a id=\"smtp-specified-pickup-directory\">Q: How can I send email to a SpecifiedPickupDirectory?</a>\n\nBased on Microsoft's [referencesource](https://github.com/Microsoft/referencesource/blob/master/System/net/System/Net/mail/SmtpClient.cs#L401),\nwhen `SmtpDeliveryMethod.SpecifiedPickupDirectory` is used, the `SmtpClient` saves the message to the\nspecified pickup directory location using a randomly generated filename based on\n`Guid.NewGuid ().ToString () + \".eml\"`, so to achieve the same results with MailKit, you could do something\nlike this:\n\n```csharp\npublic static void SaveToPickupDirectory (MimeMessage message, string pickupDirectory)\n{\n    do {\n        // Generate a random file name to save the message to.\n        var path = Path.Combine (pickupDirectory, Guid.NewGuid ().ToString () + \".eml\");\n        Stream stream;\n\n        try {\n            // Attempt to create the new file.\n            stream = File.Open (path, FileMode.CreateNew);\n        } catch (IOException) {\n            // If the file already exists, try again with a new Guid.\n            if (File.Exists (path))\n                continue;\n\n            // Otherwise, fail immediately since it probably means that there is\n            // no graceful way to recover from this error.\n            throw;\n        }\n\n        try {\n            using (stream) {\n                // IIS pickup directories expect the message to be \"byte-stuffed\"\n                // which means that lines beginning with \".\" need to be escaped\n                // by adding an extra \".\" to the beginning of the line.\n                //\n                // Use an SmtpDataFilter \"byte-stuff\" the message as it is written\n                // to the file stream. This is the same process that an SmtpClient\n                // would use when sending the message in a `DATA` command.\n                using (var filtered = new FilteredStream (stream)) {\n                    filtered.Add (new SmtpDataFilter ());\n\n                    // Make sure to write the message in DOS (<CR><LF>) format.\n                    var options = FormatOptions.Default.Clone ();\n                    options.NewLineFormat = NewLineFormat.Dos;\n\n                    message.WriteTo (options, filtered);\n                    filtered.Flush ();\n                    return;\n                }\n            }\n        } catch {\n            // An exception here probably means that the disk is full.\n            //\n            // Delete the file that was created above so that incomplete files are not\n            // left behind for IIS to send accidentally.\n            File.Delete (path);\n            throw;\n        }\n    } while (true);\n}\n```\n\n### <a id=\"smtp-request-read-receipt\">Q: How can I request a notification when the message is read by the user?</a>\n\nThe first thing I need to make clear is that requesting a notification does not guarantee that you'll actually\nget one. In order for you to receive a notification that the message was read by its recipient, the recipient's\nmail client needs to know how to send such a notification *and* that the user has enabled it to do so.\n\nThat said, here's how you can request a notification when the recipient reads the message that has been sent:\n\n```csharp\n// Add the following header to tell the recipient's client that you want to receive a\n// notification when the message has been read by the user.\nmessage.Headers[HeaderId.DispositionNotificationTo] = new MailboxAddress (\"My Name\", \"me@example.com\").ToString (true);\n```\n\nFor more information on this topic, read [rfc3798](https://tools.ietf.org/html/rfc3798).\n\n### <a id=\"smtp-process-read-receipt\">Q: How can I process a read receipt notification?</a>\n\nA read receipt notification comes in the form of a MIME message with a top-level MIME part with a MIME-type\nof `multipart/report` that has a `report-type` parameter with a value of `disposition-notification`.\n\nYou could check for this in code like this:\n\n```csharp\nvar report = message.Body as MultipartReport;\nif (report != null && report.ReportType.Equals (\"disposition-notification\", StringComparison.OrdinalIgnoreCase)) {\n    // This is a read receipt notification.\n}\n```\n\nThe first part of the `multipart/report` will be a human-readable explanation of the notification.\n\nThe second part will have a MIME-type of `message/disposition-notification` and be represented by\na [MessageDispositionNotification](https://www.mimekit.net/docs/html/T_MimeKit_MessageDispositionNotification.htm).\n\nThis notification part will contain a list of header-like fields containing information about the\nmessage that this notification is for such as the `Original-Message-Id`, `Original-Recipient`, etc.\n\n```csharp\nvar notification = report[1] as MessageDispositionNotification;\nif (notification != null) {\n    // Get the Message-Id of the message this notification is for...\n    var messageId = notification.Fields[\"Original-Message-Id\"];\n}\n```\n\nFor more information on this topic, read [rfc3798](https://tools.ietf.org/html/rfc3798).\n"
        },
        {
          "name": "GMailOAuth2.md",
          "type": "blob",
          "size": 7.5322265625,
          "content": "# Using OAuth2 With GMail (IMAP, POP3 or SMTP)\n\n## Quick Index\n\n* [Setting up OAuth2 for use with Google Mail](#setting-up-oauth2-for-use-with-google-mail)\n  * [Register Your Application with Google](#register-your-application-with-google)\n  * [Obtaining an OAuth2 Client ID and Secret](#obtaining-an-oauth2-client-id-and-secret)\n* [Authenticating a Desktop App with the OAuth2 Client ID and Secret](#authenticating-a-desktop-app-with-the-oauth2-client-id-and-secret)\n* [Authenticating an ASP.NET Web App with the OAuth2 Client ID and Secret](#authenticating-an-aspnet-web-app-with-the-oauth2-client-id-and-secret)\n\n## Setting up OAuth2 for use with Google Mail\n\n### Register Your Application with Google\n\nGo to [Google's Developer Console](https://cloud.google.com/console).\n\nClick the **Select A Project** button in the **Navigation Bar** at the top of the screen.\n\n![Click \"Select A Project\"](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/google-developer-console/click-select-a-project.png)\n\nClick the **New Project** button.\n\n![Click \"New Project\"](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/google-developer-console/click-new-project.png)\n\nFill in the name **Project Name**, and if appropriate, select the **Organization** that your program\nshould be associated with. Then click *Create*.\n\n![Create New Project](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/google-developer-console/create-new-project.png)\n\n### Obtaining an OAuth2 Client ID and Secret\n\nClick the **☰** symbol, move down to **APIs & Services** and then select **OAuth consent screen**.\n\n![Click \"OAuth consent screen\"](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/google-developer-console/click-oauth-consent-screen-menu.png)\n\nSelect the **External** radio item and then click **Create**.\n\n![Select \"External\"](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/google-developer-console/select-external.png)\n\nFill in the **Application name** and any other fields that are appropriate for your application and then click\n**Create**.\n\n![OAuth consent screen](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/google-developer-console/oauth-consent-screen.png)\n\nClick **+ Create Credentials** and then select **OAuth client ID**.\n\n![Click \"Create Credentials\"](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/google-developer-console/click-create-credentials.png)\n\nSelect the **Other** radio item in the **Application type** section and then type in a name to use for the OAuth\nclient ID. Once completed, click **Create**.\n\n![Select \"Other\"](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/google-developer-console/select-application-type-other.png)\n\nAt this point, you will be presented with a web dialog that will allow you to copy the **Client ID** and\n**Client Secret** strings into your clipboard to paste them into your program.\n\n![Client ID and Secret](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/google-developer-console/client-id-and-secret.png)\n\n## Authenticating a Desktop App with the OAuth2 Client ID and Secret\n\nNow that you have the **Client ID** and **Client Secret** strings, you'll need to plug those values into\nyour application.\n\nThe following sample code uses the [Google.Apis.Auth](https://www.nuget.org/packages/Google.Apis.Auth/)\nnuget package for obtaining the access token which will be needed by MailKit to pass on to the GMail\nserver.\n\n```csharp\nconst string GMailAccount = \"username@gmail.com\";\n\nvar clientSecrets = new ClientSecrets {\n    ClientId = \"XXX.apps.googleusercontent.com\",\n    ClientSecret = \"XXX\"\n};\n\nvar codeFlow = new GoogleAuthorizationCodeFlow (new GoogleAuthorizationCodeFlow.Initializer {\n    // Cache tokens in ~/.local/share/google-filedatastore/CredentialCacheFolder on Linux/Mac\n    DataStore = new FileDataStore (\"CredentialCacheFolder\", false),\n    Scopes = new [] { \"https://mail.google.com/\" },\n    ClientSecrets = clientSecrets,\n    LoginHint = GMailAccount\n});\n\n// Note: For a web app, you'll want to use AuthorizationCodeWebApp instead.\nvar codeReceiver = new LocalServerCodeReceiver ();\nvar authCode = new AuthorizationCodeInstalledApp (codeFlow, codeReceiver);\n\nvar credential = await authCode.AuthorizeAsync (GMailAccount, CancellationToken.None);\n\nif (credential.Token.IsStale)\n    await credential.RefreshTokenAsync (CancellationToken.None);\n\nvar oauth2 = new SaslMechanismOAuthBearer (credential.UserId, credential.Token.AccessToken);\n\nusing (var client = new ImapClient ()) {\n    await client.ConnectAsync (\"imap.gmail.com\", 993, SecureSocketOptions.SslOnConnect);\n    await client.AuthenticateAsync (oauth2);\n    await client.DisconnectAsync (true);\n}\n```\n\n## Authenticating an ASP.NET Web App with the OAuth2 Client ID and Secret\n\nNow that you have the **Client ID** and **Client Secret** strings, you'll need to plug those values into\nyour application.\n\nThe following sample code uses the [Google.Apis.Auth](https://www.nuget.org/packages/Google.Apis.Auth/)\nnuget package for obtaining the access token which will be needed by MailKit to pass on to the GMail\nserver.\n\nAdd Google Authentication processor to your **Program.cs**.\n\n```csharp\nbuilder.Services.AddAuthentication (options => {\n    // This forces challenge results to be handled by Google OpenID Handler, so there's no\n    // need to add an AccountController that emits challenges for Login.\n    options.DefaultChallengeScheme = GoogleOpenIdConnectDefaults.AuthenticationScheme;\n    \n    // This forces forbid results to be handled by Google OpenID Handler, which checks if\n    // extra scopes are required and does automatic incremental auth.\n    options.DefaultForbidScheme = GoogleOpenIdConnectDefaults.AuthenticationScheme;\n    \n    // Default scheme that will handle everything else.\n    // Once a user is authenticated, the OAuth2 token info is stored in cookies.\n    options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n})\n.AddCookie (options => {\n    options.ExpireTimeSpan = TimeSpan.FromMinutes (5);\n})\n.AddGoogleOpenIdConnect (options => {\n    var secrets = GoogleClientSecrets.FromFile (\"client_secret.json\").Secrets;\n    options.ClientId = secrets.ClientId;\n    options.ClientSecret = secrets.ClientSecret;\n});\n```\n\nEnsure that you are using Authorization and HttpsRedirection in your **Program.cs**:\n\n```csharp\napp.UseHttpsRedirection ();\napp.UseStaticFiles ();\n\napp.UseRouting ();\n\napp.UseAuthentication ();\napp.UseAuthorization ();\n```\n\nNow, using the **GoogleScopedAuthorizeAttribute**, you can request scopes saved in a library as constants and request tokens for these scopes.\n\n```csharp\n[GoogleScopedAuthorize(DriveService.ScopeConstants.DriveReadonly)]\npublic async Task AuthenticateAsync ([FromServices] IGoogleAuthProvider auth)\n{\n    GoogleCredential? googleCred = await auth.GetCredentialAsync ();\n    string token = await googleCred.UnderlyingCredential.GetAccessTokenForRequestAsync ();\n    \n    var oauth2 = new SaslMechanismOAuthBearer (\"UserEmail\", token);\n    \n    using var emailClient = new ImapClient ();\n    await emailClient.ConnectAsync (\"imap.gmail.com\", 993, SecureSocketOptions.SslOnConnect);\n    await emailClient.AuthenticateAsync (oauth2);\n    await emailClient.DisconnectAsync (true);\n}\n```\n\nAll of that and more has been described in Google's [OAuth 2.0](https://developers.google.com/api-client-library/dotnet/guide/aaa_oauth#web-applications-aspnet-mvc)\ndocumentation. However, be careful since [Asp.Net MVC](https://developers.google.com/api-client-library/dotnet/guide/aaa_oauth#web-applications-asp.net-mvc)\ndoes not work for Asp.Net Core.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0673828125,
          "content": "MIT License\n\nCopyright (C) 2013-2024 .NET Foundation and Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "MailKit.Coverity.sln",
          "type": "blob",
          "size": 3.6953125,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.30711.63\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \".nuget\", \".nuget\", \"{BB3237C7-E19C-4232-B875-6658ABDD184A}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.nuget\\packages.config = .nuget\\packages.config\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MimeKit\", \"submodules\\MimeKit\\MimeKit\\MimeKit.csproj\", \"{4453C1EF-9C6A-4305-B70B-9154AE48B63C}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MailKit\", \"MailKit\\MailKit.csproj\", \"{67EBBC81-9334-49CE-BF7B-17DA659E9736}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{4453C1EF-9C6A-4305-B70B-9154AE48B63C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{4453C1EF-9C6A-4305-B70B-9154AE48B63C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{4453C1EF-9C6A-4305-B70B-9154AE48B63C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{4453C1EF-9C6A-4305-B70B-9154AE48B63C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{67EBBC81-9334-49CE-BF7B-17DA659E9736}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{67EBBC81-9334-49CE-BF7B-17DA659E9736}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{67EBBC81-9334-49CE-BF7B-17DA659E9736}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{67EBBC81-9334-49CE-BF7B-17DA659E9736}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {AE4FD452-949D-40F5-B83B-B439EBA814AA}\n\tEndGlobalSection\n\tGlobalSection(MonoDevelopProperties) = preSolution\n\t\tStartupItem = MailKit\\MailKit.Net45.csproj\n\t\tPolicies = $0\n\t\t$0.TextStylePolicy = $1\n\t\t$1.inheritsSet = null\n\t\t$1.scope = text/x-csharp\n\t\t$0.CSharpFormattingPolicy = $2\n\t\t$2.AlignEmbeddedUsingStatements = False\n\t\t$2.AlignEmbeddedIfStatements = False\n\t\t$2.NamespaceBraceStyle = EndOfLine\n\t\t$2.StructBraceStyle = EndOfLine\n\t\t$2.EnumBraceStyle = EndOfLine\n\t\t$2.BeforeIndexerDeclarationBracket = False\n\t\t$2.AfterDelegateDeclarationParameterComma = True\n\t\t$2.BeforeSizeOfParentheses = True\n\t\t$2.BeforeTypeOfParentheses = True\n\t\t$2.SpacesAfterTypecast = True\n\t\t$2.BlankLinesBeforeUsings = 1\n\t\t$2.inheritsSet = Mono\n\t\t$2.inheritsScope = text/x-csharp\n\t\t$2.scope = text/x-csharp\n\t\t$0.StandardHeader = $3\n\t\t$3.Text = @\\r\\n${FileName}\\n \\nAuthor: ${AuthorName} <${AuthorEmail}>\\n\\nCopyright (c) ${Year} ${CopyrightHolder}\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n\n\t\t$3.IncludeInNewFiles = True\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "MailKit.Documentation.sln",
          "type": "blob",
          "size": 3.35546875,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.29926.136\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{7CF6DF6D-3B04-46F8-A40B-537D21BCA0B4}\") = \"Documentation\", \"Documentation\\Documentation.shfbproj\", \"{59115814-A1E3-46AE-AE30-4065AE8F4CAF}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MimeKit\", \"submodules\\MimeKit\\MimeKit\\MimeKit.csproj\", \"{FAEC8A91-6983-4ED9-A414-09C6B65B13BB}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MailKit\", \"MailKit\\MailKit.csproj\", \"{E543A427-93DE-4E65-ADF2-44412E440FB1}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{59115814-A1E3-46AE-AE30-4065AE8F4CAF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{59115814-A1E3-46AE-AE30-4065AE8F4CAF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{59115814-A1E3-46AE-AE30-4065AE8F4CAF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{FAEC8A91-6983-4ED9-A414-09C6B65B13BB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FAEC8A91-6983-4ED9-A414-09C6B65B13BB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FAEC8A91-6983-4ED9-A414-09C6B65B13BB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FAEC8A91-6983-4ED9-A414-09C6B65B13BB}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{E543A427-93DE-4E65-ADF2-44412E440FB1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{E543A427-93DE-4E65-ADF2-44412E440FB1}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{E543A427-93DE-4E65-ADF2-44412E440FB1}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{E543A427-93DE-4E65-ADF2-44412E440FB1}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {EB22C82D-37B9-4F33-9228-B5FD1B590B1F}\n\tEndGlobalSection\n\tGlobalSection(MonoDevelopProperties) = preSolution\n\t\tPolicies = $0\n\t\t$0.StandardHeader = $1\n\t\t$1.Text = @\\n${FileName}\\n \\nAuthor: ${AuthorName} <${AuthorEmail}>\\n\\nCopyright (c) ${Year} ${CopyrightHolder}\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n\n\t\t$1.IncludeInNewFiles = True\n\t\t$0.TextStylePolicy = $2\n\t\t$2.FileWidth = 120\n\t\t$2.TabsToSpaces = False\n\t\t$2.inheritsSet = VisualStudio\n\t\t$2.inheritsScope = text/plain\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "MailKit.sln",
          "type": "blob",
          "size": 2.2451171875,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.2.32516.85\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{D5001AA9-4C61-475F-8EA3-4C15949D849F}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MimeKit\", \"submodules\\MimeKit\\MimeKit\\MimeKit.csproj\", \"{B0E5B7C4-710E-4DDE-9C00-1234844ADA76}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MailKit\", \"MailKit\\MailKit.csproj\", \"{12F096E4-8CDC-4D5B-87B8-8AD71A3B5BED}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"UnitTests\", \"UnitTests\\UnitTests.csproj\", \"{1B670279-AEA7-4D9B-A854-CB4CC177B277}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{B0E5B7C4-710E-4DDE-9C00-1234844ADA76}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B0E5B7C4-710E-4DDE-9C00-1234844ADA76}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B0E5B7C4-710E-4DDE-9C00-1234844ADA76}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B0E5B7C4-710E-4DDE-9C00-1234844ADA76}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{12F096E4-8CDC-4D5B-87B8-8AD71A3B5BED}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{12F096E4-8CDC-4D5B-87B8-8AD71A3B5BED}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{12F096E4-8CDC-4D5B-87B8-8AD71A3B5BED}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{12F096E4-8CDC-4D5B-87B8-8AD71A3B5BED}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{1B670279-AEA7-4D9B-A854-CB4CC177B277}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1B670279-AEA7-4D9B-A854-CB4CC177B277}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{1B670279-AEA7-4D9B-A854-CB4CC177B277}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{1B670279-AEA7-4D9B-A854-CB4CC177B277}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {80311676-045A-4523-8BD6-AEAD1F21474C}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "MailKit",
          "type": "tree",
          "content": null
        },
        {
          "name": "MailKitLite.sln",
          "type": "blob",
          "size": 1.7978515625,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.30114.105\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{D5001AA9-4C61-475F-8EA3-4C15949D849F}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MimeKitLite\", \"submodules\\MimeKit\\MimeKit\\MimeKitLite.csproj\", \"{23F999AF-CF50-42FF-A011-D56D68E60FB9}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MailKitLite\", \"MailKit\\MailKitLite.csproj\", \"{D6EBFBF3-5806-43A0-B3B3-02EF25C47A9C}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{23F999AF-CF50-42FF-A011-D56D68E60FB9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{23F999AF-CF50-42FF-A011-D56D68E60FB9}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{23F999AF-CF50-42FF-A011-D56D68E60FB9}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{23F999AF-CF50-42FF-A011-D56D68E60FB9}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{D6EBFBF3-5806-43A0-B3B3-02EF25C47A9C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{D6EBFBF3-5806-43A0-B3B3-02EF25C47A9C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{D6EBFBF3-5806-43A0-B3B3-02EF25C47A9C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{D6EBFBF3-5806-43A0-B3B3-02EF25C47A9C}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {80311676-045A-4523-8BD6-AEAD1F21474C}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.16015625,
          "content": "# MailKit\n\n|  Package  |Latest Release|Latest Build|\n|:----------|:------------:|:----------:|\n|**MimeKit**|[![MimeKit NuGet](https://img.shields.io/nuget/v/MimeKit.svg?logo=nuget&style=flat-square)](https://www.nuget.org/packages/MimeKit)![MimeKit NuGet Downloads](https://img.shields.io/nuget/dt/MimeKit.svg?style=flat-square)|[![MimeKit MyGet](https://img.shields.io/myget/mimekit/v/MimeKit.svg?logo=nuget&style=flat-square&label=myget)](https://www.myget.org/feed/mimekit/package/nuget/MimeKit)|\n|**MimeKitLite**|[![MimeKitLite NuGet](https://img.shields.io/nuget/v/MimeKitLite.svg?logo=nuget&style=flat-square)](https://www.nuget.org/packages/MimeKitLite)![MimeKitLite NuGet Downloads](https://img.shields.io/nuget/dt/MimeKitLite.svg?style=flat-square)||\n|**MailKit**|[![MailKit NuGet](https://img.shields.io/nuget/v/MailKit.svg?logo=nuget&style=flat-square)](https://www.nuget.org/packages/MailKit)![MailKit NuGet Downloads](https://img.shields.io/nuget/dt/MailKit.svg?style=flat-square)|[![MailKit MyGet](https://img.shields.io/myget/mimekit/v/MailKit.svg?logo=nuget&style=flat-square&label=myget)](https://www.myget.org/feed/mimekit/package/nuget/MailKit)|\n|**MailKitLite**|[![MailKitLite NuGet](https://img.shields.io/nuget/v/MailKitLite.svg?logo=nuget&style=flat-square)](https://www.nuget.org/packages/MailKitLite)![MailKitLite NuGet Downloads](https://img.shields.io/nuget/dt/MailKitLite.svg?style=flat-square)||\n\n\n|  Platform   |Build Status|Code Coverage|Static Analysis|\n|:------------|:----------:|:-----------:|:-------------:|\n|**Linux/Mac**|[![Build Status](https://github.com/jstedfast/MailKit/actions/workflows/main.yml/badge.svg?event=push)](https://github.com/jstedfast/MailKit/actions/workflows/main.yml)|[![Code Coverage](https://coveralls.io/repos/jstedfast/MailKit/badge.svg?branch=master)](https://coveralls.io/r/jstedfast/MailKit?branch=master)|[![Static Analysis](https://scan.coverity.com/projects/3202/badge.svg)](https://scan.coverity.com/projects/3202)|\n|**Windows**  |[![Build Status](https://github.com/jstedfast/MailKit/actions/workflows/main.yml/badge.svg?event=push)](https://github.com/jstedfast/MailKit/actions/workflows/main.yml)|[![Code Coverage](https://coveralls.io/repos/jstedfast/MailKit/badge.svg?branch=master)](https://coveralls.io/r/jstedfast/MailKit?branch=master)|[![Static Analysis](https://scan.coverity.com/projects/3202/badge.svg)](https://scan.coverity.com/projects/3202)|\n\n## What is MailKit?\n\nMailKit is a cross-platform mail client library built on top of [MimeKit](https://github.com/jstedfast/MimeKit).\n\n## Donate\n\nMailKit is a personal open source project that I have put thousands of hours into perfecting with the\ngoal of making it the very best email framework for .NET. I need your help to achieve this.\n\nDonating helps pay for things such as web hosting, domain registration and licenses for developer tools\nsuch as a performance profiler, memory profiler, a static code analysis tool, and more. It also helps\nmotivate me to continue working on the project.\n\n<a href=\"https://github.com/sponsors/jstedfast\" _target=\"blank\"><img alt=\"Click here to lend your support to MailKit by making a donation!\" src=\"https://www.paypal.com/en_US/i/btn/x-click-but21.gif\"></a>\n\n## Features\n\n* SASL Authentication\n  * Supports the following mechanisms: [CRAM-MD5](https://tools.ietf.org/html/rfc2195), [DIGEST-MD5](https://tools.ietf.org/html/rfc2831),\n  [LOGIN](https://tools.ietf.org/html/draft-murchison-sasl-login-00), [NTLM](https://davenport.sourceforge.net/ntlm.html),\n  [PLAIN](https://tools.ietf.org/html/rfc2595), [SCRAM-SHA-1[-PLUS]](https://tools.ietf.org/html/rfc5802),\n  [SCRAM-SHA-256[-PLUS]](https://tools.ietf.org/html/rfc5802), [SCRAM-SHA-512[-PLUS]](https://tools.ietf.org/html/draft-melnikov-scram-sha-512-04),\n  [OAUTHBEARER](https://tools.ietf.org/html/rfc7628) and XOAUTH2\n* Proxy Support\n  * Supports the following types of proxies: [SOCKS4/4a](https://www.openssh.com/txt/socks4.protocol), [SOCKS5](https://tools.ietf.org/html/rfc1928),\n  and [HTTP/S](https://tools.ietf.org/html/rfc2616)\n* SMTP Client\n  * Supports all of the SASL mechanisms listed above.\n  * Supports SSL-wrapped connections via the \"smtps\" protocol.\n  * Supports client SSL/TLS certificates.\n  * Supports the following extensions: [SIZE](https://tools.ietf.org/html/rfc1870), [DSN](https://tools.ietf.org/html/rfc1891),\n  [AUTH](https://tools.ietf.org/html/rfc2554), [8BITMIME](https://tools.ietf.org/html/rfc2821), [PIPELINING](https://tools.ietf.org/html/rfc2920),\n  [BINARYMIME](https://tools.ietf.org/html/rfc3030), [CHUNKING](https://tools.ietf.org/html/rfc3030), [STARTTLS](https://tools.ietf.org/html/rfc3207),\n  and [SMTPUTF8](https://tools.ietf.org/html/rfc6531)\n  * All APIs are cancellable.\n  * Async APIs are available.\n* POP3 Client\n  * Supports all of the SASL mechanisms listed above.\n  * Also supports authentication via [APOP](https://tools.ietf.org/html/rfc1939#page-15) and `USER`/`PASS`.\n  * Supports SSL-wrapped connections via the \"pops\" protocol.\n  * Supports client SSL/TLS certificates.\n  * Supports the following extensions: [TOP](https://tools.ietf.org/html/rfc1939#page-11), [UIDL](https://tools.ietf.org/html/rfc1939#page-12),\n  [EXPIRE](https://tools.ietf.org/html/rfc2449), [LOGIN-DELAY](https://tools.ietf.org/html/rfc2449), [PIPELINING](https://tools.ietf.org/html/rfc2449),\n  [SASL](https://tools.ietf.org/html/rfc2449), [STLS](https://tools.ietf.org/html/rfc2595), [UTF8](https://tools.ietf.org/html/rfc6856),\n  [UTF8=USER](https://tools.ietf.org/html/rfc6856), and [LANG](https://tools.ietf.org/html/rfc6856)\n  * All APIs are cancellable.\n  * Async APIs are available.\n* IMAP4 Client\n  * Supports all of the SASL mechanisms listed above.\n  * Supports SSL-wrapped connections via the \"imaps\" protocol.\n  * Supports client SSL/TLS certificates.\n  * Supports the following extensions: [ACL](https://tools.ietf.org/html/rfc4314), [QUOTA](https://tools.ietf.org/html/rfc2087),\n  [LITERAL+](https://tools.ietf.org/html/rfc2088), [IDLE](https://tools.ietf.org/html/rfc2177), [NAMESPACE](https://tools.ietf.org/html/rfc2342),\n  [ID](https://tools.ietf.org/html/rfc2971), [CHILDREN](https://tools.ietf.org/html/rfc3348), [LOGINDISABLED](https://tools.ietf.org/html/rfc3501),\n  [STARTTLS](https://tools.ietf.org/html/rfc3501), [MULTIAPPEND](https://tools.ietf.org/html/rfc3502), [UNSELECT](https://tools.ietf.org/html/rfc3691),\n  [UIDPLUS](https://tools.ietf.org/html/rfc4315), [CONDSTORE](https://tools.ietf.org/html/rfc4551), [ESEARCH](https://tools.ietf.org/html/rfc4731),\n  [SASL-IR](https://tools.ietf.org/html/rfc4959), [COMPRESS](https://tools.ietf.org/html/rfc4978), [WITHIN](https://tools.ietf.org/html/rfc5032),\n  [ENABLE](https://tools.ietf.org/html/rfc5161), [QRESYNC](https://tools.ietf.org/html/rfc5162), [SORT](https://tools.ietf.org/html/rfc5256),\n  [THREAD](https://tools.ietf.org/html/rfc5256), [ANNOTATE](https://tools.ietf.org/html/rfc5257), [LIST-EXTENDED](https://tools.ietf.org/html/rfc5258),\n  [ESORT](https://tools.ietf.org/html/rfc5267), [METADATA / METADATA-SERVER](https://tools.ietf.org/html/rfc5464), [NOTIFY](https://tools.ietf.org/html/rfc5465),\n  [FILTERS](https://tools.ietf.org/html/rfc5466), [LIST-STATUS](https://tools.ietf.org/html/rfc5819), [SORT=DISPLAY](https://tools.ietf.org/html/rfc5957),\n  [SPECIAL-USE / CREATE-SPECIAL-USE](https://tools.ietf.org/html/rfc6154), [SEARCH=FUZZY](https://tools.ietf.org/html/rfc6203),\n  [MOVE](https://tools.ietf.org/html/rfc6851), [UTF8=ACCEPT / UTF8=ONLY](https://tools.ietf.org/html/rfc6855), [LITERAL-](https://tools.ietf.org/html/rfc7888),\n  [APPENDLIMIT](https://tools.ietf.org/html/rfc7889), [STATUS=SIZE](https://tools.ietf.org/html/rfc8438), [OBJECTID](https://tools.ietf.org/html/rfc8474),\n  [REPLACE](https://tools.ietf.org/html/rfc8508), [SAVEDATE](https://tools.ietf.org/html/rfc8514), [XLIST](https://developers.google.com/gmail/imap_extensions),\n  and [X-GM-EXT1](https://developers.google.com/gmail/imap_extensions) (X-GM-MSGID, X-GM-THRID, X-GM-RAW and X-GM-LABELS)\n  * All APIs are cancellable.\n  * Async APIs are available.\n* Client-side sorting and threading of messages.\n\n## Goals\n\nThe main goal of this project is to provide the .NET world with robust, fully featured and RFC-compliant\nSMTP, POP3, and IMAP client implementations.\n\nAll of the other .NET IMAP client implementations that I could find suffer from major architectural\nproblems such as ignoring unexpected untagged responses, assuming that literal string tokens will\nnever be used for anything other than message bodies (when in fact they could be used for pretty\nmuch any string token in a response), assuming that the way to find the end of a message body in a\nFETCH response is by scanning for `\") UID\"`, and not properly handling mailbox names with international\ncharacters to simply name a few.\n\nIMAP requires a LOT of time spent laboriously reading and re-reading the IMAP specifications (as well\nas the MIME specifications) to understand all of the subtleties of the protocol and most (all?) of the\nother Open Source .NET IMAP libraries, at least, were written by developers that only cared enough that\nit worked for their simple needs. There's nothing necessarily wrong with doing that, but the web is full\nof half-working, non-RFC-compliant IMAP implementations out there that it was finally time for a carefully\ndesigned and implemented IMAP client library to be written.\n\nFor POP3, libraries such as OpenPOP.NET are actually fairly decent, although the MIME parser is far\ntoo strict - throwing exceptions any time it encounters a Content-Type or Content-Disposition\nparameter that it doesn't already know about, which, if you read over the mailing-list, is a problem\nthat OpenPOP.NET users are constantly running into. MailKit's Pop3Client, of course, doesn't have this\nproblem. It also parses messages directly from the socket instead of downloading the message into a\nlarge string buffer before parsing it, so you'll probably find that not only is MailKit faster (MailKit's\nMIME parser, [MimeKit](https://github.com/jstedfast/MimeKit), parses messages from disk 25x faster than\nOpenPOP.NET's parser), but also uses far less memory.\n\nFor SMTP, most developers use System.Net.Mail.SmtpClient which suits their needs more-or-less satisfactorily\nand so is probably not high on their list of needs. However, the SmtpClient implementation included with\nMailKit is a much better option if cross-platform support is needed or if the developer wants to be able to\nsave and re-load MIME messages before sending them via SMTP. MailKit's SmtpClient also supports PIPELINING\nwhich should improve performance of sending messages (although might not be very noticeable).\n\n## License Information\n\n```text\nMIT License\n\nCopyright (C) 2013-2024 .NET Foundation and Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n\n## Installing via NuGet\n\nThe easiest way to install MailKit is via [NuGet](https://www.nuget.org/packages/MailKit/).\n\nIn Visual Studio's [Package Manager Console](https://docs.nuget.org/docs/start-here/using-the-package-manager-console),\nenter the following command:\n\n    Install-Package MailKit\n\n## Getting the Source Code\n\nFirst, you'll need to clone MailKit from my GitHub repository. To do this using the command-line version of Git,\nyou'll need to issue the following command in your terminal:\n\n    git clone --recursive https://github.com/jstedfast/MailKit.git\n\nIf you are using [TortoiseGit](https://tortoisegit.org) on Windows, you'll need to right-click in the directory\nwhere you'd like to clone MailKit and select **Git Clone...** in the menu. Once you do that, you'll get the\nfollowing dialog:\n\n![Download the source code using TortoiseGit](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/clone.png)\n\nFill in the areas outlined in red and then click **OK**. This will recursively clone MailKit onto your local machine.\n\n## Updating the Source Code\n\nOccasionally you might want to update your local copy of the source code if I have made changes to MailKit since you\ndownloaded the source code in the step above. To do this using the command-line version of Git, you'll need to issue\nthe following commands in your terminal within the MailKit directory:\n\n    git pull\n    git submodule update\n\nIf you are using [TortoiseGit](https://tortoisegit.org) on Windows, you'll need to right-click on the MailKit\ndirectory and select **Git Sync...** in the menu. Once you do that, you'll need to click the **Pull** and\n**Submodule Update** buttons in the following dialog:\n\n![Update the source code using TortoiseGit](https://github.com/jstedfast/MailKit/blob/master/Documentation/media/update.png)\n\n## Building\n\nIn the top-level MailKit directory, there are a number of solution files; they are:\n\n* **MailKit.sln** - includes the projects for .NET Framework 4.6.2/4.7/4.8, .NETStandard 2.0/2.1, .NET6.0 as well as the unit tests.\n* **MailKit.Coverity.sln** - this is used to generate Coverity static analysis builds and is not generally useful.\n* **MailKit.Documentation.sln** - this is used to generate the documentation found at https://mimekit.net/docs\n\nOnce you've opened the appropriate MailKit solution file in [Visual Studio](https://www.visualstudio.com/downloads/),\nyou can choose the **Debug** or **Release** build configuration and then build.\n\nBoth Visual Studio 2017 and Visual Studio 2019 should be able to build MailKit without any issues, but older versions such as\nVisual Studio 2015 will require modifications to the projects in order to build correctly. It has been reported that adding\nNuGet package references to [Microsoft.Net.Compilers](https://www.nuget.org/packages/Microsoft.Net.Compilers/) >= 3.6.0\nand [System.ValueTuple](https://www.nuget.org/packages/System.ValueTuple/) >= 4.5.0 to the MimeKit and MailKit projects will\nallow them to build successfully.\n\nNote: The **Release** build will generate the xml API documentation, but the **Debug** build will not.\n\n## Using MailKit\n\n### Sending Messages\n\nOne of the more common operations that MailKit is meant for is sending email messages.\n\n```csharp\nusing System;\n\nusing MailKit.Net.Smtp;\nusing MailKit;\nusing MimeKit;\n\nnamespace TestClient {\n    class Program\n    {\n        public static void Main (string[] args)\n        {\n            var message = new MimeMessage ();\n            message.From.Add (new MailboxAddress (\"Joey Tribbiani\", \"joey@friends.com\"));\n            message.To.Add (new MailboxAddress (\"Mrs. Chanandler Bong\", \"chandler@friends.com\"));\n            message.Subject = \"How you doin'?\";\n\n            message.Body = new TextPart (\"plain\") {\n                Text = @\"Hey Chandler,\n\nI just wanted to let you know that Monica and I were going to go play some paintball, you in?\n\n-- Joey\"\n            };\n\n            using (var client = new SmtpClient ()) {\n                client.Connect (\"smtp.friends.com\", 587, false);\n\n                // Note: only needed if the SMTP server requires authentication\n                client.Authenticate (\"joey\", \"password\");\n\n                client.Send (message);\n                client.Disconnect (true);\n            }\n        }\n    }\n}\n```\n\n## Retrieving Messages (via Pop3)\n\nOne of the other main uses of MailKit is retrieving messages from pop3 servers.\n\n```csharp\nusing System;\n\nusing MailKit.Net.Pop3;\nusing MailKit;\nusing MimeKit;\n\nnamespace TestClient {\n    class Program\n    {\n        public static void Main (string[] args)\n        {\n            using (var client = new Pop3Client ()) {\n                client.Connect (\"pop.friends.com\", 110, false);\n\n                client.Authenticate (\"joey\", \"password\");\n\n                for (int i = 0; i < client.Count; i++) {\n                    var message = client.GetMessage (i);\n                    Console.WriteLine (\"Subject: {0}\", message.Subject);\n                }\n\n                client.Disconnect (true);\n            }\n        }\n    }\n}\n```\n\n## Using IMAP\n\nMore important than POP3 support is the IMAP support. Here's a simple use-case of retrieving messages from an IMAP server:\n\n```csharp\nusing System;\n\nusing MimeKit;\nusing MailKit;\nusing MailKit.Search;\nusing MailKit.Net.Imap;\n\nnamespace TestClient {\n    class Program\n    {\n        public static void Main (string[] args)\n        {\n            using (var client = new ImapClient ()) {\n                client.Connect (\"imap.friends.com\", 993, true);\n\n                client.Authenticate (\"joey\", \"password\");\n\n                // The Inbox folder is always available on all IMAP servers...\n                var inbox = client.Inbox;\n                inbox.Open (FolderAccess.ReadOnly);\n\n                Console.WriteLine (\"Total messages: {0}\", inbox.Count);\n                Console.WriteLine (\"Recent messages: {0}\", inbox.Recent);\n\n                for (int i = 0; i < inbox.Count; i++) {\n                    var message = inbox.GetMessage (i);\n                    Console.WriteLine (\"Subject: {0}\", message.Subject);\n                }\n\n                client.Disconnect (true);\n            }\n        }\n    }\n}\n```\n\n### Fetching Information About the Messages in an IMAP Folder\n\nOne of the advantages of IMAP over POP3 is that the IMAP protocol allows clients to retrieve information about\nthe messages in a folder without having to first download all of them.\n\nUsing the [Fetch](https://www.mimekit.net/docs/html/Overload_MailKit_Net_Imap_ImapFolder_Fetch.htm) and\n[FetchAsync](https://www.mimekit.net/docs/html/Overload_MailKit_Net_Imap_ImapFolder_FetchAsync.htm) method overloads\n(or the convenient [extension methods](https://www.mimekit.net/docs/html/Overload_MailKit_IMailFolderExtensions_Fetch.htm)),\nit's possible to obtain any subset of summary information for any range of messages in a given folder.\n\n```csharp\nforeach (var summary in inbox.Fetch (0, -1, MessageSummaryItems.Envelope)) {\n    Console.WriteLine (\"[summary] {0:D2}: {1}\", summary.Index, summary.Envelope.Subject);\n```\n\nIt's also possible to use Fetch/FetchAsync APIs that take an [IFetchRequest](https://www.mimekit.net/docs/html/T_MailKit_IFetchRequest.htm)\nargument to get even more control over what to fetch:\n\n```csharp\n// Let's Fetch non-Received headers:\nvar request = new FetchRequest {\n    Headers = new HeaderSet (new HeaderId[] { HeaderId.Received }) {\n        Exclude = true\n    }\n};\n\nforeach (var summary in inbox.Fetch (0, -1, request)) {\n    Console.WriteLine (\"[summary] {0:D2}: {1}\", summary.Index, summary.Headers[HeaderId.Subject]);\n```\n\nThe results of a Fetch method can also be used to download individual MIME parts rather\nthan downloading the entire message. For example:\n\n```csharp\nforeach (var summary in inbox.Fetch (0, -1, MessageSummaryItems.UniqueId | MessageSummaryItems.BodyStructure)) {\n    if (summary.TextBody != null) {\n        // this will download *just* the text/plain part\n        var text = inbox.GetBodyPart (summary.UniqueId, summary.TextBody);\n    }\n\n    if (summary.HtmlBody != null) {\n        // this will download *just* the text/html part\n        var html = inbox.GetBodyPart (summary.UniqueId, summary.HtmlBody);\n    }\n\n    // if you'd rather grab, say, an image attachment... it might look something like this:\n    if (summary.Body is BodyPartMultipart) {\n        var multipart = (BodyPartMultipart) summary.Body;\n\n        var attachment = multipart.BodyParts.OfType<BodyPartBasic> ().FirstOrDefault (x => x.FileName == \"logo.jpg\");\n        if (attachment != null) {\n            // this will download *just* the attachment\n            var part = inbox.GetBodyPart (summary.UniqueId, attachment);\n        }\n    }\n}\n```\n\n### Setting Message Flags in IMAP\n\nIn order to set or update the flags on a particular message, what is actually needed is the UID or index of the message and\nthe folder that it belongs to.\n\nAn obvious reason to want to update message flags is to mark a message as \"read\" (aka \"seen\") after a user has opened a\nmessage and read it.\n\n```csharp\nfolder.Store (uid, new StoreFlagsRequest (StoreAction.Add, MessageFlags.Seen) { Silent = true });\n```\n\n### Deleting Messages in IMAP\n\nDeleting messages in IMAP involves setting a `\\Deleted` flag on a message and, optionally, expunging it from the folder.\n\nThe way to mark a message as `\\Deleted` works the same way as marking a message as `\\Seen`.\n\n```csharp\nfolder.Store (uid, new StoreFlagsRequest (StoreAction.Add, MessageFlags.Deleted) { Silent = true });\nfolder.Expunge ();\n```\n\n### Searching an IMAP Folder\n\nYou may also be interested in sorting and searching...\n\n```csharp\n// let's search for all messages received after Jan 12, 2013 with \"MailKit\" in the subject...\nvar query = SearchQuery.DeliveredAfter (DateTime.Parse (\"2013-01-12\"))\n    .And (SearchQuery.SubjectContains (\"MailKit\")).And (SearchQuery.Seen);\n\nforeach (var uid in inbox.Search (query)) {\n    var message = inbox.GetMessage (uid);\n    Console.WriteLine (\"[match] {0}: {1}\", uid, message.Subject);\n}\n\n// let's do the same search, but this time sort them in reverse arrival order\nvar orderBy = new [] { OrderBy.ReverseArrival };\nforeach (var uid in inbox.Sort (query, orderBy)) {\n    var message = inbox.GetMessage (uid);\n    Console.WriteLine (\"[match] {0}: {1}\", uid, message.Subject);\n}\n\n// you'll notice that the orderBy argument is an array... this is because you\n// can actually sort the search results based on multiple columns:\norderBy = new [] { OrderBy.ReverseArrival, OrderBy.Subject };\nforeach (var uid in inbox.Sort (query, orderBy)) {\n    var message = inbox.GetMessage (uid);\n    Console.WriteLine (\"[match] {0}: {1}\", uid, message.Subject);\n}\n```\n\nOf course, instead of downloading the message, you could also fetch the summary information for the matching messages\nor do any of a number of other things with the UIDs that are returned.\n\n### Navigating Folders in IMAP\n\nHow about navigating folders? MailKit can do that, too:\n\n```csharp\n// Get the first personal namespace and list the toplevel folders under it.\nvar personal = client.GetFolder (client.PersonalNamespaces[0]);\nforeach (var folder in personal.GetSubfolders (false))\n    Console.WriteLine (\"[folder] {0}\", folder.Name);\n```\n\nIf the IMAP server supports the SPECIAL-USE or the XLIST (GMail) extension, you can get a hold of\nthe pre-defined All, Drafts, Flagged (aka Important), Junk, Sent, Trash, etc folders like this:\n\n```csharp\nif ((client.Capabilities & (ImapCapabilities.SpecialUse | ImapCapabilities.XList)) != 0) {\n    var drafts = client.GetFolder (SpecialFolder.Drafts);\n} else {\n    // maybe check the user's preferences for the Drafts folder?\n}\n```\n\nIn cases where the IMAP server does *not* support the SPECIAL-USE or XLIST extensions, you'll have to\ncome up with your own heuristics for getting the Sent, Drafts, Trash, etc folders. For example, you\nmight use logic similar to this:\n\n```csharp\nstatic string[] CommonSentFolderNames = { \"Sent Items\", \"Sent Mail\", \"Sent Messages\", /* maybe add some translated names */ };\n\nstatic IFolder GetSentFolder (ImapClient client, CancellationToken cancellationToken)\n{\n    var personal = client.GetFolder (client.PersonalNamespaces[0]);\n\n    foreach (var folder in personal.GetSubfolders (false, cancellationToken)) {\n        foreach (var name in CommonSentFolderNames) {\n            if (folder.Name == name)\n                return folder;\n        }\n    }\n\n    return null;\n}\n```\n\nUsing LINQ, you could simplify this down to something more like this:\n\n```csharp\nstatic string[] CommonSentFolderNames = { \"Sent Items\", \"Sent Mail\", \"Sent Messages\", /* maybe add some translated names */ };\n\nstatic IFolder GetSentFolder (ImapClient client, CancellationToken cancellationToken)\n{\n    var personal = client.GetFolder (client.PersonalNamespaces[0]);\n\n    return personal.GetSubfolders (false, cancellationToken).FirstOrDefault (x => CommonSentFolderNames.Contains (x.Name));\n}\n```\n\nAnother option might be to allow the user of your application to configure which folder he or she wants to use as their\nSent folder, Drafts folder, Trash folder, etc.\n\nHow you handle this is up to you.\n\n## Contributing\n\nThe first thing you'll need to do is fork MailKit to your own GitHub repository. For instructions on how to\ndo that, see the section titled **Getting the Source Code**.\n\nIf you use [Visual Studio for Mac](https://visualstudio.microsoft.com/vs/mac/) or [MonoDevelop](https://monodevelop.com),\nall of the solution files are configured with the coding style used by MailKit. If you use Visual Studio on Windows\nor some other editor, please try to maintain the existing coding style as best as you can.\n\nOnce you've got some changes that you'd like to submit upstream to the official MailKit repository,\nsend me a **Pull Request** and I will try to review your changes in a timely manner.\n\nIf you'd like to contribute but don't have any particular features in mind to work on, check out the issue\ntracker and look for something that might pique your interest!\n\n## Reporting Bugs\n\nHave a bug or a feature request? Please open a new\n[bug report](https://github.com/jstedfast/MailKit/issues/new?template=bug_report.md)\nor\n[feature request](https://github.com/jstedfast/MailKit/issues/new?template=feature_request.md).\n\nBefore opening a new issue, please search through any [existing issues](https://github.com/jstedfast/MailKit/issues)\nto avoid submitting duplicates. It may also be worth checking the\n[FAQ](https://github.com/jstedfast/MailKit/blob/master/FAQ.md) for common questions that other developers\nhave had.\n\nIf MailKit does not work with your mail server, please include a [protocol\nlog](https://github.com/jstedfast/MailKit/blob/master/FAQ.md#ProtocolLog) in your bug report, otherwise\nthere is nothing I can do to fix the problem.\n\nIf you are getting an exception from somewhere within MailKit, don't just provide the `Exception.Message`\nstring. Please include the `Exception.StackTrace` as well. The `Message`, by itself, is often useless.\n\n## Documentation\n\nAPI documentation can be found at [https://www.mimekit.net/docs](https://www.mimekit.net/docs).\n\nSome example snippets can be found in the [`Documentation/Examples`](https://github.com/jstedfast/MailKit/tree/master/Documentation/Examples) directory.\n\nSample applications can be found in the [`samples`](https://github.com/jstedfast/MailKit/tree/master/samples) directory.\n\nA copy of the XML-formatted API reference documentation is also included in the NuGet package.\n\n## .NET Foundation\n\nMailKit is a [.NET Foundation](https://www.dotnetfoundation.org/projects) project.\n\nThis project has adopted the code of conduct defined by the [Contributor Covenant](https://contributor-covenant.org/) to clarify expected behavior in our community. For more information, see the [.NET Foundation Code of Conduct](https://www.dotnetfoundation.org/code-of-conduct).\n\nGeneral .NET OSS discussions: [.NET Foundation forums](https://forums.dotnetfoundation.org)\n"
        },
        {
          "name": "RFCs.md",
          "type": "blob",
          "size": 11.857421875,
          "content": "### Specifications\n\nThe following IETF specifications define the IMAP, POP3 and SMTP protocols:\n\n* [821](https://tools.ietf.org/html/rfc821): SIMPLE MAIL TRANSFER PROTOCOL\n* [822](https://tools.ietf.org/html/rfc822): STANDARD FOR THE FORMAT OF ARPA INTERNET TEXT MESSAGES\n* [974](https://tools.ietf.org/html/rfc974): MAIL ROUTING AND THE DOMAIN SYSTEM\n* [1081](https://tools.ietf.org/html/rfc1081): Post Office Protocol - Version 3\n* [1123](https://tools.ietf.org/html/rfc1123): Requirements for Internet Hosts -- Application and Support\n* [1225](https://tools.ietf.org/html/rfc1225): Post Office Protocol - Version 3 (Obsoletes rfc1081)\n* [1425](https://tools.ietf.org/html/rfc1425): SMTP Service Extensions\n* [1426](https://tools.ietf.org/html/rfc1426): SMTP Service Extension for 8bit-MIME transport\n* [1460](https://tools.ietf.org/html/rfc1460): Post Office Protocol - Version 3 (Obsoletes rfc1225)\n* [1651](https://tools.ietf.org/html/rfc1651): SMTP Service Extensions (Obsoletes rfc1425)\n* [1652](https://tools.ietf.org/html/rfc1652): SMTP Service Extension for 8bit-MIME transport (Obsoletes rfc1426)\n* [1653](https://tools.ietf.org/html/rfc1653): SMTP Service Extension for Message Size Declaration\n* [1725](https://tools.ietf.org/html/rfc1725): Post Office Protocol - Version 3 (Obsoletes rfc1460)\n* [1730](https://tools.ietf.org/html/rfc1730): INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4\n* [1731](https://tools.ietf.org/html/rfc1731): IMAP4 Authentication Mechanisms\n* [1734](https://tools.ietf.org/html/rfc1734): POP3 AUTHentication command\n* [1830](https://tools.ietf.org/html/rfc1830): SMTP Service Extensions for Transmission of Large and Binary MIME Messages\n* [1854](https://tools.ietf.org/html/rfc1854): SMTP Service Extension for Command Pipelining\n* [1870](https://tools.ietf.org/html/rfc1870): SMTP Service Extension for Message Size Declaration (Obsoletes rfc1653)\n* [1869](https://tools.ietf.org/html/rfc1869): SMTP Service Extensions\n* [1891](https://tools.ietf.org/html/rfc1891): SMTP Service Extension for Delivery Status Notifications\n* [1928](https://tools.ietf.org/html/rfc1928): SOCKS Protocol Version 5\n* [1929](https://tools.ietf.org/html/rfc1929): Username/Password Authentication for SOCKS V5\n* [1939](https://tools.ietf.org/html/rfc1939): Post Office Protocol - Version 3 (Obsoletes rfc1725)\n* [1961](https://tools.ietf.org/html/rfc1961): GSS-API Authentication Method for SOCKS Version 5\n* [2034](https://tools.ietf.org/html/rfc2034): SMTP Service Extension for Returning Enhanced Error Codes\n* [2060](https://tools.ietf.org/html/rfc2060): INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1 (Obsoletes rfc1730)\n* [2086](https://tools.ietf.org/html/rfc2086): IMAP4 ACL extension\n* [2087](https://tools.ietf.org/html/rfc2087): IMAP4 QUOTA extension\n* [2088](https://tools.ietf.org/html/rfc2088): IMAP4 non-synchronizing literals\n* [2095](https://tools.ietf.org/html/rfc2095): IMAP/POP AUTHorize Extension for Simple Challenge/Response\n* [2177](https://tools.ietf.org/html/rfc2177): IMAP4 IDLE command\n* [2193](https://tools.ietf.org/html/rfc2193): IMAP4 Mailbox Referrals\n* [2195](https://tools.ietf.org/html/rfc2195): IMAP/POP AUTHorize Extension for Simple Challenge/Response (Obsoletes rfc2095)\n* [2197](https://tools.ietf.org/html/rfc2197): SMTP Service Extension for Command Pipelining (Obsoletes rfc1854)\n* [2221](https://tools.ietf.org/html/rfc2221): IMAP4 Login Referrals\n* [2222](https://tools.ietf.org/html/rfc2222): Simple Authentication and Security Layer (SASL)\n* [2245](https://tools.ietf.org/html/rfc2245): Anonymous SASL Mechanism\n* [2342](https://tools.ietf.org/html/rfc2342): IMAP4 Namespace\n* [2359](https://tools.ietf.org/html/rfc2359): IMAP4 UIDPLUS extension\n* [2449](https://tools.ietf.org/html/rfc2449): POP3 Extension Mechanism (Updates rfc1939)\n* [2487](https://tools.ietf.org/html/rfc2487): SMTP Service Extension for Secure SMTP over TLS\n* [2554](https://tools.ietf.org/html/rfc2554): SMTP Service Extension for Authentication\n* [2595](https://tools.ietf.org/html/rfc2595): Using TLS with IMAP, POP3 and ACAP\n* [2683](https://tools.ietf.org/html/rfc2683): IMAP4 Implementation Recommendations\n* [2821](https://tools.ietf.org/html/rfc2821): Simple Mail Transfer Protocol (Obsoletes rfc0821, rfc0974, rfc1869) (Updates rfc1123)\n* [2822](https://tools.ietf.org/html/rfc2822): Internet Message Format (Obsoletes rfc0822)\n* [2831](https://tools.ietf.org/html/rfc2831): Using Digest Authentication as a SASL Mechanism\n* [2920](https://tools.ietf.org/html/rfc2920): SMTP Service Extension for Command Pipelining (Obsoletes rfc2197)\n* [2971](https://tools.ietf.org/html/rfc2971): IMAP4 ID extension\n* [3030](https://tools.ietf.org/html/rfc3030): SMTP Service Extensions for Transmission of Large and Binary MIME Messages (Obsoletes rfc1830)\n* [3207](https://tools.ietf.org/html/rfc3207): SMTP Service Extension for Secure SMTP over Transport Layer Security (Obsoletes rfc2487)\n* [3348](https://tools.ietf.org/html/rfc3348): The Internet Message Action Protocol (IMAP4) Child Mailbox Extension\n* [3461](https://tools.ietf.org/html/rfc3461): Simple Mail Transfer Protocol (SMTP) Service Extension for Delivery Status Notifications (DSNs) (Obsoletes rfc1891)\n* [3501](https://tools.ietf.org/html/rfc3501): INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1 (Obsoletes rfc2060)\n* [3502](https://tools.ietf.org/html/rfc3502): Internet Message Access Protocol (IMAP) - MULTIAPPEND Extension\n* [3516](https://tools.ietf.org/html/rfc3516): IMAP4 Binary Content Extension\n* [3691](https://tools.ietf.org/html/rfc3691): Handle System Namespace and Service Definition\n* [4013](https://tools.ietf.org/html/rfc4013): SASLprep: Stringprep Profile for User Names and Passwords\n* [4314](https://tools.ietf.org/html/rfc4314): IMAP4 Access Control List (ACL) Extension (Obsoletes rfc2086)\n* [4315](https://tools.ietf.org/html/rfc4315): Internet Message Access Protocol (IMAP) - UIDPLUS extension (Obsoletes rfc2359)\n* [4466](https://tools.ietf.org/html/rfc4466): Collected Extensions to IMAP4 ABNF (Updates rfc2088, rfc2342, rfc3501, rfc3502, rfc3516)\n* [4469](https://tools.ietf.org/html/rfc4469): Internet Message Access Protocol (IMAP) CATENATE Extension (Updates rfc3501, rfc3502)\n* [4505](https://tools.ietf.org/html/rfc4505): Anonymous Simple Authentication and Security Layer (SASL) Mechanism (Obsoletes rfc2245)\n* [4551](https://tools.ietf.org/html/rfc4551): IMAP Extension for Conditional STORE Operation or Quick Flag Changes Resynchronization (Updates rfc3501)\n* [4616](https://tools.ietf.org/html/rfc4616): The PLAIN Simple Authentication and Security Layer (SASL) Mechanism (Updates rfc2595)\n* [4731](https://tools.ietf.org/html/rfc4731): IMAP4 Extension to SEARCH Command for Controlling What Kind of Information Is Returned\n* [4952](https://tools.ietf.org/html/rfc4952): Overview and Framework for Internationalized Email\n* [4959](https://tools.ietf.org/html/rfc4959): IMAP Extension for Simple Authentication and Security Layer (SASL) Initial Client Response\n* [4978](https://tools.ietf.org/html/rfc4978): The IMAP COMPRESS Extension\n* [5032](https://tools.ietf.org/html/rfc5032): WITHIN Search Extension to the IMAP Protocol (Updates rfc3501)\n* [5161](https://tools.ietf.org/html/rfc5161): The IMAP ENABLE Extension\n* [5162](https://tools.ietf.org/html/rfc5162): IMAP4 Extensions for Quick Mailbox Resynchronization\n* [5182](https://tools.ietf.org/html/rfc5182): IMAP Extension for Referencing the Last SEARCH Result (Updates rfc3501)\n* [5255](https://tools.ietf.org/html/rfc5255): Internet Message Access Protocol Internationalization\n* [5256](https://tools.ietf.org/html/rfc5256): Internet Message Access Protocol - SORT and THREAD Extensions\n* [5257](https://tools.ietf.org/html/rfc5257): Internet Message Access Protocol - ANNOTATE Extension\n* [5258](https://tools.ietf.org/html/rfc5258): Internet Message Access Protocol version 4 - LIST Command Extensions (Obsoletes rfc3348) (Updates rfc2193)\n* [5259](https://tools.ietf.org/html/rfc5259): Internet Message Access Protocol - CONVERT Extension\n* [5267](https://tools.ietf.org/html/rfc5267): Contexts for IMAP4\n* [5321](https://tools.ietf.org/html/rfc5321): Simple Mail Transfer Protocol (Obsoletes rfc2821) (Updates rfc1123)\n* [5336](https://tools.ietf.org/html/rfc5336): SMTP Extension for Internationalized Email Addresses (Updates rfc2821, rfc2822, rfc4952)\n* [5464](https://tools.ietf.org/html/rfc5464): The IMAP METADATA Extension\n* [5465](https://tools.ietf.org/html/rfc5465): The IMAP NOTIFY Extension (Updates rfc5267)\n* [5466](https://tools.ietf.org/html/rfc5466): IMAP4 Extension for Named Searches (Filters)\n* [5530](https://tools.ietf.org/html/rfc5530): IMAP Response Codes\n* [5721](https://tools.ietf.org/html/rfc5721): POP3 Support for UTF-8\n* [5738](https://tools.ietf.org/html/rfc5738): IMAP Support for UTF-8 (Updates rfc3501)\n* [5788](https://tools.ietf.org/html/rfc5788): IMAP4 Keyword Registry\n* [5801](https://tools.ietf.org/html/rfc5801): Using Generic Security Service Application Program Interface (GSS-API) Mechanisms in Simple Authentication and Security Layer (SASL): The GS2 Mechanism Family\n* [5802](https://tools.ietf.org/html/rfc5802): Salted Challenge Response Authentication Mechanism (SCRAM) SASL and GSS-API Mechanisms\n* [5819](https://tools.ietf.org/html/rfc5819): IMAP4 Extension for Returning STATUS Information in Extended LIST\n* [5957](https://tools.ietf.org/html/rfc5957): Display-Based Address Sorting for the IMAP4 SORT Extension (Updates rfc5256)\n* [6154](https://tools.ietf.org/html/rfc6154): IMAP LIST Extension for Special-Use Mailboxes\n* [6203](https://tools.ietf.org/html/rfc6203): IMAP4 Extension for Fuzzy Search\n* [6237](https://tools.ietf.org/html/rfc6237): IMAP4 Multimailbox SEARCH Extension (Obsoletes rfc4466)\n* [6531](https://tools.ietf.org/html/rfc6531): SMTP Extension for Internationalized Email (Obsoletes rfc5336)\n* [6851](https://tools.ietf.org/html/rfc6851): Internet Message Access Protocol (IMAP) - MOVE Extension\n* [6855](https://tools.ietf.org/html/rfc6855): IMAP Support for UTF-8 (Obsoletes rfc5738)\n* [6856](https://tools.ietf.org/html/rfc6856): Post Office Protocol Version 3 (POP3) Support for UTF-8 (Obsoletes rfc5721)\n* [7162](https://tools.ietf.org/html/rfc7162): IMAP Extensions: Quick Flag Changes Resynchronization (CONDSTORE) and Quick Mailbox Resynchronization (QRESYNC) (Obsoletes rfc4551, rfc5162) (Updates rfc2683)\n* [7377](https://tools.ietf.org/html/rfc7377): IMAP4 Multimailbox SEARCH Extension (Obsoletes rfc6237) (Updates rfc4466)\n* [7628](https://tools.ietf.org/html/rfc7628): A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth\n* [7677](https://tools.ietf.org/html/rfc7677): SCRAM-SHA-256 and SCRAM-SHA-256-PLUS Simple Authentication and Security Layer (SASL) Mechanisms (Updates rfc5802)\n* [7888](https://tools.ietf.org/html/rfc7888): IMAP4 Non-synchronizing Literals (Obsoletes rfc2088)\n* [7889](https://tools.ietf.org/html/rfc7889): The IMAP APPENDLIMIT Extension\n* [8437](https://tools.ietf.org/html/rfc8437): IMAP UNAUTHENTICATE Extension for Connection Reuse (Updates rfc3501)\n* [8438](https://tools.ietf.org/html/rfc8438): IMAP Extension for STATUS=SIZE\n* [8440](https://tools.ietf.org/html/rfc8440): IMAP4 Extension for Returning MYRIGHTS Information in Extended LIST\n* [8457](https://tools.ietf.org/html/rfc8457): IMAP \"$Important\" Keyword and \"\\Important\" Special-Use Attribute\n* [8474](https://tools.ietf.org/html/rfc8474): IMAP Extension for Object Identifiers\n* [8508](https://tools.ietf.org/html/rfc8508): IMAP REPLACE Extension (Updates rfc3501)\n* [8514](https://tools.ietf.org/html/rfc8514): Internet Message Access Protocol (IMAP) - SAVEDATE Extension\n* [8689](https://tools.ietf.org/html/rfc8689): SMTP Require TLS Option\n* [8970](https://tools.ietf.org/html/rfc8970): IMAP4 Extension: Message Preview Generation\n* [9051](https://tools.ietf.org/html/rfc9051): Internet Message Access Protocol (IMAP) - Version 4rev2\n* [9208](https://tools.ietf.org/html/rfc9208): IMAP QUOTA Extension (Obsoletes rfc2087)\n* [9394](https://tools.ietf.org/html/rfc9394): IMAP PARTIAL Extension for Paged SEARCH and FETCH\n"
        },
        {
          "name": "ReleaseNotes.md",
          "type": "blob",
          "size": 76.474609375,
          "content": "# Release Notes\n\n## MailKit 4.9.0 (2024-12-09)\n\n* Added an IMAP work-around for mail.ru which sometimes sends integer tokens as decimals in its responses.\n  (issue [#1838](https://github.com/jstedfast/MailKit/issues/1838))\n* Added a workaround for GMail IMAP BODY responses that include multipart expressions without any children\n  (e.g. `(\"ALTERNATIVE\")`). (issue [#1841](https://github.com/jstedfast/MailKit/issues/1841))\n* Fixed default system proxy to handle null credentials and check if the targetUri is bypassed.\n  (issue [#1852](https://github.com/jstedfast/MailKit/issues/1852))\n* Dropped support for net6.0 (Microsoft support ended Nov 12, 2024).\n* Bumped System.Threading.Tasks.Extensions dependency to 4.6.0.\n* Bumped MimeKit dependency to 4.9.0.\n\n## MailKit 4.8.0 (2024-09-29)\n\n* Added a UniqueIdRange.SortOrder property.\n* Updated the protocol log help link for ProtocolExceptions.\n  (issue [#1800](https://github.com/jstedfast/MailKit/issues/1800))\n* Fix SmtpClient.Dispose() when telemetry is configured.\n  (issue [#1816](https://github.com/jstedfast/MailKit/issues/1816))\n* Added ProxyClient.SystemProxy as a convenience property that wraps\n  the default system proxy (aka HttpClient.DefaultProxy) on net6.0+.\n\n## MailKit 4.7.1 (2024-07-12)\n\n* Fixed ImapClient and Pop3Client.Connect/Async() when OTEL is enabled.\n  (issue [#1765](https://github.com/jstedfast/MailKit/issues/1765))\n* Bumped MimeKit dependency to 4.7.1 to fix a denial of service security issue in the System.Formats.Asn1\n  dependency.\n\n## MailKit 4.7.0 (2024-06-29)\n\n* Added Activity/Metrics for Imap/Pop3/SmtpClient.\n  (issue [#1499](https://github.com/jstedfast/MailKit/issues/1499))\n* Bumped MimeKit dependency to 4.7.0.\n\n## MailKit 4.6.0 (2024-05-17)\n\n* Swallow SMTP RSET exceptions. These obscure other Send/SendAsync exceptions. Fixes a regression\n  introduced in 4.4.0. (issue [#1748](https://github.com/jstedfast/MailKit/issues/1748))\n* Fixed ImapUtils.FormatInternalDate() to properly handle negative timezone offsets with non-zero minutes.\n  (issue [#1743](https://github.com/jstedfast/MailKit/pull/1753))\n* Bumped MimeKit dependency to 4.6.0.\n\n## MailKit 4.5.0 (2024-04-13)\n\n* Added a new SmtpClient.RequireTLS property to fix sending mail via Strato.de.\n  (issue [#1737](https://github.com/jstedfast/MailKit/issues/1737))\n* Fixed SmtpClient to track the most recent response from the SMTP server in order to include\n  it in SmtpProtocolExceptions caused by unexpected server disconnects to provide more context.\n  (issue [#1744](https://github.com/jstedfast/MailKit/issues/1744))\n* Bumped MimeKit dependency to 4.5.0.\n\n## MailKit 4.4.0 (2024-03-02)\n\n* Added net8.0 targets\n* Split more sync/async logic to reduce allocations made by async state machines when\n  calling the synchronous public APIs instead of the async APIs.\n  (issue [#1335](https://github.com/jstedfast/MailKit/issues/1335))\n* Fixed logic for formatting IMAP FETCH HEADER.FIELDS.NOT corner case that was exposed by newly\n  added unit tests.\n* Fixed SmtpClient to disconnect during Authenticate/Async on socket errors.\n* Fixed SmtpClient's re-EHLO logic to disconnect on errors.\n* Added workaround for Zoho IMAP servers returning MODSEQ -1.\n  (issue [#1686](https://github.com/jstedfast/MailKit/issues/1686))\n* Added workaround for some IMAP servers that use () instead of NIL for an unset Content-Location header\n  in the BODYSTRUCTURE response.\n  (issue [#1700](https://github.com/jstedfast/MailKit/issues/1700))\n* Fixed an issue in the Socket.ConnectAsync logic that could result in unhandled exceptions on the\n  async thread if the ConnectAsync was cancelled.\n  (issue [#1703](https://github.com/jstedfast/MailKit/issues/1703))\n* Added work-around for Yandex IMAP GetBodyPart() response not including content.\n  (issue [#1708](https://github.com/jstedfast/MailKit/issues/1708))\n* Bumped MimeKit dependency to 4.4.0.\n\n## MailKit 4.3.0 (2023-11-11)\n\n* Fixed an ArgumentOutOfRangeException error in Fetch(int min, int max, ...) where min and max were greater\n  than folder.Count. (issue [#1640](https://github.com/jstedfast/MailKit/issues/1640))\n* Fixed parsing of IMAP FETCH (message/stream) responses with unsolicited FLAGS.\n* Fixed support for the IMAP FILTERS extension. Previously this extension was not properly detected.\n* When parsing IMAP CAPABILITIES, treat lone '+' tokens as atoms.\n  (issue [#1654](https://github.com/jstedfast/MailKit/issues/1654))\n* Bumped MimeKit dependency to 4.3.0.\n\n## MailKit 4.2.0 (2023-09-02)\n\n* Fixed a bug where the HttpProxyClient and HttpsProxyClient could end up reading the mail server greeting,\n  causing a connection failure for the ImapClient/Pop3Client/SmtpClient.\n  (issue [#1603](https://github.com/jstedfast/MailKit/issues/1603))\n* Parse IMAP quota values as ulongs instead of uints for GMail compatibility.\n  (issue [#1602](https://github.com/jstedfast/MailKit/issues/1602))\n* Added support for decoding SMTP DATA to the SmtpDataFilter.\n  (issue [#1607](https://github.com/jstedfast/MailKit/issues/1607))\n* Added a Pop3Client.Size property. (issue [#1623](https://github.com/jstedfast/MailKit/issues/1623))\n* Refactored more ImapClient commands to split sync/async implementations in order to improve\n  performance and reduce GC pressure. (issue [#1335](https://github.com/jstedfast/MailKit/issues/1335))\n* Added new IMailFolder.GetStream() methods that just take a uid/index and a BodyPart.\n* Added IMailFolder.GetStream/Async() methods that just take a uid or index.\n* Improved initial `List<IMessageSummary>` capacity estimation for `Fetch (IList<UniqueId>, ...)`.\n* Fixed ByteArrayBuilder.TrimNewLine() to check array bounds properly.\n  (issue [#1634](https://github.com/jstedfast/MailKit/issues/1634))\n* Bumped MimeKit dependency to 4.2.0.\n\n## MailKit 4.1.0 (2023-06-17)\n\n* Fixed queueing logic for pipelining SMTP and POP3 commands.\n  (issue [#1568](https://github.com/jstedfast/MailKit/issues/1568))\n* Improve SslHandshakeException diagnostic messages.\n  (issue [#1554](https://github.com/jstedfast/MailKit/issues/1554))\n* Bumped System.Formats.Asn1 dependency to 7.0.0.\n* Bumped MimeKit dependency to 4.1.0.\n\n## MailKit 4.0.0 (2023-04-15)\n\n* Marked the AccessRight and UniqueId structs as readonly.\n* Fixed POP3 client logic to calculate the needed bytes before converting commands into into the output buffer.\n* Ported to MimeKit v4.0 and BouncyCastle v2.1.1.\n\n## MailKit 3.6.0 (2023-03-04)\n\n* Decrement ImapFolder.Count when ImapClient receives an untagged EXPUNGE notification and emit a CountChanged event.\n  (issue [#1509](https://github.com/jstedfast/MailKit/issues/1509))\n* Avoid using the NAMESPACE command for Exchange 2003.\n  (issue [#1512](https://github.com/jstedfast/MailKit/issues/1512))\n* Added support for rfc8970 (IMAP4 Extension: Message Preview Generation).\n\n## MailKit 3.5.0 (2023-01-27)\n\n* Fixed bitmasking logic in SmtpClient.cs for deciding whether to use the BDAT command.\n* Fixed HttpProxyClient to call GetConnectCommand() *before* connecting a socket to prevent memory leaks when\n  connecting fails.\n* Improved the IMAP BODYSTRUCTURE parser to better handle broken responses.\n* Fixed bug in Envelope.Parse/TryParse when given `(NIL NIL \"\" \"localhost\")`\n  (issue [#1471](https://github.com/jstedfast/MailKit/issues/1471))\n* Fixed SMTP client logic to calculate the needed bytes before converting commands into into the output buffer.\n  (issue [#1498](https://github.com/jstedfast/MailKit/issues/1498))\n* Fixed SmtpClient to replace _'s with -'s in the default LocalDomain string (used in HELO/EHLO commands).\n  (issue [#1501](https://github.com/jstedfast/MailKit/issues/1501))\n\n## MailKit 3.4.3 (2022-11-25)\n\n* Fixed potential memory leaks in Pop3Client.\n* Reverted SMTP pipelining of the DATA command. (issue [#1459](https://github.com/jstedfast/MailKit/issues/1459))\n* Fixed ImapFolder.Rename() to disallow renaming a folder to be a child of itself.\n* Fixed SmtpStream.ReadResponse/Async() to handle buffers that do not contain a complete line.\n  (issue [#1467](https://github.com/jstedfast/MailKit/issues/1467))\n\n## MailKit 3.4.2 (2022-10-24)\n\n* Fixed fetching of MessageSummaryItems.PreviewText if the octet count of the message body is 0.\n  (issue [#1430](https://github.com/jstedfast/MailKit/issues/1430))\n* Modified ImapFolder.Search(SearchOptions.None, query) work the same as ImapFolder.Search(query).\n  (issue [#1437](https://github.com/jstedfast/MailKit/issues/1437))\n* Improved performance of SmtpClient by reducing memory allocations and pipelining the DATA command when the PIPELINING\n  extension is available.\n* Refactored sync and async SmtpClient APIs such that the synchronous APIs no longer call methods marked with async in order\n  to reduce AsyncMethodBuilder state machines/allocations.\n* Modified SmtpClient to only send the ORCPT argument to RCPT TO if NOTIFY is specified.\n* Improved performance of Pop3Client by reducing memory allocations.\n* Refactored sync and async Pop3Client APIs such that the synchronous APIs no longer call methods marked with async in order\n  to reduce AsyncMethodBuilder state machines/allocations.\n* Improved IMAP's BODY/BODYSTRUCTURE parser to be able to scan ahead multiple tokens in order to better handle syntactically\n  incorrect responses in a more graceful way.\n  (issue [#1446](https://github.com/jstedfast/MailKit/issues/1446))\n* Improved IMAP's ENVELOPE parser to handle (\"Microsoft Exchange Server\" NIL NIL \".MISSING-HOST-NAME.\") in a more graceful way.\n  (issue [#1451](https://github.com/jstedfast/MailKit/issues/1451))\n\n## MailKit 3.4.1 (2022-09-12)\n\n* Reverted the socket connection change to allow Socket.Connect() to do DNS lookups for us. Turns out, Socket.Connect()\n  doesn't iterate over all returned IP addresses until it finds an IP address that it can successfully connect to\n  for a given hostname which is what we need to do.\n\n## MailKit 3.4.0 (2022-09-05)\n\n* Fixed a bug that caused ImapFolder.Fetch/FetchAsync to throw TaskCanceledException instead of allowing\n  the correct exception to bubble up. (issue [#1415](https://github.com/jstedfast/MailKit/issues/1415))\n* Simplified socket connection logic to allow Socket.Connect() to do DNS lookups for us.\n* Updated common mail server SSL certificates.\n* Dropped net5.0 support.\n\n## MailKit 3.3.0 (2022-06-11)\n\n* Added work-around for IMAP BODYSTRUCTURE responses that have a NIL multipart body.\n  (issue [#1393](https://github.com/jstedfast/MailKit/issues/1393))\n* Considerably reduced memory overhead from compiler-generated async/await Tasks allocations in the IMAP\n  implementation (mostly focused on FETCH commands/responses).\n  (issue [#1335](https://github.com/jstedfast/MailKit/issues/1335))\n* Optimized FETCH response processing for the common case where FETCH responses are returned in sorted order.\n* Fixed the IMAP Literal string reader to use UTF-8 with fallback to iso-8859-1 (previously just used iso-8859-1).\n* Modified the IMAP ENVELOPE parser to combine ENVELOPE mailbox tokens if there are more than 4.\n  (issue [#1369](https://github.com/jstedfast/MailKit/issues/1369))\n* Prevent TypeLoadExceptions in the SmtpClient static .ctor by catching NotSupportedExceptions thrown by\n  IPGlobalProperties.GetIPGlobalProperties() on platforms like WASM.\n  (issue [#1381](https://github.com/jstedfast/MailKit/issues/1381))\n* Updated Google, GMX, and Yahoo! Mail SSL certificates.\n* Dropped support for net452 and net461.\n* Added support for net462.\n\n## MailKit 3.2.0 (2022-03-26)\n\n* Do not use ApplicationProtocols with SSL. (issue [#1352](https://github.com/jstedfast/MailKit/issues/1352))\n* Updated GMail, Yahoo, and Outlook.com certificates.\n* Lazy-initialize MessageSummary.Keywords. This reduces memory usage when the client isn't requesting Flags/Keywords.\n* Hard-cache some IMAP FETCH-related tokens in order to relieve GC pressure for commands like FETCH where there can\n  be a LOT of responses containing the same tokens over and over again.\n* Converted some IMAP async Task methods to use ValueTask to reduce GC pressure.\n* Reduced string allocations in the IMAP logic by avoiding use of ToUpperInvariant().\n* Added non-async implementations for ImapStream APIs to be used by the synchronous public APIs to avoid some async overhead.\n* Reduce MemoryStream (and thus byte[]) allocations by using a new ByteArrayBuilder.\n* Rewrote the IMAP CAPABILITY parser to avoid allocating strings.\n* Fixed some cases where IMAP NIL tokens were not compared case insensitively.\n* Always include the VERSION block in NTLM messages. (issue [#1340](https://github.com/jstedfast/MailKit/issues/1340))\n* Target .NET Framework v4.6.1 instead of v4.6 to match the changes in MimeKit.\n* Capture the Socket timeout value in Read/WriteAsync() to have it in case of exceptions.\n  (issue [#1327](https://github.com/jstedfast/MailKit/issues/1327))\n\n## MailKit 3.1.1 (2022-01-30)\n\n* Reduced string allocations in Pop3Engine's capability parser.\n* Updated GMail and Outlook.com SSL certificates.\n* Modified SmtpClient to try and use the system hostname in EHLO/HELO commands.\n  (issue [#1314](https://github.com/jstedfast/MailKit/issues/1314))\n\n## MailKit 3.1.0 (2022-01-14)\n\n* Fixed NTLM to always prefer the supplied domain over the TargetName or TargetInfo.DomainName.\n  (issue [#582](https://github.com/jstedfast/MailKit/issues/582))\n* Updated GMail and Outlook.com SSL certificate info.\n* Added a new SslCipherSuite property to each client that allows developers to get information\n  about the SSL/TLS cipher suite that was negotiated with the server.\n  (pull [#1312](https://github.com/jstedfast/MailKit/pull/1312))\n* Reduced string allocations in SmtpClient's EHLO capability parsing logic.\n* Default ProtocolLogger.RedactSecrets to true for added added security.\n* Added work-around for parsing malformed GMail ENVELOPE responses that reverse the name and address components\n  of the Sender address. (pull [#1319](https://github.com/jstedfast/MailKit/pull/1319))\n* Added net6.0 to the list of TargetFrameworks.\n\n## MailKit 3.0.0 (2021-12-11)\n\n* Removed APIs marked as \\[Obsolete\\] in 2.x.\n* Simplify Fetch()/FetchAsync() APIs by using a new IFetchRequest parameter instead. Made previous APIs into\n  extension methods to aid in porting from 2.x.\n* Replaced Add/Remove/SetFlags() APIs with Store()/StoreAsync() and simplified the APIs by using a new\n  IStoreFlagsRequest parameter. Made previous APIs into extension methods to aid in porting from 2.x.\n* Replaced Add/Remove/SetLabels() APIs with Store()/StoreAsync() and simplified the APIs by using a new\n  IStoreLabelsRequest parameter. Made previous APIs into extension methods to aid in porting from 2.x.\n* Simplify Append()/AppendAsync() APIs by using a new IAppendRequest parameter instead. Made previous APIs into\n  extension methods to aid in porting from 2.x.\n* Simplify Replace()/ReplaceAsync() APIs by using a new IReplaceRequest parameter instead. Made previous APIs into\n  extension methods to aid in porting from 2.x.\n* Updated SmtpClient.Send()/SendAsync() methods to return a string.\n  (issue [#1161](https://github.com/jstedfast/MailKit/issues/1161))\n* Added support for the SCRAM-SHA*-PLUS SASL mechanisms.\n  (issue [#950](https://github.com/jstedfast/MailKit/issues/950))\n* Added authzid support for SCRAM SASL mechanisms.\n* Added support for the ANONYMOUS SASL mechanism.\n* Added support for an HttpsProxyClient. (issue [#1251](https://github.com/jstedfast/MailKit/issues/1251))\n* Added AcceptedKeywords and PermanentKeywords to IMailFolder.\n  (issue [#1256](https://github.com/jstedfast/MailKit/issues/1256))\n* Rewrote NTLM support based on official specs. Now supports channel-binding and using the default system credentials.\n* Modified ImapFolder.Fetch(int, int, ...) to shortcut if ImapFolder.Count == 0.\n* Updated SmtpClient to append an ORCPT arg to RCPT TO commands and to hex-encode the ENVID parameter value.\n* Improved/simplified logic for ranking SASL authentication mechanisms for each client.\n* Added SaslMechanism.ChallengeAsync() to facilitate future SASL mechanisms that may need to make network requests\n  such as Kerberos/GSSAPI and perhaps even future/custom OAuth2 implementations.\n* Always set SearchResults.Count/Min/Max properties if we can.\n* Throw TimeoutException is case of a network time out.\n  (issue [#1269](https://github.com/jstedfast/MailKit/issues/1269))\n* Fixed parsing of IMAP flag lists to handle lowercase flag names.\n  (issue [#1277](https://github.com/jstedfast/MailKit/issues/1277))\n* Use OrdinalIgnoreCase when comparing \"EARLIER\" atom token.\n* Avoid unnecessary string copies. (issue [#1292](https://github.com/jstedfast/MailKit/pull/1292))\n* Drop support for .NET 4.5 and replace it with .NET 4.5.2\n* Simplified event emissions based on EXISTS and EXPUNGED notifications. A CountChanged event is now *always*\n  emitted when the server sends an EXISTS notification.\n  (issue [#1288](https://github.com/jstedfast/MailKit/issues/1288))\n\n## MailKit 2.15.0 (2021-08-18)\n\n* Use DebugType=full for .NET Framework v4.x. (issue [#1239](https://github.com/jstedfast/MailKit/issues/1239))\n* Updated GMail SSL certificate serial numbers and fingerprints.\n* Small NTLM code improvements.\n\n## MailKit 2.14.0 (2021-07-28)\n\n* Added support for logging timestamps in the `ProtocolLogger` (see the `LogTimestamps` and `TimestampFormat`\n  properties on `ProtocolLogger`).\n* Added support for automatically redacting user credentials in protocol logs. To enable this, set the\n  `ProtocolLogger.RedactSecrets` property to `true`. (issue [#1174](https://github.com/jstedfast/MailKit/issues/1174))\n* Added the GetMessageSizeAsync() method to the IMailSpool interface.\n  (issue [#1233](https://github.com/jstedfast/MailKit/issues/1233))\n* Added a work-around to the IMAP INTERNALDATE parser to handle invalid dates such as \"00-Jan-0000 00:00:00 +0000\"\n  which appears in Domino IMAP server responses, likely when the INTERNALDATE value is uninitialized in the database.\n  (issue [#1236](https://github.com/jstedfast/MailKit/issues/1236))\n* Make sure to dispose X509Certificates in .NET >= 4.6.\n* Re-added NTLM as one of the default supported SASL mechanisms.\n* Updated GMail SSL certificate serial numbers and fingerprints.\n\n## MailKit 2.13.0 (2021-06-12)\n\n* Added new properties to all clients to get SSL cipher/hash/protocol/key-exchange info.\n  (issue [#1175](https://github.com/jstedfast/MailKit/issues/1175))\n* Added support for GMail's WEBALERT resp-code.\n  (issue [#1214](https://github.com/jstedfast/MailKit/issues/1214))\n* Updated GMail SSL certificate serial numbers and fingerprints.\n\n## MailKit 2.12.0 (2021-05-12)\n\n* Fixed the .NET 5.0 build to include .NET 5.0-specific features. Previous releases incorrectly used\n  #if NET50 instead of #if NET5_0. (issue [#1140](https://github.com/jstedfast/MailKit/issues/1140))\n* Added support for NETStandard 2.1. (issue [#1181](https://github.com/jstedfast/MailKit/issues/1181))\n* .NETStandard 2.1 and .NET 5.0 versions of MailKit now use the newer SslStream.AuthenticateAsClientAsync()\n  methods that take SslClientAuthenticationOptions and CancellationToken arguments. In theory, this should\n  make upgrading a TCP/IP connection to SSL/TLS cancellable. Older .NET frameworks remain uncancellable for\n  this operation.\n* Fixed a NullReferenceException bug in the NTLM SASL mechanism logic.\n* Updated hard-coded SSL certificate serial numbers and fingerprints for common mail servers.\n\n## MailKit 2.11.1 (2021-03-16)\n\n* Added work-around for IMAP servers that do not correctly handle the ESEARCH `RETURN ()` syntax\n  the same as `RETURN (ALL)`. (issue [#1177](https://github.com/jstedfast/MailKit/issues/1177))\n\n## MailKit 2.11.0 (2021-03-12)\n\n* Handle BAD responses to the NAMESPACE command for Exchange.\n  (issue [#1135](https://github.com/jstedfast/MailKit/issues/1135))\n* Added support for configuring SSL/TLS cipher algorithms (only available in the .NET 5.0 API).\n  (issue [#1140](https://github.com/jstedfast/MailKit/issues/1140))\n* Updated GMail and Yahoo! Mail SSL certificate info.\n* Protect against NREs in NTLM authentication of no OSVersion is set.\n  (issue [#1148](https://github.com/jstedfast/MailKit/issues/1148))\n* Added work-around for hMailServer bug that doesn't accept seq-ranges in descending order.\n  (issue [#1150](https://github.com/jstedfast/MailKit/issues/1150))\n* Properly escape IPv6 addresses for Uri in order to allow Connect/Async methods to work with IPv6 addresses.\n  (issue [#1165](https://github.com/jstedfast/MailKit/issues/1165))\n* Added IsEncrypted and IsSigned properties to IMailService.\n  (issue [#1175](https://github.com/jstedfast/MailKit/issues/1175))\n\n## MailKit 2.10.1 (2021-01-02)\n\n* A few NTLM improvements that I hope are correct.\n\n## MailKit 2.10.0 (2020-11-20)\n\n* Don't enable support for TLS v1.1 by default anymore.\n  (issue [#1077](https://github.com/jstedfast/MailKit/issues/1077))\n* Added support for the SCRAM-SHA-512 SASL mechanism.\n  (issue [#1097](https://github.com/jstedfast/MailKit/issues/1097))\n* Added support for the OAUTHBEARER SASL mechanism.\n* Updated SSL certificate info for the common mail servers (GMail, outlook.com, Yahoo! Mail, etc).\n* Improved the SslHandshakeException error message to report common mistakes like trying to initiate\n  an SSL connection on a non-SSL port.\n* Improved IMAP's \"Unexpected token\" exception messages a bit\n* Updated code to use ArrayPools from System.Buffers.\n\n## MailKit 2.9.0 (2020-09-12)\n\n* Refactored Connect/ConnectAsync() logic to set timeouts *before* calling SslStream.AuthenticateAsClient()\n  when connecting to an SSL-wrapped service.\n  (issue [#1059](https://github.com/jstedfast/MailKit/issues/1059))\n* Hardcode the value of SslProtocols.Tls13 for frameworks that do not support it and add it to the\n  client's default SslProtocols. This adds TLS v1.3 support, by default, for apps using .NETStandard2.0\n  where the app project is built against a version of .NETCore that supports TLS v1.3.\n  (issue [#1058](https://github.com/jstedfast/MailKit/issues/1058))\n* Initialize IMAP SearchResults with the UIDVALIDITY value.\n  (issue [#1060](https://github.com/jstedfast/MailKit/issues/1060))\n* Make sure the ImapStream is not null (can be null if user calls Disconnect() causing IDLE to abort).\n  (issue [#1025](https://github.com/jstedfast/MailKit/issues/1025))\n* Case-insensitively match IMAP folder attribute flags (e.g. \\HasNoChildren and \\NoSelect).\n* Added support for the IMAP SAVEDATE extension.\n* Added support for detecting SMTP's REQUIRETLS extension.\n\n## MailKit 2.8.0 (2020-07-11)\n\n* Make sure to use the InvariantCulture when converting port values to a string.\n  (issue [#1040](https://github.com/jstedfast/MailKit/issues/1040))\n* Fixed other instances of string formatting for integer values to always use\n  CultureInfo.InvariantCulture.\n* Added a work-around for broken IMAP servers that allow NIL message flags.\n  (issue [#1042](https://github.com/jstedfast/MailKit/issues/1042))\n\n## MailKit 2.7.0 (2020-05-30)\n\n* Added a MessageSummary.Folder property and MessageThread.Message property\n  to allow developers to thread messages from multiple IMAP folders and be\n  able to figure out which folder each message belongs to.\n* Added a work-around for IMAP servers that send a UIDNEXT response with a\n  value of '0'. (issue [#1010](https://github.com/jstedfast/MailKit/issues/1010))\n* Added an IMailFolder.Supports(FolderFeature) method so that developers can check\n  whether a feature is supported by the folder without needing a reference to the\n  corresponding ImapClient object in order to check the Capabilities.\n* Fixed the HTTP proxy client to accept \"200 OK\" with an empty body as a successful\n  connection. (issue [#1015](https://github.com/jstedfast/MailKit/issues/1015))\n* Fixed the SOCKS5 proxy client to correctly send an authentication request.\n  (issue [#1019](https://github.com/jstedfast/MailKit/issues/1019))\n* Added support for customizable ProtocolLogger client/server prefixes.\n  (issue [#1024](https://github.com/jstedfast/MailKit/issues/1024))\n* Fixed an NRE in SslHandshakeException.Create() when running on Mono/Linux.\n* Modified the SmtpClient to take advantage of the SMTPUTF8 extension for the\n  `MAIL FROM` and `RCPT TO` commands even if a `options.International` is not\n  explicitly set to `true` if any of the mailbox addresses are international\n  addresses.\n  (issue [#1026](https://github.com/jstedfast/MailKit/issues/1026))\n* Added support for a new Important SpecialFolder ([rfc8457](https://tools.ietf.org/html/rfc8457)).\n* Added support for the IMAP REPLACE extension ([rfc8508](https://tools.ietf.org/html/rfc8508)).\n* NuGet packages now include the portable pdb's.\n\n## MailKit 2.6.0 (2020-04-03)\n\n* Properly handle connection drops in SmtpClient.NoOp() and NoOpAsync()\n  methods.\n* Improved default SSL certificate validation logic to be more secure\n  and to recognize the most commonly used mail servers even if their\n  Root CA Certificates are not available on the system.\n* SslHandshakeException's Message has been improved to be based on the\n  errors reported in the ServerCertificateValidationCallback and also\n  now has 2 new X509Certificate properties which represent the\n  ServerCertificate and the RootCertificateAuthority in order to help\n  developers diagnose problems.\n  (issue [#1002](https://github.com/jstedfast/MailKit/issues/1002))\n* Improved the IMAP PreviewText to extract text from HTML bodies.\n  (issue [#1001](https://github.com/jstedfast/MailKit/issues/1001))\n* Renamed MessageSummaryItems.Id to MessageSummaryItems.EmailId to\n  better map to the property name used in the IMAP OBJECTID\n  specification.\n* Updated NetworkStream.ReadAsync() and WriteAsync() methods to make use of\n  timeouts. (issue [#827](https://github.com/jstedfast/MailKit/issues/827))\n\n## MailKit 2.5.2 (2020-03-14)\n\n* Added work-around for ENVELOPE responses with a NIL address token in an address-list.\n  (issue [#991](https://github.com/jstedfast/MailKit/issues/991))\n\n## MailKit 2.5.1 (2020-02-15)\n\n* Fixed the IMAP ENVELOPE parser to have a more lenient fallback if it fails to be able to\n  parse the Message-Id token value.\n  (issue [#976](https://github.com/jstedfast/MailKit/issues/976))\n* Fixed MailService.DefaultServerCertificateValidationCallback() to compare certificates by\n  their hashes rather than via Object.Equals().\n  (issue [#977](https://github.com/jstedfast/MailKit/issues/977))\n* Added work-around for IMAP servers that send `-1` as a line count or octet count in the\n  BODYSTRUCTURE response.\n\n## MailKit 2.5.0 (2020-01-18)\n\n* Ignore NIL tokens in the body-fld-lang token list.\n  (issue [#953](https://github.com/jstedfast/MailKit/issues/953))\n* Added logic to handle unexpected `<CR><LF>` in untagged FETCH responses.\n  (issue [#954](https://github.com/jstedfast/MailKit/issues/954))\n* Added a way to override SmtpClient's preference for using BDAT vs DATA\n  via a new PreferSendAsBinaryData virtual property.\n* Update SslHandshakeException message to mention the possibility of SSL/TLS\n  version mismatch.\n  (issue [#957](https://github.com/jstedfast/MailKit/issues/957))\n* Fixed ImapFolder.GetStreamsAsync() to use an async callback delegate.\n  (issue [#958](https://github.com/jstedfast/MailKit/issues/958))\n* Added protocol-specific interfaces that inherit from IMailFolder,\n  IMailStore, etc.\n  (issue [#960](https://github.com/jstedfast/MailKit/issues/960))\n* Maintain the STARTTLS capability bit flag after a STARTTLS command.\n* Don't send the optional ANNOTATE parameter to SELECT/EXAMINE for\n  SUN IMAP servers (such as Apple's IMAP servers).\n  (issue [#970](https://github.com/jstedfast/MailKit/issues/970))\n\nNote: Developers using ImapFolder.GetStreamsAsync() will need to update their code as\nthis release breaks API/ABI.\n\n## MailKit 2.4.1 (2019-11-10)\n\n* Don't use PublicSign on non-Windows NT machines when building.\n* Work-around broken BODYSTRUCTUREs with `()` as a message/rfc822 body token.\n  (issue [#944](https://github.com/jstedfast/MailKit/issues/944))\n* Added work-around for an Exchange bug that forgets to quote folder names containing tabs.\n  (issue [#945](https://github.com/jstedfast/MailKit/issues/945))\n* Moved the SmtpDataFilter into the public API and updated the FAQ to show how to\n  use it when writing messages into an IIS \"pickup directory\".\n  (issue [#948](https://github.com/jstedfast/MailKit/issues/948))\n\n## MailKit 2.4.0 (2019-11-02)\n\n* Added work-around for IMAP ENVELOPE responses that do not include an In-Reply-To token.\n  (issue [#932](https://github.com/jstedfast/MailKit/issues/932))\n* Dropped support for WindowsPhone/Universal v8.1.\n* Added a net48 assembly to the NuGet package which supports TLS v1.3.\n* Added work-around for Yandex IMAP servers to disconnect immediately upon `* BYE`.\n  (issue [#938](https://github.com/jstedfast/MailKit/issues/938))\n* Fixed ImapClient.Idle() and IdleAsync().\n  (issue [#942](https://github.com/jstedfast/MailKit/issues/942))\n* Added work-around for Lotus Domino where it adds extra ()'s around some FETCH items.\n  (issue [#943](https://github.com/jstedfast/MailKit/issues/943))\n\n## MailKit 2.3.2 (2019-10-12)\n\n* Fixed trimming delimiters from the end of IMAP folder names.\n* Fixed fetching of IMAP PreviewText when message bodies do not contain any text parts.\n* Fixed Pop3Client to never emit Authenticated events w/ null messages.\n* Dropped SslProtocols.Tls (aka TLSv1.0) from the default SslProtocols used by IMAP, POP3\n  and SMTP clients. To override this behavior, use the client.SslProtocols property\n  to set the preferred SslProtocol(s).\n* Fixed ImapFolder.Search(string query) to properly encode the query string when the query\n  contains unicode characters.\n* If an IMAP SEARCH fails due to BADCHARSET, retry the search query after flattening the\n  query strings into US-ASCII. This *may* fix issues such as\n  issue [#808](https://github.com/jstedfast/MailKit/issues/808).\n* Added work-arounds for Exchange IMAP bugs causing it to send mal-formed body-fld-dsp\n  parameters. (issue [#919](https://github.com/jstedfast/MailKit/issues/919))\n* Go back to only using the BDAT command when the user is sending BINARYMIME in the SmtpClient.\n  (issue [#921](https://github.com/jstedfast/MailKit/issues/921))\n\n## MailKit 2.3.1 (2019-09-08)\n\n* Fixed SmtpClient.Send*() to make sure never to add an extra CRLF sequence to the end of\n  messages when sending via the DATA command.\n  (issue [#895](https://github.com/jstedfast/MailKit/issues/895))\n* Added assemblies for net46 and net47 to the NuGet package.\n\n## MailKit 2.3.0 (2019-08-24)\n\n* Improved the default SSL/TLS certificate validation logic.\n* Improved exception messages for the POP3 LIST and STAT commands.\n* Modified Pop3Client to accept negative values for the 'octets' value in the STAT response.\n  (issue [#872](https://github.com/jstedfast/MailKit/issues/872))\n* Added work-around for IMAP BODYSTRUCTURE responses that treat multiparts as basic parts.\n  (issue [#878](https://github.com/jstedfast/MailKit/issues/878))\n* Added check to make sure that MD5 is supported by the runtime and automatically disable\n  support for CRAM-MD5 and DIGEST-MD5 SASL mechanisms when MD5 is not supported.\n* Added a Stream property to ProtocolLogger.\n* Fixed fetching of PreviewText items if the body's ContentTransferEncoding is NIL.\n  (issue [#881](https://github.com/jstedfast/MailKit/issues/881))\n* Improved processing of pipelined SMTP commands to provide better exception messages.\n  (issue [#883](https://github.com/jstedfast/MailKit/issues/883))\n* Modified SmtpClient.Send*() to not call MimeMessage.Prepare() if any DKIM or ARC headers\n  are present in order to avoid the potential risk of altering the message and breaking\n  the signatures within those headers.\n* Added SmtpClient.SendCommand() and SendCommandAsync() to allow custom subclasses the\n  ability to send custom commands to the SMTP server.\n  (issue [#891](https://github.com/jstedfast/MailKit/issues/891))\n* Allow SmtpClient subclasses to override message preparation by overriding a new\n  SmtpClient.Prepare() method.\n  (issue [#891](https://github.com/jstedfast/MailKit/issues/891))\n* Improved ImapFolder's ModSeqChanged event to set the UniqueId property if available\n  in unsolicited FETCH notifications including a MODSEQ and UID value.\n* Fixed the IMAP client logic to properly handle lower or mixed case IMAP tokens.\n  (issue [#893](https://github.com/jstedfast/MailKit/issues/893))\n* Added support for IMAP's ANNOTATE-EXPERIMENT-1 extension.\n  (issue [#818](https://github.com/jstedfast/MailKit/issues/818))\n* Always use the SMTP BDAT command instead of DATA if CHUNKING is supported.\n  (issue [#896](https://github.com/jstedfast/MailKit/issues/896))\n* Improved SmtpClient to include a SIZE= parameter in the MAIL FROM command if the\n  SIZE extension is supported. Progress reporting will now always have the expected\n  message size available as well.\n\n## MailKit 2.2.0 (2019-06-11)\n\n* Optimized MailKit's logic for breaking apart long IMAP commands for\n  GMail, Dovecot, and Yahoo! Mail.\n* Fixed the IMAP stream tokenizer to properly handle UTF8 atom tokens.\n  (issue [#859](https://github.com/jstedfast/MailKit/issues/859))\n* Fixed IMAP search code to always handle untagged SEARCH responses even when\n  the response SHOULD be an untagged ESEARCH response.\n  (issue [#863](https://github.com/jstedfast/MailKit/issues/863))\n* Replaced SearchQuery.SentAfter with SentSince to be more consistent with IMAP\n  terminology.\n\n## MailKit 2.1.5 (2019-05-13)\n\n* Bumped the System.Net.Security dependency for security fixes (CVE-2017-0249).\n* Reduced explicit nuget dependencies.\n* Added a work-around for Microsoft Exchange IMAP servers that sometimes erroneously\n  respond with unneeded continuation responses.\n  (issue [#852](https://github.com/jstedfast/MailKit/issues/852))\n* Fixed the ImapClient to Stop looping over SASL mechanisms if the server disconnects us.\n  (issue [#851](https://github.com/jstedfast/MailKit/issues/851))\n* Added support for HTTP proxies. (issue [#847](https://github.com/jstedfast/MailKit/issues/847))\n* Fixed IMAP to properly handle EXPUNGE notifications during a FETCH request.\n  (issue [#850](https://github.com/jstedfast/MailKit/issues/850))\n\n## MailKit 2.1.4 (2019-04-13)\n\n* Fixed ImapUtils.GetUniqueHeaders() to accept all valid header field name characters.\n  (issue [#806](https://github.com/jstedfast/MailKit/issues/806))\n* Catch all exceptions thrown in IdleComplete().\n  (issue [#825](https://github.com/jstedfast/MailKit/issues/825))\n* Improved cancellability of IMAP, POP3 and SMTP clients when sending commands to the server.\n  (issue [#827](https://github.com/jstedfast/MailKit/issues/827))\n* Break apart IMAP commands with really long uid-sets.\n  (issue [#834](https://github.com/jstedfast/MailKit/issues/834))\n* Rewrote Connect logic to use Socket.Connect (IPAddress, int) instead of Connect (string, int)\n  in an attempt to fix [StackOverflow 87117](https://stackoverflow.com/q/55382267/87117)\n* Fixed SmtpStream.ReadAheadAsync() to preserve remaining input.\n  (issue [#842](https://github.com/jstedfast/MailKit/issues/842))\n\n## MailKit 2.1.3 (2019-02-24)\n\n* Fixed IMAP GetFolder() methods to match LIST responses case-insensitively.\n  (issue [#803](https://github.com/jstedfast/MailKit/issues/803))\n* Added a work-around to SmtpClient for a .NET 4.5.2 bug on Windows 7 SP1.\n  (issue [#814](https://github.com/jstedfast/MailKit/issues/814))\n* Added DeliveryStatusNotificationType and a property to SmtpClient to allow\n  developers to specify the `RET` parameter value to the `MAIL FROM` command.\n* Fixed a number of locations in the code to clear password buffers after using\n  them.\n* SmtpClient.Send() and SendAsync() methods that accept a FormatOptions argument\n  will no longer hide Bcc, Resent-Bcc, nor Content-Length headers when uploading\n  the raw message to the SMTP server. It is now up to callers to add these values\n  to their custom FormatOptions.HiddenHeaders property.\n  (issue [#360](https://github.com/jstedfast/MailKit/issues/360))\n\n## MailKit 2.1.2 (2018-12-30)\n\n* Fixed a bug in SmtpDataFilter. (issue [#788](https://github.com/jstedfast/MailKit/issues/788))\n* Fixed ImapFolder.Sort() to always return the UIDs in the correct order.\n  (issue [#789](https://github.com/jstedfast/MailKit/issues/789))\n* Fixed *Client.ConnectAsync() to more reliably abort when the cancellation token is cancelled.\n  (issue [#798](https://github.com/jstedfast/MailKit/issues/798))\n\n## MailKit 2.1.1 (2018-12-16)\n\n* Fixed ImapFolder.CopyTo() and ImapFolder.MoveTo() for IMAP servers that do not support UIDPLUS.\n  (issue [#787](https://github.com/jstedfast/MailKit/issues/787))\n* Fixed ImapClient.Connect() to capture authenticated state *before* calling OnConnected() so that\n  developers that call Authenticate() inside of the Connected event handler do not receive 2 Authenticated\n  events. (issue [#784](https://github.com/jstedfast/MailKit/issues/784))\n\n## MailKit 2.1.0 (2018-12-01)\n\n* A number of fixes to bugs exposed in new unit tests for NTLM authentication.\n* Made SmtpClient, Pop3Client, and ImapClient's Connect() methods truly cancellable as well\n  as made the underlying socket.Connect() call adhere to any specified client.Timeout value.\n* Added support for connecting via a SOCKS4, SOCKS4a, or SOCKS5 proxy server.\n* Fixed ImapClient's OnAuthenticated() method to protect against throwing an ArgumentNullException\n  when trying to emit the Authenticated event if the server did not supply any resp-code-text in\n  the OK response to the AUTHENTICATE command. (issue [#774](https://github.com/jstedfast/MailKit/issues/774))\n* Modified ImapFolder.Create() to handle [ALREADYEXISTS] resp-codes.\n* Fixed ImapFolder.Create() for GMail when the isMessageFolder parameter is false (GMail doesn't handle\n  it when the client attempts to create a folder ending with a directory separator).\n* Optimized ImapFolder's fallback for UID COPY command when UIDPLUS is not supported.\n* Reduced string allocations in the Connect(Uri) wrapper.\n* Added new ConnectedEventArgs and DisconnectedEventArgs that are used with the Connected and\n  Disconnected events to provide developers with even more useful information about what\n  server, port and SecureSocketOptions were used when connecting the client.\n* Fixed SmtpClient to immediately throw stream reading exceptions instead of ignoring them.\n  (issue [#776](https://github.com/jstedfast/MailKit/issues/776))\n* Fixed ImapClient.GetFoldersAsync() to call ImapFolder.StatusAsync() instead of Status()\n  when StatusItems are specified.\n* Changed ImapFolder.GetSubfolders() to return IList&lt;IMailFolder&gt; instead of IEnumerable&lt;IMailFolder&gt;.\n* Fixed ImapClient's NAMESPACE parser - it had Shared and Other namespace ordering reversed.\n* Fixed ImapFolder.Create() (for special-use) to only use unique uses if any were specified multiple times.\n* Modified ImapFolder.Open() to allow devs to re-Open() a folder with the same access in case they\n  need to do this to work around an IMAP server bug(?).\n* Fixed adding/removing/setting of GMail labels to use UTF-8 when enabled.\n* Added support for the IMAP STATUS=SIZE extension which now provides a ImapFolder.Size property\n  that specifies how large a folder is (in bytes). Clients can request this information using the\n  StatusItems.Size enum with either ImapFolder.GetSubfolders() or ImapFolder.Status().\n* Added support for the IMAP OBJECTID extension. ImapFolder and IMessageSummary now both have\n  an Id property which is a globally unique identifier. IMessageSummary also now has a ThreadId\n  property which is a unique identifier for the message thread/conversation that the message\n  belongs to. This information can be retrieved for ImapFolders using ImapFolder.Status() with the\n  new StatusItems.MailboxId enum value. The IMessageSummary.Id and ThreadId properties have\n  the corresponding MessageSummaryItems enum values of Id and ThreadId, respectively.\n* Added another work-around for bad GMail IMAP BODYSTRUCTURE responses.\n  (issue [#777](https://github.com/jstedfast/MailKit/issues/777))\n* Fixed all integer TryParse methods to use NumberStyles.None and CultureInfo.InvariantCulture.\n* Added Connect() and ConnectAsync() overloads which accept a Stream instead of a Socket.\n* All ImapFolder.MessageFlagsChanged, ModSeqChanged, and LabelsChanged events will now also be\n  followed by a MessageSummaryFetched event containing the combined information of those events.\n* Added support for IMAP's NOTIFY extension. Many thanks to [Steffen Kieß](https://github.com/steffen-kiess)\n  for getting the ball rolling on this feature by implementing the necessary ImapEvent, ImapEventGroup,\n  and ImapMailboxFilter classes as well as the initial support.\n\nAPI Changes Since 2.0.x:\n\n* Obsoleted SearchQuery.HasCustomFlags() and SearchQuery.DoesNotHaveCustomFlags(). These are\n  now SearchQuery.HasKeywords() and SearchQuery.NotKeywords(), respectively.\n* Obsoleted SearchQuery.DoesNotHaveFlags() in favor of SearchQuery.NotFlags().\n* Obsoleted the IMessageSummary.UserFlags property in favor of IMessageSummary.Keywords.\n* Obsoleted the MessageFlagsChangedEventArgs.UserFlags property in favor of\n  MessageFlagsChangedEventArgs.Keywords.\n* All IMailFolder.Fetch and IMailFolder.FetchAsync methods that took a HashSet&lt;string&gt; userFlags\n  argument now take an IEnumerable&lt;string&gt; keywords argument. Note: this only affects you if your\n  code used named method parameters (e.g. userFlags: myUserFlags).\n\n## MailKit 2.0.7 (2018-10-28)\n\n* Added a work-around for Exchange IMAP servers that send broken multipart BODYSTRUCTURE responses\n  without a `body-fld-dsp` token.\n* Added support for detecting (but not using) the UNAUTHENTICATE IMAP extension.\n* Reintroduced the Pop3Client.GetMessageCount() and GetMessageCountAsync() methods to allow developers\n  to poll POP3 servers for new messages. (issue [#762](https://github.com/jstedfast/MailKit/issues/762))\n* Fixed SmtpClient's status code logic to handle more than the expected error codes for the\n  `MAIL FROM` and `RCPT TO` commands. (issue [#764](https://github.com/jstedfast/MailKit/issues/764))\n* Added a work-around for IMAP servers that quote FLAGS responses.\n  (issue [#771](https://github.com/jstedfast/MailKit/issues/771))\n* Optimized SmtpClient's logic for byte-stuffing the message when writing it to the socket during\n  the `DATA` command.\n* Added an `SslProtocols` property to IMailService (was already in MailService).\n* Fixed the DIGEST-MD5 charset handling.\n* Fixed a bug in the BodyPart.TryParse() method that could be used when serializing and deserializing\n  FETCH'd responses from an IMAP server.\n* Fixed BodyPartCollection.IndexOf(Uri).\n* Fixed Envelope.ToString() and TryParse() to properly deal with the rfc822 group address syntax.\n* Fixed the ImapClient logic to properly handle parsing nested group addresses (not likely that\n  anyone would hit this).\n* Improved ImapClient's state tracking so that it is possible to re-connect the ImapClient in the\n  Disconnected event handler. (issue [#770](https://github.com/jstedfast/MailKit/issues/770))\n* Fixed IMAP API's that take IList of UIDs or indexes to accept 0 UIDs/indexes.\n* Fixed ImapClient's BODYSTRUCTURE parser to properly handle multiple body-extensions tokens.\n* Fixed ImapClient to properly handle the `* PREAUTH` greeting when connecting to an IMAP server.\n\n## MailKit 2.0.6 (2018-08-04)\n\n* Fixed ImapFolder.GetSubfolders (StatusItems) to make sure that the child folders exist before\n  calling STATUS on them when the server does not support the LIST-STATUS command.\n* Catch ArgumentExceptions when calling Encoding.GetEncoding(string).\n  (issue [#740](https://github.com/jstedfast/MailKit/issues/740))\n* Fixed parsing of IMAP threads where the root of a subtree is empty.\n  (issue [#739](https://github.com/jstedfast/MailKit/issues/739))\n* Added AuthorizationId property for PLAIN and DIGEST-MD5 SASL mechanisms.\n* Added MessageSummaryItems.Headers enum to fetch all headers.\n  (issue [#738](https://github.com/jstedfast/MailKit/issues/738))\n\n## MailKit 2.0.5 (2018-07-07)\n\n* When throwing AuthenticationException within SmtpClient, add an SmtpCommandException as the\n  InnerException property to help consumers diagnose authentication problems.\n  (issue [#717](https://github.com/jstedfast/MailKit/issues/717))\n* Added support for the authzid to the SASL PLAIN mechanism.\n* Modified ProtocolLogger file constructor to support Shared Read and an Append/Overwrite option.\n  (issue [#730](https://github.com/jstedfast/MailKit/issues/730))\n\n## MailKit 2.0.4 (2018-05-21)\n\n* Fixed SmtpClient to use the IPv4 literal if the socket is IPv4 address mapped to IPv6.\n  (issue [#704](https://github.com/jstedfast/MailKit/issues/704))\n* Updated SmtpClient and ImapFolder.Append to use FormatOptions.EnsureNewLine.\n  (MimeKit issue [#251](https://github.com/jstedfast/MimeKit/issues/251))\n\n## MailKit 2.0.3 (2018-04-15)\n\n* Fixed IMAP IDLE support.\n* Ignore unknown tokens in IMAP untagged FETCH responses such as XAOL.SPAM.REASON.\n\n## MailKit 2.0.2 (2018-03-18)\n\n* Added work-around for ProtonMail's IMAP server. (issue [#674](https://github.com/jstedfast/MailKit/issues/674))\n* Added work-around for IMAP servers that do not include msgid in the ENVELOPE response.\n  (issue [#669](https://github.com/jstedfast/MailKit/issues/669))\n* Added MessageSummaryItems.PreviewText to allow fetching a small preview of the message.\n  (issue [#650](https://github.com/jstedfast/MailKit/issues/650))\n* Added support for batch fetching IMAP message streams.\n  (issue [#650](https://github.com/jstedfast/MailKit/issues/650))\n\n## MailKit 2.0.1 (2018-01-06)\n\n* Obsoleted all SaslMechanism constructors that took a Uri argument and replaced them\n  with variants that no longer require the Uri and instead take a NetworkCredential\n  or a set of strings for the user name and password. This simplifies authenticating\n  with OAuth 2.0:\n\n```csharp\nvar oauth2 = new SaslMechanismOAuth2 (username, auth_token);\n\nclient.Authenticate (oauth2);\n```\n\n## MailKit 2.0.0 (2017-12-22)\n\n* Updated MailKit to fully support async IO instead of using Task.Run() wrappers.\n* Fixed a resource leak when fetching IMAP body parts gets an exception.\n* Fixed each of the Client.Connect() implementations to catch exceptions thrown by\n  IProtocolLogger.LogConnect().\n* Removed the ImapFolder.MessagesArrived event.\n* Added new Authenticate() methods that take a SaslMechanism to avoid the need to\n  manipulate Client.AuthenticationMechanisms in order to tweak which SASL mechanisms\n  you'd like the client to use in Authenticate().\n* Added new SslHandshakeException with a helpful error message that can be thrown by\n  the Connect() methods. This replaces the obscure SocketExceptions previously thrown\n  by SslStream.\n* Fixed support for the IMAP UTF8=ACCEPT extension.\n* Improved ImapFolder.CommitStream() API to provide section, offset and length.\n* Treat the SMTP X-EXPS capability in an EHLO response the same as AUTH.\n  (issue [#603](https://github.com/jstedfast/MailKit/issues/603))\n* Dropped support for .NET 4.0.\n\nNote: As of 2.0, XOAUTH2 is no longer in the list of SASL mechanisms that is tried\nwhen using the Authenticate() methods that have existed pre-MailKit 2.0.\nInstead, you must now use Authenticate(SaslMechanism, CancellationToken).\n\nAn example usage might look like this:\n\n```csharp\n// Note: The Uri isn't used except with ICredentials.GetCredential (Uri) so unless\n// you implemented your own ICredentials class, the Uri is a dummy argument.\nvar uri = new Uri (\"imap://imap.gmail.com\");\nvar oauth2 = new SaslMechanismOAuth2 (uri, username, auth_token);\n\nclient.Authenticate (oauth2);\n```\n\n## MailKit 1.22.0 (2017-11-24)\n\n* Enable TLSv1.1 and 1.2 for .NETStandard.\n* Read any remaining literal data after parsing headers. Fixes an issue when requesting\n  specific headers in an ImapFolder.Fetch() request if the server sends an extra newline.\n\n## MailKit 1.20.0 (2017-10-28)\n\n* Fixed UniqueIdRange.ToString() to always output a string in the form ${start}:${end} even if\n  start == end. (issue [#572](https://github.com/jstedfast/MailKit/issues/572))\n\n## MailKit 1.18.1 (2017-09-03)\n\n* Gracefully handle IMAP COPYUID resp-codes without src or dest uid-set tokens.\n  (issue [#555](https://github.com/jstedfast/MailKit/issues/555))\n* Be more lenient with unquoted IMAP folder names containing ']'.\n  (issue [#557](https://github.com/jstedfast/MailKit/issues/557))\n\n## MailKit 1.18.0 (2017-08-07)\n\n* Improved logic for cached FolderAttributes on ImapFolder objects.\n* If/when the \\NonExistent flag is present, reset ImapFolder state as it probably means\n  another client has deleted the folder.\n* Added work-around for home.pl which sends an untagged `* [COPYUID ...]` response\n  without an `OK` (technically, the COPYUID resp-code should only appear in the tagged\n  response, but accept it anyway).\n\n## MailKit 1.16.2 (2017-07-01)\n\n* Added a leaveOpen param to the ProtocolLogger .ctor.\n  (issue [#506](https://github.com/jstedfast/MailKit/issues/506))\n* Added a CheckCertificateRevocation property on MailService.\n  (issue [#520](https://github.com/jstedfast/MailKit/issues/520))\n* Fixed ImapFolder to update the Count property and emit CountChanged when the IMAP server sends\n  an untagged VANISHED response. (issue [#521](https://github.com/jstedfast/MailKit/issues/521))\n* Fixed ImapEngine to properly handle converting character tokens into strings.\n  (issue [#522](https://github.com/jstedfast/MailKit/issues/522))\n* Fixed SmtpClient to properly handle DIGEST-MD5 auth errors in order to fall back to the next\n  authentication mechanism.\n* Fixed Pop3Client to properly detect APOP tokens after arbitrary text.\n  (issue [#529](https://github.com/jstedfast/MailKit/issues/529))\n* Disabled NTLM authentication since it often doesn't work properly.\n  (issue [#532](https://github.com/jstedfast/MailKit/issues/532))\n\n## MailKit 1.16.1 (2017-05-05)\n\n* Properly handle a NIL body-fld-params token for body-part-mpart.\n  (issue [#503](https://github.com/jstedfast/MailKit/issues/503))\n\n## MailKit 1.16.0 (2017-04-21)\n\n* Improved IMAP ENVELOPE parser to prevent exceptions when parsing invalid mailbox addresses.\n  (issue [#494](https://github.com/jstedfast/MailKit/issues/494))\n* Fixed UniqueId and UniqueIdRange to prevent developers from creating invalid UIDs and ranges.\n* Fixed ImapFolder.FetchStream() to properly emit MODSEQ changes if the server sends them.\n* Fixed SmtpClient to call OnNoRecipientsAccepted even in the non-PIPELINE case.\n  (issue [#491](https://github.com/jstedfast/MailKit/issues/491))\n\n## MailKit 1.14.0 (2017-04-09)\n\n* Improved IMAP's BODYSTRUCTURE parser to sanitize the Content-Disposition values.\n  (issue [#486](https://github.com/jstedfast/MailKit/issues/486))\n* Improved robustness of IMAP's BODYSTRUCTURE parser in cases where qstring tokens have unescaped\n  quotes. (issue [#485](https://github.com/jstedfast/MailKit/issues/485))\n* Fixed IMAP to properly handle NIL as a folder name in LIST, LSUB and STATUS responses.\n  (issue [#482](https://github.com/jstedfast/MailKit/issues/482))\n* Added ImapFolder.GetHeaders() to allow developers to download the entire set of message headers.\n* Added SMTP support for International Domain Names in email addresses used in the MAIL FROM and\n  RCPT TO commands.\n* Modified SmtpClient to no longer throw a NotSupportedException when trying to send messages to\n  a recipient with a unicode local-part in the email address when the SMTP server does not support\n  the SMTPUTF8 extension. Instead, the local-part is passed through as UTF-8, leaving it up to the\n  server to reject either the command or the message. This seems to provide the best interoperability.\n\n## MailKit 1.12.0 (2017-03-12)\n\n* Allow an empty string text argument for SearchQuery.ContainsHeader().\n  (issue [#451](https://github.com/jstedfast/MailKit/issues/451))\n* Fixed SaslMechanism.IsProhibited() logic to properly use logical ands. Thanks to\n  Stefan Seering for this fix.\n\n## MailKit 1.10.2 (2017-01-28)\n\n* Added an IsAuthenticated property to IMailService.\n* Fixed the ImapFolder.Quota class to not be public.\n\n## MailKit 1.10.1 (2016-12-04)\n\n* Modified the ImapClient to always LIST the INBOX even if it is a namespace in order to get any\n  flags set on it.\n* Fixed ImapFolder to handle Quota Roots that do not match an existing folder.\n  (issue [#433](https://github.com/jstedfast/MailKit/issues/433))\n* Added work-around for Courier-IMAP sending \"* 0 FETCH ...\" on flag changes.\n  (issue [#428](https://github.com/jstedfast/MailKit/issues/428))\n* Updated MessageSorter to be smarter about validating arguments such that it will only\n  check for IMessageSummary fields that it will *actually* need in order to perform\n  the specified sort.\n* Fixed SmtpClient.Authenticate() to throw an AuthenticationException with a message\n  from the SMTP server if available.\n\n## MailKit 1.10.0 (2016-10-31)\n\n* Added SearchQuery.Uids() to allow more powerful search expressions involving sets of uids.\n* Changed ImapClient.GetFolders() to return IList instead of IEnumerable.\n* Fixed a bug in MessageThreader.\n* Fixed bugs in Envelope.ToString() and Envelope.TryParse().\n* Fixed NTLM's Type2Message.Encode() logic to properly handle a null TargetInfo field.\n* Obsoleted some ImapFolder.Search() methods and replaced them with an equivalent ImapFolder.Sort()\n  method.\n* Added a ResponseText property to ImapCommandException.\n* Fixed ImapFolder to emit a HighestModSeqChanged event when we get untagged FETCH responses with\n  a higher MODSEQ value.\n* Improved SearchQuery optimization for IMAP.\n* Added SearchOptions.None.\n\n## MailKit 1.8.1 (2016-09-26)\n\n* Fixed the NuGet packages to reference MimeKit 1.8.0.\n* Added an SmtpClient.QueryCapabilitiesAfterAuthenticating property to work around broken SMTP servers\n  where sending EHLO after a successful AUTH command incorrectly resets their authenticated state.\n\n## MailKit 1.8.0 (2016-09-26)\n\n* Added a new Search()/SearchAsync() to ImapFolder that take a raw query string.\n* Implemented support for the IMAP FILTERS extension and improved support for the METADATA extension.\n* Fixed NTLM authentication support to use NTLMv2. (issue [#397](https://github.com/jstedfast/MailKit/issues/397))\n* Added support for IMAP's SEARCH=FUZZY relevancy scores.\n* Added an IMailFolder.ModSeqChanged event.\n* Added UniqueIdRange.All for convenience.\n\n## MailKit 1.6.0 (2016-09-11)\n\n* Added support for the new IMAP LITERAL- extension.\n* Added support for the new IMAP APPENDLIMIT extension.\n* Fixed APOP authentication in the Pop3Client. (issue [#395](https://github.com/jstedfast/MailKit/issues/395))\n* Reset the SmtpClient's Capabilities after disconnecting.\n* Modified ImapFolder.Search() to return a UniqueIdSet for IMAP servers that do not support\n  the ESEARCH extension (which already returns a UniqueIdSet).\n* Added mail.shaw.ca to the list of SMTP servers that break when sending EHLO after AUTH.\n  (issue [#393](https://github.com/jstedfast/MailKit/issues/393))\n* Work around broken POP3 servers that reply \"+OK\" instead of \"+\" in SASL negotiations.\n  (issue [#391](https://github.com/jstedfast/MailKit/issues/391))\n* Modified the IMAP parser to properly allow \"[\" to appear within flag tokens.\n  (issue [#390](https://github.com/jstedfast/MailKit/issues/390))\n\n## MailKit 1.4.2.1 (2016-08-16)\n\n* Fixed a regression in 1.4.2 where using a bad password in ImapClient.Authenticate() did not properly\n  throw an exception when using a SASL mechanism. (issue [#383](https://github.com/jstedfast/MailKit/issues/383))\n\n## MailKit 1.4.2 (2016-08-14)\n\n* Properly initialize the private Uri fields in Connect() for Windows Universal 8.1.\n  (issue [#381, #382](https://github.com/jstedfast/MailKit/issues/381, #382))\n* Added SecuritySafeCritical attributes to try and match base Exception in case that matters.\n* Added missing GetObjectData() implementation to Pop3CommandException.\n* Strong-name the .NET Core assemblies.\n* Make sure to process Alert resp-codes in ImapClient.\n  (issue [#377](https://github.com/jstedfast/MailKit/issues/377))\n\n## MailKit 1.4.1 (2016-07-17)\n\n* Updated the NTLM SASL mechanism to include a Windows OS version in the response if the server\n  requests it (apparently this should only happen if the server is in debug mode).\n* Updated the IMAP BODYSTRUCTURE parser to try and work around BODYSTRUCTURE responses that\n  do not properly encode the mime-type of a part where it only provides the media-subtype token\n  instead of both the media-type and media-subtype tokens.\n  (issue [#371](https://github.com/jstedfast/MailKit/issues/371))\n* Added smtp.dm.aliyun.com to the list of broken SMTP servers that failed to read the SMTP\n  specifications and improperly reset their state after sending an EHLO command after\n  authenticating (which the specifications explicitly state the clients SHOULD do).\n  (issue [#370](https://github.com/jstedfast/MailKit/issues/370))\n\n## MailKit 1.4.0 (2016-07-01)\n\n* Added support for .NET Core 1.0\n\n## MailKit 1.2.24 (2016-06-16)\n\n* Fixed logic for constructing the HELO command on WP8. (issue [#351](https://github.com/jstedfast/MailKit/issues/351))\n* Modified ImapFolder.Search() to not send the optional CHARSET search param if the charset\n  is US-ASCII. This way work around some broken IMAP servers that do not properly implement\n  support for the CHARSET parameter. (issue [#348](https://github.com/jstedfast/MailKit/issues/348))\n* Added more MailService methods to IMailService.\n\n## MailKit 1.2.23 (2016-05-22)\n\n* Properly apply SecurityCriticalAttribute to GetObjectData() on custom Exceptions.\n  (issue [#340](https://github.com/jstedfast/MailKit/issues/340))\n\n## MailKit 1.2.22 (2016-05-07)\n\n* Updated IMAP BODY parser to handle a NIL media type by treating it as \"application\".\n* Updated IMAP SEARCH response parser to work around search-return-data pairs within parens.\n* Added a missing SmtpStatusCode enum value for code 555.\n  (issue [#327](https://github.com/jstedfast/MailKit/issues/327))\n* Opened up more of the SearchQuery API to make it possible to serialize/deserialize via JSON.\n  (issue [#331](https://github.com/jstedfast/MailKit/issues/331))\n* Updated to reference BouncyCastle via NuGet.org packages rather than via project references.\n\n## MailKit 1.2.21 (2016-03-13)\n\n* Replaced SmtpClient's virtual ProcessRcptToResponse() method with OnRecipientAccepted()\n  and OnRecipientNotAccepted(). (issue [#309](https://github.com/jstedfast/MailKit/issues/309))\n* Added MailService.DefaultServerCertificateValidationCallback() which accepts all\n  self-signed certificates (a common operation that consumers want).\n* Fixed encoding and decoding of IMAP folder names that include surrogate pairs.\n* Fixed IMAP SEARCH logic for X-GM-LABELS.\n\n## MailKit 1.2.20 (2016-02-28)\n\n* Added a work-around for GoDaddy's ASP.NET web host which does not support the iso-8859-1\n  System.Text.Encoding (used as a fallback encoding within MailKit) by falling back to\n  Windows-1252 instead.\n* Improved NTLM support.\n\n## MailKit 1.2.19 (2016-02-13)\n\n* Added support for the SMTP VRFY and EXPN commands.\n\n## MailKit 1.2.18 (2016-01-29)\n\n* If the IMAP server sends a `* ID NIL` response, return null for ImapClient.Identify().\n* Allow developers to override the charset used when authenticating.\n  (issue [#292](https://github.com/jstedfast/MailKit/issues/292))\n\n## MailKit 1.2.17 (2016-01-24)\n\n* Exposed MailKit.Search.OrderByType and MailKit.Search.SortOrder to the public API.\n* Modified IMailFolder.CopyTo() and MoveTo() to return a UniqueIdMap instead of a UniqueIdSet.\n* Improved ImapProtocolException error messages to be more informative.\n* Added an IsSecure property to ImapClient, Pop3Client and SmtpClient.\n* Fixed support for the IMAP COMPRESS=DEFLATE extension to work properly.\n* Modified UniqueId.Id and .Validity to be properties instead of fields.\n* Reduced memory usage for UniqueIdRange (-33%) and UniqueIdSet (-50%).\n* Vastly improved the performance of UniqueIdSet (~2x).\n* Added an ImapClient.GetFolders() overload that also requests the status of each folder.\n* Modified the headersOnly parameter to the various Pop3Client.GetStream() methods to default to\n  false instead of forcing developers to pass in a value.\n* Updated the IMAP, POP3 and SMTP clients to be stricter with validating SSL certificates.\n\n## MailKit 1.2.16 (2016-01-01)\n\n* Added support for the SCRAM-SHA-256 SASL mechanism.\n* Added support for the CREATE-SPECIAL-USE IMAP extension.\n* Added support for the METADATA IMAP extension.\n* Added support for the LIST-STATUS IMAP extension.\n\n## MailKit 1.2.15 (2015-11-29)\n\n* Be more forgiving during SASL auth when a POP3 server sends unexpected text after a + response.\n  (issue [#268](https://github.com/jstedfast/MailKit/issues/268))\n\n## MailKit 1.2.14 (2015-11-22)\n\n* Fixed ImapFolder.Search() to not capitalize the date strings in date queries.\n  (issue [#252](https://github.com/jstedfast/MailKit/issues/252))\n* Fixed filtering logic in ImapFolder.GetSubfolders() to not filter out subfolders named Inbox.\n  (issue [#255](https://github.com/jstedfast/MailKit/issues/255))\n* Exposed SmtpClient.ProcessRcptToResponse() as virtual protected to allow subclasses to override\n  error handling. (issue [#256](https://github.com/jstedfast/MailKit/issues/256))\n* Modified SmtpCommandException .ctors to be public and fixed serialization logic.\n  (issue [#257](https://github.com/jstedfast/MailKit/issues/257))\n* Added workaround for broken smtp.sina.com mail server.\n* Throw a custom ImapProtocolException on \"* BYE\" during connection instead of \"unexpected token\".\n  (issue [#262](https://github.com/jstedfast/MailKit/issues/262))\n\n## MailKit 1.2.13 (2015-10-18)\n\n* Fixed SmtpClient to not double dispose the socket.\n* Added a BodyPartVisitor class.\n* Fixed ImapFolder to allow NIL tokens for body parts. (issue [#244](https://github.com/jstedfast/MailKit/issues/244))\n\n## MailKit 1.2.12 (2015-09-20)\n\n* Allow developers to specify a local IPEndPoint to use for connecting to remote servers.\n  (issue [#247](https://github.com/jstedfast/MailKit/issues/247))\n* Added support for NIL GMail labels. (issue [#244](https://github.com/jstedfast/MailKit/issues/244))\n\n## MailKit 1.2.11.1 (2015-09-08)\n\n* Fixed ImapFolder.GetSubfolders() to work with Yahoo! Mail and other IMAP servers that\n  do not use the canonical INBOX naming convention for the INBOX folder.\n  (issue [#242](https://github.com/jstedfast/MailKit/issues/242))\n\n## MailKit 1.2.11 (2015-09-06)\n\n* Fixed SmtpStream logic for determining if a call to ReadAhead() is needed.\n  (issue [#232](https://github.com/jstedfast/MailKit/issues/232))\n* Fixed ImapFolder.Close() to change the state to Closed even if the IMAP server does not\n  support the UNSELECT command.\n* Allow the UIDVALIDITY argument to the COPYUID and APPENDUID resp-codes to be 0 even though\n  that value is illegal. Improves compatibility with SmarterMail.\n  (issue [#240](https://github.com/jstedfast/MailKit/issues/240))\n\n## MailKit 1.2.10 (2015-08-16)\n\n* Added an SslProtocols property to ImapClient, Pop3Client, and SmtpClient to allow\n  developers to override which SSL protocols are to be allowed for SSL connections.\n  (issue [#229](https://github.com/jstedfast/MailKit/issues/229))\n* Added a work-around for GMail IMAP (and other IMAP servers) that sometimes send an\n  illegal MODSEQ value of 0. (issue [#228](https://github.com/jstedfast/MailKit/issues/228))\n\n## MailKit 1.2.9 (2015-08-08)\n\n* Fixed ImapFolder.Append() methods to make sure to encode the message with `<CR><LF>`\n  line endings.\n* Added UniqueId.Invalid that can be used for error conditions.\n* Added UniqueId.IsValid property to check that the UniqueId is valid.\n* Added Opened and Closed events to IMailFolder.\n* Fixed the QRESYNC version of the IMailFolder.Open() method to take a uint uidValidity\n  instead of a UniqueId uidValidity argument for consistency.\n* Updated MessageSorter.Sort() to be an extension method and added a List&lt;T&gt; overload.\n* Updated MessageThreader.Thread() to be extension methods (required reordering of args).\n* Merged ISortable and IThreadable interfaces into IMessageSummary in order to\n  remove duplicated properties and simplify things.\n* Renamed IMessageSummary.MessageSize to IMessageSummary.Size.\n* Modified IMessageSummary.UniqueId to no longer be nullable.\n* Added TextBody, HtmlBody, BodyParts and Attachments properties to IMessageSummary.\n* Modified the IMAP parser to allow NIL for the Content-Type and subtype strings in\n  BODY and BODYSTRUCTURE values even though it is illegal. (issue [#226](https://github.com/jstedfast/MailKit/issues/226))\n* Modified the IMAP parser to properly handle Message-Id tokens that are not properly\n  encapsulated within angle brackets. (issue [#224](https://github.com/jstedfast/MailKit/issues/224))\n* Fixed IMAP to properly deal with folder names that contained unescaped square brackets.\n  (issue [#222](https://github.com/jstedfast/MailKit/issues/222))\n\n## MailKit 1.2.8 (2015-07-19)\n\n* Fixed ImapFolder to dispose the temporary streams used in GetMessage and GetBodyPart.\n* Added a MessageNotFoundException.\n* Added an ImapCommandResponse property to ImapCommandException.\n* Fixed SmtpClient to filter out duplicate recipient addresses in RCPT TO.\n* Modified MessageSorter/Threader to take IList&lt;OrderBy&gt; arguments instead of OrderBy[].\n* Added support for parsing group addresses in IMAP ENVELOPE responses.\n* Disable SASL-IR support for the LOGIN mechanism. (issue [#216](https://github.com/jstedfast/MailKit/issues/216))\n* Capture whether or not the IMAP server supports the I18NLEVEL and LANGUAGE extensions.\n\n## MailKit 1.2.7 (2015-07-06)\n\n* Fixed ImapFolder.Rename() to properly emit the Renamed event for child folders as well.\n* Fixed ImapFolder.Fetch() to always fill in the Headers property when requesting specific\n  headers even if the server replies with an empty list. (issue [#210](https://github.com/jstedfast/MailKit/issues/210))\n\n## MailKit 1.2.6 (2015-06-25)\n\n* Fixed UniqueIdSet.CopyTo() to work properly (also fixes LINQ usage).\n* Fixed ImapFolder.Status() where StatusItems.HighestModSeq is used.\n\n## MailKit 1.2.5 (2015-06-22)\n\n* Added support for extended IMAP search options (see the SearchOptions flags).\n* Added TryParse() convenience methods for UniqueIdSet, UniqueIdRange, and UniqueId.\n* Added a workaround for a GMail IMAP BODYSTRUCTURE bug. (issue [#205](https://github.com/jstedfast/MailKit/issues/205))\n* Added a ProtocolLogger property for ImapClient, Pop3Client, and SmtpClient.\n* Fixed the ImapFolder.GetStream() methods that take a BodyPart to call the\n  proper overload.\n\n## MailKit 1.2.4 (2015-06-14)\n\n* Updated SmtpClient to use MimeMessage.Prepare() instead of implementing its own logic.\n* Added a new ITransferProgress interface and updated IMAP, POP3 and SMTP methods to\n  take an optional ITransferProgress parameter to allow for progress reporting.\n* Implemented client-side UID EXPUNGE for IMAP servers that do not support the UIDPLUS\n  extension.\n* Improved API documentation.\n\n## MailKit 1.2.3 (2015-06-01)\n\n* Fixed ImapFolder.AddFlags() to throw FolderNotOpenException if the folder is not\n  opened in read-write mode. (issue [#202](https://github.com/jstedfast/MailKit/issues/202))\n* Fixed ImapFolder.GetMessage/BodyPart/Stream() to not modify a dictionary while\n  looping over it. (issue [#201](https://github.com/jstedfast/MailKit/issues/201))\n* Fixed ImapFolder to throw FolderNotFoundException instead of ArgumentException\n  when the command fails due to the folder not existing.\n\n## MailKit 1.2.2 (2015-05-31)\n\n* Added ImapClient.GetFolders(FolderNamespace, ...) to allow getting the full\n  (recursive) list of folders for a particular namespace.\n* Added a FolderAttributes.Inbox flag that gets set on the Inbox folder.\n* Fixed the IMAP code to properly treat the INBOX folder name case-insensitively.\n* Added ServiceNotConnectedException, ServiceNotAuthenticatedException, and\n  FolderNotOpenException as a more specific errors than InvalidOperationException.\n  (Note: they all subclass InvalidOperationException so old code continues to work).\n* Added Pop3Client.GetStream() to allow fetching messages or headers as an unparsed\n  stream. (issue [#198](https://github.com/jstedfast/MailKit/issues/198))\n* Fixed usage of Socket.Poll() to not loop 1000 times per second.\n* Added more ImapFolder.GetStream() overloads.\n* Added ImapFolder.CreateStream() and CommitStream() protected methods which are meant\n  for subclasses that intend to implement caching.\n\n## MailKit 1.2.1 (2015-05-26)\n\n* Added hooks to allow subclassing ImapFolder.\n\n## MailKit 1.2.0 (2015-05-24)\n\n* Added new ImapFolder.GetStream() overloads that allow fetching only the TEXT\n  stream.\n* Fixed ImapFolder.Search() to always treat the search results as UIDs even\n  when the server (such as AOL) does not include the required UID tag in the\n  ESEARCH response. (issue [#191](https://github.com/jstedfast/MailKit/issues/191))\n* Fixed ImapClient to set the engine.Uri even for Windows*81 profiles (fixes\n  a NullReferenceException for the various Windows*81 profiles). (issue [#192](https://github.com/jstedfast/MailKit/issues/192))\n* Work around a GMail bug where it does not quote flags containing []'s.\n  (issue [#193](https://github.com/jstedfast/MailKit/issues/193))\n* Fixed the IMAP code to accept GMail label names that start with a '+'.\n  (issue [#195](https://github.com/jstedfast/MailKit/issues/195))\n* Delay throwing ProtocolException due to an unexpected disconnect when reading\n  responses to PIPELINE'd SMTP commands in case one of the responses to those\n  commands contains an error code that might hint at why the server disconnected.\n  (issue [#194](https://github.com/jstedfast/MailKit/issues/194))\n\n## MailKit 1.0.17 (2015-05-12)\n\n* Fixed a STARTTLS regression in SmtpClient that was introduced in 1.0.15.\n  (issue [#187](https://github.com/jstedfast/MailKit/issues/187))\n\n## MailKit 1.0.16 (2015-05-10)\n\n* Modified the Pop3Client to immediately query for the message count once the\n  client is authenticated. This allows the Pop3Client to now have a Count\n  property that replaces the need for calling GetMessageCount(). (issue [#184](https://github.com/jstedfast/MailKit/issues/184))\n\n## MailKit 1.0.15 (2015-05-09)\n\n* Added SearchQuery.HeaderContains() and obsoleted SearchQuery.Header() for\n  API consistency.\n* Added workaround for GMail's broken FETCH command parser that does not accept\n  aliases. (issue [#183](https://github.com/jstedfast/MailKit/issues/183))\n\n## MailKit 1.0.14 (2015-04-11)\n\n* Added a ServerCertificateValidationCallback property to all clients so that\n  it is not necessary to set the global\n  System.Net.ServicePointManager.ServerCertificateValidationCallback property.\n* Fixed MailService.Connect(Uri) to properly handle Uri's with Port value that\n  had not been explicitly set. (issue [#170](https://github.com/jstedfast/MailKit/issues/170))\n* Added logic to properly handle MODSEQ-based search responses.\n  (issue [#166 and issue #173](https://github.com/jstedfast/MailKit/issues/166 and issue #173))\n* When an ImapClient gets disconnected, if an ImapFolder was in an opened state,\n  update its state to closed to prevent confusion once the ImapClient is\n  reconnected.\n* Fixed a bug in Pop3Client.Authenticate() for servers that just reply with\n  \"+OK\\r\\n\" to the SASL challenge. (issue [#171](https://github.com/jstedfast/MailKit/issues/171))\n* Clear the POP3 capability flags if the POP3 server responds with -ERR at\n  any time. Some servers will reply with a list of capabilities until the\n  client is authenticated, and then reply with -ERR meaning that the client\n  should not attempt to use previously listed capabilities. (issue [#174](https://github.com/jstedfast/MailKit/issues/174))\n\n## MailKit 1.0.13 (2015-03-29)\n\n* Added a FileName convenience property to BodyPartBasic which works the same\n  way as the MimeKit.MimePart.FileName property.\n* Added a MessageSummaryFetched event to IMailFolder to better enable developers\n  to both provide progress feedback to their users as well as enable them to\n  better recover from exceptions (such as a dropped connection) occurring during\n  the fetching of message summaries.\n* Added support for the IMAP SORT=DISPLAY extension.\n* Added a work-around for Cyrus IMAP 2.4.16 sending untagged SEARCH responses\n  when untagged ESEARCH responses are expected.\n\n## MailKit 1.0.12 (2015-03-21)\n\n* Fixed ImapFolder.GetMessage(), GetBodyPart() and GetStream() to throw an\n  ImapCommandException rather than returning null if the server did not\n  response with the message data.\n* Added new, much more usable, Connect() methods to ImapClient, Pop3Client,\n  and SmtpClient that take a hostname, port, and SecureSocketOptions.\n* Added a workaround for smtp.strato.de's blatant disregard for standards.\n  (issue [#162](https://github.com/jstedfast/MailKit/issues/162))\n* Fixed ImapFolder.Close() to require ReadWrite access if expunge is true.\n* Fixed IMAP SORT queries to inject \"RETURN\" before the orderBy param.\n  (issue [#164](https://github.com/jstedfast/MailKit/issues/164))\n* Implemented support for the IMAP ACL extension.\n\n## MailKit 1.0.11 (2015-03-14)\n\n* Make sure that the IMAP stream supports timeouts before using them (fixes a\n  regression introduced in 1.0.10).\n* Added BodyParts and Attachments convenience properties to MessageSummary.\n* Added TextBody and HtmlBody convenience properties to MessageSummary.\n* Added ImapClient.IsAuthenticated, Pop3Client.IsAuthenticated and\n  SmtpClient.IsAuthenticated properties.\n* Changed the ImapClient.Inbox property to throw InvalidOperationException if\n  you try to access it before authenticating instead of returning null.\n* Added an ImapClient.IsIdle property to check if the ImapClient is currently\n  in the IDLE state.\n\n## MailKit 1.0.10 (2015-03-08)\n\n* Added support for the IMAP ID extension.\n\n## MailKit 1.0.9 (2015-03-02)\n\n* Modified UniqueId to contain a Validity value. This allows ImapFolder.Append(),\n  CopyTo(), and MoveTo() to provide the caller with a way to make sure that the\n  UIDs are (still) valid in the destination folder at a future point in time.\n* Modified ImapFolder.UidValidity to be a uint instead of a UniqueId which not\n  only makes more sense but also simplifies comparison.\n* Fixed GMail Label APIs to use the modified UTF-7 encoding logic meant for\n  folder names as it appears that GMail wants label names to be encoded in this\n  way. (issue [#154](https://github.com/jstedfast/MailKit/issues/154))\n\n## MailKit 1.0.8 (2015-02-19)\n\n* Fixed the SMTP BINARYMIME extension support to work properly. (issue [#151](https://github.com/jstedfast/MailKit/issues/151))\n* Fixed ImapFolder.Open() to not set the PermanentFlags to None if another\n  folder was open (preventing SetFlags/AddFlags/RemoveFlags from functioning\n  properly). (issue [#153](https://github.com/jstedfast/MailKit/issues/153))\n\n## MailKit 1.0.7 (2015-02-17)\n\n* Marked Pop3Client methods that take UIDs as [Obsolete]. It is suggested that\n  the equivalent methods that take indexes be used instead and that UID-to-index\n  mapping is done by the developer. This takes the burden off of the Pop3Client\n  to maintain a mapping of UIDs to indexes that it cannot easily maintain.\n* Fixed SmtpCommandException to only serialize the Mailbox property when it is\n  non-null. (issue [#148](https://github.com/jstedfast/MailKit/issues/148))\n* Fixed IMAP support to accept a UIDVALIDITY value of 0 (even though it is\n  technically illegal) to work around a bug in SmarterMail 13.0. (issue [#150](https://github.com/jstedfast/MailKit/issues/150))\n* Fixed ImapFolder.GetSubfolders() to filter out non-child folders from the list\n  that it returns (once again, a work-around for a SmarterMail 13.0 bug).\n  (issue [#149](https://github.com/jstedfast/MailKit/issues/149))\n\n## MailKit 1.0.6 (2015-01-18)\n\n* Fixed some issues revealed by source analysis.\n* Migrated the iOS assemblies to Xamarin.iOS Unified API for 64-bit support.\n\nNote: If you are not yet ready to port your iOS application to the Unified API,\n      you will need to stick with the 1.0.5 release. The Classic MonoTouch API\n      is no longer supported.\n\n## MailKit 1.0.5 (2015-01-08)\n\n* Added Connect() overloads which takes a Socket argument (issue [#128](https://github.com/jstedfast/MailKit/issues/128)).\n* Added support for SMTP Delivery Status Notifications (issue [#136](https://github.com/jstedfast/MailKit/issues/136)).\n* Modified the ImapFolder logic such that if the IMAP server does not\n  send a PERMANENTFLAGS resp-code when SELECTing the folder, then it\n  will assume that all flags are permanent (issue [#140](https://github.com/jstedfast/MailKit/issues/140)).\n\n## MailKit 1.0.4 (2014-12-13)\n\n* Modified the IMAP BODYSTRUCTURE parser to allow NIL tokens for\n  Content-Type and Content-Disposition parameter values. (issue [#124](https://github.com/jstedfast/MailKit/issues/124))\n* Added ImapFolder.GetBodyPart() overrides to allow fetching body parts\n  based on a part specifier string. (issue [#130](https://github.com/jstedfast/MailKit/issues/130))\n\n## MailKit 1.0.3 (2014-12-05)\n\n* Added a new ImapFolder.Fetch() overload that takes a HashSet&lt;string&gt;\n  of header fields to fetch instead of a HashSet&lt;HeaderId&gt; for\n  developers that need the ability to request custom headers not\n  defined in the HeaderId enum.\n* Added an SmtpClient.MessageSent event and an OnMessageSent() method\n  that can be overridden.\n\n## MailKit 1.0.2 (2014-11-23)\n\n* Modified ProtocolLogger to flush the stream at the end of each Log().\n* Fixed IMAP SEARCH queries with empty string arguments.\n* Fixed the IMAP FETCH parser to accept qstrings and literals for\n  header field names.\n* Improved documentation.\n\n## MailKit 1.0.1 (2014-10-27)\n\n* Fixed Pop3Client.GetMessages (int startIndex, int count, ...) to use\n  1-based sequence numbers.\n* Fixed POP3 PIPELINING support to work as intended (issue [#114](https://github.com/jstedfast/MailKit/issues/114)).\n* Added a work-around for Office365.com IMAP to avoid\n  ImapProtocolExceptions about unexpected '[' tokens when moving or\n  copying messages between folders (issue [#115](https://github.com/jstedfast/MailKit/issues/115)).\n* Disabled SSLv3 for security reasons (POODLE), opting instead to use TLS.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.55078125,
          "content": "# Security Policy\n\nThe MailKit team takes the security of our software products and services seriously.\n\nIf you believe you have found a security vulnerability in the MailKit repository, please report it to us as described below.\n\n## Supported Versions\n\nDue to the fact that the MailKit team is small (currently only myself), I can\nonly support security fixes for the latest version.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 4.x     | :white_check_mark: |\n| < 4.0   | :x:                |\n\n## Reporting a Vulnerability\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them via a [Private Security Advisory](https://github.com/jstedfast/MailKit/security/advisories/new) submission.\n\nFor more information about the fields available and guidance on filling in the form, see\n\"[Creating a repository security advisory](https://docs.github.com/en/code-security/security-advisories/working-with-repository-security-advisories/creating-a-repository-security-advisory)\"\nand \"[Best practices for writing repository security advisories.](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing-information-about-vulnerabilities/best-practices-for-writing-repository-security-advisories)\"\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via [email](mailto:jestedfa@microsoft.com?subject=MailKit%20Security%20Advisory) to ensure we received your original message.\n\n## Preferred Languages\n\nAll communications should be in English.\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 0.794921875,
          "content": "## TODO\n\n* SASL Authentication\n  * Include code to fetch an OAuth2 token?\n* IMAP4 Client\n  * Consolidate MessageFlagsChanged, MessageLabelsChanged, and ModSeqChanged events into a single event?\n  * Extensions:\n    * BINARY\n    * CATENATE\n    * LIST-EXTENDED (Note: partially implemented already)\n    * CONVERT (Note: none of the mainstream IMAP servers seem to support this)\n    * MULTISEARCH (Note: none of the mainstream IMAP servers seem to support this)\n    * UNAUTHENTICATE\n* MessageThreader\n  * Fix UniqueId property to be just a UniqueId instead of Nullable<UniqueId>.\n* IMailFolder\n  * Modify Append() methods to simply return UniqueId instead of Nullable<UniqueId>?\n  * Modify CopyTo/MoveTo() methods to also return UniqueId instead of Nullable<UniqueId>?\n* Maildir\n* Thunderbird-style mbox folder trees?\n"
        },
        {
          "name": "Telemetry.md",
          "type": "blob",
          "size": 36.2548828125,
          "content": "# MailKit Telemetry Documentation\n\n## Socket Metrics\n\n### Metric: `mailkit.net.socket.connect.count`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.socket.connect.count`            | Counter             | `{attempt}`     | The number of times a socket attempted to connect to a remote host.        |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `network.peer.address`     | string   | Peer IP address of the socket connection.        | `142.251.167.109`                               | Always                |\n| `server.address`           | string   | The host name that the socket is connecting to.  | `smtp.gmail.com`                                | Always                |\n| `server.port`              | int      | The port that the socket is connecting to.       | `465`                                           | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n\nThis metric tracks the number of times a socket attempted to connect to a remote host.\n\n`error.type` has the following values:\n\n| **Value**               | **Description**                                                                |\n|:------------------------|:-------------------------------------------------------------------------------|\n| `cancelled`             | The operation was cancelled.                                                   |\n| `host_not_found`        | No such host is known. The name is not an official host name or alias.         |\n| `host_unreachable`      | There is no network route to the specified host.                               |\n| `network_unreachable`   | No route to the remote host exists.                                            |\n| `connection_aborted`    | The connection was aborted by .NET or the underlying socket provider.          |\n| `connection_refused`    | The remote host is actively refusing a connection.                             |\n| `connection_reset`      | The connection was reset by the remote peer.                                   |\n| `timed_out`             | The connection attempt timed out, or the connected host has failed to respond. |\n| `too_many_open_sockets` | There are too many open sockets in the underlying socket provider.             |\n\nAvailable starting in: MailKit v4.7.0\n\n### Metric: `mailkit.net.socket.connect.duration`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.socket.connect.duration`         | Histogram           | `ms`            | The number of milliseconds taken for a socket to connect to a remote host. |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `network.peer.address`     | string   | Peer IP address of the socket connection.        | `142.251.167.109`                               | Always                |\n| `server.address`           | string   | The host name that the socket is connecting to.  | `smtp.gmail.com`                                | Always                |\n| `server.port`              | int      | The port that the socket is connecting to.       | `465`                                           | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n\nThis metric measures the time it takes to connect a socket to a remote host.\n\n`error.type` has the following values:\n\n| **Value**                 | **Description**                                                                         |\n|:--------------------------|:----------------------------------------------------------------------------------------|\n| `cancelled`               | An operation was cancelled.                                                             |\n| `host_not_found`          | No such host is known. The name is not an official host name or alias.                  |\n| `host_unreachable`        | There is no network route to the specified host.                                        |\n| `network_unreachable`     | No route to the remote host exists.                                                     |\n| `connection_aborted`      | The connection was aborted by .NET or the underlying socket provider.                   |\n| `connection_refused`      | The remote host is actively refusing a connection.                                      |\n| `connection_reset`        | The connection was reset by the remote peer.                                            |\n| `timed_out`               | The connection attempt timed out, or the connected host has failed to respond.          |\n| `too_many_open_sockets`   | There are too many open sockets in the underlying socket provider.                      |\n\nAvailable starting in: MailKit v4.7.0\n\n## SmtpClient Metrics\n\n### Metric: `mailkit.net.smtp.client.connection.duration`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.smtp.client.connection.duration` | Histogram           | `s`             | The duration of successfully established connections to an SMTP server.    |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `server.address`           | string   | The host name that the client is connected to.   | `smtp.gmail.com`                                | Always                |\n| `server.port`              | int      | The port that the client is connected to.        | `25`, `465`, `587`                              | Always                |\n| `url.scheme`               | string   | The URL scheme of the protocol used.             | `smtp` or `smtps`                               | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n| `network.operation`        | string   | The name of the operation.                       | `connect`, `authenticate`, `send`, ...          | Always                |\n\nThis metric tracks the connection duration of each SmtpClient connection and records any error details if the connection was terminated involuntarily.\n\n`error.type` has the following values:\n\n| **Value**                 | **Description**                                                                         |\n|:--------------------------|:----------------------------------------------------------------------------------------|\n| `cancelled`               | An operation was cancelled.                                                             |\n| `connection_aborted`      | The connection was aborted by .NET or the underlying socket provider.                   |\n| `connection_reset`        | The connection was reset by the remote peer.                                            |\n| `timed_out`               | The connection attempt timed out, or the connected host has failed to respond.          |\n| `secure_connection_error` | An SSL or TLS connection could not be negotiated.                                       |\n| `protocol_error`          | The connection was terminated due to an incomplete or invalid response from the server. |\n\nAvailable starting in: MailKit v4.7.0\n\n### Metric: `mailkit.net.smtp.client.operation.count`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.smtp.client.operation.count`     | Counter             | `{operation}`   | The number of times a client performed an operation on an SMTP server.     |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `server.address`           | string   | The host name that the client is connected to.   | `smtp.gmail.com`                                | Always                |\n| `server.port`              | int      | The port that the client is connected to.        | `25`, `465`, `587`                              | Always                |\n| `url.scheme`               | string   | The URL scheme of the protocol used.             | `smtp` or `smtps`                               | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n| `network.operation`        | string   | The name of the operation.                       | `connect`, `authenticate`, `send`, ...          | Always                |\n\nThis metric tracks the number of times an SmtpClient has performed an operation on an SMTP server.\n\n`error.type` has the following values:\n\n| **Value**                 | **Description**                                                                         |\n|:--------------------------|:----------------------------------------------------------------------------------------|\n| `cancelled`               | An operation was cancelled.                                                             |\n| `host_not_found`          | No such host is known. The name is not an official host name or alias.                  |\n| `host_unreachable`        | There is no network route to the specified host.                                        |\n| `network_unreachable`     | No route to the remote host exists.                                                     |\n| `connection_aborted`      | The connection was aborted by .NET or the underlying socket provider.                   |\n| `connection_refused`      | The remote host is actively refusing a connection.                                      |\n| `connection_reset`        | The connection was reset by the remote peer.                                            |\n| `timed_out`               | The connection attempt timed out, or the connected host has failed to respond.          |\n| `too_many_open_sockets`   | There are too many open sockets in the underlying socket provider.                      |\n| `secure_connection_error` | An SSL or TLS connection could not be negotiated.                                       |\n| `protocol_error`          | The connection was terminated due to an incomplete or invalid response from the server. |\n\nAvailable starting in: MailKit v4.7.0\n\n### Metric: `mailkit.net.smtp.client.operation.duration`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.smtp.client.operation.duration`  | Histogram           | `ms`            | The amount of time it takes for the SMTP server to perform an operation.   |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `server.address`           | string   | The host name that the client is connected to.   | `smtp.gmail.com`                                | Always                |\n| `server.port`              | int      | The port that the client is connected to.        | `25`, `465`, `587`                              | Always                |\n| `url.scheme`               | string   | The URL scheme of the protocol used.             | `smtp` or `smtps`                               | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n| `network.operation`        | string   | The name of the operation.                       | `connect`, `authenticate`, `send`, ...          | Always                |\n\nThis metric tracks the amount of time it takes an SMTP server to perform an operation.\n\n`error.type` has the following values:\n\n| **Value**                 | **Description**                                                                         |\n|:--------------------------|:----------------------------------------------------------------------------------------|\n| `cancelled`               | An operation was cancelled.                                                             |\n| `host_not_found`          | No such host is known. The name is not an official host name or alias.                  |\n| `host_unreachable`        | There is no network route to the specified host.                                        |\n| `network_unreachable`     | No route to the remote host exists.                                                     |\n| `connection_aborted`      | The connection was aborted by .NET or the underlying socket provider.                   |\n| `connection_refused`      | The remote host is actively refusing a connection.                                      |\n| `connection_reset`        | The connection was reset by the remote peer.                                            |\n| `timed_out`               | The connection attempt timed out, or the connected host has failed to respond.          |\n| `too_many_open_sockets`   | There are too many open sockets in the underlying socket provider.                      |\n| `secure_connection_error` | An SSL or TLS connection could not be negotiated.                                       |\n| `protocol_error`          | The connection was terminated due to an incomplete or invalid response from the server. |\n\nAvailable starting in: MailKit v4.7.0\n\n## Pop3Client Metrics\n\n### Metric: `mailkit.net.pop3.client.connection.duration`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.pop3.client.connection.duration` | Histogram           | `s`             | The duration of successfully established connections to a POP3 server.     |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `server.address`           | string   | The host name that the client is connected to.   | `pop.gmail.com`                                 | Always                |\n| `server.port`              | int      | The port that the client is connected to.        | `110`, `995`                                    | Always                |\n| `url.scheme`               | string   | The URL scheme of the protocol used.             | `pop3` or `pop3s`                               | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n| `network.operation`        | string   | The name of the operation.                       | `connect`, `authenticate`, ...                  | Always                |\n\nThis metric tracks the connection duration of each Pop3Client connection and records any error details if the connection was terminated involuntarily.\n\n`error.type` has the following values:\n\n| **Value**                 | **Description**                                                                         |\n|:--------------------------|:----------------------------------------------------------------------------------------|\n| `cancelled`               | An operation was cancelled.                                                             |\n| `connection_aborted`      | The connection was aborted by .NET or the underlying socket provider.                   |\n| `connection_reset`        | The connection was reset by the remote peer.                                            |\n| `timed_out`               | The connection attempt timed out, or the connected host has failed to respond.          |\n| `secure_connection_error` | An SSL or TLS connection could not be negotiated.                                       |\n| `protocol_error`          | The connection was terminated due to an incomplete or invalid response from the server. |\n\nAvailable starting in: MailKit v4.7.0\n\n### Metric: `mailkit.net.pop3.client.operation.count`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.pop3.client.operation.count`     | Counter             | `{operation}`   | The number of times a client performed an operation on a POP3 server.      |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `server.address`           | string   | The host name that the client is connected to.   | `pop.gmail.com`                                 | Always                |\n| `server.port`              | int      | The port that the client is connected to.        | `110`, `995`                                    | Always                |\n| `url.scheme`               | string   | The URL scheme of the protocol used.             | `pop3` or `pop3s`                               | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n| `network.operation`        | string   | The name of the operation.                       | `connect`, `authenticate`, ...                  | Always                |\n\nThis metric tracks the number of times an Pop3Client has performed an operation on a POP3 server.\n\n`error.type` has the following values:\n\n| **Value**                 | **Description**                                                                         |\n|:--------------------------|:----------------------------------------------------------------------------------------|\n| `cancelled`               | An operation was cancelled.                                                             |\n| `host_not_found`          | No such host is known. The name is not an official host name or alias.                  |\n| `host_unreachable`        | There is no network route to the specified host.                                        |\n| `network_unreachable`     | No route to the remote host exists.                                                     |\n| `connection_aborted`      | The connection was aborted by .NET or the underlying socket provider.                   |\n| `connection_refused`      | The remote host is actively refusing a connection.                                      |\n| `connection_reset`        | The connection was reset by the remote peer.                                            |\n| `timed_out`               | The connection attempt timed out, or the connected host has failed to respond.          |\n| `too_many_open_sockets`   | There are too many open sockets in the underlying socket provider.                      |\n| `secure_connection_error` | An SSL or TLS connection could not be negotiated.                                       |\n| `protocol_error`          | The connection was terminated due to an incomplete or invalid response from the server. |\n\nAvailable starting in: MailKit v4.7.0\n\n### Metric: `mailkit.net.pop3.client.operation.duration`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.pop3.client.operation.duration`  | Histogram           | `ms`            | The amount of time it takes for the POP3 server to perform an operation.   |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `server.address`           | string   | The host name that the client is connected to.   | `pop.gmail.com`                                 | Always                |\n| `server.port`              | int      | The port that the client is connected to.        | `110`, `995`                                    | Always                |\n| `url.scheme`               | string   | The URL scheme of the protocol used.             | `pop3` or `pop3s`                               | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n| `network.operation`        | string   | The name of the operation.                       | `connect`, `authenticate`, ...                  | Always                |\n\nThis metric tracks the amount of time it takes a POP3 server to perform an operation.\n\n`error.type` has the following values:\n\n| **Value**                 | **Description**                                                                         |\n|:--------------------------|:----------------------------------------------------------------------------------------|\n| `cancelled`               | An operation was cancelled.                                                             |\n| `host_not_found`          | No such host is known. The name is not an official host name or alias.                  |\n| `host_unreachable`        | There is no network route to the specified host.                                        |\n| `network_unreachable`     | No route to the remote host exists.                                                     |\n| `connection_aborted`      | The connection was aborted by .NET or the underlying socket provider.                   |\n| `connection_refused`      | The remote host is actively refusing a connection.                                      |\n| `connection_reset`        | The connection was reset by the remote peer.                                            |\n| `timed_out`               | The connection attempt timed out, or the connected host has failed to respond.          |\n| `too_many_open_sockets`   | There are too many open sockets in the underlying socket provider.                      |\n| `secure_connection_error` | An SSL or TLS connection could not be negotiated.                                       |\n| `protocol_error`          | The connection was terminated due to an incomplete or invalid response from the server. |\n\nAvailable starting in: MailKit v4.7.0\n\n## ImapClient Metrics\n\n### Metric: `mailkit.net.imap.client.connection.duration`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.imap.client.connection.duration` | Histogram           | `s`             | The duration of successfully established connections to an IMAP server.    |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `server.address`           | string   | The host name that the client is connected to.   | `imap.gmail.com`                                | Always                |\n| `server.port`              | int      | The port that the client is connected to.        | `143`, `993`                                    | Always                |\n| `url.scheme`               | string   | The URL scheme of the protocol used.             | `imap` or `imaps`                               | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n| `network.operation`        | string   | The name of the operation.                       | `connect`, `authenticate`, ...                  | Always                |\n\nThis metric tracks the connection duration of each ImapClient connection and records any error details if the connection was terminated involuntarily.\n\n`error.type` has the following values:\n\n| **Value**                 | **Description**                                                                         |\n|:--------------------------|:----------------------------------------------------------------------------------------|\n| `cancelled`               | An operation was cancelled.                                                             |\n| `connection_aborted`      | The connection was aborted by .NET or the underlying socket provider.                   |\n| `connection_reset`        | The connection was reset by the remote peer.                                            |\n| `timed_out`               | The connection attempt timed out, or the connected host has failed to respond.          |\n| `secure_connection_error` | An SSL or TLS connection could not be negotiated.                                       |\n| `protocol_error`          | The connection was terminated due to an incomplete or invalid response from the server. |\n\nAvailable starting in: MailKit v4.7.0\n\n### Metric: `mailkit.net.imap.client.operation.count`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.imap.client.operation.count`     | Counter             | `{operation}`   | The number of times a client performed an operation on an IMAP server.     |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `server.address`           | string   | The host name that the client is connected to.   | `imap.gmail.com`                                | Always                |\n| `server.port`              | int      | The port that the client is connected to.        | `143`, `993`                                    | Always                |\n| `url.scheme`               | string   | The URL scheme of the protocol used.             | `imap` or `imaps`                               | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n| `network.operation`        | string   | The name of the operation.                       | `connect`, `authenticate`, ...                  | Always                |\n\nThis metric tracks the number of times an ImapClient has performed an operation on an IMAP server.\n\n`error.type` has the following values:\n\n| **Value**                 | **Description**                                                                         |\n|:--------------------------|:----------------------------------------------------------------------------------------|\n| `cancelled`               | An operation was cancelled.                                                             |\n| `host_not_found`          | No such host is known. The name is not an official host name or alias.                  |\n| `host_unreachable`        | There is no network route to the specified host.                                        |\n| `network_unreachable`     | No route to the remote host exists.                                                     |\n| `connection_aborted`      | The connection was aborted by .NET or the underlying socket provider.                   |\n| `connection_refused`      | The remote host is actively refusing a connection.                                      |\n| `connection_reset`        | The connection was reset by the remote peer.                                            |\n| `timed_out`               | The connection attempt timed out, or the connected host has failed to respond.          |\n| `too_many_open_sockets`   | There are too many open sockets in the underlying socket provider.                      |\n| `secure_connection_error` | An SSL or TLS connection could not be negotiated.                                       |\n| `protocol_error`          | The connection was terminated due to an incomplete or invalid response from the server. |\n\nAvailable starting in: MailKit v4.7.0\n\n### Metric: `mailkit.net.imap.client.operation.duration`\n\n**Status:** [Experimental](https://github.com/open-telemetry/opentelemetry-specification/blob/v1.30.0/specification/document-status.md)\n\n| **Name**                                      | **Instrument Type** | **Unit**        | **Description**                                                            |\n|:----------------------------------------------|:--------------------|:----------------|:---------------------------------------------------------------------------|\n| `mailkit.net.imap.client.operation.duration`  | Histogram           | `ms`            | The amount of time it takes for the IMAP server to perform an operation.   |\n\n| **Attribute**              | **Type** | **Description**                                  | **Examples**                                    | **Presence**          |\n|:---------------------------|:---------|:-------------------------------------------------|:------------------------------------------------|:----------------------|\n| `server.address`           | string   | The host name that the client is connected to.   | `imap.gmail.com`                                | Always                |\n| `server.port`              | int      | The port that the client is connected to.        | `143`, `993`                                    | Always                |\n| `url.scheme`               | string   | The URL scheme of the protocol used.             | `imap` or `imaps`                               | Always                |\n| `error.type`               | string   | The type of error encountered.                   | `host_not_found`, `host_unreachable`, ...       | If an error occurred. |\n| `network.operation`        | string   | The name of the operation.                       | `connect`, `authenticate`, ...                  | Always                |\n\nThis metric tracks the amount of time it takes an IMAP server to perform an operation.\n\n`error.type` has the following values:\n\n| **Value**                 | **Description**                                                                         |\n|:--------------------------|:----------------------------------------------------------------------------------------|\n| `cancelled`               | An operation was cancelled.                                                             |\n| `host_not_found`          | No such host is known. The name is not an official host name or alias.                  |\n| `host_unreachable`        | There is no network route to the specified host.                                        |\n| `network_unreachable`     | No route to the remote host exists.                                                     |\n| `connection_aborted`      | The connection was aborted by .NET or the underlying socket provider.                   |\n| `connection_refused`      | The remote host is actively refusing a connection.                                      |\n| `connection_reset`        | The connection was reset by the remote peer.                                            |\n| `timed_out`               | The connection attempt timed out, or the connected host has failed to respond.          |\n| `too_many_open_sockets`   | There are too many open sockets in the underlying socket provider.                      |\n| `secure_connection_error` | An SSL or TLS connection could not be negotiated.                                       |\n| `protocol_error`          | The connection was terminated due to an incomplete or invalid response from the server. |\n\nAvailable starting in: MailKit v4.7.0\n"
        },
        {
          "name": "UnitTests",
          "type": "tree",
          "content": null
        },
        {
          "name": "cov-build.bat",
          "type": "blob",
          "size": 0.1669921875,
          "content": "..\\cov-analysis\\bin\\cov-build.exe --dir cov-int \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\" /t:Rebuild MailKit.Coverity.sln\n"
        },
        {
          "name": "nuget",
          "type": "tree",
          "content": null
        },
        {
          "name": "rfc",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "submodules",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}