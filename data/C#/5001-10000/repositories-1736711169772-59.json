{
  "metadata": {
    "timestamp": 1736711169772,
    "page": 59,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ElectronNET/Electron.NET",
      "stars": 7354,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.2900390625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n!/artifacts/.gitkeep\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n#*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Mac Only settings file\n.DS_Store\n\n# Nuke build tool\n.nuke/temp\n"
        },
        {
          "name": ".nuke",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 24.1044921875,
          "content": "# 23.6.2\n\n## ElectronNET.API\n\n* Fixed escaping of URL (#735) @cosmo0\n* Fixed huge memory waste in IpcMain.Once (#833) @Yuvix25\n* Fixed enabling of accessibility support (#798) @dlanorok\n* Updated `Display` to current spec (#828) @Yuvix25\n* Changed `ZoomFactor` type from `int` to `double` (#754) @Yuvix25\n* Added splash screen size config (#822) @NickRimmer\n* Added OSX ARM architecture detection (#821) @sajmonr\n* Added support for `did-navigate` event (#819) @NickRimmer\n* Added support for `will-redirect` event (#819) @NickRimmer\n* Added support for `did-fail-load` event (#819) @NickRimmer\n* Added support for `did-start-navigation` event (#819) @NickRimmer\n* Added support for `did-redirect-navigation` event (#819) @NickRimmer\n* Added support for `dom-ready` event (#813) @softworkz\n\n## ElectronNET.CLI\n\n* (none)\n\n## Infrastructure\n\n* Changed build system to NUKE (#757) @FlorianRappl\n* Updated target framework for host project (#753) @r-pankevicius\n* Fixed typo in README (#800) @franpersanchez\n\n# 23.6.1\n\n## ElectronNET.CLI\n\n* New Feature: Upgrade to .NET 6 support\n\n## ElectronNET.API\n\n* New Feature: Native Electron 23.2.0 support, but not all new API features included (we search contributors) \n* New Feature: Upgrade to .NET 6 support\n* New Feature: Changed Web-Socket .NET Library to [SocketIOClient](https://github.com/doghappy/socket.io-client-csharp)\n* Breaking Changes: We removed deprecated API events/methods from ElectronNET.API [(More Details)](https://www.electronjs.org/docs/latest/breaking-changes)\n\n# 13.5.1\n\nElectronNET.CLI:\n\n* New Feature: Using exit code instead of seek for the term 'error' (thanks [TSrgy](https://github.com/TSrgy)) [\\#562](https://github.com/ElectronNET/Electron.NET/pull/562)  \n* Fixed bug: Allow for property overrides to be passed in (thanks [danatcofo](https://github.com/danatcofo)) [\\#531](https://github.com/ElectronNET/Electron.NET/pull/531)  \nUse `/p:propertyName=value` or `/property:propertyName=value` to pass in property overrides. This is equivalent to the `-p:` option documented here: [https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish)  \n* Fixed bug: Add ability to pass an argument for \"Version\" for both the \"dotnet publish\" and \"electron-builder\" commands (thanks [tub5](https://github.com/tub5)) [\\#546](https://github.com/ElectronNET/Electron.NET/pull/546)  \n* Fixed bug: Version flag not persisting with the referenced executable (thanks [tub5](https://github.com/tub5)) [\\#585](https://github.com/ElectronNET/Electron.NET/pull/585)  \n* Fixed bug: Changes PublishSingleFile default to false for NET5 compatibility (thanks [cristiangiagante](https://github.com/cristiangiagante)) [\\#570](https://github.com/ElectronNET/Electron.NET/pull/570)  \n  \nElectronNET.API:  \n  \n* New Feature: Native Electron 13.1.5 support, but not all new features (we search contributors)   \n* Breaking API Changes (from native Electron 13.1.5): \n   - `Shell.MoveItemToTrashAsync` renamed with `Shell.TrashItemAsync`  \n   - The deprecated extension APIs have been removed: `BrowserWindow.GetAllExtensionsAsync()`, `BrowserWindow.RemoveExtension()`, `BrowserWindow.AddExtensionAsync()`. Use the session APIs instead: `Session.GetAllExtensionsAsync()`, `Session.RemoveExtension()`, `Session.LoadExtensionAsync()`.  \n* New Feature: singleInstance handle command line arguments [\\#520](https://github.com/ElectronNET/Electron.NET/issues/520)  \n* New Feature: Add WebContents [insertCSS](https://www.electronjs.org/docs/api/web-contents#contentsinsertcsscss-options) functionality (thanks [nfichter](https://github.com/nfichter)) [\\#559](https://github.com/ElectronNET/Electron.NET/pull/559)  \n* New Feature: Allow IpcMain to send IPC messages to BrowserViews (thanks [nfichter](https://github.com/nfichter)) [\\#560](https://github.com/ElectronNET/Electron.NET/pull/560)  \n* New Feature: Add support for proxies that require basic username/password authentication (thanks [nfichter](https://github.com/nfichter)) [\\#561](https://github.com/ElectronNET/Electron.NET/pull/561)  \n* New Feature: Add PostData to LoadURLOptions to allow http-posts in LoadURL calls (thanks [Funkrusha](https://github.com/Funkrusha)) [\\#547](https://github.com/ElectronNET/Electron.NET/pull/547)  \n* Fixed bug: Fix splash screen interaction causing crashes, ghost dragging, and resizable behavior #540 (thanks [MiniguyBrendan](https://github.com/MiniguyBrendan)) [\\#540](https://github.com/ElectronNET/Electron.NET/pull/540)  \n* Fixed bug: Vibrancy serialization fix (thanks [tantumalice](https://github.com/tantumalice)) [\\#573](https://github.com/ElectronNET/Electron.NET/pull/573)  \n\n# 11.5.1\n\nElectronNET.CLI:\n\n* New Feature: Added new build and start commandline options for single exe (thanks [nathanwienand](https://github.com/nathanwienand)) [\\#506](https://github.com/ElectronNET/Electron.NET/pull/506)\n* New Feature: Set a description of the app in `electron.manifest.json` (thanks [BurtsevC](https://github.com/BurtsevC)) [\\#433](https://github.com/ElectronNET/Electron.NET/pull/433)\n* New Feature: Set a target for the start command (thanks [gabecook](https://github.com/gabecook)) [\\#463](https://github.com/ElectronNET/Electron.NET/pull/463)\n* New Feature: `electronize init` support for F# projects (thanks [kojo12228](https://github.com/kojo12228)) [\\#457](https://github.com/ElectronNET/Electron.NET/pull/457)\n* New Feature: Linux support for the buildAll.sh (thanks [duncanawoods](https://github.com/duncanawoods)) [\\#465](https://github.com/ElectronNET/Electron.NET/pull/465)\n* Fixed bug: ERR_UNKNOWN_URL_SCHEME by intercepting file:// protocol (thanks [duncanawoods](https://github.com/duncanawoods)) [\\#467](https://github.com/ElectronNET/Electron.NET/pull/467)\n\nElectronNET.API:\n\n* New Feature: Native Electron 11.1.1 support, but not all new features (we search contributors)\n* Breaking API Changes (from native Electron 11.0): - Removed: BrowserView.{destroy, fromId, fromWebContents, getAllViews} and id property of BrowserView\n* New Feature: Upgrade to .NET 5 (thanks [scottkuhl](https://github.com/scottkuhl)) [\\#509](https://github.com/ElectronNET/Electron.NET/pull/509)\n* New Feature: Extension Method for adding the Electron static class members to the standard MS DI Containers, this is a QOL issue only. `services.AddElectron()` (thanks [danatcofo](https://github.com/danatcofo )) [\\#528](https://github.com/ElectronNET/Electron.NET/pull/528)\n* New Feature: SetMenu completed for the Dock (MacOS) (thanks [danatcofo](https://github.com/danatcofo )) [\\#528](https://github.com/ElectronNET/Electron.NET/pull/528)\n\nExample for the Dock Menu\n\n`Electron.Dock.SetMenu(new [] {\n   new MenuItem {\n      Label = \"Dock Menu Item\",\n      Click = () => {\n         // do something\n      }\n   },\n});`\n\nExample for consuming the activate event (MacOs only)\n\n`Electron.App.On(\"activate\", obj => {\n   var hasWindows = (bool)obj;\n   // do something\n});`\n\n* New Feature: On and Once implementations for the App and Tray to cover the plethora of events that are not mapped explicitly in those two modules. (thanks [danatcofo](https://github.com/danatcofo )) [\\#528](https://github.com/ElectronNET/Electron.NET/pull/528)\n* New Feature: Adding the `EnableRemoteModule` property to the WebPreferences object. As of Electron 10, this property defaulted to false and without it exposed you can't use the remote module within a window. (thanks [danatcofo](https://github.com/danatcofo )) [\\#528](https://github.com/ElectronNET/Electron.NET/pull/528)\n* New Feature: Adding a configurable default electron port. (thanks [aarong-av](https://github.com/aarong-av)) [\\#505](https://github.com/ElectronNET/Electron.NET/pull/505)\n* New Feature: Added support for launching the application with a file on MacOS (thanks [dlitty](https://github.com/dlitty)) [\\#478](https://github.com/ElectronNET/Electron.NET/pull/478)\n* Improved: Avoid Blocking Calls in App and AutoUpdater (thanks [freosc](https://github.com/freosc)) [\\#474](https://github.com/ElectronNET/Electron.NET/pull/474)\n* Fixed bug: Maintain references between socket.io connection events (thanks [danatcofo](https://github.com/danatcofo )) [\\#468](https://github.com/ElectronNET/Electron.NET/pull/486)\n* Fixed bug: Set default WebPreferences.DefaultFontSize (thanks [duncanawoods](https://github.com/duncanawoods)) [\\#468](https://github.com/ElectronNET/Electron.NET/pull/468)\n\n# 9.31.2\n\n* Electron-Builder fixed for Windows builds.\n\n# 9.31.1\n\nElectronNET.CLI:\n\n* New Feature: Added config parameter (thanks [konstantingross](https://github.com/konstantingross)) [\\#409](https://github.com/ElectronNET/Electron.NET/pull/409)\n* New Feature: Set the configuration environment with the electron.manifest.json file.\n* Fixed bug: Custom user path removed and replaced by the correct directory with VS macro (When ElectronNET.CLI is the Startup Project, press F5 (Debug) and the ElectronNET.WebApp starts correctly without error!) (thanks [konstantingross](https://github.com/konstantingross)) [\\#409](https://github.com/ElectronNET/Electron.NET/pull/409)\n\nElectronNET.API:\n\n* New Feature: Native Electron 9.0.3 support, but not all new features (we search contributors)\n* New Feature: PowerMonitor API Support (thanks [gustavo-lara-molina](https://github.com/gustavo-lara-molina)) [\\#399](https://github.com/ElectronNET/Electron.NET/pull/399) [\\#423](https://github.com/ElectronNET/Electron.NET/pull/423)\n* New Feature: NativeTheme API Support (thanks [konstantingross](https://github.com/konstantingross)) [\\#402](https://github.com/ElectronNET/Electron.NET/pull/402)\n* New Feature: Cookie API Support (thanks [freosc](https://github.com/freosc)) [\\#413](https://github.com/ElectronNET/Electron.NET/pull/413)\n* Changed Feature: Removed dock methods from App API and moved to Dock API (thanks [konstantingross](https://github.com/konstantingross)) [\\#422](https://github.com/ElectronNET/Electron.NET/pull/422)\n* App-Api Enhancement: MenuItems with Submenus need an submenu type workaround [\\#412](https://github.com/ElectronNET/Electron.NET/issues/412)\n* App-Api Enhancement: Added UserAgentFallback (thanks [Mandrakia](https://github.com/Mandrakia)) [\\#406](https://github.com/ElectronNET/Electron.NET/pull/406)\n* App-Api Enhancement: Summaries rewritten, new App.IsReady / App.HasSingleInstanceLock property, App.Ready event, App.Focus with force parameter method, many parameters changes (thanks [konstantingross](https://github.com/konstantingross)) [\\#415](https://github.com/ElectronNET/Electron.NET/pull/415) [\\#422](https://github.com/ElectronNET/Electron.NET/pull/422)\n* App-Api Enhancement: New App.IsReady property and App.Ready event (thanks [konstantingross](https://github.com/konstantingross)) [\\#415](https://github.com/ElectronNET/Electron.NET/pull/415)\n* Shell-Api Enhancement: API fixes for Electron 9.0.0 / Added missing parameters / Summaries rewritten (thanks [konstantingross](https://github.com/konstantingross)) [\\#417](https://github.com/ElectronNET/Electron.NET/pull/417) [\\#418](https://github.com/ElectronNET/Electron.NET/pull/418)\n* Notification-Api Enhancement: Added missing properties in Notifications (thanks [konstantingross](https://github.com/konstantingross)) [\\#410](https://github.com/ElectronNET/Electron.NET/pull/410)\n* BrowserWindows-Api Enhancement: Add missing API call for SetProgressBar options (thanks [konstantingross](https://github.com/konstantingross)) [\\#416](https://github.com/ElectronNET/Electron.NET/pull/416)\n* BrowserWindow Enhancement: Add BrowserWindow.GetNativeWindowHandle() (thanks [kdlslyv](https://github.com/kdlslyv)) [\\#429](https://github.com/ElectronNET/Electron.NET/pull/429)\n* HostHook-Api Enhancement: HostHook.CallAsync should use TaskCompletionSource.SetException instead of throwing exception (thanks [Fre V](https://github.com/freosc)) [\\#430](https://github.com/ElectronNET/Electron.NET/pull/430)\n* MacOS Enhancement: Application exit logic (thanks [dafergu2](https://github.com/dafergu2)) [\\#405](https://github.com/ElectronNET/Electron.NET/pull/405)\n* Fixed bug: ElectronNET.API.Entities.WebPreferences.ContextIsolation [DefaultValue(true)] [\\#411](https://github.com/ElectronNET/Electron.NET/issues/411)\n\nElectronNET.WebApp (internal use):\n* Improvement debugging and testing new API calls (without install ElectronNET.CLI) (thanks [konstantingross](https://github.com/konstantingross)) [\\#425](https://github.com/ElectronNET/Electron.NET/pull/425)\n* Fixed bug: Cannot find modules in ElectronHostHook (thanks [konstantingross](https://github.com/konstantingross)) [\\#425](https://github.com/ElectronNET/Electron.NET/pull/425)\n\nThank you for donation [Phil Seeman](https://github.com/mpnow) ❤\n\n# 8.31.2\n\nElectronNET.CLI:\n* New Feature: Deactivate PublishReadyToRun for build or start [\\#395](https://github.com/ElectronNET/Electron.NET/issues/395)\n  \n   `electronize build /target win /PublishReadyToRun false`  \n   `electronize start /PublishReadyToRun false`   \n* Fixed bug: Application window doesn't open after packaging  [\\#387](https://github.com/ElectronNET/Electron.NET/issues/387)\n\nElectronNET.API:\n\n* New Feature: NativeImage Support (thanks [ThrDev](https://github.com/ThrDev)) [\\#394](https://github.com/ElectronNET/Electron.NET/pull/394)  \n* New Feature: Update menu items for context menu and system tray on-the-fly. [\\#270](https://github.com/ElectronNET/Electron.NET/pull/270)  \n\n\n# 8.31.1\n\nElectronNET.CLI:\n* New Feature: Set a name and author of the app in `electron.manifest.json` [\\#348](https://github.com/ElectronNET/Electron.NET/issues/348#issuecomment-615977950) [\\#310](https://github.com/ElectronNET/Electron.NET/issues/310#issuecomment-617361086)\n* New Feature: Live reload (thanks [syedadeel2](https://github.com/syedadeel2)) [\\#390](https://github.com/ElectronNET/Electron.NET/pull/390)  \n`electronize start /watch`\n* New Feature: Every new window will created with an clear cache [\\#273](https://github.com/ElectronNET/Electron.NET/issues/273)  \n`electronize start /clear-cache`\n\nElectronNET.API:\n\n* New Feature: Native Electron 8.2.3 support, but not all new features (we search contributors)\n* New Feature: We incease the startup time for ~25-36% [\\#356](https://github.com/ElectronNET/Electron.NET/issues/356)\n* New Feature: Added print capability (thanks [x-xx-o](https://github.com/x-xx-o)) [\\#355](https://github.com/ElectronNET/Electron.NET/pull/355)\n* New Feature: BrowserView API [\\#371](https://github.com/ElectronNET/Electron.NET/issues/371)\n* Changed App.GetNameAsync and App.SetNameAsync to the App.Name Property [\\#350](https://github.com/ElectronNET/Electron.NET/issues/350)\n* Fixed bug: Splash Screen disappearing on click [\\#357](https://github.com/ElectronNET/Electron.NET/issues/357)\n* Fixed bug: Start MenuRole enum at 1 (thanks [jjuback](https://github.com/jjuback)) [\\#369](https://github.com/ElectronNET/Electron.NET/pull/369)\n* Fixed bug: BridgeConnector not connected (spam console) [\\#347](https://github.com/ElectronNET/Electron.NET/issues/347)\n* Fixed bug: BrowserWindowOptions is not setting Width and Height properly [\\#373](https://github.com/ElectronNET/Electron.NET/issues/373)\n* Fixed bug: IpcMain.Once(string) is not one time use, is not removing listener [\\#366](https://github.com/ElectronNET/Electron.NET/issues/366)\n* Fixed bug: IpcMain.RemoveAllListeners(string) is not removing the listeners [\\#365](https://github.com/ElectronNET/Electron.NET/issues/365)\n* Fixed bug: GetLoginItemSettingsAsync does not work [\\#352](https://github.com/ElectronNET/Electron.NET/issues/352)\n* Fixed bug: Using OnReadyToShow to display the main window in Blazor does not seem to work with Show set to false [\\#361](https://github.com/ElectronNET/Electron.NET/issues/361)\n* Fixed bug: Unable to disable WebSecurity along with NodeIntegration enabled [\\#389](https://github.com/ElectronNET/Electron.NET/issues/389)\n\n# 7.30.2\n\nElectronNET.CLI:\n\n* New Feature: Different manifest file support [\\#340](https://github.com/ElectronNET/Electron.NET/issues/340)\n  * Create a additional manifest file: `electronize init /manifest test`\n  * Start the app with your additional manifest file: `electronize start /manifest electron.manifest.test.json`\n  * Build the app with your additional manifest file: `electronize build /target win /manifest electron.manifest.test.json`.\n\n* New Feature: Command Line support [\\#337](https://github.com/ElectronNET/Electron.NET/issues/337)\n  * You can start the app with: `electronize start /args --dog=woof --test=true`\n  * Or as binary: `myapp.exe /args --dog=woof --test=true`\n* Fixed bug: Start process with listen port 8000 error. [\\#308](https://github.com/ElectronNET/Electron.NET/issues/308) (thanks [thecodejedi](https://github.com/thecodejedi))\n* Fixed bug: `electronize build` with no arguments would throw a `KeyNotFoundException`. (thanks [jamiebrynes7](https://github.com/jamiebrynes7))\n\nElectronNET.API:\n\n* New Feature: Electron 7.1.2 support, but not all new features (we search contributors) [\\#341](https://github.com/ElectronNET/Electron.NET/issues/341)\n* New Feature: Electron.App.CommandLine API [\\#337](https://github.com/ElectronNET/Electron.NET/issues/337)\n* New Feature: Support of BrowserWindow.AddExtension, BrowserWindow.RemoveExtension, BrowserWindow.GetExtensions (thanks [Daddoon](https://github.com/Daddoon))\n\nThank you for donation [robertmclaws](https://github.com/robertmclaws) ❤\n\n# 5.30.1\n\nElectronNET.CLI:\n\n* Move to .NET Core 3.0\n* Use npm npx instead of global installations (thanks [jimbuck](https://github.com/jimbuck))\n\nElectronNET.API:\n\n* Move to .NET Core 3.0\n* New Feature: Add BrowserWindow.RemoveMenu() (thanks [hack2root](https://github.com/hack2root))\n\nThanks to [MaherJendoubi](https://github.com/MaherJendoubi), [kant2002](https://github.com/kant2002), [raz-canva](https://github.com/raz-canva) and [Daddoon](https://github.com/Daddoon) to give .NET Core 3.0 feedback!\n# 5.22.14\n\nElectronNET.CLI:\n\n* Fixed bug: Build fails with latest electron-builder version [\\#288](https://github.com/ElectronNET/Electron.NET/issues/288)\n\nElectronNET.API:\n\n* New Feature: Full support for Auto Updater [(Based on electron-updater - Version 4.0.6)](https://www.electron.build/auto-update)\n* New Feature: Support for set a custom static Port to ASP.NET Backend [\\#155](https://github.com/ElectronNET/Electron.NET/issues/155)\n* Fixed bug: Electron tray icon TypeError ([Electron original issue](https://github.com/electron/electron/issues/7657)) (thanks [Tum4ik](https://github.com/Tum4ik))\n* Fixed bug: Wrong tray icon path in the application built via `electronize build` command (thanks [Tum4ik](https://github.com/Tum4ik))\n* Fixed bug: fix async issue where same port is considered open [\\#261](https://github.com/ElectronNET/Electron.NET/issues/261) (thanks [netpoetica](https://github.com/netpoetica))\n\nElectronNET.WebApp:\n\n* Fixed usage of the `Electron.Tray.Show` according fixed bugs in the ElectronNET.CLI (thanks [Tum4ik](https://github.com/Tum4ik))\n\n# 5.22.13\n\nElectronNET.API:\n\n* Fixed bug: Menu Item visibility [\\#257](https://github.com/ElectronNET/Electron.NET/issues/257)\n* Fixed bug: electron.manifest.json - singleInstance not working [\\#258](https://github.com/ElectronNET/Electron.NET/issues/258)\n* Fixed security issue: ASP.NET Core process is now bound to 127.0.0.1 instead of the broader localhost [\\#258](https://github.com/ElectronNET/Electron.NET/pull/266)  \n\n# 5.22.12\n\nElectronNET.CLI:\n\n* New Feature: Changed from **electron packager** to [**electron builder**](https://www.electron.build/)\n* New Feature: 'add hosthook' command for add a ElectronHostHook-Directory\n* Fixed bug: 'Unexpected firewall warnings' [\\#181](https://github.com/ElectronNET/Electron.NET/issues/181)\n* Fixed bug: 'found 8 vulnerabilities (1 low, 5 moderate, 2 high)' [\\#199](https://github.com/ElectronNET/Electron.NET/pull/199)\n* Merged pull request: Call electronize from the Path instead of via dotnet in launchSettings.json [\\#243](https://github.com/ElectronNET/Electron.NET/pull/243) (thanks [grbd](https://github.com/grbd))\n\nElectronNET.API:\n\n* New Feature: Electron 5.0.1 support, but not all new features\n* New Feature: Auto Updater [(Based on electron-updater)](https://www.electron.build/auto-update)\n* New Feature: Splashscreen-Support\n* New Feature: HostHook-API for execute own TypeScript/JavaScript code on native Electron Main-Process\n* New Feature: Session-API functions\n* Fixed bug: Node process running after stopping app [\\#96](https://github.com/ElectronNET/Electron.NET/issues/96)\n* Fixed bug: 'X and Y options to not work on Windows 10' [\\#193](https://github.com/ElectronNET/Electron.NET/issues/193)\n* Fixed bug: Unable to clear cache [\\#66](https://github.com/ElectronNET/Electron.NET/issues/66)\n* Merged pull request: Fix BrowserWindow::SetMenu [\\#231](https://github.com/ElectronNET/Electron.NET/pull/231) thanks (thanks [CodeKenpachi](https://github.com/CodeKenpachi))\n* Merged pull request: FIX application hangs after socket reconnect [\\#233](https://github.com/ElectronNET/Electron.NET/pull/233) (thanks [pedromrpinto](https://github.com/pedromrpinto))\n* Merged pull request: Reduce chance of detecting false positives when scanning subprocesses for errors. [\\#236](https://github.com/ElectronNET/Electron.NET/pull/236) (thanks [BorisTheBrave](https://github.com/BorisTheBrave))\n* Merged pull request: Updates the C# API to accept floating point as in JS. [\\#240](https://github.com/ElectronNET/Electron.NET/pull/240) (thanks [BorisTheBrave](https://github.com/BorisTheBrave))\n* Merged pull request: buildReleaseNuGetPackages should leave you in the same directory you …  [\\#241](https://github.com/ElectronNET/Electron.NET/pull/241) (thanks [BorisTheBrave](https://github.com/BorisTheBrave))\n\nElectronNET.WebApp:\n\n* Implemented a sample for the new HostHook-API\n* Fixed bug: 'Electron.NET API Demo: unable to copy code?' [\\#247](https://github.com/ElectronNET/Electron.NET/issues/247)\n\n# 0.0.11\n\nElectronNET.CLI:\n\n* Invoke 'npm install' without --prod flag to install needed devDependencies as well.\n* Enable SourceLink\n* NuGet Package License Information updated (deprecation of licenseUrl)\n\nElectronNET.API:\n\n* Documentation added for WebContents.GetUrl()\n* Enable SourceLink\n* NuGet Package License Information updated (deprecation of licenseUrl)\n\n# 0.0.10\n\nElectronNET.API:\n\n* manifestJsonFilePath fixed (thanks @smack0007)\n* Use Electron release 3.0.0 and updated packages (thanks @deinok)\n* fixes for Socket interaction (thanks @mojinxun)\n* Fixing SingleInstances (thanks @yaofeng)\n* Enhance WebContent.GetUrl (thanks @ru-sh)\n\nElectronNET.CLI:\n\n* Show Resultcode for better debugging when using Build/Start Command\n* ElectronNET.CLI is now a global dotnet tool\n\n# 0.0.9\n\nElectronNET.API:\n\n* Better Async handling - thanks @danielmarbach\n\nElectronNET.CLI:\n\n* More options on the 'build' command, e.g. for a 32bit debug build with electron prune: build /target custom win7-x86;win32 /dotnet-configuration Debug /electron-arch ia32  /electron-params \"--prune=true \"\n* .NET Core project is now built with Release configuration but can be adjusted with the new params.\n* Be aware: \"Breaking\" (but because of the alpha status of this project, we won't use SemVer)\n\n# 0.0.8\n\nThis version was skipped because we unfortunately  released a pre-version of this on NuGet.\n\n# 0.0.7\n\nElectronNET.CLI:\n\n* Fixed electronize start for macos/linux - thanks @yamachu\n* Skip NPM install on start when node_modules directory already exists\n\n# 0.0.6\n\nElectronNET.CLI:\n\n* nuget packages are now release bits and have the correct assembly version\n* Version command \n* better devCleanup.cmd\n* Better Platform Support Issue - thanks to @Petermarcu\n* Start Command should now work on OSX/Linux - thanks to @r105m\n\nElectronNET.API:\n\n* Thread-Safe methods - thanks to @yeskunall\n\n# 0.0.5\n\nElectronNET.API:\n\n* The last nuget package didn't contain the actual webpreferences settings with defaults - hopefully now.\n\n# 0.0.4\n\nElectronNET.CLI:\n\n* dotnet electronize start fixed\n\nElectronNET.API:\n\n* WebPreferences settings with default values\n\n# 0.0.3\n\nElectronNET.CLI:\n* Init with Debug profile\n* Build for all platforms (well... for newest OSX/Linux/Windows)\n\nElectronNET.API:\n* Moar XML documentation \n* Hybrid support (e.g. running as normal website and electron app)\n* Event bugfixing\n\n# 0.0.2\n\nElectronNET.CLI:\n* Added Init to Help page\n* Added XML documentation to NuGet output\n* Maybe fixed for https://github.com/GregorBiswanger/Electron.NET/issues/2\n\nElectronNET.API:\n* Add XML documentation to NuGet output\n* Implemented Notification-, Dialog- & Tray-API\n\n# 0.0.1\n\n* init everything and basic functionality\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.068359375,
          "content": "MIT License\n\nCopyright (c) 2017-2024 Gregor Biswanger, Robert Mühsig\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 0.2509765625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n<packageSources>\n    <clear />\n    <add key=\"LocalDev\" value=\"artifacts\" />\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n</packageSources>\n</configuration>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.6357421875,
          "content": "[![Electron.NET Logo](https://github.com/ElectronNET/Electron.NET/raw/main/assets/images/electron.net-logo.png)](https://github.com/ElectronNET/Electron.NET)\n\n[![donate](https://img.shields.io/badge/Donate-Donorbox-green.svg)](https://donorbox.org/electron-net) [![Gitter](https://badges.gitter.im/ElectronNET/community.svg)](https://gitter.im/ElectronNET/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) [![Build status](https://github.com/ElectronNET/Electron.NET/actions/workflows/ci.yml/badge.svg)](https://github.com/ElectronNET/Electron.NET/actions/workflows/ci.yml)\n\nBuild cross platform desktop apps with .NET 8 and Blazor, ASP.NET Core (Razor Pages, MVC). \n\nElectron.NET is a __wrapper__ around a native Electron application with an embedded ASP.NET Core application. Via our Electron.NET IPC bridge we can invoke Electron APIs from .NET.\n\nThe CLI extensions hosts our toolset to build and start Electron.NET applications.\n\n## Wait - you host a .NET Core app inside Electron? Why?\n\nWell... there are lots of different approaches how to get a X-plat desktop app running. We thought it would be nice for .NET devs to use the ASP.NET Core environment and just embed it inside a pretty robust X-plat enviroment called Electron. Porting Electron to .NET is not a goal of this project, at least we don't have any clue how to do it. We just combine ASP.NET Core & Electron. \n\n## 📦 NuGet\n\n[![NuGet](https://img.shields.io/nuget/v/ElectronNET.API.svg?style=flat-square) ElectronNET.API ](https://www.nuget.org/packages/ElectronNET.API/) | [![NuGet](https://img.shields.io/nuget/v/ElectronNET.CLI.svg?style=flat-square) ElectronNET.CLI](https://www.nuget.org/packages/ElectronNET.CLI/)\n\n## 🛠 Requirements to Run\n\nThe current Electron.NET CLI builds Windows/macOS/Linux binaries. Our API uses .NET 8, so our minimum base OS is the same as [.NET 8](https://github.com/dotnet/core/blob/main/release-notes/8.0/supported-os.md).\n\nAlso you should have installed:\n\n* npm [contained in nodejs (at least Version 16.17.1)](https://nodejs.org)\n\n## 💬 Community\n\n[![Gitter](https://badges.gitter.im/ElectronNET/community.svg)](https://gitter.im/ElectronNET/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nBesides the chat on Gitter and the issues [discussed here](https://github.com/ElectronNET/Electron.NET/issues) you can also use [StackOverflow](https://stackoverflow.com/questions/tagged/electron.net) with the tag `electron.net`.\n\nIf you want to sponsor the further maintenance and development of this project [see the donate section](#🙏-donate).\n\n## 👩‍🏫 Usage\n\nTo activate and communicate with the \"native\" (sort of native...) Electron API include the [ElectronNET.API NuGet package](https://www.nuget.org/packages/ElectronNET.API/) in your ASP.NET Core app.\n\n```ps1\nPM> Install-Package ElectronNET.API\n```\n\n## Setup Using Minimal-API\n\nYou start Electron.NET up with an `UseElectron` WebHostBuilder-Extension and open the Electron Window:\n\n### Program.cs\n\n```csharp\t\nusing ElectronNET.API;\nusing ElectronNET.API.Entities;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.WebHost.UseElectron(args);\n\n// Is optional, but you can use the Electron.NET API-Classes directly with DI (relevant if you want more encoupled code)\nbuilder.Services.AddElectron();\n\nvar app = builder.Build();\n\n...\n\nawait app.StartAsync();\n\n// Open the Electron-Window here\nawait Electron.WindowManager.CreateWindowAsync();\n\napp.WaitForShutdown();\n```\n\n## Setup using Normal-API\n\n### Program.cs\n\nYou start Electron.NET up with an `UseElectron` WebHostBuilder-Extension. \n\n```csharp\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n    Host.CreateDefaultBuilder(args)\n        .ConfigureWebHostDefaults(webBuilder =>\n        {\n            webBuilder.UseElectron(args);\n            webBuilder.UseStartup<Startup>();\n        });\n```\n\n### Startup.cs\n\nOpen the Electron Window in the *Startup.cs* file: \n\n```csharp\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    //...\n\n    Electron.WindowManager.CreateWindowAsync();\n}\n```\n\n## 🚀 Starting the Application\n\nTo start the application make sure you have installed the \"[ElectronNET.CLI](https://www.nuget.org/packages/ElectronNET.CLI/)\" packages as global tool:\n\n```sh\ndotnet tool install ElectronNET.CLI -g\n```\n\nAt the first time, you need an Electron.NET project initialization. Type the following command in your ASP.NET Core folder:\n\n```sh\nelectronize init\n```\n\n* Now a electronnet.manifest.json should appear in your ASP.NET Core project\n* Now run the following:\n\n```sh\nelectronize start\n```\n\n### Note\n\n> Only the first `electronize start` is slow. The next will go on faster.\n\n## 🔭 Develop Electron.NET apps using a file watcher\n\nThe file watcher is included with version 8.31.1 of Electron.NET. For example, a file change can trigger compilation, test execution, or deployment. The Electron.NET window will automatically refresh and new code changes will be visible more quickly. The following Electron.NET CLI command is required:\n\n```sh\nelectronize start /watch\n```\n\n### Note\n\n> Only the first `electronize start` is slow. The next will go on faster.\n\n## 🐞 Debugging the Application\n\nStart your Electron.NET application with the Electron.NET CLI command. In Visual Studio attach to your running application instance. Go in the __Debug__ Menu and click on __Attach to Process...__. Sort by your projectname on the right and select it on the list.\n\n## 📔 Usage of the Electron API\n\nA complete documentation will follow. Until then take a look in the source code of the sample application:  \n[Electron.NET API Demos](https://github.com/ElectronNET/electron.net-api-demos)  \n\nIn this YouTube video, we show you how you can create a new project, use the Electron.NET API, debug a application and build an executable desktop app for Windows: [Electron.NET - Getting Started](https://www.youtube.com/watch?v=nuM6AojRFHk)  \n  \n## ⛏ Building Release Artifacts\n\nHere you need the Electron.NET CLI as well. Type the following command in your ASP.NET Core folder:\n\n```sh\nelectronize build /target win\n```\n\nThere are additional platforms available:\n\n```sh\nelectronize build /target win\nelectronize build /target osx\nelectronize build /target linux\n```\n\nThose three \"default\" targets will produce x64 packages for those platforms.\n\nFor certain NuGet packages or certain scenarios you may want to build a pure x86 application. To support those things you can define the desired [.NET Core runtime](https://docs.microsoft.com/en-us/dotnet/core/rid-catalog), the [electron platform](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#platform) and [electron architecture](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#arch) like this:\n\n```sh\nelectronize build /target custom \"win7-x86;win32\" /electron-arch ia32 \n```\n\nThe end result should be an electron app under your __/bin/desktop__ folder.\n\n### Note\n\n> macOS builds can't be created on Windows machines because they require symlinks that aren't supported on Windows (per [this Electron issue](https://github.com/electron-userland/electron-packager/issues/71)). macOS builds can be produced on either Linux or macOS machines.\n  \n## 🔄 Update\n\nAfter an update to the latest Electron.API package, an update to the latest Electron.CLI is always required. In addition, always update the CLI via NuGet:\n\n```sh\ndotnet tool update ElectronNET.CLI -g\n```\n\n## 👨‍💻 Authors\n\n* **[Gregor Biswanger](https://github.com/GregorBiswanger)** - (Microsoft MVP, Intel Black Belt and Intel Software Innovator) is a freelance lecturer, consultant, trainer, author and speaker. He is a consultant for large and medium-sized companies, organizations and agencies for software architecture, web- and cross-platform development. You can find Gregor often on the road attending or speaking at international conferences. - [Cross-Platform-Blog](http://www.cross-platform-blog.com) - Twitter [@BFreakout](https://www.twitter.com/BFreakout)  \n* **[Dr. Florian Rappl](https://github.com/FlorianRappl)** - Software Developer - from Munich, Germany. Microsoft MVP & Web Geek. - [The Art of Micro Frontends](https://microfrontends.art) - [Homepage](https://florian-rappl.de) - Twitter [@florianrappl](https://twitter.com/florianrappl)\n* **[Robert Muehsig](https://github.com/robertmuehsig)** - Software Developer - from Dresden, Germany, now living & working in Switzerland. Microsoft MVP & Web Geek. - [codeinside Blog](https://blog.codeinside.eu) - Twitter [@robert0muehsig](https://twitter.com/robert0muehsig)  \n  \nSee also the list of [contributors](https://github.com/ElectronNET/Electron.NET/graphs/contributors) who participated in this project.\n  \n## 🙋‍♀️🙋‍♂ Contributing\n\nFeel free to submit a pull request if you find any bugs (to see a list of active issues, visit the [Issues section](https://github.com/ElectronNET/Electron.NET/issues).\nPlease make sure all commits are properly documented.\n\n## 🧪 Working with this Repo\n\nThis video provides an introduction to development for Electron.NET: [Electron.NET - Contributing Getting Started](https://youtu.be/Po-saU_Z6Ws)  \n  \nThis repository consists of the main parts (API & CLI) and it's own \"playground\" ASP.NET Core application. Both main parts produce local NuGet packages, that are versioned with 99.0.0. The first thing you will need is to run one of the build scripts (.cmd or .ps1 for Windows, the .sh for macOS/Linux).\n\nIf you look for pure __[demo projects](https://github.com/ElectronNET)__ checkout the other repositories. \n\nThe problem working with this repository is, that NuGet has a pretty aggressive cache, see [here for further information](https://github.com/ElectronNET/Electron.NET/wiki).\n\n## 🙏 Donate\n\nWe do this open source work in our free time. If you'd like us to invest more time on it, please [donate](https://donorbox.org/electron-net). Donation can be used to increase some issue priority. Thank you!\n\n[![donate](https://img.shields.io/badge/Donate-Donorbox-green.svg)](https://donorbox.org/electron-net)\n\nAlternatively, consider using a GitHub sponsorship for the core maintainers:\n\n- [Gregor Biswanger](https://github.com/sponsors/GregorBiswanger)\n- [Florian Rappl](https://github.com/sponsors/FlorianRappl)\n\nAny support appreciated! 🍻\n\n## 🎉 License\n\nMIT-licensed. See [LICENSE](./LICENSE) for details.\n\n**Enjoy!**\n    \n## 📝 Important notes\n\n### ElectronNET.API & ElectronNET.CLI Version 9.31.2\n\nMake sure you also have the new Electron.NET API & CLI 9.31.2 version.\n\n```sh\ndotnet tool update ElectronNET.CLI -g\n```\n\nThis now uses [electron-builder](https://www.electron.build/configuration/configuration) and the necessary configuration to build is made in the **electron.manifest.json** file (on the build part). In addition, own Electron.NET configurations are stored (on the root).\n\nPlease make sure that your **electron.manifest.json** file has the following new structure:\n\n```json\n{\n  \"executable\": \"{{executable}}\",\n  \"splashscreen\": {\n    \"imageFile\": \"\"\n  },\n  \"name\": \"{{executable}}\",\n  \"author\": \"\",\n  \"singleInstance\": false,\n  \"build\": {\n    \"appId\": \"com.{{executable}}.app\",\n    \"productName\": \"{{executable}}\",\n    \"copyright\": \"Copyright © 2020\",\n    \"buildVersion\": \"1.0.0\",\n    \"compression\": \"maximum\",\n    \"directories\": {\n      \"output\": \"../../../bin/Desktop\"\n    },\n    \"extraResources\": [\n      {\n        \"from\": \"./bin\",\n        \"to\": \"bin\",\n        \"filter\": [\"**/*\"]\n      }\n    ],\n    \"files\": [\n      {\n        \"from\": \"./ElectronHostHook/node_modules\",\n        \"to\": \"ElectronHostHook/node_modules\",\n        \"filter\": [\"**/*\"]\n      },\n      \"**/*\"\n    ]\n  }\n}\n```\n\n### ElectronNET.CLI Version 0.0.9\n\nIn the Version 0.0.9 the CLI was not a global tool and needed to be registered like this in the *.csproj*:\n\n```xml\n<ItemGroup>\n  <DotNetCliToolReference Include=\"ElectronNET.CLI\" Version=\"0.0.9\" />\n</ItemGroup>\n```\n\nAfter you edited the *.csproj* file, you need to restore your NuGet packages within your Project. Run the following command in your ASP.NET Core folder:\n\n```sh\ndotnet restore\n```\n\nIf you still use this version you will need to invoke it like this:\n\n```sh\nelectronize ...\n```\n\n### Node.js Integration\n\nElectron.NET requires Node.js integration to be enabled for IPC to function. If you are not using the IPC functionality you can disable Node.js integration like so:\n\n```csharp\nWebPreferences wp = new WebPreferences();\nwp.NodeIntegration = false;\nBrowserWindowOptions browserWindowOptions = new BrowserWindowOptions\n{\n    WebPreferences = wp\n};\n\n```\n\n### Dependency Injection\n\nElectronNET.API can be added to your DI container within the `Startup` class. All of the modules available in Electron will be added as Singletons.\n\n```csharp\nusing ElectronNET.API;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddElectron();\n}\n```\n"
        },
        {
          "name": "artifacts",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.2021484375,
          "content": ":; set -eo pipefail\n:; SCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n:; ${SCRIPT_DIR}/build.sh \"$@\"\n:; exit $?\n\n@ECHO OFF\npowershell -ExecutionPolicy ByPass -NoProfile -File \"%~dp0build.ps1\" %*\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 2.8828125,
          "content": "[CmdletBinding()]\nParam(\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$BuildArguments\n)\n\nWrite-Output \"PowerShell $($PSVersionTable.PSEdition) version $($PSVersionTable.PSVersion)\"\n\nSet-StrictMode -Version 2.0; $ErrorActionPreference = \"Stop\"; $ConfirmPreference = \"None\"; trap { Write-Error $_ -ErrorAction Continue; exit 1 }\n$PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\n$BuildProjectFile = \"$PSScriptRoot\\nuke\\_build.csproj\"\n$TempDirectory = \"$PSScriptRoot\\\\.nuke\\temp\"\n\n$DotNetGlobalFile = \"$PSScriptRoot\\\\global.json\"\n$DotNetInstallUrl = \"https://dot.net/v1/dotnet-install.ps1\"\n$DotNetChannel = \"Current\"\n\n$env:DOTNET_SKIP_FIRST_TIME_EXPERIENCE = 1\n$env:DOTNET_CLI_TELEMETRY_OPTOUT = 1\n$env:DOTNET_MULTILEVEL_LOOKUP = 0\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction ExecSafe([scriptblock] $cmd) {\n    & $cmd\n    if ($LASTEXITCODE) { exit $LASTEXITCODE }\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif ($null -ne (Get-Command \"dotnet\" -ErrorAction SilentlyContinue) -and `\n     $(dotnet --version) -and $LASTEXITCODE -eq 0) {\n    $env:DOTNET_EXE = (Get-Command \"dotnet\").Path\n}\nelse {\n    # Download install script\n    $DotNetInstallFile = \"$TempDirectory\\dotnet-install.ps1\"\n    New-Item -ItemType Directory -Path $TempDirectory -Force | Out-Null\n    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n    (New-Object System.Net.WebClient).DownloadFile($DotNetInstallUrl, $DotNetInstallFile)\n\n    # If global.json exists, load expected version\n    if (Test-Path $DotNetGlobalFile) {\n        $DotNetGlobal = $(Get-Content $DotNetGlobalFile | Out-String | ConvertFrom-Json)\n        if ($DotNetGlobal.PSObject.Properties[\"sdk\"] -and $DotNetGlobal.sdk.PSObject.Properties[\"version\"]) {\n            $DotNetVersion = $DotNetGlobal.sdk.version\n        }\n    }\n\n    # Install by channel or version\n    $DotNetDirectory = \"$TempDirectory\\dotnet-win\"\n    if (!(Test-Path variable:DotNetVersion)) {\n        ExecSafe { & powershell $DotNetInstallFile -InstallDir $DotNetDirectory -Channel $DotNetChannel -NoPath }\n    } else {\n        ExecSafe { & powershell $DotNetInstallFile -InstallDir $DotNetDirectory -Version $DotNetVersion -NoPath }\n    }\n    $env:DOTNET_EXE = \"$DotNetDirectory\\dotnet.exe\"\n}\n\nWrite-Output \"Microsoft (R) .NET SDK version $(& $env:DOTNET_EXE --version)\"\n\nExecSafe { & $env:DOTNET_EXE build $BuildProjectFile /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet }\nExecSafe { & $env:DOTNET_EXE run --project $BuildProjectFile --no-build -- $BuildArguments }\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 2.220703125,
          "content": "#!/usr/bin/env bash\n\nbash --version 2>&1 | head -n 1\n\nset -eo pipefail\nSCRIPT_DIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n\n###########################################################################\n# CONFIGURATION\n###########################################################################\n\nBUILD_PROJECT_FILE=\"$SCRIPT_DIR/nuke/_build.csproj\"\nTEMP_DIRECTORY=\"$SCRIPT_DIR//.nuke/temp\"\n\nDOTNET_GLOBAL_FILE=\"$SCRIPT_DIR//global.json\"\nDOTNET_INSTALL_URL=\"https://dot.net/v1/dotnet-install.sh\"\nDOTNET_CHANNEL=\"Current\"\n\nexport DOTNET_CLI_TELEMETRY_OPTOUT=1\nexport DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1\nexport DOTNET_MULTILEVEL_LOOKUP=0\n\n###########################################################################\n# EXECUTION\n###########################################################################\n\nfunction FirstJsonValue {\n    perl -nle 'print $1 if m{\"'\"$1\"'\": \"([^\"]+)\",?}' <<< \"${@:2}\"\n}\n\n# If dotnet CLI is installed globally and it matches requested version, use for execution\nif [ -x \"$(command -v dotnet)\" ] && dotnet --version &>/dev/null; then\n    export DOTNET_EXE=\"$(command -v dotnet)\"\nelse\n    # Download install script\n    DOTNET_INSTALL_FILE=\"$TEMP_DIRECTORY/dotnet-install.sh\"\n    mkdir -p \"$TEMP_DIRECTORY\"\n    curl -Lsfo \"$DOTNET_INSTALL_FILE\" \"$DOTNET_INSTALL_URL\"\n    chmod +x \"$DOTNET_INSTALL_FILE\"\n\n    # If global.json exists, load expected version\n    if [[ -f \"$DOTNET_GLOBAL_FILE\" ]]; then\n        DOTNET_VERSION=$(FirstJsonValue \"version\" \"$(cat \"$DOTNET_GLOBAL_FILE\")\")\n        if [[ \"$DOTNET_VERSION\" == \"\"  ]]; then\n            unset DOTNET_VERSION\n        fi\n    fi\n\n    # Install by channel or version\n    DOTNET_DIRECTORY=\"$TEMP_DIRECTORY/dotnet-unix\"\n    if [[ -z ${DOTNET_VERSION+x} ]]; then\n        \"$DOTNET_INSTALL_FILE\" --install-dir \"$DOTNET_DIRECTORY\" --channel \"$DOTNET_CHANNEL\" --no-path\n    else\n        \"$DOTNET_INSTALL_FILE\" --install-dir \"$DOTNET_DIRECTORY\" --version \"$DOTNET_VERSION\" --no-path\n    fi\n    export DOTNET_EXE=\"$DOTNET_DIRECTORY/dotnet\"\nfi\n\necho \"Microsoft (R) .NET SDK version $(\"$DOTNET_EXE\" --version)\"\n\n\"$DOTNET_EXE\" build \"$BUILD_PROJECT_FILE\" /nodeReuse:false /p:UseSharedCompilation=false -nologo -clp:NoSummary --verbosity quiet\n\"$DOTNET_EXE\" run --project \"$BUILD_PROJECT_FILE\" --no-build -- \"$@\"\n"
        },
        {
          "name": "nuke",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}