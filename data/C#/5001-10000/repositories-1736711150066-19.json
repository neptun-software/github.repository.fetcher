{
  "metadata": {
    "timestamp": 1736711150066,
    "page": 19,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FluentValidation/FluentValidation",
      "stars": 9188,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.458984375,
          "content": "# top-most EditorConfig file\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace=true\ninsert_final_newline=true \n\n# Microsoft .NET properties\ncsharp_new_line_before_members_in_object_initializers=false\ncsharp_new_line_before_open_brace=none\ncsharp_preferred_modifier_order=public, private, protected, internal, new, abstract, virtual, sealed, override, static, readonly, extern, unsafe, volatile, async:suggestion\ncsharp_style_var_elsewhere=true:hint\ncsharp_style_var_for_built_in_types=true:hint\ncsharp_style_var_when_type_is_apparent=true:hint\ndotnet_style_predefined_type_for_locals_parameters_members=true:hint\ndotnet_style_predefined_type_for_member_access=true:hint\ndotnet_style_qualification_for_event=false:warning\ndotnet_style_qualification_for_field=false:warning\ndotnet_style_qualification_for_method=false:warning\ndotnet_style_qualification_for_property=false:warning\ndotnet_style_require_accessibility_modifiers=for_non_interface_members:hint\n\n# ReSharper properties\nresharper_add_imports_to_deepest_scope=true\nresharper_autodetect_indent_settings=true\nresharper_braces_redundant=false\nresharper_csharp_indent_style=tab\nresharper_csharp_wrap_lines=false\nresharper_place_accessorholder_attribute_on_same_line=False\nresharper_use_indent_from_vs=false\nresharper_xmldoc_indent_child_elements=RemoveIndent\nresharper_xmldoc_indent_text=RemoveIndent\nresharper_xmldoc_wrap_lines=false\n\n[*.cs]\nindent_style = tab\ntab_width = 2\nindent_size = tab\nend_of_line = crlf"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.7431640625,
          "content": "ï»¿*.doc  diff=astextplain\n*.DOC\tdiff=astextplain\n*.docx\tdiff=astextplain\n*.DOCX\tdiff=astextplain\n*.dot\tdiff=astextplain\n*.DOT\tdiff=astextplain\n*.pdf\tdiff=astextplain\n*.PDF\tdiff=astextplain\n*.rtf\tdiff=astextplain\n*.RTF\tdiff=astextplain\n\n*.jpg  \tbinary\n*.png \tbinary\n*.gif \tbinary\n\n*.cs -text diff=csharp \n*.vb -text\n*.c -text\n*.cpp -text\n*.cxx -text\n*.h -text\n*.hxx -text\n*.py -text\n*.rb -text\n*.java -text\n*.html -text\n*.htm -text\n*.css -text\n*.scss -text\n*.sass -text\n*.less -text\n*.js -text\n*.lisp -text\n*.clj -text\n*.sql -text\n*.php -text\n*.lua -text\n*.m -text\n*.asm -text\n*.erl -text\n*.fs -text\n*.fsx -text\n*.hs -text\n\n*.csproj -text merge=union \n*.vbproj -text merge=union \n*.fsproj -text merge=union \n*.dbproj -text merge=union \n*.sln -text merge=union \n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.341796875,
          "content": "build/\r\n*.suo\r\n*.user\r\nbin\r\nBin\r\nobj\r\n_ReSharper*\r\n*.csproj.user\r\n*.resharper.user\r\n*.suo\r\n*.cache\r\nTestResult.xml\r\n*.orig\r\n.hg/\r\n.hgignore\r\npackages/\r\n*.sln.ide/\r\nartifacts/\r\nTestResults/\r\n.vs/\r\n*.lock.json\r\n*.ncrunch*\r\n.idea/\r\n.build/\r\ndocs/_site/\r\ndocs/Gemfile.lock\r\ndocs/_build/\r\nsrc/FluentValidation.Tests.Benchmarks/BenchmarkDotNet.Artifacts/\r\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.560546875,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\n# We recommend specifying your dependencies to enable reproducible builds:\n# https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n  - requirements: docs/requirements_rtd.txt"
        },
        {
          "name": "Build.cmd",
          "type": "blob",
          "size": 0.0791015625,
          "content": "@echo off\r\npowershell -noprofile -ExecutionPolicy Unrestricted -File build.ps1 %*"
        },
        {
          "name": "Changelog.txt",
          "type": "blob",
          "size": 46.6005859375,
          "content": "12.0.0 -\nDrops support for netstandard2.0, netstandard2.1 and .net 5. Minimum supported platform is now .net 6.\nAdd support for dependent rules for custom rules (#2170)\nRemoves deprecated DI extensions\nRemoves deprecated transform methods (#2027)\nRemove the ability to disable the root-model null check (#2069)\nUse Zomp.SyncMethodGenerator to clean up internal sync/async code paths (#2136)\nAdd Serbian (Cyrillic) language; rename existing Serbian to Serbian (Latin) (#2283)\n\n11.11.0 - 16 Nov 2024\nAdd additional overload of WithState that takes a context (#2276)\n\n11.10.0 - 15 Sep 2024\nAdd WhereAsync as conterpart to Where on collection rules (#2240)\nCreate IEnumValidator to expose the targeted Enum type of EnumValidator (#2244)\nAdd Romansh language translations (#2239)\n\n11.9.2 - 10 Jun 2024\nScalePrecisionValidator error message clarification (#2211)\n\n11.9.1 - 23 Apr 2024\nFix issue with CascadeMode on child validators (#2207)\n\n11.9.0 - 21 Dec 2023\nFix memory leak in NotEmptyValidator/EmptyValidator (#2174)\nAdd more descriptive error messages if a rule throws a NullReferenceException (#2152)\nAdd support for caching root parameter expressions (eg RuleFor(x => x)) (#2168)\nAdd builds for .net 8\nPrevent AddValidatorsFromAssemblyContaining from registering validators twice (#2182)\n\n11.8.1 - 22 Nov 2023\nFix unintentional behavioural changes in introduced in the previous release as part of #2158\n\n11.8.0 - 19 Oct 2023\nAdded AbstractValidator.OnRuleAdded to allow customization of rule instances after creation (#2114)\nFix Serbian translation of LengthValidator (#2147)\nFix chinese culture codes (#2151)\nAdd Khmer translations (#2155)\nVarious performance improvements (#2158)\nFix ChildRules with class hierarchies (#2165)\n\n11.7.1 - 12 Aug 2023\nResolved issue with combining multiple ValidationResult instances where RuleSetsExecuted wasn't properly set on the combined result (#2125)\n\n11.7.0 - 11 Aug 2023\nAdd additional constructor for combining multiple ValidationResult instances (#2125)\nAdd PropertyPath placeholder (#2134)\nFix Brazilian Portuguese translation (#2131)\n\n11.6.0 - 4 Jul 2023\nAdd OnFailurecCreated callback in ValidatorOptions.Global (#2120)\nFix typo in Russian localization (#2102)\nAdd Tajik language (#2108)\nFixed some typos in Validator Extension docblocks (#2118)\n\n11.5.2 - 7 Apr 2023\nResolve issue with ruleset propogation for multiple levels of child rules (#2097)\n\n11.5.1 - 20 Feb 2023\nDeprecated the ability to disable the root model null check via overriding AbstractValidator.EnsureInstanceNotNull (#2069)\nDeprecated the Transform and TransformAsync methods (#2072)\n\n11.5.0 - 13 Feb 2023\nMemberNameValidatorSelector now supports wildcard indexes in property paths (#2056)\nAdded overload of TestValidateAsync that accepts a context (#2052)\nMinor optimization to regex validator (#2035)\nAdded Kazakh translations (#2036)\nAdded Catalan translations and updated Spanish translations (#2050)\nUpdates to Uzbek Latin and Cyrillic translations (#2040/#2041/#2045)\nUpdates to Italian translations (#2039)\nUpdates to French translations (#2065)\n\n11.4.0 - 23 Nov 2022\nDeprecate ScalePrecision validator and introduce PrecisionScale validator as its replacement (#2030)\n\n11.3.0 - 10 Nov 2022\nAnnotate string parameters with StringSyntaxAttribute.Regex in net7 builds (#1957)\nFixes to SourceLink integration (#2019)\nAdd Uzbek Latin and Cyrillic languages (#2013)\nUpdates to Danish language (#2012)\n\n11.2.2 - 11 September 2022\nMemberNameValidatorSelector should make use of PropertyNameResolver when parsing expressions (#2003)\n\n11.2.1 - 28 August 2022\nFix test helper .Only() not taking into account parent-level unmatched failures (#1986)\n\n11.2.0 - 8 August 2022\nResolve issue with unexpected results when with nested Include calls with the MemberNameValidatorSelector (#1989)\nAdd a new Selector Factory for the Composite Selector (#1988)\n\n11.1.1 - 6 August 2022\nFix issue with incorrect rulesets being executed in a child validator when combined with ChildRules (#1981)\nBulgarian translations of default messages (#1973)\n\n11.1.0 - 22 June 2022\nAdded a ToDictionary method to ValidationResult\nMVC auto validation: Deprecated Implicit validation of child properties (#1960)\nMVC auto validation: Deprecated Implicit validation of root collection elements (#1960)\nDeprecated InjectValidator (#1960)\nDeprecate validator factories (#1961)\nIntroduce services.AddFluentValidationAutoValidation() and services.AddFluentValidationClientsideAdapters() as replacements for services.AddFluentValidation() (#1965)\nRemove duplication between sync and async validation in the internal model.\n\n11.0.3 - 10 June 2022\nFix an issue where an exception would be thrown when calling ValidateAsync if a rule was wrapped with a call to WhenAsync. (#1955)\n\n11.0.2 - 27 May 2022\nChild validator contexts should contain a reference to their parent context (#1945)\nSupport deserialization of ValidationResult using System.Text.Json (#1928)\n\n11.0.1 - 7 May 2022\nFix regression in the Test Helper affecting the With* and Without* assertion methods (#1937)\n\n11.0.0 - 30 Apr 2022\nEnsure property covariance is properly handled throughout the internal model (#1713)\nThrow exceptions when async validator is invoked synchronously (#1705)\nRemoval deprecated OnFailure/OnAnyFailure callbacks.\nRemove deprecated RunDefaultMvcValidationAfterFluentValidationExecutes option from ASP.NET integration.\nRemove deprecated Options property from RuleComponent.\nRemove deprecated TestHelper methods.\nRemove PropertyValidator backwards compatibility layer.\nAdd method Only() asserting that no other validation errors were raised.\n\n10.4.0 - 11 Mar 2022\nAllow use of \"*\" with RuleSetForClientSideMessagesAttribute and HttpContext.SetRulesetForClientsideMessages (#1912)\nFix Azerbaijani language code (#1874)\n\n10.3.6 - 13 Dec 2021\nFix Azerbaijani language code (#1865)\nSetting DisableAutomaticValidation to true should prevent implicit validation running (#1868)\nEnable package validation (#1860)\n\n10.3.5 - 30 Nov 2021\nFixed ThrowOnFailures not being passed through if context creation requires type conversion (#1863).\n\n10.3.4 - 22 Oct 2021\nClientside messages shouldn't be generated for the lazy version of LessThanOrEqual/GreaterThanOrEqual (#1818)\nRemove enumerable boxing in Empty/NotEmpty validators (#1823)\n\n10.3.3 - 24 Aug 2021\nRemove reference type constraint for TestValidate (#1815)\n\n10.3.1 - 19 Aug 2021\nFix scale precision error message when digits is calculated as negative (#1790)\nShared conditions shouldn't rely on object hashcode for unique ID (#1810)\n\n10.3.0 - 9 July 2021\nUpdate Russian translations (#1761)\nAdd Thai translations (#1768)\nAdd Azerbaijani translations (#1770)\nDeprecate the old test helper methods in favour of TestValidate.\nDeprecate OnFailure and OnAnyFailure callbacks.\n\n10.2.3 - 3 Jun 2021\nResolve issue with rulesets not cascading correctly to Inheritance Validators (#1754)\n\n10.2.2 - 1 Jun 2021\nAdd backwards compatibility overloads for validator registration methods.\n\n10.2.1 - 30 May 2021\nOptional internal type registration should work with MVC registration (#1748)\n\n10.2.0 - 28 May 2021\nDisplay name generation should be consistent between RuleForEach and RuleFor.ForEach (#1231)\nAllow AddFluentValidation to be called directly on IServiceCollection (#1726)\nThrow exception on ValidateAndThrow even if PreValidate prevents further Validation (#1736)\nValidationException now includes rule severity (#1733)\nOptionally support internal types when scanning assemblies for validators (#1742)\nDeprecate RunDefaultMvcValidationAfterFluentValidationExecutes in MVC configuration. Use DisableDataAnnotationsValidation instead.\n\n10.1.0 - 28 April 2021\nAllow default severity level to be set globally (#1715)\nExtend use of variance into the internal API to resolve invalid cast exceptions in some scenarios (#1711)\nFix clientside metadata being incorrectly generated for cross-property LessThanOrEqual/GreaterThanOrEqual (#1721)\n\n10.0.4 - 17 April 2021\nFix a bug where async conditions were sometimes run synchronously.\n\n10.0.3 - 15 April 2021\nFix ArgumentOutOfRangeException when condition returns false for RuleForEach containing multiple components (#1698)\n\n10.0.2 - 9 April 2021\nExpose ErrorCode property on IRuleComponent.\n\n10.0.1 - 8 April 2021\nAdd GetPropertyValue method to IValidationRule<T>\nFix context parameter types on IValidationRule.ApplyCondition and ApplyAsyncCondition.\n\n10.0.0 - 6 April 2021\nPlease review the upgrade guide for 10.0: https://docs.fluentvalidation.net/en/latest/upgrading-to-10.html\nPerformance improvements.\nCollection rules now only iterate the collection once.\nProperty validators are now generic.\nInternal API now uses generics.\nDeprecated non-generic PropertyValidator.\nVarious property validator options have been seperated into RuleComponents.\nVarious parts of the internal API are now internal (PropertyRule, CollectionPropertyRule etc).\nValidatorDescriptor now returns rule components in various places.\nChanged type of ValidationResult.Errors from IList<ValidationFailure> to List<ValidationFailure>\nDefault service lifetime is now Scoped rather than Transient.\nCombine IActionContextValidatorInterceptor and IValidatorInterceptor.\nChanges to the ASP.NET Client Validator Adaptor interfaces. These now receive the rule component.\nRemoved deprecated IStringSource and its inheritors.\nRemoved deprecated FormattedMessageArguments from ValidationFailure.\nRemoved other deprecated code.\n\n9.5.4 - 5 April 2021\nFix Serbian translation of error messages (#1683)\nAdd Vietnamese translations of error messages (#1677)\n\n9.5.3 - 15 March 2021\nFix Swedish translation for CreditCardValidator (#1664)\n\n9.5.2 - 8 March 2021\nFix Dutch translation of some errors (#1653)\nFix string equality comparison in WithCustomState extension (#1658)\n\n9.5.1 - 11 February 2021\nFix incorrect wording in deprecation message for Transform (#1613)\nFix ScalePrecision validator being available in intellisense for non-decimal properties.\nExpose additional overload of Transform that receives the root object in the transformer.\n\n9.5.0 - 31 January 2021\nIntroduce new syntax for applying transformations and deprecate the old syntax (#1613)\n\n9.4.0 - 14 January 2021\nChildRules now work as expected when inside a ruleset (#1597)\nAdded ImplicitlyValidateRootCollectionElements option to MVC integration (#1585)\n\n9.3.0 - 10 November 2020\nSupport for .NET 5\nImprovements to LanguageManager's lazy loading of resources.\nDeprecate IStringSource and its implementors. Use delegates instead.\nCustomizeValidatorAttribute now works in Razor pages (netcore 3.1 and net 5.0 only) (#1541)\nRuleSetForClientSideMessagesAttribute now works in Razor pages (netcore 3.1 and net 5.0 only) (#1544)\nFixes to Spanish translations.\n\n9.2.2 - 20 September 2020\nFix one of the inheritance validator overloads not working correctly (#1528)\n\n9.2.1 - 19 September 2020\nAdd non-generic Add method to inheritance validator.\nUpdates to Persian translations (#1513)\nAdded Bengali translations (#1517)\n\n9.2.0 - 26 August 2020\nAdd inheritance validator (#1237)\nPerformance improvements.\n\n9.1.3 - 19 August 2020\nFix an issue with IncludeRulesNotInRuleSet not working correctly (#1493)\n\n9.1.2 - 12 August 2020\nMake the ValidationContext.ThrowOnFailures getter public.\n\n9.1.1 - 8 August 2020\nUpdate StopOnFirstFailure deprecation message.\n\n9.1 - 8 August 2020\nMake ruleset separator character splitting consistent (#1424)\nTransform now works with RuleForEach (#1450)\nIntroduce constants for rulesets (#1435)\nResolve issue when attempting to use asynchronous conditions in a synchornous validaiton run (#1438)\nAdded asynchronous versions of the TestHelper methods (#1423)\nIntroduce CascadeMode.Stop and deprecate CascadeMode.StopOnFirstFailure to resolve confusion/abiguity about setting the cascade mode at validator-level (#1437)\nRaiseValidationException can be overridden to customize the exception throwing process (#1162)\nAdd new Validate extension methods that allow options to be configured using a strategy (#1467)\n\n9.0.1 - 14 July 2020\nFix assembly version was still 8.\n\n9.0 - 6 July 2020\nRemoved support for netstandard1.1, netstandard1.6 and net45 (net461 still supported)\nRemoved support for unsupported .NET Core versions (2.2 and 3.0). LTS versions are supported (2.1 and 3.1)\nDefault email validation mode now uses the same logic as ASP.NET Core. Previous regex behaviour is opt-in.\nTestHelper advanced mode now has more features (see https://docs.fluentvalidation.net/en/latest/testing.html#advanced-test-extensions)\nEqual/NotEqual now perform ordinal comparison when used with string properties\nSeverity can now be set dynamically with a callback\nRemoved WithLocalizedMessage (WithMessage that takes a callback is the replacement)\nRemoved ResourceName from ValidationFailure\nRemoved ResourceName and ResourceType from IStringSource.\nRemoved SetCollectionValidator which was deprecated in 8.0\nRemoved DelegatingValidator which was deprecated in 8.x.\nAdditional overload of OnAnyFailure that can receive a collection of validation failures\nRemove DisplayAttribute integration and reference to DataAnnotations.\nComparisonProperty placeholder is now formatted like PropertyName\nTranslations of default error messages into other languages are now lazily-loaded\nPropertyValidator.ShouldValidateAsync reanamed to ShouldValidateAsynchronously to remove confusion where the naming suggested this was an async method\nPropertyValidatorContext.Instance renamed to InstanceToValidate for consistency with ValidationContext.\nRemoved various methods from MessageFormatter that were deprecated in 8.x\nAdded Slovenian translations of default error messages.\nAdded Icelandic translations of default error messages.\nAdded WithMessageArgument to the test helpers.\nTransform can now be used to transform property values to other types.\nFluentValidationModelValidatorProvider and FluentValidationModelValidator are now public.\nAdd additional overload of SetValidator that takes a Func that receives the current property value.\nWork around a bug in ASP.NET Core's integration testing components that can cause ConfigureServices to run multiple times.\nSourceLink integration.\n{CollectionIndex} placeholder can now be accessed in child validators.\nAdditional ValidationException constructor that allows using both the default message and a custom one together.\nScalePrecisionValidator algorithm now matches SQL Server.\nAdditional overload of the When methods that contain the validation context.\nAutomatically scanned types can be excluded when calling RegisterValidatorsFromAssemblyContaining in ASP.NET Core projects.\nNew AutomaticValidationEnabled property for use in ASP.NET Core projects (defaults to true).\n\n8.6.2 - 29 February 2020\nFix CollectionIndex placeholder not working with async workflow.\n\n8.6.1 - 28 December 2019\nAdd explicit netcoreapp3.1 target to ASP.NET Core integration.\n\n8.6.0 - 4 December 2019\nAdd support for ASP.NET Core 3.1\nFixed issue with property indexers being incorrectly stripped out when using test extensions.\nAddToModelState no longer includes a dot if PropertyName is null\n\n8.5.1 - 2 November 2019\nEnsure lazily loaded calls to WithMessage can be used for client-side validation, provided they don't attempt to access model properties from inside the delegate (eg when using IStringLocalizer).\nFix issue where OnFailure didn't work properly when invoked on validators with conditions.\n\n8.5.0 - 24 September 2019\nAdd ASP.NET Core-compatible version of the email address validator.\nSimplify the advanced testhelper syntax.\nAdd support for ASP.NET Core 3.\nAdd support for defining child rules inline.\nValidatorDescriptor now has consistent handling of model-level rules.\nRuleForEach can now access collection index in error message with {CollectionIndex} placeholder.\nWelsh language translations of default error messages.\nHungrian language translations of default error messages.\nIndonesian language translations of default error messages.\nUsing RuleForEach combined with When is now more intuitive.\nFixed order of rule execution when using async validation.\n\n8.4.0 - 10 May 2019\nAdded simplified version of several messages across all translations to aid with ASP.NET Clientside validation.\nNew enum validator for string properties.\n\n8.3.0 - 24 April 2019\nFix issue in ASP.NET Core integration with GetServiceProvider not working correctly when invoked against a CustomContext/MessageBuilderContext.\nImproved how LanguageStringSource works with error-code overrides.\nFix thread-safety issue with use of PropertyValidatorOptions.Empty (now removed).\nImproved how calls to When/Unless are handled internally.\nDelegatingValidator is now marked as deprecated.\nImprovements to Croatian language translations.\nImprovements to Georgian language translations.\nResolved subtle bug where top-level WhenAsync wouldn't work correctly when wrapping a top-level call to When.\n\n8.2.3 - 12 April 2019\nFix issue with WebApi integration where DataAnnotations validation could generate duplicate messages when used in the same\nproject as FluentValidation.\n\n8.2.2 - 5 April 2019\nFix typo in FluentValidation.DependencyInjectionExtensions package name.\n\n8.2.1 - 4 April 2019\nResolved issue using InjectValidator with RuleForEach.\nAdd support for a default IValidatorInterceptor to be registered with the ASP.NET Core Service Provider.\nAdded \"Without\" test extensions for consistency with existing \"With\" text extensions.\n\n8.2.0 - 26 March 2019\nAdd extensions for injecting child validators using the ASP.NET Core Service Provider.\nWithLocalizedMessage is deprecated. Use the overload of WithMessage that takes a Func instead.\nImplement RuleFor(...).ForEach(...) as an alternative to RuleForEach\n\n8.1.3 - 25 January 2019\nResolved issue where clientside validation was incorrectly generating metadata for rules with shared conditions.\nScalePrecisionValidator now has a public method in the fluent interface.\nFix placeholder names in ScalePrecisionValidator for consistency.\nUpdates to Portuguese (Brazil) translations.\n\n8.1.2 - 18 December 2018\nFix the same issue from 8.1.1 but for async conditions.\nFix issue where shared When/Unless conditions didn't execute correctly when used with RuleForEach.\n\n8.1.1 - 11 December 2018\nAdded RuleSetsExecuted property to ValidationResult.\nFix issue with shared condition cache incorrectly caching when used with RuleForEach.\n\n8.1.0 - 6 December 2018\nAdded format support for message placeholders.\nAdded support for overriding indexers for collection rules.\nAllow ErrorCode to be used to override localization key in the Language Manager.\nAdditional error details are now shown in the ShouldNotHaveValidationErrorFor test extension.\nConditions defined with root-level When/WhenAsync/Unless/UnlessAsync are now only executed once (instead of once for each rule).\nSupport Otherwise method chained from root-level When/WhenAsync/Unless/UnlessAsync.\nMinor wording changes to default English error messages.\nAdded Skip property to MVC5's CustomizeValidatorAttribute to bring parity with AspNetCore and WebApi integration.\nJapanese translation of the default error messages.\nRemove type constraint on the OverridePropertyName overload that takes an expression.\n\n8.0.101 - 24 November 2018\nFix clientside property comparison validation adaptor in ASP.NET Core integration.\n\n8.0.100 - 4 September 2018\nAdded Greek language translation.\nResolved an issue where Cascade and Transform couldn't be used with RuleForEach\n\n8.0.0 - 16 Aug 2018\nSupport validating only specific properties by path.\nAllow specifying a ruleset with SetValidator for complex properties.\nIntroduce PropertyValidatorOptions in order to clean up the IPropretyValidator interface.\nMoved the AttributedValidatorFactory into a separate package.\nIStringSource.GetString now takes a context.\nMajor cleanup of asynchronous validation workflow.\nDeprecate SetCollectionValidator in favour of RuleForEach().SetValidator\nRemove the pre-7 version of Custom/CustomAsync.\nRemoved deprecated localization system.\nRemove deprecated RemoveRule/ReplaceRule/ClearRules methods.\n\n7.6.105 - 11 August 2018\nAdded Albanian language translations\nAdded Chinese Traditional language translation\nFix #858 ValidationTestExtension.When() incorrectly checks each failure instead of all failures\n\n7.6.104 - 6 July 2018\nAdded AbstractValidator.PreValidate to allow immediate cancellation of validation.\n\n7.6.103 - 16 June 2018\nUsing [BindProperty] in AspNetCore now works when implicit child validation is disabled.\nShouldHaveChildValidator now works when the child validator is inside a DependentRules block.\nTest helpers are now compatible with custom property name resolvers set using ValidatorOptions.PropertyNameResolver.\nSwitched to embedded debug symbols.\n\n7.6.102 - 14 June 2018\nFixed a regression where calling ValidateAsync with RuleForEach would no longer execute tasks sequentially (#799).\n\n7.6.101 - 13 June 2018\nAdded support for RuleForEach to the testing extensions (#238).\nFixed a regression where calling ValidateAsync with RuleForEach could cause a deadlock (#799).\nAdded ToString overrides on ValidationResult to generate a string representation of all errors (#778).\nUpdated logos thanks to Dylan Beattie (#780).\n\n7.6.100 - 7 June 2018\nResolved an issue where ValidateAsync was called on child validators when the root validator was invoked synchronously.\n\n7.6 - 1 June 2018\nFix WhenAsync not working properly when calling Validate instead of ValidateAsync\nUpgrade ASP.NET Core integration to ASP.NET Core 2.1\nInclude rules now work with explicitly-selected properties.\nAdded caching when instantiating validators to obtain clientside metadata\n\n7.5.2 - 16 March 2018\nSupport multiple rulesets on a rule.\nMake setters on ValidationFailure's properties public to allow for easier deserialization.\nAdditional overload for OverridePropertyName that takes an expression.\nAdd overload of Include that lazily creates the inner validator.\nAllow replacing the default Error Code resolution process\n\n7.5.1 - 11 March 2018\nSupport CustomizeValidatorAttribute in WebApi integration\nResolved issues with referencing FluentValidation from legacy PCLs.\n\n7.5 - 26 February 2018\nBetter handling of clientside messages when using custom overridden language resources\nFlag in the ValidationContext's RootDataContext when a validator is invoked by the automatic MVC/WebApi integration\nImprovements to some of the validation tester's messages\nAdded Transform method to transform property values prior to validation\nImprove support for DisplayAttribute / DisplayNameAttribute when inferring property display name\nAdded Slovak language support\nAdded Hebrew language support\nAdded Brazilian Portuguese language support\nCache display names by default\nEnsure ShouldHaveChildValidator test method works with model-level rules\nRemoved netstandard1.0 support. Supported platforms are now netstandard1.1, netstandard2.0 and net45.\n\n7.4 - 27 January 2018\nUpdate DependentRules syntax and mark old syntax as obsolete\nAdd workaround for inconsistent behaviour with HttpContext.Items with nonexistent keys in different version of AspNetCore\nUpdated ValidationException serialization support\nAdd ComparisonProperty to comparison validator message placeholders\nThe Test Helper now correctly handles read-only properties\nAdd CancellationToken support to ValidateAndThrowAsync and various ValidateAsync overloads\nIntroduce MessageBuilderContext to make custom MessageBuilders more useful\nUpdate Microsoft.AspNetCore.Mvc dependency to 2.0.2\nUpdate MVC5/WebApi2 AddToModelState extension not to overwrite existing attempted values\nAdd SetRulesetForClientsideMessages extension method for MVC5/AspNetCore\n\n7.3.4 - 2 January 2018\nResolved issue in AspNetCore integration where the change made in 7.3.3 meant that child collections were incorrectly skipped for DataAnnotations-based validation, as well as FV\n\n7.3.3 - 22 December 2017\nResolved issue in AspNetCore integration where child collections were incorrectly validated by the ModelValidatorProvider\n\n7.3.2 - 21 December 2017\nAdded CancellationToken support to child validators\n\n7.3 - 13 December 2017\nMajor improvements to the AspNetCore integration including better collection support and optional support for implicit validators\nMarked ValidationException as serializable when running on full framework\nUpdated EnumValidator's Flags support to handle the ~0 value\nFixed TestHelper checking for child validator would respond with the wrong type\nUpdated translations for some validators and fixed some incorrect language codes\nFixed overload of WithName that takes a lambda.\nUpdated version of the Czech translations\nAdded versions of WhenAsync and UnlessAsync that support CancellationTokens\nSimplify calls to DependentRules\nAdd Skip property to CustomizeValidatorAttribute in the ASP.NET Core integration\nUpdated language translations for various error messages.\n\n7.2.1 - 24 October 2017\nIntroduce MessageFormatterFactory\nAdditional language translations\nAdditional checks to ensure HttpContext is registered\n\n7.2 - 5 October 2017\nUpdated AspNetCore integration to support IValidatableObject\nUpdated AspNetCore integration to allow mixing multiple validation strategies in the same model\nUpdated AspNetCore integration to work with RulesetForClientsideMessagesAttribute, like MVC5\nResolved issue with auto generating property names for nested types in the CustomValidator when using AddFailure\nResolved issue where Custom sync/async invocation caused a NullReferenceException\nResolved an issue with AspNetCore clientside integration being resolved from the root-level service provider\nAllow string.Empty in OverridePropertyName\n\n7.1.1 - 25 July 2017\nResolved issue where incorrect property name was generated when using RuleForEach combined with SetValidator\nResolved an issue where nesting async validators inside DependentRules didn't wait for completion\n\n7.1 - 28 June 2017\nMerged pull request - improved messages in ShouldHaveChildValidator test extension\nMerged pull request - test helper works with nested properties\nAdded additional overload of WithState that accepts a property value\nFixed StringLengthFluentValidationPropertyValidator generating the wrong comparison values when used in conjunction with the MaxLengthValidator and MinLengthValidator\n*Breaking change* Signature change of PropertyValidator.CustomStateProvider\nAdd new RuleFor().Custom validator method as a replacement of the root-level Custom method\nAssemblyScanner now excludes abstract and generic types.\nResolve issue with InvalidCastException when using lazy WithMessage with RuleForEach\n\n7.0.3 - 7 June 2017\nAdded missing overload for WithMessage\nEnsure LanguageManager.Culture takes precedence over the current thread's culture\n\n7.0.2 - 26 May 2017\nVarious fixes to clientside validation in asp.net core\n\n7.0.1 - 23 May 2017\nImprove message for MinimumLength and MaximumLength validators in English (other translations would be welcome).\nAdded FluentValidationModelValidatorProvider.DisableDiscoveryOfPropertyValidators for backwards compatibility\n\n7.0 - 19 May 2017\nSwitch to Netstandard based build process\nDeprecated IResourceAccessorBuilder and merged the functionality into LocalizedStringSource\nDeprecated all uses of expression-based localization. Use resourcename/resourcetype instead\nResolved issue with possible NullReferenceException in the AspNetCore clientside integration for length validators\nDon't clear the ModelValidatorProviders collection by default in the AspNetCore integration (added new ClearValidatorProviders property to control this behaviour)\nAssemblies are now signed\nAssemblyVersion is no longer automatically incremented to avoid binding redirects\nRemoved the old FluentValidation.snk and replaced with FluentValidation-dev.snk (nuget releases use a separate snk not stored in git)\nEnsure IValidatorFactory is resolved from request scope in asp.net core integration\nRewrote the localization support not to require satellite assemblies\nFix issue in WebApi integration where a property getter that throws an exception causes validation to fail\nFix issue in AspNetCore integration where we tried to resolve a collection validator in some situations where a class validator should be used\nImprove SplitPascalCase method to support uppercase character sequences\nValidationResult.ErrorCode property now always returns the type of the PropertyValidator that generated the message, unless it's been explicitly overridden\nFix incorrect clientside validation attributes generated for email validator and credit card validator in the asp.net core integration\nFix child model validation in webapi integration\n\n6.4.1 - 15 Mar 2017\nResolve issue where the accessor cache would incorrectly cache certain expressions on method calls that return members\nAdded the ability to disable the accessor cache\n\n6.4 - 3 Mar 2017\nAspNetCore support\nPerformance improvements for validatior instantiation\nEnumValidator supports Flags\nAdd ValidationSeverity\nAdd support for collection validators on model-level rules\nFixes/cleanup to RegexValidator and LengthValidator\nAsync validators should run dependent rules\nClearer exception message when passing a null instance into the root-level Validate method\nAdditional overloads and clarity for WithMessage/WithLocalizedMessage overloads\n\n6.2.1 - 26 Feb 2016\nFix DependentRules not working inside a top-level call to When\nFix enum validator to work correctly with nullable enums\n\n6.2 - 22 Feb 2016\nMake ChildValidatorAdaptor.GetValidator public\nMake some of the private methods in FluentValidationModelValdiatorProvider protected instead of private\nValidatorSelectors are now globally configurable through ValidatorOptions.ValidatorSelectors\nValidatorSelectors can be overridden within the CustomizeValidatorAttribute\nAdded \"Include\" statement\nSwitched \"dotnet\" nuget library to uap10.0\nAdd Enum validator\n\n6.1 - 18 Jan 2016\nOverload of ValidateAndThrow supports rulesets.\nSeparate PCL to support Universal Win10 apps\n\n6.0.2 - 5 Jan 2016\nFix issue with TestHelper not using correct overload.\n\n6.0 - 22 Dec 2015\nCore - Fixed DelegateValidator causes a deadlock when running an async function synchronously.\nCore - Fixed Equal/NotEqual not working with structs\nCore - Additional overload of SetValidator that takes a validatorProvider\nCore - Additional overloads for Length and Matches that take a func for accessing comparison properties\nCore - ValidationContext.IsChildContext is now public\nCore - Add support for non-integer indexers in child collections\nCore - Added Empty and Null validators (opposite of NotEmpty and NotNull)\nCore - Add ErrorCode property\nCore - Add support for Dependent Rules\nAsync - Added support for cancellation tokens\nAsync - Add support for conditionals\nAsync - Allow model-level rules with ValidateAsync\nLocalization - added translations for Polish and simple Chinese\nLocalization - Fixed name of Czech resource file\nMVC/WebApi - Allow ValidatorAttribute on method parameters\nWebApi - Add support for AddToModelState\n\n5.6.2 - 29 May 2015\nRegExValidator can now use a special {RegularExpression} placeholder in its error message.\nFix two crashes when using the PCL build\nFix issue with GetAssembly\n\n5.6 - 22 May 2015\nPatch - Added properties to Error that can be used to build customized message.\nFixed issue where setting global resource provider isn't propogated to metadata, breaking client-side messages\nin some situations.\nPatch - allow spaces in credit card numbers\nAdded Support model level-rules with RuleFor(x => x)\nFixed issue with PropertyChain not handling nulls/empty strings properly\nAdded support for rule dependencies\nAdded ValidatorDescriptor.GetRulesByRuleset\n\n5.5 - 30 Oct 2014\nPatch - Added optional RuleSet arguments to the validation test extensions.\nPatch - Support MVC4/5 client-side validation for GreaterThanOrEqualToValidator\nPatch - Support MVC4/5 client-side validation for LessThanOrEqualValidator\nPatch - Remove duplication in Min/MaxFluentValidationPropertyValidator\nPatch -  Async validation for ChildCollectionValidatorAdaptor\nUpdate nuget package for wpa81\n\n5.4 - 03 Jul 2014\n* Applied patch - Danish translation\n* Applied patch - Improve DisplayName resolution performance\n* Update WebApi/MVC dependencies\n\n5.3 - 27 May 2014\n* Fix issue https://fluentvalidation.codeplex.com/workitem/7183 (email address validation)\n\n5.2 - 21 May 2014\n* Added Czech and Finish translation of default error messages\n* Allow nullable target properties for greater/less validators\n* Apply pull request: RuleForEach doesn't respect When condition\n\n5.1 - 11 Mar 2014\n* Applied pull request: Apply the same display name resolving to the target property as to the source property.\n* Applied pull request: Allow parent to be passed to child collection validator\n* Applied pull request: Implement Async validation\n* Applied pull request: Split WebApi into separate project\n* Drop support for MVC 3\n\n5.0 - 24 Oct 2013\n* Display name is now lazily-loaded by default (as a result, localization via DisplayAttribute now works correctly)\n* Added WebApi integration (contributed by dmorganb)\n* Support for MVC 5 (package names are FluentValidation.Mvc5 and FluentValidation.Mvc5-signed)\n* Remove support for partial trust\n\n4.0 - 29 Apr 2013\n* Add portable class library and deprecate the Silverlight-specific projects\n* Added scale precision validator (thanks to Matthew Leibowitz)\n* Added the ability to replace property rules (thanks to Matthew Leibowitz)\n* Added a slightly better value type comparer (thanks to Matthew Leibowitz)\n* Added RuleForEach\n* Additonal overloads of Matches\n* Added MemberAccessor (thanks to Mark Welsh)\n* Fix issue where OverridePropertyName didn't work with SetValidator/SetCollectionValidator\n* Add virtual CreateValidator method in to FluentValidationModelValidatorProvider\n* Add custom error message builder\n* *Breaking* LengthValidator no longer treats null inputs as length 0. This is now consistent with other validators.\n* *Breaking* Change default error messages for Equal/NotEqual validators to use {ComparisonValue} rather than {PropertyValue} for consistency.\n* All validators can now access the current property value inside the error message using {PropertyValue}\n\n3.4 - 17 Aug 2012\n* Make ValidationResut.IsValid virtual\n* Add private no-arg ctor to ValidationFailure to help with serialization\n* Add Turkish error messages\n* Work-around for reflection bug in .NET 4.5\n* BREAKING CHANGE - Assemblies are now unsigned.\n\n3.3 - 30 March 2012\n* Added additional overload for Must that accepts a PropertyValidatorContext.\n* Allow rules not in a RuleSet to be executed in addition to rules in a ruleset, eg: validator.Validate(instance, ruleSet: \"default,MyRuleset\");\n* Support Custom rules within top level When conditions.\n* Russian localization\n* MVC4 compatibility\n\n3.2 - 14 November 2011\n* Fixed issue #7084 (NotEmptyValidator does not work with EntityCollection<T>)\n* Fixed issue #7087 (AbstractValidator.Custom ignores RuleSets and always runs)\n* Removed support for WP7 for now as it doesn't support co/contravariance without crashing.\n\n3.1 - 29 July 2011\n* Support using nullables with cross-property comparisons (GreaterThan/GreaterThanOrEqual/LessThan/LessThanOrEqual)\n* Deprecate and exclude mvc metadata extensions. This is out of scope for FV, but the code for this functionality is still in the repo if anyone still depends on this.\n* Add support for shared conditions based on David Alpert's patch.\n\n3.0.0.1 - 5 July 2011\n* Workaround issue caused by referencing DataAnnotations in windows client projects (eg WPF). Does not affect web projects/silverlight.\n\n3.0 - 25 June 2011\n* Dropped compatibility for .NET 3.5 and MVC2.\n* Removed the SupportsStandaloneValidation property - this was never properly implemented.\n* Implemented Rule Sets\n* Add support for CustomizeValidatorAttribute when using MVC integration.\n* Remove generic PropertyRule<T> - use non-generic version instead.\n* Better support for custom client-side error messages for LengthValidator.\n* Add support for MVC3's IClientValidatable\n* Implement client-side support for InclusiveBetween validator.\n* Implement client-side support for Equal with cross-property validation.\n* Implement client-side support for email validator.\n* Added credit card validator (plus client side support)\n* Add IValidatorInterceptor interface. This can be used to add pre/post hooks to MVC validation integration. An interceptor can either be specified as part of the CustomizeValidatorAttribute or implemented in the validator.\n* Better handling of nullable value types.\n* Add static FluentValidationModelValidatorProvider.Configure for configuring MVC integration with default options.\n* Fixed edge case where custom property names didn't work for Required rules on non-nullable value types in MVC integration.\n* Patch - Polish localization.\n* Additional overloads of WithLocalizedMessage that support custom format args for consistency with WithMessage.\n* Bug fix - overload for NotEqual that takes an expression and an IEqualityComparer did not use the comparer.\n* Added the ability to specify which ruleset is used to generate client-side rules.\n* Introduced SetCollectionValidator for validating collections (replaces non-generic overload of SetValidator)\n* Better type safety using child collection validators.\n* Better control of which elements in a child collection are validated using the new Where method.\n* Support rules for nested properties at the top level (without needing to use a child validator)\n* Support DisplayAttribute/DisplayNameAttribute for inferring property names\n\n2.0 - 13 January 2011\n* Fix typo in the name of FallbackAwareResourceAccessorBuilder\n* Fix issue #7062 - allow validator selectors to work against nullable properties with overridden names.\n* Fix error in German localization.\n* Better support for clientside validation messages.\n\n2.0 RC1 - 10 December 2010\n* Allow custom MVC ModelValidators to be added to the FVModelValidatorProvider\n* Support resource provider for custom property validators through the new IResourceAccessorBuilder interface\n* Introduce WithLocalizedName\n* Deprecated WithPropertyName - you should either use WithName or OverridePropertyName.\n* *Breaking change* Rename IErrorMessageSource and its derivatives to IStringSource\n* Updated ASP.NET MVC integration to MVC3 RC2\n\n2.0 beta 2 - 9 November 2010\n* Breaking change - Renamed the assembly names for SL/WP7 assemblies to FluentValidation.dll for consistency (formerly FluentValidation.Silverlight and FluentValidation.WP7)\n* Breaking change - Finally removed the FV 1.1 backwards compatibility layer.\n* Breaking chagne - Removed the deprecated Cascade() method - use Cascade(cascadeMode) instead (this was deprecated in 1.3)\n* Provide more useful information in ValidationException error message.\n* FluentValidatorModelMetadataProvider now converts NotNull/NotEmpty validators to IsRequired in metadata.\n* Patch - updated German localization\n* Using a child validator on a collection will now skip items in the collection that are null.\n* NotEmptyValidator can now work against empty collections (must implement ICollection)\n\n2.0 beta 1 - October 7 2010\n* AttributedValidatorFactory is finally production worthy with the introduction of InstanceCache\n* Fixed an issue where CascadeMode values are ignored if they're changed after the rules have been defined.\n* Ported FluentValidation to WP7.\n* ShouldHaveChildValidator test helper now works with child collection validators\n* Simplified the implementation of SetValidator.\n* MVC3 integration\n\n1.3 - July 26 2010\n* Added non-generic ValidationContext to allow for using Validator Selectors with non-generic IValidator instances\n* Simplified the internal model\n* Patch - Italian language resources\n* Introduced IErrorMessageSource to abstract different mechanisms for building error messages\n* Made ChildValidatorAdaptor public\n* Silverlight build is now signed\n* Allow cascade mode to be set at the validator level.\n* Deprecated Cascade().StopOnFirstFailure() / Cascade().Continue() in favour of Cascade(cascadeMode) for consistency\n* Deprecated PropertyRule.ReplaceCurrentValidator(newValidator) with PropertyRule.ReplaceValidator(originalValidator, newValidator)\n* *Breaking change* Changed default behaviour of When/Unless. They now apply to all previous validators in the chain, not only to the current one. Previous behaviour can be maintained by using the overload that takes an ApplyConditionTo.\n* NotEmpty now considers strings that contain whitespace as invalid.\n* Added ShouldHaveChildValidator(x => x.Property, typeof(SomeChildValidator)) test extension\n* xVal integration supports custom error messages\n* Made IAttributeMetadataValidator public\n\n1.2 for SL4 - April 29 2010\n* Ported 1.2 codebase to Silverlight 4.\n\n1.2 - March 11 2010\n* Re-enabled MVC1 integration.\n* Tweak ModelValidator behaviour so that all errors are run in one go (again)\n* Added AssemblyScanner.\n* Upgraded to MVC2 RTM.\n\n1.2 beta 3 - Feb 14 2010\n* Fixed issue with MVC2 MetaData throwing exceptions.\n* Initial support additional options (such as When/Unless) on child validators. Needs refactoring for next version.\n* Child validators no longer bypass the Validate method on the child validator instance.\n* Tweak ModelValidator behaviour so that all errors are run in one go.\n\n1.2 beta 2 - Feb 6 2010\n* Issue #4903 - Allow Name Resolution to be pluggable\n* Changed the .SetValidator method to require an IValidator<TProperty> rather than an IEnumerable<IValidationRule<TProperty>>\n* Removed unnecessary CreateDescriptor overload from AbstractValidator.\n* MVC2 Integration - FluentValidationModelValidatorProvider (serverside & clientside)\n* MVC2 Integration - FluentValidationModelMetadataProvider\n* Removed ComplexPropertyRule / NestedCollectionValidator. Replaced with IPropertyValidator implementations.\n\n1.2 beta 1 - Jan 23 2010\n* Upgraded MVC integration to ASP.NET MVC 2\n* Model Binder now works with empty prefixes\n* Added Adam Schroder xVal integration in the new FluentValidation.xValIntegration project (experimental)\n* Allow the validator cascade mode to be set globally. The existing behaviour is the default (Continue). It can now also be set to StopOnFirstFailure:\n    ValidationOptions.CascadeMode = ValidatorCascadeMode.StopOnFirstFailure\n* Allow the validator cascade mode to be set at the rule level (overrides the global option):\n\tRuleFor(x => x.Surname).Cascade().StopOnFirstFailure()\n* User state can be stored along side validation failures.\n* Updated Silverlight project for Silverlight 3.\n* Added the OnAnyFailure method. This delegate will be invoked if any rule attached to a particular RuleBuilder fails.\n* Added ExactLengthValidator (error message needs localising...)\n* Patch - Swedish language resources\n* Added WithPropertyName\n* Patch - InclusiveBetween/ExclusiveBetween validators contributed by Daniel Dyson\n* **Breaking Change** Removed generics from all the IPropertyValidator instances.\n* Introduced PropertyValidator base class\n* **Breaking Change** Removed the ValidationMessageAttribute\n* **Breaking Change** Removed the DefaultResourceManager\n* Simplified PropertyValidatorContext\n* Adding ValidatorFactoryBase to make creation of Validator Factories easier.\n* Additional overload of Custom that can access the current ValidationContext.\n* **Breaking Change** Deprecated and removed the CommonServiceLocator implementation.\n* Removed unnecessary IValidatorOptions interface.\n* Added InlineValidator.\n* Added ValidateAndThrow extension\n\n1.1 - Jul 17 2009\n* Spanish resource translations.\n* French resource translations.\n* EmailValidator now uses regex from http://hexillion.com/samples/#Regex\n\n1.1 beta 3 - Jun 15 2009\n* Patch - Dutch language resources\n* Deleting the deprecated 'And' operator\n* Major refactoring of the fluent interface.\n* Adding an additional overload of Validate to IValidator<T> that takes an IValidatorSelector.\n* Removing the IValidatorOfProperties interface\n* Moved the methods that were on IValidatorOfProperties to extension methods on IValidator\n* AbstractValidator now holds a collection of PropertyRules directly, rather than storing the intermediate RuleBuilders.\n* Introduced the PropertyModel\n* Marking AbstractValidator.CreateDescriptor as virtual.\n* Adding a protected Rules property to ValidatorDescriptor.\n* Allow a custom message to be definied in the ValidationMessageAttribute in addition to a resource key.\n\n1.1 beta 2 - Jun 10 2009\n* Added support for validating nested collections\n* Implemented issue #4446: Additional property values can be accessed from within custom validation messages.\n* *Breaking Change* Validation messages now use custom placeholders such as {PropertyName} rather than {0}, {1} etc. This means that custom validation messages arguments now start at 0.\n* Added a ValidationMessage attribute which can be applied to property validator classes to specify the resource key to use when looking up the error message from the DefaultResourceManager.\n* Now using a more comprehensive regular expression in the EmailValidator.\n\n1.1 beta 1 - May 26 2009\n* Validators can now be chained together: RuleFor(person => person.Address).SetValidator(new AddressValidator());\n* Marked the 'And' property as obsolete. It is now possible to chain validators without it. This will be removed in the next release.\n* Introduced ValidatorSelectors which allow certain validators to be excluded/excluded when validation occurs.\n* Initial work on the metadata API (added ValidatorDescriptor).\n* Added some additional marker interfaces to make obtaining metadata easier.\n* Added FluentValidation Model Binder for use with ASP.NET MVC.\n* Added ValidatorAttribute and AttributedValidatorFactory.\n* Added the ability to use a custom ResourceManager in place of the DefaultResourceManager.\n* Assemblies now marked as CLS Compliant.\n* Public fields can now be validated.\n* Made AbstractValidator.AddRuleBuilder public.\n* Added overload for AbstractValidator.Custom that can return multiple ValidationFailures.\n* Fixed issue #4236 - Error message for the 'Equals' validator showed the value entered not what the value should be.\n* Fixed issue with AddToModelState - empty string prefix should be treated the same as a null prefix.\n* Fixed issue with AddToModelState - SetModelValue should be called to ensure ASP.NET MVC's built-in HTML Helpers do not throw NullReferenceExceptions.\n* Fixed issue with email address regex - plus character should be allowed.\n* Fixed issue in Silverlight project - the Resource files were in the wrong namespace.\n\n1.0 - Mar 27 2009\n* Support for multiple validators on a single property by using 'And' RuleFor(person => person.Surname).NotNull().And.NotEqual(\"Foo\");\n* Added EqualValidator\n* Custom validation messages are now formatted in the same way as the default messages\n* Assemblies are now signed\n\n0.3 - Jan 21 2009\n* Added ShouldNotHaveValidationErrorFor extension method for testing\n* Can now validate specified properties in addition to all properties (eg validator.Validate(person, x => x.Surname, x => x.Forename)\n* New validators (RegularExpressionValidator and EmailValidator) contributed by Liam McLennan\n* German localisation of validation messages contributed by Philipp Sumi\n* Additional overload to 'Must' that takes a Func<T, TProperty, bool>\n\n0.2 - Dec 29 2008\n* Added Silverlight compatibility\n* Moved support for the CommonServiceLocator into a separate assembly (FluentValidation.CommonServiceLocator.dll)\n* Adding additional interfaces for some of the validators (ILengthValidator, INotNullValidator)\n* AbstractValidator now implements IEnumerable<IRuleBuilder<T>>\n* Added ShouldHaveValidationError extension method for testing validators\n\n0.1 - Nov 1 2008\n* First public preview\n"
        },
        {
          "name": "FluentValidation.sln",
          "type": "blob",
          "size": 3.1123046875,
          "content": "ï»¿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.27130.2036\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{3906F280-A567-4AD7-A0EF-7253E95E7852}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\t.editorconfig = .editorconfig\r\n\t\tChangelog.txt = Changelog.txt\r\n\t\tglobal.json = global.json\r\n\t\tsrc\\Directory.Build.props = src\\Directory.Build.props\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"FluentValidation.Tests\", \"src\\FluentValidation.Tests\\FluentValidation.Tests.csproj\", \"{E353A6E3-5404-4E1E-B33D-4C7BAE646752}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"FluentValidation\", \"src\\FluentValidation\\FluentValidation.csproj\", \"{9DB6A8B4-5C9A-4CA1-96A5-4E1E4C3A9A44}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"FluentValidation.DependencyInjectionExtensions\", \"src\\FluentValidation.DependencyInjectionExtensions\\FluentValidation.DependencyInjectionExtensions.csproj\", \"{A6E791BA-E0AA-4852-95C3-255B3D62980F}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"FluentValidation.Tests.Benchmarks\", \"src\\FluentValidation.Tests.Benchmarks\\FluentValidation.Tests.Benchmarks.csproj\", \"{BC2CC9AB-C044-420C-9AD3-A4854F8338F0}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{E353A6E3-5404-4E1E-B33D-4C7BAE646752}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{E353A6E3-5404-4E1E-B33D-4C7BAE646752}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{E353A6E3-5404-4E1E-B33D-4C7BAE646752}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{E353A6E3-5404-4E1E-B33D-4C7BAE646752}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{9DB6A8B4-5C9A-4CA1-96A5-4E1E4C3A9A44}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{9DB6A8B4-5C9A-4CA1-96A5-4E1E4C3A9A44}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{9DB6A8B4-5C9A-4CA1-96A5-4E1E4C3A9A44}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{9DB6A8B4-5C9A-4CA1-96A5-4E1E4C3A9A44}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{A6E791BA-E0AA-4852-95C3-255B3D62980F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{A6E791BA-E0AA-4852-95C3-255B3D62980F}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{A6E791BA-E0AA-4852-95C3-255B3D62980F}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{A6E791BA-E0AA-4852-95C3-255B3D62980F}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{BC2CC9AB-C044-420C-9AD3-A4854F8338F0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{BC2CC9AB-C044-420C-9AD3-A4854F8338F0}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{BC2CC9AB-C044-420C-9AD3-A4854F8338F0}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{BC2CC9AB-C044-420C-9AD3-A4854F8338F0}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {33CD33AF-2F26-44A0-BA94-F9299272362B}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "FluentValidation.sln.DotSettings",
          "type": "blob",
          "size": 8.2958984375,
          "content": "ï»¿<wpf:ResourceDictionary xml:space=\"preserve\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:ss=\"urn:shemas-jetbrains-com:settings-storage-xaml\" xmlns:wpf=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">\n\t<s:String x:Key=\"/Default/CodeStyle/CodeCleanup/Profiles/=Main/@EntryIndexedValue\">&lt;?xml version=\"1.0\" encoding=\"utf-16\"?&gt;&lt;Profile name=\"Main\"&gt;&lt;CSUpdateFileHeader&gt;True&lt;/CSUpdateFileHeader&gt;&lt;CSOptimizeUsings&gt;&lt;OptimizeUsings&gt;True&lt;/OptimizeUsings&gt;&lt;EmbraceInRegion&gt;False&lt;/EmbraceInRegion&gt;&lt;RegionName&gt;&lt;/RegionName&gt;&lt;/CSOptimizeUsings&gt;&lt;CSReformatCode&gt;True&lt;/CSReformatCode&gt;&lt;CSUseVar&gt;&lt;BehavourStyle&gt;CAN_CHANGE_TO_IMPLICIT&lt;/BehavourStyle&gt;&lt;LocalVariableStyle&gt;ALWAYS_IMPLICIT&lt;/LocalVariableStyle&gt;&lt;ForeachVariableStyle&gt;ALWAYS_IMPLICIT&lt;/ForeachVariableStyle&gt;&lt;/CSUseVar&gt;&lt;/Profile&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeCleanup/SilentCleanupProfile/@EntryValue\">Main</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/ANONYMOUS_METHOD_DECLARATION_BRACES/@EntryValue\">END_OF_LINE</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/CASE_BLOCK_BRACES/@EntryValue\">END_OF_LINE</s:String>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/EXPLICIT_INTERNAL_MODIFIER/@EntryValue\">False</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/EXPLICIT_PRIVATE_MODIFIER/@EntryValue\">False</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/INDENT_STYLE/@EntryValue\">Tab</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/INITIALIZER_BRACES/@EntryValue\">END_OF_LINE</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/INVOCABLE_DECLARATION_BRACES/@EntryValue\">END_OF_LINE</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/OTHER_BRACES/@EntryValue\">END_OF_LINE</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_ACCESSORHOLDER_ATTRIBUTE_ON_SAME_LINE_EX/@EntryValue\">NEVER</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/TYPE_DECLARATION_BRACES/@EntryValue\">END_OF_LINE</s:String>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_LINES/@EntryValue\">False</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/IndentSubtags/@EntryValue\">RemoveIndent</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/IndentTagContent/@EntryValue\">RemoveIndent</s:String>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/WrapLongLines/@EntryValue\">False</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CodeFormatting/XmlDocFormatter/WRAP_LINES/@EntryValue\">False</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/CodeStyle/CSharpUsing/AddImportsToDeepestScope/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateConstants/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"_\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateInstanceFields/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"_\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticFields/@EntryIndexedValue\">&lt;Policy Inspect=\"True\" Prefix=\"_\" Suffix=\"\" Style=\"aaBb\" /&gt;</s:String>\n\t<s:String x:Key=\"/Default/Environment/Hierarchy/PsiConfigurationSettingsKey/CustomLocation/@EntryValue\">C:\\Users\\jerem\\AppData\\Local\\JetBrains\\Transient\\ReSharperPlatformVs15\\v11_280f5c05\\SolutionCaches</s:String>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpAttributeForSingleLineMethodUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpKeepExistingMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpPlaceEmbeddedOnSameLineMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpRenamePlacementToArrangementMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpUseContinuousIndentInsideBracesMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EAddAccessorOwnerDeclarationBracesMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002ECSharpPlaceAttributeOnSameLineMigration/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateBlankLinesAroundFieldToBlankLinesAroundProperty/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateThisQualifierSettings/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002EXml_002ECodeStyle_002EFormatSettingsUpgrade_002EXmlMoveToCommonFormatterSettingsUpgrade/@EntryIndexedValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=565D387F3A941B46B6503405D95D869D/@KeyIndexDefined\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=565D387F3A941B46B6503405D95D869D/Applicability/=Live/@EntryIndexedValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=565D387F3A941B46B6503405D95D869D/Description/@EntryValue\">FluentValidation file header</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=565D387F3A941B46B6503405D95D869D/Reformat/@EntryValue\">True</s:Boolean>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=565D387F3A941B46B6503405D95D869D/Scope/=C3001E7C0DA78E4487072B7E050D86C5/@KeyIndexDefined\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=565D387F3A941B46B6503405D95D869D/Scope/=C3001E7C0DA78E4487072B7E050D86C5/CustomProperties/=minimumLanguageVersion/@EntryIndexedValue\">2.0</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=565D387F3A941B46B6503405D95D869D/Scope/=C3001E7C0DA78E4487072B7E050D86C5/Type/@EntryValue\">InCSharpFile</s:String>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=565D387F3A941B46B6503405D95D869D/Shortcut/@EntryValue\">header</s:String>\n\t<s:Boolean x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=565D387F3A941B46B6503405D95D869D/ShortenQualifiedReferences/@EntryValue\">True</s:Boolean>\n\t<s:String x:Key=\"/Default/PatternsAndTemplates/LiveTemplates/Template/=565D387F3A941B46B6503405D95D869D/Text/@EntryValue\">#region License\n\n// Copyright (c) .NET Foundation and contributors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// The latest version of this file can be found at https://github.com/FluentValidation/FluentValidation\n\n#endregion\n</s:String></wpf:ResourceDictionary>"
        },
        {
          "name": "License.txt",
          "type": "blob",
          "size": 10.1064453125,
          "content": "                                 Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n"
        },
        {
          "name": "after.FluentValidation.sln.targets",
          "type": "blob",
          "size": 0.3408203125,
          "content": "<Project>\r\n  <PropertyGroup>\r\n    <!-- Default CLI builds to Release (IDEs don't make use of this file) -->\r\n    <Configuration>Release</Configuration>\r\n  </PropertyGroup>\r\n  <Target Name=\"AfterClean\" AfterTargets=\"Clean\">\r\n    <RemoveDir Directories=\".build/packages;.build/Release;.build/Debug\" ContinueOnError=\"True\" />\r\n  </Target>\r\n</Project>\r\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 1.359375,
          "content": "param(\r\n  [string]$configuration = 'Release',\r\n  [string]$path = $PSScriptRoot,\r\n  [string[]]$targets = 'default'\r\n)\r\n\r\n$ErrorActionPreference = \"Stop\"\r\n\r\n# Boostrap posh-build\r\n$build_dir = Join-Path $path \".build\"\r\nif (! (Test-Path (Join-Path $build_dir \"Posh-Build.ps1\"))) {\r\n  Write-Host \"Installing posh-build...\"; New-Item -Type Directory $build_dir -ErrorAction Ignore | Out-Null;\r\n  (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/jeremyskinner/posh-build/master/Posh-Build.ps1', \"$build_dir/Posh-Build.ps1\")\r\n}\r\n. (Join-Path $build_dir \"Posh-Build.ps1\")\r\n\r\n# Set these variables as desired\r\n$packages_dir = Join-Path $build_dir \"packages\"\r\n$output_dir = Join-Path $build_dir $configuration\r\n$solution_file = Join-Path $path \"FluentValidation.sln\"\r\n\r\ntarget default -depends compile, test, deploy\r\n\r\ntarget compile {\r\n  Invoke-Dotnet build $solution_file -c $configuration --no-incremental\r\n}\r\n\r\ntarget test {\r\n  Invoke-Dotnet test $solution_file -c $configuration --no-build --logger trx\r\n}\r\n\r\ntarget deploy {\r\n  Remove-Item $packages_dir -Force -Recurse -ErrorAction Ignore 2> $null\r\n  Remove-Item $output_dir -Force -Recurse -ErrorAction Ignore 2> $null\r\n\r\n  Invoke-Dotnet pack $solution_file -c $configuration\r\n}\r\n\r\ntarget publish {\r\n  $key = $Env:NUGET_API_KEY\r\n  Nuget-Push -directory $packages_dir -key $key -prompt $true\r\n}\r\n\r\nStart-Build $targets\r\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.0302734375,
          "content": "pwsh -noprofile ./build.ps1 $@\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fv-small.png",
          "type": "blob",
          "size": 10.732421875,
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.1142578125,
          "content": "{\n    \"sdk\": {\n      \"version\": \"9.0.0\",\n      \"rollForward\": \"latestFeature\",\n      \"allowPrerelease\": true\n    }\n}\n"
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.205078125,
          "content": "ï»¿<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\r\n  </packageSources>\r\n</configuration>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}