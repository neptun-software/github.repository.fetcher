{
  "metadata": {
    "timestamp": 1736711143955,
    "page": 7,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spectreconsole/spectre.console",
      "stars": 9681,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 7.8876953125,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = LF\nindent_style = space\nindent_size = 4\ninsert_final_newline = false\ntrim_trailing_whitespace = true\n\n[*.sln]\nindent_style = tab\n\n[*.{csproj,vbproj,vcxproj,vcxproj.filters}]\nindent_size = 2\n\n[*.{xml,config,props,targets,nuspec,ruleset}]\nindent_size = 2\n\n[*.{yml,yaml}]\nindent_size = 2\n\n[*.json]\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.cs]\n# Prefer file scoped namespace declarations\ncsharp_style_namespace_declarations = file_scoped:warning\n\n# Sort using and Import directives with System.* appearing first\ndotnet_sort_system_directives_first = true\ndotnet_separate_import_directive_groups = false\n\n# Avoid \"this.\" and \"Me.\" if not necessary\ndotnet_style_qualification_for_field = false:refactoring\ndotnet_style_qualification_for_property = false:refactoring\ndotnet_style_qualification_for_method = false:refactoring\ndotnet_style_qualification_for_event = false:refactoring\n\n# Use language keywords instead of framework type names for type references\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\n\n# Suggest more modern language features when available\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\n\n# Non-private static fields are PascalCase\ndotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields\ndotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style\ndotnet_naming_symbols.non_private_static_fields.applicable_kinds = field\ndotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected\ndotnet_naming_symbols.non_private_static_fields.required_modifiers = static\ndotnet_naming_style.non_private_static_field_style.capitalization = pascal_case\n\n# Non-private readonly fields are PascalCase\ndotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields\ndotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style\ndotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field\ndotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected\ndotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly\ndotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case\n\n# Constants are PascalCase\ndotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.constants_should_be_pascal_case.symbols = constants\ndotnet_naming_rule.constants_should_be_pascal_case.style = constant_style\ndotnet_naming_symbols.constants.applicable_kinds = field, local\ndotnet_naming_symbols.constants.required_modifiers = const\ndotnet_naming_style.constant_style.capitalization = pascal_case\n\n# Instance fields are camelCase and start with _\ndotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion\ndotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields\ndotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style\ndotnet_naming_symbols.instance_fields.applicable_kinds = field\ndotnet_naming_style.instance_field_style.capitalization = camel_case\ndotnet_naming_style.instance_field_style.required_prefix = _\n\n# Locals and parameters are camelCase\ndotnet_naming_rule.locals_should_be_camel_case.severity = suggestion\ndotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters\ndotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style\ndotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local\ndotnet_naming_style.camel_case_style.capitalization = camel_case\n\n# Local functions are PascalCase\ndotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions\ndotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style\ndotnet_naming_symbols.local_functions.applicable_kinds = local_function\ndotnet_naming_style.local_function_style.capitalization = pascal_case\n\n# By default, name items with PascalCase\ndotnet_naming_rule.members_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.members_should_be_pascal_case.symbols = all_members\ndotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style\ndotnet_naming_symbols.all_members.applicable_kinds = *\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\n\n# Newline settings\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_between_query_expression_clauses = true\n\n# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_case_contents_when_block = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = flush_left\n\n# Prefer \"var\" everywhere\ncsharp_style_var_for_built_in_types = true:suggestion\ncsharp_style_var_when_type_is_apparent = true:suggestion\ncsharp_style_var_elsewhere = true:suggestion\n\n# Prefer method-like constructs to have a block body\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_operators = false:none\n\n# Prefer property-like constructs to have an expression-body\ncsharp_style_expression_bodied_properties = true:none\ncsharp_style_expression_bodied_indexers = true:none\ncsharp_style_expression_bodied_accessors = true:none\n\n# Suggest more modern language features when available\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\n\n# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false\n\n# Blocks are allowed\ncsharp_prefer_braces = true:silent\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = true\n\n# warning RS0037: PublicAPI.txt is missing '#nullable enable'\ndotnet_diagnostic.RS0037.severity = none"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.1396484375,
          "content": "# Use file scoped namespace declarations\n7b2da0a4f63bf3ceab99d2c88535e74155f2b99c\n\n# fix line-endings\ne2ad4b1ea5555e701cda4fd400bb6592e318e1ff\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0634765625,
          "content": "* text=auto\n\n*.cs       text    eol=lf\n*.md       text    eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1181640625,
          "content": "# Misc folders\n[Bb]in/\n[Oo]bj/\n[Tt]emp/\n[Pp]ackages/\n/.artifacts/\n/[Tt]ools/\n.idea\n.DS_Store\n\n# Cakeup\ncakeup-x86_64-latest.exe\n\n# .NET Core CLI\n/.dotnet/\n/.packages/\ndotnet-install.sh*\n*.lock.json\n\n# Visual Studio\n.vs/\n.vscode/\nlaunchSettings.json\n*.sln.ide/\n\n# Rider\nsrc/.idea/**/workspace.xml\nsrc/.idea/**/tasks.xml\nsrc/.idea/dictionaries\nsrc/.idea/**/dataSources/\nsrc/.idea/**/dataSources.ids\nsrc/.idea/**/dataSources.xml\nsrc/.idea/**/dataSources.local.xml\nsrc/.idea/**/sqlDataSources.xml\nsrc/.idea/**/dynamic.xml\nsrc/.idea/**/uiDesigner.xml\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n*.userprefs\n*.GhostDoc.xml\n*StyleCop.Cache\n\n# Build results\n[Dd]ebug/\n[Rr]elease/\nx64/\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.log\n*.vspscc\n*.vssscc\n.builds\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# ReSharper is a .NET coding add-in\n_ReSharper*\n\n# NCrunch\n.*crunch*.local.xml\n_NCrunch_*\n\n# NuGet Packages Directory\npackages\n\n# Windows\nThumbs.db\n\n*.received.*\n\nnode_modules"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.36328125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nconduct@dotnetfoundation.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.4189453125,
          "content": "# Contribution Guidelines\n\n* [Prerequisites](#prerequisites)\n* [Definition of trivial contributions](#definition-of-trivial-contributions)\n* [Code](#code)\n  * [Code style](#code-style)\n  * [Dependencies](#dependencies)\n  * [Unit tests](#unit-tests)\n* [Contributing process](#contributing-process)\n  * [Get buyoff or find open community issues or features](#get-buyoff-or-find-open-community-issues-or-features)\n  * [Set up your environment](#Set-up-your-environment)\n  * [Prepare commits](#prepare-commits)\n  * [Submit pull request](#Submit-pull-request)\n  * [Respond to feedback on pull request](#respond-to-feedback-on-pull-request)\n* [Other general information](#other-general-information)\n* [Acknowledgement](#acknowledgement)\n\n## Prerequisites\n\nBy contributing to Spectre.Console, you assert that:\n\n* The contribution is your own original work.\n* You have the right to assign the copyright for the work (it is not owned by your employer, or\n  you have been given copyright assignment in writing).\n* You [license](https://github.com/spectreconsole/spectre.console/blob/main/LICENSE) the contribution under the terms applied to the rest of the Spectre.Console project.\n* You agree to follow the [code of conduct](https://github.com/spectreconsole/spectre.console/blob/main/CODE_OF_CONDUCT.md).\n\n## Definition of trivial contributions\nIt's hard to define what is a trivial contribution. Sometimes even a 1 character change can be considered significant.\nUnfortunately because it can be subjective, the decision on what is trivial comes from the maintainers of the project\nand not from folks contributing to the project.\n\nWhat is generally considered trivial:\n\n* Fixing a typo.\n* Documentation changes.\n\n## Code\n### Code style\n\nNormal .NET coding guidelines apply.\nSee the [Framework Design Guidelines](https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/) for more information.\n\n### Dependencies\n\nThe assembly `Spectre.Console` should have no dependencies except the .NET BCL library.\n\n### Unit tests\n\nMake sure to run all unit tests before creating a pull request.\nAny new code should also have reasonable unit test coverage.\n\n## Contributing process\n### Get buyoff or find open community issues or features\n\n * Through GitHub, or through the [GitHub discussions](https://github.com/spectreconsole/spectre.console/discussions) (preferred),\n   you talk about a feature you would like to see (or a bug), and why it should be in Spectre.Console.\n   * If approved through the GitHub discussions, ensure an accompanying GitHub issue is created with\n     information and a link back to the discussion.\n  * Once you get a nod from someone in the Spectre.Console Team, you can start on the feature.\n  * Alternatively, if a feature is on the issues list with the\n   [good first issue](https://github.com/spectreconsole/spectre.console/labels/good%20first%20issue) label,\n   it is open for a community member (contributor) to patch. You should comment that you are signing up for it on\n   the issue so someone else doesn't also sign up for the work.\n\n### Set up your environment\n\n * You create, or update, a fork of `spectreconsole/spectre.console` under your GitHub account.\n * From there you create a branch named specific to the feature.\n * In the branch you do work specific to the feature.\n * Please also observe the following:\n    * No reformatting\n    * No changing files that are not specific to the feature.\n    * More covered below in the **Prepare commits** section.\n * Test your changes and please help us out by updating and implementing some automated tests.\n   It is recommended that all contributors spend some time looking over the tests in the source code.\n   You can't go wrong emulating one of the existing tests and then changing it specific to the behavior you are testing.\n * Please do not update your branch from the main branch unless we ask you to. See the responding to feedback section below.\n\n### Prepare commits\nThis section serves to help you understand what makes a good commit.\n\nA commit should observe the following:\n\n * A commit is a small logical unit that represents a change.\n * Should include new or changed tests relevant to the changes you are making.\n * No unnecessary whitespace. Check for whitespace with `git diff --check` and `git diff --cached --check` before commit.\n * You can stage parts of a file for commit.\n\n### Submit pull request\nPrerequisites:\n\n * You are making commits in a feature branch.\n * All code should compile without errors or warnings.\n * All tests should be passing.\n\nSubmitting PR:\n\n * Once you feel it is ready, submit the pull request to the `spectreconsole/spectre.console` repository against the `main` branch\n   unless specifically requested to submit it against another branch.\n   * In the case of a larger change that is going to require more discussion,\n     please submit a PR sooner. Waiting until you are ready may mean more changes than you are\n     interested in if the changes are taking things in a direction the maintainers do not want to go.\n * In the pull request, outline what you did and point to specific conversations (as in URLs)\n   and issues that you are resolving. This is a tremendous help for us in evaluation and acceptance.\n * Once the pull request is in, please do not delete the branch or close the pull request\n   (unless something is wrong with it).\n * One of the Spectre.Console team members, or one of the maintainers, will evaluate it within a\n   reasonable time period (which is to say usually within 1-3 weeks). Some things get evaluated\n   faster or fast tracked. We are human and we have active lives outside of open source so don't\n   fret if you haven't seen any activity on your pull request within a month or two.\n   We don't have a Service Level Agreement (SLA) for pull requests.\n   Just know that we will evaluate your pull request.\n\n### Respond to feedback on pull request\n\nWe may have feedback for you to fix or change some things. We generally like to see that pushed against\nthe same topic branch (it will automatically update the Pull Request). You can also fix/squash/rebase\ncommits and push the same topic branch with `--force` (it's generally acceptable to do this on topic\nbranches not in the main repository, it is generally unacceptable and should be avoided at all costs\nagainst the main repository).\n\nIf we have comments or questions when we do evaluate it and receive no response, it will probably\nlessen the chance of getting accepted. Eventually, this means it will be closed if it is not accepted.\nPlease know this doesn't mean we don't value your contribution, just that things go stale. If in the\nfuture you want to pick it back up, feel free to address our concerns/questions/feedback and reopen\nthe issue/open a new PR (referencing old one).\n\nSometimes we may need you to rebase your commit against the latest code before we can review it further.\nIf this happens, you can do the following:\n\n * `git fetch upstream` (upstream remote would be `spectreconsole/spectre.console`)\n * `git checkout main`\n * `git rebase upstream/main`\n * `git checkout your-branch`\n * `git rebase main`\n * Fix any merge conflicts\n * `git push origin your-branch` (origin would be your GitHub repo or `your-github-username/spectre.console` in this case).\n   You may need to `git push origin your-branch --force` to get the commits pushed.\n   This is generally acceptable with topic branches not in the mainstream repository.\n\nThe only reasons a pull request should be closed and resubmitted are as follows:\n\n * When the pull request is targeting the wrong branch (this doesn't happen as often).\n * When there are updates made to the original by someone other than the original contributor.\n   Then the old branch is closed with a note on the newer branch this supersedes #github_number.\n\n## Other general information\nIf you reformat code or hit core functionality without an approval from a person on the Spectre.Console Team,\nit's likely that no matter how awesome it looks afterwards, it will probably not get accepted.\nReformatting code makes it harder for us to evaluate exactly what was changed.\n\nIf you do these things, it will be make evaluation and acceptance easy.\nNow if you stray outside of the guidelines we have above, it doesn't mean we are going to ignore\nyour pull request. It will just make things harder for us.\nHarder for us roughly translates to a longer SLA for your pull request.\n\n## Acknowledgement\n\nThis contribution guide was taken from the [Chocolatey project](https://chocolatey.org/)\nwith permission and was edited to follow Spectre.Console's conventions and processes.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0732421875,
          "content": "MIT License\n\nCopyright (c) 2020 Patrik Svensson, Phil Scott, Nils Andresen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NuGet.Config",
          "type": "blob",
          "size": 0.197265625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n  </packageSources>\n</configuration>"
        },
        {
          "name": "README.fa.md",
          "type": "blob",
          "size": 2.421875,
          "content": "# `Spectre.Console`\n\n_[![Spectre.Console NuGet Version](https://img.shields.io/nuget/v/spectre.console.svg?style=flat&label=NuGet%3A%20Spectre.Console)](https://www.nuget.org/packages/spectre.console)_\n\n<div dir=\"rtl\">\n\nیک کتابخانه .NET. که ایجاد Console Applicationهای زیبا و cross platform را آسان‌تر می‌کند.  \nاز کتابخانه عالی [Rich](https://github.com/willmcgugan/rich)  برای پایتون، بسیار الهام گرفته شده است.\n\n## فهرست\n\n1. [امکانات](#features)\n2. [نصب](#installing)\n3. [مستندات](#documentation)\n4. [مثال‌ها](#examples)\n5. [مجوز](#license)\n\n<h2 id=\"features\">امکانات</h2>\n\n* با در نظر گرفتن تست واحد نوشته شده است.\n* جداول، چارچوب‌ها، پنل‌ها و یک زبان نشانه گذاری که از [rich](https://github.com/willmcgugan/rich) الهام گرفته شده است را پشتیبانی می‌کند.\n* از رایج ترین پارامترهای SRG در هنگام فرم دهی متن مانند پررنگ، کم نور، اریب، زیرخط، خط زدن و چشمک زدن پشتیبانی می‌کند.\n* پشتیبانی از رنگ‌های 28/8/4/3-بیت در ترمینال.  \n  این کتابخانه توانایی ترمینال فعلی را تشخیص داده و در صورت لزوم رنگ‌ها را کاهش می‌دهد.\n\n\n![Example](docs/input/assets/images/example.png)\n\n<h2 id=\"installing\">نصب</h2>\n\nسریع ترین راه برای شروع `Spectre.Console` نصب از طریق NuGet Package می‌باشد.\n\n<pre dir=\"ltr\">\ndotnet add package Spectre.Console\n</pre>\n\n<h2 id=\"documentation\">مستندات</h2>\n\nمستندات `Spectre.Console` را در اینجا می‌توایند پیدا کنید:\n\n<div dir=\"ltr\">\nhttps://spectreconsole.net/\n</div>\n\n<h2 id=\"examples\">مثال‌ها</h2>\n\nTo see `Spectre.Console` in action, please see the \n[examples repository](https://github.com/spectreconsole/examples).\n\n<h2 id=\"license\">مجوز</h2>\n\n<div dir=\"ltr\">\nCopyright © Patrik Svensson, Phil Scott, Nils Andresen, Cédric Luthi, Frank Ray\n</div>\n\nهمانطور که Spectre.Console تحت مجوز MIT ارائه شده است؛ برای کسب اطلاعات بیشتر به مجوز مراجعه کنید.\n\n* برای SixLabors.ImageSharp، مشاهده کنید: https://github.com/SixLabors/ImageSharp/blob/master/LICENSE\n\n</div>\n"
        },
        {
          "name": "README.jp.md",
          "type": "blob",
          "size": 15.3125,
          "content": "# `Spectre.Console`\n\n_[![Spectre.Console NuGet Version](https://img.shields.io/nuget/v/spectre.console.svg?style=flat&label=NuGet%3A%20Spectre.Console)](https://www.nuget.org/packages/spectre.console)_\n\n綺麗なコンソールアプリケーションを簡単に作成するための.NETライブラリです。\nPython用の素晴らしい[Rich ライブラリ](https://github.com/willmcgugan/rich)に強く影響を受けています。\n\n## 目次\n\n1. [特徴](#特徴)\n2. [例](#例)\n3. [使用方法](#使用方法)  \n   3.1. [Static APIの利用](#static-apiの利用)  \n   3.2. [コンソールの作成](#コンソールの作成)\n4. [例の実行](#例の実行)\n5. [クイックスタート](#クイックスタート)\n6. [マークアップ](#マークアップ)\n7. [絵文字](#絵文字)\n8. [テーブル](#テーブル)\n9. [例外](#例外)\n\n## 特徴\n\n* ユニットテストを意識して書いています。\n* table、grid、panel、マークアップ言語に影響を受けた [rich](https://github.com/willmcgugan/rich) に対応しています。\n* 太字、薄字、斜字、下線、斜線、点滅などの一般的なSGR parameters に対応しています。\n* ターミナルで 3/4/8/24ビットカラーに対応しています。\n  ライブラリは現在のターミナルの性能を検知し、必要なカラーにダウングレードします\n\n## 例\n\n![Example](docs/input/assets/images/example.png)\n\n## 使用方法\n\n`Spectre.Console` APIはステートフルで、スレッドセーフではありません。\n異なるスレッドからコンソールに書く必要がある場合、通常の`System.Console` APIを使用するときと同様、適切な注意を払ってください。\n\n現在の端末がANSIエスケープシーケンスに対応していない場合、\n`Spectre.Console`は、`System.Console` APIの利用に切り替わります。\n\n_メモ: このライブラリは現在開発中で、APIは1.0のリリースまでの間に変更されたり、\n削除されたりする可能性があります。_\n\n### Static APIの利用\n\n\n`System.Console` APIでするように、テキストを出力したいだけの時にはstatic APIが最適ですが、綺麗です。\n\n```csharp\nAnsiConsole.Foreground = Color.CornflowerBlue;\nAnsiConsole.Decoration = Decoration.Underline | Decoration.Bold;\nAnsiConsole.WriteLine(\"Hello World!\");\n\nAnsiConsole.Reset();\nAnsiConsole.MarkupLine(\"[bold yellow on red]{0}[/] [underline]world[/]!\", \"Goodbye\");\n```\n\nもし、デフォルトの`IAnsiConsole`への参照を取得したい場合、\n`AnsiConsole.Console`経由でアクセスできます。\n\n### コンソールの作成\n\n単体テスト中にコードの実行環境を制御したい場合など、\n特定の機能をもつコンソールを明示的に作成すると便利なことがあります。\n\n単体テストの一部としてコードで `AnsiConsole`を使わないことを推奨します。\n\n```csharp\nIAnsiConsole console = AnsiConsole.Create(\n    new AnsiConsoleSettings()\n    {\n        Ansi = AnsiSupport.Yes,\n        ColorSystem = ColorSystemSupport.TrueColor,\n        Out = new StringWriter(),\n    });\n```\n\n_メモ: 主導でコンソールを作成しているときに特定のカラーシステムを指定できたとしても、\nユーザーのターミナルでは使えないかもしれないことを覚えておいてください。\nテスト用にIAnsiConsoleを作成していない限り、\n常に`ColorSystemSupport.Detect` と `AnsiSupport.Detect`を使用してください。_\n\n## 例の実行\n\nSpectre.Consoleでできることを見るために、 \n[dotnet-example](https://github.com/patriksvensson/dotnet-example)グローバルツールをインストールします。\n\n\n```\n> dotnet tool restore\n```\n\nこのリポジトリで提供している例が一覧表示されます\n\n```\n> dotnet example\n\n╭────────────┬───────────────────────────────────────┬──────────────────────────────────────────────────────╮\n│ Name       │ Path                                  │ Description                                          │\n├────────────┼───────────────────────────────────────┼──────────────────────────────────────────────────────┤\n│ Borders    │ examples/Borders/Borders.csproj       │ Demonstrates the different kind of borders.          │\n│ Calendars  │ examples/Calendars/Calendars.csproj   │ Demonstrates how to render calendars.                │\n│ Colors     │ examples/Colors/Colors.csproj         │ Demonstrates how to use colors in the console.       │\n│ Columns    │ examples/Columns/Columns.csproj       │ Demonstrates how to render data into columns.        │\n│ Emojis     │ examples/Emojis/Emojis.csproj         │ Demonstrates how to render emojis.                   │\n│ Exceptions │ examples/Exceptions/Exceptions.csproj │ Demonstrates how to render formatted exceptions.     │\n│ Grids      │ examples/Grids/Grids.csproj           │ Demonstrates how to render grids in a console.       │\n│ Info       │ examples/Info/Info.csproj             │ Displays the capabilities of the current console.    │\n│ Links      │ examples/Links/Links.csproj           │ Demonstrates how to render links in a console.       │\n│ Panels     │ examples/Panels/Panels.csproj         │ Demonstrates how to render items in panels.          │\n│ Rules      │ examples/Rules/Rules.csproj           │ Demonstrates how to render horizontal rules (lines). │\n│ Tables     │ examples/Tables/Tables.csproj         │ Demonstrates how to render tables in a console.      │\n│ Trees      │ examples/Trees/Trees.csproj           │ Demonstrates how to render trees in a console.       │\n╰────────────┴───────────────────────────────────────┴──────────────────────────────────────────────────────╯\n```\n\nそして、例を実行します\n\n```\n> dotnet example tables\n┌──────────┬──────────┬────────┐\n│ Foo      │ Bar      │ Baz    │\n├──────────┼──────────┼────────┤\n│ Hello    │ World!   │        │\n│ Bonjour  │ le       │ monde! │\n│ Hej      │ Världen! │        │\n└──────────┴──────────┴────────┘\n```\n\n## クイックスタート\npectre.Consoleの利用を開始する最初の方法は、Nugetパッケージをインストールすることです。\n\n```shell\n> dotnet add package Spectre.Console\n```\n\nその後、`Spectre.Console`名前空間を参照する必要があります。一度参照したら、提供されている全ての機能を使用できます。\n\n```csharp\nusing Spectre.Console\n\npublic static class Program\n{\n    public static void Main(string[] args)\n    {\n        AnsiConsole.Markup(\"[underline red]Hello[/] World!\");\n    }\n}\n```\n\n## マークアップ\n`Markup`クラスは、コンソールにリッチなテキストを出力することができます。\n\n### 文法\n\nコンソールマークアップはbbcodeに影響を受けた文法を利用します。角括弧でスタイルを書いたら（スタイルを参照）、例えば、`[bold red]`\nは、`[/]`で閉じるまでスタイルが適用されます。\n\n```csharp\nAnsiConsole.Render(new Markup(\"[bold yellow]Hello[/] [red]World![/]\"));\n```\n\n`Markup` クラスは`IRenderable`を実装しており、table、grid、Panelを使用できることを意味します。\n`IRenderable`のレンダリングに対応している多くのクラスは、リッチテキストの描画を上書きます。\n\n```csharp\nvar table = new Table();\ntable.AddColumn(new TableColumn(new Markup(\"[yellow]Foo[/]\")));\ntable.AddColumn(new TableColumn(\"[blue]Bar[/]\"));\n```\n\n### 便利なメソッド\n\n`AnsiConsole`には、新しい`Markup`インスタンスをインスタンス化することなく、コンソールにマークアップテキストを書き込める便利なメソッドがあります。\n\n```csharp\nAnsiConsole.Markup(\"[underline green]Hello[/] \");\nAnsiConsole.MarkupLine(\"[bold]World[/]\");\n```\n\n### エスケープ文字列\n\n`[`を出力するために、 `[[`を利用し、`]`を出力するために`]]`を利用します。\n\n```csharp\nAnsiConsole.Markup(\"[[Hello]] \"); // [Hello]\nAnsiConsole.Markup(\"[red][[World]][/]\"); // [World]\n```\n\n`SafeMarkup`拡張メソッドを使用することもできます。\n\n```csharp\nAnsiConsole.Markup(\"[red]{0}[/]\", \"Hello [World]\".SafeMarkup());\n```\n\n### カラー\n\n`new Style(foreground: Color.Maroon)`のようなコード、または、`AnsiConsole.Markup(\"[maroon on blue]Hello[/]\")`のようなマークアップテキストで色を使用できます。\n\n### 背景色の設定\n\nカラー指定の際に、`on`を付けることで、マークアップで背景色を設定できます。\n\n```\n[bold yellow on blue]Hello[/]\n[default on blue]World[/]\n```\n\n### 絵文字の描画\n\nマークアップの一部として絵文字を出力するために、emojiショートコードが使用できます。\n\n```csharp\nAnsiConsole.MarkupLine(\"Hello :globe_showing_europe_africa:!\");\n```\n\nemojiのスタイルについては、付録の[Emoji](./appendix/emojis) を参照してください。\n\n### カラー\n\n上の例では、全ての色は名前で参照されています。\nしかし、16進数やRGB表現をマークダウンで色指定に使用できます。\n\n```csharp\nAnsiConsole.Markup(\"[red]Foo[/] \");\nAnsiConsole.Markup(\"[#ff0000]Bar[/] \");\nAnsiConsole.Markup(\"[rgb(255,0,0)]Baz[/] \");\n```\n\n## 絵文字\n\nどのような絵文字が使用できるかは、使用しているOSやターミナルに依存し、どのように表示されるかは保証されません。絵文字の幅計算は正確ではないため、表、パネル、グリッドで使用する場合は表示がずれるかもしれません。\n\n完全な互換性を確保するために、Unicode 13.0 より以前の`Emoji_Presentation`カテゴリにあるものだけを使用することを検討してください。\n公式の絵文字一覧\nhttps://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-data.txt\n\n\n```csharp\n// Markup\nAnsiConsole.MarkupLine(\"Hello :globe_showing_europe_africa:!\");\n\n// Constant\nvar hello = \"Hello \" + Emoji.Known.GlobeShowingEuropeAfrica;\n```\n\nテキスト内の絵文字を置き換えることができます。\n\n```csharp\nvar phrase = \"Mmmm :birthday_cake:\";\nvar rendered\n```\n\n既存の絵文字を別のものにしたり、完全に新しい物を追加したいことがあります。このために、`Emoji.Remap`メソッドを使用できます。\nこの方法は、マークアップ文字と`Emoji.Replace`の両方で動作します。\n\n```csharp\n// Remap the emoji\nEmoji.Remap(\"globe_showing_europe_africa\", \"😄\");\n\n// Render markup\nAnsiConsole.MarkupLine(\"Hello :globe_showing_europe_africa:!\");\n\n// Replace emojis in string\nvar phrase = \"Hello :globe_showing_europe_africa:!\";\nvar rendered = Emoji.Replace(phrase);\n```\n\n## テーブル\n\nテーブルはターミナルで表データを表示するのに完璧な方法です。\n`Spectre.Console` は、テーブルの描画にとても優れていて、全てのカラムは中に合わせて調整してくれます。\n`IRenderable`を実装しているものは、列ヘッダやセル、別のテーブルとして使用できます。\n\n### 使い方\n\nテーブルを描画するために、`Table`インスタンスを作成し、必要な数の列を追加し、行を追加します。\nテーブルをコンソールの`Render`メソッドに渡して終わりです。\n\n```csharp\n// テーブルの作成\nvar table = new Table();\n\n// 列の追加\ntable.AddColumn(\"Foo\");\ntable.AddColumn(new TableColumn(\"Bar\").Centered());\n\n// 行の追加\ntable.AddRow(\"Baz\", \"[green]Qux[/]\");\ntable.AddRow(new Markup(\"[blue]Corgi[/]\"), new Panel(\"Waldo\"));\n\n// コンソールにテーブルの描画\nAnsiConsole.Render(table);\n```\n\nこれは次のように出力を描画します。\n\n![Table](docs/input/assets/images/table.png)\n\n### 罫線\n\n\n```csharp\n// 罫線を設定します\ntable.SetBorder(Border.None);\ntable.SetBorder(Border.Ascii);\ntable.SetBorder(Border.Square);\ntable.SetBorder(Border.Rounded);\n```\n\n### 拡大 / 縮小\n\n```csharp\n// テーブル幅を最大に設定します\ntable.Expand();\n\n// テーブル幅を最小に設定します\ntable.Collapse();\n```\n\n### ヘッダーを隠す\n\n```csharp\n// 全ての列のヘッダーを隠します\ntable.HideHeaders();\n```\n\n### テーブル幅の設定\n\n```csharp\n// テーブル幅50セルに設定します\ntable.SetWidth(50);\n```\n\n### 整列（アライメント）\n\n```csharp\n// 整列を明示的に設定する\ncolumn.SetAlignment(Justify.Right);\n```\n\n### パディング\n\n```csharp\n// 左と右のパディングを設定する\ncolumn.SetPadding(left: 3, right: 5);\n\n// 個別にパディングを設定する\ncolumn.PadLeft(3);\ncolumn.PadRight(5);\n```\n\n### 列改行の無効化\n\n```csharp\n// 列改行の無効化\ncolumn.NoWrap();\n```\n\n### 列幅の設定\n\n```csharp\n// 列幅の設定(これはまだ柔軟な拡張メソッドがありません)\ncolumn.Width = 15;\n```\n\n## 例外\n例外はターミナルで見たときに読みやすいとは限りません。\n`WriteException`メソッドを使用することで、例外をもう少し読みやすくすることができます。\n\n```csharp\nAnsiConsole.WriteException(ex);\n```\n\n![exception](docs/input/assets/images/exception.png)\n### 例外の省略表示\n\n例外の特定部分を短くして、さらに読みやすくしたり、パスをクリック可能なハイパーリンクにすることもできます。\nハイパーリンクがクリックできるかはターミナル次第です。\n\n\n```csharp\nAnsiConsole.WriteException(ex, \n    ExceptionFormats.ShortenPaths | ExceptionFormats.ShortenTypes |\n    ExceptionFormats.ShortenMethods | ExceptionFormats.ShowLinks);\n```\n\n![exception](docs/input/assets/images/compact_exception.png)\n\n### 例外出力のカスタマイズ\n\n例外の特定部分を短縮するだけでなく、デフォルトのスタイルを上書きすることもできます。\n\n```csharp\nAnsiConsole.WriteException(ex, new ExceptionSettings\n{\n    Format = ExceptionFormats.ShortenEverything | ExceptionFormats.ShowLinks,\n    Style = new ExceptionStyle\n    {\n        Exception = Style.WithForeground(Color.Grey),\n        Message = Style.WithForeground(Color.White),\n        NonEmphasized = Style.WithForeground(Color.Cornsilk1),\n        Parenthesis = Style.WithForeground(Color.Cornsilk1),\n        Method = Style.WithForeground(Color.Red),\n        ParameterName = Style.WithForeground(Color.Cornsilk1),\n        ParameterType = Style.WithForeground(Color.Red),\n        Path = Style.WithForeground(Color.Red),\n        LineNumber = Style.WithForeground(Color.Cornsilk1),\n    }\n});\n```\n\n![exception](docs/input/assets/images/custom_exception.png)"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7939453125,
          "content": "# `Spectre.Console`\n\n_[![Spectre.Console NuGet Version](https://img.shields.io/nuget/v/spectre.console.svg?style=flat&label=NuGet%3A%20Spectre.Console)](https://www.nuget.org/packages/spectre.console)_ _[![Spectre.Console CLI NuGet Version](https://img.shields.io/nuget/v/spectre.console.cli.svg?style=flat&label=NuGet%3A%20Spectre.Console.Cli)](https://www.nuget.org/packages/spectre.console.cli)_ [![Netlify Status](https://api.netlify.com/api/v1/badges/1eaf215a-eb9c-45e4-8c64-c90b62963149/deploy-status)](https://app.netlify.com/sites/spectreconsole/deploys)\n\nA .NET library that makes it easier to create beautiful, cross platform, console applications.  \nIt is heavily inspired by the excellent Python library, [Rich](https://github.com/willmcgugan/rich). Detailed instructions for using `Spectre.Console` are located on the project website, https://spectreconsole.net\n\n## Table of Contents\n\n1. [Features](#features)\n1. [Installing](#installing)\n1. [Documentation](#documentation)\n1. [Examples](#examples)\n1. [Sponsors](#sponsors)\n1. [Code of Conduct](#code-of-conduct)\n1. [.NET Foundation](#net-foundation)\n1. [License](#license)\n\n## Features\n\n* Supports tables, grids, panels, and a [Rich](https://github.com/willmcgugan/rich) inspired markup language.\n* Supports the most common SRG parameters when it comes to text \n  styling such as bold, dim, italic, underline, strikethrough, \n  and blinking text.\n* Supports 3/4/8/24-bit colors in the terminal.  \n  The library will detect the capabilities of the current terminal \n  and downgrade colors as needed.\n* Written with unit testing in mind.\n\n![Example](docs/input/assets/images/example.png)\n\n## Important Notices\n\n> [!IMPORTANT]\\\n> We use the [Top Issues Dashboard](https://github.com/spectreconsole/spectre.console/issues/1517) for tracking community demand. Please upvote :+1: the issues and pull requests you are interested in.\n\n## Installing\n\nThe fastest way of getting started using `Spectre.Console` is to install the NuGet package.\n\n```csharp\ndotnet add package Spectre.Console\n```\n\n## Documentation\n\nThe documentation for `Spectre.Console` can be found at\nhttps://spectreconsole.net\n\n## Examples\n\nTo see `Spectre.Console` in action, please see the \n[examples repository](https://github.com/spectreconsole/examples).\n\n## Sponsors\n\nThe following people are [sponsoring](https://github.com/sponsors/patriksvensson)\n`Spectre.Console` to show their support and to ensure the longevity of the project.\n\n* [Rodney Littles II](https://github.com/RLittlesII)\n* [Martin Björkström](https://github.com/bjorkstromm)\n* [Dave Glick](https://github.com/daveaglick)\n* [Kim Gunnarsson](https://github.com/kimgunnarsson)\n* [Andrew McClenaghan](https://github.com/andymac4182)\n* [C. Augusto Proiete](https://github.com/augustoproiete)\n* [Viktor Elofsson](https://github.com/vktr)\n* [Steven Knox](https://github.com/stevenknox)\n* [David Pendray](https://github.com/dpen2000)\n* [Elmah.io](https://github.com/elmahio)\n* [Tom Kerkhove](https://github.com/tomkerkhove)\n\nWe really appreciate it.  \n**Thank you very much!**\n\n## Code of Conduct\n\nThis project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community.\nFor more information see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n\n## .NET Foundation\n\nThis project is supported by the [.NET Foundation](https://dotnetfoundation.org).\n\n## License\n\nCopyright © Patrik Svensson, Phil Scott, Nils Andresen, Cédric Luthi, Frank Ray\n\n`Spectre.Console` is provided as-is under the MIT license. For more information see LICENSE.\n\n* SixLabors.ImageSharp, a library which `Spectre.Console` relies upon, is licensed under Apache 2.0 when distributed as part of `Spectre.Console`. The Six Labors Split License covers all other usage, see: https://github.com/SixLabors/ImageSharp/blob/master/LICENSE \n"
        },
        {
          "name": "README.pt-BR.md",
          "type": "blob",
          "size": 2.5986328125,
          "content": "# `Spectre.Console`\n\n_[![Spectre.Console NuGet Versão](https://img.shields.io/nuget/v/spectre.console.svg?style=flat&label=NuGet%3A%20Spectre.Console)](https://www.nuget.org/packages/spectre.console)_\n\nUma biblioteca .NET que torna mais fácil criar aplicativos de console bonitos e multiplataforma. \nÉ fortemente inspirada na excelente [biblioteca Rich](https://github.com/willmcgugan/rich) \npara Python.\n\n## Índice de Conteúdo\n\n1. [Funcionalidades](#funcionalidades)\n2. [Instalação](#instalação)\n3. [Documentação](#documentação)\n4. [Exemplos](#exemplos)\n5. [Patrocinadores](#patrocinadores)\n5. [Licença](#licença)\n\n## Funcionalidades\n\n* Desenvolvida com testes unitários em mente.\n* Suporta tabelas, grades, painéis, e uma linguagem de marcação inspirada em [rich](https://github.com/willmcgugan/rich).\n* Suporta os parâmetros SRG mais comuns quando se trata de estilo de texto, \n  como negrito, esmaecido, itálico, sublinhado, tachado \n  e texto piscando.\n* Suporta cores de 3/4/8/24 bits no terminal.\n  A biblioteca detectará os recursos do terminal atual \n  e reduz as cores conforme necessário.\n\n![Exemplo](docs/input/assets/images/example.png)\n\n## Instalação\n\nA maneira mais rápida de começar a usar o `Spectre.Console` é instalar o pacote NuGet.\n\n```csharp\ndotnet add package Spectre.Console\n```\n\n## Documentação\n\nA documentação do `Spectre.Console` pode ser encontrada em \nhttps://spectreconsole.net/\n\n## Exemplos\n\nTo see `Spectre.Console` in action, please see the \n[examples repository](https://github.com/spectreconsole/examples).\n\n## Patrocinadores\n\nAs seguintes pessoas estão [patrocinando](https://github.com/sponsors/patriksvensson)\no Spectre.Console para mostrar o seu apoio e garantir a longevidade do projeto.\n\n* [Rodney Littles II](https://github.com/RLittlesII)\n* [Martin Björkström](https://github.com/bjorkstromm)\n* [Dave Glick](https://github.com/daveaglick)\n* [Kim Gunanrsson](https://github.com/kimgunnarsson)\n* [Andrew McClenaghan](https://github.com/andymac4182)\n* [C. Augusto Proiete](https://github.com/augustoproiete)\n* [Viktor Elofsson](https://github.com/vktr)\n* [Steven Knox](https://github.com/stevenknox)\n* [David Pendray](https://github.com/dpen2000)\n* [Elmah.io](https://github.com/elmahio)\n\nEu estou muito agradecido. \n**Muito obrigado!**\n\n## Licença\n\nCopyright © Patrik Svensson, Phil Scott, Nils Andresen, Cédric Luthi, Frank Ray\n\nSpectre.Console é fornecido no estado em que se encontra sob a licença do MIT. Para obter mais informações, consulte o arquivo [LICENSE](LICENSE.md).\n\n* Para SixLabors.ImageSharp, consulte https://github.com/SixLabors/ImageSharp/blob/master/LICENSE"
        },
        {
          "name": "README.zh.md",
          "type": "blob",
          "size": 2.2734375,
          "content": "# `Spectre.Console`\n\n_[![Spectre.Console NuGet Version](https://img.shields.io/nuget/v/spectre.console.svg?style=flat&label=NuGet%3A%20Spectre.Console)](https://www.nuget.org/packages/spectre.console)_\n\n`Spectre.Console`是一个 .NET 的库，可以更轻松地创建美观的跨平台控制台应用程序。\n\n深受 [Rich](https://github.com/willmcgugan/rich) 这个Python优秀库的启发。\n\n## 目录\n\n1. [功能](#功能)\n2. [安装](#安装)\n3. [文档](#文档)\n4. [例子](#例子)\n5. [Sponsors](#Sponsors)\n6. [开源许可](#开源许可)\n\n## 功能\n\n* 编写时考虑到了单元测试。\n* 支持 tables、grid、panel 和 [rich](https://github.com/willmcgugan/rich) 所支持的标记语言。\n* 支持大部分的 SRG 参数，包括粗体、暗淡字、斜体、下划线、删除线和闪烁文本。\n* 支持终端显示 3/4/8/24 位色。自动检测终端类型，自适应颜色范围。\n\n![例子](docs/input/assets/images/example.png)\n\n## 安装\n\n最快的安装方式，就是用NuGet包管理直接安装`Spectre.Console`。\n\n```csharp\ndotnet add package Spectre.Console\n```\n\n## 文档\n\n`Spectre.Console`的文档可以在这里查看\nhttps://spectreconsole.net/\n\n## 例子\n\nTo see `Spectre.Console` in action, please see the \n[examples repository](https://github.com/spectreconsole/examples).\n\n## Sponsors\n\n下面这些用户正在[sponsor](https://github.com/sponsors/patriksvensson)上支持着Spectre.Console，确保这个项目的持续维护。\n\n* [Rodney Littles II](https://github.com/RLittlesII)\n* [Martin Björkström](https://github.com/bjorkstromm)\n* [Dave Glick](https://github.com/daveaglick)\n* [Kim Gunanrsson](https://github.com/kimgunnarsson)\n* [Andrew McClenaghan](https://github.com/andymac4182)\n* [C. Augusto Proiete](https://github.com/augustoproiete)\n* [Viktor Elofsson](https://github.com/vktr)\n* [Steven Knox](https://github.com/stevenknox)\n* [David Pendray](https://github.com/dpen2000)\n* [Elmah.io](https://github.com/elmahio)\n\n我对此表示十分感激 \n**非常感谢各位！**\n\n## 开源许可\n\n版权所有 © Patrik Svensson, Phil Scott, Nils Andresen, Cédric Luthi, Frank Ray\n\nSpectre.Console 基于 MIT 协议提供。查看 LICENSE 文件了解更多信息。\n\n* SixLabors.ImageSharp 的协议请查看 https://github.com/SixLabors/ImageSharp/blob/master/LICENSE\n"
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 3.1845703125,
          "content": "var target = Argument(\"target\", \"Default\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\n////////////////////////////////////////////////////////////////\n// Tasks\n\nTask(\"Clean\")\n    .Does(context =>\n{\n    context.CleanDirectory(\"./.artifacts\");\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Clean\")\n    .Does(context => \n{\n    Information(\"Compiling generator...\");\n    DotNetBuild(\"./resources/scripts/Generator/Generator.sln\", new DotNetBuildSettings {\n        Configuration = configuration,\n        Verbosity = DotNetVerbosity.Minimal,\n        NoLogo = true,\n        NoIncremental = context.HasArgument(\"rebuild\"),\n        MSBuildSettings = new DotNetMSBuildSettings()\n            .TreatAllWarningsAs(MSBuildTreatAllWarningsAs.Error)\n    });\n\n    Information(\"\\nCompiling Spectre.Console...\");\n    DotNetBuild(\"./src/Spectre.Console.sln\", new DotNetBuildSettings {\n        Configuration = configuration,\n        Verbosity = DotNetVerbosity.Minimal,\n        NoLogo = true,\n        NoIncremental = context.HasArgument(\"rebuild\"),\n        MSBuildSettings = new DotNetMSBuildSettings()\n            .TreatAllWarningsAs(MSBuildTreatAllWarningsAs.Error)\n    });\n});\n\nTask(\"Test\")\n    .IsDependentOn(\"Build\")\n    .Does(context => \n{\n    DotNetTest(\"./src/Tests/Spectre.Console.Tests/Spectre.Console.Tests.csproj\", new DotNetTestSettings {\n        Configuration = configuration,\n        Verbosity = DotNetVerbosity.Minimal,\n        NoLogo = true,\n        NoRestore = true,\n        NoBuild = true,\n    });\n\n    DotNetTest(\"./src/Tests/Spectre.Console.Cli.Tests/Spectre.Console.Cli.Tests.csproj\", new DotNetTestSettings {\n        Configuration = configuration,\n        Verbosity = DotNetVerbosity.Minimal,\n        NoLogo = true,\n        NoRestore = true,\n        NoBuild = true,\n    });\n});\n\nTask(\"Package\")\n    .IsDependentOn(\"Test\")\n    .Does(context => \n{\n    context.DotNetPack($\"./src/Spectre.Console.sln\", new DotNetPackSettings {\n        Configuration = configuration,\n        Verbosity = DotNetVerbosity.Minimal,\n        NoLogo = true,\n        NoRestore = true,\n        NoBuild = true,\n        OutputDirectory = \"./.artifacts\",\n        MSBuildSettings = new DotNetMSBuildSettings()\n            .TreatAllWarningsAs(MSBuildTreatAllWarningsAs.Error)\n    });\n});\n\nTask(\"Publish-NuGet\")\n    .WithCriteria(ctx => BuildSystem.IsRunningOnGitHubActions, \"Not running on GitHub Actions\")\n    .IsDependentOn(\"Package\")\n    .Does(context => \n{\n    var apiKey = Argument<string>(\"nuget-key\", null);\n    if(string.IsNullOrWhiteSpace(apiKey)) {\n        throw new CakeException(\"No NuGet API key was provided.\");\n    }\n\n    // Publish to GitHub Packages\n    foreach(var file in context.GetFiles(\"./.artifacts/*.nupkg\")) \n    {\n        context.Information(\"Publishing {0}...\", file.GetFilename().FullPath);\n        DotNetNuGetPush(file.FullPath, new DotNetNuGetPushSettings\n        {\n            Source = \"https://api.nuget.org/v3/index.json\",\n            ApiKey = apiKey,\n        });\n    }\n});\n\n////////////////////////////////////////////////////////////////\n// Targets\n\nTask(\"Publish\")\n    .IsDependentOn(\"Publish-NuGet\");\n\nTask(\"Default\")\n    .IsDependentOn(\"Package\");\n\n////////////////////////////////////////////////////////////////\n// Execution\n\nRunTarget(target)"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dotnet-tools.json",
          "type": "blob",
          "size": 0.2548828125,
          "content": "{\n  \"version\": 1,\n  \"isRoot\": true,\n  \"tools\": {\n    \"cake.tool\": {\n      \"version\": \"5.0.0\",\n      \"commands\": [\n        \"dotnet-cake\"\n      ]\n    },\n    \"verify.tool\": {\n      \"version\": \"0.6.0\",\n      \"commands\": [\n        \"dotnet-verify\"\n      ]\n    }\n  }\n}"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.134765625,
          "content": "{\r\n  \"$schema\": \"http://json.schemastore.org/global\",\r\n  \"sdk\": {\r\n    \"version\": \"9.0.100\",\r\n    \"rollForward\": \"latestFeature\"\r\n  }\r\n}\r\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}