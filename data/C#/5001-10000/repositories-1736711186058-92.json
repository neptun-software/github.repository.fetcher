{
  "metadata": {
    "timestamp": 1736711186058,
    "page": 92,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/FASTER",
      "stars": 6357,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.099609375,
          "content": "# directories\n**/bin/\n**/obj/\n**/out/\n\n# files\nDockerfile*\n**/*.trx\n**/*.md\n**/*.ps1\n**/*.cmd\n**/*.sh\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.9150390625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\nx64/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Roslyn cache directories\n*.ide/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n## TODO: Comment the next line if you want to checkin your\n## web deploy settings but do note that will include unencrypted\n## passwords\n#*.pubxml\n\n# NuGet Packages Directory\npackages/*\n## TODO: If the tool you use requires repositories.config\n## uncomment the next line\n#!packages/repositories.config\n\n# Enable \"build/\" folder in the NuGet Packages folder since\n# NuGet packages use it for MSBuild targets.\n# This line needs to be after the ignore of the build folder\n# (and the packages folder if the line above has been uncommented)\n!packages/build/\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n**/log-commits\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\npackages/\n*.VC.db*\n*.VC.opendb\n.vs/\n*.lib\nnativebin/\n/cs/**/launchSettings.json\n\n# JetBrains\ncs/.idea/\ncs/remote/.idea\ncs/libdpr/.idea\n\ncs/**/BenchmarkDotNet.Artifacts/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.8935546875,
          "content": "# Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1533203125,
          "content": "    MIT License\r\n\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all\r\n    copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n    SOFTWARE"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.66015625,
          "content": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/microsoft/FASTER/main/docs/assets/images/faster-logo.png\" alt=\"FASTER logo\" width=\"600px\" />\n</p>\n  \n[![NuGet](https://img.shields.io/nuget/v/Microsoft.FASTER.Core.svg)](https://www.nuget.org/packages/Microsoft.FASTER.Core/)\n[![Build Status](https://dev.azure.com/ms/FASTER/_apis/build/status/Microsoft.FASTER?branchName=main)](https://dev.azure.com/ms/FASTER/_build/latest?definitionId=8&branchName=main)\n[![Gitter](https://badges.gitter.im/Microsoft/FASTER.svg)](https://gitter.im/Microsoft/FASTER?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n# Introduction\n\nManaging large application state easily, resiliently, and with high performance is one of the hardest\nproblems in the cloud today. The FASTER project offers two artifacts to help tackle this problem.\n\n* **FASTER Log** is a high-performance concurrent persistent recoverable log, iterator, and random \nreader library in C#. It supports very frequent commit operations at low latency, and can quickly saturate \ndisk bandwidth. It supports both sync and async interfaces, handles disk errors, and supports checksums.\n\n* **FASTER KV** is a concurrent key-value store + cache (available in C# and C++) that is designed for point \nlookups and heavy updates. FASTER supports data larger than memory, by leveraging fast external \nstorage (local or cloud). It also supports consistent recovery using a fast non-blocking checkpointing technique \nthat lets applications trade-off performance for commit latency.\n\nBoth FASTER KV and FASTER Log offer orders-of-magnitude higher performance than comparable solutions, on standard\nworkloads. Start learning about FASTER, its unique capabilities, and how to get started at our official website:\n\n[aka.ms/FASTER](https://aka.ms/FASTER)\n\n# Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.8 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "azure-pipelines-full.yml",
          "type": "blob",
          "size": 4.505859375,
          "content": "variables:\n  solution: 'cs/FASTER.sln'\n  solutionRemote: 'cs/remote/FASTER.remote.sln'\n  RunAzureTests: 'yes'\n\njobs:\n- job: 'csharpWindows'\n  pool:\n    vmImage: windows-2022\n  displayName: 'C# (Windows)'\n  timeoutInMinutes: 150 \n\n  strategy:\n    maxParallel: 2\n    matrix:\n      AnyCPU-Debug:\n        buildPlatform: 'Any CPU'\n        buildConfiguration: 'Debug'\n      AnyCPU-Release:\n        buildPlatform: 'Any CPU'\n        buildConfiguration: 'Release'\n      x64-Debug:\n        buildPlatform: 'x64'\n        buildConfiguration: 'Debug'\n      x64-Release:\n        buildPlatform: 'x64'\n        buildConfiguration: 'Release'\n\n  steps:\n  - task: UseDotNet@2\n    displayName: Use .NET 6.0\n    inputs:\n      packageType: 'sdk'\n      version: '6.0.x'\n\n  - task: UseDotNet@2\n    displayName: Use .NET 7.0\n    inputs:\n      packageType: 'sdk'\n      version: '7.0.x'\n\n  - task: NodeTool@0\n    inputs:\n       versionSpec: 14.x\n\n  - script : npm install -g azurite\n    displayName: Install Azurite\n\n  - script : start /B azurite\n    displayName: Start Azurite\n\n  - task: DotNetCoreCLI@2\n    displayName: 'dotnet build $(buildConfiguration)'\n    inputs:\n      command: 'build'\n      projects: '**/*.test.csproj'\n      arguments: '--configuration $(buildConfiguration)'\n\n  - task: DotNetCoreCLI@2\n    displayName: 'dotnet test $(buildConfiguration)'\n    inputs:\n      command: test\n      projects: '**/*.test.csproj'\n      arguments: '--configuration $(buildConfiguration) -l \"console;verbosity=detailed\"'\n      \n  - task: PublishTestResults@2\n    displayName: 'Publish Test Results'\n    inputs:\n      testRunner: VSTest\n      testResultsFiles: '**/*.trx'\n      searchFolder: '$(Agent.TempDirectory)'\n\n- job: 'cppWindows'\n  pool:\n    vmImage: windows-2022\n  displayName: 'C++ (Windows)'\n\n  strategy:\n    maxParallel: 2\n    matrix:\n      x64-Debug:\n        buildPlatform: 'x64'\n        buildConfiguration: 'Debug'\n      x64-Release:\n        buildPlatform: 'x64'\n        buildConfiguration: 'Release'\n\n  steps:\n  - task: CMake@1\n    displayName: 'CMake .. -G\"Visual Studio 17 2022\"'\n    inputs:\n      workingDirectory: 'cc/build'\n      cmakeArgs: '.. -G\"Visual Studio 17 2022\"'\n\n  - task: MSBuild@1\n    displayName: 'Build solution cc/build/FASTER.sln'\n    inputs:\n      solution: 'cc/build/FASTER.sln'\n      msbuildArguments: '/m /p:Configuration=$(buildConfiguration) /p:Platform=$(buildPlatform)'\n\n  - script: 'ctest -j 1 --interactive-debug-mode 0 --output-on-failure -C $(buildConfiguration) -R \"in_memory\"'\n    workingDirectory: 'cc/build'\n    displayName: 'Run Ctest'\n\n- job: 'cppLinux'\n  pool:\n    vmImage: ubuntu-20.04\n  displayName: 'C++ (Linux)'\n\n  steps:\n  - script: |\n      sudo apt update\n      sudo apt install -y g++ libaio-dev uuid-dev libtbb-dev\n    displayName: 'Install depdendencies'\n  - script: |\n      cd cc\n      mkdir -p build/Debug build/Release\n      cd build/Debug\n      cmake -DCMAKE_BUILD_TYPE=Debug ../..\n      make -j\n      cd ../../build/Release\n      cmake -DCMAKE_BUILD_TYPE=Release ../..\n      make -j\n    displayName: 'Compile'\n  - script: |\n      ulimit -s 65536\n      CTEST_OUTPUT_ON_FAILURE=1 make test\n    workingDirectory: 'cc/build/Debug'\n    displayName: 'Run Tests (Debug)'\n\n- job: 'csharpLinux'\n  pool:\n    vmImage: ubuntu-20.04\n  displayName: 'C# (Linux)'\n\n  strategy:\n    maxParallel: 2\n    matrix:\n      AnyCPU-Debug:\n        buildPlatform: 'Any CPU'\n        buildConfiguration: 'Debug'\n      AnyCPU-Release:\n        buildPlatform: 'Any CPU'\n        buildConfiguration: 'Release'\n\n  steps:\n  - task: UseDotNet@2\n    displayName: Use .NET 6.0\n    inputs:\n      packageType: 'sdk'\n      version: '6.0.x'\n\n  - task: UseDotNet@2\n    displayName: Use .NET 7.0\n    inputs:\n      packageType: 'sdk'\n      version: '7.0.x'\n\n  - bash: |\n      sudo npm install -g azurite\n      sudo mkdir azurite\n      sudo azurite --silent --location azurite --debug azurite\\debug.log &\n    displayName: 'Install and Run Azurite'\n\n  - task: DotNetCoreCLI@2\n    displayName: 'dotnet build $(buildConfiguration)'\n    inputs:\n      command: 'build'\n      projects: '**/*.test.csproj'\n      arguments: '--configuration $(buildConfiguration)'\n\n  - task: DotNetCoreCLI@2\n    displayName: 'dotnet test $(buildConfiguration)'\n    inputs:\n      command: test\n      projects: '**/*.test.csproj'\n      arguments: '--configuration $(buildConfiguration) -l \"console;verbosity=detailed\" --filter \"TestCategory=Smoke\"'\n      \n  - task: PublishTestResults@2\n    displayName: 'Publish Test Results'\n    inputs:\n      testResultsFormat: 'VSTest'\n      testResultsFiles: '*.trx'\n      searchFolder: '$(Agent.TempDirectory)'\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 4.53125,
          "content": "variables:\n  solution: 'cs/FASTER.sln'\n  solutionRemote: 'cs/remote/FASTER.remote.sln'\n  RunAzureTests: 'yes'\n\njobs:\n- job: 'csharpWindows'\n  pool:\n    vmImage: windows-2022\n  displayName: 'C# (Windows)'\n  timeoutInMinutes: 75 \n\n  strategy:\n    maxParallel: 2\n    matrix:\n      AnyCPU-Debug:\n        buildPlatform: 'Any CPU'\n        buildConfiguration: 'Debug'\n      AnyCPU-Release:\n        buildPlatform: 'Any CPU'\n        buildConfiguration: 'Release'\n      x64-Debug:\n        buildPlatform: 'x64'\n        buildConfiguration: 'Debug'\n      x64-Release:\n        buildPlatform: 'x64'\n        buildConfiguration: 'Release'\n\n  steps:\n  - task: UseDotNet@2\n    displayName: Use .NET 6.0\n    inputs:\n      packageType: 'sdk'\n      version: '6.0.x'\n\n  - task: UseDotNet@2\n    displayName: Use .NET 7.0\n    inputs:\n      packageType: 'sdk'\n      version: '7.0.x'\n\n  - task: NodeTool@0\n    inputs:\n      versionSpec: 14.x\n\n  - script : npm install -g azurite\n    displayName: Install Azurite\n\n  - script : start /B azurite\n    displayName: Start Azurite\n\n  - task: DotNetCoreCLI@2\n    displayName: 'dotnet build $(buildConfiguration)'\n    inputs:\n      command: 'build'\n      projects: '**/*.test.csproj'\n      arguments: '--configuration $(buildConfiguration)'\n\n  - task: DotNetCoreCLI@2\n    displayName: 'dotnet test $(buildConfiguration)'\n    inputs:\n      command: test\n      projects: '**/*.test.csproj'\n      arguments: '--configuration $(buildConfiguration) -l \"console;verbosity=detailed\" --filter:TestCategory=Smoke'\n      \n  - task: PublishTestResults@2\n    displayName: 'Publish Test Results'\n    inputs:\n      testRunner: VSTest\n      testResultsFiles: '**/*.trx'\n      searchFolder: '$(Agent.TempDirectory)'\n\n- job: 'cppWindows'\n  pool:\n    vmImage: windows-2022\n  displayName: 'C++ (Windows)'\n\n  strategy:\n    maxParallel: 2\n    matrix:\n      x64-Debug:\n        buildPlatform: 'x64'\n        buildConfiguration: 'Debug'\n      x64-Release:\n        buildPlatform: 'x64'\n        buildConfiguration: 'Release'\n\n  steps:\n  - task: CMake@1\n    displayName: 'CMake .. -G\"Visual Studio 17 2022\"'\n    inputs:\n      workingDirectory: 'cc/build'\n      cmakeArgs: '.. -G\"Visual Studio 17 2022\"'\n\n  - task: MSBuild@1\n    displayName: 'Build solution cc/build/FASTER.sln'\n    inputs:\n      solution: 'cc/build/FASTER.sln'\n      msbuildArguments: '/m /p:Configuration=$(buildConfiguration) /p:Platform=$(buildPlatform)'\n\n  - script: 'ctest -j 1 --interactive-debug-mode 0 --output-on-failure -C $(buildConfiguration) -R \"in_memory\"'\n    workingDirectory: 'cc/build'\n    displayName: 'Run Ctest'\n\n- job: 'cppLinux'\n  pool:\n    vmImage: ubuntu-20.04\n  displayName: 'C++ (Linux)'\n\n  steps:\n  - script: |\n      sudo apt update\n      sudo apt install -y g++ libaio-dev uuid-dev libtbb-dev\n    displayName: 'Install depdendencies'\n  - script: |\n      cd cc\n      mkdir -p build/Debug build/Release\n      cd build/Debug\n      cmake -DCMAKE_BUILD_TYPE=Debug ../..\n      make -j\n      cd ../../build/Release\n      cmake -DCMAKE_BUILD_TYPE=Release ../..\n      make -j\n    displayName: 'Compile'\n  - script: |\n      ulimit -s 65536\n      CTEST_OUTPUT_ON_FAILURE=1 make test\n    workingDirectory: 'cc/build/Debug'\n    displayName: 'Run Tests (Debug)'\n\n- job: 'csharpLinux'\n  pool:\n    vmImage: ubuntu-20.04\n  displayName: 'C# (Linux)'\n\n  strategy:\n    maxParallel: 2\n    matrix:\n      AnyCPU-Debug:\n        buildPlatform: 'Any CPU'\n        buildConfiguration: 'Debug'\n      AnyCPU-Release:\n        buildPlatform: 'Any CPU'\n        buildConfiguration: 'Release'\n\n  steps:\n  - task: UseDotNet@2\n    displayName: Use .NET 6.0\n    inputs:\n      packageType: 'sdk'\n      version: '6.0.x'\n\n  - task: UseDotNet@2\n    displayName: Use .NET 7.0\n    inputs:\n      packageType: 'sdk'\n      version: '7.0.x'\n\n  - bash: |\n      sudo npm install -g azurite\n      sudo mkdir azurite\n      sudo azurite --silent --location azurite --debug azurite\\debug.log &\n    displayName: 'Install and Run Azurite'\n\n  - task: DotNetCoreCLI@2\n    displayName: 'dotnet build $(buildConfiguration)'\n    inputs:\n      command: 'build'\n      projects: '**/*.test.csproj'\n      arguments: '--configuration $(buildConfiguration)'\n\n  - task: DotNetCoreCLI@2\n    displayName: 'dotnet test $(buildConfiguration)'\n    inputs:\n      command: test\n      projects: '**/*.test.csproj'\n      arguments: '--configuration $(buildConfiguration) -l \"console;verbosity=detailed\" --filter \"TestCategory=Smoke\"'\n      \n  - task: PublishTestResults@2\n    displayName: 'Publish Test Results'\n    inputs:\n      testResultsFormat: 'VSTest'\n      testResultsFiles: '*.trx'\n      searchFolder: '$(Agent.TempDirectory)'\n"
        },
        {
          "name": "cc",
          "type": "tree",
          "content": null
        },
        {
          "name": "cs",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}