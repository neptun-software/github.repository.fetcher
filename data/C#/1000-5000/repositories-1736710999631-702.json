{
  "metadata": {
    "timestamp": 1736710999631,
    "page": 702,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dathlin/HslCommunication",
      "stars": 1691,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.2265625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n#*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n/imgs/partner\n/------\n"
        },
        {
          "name": "Download",
          "type": "tree",
          "content": null
        },
        {
          "name": "HslCommunication2.sln",
          "type": "blob",
          "size": 1.3349609375,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 16\nVisualStudioVersion = 16.0.29306.81\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"HslCommunicationDemo\", \"HslCommunicationDemo\\HslCommunicationDemo.csproj\", \"{3878075B-B8D7-4090-B094-29622581442F}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{F12938D4-B708-40D0-A4DD-EEBB44C27382}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tREADME.md = README.md\n\tEndProjectSection\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{3878075B-B8D7-4090-B094-29622581442F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3878075B-B8D7-4090-B094-29622581442F}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3878075B-B8D7-4090-B094-29622581442F}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3878075B-B8D7-4090-B094-29622581442F}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {7FA0428B-A43A-44FF-B6A2-56F9AE47CBF8}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "HslCommunicationDemo",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.71484375,
          "content": "<pre>\n             ///\\      ///\\             /////////\\              ///\\\n            //\\\\/      //\\/           //\\\\\\\\\\\\\\\\//\\            //\\\\/\n           //\\/       //\\/          //\\\\/       \\\\/           //\\/\n          //\\/       //\\/           \\//\\                     //\\/\n         /////////////\\/             \\//////\\               //\\/\n        //\\\\\\\\\\\\\\\\\\//\\/               \\\\\\\\\\//\\             //\\/\n       //\\/       //\\/                     \\//\\           //\\/\n      //\\/       //\\/           ///\\      //\\\\/          //\\/       //\\\n     ///\\      ///\\/            \\/////////\\\\/           /////////////\\/\n     \\\\\\/      \\\\\\/              \\\\\\\\\\\\\\\\\\/             \\\\\\\\\\\\\\\\\\\\\\\\\\/             Present by Richard.Hu\n</pre>\n\n# HslCommunication\n\n![Build status](https://img.shields.io/badge/Build-Success-green.svg) [![NuGet Status](https://img.shields.io/nuget/v/HslCommunication.svg)](https://www.nuget.org/packages/HslCommunication/) ![NuGet Download](https://img.shields.io/nuget/dt/HslCommunication.svg) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/HslCommunication/community) [![NetFramework](https://img.shields.io/badge/Language-C%23%207.0-orange.svg)](https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/) [![Visual Studio](https://img.shields.io/badge/Visual%20Studio-2019-red.svg)](https://www.visualstudio.com/zh-hans/) ![copyright status](https://img.shields.io/badge/CopyRight-Richard.Hu-brightgreen.svg) \n\n[HslCommunication.jar](https://github.com/dathlin/HslCommunicationJavaDemo)\n\n![Build status](https://img.shields.io/badge/Build-Success-green.svg) ![NetFramework](https://img.shields.io/badge/Language-java-orange.svg) ![version](https://img.shields.io/maven-central/v/com.github.dathlin/HslCommunication) ![JDK status](https://img.shields.io/badge/JDK-1.8.0-green.svg) ![IDE status](https://img.shields.io/badge/Intellij%20Idea-2018.4-red.svg) ![copyright status](https://img.shields.io/badge/CopyRight-Richard.Hu-brightgreen.svg) \n\n[HslCommunication.py](https://github.com/dathlin/HslCommunicationPython)\n\n![Build status](https://img.shields.io/badge/Build-Success-green.svg) ![NetFramework](https://img.shields.io/badge/python-3.6-orange.svg) ![version](https://img.shields.io/pypi/v/HslCommunication) ![download](https://img.shields.io/pypi/dm/HslCommunication) ![IDE status](https://img.shields.io/badge/Visual%20Studio-Code-red.svg) ![copyright status](https://img.shields.io/badge/CopyRight-Richard.Hu-brightgreen.svg) \n\n## CopyRight\n(C) 2017 - 2023 Richard.Hu, All Rights Reserved\n\n## Authorization(ææ)\nå·ä½å¯ä»¥åç§ http://www.hsltechnology.cn/Home/Licence?area=HslCommunication\n\nè¯ç¨ææï¼ å å¥ **ææ¯æ¯æVIPç¾¤** å³å¯ä»¥è·å¾æ¿æ´»ç ï¼æ¯æé¿æ¶é´æµè¯ä½¿ç¨ãä¼ä¸ç¨æ·å¯ä»¥èç³»å¾®ä¿¡:13516702732 ç³è¯·è¯ç¨çè¯ä¹¦\n```\n        /// <summary>\n        /// åºç¨ç¨åºçä¸»å¥å£ç¹ã\n        /// </summary>\n        [STAThread]\n        static void Main( )\n        {\n            // ææç¤ºä¾   è°ç¨ä¸æ¬¡å³å¯  call only once\n            if(!HslCommunication.Authorization.SetAuthorizationCode( \"ä½ çæ¿æ´»ç \" ))\n            {\n                MessageBox.Show( \"ææå¤±è´¥ï¼å½åç¨åºåªè½ä½¿ç¨8å°æ¶ï¼\" );\n                return;\n            }\n\n\n            Application.EnableVisualStyles( );\n            Application.SetCompatibleTextRenderingDefault( false );\n            Application.Run( new Form1( ) );\n        }\n```\n\nåç¨ææï¼èµ éæºä»£ç ï¼: \n   1. å¬å¯¹å¬ç­¾è®¢ååã\n   2. å¬å¯¹å¬ææ¬¾ï¼å¼å·å¢å¼ç¨åç¥¨ã\n   3. è·åä¸ç¨çè½¯ä»¶ï¼è´¦æ·ï¼æ¥ä¸è½½ææ°çæºä»£ç ï¼æ¿æ´»ç \n   4. ä¼ä¸ä¸ä¸å¹è®­é¢å¤ä»è´¹ï¼1000åäººæ°å¸1å°æ¶ï¼å¹è®­æ§ä»¶ä½¿ç¨ï¼æ§ä»¶å¼åã\n\n## Official Website\nWebside: [http://www.hslcommunication.cn/](http://www.hslcommunication.cn/)\n\nAPI: [http://api.hslcommunication.cn/](http://api.hslcommunication.cn/)\n\nGitter[talk with me]: [https://gitter.im/HslCommunication/community](https://gitter.im/HslCommunication/community)\n\n## What is HSL\nThis is an industrial IoT based, computer communications architecture implementation, integrated with most of the basic functional implementation of industrial software development, \nsuch as Mitsubishi PLC Communications, Siemens PLC Communications, OMRON PLC Communications, Modbus Communications,\nAll of these communications have been implemented in multiple languages, and of course, the feature integration of the main. NET Library is even more powerful, \nin addition to the implementation of cross-program, cross-language, cross-platform communication, so that you are no longer obsessed with the use of Windows or Linux system, \nthe realization of log function, flow number generation function, mail sending function, Fourier transform function, and so on, \nwill integrate more common features of industrial environment in the future.\n\nIn order not to let the industry 4.0 stay on the slogan, the high-rise flat up, and the cornerstone is HSL.\n\n## What can HSL do\nHSL can connect the equipment of the industrial production site to the free transmission of data at the bottom, whether active or passive, \nwhatever your acquisition system (usually the acquisition system is a Windows computer, or an embedded system, or a Linux-based box),\ncan achieve the random transmission of data, convenient and fast to achieve a strong, real-time, high-response robust system, whether you are building a C/S system, \nor B/S system, or C-B-S-A (Integrated desktop client, browser, Android) hybrid system, is a fast and low-cost implementation,\n\nAs long as you have the primary data of the industrial field, that is, can build a powerful real-time monitoring function of the software,\nproduction reports and automated scheduling software, a variety of process parameters history tracking software, data based on the experience of machine learning software, \nas well as full-featured MES system and so on. \n\n**By the way**, the traditional industrial model is the procurement of off-the-shelf industrial software, \nincluding the host computer software and MES system, while ignoring their own system.\nFor some industry-standard functional software, such as ERP systems, financial software, these can be purchased directly,\nHowever, for the host computer and MES system, the actual needs of each enterprise are very different, it is difficult to have a common scene, \nand the current situation is to spend a lot of money to do small things, so here, give a future-oriented model to achieve: for the production enterprise, \nBased on HSL to develop enterprise-class MES system implementation, as the core Warehouse center of data, and business logic processing Center, \nfor equipment suppliers, based on HSL to develop the host computer software system, fast and convenient distribution of data to the customer's MES system, work together.\n\n## Install From NuGet\nDescription: NuGet for stable version, Support Online upgrade, the use of components is best downloaded from NuGet, \nthe project published here is likely to have not yet compiled the beta version, NuGet installation is as follows:\n```\nInstall-Package HslCommunication\n```\n\n## HslCommunication.dll Summary \nWhen I started working on this project, I had an idea of how to easily and quickly read and write PLC data. Our code logic should be very simple, \nand it only takes one or two lines of code to implement this feature. Like this\n```\n// Pseudo code\nPLC plc = new PLC(\"192.168.0.11\", 6000);\n\nshort value = plc.ReadInt16(\"D100\");\n```\nBut after a long period of development and attempt, found that the return of PLC is likely to be abnormal, this anomaly may come from the network failure, \nmay also come from you entered the wrong address, or the PLC itself is not allowed to operate, so in this project added a class **Operateresult**, \nSo the final code becomes what it looks like (with Siemens PLC as an example)\n```\nSiemensS7Net siemens = new SiemensS7Net( SiemensPLCS.S1200, \" 192.168.1.110\" );\nOperateResult<short> read = siemens.ReadInt16(\"M100\");\n\nif(read.IsSuccess)\n{\n\t// you get the right value\n\tshort value = read.Content;\n}\nelse\n{\n\t// failed , but you still can know the failed detail\n\tConsolo.WriteLine(read.Message);\n}\n```\nOf course, you can also write very concise, because the judgment of success is ignored, so the following operation is risky.\n```\nSiemensS7Net siemens = new SiemensS7Net( SiemensPLCS.S1200, \" 192.168.1.110\" );\nshort value = siemens.ReadInt16(\"M100\").Content;   // Look at this code, isn't it very succinct.\n```\nWhen use .Net4.5 or higher plateform. we can use like this\n```\nSiemensS7Net siemens = new SiemensS7Net( SiemensPLCS.S1200, \" 192.168.1.110\" );\nshort value = (await siemens.ReadInt16Async(\"M100\")).Content;   // Look at this code, isn't it very succinct.\n```\n\nThe above operation we have read the data, but is based on a short connection, \nwhen the reading of the data finished, automatically shut down the network, \nif you want to open a long connection, follow the following actions.\n\n```\nSiemensS7Net siemens = new SiemensS7Net( SiemensPLCS.S1200, \" 192.168.1.110\" );\nsiemens.SetPersistentConnection( );\nOperateResult<short> read = siemens.ReadInt16(\"M100\");\n\nif(read.IsSuccess)\n{\n\t// you get the right value\n\tshort value = read.Content;\n}\nelse\n{\n\t// failed , but you still can know the failed detail\n\tConsolo.WriteLine(read.Message);\n}\n\n// when you don't want read data, you should call close method\nsiemens.ConnectClose( );\n\n```\nWhen use .Net4.5 or higher plateform. we can use like this\n```\nSiemensS7Net siemens = new SiemensS7Net( SiemensPLCS.S1200, \" 192.168.1.110\" );\nsiemens.SetPersistentConnection( );\nOperateResult<short> read = await siemens.ReadInt16Async(\"M100\");\n\nif(read.IsSuccess)\n{\n\t// you get the right value\n\tshort value = read.Content;\n}\nelse\n{\n\t// failed , but you still can know the failed detail\n\tConsolo.WriteLine(read.Message);\n}\n\n// when you don't want read data, you should call close method\nsiemens.ConnectClose( );\n\n```\n\nSo we can see that all the other modes of communication are similar to this, including Mitsubishi PLC, Siemens PLC,AB PLC, OMRON PLC, Keane plc, Panasonic Plc,\nredis Communications, EFT Robots, Kuka robots and so on, including its own support for the HSL protocol.\n\nThe goal is to reduce the cost of learning for developers, and usually you have to learn how to use several different libraries and learn the basics of PLC. Now, \nall you need to know is how the basic PLC address is represented, and you can read and write PLC data.\n\n\nCalled from Visual C++ project\n\ncppProject -> Properties -> Configuration Properties -> General -> CLR Support\n\nAdd HslCommunication.dll(net35) reference\n```\n#include \"pch.h\"\n#include <iostream>\nusing namespace HslCommunication;\nusing namespace ModBus;\n\nint main()\n{\n    std::cout << \"Hello World!\\n\";\n\n\n\t// This is the demo , called C# ModbusTcpNet\n\tSystem::String ^ipAddress = gcnew System::String(\"127.0.0.1\");\n\tModbusTcpNet ^modbus = gcnew ModbusTcpNet(ipAddress, 502, 1);\n\n\tSystem::String ^dataAddress = gcnew System::String(\"100\");\n\tOperateResult<short> ^readValue = modbus->ReadInt16(dataAddress);\n\tif (readValue->IsSuccess) {\n\t\tshort value = readValue->Content;\n\t\tprintf(\"Read Valueï¼%d \\n\", value);\n\t}\n\telse\n\t{\n\t\tprintf(\"Read Failed\");\n\t}\n}\n```\n\nIf you want to communication in your mobile phone application, you also can use C# code by xamarin, you can download HslAppDemo to test\n[HslAppDemo.apk](https://github.com/dathlin/HslCommunication/raw/master/Download/com.companyname.HslAppDemo-Signed.apk)\n\n\nAnother feature of this project is support for cross-language communication support. You can build a C # background server that supports Windows desktop application \nand Web background, and Android phone-side, Python programs, Java programs to communicate. server side code:\n```\nclass Program\n{\n    static void Main(string[] args)\n    {\n\t\tNetSimplifyServer simplifyServer;\n\t\ttry\n\t\t{\n\t\t\tsimplifyServer = new NetSimplifyServer( );\n\t\t\tsimplifyServer.ReceiveStringEvent += SimplifyServer_ReceiveStringEvent;\n\t\t\tsimplifyServer.ServerStart( 12345 );\n\t\t}\n\t\tcatch(Exception ex )\n\t\t{\n\t\t\tConsole.WriteLine( \"Create failed: \" + ex.Message );\n\t\t\tReturn;\n\t\t}\n\n\t\tConsole.ReadLine();\n\t}\n\n\tprivate static void SimplifyServer_ReceiveStringEvent( AppSession session, NetHandle handle, string value )\n\t{\n\t\tif (handle == 1)\n\t\t{\n\t\t\t// Message to operate when a signal from the client is received 1\n\t\t\tsimplifyServer.SendMessage( session, handle, \"This is test singleï¼\" + value );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsimplifyServer.SendMessage( session, handle, \"not supported msg\" );\n\t\t}\n\t\n\t\t// Show out, who sent it, what did it send?\n\t\tConsole.WriteLine($\"{session} [{handle}] {value}\");\n\t}\n}\n```\nC# Client Side (Also asp.net mvc, asp.net core mvc)\n```\nNetSimplifyClient simplifyClient = new NetSimplifyClient( \"127.0.0.1\", 12345 );\nstring value = simplifyClient.ReadFromServer( 1, \"test\" ).Content;\n```\nJava Client Side\n```\nNetSimplifyClient simplifyClient = new NetSimplifyClient( \"127.0.0.1\", 12345 );\nstring value = simplifyClient.ReadFromServer( 1, \"test\" ).Content;\n```\nPython Client Side\n```\nnetSimplifyClient = NetSimplifyClient(\"127.0.0.1\",12345)\nvalue = netSimplifyClient.ReadFromServer(1,'123').Content\n```\n\n**Note**: In the source code, still contains a lot of Chinese annotation, in the future for a short period of time, \nwill be used in English and Chinese double annotation, thank you for your understanding.\n\n**HslCommunicationDemo** The features supported by this project can be roughly clear through the demo interface below:\n![Picture](https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/demo.png)\n\n\n## HslCommunication.jar Summary \nThis component provides the Java version, for the. NET version of the castration version, removed all the server function code, \nretained part of the client function code, convenient and plc, device data interaction, and C # program data interaction, \nthis jar component is suitable for the development of Android, easy to build a. NET Server + Windows Client + asp.net client + J2EE client + Java Client + Android client.\n![Picture](https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/java_demo.png)\n\n## HslCommunication.py Summary \nThis component provides a Python version, a castration version of the. NET version, removes all server function codes, retains some of the client function code, \nfacilitates data interaction with PLC, devices, and data interaction with C # programs for cross-platform operation\n![Picture](https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/python_demo.png)\n\n## Xamarin.Android Demo\n![Picture](https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/appDemo.png)\n\n## Where is the Source code?\nNot free open source. you can refer to webside: http://www.hslcommunication.cn/Cooperation\n\n## How to sponsor author?\n\n[PayPal](https://www.PayPal.Me/hslcommunication)\n\n![Alipay](https://raw.githubusercontent.com/dathlin/HslCommunication/master/imgs/support.png)\n\nThank you for your understanding \n"
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}