{
  "metadata": {
    "timestamp": 1736711051371,
    "page": 805,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Cn33liz/p0wnedShell",
      "stars": 1530,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.064453125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n## TODO: Comment the next line if you want to checkin your\n## web deploy settings but do note that will include unencrypted\n## passwords\n#*.pubxml\n\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.9423828125,
          "content": "### Changelog:\n\n#### Version 2.6:\n\n* Added a recent version of Mimikatz.\n* Updated some PowerShell script/modules.\n* Fixed some PowerSploit scripts so they work \"again\" in latest Windows 10 builds.\n\n#### Version 2.5:\n\n* p0wnedShell can now be run from a Meterpreter shell.\n* Added a recent version of Mimikatz and changed the in memory PE loader to Native C# code.\n* Ported EasySystem (using namedpipe impersonation) to native C# code (instead of using reflective PE injection).\n* Fixed a Proxy authentication issue within the domainfronting enabled Meterpreter stager.\n* Added option to masquerade the p0wnedShell process (PEB) so it has the appearance of a another process (notepad.exe e.g.).\n* Added -parent command line option to start p0wnedShell using another Parent Process ID (svchost e.g.).\n* Using the same technique to start p0wnedShell with another Parent Process, we can also create a new process with a system token. \n\n#### Version 2.0:\n\n* Updated all PowerShell script/modules.\n* Added new Exploits/Attacks and automation.\n\n#### Version 1.4.1:\n\n* Includes a new Potato/Tater (WPAD) Local Privilege Escalation trigger i found in the Office 2016/365 ClickToRun service.\n  ClickToRun issue Reported to MSRC on 4/29/2016 (WPAD/NTLM Loopback relay issue can now be mitigated using MS16-077).\n\n#### Version 1.4:\n\n* Includes a bypass method for Amsi (Antimalware Scan Interface) within Windows 10.\n\n#### Version 1.3:\n\n* PowerSploit tools updated.\n* Updated Mimikatz to latest version.\n* Updated MS14-068 Exploit (Kekeo) to latest version.\n* New version of Didier Stevens modification of ReactOS Command Prompt incl. Backup Privileges.\n* Added Tater, the PowerShell implementation of the Hot Potato Windows Privilege Escalation exploit.\n* Added automation to get a SYSTEM command shell using Token Manipulation (Invoke-TokenManipulation).\n* Added automation to find machines in the Domain where Domain Admins are logged into (PowerView).\n\n#### Version 1.2:\n\n* First Public Release.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4423828125,
          "content": "Copyright (c) 2018, Cn33liz\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of p0wnedShell nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.958984375,
          "content": "# p0wnedShell\n\nPowerShell Runspace Post Exploitation Toolkit \n\n![Alt text](/p0wnedShell/p0wnedShell.ico?raw=true \"p0wnedShell\")\n\n### Author: Cn33liz and Skons\n\nVersion: 2.6\nLicense: BSD 3-Clause\n\n### What is it:\n\np0wnedShell is an offensive PowerShell host application written in C# that does not rely on powershell.exe but runs powershell commands and functions within a powershell runspace environment (.NET). It has a lot of offensive PowerShell modules and binaries included to make the process of Post Exploitation easier.\nWhat we tried was to build an “all in one” Post Exploitation tool which we could use to bypass all mitigations solutions (or at least some off), and that has all relevant tooling included. \nYou can use it to perform modern attacks within Active Directory environments and create awareness within your Blue team so they can build the right defense strategies.\n\n### How to Compile it:\n\nTo compile p0wnedShell you need to open this project within Microsoft Visual Studio and build it for the x64/x86 platform.\nYou can change the following AutoMasq options before compiling:\n\npublic static bool AutoMasq = true;\n\npublic static string masqBinary = @\"C:\\Windows\\Notepad.exe\";\n\n### How to use it:\n\nWith AutoMasq set to false, you just run the executable so it runs normally.\nWith AutoMasq enabled, you could rename the p0wnedShell executable as the process you're going to masquerade (masqBinary), so it has the appearance of that process (for example notepad.exe).\n\nUsing the optional \"-parent\" commandline argument, you can start p0wnedShell using another Parent Process ID.\nWhen combining the PEB Masq option and different parent process ID (for example svchost), you can give p0wnedShell the appearance of a legitimate service ;) \n\nNote: Running p0wnedShell using another Parent Process ID doesn't work from a Meterpreter session/shell.... yet!\n\n```\nChanging the Parent Process ID can also be used to spawn a p0wnedShell process with system privileges, \nfor example using lsass as the the parent process.\nFor this you need to have UAC elevated administrator permissions.\n\nC:\\p0wnedShell>p0wnedShellx64.exe -parent\n \n [+] Please enter a valid Parent Process name.\n [+] For Example: C:\\p0wnedShell\\p0wnedShellx64.exe -parent svchost\n \nC:\\p0wnedShell>p0wnedShellx64.exe -parent lsass\n```\n\nTo run as x86 binary and bypass Applocker (Credits for this great bypass go to Casey Smith aka subTee):\n\n```\ncd \\Windows\\Microsoft.NET\\Framework\\v4.0.30319 (Or newer .NET version folder)\n\nInstallUtil.exe /logfile= /LogToConsole=false /U C:\\p0wnedShell\\p0wnedShellx86.exe\n```\n\nTo run as x64 binary and bypass Applocker:\n\n```\ncd \\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 (Or newer .NET version folder)\n\nInstallUtil.exe /logfile= /LogToConsole=false /U C:\\p0wnedShell\\p0wnedShellx64.exe\n```\n\n### What's inside the runspace:\n\n#### The following PowerShell tools/functions are included:\n\n* PowerSploit: Invoke-Shellcode\n* PowerSploit: Invoke-ReflectivePEInjection\n* PowerSploit: Invoke-Mimikatz\n* PowerSploit: Invoke-TokenManipulation\n* PowerSploit: PowerUp and PowerView\n* Rasta Mouse: Sherlock\n* HarmJ0y's: Invoke-Psexec and Invoke-Kerberoast\n* Rohan Vazarkar's: Invoke-BloodHound (C# Ingestor)\n* Chris Campbell's: Get-GPPPassword\n* Tim Medin's: GetUserSPNS\n* Besimorhino's: PowerCat\n* Nishang: Copy-VSS and Invoke-Encode\n* Nishang: Invoke-PortScan and Get-PassHashes\n* Kevin Robertson: Invoke-Tater, Invoke-SMBExec and Invoke-WMIExec\n* Kevin Robertson: Invoke-Inveigh and Invoke-InveighRelay\n* FuzzySecurity: Invoke-MS16-032 and Invoke-MS16-135\n\n\nPowershell functions within the Runspace are loaded in memory from\n[Base64 encode and compressed strings](https://github.com/Cn33liz/p0wnedShell/blob/master/Utilities/CompressString.cs).\n\n#### The following Binaries/tools are included:\n\n* Benjamin DELPY's Mimikatz\n* Benjamin DELPY's MS14-068 kekeo Exploit\n* Didier Stevens modification of ReactOS Command Prompt\n* MS14-058 Local SYSTEM Exploit\n* hfiref0x MS15-051 Local SYSTEM Exploit\n\nBinaries are loaded in memory using ReflectivePEInjection (Byte arrays are compressed using Gzip and saved within p0wnedShell as [Base64 encoded strings](https://github.com/Cn33liz/p0wnedShell/blob/master/Utilities/CompressString.cs)).\n\n### Shout-outs:\n\np0wnedshell is heavily based on tools and knowledge from people like harmj0y, the guys from Powersploit, Sean Metcalf, SubTee, Nikhil Mittal, Besimorhino, Benjamin Delpy, Breenmachine, FoxGlove Security, Kevin Robertson, FuzzySecurity, James Forshaw and anyone else i forgot. So shout-outs go to them and of course to our friends in Redmond for giving us access to a very powerfull hacking language.\n\n### Todo:\n\n* Tab completion within the shell using TabExpansion2.\n* More attacks (Kerberos Silver Tickets e.g.).\n* More usefull powershell modules.\n* Fix the console redirection when running p0wnedShell from a Meterpreter shell using a different Parent Process ID.\n\n### Contact:\n\nTo report an issue or request a feature, feel free to contact me at:\nCornelis ```at``` dePlaa.com or [@Cn33lis](https://twitter.com/Cneelis)\n\n"
        },
        {
          "name": "Utilities",
          "type": "tree",
          "content": null
        },
        {
          "name": "p0wnedShell.sln",
          "type": "blob",
          "size": 1.662109375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Express 14 for Windows Desktop\nVisualStudioVersion = 14.0.24720.0\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"p0wnedShell\", \"p0wnedShell\\p0wnedShell.csproj\", \"{2E9B1462-F47C-48CA-9D85-004493892381}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Debug|x64.Build.0 = Debug|x64\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Debug|x86.ActiveCfg = Debug|x86\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Debug|x86.Build.0 = Debug|x86\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Release|x64.ActiveCfg = Release|x64\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Release|x64.Build.0 = Release|x64\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Release|x86.ActiveCfg = Release|x86\n\t\t{2E9B1462-F47C-48CA-9D85-004493892381}.Release|x86.Build.0 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "p0wnedShell",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}