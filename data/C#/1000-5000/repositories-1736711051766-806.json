{
  "metadata": {
    "timestamp": 1736711051766,
    "page": 806,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NRules/NRules",
      "stars": 1530,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.345703125,
          "content": "# Build Folders\n/build\n\n## Visual Studio temporary files\n.vs\n\n## IntelliJ temporary files\n.idea\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Rr]elease/\nx64/\n[Bb]in/\n[Oo]bj/\n\n# Test results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\nTestResult.xml\n*.trx\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac folder attributes\n.DS_Store\n\n# Benchmak Results\nBenchmarkDotNet.Artifacts\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.009765625,
          "content": "# Contributor Guide\n\nContributions to NRules, whether new features or bug fixes, are welcome and are greatly appreciated.\n\n**Your contributions must be your own work and licensed under the same terms as NRules project**\n\n## Process\n\n- **File an issue.** Either suggest a feature or note a defect. If it's a new feature, explain the motivation behind it and how you think it should work. If it's a defect, include a description and reproduction (ideally one or more failing unit tests).\n- **Design discussion.** For new features, some discussion on the issue will take place to determine if it's something that should be included with NRules. For defects, discussion may happen around whether the issue is truly a defect or if the behavior is correct.\n- **Implementation.** Fork the repository, implement and test the change.\n- **Pull request.** Create a pull request on the `develop` branch of the repository to submit changes. Pull requests need to pass the CI build and follow coding standards. All pull requests should include accompanying unit tests to verify the work.\n- **Code review.** Some iteration may take place requiring updates to the pull request.\n- **Pull request acceptance.** The pull request will be accepted into the `develop` branch and pushed to `master` with the next release.\n\n### Questions\n\nIf you just want to ask a question about how to use NRules, instead of creating an issue, consider asking your question on [Stack Overflow](https://stackoverflow.com/questions/tagged/nrules), starting a discussion on GitHub [Discussions](https://github.com/NRules/NRules/discussions) or kicking off a conversation on the [Gitter Chat](https://gitter.im/NRules/NRules).\n\n## License\n\nBy contributing to NRules, you assert that:\n\n1. The contribution is your own original work.\n2. You have the right to assign the *copyright* for the work (it is not owned by your employer, or you have been given copyright assignment in writing).\n3. You license it under the terms applied to the rest of the NRules project.\n\n## Development Guidelines\n\n### Development Environment\n\n#### Windows\n- Visual Studio 2022 or Visual Studio Code (full Visual Studio is required for Debugger Visualizer development)\n\n#### MacOS and Linux\n- PowerShell (necessary to run build scripts)\n- Visual Studio Code or JetBrains Rider\n\n### Dependencies\n\nNRules core assemblies depend *only* on the .NET Base Class Library (BCL). It should be possible to build the project straight out of Git (no additional installation needs to take place on the developer's machine). This means NuGet package references (which should be restored during the build process).\n\nIntegration and extension projects may have additional dependencies, consistent with the nature of those projects.\n\nUnit tests are written in xUnit and Moq.\n\n### Coding Standards\n\n- NRules uses standard Microsoft .NET coding guidelines. See the [Framework Design Guidelines](https://msdn.microsoft.com/en-us/library/ms229042.aspx) for suggestions. \n- Use four spaces for code indentation (no tabs). Use two spaces for indentation in csproj, props, xml and json files.\n- For private fields, use a camelCase notation, prefixing field names with an underscore.\n- Generally, use comment-free coding approach, where code is self-explanatory. Comments may be added for complex areas of code, and should explain \"why\" not \"how\".\n- Maintain clean code - no commented out sections, no dangling or inconsistent line breaks, ensure consistent indentation and bracing.\n- Don't use regions.\n- Treat compiler warnings as errors.\n- If you have ReSharper/Rider, make sure to address all warnings and errors that it produces.\n- Be cognizant of performance-critical code.\n\n### Documentation\n\nAPI documentation and conceptual documentation are compiled into the project documentation site as part of the build process, using [DocFX](https://github.com/dotnet/docfx).\n\n- Public types and members must have XML documentation, so that it can be included into the API documentation. \n- Conceptual documentation must be written in [CommonMark](https://commonmark.org/)-compliant markdown format. \n"
        },
        {
          "name": "DevSigningKey.sha1",
          "type": "blob",
          "size": 0.3125,
          "content": "0024000004800000940000000602000000240000525341310004000001000100f707beb2a866b43617af35c82a8f2f6e5b594ecdc9c27921ede22c5ed35fe8bffae26ab16e8d8ba5f02f091f189cbe3033a2b8f6ee02eb8a76662050179ebe9f789b21327aff7f4a01f6c57e361baf8bf72b2938cfd96662368076e6c45436660fcdd6bdf2b979450502fc6719ec51e63c8a8fd9dd74221c80d2fa6f6a9e8dd9"
        },
        {
          "name": "DevSigningKey.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.1240234375,
          "content": "<Project>\n\n  <PropertyGroup>\n    <Version>1.0.0</Version>\n    <NoWarn>$(NoWarn);CS1591;NU5048;NU5128</NoWarn>\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <Deterministic>true</Deterministic>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>embedded</DebugType>\n  </PropertyGroup>\n\n  <PropertyGroup>\n    <Company>NRules</Company>\n    <Product>NRules</Product>\n    <Authors>Sergiy Nikolayev</Authors>\n    <Copyright>Copyright 2012-2025 Sergiy Nikolayev. All rights reserved.</Copyright>\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\n    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\n    <PackageIconUrl>https://raw.githubusercontent.com/NRules/NRules.media/master/Logo/Logo.png</PackageIconUrl>\n    <PackageProjectUrl>https://nrules.net</PackageProjectUrl>\n    <PackageReleaseNotes>https://github.com/NRules/NRules/releases/v$(Version)</PackageReleaseNotes>\n    <PublishRepositoryUrl>true</PublishRepositoryUrl>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.SourceLink.GitHub\" PrivateAssets=\"All\"/>\n  </ItemGroup>\n\n</Project>"
        },
        {
          "name": "Directory.Packages.props",
          "type": "blob",
          "size": 1.09765625,
          "content": "<Project>\n\n  <PropertyGroup>\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\n    <CentralPackageFloatingVersionsEnabled>true</CentralPackageFloatingVersionsEnabled>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageVersion Include=\"System.Text.Json\" Version=\"5.0.2\" />\n    <PackageVersion Include=\"Autofac\" Version=\"4.0.0\" />\n    <PackageVersion Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"8.0.0\" />\n    <PackageVersion Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.11.1\" />\n    <PackageVersion Include=\"Moq\" Version=\"4.18.4\" />\n    <PackageVersion Include=\"xunit\" Version=\"2.9.2\" />\n    <PackageVersion Include=\"xunit.runner.visualstudio\" Version=\"2.8.2\" />\n    <PackageVersion Include=\"BenchmarkDotNet\" Version=\"0.14.0\" />\n    <PackageVersion Include=\"Microsoft.SourceLink.GitHub\" Version=\"8.0.0\" />\n  </ItemGroup>\n\n  <!-- Locally built packages -->\n  <ItemGroup>\n    <PackageVersion Include=\"NRules\" Version=\"*\" />\n    <PackageVersion Include=\"NRules.Json\" Version=\"*\" />\n    <PackageVersion Include=\"NRules.Integration.DependencyInjection\" Version=\"*\" />\n  </ItemGroup>\n  \n</Project>"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.06640625,
          "content": "The MIT License\n\nCopyright (c) 2012-2025 Sergiy Nikolayev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the \"Software\"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\nThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.595703125,
          "content": "# NRules\n\nNRules is an open source production rules engine for .NET, based on the [Rete](http://en.wikipedia.org/wiki/Rete_algorithm) matching algorithm. Rules are authored in C# using internal DSL.\n\n[![Build status](https://img.shields.io/appveyor/ci/nrules/nrules.svg)](https://ci.appveyor.com/project/NRules/nrules) [![NuGet](https://img.shields.io/nuget/v/NRules.svg)](https://nuget.org/packages/NRules) [![NRules on Stack Overflow](https://img.shields.io/badge/stack%20overflow-nrules-orange.svg)](http://stackoverflow.com/questions/tagged/nrules) [![Join the chat](https://img.shields.io/gitter/room/nrules/nrules.svg)](https://gitter.im/nrules/nrules)\n\n## Installing NRules\n\nTo install NRules, get it from nuget via the package manager\n```console\n> Install-Package NRules\n```\n\n## Getting Started\n\nUse the following resources to get up and running with NRules\n\n- [Getting Started Guide](https://nrules.net/articles/getting-started.html)\n- [GPT Rules Writer](https://chat.openai.com/g/g-RgoE8sL4r-nrules-rule-writer)\n- [Documentation](https://nrules.net/index.html)\n- [API Documentation](https://nrules.net/api/index.html)\n\n## Getting Help\n\nUse the following discussion and Q&A platforms to get help with NRules\n\n- [Discussions](https://github.com/NRules/NRules/discussions)\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/nrules)\n- [Gitter Chat](https://gitter.im/NRules/NRules)\n\n## Contributing\n\nSee [Contributor Guide](CONTRIBUTING.md) for the guidelines on how to contribute to the project.\n\n---\nCopyright &copy; 2012-2025 [Sergiy Nikolayev](https://github.com/snikolayev) under the [MIT license](LICENSE.txt).\n"
        },
        {
          "name": "SigningKey.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.251953125,
          "content": "version: 1.0.1.{build}\nconfiguration: Release\n\nimage: Visual Studio 2022\n\nskip_tags: true\n\nnuget:\n  disable_publish_on_pr: true\n\nclone_depth: 1\n\ntest: off\n\nbuild_script:\n- ps: .\\build.ps1 Build All\n\nartifacts:\n- path: build\\packages\\**\\*.nupkg\n  name: NuGet\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.bat",
          "type": "blob",
          "size": 0.0478515625,
          "content": "powershell.exe -noprofile .\\build.ps1 %1 %2\nPAUSE"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 6.7998046875,
          "content": "param (\n    [string]$target = 'Build',\n    [string]$component = 'Core'\n)\n\n$version = '1.0.1'\n$configuration = 'Release'\n\nif (Test-Path Env:CI) { $version = $Env:APPVEYOR_BUILD_VERSION }\nif (Test-Path Env:CI) { $configuration = $Env:CONFIGURATION }\n\n$components = @{\n    'NRules' = @{\n        name = 'NRules'\n        solution_file = 'src\\NRules\\NRules.sln'\n        package = @{\n            bin = @{\n                artifacts = @('netstandard2.0', 'netstandard2.1')\n                'netstandard2.0' = @{\n                    include = @(\n                        \"NRules\\bin\\$configuration\\netstandard2.0\",\n                        \"NRules.Fluent\\bin\\$configuration\\netstandard2.0\",\n                        \"NRules.RuleModel\\bin\\$configuration\\netstandard2.0\",\n                        \"NRules.Json\\bin\\$configuration\\netstandard2.0\",\n                        \"NRules.Testing\\bin\\$configuration\\netstandard2.0\"\n                    )\n                }\n                'netstandard2.1' = @{\n                    include = @(\n                        \"NRules\\bin\\$configuration\\netstandard2.1\",\n                        \"NRules.Fluent\\bin\\$configuration\\netstandard2.1\",\n                        \"NRules.RuleModel\\bin\\$configuration\\netstandard2.1\",\n                        \"NRules.Json\\bin\\$configuration\\netstandard2.1\",\n                        \"NRules.Testing\\bin\\$configuration\\netstandard2.1\"\n                    )\n                }\n            }\n            nuget = @(\n                'NRules.RuleModel',\n                'NRules.Fluent',\n                'NRules.Runtime',\n                'NRules',\n                'NRules.Json',\n                'NRules.Testing'\n            )\n        }\n    };\n    'NRules.Debugger.Visualizer' = @{\n        name = 'NRules.Debugger.Visualizer'\n        os = @('windows')\n        solution_file = 'src\\NRules.Debugger.Visualizer\\NRules.Debugger.Visualizer.sln'\n        package = @{\n            bin = @{\n                artifacts = @('debugger-side', 'debuggee-side-netstandard2.0')\n                'debugger-side' = @{\n                    include = @(\n                        \"NRules.Debugger.Visualizer\\bin\\$configuration\\net472\\NRules.Debugger.Visualizer.dll\"\n                    )\n                    output = \".\"\n                }\n                'debuggee-side-netstandard2.0' = @{\n                    include = @(\n                        \"NRules.Debugger.Visualizer.DebuggeeSide\\bin\\$configuration\\netstandard2.0\\NRules.Debugger.Visualizer.DebuggeeSide.dll\"\n                    )\n                    output = \"netstandard2.0\"\n                }\n            }\n        }\n    };\n    'NRules.Integration.Autofac' = @{\n        name = 'NRules.Integration.Autofac'\n        solution_file = 'src\\NRules.Integration\\NRules.Integration.Autofac\\NRules.Integration.Autofac.sln'\n        package = @{\n            bin = @{\n                artifacts = @('netstandard2.0', 'netstandard2.1')\n                'netstandard2.0' = @{\n                    include = @(\n                        \"NRules.Integration.Autofac\\bin\\$configuration\\netstandard2.0\"\n                    )\n                }\n                'netstandard2.1' = @{\n                    include = @(\n                        \"NRules.Integration.Autofac\\bin\\$configuration\\netstandard2.1\"\n                    )\n                }\n            }\n            nuget = @(\n                'NRules.Integration.Autofac'\n            )\n        }\n    };\n    'NRules.Integration.DependencyInjection' = @{\n        name = 'NRules.Integration.DependencyInjection'\n        solution_file = 'src\\NRules.Integration\\NRules.Integration.DependencyInjection\\NRules.Integration.DependencyInjection.sln'\n        package = @{\n            bin = @{\n                artifacts = @('netstandard2.0', 'netstandard2.1')\n                'netstandard2.0' = @{\n                    include = @(\n                        \"NRules.Integration.DependencyInjection\\bin\\$configuration\\netstandard2.0\"\n                    )\n                }\n                'netstandard2.1' = @{\n                    include = @(\n                        \"NRules.Integration.DependencyInjection\\bin\\$configuration\\netstandard2.1\"\n                    )\n                }\n            }\n            nuget = @(\n                'NRules.Integration.DependencyInjection'\n            )\n        }\n    };\n    'Samples.SimpleRules' = @{\n        name = 'SimpleRules'\n        solution_file = 'samples\\SimpleRules\\SimpleRules.sln'\n    };\n    'Samples.RuleBuilder' = @{\n        name = 'RuleBuilder'\n        solution_file = 'samples\\RuleBuilder\\RuleBuilder.sln'\n    };\n    'Samples.JsonRules' = @{\n        name = 'JsonRules'\n        solution_file = 'samples\\JsonRules\\JsonRules.sln'\n    };\n    'Samples.DependencyInjection' = @{\n        name = 'DependencyInjection'\n        solution_file = 'samples\\DependencyInjection\\DependencyInjection.sln'\n    };\n    'Benchmark' = @{\n        name = 'NRules.Benchmark'\n        solution_file = 'bench\\NRules.Benchmark\\NRules.Benchmark.sln'\n        package = @{\n            bin = @{\n                artifacts = @('net6', 'net8')\n                'net6' = @{\n                    include = @(\n                        \"NRules.Benchmark\\bin\\$configuration\\net6\"\n                    )\n                }\n                'net8' = @{\n                    include = @(\n                        \"NRules.Benchmark\\bin\\$configuration\\net8\"\n                    )\n                }\n            }\n        }\n        bench = @{\n            frameworks = @('net8')\n            runner = 'NRules.Benchmark'\n            categories = @('Micro')\n        }\n    };\n    'Documentation' = @{\n        name = 'Documentation'\n        doc = @{\n            docfx = @{\n                project_file = 'docs\\docfx.json'\n            }\n        }\n        output = @('build\\docs')\n    };\n}\n\n$core = @('NRules')\n$visualizer = @('NRules.Debugger.Visualizer')\n$integration = $components.keys | Where-Object { $_.StartsWith(\"NRules.Integration\") }\n$samples = $components.keys | Where-Object { $_.StartsWith(\"Samples.\") }\n$benchmark = @('Benchmark')\n$documenation = @('Documentation')\n\n$componentList = @()\nif ($component -eq \"Core\") {\n    $componentList += $core\n} elseif ($component -eq \"Visualizer\") {\n    $componentList += $visualizer\n} elseif ($component -eq \"Integration\") {\n    $componentList += $integration\n} elseif ($component -eq \"Samples\") {\n    $componentList += $samples\n} elseif ($component -eq \"All\") {\n    $componentList += $core\n    $componentList += $visualizer\n    $componentList += $integration\n    $componentList += $samples\n    $componentList += $benchmark\n    $componentList += $documenation\n} else {\n    $componentList += $component\n}\n\nImport-Module .\\tools\\build\\psake.psm1\n$baseDir = Resolve-Path .\n$componentList | ForEach-Object {\n    Invoke-psake .\\tools\\build\\psakefile.ps1 $target -properties @{version=$version;configuration=$configuration;baseDir=$baseDir} -parameters @{component=$components[$_]}\n    if (-not $psake.build_success) {\n        break\n    }\n}"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.125,
          "content": "#!/usr/bin/env pwsh\n\nparam (\n    [string]$target = 'Build',\n    [string]$component = 'Core'\n)\n\n& ./build.ps1 $target $component\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.1240234375,
          "content": "<configuration>\n  <packageSources>\n    <add key=\"NRules Local\" value=\"./build/packages\" />\n  </packageSources>\n</configuration>"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}