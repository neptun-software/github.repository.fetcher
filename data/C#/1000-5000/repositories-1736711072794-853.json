{
  "metadata": {
    "timestamp": 1736711072794,
    "page": 853,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Mpdreamz/shellprogressbar",
      "stars": 1460,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.291015625,
          "content": "root=true\n\n[*.cs]\ntrim_trailing_whitespace=true\ninsert_final_newline=true\n\n[*]\nindent_style = tab\nindent_size = 4\n\n[*.cshtml]\nindent_style = tab\nindent_size = 4\n\n[*.{fs,fsx}]\nindent_style = space\nindent_size = 4\n\n[*.{md,markdown,json,js,csproj,fsproj,targets}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.087890625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n.idea\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\n*/build/\n!build\n[Bb]in/\n[Oo]bj/\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n!packages/*/build/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n\nsrc/packages\nbuild/tmp\nbuild/tmp/*\nbuild/_out/*\n!build/keys\n!build/tools/*\n!build/tools/scriptcs/*\n\n.vs\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Martijn Laarman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.7109375,
          "content": "ShellProgressBar\n===================\nvisualize (concurrent) progress in your console application\n\nThis is a great little library to visualize long running command line tasks.\n\n.NET Core ready!\n\nIt also supports spawning child progress bars which allows you to visualize dependencies and concurrency rather nicely.\n\nTested on OSX \n\n![example osx](https://github.com/Mpdreamz/shellprogressbar/raw/master/doc/pbar-osx.gif)\n\nand Windows \n\n![example win cmd](https://github.com/Mpdreamz/shellprogressbar/raw/master/doc/pbar-windows.gif)\n\n(Powershell works too, see example further down)\n\n# Install \n\nGet it on nuget: http://www.nuget.org/packages/ShellProgressBar/\n\n# Usage \n\nUsage is really straightforward\n\n```csharp\nconst int totalTicks = 10;\nvar options = new ProgressBarOptions\n{\n    ProgressCharacter = '─',\n    ProgressBarOnBottom = true\n};\nusing (var pbar = new ProgressBar(totalTicks, \"Initial message\", options))\n{\n    pbar.Tick(); //will advance pbar to 1 out of 10.\n    //we can also advance and update the progressbar text\n    pbar.Tick(\"Step 2 of 10\"); \n}\n```\n\n## Reporting progression\n\nThere are two ways to report progression. You can use the `Tick()` function as described above. Alternatively you can report progression through an [`IProgress<T>`](https://docs.microsoft.com/en-us/dotnet/api/system.iprogress-1) instance that you obtain by calling `AsProgress<T>()` on the progress bar object.\n\nFor a simple case where the progress type is a `float` value between 0.0 and 1.0 that represents the completion percentage, use `progressBar.AsProgress<float>()`:\n\n```csharp\nusing ProgressBar progressBar = new ProgressBar(10000, \"My Progress Message\");\nIProgress progress = progressBar.AsProgress<float>();\nprogress.Report(0.25); // Advances the progress bar to 25%\n```\n\nSee `IntegrationWithIProgressExample.cs` and `IntegrationWithIProgressPercentageExample.cs` in the [src/ShellProgressBar.Example/Examples](src/ShellProgressBar.Example/Examples) directory for full examples.\n\n## Options\n\n### Progress bar position\n\n```csharp\nconst int totalTicks = 10;\nvar options = new ProgressBarOptions\n{\n\tProgressCharacter = '─',\n\tProgressBarOnBottom = true\n};\nusing (var pbar = new ProgressBar(totalTicks, \"progress bar is on the bottom now\", options))\n{\n\tTickToCompletion(pbar, totalTicks, sleep: 500);\n}\n```\n\nBy default the progress bar is at the top and the message at the bottom.\nThis can be flipped around if so desired.\n\n![bar_on_bottom](https://github.com/Mpdreamz/shellprogressbar/raw/master/doc/bar-on-bottom-osx.gif)\n\n### Styling changes\n\n```csharp\nconst int totalTicks = 10;\nvar options = new ProgressBarOptions\n{\n\tForegroundColor = ConsoleColor.Yellow,\n\tForegroundColorDone = ConsoleColor.DarkGreen,\n\tBackgroundColor = ConsoleColor.DarkGray,\n\tBackgroundCharacter = '\\u2593'\n};\nusing (var pbar = new ProgressBar(totalTicks, \"showing off styling\", options))\n{\n\tTickToCompletion(pbar, totalTicks, sleep: 500);\n}\n```\n\nMany aspects can be styled including foreground color, background (inactive portion)\nand changing the color on completion.\n\n![styling](https://github.com/Mpdreamz/shellprogressbar/raw/master/doc/styling-windows.gif)\n\n\n### No real time update\n\nBy default a timer will draw the screen every 500ms. You can configure the progressbar \nto only be drawn when `.Tick()` is called.\n\n```csharp\nconst int totalTicks = 5;\nvar options = new ProgressBarOptions\n{\n\tDisplayTimeInRealTime = false\n};\nusing (var pbar = new ProgressBar(totalTicks, \"only draw progress on tick\", options))\n{\n\tTickToCompletion(pbar, totalTicks, sleep:1750);\n}\n```\n\nIf you look at the time passed you will see it skips `02:00`\n\n\n![update_on_tick](https://github.com/Mpdreamz/shellprogressbar/raw/master/doc/update-on-tick-osx.gif)\n\n### Descendant progressbars\n\nA progressbar can spawn child progress bars and each child can spawn\nits own progressbars. Each child can have its own styling options.\n\nThis is great to visualize concurrent running tasks.\n\n```csharp\nconst int totalTicks = 10;\nvar options = new ProgressBarOptions\n{\n\tForegroundColor = ConsoleColor.Yellow,\n\tBackgroundColor = ConsoleColor.DarkYellow,\n\tProgressCharacter = '─'\n};\nvar childOptions = new ProgressBarOptions\n{\n\tForegroundColor = ConsoleColor.Green,\n\tBackgroundColor = ConsoleColor.DarkGreen,\n\tProgressCharacter = '─'\n};\nusing (var pbar = new ProgressBar(totalTicks, \"main progressbar\", options))\n{\n\tTickToCompletion(pbar, totalTicks, sleep: 10, childAction: () =>\n\t{\n\t\tusing (var child = pbar.Spawn(totalTicks, \"child actions\", childOptions))\n\t\t{\n\t\t\tTickToCompletion(child, totalTicks, sleep: 100);\n\t\t}\n\t});\n}\n```\n\n![children](https://github.com/Mpdreamz/shellprogressbar/raw/master/doc/children-osx.gif)\n\nBy default children will collapse when done, making room for new/concurrent progressbars.\n\nYou can keep them around by specifying `CollapseWhenFinished = false`\n\n```csharp\nvar childOptions = new ProgressBarOptions\n{\n\tForegroundColor = ConsoleColor.Green,\n\tBackgroundColor = ConsoleColor.DarkGreen,\n\tProgressCharacter = '─',\n\tCollapseWhenFinished = false\n};\n```\n\n![children_no_collapse](https://github.com/Mpdreamz/shellprogressbar/raw/master/doc/children-no-collapse-windows.gif)\n\n\n# FixedDurationBar\n\n`ProgressBar` is great for visualizing tasks with an unknown runtime. If you have a task that you know takes a fixed amount of time there is also a `FixedDurationBar` subclass.\n`FixedDurationBar` will `Tick()` automatically but other then that all the options and usage are the same. Except it relies on the real time update feature so disabling that \nwill throw.\n\n`FixedDurationBar` exposes an `IsCompleted` and `CompletedHandle` \n\n\n### Credits \n\nThe initial implementation was inspired by this article.\nhttp://www.bytechaser.com/en/articles/ckcwh8nsyt/display-progress-bar-in-console-application-in-c.aspx\n\nAnd obviously anyone who sends a PR to this repository :+1:\n"
        },
        {
          "name": "build.bat",
          "type": "blob",
          "size": 0.130859375,
          "content": "@ECHO OFF\n\npushd src\n\ndotnet restore\n\nIF \"%~1\"==\"\" ( dotnet build )\nIF NOT \"%~1\"==\"\" ( dotnet pack -c Release /p:Version=%1 )\n\npopd \n\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}