{
  "metadata": {
    "timestamp": 1736710778969,
    "page": 247,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "waf/CSharpRepl",
      "stars": 2988,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.67578125,
          "content": "ï»¿[*.cs]\n\nindent_style=space\nend_of_line=crlf\n\n# CS1591: Missing XML comment for publicly visible type or member\ndotnet_diagnostic.CS1591.severity = none\n\n# S3358: Ternary operators should not be nested\ndotnet_diagnostic.S3358.severity = none\n\ncsharp_style_namespace_declarations=file_scoped:warning\n\n# CA1068: CancellationToken parameters must come last\ndotnet_diagnostic.CA1068.severity = warning\n\n# CA2250: Use ThrowIfCancellationRequested\ndotnet_diagnostic.CA2250.severity = warning\n\n# CA2016: Forward the CancellationToken parameter to methods that take one\ndotnet_diagnostic.CA2016.severity = warning\n\n# IDE0040: Add accessibility modifiers\ndotnet_diagnostic.IDE0040.severity = warning"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.326171875,
          "content": "# We'll let Git's auto-detection algorithm infer if a file is text. If it is,\n# enforce CRLF line endings regardless of OS or git configurations.\n* text=auto eol=crlf\n\n# Isolate binary files in case the auto-detection algorithm fails and\n# marks them as text files (which could brick them).\n*.{png,jpg,jpeg,gif,webp,woff,woff2} binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.1728515625,
          "content": "### VisualStudio ###\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Ww][Ii][Nn]32/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*[.json, .xml, .info]\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n\n# Fody - auto-generated XML schema\nFodyWeavers.xsd\n\n# End of https://www.toptal.com/developers/gitignore/api/visualstudio\n\n!/CSharpRepl.Services/lib/*.pdb\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 5.26171875,
          "content": "# Architecture\n\nThis document describes the design of csharprepl at a high level. It's useful if you want to contribute to csharprepl and are trying to understand how the code is organized and what the various responsibilities are.\n\nBroadly, there are three main components to csharprepl's architecture:\n\n1. [Roslyn libraries](https://github.com/dotnet/roslyn) - Written by Microsoft, these provide both high-level and low-level APIs for building, running, and analyzing C# code.\n1. [PrettyPrompt library](https://github.com/waf/PrettyPrompt) - the PrettyPrompt library was written alongside csharprepl, and is packaged as a separate nuget package and repository. It's a Console.ReadLine replacement, and handles terminal features like accepting input, drawing autocompletion menus, syntax highlighting, keybindings, etc, and generally handles the \"user experience\" of the prompt. It's a general library, and does not know anything about C#; it instead provides callbacks that csharprepl implements to add C#-specific behavior.\n1. csharprepl (this repository) - This application uses PrettyPrompt to collect input from the user, invokes the Roslyn APIs on that input, and then prints the result.\n\nEach of the above parts is described in more detail below.\n\n## Roslyn libraries\n\ncsharprepl uses two main areas of the Roslyn libraries:\n\n- C# Scripting API ([docs](https://github.com/dotnet/roslyn/blob/b796152aff3a7f872bd70db26cc9f568bbdb14cc/docs/wiki/Scripting-API-Samples.md))\n- C# Workspaces API ([docs](https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/work-with-workspace))\n\nThe C# Scripting API allows for evaluating strings containing C# and returns the result. This is the core of the REPL experience; this core is quite simple, and a basic REPL could be implemented in a couple of lines of C# using this API. In csharprepl, this is in `ScriptRunner.cs`.\n\nThe C# Workspaces API provides all the ancillary editor features in csharprepl, like syntax highlighting, autocompletion, documentation tooltip information, etc. A workspace is conceptually similar to a Visual Studio solution, and it has multiple projects all contained in memory. Each line of a REPL is implemented as a single project with a single document, and each project has a reference to the previously submitted project. In other words, the workspace is a linked-list of projects, where each project is a line of the REPL. Submitting a new line in csharprepl will create a new project and document. Features like syntax highlighting and autocompletion read this document as their input.\n\nThese two APIs are quite separate; one of the main tasks of csharprepl is to ensure that when code is evaluated in the REPL, both of these APIs receive consistent information (see `RoslynServices.cs`).\n\n## PrettyPrompt library\n\nThis prompt library is initialized/called in the main `Program.cs`, in the \"Read\" part of the \"Read-Eval-Print-Loop.\" It's instantiated with callback functions to handle syntax highlighting, autocompletion, and more; these callbacks invoke the above `RoslynServices.cs` class to fulfill the callbacks. The `PromptAdapter` class maps between Roslyn concepts (e.g. a span of text with the syntax classification) and the PrettyPrompt concepts (e.g. a span of text with a syntax highlight color).\n\n## csharprepl\n\nAs previously described, csharprepl serves as an intermediary between the above two libraries. There are four main tasks that csharprepl performs:\n\n- `Program.cs` handles basic features like command line arguments, help documentation, and the core read-eval-print-loop.\n- Initialization logic is managed in `RoslynServices.cs`. The Roslyn libraries do a lot of heavy lifting and are relatively slow to initialize; RoslynServices serves as an entry point to all Roslyn services, and it manages this initialization in the background to keep csharprepl snappy. It ensures that when the Roslyn services are called, they either don't block, or they wait for initialization to complete if required.\n    - You can see this in action by starting csharprepl and typing some C# code really quickly before initialization can fully complete. You'll be able to type without delay as it won't block, but you might see syntax highlighting kick in a few seconds later, after initialization is complete; this is what RoslynServices is managing.\n- Synchronization between the C# Scripting API and C# Workspaces API, as described in *Roslyn libraries* above, is also managed by `RoslynServices.cs`. Upon successful evaluation of a script, it updates the workspaces API with a new project and updates the active document to use for syntax highlighting, autocompletion, and more.\n- Assembly reference management - Management of [Shared Frameworks](https://natemcmaster.com/blog/2017/12/21/netcore-primitives/), [implementation vs reference assemblies](https://docs.microsoft.com/en-us/dotnet/standard/assembly/reference-assemblies), and adding references dynamically are handled in the `AssemblyReferenceService.cs`. This class is called by our MetadataReferenceResolver implementation, which is an extension point provided by Roslyn.\n    - This MetadataReferenceResolver is responsible for evaluating `#r` statements, and delegates for assembly references, nuget package installation, csproj/sln references, and shared framework loading. The implementation is in `CompositeMetadataReferenceResolver.cs`\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.46484375,
          "content": "## Release 0.6.7\n\n- Add exception type name in error output panel ([#339](https://github.com/waf/CSharpRepl/pull/339)).\n- Improved and colorized help output ([#338](https://github.com/waf/CSharpRepl/pull/338)).\n- Fix navigate-to-source for generic types ([#342](https://github.com/waf/CSharpRepl/pull/342)).\n- Handle exceptions from roslyn completion API ([#334](https://github.com/waf/CSharpRepl/pull/334)).\n- Dependency upgrades ([#330](https://github.com/waf/CSharpRepl/pull/330), [#333](https://github.com/waf/CSharpRepl/pull/333), and [#349](https://github.com/waf/CSharpRepl/pull/349)).\n\n## Release 0.6.6\n\n- Upgrade to .NET 8\n- Add a new `--culture` command line flag for launching CSharpRepl with a specific culture\n- Improved pretty printing of generic types defined inside the CSharpRepl\n- Dependency upgrades\n\n## Release 0.6.5\n\n- Upgrade PrettyPrompt library to get the following fixes:\n    - Handle invalid history entries / history log corruption ([#267](https://github.com/waf/PrettyPrompt/pull/267)).\n\n## Release 0.6.4\n\n- Make help command show dynamic keybindings ([#289](https://github.com/waf/CSharpRepl/pull/289))\n- Fix annoying completion commit triggers for dynamic variables and C# Range syntax ([#290](https://github.com/waf/CSharpRepl/pull/290))\n- Minor NuGet upgrades and code cleanup ([#285](https://github.com/waf/CSharpRepl/pull/285) and [#291](https://github.com/waf/CSharpRepl/pull/291))\n- Upgrade PrettyPrompt library to get the following fixes:\n    - Better error messages on Linux when xsel is not installed ([#264](https://github.com/waf/PrettyPrompt/pull/264)).\n    - Fix crash when Shift-Delete is pressed under certain conditions ([#263](https://github.com/waf/PrettyPrompt/pull/263)).\n    - Add workaround for garbled utf-8 characters on Linux ([#261](https://github.com/waf/PrettyPrompt/pull/261)).\n\n## Release 0.6.3\n\n- If msbuild cannot be located, still allow basic REPL usage.\n- Nuget installation - Handle multiple nuspecs that differ only by case.\n\n## Release 0.6.2\n\n- Fix handling of AltGr characters (e.g. typing `{` on AZERTY keyboards)\n- Dependency updates and nullable reference warning cleanup\n- Improve help text on smaller terminal widths\n\n## Release 0.6.1\n\n- Nuget package upgrade of underlying PrettyPrompt library\n\n## Release 0.6.0\n\n- Much improved output formatting. Supports a much more graphical dump of a wide range of objects, as well as syntax highlighting. Uses the excellent Spectre.Console library.\n- Better exception formatting, featuring both a compact default format and a syntax highlighted verbose format.\n- OpenAI autocompletions (requires an API key, which is pay-as-you-go)\n- Intellisense support when files are executed via `#load`\n- Better error message when .NET is installed to non-standard location but DOTNET_ROOT is not set\n- Bugfix for nuget loading issue when referencing csproj and sln files\n- Bugfix for nuget package installation when the package has implicit minor/patch versions\n- Fix crash in the disassembler feature\n- Fix crash in item completion logic (e.g. in `System.Threading.Mutex(`)\n\n## Release 0.5.1\n\n- Update Nuget package libraries to work on .NET 7\n- Ensure the .NET 7 version of nuget libraries are installed if they're available, rather than e.g. falling back to .NET Standard\n\n## Release 0.5.0\n\n- Targets .NET 7\n- Syntax highlighting and formatting for output\n- Default to allowing C# Preview features\n- Support referencing projects that target multiple frameworks\n- Intelligent handling of the display of null literals vs code that returns void\n- Update of PrettyPrompt library to fix crash related to completion pane sizing\n\n## Release 0.4.0\n\n- Visual Studio dark theme as default\n- Many improvements around autocompletion menu usability\n- New menu for navigating overloads menu\n- Add configuration file and --configure command line switch\n- Smart indentation for multiline statements\n- Auto formatting of input\n- When showing IL code, use more targeted disassembly output for simple statements\n- Bugfixes for assembly, framework, and CSX loading\n- Configurable keybindings\n- Support loading of prerelease nuget packages and nuspec file fixes\n- UTF-8 mode with autocompletion menu glyphs for differentiating between methods, types, properties, events, and delegates\n- Reference all projects when a solution is referenced\n- Formatted / colored help output\n- Nuget dependency updates\n\n## Release 0.3.5\n\n- .NET 6 and C# 10 support\n- Exit when user presses ctrl-d\n- If the user presses ctrl-c when there's a long running (or infinite!) evaluation, exit the application. This allows a way of interrupting infinite or slow processes.\n- Roslyn library upgrade\n- Bugfix for NuGet packages that don't specify any dependency groups (for target frameworks)\n\n## Release 0.3.4\n\n- Add a --trace command line option for generating trace logs of CSharpRepl internals\n- Support loading shared frameworks from the ~/.nuget directory.\n\n## Release 0.3.3\n\n- Now featuring dotnet-suggest support! If you've set up dotnet-suggest, you'll get excellent tab completion of command line parameters.\n    - [How to set up dotnet-suggest](https://github.com/dotnet/command-line-api/blob/main/docs/dotnet-suggest.md)\n    - [My blog post with more info on this feature](https://fuqua.io/blog/2021/09/enabling-command-line-completions-with-dotnet-suggest/)\n\n## Release 0.3.2\n\nFeatures:\n\n- Press F12 to navigate to the source of a class/method/property. It uses source link to open the source in the browser.\n- Press F9 to view IL code of a statement in Debug mode. Ctrl+F9 shows the IL when the code is compiled in Release mode.\n\n## Release 0.3.1\n\nFeatures:\n\n- Fix sln/csproj building on non-windows platforms\n- Enable roll-forward behavior to support cases where .NET 5 is not\ninstalled (and .NET 6 preview is).\n\n## Release 0.3.0\n\nminor bugfix release\n\n- Support Ctrl+Function keys on WSL2 / Windows Terminal\n- Fix case where caching was too aggressive, and causing intellisense to\n  not pick up new types that were imported (via a using statement) on\n  the previous line\n\n## Release 0.2.9\n\nContains PrettyPrompt library upgrade, to get a bug fix. This fixes a bug where the intellisense menu was auto-closed too aggressively.\n\n## Release 0.2.8\n\n- text selection with cut/copy/paste support\n- undo/redo\n- pressing \"Up\" to navigate history will filter history based on text in the prompt\n\n## Release 0.2.7\n\n- add `clear` command for clearing the screen (thanks @aixasz!)\n- add IList<string> Args and Print command. This increases compatibility with other REPL's csx implementations\n- improve in-application help text\n\n## Release 0.2.6 and 0.2.5\n\n- Bugfix releases for intellisense\n\n## Release 0.2.4\n\n- Support referencing csproj and sln files via `#r` statements and the `--reference` command line options.\n- Add global `args` variable that represents command line arguments provided to csharprepl after a double hyphen (--)\nBetter document new features, add ARCHITECTURE.md\n\n## Release 0.2.3\n\n- Better full-width character support (mainly for CJK character support)\n- Allow for relative paths in #r statements\n- Add ctrl+enter behavior for strings; it shows the string unescaped (by\n  default, strings are shown escaped).\n\n## Release 0.2.2\n\n- Improve help text (thanks @IBIT-ZEE)\n- Support .NET 6 preview versions (thanks @PathogenDavid)\n\n## Release 0.2.1\n\n- Fix crash on certain inputs that cause cache key conflicts - thanks @IBIT-ZEE\n- Pull in latest PrettyPrompt dependency, to get history deduplication - thanks @realivanjx\n- Fix nuget package \"Project Site\" and \"Source repository\" URLs - thanks @zahirtezcan-bugs\n\n## Release 0.2\n\nFirst public release of CSharpRepl!\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6279296875,
          "content": "# Contributing\n\nIf you'd like to help out, thanks! We use Visual Studio 2022 for development, though any standard .NET 5 development environment should work. Please read through these guidelines to get started:\n\n- Read through the ARCHITECTURE.md file to understand how csharprepl works. Depending on what you want to do, changes to the underlying PrettyPrompt library may be required.\n- For new features, please open an issue first to discuss and design the feature. This will help reduce the chance of conflicting designs.\n- Please include an xunit test, and ensure any code warnings and nullability issues are resolved.\n\nThanks!\n\n## CSharpRepl Contributors\n\nThanks to everyone who contributes! The following contributors have helped out with CSharpRepl:\n\n- Hubert Kindermann ([kindermannhubert](https://github.com/kindermannhubert))\n- [IBIT-ZEE](https://github.com/IBIT-ZEE)\n- Nattapong Nunpan ([aixasz](https://github.com/aixasz))\n- Ivan Kara ([realivanjx](https://github.com/realivanjx))\n- JosÃ© Javier RodrÃ­guez Zas (JJ) ([jjavierdguezas](https://github.com/jjavierdguezas))\n- Marlon Regenhardt ([Regenhardt](https://github.com/Regenhardt))\n- Luiz-Ossinho ([Luiz-Ossinho](https://github.com/Luiz-Ossinho))\n- Vinod Pal ([VNDPAL](https://github.com/VNDPAL))\n- Rasim Keita ([Keyros](https://github.com/Keyros))\n- Atif Aziz ([atifaziz](https://github.com/atifaziz))\n- [lonix1](https://github.com/lonix1)\n- Weihan Li ([WeihanLi](https://github.com/WeihanLi))\n\n## PrettyPrompt Contributors\n\nCSharpRepl heavily relies on the PrettyPrompt library, so make sure to check out the [contributors](https://github.com/waf/PrettyPrompt/blob/main/CONTRIBUTORS.md) there, too!\n"
        },
        {
          "name": "CSharpRepl.Services",
          "type": "tree",
          "content": null
        },
        {
          "name": "CSharpRepl.Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "CSharpRepl.sln",
          "type": "blob",
          "size": 2.8017578125,
          "content": "ï»¿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.0.31410.414\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpRepl\", \"CSharpRepl\\CSharpRepl.csproj\", \"{DAF35EEA-275E-4BF1-A7F0-5D2DF32FC0A5}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpRepl.Services\", \"CSharpRepl.Services\\CSharpRepl.Services.csproj\", \"{CF37FCD2-EF71-48F8-AE06-8A07D328F24A}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{000D6020-F5D7-4CC9-A539-36914452C63B}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\tARCHITECTURE.md = ARCHITECTURE.md\n\t\tnuget.config = nuget.config\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"CSharpRepl.Tests\", \"CSharpRepl.Tests\\CSharpRepl.Tests.csproj\", \"{35584632-2D73-4767-B2C0-7DB1ABB2812E}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \".github\", \".github\", \"{00E474D3-ACA6-4210-8E9B-AD94ED920647}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.github\\workflows\\main.yml = .github\\workflows\\main.yml\n\t\t.github\\workflows\\release.yml = .github\\workflows\\release.yml\n\tEndProjectSection\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{DAF35EEA-275E-4BF1-A7F0-5D2DF32FC0A5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{DAF35EEA-275E-4BF1-A7F0-5D2DF32FC0A5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{DAF35EEA-275E-4BF1-A7F0-5D2DF32FC0A5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{DAF35EEA-275E-4BF1-A7F0-5D2DF32FC0A5}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{CF37FCD2-EF71-48F8-AE06-8A07D328F24A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{CF37FCD2-EF71-48F8-AE06-8A07D328F24A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{CF37FCD2-EF71-48F8-AE06-8A07D328F24A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{CF37FCD2-EF71-48F8-AE06-8A07D328F24A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{35584632-2D73-4767-B2C0-7DB1ABB2812E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{35584632-2D73-4767-B2C0-7DB1ABB2812E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{35584632-2D73-4767-B2C0-7DB1ABB2812E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{35584632-2D73-4767-B2C0-7DB1ABB2812E}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{00E474D3-ACA6-4210-8E9B-AD94ED920647} = {000D6020-F5D7-4CC9-A539-36914452C63B}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {82099E13-9449-4737-8EAE-1188CE33BC09}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "CSharpRepl.sln.licenseheader",
          "type": "blob",
          "size": 0.216796875,
          "content": "ï»¿extensions: .cs\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at https://mozilla.org/MPL/2.0/.\n"
        },
        {
          "name": "CSharpRepl",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 16.3330078125,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.3427734375,
          "content": "# C# REPL <a href=\"https://www.nuget.org/packages/CSharpRepl\" align=\"right\"><img alt=\"NuGet Version\" src=\"https://img.shields.io/nuget/v/CSharpRepl?color=004880&style=for-the-badge\" align=\"right\" /></a>\n\nA cross-platform command line <a href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" target=\"_blank\"><abbr title=\"Read Eval Print Loop\">REPL</abbr></a> for the rapid experimentation and exploration of C#. It supports intellisense, installing NuGet packages, and referencing local .NET projects and assemblies.\n\n<div align=\"center\">\n  <a href=\"https://raw.githubusercontent.com/waf/CSharpRepl/main/.github/readme_assets/csharprepl.mp4\">\n    <img src=\"https://raw.githubusercontent.com/waf/CSharpRepl/main/.github/readme_assets/csharprepl.png\" alt=\"C# REPL screenshot\" style=\"max-width:80%;\">\n  </a>\n  <p align=\"center\"><i>(click to view animation)</i></p>\n</div>\n\nC# REPL provides the following features:\n\n- Syntax highlighting via ANSI escape sequences\n- Intellisense with documentation and overload navigation\n- Automatic formatting of typed input\n- Nuget package installation\n- Reference local assemblies, solutions, and projects\n- Dump and explore objects with syntax highlighting and rich Spectre.Console formatting\n- OpenAI integration (bring your own API key)\n- Navigate to source via Source Link\n- IL disassembly (both Debug and Release mode)\n- Fast and flicker-free rendering. A \"diff\" algorithm is used to only render what's changed.\n\n## Installation\n\nC# REPL is a .NET 9 global tool, and runs on Windows, Mac OS, and Linux. It can be installed [from NuGet](https://www.nuget.org/packages/CSharpRepl) via:\n\n```console\ndotnet tool install -g csharprepl\n```\n\nIf you're running on Mac OS Catalina (10.15) or later, make sure you follow any additional directions printed to the screen. You may need to update your PATH variable in order to use .NET global tools.\n\nAfter installation is complete, run `csharprepl` to begin. C# REPL can be updated via `dotnet tool update -g csharprepl`.\n\n## Themes and Colors\n\nThe default theme uses the same colors as Visual Studio dark mode, and custom themes can be created using a [`theme.json`](https://github.com/waf/CSharpRepl/blob/main/CSharpRepl/themes/dracula.json) file. Additionally, your terminal's colors can be used by supplying the `--useTerminalPaletteTheme` command line option. To completely disable colors, set the NO_COLOR environment variable.\n\n## Usage\n\nType some C# into the prompt and press <kbd>Enter</kbd> to run it. The result, if any, will be printed:\n\n```csharp\n> Console.WriteLine(\"Hello World\")\nHello World\n\n> DateTime.Now.AddDays(8)\n[6/7/2021 5:13:00 PM]\n```\n\nTo evaluate multiple lines of code, use <kbd>Shift+Enter</kbd> to insert a newline:\n\n```csharp\n> var x = 5;\n  var y = 8;\n  x * y\n40\n```\n\nAdditionally, if the statement is not a \"complete statement\" a newline will automatically be inserted when <kbd>Enter</kbd> is pressed. For example, in the below code, the first line is not a syntactically complete statement, so when we press enter we'll go down to a new line:\n\n```csharp\n> if (x == 5)\n  | // caret position, after we press Enter on Line 1\n```\n\nFinally, pressing <kbd>Ctrl+Enter</kbd> will show a \"detailed view\" of the result. For example, for the `DateTime.Now` expression below, on the first line we pressed <kbd>Enter</kbd>, and on the second line we pressed <kbd>Ctrl+Enter</kbd> to view more detailed output:\n\n```csharp\n> DateTime.Now // Pressing Enter shows a reasonable representation\n[5/30/2021 5:13:00 PM]\n\n> DateTime.Now // Pressing Ctrl+Enter shows a detailed representation\n[5/30/2021 5:13:00 PM] {\n  Date: [5/30/2021 12:00:00 AM],\n  Day: 30,\n  DayOfWeek: Sunday,\n  DayOfYear: 150,\n  Hour: 17,\n  InternalKind: 9223372036854775808,\n  InternalTicks: 637579915804530992,\n  Kind: Local,\n  Millisecond: 453,\n  Minute: 13,\n  Month: 5,\n  Second: 0,\n  Ticks: 637579915804530992,\n  TimeOfDay: [17:13:00.4530992],\n  Year: 2021,\n  _dateData: 9860951952659306800\n}\n```\n\n**A note on semicolons**: C# expressions do not require semicolons, but [statements](https://stackoverflow.com/questions/19132/expression-versus-statement) do. If a statement is missing a required semicolon, a newline will be added instead of trying to run the syntatically incomplete statement; simply type the semicolon to complete the statement.\n\n```csharp\n> var now = DateTime.Now; // assignment statement, semicolon required\n\n> DateTime.Now.AddDays(8) // expression, we don't need a semicolon\n[6/7/2021 5:03:05 PM]\n```\n\nWhen you're done with your session, you can type `exit` or press <kbd>Ctrl+D</kbd> to exit.\n\n## Adding References\n\nUse the `#r` command to add assembly or nuget references.\n\n- For assembly references, run `#r \"AssemblyName\"` or `#r \"path/to/assembly.dll\"`\n- For project references, run `#r \"path/to/project.csproj\"`. Solution files (.sln) can also be referenced.\n- For nuget references, run `#r \"nuget: PackageName\"` to install the latest version of a package, or `#r \"nuget: PackageName, 13.0.5\"` to install a specific version (13.0.5 in this case).\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/waf/CSharpRepl/main/.github/readme_assets/nuget.png\" alt=\"Installing nuget packages\" style=\"max-width:80%;\">\n</p>\n\nTo run ASP.NET applications inside the REPL, start the `csharprepl ` application with the `--framework` parameter, specifying the `Microsoft.AspNetCore.App` shared framework. Then, use the above `#r` command to reference the application DLL. See [Configuring CSharpRepl](https://github.com/waf/CSharpRepl/wiki/Configuring-CSharpRepl) for more details.\n\n```console\ncsharprepl --framework  Microsoft.AspNetCore.App\n```\n\n## Keyboard Shortcuts\n\nCSharpRepl aims for a similar editing experience as Visual Studio (e.g. for text navigation, selection and keyboard shortcuts).\n\n- **Basic Usage**\n  - <kbd>Ctrl+C</kbd> - Cancel current line\n  - <kbd>Ctrl+D</kbd> or type `exit` - Exit the REPL\n  - <kbd>Ctrl+L</kbd> - Clear screen\n  - <kbd>Enter</kbd> - Evaluate the current line if it's a syntactically complete statement; otherwise add a newline\n  - <kbd>Control+Enter</kbd> - Evaluate the current line, and return a more detailed representation of the result\n  - <kbd>Shift+Enter</kbd> - Insert a new line (this does not currently work on Linux or Mac OS; Hopefully this will work in .NET 7)\n  - <kbd>Ctrl+Shift+C</kbd> - Copy current line to clipboard\n  - <kbd>Ctrl+V</kbd>, <kbd>Shift+Insert</kbd>, and <kbd>Ctrl+Shift+V</kbd> - Paste text to prompt. Automatically trims leading indent\n- **Code Actions**\n  - <kbd>F1</kbd> - Opens the MSDN documentation for the class/method under the caret ([example](https://docs.microsoft.com/en-US/dotnet/api/System.DateTime.AddDays?view=net-5.0))\n  - <kbd>F9</kbd> - Shows the IL (intermediate language) for the current statement in Debug mode. \n  - <kbd>Ctrl+F9</kbd> - Shows the IL for the current statement with Release mode optimizations.\n  - <kbd>F12</kbd> - Opens the source code in the browser for the class/method under the caret, if the assembly supports [Source Link](https://github.com/dotnet/sourcelink).\n- **Autocompletion**\n  - <kbd>Ctrl+Space</kbd> - Open the autocomplete menu.\n  - <kbd>Enter</kbd>, <kbd>Tab</kbd> - Select the active autocompletion option\n  - <kbd>Escape</kbd> - Closes the autocomplete menu\n\n## Command Line Configuration\n\nThe C# REPL supports both command line options as well as a configuration file. See the [Configuring CSharpRepl](https://github.com/waf/CSharpRepl/wiki/Configuring-CSharpRepl) wiki page for more information.\n\nRun `csharprepl --help` to see the available command line configuration options, and run `csharprepl --configure` to get started with the configuration file.\n\nIf you have [`dotnet-suggest`](https://github.com/dotnet/command-line-api/blob/main/docs/dotnet-suggest.md) enabled, all options can be tab-completed, including values provided to `--framework` and .NET namespaces provided to `--using`.\n\n## Integrating with other software\n\nC# REPL is a standalone software application, but it can be useful to integrate it with other developer tools:\n\n### Windows Terminal\n\nTo add C# REPL as a menu entry in Windows Terminal, add the following profile to Windows Terminal's `settings.json` configuration file (under the JSON property `profiles.list`):\n\n```json\n{\n    \"name\": \"C# REPL\",\n    \"commandline\": \"csharprepl\"\n},\n```\n\nTo get the exact colors shown in the screenshots in this README, install the [Windows Terminal Dracula theme](https://github.com/dracula/windows-terminal).\n\n### Visual Studio Code\n\nTo use the C# REPL with Visual Studio Code, simply run the `csharprepl` command in the Visual Studio Code terminal. To send commands to the REPL, use the built-in `Terminal: Run Selected Text In Active Terminal` command from the Command Palette (`workbench.action.terminal.runSelectedText`).\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/waf/CSharpRepl/main/.github/readme_assets/vscode.png\" alt=\"Visual Studio Code screenshot\" style=\"max-width:90%;\">\n</p>\n\n\n### Windows OS\n\nTo add the C# REPL to the Windows Start Menu for quick access, you can run the following PowerShell command, which will start C# REPL in Windows Terminal:\n\n```powershell\n$shell = New-Object -ComObject WScript.Shell\n$shortcut = $shell.CreateShortcut(\"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\csharprepl.lnk\")\n$shortcut.TargetPath = \"wt.exe\"\n$shortcut.Arguments = \"-w 0 nt csharprepl.exe\"\n$shortcut.Save()\n```\n\nYou may also wish to add a shorter alias for C# REPL, which can be done by creating a `.cmd` file somewhere on your path. For example, put the following contents in `C:\\Users\\username\\.dotnet\\tools\\csr.cmd`:\n\n```shell\nwt -w 0 nt csharprepl\n```\n\nThis will allow you to launch C# REPL by running `csr` from anywhere that accepts Windows commands, like the Window Run dialog.\n\n### Linux terminal)\n\nYou may wish to add a shorter alias for C# REPL, which can be done by adding the following to your `~/.bashrc`:\n\n```shell\nalias cs=csharprepl\n```\n\n## Comparison with other REPLs\n\nThis project is far from being the first REPL for C#. Here are some other projects; if this project doesn't suit you, another one might!\n\n**Visual Studio's C# Interactive pane** is full-featured (it has syntax highlighting and intellisense) and is part of Visual Studio. This deep integration with Visual Studio is both a benefit from a workflow perspective, and a drawback as it's not cross-platform. The C# Interactive pane supports navigating to source code (default F12), which will open that source in the containing Visual Studio window, yet no NuGet packages. It starts in .NET Framework mode but also supports .NET Core via `#reset core`. Subjectively, it does not follow typical command line keybindings, so can feel a bit foreign.\n\n**csi.exe** ships with C# and is a command line REPL. It's great because it's a cross platform REPL that comes out of the box, but it doesn't support syntax highlighting, autocompletion, or .NET Core.\n\n**[dotnet script](https://github.com/dotnet-script/dotnet-script)** allows you to run C# scripts from the command line. It has a REPL built-in, but the predominant focus seems to be as a script runner. It's a great tool, though, and has a strong community following.\n\n**[dotnet interactive](https://github.com/dotnet/interactive)** is a tool from Microsoft that creates a Jupyter notebook for C#, runnable through Visual Studio Code. It also provides a general framework useful for running REPLs.\n\n## Contributing\n\nThanks for the interest! Check out [CONTRIBUTING.md](https://github.com/waf/CSharpRepl/blob/main/CONTRIBUTING.md) for more info.\n"
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.779296875,
          "content": "ï»¿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <!--To inherit the global NuGet package sources remove the <clear/> line below -->\n    <clear />\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\n    <add key=\"dotnet-tools\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\" />\n  </packageSources>\n  <packageSourceMapping>\n    <!-- key value for <packageSource> should match key values from <packageSources> element -->\n    <packageSource key=\"nuget\">\n      <package pattern=\"*\" />\n    </packageSource>\n    <packageSource key=\"dotnet-tools\">\n      <package pattern=\"Microsoft.SymbolStore\" />\n      <package pattern=\"Microsoft.FileFormats\" />\n    </packageSource>\n  </packageSourceMapping>\n</configuration>\n"
        },
        {
          "name": "publish-release.ps1",
          "type": "blob",
          "size": 0.6279296875,
          "content": "$localChanges = git status --short\nif ( $null -ne $localChanges ) {\n    Write-Output \"Uncommitted changes detected, aborting release.\"\n    Exit 1\n}\n\ngit fetch origin\n$remoteChanges = git log HEAD..origin/main --oneline\nif ( $null -ne $remoteChanges ) {\n    Write-Output \"The main branch is out of date, aborting release.\"\n    Exit 2\n}\n\n$csproj = [xml](Get-Content ./CSharpRepl/CSharpRepl.csproj)\n$version = $csproj.Project.PropertyGroup.Version\n\nWrite-Output \"Reminder: Did you update the CHANGELOG.md?\"\nWrite-Output \"Press Enter to create tag \"\"v$version\"\" and publish to nuget.org\"\nRead-Host\n\ngit tag \"v$version\"\ngit push origin \"v$version\"\n"
        }
      ]
    }
  ]
}