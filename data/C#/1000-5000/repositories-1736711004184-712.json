{
  "metadata": {
    "timestamp": 1736711004184,
    "page": 712,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chocolatey/ChocolateyGUI",
      "stars": 1674,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 2.5029296875,
          "content": "# EditorConfig is awesome:\nhttp://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Don't use tabs for indentation.\n[*]\nindent_style = space\n# (Please don't specify an indent_size here; that has too many unintended consequences.)\n\n# Code files\n[*.{cs,csx,vb,vbx}]\nindent_size = 4\nend_of_line = crlf\n\n# Xml project files\n[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]\nindent_size = 2\n\n# Xml config files\n[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]\nindent_size = 2\n\n# Xaml files\n[*.xaml]\nindent_size = 4\nend_of_line = crlf\n\n# JSON files\n[*.json]\nindent_size = 2\n\n# Dotnet code style settings:\n[*.{cs,vb}]\n# Avoid \"this.\" and \"Me.\" if not necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion\n\n# Use language keywords instead of framework type names for type references\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion\n\n# Suggest more modern language features when available\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\n\n# CSharp code style settings:\n[*.cs]\n# Prefer \"var\" everywhere\ncsharp_style_var_for_built_in_types = true:suggestion\ncsharp_style_var_when_type_is_apparent = true:suggestion\ncsharp_style_var_elsewhere = true:suggestion\n\n# Prefer method-like constructs to have a block body\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_operators = false:none\n\n# Prefer property-like constructs to have an expression-body\ncsharp_style_expression_bodied_properties = true:none\ncsharp_style_expression_bodied_indexers = true:none\ncsharp_style_expression_bodied_accessors = true:none\n\n# Suggest more modern language features when available\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion\ndotnet_diagnostic.RS0030.severity = error\ndotnet_diagnostic.RS0031.severity = error\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5048828125,
          "content": "* -text\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.resx text whitespace=-trailing-space\n*.Designer.cs diff=csharp whitespace=-trailing-space\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.3037109375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\nx64/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n**/packages/*\n## TODO: If the tool you use requires repositories.config, also uncomment the next line\n!packages/repositories.config\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n# This line needs to be after the ignore of the build folder (and the packages folder if the line above has been uncommented)\n!packages/build/\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# =========================\n# Custom Additions\n# =========================\n\n# Where everything from the build is put\nBuildArtifacts\n\n# Temporary files that kdiff generates\n*.orig\n\n# Build related\ntools/**\n!tools/packages.config\n!tools/Addins/packages.config\n!tools/Modules/packages.config\nBuildArtifacts/\ncode_drop/\n\\.vs/\n\n# Transifex related\nResources.*.resx\n!Resources.resx\n\n# Wyam Related\nconfig.wyam.dll\nconfig.wyam.hash\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# Auto-generated docs\ndocs/input/tasks\n\n# Vagrant\n.vagrant/\n\n# Mac\n.DS_Store\n\nSolutionInfo.cs\nSolutionVersion.cs\n\nconfig.wyam.packages.xml\n"
        },
        {
          "name": ".markdownlint.json",
          "type": "blob",
          "size": 0.052734375,
          "content": "{\n  \"line-length\": false,\n  \"no-inline-html\": false\n}\n"
        },
        {
          "name": ".notifications",
          "type": "tree",
          "content": null
        },
        {
          "name": ".teamcity",
          "type": "tree",
          "content": null
        },
        {
          "name": ".templates",
          "type": "tree",
          "content": null
        },
        {
          "name": ".tx",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "ABOUT.md",
          "type": "blob",
          "size": 1.5078125,
          "content": "## History\r\n\r\nChocolatey GUI, formerly known as Chocolatey Explorer or Chocolatey PackageManager, was originally created by [Christiaan Baes](https://twitter.com/chrissie1).  For information about the original version, you can see the following blog posts:\r\n\r\n* [All new Chocolatey GUI](http://blogs.lessthandot.com/index.php/SysAdmins/OS/Windows/all-new-chocolateygui/)\r\n* [Making a chocolatey package for Chocolatey GUI](http://blogs.lessthandot.com/index.php/DesktopDev/MSTech/making-a-chocolatey-package/)\r\n* [Chocolatey GUI](http://blogs.lessthandot.com/index.php/DesktopDev/MSTech/chocolatey-gui/)\r\n\r\nIn 2013, Christiaan handed over maintainance of Chocolatey GUI to [Gary Ewan Park](http://www.gep13.co.uk/about/), who later, under the supervision of [Rob Reynolds](https://twitter.com/ferventcoder) (creator of [Chocolatey](https://chocolatey.org/)), brought the application under the main Chocolatey Organisation on [GitHub](https://github.com/chocolatey).\r\n\r\nSince then, with a set of major contributions from [Richard Simpson](https://twitter.com/richardsimp), Chocolatey GUI has changed from a Windows Forms application to a WPF application, with a much richer User Interface.\r\n\r\n## Support\r\n\r\nIf you have any questions, comments, concerns, or problems with Chocolatey GUI, please feel free to get in touch with us.  The best starting place would be our [Community Chat Room](https://ch0.co/community), and from there, you may be directed to raise an issue on our [Issues List](https://github.com/chocolatey/ChocolateyGUI/issues).\r\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.142578125,
          "content": "This file will be updated as part of the Chocolatey GUI build process.\r\n\r\nSee all - https://docs.chocolatey.org/en-us/chocolatey-gui/release-notes"
        },
        {
          "name": "COMMITTERS.md",
          "type": "blob",
          "size": 4.2099609375,
          "content": "Committing\n==========\n\nWe like to see folks contributing to Chocolatey. If you are a committer, we'd like to see you help from time to time with triage and the pull request process.\n\nIn all cases politeness goes a long way. Please thank folks for contributions - they are going out of their way to help make the code base better, or adding something they may personally feel is necessary for the code base.\n\nPlease be VERY familiar with [CONTRIBUTING](https://github.com/chocolatey/choco/blob/master/CONTRIBUTING.md) and follow the process as well.\n\n## Terminology\n\n**contributor** - A person who makes a change to the code base and submits a change set in the form of a pull request.\n\n**change set** - A set of discrete commits which combined together form a contribution.  A change set takes the form of git commits and is submitted in the form of a pull request. Used interchangeably with \"pull request\".\n\n**committer** - A person responsible for reviewing a pull request and then making the decision what base branch to merge the change set into.\n\n## Review Process\n\n#### Receive new PR (pull request)\n\n * A contributor sends a pull request (usually against master).\n * A committer typically reviews it within a week or less to determine the feasibility of the changes.\n\n#### Initial PR Review\n\n * Has the user signed the Contributor License Agreement (CLA)?\n * Did the user create a branch with these changes? If it is on their master, please ask them to review [CONTRIBUTING](https://github.com/chocolatey/choco/blob/master/CONTRIBUTING.md).\n * Did the user reformat files and they should not have? Was is just white-space? You can try adding [?w=1](https://github.com/blog/967-github-secrets) to the URL on GitHub.\n * Are there tests? We really want any new contributions to contain tests so unless the committer believes this code really needs to be in the code base and is willing to write the tests, then we need to ask the contributor to make a good faith effort in adding test cases. Ask them to review the [contributing document](https://github.com/chocolatey/choco/blob/master/CONTRIBUTING.md) and provide tests. **Note:** Some commits may be refactoring which wouldn't necessarily add additional test sets.\n * Is the code documented properly? Does this additional set of changes require changes to the [wiki](https://github.com/chocolatey/chocolatey/wiki)?\n * Was this code warranted? Did the contributor follow the process of gaining approval for big change sets? If not please have them review the [contributing document](https://github.com/chocolatey/choco/blob/master/CONTRIBUTING.md) and ask that they follow up with a case for putting the code into the code base on the mailing list.\n\n#### Review the Code\n  * Does the code meet the naming conventions and formatting (need link)?\n  * Is the code sound? Does it read well? Can you understand what it is doing without having to execute it? Principal of no clever hacks (need link).\n  * Does the code do what the purpose of the pull request is for?\n\n#### Accepting a PR\n\nOnce you have reviewed the initial items, and are not waiting for additional feedback or work by the contributor, give the thumbs up that it is ready for the next part of the process (merging).\n\nUnless there is something wrong with the code, we don't ask contributors to rebase against master. They did the work to create the patch in the first place, asking them to unnecessarily come back and try to keep their code synced up with master is not an acceptable process.\n\n## Merging\n\nOnce you have reviewed the change set and determined it is ready for merge, the next steps are to bring it local and evaluate the code further by actually working with it, running the tests locally and adding any additional commits or fix-ups that are necessary in a local branch.\n\nWhen merging the user's contribution, it should be done with `git merge --log --no-ff` to create a merge commit so that in case there is an issue it becomes easier to revert later, and so that we can see where the code came from should we ever need to go find it later (more information on this can be found [here](https://www.kernel.org/pub/software/scm/git/docs/git-merge.html) and also a discussion on why this is a good idea [here](http://differential.io/blog/best-way-to-merge-a-github-pull-request)).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.1318359375,
          "content": "Contributors\n============\n\nSubmitting an Issue? See the [Submitting Issues](https://github.com/chocolatey/chocolateygui#submitting-issues) section in the README.\n\nThe process for contributions is roughly as follows:\n\n## Prerequisites\n\n * Ensure you have signed the Contributor License Agreement (CLA) - without this we are not able to take contributions that are not trivial.\n  * [Sign the Contributor License Agreement.](https://cla-assistant.io/chocolatey/ChocolateyGUI)\n  * You must do this for each Chocolatey project that requires it.\n  * If you are curious why we would require a CLA, we agree with Julien Ponge - take a look at his [post](https://julien.ponge.org/blog/in-defense-of-contributor-license-agreements/).\n\n## Contributing Process\n\n### Get Buyoff Or Find Open Community Issues/Features\n\n * Through [GitHub discussions](https://github.com/chocolatey/ChocolateyGUI/discussions) you talk about a feature you would like to see (or a bug), and why it should be in Chocolatey GUI.\n * If approved, ensure the accompanying [GitHub issue](https://github.com/chocolatey/ChocolateyGUI/issues) is created with information and a link back to the GitHub discussion.\n * Once you get a nod from one of the [Chocolatey Team](https://github.com/chocolatey?tab=members), you can start on the feature.\n * Alternatively, if a feature is on the issues list with the [community tag](https://github.com/chocolatey/chocolateygui/labels/Community), it is open for a patch. You should comment that you are signing up for it on the issue so someone else doesn't also sign up for the work.\n\n### Set Up Your Environment\n\n * You create, or update, a fork of chocolatey/chocolateygui under your GitHub account.\n * Clone the forked repo to your computer. `git clone https://github.com/your-github/ChocolateyGUI.git`\n * Set the remote upstream. `git remote add upstream https://github.com/chocolatey/ChocolateyGUI.git`\n * From there you create a branch named specific to the feature. `git checkout -b feature-name`\n * In the branch you do work specific to the feature.\n * Please also observe the following:\n    * No reformatting\n    * No changing files that are not specific to the feature\n    * More covered below in the **Prepare Commits** section.\n * Test your changes and please help us out by updating and implementing some automated tests. It is recommended that all contributors spend some time looking over the tests in the source code. You can't go wrong emulating one of the existing tests and then changing it specific to the behavior you are testing.\n * Please do not update your branch from the master unless we ask you to. See the **Respond to Feedback** section below.\n\n### Prepare Commits\n\nThis section serves to help you understand what makes a good commit.\n\nA commit should observe the following:\n\n * A commit is a small logical unit that represents a change.\n * Should include new or changed tests relevant to the changes you are making.\n * No unnecessary whitespace. Check for whitespace with `git diff --check` and `git diff --cached --check` before commit.\n * You can stage parts of a file for commit.\n\nA commit message should observe the following:\n\n  * The first line of the commit message should be a short description around 50 characters in length and be prefixed with the GitHub issue it refers to with parentheses surrounding that. If the GitHub issue is #25, you should have `(#25)` prefixed to the message. NOTE: Previously, the requirement was to use something like (GH-25) in commit messages, however, that approach has been deprecated.\n  * If the commit is about documentation, the message should be prefixed with `(doc)`.\n  * If it is a trivial commit or one of formatting/spaces fixes, it should be prefixed with `(maint)`.\n  * After the subject, skip one line and fill out a body if the subject line is not informative enough.\n  * The body:\n    * Should indent at `72` characters.\n    * Explains more fully the reason(s) for the change and contrasts with previous behavior.\n    * Uses present tense. \"Fix\" versus \"Fixed\".\n\nA good example of a commit message is as follows:\n\n```\n(#7) Installation Adds All Required Folders\n\nPreviously the installation script worked for the older version of\nChocolatey. It does not work similarly for the newer version of choco\ndue to location changes for the newer folders. Update the install\nscript to ensure all folder paths exist.\n\nWithout this change the install script will not fully install the new\nchoco client properly.\n```\n\n### Submit Pull Request (PR)\n\nPrerequisites:\n\n * You are making commits in a feature branch.\n * All specs should be passing.\n\nSubmitting PR:\n\n * Once you feel it is ready, submit the pull request to the `chocolatey/chocolateygui` repository against the ````develop```` branch ([more information on this can be found here](https://help.github.com/articles/creating-a-pull-request)).\n * In the pull request, outline what you did and point to specific conversations (as in URLs) and issues that you are are resolving. This is a tremendous help for us in evaluation and acceptance.\n * Once the pull request is in, please do not delete the branch or close the pull request (unless something is wrong with it).\n * One of the Chocolatey Team members, or one of the committers, will evaluate it within a reasonable time period (which is to say usually within 2-4 weeks). Some things get evaluated faster or fast tracked. We are human and we have active lives outside of open source so don't fret if you haven't seen any activity on your pull request within a month or two. We don't have a Service Level Agreement (SLA) for pull requests. Just know that we will evaluate your pull request.\n\n### Respond to Feedback on Pull Request\n\nWe may have feedback for you to fix or change some things. We generally like to see that pushed against the same topic branch (it will automatically update the Pull Request). You can also fix/squash/rebase commits and push the same topic branch with `--force`. (It's generally acceptable to do this on topic branches not in the main repository. It is generally unacceptable and should be avoided at all costs against the main repository).\n\nIf we have comments or questions when we do evaluate it and receive no response, it will probably lessen the chance of getting accepted. Eventually this means it will be closed if it is not accepted. Please know this doesn't mean we don't value your contribution, just that things go stale. If in the future you want to pick it back up, feel free to address our concerns/questions/feedback and reopen the issue/open a new PR (referencing old one).\n\nSometimes we may need you to rebase your commit against the latest code before we can review it further. If this happens, you can do the following:\n\n * `git fetch upstream` (upstream would be the mainstream repo or `chocolatey/chocolateygui` in this case)\n * `git checkout develop`\n * `git rebase upstream/develop`\n * `git checkout your-branch`\n * `git rebase develop`\n * Fix any merge conflicts\n * `git push origin your-branch` (origin would be your GitHub repo or `your-github-username/chocolateygui` in this case). You may need to `git push origin your-branch --force` to get the commits pushed. This is generally acceptable with topic branches not in the mainstream repository.\n\nThe only reasons a pull request should be closed and resubmitted are as follows:\n\n  * When the pull request is targeting the wrong branch (this doesn't happen as often).\n  * When there are updates made to the original by someone other than the original contributor. Then the old branch is closed with a note on the newer branch this supersedes #github_number.\n\n### Testing\n\nThere are some barebones Pester tests used to test the very basic functionalities of `chocolateyguicli`. These require Pester version 5.3.1 or newer. They can be launched by running `Invoke-Pester` within the `Tests` directory of the repository.\n\nIt is **not currently** expected that these Pester tests are run before submitting a PR. Their purpose at the moment is to establish a base to build upon.\n\n### Debugging with Chocolatey library information\n\nIn order to debug Chocolatey GUI, you need Chocolatey.Lib referenced in the project to match the Chocolatey version installed locally on your system. The easiest way to do this is to run `./Update-DebugConfiguration.ps1` from the root of the repository.\n\n> :warning: **NOTE**\n>\n> You will need to have `nuget.commandline` installed for this script to work.\n>\n> You will also want to **not** commit the changes this script makes to the `.csproj` and `packages.config` files. As such, if you're making changes that would modify any of these files, it is recommended to make those changes, commit, then run the `./Update-DebugConfiguration.ps1` script.\n\n## Other General Information\n\nIf you reformat code or hit core functionality without an approval from a person on the Chocolatey Team, it's likely that no matter how awesome it looks afterwards, it will probably not get accepted. Reformatting code makes it harder for us to evaluate exactly what was changed.\n\nIf you follow the guidelines we have above it will make evaluation and acceptance easy. If you stray from them it doesn't mean we are going to ignore your pull request, but it will make things harder for us. Harder for us roughly translates to a longer SLA for your pull request.\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 3.8291015625,
          "content": "Chocolatey GUI has been the thoughts and work of the following people:\r\n\r\n## Committers\r\n\r\nThese are the committers to Chocolatey/Chocolatey GUI repository:\r\n\r\n* [Gary Ewan Park](https://github.com/gep13) - Committer, Chocolatey GUI, community feed moderator\r\n* [Richard Simpson](https://github.com/RichiCoder1) - Created and maintains the new Chocolatey GUI\r\n* [Jan Karger](https://github.com/punker76) - Long time contributor to the project\r\n* [Manfred Wallner](https://github.com/mwallner) - Chocolatey GUI Enthusiast\r\n\r\n## Contributors\r\n\r\n* [Christiaan Baes](https://github.com/chrissie1) - Created the original version of Chocolatey Explorer, which Chocolatey GUI was built from.\r\n\r\n## Other Contributors\r\n\r\n* [Chocolatey GUI](https://github.com/chocolatey/chocolateygui/graphs/contributors)\r\n\r\n## Third-Party Dependencies - Development & Builds\r\n\r\nChocolatey GUI is built, with the following fantastic frameworks and services:\r\n\r\n* [Cake](http://cakebuild.net/)\r\n* [Cake.Recipe](https://github.com/cake-contrib/Cake.Recipe)\r\n* [NuGet.exe](https://www.nuget.org/)\r\n\r\nChocolatey GUI is tested and analyzed with the following rockstar frameworks:\r\n\r\n* [DupFinder](https://confluence.jetbrains.com/display/NETCOM/Introducing+dupFinder)\r\n* [FxCop](https://msdn.microsoft.com/en-us/library/bb429476(v=vs.80).aspx)\r\n* [InspectCode](https://confluence.jetbrains.com/display/NETCOM/Introducing+InspectCode)\r\n* [StyleCop.Analyzers](https://github.com/DotNetAnalyzers/StyleCopAnalyzers)\r\n\r\nWe would like to credit other super sweet tools/frameworks/services that aid in the development of Chocolatey GUI:\r\n\r\n* [NuGet Framework](https://www.nuget.org/)\r\n* [ReSharper](https://www.jetbrains.com/resharper/)\r\n\r\n## Third-Party Dependencies and Licenses - Runtime\r\n\r\nChocolatey GUI Editions uses Chocolatey FOSS components and also adds the following components listed below.\r\n\r\n### [GNU Lesser GPL](https://www.gnu.org/licenses/lgpl-3.0.html)\r\n\r\n* Fizzler @ 1.2.0\r\n\r\n### [Apache v2.0 License](https://www.apache.org/licenses/LICENSE-2.0.html)\r\n\r\n* Chocolatey Open Source\r\n* Serilog @ 2.5.0\r\n* Serilog.Formatting.Compact @ 1.0.0\r\n* Serilog.Sinks.Async @ 1.1.0\r\n* Serilog.Sinks.Console @ 3.1.0\r\n* Serilog.Sinks.File @ 3.2.0\r\n* Serilog.Sinks.PeriodicBatching @ 2.1.1\r\n* Serilog.Sinks.RollingFile @ 3.3.0\r\n\r\n### [MIT License](https://mit-license.org/)\r\n\r\n* Autofac @ 4.6.1\r\n* AutoMapper @ 7.0.1\r\n* Caliburn.Micro @ 3.2.0\r\n* Caliburn.Micro.Core @ 3.2.0\r\n* ControlzEx @ 4.4.0\r\n* HarfBuzzSharp @ 2.6.1.4\r\n* LiteDB @ 5.0.15\r\n* MahApps.Metro @ 2.4.4\r\n* MahApps.Metro.IconPacks.BoxIcons @ 4.8.0\r\n* MahApps.Metro.IconPacks.Entypo @ 4.8.0\r\n* MahApps.Metro.IconPacks.FontAwesome @ 4.8.0\r\n* MahApps.Metro.IconPacks.Modern @ 4.8.0\r\n* MahApps.Metro.IconPacks.Octicons @ 4.8.0\r\n* MahApps.Metro.SimpleChildWindow @ 2.0.0\r\n* Microsoft.NETCore.Platforms @ 3.1.0\r\n* Microsoft.VisualStudio.Threading @ 15.4.4\r\n* Microsoft.VisualStudio.Validation @ 15.3.32\r\n* Microsoft.Xaml.Behaviors.Wpf @ 1.1.19\r\n* NETStandard.Library @ 2.0.3\r\n* SkiaSharp @ 1.68.3\r\n* SkiaSharp.HarfBuzz @ 1.68.3\r\n* Splat @ 2.0.0\r\n* Svg.Skia @ 0.3.0\r\n* System.Buffers @ 4.5.1\r\n* System.Memory @ 4.5.4\r\n* System.Numerics.Vectors @ 4.5.0\r\n* System.Reactive @ 3.1.1\r\n* System.Reactive.Core @ 3.1.1\r\n* System.Reactive.Interfaces @ 3.1.1\r\n* System.Reactive.Linq @ 3.1.1\r\n* System.Reactive.PlatformServices @ 3.1.1\r\n* System.Reactive.Windows.Threading @ 3.1.1\r\n* System.Runtime.CompilerServices.Unsafe @ 4.7.1\r\n* System.Threading.Tasks.Extensions @ 4.4.0\r\n* System.ValueTuple @ 4.5.0\r\n\r\n### [BSD-2-Clause License](https://licenses.nuget.org/BSD-2-Clause)\r\n\r\n* Markdig.Signed @ 0.23.0\r\n* Markdig.Wpf.Signed @ 0.5.0.1\r\n\r\n### [Microsoft Software License](https://go.microsoft.com/fwlink/?LinkId=329770)\r\n\r\n* System.Diagnostics.Contracts @ 4.3.0\r\n* System.Runtime.InteropServices.RuntimeInformation @ 4.3.0\r\n\r\n### [MS-PL License](https://opensource.org/licenses/MS-PL)\r\n\r\n* Svg.Custom @ 0.3.0\r\n"
        },
        {
          "name": "Get-ChocoUpdatedDebugVersion.ps1",
          "type": "blob",
          "size": 5.375,
          "content": "[CmdletBinding(DefaultParameterSetName = \"tag\")]\r\nparam(\r\n    # The location where Chocolatey CLI sources are located,\r\n    # or will be located if the directory does not already exist.\r\n    # If not specified and the environment variable `CHOCO_SOURCE_LOCATION`\r\n    # is not definied, the location will default to `$env:TEMP\\\r\n    [Alias(\"ChocoLocation\")]\r\n    [string] $ChocoSourceLocation = $env:CHOCO_SOURCE_LOCATION,\r\n\r\n    # Checkout a specific tag of your own choosing.\r\n    # This value can also be a specific commit or a branch, but\r\n    # will be notified as being a tag.\r\n    # NOTE: Only tags already pulled down will be considered.\r\n    [Parameter(ParameterSetName = \"tag\")]\r\n    [string] $CheckoutTag = $null,\r\n\r\n    # Checkout the latest tag available in the Chocolatey Source Location.\r\n    # NOTE: Only tags already pulled down will be considered.\r\n    [Parameter(ParameterSetName = \"latest\")]\r\n    [switch] $CheckoutLatestTag,\r\n\r\n    # Try check out a tage with the same name as what is used as a reference\r\n    # in the packages.config file. If the reference specified is not a stable\r\n    # version, the latest tag will be checked out instead.\r\n    # NOTE: Only tags already pulled down will be considered.\r\n    [Parameter(ParameterSetName = 'ref-tag')]\r\n    [switch] $CheckoutRefTag,\r\n\r\n    # Remove and clone the specified Chocolatey Source Location again.\r\n    # This is a very destructive operation, and should only be used if\r\n    # you are not interested in any local information.\r\n    [switch] $ForceChocoClone\r\n)\r\n\r\nfunction CheckoutTag {\r\n    param(\r\n        [Parameter(Mandatory)]\r\n        [string] $SourceLocation,\r\n\r\n        [string] $TagName\r\n    )\r\n  \r\n    Push-Location \"$SourceLocation\"\r\n    if (!$TagName) {\r\n        $TagName = . git tag --sort v:refname | Where-Object { $_ -match \"^[\\d\\.]+$\" } | Select-Object -last 1\r\n    }\r\n\r\n    if ($TagName) {\r\n        git checkout $TagName -q 2>$null\r\n        if ($LASTEXITCODE -eq 0) {\r\n            Write-Host \"Checked out Chocolatey CLI tag '$TagName'\"\r\n        }\r\n        else {\r\n            $currentBranch = . git branch --show-current\r\n            if ($currentBranch) {\r\n                Write-Warning \"Unable to check out tag $TagName. Leaving source in branch $currentBranch\"\r\n            }\r\n            else {\r\n                Write-Warning \"Unable to check out tag $TagName. Leaving source in commit $(git rev-parse HEAD)\"\r\n            }\r\n        }\r\n    }\r\n\r\n    Pop-Location\r\n}\r\n\r\nWrite-Host \"We are at $PSScriptRoot\"\r\n\r\n[xml]$packagesConfigFile = Get-Content -Path \"$PSScriptRoot/Source/ChocolateyGui/packages.config\"\r\n\r\n$chocolateyLibPackageVersion = $($packagesConfigFile.packages.package | Where-Object { $_.id -eq \"chocolatey.lib\" }).version\r\n\r\nif ($CheckoutRefTag) {\r\n\r\n    if ($chocolateyLibPackageVersion -match '^[\\d\\.]+$') {\r\n        $CheckoutTag = $chocolateyLibPackageVersion\r\n    }\r\n    else {\r\n        $CheckoutLatestTag = $true\r\n  }\r\n}\r\n\r\nif (!$ChocoSourceLocation) {\r\n    # To allow a default path being used for cloning the repository\r\n    $ChocoSourceLocation = \"$env:TEMP\\chocoSource\"\r\n}\r\n\r\nWrite-Host \"Looking for choco in '$ChocoSourceLocation'\"\r\n\r\nif ($ForceChocoClone -and (Test-Path $ChocoSourceLocation)) {\r\n    Write-Host \"Removing existing Chocolatey CLI Source in '$ChocoSourceLocation'\"\r\n    # We use error action stop here, as there may be times the `.git` directory is locked.\r\n    # Having information about this is helpful to rectify the issue.\r\n    Remove-Item $ChocoSourceLocation -Recurse -Force -EA Stop\r\n}\r\n\r\nif (!(Test-Path $ChocoSourceLocation)) {\r\n    Write-Host \"Cloning Chocolatey CLI Repository to '$ChocoSourceLocation'\"\r\n    git clone \"https://github.com/chocolatey/choco.git\" \"$ChocoSourceLocation\"\r\n\r\n    if ($CheckoutLatestTag) {\r\n        CheckoutTag $ChocoSourceLocation\r\n    }\r\n    elseif ($CheckoutTag) {\r\n        CheckoutTag $ChocoSourceLocation -TagName $CheckoutTag\r\n    }\r\n}\r\nelseif ($CheckoutLatestTag) {\r\n    CheckoutTag $ChocoSourceLocation\r\n}\r\nelseif ($CheckoutTag) {\r\n    CheckoutTag $ChocoSourceLocation -TagName $CheckoutTag\r\n}\r\n\r\nif (-not (Test-Path -Path $ChocoSourceLocation)) {\r\n    # We leave this here on purpose in case the cloning of the repository has failed.\r\n    throw \"Location '$ChocoSourceLocation' not found; please rerun with the -ChocoSourceLocation parameter or set the CHOCO_SOURCE_LOCATION environment variable.\"\r\n}\r\n\r\nWrite-Host \"Restore packages on project first...\"\r\n& ./build.debug.bat --target='Restore'\r\n\r\nWrite-Host \"Building choco at $ChocoSourceLocation with Debug...\"\r\n\r\nPush-Location $ChocoSourceLocation\r\nif (Test-Path \"recipe.cake\") {\r\n    & ./build.debug.bat --target='Run-ILMerge' --shouldRunTests=false --shouldRunAnalyze=false\r\n}\r\nelse {\r\n    & ./build.debug.bat\r\n}\r\nPop-Location\r\n\r\nWrite-Host \"Copying chocolatey artifacts to current Chocolatey Package Version folder...\"\r\n\r\n$chocolateyLibPackageFolder = \"$PSScriptRoot/Source/packages/chocolatey.lib.$chocolateyLibPackageVersion/lib/net48\"\r\n\r\nif (-not (Test-Path -Path $chocolateyLibPackageFolder)) {\r\n    New-Item -ItemType Directory -Path $chocolateyLibPackageFolder > $null\r\n}\r\n\r\n$codeDropLibs = \"$ChocoSourceLocation/code_drop/temp/_PublishedLibs/chocolatey_merged\"\r\n\r\nif (!(Test-Path $codeDropLibs)) {\r\n  $codeDropLibs = \"$ChocoSourceLocation/code_drop/chocolatey/lib\"\r\n}\r\n\r\nWrite-Host \"Copying chocolatey lib items from '$codeDropLibs/*' to '$chocolateyLibPackageFolder'.\"\r\nCopy-Item -Path \"$codeDropLibs/*\" -Destination \"$chocolateyLibPackageFolder/\" -Force"
        },
        {
          "name": "GitReleaseManager.yaml",
          "type": "blob",
          "size": 1.2880859375,
          "content": "issue-labels-include:\r\n  - Breaking Change\r\n  - Deprecate\r\n  - Feature\r\n  - C4B Feature\r\n  - Bug\r\n  - Improvement\r\n  - Documentation\r\n  - Dependency Change\r\nissue-labels-exclude:\r\n  - Internal Refactoring\r\n  - BuildAutomation\r\n  - NO RELEASE NOTES\r\nissue-labels-alias:\r\n  - name:    Documentation\r\n    header:  Documentation\r\n    plural:  Documentation\r\n  - name:    Bug\r\n    header:  Bug Fix\r\n    plural:  Bug Fixes\r\n  - name:    Deprecate\r\n    header:  Deprecated Feature\r\n    plural:  Deprecated Features\r\ncreate:\r\n  include-sha-section: true\r\n  sha-section-heading: \"SHA256 Hashes of the release artifacts\"\r\n  sha-section-line-format: \"- `{1}\\t{0}`\"\r\nclose:\r\n  use-issue-comments: true\r\n  issue-comment: |-\r\n    :tada: This issue has been resolved in version {milestone} :tada:\r\n\r\n    The release is available on:\r\n\r\n    - [GitHub Release](https://github.com/{owner}/{repository}/releases/tag/{milestone})\r\n    - [Chocolatey Package](https://community.chocolatey.org/packages/chocolateygui/{milestone})\r\n\r\n    Your **[GitReleaseManager](https://github.com/GitTools/GitReleaseManager)** bot :package: :rocket:\r\nexport:\r\n  include-created-date-in-title: true\r\n  created-date-string-format: MMMM dd, yyyy\r\n  perform-regex-removal: true\r\n  regex-text: '### Where to get it(\\r\\n)*You can .*\\)'\r\n  multiline-regex: true\r\n"
        },
        {
          "name": "GitVersion.yml",
          "type": "blob",
          "size": 0.0185546875,
          "content": "next-version: 2.0.0"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 10.0712890625,
          "content": "                                 Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability."
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.6044921875,
          "content": "Copyright 2011 - Present RealDimensions Software, LLC\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.3076171875,
          "content": "# Chocolatey GUI\n\nChocolatey GUI is a user interface for [Chocolatey](http://chocolatey.org) (the Machine Package Manager for Windows).\n\n## Installation\n\nYou can install Chocolatey GUI via Chocolatey itself by executing:\n\n```choco install ChocolateyGUI```\n\n## Build Status\n\n| GitHub Action                                                                                                                                                                                                  |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [![GitHub Workflow Status (branch)](https://img.shields.io/github/workflow/status/chocolatey/ChocolateyGUI/Build/develop?logo=github)](https://github.com/chocolatey/ChocolateyGUI/actions/workflows/build.yml)  |\n\n\n## Chat Room\n\nCome join in the conversation about Chocolatey GUI in our Community Chat Room\n\n[![Discord](https://img.shields.io/discord/778552361454141460?logo=Discord)](https://ch0.co/community)\n\nOr, you can find us in IRC at #chocolatey.\n\n## Information\n\n* [Chocolatey Community Repository](https://community.chocolatey.org)\n* [Chocolatey Documentation](https://docs.chocolatey.org)\n* [Twitter](https://twitter.com/chocolateynuget)\n\n### Documentation\n\nYou can find information about Chocolatey GUI here: [https://docs.chocolatey.org/en-us/chocolatey-gui/](https://docs.chocolatey.org/en-us/chocolatey-gui/)\n\n### Requirements\n\n* .NET Framework 4.8\n* Should work on all Windows Operating Systems from Windows 7 SP1 and above, and Windows Server 2008 R2 SP1 and above\n\n### License / Credits\n\nApache 2.0 - see [LICENSE](https://github.com/chocolatey/chocolateygui/blob/develop/LICENSE.txt) and [NOTICE](https://github.com/chocolatey/chocolateygui/blob/develop/NOTICE) files.\n\n## Submitting Issues\n\nIf you have found an issue with Chocolatey GUI, this is the place to submit.\n\nObserve the following help for submitting an issue:\n\nPrerequisites:\n\n* The issue has to do with Chocolatey GUI itself and is not a package or website issue.\n* Please check to see if your issue already exists with a quick search of the issues. Start with one relevant term and then add if you get too many results.\n* You are not submitting an Enhancement. Enhancements should observe [CONTRIBUTING](https://github.com/chocolatey/chocolateygui/blob/develop/CONTRIBUTING.md) guidelines.\n\nSubmitting a ticket:\n\n* We'll need debug and verbose output, so please run and capture the log with `-dv` or `--debug --verbose`. You can submit that with the issue or create a gist and link it.\n* **Please note** that the debug/verbose output for some commands may have sensitive data (passwords or apiKeys) related to Chocolatey, so please remove those if they are there prior to submitting the issue.\n* choco.exe logs to a file in `$env:ChocolateyInstall\\log\\`. You can grab the specific log output from there so you don't have to capture or redirect screen output. Please limit the amount included to just the command run (the log is appended to with every command).\n* Please save the log output in a [gist](https://gist.github.com) (save the file as `log.sh`) and link to the gist from the issue. Feel free to create it as secret so it doesn't fill up against your public gists. Anyone with a direct link can still get to secret gists. If you accidentally include secret information in your gist, please delete it and create a new one (gist history can be seen by anyone) and update the link in the ticket (issue history is not retained except by email - deleting the gist ensures that no one can get to it). Using gists this way also keeps accidental secrets from being shared in the ticket in the first place as well.\n* We'll need the entire log output from the run, so please don't limit it down to areas you feel are relevant. You may miss some important details we'll need to know. This will help expedite issue triage.\n* It's helpful to include the version of choco, the version of the OS, and the version of PowerShell (Posh), but the debug script should capture all of those pieces of information.\n* Include screenshots and/or animated gif's whenever possible, they help show us exactly what the problem is.\n\n## Contributing\n\nIf you would like to contribute code or help squash a bug or two, that's awesome. Please familiarize yourself with [CONTRIBUTING](https://github.com/chocolatey/chocolateygui/blob/develop/CONTRIBUTING.md).\n\n### Building\n\n* It is assumed that a version of Visual Studio 2019 or newer is already installed on the machine being used to complete the build.\n* `choco install wixtoolset -y`\n* **OPTIONAL:** Set `FXCOPDIR` environment variable, which can be set using [vswhere](https://chocolatey.org/packages/vswhere) and the following command:\n   ```ps1\n   $FXCOPDIR = vswhere -products * -latest -prerelease -find **/FxCopCmd.exe\n   [Environment]::SetEnvironmentVariable(\"FXCOPDIR\", $FXCOPDIR, 'User')\n   refreshenv\n   ```\n* Install WiX toolset integration for your Visual Studio Integration from [here](https://marketplace.visualstudio.com/items?itemName=WixToolset.WixToolsetVisualStudio2019Extension)\n* From an **Administrative** PowerShell Window, navigate to the folder where you have cloned the Chocolatey GUI repository and run `build.ps1`, this will run Cake and it will go through the build script.\n  ```\n  ./build.ps1\n  ```\n\n### Localization\n\nIf you are interested in helping with the effort in translating the various portions of the Chocolatey GUI UI into different languages, you can find out more about using the [transifex](https://www.transifex.com/) service in this [how to article](https://docs.chocolatey.org/en-us/chocolatey-gui/localization).\n\n## Committers\n\nCommitters, you should be very familiar with [COMMITTERS](https://github.com/chocolatey/chocolateygui/blob/develop/COMMITTERS.md).\n\n## Features:\n\n* View all **installed** and **available** packages\n* **Update** installed but outdated packages\n* **Install** and **uninstall** packages\n* See detailed **package information**\n\n![Chocolatey GUI](https://github.com/chocolatey/ChocolateyGUI/blob/10809890189206cece4b64ab038f33d11cf7b840/docs/Screenshots/Application_Loaded.png)\n\n## Credits\n\nChocolatey GUI is brought to you by quite a few people and frameworks. See [CREDITS](https://github.com/chocolatey/chocolateygui/blob/develop/CREDITS.md) (just CREDITS.md in the zip folder)\n"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Update-DebugConfiguration.ps1",
          "type": "blob",
          "size": 0.6552734375,
          "content": "$ChocolateyPackages = choco list -lo -r | ConvertFrom-Csv -Delimiter '|' -Header Package,Version\r\n$NugetPackage = $ChocolateyPackages | Where-Object Package -EQ nuget.commandline\r\n$ChocolateyVersion = $ChocolateyPackages | Where-Object Package -EQ 'chocolatey'\r\n\r\nIf ($null -eq $NugetPackage) {\r\n    throw \"You must have nuget.commandline installed in order to automatically update Chocolatey.lib. Alternatively you can update Chocolatey.lib in Visual Studio to Version '$($ChocolateyVersion.Version)'\"\r\n}\r\n\r\nnuget restore $PSScriptRoot/Source/ChocolateyGui.sln\r\nnuget update $PSScriptRoot/Source/ChocolateyGui.sln -Id Chocolatey.lib -Version $ChocolateyVersion.Version\r\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 2.796875,
          "content": "Vagrant.configure(\"2\") do |config|\n\n  config.vm.define \"chocolateygui\" do |chocolateygui|\n    chocolateygui.vm.box = \"StefanScherer/windows_10\"\n    chocolateygui.vm.box_version = \"2018.09.12\"\n    chocolateygui.windows.halt_timeout = 20\n    chocolateygui.winrm.username = \"vagrant\"\n    chocolateygui.winrm.password = \"vagrant\"\n    chocolateygui.vm.guest = :windows\n    chocolateygui.vm.communicator = \"winrm\"\n\n    chocolateygui.vm.hostname = \"chocolateygui\"\n    chocolateygui.windows.set_work_network = true\n\n    chocolateygui.vm.network :forwarded_port, guest: 5985, host: 6985, id: \"winrm\", auto_correct: true\n    chocolateygui.vm.network :forwarded_port, guest: 3389, host: 4389, id: \"rdp\", auto_correct: true\n    chocolateygui.vm.network :forwarded_port, guest: 22, host: 3222, id: \"ssh\", auto_correct: true\n\n    chocolateygui.vm.synced_folder \"packages\", \"/packages\"\n    chocolateygui.vm.synced_folder \"licenses\", \"/licenses\"\n\n    chocolateygui.vm.provider :virtualbox do |v, override|\n      override.vm.network :private_network, ip: \"10.10.13.14\"\n      v.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n      v.gui = true\n      v.customize [\"modifyvm\", :id, \"--vram\", 32]\n      v.customize [\"modifyvm\", :id, \"--memory\", \"1024\"]\n      v.customize [\"modifyvm\", :id, \"--audio\", \"none\"]\n      v.customize [\"modifyvm\", :id, \"--clipboard\", \"bidirectional\"]\n      v.customize [\"modifyvm\", :id, \"--draganddrop\", \"hosttoguest\"]\n      v.customize [\"modifyvm\", :id, \"--usb\", \"off\"]\n      # linked clones for speed and size\n      v.linked_clone = true if Vagrant::VERSION >= '1.8.0'\n    end\n\n    # privileged:false - https://github.com/hashicorp/vagrant/issues/9138\n    # Auto Login issue corrected, as per discussion here: https://twitter.com/stefscherer/status/1011120268222304256\n    chocolateygui.vm.provision \"shell\", privileged: false, inline: <<-SHELL\n      Set-ItemProperty \"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\" -Name AutoAdminLogon -Value 1\n      Set-ItemProperty \"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\" -Name DefaultUserName -Value \"vagrant\"\n      Set-ItemProperty \"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\" -Name DefaultPassword -Value \"vagrant\"\n      Remove-ItemProperty \"HKLM:\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\" -Name AutoAdminLogonCount -Confirm -ErrorAction SilentlyContinue\n    SHELL\n    chocolateygui.vm.provision \"reload\"\n    chocolateygui.vm.provision :shell, :path => \"shell/PrepareWindows.ps1\", privileged: false\n    chocolateygui.vm.provision :shell, :path => \"shell/SetWindowsPreferences.ps1\", privileged: false\n    chocolateygui.vm.provision :shell, :path => \"shell/InstallChocolatey.ps1\", privileged: false\n    chocolateygui.vm.provision :shell, :path => \"shell/NotifyGuiAppsOfEnvironmentChanges.ps1\", privileged: false\n  end\nend\n"
        },
        {
          "name": "build.bat",
          "type": "blob",
          "size": 0.4267578125,
          "content": "@echo off\r\nset psscript=\"%~dp0build.ps1\"\r\necho ==================================================\r\necho ============= WRAP POWERSHELL SCRIPT =============\r\necho ==================================================\r\n\r\necho calling %psscript% with args %*\r\nPowerShell -NoProfile -ExecutionPolicy Bypass -Command \"& '%psscript%' %*\"\r\nset buildstatus=%ERRORLEVEL%\r\necho ==================================================\r\nexit /b %buildstatus%"
        },
        {
          "name": "build.debug.bat",
          "type": "blob",
          "size": 0.44921875,
          "content": "@echo off\r\nset psscript=\"%~dp0build.ps1\"\r\necho ==================================================\r\necho ============= WRAP POWERSHELL SCRIPT =============\r\necho ==================================================\r\n\r\necho calling %psscript% with args %*\r\nPowerShell -NoProfile -ExecutionPolicy Bypass -Command \"& '%psscript%' -Configuration Debug %*\"\r\nset buildstatus=%ERRORLEVEL%\r\necho ==================================================\r\nexit /b %buildstatus%\r\n"
        },
        {
          "name": "build.official.bat",
          "type": "blob",
          "size": 0.458984375,
          "content": "@echo off\r\nset psscript=\"%~dp0build.ps1\"\r\necho ==================================================\r\necho ============= WRAP POWERSHELL SCRIPT =============\r\necho ==================================================\r\n\r\necho calling %psscript% with args %*\r\nPowerShell -NoProfile -ExecutionPolicy Bypass -Command \"& '%psscript%' -Configuration ReleaseOfficial %*\"\r\nset buildstatus=%ERRORLEVEL%\r\necho ==================================================\r\nexit /b %buildstatus%\r\n"
        },
        {
          "name": "build.official.localrelease.bat",
          "type": "blob",
          "size": 0.490234375,
          "content": "@echo off\r\nsetlocal enableextensions enabledelayedexpansion\r\nset psscript=\"./build.ps1\"\r\necho ==================================================\r\necho ============= WRAP POWERSHELL SCRIPT =============\r\necho ==================================================\r\n\r\necho calling %psscript% with args %*\r\nPowerShell -NoProfile -ExecutionPolicy Bypass -Command \"& '%psscript%' -Configuration ReleaseOfficial --prepareLocalRelease=true%*\"\r\n\r\necho ==================================================\r\nendlocal\r\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 7.900390625,
          "content": "##########################################################################\n# This is the Cake bootstrapper script for PowerShell.\n# This file was downloaded from https://github.com/cake-build/resources\n# Feel free to change this file to fit your needs.\n##########################################################################\n\n<#\n\n.SYNOPSIS\nThis is a Powershell script to bootstrap a Cake build.\n\n.DESCRIPTION\nThis Powershell script will download NuGet if missing, restore NuGet tools (including Cake)\nand execute your Cake build script with the parameters you provide.\n\n.PARAMETER Script\nThe build script to execute.\n.PARAMETER Target\nThe build script target to run.\n.PARAMETER Configuration\nThe build configuration to use.\n.PARAMETER Verbosity\nSpecifies the amount of information to be displayed.\n.PARAMETER ShowDescription\nShows description about tasks.\n.PARAMETER DryRun\nPerforms a dry run.\n.PARAMETER SkipToolPackageRestore\nSkips restoring of packages.\n.PARAMETER ScriptArgs\nRemaining arguments are added here.\n\n.LINK\nhttps://cakebuild.net\n\n#>\n\n[CmdletBinding()]\nParam(\n    [string]$Script = \"recipe.cake\",\n    [string]$Target,\n    [string]$Configuration,\n    [ValidateSet(\"Quiet\", \"Minimal\", \"Normal\", \"Verbose\", \"Diagnostic\")]\n    [string]$Verbosity,\n    [switch]$ShowDescription,\n    [Alias(\"WhatIf\", \"Noop\")]\n    [switch]$DryRun,\n    [switch]$SkipToolPackageRestore,\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$ScriptArgs\n)\n\n# Attempt to set highest encryption available for SecurityProtocol.\n# PowerShell will not set this by default (until maybe .NET 4.6.x). This\n# will typically produce a message for PowerShell v2 (just an info\n# message though)\ntry\n{\n    # Set TLS 1.2 (3072), then TLS 1.1 (768), then TLS 1.0 (192), finally SSL 3.0 (48)\n    # Use integers because the enumeration values for TLS 1.2 and TLS 1.1 won't\n    # exist in .NET 4.0, even though they are addressable if .NET 4.5+ is\n    # installed (.NET 4.5 is an in-place upgrade).\n    [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192 -bor 48\n} catch {\n    Write-Output 'Unable to set PowerShell to use TLS 1.2 and TLS 1.1 due to old .NET Framework installed. If you see underlying connection closed or trust errors, you may need to upgrade to .NET Framework 4.5+ and PowerShell v3'\n}\n\n[Reflection.Assembly]::LoadWithPartialName(\"System.Security\") | Out-Null\nfunction MD5HashFile([string] $filePath)\n{\n    if ([string]::IsNullOrEmpty($filePath) -or !(Test-Path $filePath -PathType Leaf))\n    {\n        return $null\n    }\n\n    [System.IO.Stream] $file = $null;\n    [System.Security.Cryptography.MD5] $md5 = $null;\n    try\n    {\n        $md5 = [System.Security.Cryptography.MD5]::Create()\n        $file = [System.IO.File]::OpenRead($filePath)\n        return [System.BitConverter]::ToString($md5.ComputeHash($file))\n    }\n    finally\n    {\n        if ($file -ne $null)\n        {\n            $file.Dispose()\n        }\n    }\n}\n\nfunction GetProxyEnabledWebClient\n{\n    $wc = New-Object System.Net.WebClient\n    $proxy = [System.Net.WebRequest]::GetSystemWebProxy()\n    $proxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials\n    $wc.Proxy = $proxy\n    return $wc\n}\n\nWrite-Host \"Preparing to run build script...\"\n\nif(!$PSScriptRoot){\n    $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n}\n\n$TOOLS_DIR = Join-Path $PSScriptRoot \"tools\"\n$ADDINS_DIR = Join-Path $TOOLS_DIR \"Addins\"\n$MODULES_DIR = Join-Path $TOOLS_DIR \"Modules\"\n$NUGET_EXE = Join-Path $TOOLS_DIR \"nuget.exe\"\n$CAKE_EXE = Join-Path $TOOLS_DIR \"Cake/Cake.exe\"\n$NUGET_URL = \"https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\"\n$PACKAGES_CONFIG = Join-Path $TOOLS_DIR \"packages.config\"\n$PACKAGES_CONFIG_MD5 = Join-Path $TOOLS_DIR \"packages.config.md5sum\"\n$ADDINS_PACKAGES_CONFIG = Join-Path $ADDINS_DIR \"packages.config\"\n$MODULES_PACKAGES_CONFIG = Join-Path $MODULES_DIR \"packages.config\"\n\n# Make sure tools folder exists\nif ((Test-Path $PSScriptRoot) -and !(Test-Path $TOOLS_DIR)) {\n    Write-Verbose -Message \"Creating tools directory...\"\n    New-Item -Path $TOOLS_DIR -Type directory | out-null\n}\n\n# Make sure that packages.config exist.\nif (!(Test-Path $PACKAGES_CONFIG)) {\n    Write-Verbose -Message \"Downloading packages.config...\"\n    try {\n        $wc = GetProxyEnabledWebClient\n        $wc.DownloadFile(\"https://cakebuild.net/download/bootstrapper/packages\", $PACKAGES_CONFIG)\n    } catch {\n        Throw \"Could not download packages.config.\"\n    }\n}\n\n# Try find NuGet.exe in path if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Trying to find nuget.exe in PATH...\"\n    $existingPaths = $Env:Path -Split ';' | Where-Object { (![string]::IsNullOrEmpty($_)) -and (Test-Path $_ -PathType Container) }\n    $NUGET_EXE_IN_PATH = Get-ChildItem -Path $existingPaths -Filter \"nuget.exe\" | Select -First 1\n    if ($NUGET_EXE_IN_PATH -ne $null -and (Test-Path $NUGET_EXE_IN_PATH.FullName)) {\n        Write-Verbose -Message \"Found in PATH at $($NUGET_EXE_IN_PATH.FullName).\"\n        $NUGET_EXE = $NUGET_EXE_IN_PATH.FullName\n    }\n}\n\n# Try download NuGet.exe if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Downloading NuGet.exe...\"\n    try {\n        $wc = GetProxyEnabledWebClient\n        $wc.DownloadFile($NUGET_URL, $NUGET_EXE)\n    } catch {\n        Throw \"Could not download NuGet.exe.\"\n    }\n}\n\n# Save nuget.exe path to environment to be available to child processed\n$ENV:NUGET_EXE = $NUGET_EXE\n\n# Restore tools from NuGet?\nif(-Not $SkipToolPackageRestore.IsPresent) {\n    Push-Location\n    Set-Location $TOOLS_DIR\n\n    # Check for changes in packages.config and remove installed tools if true.\n    [string] $md5Hash = MD5HashFile($PACKAGES_CONFIG)\n    if((!(Test-Path $PACKAGES_CONFIG_MD5)) -Or\n      ($md5Hash -ne (Get-Content $PACKAGES_CONFIG_MD5 ))) {\n        Write-Verbose -Message \"Missing or changed package.config hash...\"\n        Get-ChildItem -Exclude packages.config,nuget.exe,Cake.Bakery |\n        Remove-Item -Recurse\n    }\n\n    Write-Verbose -Message \"Restoring tools from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$TOOLS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet tools.\"\n    }\n    else\n    {\n        $md5Hash | Out-File $PACKAGES_CONFIG_MD5 -Encoding \"ASCII\"\n    }\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Restore addins from NuGet\nif (Test-Path $ADDINS_PACKAGES_CONFIG) {\n    Push-Location\n    Set-Location $ADDINS_DIR\n\n    Write-Verbose -Message \"Restoring addins from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$ADDINS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet addins.\"\n    }\n\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Restore modules from NuGet\nif (Test-Path $MODULES_PACKAGES_CONFIG) {\n    Push-Location\n    Set-Location $MODULES_DIR\n\n    Write-Verbose -Message \"Restoring modules from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$MODULES_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet modules.\"\n    }\n\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Make sure that Cake has been installed.\nif (!(Test-Path $CAKE_EXE)) {\n    Throw \"Could not find Cake.exe at $CAKE_EXE\"\n}\n\n\n\n# Build Cake arguments\n$cakeArguments = @(\"$Script\");\nif ($Target) { $cakeArguments += \"-target=$Target\" }\nif ($Configuration) { $cakeArguments += \"-configuration=$Configuration\" }\nif ($Verbosity) { $cakeArguments += \"-verbosity=$Verbosity\" }\nif ($ShowDescription) { $cakeArguments += \"-showdescription\" }\nif ($DryRun) { $cakeArguments += \"-dryrun\" }\n$cakeArguments += $ScriptArgs\n\n# Start Cake\nWrite-Host \"Running build script...\"\n\n& \"$CAKE_EXE\" ./recipe.cake --bootstrap\nif ($LASTEXITCODE -eq 0)\n{\n    & \"$CAKE_EXE\" $cakeArguments\n}\n\nexit $LASTEXITCODE"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 3.322265625,
          "content": "#!/usr/bin/env bash\r\n\r\n##########################################################################\r\n# This is the Cake bootstrapper script for Linux and OS X.\r\n# This file was downloaded from https://github.com/cake-build/resources\r\n# Feel free to change this file to fit your needs.\r\n##########################################################################\r\n\r\n# Define directories.\r\nSCRIPT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\r\nTOOLS_DIR=$SCRIPT_DIR/tools\r\nADDINS_DIR=$TOOLS_DIR/Addins\r\nMODULES_DIR=$TOOLS_DIR/Modules\r\nNUGET_EXE=$TOOLS_DIR/nuget.exe\r\nCAKE_EXE=$TOOLS_DIR/Cake/Cake.exe\r\nPACKAGES_CONFIG=$TOOLS_DIR/packages.config\r\nPACKAGES_CONFIG_MD5=$TOOLS_DIR/packages.config.md5sum\r\nADDINS_PACKAGES_CONFIG=$ADDINS_DIR/packages.config\r\nMODULES_PACKAGES_CONFIG=$MODULES_DIR/packages.config\r\n\r\n# Define md5sum or md5 depending on Linux/OSX\r\nMD5_EXE=\r\nif [[ \"$(uname -s)\" == \"Darwin\" ]]; then\r\n    MD5_EXE=\"md5 -r\"\r\nelse\r\n    MD5_EXE=\"md5sum\"\r\nfi\r\n\r\n# Define default arguments.\r\nSCRIPT=\"recipe.cake\"\r\nCAKE_ARGUMENTS=()\r\n\r\n# Parse arguments.\r\nfor i in \"$@\"; do\r\n    case $1 in\r\n        -s|--script) SCRIPT=\"$2\"; shift ;;\r\n        --) shift; CAKE_ARGUMENTS+=(\"$@\"); break ;;\r\n        *) CAKE_ARGUMENTS+=(\"$1\") ;;\r\n    esac\r\n    shift\r\ndone\r\n\r\n# Make sure the tools folder exist.\r\nif [ ! -d \"$TOOLS_DIR\" ]; then\r\n  mkdir \"$TOOLS_DIR\"\r\nfi\r\n\r\n# Make sure that packages.config exist.\r\nif [ ! -f \"$TOOLS_DIR/packages.config\" ]; then\r\n    echo \"Downloading packages.config...\"\r\n    curl -Lsfo \"$TOOLS_DIR/packages.config\" https://cakebuild.net/download/bootstrapper/packages\r\n    if [ $? -ne 0 ]; then\r\n        echo \"An error occurred while downloading packages.config.\"\r\n        exit 1\r\n    fi\r\nfi\r\n\r\n# Download NuGet if it does not exist.\r\nif [ ! -f \"$NUGET_EXE\" ]; then\r\n    echo \"Downloading NuGet...\"\r\n    curl -Lsfo \"$NUGET_EXE\" https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\r\n    if [ $? -ne 0 ]; then\r\n        echo \"An error occurred while downloading nuget.exe.\"\r\n        exit 1\r\n    fi\r\nfi\r\n\r\n# Restore tools from NuGet.\r\npushd \"$TOOLS_DIR\" >/dev/null\r\nif [ ! -f \"$PACKAGES_CONFIG_MD5\" ] || [ \"$( cat \"$PACKAGES_CONFIG_MD5\" | sed 's/\\r$//' )\" != \"$( $MD5_EXE \"$PACKAGES_CONFIG\" | awk '{ print $1 }' )\" ]; then\r\n    find . -type d ! -name . ! -name 'Cake.Bakery' | xargs rm -rf\r\nfi\r\n\r\nmono \"$NUGET_EXE\" install -ExcludeVersion\r\nif [ $? -ne 0 ]; then\r\n    echo \"Could not restore NuGet tools.\"\r\n    exit 1\r\nfi\r\n\r\n$MD5_EXE \"$PACKAGES_CONFIG\" | awk '{ print $1 }' >| \"$PACKAGES_CONFIG_MD5\"\r\n\r\npopd >/dev/null\r\n\r\n# Restore addins from NuGet.\r\nif [ -f \"$ADDINS_PACKAGES_CONFIG\" ]; then\r\n    pushd \"$ADDINS_DIR\" >/dev/null\r\n\r\n    mono \"$NUGET_EXE\" install -ExcludeVersion\r\n    if [ $? -ne 0 ]; then\r\n        echo \"Could not restore NuGet addins.\"\r\n        exit 1\r\n    fi\r\n\r\n    popd >/dev/null\r\nfi\r\n\r\n# Restore modules from NuGet.\r\nif [ -f \"$MODULES_PACKAGES_CONFIG\" ]; then\r\n    pushd \"$MODULES_DIR\" >/dev/null\r\n\r\n    mono \"$NUGET_EXE\" install -ExcludeVersion\r\n    if [ $? -ne 0 ]; then\r\n        echo \"Could not restore NuGet modules.\"\r\n        exit 1\r\n    fi\r\n\r\n    popd >/dev/null\r\nfi\r\n\r\n# Make sure that Cake has been installed.\r\nif [ ! -f \"$CAKE_EXE\" ]; then\r\n    echo \"Could not find Cake.exe at '$CAKE_EXE'.\"\r\n    exit 1\r\nfi\r\n\r\n# Start Cake\r\nexec mono \"$CAKE_EXE\" $SCRIPT --bootstrap\r\nif [ $? -eq 0 ]; then\r\n    exec mono \"$CAKE_EXE\" $SCRIPT \"${CAKE_ARGUMENTS[@]}\"\r\nfi\r\n"
        },
        {
          "name": "cake.config",
          "type": "blob",
          "size": 0.3173828125,
          "content": "; This is the default configuration file for Cake.\n; This file was downloaded from https://github.com/cake-build/resources\n\n[Nuget]\nSource=https://api.nuget.org/v3/index.json\nUseInProcessClient=true\nLoadDependencies=false\n\n[Paths]\nTools=./tools\nAddins=./tools/Addins\nModules=./tools/Modules\n\n[Settings]\nSkipVerification=true\n"
        },
        {
          "name": "chocolateygui.snk",
          "type": "blob",
          "size": 0.58203125,
          "content": null
        },
        {
          "name": "config.wyam",
          "type": "blob",
          "size": 0.1904296875,
          "content": "System.Globalization.CultureInfo.DefaultThreadCurrentCulture = System.Globalization.CultureInfo.CreateSpecificCulture(\"en-GB\");\nPipelines[\"RenderPages\"].Replace(\"WriteMetadata\", new Headings(2));"
        },
        {
          "name": "nuspec",
          "type": "tree",
          "content": null
        },
        {
          "name": "recipe.cake",
          "type": "blob",
          "size": 5.3046875,
          "content": "#load nuget:?package=Chocolatey.Cake.Recipe&version=0.28.4\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// MODULES\r\n///////////////////////////////////////////////////////////////////////////////\r\n#module nuget:?package=Cake.Chocolatey.Module&version=0.3.0\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// TOOLS\r\n///////////////////////////////////////////////////////////////////////////////\r\n#tool choco:?package=transifex-cli&version=1.6.5\r\n\r\nif (BuildSystem.IsLocalBuild)\r\n{\r\n    Environment.SetVariableNames(\r\n        gitReleaseManagerTokenVariable: \"CHOCOLATEYGUI_GITHUB_PAT\",\r\n        transifexApiTokenVariable: \"CHOCOLATEYGUI_TRANSIFEX_API_TOKEN\"\r\n    );\r\n}\r\nelse\r\n{\r\n    Environment.SetVariableNames();\r\n}\r\n\r\nFunc<FilePathCollection> getScriptsToVerify = () =>\r\n{\r\n    var scriptsToVerify = GetFiles(BuildParameters.Paths.Directories.ChocolateyNuspecDirectory + \"/**/*.{ps1|psm1|psd1}\");\r\n\r\n    Information(\"The following PowerShell scripts have been selected to be verified...\");\r\n    foreach (var scriptToVerify in scriptsToVerify)\r\n    {\r\n        Information(scriptToVerify.FullPath);\r\n    }\r\n\r\n    return scriptsToVerify;\r\n};\r\n\r\nFunc<FilePathCollection> getScriptsToSign = () =>\r\n{\r\n    var scriptsToSign = GetFiles(\"./nuspec/**/*.{ps1|psm1|psd1}\");\r\n\r\n    Information(\"The following PowerShell scripts have been selected to be signed...\");\r\n    foreach (var scriptToSign in scriptsToSign)\r\n    {\r\n        Information(scriptToSign.FullPath);\r\n    }\r\n\r\n    return scriptsToSign;\r\n};\r\n\r\nFunc<FilePathCollection> getFilesToSign = () =>\r\n{\r\n    var filesToSign = GetFiles(BuildParameters.Paths.Directories.PublishedApplications + \"/^{ChocolateyGui|ChocolateyGuiCli}/{ChocolateyGui|ChocolateyGuiCli}*.{exe|dll}\") +\r\n                    GetFiles(BuildParameters.Paths.Directories.PublishedLibraries + \"/ChocolateyGui*/ChocolateyGui*.dll\");\r\n\r\n    var platformTarget = ToolSettings.BuildPlatformTarget == PlatformTarget.MSIL ? \"AnyCPU\" : ToolSettings.BuildPlatformTarget.ToString();\r\n    foreach(var project in ParseSolution(BuildParameters.SolutionFilePath).GetProjects())\r\n    {\r\n        var parsedProject = ParseProject(project.Path, BuildParameters.Configuration, platformTarget);\r\n        if (parsedProject.RootNameSpace == \"ChocolateyGui\")\r\n        {\r\n            filesToSign.Add(parsedProject.OutputPaths.First().FullPath + \"/ChocolateyGui.exe\");\r\n            continue;\r\n        }\r\n\r\n        if (parsedProject.RootNameSpace == \"ChocolateyGuiCli\")\r\n        {\r\n            filesToSign.Add(parsedProject.OutputPaths.First().FullPath + \"/ChocolateyGuiCli.exe\");\r\n            continue;\r\n        }\r\n\r\n        if (parsedProject.RootNameSpace == \"ChocolateyGui.Common\")\r\n        {\r\n            filesToSign.Add(parsedProject.OutputPaths.First().FullPath + \"/ChocolateyGui.Common.dll\");\r\n            continue;\r\n        }\r\n\r\n        if (parsedProject.RootNameSpace == \"ChocolateyGui.Common.Windows\")\r\n        {\r\n            filesToSign.Add(parsedProject.OutputPaths.First().FullPath + \"/ChocolateyGui.Common.Windows.dll\");\r\n            continue;\r\n        }\r\n    }\r\n\r\n    Information(\"The following assemblies have been selected to be signed...\");\r\n    foreach (var fileToSign in filesToSign)\r\n    {\r\n        Information(fileToSign.FullPath);\r\n    }\r\n\r\n    return filesToSign;\r\n};\r\n\r\nFunc<FilePathCollection> getMsisToSign = () =>\r\n{\r\n    var msisToSign = GetFiles(BuildParameters.Paths.Directories.Build + \"/ChocolateyGUI.msi\");\r\n\r\n    Information(\"The following msi's have been selected to be signed...\");\r\n    foreach (var msiToSign in msisToSign)\r\n    {\r\n        Information(msiToSign.FullPath);\r\n    }\r\n\r\n    return msisToSign;\r\n};\r\n\r\nBuildParameters.SetParameters(context: Context,\r\n                            buildSystem: BuildSystem,\r\n                            sourceDirectoryPath: \"./Source\",\r\n                            solutionFilePath: \"./Source/ChocolateyGui.sln\",\r\n                            solutionDirectoryPath: \"./Source/ChocolateyGui\",\r\n                            resharperSettingsFileName: \"ChocolateyGui.sln.DotSettings\",\r\n                            title: \"Chocolatey GUI\",\r\n                            repositoryOwner: \"chocolatey\",\r\n                            repositoryName: \"ChocolateyGUI\",\r\n                            shouldDownloadMilestoneReleaseNotes: true,\r\n                            treatWarningsAsErrors: false,\r\n                            productName: \"Chocolatey GUI\",\r\n                            productDescription: \"Chocolatey GUI is a product of Chocolatey Software, Inc. - All Rights Reserved\",\r\n                            productCopyright: \"Copyright 2014 - Present Open Source maintainers of Chocolatey GUI, and Chocolatey Software, Inc. - All Rights Reserved.\",\r\n                            useChocolateyGuiStrongNameKey: true,\r\n                            getScriptsToVerify: getScriptsToVerify,\r\n                            getScriptsToSign: getScriptsToSign,\r\n                            getFilesToSign: getFilesToSign,\r\n                            getMsisToSign: getMsisToSign,\r\n                            shouldBuildMsi: true,\r\n                            strongNameDependentAssembliesInputPath: string.Format(\"{0}{1}\", ((FilePath)(\"./Source\")).FullPath, \"\\\\packages\\\\Splat*\"));\r\n\r\nToolSettings.SetToolSettings(context: Context);\r\n\r\nBuildParameters.PrintParameters(Context);\r\n\r\nBuild.Run();\r\n"
        },
        {
          "name": "shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}