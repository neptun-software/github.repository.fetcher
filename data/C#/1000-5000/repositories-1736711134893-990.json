{
  "metadata": {
    "timestamp": 1736711134893,
    "page": 990,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Handlebars-Net/Handlebars.Net",
      "stars": 1288,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.716796875,
          "content": "#OS junk files\n[Tt]humbs.db\n*.DS_Store\n.DS_Store\n\n#Visual Studio files\n*.[Oo]bj\n*.user\n*.aps\n*.pch\n*.vspscc\n*.vssscc\n*_i.c\n*_p.c\n*.ncb\n*.suo\n*.tlb\n*.tlh\n*.bak\n*.[Cc]ache\n*.ilk\n*.log\n*.lib\n*.sbr\n*.sdf\n*.opensdf\n*.unsuccessfulbuild\nipch/\nobj/\n[Bb]in\n[Dd]ebug*/\n[Rr]elease*/\nAnkh.NoLoad\n\n#MonoDevelop\n*.pidb\n*.userprefs\n\n#Tooling\n_ReSharper*/\n*.resharper\n[Tt]est[Rr]esult*\n*.sass-cache\n\n#Subversion files\n.svn\n\n# Office Temp Files\n~$*\n\n#NuGet\npackages/\n.vs/\n\n#ncrunch\n*ncrunch*\n*crunch*.local.xml\n\n# visual studio database projects\n*.dbmdl\n\n#Test files\n*.testsettings\n[Tt]est-[Cc]ache/\n[Tt]est-[Rr]esults/\n*.snk\n/**/project.lock.json\nnupkgs\n\n# Rider files\n.idea/\n\n#DotNet Benchmark\nBenchmarkDotNet.Artifacts/\n\n#Test results\nTestResults/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Rex Morgan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.7685546875,
          "content": "# Handlebars.Net\n\n#### [![CI](https://github.com/Handlebars-Net/Handlebars.Net/workflows/CI/badge.svg)](https://github.com/Handlebars-Net/Handlebars.Net/actions?query=workflow%3ACI) [![Nuget](https://img.shields.io/nuget/vpre/Handlebars.Net)](https://www.nuget.org/packages/Handlebars.Net/) [![performance](https://img.shields.io/badge/benchmark-statistics-blue)](http://handlebars-net.github.io/Handlebars.Net/dev/bench/)\n\n---\n\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=Handlebars-Net_Handlebars.Net&metric=alert_status)](https://sonarcloud.io/dashboard?id=Handlebars-Net_Handlebars.Net) [![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=Handlebars-Net_Handlebars.Net&metric=reliability_rating)](https://sonarcloud.io/dashboard?id=Handlebars-Net_Handlebars.Net) [![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=Handlebars-Net_Handlebars.Net&metric=security_rating)](https://sonarcloud.io/dashboard?id=Handlebars-Net_Handlebars.Net)\n\n[![Bugs](https://sonarcloud.io/api/project_badges/measure?project=Handlebars-Net_Handlebars.Net&metric=bugs)](https://sonarcloud.io/dashboard?id=Handlebars-Net_Handlebars.Net) [![Code Smells](https://sonarcloud.io/api/project_badges/measure?project=Handlebars-Net_Handlebars.Net&metric=code_smells)](https://sonarcloud.io/dashboard?id=Handlebars-Net_Handlebars.Net) [![Coverage](https://sonarcloud.io/api/project_badges/measure?project=Handlebars-Net_Handlebars.Net&metric=coverage)](https://sonarcloud.io/dashboard?id=Handlebars-Net_Handlebars.Net) \n\n---\n\n[![Stack Exchange questions](https://img.shields.io/stackexchange/stackoverflow/t/%5Bhandlebars.net%5D?label=stackoverflow)](https://stackoverflow.com/questions/tagged/handlebars.net) \n[![GitHub issues questions](https://img.shields.io/github/issues/handlebars-net/handlebars.net/question)](https://github.com/Handlebars-Net/Handlebars.Net/labels/question) \n[![GitHub issues help wanted](https://img.shields.io/github/issues/handlebars-net/handlebars.net/help%20wanted?color=green&label=help%20wanted)](https://github.com/Handlebars-Net/Handlebars.Net/labels/help%20wanted)\n\n---\n\nBlistering-fast [Handlebars.js templates](http://handlebarsjs.com) in your .NET application.\n\n>Handlebars.js is an extension to the Mustache templating language created by Chris Wanstrath. Handlebars.js and Mustache are both logicless templating languages that keep the view and the code separated like we all know they should be.\n\nCheck out the [handlebars.js documentation](http://handlebarsjs.com) for how to write Handlebars templates.\n\nHandlebars.Net doesn't use a scripting engine to run a Javascript library - it **compiles Handlebars templates directly to IL bytecode**. It also mimics the JS library's API as closely as possible.\n\n## Install\n\n    dotnet add package Handlebars.Net\n\n## Extensions\nThe following projects are extending Handlebars.Net:\n- [Handlebars.Net.Extension.Json](https://github.com/Handlebars-Net/Handlebars.Net.Extension.Json) (Adds `System.Text.Json.JsonDocument` support)\n- [Handlebars.Net.Extension.NewtonsoftJson](https://github.com/Handlebars-Net/Handlebars.Net.Extension.NewtonsoftJson) (Adds `Newtonsoft.Json` support)\n- [Handlebars.Net.Helpers](https://github.com/Handlebars-Net/Handlebars.Net.Helpers) (Additional helpers in the categories: 'Constants', 'Enumerable', 'Math', 'Regex', 'String', 'DateTime', 'Url' , 'DynamicLinq', 'Humanizer', 'Json', 'Random', 'Xeger' and 'XPath'.)\n\n\n## Usage\n\n```c#\nstring source =\n@\"<div class=\"\"entry\"\">\n  <h1>{{title}}</h1>\n  <div class=\"\"body\"\">\n    {{body}}\n  </div>\n</div>\";\n\nvar template = Handlebars.Compile(source);\n\nvar data = new {\n    title = \"My new post\",\n    body = \"This is my first post!\"\n};\n\nvar result = template(data);\n\n/* Would render:\n<div class=\"entry\">\n  <h1>My New Post</h1>\n  <div class=\"body\">\n    This is my first post!\n  </div>\n</div>\n*/\n```\n\n### Registering Partials\n\n```c#\nstring source =\n@\"<h2>Names</h2>\n{{#names}}\n  {{> user}}\n{{/names}}\";\n\nstring partialSource =\n@\"<strong>{{name}}</strong>\";\n\nHandlebars.RegisterTemplate(\"user\", partialSource);\n\nvar template = Handlebars.Compile(source);\n\nvar data = new {\n  names = new [] {\n    new {\n        name = \"Karen\"\n    },\n    new {\n        name = \"Jon\"\n    }\n  }\n};\n\nvar result = template(data);\n\n/* Would render:\n<h2>Names</h2>\n  <strong>Karen</strong>\n  <strong>Jon</strong>\n*/\n```\n\n### Registering Helpers\n\n```c#\nHandlebars.RegisterHelper(\"link_to\", (writer, context, parameters) => \n{\n    writer.WriteSafeString($\"<a href='{context[\"url\"]}'>{context[\"text\"]}</a>\");\n});\n\nstring source = @\"Click here: {{link_to}}\";\n\nvar template = Handlebars.Compile(source);\n\nvar data = new {\n    url = \"https://github.com/rexm/handlebars.net\",\n    text = \"Handlebars.Net\"\n};\n\nvar result = template(data);\n\n/* Would render:\nClick here: <a href='https://github.com/rexm/handlebars.net'>Handlebars.Net</a>\n*/\n```\n \nThis will expect your views to be in the /Views folder like so:\n\n```\nViews\\layout.hbs                |<--shared as in \\Views            \nViews\\partials\\somepartial.hbs   <--shared as in  \\Views\\partials\nViews\\{Controller}\\{Action}.hbs \nViews\\{Controller}\\{Action}\\partials\\somepartial.hbs \n```\n### Registering Block Helpers\n\n```c#\nHandlebars.RegisterHelper(\"StringEqualityBlockHelper\", (output, options, context, arguments) => \n{\n    if (arguments.Length != 2)\n    {\n        throw new HandlebarsException(\"{{#StringEqualityBlockHelper}} helper must have exactly two arguments\");\n    }\n\n    var left = arguments.At<string>(0);\n    var right = arguments[1] as string;\n    if (left == right) options.Template(output, context);\n    else options.Inverse(output, context);\n});\n\nvar animals = new Dictionary<string, string>() \n{\n\t{\"Fluffy\", \"cat\" },\n\t{\"Fido\", \"dog\" },\n\t{\"Chewy\", \"hamster\" }\n};\n\nvar template = \"{{#each this}}The animal, {{@key}}, {{#StringEqualityBlockHelper @value 'dog'}}is a dog{{else}}is not a dog{{/StringEqualityBlockHelper}}.\\r\\n{{/each}}\";\nvar compiledTemplate = Handlebars.Compile(template);\nstring templateOutput = compiledTemplate(animals);\n\n/* Would render\nThe animal, Fluffy, is not a dog.\nThe animal, Fido, is a dog.\nThe animal, Chewy, is not a dog.\n*/\n```\n\n### Registering Decorators\n\n```c#\n[Fact]\npublic void BasicDecorator(IHandlebars handlebars)\n{\n    string source = \"{{#block @value-from-decorator}}{{*decorator 42}}{{@value}}{{/block}}\";\n\n    var handlebars = Handlebars.Create();\n    handlebars.RegisterHelper(\"block\", (output, options, context, arguments) =>\n    {\n        options.Data.CreateProperty(\"value\", arguments[0], out _);\n        options.Template(output, context);\n    });\n    \n    handlebars.RegisterDecorator(\"decorator\", \n        (TemplateDelegate function, in DecoratorOptions options, in Context context, in Arguments arguments) =>\n    {\n        options.Data.CreateProperty(\"value-from-decorator\", arguments[0], out _);\n    });\n    \n    var template = handlebars.Compile(source);\n    \n    var result = template(null);\n    Assert.Equal(\"42\", result);\n}\n```\nFor more examples see [DecoratorTests.cs](https://github.com/Handlebars-Net/Handlebars.Net/tree/master/source/Handlebars.Test/DecoratorTests.cs)\n\n#### Known limitations:\n- helpers registered inside of a decorator will not override existing registrations\n\n### Register custom value formatter\n\nIn case you need to apply custom value formatting (e.g. `DateTime`) you can use `IFormatter` and `IFormatterProvider` interfaces:\n\n```c#\npublic sealed class CustomDateTimeFormatter : IFormatter, IFormatterProvider\n{\n    private readonly string _format;\n\n    public CustomDateTimeFormatter(string format) => _format = format;\n\n    public void Format<T>(T value, in EncodedTextWriter writer)\n    {\n        if(!(value is DateTime dateTime)) \n            throw new ArgumentException(\"supposed to be DateTime\");\n        \n        writer.Write($\"{dateTime.ToString(_format)}\");\n    }\n\n    public bool TryCreateFormatter(Type type, out IFormatter formatter)\n    {\n        if (type != typeof(DateTime))\n        {\n            formatter = null;\n            return false;\n        }\n\n        formatter = this;\n        return true;\n    }\n}\n\n[Fact]\npublic void DateTimeFormatter(IHandlebars handlebars)\n{\n    var source = \"{{now}}\";\n\n    var format = \"d\";\n    var formatter = new CustomDateTimeFormatter(format);\n    handlebars.Configuration.FormatterProviders.Add(formatter);\n\n    var template = handlebars.Compile(source);\n    var data = new\n    {\n        now = DateTime.Now\n    };\n    \n    var result = template(data);\n    Assert.Equal(data.now.ToString(format), result);\n}\n```\n#### Notes\n- Formatters are resolved in reverse order according to registration. If multiple providers can provide formatter for a type the last registered would be used.\n\n### Shared environment\n\nBy default Handlebars will create standalone copy of environment for each compiled template. This is done in order to eliminate a chance of altering behavior of one template from inside of other one.\n\nUnfortunately, in case runtime has a lot of compiled templates (regardless of the template size) it may have significant memory footprint. This can be solved by using `SharedEnvironment`.\n\nTemplates compiled in `SharedEnvironment` will share the same configuration.\n\n#### Limitations\n\nOnly runtime configuration properties can be changed after the shared environment has been created. Changes to `Configuration.CompileTimeConfiguration` and other compile-time properties will have no effect. \n\n#### Example\n\n```c#\n[Fact]\npublic void BasicSharedEnvironment()\n{\n    var handlebars = Handlebars.CreateSharedEnvironment();\n    handlebars.RegisterHelper(\"registerLateHelper\", \n        (in EncodedTextWriter writer, in HelperOptions options, in Context context, in Arguments arguments) =>\n        {\n            var configuration = options.Frame\n                .GetType()\n                .GetProperty(\"Configuration\", BindingFlags.Instance | BindingFlags.NonPublic)?\n                .GetValue(options.Frame) as ICompiledHandlebarsConfiguration;\n            \n            var helpers = configuration?.Helpers;\n\n            const string name = \"lateHelper\";\n            if (helpers?.TryGetValue(name, out var @ref) ?? false)\n            {\n                @ref.Value = new DelegateReturnHelperDescriptor(name, (c, a) => 42);\n            }\n        });\n    \n    var _0_template = \"{{registerLateHelper}}\";\n    var _0 = handlebars.Compile(_0_template);\n    var _1_template = \"{{lateHelper}}\";\n    var _1 = handlebars.Compile(_1_template);\n    \n    var result = _1(null);\n    Assert.Equal(\"\", result); // `lateHelper` is not registered yet\n\n    _0(null);\n    result = _1(null);\n    Assert.Equal(\"42\", result);\n}\n```\n\n### Compatibility feature toggles\n\nCompatibility feature toggles defines a set of settings responsible for controlling compilation/rendering behavior. Each of those settings would enable certain feature that would break compatibility with canonical Handlebars.\nBy default all toggles are set to `false`. \n\n##### Legend\n- Areas\n  - `Compile-time`: takes affect at the time of template compilation\n  - `Runtime`: takes affect at the time of template rendering\n\n#### `RelaxedHelperNaming`\nIf `true` enables support for Handlebars.Net helper naming rules.\nThis enables helper names to be not-valid Handlebars identifiers (e.g. `{{ one.two }}`).\nSuch naming is not supported in Handlebarsjs and would break compatibility.\n\n##### Areas\n- `Compile-time`\n\n##### Example\n```c#\n[Fact]\npublic void HelperWithDotSeparatedName()\n{\n    var source = \"{{ one.two }}\";\n    var handlebars = Handlebars.Create();\n    handlebars.Configuration.Compatibility.RelaxedHelperNaming = true;\n    handlebars.RegisterHelper(\"one.two\", (context, arguments) => 42);\n\n    var template = handlebars.Compile(source);\n    var actual = template(null);\n    \n    Assert.Equal(\"42\", actual);\n}\n```\n\n#### HtmlEncoder\nUsed to switch between the legacy Handlebars.Net and the canonical Handlebars rules (or a custom implementation).\\\nFor Handlebars.Net 2.x.x `HtmlEncoderLegacy` is the default.\n\n`HtmlEncoder`\\\nImplements the canonical Handlebars rules.\n\n`HtmlEncoderLegacy`\\\nWill not encode:\\\n= (equals)\\\n&#96; (backtick)\\\n' (single quote)\n\nWill encode non-ascii characters `�`, `�`, ...\\\nInto HTML entities (`&lt;`, `&#226;`, `&#223;`, ...).\n\n##### Areas\n- `Runtime`\n\n##### Example\n```c#\n[Fact]\npublic void UseCanonicalHtmlEncodingRules()\n{\n    var handlebars = Handlebars.Create();\n    handlebars.Configuration.TextEncoder = new HtmlEncoder();\n\n    var source = \"{{Text}}\";\n    var value = new { Text = \"< �\" };\n\n    var template = handlebars.Compile(source);\n    var actual = template(value);\n            \n    Assert.Equal(\"&lt; �\", actual);\n}\n```\n\n## Performance\n\n### Compilation\n\nCompared to rendering, compiling is a fairly intensive process. While both are still measured in millseconds, compilation accounts for the most of that time by far. So, it is generally ideal to compile once and cache the resulting function to be re-used for the life of your process.\n\n### Rendering\nNearly all time spent in rendering is in the routine that resolves values against the model. Different types of objects have different performance characteristics when used as models.\n\n#### Model Types\n- The absolute fastest model is a `IDictionary<string, object>` (microseconds).\n- The next fastest is a POCO (typically a few milliseconds for an average-sized template and model), which uses traditional reflection and is fairly fast.\n- Rendering starts to get slower (into the tens of milliseconds or more) on dynamic objects.\n- The slowest (up to hundreds of milliseconds or worse) tend to be objects with custom type implementations (such as `ICustomTypeDescriptor`) that are not optimized for heavy reflection.\n\n## Future roadmap\n\nTBD\n\n## Contributing\n\nPull requests are welcome! The guidelines are pretty straightforward:\n- Only add capabilities that are already in the Mustache / Handlebars specs\n- Avoid dependencies outside of the .NET BCL\n- Maintain cross-platform compatibility (.NET/Mono; Windows/OSX/Linux/etc)\n- Follow the established code format\n"
        },
        {
          "name": "hbnet-icon.png",
          "type": "blob",
          "size": 11.1689453125,
          "content": null
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}