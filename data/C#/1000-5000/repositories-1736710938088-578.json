{
  "metadata": {
    "timestamp": 1736710938088,
    "page": 578,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ImGuiNET/ImGui.NET",
      "stars": 1929,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.0546875,
          "content": "syntax: glob\n\n#NuGet things\nproject.lock.json\n\n### VisualStudio ###\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\nmsbuild.log\n\n# Visual Studio 2015\n.vs/\n\n# Visual Studio 2015 Pre-CTP6\n*.sln.ide\n*.ide/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n**/packages/*\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n*.metaproj\n*.metaproj.tmp\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n### MonoDevelop ###\n\n*.pidb\n*.userprefs\n\n### Windows ###\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n### Linux ###\n\n*~\n\n# KDE directory preferences\n.directory\n\n### OSX ###\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# vim temporary files\n[._]*.s[a-w][a-z]\n[._]s[a-w][a-z]\n*.un~\nSession.vim\n.netrwhist\n*~\n\n# VS Code junk\n.vscode\n\n# MSVC Stuff\n*.VC.db\n\n# Rider/Jetbrains IDEs\n.idea\n\n# download dir\ndeps/\n\n# VS Launch\nlaunchSettings.json"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 0.6884765625,
          "content": "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" TreatAsLocalProperty=\"OutDir\">\n  <PropertyGroup>\n    <Configuration Condition=\"'$(Configuration)' == ''\">Debug</Configuration>\n    <RepositoryRootDirectory>$(MSBuildThisFileDirectory)</RepositoryRootDirectory>\n    <BinDir>$(RepositoryRootDirectory)bin</BinDir>\n    <OutputPath>$([System.IO.Path]::GetFullPath('$(RepositoryRootDirectory)bin\\$(Configuration)'))\\$(MSBuildProjectName)</OutputPath>\n    <BaseIntermediateOutputPath>$([System.IO.Path]::GetFullPath('$(RepositoryRootDirectory)bin\\obj\\$(MSBuildProjectName)'))\\</BaseIntermediateOutputPath>\n    <ProjectDir>$(MSBuildThisFileDirectory)</ProjectDir>\n  </PropertyGroup>\n</Project>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0791015625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 Eric Mellino and ImGui.NET contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.275390625,
          "content": "# ImGui.NET\n\nThis is a .NET wrapper for the immediate mode GUI library, Dear ImGui (https://github.com/ocornut/imgui). ImGui.NET lets you build graphical interfaces using a simple immediate-mode style. ImGui.NET is a .NET Standard library, and can be used on all major .NET runtimes and operating systems.\n\nIncluded is a basic sample program that shows how to use the library, and renders the UI using [Veldrid](https://github.com/veldrid/veldrid), a portable graphics library for .NET. By itself, Dear ImGui does not care what technology you use for rendering; it simply outputs textured triangles. Example renderers also exist for MonoGame and OpenTK (OpenGL).\n\nThis wrapper is built on top of [cimgui](https://github.com/cimgui/cimgui), which exposes a plain C API for Dear ImGui. If you are using Windows, OSX, or a mainline Linux distribution, then the ImGui.NET NuGet package comes bundled with a pre-built native library. If you are using another operating system, then you may need to build the native library yourself; see the cimgui repo for build instructions.\n\n[![NuGet](https://img.shields.io/nuget/v/ImGui.NET.svg)](https://www.nuget.org/packages/ImGui.NET)\n\n___As of February 2023, I (@mellinoe) am no longer able to publicly share updates to ImGui.NET and related libraries. A big thanks to @zaafar who continues to actively maintain the library and keep it up to date with new versions of native Dear ImGui. Feel free to join the [Discord server](https://discord.gg/s5EvvWJ) for more information about the current status of development.___\n\n# Building\n\nImGui.NET can be built in Visual Studio or on the command line. The .NET Core SDK is needed to build on the command line, and it can be downloaded [here](https://www.microsoft.com/net/core). Visual Studio 2017 is the minimum VS version supported for building.\n\n# Usage\n\nImGui.NET currently provides a raw wrapper around the ImGui native API, and also provides a very thin safe, managed API for convenience. It is currently very much like using the native library, which is very simple, flexible, and robust. The easiest way to figure out how to use the library is to read the documentation of imgui itself, mostly in the imgui.cpp, and imgui.h files, as well as the exported functions in cimgui.h. Looking at the [sample program code](https://github.com/ImGuiNET/ImGui.NET/tree/master/src) will also give some indication about basic usage.\n\n# Debugging native code\n\nImGui.NET is a wrapper over native code. By default, this native code is packaged and released in an optimized form, making debugging difficult. To obtain a debuggable version of the native code, follow these steps:\n\n1. Clone the [ImGui.NET-nativebuild](https://github.com/ImGuiNET/ImGui.NET-nativebuild) repo, at the tag matching the version of ImGui.NET you are using.\n2. In the ImGui.NET-nativebuild repo, run `build.cmd debug` or `build.sh debug` (depending on your platform).\n3. Copy the produced binaries (cimgui.dll, libcimgui.so, or libcimgui.dylib) into your application.\n4. Run the program under a native debugger, or enable mixed-mode debugging in Visual Studio.\n\n# See Also\n\nhttps://github.com/ocornut/imgui\n> Dear ImGui is a bloat-free graphical user interface library for C++. It outputs optimized vertex buffers that you can render anytime in your 3D-pipeline enabled application. It is fast, portable, renderer agnostic and self-contained (no external dependencies).\n\n> Dear ImGui is designed to enable fast iterations and to empower programmers to create content creation tools and visualization / debug tools (as opposed to UI for the average end-user). It favors simplicity and productivity toward this goal, and lacks certain features normally found in more high-level libraries.\n\n> Dear ImGui is particularly suited to integration in games engine (for tooling), real-time 3D applications, fullscreen applications, embedded applications, or any applications on consoles platforms where operating system features are non-standard.\n\nSee the [official screenshot thread](https://github.com/ocornut/imgui/issues/123) for examples of many different kinds of interfaces created with Dear ImGui.\n\nhttps://github.com/cimgui/cimgui\n> This is a thin c-api wrapper for the excellent C++ intermediate gui imgui. This library is intended as a intermediate layer to be able to use imgui from other languages that can interface with C .\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "download-native-deps.ps1",
          "type": "blob",
          "size": 3.3134765625,
          "content": "param (\n    [Parameter(Mandatory=$false)][string]$repository,\n    [Parameter(Mandatory=$true)][string]$tag\n)\n\nif( -not $repository )\n{\n    $repository=\"https://github.com/mellinoe/imgui.net-nativebuild\"\n}\n\nWrite-Host Downloading native binaries from GitHub Releases...\n\nif (Test-Path $PSScriptRoot\\deps\\cimgui\\)\n{\n    Remove-Item $PSScriptRoot\\deps\\cimgui\\ -Force -Recurse | Out-Null\n}\nNew-Item -ItemType Directory -Force -Path $PSScriptRoot\\deps\\cimgui\\linux-x64 | Out-Null\nNew-Item -ItemType Directory -Force -Path $PSScriptRoot\\deps\\cimgui\\osx | Out-Null\nNew-Item -ItemType Directory -Force -Path $PSScriptRoot\\deps\\cimgui\\win-x86 | Out-Null\nNew-Item -ItemType Directory -Force -Path $PSScriptRoot\\deps\\cimgui\\win-x64 | Out-Null\nNew-Item -ItemType Directory -Force -Path $PSScriptRoot\\deps\\cimgui\\win-arm64 | Out-Null\n\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\n$client = New-Object System.Net.WebClient\n$client.DownloadFile(\n    \"$repository/releases/download/$tag/cimgui.win-x86.dll\",\n    \"$PSScriptRoot/deps/cimgui/win-x86/cimgui.dll\")\nif( -not $? )\n{\n    $msg = $Error[0].Exception.Message\n    Write-Error \"Couldn't download x86 cimgui.dll. This most likely indicates the Windows native build failed.\"\n    exit\n}\n\nWrite-Host \"- cimgui.dll (x86)\"\n\n$client.DownloadFile(\n    \"$repository/releases/download/$tag/cimgui.win-x64.dll\",\n    \"$PSScriptRoot/deps/cimgui/win-x64/$configuration/cimgui.dll\")\nif( -not $? )\n{\n    $msg = $Error[0].Exception.Message\n    Write-Error \"Couldn't download x64 cimgui.dll. This most likely indicates the Windows native build failed.\"\n    exit\n}\n\nWrite-Host \"- cimgui.dll (x64)\"\n\n$client.DownloadFile(\n    \"$repository/releases/download/$tag/cimgui.win-arm64.dll\",\n    \"$PSScriptRoot/deps/cimgui/win-arm64/$configuration/cimgui.dll\")\nif( -not $? )\n{\n    $msg = $Error[0].Exception.Message\n    Write-Error \"Couldn't download arm64 cimgui.dll. This most likely indicates the Windows native build failed.\"\n    exit\n}\n\nWrite-Host \"- cimgui.dll (arm64)\"\n\n$client.DownloadFile(\n    \"$repository/releases/download/$tag/cimgui.so\",\n    \"$PSScriptRoot/deps/cimgui/linux-x64/cimgui.so\")\nif( -not $? )\n{\n    $msg = $Error[0].Exception.Message\n    Write-Error \"Couldn't download cimgui.so. This most likely indicates the Linux native build failed.\"\n    exit\n}\n\nWrite-Host - cimgui.so\n\n$client.DownloadFile(\n    \"$repository/releases/download/$tag/cimgui.dylib\",\n    \"$PSScriptRoot/deps/cimgui/osx/cimgui.dylib\")\nif( -not $? )\n{\n    $msg = $Error[0].Exception.Message\n    Write-Error \"Couldn't download cimgui.dylib. This most likely indicates the macOS native build failed.\"\n    exit\n}\n\nWrite-Host \"- cimgui.dylib\"\n\n$client.DownloadFile(\n    \"https://github.com/mellinoe/imgui.net-nativebuild/releases/download/$tag/definitions.json\",\n    \"$PSScriptRoot/src/CodeGenerator/definitions/cimgui/definitions.json\")\nif( -not $? )\n{\n    $msg = $Error[0].Exception.Message\n    Write-Error \"Couldn't download definitions.json.\"\n    exit\n}\n\nWrite-Host - definitions.json\n\n$client.DownloadFile(\n    \"https://github.com/mellinoe/imgui.net-nativebuild/releases/download/$tag/structs_and_enums.json\",\n    \"$PSScriptRoot/src/CodeGenerator/definitions/cimgui/structs_and_enums.json\")\nif( -not $? )\n{\n    $msg = $Error[0].Exception.Message\n    Write-Error \"Couldn't download structs_and_enums.json.\"\n    exit\n}\n\nWrite-Host - structs_and_enums.json\n"
        },
        {
          "name": "download-native-deps.sh",
          "type": "blob",
          "size": 1.7373046875,
          "content": "#!/usr/bin/env bash\n\nif [ $# -eq 0 ]; then\n    echo \"Missing first argument. Please provide the tag to download.\"\n    exit 1\nfi\n\nTAG=$1\n\nSCRIPT_ROOT=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\n\necho \"Script is located in: $SCRIPT_ROOT\"\necho \"Using Tag: $TAG\"\n\necho -n \"Downloading windows x86 cimgui: \"\ncurl -sfLo \"$SCRIPT_ROOT/deps/cimgui/win-x86/cimgui.dll\" \"https://github.com/mellinoe/imgui.net-nativebuild/releases/download/$TAG/cimgui.win-x86.dll\"\necho \"\"\n\necho -n \"Downloading windows x64 cimgui: \"\ncurl -sfLo \"$SCRIPT_ROOT/deps/cimgui/win-x64/cimgui.dll\" \"https://github.com/mellinoe/imgui.net-nativebuild/releases/download/$TAG/cimgui.win-x64.dll\"\necho \"\"\n\necho -n \"Downloading windows arm64 cimgui: \"\ncurl -sfLo \"$SCRIPT_ROOT/deps/cimgui/win-arm64/cimgui.dll\" \"https://github.com/mellinoe/imgui.net-nativebuild/releases/download/$TAG/cimgui.win-arm64.dll\"\necho \"\"\n\necho -n \"Downloading linux x64 cimgui: \"\ncurl -sfLo \"$SCRIPT_ROOT/deps/cimgui/linux-x64/cimgui.so\" \"https://github.com/mellinoe/imgui.net-nativebuild/releases/download/$TAG/cimgui.so\"\necho \"\"\n\necho -n \"Downloading osx universal (x86_64 and arm64) cimgui: \"\ncurl -sfLo \"$SCRIPT_ROOT/deps/cimgui/osx/cimgui.dylib\" \"https://github.com/mellinoe/imgui.net-nativebuild/releases/download/$TAG/cimgui.dylib\"\necho \"\"\n\necho -n \"Downloading definitions json file: \"\ncurl -sfLo \"$SCRIPT_ROOT/src/CodeGenerator/definitions/cimgui/definitions.json\" \"https://github.com/mellinoe/imgui.net-nativebuild/releases/download/$TAG/definitions.json\"\necho \"\"\n\necho -n \"Downloading structs and enums json file: \"\ncurl -sfLo \"$SCRIPT_ROOT/src/CodeGenerator/definitions/cimgui/structs_and_enums.json\" \"https://github.com/mellinoe/imgui.net-nativebuild/releases/download/$TAG/structs_and_enums.json\"\necho \"\""
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}