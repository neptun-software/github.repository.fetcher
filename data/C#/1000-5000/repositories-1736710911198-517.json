{
  "metadata": {
    "timestamp": 1736710911198,
    "page": 517,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hadashiA/VContainer",
      "stars": 2072,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 7.052734375,
          "content": "# Created by https://www.toptal.com/developers/gitignore/api/csharp\n# Edit at https://www.toptal.com/developers/gitignore?templates=csharp\n\n### Csharp ###\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n/packages\n# except build/, which is used as an MSBuild target.\n#!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- Backup*.rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# End of https://www.toptal.com/developers/gitignore/api/csharp\n\n# Unity\n\n### Unity ###\nVContainer/[Ll]ibrary/\nVContainer/[Tt]emp/\nVContainer/[Oo]bj/\nVContainer/[Bb]uild/\nVContainer/[Bb]uilds/\nVContainer/Assets/AssetStoreTools*\n\nVContainer.Benchmark/[Ll]ibrary/\nVContainer.Benchmark/[Tt]emp/\nVContainer.Benchmark/[Oo]bj/\nVContainer.Benchmark/[Bb]uild/\nVContainer.Benchmark/[Bb]uilds/\nVContainer.Benchmark/Assets/AssetStoreTools*\n\n# Autogenerated VS/MD/Consulo solution and project files\nVContainer/ExportedObj/\nVContainer/.consulo/\nVContainer/*.csproj\nVContainer/*.unityproj\nVContainer/*.sln\nVContainer/*.suo\nVContainer/*.tmp\nVContainer/*.user\nVContainer/*.userprefs\nVContainer/*.pidb\nVContainer/*.booproj\nVContainer/*.svd\nVContainer/bin/*\nVContainer/obj/*\n\nVContainer.Benchmark/ExportedObj/\nVContainer.Benchmark/.consulo/\nVContainer.Benchmark/*.csproj\nVContainer.Benchmark/*.unityproj\nVContainer.Benchmark/*.sln\nVContainer.Benchmark/*.suo\nVContainer.Benchmark/*.tmp\nVContainer.Benchmark/*.user\nVContainer.Benchmark/*.userprefs\nVContainer.Benchmark/*.pidb\nVContainer.Benchmark/*.booproj\nVContainer.Benchmark/*.svd\nVContainer.Benchmark/bin/*\nVContainer.Benchmark/obj/*\n\n# Rider\n**/.idea/*\n**/.idea.meta\n\n.DS_Store\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.02734375,
          "content": "Copyright (c) 2020 hadashiA\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.3896484375,
          "content": "# VContainer\n\n![](https://github.com/hadashiA/VContainer/workflows/Test/badge.svg)\n![](https://img.shields.io/badge/unity-2018.4+-000.svg)\n[![Releases](https://img.shields.io/github/release/hadashiA/VContainer.svg)](https://github.com/hadashiA/VContainer/releases)\n[![openupm](https://img.shields.io/npm/v/jp.hadashikick.vcontainer?label=openupm&registry_uri=https://package.openupm.com)](https://openupm.com/packages/jp.hadashikick.vcontainer/)\n\nThe extra fast DI (Dependency Injection) library running on Unity Game Engine.\n\n\"V\" means making Unity's initial \"U\" more thinner and solid ... !\n\n- **Fast Resolve:** Basically 5-10x faster than Zenject.\n- **Minimum GC Allocation:** In Resolve, we have **zero allocation** without spawned instances.\n- **Small code size:** Few internal types and few .callvirt.\n- **Assisting correct DI way:** Provides simple and transparent API, and carefully select features. This prevents the DI declaration from becoming overly complex.\n- **Immutable Container:** Thread safety and robustness.\n\n## Features\n\n- Constructor Injection / Method Injection / Property & Field Injection\n- Dispatch own PlayerLoopSystem\n- Flexible scoping\n  - Application can freely create nested Lifetime Scope with any async way for you like.\n- Accelerated mode with SourceGenerator (Optional)\n- Diagnositcs window on unity editor\n- UniTask Integration\n- ECS Integration *beta*\n\n## Documentation\n\nVisit [vcontainer.hadashikick.jp](https://vcontainer.hadashikick.jp) to view the full documentation.\n\n## Performance\n\n![](./website/static/img/benchmark_result.png)\n\n### GC Alloc Result Example\n\n![](./website/static/img/gc_alloc_profiler_result.png)\n\n![](./website/static/img/screenshot_profiler_vcontainer.png)\n\n![](./website/static/img/screenshot_profiler_zenject.png)\n\n\n## Installation\n\n*Requires Unity 2018.4+*\n\n### Install via UPM (using Git URL)\n\n1. Navigate to your project's Packages folder and open the manifest.json file.\n2. Add this line below the \"dependencies\": { line\n    - ```json title=\"Packages/manifest.json\"\n      \"jp.hadashikick.vcontainer\": \"https://github.com/hadashiA/VContainer.git?path=VContainer/Assets/VContainer#1.16.8\",\n      ```\n3. UPM should now install the package.\n\n### Install via OpenUPM\n\n\n1. The package is available on the [openupm registry](https://openupm.com). It's recommended to install it via [openupm-cli](https://github.com/openupm/openupm-cli).\n2. Execute the openum command.\n    - ```\n      openupm add jp.hadashikick.vcontainer\n      ```\n\n### Install manually (using .unitypackage)\n\n1. Download the .unitypackage from [releases](https://github.com/hadashiA/VContainer/releases) page.\n2. Open VContainer.x.x.x.unitypackage\n\n## Basic Usage\n\nFirst, create a scope. References are automatically resolved for types registered here.\n\n```csharp\npublic class GameLifetimeScope : LifetimeScope\n{\n    public override void Configure(IContainerBuilder builder)\n    {\n        builder.RegisterEntryPoint<ActorPresenter>();\n\n        builder.Register<CharacterService>(Lifetime.Scoped);\n        builder.Register<IRouteSearch, AStarRouteSearch>(Lifetime.Singleton);\n\n        builder.RegisterComponentInHierarchy<ActorsView>();\n    }\n}\n```\n\nWhere definitions of classes are\n\n```csharp\npublic interface IRouteSearch\n{\n}\n\npublic class AStarRouteSearch : IRouteSearch\n{\n}\n\npublic class CharacterService\n{\n    readonly IRouteSearch routeSearch;\n\n    public CharacterService(IRouteSearch routeSearch)\n    {\n        this.routeSearch = routeSearch;\n    }\n}\n```\n\n```csharp\npublic class ActorsView : MonoBehaviour\n{\n}\n```\n\nand\n\n```csharp\npublic class ActorPresenter : IStartable\n{\n    readonly CharacterService service;\n    readonly ActorsView actorsView;\n\n    public ActorPresenter(\n        CharacterService service,\n        ActorsView actorsView)\n    {\n        this.service = service;\n        this.actorsView = actorsView;\n    }\n\n    void IStartable.Start()\n    {\n        // Scheduled at Start () on VContainer's own PlayerLoopSystem.\n    }\n}\n```\n\n\n- In this example, the routeSearch of CharacterService is automatically set as the instance of AStarRouteSearch when CharacterService is resolved.\n- Further, VContainer can have a Pure C# class as an entry point. (Various timings such as Start, Update, etc. can be specified.) This facilitates \"separation of domain logic and presentation\".\n\n### Flexible Scoping with async\n\nLifetimeScope can dynamically create children. This allows you to deal with the asynchronous resource loading that often occurs in games.\n\n```csharp\npublic void LoadLevel()\n{\n    // ... Loading some assets\n\n    // Create a child scope\n    instantScope = currentScope.CreateChild();\n\n    // Create a child scope with LifetimeScope prefab\n    instantScope = currentScope.CreateChildFromPrefab(lifetimeScopePrefab);\n\n    // Create a child with additional registration\n    instantScope = currentScope.CreateChildFromPrefab(\n        lifetimeScopePrefab,\n        builder =>\n        {\n            // Extra Registrations ...\n        });\n\n    instantScope = currentScope.CreateChild(builder =>\n    {\n        // ExtraRegistrations ...\n    });\n\n    instantScope = currentScope.CreateChild(extraInstaller);\n}\n\npublic void UnloadLevel()\n{\n    instantScope.Dispose();\n}\n```\n\nIn addition, you can create a parent-child relationship with LifetimeScope in an Additive scene.\n\n```csharp\nclass SceneLoader\n{\n    readonly LifetimeScope currentScope;\n\n    public SceneLoader(LifetimeScope currentScope)\n    {\n        this.currentScope = currentScope; // Inject the LifetimeScope to which this class belongs\n    }\n\n    IEnumerator LoadSceneAsync()\n    {\n        // LifetimeScope generated in this block will be parented by `this.lifetimeScope`\n        using (LifetimeScope.EnqueueParent(currentScope))\n        {\n            // If this scene has a LifetimeScope, its parent will be `parent`.\n            var loading = SceneManager.LoadSceneAsync(\"...\", LoadSceneMode.Additive);\n            while (!loading.isDone)\n            {\n                yield return null;\n            }\n        }\n    }\n\n    // UniTask example\n    async UniTask LoadSceneAsync()\n    {\n        using (LifetimeScope.EnqueueParent(parent))\n        {\n            await SceneManager.LoadSceneAsync(\"...\", LoadSceneMode.Additive);\n        }\n    }\n}\n```\n\n```csharp\n// LifetimeScopes generated during this block will be additionally Registered.\nusing (LifetimeScope.Enqueue(builder =>\n{\n    // Register for the next scene not yet loaded\n    builder.RegisterInstance(extraInstance);\n}))\n{\n    // Loading the scene..\n}\n```\n\nSee [scoping](https://vcontainer.hadashikick.jp/scoping/lifetime-overview) for more information.\n\n## UniTask\n\n```csharp\npublic class FooController : IAsyncStartable\n{\n    public async UniTask StartAsync(CancellationToken cancellation)\n    {\n        await LoadSomethingAsync(cancellation);\n        await ...\n        ...\n    }\n}\n```\n\n```csharp\nbuilder.RegisterEntryPoint<FooController>();\n```\n\nSee [integrations](https://vcontainer.hadashikick.jp/integrations/unitask) for more information.\n\n\n## Diagnostics Window\n\n![](./website/static/img/screenshot_diagnostics_window.png)\n\nSee [diagnostics](https://vcontainer.hadashikick.jp/diagnostics/diagnostics-window) for more information.\n\n## Credits\n\nVContainer is inspired by:\n\n- [Zenject](https://github.com/modesttree/Zenject) / [Extenject](https://github.com/svermeulen/Extenject).\n- [Autofac](http://autofac.org) - [Autofac Project](https://github.com/autofac/Autofac).\n- [MicroResolver](https://github.com/neuecc/MicroResolver)\n\n## Author\n\n[@hadashiA](https://twitter.com/hadashiA)\n\n## License\n\nMIT\n"
        },
        {
          "name": "TestSettings.json",
          "type": "blob",
          "size": 0.06640625,
          "content": "{\n  \"scriptingBackend\":1,\n  \"Architecture\":null,\n  \"apiProfile\":6\n}\n"
        },
        {
          "name": "VContainer.SourceGenerator.Roslyn3",
          "type": "tree",
          "content": null
        },
        {
          "name": "VContainer.SourceGenerator",
          "type": "tree",
          "content": null
        },
        {
          "name": "VContainer.Standalone",
          "type": "tree",
          "content": null
        },
        {
          "name": "VContainer.sln",
          "type": "blob",
          "size": 2.6298828125,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"VContainer.Standalone\", \"VContainer.Standalone\\VContainer.Standalone.csproj\", \"{799DADAC-51EB-4039-8DAB-323DA3638F50}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"VContainer.SourceGenerator.Roslyn3\", \"VContainer.SourceGenerator.Roslyn3\\VContainer.SourceGenerator.Roslyn3.csproj\", \"{F80B5656-2CC8-425D-B140-DDCF2A1CA6CF}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"VContainer.SourceGenerator\", \"VContainer.SourceGenerator\\VContainer.SourceGenerator.csproj\", \"{FB341B09-8197-45B1-92AC-22D5385FC187}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{8519382C-D1E4-41D3-B5F0-931A273D78B2}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"VContainer.StandaloneTests\", \"tests\\VContainer.StandaloneTests\\VContainer.StandaloneTests.csproj\", \"{2B088390-5289-4E81-90ED-839C8F4242BE}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{799DADAC-51EB-4039-8DAB-323DA3638F50}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{799DADAC-51EB-4039-8DAB-323DA3638F50}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{799DADAC-51EB-4039-8DAB-323DA3638F50}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{799DADAC-51EB-4039-8DAB-323DA3638F50}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{F80B5656-2CC8-425D-B140-DDCF2A1CA6CF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{F80B5656-2CC8-425D-B140-DDCF2A1CA6CF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{F80B5656-2CC8-425D-B140-DDCF2A1CA6CF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{F80B5656-2CC8-425D-B140-DDCF2A1CA6CF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{FB341B09-8197-45B1-92AC-22D5385FC187}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FB341B09-8197-45B1-92AC-22D5385FC187}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FB341B09-8197-45B1-92AC-22D5385FC187}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FB341B09-8197-45B1-92AC-22D5385FC187}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{2B088390-5289-4E81-90ED-839C8F4242BE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{2B088390-5289-4E81-90ED-839C8F4242BE}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{2B088390-5289-4E81-90ED-839C8F4242BE}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{2B088390-5289-4E81-90ED-839C8F4242BE}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{2B088390-5289-4E81-90ED-839C8F4242BE} = {8519382C-D1E4-41D3-B5F0-931A273D78B2}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "VContainer",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}