{
  "metadata": {
    "timestamp": 1736710862337,
    "page": 408,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alelievr/NodeGraphProcessor",
      "stars": 2373,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4765625,
          "content": "/[Ll]ibrary/\n/[Tt]emp/\n/[Oo]bj/\n/[Bb]uild/\n/[Bb]uilds/\n/[Ll]ogs/\n/Assets/AssetStoreTools*\n\n# Visual Studio 2015 cache directory\n/.vs/\n\n# Autogenerated VS/MD/Consulo solution and project files\nExportedObj/\n.consulo/\n*.csproj\n*.unityproj\n*.sln\n*.suo\n*.tmp\n*.user\n*.userprefs\n*.pidb\n*.booproj\n*.svd\n*.pdb\n\n# Unity3D generated meta files\n*.pidb.meta\n\n# Unity3D Generated File On Crash Reports\nsysinfo.txt\n\n# Builds\n*.apk\n*.unitypackage\n\n# Osx finder cache files\n.DS_Store\n.idea/\nUserSettings\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vsconfig",
          "type": "blob",
          "size": 0.0986328125,
          "content": "ï»¿{\n  \"version\": \"1.0\",\n  \"components\": [ \n    \"Microsoft.VisualStudio.Workload.ManagedGame\"\n  ]\n} \n"
        },
        {
          "name": "Assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.6220703125,
          "content": "# Changelog\nAll notable changes to this package will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [1.4.0]\n\n### Fixed\n- Fixed fields with [Settings] attribute not showing up with inheritance.\n- Fixed selection still active when selecting nodes without inspector fields.\n- Fixed multi-selection drag and drop of edges.\n- Fixed errors when a parameter is destroyed and it's reference is still used in the graph.\n\n### Changed\n- Fields with both attributes [SerializeField] and [ShowInInspector] are now visible in both the node and inspector.\n\n## [1.3.0]\n\n### Added\n- Added a callback on the BaseGraph class to know when the asset is deleted on the disk.\n- Added the support of [InspectorName] to change the display name of fields in the node.\n\n### Fixed\n- Fixed relay node not applying custom conversions when needed\n- Fixed the node create menu not listing all nodes when created from edge drag.\n- Fixed Int vector drawer display in nodes.\n- Fixed parameter not editable in Unity 2021.2.\n\n### Changed\n- Deprecated the FieldFactory and [FieldDrawer] system. You can use Unity's CustomPropertyDrawer instead.\n- SerializedProperties are now used to display the properties in the node, so they support Unity's default UI and attributes for all properties.\n\n## [1.2.0]\n\n### Added\n- Renamable nodes\n- Added an API in the toolbar view to add separators and custom UI fields.\n- Added API to check if node was created from a duplication operation (see BaseNode.createdFromDuplication and BaseNode.createdWithinGroup).\n\n### Changed\n- Node inspector settings are now serialized for the lifetime of an editor session (not between sessions).\n\n### Fixed\n- Fixed GetNodeViewTypeFromType not supporting inheritance.\n- Fixed nodes loosing the graph reference after the asset was changed in by an external process.\n\n## [1.1.2]\n\n### Fixed\n- Fixed a nullref that happened after closing the graph and undoing a change on a parameter\n- Fixed an issue where an undo broke the parameter values\n- Fixed edges disappearing after an undo made in the scene and a graph was opened.\n\n## [1.1.1]\n\n### Fixed\n- Fixed issues with relay node\n\n## [1.1.0]\n\n### Added\n- Added vertical ports\n- Added an example with Waitable and async nodes\n- Added drag and drop support for assets and scene objects directly into a graph\n\n### Fixed\n- Fixed ports duplicated after undo\n\n## [1.0.1]\n\n### Added\n- You can now re-order elements inside the blackboard.\n\n## [1.0.0]\n\n### Added\n- Added support of custom property drawers for exposed parameters in the graph inspector (the one that shows in the inspector when the graph is selected).\n\n### Change\n- Serialization backend (use [SerializeReference] instead of JSON)\n\n## [0.10.4]\n\n### Added\n- Added deletable bool API on the BaseNode\n\n### Fixed\n- Fix missing and inconsistent field drawers on inherited node fields\n- Fix inconsistent field drawer positions after unsupported fields\n- Fixed port sync code\n- Fixed exception to log not handling correctly the stacktraces\n\n## [0.10.1]\n\n### Fixed\n- Node creation menu wasn't showing all graph specific nodes\n\n## [0.10.0]\n\n### Added\n- Added an API to exclude nodes from the creation menu either based on graph type or graph settings. See IsCompatibleWithGraph and NodeMenuItemAttribute attributes. \n\n### Fixed\n- Fixed locale serialization issue with float and vectors\n\n## [0.9.4]\n\n### Fixed\n- Fixed port order not correct.\n\n## [0.9.3]\n\n### Fixed\n- Fix selection lost after undo / redo\n- Fix node not removed from the inspector when the node is deleted in the graph\n- Fix performance issue with port sync\n- Fix nodes not disabled when deleted due to undo/redo\n\n## [0.9.2]\n\n### Added\n- Added sticky notes (only for 2020.1+)\n\n## [0.9.0]\n\n### Added\n- Added the [ShowAsDrawer] Attribute to display a drawer beside an input port\n\n### Fixed\n- Fixed relay node packing workflow and some deletion issues\n- Fixed ArgumentOutOfRange in relay node\n- Fixed relay node creation from input port\n\n## [0.8.0]\n\n### Added\n- Depth first compute order (enabled by default) instead of breadth first\n- Cycle detection in the graph, cyclic nodes are now marked with a compute order of -2\n- Added a node create menu when dropping an edge in the graph that also connects the edge to the new node (like in ShaderGraph or VFX Graph)\n- Added ITypeAdapter.GetIncompatibleTypes to list all the incompatible types (prevent automatic casting / unwanted connectable ports, can be used to exclude a conversion to System.Object for example)\n- Added a node inspector to show advanced settings in the inspector, see `ShowInInspector.cs` and `DrawDefaultInspector(bool fromInspector)` for more details.\n\n### Changed\n- Improved a lot the edge connection behavior for both input and output ports\n- Improved domain reload performances by using `TypeCache` when possible\n- Node copy/pasting now keeps the connected edges\n- Copy/paste now works between multiple graph windows\n- Copy/paste now supports node groups\n\n### Fixed\n- Fixed delete of multiple relay node at the same time breaking the graph\n- Fixed undo event not being unregistered when closing the graph\n- Fixed undo on parameter creation / deletion\n- Fixed toolbar AddButtons deleting existing buttons\n\n## [0.7.1]\n\n### Added\n- VisibleIf attribute in nodes, allow you to show fields only when another field have a specific value.\n- Added the possibility to hide controls when the mouse is not over the node\n\n## [0.7.0]\n\n### Added\n- Added a method to call the onProcess callback in the graph\n- Support of multiple [NodeMenuItemAttribute] on the same class\n\n### Fixed\n- Fixed execution error in player when using IL2CPP\n- Fixed ObjectField creation with FieldFactory\n\n## [0.6.0]\n\n### Added\n- Added Relay nodes\n- Added API to have a custom Edge Listener\n\n### Changed\n- When a port is disconnected, it's value is set to null or default.\n\n### Fixed\n- Window menu graph example\n\n## [0.5.0]\n\n### Added\n\n- Added StackNode with custom view\n- Added an API to notify the graph that a node have changed (BaseGraph.NotifyNodeChanged)\n\n## [0.4.0]\n\n### Changed\n\n- Renamed Comment Block by Group\n\n## [0.3.0]\n\n### Fixed\n\n- Fixed Enums fields created via FieldFactory (inspector graph UI for properties should now work with enums)\n\n### Added\n\n- User defined type conversions inside the graph (ex: float to vector). See TypeAdapter.cs\n\n## [0.2.0]\n\n### Fixed\n\n- Fixed build errors\n- Fixed badge distance when node used a custom size\n\n## [0.1.0]\n\n### Added\n\n- API to create C# template menu items (and moved the default Node and NodeView templates to Examples)\n- Added an event that is fired when something is changed inside the graph (BaseGraph.onGraphChanges)\n- Added support of node messages (you can attach one message with an icon to a node, either from the process function or from the view. See `AddMessage` and `AddMessageView` functions)\n![image](https://user-images.githubusercontent.com/6877923/63230798-07593f00-c212-11e9-92ea-ec3ba3c11ba0.png)\n\n\n### Fixed\n\n- When switching a port type, the connected edges are now removed if the new port type is incompatible.\n\n## [0.0.0]\n\n### Added\n\n- Node and Graph property serialization (as json) Scriptable Object to store graph as a Unity asset.\n- Highly customizable and simple node and links API\n- Support multi-input into a container (multiple float into a list of float for example)\n- Graph processor which execute node's logic with a - dependency order\n- [Powerful C# API to add new nodes / graphs](https://github.com/alelievr/NodeGraphProcessor/wiki/Node-scripting-API)\n- Exposed parameters that can be set per-asset to customize the graph processing from scripts or the inspector\n- Search window to create new nodes\n- Colored comment blocks (node groups)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) 2018 Antoine Lelievre\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ProjectSettings",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.0712890625,
          "content": "# NodeGraphProcessor\nNode graph editor framework focused on data processing using Unity UIElements, GraphView and C# 4.7\n\n[![Discord](https://img.shields.io/discord/823720615965622323.svg)](https://discord.gg/XuMd3Z5Rym)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/4c62ece874d14a0b965b92cb163e3146)](https://www.codacy.com/manual/alelievr/NodeGraphProcessor?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=alelievr/NodeGraphProcessor&amp;utm_campaign=Badge_Grade)\n[![openupm](https://img.shields.io/npm/v/com.alelievr.node-graph-processor?label=openupm&registry_uri=https://package.openupm.com)](https://openupm.com/packages/com.alelievr.node-graph-processor/)\n\nThis node based solution provides a great C# API allowing you to implement conditional graphs, dependencies graphs, processing graphs and more.  \n![image](https://user-images.githubusercontent.com/6877923/83576832-f2486500-a532-11ea-9d2a-a6b75b980813.png)\n\nBased on Unity's GraphView technology, NodeGraphProcessor is also very fast and works well with large graphs.  \n![Performance](https://user-images.githubusercontent.com/6877923/83576843-f70d1900-a532-11ea-80fb-c8fede6aa7ed.gif)\n\nSimple and powerful C# node API to create new nodes and custom views.\n\n```CSharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing GraphProcessor;\nusing System.Linq;\n\n[System.Serializable, NodeMenuItem(\"Operations/Sub\")] // Add the node in the node creation context menu\npublic class SubNode : BaseNode\n{\n    [Input(name = \"A\")]\n    public float                inputA;\n    [Input(name = \"B\")]\n    public float                inputB;\n\n    [Output(name = \"Out\")]\n    public float\t\t\t\toutput;\n\n    public override string\t\tname => \"Sub\";\n\n    // Called when the graph is process, process inputs and assign the result in output.\n    protected override void Process()\n    {\n        output = inputA - inputB;\n    }\n}\n```\n\n## Unity Compatible versions\n\nThis project requires at least Unity **2020.2** with a scripting runtime version of 4.x in player settings.  \nThe current Unity version used for the project is **2020.2.0f1**, if you want to install NodeGraphProcessor in an older unity project, you can install it via Open UPM (minimum version: Unity **2019.3**).\n\n## Installation\n\n<details><summary>Instructions</summary>\n\n### Install Manually\nThere are two ways to install this asset: you can use the Unity package manager or move the entire repo inside your Assets folder.\nTo install using the package manager:\n\n- download this repo\n- inside the package manager click the '+' button at the bottom to add a package from disk\n- then select the package.json file located in `Assets/NodeGraphProcessor`\n- package is installed :)\n\n### Install via OpenUPM\n\nThe package is available on the [openupm registry](https://openupm.com). It's recommended to install it via [openupm-cli](https://github.com/openupm/openupm-cli).\n\n```\nopenupm add com.alelievr.node-graph-processor\n```\n\n### Install via Git\n\nAlternatively, you can use the [git address feature in the package manager](https://forum.unity.com/threads/git-support-on-package-manager.573673/) on the branch [#upm](https://github.com/alelievr/NodeGraphProcessor/tree/upm), it only contains the package but it may be out of sync compared to master.\n\nNote that you'll not have access to the examples provided in this repo because the package only include the core of NodeGraphProcessor.\n\n</details>\n\n\n## Community \n\nJoin the [NodeGraphProcessor Discord server](https://discord.gg/XuMd3Z5Rym)! \n\n## Features\n\n- Node and Graph property serialization (as json)\n- Scriptable Object to store graph as a Unity asset.\n- Highly customizable and simple node and links API\n- Support multi-input into a container (multiple float into a list of float for example)\n- Graph processor which execute node's logic with a dependency order\n- [Documented C# API to add new nodes / graphs](https://github.com/alelievr/NodeGraphProcessor/wiki/Node-scripting-API)\n- Exposed parameters that can be set per-asset to customize the graph processing from scripts or the inspector\n- Parameter set mode, you can now output data from thegraph using exposed parameters. Their values will be updated when the graph is processed\n- Search window to create new nodes\n- Colored groups\n- Node messages (small message with it's icon beside the node)\n- Stack Nodes\n- Relay nodes\n- Display additional settings in the inspector\n- Node creation menu on edge drop\n- Simplified edge connection compared to default GraphView (ShaderGraph and VFX Graph)\n- Multiple graph window workflow (copy/paste)\n- Vertical Ports\n- Sticky notes (requires Unity 2020.1)\n- Renamable nodes\n\nMore details are available [in the Changelog](CHANGELOG.md)\n\n## Documentation\n\nAPI doc is available here: [alelievr.github.io/NodeGraphProcessor](https://alelievr.github.io/NodeGraphProcessor/api/index.html)\n\nThe user manual is hosted using [Github Wiki](https://github.com/alelievr/NodeGraphProcessor/wiki).\n\n## Remaining to do\n\n- Investigate for ECS/Jobs integration\n- API to create the graph in C#\n- Subgraphs\n\nFor more details consult our [Github Project page](https://github.com/alelievr/NodeGraphProcessor/projects/2).\n\n## Projects made with NodeGraphProcessor\n\n### [Mixture](https://github.com/alelievr/Mixture)\n\n[![image](https://user-images.githubusercontent.com/6877923/98482247-61239b80-2200-11eb-9d83-a1cba4cc376a.png)](https://github.com/alelievr/Mixture)\n\nWant to be in the made with list? [Send a message to the issue #14](https://github.com/alelievr/NodeGraphProcessor/issues/14)\n\n## Gallery\n\n### Minimap\n![](https://user-images.githubusercontent.com/6877923/90036471-6043a200-dcc3-11ea-8702-9ccc62cb0f8a.gif)\n\n### Relay nodes\n![](https://user-images.githubusercontent.com/6877923/89329982-e04c8500-d68f-11ea-8218-261225170978.gif)\n\n### Node connection menu\n![](https://user-images.githubusercontent.com/6877923/89330117-12f67d80-d690-11ea-9b62-f878b86b8342.gif)\n\n### Node creation menu\n![](https://user-images.githubusercontent.com/6877923/58935811-893adf80-876e-11e9-9f69-69ce51a432b8.png)\n\n### Graph Parameters\n![](https://user-images.githubusercontent.com/6877923/90035202-d6470980-dcc1-11ea-92e0-a754820bdc55.png)\n\n### Groups\n![](https://user-images.githubusercontent.com/6877923/58935692-3fea9000-876e-11e9-945e-8a874a4586a9.png)\n\n### Node Settings\n![](https://user-images.githubusercontent.com/6877923/71757124-c34e9a00-2e93-11ea-900c-63ecd772af3f.gif)\n\n### Node Messages\n![](https://user-images.githubusercontent.com/6877923/63230815-51dabb80-c212-11e9-9d54-382e649e77f1.png)\n\n### Conditional Processing (in Example)\n![](https://user-images.githubusercontent.com/6877923/69500269-e469b580-0ef9-11ea-9c4b-f58e793f7ecd.gif)\n\n### Stacks\n![](https://user-images.githubusercontent.com/6877923/71782933-25b4b100-2fe0-11ea-9b57-0198f7161535.gif)\n\n### Relay Node Packing\n![](https://user-images.githubusercontent.com/6877923/77270201-808aaa00-6cab-11ea-9028-e671092be194.gif)\n\n### Node Inspector\n![](https://user-images.githubusercontent.com/6877923/87306684-ac5ec380-c518-11ea-9346-1ed47e8cd016.gif)\n\n### Improved Edge Connection\n![](https://user-images.githubusercontent.com/6877923/89890139-272c0480-dbd3-11ea-86f4-696d260f707b.gif)\n\n### Multi-Window support\n![](https://user-images.githubusercontent.com/6877923/89891415-504d9480-dbd5-11ea-8b1d-873031a0677c.gif)\n\n### Field Drawers (Thanks [@TeorikDeli](https://github.com/TeorikDeli)!)\n![](https://user-images.githubusercontent.com/6877923/92417811-775f9d80-f164-11ea-9031-e6b61c98b88e.png)\n\n### Sticky Notes (2020.1 or more required)\n![image](https://user-images.githubusercontent.com/6877923/94344807-208e0b00-0022-11eb-9f93-62acd6478e30.png)\n\n### Vertical Ports\n![image](https://user-images.githubusercontent.com/6877923/106968910-199ea400-674a-11eb-8f0d-76230c3e10c5.png)\n\n### Drag And Drop Objects\n![CreateNodeFromObject](https://user-images.githubusercontent.com/6877923/110240003-20d3f000-7f4a-11eb-8adc-e52340945b74.gif)\n\n### Renamable nodes\n\nJust add this bit of code in your Node script to make it renamable in the UI.\n```CSharp\n        public override bool\tisRenamable => true;\n```\n\n![RenamableNode](https://user-images.githubusercontent.com/6877923/115143209-33ac0b00-a046-11eb-88f9-3216866e3669.gif)\n"
        },
        {
          "name": "UIElementsSchema",
          "type": "tree",
          "content": null
        },
        {
          "name": "UPGRADE-GUIDE.md",
          "type": "blob",
          "size": 2.634765625,
          "content": "# Upgrade to 1.0.0\n\nThe 1.0.0 version of NodeGraphProcessor brings a big change in the serialization system: we removed the JSON serialization system and replaced it by the new [SerializeReference](https://docs.unity3d.com/ScriptReference/SerializeReference.html) attribute.\n\n**The minimum required version is Unity 2020.2.**\n\n:warning: Before upgrading, **backup your data!** It's possible that you loose some data like parameters or nodes in the graph after migration. If you have a backup, you'll be able to patch the part of code that didn't upgraded well and the re-try to migrate.\n\n## Which part was changed?\n\nThe list of nodes and parameters in the graph ScriptableObject is now stored using the [SerializeReference] attribute instead of relying on the old JSON serialization tech.\n\nThis changes will allow us to correctly serialize references of GameObject, having custom property drawers for exposed properties and in the future, use SerializedFields instead of the fieldFactory to display the fields in the nodes (which will bring the support of all field atributes like [Min], [Range], ect.)\n\n## When does the migration occurs?\n\nWhen the graph is deserialized. So it can be either wheen you click on it in the project window, open it or load it from a script in the editor.\n\n## What can break while upgrading\n\nParameters are the most impacted by this change, now you need to write your own parameter class that inherits from `ExposedParameter` to be able to expose a parameter. Like this:\n\n```CSharp\n    [System.Serializable]\n    public class GameObjectParameter : ExposedParameter\n    {\n        [SerializeField] GameObject val;\n\n        public override object value { get => val; set => val = (GameObject)value; }\n        public override Type GetValueType() => typeof(GameObject);\n    }\n```\n\nYou can see the implementation of most common types `ExposedParameter.cs`, and you can still use `GetExposedParameterTypes` in `ExposedParameterView` to filter which exposed parameter is allowed in your graph.\n\nThere is an automatic upgrade path for parameters, but if you have a parameter on a custom type (struct or class), then it won't migrate automatically. So in this situation you can: backup your date first, then upgrade (so the graph breaks), add your exposed parameters in the code and roll back your graph data to the upgrade is triggered again.\n\n## Why is the minimum required version Unity 2020.2 for this version?\n\nMainly because the [SerializeReference] feature was very bugged in versions prior to 2020.2, so it wasn't possible to do this change.\n\nPrevious versions of NodeGraphProcessor are still available in OpenUPM so you can still stay on an older version if you need it.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}