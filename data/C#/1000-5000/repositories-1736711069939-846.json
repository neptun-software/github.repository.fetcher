{
  "metadata": {
    "timestamp": 1736711069939,
    "page": 846,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "scientistproject/Scientist.net",
      "stars": 1471,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.369140625,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.4326171875,
          "content": "# Windows image file caches\nThumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Files left over from merge conflicts\n*.orig\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n\n# Build results\nbin/[Dd]ebug/\nbin/[Rr]elease/\n*_i.c\n*_p.c\n*.ilk\n*.log\n*.meta\n*.obj\n*.pch\nbin/**/*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.vspscc\n.builds\n\n# Roslyn cache directories\n*.ide/\n*.vs/\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n\n# Visual Studio profiler\n*.psess\n*.vsp\n\n# ReSharper is a .NET coding add-in\n_ReSharper*\n\n# Click-Once directory\npublish\n\n# Others\n[Bb]in\n[Oo]bj\nsql\nTestResults\n*.Cache\nClientBin\nstylecop.*\n~$*\n*.dbmdl\nGenerated_Code #added for RIA/Silverlight projects\n*.results.xml\nnunit-*.xml\n*.userprefs\npackaging/\ntools/FAKE.Core\ntools/SourceLink.Fake\ntools/xunit.runner.console\ntools/Octokit.CodeFormatter\ntools/dotnet\n*.ncrunch*\n*.GhostDoc.xml\n\n# FAKE temporary files\n.fake/\n\n# New VS Test Runner creates arbitrary folders with PDBs\n*.pdb\npingme.txt\n\n# ReadTheDocs build output\ndocs/_build\n\n# it's 2015, no need to keep this around when migrating projects\nBackup/\n\n# Let's not commit the NuGet packages\npackages/\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\nBenchmarkDotNet.Artifacts\n"
        },
        {
          "name": "CodeOfConduct.md",
          "type": "blob",
          "size": 4.7841796875,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement on [Gitter](https://gitter.im/scientistproject/community).\n\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\n[https://www.contributor-covenant.org/version/2/0/code_of_conduct.html][v2.0].\n"
        },
        {
          "name": "Contributing.md",
          "type": "blob",
          "size": 4.6875,
          "content": "# Contributing to Scientist.NET\n\n## Table of Contents:\n- [Code of Conduct](#code-of-conduct)\n- [I just have a question](#i-just-have-a-question)\n- [How can i contribute?](#how-can-i-contribute)\n  - [Reporting bugs](#reporting-bugs)\n  - [Suggesting enhancements](#suggesting-enhancements)\n  - [Your first code contribution](#your-first-code-contribution)\n  - [Pull Requests](#pull-requests)\n- [Styleguides](#styleguides)\n  - [Git Commit Messages](#git-commit-messages)\n- [Labels](#labels)\n  - [Issue labels](#issue-labels)\n  - [Topic category labels](#topic-category-labels)\n  - [Pull request labels](#pull-request-labels)\n\n## Code of conduct\n\nThis project and everyone participating in it is governed by the [Code of Conduct](CodeOfConduct.md). By participating, you are expected to uphold this code.\n\nPlease report unacceptable behavior on [Gitter](https://gitter.im/scientistproject/community) to a maintainer.\n\n## I just have a question\n\n> Please don't file an issue to ask a question.\n\n> TODO\n\n\n## How can i contribute?\n\n### Reporting bugs\n\n> TODO\n\n\n### Suggesting enhancements\n\n> TODO\n\n### Your first code contribution\n- [good first issue](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:good+first+issue)\n\n### Pull Requests\n\nPlease follow these steps to have your contribution considered by the maintainers:\n\n- Follow all instructions in [the template](.github/PULL_REQUEST_TEMPLATE/pull_request_template.md)\n- Follow the [styleguides](#styleguides)\n- After you submit your pull request, verify that all [status checks](https://help.github.com/articles/about-status-checks/) are passing<details><summary>What if the status checks are failing?</summary>If a status check is failing, and you believe that the failure is unrelated to your change, please leave a comment on the pull request explaining why you believe the failure is unrelated. A maintainer will re-run the status check for you. If we conclude that the failure was a false positive, then we will open an issue to track that problem with our status check suite.</details>\n\nWhile the prerequisites above must be satisfied prior to having your pull request reviewed, the reviewer(s) may ask you to complete additional design work, tests, or other changes before your pull request can be ultimately accepted.\n\n## Styleguides\n### Git commit messages\nPlease refer to [Conventional commits](https://www.conventionalcommits.org/en/v1.0.0/)\n\n| Type | Usage | Version increment |\n| --- | --- | --- |\n| fix(): | A commit which fixes or patches a bug | x.x.1|\n| feat(): | A commit which introduces a new feature | x.1.x|\n| BREAKING CHANGE: | A commit which has BREAKING CHANGE: in the footer | 1.x.x |\n\n## Labels\n\n### Issue labels\n| Label name | Search | Description |\n| --- | --- | --- |\n| `good first issue` | [search](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:good+first+issue) | Less complex issues which would be good first issues to work on for users who want to contribute. |\n| `help wanted` | [search](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:help+wanted) | The would appreciate help from the community in resolving these issues. |\n\n### Topic category labels\n| Label name | Search | Description |\n| --- | --- | --- |\n| `documentation` | [search](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:) | Related to any type of documentation. |\n| `performance` | [search](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:performance) | Related to performance. |\n| `security` | [search](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:security) | Related to security. |\n\n### Pull request labels\n| Label name | Search | Description |\n| --- | --- | --- |\n| `work-in-progress` | [search](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:work-in-progress) | Pull requests which are still being worked on, more changes will follow. |\n| `needs-review` | [search](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:needs-review) | Pull requests which need code review, and approval from maintainers. |\n| `under-review` | [search](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:under-review) | Pull requests being reviewed by maintainers. |\n| `requires-changes` | [search](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:requires-changes) | Pull requests which need to be updated based on review comments and then reviewed again. |\n| `needs-testing` | [search](https://github.com/scientistproject/Scientist.net/issues?q=is:issue+is:open+label:needs-testing) | Pull requests which need manual testing. |\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.05078125,
          "content": "Copyright (c) 2016 GitHub, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n          \n"
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 0.5283203125,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"CI Builds (aspnetvnext)\" value=\"https://www.myget.org/F/aspnetvnext/\" />\n    <add key=\"CI Builds (aspnetmaster)\" value=\"https://www.myget.org/F/aspnetmaster/\" />\n    <add key=\"CI Builds (xunit)\" value=\"https://www.myget.org/F/xunit/\" />\n    <add key=\"CI Builds (aspcidev)\" value=\"https://www.myget.org/F/aspnetcidev/\" />\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n  </packageSources>\n</configuration>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.42578125,
          "content": "# Scientist.NET\n\nA .NET Port of the [Scientist](https://github.com/github/scientist) library for carefully refactoring critical paths. \n\n[![Build status](https://ci.appveyor.com/api/projects/status/b548cd5okkel3h4x/branch/master?svg=true)](https://ci.appveyor.com/project/shiftkey/scientist-net/branch/master)\n[![Gitter](https://badges.gitter.im/scientistproject/community.svg)](https://gitter.im/scientistproject/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nTo give it a twirl, use NuGet to install: `Install-Package Scientist`\n\n## How do I science?\n\nLet's pretend you're changing the way you handle permissions in a large web app. Tests can help guide your refactoring, but you really want to compare the current and refactored behaviors under load.\n\n```csharp\nusing GitHub;\n\n...\n\npublic bool CanAccess(IUser user)\n{\n    return Scientist.Science<bool>(\"widget-permissions\", experiment =>\n    {\n        experiment.Use(() => IsCollaborator(user)); // old way\n        experiment.Try(() => HasAccess(user)); // new way\n    }); // returns the control value\n}\n```\n\nWrap a `Use` block around the code's original behavior, and wrap `Try` around the new behavior. Invoking `Scientist.Science<T>` will always return whatever the `Use` block returns, but it does a bunch of stuff behind the scenes:\n\n* It decides whether or not to run the `Try` block,\n* Randomizes the order in which `Use` and `Try` blocks are run,\n* Measures the durations of all behaviors,\n* Compares the result of `Try` to the result of `Use`,\n* Swallows (but records) any exceptions raised in the `Try` block, and\n* Publishes all this information.\n\nThe `Use` block is called the **control**. The `Try` block is called the **candidate**.\n\nIf you don't declare any `Try` blocks, none of the Scientist machinery is invoked and the control value is always returned.\n\n## Making science useful\n\n### Publishing results\n\nWhat good is science if you can't publish your results?\n\nBy default results are published in an in-memory publisher. To override this behavior, create your own implementation of `IResultPublisher`:\n\n```csharp\npublic class MyResultPublisher : IResultPublisher\n{\n    public Task Publish<T, TClean>(Result<T, TClean> result)\n    {\n        Logger.Debug($\"Publishing results for experiment '{result.ExperimentName}'\");\n        Logger.Debug($\"Result: {(result.Matched ? \"MATCH\" : \"MISMATCH\")}\");\n        Logger.Debug($\"Control value: {result.Control.Value}\");\n        Logger.Debug($\"Control duration: {result.Control.Duration}\");\n        foreach (var observation in result.Candidates)\n        {\n            Logger.Debug($\"Candidate name: {observation.Name}\");\n            Logger.Debug($\"Candidate value: {observation.Value}\");\n            Logger.Debug($\"Candidate duration: {observation.Duration}\");\n        }\n\n        if (result.Mismatched)\n        {\n            // saved mismatched experiments to DB\n            DbHelpers.SaveExperimentResults(result);\n        }\n\n        return Task.FromResult(0);\n    }\n}\n```\n\nThen set Scientist to use it before running the experiments:\n\n```csharp\nScientist.ResultPublisher = new MyResultPublisher();\n```\n\nAs of v1.0.2, A `IResultPublisher` can also be wrapped in `FireAndForgetResultPublisher` so that result publishing avoids any delays in running experiments and is delegated to another thread:\n\n```csharp\nScientist.ResultPublisher = new FireAndForgetResultPublisher(new MyResultPublisher(onPublisherException));\n```\n\n### Controlling comparison\n\nScientist compares control and candidate values using `==`. To override this behavior, use `Compare` to define how to compare observed values instead:\n\n```csharp\npublic IUser GetCurrentUser(string hash)\n{\n    return Scientist.Science<IUser>(\"get-current-user\", experiment =>\n    {\n        experiment.Compare((x, y) => x.Name == y.Name);\n\n        experiment.Use(() => LookupUser(hash));\n        experiment.Try(() => RetrieveUser(hash));\n    });\n}\n```\n\n### Adding context\n\n\nResults aren't very useful without some way to identify them. Use the `AddContext` method to add to the context for an experiment:\n\n```csharp\npublic IUser GetUserByName(string userName)\n{\n    return Scientist.Science<IUser>(\"get-user-by-name\", experiment =>\n    {\n        experiment.AddContext(\"username\", userName);\n\n        experiment.Use(() => FindUser(userName));\n        experiment.Try(() => GetUser(userName));\n    });\n}\n```\n\n`AddContext` takes a string identifier and an object value, and adds them to an internal `Dictionary`. When you publish the results, you can access the context by using the ```Contexts``` property:\n\n```csharp\npublic class MyResultPublisher : IResultPublisher\n{\n    public Task Publish<T, TClean>(Result<T, TClean> result)\n    {\n        foreach (var kvp in result.Contexts)\n        {\n            Console.WriteLine($\"Key: {kvp.Key}, Value: {kvp.Value}\");\n        }\n        return Task.FromResult(0);\n    }\n}\n```\n\n### Expensive setup\n\nIf an experiment requires expensive setup that should only occur when the experiment is going to be run, define it with the `BeforeRun` method:\n\n```csharp\npublic int DoSomethingExpensive()\n{\n    return Scientist.Science<int>(\"expensive-but-worthwile\", experiment =>\n    {\n        experiment.BeforeRun(() => ExpensiveSetup());\n\n        experiment.Use(() => TheOldWay());\n        experiment.Try(() => TheNewWay());\n    });\n}\n```\n\n### Keeping it clean\n\nSometimes you don't want to store the full value for later analysis. For example, an experiment may return `IUser` instances, but when researching a mismatch, all you care about is the logins. You can define how to clean these values in an experiment:\n\n```csharp\npublic IUser GetUserByEmail(string emailAddress)\n{\n    return Scientist.Science<IUser, string>(\"get-user-by-email\", experiment =>\n    {\n        experiment.Use(() => OldApi.FindUserByEmail(emailAddress));\n        experiment.Try(() => NewApi.GetUserByEmail(emailAddress));\n        \n        experiment.Clean(user => user.Login);\n    });\n}\n```\n\nAnd this cleaned value is available in the final published result:\n\n```csharp\npublic class MyResultPublisher : IResultPublisher\n{\n    public Task Publish<T, TClean>(Result<T, TClean> result)\n    {\n        // result.Control.Value = <IUser object>\n        IUser user = (IUser)result.Control.Value;\n        Console.WriteLine($\"Login from raw object: {user.Login}\");\n        \n        // result.Control.CleanedValue = \"user name\"\n        Console.WriteLine($\"Login from cleaned object: {result.Control.CleanedValue}\");\n        \n        return Task.FromResult(0);\n    }\n}\n```\n\n### Ignoring mismatches\n\nDuring the early stages of an experiment, it's possible that some of your code will always generate a mismatch for reasons you know and understand but haven't yet fixed. Instead of these known cases always showing up as mismatches in your metrics or analysis, you can tell an experiment whether or not to ignore a mismatch using the `Ignore` method. You may include more than one block if needed:\n\n```csharp\npublic bool CanAccess(IUser user)\n{\n    return Scientist.Science<bool>(\"widget-permissions\", experiment =>\n    {\n        experiment.Use(() => IsCollaborator(user));\n        experiment.Try(() => HasAccess(user));\n\n        // user is staff, always an admin in the new system\n        experiment.Ignore((control, candidate) => user.IsStaff);\n        // new system doesn't handle unconfirmed users yet\n        experiment.Ignore((control, candidate) => control && !candidate && !user.ConfirmedEmail);\n    });\n}\n```\n\nThe ignore blocks are only called if the *values* don't match. If one observation raises an exception and the other doesn't, it's always considered a mismatch. If both observations raise different exceptions, that is also considered a mismatch.\n\n### Enabling/disabling experiments\n\nSometimes you don't want an experiment to run. Say, disabling a new codepath for anyone who isn't staff. You can disable an experiment by setting a `RunIf` block. If this returns `false`, the experiment will merely return the control value. Otherwise, it defers to the global `Scientist.Enabled` method.\n\n```csharp\npublic decimal GetUserStatistic(IUser user)\n{\n    return Scientist.Science<decimal>(\"new-statistic-calculation\", experiment =>\n    {\n        experiment.RunIf(() => user.IsTestSubject);\n\n        experiment.Use(() => CalculateStatistic(user));\n        experiment.Try(() => NewCalculateStatistic(user));\n    });\n}\n```\n\n### Ramping up experiments\n\nAs a scientist, you know it's always important to be able to turn your experiment off, lest it run amok and result in villagers with pitchforks on your doorstep. You can set a global switch to control whether or not experiments is enabled by using the `Scientist.Enabled` method.\n\n```csharp\nint percentEnabled = 10;\nRandom rand = new Random();\nScientist.Enabled(() =>\n{\n    return rand.Next(100) < percentEnabled;\n});\n```\n\nThis code will be invoked for every method with an experiment every time, so be sensitive about its performance. For example, you can store an experiment in the database but wrap it in various levels of caching.\n\n### Running candidates in parallel (asynchronous)\n\nScientist runs tasks synchronously by default. This can end up doubling (more or less) the time it takes the original method call to complete, depending on how many candidates are added and how long they take to run.\n\nIn cases where Scientist is used for production refactoring, for example, this ends up causing the calling method to return slower than before which may affect the performance of your original code. However, if the candidates can be run at the same time as the control method without affecting each other, then they can be run in parallel so the Scientist call will only take as long as the slowest task (plus a tiny bit of overhead):\n\n```csharp\nawait Scientist.ScienceAsync<int>(\n\t\"ExperimentName\",\n\t3, // number of tasks to run concurrently \n\texperiment => {\n        experiment.Use(async () => await StartRunningSomething(myData));\n        experiment.Try(async () => await RunAtTheSameTimeAsTheControlMethod(myData));\n        experiment.Try(async () => await AlsoRunThisConcurrently(myData));\n\t});\n```\n\nAs always when using async/await, don't forget to call `.ConfigureAwait(false)` where appropriate.\n\n### Testing\n\nWhen running your test suite, it's helpful to know that the experimental results always match. To help with testing, Scientist has a `ThrowOnMismatches` property that can be set to `true`. Only do this in your test suite!\n\nTo throw on mismatches:\n\n```csharp\nScientist.Science<int>(\"ExperimentN\", experiment => \n{\n    experiment.ThrowOnMismatches = true;\n    // ...\n});\n```\n\nScientist will throw a `MismatchException<T, TClean>` exception if any observations don't match.\n\n### Handling errors\n\nIf an exception is thrown in any of Scientist's internal helpers like `Compare`, `Enabled`, or `Ignore`, the default behavior of Scientist is to re-throw that exception. Since this halts the experiment entirely, it's often a better idea to handle this error and continue so the experiment as a whole isn't canceled entirely:\n\n```csharp\nScientist.Science<int>(\"ExperimentCatch\", experiment =>\n{\n    experiment.Thrown((operation, exception) => InternalTracker.Track($\"Science failure in ExperimentCatch: {operation}.\", exception))\n    // ...\n});\n```\n\nThe operations that may be handled here are:\n\n* `Operation.Compare` - an exception is raised in a `Compare` block\n* `Operation.Enabled` - an exception is raised in the `Enabled` block\n* `Operation.Ignore` - an exception is raised in an `Ignore` block\n* `Operation.Publish` - an exception is raised while publishing results\n* `Operation.RunIf` - an exception is raised in a `RunIf` block\n\n### Designing an experiment\n\nBecause `Enabled` and `RunIf` determine when a candidate runs, it's impossible to guarantee that it will run every time. For this reason, Scientist is only safe for wrapping methods that aren't changing data.\n\nWhen using Scientist, we've found it most useful to modify both the existing and new systems simultaneously anywhere writes happen, and verify the results at read time with `Science`. `ThrowOnMismatches` has also been useful to ensure that the correct data was written during tests, and reviewing published mismatches has helped us find any situations we overlooked with our production data at runtime. When writing to and reading from two systems, it's also useful to write some data reconciliation scripts to verify and clean up production data alongside any running experiments.\n\n### Finishing an experiment\n\nAs your candidate behavior converges on the controls, you'll start thinking about removing an experiment and using the new behavior.\n\n* If there are any ignore blocks, the candidate behavior is *guaranteed* to be different. If this is unacceptable, you'll need to remove the ignore blocks and resolve any ongoing mismatches in behavior until the observations match perfectly every time.\n* When removing a read-behavior experiment, it's a good idea to keep any write-side duplication between an old and new system in place until well after the new behavior has been in production, in case you need to roll back.\n\n## Breaking the rules\n\nSometimes scientists just gotta do weird stuff. We understand.\n\n\n### Ignoring results entirely\n\nScience is useful even when all you care about is the timing data or even whether or not a new code path blew up. If you have the ability to incrementally control how often an experiment runs via your `Enabled` method, you can use it to silently and carefully test new code paths and ignore the results altogether. You can do this by setting `Ignore((x, y) => true)`, or for greater efficiency, `Compare((x, y) => true)`.\n\nThis will still log mismatches if any exceptions are raised, but will disregard the values entirely.\n\n### Trying more than one thing\n\nIt's not usually a good idea to try more than one alternative simultaneously. Behavior isn't guaranteed to be isolated and reporting + visualization get quite a bit harder. Still, it's sometimes useful.\n\nTo try more than one alternative at once, add names to some `Try` blocks:\n\n```csharp\npublic bool CanAccess(IUser user)\n{\n    return Scientist.Science<bool>(\"widget-permissions\", experiment =>\n    {\n        experiment.Use(() => IsCollaborator(user));\n        experiment.Try(\"api\", () => HasAccess(user));\n        experiment.Try(\"raw-sql\", () => HasAccessSql(user));\n    });\n}\n```\n\n## Alternatives\n\nHere are other implementations of Scientist available in different languages.\n\n- [github/scientist](https://github.com/github/scientist) the original implementation of Scientist, in [Ruby](https://www.ruby-lang.org/).\n- [daylerees/scientist](https://github.com/daylerees/scientist) for [PHP](http://php.net/) by [Dayle Rees](https://github.com/daylerees).\n"
        },
        {
          "name": "ReleaseNotes.md",
          "type": "blob",
          "size": 1.06640625,
          "content": "### New in 2.0.0 (Released 2018/06/05)\n\n**Features**\n\n - Make IoC/DI friendlier - #108 via @martincostello\n - Add `FireAndForgetResultPublisher`. Wrap an existing `IResultPublisher` to delegate publishing to another thread and avoid publishing delays when running experiments - #83 via @thematthopkins and @joncloud\n\n### New in 1.0.1 (Released 2016/09/29)\n\nInitial stable release of Scientist.NET, a port of the Ruby Scientist library for carefully refactoring critical paths.\n\n### New in 1.0.0-alpha6 (Released 2016/06/10)\n\n**Features**\n\n - Move to .NET Core RC2 - #61 via @joncloud\n - Add `ThrowOnMismatches` - #53 via @joncloud\n - Add `Thrown` - #56 via @joncloud\n - Cleaned up internals - #58 via @joncloud\n\n### New in 1.0.0-alpha5 (Released 2016/04/14)\n\n**Features**\n\n - Move to .NET Core and target .NET 4.5+ - #37 via @davezych\n - Add `AddContext` - #48 via @davezych\n - Add `Ignore` - #47 via @davezych\n - Add ability to configure multiple `Try` methods - #45 via @davezych\n - Add support for RunIf - #33 via @joncloud\n\n### New in 1.0.0-alpha4 (Released 2016/02/26)\n* Initial release\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.560546875,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 2.0.0   | :white_check_mark: |\n| < 2.0   | :x:                |\n\n## Reporting a Vulnerability\n\nSecurity issues and bugs should be reported privately.\n\n> The best approach at the moment is to message one of the contributors on https://gitter.im/scientistproject/community privately\n> If you dont receive a reply within a couple of days please send the message onto another member\n\nPlease do not open issues for anything you think might have a security implication.\n"
        },
        {
          "name": "Scientist.net.sln",
          "type": "blob",
          "size": 2.4580078125,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 15\nVisualStudioVersion = 15.0.26730.16\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Meta\", \"Meta\", \"{0FF544BE-E75C-4EF7-AEB3-A534ED5D7BB5}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.gitattributes = .gitattributes\n\t\t.gitignore = .gitignore\n\t\tappveyor.yml = appveyor.yml\n\t\tbuild.cmd = build.cmd\n\t\tbuild.fsx = build.fsx\n\t\tLICENSE.txt = LICENSE.txt\n\t\tREADME.md = README.md\n\t\tReleaseNotes.md = ReleaseNotes.md\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Scientist\", \"src\\Scientist\\Scientist.csproj\", \"{AF3E98CD-DA8C-43B2-8217-76B6AE8BCA20}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Scientist.Test\", \"test\\Scientist.Test\\Scientist.Test.csproj\", \"{0686E0A8-FB25-4B20-9BC0-CD05E916E5AD}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Scientist.Benchmark\", \"test\\Scientist.Benchmark\\Scientist.Benchmark.csproj\", \"{243420EF-8A98-4D0F-9E2E-86F4E70C3128}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{AF3E98CD-DA8C-43B2-8217-76B6AE8BCA20}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{AF3E98CD-DA8C-43B2-8217-76B6AE8BCA20}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{AF3E98CD-DA8C-43B2-8217-76B6AE8BCA20}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{AF3E98CD-DA8C-43B2-8217-76B6AE8BCA20}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0686E0A8-FB25-4B20-9BC0-CD05E916E5AD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0686E0A8-FB25-4B20-9BC0-CD05E916E5AD}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0686E0A8-FB25-4B20-9BC0-CD05E916E5AD}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0686E0A8-FB25-4B20-9BC0-CD05E916E5AD}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{243420EF-8A98-4D0F-9E2E-86F4E70C3128}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{243420EF-8A98-4D0F-9E2E-86F4E70C3128}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{243420EF-8A98-4D0F-9E2E-86F4E70C3128}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{243420EF-8A98-4D0F-9E2E-86F4E70C3128}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {8CFF3922-3285-4B9E-9E64-7FC7D5332E56}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.322265625,
          "content": "os: Visual Studio 2017\n\nbuild_script:\n  - cmd: build.cmd BuildApp\n  - cmd: build.cmd RunTests\n  - cmd: build.cmd CreatePackages\n\ntest: off\n\nnuget:\n  project_feed: true\n\nartifacts:\n  - path: 'packaging\\**\\scientist*.nupkg'\n    name: ScientistPackages\n\n# Do not build feature branch with open Pull Requests\nskip_branch_with_pr: true"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.2841796875,
          "content": "@echo off\n\n\"tools\\nuget\\nuget.exe\" \"install\" \"FAKE.Core\" \"-OutputDirectory\" \"tools\" \"-ExcludeVersion\" \"-version\" \"4.4.2\"\n\n:Build\n\nSET TARGET=\"Default\"\n\nIF NOT [%1]==[] (set TARGET=\"%1\")\n\n\"tools\\FAKE.core\\tools\\Fake.exe\" \"build.fsx\" \"target=%TARGET%\" \"buildMode=Release\"\n\nexit /b %errorlevel%"
        },
        {
          "name": "build.fsx",
          "type": "blob",
          "size": 2.8759765625,
          "content": "#r @\"tools/FAKE.Core/tools/FakeLib.dll\"\n\nopen Fake\nopen System\nopen System.Collections.Generic\nopen System.Text\n\nlet buildMode = getBuildParamOrDefault \"buildMode\" \"Release\"\n\nlet versionRegex = \"(<VersionPrefix>)([^\\\"]+)(</VersionPrefix>)\"\n\n//Directories\nlet packagingRoot = __SOURCE_DIRECTORY__ + \"/packaging/\"\nlet packagingDir =  packagingRoot + \"scientist.net\"\nlet buildDir = \"./src/Scientist/bin\"\nlet testBuildDir = \"./test/Scientist.Test/bin\"\n\nlet releaseNotes =\n    ReadFile \"ReleaseNotes.md\"\n    |> ReleaseNotesHelper.parseReleaseNotes\n\n//Helper functions\nlet Run workingDirectory fileName args =\n    let errors = new List<string>()\n    let messages = new List<string>()\n    let timout = TimeSpan.MaxValue\n\n    let error msg =\n        traceError msg\n        errors.Add msg\n\n    let message msg =\n        traceImportant msg\n        messages.Add msg\n\n    let code = \n        ExecProcessWithLambdas (fun info ->\n            info.FileName <- fileName\n            info.WorkingDirectory <- workingDirectory\n            info.Arguments <- args\n        ) timout true error message\n\n    ProcessResult.New code messages errors\n\nlet dotnetExe = \"dotnet.exe\"\n\nlet UpdateProject csprojPath =\n    let fullCsprojPath = (__SOURCE_DIRECTORY__ + csprojPath)\n   \n    let tempReleaseNotes = toLines releaseNotes.Notes\n    RegexReplaceInFileWithEncoding \"<PackageReleaseNotes>.*</PackageReleaseNotes>\" (\"<PackageReleaseNotes>\" + tempReleaseNotes +  \"</PackageReleaseNotes>\") Encoding.UTF8 fullCsprojPath\n    RegexReplaceInFileWithEncoding versionRegex (\"${1}\" + (releaseNotes.NugetVersion) + \"${3}\") Encoding.UTF8 fullCsprojPath\n\nlet SetBuildVersion =\n    setProcessEnvironVar \"DOTNET_BUILD_VERSION\" (environVarOrDefault \"APPVEYOR_BUILD_NUMBER\" \"local\")\n\n//Targets\nTarget \"Clean\" (fun _ ->\n    CleanDirs [packagingDir; packagingRoot; \"artifacts\"; buildDir; testBuildDir]\n)\n\nTarget \"SetupBuild\" (fun _ ->\n    SetBuildVersion\n    \n    Run currentDirectory dotnetExe \"restore\" |> ignore\n)\n\nTarget \"BuildApp\" (fun _ ->\n    Run currentDirectory dotnetExe (\"build .\\\\src\\\\Scientist\\\\ --configuration \" + buildMode) |> ignore\n    Run currentDirectory dotnetExe (\"build .\\\\test\\\\Scientist.Test\\\\ --configuration \" + buildMode + \"\") |> ignore\n)\n\nTarget \"CreatePackages\" (fun _ ->\n    let csprojPath = \"/src/Scientist/Scientist.csproj\"\n\n    UpdateProject csprojPath\n\n    Run currentDirectory dotnetExe (\"pack .\\\\src\\\\Scientist\\\\ --configuration \" + buildMode + \" --output \" + packagingDir) |> ignore\n)\n\nTarget \"RunTests\" (fun _ ->\n \n    let result =\n        Run currentDirectory dotnetExe \"test .\\\\test\\\\Scientist.Test\\\\Scientist.Test.csproj\"\n\n    if result.ExitCode <> 0 then\n        failwith \"Unit tests failed\"\n    ()\n)\n\nTarget \"Default\" DoNothing\n\n//Dependencies\n\"Clean\"\n    ==> \"SetupBuild\"\n    ==> \"BuildApp\"\n    \n\"Clean\"\n    ==> \"SetupBuild\"\n    ==> \"CreatePackages\"\n    \n\"SetupBuild\"\n    ==> \"RunTests\"\n\n\"RunTests\"\n    ==> \"Default\"\n\nRunTargetOrDefault \"Default\""
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}